   1              	 .syntax unified
   2              	 .cpu cortex-m3
   3              	 .fpu softvfp
   4              	 .eabi_attribute 20,1
   5              	 .eabi_attribute 21,1
   6              	 .eabi_attribute 23,3
   7              	 .eabi_attribute 24,1
   8              	 .eabi_attribute 25,1
   9              	 .eabi_attribute 26,1
  10              	 .eabi_attribute 30,1
  11              	 .eabi_attribute 34,1
  12              	 .eabi_attribute 18,4
  13              	 .thumb
  14              	 .file "Motherboard.cc"
  15              	 .text
  16              	.Ltext0:
  17              	 .cfi_sections .debug_frame
  18              	 .section .text._ZN17TemperatureSensorD2Ev,"axG",%progbits,_ZN17TemperatureSensorD5Ev,comdat
  19              	 .align 2
  20              	 .weak _ZN17TemperatureSensorD2Ev
  21              	 .thumb
  22              	 .thumb_func
  24              	_ZN17TemperatureSensorD2Ev:
  25              	.LFB78:
  26              	 .file 1 "src/MightyBoard/shared/TemperatureSensor.hh"
   1:src/MightyBoard/shared/TemperatureSensor.hh **** /*
   2:src/MightyBoard/shared/TemperatureSensor.hh ****  * Copyright 2010 by Adam Mayer	 <adam@makerbot.com>
   3:src/MightyBoard/shared/TemperatureSensor.hh ****  *
   4:src/MightyBoard/shared/TemperatureSensor.hh ****  * This program is free software: you can redistribute it and/or modify
   5:src/MightyBoard/shared/TemperatureSensor.hh ****  * it under the terms of the GNU General Public License as published by
   6:src/MightyBoard/shared/TemperatureSensor.hh ****  * the Free Software Foundation, either version 3 of the License, or
   7:src/MightyBoard/shared/TemperatureSensor.hh ****  * (at your option) any later version.
   8:src/MightyBoard/shared/TemperatureSensor.hh ****  *
   9:src/MightyBoard/shared/TemperatureSensor.hh ****  * This program is distributed in the hope that it will be useful,
  10:src/MightyBoard/shared/TemperatureSensor.hh ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:src/MightyBoard/shared/TemperatureSensor.hh ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:src/MightyBoard/shared/TemperatureSensor.hh ****  * GNU General Public License for more details.
  13:src/MightyBoard/shared/TemperatureSensor.hh ****  *
  14:src/MightyBoard/shared/TemperatureSensor.hh ****  * You should have received a copy of the GNU General Public License
  15:src/MightyBoard/shared/TemperatureSensor.hh ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>
  16:src/MightyBoard/shared/TemperatureSensor.hh ****  */
  17:src/MightyBoard/shared/TemperatureSensor.hh **** 
  18:src/MightyBoard/shared/TemperatureSensor.hh **** #ifndef TEMPERATURE_HH_
  19:src/MightyBoard/shared/TemperatureSensor.hh **** #define TEMPERATURE_HH_
  20:src/MightyBoard/shared/TemperatureSensor.hh **** 
  21:src/MightyBoard/shared/TemperatureSensor.hh **** #include <stdint.h>
  22:src/MightyBoard/shared/TemperatureSensor.hh **** 
  23:src/MightyBoard/shared/TemperatureSensor.hh **** /// Flag specifying that the temperature reading is invalid.
  24:src/MightyBoard/shared/TemperatureSensor.hh **** #define BAD_TEMPERATURE 1024
  25:src/MightyBoard/shared/TemperatureSensor.hh **** 
  26:src/MightyBoard/shared/TemperatureSensor.hh **** /// The temperature sensor interface is a standard interface used to communicate with
  27:src/MightyBoard/shared/TemperatureSensor.hh **** /// things that can sense temperatures.
  28:src/MightyBoard/shared/TemperatureSensor.hh **** /// \ingroup SoftwareLibraries
  29:src/MightyBoard/shared/TemperatureSensor.hh **** class TemperatureSensor {
  30:src/MightyBoard/shared/TemperatureSensor.hh **** protected:
  31:src/MightyBoard/shared/TemperatureSensor.hh ****         /// The last temperature reading from the sensor, in degrees Celcius, or
  32:src/MightyBoard/shared/TemperatureSensor.hh ****         /// #BAD_TEMPERATURE if the last reading is invalid.
  33:src/MightyBoard/shared/TemperatureSensor.hh **** 	volatile uint16_t current_temp;
  34:src/MightyBoard/shared/TemperatureSensor.hh **** public:
  35:src/MightyBoard/shared/TemperatureSensor.hh **** 	virtual ~TemperatureSensor(){};
  27              	 .loc 1 35 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32              	.LVL0:
  33              	.LBB149:
  34              	 .loc 1 35 0
  35 0000 014B     	 ldr r3,.L3
  36 0002 0360     	 str r3,[r0,#0]
  37              	.LBE149:
  38 0004 7047     	 bx lr
  39              	.L4:
  40 0006 00BF     	 .align 2
  41              	.L3:
  42 0008 08000000 	 .word _ZTV17TemperatureSensor+8
  43              	 .cfi_endproc
  44              	.LFE78:
  46              	 .section .text._ZN17TemperatureSensor4initEv,"axG",%progbits,_ZN17TemperatureSensor4initEv,comdat
  47              	 .align 2
  48              	 .weak _ZN17TemperatureSensor4initEv
  49              	 .thumb
  50              	 .thumb_func
  52              	_ZN17TemperatureSensor4initEv:
  53              	.LFB82:
  36:src/MightyBoard/shared/TemperatureSensor.hh **** 	enum SensorState {
  37:src/MightyBoard/shared/TemperatureSensor.hh **** 		SS_OK,              ///< Temperature measured correctly
  38:src/MightyBoard/shared/TemperatureSensor.hh **** 		SS_ADC_BUSY,        ///< Temperature failed to update because ADC is busy
  39:src/MightyBoard/shared/TemperatureSensor.hh **** 		SS_ADC_WAITING,     ///< Temperature failed to update, still waiting for ADC
  40:src/MightyBoard/shared/TemperatureSensor.hh **** 		SS_ERROR_UNPLUGGED  ///< Temperature failed to update, the sensor is unplugged.
  41:src/MightyBoard/shared/TemperatureSensor.hh **** 	};
  42:src/MightyBoard/shared/TemperatureSensor.hh **** 
  43:src/MightyBoard/shared/TemperatureSensor.hh **** 
  44:src/MightyBoard/shared/TemperatureSensor.hh **** 	/// Get the last read temperature from the sensor. Note that you need to call
  45:src/MightyBoard/shared/TemperatureSensor.hh **** 	/// update() at least once for this to return good data.
  46:src/MightyBoard/shared/TemperatureSensor.hh **** 	/// \return The current temperature, in degrees Celcius, or #BAD_TEMPERATURE if the
  47:src/MightyBoard/shared/TemperatureSensor.hh **** 	///         last read failed.
  48:src/MightyBoard/shared/TemperatureSensor.hh **** 	int16_t getTemperature() const { return current_temp; }
  49:src/MightyBoard/shared/TemperatureSensor.hh **** 
  50:src/MightyBoard/shared/TemperatureSensor.hh **** 	/// Initialize the temperature sensor hardware. Must be called before the temperature
  51:src/MightyBoard/shared/TemperatureSensor.hh **** 	/// sensor can be used.
  52:src/MightyBoard/shared/TemperatureSensor.hh **** 	virtual void init() {}
  54              	 .loc 1 52 0
  55              	 .cfi_startproc
  56              	 
  57              	 
  58              	 
  59              	.LVL1:
  60              	 .loc 1 52 0
  61 0000 7047     	 bx lr
  62              	 .cfi_endproc
  63              	.LFE82:
  65 0002 00BF     	 .section .text._ZN14HeatingElementD2Ev,"axG",%progbits,_ZN14HeatingElementD5Ev,comdat
  66              	 .align 2
  67              	 .weak _ZN14HeatingElementD2Ev
  68              	 .thumb
  69              	 .thumb_func
  71              	_ZN14HeatingElementD2Ev:
  72              	.LFB84:
  73              	 .file 2 "src/MightyBoard/shared/HeatingElement.hh"
   1:src/MightyBoard/shared/HeatingElement.hh **** /*
   2:src/MightyBoard/shared/HeatingElement.hh ****  * Copyright 2010 by Adam Mayer	 <adam@makerbot.com>
   3:src/MightyBoard/shared/HeatingElement.hh ****  *
   4:src/MightyBoard/shared/HeatingElement.hh ****  * This program is free software: you can redistribute it and/or modify
   5:src/MightyBoard/shared/HeatingElement.hh ****  * it under the terms of the GNU General Public License as published by
   6:src/MightyBoard/shared/HeatingElement.hh ****  * the Free Software Foundation, either version 3 of the License, or
   7:src/MightyBoard/shared/HeatingElement.hh ****  * (at your option) any later version.
   8:src/MightyBoard/shared/HeatingElement.hh ****  *
   9:src/MightyBoard/shared/HeatingElement.hh ****  * This program is distributed in the hope that it will be useful,
  10:src/MightyBoard/shared/HeatingElement.hh ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:src/MightyBoard/shared/HeatingElement.hh ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:src/MightyBoard/shared/HeatingElement.hh ****  * GNU General Public License for more details.
  13:src/MightyBoard/shared/HeatingElement.hh ****  *
  14:src/MightyBoard/shared/HeatingElement.hh ****  * You should have received a copy of the GNU General Public License
  15:src/MightyBoard/shared/HeatingElement.hh ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>
  16:src/MightyBoard/shared/HeatingElement.hh ****  */
  17:src/MightyBoard/shared/HeatingElement.hh **** 
  18:src/MightyBoard/shared/HeatingElement.hh **** #ifndef HEATINGELEMENT_HH_
  19:src/MightyBoard/shared/HeatingElement.hh **** #define HEATINGELEMENT_HH_
  20:src/MightyBoard/shared/HeatingElement.hh **** 
  21:src/MightyBoard/shared/HeatingElement.hh **** #include <stdint.h>
  22:src/MightyBoard/shared/HeatingElement.hh **** 
  23:src/MightyBoard/shared/HeatingElement.hh **** /// The heating element interface is a standard interface used to communicate with
  24:src/MightyBoard/shared/HeatingElement.hh **** /// things that can control
  25:src/MightyBoard/shared/HeatingElement.hh **** /// \ingroup SoftwareLibraries
  26:src/MightyBoard/shared/HeatingElement.hh **** class HeatingElement {
  27:src/MightyBoard/shared/HeatingElement.hh **** public:
  28:src/MightyBoard/shared/HeatingElement.hh **** 		virtual ~HeatingElement(){};
  74              	 .loc 2 28 0
  75              	 .cfi_startproc
  76              	 
  77              	 
  78              	 
  79              	.LVL2:
  80              	.LBB150:
  81              	 .loc 2 28 0
  82 0000 014B     	 ldr r3,.L8
  83 0002 0360     	 str r3,[r0,#0]
  84              	.LBE150:
  85 0004 7047     	 bx lr
  86              	.L9:
  87 0006 00BF     	 .align 2
  88              	.L8:
  89 0008 08000000 	 .word _ZTV14HeatingElement+8
  90              	 .cfi_endproc
  91              	.LFE84:
  93              	 .section .text._ZN27BuildPlatformHeatingElementD2Ev,"axG",%progbits,_ZN27BuildPlatformHeatingElementD5Ev,comdat
  94              	 .align 2
  95              	 .weak _ZN27BuildPlatformHeatingElementD2Ev
  96              	 .thumb
  97              	 .thumb_func
  99              	_ZN27BuildPlatformHeatingElementD2Ev:
 100              	.LFB138:
 101              	 .file 3 "src/MightyBoard/Motherboard/Motherboard.hh"
   1:src/MightyBoard/Motherboard/Motherboard.hh **** /*
   2:src/MightyBoard/Motherboard/Motherboard.hh ****  * Copyright 2010 by Adam Mayer	 <adam@makerbot.com>
   3:src/MightyBoard/Motherboard/Motherboard.hh ****  *
   4:src/MightyBoard/Motherboard/Motherboard.hh ****  * This program is free software: you can redistribute it and/or modify
   5:src/MightyBoard/Motherboard/Motherboard.hh ****  * it under the terms of the GNU General Public License as published by
   6:src/MightyBoard/Motherboard/Motherboard.hh ****  * the Free Software Foundation, either version 3 of the License, or
   7:src/MightyBoard/Motherboard/Motherboard.hh ****  * (at your option) any later version.
   8:src/MightyBoard/Motherboard/Motherboard.hh ****  *
   9:src/MightyBoard/Motherboard/Motherboard.hh ****  * This program is distributed in the hope that it will be useful,
  10:src/MightyBoard/Motherboard/Motherboard.hh ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:src/MightyBoard/Motherboard/Motherboard.hh ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:src/MightyBoard/Motherboard/Motherboard.hh ****  * GNU General Public License for more details.
  13:src/MightyBoard/Motherboard/Motherboard.hh ****  *
  14:src/MightyBoard/Motherboard/Motherboard.hh ****  * You should have received a copy of the GNU General Public License
  15:src/MightyBoard/Motherboard/Motherboard.hh ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>
  16:src/MightyBoard/Motherboard/Motherboard.hh ****  */
  17:src/MightyBoard/Motherboard/Motherboard.hh **** 
  18:src/MightyBoard/Motherboard/Motherboard.hh **** #ifndef BOARDS_MB40_MOTHERBOARD_HH_
  19:src/MightyBoard/Motherboard/Motherboard.hh **** #define BOARDS_MB40_MOTHERBOARD_HH_
  20:src/MightyBoard/Motherboard/Motherboard.hh **** 
  21:src/MightyBoard/Motherboard/Motherboard.hh **** #include "UART.hh"
  22:src/MightyBoard/Motherboard/Motherboard.hh **** #include "DigiPots.hh"
  23:src/MightyBoard/Motherboard/Motherboard.hh **** #include "Types.hh"
  24:src/MightyBoard/Motherboard/Motherboard.hh **** #include "PSU.hh"
  25:src/MightyBoard/Motherboard/Motherboard.hh **** #include "Configuration.hh"
  26:src/MightyBoard/Motherboard/Motherboard.hh **** #include "Timeout.hh"
  27:src/MightyBoard/Motherboard/Motherboard.hh **** //#include "Menu.hh"
  28:src/MightyBoard/Motherboard/Motherboard.hh **** //#include "InterfaceBoard.hh"
  29:src/MightyBoard/Motherboard/Motherboard.hh **** //#include "LiquidCrystalSerial.hh"
  30:src/MightyBoard/Motherboard/Motherboard.hh **** //#include "ButtonArray.hh"
  31:src/MightyBoard/Motherboard/Motherboard.hh **** #include "Thermistor.hh"
  32:src/MightyBoard/Motherboard/Motherboard.hh **** #include "HeatingElement.hh"
  33:src/MightyBoard/Motherboard/Motherboard.hh **** #include "Heater.hh"
  34:src/MightyBoard/Motherboard/Motherboard.hh **** #include "ExtruderBoard.hh"
  35:src/MightyBoard/Motherboard/Motherboard.hh **** #include "Cutoff.hh"
  36:src/MightyBoard/Motherboard/Motherboard.hh **** 
  37:src/MightyBoard/Motherboard/Motherboard.hh **** enum status_states{
  38:src/MightyBoard/Motherboard/Motherboard.hh **** 	STATUS_NONE = 0,
  39:src/MightyBoard/Motherboard/Motherboard.hh **** 	STATUS_HEAT_INACTIVE_SHUTDOWN = 0x40
  40:src/MightyBoard/Motherboard/Motherboard.hh **** };
  41:src/MightyBoard/Motherboard/Motherboard.hh **** 
  42:src/MightyBoard/Motherboard/Motherboard.hh **** 
  43:src/MightyBoard/Motherboard/Motherboard.hh **** /// Build platform heating element on v34 Extruder controller
  44:src/MightyBoard/Motherboard/Motherboard.hh **** /// \ingroup ECv34
  45:src/MightyBoard/Motherboard/Motherboard.hh **** class BuildPlatformHeatingElement : public HeatingElement {
 102              	 .loc 3 45 0
 103              	 .cfi_startproc
 104              	 
 105              	 
 106              	 
 107              	.LVL3:
 108              	.LBB151:
 109              	.LBB152:
 110              	.LBB153:
 111              	.LBB154:
 112              	 .loc 2 28 0
 113 0000 014B     	 ldr r3,.L13
 114 0002 0360     	 str r3,[r0,#0]
 115              	.LBE154:
 116              	.LBE153:
 117              	.LBE152:
 118              	.LBE151:
 119              	 .loc 3 45 0
 120 0004 7047     	 bx lr
 121              	.L14:
 122 0006 00BF     	 .align 2
 123              	.L13:
 124 0008 08000000 	 .word _ZTV14HeatingElement+8
 125              	 .cfi_endproc
 126              	.LFE138:
 128              	 .section .text._ZN11MotherboardD2Ev,"axG",%progbits,_ZN11MotherboardD5Ev,comdat
 129              	 .align 2
 130              	 .weak _ZN11MotherboardD2Ev
 131              	 .thumb
 132              	 .thumb_func
 134              	_ZN11MotherboardD2Ev:
 135              	.LFB166:
  46:src/MightyBoard/Motherboard/Motherboard.hh **** public:
  47:src/MightyBoard/Motherboard/Motherboard.hh **** 	void setHeatingElement(uint8_t value);
  48:src/MightyBoard/Motherboard/Motherboard.hh **** };
  49:src/MightyBoard/Motherboard/Motherboard.hh **** 
  50:src/MightyBoard/Motherboard/Motherboard.hh **** /// Main class for Motherboard version 4.0+ (Gen4 electronics)
  51:src/MightyBoard/Motherboard/Motherboard.hh **** /// \ingroup HardwareLibraries
  52:src/MightyBoard/Motherboard/Motherboard.hh **** /// \ingroup MBv40
  53:src/MightyBoard/Motherboard/Motherboard.hh **** class Motherboard {
 136              	 .loc 3 53 0
 137              	 .cfi_startproc
 138              	 
 139              	 
 140              	 
 141              	.LVL4:
 142              	.LBB155:
 143              	.LBB156:
 144              	.LBB157:
 145              	.LBB158:
 146              	.LBB159:
 147              	.LBB160:
 148              	 .loc 2 28 0
 149 0000 0649     	 ldr r1,.L31
 150 0002 C0F80812 	 str r1,[r0,#520]
 151              	.LVL5:
 152              	.LBE160:
 153              	.LBE159:
 154              	.LBE158:
 155              	.LBE157:
 156              	.LBE156:
 157              	.LBE155:
 158              	.LBB161:
 159              	.LBB162:
 160              	.LBB163:
 161              	.LBB164:
 162              	.LBB165:
 163              	.LBB166:
  35:src/MightyBoard/shared/TemperatureSensor.hh **** 	virtual ~TemperatureSensor(){};
 164              	 .loc 1 35 0
 165 0006 064A     	 ldr r2,.L31+4
 166 0008 C0F8E821 	 str r2,[r0,#488]
 167              	.LVL6:
 168              	.LBE166:
 169              	.LBE165:
 170              	.LBE164:
 171              	.LBE163:
 172              	.LBE162:
 173              	.LBE161:
 174              	.LBB167:
 175              	.LBB168:
 176              	.LBB169:
 177              	.LBB170:
 178              	.LBB171:
 179              	.LBB172:
 180              	.LBB173:
 181              	.LBB174:
 182              	 .loc 2 28 0
 183 000c C0F82811 	 str r1,[r0,#296]
 184              	.LVL7:
 185              	.LBE174:
 186              	.LBE173:
 187              	.LBE172:
 188              	.LBE171:
 189              	.LBE170:
 190              	.LBE169:
 191              	.LBB175:
 192              	.LBB176:
 193              	.LBB177:
 194              	.LBB178:
 195              	.LBB179:
 196              	.LBB180:
  35:src/MightyBoard/shared/TemperatureSensor.hh **** 	virtual ~TemperatureSensor(){};
 197              	 .loc 1 35 0
 198 0010 C0F80821 	 str r2,[r0,#264]
 199              	.LVL8:
 200              	.LBE180:
 201              	.LBE179:
 202              	.LBE178:
 203              	.LBE177:
 204              	.LBE176:
 205              	.LBE175:
 206              	.LBE168:
 207              	.LBE167:
 208              	.LBB181:
 209              	.LBB182:
 210              	.LBB183:
 211              	.LBB184:
 212              	.LBB185:
 213              	.LBB186:
 214              	.LBB187:
 215              	.LBB188:
 216              	 .loc 2 28 0
 217 0014 8164     	 str r1,[r0,#72]
 218              	.LVL9:
 219              	.LBE188:
 220              	.LBE187:
 221              	.LBE186:
 222              	.LBE185:
 223              	.LBE184:
 224              	.LBE183:
 225              	.LBB189:
 226              	.LBB190:
 227              	.LBB191:
 228              	.LBB192:
 229              	.LBB193:
 230              	.LBB194:
  35:src/MightyBoard/shared/TemperatureSensor.hh **** 	virtual ~TemperatureSensor(){};
 231              	 .loc 1 35 0
 232 0016 8262     	 str r2,[r0,#40]
 233              	.LBE194:
 234              	.LBE193:
 235              	.LBE192:
 236              	.LBE191:
 237              	.LBE190:
 238              	.LBE189:
 239              	.LBE182:
 240              	.LBE181:
 241              	 .loc 3 53 0
 242 0018 7047     	 bx lr
 243              	.L32:
 244 001a 00BF     	 .align 2
 245              	.L31:
 246 001c 08000000 	 .word _ZTV14HeatingElement+8
 247 0020 08000000 	 .word _ZTV17TemperatureSensor+8
 248              	 .cfi_endproc
 249              	.LFE166:
 251              	 .section .text._ZN27BuildPlatformHeatingElementD0Ev,"axG",%progbits,_ZN27BuildPlatformHeatingElementD5Ev,comdat
 252              	 .align 2
 253              	 .weak _ZN27BuildPlatformHeatingElementD0Ev
 254              	 .thumb
 255              	 .thumb_func
 257              	_ZN27BuildPlatformHeatingElementD0Ev:
 258              	.LFB140:
  45:src/MightyBoard/Motherboard/Motherboard.hh **** class BuildPlatformHeatingElement : public HeatingElement {
 259              	 .loc 3 45 0
 260              	 .cfi_startproc
 261              	 
 262              	 
 263              	.LVL10:
 264 0000 10B5     	 push {r4,lr}
 265              	.LCFI0:
 266              	 .cfi_def_cfa_offset 8
 267              	 .cfi_offset 14,-4
 268              	 .cfi_offset 4,-8
 269 0002 0446     	 mov r4,r0
 270              	.LVL11:
 271              	.LBB195:
 272              	.LBB196:
 273              	.LBB197:
 274              	.LBB198:
 275              	.LBB199:
 276              	.LBB200:
 277              	 .loc 2 28 0
 278 0004 024B     	 ldr r3,.L37
 279 0006 0360     	 str r3,[r0,#0]
 280              	.LBE200:
 281              	.LBE199:
 282              	.LBE198:
 283              	.LBE197:
 284              	.LBE196:
 285              	.LBE195:
  45:src/MightyBoard/Motherboard/Motherboard.hh **** class BuildPlatformHeatingElement : public HeatingElement {
 286              	 .loc 3 45 0
 287 0008 FFF7FEFF 	 bl _ZdlPv
 288              	.LVL12:
 289 000c 2046     	 mov r0,r4
 290 000e 10BD     	 pop {r4,pc}
 291              	.L38:
 292              	 .align 2
 293              	.L37:
 294 0010 08000000 	 .word _ZTV14HeatingElement+8
 295              	 .cfi_endproc
 296              	.LFE140:
 298              	 .section .text._ZN14HeatingElementD0Ev,"axG",%progbits,_ZN14HeatingElementD5Ev,comdat
 299              	 .align 2
 300              	 .weak _ZN14HeatingElementD0Ev
 301              	 .thumb
 302              	 .thumb_func
 304              	_ZN14HeatingElementD0Ev:
 305              	.LFB86:
 306              	 .loc 2 28 0
 307              	 .cfi_startproc
 308              	 
 309              	 
 310              	.LVL13:
 311 0000 10B5     	 push {r4,lr}
 312              	.LCFI1:
 313              	 .cfi_def_cfa_offset 8
 314              	 .cfi_offset 14,-4
 315              	 .cfi_offset 4,-8
 316 0002 0446     	 mov r4,r0
 317              	.LVL14:
 318              	.LBB201:
 319              	.LBB202:
 320              	.LBB203:
 321              	 .loc 2 28 0
 322 0004 024B     	 ldr r3,.L42
 323 0006 0360     	 str r3,[r0,#0]
 324              	.LBE203:
 325              	.LBE202:
 326              	.LBE201:
 327 0008 FFF7FEFF 	 bl _ZdlPv
 328              	.LVL15:
 329 000c 2046     	 mov r0,r4
 330 000e 10BD     	 pop {r4,pc}
 331              	.L43:
 332              	 .align 2
 333              	.L42:
 334 0010 08000000 	 .word _ZTV14HeatingElement+8
 335              	 .cfi_endproc
 336              	.LFE86:
 338              	 .section .text._ZN17TemperatureSensorD0Ev,"axG",%progbits,_ZN17TemperatureSensorD5Ev,comdat
 339              	 .align 2
 340              	 .weak _ZN17TemperatureSensorD0Ev
 341              	 .thumb
 342              	 .thumb_func
 344              	_ZN17TemperatureSensorD0Ev:
 345              	.LFB80:
  35:src/MightyBoard/shared/TemperatureSensor.hh **** 	virtual ~TemperatureSensor(){};
 346              	 .loc 1 35 0
 347              	 .cfi_startproc
 348              	 
 349              	 
 350              	.LVL16:
 351 0000 10B5     	 push {r4,lr}
 352              	.LCFI2:
 353              	 .cfi_def_cfa_offset 8
 354              	 .cfi_offset 14,-4
 355              	 .cfi_offset 4,-8
 356 0002 0446     	 mov r4,r0
 357              	.LVL17:
 358              	.LBB204:
 359              	.LBB205:
 360              	.LBB206:
  35:src/MightyBoard/shared/TemperatureSensor.hh **** 	virtual ~TemperatureSensor(){};
 361              	 .loc 1 35 0
 362 0004 024B     	 ldr r3,.L47
 363 0006 0360     	 str r3,[r0,#0]
 364              	.LBE206:
 365              	.LBE205:
 366              	.LBE204:
 367 0008 FFF7FEFF 	 bl _ZdlPv
 368              	.LVL18:
 369 000c 2046     	 mov r0,r4
 370 000e 10BD     	 pop {r4,pc}
 371              	.L48:
 372              	 .align 2
 373              	.L47:
 374 0010 08000000 	 .word _ZTV17TemperatureSensor+8
 375              	 .cfi_endproc
 376              	.LFE80:
 378              	 .section .text._ZN27BuildPlatformHeatingElement17setHeatingElementEh,"ax",%progbits
 379              	 .align 2
 380              	 .global _ZN27BuildPlatformHeatingElement17setHeatingElementEh
 381              	 .thumb
 382              	 .thumb_func
 384              	_ZN27BuildPlatformHeatingElement17setHeatingElementEh:
 385              	.LFB163:
 386              	 .file 4 "src/MightyBoard/Motherboard/Motherboard.cc"
   1:src/MightyBoard/Motherboard/Motherboard.cc **** /*
   2:src/MightyBoard/Motherboard/Motherboard.cc ****  * Copyright 2010 by Adam Mayer	 <adam@makerbot.com>
   3:src/MightyBoard/Motherboard/Motherboard.cc ****  *
   4:src/MightyBoard/Motherboard/Motherboard.cc ****  * This program is free software: you can redistribute it and/or modify
   5:src/MightyBoard/Motherboard/Motherboard.cc ****  * it under the terms of the GNU General Public License as published by
   6:src/MightyBoard/Motherboard/Motherboard.cc ****  * the Free Software Foundation, either version 3 of the License, or
   7:src/MightyBoard/Motherboard/Motherboard.cc ****  * (at your option) any later version.
   8:src/MightyBoard/Motherboard/Motherboard.cc ****  *
   9:src/MightyBoard/Motherboard/Motherboard.cc ****  * This program is distributed in the hope that it will be useful,
  10:src/MightyBoard/Motherboard/Motherboard.cc ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:src/MightyBoard/Motherboard/Motherboard.cc ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:src/MightyBoard/Motherboard/Motherboard.cc ****  * GNU General Public License for more details.
  13:src/MightyBoard/Motherboard/Motherboard.cc ****  *
  14:src/MightyBoard/Motherboard/Motherboard.cc ****  * You should have received a copy of the GNU General Public License
  15:src/MightyBoard/Motherboard/Motherboard.cc ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>
  16:src/MightyBoard/Motherboard/Motherboard.cc ****  */
  17:src/MightyBoard/Motherboard/Motherboard.cc **** 
  18:src/MightyBoard/Motherboard/Motherboard.cc **** #include <stdint.h>
  19:src/MightyBoard/Motherboard/Motherboard.cc **** //#include <avr/interrupt.h>
  20:src/MightyBoard/Motherboard/Motherboard.cc **** //#include <avr/io.h>
  21:src/MightyBoard/Motherboard/Motherboard.cc **** //#include <util/atomic.h>
  22:src/MightyBoard/Motherboard/Motherboard.cc **** #include "Motherboard.hh"
  23:src/MightyBoard/Motherboard/Motherboard.cc **** #include "Configuration.hh"
  24:src/MightyBoard/Motherboard/Motherboard.cc **** #include "Steppers.hh"
  25:src/MightyBoard/Motherboard/Motherboard.cc **** #include "Planner.hh"
  26:src/MightyBoard/Motherboard/Motherboard.cc **** #include "Command.hh"
  27:src/MightyBoard/Motherboard/Motherboard.cc **** //#include "Interface.hh"
  28:src/MightyBoard/Motherboard/Motherboard.cc **** #include "Commands.hh"
  29:src/MightyBoard/Motherboard/Motherboard.cc **** #include "Eeprom.hh"
  30:src/MightyBoard/Motherboard/Motherboard.cc **** #include "EepromMap.hh"
  31:src/MightyBoard/Motherboard/Motherboard.cc **** #include "SoftI2cManager.hh"
  32:src/MightyBoard/Motherboard/Motherboard.cc **** #include "Piezo.hh"
  33:src/MightyBoard/Motherboard/Motherboard.cc **** #include "RGB_LED.hh"
  34:src/MightyBoard/Motherboard/Motherboard.cc **** #include "Errors.hh"
  35:src/MightyBoard/Motherboard/Motherboard.cc **** //#include <avr/eeprom.h>
  36:src/MightyBoard/Motherboard/Motherboard.cc **** //#include <util/delay.h>
  37:src/MightyBoard/Motherboard/Motherboard.cc **** #include "Menu_locales.hh"
  38:src/MightyBoard/Motherboard/Motherboard.cc **** #include "Host.hh"
  39:src/MightyBoard/Motherboard/Motherboard.cc **** 
  40:src/MightyBoard/Motherboard/Motherboard.cc **** #include "Pin.hh"
  41:src/MightyBoard/Motherboard/Motherboard.cc **** #include "Delay.hh"
  42:src/MightyBoard/Motherboard/Motherboard.cc **** extern "C" {
  43:src/MightyBoard/Motherboard/Motherboard.cc **** 	#include "lpc17xx_timer.h"
  44:src/MightyBoard/Motherboard/Motherboard.cc **** 	#include "LPC17xx.h"
  45:src/MightyBoard/Motherboard/Motherboard.cc **** 	#include "lpc17xx_nvic.h"
  46:src/MightyBoard/Motherboard/Motherboard.cc **** 	#include "comm.h"
  47:src/MightyBoard/Motherboard/Motherboard.cc **** #include "lpc17xx_clkpwr.h"
  48:src/MightyBoard/Motherboard/Motherboard.cc **** }
  49:src/MightyBoard/Motherboard/Motherboard.cc **** 
  50:src/MightyBoard/Motherboard/Motherboard.cc **** /// Instantiate static motherboard instance
  51:src/MightyBoard/Motherboard/Motherboard.cc **** Motherboard Motherboard::motherboard;
  52:src/MightyBoard/Motherboard/Motherboard.cc **** 
  53:src/MightyBoard/Motherboard/Motherboard.cc **** /// Create motherboard object
  54:src/MightyBoard/Motherboard/Motherboard.cc **** Motherboard::Motherboard() :
  55:src/MightyBoard/Motherboard/Motherboard.cc **** //        lcd(LCD_STROBE, LCD_DATA, LCD_CLK),
  56:src/MightyBoard/Motherboard/Motherboard.cc **** //        interfaceBoard(buttonArray,
  57:src/MightyBoard/Motherboard/Motherboard.cc ****  //           lcd,
  58:src/MightyBoard/Motherboard/Motherboard.cc ****  //           INTERFACE_GLED,
  59:src/MightyBoard/Motherboard/Motherboard.cc **** //            INTERFACE_RLED,
  60:src/MightyBoard/Motherboard/Motherboard.cc **** //            &mainMenu,
  61:src/MightyBoard/Motherboard/Motherboard.cc **** //            &monitorMode,
  62:src/MightyBoard/Motherboard/Motherboard.cc **** //            &messageScreen),
  63:src/MightyBoard/Motherboard/Motherboard.cc ****             platform_thermistor(PLATFORM_PIN,0),
  64:src/MightyBoard/Motherboard/Motherboard.cc ****             platform_heater(platform_thermistor,platform_element,SAMPLE_INTERVAL_MICROS_THERMISTOR,
  65:src/MightyBoard/Motherboard/Motherboard.cc ****             		eeprom_offsets::T0_DATA_BASE + toolhead_eeprom_offsets::HBP_PID_BASE, false), //TRICK
  66:src/MightyBoard/Motherboard/Motherboard.cc **** 			using_platform(true),
  67:src/MightyBoard/Motherboard/Motherboard.cc **** 			Extruder_One(0, EX1_PWR, EX1_FAN, THERMOCOUPLE_CS1,eeprom_offsets::T0_DATA_BASE),
  68:src/MightyBoard/Motherboard/Motherboard.cc **** 			Extruder_Two(1, EX2_PWR, EX2_FAN, THERMOCOUPLE_CS2,eeprom_offsets::T1_DATA_BASE)
  69:src/MightyBoard/Motherboard/Motherboard.cc **** {
  70:src/MightyBoard/Motherboard/Motherboard.cc **** }
  71:src/MightyBoard/Motherboard/Motherboard.cc **** 
  72:src/MightyBoard/Motherboard/Motherboard.cc **** void Motherboard::initClocks(){
  73:src/MightyBoard/Motherboard/Motherboard.cc **** 
  74:src/MightyBoard/Motherboard/Motherboard.cc **** 	// Reset and configure timer 0, the piezo buzzer timer
  75:src/MightyBoard/Motherboard/Motherboard.cc **** 	// Mode: Phase-correct PWM with OCRnA (WGM2:0 = 101)
  76:src/MightyBoard/Motherboard/Motherboard.cc **** 	// Prescaler: set on call by piezo function
  77:src/MightyBoard/Motherboard/Motherboard.cc **** //	TCCR0A = 0b01;//0b00000011; ////// default mode off / phase correct piezo   
  78:src/MightyBoard/Motherboard/Motherboard.cc **** //	TCCR0B = 0b01;//0b00001001; //default pre-scaler 1/1
  79:src/MightyBoard/Motherboard/Motherboard.cc **** //	OCR0A = 0;
  80:src/MightyBoard/Motherboard/Motherboard.cc **** //	OCR0B = 0;
  81:src/MightyBoard/Motherboard/Motherboard.cc **** //	TIMSK0 = 0b00000000; //interrupts default to off   
  82:src/MightyBoard/Motherboard/Motherboard.cc **** 	
  83:src/MightyBoard/Motherboard/Motherboard.cc **** 	// Reset and configure timer 3, the microsecond and stepper // Steppers only now!
  84:src/MightyBoard/Motherboard/Motherboard.cc **** 	// interrupt timer.
  85:src/MightyBoard/Motherboard/Motherboard.cc **** 
  86:src/MightyBoard/Motherboard/Motherboard.cc **** 	TIM_TIMERCFG_Type TMR0_Cfg;
  87:src/MightyBoard/Motherboard/Motherboard.cc **** 	TIM_MATCHCFG_Type TMR0_Match;
  88:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR0_Cfg.PrescaleOption = TIM_PRESCALE_USVAL;
  89:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR0_Cfg.PrescaleValue = 10;
  90:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR0_Match.MatchChannel = TIM_MR0_INT;
  91:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR0_Match.IntOnMatch = ENABLE;
  92:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR0_Match.ResetOnMatch = ENABLE;
  93:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR0_Match.StopOnMatch = DISABLE;
  94:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR0_Match.ExtMatchOutputType = TIM_EXTMATCH_NOTHING;
  95:src/MightyBoard/Motherboard/Motherboard.cc **** 	// Set Match value, count value of 100 (10 * 10000uS = 100000us = 1s --> 10 Hz)
  96:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR0_Match.MatchValue = INTERVAL_IN_MICROSECONDS; // 16 for 16mhz avr
  97:src/MightyBoard/Motherboard/Motherboard.cc **** 	// Set configuration for Tim_config and Tim_MatchConfig
  98:src/MightyBoard/Motherboard/Motherboard.cc **** 	TIM_Init(LPC_TIM0, TIM_TIMER_MODE, &TMR0_Cfg);
  99:src/MightyBoard/Motherboard/Motherboard.cc **** 	TIM_ConfigMatch(LPC_TIM0, &TMR0_Match);
 100:src/MightyBoard/Motherboard/Motherboard.cc **** 	// 0 top priority 32 lowest
 101:src/MightyBoard/Motherboard/Motherboard.cc **** 	NVIC_SetPriority(TIMER0_IRQn, 1);
 102:src/MightyBoard/Motherboard/Motherboard.cc **** 	TIM_Cmd(LPC_TIM0,ENABLE);
 103:src/MightyBoard/Motherboard/Motherboard.cc **** 	NVIC_EnableIRQ(TIMER0_IRQn);
 104:src/MightyBoard/Motherboard/Motherboard.cc **** //	TCCR3A = 0x00;
 105:src/MightyBoard/Motherboard/Motherboard.cc **** //	TCCR3B = 0x09; // no prescaling
 106:src/MightyBoard/Motherboard/Motherboard.cc **** //	TCCR3C = 0x00;
 107:src/MightyBoard/Motherboard/Motherboard.cc **** //	OCR3A = INTERVAL_IN_MICROSECONDS * 16;
 108:src/MightyBoard/Motherboard/Motherboard.cc **** //	TIMSK3 = 0x02; // turn on OCR3A match interrupt
 109:src/MightyBoard/Motherboard/Motherboard.cc **** 	
 110:src/MightyBoard/Motherboard/Motherboard.cc **** 	// Reset and configure timer 2, the microsecond timer and debug LED flasher timer.
 111:src/MightyBoard/Motherboard/Motherboard.cc **** //	TCCR2A = 0x00;
 112:src/MightyBoard/Motherboard/Motherboard.cc **** //	TCCR2B = 0x0A; /// prescaler at 1/8
 113:src/MightyBoard/Motherboard/Motherboard.cc **** //	OCR2A = INTERVAL_IN_MICROSECONDS;  // TODO: update PWM settings to make overflowtime adjustable 
 114:src/MightyBoard/Motherboard/Motherboard.cc **** //	OCR2B = 0;
 115:src/MightyBoard/Motherboard/Motherboard.cc **** //	TIMSK2 = 0x02; // turn on OCR5A match interrupt
 116:src/MightyBoard/Motherboard/Motherboard.cc **** 
 117:src/MightyBoard/Motherboard/Motherboard.cc **** 	
 118:src/MightyBoard/Motherboard/Motherboard.cc **** /*	// reset and configure timer 5 - not currently being used
 119:src/MightyBoard/Motherboard/Motherboard.cc **** 	TCCR5A = 0x00;  
 120:src/MightyBoard/Motherboard/Motherboard.cc **** 	TCCR5B = 0x09;
 121:src/MightyBoard/Motherboard/Motherboard.cc **** 	OCR5A =  0;
 122:src/MightyBoard/Motherboard/Motherboard.cc **** 	OCR5B = 0;
 123:src/MightyBoard/Motherboard/Motherboard.cc **** 	TIMSK5 = 0x0; */
 124:src/MightyBoard/Motherboard/Motherboard.cc **** 	
 125:src/MightyBoard/Motherboard/Motherboard.cc **** 	// reset and configure timer 1, the Extruder Two PWM timer
 126:src/MightyBoard/Motherboard/Motherboard.cc **** 	// Mode: Fast PWM with TOP=0xFF (8bit) (WGM3:0 = 0101), cycle freq= 976 Hz
 127:src/MightyBoard/Motherboard/Motherboard.cc **** 	// Prescaler: 1/64 (250 KHz)
 128:src/MightyBoard/Motherboard/Motherboard.cc **** 	TIM_TIMERCFG_Type TMR3_Cfg;
 129:src/MightyBoard/Motherboard/Motherboard.cc **** 	TIM_MATCHCFG_Type TMR3_Match;
 130:src/MightyBoard/Motherboard/Motherboard.cc **** 	// On reset, Timer0/1 are enabled (PCTIM0/1 = 1), and Timer2/3 are disabled (PCTIM2/3 = 0).
 131:src/MightyBoard/Motherboard/Motherboard.cc **** 	// Initialize timer 1, prescale count time of 100uS
 132:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR3_Cfg.PrescaleOption = TIM_PRESCALE_USVAL;
 133:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR3_Cfg.PrescaleValue = 1; // reset to 1 - 1uS
 134:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR3_Match.MatchChannel = TIM_MR0_INT;
 135:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR3_Match.IntOnMatch = ENABLE;
 136:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR3_Match.ResetOnMatch = ENABLE;
 137:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR3_Match.StopOnMatch = DISABLE;
 138:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR3_Match.ExtMatchOutputType = TIM_EXTMATCH_NOTHING;
 139:src/MightyBoard/Motherboard/Motherboard.cc **** 	// Set Match value, count value of INTERVAL_IN_MICROSECONDS (64 * 1uS = 64us )
 140:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR3_Match.MatchValue = INTERVAL_IN_MICROSECONDS;
 141:src/MightyBoard/Motherboard/Motherboard.cc **** 	// Set configuration for Tim_config and Tim_MatchConfig
 142:src/MightyBoard/Motherboard/Motherboard.cc **** 	TIM_Init(LPC_TIM3, TIM_TIMER_MODE, &TMR3_Cfg);
 143:src/MightyBoard/Motherboard/Motherboard.cc **** 	TIM_ConfigMatch(LPC_TIM3, &TMR3_Match);
 144:src/MightyBoard/Motherboard/Motherboard.cc **** 	NVIC_SetPriority(TIMER3_IRQn, 0);
 145:src/MightyBoard/Motherboard/Motherboard.cc **** 	TIM_Cmd(LPC_TIM3,ENABLE);
 146:src/MightyBoard/Motherboard/Motherboard.cc **** 	NVIC_EnableIRQ(TIMER3_IRQn);
 147:src/MightyBoard/Motherboard/Motherboard.cc **** //	TCCR1A = 0b00000001;
 148:src/MightyBoard/Motherboard/Motherboard.cc **** //	TCCR1B = 0b00001011; /// set to PWM mode
 149:src/MightyBoard/Motherboard/Motherboard.cc **** //	OCR1A = 0;
 150:src/MightyBoard/Motherboard/Motherboard.cc **** //	OCR1B = 0;
 151:src/MightyBoard/Motherboard/Motherboard.cc **** //	TIMSK1 = 0b00000000; // no interrupts needed
 152:src/MightyBoard/Motherboard/Motherboard.cc **** 	
 153:src/MightyBoard/Motherboard/Motherboard.cc **** 	// reset and configure timer 2, the Extruder One PWM timer
 154:src/MightyBoard/Motherboard/Motherboard.cc **** 	// Mode: Fast PWM with TOP=0xFF (8bit) (WGM3:0 = 0101), cycle freq= 976 Hz
 155:src/MightyBoard/Motherboard/Motherboard.cc **** 	// Prescaler: 1/64 (250 KHz)
 156:src/MightyBoard/Motherboard/Motherboard.cc **** 	TIM_TIMERCFG_Type TMR2_Cfg;
 157:src/MightyBoard/Motherboard/Motherboard.cc **** 	TIM_MATCHCFG_Type TMR2_Match;
 158:src/MightyBoard/Motherboard/Motherboard.cc **** 	// On reset, Timer0/1 are enabled (PCTIM0/1 = 1), and Timer2/3 are disabled (PCTIM2/3 = 0).
 159:src/MightyBoard/Motherboard/Motherboard.cc **** 	// Initialize timer 1, prescale count time of 100uS
 160:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR2_Cfg.PrescaleOption = TIM_PRESCALE_USVAL;
 161:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR2_Cfg.PrescaleValue = 1; // reset to 1 - 1uS
 162:src/MightyBoard/Motherboard/Motherboard.cc **** 	// Use channel 1, MR1
 163:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR2_Match.MatchChannel = TIM_MR0_INT;
 164:src/MightyBoard/Motherboard/Motherboard.cc **** 	// Enable interrupt when MR0 matches the value in TC register
 165:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR2_Match.IntOnMatch = ENABLE;
 166:src/MightyBoard/Motherboard/Motherboard.cc **** 	// Enable reset on MR0: TIMER will reset if MR0 matches it
 167:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR2_Match.ResetOnMatch = ENABLE;
 168:src/MightyBoard/Motherboard/Motherboard.cc **** 	// Don't stop on MR0 if MR0 matches it
 169:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR2_Match.StopOnMatch = DISABLE;
 170:src/MightyBoard/Motherboard/Motherboard.cc **** 	// Do nothing for external output pin if match (see cmsis help, there are another options)
 171:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR2_Match.ExtMatchOutputType = TIM_EXTMATCH_NOTHING;
 172:src/MightyBoard/Motherboard/Motherboard.cc **** 	// Set Match value, count value of INTERVAL_IN_MICROSECONDS (64 * 1uS = 64us )
 173:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR2_Match.MatchValue = INTERVAL_IN_MICROSECONDS;// *10000;
 174:src/MightyBoard/Motherboard/Motherboard.cc **** 	// Set configuration for Tim_config and Tim_MatchConfig
 175:src/MightyBoard/Motherboard/Motherboard.cc **** 	TIM_Init(LPC_TIM2, TIM_TIMER_MODE, &TMR2_Cfg);
 176:src/MightyBoard/Motherboard/Motherboard.cc **** 	TIM_ConfigMatch(LPC_TIM2, &TMR2_Match);
 177:src/MightyBoard/Motherboard/Motherboard.cc **** 	NVIC_SetPriority(TIMER2_IRQn, 4);
 178:src/MightyBoard/Motherboard/Motherboard.cc **** 	TIM_Cmd(LPC_TIM2,ENABLE);
 179:src/MightyBoard/Motherboard/Motherboard.cc **** 	NVIC_EnableIRQ(TIMER2_IRQn);
 180:src/MightyBoard/Motherboard/Motherboard.cc **** //	TCCR4A = 0b00000001;
 181:src/MightyBoard/Motherboard/Motherboard.cc **** //	TCCR4B = 0b00001011; /// set to PWM mode
 182:src/MightyBoard/Motherboard/Motherboard.cc **** //	OCR4A = 0;
 183:src/MightyBoard/Motherboard/Motherboard.cc **** //	OCR4B = 0;
 184:src/MightyBoard/Motherboard/Motherboard.cc **** //	TIMSK4 = 0b00000000; // no interrupts needed
 185:src/MightyBoard/Motherboard/Motherboard.cc **** }
 186:src/MightyBoard/Motherboard/Motherboard.cc **** /// Reset the motherboard to its initial state.
 187:src/MightyBoard/Motherboard/Motherboard.cc **** /// This only resets the board, and does not send a reset
 188:src/MightyBoard/Motherboard/Motherboard.cc **** /// to any attached toolheads.
 189:src/MightyBoard/Motherboard/Motherboard.cc **** void Motherboard::reset(bool hard_reset) {
 190:src/MightyBoard/Motherboard/Motherboard.cc **** 	indicateError(0); // turn on blinker
 191:src/MightyBoard/Motherboard/Motherboard.cc **** 
 192:src/MightyBoard/Motherboard/Motherboard.cc **** 	// Init steppers
 193:src/MightyBoard/Motherboard/Motherboard.cc **** 	uint8_t axis_invert = eeprom::getEeprom8(eeprom_offsets::AXIS_INVERSION, 0);
 194:src/MightyBoard/Motherboard/Motherboard.cc ****     SoftI2cManager::getI2cManager().init();
 195:src/MightyBoard/Motherboard/Motherboard.cc **** 	// Z holding indicates that when the Z axis is not in
 196:src/MightyBoard/Motherboard/Motherboard.cc **** 	// motion, the machine should continue to power the stepper
 197:src/MightyBoard/Motherboard/Motherboard.cc **** 	// coil to ensure that the Z stage does not shift.
 198:src/MightyBoard/Motherboard/Motherboard.cc **** 	// Bit 7 of the AXIS_INVERSION eeprom setting
 199:src/MightyBoard/Motherboard/Motherboard.cc **** 	// indicates whether or not to use z holding; 
 200:src/MightyBoard/Motherboard/Motherboard.cc **** 	// the bit is active low. (0 means use z holding,
 201:src/MightyBoard/Motherboard/Motherboard.cc **** 	// 1 means turn it off.)
 202:src/MightyBoard/Motherboard/Motherboard.cc **** 	bool hold_z = (axis_invert & (1<<7)) == 0;
 203:src/MightyBoard/Motherboard/Motherboard.cc **** 	steppers::setHoldZ(hold_z);
 204:src/MightyBoard/Motherboard/Motherboard.cc **** 
 205:src/MightyBoard/Motherboard/Motherboard.cc **** 	// Initialize the host and slave UARTs
 206:src/MightyBoard/Motherboard/Motherboard.cc **** 	UART::getHostUART().enable(true);
 207:src/MightyBoard/Motherboard/Motherboard.cc **** 	UART::getHostUART().in.reset();
 208:src/MightyBoard/Motherboard/Motherboard.cc **** 	
 209:src/MightyBoard/Motherboard/Motherboard.cc **** 	micros = 0;
 210:src/MightyBoard/Motherboard/Motherboard.cc **** 	
 211:src/MightyBoard/Motherboard/Motherboard.cc **** 	initClocks();
 212:src/MightyBoard/Motherboard/Motherboard.cc **** 		
 213:src/MightyBoard/Motherboard/Motherboard.cc **** 	// Check if the interface board is attached
 214:src/MightyBoard/Motherboard/Motherboard.cc **** //	hasInterfaceBoard = interface::isConnected();
 215:src/MightyBoard/Motherboard/Motherboard.cc **** 	
 216:src/MightyBoard/Motherboard/Motherboard.cc **** //	DEBUG_PIN5.setValue(true);
 217:src/MightyBoard/Motherboard/Motherboard.cc **** 
 218:src/MightyBoard/Motherboard/Motherboard.cc **** /*	if (hasInterfaceBoard) {
 219:src/MightyBoard/Motherboard/Motherboard.cc **** 
 220:src/MightyBoard/Motherboard/Motherboard.cc **** 		// Make sure our interface board is initialized
 221:src/MightyBoard/Motherboard/Motherboard.cc ****         interfaceBoard.init();
 222:src/MightyBoard/Motherboard/Motherboard.cc **** 
 223:src/MightyBoard/Motherboard/Motherboard.cc ****         // start with welcome script if the first boot flag is not set
 224:src/MightyBoard/Motherboard/Motherboard.cc ****         if(eeprom::getEeprom8(eeprom_offsets::FIRST_BOOT_FLAG, 0) == 0)
 225:src/MightyBoard/Motherboard/Motherboard.cc ****             interfaceBoard.pushScreen(&welcomeScreen);
 226:src/MightyBoard/Motherboard/Motherboard.cc ****         else
 227:src/MightyBoard/Motherboard/Motherboard.cc ****             // otherwise start with the splash screen.
 228:src/MightyBoard/Motherboard/Motherboard.cc ****             interfaceBoard.pushScreen(&splashScreen);
 229:src/MightyBoard/Motherboard/Motherboard.cc ****             
 230:src/MightyBoard/Motherboard/Motherboard.cc ****         
 231:src/MightyBoard/Motherboard/Motherboard.cc **** 
 232:src/MightyBoard/Motherboard/Motherboard.cc ****         // Finally, set up the interface
 233:src/MightyBoard/Motherboard/Motherboard.cc ****         interface::init(&interfaceBoard, &lcd);
 234:src/MightyBoard/Motherboard/Motherboard.cc ****         
 235:src/MightyBoard/Motherboard/Motherboard.cc ****         DEBUG_PIN5.setValue(false);
 236:src/MightyBoard/Motherboard/Motherboard.cc ****         
 237:src/MightyBoard/Motherboard/Motherboard.cc ****         
 238:src/MightyBoard/Motherboard/Motherboard.cc ****         if(hard_reset){
 239:src/MightyBoard/Motherboard/Motherboard.cc **** 			_delay_ms(3000);
 240:src/MightyBoard/Motherboard/Motherboard.cc **** 		}
 241:src/MightyBoard/Motherboard/Motherboard.cc **** 
 242:src/MightyBoard/Motherboard/Motherboard.cc ****         interface_update_timeout.start(interfaceBoard.getUpdateRate());
 243:src/MightyBoard/Motherboard/Motherboard.cc ****     }*/
 244:src/MightyBoard/Motherboard/Motherboard.cc ****     
 245:src/MightyBoard/Motherboard/Motherboard.cc ****     
 246:src/MightyBoard/Motherboard/Motherboard.cc ****     
 247:src/MightyBoard/Motherboard/Motherboard.cc ****     // interface LEDs default to full ON
 248:src/MightyBoard/Motherboard/Motherboard.cc ****     interfaceBlink(0,0);
 249:src/MightyBoard/Motherboard/Motherboard.cc ****     
 250:src/MightyBoard/Motherboard/Motherboard.cc ****     // only call the piezo buzzer on full reboot start up
 251:src/MightyBoard/Motherboard/Motherboard.cc ****     // do not clear heater fail messages, though the user should not be able to soft reboot from he
 252:src/MightyBoard/Motherboard/Motherboard.cc ****     if(hard_reset)
 253:src/MightyBoard/Motherboard/Motherboard.cc **** 	{
 254:src/MightyBoard/Motherboard/Motherboard.cc **** 		// Configure the debug pins.
 255:src/MightyBoard/Motherboard/Motherboard.cc **** 		DEBUG_LED1.setDirection(true);
 256:src/MightyBoard/Motherboard/Motherboard.cc **** 		DEBUG_LED2.setDirection(true);
 257:src/MightyBoard/Motherboard/Motherboard.cc **** 		DEBUG_LED3.setDirection(true);
 258:src/MightyBoard/Motherboard/Motherboard.cc **** 		DEBUG_LED4.setDirection(true);
 259:src/MightyBoard/Motherboard/Motherboard.cc **** 		DEBUG_PIN.setDirection(true);
 260:src/MightyBoard/Motherboard/Motherboard.cc **** 		DEBUG_PIN1.setDirection(true);
 261:src/MightyBoard/Motherboard/Motherboard.cc **** 		DEBUG_PIN2.setDirection(true);
 262:src/MightyBoard/Motherboard/Motherboard.cc **** 		DEBUG_PIN3.setDirection(true);	
 263:src/MightyBoard/Motherboard/Motherboard.cc **** 		DEBUG_PIN4.setDirection(true);
 264:src/MightyBoard/Motherboard/Motherboard.cc **** 		DEBUG_PIN5.setDirection(true);
 265:src/MightyBoard/Motherboard/Motherboard.cc **** 		DEBUG_PIN6.setDirection(true);
 266:src/MightyBoard/Motherboard/Motherboard.cc **** 		DEBUG_PIN7.setDirection(true);
 267:src/MightyBoard/Motherboard/Motherboard.cc **** 		
 268:src/MightyBoard/Motherboard/Motherboard.cc **** 		RGB_LED::init();
 269:src/MightyBoard/Motherboard/Motherboard.cc **** 		
 270:src/MightyBoard/Motherboard/Motherboard.cc **** 		Piezo::startUpTone();
 271:src/MightyBoard/Motherboard/Motherboard.cc **** 		
 272:src/MightyBoard/Motherboard/Motherboard.cc **** 		heatShutdown = false;
 273:src/MightyBoard/Motherboard/Motherboard.cc **** 		heatFailMode = HEATER_FAIL_NONE;
 274:src/MightyBoard/Motherboard/Motherboard.cc **** 		cutoff.init();
 275:src/MightyBoard/Motherboard/Motherboard.cc **** 		
 276:src/MightyBoard/Motherboard/Motherboard.cc **** 		board_status = STATUS_NONE;
 277:src/MightyBoard/Motherboard/Motherboard.cc ****    }
 278:src/MightyBoard/Motherboard/Motherboard.cc ****     
 279:src/MightyBoard/Motherboard/Motherboard.cc ****      // initialize the extruders
 280:src/MightyBoard/Motherboard/Motherboard.cc ****     Extruder_One.reset();
 281:src/MightyBoard/Motherboard/Motherboard.cc ****     Extruder_Two.reset();
 282:src/MightyBoard/Motherboard/Motherboard.cc ****     
 283:src/MightyBoard/Motherboard/Motherboard.cc ****     HBP_HEAT.setDirection(true);
 284:src/MightyBoard/Motherboard/Motherboard.cc **** 	platform_thermistor.init();
 285:src/MightyBoard/Motherboard/Motherboard.cc **** 	platform_heater.reset();
 286:src/MightyBoard/Motherboard/Motherboard.cc ****     
 287:src/MightyBoard/Motherboard/Motherboard.cc ****     Extruder_One.getExtruderHeater().set_target_temperature(0);
 288:src/MightyBoard/Motherboard/Motherboard.cc **** 	Extruder_Two.getExtruderHeater().set_target_temperature(0);
 289:src/MightyBoard/Motherboard/Motherboard.cc **** 	platform_heater.set_target_temperature(0);	
 290:src/MightyBoard/Motherboard/Motherboard.cc **** 	
 291:src/MightyBoard/Motherboard/Motherboard.cc **** 	RGB_LED::setDefaultColor(); 
 292:src/MightyBoard/Motherboard/Motherboard.cc **** 	buttonWait = false;
 293:src/MightyBoard/Motherboard/Motherboard.cc **** 	
 294:src/MightyBoard/Motherboard/Motherboard.cc **** 
 295:src/MightyBoard/Motherboard/Motherboard.cc **** //	DEBUG_LED1.setDirection(true);
 296:src/MightyBoard/Motherboard/Motherboard.cc **** //	DEBUG_LED2.setDirection(false);
 297:src/MightyBoard/Motherboard/Motherboard.cc **** //	DEBUG_LED3.setDirection(true);
 298:src/MightyBoard/Motherboard/Motherboard.cc **** //	DEBUG_LED4.setDirection(false);
 299:src/MightyBoard/Motherboard/Motherboard.cc **** 
 300:src/MightyBoard/Motherboard/Motherboard.cc **** }
 301:src/MightyBoard/Motherboard/Motherboard.cc **** 
 302:src/MightyBoard/Motherboard/Motherboard.cc **** /// Get the number of microseconds that have passed since
 303:src/MightyBoard/Motherboard/Motherboard.cc **** /// the board was booted.
 304:src/MightyBoard/Motherboard/Motherboard.cc **** micros_t Motherboard::getCurrentMicros() {
 305:src/MightyBoard/Motherboard/Motherboard.cc **** 	micros_t micros_snapshot;
 306:src/MightyBoard/Motherboard/Motherboard.cc **** //	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 307:src/MightyBoard/Motherboard/Motherboard.cc **** 		micros_snapshot = micros;
 308:src/MightyBoard/Motherboard/Motherboard.cc **** //	}
 309:src/MightyBoard/Motherboard/Motherboard.cc **** 	return micros_snapshot;
 310:src/MightyBoard/Motherboard/Motherboard.cc **** }
 311:src/MightyBoard/Motherboard/Motherboard.cc **** 
 312:src/MightyBoard/Motherboard/Motherboard.cc **** /// Run the motherboard interrupt
 313:src/MightyBoard/Motherboard/Motherboard.cc **** void Motherboard::doInterrupt() {
 314:src/MightyBoard/Motherboard/Motherboard.cc **** 	//micros += INTERVAL_IN_MICROSECONDS;
 315:src/MightyBoard/Motherboard/Motherboard.cc **** 	// Do not move steppers if the board is in a paused state
 316:src/MightyBoard/Motherboard/Motherboard.cc **** 	if (command::isPaused()) return;
 317:src/MightyBoard/Motherboard/Motherboard.cc **** 	steppers::doInterrupt();
 318:src/MightyBoard/Motherboard/Motherboard.cc **** }
 319:src/MightyBoard/Motherboard/Motherboard.cc **** 
 320:src/MightyBoard/Motherboard/Motherboard.cc **** bool connectionsErrorTriggered = false;
 321:src/MightyBoard/Motherboard/Motherboard.cc **** 
 322:src/MightyBoard/Motherboard/Motherboard.cc **** void Motherboard::heaterFail(HeaterFailMode mode){
 323:src/MightyBoard/Motherboard/Motherboard.cc **** 
 324:src/MightyBoard/Motherboard/Motherboard.cc ****     // record heat fail mode
 325:src/MightyBoard/Motherboard/Motherboard.cc **** 	heatFailMode = mode;
 326:src/MightyBoard/Motherboard/Motherboard.cc ****     
 327:src/MightyBoard/Motherboard/Motherboard.cc **** 	if(heatFailMode == HEATER_FAIL_NOT_PLUGGED_IN)
 328:src/MightyBoard/Motherboard/Motherboard.cc **** 	{
 329:src/MightyBoard/Motherboard/Motherboard.cc **** 		// if single tool, one heater is not plugged in on purpose
 330:src/MightyBoard/Motherboard/Motherboard.cc **** 		// do not trigger a heatFail message unless both heaters are unplugged 
 331:src/MightyBoard/Motherboard/Motherboard.cc **** 		if(!platform_heater.has_failed() && eeprom::isSingleTool() && 
 332:src/MightyBoard/Motherboard/Motherboard.cc **** 			(!(Extruder_One.getExtruderHeater().has_failed() && Extruder_Two.getExtruderHeater().has_failed(
 333:src/MightyBoard/Motherboard/Motherboard.cc **** 				return;
 334:src/MightyBoard/Motherboard/Motherboard.cc ****         // only fire the heater not connected error once.  The user should be able to dismiss this 
 335:src/MightyBoard/Motherboard/Motherboard.cc **** 		else if (connectionsErrorTriggered)
 336:src/MightyBoard/Motherboard/Motherboard.cc **** 			return;
 337:src/MightyBoard/Motherboard/Motherboard.cc **** 		else
 338:src/MightyBoard/Motherboard/Motherboard.cc **** 			connectionsErrorTriggered =true;
 339:src/MightyBoard/Motherboard/Motherboard.cc **** 	}
 340:src/MightyBoard/Motherboard/Motherboard.cc ****     
 341:src/MightyBoard/Motherboard/Motherboard.cc ****     // flag heat shutdown response
 342:src/MightyBoard/Motherboard/Motherboard.cc **** 	heatShutdown = true;
 343:src/MightyBoard/Motherboard/Motherboard.cc **** }
 344:src/MightyBoard/Motherboard/Motherboard.cc **** 
 345:src/MightyBoard/Motherboard/Motherboard.cc **** // Motherboard class waits for a button press from the user
 346:src/MightyBoard/Motherboard/Motherboard.cc **** // used for firmware initiated error reporting
 347:src/MightyBoard/Motherboard/Motherboard.cc **** void Motherboard::startButtonWait(){
 348:src/MightyBoard/Motherboard/Motherboard.cc ****     // blink the interface LEDs
 349:src/MightyBoard/Motherboard/Motherboard.cc **** 	interfaceBlink(25,15);
 350:src/MightyBoard/Motherboard/Motherboard.cc ****     
 351:src/MightyBoard/Motherboard/Motherboard.cc **** //	interfaceBoard.waitForButton(0xFF);
 352:src/MightyBoard/Motherboard/Motherboard.cc **** 	buttonWait = true;
 353:src/MightyBoard/Motherboard/Motherboard.cc **** 
 354:src/MightyBoard/Motherboard/Motherboard.cc **** }
 355:src/MightyBoard/Motherboard/Motherboard.cc **** 
 356:src/MightyBoard/Motherboard/Motherboard.cc **** // set an error message on the interface and wait for user button press
 357:src/MightyBoard/Motherboard/Motherboard.cc **** void Motherboard::errorResponse(char msg[], bool reset){
 358:src/MightyBoard/Motherboard/Motherboard.cc **** //	interfaceBoard.errorMessage(msg);
 359:src/MightyBoard/Motherboard/Motherboard.cc **** 	startButtonWait();
 360:src/MightyBoard/Motherboard/Motherboard.cc **** 	reset_request = reset;
 361:src/MightyBoard/Motherboard/Motherboard.cc **** }
 362:src/MightyBoard/Motherboard/Motherboard.cc **** 
 363:src/MightyBoard/Motherboard/Motherboard.cc **** enum stagger_timers{
 364:src/MightyBoard/Motherboard/Motherboard.cc **** 	STAGGER_INTERFACE,
 365:src/MightyBoard/Motherboard/Motherboard.cc **** 	STAGGER_MID, 
 366:src/MightyBoard/Motherboard/Motherboard.cc **** 	STAGGER_EX2,
 367:src/MightyBoard/Motherboard/Motherboard.cc **** 	STAGGER_EX1
 368:src/MightyBoard/Motherboard/Motherboard.cc **** }stagger = STAGGER_INTERFACE;
 369:src/MightyBoard/Motherboard/Motherboard.cc **** 
 370:src/MightyBoard/Motherboard/Motherboard.cc **** uint8_t Motherboard::GetErrorStatus(){
 371:src/MightyBoard/Motherboard/Motherboard.cc **** 
 372:src/MightyBoard/Motherboard/Motherboard.cc **** 	return board_status;
 373:src/MightyBoard/Motherboard/Motherboard.cc **** }
 374:src/MightyBoard/Motherboard/Motherboard.cc **** 
 375:src/MightyBoard/Motherboard/Motherboard.cc **** 
 376:src/MightyBoard/Motherboard/Motherboard.cc **** bool triggered = false;
 377:src/MightyBoard/Motherboard/Motherboard.cc **** // main motherboard loop
 378:src/MightyBoard/Motherboard/Motherboard.cc **** void Motherboard::runMotherboardSlice() {
 379:src/MightyBoard/Motherboard/Motherboard.cc **** 	
 380:src/MightyBoard/Motherboard/Motherboard.cc **** 	
 381:src/MightyBoard/Motherboard/Motherboard.cc ****     
 382:src/MightyBoard/Motherboard/Motherboard.cc ****     // check for user button press
 383:src/MightyBoard/Motherboard/Motherboard.cc ****     // update interface screen as necessary
 384:src/MightyBoard/Motherboard/Motherboard.cc **** //	if (hasInterfaceBoard) {
 385:src/MightyBoard/Motherboard/Motherboard.cc **** //		interfaceBoard.doInterrupt();
 386:src/MightyBoard/Motherboard/Motherboard.cc **** 		// stagger motherboard updates so that they do not all occur on the same loop
 387:src/MightyBoard/Motherboard/Motherboard.cc **** //		if (interface_update_timeout.hasElapsed() && (stagger == STAGGER_INTERFACE)) {
 388:src/MightyBoard/Motherboard/Motherboard.cc **** //			interfaceBoard.doUpdate();
 389:src/MightyBoard/Motherboard/Motherboard.cc **** //			interface_update_timeout.start(interfaceBoard.getUpdateRate());
 390:src/MightyBoard/Motherboard/Motherboard.cc **** //			stagger = STAGGER_MID;
 391:src/MightyBoard/Motherboard/Motherboard.cc **** //		}
 392:src/MightyBoard/Motherboard/Motherboard.cc **** //	}
 393:src/MightyBoard/Motherboard/Motherboard.cc **** 			   
 394:src/MightyBoard/Motherboard/Motherboard.cc ****     if(isUsingPlatform()) {
 395:src/MightyBoard/Motherboard/Motherboard.cc **** 		// manage heating loops for the HBP
 396:src/MightyBoard/Motherboard/Motherboard.cc **** 		platform_heater.manage_temperature();
 397:src/MightyBoard/Motherboard/Motherboard.cc **** 	}
 398:src/MightyBoard/Motherboard/Motherboard.cc **** 	
 399:src/MightyBoard/Motherboard/Motherboard.cc ****     // if waiting on button press
 400:src/MightyBoard/Motherboard/Motherboard.cc **** //	if(buttonWait)
 401:src/MightyBoard/Motherboard/Motherboard.cc **** //	{
 402:src/MightyBoard/Motherboard/Motherboard.cc ****         // if user presses enter
 403:src/MightyBoard/Motherboard/Motherboard.cc **** //		if (interfaceBoard.buttonPushed()) {
 404:src/MightyBoard/Motherboard/Motherboard.cc **** 			// set interface LEDs to solid
 405:src/MightyBoard/Motherboard/Motherboard.cc **** //			interfaceBlink(0,0);
 406:src/MightyBoard/Motherboard/Motherboard.cc **** 			// restore default LED behavior
 407:src/MightyBoard/Motherboard/Motherboard.cc **** //			RGB_LED::setDefaultColor();
 408:src/MightyBoard/Motherboard/Motherboard.cc **** 			//clear error messaging
 409:src/MightyBoard/Motherboard/Motherboard.cc **** //			buttonWait = false;
 410:src/MightyBoard/Motherboard/Motherboard.cc **** //			interfaceBoard.popScreen();
 411:src/MightyBoard/Motherboard/Motherboard.cc **** //			if(reset_request)
 412:src/MightyBoard/Motherboard/Motherboard.cc **** //				host::stopBuild();
 413:src/MightyBoard/Motherboard/Motherboard.cc **** //			triggered = false;
 414:src/MightyBoard/Motherboard/Motherboard.cc **** //		}
 415:src/MightyBoard/Motherboard/Motherboard.cc **** 		
 416:src/MightyBoard/Motherboard/Motherboard.cc **** //	}
 417:src/MightyBoard/Motherboard/Motherboard.cc **** 	
 418:src/MightyBoard/Motherboard/Motherboard.cc **** 	// if no user input for USER_INPUT_TIMEOUT, shutdown heaters and warn user
 419:src/MightyBoard/Motherboard/Motherboard.cc ****     // don't do this if a heat failure has occured ( in this case heaters are already shutdown and 
 420:src/MightyBoard/Motherboard/Motherboard.cc ****     if(user_input_timeout.hasElapsed() && !heatShutdown && (host::getHostState() != host::HOST_STAT
 421:src/MightyBoard/Motherboard/Motherboard.cc ****         // clear timeout
 422:src/MightyBoard/Motherboard/Motherboard.cc **** 		user_input_timeout.clear();
 423:src/MightyBoard/Motherboard/Motherboard.cc **** 		
 424:src/MightyBoard/Motherboard/Motherboard.cc **** 		board_status |= STATUS_HEAT_INACTIVE_SHUTDOWN;
 425:src/MightyBoard/Motherboard/Motherboard.cc **** 		
 426:src/MightyBoard/Motherboard/Motherboard.cc **** 		// alert user if heaters are not already set to 0
 427:src/MightyBoard/Motherboard/Motherboard.cc **** 		if((Extruder_One.getExtruderHeater().get_set_temperature() > 0) ||
 428:src/MightyBoard/Motherboard/Motherboard.cc **** 			(Extruder_Two.getExtruderHeater().get_set_temperature() > 0) ||
 429:src/MightyBoard/Motherboard/Motherboard.cc **** 			(platform_heater.get_set_temperature() > 0)){
 430:src/MightyBoard/Motherboard/Motherboard.cc **** //				interfaceBoard.errorMessage(HEATER_INACTIVITY_MSG);//37
 431:src/MightyBoard/Motherboard/Motherboard.cc **** 				startButtonWait();
 432:src/MightyBoard/Motherboard/Motherboard.cc ****                 // turn LEDs blue
 433:src/MightyBoard/Motherboard/Motherboard.cc **** 				RGB_LED::setColor(0,0,255, true);
 434:src/MightyBoard/Motherboard/Motherboard.cc **** 		}
 435:src/MightyBoard/Motherboard/Motherboard.cc ****         // set tempertures to 0
 436:src/MightyBoard/Motherboard/Motherboard.cc **** 		Extruder_One.getExtruderHeater().set_target_temperature(0);
 437:src/MightyBoard/Motherboard/Motherboard.cc **** 		Extruder_Two.getExtruderHeater().set_target_temperature(0);
 438:src/MightyBoard/Motherboard/Motherboard.cc **** 		platform_heater.set_target_temperature(0);
 439:src/MightyBoard/Motherboard/Motherboard.cc **** 	}
 440:src/MightyBoard/Motherboard/Motherboard.cc **** 	
 441:src/MightyBoard/Motherboard/Motherboard.cc ****     // respond to heatshutdown.  response only needs to be called once
 442:src/MightyBoard/Motherboard/Motherboard.cc **** 	if(heatShutdown && !triggered && !Piezo::isPlaying())
 443:src/MightyBoard/Motherboard/Motherboard.cc **** 	{
 444:src/MightyBoard/Motherboard/Motherboard.cc ****         triggered = true;
 445:src/MightyBoard/Motherboard/Motherboard.cc **** 		// rgb led response
 446:src/MightyBoard/Motherboard/Motherboard.cc **** 		interfaceBlink(10,10);
 447:src/MightyBoard/Motherboard/Motherboard.cc ****         // set all heater temperatures to zero
 448:src/MightyBoard/Motherboard/Motherboard.cc ****         Extruder_One.getExtruderHeater().set_target_temperature(0);
 449:src/MightyBoard/Motherboard/Motherboard.cc **** 		Extruder_Two.getExtruderHeater().set_target_temperature(0);
 450:src/MightyBoard/Motherboard/Motherboard.cc **** 		platform_heater.set_target_temperature(0);
 451:src/MightyBoard/Motherboard/Motherboard.cc **** 		/// error message
 452:src/MightyBoard/Motherboard/Motherboard.cc **** 		switch (heatFailMode){
 453:src/MightyBoard/Motherboard/Motherboard.cc **** 			case HEATER_FAIL_SOFTWARE_CUTOFF:
 454:src/MightyBoard/Motherboard/Motherboard.cc **** //				interfaceBoard.errorMessage(HEATER_FAIL_SOFTWARE_CUTOFF_MSG);//,79);
 455:src/MightyBoard/Motherboard/Motherboard.cc **** 				break;
 456:src/MightyBoard/Motherboard/Motherboard.cc **** 			case HEATER_FAIL_NOT_HEATING:
 457:src/MightyBoard/Motherboard/Motherboard.cc **** //				interfaceBoard.errorMessage(HEATER_FAIL_NOT_HEATING_MSG);//,79);
 458:src/MightyBoard/Motherboard/Motherboard.cc **** 				break;
 459:src/MightyBoard/Motherboard/Motherboard.cc **** 			case HEATER_FAIL_DROPPING_TEMP:
 460:src/MightyBoard/Motherboard/Motherboard.cc **** //				interfaceBoard.errorMessage(HEATER_FAIL_DROPPING_TEMP_MSG);//,79);
 461:src/MightyBoard/Motherboard/Motherboard.cc **** 				break;
 462:src/MightyBoard/Motherboard/Motherboard.cc **** 			case HEATER_FAIL_NOT_PLUGGED_IN:
 463:src/MightyBoard/Motherboard/Motherboard.cc **** //				interfaceBoard.errorMessage(HEATER_FAIL_NOT_PLUGGED_IN_MSG);//,79);
 464:src/MightyBoard/Motherboard/Motherboard.cc ****                 startButtonWait();
 465:src/MightyBoard/Motherboard/Motherboard.cc ****                 heatShutdown = false;
 466:src/MightyBoard/Motherboard/Motherboard.cc ****                 return;
 467:src/MightyBoard/Motherboard/Motherboard.cc **** 		}
 468:src/MightyBoard/Motherboard/Motherboard.cc ****         // blink LEDS red
 469:src/MightyBoard/Motherboard/Motherboard.cc **** 		RGB_LED::errorSequence();
 470:src/MightyBoard/Motherboard/Motherboard.cc **** 		// disable command processing and steppers
 471:src/MightyBoard/Motherboard/Motherboard.cc **** 		host::heatShutdown();
 472:src/MightyBoard/Motherboard/Motherboard.cc **** 		command::heatShutdown();
 473:src/MightyBoard/Motherboard/Motherboard.cc **** 		planner::abort();
 474:src/MightyBoard/Motherboard/Motherboard.cc ****         for(int i = 0; i < STEPPER_COUNT; i++)
 475:src/MightyBoard/Motherboard/Motherboard.cc **** 			steppers::enableAxis(i, false);
 476:src/MightyBoard/Motherboard/Motherboard.cc **** 	}
 477:src/MightyBoard/Motherboard/Motherboard.cc **** 		       
 478:src/MightyBoard/Motherboard/Motherboard.cc **** 	// Temperature monitoring thread
 479:src/MightyBoard/Motherboard/Motherboard.cc **** 	// stagger mid accounts for the case when we've just run the interface update
 480:src/MightyBoard/Motherboard/Motherboard.cc **** 	if(stagger == STAGGER_MID){
 481:src/MightyBoard/Motherboard/Motherboard.cc **** 		stagger = STAGGER_EX1;
 482:src/MightyBoard/Motherboard/Motherboard.cc **** 	}else if(stagger == STAGGER_EX1){
 483:src/MightyBoard/Motherboard/Motherboard.cc **** 		Extruder_One.runExtruderSlice();
 484:src/MightyBoard/Motherboard/Motherboard.cc **** 		stagger = STAGGER_EX2;
 485:src/MightyBoard/Motherboard/Motherboard.cc **** 	}else if (stagger == STAGGER_EX2){
 486:src/MightyBoard/Motherboard/Motherboard.cc **** 		Extruder_Two.runExtruderSlice();
 487:src/MightyBoard/Motherboard/Motherboard.cc **** 		stagger = STAGGER_INTERFACE;
 488:src/MightyBoard/Motherboard/Motherboard.cc **** 	}
 489:src/MightyBoard/Motherboard/Motherboard.cc **** 	
 490:src/MightyBoard/Motherboard/Motherboard.cc **** 	
 491:src/MightyBoard/Motherboard/Motherboard.cc **** 
 492:src/MightyBoard/Motherboard/Motherboard.cc **** }
 493:src/MightyBoard/Motherboard/Motherboard.cc **** 
 494:src/MightyBoard/Motherboard/Motherboard.cc **** // reset user timeout to start from zero
 495:src/MightyBoard/Motherboard/Motherboard.cc **** void Motherboard::resetUserInputTimeout(){
 496:src/MightyBoard/Motherboard/Motherboard.cc **** 	user_input_timeout.start(USER_INPUT_TIMEOUT);
 497:src/MightyBoard/Motherboard/Motherboard.cc **** }
 498:src/MightyBoard/Motherboard/Motherboard.cc **** 
 499:src/MightyBoard/Motherboard/Motherboard.cc **** #define MICROS_INTERVAL INTERVAL_IN_MICROSECONDS
 500:src/MightyBoard/Motherboard/Motherboard.cc **** //#define MICROS_INTERVAL 128
 501:src/MightyBoard/Motherboard/Motherboard.cc **** 
 502:src/MightyBoard/Motherboard/Motherboard.cc **** void Motherboard::UpdateMicros(){
 503:src/MightyBoard/Motherboard/Motherboard.cc **** //	xprintf("%x" " (%s:%d)\n",micros,_F_,_L_);
 504:src/MightyBoard/Motherboard/Motherboard.cc **** 	micros += MICROS_INTERVAL;//_IN_MICROSECONDS;
 505:src/MightyBoard/Motherboard/Motherboard.cc **** }
 506:src/MightyBoard/Motherboard/Motherboard.cc **** 
 507:src/MightyBoard/Motherboard/Motherboard.cc **** volatile bool led_toggle0;
 508:src/MightyBoard/Motherboard/Motherboard.cc **** volatile bool led_toggle1;
 509:src/MightyBoard/Motherboard/Motherboard.cc **** volatile bool led_toggle2;
 510:src/MightyBoard/Motherboard/Motherboard.cc **** volatile bool led_toggle3;
 511:src/MightyBoard/Motherboard/Motherboard.cc **** volatile uint32_t loop0;
 512:src/MightyBoard/Motherboard/Motherboard.cc **** volatile uint32_t loop1;
 513:src/MightyBoard/Motherboard/Motherboard.cc **** volatile uint32_t loop2;
 514:src/MightyBoard/Motherboard/Motherboard.cc **** volatile uint32_t loop3;
 515:src/MightyBoard/Motherboard/Motherboard.cc **** 
 516:src/MightyBoard/Motherboard/Motherboard.cc **** /// Timer three comparator match interrupt
 517:src/MightyBoard/Motherboard/Motherboard.cc **** //ISR(TIMER3_COMPA_vect) {
 518:src/MightyBoard/Motherboard/Motherboard.cc **** extern "C" void TIMER0_IRQHandler (void){
 519:src/MightyBoard/Motherboard/Motherboard.cc **** 	DEBUG_LED1.setDirection(true);
 520:src/MightyBoard/Motherboard/Motherboard.cc **** 	DEBUG_LED1.setValue(true);
 521:src/MightyBoard/Motherboard/Motherboard.cc **** //	xprintf("0" " (%s:%d)\n",_F_,_L_);
 522:src/MightyBoard/Motherboard/Motherboard.cc **** //	xprintf("TIMER0_IRQHandler" " (%s:%d)\n",_F_,_L_);
 523:src/MightyBoard/Motherboard/Motherboard.cc **** 	TIM_ClearIntPending(LPC_TIM0, TIM_MR0_INT);
 524:src/MightyBoard/Motherboard/Motherboard.cc **** 	Motherboard::getBoard().doInterrupt();
 525:src/MightyBoard/Motherboard/Motherboard.cc **** 
 526:src/MightyBoard/Motherboard/Motherboard.cc **** 	if(0){
 527:src/MightyBoard/Motherboard/Motherboard.cc **** 		loop0++;
 528:src/MightyBoard/Motherboard/Motherboard.cc **** 		if (loop0 > 500){
 529:src/MightyBoard/Motherboard/Motherboard.cc **** 			loop0=0;
 530:src/MightyBoard/Motherboard/Motherboard.cc **** //			led_toggle0 = led_toggle0^1;
 531:src/MightyBoard/Motherboard/Motherboard.cc **** //			DEBUG_LED1.setValue(led_toggle0);
 532:src/MightyBoard/Motherboard/Motherboard.cc **** 		}
 533:src/MightyBoard/Motherboard/Motherboard.cc **** 	}
 534:src/MightyBoard/Motherboard/Motherboard.cc **** 	DEBUG_LED1.setValue(false);
 535:src/MightyBoard/Motherboard/Motherboard.cc **** }
 536:src/MightyBoard/Motherboard/Motherboard.cc **** 
 537:src/MightyBoard/Motherboard/Motherboard.cc **** 
 538:src/MightyBoard/Motherboard/Motherboard.cc **** /// Number of times to blink the debug LED on each cycle
 539:src/MightyBoard/Motherboard/Motherboard.cc **** volatile uint8_t blink_count = 0;
 540:src/MightyBoard/Motherboard/Motherboard.cc **** 
 541:src/MightyBoard/Motherboard/Motherboard.cc **** /// number of cycles to hold on and off in each interface LED blink
 542:src/MightyBoard/Motherboard/Motherboard.cc **** uint8_t interface_on_time = 0;
 543:src/MightyBoard/Motherboard/Motherboard.cc **** uint8_t interface_off_time = 0;
 544:src/MightyBoard/Motherboard/Motherboard.cc **** 
 545:src/MightyBoard/Motherboard/Motherboard.cc **** /// The current state of the debug LED
 546:src/MightyBoard/Motherboard/Motherboard.cc **** enum {
 547:src/MightyBoard/Motherboard/Motherboard.cc **** 	BLINK_NONE,
 548:src/MightyBoard/Motherboard/Motherboard.cc **** 	BLINK_ON,
 549:src/MightyBoard/Motherboard/Motherboard.cc **** 	BLINK_OFF,
 550:src/MightyBoard/Motherboard/Motherboard.cc **** 	BLINK_PAUSE
 551:src/MightyBoard/Motherboard/Motherboard.cc **** };
 552:src/MightyBoard/Motherboard/Motherboard.cc **** 
 553:src/MightyBoard/Motherboard/Motherboard.cc **** /// state trackers for blinking LEDS
 554:src/MightyBoard/Motherboard/Motherboard.cc **** int blink_state = BLINK_NONE;
 555:src/MightyBoard/Motherboard/Motherboard.cc **** int interface_blink_state = BLINK_NONE;
 556:src/MightyBoard/Motherboard/Motherboard.cc **** 
 557:src/MightyBoard/Motherboard/Motherboard.cc **** /// Write an error code to the debug pin.
 558:src/MightyBoard/Motherboard/Motherboard.cc **** void Motherboard::indicateError(int error_code) {
 559:src/MightyBoard/Motherboard/Motherboard.cc **** 	if (error_code == 0) {
 560:src/MightyBoard/Motherboard/Motherboard.cc **** 		blink_state = BLINK_NONE;
 561:src/MightyBoard/Motherboard/Motherboard.cc **** 		DEBUG_PIN.setValue(false);
 562:src/MightyBoard/Motherboard/Motherboard.cc **** 	}
 563:src/MightyBoard/Motherboard/Motherboard.cc **** 	else if (blink_count != error_code) {
 564:src/MightyBoard/Motherboard/Motherboard.cc **** 		blink_state = BLINK_OFF;
 565:src/MightyBoard/Motherboard/Motherboard.cc **** 	}
 566:src/MightyBoard/Motherboard/Motherboard.cc **** 	blink_count = error_code;
 567:src/MightyBoard/Motherboard/Motherboard.cc **** }
 568:src/MightyBoard/Motherboard/Motherboard.cc **** 
 569:src/MightyBoard/Motherboard/Motherboard.cc **** // set on / off period for blinking interface LEDs
 570:src/MightyBoard/Motherboard/Motherboard.cc **** // if both times are zero, LEDs are full on, if just on-time is zero, LEDs are full OFF
 571:src/MightyBoard/Motherboard/Motherboard.cc **** void Motherboard::interfaceBlink(int on_time, int off_time){
 572:src/MightyBoard/Motherboard/Motherboard.cc **** 	
 573:src/MightyBoard/Motherboard/Motherboard.cc **** 	if(off_time == 0){
 574:src/MightyBoard/Motherboard/Motherboard.cc **** 		interface_blink_state = BLINK_NONE;
 575:src/MightyBoard/Motherboard/Motherboard.cc **** //		interface::setLEDs(true);
 576:src/MightyBoard/Motherboard/Motherboard.cc **** 	}else if(on_time == 0){
 577:src/MightyBoard/Motherboard/Motherboard.cc **** 		interface_blink_state = BLINK_NONE;
 578:src/MightyBoard/Motherboard/Motherboard.cc **** //		interface::setLEDs(false);
 579:src/MightyBoard/Motherboard/Motherboard.cc **** 	} else{
 580:src/MightyBoard/Motherboard/Motherboard.cc **** 		interface_on_time = on_time;
 581:src/MightyBoard/Motherboard/Motherboard.cc **** 		interface_off_time = off_time;
 582:src/MightyBoard/Motherboard/Motherboard.cc **** 		interface_blink_state = BLINK_ON;
 583:src/MightyBoard/Motherboard/Motherboard.cc **** 	}
 584:src/MightyBoard/Motherboard/Motherboard.cc **** 
 585:src/MightyBoard/Motherboard/Motherboard.cc **** }
 586:src/MightyBoard/Motherboard/Motherboard.cc **** 
 587:src/MightyBoard/Motherboard/Motherboard.cc **** /// Get the current error code.
 588:src/MightyBoard/Motherboard/Motherboard.cc **** uint8_t Motherboard::getCurrentError() {
 589:src/MightyBoard/Motherboard/Motherboard.cc **** 	return blink_count;
 590:src/MightyBoard/Motherboard/Motherboard.cc **** }
 591:src/MightyBoard/Motherboard/Motherboard.cc **** 
 592:src/MightyBoard/Motherboard/Motherboard.cc **** /// Timer2 overflow cycles that the LED remains on while blinking
 593:src/MightyBoard/Motherboard/Motherboard.cc **** #define OVFS_ON 18
 594:src/MightyBoard/Motherboard/Motherboard.cc **** /// Timer2 overflow cycles that the LED remains off while blinking
 595:src/MightyBoard/Motherboard/Motherboard.cc **** #define OVFS_OFF 18
 596:src/MightyBoard/Motherboard/Motherboard.cc **** /// Timer2 overflow cycles between flash cycles
 597:src/MightyBoard/Motherboard/Motherboard.cc **** #define OVFS_PAUSE 80
 598:src/MightyBoard/Motherboard/Motherboard.cc **** 
 599:src/MightyBoard/Motherboard/Motherboard.cc **** /// Number of overflows remaining on the current blink cycle
 600:src/MightyBoard/Motherboard/Motherboard.cc **** int blink_ovfs_remaining = 0;
 601:src/MightyBoard/Motherboard/Motherboard.cc **** /// Number of blinks performed in the current cycle
 602:src/MightyBoard/Motherboard/Motherboard.cc **** int blinked_so_far = 0;
 603:src/MightyBoard/Motherboard/Motherboard.cc **** /// Number of overflows remaining on the current overflow blink cycle
 604:src/MightyBoard/Motherboard/Motherboard.cc **** int interface_ovfs_remaining = 0;
 605:src/MightyBoard/Motherboard/Motherboard.cc **** 
 606:src/MightyBoard/Motherboard/Motherboard.cc **** uint16_t blink_overflow_counter = 0;
 607:src/MightyBoard/Motherboard/Motherboard.cc **** 
 608:src/MightyBoard/Motherboard/Motherboard.cc **** /// Timer 2 overflow interrupt
 609:src/MightyBoard/Motherboard/Motherboard.cc **** 
 610:src/MightyBoard/Motherboard/Motherboard.cc **** //ISR(TIMER2_COMPA_vect) {
 611:src/MightyBoard/Motherboard/Motherboard.cc **** extern "C" void TIMER2_IRQHandler (void){
 612:src/MightyBoard/Motherboard/Motherboard.cc **** 	DEBUG_LED2.setDirection(true);
 613:src/MightyBoard/Motherboard/Motherboard.cc **** 	DEBUG_LED2.setValue(true);
 614:src/MightyBoard/Motherboard/Motherboard.cc **** //	xprintf("2" " (%s:%d)\n",_F_,_L_);
 615:src/MightyBoard/Motherboard/Motherboard.cc **** //	xprintf("TIMER2_IRQHandler" " (%s:%d)\n",_F_,_L_);
 616:src/MightyBoard/Motherboard/Motherboard.cc **** 	TIM_ClearIntPending(LPC_TIM2,TIM_MR0_INT);
 617:src/MightyBoard/Motherboard/Motherboard.cc **** 	
 618:src/MightyBoard/Motherboard/Motherboard.cc **** 	Motherboard::getBoard().UpdateMicros();
 619:src/MightyBoard/Motherboard/Motherboard.cc **** 	DEBUG_LED2.setValue(false);
 620:src/MightyBoard/Motherboard/Motherboard.cc **** 	
 621:src/MightyBoard/Motherboard/Motherboard.cc **** 	if(blink_overflow_counter++ <= 0x080)
 622:src/MightyBoard/Motherboard/Motherboard.cc **** 			return;
 623:src/MightyBoard/Motherboard/Motherboard.cc **** 	
 624:src/MightyBoard/Motherboard/Motherboard.cc **** 	blink_overflow_counter = 0;
 625:src/MightyBoard/Motherboard/Motherboard.cc **** 			
 626:src/MightyBoard/Motherboard/Motherboard.cc **** 	/// Debug LEDS on Motherboard
 627:src/MightyBoard/Motherboard/Motherboard.cc **** 	if (blink_ovfs_remaining > 0) {
 628:src/MightyBoard/Motherboard/Motherboard.cc **** 		blink_ovfs_remaining--;
 629:src/MightyBoard/Motherboard/Motherboard.cc **** 	} else {
 630:src/MightyBoard/Motherboard/Motherboard.cc **** 		if (blink_state == BLINK_ON) {
 631:src/MightyBoard/Motherboard/Motherboard.cc **** 			blinked_so_far++;
 632:src/MightyBoard/Motherboard/Motherboard.cc **** 			blink_state = BLINK_OFF;
 633:src/MightyBoard/Motherboard/Motherboard.cc **** 			blink_ovfs_remaining = OVFS_OFF;
 634:src/MightyBoard/Motherboard/Motherboard.cc **** 			DEBUG_PIN.setValue(false);
 635:src/MightyBoard/Motherboard/Motherboard.cc **** 		} else if (blink_state == BLINK_OFF) {
 636:src/MightyBoard/Motherboard/Motherboard.cc **** 			if (blinked_so_far >= blink_count) {
 637:src/MightyBoard/Motherboard/Motherboard.cc **** 				blink_state = BLINK_PAUSE;
 638:src/MightyBoard/Motherboard/Motherboard.cc **** 				blink_ovfs_remaining = OVFS_PAUSE;
 639:src/MightyBoard/Motherboard/Motherboard.cc **** 			} else {
 640:src/MightyBoard/Motherboard/Motherboard.cc **** 				blink_state = BLINK_ON;
 641:src/MightyBoard/Motherboard/Motherboard.cc **** 				blink_ovfs_remaining = OVFS_ON;
 642:src/MightyBoard/Motherboard/Motherboard.cc **** 				DEBUG_PIN.setValue(true);
 643:src/MightyBoard/Motherboard/Motherboard.cc **** 			}
 644:src/MightyBoard/Motherboard/Motherboard.cc **** 		} else if (blink_state == BLINK_PAUSE) {
 645:src/MightyBoard/Motherboard/Motherboard.cc **** 			blinked_so_far = 0;
 646:src/MightyBoard/Motherboard/Motherboard.cc **** 			blink_state = BLINK_ON;
 647:src/MightyBoard/Motherboard/Motherboard.cc **** 			blink_ovfs_remaining = OVFS_ON;
 648:src/MightyBoard/Motherboard/Motherboard.cc **** 			DEBUG_PIN.setValue(true);
 649:src/MightyBoard/Motherboard/Motherboard.cc **** 		}
 650:src/MightyBoard/Motherboard/Motherboard.cc **** 	}
 651:src/MightyBoard/Motherboard/Motherboard.cc **** 	/// Interface Board LEDs
 652:src/MightyBoard/Motherboard/Motherboard.cc **** 	if( interface_ovfs_remaining > 0){
 653:src/MightyBoard/Motherboard/Motherboard.cc **** 		interface_ovfs_remaining--;
 654:src/MightyBoard/Motherboard/Motherboard.cc **** 	} else {
 655:src/MightyBoard/Motherboard/Motherboard.cc **** 		if (interface_blink_state == BLINK_ON) {
 656:src/MightyBoard/Motherboard/Motherboard.cc **** 			interface_blink_state = BLINK_OFF;
 657:src/MightyBoard/Motherboard/Motherboard.cc **** 			interface_ovfs_remaining = interface_on_time;
 658:src/MightyBoard/Motherboard/Motherboard.cc **** //			interface::setLEDs(true);
 659:src/MightyBoard/Motherboard/Motherboard.cc **** 		} else if (interface_blink_state == BLINK_OFF) {
 660:src/MightyBoard/Motherboard/Motherboard.cc **** 			interface_blink_state = BLINK_ON;
 661:src/MightyBoard/Motherboard/Motherboard.cc **** 			interface_ovfs_remaining = interface_off_time;
 662:src/MightyBoard/Motherboard/Motherboard.cc **** //			interface::setLEDs(false);
 663:src/MightyBoard/Motherboard/Motherboard.cc **** 		}
 664:src/MightyBoard/Motherboard/Motherboard.cc **** 	}
 665:src/MightyBoard/Motherboard/Motherboard.cc **** 	if(0){
 666:src/MightyBoard/Motherboard/Motherboard.cc **** 		loop2++;
 667:src/MightyBoard/Motherboard/Motherboard.cc **** 		if (loop2 > 20){
 668:src/MightyBoard/Motherboard/Motherboard.cc **** 			loop2=0;
 669:src/MightyBoard/Motherboard/Motherboard.cc **** //			led_toggle2 = led_toggle2^1;
 670:src/MightyBoard/Motherboard/Motherboard.cc **** //			DEBUG_LED2.setValue(led_toggle2);
 671:src/MightyBoard/Motherboard/Motherboard.cc **** 		}
 672:src/MightyBoard/Motherboard/Motherboard.cc **** 	}
 673:src/MightyBoard/Motherboard/Motherboard.cc **** }
 674:src/MightyBoard/Motherboard/Motherboard.cc **** 
 675:src/MightyBoard/Motherboard/Motherboard.cc **** // piezo buzzer update
 676:src/MightyBoard/Motherboard/Motherboard.cc **** // this interrupt gets garbled with the much more rapid stepper interrupt
 677:src/MightyBoard/Motherboard/Motherboard.cc **** //ISR(TIMER0_COMPA_vect)
 678:src/MightyBoard/Motherboard/Motherboard.cc **** extern "C" void TIMER3_IRQHandler (void){
 679:src/MightyBoard/Motherboard/Motherboard.cc **** 	DEBUG_LED3.setDirection(true);
 680:src/MightyBoard/Motherboard/Motherboard.cc **** 	DEBUG_LED3.setValue(true);
 681:src/MightyBoard/Motherboard/Motherboard.cc **** //	xprintf("3" " (%s:%d)\n",_F_,_L_);
 682:src/MightyBoard/Motherboard/Motherboard.cc **** //	xprintf("TIMER3_IRQHandler" " (%s:%d)\n",_F_,_L_);
 683:src/MightyBoard/Motherboard/Motherboard.cc **** 	TIM_ClearIntPending(LPC_TIM3,TIM_MR0_INT);
 684:src/MightyBoard/Motherboard/Motherboard.cc **** 	Piezo::doInterrupt();
 685:src/MightyBoard/Motherboard/Motherboard.cc **** 
 686:src/MightyBoard/Motherboard/Motherboard.cc **** 	if(0){
 687:src/MightyBoard/Motherboard/Motherboard.cc **** 		loop3++;
 688:src/MightyBoard/Motherboard/Motherboard.cc **** 		if (loop3 > 500){
 689:src/MightyBoard/Motherboard/Motherboard.cc **** 			loop3=0;
 690:src/MightyBoard/Motherboard/Motherboard.cc **** //			led_toggle3 = led_toggle3^1;
 691:src/MightyBoard/Motherboard/Motherboard.cc **** //			DEBUG_LED3.setValue(led_toggle3);
 692:src/MightyBoard/Motherboard/Motherboard.cc **** 		}
 693:src/MightyBoard/Motherboard/Motherboard.cc **** 	}
 694:src/MightyBoard/Motherboard/Motherboard.cc **** 	DEBUG_LED3.setValue(false);
 695:src/MightyBoard/Motherboard/Motherboard.cc **** }
 696:src/MightyBoard/Motherboard/Motherboard.cc **** 
 697:src/MightyBoard/Motherboard/Motherboard.cc **** // HBP PWM
 698:src/MightyBoard/Motherboard/Motherboard.cc **** void pwmHBP_On(bool on) {
 699:src/MightyBoard/Motherboard/Motherboard.cc **** 	if (on) {
 700:src/MightyBoard/Motherboard/Motherboard.cc **** //		TCCR5A |= 0b00100000; /// turn on OC5B PWM output
 701:src/MightyBoard/Motherboard/Motherboard.cc **** 	} else {
 702:src/MightyBoard/Motherboard/Motherboard.cc **** //		TCCR5A &= 0b11001111; /// turn off OC5B PWM output
 703:src/MightyBoard/Motherboard/Motherboard.cc **** 	}
 704:src/MightyBoard/Motherboard/Motherboard.cc **** }
 705:src/MightyBoard/Motherboard/Motherboard.cc **** 
 706:src/MightyBoard/Motherboard/Motherboard.cc **** 
 707:src/MightyBoard/Motherboard/Motherboard.cc **** void Motherboard::setUsingPlatform(bool is_using) {
 708:src/MightyBoard/Motherboard/Motherboard.cc ****   using_platform = is_using;
 709:src/MightyBoard/Motherboard/Motherboard.cc **** }
 710:src/MightyBoard/Motherboard/Motherboard.cc **** 
 711:src/MightyBoard/Motherboard/Motherboard.cc **** void Motherboard::setValve(bool on) {
 712:src/MightyBoard/Motherboard/Motherboard.cc **** //  	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 713:src/MightyBoard/Motherboard/Motherboard.cc **** 		setUsingPlatform(false);
 714:src/MightyBoard/Motherboard/Motherboard.cc **** 		pwmHBP_On(false);
 715:src/MightyBoard/Motherboard/Motherboard.cc **** 		EXTRA_FET.setDirection(true);
 716:src/MightyBoard/Motherboard/Motherboard.cc **** 		EXTRA_FET.setValue(on);
 717:src/MightyBoard/Motherboard/Motherboard.cc **** //	}
 718:src/MightyBoard/Motherboard/Motherboard.cc **** }
 719:src/MightyBoard/Motherboard/Motherboard.cc **** 
 720:src/MightyBoard/Motherboard/Motherboard.cc **** void BuildPlatformHeatingElement::setHeatingElement(uint8_t value) {
 387              	 .loc 4 720 0
 388              	 .cfi_startproc
 389              	 
 390              	 
 391              	.LVL19:
 392 0000 10B5     	 push {r4,lr}
 393              	.LCFI3:
 394              	 .cfi_def_cfa_offset 8
 395              	 .cfi_offset 14,-4
 396              	 .cfi_offset 4,-8
 397 0002 84B0     	 sub sp,sp,#16
 398              	.LCFI4:
 399              	 .cfi_def_cfa_offset 24
 400 0004 0C46     	 mov r4,r1
 721:src/MightyBoard/Motherboard/Motherboard.cc **** 	// This is a bit of a hack to get the temperatures right until we fix our
 722:src/MightyBoard/Motherboard/Motherboard.cc **** 	// PWM'd PID implementation.  We reduce the MV to one bit, essentially.
 723:src/MightyBoard/Motherboard/Motherboard.cc **** 	// It works relatively well.
 724:src/MightyBoard/Motherboard/Motherboard.cc **** //  	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 725:src/MightyBoard/Motherboard/Motherboard.cc **** 		pwmHBP_On(false);
 726:src/MightyBoard/Motherboard/Motherboard.cc **** 		HBP_HEAT.setValue(value != 0);
 401              	 .loc 4 726 0
 402 0006 03A8     	 add r0,sp,#12
 403              	.LVL20:
 404 0008 4FF0FF01 	 mov r1,#255
 405              	.LVL21:
 406 000c FFF7FEFF 	 bl _ZN7LPCPortC1Eh
 407 0010 01A8     	 add r0,sp,#4
 408 0012 03A9     	 add r1,sp,#12
 409 0014 4FF0FF02 	 mov r2,#255
 410 0018 FFF7FEFF 	 bl _ZN3PinC1ERK7LPCPorth
 411              	.LVL22:
 412              	.LBB209:
 413              	.LBB210:
 414              	 .file 5 "src/MightyBoard/shared/Pin.hh"
   1:src/MightyBoard/shared/Pin.hh **** #ifndef PIN_HH
   2:src/MightyBoard/shared/Pin.hh **** #define PIN_HH
   3:src/MightyBoard/shared/Pin.hh **** 
   4:src/MightyBoard/shared/Pin.hh **** #include "LPCPort.hh"
   5:src/MightyBoard/shared/Pin.hh **** #include "Pin.hh"
   6:src/MightyBoard/shared/Pin.hh **** extern "C" {
   7:src/MightyBoard/shared/Pin.hh **** 	#include "lpc17xx_gpio.h"
   8:src/MightyBoard/shared/Pin.hh **** 	#include "lpc17xx_pinsel.h"
   9:src/MightyBoard/shared/Pin.hh **** 	#include "comm.h"
  10:src/MightyBoard/shared/Pin.hh **** }
  11:src/MightyBoard/shared/Pin.hh **** 
  12:src/MightyBoard/shared/Pin.hh **** /// \ingroup HardwareLibraries
  13:src/MightyBoard/shared/Pin.hh **** class Pin {
  14:src/MightyBoard/shared/Pin.hh **** private:
  15:src/MightyBoard/shared/Pin.hh **** 	uint8_t port_base;
  16:src/MightyBoard/shared/Pin.hh **** 	bool is_null;
  17:src/MightyBoard/shared/Pin.hh **** 	uint8_t pin_index;
  18:src/MightyBoard/shared/Pin.hh **** 	uint8_t pin_mask;
  19:src/MightyBoard/shared/Pin.hh **** 	uint8_t pin_mask_inverted;
  20:src/MightyBoard/shared/Pin.hh **** 
  21:src/MightyBoard/shared/Pin.hh **** public:
  22:src/MightyBoard/shared/Pin.hh **** 	Pin();
  23:src/MightyBoard/shared/Pin.hh **** 	Pin(const LPCPort& port_in, uint8_t pin_index_in);
  24:src/MightyBoard/shared/Pin.hh **** 	Pin(const Pin& other_pin);
  25:src/MightyBoard/shared/Pin.hh **** 	bool isNull() const;
  26:src/MightyBoard/shared/Pin.hh **** 	void setDirection(bool out) const;
  27:src/MightyBoard/shared/Pin.hh **** 	bool /*Pin::*/getValue() const {
  28:src/MightyBoard/shared/Pin.hh **** 		if (is_null)
  29:src/MightyBoard/shared/Pin.hh **** 			return false; // null pin is always low ... ?
  30:src/MightyBoard/shared/Pin.hh **** 		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
  31:src/MightyBoard/shared/Pin.hh **** //		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
  32:src/MightyBoard/shared/Pin.hh **** 	};
  33:src/MightyBoard/shared/Pin.hh **** 
  34:src/MightyBoard/shared/Pin.hh **** 	void /*Pin::*/setValue(bool on) const {
  35:src/MightyBoard/shared/Pin.hh **** 		if (is_null)
 415              	 .loc 5 35 0
 416 001c 9DF80530 	 ldrb r3,[sp,#5]
 417 0020 ABB9     	 cbnz r3,.L49
  36:src/MightyBoard/shared/Pin.hh **** 		 	return;
  37:src/MightyBoard/shared/Pin.hh **** 		// uint8_t oldSREG = SREG;
  38:src/MightyBoard/shared/Pin.hh **** 
  39:src/MightyBoard/shared/Pin.hh **** //		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
  40:src/MightyBoard/shared/Pin.hh **** 		// cli();
  41:src/MightyBoard/shared/Pin.hh **** 		if (on) {
 418              	 .loc 5 41 0
 419 0022 54B1     	 cbz r4,.L51
  42:src/MightyBoard/shared/Pin.hh **** //			PORTx |= pin_mask;
  43:src/MightyBoard/shared/Pin.hh **** //			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
  44:src/MightyBoard/shared/Pin.hh **** 			GPIO_SetValue(port_base, _BV(pin_index));
 420              	 .loc 5 44 0
 421 0024 9DF80630 	 ldrb r3,[sp,#6]
 422 0028 9DF80400 	 ldrb r0,[sp,#4]
 423 002c 4FF00101 	 mov r1,#1
 424 0030 01FA03F1 	 lsl r1,r1,r3
 425 0034 FFF7FEFF 	 bl GPIO_SetValue
 426 0038 09E0     	 b .L49
 427              	.L51:
  45:src/MightyBoard/shared/Pin.hh **** 		} else {
  46:src/MightyBoard/shared/Pin.hh **** //			PORTx &= pin_mask_inverted;
  47:src/MightyBoard/shared/Pin.hh **** //			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
  48:src/MightyBoard/shared/Pin.hh **** 			GPIO_ClearValue(port_base, _BV(pin_index));
 428              	 .loc 5 48 0
 429 003a 9DF80630 	 ldrb r3,[sp,#6]
 430 003e 9DF80400 	 ldrb r0,[sp,#4]
 431 0042 4FF00101 	 mov r1,#1
 432 0046 01FA03F1 	 lsl r1,r1,r3
 433 004a FFF7FEFF 	 bl GPIO_ClearValue
 434              	.L49:
 435              	.LBE210:
 436              	.LBE209:
 727:src/MightyBoard/Motherboard/Motherboard.cc **** //	}
 728:src/MightyBoard/Motherboard/Motherboard.cc **** }
 437              	 .loc 4 728 0
 438 004e 04B0     	 add sp,sp,#16
 439 0050 10BD     	 pop {r4,pc}
 440              	 .cfi_endproc
 441              	.LFE163:
 443 0052 00BF     	 .section .text._ZN11MotherboardC2Ev,"ax",%progbits
 444              	 .align 2
 445              	 .global _ZN11MotherboardC2Ev
 446              	 .thumb
 447              	 .thumb_func
 449              	_ZN11MotherboardC2Ev:
 450              	.LFB141:
  54:src/MightyBoard/Motherboard/Motherboard.cc **** Motherboard::Motherboard() :
 451              	 .loc 4 54 0
 452              	 .cfi_startproc
 453              	 
 454              	 
 455              	.LVL23:
 456 0000 70B5     	 push {r4,r5,r6,lr}
 457              	.LCFI5:
 458              	 .cfi_def_cfa_offset 16
 459              	 .cfi_offset 14,-4
 460              	 .cfi_offset 6,-8
 461              	 .cfi_offset 5,-12
 462              	 .cfi_offset 4,-16
 463 0002 92B0     	 sub sp,sp,#72
 464              	.LCFI6:
 465              	 .cfi_def_cfa_offset 88
 466 0004 0446     	 mov r4,r0
 467              	.LBB211:
  68:src/MightyBoard/Motherboard/Motherboard.cc **** 			Extruder_Two(1, EX2_PWR, EX2_FAN, THERMOCOUPLE_CS2,eeprom_offsets::T1_DATA_BASE)
 468              	 .loc 4 68 0
 469 0006 00F10400 	 add r0,r0,#4
 470              	.LVL24:
 471 000a FFF7FEFF 	 bl _ZN7TimeoutC1Ev
 472 000e 04F11400 	 add r0,r4,#20
 473 0012 FFF7FEFF 	 bl _ZN7TimeoutC1Ev
 474 0016 40F20006 	 movw r6,#:lower16:.LANCHOR1
 475 001a C0F20006 	 movt r6,#:upper16:.LANCHOR1
 476 001e 02A8     	 add r0,sp,#8
 477 0020 3146     	 mov r1,r6
 478 0022 4FF00402 	 mov r2,#4
 479 0026 FFF7FEFF 	 bl _ZN3PinC1ERK7LPCPorth
 480 002a 06A8     	 add r0,sp,#24
 481 002c 4FF0FF01 	 mov r1,#255
 482 0030 FFF7FEFF 	 bl _ZN7LPCPortC1Eh
 483 0034 04A8     	 add r0,sp,#16
 484 0036 06A9     	 add r1,sp,#24
 485 0038 4FF0FF02 	 mov r2,#255
 486 003c FFF7FEFF 	 bl _ZN3PinC1ERK7LPCPorth
 487 0040 09A8     	 add r0,sp,#36
 488 0042 4FF0FF01 	 mov r1,#255
 489 0046 FFF7FEFF 	 bl _ZN7LPCPortC1Eh
 490 004a 07AD     	 add r5,sp,#28
 491 004c 2846     	 mov r0,r5
 492 004e 09A9     	 add r1,sp,#36
 493 0050 4FF0FF02 	 mov r2,#255
 494 0054 FFF7FEFF 	 bl _ZN3PinC1ERK7LPCPorth
 495 0058 0095     	 str r5,[sp,#0]
 496 005a 4FF48073 	 mov r3,#256
 497 005e 0193     	 str r3,[sp,#4]
 498 0060 04F12800 	 add r0,r4,#40
 499 0064 4FF00001 	 mov r1,#0
 500 0068 02AA     	 add r2,sp,#8
 501 006a 04AB     	 add r3,sp,#16
 502 006c FFF7FEFF 	 bl _ZN13ExtruderBoardC1Eh3PinS0_S0_t
 503 0070 0AA8     	 add r0,sp,#40
 504 0072 3146     	 mov r1,r6
 505 0074 4FF00302 	 mov r2,#3
 506 0078 FFF7FEFF 	 bl _ZN3PinC1ERK7LPCPorth
 507 007c 0EA8     	 add r0,sp,#56
 508 007e 4FF0FF01 	 mov r1,#255
 509 0082 FFF7FEFF 	 bl _ZN7LPCPortC1Eh
 510 0086 0CA8     	 add r0,sp,#48
 511 0088 0EA9     	 add r1,sp,#56
 512 008a 4FF0FF02 	 mov r2,#255
 513 008e FFF7FEFF 	 bl _ZN3PinC1ERK7LPCPorth
 514 0092 11A8     	 add r0,sp,#68
 515 0094 4FF0FF01 	 mov r1,#255
 516 0098 FFF7FEFF 	 bl _ZN7LPCPortC1Eh
 517 009c 0FAD     	 add r5,sp,#60
 518 009e 2846     	 mov r0,r5
 519 00a0 11A9     	 add r1,sp,#68
 520 00a2 4FF0FF02 	 mov r2,#255
 521 00a6 FFF7FEFF 	 bl _ZN3PinC1ERK7LPCPorth
 522 00aa 0095     	 str r5,[sp,#0]
 523 00ac 4FF48E73 	 mov r3,#284
 524 00b0 0193     	 str r3,[sp,#4]
 525 00b2 04F58470 	 add r0,r4,#264
 526 00b6 4FF00101 	 mov r1,#1
 527 00ba 0AAA     	 add r2,sp,#40
 528 00bc 0CAB     	 add r3,sp,#48
 529 00be FFF7FEFF 	 bl _ZN13ExtruderBoardC1Eh3PinS0_S0_t
 530 00c2 04F5F475 	 add r5,r4,#488
 531 00c6 2846     	 mov r0,r5
 532 00c8 4FF01801 	 mov r1,#24
 533 00cc 4FF00002 	 mov r2,#0
 534 00d0 FFF7FEFF 	 bl _ZN10ThermistorC1Ehh
 535              	.LVL25:
 536              	.LBB212:
 537              	.LBB213:
 538              	.LBB214:
  45:src/MightyBoard/Motherboard/Motherboard.hh **** class BuildPlatformHeatingElement : public HeatingElement {
 539              	 .loc 3 45 0
 540 00d4 0C4B     	 ldr r3,.L56
 541 00d6 C4F80832 	 str r3,[r4,#520]
 542              	.LBE214:
 543              	.LBE213:
 544              	.LBE212:
  68:src/MightyBoard/Motherboard/Motherboard.cc **** 			Extruder_Two(1, EX2_PWR, EX2_FAN, THERMOCOUPLE_CS2,eeprom_offsets::T1_DATA_BASE)
 545              	 .loc 4 68 0
 546 00da 4FF48873 	 mov r3,#272
 547 00de 0093     	 str r3,[sp,#0]
 548 00e0 4FF00003 	 mov r3,#0
 549 00e4 0193     	 str r3,[sp,#4]
 550 00e6 04F50370 	 add r0,r4,#524
 551 00ea 2946     	 mov r1,r5
 552 00ec 04F50272 	 add r2,r4,#520
 553 00f0 4CF25033 	 movw r3,#50000
 554 00f4 FFF7FEFF 	 bl _ZN6HeaterC1ER17TemperatureSensorR14HeatingElementmtb
 555 00f8 4FF00103 	 mov r3,#1
 556 00fc 84F89832 	 strb r3,[r4,#664]
 557              	.LBE211:
  70:src/MightyBoard/Motherboard/Motherboard.cc **** }
 558              	 .loc 4 70 0
 559 0100 2046     	 mov r0,r4
 560 0102 12B0     	 add sp,sp,#72
 561 0104 70BD     	 pop {r4,r5,r6,pc}
 562              	.L57:
 563 0106 00BF     	 .align 2
 564              	.L56:
 565 0108 08000000 	 .word .LANCHOR0+8
 566              	 .cfi_endproc
 567              	.LFE141:
 569              	 .section .text._ZN11Motherboard10initClocksEv,"ax",%progbits
 570              	 .align 2
 571              	 .global _ZN11Motherboard10initClocksEv
 572              	 .thumb
 573              	 .thumb_func
 575              	_ZN11Motherboard10initClocksEv:
 576              	.LFB143:
  72:src/MightyBoard/Motherboard/Motherboard.cc **** void Motherboard::initClocks(){
 577              	 .loc 4 72 0
 578              	 .cfi_startproc
 579              	 
 580              	 
 581              	.LVL26:
 582 0000 2DE9F043 	 push {r4,r5,r6,r7,r8,r9,lr}
 583              	.LCFI7:
 584              	 .cfi_def_cfa_offset 28
 585              	 .cfi_offset 14,-4
 586              	 .cfi_offset 9,-8
 587              	 .cfi_offset 8,-12
 588              	 .cfi_offset 7,-16
 589              	 .cfi_offset 6,-20
 590              	 .cfi_offset 5,-24
 591              	 .cfi_offset 4,-28
 592 0004 91B0     	 sub sp,sp,#68
 593              	.LCFI8:
 594              	 .cfi_def_cfa_offset 96
 595              	.LBB215:
  88:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR0_Cfg.PrescaleOption = TIM_PRESCALE_USVAL;
 596              	 .loc 4 88 0
 597 0006 4FF00104 	 mov r4,#1
 598 000a 8DF82840 	 strb r4,[sp,#40]
  89:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR0_Cfg.PrescaleValue = 10;
 599              	 .loc 4 89 0
 600 000e 4FF00A03 	 mov r3,#10
 601 0012 0B93     	 str r3,[sp,#44]
  90:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR0_Match.MatchChannel = TIM_MR0_INT;
 602              	 .loc 4 90 0
 603 0014 4FF00006 	 mov r6,#0
 604 0018 8DF80460 	 strb r6,[sp,#4]
  91:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR0_Match.IntOnMatch = ENABLE;
 605              	 .loc 4 91 0
 606 001c 8DF80540 	 strb r4,[sp,#5]
  92:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR0_Match.ResetOnMatch = ENABLE;
 607              	 .loc 4 92 0
 608 0020 8DF80740 	 strb r4,[sp,#7]
  93:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR0_Match.StopOnMatch = DISABLE;
 609              	 .loc 4 93 0
 610 0024 8DF80660 	 strb r6,[sp,#6]
  94:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR0_Match.ExtMatchOutputType = TIM_EXTMATCH_NOTHING;
 611              	 .loc 4 94 0
 612 0028 8DF80860 	 strb r6,[sp,#8]
  96:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR0_Match.MatchValue = INTERVAL_IN_MICROSECONDS; // 16 for 16mhz avr
 613              	 .loc 4 96 0
 614 002c 4FF08008 	 mov r8,#128
 615 0030 CDF80C80 	 str r8,[sp,#12]
  98:src/MightyBoard/Motherboard/Motherboard.cc **** 	TIM_Init(LPC_TIM0, TIM_TIMER_MODE, &TMR0_Cfg);
 616              	 .loc 4 98 0
 617 0034 4FF04020 	 mov r0,#1073758208
 618              	.LVL27:
 619 0038 3146     	 mov r1,r6
 620 003a 0AAA     	 add r2,sp,#40
 621 003c FFF7FEFF 	 bl TIM_Init
  99:src/MightyBoard/Motherboard/Motherboard.cc **** 	TIM_ConfigMatch(LPC_TIM0, &TMR0_Match);
 622              	 .loc 4 99 0
 623 0040 4FF04020 	 mov r0,#1073758208
 624 0044 01A9     	 add r1,sp,#4
 625 0046 FFF7FEFF 	 bl TIM_ConfigMatch
 626              	.LVL28:
 627              	.LBB216:
 628              	.LBB217:
 629              	 .file 6 "src/MightyBoard/Motherboard/system/core_cm3.h"
   1:src/MightyBoard/Motherboard/system/core_cm3.h **** /**************************************************************************//**
   2:src/MightyBoard/Motherboard/system/core_cm3.h ****  * @file     core_cm3.h
   3:src/MightyBoard/Motherboard/system/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:src/MightyBoard/Motherboard/system/core_cm3.h ****  * @version  V2.01
   5:src/MightyBoard/Motherboard/system/core_cm3.h ****  * @date     06. December 2010
   6:src/MightyBoard/Motherboard/system/core_cm3.h ****  *
   7:src/MightyBoard/Motherboard/system/core_cm3.h ****  * @note
   8:src/MightyBoard/Motherboard/system/core_cm3.h ****  * Copyright (C) 2009-2010 ARM Limited. All rights reserved.
   9:src/MightyBoard/Motherboard/system/core_cm3.h ****  *
  10:src/MightyBoard/Motherboard/system/core_cm3.h ****  * @par
  11:src/MightyBoard/Motherboard/system/core_cm3.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:src/MightyBoard/Motherboard/system/core_cm3.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:src/MightyBoard/Motherboard/system/core_cm3.h ****  * within development tools that are supporting such ARM based processors.
  14:src/MightyBoard/Motherboard/system/core_cm3.h ****  *
  15:src/MightyBoard/Motherboard/system/core_cm3.h ****  * @par
  16:src/MightyBoard/Motherboard/system/core_cm3.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:src/MightyBoard/Motherboard/system/core_cm3.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:src/MightyBoard/Motherboard/system/core_cm3.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:src/MightyBoard/Motherboard/system/core_cm3.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:src/MightyBoard/Motherboard/system/core_cm3.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:src/MightyBoard/Motherboard/system/core_cm3.h ****  *
  22:src/MightyBoard/Motherboard/system/core_cm3.h ****  ******************************************************************************/
  23:src/MightyBoard/Motherboard/system/core_cm3.h **** #if defined ( __ICCARM__ )
  24:src/MightyBoard/Motherboard/system/core_cm3.h ****  #pragma system_include  /* treat file as system include file for MISRA check */
  25:src/MightyBoard/Motherboard/system/core_cm3.h **** #endif
  26:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  27:src/MightyBoard/Motherboard/system/core_cm3.h **** #ifdef __cplusplus
  28:src/MightyBoard/Motherboard/system/core_cm3.h ****  extern "C" {
  29:src/MightyBoard/Motherboard/system/core_cm3.h **** #endif
  30:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  31:src/MightyBoard/Motherboard/system/core_cm3.h **** #ifndef __CORE_CM3_H_GENERIC
  32:src/MightyBoard/Motherboard/system/core_cm3.h **** #define __CORE_CM3_H_GENERIC
  33:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  34:src/MightyBoard/Motherboard/system/core_cm3.h **** /**  @ingroup  CMSIS
  35:src/MightyBoard/Motherboard/system/core_cm3.h ****  @addtogroup CMSIS_core_LintCinfiguration CMSIS Core Lint Configuration
  36:src/MightyBoard/Motherboard/system/core_cm3.h ****   List of Lint messages which will be suppressed and not shown:
  37:src/MightyBoard/Motherboard/system/core_cm3.h ****     - not yet checked
  38:src/MightyBoard/Motherboard/system/core_cm3.h ****   .
  39:src/MightyBoard/Motherboard/system/core_cm3.h ****   Note:  To re-enable a Message, insert a space before 'lint' *
  40:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  41:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
  42:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  43:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  44:src/MightyBoard/Motherboard/system/core_cm3.h **** /*******************************************************************************
  45:src/MightyBoard/Motherboard/system/core_cm3.h ****  *                 CMSIS definitions
  46:src/MightyBoard/Motherboard/system/core_cm3.h ****  ******************************************************************************/
  47:src/MightyBoard/Motherboard/system/core_cm3.h **** /** @ingroup  CMSIS
  48:src/MightyBoard/Motherboard/system/core_cm3.h ****  * @addtogroup CMSIS_core_definitions CMSIS Core Definitions
  49:src/MightyBoard/Motherboard/system/core_cm3.h ****   This file defines all structures and symbols for CMSIS core:
  50:src/MightyBoard/Motherboard/system/core_cm3.h ****    - CMSIS version number
  51:src/MightyBoard/Motherboard/system/core_cm3.h ****    - Cortex-M core
  52:src/MightyBoard/Motherboard/system/core_cm3.h ****    - Cortex-M core Revision Number
  53:src/MightyBoard/Motherboard/system/core_cm3.h ****   @{
  54:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
  55:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  56:src/MightyBoard/Motherboard/system/core_cm3.h **** /*  CMSIS CM3 definitions */
  57:src/MightyBoard/Motherboard/system/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x02)                                                       /*!<
  58:src/MightyBoard/Motherboard/system/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x00)                                                       /*!<
  59:src/MightyBoard/Motherboard/system/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | __CM3_CMSIS_VERSION_SUB) /*!<
  60:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  61:src/MightyBoard/Motherboard/system/core_cm3.h **** #define __CORTEX_M                (0x03)                                                       /*!<
  62:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  63:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  64:src/MightyBoard/Motherboard/system/core_cm3.h **** #if defined ( __CC_ARM   )
  65:src/MightyBoard/Motherboard/system/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  66:src/MightyBoard/Motherboard/system/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  67:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  68:src/MightyBoard/Motherboard/system/core_cm3.h **** #elif defined ( __ICCARM__ )
  69:src/MightyBoard/Motherboard/system/core_cm3.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
  70:src/MightyBoard/Motherboard/system/core_cm3.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
  71:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  72:src/MightyBoard/Motherboard/system/core_cm3.h **** #elif defined   (  __GNUC__  )
  73:src/MightyBoard/Motherboard/system/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  74:src/MightyBoard/Motherboard/system/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  75:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  76:src/MightyBoard/Motherboard/system/core_cm3.h **** #elif defined   (  __TASKING__  )
  77:src/MightyBoard/Motherboard/system/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
  78:src/MightyBoard/Motherboard/system/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
  79:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  80:src/MightyBoard/Motherboard/system/core_cm3.h **** #endif
  81:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  82:src/MightyBoard/Motherboard/system/core_cm3.h **** #include <stdint.h>                      /*!< standard types definitions                      */
  83:src/MightyBoard/Motherboard/system/core_cm3.h **** #include "core_cmInstr.h"                /*!< Core Instruction Access                         */
  84:src/MightyBoard/Motherboard/system/core_cm3.h **** #include "core_cmFunc.h"                 /*!< Core Function Access                            */
  85:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  86:src/MightyBoard/Motherboard/system/core_cm3.h **** #endif /* __CORE_CM3_H_GENERIC */
  87:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  88:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  89:src/MightyBoard/Motherboard/system/core_cm3.h **** #ifndef __CMSIS_GENERIC
  90:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  91:src/MightyBoard/Motherboard/system/core_cm3.h **** #ifndef __CORE_CM3_H_DEPENDANT
  92:src/MightyBoard/Motherboard/system/core_cm3.h **** #define __CORE_CM3_H_DEPENDANT
  93:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  94:src/MightyBoard/Motherboard/system/core_cm3.h **** /* IO definitions (access restrictions to peripheral registers) */
  95:src/MightyBoard/Motherboard/system/core_cm3.h **** #ifdef __cplusplus
  96:src/MightyBoard/Motherboard/system/core_cm3.h ****   #define     __I     volatile           /*!< defines 'read only' permissions                 */
  97:src/MightyBoard/Motherboard/system/core_cm3.h **** #else
  98:src/MightyBoard/Motherboard/system/core_cm3.h ****   #define     __I     volatile const     /*!< defines 'read only' permissions                 */
  99:src/MightyBoard/Motherboard/system/core_cm3.h **** #endif
 100:src/MightyBoard/Motherboard/system/core_cm3.h **** #define     __O     volatile             /*!< defines 'write only' permissions                */
 101:src/MightyBoard/Motherboard/system/core_cm3.h **** #define     __IO    volatile             /*!< defines 'read / write' permissions              */
 102:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 103:src/MightyBoard/Motherboard/system/core_cm3.h **** /*@} end of group CMSIS_core_definitions */
 104:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 105:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 106:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 107:src/MightyBoard/Motherboard/system/core_cm3.h **** /*******************************************************************************
 108:src/MightyBoard/Motherboard/system/core_cm3.h ****  *                 Register Abstraction
 109:src/MightyBoard/Motherboard/system/core_cm3.h ****  ******************************************************************************/
 110:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 111:src/MightyBoard/Motherboard/system/core_cm3.h **** /** @ingroup  CMSIS
 112:src/MightyBoard/Motherboard/system/core_cm3.h ****  * @addtogroup CMSIS_core_register CMSIS Core Register
 113:src/MightyBoard/Motherboard/system/core_cm3.h ****   Core Register contain:
 114:src/MightyBoard/Motherboard/system/core_cm3.h ****   - Core Register
 115:src/MightyBoard/Motherboard/system/core_cm3.h ****   - Core NVIC Register
 116:src/MightyBoard/Motherboard/system/core_cm3.h ****   - Core SCB Register
 117:src/MightyBoard/Motherboard/system/core_cm3.h ****   - Core SysTick Register
 118:src/MightyBoard/Motherboard/system/core_cm3.h ****   - Core Debug Register
 119:src/MightyBoard/Motherboard/system/core_cm3.h ****   - Core MPU Register
 120:src/MightyBoard/Motherboard/system/core_cm3.h **** */
 121:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 122:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \ingroup  CMSIS_core_register
 123:src/MightyBoard/Motherboard/system/core_cm3.h ****     \defgroup CMSIS_CORE CMSIS Core
 124:src/MightyBoard/Motherboard/system/core_cm3.h ****   Type definitions for the Cortex-M Core Registers
 125:src/MightyBoard/Motherboard/system/core_cm3.h ****   @{
 126:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 127:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 128:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Union type to access the Application Program Status Register (APSR).
 129:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 130:src/MightyBoard/Motherboard/system/core_cm3.h **** typedef union
 131:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 132:src/MightyBoard/Motherboard/system/core_cm3.h ****   struct
 133:src/MightyBoard/Motherboard/system/core_cm3.h ****   {
 134:src/MightyBoard/Motherboard/system/core_cm3.h **** #if (__CORTEX_M != 0x04)
 135:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
 136:src/MightyBoard/Motherboard/system/core_cm3.h **** #else
 137:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
 138:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 139:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
 140:src/MightyBoard/Motherboard/system/core_cm3.h **** #endif
 141:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 142:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 143:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 144:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 145:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 146:src/MightyBoard/Motherboard/system/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 147:src/MightyBoard/Motherboard/system/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 148:src/MightyBoard/Motherboard/system/core_cm3.h **** } APSR_Type;
 149:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 150:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 151:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Union type to access the Interrupt Program Status Register (IPSR).
 152:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 153:src/MightyBoard/Motherboard/system/core_cm3.h **** typedef union
 154:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 155:src/MightyBoard/Motherboard/system/core_cm3.h ****   struct
 156:src/MightyBoard/Motherboard/system/core_cm3.h ****   {
 157:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 158:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
 159:src/MightyBoard/Motherboard/system/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 160:src/MightyBoard/Motherboard/system/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 161:src/MightyBoard/Motherboard/system/core_cm3.h **** } IPSR_Type;
 162:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 163:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 164:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 165:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 166:src/MightyBoard/Motherboard/system/core_cm3.h **** typedef union
 167:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 168:src/MightyBoard/Motherboard/system/core_cm3.h ****   struct
 169:src/MightyBoard/Motherboard/system/core_cm3.h ****   {
 170:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 171:src/MightyBoard/Motherboard/system/core_cm3.h **** #if (__CORTEX_M != 0x04)
 172:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
 173:src/MightyBoard/Motherboard/system/core_cm3.h **** #else
 174:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
 175:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 176:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
 177:src/MightyBoard/Motherboard/system/core_cm3.h **** #endif
 178:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
 179:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
 180:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 181:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 182:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 183:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 184:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 185:src/MightyBoard/Motherboard/system/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 186:src/MightyBoard/Motherboard/system/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 187:src/MightyBoard/Motherboard/system/core_cm3.h **** } xPSR_Type;
 188:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 189:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 190:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Union type to access the Control Registers (CONTROL).
 191:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 192:src/MightyBoard/Motherboard/system/core_cm3.h **** typedef union
 193:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 194:src/MightyBoard/Motherboard/system/core_cm3.h ****   struct
 195:src/MightyBoard/Motherboard/system/core_cm3.h ****   {
 196:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 197:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
 198:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
 199:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
 200:src/MightyBoard/Motherboard/system/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 201:src/MightyBoard/Motherboard/system/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 202:src/MightyBoard/Motherboard/system/core_cm3.h **** } CONTROL_Type;
 203:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 204:src/MightyBoard/Motherboard/system/core_cm3.h **** /*@} end of group CMSIS_CORE */
 205:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 206:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 207:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \ingroup  CMSIS_core_register
 208:src/MightyBoard/Motherboard/system/core_cm3.h ****     \defgroup CMSIS_NVIC CMSIS NVIC
 209:src/MightyBoard/Motherboard/system/core_cm3.h ****   Type definitions for the Cortex-M NVIC Registers
 210:src/MightyBoard/Motherboard/system/core_cm3.h ****   @{
 211:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 212:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 213:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 214:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 215:src/MightyBoard/Motherboard/system/core_cm3.h **** typedef struct
 216:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 217:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t ISER[8];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register   
 218:src/MightyBoard/Motherboard/system/core_cm3.h ****        uint32_t RESERVED0[24];
 219:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t ICER[8];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 220:src/MightyBoard/Motherboard/system/core_cm3.h ****        uint32_t RSERVED1[24];
 221:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t ISPR[8];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register  
 222:src/MightyBoard/Motherboard/system/core_cm3.h ****        uint32_t RESERVED2[24];
 223:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t ICPR[8];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 224:src/MightyBoard/Motherboard/system/core_cm3.h ****        uint32_t RESERVED3[24];
 225:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t IABR[8];                 /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register   
 226:src/MightyBoard/Motherboard/system/core_cm3.h ****        uint32_t RESERVED4[56];
 227:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint8_t  IP[240];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 228:src/MightyBoard/Motherboard/system/core_cm3.h ****        uint32_t RESERVED5[644];
 229:src/MightyBoard/Motherboard/system/core_cm3.h ****   __O  uint32_t STIR;                    /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 230:src/MightyBoard/Motherboard/system/core_cm3.h **** }  NVIC_Type;
 231:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 232:src/MightyBoard/Motherboard/system/core_cm3.h **** /*@} end of group CMSIS_NVIC */
 233:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 234:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 235:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \ingroup  CMSIS_core_register
 236:src/MightyBoard/Motherboard/system/core_cm3.h ****     \defgroup CMSIS_SCB CMSIS SCB
 237:src/MightyBoard/Motherboard/system/core_cm3.h ****   Type definitions for the Cortex-M System Control Block Registers
 238:src/MightyBoard/Motherboard/system/core_cm3.h ****   @{
 239:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 240:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 241:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Structure type to access the System Control Block (SCB).
 242:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 243:src/MightyBoard/Motherboard/system/core_cm3.h **** typedef struct
 244:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 245:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPU ID Base Register            
 246:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control State Register
 247:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register    
 248:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt / Reset Co
 249:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register         
 250:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register  
 251:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint8_t  SHP[12];                 /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 252:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State
 253:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t CFSR;                    /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 254:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t HFSR;                    /*!< Offset: 0x02C (R/W)  Hard Fault Status Register      
 255:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register     
 256:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t MMFAR;                   /*!< Offset: 0x034 (R/W)  Mem Manage Address Register     
 257:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t BFAR;                    /*!< Offset: 0x038 (R/W)  Bus Fault Address Register      
 258:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t AFSR;                    /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 259:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t PFR[2];                  /*!< Offset: 0x040 (R/ )  Processor Feature Register      
 260:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t DFR;                     /*!< Offset: 0x048 (R/ )  Debug Feature Register          
 261:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t ADR;                     /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register      
 262:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t MMFR[4];                 /*!< Offset: 0x050 (R/ )  Memory Model Feature Register   
 263:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t ISAR[5];                 /*!< Offset: 0x060 (R/ )  ISA Feature Register            
 264:src/MightyBoard/Motherboard/system/core_cm3.h **** } SCB_Type;
 265:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 266:src/MightyBoard/Motherboard/system/core_cm3.h **** /* SCB CPUID Register Definitions */
 267:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 268:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 269:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 270:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 271:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 272:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 273:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 274:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 275:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 276:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 277:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 278:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 279:src/MightyBoard/Motherboard/system/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 280:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 281:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 282:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 283:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 284:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 285:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 286:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 287:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 288:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 289:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 290:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 291:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 292:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 293:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 294:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 295:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 296:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 297:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 298:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 299:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 300:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 301:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 302:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 303:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 304:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 305:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 306:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 307:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 308:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 309:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 310:src/MightyBoard/Motherboard/system/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 311:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB 
 312:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (1UL << SCB_VTOR_TBLBASE_Pos)                  /*!< SCB 
 313:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 314:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 315:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 316:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 317:src/MightyBoard/Motherboard/system/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 318:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 319:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 320:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 321:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 322:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 323:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 324:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 325:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 326:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 327:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 328:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 329:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 330:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 331:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 332:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 333:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 334:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 335:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 336:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 337:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 338:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 339:src/MightyBoard/Motherboard/system/core_cm3.h **** /* SCB System Control Register Definitions */
 340:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 341:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 342:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 343:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 344:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 345:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 346:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 347:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 348:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 349:src/MightyBoard/Motherboard/system/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 350:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 351:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 352:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 353:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 354:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 355:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 356:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 357:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 358:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 359:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 360:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 361:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 362:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 363:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 364:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 365:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 366:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 367:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 368:src/MightyBoard/Motherboard/system/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 369:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 370:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 371:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 372:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 373:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 374:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 375:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 376:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 377:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 378:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 379:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 380:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 381:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 382:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 383:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 384:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 385:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 386:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 387:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 388:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 389:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 390:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 391:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 392:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 393:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 394:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 395:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 396:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 397:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 398:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 399:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 400:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 401:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 402:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 403:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 404:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 405:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 406:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 407:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 408:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 409:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 410:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 411:src/MightyBoard/Motherboard/system/core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 412:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 413:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 414:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 415:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 416:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 417:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 418:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 419:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 420:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 421:src/MightyBoard/Motherboard/system/core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 422:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 423:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 424:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 425:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 426:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 427:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 428:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 429:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 430:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 431:src/MightyBoard/Motherboard/system/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 432:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 433:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 434:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 435:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 436:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 437:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 438:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 439:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 440:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 441:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 442:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 443:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 444:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 445:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1UL << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 446:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 447:src/MightyBoard/Motherboard/system/core_cm3.h **** /*@} end of group CMSIS_SCB */
 448:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 449:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 450:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \ingroup  CMSIS_core_register
 451:src/MightyBoard/Motherboard/system/core_cm3.h ****     \defgroup CMSIS_SysTick CMSIS SysTick
 452:src/MightyBoard/Motherboard/system/core_cm3.h ****   Type definitions for the Cortex-M System Timer Registers
 453:src/MightyBoard/Motherboard/system/core_cm3.h ****   @{
 454:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 455:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 456:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Structure type to access the System Timer (SysTick).
 457:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 458:src/MightyBoard/Motherboard/system/core_cm3.h **** typedef struct
 459:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 460:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 461:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register   
 462:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register  
 463:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register    
 464:src/MightyBoard/Motherboard/system/core_cm3.h **** } SysTick_Type;
 465:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 466:src/MightyBoard/Motherboard/system/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 467:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 468:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 469:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 470:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 471:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 472:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 473:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 474:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 475:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 476:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 477:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 478:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 479:src/MightyBoard/Motherboard/system/core_cm3.h **** /* SysTick Reload Register Definitions */
 480:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 481:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 482:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 483:src/MightyBoard/Motherboard/system/core_cm3.h **** /* SysTick Current Register Definitions */
 484:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 485:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 486:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 487:src/MightyBoard/Motherboard/system/core_cm3.h **** /* SysTick Calibration Register Definitions */
 488:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 489:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 490:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 491:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 492:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 493:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 494:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 495:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 496:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 497:src/MightyBoard/Motherboard/system/core_cm3.h **** /*@} end of group CMSIS_SysTick */
 498:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 499:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 500:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \ingroup  CMSIS_core_register
 501:src/MightyBoard/Motherboard/system/core_cm3.h ****     \defgroup CMSIS_ITM CMSIS ITM
 502:src/MightyBoard/Motherboard/system/core_cm3.h ****   Type definitions for the Cortex-M Instrumentation Trace Macrocell (ITM)
 503:src/MightyBoard/Motherboard/system/core_cm3.h ****   @{
 504:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 505:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 506:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 507:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 508:src/MightyBoard/Motherboard/system/core_cm3.h **** typedef struct
 509:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 510:src/MightyBoard/Motherboard/system/core_cm3.h ****   __O  union
 511:src/MightyBoard/Motherboard/system/core_cm3.h ****   {
 512:src/MightyBoard/Motherboard/system/core_cm3.h ****     __O  uint8_t    u8;                  /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit         
 513:src/MightyBoard/Motherboard/system/core_cm3.h ****     __O  uint16_t   u16;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit        
 514:src/MightyBoard/Motherboard/system/core_cm3.h ****     __O  uint32_t   u32;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit        
 515:src/MightyBoard/Motherboard/system/core_cm3.h ****   }  PORT [32];                          /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers     
 516:src/MightyBoard/Motherboard/system/core_cm3.h ****        uint32_t RESERVED0[864];
 517:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t TER;                     /*!< Offset:       (R/W)  ITM Trace Enable Register       
 518:src/MightyBoard/Motherboard/system/core_cm3.h ****        uint32_t RESERVED1[15];
 519:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t TPR;                     /*!< Offset:       (R/W)  ITM Trace Privilege Register    
 520:src/MightyBoard/Motherboard/system/core_cm3.h ****        uint32_t RESERVED2[15];
 521:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t TCR;                     /*!< Offset:       (R/W)  ITM Trace Control Register      
 522:src/MightyBoard/Motherboard/system/core_cm3.h ****        uint32_t RESERVED3[29];
 523:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t IWR;                     /*!< Offset:       (R/W)  ITM Integration Write Register  
 524:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t IRR;                     /*!< Offset:       (R/W)  ITM Integration Read Register   
 525:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t IMCR;                    /*!< Offset:       (R/W)  ITM Integration Mode Control Reg
 526:src/MightyBoard/Motherboard/system/core_cm3.h ****        uint32_t RESERVED4[43];
 527:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t LAR;                     /*!< Offset:       (R/W)  ITM Lock Access Register        
 528:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t LSR;                     /*!< Offset:       (R/W)  ITM Lock Status Register        
 529:src/MightyBoard/Motherboard/system/core_cm3.h ****        uint32_t RESERVED5[6];
 530:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t PID4;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 531:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t PID5;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 532:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t PID6;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 533:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t PID7;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 534:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t PID0;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 535:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t PID1;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 536:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t PID2;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 537:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t PID3;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 538:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t CID0;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 539:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t CID1;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 540:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t CID2;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 541:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t CID3;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 542:src/MightyBoard/Motherboard/system/core_cm3.h **** } ITM_Type;
 543:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 544:src/MightyBoard/Motherboard/system/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 545:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 546:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL << ITM_TPR_PRIVMASK_Pos)                /*!< ITM 
 547:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 548:src/MightyBoard/Motherboard/system/core_cm3.h **** /* ITM Trace Control Register Definitions */
 549:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
 550:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 551:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 552:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_ATBID_Pos                  16                                             /*!< ITM 
 553:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_ATBID_Msk                  (0x7FUL << ITM_TCR_ATBID_Pos)                  /*!< ITM 
 554:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 555:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 556:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 557:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 558:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 559:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 560:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 561:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 562:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 563:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 564:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 565:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 566:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 567:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 568:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 569:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 570:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 571:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1UL << ITM_TCR_ITMENA_Pos)                    /*!< ITM 
 572:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 573:src/MightyBoard/Motherboard/system/core_cm3.h **** /* ITM Integration Write Register Definitions */
 574:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 575:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM 
 576:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 577:src/MightyBoard/Motherboard/system/core_cm3.h **** /* ITM Integration Read Register Definitions */
 578:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 579:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1UL << ITM_IRR_ATREADYM_Pos)                  /*!< ITM 
 580:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 581:src/MightyBoard/Motherboard/system/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 582:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
 583:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM 
 584:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 585:src/MightyBoard/Motherboard/system/core_cm3.h **** /* ITM Lock Status Register Definitions */
 586:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
 587:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 588:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 589:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 590:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 591:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 592:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 593:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_LSR_Present_Msk                (1UL << ITM_LSR_Present_Pos)                   /*!< ITM 
 594:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 595:src/MightyBoard/Motherboard/system/core_cm3.h **** /*@}*/ /* end of group CMSIS_ITM */
 596:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 597:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 598:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \ingroup  CMSIS_core_register
 599:src/MightyBoard/Motherboard/system/core_cm3.h ****     \defgroup CMSIS_InterruptType CMSIS Interrupt Type
 600:src/MightyBoard/Motherboard/system/core_cm3.h ****   Type definitions for the Cortex-M Interrupt Type Register
 601:src/MightyBoard/Motherboard/system/core_cm3.h ****   @{
 602:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 603:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 604:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Structure type to access the Interrupt Type Register.
 605:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 606:src/MightyBoard/Motherboard/system/core_cm3.h **** typedef struct
 607:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 608:src/MightyBoard/Motherboard/system/core_cm3.h ****        uint32_t RESERVED0;
 609:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t ICTR;                    /*!< Offset: 0x004 (R/ )  Interrupt Control Type Register 
 610:src/MightyBoard/Motherboard/system/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 611:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t ACTLR;                   /*!< Offset: 0x008 (R/W)  Auxiliary Control Register      
 612:src/MightyBoard/Motherboard/system/core_cm3.h **** #else
 613:src/MightyBoard/Motherboard/system/core_cm3.h ****        uint32_t RESERVED1;
 614:src/MightyBoard/Motherboard/system/core_cm3.h **** #endif
 615:src/MightyBoard/Motherboard/system/core_cm3.h **** } InterruptType_Type;
 616:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 617:src/MightyBoard/Motherboard/system/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 618:src/MightyBoard/Motherboard/system/core_cm3.h **** #define IntType_ICTR_INTLINESNUM_Pos  0                                                   /*!< Inte
 619:src/MightyBoard/Motherboard/system/core_cm3.h **** #define IntType_ICTR_INTLINESNUM_Msk (0x1FUL << IntType_ICTR_INTLINESNUM_Pos)             /*!< Inte
 620:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 621:src/MightyBoard/Motherboard/system/core_cm3.h **** /* Auxiliary Control Register Definitions */
 622:src/MightyBoard/Motherboard/system/core_cm3.h **** #define IntType_ACTLR_DISFOLD_Pos     2                                                   /*!< Inte
 623:src/MightyBoard/Motherboard/system/core_cm3.h **** #define IntType_ACTLR_DISFOLD_Msk    (1UL << IntType_ACTLR_DISFOLD_Pos)                   /*!< Inte
 624:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 625:src/MightyBoard/Motherboard/system/core_cm3.h **** #define IntType_ACTLR_DISDEFWBUF_Pos  1                                                   /*!< Inte
 626:src/MightyBoard/Motherboard/system/core_cm3.h **** #define IntType_ACTLR_DISDEFWBUF_Msk (1UL << IntType_ACTLR_DISDEFWBUF_Pos)                /*!< Inte
 627:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 628:src/MightyBoard/Motherboard/system/core_cm3.h **** #define IntType_ACTLR_DISMCYCINT_Pos  0                                                   /*!< Inte
 629:src/MightyBoard/Motherboard/system/core_cm3.h **** #define IntType_ACTLR_DISMCYCINT_Msk (1UL << IntType_ACTLR_DISMCYCINT_Pos)                /*!< Inte
 630:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 631:src/MightyBoard/Motherboard/system/core_cm3.h **** /*@}*/ /* end of group CMSIS_InterruptType */
 632:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 633:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 634:src/MightyBoard/Motherboard/system/core_cm3.h **** #if (__MPU_PRESENT == 1)
 635:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \ingroup  CMSIS_core_register
 636:src/MightyBoard/Motherboard/system/core_cm3.h ****     \defgroup CMSIS_MPU CMSIS MPU
 637:src/MightyBoard/Motherboard/system/core_cm3.h ****   Type definitions for the Cortex-M Memory Protection Unit (MPU)
 638:src/MightyBoard/Motherboard/system/core_cm3.h ****   @{
 639:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 640:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 641:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Structure type to access the Memory Protection Unit (MPU).
 642:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 643:src/MightyBoard/Motherboard/system/core_cm3.h **** typedef struct
 644:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 645:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t TYPE;                    /*!< Offset: 0x000 (R/ )  MPU Type Register               
 646:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x004 (R/W)  MPU Control Register            
 647:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t RNR;                     /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register      
 648:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t RBAR;                    /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
 649:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t RASR;                    /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
 650:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t RBAR_A1;                 /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
 651:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t RASR_A1;                 /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
 652:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t RBAR_A2;                 /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
 653:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t RASR_A2;                 /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
 654:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t RBAR_A3;                 /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
 655:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t RASR_A3;                 /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
 656:src/MightyBoard/Motherboard/system/core_cm3.h **** } MPU_Type;
 657:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 658:src/MightyBoard/Motherboard/system/core_cm3.h **** /* MPU Type Register */
 659:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
 660:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 661:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 662:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
 663:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 664:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 665:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
 666:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
 667:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 668:src/MightyBoard/Motherboard/system/core_cm3.h **** /* MPU Control Register */
 669:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
 670:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 671:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 672:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
 673:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 674:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 675:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
 676:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1UL << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
 677:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 678:src/MightyBoard/Motherboard/system/core_cm3.h **** /* MPU Region Number Register */
 679:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
 680:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL << MPU_RNR_REGION_Pos)                 /*!< MPU 
 681:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 682:src/MightyBoard/Motherboard/system/core_cm3.h **** /* MPU Region Base Address Register */
 683:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
 684:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
 685:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 686:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
 687:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 688:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 689:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
 690:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFUL << MPU_RBAR_REGION_Pos)                 /*!< MPU 
 691:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 692:src/MightyBoard/Motherboard/system/core_cm3.h **** /* MPU Region Attribute and Size Register */
 693:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
 694:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
 695:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 696:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
 697:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_AP_Msk                    (7UL << MPU_RASR_AP_Pos)                       /*!< MPU 
 698:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 699:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
 700:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (7UL << MPU_RASR_TEX_Pos)                      /*!< MPU 
 701:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 702:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
 703:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
 704:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 705:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
 706:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
 707:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 708:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
 709:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
 710:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 711:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
 712:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
 713:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 714:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
 715:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 716:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 717:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_ENA_Pos                     0                                            /*!< MPU 
 718:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_ENA_Msk                    (0x1UL << MPU_RASR_ENA_Pos)                   /*!< MPU 
 719:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 720:src/MightyBoard/Motherboard/system/core_cm3.h **** /*@} end of group CMSIS_MPU */
 721:src/MightyBoard/Motherboard/system/core_cm3.h **** #endif
 722:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 723:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 724:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \ingroup  CMSIS_core_register
 725:src/MightyBoard/Motherboard/system/core_cm3.h ****     \defgroup CMSIS_CoreDebug CMSIS Core Debug
 726:src/MightyBoard/Motherboard/system/core_cm3.h ****   Type definitions for the Cortex-M Core Debug Registers
 727:src/MightyBoard/Motherboard/system/core_cm3.h ****   @{
 728:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 729:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 730:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Structure type to access the Core Debug Register (CoreDebug).
 731:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 732:src/MightyBoard/Motherboard/system/core_cm3.h **** typedef struct
 733:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 734:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
 735:src/MightyBoard/Motherboard/system/core_cm3.h ****   __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
 736:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
 737:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
 738:src/MightyBoard/Motherboard/system/core_cm3.h **** } CoreDebug_Type;
 739:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 740:src/MightyBoard/Motherboard/system/core_cm3.h **** /* Debug Halting Control and Status Register */
 741:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 742:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 743:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 744:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 745:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 746:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 747:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 748:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 749:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 750:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 751:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 752:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 753:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 754:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 755:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 756:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 757:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 758:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 759:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 760:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 761:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 762:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
 763:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
 764:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 765:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 766:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 767:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 768:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 769:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 770:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 771:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 772:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 773:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 774:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 775:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 776:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 777:src/MightyBoard/Motherboard/system/core_cm3.h **** /* Debug Core Register Selector Register */
 778:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 779:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 780:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 781:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 782:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 783:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 784:src/MightyBoard/Motherboard/system/core_cm3.h **** /* Debug Exception and Monitor Control Register */
 785:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
 786:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
 787:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 788:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
 789:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
 790:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 791:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
 792:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
 793:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 794:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
 795:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
 796:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 797:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
 798:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
 799:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 800:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 801:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 802:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 803:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
 804:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
 805:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 806:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
 807:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
 808:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 809:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
 810:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
 811:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 812:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
 813:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
 814:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 815:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
 816:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
 817:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 818:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
 819:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
 820:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 821:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 822:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 823:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 824:src/MightyBoard/Motherboard/system/core_cm3.h **** /*@} end of group CMSIS_CoreDebug */
 825:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 826:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 827:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \ingroup  CMSIS_core_register
 828:src/MightyBoard/Motherboard/system/core_cm3.h ****   @{
 829:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 830:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 831:src/MightyBoard/Motherboard/system/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
 832:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 833:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address        
 834:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
 835:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address    
 836:src/MightyBoard/Motherboard/system/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address       
 837:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 838:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 839:src/MightyBoard/Motherboard/system/core_cm3.h **** #define InterruptType       ((InterruptType_Type *) SCS_BASE)         /*!< Interrupt Type Register 
 840:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 841:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 842:src/MightyBoard/Motherboard/system/core_cm3.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 843:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM                 ((ITM_Type *)           ITM_BASE)         /*!< ITM configuration struct
 844:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 845:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 846:src/MightyBoard/Motherboard/system/core_cm3.h **** #if (__MPU_PRESENT == 1)
 847:src/MightyBoard/Motherboard/system/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit  
 848:src/MightyBoard/Motherboard/system/core_cm3.h ****   #define MPU               ((MPU_Type*)            MPU_BASE)         /*!< Memory Protection Unit  
 849:src/MightyBoard/Motherboard/system/core_cm3.h **** #endif
 850:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 851:src/MightyBoard/Motherboard/system/core_cm3.h **** /*@} */
 852:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 853:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 854:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 855:src/MightyBoard/Motherboard/system/core_cm3.h **** /*******************************************************************************
 856:src/MightyBoard/Motherboard/system/core_cm3.h ****  *                Hardware Abstraction Layer
 857:src/MightyBoard/Motherboard/system/core_cm3.h ****  ******************************************************************************/
 858:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \ingroup  CMSIS
 859:src/MightyBoard/Motherboard/system/core_cm3.h ****   \addtogroup CMSIS_Core_FunctionInterface CMSIS Core Function Interface
 860:src/MightyBoard/Motherboard/system/core_cm3.h ****   Core Function Interface contains:
 861:src/MightyBoard/Motherboard/system/core_cm3.h ****   - Core NVIC Functions
 862:src/MightyBoard/Motherboard/system/core_cm3.h ****   - Core SysTick Functions
 863:src/MightyBoard/Motherboard/system/core_cm3.h ****   - Core Debug Functions
 864:src/MightyBoard/Motherboard/system/core_cm3.h ****   - Core Register Access Functions
 865:src/MightyBoard/Motherboard/system/core_cm3.h **** */
 866:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 867:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 868:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 869:src/MightyBoard/Motherboard/system/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
 870:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 871:src/MightyBoard/Motherboard/system/core_cm3.h ****     \defgroup CMSIS_Core_NVICFunctions CMSIS Core NVIC Functions
 872:src/MightyBoard/Motherboard/system/core_cm3.h ****   @{
 873:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 874:src/MightyBoard/Motherboard/system/core_cm3.h **** /** @addtogroup CMSIS_Core_NVICFunctions
 875:src/MightyBoard/Motherboard/system/core_cm3.h ****  * @{
 876:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 877:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Set Priority Grouping
 878:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 879:src/MightyBoard/Motherboard/system/core_cm3.h ****   This function sets the priority grouping field using the required unlock sequence.
 880:src/MightyBoard/Motherboard/system/core_cm3.h ****   The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
 881:src/MightyBoard/Motherboard/system/core_cm3.h ****   Only values from 0..7 are used.
 882:src/MightyBoard/Motherboard/system/core_cm3.h ****   In case of a conflict between priority grouping and available
 883:src/MightyBoard/Motherboard/system/core_cm3.h ****   priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
 884:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 885:src/MightyBoard/Motherboard/system/core_cm3.h ****     \param [in]      PriorityGroup  Priority grouping field
 886:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 887:src/MightyBoard/Motherboard/system/core_cm3.h **** static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
 888:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 889:src/MightyBoard/Motherboard/system/core_cm3.h ****   uint32_t reg_value;
 890:src/MightyBoard/Motherboard/system/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 a
 891:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 892:src/MightyBoard/Motherboard/system/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
 893:src/MightyBoard/Motherboard/system/core_cm3.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
 894:src/MightyBoard/Motherboard/system/core_cm3.h ****   reg_value  =  (reg_value                       |
 895:src/MightyBoard/Motherboard/system/core_cm3.h ****                 (0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 896:src/MightyBoard/Motherboard/system/core_cm3.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
 897:src/MightyBoard/Motherboard/system/core_cm3.h ****   SCB->AIRCR =  reg_value;
 898:src/MightyBoard/Motherboard/system/core_cm3.h **** }
 899:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 900:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 901:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Get Priority Grouping
 902:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 903:src/MightyBoard/Motherboard/system/core_cm3.h ****   This function gets the priority grouping from NVIC Interrupt Controller.
 904:src/MightyBoard/Motherboard/system/core_cm3.h ****   Priority grouping is SCB->AIRCR [10:8] PRIGROUP field.
 905:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 906:src/MightyBoard/Motherboard/system/core_cm3.h ****     \return                Priority grouping field
 907:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 908:src/MightyBoard/Motherboard/system/core_cm3.h **** static __INLINE uint32_t NVIC_GetPriorityGrouping(void)
 909:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 910:src/MightyBoard/Motherboard/system/core_cm3.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
 911:src/MightyBoard/Motherboard/system/core_cm3.h **** }
 912:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 913:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 914:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Enable External Interrupt
 915:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 916:src/MightyBoard/Motherboard/system/core_cm3.h ****     This function enables a device specific interupt in the NVIC interrupt controller.
 917:src/MightyBoard/Motherboard/system/core_cm3.h ****     The interrupt number cannot be a negative value.
 918:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 919:src/MightyBoard/Motherboard/system/core_cm3.h ****     \param [in]      IRQn  Number of the external interrupt to enable
 920:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 921:src/MightyBoard/Motherboard/system/core_cm3.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 922:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 923:src/MightyBoard/Motherboard/system/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 924:src/MightyBoard/Motherboard/system/core_cm3.h **** }
 925:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 926:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 927:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Disable External Interrupt
 928:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 929:src/MightyBoard/Motherboard/system/core_cm3.h ****     This function disables a device specific interupt in the NVIC interrupt controller.
 930:src/MightyBoard/Motherboard/system/core_cm3.h ****     The interrupt number cannot be a negative value.
 931:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 932:src/MightyBoard/Motherboard/system/core_cm3.h ****     \param [in]      IRQn  Number of the external interrupt to disable
 933:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 934:src/MightyBoard/Motherboard/system/core_cm3.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 935:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 936:src/MightyBoard/Motherboard/system/core_cm3.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 937:src/MightyBoard/Motherboard/system/core_cm3.h **** }
 938:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 939:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 940:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Get Pending Interrupt
 941:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 942:src/MightyBoard/Motherboard/system/core_cm3.h ****     This function reads the pending register in the NVIC and returns the pending bit
 943:src/MightyBoard/Motherboard/system/core_cm3.h ****     for the specified interrupt.
 944:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 945:src/MightyBoard/Motherboard/system/core_cm3.h ****     \param [in]      IRQn  Number of the interrupt for get pending
 946:src/MightyBoard/Motherboard/system/core_cm3.h ****     \return             0  Interrupt status is not pending
 947:src/MightyBoard/Motherboard/system/core_cm3.h ****     \return             1  Interrupt status is pending
 948:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 949:src/MightyBoard/Motherboard/system/core_cm3.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 950:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 951:src/MightyBoard/Motherboard/system/core_cm3.h ****   return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); 
 952:src/MightyBoard/Motherboard/system/core_cm3.h **** }
 953:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 954:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 955:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Set Pending Interrupt
 956:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 957:src/MightyBoard/Motherboard/system/core_cm3.h ****     This function sets the pending bit for the specified interrupt.
 958:src/MightyBoard/Motherboard/system/core_cm3.h ****     The interrupt number cannot be a negative value.
 959:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 960:src/MightyBoard/Motherboard/system/core_cm3.h ****     \param [in]      IRQn  Number of the interrupt for set pending
 961:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 962:src/MightyBoard/Motherboard/system/core_cm3.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
 963:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 964:src/MightyBoard/Motherboard/system/core_cm3.h ****   NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending 
 965:src/MightyBoard/Motherboard/system/core_cm3.h **** }
 966:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 967:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 968:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Clear Pending Interrupt
 969:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 970:src/MightyBoard/Motherboard/system/core_cm3.h ****     This function clears the pending bit for the specified interrupt.
 971:src/MightyBoard/Motherboard/system/core_cm3.h ****     The interrupt number cannot be a negative value.
 972:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 973:src/MightyBoard/Motherboard/system/core_cm3.h ****     \param [in]      IRQn  Number of the interrupt for clear pending
 974:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 975:src/MightyBoard/Motherboard/system/core_cm3.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 976:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 977:src/MightyBoard/Motherboard/system/core_cm3.h ****   NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrup
 978:src/MightyBoard/Motherboard/system/core_cm3.h **** }
 979:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 980:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 981:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Get Active Interrupt
 982:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 983:src/MightyBoard/Motherboard/system/core_cm3.h ****     This function reads the active register in NVIC and returns the active bit.
 984:src/MightyBoard/Motherboard/system/core_cm3.h ****     \param [in]      IRQn  Number of the interrupt for get active
 985:src/MightyBoard/Motherboard/system/core_cm3.h ****     \return             0  Interrupt status is not active
 986:src/MightyBoard/Motherboard/system/core_cm3.h ****     \return             1  Interrupt status is active
 987:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 988:src/MightyBoard/Motherboard/system/core_cm3.h **** static __INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
 989:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 990:src/MightyBoard/Motherboard/system/core_cm3.h ****   return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /
 991:src/MightyBoard/Motherboard/system/core_cm3.h **** }
 992:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 993:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 994:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Set Interrupt Priority
 995:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 996:src/MightyBoard/Motherboard/system/core_cm3.h ****     This function sets the priority for the specified interrupt. The interrupt
 997:src/MightyBoard/Motherboard/system/core_cm3.h ****     number can be positive to specify an external (device specific)
 998:src/MightyBoard/Motherboard/system/core_cm3.h ****     interrupt, or negative to specify an internal (core) interrupt.
 999:src/MightyBoard/Motherboard/system/core_cm3.h **** 
1000:src/MightyBoard/Motherboard/system/core_cm3.h ****     Note: The priority cannot be set for every core interrupt.
1001:src/MightyBoard/Motherboard/system/core_cm3.h **** 
1002:src/MightyBoard/Motherboard/system/core_cm3.h ****     \param [in]      IRQn  Number of the interrupt for set priority
1003:src/MightyBoard/Motherboard/system/core_cm3.h ****     \param [in]  priority  Priority to set
1004:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
1005:src/MightyBoard/Motherboard/system/core_cm3.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1006:src/MightyBoard/Motherboard/system/core_cm3.h **** {
1007:src/MightyBoard/Motherboard/system/core_cm3.h ****   if(IRQn < 0) {
1008:src/MightyBoard/Motherboard/system/core_cm3.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
1009:src/MightyBoard/Motherboard/system/core_cm3.h ****   else {
1010:src/MightyBoard/Motherboard/system/core_cm3.h ****     NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set 
 630              	 .loc 6 1010 0
 631 004a 4FF46147 	 mov r7,#57600
 632 004e CEF20007 	 movt r7,57344
 633 0052 4FF00809 	 mov r9,#8
 634 0056 87F80193 	 strb r9,[r7,#769]
 635              	.LBE217:
 636              	.LBE216:
 102:src/MightyBoard/Motherboard/Motherboard.cc **** 	TIM_Cmd(LPC_TIM0,ENABLE);
 637              	 .loc 4 102 0
 638 005a 4FF04020 	 mov r0,#1073758208
 639 005e 2146     	 mov r1,r4
 640 0060 FFF7FEFF 	 bl TIM_Cmd
 641              	.LVL29:
 642              	.LBB218:
 643              	.LBB219:
 923:src/MightyBoard/Motherboard/system/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 644              	 .loc 6 923 0
 645 0064 4FF00203 	 mov r3,#2
 646 0068 3B60     	 str r3,[r7,#0]
 647              	.LBE219:
 648              	.LBE218:
 132:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR3_Cfg.PrescaleOption = TIM_PRESCALE_USVAL;
 649              	 .loc 4 132 0
 650 006a 8DF83040 	 strb r4,[sp,#48]
 133:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR3_Cfg.PrescaleValue = 1; // reset to 1 - 1uS
 651              	 .loc 4 133 0
 652 006e 0D94     	 str r4,[sp,#52]
 134:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR3_Match.MatchChannel = TIM_MR0_INT;
 653              	 .loc 4 134 0
 654 0070 8DF81060 	 strb r6,[sp,#16]
 135:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR3_Match.IntOnMatch = ENABLE;
 655              	 .loc 4 135 0
 656 0074 8DF81140 	 strb r4,[sp,#17]
 136:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR3_Match.ResetOnMatch = ENABLE;
 657              	 .loc 4 136 0
 658 0078 8DF81340 	 strb r4,[sp,#19]
 137:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR3_Match.StopOnMatch = DISABLE;
 659              	 .loc 4 137 0
 660 007c 8DF81260 	 strb r6,[sp,#18]
 138:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR3_Match.ExtMatchOutputType = TIM_EXTMATCH_NOTHING;
 661              	 .loc 4 138 0
 662 0080 8DF81460 	 strb r6,[sp,#20]
 140:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR3_Match.MatchValue = INTERVAL_IN_MICROSECONDS;
 663              	 .loc 4 140 0
 664 0084 CDF81880 	 str r8,[sp,#24]
 142:src/MightyBoard/Motherboard/Motherboard.cc **** 	TIM_Init(LPC_TIM3, TIM_TIMER_MODE, &TMR3_Cfg);
 665              	 .loc 4 142 0
 666 0088 4FF48045 	 mov r5,#16384
 667 008c C4F20905 	 movt r5,16393
 668 0090 2846     	 mov r0,r5
 669 0092 3146     	 mov r1,r6
 670 0094 0CAA     	 add r2,sp,#48
 671 0096 FFF7FEFF 	 bl TIM_Init
 143:src/MightyBoard/Motherboard/Motherboard.cc **** 	TIM_ConfigMatch(LPC_TIM3, &TMR3_Match);
 672              	 .loc 4 143 0
 673 009a 2846     	 mov r0,r5
 674 009c 04A9     	 add r1,sp,#16
 675 009e FFF7FEFF 	 bl TIM_ConfigMatch
 676              	.LVL30:
 677              	.LBB220:
 678              	.LBB221:
 679              	 .loc 6 1010 0
 680 00a2 87F80463 	 strb r6,[r7,#772]
 681              	.LBE221:
 682              	.LBE220:
 145:src/MightyBoard/Motherboard/Motherboard.cc **** 	TIM_Cmd(LPC_TIM3,ENABLE);
 683              	 .loc 4 145 0
 684 00a6 2846     	 mov r0,r5
 685 00a8 2146     	 mov r1,r4
 686 00aa FFF7FEFF 	 bl TIM_Cmd
 687              	.LVL31:
 688              	.LBB222:
 689              	.LBB223:
 923:src/MightyBoard/Motherboard/system/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 690              	 .loc 6 923 0
 691 00ae 4FF01003 	 mov r3,#16
 692 00b2 3B60     	 str r3,[r7,#0]
 693              	.LBE223:
 694              	.LBE222:
 160:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR2_Cfg.PrescaleOption = TIM_PRESCALE_USVAL;
 695              	 .loc 4 160 0
 696 00b4 8DF83840 	 strb r4,[sp,#56]
 161:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR2_Cfg.PrescaleValue = 1; // reset to 1 - 1uS
 697              	 .loc 4 161 0
 698 00b8 0F94     	 str r4,[sp,#60]
 163:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR2_Match.MatchChannel = TIM_MR0_INT;
 699              	 .loc 4 163 0
 700 00ba 8DF81C60 	 strb r6,[sp,#28]
 165:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR2_Match.IntOnMatch = ENABLE;
 701              	 .loc 4 165 0
 702 00be 8DF81D40 	 strb r4,[sp,#29]
 167:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR2_Match.ResetOnMatch = ENABLE;
 703              	 .loc 4 167 0
 704 00c2 8DF81F40 	 strb r4,[sp,#31]
 169:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR2_Match.StopOnMatch = DISABLE;
 705              	 .loc 4 169 0
 706 00c6 8DF81E60 	 strb r6,[sp,#30]
 171:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR2_Match.ExtMatchOutputType = TIM_EXTMATCH_NOTHING;
 707              	 .loc 4 171 0
 708 00ca 8DF82060 	 strb r6,[sp,#32]
 173:src/MightyBoard/Motherboard/Motherboard.cc **** 	TMR2_Match.MatchValue = INTERVAL_IN_MICROSECONDS;// *10000;
 709              	 .loc 4 173 0
 710 00ce CDF82480 	 str r8,[sp,#36]
 175:src/MightyBoard/Motherboard/Motherboard.cc **** 	TIM_Init(LPC_TIM2, TIM_TIMER_MODE, &TMR2_Cfg);
 711              	 .loc 4 175 0
 712 00d2 3546     	 mov r5,r6
 713 00d4 C4F20905 	 movt r5,16393
 714 00d8 2846     	 mov r0,r5
 715 00da 3146     	 mov r1,r6
 716 00dc 0EAA     	 add r2,sp,#56
 717 00de FFF7FEFF 	 bl TIM_Init
 176:src/MightyBoard/Motherboard/Motherboard.cc **** 	TIM_ConfigMatch(LPC_TIM2, &TMR2_Match);
 718              	 .loc 4 176 0
 719 00e2 2846     	 mov r0,r5
 720 00e4 07A9     	 add r1,sp,#28
 721 00e6 FFF7FEFF 	 bl TIM_ConfigMatch
 722              	.LVL32:
 723              	.LBB224:
 724              	.LBB225:
 725              	 .loc 6 1010 0
 726 00ea 4FF02003 	 mov r3,#32
 727 00ee 87F80333 	 strb r3,[r7,#771]
 728              	.LBE225:
 729              	.LBE224:
 178:src/MightyBoard/Motherboard/Motherboard.cc **** 	TIM_Cmd(LPC_TIM2,ENABLE);
 730              	 .loc 4 178 0
 731 00f2 2846     	 mov r0,r5
 732 00f4 2146     	 mov r1,r4
 733 00f6 FFF7FEFF 	 bl TIM_Cmd
 734              	.LVL33:
 735              	.LBB226:
 736              	.LBB227:
 923:src/MightyBoard/Motherboard/system/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 737              	 .loc 6 923 0
 738 00fa C7F80090 	 str r9,[r7,#0]
 739              	.LBE227:
 740              	.LBE226:
 741              	.LBE215:
 185:src/MightyBoard/Motherboard/Motherboard.cc **** }
 742              	 .loc 4 185 0
 743 00fe 11B0     	 add sp,sp,#68
 744 0100 BDE8F083 	 pop {r4,r5,r6,r7,r8,r9,pc}
 745              	 .cfi_endproc
 746              	.LFE143:
 748              	 .section .text._ZN11Motherboard16getCurrentMicrosEv,"ax",%progbits
 749              	 .align 2
 750              	 .global _ZN11Motherboard16getCurrentMicrosEv
 751              	 .thumb
 752              	 .thumb_func
 754              	_ZN11Motherboard16getCurrentMicrosEv:
 755              	.LFB145:
 304:src/MightyBoard/Motherboard/Motherboard.cc **** micros_t Motherboard::getCurrentMicros() {
 756              	 .loc 4 304 0
 757              	 .cfi_startproc
 758              	 
 759              	 
 760              	 
 761              	.LVL34:
 762              	.LBB228:
 307:src/MightyBoard/Motherboard/Motherboard.cc **** 		micros_snapshot = micros;
 763              	 .loc 4 307 0
 764 0000 0068     	 ldr r0,[r0,#0]
 765              	.LVL35:
 766              	.LBE228:
 310:src/MightyBoard/Motherboard/Motherboard.cc **** }
 767              	 .loc 4 310 0
 768 0002 7047     	 bx lr
 769              	 .cfi_endproc
 770              	.LFE145:
 772              	 .section .text._ZN11Motherboard11doInterruptEv,"ax",%progbits
 773              	 .align 2
 774              	 .global _ZN11Motherboard11doInterruptEv
 775              	 .thumb
 776              	 .thumb_func
 778              	_ZN11Motherboard11doInterruptEv:
 779              	.LFB146:
 313:src/MightyBoard/Motherboard/Motherboard.cc **** void Motherboard::doInterrupt() {
 780              	 .loc 4 313 0
 781              	 .cfi_startproc
 782              	 
 783              	 
 784              	.LVL36:
 785 0000 08B5     	 push {r3,lr}
 786              	.LCFI9:
 787              	 .cfi_def_cfa_offset 8
 788              	 .cfi_offset 14,-4
 789              	 .cfi_offset 3,-8
 316:src/MightyBoard/Motherboard/Motherboard.cc **** 	if (command::isPaused()) return;
 790              	 .loc 4 316 0
 791 0002 FFF7FEFF 	 bl _ZN7command8isPausedEv
 792              	.LVL37:
 793 0006 08B9     	 cbnz r0,.L60
 317:src/MightyBoard/Motherboard/Motherboard.cc **** 	steppers::doInterrupt();
 794              	 .loc 4 317 0
 795 0008 FFF7FEFF 	 bl _ZN8steppers11doInterruptEv
 796              	.L60:
 797 000c 08BD     	 pop {r3,pc}
 798              	 .cfi_endproc
 799              	.LFE146:
 801 000e 00BF     	 .section .text._ZN11Motherboard10heaterFailE14HeaterFailMode,"ax",%progbits
 802              	 .align 2
 803              	 .global _ZN11Motherboard10heaterFailE14HeaterFailMode
 804              	 .thumb
 805              	 .thumb_func
 807              	_ZN11Motherboard10heaterFailE14HeaterFailMode:
 808              	.LFB147:
 322:src/MightyBoard/Motherboard/Motherboard.cc **** void Motherboard::heaterFail(HeaterFailMode mode){
 809              	 .loc 4 322 0
 810              	 .cfi_startproc
 811              	 
 812              	 
 813              	.LVL38:
 814 0000 10B5     	 push {r4,lr}
 815              	.LCFI10:
 816              	 .cfi_def_cfa_offset 8
 817              	 .cfi_offset 14,-4
 818              	 .cfi_offset 4,-8
 819 0002 0446     	 mov r4,r0
 325:src/MightyBoard/Motherboard/Motherboard.cc **** 	heatFailMode = mode;
 820              	 .loc 4 325 0
 821 0004 80F8A012 	 strb r1,[r0,#672]
 327:src/MightyBoard/Motherboard/Motherboard.cc **** 	if(heatFailMode == HEATER_FAIL_NOT_PLUGGED_IN)
 822              	 .loc 4 327 0
 823 0008 0229     	 cmp r1,#2
 824 000a 19D1     	 bne .L63
 331:src/MightyBoard/Motherboard/Motherboard.cc **** 		if(!platform_heater.has_failed() && eeprom::isSingleTool() && 
 825              	 .loc 4 331 0
 826 000c 00F50370 	 add r0,r0,#524
 827              	.LVL39:
 828 0010 FFF7FEFF 	 bl _ZN6Heater10has_failedEv
 829              	.LVL40:
 830 0014 C8B9     	 cbnz r0,.L64
 331:src/MightyBoard/Motherboard/Motherboard.cc **** 		if(!platform_heater.has_failed() && eeprom::isSingleTool() && 
 831              	 .loc 4 331 0 is_stmt 0 discriminator 1
 832 0016 FFF7FEFF 	 bl _ZN6eeprom12isSingleToolEv
 833 001a B0B1     	 cbz r0,.L64
 834              	.LVL41:
 332:src/MightyBoard/Motherboard/Motherboard.cc **** 			(!(Extruder_One.getExtruderHeater().has_failed() && Extruder_Two.getExtruderHeater().has_failed(
 835              	 .loc 4 332 0 is_stmt 1 discriminator 3
 836 001c 04F15000 	 add r0,r4,#80
 837 0020 FFF7FEFF 	 bl _ZN6Heater10has_failedEv
 331:src/MightyBoard/Motherboard/Motherboard.cc **** 		if(!platform_heater.has_failed() && eeprom::isSingleTool() && 
 838              	 .loc 4 331 0 discriminator 3
 839 0024 C0B1     	 cbz r0,.L62
 840              	.LVL42:
 332:src/MightyBoard/Motherboard/Motherboard.cc **** 			(!(Extruder_One.getExtruderHeater().has_failed() && Extruder_Two.getExtruderHeater().has_failed(
 841              	 .loc 4 332 0
 842 0026 04F59870 	 add r0,r4,#304
 843 002a FFF7FEFF 	 bl _ZN6Heater10has_failedEv
 844 002e 98B1     	 cbz r0,.L62
 845 0030 0BE0     	 b .L64
 846              	.LVL43:
 847              	.L67:
 338:src/MightyBoard/Motherboard/Motherboard.cc **** 			connectionsErrorTriggered =true;
 848              	 .loc 4 338 0
 849 0032 40F20003 	 movw r3,#:lower16:.LANCHOR2
 850 0036 C0F20003 	 movt r3,#:upper16:.LANCHOR2
 851 003a 4FF00102 	 mov r2,#1
 852 003e 1A70     	 strb r2,[r3,#0]
 853              	.L63:
 342:src/MightyBoard/Motherboard/Motherboard.cc **** 	heatShutdown = true;
 854              	 .loc 4 342 0
 855 0040 4FF00103 	 mov r3,#1
 856 0044 84F89D32 	 strb r3,[r4,#669]
 857 0048 10BD     	 pop {r4,pc}
 858              	.L64:
 335:src/MightyBoard/Motherboard/Motherboard.cc **** 		else if (connectionsErrorTriggered)
 859              	 .loc 4 335 0
 860 004a 40F20003 	 movw r3,#:lower16:.LANCHOR2
 861 004e C0F20003 	 movt r3,#:upper16:.LANCHOR2
 862 0052 1B78     	 ldrb r3,[r3,#0]
 863 0054 002B     	 cmp r3,#0
 864 0056 ECD0     	 beq .L67
 865              	.L62:
 866 0058 10BD     	 pop {r4,pc}
 867              	 .cfi_endproc
 868              	.LFE147:
 870 005a 00BF     	 .section .text._ZN11Motherboard14GetErrorStatusEv,"ax",%progbits
 871              	 .align 2
 872              	 .global _ZN11Motherboard14GetErrorStatusEv
 873              	 .thumb
 874              	 .thumb_func
 876              	_ZN11Motherboard14GetErrorStatusEv:
 877              	.LFB150:
 370:src/MightyBoard/Motherboard/Motherboard.cc **** uint8_t Motherboard::GetErrorStatus(){
 878              	 .loc 4 370 0
 879              	 .cfi_startproc
 880              	 
 881              	 
 882              	 
 883              	.LVL44:
 373:src/MightyBoard/Motherboard/Motherboard.cc **** }
 884              	 .loc 4 373 0
 885 0000 90F8A102 	 ldrb r0,[r0,#673]
 886              	.LVL45:
 887 0004 7047     	 bx lr
 888              	 .cfi_endproc
 889              	.LFE150:
 891 0006 00BF     	 .section .text._ZN11Motherboard21resetUserInputTimeoutEv,"ax",%progbits
 892              	 .align 2
 893              	 .global _ZN11Motherboard21resetUserInputTimeoutEv
 894              	 .thumb
 895              	 .thumb_func
 897              	_ZN11Motherboard21resetUserInputTimeoutEv:
 898              	.LFB152:
 495:src/MightyBoard/Motherboard/Motherboard.cc **** void Motherboard::resetUserInputTimeout(){
 899              	 .loc 4 495 0
 900              	 .cfi_startproc
 901              	 
 902              	 
 903              	.LVL46:
 904 0000 08B5     	 push {r3,lr}
 905              	.LCFI11:
 906              	 .cfi_def_cfa_offset 8
 907              	 .cfi_offset 14,-4
 908              	 .cfi_offset 3,-8
 496:src/MightyBoard/Motherboard/Motherboard.cc **** 	user_input_timeout.start(USER_INPUT_TIMEOUT);
 909              	 .loc 4 496 0
 910 0002 00F11400 	 add r0,r0,#20
 911              	.LVL47:
 912 0006 4FF45241 	 mov r1,#53760
 913 000a C6F64931 	 movt r1,27465
 914 000e FFF7FEFF 	 bl _ZN7Timeout5startEm
 915              	.LVL48:
 497:src/MightyBoard/Motherboard/Motherboard.cc **** }
 916              	 .loc 4 497 0
 917 0012 08BD     	 pop {r3,pc}
 918              	 .cfi_endproc
 919              	.LFE152:
 921              	 .section .text._ZN11Motherboard12UpdateMicrosEv,"ax",%progbits
 922              	 .align 2
 923              	 .global _ZN11Motherboard12UpdateMicrosEv
 924              	 .thumb
 925              	 .thumb_func
 927              	_ZN11Motherboard12UpdateMicrosEv:
 928              	.LFB153:
 502:src/MightyBoard/Motherboard/Motherboard.cc **** void Motherboard::UpdateMicros(){
 929              	 .loc 4 502 0
 930              	 .cfi_startproc
 931              	 
 932              	 
 933              	 
 934              	.LVL49:
 504:src/MightyBoard/Motherboard/Motherboard.cc **** 	micros += MICROS_INTERVAL;//_IN_MICROSECONDS;
 935              	 .loc 4 504 0
 936 0000 0368     	 ldr r3,[r0,#0]
 937 0002 03F18003 	 add r3,r3,#128
 938 0006 0360     	 str r3,[r0,#0]
 505:src/MightyBoard/Motherboard/Motherboard.cc **** }
 939              	 .loc 4 505 0
 940 0008 7047     	 bx lr
 941              	 .cfi_endproc
 942              	.LFE153:
 944 000a 00BF     	 .section .text.TIMER0_IRQHandler,"ax",%progbits
 945              	 .align 2
 946              	 .global TIMER0_IRQHandler
 947              	 .thumb
 948              	 .thumb_func
 950              	TIMER0_IRQHandler:
 951              	.LFB154:
 518:src/MightyBoard/Motherboard/Motherboard.cc **** extern "C" void TIMER0_IRQHandler (void){
 952              	 .loc 4 518 0
 953              	 .cfi_startproc
 954              	 
 955              	 
 956 0000 10B5     	 push {r4,lr}
 957              	.LCFI12:
 958              	 .cfi_def_cfa_offset 8
 959              	 .cfi_offset 14,-4
 960              	 .cfi_offset 4,-8
 961 0002 86B0     	 sub sp,sp,#24
 962              	.LCFI13:
 963              	 .cfi_def_cfa_offset 32
 519:src/MightyBoard/Motherboard/Motherboard.cc **** 	DEBUG_LED1.setDirection(true);
 964              	 .loc 4 519 0
 965 0004 40F20004 	 movw r4,#:lower16:.LANCHOR3
 966 0008 C0F20004 	 movt r4,#:upper16:.LANCHOR3
 967 000c 6846     	 mov r0,sp
 968 000e 2146     	 mov r1,r4
 969 0010 4FF01202 	 mov r2,#18
 970 0014 FFF7FEFF 	 bl _ZN3PinC1ERK7LPCPorth
 971 0018 6846     	 mov r0,sp
 972 001a 4FF00101 	 mov r1,#1
 973 001e FFF7FEFF 	 bl _ZNK3Pin12setDirectionEb
 520:src/MightyBoard/Motherboard/Motherboard.cc **** 	DEBUG_LED1.setValue(true);
 974              	 .loc 4 520 0
 975 0022 02A8     	 add r0,sp,#8
 976 0024 2146     	 mov r1,r4
 977 0026 4FF01202 	 mov r2,#18
 978 002a FFF7FEFF 	 bl _ZN3PinC1ERK7LPCPorth
 979              	.LVL50:
 980              	.LBB233:
 981              	.LBB234:
  35:src/MightyBoard/shared/Pin.hh **** 		if (is_null)
 982              	 .loc 5 35 0
 983 002e 9DF80930 	 ldrb r3,[sp,#9]
 984 0032 4BB9     	 cbnz r3,.L72
  44:src/MightyBoard/shared/Pin.hh **** 			GPIO_SetValue(port_base, _BV(pin_index));
 985              	 .loc 5 44 0
 986 0034 9DF80A30 	 ldrb r3,[sp,#10]
 987 0038 9DF80800 	 ldrb r0,[sp,#8]
 988 003c 4FF00101 	 mov r1,#1
 989 0040 01FA03F1 	 lsl r1,r1,r3
 990 0044 FFF7FEFF 	 bl GPIO_SetValue
 991              	.L72:
 992              	.LBE234:
 993              	.LBE233:
 523:src/MightyBoard/Motherboard/Motherboard.cc **** 	TIM_ClearIntPending(LPC_TIM0, TIM_MR0_INT);
 994              	 .loc 4 523 0
 995 0048 4FF04020 	 mov r0,#1073758208
 996 004c 4FF00001 	 mov r1,#0
 997 0050 FFF7FEFF 	 bl TIM_ClearIntPending
 524:src/MightyBoard/Motherboard/Motherboard.cc **** 	Motherboard::getBoard().doInterrupt();
 998              	 .loc 4 524 0
 999 0054 40F20000 	 movw r0,#:lower16:.LANCHOR4
 1000 0058 C0F20000 	 movt r0,#:upper16:.LANCHOR4
 1001 005c FFF7FEFF 	 bl _ZN11Motherboard11doInterruptEv
 534:src/MightyBoard/Motherboard/Motherboard.cc **** 	DEBUG_LED1.setValue(false);
 1002              	 .loc 4 534 0
 1003 0060 04A8     	 add r0,sp,#16
 1004 0062 40F20001 	 movw r1,#:lower16:.LANCHOR3
 1005 0066 C0F20001 	 movt r1,#:upper16:.LANCHOR3
 1006 006a 4FF01202 	 mov r2,#18
 1007 006e FFF7FEFF 	 bl _ZN3PinC1ERK7LPCPorth
 1008              	.LVL51:
 1009              	.LBB235:
 1010              	.LBB236:
  35:src/MightyBoard/shared/Pin.hh **** 		if (is_null)
 1011              	 .loc 5 35 0
 1012 0072 9DF81130 	 ldrb r3,[sp,#17]
 1013 0076 4BB9     	 cbnz r3,.L71
 1014              	 .loc 5 48 0
 1015 0078 9DF81230 	 ldrb r3,[sp,#18]
 1016 007c 9DF81000 	 ldrb r0,[sp,#16]
 1017 0080 4FF00101 	 mov r1,#1
 1018 0084 01FA03F1 	 lsl r1,r1,r3
 1019 0088 FFF7FEFF 	 bl GPIO_ClearValue
 1020              	.L71:
 1021              	.LBE236:
 1022              	.LBE235:
 535:src/MightyBoard/Motherboard/Motherboard.cc **** }
 1023              	 .loc 4 535 0
 1024 008c 06B0     	 add sp,sp,#24
 1025 008e 10BD     	 pop {r4,pc}
 1026              	 .cfi_endproc
 1027              	.LFE154:
 1029              	 .section .text._ZN11Motherboard13indicateErrorEi,"ax",%progbits
 1030              	 .align 2
 1031              	 .global _ZN11Motherboard13indicateErrorEi
 1032              	 .thumb
 1033              	 .thumb_func
 1035              	_ZN11Motherboard13indicateErrorEi:
 1036              	.LFB155:
 558:src/MightyBoard/Motherboard/Motherboard.cc **** void Motherboard::indicateError(int error_code) {
 1037              	 .loc 4 558 0
 1038              	 .cfi_startproc
 1039              	 
 1040              	 
 1041              	.LVL52:
 1042 0000 10B5     	 push {r4,lr}
 1043              	.LCFI14:
 1044              	 .cfi_def_cfa_offset 8
 1045              	 .cfi_offset 14,-4
 1046              	 .cfi_offset 4,-8
 1047 0002 84B0     	 sub sp,sp,#16
 1048              	.LCFI15:
 1049              	 .cfi_def_cfa_offset 24
 559:src/MightyBoard/Motherboard/Motherboard.cc **** 	if (error_code == 0) {
 1050              	 .loc 4 559 0
 1051 0004 0C46     	 mov r4,r1
 1052 0006 F9B9     	 cbnz r1,.L75
 560:src/MightyBoard/Motherboard/Motherboard.cc **** 		blink_state = BLINK_NONE;
 1053              	 .loc 4 560 0
 1054 0008 40F20003 	 movw r3,#:lower16:.LANCHOR5
 1055 000c C0F20003 	 movt r3,#:upper16:.LANCHOR5
 1056 0010 4FF00002 	 mov r2,#0
 1057 0014 1A60     	 str r2,[r3,#0]
 561:src/MightyBoard/Motherboard/Motherboard.cc **** 		DEBUG_PIN.setValue(false);
 1058              	 .loc 4 561 0
 1059 0016 03A8     	 add r0,sp,#12
 1060              	.LVL53:
 1061 0018 4FF0FF01 	 mov r1,#255
 1062              	.LVL54:
 1063 001c FFF7FEFF 	 bl _ZN7LPCPortC1Eh
 1064 0020 01A8     	 add r0,sp,#4
 1065 0022 03A9     	 add r1,sp,#12
 1066 0024 4FF0FF02 	 mov r2,#255
 1067 0028 FFF7FEFF 	 bl _ZN3PinC1ERK7LPCPorth
 1068              	.LVL55:
 1069              	.LBB239:
 1070              	.LBB240:
  35:src/MightyBoard/shared/Pin.hh **** 		if (is_null)
 1071              	 .loc 5 35 0
 1072 002c 9DF80530 	 ldrb r3,[sp,#5]
 1073 0030 BBB9     	 cbnz r3,.L76
 1074              	 .loc 5 48 0
 1075 0032 9DF80630 	 ldrb r3,[sp,#6]
 1076 0036 9DF80400 	 ldrb r0,[sp,#4]
 1077 003a 4FF00101 	 mov r1,#1
 1078 003e 01FA03F1 	 lsl r1,r1,r3
 1079 0042 FFF7FEFF 	 bl GPIO_ClearValue
 1080 0046 0CE0     	 b .L76
 1081              	.LVL56:
 1082              	.L75:
 1083              	.LBE240:
 1084              	.LBE239:
 563:src/MightyBoard/Motherboard/Motherboard.cc **** 	else if (blink_count != error_code) {
 1085              	 .loc 4 563 0
 1086 0048 40F20003 	 movw r3,#:lower16:.LANCHOR6
 1087 004c C0F20003 	 movt r3,#:upper16:.LANCHOR6
 1088 0050 1B78     	 ldrb r3,[r3,#0]
 1089 0052 9942     	 cmp r1,r3
 564:src/MightyBoard/Motherboard/Motherboard.cc **** 		blink_state = BLINK_OFF;
 1090              	 .loc 4 564 0
 1091 0054 1FBF     	 itttt ne
 1092 0056 40F20003 	 movwne r3,#:lower16:.LANCHOR5
 1093 005a C0F20003 	 movtne r3,#:upper16:.LANCHOR5
 1094 005e 0222     	 movne r2,#2
 1095 0060 1A60     	 strne r2,[r3,#0]
 1096              	.LVL57:
 1097              	.L76:
 566:src/MightyBoard/Motherboard/Motherboard.cc **** 	blink_count = error_code;
 1098              	 .loc 4 566 0
 1099 0062 E4B2     	 uxtb r4,r4
 1100              	.LVL58:
 1101 0064 40F20003 	 movw r3,#:lower16:.LANCHOR6
 1102 0068 C0F20003 	 movt r3,#:upper16:.LANCHOR6
 1103 006c 1C70     	 strb r4,[r3,#0]
 567:src/MightyBoard/Motherboard/Motherboard.cc **** }
 1104              	 .loc 4 567 0
 1105 006e 04B0     	 add sp,sp,#16
 1106 0070 10BD     	 pop {r4,pc}
 1107              	 .cfi_endproc
 1108              	.LFE155:
 1110 0072 00BF     	 .section .text._ZN11Motherboard14interfaceBlinkEii,"ax",%progbits
 1111              	 .align 2
 1112              	 .global _ZN11Motherboard14interfaceBlinkEii
 1113              	 .thumb
 1114              	 .thumb_func
 1116              	_ZN11Motherboard14interfaceBlinkEii:
 1117              	.LFB156:
 571:src/MightyBoard/Motherboard/Motherboard.cc **** void Motherboard::interfaceBlink(int on_time, int off_time){
 1118              	 .loc 4 571 0
 1119              	 .cfi_startproc
 1120              	 
 1121              	 
 1122              	 
 1123              	.LVL59:
 573:src/MightyBoard/Motherboard/Motherboard.cc **** 	if(off_time == 0){
 1124              	 .loc 4 573 0
 1125 0000 1346     	 mov r3,r2
 1126 0002 2AB9     	 cbnz r2,.L78
 574:src/MightyBoard/Motherboard/Motherboard.cc **** 		interface_blink_state = BLINK_NONE;
 1127              	 .loc 4 574 0
 1128 0004 40F20003 	 movw r3,#:lower16:.LANCHOR7
 1129 0008 C0F20003 	 movt r3,#:upper16:.LANCHOR7
 1130 000c 1A60     	 str r2,[r3,#0]
 1131 000e 7047     	 bx lr
 1132              	.L78:
 576:src/MightyBoard/Motherboard/Motherboard.cc **** 	}else if(on_time == 0){
 1133              	 .loc 4 576 0
 1134 0010 39B9     	 cbnz r1,.L80
 577:src/MightyBoard/Motherboard/Motherboard.cc **** 		interface_blink_state = BLINK_NONE;
 1135              	 .loc 4 577 0
 1136 0012 40F20003 	 movw r3,#:lower16:.LANCHOR7
 1137 0016 C0F20003 	 movt r3,#:upper16:.LANCHOR7
 1138 001a 4FF00002 	 mov r2,#0
 1139              	.LVL60:
 1140 001e 1A60     	 str r2,[r3,#0]
 1141 0020 7047     	 bx lr
 1142              	.LVL61:
 1143              	.L80:
 580:src/MightyBoard/Motherboard/Motherboard.cc **** 		interface_on_time = on_time;
 1144              	 .loc 4 580 0
 1145 0022 40F20002 	 movw r2,#:lower16:.LANCHOR8
 1146              	.LVL62:
 1147 0026 C0F20002 	 movt r2,#:upper16:.LANCHOR8
 1148 002a 1170     	 strb r1,[r2,#0]
 581:src/MightyBoard/Motherboard/Motherboard.cc **** 		interface_off_time = off_time;
 1149              	 .loc 4 581 0
 1150 002c 40F20002 	 movw r2,#:lower16:.LANCHOR9
 1151 0030 C0F20002 	 movt r2,#:upper16:.LANCHOR9
 1152 0034 1370     	 strb r3,[r2,#0]
 582:src/MightyBoard/Motherboard/Motherboard.cc **** 		interface_blink_state = BLINK_ON;
 1153              	 .loc 4 582 0
 1154 0036 40F20003 	 movw r3,#:lower16:.LANCHOR7
 1155              	.LVL63:
 1156 003a C0F20003 	 movt r3,#:upper16:.LANCHOR7
 1157 003e 4FF00102 	 mov r2,#1
 1158 0042 1A60     	 str r2,[r3,#0]
 1159 0044 7047     	 bx lr
 1160              	 .cfi_endproc
 1161              	.LFE156:
 1163 0046 00BF     	 .section .text._ZN11Motherboard15startButtonWaitEv,"ax",%progbits
 1164              	 .align 2
 1165              	 .global _ZN11Motherboard15startButtonWaitEv
 1166              	 .thumb
 1167              	 .thumb_func
 1169              	_ZN11Motherboard15startButtonWaitEv:
 1170              	.LFB148:
 347:src/MightyBoard/Motherboard/Motherboard.cc **** void Motherboard::startButtonWait(){
 1171              	 .loc 4 347 0
 1172              	 .cfi_startproc
 1173              	 
 1174              	 
 1175              	.LVL64:
 1176 0000 10B5     	 push {r4,lr}
 1177              	.LCFI16:
 1178              	 .cfi_def_cfa_offset 8
 1179              	 .cfi_offset 14,-4
 1180              	 .cfi_offset 4,-8
 1181 0002 0446     	 mov r4,r0
 349:src/MightyBoard/Motherboard/Motherboard.cc **** 	interfaceBlink(25,15);
 1182              	 .loc 4 349 0
 1183 0004 4FF01901 	 mov r1,#25
 1184 0008 4FF00F02 	 mov r2,#15
 1185 000c FFF7FEFF 	 bl _ZN11Motherboard14interfaceBlinkEii
 1186              	.LVL65:
 352:src/MightyBoard/Motherboard/Motherboard.cc **** 	buttonWait = true;
 1187              	 .loc 4 352 0
 1188 0010 4FF00103 	 mov r3,#1
 1189 0014 84F89E32 	 strb r3,[r4,#670]
 354:src/MightyBoard/Motherboard/Motherboard.cc **** }
 1190              	 .loc 4 354 0
 1191 0018 10BD     	 pop {r4,pc}
 1192              	 .cfi_endproc
 1193              	.LFE148:
 1195 001a 00BF     	 .section .text._ZN11Motherboard13errorResponseEPcb,"ax",%progbits
 1196              	 .align 2
 1197              	 .global _ZN11Motherboard13errorResponseEPcb
 1198              	 .thumb
 1199              	 .thumb_func
 1201              	_ZN11Motherboard13errorResponseEPcb:
 1202              	.LFB149:
 357:src/MightyBoard/Motherboard/Motherboard.cc **** void Motherboard::errorResponse(char msg[], bool reset){
 1203              	 .loc 4 357 0
 1204              	 .cfi_startproc
 1205              	 
 1206              	 
 1207              	.LVL66:
 1208 0000 38B5     	 push {r3,r4,r5,lr}
 1209              	.LCFI17:
 1210              	 .cfi_def_cfa_offset 16
 1211              	 .cfi_offset 14,-4
 1212              	 .cfi_offset 5,-8
 1213              	 .cfi_offset 4,-12
 1214              	 .cfi_offset 3,-16
 1215 0002 0446     	 mov r4,r0
 1216 0004 1546     	 mov r5,r2
 359:src/MightyBoard/Motherboard/Motherboard.cc **** 	startButtonWait();
 1217              	 .loc 4 359 0
 1218 0006 FFF7FEFF 	 bl _ZN11Motherboard15startButtonWaitEv
 1219              	.LVL67:
 360:src/MightyBoard/Motherboard/Motherboard.cc **** 	reset_request = reset;
 1220              	 .loc 4 360 0
 1221 000a 84F89F52 	 strb r5,[r4,#671]
 361:src/MightyBoard/Motherboard/Motherboard.cc **** }
 1222              	 .loc 4 361 0
 1223 000e 38BD     	 pop {r3,r4,r5,pc}
 1224              	 .cfi_endproc
 1225              	.LFE149:
 1227              	 .section .text._ZN11Motherboard19runMotherboardSliceEv,"ax",%progbits
 1228              	 .align 2
 1229              	 .global _ZN11Motherboard19runMotherboardSliceEv
 1230              	 .thumb
 1231              	 .thumb_func
 1233              	_ZN11Motherboard19runMotherboardSliceEv:
 1234              	.LFB151:
 378:src/MightyBoard/Motherboard/Motherboard.cc **** void Motherboard::runMotherboardSlice() {
 1235              	 .loc 4 378 0
 1236              	 .cfi_startproc
 1237              	 
 1238              	 
 1239              	.LVL68:
 1240 0000 70B5     	 push {r4,r5,r6,lr}
 1241              	.LCFI18:
 1242              	 .cfi_def_cfa_offset 16
 1243              	 .cfi_offset 14,-4
 1244              	 .cfi_offset 6,-8
 1245              	 .cfi_offset 5,-12
 1246              	 .cfi_offset 4,-16
 1247 0002 0446     	 mov r4,r0
 1248              	.LVL69:
 1249              	.LBB241:
 394:src/MightyBoard/Motherboard/Motherboard.cc ****     if(isUsingPlatform()) {
 1250              	 .loc 4 394 0
 1251 0004 90F89832 	 ldrb r3,[r0,#664]
 1252 0008 1BB1     	 cbz r3,.L84
 396:src/MightyBoard/Motherboard/Motherboard.cc **** 		platform_heater.manage_temperature();
 1253              	 .loc 4 396 0
 1254 000a 00F50370 	 add r0,r0,#524
 1255              	.LVL70:
 1256 000e FFF7FEFF 	 bl _ZN6Heater18manage_temperatureEv
 1257              	.L84:
 420:src/MightyBoard/Motherboard/Motherboard.cc ****     if(user_input_timeout.hasElapsed() && !heatShutdown && (host::getHostState() != host::HOST_STAT
 1258              	 .loc 4 420 0
 1259 0012 04F11405 	 add r5,r4,#20
 1260 0016 2846     	 mov r0,r5
 1261 0018 FFF7FEFF 	 bl _ZN7Timeout10hasElapsedEv
 1262 001c 0028     	 cmp r0,#0
 1263 001e 44D0     	 beq .L95
 420:src/MightyBoard/Motherboard/Motherboard.cc ****     if(user_input_timeout.hasElapsed() && !heatShutdown && (host::getHostState() != host::HOST_STAT
 1264              	 .loc 4 420 0 is_stmt 0 discriminator 1
 1265 0020 94F89D32 	 ldrb r3,[r4,#669]
 1266 0024 002B     	 cmp r3,#0
 1267 0026 40D1     	 bne .L95
 420:src/MightyBoard/Motherboard/Motherboard.cc ****     if(user_input_timeout.hasElapsed() && !heatShutdown && (host::getHostState() != host::HOST_STAT
 1268              	 .loc 4 420 0 discriminator 3
 1269 0028 FFF7FEFF 	 bl _ZN4host12getHostStateEv
 1270 002c 0228     	 cmp r0,#2
 1271 002e 3CD0     	 beq .L95
 420:src/MightyBoard/Motherboard/Motherboard.cc ****     if(user_input_timeout.hasElapsed() && !heatShutdown && (host::getHostState() != host::HOST_STAT
 1272              	 .loc 4 420 0 discriminator 4
 1273 0030 FFF7FEFF 	 bl _ZN4host12getHostStateEv
 1274 0034 0128     	 cmp r0,#1
 1275 0036 38D0     	 beq .L95
 422:src/MightyBoard/Motherboard/Motherboard.cc **** 		user_input_timeout.clear();
 1276              	 .loc 4 422 0 is_stmt 1 discriminator 6
 1277 0038 2846     	 mov r0,r5
 1278 003a FFF7FEFF 	 bl _ZN7Timeout5clearEv
 424:src/MightyBoard/Motherboard/Motherboard.cc **** 		board_status |= STATUS_HEAT_INACTIVE_SHUTDOWN;
 1279              	 .loc 4 424 0 discriminator 6
 1280 003e 94F8A132 	 ldrb r3,[r4,#673]
 1281 0042 43F04003 	 orr r3,r3,#64
 1282 0046 84F8A132 	 strb r3,[r4,#673]
 1283              	.LVL71:
 427:src/MightyBoard/Motherboard/Motherboard.cc **** 		if((Extruder_One.getExtruderHeater().get_set_temperature() > 0) ||
 1284              	 .loc 4 427 0 discriminator 6
 1285 004a 04F15005 	 add r5,r4,#80
 1286 004e 2846     	 mov r0,r5
 1287 0050 FFF7FEFF 	 bl _ZN6Heater19get_set_temperatureEv
 1288 0054 0028     	 cmp r0,#0
 1289 0056 0BDC     	 bgt .L86
 1290              	.LVL72:
 428:src/MightyBoard/Motherboard/Motherboard.cc **** 			(Extruder_Two.getExtruderHeater().get_set_temperature() > 0) ||
 1291              	 .loc 4 428 0 discriminator 2
 1292 0058 04F59870 	 add r0,r4,#304
 1293 005c FFF7FEFF 	 bl _ZN6Heater19get_set_temperatureEv
 427:src/MightyBoard/Motherboard/Motherboard.cc **** 		if((Extruder_One.getExtruderHeater().get_set_temperature() > 0) ||
 1294              	 .loc 4 427 0 discriminator 2
 1295 0060 0028     	 cmp r0,#0
 1296 0062 05DC     	 bgt .L86
 429:src/MightyBoard/Motherboard/Motherboard.cc **** 			(platform_heater.get_set_temperature() > 0)){
 1297              	 .loc 4 429 0 discriminator 3
 1298 0064 04F50370 	 add r0,r4,#524
 1299 0068 FFF7FEFF 	 bl _ZN6Heater19get_set_temperatureEv
 427:src/MightyBoard/Motherboard/Motherboard.cc **** 		if((Extruder_One.getExtruderHeater().get_set_temperature() > 0) ||
 1300              	 .loc 4 427 0 discriminator 3
 1301 006c 0028     	 cmp r0,#0
 1302 006e 0BDD     	 ble .L87
 1303              	.LVL73:
 1304              	.L86:
 431:src/MightyBoard/Motherboard/Motherboard.cc **** 				startButtonWait();
 1305              	 .loc 4 431 0 discriminator 5
 1306 0070 2046     	 mov r0,r4
 1307 0072 FFF7FEFF 	 bl _ZN11Motherboard15startButtonWaitEv
 433:src/MightyBoard/Motherboard/Motherboard.cc **** 				RGB_LED::setColor(0,0,255, true);
 1308              	 .loc 4 433 0 discriminator 5
 1309 0076 4FF00000 	 mov r0,#0
 1310 007a 0146     	 mov r1,r0
 1311 007c 4FF0FF02 	 mov r2,#255
 1312 0080 4FF00103 	 mov r3,#1
 1313 0084 FFF7FEFF 	 bl _ZN7RGB_LED8setColorEhhhb
 1314              	.L87:
 1315              	.LVL74:
 436:src/MightyBoard/Motherboard/Motherboard.cc **** 		Extruder_One.getExtruderHeater().set_target_temperature(0);
 1316              	 .loc 4 436 0
 1317 0088 2846     	 mov r0,r5
 1318 008a 4FF00001 	 mov r1,#0
 1319 008e FFF7FEFF 	 bl _ZN6Heater22set_target_temperatureEi
 1320              	.LVL75:
 437:src/MightyBoard/Motherboard/Motherboard.cc **** 		Extruder_Two.getExtruderHeater().set_target_temperature(0);
 1321              	 .loc 4 437 0
 1322 0092 04F59870 	 add r0,r4,#304
 1323 0096 4FF00001 	 mov r1,#0
 1324 009a FFF7FEFF 	 bl _ZN6Heater22set_target_temperatureEi
 438:src/MightyBoard/Motherboard/Motherboard.cc **** 		platform_heater.set_target_temperature(0);
 1325              	 .loc 4 438 0
 1326 009e 04F50370 	 add r0,r4,#524
 1327 00a2 4FF00001 	 mov r1,#0
 1328 00a6 FFF7FEFF 	 bl _ZN6Heater22set_target_temperatureEi
 1329              	.LVL76:
 1330              	.L95:
 1331              	.LBB242:
 442:src/MightyBoard/Motherboard/Motherboard.cc **** 	if(heatShutdown && !triggered && !Piezo::isPlaying())
 1332              	 .loc 4 442 0
 1333 00aa 94F89D32 	 ldrb r3,[r4,#669]
 1334 00ae 002B     	 cmp r3,#0
 1335 00b0 48D0     	 beq .L96
 442:src/MightyBoard/Motherboard/Motherboard.cc **** 	if(heatShutdown && !triggered && !Piezo::isPlaying())
 1336              	 .loc 4 442 0 is_stmt 0 discriminator 1
 1337 00b2 40F20003 	 movw r3,#:lower16:.LANCHOR10
 1338 00b6 C0F20003 	 movt r3,#:upper16:.LANCHOR10
 1339 00ba 1B78     	 ldrb r3,[r3,#0]
 1340 00bc 002B     	 cmp r3,#0
 1341 00be 41D1     	 bne .L96
 442:src/MightyBoard/Motherboard/Motherboard.cc **** 	if(heatShutdown && !triggered && !Piezo::isPlaying())
 1342              	 .loc 4 442 0 discriminator 3
 1343 00c0 FFF7FEFF 	 bl _ZN5Piezo9isPlayingEv
 1344 00c4 0028     	 cmp r0,#0
 1345 00c6 3DD1     	 bne .L96
 1346              	.LBB243:
 444:src/MightyBoard/Motherboard/Motherboard.cc ****         triggered = true;
 1347              	 .loc 4 444 0 is_stmt 1 discriminator 5
 1348 00c8 40F20003 	 movw r3,#:lower16:.LANCHOR10
 1349 00cc C0F20003 	 movt r3,#:upper16:.LANCHOR10
 1350 00d0 4FF00102 	 mov r2,#1
 1351 00d4 1A70     	 strb r2,[r3,#0]
 446:src/MightyBoard/Motherboard/Motherboard.cc **** 		interfaceBlink(10,10);
 1352              	 .loc 4 446 0 discriminator 5
 1353 00d6 2046     	 mov r0,r4
 1354 00d8 4FF00A01 	 mov r1,#10
 1355 00dc 0A46     	 mov r2,r1
 1356 00de FFF7FEFF 	 bl _ZN11Motherboard14interfaceBlinkEii
 1357              	.LVL77:
 448:src/MightyBoard/Motherboard/Motherboard.cc ****         Extruder_One.getExtruderHeater().set_target_temperature(0);
 1358              	 .loc 4 448 0 discriminator 5
 1359 00e2 04F15000 	 add r0,r4,#80
 1360 00e6 4FF00001 	 mov r1,#0
 1361 00ea FFF7FEFF 	 bl _ZN6Heater22set_target_temperatureEi
 1362              	.LVL78:
 449:src/MightyBoard/Motherboard/Motherboard.cc **** 		Extruder_Two.getExtruderHeater().set_target_temperature(0);
 1363              	 .loc 4 449 0 discriminator 5
 1364 00ee 04F59870 	 add r0,r4,#304
 1365 00f2 4FF00001 	 mov r1,#0
 1366 00f6 FFF7FEFF 	 bl _ZN6Heater22set_target_temperatureEi
 450:src/MightyBoard/Motherboard/Motherboard.cc **** 		platform_heater.set_target_temperature(0);
 1367              	 .loc 4 450 0 discriminator 5
 1368 00fa 04F50370 	 add r0,r4,#524
 1369 00fe 4FF00001 	 mov r1,#0
 1370 0102 FFF7FEFF 	 bl _ZN6Heater22set_target_temperatureEi
 452:src/MightyBoard/Motherboard/Motherboard.cc **** 		switch (heatFailMode){
 1371              	 .loc 4 452 0 discriminator 5
 1372 0106 94F8A032 	 ldrb r3,[r4,#672]
 1373 010a 022B     	 cmp r3,#2
 1374 010c 07D1     	 bne .L98
 464:src/MightyBoard/Motherboard/Motherboard.cc ****                 startButtonWait();
 1375              	 .loc 4 464 0
 1376 010e 2046     	 mov r0,r4
 1377 0110 FFF7FEFF 	 bl _ZN11Motherboard15startButtonWaitEv
 465:src/MightyBoard/Motherboard/Motherboard.cc ****                 heatShutdown = false;
 1378              	 .loc 4 465 0
 1379 0114 4FF00003 	 mov r3,#0
 1380 0118 84F89D32 	 strb r3,[r4,#669]
 466:src/MightyBoard/Motherboard/Motherboard.cc ****                 return;
 1381              	 .loc 4 466 0
 1382 011c 70BD     	 pop {r4,r5,r6,pc}
 1383              	.L98:
 469:src/MightyBoard/Motherboard/Motherboard.cc **** 		RGB_LED::errorSequence();
 1384              	 .loc 4 469 0
 1385 011e FFF7FEFF 	 bl _ZN7RGB_LED13errorSequenceEv
 471:src/MightyBoard/Motherboard/Motherboard.cc **** 		host::heatShutdown();
 1386              	 .loc 4 471 0
 1387 0122 FFF7FEFF 	 bl _ZN4host12heatShutdownEv
 472:src/MightyBoard/Motherboard/Motherboard.cc **** 		command::heatShutdown();
 1388              	 .loc 4 472 0
 1389 0126 FFF7FEFF 	 bl _ZN7command12heatShutdownEv
 473:src/MightyBoard/Motherboard/Motherboard.cc **** 		planner::abort();
 1390              	 .loc 4 473 0
 1391 012a FFF7FEFF 	 bl _ZN7planner5abortEv
 1392              	.LVL79:
 474:src/MightyBoard/Motherboard/Motherboard.cc ****         for(int i = 0; i < STEPPER_COUNT; i++)
 1393              	 .loc 4 474 0
 1394 012e 4FF00005 	 mov r5,#0
 1395              	.LBB244:
 475:src/MightyBoard/Motherboard/Motherboard.cc **** 			steppers::enableAxis(i, false);
 1396              	 .loc 4 475 0
 1397 0132 2E46     	 mov r6,r5
 1398              	.LVL80:
 1399              	.L92:
 475:src/MightyBoard/Motherboard/Motherboard.cc **** 			steppers::enableAxis(i, false);
 1400              	 .loc 4 475 0 is_stmt 0 discriminator 2
 1401 0134 E8B2     	 uxtb r0,r5
 1402 0136 3146     	 mov r1,r6
 1403 0138 FFF7FEFF 	 bl _ZN8steppers10enableAxisEhb
 474:src/MightyBoard/Motherboard/Motherboard.cc ****         for(int i = 0; i < STEPPER_COUNT; i++)
 1404              	 .loc 4 474 0 is_stmt 1 discriminator 2
 1405 013c 05F10105 	 add r5,r5,#1
 1406              	.LVL81:
 1407 0140 042D     	 cmp r5,#4
 1408 0142 F7D1     	 bne .L92
 1409              	.LVL82:
 1410              	.L96:
 1411              	.LBE244:
 1412              	.LBE243:
 1413              	.LBE242:
 480:src/MightyBoard/Motherboard/Motherboard.cc **** 	if(stagger == STAGGER_MID){
 1414              	 .loc 4 480 0
 1415 0144 40F20003 	 movw r3,#:lower16:.LANCHOR11
 1416 0148 C0F20003 	 movt r3,#:upper16:.LANCHOR11
 1417 014c 1B78     	 ldrb r3,[r3,#0]
 1418 014e 012B     	 cmp r3,#1
 1419 0150 07D1     	 bne .L93
 481:src/MightyBoard/Motherboard/Motherboard.cc **** 		stagger = STAGGER_EX1;
 1420              	 .loc 4 481 0
 1421 0152 40F20003 	 movw r3,#:lower16:.LANCHOR11
 1422 0156 C0F20003 	 movt r3,#:upper16:.LANCHOR11
 1423 015a 4FF00302 	 mov r2,#3
 1424 015e 1A70     	 strb r2,[r3,#0]
 1425 0160 70BD     	 pop {r4,r5,r6,pc}
 1426              	.L93:
 482:src/MightyBoard/Motherboard/Motherboard.cc **** 	}else if(stagger == STAGGER_EX1){
 1427              	 .loc 4 482 0
 1428 0162 032B     	 cmp r3,#3
 1429 0164 0BD1     	 bne .L94
 483:src/MightyBoard/Motherboard/Motherboard.cc **** 		Extruder_One.runExtruderSlice();
 1430              	 .loc 4 483 0
 1431 0166 04F12800 	 add r0,r4,#40
 1432 016a FFF7FEFF 	 bl _ZN13ExtruderBoard16runExtruderSliceEv
 484:src/MightyBoard/Motherboard/Motherboard.cc **** 		stagger = STAGGER_EX2;
 1433              	 .loc 4 484 0
 1434 016e 40F20003 	 movw r3,#:lower16:.LANCHOR11
 1435 0172 C0F20003 	 movt r3,#:upper16:.LANCHOR11
 1436 0176 4FF00202 	 mov r2,#2
 1437 017a 1A70     	 strb r2,[r3,#0]
 1438 017c 70BD     	 pop {r4,r5,r6,pc}
 1439              	.L94:
 485:src/MightyBoard/Motherboard/Motherboard.cc **** 	}else if (stagger == STAGGER_EX2){
 1440              	 .loc 4 485 0
 1441 017e 022B     	 cmp r3,#2
 1442 0180 0AD1     	 bne .L83
 486:src/MightyBoard/Motherboard/Motherboard.cc **** 		Extruder_Two.runExtruderSlice();
 1443              	 .loc 4 486 0
 1444 0182 04F58470 	 add r0,r4,#264
 1445 0186 FFF7FEFF 	 bl _ZN13ExtruderBoard16runExtruderSliceEv
 487:src/MightyBoard/Motherboard/Motherboard.cc **** 		stagger = STAGGER_INTERFACE;
 1446              	 .loc 4 487 0
 1447 018a 40F20003 	 movw r3,#:lower16:.LANCHOR11
 1448 018e C0F20003 	 movt r3,#:upper16:.LANCHOR11
 1449 0192 4FF00002 	 mov r2,#0
 1450 0196 1A70     	 strb r2,[r3,#0]
 1451              	.L83:
 1452 0198 70BD     	 pop {r4,r5,r6,pc}
 1453              	.LBE241:
 1454              	 .cfi_endproc
 1455              	.LFE151:
 1457 019a 00BF     	 .section .text._ZN11Motherboard5resetEb,"ax",%progbits
 1458              	 .align 2
 1459              	 .global _ZN11Motherboard5resetEb
 1460              	 .thumb
 1461              	 .thumb_func
 1463              	_ZN11Motherboard5resetEb:
 1464              	.LFB144:
 189:src/MightyBoard/Motherboard/Motherboard.cc **** void Motherboard::reset(bool hard_reset) {
 1465              	 .loc 4 189 0
 1466              	 .cfi_startproc
 1467              	 
 1468              	 
 1469              	.LVL83:
 1470 0000 70B5     	 push {r4,r5,r6,lr}
 1471              	.LCFI19:
 1472              	 .cfi_def_cfa_offset 16
 1473              	 .cfi_offset 14,-4
 1474              	 .cfi_offset 6,-8
 1475              	 .cfi_offset 5,-12
 1476              	 .cfi_offset 4,-16
 1477 0002 A4B0     	 sub sp,sp,#144
 1478              	.LCFI20:
 1479              	 .cfi_def_cfa_offset 160
 1480 0004 0446     	 mov r4,r0
 1481 0006 0E46     	 mov r6,r1
 1482              	.LBB252:
 190:src/MightyBoard/Motherboard/Motherboard.cc **** 	indicateError(0); // turn on blinker
 1483              	 .loc 4 190 0
 1484 0008 4FF00001 	 mov r1,#0
 1485              	.LVL84:
 1486 000c FFF7FEFF 	 bl _ZN11Motherboard13indicateErrorEi
 1487              	.LVL85:
 193:src/MightyBoard/Motherboard/Motherboard.cc **** 	uint8_t axis_invert = eeprom::getEeprom8(eeprom_offsets::AXIS_INVERSION, 0);
 1488              	 .loc 4 193 0
 1489 0010 4FF00200 	 mov r0,#2
 1490 0014 4FF00001 	 mov r1,#0
 1491 0018 FFF7FEFF 	 bl _ZN6eeprom10getEeprom8Eth
 1492 001c 0546     	 mov r5,r0
 1493              	.LVL86:
 194:src/MightyBoard/Motherboard/Motherboard.cc ****     SoftI2cManager::getI2cManager().init();
 1494              	 .loc 4 194 0
 1495 001e 40F20000 	 movw r0,#:lower16:_ZN14SoftI2cManager10i2cManagerE
 1496              	.LVL87:
 1497 0022 C0F20000 	 movt r0,#:upper16:_ZN14SoftI2cManager10i2cManagerE
 1498 0026 FFF7FEFF 	 bl _ZN14SoftI2cManager4initEv
 1499              	.LVL88:
 202:src/MightyBoard/Motherboard/Motherboard.cc **** 	bool hold_z = (axis_invert & (1<<7)) == 0;
 1500              	 .loc 4 202 0
 1501 002a 6FEA0500 	 mvn r0,r5
 203:src/MightyBoard/Motherboard/Motherboard.cc **** 	steppers::setHoldZ(hold_z);
 1502              	 .loc 4 203 0
 1503 002e C0F3C010 	 ubfx r0,r0,#7,#1
 1504 0032 FFF7FEFF 	 bl _ZN8steppers8setHoldZEb
 1505              	.LBB253:
 1506              	.LBB254:
 1507              	 .file 7 "src/MightyBoard/shared/UART.hh"
   1:src/MightyBoard/shared/UART.hh **** /*
   2:src/MightyBoard/shared/UART.hh ****  * Copyright 2010 by Adam Mayer	 <adam@makerbot.com>
   3:src/MightyBoard/shared/UART.hh ****  *
   4:src/MightyBoard/shared/UART.hh ****  * This program is free software: you can redistribute it and/or modify
   5:src/MightyBoard/shared/UART.hh ****  * it under the terms of the GNU General Public License as published by
   6:src/MightyBoard/shared/UART.hh ****  * the Free Software Foundation, either version 3 of the License, or
   7:src/MightyBoard/shared/UART.hh ****  * (at your option) any later version.
   8:src/MightyBoard/shared/UART.hh ****  *
   9:src/MightyBoard/shared/UART.hh ****  * This program is distributed in the hope that it will be useful,
  10:src/MightyBoard/shared/UART.hh ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:src/MightyBoard/shared/UART.hh ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:src/MightyBoard/shared/UART.hh ****  * GNU General Public License for more details.
  13:src/MightyBoard/shared/UART.hh ****  *
  14:src/MightyBoard/shared/UART.hh ****  * You should have received a copy of the GNU General Public License
  15:src/MightyBoard/shared/UART.hh ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>
  16:src/MightyBoard/shared/UART.hh ****  */
  17:src/MightyBoard/shared/UART.hh **** 
  18:src/MightyBoard/shared/UART.hh **** #ifndef UART_HH_
  19:src/MightyBoard/shared/UART.hh **** #define UART_HH_
  20:src/MightyBoard/shared/UART.hh **** 
  21:src/MightyBoard/shared/UART.hh **** #include "Packet.hh"
  22:src/MightyBoard/shared/UART.hh **** #include "Configuration.hh"
  23:src/MightyBoard/shared/UART.hh **** #include <stdint.h>
  24:src/MightyBoard/shared/UART.hh **** 
  25:src/MightyBoard/shared/UART.hh **** // TODO: Move to UART class
  26:src/MightyBoard/shared/UART.hh **** /// Communication mode selection
  27:src/MightyBoard/shared/UART.hh **** enum communication_mode {
  28:src/MightyBoard/shared/UART.hh ****     RS232,  // USB        ///< Act as an asynchronous, full duplex RS232 transciever
  29:src/MightyBoard/shared/UART.hh ****     RS485   // RS485        ///< Act as an asynchronous, half duplex RS485 transciever
  30:src/MightyBoard/shared/UART.hh **** };
  31:src/MightyBoard/shared/UART.hh **** 
  32:src/MightyBoard/shared/UART.hh **** 
  33:src/MightyBoard/shared/UART.hh **** /// The UART object implements the serial communication protocol using one
  34:src/MightyBoard/shared/UART.hh **** /// or two hardware UART libraries.
  35:src/MightyBoard/shared/UART.hh **** ///
  36:src/MightyBoard/shared/UART.hh **** /// UARTs, when constructed, start off disabled.
  37:src/MightyBoard/shared/UART.hh **** /// They begin receiving data only after an enable(true)
  38:src/MightyBoard/shared/UART.hh **** /// call is made.  beginSend() calls will send completed
  39:src/MightyBoard/shared/UART.hh **** /// packets.
  40:src/MightyBoard/shared/UART.hh **** ///
  41:src/MightyBoard/shared/UART.hh **** /// Porting notes:
  42:src/MightyBoard/shared/UART.hh **** /// The current implementation supports one UART on the atmega168/328, and two UARTs
  43:src/MightyBoard/shared/UART.hh **** /// on the atmega644 and atmega1280/2560. The code will need to be updated to support
  44:src/MightyBoard/shared/UART.hh **** /// new architectures.
  45:src/MightyBoard/shared/UART.hh **** /// \ingroup HardwareLibraries
  46:src/MightyBoard/shared/UART.hh **** class UART {
  47:src/MightyBoard/shared/UART.hh **** private:
  48:src/MightyBoard/shared/UART.hh **** //	static UART hostUART;       ///< The controller accepts commands from the host UART
  49:src/MightyBoard/shared/UART.hh **** #if HAS_SLAVE_UART
  50:src/MightyBoard/shared/UART.hh **** //	static UART slaveUART;      ///< The controller can forward commands to the slave UART
  51:src/MightyBoard/shared/UART.hh **** #endif
  52:src/MightyBoard/shared/UART.hh **** 
  53:src/MightyBoard/shared/UART.hh **** public:
  54:src/MightyBoard/shared/UART.hh ****     /// Get a reference to the host UART
  55:src/MightyBoard/shared/UART.hh ****     /// \return hostUART instance, which should act as a slave to a computer (or motherboard)
  56:src/MightyBoard/shared/UART.hh ****     static UART& getHostUART() {static UART hostUART(0,RS232); return hostUART; }
 1508              	 .loc 7 56 0
 1509 0036 40F20003 	 movw r3,#:lower16:_ZGVZN4UART11getHostUARTEvE8hostUART
 1510 003a C0F20003 	 movt r3,#:upper16:_ZGVZN4UART11getHostUARTEvE8hostUART
 1511 003e 1B68     	 ldr r3,[r3,#0]
 1512 0040 13F0010F 	 tst r3,#1
 1513 0044 15D1     	 bne .L100
 1514 0046 40F20000 	 movw r0,#:lower16:_ZGVZN4UART11getHostUARTEvE8hostUART
 1515 004a C0F20000 	 movt r0,#:upper16:_ZGVZN4UART11getHostUARTEvE8hostUART
 1516 004e FFF7FEFF 	 bl __cxa_guard_acquire
 1517 0052 70B1     	 cbz r0,.L100
 1518 0054 40F20000 	 movw r0,#:lower16:_ZZN4UART11getHostUARTEvE8hostUART
 1519 0058 C0F20000 	 movt r0,#:upper16:_ZZN4UART11getHostUARTEvE8hostUART
 1520 005c 4FF00001 	 mov r1,#0
 1521 0060 0A46     	 mov r2,r1
 1522 0062 FFF7FEFF 	 bl _ZN4UARTC1Eh18communication_mode
 1523 0066 40F20000 	 movw r0,#:lower16:_ZGVZN4UART11getHostUARTEvE8hostUART
 1524 006a C0F20000 	 movt r0,#:upper16:_ZGVZN4UART11getHostUARTEvE8hostUART
 1525 006e FFF7FEFF 	 bl __cxa_guard_release
 1526              	.L100:
 1527              	.LBE254:
 1528              	.LBE253:
 206:src/MightyBoard/Motherboard/Motherboard.cc **** 	UART::getHostUART().enable(true);
 1529              	 .loc 4 206 0
 1530 0072 40F20000 	 movw r0,#:lower16:_ZZN4UART11getHostUARTEvE8hostUART
 1531 0076 C0F20000 	 movt r0,#:upper16:_ZZN4UART11getHostUARTEvE8hostUART
 1532 007a 4FF00101 	 mov r1,#1
 1533 007e FFF7FEFF 	 bl _ZN4UART6enableEb
 1534              	.LBB255:
 1535              	.LBB256:
 1536              	 .loc 7 56 0
 1537 0082 40F20003 	 movw r3,#:lower16:_ZGVZN4UART11getHostUARTEvE8hostUART
 1538 0086 C0F20003 	 movt r3,#:upper16:_ZGVZN4UART11getHostUARTEvE8hostUART
 1539 008a 1B68     	 ldr r3,[r3,#0]
 1540 008c 13F0010F 	 tst r3,#1
 1541 0090 15D1     	 bne .L101
 1542 0092 40F20000 	 movw r0,#:lower16:_ZGVZN4UART11getHostUARTEvE8hostUART
 1543 0096 C0F20000 	 movt r0,#:upper16:_ZGVZN4UART11getHostUARTEvE8hostUART
 1544 009a FFF7FEFF 	 bl __cxa_guard_acquire
 1545 009e 70B1     	 cbz r0,.L101
 1546 00a0 40F20000 	 movw r0,#:lower16:_ZZN4UART11getHostUARTEvE8hostUART
 1547 00a4 C0F20000 	 movt r0,#:upper16:_ZZN4UART11getHostUARTEvE8hostUART
 1548 00a8 4FF00001 	 mov r1,#0
 1549 00ac 0A46     	 mov r2,r1
 1550 00ae FFF7FEFF 	 bl _ZN4UARTC1Eh18communication_mode
 1551 00b2 40F20000 	 movw r0,#:lower16:_ZGVZN4UART11getHostUARTEvE8hostUART
 1552 00b6 C0F20000 	 movt r0,#:upper16:_ZGVZN4UART11getHostUARTEvE8hostUART
 1553 00ba FFF7FEFF 	 bl __cxa_guard_release
 1554              	.L101:
 1555              	.LBE256:
 1556              	.LBE255:
 207:src/MightyBoard/Motherboard/Motherboard.cc **** 	UART::getHostUART().in.reset();
 1557              	 .loc 4 207 0
 1558 00be 8648     	 ldr r0,.L103
 1559 00c0 FFF7FEFF 	 bl _ZN8InPacket5resetEv
 209:src/MightyBoard/Motherboard/Motherboard.cc **** 	micros = 0;
 1560              	 .loc 4 209 0
 1561 00c4 4FF00005 	 mov r5,#0
 1562              	.LVL89:
 1563 00c8 2560     	 str r5,[r4,#0]
 211:src/MightyBoard/Motherboard/Motherboard.cc **** 	initClocks();
 1564              	 .loc 4 211 0
 1565 00ca 2046     	 mov r0,r4
 1566 00cc FFF7FEFF 	 bl _ZN11Motherboard10initClocksEv
 248:src/MightyBoard/Motherboard/Motherboard.cc ****     interfaceBlink(0,0);
 1567              	 .loc 4 248 0
 1568 00d0 2046     	 mov r0,r4
 1569 00d2 2946     	 mov r1,r5
 1570 00d4 2A46     	 mov r2,r5
 1571 00d6 FFF7FEFF 	 bl _ZN11Motherboard14interfaceBlinkEii
 252:src/MightyBoard/Motherboard/Motherboard.cc ****     if(hard_reset)
 1572              	 .loc 4 252 0
 1573 00da 002E     	 cmp r6,#0
 1574 00dc 00F0C280 	 beq .L102
 255:src/MightyBoard/Motherboard/Motherboard.cc **** 		DEBUG_LED1.setDirection(true);
 1575              	 .loc 4 255 0
 1576 00e0 40F20005 	 movw r5,#:lower16:.LANCHOR3
 1577 00e4 C0F20005 	 movt r5,#:upper16:.LANCHOR3
 1578 00e8 01A8     	 add r0,sp,#4
 1579 00ea 2946     	 mov r1,r5
 1580 00ec 4FF01202 	 mov r2,#18
 1581 00f0 FFF7FEFF 	 bl _ZN3PinC1ERK7LPCPorth
 1582 00f4 01A8     	 add r0,sp,#4
 1583 00f6 4FF00101 	 mov r1,#1
 1584 00fa FFF7FEFF 	 bl _ZNK3Pin12setDirectionEb
 256:src/MightyBoard/Motherboard/Motherboard.cc **** 		DEBUG_LED2.setDirection(true);
 1585              	 .loc 4 256 0
 1586 00fe 03A8     	 add r0,sp,#12
 1587 0100 2946     	 mov r1,r5
 1588 0102 4FF01402 	 mov r2,#20
 1589 0106 FFF7FEFF 	 bl _ZN3PinC1ERK7LPCPorth
 1590 010a 03A8     	 add r0,sp,#12
 1591 010c 4FF00101 	 mov r1,#1
 1592 0110 FFF7FEFF 	 bl _ZNK3Pin12setDirectionEb
 257:src/MightyBoard/Motherboard/Motherboard.cc **** 		DEBUG_LED3.setDirection(true);
 1593              	 .loc 4 257 0
 1594 0114 05A8     	 add r0,sp,#20
 1595 0116 2946     	 mov r1,r5
 1596 0118 4FF01502 	 mov r2,#21
 1597 011c FFF7FEFF 	 bl _ZN3PinC1ERK7LPCPorth
 1598 0120 05A8     	 add r0,sp,#20
 1599 0122 4FF00101 	 mov r1,#1
 1600 0126 FFF7FEFF 	 bl _ZNK3Pin12setDirectionEb
 258:src/MightyBoard/Motherboard/Motherboard.cc **** 		DEBUG_LED4.setDirection(true);
 1601              	 .loc 4 258 0
 1602 012a 07A8     	 add r0,sp,#28
 1603 012c 2946     	 mov r1,r5
 1604 012e 4FF01702 	 mov r2,#23
 1605 0132 FFF7FEFF 	 bl _ZN3PinC1ERK7LPCPorth
 1606 0136 07A8     	 add r0,sp,#28
 1607 0138 4FF00101 	 mov r1,#1
 1608 013c FFF7FEFF 	 bl _ZNK3Pin12setDirectionEb
 259:src/MightyBoard/Motherboard/Motherboard.cc **** 		DEBUG_PIN.setDirection(true);
 1609              	 .loc 4 259 0
 1610 0140 0BA8     	 add r0,sp,#44
 1611 0142 4FF0FF01 	 mov r1,#255
 1612 0146 FFF7FEFF 	 bl _ZN7LPCPortC1Eh
 1613 014a 09A8     	 add r0,sp,#36
 1614 014c 0BA9     	 add r1,sp,#44
 1615 014e 4FF0FF02 	 mov r2,#255
 1616 0152 FFF7FEFF 	 bl _ZN3PinC1ERK7LPCPorth
 1617 0156 09A8     	 add r0,sp,#36
 1618 0158 4FF00101 	 mov r1,#1
 1619 015c FFF7FEFF 	 bl _ZNK3Pin12setDirectionEb
 260:src/MightyBoard/Motherboard/Motherboard.cc **** 		DEBUG_PIN1.setDirection(true);
 1620              	 .loc 4 260 0
 1621 0160 0EA8     	 add r0,sp,#56
 1622 0162 4FF0FF01 	 mov r1,#255
 1623 0166 FFF7FEFF 	 bl _ZN7LPCPortC1Eh
 1624 016a 0CA8     	 add r0,sp,#48
 1625 016c 0EA9     	 add r1,sp,#56
 1626 016e 4FF0FF02 	 mov r2,#255
 1627 0172 FFF7FEFF 	 bl _ZN3PinC1ERK7LPCPorth
 1628 0176 0CA8     	 add r0,sp,#48
 1629 0178 4FF00101 	 mov r1,#1
 1630 017c FFF7FEFF 	 bl _ZNK3Pin12setDirectionEb
 261:src/MightyBoard/Motherboard/Motherboard.cc **** 		DEBUG_PIN2.setDirection(true);
 1631              	 .loc 4 261 0
 1632 0180 11A8     	 add r0,sp,#68
 1633 0182 4FF0FF01 	 mov r1,#255
 1634 0186 FFF7FEFF 	 bl _ZN7LPCPortC1Eh
 1635 018a 0FA8     	 add r0,sp,#60
 1636 018c 11A9     	 add r1,sp,#68
 1637 018e 4FF0FF02 	 mov r2,#255
 1638 0192 FFF7FEFF 	 bl _ZN3PinC1ERK7LPCPorth
 1639 0196 0FA8     	 add r0,sp,#60
 1640 0198 4FF00101 	 mov r1,#1
 1641 019c FFF7FEFF 	 bl _ZNK3Pin12setDirectionEb
 262:src/MightyBoard/Motherboard/Motherboard.cc **** 		DEBUG_PIN3.setDirection(true);	
 1642              	 .loc 4 262 0
 1643 01a0 14A8     	 add r0,sp,#80
 1644 01a2 4FF0FF01 	 mov r1,#255
 1645 01a6 FFF7FEFF 	 bl _ZN7LPCPortC1Eh
 1646 01aa 12A8     	 add r0,sp,#72
 1647 01ac 14A9     	 add r1,sp,#80
 1648 01ae 4FF0FF02 	 mov r2,#255
 1649 01b2 FFF7FEFF 	 bl _ZN3PinC1ERK7LPCPorth
 1650 01b6 12A8     	 add r0,sp,#72
 1651 01b8 4FF00101 	 mov r1,#1
 1652 01bc FFF7FEFF 	 bl _ZNK3Pin12setDirectionEb
 263:src/MightyBoard/Motherboard/Motherboard.cc **** 		DEBUG_PIN4.setDirection(true);
 1653              	 .loc 4 263 0
 1654 01c0 17A8     	 add r0,sp,#92
 1655 01c2 4FF0FF01 	 mov r1,#255
 1656 01c6 FFF7FEFF 	 bl _ZN7LPCPortC1Eh
 1657 01ca 15A8     	 add r0,sp,#84
 1658 01cc 17A9     	 add r1,sp,#92
 1659 01ce 4FF0FF02 	 mov r2,#255
 1660 01d2 FFF7FEFF 	 bl _ZN3PinC1ERK7LPCPorth
 1661 01d6 15A8     	 add r0,sp,#84
 1662 01d8 4FF00101 	 mov r1,#1
 1663 01dc FFF7FEFF 	 bl _ZNK3Pin12setDirectionEb
 264:src/MightyBoard/Motherboard/Motherboard.cc **** 		DEBUG_PIN5.setDirection(true);
 1664              	 .loc 4 264 0
 1665 01e0 1AA8     	 add r0,sp,#104
 1666 01e2 4FF0FF01 	 mov r1,#255
 1667 01e6 FFF7FEFF 	 bl _ZN7LPCPortC1Eh
 1668 01ea 18A8     	 add r0,sp,#96
 1669 01ec 1AA9     	 add r1,sp,#104
 1670 01ee 4FF0FF02 	 mov r2,#255
 1671 01f2 FFF7FEFF 	 bl _ZN3PinC1ERK7LPCPorth
 1672 01f6 18A8     	 add r0,sp,#96
 1673 01f8 4FF00101 	 mov r1,#1
 1674 01fc FFF7FEFF 	 bl _ZNK3Pin12setDirectionEb
 265:src/MightyBoard/Motherboard/Motherboard.cc **** 		DEBUG_PIN6.setDirection(true);
 1675              	 .loc 4 265 0
 1676 0200 1DA8     	 add r0,sp,#116
 1677 0202 4FF0FF01 	 mov r1,#255
 1678 0206 FFF7FEFF 	 bl _ZN7LPCPortC1Eh
 1679 020a 1BA8     	 add r0,sp,#108
 1680 020c 1DA9     	 add r1,sp,#116
 1681 020e 4FF0FF02 	 mov r2,#255
 1682 0212 FFF7FEFF 	 bl _ZN3PinC1ERK7LPCPorth
 1683 0216 1BA8     	 add r0,sp,#108
 1684 0218 4FF00101 	 mov r1,#1
 1685 021c FFF7FEFF 	 bl _ZNK3Pin12setDirectionEb
 266:src/MightyBoard/Motherboard/Motherboard.cc **** 		DEBUG_PIN7.setDirection(true);
 1686              	 .loc 4 266 0
 1687 0220 20A8     	 add r0,sp,#128
 1688 0222 4FF0FF01 	 mov r1,#255
 1689 0226 FFF7FEFF 	 bl _ZN7LPCPortC1Eh
 1690 022a 1EA8     	 add r0,sp,#120
 1691 022c 20A9     	 add r1,sp,#128
 1692 022e 4FF0FF02 	 mov r2,#255
 1693 0232 FFF7FEFF 	 bl _ZN3PinC1ERK7LPCPorth
 1694 0236 1EA8     	 add r0,sp,#120
 1695 0238 4FF00101 	 mov r1,#1
 1696 023c FFF7FEFF 	 bl _ZNK3Pin12setDirectionEb
 268:src/MightyBoard/Motherboard/Motherboard.cc **** 		RGB_LED::init();
 1697              	 .loc 4 268 0
 1698 0240 FFF7FEFF 	 bl _ZN7RGB_LED4initEv
 270:src/MightyBoard/Motherboard/Motherboard.cc **** 		Piezo::startUpTone();
 1699              	 .loc 4 270 0
 1700 0244 FFF7FEFF 	 bl _ZN5Piezo11startUpToneEv
 272:src/MightyBoard/Motherboard/Motherboard.cc **** 		heatShutdown = false;
 1701              	 .loc 4 272 0
 1702 0248 4FF00005 	 mov r5,#0
 1703 024c 84F89D52 	 strb r5,[r4,#669]
 273:src/MightyBoard/Motherboard/Motherboard.cc **** 		heatFailMode = HEATER_FAIL_NONE;
 1704              	 .loc 4 273 0
 1705 0250 84F8A052 	 strb r5,[r4,#672]
 274:src/MightyBoard/Motherboard/Motherboard.cc **** 		cutoff.init();
 1706              	 .loc 4 274 0
 1707 0254 04F52670 	 add r0,r4,#664
 1708 0258 00F10100 	 add r0,r0,#1
 1709 025c FFF7FEFF 	 bl _ZN6Cutoff4initEv
 276:src/MightyBoard/Motherboard/Motherboard.cc **** 		board_status = STATUS_NONE;
 1710              	 .loc 4 276 0
 1711 0260 84F8A152 	 strb r5,[r4,#673]
 1712              	.L102:
 280:src/MightyBoard/Motherboard/Motherboard.cc ****     Extruder_One.reset();
 1713              	 .loc 4 280 0
 1714 0264 04F12800 	 add r0,r4,#40
 1715 0268 FFF7FEFF 	 bl _ZN13ExtruderBoard5resetEv
 281:src/MightyBoard/Motherboard/Motherboard.cc ****     Extruder_Two.reset();
 1716              	 .loc 4 281 0
 1717 026c 04F58470 	 add r0,r4,#264
 1718 0270 FFF7FEFF 	 bl _ZN13ExtruderBoard5resetEv
 283:src/MightyBoard/Motherboard/Motherboard.cc ****     HBP_HEAT.setDirection(true);
 1719              	 .loc 4 283 0
 1720 0274 23A8     	 add r0,sp,#140
 1721 0276 4FF0FF01 	 mov r1,#255
 1722 027a FFF7FEFF 	 bl _ZN7LPCPortC1Eh
 1723 027e 21A8     	 add r0,sp,#132
 1724 0280 23A9     	 add r1,sp,#140
 1725 0282 4FF0FF02 	 mov r2,#255
 1726 0286 FFF7FEFF 	 bl _ZN3PinC1ERK7LPCPorth
 1727 028a 21A8     	 add r0,sp,#132
 1728 028c 4FF00101 	 mov r1,#1
 1729 0290 FFF7FEFF 	 bl _ZNK3Pin12setDirectionEb
 284:src/MightyBoard/Motherboard/Motherboard.cc **** 	platform_thermistor.init();
 1730              	 .loc 4 284 0
 1731 0294 04F5F470 	 add r0,r4,#488
 1732 0298 FFF7FEFF 	 bl _ZN10Thermistor4initEv
 285:src/MightyBoard/Motherboard/Motherboard.cc **** 	platform_heater.reset();
 1733              	 .loc 4 285 0
 1734 029c 04F50375 	 add r5,r4,#524
 1735 02a0 2846     	 mov r0,r5
 1736 02a2 FFF7FEFF 	 bl _ZN6Heater5resetEv
 287:src/MightyBoard/Motherboard/Motherboard.cc ****     Extruder_One.getExtruderHeater().set_target_temperature(0);
 1737              	 .loc 4 287 0
 1738 02a6 04F15000 	 add r0,r4,#80
 1739 02aa 4FF00001 	 mov r1,#0
 1740 02ae FFF7FEFF 	 bl _ZN6Heater22set_target_temperatureEi
 288:src/MightyBoard/Motherboard/Motherboard.cc **** 	Extruder_Two.getExtruderHeater().set_target_temperature(0);
 1741              	 .loc 4 288 0
 1742 02b2 04F59870 	 add r0,r4,#304
 1743 02b6 4FF00001 	 mov r1,#0
 1744 02ba FFF7FEFF 	 bl _ZN6Heater22set_target_temperatureEi
 289:src/MightyBoard/Motherboard/Motherboard.cc **** 	platform_heater.set_target_temperature(0);	
 1745              	 .loc 4 289 0
 1746 02be 2846     	 mov r0,r5
 1747 02c0 4FF00001 	 mov r1,#0
 1748 02c4 FFF7FEFF 	 bl _ZN6Heater22set_target_temperatureEi
 291:src/MightyBoard/Motherboard/Motherboard.cc **** 	RGB_LED::setDefaultColor(); 
 1749              	 .loc 4 291 0
 1750 02c8 FFF7FEFF 	 bl _ZN7RGB_LED15setDefaultColorEv
 292:src/MightyBoard/Motherboard/Motherboard.cc **** 	buttonWait = false;
 1751              	 .loc 4 292 0
 1752 02cc 4FF00003 	 mov r3,#0
 1753 02d0 84F89E32 	 strb r3,[r4,#670]
 1754              	.LBE252:
 300:src/MightyBoard/Motherboard/Motherboard.cc **** }
 1755              	 .loc 4 300 0
 1756 02d4 24B0     	 add sp,sp,#144
 1757 02d6 70BD     	 pop {r4,r5,r6,pc}
 1758              	.L104:
 1759              	 .align 2
 1760              	.L103:
 1761 02d8 03000000 	 .word _ZZN4UART11getHostUARTEvE8hostUART+3
 1762              	 .cfi_endproc
 1763              	.LFE144:
 1765              	 .section .text._ZN11Motherboard15getCurrentErrorEv,"ax",%progbits
 1766              	 .align 2
 1767              	 .global _ZN11Motherboard15getCurrentErrorEv
 1768              	 .thumb
 1769              	 .thumb_func
 1771              	_ZN11Motherboard15getCurrentErrorEv:
 1772              	.LFB157:
 588:src/MightyBoard/Motherboard/Motherboard.cc **** uint8_t Motherboard::getCurrentError() {
 1773              	 .loc 4 588 0
 1774              	 .cfi_startproc
 1775              	 
 1776              	 
 1777              	 
 1778              	.LVL90:
 589:src/MightyBoard/Motherboard/Motherboard.cc **** 	return blink_count;
 1779              	 .loc 4 589 0
 1780 0000 40F20003 	 movw r3,#:lower16:.LANCHOR6
 1781 0004 C0F20003 	 movt r3,#:upper16:.LANCHOR6
 1782 0008 1878     	 ldrb r0,[r3,#0]
 1783              	.LVL91:
 590:src/MightyBoard/Motherboard/Motherboard.cc **** }
 1784              	 .loc 4 590 0
 1785 000a 7047     	 bx lr
 1786              	 .cfi_endproc
 1787              	.LFE157:
 1789              	 .section .text.TIMER2_IRQHandler,"ax",%progbits
 1790              	 .align 2
 1791              	 .global TIMER2_IRQHandler
 1792              	 .thumb
 1793              	 .thumb_func
 1795              	TIMER2_IRQHandler:
 1796              	.LFB158:
 611:src/MightyBoard/Motherboard/Motherboard.cc **** extern "C" void TIMER2_IRQHandler (void){
 1797              	 .loc 4 611 0
 1798              	 .cfi_startproc
 1799              	 
 1800              	 
 1801 0000 10B5     	 push {r4,lr}
 1802              	.LCFI21:
 1803              	 .cfi_def_cfa_offset 8
 1804              	 .cfi_offset 14,-4
 1805              	 .cfi_offset 4,-8
 1806 0002 90B0     	 sub sp,sp,#64
 1807              	.LCFI22:
 1808              	 .cfi_def_cfa_offset 72
 612:src/MightyBoard/Motherboard/Motherboard.cc **** 	DEBUG_LED2.setDirection(true);
 1809              	 .loc 4 612 0
 1810 0004 40F20004 	 movw r4,#:lower16:.LANCHOR3
 1811 0008 C0F20004 	 movt r4,#:upper16:.LANCHOR3
 1812 000c 01A8     	 add r0,sp,#4
 1813 000e 2146     	 mov r1,r4
 1814 0010 4FF01402 	 mov r2,#20
 1815 0014 FFF7FEFF 	 bl _ZN3PinC1ERK7LPCPorth
 1816 0018 01A8     	 add r0,sp,#4
 1817 001a 4FF00101 	 mov r1,#1
 1818 001e FFF7FEFF 	 bl _ZNK3Pin12setDirectionEb
 613:src/MightyBoard/Motherboard/Motherboard.cc **** 	DEBUG_LED2.setValue(true);
 1819              	 .loc 4 613 0
 1820 0022 03A8     	 add r0,sp,#12
 1821 0024 2146     	 mov r1,r4
 1822 0026 4FF01402 	 mov r2,#20
 1823 002a FFF7FEFF 	 bl _ZN3PinC1ERK7LPCPorth
 1824              	.LVL92:
 1825              	.LBB267:
 1826              	.LBB268:
  35:src/MightyBoard/shared/Pin.hh **** 		if (is_null)
 1827              	 .loc 5 35 0
 1828 002e 9DF80D30 	 ldrb r3,[sp,#13]
 1829 0032 4BB9     	 cbnz r3,.L107
  44:src/MightyBoard/shared/Pin.hh **** 			GPIO_SetValue(port_base, _BV(pin_index));
 1830              	 .loc 5 44 0
 1831 0034 9DF80E30 	 ldrb r3,[sp,#14]
 1832 0038 9DF80C00 	 ldrb r0,[sp,#12]
 1833 003c 4FF00101 	 mov r1,#1
 1834 0040 01FA03F1 	 lsl r1,r1,r3
 1835 0044 FFF7FEFF 	 bl GPIO_SetValue
 1836              	.L107:
 1837              	.LBE268:
 1838              	.LBE267:
 616:src/MightyBoard/Motherboard/Motherboard.cc **** 	TIM_ClearIntPending(LPC_TIM2,TIM_MR0_INT);
 1839              	 .loc 4 616 0
 1840 0048 4FF00000 	 mov r0,#0
 1841 004c C4F20900 	 movt r0,16393
 1842 0050 4FF00001 	 mov r1,#0
 1843 0054 FFF7FEFF 	 bl TIM_ClearIntPending
 618:src/MightyBoard/Motherboard/Motherboard.cc **** 	Motherboard::getBoard().UpdateMicros();
 1844              	 .loc 4 618 0
 1845 0058 40F20000 	 movw r0,#:lower16:.LANCHOR4
 1846 005c C0F20000 	 movt r0,#:upper16:.LANCHOR4
 1847 0060 FFF7FEFF 	 bl _ZN11Motherboard12UpdateMicrosEv
 619:src/MightyBoard/Motherboard/Motherboard.cc **** 	DEBUG_LED2.setValue(false);
 1848              	 .loc 4 619 0
 1849 0064 05A8     	 add r0,sp,#20
 1850 0066 40F20001 	 movw r1,#:lower16:.LANCHOR3
 1851 006a C0F20001 	 movt r1,#:upper16:.LANCHOR3
 1852 006e 4FF01402 	 mov r2,#20
 1853 0072 FFF7FEFF 	 bl _ZN3PinC1ERK7LPCPorth
 1854              	.LVL93:
 1855              	.LBB269:
 1856              	.LBB270:
  35:src/MightyBoard/shared/Pin.hh **** 		if (is_null)
 1857              	 .loc 5 35 0
 1858 0076 9DF81530 	 ldrb r3,[sp,#21]
 1859 007a 4BB9     	 cbnz r3,.L108
 1860              	 .loc 5 48 0
 1861 007c 9DF81630 	 ldrb r3,[sp,#22]
 1862 0080 9DF81400 	 ldrb r0,[sp,#20]
 1863 0084 4FF00101 	 mov r1,#1
 1864 0088 01FA03F1 	 lsl r1,r1,r3
 1865 008c FFF7FEFF 	 bl GPIO_ClearValue
 1866              	.L108:
 1867              	.LBE270:
 1868              	.LBE269:
 621:src/MightyBoard/Motherboard/Motherboard.cc **** 	if(blink_overflow_counter++ <= 0x080)
 1869              	 .loc 4 621 0
 1870 0090 40F20003 	 movw r3,#:lower16:.LANCHOR12
 1871 0094 C0F20003 	 movt r3,#:upper16:.LANCHOR12
 1872 0098 1A88     	 ldrh r2,[r3,#0]
 1873 009a 02F10101 	 add r1,r2,#1
 1874 009e 1980     	 strh r1,[r3,#0]
 1875 00a0 802A     	 cmp r2,#128
 1876 00a2 40F2FC80 	 bls .L106
 624:src/MightyBoard/Motherboard/Motherboard.cc **** 	blink_overflow_counter = 0;
 1877              	 .loc 4 624 0
 1878 00a6 40F20003 	 movw r3,#:lower16:.LANCHOR12
 1879 00aa C0F20003 	 movt r3,#:upper16:.LANCHOR12
 1880 00ae 4FF00002 	 mov r2,#0
 1881 00b2 1A80     	 strh r2,[r3,#0]
 627:src/MightyBoard/Motherboard/Motherboard.cc **** 	if (blink_ovfs_remaining > 0) {
 1882              	 .loc 4 627 0
 1883 00b4 40F20003 	 movw r3,#:lower16:.LANCHOR13
 1884 00b8 C0F20003 	 movt r3,#:upper16:.LANCHOR13
 1885 00bc 1A68     	 ldr r2,[r3,#0]
 1886 00be 002A     	 cmp r2,#0
 1887 00c0 07DD     	 ble .L110
 628:src/MightyBoard/Motherboard/Motherboard.cc **** 		blink_ovfs_remaining--;
 1888              	 .loc 4 628 0
 1889 00c2 40F20003 	 movw r3,#:lower16:.LANCHOR13
 1890 00c6 C0F20003 	 movt r3,#:upper16:.LANCHOR13
 1891 00ca 02F1FF32 	 add r2,r2,#-1
 1892 00ce 1A60     	 str r2,[r3,#0]
 1893 00d0 AAE0     	 b .L111
 1894              	.L110:
 630:src/MightyBoard/Motherboard/Motherboard.cc **** 		if (blink_state == BLINK_ON) {
 1895              	 .loc 4 630 0
 1896 00d2 40F20003 	 movw r3,#:lower16:.LANCHOR5
 1897 00d6 C0F20003 	 movt r3,#:upper16:.LANCHOR5
 1898 00da 1B68     	 ldr r3,[r3,#0]
 1899 00dc 012B     	 cmp r3,#1
 1900 00de 2FD1     	 bne .L112
 631:src/MightyBoard/Motherboard/Motherboard.cc **** 			blinked_so_far++;
 1901              	 .loc 4 631 0
 1902 00e0 40F20003 	 movw r3,#:lower16:.LANCHOR14
 1903 00e4 C0F20003 	 movt r3,#:upper16:.LANCHOR14
 1904 00e8 1A68     	 ldr r2,[r3,#0]
 1905 00ea 02F10102 	 add r2,r2,#1
 1906 00ee 1A60     	 str r2,[r3,#0]
 632:src/MightyBoard/Motherboard/Motherboard.cc **** 			blink_state = BLINK_OFF;
 1907              	 .loc 4 632 0
 1908 00f0 40F20003 	 movw r3,#:lower16:.LANCHOR5
 1909 00f4 C0F20003 	 movt r3,#:upper16:.LANCHOR5
 1910 00f8 4FF00202 	 mov r2,#2
 1911 00fc 1A60     	 str r2,[r3,#0]
 633:src/MightyBoard/Motherboard/Motherboard.cc **** 			blink_ovfs_remaining = OVFS_OFF;
 1912              	 .loc 4 633 0
 1913 00fe 40F20003 	 movw r3,#:lower16:.LANCHOR13
 1914 0102 C0F20003 	 movt r3,#:upper16:.LANCHOR13
 1915 0106 4FF01202 	 mov r2,#18
 1916 010a 1A60     	 str r2,[r3,#0]
 634:src/MightyBoard/Motherboard/Motherboard.cc **** 			DEBUG_PIN.setValue(false);
 1917              	 .loc 4 634 0
 1918 010c 09A8     	 add r0,sp,#36
 1919 010e 4FF0FF01 	 mov r1,#255
 1920 0112 FFF7FEFF 	 bl _ZN7LPCPortC1Eh
 1921 0116 07A8     	 add r0,sp,#28
 1922 0118 09A9     	 add r1,sp,#36
 1923 011a 4FF0FF02 	 mov r2,#255
 1924 011e FFF7FEFF 	 bl _ZN3PinC1ERK7LPCPorth
 1925              	.LVL94:
 1926              	.LBB271:
 1927              	.LBB272:
  35:src/MightyBoard/shared/Pin.hh **** 		if (is_null)
 1928              	 .loc 5 35 0
 1929 0122 9DF81D30 	 ldrb r3,[sp,#29]
 1930 0126 002B     	 cmp r3,#0
 1931 0128 7ED1     	 bne .L111
 1932              	 .loc 5 48 0
 1933 012a 9DF81E30 	 ldrb r3,[sp,#30]
 1934 012e 9DF81C00 	 ldrb r0,[sp,#28]
 1935 0132 4FF00101 	 mov r1,#1
 1936 0136 01FA03F1 	 lsl r1,r1,r3
 1937 013a FFF7FEFF 	 bl GPIO_ClearValue
 1938 013e 73E0     	 b .L111
 1939              	.LVL95:
 1940              	.L112:
 1941              	.LBE272:
 1942              	.LBE271:
 635:src/MightyBoard/Motherboard/Motherboard.cc **** 		} else if (blink_state == BLINK_OFF) {
 1943              	 .loc 4 635 0
 1944 0140 022B     	 cmp r3,#2
 1945 0142 42D1     	 bne .L113
 636:src/MightyBoard/Motherboard/Motherboard.cc **** 			if (blinked_so_far >= blink_count) {
 1946              	 .loc 4 636 0
 1947 0144 40F20003 	 movw r3,#:lower16:.LANCHOR6
 1948 0148 C0F20003 	 movt r3,#:upper16:.LANCHOR6
 1949 014c 1A78     	 ldrb r2,[r3,#0]
 1950 014e 40F20003 	 movw r3,#:lower16:.LANCHOR14
 1951 0152 C0F20003 	 movt r3,#:upper16:.LANCHOR14
 1952 0156 1B68     	 ldr r3,[r3,#0]
 1953 0158 9A42     	 cmp r2,r3
 1954 015a 0EDC     	 bgt .L114
 637:src/MightyBoard/Motherboard/Motherboard.cc **** 				blink_state = BLINK_PAUSE;
 1955              	 .loc 4 637 0
 1956 015c 40F20003 	 movw r3,#:lower16:.LANCHOR5
 1957 0160 C0F20003 	 movt r3,#:upper16:.LANCHOR5
 1958 0164 4FF00302 	 mov r2,#3
 1959 0168 1A60     	 str r2,[r3,#0]
 638:src/MightyBoard/Motherboard/Motherboard.cc **** 				blink_ovfs_remaining = OVFS_PAUSE;
 1960              	 .loc 4 638 0
 1961 016a 40F20003 	 movw r3,#:lower16:.LANCHOR13
 1962 016e C0F20003 	 movt r3,#:upper16:.LANCHOR13
 1963 0172 4FF05002 	 mov r2,#80
 1964 0176 1A60     	 str r2,[r3,#0]
 1965 0178 56E0     	 b .L111
 1966              	.L114:
 640:src/MightyBoard/Motherboard/Motherboard.cc **** 				blink_state = BLINK_ON;
 1967              	 .loc 4 640 0
 1968 017a 40F20003 	 movw r3,#:lower16:.LANCHOR5
 1969 017e C0F20003 	 movt r3,#:upper16:.LANCHOR5
 1970 0182 4FF00102 	 mov r2,#1
 1971 0186 1A60     	 str r2,[r3,#0]
 641:src/MightyBoard/Motherboard/Motherboard.cc **** 				blink_ovfs_remaining = OVFS_ON;
 1972              	 .loc 4 641 0
 1973 0188 40F20003 	 movw r3,#:lower16:.LANCHOR13
 1974 018c C0F20003 	 movt r3,#:upper16:.LANCHOR13
 1975 0190 4FF01202 	 mov r2,#18
 1976 0194 1A60     	 str r2,[r3,#0]
 642:src/MightyBoard/Motherboard/Motherboard.cc **** 				DEBUG_PIN.setValue(true);
 1977              	 .loc 4 642 0
 1978 0196 0CA8     	 add r0,sp,#48
 1979 0198 4FF0FF01 	 mov r1,#255
 1980 019c FFF7FEFF 	 bl _ZN7LPCPortC1Eh
 1981 01a0 0AA8     	 add r0,sp,#40
 1982 01a2 0CA9     	 add r1,sp,#48
 1983 01a4 4FF0FF02 	 mov r2,#255
 1984 01a8 FFF7FEFF 	 bl _ZN3PinC1ERK7LPCPorth
 1985              	.LVL96:
 1986              	.LBB273:
 1987              	.LBB274:
  35:src/MightyBoard/shared/Pin.hh **** 		if (is_null)
 1988              	 .loc 5 35 0
 1989 01ac 9DF82930 	 ldrb r3,[sp,#41]
 1990 01b0 002B     	 cmp r3,#0
 1991 01b2 39D1     	 bne .L111
  44:src/MightyBoard/shared/Pin.hh **** 			GPIO_SetValue(port_base, _BV(pin_index));
 1992              	 .loc 5 44 0
 1993 01b4 9DF82A30 	 ldrb r3,[sp,#42]
 1994 01b8 9DF82800 	 ldrb r0,[sp,#40]
 1995 01bc 4FF00101 	 mov r1,#1
 1996 01c0 01FA03F1 	 lsl r1,r1,r3
 1997 01c4 FFF7FEFF 	 bl GPIO_SetValue
 1998 01c8 2EE0     	 b .L111
 1999              	.LVL97:
 2000              	.L113:
 2001              	.LBE274:
 2002              	.LBE273:
 644:src/MightyBoard/Motherboard/Motherboard.cc **** 		} else if (blink_state == BLINK_PAUSE) {
 2003              	 .loc 4 644 0
 2004 01ca 032B     	 cmp r3,#3
 2005 01cc 2CD1     	 bne .L111
 645:src/MightyBoard/Motherboard/Motherboard.cc **** 			blinked_so_far = 0;
 2006              	 .loc 4 645 0
 2007 01ce 40F20003 	 movw r3,#:lower16:.LANCHOR14
 2008 01d2 C0F20003 	 movt r3,#:upper16:.LANCHOR14
 2009 01d6 4FF00002 	 mov r2,#0
 2010 01da 1A60     	 str r2,[r3,#0]
 646:src/MightyBoard/Motherboard/Motherboard.cc **** 			blink_state = BLINK_ON;
 2011              	 .loc 4 646 0
 2012 01dc 40F20003 	 movw r3,#:lower16:.LANCHOR5
 2013 01e0 C0F20003 	 movt r3,#:upper16:.LANCHOR5
 2014 01e4 4FF00102 	 mov r2,#1
 2015 01e8 1A60     	 str r2,[r3,#0]
 647:src/MightyBoard/Motherboard/Motherboard.cc **** 			blink_ovfs_remaining = OVFS_ON;
 2016              	 .loc 4 647 0
 2017 01ea 40F20003 	 movw r3,#:lower16:.LANCHOR13
 2018 01ee C0F20003 	 movt r3,#:upper16:.LANCHOR13
 2019 01f2 4FF01202 	 mov r2,#18
 2020 01f6 1A60     	 str r2,[r3,#0]
 648:src/MightyBoard/Motherboard/Motherboard.cc **** 			DEBUG_PIN.setValue(true);
 2021              	 .loc 4 648 0
 2022 01f8 0FA8     	 add r0,sp,#60
 2023 01fa 4FF0FF01 	 mov r1,#255
 2024 01fe FFF7FEFF 	 bl _ZN7LPCPortC1Eh
 2025 0202 0DA8     	 add r0,sp,#52
 2026 0204 0FA9     	 add r1,sp,#60
 2027 0206 4FF0FF02 	 mov r2,#255
 2028 020a FFF7FEFF 	 bl _ZN3PinC1ERK7LPCPorth
 2029              	.LVL98:
 2030              	.LBB275:
 2031              	.LBB276:
  35:src/MightyBoard/shared/Pin.hh **** 		if (is_null)
 2032              	 .loc 5 35 0
 2033 020e 9DF83530 	 ldrb r3,[sp,#53]
 2034 0212 4BB9     	 cbnz r3,.L111
  44:src/MightyBoard/shared/Pin.hh **** 			GPIO_SetValue(port_base, _BV(pin_index));
 2035              	 .loc 5 44 0
 2036 0214 9DF83630 	 ldrb r3,[sp,#54]
 2037 0218 9DF83400 	 ldrb r0,[sp,#52]
 2038 021c 4FF00101 	 mov r1,#1
 2039 0220 01FA03F1 	 lsl r1,r1,r3
 2040 0224 FFF7FEFF 	 bl GPIO_SetValue
 2041              	.LVL99:
 2042              	.L111:
 2043              	.LBE276:
 2044              	.LBE275:
 652:src/MightyBoard/Motherboard/Motherboard.cc **** 	if( interface_ovfs_remaining > 0){
 2045              	 .loc 4 652 0
 2046 0228 40F20003 	 movw r3,#:lower16:.LANCHOR15
 2047 022c C0F20003 	 movt r3,#:upper16:.LANCHOR15
 2048 0230 1B68     	 ldr r3,[r3,#0]
 2049 0232 002B     	 cmp r3,#0
 2050 0234 07DD     	 ble .L115
 653:src/MightyBoard/Motherboard/Motherboard.cc **** 		interface_ovfs_remaining--;
 2051              	 .loc 4 653 0
 2052 0236 40F20002 	 movw r2,#:lower16:.LANCHOR15
 2053 023a C0F20002 	 movt r2,#:upper16:.LANCHOR15
 2054 023e 03F1FF33 	 add r3,r3,#-1
 2055 0242 1360     	 str r3,[r2,#0]
 2056 0244 2BE0     	 b .L106
 2057              	.L115:
 655:src/MightyBoard/Motherboard/Motherboard.cc **** 		if (interface_blink_state == BLINK_ON) {
 2058              	 .loc 4 655 0
 2059 0246 40F20003 	 movw r3,#:lower16:.LANCHOR7
 2060 024a C0F20003 	 movt r3,#:upper16:.LANCHOR7
 2061 024e 1B68     	 ldr r3,[r3,#0]
 2062 0250 012B     	 cmp r3,#1
 2063 0252 11D1     	 bne .L116
 656:src/MightyBoard/Motherboard/Motherboard.cc **** 			interface_blink_state = BLINK_OFF;
 2064              	 .loc 4 656 0
 2065 0254 40F20003 	 movw r3,#:lower16:.LANCHOR7
 2066 0258 C0F20003 	 movt r3,#:upper16:.LANCHOR7
 2067 025c 4FF00202 	 mov r2,#2
 2068 0260 1A60     	 str r2,[r3,#0]
 657:src/MightyBoard/Motherboard/Motherboard.cc **** 			interface_ovfs_remaining = interface_on_time;
 2069              	 .loc 4 657 0
 2070 0262 40F20003 	 movw r3,#:lower16:.LANCHOR15
 2071 0266 C0F20003 	 movt r3,#:upper16:.LANCHOR15
 2072 026a 40F20002 	 movw r2,#:lower16:.LANCHOR8
 2073 026e C0F20002 	 movt r2,#:upper16:.LANCHOR8
 2074 0272 1278     	 ldrb r2,[r2,#0]
 2075 0274 1A60     	 str r2,[r3,#0]
 2076 0276 12E0     	 b .L106
 2077              	.L116:
 659:src/MightyBoard/Motherboard/Motherboard.cc **** 		} else if (interface_blink_state == BLINK_OFF) {
 2078              	 .loc 4 659 0
 2079 0278 022B     	 cmp r3,#2
 2080 027a 10D1     	 bne .L106
 660:src/MightyBoard/Motherboard/Motherboard.cc **** 			interface_blink_state = BLINK_ON;
 2081              	 .loc 4 660 0
 2082 027c 40F20003 	 movw r3,#:lower16:.LANCHOR7
 2083 0280 C0F20003 	 movt r3,#:upper16:.LANCHOR7
 2084 0284 4FF00102 	 mov r2,#1
 2085 0288 1A60     	 str r2,[r3,#0]
 661:src/MightyBoard/Motherboard/Motherboard.cc **** 			interface_ovfs_remaining = interface_off_time;
 2086              	 .loc 4 661 0
 2087 028a 40F20003 	 movw r3,#:lower16:.LANCHOR15
 2088 028e C0F20003 	 movt r3,#:upper16:.LANCHOR15
 2089 0292 40F20002 	 movw r2,#:lower16:.LANCHOR9
 2090 0296 C0F20002 	 movt r2,#:upper16:.LANCHOR9
 2091 029a 1278     	 ldrb r2,[r2,#0]
 2092 029c 1A60     	 str r2,[r3,#0]
 2093              	.L106:
 673:src/MightyBoard/Motherboard/Motherboard.cc **** }
 2094              	 .loc 4 673 0
 2095 029e 10B0     	 add sp,sp,#64
 2096 02a0 10BD     	 pop {r4,pc}
 2097              	 .cfi_endproc
 2098              	.LFE158:
 2100 02a2 00BF     	 .section .text.TIMER3_IRQHandler,"ax",%progbits
 2101              	 .align 2
 2102              	 .global TIMER3_IRQHandler
 2103              	 .thumb
 2104              	 .thumb_func
 2106              	TIMER3_IRQHandler:
 2107              	.LFB159:
 678:src/MightyBoard/Motherboard/Motherboard.cc **** extern "C" void TIMER3_IRQHandler (void){
 2108              	 .loc 4 678 0
 2109              	 .cfi_startproc
 2110              	 
 2111              	 
 2112 0000 10B5     	 push {r4,lr}
 2113              	.LCFI23:
 2114              	 .cfi_def_cfa_offset 8
 2115              	 .cfi_offset 14,-4
 2116              	 .cfi_offset 4,-8
 2117 0002 86B0     	 sub sp,sp,#24
 2118              	.LCFI24:
 2119              	 .cfi_def_cfa_offset 32
 679:src/MightyBoard/Motherboard/Motherboard.cc **** 	DEBUG_LED3.setDirection(true);
 2120              	 .loc 4 679 0
 2121 0004 40F20004 	 movw r4,#:lower16:.LANCHOR3
 2122 0008 C0F20004 	 movt r4,#:upper16:.LANCHOR3
 2123 000c 6846     	 mov r0,sp
 2124 000e 2146     	 mov r1,r4
 2125 0010 4FF01502 	 mov r2,#21
 2126 0014 FFF7FEFF 	 bl _ZN3PinC1ERK7LPCPorth
 2127 0018 6846     	 mov r0,sp
 2128 001a 4FF00101 	 mov r1,#1
 2129 001e FFF7FEFF 	 bl _ZNK3Pin12setDirectionEb
 680:src/MightyBoard/Motherboard/Motherboard.cc **** 	DEBUG_LED3.setValue(true);
 2130              	 .loc 4 680 0
 2131 0022 02A8     	 add r0,sp,#8
 2132 0024 2146     	 mov r1,r4
 2133 0026 4FF01502 	 mov r2,#21
 2134 002a FFF7FEFF 	 bl _ZN3PinC1ERK7LPCPorth
 2135              	.LVL100:
 2136              	.LBB281:
 2137              	.LBB282:
  35:src/MightyBoard/shared/Pin.hh **** 		if (is_null)
 2138              	 .loc 5 35 0
 2139 002e 9DF80930 	 ldrb r3,[sp,#9]
 2140 0032 4BB9     	 cbnz r3,.L118
  44:src/MightyBoard/shared/Pin.hh **** 			GPIO_SetValue(port_base, _BV(pin_index));
 2141              	 .loc 5 44 0
 2142 0034 9DF80A30 	 ldrb r3,[sp,#10]
 2143 0038 9DF80800 	 ldrb r0,[sp,#8]
 2144 003c 4FF00101 	 mov r1,#1
 2145 0040 01FA03F1 	 lsl r1,r1,r3
 2146 0044 FFF7FEFF 	 bl GPIO_SetValue
 2147              	.L118:
 2148              	.LBE282:
 2149              	.LBE281:
 683:src/MightyBoard/Motherboard/Motherboard.cc **** 	TIM_ClearIntPending(LPC_TIM3,TIM_MR0_INT);
 2150              	 .loc 4 683 0
 2151 0048 4FF48040 	 mov r0,#16384
 2152 004c C4F20900 	 movt r0,16393
 2153 0050 4FF00001 	 mov r1,#0
 2154 0054 FFF7FEFF 	 bl TIM_ClearIntPending
 684:src/MightyBoard/Motherboard/Motherboard.cc **** 	Piezo::doInterrupt();
 2155              	 .loc 4 684 0
 2156 0058 FFF7FEFF 	 bl _ZN5Piezo11doInterruptEv
 694:src/MightyBoard/Motherboard/Motherboard.cc **** 	DEBUG_LED3.setValue(false);
 2157              	 .loc 4 694 0
 2158 005c 04A8     	 add r0,sp,#16
 2159 005e 40F20001 	 movw r1,#:lower16:.LANCHOR3
 2160 0062 C0F20001 	 movt r1,#:upper16:.LANCHOR3
 2161 0066 4FF01502 	 mov r2,#21
 2162 006a FFF7FEFF 	 bl _ZN3PinC1ERK7LPCPorth
 2163              	.LVL101:
 2164              	.LBB283:
 2165              	.LBB284:
  35:src/MightyBoard/shared/Pin.hh **** 		if (is_null)
 2166              	 .loc 5 35 0
 2167 006e 9DF81130 	 ldrb r3,[sp,#17]
 2168 0072 4BB9     	 cbnz r3,.L117
 2169              	 .loc 5 48 0
 2170 0074 9DF81230 	 ldrb r3,[sp,#18]
 2171 0078 9DF81000 	 ldrb r0,[sp,#16]
 2172 007c 4FF00101 	 mov r1,#1
 2173 0080 01FA03F1 	 lsl r1,r1,r3
 2174 0084 FFF7FEFF 	 bl GPIO_ClearValue
 2175              	.L117:
 2176              	.LBE284:
 2177              	.LBE283:
 695:src/MightyBoard/Motherboard/Motherboard.cc **** }
 2178              	 .loc 4 695 0
 2179 0088 06B0     	 add sp,sp,#24
 2180 008a 10BD     	 pop {r4,pc}
 2181              	 .cfi_endproc
 2182              	.LFE159:
 2184              	 .section .text._Z9pwmHBP_Onb,"ax",%progbits
 2185              	 .align 2
 2186              	 .global _Z9pwmHBP_Onb
 2187              	 .thumb
 2188              	 .thumb_func
 2190              	_Z9pwmHBP_Onb:
 2191              	.LFB160:
 698:src/MightyBoard/Motherboard/Motherboard.cc **** void pwmHBP_On(bool on) {
 2192              	 .loc 4 698 0
 2193              	 .cfi_startproc
 2194              	 
 2195              	 
 2196              	 
 2197              	.LVL102:
 704:src/MightyBoard/Motherboard/Motherboard.cc **** }
 2198              	 .loc 4 704 0
 2199 0000 7047     	 bx lr
 2200              	 .cfi_endproc
 2201              	.LFE160:
 2203 0002 00BF     	 .section .text._ZN11Motherboard16setUsingPlatformEb,"ax",%progbits
 2204              	 .align 2
 2205              	 .global _ZN11Motherboard16setUsingPlatformEb
 2206              	 .thumb
 2207              	 .thumb_func
 2209              	_ZN11Motherboard16setUsingPlatformEb:
 2210              	.LFB161:
 707:src/MightyBoard/Motherboard/Motherboard.cc **** void Motherboard::setUsingPlatform(bool is_using) {
 2211              	 .loc 4 707 0
 2212              	 .cfi_startproc
 2213              	 
 2214              	 
 2215              	 
 2216              	.LVL103:
 708:src/MightyBoard/Motherboard/Motherboard.cc ****   using_platform = is_using;
 2217              	 .loc 4 708 0
 2218 0000 80F89812 	 strb r1,[r0,#664]
 709:src/MightyBoard/Motherboard/Motherboard.cc **** }
 2219              	 .loc 4 709 0
 2220 0004 7047     	 bx lr
 2221              	 .cfi_endproc
 2222              	.LFE161:
 2224 0006 00BF     	 .section .text._ZN11Motherboard8setValveEb,"ax",%progbits
 2225              	 .align 2
 2226              	 .global _ZN11Motherboard8setValveEb
 2227              	 .thumb
 2228              	 .thumb_func
 2230              	_ZN11Motherboard8setValveEb:
 2231              	.LFB162:
 711:src/MightyBoard/Motherboard/Motherboard.cc **** void Motherboard::setValve(bool on) {
 2232              	 .loc 4 711 0
 2233              	 .cfi_startproc
 2234              	 
 2235              	 
 2236              	.LVL104:
 2237 0000 10B5     	 push {r4,lr}
 2238              	.LCFI25:
 2239              	 .cfi_def_cfa_offset 8
 2240              	 .cfi_offset 14,-4
 2241              	 .cfi_offset 4,-8
 2242 0002 86B0     	 sub sp,sp,#24
 2243              	.LCFI26:
 2244              	 .cfi_def_cfa_offset 32
 2245 0004 0C46     	 mov r4,r1
 713:src/MightyBoard/Motherboard/Motherboard.cc **** 		setUsingPlatform(false);
 2246              	 .loc 4 713 0
 2247 0006 4FF00001 	 mov r1,#0
 2248              	.LVL105:
 2249 000a FFF7FEFF 	 bl _ZN11Motherboard16setUsingPlatformEb
 2250              	.LVL106:
 715:src/MightyBoard/Motherboard/Motherboard.cc **** 		EXTRA_FET.setDirection(true);
 2251              	 .loc 4 715 0
 2252 000e 02A8     	 add r0,sp,#8
 2253 0010 4FF0FF01 	 mov r1,#255
 2254 0014 FFF7FEFF 	 bl _ZN7LPCPortC1Eh
 2255 0018 6846     	 mov r0,sp
 2256 001a 02A9     	 add r1,sp,#8
 2257 001c 4FF0FF02 	 mov r2,#255
 2258 0020 FFF7FEFF 	 bl _ZN3PinC1ERK7LPCPorth
 2259 0024 6846     	 mov r0,sp
 2260 0026 4FF00101 	 mov r1,#1
 2261 002a FFF7FEFF 	 bl _ZNK3Pin12setDirectionEb
 716:src/MightyBoard/Motherboard/Motherboard.cc **** 		EXTRA_FET.setValue(on);
 2262              	 .loc 4 716 0
 2263 002e 05A8     	 add r0,sp,#20
 2264 0030 4FF0FF01 	 mov r1,#255
 2265 0034 FFF7FEFF 	 bl _ZN7LPCPortC1Eh
 2266 0038 03A8     	 add r0,sp,#12
 2267 003a 05A9     	 add r1,sp,#20
 2268 003c 4FF0FF02 	 mov r2,#255
 2269 0040 FFF7FEFF 	 bl _ZN3PinC1ERK7LPCPorth
 2270              	.LVL107:
 2271              	.LBB287:
 2272              	.LBB288:
  35:src/MightyBoard/shared/Pin.hh **** 		if (is_null)
 2273              	 .loc 5 35 0
 2274 0044 9DF80D30 	 ldrb r3,[sp,#13]
 2275 0048 ABB9     	 cbnz r3,.L122
  41:src/MightyBoard/shared/Pin.hh **** 		if (on) {
 2276              	 .loc 5 41 0
 2277 004a 54B1     	 cbz r4,.L124
  44:src/MightyBoard/shared/Pin.hh **** 			GPIO_SetValue(port_base, _BV(pin_index));
 2278              	 .loc 5 44 0
 2279 004c 9DF80E30 	 ldrb r3,[sp,#14]
 2280 0050 9DF80C00 	 ldrb r0,[sp,#12]
 2281 0054 4FF00101 	 mov r1,#1
 2282 0058 01FA03F1 	 lsl r1,r1,r3
 2283 005c FFF7FEFF 	 bl GPIO_SetValue
 2284 0060 09E0     	 b .L122
 2285              	.L124:
 2286              	 .loc 5 48 0
 2287 0062 9DF80E30 	 ldrb r3,[sp,#14]
 2288 0066 9DF80C00 	 ldrb r0,[sp,#12]
 2289 006a 4FF00101 	 mov r1,#1
 2290 006e 01FA03F1 	 lsl r1,r1,r3
 2291 0072 FFF7FEFF 	 bl GPIO_ClearValue
 2292              	.L122:
 2293              	.LBE288:
 2294              	.LBE287:
 718:src/MightyBoard/Motherboard/Motherboard.cc **** }
 2295              	 .loc 4 718 0
 2296 0076 06B0     	 add sp,sp,#24
 2297 0078 10BD     	 pop {r4,pc}
 2298              	 .cfi_endproc
 2299              	.LFE162:
 2301 007a 00BF     	 .section .text._GLOBAL__sub_I__ZN11Motherboard11motherboardE,"ax",%progbits
 2302              	 .align 2
 2303              	 .thumb
 2304              	 .thumb_func
 2306              	_GLOBAL__sub_I__ZN11Motherboard11motherboardE:
 2307              	.LFB168:
 2308              	 .loc 4 728 0
 2309              	 .cfi_startproc
 2310              	 
 2311              	 
 2312 0000 10B5     	 push {r4,lr}
 2313              	.LCFI27:
 2314              	 .cfi_def_cfa_offset 8
 2315              	 .cfi_offset 14,-4
 2316              	 .cfi_offset 4,-8
 2317              	.LVL108:
 2318              	.LBB291:
 2319              	.LBB292:
 2320              	 .file 8 "src/MightyBoard/shared/LPCPort.hh"
   1:src/MightyBoard/shared/LPCPort.hh **** /*
   2:src/MightyBoard/shared/LPCPort.hh **** * Copyright 2010 by Adam Mayer	 <adam@makerbot.com>
   3:src/MightyBoard/shared/LPCPort.hh **** *
   4:src/MightyBoard/shared/LPCPort.hh **** * This program is free software: you can redistribute it and/or modify
   5:src/MightyBoard/shared/LPCPort.hh **** * it under the terms of the GNU General Public License as published by
   6:src/MightyBoard/shared/LPCPort.hh **** * the Free Software Foundation, either version 3 of the License, or
   7:src/MightyBoard/shared/LPCPort.hh **** * (at your option) any later version.
   8:src/MightyBoard/shared/LPCPort.hh **** *
   9:src/MightyBoard/shared/LPCPort.hh **** * This program is distributed in the hope that it will be useful,
  10:src/MightyBoard/shared/LPCPort.hh **** * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:src/MightyBoard/shared/LPCPort.hh **** * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:src/MightyBoard/shared/LPCPort.hh **** * GNU General Public License for more details.
  13:src/MightyBoard/shared/LPCPort.hh **** *
  14:src/MightyBoard/shared/LPCPort.hh **** * You should have received a copy of the GNU General Public License
  15:src/MightyBoard/shared/LPCPort.hh **** * along with this program.  If not, see <http://www.gnu.org/licenses/>
  16:src/MightyBoard/shared/LPCPort.hh **** */
  17:src/MightyBoard/shared/LPCPort.hh **** 
  18:src/MightyBoard/shared/LPCPort.hh **** #ifndef SHARED_AVR_PORT_HH_
  19:src/MightyBoard/shared/LPCPort.hh **** #define SHARED_AVR_PORT_HH_
  20:src/MightyBoard/shared/LPCPort.hh **** 
  21:src/MightyBoard/shared/LPCPort.hh **** #define __STDC_LIMIT_MACROS
  22:src/MightyBoard/shared/LPCPort.hh **** //#include <stdint.h>
  23:src/MightyBoard/shared/LPCPort.hh **** //#include <util/atomic.h>
  24:src/MightyBoard/shared/LPCPort.hh **** 
  25:src/MightyBoard/shared/LPCPort.hh **** extern "C" {
  26:src/MightyBoard/shared/LPCPort.hh **** 	#include "lpc_types.h"
  27:src/MightyBoard/shared/LPCPort.hh **** 	#include "lpc17xx_gpio.h"
  28:src/MightyBoard/shared/LPCPort.hh **** }
  29:src/MightyBoard/shared/LPCPort.hh **** 
  30:src/MightyBoard/shared/LPCPort.hh **** 
  31:src/MightyBoard/shared/LPCPort.hh **** #define NULL_PORT 0xff
  32:src/MightyBoard/shared/LPCPort.hh **** 
  33:src/MightyBoard/shared/LPCPort.hh **** class LPCPort {
  34:src/MightyBoard/shared/LPCPort.hh **** private:
  35:src/MightyBoard/shared/LPCPort.hh **** 	const uint8_t port_base;
  36:src/MightyBoard/shared/LPCPort.hh **** 	friend class Pin;
  37:src/MightyBoard/shared/LPCPort.hh **** public:
  38:src/MightyBoard/shared/LPCPort.hh **** 	LPCPort();
  39:src/MightyBoard/shared/LPCPort.hh **** 	LPCPort(uint8_t port_base_in);
  40:src/MightyBoard/shared/LPCPort.hh **** 	bool isNull() const;
  41:src/MightyBoard/shared/LPCPort.hh **** 	void setPinDirectionOut(uint8_t pin_index) const;
  42:src/MightyBoard/shared/LPCPort.hh **** 	void setPinDirectionIn(uint8_t pin_index) const;
  43:src/MightyBoard/shared/LPCPort.hh **** 	bool getPin(uint8_t pin_index) const;
  44:src/MightyBoard/shared/LPCPort.hh **** 	void setPinOn(uint8_t pin_index) const;
  45:src/MightyBoard/shared/LPCPort.hh **** 	void setPinOff(uint8_t pin_index) const;
  46:src/MightyBoard/shared/LPCPort.hh **** };
  47:src/MightyBoard/shared/LPCPort.hh **** 
  48:src/MightyBoard/shared/LPCPort.hh **** 
  49:src/MightyBoard/shared/LPCPort.hh **** const LPCPort Port0(0);
 2321              	 .loc 8 49 0
 2322 0002 40F20000 	 movw r0,#:lower16:.LANCHOR16
 2323 0006 C0F20000 	 movt r0,#:upper16:.LANCHOR16
 2324 000a 4FF00001 	 mov r1,#0
 2325 000e FFF7FEFF 	 bl _ZN7LPCPortC1Eh
  50:src/MightyBoard/shared/LPCPort.hh **** const LPCPort Port1(1);
 2326              	 .loc 8 50 0
 2327 0012 40F20000 	 movw r0,#:lower16:.LANCHOR3
 2328 0016 C0F20000 	 movt r0,#:upper16:.LANCHOR3
 2329 001a 4FF00101 	 mov r1,#1
 2330 001e FFF7FEFF 	 bl _ZN7LPCPortC1Eh
  51:src/MightyBoard/shared/LPCPort.hh **** const LPCPort Port2(2);
 2331              	 .loc 8 51 0
 2332 0022 40F20000 	 movw r0,#:lower16:.LANCHOR1
 2333 0026 C0F20000 	 movt r0,#:upper16:.LANCHOR1
 2334 002a 4FF00201 	 mov r1,#2
 2335 002e FFF7FEFF 	 bl _ZN7LPCPortC1Eh
  52:src/MightyBoard/shared/LPCPort.hh **** const LPCPort Port3(3);
 2336              	 .loc 8 52 0
 2337 0032 40F20000 	 movw r0,#:lower16:.LANCHOR17
 2338 0036 C0F20000 	 movt r0,#:upper16:.LANCHOR17
 2339 003a 4FF00301 	 mov r1,#3
 2340 003e FFF7FEFF 	 bl _ZN7LPCPortC1Eh
  53:src/MightyBoard/shared/LPCPort.hh **** const LPCPort Port4(4);
 2341              	 .loc 8 53 0
 2342 0042 40F20000 	 movw r0,#:lower16:.LANCHOR18
 2343 0046 C0F20000 	 movt r0,#:upper16:.LANCHOR18
 2344 004a 4FF00401 	 mov r1,#4
 2345 004e FFF7FEFF 	 bl _ZN7LPCPortC1Eh
  54:src/MightyBoard/shared/LPCPort.hh **** 
  55:src/MightyBoard/shared/LPCPort.hh **** const LPCPort NullPort(0xff);
 2346              	 .loc 8 55 0
 2347 0052 40F20004 	 movw r4,#:lower16:.LANCHOR19
 2348 0056 C0F20004 	 movt r4,#:upper16:.LANCHOR19
 2349 005a 2046     	 mov r0,r4
 2350 005c 4FF0FF01 	 mov r1,#255
 2351 0060 FFF7FEFF 	 bl _ZN7LPCPortC1Eh
  49:src/MightyBoard/shared/Pin.hh **** 		}
  50:src/MightyBoard/shared/Pin.hh **** 		// SREG = oldSREG;
  51:src/MightyBoard/shared/Pin.hh **** 	};
  52:src/MightyBoard/shared/Pin.hh **** 
  53:src/MightyBoard/shared/Pin.hh **** 	void /*Pin::*/setValueOn() const {
  54:src/MightyBoard/shared/Pin.hh **** 		if (is_null)
  55:src/MightyBoard/shared/Pin.hh **** 		 	return;
  56:src/MightyBoard/shared/Pin.hh **** 		// uint8_t oldSREG = SREG;
  57:src/MightyBoard/shared/Pin.hh **** 		// cli();
  58:src/MightyBoard/shared/Pin.hh **** //		PORTx |= pin_mask;
  59:src/MightyBoard/shared/Pin.hh **** 		GPIO_SetValue(port_base, _BV(pin_index));
  60:src/MightyBoard/shared/Pin.hh **** 		// SREG = oldSREG;
  61:src/MightyBoard/shared/Pin.hh **** 	};
  62:src/MightyBoard/shared/Pin.hh **** 
  63:src/MightyBoard/shared/Pin.hh **** 	void /*Pin::*/setValueOff() const {
  64:src/MightyBoard/shared/Pin.hh **** 		// if (is_null)
  65:src/MightyBoard/shared/Pin.hh **** 		// 	return;
  66:src/MightyBoard/shared/Pin.hh **** 		// uint8_t oldSREG = SREG;
  67:src/MightyBoard/shared/Pin.hh **** 		// cli();
  68:src/MightyBoard/shared/Pin.hh **** //		PORTx &= pin_mask_inverted;
  69:src/MightyBoard/shared/Pin.hh **** 		GPIO_ClearValue(port_base, _BV(pin_index));
  70:src/MightyBoard/shared/Pin.hh **** 		// SREG = oldSREG;
  71:src/MightyBoard/shared/Pin.hh **** 	};
  72:src/MightyBoard/shared/Pin.hh **** 	// currently not used:
  73:src/MightyBoard/shared/Pin.hh **** 	//const uint8_t getPinIndex() const { return pin_index; }
  74:src/MightyBoard/shared/Pin.hh **** };
  75:src/MightyBoard/shared/Pin.hh **** 
  76:src/MightyBoard/shared/Pin.hh **** static const Pin NullPin(NullPort, 0);
 2352              	 .loc 5 76 0
 2353 0064 40F20000 	 movw r0,#:lower16:.LANCHOR20
 2354 0068 C0F20000 	 movt r0,#:upper16:.LANCHOR20
 2355 006c 2146     	 mov r1,r4
 2356 006e 4FF00002 	 mov r2,#0
 2357 0072 FFF7FEFF 	 bl _ZN3PinC1ERK7LPCPorth
  51:src/MightyBoard/Motherboard/Motherboard.cc **** Motherboard Motherboard::motherboard;
 2358              	 .loc 4 51 0
 2359 0076 40F20004 	 movw r4,#:lower16:.LANCHOR4
 2360 007a C0F20004 	 movt r4,#:upper16:.LANCHOR4
 2361 007e 2046     	 mov r0,r4
 2362 0080 FFF7FEFF 	 bl _ZN11MotherboardC1Ev
 2363 0084 2046     	 mov r0,r4
 2364 0086 40F20001 	 movw r1,#:lower16:_ZN11MotherboardD1Ev
 2365 008a C0F20001 	 movt r1,#:upper16:_ZN11MotherboardD1Ev
 2366 008e 40F20002 	 movw r2,#:lower16:__dso_handle
 2367 0092 C0F20002 	 movt r2,#:upper16:__dso_handle
 2368 0096 FFF7FEFF 	 bl __aeabi_atexit
 2369              	.LBE292:
 2370              	.LBE291:
 2371              	 .loc 4 728 0
 2372 009a 10BD     	 pop {r4,pc}
 2373              	 .cfi_endproc
 2374              	.LFE168:
 2376              	 .section .init_array,"aw",%init_array
 2377              	 .align 2
 2378 0000 00000000 	 .word _GLOBAL__sub_I__ZN11Motherboard11motherboardE(target1)
 2379              	 .global _ZTV27BuildPlatformHeatingElement
 2380              	 .global blink_overflow_counter
 2381              	 .global interface_ovfs_remaining
 2382              	 .global blinked_so_far
 2383              	 .global blink_ovfs_remaining
 2384              	 .global interface_blink_state
 2385              	 .global blink_state
 2386              	 .global interface_off_time
 2387              	 .global interface_on_time
 2388              	 .global blink_count
 2389              	 .global loop3
 2390              	 .global loop2
 2391              	 .global loop1
 2392              	 .global loop0
 2393              	 .global led_toggle3
 2394              	 .global led_toggle2
 2395              	 .global led_toggle1
 2396              	 .global led_toggle0
 2397              	 .global triggered
 2398              	 .global stagger
 2399              	 .global connectionsErrorTriggered
 2400              	 .global _ZN11Motherboard11motherboardE
 2401              	 .weak _ZTV14HeatingElement
 2402              	 .section .rodata._ZTV14HeatingElement,"aG",%progbits,_ZTV14HeatingElement,comdat
 2403              	 .align 3
 2406              	_ZTV14HeatingElement:
 2407 0000 00000000 	 .word 0
 2408 0004 00000000 	 .word 0
 2409 0008 00000000 	 .word _ZN14HeatingElementD1Ev
 2410 000c 00000000 	 .word _ZN14HeatingElementD0Ev
 2411 0010 00000000 	 .word __cxa_pure_virtual
 2412              	 .weak _ZGVZN4UART11getHostUARTEvE8hostUART
 2413 0014 00000000 	 .section .bss._ZGVZN4UART11getHostUARTEvE8hostUART,"awG",%nobits,_ZGVZN4UART11getHostUARTEvE8hostUART,comdat
 2414              	 .align 2
 2417              	_ZGVZN4UART11getHostUARTEvE8hostUART:
 2418 0000 00000000 	 .space 4
 2419              	 .weak _ZZN4UART11getHostUARTEvE8hostUART
 2420              	 .section .bss._ZZN4UART11getHostUARTEvE8hostUART,"awG",%nobits,_ZZN4UART11getHostUARTEvE8hostUART,comdat
 2421              	 .align 2
 2424              	_ZZN4UART11getHostUARTEvE8hostUART:
 2425 0000 00000000 	 .space 77
 2425      00000000 
 2425      00000000 
 2425      00000000 
 2425      00000000 
 2426              	 .weak _ZTV17TemperatureSensor
 2427 004d 000000   	 .section .rodata._ZTV17TemperatureSensor,"aG",%progbits,_ZTV17TemperatureSensor,comdat
 2428              	 .align 3
 2431              	_ZTV17TemperatureSensor:
 2432 0000 00000000 	 .word 0
 2433 0004 00000000 	 .word 0
 2434 0008 00000000 	 .word _ZN17TemperatureSensorD1Ev
 2435 000c 00000000 	 .word _ZN17TemperatureSensorD0Ev
 2436 0010 00000000 	 .word _ZN17TemperatureSensor4initEv
 2437 0014 00000000 	 .word __cxa_pure_virtual
 2438              	 .weak _ZN17TemperatureSensorD1Ev
 2439              	 .thumb_set _ZN17TemperatureSensorD1Ev,_ZN17TemperatureSensorD2Ev
 2440              	 .weak _ZN14HeatingElementD1Ev
 2441              	 .thumb_set _ZN14HeatingElementD1Ev,_ZN14HeatingElementD2Ev
 2442              	 .weak _ZN27BuildPlatformHeatingElementD1Ev
 2443              	 .thumb_set _ZN27BuildPlatformHeatingElementD1Ev,_ZN27BuildPlatformHeatingElementD2Ev
 2444              	 .weak _ZN11MotherboardD1Ev
 2445              	 .thumb_set _ZN11MotherboardD1Ev,_ZN11MotherboardD2Ev
 2446              	 .global _ZN11MotherboardC1Ev
 2447              	 .thumb_set _ZN11MotherboardC1Ev,_ZN11MotherboardC2Ev
 2448              	 .section .bss.led_toggle0,"aw",%nobits
 2451              	led_toggle0:
 2452 0000 00       	 .space 1
 2453              	 .section .bss.interface_on_time,"aw",%nobits
 2454              	 .set .LANCHOR8,.+0
 2457              	interface_on_time:
 2458 0000 00       	 .space 1
 2459              	 .section .bss.blink_state,"aw",%nobits
 2460              	 .align 2
 2461              	 .set .LANCHOR5,.+0
 2464              	blink_state:
 2465 0000 00000000 	 .space 4
 2466              	 .section .bss.blink_overflow_counter,"aw",%nobits
 2467              	 .align 1
 2468              	 .set .LANCHOR12,.+0
 2471              	blink_overflow_counter:
 2472 0000 0000     	 .space 2
 2473              	 .section .bss._ZL5Port0,"aw",%nobits
 2474              	 .align 2
 2475              	 .set .LANCHOR16,.+0
 2478              	_ZL5Port0:
 2479 0000 00       	 .space 1
 2480 0001 000000   	 .section .bss._ZL5Port1,"aw",%nobits
 2481              	 .align 2
 2482              	 .set .LANCHOR3,.+0
 2485              	_ZL5Port1:
 2486 0000 00       	 .space 1
 2487 0001 000000   	 .section .bss._ZL5Port2,"aw",%nobits
 2488              	 .align 2
 2489              	 .set .LANCHOR1,.+0
 2492              	_ZL5Port2:
 2493 0000 00       	 .space 1
 2494 0001 000000   	 .section .bss._ZL5Port3,"aw",%nobits
 2495              	 .align 2
 2496              	 .set .LANCHOR17,.+0
 2499              	_ZL5Port3:
 2500 0000 00       	 .space 1
 2501 0001 000000   	 .section .bss._ZL5Port4,"aw",%nobits
 2502              	 .align 2
 2503              	 .set .LANCHOR18,.+0
 2506              	_ZL5Port4:
 2507 0000 00       	 .space 1
 2508 0001 000000   	 .section .bss.interface_off_time,"aw",%nobits
 2509              	 .set .LANCHOR9,.+0
 2512              	interface_off_time:
 2513 0000 00       	 .space 1
 2514              	 .section .bss.stagger,"aw",%nobits
 2515              	 .set .LANCHOR11,.+0
 2518              	stagger:
 2519 0000 00       	 .space 1
 2520              	 .section .bss.connectionsErrorTriggered,"aw",%nobits
 2521              	 .set .LANCHOR2,.+0
 2524              	connectionsErrorTriggered:
 2525 0000 00       	 .space 1
 2526              	 .section .bss.interface_ovfs_remaining,"aw",%nobits
 2527              	 .align 2
 2528              	 .set .LANCHOR15,.+0
 2531              	interface_ovfs_remaining:
 2532 0000 00000000 	 .space 4
 2533              	 .section .bss._ZL7NullPin,"aw",%nobits
 2534              	 .align 2
 2535              	 .set .LANCHOR20,.+0
 2538              	_ZL7NullPin:
 2539 0000 00000000 	 .space 5
 2539      00
 2540 0005 000000   	 .section .bss.triggered,"aw",%nobits
 2541              	 .set .LANCHOR10,.+0
 2544              	triggered:
 2545 0000 00       	 .space 1
 2546              	 .section .bss._ZL8NullPort,"aw",%nobits
 2547              	 .align 2
 2548              	 .set .LANCHOR19,.+0
 2551              	_ZL8NullPort:
 2552 0000 00       	 .space 1
 2553 0001 000000   	 .section .bss.blink_ovfs_remaining,"aw",%nobits
 2554              	 .align 2
 2555              	 .set .LANCHOR13,.+0
 2558              	blink_ovfs_remaining:
 2559 0000 00000000 	 .space 4
 2560              	 .section .bss.interface_blink_state,"aw",%nobits
 2561              	 .align 2
 2562              	 .set .LANCHOR7,.+0
 2565              	interface_blink_state:
 2566 0000 00000000 	 .space 4
 2567              	 .section .rodata._ZTV27BuildPlatformHeatingElement,"a",%progbits
 2568              	 .align 3
 2569              	 .set .LANCHOR0,.+0
 2572              	_ZTV27BuildPlatformHeatingElement:
 2573 0000 00000000 	 .word 0
 2574 0004 00000000 	 .word 0
 2575 0008 00000000 	 .word _ZN27BuildPlatformHeatingElementD1Ev
 2576 000c 00000000 	 .word _ZN27BuildPlatformHeatingElementD0Ev
 2577 0010 00000000 	 .word _ZN27BuildPlatformHeatingElement17setHeatingElementEh
 2578 0014 00000000 	 .section .bss.loop0,"aw",%nobits
 2579              	 .align 2
 2582              	loop0:
 2583 0000 00000000 	 .space 4
 2584              	 .section .bss.loop1,"aw",%nobits
 2585              	 .align 2
 2588              	loop1:
 2589 0000 00000000 	 .space 4
 2590              	 .section .bss.loop2,"aw",%nobits
 2591              	 .align 2
 2594              	loop2:
 2595 0000 00000000 	 .space 4
 2596              	 .section .bss.loop3,"aw",%nobits
 2597              	 .align 2
 2600              	loop3:
 2601 0000 00000000 	 .space 4
 2602              	 .section .bss._ZN11Motherboard11motherboardE,"aw",%nobits
 2603              	 .align 2
 2604              	 .set .LANCHOR4,.+0
 2607              	_ZN11Motherboard11motherboardE:
 2608 0000 00000000 	 .space 676
 2608      00000000 
 2608      00000000 
 2608      00000000 
 2608      00000000 
 2609              	 .section .bss.led_toggle2,"aw",%nobits
 2612              	led_toggle2:
 2613 0000 00       	 .space 1
 2614              	 .section .bss.led_toggle3,"aw",%nobits
 2617              	led_toggle3:
 2618 0000 00       	 .space 1
 2619              	 .section .bss.blinked_so_far,"aw",%nobits
 2620              	 .align 2
 2621              	 .set .LANCHOR14,.+0
 2624              	blinked_so_far:
 2625 0000 00000000 	 .space 4
 2626              	 .section .bss.blink_count,"aw",%nobits
 2627              	 .set .LANCHOR6,.+0
 2630              	blink_count:
 2631 0000 00       	 .space 1
 2632              	 .section .bss.led_toggle1,"aw",%nobits
 2635              	led_toggle1:
 2636 0000 00       	 .space 1
 2637              	 .text
 2638              	.Letext0:
 2639              	 .file 9 "c:\\program files\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/arm-none-eabi/4.6.3/../../../../arm-none-eabi/include/stdint.h"
 2640              	 .file 10 "src/MightyBoard/Motherboard/system/LPC17xx.h"
 2641              	 .file 11 "src/MightyBoard/Motherboard/lib/include/lpc_types.h"
 2642              	 .file 12 "src/MightyBoard/shared/Packet.hh"
 2643              	 .file 13 "src/MightyBoard/shared/Types.hh"
 2644              	 .file 14 "src/MightyBoard/shared/Timeout.hh"
 2645              	 .file 15 "src/MightyBoard/shared/PID.hh"
 2646              	 .file 16 "src/MightyBoard/shared/Heater.hh"
 2647              	 .file 17 "src/MightyBoard/Motherboard/EepromMap.hh"
 2648              	 .file 18 "src/MightyBoard/shared/CoolingFan.hh"
 2649              	 .file 19 "src/MightyBoard/Motherboard/ExtruderBoard.hh"
 2650              	 .file 20 "src/MightyBoard/Motherboard/Cutoff.hh"
 2651              	 .file 21 "src/MightyBoard/Motherboard/Planner.hh"
 2652              	 .file 22 "src/MightyBoard/Motherboard/SoftI2cManager.hh"
 2653              	 .file 23 "src/MightyBoard/Motherboard/SDCard.hh"
 2654              	 .file 24 "src/MightyBoard/Motherboard/Host.hh"
 2655              	 .file 25 "src/MightyBoard/Motherboard/lib/include/lpc17xx_timer.h"
 2656              	 .file 26 "src/MightyBoard/shared/Thermistor.hh"
 2657              	 .file 27 "src/MightyBoard/shared/Menu_locales.hh"
 2658              	 .file 28 "src/MightyBoard/Motherboard/Command.hh"
DEFINED SYMBOLS
                            *ABS*:00000000 Motherboard.cc
    {standard input}:19     .text._ZN17TemperatureSensorD2Ev:00000000 $t
    {standard input}:24     .text._ZN17TemperatureSensorD2Ev:00000000 _ZN17TemperatureSensorD2Ev
    {standard input}:42     .text._ZN17TemperatureSensorD2Ev:00000008 $d
    {standard input}:2431   .rodata._ZTV17TemperatureSensor:00000000 _ZTV17TemperatureSensor
    {standard input}:47     .text._ZN17TemperatureSensor4initEv:00000000 $t
    {standard input}:52     .text._ZN17TemperatureSensor4initEv:00000000 _ZN17TemperatureSensor4initEv
    {standard input}:66     .text._ZN14HeatingElementD2Ev:00000000 $t
    {standard input}:71     .text._ZN14HeatingElementD2Ev:00000000 _ZN14HeatingElementD2Ev
    {standard input}:89     .text._ZN14HeatingElementD2Ev:00000008 $d
    {standard input}:2406   .rodata._ZTV14HeatingElement:00000000 _ZTV14HeatingElement
    {standard input}:94     .text._ZN27BuildPlatformHeatingElementD2Ev:00000000 $t
    {standard input}:99     .text._ZN27BuildPlatformHeatingElementD2Ev:00000000 _ZN27BuildPlatformHeatingElementD2Ev
    {standard input}:124    .text._ZN27BuildPlatformHeatingElementD2Ev:00000008 $d
    {standard input}:129    .text._ZN11MotherboardD2Ev:00000000 $t
    {standard input}:134    .text._ZN11MotherboardD2Ev:00000000 _ZN11MotherboardD2Ev
    {standard input}:246    .text._ZN11MotherboardD2Ev:0000001c $d
    {standard input}:252    .text._ZN27BuildPlatformHeatingElementD0Ev:00000000 $t
    {standard input}:257    .text._ZN27BuildPlatformHeatingElementD0Ev:00000000 _ZN27BuildPlatformHeatingElementD0Ev
    {standard input}:294    .text._ZN27BuildPlatformHeatingElementD0Ev:00000010 $d
    {standard input}:299    .text._ZN14HeatingElementD0Ev:00000000 $t
    {standard input}:304    .text._ZN14HeatingElementD0Ev:00000000 _ZN14HeatingElementD0Ev
    {standard input}:334    .text._ZN14HeatingElementD0Ev:00000010 $d
    {standard input}:339    .text._ZN17TemperatureSensorD0Ev:00000000 $t
    {standard input}:344    .text._ZN17TemperatureSensorD0Ev:00000000 _ZN17TemperatureSensorD0Ev
    {standard input}:374    .text._ZN17TemperatureSensorD0Ev:00000010 $d
    {standard input}:379    .text._ZN27BuildPlatformHeatingElement17setHeatingElementEh:00000000 $t
    {standard input}:384    .text._ZN27BuildPlatformHeatingElement17setHeatingElementEh:00000000 _ZN27BuildPlatformHeatingElement17setHeatingElementEh
    {standard input}:444    .text._ZN11MotherboardC2Ev:00000000 $t
    {standard input}:449    .text._ZN11MotherboardC2Ev:00000000 _ZN11MotherboardC2Ev
    {standard input}:2489   .bss._ZL5Port2:00000000 .LANCHOR1
    {standard input}:565    .text._ZN11MotherboardC2Ev:00000108 $d
    {standard input}:570    .text._ZN11Motherboard10initClocksEv:00000000 $t
    {standard input}:575    .text._ZN11Motherboard10initClocksEv:00000000 _ZN11Motherboard10initClocksEv
    {standard input}:749    .text._ZN11Motherboard16getCurrentMicrosEv:00000000 $t
    {standard input}:754    .text._ZN11Motherboard16getCurrentMicrosEv:00000000 _ZN11Motherboard16getCurrentMicrosEv
    {standard input}:773    .text._ZN11Motherboard11doInterruptEv:00000000 $t
    {standard input}:778    .text._ZN11Motherboard11doInterruptEv:00000000 _ZN11Motherboard11doInterruptEv
    {standard input}:802    .text._ZN11Motherboard10heaterFailE14HeaterFailMode:00000000 $t
    {standard input}:807    .text._ZN11Motherboard10heaterFailE14HeaterFailMode:00000000 _ZN11Motherboard10heaterFailE14HeaterFailMode
    {standard input}:2521   .bss.connectionsErrorTriggered:00000000 .LANCHOR2
    {standard input}:871    .text._ZN11Motherboard14GetErrorStatusEv:00000000 $t
    {standard input}:876    .text._ZN11Motherboard14GetErrorStatusEv:00000000 _ZN11Motherboard14GetErrorStatusEv
    {standard input}:892    .text._ZN11Motherboard21resetUserInputTimeoutEv:00000000 $t
    {standard input}:897    .text._ZN11Motherboard21resetUserInputTimeoutEv:00000000 _ZN11Motherboard21resetUserInputTimeoutEv
    {standard input}:922    .text._ZN11Motherboard12UpdateMicrosEv:00000000 $t
    {standard input}:927    .text._ZN11Motherboard12UpdateMicrosEv:00000000 _ZN11Motherboard12UpdateMicrosEv
    {standard input}:945    .text.TIMER0_IRQHandler:00000000 $t
    {standard input}:950    .text.TIMER0_IRQHandler:00000000 TIMER0_IRQHandler
    {standard input}:2482   .bss._ZL5Port1:00000000 .LANCHOR3
    {standard input}:2604   .bss._ZN11Motherboard11motherboardE:00000000 .LANCHOR4
    {standard input}:1030   .text._ZN11Motherboard13indicateErrorEi:00000000 $t
    {standard input}:1035   .text._ZN11Motherboard13indicateErrorEi:00000000 _ZN11Motherboard13indicateErrorEi
    {standard input}:2461   .bss.blink_state:00000000 .LANCHOR5
    {standard input}:2627   .bss.blink_count:00000000 .LANCHOR6
    {standard input}:1111   .text._ZN11Motherboard14interfaceBlinkEii:00000000 $t
    {standard input}:1116   .text._ZN11Motherboard14interfaceBlinkEii:00000000 _ZN11Motherboard14interfaceBlinkEii
    {standard input}:2562   .bss.interface_blink_state:00000000 .LANCHOR7
    {standard input}:2454   .bss.interface_on_time:00000000 .LANCHOR8
    {standard input}:2509   .bss.interface_off_time:00000000 .LANCHOR9
    {standard input}:1164   .text._ZN11Motherboard15startButtonWaitEv:00000000 $t
    {standard input}:1169   .text._ZN11Motherboard15startButtonWaitEv:00000000 _ZN11Motherboard15startButtonWaitEv
    {standard input}:1196   .text._ZN11Motherboard13errorResponseEPcb:00000000 $t
    {standard input}:1201   .text._ZN11Motherboard13errorResponseEPcb:00000000 _ZN11Motherboard13errorResponseEPcb
    {standard input}:1228   .text._ZN11Motherboard19runMotherboardSliceEv:00000000 $t
    {standard input}:1233   .text._ZN11Motherboard19runMotherboardSliceEv:00000000 _ZN11Motherboard19runMotherboardSliceEv
    {standard input}:2541   .bss.triggered:00000000 .LANCHOR10
    {standard input}:2515   .bss.stagger:00000000 .LANCHOR11
    {standard input}:1458   .text._ZN11Motherboard5resetEb:00000000 $t
    {standard input}:1463   .text._ZN11Motherboard5resetEb:00000000 _ZN11Motherboard5resetEb
    {standard input}:2417   .bss._ZGVZN4UART11getHostUARTEvE8hostUART:00000000 _ZGVZN4UART11getHostUARTEvE8hostUART
    {standard input}:2424   .bss._ZZN4UART11getHostUARTEvE8hostUART:00000000 _ZZN4UART11getHostUARTEvE8hostUART
    {standard input}:1761   .text._ZN11Motherboard5resetEb:000002d8 $d
    {standard input}:1766   .text._ZN11Motherboard15getCurrentErrorEv:00000000 $t
    {standard input}:1771   .text._ZN11Motherboard15getCurrentErrorEv:00000000 _ZN11Motherboard15getCurrentErrorEv
    {standard input}:1790   .text.TIMER2_IRQHandler:00000000 $t
    {standard input}:1795   .text.TIMER2_IRQHandler:00000000 TIMER2_IRQHandler
    {standard input}:2468   .bss.blink_overflow_counter:00000000 .LANCHOR12
    {standard input}:2555   .bss.blink_ovfs_remaining:00000000 .LANCHOR13
    {standard input}:2621   .bss.blinked_so_far:00000000 .LANCHOR14
    {standard input}:2528   .bss.interface_ovfs_remaining:00000000 .LANCHOR15
    {standard input}:2101   .text.TIMER3_IRQHandler:00000000 $t
    {standard input}:2106   .text.TIMER3_IRQHandler:00000000 TIMER3_IRQHandler
    {standard input}:2185   .text._Z9pwmHBP_Onb:00000000 $t
    {standard input}:2190   .text._Z9pwmHBP_Onb:00000000 _Z9pwmHBP_Onb
    {standard input}:2204   .text._ZN11Motherboard16setUsingPlatformEb:00000000 $t
    {standard input}:2209   .text._ZN11Motherboard16setUsingPlatformEb:00000000 _ZN11Motherboard16setUsingPlatformEb
    {standard input}:2225   .text._ZN11Motherboard8setValveEb:00000000 $t
    {standard input}:2230   .text._ZN11Motherboard8setValveEb:00000000 _ZN11Motherboard8setValveEb
    {standard input}:2302   .text._GLOBAL__sub_I__ZN11Motherboard11motherboardE:00000000 $t
    {standard input}:2306   .text._GLOBAL__sub_I__ZN11Motherboard11motherboardE:00000000 _GLOBAL__sub_I__ZN11Motherboard11motherboardE
    {standard input}:2475   .bss._ZL5Port0:00000000 .LANCHOR16
    {standard input}:2496   .bss._ZL5Port3:00000000 .LANCHOR17
    {standard input}:2503   .bss._ZL5Port4:00000000 .LANCHOR18
    {standard input}:2548   .bss._ZL8NullPort:00000000 .LANCHOR19
    {standard input}:2535   .bss._ZL7NullPin:00000000 .LANCHOR20
    {standard input}:449    .text._ZN11MotherboardC2Ev:00000000 _ZN11MotherboardC1Ev
    {standard input}:134    .text._ZN11MotherboardD2Ev:00000000 _ZN11MotherboardD1Ev
    {standard input}:2377   .init_array:00000000 $d
    {standard input}:2572   .rodata._ZTV27BuildPlatformHeatingElement:00000000 _ZTV27BuildPlatformHeatingElement
    {standard input}:2471   .bss.blink_overflow_counter:00000000 blink_overflow_counter
    {standard input}:2531   .bss.interface_ovfs_remaining:00000000 interface_ovfs_remaining
    {standard input}:2624   .bss.blinked_so_far:00000000 blinked_so_far
    {standard input}:2558   .bss.blink_ovfs_remaining:00000000 blink_ovfs_remaining
    {standard input}:2565   .bss.interface_blink_state:00000000 interface_blink_state
    {standard input}:2464   .bss.blink_state:00000000 blink_state
    {standard input}:2512   .bss.interface_off_time:00000000 interface_off_time
    {standard input}:2457   .bss.interface_on_time:00000000 interface_on_time
    {standard input}:2630   .bss.blink_count:00000000 blink_count
    {standard input}:2600   .bss.loop3:00000000 loop3
    {standard input}:2594   .bss.loop2:00000000 loop2
    {standard input}:2588   .bss.loop1:00000000 loop1
    {standard input}:2582   .bss.loop0:00000000 loop0
    {standard input}:2617   .bss.led_toggle3:00000000 led_toggle3
    {standard input}:2612   .bss.led_toggle2:00000000 led_toggle2
    {standard input}:2635   .bss.led_toggle1:00000000 led_toggle1
    {standard input}:2451   .bss.led_toggle0:00000000 led_toggle0
    {standard input}:2544   .bss.triggered:00000000 triggered
    {standard input}:2518   .bss.stagger:00000000 stagger
    {standard input}:2524   .bss.connectionsErrorTriggered:00000000 connectionsErrorTriggered
    {standard input}:2607   .bss._ZN11Motherboard11motherboardE:00000000 _ZN11Motherboard11motherboardE
    {standard input}:2403   .rodata._ZTV14HeatingElement:00000000 $d
    {standard input}:71     .text._ZN14HeatingElementD2Ev:00000000 _ZN14HeatingElementD1Ev
    {standard input}:2414   .bss._ZGVZN4UART11getHostUARTEvE8hostUART:00000000 $d
    {standard input}:2421   .bss._ZZN4UART11getHostUARTEvE8hostUART:00000000 $d
    {standard input}:2428   .rodata._ZTV17TemperatureSensor:00000000 $d
    {standard input}:24     .text._ZN17TemperatureSensorD2Ev:00000000 _ZN17TemperatureSensorD1Ev
    {standard input}:99     .text._ZN27BuildPlatformHeatingElementD2Ev:00000000 _ZN27BuildPlatformHeatingElementD1Ev
    {standard input}:2452   .bss.led_toggle0:00000000 $d
    {standard input}:2458   .bss.interface_on_time:00000000 $d
    {standard input}:2460   .bss.blink_state:00000000 $d
    {standard input}:2467   .bss.blink_overflow_counter:00000000 $d
    {standard input}:2474   .bss._ZL5Port0:00000000 $d
    {standard input}:2478   .bss._ZL5Port0:00000000 _ZL5Port0
    {standard input}:2481   .bss._ZL5Port1:00000000 $d
    {standard input}:2485   .bss._ZL5Port1:00000000 _ZL5Port1
    {standard input}:2488   .bss._ZL5Port2:00000000 $d
    {standard input}:2492   .bss._ZL5Port2:00000000 _ZL5Port2
    {standard input}:2495   .bss._ZL5Port3:00000000 $d
    {standard input}:2499   .bss._ZL5Port3:00000000 _ZL5Port3
    {standard input}:2502   .bss._ZL5Port4:00000000 $d
    {standard input}:2506   .bss._ZL5Port4:00000000 _ZL5Port4
    {standard input}:2513   .bss.interface_off_time:00000000 $d
    {standard input}:2519   .bss.stagger:00000000 $d
    {standard input}:2525   .bss.connectionsErrorTriggered:00000000 $d
    {standard input}:2527   .bss.interface_ovfs_remaining:00000000 $d
    {standard input}:2534   .bss._ZL7NullPin:00000000 $d
    {standard input}:2538   .bss._ZL7NullPin:00000000 _ZL7NullPin
    {standard input}:2545   .bss.triggered:00000000 $d
    {standard input}:2547   .bss._ZL8NullPort:00000000 $d
    {standard input}:2551   .bss._ZL8NullPort:00000000 _ZL8NullPort
    {standard input}:2554   .bss.blink_ovfs_remaining:00000000 $d
    {standard input}:2561   .bss.interface_blink_state:00000000 $d
    {standard input}:2568   .rodata._ZTV27BuildPlatformHeatingElement:00000000 $d
    {standard input}:2579   .bss.loop0:00000000 $d
    {standard input}:2585   .bss.loop1:00000000 $d
    {standard input}:2591   .bss.loop2:00000000 $d
    {standard input}:2597   .bss.loop3:00000000 $d
    {standard input}:2603   .bss._ZN11Motherboard11motherboardE:00000000 $d
    {standard input}:2613   .bss.led_toggle2:00000000 $d
    {standard input}:2618   .bss.led_toggle3:00000000 $d
    {standard input}:2620   .bss.blinked_so_far:00000000 $d
    {standard input}:2631   .bss.blink_count:00000000 $d
    {standard input}:2636   .bss.led_toggle1:00000000 $d
                     .debug_frame:00000010 $d
                           .group:00000000 _ZN17TemperatureSensorD5Ev
                           .group:00000000 _ZN14HeatingElementD5Ev
                           .group:00000000 _ZN27BuildPlatformHeatingElementD5Ev
                           .group:00000000 _ZN11MotherboardD5Ev

UNDEFINED SYMBOLS
_ZdlPv
_ZN7LPCPortC1Eh
_ZN3PinC1ERK7LPCPorth
GPIO_SetValue
GPIO_ClearValue
_ZN7TimeoutC1Ev
_ZN13ExtruderBoardC1Eh3PinS0_S0_t
_ZN10ThermistorC1Ehh
_ZN6HeaterC1ER17TemperatureSensorR14HeatingElementmtb
TIM_Init
TIM_ConfigMatch
TIM_Cmd
_ZN7command8isPausedEv
_ZN8steppers11doInterruptEv
_ZN6Heater10has_failedEv
_ZN6eeprom12isSingleToolEv
_ZN7Timeout5startEm
_ZNK3Pin12setDirectionEb
TIM_ClearIntPending
_ZN6Heater18manage_temperatureEv
_ZN7Timeout10hasElapsedEv
_ZN4host12getHostStateEv
_ZN7Timeout5clearEv
_ZN6Heater19get_set_temperatureEv
_ZN7RGB_LED8setColorEhhhb
_ZN6Heater22set_target_temperatureEi
_ZN5Piezo9isPlayingEv
_ZN7RGB_LED13errorSequenceEv
_ZN4host12heatShutdownEv
_ZN7command12heatShutdownEv
_ZN7planner5abortEv
_ZN8steppers10enableAxisEhb
_ZN13ExtruderBoard16runExtruderSliceEv
_ZN6eeprom10getEeprom8Eth
_ZN14SoftI2cManager10i2cManagerE
_ZN14SoftI2cManager4initEv
_ZN8steppers8setHoldZEb
__cxa_guard_acquire
_ZN4UARTC1Eh18communication_mode
__cxa_guard_release
_ZN4UART6enableEb
_ZN8InPacket5resetEv
_ZN7RGB_LED4initEv
_ZN5Piezo11startUpToneEv
_ZN6Cutoff4initEv
_ZN13ExtruderBoard5resetEv
_ZN10Thermistor4initEv
_ZN6Heater5resetEv
_ZN7RGB_LED15setDefaultColorEv
_ZN5Piezo11doInterruptEv
__dso_handle
__aeabi_atexit
__cxa_pure_virtual
