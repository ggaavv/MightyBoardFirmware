   1              	 .syntax unified
   2              	 .cpu cortex-m3
   3              	 .fpu softvfp
   4              	 .eabi_attribute 20,1
   5              	 .eabi_attribute 21,1
   6              	 .eabi_attribute 23,3
   7              	 .eabi_attribute 24,1
   8              	 .eabi_attribute 25,1
   9              	 .eabi_attribute 26,1
  10              	 .eabi_attribute 30,1
  11              	 .eabi_attribute 34,1
  12              	 .eabi_attribute 18,4
  13              	 .thumb
  14              	 .file "Planner.cc"
  15              	 .text
  16              	.Ltext0:
  17              	 .cfi_sections .debug_frame
  18              	 .section .text._ZN7planner17setAccelerationOnEb,"ax",%progbits
  19              	 .align 2
  20              	 .global _ZN7planner17setAccelerationOnEb
  21              	 .thumb
  22              	 .thumb_func
  24              	_ZN7planner17setAccelerationOnEb:
  25              	.LFB128:
  26              	 .file 1 "src/MightyBoard/Motherboard/Planner.cc"
   1:src/MightyBoard/Motherboard/Planner.cc **** /*
   2:src/MightyBoard/Motherboard/Planner.cc ****  *   Copyright 2011 by Rob Giseburt http://tinkerin.gs
   3:src/MightyBoard/Motherboard/Planner.cc ****  *   
   4:src/MightyBoard/Motherboard/Planner.cc ****  *   This program is free software: you can redistribute it and/or modify
   5:src/MightyBoard/Motherboard/Planner.cc ****  *   it under the terms of the GNU General Public License as published by
   6:src/MightyBoard/Motherboard/Planner.cc ****  *   the Free Software Foundation, either version 3 of the License, or
   7:src/MightyBoard/Motherboard/Planner.cc ****  *   (at your option) any later version.
   8:src/MightyBoard/Motherboard/Planner.cc ****  *   
   9:src/MightyBoard/Motherboard/Planner.cc ****  *   This program is distributed in the hope that it will be useful,
  10:src/MightyBoard/Motherboard/Planner.cc ****  *   but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:src/MightyBoard/Motherboard/Planner.cc ****  *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:src/MightyBoard/Motherboard/Planner.cc ****  *   GNU General Public License for more details.
  13:src/MightyBoard/Motherboard/Planner.cc ****  *   
  14:src/MightyBoard/Motherboard/Planner.cc ****  *   You should have received a copy of the GNU General Public License
  15:src/MightyBoard/Motherboard/Planner.cc ****  *   along with this program.  If not, see <http://www.gnu.org/licenses/>
  16:src/MightyBoard/Motherboard/Planner.cc ****  */
  17:src/MightyBoard/Motherboard/Planner.cc **** 
  18:src/MightyBoard/Motherboard/Planner.cc **** /*
  19:src/MightyBoard/Motherboard/Planner.cc ****  *   This is heavily influenced by the Marlin RepRap firmware
  20:src/MightyBoard/Motherboard/Planner.cc ****  *   (https://github.com/ErikZalm/Marlin) which is derived from
  21:src/MightyBoard/Motherboard/Planner.cc ****  *   the Grbl firmware (https://github.com/simen/grbl/tree).
  22:src/MightyBoard/Motherboard/Planner.cc ****  */
  23:src/MightyBoard/Motherboard/Planner.cc **** 
  24:src/MightyBoard/Motherboard/Planner.cc **** 
  25:src/MightyBoard/Motherboard/Planner.cc **** /*  
  26:src/MightyBoard/Motherboard/Planner.cc ****   Reasoning behind the mathematics in this module (in the key of 'Mathematica'):
  27:src/MightyBoard/Motherboard/Planner.cc **** 
  28:src/MightyBoard/Motherboard/Planner.cc ****   s == speed, a == acceleration, t == time, d == distance
  29:src/MightyBoard/Motherboard/Planner.cc **** 
  30:src/MightyBoard/Motherboard/Planner.cc ****   Basic definitions:
  31:src/MightyBoard/Motherboard/Planner.cc **** 
  32:src/MightyBoard/Motherboard/Planner.cc ****     Speed[s_, a_, t_] := s + (a*t) 
  33:src/MightyBoard/Motherboard/Planner.cc ****     Travel[s_, a_, t_] := Integrate[Speed[s, a, t], t]
  34:src/MightyBoard/Motherboard/Planner.cc **** 
  35:src/MightyBoard/Motherboard/Planner.cc ****   Distance to reach a specific speed with a constant acceleration:
  36:src/MightyBoard/Motherboard/Planner.cc **** 
  37:src/MightyBoard/Motherboard/Planner.cc ****     Solve[{Speed[s, a, t] == m, Travel[s, a, t] == d}, d, t]
  38:src/MightyBoard/Motherboard/Planner.cc ****       d -> (m^2 - s^2)/(2 a) --> estimate_acceleration_distance()
  39:src/MightyBoard/Motherboard/Planner.cc **** 
  40:src/MightyBoard/Motherboard/Planner.cc ****   Speed after a given distance of travel with constant acceleration:
  41:src/MightyBoard/Motherboard/Planner.cc **** 
  42:src/MightyBoard/Motherboard/Planner.cc ****     Solve[{Speed[s, a, t] == m, Travel[s, a, t] == d}, m, t]
  43:src/MightyBoard/Motherboard/Planner.cc ****       m -> Sqrt[2 a d + s^2]    
  44:src/MightyBoard/Motherboard/Planner.cc **** 
  45:src/MightyBoard/Motherboard/Planner.cc ****     DestinationSpeed[s_, a_, d_] := Sqrt[2 a d + s^2]
  46:src/MightyBoard/Motherboard/Planner.cc **** 
  47:src/MightyBoard/Motherboard/Planner.cc ****   When to start braking (di) to reach a specified destionation speed (s2) after accelerating
  48:src/MightyBoard/Motherboard/Planner.cc ****   from initial speed s1 without ever stopping at a plateau:
  49:src/MightyBoard/Motherboard/Planner.cc **** 
  50:src/MightyBoard/Motherboard/Planner.cc ****     Solve[{DestinationSpeed[s1, a, di] == DestinationSpeed[s2, a, d - di]}, di]
  51:src/MightyBoard/Motherboard/Planner.cc ****       di -> (2 a d - s1^2 + s2^2)/(4 a) --> intersection_distance()
  52:src/MightyBoard/Motherboard/Planner.cc **** 
  53:src/MightyBoard/Motherboard/Planner.cc ****     IntersectionDistance[s1_, s2_, a_, d_] := (2 a d - s1^2 + s2^2)/(4 a)
  54:src/MightyBoard/Motherboard/Planner.cc **** 
  55:src/MightyBoard/Motherboard/Planner.cc **** 	vt + (1/2)at^2=X for t
  56:src/MightyBoard/Motherboard/Planner.cc **** 		x + vt + (1/2)at^2=X
  57:src/MightyBoard/Motherboard/Planner.cc **** 		x = destination
  58:src/MightyBoard/Motherboard/Planner.cc **** 		X = position
  59:src/MightyBoard/Motherboard/Planner.cc **** 		v = current speed
  60:src/MightyBoard/Motherboard/Planner.cc **** 		a = acceleration rate
  61:src/MightyBoard/Motherboard/Planner.cc **** 		t = time
  62:src/MightyBoard/Motherboard/Planner.cc **** 		See: http://www.wolframalpha.com/input/?i=vt+%2B+%281%2F2%29at%5E2%3DX+for+t
  63:src/MightyBoard/Motherboard/Planner.cc **** 	
  64:src/MightyBoard/Motherboard/Planner.cc **** 	Solved for time, simplified (with a few multiplications as possible) gives:
  65:src/MightyBoard/Motherboard/Planner.cc **** 	(sqrt(v^2-2*a*(x-X)) - v)/a
  66:src/MightyBoard/Motherboard/Planner.cc **** 	So, making x-X = D gives:
  67:src/MightyBoard/Motherboard/Planner.cc **** 	(sqrt(v*v-2*a*D)-v)/a = time to accelerate from velocity v over D steps with acceleration a
  68:src/MightyBoard/Motherboard/Planner.cc **** 	
  69:src/MightyBoard/Motherboard/Planner.cc **** */
  70:src/MightyBoard/Motherboard/Planner.cc **** 
  71:src/MightyBoard/Motherboard/Planner.cc **** 
  72:src/MightyBoard/Motherboard/Planner.cc **** #include "Planner.hh"
  73:src/MightyBoard/Motherboard/Planner.cc **** //#include <util/atomic.h>
  74:src/MightyBoard/Motherboard/Planner.cc **** #include <math.h>
  75:src/MightyBoard/Motherboard/Planner.cc **** #include <stdlib.h>
  76:src/MightyBoard/Motherboard/Planner.cc **** #include <string.h> // for memmove and memcpy
  77:src/MightyBoard/Motherboard/Planner.cc **** #include "SDCard.hh" // sdcard::isPlaying()
  78:src/MightyBoard/Motherboard/Planner.cc **** 
  79:src/MightyBoard/Motherboard/Planner.cc **** #include "Steppers.hh"
  80:src/MightyBoard/Motherboard/Planner.cc **** #include "Point.hh"
  81:src/MightyBoard/Motherboard/Planner.cc **** #include "Eeprom.hh"
  82:src/MightyBoard/Motherboard/Planner.cc **** #include "EepromMap.hh"
  83:src/MightyBoard/Motherboard/Planner.cc **** 
  84:src/MightyBoard/Motherboard/Planner.cc **** #include "Delay.hh"
  85:src/MightyBoard/Motherboard/Planner.cc **** extern "C" {
  86:src/MightyBoard/Motherboard/Planner.cc **** 	#include "comm.h"
  87:src/MightyBoard/Motherboard/Planner.cc **** }
  88:src/MightyBoard/Motherboard/Planner.cc **** 
  89:src/MightyBoard/Motherboard/Planner.cc **** 
  90:src/MightyBoard/Motherboard/Planner.cc **** #define  FORCE_INLINE __attribute__((always_inline)) inline
  91:src/MightyBoard/Motherboard/Planner.cc **** 
  92:src/MightyBoard/Motherboard/Planner.cc **** /* Setup some utilities */
  93:src/MightyBoard/Motherboard/Planner.cc **** 
  94:src/MightyBoard/Motherboard/Planner.cc **** // undefine stdlib's abs if encountered
  95:src/MightyBoard/Motherboard/Planner.cc **** #ifdef abs
  96:src/MightyBoard/Motherboard/Planner.cc **** #undef abs
  97:src/MightyBoard/Motherboard/Planner.cc **** #endif
  98:src/MightyBoard/Motherboard/Planner.cc **** #ifdef min
  99:src/MightyBoard/Motherboard/Planner.cc **** #undef min
 100:src/MightyBoard/Motherboard/Planner.cc **** #endif
 101:src/MightyBoard/Motherboard/Planner.cc **** #ifdef max
 102:src/MightyBoard/Motherboard/Planner.cc **** #undef max
 103:src/MightyBoard/Motherboard/Planner.cc **** #endif
 104:src/MightyBoard/Motherboard/Planner.cc **** 
 105:src/MightyBoard/Motherboard/Planner.cc **** template <typename T>
 106:src/MightyBoard/Motherboard/Planner.cc **** inline const T& min(const T& a, const T& b) { return (a)<(b)?(a):(b); }
 107:src/MightyBoard/Motherboard/Planner.cc **** 
 108:src/MightyBoard/Motherboard/Planner.cc **** template <typename T>
 109:src/MightyBoard/Motherboard/Planner.cc **** inline const T& max(const T& a, const T& b) { return (a)>(b)?(a):(b); }
 110:src/MightyBoard/Motherboard/Planner.cc **** 
 111:src/MightyBoard/Motherboard/Planner.cc **** // undefine stdlib's abs if encountered
 112:src/MightyBoard/Motherboard/Planner.cc **** #ifdef abs
 113:src/MightyBoard/Motherboard/Planner.cc **** #undef abs
 114:src/MightyBoard/Motherboard/Planner.cc **** #endif
 115:src/MightyBoard/Motherboard/Planner.cc **** 
 116:src/MightyBoard/Motherboard/Planner.cc **** #ifdef labs
 117:src/MightyBoard/Motherboard/Planner.cc **** #undef labs
 118:src/MightyBoard/Motherboard/Planner.cc **** #endif
 119:src/MightyBoard/Motherboard/Planner.cc **** 
 120:src/MightyBoard/Motherboard/Planner.cc **** template <typename T>
 121:src/MightyBoard/Motherboard/Planner.cc **** inline T abs(T x) { return (x)>0?(x):-(x); }
 122:src/MightyBoard/Motherboard/Planner.cc **** 
 123:src/MightyBoard/Motherboard/Planner.cc **** template <>
 124:src/MightyBoard/Motherboard/Planner.cc **** inline int abs(int x) { return __builtin_abs(x); }
 125:src/MightyBoard/Motherboard/Planner.cc **** 
 126:src/MightyBoard/Motherboard/Planner.cc **** template <>
 127:src/MightyBoard/Motherboard/Planner.cc **** inline long abs(long x) { return __builtin_labs(x); }
 128:src/MightyBoard/Motherboard/Planner.cc **** 
 129:src/MightyBoard/Motherboard/Planner.cc **** 
 130:src/MightyBoard/Motherboard/Planner.cc **** namespace planner {
 131:src/MightyBoard/Motherboard/Planner.cc **** 	
 132:src/MightyBoard/Motherboard/Planner.cc **** 	// Super-simple circular buffer, where old nodes are reused
 133:src/MightyBoard/Motherboard/Planner.cc **** 	// TODO: Move to a seperate file
 134:src/MightyBoard/Motherboard/Planner.cc **** 	// WARNING WARNING WARNING: The buffer must be sized a power of two, otherwise operations will not
 135:src/MightyBoard/Motherboard/Planner.cc **** 	// (2, 4, 8, 16, 32, 64, 128)
 136:src/MightyBoard/Motherboard/Planner.cc **** 	template<typename T>
 137:src/MightyBoard/Motherboard/Planner.cc **** 	class ReusingCircularBufferTempl
 138:src/MightyBoard/Motherboard/Planner.cc **** 	{
 139:src/MightyBoard/Motherboard/Planner.cc **** 	public:
 140:src/MightyBoard/Motherboard/Planner.cc **** 		typedef T BufDataType;
 141:src/MightyBoard/Motherboard/Planner.cc **** 		typedef uint8_t BufSizeType;
 142:src/MightyBoard/Motherboard/Planner.cc **** 		
 143:src/MightyBoard/Motherboard/Planner.cc **** 	private:
 144:src/MightyBoard/Motherboard/Planner.cc **** 		volatile BufSizeType head, tail;
 145:src/MightyBoard/Motherboard/Planner.cc **** 		// volatile bool full;
 146:src/MightyBoard/Motherboard/Planner.cc **** 		BufSizeType size;
 147:src/MightyBoard/Motherboard/Planner.cc **** 		BufSizeType size_mask;
 148:src/MightyBoard/Motherboard/Planner.cc **** 		BufDataType* const data; /// Pointer to buffer data
 149:src/MightyBoard/Motherboard/Planner.cc **** 	
 150:src/MightyBoard/Motherboard/Planner.cc **** 	public:
 151:src/MightyBoard/Motherboard/Planner.cc **** 		///@param buffer_in pre-allocaed data of <T>
 152:src/MightyBoard/Motherboard/Planner.cc **** 		///@param size_in count in elements of buffer_in
 153:src/MightyBoard/Motherboard/Planner.cc **** 		ReusingCircularBufferTempl(BufSizeType size_in, BufDataType* buffer_in) : head(0), tail(0), /*ful
 154:src/MightyBoard/Motherboard/Planner.cc **** 			for (BufSizeType i = 0; i < size; i++) {
 155:src/MightyBoard/Motherboard/Planner.cc **** 				data[i] = BufDataType();
 156:src/MightyBoard/Motherboard/Planner.cc **** 			}
 157:src/MightyBoard/Motherboard/Planner.cc **** 		};
 158:src/MightyBoard/Motherboard/Planner.cc **** 		
 159:src/MightyBoard/Motherboard/Planner.cc **** 		inline BufDataType *getHead() {
 160:src/MightyBoard/Motherboard/Planner.cc **** 			return &data[head];
 161:src/MightyBoard/Motherboard/Planner.cc **** 		}
 162:src/MightyBoard/Motherboard/Planner.cc **** 		inline BufSizeType getHeadIndex() {
 163:src/MightyBoard/Motherboard/Planner.cc **** 			return head;
 164:src/MightyBoard/Motherboard/Planner.cc **** 		}
 165:src/MightyBoard/Motherboard/Planner.cc **** 		
 166:src/MightyBoard/Motherboard/Planner.cc **** 		inline BufDataType *getTail() {
 167:src/MightyBoard/Motherboard/Planner.cc **** 			return &data[tail];
 168:src/MightyBoard/Motherboard/Planner.cc **** 		}
 169:src/MightyBoard/Motherboard/Planner.cc **** 		inline BufSizeType getTailIndex() {
 170:src/MightyBoard/Motherboard/Planner.cc **** 			return tail;
 171:src/MightyBoard/Motherboard/Planner.cc **** 		}
 172:src/MightyBoard/Motherboard/Planner.cc **** 		
 173:src/MightyBoard/Motherboard/Planner.cc **** 		inline BufSizeType getNextIndex(BufSizeType from) {
 174:src/MightyBoard/Motherboard/Planner.cc **** 			return ((from + 1) & size_mask);
 175:src/MightyBoard/Motherboard/Planner.cc **** 		}
 176:src/MightyBoard/Motherboard/Planner.cc **** 		
 177:src/MightyBoard/Motherboard/Planner.cc **** 		inline BufSizeType getPreviousIndex(BufSizeType from) {
 178:src/MightyBoard/Motherboard/Planner.cc **** 			return (((from+size) - 1) & size_mask);
 179:src/MightyBoard/Motherboard/Planner.cc **** 		}
 180:src/MightyBoard/Motherboard/Planner.cc **** 		
 181:src/MightyBoard/Motherboard/Planner.cc **** 		inline BufDataType *getNextHead() {
 182:src/MightyBoard/Motherboard/Planner.cc **** 			return &data[getNextIndex(head)];
 183:src/MightyBoard/Motherboard/Planner.cc **** 		}
 184:src/MightyBoard/Motherboard/Planner.cc **** 		
 185:src/MightyBoard/Motherboard/Planner.cc **** 		inline BufDataType &operator[] (BufSizeType index) {
 186:src/MightyBoard/Motherboard/Planner.cc **** 			 // adding size should make negative indexes < size work ok
 187:src/MightyBoard/Motherboard/Planner.cc **** 			// int16_t offset = index < 0 ? index : ((index + size) & size_mask);
 188:src/MightyBoard/Motherboard/Planner.cc **** 			return data[index];
 189:src/MightyBoard/Motherboard/Planner.cc **** 		}
 190:src/MightyBoard/Motherboard/Planner.cc **** 		
 191:src/MightyBoard/Motherboard/Planner.cc **** 		// bump the head. cannot return anything useful, so it doesn't
 192:src/MightyBoard/Motherboard/Planner.cc **** 		// WARNING: no sanity checks!
 193:src/MightyBoard/Motherboard/Planner.cc **** 		inline void bumpHead() {
 194:src/MightyBoard/Motherboard/Planner.cc **** 			head = getNextIndex(head);
 195:src/MightyBoard/Motherboard/Planner.cc **** 		}
 196:src/MightyBoard/Motherboard/Planner.cc **** 
 197:src/MightyBoard/Motherboard/Planner.cc **** 		// bump the tail. cannot return anything useful, so it doesn't
 198:src/MightyBoard/Motherboard/Planner.cc **** 		// WARNING: no sanity checks!
 199:src/MightyBoard/Motherboard/Planner.cc **** 		inline void bumpTail() {
 200:src/MightyBoard/Motherboard/Planner.cc **** 			tail = getNextIndex(tail);
 201:src/MightyBoard/Motherboard/Planner.cc **** 		}
 202:src/MightyBoard/Motherboard/Planner.cc **** 		
 203:src/MightyBoard/Motherboard/Planner.cc **** 		inline bool isEmpty() {
 204:src/MightyBoard/Motherboard/Planner.cc **** 			return head == tail;
 205:src/MightyBoard/Motherboard/Planner.cc **** 		}
 206:src/MightyBoard/Motherboard/Planner.cc **** 		
 207:src/MightyBoard/Motherboard/Planner.cc **** 		inline bool isFull() {
 208:src/MightyBoard/Motherboard/Planner.cc **** 			return (getNextIndex(head) == tail);
 209:src/MightyBoard/Motherboard/Planner.cc **** 		}
 210:src/MightyBoard/Motherboard/Planner.cc **** 		
 211:src/MightyBoard/Motherboard/Planner.cc **** 		inline BufSizeType getUsedCount() {
 212:src/MightyBoard/Motherboard/Planner.cc **** 			return ((head-tail+size) & size_mask);
 213:src/MightyBoard/Motherboard/Planner.cc **** 		}
 214:src/MightyBoard/Motherboard/Planner.cc **** 		
 215:src/MightyBoard/Motherboard/Planner.cc **** 		inline void clear() {
 216:src/MightyBoard/Motherboard/Planner.cc **** 			head = 0;
 217:src/MightyBoard/Motherboard/Planner.cc **** 			tail = 0;
 218:src/MightyBoard/Motherboard/Planner.cc **** 		}
 219:src/MightyBoard/Motherboard/Planner.cc **** 	};
 220:src/MightyBoard/Motherboard/Planner.cc **** 	
 221:src/MightyBoard/Motherboard/Planner.cc **** 	// this is very similar to the StepperAxis, but geared toward planning
 222:src/MightyBoard/Motherboard/Planner.cc **** 	struct PlannerAxis
 223:src/MightyBoard/Motherboard/Planner.cc **** 	{
 224:src/MightyBoard/Motherboard/Planner.cc **** 		// how many steps does it take to go a mm (RepG should tell us this during init)
 225:src/MightyBoard/Motherboard/Planner.cc **** 		float steps_per_mm;
 226:src/MightyBoard/Motherboard/Planner.cc **** 		
 227:src/MightyBoard/Motherboard/Planner.cc **** 		// how fast can we go, in mm/s (RepG should have already limited this, disabling)
 228:src/MightyBoard/Motherboard/Planner.cc **** 		// float max_feedrate;
 229:src/MightyBoard/Motherboard/Planner.cc **** 
 230:src/MightyBoard/Motherboard/Planner.cc **** 		// min and max length for the axis
 231:src/MightyBoard/Motherboard/Planner.cc **** 		int32_t max_length;
 232:src/MightyBoard/Motherboard/Planner.cc **** 		int32_t min_length;
 233:src/MightyBoard/Motherboard/Planner.cc **** 		
 234:src/MightyBoard/Motherboard/Planner.cc **** 		// maximum acceleration for this axis in steps/s^2 (should be in EEPROM)
 235:src/MightyBoard/Motherboard/Planner.cc **** 		uint32_t max_acceleration;
 236:src/MightyBoard/Motherboard/Planner.cc **** 		
 237:src/MightyBoard/Motherboard/Planner.cc **** 		// the maximum amount of speed change allowable for this axis
 238:src/MightyBoard/Motherboard/Planner.cc **** 		// note that X+Y has it's own setting, and this if for all the rest
 239:src/MightyBoard/Motherboard/Planner.cc **** 		float max_axis_jerk;
 240:src/MightyBoard/Motherboard/Planner.cc **** 	};
 241:src/MightyBoard/Motherboard/Planner.cc **** 	
 242:src/MightyBoard/Motherboard/Planner.cc **** 	PlannerAxis axes[STEPPER_COUNT];
 243:src/MightyBoard/Motherboard/Planner.cc **** 	
 244:src/MightyBoard/Motherboard/Planner.cc **** 	float default_acceleration;
 245:src/MightyBoard/Motherboard/Planner.cc **** 	float minimum_planner_speed;
 246:src/MightyBoard/Motherboard/Planner.cc **** 	Point position; // the current position (planning-wise, not bot/stepper-wise) in steps
 247:src/MightyBoard/Motherboard/Planner.cc **** 	float previous_speed[STEPPER_COUNT]; // Speed of previous path line segment
 248:src/MightyBoard/Motherboard/Planner.cc **** #ifdef CENTREPEDAL
 249:src/MightyBoard/Motherboard/Planner.cc **** 	float default_junction_deviation;
 250:src/MightyBoard/Motherboard/Planner.cc **** 	float previous_unit_vec[3];
 251:src/MightyBoard/Motherboard/Planner.cc **** #endif
 252:src/MightyBoard/Motherboard/Planner.cc **** 	float previous_nominal_speed; // Nominal speed of previous path line segment
 253:src/MightyBoard/Motherboard/Planner.cc **** 	static float max_xy_jerk;
 254:src/MightyBoard/Motherboard/Planner.cc **** 	
 255:src/MightyBoard/Motherboard/Planner.cc **** 	/// List of accelerated moves to execute
 256:src/MightyBoard/Motherboard/Planner.cc **** 	Block block_buffer_data[BLOCK_BUFFER_SIZE];
 257:src/MightyBoard/Motherboard/Planner.cc **** 	ReusingCircularBufferTempl<Block> block_buffer(BLOCK_BUFFER_SIZE, block_buffer_data);
 258:src/MightyBoard/Motherboard/Planner.cc **** 	
 259:src/MightyBoard/Motherboard/Planner.cc **** 	bool accelerationON = true;
 260:src/MightyBoard/Motherboard/Planner.cc **** 
 261:src/MightyBoard/Motherboard/Planner.cc **** 	Point tolerance_offset_T0;
 262:src/MightyBoard/Motherboard/Planner.cc **** 	Point tolerance_offset_T1;
 263:src/MightyBoard/Motherboard/Planner.cc **** 	Point *tool_offsets;
 264:src/MightyBoard/Motherboard/Planner.cc **** 	
 265:src/MightyBoard/Motherboard/Planner.cc **** 	uint32_t additional_ms_per_segment;
 266:src/MightyBoard/Motherboard/Planner.cc **** 	
 267:src/MightyBoard/Motherboard/Planner.cc **** 	volatile bool force_replan_from_stopped;
 268:src/MightyBoard/Motherboard/Planner.cc **** 	
 269:src/MightyBoard/Motherboard/Planner.cc **** 	void init()
 270:src/MightyBoard/Motherboard/Planner.cc **** 	{
 271:src/MightyBoard/Motherboard/Planner.cc **** 		xprintf("planner::init" " (%s:%d)\n",_F_,_L_);
 272:src/MightyBoard/Motherboard/Planner.cc **** 
 273:src/MightyBoard/Motherboard/Planner.cc **** 		/// if eeprom has not been initialized. store default values
 274:src/MightyBoard/Motherboard/Planner.cc **** 		if (eeprom::getEeprom32(eeprom_offsets::TOOLHEAD_OFFSET_SETTINGS, 0xFFFFFFFF) == 0xFFFFFFFF) {
 275:src/MightyBoard/Motherboard/Planner.cc **** 			xprintf("planner::init" " (%s:%d)\n",_F_,_L_);
 276:src/MightyBoard/Motherboard/Planner.cc **** 			eeprom::storeToolheadToleranceDefaults();
 277:src/MightyBoard/Motherboard/Planner.cc **** 		}
 278:src/MightyBoard/Motherboard/Planner.cc **** 		xprintf("planner::init" " (%s:%d)\n",_F_,_L_);
 279:src/MightyBoard/Motherboard/Planner.cc **** 		
 280:src/MightyBoard/Motherboard/Planner.cc **** 		setAxisStepsPerMM(XSTEPS_PER_MM,0);
 281:src/MightyBoard/Motherboard/Planner.cc **** 		setAxisStepsPerMM(YSTEPS_PER_MM,1);               
 282:src/MightyBoard/Motherboard/Planner.cc **** 		setAxisStepsPerMM(ZSTEPS_PER_MM,2);
 283:src/MightyBoard/Motherboard/Planner.cc **** 		setAxisStepsPerMM(ASTEPS_PER_MM,3);
 284:src/MightyBoard/Motherboard/Planner.cc **** 		setAxisStepsPerMM(BSTEPS_PER_MM,4);
 285:src/MightyBoard/Motherboard/Planner.cc **** 
 286:src/MightyBoard/Motherboard/Planner.cc **** 		xprintf("planner::init" " (%s:%d)\n",_F_,_L_);
 287:src/MightyBoard/Motherboard/Planner.cc **** 		// check that acceleration settings have been initialized 
 288:src/MightyBoard/Motherboard/Planner.cc **** 		// if not, load defaults
 289:src/MightyBoard/Motherboard/Planner.cc **** 
 290:src/MightyBoard/Motherboard/Planner.cc **** 		uint8_t accelerationStatus = eeprom::getEeprom8(eeprom_offsets::ACCELERATION_SETTINGS + accelerat
 291:src/MightyBoard/Motherboard/Planner.cc **** 		if(accelerationStatus !=  _BV(ACCELERATION_INIT_BIT)){
 292:src/MightyBoard/Motherboard/Planner.cc **** 			xprintf("planner::init" " (%s:%d)\n",_F_,_L_);
 293:src/MightyBoard/Motherboard/Planner.cc **** 			eeprom::setDefaultsAcceleration();
 294:src/MightyBoard/Motherboard/Planner.cc **** 		}
 295:src/MightyBoard/Motherboard/Planner.cc **** 		xprintf("planner::init" " (%s:%d)\n",_F_,_L_);
 296:src/MightyBoard/Motherboard/Planner.cc **** 
 297:src/MightyBoard/Motherboard/Planner.cc **** 		// Master acceleration
 298:src/MightyBoard/Motherboard/Planner.cc **** 		setAcceleration((int32_t)eeprom::getEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration
 299:src/MightyBoard/Motherboard/Planner.cc **** 		
 300:src/MightyBoard/Motherboard/Planner.cc **** 		setAxisAcceleration((int32_t)eeprom::getEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + accelera
 301:src/MightyBoard/Motherboard/Planner.cc **** 		setAxisAcceleration((int32_t)eeprom::getEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + accelera
 302:src/MightyBoard/Motherboard/Planner.cc **** 		setAxisAcceleration((int32_t)eeprom::getEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + accelera
 303:src/MightyBoard/Motherboard/Planner.cc **** 		setAxisAcceleration((int32_t)eeprom::getEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + accelera
 304:src/MightyBoard/Motherboard/Planner.cc **** 		setAxisAcceleration((int32_t)eeprom::getEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + accelera
 305:src/MightyBoard/Motherboard/Planner.cc **** 
 306:src/MightyBoard/Motherboard/Planner.cc **** 		setMaxXYJerk((float)eeprom::getEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eepr
 307:src/MightyBoard/Motherboard/Planner.cc **** 		setMaxAxisJerk((float)eeprom::getEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_ee
 308:src/MightyBoard/Motherboard/Planner.cc **** 		setMaxAxisJerk((float)eeprom::getEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_ee
 309:src/MightyBoard/Motherboard/Planner.cc **** 		setMaxAxisJerk((float)eeprom::getEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_ee
 310:src/MightyBoard/Motherboard/Planner.cc **** 
 311:src/MightyBoard/Motherboard/Planner.cc **** 		minimum_planner_speed = eeprom::getEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_
 312:src/MightyBoard/Motherboard/Planner.cc **** 		
 313:src/MightyBoard/Motherboard/Planner.cc **** 		// Z axis max and min
 314:src/MightyBoard/Motherboard/Planner.cc **** 		setAxisMaxLength(eeprom::getEeprom32(eeprom_offsets::AXIS_LENGTHS + 4*2, replicator_axis_lengths:
 315:src/MightyBoard/Motherboard/Planner.cc **** 		setAxisMaxLength(0, 2, false);
 316:src/MightyBoard/Motherboard/Planner.cc **** 
 317:src/MightyBoard/Motherboard/Planner.cc **** 		abort();
 318:src/MightyBoard/Motherboard/Planner.cc **** //		save_to_flash();
 319:src/MightyBoard/Motherboard/Planner.cc **** 
 320:src/MightyBoard/Motherboard/Planner.cc **** #ifdef CENTREPEDAL
 321:src/MightyBoard/Motherboard/Planner.cc **** 		previous_unit_vec[0]= 0.0;
 322:src/MightyBoard/Motherboard/Planner.cc **** 		previous_unit_vec[1]= 0.0;
 323:src/MightyBoard/Motherboard/Planner.cc **** 		previous_unit_vec[2]= 0.0;
 324:src/MightyBoard/Motherboard/Planner.cc **** #endif
 325:src/MightyBoard/Motherboard/Planner.cc **** 	}
 326:src/MightyBoard/Motherboard/Planner.cc **** 
 327:src/MightyBoard/Motherboard/Planner.cc **** 	void setAccelerationOn(bool on){
  27              	 .loc 1 327 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32              	.LVL0:
 328:src/MightyBoard/Motherboard/Planner.cc **** 		accelerationON = on;
  33              	 .loc 1 328 0
  34 0000 40F20003 	 movw r3,#:lower16:.LANCHOR0
  35 0004 C0F20003 	 movt r3,#:upper16:.LANCHOR0
  36 0008 1870     	 strb r0,[r3,#0]
 329:src/MightyBoard/Motherboard/Planner.cc **** 	}
  37              	 .loc 1 329 0
  38 000a 7047     	 bx lr
  39              	 .cfi_endproc
  40              	.LFE128:
  42              	 .section .text._ZN7planner14setMaxAxisJerkEfh,"ax",%progbits
  43              	 .align 2
  44              	 .global _ZN7planner14setMaxAxisJerkEfh
  45              	 .thumb
  46              	 .thumb_func
  48              	_ZN7planner14setMaxAxisJerkEfh:
  49              	.LFB129:
 330:src/MightyBoard/Motherboard/Planner.cc **** 	
 331:src/MightyBoard/Motherboard/Planner.cc **** 	void setMaxAxisJerk(float jerk, uint8_t axis) {
  50              	 .loc 1 331 0
  51              	 .cfi_startproc
  52              	 
  53              	 
  54              	 
  55              	.LVL1:
 332:src/MightyBoard/Motherboard/Planner.cc **** 		if (axis < STEPPER_COUNT)
  56              	 .loc 1 332 0
  57 0000 0329     	 cmp r1,#3
 333:src/MightyBoard/Motherboard/Planner.cc **** 			axes[axis].max_axis_jerk = jerk;
  58              	 .loc 1 333 0
  59 0002 9FBF     	 itttt ls
  60 0004 40F20003 	 movwls r3,#:lower16:.LANCHOR1
  61 0008 C0F20003 	 movtls r3,#:upper16:.LANCHOR1
  62 000c 01EB8101 	 addls r1,r1,r1,lsl#2
  63              	.LVL2:
  64 0010 03EB8103 	 addls r3,r3,r1,lsl#2
  65 0014 98BF     	 it ls
  66 0016 1861     	 strls r0,[r3,#16]
  67 0018 7047     	 bx lr
  68              	 .cfi_endproc
  69              	.LFE129:
  71 001a 00BF     	 .section .text._ZN7planner16setAxisMaxLengthElhb,"ax",%progbits
  72              	 .align 2
  73              	 .global _ZN7planner16setAxisMaxLengthElhb
  74              	 .thumb
  75              	 .thumb_func
  77              	_ZN7planner16setAxisMaxLengthElhb:
  78              	.LFB130:
 334:src/MightyBoard/Motherboard/Planner.cc **** 	}
 335:src/MightyBoard/Motherboard/Planner.cc **** 	
 336:src/MightyBoard/Motherboard/Planner.cc **** 	void setAxisMaxLength(int32_t length, uint8_t axis, bool max){
  79              	 .loc 1 336 0
  80              	 .cfi_startproc
  81              	 
  82              	 
  83              	 
  84              	.LVL3:
 337:src/MightyBoard/Motherboard/Planner.cc **** 		if (axis < STEPPER_COUNT){
  85              	 .loc 1 337 0
  86 0000 0329     	 cmp r1,#3
  87 0002 13D8     	 bhi .L4
 338:src/MightyBoard/Motherboard/Planner.cc **** 			if (max){
  88              	 .loc 1 338 0
  89 0004 4AB1     	 cbz r2,.L6
 339:src/MightyBoard/Motherboard/Planner.cc **** 				axes[axis].max_length = length;
  90              	 .loc 1 339 0
  91 0006 40F20003 	 movw r3,#:lower16:.LANCHOR1
  92 000a C0F20003 	 movt r3,#:upper16:.LANCHOR1
  93 000e 01EB8101 	 add r1,r1,r1,lsl#2
  94              	.LVL4:
  95 0012 03EB8103 	 add r3,r3,r1,lsl#2
  96 0016 5860     	 str r0,[r3,#4]
  97 0018 7047     	 bx lr
  98              	.LVL5:
  99              	.L6:
 340:src/MightyBoard/Motherboard/Planner.cc **** 			} else {
 341:src/MightyBoard/Motherboard/Planner.cc **** 				axes[axis].min_length = length;
 100              	 .loc 1 341 0
 101 001a 40F20003 	 movw r3,#:lower16:.LANCHOR1
 102 001e C0F20003 	 movt r3,#:upper16:.LANCHOR1
 103 0022 01EB8101 	 add r1,r1,r1,lsl#2
 104              	.LVL6:
 105 0026 03EB8103 	 add r3,r3,r1,lsl#2
 106 002a 9860     	 str r0,[r3,#8]
 107              	.L4:
 108 002c 7047     	 bx lr
 109              	 .cfi_endproc
 110              	.LFE130:
 112 002e 00BF     	 .section .text._ZN7planner12setMaxXYJerkEf,"ax",%progbits
 113              	 .align 2
 114              	 .global _ZN7planner12setMaxXYJerkEf
 115              	 .thumb
 116              	 .thumb_func
 118              	_ZN7planner12setMaxXYJerkEf:
 119              	.LFB131:
 342:src/MightyBoard/Motherboard/Planner.cc **** 			}
 343:src/MightyBoard/Motherboard/Planner.cc **** 		}
 344:src/MightyBoard/Motherboard/Planner.cc **** 	}
 345:src/MightyBoard/Motherboard/Planner.cc **** 	
 346:src/MightyBoard/Motherboard/Planner.cc **** 	
 347:src/MightyBoard/Motherboard/Planner.cc **** 	void setMaxXYJerk(float jerk) {
 120              	 .loc 1 347 0
 121              	 .cfi_startproc
 122              	 
 123              	 
 124              	 
 125              	.LVL7:
 348:src/MightyBoard/Motherboard/Planner.cc **** 		max_xy_jerk = jerk;
 126              	 .loc 1 348 0
 127 0000 40F20003 	 movw r3,#:lower16:.LANCHOR2
 128 0004 C0F20003 	 movt r3,#:upper16:.LANCHOR2
 129 0008 1860     	 str r0,[r3,#0]
 349:src/MightyBoard/Motherboard/Planner.cc **** 	}
 130              	 .loc 1 349 0
 131 000a 7047     	 bx lr
 132              	 .cfi_endproc
 133              	.LFE131:
 135              	 .section .text._ZN7planner17setAxisStepsPerMMEfh,"ax",%progbits
 136              	 .align 2
 137              	 .global _ZN7planner17setAxisStepsPerMMEfh
 138              	 .thumb
 139              	 .thumb_func
 141              	_ZN7planner17setAxisStepsPerMMEfh:
 142              	.LFB132:
 350:src/MightyBoard/Motherboard/Planner.cc **** 	
 351:src/MightyBoard/Motherboard/Planner.cc **** 	void setAxisStepsPerMM(float steps_per_mm, uint8_t axis) {
 143              	 .loc 1 351 0
 144              	 .cfi_startproc
 145              	 
 146              	 
 147              	 
 148              	.LVL8:
 352:src/MightyBoard/Motherboard/Planner.cc **** 		if (axis < STEPPER_COUNT)
 149              	 .loc 1 352 0
 150 0000 0329     	 cmp r1,#3
 353:src/MightyBoard/Motherboard/Planner.cc **** 			axes[axis].steps_per_mm = steps_per_mm;
 151              	 .loc 1 353 0
 152 0002 9FBF     	 itttt ls
 153 0004 40F20003 	 movwls r3,#:lower16:.LANCHOR1
 154 0008 C0F20003 	 movtls r3,#:upper16:.LANCHOR1
 155 000c 01EB8101 	 addls r1,r1,r1,lsl#2
 156              	.LVL9:
 157 0010 43F82100 	 strls r0,[r3,r1,lsl#2]
 158 0014 7047     	 bx lr
 159              	 .cfi_endproc
 160              	.LFE132:
 162              	 .global __aeabi_i2f
 163 0016 00BF     	 .section .text._ZN7planner15setAccelerationEl,"ax",%progbits
 164              	 .align 2
 165              	 .global _ZN7planner15setAccelerationEl
 166              	 .thumb
 167              	 .thumb_func
 169              	_ZN7planner15setAccelerationEl:
 170              	.LFB133:
 354:src/MightyBoard/Motherboard/Planner.cc **** 	}
 355:src/MightyBoard/Motherboard/Planner.cc **** 
 356:src/MightyBoard/Motherboard/Planner.cc **** 	void setAcceleration(int32_t new_acceleration) {
 171              	 .loc 1 356 0
 172              	 .cfi_startproc
 173              	 
 174              	 
 175              	.LVL10:
 176 0000 10B5     	 push {r4,lr}
 177              	.LCFI0:
 178              	 .cfi_def_cfa_offset 8
 179              	 .cfi_offset 14,-4
 180              	 .cfi_offset 4,-8
 357:src/MightyBoard/Motherboard/Planner.cc **** 		default_acceleration = (float)new_acceleration;
 181              	 .loc 1 357 0
 182 0002 40F20004 	 movw r4,#:lower16:.LANCHOR3
 183 0006 C0F20004 	 movt r4,#:upper16:.LANCHOR3
 184 000a FFF7FEFF 	 bl __aeabi_i2f
 185              	.LVL11:
 186 000e 2060     	 str r0,[r4,#0]
 358:src/MightyBoard/Motherboard/Planner.cc **** 	}
 187              	 .loc 1 358 0
 188 0010 10BD     	 pop {r4,pc}
 189              	 .cfi_endproc
 190              	.LFE133:
 192              	 .global __aeabi_fmul
 193              	 .global __aeabi_f2uiz
 194 0012 00BF     	 .section .text._ZN7planner19setAxisAccelerationElh,"ax",%progbits
 195              	 .align 2
 196              	 .global _ZN7planner19setAxisAccelerationElh
 197              	 .thumb
 198              	 .thumb_func
 200              	_ZN7planner19setAxisAccelerationElh:
 201              	.LFB134:
 359:src/MightyBoard/Motherboard/Planner.cc **** 	
 360:src/MightyBoard/Motherboard/Planner.cc **** 	// This is in steps/mm.
 361:src/MightyBoard/Motherboard/Planner.cc **** 	void setAxisAcceleration(int32_t new_acceleration, uint8_t axis) {
 202              	 .loc 1 361 0
 203              	 .cfi_startproc
 204              	 
 205              	 
 206              	.LVL12:
 207 0000 70B5     	 push {r4,r5,r6,lr}
 208              	.LCFI1:
 209              	 .cfi_def_cfa_offset 16
 210              	 .cfi_offset 14,-4
 211              	 .cfi_offset 6,-8
 212              	 .cfi_offset 5,-12
 213              	 .cfi_offset 4,-16
 362:src/MightyBoard/Motherboard/Planner.cc **** 		if (axis < STEPPER_COUNT)
 214              	 .loc 1 362 0
 215 0002 0329     	 cmp r1,#3
 216 0004 10D8     	 bhi .L11
 363:src/MightyBoard/Motherboard/Planner.cc **** 			axes[axis].max_acceleration = (float)new_acceleration*axes[axis].steps_per_mm;
 217              	 .loc 1 363 0
 218 0006 40F20006 	 movw r6,#:lower16:.LANCHOR1
 219 000a C0F20006 	 movt r6,#:upper16:.LANCHOR1
 220 000e 01EB8101 	 add r1,r1,r1,lsl#2
 221              	.LVL13:
 222 0012 4FEA8104 	 lsl r4,r1,#2
 223 0016 3519     	 adds r5,r6,r4
 224 0018 FFF7FEFF 	 bl __aeabi_i2f
 225              	.LVL14:
 226 001c 3159     	 ldr r1,[r6,r4]
 227 001e FFF7FEFF 	 bl __aeabi_fmul
 228 0022 FFF7FEFF 	 bl __aeabi_f2uiz
 229 0026 E860     	 str r0,[r5,#12]
 230              	.L11:
 231 0028 70BD     	 pop {r4,r5,r6,pc}
 232              	 .cfi_endproc
 233              	.LFE134:
 235              	 .global __aeabi_ui2f
 236              	 .global __aeabi_fdiv
 237              	 .global __aeabi_f2d
 238              	 .global __aeabi_d2uiz
 239 002a 00BF     	 .section .text._ZN7planner5Block19calculate_trapezoidERKf,"ax",%progbits
 240              	 .align 2
 241              	 .global _ZN7planner5Block19calculate_trapezoidERKf
 242              	 .thumb
 243              	 .thumb_func
 245              	_ZN7planner5Block19calculate_trapezoidERKf:
 246              	.LFB138:
 364:src/MightyBoard/Motherboard/Planner.cc **** 	}
 365:src/MightyBoard/Motherboard/Planner.cc **** 
 366:src/MightyBoard/Motherboard/Planner.cc **** #ifdef CENTREPEDAL
 367:src/MightyBoard/Motherboard/Planner.cc **** 	void setJunctionDeviation(float new_junction_deviation) {
 368:src/MightyBoard/Motherboard/Planner.cc **** 		default_junction_deviation = new_junction_deviation;
 369:src/MightyBoard/Motherboard/Planner.cc **** 	}
 370:src/MightyBoard/Motherboard/Planner.cc **** #endif
 371:src/MightyBoard/Motherboard/Planner.cc **** 	
 372:src/MightyBoard/Motherboard/Planner.cc **** 	// Calculates the maximum allowable speed at this point when you must be able to reach target_velo
 373:src/MightyBoard/Motherboard/Planner.cc **** 	// acceleration within the allotted distance.
 374:src/MightyBoard/Motherboard/Planner.cc **** 	// Needs to be conbverted to fixed-point.
 375:src/MightyBoard/Motherboard/Planner.cc **** 	FORCE_INLINE float max_allowable_speed(const float &acceleration, const float &target_velocity, co
 376:src/MightyBoard/Motherboard/Planner.cc **** 		return sqrt((target_velocity*target_velocity)-(acceleration*2.0)*distance);
 377:src/MightyBoard/Motherboard/Planner.cc **** 	}
 378:src/MightyBoard/Motherboard/Planner.cc **** 
 379:src/MightyBoard/Motherboard/Planner.cc **** 	// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate usin
 380:src/MightyBoard/Motherboard/Planner.cc **** 	// given acceleration:
 381:src/MightyBoard/Motherboard/Planner.cc **** 	FORCE_INLINE int32_t estimate_acceleration_distance(const int32_t &initial_rate_squared, const int
 382:src/MightyBoard/Motherboard/Planner.cc **** 	{
 383:src/MightyBoard/Motherboard/Planner.cc **** 		if (acceleration_doubled!=0) {
 384:src/MightyBoard/Motherboard/Planner.cc **** 			return (target_rate_squared-initial_rate_squared)/acceleration_doubled;
 385:src/MightyBoard/Motherboard/Planner.cc **** 		}
 386:src/MightyBoard/Motherboard/Planner.cc **** 		else {
 387:src/MightyBoard/Motherboard/Planner.cc **** 			return 0;  // acceleration was 0, set acceleration distance to 0
 388:src/MightyBoard/Motherboard/Planner.cc **** 		}
 389:src/MightyBoard/Motherboard/Planner.cc **** 	}
 390:src/MightyBoard/Motherboard/Planner.cc **** 
 391:src/MightyBoard/Motherboard/Planner.cc **** 	// This function gives you the point at which you must start braking (at the rate of -acceleration
 392:src/MightyBoard/Motherboard/Planner.cc **** 	// you started at speed initial_rate and accelerated until this point and want to end at the final
 393:src/MightyBoard/Motherboard/Planner.cc **** 	// a total travel of distance. This can be used to compute the intersection point between accelera
 394:src/MightyBoard/Motherboard/Planner.cc **** 	// deceleration in the cases where the trapezoid has no plateau (i.e. never reaches maximum speed)
 395:src/MightyBoard/Motherboard/Planner.cc **** 
 396:src/MightyBoard/Motherboard/Planner.cc **** 	FORCE_INLINE int32_t intersection_distance(const int32_t &initial_rate_squared, const int32_t &fin
 397:src/MightyBoard/Motherboard/Planner.cc **** 	{
 398:src/MightyBoard/Motherboard/Planner.cc **** 		if (acceleration_quadrupled!=0) {
 399:src/MightyBoard/Motherboard/Planner.cc **** 			return (acceleration_mangled*distance-initial_rate_squared+final_rate_squared)/acceleration_quad
 400:src/MightyBoard/Motherboard/Planner.cc **** 		}
 401:src/MightyBoard/Motherboard/Planner.cc **** 		else {
 402:src/MightyBoard/Motherboard/Planner.cc **** 			return 0;  // acceleration was 0, set intersection distance to 0
 403:src/MightyBoard/Motherboard/Planner.cc **** 		}
 404:src/MightyBoard/Motherboard/Planner.cc **** 	}
 405:src/MightyBoard/Motherboard/Planner.cc **** 
 406:src/MightyBoard/Motherboard/Planner.cc **** // Disabled because it's not used, but if it is in the future, here's how
 407:src/MightyBoard/Motherboard/Planner.cc **** #if 0
 408:src/MightyBoard/Motherboard/Planner.cc **** 	// Calculates the time (not distance) in microseconds (S*1,000,000) it takes to go from initial_ra
 409:src/MightyBoard/Motherboard/Planner.cc **** 	FORCE_INLINE uint32_t estimate_time_to_accelerate(float initial_rate, float acceleration, float di
 410:src/MightyBoard/Motherboard/Planner.cc **** 
 411:src/MightyBoard/Motherboard/Planner.cc **** 		if (acceleration!=0.0) {
 412:src/MightyBoard/Motherboard/Planner.cc **** 			return abs((sqrt(2*acceleration*distance + initial_rate*initial_rate)-initial_rate)/acceleration
 413:src/MightyBoard/Motherboard/Planner.cc **** 		}
 414:src/MightyBoard/Motherboard/Planner.cc **** 		else {
 415:src/MightyBoard/Motherboard/Planner.cc **** 			return (distance/initial_rate) * 1000000; // no acceleration is just distance/rate
 416:src/MightyBoard/Motherboard/Planner.cc **** 		}
 417:src/MightyBoard/Motherboard/Planner.cc **** 	}
 418:src/MightyBoard/Motherboard/Planner.cc **** #endif
 419:src/MightyBoard/Motherboard/Planner.cc **** 
 420:src/MightyBoard/Motherboard/Planner.cc **** 	// Calculates trapezoid parameters so that the entry- and exit-speed is compensated by the provide
 421:src/MightyBoard/Motherboard/Planner.cc **** 	// calculate_trapezoid_for_block(block, block->entry_speed/block->nominal_speed, exit_factor_speed
 422:src/MightyBoard/Motherboard/Planner.cc **** 	bool Block::calculate_trapezoid(const float &exit_factor_speed) {
 247              	 .loc 1 422 0
 248              	 .cfi_startproc
 249              	 
 250              	 
 251              	.LVL15:
 252 0000 2DE9F843 	 push {r3,r4,r5,r6,r7,r8,r9,lr}
 253              	.LCFI2:
 254              	 .cfi_def_cfa_offset 32
 255              	 .cfi_offset 14,-4
 256              	 .cfi_offset 9,-8
 257              	 .cfi_offset 8,-12
 258              	 .cfi_offset 7,-16
 259              	 .cfi_offset 6,-20
 260              	 .cfi_offset 5,-24
 261              	 .cfi_offset 4,-28
 262              	 .cfi_offset 3,-32
 263 0004 0446     	 mov r4,r0
 264 0006 8946     	 mov r9,r1
 265              	.LBB166:
 423:src/MightyBoard/Motherboard/Planner.cc **** 
 424:src/MightyBoard/Motherboard/Planner.cc **** 		float entry_factor = entry_speed/nominal_speed;
 266              	 .loc 1 424 0
 267 0008 066A     	 ldr r6,[r0,#32]
 268              	.LVL16:
 425:src/MightyBoard/Motherboard/Planner.cc **** 		float exit_factor = exit_factor_speed/nominal_speed;
 426:src/MightyBoard/Motherboard/Planner.cc **** 		
 427:src/MightyBoard/Motherboard/Planner.cc **** 		uint32_t local_initial_rate = ceil((float)nominal_rate*entry_factor); // (step/min)
 269              	 .loc 1 427 0
 270 000a D0F83880 	 ldr r8,[r0,#56]
 271 000e 4046     	 mov r0,r8
 272              	.LVL17:
 273 0010 FFF7FEFF 	 bl __aeabi_ui2f
 274              	.LVL18:
 275 0014 0746     	 mov r7,r0
 424:src/MightyBoard/Motherboard/Planner.cc **** 		float entry_factor = entry_speed/nominal_speed;
 276              	 .loc 1 424 0
 277 0016 606A     	 ldr r0,[r4,#36]
 278              	.LVL19:
 279 0018 3146     	 mov r1,r6
 280 001a FFF7FEFF 	 bl __aeabi_fdiv
 281              	.LVL20:
 282 001e 0146     	 mov r1,r0
 283              	 .loc 1 427 0
 284 0020 3846     	 mov r0,r7
 285 0022 FFF7FEFF 	 bl __aeabi_fmul
 286 0026 FFF7FEFF 	 bl __aeabi_f2d
 287 002a FFF7FEFF 	 bl ceil
 288 002e FFF7FEFF 	 bl __aeabi_d2uiz
 289 0032 0546     	 mov r5,r0
 290              	.LVL21:
 425:src/MightyBoard/Motherboard/Planner.cc **** 		float exit_factor = exit_factor_speed/nominal_speed;
 291              	 .loc 1 425 0
 292 0034 D9F80000 	 ldr r0,[r9,#0]
 293              	.LVL22:
 294 0038 3146     	 mov r1,r6
 295 003a FFF7FEFF 	 bl __aeabi_fdiv
 296              	.LVL23:
 428:src/MightyBoard/Motherboard/Planner.cc **** 		uint32_t local_final_rate = ceil((float)nominal_rate*exit_factor); // (step/min)
 297              	 .loc 1 428 0
 298 003e 3946     	 mov r1,r7
 299 0040 FFF7FEFF 	 bl __aeabi_fmul
 300 0044 FFF7FEFF 	 bl __aeabi_f2d
 301 0048 FFF7FEFF 	 bl ceil
 302 004c FFF7FEFF 	 bl __aeabi_d2uiz
 303              	.LVL24:
 429:src/MightyBoard/Motherboard/Planner.cc **** 		
 430:src/MightyBoard/Motherboard/Planner.cc **** 		// Limit minimal step rate (Otherwise the timer will overflow.)
 431:src/MightyBoard/Motherboard/Planner.cc **** 		if(local_initial_rate < 120)
 432:src/MightyBoard/Motherboard/Planner.cc **** 			local_initial_rate = 120;
 304              	 .loc 1 432 0
 305 0050 772D     	 cmp r5,#119
 306 0052 98BF     	 it ls
 307 0054 7825     	 movls r5,#120
 308              	.LVL25:
 433:src/MightyBoard/Motherboard/Planner.cc **** 		if(local_final_rate < 120)
 434:src/MightyBoard/Motherboard/Planner.cc **** 			local_final_rate = 120;
 309              	 .loc 1 434 0
 310 0056 7728     	 cmp r0,#119
 311 0058 98BF     	 it ls
 312 005a 7820     	 movls r0,#120
 313              	.LVL26:
 435:src/MightyBoard/Motherboard/Planner.cc **** 		
 436:src/MightyBoard/Motherboard/Planner.cc **** 		int32_t local_initial_rate_squared = (local_initial_rate * local_initial_rate);
 314              	 .loc 1 436 0
 315 005c 05FB05FC 	 mul ip,r5,r5
 316              	.LVL27:
 437:src/MightyBoard/Motherboard/Planner.cc **** 		int32_t local_final_rate_squared   = (local_final_rate   * local_final_rate);
 317              	 .loc 1 437 0
 318 0060 00FB00F7 	 mul r7,r0,r0
 319              	.LVL28:
 438:src/MightyBoard/Motherboard/Planner.cc **** 		int32_t nominal_rate_squared       = (nominal_rate       * nominal_rate);
 439:src/MightyBoard/Motherboard/Planner.cc **** 		
 440:src/MightyBoard/Motherboard/Planner.cc **** 		int32_t local_acceleration_doubled = acceleration_st<<(1); // == acceleration_st*2
 320              	 .loc 1 440 0
 321 0064 636C     	 ldr r3,[r4,#68]
 322              	.LVL29:
 323              	.LBB167:
 324              	.LBB168:
 383:src/MightyBoard/Motherboard/Planner.cc **** 		if (acceleration_doubled!=0) {
 325              	 .loc 1 383 0
 326 0066 5900     	 lsls r1,r3,#1
 387:src/MightyBoard/Motherboard/Planner.cc **** 			return 0;  // acceleration was 0, set acceleration distance to 0
 327              	 .loc 1 387 0
 328 0068 04BF     	 itt eq
 329 006a 0023     	 moveq r3,#0
 330 006c 9846     	 moveq r8,r3
 331              	.LVL30:
 383:src/MightyBoard/Motherboard/Planner.cc **** 		if (acceleration_doubled!=0) {
 332              	 .loc 1 383 0
 333 006e 0FD0     	 beq .L16
 334              	.LBE168:
 335              	.LBE167:
 438:src/MightyBoard/Motherboard/Planner.cc **** 		int32_t nominal_rate_squared       = (nominal_rate       * nominal_rate);
 336              	 .loc 1 438 0
 337 0070 08FB08F8 	 mul r8,r8,r8
 338              	.LBB170:
 339              	.LBB169:
 384:src/MightyBoard/Motherboard/Planner.cc **** 			return (target_rate_squared-initial_rate_squared)/acceleration_doubled;
 340              	 .loc 1 384 0
 341 0074 CCEB0803 	 rsb r3,ip,r8
 342 0078 93FBF1F3 	 sdiv r3,r3,r1
 343              	.LVL31:
 344              	.LBE169:
 345              	.LBE170:
 441:src/MightyBoard/Motherboard/Planner.cc **** 		
 442:src/MightyBoard/Motherboard/Planner.cc **** 		int32_t accelerate_steps =
 443:src/MightyBoard/Motherboard/Planner.cc **** 			/*ceil*/(estimate_acceleration_distance(local_initial_rate_squared, nominal_rate_squared, local_
 444:src/MightyBoard/Motherboard/Planner.cc **** 		int32_t decelerate_steps =
 445:src/MightyBoard/Motherboard/Planner.cc **** 			/*floor*/(estimate_acceleration_distance(nominal_rate_squared, local_final_rate_squared, -local_
 346              	 .loc 1 445 0
 347 007c C1F10002 	 rsb r2,r1,#0
 348              	.LVL32:
 349              	.LBB171:
 350              	.LBB172:
 383:src/MightyBoard/Motherboard/Planner.cc **** 		if (acceleration_doubled!=0) {
 351              	 .loc 1 383 0
 352 0080 22B1     	 cbz r2,.L22
 384:src/MightyBoard/Motherboard/Planner.cc **** 			return (target_rate_squared-initial_rate_squared)/acceleration_doubled;
 353              	 .loc 1 384 0
 354 0082 C8EB0708 	 rsb r8,r8,r7
 355 0086 98FBF2F8 	 sdiv r8,r8,r2
 356 008a 01E0     	 b .L16
 357              	.L22:
 387:src/MightyBoard/Motherboard/Planner.cc **** 			return 0;  // acceleration was 0, set acceleration distance to 0
 358              	 .loc 1 387 0
 359 008c 4FF00008 	 mov r8,#0
 360              	.LVL33:
 361              	.L16:
 362              	.LBE172:
 363              	.LBE171:
 446:src/MightyBoard/Motherboard/Planner.cc **** 
 447:src/MightyBoard/Motherboard/Planner.cc **** 		// Calculate the size of Plateau of Nominal Rate.
 448:src/MightyBoard/Motherboard/Planner.cc **** 		int32_t plateau_steps = step_event_count-accelerate_steps-decelerate_steps;
 364              	 .loc 1 448 0
 365 0090 A68A     	 ldrh r6,[r4,#20]
 366 0092 F21A     	 subs r2,r6,r3
 367              	.LVL34:
 368              	.LBB173:
 449:src/MightyBoard/Motherboard/Planner.cc **** 
 450:src/MightyBoard/Motherboard/Planner.cc **** 		// Is the Plateau of Nominal Rate smaller than nothing? That means no cruising, and we will
 451:src/MightyBoard/Motherboard/Planner.cc **** 		// have to use intersection_distance() to calculate when to abort acceleration and start braking
 452:src/MightyBoard/Motherboard/Planner.cc **** 		// in order to reach the local_final_rate exactly at the end of this block.
 453:src/MightyBoard/Motherboard/Planner.cc **** 		
 454:src/MightyBoard/Motherboard/Planner.cc **** 		if (plateau_steps < 0) {
 369              	 .loc 1 454 0
 370 0094 B2EB0808 	 subs r8,r2,r8
 371              	.LVL35:
 372 0098 11D5     	 bpl .L17
 373              	.LVL36:
 374              	.LBB174:
 375              	.LBB175:
 376              	.LBB176:
 398:src/MightyBoard/Motherboard/Planner.cc **** 		if (acceleration_quadrupled!=0) {
 377              	 .loc 1 398 0
 378 009a 4A00     	 lsls r2,r1,#1
 399:src/MightyBoard/Motherboard/Planner.cc **** 			return (acceleration_mangled*distance-initial_rate_squared+final_rate_squared)/acceleration_quad
 379              	 .loc 1 399 0
 380 009c 1FBF     	 itttt ne
 381 009e 06FB01F3 	 mulne r3,r6,r1
 382 00a2 CCEB0303 	 rsbne r3,ip,r3
 383 00a6 FB18     	 addne r3,r7,r3
 384 00a8 93FBF2F3 	 sdivne r3,r3,r2
 385              	.LVL37:
 386 00ac 14BF     	 ite ne
 387 00ae 23EAE373 	 bicne r3,r3,r3,asr#31
 388              	.LVL38:
 109:src/MightyBoard/Motherboard/Planner.cc **** inline const T& max(const T& a, const T& b) { return (a)>(b)?(a):(b); }
 389              	 .loc 1 109 0
 390 00b2 0023     	 moveq r3,#0
 391              	.LVL39:
 399:src/MightyBoard/Motherboard/Planner.cc **** 			return (acceleration_mangled*distance-initial_rate_squared+final_rate_squared)/acceleration_quad
 392              	 .loc 1 399 0
 393 00b4 B342     	 cmp r3,r6
 394 00b6 A8BF     	 it ge
 395 00b8 3346     	 movge r3,r6
 396              	.LVL40:
 455:src/MightyBoard/Motherboard/Planner.cc **** 
 456:src/MightyBoard/Motherboard/Planner.cc **** 			// To get the math right when shifting, we need to alter the first acceleration_doubled by bit_s
 457:src/MightyBoard/Motherboard/Planner.cc **** 			int32_t local_acceleration_quadrupled = local_acceleration_doubled<<(1); // == acceleration_st*2
 458:src/MightyBoard/Motherboard/Planner.cc **** 			accelerate_steps = /*ceil*/(
 459:src/MightyBoard/Motherboard/Planner.cc **** 				intersection_distance(local_initial_rate_squared, local_final_rate_squared, local_acceleration_
 460:src/MightyBoard/Motherboard/Planner.cc **** 			accelerate_steps = max(accelerate_steps, 0L); // Check limits due to numerical round-off
 461:src/MightyBoard/Motherboard/Planner.cc **** 			
 462:src/MightyBoard/Motherboard/Planner.cc **** 			accelerate_steps = min(accelerate_steps, (int32_t)step_event_count);
 463:src/MightyBoard/Motherboard/Planner.cc **** 			plateau_steps = 0;
 397              	 .loc 1 463 0
 398 00ba 4FF00008 	 mov r8,#0
 399              	.LVL41:
 400              	.L17:
 401              	.LBE176:
 402              	.LBE175:
 403              	.LBE174:
 404              	.LBE173:
 464:src/MightyBoard/Motherboard/Planner.cc **** 
 465:src/MightyBoard/Motherboard/Planner.cc **** 		}
 466:src/MightyBoard/Motherboard/Planner.cc **** 
 467:src/MightyBoard/Motherboard/Planner.cc **** 		//bool successfully_replanned = true;
 468:src/MightyBoard/Motherboard/Planner.cc **** //		ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {  // Fill variables used by the stepper in a critical sectio
 469:src/MightyBoard/Motherboard/Planner.cc **** 				accelerate_until = accelerate_steps;
 405              	 .loc 1 469 0
 406 00be 9BB2     	 uxth r3,r3
 407              	.LVL42:
 408 00c0 E382     	 strh r3,[r4,#22]
 470:src/MightyBoard/Motherboard/Planner.cc **** 				decelerate_after = accelerate_steps+plateau_steps;
 409              	 .loc 1 470 0
 410 00c2 4344     	 add r3,r3,r8
 411 00c4 2383     	 strh r3,[r4,#24]
 471:src/MightyBoard/Motherboard/Planner.cc **** 				initial_rate     = local_initial_rate;
 412              	 .loc 1 471 0
 413 00c6 E563     	 str r5,[r4,#60]
 472:src/MightyBoard/Motherboard/Planner.cc **** 				final_rate       = local_final_rate;
 414              	 .loc 1 472 0
 415 00c8 2064     	 str r0,[r4,#64]
 416              	.LBE166:
 473:src/MightyBoard/Motherboard/Planner.cc **** 		
 474:src/MightyBoard/Motherboard/Planner.cc **** //		} // ISR state will be automatically restored here
 475:src/MightyBoard/Motherboard/Planner.cc **** 		
 476:src/MightyBoard/Motherboard/Planner.cc **** 	
 477:src/MightyBoard/Motherboard/Planner.cc **** 		
 478:src/MightyBoard/Motherboard/Planner.cc **** 		return true; //successfully_replanned;
 479:src/MightyBoard/Motherboard/Planner.cc **** 	}
 417              	 .loc 1 479 0
 418 00ca 4FF00100 	 mov r0,#1
 419              	.LVL43:
 420 00ce BDE8F883 	 pop {r3,r4,r5,r6,r7,r8,r9,pc}
 421              	 .cfi_endproc
 422              	.LFE138:
 424              	 .global __aeabi_fcmpeq
 425              	 .global __aeabi_fcmpge
 426              	 .global __aeabi_dadd
 427              	 .global __aeabi_dmul
 428              	 .global __aeabi_dsub
 429              	 .global __aeabi_d2f
 430              	 .global __aeabi_fcmpgt
 431              	 .section .text._ZN7planner20planner_reverse_passEv,"ax",%progbits
 432              	 .align 2
 433              	 .global _ZN7planner20planner_reverse_passEv
 434              	 .thumb
 435              	 .thumb_func
 437              	_ZN7planner20planner_reverse_passEv:
 438              	.LFB141:
 480:src/MightyBoard/Motherboard/Planner.cc **** 	
 481:src/MightyBoard/Motherboard/Planner.cc **** 	// forward declare, so we can order the code in a slightly more readable fashion
 482:src/MightyBoard/Motherboard/Planner.cc **** //	inline void planner_reverse_pass_kernel(Block *previous, Block *current, Block *next);
 483:src/MightyBoard/Motherboard/Planner.cc **** 	void planner_reverse_pass();
 484:src/MightyBoard/Motherboard/Planner.cc **** 	inline void planner_forward_pass_kernel(Block *previous, Block *current, Block *next);
 485:src/MightyBoard/Motherboard/Planner.cc **** 	void planner_forward_pass();
 486:src/MightyBoard/Motherboard/Planner.cc **** 	bool planner_recalculate_trapezoids();
 487:src/MightyBoard/Motherboard/Planner.cc **** 
 488:src/MightyBoard/Motherboard/Planner.cc **** 	// Recalculates the motion plan according to the following algorithm:
 489:src/MightyBoard/Motherboard/Planner.cc **** 	//
 490:src/MightyBoard/Motherboard/Planner.cc **** 	//   1. Go over every block in reverse order and calculate a junction speed reduction (i.e. block_
 491:src/MightyBoard/Motherboard/Planner.cc **** 	//      so that:
 492:src/MightyBoard/Motherboard/Planner.cc **** 	//     a. The junction speed is equal to or less than the maximum junction speed limit
 493:src/MightyBoard/Motherboard/Planner.cc **** 	//     b. No speed reduction within one block requires faster deceleration than the one, true cons
 494:src/MightyBoard/Motherboard/Planner.cc **** 	//        acceleration.
 495:src/MightyBoard/Motherboard/Planner.cc **** 	//   2. Go over every block in chronological order and dial down junction speed values if 
 496:src/MightyBoard/Motherboard/Planner.cc **** 	//     a. The speed increase within one block would require faster acceleration than the one, true
 497:src/MightyBoard/Motherboard/Planner.cc **** 	//        constant acceleration.
 498:src/MightyBoard/Motherboard/Planner.cc **** 	//
 499:src/MightyBoard/Motherboard/Planner.cc **** 	// When these stages are complete all blocks have an entry speed that will allow all speed changes
 500:src/MightyBoard/Motherboard/Planner.cc **** 	// be performed using only the one, true constant acceleration, and where no junction speed is gre
 501:src/MightyBoard/Motherboard/Planner.cc **** 	// than the max limit. Finally it will:
 502:src/MightyBoard/Motherboard/Planner.cc **** 	//
 503:src/MightyBoard/Motherboard/Planner.cc **** 	//   3. Recalculate trapezoids for all blocks using the recently updated junction speeds. Block tr
 504:src/MightyBoard/Motherboard/Planner.cc **** 	//      with no updated junction speeds will not be recalculated and assumed ok as is.
 505:src/MightyBoard/Motherboard/Planner.cc **** 	//
 506:src/MightyBoard/Motherboard/Planner.cc **** 	// All planner computations are performed with doubles (float on Arduinos) to minimize numerical r
 507:src/MightyBoard/Motherboard/Planner.cc **** 	// off errors. Only when planned values are converted to stepper rate parameters, these are intege
 508:src/MightyBoard/Motherboard/Planner.cc **** 
 509:src/MightyBoard/Motherboard/Planner.cc **** 	void planner_recalculate() {   
 510:src/MightyBoard/Motherboard/Planner.cc **** 			planner_reverse_pass();
 511:src/MightyBoard/Motherboard/Planner.cc **** 			planner_forward_pass();
 512:src/MightyBoard/Motherboard/Planner.cc **** 			planner_recalculate_trapezoids();
 513:src/MightyBoard/Motherboard/Planner.cc **** 
 514:src/MightyBoard/Motherboard/Planner.cc **** 	}
 515:src/MightyBoard/Motherboard/Planner.cc **** 
 516:src/MightyBoard/Motherboard/Planner.cc **** 	// The kernel called by planner_recalculate() when scanning the plan from last to first entry.
 517:src/MightyBoard/Motherboard/Planner.cc **** 	inline void planner_reverse_pass_kernel(Block *current, Block *next) {
 518:src/MightyBoard/Motherboard/Planner.cc **** 		if(!current) { return; }
 519:src/MightyBoard/Motherboard/Planner.cc **** 
 520:src/MightyBoard/Motherboard/Planner.cc **** 		// If entry speed is already at the maximum entry speed, no need to recheck. Block is cruising.
 521:src/MightyBoard/Motherboard/Planner.cc **** 		// If not, block in state of acceleration or deceleration. Reset entry speed to maximum and
 522:src/MightyBoard/Motherboard/Planner.cc **** 		// check for maximum allowable speed reductions to ensure maximum possible planned speed.
 523:src/MightyBoard/Motherboard/Planner.cc **** 		// We cannot change the entry speed of a Busy block ... we've already entered...
 524:src/MightyBoard/Motherboard/Planner.cc **** 		if (current->entry_speed != current->max_entry_speed && !current->flags & Block::Busy) {
 525:src/MightyBoard/Motherboard/Planner.cc **** 			// If nominal length true, max junction speed is guaranteed to be reached. Only compute
 526:src/MightyBoard/Motherboard/Planner.cc **** 			// for max allowable speed if block is decelerating and nominal length is false.
 527:src/MightyBoard/Motherboard/Planner.cc **** 			if ((!(current->flags & Block::NominalLength)) && (current->max_entry_speed >= next->entry_speed
 528:src/MightyBoard/Motherboard/Planner.cc **** 				current->entry_speed = min( current->max_entry_speed,
 529:src/MightyBoard/Motherboard/Planner.cc **** 					max_allowable_speed(-current->acceleration,next->entry_speed,current->millimeters));
 530:src/MightyBoard/Motherboard/Planner.cc **** 			} else {
 531:src/MightyBoard/Motherboard/Planner.cc **** 				current->entry_speed = current->max_entry_speed;
 532:src/MightyBoard/Motherboard/Planner.cc **** 			}
 533:src/MightyBoard/Motherboard/Planner.cc **** 			current->flags |= Block::Recalculate;
 534:src/MightyBoard/Motherboard/Planner.cc **** 		}
 535:src/MightyBoard/Motherboard/Planner.cc **** 	}
 536:src/MightyBoard/Motherboard/Planner.cc **** 
 537:src/MightyBoard/Motherboard/Planner.cc **** 	// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward
 538:src/MightyBoard/Motherboard/Planner.cc **** 	// implements the reverse pass.
 539:src/MightyBoard/Motherboard/Planner.cc **** 	void planner_reverse_pass() {
 439              	 .loc 1 539 0
 440              	 .cfi_startproc
 441              	 
 442              	 
 443 0000 2DE9F04F 	 push {r4,r5,r6,r7,r8,r9,sl,fp,lr}
 444              	.LCFI3:
 445              	 .cfi_def_cfa_offset 36
 446              	 .cfi_offset 14,-4
 447              	 .cfi_offset 11,-8
 448              	 .cfi_offset 10,-12
 449              	 .cfi_offset 9,-16
 450              	 .cfi_offset 8,-20
 451              	 .cfi_offset 7,-24
 452              	 .cfi_offset 6,-28
 453              	 .cfi_offset 5,-32
 454              	 .cfi_offset 4,-36
 455 0004 83B0     	 sub sp,sp,#12
 456              	.LCFI4:
 457              	 .cfi_def_cfa_offset 48
 458              	.LVL44:
 459              	.LBB177:
 460              	.LBB178:
 461              	.LBB179:
 212:src/MightyBoard/Motherboard/Planner.cc **** 			return ((head-tail+size) & size_mask);
 462              	 .loc 1 212 0
 463 0006 40F20003 	 movw r3,#:lower16:.LANCHOR4
 464 000a C0F20003 	 movt r3,#:upper16:.LANCHOR4
 465 000e 1878     	 ldrb r0,[r3,#0]
 466 0010 5A78     	 ldrb r2,[r3,#1]
 467 0012 9978     	 ldrb r1,[r3,#2]
 468 0014 4118     	 adds r1,r0,r1
 469 0016 891A     	 subs r1,r1,r2
 470 0018 DA78     	 ldrb r2,[r3,#3]
 471              	.LBE179:
 472              	.LBE178:
 540:src/MightyBoard/Motherboard/Planner.cc **** 		if (block_buffer.getUsedCount() > 1) {
 473              	 .loc 1 540 0
 474 001a 01EA0203 	 and r3,r1,r2
 475 001e 012B     	 cmp r3,#1
 476 0020 68D9     	 bls .L24
 477              	.LVL45:
 478              	.LBB180:
 479              	.LBB181:
 480              	.LBB182:
 163:src/MightyBoard/Motherboard/Planner.cc **** 			return head;
 481              	 .loc 1 163 0
 482 0022 40F20003 	 movw r3,#:lower16:.LANCHOR4
 483 0026 C0F20003 	 movt r3,#:upper16:.LANCHOR4
 484 002a 1E78     	 ldrb r6,[r3,#0]
 485              	.LVL46:
 486              	.LBE182:
 487              	.LBE181:
 488              	.LBB183:
 489              	.LBB184:
 188:src/MightyBoard/Motherboard/Planner.cc **** 			return data[index];
 490              	 .loc 1 188 0
 491 002c 5B68     	 ldr r3,[r3,#4]
 492 002e 4FF04C08 	 mov r8,#76
 493 0032 08FB0638 	 mla r8,r8,r6,r3
 494              	.LVL47:
 495              	.LBE184:
 496              	.LBE183:
 497              	.LBB185:
 498              	.LBB186:
 178:src/MightyBoard/Motherboard/Planner.cc **** 			return (((from+size) - 1) & size_mask);
 499              	 .loc 1 178 0
 500 0036 40F20005 	 movw r5,#:lower16:.LANCHOR4
 501 003a C0F20005 	 movt r5,#:upper16:.LANCHOR4
 502              	.LBE186:
 503              	.LBE185:
 504              	.LBB188:
 505              	.LBB189:
 188:src/MightyBoard/Motherboard/Planner.cc **** 			return data[index];
 506              	 .loc 1 188 0
 507 003e 4FF04C09 	 mov r9,#76
 508 0042 00E0     	 b .L32
 509              	.LVL48:
 510              	.L33:
 511              	.LBE189:
 512              	.LBE188:
 541:src/MightyBoard/Motherboard/Planner.cc **** 			uint8_t block_index = block_buffer.getHeadIndex();
 542:src/MightyBoard/Motherboard/Planner.cc **** 			Block *block[2] = { &block_buffer[block_index], NULL };
 543:src/MightyBoard/Motherboard/Planner.cc **** 			do { 
 544:src/MightyBoard/Motherboard/Planner.cc **** 				block_index = block_buffer.getPreviousIndex(block_index); 
 545:src/MightyBoard/Motherboard/Planner.cc **** 				block[1] = block[0];
 546:src/MightyBoard/Motherboard/Planner.cc **** 				block[0] = &block_buffer[block_index];
 513              	 .loc 1 546 0
 514 0044 A046     	 mov r8,r4
 515              	.LVL49:
 516              	.L32:
 517              	.LBB191:
 518              	.LBB187:
 178:src/MightyBoard/Motherboard/Planner.cc **** 			return (((from+size) - 1) & size_mask);
 519              	 .loc 1 178 0 discriminator 1
 520 0046 AB78     	 ldrb r3,[r5,#2]
 521 0048 03F1FF33 	 add r3,r3,#-1
 522 004c F618     	 adds r6,r6,r3
 523              	.LVL50:
 524 004e EB78     	 ldrb r3,[r5,#3]
 525 0050 1E40     	 ands r6,r6,r3
 526              	.LVL51:
 527              	.LBE187:
 528              	.LBE191:
 529              	.LBB192:
 530              	.LBB190:
 188:src/MightyBoard/Motherboard/Planner.cc **** 			return data[index];
 531              	 .loc 1 188 0 discriminator 1
 532 0052 6C68     	 ldr r4,[r5,#4]
 533 0054 09FB0644 	 mla r4,r9,r6,r4
 534              	.LVL52:
 535              	.LBE190:
 536              	.LBE192:
 537              	.LBB193:
 538              	.LBB194:
 518:src/MightyBoard/Motherboard/Planner.cc **** 		if(!current) { return; }
 539              	 .loc 1 518 0 discriminator 1
 540 0058 002C     	 cmp r4,#0
 541 005a 48D0     	 beq .L26
 524:src/MightyBoard/Motherboard/Planner.cc **** 		if (current->entry_speed != current->max_entry_speed && !current->flags & Block::Busy) {
 542              	 .loc 1 524 0
 543 005c A76A     	 ldr r7,[r4,#40]
 544 005e 606A     	 ldr r0,[r4,#36]
 545 0060 3946     	 mov r1,r7
 546 0062 FFF7FEFF 	 bl __aeabi_fcmpeq
 547 0066 0028     	 cmp r0,#0
 548 0068 41D1     	 bne .L26
 549 006a 94F84830 	 ldrb r3,[r4,#72]
 550 006e 002B     	 cmp r3,#0
 551 0070 3DD1     	 bne .L26
 527:src/MightyBoard/Motherboard/Planner.cc **** 			if ((!(current->flags & Block::NominalLength)) && (current->max_entry_speed >= next->entry_speed
 552              	 .loc 1 527 0
 553 0072 D8F82480 	 ldr r8,[r8,#36]
 554              	.LVL53:
 555 0076 3846     	 mov r0,r7
 556 0078 4146     	 mov r1,r8
 557 007a FFF7FEFF 	 bl __aeabi_fcmpge
 558 007e 0028     	 cmp r0,#0
 559 0080 2ED0     	 beq .L36
 560              	.LVL54:
 561              	.LBB195:
 562              	.LBB196:
 376:src/MightyBoard/Motherboard/Planner.cc **** 		return sqrt((target_velocity*target_velocity)-(acceleration*2.0)*distance);
 563              	 .loc 1 376 0
 564 0082 4046     	 mov r0,r8
 565 0084 4146     	 mov r1,r8
 566 0086 FFF7FEFF 	 bl __aeabi_fmul
 567 008a FFF7FEFF 	 bl __aeabi_f2d
 568 008e CDE90001 	 strd r0,[sp]
 569              	.LBE196:
 570              	.LBE195:
 529:src/MightyBoard/Motherboard/Planner.cc **** 					max_allowable_speed(-current->acceleration,next->entry_speed,current->millimeters));
 571              	 .loc 1 529 0
 572 0092 206B     	 ldr r0,[r4,#48]
 573 0094 00F10040 	 add r0,r0,#-2147483648
 574              	.LBB198:
 575              	.LBB197:
 376:src/MightyBoard/Motherboard/Planner.cc **** 		return sqrt((target_velocity*target_velocity)-(acceleration*2.0)*distance);
 576              	 .loc 1 376 0
 577 0098 FFF7FEFF 	 bl __aeabi_f2d
 578 009c 0246     	 mov r2,r0
 579 009e 0B46     	 mov r3,r1
 580 00a0 FFF7FEFF 	 bl __aeabi_dadd
 581 00a4 8246     	 mov sl,r0
 582 00a6 8B46     	 mov fp,r1
 583 00a8 E06A     	 ldr r0,[r4,#44]
 584 00aa FFF7FEFF 	 bl __aeabi_f2d
 585 00ae 0246     	 mov r2,r0
 586 00b0 0B46     	 mov r3,r1
 587 00b2 5046     	 mov r0,sl
 588 00b4 5946     	 mov r1,fp
 589 00b6 FFF7FEFF 	 bl __aeabi_dmul
 590 00ba 0246     	 mov r2,r0
 591 00bc 0B46     	 mov r3,r1
 592 00be DDE90001 	 ldrd r0,[sp]
 593 00c2 FFF7FEFF 	 bl __aeabi_dsub
 594 00c6 FFF7FEFF 	 bl sqrt
 595 00ca FFF7FEFF 	 bl __aeabi_d2f
 596 00ce 8046     	 mov r8,r0
 597              	.LVL55:
 598              	.LBE197:
 599              	.LBE198:
 600              	.LBB199:
 601              	.LBB200:
 106:src/MightyBoard/Motherboard/Planner.cc **** inline const T& min(const T& a, const T& b) { return (a)<(b)?(a):(b); }
 602              	 .loc 1 106 0
 603 00d0 A76A     	 ldr r7,[r4,#40]
 604 00d2 3946     	 mov r1,r7
 605 00d4 FFF7FEFF 	 bl __aeabi_fcmpgt
 606 00d8 00B9     	 cbnz r0,.L30
 607 00da 4746     	 mov r7,r8
 608              	.L30:
 609              	.LBE200:
 610              	.LBE199:
 529:src/MightyBoard/Motherboard/Planner.cc **** 					max_allowable_speed(-current->acceleration,next->entry_speed,current->millimeters));
 611              	 .loc 1 529 0
 612 00dc 6762     	 str r7,[r4,#36]
 613 00de 00E0     	 b .L31
 614              	.LVL56:
 615              	.L36:
 531:src/MightyBoard/Motherboard/Planner.cc **** 				current->entry_speed = current->max_entry_speed;
 616              	 .loc 1 531 0
 617 00e0 6762     	 str r7,[r4,#36]
 618              	.L31:
 533:src/MightyBoard/Motherboard/Planner.cc **** 			current->flags |= Block::Recalculate;
 619              	 .loc 1 533 0
 620 00e2 94F84830 	 ldrb r3,[r4,#72]
 621 00e6 43F00203 	 orr r3,r3,#2
 622 00ea 84F84830 	 strb r3,[r4,#72]
 623              	.L26:
 624              	.LVL57:
 625              	.LBE194:
 626              	.LBE193:
 627              	.LBB201:
 628              	.LBB202:
 170:src/MightyBoard/Motherboard/Planner.cc **** 			return tail;
 629              	 .loc 1 170 0
 630 00ee 6B78     	 ldrb r3,[r5,#1]
 631              	.LBE202:
 632              	.LBE201:
 543:src/MightyBoard/Motherboard/Planner.cc **** 			do { 
 633              	 .loc 1 543 0
 634 00f0 9E42     	 cmp r6,r3
 635 00f2 A7D1     	 bne .L33
 636              	.LVL58:
 637              	.L24:
 638              	.LBE180:
 639              	.LBE177:
 547:src/MightyBoard/Motherboard/Planner.cc **** 				planner_reverse_pass_kernel(block[0], block[1]);
 548:src/MightyBoard/Motherboard/Planner.cc **** 			} while (block_index != block_buffer.getTailIndex());
 549:src/MightyBoard/Motherboard/Planner.cc **** 		}
 550:src/MightyBoard/Motherboard/Planner.cc **** 	}
 640              	 .loc 1 550 0
 641 00f4 03B0     	 add sp,sp,#12
 642 00f6 BDE8F08F 	 pop {r4,r5,r6,r7,r8,r9,sl,fp,pc}
 643              	 .cfi_endproc
 644              	.LFE141:
 646              	 .global __aeabi_fcmple
 647 00fa 00BF     	 .section .text._ZN7planner20planner_forward_passEv,"ax",%progbits
 648              	 .align 2
 649              	 .global _ZN7planner20planner_forward_passEv
 650              	 .thumb
 651              	 .thumb_func
 653              	_ZN7planner20planner_forward_passEv:
 654              	.LFB143:
 551:src/MightyBoard/Motherboard/Planner.cc **** 
 552:src/MightyBoard/Motherboard/Planner.cc **** 	// The kernel called by planner_recalculate() when scanning the plan from first to last entry.
 553:src/MightyBoard/Motherboard/Planner.cc **** 	inline void planner_forward_pass_kernel(Block *previous, Block *current, Block *next) {
 554:src/MightyBoard/Motherboard/Planner.cc **** 		if(!previous) { return; }
 555:src/MightyBoard/Motherboard/Planner.cc **** 
 556:src/MightyBoard/Motherboard/Planner.cc **** 		// If the previous block is an acceleration block, but it is not long enough to complete the
 557:src/MightyBoard/Motherboard/Planner.cc **** 		// full speed change within the block, we need to adjust the entry speed accordingly. Entry
 558:src/MightyBoard/Motherboard/Planner.cc **** 		// speeds have already been reset, maximized, and reverse planned by reverse planner.
 559:src/MightyBoard/Motherboard/Planner.cc **** 		// If nominal length is true, max junction speed is guaranteed to be reached. No need to recheck.
 560:src/MightyBoard/Motherboard/Planner.cc **** 		if (!(previous->flags & Block::NominalLength)) {
 561:src/MightyBoard/Motherboard/Planner.cc **** 			if (previous->entry_speed <= current->entry_speed) {
 562:src/MightyBoard/Motherboard/Planner.cc **** 				float entry_speed = min( current->entry_speed,
 563:src/MightyBoard/Motherboard/Planner.cc **** 					max_allowable_speed(-previous->acceleration,previous->entry_speed,previous->millimeters) );
 564:src/MightyBoard/Motherboard/Planner.cc **** 
 565:src/MightyBoard/Motherboard/Planner.cc **** 				// Check for junction speed change
 566:src/MightyBoard/Motherboard/Planner.cc **** 				if (current->entry_speed != entry_speed) {
 567:src/MightyBoard/Motherboard/Planner.cc **** 					current->entry_speed = entry_speed;
 568:src/MightyBoard/Motherboard/Planner.cc **** 					current->flags |= Block::Recalculate;
 569:src/MightyBoard/Motherboard/Planner.cc **** 				}
 570:src/MightyBoard/Motherboard/Planner.cc **** 			}
 571:src/MightyBoard/Motherboard/Planner.cc **** 		}
 572:src/MightyBoard/Motherboard/Planner.cc **** 	}
 573:src/MightyBoard/Motherboard/Planner.cc **** 
 574:src/MightyBoard/Motherboard/Planner.cc **** 	// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward
 575:src/MightyBoard/Motherboard/Planner.cc **** 	// implements the forward pass.
 576:src/MightyBoard/Motherboard/Planner.cc **** 	void planner_forward_pass() {
 655              	 .loc 1 576 0
 656              	 .cfi_startproc
 657              	 
 658              	 
 659 0000 2DE9F04F 	 push {r4,r5,r6,r7,r8,r9,sl,fp,lr}
 660              	.LCFI5:
 661              	 .cfi_def_cfa_offset 36
 662              	 .cfi_offset 14,-4
 663              	 .cfi_offset 11,-8
 664              	 .cfi_offset 10,-12
 665              	 .cfi_offset 9,-16
 666              	 .cfi_offset 8,-20
 667              	 .cfi_offset 7,-24
 668              	 .cfi_offset 6,-28
 669              	 .cfi_offset 5,-32
 670              	 .cfi_offset 4,-36
 671 0004 85B0     	 sub sp,sp,#20
 672              	.LCFI6:
 673              	 .cfi_def_cfa_offset 56
 674              	.LVL59:
 675              	.LBB232:
 676              	.LBB233:
 677              	.LBB234:
 170:src/MightyBoard/Motherboard/Planner.cc **** 			return tail;
 678              	 .loc 1 170 0
 679 0006 40F20003 	 movw r3,#:lower16:.LANCHOR4
 680 000a C0F20003 	 movt r3,#:upper16:.LANCHOR4
 681 000e 5D78     	 ldrb r5,[r3,#1]
 682              	.LVL60:
 683              	.LBE234:
 684              	.LBE233:
 685              	.LBB235:
 686              	.LBB236:
 163:src/MightyBoard/Motherboard/Planner.cc **** 			return head;
 687              	 .loc 1 163 0
 688 0010 1B78     	 ldrb r3,[r3,#0]
 689              	.LBE236:
 690              	.LBE235:
 577:src/MightyBoard/Motherboard/Planner.cc **** 		uint8_t block_index = block_buffer.getTailIndex();
 578:src/MightyBoard/Motherboard/Planner.cc **** 		Block *block[3] = { NULL, NULL, NULL };
 579:src/MightyBoard/Motherboard/Planner.cc **** 
 580:src/MightyBoard/Motherboard/Planner.cc **** 		while(block_index != block_buffer.getHeadIndex()) {
 691              	 .loc 1 580 0
 692 0012 9D42     	 cmp r5,r3
 693 0014 40F0A280 	 bne .L38
 694 0018 B2E0     	 b .L37
 695              	.LVL61:
 696              	.L44:
 697              	.LBB238:
 698              	.LBB239:
 188:src/MightyBoard/Motherboard/Planner.cc **** 			return data[index];
 699              	 .loc 1 188 0
 700 001a 7368     	 ldr r3,[r6,#4]
 701 001c 0AFB0539 	 mla r9,sl,r5,r3
 702              	.LVL62:
 703              	.LBE239:
 704              	.LBE238:
 705              	.LBB242:
 706              	.LBB243:
 554:src/MightyBoard/Motherboard/Planner.cc **** 		if(!previous) { return; }
 707              	 .loc 1 554 0
 708 0020 002C     	 cmp r4,#0
 709 0022 47D0     	 beq .L40
 710              	.LVL63:
 711              	.LBB244:
 560:src/MightyBoard/Motherboard/Planner.cc **** 		if (!(previous->flags & Block::NominalLength)) {
 712              	 .loc 1 560 0
 713 0024 94F84830 	 ldrb r3,[r4,#72]
 714 0028 13F0040F 	 tst r3,#4
 715 002c 42D1     	 bne .L40
 716              	.LBB245:
 561:src/MightyBoard/Motherboard/Planner.cc **** 			if (previous->entry_speed <= current->entry_speed) {
 717              	 .loc 1 561 0
 718 002e 676A     	 ldr r7,[r4,#36]
 719 0030 3846     	 mov r0,r7
 720 0032 D8F82410 	 ldr r1,[r8,#36]
 721 0036 FFF7FEFF 	 bl __aeabi_fcmple
 722 003a 0028     	 cmp r0,#0
 723 003c 3AD0     	 beq .L40
 724              	.LVL64:
 725              	.LBB246:
 726              	.LBB247:
 727              	.LBB248:
 376:src/MightyBoard/Motherboard/Planner.cc **** 		return sqrt((target_velocity*target_velocity)-(acceleration*2.0)*distance);
 728              	 .loc 1 376 0
 729 003e 3846     	 mov r0,r7
 730 0040 3946     	 mov r1,r7
 731 0042 FFF7FEFF 	 bl __aeabi_fmul
 732 0046 FFF7FEFF 	 bl __aeabi_f2d
 733 004a CDE90001 	 strd r0,[sp]
 734              	.LBE248:
 735              	.LBE247:
 563:src/MightyBoard/Motherboard/Planner.cc **** 					max_allowable_speed(-previous->acceleration,previous->entry_speed,previous->millimeters) );
 736              	 .loc 1 563 0
 737 004e 206B     	 ldr r0,[r4,#48]
 738 0050 00F10040 	 add r0,r0,#-2147483648
 739              	.LBB250:
 740              	.LBB249:
 376:src/MightyBoard/Motherboard/Planner.cc **** 		return sqrt((target_velocity*target_velocity)-(acceleration*2.0)*distance);
 741              	 .loc 1 376 0
 742 0054 FFF7FEFF 	 bl __aeabi_f2d
 743 0058 0246     	 mov r2,r0
 744 005a 0B46     	 mov r3,r1
 745 005c FFF7FEFF 	 bl __aeabi_dadd
 746 0060 CDE90201 	 strd r0,[sp,#8]
 747 0064 E06A     	 ldr r0,[r4,#44]
 748 0066 FFF7FEFF 	 bl __aeabi_f2d
 749 006a 0246     	 mov r2,r0
 750 006c 0B46     	 mov r3,r1
 751 006e DDE90201 	 ldrd r0,[sp,#8]
 752 0072 FFF7FEFF 	 bl __aeabi_dmul
 753 0076 0246     	 mov r2,r0
 754 0078 0B46     	 mov r3,r1
 755 007a DDE90001 	 ldrd r0,[sp]
 756 007e FFF7FEFF 	 bl __aeabi_dsub
 757 0082 FFF7FEFF 	 bl sqrt
 758 0086 FFF7FEFF 	 bl __aeabi_d2f
 759 008a 0746     	 mov r7,r0
 760              	.LVL65:
 761              	.LBE249:
 762              	.LBE250:
 763              	.LBB251:
 764              	.LBB252:
 106:src/MightyBoard/Motherboard/Planner.cc **** inline const T& min(const T& a, const T& b) { return (a)<(b)?(a):(b); }
 765              	 .loc 1 106 0
 766 008c D8F82440 	 ldr r4,[r8,#36]
 767              	.LVL66:
 768 0090 2146     	 mov r1,r4
 769 0092 FFF7FEFF 	 bl __aeabi_fcmpgt
 770 0096 00B1     	 cbz r0,.L42
 563:src/MightyBoard/Motherboard/Planner.cc **** 					max_allowable_speed(-previous->acceleration,previous->entry_speed,previous->millimeters) );
 771              	 .loc 1 563 0
 772 0098 2746     	 mov r7,r4
 773              	.L42:
 774              	.LBE252:
 775              	.LBE251:
 566:src/MightyBoard/Motherboard/Planner.cc **** 				if (current->entry_speed != entry_speed) {
 776              	 .loc 1 566 0
 777 009a 2046     	 mov r0,r4
 778 009c 3946     	 mov r1,r7
 779 009e FFF7FEFF 	 bl __aeabi_fcmpeq
 780 00a2 38B9     	 cbnz r0,.L40
 567:src/MightyBoard/Motherboard/Planner.cc **** 					current->entry_speed = entry_speed;
 781              	 .loc 1 567 0
 782 00a4 C8F82470 	 str r7,[r8,#36]
 568:src/MightyBoard/Motherboard/Planner.cc **** 					current->flags |= Block::Recalculate;
 783              	 .loc 1 568 0
 784 00a8 98F84830 	 ldrb r3,[r8,#72]
 785 00ac 43F00203 	 orr r3,r3,#2
 786 00b0 88F84830 	 strb r3,[r8,#72]
 787              	.LVL67:
 788              	.L40:
 789              	.LBB254:
 790              	.LBB253:
 563:src/MightyBoard/Motherboard/Planner.cc **** 					max_allowable_speed(-previous->acceleration,previous->entry_speed,previous->millimeters) );
 791              	 .loc 1 563 0
 792 00b4 4446     	 mov r4,r8
 188:src/MightyBoard/Motherboard/Planner.cc **** 			return data[index];
 793              	 .loc 1 188 0
 794 00b6 C846     	 mov r8,r9
 795              	.LVL68:
 796              	.L49:
 797              	.LBE253:
 798              	.LBE254:
 799              	.LBE246:
 800              	.LBE245:
 801              	.LBE244:
 802              	.LBE243:
 803              	.LBE242:
 804              	.LBB255:
 805              	.LBB256:
 174:src/MightyBoard/Motherboard/Planner.cc **** 			return ((from + 1) & size_mask);
 806              	 .loc 1 174 0
 807 00b8 05F10105 	 add r5,r5,#1
 808              	.LVL69:
 809 00bc F378     	 ldrb r3,[r6,#3]
 810 00be 1D40     	 ands r5,r5,r3
 811              	.LVL70:
 812              	.LBE256:
 813              	.LBE255:
 814              	.LBB258:
 815              	.LBB237:
 163:src/MightyBoard/Motherboard/Planner.cc **** 			return head;
 816              	 .loc 1 163 0
 817 00c0 3378     	 ldrb r3,[r6,#0]
 818              	.LBE237:
 819              	.LBE258:
 820              	 .loc 1 580 0
 821 00c2 9D42     	 cmp r5,r3
 822 00c4 A9D1     	 bne .L44
 823              	.LVL71:
 824              	.LBB259:
 825              	.LBB260:
 554:src/MightyBoard/Motherboard/Planner.cc **** 		if(!previous) { return; }
 826              	 .loc 1 554 0
 827 00c6 002C     	 cmp r4,#0
 828 00c8 5AD0     	 beq .L37
 829              	.LBB261:
 560:src/MightyBoard/Motherboard/Planner.cc **** 		if (!(previous->flags & Block::NominalLength)) {
 830              	 .loc 1 560 0
 831 00ca 94F84830 	 ldrb r3,[r4,#72]
 832 00ce 13F0040F 	 tst r3,#4
 833 00d2 55D1     	 bne .L37
 834              	.LBB262:
 561:src/MightyBoard/Motherboard/Planner.cc **** 			if (previous->entry_speed <= current->entry_speed) {
 835              	 .loc 1 561 0
 836 00d4 656A     	 ldr r5,[r4,#36]
 837              	.LVL72:
 838 00d6 2846     	 mov r0,r5
 839 00d8 D8F82410 	 ldr r1,[r8,#36]
 840 00dc FFF7FEFF 	 bl __aeabi_fcmple
 841 00e0 0028     	 cmp r0,#0
 842 00e2 4DD0     	 beq .L37
 843              	.LVL73:
 844              	.LBB263:
 845              	.LBB264:
 846              	.LBB265:
 376:src/MightyBoard/Motherboard/Planner.cc **** 		return sqrt((target_velocity*target_velocity)-(acceleration*2.0)*distance);
 847              	 .loc 1 376 0
 848 00e4 2846     	 mov r0,r5
 849 00e6 2946     	 mov r1,r5
 850 00e8 FFF7FEFF 	 bl __aeabi_fmul
 851 00ec FFF7FEFF 	 bl __aeabi_f2d
 852 00f0 8246     	 mov sl,r0
 853 00f2 8B46     	 mov fp,r1
 854              	.LBE265:
 855              	.LBE264:
 563:src/MightyBoard/Motherboard/Planner.cc **** 					max_allowable_speed(-previous->acceleration,previous->entry_speed,previous->millimeters) );
 856              	 .loc 1 563 0
 857 00f4 206B     	 ldr r0,[r4,#48]
 858 00f6 00F10040 	 add r0,r0,#-2147483648
 859              	.LBB267:
 860              	.LBB266:
 376:src/MightyBoard/Motherboard/Planner.cc **** 		return sqrt((target_velocity*target_velocity)-(acceleration*2.0)*distance);
 861              	 .loc 1 376 0
 862 00fa FFF7FEFF 	 bl __aeabi_f2d
 863 00fe 0246     	 mov r2,r0
 864 0100 0B46     	 mov r3,r1
 865 0102 FFF7FEFF 	 bl __aeabi_dadd
 866 0106 0646     	 mov r6,r0
 867 0108 0F46     	 mov r7,r1
 868 010a E06A     	 ldr r0,[r4,#44]
 869 010c FFF7FEFF 	 bl __aeabi_f2d
 870 0110 0246     	 mov r2,r0
 871 0112 0B46     	 mov r3,r1
 872 0114 3046     	 mov r0,r6
 873 0116 3946     	 mov r1,r7
 874 0118 FFF7FEFF 	 bl __aeabi_dmul
 875 011c 0246     	 mov r2,r0
 876 011e 0B46     	 mov r3,r1
 877 0120 5046     	 mov r0,sl
 878 0122 5946     	 mov r1,fp
 879 0124 FFF7FEFF 	 bl __aeabi_dsub
 880 0128 FFF7FEFF 	 bl sqrt
 881 012c FFF7FEFF 	 bl __aeabi_d2f
 882 0130 0546     	 mov r5,r0
 883              	.LVL74:
 884              	.LBE266:
 885              	.LBE267:
 886              	.LBB268:
 887              	.LBB269:
 106:src/MightyBoard/Motherboard/Planner.cc **** inline const T& min(const T& a, const T& b) { return (a)<(b)?(a):(b); }
 888              	 .loc 1 106 0
 889 0132 D8F82440 	 ldr r4,[r8,#36]
 890              	.LVL75:
 891 0136 2146     	 mov r1,r4
 892 0138 FFF7FEFF 	 bl __aeabi_fcmpgt
 893 013c 00B1     	 cbz r0,.L46
 563:src/MightyBoard/Motherboard/Planner.cc **** 					max_allowable_speed(-previous->acceleration,previous->entry_speed,previous->millimeters) );
 894              	 .loc 1 563 0
 895 013e 2546     	 mov r5,r4
 896              	.L46:
 897              	.LBE269:
 898              	.LBE268:
 566:src/MightyBoard/Motherboard/Planner.cc **** 				if (current->entry_speed != entry_speed) {
 899              	 .loc 1 566 0
 900 0140 2046     	 mov r0,r4
 901 0142 2946     	 mov r1,r5
 902 0144 FFF7FEFF 	 bl __aeabi_fcmpeq
 903 0148 D0B9     	 cbnz r0,.L37
 567:src/MightyBoard/Motherboard/Planner.cc **** 					current->entry_speed = entry_speed;
 904              	 .loc 1 567 0
 905 014a C8F82450 	 str r5,[r8,#36]
 568:src/MightyBoard/Motherboard/Planner.cc **** 					current->flags |= Block::Recalculate;
 906              	 .loc 1 568 0
 907 014e 98F84830 	 ldrb r3,[r8,#72]
 908 0152 43F00203 	 orr r3,r3,#2
 909 0156 88F84830 	 strb r3,[r8,#72]
 910 015a 11E0     	 b .L37
 911              	.LVL76:
 912              	.L38:
 913              	.LBE263:
 914              	.LBE262:
 915              	.LBE261:
 916              	.LBE260:
 917              	.LBE259:
 918              	.LBB270:
 919              	.LBB240:
 188:src/MightyBoard/Motherboard/Planner.cc **** 			return data[index];
 920              	 .loc 1 188 0
 921 015c 40F20003 	 movw r3,#:lower16:.LANCHOR4
 922 0160 C0F20003 	 movt r3,#:upper16:.LANCHOR4
 923 0164 5B68     	 ldr r3,[r3,#4]
 924 0166 4FF04C08 	 mov r8,#76
 925 016a 08FB0538 	 mla r8,r8,r5,r3
 926              	.LVL77:
 578:src/MightyBoard/Motherboard/Planner.cc **** 		Block *block[3] = { NULL, NULL, NULL };
 927              	 .loc 1 578 0
 928 016e 4FF00004 	 mov r4,#0
 929              	.LBE240:
 930              	.LBE270:
 931              	.LBB271:
 932              	.LBB257:
 174:src/MightyBoard/Motherboard/Planner.cc **** 			return ((from + 1) & size_mask);
 933              	 .loc 1 174 0
 934 0172 40F20006 	 movw r6,#:lower16:.LANCHOR4
 935 0176 C0F20006 	 movt r6,#:upper16:.LANCHOR4
 936              	.LBE257:
 937              	.LBE271:
 938              	.LBB272:
 939              	.LBB241:
 188:src/MightyBoard/Motherboard/Planner.cc **** 			return data[index];
 940              	 .loc 1 188 0
 941 017a 4FF04C0A 	 mov sl,#76
 942 017e 9BE7     	 b .L49
 943              	.LVL78:
 944              	.L37:
 945              	.LBE241:
 946              	.LBE272:
 947              	.LBE232:
 581:src/MightyBoard/Motherboard/Planner.cc **** 			block[0] = block[1];
 582:src/MightyBoard/Motherboard/Planner.cc **** 			block[1] = block[2];
 583:src/MightyBoard/Motherboard/Planner.cc **** 			// Move two blocks worth of ram, from [1] to [0], using the overlap-safe memmove
 584:src/MightyBoard/Motherboard/Planner.cc **** 			//memmove(block[1], block[0], sizeof(Block)<<1);
 585:src/MightyBoard/Motherboard/Planner.cc **** 			block[2] = &block_buffer[block_index];
 586:src/MightyBoard/Motherboard/Planner.cc **** 			planner_forward_pass_kernel(block[0],block[1],block[2]);
 587:src/MightyBoard/Motherboard/Planner.cc **** 			block_index = block_buffer.getNextIndex(block_index);
 588:src/MightyBoard/Motherboard/Planner.cc **** 		}
 589:src/MightyBoard/Motherboard/Planner.cc **** 		planner_forward_pass_kernel(block[1], block[2], NULL);
 590:src/MightyBoard/Motherboard/Planner.cc **** 	}
 948              	 .loc 1 590 0
 949 0180 05B0     	 add sp,sp,#20
 950 0182 BDE8F08F 	 pop {r4,r5,r6,r7,r8,r9,sl,fp,pc}
 951              	 .cfi_endproc
 952              	.LFE143:
 954 0186 00BF     	 .section .text._ZN7planner30planner_recalculate_trapezoidsEv,"ax",%progbits
 955              	 .align 2
 956              	 .global _ZN7planner30planner_recalculate_trapezoidsEv
 957              	 .thumb
 958              	 .thumb_func
 960              	_ZN7planner30planner_recalculate_trapezoidsEv:
 961              	.LFB144:
 591:src/MightyBoard/Motherboard/Planner.cc **** 
 592:src/MightyBoard/Motherboard/Planner.cc **** 	// Recalculates the trapezoid speed profiles for all blocks in the plan according to the 
 593:src/MightyBoard/Motherboard/Planner.cc **** 	// entry_factor for each junction. Must be called by planner_recalculate() after 
 594:src/MightyBoard/Motherboard/Planner.cc **** 	// updating the blocks.
 595:src/MightyBoard/Motherboard/Planner.cc **** 	// Returns true if planning succeded.
 596:src/MightyBoard/Motherboard/Planner.cc **** 	bool planner_recalculate_trapezoids() {
 962              	 .loc 1 596 0
 963              	 .cfi_startproc
 964              	 
 965              	 
 966 0000 2DE9F041 	 push {r4,r5,r6,r7,r8,lr}
 967              	.LCFI7:
 968              	 .cfi_def_cfa_offset 24
 969              	 .cfi_offset 14,-4
 970              	 .cfi_offset 8,-8
 971              	 .cfi_offset 7,-12
 972              	 .cfi_offset 6,-16
 973              	 .cfi_offset 5,-20
 974              	 .cfi_offset 4,-24
 975              	.LVL79:
 976              	.LBB273:
 977              	.LBB274:
 978              	.LBB275:
 170:src/MightyBoard/Motherboard/Planner.cc **** 			return tail;
 979              	 .loc 1 170 0
 980 0004 40F20003 	 movw r3,#:lower16:.LANCHOR4
 981 0008 C0F20003 	 movt r3,#:upper16:.LANCHOR4
 982 000c 5E78     	 ldrb r6,[r3,#1]
 983              	.LVL80:
 984              	.LBE275:
 985              	.LBE274:
 986              	.LBB276:
 987              	.LBB277:
 163:src/MightyBoard/Motherboard/Planner.cc **** 			return head;
 988              	 .loc 1 163 0
 989 000e 1B78     	 ldrb r3,[r3,#0]
 990              	.LBE277:
 991              	.LBE276:
 597:src/MightyBoard/Motherboard/Planner.cc **** 		int8_t block_index = block_buffer.getTailIndex();
 598:src/MightyBoard/Motherboard/Planner.cc **** 		Block *current;
 599:src/MightyBoard/Motherboard/Planner.cc **** 		Block *next = NULL;
 600:src/MightyBoard/Motherboard/Planner.cc **** 		
 601:src/MightyBoard/Motherboard/Planner.cc **** 		while(block_index != block_buffer.getHeadIndex()) {
 992              	 .loc 1 601 0
 993 0010 72B2     	 sxtb r2,r6
 994 0012 9A42     	 cmp r2,r3
 599:src/MightyBoard/Motherboard/Planner.cc **** 		Block *next = NULL;
 995              	 .loc 1 599 0
 996 0014 08BF     	 it eq
 997 0016 0024     	 moveq r4,#0
 998              	 .loc 1 601 0
 999 0018 35D1     	 bne .L63
 1000 001a 25E0     	 b .L58
 1001              	.LVL81:
 1002              	.L61:
 602:src/MightyBoard/Motherboard/Planner.cc **** 			current = next;
 603:src/MightyBoard/Motherboard/Planner.cc **** 			next = &block_buffer[block_index];
 1003              	 .loc 1 603 0
 1004 001c F6B2     	 uxtb r6,r6
 1005              	.LVL82:
 1006              	.LBB279:
 1007              	.LBB280:
 188:src/MightyBoard/Motherboard/Planner.cc **** 			return data[index];
 1008              	 .loc 1 188 0
 1009 001e 6F68     	 ldr r7,[r5,#4]
 1010 0020 08FB0677 	 mla r7,r8,r6,r7
 1011              	.LVL83:
 1012              	.LBE280:
 1013              	.LBE279:
 604:src/MightyBoard/Motherboard/Planner.cc **** 			if (current) {
 1014              	 .loc 1 604 0
 1015 0024 BCB1     	 cbz r4,.L59
 605:src/MightyBoard/Motherboard/Planner.cc **** 				// Recalculate if current block entry or exit junction speed has changed.
 606:src/MightyBoard/Motherboard/Planner.cc **** 				if ((current->flags & Block::Recalculate) || (next->flags & Block::Recalculate) && !(current->f
 1016              	 .loc 1 606 0
 1017 0026 94F84830 	 ldrb r3,[r4,#72]
 1018 002a 13F0020F 	 tst r3,#2
 1019 002e 07D1     	 bne .L60
 1020              	 .loc 1 606 0 is_stmt 0 discriminator 1
 1021 0030 97F84820 	 ldrb r2,[r7,#72]
 1022 0034 12F0020F 	 tst r2,#2
 1023 0038 0DD0     	 beq .L59
 1024              	 .loc 1 606 0 discriminator 2
 1025 003a 13F0010F 	 tst r3,#1
 1026 003e 0AD1     	 bne .L59
 1027              	.L60:
 607:src/MightyBoard/Motherboard/Planner.cc **** 					// NOTE: Entry and exit factors always > 0 by all previous logic operations.
 608:src/MightyBoard/Motherboard/Planner.cc **** 					current->calculate_trapezoid(next->entry_speed);
 1028              	 .loc 1 608 0 is_stmt 1
 1029 0040 2046     	 mov r0,r4
 1030 0042 07F12401 	 add r1,r7,#36
 1031 0046 FFF7FEFF 	 bl _ZN7planner5Block19calculate_trapezoidERKf
 609:src/MightyBoard/Motherboard/Planner.cc **** 				
 610:src/MightyBoard/Motherboard/Planner.cc **** 					// Reset current only to ensure next trapezoid is computed
 611:src/MightyBoard/Motherboard/Planner.cc **** 					// Also make sure the PlannedToStop flag gets cleared, since we are planning to the next move
 612:src/MightyBoard/Motherboard/Planner.cc **** 					current->flags &= ~Block::Recalculate;//(Block::Recalculate|Block::PlannedToStop);
 1032              	 .loc 1 612 0
 1033 004a 94F84830 	 ldrb r3,[r4,#72]
 1034 004e 23F00203 	 bic r3,r3,#2
 1035 0052 84F84830 	 strb r3,[r4,#72]
 1036              	.L59:
 1037              	.LBE273:
 188:src/MightyBoard/Motherboard/Planner.cc **** 			return data[index];
 1038              	 .loc 1 188 0
 1039 0056 3C46     	 mov r4,r7
 1040              	.LVL84:
 1041              	.L62:
 1042              	.LBB290:
 1043              	.LBB283:
 1044              	.LBB284:
 174:src/MightyBoard/Motherboard/Planner.cc **** 			return ((from + 1) & size_mask);
 1045              	 .loc 1 174 0
 1046 0058 06F10106 	 add r6,r6,#1
 1047              	.LVL85:
 1048 005c EB78     	 ldrb r3,[r5,#3]
 1049 005e 1E40     	 ands r6,r6,r3
 1050              	.LVL86:
 1051              	.LBE284:
 1052              	.LBE283:
 1053              	.LBB286:
 1054              	.LBB278:
 163:src/MightyBoard/Motherboard/Planner.cc **** 			return head;
 1055              	 .loc 1 163 0
 1056 0060 2B78     	 ldrb r3,[r5,#0]
 1057              	.LBE278:
 1058              	.LBE286:
 601:src/MightyBoard/Motherboard/Planner.cc **** 		while(block_index != block_buffer.getHeadIndex()) {
 1059              	 .loc 1 601 0
 1060 0062 72B2     	 sxtb r2,r6
 1061 0064 9A42     	 cmp r2,r3
 1062 0066 D9D1     	 bne .L61
 1063              	.LVL87:
 1064              	.L58:
 613:src/MightyBoard/Motherboard/Planner.cc **** 				}
 614:src/MightyBoard/Motherboard/Planner.cc **** 			}
 615:src/MightyBoard/Motherboard/Planner.cc **** 			block_index = block_buffer.getNextIndex( block_index );
 616:src/MightyBoard/Motherboard/Planner.cc **** 		}
 617:src/MightyBoard/Motherboard/Planner.cc **** 		
 618:src/MightyBoard/Motherboard/Planner.cc **** 		// Last/newest block in buffer. Exit speed is set with stop_speed. Always recalculated.
 619:src/MightyBoard/Motherboard/Planner.cc **** 		next->calculate_trapezoid(next->stop_speed);
 1065              	 .loc 1 619 0
 1066 0068 2046     	 mov r0,r4
 1067 006a 04F13401 	 add r1,r4,#52
 1068 006e FFF7FEFF 	 bl _ZN7planner5Block19calculate_trapezoidERKf
 620:src/MightyBoard/Motherboard/Planner.cc **** 		next->flags &= ~Block::Recalculate;
 1069              	 .loc 1 620 0
 1070 0072 94F84830 	 ldrb r3,[r4,#72]
 1071 0076 23F00203 	 bic r3,r3,#2
 1072 007a 84F84830 	 strb r3,[r4,#72]
 1073              	.LBE290:
 621:src/MightyBoard/Motherboard/Planner.cc **** 		return true;
 622:src/MightyBoard/Motherboard/Planner.cc **** 	}
 1074              	 .loc 1 622 0
 1075 007e 4FF00100 	 mov r0,#1
 1076 0082 BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 1077              	.LVL88:
 1078              	.L63:
 1079              	.LBB291:
 603:src/MightyBoard/Motherboard/Planner.cc **** 			next = &block_buffer[block_index];
 1080              	 .loc 1 603 0
 1081 0086 F6B2     	 uxtb r6,r6
 1082              	.LVL89:
 1083              	.LBB287:
 1084              	.LBB281:
 188:src/MightyBoard/Motherboard/Planner.cc **** 			return data[index];
 1085              	 .loc 1 188 0
 1086 0088 40F20003 	 movw r3,#:lower16:.LANCHOR4
 1087 008c C0F20003 	 movt r3,#:upper16:.LANCHOR4
 1088 0090 5B68     	 ldr r3,[r3,#4]
 1089 0092 4FF04C04 	 mov r4,#76
 1090 0096 04FB0634 	 mla r4,r4,r6,r3
 1091              	.LVL90:
 1092              	.LBE281:
 1093              	.LBE287:
 1094              	.LBB288:
 1095              	.LBB285:
 174:src/MightyBoard/Motherboard/Planner.cc **** 			return ((from + 1) & size_mask);
 1096              	 .loc 1 174 0
 1097 009a 40F20005 	 movw r5,#:lower16:.LANCHOR4
 1098 009e C0F20005 	 movt r5,#:upper16:.LANCHOR4
 1099              	.LBE285:
 1100              	.LBE288:
 1101              	.LBB289:
 1102              	.LBB282:
 188:src/MightyBoard/Motherboard/Planner.cc **** 			return data[index];
 1103              	 .loc 1 188 0
 1104 00a2 4FF04C08 	 mov r8,#76
 1105 00a6 D7E7     	 b .L62
 1106              	.LBE282:
 1107              	.LBE289:
 1108              	.LBE291:
 1109              	 .cfi_endproc
 1110              	.LFE144:
 1112              	 .section .text._ZN7planner19planner_recalculateEv,"ax",%progbits
 1113              	 .align 2
 1114              	 .global _ZN7planner19planner_recalculateEv
 1115              	 .thumb
 1116              	 .thumb_func
 1118              	_ZN7planner19planner_recalculateEv:
 1119              	.LFB139:
 509:src/MightyBoard/Motherboard/Planner.cc **** 	void planner_recalculate() {   
 1120              	 .loc 1 509 0
 1121              	 .cfi_startproc
 1122              	 
 1123              	 
 1124 0000 08B5     	 push {r3,lr}
 1125              	.LCFI8:
 1126              	 .cfi_def_cfa_offset 8
 1127              	 .cfi_offset 14,-4
 1128              	 .cfi_offset 3,-8
 510:src/MightyBoard/Motherboard/Planner.cc **** 			planner_reverse_pass();
 1129              	 .loc 1 510 0
 1130 0002 FFF7FEFF 	 bl _ZN7planner20planner_reverse_passEv
 511:src/MightyBoard/Motherboard/Planner.cc **** 			planner_forward_pass();
 1131              	 .loc 1 511 0
 1132 0006 FFF7FEFF 	 bl _ZN7planner20planner_forward_passEv
 512:src/MightyBoard/Motherboard/Planner.cc **** 			planner_recalculate_trapezoids();
 1133              	 .loc 1 512 0
 1134 000a FFF7FEFF 	 bl _ZN7planner30planner_recalculate_trapezoidsEv
 514:src/MightyBoard/Motherboard/Planner.cc **** 	}
 1135              	 .loc 1 514 0
 1136 000e 08BD     	 pop {r3,pc}
 1137              	 .cfi_endproc
 1138              	.LFE139:
 1140              	 .section .text._ZN7planner12isBufferFullEv,"ax",%progbits
 1141              	 .align 2
 1142              	 .global _ZN7planner12isBufferFullEv
 1143              	 .thumb
 1144              	 .thumb_func
 1146              	_ZN7planner12isBufferFullEv:
 1147              	.LFB145:
 623:src/MightyBoard/Motherboard/Planner.cc **** 
 624:src/MightyBoard/Motherboard/Planner.cc **** 	bool isBufferFull() {
 1148              	 .loc 1 624 0
 1149              	 .cfi_startproc
 1150              	 
 1151              	 
 1152              	 
 1153              	.LVL91:
 1154              	.LBB292:
 1155              	.LBB293:
 208:src/MightyBoard/Motherboard/Planner.cc **** 			return (getNextIndex(head) == tail);
 1156              	 .loc 1 208 0
 1157 0000 40F20003 	 movw r3,#:lower16:.LANCHOR4
 1158 0004 C0F20003 	 movt r3,#:upper16:.LANCHOR4
 1159 0008 1878     	 ldrb r0,[r3,#0]
 1160              	.LVL92:
 1161 000a 5A78     	 ldrb r2,[r3,#1]
 1162              	.LBB294:
 1163              	.LBB295:
 174:src/MightyBoard/Motherboard/Planner.cc **** 			return ((from + 1) & size_mask);
 1164              	 .loc 1 174 0
 1165 000c 00F10100 	 add r0,r0,#1
 1166              	.LVL93:
 1167 0010 DB78     	 ldrb r3,[r3,#3]
 1168              	.LBE295:
 1169              	.LBE294:
 208:src/MightyBoard/Motherboard/Planner.cc **** 			return (getNextIndex(head) == tail);
 1170              	 .loc 1 208 0
 1171 0012 1840     	 ands r0,r0,r3
 1172              	.LVL94:
 1173              	.LBE293:
 1174              	.LBE292:
 625:src/MightyBoard/Motherboard/Planner.cc **** //		xprintf("isBufferFull" " (%s:%d)\n",_F_,_L_);
 626:src/MightyBoard/Motherboard/Planner.cc **** 		return block_buffer.isFull();//planner_buffer.isFull(); 
 627:src/MightyBoard/Motherboard/Planner.cc **** 	}
 1175              	 .loc 1 627 0
 1176 0014 9042     	 cmp r0,r2
 1177 0016 14BF     	 ite ne
 1178 0018 0020     	 movne r0,#0
 1179 001a 0120     	 moveq r0,#1
 1180 001c 7047     	 bx lr
 1181              	 .cfi_endproc
 1182              	.LFE145:
 1184 001e 00BF     	 .section .text._ZN7planner13isBufferEmptyEv,"ax",%progbits
 1185              	 .align 2
 1186              	 .global _ZN7planner13isBufferEmptyEv
 1187              	 .thumb
 1188              	 .thumb_func
 1190              	_ZN7planner13isBufferEmptyEv:
 1191              	.LFB146:
 628:src/MightyBoard/Motherboard/Planner.cc **** 	
 629:src/MightyBoard/Motherboard/Planner.cc **** 	// Are we completely out of upcoming moves?
 630:src/MightyBoard/Motherboard/Planner.cc **** 	bool isBufferEmpty() {
 1192              	 .loc 1 630 0
 1193              	 .cfi_startproc
 1194              	 
 1195              	 
 1196              	 
 1197              	.LVL95:
 1198              	.LBB296:
 1199              	.LBB297:
 1200              	.LBB298:
 204:src/MightyBoard/Motherboard/Planner.cc **** 			return head == tail;
 1201              	 .loc 1 204 0
 1202 0000 40F20003 	 movw r3,#:lower16:.LANCHOR4
 1203 0004 C0F20003 	 movt r3,#:upper16:.LANCHOR4
 1204 0008 1878     	 ldrb r0,[r3,#0]
 1205 000a 5B78     	 ldrb r3,[r3,#1]
 1206              	.LBE298:
 1207              	.LBE297:
 1208              	.LBE296:
 631:src/MightyBoard/Motherboard/Planner.cc **** 		bool is_buffer_empty = block_buffer.isEmpty();// && planner_buffer.isEmpty();
 632:src/MightyBoard/Motherboard/Planner.cc **** 		return is_buffer_empty;
 633:src/MightyBoard/Motherboard/Planner.cc **** 	}
 1209              	 .loc 1 633 0
 1210 000c 9842     	 cmp r0,r3
 1211 000e 14BF     	 ite ne
 1212 0010 0020     	 movne r0,#0
 1213 0012 0120     	 moveq r0,#1
 1214 0014 7047     	 bx lr
 1215              	 .cfi_endproc
 1216              	.LFE146:
 1218 0016 00BF     	 .section .text._ZN7planner7isReadyEv,"ax",%progbits
 1219              	 .align 2
 1220              	 .global _ZN7planner7isReadyEv
 1221              	 .thumb
 1222              	 .thumb_func
 1224              	_ZN7planner7isReadyEv:
 1225              	.LFB147:
 634:src/MightyBoard/Motherboard/Planner.cc **** 	
 635:src/MightyBoard/Motherboard/Planner.cc **** 	// Is the move in the buffer ready to use?
 636:src/MightyBoard/Motherboard/Planner.cc **** 	bool isReady() {
 1226              	 .loc 1 636 0
 1227              	 .cfi_startproc
 1228              	 
 1229              	 
 1230              	 
 637:src/MightyBoard/Motherboard/Planner.cc **** 		return !(force_replan_from_stopped || block_buffer.isEmpty());
 1231              	 .loc 1 637 0
 1232 0000 40F20003 	 movw r3,#:lower16:.LANCHOR5
 1233 0004 C0F20003 	 movt r3,#:upper16:.LANCHOR5
 1234 0008 1B78     	 ldrb r3,[r3,#0]
 1235 000a 4BB9     	 cbnz r3,.L69
 1236              	.LVL96:
 1237              	.LBB299:
 1238              	.LBB300:
 204:src/MightyBoard/Motherboard/Planner.cc **** 			return head == tail;
 1239              	 .loc 1 204 0
 1240 000c 40F20003 	 movw r3,#:lower16:.LANCHOR4
 1241 0010 C0F20003 	 movt r3,#:upper16:.LANCHOR4
 1242 0014 1878     	 ldrb r0,[r3,#0]
 1243 0016 5B78     	 ldrb r3,[r3,#1]
 636:src/MightyBoard/Motherboard/Planner.cc **** 	bool isReady() {
 1244              	 .loc 1 636 0
 1245 0018 C01A     	 subs r0,r0,r3
 1246 001a 18BF     	 it ne
 1247 001c 0120     	 movne r0,#1
 1248 001e 7047     	 bx lr
 1249              	.LVL97:
 1250              	.L69:
 1251              	.LBE300:
 1252              	.LBE299:
 1253              	 .loc 1 637 0
 1254 0020 4FF00000 	 mov r0,#0
 638:src/MightyBoard/Motherboard/Planner.cc **** 	}
 1255              	 .loc 1 638 0
 1256 0024 7047     	 bx lr
 1257              	 .cfi_endproc
 1258              	.LFE147:
 1260 0026 00BF     	 .section .text._ZN7planner11bufferCountEv,"ax",%progbits
 1261              	 .align 2
 1262              	 .global _ZN7planner11bufferCountEv
 1263              	 .thumb
 1264              	 .thumb_func
 1266              	_ZN7planner11bufferCountEv:
 1267              	.LFB148:
 639:src/MightyBoard/Motherboard/Planner.cc **** 	
 640:src/MightyBoard/Motherboard/Planner.cc **** 	uint8_t bufferCount() {
 1268              	 .loc 1 640 0
 1269              	 .cfi_startproc
 1270              	 
 1271              	 
 1272              	 
 1273              	.LVL98:
 1274              	.LBB301:
 1275              	.LBB302:
 212:src/MightyBoard/Motherboard/Planner.cc **** 			return ((head-tail+size) & size_mask);
 1276              	 .loc 1 212 0
 1277 0000 40F20003 	 movw r3,#:lower16:.LANCHOR4
 1278 0004 C0F20003 	 movt r3,#:upper16:.LANCHOR4
 1279 0008 1878     	 ldrb r0,[r3,#0]
 1280 000a 5A78     	 ldrb r2,[r3,#1]
 1281 000c 9978     	 ldrb r1,[r3,#2]
 1282 000e 4018     	 adds r0,r0,r1
 1283 0010 801A     	 subs r0,r0,r2
 1284 0012 DB78     	 ldrb r3,[r3,#3]
 1285              	.LBE302:
 1286              	.LBE301:
 641:src/MightyBoard/Motherboard/Planner.cc **** 		return block_buffer.getUsedCount();
 642:src/MightyBoard/Motherboard/Planner.cc **** 	}
 1287              	 .loc 1 642 0
 1288 0014 1840     	 ands r0,r0,r3
 1289 0016 7047     	 bx lr
 1290              	 .cfi_endproc
 1291              	.LFE148:
 1293              	 .section .text._ZN7planner12getNextBlockEv,"ax",%progbits
 1294              	 .align 2
 1295              	 .global _ZN7planner12getNextBlockEv
 1296              	 .thumb
 1297              	 .thumb_func
 1299              	_ZN7planner12getNextBlockEv:
 1300              	.LFB149:
 643:src/MightyBoard/Motherboard/Planner.cc **** 	
 644:src/MightyBoard/Motherboard/Planner.cc **** 	Block *getNextBlock() {
 1301              	 .loc 1 644 0
 1302              	 .cfi_startproc
 1303              	 
 1304              	 
 1305              	 
 1306              	.LVL99:
 1307              	.LBB303:
 1308              	.LBB304:
 1309              	.LBB305:
 167:src/MightyBoard/Motherboard/Planner.cc **** 			return &data[tail];
 1310              	 .loc 1 167 0
 1311 0000 40F20003 	 movw r3,#:lower16:.LANCHOR4
 1312 0004 C0F20003 	 movt r3,#:upper16:.LANCHOR4
 1313 0008 5A78     	 ldrb r2,[r3,#1]
 1314 000a 5B68     	 ldr r3,[r3,#4]
 1315              	.LBE305:
 1316              	.LBE304:
 1317              	.LBE303:
 645:src/MightyBoard/Motherboard/Planner.cc **** 		Block *block = block_buffer.getTail();
 646:src/MightyBoard/Motherboard/Planner.cc **** 		return block;
 647:src/MightyBoard/Motherboard/Planner.cc **** 	}
 1318              	 .loc 1 647 0
 1319 000c 4FF04C00 	 mov r0,#76
 1320 0010 00FB0230 	 mla r0,r0,r2,r3
 1321 0014 7047     	 bx lr
 1322              	 .cfi_endproc
 1323              	.LFE149:
 1325 0016 00BF     	 .section .text._ZN7planner17doneWithNextBlockEv,"ax",%progbits
 1326              	 .align 2
 1327              	 .global _ZN7planner17doneWithNextBlockEv
 1328              	 .thumb
 1329              	 .thumb_func
 1331              	_ZN7planner17doneWithNextBlockEv:
 1332              	.LFB150:
 648:src/MightyBoard/Motherboard/Planner.cc **** 	
 649:src/MightyBoard/Motherboard/Planner.cc **** 	void doneWithNextBlock() {
 1333              	 .loc 1 649 0
 1334              	 .cfi_startproc
 1335              	 
 1336              	 
 1337              	 
 1338              	.LVL100:
 1339              	.LBB306:
 1340              	.LBB307:
 200:src/MightyBoard/Motherboard/Planner.cc **** 			tail = getNextIndex(tail);
 1341              	 .loc 1 200 0
 1342 0000 40F20003 	 movw r3,#:lower16:.LANCHOR4
 1343 0004 C0F20003 	 movt r3,#:upper16:.LANCHOR4
 1344 0008 5A78     	 ldrb r2,[r3,#1]
 1345              	.LVL101:
 1346              	.LBB308:
 1347              	.LBB309:
 174:src/MightyBoard/Motherboard/Planner.cc **** 			return ((from + 1) & size_mask);
 1348              	 .loc 1 174 0
 1349 000a 02F10102 	 add r2,r2,#1
 1350              	.LVL102:
 1351 000e D978     	 ldrb r1,[r3,#3]
 1352 0010 0A40     	 ands r2,r2,r1
 1353              	.LVL103:
 1354              	.LBE309:
 1355              	.LBE308:
 200:src/MightyBoard/Motherboard/Planner.cc **** 			tail = getNextIndex(tail);
 1356              	 .loc 1 200 0
 1357 0012 5A70     	 strb r2,[r3,#1]
 1358              	.LBE307:
 1359              	.LBE306:
 650:src/MightyBoard/Motherboard/Planner.cc **** 		block_buffer.bumpTail();
 651:src/MightyBoard/Motherboard/Planner.cc **** 	}
 1360              	 .loc 1 651 0
 1361 0014 7047     	 bx lr
 1362              	 .cfi_endproc
 1363              	.LFE150:
 1365              	 .global __aeabi_fadd
 1366              	 .global __aeabi_fsub
 1367              	 .global __aeabi_fcmplt
 1368 0016 00BF     	 .section .text._ZN7planner12planNextMoveER5PointlRKS0_,"ax",%progbits
 1369              	 .align 2
 1370              	 .global _ZN7planner12planNextMoveER5PointlRKS0_
 1371              	 .thumb
 1372              	 .thumb_func
 1374              	_ZN7planner12planNextMoveER5PointlRKS0_:
 1375              	.LFB153:
 652:src/MightyBoard/Motherboard/Planner.cc **** 
 653:src/MightyBoard/Motherboard/Planner.cc **** 	/// Command calls this to add a move to the buffer,
 654:src/MightyBoard/Motherboard/Planner.cc **** 	/// so that the planner will generate an acceleration trapezoid
 655:src/MightyBoard/Motherboard/Planner.cc **** 	void addMoveToBufferRelative(const Point& move, const int32_t &ms, const int8_t relative)
 656:src/MightyBoard/Motherboard/Planner.cc **** 	{
 657:src/MightyBoard/Motherboard/Planner.cc **** 		
 658:src/MightyBoard/Motherboard/Planner.cc **** 		Point target;
 659:src/MightyBoard/Motherboard/Planner.cc **** 
 660:src/MightyBoard/Motherboard/Planner.cc **** 		target = move + *tool_offsets;
 661:src/MightyBoard/Motherboard/Planner.cc **** 
 662:src/MightyBoard/Motherboard/Planner.cc **** 		int32_t max_delta = 0;
 663:src/MightyBoard/Motherboard/Planner.cc **** 		for (int i = 0; i < STEPPER_COUNT; i++) {
 664:src/MightyBoard/Motherboard/Planner.cc **** 			int32_t delta = 0;
 665:src/MightyBoard/Motherboard/Planner.cc **** 			if ((relative & (1 << i))) {
 666:src/MightyBoard/Motherboard/Planner.cc **** 				target[i] = position[i] + move[i];
 667:src/MightyBoard/Motherboard/Planner.cc **** 				delta = abs(move[i]);
 668:src/MightyBoard/Motherboard/Planner.cc **** 			} else {
 669:src/MightyBoard/Motherboard/Planner.cc **** 				target[i] = move[i] + (*tool_offsets)[i];
 670:src/MightyBoard/Motherboard/Planner.cc **** 				delta = abs(target[i] - position[i]);
 671:src/MightyBoard/Motherboard/Planner.cc **** 				
 672:src/MightyBoard/Motherboard/Planner.cc **** 			}
 673:src/MightyBoard/Motherboard/Planner.cc **** 			if (delta > max_delta) {
 674:src/MightyBoard/Motherboard/Planner.cc **** 				max_delta = delta;
 675:src/MightyBoard/Motherboard/Planner.cc **** 			}
 676:src/MightyBoard/Motherboard/Planner.cc **** 		}
 677:src/MightyBoard/Motherboard/Planner.cc **** 
 678:src/MightyBoard/Motherboard/Planner.cc **** 		/// Clip Z axis so that plate cannot attempt to move out of build area
 679:src/MightyBoard/Motherboard/Planner.cc **** 		/// other axis clipping will be added in a future revision
 680:src/MightyBoard/Motherboard/Planner.cc **** 		if(target[Z_AXIS] > axes[Z_AXIS].max_length){
 681:src/MightyBoard/Motherboard/Planner.cc **** 			target[Z_AXIS] = axes[Z_AXIS].max_length;
 682:src/MightyBoard/Motherboard/Planner.cc **** 		}
 683:src/MightyBoard/Motherboard/Planner.cc **** 
 684:src/MightyBoard/Motherboard/Planner.cc **** 		planNextMove(target, ms/max_delta, target-position);
 685:src/MightyBoard/Motherboard/Planner.cc **** 		position = target;
 686:src/MightyBoard/Motherboard/Planner.cc **** 	}
 687:src/MightyBoard/Motherboard/Planner.cc **** 
 688:src/MightyBoard/Motherboard/Planner.cc **** 	// Buffer the move. IOW, add a new block, and recalculate the acceleration accordingly
 689:src/MightyBoard/Motherboard/Planner.cc **** 	void addMoveToBuffer(const Point& target, const int32_t &us_per_step)
 690:src/MightyBoard/Motherboard/Planner.cc **** 	{
 691:src/MightyBoard/Motherboard/Planner.cc **** //		xprintf("addMoveToBuffer" " (%s:%d)\n",_F_,_L_);
 692:src/MightyBoard/Motherboard/Planner.cc **** 		Point offset_target;
 693:src/MightyBoard/Motherboard/Planner.cc **** 		offset_target = target + *tool_offsets;
 694:src/MightyBoard/Motherboard/Planner.cc **** 		
 695:src/MightyBoard/Motherboard/Planner.cc **** 		/// Clip Z axis so that plate cannot attempt to move out of build area
 696:src/MightyBoard/Motherboard/Planner.cc **** 		/// other axis clipping will be added in a future revision
 697:src/MightyBoard/Motherboard/Planner.cc **** 		if(offset_target[Z_AXIS] > axes[Z_AXIS].max_length){
 698:src/MightyBoard/Motherboard/Planner.cc **** 			offset_target[Z_AXIS] = axes[Z_AXIS].max_length;
 699:src/MightyBoard/Motherboard/Planner.cc **** 		}
 700:src/MightyBoard/Motherboard/Planner.cc **** 
 701:src/MightyBoard/Motherboard/Planner.cc **** 			
 702:src/MightyBoard/Motherboard/Planner.cc **** 		planNextMove(offset_target, us_per_step, offset_target - position);
 703:src/MightyBoard/Motherboard/Planner.cc **** 		position = target;
 704:src/MightyBoard/Motherboard/Planner.cc **** 
 705:src/MightyBoard/Motherboard/Planner.cc **** 	}
 706:src/MightyBoard/Motherboard/Planner.cc **** 
 707:src/MightyBoard/Motherboard/Planner.cc **** 
 708:src/MightyBoard/Motherboard/Planner.cc **** 	///
 709:src/MightyBoard/Motherboard/Planner.cc **** 	bool planNextMove(Point& target, const int32_t us_per_step_in, const Point& steps)
 710:src/MightyBoard/Motherboard/Planner.cc **** 	{
 1376              	 .loc 1 710 0
 1377              	 .cfi_startproc
 1378              	 
 1379              	 
 1380              	.LVL104:
 1381 0000 2DE9F04F 	 push {r4,r5,r6,r7,r8,r9,sl,fp,lr}
 1382              	.LCFI9:
 1383              	 .cfi_def_cfa_offset 36
 1384              	 .cfi_offset 14,-4
 1385              	 .cfi_offset 11,-8
 1386              	 .cfi_offset 10,-12
 1387              	 .cfi_offset 9,-16
 1388              	 .cfi_offset 8,-20
 1389              	 .cfi_offset 7,-24
 1390              	 .cfi_offset 6,-28
 1391              	 .cfi_offset 5,-32
 1392              	 .cfi_offset 4,-36
 1393 0004 8FB0     	 sub sp,sp,#60
 1394              	.LCFI10:
 1395              	 .cfi_def_cfa_offset 96
 1396 0006 0546     	 mov r5,r0
 1397 0008 0091     	 str r1,[sp,#0]
 1398 000a 1446     	 mov r4,r2
 1399              	.LVL105:
 1400              	.LBB310:
 1401              	.LBB311:
 1402              	.LBB312:
 160:src/MightyBoard/Motherboard/Planner.cc **** 			return &data[head];
 1403              	 .loc 1 160 0
 1404 000c 40F20003 	 movw r3,#:lower16:.LANCHOR4
 1405 0010 C0F20003 	 movt r3,#:upper16:.LANCHOR4
 1406 0014 1A78     	 ldrb r2,[r3,#0]
 1407              	.LVL106:
 1408 0016 5B68     	 ldr r3,[r3,#4]
 1409 0018 4FF04C09 	 mov r9,#76
 1410 001c 09FB0239 	 mla r9,r9,r2,r3
 1411              	.LBE312:
 1412              	.LBE311:
 711:src/MightyBoard/Motherboard/Planner.cc **** 		Block *block = block_buffer.getHead();
 712:src/MightyBoard/Motherboard/Planner.cc **** 		// Mark block as not busy (Not executed by the stepper interrupt)
 713:src/MightyBoard/Motherboard/Planner.cc **** 		block->flags = 0;
 1413              	 .loc 1 713 0
 1414 0020 4FF00006 	 mov r6,#0
 1415 0024 89F84860 	 strb r6,[r9,#72]
 714:src/MightyBoard/Motherboard/Planner.cc **** 		
 715:src/MightyBoard/Motherboard/Planner.cc **** 		block->target = target;
 1416              	 .loc 1 715 0
 1417 0028 4F46     	 mov r7,r9
 1418 002a 0068     	 ldr r0,[r0,#0]
 1419              	.LVL107:
 1420 002c 6968     	 ldr r1,[r5,#4]
 1421              	.LVL108:
 1422 002e AA68     	 ldr r2,[r5,#8]
 1423 0030 EB68     	 ldr r3,[r5,#12]
 1424 0032 0FC7     	 stmia r7!,{r0,r1,r2,r3}
 1425 0034 2869     	 ldr r0,[r5,#16]
 1426 0036 3860     	 str r0,[r7,#0]
 1427              	.LVL109:
 716:src/MightyBoard/Motherboard/Planner.cc **** 		
 717:src/MightyBoard/Motherboard/Planner.cc **** 		uint32_t us_per_step = us_per_step_in;
 718:src/MightyBoard/Motherboard/Planner.cc **** 
 719:src/MightyBoard/Motherboard/Planner.cc **** 		float delta_mm[STEPPER_COUNT];
 720:src/MightyBoard/Motherboard/Planner.cc **** 		float local_millimeters = 0.0;
 721:src/MightyBoard/Motherboard/Planner.cc **** 		uint32_t local_step_event_count = 0;
 722:src/MightyBoard/Motherboard/Planner.cc **** 
 723:src/MightyBoard/Motherboard/Planner.cc **** 		// intentionally unraveled loop
 724:src/MightyBoard/Motherboard/Planner.cc **** 		int32_t abs_steps = abs(steps[X_AXIS]);
 1428              	 .loc 1 724 0
 1429 0038 2046     	 mov r0,r4
 1430 003a 3146     	 mov r1,r6
 1431 003c FFF7FEFF 	 bl _ZNK5PointixEj
 1432              	.LVL110:
 1433              	.LBB313:
 1434              	.LBB314:
 127:src/MightyBoard/Motherboard/Planner.cc **** inline long abs(long x) { return __builtin_labs(x); }
 1435              	 .loc 1 127 0
 1436 0040 0368     	 ldr r3,[r0,#0]
 1437 0042 83EAE378 	 eor r8,r3,r3,asr#31
 1438 0046 A8EBE378 	 sub r8,r8,r3,asr#31
 1439              	.LVL111:
 1440              	.LBE314:
 1441              	.LBE313:
 725:src/MightyBoard/Motherboard/Planner.cc **** 		local_step_event_count = abs_steps;
 726:src/MightyBoard/Motherboard/Planner.cc **** 		delta_mm[X_AXIS] = ((float)steps[X_AXIS])/axes[X_AXIS].steps_per_mm;
 1442              	 .loc 1 726 0
 1443 004a 2046     	 mov r0,r4
 1444              	.LVL112:
 1445 004c 3146     	 mov r1,r6
 1446 004e FFF7FEFF 	 bl _ZNK5PointixEj
 1447              	.LVL113:
 1448 0052 0068     	 ldr r0,[r0,#0]
 1449 0054 FFF7FEFF 	 bl __aeabi_i2f
 1450 0058 40F20006 	 movw r6,#:lower16:.LANCHOR1
 1451 005c C0F20006 	 movt r6,#:upper16:.LANCHOR1
 1452 0060 3168     	 ldr r1,[r6,#0]
 1453 0062 FFF7FEFF 	 bl __aeabi_fdiv
 1454 0066 0746     	 mov r7,r0
 1455 0068 0690     	 str r0,[sp,#24]
 727:src/MightyBoard/Motherboard/Planner.cc **** 
 728:src/MightyBoard/Motherboard/Planner.cc **** 		abs_steps = abs(steps[Y_AXIS]);
 1456              	 .loc 1 728 0
 1457 006a 2046     	 mov r0,r4
 1458 006c 4FF00101 	 mov r1,#1
 1459 0070 FFF7FEFF 	 bl _ZNK5PointixEj
 1460              	.LVL114:
 1461              	.LBB315:
 1462              	.LBB316:
 127:src/MightyBoard/Motherboard/Planner.cc **** inline long abs(long x) { return __builtin_labs(x); }
 1463              	 .loc 1 127 0
 1464 0074 0368     	 ldr r3,[r0,#0]
 1465 0076 83EAE37B 	 eor fp,r3,r3,asr#31
 1466 007a ABEBE37B 	 sub fp,fp,r3,asr#31
 1467              	.LBE316:
 1468              	.LBE315:
 1469              	 .loc 1 728 0
 1470 007e C345     	 cmp fp,r8
 1471 0080 B8BF     	 it lt
 1472 0082 C346     	 movlt fp,r8
 1473              	.LVL115:
 729:src/MightyBoard/Motherboard/Planner.cc **** 		local_step_event_count = max((int32_t)local_step_event_count, abs_steps);
 730:src/MightyBoard/Motherboard/Planner.cc **** 		delta_mm[Y_AXIS] = ((float)steps[Y_AXIS])/axes[Y_AXIS].steps_per_mm;
 1474              	 .loc 1 730 0
 1475 0084 2046     	 mov r0,r4
 1476              	.LVL116:
 1477 0086 4FF00101 	 mov r1,#1
 1478 008a FFF7FEFF 	 bl _ZNK5PointixEj
 1479              	.LVL117:
 1480 008e 0068     	 ldr r0,[r0,#0]
 1481 0090 FFF7FEFF 	 bl __aeabi_i2f
 1482 0094 7169     	 ldr r1,[r6,#20]
 1483 0096 FFF7FEFF 	 bl __aeabi_fdiv
 1484 009a 8046     	 mov r8,r0
 1485 009c 0790     	 str r0,[sp,#28]
 731:src/MightyBoard/Motherboard/Planner.cc **** 
 732:src/MightyBoard/Motherboard/Planner.cc **** 		abs_steps = abs(steps[Z_AXIS]);
 1486              	 .loc 1 732 0
 1487 009e 2046     	 mov r0,r4
 1488 00a0 4FF00201 	 mov r1,#2
 1489 00a4 FFF7FEFF 	 bl _ZNK5PointixEj
 1490              	.LVL118:
 1491              	.LBB317:
 1492              	.LBB318:
 127:src/MightyBoard/Motherboard/Planner.cc **** inline long abs(long x) { return __builtin_labs(x); }
 1493              	 .loc 1 127 0
 1494 00a8 0368     	 ldr r3,[r0,#0]
 1495 00aa 83EAE37A 	 eor sl,r3,r3,asr#31
 1496 00ae AAEBE37A 	 sub sl,sl,r3,asr#31
 1497              	.LBE318:
 1498              	.LBE317:
 1499              	 .loc 1 732 0
 1500 00b2 D345     	 cmp fp,sl
 1501 00b4 A8BF     	 it ge
 1502 00b6 DA46     	 movge sl,fp
 1503              	.LVL119:
 733:src/MightyBoard/Motherboard/Planner.cc **** 		local_step_event_count = max((int32_t)local_step_event_count, abs_steps);
 734:src/MightyBoard/Motherboard/Planner.cc **** 		delta_mm[Z_AXIS] = ((float)steps[Z_AXIS])/axes[Z_AXIS].steps_per_mm;
 1504              	 .loc 1 734 0
 1505 00b8 2046     	 mov r0,r4
 1506              	.LVL120:
 1507 00ba 4FF00201 	 mov r1,#2
 1508 00be FFF7FEFF 	 bl _ZNK5PointixEj
 1509              	.LVL121:
 1510 00c2 0068     	 ldr r0,[r0,#0]
 1511 00c4 FFF7FEFF 	 bl __aeabi_i2f
 1512 00c8 B16A     	 ldr r1,[r6,#40]
 1513 00ca FFF7FEFF 	 bl __aeabi_fdiv
 1514 00ce 0646     	 mov r6,r0
 1515 00d0 0890     	 str r0,[sp,#32]
 735:src/MightyBoard/Motherboard/Planner.cc **** 		
 736:src/MightyBoard/Motherboard/Planner.cc **** 		
 737:src/MightyBoard/Motherboard/Planner.cc **** 
 738:src/MightyBoard/Motherboard/Planner.cc **** 		//local_step_event_cout is the max of x,y,z speeds)
 739:src/MightyBoard/Motherboard/Planner.cc **** 		if (local_step_event_count > 0) {
 1516              	 .loc 1 739 0
 1517 00d2 BAF1000F 	 cmp sl,#0
 1518 00d6 00F04882 	 beq .L74
 740:src/MightyBoard/Motherboard/Planner.cc **** 			local_millimeters = sqrt(delta_mm[X_AXIS]*delta_mm[X_AXIS] + delta_mm[Y_AXIS]*delta_mm[Y_AXIS] +
 1519              	 .loc 1 740 0
 1520 00da 3846     	 mov r0,r7
 1521 00dc 3946     	 mov r1,r7
 1522 00de FFF7FEFF 	 bl __aeabi_fmul
 1523 00e2 0746     	 mov r7,r0
 1524 00e4 4046     	 mov r0,r8
 1525 00e6 4146     	 mov r1,r8
 1526 00e8 FFF7FEFF 	 bl __aeabi_fmul
 1527 00ec 0146     	 mov r1,r0
 1528 00ee 3846     	 mov r0,r7
 1529 00f0 FFF7FEFF 	 bl __aeabi_fadd
 1530 00f4 0746     	 mov r7,r0
 1531 00f6 3046     	 mov r0,r6
 1532 00f8 3146     	 mov r1,r6
 1533 00fa FFF7FEFF 	 bl __aeabi_fmul
 1534 00fe 0146     	 mov r1,r0
 1535 0100 3846     	 mov r0,r7
 1536 0102 FFF7FEFF 	 bl __aeabi_fadd
 1537 0106 FFF7FEFF 	 bl __aeabi_f2d
 1538 010a FFF7FEFF 	 bl sqrt
 1539 010e FFF7FEFF 	 bl __aeabi_d2f
 1540 0112 0390     	 str r0,[sp,#12]
 1541              	.LVL122:
 741:src/MightyBoard/Motherboard/Planner.cc **** 		}
 742:src/MightyBoard/Motherboard/Planner.cc **** 
 743:src/MightyBoard/Motherboard/Planner.cc **** 		abs_steps = abs(steps[A_AXIS]);
 1542              	 .loc 1 743 0
 1543 0114 2046     	 mov r0,r4
 1544              	.LVL123:
 1545 0116 4FF00301 	 mov r1,#3
 1546 011a FFF7FEFF 	 bl _ZNK5PointixEj
 1547              	.LVL124:
 1548              	.LBB319:
 1549              	.LBB320:
 127:src/MightyBoard/Motherboard/Planner.cc **** inline long abs(long x) { return __builtin_labs(x); }
 1550              	 .loc 1 127 0
 1551 011e 0368     	 ldr r3,[r0,#0]
 1552 0120 002B     	 cmp r3,#0
 1553 0122 B8BF     	 it lt
 1554 0124 5B42     	 rsblt r3,r3,#0
 1555              	.LBE320:
 1556              	.LBE319:
 744:src/MightyBoard/Motherboard/Planner.cc **** 		local_step_event_count = max((int32_t)local_step_event_count, abs_steps);
 1557              	 .loc 1 744 0
 1558 0126 5345     	 cmp r3,sl
 1559 0128 B8BF     	 it lt
 1560 012a 5346     	 movlt r3,sl
 1561 012c 0293     	 str r3,[sp,#8]
 1562              	.LVL125:
 745:src/MightyBoard/Motherboard/Planner.cc **** 		delta_mm[A_AXIS] = ((float)steps[A_AXIS])/axes[A_AXIS].steps_per_mm;
 1563              	 .loc 1 745 0
 1564 012e 2046     	 mov r0,r4
 1565              	.LVL126:
 1566 0130 4FF00301 	 mov r1,#3
 1567 0134 FFF7FEFF 	 bl _ZNK5PointixEj
 1568              	.LVL127:
 1569 0138 0068     	 ldr r0,[r0,#0]
 1570 013a FFF7FEFF 	 bl __aeabi_i2f
 1571 013e 40F20003 	 movw r3,#:lower16:.LANCHOR1
 1572 0142 C0F20003 	 movt r3,#:upper16:.LANCHOR1
 1573 0146 D96B     	 ldr r1,[r3,#60]
 1574 0148 FFF7FEFF 	 bl __aeabi_fdiv
 1575 014c 0646     	 mov r6,r0
 1576 014e 0990     	 str r0,[sp,#36]
 746:src/MightyBoard/Motherboard/Planner.cc **** 
 747:src/MightyBoard/Motherboard/Planner.cc **** 		if (local_millimeters == 0.0) {
 1577              	 .loc 1 747 0
 1578 0150 0398     	 ldr r0,[sp,#12]
 1579 0152 4FF00001 	 mov r1,#0
 1580 0156 FFF7FEFF 	 bl __aeabi_fcmpeq
 1581 015a 50B1     	 cbz r0,.L75
 745:src/MightyBoard/Motherboard/Planner.cc **** 		delta_mm[A_AXIS] = ((float)steps[A_AXIS])/axes[A_AXIS].steps_per_mm;
 1582              	 .loc 1 745 0
 1583 015c 0396     	 str r6,[sp,#12]
 1584              	.LVL128:
 1585              	.L101:
 1586              	.LBB322:
 1587              	.LBB323:
 121:src/MightyBoard/Motherboard/Planner.cc **** inline T abs(T x) { return (x)>0?(x):-(x); }
 1588              	 .loc 1 121 0
 1589 015e 0398     	 ldr r0,[sp,#12]
 1590 0160 4FF00001 	 mov r1,#0
 1591 0164 FFF7FEFF 	 bl __aeabi_fcmpgt
 1592 0168 18B9     	 cbnz r0,.L75
 1593 016a 0399     	 ldr r1,[sp,#12]
 1594 016c 01F10043 	 add r3,r1,#-2147483648
 1595 0170 0393     	 str r3,[sp,#12]
 1596              	.LVL129:
 1597              	.L75:
 1598              	.LBE323:
 1599              	.LBE322:
 748:src/MightyBoard/Motherboard/Planner.cc **** 			local_millimeters = abs(delta_mm[A_AXIS]);
 749:src/MightyBoard/Motherboard/Planner.cc **** 		}
 750:src/MightyBoard/Motherboard/Planner.cc **** 
 751:src/MightyBoard/Motherboard/Planner.cc **** #if STEPPER_COUNT > 4
 752:src/MightyBoard/Motherboard/Planner.cc **** 		abs_steps = abs(steps[B_AXIS]);
 753:src/MightyBoard/Motherboard/Planner.cc **** 		local_step_event_count = max((int32_t)local_step_event_count, abs_steps);
 754:src/MightyBoard/Motherboard/Planner.cc **** 		delta_mm[B_AXIS] = ((float)steps[B_AXIS])/axes[B_AXIS].steps_per_mm;
 755:src/MightyBoard/Motherboard/Planner.cc **** 
 756:src/MightyBoard/Motherboard/Planner.cc **** 		if (local_millimeters == 0.0) {
 757:src/MightyBoard/Motherboard/Planner.cc **** 			local_millimeters = abs(delta_mm[B_AXIS]);
 758:src/MightyBoard/Motherboard/Planner.cc **** 		}
 759:src/MightyBoard/Motherboard/Planner.cc **** #endif
 760:src/MightyBoard/Motherboard/Planner.cc **** 
 761:src/MightyBoard/Motherboard/Planner.cc **** 		//local_step_event_cout is the max of x,y,z,a,b speeds)
 762:src/MightyBoard/Motherboard/Planner.cc **** 		if (local_step_event_count == 0)
 1600              	 .loc 1 762 0
 1601 0172 029A     	 ldr r2,[sp,#8]
 763:src/MightyBoard/Motherboard/Planner.cc **** 			return false;
 1602              	 .loc 1 763 0
 1603 0174 4FF00000 	 mov r0,#0
 762:src/MightyBoard/Motherboard/Planner.cc **** 		if (local_step_event_count == 0)
 1604              	 .loc 1 762 0
 1605 0178 002A     	 cmp r2,#0
 1606 017a 00F0F381 	 beq .L77
 717:src/MightyBoard/Motherboard/Planner.cc **** 		uint32_t us_per_step = us_per_step_in;
 1607              	 .loc 1 717 0
 1608 017e 009F     	 ldr r7,[sp,#0]
 764:src/MightyBoard/Motherboard/Planner.cc **** 
 765:src/MightyBoard/Motherboard/Planner.cc **** 		if(!accelerationON){
 1609              	 .loc 1 765 0
 1610 0180 40F20003 	 movw r3,#:lower16:.LANCHOR0
 1611 0184 C0F20003 	 movt r3,#:upper16:.LANCHOR0
 1612 0188 1B78     	 ldrb r3,[r3,#0]
 1613 018a 53BB     	 cbnz r3,.L78
 766:src/MightyBoard/Motherboard/Planner.cc **** 			block->target = target;
 1614              	 .loc 1 766 0
 1615 018c 4C46     	 mov r4,r9
 1616              	.LVL130:
 1617 018e 2868     	 ldr r0,[r5,#0]
 1618 0190 6968     	 ldr r1,[r5,#4]
 1619 0192 AA68     	 ldr r2,[r5,#8]
 1620 0194 EB68     	 ldr r3,[r5,#12]
 1621 0196 0FC4     	 stmia r4!,{r0,r1,r2,r3}
 1622 0198 2869     	 ldr r0,[r5,#16]
 1623 019a 2060     	 str r0,[r4,#0]
 767:src/MightyBoard/Motherboard/Planner.cc **** 			block->nominal_rate = 1000000/us_per_step;
 1624              	 .loc 1 767 0
 1625 019c 44F24023 	 movw r3,#16960
 1626 01a0 C0F20F03 	 movt r3,15
 1627 01a4 B3FBF7F3 	 udiv r3,r3,r7
 1628 01a8 C9F83830 	 str r3,[r9,#56]
 768:src/MightyBoard/Motherboard/Planner.cc **** 			block->accelerate_until = 0;
 1629              	 .loc 1 768 0
 1630 01ac 4FF00003 	 mov r3,#0
 1631 01b0 A9F81630 	 strh r3,[r9,#22]
 769:src/MightyBoard/Motherboard/Planner.cc **** 			block->step_event_count = local_step_event_count;
 1632              	 .loc 1 769 0
 1633 01b4 029D     	 ldr r5,[sp,#8]
 1634              	.LVL131:
 1635 01b6 AAB2     	 uxth r2,r5
 1636 01b8 A9F81420 	 strh r2,[r9,#20]
 770:src/MightyBoard/Motherboard/Planner.cc **** 			block->decelerate_after = local_step_event_count;
 1637              	 .loc 1 770 0
 1638 01bc A9F81820 	 strh r2,[r9,#24]
 771:src/MightyBoard/Motherboard/Planner.cc **** 			block->acceleration_rate = 0;
 1639              	 .loc 1 771 0
 1640 01c0 C9F81C30 	 str r3,[r9,#28]
 1641              	.LVL132:
 1642              	.LBB324:
 1643              	.LBB325:
 194:src/MightyBoard/Motherboard/Planner.cc **** 			head = getNextIndex(head);
 1644              	 .loc 1 194 0
 1645 01c4 40F20003 	 movw r3,#:lower16:.LANCHOR4
 1646 01c8 C0F20003 	 movt r3,#:upper16:.LANCHOR4
 1647 01cc 1A78     	 ldrb r2,[r3,#0]
 1648              	.LVL133:
 1649              	.LBB326:
 1650              	.LBB327:
 174:src/MightyBoard/Motherboard/Planner.cc **** 			return ((from + 1) & size_mask);
 1651              	 .loc 1 174 0
 1652 01ce 02F10102 	 add r2,r2,#1
 1653              	.LVL134:
 1654 01d2 D978     	 ldrb r1,[r3,#3]
 1655 01d4 0A40     	 ands r2,r2,r1
 1656              	.LVL135:
 1657              	.LBE327:
 1658              	.LBE326:
 194:src/MightyBoard/Motherboard/Planner.cc **** 			head = getNextIndex(head);
 1659              	 .loc 1 194 0
 1660 01d6 1A70     	 strb r2,[r3,#0]
 1661              	.LBE325:
 1662              	.LBE324:
 772:src/MightyBoard/Motherboard/Planner.cc **** 			block_buffer.bumpHead();
 773:src/MightyBoard/Motherboard/Planner.cc **** 			steppers::startRunning();
 1663              	 .loc 1 773 0
 1664 01d8 FFF7FEFF 	 bl _ZN8steppers12startRunningEv
 774:src/MightyBoard/Motherboard/Planner.cc **** 			return true; //acceleration was not on, just move value into queue and run it
 1665              	 .loc 1 774 0
 1666 01dc 4FF00100 	 mov r0,#1
 1667 01e0 C0E1     	 b .L77
 1668              	.LVL136:
 1669              	.L78:
 775:src/MightyBoard/Motherboard/Planner.cc **** 		}
 776:src/MightyBoard/Motherboard/Planner.cc **** 
 777:src/MightyBoard/Motherboard/Planner.cc **** 		// if printing from RepG, ensure moves take a minimum amount of time so that the serial transfer 
 778:src/MightyBoard/Motherboard/Planner.cc **** 		if(!sdcard::isPlaying() ){
 1670              	 .loc 1 778 0
 1671 01e2 FFF7FEFF 	 bl _ZN6sdcard9isPlayingEv
 1672 01e6 58B9     	 cbnz r0,.L79
 779:src/MightyBoard/Motherboard/Planner.cc **** 			if ((us_per_step * local_step_event_count) < MIN_MS_PER_SEGMENT) {
 1673              	 .loc 1 779 0
 1674 01e8 0099     	 ldr r1,[sp,#0]
 1675 01ea 029D     	 ldr r5,[sp,#8]
 1676              	.LVL137:
 1677 01ec 01FB05F2 	 mul r2,r1,r5
 1678 01f0 42F20F73 	 movw r3,#9999
 1679 01f4 9A42     	 cmp r2,r3
 780:src/MightyBoard/Motherboard/Planner.cc **** 				us_per_step = MIN_MS_PER_SEGMENT / local_step_event_count;
 1680              	 .loc 1 780 0
 1681 01f6 9CBF     	 itt ls
 1682 01f8 42F21077 	 movwls r7,#10000
 1683 01fc B7FBF5F7 	 udivls r7,r7,r5
 1684              	.LVL138:
 1685              	.L79:
 781:src/MightyBoard/Motherboard/Planner.cc **** 			}
 782:src/MightyBoard/Motherboard/Planner.cc **** 		}
 783:src/MightyBoard/Motherboard/Planner.cc **** 		
 784:src/MightyBoard/Motherboard/Planner.cc **** 		//TODO : test buffer empty slowing
 785:src/MightyBoard/Motherboard/Planner.cc **** 		
 786:src/MightyBoard/Motherboard/Planner.cc **** 	/*	uint8_t moves_queued = block_buffer.getUsedCount();
 787:src/MightyBoard/Motherboard/Planner.cc **** 		if ((moves_queued  > 1) && (moves_queued < (BLOCK_BUFFER_SIZE >> 1))){
 788:src/MightyBoard/Motherboard/Planner.cc **** 			int32_t segment_time = us_per_step * local_step_event_count;
 789:src/MightyBoard/Motherboard/Planner.cc **** 			//if ((us_per_step * local_step_event_count) < MIN_MS_PER_SEGMENT) {
 790:src/MightyBoard/Motherboard/Planner.cc **** 			if (segment_time < MIN_MS_PER_SEGMENT){
 791:src/MightyBoard/Motherboard/Planner.cc **** 				segment_time+= 2*(MIN_MS_PER_SEGMENT - segment_time) / moves_queued;
 792:src/MightyBoard/Motherboard/Planner.cc **** 				us_per_step = segment_time / local_step_event_count;
 793:src/MightyBoard/Motherboard/Planner.cc **** 			}
 794:src/MightyBoard/Motherboard/Planner.cc **** 		}
 795:src/MightyBoard/Motherboard/Planner.cc **** 		*/
 796:src/MightyBoard/Motherboard/Planner.cc **** 
 797:src/MightyBoard/Motherboard/Planner.cc **** 
 798:src/MightyBoard/Motherboard/Planner.cc **** 		float inverse_millimeters = 1.0/local_millimeters; // Inverse millimeters to remove multiple divi
 799:src/MightyBoard/Motherboard/Planner.cc **** 		// Calculate 1 second/(seconds for this movement)
 800:src/MightyBoard/Motherboard/Planner.cc **** 		float inverse_second = 1000000.0/(float)(us_per_step * local_step_event_count);
 1686              	 .loc 1 800 0
 1687 0200 029D     	 ldr r5,[sp,#8]
 1688 0202 05FB07F0 	 mul r0,r5,r7
 1689 0206 FFF7FEFF 	 bl __aeabi_ui2f
 1690 020a 0146     	 mov r1,r0
 1691 020c 4FF41050 	 mov r0,#9216
 1692 0210 C4F67410 	 movt r0,18804
 1693 0214 FFF7FEFF 	 bl __aeabi_fdiv
 1694 0218 0646     	 mov r6,r0
 1695              	.LVL139:
 801:src/MightyBoard/Motherboard/Planner.cc **** 		float steps_per_mm = (float)local_step_event_count * inverse_millimeters;
 1696              	 .loc 1 801 0
 1697 021a 0298     	 ldr r0,[sp,#8]
 1698              	.LVL140:
 1699 021c FFF7FEFF 	 bl __aeabi_ui2f
 1700 0220 0090     	 str r0,[sp,#0]
 798:src/MightyBoard/Motherboard/Planner.cc **** 		float inverse_millimeters = 1.0/local_millimeters; // Inverse millimeters to remove multiple divi
 1701              	 .loc 1 798 0
 1702 0222 4FF07E50 	 mov r0,#1065353216
 1703 0226 0399     	 ldr r1,[sp,#12]
 1704 0228 FFF7FEFF 	 bl __aeabi_fdiv
 1705 022c 0146     	 mov r1,r0
 1706              	 .loc 1 801 0
 1707 022e 0098     	 ldr r0,[sp,#0]
 1708 0230 FFF7FEFF 	 bl __aeabi_fmul
 1709 0234 0590     	 str r0,[sp,#20]
 1710              	.LVL141:
 802:src/MightyBoard/Motherboard/Planner.cc **** 
 803:src/MightyBoard/Motherboard/Planner.cc **** 		// we are given microseconds/step, and we need steps/mm, and steps/second
 804:src/MightyBoard/Motherboard/Planner.cc **** 
 805:src/MightyBoard/Motherboard/Planner.cc **** 		// Calculate speed in steps/sec
 806:src/MightyBoard/Motherboard/Planner.cc **** 		uint32_t steps_per_second = 1000000/us_per_step;
 807:src/MightyBoard/Motherboard/Planner.cc **** 		float mm_per_second = local_millimeters * inverse_second;
 1711              	 .loc 1 807 0
 1712 0236 3046     	 mov r0,r6
 1713              	.LVL142:
 1714 0238 0399     	 ldr r1,[sp,#12]
 1715 023a FFF7FEFF 	 bl __aeabi_fmul
 1716 023e 0490     	 str r0,[sp,#16]
 1717              	.LVL143:
 806:src/MightyBoard/Motherboard/Planner.cc **** 		uint32_t steps_per_second = 1000000/us_per_step;
 1718              	 .loc 1 806 0
 1719 0240 44F24023 	 movw r3,#16960
 1720 0244 C0F20F03 	 movt r3,15
 1721 0248 B3FBF7F7 	 udiv r7,r3,r7
 1722              	.LVL144:
 808:src/MightyBoard/Motherboard/Planner.cc **** 
 809:src/MightyBoard/Motherboard/Planner.cc **** 		// Calculate speed in mm/second for each axis. No divide by zero due to previous checks.
 810:src/MightyBoard/Motherboard/Planner.cc **** 		float local_nominal_speed = mm_per_second; // (mm/sec) Always > 0
 811:src/MightyBoard/Motherboard/Planner.cc **** 		block->nominal_rate = steps_per_second; // (step/sec) Always > 0
 1723              	 .loc 1 811 0
 1724 024c C9F83870 	 str r7,[r9,#56]
 1725              	.LVL145:
 1726 0250 4FF00005 	 mov r5,#0
 1727              	.LVL146:
 1728              	.L80:
 1729              	.LBB328:
 812:src/MightyBoard/Motherboard/Planner.cc **** 
 813:src/MightyBoard/Motherboard/Planner.cc **** 		float current_speed[STEPPER_COUNT];
 814:src/MightyBoard/Motherboard/Planner.cc **** 		for(int i=0; i < STEPPER_COUNT; i++) {
 815:src/MightyBoard/Motherboard/Planner.cc **** 			current_speed[i] = delta_mm[i] * inverse_second;
 1730              	 .loc 1 815 0 discriminator 2
 1731 0254 05F11802 	 add r2,r5,#24
 1732 0258 6946     	 mov r1,sp
 1733 025a 5058     	 ldr r0,[r2,r1]
 1734 025c 3146     	 mov r1,r6
 1735 025e FFF7FEFF 	 bl __aeabi_fmul
 1736 0262 0AAB     	 add r3,sp,#40
 1737 0264 5851     	 str r0,[r3,r5]
 1738 0266 05F10405 	 add r5,r5,#4
 814:src/MightyBoard/Motherboard/Planner.cc **** 		for(int i=0; i < STEPPER_COUNT; i++) {
 1739              	 .loc 1 814 0 discriminator 2
 1740 026a 102D     	 cmp r5,#16
 1741 026c F2D1     	 bne .L80
 1742              	.LBE328:
 816:src/MightyBoard/Motherboard/Planner.cc **** 		}
 817:src/MightyBoard/Motherboard/Planner.cc **** 
 818:src/MightyBoard/Motherboard/Planner.cc **** 		// Compute and limit the acceleration rate for the trapezoid generator.
 819:src/MightyBoard/Motherboard/Planner.cc **** 		uint32_t local_acceleration_st = ceil(default_acceleration * steps_per_mm); // convert to: accele
 1743              	 .loc 1 819 0
 1744 026e 40F20003 	 movw r3,#:lower16:.LANCHOR3
 1745 0272 C0F20003 	 movt r3,#:upper16:.LANCHOR3
 1746 0276 0598     	 ldr r0,[sp,#20]
 1747 0278 1968     	 ldr r1,[r3,#0]
 1748 027a FFF7FEFF 	 bl __aeabi_fmul
 1749 027e FFF7FEFF 	 bl __aeabi_f2d
 1750 0282 FFF7FEFF 	 bl ceil
 1751 0286 FFF7FEFF 	 bl __aeabi_d2uiz
 1752 028a 8246     	 mov sl,r0
 1753              	.LVL147:
 1754 028c 40F20007 	 movw r7,#:lower16:.LANCHOR1
 1755 0290 C0F20007 	 movt r7,#:upper16:.LANCHOR1
 820:src/MightyBoard/Motherboard/Planner.cc **** 		// Limit acceleration per axis
 821:src/MightyBoard/Motherboard/Planner.cc **** 		for(int i=0; i < STEPPER_COUNT; i++) {
 1756              	 .loc 1 821 0
 1757 0294 4FF00006 	 mov r6,#0
 1758              	.LVL148:
 1759 0298 CB46     	 mov fp,r9
 1760 029a A146     	 mov r9,r4
 1761              	.LVL149:
 1762              	.L82:
 1763              	.LBB329:
 1764              	.LBB330:
 822:src/MightyBoard/Motherboard/Planner.cc **** 			// warning: arithmetic overflow is easy here. Try to mitigate.
 823:src/MightyBoard/Motherboard/Planner.cc **** 			float step_scale = (float)abs(steps[i]) / (float)local_step_event_count;
 1765              	 .loc 1 823 0
 1766 029c 4846     	 mov r0,r9
 1767 029e 3146     	 mov r1,r6
 1768 02a0 FFF7FEFF 	 bl _ZNK5PointixEj
 1769 02a4 0446     	 mov r4,r0
 1770              	.LVL150:
 824:src/MightyBoard/Motherboard/Planner.cc **** 			float axis_acceleration_st = (float)local_acceleration_st * step_scale;
 825:src/MightyBoard/Motherboard/Planner.cc **** 			if((uint32_t)axis_acceleration_st > axes[i].max_acceleration)
 1771              	 .loc 1 825 0
 1772 02a6 FD68     	 ldr r5,[r7,#12]
 824:src/MightyBoard/Motherboard/Planner.cc **** 			float axis_acceleration_st = (float)local_acceleration_st * step_scale;
 1773              	 .loc 1 824 0
 1774 02a8 5046     	 mov r0,sl
 1775              	.LVL151:
 1776 02aa FFF7FEFF 	 bl __aeabi_ui2f
 1777              	.LVL152:
 1778 02ae 8046     	 mov r8,r0
 1779              	.LBB331:
 1780              	.LBB332:
 127:src/MightyBoard/Motherboard/Planner.cc **** inline long abs(long x) { return __builtin_labs(x); }
 1781              	 .loc 1 127 0
 1782 02b0 2068     	 ldr r0,[r4,#0]
 1783              	.LVL153:
 1784              	.LBE332:
 1785              	.LBE331:
 823:src/MightyBoard/Motherboard/Planner.cc **** 			float step_scale = (float)abs(steps[i]) / (float)local_step_event_count;
 1786              	 .loc 1 823 0
 1787 02b2 0028     	 cmp r0,#0
 1788 02b4 B8BF     	 it lt
 1789 02b6 4042     	 rsblt r0,r0,#0
 1790              	.LVL154:
 1791 02b8 FFF7FEFF 	 bl __aeabi_i2f
 1792 02bc 0099     	 ldr r1,[sp,#0]
 1793 02be FFF7FEFF 	 bl __aeabi_fdiv
 1794 02c2 0146     	 mov r1,r0
 824:src/MightyBoard/Motherboard/Planner.cc **** 			float axis_acceleration_st = (float)local_acceleration_st * step_scale;
 1795              	 .loc 1 824 0
 1796 02c4 4046     	 mov r0,r8
 1797 02c6 FFF7FEFF 	 bl __aeabi_fmul
 1798              	 .loc 1 825 0
 1799 02ca FFF7FEFF 	 bl __aeabi_f2uiz
 826:src/MightyBoard/Motherboard/Planner.cc **** 				local_acceleration_st = axes[i].max_acceleration;
 1800              	 .loc 1 826 0
 1801 02ce A842     	 cmp r0,r5
 1802 02d0 88BF     	 it hi
 1803 02d2 AA46     	 movhi sl,r5
 1804              	.LVL155:
 1805              	.LBE330:
 821:src/MightyBoard/Motherboard/Planner.cc **** 		for(int i=0; i < STEPPER_COUNT; i++) {
 1806              	 .loc 1 821 0
 1807 02d4 06F10106 	 add r6,r6,#1
 1808              	.LVL156:
 1809 02d8 07F11407 	 add r7,r7,#20
 1810 02dc 042E     	 cmp r6,#4
 1811 02de DDD1     	 bne .L82
 1812 02e0 D946     	 mov r9,fp
 1813              	.LVL157:
 1814              	.LBE329:
 827:src/MightyBoard/Motherboard/Planner.cc **** 		}
 828:src/MightyBoard/Motherboard/Planner.cc **** 		block->acceleration = local_acceleration_st / steps_per_mm;
 1815              	 .loc 1 828 0
 1816 02e2 5046     	 mov r0,sl
 1817 02e4 FFF7FEFF 	 bl __aeabi_ui2f
 1818 02e8 0599     	 ldr r1,[sp,#20]
 1819 02ea FFF7FEFF 	 bl __aeabi_fdiv
 1820 02ee CBF83000 	 str r0,[fp,#48]
 829:src/MightyBoard/Motherboard/Planner.cc **** 		block->acceleration_rate = local_acceleration_st / ACCELERATION_TICKS_PER_SECOND;
 1821              	 .loc 1 829 0
 1822 02f2 4FEA9A02 	 lsr r2,sl,#2
 1823 02f6 47F60143 	 movw r3,#31745
 1824 02fa C2F28E13 	 movt r3,8590
 1825 02fe A3FB0253 	 umull r5,r3,r3,r2
 1826 0302 4FEA1323 	 lsr r3,r3,#8
 1827 0306 CBF81C30 	 str r3,[fp,#28]
 1828              	.LVL158:
 1829              	.LBB333:
 1830              	.LBB334:
 106:src/MightyBoard/Motherboard/Planner.cc **** inline const T& min(const T& a, const T& b) { return (a)<(b)?(a):(b); }
 1831              	 .loc 1 106 0
 1832 030a 40F20003 	 movw r3,#:lower16:.LANCHOR6
 1833 030e C0F20003 	 movt r3,#:upper16:.LANCHOR6
 1834 0312 1D68     	 ldr r5,[r3,#0]
 1835 0314 0498     	 ldr r0,[sp,#16]
 1836 0316 2946     	 mov r1,r5
 1837 0318 FFF7FEFF 	 bl __aeabi_fcmpgt
 1838 031c 00B9     	 cbnz r0,.L83
 1839 031e 049D     	 ldr r5,[sp,#16]
 1840              	.L83:
 1841              	.LVL159:
 1842              	.LBE334:
 1843              	.LBE333:
 1844              	.LBB335:
 1845              	.LBB336:
 1846              	.LBB337:
 204:src/MightyBoard/Motherboard/Planner.cc **** 			return head == tail;
 1847              	 .loc 1 204 0
 1848 0320 40F20003 	 movw r3,#:lower16:.LANCHOR4
 1849 0324 C0F20003 	 movt r3,#:upper16:.LANCHOR4
 1850 0328 1A78     	 ldrb r2,[r3,#0]
 1851 032a 5B78     	 ldrb r3,[r3,#1]
 1852              	.LBE337:
 1853              	.LBE336:
 830:src/MightyBoard/Motherboard/Planner.cc **** 
 831:src/MightyBoard/Motherboard/Planner.cc **** 		
 832:src/MightyBoard/Motherboard/Planner.cc **** 		// Compute the speed trasitions, or "jerks"
 833:src/MightyBoard/Motherboard/Planner.cc **** 		// The default value the junction speed is the minimum_planner_speed (or local_nominal_speed if i
 834:src/MightyBoard/Motherboard/Planner.cc **** 		float vmax_junction = min(minimum_planner_speed, local_nominal_speed); 
 835:src/MightyBoard/Motherboard/Planner.cc **** 		
 836:src/MightyBoard/Motherboard/Planner.cc **** 		if ((!block_buffer.isEmpty()) && (previous_nominal_speed > 0.0)) {
 1854              	 .loc 1 836 0
 1855 032c 9A42     	 cmp r2,r3
 1856 032e 00F09A80 	 beq .L85
 1857              	 .loc 1 836 0 is_stmt 0 discriminator 1
 1858 0332 40F20003 	 movw r3,#:lower16:.LANCHOR7
 1859 0336 C0F20003 	 movt r3,#:upper16:.LANCHOR7
 1860 033a 1868     	 ldr r0,[r3,#0]
 1861 033c 4FF00001 	 mov r1,#0
 1862 0340 FFF7FEFF 	 bl __aeabi_fcmpgt
 1863 0344 0028     	 cmp r0,#0
 1864 0346 00F08E80 	 beq .L85
 1865              	.LBB338:
 837:src/MightyBoard/Motherboard/Planner.cc **** 			   float jerk = sqrt(pow((current_speed[X_AXIS]-previous_speed[X_AXIS]), 2)+pow((current_speed[Y
 1866              	 .loc 1 837 0 is_stmt 1 discriminator 4
 1867 034a 40F20004 	 movw r4,#:lower16:.LANCHOR8
 1868 034e C0F20004 	 movt r4,#:upper16:.LANCHOR8
 1869 0352 0A98     	 ldr r0,[sp,#40]
 1870 0354 2168     	 ldr r1,[r4,#0]
 1871 0356 FFF7FEFF 	 bl __aeabi_fsub
 1872 035a FFF7FEFF 	 bl __aeabi_f2d
 1873 035e 0246     	 mov r2,r0
 1874 0360 0B46     	 mov r3,r1
 1875 0362 FFF7FEFF 	 bl __aeabi_dmul
 1876 0366 0646     	 mov r6,r0
 1877              	.LVL160:
 1878 0368 0F46     	 mov r7,r1
 1879 036a 0B98     	 ldr r0,[sp,#44]
 1880 036c 6168     	 ldr r1,[r4,#4]
 1881 036e FFF7FEFF 	 bl __aeabi_fsub
 1882 0372 FFF7FEFF 	 bl __aeabi_f2d
 1883 0376 0246     	 mov r2,r0
 1884 0378 0B46     	 mov r3,r1
 1885 037a FFF7FEFF 	 bl __aeabi_dmul
 1886 037e 0246     	 mov r2,r0
 1887 0380 0B46     	 mov r3,r1
 1888 0382 3046     	 mov r0,r6
 1889 0384 3946     	 mov r1,r7
 1890 0386 FFF7FEFF 	 bl __aeabi_dadd
 1891 038a FFF7FEFF 	 bl sqrt
 1892 038e FFF7FEFF 	 bl __aeabi_d2f
 1893 0392 0646     	 mov r6,r0
 1894              	.LVL161:
 838:src/MightyBoard/Motherboard/Planner.cc **** 			   if((previous_speed[X_AXIS] != 0.0) || (previous_speed[Y_AXIS] != 0.0)) {
 1895              	 .loc 1 838 0 discriminator 4
 1896 0394 2068     	 ldr r0,[r4,#0]
 1897              	.LVL162:
 1898 0396 4FF00001 	 mov r1,#0
 1899 039a FFF7FEFF 	 bl __aeabi_fcmpeq
 1900 039e 30B1     	 cbz r0,.L105
 1901              	 .loc 1 838 0 is_stmt 0 discriminator 1
 1902 03a0 6068     	 ldr r0,[r4,#4]
 1903 03a2 4FF00001 	 mov r1,#0
 1904 03a6 FFF7FEFF 	 bl __aeabi_fcmpeq
 1905 03aa 10B1     	 cbz r0,.L106
 1906 03ac 02E0     	 b .L87
 1907              	.L105:
 839:src/MightyBoard/Motherboard/Planner.cc **** 					   vmax_junction = local_nominal_speed;
 1908              	 .loc 1 839 0 is_stmt 1
 1909 03ae 049D     	 ldr r5,[sp,#16]
 1910              	.LVL163:
 1911 03b0 00E0     	 b .L87
 1912              	.LVL164:
 1913              	.L106:
 1914 03b2 049D     	 ldr r5,[sp,#16]
 1915              	.LVL165:
 1916              	.L87:
 840:src/MightyBoard/Motherboard/Planner.cc **** 			   }
 841:src/MightyBoard/Motherboard/Planner.cc **** 
 842:src/MightyBoard/Motherboard/Planner.cc **** 			   if (jerk > max_xy_jerk) {
 1917              	 .loc 1 842 0
 1918 03b4 40F20003 	 movw r3,#:lower16:.LANCHOR2
 1919 03b8 C0F20003 	 movt r3,#:upper16:.LANCHOR2
 1920 03bc 1C68     	 ldr r4,[r3,#0]
 1921 03be 3046     	 mov r0,r6
 1922 03c0 2146     	 mov r1,r4
 1923 03c2 FFF7FEFF 	 bl __aeabi_fcmpgt
 1924 03c6 40B1     	 cbz r0,.L88
 843:src/MightyBoard/Motherboard/Planner.cc **** 					   vmax_junction *= (max_xy_jerk/jerk);
 1925              	 .loc 1 843 0
 1926 03c8 2046     	 mov r0,r4
 1927 03ca 3146     	 mov r1,r6
 1928 03cc FFF7FEFF 	 bl __aeabi_fdiv
 1929 03d0 0146     	 mov r1,r0
 1930 03d2 2846     	 mov r0,r5
 1931 03d4 FFF7FEFF 	 bl __aeabi_fmul
 1932 03d8 0546     	 mov r5,r0
 1933              	.LVL166:
 1934              	.L88:
 1935              	.LBB339:
 844:src/MightyBoard/Motherboard/Planner.cc **** 				   }
 845:src/MightyBoard/Motherboard/Planner.cc **** 			   
 846:src/MightyBoard/Motherboard/Planner.cc **** 			   for (int i_axis = Z_AXIS; i_axis < STEPPER_COUNT; i_axis++) {
 847:src/MightyBoard/Motherboard/Planner.cc **** 					   jerk = abs(previous_speed[i_axis] - current_speed[i_axis]);
 1936              	 .loc 1 847 0 discriminator 1
 1937 03da 40F20003 	 movw r3,#:lower16:.LANCHOR8
 1938 03de C0F20003 	 movt r3,#:upper16:.LANCHOR8
 1939 03e2 9868     	 ldr r0,[r3,#8]
 1940 03e4 0C99     	 ldr r1,[sp,#48]
 1941 03e6 FFF7FEFF 	 bl __aeabi_fsub
 1942 03ea 0446     	 mov r4,r0
 1943              	.LVL167:
 1944              	.LBB340:
 1945              	.LBB341:
 121:src/MightyBoard/Motherboard/Planner.cc **** inline T abs(T x) { return (x)>0?(x):-(x); }
 1946              	 .loc 1 121 0 discriminator 1
 1947 03ec 4FF00001 	 mov r1,#0
 1948 03f0 FFF7FEFF 	 bl __aeabi_fcmpgt
 1949              	.LVL168:
 1950 03f4 08B9     	 cbnz r0,.L90
 121:src/MightyBoard/Motherboard/Planner.cc **** inline T abs(T x) { return (x)>0?(x):-(x); }
 1951              	 .loc 1 121 0 is_stmt 0
 1952 03f6 04F10044 	 add r4,r4,#-2147483648
 1953              	.LVL169:
 1954              	.L90:
 1955              	.LBE341:
 1956              	.LBE340:
 848:src/MightyBoard/Motherboard/Planner.cc **** 					   if (jerk > axes[i_axis].max_axis_jerk) {
 1957              	 .loc 1 848 0 is_stmt 1
 1958 03fa 40F20003 	 movw r3,#:lower16:.LANCHOR1
 1959 03fe C0F20003 	 movt r3,#:upper16:.LANCHOR1
 1960 0402 9E6B     	 ldr r6,[r3,#56]
 1961 0404 3046     	 mov r0,r6
 1962 0406 2146     	 mov r1,r4
 1963 0408 FFF7FEFF 	 bl __aeabi_fcmplt
 1964 040c 40B1     	 cbz r0,.L91
 849:src/MightyBoard/Motherboard/Planner.cc **** 							   vmax_junction *= (axes[i_axis].max_axis_jerk/jerk);                               }
 1965              	 .loc 1 849 0
 1966 040e 3046     	 mov r0,r6
 1967 0410 2146     	 mov r1,r4
 1968 0412 FFF7FEFF 	 bl __aeabi_fdiv
 1969 0416 0146     	 mov r1,r0
 1970 0418 2846     	 mov r0,r5
 1971 041a FFF7FEFF 	 bl __aeabi_fmul
 1972 041e 0546     	 mov r5,r0
 1973              	.LVL170:
 1974              	.L91:
 847:src/MightyBoard/Motherboard/Planner.cc **** 					   jerk = abs(previous_speed[i_axis] - current_speed[i_axis]);
 1975              	 .loc 1 847 0
 1976 0420 40F20003 	 movw r3,#:lower16:.LANCHOR8
 1977 0424 C0F20003 	 movt r3,#:upper16:.LANCHOR8
 1978 0428 D868     	 ldr r0,[r3,#12]
 1979 042a 0D99     	 ldr r1,[sp,#52]
 1980 042c FFF7FEFF 	 bl __aeabi_fsub
 1981 0430 0446     	 mov r4,r0
 1982              	.LVL171:
 1983              	.LBB343:
 1984              	.LBB342:
 121:src/MightyBoard/Motherboard/Planner.cc **** inline T abs(T x) { return (x)>0?(x):-(x); }
 1985              	 .loc 1 121 0
 1986 0432 4FF00001 	 mov r1,#0
 1987 0436 FFF7FEFF 	 bl __aeabi_fcmpgt
 1988              	.LVL172:
 1989 043a 08B9     	 cbnz r0,.L93
 1990 043c 04F10044 	 add r4,r4,#-2147483648
 1991              	.LVL173:
 1992              	.L93:
 1993              	.LBE342:
 1994              	.LBE343:
 848:src/MightyBoard/Motherboard/Planner.cc **** 					   if (jerk > axes[i_axis].max_axis_jerk) {
 1995              	 .loc 1 848 0
 1996 0440 40F20003 	 movw r3,#:lower16:.LANCHOR1
 1997 0444 C0F20003 	 movt r3,#:upper16:.LANCHOR1
 1998 0448 DE6C     	 ldr r6,[r3,#76]
 1999 044a 3046     	 mov r0,r6
 2000 044c 2146     	 mov r1,r4
 2001 044e FFF7FEFF 	 bl __aeabi_fcmplt
 2002 0452 40B1     	 cbz r0,.L85
 2003              	 .loc 1 849 0
 2004 0454 3046     	 mov r0,r6
 2005 0456 2146     	 mov r1,r4
 2006 0458 FFF7FEFF 	 bl __aeabi_fdiv
 2007 045c 0146     	 mov r1,r0
 2008 045e 2846     	 mov r0,r5
 2009 0460 FFF7FEFF 	 bl __aeabi_fmul
 2010 0464 0546     	 mov r5,r0
 2011              	.LVL174:
 2012              	.L85:
 2013              	.LBE339:
 2014              	.LBE338:
 2015              	.LBE335:
 850:src/MightyBoard/Motherboard/Planner.cc **** 			   }
 851:src/MightyBoard/Motherboard/Planner.cc ****          } 
 852:src/MightyBoard/Motherboard/Planner.cc **** 
 853:src/MightyBoard/Motherboard/Planner.cc **** 		
 854:src/MightyBoard/Motherboard/Planner.cc **** 		/// set the max_entry_speed to the junction speed
 855:src/MightyBoard/Motherboard/Planner.cc **** 		block->max_entry_speed = vmax_junction;
 2016              	 .loc 1 855 0
 2017 0466 C9F82850 	 str r5,[r9,#40]
 2018              	.LVL175:
 2019              	.LBB344:
 2020              	.LBB345:
 376:src/MightyBoard/Motherboard/Planner.cc **** 		return sqrt((target_velocity*target_velocity)-(acceleration*2.0)*distance);
 2021              	 .loc 1 376 0
 2022 046a 40F20003 	 movw r3,#:lower16:.LANCHOR6
 2023 046e C0F20003 	 movt r3,#:upper16:.LANCHOR6
 2024 0472 1968     	 ldr r1,[r3,#0]
 2025 0474 0846     	 mov r0,r1
 2026 0476 FFF7FEFF 	 bl __aeabi_fmul
 2027 047a FFF7FEFF 	 bl __aeabi_f2d
 2028 047e CDE90001 	 strd r0,[sp]
 2029              	.LBE345:
 2030              	.LBE344:
 856:src/MightyBoard/Motherboard/Planner.cc **** 		
 857:src/MightyBoard/Motherboard/Planner.cc **** 		// Initialize block entry speed. Compute based on deceleration to stop_speed.
 858:src/MightyBoard/Motherboard/Planner.cc **** 		/// the entry speed may change in the look ahead planner
 859:src/MightyBoard/Motherboard/Planner.cc **** 		float v_allowable = max_allowable_speed(-block->acceleration, minimum_planner_speed, local_millim
 2031              	 .loc 1 859 0
 2032 0482 D9F83000 	 ldr r0,[r9,#48]
 2033 0486 00F10040 	 add r0,r0,#-2147483648
 2034              	.LBB347:
 2035              	.LBB346:
 376:src/MightyBoard/Motherboard/Planner.cc **** 		return sqrt((target_velocity*target_velocity)-(acceleration*2.0)*distance);
 2036              	 .loc 1 376 0
 2037 048a FFF7FEFF 	 bl __aeabi_f2d
 2038 048e 0246     	 mov r2,r0
 2039 0490 0B46     	 mov r3,r1
 2040 0492 FFF7FEFF 	 bl __aeabi_dadd
 2041 0496 0646     	 mov r6,r0
 2042 0498 0F46     	 mov r7,r1
 2043 049a 0398     	 ldr r0,[sp,#12]
 2044 049c FFF7FEFF 	 bl __aeabi_f2d
 2045 04a0 0246     	 mov r2,r0
 2046 04a2 0B46     	 mov r3,r1
 2047 04a4 3046     	 mov r0,r6
 2048 04a6 3946     	 mov r1,r7
 2049 04a8 FFF7FEFF 	 bl __aeabi_dmul
 2050 04ac 0246     	 mov r2,r0
 2051 04ae 0B46     	 mov r3,r1
 2052 04b0 DDE90001 	 ldrd r0,[sp]
 2053 04b4 FFF7FEFF 	 bl __aeabi_dsub
 2054 04b8 FFF7FEFF 	 bl sqrt
 2055 04bc FFF7FEFF 	 bl __aeabi_d2f
 2056 04c0 0446     	 mov r4,r0
 2057              	.LVL176:
 2058              	.LBE346:
 2059              	.LBE347:
 2060              	.LBB348:
 2061              	.LBB349:
 106:src/MightyBoard/Motherboard/Planner.cc **** inline const T& min(const T& a, const T& b) { return (a)<(b)?(a):(b); }
 2062              	 .loc 1 106 0
 2063 04c2 2846     	 mov r0,r5
 2064              	.LVL177:
 2065 04c4 2146     	 mov r1,r4
 2066 04c6 FFF7FEFF 	 bl __aeabi_fcmplt
 2067 04ca 00B9     	 cbnz r0,.L96
 2068 04cc 2546     	 mov r5,r4
 2069              	.LVL178:
 2070              	.L96:
 2071              	.LBE349:
 2072              	.LBE348:
 860:src/MightyBoard/Motherboard/Planner.cc **** 		block->entry_speed = min(vmax_junction, v_allowable);
 2073              	 .loc 1 860 0
 2074 04ce C9F82450 	 str r5,[r9,#36]
 861:src/MightyBoard/Motherboard/Planner.cc **** 	
 862:src/MightyBoard/Motherboard/Planner.cc **** 
 863:src/MightyBoard/Motherboard/Planner.cc **** 		// Initialize planner efficiency flags
 864:src/MightyBoard/Motherboard/Planner.cc **** 		// Set flag if block will always reach maximum junction speed regardless of entry/exit speeds.
 865:src/MightyBoard/Motherboard/Planner.cc **** 		// If a block can de/ac-celerate from nominal speed to zero within the length of the block, then
 866:src/MightyBoard/Motherboard/Planner.cc **** 		// the current block and next block junction speeds are guaranteed to always be at their maximum
 867:src/MightyBoard/Motherboard/Planner.cc **** 		// junction speeds in deceleration and acceleration, respectively. This is due to how the current
 868:src/MightyBoard/Motherboard/Planner.cc **** 		// block nominal speed limits both the current and next maximum junction speeds. Hence, in both
 869:src/MightyBoard/Motherboard/Planner.cc **** 		// the reverse and forward planners, the corresponding block junction speed will always be at the
 870:src/MightyBoard/Motherboard/Planner.cc **** 		// the maximum junction speed and may always be ignored for any speed reduction checks.
 871:src/MightyBoard/Motherboard/Planner.cc **** 		if (local_nominal_speed <= v_allowable)
 2075              	 .loc 1 871 0
 2076 04d2 0498     	 ldr r0,[sp,#16]
 2077 04d4 2146     	 mov r1,r4
 2078 04d6 FFF7FEFF 	 bl __aeabi_fcmple
 2079 04da 30B1     	 cbz r0,.L116
 872:src/MightyBoard/Motherboard/Planner.cc **** 			block->flags |= Block::NominalLength;
 2080              	 .loc 1 872 0
 2081 04dc 99F84830 	 ldrb r3,[r9,#72]
 2082 04e0 43F00403 	 orr r3,r3,#4
 2083 04e4 89F84830 	 strb r3,[r9,#72]
 2084 04e8 05E0     	 b .L100
 2085              	.L116:
 873:src/MightyBoard/Motherboard/Planner.cc **** 		else
 874:src/MightyBoard/Motherboard/Planner.cc **** 			block->flags &= ~Block::NominalLength;
 2086              	 .loc 1 874 0
 2087 04ea 99F84830 	 ldrb r3,[r9,#72]
 2088 04ee 23F00403 	 bic r3,r3,#4
 2089 04f2 89F84830 	 strb r3,[r9,#72]
 2090              	.L100:
 875:src/MightyBoard/Motherboard/Planner.cc **** 		block->flags |= Block::Recalculate; // Always calculate trapezoid for new block
 2091              	 .loc 1 875 0
 2092 04f6 99F84830 	 ldrb r3,[r9,#72]
 2093 04fa 43F00203 	 orr r3,r3,#2
 2094 04fe 89F84830 	 strb r3,[r9,#72]
 876:src/MightyBoard/Motherboard/Planner.cc **** 
 877:src/MightyBoard/Motherboard/Planner.cc **** 		// Update previous path speed and nominal speed
 878:src/MightyBoard/Motherboard/Planner.cc **** 		memcpy(previous_speed, current_speed, sizeof(previous_speed)); // previous_speed[] = current_spee
 2095              	 .loc 1 878 0
 2096 0502 40F20004 	 movw r4,#:lower16:.LANCHOR8
 2097              	.LVL179:
 2098 0506 C0F20004 	 movt r4,#:upper16:.LANCHOR8
 2099 050a 0EAD     	 add r5,sp,#56
 2100 050c 15E90F00 	 ldmdb r5,{r0,r1,r2,r3}
 2101 0510 84E80F00 	 stmia r4,{r0,r1,r2,r3}
 879:src/MightyBoard/Motherboard/Planner.cc **** 		previous_nominal_speed = local_nominal_speed;
 2102              	 .loc 1 879 0
 2103 0514 40F20003 	 movw r3,#:lower16:.LANCHOR7
 2104 0518 C0F20003 	 movt r3,#:upper16:.LANCHOR7
 2105 051c 049D     	 ldr r5,[sp,#16]
 2106 051e 1D60     	 str r5,[r3,#0]
 880:src/MightyBoard/Motherboard/Planner.cc **** 
 881:src/MightyBoard/Motherboard/Planner.cc **** 		// move locals to the block
 882:src/MightyBoard/Motherboard/Planner.cc **** 		block->millimeters = local_millimeters;
 2107              	 .loc 1 882 0
 2108 0520 039D     	 ldr r5,[sp,#12]
 2109 0522 C9F82C50 	 str r5,[r9,#44]
 883:src/MightyBoard/Motherboard/Planner.cc **** 		block->step_event_count = local_step_event_count;
 2110              	 .loc 1 883 0
 2111 0526 029D     	 ldr r5,[sp,#8]
 2112 0528 A9F81450 	 strh r5,[r9,#20]
 884:src/MightyBoard/Motherboard/Planner.cc **** 		block->nominal_speed = local_nominal_speed;
 2113              	 .loc 1 884 0
 2114 052c 049D     	 ldr r5,[sp,#16]
 2115 052e C9F82050 	 str r5,[r9,#32]
 885:src/MightyBoard/Motherboard/Planner.cc **** 		block->acceleration_st = local_acceleration_st;
 2116              	 .loc 1 885 0
 2117 0532 C9F844A0 	 str sl,[r9,#68]
 886:src/MightyBoard/Motherboard/Planner.cc **** 		block->stop_speed = minimum_planner_speed;
 2118              	 .loc 1 886 0
 2119 0536 40F20003 	 movw r3,#:lower16:.LANCHOR6
 2120 053a C0F20003 	 movt r3,#:upper16:.LANCHOR6
 2121 053e 1B68     	 ldr r3,[r3,#0]
 2122 0540 C9F83430 	 str r3,[r9,#52]
 2123              	.LVL180:
 2124              	.LBB350:
 2125              	.LBB351:
 194:src/MightyBoard/Motherboard/Planner.cc **** 			head = getNextIndex(head);
 2126              	 .loc 1 194 0
 2127 0544 40F20003 	 movw r3,#:lower16:.LANCHOR4
 2128 0548 C0F20003 	 movt r3,#:upper16:.LANCHOR4
 2129 054c 1A78     	 ldrb r2,[r3,#0]
 2130              	.LVL181:
 2131              	.LBB352:
 2132              	.LBB353:
 174:src/MightyBoard/Motherboard/Planner.cc **** 			return ((from + 1) & size_mask);
 2133              	 .loc 1 174 0
 2134 054e 02F10102 	 add r2,r2,#1
 2135              	.LVL182:
 2136 0552 D978     	 ldrb r1,[r3,#3]
 2137 0554 0A40     	 ands r2,r2,r1
 2138              	.LVL183:
 2139              	.LBE353:
 2140              	.LBE352:
 194:src/MightyBoard/Motherboard/Planner.cc **** 			head = getNextIndex(head);
 2141              	 .loc 1 194 0
 2142 0556 1A70     	 strb r2,[r3,#0]
 2143              	.LBE351:
 2144              	.LBE350:
 887:src/MightyBoard/Motherboard/Planner.cc **** 
 888:src/MightyBoard/Motherboard/Planner.cc **** 		// Move buffer head
 889:src/MightyBoard/Motherboard/Planner.cc **** 		block_buffer.bumpHead();
 890:src/MightyBoard/Motherboard/Planner.cc **** 
 891:src/MightyBoard/Motherboard/Planner.cc **** 		planner_recalculate();
 2145              	 .loc 1 891 0
 2146 0558 FFF7FEFF 	 bl _ZN7planner19planner_recalculateEv
 892:src/MightyBoard/Motherboard/Planner.cc **** 
 893:src/MightyBoard/Motherboard/Planner.cc **** 		steppers::startRunning();
 2147              	 .loc 1 893 0
 2148 055c FFF7FEFF 	 bl _ZN8steppers12startRunningEv
 894:src/MightyBoard/Motherboard/Planner.cc **** 
 895:src/MightyBoard/Motherboard/Planner.cc **** 		return true;
 2149              	 .loc 1 895 0
 2150 0560 4FF00100 	 mov r0,#1
 2151              	.LVL184:
 2152              	.L77:
 2153              	.LBE310:
 896:src/MightyBoard/Motherboard/Planner.cc **** 	}
 2154              	 .loc 1 896 0
 2155 0564 0FB0     	 add sp,sp,#60
 2156 0566 BDE8F08F 	 pop {r4,r5,r6,r7,r8,r9,sl,fp,pc}
 2157              	.LVL185:
 2158              	.L74:
 2159              	.LBB355:
 743:src/MightyBoard/Motherboard/Planner.cc **** 		abs_steps = abs(steps[A_AXIS]);
 2160              	 .loc 1 743 0
 2161 056a 2046     	 mov r0,r4
 2162 056c 4FF00301 	 mov r1,#3
 2163 0570 FFF7FEFF 	 bl _ZNK5PointixEj
 2164              	.LVL186:
 2165              	.LBB354:
 2166              	.LBB321:
 127:src/MightyBoard/Motherboard/Planner.cc **** inline long abs(long x) { return __builtin_labs(x); }
 2167              	 .loc 1 127 0
 2168 0574 0368     	 ldr r3,[r0,#0]
 2169 0576 83EAE371 	 eor r1,r3,r3,asr#31
 2170 057a A1EBE371 	 sub r1,r1,r3,asr#31
 2171              	.LBE321:
 2172              	.LBE354:
 744:src/MightyBoard/Motherboard/Planner.cc **** 		local_step_event_count = max((int32_t)local_step_event_count, abs_steps);
 2173              	 .loc 1 744 0
 2174 057e 21EAE171 	 bic r1,r1,r1,asr#31
 2175 0582 0291     	 str r1,[sp,#8]
 2176              	.LVL187:
 745:src/MightyBoard/Motherboard/Planner.cc **** 		delta_mm[A_AXIS] = ((float)steps[A_AXIS])/axes[A_AXIS].steps_per_mm;
 2177              	 .loc 1 745 0
 2178 0584 2046     	 mov r0,r4
 2179              	.LVL188:
 2180 0586 4FF00301 	 mov r1,#3
 2181              	.LVL189:
 2182 058a FFF7FEFF 	 bl _ZNK5PointixEj
 2183              	.LVL190:
 2184 058e 0068     	 ldr r0,[r0,#0]
 2185 0590 FFF7FEFF 	 bl __aeabi_i2f
 2186 0594 40F20003 	 movw r3,#:lower16:.LANCHOR1
 2187 0598 C0F20003 	 movt r3,#:upper16:.LANCHOR1
 2188 059c D96B     	 ldr r1,[r3,#60]
 2189 059e FFF7FEFF 	 bl __aeabi_fdiv
 2190 05a2 0390     	 str r0,[sp,#12]
 2191 05a4 0990     	 str r0,[sp,#36]
 2192 05a6 DAE5     	 b .L101
 2193              	.LBE355:
 2194              	 .cfi_endproc
 2195              	.LFE153:
 2197              	 .section .text._ZN7planner15addMoveToBufferERK5PointRKl,"ax",%progbits
 2198              	 .align 2
 2199              	 .global _ZN7planner15addMoveToBufferERK5PointRKl
 2200              	 .thumb
 2201              	 .thumb_func
 2203              	_ZN7planner15addMoveToBufferERK5PointRKl:
 2204              	.LFB152:
 690:src/MightyBoard/Motherboard/Planner.cc **** 	{
 2205              	 .loc 1 690 0
 2206              	 .cfi_startproc
 2207              	 
 2208              	 
 2209              	.LVL191:
 2210 0000 70B5     	 push {r4,r5,r6,lr}
 2211              	.LCFI11:
 2212              	 .cfi_def_cfa_offset 16
 2213              	 .cfi_offset 14,-4
 2214              	 .cfi_offset 6,-8
 2215              	 .cfi_offset 5,-12
 2216              	 .cfi_offset 4,-16
 2217 0002 90B0     	 sub sp,sp,#64
 2218              	.LCFI12:
 2219              	 .cfi_def_cfa_offset 80
 2220 0004 0446     	 mov r4,r0
 2221 0006 0D46     	 mov r5,r1
 2222              	.LBB356:
 692:src/MightyBoard/Motherboard/Planner.cc **** 		Point offset_target;
 2223              	 .loc 1 692 0
 2224 0008 06A8     	 add r0,sp,#24
 2225              	.LVL192:
 2226 000a FFF7FEFF 	 bl _ZN5PointC1Ev
 2227              	.LVL193:
 693:src/MightyBoard/Motherboard/Planner.cc **** 		offset_target = target + *tool_offsets;
 2228              	 .loc 1 693 0
 2229 000e 40F20003 	 movw r3,#:lower16:.LANCHOR9
 2230 0012 C0F20003 	 movt r3,#:upper16:.LANCHOR9
 2231 0016 6846     	 mov r0,sp
 2232 0018 2146     	 mov r1,r4
 2233 001a 1A68     	 ldr r2,[r3,#0]
 2234 001c FFF7FEFF 	 bl _ZplRK5PointS1_
 2235 0020 06AE     	 add r6,sp,#24
 2236 0022 0098     	 ldr r0,[sp,#0]
 2237 0024 0199     	 ldr r1,[sp,#4]
 2238 0026 029A     	 ldr r2,[sp,#8]
 2239 0028 039B     	 ldr r3,[sp,#12]
 2240 002a 0FC6     	 stmia r6!,{r0,r1,r2,r3}
 2241 002c 0498     	 ldr r0,[sp,#16]
 2242 002e 3060     	 str r0,[r6,#0]
 697:src/MightyBoard/Motherboard/Planner.cc **** 		if(offset_target[Z_AXIS] > axes[Z_AXIS].max_length){
 2243              	 .loc 1 697 0
 2244 0030 06A8     	 add r0,sp,#24
 2245 0032 4FF00201 	 mov r1,#2
 2246 0036 FFF7FEFF 	 bl _ZN5PointixEj
 2247 003a 40F20003 	 movw r3,#:lower16:.LANCHOR1
 2248 003e C0F20003 	 movt r3,#:upper16:.LANCHOR1
 2249 0042 0268     	 ldr r2,[r0,#0]
 2250 0044 DB6A     	 ldr r3,[r3,#44]
 2251 0046 9A42     	 cmp r2,r3
 2252 0048 0ADD     	 ble .L118
 698:src/MightyBoard/Motherboard/Planner.cc **** 			offset_target[Z_AXIS] = axes[Z_AXIS].max_length;
 2253              	 .loc 1 698 0
 2254 004a 06A8     	 add r0,sp,#24
 2255 004c 4FF00201 	 mov r1,#2
 2256 0050 FFF7FEFF 	 bl _ZN5PointixEj
 2257 0054 40F20003 	 movw r3,#:lower16:.LANCHOR1
 2258 0058 C0F20003 	 movt r3,#:upper16:.LANCHOR1
 2259 005c DB6A     	 ldr r3,[r3,#44]
 2260 005e 0360     	 str r3,[r0,#0]
 2261              	.L118:
 702:src/MightyBoard/Motherboard/Planner.cc **** 		planNextMove(offset_target, us_per_step, offset_target - position);
 2262              	 .loc 1 702 0
 2263 0060 2E68     	 ldr r6,[r5,#0]
 2264 0062 40F20005 	 movw r5,#:lower16:.LANCHOR10
 2265              	.LVL194:
 2266 0066 C0F20005 	 movt r5,#:upper16:.LANCHOR10
 2267 006a 0BA8     	 add r0,sp,#44
 2268 006c 06A9     	 add r1,sp,#24
 2269 006e 2A46     	 mov r2,r5
 2270 0070 FFF7FEFF 	 bl _ZmiRK5PointS1_
 2271 0074 06A8     	 add r0,sp,#24
 2272 0076 3146     	 mov r1,r6
 2273 0078 0BAA     	 add r2,sp,#44
 2274 007a FFF7FEFF 	 bl _ZN7planner12planNextMoveER5PointlRKS0_
 703:src/MightyBoard/Motherboard/Planner.cc **** 		position = target;
 2275              	 .loc 1 703 0
 2276 007e 2068     	 ldr r0,[r4,#0]
 2277 0080 6168     	 ldr r1,[r4,#4]
 2278 0082 A268     	 ldr r2,[r4,#8]
 2279 0084 E368     	 ldr r3,[r4,#12]
 2280 0086 0FC5     	 stmia r5!,{r0,r1,r2,r3}
 2281 0088 2069     	 ldr r0,[r4,#16]
 2282 008a 2860     	 str r0,[r5,#0]
 2283              	.LBE356:
 705:src/MightyBoard/Motherboard/Planner.cc **** 	}
 2284              	 .loc 1 705 0
 2285 008c 10B0     	 add sp,sp,#64
 2286 008e 70BD     	 pop {r4,r5,r6,pc}
 2287              	 .cfi_endproc
 2288              	.LFE152:
 2290              	 .section .text._ZN7planner23addMoveToBufferRelativeERK5PointRKla,"ax",%progbits
 2291              	 .align 2
 2292              	 .global _ZN7planner23addMoveToBufferRelativeERK5PointRKla
 2293              	 .thumb
 2294              	 .thumb_func
 2296              	_ZN7planner23addMoveToBufferRelativeERK5PointRKla:
 2297              	.LFB151:
 656:src/MightyBoard/Motherboard/Planner.cc **** 	{
 2298              	 .loc 1 656 0
 2299              	 .cfi_startproc
 2300              	 
 2301              	 
 2302              	.LVL195:
 2303 0000 2DE9F04F 	 push {r4,r5,r6,r7,r8,r9,sl,fp,lr}
 2304              	.LCFI13:
 2305              	 .cfi_def_cfa_offset 36
 2306              	 .cfi_offset 14,-4
 2307              	 .cfi_offset 11,-8
 2308              	 .cfi_offset 10,-12
 2309              	 .cfi_offset 9,-16
 2310              	 .cfi_offset 8,-20
 2311              	 .cfi_offset 7,-24
 2312              	 .cfi_offset 6,-28
 2313              	 .cfi_offset 5,-32
 2314              	 .cfi_offset 4,-36
 2315 0004 93B0     	 sub sp,sp,#76
 2316              	.LCFI14:
 2317              	 .cfi_def_cfa_offset 112
 2318 0006 0746     	 mov r7,r0
 2319 0008 0191     	 str r1,[sp,#4]
 2320 000a 9146     	 mov r9,r2
 2321              	.LBB357:
 658:src/MightyBoard/Motherboard/Planner.cc **** 		Point target;
 2322              	 .loc 1 658 0
 2323 000c 08A8     	 add r0,sp,#32
 2324              	.LVL196:
 2325 000e FFF7FEFF 	 bl _ZN5PointC1Ev
 2326              	.LVL197:
 660:src/MightyBoard/Motherboard/Planner.cc **** 		target = move + *tool_offsets;
 2327              	 .loc 1 660 0
 2328 0012 40F20003 	 movw r3,#:lower16:.LANCHOR9
 2329 0016 C0F20003 	 movt r3,#:upper16:.LANCHOR9
 2330 001a 02A8     	 add r0,sp,#8
 2331 001c 3946     	 mov r1,r7
 2332 001e 1A68     	 ldr r2,[r3,#0]
 2333 0020 FFF7FEFF 	 bl _ZplRK5PointS1_
 2334 0024 08AC     	 add r4,sp,#32
 2335 0026 0298     	 ldr r0,[sp,#8]
 2336 0028 0399     	 ldr r1,[sp,#12]
 2337 002a 049A     	 ldr r2,[sp,#16]
 2338 002c 059B     	 ldr r3,[sp,#20]
 2339 002e 0FC4     	 stmia r4!,{r0,r1,r2,r3}
 2340 0030 0698     	 ldr r0,[sp,#24]
 2341 0032 2060     	 str r0,[r4,#0]
 2342              	.LVL198:
 663:src/MightyBoard/Motherboard/Planner.cc **** 		for (int i = 0; i < STEPPER_COUNT; i++) {
 2343              	 .loc 1 663 0
 2344 0034 4FF00004 	 mov r4,#0
 662:src/MightyBoard/Motherboard/Planner.cc **** 		int32_t max_delta = 0;
 2345              	 .loc 1 662 0
 2346 0038 2646     	 mov r6,r4
 2347              	.LBB358:
 2348              	.LBB359:
 669:src/MightyBoard/Motherboard/Planner.cc **** 				target[i] = move[i] + (*tool_offsets)[i];
 2349              	 .loc 1 669 0
 2350 003a 40F2000A 	 movw sl,#:lower16:.LANCHOR9
 2351 003e C0F2000A 	 movt sl,#:upper16:.LANCHOR9
 670:src/MightyBoard/Motherboard/Planner.cc **** 				delta = abs(target[i] - position[i]);
 2352              	 .loc 1 670 0
 2353 0042 40F20008 	 movw r8,#:lower16:.LANCHOR10
 2354 0046 C0F20008 	 movt r8,#:upper16:.LANCHOR10
 2355              	.LVL199:
 2356              	.L122:
 665:src/MightyBoard/Motherboard/Planner.cc **** 			if ((relative & (1 << i))) {
 2357              	 .loc 1 665 0
 2358 004a 49FA04F3 	 asr r3,r9,r4
 2359 004e 13F0010F 	 tst r3,#1
 2360 0052 1AD0     	 beq .L120
 666:src/MightyBoard/Motherboard/Planner.cc **** 				target[i] = position[i] + move[i];
 2361              	 .loc 1 666 0
 2362 0054 08A8     	 add r0,sp,#32
 2363 0056 2146     	 mov r1,r4
 2364 0058 FFF7FEFF 	 bl _ZN5PointixEj
 2365 005c 8346     	 mov fp,r0
 2366 005e 4046     	 mov r0,r8
 2367 0060 2146     	 mov r1,r4
 2368 0062 FFF7FEFF 	 bl _ZN5PointixEj
 2369 0066 0568     	 ldr r5,[r0,#0]
 2370 0068 3846     	 mov r0,r7
 2371 006a 2146     	 mov r1,r4
 2372 006c FFF7FEFF 	 bl _ZNK5PointixEj
 2373 0070 0368     	 ldr r3,[r0,#0]
 2374 0072 ED18     	 adds r5,r5,r3
 2375 0074 CBF80050 	 str r5,[fp,#0]
 667:src/MightyBoard/Motherboard/Planner.cc **** 				delta = abs(move[i]);
 2376              	 .loc 1 667 0
 2377 0078 3846     	 mov r0,r7
 2378 007a 2146     	 mov r1,r4
 2379 007c FFF7FEFF 	 bl _ZNK5PointixEj
 2380              	.LVL200:
 2381              	.LBB360:
 2382              	.LBB361:
 127:src/MightyBoard/Motherboard/Planner.cc **** inline long abs(long x) { return __builtin_labs(x); }
 2383              	 .loc 1 127 0
 2384 0080 0568     	 ldr r5,[r0,#0]
 2385 0082 002D     	 cmp r5,#0
 2386 0084 B8BF     	 it lt
 2387 0086 6D42     	 rsblt r5,r5,#0
 2388              	.LVL201:
 2389 0088 20E0     	 b .L121
 2390              	.LVL202:
 2391              	.L120:
 2392              	.LBE361:
 2393              	.LBE360:
 669:src/MightyBoard/Motherboard/Planner.cc **** 				target[i] = move[i] + (*tool_offsets)[i];
 2394              	 .loc 1 669 0
 2395 008a 08A8     	 add r0,sp,#32
 2396 008c 2146     	 mov r1,r4
 2397 008e FFF7FEFF 	 bl _ZN5PointixEj
 2398 0092 8346     	 mov fp,r0
 2399 0094 3846     	 mov r0,r7
 2400 0096 2146     	 mov r1,r4
 2401 0098 FFF7FEFF 	 bl _ZNK5PointixEj
 2402 009c 0568     	 ldr r5,[r0,#0]
 2403 009e DAF80000 	 ldr r0,[sl,#0]
 2404 00a2 2146     	 mov r1,r4
 2405 00a4 FFF7FEFF 	 bl _ZN5PointixEj
 2406 00a8 0368     	 ldr r3,[r0,#0]
 2407 00aa ED18     	 adds r5,r5,r3
 2408 00ac CBF80050 	 str r5,[fp,#0]
 670:src/MightyBoard/Motherboard/Planner.cc **** 				delta = abs(target[i] - position[i]);
 2409              	 .loc 1 670 0
 2410 00b0 08A8     	 add r0,sp,#32
 2411 00b2 2146     	 mov r1,r4
 2412 00b4 FFF7FEFF 	 bl _ZN5PointixEj
 2413 00b8 0568     	 ldr r5,[r0,#0]
 2414 00ba 4046     	 mov r0,r8
 2415 00bc 2146     	 mov r1,r4
 2416 00be FFF7FEFF 	 bl _ZN5PointixEj
 2417              	.LVL203:
 2418 00c2 0368     	 ldr r3,[r0,#0]
 2419 00c4 ED1A     	 subs r5,r5,r3
 2420              	.LVL204:
 2421              	.LBB362:
 2422              	.LBB363:
 127:src/MightyBoard/Motherboard/Planner.cc **** inline long abs(long x) { return __builtin_labs(x); }
 2423              	 .loc 1 127 0
 2424 00c6 002D     	 cmp r5,#0
 2425 00c8 B8BF     	 it lt
 2426 00ca 6D42     	 rsblt r5,r5,#0
 2427              	.LVL205:
 2428              	.L121:
 2429 00cc AE42     	 cmp r6,r5
 2430 00ce B8BF     	 it lt
 2431 00d0 2E46     	 movlt r6,r5
 2432              	.LVL206:
 2433              	.LBE363:
 2434              	.LBE362:
 2435              	.LBE359:
 663:src/MightyBoard/Motherboard/Planner.cc **** 		for (int i = 0; i < STEPPER_COUNT; i++) {
 2436              	 .loc 1 663 0
 2437 00d2 04F10104 	 add r4,r4,#1
 2438              	.LVL207:
 2439 00d6 042C     	 cmp r4,#4
 2440 00d8 B7D1     	 bne .L122
 2441              	.LBE358:
 680:src/MightyBoard/Motherboard/Planner.cc **** 		if(target[Z_AXIS] > axes[Z_AXIS].max_length){
 2442              	 .loc 1 680 0
 2443 00da 08A8     	 add r0,sp,#32
 2444 00dc 4FF00201 	 mov r1,#2
 2445 00e0 FFF7FEFF 	 bl _ZN5PointixEj
 2446 00e4 40F20003 	 movw r3,#:lower16:.LANCHOR1
 2447 00e8 C0F20003 	 movt r3,#:upper16:.LANCHOR1
 2448 00ec 0268     	 ldr r2,[r0,#0]
 2449 00ee DB6A     	 ldr r3,[r3,#44]
 2450 00f0 9A42     	 cmp r2,r3
 2451 00f2 0ADD     	 ble .L123
 681:src/MightyBoard/Motherboard/Planner.cc **** 			target[Z_AXIS] = axes[Z_AXIS].max_length;
 2452              	 .loc 1 681 0
 2453 00f4 08A8     	 add r0,sp,#32
 2454 00f6 4FF00201 	 mov r1,#2
 2455 00fa FFF7FEFF 	 bl _ZN5PointixEj
 2456 00fe 40F20003 	 movw r3,#:lower16:.LANCHOR1
 2457 0102 C0F20003 	 movt r3,#:upper16:.LANCHOR1
 2458 0106 DB6A     	 ldr r3,[r3,#44]
 2459 0108 0360     	 str r3,[r0,#0]
 2460              	.L123:
 684:src/MightyBoard/Motherboard/Planner.cc **** 		planNextMove(target, ms/max_delta, target-position);
 2461              	 .loc 1 684 0
 2462 010a 019A     	 ldr r2,[sp,#4]
 2463 010c 1368     	 ldr r3,[r2,#0]
 2464 010e 93FBF6F6 	 sdiv r6,r3,r6
 2465              	.LVL208:
 2466 0112 40F20004 	 movw r4,#:lower16:.LANCHOR10
 2467              	.LVL209:
 2468 0116 C0F20004 	 movt r4,#:upper16:.LANCHOR10
 2469 011a 0DA8     	 add r0,sp,#52
 2470 011c 08A9     	 add r1,sp,#32
 2471 011e 2246     	 mov r2,r4
 2472 0120 FFF7FEFF 	 bl _ZmiRK5PointS1_
 2473 0124 08A8     	 add r0,sp,#32
 2474 0126 3146     	 mov r1,r6
 2475 0128 0DAA     	 add r2,sp,#52
 2476 012a FFF7FEFF 	 bl _ZN7planner12planNextMoveER5PointlRKS0_
 685:src/MightyBoard/Motherboard/Planner.cc **** 		position = target;
 2477              	 .loc 1 685 0
 2478 012e 08AD     	 add r5,sp,#32
 2479              	.LVL210:
 2480 0130 0FCD     	 ldmia r5!,{r0,r1,r2,r3}
 2481 0132 0FC4     	 stmia r4!,{r0,r1,r2,r3}
 2482 0134 2B68     	 ldr r3,[r5,#0]
 2483 0136 2360     	 str r3,[r4,#0]
 2484              	.LBE357:
 686:src/MightyBoard/Motherboard/Planner.cc **** 	}
 2485              	 .loc 1 686 0
 2486 0138 13B0     	 add sp,sp,#76
 2487 013a BDE8F08F 	 pop {r4,r5,r6,r7,r8,r9,sl,fp,pc}
 2488              	 .cfi_endproc
 2489              	.LFE151:
 2491 013e 00BF     	 .section .text._ZN7planner15changeToolIndexEh,"ax",%progbits
 2492              	 .align 2
 2493              	 .global _ZN7planner15changeToolIndexEh
 2494              	 .thumb
 2495              	 .thumb_func
 2497              	_ZN7planner15changeToolIndexEh:
 2498              	.LFB156:
 897:src/MightyBoard/Motherboard/Planner.cc **** 	
 898:src/MightyBoard/Motherboard/Planner.cc **** 	inline void loadToleranceOffsets(){
 899:src/MightyBoard/Motherboard/Planner.cc **** 		// get toolhead offsets
 900:src/MightyBoard/Motherboard/Planner.cc **** //		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
 901:src/MightyBoard/Motherboard/Planner.cc **** 			for(int i = 0; i  < 3; i++){
 902:src/MightyBoard/Motherboard/Planner.cc **** 				int32_t tolerance_err = (int32_t)(eeprom::getEeprom32(eeprom_offsets::TOOLHEAD_OFFSET_SETTINGS 
 903:src/MightyBoard/Motherboard/Planner.cc **** 				tolerance_offset_T0[i] = (tolerance_err/2);
 904:src/MightyBoard/Motherboard/Planner.cc **** 			}
 905:src/MightyBoard/Motherboard/Planner.cc **** 			// For now, force Z offset to be zero as bad things can happen if it has a value AND there is no
 906:src/MightyBoard/Motherboard/Planner.cc **** 			// extruder axes are 0 because offset concept does not apply
 907:src/MightyBoard/Motherboard/Planner.cc **** 			for (int i = 2; i < STEPPER_COUNT; i++)
 908:src/MightyBoard/Motherboard/Planner.cc **** 				tolerance_offset_T0[i] = 0;
 909:src/MightyBoard/Motherboard/Planner.cc **** 
 910:src/MightyBoard/Motherboard/Planner.cc **** 			for(int i = 0; i < STEPPER_COUNT; i++)
 911:src/MightyBoard/Motherboard/Planner.cc **** 				tolerance_offset_T1[i] = -1 * tolerance_offset_T0[i];
 912:src/MightyBoard/Motherboard/Planner.cc **** //		}
 913:src/MightyBoard/Motherboard/Planner.cc **** 	}
 914:src/MightyBoard/Motherboard/Planner.cc **** 
 915:src/MightyBoard/Motherboard/Planner.cc **** 	/// call when a move is starting or ending, or canceling a move
 916:src/MightyBoard/Motherboard/Planner.cc **** 	/// clears planner buffer
 917:src/MightyBoard/Motherboard/Planner.cc **** 	void abort() {
 918:src/MightyBoard/Motherboard/Planner.cc **** 		steppers::abort();
 919:src/MightyBoard/Motherboard/Planner.cc **** 		position = steppers::getPosition();
 920:src/MightyBoard/Motherboard/Planner.cc **** 
 921:src/MightyBoard/Motherboard/Planner.cc **** 		/// load toolhead offset values from EEPROM
 922:src/MightyBoard/Motherboard/Planner.cc **** 		loadToleranceOffsets();
 923:src/MightyBoard/Motherboard/Planner.cc **** 		/// tool 0 is default
 924:src/MightyBoard/Motherboard/Planner.cc **** 		changeToolIndex(0);
 925:src/MightyBoard/Motherboard/Planner.cc **** 		// reset speed
 926:src/MightyBoard/Motherboard/Planner.cc **** 		for (int i = 0; i < STEPPER_COUNT; i++) {
 927:src/MightyBoard/Motherboard/Planner.cc **** 			previous_speed[i] = 0.0;
 928:src/MightyBoard/Motherboard/Planner.cc **** 		}
 929:src/MightyBoard/Motherboard/Planner.cc **** 		previous_nominal_speed = 0.0;
 930:src/MightyBoard/Motherboard/Planner.cc **** 		
 931:src/MightyBoard/Motherboard/Planner.cc **** 		block_buffer.clear();
 932:src/MightyBoard/Motherboard/Planner.cc **** 
 933:src/MightyBoard/Motherboard/Planner.cc **** 		accelerationON = eeprom::getEeprom8(eeprom_offsets::ACCELERATION_SETTINGS, 1);
 934:src/MightyBoard/Motherboard/Planner.cc **** 
 935:src/MightyBoard/Motherboard/Planner.cc **** 		additional_ms_per_segment = 0;
 936:src/MightyBoard/Motherboard/Planner.cc **** 		force_replan_from_stopped = false;
 937:src/MightyBoard/Motherboard/Planner.cc **** 
 938:src/MightyBoard/Motherboard/Planner.cc **** #ifdef CENTREPEDAL
 939:src/MightyBoard/Motherboard/Planner.cc **** 		previous_unit_vec[0]= 0.0;
 940:src/MightyBoard/Motherboard/Planner.cc **** 		previous_unit_vec[1]= 0.0;
 941:src/MightyBoard/Motherboard/Planner.cc **** 		previous_unit_vec[2]= 0.0;
 942:src/MightyBoard/Motherboard/Planner.cc **** #endif
 943:src/MightyBoard/Motherboard/Planner.cc **** 	}
 944:src/MightyBoard/Motherboard/Planner.cc **** 	
 945:src/MightyBoard/Motherboard/Planner.cc **** 	void changeToolIndex(uint8_t tool){
 2499              	 .loc 1 945 0
 2500              	 .cfi_startproc
 2501              	 
 2502              	 
 2503              	 
 2504              	.LVL211:
 946:src/MightyBoard/Motherboard/Planner.cc **** 		if(tool == 1)
 947:src/MightyBoard/Motherboard/Planner.cc **** 			tool_offsets = &tolerance_offset_T1;
 2505              	 .loc 1 947 0
 2506 0000 40F20002 	 movw r2,#:lower16:.LANCHOR12
 2507 0004 C0F20002 	 movt r2,#:upper16:.LANCHOR12
 2508 0008 40F20003 	 movw r3,#:lower16:.LANCHOR11
 2509 000c C0F20003 	 movt r3,#:upper16:.LANCHOR11
 2510 0010 0128     	 cmp r0,#1
 2511 0012 08BF     	 it eq
 2512 0014 1A46     	 moveq r2,r3
 946:src/MightyBoard/Motherboard/Planner.cc **** 		if(tool == 1)
 2513              	 .loc 1 946 0
 2514 0016 40F20003 	 movw r3,#:lower16:.LANCHOR9
 2515 001a C0F20003 	 movt r3,#:upper16:.LANCHOR9
 2516 001e 1A60     	 str r2,[r3,#0]
 948:src/MightyBoard/Motherboard/Planner.cc **** 		else
 949:src/MightyBoard/Motherboard/Planner.cc **** 			tool_offsets = &tolerance_offset_T0;
 950:src/MightyBoard/Motherboard/Planner.cc **** 	}
 2517              	 .loc 1 950 0
 2518 0020 7047     	 bx lr
 2519              	 .cfi_endproc
 2520              	.LFE156:
 2522 0022 00BF     	 .section .text._ZN7planner5abortEv,"ax",%progbits
 2523              	 .align 2
 2524              	 .global _ZN7planner5abortEv
 2525              	 .thumb
 2526              	 .thumb_func
 2528              	_ZN7planner5abortEv:
 2529              	.LFB155:
 917:src/MightyBoard/Motherboard/Planner.cc **** 	void abort() {
 2530              	 .loc 1 917 0
 2531              	 .cfi_startproc
 2532              	 
 2533              	 
 2534 0000 2DE9F043 	 push {r4,r5,r6,r7,r8,r9,lr}
 2535              	.LCFI15:
 2536              	 .cfi_def_cfa_offset 28
 2537              	 .cfi_offset 14,-4
 2538              	 .cfi_offset 9,-8
 2539              	 .cfi_offset 8,-12
 2540              	 .cfi_offset 7,-16
 2541              	 .cfi_offset 6,-20
 2542              	 .cfi_offset 5,-24
 2543              	 .cfi_offset 4,-28
 2544 0004 87B0     	 sub sp,sp,#28
 2545              	.LCFI16:
 2546              	 .cfi_def_cfa_offset 56
 2547              	.LBB374:
 918:src/MightyBoard/Motherboard/Planner.cc **** 		steppers::abort();
 2548              	 .loc 1 918 0
 2549 0006 FFF7FEFF 	 bl _ZN8steppers5abortEv
 919:src/MightyBoard/Motherboard/Planner.cc **** 		position = steppers::getPosition();
 2550              	 .loc 1 919 0
 2551 000a 6846     	 mov r0,sp
 2552 000c FFF7FEFF 	 bl _ZN8steppers11getPositionEv
 2553 0010 40F20004 	 movw r4,#:lower16:.LANCHOR10
 2554 0014 C0F20004 	 movt r4,#:upper16:.LANCHOR10
 2555 0018 0098     	 ldr r0,[sp,#0]
 2556 001a 0199     	 ldr r1,[sp,#4]
 2557 001c 029A     	 ldr r2,[sp,#8]
 2558 001e 039B     	 ldr r3,[sp,#12]
 2559 0020 0FC4     	 stmia r4!,{r0,r1,r2,r3}
 2560 0022 0498     	 ldr r0,[sp,#16]
 2561 0024 2060     	 str r0,[r4,#0]
 2562              	.LVL212:
 2563 0026 4FF4B176 	 mov r6,#354
 901:src/MightyBoard/Motherboard/Planner.cc **** 			for(int i = 0; i  < 3; i++){
 2564              	 .loc 1 901 0
 2565 002a 4FF00004 	 mov r4,#0
 2566              	.LBB375:
 2567              	.LBB376:
 2568              	.LBB377:
 902:src/MightyBoard/Motherboard/Planner.cc **** 				int32_t tolerance_err = (int32_t)(eeprom::getEeprom32(eeprom_offsets::TOOLHEAD_OFFSET_SETTINGS 
 2569              	 .loc 1 902 0
 2570 002e A146     	 mov r9,r4
 903:src/MightyBoard/Motherboard/Planner.cc **** 				tolerance_offset_T0[i] = (tolerance_err/2);
 2571              	 .loc 1 903 0
 2572 0030 40F20008 	 movw r8,#:lower16:.LANCHOR12
 2573 0034 C0F20008 	 movt r8,#:upper16:.LANCHOR12
 902:src/MightyBoard/Motherboard/Planner.cc **** 				int32_t tolerance_err = (int32_t)(eeprom::getEeprom32(eeprom_offsets::TOOLHEAD_OFFSET_SETTINGS 
 2574              	 .loc 1 902 0
 2575 0038 46F26767 	 movw r7,#26215
 2576 003c C6F26667 	 movt r7,26214
 2577              	.LVL213:
 2578              	.L129:
 2579 0040 3046     	 mov r0,r6
 2580 0042 4946     	 mov r1,r9
 2581 0044 FFF7FEFF 	 bl _ZN6eeprom11getEeprom32Etm
 2582 0048 0546     	 mov r5,r0
 2583              	.LVL214:
 903:src/MightyBoard/Motherboard/Planner.cc **** 				tolerance_offset_T0[i] = (tolerance_err/2);
 2584              	 .loc 1 903 0
 2585 004a 4046     	 mov r0,r8
 2586              	.LVL215:
 2587 004c 2146     	 mov r1,r4
 2588 004e FFF7FEFF 	 bl _ZN5PointixEj
 902:src/MightyBoard/Motherboard/Planner.cc **** 				int32_t tolerance_err = (int32_t)(eeprom::getEeprom32(eeprom_offsets::TOOLHEAD_OFFSET_SETTINGS 
 2589              	 .loc 1 902 0
 2590 0052 87FB0523 	 smull r2,r3,r7,r5
 2591 0056 4FEAE575 	 asr r5,r5,#31
 2592              	.LVL216:
 2593 005a C5EBA305 	 rsb r5,r5,r3,asr#2
 903:src/MightyBoard/Motherboard/Planner.cc **** 				tolerance_offset_T0[i] = (tolerance_err/2);
 2594              	 .loc 1 903 0
 2595 005e 05EBD575 	 add r5,r5,r5,lsr#31
 2596 0062 4FEA6505 	 asr r5,r5,#1
 2597 0066 0560     	 str r5,[r0,#0]
 2598              	.LBE377:
 901:src/MightyBoard/Motherboard/Planner.cc **** 			for(int i = 0; i  < 3; i++){
 2599              	 .loc 1 901 0
 2600 0068 04F10104 	 add r4,r4,#1
 2601              	.LVL217:
 2602 006c 06F10406 	 add r6,r6,#4
 2603 0070 B6B2     	 uxth r6,r6
 2604 0072 032C     	 cmp r4,#3
 2605 0074 E4D1     	 bne .L129
 2606              	.LBE376:
 2607              	.LBB378:
 908:src/MightyBoard/Motherboard/Planner.cc **** 				tolerance_offset_T0[i] = 0;
 2608              	 .loc 1 908 0
 2609 0076 40F20005 	 movw r5,#:lower16:.LANCHOR12
 2610 007a C0F20005 	 movt r5,#:upper16:.LANCHOR12
 2611 007e 2846     	 mov r0,r5
 2612 0080 4FF00201 	 mov r1,#2
 2613 0084 FFF7FEFF 	 bl _ZN5PointixEj
 2614 0088 4FF00004 	 mov r4,#0
 2615              	.LVL218:
 2616 008c 0460     	 str r4,[r0,#0]
 2617              	.LVL219:
 2618 008e 2846     	 mov r0,r5
 2619 0090 4FF00301 	 mov r1,#3
 2620 0094 FFF7FEFF 	 bl _ZN5PointixEj
 2621 0098 0460     	 str r4,[r0,#0]
 2622              	.LVL220:
 2623              	.LBE378:
 2624              	.LBB379:
 911:src/MightyBoard/Motherboard/Planner.cc **** 				tolerance_offset_T1[i] = -1 * tolerance_offset_T0[i];
 2625              	 .loc 1 911 0
 2626 009a 40F20006 	 movw r6,#:lower16:.LANCHOR11
 2627 009e C0F20006 	 movt r6,#:upper16:.LANCHOR11
 2628 00a2 2F46     	 mov r7,r5
 2629              	.L130:
 2630 00a4 3046     	 mov r0,r6
 2631 00a6 2146     	 mov r1,r4
 2632 00a8 FFF7FEFF 	 bl _ZN5PointixEj
 2633 00ac 0546     	 mov r5,r0
 2634 00ae 3846     	 mov r0,r7
 2635 00b0 2146     	 mov r1,r4
 2636 00b2 FFF7FEFF 	 bl _ZN5PointixEj
 2637 00b6 0368     	 ldr r3,[r0,#0]
 2638 00b8 C3F10003 	 rsb r3,r3,#0
 2639 00bc 2B60     	 str r3,[r5,#0]
 910:src/MightyBoard/Motherboard/Planner.cc **** 			for(int i = 0; i < STEPPER_COUNT; i++)
 2640              	 .loc 1 910 0
 2641 00be 04F10104 	 add r4,r4,#1
 2642              	.LVL221:
 2643 00c2 042C     	 cmp r4,#4
 2644 00c4 EED1     	 bne .L130
 2645              	.LBE379:
 2646              	.LBE375:
 924:src/MightyBoard/Motherboard/Planner.cc **** 		changeToolIndex(0);
 2647              	 .loc 1 924 0
 2648 00c6 4FF00000 	 mov r0,#0
 2649 00ca FFF7FEFF 	 bl _ZN7planner15changeToolIndexEh
 2650              	.LVL222:
 2651              	.LBB380:
 927:src/MightyBoard/Motherboard/Planner.cc **** 			previous_speed[i] = 0.0;
 2652              	 .loc 1 927 0
 2653 00ce 40F20003 	 movw r3,#:lower16:.LANCHOR8
 2654 00d2 C0F20003 	 movt r3,#:upper16:.LANCHOR8
 2655 00d6 4FF00002 	 mov r2,#0
 2656 00da 1A60     	 str r2,[r3,#0]
 2657              	.LVL223:
 2658 00dc 5A60     	 str r2,[r3,#4]
 2659              	.LVL224:
 2660 00de 9A60     	 str r2,[r3,#8]
 2661              	.LVL225:
 2662 00e0 DA60     	 str r2,[r3,#12]
 2663              	.LVL226:
 2664              	.LBE380:
 929:src/MightyBoard/Motherboard/Planner.cc **** 		previous_nominal_speed = 0.0;
 2665              	 .loc 1 929 0
 2666 00e2 40F20003 	 movw r3,#:lower16:.LANCHOR7
 2667 00e6 C0F20003 	 movt r3,#:upper16:.LANCHOR7
 2668 00ea 1A60     	 str r2,[r3,#0]
 2669              	.LVL227:
 2670              	.LBB381:
 2671              	.LBB382:
 216:src/MightyBoard/Motherboard/Planner.cc **** 			head = 0;
 2672              	 .loc 1 216 0
 2673 00ec 40F20003 	 movw r3,#:lower16:.LANCHOR4
 2674 00f0 C0F20003 	 movt r3,#:upper16:.LANCHOR4
 2675 00f4 4FF00004 	 mov r4,#0
 2676              	.LVL228:
 2677 00f8 1C70     	 strb r4,[r3,#0]
 217:src/MightyBoard/Motherboard/Planner.cc **** 			tail = 0;
 2678              	 .loc 1 217 0
 2679 00fa 5C70     	 strb r4,[r3,#1]
 2680              	.LBE382:
 2681              	.LBE381:
 933:src/MightyBoard/Motherboard/Planner.cc **** 		accelerationON = eeprom::getEeprom8(eeprom_offsets::ACCELERATION_SETTINGS, 1);
 2682              	 .loc 1 933 0
 2683 00fc 4FF4B770 	 mov r0,#366
 2684 0100 4FF00101 	 mov r1,#1
 2685 0104 FFF7FEFF 	 bl _ZN6eeprom10getEeprom8Eth
 2686 0108 40F20003 	 movw r3,#:lower16:.LANCHOR0
 2687 010c C0F20003 	 movt r3,#:upper16:.LANCHOR0
 2688 0110 001B     	 subs r0,r0,r4
 2689 0112 18BF     	 it ne
 2690 0114 0120     	 movne r0,#1
 2691 0116 1870     	 strb r0,[r3,#0]
 935:src/MightyBoard/Motherboard/Planner.cc **** 		additional_ms_per_segment = 0;
 2692              	 .loc 1 935 0
 2693 0118 40F20003 	 movw r3,#:lower16:.LANCHOR13
 2694 011c C0F20003 	 movt r3,#:upper16:.LANCHOR13
 2695 0120 1C60     	 str r4,[r3,#0]
 936:src/MightyBoard/Motherboard/Planner.cc **** 		force_replan_from_stopped = false;
 2696              	 .loc 1 936 0
 2697 0122 40F20003 	 movw r3,#:lower16:.LANCHOR5
 2698 0126 C0F20003 	 movt r3,#:upper16:.LANCHOR5
 2699 012a 1C70     	 strb r4,[r3,#0]
 2700              	.LBE374:
 943:src/MightyBoard/Motherboard/Planner.cc **** 	}
 2701              	 .loc 1 943 0
 2702 012c 07B0     	 add sp,sp,#28
 2703 012e BDE8F083 	 pop {r4,r5,r6,r7,r8,r9,pc}
 2704              	 .cfi_endproc
 2705              	.LFE155:
 2707 0132 00BF     	 .section .text._ZN7planner4initEv,"ax",%progbits
 2708              	 .align 2
 2709              	 .global _ZN7planner4initEv
 2710              	 .thumb
 2711              	 .thumb_func
 2713              	_ZN7planner4initEv:
 2714              	.LFB127:
 270:src/MightyBoard/Motherboard/Planner.cc **** 	{
 2715              	 .loc 1 270 0
 2716              	 .cfi_startproc
 2717              	 
 2718              	 
 2719 0000 70B5     	 push {r4,r5,r6,lr}
 2720              	.LCFI17:
 2721              	 .cfi_def_cfa_offset 16
 2722              	 .cfi_offset 14,-4
 2723              	 .cfi_offset 6,-8
 2724              	 .cfi_offset 5,-12
 2725              	 .cfi_offset 4,-16
 2726              	.LBB383:
 271:src/MightyBoard/Motherboard/Planner.cc **** 		xprintf("planner::init" " (%s:%d)\n",_F_,_L_);
 2727              	 .loc 1 271 0
 2728 0002 40F20000 	 movw r0,#:lower16:.LC0
 2729 0006 C0F20000 	 movt r0,#:upper16:.LC0
 2730 000a 7A49     	 ldr r1,.L136
 2731 000c 40F20F12 	 movw r2,#271
 2732 0010 FFF7FEFF 	 bl xprintf
 274:src/MightyBoard/Motherboard/Planner.cc **** 		if (eeprom::getEeprom32(eeprom_offsets::TOOLHEAD_OFFSET_SETTINGS, 0xFFFFFFFF) == 0xFFFFFFFF) {
 2733              	 .loc 1 274 0
 2734 0014 4FF4B170 	 mov r0,#354
 2735 0018 4FF0FF31 	 mov r1,#-1
 2736 001c FFF7FEFF 	 bl _ZN6eeprom11getEeprom32Etm
 2737 0020 B0F1FF3F 	 cmp r0,#-1
 2738 0024 0AD1     	 bne .L134
 275:src/MightyBoard/Motherboard/Planner.cc **** 			xprintf("planner::init" " (%s:%d)\n",_F_,_L_);
 2739              	 .loc 1 275 0 discriminator 1
 2740 0026 40F20000 	 movw r0,#:lower16:.LC0
 2741 002a C0F20000 	 movt r0,#:upper16:.LC0
 2742 002e 7149     	 ldr r1,.L136
 2743 0030 40F21312 	 movw r2,#275
 2744 0034 FFF7FEFF 	 bl xprintf
 276:src/MightyBoard/Motherboard/Planner.cc **** 			eeprom::storeToolheadToleranceDefaults();
 2745              	 .loc 1 276 0 discriminator 1
 2746 0038 FFF7FEFF 	 bl _ZN6eeprom30storeToolheadToleranceDefaultsEv
 2747              	.L134:
 278:src/MightyBoard/Motherboard/Planner.cc **** 		xprintf("planner::init" " (%s:%d)\n",_F_,_L_);
 2748              	 .loc 1 278 0 discriminator 1
 2749 003c 40F20004 	 movw r4,#:lower16:.LC0
 2750 0040 C0F20004 	 movt r4,#:upper16:.LC0
 2751 0044 6B4E     	 ldr r6,.L136
 2752 0046 2046     	 mov r0,r4
 2753 0048 3146     	 mov r1,r6
 2754 004a 4FF48B72 	 mov r2,#278
 2755 004e FFF7FEFF 	 bl xprintf
 280:src/MightyBoard/Motherboard/Planner.cc **** 		setAxisStepsPerMM(XSTEPS_PER_MM,0);
 2756              	 .loc 1 280 0 discriminator 1
 2757 0052 44F6CD40 	 movw r0,#19661
 2758 0056 C4F28020 	 movt r0,17024
 2759 005a 4FF00001 	 mov r1,#0
 2760 005e FFF7FEFF 	 bl _ZN7planner17setAxisStepsPerMMEfh
 281:src/MightyBoard/Motherboard/Planner.cc **** 		setAxisStepsPerMM(YSTEPS_PER_MM,1);               
 2761              	 .loc 1 281 0 discriminator 1
 2762 0062 4BF65200 	 movw r0,#47186
 2763 0066 C4F23720 	 movt r0,16951
 2764 006a 4FF00101 	 mov r1,#1
 2765 006e FFF7FEFF 	 bl _ZN7planner17setAxisStepsPerMMEfh
 282:src/MightyBoard/Motherboard/Planner.cc **** 		setAxisStepsPerMM(ZSTEPS_PER_MM,2);
 2766              	 .loc 1 282 0 discriminator 1
 2767 0072 4FF00000 	 mov r0,#0
 2768 0076 C4F22050 	 movt r0,17696
 2769 007a 4FF00201 	 mov r1,#2
 2770 007e FFF7FEFF 	 bl _ZN7planner17setAxisStepsPerMMEfh
 283:src/MightyBoard/Motherboard/Planner.cc **** 		setAxisStepsPerMM(ASTEPS_PER_MM,3);
 2771              	 .loc 1 283 0 discriminator 1
 2772 0082 43F6B865 	 movw r5,#16056
 2773 0086 C4F2A535 	 movt r5,17317
 2774 008a 2846     	 mov r0,r5
 2775 008c 4FF00301 	 mov r1,#3
 2776 0090 FFF7FEFF 	 bl _ZN7planner17setAxisStepsPerMMEfh
 284:src/MightyBoard/Motherboard/Planner.cc **** 		setAxisStepsPerMM(BSTEPS_PER_MM,4);
 2777              	 .loc 1 284 0 discriminator 1
 2778 0094 2846     	 mov r0,r5
 2779 0096 4FF00401 	 mov r1,#4
 2780 009a FFF7FEFF 	 bl _ZN7planner17setAxisStepsPerMMEfh
 286:src/MightyBoard/Motherboard/Planner.cc **** 		xprintf("planner::init" " (%s:%d)\n",_F_,_L_);
 2781              	 .loc 1 286 0 discriminator 1
 2782 009e 2046     	 mov r0,r4
 2783 00a0 3146     	 mov r1,r6
 2784 00a2 4FF48F72 	 mov r2,#286
 2785 00a6 FFF7FEFF 	 bl xprintf
 290:src/MightyBoard/Motherboard/Planner.cc **** 		uint8_t accelerationStatus = eeprom::getEeprom8(eeprom_offsets::ACCELERATION_SETTINGS + accelerat
 2786              	 .loc 1 290 0 discriminator 1
 2787 00aa 4FF4C470 	 mov r0,#392
 2788 00ae 4FF0FF01 	 mov r1,#255
 2789 00b2 FFF7FEFF 	 bl _ZN6eeprom10getEeprom8Eth
 2790              	.LVL229:
 291:src/MightyBoard/Motherboard/Planner.cc **** 		if(accelerationStatus !=  _BV(ACCELERATION_INIT_BIT)){
 2791              	 .loc 1 291 0 discriminator 1
 2792 00b6 8028     	 cmp r0,#128
 2793 00b8 07D0     	 beq .L135
 292:src/MightyBoard/Motherboard/Planner.cc **** 			xprintf("planner::init" " (%s:%d)\n",_F_,_L_);
 2794              	 .loc 1 292 0 discriminator 1
 2795 00ba 2046     	 mov r0,r4
 2796              	.LVL230:
 2797 00bc 3146     	 mov r1,r6
 2798 00be 4FF49272 	 mov r2,#292
 2799 00c2 FFF7FEFF 	 bl xprintf
 293:src/MightyBoard/Motherboard/Planner.cc **** 			eeprom::setDefaultsAcceleration();
 2800              	 .loc 1 293 0 discriminator 1
 2801 00c6 FFF7FEFF 	 bl _ZN6eeprom23setDefaultsAccelerationEv
 2802              	.L135:
 295:src/MightyBoard/Motherboard/Planner.cc **** 		xprintf("planner::init" " (%s:%d)\n",_F_,_L_);
 2803              	 .loc 1 295 0 discriminator 1
 2804 00ca 40F20000 	 movw r0,#:lower16:.LC0
 2805 00ce C0F20000 	 movt r0,#:upper16:.LC0
 2806 00d2 4849     	 ldr r1,.L136
 2807 00d4 40F22712 	 movw r2,#295
 2808 00d8 FFF7FEFF 	 bl xprintf
 298:src/MightyBoard/Motherboard/Planner.cc **** 		setAcceleration((int32_t)eeprom::getEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration
 2809              	 .loc 1 298 0 discriminator 1
 2810 00dc 4FF4B870 	 mov r0,#368
 2811 00e0 40F6B831 	 movw r1,#3000
 2812 00e4 FFF7FEFF 	 bl _ZN6eeprom11getEeprom16Ett
 2813 00e8 FFF7FEFF 	 bl _ZN7planner15setAccelerationEl
 300:src/MightyBoard/Motherboard/Planner.cc **** 		setAxisAcceleration((int32_t)eeprom::getEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + accelera
 2814              	 .loc 1 300 0 discriminator 1
 2815 00ec 4FF4B970 	 mov r0,#370
 2816 00f0 40F6B831 	 movw r1,#3000
 2817 00f4 FFF7FEFF 	 bl _ZN6eeprom11getEeprom16Ett
 2818 00f8 4FF00001 	 mov r1,#0
 2819 00fc FFF7FEFF 	 bl _ZN7planner19setAxisAccelerationElh
 301:src/MightyBoard/Motherboard/Planner.cc **** 		setAxisAcceleration((int32_t)eeprom::getEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + accelera
 2820              	 .loc 1 301 0 discriminator 1
 2821 0100 4FF4BA70 	 mov r0,#372
 2822 0104 40F6B831 	 movw r1,#3000
 2823 0108 FFF7FEFF 	 bl _ZN6eeprom11getEeprom16Ett
 2824 010c 4FF00101 	 mov r1,#1
 2825 0110 FFF7FEFF 	 bl _ZN7planner19setAxisAccelerationElh
 302:src/MightyBoard/Motherboard/Planner.cc **** 		setAxisAcceleration((int32_t)eeprom::getEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + accelera
 2826              	 .loc 1 302 0 discriminator 1
 2827 0114 4FF4BB70 	 mov r0,#374
 2828 0118 4FF47A71 	 mov r1,#1000
 2829 011c FFF7FEFF 	 bl _ZN6eeprom11getEeprom16Ett
 2830 0120 4FF00201 	 mov r1,#2
 2831 0124 FFF7FEFF 	 bl _ZN7planner19setAxisAccelerationElh
 303:src/MightyBoard/Motherboard/Planner.cc **** 		setAxisAcceleration((int32_t)eeprom::getEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + accelera
 2832              	 .loc 1 303 0 discriminator 1
 2833 0128 4FF4BC70 	 mov r0,#376
 2834 012c 40F6B831 	 movw r1,#3000
 2835 0130 FFF7FEFF 	 bl _ZN6eeprom11getEeprom16Ett
 2836 0134 4FF00301 	 mov r1,#3
 2837 0138 FFF7FEFF 	 bl _ZN7planner19setAxisAccelerationElh
 304:src/MightyBoard/Motherboard/Planner.cc **** 		setAxisAcceleration((int32_t)eeprom::getEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + accelera
 2838              	 .loc 1 304 0 discriminator 1
 2839 013c 4FF4BD70 	 mov r0,#378
 2840 0140 40F6B831 	 movw r1,#3000
 2841 0144 FFF7FEFF 	 bl _ZN6eeprom11getEeprom16Ett
 2842 0148 4FF00401 	 mov r1,#4
 2843 014c FFF7FEFF 	 bl _ZN7planner19setAxisAccelerationElh
 306:src/MightyBoard/Motherboard/Planner.cc **** 		setMaxXYJerk((float)eeprom::getEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eepr
 2844              	 .loc 1 306 0 discriminator 1
 2845 0150 4FF4BE70 	 mov r0,#380
 2846 0154 4FF01401 	 mov r1,#20
 2847 0158 FFF7FEFF 	 bl _ZN6eeprom11getEeprom16Ett
 2848 015c FFF7FEFF 	 bl __aeabi_ui2f
 2849 0160 FFF7FEFF 	 bl _ZN7planner12setMaxXYJerkEf
 307:src/MightyBoard/Motherboard/Planner.cc **** 		setMaxAxisJerk((float)eeprom::getEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_ee
 2850              	 .loc 1 307 0 discriminator 1
 2851 0164 4FF4C070 	 mov r0,#384
 2852 0168 4FF00101 	 mov r1,#1
 2853 016c FFF7FEFF 	 bl _ZN6eeprom11getEeprom16Ett
 2854 0170 FFF7FEFF 	 bl __aeabi_ui2f
 2855 0174 4FF00201 	 mov r1,#2
 2856 0178 FFF7FEFF 	 bl _ZN7planner14setMaxAxisJerkEfh
 308:src/MightyBoard/Motherboard/Planner.cc **** 		setMaxAxisJerk((float)eeprom::getEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_ee
 2857              	 .loc 1 308 0 discriminator 1
 2858 017c 4FF4C170 	 mov r0,#386
 2859 0180 4FF00201 	 mov r1,#2
 2860 0184 FFF7FEFF 	 bl _ZN6eeprom11getEeprom16Ett
 2861 0188 FFF7FEFF 	 bl __aeabi_ui2f
 2862 018c 4FF00301 	 mov r1,#3
 2863 0190 FFF7FEFF 	 bl _ZN7planner14setMaxAxisJerkEfh
 309:src/MightyBoard/Motherboard/Planner.cc **** 		setMaxAxisJerk((float)eeprom::getEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_ee
 2864              	 .loc 1 309 0 discriminator 1
 2865 0194 4FF4C270 	 mov r0,#388
 2866 0198 4FF00201 	 mov r1,#2
 2867 019c FFF7FEFF 	 bl _ZN6eeprom11getEeprom16Ett
 2868 01a0 FFF7FEFF 	 bl __aeabi_ui2f
 2869 01a4 4FF00401 	 mov r1,#4
 2870 01a8 FFF7FEFF 	 bl _ZN7planner14setMaxAxisJerkEfh
 311:src/MightyBoard/Motherboard/Planner.cc **** 		minimum_planner_speed = eeprom::getEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_
 2871              	 .loc 1 311 0 discriminator 1
 2872 01ac 4FF4C370 	 mov r0,#390
 2873 01b0 4FF00F01 	 mov r1,#15
 2874 01b4 FFF7FEFF 	 bl _ZN6eeprom11getEeprom16Ett
 2875 01b8 40F20004 	 movw r4,#:lower16:.LANCHOR6
 2876 01bc C0F20004 	 movt r4,#:upper16:.LANCHOR6
 2877 01c0 FFF7FEFF 	 bl __aeabi_ui2f
 2878 01c4 2060     	 str r0,[r4,#0]
 314:src/MightyBoard/Motherboard/Planner.cc **** 		setAxisMaxLength(eeprom::getEeprom32(eeprom_offsets::AXIS_LENGTHS + 4*2, replicator_axis_lengths:
 2879              	 .loc 1 314 0 discriminator 1
 2880 01c6 4FF4CA70 	 mov r0,#404
 2881 01ca 4EF66021 	 movw r1,#60000
 2882 01ce FFF7FEFF 	 bl _ZN6eeprom11getEeprom32Etm
 2883 01d2 4FF00201 	 mov r1,#2
 2884 01d6 4FF00102 	 mov r2,#1
 2885 01da FFF7FEFF 	 bl _ZN7planner16setAxisMaxLengthElhb
 315:src/MightyBoard/Motherboard/Planner.cc **** 		setAxisMaxLength(0, 2, false);
 2886              	 .loc 1 315 0 discriminator 1
 2887 01de 4FF00000 	 mov r0,#0
 2888 01e2 4FF00201 	 mov r1,#2
 2889 01e6 0246     	 mov r2,r0
 2890 01e8 FFF7FEFF 	 bl _ZN7planner16setAxisMaxLengthElhb
 317:src/MightyBoard/Motherboard/Planner.cc **** 		abort();
 2891              	 .loc 1 317 0 discriminator 1
 2892 01ec FFF7FEFF 	 bl _ZN7planner5abortEv
 2893              	.LBE383:
 325:src/MightyBoard/Motherboard/Planner.cc **** 	}
 2894              	 .loc 1 325 0 discriminator 1
 2895 01f0 70BD     	 pop {r4,r5,r6,pc}
 2896              	.L137:
 2897 01f2 00BF     	 .align 2
 2898              	.L136:
 2899 01f4 1C000000 	 .word .LC1+28
 2900              	 .cfi_endproc
 2901              	.LFE127:
 2903              	 .section .text._ZN7planner14definePositionERK5Point,"ax",%progbits
 2904              	 .align 2
 2905              	 .global _ZN7planner14definePositionERK5Point
 2906              	 .thumb
 2907              	 .thumb_func
 2909              	_ZN7planner14definePositionERK5Point:
 2910              	.LFB157:
 951:src/MightyBoard/Motherboard/Planner.cc **** 
 952:src/MightyBoard/Motherboard/Planner.cc **** 	void definePosition(const Point& new_position)
 953:src/MightyBoard/Motherboard/Planner.cc **** 	{
 2911              	 .loc 1 953 0
 2912              	 .cfi_startproc
 2913              	 
 2914              	 
 2915              	.LVL231:
 2916 0000 70B5     	 push {r4,r5,r6,lr}
 2917              	.LCFI18:
 2918              	 .cfi_def_cfa_offset 16
 2919              	 .cfi_offset 14,-4
 2920              	 .cfi_offset 6,-8
 2921              	 .cfi_offset 5,-12
 2922              	 .cfi_offset 4,-16
 2923 0002 0446     	 mov r4,r0
 2924              	.LBB384:
 954:src/MightyBoard/Motherboard/Planner.cc **** //	    xprintf("definePosition(const Point& new_position)" " (%s:%d)\n",_F_,_L_);
 955:src/MightyBoard/Motherboard/Planner.cc **** 		position = new_position;
 2925              	 .loc 1 955 0
 2926 0004 40F20006 	 movw r6,#:lower16:.LANCHOR10
 2927 0008 C0F20006 	 movt r6,#:upper16:.LANCHOR10
 2928 000c 3546     	 mov r5,r6
 2929 000e 0068     	 ldr r0,[r0,#0]
 2930              	.LVL232:
 2931 0010 6168     	 ldr r1,[r4,#4]
 2932 0012 A268     	 ldr r2,[r4,#8]
 2933 0014 E368     	 ldr r3,[r4,#12]
 2934 0016 0FC5     	 stmia r5!,{r0,r1,r2,r3}
 2935 0018 2069     	 ldr r0,[r4,#16]
 2936 001a 2860     	 str r0,[r5,#0]
 956:src/MightyBoard/Motherboard/Planner.cc **** 		
 957:src/MightyBoard/Motherboard/Planner.cc **** 		/// Clip Z axis so that plate cannot attempt to move out of build area
 958:src/MightyBoard/Motherboard/Planner.cc **** 		/// other axis clipping will be added in a future revision
 959:src/MightyBoard/Motherboard/Planner.cc **** 		if(position[Z_AXIS] > axes[Z_AXIS].max_length){
 2937              	 .loc 1 959 0
 2938 001c 3046     	 mov r0,r6
 2939 001e 4FF00201 	 mov r1,#2
 2940 0022 FFF7FEFF 	 bl _ZN5PointixEj
 2941 0026 40F20003 	 movw r3,#:lower16:.LANCHOR1
 2942 002a C0F20003 	 movt r3,#:upper16:.LANCHOR1
 2943 002e 0268     	 ldr r2,[r0,#0]
 2944 0030 DB6A     	 ldr r3,[r3,#44]
 2945 0032 9A42     	 cmp r2,r3
 2946 0034 0ADD     	 ble .L139
 960:src/MightyBoard/Motherboard/Planner.cc **** 			position[Z_AXIS] = axes[Z_AXIS].max_length;
 2947              	 .loc 1 960 0
 2948 0036 3046     	 mov r0,r6
 2949 0038 4FF00201 	 mov r1,#2
 2950 003c FFF7FEFF 	 bl _ZN5PointixEj
 2951 0040 40F20003 	 movw r3,#:lower16:.LANCHOR1
 2952 0044 C0F20003 	 movt r3,#:upper16:.LANCHOR1
 2953 0048 DB6A     	 ldr r3,[r3,#44]
 2954 004a 0360     	 str r3,[r0,#0]
 2955              	.L139:
 961:src/MightyBoard/Motherboard/Planner.cc **** 		}
 962:src/MightyBoard/Motherboard/Planner.cc **** 		
 963:src/MightyBoard/Motherboard/Planner.cc **** 		steppers::definePosition(new_position);
 2956              	 .loc 1 963 0
 2957 004c 2046     	 mov r0,r4
 2958 004e FFF7FEFF 	 bl _ZN8steppers14definePositionERK5Point
 2959              	.LVL233:
 2960              	.LBB385:
 964:src/MightyBoard/Motherboard/Planner.cc **** 		
 965:src/MightyBoard/Motherboard/Planner.cc **** 		// reset speed
 966:src/MightyBoard/Motherboard/Planner.cc **** 		for (int i = 0; i < STEPPER_COUNT; i++) {
 967:src/MightyBoard/Motherboard/Planner.cc **** 			previous_speed[i] = 0.0;
 2961              	 .loc 1 967 0
 2962 0052 40F20003 	 movw r3,#:lower16:.LANCHOR8
 2963 0056 C0F20003 	 movt r3,#:upper16:.LANCHOR8
 2964 005a 4FF00002 	 mov r2,#0
 2965 005e 1A60     	 str r2,[r3,#0]
 2966              	.LVL234:
 2967 0060 5A60     	 str r2,[r3,#4]
 2968              	.LVL235:
 2969 0062 9A60     	 str r2,[r3,#8]
 2970              	.LVL236:
 2971 0064 DA60     	 str r2,[r3,#12]
 2972              	.LVL237:
 2973              	.LBE385:
 968:src/MightyBoard/Motherboard/Planner.cc **** 		}
 969:src/MightyBoard/Motherboard/Planner.cc **** 		previous_nominal_speed = 0.0;
 2974              	 .loc 1 969 0
 2975 0066 40F20003 	 movw r3,#:lower16:.LANCHOR7
 2976 006a C0F20003 	 movt r3,#:upper16:.LANCHOR7
 2977 006e 1A60     	 str r2,[r3,#0]
 2978              	.LBE384:
 970:src/MightyBoard/Motherboard/Planner.cc **** 		
 971:src/MightyBoard/Motherboard/Planner.cc **** #ifdef CENTREPEDAL
 972:src/MightyBoard/Motherboard/Planner.cc **** 		previous_unit_vec[0]= 0.0;
 973:src/MightyBoard/Motherboard/Planner.cc **** 		previous_unit_vec[1]= 0.0;
 974:src/MightyBoard/Motherboard/Planner.cc **** 		previous_unit_vec[2]= 0.0;
 975:src/MightyBoard/Motherboard/Planner.cc **** #endif
 976:src/MightyBoard/Motherboard/Planner.cc **** 	}
 2979              	 .loc 1 976 0
 2980 0070 70BD     	 pop {r4,r5,r6,pc}
 2981              	 .cfi_endproc
 2982              	.LFE157:
 2984 0072 00BF     	 .section .text._ZN7planner11getPositionEv,"ax",%progbits
 2985              	 .align 2
 2986              	 .global _ZN7planner11getPositionEv
 2987              	 .thumb
 2988              	 .thumb_func
 2990              	_ZN7planner11getPositionEv:
 2991              	.LFB158:
 977:src/MightyBoard/Motherboard/Planner.cc **** 
 978:src/MightyBoard/Motherboard/Planner.cc **** 	const Point getPosition()
 979:src/MightyBoard/Motherboard/Planner.cc **** 	{
 2992              	 .loc 1 979 0
 2993              	 .cfi_startproc
 2994              	 
 2995              	 
 2996              	 
 2997              	.LVL238:
 2998 0000 30B4     	 push {r4,r5}
 2999              	.LCFI19:
 3000              	 .cfi_def_cfa_offset 8
 3001              	 .cfi_offset 5,-4
 3002              	 .cfi_offset 4,-8
 3003 0002 0546     	 mov r5,r0
 980:src/MightyBoard/Motherboard/Planner.cc **** 		return position;
 3004              	 .loc 1 980 0
 3005 0004 40F20004 	 movw r4,#:lower16:.LANCHOR10
 3006 0008 C0F20004 	 movt r4,#:upper16:.LANCHOR10
 3007 000c 0FCC     	 ldmia r4!,{r0,r1,r2,r3}
 3008              	.LVL239:
 3009 000e 2860     	 str r0,[r5,#0]
 3010 0010 6960     	 str r1,[r5,#4]
 3011 0012 AA60     	 str r2,[r5,#8]
 3012 0014 EB60     	 str r3,[r5,#12]
 3013 0016 2068     	 ldr r0,[r4,#0]
 3014 0018 2861     	 str r0,[r5,#16]
 981:src/MightyBoard/Motherboard/Planner.cc **** 	}
 3015              	 .loc 1 981 0
 3016 001a 2846     	 mov r0,r5
 3017 001c 30BC     	 pop {r4,r5}
 3018 001e 7047     	 bx lr
 3019              	 .cfi_endproc
 3020              	.LFE158:
 3022              	 .section .text._GLOBAL__sub_I__ZN7planner4axesE,"ax",%progbits
 3023              	 .align 2
 3024              	 .thumb
 3025              	 .thumb_func
 3027              	_GLOBAL__sub_I__ZN7planner4axesE:
 3028              	.LFB180:
 982:src/MightyBoard/Motherboard/Planner.cc **** }
 3029              	 .loc 1 982 0
 3030              	 .cfi_startproc
 3031              	 
 3032              	 
 3033 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 3034              	.LCFI20:
 3035              	 .cfi_def_cfa_offset 20
 3036              	 .cfi_offset 14,-4
 3037              	 .cfi_offset 7,-8
 3038              	 .cfi_offset 6,-12
 3039              	 .cfi_offset 5,-16
 3040              	 .cfi_offset 4,-20
 3041 0002 95B0     	 sub sp,sp,#84
 3042              	.LCFI21:
 3043              	 .cfi_def_cfa_offset 104
 3044              	.LVL240:
 3045              	.LBB398:
 3046              	.LBB399:
 3047              	 .file 2 "src/MightyBoard/shared/LPCPort.hh"
   1:src/MightyBoard/shared/LPCPort.hh **** /*
   2:src/MightyBoard/shared/LPCPort.hh **** * Copyright 2010 by Adam Mayer	 <adam@makerbot.com>
   3:src/MightyBoard/shared/LPCPort.hh **** *
   4:src/MightyBoard/shared/LPCPort.hh **** * This program is free software: you can redistribute it and/or modify
   5:src/MightyBoard/shared/LPCPort.hh **** * it under the terms of the GNU General Public License as published by
   6:src/MightyBoard/shared/LPCPort.hh **** * the Free Software Foundation, either version 3 of the License, or
   7:src/MightyBoard/shared/LPCPort.hh **** * (at your option) any later version.
   8:src/MightyBoard/shared/LPCPort.hh **** *
   9:src/MightyBoard/shared/LPCPort.hh **** * This program is distributed in the hope that it will be useful,
  10:src/MightyBoard/shared/LPCPort.hh **** * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:src/MightyBoard/shared/LPCPort.hh **** * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:src/MightyBoard/shared/LPCPort.hh **** * GNU General Public License for more details.
  13:src/MightyBoard/shared/LPCPort.hh **** *
  14:src/MightyBoard/shared/LPCPort.hh **** * You should have received a copy of the GNU General Public License
  15:src/MightyBoard/shared/LPCPort.hh **** * along with this program.  If not, see <http://www.gnu.org/licenses/>
  16:src/MightyBoard/shared/LPCPort.hh **** */
  17:src/MightyBoard/shared/LPCPort.hh **** 
  18:src/MightyBoard/shared/LPCPort.hh **** #ifndef SHARED_AVR_PORT_HH_
  19:src/MightyBoard/shared/LPCPort.hh **** #define SHARED_AVR_PORT_HH_
  20:src/MightyBoard/shared/LPCPort.hh **** 
  21:src/MightyBoard/shared/LPCPort.hh **** #define __STDC_LIMIT_MACROS
  22:src/MightyBoard/shared/LPCPort.hh **** //#include <stdint.h>
  23:src/MightyBoard/shared/LPCPort.hh **** //#include <util/atomic.h>
  24:src/MightyBoard/shared/LPCPort.hh **** 
  25:src/MightyBoard/shared/LPCPort.hh **** extern "C" {
  26:src/MightyBoard/shared/LPCPort.hh **** 	#include "lpc_types.h"
  27:src/MightyBoard/shared/LPCPort.hh **** 	#include "lpc17xx_gpio.h"
  28:src/MightyBoard/shared/LPCPort.hh **** }
  29:src/MightyBoard/shared/LPCPort.hh **** 
  30:src/MightyBoard/shared/LPCPort.hh **** 
  31:src/MightyBoard/shared/LPCPort.hh **** #define NULL_PORT 0xff
  32:src/MightyBoard/shared/LPCPort.hh **** 
  33:src/MightyBoard/shared/LPCPort.hh **** class LPCPort {
  34:src/MightyBoard/shared/LPCPort.hh **** private:
  35:src/MightyBoard/shared/LPCPort.hh **** 	const uint8_t port_base;
  36:src/MightyBoard/shared/LPCPort.hh **** 	friend class Pin;
  37:src/MightyBoard/shared/LPCPort.hh **** public:
  38:src/MightyBoard/shared/LPCPort.hh **** 	LPCPort();
  39:src/MightyBoard/shared/LPCPort.hh **** 	LPCPort(uint8_t port_base_in);
  40:src/MightyBoard/shared/LPCPort.hh **** 	bool isNull() const;
  41:src/MightyBoard/shared/LPCPort.hh **** 	void setPinDirectionOut(uint8_t pin_index) const;
  42:src/MightyBoard/shared/LPCPort.hh **** 	void setPinDirectionIn(uint8_t pin_index) const;
  43:src/MightyBoard/shared/LPCPort.hh **** 	bool getPin(uint8_t pin_index) const;
  44:src/MightyBoard/shared/LPCPort.hh **** 	void setPinOn(uint8_t pin_index) const;
  45:src/MightyBoard/shared/LPCPort.hh **** 	void setPinOff(uint8_t pin_index) const;
  46:src/MightyBoard/shared/LPCPort.hh **** };
  47:src/MightyBoard/shared/LPCPort.hh **** 
  48:src/MightyBoard/shared/LPCPort.hh **** 
  49:src/MightyBoard/shared/LPCPort.hh **** const LPCPort Port0(0);
 3048              	 .loc 2 49 0
 3049 0004 40F20000 	 movw r0,#:lower16:.LANCHOR14
 3050 0008 C0F20000 	 movt r0,#:upper16:.LANCHOR14
 3051 000c 4FF00001 	 mov r1,#0
 3052 0010 FFF7FEFF 	 bl _ZN7LPCPortC1Eh
  50:src/MightyBoard/shared/LPCPort.hh **** const LPCPort Port1(1);
 3053              	 .loc 2 50 0
 3054 0014 40F20000 	 movw r0,#:lower16:.LANCHOR15
 3055 0018 C0F20000 	 movt r0,#:upper16:.LANCHOR15
 3056 001c 4FF00101 	 mov r1,#1
 3057 0020 FFF7FEFF 	 bl _ZN7LPCPortC1Eh
  51:src/MightyBoard/shared/LPCPort.hh **** const LPCPort Port2(2);
 3058              	 .loc 2 51 0
 3059 0024 40F20000 	 movw r0,#:lower16:.LANCHOR16
 3060 0028 C0F20000 	 movt r0,#:upper16:.LANCHOR16
 3061 002c 4FF00201 	 mov r1,#2
 3062 0030 FFF7FEFF 	 bl _ZN7LPCPortC1Eh
  52:src/MightyBoard/shared/LPCPort.hh **** const LPCPort Port3(3);
 3063              	 .loc 2 52 0
 3064 0034 40F20000 	 movw r0,#:lower16:.LANCHOR17
 3065 0038 C0F20000 	 movt r0,#:upper16:.LANCHOR17
 3066 003c 4FF00301 	 mov r1,#3
 3067 0040 FFF7FEFF 	 bl _ZN7LPCPortC1Eh
  53:src/MightyBoard/shared/LPCPort.hh **** const LPCPort Port4(4);
 3068              	 .loc 2 53 0
 3069 0044 40F20000 	 movw r0,#:lower16:.LANCHOR18
 3070 0048 C0F20000 	 movt r0,#:upper16:.LANCHOR18
 3071 004c 4FF00401 	 mov r1,#4
 3072 0050 FFF7FEFF 	 bl _ZN7LPCPortC1Eh
  54:src/MightyBoard/shared/LPCPort.hh **** 
  55:src/MightyBoard/shared/LPCPort.hh **** const LPCPort NullPort(0xff);
 3073              	 .loc 2 55 0
 3074 0054 40F20004 	 movw r4,#:lower16:.LANCHOR19
 3075 0058 C0F20004 	 movt r4,#:upper16:.LANCHOR19
 3076 005c 2046     	 mov r0,r4
 3077 005e 4FF0FF01 	 mov r1,#255
 3078 0062 FFF7FEFF 	 bl _ZN7LPCPortC1Eh
 3079              	 .file 3 "src/MightyBoard/shared/Pin.hh"
   1:src/MightyBoard/shared/Pin.hh **** #ifndef PIN_HH
   2:src/MightyBoard/shared/Pin.hh **** #define PIN_HH
   3:src/MightyBoard/shared/Pin.hh **** 
   4:src/MightyBoard/shared/Pin.hh **** #include "LPCPort.hh"
   5:src/MightyBoard/shared/Pin.hh **** #include "Pin.hh"
   6:src/MightyBoard/shared/Pin.hh **** extern "C" {
   7:src/MightyBoard/shared/Pin.hh **** 	#include "lpc17xx_gpio.h"
   8:src/MightyBoard/shared/Pin.hh **** 	#include "lpc17xx_pinsel.h"
   9:src/MightyBoard/shared/Pin.hh **** 	#include "comm.h"
  10:src/MightyBoard/shared/Pin.hh **** }
  11:src/MightyBoard/shared/Pin.hh **** 
  12:src/MightyBoard/shared/Pin.hh **** /// \ingroup HardwareLibraries
  13:src/MightyBoard/shared/Pin.hh **** class Pin {
  14:src/MightyBoard/shared/Pin.hh **** private:
  15:src/MightyBoard/shared/Pin.hh **** 	uint8_t port_base;
  16:src/MightyBoard/shared/Pin.hh **** 	bool is_null;
  17:src/MightyBoard/shared/Pin.hh **** 	uint8_t pin_index;
  18:src/MightyBoard/shared/Pin.hh **** 	uint8_t pin_mask;
  19:src/MightyBoard/shared/Pin.hh **** 	uint8_t pin_mask_inverted;
  20:src/MightyBoard/shared/Pin.hh **** 
  21:src/MightyBoard/shared/Pin.hh **** public:
  22:src/MightyBoard/shared/Pin.hh **** 	Pin();
  23:src/MightyBoard/shared/Pin.hh **** 	Pin(const LPCPort& port_in, uint8_t pin_index_in);
  24:src/MightyBoard/shared/Pin.hh **** 	Pin(const Pin& other_pin);
  25:src/MightyBoard/shared/Pin.hh **** 	bool isNull() const;
  26:src/MightyBoard/shared/Pin.hh **** 	void setDirection(bool out) const;
  27:src/MightyBoard/shared/Pin.hh **** 	bool /*Pin::*/getValue() const {
  28:src/MightyBoard/shared/Pin.hh **** 		if (is_null)
  29:src/MightyBoard/shared/Pin.hh **** 			return false; // null pin is always low ... ?
  30:src/MightyBoard/shared/Pin.hh **** 		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
  31:src/MightyBoard/shared/Pin.hh **** //		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
  32:src/MightyBoard/shared/Pin.hh **** 	};
  33:src/MightyBoard/shared/Pin.hh **** 
  34:src/MightyBoard/shared/Pin.hh **** 	void /*Pin::*/setValue(bool on) const {
  35:src/MightyBoard/shared/Pin.hh **** 		if (is_null)
  36:src/MightyBoard/shared/Pin.hh **** 		 	return;
  37:src/MightyBoard/shared/Pin.hh **** 		// uint8_t oldSREG = SREG;
  38:src/MightyBoard/shared/Pin.hh **** 
  39:src/MightyBoard/shared/Pin.hh **** //		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
  40:src/MightyBoard/shared/Pin.hh **** 		// cli();
  41:src/MightyBoard/shared/Pin.hh **** 		if (on) {
  42:src/MightyBoard/shared/Pin.hh **** //			PORTx |= pin_mask;
  43:src/MightyBoard/shared/Pin.hh **** //			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
  44:src/MightyBoard/shared/Pin.hh **** 			GPIO_SetValue(port_base, _BV(pin_index));
  45:src/MightyBoard/shared/Pin.hh **** 		} else {
  46:src/MightyBoard/shared/Pin.hh **** //			PORTx &= pin_mask_inverted;
  47:src/MightyBoard/shared/Pin.hh **** //			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
  48:src/MightyBoard/shared/Pin.hh **** 			GPIO_ClearValue(port_base, _BV(pin_index));
  49:src/MightyBoard/shared/Pin.hh **** 		}
  50:src/MightyBoard/shared/Pin.hh **** 		// SREG = oldSREG;
  51:src/MightyBoard/shared/Pin.hh **** 	};
  52:src/MightyBoard/shared/Pin.hh **** 
  53:src/MightyBoard/shared/Pin.hh **** 	void /*Pin::*/setValueOn() const {
  54:src/MightyBoard/shared/Pin.hh **** 		if (is_null)
  55:src/MightyBoard/shared/Pin.hh **** 		 	return;
  56:src/MightyBoard/shared/Pin.hh **** 		// uint8_t oldSREG = SREG;
  57:src/MightyBoard/shared/Pin.hh **** 		// cli();
  58:src/MightyBoard/shared/Pin.hh **** //		PORTx |= pin_mask;
  59:src/MightyBoard/shared/Pin.hh **** 		GPIO_SetValue(port_base, _BV(pin_index));
  60:src/MightyBoard/shared/Pin.hh **** 		// SREG = oldSREG;
  61:src/MightyBoard/shared/Pin.hh **** 	};
  62:src/MightyBoard/shared/Pin.hh **** 
  63:src/MightyBoard/shared/Pin.hh **** 	void /*Pin::*/setValueOff() const {
  64:src/MightyBoard/shared/Pin.hh **** 		// if (is_null)
  65:src/MightyBoard/shared/Pin.hh **** 		// 	return;
  66:src/MightyBoard/shared/Pin.hh **** 		// uint8_t oldSREG = SREG;
  67:src/MightyBoard/shared/Pin.hh **** 		// cli();
  68:src/MightyBoard/shared/Pin.hh **** //		PORTx &= pin_mask_inverted;
  69:src/MightyBoard/shared/Pin.hh **** 		GPIO_ClearValue(port_base, _BV(pin_index));
  70:src/MightyBoard/shared/Pin.hh **** 		// SREG = oldSREG;
  71:src/MightyBoard/shared/Pin.hh **** 	};
  72:src/MightyBoard/shared/Pin.hh **** 	// currently not used:
  73:src/MightyBoard/shared/Pin.hh **** 	//const uint8_t getPinIndex() const { return pin_index; }
  74:src/MightyBoard/shared/Pin.hh **** };
  75:src/MightyBoard/shared/Pin.hh **** 
  76:src/MightyBoard/shared/Pin.hh **** static const Pin NullPin(NullPort, 0);
 3080              	 .loc 3 76 0
 3081 0066 40F20000 	 movw r0,#:lower16:.LANCHOR20
 3082 006a C0F20000 	 movt r0,#:upper16:.LANCHOR20
 3083 006e 2146     	 mov r1,r4
 3084 0070 4FF00002 	 mov r2,#0
 3085 0074 FFF7FEFF 	 bl _ZN3PinC1ERK7LPCPorth
 246:src/MightyBoard/Motherboard/Planner.cc **** 	Point position; // the current position (planning-wise, not bot/stepper-wise) in steps
 3086              	 .loc 1 246 0
 3087 0078 40F20000 	 movw r0,#:lower16:.LANCHOR10
 3088 007c C0F20000 	 movt r0,#:upper16:.LANCHOR10
 3089 0080 FFF7FEFF 	 bl _ZN5PointC1Ev
 3090 0084 40F20004 	 movw r4,#:lower16:.LANCHOR21
 3091 0088 C0F20004 	 movt r4,#:upper16:.LANCHOR21
 3092              	 .loc 1 982 0
 3093 008c 04F59865 	 add r5,r4,#1216
 3094              	.L143:
 3095              	.LVL241:
 3096              	.LBB400:
 3097              	.LBB401:
 3098              	.LBB402:
 3099              	 .file 4 "src/MightyBoard/Motherboard/Planner.hh"
   1:src/MightyBoard/Motherboard/Planner.hh **** /*
   2:src/MightyBoard/Motherboard/Planner.hh ****  *   Copyright 2011 by Rob Giseburt http://tinkerin.gs
   3:src/MightyBoard/Motherboard/Planner.hh ****  *   
   4:src/MightyBoard/Motherboard/Planner.hh ****  *   This program is free software: you can redistribute it and/or modify
   5:src/MightyBoard/Motherboard/Planner.hh ****  *   it under the terms of the GNU General Public License as published by
   6:src/MightyBoard/Motherboard/Planner.hh ****  *   the Free Software Foundation, either version 3 of the License, or
   7:src/MightyBoard/Motherboard/Planner.hh ****  *   (at your option) any later version.
   8:src/MightyBoard/Motherboard/Planner.hh ****  *   
   9:src/MightyBoard/Motherboard/Planner.hh ****  *   This program is distributed in the hope that it will be useful,
  10:src/MightyBoard/Motherboard/Planner.hh ****  *   but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:src/MightyBoard/Motherboard/Planner.hh ****  *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:src/MightyBoard/Motherboard/Planner.hh ****  *   GNU General Public License for more details.
  13:src/MightyBoard/Motherboard/Planner.hh ****  *   
  14:src/MightyBoard/Motherboard/Planner.hh ****  *   You should have received a copy of the GNU General Public License
  15:src/MightyBoard/Motherboard/Planner.hh ****  *   along with this program.  If not, see <http://www.gnu.org/licenses/>
  16:src/MightyBoard/Motherboard/Planner.hh ****  */
  17:src/MightyBoard/Motherboard/Planner.hh **** 
  18:src/MightyBoard/Motherboard/Planner.hh **** /*
  19:src/MightyBoard/Motherboard/Planner.hh ****  *   This is heavily influenced by the Marlin RepRap firmware
  20:src/MightyBoard/Motherboard/Planner.hh ****  *   (https://github.com/ErikZalm/Marlin) which is derived from
  21:src/MightyBoard/Motherboard/Planner.hh ****  *   the Grbl firmware (https://github.com/simen/grbl/tree).
  22:src/MightyBoard/Motherboard/Planner.hh ****  */
  23:src/MightyBoard/Motherboard/Planner.hh **** 
  24:src/MightyBoard/Motherboard/Planner.hh **** /* In this implenmentation, the motor control is handled by steppers, but this code does the planni
  25:src/MightyBoard/Motherboard/Planner.hh **** 
  26:src/MightyBoard/Motherboard/Planner.hh **** #ifndef PLANNER_HH
  27:src/MightyBoard/Motherboard/Planner.hh **** #define PLANNER_HH
  28:src/MightyBoard/Motherboard/Planner.hh **** 
  29:src/MightyBoard/Motherboard/Planner.hh **** #include "Types.hh"
  30:src/MightyBoard/Motherboard/Planner.hh **** #include "Configuration.hh"
  31:src/MightyBoard/Motherboard/Planner.hh **** #include "Point.hh"
  32:src/MightyBoard/Motherboard/Planner.hh **** 
  33:src/MightyBoard/Motherboard/Planner.hh **** // The number of movements we can plan ahead at a time
  34:src/MightyBoard/Motherboard/Planner.hh **** // THIS MUST BE A POWER OF 2! 4, 8, 16, 32, you get the idea...
  35:src/MightyBoard/Motherboard/Planner.hh **** // this is because the circular buffer implementation uses bit shifting for size and increment oper
  36:src/MightyBoard/Motherboard/Planner.hh **** #define BLOCK_BUFFER_SIZE 16
  37:src/MightyBoard/Motherboard/Planner.hh **** 
  38:src/MightyBoard/Motherboard/Planner.hh **** 
  39:src/MightyBoard/Motherboard/Planner.hh **** //TODO: remove TICKS_PER_ACCELERATION
  40:src/MightyBoard/Motherboard/Planner.hh **** #define TICKS_PER_ACCELERATION   1  // lower is better
  41:src/MightyBoard/Motherboard/Planner.hh **** const int32_t ACCELERATION_TICKS_PER_SECOND  = (1000000/(INTERVAL_IN_MICROSECONDS*TICKS_PER_ACCELER
  42:src/MightyBoard/Motherboard/Planner.hh **** 
  43:src/MightyBoard/Motherboard/Planner.hh **** // Give the processor some time to breathe and plan...
  44:src/MightyBoard/Motherboard/Planner.hh **** //#define MIN_MS_PER_SEGMENT_SD 10000
  45:src/MightyBoard/Motherboard/Planner.hh **** #define MIN_MS_PER_SEGMENT 10000
  46:src/MightyBoard/Motherboard/Planner.hh **** 
  47:src/MightyBoard/Motherboard/Planner.hh **** enum axes{ 
  48:src/MightyBoard/Motherboard/Planner.hh **** 	X_AXIS = 0,
  49:src/MightyBoard/Motherboard/Planner.hh **** 	Y_AXIS = 1,
  50:src/MightyBoard/Motherboard/Planner.hh **** 	Z_AXIS = 2,
  51:src/MightyBoard/Motherboard/Planner.hh **** 	A_AXIS = 3,
  52:src/MightyBoard/Motherboard/Planner.hh **** 	B_AXIS = 4
  53:src/MightyBoard/Motherboard/Planner.hh **** };
  54:src/MightyBoard/Motherboard/Planner.hh **** 
  55:src/MightyBoard/Motherboard/Planner.hh **** namespace planner {
  56:src/MightyBoard/Motherboard/Planner.hh **** 	// This struct is used when buffering the setup for each linear movement "nominal" values are as s
  57:src/MightyBoard/Motherboard/Planner.hh **** 	// the source g-code and may never actually be reached if acceleration management is active.
  58:src/MightyBoard/Motherboard/Planner.hh **** 	class Block {
  59:src/MightyBoard/Motherboard/Planner.hh **** 	public:
  60:src/MightyBoard/Motherboard/Planner.hh **** 		typedef enum {
  61:src/MightyBoard/Motherboard/Planner.hh **** 			Busy            = 1<<0,
  62:src/MightyBoard/Motherboard/Planner.hh **** 			Recalculate     = 1<<1,
  63:src/MightyBoard/Motherboard/Planner.hh **** 			NominalLength   = 1<<2,
  64:src/MightyBoard/Motherboard/Planner.hh **** 			PlannedToStop   = 1<<3,
  65:src/MightyBoard/Motherboard/Planner.hh **** 			PlannedFromStop = 1<<4,
  66:src/MightyBoard/Motherboard/Planner.hh **** 			Locked          = 1<<5,
  67:src/MightyBoard/Motherboard/Planner.hh **** 		} PlannerFlags;
  68:src/MightyBoard/Motherboard/Planner.hh **** 
  69:src/MightyBoard/Motherboard/Planner.hh **** 		// Fields used by the bresenham algorithm for tracing the line
  70:src/MightyBoard/Motherboard/Planner.hh **** 		Point target;                        // Final 5-axis target
  71:src/MightyBoard/Motherboard/Planner.hh **** 		uint16_t step_event_count;           // The number of step events required to complete this block
  72:src/MightyBoard/Motherboard/Planner.hh **** 		uint16_t accelerate_until;            // The index of the step event on which to stop acceleratio
  73:src/MightyBoard/Motherboard/Planner.hh **** 		uint16_t decelerate_after;            // The index of the step event on which to start decelerati
  74:src/MightyBoard/Motherboard/Planner.hh **** 		int32_t acceleration_rate;           // The acceleration rate used for acceleration calculation
  75:src/MightyBoard/Motherboard/Planner.hh **** 		
  76:src/MightyBoard/Motherboard/Planner.hh **** 
  77:src/MightyBoard/Motherboard/Planner.hh **** 		// Fields used by the motion planner to manage acceleration
  78:src/MightyBoard/Motherboard/Planner.hh **** 		float nominal_speed;                               // The nominal speed for this block in mm/min 
  79:src/MightyBoard/Motherboard/Planner.hh **** 		float entry_speed;                                 // Entry speed at previous-current junction in
  80:src/MightyBoard/Motherboard/Planner.hh **** 		float max_entry_speed;                             // Maximum allowable junction entry speed in m
  81:src/MightyBoard/Motherboard/Planner.hh **** 		float millimeters;                                 // The total travel of this block in mm
  82:src/MightyBoard/Motherboard/Planner.hh **** 		float acceleration;                                // acceleration mm/sec^2
  83:src/MightyBoard/Motherboard/Planner.hh **** 		float stop_speed;                            // Speed to decelerate to if this is the last move
  84:src/MightyBoard/Motherboard/Planner.hh **** 
  85:src/MightyBoard/Motherboard/Planner.hh **** 		// Settings for the trapezoid generator
  86:src/MightyBoard/Motherboard/Planner.hh **** 		uint32_t nominal_rate;                        // The nominal step rate for this block in step_eve
  87:src/MightyBoard/Motherboard/Planner.hh **** 		uint32_t initial_rate;                        // The jerk-adjusted step rate at start of block  
  88:src/MightyBoard/Motherboard/Planner.hh **** 		uint32_t final_rate;                          // The minimal rate at exit
  89:src/MightyBoard/Motherboard/Planner.hh **** 		uint32_t acceleration_st;                     // acceleration steps/sec^2
  90:src/MightyBoard/Motherboard/Planner.hh **** 		uint8_t flags;
  91:src/MightyBoard/Motherboard/Planner.hh **** 		
  92:src/MightyBoard/Motherboard/Planner.hh **** 		Block() : target() {};
 3100              	 .loc 4 92 0
 3101 0090 2046     	 mov r0,r4
 3102 0092 FFF7FEFF 	 bl _ZN5PointC1Ev
 3103 0096 04F14C04 	 add r4,r4,#76
 3104              	.LVL242:
 3105              	.LBE402:
 3106              	.LBE401:
 3107              	.LBE400:
 256:src/MightyBoard/Motherboard/Planner.cc **** 	Block block_buffer_data[BLOCK_BUFFER_SIZE];
 3108              	 .loc 1 256 0
 3109 009a AC42     	 cmp r4,r5
 3110 009c F8D1     	 bne .L143
 3111              	.LVL243:
 3112              	.LBB403:
 3113              	.LBB404:
 3114              	.LBB405:
 153:src/MightyBoard/Motherboard/Planner.cc **** 		ReusingCircularBufferTempl(BufSizeType size_in, BufDataType* buffer_in) : head(0), tail(0), /*ful
 3115              	 .loc 1 153 0
 3116 009e 40F20003 	 movw r3,#:lower16:.LANCHOR4
 3117 00a2 C0F20003 	 movt r3,#:upper16:.LANCHOR4
 3118 00a6 4FF00002 	 mov r2,#0
 3119 00aa 1A70     	 strb r2,[r3,#0]
 3120 00ac 5A70     	 strb r2,[r3,#1]
 3121 00ae 4FF01002 	 mov r2,#16
 3122 00b2 9A70     	 strb r2,[r3,#2]
 3123 00b4 4FF00F02 	 mov r2,#15
 3124 00b8 DA70     	 strb r2,[r3,#3]
 3125 00ba 40F20002 	 movw r2,#:lower16:.LANCHOR21
 3126 00be C0F20002 	 movt r2,#:upper16:.LANCHOR21
 3127 00c2 5A60     	 str r2,[r3,#4]
 3128              	.LVL244:
 3129              	.LBB406:
 154:src/MightyBoard/Motherboard/Planner.cc **** 			for (BufSizeType i = 0; i < size; i++) {
 3130              	 .loc 1 154 0
 3131 00c4 4FF00004 	 mov r4,#0
 3132              	.LVL245:
 155:src/MightyBoard/Motherboard/Planner.cc **** 				data[i] = BufDataType();
 3133              	 .loc 1 155 0
 3134 00c8 1E46     	 mov r6,r3
 3135 00ca 4FF04C07 	 mov r7,#76
 3136              	.LVL246:
 3137              	.L146:
 3138 00ce 7568     	 ldr r5,[r6,#4]
 3139 00d0 07FB0455 	 mla r5,r7,r4,r5
 3140              	.LVL247:
 3141              	.LBB407:
 3142              	.LBB408:
 3143              	.LBB409:
 3144              	 .loc 4 92 0
 3145 00d4 01A8     	 add r0,sp,#4
 3146 00d6 FFF7FEFF 	 bl _ZN5PointC1Ev
 3147              	.LBE409:
 3148              	.LBE408:
 3149              	.LBE407:
 155:src/MightyBoard/Motherboard/Planner.cc **** 				data[i] = BufDataType();
 3150              	 .loc 1 155 0
 3151 00da 2846     	 mov r0,r5
 3152 00dc 01A9     	 add r1,sp,#4
 3153 00de 4FF04902 	 mov r2,#73
 3154 00e2 FFF7FEFF 	 bl memcpy
 154:src/MightyBoard/Motherboard/Planner.cc **** 			for (BufSizeType i = 0; i < size; i++) {
 3155              	 .loc 1 154 0
 3156 00e6 04F10104 	 add r4,r4,#1
 3157 00ea E4B2     	 uxtb r4,r4
 3158              	.LVL248:
 3159 00ec B378     	 ldrb r3,[r6,#2]
 3160 00ee A342     	 cmp r3,r4
 3161 00f0 EDD8     	 bhi .L146
 3162              	.LBE406:
 3163              	.LBE405:
 3164              	.LBE404:
 3165              	.LBE403:
 261:src/MightyBoard/Motherboard/Planner.cc **** 	Point tolerance_offset_T0;
 3166              	 .loc 1 261 0
 3167 00f2 40F20000 	 movw r0,#:lower16:.LANCHOR12
 3168 00f6 C0F20000 	 movt r0,#:upper16:.LANCHOR12
 3169 00fa FFF7FEFF 	 bl _ZN5PointC1Ev
 262:src/MightyBoard/Motherboard/Planner.cc **** 	Point tolerance_offset_T1;
 3170              	 .loc 1 262 0
 3171 00fe 40F20000 	 movw r0,#:lower16:.LANCHOR11
 3172 0102 C0F20000 	 movt r0,#:upper16:.LANCHOR11
 3173 0106 FFF7FEFF 	 bl _ZN5PointC1Ev
 3174              	.LBE399:
 3175              	.LBE398:
 3176              	 .loc 1 982 0
 3177 010a 15B0     	 add sp,sp,#84
 3178 010c F0BD     	 pop {r4,r5,r6,r7,pc}
 3179              	 .cfi_endproc
 3180              	.LFE180:
 3182 010e 00BF     	 .section .init_array,"aw",%init_array
 3183              	 .align 2
 3184 0000 00000000 	 .word _GLOBAL__sub_I__ZN7planner4axesE(target1)
 3185              	 .global _ZN7planner25force_replan_from_stoppedE
 3186              	 .global _ZN7planner25additional_ms_per_segmentE
 3187              	 .global _ZN7planner12tool_offsetsE
 3188              	 .global _ZN7planner19tolerance_offset_T1E
 3189              	 .global _ZN7planner19tolerance_offset_T0E
 3190              	 .global _ZN7planner14accelerationONE
 3191              	 .global _ZN7planner12block_bufferE
 3192              	 .global _ZN7planner17block_buffer_dataE
 3193              	 .global _ZN7planner22previous_nominal_speedE
 3194              	 .global _ZN7planner14previous_speedE
 3195              	 .global _ZN7planner8positionE
 3196              	 .global _ZN7planner21minimum_planner_speedE
 3197              	 .global _ZN7planner20default_accelerationE
 3198              	 .global _ZN7planner4axesE
 3199              	 .section .bss._ZN7planner12tool_offsetsE,"aw",%nobits
 3200              	 .align 2
 3201              	 .set .LANCHOR9,.+0
 3204              	_ZN7planner12tool_offsetsE:
 3205 0000 00000000 	 .space 4
 3206              	 .section .bss._ZN7planner21minimum_planner_speedE,"aw",%nobits
 3207              	 .align 2
 3208              	 .set .LANCHOR6,.+0
 3211              	_ZN7planner21minimum_planner_speedE:
 3212 0000 00000000 	 .space 4
 3213              	 .section .bss._ZL5Port0,"aw",%nobits
 3214              	 .align 2
 3215              	 .set .LANCHOR14,.+0
 3218              	_ZL5Port0:
 3219 0000 00       	 .space 1
 3220 0001 000000   	 .section .bss._ZL5Port1,"aw",%nobits
 3221              	 .align 2
 3222              	 .set .LANCHOR15,.+0
 3225              	_ZL5Port1:
 3226 0000 00       	 .space 1
 3227 0001 000000   	 .section .bss._ZL5Port2,"aw",%nobits
 3228              	 .align 2
 3229              	 .set .LANCHOR16,.+0
 3232              	_ZL5Port2:
 3233 0000 00       	 .space 1
 3234 0001 000000   	 .section .bss._ZN7plannerL11max_xy_jerkE,"aw",%nobits
 3235              	 .align 2
 3236              	 .set .LANCHOR2,.+0
 3239              	_ZN7plannerL11max_xy_jerkE:
 3240 0000 00000000 	 .space 4
 3241              	 .section .bss._ZN7planner25additional_ms_per_segmentE,"aw",%nobits
 3242              	 .align 2
 3243              	 .set .LANCHOR13,.+0
 3246              	_ZN7planner25additional_ms_per_segmentE:
 3247 0000 00000000 	 .space 4
 3248              	 .section .bss._ZL5Port3,"aw",%nobits
 3249              	 .align 2
 3250              	 .set .LANCHOR17,.+0
 3253              	_ZL5Port3:
 3254 0000 00       	 .space 1
 3255 0001 000000   	 .section .bss._ZN7planner20default_accelerationE,"aw",%nobits
 3256              	 .align 2
 3257              	 .set .LANCHOR3,.+0
 3260              	_ZN7planner20default_accelerationE:
 3261 0000 00000000 	 .space 4
 3262              	 .section .bss._ZN7planner17block_buffer_dataE,"aw",%nobits
 3263              	 .align 2
 3264              	 .set .LANCHOR21,.+0
 3267              	_ZN7planner17block_buffer_dataE:
 3268 0000 00000000 	 .space 1216
 3268      00000000 
 3268      00000000 
 3268      00000000 
 3268      00000000 
 3269              	 .section .bss._ZN7planner19tolerance_offset_T0E,"aw",%nobits
 3270              	 .align 2
 3271              	 .set .LANCHOR12,.+0
 3274              	_ZN7planner19tolerance_offset_T0E:
 3275 0000 00000000 	 .space 20
 3275      00000000 
 3275      00000000 
 3275      00000000 
 3275      00000000 
 3276              	 .section .bss._ZL5Port4,"aw",%nobits
 3277              	 .align 2
 3278              	 .set .LANCHOR18,.+0
 3281              	_ZL5Port4:
 3282 0000 00       	 .space 1
 3283 0001 000000   	 .section .bss._ZN7planner4axesE,"aw",%nobits
 3284              	 .align 2
 3285              	 .set .LANCHOR1,.+0
 3288              	_ZN7planner4axesE:
 3289 0000 00000000 	 .space 80
 3289      00000000 
 3289      00000000 
 3289      00000000 
 3289      00000000 
 3290              	 .section .bss._ZL7NullPin,"aw",%nobits
 3291              	 .align 2
 3292              	 .set .LANCHOR20,.+0
 3295              	_ZL7NullPin:
 3296 0000 00000000 	 .space 5
 3296      00
 3297 0005 000000   	 .section .bss._ZL8NullPort,"aw",%nobits
 3298              	 .align 2
 3299              	 .set .LANCHOR19,.+0
 3302              	_ZL8NullPort:
 3303 0000 00       	 .space 1
 3304 0001 000000   	 .section .bss._ZN7planner8positionE,"aw",%nobits
 3305              	 .align 2
 3306              	 .set .LANCHOR10,.+0
 3309              	_ZN7planner8positionE:
 3310 0000 00000000 	 .space 20
 3310      00000000 
 3310      00000000 
 3310      00000000 
 3310      00000000 
 3311              	 .section .bss._ZN7planner19tolerance_offset_T1E,"aw",%nobits
 3312              	 .align 2
 3313              	 .set .LANCHOR11,.+0
 3316              	_ZN7planner19tolerance_offset_T1E:
 3317 0000 00000000 	 .space 20
 3317      00000000 
 3317      00000000 
 3317      00000000 
 3317      00000000 
 3318              	 .section .rodata.str1.4,"aMS",%progbits,1
 3319              	 .align 2
 3320              	.LC0:
 3321 0000 706C616E 	 .ascii "planner::init (%s:%d)\012\000"
 3321      6E65723A 
 3321      3A696E69 
 3321      74202825 
 3321      733A2564 
 3322 0017 00       	 .space 1
 3323              	.LC1:
 3324 0018 7372632F 	 .ascii "src/MightyBoard/Motherboard/Planner.cc\000"
 3324      4D696768 
 3324      7479426F 
 3324      6172642F 
 3324      4D6F7468 
 3325 003f 00       	 .section .bss._ZN7planner22previous_nominal_speedE,"aw",%nobits
 3326              	 .align 2
 3327              	 .set .LANCHOR7,.+0
 3330              	_ZN7planner22previous_nominal_speedE:
 3331 0000 00000000 	 .space 4
 3332              	 .section .bss._ZN7planner12block_bufferE,"aw",%nobits
 3333              	 .align 2
 3334              	 .set .LANCHOR4,.+0
 3337              	_ZN7planner12block_bufferE:
 3338 0000 00000000 	 .space 8
 3338      00000000 
 3339              	 .section .data._ZN7planner14accelerationONE,"aw",%progbits
 3340              	 .set .LANCHOR0,.+0
 3343              	_ZN7planner14accelerationONE:
 3344 0000 01       	 .byte 1
 3345              	 .section .bss._ZN7planner25force_replan_from_stoppedE,"aw",%nobits
 3346              	 .set .LANCHOR5,.+0
 3349              	_ZN7planner25force_replan_from_stoppedE:
 3350 0000 00       	 .space 1
 3351              	 .section .bss._ZN7planner14previous_speedE,"aw",%nobits
 3352              	 .align 2
 3353              	 .set .LANCHOR8,.+0
 3356              	_ZN7planner14previous_speedE:
 3357 0000 00000000 	 .space 16
 3357      00000000 
 3357      00000000 
 3357      00000000 
 3358              	 .text
 3359              	.Letext0:
 3360              	 .file 5 "c:\\program files\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/arm-none-eabi/4.6.3/../../../../arm-none-eabi/include/stdint.h"
 3361              	 .file 6 "src/MightyBoard/Motherboard/Point.hh"
 3362              	 .file 7 "src/MightyBoard/shared/Packet.hh"
 3363              	 .file 8 "src/MightyBoard/Motherboard/SDCard.hh"
 3364              	 .file 9 "src/MightyBoard/shared/TemperatureSensor.hh"
 3365              	 .file 10 "src/MightyBoard/shared/HeatingElement.hh"
 3366              	 .file 11 "src/MightyBoard/Motherboard/EepromMap.hh"
 3367              	 .file 12 "src/MightyBoard/Motherboard/system/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 Planner.cc
    {standard input}:19     .text._ZN7planner17setAccelerationOnEb:00000000 $t
    {standard input}:24     .text._ZN7planner17setAccelerationOnEb:00000000 _ZN7planner17setAccelerationOnEb
    {standard input}:3340   .data._ZN7planner14accelerationONE:00000000 .LANCHOR0
    {standard input}:43     .text._ZN7planner14setMaxAxisJerkEfh:00000000 $t
    {standard input}:48     .text._ZN7planner14setMaxAxisJerkEfh:00000000 _ZN7planner14setMaxAxisJerkEfh
    {standard input}:3285   .bss._ZN7planner4axesE:00000000 .LANCHOR1
    {standard input}:72     .text._ZN7planner16setAxisMaxLengthElhb:00000000 $t
    {standard input}:77     .text._ZN7planner16setAxisMaxLengthElhb:00000000 _ZN7planner16setAxisMaxLengthElhb
    {standard input}:113    .text._ZN7planner12setMaxXYJerkEf:00000000 $t
    {standard input}:118    .text._ZN7planner12setMaxXYJerkEf:00000000 _ZN7planner12setMaxXYJerkEf
    {standard input}:3236   .bss._ZN7plannerL11max_xy_jerkE:00000000 .LANCHOR2
    {standard input}:136    .text._ZN7planner17setAxisStepsPerMMEfh:00000000 $t
    {standard input}:141    .text._ZN7planner17setAxisStepsPerMMEfh:00000000 _ZN7planner17setAxisStepsPerMMEfh
    {standard input}:164    .text._ZN7planner15setAccelerationEl:00000000 $t
    {standard input}:169    .text._ZN7planner15setAccelerationEl:00000000 _ZN7planner15setAccelerationEl
    {standard input}:3257   .bss._ZN7planner20default_accelerationE:00000000 .LANCHOR3
    {standard input}:195    .text._ZN7planner19setAxisAccelerationElh:00000000 $t
    {standard input}:200    .text._ZN7planner19setAxisAccelerationElh:00000000 _ZN7planner19setAxisAccelerationElh
    {standard input}:240    .text._ZN7planner5Block19calculate_trapezoidERKf:00000000 $t
    {standard input}:245    .text._ZN7planner5Block19calculate_trapezoidERKf:00000000 _ZN7planner5Block19calculate_trapezoidERKf
    {standard input}:432    .text._ZN7planner20planner_reverse_passEv:00000000 $t
    {standard input}:437    .text._ZN7planner20planner_reverse_passEv:00000000 _ZN7planner20planner_reverse_passEv
    {standard input}:3334   .bss._ZN7planner12block_bufferE:00000000 .LANCHOR4
    {standard input}:648    .text._ZN7planner20planner_forward_passEv:00000000 $t
    {standard input}:653    .text._ZN7planner20planner_forward_passEv:00000000 _ZN7planner20planner_forward_passEv
    {standard input}:955    .text._ZN7planner30planner_recalculate_trapezoidsEv:00000000 $t
    {standard input}:960    .text._ZN7planner30planner_recalculate_trapezoidsEv:00000000 _ZN7planner30planner_recalculate_trapezoidsEv
    {standard input}:1113   .text._ZN7planner19planner_recalculateEv:00000000 $t
    {standard input}:1118   .text._ZN7planner19planner_recalculateEv:00000000 _ZN7planner19planner_recalculateEv
    {standard input}:1141   .text._ZN7planner12isBufferFullEv:00000000 $t
    {standard input}:1146   .text._ZN7planner12isBufferFullEv:00000000 _ZN7planner12isBufferFullEv
    {standard input}:1185   .text._ZN7planner13isBufferEmptyEv:00000000 $t
    {standard input}:1190   .text._ZN7planner13isBufferEmptyEv:00000000 _ZN7planner13isBufferEmptyEv
    {standard input}:1219   .text._ZN7planner7isReadyEv:00000000 $t
    {standard input}:1224   .text._ZN7planner7isReadyEv:00000000 _ZN7planner7isReadyEv
    {standard input}:3346   .bss._ZN7planner25force_replan_from_stoppedE:00000000 .LANCHOR5
    {standard input}:1261   .text._ZN7planner11bufferCountEv:00000000 $t
    {standard input}:1266   .text._ZN7planner11bufferCountEv:00000000 _ZN7planner11bufferCountEv
    {standard input}:1294   .text._ZN7planner12getNextBlockEv:00000000 $t
    {standard input}:1299   .text._ZN7planner12getNextBlockEv:00000000 _ZN7planner12getNextBlockEv
    {standard input}:1326   .text._ZN7planner17doneWithNextBlockEv:00000000 $t
    {standard input}:1331   .text._ZN7planner17doneWithNextBlockEv:00000000 _ZN7planner17doneWithNextBlockEv
    {standard input}:1369   .text._ZN7planner12planNextMoveER5PointlRKS0_:00000000 $t
    {standard input}:1374   .text._ZN7planner12planNextMoveER5PointlRKS0_:00000000 _ZN7planner12planNextMoveER5PointlRKS0_
    {standard input}:3208   .bss._ZN7planner21minimum_planner_speedE:00000000 .LANCHOR6
    {standard input}:3327   .bss._ZN7planner22previous_nominal_speedE:00000000 .LANCHOR7
    {standard input}:3353   .bss._ZN7planner14previous_speedE:00000000 .LANCHOR8
    {standard input}:2198   .text._ZN7planner15addMoveToBufferERK5PointRKl:00000000 $t
    {standard input}:2203   .text._ZN7planner15addMoveToBufferERK5PointRKl:00000000 _ZN7planner15addMoveToBufferERK5PointRKl
    {standard input}:3201   .bss._ZN7planner12tool_offsetsE:00000000 .LANCHOR9
    {standard input}:3306   .bss._ZN7planner8positionE:00000000 .LANCHOR10
    {standard input}:2291   .text._ZN7planner23addMoveToBufferRelativeERK5PointRKla:00000000 $t
    {standard input}:2296   .text._ZN7planner23addMoveToBufferRelativeERK5PointRKla:00000000 _ZN7planner23addMoveToBufferRelativeERK5PointRKla
    {standard input}:2492   .text._ZN7planner15changeToolIndexEh:00000000 $t
    {standard input}:2497   .text._ZN7planner15changeToolIndexEh:00000000 _ZN7planner15changeToolIndexEh
    {standard input}:3271   .bss._ZN7planner19tolerance_offset_T0E:00000000 .LANCHOR12
    {standard input}:3313   .bss._ZN7planner19tolerance_offset_T1E:00000000 .LANCHOR11
    {standard input}:2523   .text._ZN7planner5abortEv:00000000 $t
    {standard input}:2528   .text._ZN7planner5abortEv:00000000 _ZN7planner5abortEv
    {standard input}:3243   .bss._ZN7planner25additional_ms_per_segmentE:00000000 .LANCHOR13
    {standard input}:2708   .text._ZN7planner4initEv:00000000 $t
    {standard input}:2713   .text._ZN7planner4initEv:00000000 _ZN7planner4initEv
    {standard input}:3320   .rodata.str1.4:00000000 .LC0
    {standard input}:2899   .text._ZN7planner4initEv:000001f4 $d
    {standard input}:2904   .text._ZN7planner14definePositionERK5Point:00000000 $t
    {standard input}:2909   .text._ZN7planner14definePositionERK5Point:00000000 _ZN7planner14definePositionERK5Point
    {standard input}:2985   .text._ZN7planner11getPositionEv:00000000 $t
    {standard input}:2990   .text._ZN7planner11getPositionEv:00000000 _ZN7planner11getPositionEv
    {standard input}:3023   .text._GLOBAL__sub_I__ZN7planner4axesE:00000000 $t
    {standard input}:3027   .text._GLOBAL__sub_I__ZN7planner4axesE:00000000 _GLOBAL__sub_I__ZN7planner4axesE
    {standard input}:3215   .bss._ZL5Port0:00000000 .LANCHOR14
    {standard input}:3222   .bss._ZL5Port1:00000000 .LANCHOR15
    {standard input}:3229   .bss._ZL5Port2:00000000 .LANCHOR16
    {standard input}:3250   .bss._ZL5Port3:00000000 .LANCHOR17
    {standard input}:3278   .bss._ZL5Port4:00000000 .LANCHOR18
    {standard input}:3299   .bss._ZL8NullPort:00000000 .LANCHOR19
    {standard input}:3292   .bss._ZL7NullPin:00000000 .LANCHOR20
    {standard input}:3264   .bss._ZN7planner17block_buffer_dataE:00000000 .LANCHOR21
    {standard input}:3183   .init_array:00000000 $d
    {standard input}:3349   .bss._ZN7planner25force_replan_from_stoppedE:00000000 _ZN7planner25force_replan_from_stoppedE
    {standard input}:3246   .bss._ZN7planner25additional_ms_per_segmentE:00000000 _ZN7planner25additional_ms_per_segmentE
    {standard input}:3204   .bss._ZN7planner12tool_offsetsE:00000000 _ZN7planner12tool_offsetsE
    {standard input}:3316   .bss._ZN7planner19tolerance_offset_T1E:00000000 _ZN7planner19tolerance_offset_T1E
    {standard input}:3274   .bss._ZN7planner19tolerance_offset_T0E:00000000 _ZN7planner19tolerance_offset_T0E
    {standard input}:3343   .data._ZN7planner14accelerationONE:00000000 _ZN7planner14accelerationONE
    {standard input}:3337   .bss._ZN7planner12block_bufferE:00000000 _ZN7planner12block_bufferE
    {standard input}:3267   .bss._ZN7planner17block_buffer_dataE:00000000 _ZN7planner17block_buffer_dataE
    {standard input}:3330   .bss._ZN7planner22previous_nominal_speedE:00000000 _ZN7planner22previous_nominal_speedE
    {standard input}:3356   .bss._ZN7planner14previous_speedE:00000000 _ZN7planner14previous_speedE
    {standard input}:3309   .bss._ZN7planner8positionE:00000000 _ZN7planner8positionE
    {standard input}:3211   .bss._ZN7planner21minimum_planner_speedE:00000000 _ZN7planner21minimum_planner_speedE
    {standard input}:3260   .bss._ZN7planner20default_accelerationE:00000000 _ZN7planner20default_accelerationE
    {standard input}:3288   .bss._ZN7planner4axesE:00000000 _ZN7planner4axesE
    {standard input}:3200   .bss._ZN7planner12tool_offsetsE:00000000 $d
    {standard input}:3207   .bss._ZN7planner21minimum_planner_speedE:00000000 $d
    {standard input}:3214   .bss._ZL5Port0:00000000 $d
    {standard input}:3218   .bss._ZL5Port0:00000000 _ZL5Port0
    {standard input}:3221   .bss._ZL5Port1:00000000 $d
    {standard input}:3225   .bss._ZL5Port1:00000000 _ZL5Port1
    {standard input}:3228   .bss._ZL5Port2:00000000 $d
    {standard input}:3232   .bss._ZL5Port2:00000000 _ZL5Port2
    {standard input}:3235   .bss._ZN7plannerL11max_xy_jerkE:00000000 $d
    {standard input}:3239   .bss._ZN7plannerL11max_xy_jerkE:00000000 _ZN7plannerL11max_xy_jerkE
    {standard input}:3242   .bss._ZN7planner25additional_ms_per_segmentE:00000000 $d
    {standard input}:3249   .bss._ZL5Port3:00000000 $d
    {standard input}:3253   .bss._ZL5Port3:00000000 _ZL5Port3
    {standard input}:3256   .bss._ZN7planner20default_accelerationE:00000000 $d
    {standard input}:3263   .bss._ZN7planner17block_buffer_dataE:00000000 $d
    {standard input}:3270   .bss._ZN7planner19tolerance_offset_T0E:00000000 $d
    {standard input}:3277   .bss._ZL5Port4:00000000 $d
    {standard input}:3281   .bss._ZL5Port4:00000000 _ZL5Port4
    {standard input}:3284   .bss._ZN7planner4axesE:00000000 $d
    {standard input}:3291   .bss._ZL7NullPin:00000000 $d
    {standard input}:3295   .bss._ZL7NullPin:00000000 _ZL7NullPin
    {standard input}:3298   .bss._ZL8NullPort:00000000 $d
    {standard input}:3302   .bss._ZL8NullPort:00000000 _ZL8NullPort
    {standard input}:3305   .bss._ZN7planner8positionE:00000000 $d
    {standard input}:3312   .bss._ZN7planner19tolerance_offset_T1E:00000000 $d
    {standard input}:3319   .rodata.str1.4:00000000 $d
    {standard input}:3323   .rodata.str1.4:00000018 .LC1
    {standard input}:3326   .bss._ZN7planner22previous_nominal_speedE:00000000 $d
    {standard input}:3333   .bss._ZN7planner12block_bufferE:00000000 $d
    {standard input}:3350   .bss._ZN7planner25force_replan_from_stoppedE:00000000 $d
    {standard input}:3352   .bss._ZN7planner14previous_speedE:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_i2f
__aeabi_fmul
__aeabi_f2uiz
__aeabi_ui2f
__aeabi_fdiv
__aeabi_f2d
__aeabi_d2uiz
ceil
__aeabi_fcmpeq
__aeabi_fcmpge
__aeabi_dadd
__aeabi_dmul
__aeabi_dsub
__aeabi_d2f
__aeabi_fcmpgt
sqrt
__aeabi_fcmple
__aeabi_fadd
__aeabi_fsub
__aeabi_fcmplt
_ZNK5PointixEj
_ZN8steppers12startRunningEv
_ZN6sdcard9isPlayingEv
_ZN5PointC1Ev
_ZplRK5PointS1_
_ZN5PointixEj
_ZmiRK5PointS1_
_ZN8steppers5abortEv
_ZN8steppers11getPositionEv
_ZN6eeprom11getEeprom32Etm
_ZN6eeprom10getEeprom8Eth
xprintf
_ZN6eeprom30storeToolheadToleranceDefaultsEv
_ZN6eeprom23setDefaultsAccelerationEv
_ZN6eeprom11getEeprom16Ett
_ZN8steppers14definePositionERK5Point
_ZN7LPCPortC1Eh
_ZN3PinC1ERK7LPCPorth
memcpy
