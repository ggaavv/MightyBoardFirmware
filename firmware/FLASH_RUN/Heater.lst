   1              	 .syntax unified
   2              	 .cpu cortex-m3
   3              	 .fpu softvfp
   4              	 .eabi_attribute 20,1
   5              	 .eabi_attribute 21,1
   6              	 .eabi_attribute 23,3
   7              	 .eabi_attribute 24,1
   8              	 .eabi_attribute 25,1
   9              	 .eabi_attribute 26,1
  10              	 .eabi_attribute 30,1
  11              	 .eabi_attribute 34,1
  12              	 .eabi_attribute 18,4
  13              	 .thumb
  14              	 .file "Heater.cc"
  15              	 .text
  16              	.Ltext0:
  17              	 .cfi_sections .debug_frame
  18              	 .global __aeabi_fcmpeq
  19              	 .section .text._ZN6Heater5resetEv,"ax",%progbits
  20              	 .align 2
  21              	 .global _ZN6Heater5resetEv
  22              	 .thumb
  23              	 .thumb_func
  25              	_ZN6Heater5resetEv:
  26              	.LFB104:
  27              	 .file 1 "src/MightyBoard/shared/Heater.cc"
   1:src/MightyBoard/shared/Heater.cc **** /*
   2:src/MightyBoard/shared/Heater.cc ****  * Copyright 2010 by Adam Mayer	 <adam@makerbot.com>
   3:src/MightyBoard/shared/Heater.cc ****  *
   4:src/MightyBoard/shared/Heater.cc ****  * This program is free software: you can redistribute it and/or modify
   5:src/MightyBoard/shared/Heater.cc ****  * it under the terms of the GNU General Public License as published by
   6:src/MightyBoard/shared/Heater.cc ****  * the Free Software Foundation, either version 3 of the License, or
   7:src/MightyBoard/shared/Heater.cc ****  * (at your option) any later version.
   8:src/MightyBoard/shared/Heater.cc ****  *
   9:src/MightyBoard/shared/Heater.cc ****  * This program is distributed in the hope that it will be useful,
  10:src/MightyBoard/shared/Heater.cc ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:src/MightyBoard/shared/Heater.cc ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:src/MightyBoard/shared/Heater.cc ****  * GNU General Public License for more details.
  13:src/MightyBoard/shared/Heater.cc ****  *
  14:src/MightyBoard/shared/Heater.cc ****  * You should have received a copy of the GNU General Public License
  15:src/MightyBoard/shared/Heater.cc ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>
  16:src/MightyBoard/shared/Heater.cc ****  */
  17:src/MightyBoard/shared/Heater.cc **** 
  18:src/MightyBoard/shared/Heater.cc **** #include "Configuration.hh"
  19:src/MightyBoard/shared/Heater.cc **** #include "Heater.hh"
  20:src/MightyBoard/shared/Heater.cc **** #include "HeatingElement.hh"
  21:src/MightyBoard/shared/Heater.cc **** #include "Thermistor.hh"
  22:src/MightyBoard/shared/Heater.cc **** #include "Eeprom.hh"
  23:src/MightyBoard/shared/Heater.cc **** #include "EepromMap.hh"
  24:src/MightyBoard/shared/Heater.cc **** #include "Motherboard.hh"
  25:src/MightyBoard/shared/Heater.cc **** 
  26:src/MightyBoard/shared/Heater.cc **** 
  27:src/MightyBoard/shared/Heater.cc **** /// Offset to compensate for range clipping and bleed-off
  28:src/MightyBoard/shared/Heater.cc **** #define HEATER_OFFSET_ADJUSTMENT 0
  29:src/MightyBoard/shared/Heater.cc **** 
  30:src/MightyBoard/shared/Heater.cc **** /// PID bypass: If the set point is more than this many degrees over the
  31:src/MightyBoard/shared/Heater.cc **** ///             current temperature, bypass the PID loop altogether.
  32:src/MightyBoard/shared/Heater.cc **** #define PID_BYPASS_DELTA 15
  33:src/MightyBoard/shared/Heater.cc **** 
  34:src/MightyBoard/shared/Heater.cc **** /// Number of bad sensor readings we need to get in a row before shutting off the heater
  35:src/MightyBoard/shared/Heater.cc **** const uint8_t SENSOR_MAX_BAD_READINGS = 5;
  36:src/MightyBoard/shared/Heater.cc **** 
  37:src/MightyBoard/shared/Heater.cc **** /// Number of temp readings to be at target value before triggering newTargetReached
  38:src/MightyBoard/shared/Heater.cc **** /// with bad seating of thermocouples, we sometimes get innacurate reads
  39:src/MightyBoard/shared/Heater.cc **** const uint16_t TARGET_CHECK_COUNT = 5;
  40:src/MightyBoard/shared/Heater.cc **** 
  41:src/MightyBoard/shared/Heater.cc **** /// If we read a temperature higher than this, shut down the heater
  42:src/MightyBoard/shared/Heater.cc **** const uint16_t HEATER_CUTOFF_TEMPERATURE = 300;
  43:src/MightyBoard/shared/Heater.cc **** 
  44:src/MightyBoard/shared/Heater.cc **** 
  45:src/MightyBoard/shared/Heater.cc **** /// temperatures below setting by this amount will flag as "not heating up"
  46:src/MightyBoard/shared/Heater.cc **** const uint16_t HEAT_FAIL_THRESHOLD = 30;
  47:src/MightyBoard/shared/Heater.cc **** 
  48:src/MightyBoard/shared/Heater.cc **** /// if the starting temperature is less than this amount, we will check heating progress
  49:src/MightyBoard/shared/Heater.cc **** /// to get to this temperature, the heater has already been checked.
  50:src/MightyBoard/shared/Heater.cc **** const uint16_t HEAT_CHECKED_THRESHOLD = 50;
  51:src/MightyBoard/shared/Heater.cc **** 
  52:src/MightyBoard/shared/Heater.cc **** /// timeout for heating all the way up
  53:src/MightyBoard/shared/Heater.cc **** const uint32_t HEAT_UP_TIME = 300000000;  //five minutes
  54:src/MightyBoard/shared/Heater.cc **** 
  55:src/MightyBoard/shared/Heater.cc **** /// timeout for showing heating progress
  56:src/MightyBoard/shared/Heater.cc **** const uint32_t HEAT_PROGRESS_TIME = 90000000; // 90 seconds
  57:src/MightyBoard/shared/Heater.cc **** 
  58:src/MightyBoard/shared/Heater.cc **** 
  59:src/MightyBoard/shared/Heater.cc **** /// threshold above starting temperature we check for heating progres
  60:src/MightyBoard/shared/Heater.cc **** const uint16_t HEAT_PROGRESS_THRESHOLD = 10;
  61:src/MightyBoard/shared/Heater.cc **** 
  62:src/MightyBoard/shared/Heater.cc **** Heater::Heater(TemperatureSensor& sensor_in,
  63:src/MightyBoard/shared/Heater.cc ****                HeatingElement& element_in,
  64:src/MightyBoard/shared/Heater.cc ****                micros_t sample_interval_micros_in,
  65:src/MightyBoard/shared/Heater.cc ****                uint16_t eeprom_base_in, bool timingCheckOn) :
  66:src/MightyBoard/shared/Heater.cc **** 		sensor(sensor_in),
  67:src/MightyBoard/shared/Heater.cc **** 		element(element_in),
  68:src/MightyBoard/shared/Heater.cc **** 		sample_interval_micros(sample_interval_micros_in),
  69:src/MightyBoard/shared/Heater.cc **** 		eeprom_base(eeprom_base_in),
  70:src/MightyBoard/shared/Heater.cc **** 		heat_timing_check(timingCheckOn)
  71:src/MightyBoard/shared/Heater.cc **** {
  72:src/MightyBoard/shared/Heater.cc **** 	reset();
  73:src/MightyBoard/shared/Heater.cc **** }
  74:src/MightyBoard/shared/Heater.cc **** 
  75:src/MightyBoard/shared/Heater.cc **** void Heater::reset() {
  28              	 .loc 1 75 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	.LVL0:
  33 0000 2DE9F041 	 push {r4,r5,r6,r7,r8,lr}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 24
  36              	 .cfi_offset 14,-4
  37              	 .cfi_offset 8,-8
  38              	 .cfi_offset 7,-12
  39              	 .cfi_offset 6,-16
  40              	 .cfi_offset 5,-20
  41              	 .cfi_offset 4,-24
  42 0004 88B0     	 sub sp,sp,#32
  43              	.LCFI1:
  44              	 .cfi_def_cfa_offset 56
  45 0006 0446     	 mov r4,r0
  46              	.LBB47:
  76:src/MightyBoard/shared/Heater.cc **** 	// TODO: Reset sensor, element here?
  77:src/MightyBoard/shared/Heater.cc **** 	xprintf("Heater::reset()" " (%s:%d)\n",_F_,_L_);
  47              	 .loc 1 77 0
  48 0008 40F20000 	 movw r0,#:lower16:.LC0
  49              	.LVL1:
  50 000c C0F20000 	 movt r0,#:upper16:.LC0
  51 0010 4249     	 ldr r1,.L8
  52 0012 4FF04D02 	 mov r2,#77
  53 0016 FFF7FEFF 	 bl xprintf
  78:src/MightyBoard/shared/Heater.cc **** 	current_temperature = 0;
  54              	 .loc 1 78 0
  55 001a 4FF00003 	 mov r3,#0
  56 001e 1E46     	 mov r6,r3
  57 0020 A385     	 strh r3,[r4,#44]
  79:src/MightyBoard/shared/Heater.cc **** 	startTemp = 0;
  58              	 .loc 1 79 0
  59 0022 E385     	 strh r3,[r4,#46]
  80:src/MightyBoard/shared/Heater.cc **** 
  81:src/MightyBoard/shared/Heater.cc **** 	fail_state = false;
  60              	 .loc 1 81 0
  61 0024 84F86130 	 strb r3,[r4,#97]
  82:src/MightyBoard/shared/Heater.cc **** 	fail_count = 0;
  62              	 .loc 1 82 0
  63 0028 84F86230 	 strb r3,[r4,#98]
  83:src/MightyBoard/shared/Heater.cc **** 	fail_mode = HEATER_FAIL_NONE;
  64              	 .loc 1 83 0
  65 002c 84F86430 	 strb r3,[r4,#100]
  84:src/MightyBoard/shared/Heater.cc **** 	value_fail_count = 0;
  66              	 .loc 1 84 0
  67 0030 84F86330 	 strb r3,[r4,#99]
  85:src/MightyBoard/shared/Heater.cc **** 
  86:src/MightyBoard/shared/Heater.cc **** 	heatingUpTimer = Timeout();
  68              	 .loc 1 86 0
  69 0034 6846     	 mov r0,sp
  70 0036 FFF7FEFF 	 bl _ZN7TimeoutC1Ev
  71 003a 04F16807 	 add r7,r4,#104
  72 003e 9DE80F00 	 ldmia sp,{r0,r1,r2,r3}
  73 0042 87E80F00 	 stmia r7,{r0,r1,r2,r3}
  87:src/MightyBoard/shared/Heater.cc **** 	heatProgressTimer = Timeout();
  74              	 .loc 1 87 0
  75 0046 04AD     	 add r5,sp,#16
  76 0048 2846     	 mov r0,r5
  77 004a FFF7FEFF 	 bl _ZN7TimeoutC1Ev
  78 004e 04F17807 	 add r7,r4,#120
  79 0052 95E80F00 	 ldmia r5,{r0,r1,r2,r3}
  80 0056 87E80F00 	 stmia r7,{r0,r1,r2,r3}
  88:src/MightyBoard/shared/Heater.cc **** 	progressChecked = false;
  81              	 .loc 1 88 0
  82 005a 84F88860 	 strb r6,[r4,#136]
  89:src/MightyBoard/shared/Heater.cc **** 	newTargetReached = false;
  83              	 .loc 1 89 0
  84 005e 84F83060 	 strb r6,[r4,#48]
  90:src/MightyBoard/shared/Heater.cc **** //	reached_count = 0;
  91:src/MightyBoard/shared/Heater.cc **** 	is_paused = false;
  85              	 .loc 1 91 0
  86 0062 84F88A60 	 strb r6,[r4,#138]
  92:src/MightyBoard/shared/Heater.cc **** 
  93:src/MightyBoard/shared/Heater.cc **** 	float p = eeprom::getEepromFixed16(eeprom_base+pid_eeprom_offsets::P_TERM_OFFSET,DEFAULT_P);
  87              	 .loc 1 93 0
  88 0066 608E     	 ldrh r0,[r4,#50]
  89 0068 4FF00001 	 mov r1,#0
  90 006c C4F2E001 	 movt r1,16608
  91 0070 FFF7FEFF 	 bl _ZN6eeprom16getEepromFixed16Etf
  92 0074 0546     	 mov r5,r0
  93              	.LVL2:
  94:src/MightyBoard/shared/Heater.cc **** 	float i = eeprom::getEepromFixed16(eeprom_base+pid_eeprom_offsets::I_TERM_OFFSET,DEFAULT_I);
  94              	 .loc 1 94 0
  95 0076 608E     	 ldrh r0,[r4,#50]
  96              	.LVL3:
  97 0078 00F10200 	 add r0,r0,#2
  98 007c 80B2     	 uxth r0,r0
  99 007e 46F26661 	 movw r1,#26214
 100 0082 C3F6A661 	 movt r1,16038
 101 0086 FFF7FEFF 	 bl _ZN6eeprom16getEepromFixed16Etf
 102 008a 0746     	 mov r7,r0
 103              	.LVL4:
  95:src/MightyBoard/shared/Heater.cc **** 	float d = eeprom::getEepromFixed16(eeprom_base+pid_eeprom_offsets::D_TERM_OFFSET,DEFAULT_D);
 104              	 .loc 1 95 0
 105 008c 608E     	 ldrh r0,[r4,#50]
 106              	.LVL5:
 107 008e 00F10400 	 add r0,r0,#4
 108 0092 80B2     	 uxth r0,r0
 109 0094 4FF00001 	 mov r1,#0
 110 0098 C4F21021 	 movt r1,16912
 111 009c FFF7FEFF 	 bl _ZN6eeprom16getEepromFixed16Etf
 112 00a0 8046     	 mov r8,r0
 113              	.LVL6:
  96:src/MightyBoard/shared/Heater.cc **** 
  97:src/MightyBoard/shared/Heater.cc **** 	pid.reset();
 114              	 .loc 1 97 0
 115 00a2 04F13406 	 add r6,r4,#52
 116 00a6 3046     	 mov r0,r6
 117              	.LVL7:
 118 00a8 FFF7FEFF 	 bl _ZN3PID5resetEv
  98:src/MightyBoard/shared/Heater.cc **** 	if (p == 0 && i == 0 && d == 0) {
 119              	 .loc 1 98 0
 120 00ac 2846     	 mov r0,r5
 121 00ae 4FF00001 	 mov r1,#0
 122 00b2 FFF7FEFF 	 bl __aeabi_fcmpeq
 123 00b6 B8B1     	 cbz r0,.L2
 124              	 .loc 1 98 0 is_stmt 0 discriminator 1
 125 00b8 3846     	 mov r0,r7
 126 00ba 4FF00001 	 mov r1,#0
 127 00be FFF7FEFF 	 bl __aeabi_fcmpeq
 128 00c2 88B1     	 cbz r0,.L2
 129              	 .loc 1 98 0 discriminator 2
 130 00c4 4046     	 mov r0,r8
 131 00c6 4FF00001 	 mov r1,#0
 132 00ca FFF7FEFF 	 bl __aeabi_fcmpeq
 133 00ce 58B1     	 cbz r0,.L2
  99:src/MightyBoard/shared/Heater.cc **** 		p = DEFAULT_P; i = DEFAULT_I; d = DEFAULT_D;
 134              	 .loc 1 99 0 is_stmt 1
 135 00d0 4FF00008 	 mov r8,#0
 136              	.LVL8:
 137 00d4 C4F21028 	 movt r8,16912
 138 00d8 46F26667 	 movw r7,#26214
 139              	.LVL9:
 140 00dc C3F6A667 	 movt r7,16038
 141 00e0 4FF00005 	 mov r5,#0
 142              	.LVL10:
 143 00e4 C4F2E005 	 movt r5,16608
 144              	.L2:
 145              	.LVL11:
 146              	.LBB48:
 147              	.LBB49:
 148              	 .file 2 "src/MightyBoard/shared/PID.hh"
   1:src/MightyBoard/shared/PID.hh **** /*
   2:src/MightyBoard/shared/PID.hh ****  * Copyright 2010 by Adam Mayer	 <adam@makerbot.com>
   3:src/MightyBoard/shared/PID.hh ****  *
   4:src/MightyBoard/shared/PID.hh ****  * This program is free software: you can redistribute it and/or modify
   5:src/MightyBoard/shared/PID.hh ****  * it under the terms of the GNU General Public License as published by
   6:src/MightyBoard/shared/PID.hh ****  * the Free Software Foundation, either version 3 of the License, or
   7:src/MightyBoard/shared/PID.hh ****  * (at your option) any later version.
   8:src/MightyBoard/shared/PID.hh ****  *
   9:src/MightyBoard/shared/PID.hh ****  * This program is distributed in the hope that it will be useful,
  10:src/MightyBoard/shared/PID.hh ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:src/MightyBoard/shared/PID.hh ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:src/MightyBoard/shared/PID.hh ****  * GNU General Public License for more details.
  13:src/MightyBoard/shared/PID.hh ****  *
  14:src/MightyBoard/shared/PID.hh ****  * You should have received a copy of the GNU General Public License
  15:src/MightyBoard/shared/PID.hh ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>
  16:src/MightyBoard/shared/PID.hh ****  *
  17:src/MightyBoard/shared/PID.hh ****  * This simplified PID controller was written with reference to:
  18:src/MightyBoard/shared/PID.hh ****  * * The Heater.h implementation (lookup credits)
  19:src/MightyBoard/shared/PID.hh ****  * * Brett Beauregard's Arduino PID implementation
  20:src/MightyBoard/shared/PID.hh ****  *  Created on: Feb 19, 2010
  21:src/MightyBoard/shared/PID.hh ****  *      Author: phooky
  22:src/MightyBoard/shared/PID.hh ****  */
  23:src/MightyBoard/shared/PID.hh **** 
  24:src/MightyBoard/shared/PID.hh **** #ifndef PID_HH_
  25:src/MightyBoard/shared/PID.hh **** #define PID_HH_
  26:src/MightyBoard/shared/PID.hh **** 
  27:src/MightyBoard/shared/PID.hh **** #include <stdint.h>
  28:src/MightyBoard/shared/PID.hh **** 
  29:src/MightyBoard/shared/PID.hh **** /// Number of delta samples to
  30:src/MightyBoard/shared/PID.hh **** #define DELTA_SAMPLES 4
  31:src/MightyBoard/shared/PID.hh **** 
  32:src/MightyBoard/shared/PID.hh **** /// The PID controller module implements a simple PID controller.
  33:src/MightyBoard/shared/PID.hh **** /// \ingroup SoftwareLibraries
  34:src/MightyBoard/shared/PID.hh **** class PID {
  35:src/MightyBoard/shared/PID.hh **** private:
  36:src/MightyBoard/shared/PID.hh ****     float p_gain; ///< proportional gain
  37:src/MightyBoard/shared/PID.hh ****     float i_gain; ///< integral gain
  38:src/MightyBoard/shared/PID.hh ****     float d_gain; ///< derivative gain
  39:src/MightyBoard/shared/PID.hh **** 
  40:src/MightyBoard/shared/PID.hh ****     /// Data for approximating d (smoothing to handle discrete nature of sampling).
  41:src/MightyBoard/shared/PID.hh ****     /// See PID.cc for a description of why we do this.
  42:src/MightyBoard/shared/PID.hh ****     int16_t delta_history[DELTA_SAMPLES];
  43:src/MightyBoard/shared/PID.hh ****     float delta_summation;      ///< ?
  44:src/MightyBoard/shared/PID.hh ****     uint8_t delta_idx;          ///< Current index in the delta history buffer
  45:src/MightyBoard/shared/PID.hh ****     int prev_error;             ///< Previous input for calculating next delta
  46:src/MightyBoard/shared/PID.hh ****     int error_acc;              ///< Accumulated error, for calculating integral
  47:src/MightyBoard/shared/PID.hh **** 
  48:src/MightyBoard/shared/PID.hh ****     int sp;                     ///< Process set point
  49:src/MightyBoard/shared/PID.hh ****     int last_output;            ///< Last output of the PID controller
  50:src/MightyBoard/shared/PID.hh **** 
  51:src/MightyBoard/shared/PID.hh **** public:
  52:src/MightyBoard/shared/PID.hh ****     /// Initialize the PID module
  53:src/MightyBoard/shared/PID.hh ****     PID();
  54:src/MightyBoard/shared/PID.hh **** 
  55:src/MightyBoard/shared/PID.hh ****     /// Set the P term of the PID controller
  56:src/MightyBoard/shared/PID.hh ****     /// \param[in] p_gain_in New proportional gain term
  57:src/MightyBoard/shared/PID.hh ****     void setPGain(const float p_gain_in) { p_gain = p_gain_in; }
 149              	 .loc 2 57 0
 150 00e8 6563     	 str r5,[r4,#52]
 151              	.LVL12:
 152              	.LBE49:
 153              	.LBE48:
 154              	.LBB50:
 155              	.LBB51:
  58:src/MightyBoard/shared/PID.hh **** 
  59:src/MightyBoard/shared/PID.hh ****     /// Set the I term of the PID controller
  60:src/MightyBoard/shared/PID.hh ****     /// \param[in] i_gain_in New integration gain term
  61:src/MightyBoard/shared/PID.hh ****     void setIGain(const float i_gain_in) { i_gain = i_gain_in; }
 156              	 .loc 2 61 0
 157 00ea A763     	 str r7,[r4,#56]
 158              	.LVL13:
 159              	.LBE51:
 160              	.LBE50:
 161              	.LBB52:
 162              	.LBB53:
  62:src/MightyBoard/shared/PID.hh **** 
  63:src/MightyBoard/shared/PID.hh ****     /// Set the D term of the PID controller
  64:src/MightyBoard/shared/PID.hh ****     /// \param[in] d_gain_in New derivative gain term
  65:src/MightyBoard/shared/PID.hh ****     void setDGain(const float d_gain_in) { d_gain = d_gain_in; }
 163              	 .loc 2 65 0
 164 00ec C4F83C80 	 str r8,[r4,#60]
 165              	.LBE53:
 166              	.LBE52:
 100:src/MightyBoard/shared/Heater.cc **** 	}
 101:src/MightyBoard/shared/Heater.cc **** 	pid.setPGain(p);
 102:src/MightyBoard/shared/Heater.cc **** 	pid.setIGain(i);
 103:src/MightyBoard/shared/Heater.cc **** 	pid.setDGain(d);
 104:src/MightyBoard/shared/Heater.cc **** 	pid.setTarget(0);
 167              	 .loc 1 104 0
 168 00f0 3046     	 mov r0,r6
 169 00f2 4FF00001 	 mov r1,#0
 170 00f6 FFF7FEFF 	 bl _ZN3PID9setTargetEi
 105:src/MightyBoard/shared/Heater.cc **** 	next_pid_timeout.start(UPDATE_INTERVAL_MICROS);
 171              	 .loc 1 105 0
 172 00fa 04F10800 	 add r0,r4,#8
 173 00fe 4AF22011 	 movw r1,#41248
 174 0102 C0F20701 	 movt r1,7
 175 0106 FFF7FEFF 	 bl _ZN7Timeout5startEm
 106:src/MightyBoard/shared/Heater.cc **** 	next_sense_timeout.start(sample_interval_micros);
 176              	 .loc 1 106 0
 177 010a 04F11800 	 add r0,r4,#24
 178 010e A16A     	 ldr r1,[r4,#40]
 179 0110 FFF7FEFF 	 bl _ZN7Timeout5startEm
 180              	.LBE47:
 107:src/MightyBoard/shared/Heater.cc **** 
 108:src/MightyBoard/shared/Heater.cc **** }
 181              	 .loc 1 108 0
 182 0114 08B0     	 add sp,sp,#32
 183 0116 BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 184              	.L9:
 185 011a 00BF     	 .align 2
 186              	.L8:
 187 011c 17000000 	 .word .LC1+23
 188              	 .cfi_endproc
 189              	.LFE104:
 191              	 .section .text._ZN6HeaterC2ER17TemperatureSensorR14HeatingElementmtb,"ax",%progbits
 192              	 .align 2
 193              	 .global _ZN6HeaterC2ER17TemperatureSensorR14HeatingElementmtb
 194              	 .thumb
 195              	 .thumb_func
 197              	_ZN6HeaterC2ER17TemperatureSensorR14HeatingElementmtb:
 198              	.LFB102:
  62:src/MightyBoard/shared/Heater.cc **** Heater::Heater(TemperatureSensor& sensor_in,
 199              	 .loc 1 62 0
 200              	 .cfi_startproc
 201              	 
 202              	 
 203              	.LVL14:
 204 0000 38B5     	 push {r3,r4,r5,lr}
 205              	.LCFI2:
 206              	 .cfi_def_cfa_offset 16
 207              	 .cfi_offset 14,-4
 208              	 .cfi_offset 5,-8
 209              	 .cfi_offset 4,-12
 210              	 .cfi_offset 3,-16
 211 0002 0446     	 mov r4,r0
 212 0004 1D46     	 mov r5,r3
 213              	.LBB54:
  70:src/MightyBoard/shared/Heater.cc **** 		heat_timing_check(timingCheckOn)
 214              	 .loc 1 70 0
 215 0006 0160     	 str r1,[r0,#0]
 216 0008 4260     	 str r2,[r0,#4]
 217 000a 00F10800 	 add r0,r0,#8
 218              	.LVL15:
 219 000e FFF7FEFF 	 bl _ZN7TimeoutC1Ev
 220              	.LVL16:
 221 0012 04F11800 	 add r0,r4,#24
 222 0016 FFF7FEFF 	 bl _ZN7TimeoutC1Ev
 223 001a A562     	 str r5,[r4,#40]
 224 001c BDF81030 	 ldrh r3,[sp,#16]
 225 0020 6386     	 strh r3,[r4,#50]
 226 0022 04F13400 	 add r0,r4,#52
 227 0026 FFF7FEFF 	 bl _ZN3PIDC1Ev
 228 002a 04F16800 	 add r0,r4,#104
 229 002e FFF7FEFF 	 bl _ZN7TimeoutC1Ev
 230 0032 04F17800 	 add r0,r4,#120
 231 0036 FFF7FEFF 	 bl _ZN7TimeoutC1Ev
 232 003a 9DF81430 	 ldrb r3,[sp,#20]
 233 003e 84F88930 	 strb r3,[r4,#137]
  72:src/MightyBoard/shared/Heater.cc **** 	reset();
 234              	 .loc 1 72 0
 235 0042 2046     	 mov r0,r4
 236 0044 FFF7FEFF 	 bl _ZN6Heater5resetEv
 237              	.LBE54:
  73:src/MightyBoard/shared/Heater.cc **** }
 238              	 .loc 1 73 0
 239 0048 2046     	 mov r0,r4
 240 004a 38BD     	 pop {r3,r4,r5,pc}
 241              	 .cfi_endproc
 242              	.LFE102:
 244              	 .section .text._ZN6Heater22set_target_temperatureEi,"ax",%progbits
 245              	 .align 2
 246              	 .global _ZN6Heater22set_target_temperatureEi
 247              	 .thumb
 248              	 .thumb_func
 250              	_ZN6Heater22set_target_temperatureEi:
 251              	.LFB105:
 109:src/MightyBoard/shared/Heater.cc **** 
 110:src/MightyBoard/shared/Heater.cc **** /*  Function logs the inital temp to the startTemp value,
 111:src/MightyBoard/shared/Heater.cc ****   starts progress timers to avoid heatup failure, and sets the
 112:src/MightyBoard/shared/Heater.cc ****   new target temperature for this heater.
 113:src/MightyBoard/shared/Heater.cc ****   @param temp: temperature in degrees C. Zero degrees indicates
 114:src/MightyBoard/shared/Heater.cc ****   'disable heaters'
 115:src/MightyBoard/shared/Heater.cc ****  */
 116:src/MightyBoard/shared/Heater.cc **** #define MAX_VALID_TEMP 280
 117:src/MightyBoard/shared/Heater.cc **** 
 118:src/MightyBoard/shared/Heater.cc **** void Heater::set_target_temperature(int temp)
 119:src/MightyBoard/shared/Heater.cc **** {
 252              	 .loc 1 119 0
 253              	 .cfi_startproc
 254              	 
 255              	 
 256              	.LVL17:
 257 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 258              	.LCFI3:
 259              	 .cfi_def_cfa_offset 20
 260              	 .cfi_offset 14,-4
 261              	 .cfi_offset 7,-8
 262              	 .cfi_offset 6,-12
 263              	 .cfi_offset 5,-16
 264              	 .cfi_offset 4,-20
 265 0002 8DB0     	 sub sp,sp,#52
 266              	.LCFI4:
 267              	 .cfi_def_cfa_offset 72
 268 0004 0446     	 mov r4,r0
 269              	 .loc 1 119 0
 270 0006 B1F58C7F 	 cmp r1,#280
 271 000a A8BF     	 it ge
 272 000c 4FF48C71 	 movge r1,#280
 273              	.LVL18:
 274 0010 21EAE176 	 bic r6,r1,r1,asr#31
 275              	.LVL19:
 120:src/MightyBoard/shared/Heater.cc **** 	// clip our set temperature if we are over temp.
 121:src/MightyBoard/shared/Heater.cc **** 	if(temp > MAX_VALID_TEMP) {
 122:src/MightyBoard/shared/Heater.cc **** 		temp = MAX_VALID_TEMP;
 123:src/MightyBoard/shared/Heater.cc **** 	}
 124:src/MightyBoard/shared/Heater.cc **** 	if(temp < 0){
 125:src/MightyBoard/shared/Heater.cc **** 		temp = 0;
 126:src/MightyBoard/shared/Heater.cc **** 	}
 127:src/MightyBoard/shared/Heater.cc **** 	
 128:src/MightyBoard/shared/Heater.cc **** 	newTargetReached = false;
 276              	 .loc 1 128 0
 277 0014 4FF00003 	 mov r3,#0
 278 0018 80F83030 	 strb r3,[r0,#48]
 129:src/MightyBoard/shared/Heater.cc **** 	//reached_count = 0;
 130:src/MightyBoard/shared/Heater.cc **** 	
 131:src/MightyBoard/shared/Heater.cc **** 	if(heat_timing_check){
 279              	 .loc 1 131 0
 280 001c 90F88930 	 ldrb r3,[r0,#137]
 281 0020 002B     	 cmp r3,#0
 282 0022 39D0     	 beq .L13
 132:src/MightyBoard/shared/Heater.cc **** 		startTemp = current_temperature;	
 283              	 .loc 1 132 0
 284 0024 838D     	 ldrh r3,[r0,#44]
 285 0026 9BB2     	 uxth r3,r3
 286 0028 C385     	 strh r3,[r0,#46]
 133:src/MightyBoard/shared/Heater.cc **** 		progressChecked = false;
 287              	 .loc 1 133 0
 288 002a 4FF00003 	 mov r3,#0
 289 002e 80F88830 	 strb r3,[r0,#136]
 134:src/MightyBoard/shared/Heater.cc **** 		value_fail_count = 0;
 290              	 .loc 1 134 0
 291 0032 80F86330 	 strb r3,[r0,#99]
 135:src/MightyBoard/shared/Heater.cc **** 	
 136:src/MightyBoard/shared/Heater.cc **** 		// start a progress timer to verify we are getting temp change over time.
 137:src/MightyBoard/shared/Heater.cc **** 		if(temp > HEAT_FAIL_THRESHOLD){
 292              	 .loc 1 137 0
 293 0036 1E2E     	 cmp r6,#30
 294 0038 1ADD     	 ble .L14
 138:src/MightyBoard/shared/Heater.cc **** 			// if the current temp is greater than a (low) threshold, don't check the heating up time, becau
 139:src/MightyBoard/shared/Heater.cc **** 			// we've already done that to get to this temperature
 140:src/MightyBoard/shared/Heater.cc **** 			if((temp > startTemp + HEAT_PROGRESS_THRESHOLD) && (startTemp < HEAT_CHECKED_THRESHOLD))
 295              	 .loc 1 140 0
 296 003a C38D     	 ldrh r3,[r0,#46]
 297 003c 9BB2     	 uxth r3,r3
 298 003e 03F10A03 	 add r3,r3,#10
 299 0042 B342     	 cmp r3,r6
 300 0044 2FDA     	 bge .L15
 301              	 .loc 1 140 0 is_stmt 0 discriminator 1
 302 0046 C38D     	 ldrh r3,[r0,#46]
 303 0048 9BB2     	 uxth r3,r3
 304 004a 312B     	 cmp r3,#49
 305 004c 2BD8     	 bhi .L15
 141:src/MightyBoard/shared/Heater.cc **** 			{	heatProgressTimer.start(HEAT_PROGRESS_TIME);}
 306              	 .loc 1 141 0 is_stmt 1 discriminator 4
 307 004e 00F17800 	 add r0,r0,#120
 308              	.LVL20:
 309 0052 4FF49541 	 mov r1,#19072
 310 0056 C0F25D51 	 movt r1,1373
 311 005a FFF7FEFF 	 bl _ZN7Timeout5startEm
 312              	.L16:
 142:src/MightyBoard/shared/Heater.cc **** 			else
 143:src/MightyBoard/shared/Heater.cc **** 			{	heatProgressTimer = Timeout(); }
 144:src/MightyBoard/shared/Heater.cc **** 				
 145:src/MightyBoard/shared/Heater.cc **** 			heatingUpTimer.start(HEAT_UP_TIME);
 313              	 .loc 1 145 0
 314 005e 04F16800 	 add r0,r4,#104
 315 0062 4FF42341 	 mov r1,#41728
 316 0066 C1F2E111 	 movt r1,4577
 317 006a FFF7FEFF 	 bl _ZN7Timeout5startEm
 318 006e 13E0     	 b .L13
 319              	.L14:
 146:src/MightyBoard/shared/Heater.cc **** 		}
 147:src/MightyBoard/shared/Heater.cc **** 		else{
 148:src/MightyBoard/shared/Heater.cc **** 			heatingUpTimer = Timeout();
 320              	 .loc 1 148 0
 321 0070 04AD     	 add r5,sp,#16
 322 0072 2846     	 mov r0,r5
 323 0074 FFF7FEFF 	 bl _ZN7TimeoutC1Ev
 324 0078 04F16807 	 add r7,r4,#104
 325 007c 95E80F00 	 ldmia r5,{r0,r1,r2,r3}
 326 0080 87E80F00 	 stmia r7,{r0,r1,r2,r3}
 149:src/MightyBoard/shared/Heater.cc **** 			heatProgressTimer = Timeout();
 327              	 .loc 1 149 0
 328 0084 08AD     	 add r5,sp,#32
 329 0086 2846     	 mov r0,r5
 330 0088 FFF7FEFF 	 bl _ZN7TimeoutC1Ev
 331 008c 04F17807 	 add r7,r4,#120
 332 0090 95E80F00 	 ldmia r5,{r0,r1,r2,r3}
 333 0094 87E80F00 	 stmia r7,{r0,r1,r2,r3}
 334              	.L13:
 150:src/MightyBoard/shared/Heater.cc **** 		}
 151:src/MightyBoard/shared/Heater.cc **** 	}
 152:src/MightyBoard/shared/Heater.cc **** 	pid.setTarget(temp);
 335              	 .loc 1 152 0
 336 0098 04F13400 	 add r0,r4,#52
 337 009c 3146     	 mov r1,r6
 338 009e FFF7FEFF 	 bl _ZN3PID9setTargetEi
 153:src/MightyBoard/shared/Heater.cc **** }
 339              	 .loc 1 153 0
 340 00a2 0DB0     	 add sp,sp,#52
 341 00a4 F0BD     	 pop {r4,r5,r6,r7,pc}
 342              	.L15:
 143:src/MightyBoard/shared/Heater.cc **** 			{	heatProgressTimer = Timeout(); }
 343              	 .loc 1 143 0
 344 00a6 6846     	 mov r0,sp
 345 00a8 FFF7FEFF 	 bl _ZN7TimeoutC1Ev
 346 00ac 04F17807 	 add r7,r4,#120
 347 00b0 9DE80F00 	 ldmia sp,{r0,r1,r2,r3}
 348 00b4 87E80F00 	 stmia r7,{r0,r1,r2,r3}
 349 00b8 D1E7     	 b .L16
 350              	 .cfi_endproc
 351              	.LFE105:
 353 00ba 00BF     	 .section .text._ZN6Heater30has_reached_target_temperatureEv,"ax",%progbits
 354              	 .align 2
 355              	 .global _ZN6Heater30has_reached_target_temperatureEv
 356              	 .thumb
 357              	 .thumb_func
 359              	_ZN6Heater30has_reached_target_temperatureEv:
 360              	.LFB106:
 154:src/MightyBoard/shared/Heater.cc **** 
 155:src/MightyBoard/shared/Heater.cc **** // We now define target hysteresis, used as PID over/under range.
 156:src/MightyBoard/shared/Heater.cc **** #define TARGET_HYSTERESIS 2
 157:src/MightyBoard/shared/Heater.cc **** 
 158:src/MightyBoard/shared/Heater.cc **** /// Returns true if the current PID temperature is within tolerance
 159:src/MightyBoard/shared/Heater.cc **** /// of the expected current temperature.
 160:src/MightyBoard/shared/Heater.cc **** bool Heater::has_reached_target_temperature()
 161:src/MightyBoard/shared/Heater.cc **** {
 361              	 .loc 1 161 0
 362              	 .cfi_startproc
 363              	 
 364              	 
 365              	 
 366              	.LVL21:
 162:src/MightyBoard/shared/Heater.cc **** 	if(is_paused){
 367              	 .loc 1 162 0
 368 0000 90F88A30 	 ldrb r3,[r0,#138]
 369 0004 ABB9     	 cbnz r3,.L20
 163:src/MightyBoard/shared/Heater.cc **** 		return false;
 164:src/MightyBoard/shared/Heater.cc **** 	}
 165:src/MightyBoard/shared/Heater.cc ****     // flag temperature reached so that PID variations don't trigger this
 166:src/MightyBoard/shared/Heater.cc ****     // a second time
 167:src/MightyBoard/shared/Heater.cc **** 	if(!newTargetReached){
 370              	 .loc 1 167 0
 371 0006 90F83030 	 ldrb r3,[r0,#48]
 372 000a 7BB9     	 cbnz r3,.L19
 168:src/MightyBoard/shared/Heater.cc **** 		if((current_temperature >= (pid.getTarget() - TARGET_HYSTERESIS)) &&
 373              	 .loc 1 168 0
 374 000c 818D     	 ldrh r1,[r0,#44]
 375 000e 89B2     	 uxth r1,r1
 376              	.LVL22:
 377              	.LBB55:
 378              	.LBB56:
  66:src/MightyBoard/shared/PID.hh **** 
  67:src/MightyBoard/shared/PID.hh ****     /// Set the setpoint of the PID controller
  68:src/MightyBoard/shared/PID.hh ****     /// \param[in] target New PID controller target
  69:src/MightyBoard/shared/PID.hh ****     void setTarget(const int target);
  70:src/MightyBoard/shared/PID.hh **** 
  71:src/MightyBoard/shared/PID.hh ****     /// Get the current PID target
  72:src/MightyBoard/shared/PID.hh ****     /// \return Current setpoint
  73:src/MightyBoard/shared/PID.hh **** 
  74:src/MightyBoard/shared/PID.hh ****     const int getTarget() const { return sp; }
 379              	 .loc 2 74 0
 380 0010 836D     	 ldr r3,[r0,#88]
 381              	.LBE56:
 382              	.LBE55:
 383              	 .loc 1 168 0
 384 0012 A3F10202 	 sub r2,r3,#2
 385 0016 9142     	 cmp r1,r2
 386 0018 08DB     	 blt .L19
 387              	 .loc 1 168 0 is_stmt 0 discriminator 1
 388 001a 828D     	 ldrh r2,[r0,#44]
 389 001c 92B2     	 uxth r2,r2
 390              	.LVL23:
 391 001e 03F10203 	 add r3,r3,#2
 392 0022 9A42     	 cmp r2,r3
 169:src/MightyBoard/shared/Heater.cc **** 			(current_temperature <= (pid.getTarget() + TARGET_HYSTERESIS)))
 170:src/MightyBoard/shared/Heater.cc **** 		{	
 171:src/MightyBoard/shared/Heater.cc **** 		//	reached_count++;
 172:src/MightyBoard/shared/Heater.cc **** 		//	if(reached_count >= TARGET_CHECK_COUNT){
 173:src/MightyBoard/shared/Heater.cc **** 				newTargetReached = true;
 393              	 .loc 1 173 0 is_stmt 1 discriminator 1
 394 0024 DCBF     	 itt le
 395 0026 0123     	 movle r3,#1
 396 0028 80F83030 	 strble r3,[r0,#48]
 397              	.LVL24:
 398              	.L19:
 174:src/MightyBoard/shared/Heater.cc **** 		//		}
 175:src/MightyBoard/shared/Heater.cc **** 		}
 176:src/MightyBoard/shared/Heater.cc **** 	}
 177:src/MightyBoard/shared/Heater.cc **** 	return newTargetReached; 
 399              	 .loc 1 177 0
 400 002c 90F83000 	 ldrb r0,[r0,#48]
 401              	.LVL25:
 402 0030 7047     	 bx lr
 403              	.LVL26:
 404              	.L20:
 163:src/MightyBoard/shared/Heater.cc **** 		return false;
 405              	 .loc 1 163 0
 406 0032 4FF00000 	 mov r0,#0
 407              	.LVL27:
 178:src/MightyBoard/shared/Heater.cc **** }
 408              	 .loc 1 178 0
 409 0036 7047     	 bx lr
 410              	 .cfi_endproc
 411              	.LFE106:
 413              	 .section .text._ZN6Heater19get_set_temperatureEv,"ax",%progbits
 414              	 .align 2
 415              	 .global _ZN6Heater19get_set_temperatureEv
 416              	 .thumb
 417              	 .thumb_func
 419              	_ZN6Heater19get_set_temperatureEv:
 420              	.LFB107:
 179:src/MightyBoard/shared/Heater.cc **** 
 180:src/MightyBoard/shared/Heater.cc **** int Heater::get_set_temperature() {
 421              	 .loc 1 180 0
 422              	 .cfi_startproc
 423              	 
 424              	 
 425              	 
 426              	.LVL28:
 181:src/MightyBoard/shared/Heater.cc **** 	return pid.getTarget();
 182:src/MightyBoard/shared/Heater.cc **** }
 427              	 .loc 1 182 0
 428 0000 806D     	 ldr r0,[r0,#88]
 429              	.LVL29:
 430 0002 7047     	 bx lr
 431              	 .cfi_endproc
 432              	.LFE107:
 434              	 .section .text._ZN6Heater23get_current_temperatureEv,"ax",%progbits
 435              	 .align 2
 436              	 .global _ZN6Heater23get_current_temperatureEv
 437              	 .thumb
 438              	 .thumb_func
 440              	_ZN6Heater23get_current_temperatureEv:
 441              	.LFB108:
 183:src/MightyBoard/shared/Heater.cc **** 
 184:src/MightyBoard/shared/Heater.cc **** int Heater::get_current_temperature()
 185:src/MightyBoard/shared/Heater.cc **** {
 442              	 .loc 1 185 0
 443              	 .cfi_startproc
 444              	 
 445              	 
 446              	 
 447              	.LVL30:
 186:src/MightyBoard/shared/Heater.cc **** 	return current_temperature;
 448              	 .loc 1 186 0
 449 0000 808D     	 ldrh r0,[r0,#44]
 450              	.LVL31:
 187:src/MightyBoard/shared/Heater.cc **** }
 451              	 .loc 1 187 0
 452 0002 80B2     	 uxth r0,r0
 453 0004 7047     	 bx lr
 454              	 .cfi_endproc
 455              	.LFE108:
 457 0006 00BF     	 .section .text._ZN6Heater15getPIDErrorTermEv,"ax",%progbits
 458              	 .align 2
 459              	 .global _ZN6Heater15getPIDErrorTermEv
 460              	 .thumb
 461              	 .thumb_func
 463              	_ZN6Heater15getPIDErrorTermEv:
 464              	.LFB109:
 188:src/MightyBoard/shared/Heater.cc **** 
 189:src/MightyBoard/shared/Heater.cc **** int Heater::getPIDErrorTerm() {
 465              	 .loc 1 189 0
 466              	 .cfi_startproc
 467              	 
 468              	 
 469              	.LVL32:
 470 0000 08B5     	 push {r3,lr}
 471              	.LCFI5:
 472              	 .cfi_def_cfa_offset 8
 473              	 .cfi_offset 14,-4
 474              	 .cfi_offset 3,-8
 190:src/MightyBoard/shared/Heater.cc **** 	return pid.getErrorTerm();
 475              	 .loc 1 190 0
 476 0002 00F13400 	 add r0,r0,#52
 477              	.LVL33:
 478 0006 FFF7FEFF 	 bl _ZN3PID12getErrorTermEv
 479              	.LVL34:
 191:src/MightyBoard/shared/Heater.cc **** }
 480              	 .loc 1 191 0
 481 000a 08BD     	 pop {r3,pc}
 482              	 .cfi_endproc
 483              	.LFE109:
 485              	 .section .text._ZN6Heater15getPIDDeltaTermEv,"ax",%progbits
 486              	 .align 2
 487              	 .global _ZN6Heater15getPIDDeltaTermEv
 488              	 .thumb
 489              	 .thumb_func
 491              	_ZN6Heater15getPIDDeltaTermEv:
 492              	.LFB110:
 192:src/MightyBoard/shared/Heater.cc **** 
 193:src/MightyBoard/shared/Heater.cc **** int Heater::getPIDDeltaTerm() {
 493              	 .loc 1 193 0
 494              	 .cfi_startproc
 495              	 
 496              	 
 497              	.LVL35:
 498 0000 08B5     	 push {r3,lr}
 499              	.LCFI6:
 500              	 .cfi_def_cfa_offset 8
 501              	 .cfi_offset 14,-4
 502              	 .cfi_offset 3,-8
 194:src/MightyBoard/shared/Heater.cc **** 	return pid.getDeltaTerm();
 503              	 .loc 1 194 0
 504 0002 00F13400 	 add r0,r0,#52
 505              	.LVL36:
 506 0006 FFF7FEFF 	 bl _ZN3PID12getDeltaTermEv
 507              	.LVL37:
 195:src/MightyBoard/shared/Heater.cc **** }
 508              	 .loc 1 195 0
 509 000a 08BD     	 pop {r3,pc}
 510              	 .cfi_endproc
 511              	.LFE110:
 513              	 .section .text._ZN6Heater16getPIDLastOutputEv,"ax",%progbits
 514              	 .align 2
 515              	 .global _ZN6Heater16getPIDLastOutputEv
 516              	 .thumb
 517              	 .thumb_func
 519              	_ZN6Heater16getPIDLastOutputEv:
 520              	.LFB111:
 196:src/MightyBoard/shared/Heater.cc **** 
 197:src/MightyBoard/shared/Heater.cc **** int Heater::getPIDLastOutput() {
 521              	 .loc 1 197 0
 522              	 .cfi_startproc
 523              	 
 524              	 
 525              	.LVL38:
 526 0000 08B5     	 push {r3,lr}
 527              	.LCFI7:
 528              	 .cfi_def_cfa_offset 8
 529              	 .cfi_offset 14,-4
 530              	 .cfi_offset 3,-8
 198:src/MightyBoard/shared/Heater.cc **** 	return pid.getLastOutput();
 531              	 .loc 1 198 0
 532 0002 00F13400 	 add r0,r0,#52
 533              	.LVL39:
 534 0006 FFF7FEFF 	 bl _ZN3PID13getLastOutputEv
 535              	.LVL40:
 199:src/MightyBoard/shared/Heater.cc **** }
 536              	 .loc 1 199 0
 537 000a 08BD     	 pop {r3,pc}
 538              	 .cfi_endproc
 539              	.LFE111:
 541              	 .section .text._ZN6Heater9isHeatingEv,"ax",%progbits
 542              	 .align 2
 543              	 .global _ZN6Heater9isHeatingEv
 544              	 .thumb
 545              	 .thumb_func
 547              	_ZN6Heater9isHeatingEv:
 548              	.LFB112:
 200:src/MightyBoard/shared/Heater.cc **** 
 201:src/MightyBoard/shared/Heater.cc **** bool Heater::isHeating(){
 549              	 .loc 1 201 0
 550              	 .cfi_startproc
 551              	 
 552              	 
 553              	.LVL41:
 554 0000 10B5     	 push {r4,lr}
 555              	.LCFI8:
 556              	 .cfi_def_cfa_offset 8
 557              	 .cfi_offset 14,-4
 558              	 .cfi_offset 4,-8
 559 0002 0446     	 mov r4,r0
 560              	.LVL42:
 202:src/MightyBoard/shared/Heater.cc ****        return (pid.getTarget() > 0) && !has_reached_target_temperature() && !fail_state;
 561              	 .loc 1 202 0
 562 0004 836D     	 ldr r3,[r0,#88]
 563 0006 002B     	 cmp r3,#0
 564 0008 07DD     	 ble .L28
 565              	.LVL43:
 566              	 .loc 1 202 0 is_stmt 0 discriminator 1
 567 000a FFF7FEFF 	 bl _ZN6Heater30has_reached_target_temperatureEv
 568              	.LVL44:
 569 000e 38B9     	 cbnz r0,.L29
 201:src/MightyBoard/shared/Heater.cc **** bool Heater::isHeating(){
 570              	 .loc 1 201 0 is_stmt 1 discriminator 3
 571 0010 94F86100 	 ldrb r0,[r4,#97]
 572 0014 80F00100 	 eor r0,r0,#1
 573 0018 10BD     	 pop {r4,pc}
 574              	.L28:
 575              	 .loc 1 202 0
 576 001a 4FF00000 	 mov r0,#0
 577 001e 10BD     	 pop {r4,pc}
 578              	.L29:
 579 0020 4FF00000 	 mov r0,#0
 203:src/MightyBoard/shared/Heater.cc **** }
 580              	 .loc 1 203 0
 581 0024 10BD     	 pop {r4,pc}
 582              	 .cfi_endproc
 583              	.LFE112:
 585 0026 00BF     	 .section .text._ZN6Heater9isCoolingEv,"ax",%progbits
 586              	 .align 2
 587              	 .global _ZN6Heater9isCoolingEv
 588              	 .thumb
 589              	 .thumb_func
 591              	_ZN6Heater9isCoolingEv:
 592              	.LFB113:
 204:src/MightyBoard/shared/Heater.cc **** 
 205:src/MightyBoard/shared/Heater.cc **** bool Heater::isCooling(){
 593              	 .loc 1 205 0
 594              	 .cfi_startproc
 595              	 
 596              	 
 597              	.LVL45:
 598 0000 38B5     	 push {r3,r4,r5,lr}
 599              	.LCFI9:
 600              	 .cfi_def_cfa_offset 16
 601              	 .cfi_offset 14,-4
 602              	 .cfi_offset 5,-8
 603              	 .cfi_offset 4,-12
 604              	 .cfi_offset 3,-16
 605 0002 0446     	 mov r4,r0
 206:src/MightyBoard/shared/Heater.cc **** 	return (current_temperature > get_set_temperature()) && !has_reached_target_temperature() && !fail
 606              	 .loc 1 206 0
 607 0004 858D     	 ldrh r5,[r0,#44]
 608 0006 ADB2     	 uxth r5,r5
 609 0008 FFF7FEFF 	 bl _ZN6Heater19get_set_temperatureEv
 610              	.LVL46:
 611 000c 8542     	 cmp r5,r0
 612 000e 08DD     	 ble .L32
 613              	 .loc 1 206 0 is_stmt 0 discriminator 1
 614 0010 2046     	 mov r0,r4
 615 0012 FFF7FEFF 	 bl _ZN6Heater30has_reached_target_temperatureEv
 616 0016 38B9     	 cbnz r0,.L33
 205:src/MightyBoard/shared/Heater.cc **** bool Heater::isCooling(){
 617              	 .loc 1 205 0 is_stmt 1 discriminator 3
 618 0018 94F86100 	 ldrb r0,[r4,#97]
 619 001c 80F00100 	 eor r0,r0,#1
 620 0020 38BD     	 pop {r3,r4,r5,pc}
 621              	.L32:
 622              	 .loc 1 206 0
 623 0022 4FF00000 	 mov r0,#0
 624 0026 38BD     	 pop {r3,r4,r5,pc}
 625              	.L33:
 626 0028 4FF00000 	 mov r0,#0
 207:src/MightyBoard/shared/Heater.cc **** }
 627              	 .loc 1 207 0
 628 002c 38BD     	 pop {r3,r4,r5,pc}
 629              	 .cfi_endproc
 630              	.LFE113:
 632 002e 00BF     	 .section .text._ZN6Heater8getDeltaEv,"ax",%progbits
 633              	 .align 2
 634              	 .global _ZN6Heater8getDeltaEv
 635              	 .thumb
 636              	 .thumb_func
 638              	_ZN6Heater8getDeltaEv:
 639              	.LFB114:
 208:src/MightyBoard/shared/Heater.cc **** 
 209:src/MightyBoard/shared/Heater.cc **** int16_t Heater::getDelta(){
 640              	 .loc 1 209 0
 641              	 .cfi_startproc
 642              	 
 643              	 
 644              	 
 645              	.LVL47:
 646              	.LBB57:
 210:src/MightyBoard/shared/Heater.cc **** 	
 211:src/MightyBoard/shared/Heater.cc **** 		uint16_t target = pid.getTarget();
 647              	 .loc 1 211 0
 648 0000 B0F85830 	 ldrh r3,[r0,#88]
 649              	.LVL48:
 212:src/MightyBoard/shared/Heater.cc **** 		uint16_t temp = sensor.getTemperature();
 650              	 .loc 1 212 0
 651 0004 0268     	 ldr r2,[r0,#0]
 652              	.LVL49:
 653              	.LBB58:
 654              	.LBB59:
 655              	 .file 3 "src/MightyBoard/shared/TemperatureSensor.hh"
   1:src/MightyBoard/shared/TemperatureSensor.hh **** /*
   2:src/MightyBoard/shared/TemperatureSensor.hh ****  * Copyright 2010 by Adam Mayer	 <adam@makerbot.com>
   3:src/MightyBoard/shared/TemperatureSensor.hh ****  *
   4:src/MightyBoard/shared/TemperatureSensor.hh ****  * This program is free software: you can redistribute it and/or modify
   5:src/MightyBoard/shared/TemperatureSensor.hh ****  * it under the terms of the GNU General Public License as published by
   6:src/MightyBoard/shared/TemperatureSensor.hh ****  * the Free Software Foundation, either version 3 of the License, or
   7:src/MightyBoard/shared/TemperatureSensor.hh ****  * (at your option) any later version.
   8:src/MightyBoard/shared/TemperatureSensor.hh ****  *
   9:src/MightyBoard/shared/TemperatureSensor.hh ****  * This program is distributed in the hope that it will be useful,
  10:src/MightyBoard/shared/TemperatureSensor.hh ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:src/MightyBoard/shared/TemperatureSensor.hh ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:src/MightyBoard/shared/TemperatureSensor.hh ****  * GNU General Public License for more details.
  13:src/MightyBoard/shared/TemperatureSensor.hh ****  *
  14:src/MightyBoard/shared/TemperatureSensor.hh ****  * You should have received a copy of the GNU General Public License
  15:src/MightyBoard/shared/TemperatureSensor.hh ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>
  16:src/MightyBoard/shared/TemperatureSensor.hh ****  */
  17:src/MightyBoard/shared/TemperatureSensor.hh **** 
  18:src/MightyBoard/shared/TemperatureSensor.hh **** #ifndef TEMPERATURE_HH_
  19:src/MightyBoard/shared/TemperatureSensor.hh **** #define TEMPERATURE_HH_
  20:src/MightyBoard/shared/TemperatureSensor.hh **** 
  21:src/MightyBoard/shared/TemperatureSensor.hh **** #include <stdint.h>
  22:src/MightyBoard/shared/TemperatureSensor.hh **** 
  23:src/MightyBoard/shared/TemperatureSensor.hh **** /// Flag specifying that the temperature reading is invalid.
  24:src/MightyBoard/shared/TemperatureSensor.hh **** #define BAD_TEMPERATURE 1024
  25:src/MightyBoard/shared/TemperatureSensor.hh **** 
  26:src/MightyBoard/shared/TemperatureSensor.hh **** /// The temperature sensor interface is a standard interface used to communicate with
  27:src/MightyBoard/shared/TemperatureSensor.hh **** /// things that can sense temperatures.
  28:src/MightyBoard/shared/TemperatureSensor.hh **** /// \ingroup SoftwareLibraries
  29:src/MightyBoard/shared/TemperatureSensor.hh **** class TemperatureSensor {
  30:src/MightyBoard/shared/TemperatureSensor.hh **** protected:
  31:src/MightyBoard/shared/TemperatureSensor.hh ****         /// The last temperature reading from the sensor, in degrees Celcius, or
  32:src/MightyBoard/shared/TemperatureSensor.hh ****         /// #BAD_TEMPERATURE if the last reading is invalid.
  33:src/MightyBoard/shared/TemperatureSensor.hh **** 	volatile uint16_t current_temp;
  34:src/MightyBoard/shared/TemperatureSensor.hh **** public:
  35:src/MightyBoard/shared/TemperatureSensor.hh **** 	virtual ~TemperatureSensor(){};
  36:src/MightyBoard/shared/TemperatureSensor.hh **** 	enum SensorState {
  37:src/MightyBoard/shared/TemperatureSensor.hh **** 		SS_OK,              ///< Temperature measured correctly
  38:src/MightyBoard/shared/TemperatureSensor.hh **** 		SS_ADC_BUSY,        ///< Temperature failed to update because ADC is busy
  39:src/MightyBoard/shared/TemperatureSensor.hh **** 		SS_ADC_WAITING,     ///< Temperature failed to update, still waiting for ADC
  40:src/MightyBoard/shared/TemperatureSensor.hh **** 		SS_ERROR_UNPLUGGED  ///< Temperature failed to update, the sensor is unplugged.
  41:src/MightyBoard/shared/TemperatureSensor.hh **** 	};
  42:src/MightyBoard/shared/TemperatureSensor.hh **** 
  43:src/MightyBoard/shared/TemperatureSensor.hh **** 
  44:src/MightyBoard/shared/TemperatureSensor.hh **** 	/// Get the last read temperature from the sensor. Note that you need to call
  45:src/MightyBoard/shared/TemperatureSensor.hh **** 	/// update() at least once for this to return good data.
  46:src/MightyBoard/shared/TemperatureSensor.hh **** 	/// \return The current temperature, in degrees Celcius, or #BAD_TEMPERATURE if the
  47:src/MightyBoard/shared/TemperatureSensor.hh **** 	///         last read failed.
  48:src/MightyBoard/shared/TemperatureSensor.hh **** 	int16_t getTemperature() const { return current_temp; }
 656              	 .loc 3 48 0
 657 0006 9288     	 ldrh r2,[r2,#4]
 658 0008 92B2     	 uxth r2,r2
 659              	.LVL50:
 660              	.LBE59:
 661              	.LBE58:
 213:src/MightyBoard/shared/Heater.cc **** 		int16_t delta = (target > temp) ? target - temp : temp - target;
 662              	 .loc 1 213 0
 663 000a 9342     	 cmp r3,r2
 664 000c 8CBF     	 ite hi
 665 000e C2EB0303 	 rsbhi r3,r2,r3
 666              	.LVL51:
 667 0012 C3EB0203 	 rsbls r3,r3,r2
 668 0016 98B2     	 uxth r0,r3
 669              	.LVL52:
 670              	.LBE57:
 214:src/MightyBoard/shared/Heater.cc ****         return delta;
 215:src/MightyBoard/shared/Heater.cc **** }
 671              	 .loc 1 215 0
 672 0018 00B2     	 sxth r0,r0
 673              	.LVL53:
 674 001a 7047     	 bx lr
 675              	 .cfi_endproc
 676              	.LFE114:
 678              	 .section .text._ZN6Heater10set_outputEh,"ax",%progbits
 679              	 .align 2
 680              	 .global _ZN6Heater10set_outputEh
 681              	 .thumb
 682              	 .thumb_func
 684              	_ZN6Heater10set_outputEh:
 685              	.LFB117:
 216:src/MightyBoard/shared/Heater.cc **** 
 217:src/MightyBoard/shared/Heater.cc **** 
 218:src/MightyBoard/shared/Heater.cc **** void Heater::manage_temperature() {
 219:src/MightyBoard/shared/Heater.cc **** //	xprintf("manage_temperature" " (%s:%d)\n",_F_,_L_);
 220:src/MightyBoard/shared/Heater.cc **** 	if (next_sense_timeout.hasElapsed()) {
 221:src/MightyBoard/shared/Heater.cc **** 		next_sense_timeout.start(sample_interval_micros);
 222:src/MightyBoard/shared/Heater.cc **** 		switch (sensor.update()) {
 223:src/MightyBoard/shared/Heater.cc **** 		case TemperatureSensor::SS_ADC_BUSY:
 224:src/MightyBoard/shared/Heater.cc **** 		case TemperatureSensor::SS_ADC_WAITING:
 225:src/MightyBoard/shared/Heater.cc **** 			// We're waiting for the ADC, so don't update the temperature yet.
 226:src/MightyBoard/shared/Heater.cc **** 			current_temperature = 2;
 227:src/MightyBoard/shared/Heater.cc **** 			return;
 228:src/MightyBoard/shared/Heater.cc **** 			break;
 229:src/MightyBoard/shared/Heater.cc **** 		case TemperatureSensor::SS_OK:
 230:src/MightyBoard/shared/Heater.cc **** 			// Result was ok, so reset the fail counter, and continue.
 231:src/MightyBoard/shared/Heater.cc **** 			fail_count = 0;
 232:src/MightyBoard/shared/Heater.cc **** 			break;
 233:src/MightyBoard/shared/Heater.cc **** 		case TemperatureSensor::SS_ERROR_UNPLUGGED:
 234:src/MightyBoard/shared/Heater.cc **** 		default:
 235:src/MightyBoard/shared/Heater.cc **** 			// If we get too many bad readings in a row, shut down the heater.
 236:src/MightyBoard/shared/Heater.cc **** 			fail_count++;
 237:src/MightyBoard/shared/Heater.cc **** 
 238:src/MightyBoard/shared/Heater.cc **** 			if (fail_count > SENSOR_MAX_BAD_READINGS) {
 239:src/MightyBoard/shared/Heater.cc **** 				fail_mode = HEATER_FAIL_NOT_PLUGGED_IN;
 240:src/MightyBoard/shared/Heater.cc **** 				fail();
 241:src/MightyBoard/shared/Heater.cc **** 			}
 242:src/MightyBoard/shared/Heater.cc **** 			current_temperature = 3;
 243:src/MightyBoard/shared/Heater.cc **** 			return;
 244:src/MightyBoard/shared/Heater.cc **** 			break;
 245:src/MightyBoard/shared/Heater.cc **** 		}
 246:src/MightyBoard/shared/Heater.cc **** 
 247:src/MightyBoard/shared/Heater.cc **** 		current_temperature = sensor.getTemperature();
 248:src/MightyBoard/shared/Heater.cc **** 		
 249:src/MightyBoard/shared/Heater.cc **** 		if (!is_paused){
 250:src/MightyBoard/shared/Heater.cc **** 			uint8_t old_value_count = value_fail_count;
 251:src/MightyBoard/shared/Heater.cc **** 			// check that the the heater isn't reading above the maximum allowable temp
 252:src/MightyBoard/shared/Heater.cc **** 			if (current_temperature > HEATER_CUTOFF_TEMPERATURE) {
 253:src/MightyBoard/shared/Heater.cc **** 				value_fail_count++;
 254:src/MightyBoard/shared/Heater.cc **** 
 255:src/MightyBoard/shared/Heater.cc **** 				if (value_fail_count > SENSOR_MAX_BAD_READINGS) {
 256:src/MightyBoard/shared/Heater.cc **** 					fail_mode = HEATER_FAIL_SOFTWARE_CUTOFF;
 257:src/MightyBoard/shared/Heater.cc **** 					fail();
 258:src/MightyBoard/shared/Heater.cc **** 					return;
 259:src/MightyBoard/shared/Heater.cc **** 				}
 260:src/MightyBoard/shared/Heater.cc **** 			}
 261:src/MightyBoard/shared/Heater.cc **** 			// check that the heater is heating up after target is set
 262:src/MightyBoard/shared/Heater.cc **** 			if(!progressChecked){
 263:src/MightyBoard/shared/Heater.cc **** 				if(heatProgressTimer.hasElapsed()){ 
 264:src/MightyBoard/shared/Heater.cc **** 					if(current_temperature < (startTemp + HEAT_PROGRESS_THRESHOLD )){
 265:src/MightyBoard/shared/Heater.cc **** 						value_fail_count++;
 266:src/MightyBoard/shared/Heater.cc **** 
 267:src/MightyBoard/shared/Heater.cc **** 						if (value_fail_count > SENSOR_MAX_BAD_READINGS) {
 268:src/MightyBoard/shared/Heater.cc **** 							fail_mode = HEATER_FAIL_NOT_HEATING;
 269:src/MightyBoard/shared/Heater.cc **** 							fail();
 270:src/MightyBoard/shared/Heater.cc **** 							return;
 271:src/MightyBoard/shared/Heater.cc **** 						}
 272:src/MightyBoard/shared/Heater.cc **** 					}
 273:src/MightyBoard/shared/Heater.cc **** 					else
 274:src/MightyBoard/shared/Heater.cc **** 						progressChecked = true;
 275:src/MightyBoard/shared/Heater.cc **** 				}
 276:src/MightyBoard/shared/Heater.cc **** 			}
 277:src/MightyBoard/shared/Heater.cc **** 			// check that the heater temperature does not drop when still set to high temp
 278:src/MightyBoard/shared/Heater.cc **** 			if(heatingUpTimer.hasElapsed() && has_reached_target_temperature() && (current_temperature < (pi
 279:src/MightyBoard/shared/Heater.cc **** 					value_fail_count++;
 280:src/MightyBoard/shared/Heater.cc **** 
 281:src/MightyBoard/shared/Heater.cc **** 					if (value_fail_count > SENSOR_MAX_BAD_READINGS) {
 282:src/MightyBoard/shared/Heater.cc **** 						fail_mode = HEATER_FAIL_DROPPING_TEMP;
 283:src/MightyBoard/shared/Heater.cc **** 						fail();
 284:src/MightyBoard/shared/Heater.cc **** 						return;
 285:src/MightyBoard/shared/Heater.cc **** 					}
 286:src/MightyBoard/shared/Heater.cc **** 			}
 287:src/MightyBoard/shared/Heater.cc **** 			// if no bad heat reads have occured, clear the fail count
 288:src/MightyBoard/shared/Heater.cc **** 			// we don't want this to add up continually forever
 289:src/MightyBoard/shared/Heater.cc **** 			if(value_fail_count == old_value_count)
 290:src/MightyBoard/shared/Heater.cc **** 				value_fail_count = 0;
 291:src/MightyBoard/shared/Heater.cc **** 		}
 292:src/MightyBoard/shared/Heater.cc **** 	}
 293:src/MightyBoard/shared/Heater.cc **** 	if (fail_state) {
 294:src/MightyBoard/shared/Heater.cc **** 		return;
 295:src/MightyBoard/shared/Heater.cc **** 	}
 296:src/MightyBoard/shared/Heater.cc **** 	if (next_pid_timeout.hasElapsed() && !is_paused) {
 297:src/MightyBoard/shared/Heater.cc **** 		
 298:src/MightyBoard/shared/Heater.cc **** 		next_pid_timeout.start(UPDATE_INTERVAL_MICROS);
 299:src/MightyBoard/shared/Heater.cc **** 
 300:src/MightyBoard/shared/Heater.cc **** 		int delta = pid.getTarget() - current_temperature;
 301:src/MightyBoard/shared/Heater.cc **** 
 302:src/MightyBoard/shared/Heater.cc **** 		if( bypassing_PID && (delta < PID_BYPASS_DELTA) ) {
 303:src/MightyBoard/shared/Heater.cc **** 			bypassing_PID = false;
 304:src/MightyBoard/shared/Heater.cc **** 
 305:src/MightyBoard/shared/Heater.cc **** 			pid.reset_state();
 306:src/MightyBoard/shared/Heater.cc **** 		}
 307:src/MightyBoard/shared/Heater.cc **** 		else if ( !bypassing_PID && (delta > PID_BYPASS_DELTA + 10) ) {
 308:src/MightyBoard/shared/Heater.cc **** 			bypassing_PID = true;
 309:src/MightyBoard/shared/Heater.cc **** 		}
 310:src/MightyBoard/shared/Heater.cc **** 
 311:src/MightyBoard/shared/Heater.cc **** 		if( bypassing_PID ) {
 312:src/MightyBoard/shared/Heater.cc **** 			set_output(255);
 313:src/MightyBoard/shared/Heater.cc **** 		}
 314:src/MightyBoard/shared/Heater.cc **** 		else {
 315:src/MightyBoard/shared/Heater.cc **** 			int mv = pid.calculate(current_temperature);
 316:src/MightyBoard/shared/Heater.cc **** 			// offset value to compensate for heat bleed-off.
 317:src/MightyBoard/shared/Heater.cc **** 			// There are probably more elegant ways to do this,
 318:src/MightyBoard/shared/Heater.cc **** 			// but this works pretty well.
 319:src/MightyBoard/shared/Heater.cc **** 			mv += HEATER_OFFSET_ADJUSTMENT;
 320:src/MightyBoard/shared/Heater.cc **** 			// clamp value
 321:src/MightyBoard/shared/Heater.cc **** 			if (mv < 0) { mv = 0; }
 322:src/MightyBoard/shared/Heater.cc **** 			if (mv >255) { mv = 255; }
 323:src/MightyBoard/shared/Heater.cc **** 			if (pid.getTarget() == 0) { mv = 0; }
 324:src/MightyBoard/shared/Heater.cc **** 			set_output(mv);
 325:src/MightyBoard/shared/Heater.cc **** 				
 326:src/MightyBoard/shared/Heater.cc **** 		}
 327:src/MightyBoard/shared/Heater.cc **** 	}
 328:src/MightyBoard/shared/Heater.cc **** }
 329:src/MightyBoard/shared/Heater.cc **** 
 330:src/MightyBoard/shared/Heater.cc **** 
 331:src/MightyBoard/shared/Heater.cc **** // wait on heating the heater until told to continue
 332:src/MightyBoard/shared/Heater.cc **** // @param on set pause to on or off
 333:src/MightyBoard/shared/Heater.cc **** void Heater::Pause(bool on){	
 334:src/MightyBoard/shared/Heater.cc **** 	
 335:src/MightyBoard/shared/Heater.cc **** 	// don't pause / un-pause again
 336:src/MightyBoard/shared/Heater.cc **** 	if(is_paused == on)
 337:src/MightyBoard/shared/Heater.cc **** 		return;
 338:src/MightyBoard/shared/Heater.cc **** 		
 339:src/MightyBoard/shared/Heater.cc **** 	// don't pause if heater is not on
 340:src/MightyBoard/shared/Heater.cc **** 	if (on && !isHeating())
 341:src/MightyBoard/shared/Heater.cc **** 		return;
 342:src/MightyBoard/shared/Heater.cc **** 	
 343:src/MightyBoard/shared/Heater.cc **** 	//set paused flag
 344:src/MightyBoard/shared/Heater.cc **** 	is_paused = on;
 345:src/MightyBoard/shared/Heater.cc **** 	
 346:src/MightyBoard/shared/Heater.cc **** 	if(is_paused){
 347:src/MightyBoard/shared/Heater.cc **** 		//set output to zero
 348:src/MightyBoard/shared/Heater.cc **** 		set_output(0);
 349:src/MightyBoard/shared/Heater.cc **** 		// clear heatup timers
 350:src/MightyBoard/shared/Heater.cc **** 		heatingUpTimer = Timeout();
 351:src/MightyBoard/shared/Heater.cc **** 		heatProgressTimer = Timeout();
 352:src/MightyBoard/shared/Heater.cc **** 		// clear reached target temperature
 353:src/MightyBoard/shared/Heater.cc **** 		newTargetReached = false;
 354:src/MightyBoard/shared/Heater.cc **** 		
 355:src/MightyBoard/shared/Heater.cc **** 	}else{
 356:src/MightyBoard/shared/Heater.cc **** 		// restart heatup
 357:src/MightyBoard/shared/Heater.cc **** 		set_target_temperature(get_set_temperature());
 358:src/MightyBoard/shared/Heater.cc **** 		
 359:src/MightyBoard/shared/Heater.cc **** 	}
 360:src/MightyBoard/shared/Heater.cc **** }
 361:src/MightyBoard/shared/Heater.cc **** 
 362:src/MightyBoard/shared/Heater.cc **** void Heater::set_output(uint8_t value)
 363:src/MightyBoard/shared/Heater.cc **** {
 686              	 .loc 1 363 0
 687              	 .cfi_startproc
 688              	 
 689              	 
 690              	.LVL54:
 691 0000 08B5     	 push {r3,lr}
 692              	.LCFI10:
 693              	 .cfi_def_cfa_offset 8
 694              	 .cfi_offset 14,-4
 695              	 .cfi_offset 3,-8
 364:src/MightyBoard/shared/Heater.cc **** 	element.setHeatingElement(value);
 696              	 .loc 1 364 0
 697 0002 4068     	 ldr r0,[r0,#4]
 698              	.LVL55:
 699 0004 0368     	 ldr r3,[r0,#0]
 700 0006 9B68     	 ldr r3,[r3,#8]
 701 0008 9847     	 blx r3
 702              	.LVL56:
 365:src/MightyBoard/shared/Heater.cc **** }
 703              	 .loc 1 365 0
 704 000a 08BD     	 pop {r3,pc}
 705              	 .cfi_endproc
 706              	.LFE117:
 708              	 .section .text._ZN6Heater5PauseEb,"ax",%progbits
 709              	 .align 2
 710              	 .global _ZN6Heater5PauseEb
 711              	 .thumb
 712              	 .thumb_func
 714              	_ZN6Heater5PauseEb:
 715              	.LFB116:
 333:src/MightyBoard/shared/Heater.cc **** void Heater::Pause(bool on){	
 716              	 .loc 1 333 0
 717              	 .cfi_startproc
 718              	 
 719              	 
 720              	.LVL57:
 721 0000 70B5     	 push {r4,r5,r6,lr}
 722              	.LCFI11:
 723              	 .cfi_def_cfa_offset 16
 724              	 .cfi_offset 14,-4
 725              	 .cfi_offset 6,-8
 726              	 .cfi_offset 5,-12
 727              	 .cfi_offset 4,-16
 728 0002 88B0     	 sub sp,sp,#32
 729              	.LCFI12:
 730              	 .cfi_def_cfa_offset 48
 731 0004 0446     	 mov r4,r0
 732 0006 0D46     	 mov r5,r1
 336:src/MightyBoard/shared/Heater.cc **** 	if(is_paused == on)
 733              	 .loc 1 336 0
 734 0008 90F88A30 	 ldrb r3,[r0,#138]
 735 000c 8B42     	 cmp r3,r1
 736 000e 2BD0     	 beq .L38
 340:src/MightyBoard/shared/Heater.cc **** 	if (on && !isHeating())
 737              	 .loc 1 340 0
 738 0010 19B1     	 cbz r1,.L40
 340:src/MightyBoard/shared/Heater.cc **** 	if (on && !isHeating())
 739              	 .loc 1 340 0 is_stmt 0 discriminator 1
 740 0012 FFF7FEFF 	 bl _ZN6Heater9isHeatingEv
 741              	.LVL58:
 742 0016 48B9     	 cbnz r0,.L41
 743 0018 26E0     	 b .L38
 744              	.LVL59:
 745              	.L40:
 344:src/MightyBoard/shared/Heater.cc **** 	is_paused = on;
 746              	 .loc 1 344 0 is_stmt 1
 747 001a 80F88A10 	 strb r1,[r0,#138]
 357:src/MightyBoard/shared/Heater.cc **** 		set_target_temperature(get_set_temperature());
 748              	 .loc 1 357 0
 749 001e FFF7FEFF 	 bl _ZN6Heater19get_set_temperatureEv
 750              	.LVL60:
 751 0022 0146     	 mov r1,r0
 752 0024 2046     	 mov r0,r4
 753 0026 FFF7FEFF 	 bl _ZN6Heater22set_target_temperatureEi
 754 002a 1DE0     	 b .L38
 755              	.L41:
 344:src/MightyBoard/shared/Heater.cc **** 	is_paused = on;
 756              	 .loc 1 344 0
 757 002c 84F88A50 	 strb r5,[r4,#138]
 348:src/MightyBoard/shared/Heater.cc **** 		set_output(0);
 758              	 .loc 1 348 0
 759 0030 2046     	 mov r0,r4
 760 0032 4FF00001 	 mov r1,#0
 761 0036 FFF7FEFF 	 bl _ZN6Heater10set_outputEh
 350:src/MightyBoard/shared/Heater.cc **** 		heatingUpTimer = Timeout();
 762              	 .loc 1 350 0
 763 003a 6846     	 mov r0,sp
 764 003c FFF7FEFF 	 bl _ZN7TimeoutC1Ev
 765 0040 04F16806 	 add r6,r4,#104
 766 0044 9DE80F00 	 ldmia sp,{r0,r1,r2,r3}
 767 0048 86E80F00 	 stmia r6,{r0,r1,r2,r3}
 351:src/MightyBoard/shared/Heater.cc **** 		heatProgressTimer = Timeout();
 768              	 .loc 1 351 0
 769 004c 04AD     	 add r5,sp,#16
 770 004e 2846     	 mov r0,r5
 771 0050 FFF7FEFF 	 bl _ZN7TimeoutC1Ev
 772 0054 04F17806 	 add r6,r4,#120
 773 0058 95E80F00 	 ldmia r5,{r0,r1,r2,r3}
 774 005c 86E80F00 	 stmia r6,{r0,r1,r2,r3}
 353:src/MightyBoard/shared/Heater.cc **** 		newTargetReached = false;
 775              	 .loc 1 353 0
 776 0060 4FF00003 	 mov r3,#0
 777 0064 84F83030 	 strb r3,[r4,#48]
 778              	.L38:
 360:src/MightyBoard/shared/Heater.cc **** }
 779              	 .loc 1 360 0
 780 0068 08B0     	 add sp,sp,#32
 781 006a 70BD     	 pop {r4,r5,r6,pc}
 782              	 .cfi_endproc
 783              	.LFE116:
 785              	 .section .text._ZN6Heater4failEv,"ax",%progbits
 786              	 .align 2
 787              	 .global _ZN6Heater4failEv
 788              	 .thumb
 789              	 .thumb_func
 791              	_ZN6Heater4failEv:
 792              	.LFB118:
 366:src/MightyBoard/shared/Heater.cc **** 
 367:src/MightyBoard/shared/Heater.cc **** // mark as failed and report to motherboard for user messaging
 368:src/MightyBoard/shared/Heater.cc **** void Heater::fail()
 369:src/MightyBoard/shared/Heater.cc **** {
 793              	 .loc 1 369 0
 794              	 .cfi_startproc
 795              	 
 796              	 
 797              	.LVL61:
 798 0000 10B5     	 push {r4,lr}
 799              	.LCFI13:
 800              	 .cfi_def_cfa_offset 8
 801              	 .cfi_offset 14,-4
 802              	 .cfi_offset 4,-8
 803 0002 0446     	 mov r4,r0
 370:src/MightyBoard/shared/Heater.cc **** 	fail_state = true;
 804              	 .loc 1 370 0
 805 0004 4FF00103 	 mov r3,#1
 806 0008 80F86130 	 strb r3,[r0,#97]
 371:src/MightyBoard/shared/Heater.cc **** 	set_output(0);
 807              	 .loc 1 371 0
 808 000c 4FF00001 	 mov r1,#0
 809 0010 FFF7FEFF 	 bl _ZN6Heater10set_outputEh
 810              	.LVL62:
 372:src/MightyBoard/shared/Heater.cc **** 	Motherboard::getBoard().heaterFail(fail_mode);
 811              	 .loc 1 372 0
 812 0014 40F20000 	 movw r0,#:lower16:_ZN11Motherboard11motherboardE
 813 0018 C0F20000 	 movt r0,#:upper16:_ZN11Motherboard11motherboardE
 814 001c 94F86410 	 ldrb r1,[r4,#100]
 815 0020 FFF7FEFF 	 bl _ZN11Motherboard10heaterFailE14HeaterFailMode
 373:src/MightyBoard/shared/Heater.cc **** }
 816              	 .loc 1 373 0
 817 0024 10BD     	 pop {r4,pc}
 818              	 .cfi_endproc
 819              	.LFE118:
 821 0026 00BF     	 .section .text._ZN6Heater18manage_temperatureEv,"ax",%progbits
 822              	 .align 2
 823              	 .global _ZN6Heater18manage_temperatureEv
 824              	 .thumb
 825              	 .thumb_func
 827              	_ZN6Heater18manage_temperatureEv:
 828              	.LFB115:
 218:src/MightyBoard/shared/Heater.cc **** void Heater::manage_temperature() {
 829              	 .loc 1 218 0
 830              	 .cfi_startproc
 831              	 
 832              	 
 833              	.LVL63:
 834 0000 38B5     	 push {r3,r4,r5,lr}
 835              	.LCFI14:
 836              	 .cfi_def_cfa_offset 16
 837              	 .cfi_offset 14,-4
 838              	 .cfi_offset 5,-8
 839              	 .cfi_offset 4,-12
 840              	 .cfi_offset 3,-16
 841 0002 0446     	 mov r4,r0
 842              	.LBB60:
 843              	.LBB61:
 220:src/MightyBoard/shared/Heater.cc **** 	if (next_sense_timeout.hasElapsed()) {
 844              	 .loc 1 220 0
 845 0004 00F11805 	 add r5,r0,#24
 846 0008 2846     	 mov r0,r5
 847              	.LVL64:
 848 000a FFF7FEFF 	 bl _ZN7Timeout10hasElapsedEv
 849 000e 0028     	 cmp r0,#0
 850 0010 00F09280 	 beq .L44
 851              	.LBB62:
 221:src/MightyBoard/shared/Heater.cc **** 		next_sense_timeout.start(sample_interval_micros);
 852              	 .loc 1 221 0
 853 0014 2846     	 mov r0,r5
 854 0016 A16A     	 ldr r1,[r4,#40]
 855 0018 FFF7FEFF 	 bl _ZN7Timeout5startEm
 222:src/MightyBoard/shared/Heater.cc **** 		switch (sensor.update()) {
 856              	 .loc 1 222 0
 857 001c 2068     	 ldr r0,[r4,#0]
 858 001e 0368     	 ldr r3,[r0,#0]
 859 0020 DB68     	 ldr r3,[r3,#12]
 860 0022 9847     	 blx r3
 861 0024 28B1     	 cbz r0,.L46
 862 0026 0228     	 cmp r0,#2
 863 0028 0FD8     	 bhi .L45
 226:src/MightyBoard/shared/Heater.cc **** 			current_temperature = 2;
 864              	 .loc 1 226 0
 865 002a 4FF00203 	 mov r3,#2
 866 002e A385     	 strh r3,[r4,#44]
 227:src/MightyBoard/shared/Heater.cc **** 			return;
 867              	 .loc 1 227 0
 868 0030 38BD     	 pop {r3,r4,r5,pc}
 869              	.L46:
 231:src/MightyBoard/shared/Heater.cc **** 			fail_count = 0;
 870              	 .loc 1 231 0
 871 0032 4FF00003 	 mov r3,#0
 872 0036 84F86230 	 strb r3,[r4,#98]
 247:src/MightyBoard/shared/Heater.cc **** 		current_temperature = sensor.getTemperature();
 873              	 .loc 1 247 0
 874 003a 2368     	 ldr r3,[r4,#0]
 875              	.LVL65:
 876              	.LBB63:
 877              	.LBB64:
 878              	 .loc 3 48 0
 879 003c 9B88     	 ldrh r3,[r3,#4]
 880 003e 9BB2     	 uxth r3,r3
 881              	.LBE64:
 882              	.LBE63:
 247:src/MightyBoard/shared/Heater.cc **** 		current_temperature = sensor.getTemperature();
 883              	 .loc 1 247 0
 884 0040 A385     	 strh r3,[r4,#44]
 885              	.LBB65:
 249:src/MightyBoard/shared/Heater.cc **** 		if (!is_paused){
 886              	 .loc 1 249 0
 887 0042 94F88A30 	 ldrb r3,[r4,#138]
 888 0046 A3B1     	 cbz r3,.L49
 889 0048 76E0     	 b .L44
 890              	.LVL66:
 891              	.L45:
 892              	.LBE65:
 236:src/MightyBoard/shared/Heater.cc **** 			fail_count++;
 893              	 .loc 1 236 0
 894 004a 94F86230 	 ldrb r3,[r4,#98]
 895 004e 03F10103 	 add r3,r3,#1
 896 0052 DBB2     	 uxtb r3,r3
 897 0054 84F86230 	 strb r3,[r4,#98]
 238:src/MightyBoard/shared/Heater.cc **** 			if (fail_count > SENSOR_MAX_BAD_READINGS) {
 898              	 .loc 1 238 0
 899 0058 052B     	 cmp r3,#5
 900 005a 06D9     	 bls .L50
 239:src/MightyBoard/shared/Heater.cc **** 				fail_mode = HEATER_FAIL_NOT_PLUGGED_IN;
 901              	 .loc 1 239 0
 902 005c 4FF00203 	 mov r3,#2
 903 0060 84F86430 	 strb r3,[r4,#100]
 240:src/MightyBoard/shared/Heater.cc **** 				fail();
 904              	 .loc 1 240 0
 905 0064 2046     	 mov r0,r4
 906 0066 FFF7FEFF 	 bl _ZN6Heater4failEv
 907              	.L50:
 242:src/MightyBoard/shared/Heater.cc **** 			current_temperature = 3;
 908              	 .loc 1 242 0
 909 006a 4FF00303 	 mov r3,#3
 910 006e A385     	 strh r3,[r4,#44]
 243:src/MightyBoard/shared/Heater.cc **** 			return;
 911              	 .loc 1 243 0
 912 0070 38BD     	 pop {r3,r4,r5,pc}
 913              	.LVL67:
 914              	.L49:
 915              	.LBB67:
 916              	.LBB66:
 250:src/MightyBoard/shared/Heater.cc **** 			uint8_t old_value_count = value_fail_count;
 917              	 .loc 1 250 0
 918 0072 94F86350 	 ldrb r5,[r4,#99]
 919              	.LVL68:
 252:src/MightyBoard/shared/Heater.cc **** 			if (current_temperature > HEATER_CUTOFF_TEMPERATURE) {
 920              	 .loc 1 252 0
 921 0076 A38D     	 ldrh r3,[r4,#44]
 922 0078 9BB2     	 uxth r3,r3
 923 007a B3F5967F 	 cmp r3,#300
 924 007e 0ED9     	 bls .L51
 253:src/MightyBoard/shared/Heater.cc **** 				value_fail_count++;
 925              	 .loc 1 253 0
 926 0080 05F10103 	 add r3,r5,#1
 927 0084 DBB2     	 uxtb r3,r3
 928 0086 84F86330 	 strb r3,[r4,#99]
 255:src/MightyBoard/shared/Heater.cc **** 				if (value_fail_count > SENSOR_MAX_BAD_READINGS) {
 929              	 .loc 1 255 0
 930 008a 052B     	 cmp r3,#5
 931 008c 07D9     	 bls .L51
 256:src/MightyBoard/shared/Heater.cc **** 					fail_mode = HEATER_FAIL_SOFTWARE_CUTOFF;
 932              	 .loc 1 256 0
 933 008e 4FF00403 	 mov r3,#4
 934 0092 84F86430 	 strb r3,[r4,#100]
 257:src/MightyBoard/shared/Heater.cc **** 					fail();
 935              	 .loc 1 257 0
 936 0096 2046     	 mov r0,r4
 937 0098 FFF7FEFF 	 bl _ZN6Heater4failEv
 938              	.LVL69:
 258:src/MightyBoard/shared/Heater.cc **** 					return;
 939              	 .loc 1 258 0
 940 009c 38BD     	 pop {r3,r4,r5,pc}
 941              	.LVL70:
 942              	.L51:
 262:src/MightyBoard/shared/Heater.cc **** 			if(!progressChecked){
 943              	 .loc 1 262 0
 944 009e 94F88830 	 ldrb r3,[r4,#136]
 945 00a2 0BBB     	 cbnz r3,.L52
 263:src/MightyBoard/shared/Heater.cc **** 				if(heatProgressTimer.hasElapsed()){ 
 946              	 .loc 1 263 0
 947 00a4 04F17800 	 add r0,r4,#120
 948 00a8 FFF7FEFF 	 bl _ZN7Timeout10hasElapsedEv
 949              	.LVL71:
 950 00ac E0B1     	 cbz r0,.L52
 264:src/MightyBoard/shared/Heater.cc **** 					if(current_temperature < (startTemp + HEAT_PROGRESS_THRESHOLD )){
 951              	 .loc 1 264 0
 952 00ae A28D     	 ldrh r2,[r4,#44]
 953 00b0 92B2     	 uxth r2,r2
 954 00b2 E38D     	 ldrh r3,[r4,#46]
 955 00b4 9BB2     	 uxth r3,r3
 956 00b6 03F10A03 	 add r3,r3,#10
 957 00ba 9A42     	 cmp r2,r3
 274:src/MightyBoard/shared/Heater.cc **** 						progressChecked = true;
 958              	 .loc 1 274 0
 959 00bc A4BF     	 itt ge
 960 00be 0123     	 movge r3,#1
 961 00c0 84F88830 	 strbge r3,[r4,#136]
 264:src/MightyBoard/shared/Heater.cc **** 					if(current_temperature < (startTemp + HEAT_PROGRESS_THRESHOLD )){
 962              	 .loc 1 264 0
 963 00c4 10DA     	 bge .L52
 265:src/MightyBoard/shared/Heater.cc **** 						value_fail_count++;
 964              	 .loc 1 265 0
 965 00c6 94F86330 	 ldrb r3,[r4,#99]
 966 00ca 03F10103 	 add r3,r3,#1
 967 00ce DBB2     	 uxtb r3,r3
 968 00d0 84F86330 	 strb r3,[r4,#99]
 267:src/MightyBoard/shared/Heater.cc **** 						if (value_fail_count > SENSOR_MAX_BAD_READINGS) {
 969              	 .loc 1 267 0
 970 00d4 052B     	 cmp r3,#5
 971 00d6 07D9     	 bls .L52
 268:src/MightyBoard/shared/Heater.cc **** 							fail_mode = HEATER_FAIL_NOT_HEATING;
 972              	 .loc 1 268 0
 973 00d8 4FF00803 	 mov r3,#8
 974 00dc 84F86430 	 strb r3,[r4,#100]
 269:src/MightyBoard/shared/Heater.cc **** 							fail();
 975              	 .loc 1 269 0
 976 00e0 2046     	 mov r0,r4
 977 00e2 FFF7FEFF 	 bl _ZN6Heater4failEv
 270:src/MightyBoard/shared/Heater.cc **** 							return;
 978              	 .loc 1 270 0
 979 00e6 38BD     	 pop {r3,r4,r5,pc}
 980              	.L52:
 278:src/MightyBoard/shared/Heater.cc **** 			if(heatingUpTimer.hasElapsed() && has_reached_target_temperature() && (current_temperature < (pi
 981              	 .loc 1 278 0
 982 00e8 04F16800 	 add r0,r4,#104
 983 00ec FFF7FEFF 	 bl _ZN7Timeout10hasElapsedEv
 984 00f0 D8B1     	 cbz r0,.L55
 278:src/MightyBoard/shared/Heater.cc **** 			if(heatingUpTimer.hasElapsed() && has_reached_target_temperature() && (current_temperature < (pi
 985              	 .loc 1 278 0 is_stmt 0 discriminator 1
 986 00f2 2046     	 mov r0,r4
 987 00f4 FFF7FEFF 	 bl _ZN6Heater30has_reached_target_temperatureEv
 988 00f8 B8B1     	 cbz r0,.L55
 278:src/MightyBoard/shared/Heater.cc **** 			if(heatingUpTimer.hasElapsed() && has_reached_target_temperature() && (current_temperature < (pi
 989              	 .loc 1 278 0 discriminator 3
 990 00fa A28D     	 ldrh r2,[r4,#44]
 991 00fc 92B2     	 uxth r2,r2
 992              	.LVL72:
 993 00fe A36D     	 ldr r3,[r4,#88]
 994 0100 A3F11E03 	 sub r3,r3,#30
 995 0104 9A42     	 cmp r2,r3
 996 0106 10DA     	 bge .L55
 279:src/MightyBoard/shared/Heater.cc **** 					value_fail_count++;
 997              	 .loc 1 279 0 is_stmt 1 discriminator 5
 998 0108 94F86330 	 ldrb r3,[r4,#99]
 999 010c 03F10103 	 add r3,r3,#1
 1000 0110 DBB2     	 uxtb r3,r3
 1001 0112 84F86330 	 strb r3,[r4,#99]
 281:src/MightyBoard/shared/Heater.cc **** 					if (value_fail_count > SENSOR_MAX_BAD_READINGS) {
 1002              	 .loc 1 281 0 discriminator 5
 1003 0116 052B     	 cmp r3,#5
 1004 0118 07D9     	 bls .L55
 282:src/MightyBoard/shared/Heater.cc **** 						fail_mode = HEATER_FAIL_DROPPING_TEMP;
 1005              	 .loc 1 282 0
 1006 011a 4FF01003 	 mov r3,#16
 1007 011e 84F86430 	 strb r3,[r4,#100]
 283:src/MightyBoard/shared/Heater.cc **** 						fail();
 1008              	 .loc 1 283 0
 1009 0122 2046     	 mov r0,r4
 1010 0124 FFF7FEFF 	 bl _ZN6Heater4failEv
 284:src/MightyBoard/shared/Heater.cc **** 						return;
 1011              	 .loc 1 284 0
 1012 0128 38BD     	 pop {r3,r4,r5,pc}
 1013              	.LVL73:
 1014              	.L55:
 289:src/MightyBoard/shared/Heater.cc **** 			if(value_fail_count == old_value_count)
 1015              	 .loc 1 289 0
 1016 012a 94F86330 	 ldrb r3,[r4,#99]
 1017 012e AB42     	 cmp r3,r5
 290:src/MightyBoard/shared/Heater.cc **** 				value_fail_count = 0;
 1018              	 .loc 1 290 0
 1019 0130 04BF     	 itt eq
 1020 0132 0023     	 moveq r3,#0
 1021 0134 84F86330 	 strbeq r3,[r4,#99]
 1022              	.LVL74:
 1023              	.L44:
 1024              	.LBE66:
 1025              	.LBE67:
 1026              	.LBE62:
 1027              	.LBE61:
 293:src/MightyBoard/shared/Heater.cc **** 	if (fail_state) {
 1028              	 .loc 1 293 0
 1029 0138 94F86130 	 ldrb r3,[r4,#97]
 1030 013c 002B     	 cmp r3,#0
 1031 013e 46D1     	 bne .L43
 1032              	.LBB68:
 296:src/MightyBoard/shared/Heater.cc **** 	if (next_pid_timeout.hasElapsed() && !is_paused) {
 1033              	 .loc 1 296 0
 1034 0140 04F10805 	 add r5,r4,#8
 1035 0144 2846     	 mov r0,r5
 1036 0146 FFF7FEFF 	 bl _ZN7Timeout10hasElapsedEv
 1037 014a 0028     	 cmp r0,#0
 1038 014c 3FD0     	 beq .L43
 296:src/MightyBoard/shared/Heater.cc **** 	if (next_pid_timeout.hasElapsed() && !is_paused) {
 1039              	 .loc 1 296 0 is_stmt 0 discriminator 1
 1040 014e 94F88A30 	 ldrb r3,[r4,#138]
 1041 0152 002B     	 cmp r3,#0
 1042 0154 3BD1     	 bne .L43
 1043              	.LBB69:
 298:src/MightyBoard/shared/Heater.cc **** 		next_pid_timeout.start(UPDATE_INTERVAL_MICROS);
 1044              	 .loc 1 298 0 is_stmt 1 discriminator 4
 1045 0156 2846     	 mov r0,r5
 1046 0158 4AF22011 	 movw r1,#41248
 1047 015c C0F20701 	 movt r1,7
 1048 0160 FFF7FEFF 	 bl _ZN7Timeout5startEm
 1049              	.LVL75:
 300:src/MightyBoard/shared/Heater.cc **** 		int delta = pid.getTarget() - current_temperature;
 1050              	 .loc 1 300 0 discriminator 4
 1051 0164 A28D     	 ldrh r2,[r4,#44]
 1052 0166 92B2     	 uxth r2,r2
 1053 0168 A36D     	 ldr r3,[r4,#88]
 1054 016a 9A1A     	 subs r2,r3,r2
 1055              	.LVL76:
 302:src/MightyBoard/shared/Heater.cc **** 		if( bypassing_PID && (delta < PID_BYPASS_DELTA) ) {
 1056              	 .loc 1 302 0 discriminator 4
 1057 016c 94F86030 	 ldrb r3,[r4,#96]
 1058 0170 5BB1     	 cbz r3,.L56
 302:src/MightyBoard/shared/Heater.cc **** 		if( bypassing_PID && (delta < PID_BYPASS_DELTA) ) {
 1059              	 .loc 1 302 0 is_stmt 0 discriminator 1
 1060 0172 0E2A     	 cmp r2,#14
 1061 0174 08DC     	 bgt .L57
 303:src/MightyBoard/shared/Heater.cc **** 			bypassing_PID = false;
 1062              	 .loc 1 303 0 is_stmt 1
 1063 0176 4FF00003 	 mov r3,#0
 1064 017a 84F86030 	 strb r3,[r4,#96]
 305:src/MightyBoard/shared/Heater.cc **** 			pid.reset_state();
 1065              	 .loc 1 305 0
 1066 017e 04F13400 	 add r0,r4,#52
 1067 0182 FFF7FEFF 	 bl _ZN3PID11reset_stateEv
 1068              	.LVL77:
 1069 0186 06E0     	 b .L58
 1070              	.LVL78:
 1071              	.L57:
 307:src/MightyBoard/shared/Heater.cc **** 		else if ( !bypassing_PID && (delta > PID_BYPASS_DELTA + 10) ) {
 1072              	 .loc 1 307 0
 1073 0188 43B9     	 cbnz r3,.L62
 1074              	.L56:
 307:src/MightyBoard/shared/Heater.cc **** 		else if ( !bypassing_PID && (delta > PID_BYPASS_DELTA + 10) ) {
 1075              	 .loc 1 307 0 is_stmt 0 discriminator 1
 1076 018a 192A     	 cmp r2,#25
 308:src/MightyBoard/shared/Heater.cc **** 			bypassing_PID = true;
 1077              	 .loc 1 308 0 is_stmt 1 discriminator 1
 1078 018c C4BF     	 itt gt
 1079 018e 0123     	 movgt r3,#1
 1080 0190 84F86030 	 strbgt r3,[r4,#96]
 307:src/MightyBoard/shared/Heater.cc **** 		else if ( !bypassing_PID && (delta > PID_BYPASS_DELTA + 10) ) {
 1081              	 .loc 1 307 0 discriminator 1
 1082 0194 02DC     	 bgt .L62
 1083              	.LVL79:
 1084              	.L58:
 1085              	.LBB70:
 311:src/MightyBoard/shared/Heater.cc **** 		if( bypassing_PID ) {
 1086              	 .loc 1 311 0
 1087 0196 94F86030 	 ldrb r3,[r4,#96]
 1088 019a 2BB1     	 cbz r3,.L60
 1089              	.L62:
 312:src/MightyBoard/shared/Heater.cc **** 			set_output(255);
 1090              	 .loc 1 312 0
 1091 019c 2046     	 mov r0,r4
 1092 019e 4FF0FF01 	 mov r1,#255
 1093 01a2 FFF7FEFF 	 bl _ZN6Heater10set_outputEh
 1094 01a6 38BD     	 pop {r3,r4,r5,pc}
 1095              	.L60:
 1096              	.LBB71:
 315:src/MightyBoard/shared/Heater.cc **** 			int mv = pid.calculate(current_temperature);
 1097              	 .loc 1 315 0
 1098 01a8 A18D     	 ldrh r1,[r4,#44]
 1099 01aa 04F13400 	 add r0,r4,#52
 1100 01ae 89B2     	 uxth r1,r1
 1101 01b0 FFF7FEFF 	 bl _ZN3PID9calculateEi
 1102              	.LVL80:
 323:src/MightyBoard/shared/Heater.cc **** 			if (pid.getTarget() == 0) { mv = 0; }
 1103              	 .loc 1 323 0
 1104 01b4 A36D     	 ldr r3,[r4,#88]
 1105 01b6 4FF00001 	 mov r1,#0
 1106 01ba 23B1     	 cbz r3,.L61
 1107 01bc 20EAE071 	 bic r1,r0,r0,asr#31
 1108 01c0 FF29     	 cmp r1,#255
 1109 01c2 A8BF     	 it ge
 1110 01c4 FF21     	 movge r1,#255
 1111              	.L61:
 1112              	.LVL81:
 324:src/MightyBoard/shared/Heater.cc **** 			set_output(mv);
 1113              	 .loc 1 324 0
 1114 01c6 2046     	 mov r0,r4
 1115 01c8 C9B2     	 uxtb r1,r1
 1116              	.LVL82:
 1117 01ca FFF7FEFF 	 bl _ZN6Heater10set_outputEh
 1118              	.LVL83:
 1119              	.L43:
 1120 01ce 38BD     	 pop {r3,r4,r5,pc}
 1121              	.LBE71:
 1122              	.LBE70:
 1123              	.LBE69:
 1124              	.LBE68:
 1125              	.LBE60:
 1126              	 .cfi_endproc
 1127              	.LFE115:
 1129              	 .section .text._ZN6Heater10has_failedEv,"ax",%progbits
 1130              	 .align 2
 1131              	 .global _ZN6Heater10has_failedEv
 1132              	 .thumb
 1133              	 .thumb_func
 1135              	_ZN6Heater10has_failedEv:
 1136              	.LFB119:
 374:src/MightyBoard/shared/Heater.cc **** 
 375:src/MightyBoard/shared/Heater.cc **** bool Heater::has_failed()
 376:src/MightyBoard/shared/Heater.cc **** {
 1137              	 .loc 1 376 0
 1138              	 .cfi_startproc
 1139              	 
 1140              	 
 1141              	 
 1142              	.LVL84:
 377:src/MightyBoard/shared/Heater.cc **** 	return fail_state;
 378:src/MightyBoard/shared/Heater.cc **** }
 1143              	 .loc 1 378 0
 1144 0000 90F86100 	 ldrb r0,[r0,#97]
 1145              	.LVL85:
 1146 0004 7047     	 bx lr
 1147              	 .cfi_endproc
 1148              	.LFE119:
 1150 0006 00BF     	 .section .text._ZN6Heater11GetFailModeEv,"ax",%progbits
 1151              	 .align 2
 1152              	 .global _ZN6Heater11GetFailModeEv
 1153              	 .thumb
 1154              	 .thumb_func
 1156              	_ZN6Heater11GetFailModeEv:
 1157              	.LFB120:
 379:src/MightyBoard/shared/Heater.cc **** 
 380:src/MightyBoard/shared/Heater.cc **** uint8_t Heater::GetFailMode(){
 1158              	 .loc 1 380 0
 1159              	 .cfi_startproc
 1160              	 
 1161              	 
 1162              	 
 1163              	.LVL86:
 381:src/MightyBoard/shared/Heater.cc **** 	
 382:src/MightyBoard/shared/Heater.cc **** 	return fail_mode;
 383:src/MightyBoard/shared/Heater.cc **** }
 1164              	 .loc 1 383 0
 1165 0000 90F86400 	 ldrb r0,[r0,#100]
 1166              	.LVL87:
 1167 0004 7047     	 bx lr
 1168              	 .cfi_endproc
 1169              	.LFE120:
 1171 0006 00BF     	 .section .text._GLOBAL__sub_I__ZN6HeaterC2ER17TemperatureSensorR14HeatingElementmtb,"ax",%progbits
 1172              	 .align 2
 1173              	 .thumb
 1174              	 .thumb_func
 1176              	_GLOBAL__sub_I__ZN6HeaterC2ER17TemperatureSensorR14HeatingElementmtb:
 1177              	.LFB122:
 1178              	 .loc 1 383 0
 1179              	 .cfi_startproc
 1180              	 
 1181              	 
 1182 0000 10B5     	 push {r4,lr}
 1183              	.LCFI15:
 1184              	 .cfi_def_cfa_offset 8
 1185              	 .cfi_offset 14,-4
 1186              	 .cfi_offset 4,-8
 1187              	.LVL88:
 1188              	.LBB74:
 1189              	.LBB75:
 1190              	 .file 4 "src/MightyBoard/shared/LPCPort.hh"
   1:src/MightyBoard/shared/LPCPort.hh **** /*
   2:src/MightyBoard/shared/LPCPort.hh **** * Copyright 2010 by Adam Mayer	 <adam@makerbot.com>
   3:src/MightyBoard/shared/LPCPort.hh **** *
   4:src/MightyBoard/shared/LPCPort.hh **** * This program is free software: you can redistribute it and/or modify
   5:src/MightyBoard/shared/LPCPort.hh **** * it under the terms of the GNU General Public License as published by
   6:src/MightyBoard/shared/LPCPort.hh **** * the Free Software Foundation, either version 3 of the License, or
   7:src/MightyBoard/shared/LPCPort.hh **** * (at your option) any later version.
   8:src/MightyBoard/shared/LPCPort.hh **** *
   9:src/MightyBoard/shared/LPCPort.hh **** * This program is distributed in the hope that it will be useful,
  10:src/MightyBoard/shared/LPCPort.hh **** * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:src/MightyBoard/shared/LPCPort.hh **** * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:src/MightyBoard/shared/LPCPort.hh **** * GNU General Public License for more details.
  13:src/MightyBoard/shared/LPCPort.hh **** *
  14:src/MightyBoard/shared/LPCPort.hh **** * You should have received a copy of the GNU General Public License
  15:src/MightyBoard/shared/LPCPort.hh **** * along with this program.  If not, see <http://www.gnu.org/licenses/>
  16:src/MightyBoard/shared/LPCPort.hh **** */
  17:src/MightyBoard/shared/LPCPort.hh **** 
  18:src/MightyBoard/shared/LPCPort.hh **** #ifndef SHARED_AVR_PORT_HH_
  19:src/MightyBoard/shared/LPCPort.hh **** #define SHARED_AVR_PORT_HH_
  20:src/MightyBoard/shared/LPCPort.hh **** 
  21:src/MightyBoard/shared/LPCPort.hh **** #define __STDC_LIMIT_MACROS
  22:src/MightyBoard/shared/LPCPort.hh **** //#include <stdint.h>
  23:src/MightyBoard/shared/LPCPort.hh **** //#include <util/atomic.h>
  24:src/MightyBoard/shared/LPCPort.hh **** 
  25:src/MightyBoard/shared/LPCPort.hh **** extern "C" {
  26:src/MightyBoard/shared/LPCPort.hh **** 	#include "lpc_types.h"
  27:src/MightyBoard/shared/LPCPort.hh **** 	#include "lpc17xx_gpio.h"
  28:src/MightyBoard/shared/LPCPort.hh **** }
  29:src/MightyBoard/shared/LPCPort.hh **** 
  30:src/MightyBoard/shared/LPCPort.hh **** 
  31:src/MightyBoard/shared/LPCPort.hh **** #define NULL_PORT 0xff
  32:src/MightyBoard/shared/LPCPort.hh **** 
  33:src/MightyBoard/shared/LPCPort.hh **** class LPCPort {
  34:src/MightyBoard/shared/LPCPort.hh **** private:
  35:src/MightyBoard/shared/LPCPort.hh **** 	const uint8_t port_base;
  36:src/MightyBoard/shared/LPCPort.hh **** 	friend class Pin;
  37:src/MightyBoard/shared/LPCPort.hh **** public:
  38:src/MightyBoard/shared/LPCPort.hh **** 	LPCPort();
  39:src/MightyBoard/shared/LPCPort.hh **** 	LPCPort(uint8_t port_base_in);
  40:src/MightyBoard/shared/LPCPort.hh **** 	bool isNull() const;
  41:src/MightyBoard/shared/LPCPort.hh **** 	void setPinDirectionOut(uint8_t pin_index) const;
  42:src/MightyBoard/shared/LPCPort.hh **** 	void setPinDirectionIn(uint8_t pin_index) const;
  43:src/MightyBoard/shared/LPCPort.hh **** 	bool getPin(uint8_t pin_index) const;
  44:src/MightyBoard/shared/LPCPort.hh **** 	void setPinOn(uint8_t pin_index) const;
  45:src/MightyBoard/shared/LPCPort.hh **** 	void setPinOff(uint8_t pin_index) const;
  46:src/MightyBoard/shared/LPCPort.hh **** };
  47:src/MightyBoard/shared/LPCPort.hh **** 
  48:src/MightyBoard/shared/LPCPort.hh **** 
  49:src/MightyBoard/shared/LPCPort.hh **** const LPCPort Port0(0);
 1191              	 .loc 4 49 0
 1192 0002 40F20000 	 movw r0,#:lower16:.LANCHOR0
 1193 0006 C0F20000 	 movt r0,#:upper16:.LANCHOR0
 1194 000a 4FF00001 	 mov r1,#0
 1195 000e FFF7FEFF 	 bl _ZN7LPCPortC1Eh
  50:src/MightyBoard/shared/LPCPort.hh **** const LPCPort Port1(1);
 1196              	 .loc 4 50 0
 1197 0012 40F20000 	 movw r0,#:lower16:.LANCHOR1
 1198 0016 C0F20000 	 movt r0,#:upper16:.LANCHOR1
 1199 001a 4FF00101 	 mov r1,#1
 1200 001e FFF7FEFF 	 bl _ZN7LPCPortC1Eh
  51:src/MightyBoard/shared/LPCPort.hh **** const LPCPort Port2(2);
 1201              	 .loc 4 51 0
 1202 0022 40F20000 	 movw r0,#:lower16:.LANCHOR2
 1203 0026 C0F20000 	 movt r0,#:upper16:.LANCHOR2
 1204 002a 4FF00201 	 mov r1,#2
 1205 002e FFF7FEFF 	 bl _ZN7LPCPortC1Eh
  52:src/MightyBoard/shared/LPCPort.hh **** const LPCPort Port3(3);
 1206              	 .loc 4 52 0
 1207 0032 40F20000 	 movw r0,#:lower16:.LANCHOR3
 1208 0036 C0F20000 	 movt r0,#:upper16:.LANCHOR3
 1209 003a 4FF00301 	 mov r1,#3
 1210 003e FFF7FEFF 	 bl _ZN7LPCPortC1Eh
  53:src/MightyBoard/shared/LPCPort.hh **** const LPCPort Port4(4);
 1211              	 .loc 4 53 0
 1212 0042 40F20000 	 movw r0,#:lower16:.LANCHOR4
 1213 0046 C0F20000 	 movt r0,#:upper16:.LANCHOR4
 1214 004a 4FF00401 	 mov r1,#4
 1215 004e FFF7FEFF 	 bl _ZN7LPCPortC1Eh
  54:src/MightyBoard/shared/LPCPort.hh **** 
  55:src/MightyBoard/shared/LPCPort.hh **** const LPCPort NullPort(0xff);
 1216              	 .loc 4 55 0
 1217 0052 40F20004 	 movw r4,#:lower16:.LANCHOR5
 1218 0056 C0F20004 	 movt r4,#:upper16:.LANCHOR5
 1219 005a 2046     	 mov r0,r4
 1220 005c 4FF0FF01 	 mov r1,#255
 1221 0060 FFF7FEFF 	 bl _ZN7LPCPortC1Eh
 1222              	 .file 5 "src/MightyBoard/shared/Pin.hh"
   1:src/MightyBoard/shared/Pin.hh **** #ifndef PIN_HH
   2:src/MightyBoard/shared/Pin.hh **** #define PIN_HH
   3:src/MightyBoard/shared/Pin.hh **** 
   4:src/MightyBoard/shared/Pin.hh **** #include "LPCPort.hh"
   5:src/MightyBoard/shared/Pin.hh **** #include "Pin.hh"
   6:src/MightyBoard/shared/Pin.hh **** extern "C" {
   7:src/MightyBoard/shared/Pin.hh **** 	#include "lpc17xx_gpio.h"
   8:src/MightyBoard/shared/Pin.hh **** 	#include "lpc17xx_pinsel.h"
   9:src/MightyBoard/shared/Pin.hh **** 	#include "comm.h"
  10:src/MightyBoard/shared/Pin.hh **** }
  11:src/MightyBoard/shared/Pin.hh **** 
  12:src/MightyBoard/shared/Pin.hh **** /// \ingroup HardwareLibraries
  13:src/MightyBoard/shared/Pin.hh **** class Pin {
  14:src/MightyBoard/shared/Pin.hh **** private:
  15:src/MightyBoard/shared/Pin.hh **** 	uint8_t port_base;
  16:src/MightyBoard/shared/Pin.hh **** 	bool is_null;
  17:src/MightyBoard/shared/Pin.hh **** 	uint8_t pin_index;
  18:src/MightyBoard/shared/Pin.hh **** 	uint8_t pin_mask;
  19:src/MightyBoard/shared/Pin.hh **** 	uint8_t pin_mask_inverted;
  20:src/MightyBoard/shared/Pin.hh **** 
  21:src/MightyBoard/shared/Pin.hh **** public:
  22:src/MightyBoard/shared/Pin.hh **** 	Pin();
  23:src/MightyBoard/shared/Pin.hh **** 	Pin(const LPCPort& port_in, uint8_t pin_index_in);
  24:src/MightyBoard/shared/Pin.hh **** 	Pin(const Pin& other_pin);
  25:src/MightyBoard/shared/Pin.hh **** 	bool isNull() const;
  26:src/MightyBoard/shared/Pin.hh **** 	void setDirection(bool out) const;
  27:src/MightyBoard/shared/Pin.hh **** 	bool /*Pin::*/getValue() const {
  28:src/MightyBoard/shared/Pin.hh **** 		if (is_null)
  29:src/MightyBoard/shared/Pin.hh **** 			return false; // null pin is always low ... ?
  30:src/MightyBoard/shared/Pin.hh **** 		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
  31:src/MightyBoard/shared/Pin.hh **** //		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
  32:src/MightyBoard/shared/Pin.hh **** 	};
  33:src/MightyBoard/shared/Pin.hh **** 
  34:src/MightyBoard/shared/Pin.hh **** 	void /*Pin::*/setValue(bool on) const {
  35:src/MightyBoard/shared/Pin.hh **** 		if (is_null)
  36:src/MightyBoard/shared/Pin.hh **** 		 	return;
  37:src/MightyBoard/shared/Pin.hh **** 		// uint8_t oldSREG = SREG;
  38:src/MightyBoard/shared/Pin.hh **** 
  39:src/MightyBoard/shared/Pin.hh **** //		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
  40:src/MightyBoard/shared/Pin.hh **** 		// cli();
  41:src/MightyBoard/shared/Pin.hh **** 		if (on) {
  42:src/MightyBoard/shared/Pin.hh **** //			PORTx |= pin_mask;
  43:src/MightyBoard/shared/Pin.hh **** //			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
  44:src/MightyBoard/shared/Pin.hh **** 			GPIO_SetValue(port_base, _BV(pin_index));
  45:src/MightyBoard/shared/Pin.hh **** 		} else {
  46:src/MightyBoard/shared/Pin.hh **** //			PORTx &= pin_mask_inverted;
  47:src/MightyBoard/shared/Pin.hh **** //			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
  48:src/MightyBoard/shared/Pin.hh **** 			GPIO_ClearValue(port_base, _BV(pin_index));
  49:src/MightyBoard/shared/Pin.hh **** 		}
  50:src/MightyBoard/shared/Pin.hh **** 		// SREG = oldSREG;
  51:src/MightyBoard/shared/Pin.hh **** 	};
  52:src/MightyBoard/shared/Pin.hh **** 
  53:src/MightyBoard/shared/Pin.hh **** 	void /*Pin::*/setValueOn() const {
  54:src/MightyBoard/shared/Pin.hh **** 		if (is_null)
  55:src/MightyBoard/shared/Pin.hh **** 		 	return;
  56:src/MightyBoard/shared/Pin.hh **** 		// uint8_t oldSREG = SREG;
  57:src/MightyBoard/shared/Pin.hh **** 		// cli();
  58:src/MightyBoard/shared/Pin.hh **** //		PORTx |= pin_mask;
  59:src/MightyBoard/shared/Pin.hh **** 		GPIO_SetValue(port_base, _BV(pin_index));
  60:src/MightyBoard/shared/Pin.hh **** 		// SREG = oldSREG;
  61:src/MightyBoard/shared/Pin.hh **** 	};
  62:src/MightyBoard/shared/Pin.hh **** 
  63:src/MightyBoard/shared/Pin.hh **** 	void /*Pin::*/setValueOff() const {
  64:src/MightyBoard/shared/Pin.hh **** 		// if (is_null)
  65:src/MightyBoard/shared/Pin.hh **** 		// 	return;
  66:src/MightyBoard/shared/Pin.hh **** 		// uint8_t oldSREG = SREG;
  67:src/MightyBoard/shared/Pin.hh **** 		// cli();
  68:src/MightyBoard/shared/Pin.hh **** //		PORTx &= pin_mask_inverted;
  69:src/MightyBoard/shared/Pin.hh **** 		GPIO_ClearValue(port_base, _BV(pin_index));
  70:src/MightyBoard/shared/Pin.hh **** 		// SREG = oldSREG;
  71:src/MightyBoard/shared/Pin.hh **** 	};
  72:src/MightyBoard/shared/Pin.hh **** 	// currently not used:
  73:src/MightyBoard/shared/Pin.hh **** 	//const uint8_t getPinIndex() const { return pin_index; }
  74:src/MightyBoard/shared/Pin.hh **** };
  75:src/MightyBoard/shared/Pin.hh **** 
  76:src/MightyBoard/shared/Pin.hh **** static const Pin NullPin(NullPort, 0);
 1223              	 .loc 5 76 0
 1224 0064 40F20000 	 movw r0,#:lower16:.LANCHOR6
 1225 0068 C0F20000 	 movt r0,#:upper16:.LANCHOR6
 1226 006c 2146     	 mov r1,r4
 1227 006e 4FF00002 	 mov r2,#0
 1228 0072 FFF7FEFF 	 bl _ZN3PinC1ERK7LPCPorth
 1229              	.LBE75:
 1230              	.LBE74:
 1231              	 .loc 1 383 0
 1232 0076 10BD     	 pop {r4,pc}
 1233              	 .cfi_endproc
 1234              	.LFE122:
 1236              	 .section .init_array,"aw",%init_array
 1237              	 .align 2
 1238 0000 00000000 	 .word _GLOBAL__sub_I__ZN6HeaterC2ER17TemperatureSensorR14HeatingElementmtb(target1)
 1239              	 .global _ZN6HeaterC1ER17TemperatureSensorR14HeatingElementmtb
 1240              	 .thumb_set _ZN6HeaterC1ER17TemperatureSensorR14HeatingElementmtb,_ZN6HeaterC2ER17TemperatureSensorR14HeatingElementmtb
 1241              	 .section .bss._ZL5Port0,"aw",%nobits
 1242              	 .align 2
 1243              	 .set .LANCHOR0,.+0
 1246              	_ZL5Port0:
 1247 0000 00       	 .space 1
 1248 0001 000000   	 .section .bss._ZL5Port1,"aw",%nobits
 1249              	 .align 2
 1250              	 .set .LANCHOR1,.+0
 1253              	_ZL5Port1:
 1254 0000 00       	 .space 1
 1255 0001 000000   	 .section .bss._ZL5Port2,"aw",%nobits
 1256              	 .align 2
 1257              	 .set .LANCHOR2,.+0
 1260              	_ZL5Port2:
 1261 0000 00       	 .space 1
 1262 0001 000000   	 .section .bss._ZL5Port3,"aw",%nobits
 1263              	 .align 2
 1264              	 .set .LANCHOR3,.+0
 1267              	_ZL5Port3:
 1268 0000 00       	 .space 1
 1269 0001 000000   	 .section .bss._ZL5Port4,"aw",%nobits
 1270              	 .align 2
 1271              	 .set .LANCHOR4,.+0
 1274              	_ZL5Port4:
 1275 0000 00       	 .space 1
 1276 0001 000000   	 .section .rodata.str1.4,"aMS",%progbits,1
 1277              	 .align 2
 1278              	.LC0:
 1279 0000 48656174 	 .ascii "Heater::reset() (%s:%d)\012\000"
 1279      65723A3A 
 1279      72657365 
 1279      74282920 
 1279      2825733A 
 1280 0019 000000   	 .space 3
 1281              	.LC1:
 1282 001c 7372632F 	 .ascii "src/MightyBoard/shared/Heater.cc\000"
 1282      4D696768 
 1282      7479426F 
 1282      6172642F 
 1282      73686172 
 1283 003d 000000   	 .section .bss._ZL8NullPort,"aw",%nobits
 1284              	 .align 2
 1285              	 .set .LANCHOR5,.+0
 1288              	_ZL8NullPort:
 1289 0000 00       	 .space 1
 1290 0001 000000   	 .section .bss._ZL7NullPin,"aw",%nobits
 1291              	 .align 2
 1292              	 .set .LANCHOR6,.+0
 1295              	_ZL7NullPin:
 1296 0000 00000000 	 .space 5
 1296      00
 1297 0005 000000   	 .text
 1298              	.Letext0:
 1299              	 .file 6 "c:\\program files\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/arm-none-eabi/4.6.3/../../../../arm-none-eabi/include/stdint.h"
 1300              	 .file 7 "src/MightyBoard/shared/Types.hh"
 1301              	 .file 8 "src/MightyBoard/shared/Timeout.hh"
 1302              	 .file 9 "src/MightyBoard/shared/Heater.hh"
 1303              	 .file 10 "src/MightyBoard/shared/HeatingElement.hh"
 1304              	 .file 11 "src/MightyBoard/Motherboard/EepromMap.hh"
 1305              	 .file 12 "src/MightyBoard/shared/CoolingFan.hh"
 1306              	 .file 13 "src/MightyBoard/Motherboard/ExtruderBoard.hh"
 1307              	 .file 14 "src/MightyBoard/Motherboard/Cutoff.hh"
 1308              	 .file 15 "src/MightyBoard/Motherboard/Motherboard.hh"
 1309              	 .file 16 "src/MightyBoard/Motherboard/system/core_cm3.h"
 1310              	 .file 17 "src/MightyBoard/shared/Packet.hh"
DEFINED SYMBOLS
                            *ABS*:00000000 Heater.cc
    {standard input}:20     .text._ZN6Heater5resetEv:00000000 $t
    {standard input}:25     .text._ZN6Heater5resetEv:00000000 _ZN6Heater5resetEv
    {standard input}:1278   .rodata.str1.4:00000000 .LC0
    {standard input}:187    .text._ZN6Heater5resetEv:0000011c $d
    {standard input}:192    .text._ZN6HeaterC2ER17TemperatureSensorR14HeatingElementmtb:00000000 $t
    {standard input}:197    .text._ZN6HeaterC2ER17TemperatureSensorR14HeatingElementmtb:00000000 _ZN6HeaterC2ER17TemperatureSensorR14HeatingElementmtb
    {standard input}:245    .text._ZN6Heater22set_target_temperatureEi:00000000 $t
    {standard input}:250    .text._ZN6Heater22set_target_temperatureEi:00000000 _ZN6Heater22set_target_temperatureEi
    {standard input}:354    .text._ZN6Heater30has_reached_target_temperatureEv:00000000 $t
    {standard input}:359    .text._ZN6Heater30has_reached_target_temperatureEv:00000000 _ZN6Heater30has_reached_target_temperatureEv
    {standard input}:414    .text._ZN6Heater19get_set_temperatureEv:00000000 $t
    {standard input}:419    .text._ZN6Heater19get_set_temperatureEv:00000000 _ZN6Heater19get_set_temperatureEv
    {standard input}:435    .text._ZN6Heater23get_current_temperatureEv:00000000 $t
    {standard input}:440    .text._ZN6Heater23get_current_temperatureEv:00000000 _ZN6Heater23get_current_temperatureEv
    {standard input}:458    .text._ZN6Heater15getPIDErrorTermEv:00000000 $t
    {standard input}:463    .text._ZN6Heater15getPIDErrorTermEv:00000000 _ZN6Heater15getPIDErrorTermEv
    {standard input}:486    .text._ZN6Heater15getPIDDeltaTermEv:00000000 $t
    {standard input}:491    .text._ZN6Heater15getPIDDeltaTermEv:00000000 _ZN6Heater15getPIDDeltaTermEv
    {standard input}:514    .text._ZN6Heater16getPIDLastOutputEv:00000000 $t
    {standard input}:519    .text._ZN6Heater16getPIDLastOutputEv:00000000 _ZN6Heater16getPIDLastOutputEv
    {standard input}:542    .text._ZN6Heater9isHeatingEv:00000000 $t
    {standard input}:547    .text._ZN6Heater9isHeatingEv:00000000 _ZN6Heater9isHeatingEv
    {standard input}:586    .text._ZN6Heater9isCoolingEv:00000000 $t
    {standard input}:591    .text._ZN6Heater9isCoolingEv:00000000 _ZN6Heater9isCoolingEv
    {standard input}:633    .text._ZN6Heater8getDeltaEv:00000000 $t
    {standard input}:638    .text._ZN6Heater8getDeltaEv:00000000 _ZN6Heater8getDeltaEv
    {standard input}:679    .text._ZN6Heater10set_outputEh:00000000 $t
    {standard input}:684    .text._ZN6Heater10set_outputEh:00000000 _ZN6Heater10set_outputEh
    {standard input}:709    .text._ZN6Heater5PauseEb:00000000 $t
    {standard input}:714    .text._ZN6Heater5PauseEb:00000000 _ZN6Heater5PauseEb
    {standard input}:786    .text._ZN6Heater4failEv:00000000 $t
    {standard input}:791    .text._ZN6Heater4failEv:00000000 _ZN6Heater4failEv
    {standard input}:822    .text._ZN6Heater18manage_temperatureEv:00000000 $t
    {standard input}:827    .text._ZN6Heater18manage_temperatureEv:00000000 _ZN6Heater18manage_temperatureEv
    {standard input}:1130   .text._ZN6Heater10has_failedEv:00000000 $t
    {standard input}:1135   .text._ZN6Heater10has_failedEv:00000000 _ZN6Heater10has_failedEv
    {standard input}:1151   .text._ZN6Heater11GetFailModeEv:00000000 $t
    {standard input}:1156   .text._ZN6Heater11GetFailModeEv:00000000 _ZN6Heater11GetFailModeEv
    {standard input}:1172   .text._GLOBAL__sub_I__ZN6HeaterC2ER17TemperatureSensorR14HeatingElementmtb:00000000 $t
    {standard input}:1176   .text._GLOBAL__sub_I__ZN6HeaterC2ER17TemperatureSensorR14HeatingElementmtb:00000000 _GLOBAL__sub_I__ZN6HeaterC2ER17TemperatureSensorR14HeatingElementmtb
    {standard input}:1243   .bss._ZL5Port0:00000000 .LANCHOR0
    {standard input}:1250   .bss._ZL5Port1:00000000 .LANCHOR1
    {standard input}:1257   .bss._ZL5Port2:00000000 .LANCHOR2
    {standard input}:1264   .bss._ZL5Port3:00000000 .LANCHOR3
    {standard input}:1271   .bss._ZL5Port4:00000000 .LANCHOR4
    {standard input}:1285   .bss._ZL8NullPort:00000000 .LANCHOR5
    {standard input}:1292   .bss._ZL7NullPin:00000000 .LANCHOR6
    {standard input}:1237   .init_array:00000000 $d
    {standard input}:197    .text._ZN6HeaterC2ER17TemperatureSensorR14HeatingElementmtb:00000000 _ZN6HeaterC1ER17TemperatureSensorR14HeatingElementmtb
    {standard input}:1242   .bss._ZL5Port0:00000000 $d
    {standard input}:1246   .bss._ZL5Port0:00000000 _ZL5Port0
    {standard input}:1249   .bss._ZL5Port1:00000000 $d
    {standard input}:1253   .bss._ZL5Port1:00000000 _ZL5Port1
    {standard input}:1256   .bss._ZL5Port2:00000000 $d
    {standard input}:1260   .bss._ZL5Port2:00000000 _ZL5Port2
    {standard input}:1263   .bss._ZL5Port3:00000000 $d
    {standard input}:1267   .bss._ZL5Port3:00000000 _ZL5Port3
    {standard input}:1270   .bss._ZL5Port4:00000000 $d
    {standard input}:1274   .bss._ZL5Port4:00000000 _ZL5Port4
    {standard input}:1277   .rodata.str1.4:00000000 $d
    {standard input}:1281   .rodata.str1.4:0000001c .LC1
    {standard input}:1284   .bss._ZL8NullPort:00000000 $d
    {standard input}:1288   .bss._ZL8NullPort:00000000 _ZL8NullPort
    {standard input}:1291   .bss._ZL7NullPin:00000000 $d
    {standard input}:1295   .bss._ZL7NullPin:00000000 _ZL7NullPin
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_fcmpeq
xprintf
_ZN7TimeoutC1Ev
_ZN6eeprom16getEepromFixed16Etf
_ZN3PID5resetEv
_ZN3PID9setTargetEi
_ZN7Timeout5startEm
_ZN3PIDC1Ev
_ZN3PID12getErrorTermEv
_ZN3PID12getDeltaTermEv
_ZN3PID13getLastOutputEv
_ZN11Motherboard11motherboardE
_ZN11Motherboard10heaterFailE14HeaterFailMode
_ZN7Timeout10hasElapsedEv
_ZN3PID11reset_stateEv
_ZN3PID9calculateEi
_ZN7LPCPortC1Eh
_ZN3PinC1ERK7LPCPorth
