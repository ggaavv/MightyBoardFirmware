   1              	 .syntax unified
   2              	 .cpu cortex-m3
   3              	 .fpu softvfp
   4              	 .eabi_attribute 20,1
   5              	 .eabi_attribute 21,1
   6              	 .eabi_attribute 23,3
   7              	 .eabi_attribute 24,1
   8              	 .eabi_attribute 25,1
   9              	 .eabi_attribute 26,1
  10              	 .eabi_attribute 30,1
  11              	 .eabi_attribute 34,1
  12              	 .eabi_attribute 18,4
  13              	 .thumb
  14              	 .file "UART.cc"
  15              	 .text
  16              	.Ltext0:
  17              	 .cfi_sections .debug_frame
  18              	 .section .text._ZN4UART11init_serialEv,"ax",%progbits
  19              	 .align 2
  20              	 .global _ZN4UART11init_serialEv
  21              	 .thumb
  22              	 .thumb_func
  24              	_ZN4UART11init_serialEv:
  25              	.LFB73:
  26              	 .file 1 "src/MightyBoard/shared/UART.cc"
   1:src/MightyBoard/shared/UART.cc **** /*
   2:src/MightyBoard/shared/UART.cc ****  * Copyright 2010 by Adam Mayer	 <adam@makerbot.com>
   3:src/MightyBoard/shared/UART.cc ****  *
   4:src/MightyBoard/shared/UART.cc ****  * This program is free software: you can redistribute it and/or modify
   5:src/MightyBoard/shared/UART.cc ****  * it under the terms of the GNU General Public License as published by
   6:src/MightyBoard/shared/UART.cc ****  * the Free Software Foundation, either version 3 of the License, or
   7:src/MightyBoard/shared/UART.cc ****  * (at your option) any later version.
   8:src/MightyBoard/shared/UART.cc ****  *
   9:src/MightyBoard/shared/UART.cc ****  * This program is distributed in the hope that it will be useful,
  10:src/MightyBoard/shared/UART.cc ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:src/MightyBoard/shared/UART.cc ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:src/MightyBoard/shared/UART.cc ****  * GNU General Public License for more details.
  13:src/MightyBoard/shared/UART.cc ****  *
  14:src/MightyBoard/shared/UART.cc ****  * You should have received a copy of the GNU General Public License
  15:src/MightyBoard/shared/UART.cc ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>
  16:src/MightyBoard/shared/UART.cc ****  */
  17:src/MightyBoard/shared/UART.cc **** 
  18:src/MightyBoard/shared/UART.cc **** 
  19:src/MightyBoard/shared/UART.cc **** #include "UART.hh"
  20:src/MightyBoard/shared/UART.cc **** #include "Pin.hh"
  21:src/MightyBoard/shared/UART.cc **** #include <stdint.h>
  22:src/MightyBoard/shared/UART.cc **** //#include <avr/sfr_defs.h>
  23:src/MightyBoard/shared/UART.cc **** //#include <avr/interrupt.h>
  24:src/MightyBoard/shared/UART.cc **** //#include <avr/io.h>
  25:src/MightyBoard/shared/UART.cc **** //#include <util/delay.h>
  26:src/MightyBoard/shared/UART.cc **** //#include <avr/io.h>
  27:src/MightyBoard/shared/UART.cc **** 
  28:src/MightyBoard/shared/UART.cc **** #include "Delay.hh"
  29:src/MightyBoard/shared/UART.cc **** extern "C" {
  30:src/MightyBoard/shared/UART.cc **** 	#include "lpc17xx_uart.h"
  31:src/MightyBoard/shared/UART.cc **** 	#include "lpc17xx_pinsel.h"
  32:src/MightyBoard/shared/UART.cc **** 	#include "LPC17xx.h"
  33:src/MightyBoard/shared/UART.cc **** 
  34:src/MightyBoard/shared/UART.cc **** 	#include "usbhw.h"
  35:src/MightyBoard/shared/UART.cc **** 	#include "usbcfg.h"
  36:src/MightyBoard/shared/UART.cc **** 	#include "cdcuser.h"
  37:src/MightyBoard/shared/UART.cc **** 	#include "usbcore.h"
  38:src/MightyBoard/shared/UART.cc **** 	#include "comm.h"
  39:src/MightyBoard/shared/UART.cc **** 	#include "lpc17xx_wdt.h"
  40:src/MightyBoard/shared/UART.cc **** }
  41:src/MightyBoard/shared/UART.cc **** 
  42:src/MightyBoard/shared/UART.cc **** // TODO: There should be a better way to enable this flag?
  43:src/MightyBoard/shared/UART.cc **** #if ASSERT_LINE_FIX
  44:src/MightyBoard/shared/UART.cc **** #include "ExtruderBoard.hh"
  45:src/MightyBoard/shared/UART.cc **** #endif
  46:src/MightyBoard/shared/UART.cc **** 
  47:src/MightyBoard/shared/UART.cc **** // Avoid repeatedly creating temp objects
  48:src/MightyBoard/shared/UART.cc **** const Pin TX_Enable = TX_ENABLE_PIN;
  49:src/MightyBoard/shared/UART.cc **** const Pin RX_Enable = RX_ENABLE_PIN;
  50:src/MightyBoard/shared/UART.cc **** 
  51:src/MightyBoard/shared/UART.cc **** // We have to track the number of bytes that have been sent, so that we can filter
  52:src/MightyBoard/shared/UART.cc **** // them from our receive buffer later.This is only used for RS485 mode.
  53:src/MightyBoard/shared/UART.cc **** volatile uint8_t loopback_bytes = 0;
  54:src/MightyBoard/shared/UART.cc **** /*
  55:src/MightyBoard/shared/UART.cc **** // We support three platforms: Atmega168 (1 UART), Atmega644, and Atmega1280/2560
  56:src/MightyBoard/shared/UART.cc **** #if defined (__AVR_ATmega168__)     \
  57:src/MightyBoard/shared/UART.cc ****     || defined (__AVR_ATmega328__)  \
  58:src/MightyBoard/shared/UART.cc ****     || defined (__AVR_ATmega644P__) \
  59:src/MightyBoard/shared/UART.cc ****     || defined (__AVR_ATmega1280__) \
  60:src/MightyBoard/shared/UART.cc ****     || defined (__AVR_ATmega2560__)
  61:src/MightyBoard/shared/UART.cc **** #else
  62:src/MightyBoard/shared/UART.cc ****     #error UART not implemented on this processor type!
  63:src/MightyBoard/shared/UART.cc **** #endif
  64:src/MightyBoard/shared/UART.cc **** 
  65:src/MightyBoard/shared/UART.cc **** #if defined (__AVR_ATmega168__) || defined (__AVR_ATmega328__)
  66:src/MightyBoard/shared/UART.cc **** 
  67:src/MightyBoard/shared/UART.cc ****     #define UBRR_VALUE 25
  68:src/MightyBoard/shared/UART.cc ****     #define UCSR0A_VALUE 0
  69:src/MightyBoard/shared/UART.cc **** 
  70:src/MightyBoard/shared/UART.cc ****     #define INIT_SERIAL(uart_) \
  71:src/MightyBoard/shared/UART.cc ****     { \
  72:src/MightyBoard/shared/UART.cc ****         UBRR0H = UBRR_VALUE >> 8; \
  73:src/MightyBoard/shared/UART.cc ****         UBRR0L = UBRR_VALUE & 0xff; \
  74:src/MightyBoard/shared/UART.cc ****         \
  75:src/MightyBoard/shared/UART.cc ****         // set config for uart, explicitly clear TX interrupt flag \
  76:src/MightyBoard/shared/UART.cc ****         UCSR0A = UCSR0A_VALUE | _BV(TXC0); \
  77:src/MightyBoard/shared/UART.cc ****         UCSR0B = _BV(RXEN0) | _BV(TXEN0); \
  78:src/MightyBoard/shared/UART.cc ****         UCSR0C = _BV(UCSZ01)|_BV(UCSZ00); \
  79:src/MightyBoard/shared/UART.cc ****     }
  80:src/MightyBoard/shared/UART.cc **** 
  81:src/MightyBoard/shared/UART.cc **** #elif defined (__AVR_ATmega644P__)
  82:src/MightyBoard/shared/UART.cc **** 
  83:src/MightyBoard/shared/UART.cc ****     #define UBRR_VALUE 25
  84:src/MightyBoard/shared/UART.cc ****     #define UBRRA_VALUE 0
  85:src/MightyBoard/shared/UART.cc **** 
  86:src/MightyBoard/shared/UART.cc ****     // Adapted from ancient arduino/wiring rabbit hole
  87:src/MightyBoard/shared/UART.cc ****     #define INIT_SERIAL(uart_) \
  88:src/MightyBoard/shared/UART.cc ****     { \
  89:src/MightyBoard/shared/UART.cc ****         UBRR##uart_##H = UBRR_VALUE >> 8; \
  90:src/MightyBoard/shared/UART.cc ****         UBRR##uart_##L = UBRR_VALUE & 0xff; \
  91:src/MightyBoard/shared/UART.cc ****         \
  92:src/MightyBoard/shared/UART.cc ****         // set config for uart_  \
  93:src/MightyBoard/shared/UART.cc ****         UCSR##uart_##A = UBRRA_VALUE; \
  94:src/MightyBoard/shared/UART.cc ****         UCSR##uart_##B = _BV(RXEN##uart_) | _BV(TXEN##uart_); \
  95:src/MightyBoard/shared/UART.cc ****         UCSR##uart_##C = _BV(UCSZ##uart_##1)|_BV(UCSZ##uart_##0); \
  96:src/MightyBoard/shared/UART.cc ****     }
  97:src/MightyBoard/shared/UART.cc **** 
  98:src/MightyBoard/shared/UART.cc **** #elif defined (__AVR_ATmega1280__) || defined (__AVR_ATmega2560__)
  99:src/MightyBoard/shared/UART.cc **** 
 100:src/MightyBoard/shared/UART.cc ****     // Use double-speed mode for more accurate baud rate?
 101:src/MightyBoard/shared/UART.cc ****     #define UBRR0_VALUE 16 // 115200 baud
 102:src/MightyBoard/shared/UART.cc ****     #define UBRR1_VALUE 51 // 38400 baud
 103:src/MightyBoard/shared/UART.cc ****     #define UCSRA_VALUE(uart_) _BV(U2X##uart_)
 104:src/MightyBoard/shared/UART.cc **** 
 105:src/MightyBoard/shared/UART.cc ****     // Adapted from ancient arduino/wiring rabbit hole
 106:src/MightyBoard/shared/UART.cc ****     #define INIT_SERIAL(uart_) \
 107:src/MightyBoard/shared/UART.cc ****     { \
 108:src/MightyBoard/shared/UART.cc ****         UBRR##uart_##H = UBRR##uart_##_VALUE >> 8; \
 109:src/MightyBoard/shared/UART.cc ****         UBRR##uart_##L = UBRR##uart_##_VALUE & 0xff; \
 110:src/MightyBoard/shared/UART.cc ****         \
 111:src/MightyBoard/shared/UART.cc ****         // set config for uart_  \
 112:src/MightyBoard/shared/UART.cc ****         UCSR##uart_##A = UCSRA_VALUE(uart_); \
 113:src/MightyBoard/shared/UART.cc ****         UCSR##uart_##B = _BV(RXEN##uart_) | _BV(TXEN##uart_); \
 114:src/MightyBoard/shared/UART.cc ****         UCSR##uart_##C = _BV(UCSZ##uart_##1)|_BV(UCSZ##uart_##0); \
 115:src/MightyBoard/shared/UART.cc ****     }
 116:src/MightyBoard/shared/UART.cc **** #endif
 117:src/MightyBoard/shared/UART.cc **** 
 118:src/MightyBoard/shared/UART.cc **** #define ENABLE_SERIAL_INTERRUPTS(uart_) \
 119:src/MightyBoard/shared/UART.cc **** { \
 120:src/MightyBoard/shared/UART.cc **** UCSR##uart_##B |= _BV(RXCIE##uart_) | _BV(TXCIE##uart_); \
 121:src/MightyBoard/shared/UART.cc **** }
 122:src/MightyBoard/shared/UART.cc **** 
 123:src/MightyBoard/shared/UART.cc **** #define DISABLE_SERIAL_INTERRUPTS(uart_) \
 124:src/MightyBoard/shared/UART.cc **** { \
 125:src/MightyBoard/shared/UART.cc **** UCSR##uart_##B &= ~(_BV(RXCIE##uart_) | _BV(TXCIE##uart_)); \
 126:src/MightyBoard/shared/UART.cc **** }
 127:src/MightyBoard/shared/UART.cc **** 
 128:src/MightyBoard/shared/UART.cc **** // TODO: Move these definitions to the board files, where they belong.
 129:src/MightyBoard/shared/UART.cc **** #if defined (__AVR_ATmega168__) \
 130:src/MightyBoard/shared/UART.cc ****     || defined (__AVR_ATmega328__)
 131:src/MightyBoard/shared/UART.cc **** 
 132:src/MightyBoard/shared/UART.cc ****     UART UART::hostUART(0, RS485);
 133:src/MightyBoard/shared/UART.cc **** 
 134:src/MightyBoard/shared/UART.cc **** #elif defined (__AVR_ATmega644P__) \
 135:src/MightyBoard/shared/UART.cc ****     || defined (__AVR_ATmega1280__) \
 136:src/MightyBoard/shared/UART.cc ****     || defined (__AVR_ATmega2560__)
 137:src/MightyBoard/shared/UART.cc **** 
 138:src/MightyBoard/shared/UART.cc ****     UART UART::hostUART(0, RS232);
 139:src/MightyBoard/shared/UART.cc **** 
 140:src/MightyBoard/shared/UART.cc ****     #if HAS_SLAVE_UART
 141:src/MightyBoard/shared/UART.cc ****         UART UART::slaveUART(1, RS485);
 142:src/MightyBoard/shared/UART.cc ****     #endif
 143:src/MightyBoard/shared/UART.cc **** 
 144:src/MightyBoard/shared/UART.cc **** #endif
 145:src/MightyBoard/shared/UART.cc **** */
 146:src/MightyBoard/shared/UART.cc **** 
 147:src/MightyBoard/shared/UART.cc **** void UART::init_serial() {
  27              	 .loc 1 147 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	.LVL0:
  32 0000 70B5     	 push {r4,r5,r6,lr}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 16
  35              	 .cfi_offset 14,-4
  36              	 .cfi_offset 6,-8
  37              	 .cfi_offset 5,-12
  38              	 .cfi_offset 4,-16
  39 0002 84B0     	 sub sp,sp,#16
  40              	.LCFI1:
  41              	 .cfi_def_cfa_offset 32
  42              	.LBB26:
  43              	.LBB27:
 148:src/MightyBoard/shared/UART.cc ****     if(index_ == RS232) {
  44              	 .loc 1 148 0
  45 0004 4378     	 ldrb r3,[r0,#1]
  46 0006 ABB9     	 cbnz r3,.L2
 149:src/MightyBoard/shared/UART.cc ****     	xprintf("USB_Init" " (%s:%d)\n",_F_,_L_);
  47              	 .loc 1 149 0 discriminator 1
  48 0008 2E4C     	 ldr r4,.L4
  49 000a 40F20000 	 movw r0,#:lower16:.LC0
  50              	.LVL1:
  51 000e C0F20000 	 movt r0,#:upper16:.LC0
  52 0012 2146     	 mov r1,r4
  53 0014 4FF09502 	 mov r2,#149
  54 0018 FFF7FEFF 	 bl xprintf
 150:src/MightyBoard/shared/UART.cc ****     	USB_Init();
  55              	 .loc 1 150 0 discriminator 1
  56 001c FFF7FEFF 	 bl USB_Init
 151:src/MightyBoard/shared/UART.cc ****     	xprintf("b4 USB config" " (%s:%d)\n",_F_,_L_);
  57              	 .loc 1 151 0 discriminator 1
  58 0020 40F20000 	 movw r0,#:lower16:.LC2
  59 0024 C0F20000 	 movt r0,#:upper16:.LC2
  60 0028 2146     	 mov r1,r4
  61 002a 4FF09702 	 mov r2,#151
  62 002e FFF7FEFF 	 bl xprintf
  63 0032 3BE0     	 b .L3
  64              	.LVL2:
  65              	.L2:
  66              	.LBB28:
 152:src/MightyBoard/shared/UART.cc ****  //   	while (!USB_Configuration){		// wait until USB is configured
 153:src/MightyBoard/shared/UART.cc ****  //   		xprintf("b4 USB config" " (%s:%d)\n",_F_,_L_);
 154:src/MightyBoard/shared/UART.cc ****  //   	}
 155:src/MightyBoard/shared/UART.cc ****     }
 156:src/MightyBoard/shared/UART.cc **** #if HAS_SLAVE_UART
 157:src/MightyBoard/shared/UART.cc ****     else {
 158:src/MightyBoard/shared/UART.cc ****     	xprintf("rs485" " (%s:%d)\n",_F_,_L_);
  67              	 .loc 1 158 0 discriminator 1
  68 0034 40F20000 	 movw r0,#:lower16:.LC3
  69              	.LVL3:
  70 0038 C0F20000 	 movt r0,#:upper16:.LC3
  71 003c 2149     	 ldr r1,.L4
  72 003e 4FF09E02 	 mov r2,#158
  73 0042 FFF7FEFF 	 bl xprintf
 159:src/MightyBoard/shared/UART.cc **** 		// UART Configuration Structure
 160:src/MightyBoard/shared/UART.cc **** 		UART_CFG_Type u_cfg;
 161:src/MightyBoard/shared/UART.cc **** 		u_cfg.Baud_rate = 38400;
  74              	 .loc 1 161 0 discriminator 1
  75 0046 4FF41643 	 mov r3,#38400
  76 004a 0093     	 str r3,[sp,#0]
 162:src/MightyBoard/shared/UART.cc **** 		u_cfg.Databits = UART_DATABIT_8;
  77              	 .loc 1 162 0 discriminator 1
  78 004c 4FF00303 	 mov r3,#3
  79 0050 8DF80530 	 strb r3,[sp,#5]
 163:src/MightyBoard/shared/UART.cc **** 		u_cfg.Parity = UART_PARITY_NONE;
  80              	 .loc 1 163 0 discriminator 1
  81 0054 4FF00004 	 mov r4,#0
  82 0058 8DF80440 	 strb r4,[sp,#4]
 164:src/MightyBoard/shared/UART.cc **** 		u_cfg.Stopbits = UART_STOPBIT_1;
  83              	 .loc 1 164 0 discriminator 1
  84 005c 8DF80640 	 strb r4,[sp,#6]
 165:src/MightyBoard/shared/UART.cc **** 		UART_Init((LPC_UART_TypeDef *)LPC_UART1, &u_cfg);
  85              	 .loc 1 165 0 discriminator 1
  86 0060 2046     	 mov r0,r4
  87 0062 C4F20100 	 movt r0,16385
  88 0066 6946     	 mov r1,sp
  89 0068 FFF7FEFF 	 bl UART_Init
 166:src/MightyBoard/shared/UART.cc **** 		// Initialize UART0 pin connect
 167:src/MightyBoard/shared/UART.cc **** 		PINSEL_CFG_Type PinCfg;
 168:src/MightyBoard/shared/UART.cc **** 		PinCfg.Funcnum = 1;
  90              	 .loc 1 168 0 discriminator 1
  91 006c 4FF00106 	 mov r6,#1
  92 0070 8DF80A60 	 strb r6,[sp,#10]
 169:src/MightyBoard/shared/UART.cc **** 		PinCfg.OpenDrain = 0;
  93              	 .loc 1 169 0 discriminator 1
  94 0074 8DF80C40 	 strb r4,[sp,#12]
 170:src/MightyBoard/shared/UART.cc **** 		PinCfg.Pinmode = 0;
  95              	 .loc 1 170 0 discriminator 1
  96 0078 8DF80B40 	 strb r4,[sp,#11]
 171:src/MightyBoard/shared/UART.cc **** 		PinCfg.Pinnum = 0;
  97              	 .loc 1 171 0 discriminator 1
  98 007c 8DF80940 	 strb r4,[sp,#9]
 172:src/MightyBoard/shared/UART.cc **** 		PinCfg.Portnum = 0;
  99              	 .loc 1 172 0 discriminator 1
 100 0080 04AD     	 add r5,sp,#16
 101 0082 05F8084D 	 strb r4,[r5,#-8]!
 173:src/MightyBoard/shared/UART.cc **** 		PINSEL_ConfigPin(&PinCfg);
 102              	 .loc 1 173 0 discriminator 1
 103 0086 2846     	 mov r0,r5
 104 0088 FFF7FEFF 	 bl PINSEL_ConfigPin
 174:src/MightyBoard/shared/UART.cc **** 		PinCfg.Pinnum = 1;
 105              	 .loc 1 174 0 discriminator 1
 106 008c 8DF80960 	 strb r6,[sp,#9]
 175:src/MightyBoard/shared/UART.cc **** 		PINSEL_ConfigPin(&PinCfg);
 107              	 .loc 1 175 0 discriminator 1
 108 0090 2846     	 mov r0,r5
 109 0092 FFF7FEFF 	 bl PINSEL_ConfigPin
 110              	.LVL4:
 111              	.LBB29:
 112              	.LBB30:
 113              	 .file 2 "src/MightyBoard/Motherboard/system/core_cm3.h"
   1:src/MightyBoard/Motherboard/system/core_cm3.h **** /**************************************************************************//**
   2:src/MightyBoard/Motherboard/system/core_cm3.h ****  * @file     core_cm3.h
   3:src/MightyBoard/Motherboard/system/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:src/MightyBoard/Motherboard/system/core_cm3.h ****  * @version  V2.01
   5:src/MightyBoard/Motherboard/system/core_cm3.h ****  * @date     06. December 2010
   6:src/MightyBoard/Motherboard/system/core_cm3.h ****  *
   7:src/MightyBoard/Motherboard/system/core_cm3.h ****  * @note
   8:src/MightyBoard/Motherboard/system/core_cm3.h ****  * Copyright (C) 2009-2010 ARM Limited. All rights reserved.
   9:src/MightyBoard/Motherboard/system/core_cm3.h ****  *
  10:src/MightyBoard/Motherboard/system/core_cm3.h ****  * @par
  11:src/MightyBoard/Motherboard/system/core_cm3.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:src/MightyBoard/Motherboard/system/core_cm3.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:src/MightyBoard/Motherboard/system/core_cm3.h ****  * within development tools that are supporting such ARM based processors.
  14:src/MightyBoard/Motherboard/system/core_cm3.h ****  *
  15:src/MightyBoard/Motherboard/system/core_cm3.h ****  * @par
  16:src/MightyBoard/Motherboard/system/core_cm3.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:src/MightyBoard/Motherboard/system/core_cm3.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:src/MightyBoard/Motherboard/system/core_cm3.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:src/MightyBoard/Motherboard/system/core_cm3.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:src/MightyBoard/Motherboard/system/core_cm3.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:src/MightyBoard/Motherboard/system/core_cm3.h ****  *
  22:src/MightyBoard/Motherboard/system/core_cm3.h ****  ******************************************************************************/
  23:src/MightyBoard/Motherboard/system/core_cm3.h **** #if defined ( __ICCARM__ )
  24:src/MightyBoard/Motherboard/system/core_cm3.h ****  #pragma system_include  /* treat file as system include file for MISRA check */
  25:src/MightyBoard/Motherboard/system/core_cm3.h **** #endif
  26:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  27:src/MightyBoard/Motherboard/system/core_cm3.h **** #ifdef __cplusplus
  28:src/MightyBoard/Motherboard/system/core_cm3.h ****  extern "C" {
  29:src/MightyBoard/Motherboard/system/core_cm3.h **** #endif
  30:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  31:src/MightyBoard/Motherboard/system/core_cm3.h **** #ifndef __CORE_CM3_H_GENERIC
  32:src/MightyBoard/Motherboard/system/core_cm3.h **** #define __CORE_CM3_H_GENERIC
  33:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  34:src/MightyBoard/Motherboard/system/core_cm3.h **** /**  @ingroup  CMSIS
  35:src/MightyBoard/Motherboard/system/core_cm3.h ****  @addtogroup CMSIS_core_LintCinfiguration CMSIS Core Lint Configuration
  36:src/MightyBoard/Motherboard/system/core_cm3.h ****   List of Lint messages which will be suppressed and not shown:
  37:src/MightyBoard/Motherboard/system/core_cm3.h ****     - not yet checked
  38:src/MightyBoard/Motherboard/system/core_cm3.h ****   .
  39:src/MightyBoard/Motherboard/system/core_cm3.h ****   Note:  To re-enable a Message, insert a space before 'lint' *
  40:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  41:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
  42:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  43:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  44:src/MightyBoard/Motherboard/system/core_cm3.h **** /*******************************************************************************
  45:src/MightyBoard/Motherboard/system/core_cm3.h ****  *                 CMSIS definitions
  46:src/MightyBoard/Motherboard/system/core_cm3.h ****  ******************************************************************************/
  47:src/MightyBoard/Motherboard/system/core_cm3.h **** /** @ingroup  CMSIS
  48:src/MightyBoard/Motherboard/system/core_cm3.h ****  * @addtogroup CMSIS_core_definitions CMSIS Core Definitions
  49:src/MightyBoard/Motherboard/system/core_cm3.h ****   This file defines all structures and symbols for CMSIS core:
  50:src/MightyBoard/Motherboard/system/core_cm3.h ****    - CMSIS version number
  51:src/MightyBoard/Motherboard/system/core_cm3.h ****    - Cortex-M core
  52:src/MightyBoard/Motherboard/system/core_cm3.h ****    - Cortex-M core Revision Number
  53:src/MightyBoard/Motherboard/system/core_cm3.h ****   @{
  54:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
  55:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  56:src/MightyBoard/Motherboard/system/core_cm3.h **** /*  CMSIS CM3 definitions */
  57:src/MightyBoard/Motherboard/system/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x02)                                                       /*!<
  58:src/MightyBoard/Motherboard/system/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x00)                                                       /*!<
  59:src/MightyBoard/Motherboard/system/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | __CM3_CMSIS_VERSION_SUB) /*!<
  60:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  61:src/MightyBoard/Motherboard/system/core_cm3.h **** #define __CORTEX_M                (0x03)                                                       /*!<
  62:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  63:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  64:src/MightyBoard/Motherboard/system/core_cm3.h **** #if defined ( __CC_ARM   )
  65:src/MightyBoard/Motherboard/system/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  66:src/MightyBoard/Motherboard/system/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  67:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  68:src/MightyBoard/Motherboard/system/core_cm3.h **** #elif defined ( __ICCARM__ )
  69:src/MightyBoard/Motherboard/system/core_cm3.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
  70:src/MightyBoard/Motherboard/system/core_cm3.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
  71:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  72:src/MightyBoard/Motherboard/system/core_cm3.h **** #elif defined   (  __GNUC__  )
  73:src/MightyBoard/Motherboard/system/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  74:src/MightyBoard/Motherboard/system/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  75:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  76:src/MightyBoard/Motherboard/system/core_cm3.h **** #elif defined   (  __TASKING__  )
  77:src/MightyBoard/Motherboard/system/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
  78:src/MightyBoard/Motherboard/system/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
  79:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  80:src/MightyBoard/Motherboard/system/core_cm3.h **** #endif
  81:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  82:src/MightyBoard/Motherboard/system/core_cm3.h **** #include <stdint.h>                      /*!< standard types definitions                      */
  83:src/MightyBoard/Motherboard/system/core_cm3.h **** #include "core_cmInstr.h"                /*!< Core Instruction Access                         */
  84:src/MightyBoard/Motherboard/system/core_cm3.h **** #include "core_cmFunc.h"                 /*!< Core Function Access                            */
  85:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  86:src/MightyBoard/Motherboard/system/core_cm3.h **** #endif /* __CORE_CM3_H_GENERIC */
  87:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  88:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  89:src/MightyBoard/Motherboard/system/core_cm3.h **** #ifndef __CMSIS_GENERIC
  90:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  91:src/MightyBoard/Motherboard/system/core_cm3.h **** #ifndef __CORE_CM3_H_DEPENDANT
  92:src/MightyBoard/Motherboard/system/core_cm3.h **** #define __CORE_CM3_H_DEPENDANT
  93:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  94:src/MightyBoard/Motherboard/system/core_cm3.h **** /* IO definitions (access restrictions to peripheral registers) */
  95:src/MightyBoard/Motherboard/system/core_cm3.h **** #ifdef __cplusplus
  96:src/MightyBoard/Motherboard/system/core_cm3.h ****   #define     __I     volatile           /*!< defines 'read only' permissions                 */
  97:src/MightyBoard/Motherboard/system/core_cm3.h **** #else
  98:src/MightyBoard/Motherboard/system/core_cm3.h ****   #define     __I     volatile const     /*!< defines 'read only' permissions                 */
  99:src/MightyBoard/Motherboard/system/core_cm3.h **** #endif
 100:src/MightyBoard/Motherboard/system/core_cm3.h **** #define     __O     volatile             /*!< defines 'write only' permissions                */
 101:src/MightyBoard/Motherboard/system/core_cm3.h **** #define     __IO    volatile             /*!< defines 'read / write' permissions              */
 102:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 103:src/MightyBoard/Motherboard/system/core_cm3.h **** /*@} end of group CMSIS_core_definitions */
 104:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 105:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 106:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 107:src/MightyBoard/Motherboard/system/core_cm3.h **** /*******************************************************************************
 108:src/MightyBoard/Motherboard/system/core_cm3.h ****  *                 Register Abstraction
 109:src/MightyBoard/Motherboard/system/core_cm3.h ****  ******************************************************************************/
 110:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 111:src/MightyBoard/Motherboard/system/core_cm3.h **** /** @ingroup  CMSIS
 112:src/MightyBoard/Motherboard/system/core_cm3.h ****  * @addtogroup CMSIS_core_register CMSIS Core Register
 113:src/MightyBoard/Motherboard/system/core_cm3.h ****   Core Register contain:
 114:src/MightyBoard/Motherboard/system/core_cm3.h ****   - Core Register
 115:src/MightyBoard/Motherboard/system/core_cm3.h ****   - Core NVIC Register
 116:src/MightyBoard/Motherboard/system/core_cm3.h ****   - Core SCB Register
 117:src/MightyBoard/Motherboard/system/core_cm3.h ****   - Core SysTick Register
 118:src/MightyBoard/Motherboard/system/core_cm3.h ****   - Core Debug Register
 119:src/MightyBoard/Motherboard/system/core_cm3.h ****   - Core MPU Register
 120:src/MightyBoard/Motherboard/system/core_cm3.h **** */
 121:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 122:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \ingroup  CMSIS_core_register
 123:src/MightyBoard/Motherboard/system/core_cm3.h ****     \defgroup CMSIS_CORE CMSIS Core
 124:src/MightyBoard/Motherboard/system/core_cm3.h ****   Type definitions for the Cortex-M Core Registers
 125:src/MightyBoard/Motherboard/system/core_cm3.h ****   @{
 126:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 127:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 128:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Union type to access the Application Program Status Register (APSR).
 129:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 130:src/MightyBoard/Motherboard/system/core_cm3.h **** typedef union
 131:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 132:src/MightyBoard/Motherboard/system/core_cm3.h ****   struct
 133:src/MightyBoard/Motherboard/system/core_cm3.h ****   {
 134:src/MightyBoard/Motherboard/system/core_cm3.h **** #if (__CORTEX_M != 0x04)
 135:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
 136:src/MightyBoard/Motherboard/system/core_cm3.h **** #else
 137:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
 138:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 139:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
 140:src/MightyBoard/Motherboard/system/core_cm3.h **** #endif
 141:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 142:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 143:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 144:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 145:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 146:src/MightyBoard/Motherboard/system/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 147:src/MightyBoard/Motherboard/system/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 148:src/MightyBoard/Motherboard/system/core_cm3.h **** } APSR_Type;
 149:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 150:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 151:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Union type to access the Interrupt Program Status Register (IPSR).
 152:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 153:src/MightyBoard/Motherboard/system/core_cm3.h **** typedef union
 154:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 155:src/MightyBoard/Motherboard/system/core_cm3.h ****   struct
 156:src/MightyBoard/Motherboard/system/core_cm3.h ****   {
 157:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 158:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
 159:src/MightyBoard/Motherboard/system/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 160:src/MightyBoard/Motherboard/system/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 161:src/MightyBoard/Motherboard/system/core_cm3.h **** } IPSR_Type;
 162:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 163:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 164:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 165:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 166:src/MightyBoard/Motherboard/system/core_cm3.h **** typedef union
 167:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 168:src/MightyBoard/Motherboard/system/core_cm3.h ****   struct
 169:src/MightyBoard/Motherboard/system/core_cm3.h ****   {
 170:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 171:src/MightyBoard/Motherboard/system/core_cm3.h **** #if (__CORTEX_M != 0x04)
 172:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
 173:src/MightyBoard/Motherboard/system/core_cm3.h **** #else
 174:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
 175:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 176:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
 177:src/MightyBoard/Motherboard/system/core_cm3.h **** #endif
 178:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
 179:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
 180:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 181:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 182:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 183:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 184:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 185:src/MightyBoard/Motherboard/system/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 186:src/MightyBoard/Motherboard/system/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 187:src/MightyBoard/Motherboard/system/core_cm3.h **** } xPSR_Type;
 188:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 189:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 190:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Union type to access the Control Registers (CONTROL).
 191:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 192:src/MightyBoard/Motherboard/system/core_cm3.h **** typedef union
 193:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 194:src/MightyBoard/Motherboard/system/core_cm3.h ****   struct
 195:src/MightyBoard/Motherboard/system/core_cm3.h ****   {
 196:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 197:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
 198:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
 199:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
 200:src/MightyBoard/Motherboard/system/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 201:src/MightyBoard/Motherboard/system/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 202:src/MightyBoard/Motherboard/system/core_cm3.h **** } CONTROL_Type;
 203:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 204:src/MightyBoard/Motherboard/system/core_cm3.h **** /*@} end of group CMSIS_CORE */
 205:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 206:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 207:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \ingroup  CMSIS_core_register
 208:src/MightyBoard/Motherboard/system/core_cm3.h ****     \defgroup CMSIS_NVIC CMSIS NVIC
 209:src/MightyBoard/Motherboard/system/core_cm3.h ****   Type definitions for the Cortex-M NVIC Registers
 210:src/MightyBoard/Motherboard/system/core_cm3.h ****   @{
 211:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 212:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 213:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 214:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 215:src/MightyBoard/Motherboard/system/core_cm3.h **** typedef struct
 216:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 217:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t ISER[8];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register   
 218:src/MightyBoard/Motherboard/system/core_cm3.h ****        uint32_t RESERVED0[24];
 219:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t ICER[8];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 220:src/MightyBoard/Motherboard/system/core_cm3.h ****        uint32_t RSERVED1[24];
 221:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t ISPR[8];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register  
 222:src/MightyBoard/Motherboard/system/core_cm3.h ****        uint32_t RESERVED2[24];
 223:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t ICPR[8];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 224:src/MightyBoard/Motherboard/system/core_cm3.h ****        uint32_t RESERVED3[24];
 225:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t IABR[8];                 /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register   
 226:src/MightyBoard/Motherboard/system/core_cm3.h ****        uint32_t RESERVED4[56];
 227:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint8_t  IP[240];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 228:src/MightyBoard/Motherboard/system/core_cm3.h ****        uint32_t RESERVED5[644];
 229:src/MightyBoard/Motherboard/system/core_cm3.h ****   __O  uint32_t STIR;                    /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 230:src/MightyBoard/Motherboard/system/core_cm3.h **** }  NVIC_Type;
 231:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 232:src/MightyBoard/Motherboard/system/core_cm3.h **** /*@} end of group CMSIS_NVIC */
 233:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 234:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 235:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \ingroup  CMSIS_core_register
 236:src/MightyBoard/Motherboard/system/core_cm3.h ****     \defgroup CMSIS_SCB CMSIS SCB
 237:src/MightyBoard/Motherboard/system/core_cm3.h ****   Type definitions for the Cortex-M System Control Block Registers
 238:src/MightyBoard/Motherboard/system/core_cm3.h ****   @{
 239:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 240:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 241:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Structure type to access the System Control Block (SCB).
 242:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 243:src/MightyBoard/Motherboard/system/core_cm3.h **** typedef struct
 244:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 245:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPU ID Base Register            
 246:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control State Register
 247:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register    
 248:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt / Reset Co
 249:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register         
 250:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register  
 251:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint8_t  SHP[12];                 /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 252:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State
 253:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t CFSR;                    /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 254:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t HFSR;                    /*!< Offset: 0x02C (R/W)  Hard Fault Status Register      
 255:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register     
 256:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t MMFAR;                   /*!< Offset: 0x034 (R/W)  Mem Manage Address Register     
 257:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t BFAR;                    /*!< Offset: 0x038 (R/W)  Bus Fault Address Register      
 258:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t AFSR;                    /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 259:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t PFR[2];                  /*!< Offset: 0x040 (R/ )  Processor Feature Register      
 260:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t DFR;                     /*!< Offset: 0x048 (R/ )  Debug Feature Register          
 261:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t ADR;                     /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register      
 262:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t MMFR[4];                 /*!< Offset: 0x050 (R/ )  Memory Model Feature Register   
 263:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t ISAR[5];                 /*!< Offset: 0x060 (R/ )  ISA Feature Register            
 264:src/MightyBoard/Motherboard/system/core_cm3.h **** } SCB_Type;
 265:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 266:src/MightyBoard/Motherboard/system/core_cm3.h **** /* SCB CPUID Register Definitions */
 267:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 268:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 269:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 270:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 271:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 272:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 273:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 274:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 275:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 276:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 277:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 278:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 279:src/MightyBoard/Motherboard/system/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 280:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 281:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 282:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 283:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 284:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 285:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 286:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 287:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 288:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 289:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 290:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 291:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 292:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 293:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 294:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 295:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 296:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 297:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 298:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 299:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 300:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 301:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 302:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 303:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 304:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 305:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 306:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 307:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 308:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 309:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 310:src/MightyBoard/Motherboard/system/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 311:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB 
 312:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (1UL << SCB_VTOR_TBLBASE_Pos)                  /*!< SCB 
 313:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 314:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 315:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 316:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 317:src/MightyBoard/Motherboard/system/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 318:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 319:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 320:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 321:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 322:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 323:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 324:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 325:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 326:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 327:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 328:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 329:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 330:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 331:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 332:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 333:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 334:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 335:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 336:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 337:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 338:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 339:src/MightyBoard/Motherboard/system/core_cm3.h **** /* SCB System Control Register Definitions */
 340:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 341:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 342:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 343:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 344:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 345:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 346:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 347:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 348:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 349:src/MightyBoard/Motherboard/system/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 350:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 351:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 352:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 353:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 354:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 355:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 356:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 357:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 358:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 359:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 360:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 361:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 362:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 363:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 364:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 365:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 366:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 367:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 368:src/MightyBoard/Motherboard/system/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 369:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 370:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 371:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 372:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 373:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 374:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 375:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 376:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 377:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 378:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 379:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 380:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 381:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 382:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 383:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 384:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 385:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 386:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 387:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 388:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 389:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 390:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 391:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 392:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 393:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 394:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 395:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 396:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 397:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 398:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 399:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 400:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 401:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 402:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 403:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 404:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 405:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 406:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 407:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 408:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 409:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 410:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 411:src/MightyBoard/Motherboard/system/core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 412:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 413:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 414:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 415:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 416:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 417:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 418:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 419:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 420:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 421:src/MightyBoard/Motherboard/system/core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 422:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 423:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 424:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 425:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 426:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 427:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 428:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 429:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 430:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 431:src/MightyBoard/Motherboard/system/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 432:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 433:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 434:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 435:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 436:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 437:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 438:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 439:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 440:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 441:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 442:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 443:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 444:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 445:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1UL << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 446:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 447:src/MightyBoard/Motherboard/system/core_cm3.h **** /*@} end of group CMSIS_SCB */
 448:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 449:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 450:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \ingroup  CMSIS_core_register
 451:src/MightyBoard/Motherboard/system/core_cm3.h ****     \defgroup CMSIS_SysTick CMSIS SysTick
 452:src/MightyBoard/Motherboard/system/core_cm3.h ****   Type definitions for the Cortex-M System Timer Registers
 453:src/MightyBoard/Motherboard/system/core_cm3.h ****   @{
 454:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 455:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 456:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Structure type to access the System Timer (SysTick).
 457:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 458:src/MightyBoard/Motherboard/system/core_cm3.h **** typedef struct
 459:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 460:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 461:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register   
 462:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register  
 463:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register    
 464:src/MightyBoard/Motherboard/system/core_cm3.h **** } SysTick_Type;
 465:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 466:src/MightyBoard/Motherboard/system/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 467:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 468:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 469:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 470:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 471:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 472:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 473:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 474:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 475:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 476:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 477:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 478:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 479:src/MightyBoard/Motherboard/system/core_cm3.h **** /* SysTick Reload Register Definitions */
 480:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 481:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 482:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 483:src/MightyBoard/Motherboard/system/core_cm3.h **** /* SysTick Current Register Definitions */
 484:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 485:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 486:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 487:src/MightyBoard/Motherboard/system/core_cm3.h **** /* SysTick Calibration Register Definitions */
 488:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 489:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 490:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 491:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 492:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 493:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 494:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 495:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 496:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 497:src/MightyBoard/Motherboard/system/core_cm3.h **** /*@} end of group CMSIS_SysTick */
 498:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 499:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 500:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \ingroup  CMSIS_core_register
 501:src/MightyBoard/Motherboard/system/core_cm3.h ****     \defgroup CMSIS_ITM CMSIS ITM
 502:src/MightyBoard/Motherboard/system/core_cm3.h ****   Type definitions for the Cortex-M Instrumentation Trace Macrocell (ITM)
 503:src/MightyBoard/Motherboard/system/core_cm3.h ****   @{
 504:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 505:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 506:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 507:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 508:src/MightyBoard/Motherboard/system/core_cm3.h **** typedef struct
 509:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 510:src/MightyBoard/Motherboard/system/core_cm3.h ****   __O  union
 511:src/MightyBoard/Motherboard/system/core_cm3.h ****   {
 512:src/MightyBoard/Motherboard/system/core_cm3.h ****     __O  uint8_t    u8;                  /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit         
 513:src/MightyBoard/Motherboard/system/core_cm3.h ****     __O  uint16_t   u16;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit        
 514:src/MightyBoard/Motherboard/system/core_cm3.h ****     __O  uint32_t   u32;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit        
 515:src/MightyBoard/Motherboard/system/core_cm3.h ****   }  PORT [32];                          /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers     
 516:src/MightyBoard/Motherboard/system/core_cm3.h ****        uint32_t RESERVED0[864];
 517:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t TER;                     /*!< Offset:       (R/W)  ITM Trace Enable Register       
 518:src/MightyBoard/Motherboard/system/core_cm3.h ****        uint32_t RESERVED1[15];
 519:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t TPR;                     /*!< Offset:       (R/W)  ITM Trace Privilege Register    
 520:src/MightyBoard/Motherboard/system/core_cm3.h ****        uint32_t RESERVED2[15];
 521:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t TCR;                     /*!< Offset:       (R/W)  ITM Trace Control Register      
 522:src/MightyBoard/Motherboard/system/core_cm3.h ****        uint32_t RESERVED3[29];
 523:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t IWR;                     /*!< Offset:       (R/W)  ITM Integration Write Register  
 524:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t IRR;                     /*!< Offset:       (R/W)  ITM Integration Read Register   
 525:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t IMCR;                    /*!< Offset:       (R/W)  ITM Integration Mode Control Reg
 526:src/MightyBoard/Motherboard/system/core_cm3.h ****        uint32_t RESERVED4[43];
 527:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t LAR;                     /*!< Offset:       (R/W)  ITM Lock Access Register        
 528:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t LSR;                     /*!< Offset:       (R/W)  ITM Lock Status Register        
 529:src/MightyBoard/Motherboard/system/core_cm3.h ****        uint32_t RESERVED5[6];
 530:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t PID4;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 531:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t PID5;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 532:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t PID6;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 533:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t PID7;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 534:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t PID0;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 535:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t PID1;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 536:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t PID2;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 537:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t PID3;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 538:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t CID0;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 539:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t CID1;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 540:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t CID2;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 541:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t CID3;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 542:src/MightyBoard/Motherboard/system/core_cm3.h **** } ITM_Type;
 543:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 544:src/MightyBoard/Motherboard/system/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 545:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 546:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL << ITM_TPR_PRIVMASK_Pos)                /*!< ITM 
 547:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 548:src/MightyBoard/Motherboard/system/core_cm3.h **** /* ITM Trace Control Register Definitions */
 549:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
 550:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 551:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 552:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_ATBID_Pos                  16                                             /*!< ITM 
 553:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_ATBID_Msk                  (0x7FUL << ITM_TCR_ATBID_Pos)                  /*!< ITM 
 554:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 555:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 556:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 557:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 558:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 559:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 560:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 561:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 562:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 563:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 564:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 565:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 566:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 567:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 568:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 569:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 570:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 571:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1UL << ITM_TCR_ITMENA_Pos)                    /*!< ITM 
 572:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 573:src/MightyBoard/Motherboard/system/core_cm3.h **** /* ITM Integration Write Register Definitions */
 574:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 575:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM 
 576:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 577:src/MightyBoard/Motherboard/system/core_cm3.h **** /* ITM Integration Read Register Definitions */
 578:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 579:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1UL << ITM_IRR_ATREADYM_Pos)                  /*!< ITM 
 580:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 581:src/MightyBoard/Motherboard/system/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 582:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
 583:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM 
 584:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 585:src/MightyBoard/Motherboard/system/core_cm3.h **** /* ITM Lock Status Register Definitions */
 586:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
 587:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 588:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 589:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 590:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 591:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 592:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 593:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_LSR_Present_Msk                (1UL << ITM_LSR_Present_Pos)                   /*!< ITM 
 594:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 595:src/MightyBoard/Motherboard/system/core_cm3.h **** /*@}*/ /* end of group CMSIS_ITM */
 596:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 597:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 598:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \ingroup  CMSIS_core_register
 599:src/MightyBoard/Motherboard/system/core_cm3.h ****     \defgroup CMSIS_InterruptType CMSIS Interrupt Type
 600:src/MightyBoard/Motherboard/system/core_cm3.h ****   Type definitions for the Cortex-M Interrupt Type Register
 601:src/MightyBoard/Motherboard/system/core_cm3.h ****   @{
 602:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 603:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 604:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Structure type to access the Interrupt Type Register.
 605:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 606:src/MightyBoard/Motherboard/system/core_cm3.h **** typedef struct
 607:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 608:src/MightyBoard/Motherboard/system/core_cm3.h ****        uint32_t RESERVED0;
 609:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t ICTR;                    /*!< Offset: 0x004 (R/ )  Interrupt Control Type Register 
 610:src/MightyBoard/Motherboard/system/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 611:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t ACTLR;                   /*!< Offset: 0x008 (R/W)  Auxiliary Control Register      
 612:src/MightyBoard/Motherboard/system/core_cm3.h **** #else
 613:src/MightyBoard/Motherboard/system/core_cm3.h ****        uint32_t RESERVED1;
 614:src/MightyBoard/Motherboard/system/core_cm3.h **** #endif
 615:src/MightyBoard/Motherboard/system/core_cm3.h **** } InterruptType_Type;
 616:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 617:src/MightyBoard/Motherboard/system/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 618:src/MightyBoard/Motherboard/system/core_cm3.h **** #define IntType_ICTR_INTLINESNUM_Pos  0                                                   /*!< Inte
 619:src/MightyBoard/Motherboard/system/core_cm3.h **** #define IntType_ICTR_INTLINESNUM_Msk (0x1FUL << IntType_ICTR_INTLINESNUM_Pos)             /*!< Inte
 620:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 621:src/MightyBoard/Motherboard/system/core_cm3.h **** /* Auxiliary Control Register Definitions */
 622:src/MightyBoard/Motherboard/system/core_cm3.h **** #define IntType_ACTLR_DISFOLD_Pos     2                                                   /*!< Inte
 623:src/MightyBoard/Motherboard/system/core_cm3.h **** #define IntType_ACTLR_DISFOLD_Msk    (1UL << IntType_ACTLR_DISFOLD_Pos)                   /*!< Inte
 624:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 625:src/MightyBoard/Motherboard/system/core_cm3.h **** #define IntType_ACTLR_DISDEFWBUF_Pos  1                                                   /*!< Inte
 626:src/MightyBoard/Motherboard/system/core_cm3.h **** #define IntType_ACTLR_DISDEFWBUF_Msk (1UL << IntType_ACTLR_DISDEFWBUF_Pos)                /*!< Inte
 627:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 628:src/MightyBoard/Motherboard/system/core_cm3.h **** #define IntType_ACTLR_DISMCYCINT_Pos  0                                                   /*!< Inte
 629:src/MightyBoard/Motherboard/system/core_cm3.h **** #define IntType_ACTLR_DISMCYCINT_Msk (1UL << IntType_ACTLR_DISMCYCINT_Pos)                /*!< Inte
 630:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 631:src/MightyBoard/Motherboard/system/core_cm3.h **** /*@}*/ /* end of group CMSIS_InterruptType */
 632:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 633:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 634:src/MightyBoard/Motherboard/system/core_cm3.h **** #if (__MPU_PRESENT == 1)
 635:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \ingroup  CMSIS_core_register
 636:src/MightyBoard/Motherboard/system/core_cm3.h ****     \defgroup CMSIS_MPU CMSIS MPU
 637:src/MightyBoard/Motherboard/system/core_cm3.h ****   Type definitions for the Cortex-M Memory Protection Unit (MPU)
 638:src/MightyBoard/Motherboard/system/core_cm3.h ****   @{
 639:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 640:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 641:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Structure type to access the Memory Protection Unit (MPU).
 642:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 643:src/MightyBoard/Motherboard/system/core_cm3.h **** typedef struct
 644:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 645:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t TYPE;                    /*!< Offset: 0x000 (R/ )  MPU Type Register               
 646:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x004 (R/W)  MPU Control Register            
 647:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t RNR;                     /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register      
 648:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t RBAR;                    /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
 649:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t RASR;                    /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
 650:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t RBAR_A1;                 /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
 651:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t RASR_A1;                 /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
 652:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t RBAR_A2;                 /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
 653:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t RASR_A2;                 /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
 654:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t RBAR_A3;                 /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
 655:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t RASR_A3;                 /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
 656:src/MightyBoard/Motherboard/system/core_cm3.h **** } MPU_Type;
 657:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 658:src/MightyBoard/Motherboard/system/core_cm3.h **** /* MPU Type Register */
 659:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
 660:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 661:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 662:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
 663:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 664:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 665:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
 666:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
 667:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 668:src/MightyBoard/Motherboard/system/core_cm3.h **** /* MPU Control Register */
 669:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
 670:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 671:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 672:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
 673:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 674:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 675:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
 676:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1UL << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
 677:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 678:src/MightyBoard/Motherboard/system/core_cm3.h **** /* MPU Region Number Register */
 679:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
 680:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL << MPU_RNR_REGION_Pos)                 /*!< MPU 
 681:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 682:src/MightyBoard/Motherboard/system/core_cm3.h **** /* MPU Region Base Address Register */
 683:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
 684:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
 685:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 686:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
 687:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 688:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 689:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
 690:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFUL << MPU_RBAR_REGION_Pos)                 /*!< MPU 
 691:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 692:src/MightyBoard/Motherboard/system/core_cm3.h **** /* MPU Region Attribute and Size Register */
 693:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
 694:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
 695:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 696:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
 697:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_AP_Msk                    (7UL << MPU_RASR_AP_Pos)                       /*!< MPU 
 698:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 699:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
 700:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (7UL << MPU_RASR_TEX_Pos)                      /*!< MPU 
 701:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 702:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
 703:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
 704:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 705:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
 706:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
 707:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 708:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
 709:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
 710:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 711:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
 712:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
 713:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 714:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
 715:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 716:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 717:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_ENA_Pos                     0                                            /*!< MPU 
 718:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_ENA_Msk                    (0x1UL << MPU_RASR_ENA_Pos)                   /*!< MPU 
 719:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 720:src/MightyBoard/Motherboard/system/core_cm3.h **** /*@} end of group CMSIS_MPU */
 721:src/MightyBoard/Motherboard/system/core_cm3.h **** #endif
 722:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 723:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 724:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \ingroup  CMSIS_core_register
 725:src/MightyBoard/Motherboard/system/core_cm3.h ****     \defgroup CMSIS_CoreDebug CMSIS Core Debug
 726:src/MightyBoard/Motherboard/system/core_cm3.h ****   Type definitions for the Cortex-M Core Debug Registers
 727:src/MightyBoard/Motherboard/system/core_cm3.h ****   @{
 728:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 729:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 730:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Structure type to access the Core Debug Register (CoreDebug).
 731:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 732:src/MightyBoard/Motherboard/system/core_cm3.h **** typedef struct
 733:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 734:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
 735:src/MightyBoard/Motherboard/system/core_cm3.h ****   __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
 736:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
 737:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
 738:src/MightyBoard/Motherboard/system/core_cm3.h **** } CoreDebug_Type;
 739:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 740:src/MightyBoard/Motherboard/system/core_cm3.h **** /* Debug Halting Control and Status Register */
 741:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 742:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 743:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 744:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 745:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 746:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 747:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 748:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 749:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 750:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 751:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 752:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 753:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 754:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 755:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 756:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 757:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 758:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 759:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 760:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 761:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 762:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
 763:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
 764:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 765:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 766:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 767:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 768:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 769:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 770:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 771:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 772:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 773:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 774:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 775:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 776:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 777:src/MightyBoard/Motherboard/system/core_cm3.h **** /* Debug Core Register Selector Register */
 778:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 779:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 780:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 781:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 782:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 783:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 784:src/MightyBoard/Motherboard/system/core_cm3.h **** /* Debug Exception and Monitor Control Register */
 785:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
 786:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
 787:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 788:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
 789:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
 790:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 791:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
 792:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
 793:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 794:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
 795:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
 796:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 797:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
 798:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
 799:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 800:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 801:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 802:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 803:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
 804:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
 805:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 806:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
 807:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
 808:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 809:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
 810:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
 811:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 812:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
 813:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
 814:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 815:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
 816:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
 817:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 818:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
 819:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
 820:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 821:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 822:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 823:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 824:src/MightyBoard/Motherboard/system/core_cm3.h **** /*@} end of group CMSIS_CoreDebug */
 825:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 826:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 827:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \ingroup  CMSIS_core_register
 828:src/MightyBoard/Motherboard/system/core_cm3.h ****   @{
 829:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 830:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 831:src/MightyBoard/Motherboard/system/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
 832:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 833:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address        
 834:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
 835:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address    
 836:src/MightyBoard/Motherboard/system/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address       
 837:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 838:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 839:src/MightyBoard/Motherboard/system/core_cm3.h **** #define InterruptType       ((InterruptType_Type *) SCS_BASE)         /*!< Interrupt Type Register 
 840:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 841:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 842:src/MightyBoard/Motherboard/system/core_cm3.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 843:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM                 ((ITM_Type *)           ITM_BASE)         /*!< ITM configuration struct
 844:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 845:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 846:src/MightyBoard/Motherboard/system/core_cm3.h **** #if (__MPU_PRESENT == 1)
 847:src/MightyBoard/Motherboard/system/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit  
 848:src/MightyBoard/Motherboard/system/core_cm3.h ****   #define MPU               ((MPU_Type*)            MPU_BASE)         /*!< Memory Protection Unit  
 849:src/MightyBoard/Motherboard/system/core_cm3.h **** #endif
 850:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 851:src/MightyBoard/Motherboard/system/core_cm3.h **** /*@} */
 852:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 853:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 854:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 855:src/MightyBoard/Motherboard/system/core_cm3.h **** /*******************************************************************************
 856:src/MightyBoard/Motherboard/system/core_cm3.h ****  *                Hardware Abstraction Layer
 857:src/MightyBoard/Motherboard/system/core_cm3.h ****  ******************************************************************************/
 858:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \ingroup  CMSIS
 859:src/MightyBoard/Motherboard/system/core_cm3.h ****   \addtogroup CMSIS_Core_FunctionInterface CMSIS Core Function Interface
 860:src/MightyBoard/Motherboard/system/core_cm3.h ****   Core Function Interface contains:
 861:src/MightyBoard/Motherboard/system/core_cm3.h ****   - Core NVIC Functions
 862:src/MightyBoard/Motherboard/system/core_cm3.h ****   - Core SysTick Functions
 863:src/MightyBoard/Motherboard/system/core_cm3.h ****   - Core Debug Functions
 864:src/MightyBoard/Motherboard/system/core_cm3.h ****   - Core Register Access Functions
 865:src/MightyBoard/Motherboard/system/core_cm3.h **** */
 866:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 867:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 868:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 869:src/MightyBoard/Motherboard/system/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
 870:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 871:src/MightyBoard/Motherboard/system/core_cm3.h ****     \defgroup CMSIS_Core_NVICFunctions CMSIS Core NVIC Functions
 872:src/MightyBoard/Motherboard/system/core_cm3.h ****   @{
 873:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 874:src/MightyBoard/Motherboard/system/core_cm3.h **** /** @addtogroup CMSIS_Core_NVICFunctions
 875:src/MightyBoard/Motherboard/system/core_cm3.h ****  * @{
 876:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 877:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Set Priority Grouping
 878:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 879:src/MightyBoard/Motherboard/system/core_cm3.h ****   This function sets the priority grouping field using the required unlock sequence.
 880:src/MightyBoard/Motherboard/system/core_cm3.h ****   The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
 881:src/MightyBoard/Motherboard/system/core_cm3.h ****   Only values from 0..7 are used.
 882:src/MightyBoard/Motherboard/system/core_cm3.h ****   In case of a conflict between priority grouping and available
 883:src/MightyBoard/Motherboard/system/core_cm3.h ****   priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
 884:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 885:src/MightyBoard/Motherboard/system/core_cm3.h ****     \param [in]      PriorityGroup  Priority grouping field
 886:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 887:src/MightyBoard/Motherboard/system/core_cm3.h **** static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
 888:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 889:src/MightyBoard/Motherboard/system/core_cm3.h ****   uint32_t reg_value;
 890:src/MightyBoard/Motherboard/system/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 a
 891:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 892:src/MightyBoard/Motherboard/system/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
 893:src/MightyBoard/Motherboard/system/core_cm3.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
 894:src/MightyBoard/Motherboard/system/core_cm3.h ****   reg_value  =  (reg_value                       |
 895:src/MightyBoard/Motherboard/system/core_cm3.h ****                 (0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 896:src/MightyBoard/Motherboard/system/core_cm3.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
 897:src/MightyBoard/Motherboard/system/core_cm3.h ****   SCB->AIRCR =  reg_value;
 898:src/MightyBoard/Motherboard/system/core_cm3.h **** }
 899:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 900:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 901:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Get Priority Grouping
 902:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 903:src/MightyBoard/Motherboard/system/core_cm3.h ****   This function gets the priority grouping from NVIC Interrupt Controller.
 904:src/MightyBoard/Motherboard/system/core_cm3.h ****   Priority grouping is SCB->AIRCR [10:8] PRIGROUP field.
 905:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 906:src/MightyBoard/Motherboard/system/core_cm3.h ****     \return                Priority grouping field
 907:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 908:src/MightyBoard/Motherboard/system/core_cm3.h **** static __INLINE uint32_t NVIC_GetPriorityGrouping(void)
 909:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 910:src/MightyBoard/Motherboard/system/core_cm3.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
 911:src/MightyBoard/Motherboard/system/core_cm3.h **** }
 912:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 913:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 914:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Enable External Interrupt
 915:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 916:src/MightyBoard/Motherboard/system/core_cm3.h ****     This function enables a device specific interupt in the NVIC interrupt controller.
 917:src/MightyBoard/Motherboard/system/core_cm3.h ****     The interrupt number cannot be a negative value.
 918:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 919:src/MightyBoard/Motherboard/system/core_cm3.h ****     \param [in]      IRQn  Number of the external interrupt to enable
 920:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 921:src/MightyBoard/Motherboard/system/core_cm3.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 922:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 923:src/MightyBoard/Motherboard/system/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 924:src/MightyBoard/Motherboard/system/core_cm3.h **** }
 925:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 926:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 927:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Disable External Interrupt
 928:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 929:src/MightyBoard/Motherboard/system/core_cm3.h ****     This function disables a device specific interupt in the NVIC interrupt controller.
 930:src/MightyBoard/Motherboard/system/core_cm3.h ****     The interrupt number cannot be a negative value.
 931:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 932:src/MightyBoard/Motherboard/system/core_cm3.h ****     \param [in]      IRQn  Number of the external interrupt to disable
 933:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 934:src/MightyBoard/Motherboard/system/core_cm3.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 935:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 936:src/MightyBoard/Motherboard/system/core_cm3.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 937:src/MightyBoard/Motherboard/system/core_cm3.h **** }
 938:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 939:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 940:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Get Pending Interrupt
 941:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 942:src/MightyBoard/Motherboard/system/core_cm3.h ****     This function reads the pending register in the NVIC and returns the pending bit
 943:src/MightyBoard/Motherboard/system/core_cm3.h ****     for the specified interrupt.
 944:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 945:src/MightyBoard/Motherboard/system/core_cm3.h ****     \param [in]      IRQn  Number of the interrupt for get pending
 946:src/MightyBoard/Motherboard/system/core_cm3.h ****     \return             0  Interrupt status is not pending
 947:src/MightyBoard/Motherboard/system/core_cm3.h ****     \return             1  Interrupt status is pending
 948:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 949:src/MightyBoard/Motherboard/system/core_cm3.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 950:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 951:src/MightyBoard/Motherboard/system/core_cm3.h ****   return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); 
 952:src/MightyBoard/Motherboard/system/core_cm3.h **** }
 953:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 954:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 955:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Set Pending Interrupt
 956:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 957:src/MightyBoard/Motherboard/system/core_cm3.h ****     This function sets the pending bit for the specified interrupt.
 958:src/MightyBoard/Motherboard/system/core_cm3.h ****     The interrupt number cannot be a negative value.
 959:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 960:src/MightyBoard/Motherboard/system/core_cm3.h ****     \param [in]      IRQn  Number of the interrupt for set pending
 961:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 962:src/MightyBoard/Motherboard/system/core_cm3.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
 963:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 964:src/MightyBoard/Motherboard/system/core_cm3.h ****   NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending 
 965:src/MightyBoard/Motherboard/system/core_cm3.h **** }
 966:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 967:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 968:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Clear Pending Interrupt
 969:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 970:src/MightyBoard/Motherboard/system/core_cm3.h ****     This function clears the pending bit for the specified interrupt.
 971:src/MightyBoard/Motherboard/system/core_cm3.h ****     The interrupt number cannot be a negative value.
 972:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 973:src/MightyBoard/Motherboard/system/core_cm3.h ****     \param [in]      IRQn  Number of the interrupt for clear pending
 974:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 975:src/MightyBoard/Motherboard/system/core_cm3.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 976:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 977:src/MightyBoard/Motherboard/system/core_cm3.h ****   NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrup
 978:src/MightyBoard/Motherboard/system/core_cm3.h **** }
 979:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 980:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 981:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Get Active Interrupt
 982:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 983:src/MightyBoard/Motherboard/system/core_cm3.h ****     This function reads the active register in NVIC and returns the active bit.
 984:src/MightyBoard/Motherboard/system/core_cm3.h ****     \param [in]      IRQn  Number of the interrupt for get active
 985:src/MightyBoard/Motherboard/system/core_cm3.h ****     \return             0  Interrupt status is not active
 986:src/MightyBoard/Motherboard/system/core_cm3.h ****     \return             1  Interrupt status is active
 987:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 988:src/MightyBoard/Motherboard/system/core_cm3.h **** static __INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
 989:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 990:src/MightyBoard/Motherboard/system/core_cm3.h ****   return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /
 991:src/MightyBoard/Motherboard/system/core_cm3.h **** }
 992:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 993:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 994:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Set Interrupt Priority
 995:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 996:src/MightyBoard/Motherboard/system/core_cm3.h ****     This function sets the priority for the specified interrupt. The interrupt
 997:src/MightyBoard/Motherboard/system/core_cm3.h ****     number can be positive to specify an external (device specific)
 998:src/MightyBoard/Motherboard/system/core_cm3.h ****     interrupt, or negative to specify an internal (core) interrupt.
 999:src/MightyBoard/Motherboard/system/core_cm3.h **** 
1000:src/MightyBoard/Motherboard/system/core_cm3.h ****     Note: The priority cannot be set for every core interrupt.
1001:src/MightyBoard/Motherboard/system/core_cm3.h **** 
1002:src/MightyBoard/Motherboard/system/core_cm3.h ****     \param [in]      IRQn  Number of the interrupt for set priority
1003:src/MightyBoard/Motherboard/system/core_cm3.h ****     \param [in]  priority  Priority to set
1004:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
1005:src/MightyBoard/Motherboard/system/core_cm3.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1006:src/MightyBoard/Motherboard/system/core_cm3.h **** {
1007:src/MightyBoard/Motherboard/system/core_cm3.h ****   if(IRQn < 0) {
1008:src/MightyBoard/Motherboard/system/core_cm3.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
1009:src/MightyBoard/Motherboard/system/core_cm3.h ****   else {
1010:src/MightyBoard/Motherboard/system/core_cm3.h ****     NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set 
 114              	 .loc 2 1010 0 discriminator 1
 115 0096 4FF46143 	 mov r3,#57600
 116 009a CEF20003 	 movt r3,57344
 117 009e 4FF04802 	 mov r2,#72
 118 00a2 83F80623 	 strb r2,[r3,#774]
 119              	.LVL5:
 120              	.LBE30:
 121              	.LBE29:
 122              	.LBB31:
 123              	.LBB32:
 923:src/MightyBoard/Motherboard/system/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 124              	 .loc 2 923 0 discriminator 1
 125 00a6 4FF04002 	 mov r2,#64
 126 00aa 1A60     	 str r2,[r3,#0]
 127              	.LVL6:
 128              	.L3:
 129              	.LBE32:
 130              	.LBE31:
 131              	.LBE28:
 132              	.LBE27:
 176:src/MightyBoard/shared/UART.cc **** 		NVIC_SetPriority(UART1_IRQn, 9);
 177:src/MightyBoard/shared/UART.cc **** 		NVIC_EnableIRQ(UART1_IRQn);
 178:src/MightyBoard/shared/UART.cc ****     }
 179:src/MightyBoard/shared/UART.cc **** #endif
 180:src/MightyBoard/shared/UART.cc ****     xprintf("end UART::init_serial" " (%s:%d)\n",_F_,_L_);
 133              	 .loc 1 180 0 discriminator 1
 134 00ac 40F20000 	 movw r0,#:lower16:.LC4
 135 00b0 C0F20000 	 movt r0,#:upper16:.LC4
 136 00b4 0349     	 ldr r1,.L4
 137 00b6 4FF0B402 	 mov r2,#180
 138 00ba FFF7FEFF 	 bl xprintf
 139              	.LBE26:
 181:src/MightyBoard/shared/UART.cc **** }
 140              	 .loc 1 181 0 discriminator 1
 141 00be 04B0     	 add sp,sp,#16
 142 00c0 70BD     	 pop {r4,r5,r6,pc}
 143              	.L5:
 144 00c2 00BF     	 .align 2
 145              	.L4:
 146 00c4 17000000 	 .word .LC1+23
 147              	 .cfi_endproc
 148              	.LFE73:
 150              	 .section .text._ZN4UARTC2Eh18communication_mode,"ax",%progbits
 151              	 .align 2
 152              	 .global _ZN4UARTC2Eh18communication_mode
 153              	 .thumb
 154              	 .thumb_func
 156              	_ZN4UARTC2Eh18communication_mode:
 157              	.LFB77:
 182:src/MightyBoard/shared/UART.cc **** 
 183:src/MightyBoard/shared/UART.cc **** // Transition to a non-transmitting state. This is only used for RS485 mode.
 184:src/MightyBoard/shared/UART.cc **** inline void listen() {
 185:src/MightyBoard/shared/UART.cc **** //        TX_Enable.setValue(false);
 186:src/MightyBoard/shared/UART.cc ****     TX_Enable.setValue(false);
 187:src/MightyBoard/shared/UART.cc **** }
 188:src/MightyBoard/shared/UART.cc **** 
 189:src/MightyBoard/shared/UART.cc **** // Transition to a transmitting state
 190:src/MightyBoard/shared/UART.cc **** inline void speak() {
 191:src/MightyBoard/shared/UART.cc ****     TX_Enable.setValue(true);
 192:src/MightyBoard/shared/UART.cc **** }
 193:src/MightyBoard/shared/UART.cc **** 
 194:src/MightyBoard/shared/UART.cc **** UART::UART(uint8_t index, communication_mode mode) :
 158              	 .loc 1 194 0
 159              	 .cfi_startproc
 160              	 
 161              	 
 162              	.LVL7:
 163 0000 10B5     	 push {r4,lr}
 164              	.LCFI2:
 165              	 .cfi_def_cfa_offset 8
 166              	 .cfi_offset 14,-4
 167              	 .cfi_offset 4,-8
 168 0002 0446     	 mov r4,r0
 169              	.LBB33:
 195:src/MightyBoard/shared/UART.cc ****     mode_(mode),
 196:src/MightyBoard/shared/UART.cc ****     index_(index),
 197:src/MightyBoard/shared/UART.cc ****     enabled_(false) {
 170              	 .loc 1 197 0
 171 0004 0270     	 strb r2,[r0,#0]
 172 0006 4170     	 strb r1,[r0,#1]
 173 0008 4FF00003 	 mov r3,#0
 174 000c 8370     	 strb r3,[r0,#2]
 175 000e 00F10300 	 add r0,r0,#3
 176              	.LVL8:
 177 0012 FFF7FEFF 	 bl _ZN8InPacketC1Ev
 178              	.LVL9:
 179 0016 04F12800 	 add r0,r4,#40
 180 001a FFF7FEFF 	 bl _ZN9OutPacketC1Ev
 198:src/MightyBoard/shared/UART.cc **** 
 199:src/MightyBoard/shared/UART.cc ****         init_serial();
 181              	 .loc 1 199 0
 182 001e 2046     	 mov r0,r4
 183 0020 FFF7FEFF 	 bl _ZN4UART11init_serialEv
 184              	.LBE33:
 200:src/MightyBoard/shared/UART.cc **** 
 201:src/MightyBoard/shared/UART.cc **** }
 185              	 .loc 1 201 0
 186 0024 2046     	 mov r0,r4
 187 0026 10BD     	 pop {r4,pc}
 188              	 .cfi_endproc
 189              	.LFE77:
 191              	 .section .text._ZN4UART9beginSendEv,"ax",%progbits
 192              	 .align 2
 193              	 .global _ZN4UART9beginSendEv
 194              	 .thumb
 195              	 .thumb_func
 197              	_ZN4UART9beginSendEv:
 198              	.LFB79:
 202:src/MightyBoard/shared/UART.cc **** 
 203:src/MightyBoard/shared/UART.cc **** // Subsequent bytes will be triggered by the tx complete interrupt.
 204:src/MightyBoard/shared/UART.cc **** void UART::beginSend() {
 199              	 .loc 1 204 0
 200              	 .cfi_startproc
 201              	 
 202              	 
 203              	.LVL10:
 204 0000 2DE9F041 	 push {r4,r5,r6,r7,r8,lr}
 205              	.LCFI3:
 206              	 .cfi_def_cfa_offset 24
 207              	 .cfi_offset 14,-4
 208              	 .cfi_offset 8,-8
 209              	 .cfi_offset 7,-12
 210              	 .cfi_offset 6,-16
 211              	 .cfi_offset 5,-20
 212              	 .cfi_offset 4,-24
 213              	.LBB63:
 205:src/MightyBoard/shared/UART.cc **** //	xprintf("beginSend()" " (%s:%d)\n",_F_,_L_);
 206:src/MightyBoard/shared/UART.cc **** 	if (!enabled_) { return; }
 214              	 .loc 1 206 0
 215 0004 8378     	 ldrb r3,[r0,#2]
 216 0006 002B     	 cmp r3,#0
 217 0008 00F0F080 	 beq .L8
 218              	.LBB64:
 207:src/MightyBoard/shared/UART.cc **** 	if (index_ == RS232) {		//uart0 eg usb
 219              	 .loc 1 207 0
 220 000c 4378     	 ldrb r3,[r0,#1]
 221 000e 002B     	 cmp r3,#0
 222 0010 40F0AC80 	 bne .L10
 223              	.LBB65:
 224              	.LBB66:
 225              	.LBB67:
 226              	 .file 3 "src/MightyBoard/shared/UART.hh"
   1:src/MightyBoard/shared/UART.hh **** /*
   2:src/MightyBoard/shared/UART.hh ****  * Copyright 2010 by Adam Mayer	 <adam@makerbot.com>
   3:src/MightyBoard/shared/UART.hh ****  *
   4:src/MightyBoard/shared/UART.hh ****  * This program is free software: you can redistribute it and/or modify
   5:src/MightyBoard/shared/UART.hh ****  * it under the terms of the GNU General Public License as published by
   6:src/MightyBoard/shared/UART.hh ****  * the Free Software Foundation, either version 3 of the License, or
   7:src/MightyBoard/shared/UART.hh ****  * (at your option) any later version.
   8:src/MightyBoard/shared/UART.hh ****  *
   9:src/MightyBoard/shared/UART.hh ****  * This program is distributed in the hope that it will be useful,
  10:src/MightyBoard/shared/UART.hh ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:src/MightyBoard/shared/UART.hh ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:src/MightyBoard/shared/UART.hh ****  * GNU General Public License for more details.
  13:src/MightyBoard/shared/UART.hh ****  *
  14:src/MightyBoard/shared/UART.hh ****  * You should have received a copy of the GNU General Public License
  15:src/MightyBoard/shared/UART.hh ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>
  16:src/MightyBoard/shared/UART.hh ****  */
  17:src/MightyBoard/shared/UART.hh **** 
  18:src/MightyBoard/shared/UART.hh **** #ifndef UART_HH_
  19:src/MightyBoard/shared/UART.hh **** #define UART_HH_
  20:src/MightyBoard/shared/UART.hh **** 
  21:src/MightyBoard/shared/UART.hh **** #include "Packet.hh"
  22:src/MightyBoard/shared/UART.hh **** #include "Configuration.hh"
  23:src/MightyBoard/shared/UART.hh **** #include <stdint.h>
  24:src/MightyBoard/shared/UART.hh **** 
  25:src/MightyBoard/shared/UART.hh **** // TODO: Move to UART class
  26:src/MightyBoard/shared/UART.hh **** /// Communication mode selection
  27:src/MightyBoard/shared/UART.hh **** enum communication_mode {
  28:src/MightyBoard/shared/UART.hh ****     RS232,  // USB        ///< Act as an asynchronous, full duplex RS232 transciever
  29:src/MightyBoard/shared/UART.hh ****     RS485   // RS485        ///< Act as an asynchronous, half duplex RS485 transciever
  30:src/MightyBoard/shared/UART.hh **** };
  31:src/MightyBoard/shared/UART.hh **** 
  32:src/MightyBoard/shared/UART.hh **** 
  33:src/MightyBoard/shared/UART.hh **** /// The UART object implements the serial communication protocol using one
  34:src/MightyBoard/shared/UART.hh **** /// or two hardware UART libraries.
  35:src/MightyBoard/shared/UART.hh **** ///
  36:src/MightyBoard/shared/UART.hh **** /// UARTs, when constructed, start off disabled.
  37:src/MightyBoard/shared/UART.hh **** /// They begin receiving data only after an enable(true)
  38:src/MightyBoard/shared/UART.hh **** /// call is made.  beginSend() calls will send completed
  39:src/MightyBoard/shared/UART.hh **** /// packets.
  40:src/MightyBoard/shared/UART.hh **** ///
  41:src/MightyBoard/shared/UART.hh **** /// Porting notes:
  42:src/MightyBoard/shared/UART.hh **** /// The current implementation supports one UART on the atmega168/328, and two UARTs
  43:src/MightyBoard/shared/UART.hh **** /// on the atmega644 and atmega1280/2560. The code will need to be updated to support
  44:src/MightyBoard/shared/UART.hh **** /// new architectures.
  45:src/MightyBoard/shared/UART.hh **** /// \ingroup HardwareLibraries
  46:src/MightyBoard/shared/UART.hh **** class UART {
  47:src/MightyBoard/shared/UART.hh **** private:
  48:src/MightyBoard/shared/UART.hh **** //	static UART hostUART;       ///< The controller accepts commands from the host UART
  49:src/MightyBoard/shared/UART.hh **** #if HAS_SLAVE_UART
  50:src/MightyBoard/shared/UART.hh **** //	static UART slaveUART;      ///< The controller can forward commands to the slave UART
  51:src/MightyBoard/shared/UART.hh **** #endif
  52:src/MightyBoard/shared/UART.hh **** 
  53:src/MightyBoard/shared/UART.hh **** public:
  54:src/MightyBoard/shared/UART.hh ****     /// Get a reference to the host UART
  55:src/MightyBoard/shared/UART.hh ****     /// \return hostUART instance, which should act as a slave to a computer (or motherboard)
  56:src/MightyBoard/shared/UART.hh ****     static UART& getHostUART() {static UART hostUART(0,RS232); return hostUART; }
 227              	 .loc 3 56 0
 228 0014 40F20003 	 movw r3,#:lower16:_ZGVZN4UART11getHostUARTEvE8hostUART
 229 0018 C0F20003 	 movt r3,#:upper16:_ZGVZN4UART11getHostUARTEvE8hostUART
 230 001c 1B68     	 ldr r3,[r3,#0]
 231 001e 13F0010F 	 tst r3,#1
 232 0022 15D1     	 bne .L11
 233 0024 40F20000 	 movw r0,#:lower16:_ZGVZN4UART11getHostUARTEvE8hostUART
 234              	.LVL11:
 235 0028 C0F20000 	 movt r0,#:upper16:_ZGVZN4UART11getHostUARTEvE8hostUART
 236 002c FFF7FEFF 	 bl __cxa_guard_acquire
 237 0030 70B1     	 cbz r0,.L11
 238 0032 40F20000 	 movw r0,#:lower16:_ZZN4UART11getHostUARTEvE8hostUART
 239 0036 C0F20000 	 movt r0,#:upper16:_ZZN4UART11getHostUARTEvE8hostUART
 240 003a 4FF00001 	 mov r1,#0
 241 003e 0A46     	 mov r2,r1
 242 0040 FFF7FEFF 	 bl _ZN4UARTC1Eh18communication_mode
 243 0044 40F20000 	 movw r0,#:lower16:_ZGVZN4UART11getHostUARTEvE8hostUART
 244 0048 C0F20000 	 movt r0,#:upper16:_ZGVZN4UART11getHostUARTEvE8hostUART
 245 004c FFF7FEFF 	 bl __cxa_guard_release
 246              	.L11:
 247              	.LBE67:
 248              	.LBE66:
 208:src/MightyBoard/shared/UART.cc **** 		static unsigned char sendBuffer[64];
 209:src/MightyBoard/shared/UART.cc **** 		sendBuffer[0] = UART::getHostUART().out.getNextByteToSend();
 249              	 .loc 1 209 0
 250 0050 6748     	 ldr r0,.L21
 251 0052 FFF7FEFF 	 bl _ZN9OutPacket17getNextByteToSendEv
 252 0056 0146     	 mov r1,r0
 253 0058 40F20003 	 movw r3,#:lower16:.LANCHOR0
 254 005c C0F20003 	 movt r3,#:upper16:.LANCHOR0
 255 0060 1870     	 strb r0,[r3,#0]
 210:src/MightyBoard/shared/UART.cc **** 		xprintf("out %d",sendBuffer[0]);
 256              	 .loc 1 210 0
 257 0062 40F20000 	 movw r0,#:lower16:.LC5
 258 0066 C0F20000 	 movt r0,#:upper16:.LC5
 259 006a FFF7FEFF 	 bl xprintf
 260              	.LBB68:
 261              	.LBB69:
 262              	 .loc 3 56 0
 263 006e 40F20004 	 movw r4,#:lower16:_ZGVZN4UART11getHostUARTEvE8hostUART
 264 0072 C0F20004 	 movt r4,#:upper16:_ZGVZN4UART11getHostUARTEvE8hostUART
 265              	.LBE69:
 266              	.LBE68:
 267              	.LBB71:
 211:src/MightyBoard/shared/UART.cc **** 		while (UART::getHostUART().out.isSending()) {
 212:src/MightyBoard/shared/UART.cc **** 			uint32_t i;
 213:src/MightyBoard/shared/UART.cc **** 			for (i = 1; i < USB_CDC_BUFSIZE-1; i++){
 214:src/MightyBoard/shared/UART.cc **** 				sendBuffer[i] = UART::getHostUART().out.getNextByteToSend();
 268              	 .loc 1 214 0
 269 0076 DFF87881 	 ldr r8,.L21
 270              	.LBE71:
 211:src/MightyBoard/shared/UART.cc **** 		while (UART::getHostUART().out.isSending()) {
 271              	 .loc 1 211 0
 272 007a 48E0     	 b .L12
 273              	.L16:
 274              	.LBB80:
 275              	.LBB72:
 276              	.LBB73:
 277              	 .loc 3 56 0
 278 007c 2368     	 ldr r3,[r4,#0]
 279 007e 13F0010F 	 tst r3,#1
 280 0082 0CD1     	 bne .L13
 281 0084 2046     	 mov r0,r4
 282 0086 FFF7FEFF 	 bl __cxa_guard_acquire
 283 008a 40B1     	 cbz r0,.L13
 284 008c 3046     	 mov r0,r6
 285 008e 4FF00001 	 mov r1,#0
 286 0092 0A46     	 mov r2,r1
 287 0094 FFF7FEFF 	 bl _ZN4UARTC1Eh18communication_mode
 288 0098 2046     	 mov r0,r4
 289 009a FFF7FEFF 	 bl __cxa_guard_release
 290              	.L13:
 291              	.LBE73:
 292              	.LBE72:
 293              	 .loc 1 214 0
 294 009e 4046     	 mov r0,r8
 295 00a0 FFF7FEFF 	 bl _ZN9OutPacket17getNextByteToSendEv
 296 00a4 0146     	 mov r1,r0
 297 00a6 05F8010F 	 strb r0,[r5,#1]!
 215:src/MightyBoard/shared/UART.cc **** 				xprintf(" %d",sendBuffer[i]);
 298              	 .loc 1 215 0
 299 00aa 40F20000 	 movw r0,#:lower16:.LC6
 300 00ae C0F20000 	 movt r0,#:upper16:.LC6
 301 00b2 FFF7FEFF 	 bl xprintf
 302              	.LBB75:
 303              	.LBB76:
 304              	 .loc 3 56 0
 305 00b6 2368     	 ldr r3,[r4,#0]
 306 00b8 13F0010F 	 tst r3,#1
 307 00bc 0CD1     	 bne .L14
 308 00be 2046     	 mov r0,r4
 309 00c0 FFF7FEFF 	 bl __cxa_guard_acquire
 310 00c4 40B1     	 cbz r0,.L14
 311 00c6 3046     	 mov r0,r6
 312 00c8 4FF00001 	 mov r1,#0
 313 00cc 0A46     	 mov r2,r1
 314 00ce FFF7FEFF 	 bl _ZN4UARTC1Eh18communication_mode
 315 00d2 2046     	 mov r0,r4
 316 00d4 FFF7FEFF 	 bl __cxa_guard_release
 317              	.L14:
 318              	.LBE76:
 319              	.LBE75:
 320              	.LBB77:
 321              	.LBB78:
 322              	 .file 4 "src/MightyBoard/shared/Packet.hh"
   1:src/MightyBoard/shared/Packet.hh **** /*
   2:src/MightyBoard/shared/Packet.hh ****  * Copyright 2010 by Adam Mayer	 <adam@makerbot.com>
   3:src/MightyBoard/shared/Packet.hh ****  *
   4:src/MightyBoard/shared/Packet.hh ****  * This program is free software: you can redistribute it and/or modify
   5:src/MightyBoard/shared/Packet.hh ****  * it under the terms of the GNU General Public License as published by
   6:src/MightyBoard/shared/Packet.hh ****  * the Free Software Foundation, either version 3 of the License, or
   7:src/MightyBoard/shared/Packet.hh ****  * (at your option) any later version.
   8:src/MightyBoard/shared/Packet.hh ****  *
   9:src/MightyBoard/shared/Packet.hh ****  * This program is distributed in the hope that it will be useful,
  10:src/MightyBoard/shared/Packet.hh ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:src/MightyBoard/shared/Packet.hh ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:src/MightyBoard/shared/Packet.hh ****  * GNU General Public License for more details.
  13:src/MightyBoard/shared/Packet.hh ****  *
  14:src/MightyBoard/shared/Packet.hh ****  * You should have received a copy of the GNU General Public License
  15:src/MightyBoard/shared/Packet.hh ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>
  16:src/MightyBoard/shared/Packet.hh ****  */
  17:src/MightyBoard/shared/Packet.hh **** 
  18:src/MightyBoard/shared/Packet.hh **** #ifndef SHARED_PACKET_HH_
  19:src/MightyBoard/shared/Packet.hh **** #define SHARED_PACKET_HH_
  20:src/MightyBoard/shared/Packet.hh **** 
  21:src/MightyBoard/shared/Packet.hh **** #include <stdint.h>
  22:src/MightyBoard/shared/Packet.hh **** 
  23:src/MightyBoard/shared/Packet.hh **** extern "C" {
  24:src/MightyBoard/shared/Packet.hh **** #include "comm.h"
  25:src/MightyBoard/shared/Packet.hh **** }
  26:src/MightyBoard/shared/Packet.hh **** 
  27:src/MightyBoard/shared/Packet.hh **** #define START_BYTE 0xD5
  28:src/MightyBoard/shared/Packet.hh **** #define MAX_PACKET_PAYLOAD 32
  29:src/MightyBoard/shared/Packet.hh **** 
  30:src/MightyBoard/shared/Packet.hh **** #define SLAVE_ID_BROADCAST 127
  31:src/MightyBoard/shared/Packet.hh **** 
  32:src/MightyBoard/shared/Packet.hh **** namespace PacketError {
  33:src/MightyBoard/shared/Packet.hh **** enum {
  34:src/MightyBoard/shared/Packet.hh **** 	NO_ERROR,
  35:src/MightyBoard/shared/Packet.hh **** 	NOISE_BYTE,
  36:src/MightyBoard/shared/Packet.hh **** 	EXCEEDED_MAX_LENGTH,
  37:src/MightyBoard/shared/Packet.hh **** 	BAD_CRC,
  38:src/MightyBoard/shared/Packet.hh **** 	PACKET_TIMEOUT,
  39:src/MightyBoard/shared/Packet.hh **** };
  40:src/MightyBoard/shared/Packet.hh **** } // namespace PacketError
  41:src/MightyBoard/shared/Packet.hh **** 
  42:src/MightyBoard/shared/Packet.hh **** /// These are the response codes returned to the requestor
  43:src/MightyBoard/shared/Packet.hh **** /// as the first byte of the response payload.  You can find
  44:src/MightyBoard/shared/Packet.hh **** /// a list of the expected codes in the protocol specification
  45:src/MightyBoard/shared/Packet.hh **** /// document:
  46:src/MightyBoard/shared/Packet.hh **** /// http://docs.google.com/Doc?docid=0AcWKwJ2SAxDzZGd6amZyY2NfMmdtODRnZ2Ri&hl=en
  47:src/MightyBoard/shared/Packet.hh **** typedef enum {
  48:src/MightyBoard/shared/Packet.hh ****         RC_PACKET_ERROR    = 0x80, /* Generic Error. Is this packet simply discarded? */
  49:src/MightyBoard/shared/Packet.hh ****         RC_OK               = 0x81,
  50:src/MightyBoard/shared/Packet.hh ****         RC_BUFFER_OVERFLOW  = 0x82,
  51:src/MightyBoard/shared/Packet.hh ****         RC_CRC_MISMATCH     = 0x83,
  52:src/MightyBoard/shared/Packet.hh ****         RC_PACKET_LENGTH    = 0x84,
  53:src/MightyBoard/shared/Packet.hh ****         RC_CMD_UNSUPPORTED  = 0x85,
  54:src/MightyBoard/shared/Packet.hh ****         RC_EXPECT_MORE      = 0x86,
  55:src/MightyBoard/shared/Packet.hh ****         RC_DOWNSTREAM_TIMEOUT = 0x87,
  56:src/MightyBoard/shared/Packet.hh ****         RC_TOOL_LOCK_TIMEOUT = 0x88,
  57:src/MightyBoard/shared/Packet.hh ****         RC_CANCEL_BUILD		= 0x89, 
  58:src/MightyBoard/shared/Packet.hh ****         RC_BOT_BUILDING		= 0x8A,  // this response is returned if the bot is building from SD card 
  59:src/MightyBoard/shared/Packet.hh ****         RC_BOT_OVERHEAT		= 0x8B,	// if the bot overheats, it will not respond to commands
  60:src/MightyBoard/shared/Packet.hh ****         RC_PACKET_TIMEOUT	= 0x8C
  61:src/MightyBoard/shared/Packet.hh **** } ResponseCode;
  62:src/MightyBoard/shared/Packet.hh **** 
  63:src/MightyBoard/shared/Packet.hh **** /// Convenience function to accept old response codes
  64:src/MightyBoard/shared/Packet.hh **** /// (missing the high bits) as well as the new forms.
  65:src/MightyBoard/shared/Packet.hh **** inline bool rcCompare(uint8_t data, ResponseCode code) {
  66:src/MightyBoard/shared/Packet.hh **** 	return (data & 0x7f) == (code & 0x7f);
  67:src/MightyBoard/shared/Packet.hh **** }
  68:src/MightyBoard/shared/Packet.hh **** 
  69:src/MightyBoard/shared/Packet.hh **** class Packet {
  70:src/MightyBoard/shared/Packet.hh **** protected:
  71:src/MightyBoard/shared/Packet.hh **** 	// packet states
  72:src/MightyBoard/shared/Packet.hh **** 	typedef enum {
  73:src/MightyBoard/shared/Packet.hh **** 		PS_START,
  74:src/MightyBoard/shared/Packet.hh **** 		PS_LEN,
  75:src/MightyBoard/shared/Packet.hh **** 		PS_PAYLOAD,
  76:src/MightyBoard/shared/Packet.hh **** 		PS_CRC,
  77:src/MightyBoard/shared/Packet.hh **** 		PS_LAST
  78:src/MightyBoard/shared/Packet.hh **** 	} PacketState;
  79:src/MightyBoard/shared/Packet.hh **** 
  80:src/MightyBoard/shared/Packet.hh ****     volatile uint8_t length; /// The current length of the payload (data[0] if raw packets)
  81:src/MightyBoard/shared/Packet.hh ****     volatile uint8_t crc; /// The CRC of the current contents of the payload (data[-1] of raw packe
  82:src/MightyBoard/shared/Packet.hh ****     volatile uint8_t payload[MAX_PACKET_PAYLOAD]; /// Data payload (starts at data[2] of raw packet
  83:src/MightyBoard/shared/Packet.hh **** 	volatile uint8_t error_code; // Have any errors cropped up during processing?
  84:src/MightyBoard/shared/Packet.hh **** 	volatile PacketState state;
  85:src/MightyBoard/shared/Packet.hh **** 
  86:src/MightyBoard/shared/Packet.hh **** 
  87:src/MightyBoard/shared/Packet.hh **** 	/// Append a byte and update the CRC
  88:src/MightyBoard/shared/Packet.hh **** 	void appendByte(uint8_t data);
  89:src/MightyBoard/shared/Packet.hh **** 	/// Reset this packet to an empty state
  90:src/MightyBoard/shared/Packet.hh **** 	void reset();
  91:src/MightyBoard/shared/Packet.hh **** 
  92:src/MightyBoard/shared/Packet.hh **** 	void error(uint8_t error_code_in) {
  93:src/MightyBoard/shared/Packet.hh **** 		reset();
  94:src/MightyBoard/shared/Packet.hh **** 		error_code = error_code_in;
  95:src/MightyBoard/shared/Packet.hh **** 	}
  96:src/MightyBoard/shared/Packet.hh **** public:
  97:src/MightyBoard/shared/Packet.hh **** 	uint8_t getLength() const { return length; }
  98:src/MightyBoard/shared/Packet.hh **** 
  99:src/MightyBoard/shared/Packet.hh **** 	bool hasError() const {
 100:src/MightyBoard/shared/Packet.hh **** 		return error_code != PacketError::NO_ERROR;
 101:src/MightyBoard/shared/Packet.hh **** 	}
 102:src/MightyBoard/shared/Packet.hh **** 
 103:src/MightyBoard/shared/Packet.hh **** 	uint8_t getErrorCode() const { return error_code; }
 104:src/MightyBoard/shared/Packet.hh **** 
 105:src/MightyBoard/shared/Packet.hh **** 	// Reads an 8-bit byte from the specified index of the payload
 106:src/MightyBoard/shared/Packet.hh **** 	uint8_t read8(uint8_t idx) const;
 107:src/MightyBoard/shared/Packet.hh **** 	uint16_t read16(uint8_t idx) const;
 108:src/MightyBoard/shared/Packet.hh **** 	uint32_t read32(uint8_t idx) const;
 109:src/MightyBoard/shared/Packet.hh **** 
 110:src/MightyBoard/shared/Packet.hh **** 	uint8_t debugGetState() const { return state; }
 111:src/MightyBoard/shared/Packet.hh **** 
 112:src/MightyBoard/shared/Packet.hh **** 	const volatile uint8_t* getData() const { return payload; }
 113:src/MightyBoard/shared/Packet.hh **** };
 114:src/MightyBoard/shared/Packet.hh **** 
 115:src/MightyBoard/shared/Packet.hh **** /// Input Packet.
 116:src/MightyBoard/shared/Packet.hh **** class InPacket: public Packet {
 117:src/MightyBoard/shared/Packet.hh **** private:
 118:src/MightyBoard/shared/Packet.hh **** 	volatile uint8_t expected_length;
 119:src/MightyBoard/shared/Packet.hh **** public:
 120:src/MightyBoard/shared/Packet.hh **** 	InPacket();
 121:src/MightyBoard/shared/Packet.hh **** 
 122:src/MightyBoard/shared/Packet.hh **** 	/// Reset the entire packet reception.
 123:src/MightyBoard/shared/Packet.hh **** 	void reset();
 124:src/MightyBoard/shared/Packet.hh **** 
 125:src/MightyBoard/shared/Packet.hh **** 	//process a byte for our packet.
 126:src/MightyBoard/shared/Packet.hh **** 	void processByte(uint8_t b);
 127:src/MightyBoard/shared/Packet.hh **** 
 128:src/MightyBoard/shared/Packet.hh **** 	bool isFinished() const {
 129:src/MightyBoard/shared/Packet.hh **** 		return state == PS_LAST;
 130:src/MightyBoard/shared/Packet.hh **** 	}
 131:src/MightyBoard/shared/Packet.hh **** 
 132:src/MightyBoard/shared/Packet.hh **** 	bool isStarted() const {
 133:src/MightyBoard/shared/Packet.hh **** 		return state != PS_START;
 134:src/MightyBoard/shared/Packet.hh **** 	}
 135:src/MightyBoard/shared/Packet.hh **** 
 136:src/MightyBoard/shared/Packet.hh **** 	/// Indicate that this packet has timed out.  This means:
 137:src/MightyBoard/shared/Packet.hh **** 	/// * setting the PACKET_TIMEOUT error on the packet
 138:src/MightyBoard/shared/Packet.hh **** 	/// * the packet gets reset
 139:src/MightyBoard/shared/Packet.hh **** 	void timeout() {
 140:src/MightyBoard/shared/Packet.hh **** 		error(PacketError::PACKET_TIMEOUT);
 141:src/MightyBoard/shared/Packet.hh **** 	}
 142:src/MightyBoard/shared/Packet.hh **** };
 143:src/MightyBoard/shared/Packet.hh **** 
 144:src/MightyBoard/shared/Packet.hh **** /// Output Packet.
 145:src/MightyBoard/shared/Packet.hh **** class OutPacket: public Packet {
 146:src/MightyBoard/shared/Packet.hh **** private:
 147:src/MightyBoard/shared/Packet.hh **** 	uint8_t send_payload_index;
 148:src/MightyBoard/shared/Packet.hh **** public:
 149:src/MightyBoard/shared/Packet.hh **** 	OutPacket();
 150:src/MightyBoard/shared/Packet.hh **** 
 151:src/MightyBoard/shared/Packet.hh **** 	/// Reset the entire packet transmission.
 152:src/MightyBoard/shared/Packet.hh **** 	void reset();
 153:src/MightyBoard/shared/Packet.hh **** 
 154:src/MightyBoard/shared/Packet.hh **** 	bool isFinished() const {
 155:src/MightyBoard/shared/Packet.hh **** 		return state == PS_LAST;
 156:src/MightyBoard/shared/Packet.hh **** 	}
 157:src/MightyBoard/shared/Packet.hh **** 
 158:src/MightyBoard/shared/Packet.hh **** 	bool isSending() const {
 159:src/MightyBoard/shared/Packet.hh **** 		return state != PS_START && state != PS_LAST;
 323              	 .loc 4 159 0
 324 00d8 96F84B30 	 ldrb r3,[r6,#75]
 325 00dc 6BB1     	 cbz r3,.L15
 326 00de 96F84B30 	 ldrb r3,[r6,#75]
 327 00e2 042B     	 cmp r3,#4
 328 00e4 09D0     	 beq .L15
 329              	.LBE78:
 330              	.LBE77:
 213:src/MightyBoard/shared/UART.cc **** 			for (i = 1; i < USB_CDC_BUFSIZE-1; i++){
 331              	 .loc 1 213 0
 332 00e6 07F10107 	 add r7,r7,#1
 333              	.LVL12:
 334 00ea 3F2F     	 cmp r7,#63
 335 00ec C6D1     	 bne .L16
 216:src/MightyBoard/shared/UART.cc **** 				if (!UART::getHostUART().out.isSending()) goto skip;
 217:src/MightyBoard/shared/UART.cc **** 			}
 218:src/MightyBoard/shared/UART.cc **** 			xprintf("\n");
 336              	 .loc 1 218 0
 337 00ee 40F20000 	 movw r0,#:lower16:.LC7
 338 00f2 C0F20000 	 movt r0,#:upper16:.LC7
 339 00f6 FFF7FEFF 	 bl xprintf
 340              	.LVL13:
 341              	.L15:
 219:src/MightyBoard/shared/UART.cc **** 			skip:
 220:src/MightyBoard/shared/UART.cc **** 			USB_WriteEP (CDC_DEP_IN, (unsigned char *)&sendBuffer[0], i+1);
 342              	 .loc 1 220 0
 343 00fa 4FF08200 	 mov r0,#130
 344 00fe 40F20001 	 movw r1,#:lower16:.LANCHOR0
 345 0102 C0F20001 	 movt r1,#:upper16:.LANCHOR0
 346 0106 07F10102 	 add r2,r7,#1
 347 010a FFF7FEFF 	 bl USB_WriteEP
 348              	.LVL14:
 349              	.L12:
 350              	.LBE80:
 351              	.LBB81:
 352              	.LBB70:
 353              	 .loc 3 56 0 discriminator 1
 354 010e 2368     	 ldr r3,[r4,#0]
 355 0110 13F0010F 	 tst r3,#1
 356 0114 0FD1     	 bne .L17
 357              	 .loc 3 56 0 is_stmt 0
 358 0116 2046     	 mov r0,r4
 359 0118 FFF7FEFF 	 bl __cxa_guard_acquire
 360 011c 58B1     	 cbz r0,.L17
 361 011e 40F20000 	 movw r0,#:lower16:_ZZN4UART11getHostUARTEvE8hostUART
 362 0122 C0F20000 	 movt r0,#:upper16:_ZZN4UART11getHostUARTEvE8hostUART
 363 0126 4FF00001 	 mov r1,#0
 364 012a 0A46     	 mov r2,r1
 365 012c FFF7FEFF 	 bl _ZN4UARTC1Eh18communication_mode
 366 0130 2046     	 mov r0,r4
 367 0132 FFF7FEFF 	 bl __cxa_guard_release
 368              	.L17:
 369              	.LBE70:
 370              	.LBE81:
 371              	.LBB82:
 372              	.LBB83:
 373              	 .loc 4 159 0 is_stmt 1
 374 0136 40F20003 	 movw r3,#:lower16:_ZZN4UART11getHostUARTEvE8hostUART
 375 013a C0F20003 	 movt r3,#:upper16:_ZZN4UART11getHostUARTEvE8hostUART
 376 013e 93F84B30 	 ldrb r3,[r3,#75]
 377 0142 002B     	 cmp r3,#0
 378 0144 52D0     	 beq .L8
 379 0146 40F20003 	 movw r3,#:lower16:_ZZN4UART11getHostUARTEvE8hostUART
 380 014a C0F20003 	 movt r3,#:upper16:_ZZN4UART11getHostUARTEvE8hostUART
 381 014e 93F84B30 	 ldrb r3,[r3,#75]
 382 0152 042B     	 cmp r3,#4
 383 0154 4AD0     	 beq .L8
 384 0156 40F20005 	 movw r5,#:lower16:.LANCHOR0
 385 015a C0F20005 	 movt r5,#:upper16:.LANCHOR0
 386 015e 4FF00107 	 mov r7,#1
 387              	.LBE83:
 388              	.LBE82:
 389              	.LBB84:
 390              	.LBB79:
 391              	.LBB74:
 392              	 .loc 3 56 0
 393 0162 40F20006 	 movw r6,#:lower16:_ZZN4UART11getHostUARTEvE8hostUART
 394 0166 C0F20006 	 movt r6,#:upper16:_ZZN4UART11getHostUARTEvE8hostUART
 395 016a 87E7     	 b .L16
 396              	.LVL15:
 397              	.L10:
 398              	.LBE74:
 399              	.LBE79:
 400              	.LBE84:
 401              	.LBE65:
 402              	.LBB85:
 221:src/MightyBoard/shared/UART.cc **** 		}
 222:src/MightyBoard/shared/UART.cc **** 	} else if (index_ == RS485) {
 403              	 .loc 1 222 0
 404 016c 012B     	 cmp r3,#1
 405 016e 3DD1     	 bne .L8
 406              	.LVL16:
 407              	.LBB86:
 408              	.LBB87:
 409              	.LBB88:
 410              	.LBB89:
 411              	 .file 5 "src/MightyBoard/shared/Pin.hh"
   1:src/MightyBoard/shared/Pin.hh **** #ifndef PIN_HH
   2:src/MightyBoard/shared/Pin.hh **** #define PIN_HH
   3:src/MightyBoard/shared/Pin.hh **** 
   4:src/MightyBoard/shared/Pin.hh **** #include "LPCPort.hh"
   5:src/MightyBoard/shared/Pin.hh **** #include "Pin.hh"
   6:src/MightyBoard/shared/Pin.hh **** extern "C" {
   7:src/MightyBoard/shared/Pin.hh **** 	#include "lpc17xx_gpio.h"
   8:src/MightyBoard/shared/Pin.hh **** 	#include "lpc17xx_pinsel.h"
   9:src/MightyBoard/shared/Pin.hh **** 	#include "comm.h"
  10:src/MightyBoard/shared/Pin.hh **** }
  11:src/MightyBoard/shared/Pin.hh **** 
  12:src/MightyBoard/shared/Pin.hh **** /// \ingroup HardwareLibraries
  13:src/MightyBoard/shared/Pin.hh **** class Pin {
  14:src/MightyBoard/shared/Pin.hh **** private:
  15:src/MightyBoard/shared/Pin.hh **** 	uint8_t port_base;
  16:src/MightyBoard/shared/Pin.hh **** 	bool is_null;
  17:src/MightyBoard/shared/Pin.hh **** 	uint8_t pin_index;
  18:src/MightyBoard/shared/Pin.hh **** 	uint8_t pin_mask;
  19:src/MightyBoard/shared/Pin.hh **** 	uint8_t pin_mask_inverted;
  20:src/MightyBoard/shared/Pin.hh **** 
  21:src/MightyBoard/shared/Pin.hh **** public:
  22:src/MightyBoard/shared/Pin.hh **** 	Pin();
  23:src/MightyBoard/shared/Pin.hh **** 	Pin(const LPCPort& port_in, uint8_t pin_index_in);
  24:src/MightyBoard/shared/Pin.hh **** 	Pin(const Pin& other_pin);
  25:src/MightyBoard/shared/Pin.hh **** 	bool isNull() const;
  26:src/MightyBoard/shared/Pin.hh **** 	void setDirection(bool out) const;
  27:src/MightyBoard/shared/Pin.hh **** 	bool /*Pin::*/getValue() const {
  28:src/MightyBoard/shared/Pin.hh **** 		if (is_null)
  29:src/MightyBoard/shared/Pin.hh **** 			return false; // null pin is always low ... ?
  30:src/MightyBoard/shared/Pin.hh **** 		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
  31:src/MightyBoard/shared/Pin.hh **** //		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
  32:src/MightyBoard/shared/Pin.hh **** 	};
  33:src/MightyBoard/shared/Pin.hh **** 
  34:src/MightyBoard/shared/Pin.hh **** 	void /*Pin::*/setValue(bool on) const {
  35:src/MightyBoard/shared/Pin.hh **** 		if (is_null)
 412              	 .loc 5 35 0
 413 0170 40F20003 	 movw r3,#:lower16:.LANCHOR1
 414 0174 C0F20003 	 movt r3,#:upper16:.LANCHOR1
 415 0178 5B78     	 ldrb r3,[r3,#1]
 416 017a 5BB9     	 cbnz r3,.L18
  36:src/MightyBoard/shared/Pin.hh **** 		 	return;
  37:src/MightyBoard/shared/Pin.hh **** 		// uint8_t oldSREG = SREG;
  38:src/MightyBoard/shared/Pin.hh **** 
  39:src/MightyBoard/shared/Pin.hh **** //		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
  40:src/MightyBoard/shared/Pin.hh **** 		// cli();
  41:src/MightyBoard/shared/Pin.hh **** 		if (on) {
  42:src/MightyBoard/shared/Pin.hh **** //			PORTx |= pin_mask;
  43:src/MightyBoard/shared/Pin.hh **** //			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
  44:src/MightyBoard/shared/Pin.hh **** 			GPIO_SetValue(port_base, _BV(pin_index));
 417              	 .loc 5 44 0
 418 017c 40F20002 	 movw r2,#:lower16:.LANCHOR1
 419 0180 C0F20002 	 movt r2,#:upper16:.LANCHOR1
 420 0184 9378     	 ldrb r3,[r2,#2]
 421 0186 1078     	 ldrb r0,[r2,#0]
 422              	.LVL17:
 423 0188 4FF00101 	 mov r1,#1
 424 018c 01FA03F1 	 lsl r1,r1,r3
 425 0190 FFF7FEFF 	 bl GPIO_SetValue
 426              	.L18:
 427              	.LBE89:
 428              	.LBE88:
 429              	.LBE87:
 223:src/MightyBoard/shared/UART.cc **** 		speak();
 224:src/MightyBoard/shared/UART.cc **** 		_delay_us(10);
 430              	 .loc 1 224 0
 431 0194 4FF00A00 	 mov r0,#10
 432 0198 FFF7FEFF 	 bl _delay_us
 225:src/MightyBoard/shared/UART.cc **** 		loopback_bytes = 1;
 433              	 .loc 1 225 0
 434 019c 40F20003 	 movw r3,#:lower16:.LANCHOR2
 435 01a0 C0F20003 	 movt r3,#:upper16:.LANCHOR2
 436 01a4 4FF00102 	 mov r2,#1
 437 01a8 1A70     	 strb r2,[r3,#0]
 438              	.LBB90:
 439              	.LBB91:
  57:src/MightyBoard/shared/UART.hh **** //    static UART& getHostUART() { return hostUART; }
  58:src/MightyBoard/shared/UART.hh **** 
  59:src/MightyBoard/shared/UART.hh **** #if HAS_SLAVE_UART
  60:src/MightyBoard/shared/UART.hh ****     /// Get a reference to the slave UART
  61:src/MightyBoard/shared/UART.hh ****     /// \return slaveUART instance, which should act as a master to one or more slave toolheads.
  62:src/MightyBoard/shared/UART.hh ****     static UART& getSlaveUART() {static UART slaveUART(1,RS485); return slaveUART; }
 440              	 .loc 3 62 0
 441 01aa 40F20003 	 movw r3,#:lower16:_ZGVZN4UART12getSlaveUARTEvE9slaveUART
 442 01ae C0F20003 	 movt r3,#:upper16:_ZGVZN4UART12getSlaveUARTEvE9slaveUART
 443 01b2 1B68     	 ldr r3,[r3,#0]
 444 01b4 13F0010F 	 tst r3,#1
 445 01b8 15D1     	 bne .L19
 446 01ba 40F20000 	 movw r0,#:lower16:_ZGVZN4UART12getSlaveUARTEvE9slaveUART
 447 01be C0F20000 	 movt r0,#:upper16:_ZGVZN4UART12getSlaveUARTEvE9slaveUART
 448 01c2 FFF7FEFF 	 bl __cxa_guard_acquire
 449 01c6 70B1     	 cbz r0,.L19
 450 01c8 40F20000 	 movw r0,#:lower16:_ZZN4UART12getSlaveUARTEvE9slaveUART
 451 01cc C0F20000 	 movt r0,#:upper16:_ZZN4UART12getSlaveUARTEvE9slaveUART
 452 01d0 4FF00101 	 mov r1,#1
 453 01d4 0A46     	 mov r2,r1
 454 01d6 FFF7FEFF 	 bl _ZN4UARTC1Eh18communication_mode
 455 01da 40F20000 	 movw r0,#:lower16:_ZGVZN4UART12getSlaveUARTEvE9slaveUART
 456 01de C0F20000 	 movt r0,#:upper16:_ZGVZN4UART12getSlaveUARTEvE9slaveUART
 457 01e2 FFF7FEFF 	 bl __cxa_guard_release
 458              	.L19:
 459              	.LBE91:
 460              	.LBE90:
 226:src/MightyBoard/shared/UART.cc **** 		uint8_t bytestosend = getSlaveUART().out.getNextByteToSend();
 461              	 .loc 1 226 0
 462 01e6 0348     	 ldr r0,.L21+4
 463 01e8 FFF7FEFF 	 bl _ZN9OutPacket17getNextByteToSendEv
 464              	.LVL18:
 465              	.L8:
 466 01ec BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 467              	.L22:
 468              	 .align 2
 469              	.L21:
 470 01f0 28000000 	 .word _ZZN4UART11getHostUARTEvE8hostUART+40
 471 01f4 28000000 	 .word _ZZN4UART12getSlaveUARTEvE9slaveUART+40
 472              	.LBE86:
 473              	.LBE85:
 474              	.LBE64:
 475              	.LBE63:
 476              	 .cfi_endproc
 477              	.LFE79:
 479              	 .section .text._ZN4UART6enableEb,"ax",%progbits
 480              	 .align 2
 481              	 .global _ZN4UART6enableEb
 482              	 .thumb
 483              	 .thumb_func
 485              	_ZN4UART6enableEb:
 486              	.LFB80:
 227:src/MightyBoard/shared/UART.cc **** 	}
 228:src/MightyBoard/shared/UART.cc **** }
 229:src/MightyBoard/shared/UART.cc **** 
 230:src/MightyBoard/shared/UART.cc **** void UART::enable(bool enabled) {
 487              	 .loc 1 230 0
 488              	 .cfi_startproc
 489              	 
 490              	 
 491              	.LVL19:
 492 0000 70B5     	 push {r4,r5,r6,lr}
 493              	.LCFI4:
 494              	 .cfi_def_cfa_offset 16
 495              	 .cfi_offset 14,-4
 496              	 .cfi_offset 6,-8
 497              	 .cfi_offset 5,-12
 498              	 .cfi_offset 4,-16
 499 0002 0446     	 mov r4,r0
 231:src/MightyBoard/shared/UART.cc **** //	xprintf("UART::enable" " (%s:%d)\n",_F_,_L_);
 232:src/MightyBoard/shared/UART.cc **** 	enabled_ = enabled;
 500              	 .loc 1 232 0
 501 0004 8170     	 strb r1,[r0,#2]
 233:src/MightyBoard/shared/UART.cc **** 	if (index_ == 0) {
 502              	 .loc 1 233 0
 503 0006 4378     	 ldrb r3,[r0,#1]
 504 0008 002B     	 cmp r3,#0
 505 000a 39D1     	 bne .L24
 234:src/MightyBoard/shared/UART.cc **** 		if (enabled) {
 506              	 .loc 1 234 0
 507 000c 51B3     	 cbz r1,.L25
 235:src/MightyBoard/shared/UART.cc **** 			xprintf("USB_Connect(TRUE)" " (%s:%d)\n",_F_,_L_);
 508              	 .loc 1 235 0 discriminator 1
 509 000e 40F20000 	 movw r0,#:lower16:.LC8
 510              	.LVL20:
 511 0012 C0F20000 	 movt r0,#:upper16:.LC8
 512 0016 4E49     	 ldr r1,.L35
 513              	.LVL21:
 514 0018 4FF0EB02 	 mov r2,#235
 515 001c FFF7FEFF 	 bl xprintf
 516              	.LVL22:
 236:src/MightyBoard/shared/UART.cc **** 			USB_Connect(TRUE);      // USB Connect
 517              	 .loc 1 236 0 discriminator 1
 518 0020 4FF00100 	 mov r0,#1
 519 0024 FFF7FEFF 	 bl USB_Connect
 237:src/MightyBoard/shared/UART.cc **** 			while (!USB_Configuration){		// wait until USB is configured
 520              	 .loc 1 237 0 discriminator 1
 521 0028 40F20003 	 movw r3,#:lower16:USB_Configuration
 522 002c C0F20003 	 movt r3,#:upper16:USB_Configuration
 523 0030 1B78     	 ldrb r3,[r3,#0]
 524 0032 6BB9     	 cbnz r3,.L26
 238:src/MightyBoard/shared/UART.cc **** 				_delay_us(100);
 525              	 .loc 1 238 0
 526 0034 4FF06406 	 mov r6,#100
 237:src/MightyBoard/shared/UART.cc **** 			while (!USB_Configuration){		// wait until USB is configured
 527              	 .loc 1 237 0
 528 0038 40F20005 	 movw r5,#:lower16:USB_Configuration
 529 003c C0F20005 	 movt r5,#:upper16:USB_Configuration
 530              	.L33:
 531              	 .loc 1 238 0
 532 0040 3046     	 mov r0,r6
 533 0042 FFF7FEFF 	 bl _delay_us
 239:src/MightyBoard/shared/UART.cc **** 				WDT_Feed ();
 534              	 .loc 1 239 0
 535 0046 FFF7FEFF 	 bl WDT_Feed
 237:src/MightyBoard/shared/UART.cc **** 			while (!USB_Configuration){		// wait until USB is configured
 536              	 .loc 1 237 0
 537 004a 2B78     	 ldrb r3,[r5,#0]
 538 004c 002B     	 cmp r3,#0
 539 004e F7D0     	 beq .L33
 540              	.L26:
 240:src/MightyBoard/shared/UART.cc **** //				xprintf("enable !USB_Configuration" " (%s:%d)\n",_F_,_L_);
 241:src/MightyBoard/shared/UART.cc **** 			}
 242:src/MightyBoard/shared/UART.cc **** 			xprintf("after USB_Connect(TRUE)" " (%s:%d)\n",_F_,_L_);
 541              	 .loc 1 242 0 discriminator 1
 542 0050 40F20000 	 movw r0,#:lower16:.LC9
 543 0054 C0F20000 	 movt r0,#:upper16:.LC9
 544 0058 3D49     	 ldr r1,.L35
 545 005a 4FF0F202 	 mov r2,#242
 546 005e FFF7FEFF 	 bl xprintf
 547 0062 33E0     	 b .L28
 548              	.LVL23:
 549              	.L25:
 243:src/MightyBoard/shared/UART.cc **** 		}
 244:src/MightyBoard/shared/UART.cc **** 		else {
 245:src/MightyBoard/shared/UART.cc **** 			xprintf("Uart0 Disabled" " (%s:%d)\n",_F_,_L_);
 550              	 .loc 1 245 0 discriminator 1
 551 0064 40F20000 	 movw r0,#:lower16:.LC10
 552 0068 C0F20000 	 movt r0,#:upper16:.LC10
 553 006c 3849     	 ldr r1,.L35
 554              	.LVL24:
 555 006e 4FF0F502 	 mov r2,#245
 556 0072 FFF7FEFF 	 bl xprintf
 557              	.LVL25:
 246:src/MightyBoard/shared/UART.cc **** 			USB_Connect(FALSE);      // USB Disconnect
 558              	 .loc 1 246 0 discriminator 1
 559 0076 4FF00000 	 mov r0,#0
 560 007a FFF7FEFF 	 bl USB_Connect
 561 007e 25E0     	 b .L28
 562              	.LVL26:
 563              	.L24:
 247:src/MightyBoard/shared/UART.cc **** 		}
 248:src/MightyBoard/shared/UART.cc **** 	} else if (index_ == 1) {
 564              	 .loc 1 248 0
 565 0080 012B     	 cmp r3,#1
 566 0082 23D1     	 bne .L28
 249:src/MightyBoard/shared/UART.cc **** 		if (enabled){
 567              	 .loc 1 249 0
 568 0084 89B1     	 cbz r1,.L29
 250:src/MightyBoard/shared/UART.cc **** 			xprintf("Uart1 Enabled" " (%s:%d)\n",_F_,_L_);
 569              	 .loc 1 250 0 discriminator 1
 570 0086 40F20000 	 movw r0,#:lower16:.LC11
 571 008a C0F20000 	 movt r0,#:upper16:.LC11
 572 008e 3049     	 ldr r1,.L35
 573              	.LVL27:
 574 0090 4FF0FA02 	 mov r2,#250
 575 0094 FFF7FEFF 	 bl xprintf
 576              	.LVL28:
 251:src/MightyBoard/shared/UART.cc **** 			UART_TxCmd((LPC_UART_TypeDef *)LPC_UART1, ENABLE);
 577              	 .loc 1 251 0 discriminator 1
 578 0098 4FF00000 	 mov r0,#0
 579 009c C4F20100 	 movt r0,16385
 580 00a0 4FF00101 	 mov r1,#1
 581 00a4 FFF7FEFF 	 bl UART_TxCmd
 582 00a8 10E0     	 b .L28
 583              	.LVL29:
 584              	.L29:
 252:src/MightyBoard/shared/UART.cc **** 		}
 253:src/MightyBoard/shared/UART.cc **** 		else {
 254:src/MightyBoard/shared/UART.cc **** 			xprintf("Uart1 Disabled" " (%s:%d)\n",_F_,_L_);
 585              	 .loc 1 254 0 discriminator 1
 586 00aa 40F20000 	 movw r0,#:lower16:.LC12
 587 00ae C0F20000 	 movt r0,#:upper16:.LC12
 588 00b2 2749     	 ldr r1,.L35
 589              	.LVL30:
 590 00b4 4FF0FE02 	 mov r2,#254
 591 00b8 FFF7FEFF 	 bl xprintf
 592              	.LVL31:
 255:src/MightyBoard/shared/UART.cc **** 			UART_TxCmd((LPC_UART_TypeDef *)LPC_UART1, DISABLE);
 593              	 .loc 1 255 0 discriminator 1
 594 00bc 4FF00000 	 mov r0,#0
 595 00c0 C4F20100 	 movt r0,16385
 596 00c4 4FF00001 	 mov r1,#0
 597 00c8 FFF7FEFF 	 bl UART_TxCmd
 598              	.L28:
 256:src/MightyBoard/shared/UART.cc **** 		}
 257:src/MightyBoard/shared/UART.cc **** 	}
 258:src/MightyBoard/shared/UART.cc ****         if (mode_ == RS485) {
 599              	 .loc 1 258 0
 600 00cc 2378     	 ldrb r3,[r4,#0]
 601 00ce 012B     	 cmp r3,#1
 602 00d0 33D1     	 bne .L30
 259:src/MightyBoard/shared/UART.cc ****                 // If this is an RS485 pin, set up the RX and TX enable control lines.
 260:src/MightyBoard/shared/UART.cc ****                 TX_Enable.setDirection(true);
 603              	 .loc 1 260 0
 604 00d2 40F20000 	 movw r0,#:lower16:.LANCHOR1
 605 00d6 C0F20000 	 movt r0,#:upper16:.LANCHOR1
 606 00da 4FF00101 	 mov r1,#1
 607 00de FFF7FEFF 	 bl _ZNK3Pin12setDirectionEb
 261:src/MightyBoard/shared/UART.cc ****                 RX_Enable.setDirection(true);
 608              	 .loc 1 261 0
 609 00e2 40F20004 	 movw r4,#:lower16:.LANCHOR3
 610              	.LVL32:
 611 00e6 C0F20004 	 movt r4,#:upper16:.LANCHOR3
 612 00ea 2046     	 mov r0,r4
 613 00ec 4FF00101 	 mov r1,#1
 614 00f0 FFF7FEFF 	 bl _ZNK3Pin12setDirectionEb
 615              	.LVL33:
 616              	.LBB98:
 617              	.LBB99:
  35:src/MightyBoard/shared/Pin.hh **** 		if (is_null)
 618              	 .loc 5 35 0
 619 00f4 6378     	 ldrb r3,[r4,#1]
 620 00f6 3BB9     	 cbnz r3,.L31
  45:src/MightyBoard/shared/Pin.hh **** 		} else {
  46:src/MightyBoard/shared/Pin.hh **** //			PORTx &= pin_mask_inverted;
  47:src/MightyBoard/shared/Pin.hh **** //			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
  48:src/MightyBoard/shared/Pin.hh **** 			GPIO_ClearValue(port_base, _BV(pin_index));
 621              	 .loc 5 48 0
 622 00f8 A378     	 ldrb r3,[r4,#2]
 623 00fa 2078     	 ldrb r0,[r4,#0]
 624 00fc 4FF00101 	 mov r1,#1
 625 0100 01FA03F1 	 lsl r1,r1,r3
 626 0104 FFF7FEFF 	 bl GPIO_ClearValue
 627              	.L31:
 628              	.LVL34:
 629              	.LBE99:
 630              	.LBE98:
 631              	.LBB100:
 632              	.LBB101:
 633              	.LBB102:
  35:src/MightyBoard/shared/Pin.hh **** 		if (is_null)
 634              	 .loc 5 35 0
 635 0108 40F20003 	 movw r3,#:lower16:.LANCHOR1
 636 010c C0F20003 	 movt r3,#:upper16:.LANCHOR1
 637 0110 5B78     	 ldrb r3,[r3,#1]
 638 0112 5BB9     	 cbnz r3,.L32
 639              	 .loc 5 48 0
 640 0114 40F20002 	 movw r2,#:lower16:.LANCHOR1
 641 0118 C0F20002 	 movt r2,#:upper16:.LANCHOR1
 642 011c 9378     	 ldrb r3,[r2,#2]
 643 011e 1078     	 ldrb r0,[r2,#0]
 644 0120 4FF00101 	 mov r1,#1
 645 0124 01FA03F1 	 lsl r1,r1,r3
 646 0128 FFF7FEFF 	 bl GPIO_ClearValue
 647              	.L32:
 648              	.LBE102:
 649              	.LBE101:
 650              	.LBE100:
 262:src/MightyBoard/shared/UART.cc ****                 RX_Enable.setValue(false);  // Active low
 263:src/MightyBoard/shared/UART.cc ****                 listen();
 264:src/MightyBoard/shared/UART.cc ****                 loopback_bytes = 0;
 651              	 .loc 1 264 0
 652 012c 40F20003 	 movw r3,#:lower16:.LANCHOR2
 653 0130 C0F20003 	 movt r3,#:upper16:.LANCHOR2
 654 0134 4FF00002 	 mov r2,#0
 655 0138 1A70     	 strb r2,[r3,#0]
 656              	.LVL35:
 657              	.L30:
 265:src/MightyBoard/shared/UART.cc ****         }
 266:src/MightyBoard/shared/UART.cc **** 	xprintf("end UART::enable" " (%s:%d)\n",_F_,_L_);
 658              	 .loc 1 266 0 discriminator 1
 659 013a 40F20000 	 movw r0,#:lower16:.LC13
 660 013e C0F20000 	 movt r0,#:upper16:.LC13
 661 0142 0349     	 ldr r1,.L35
 662 0144 4FF48572 	 mov r2,#266
 663 0148 FFF7FEFF 	 bl xprintf
 267:src/MightyBoard/shared/UART.cc **** }
 664              	 .loc 1 267 0 discriminator 1
 665 014c 70BD     	 pop {r4,r5,r6,pc}
 666              	.L36:
 667 014e 00BF     	 .align 2
 668              	.L35:
 669 0150 17000000 	 .word .LC1+23
 670              	 .cfi_endproc
 671              	.LFE80:
 673              	 .section .text.UART1_IRQHandler,"ax",%progbits
 674              	 .align 2
 675              	 .global UART1_IRQHandler
 676              	 .thumb
 677              	 .thumb_func
 679              	UART1_IRQHandler:
 680              	.LFB81:
 268:src/MightyBoard/shared/UART.cc **** 
 269:src/MightyBoard/shared/UART.cc **** extern "C" void UART1_IRQHandler(void){
 681              	 .loc 1 269 0
 682              	 .cfi_startproc
 683              	 
 684              	 
 685 0000 10B5     	 push {r4,lr}
 686              	.LCFI5:
 687              	 .cfi_def_cfa_offset 8
 688              	 .cfi_offset 14,-4
 689              	 .cfi_offset 4,-8
 690              	.LBB121:
 270:src/MightyBoard/shared/UART.cc **** 	xprintf("UART1_IRQ" " (%s:%d)\n",_F_,_L_);
 691              	 .loc 1 270 0
 692 0002 40F20000 	 movw r0,#:lower16:.LC14
 693 0006 C0F20000 	 movt r0,#:upper16:.LC14
 694 000a 6F49     	 ldr r1,.L48
 695 000c 4FF48772 	 mov r2,#270
 696 0010 FFF7FEFF 	 bl xprintf
 271:src/MightyBoard/shared/UART.cc **** 
 272:src/MightyBoard/shared/UART.cc **** 	uint32_t intsrc, tmp, tmp1;
 273:src/MightyBoard/shared/UART.cc **** 	// Determine the interrupt source
 274:src/MightyBoard/shared/UART.cc **** 	intsrc = UART_GetIntId((LPC_UART_TypeDef *)LPC_UART1);
 697              	 .loc 1 274 0
 698 0014 4FF00000 	 mov r0,#0
 699 0018 C4F20100 	 movt r0,16385
 700 001c FFF7FEFF 	 bl UART_GetIntId
 701              	.LVL36:
 275:src/MightyBoard/shared/UART.cc **** 	tmp = intsrc & UART_IIR_INTID_MASK;
 702              	 .loc 1 275 0
 703 0020 00F00E04 	 and r4,r0,#14
 704              	.LVL37:
 276:src/MightyBoard/shared/UART.cc **** 	// Receive Line Status
 277:src/MightyBoard/shared/UART.cc **** 	if (tmp == UART_IIR_INTID_RLS){
 705              	 .loc 1 277 0
 706 0024 062C     	 cmp r4,#6
 707 0026 06D1     	 bne .L38
 278:src/MightyBoard/shared/UART.cc **** 		// Check line status
 279:src/MightyBoard/shared/UART.cc **** 		tmp1 = UART_GetLineStatus((LPC_UART_TypeDef *)LPC_UART1);
 708              	 .loc 1 279 0
 709 0028 4FF00000 	 mov r0,#0
 710              	.LVL38:
 711 002c C4F20100 	 movt r0,16385
 712 0030 FFF7FEFF 	 bl UART_GetLineStatus
 713 0034 10BD     	 pop {r4,pc}
 714              	.LVL39:
 715              	.L38:
 716              	.LBB122:
 280:src/MightyBoard/shared/UART.cc **** 		// Mask out the Receive Ready and Transmit Holding empty status
 281:src/MightyBoard/shared/UART.cc **** 		tmp1 &= (UART_LSR_OE | UART_LSR_PE | UART_LSR_FE | UART_LSR_BI | UART_LSR_RXFE);
 282:src/MightyBoard/shared/UART.cc **** 		// If any error exist
 283:src/MightyBoard/shared/UART.cc **** 		// if (tmp1) {
 284:src/MightyBoard/shared/UART.cc **** 		//	UART_IntErr(tmp1);
 285:src/MightyBoard/shared/UART.cc **** 		// }
 286:src/MightyBoard/shared/UART.cc **** 	}
 287:src/MightyBoard/shared/UART.cc **** 	// Receive Data Available or Character time-out
 288:src/MightyBoard/shared/UART.cc **** 	if ((tmp == UART_IIR_INTID_RDA) || (tmp == UART_IIR_INTID_CTI)) {
 717              	 .loc 1 288 0
 718 0036 0C2C     	 cmp r4,#12
 719 0038 14BF     	 ite ne
 720 003a 0023     	 movne r3,#0
 721 003c 0123     	 moveq r3,#1
 722 003e 042C     	 cmp r4,#4
 723 0040 08BF     	 it eq
 724 0042 43F00103 	 orreq r3,r3,#1
 725 0046 002B     	 cmp r3,#0
 726 0048 42D0     	 beq .L40
 727              	.LBB123:
 289:src/MightyBoard/shared/UART.cc **** 		static uint8_t byte_in;
 290:src/MightyBoard/shared/UART.cc **** 		byte_in = UART_ReceiveByte((LPC_UART_TypeDef *)LPC_UART1);
 728              	 .loc 1 290 0
 729 004a 4FF00000 	 mov r0,#0
 730              	.LVL40:
 731 004e C4F20100 	 movt r0,16385
 732 0052 FFF7FEFF 	 bl UART_ReceiveByte
 733 0056 40F20003 	 movw r3,#:lower16:.LANCHOR4
 734 005a C0F20003 	 movt r3,#:upper16:.LANCHOR4
 735 005e 1870     	 strb r0,[r3,#0]
 291:src/MightyBoard/shared/UART.cc **** 		if (loopback_bytes > 0) {
 736              	 .loc 1 291 0
 737 0060 40F20003 	 movw r3,#:lower16:.LANCHOR2
 738 0064 C0F20003 	 movt r3,#:upper16:.LANCHOR2
 739 0068 1B78     	 ldrb r3,[r3,#0]
 740 006a 4BB1     	 cbz r3,.L41
 292:src/MightyBoard/shared/UART.cc **** 			loopback_bytes--;
 741              	 .loc 1 292 0
 742 006c 40F20003 	 movw r3,#:lower16:.LANCHOR2
 743 0070 C0F20003 	 movt r3,#:upper16:.LANCHOR2
 744 0074 1A78     	 ldrb r2,[r3,#0]
 745 0076 02F1FF32 	 add r2,r2,#-1
 746 007a D2B2     	 uxtb r2,r2
 747 007c 1A70     	 strb r2,[r3,#0]
 748 007e 27E0     	 b .L40
 749              	.L41:
 750              	.LBB124:
 751              	.LBB125:
 752              	 .loc 3 62 0
 753 0080 40F20003 	 movw r3,#:lower16:_ZGVZN4UART12getSlaveUARTEvE9slaveUART
 754 0084 C0F20003 	 movt r3,#:upper16:_ZGVZN4UART12getSlaveUARTEvE9slaveUART
 755 0088 1B68     	 ldr r3,[r3,#0]
 756 008a 13F0010F 	 tst r3,#1
 757 008e 15D1     	 bne .L42
 758 0090 40F20000 	 movw r0,#:lower16:_ZGVZN4UART12getSlaveUARTEvE9slaveUART
 759 0094 C0F20000 	 movt r0,#:upper16:_ZGVZN4UART12getSlaveUARTEvE9slaveUART
 760 0098 FFF7FEFF 	 bl __cxa_guard_acquire
 761 009c 70B1     	 cbz r0,.L42
 762 009e 40F20000 	 movw r0,#:lower16:_ZZN4UART12getSlaveUARTEvE9slaveUART
 763 00a2 C0F20000 	 movt r0,#:upper16:_ZZN4UART12getSlaveUARTEvE9slaveUART
 764 00a6 4FF00101 	 mov r1,#1
 765 00aa 0A46     	 mov r2,r1
 766 00ac FFF7FEFF 	 bl _ZN4UARTC1Eh18communication_mode
 767 00b0 40F20000 	 movw r0,#:lower16:_ZGVZN4UART12getSlaveUARTEvE9slaveUART
 768 00b4 C0F20000 	 movt r0,#:upper16:_ZGVZN4UART12getSlaveUARTEvE9slaveUART
 769 00b8 FFF7FEFF 	 bl __cxa_guard_release
 770              	.L42:
 771              	.LBE125:
 772              	.LBE124:
 293:src/MightyBoard/shared/UART.cc **** 		} else {
 294:src/MightyBoard/shared/UART.cc **** 			UART::getSlaveUART().in.processByte( UART_ReceiveByte((LPC_UART_TypeDef *)LPC_UART1) );
 773              	 .loc 1 294 0
 774 00bc 4FF00000 	 mov r0,#0
 775 00c0 C4F20100 	 movt r0,16385
 776 00c4 FFF7FEFF 	 bl UART_ReceiveByte
 777 00c8 0146     	 mov r1,r0
 778 00ca 4048     	 ldr r0,.L48+4
 779 00cc FFF7FEFF 	 bl _ZN8InPacket11processByteEh
 780              	.L40:
 781              	.LBE123:
 782              	.LBE122:
 295:src/MightyBoard/shared/UART.cc **** 		}
 296:src/MightyBoard/shared/UART.cc **** 	}
 297:src/MightyBoard/shared/UART.cc **** 
 298:src/MightyBoard/shared/UART.cc **** 	// Transmit Holding Empty
 299:src/MightyBoard/shared/UART.cc **** 	if (tmp == UART_IIR_INTID_THRE){
 783              	 .loc 1 299 0
 784 00d0 022C     	 cmp r4,#2
 785 00d2 77D1     	 bne .L37
 786              	.LBB126:
 787              	.LBB127:
 788              	 .loc 3 62 0
 789 00d4 40F20003 	 movw r3,#:lower16:_ZGVZN4UART12getSlaveUARTEvE9slaveUART
 790 00d8 C0F20003 	 movt r3,#:upper16:_ZGVZN4UART12getSlaveUARTEvE9slaveUART
 791 00dc 1B68     	 ldr r3,[r3,#0]
 792 00de 13F0010F 	 tst r3,#1
 793 00e2 15D1     	 bne .L43
 794 00e4 40F20000 	 movw r0,#:lower16:_ZGVZN4UART12getSlaveUARTEvE9slaveUART
 795 00e8 C0F20000 	 movt r0,#:upper16:_ZGVZN4UART12getSlaveUARTEvE9slaveUART
 796 00ec FFF7FEFF 	 bl __cxa_guard_acquire
 797 00f0 70B1     	 cbz r0,.L43
 798 00f2 40F20000 	 movw r0,#:lower16:_ZZN4UART12getSlaveUARTEvE9slaveUART
 799 00f6 C0F20000 	 movt r0,#:upper16:_ZZN4UART12getSlaveUARTEvE9slaveUART
 800 00fa 4FF00101 	 mov r1,#1
 801 00fe 0A46     	 mov r2,r1
 802 0100 FFF7FEFF 	 bl _ZN4UARTC1Eh18communication_mode
 803 0104 40F20000 	 movw r0,#:lower16:_ZGVZN4UART12getSlaveUARTEvE9slaveUART
 804 0108 C0F20000 	 movt r0,#:upper16:_ZGVZN4UART12getSlaveUARTEvE9slaveUART
 805 010c FFF7FEFF 	 bl __cxa_guard_release
 806              	.L43:
 807              	.LBE127:
 808              	.LBE126:
 809              	.LBB128:
 810              	.LBB129:
 811              	 .loc 4 159 0
 812 0110 40F20003 	 movw r3,#:lower16:_ZZN4UART12getSlaveUARTEvE9slaveUART
 813 0114 C0F20003 	 movt r3,#:upper16:_ZZN4UART12getSlaveUARTEvE9slaveUART
 814 0118 93F84B30 	 ldrb r3,[r3,#75]
 815 011c 002B     	 cmp r3,#0
 816 011e 46D0     	 beq .L44
 817 0120 40F20003 	 movw r3,#:lower16:_ZZN4UART12getSlaveUARTEvE9slaveUART
 818 0124 C0F20003 	 movt r3,#:upper16:_ZZN4UART12getSlaveUARTEvE9slaveUART
 819 0128 93F84B30 	 ldrb r3,[r3,#75]
 820 012c 042B     	 cmp r3,#4
 821 012e 3ED0     	 beq .L44
 822              	.LBE129:
 823              	.LBE128:
 300:src/MightyBoard/shared/UART.cc **** 		if (UART::getSlaveUART().out.isSending()) {
 301:src/MightyBoard/shared/UART.cc **** 			loopback_bytes++;
 824              	 .loc 1 301 0
 825 0130 40F20003 	 movw r3,#:lower16:.LANCHOR2
 826 0134 C0F20003 	 movt r3,#:upper16:.LANCHOR2
 827 0138 1A78     	 ldrb r2,[r3,#0]
 828 013a 02F10102 	 add r2,r2,#1
 829 013e D2B2     	 uxtb r2,r2
 830 0140 1A70     	 strb r2,[r3,#0]
 831              	.LBB130:
 832              	.LBB131:
 833              	 .loc 3 62 0
 834 0142 40F20003 	 movw r3,#:lower16:_ZGVZN4UART12getSlaveUARTEvE9slaveUART
 835 0146 C0F20003 	 movt r3,#:upper16:_ZGVZN4UART12getSlaveUARTEvE9slaveUART
 836 014a 1B68     	 ldr r3,[r3,#0]
 837 014c 13F0010F 	 tst r3,#1
 838 0150 15D1     	 bne .L45
 839 0152 40F20000 	 movw r0,#:lower16:_ZGVZN4UART12getSlaveUARTEvE9slaveUART
 840 0156 C0F20000 	 movt r0,#:upper16:_ZGVZN4UART12getSlaveUARTEvE9slaveUART
 841 015a FFF7FEFF 	 bl __cxa_guard_acquire
 842 015e 70B1     	 cbz r0,.L45
 843 0160 40F20000 	 movw r0,#:lower16:_ZZN4UART12getSlaveUARTEvE9slaveUART
 844 0164 C0F20000 	 movt r0,#:upper16:_ZZN4UART12getSlaveUARTEvE9slaveUART
 845 0168 4FF00101 	 mov r1,#1
 846 016c 0A46     	 mov r2,r1
 847 016e FFF7FEFF 	 bl _ZN4UARTC1Eh18communication_mode
 848 0172 40F20000 	 movw r0,#:lower16:_ZGVZN4UART12getSlaveUARTEvE9slaveUART
 849 0176 C0F20000 	 movt r0,#:upper16:_ZGVZN4UART12getSlaveUARTEvE9slaveUART
 850 017a FFF7FEFF 	 bl __cxa_guard_release
 851              	.L45:
 852              	.LBE131:
 853              	.LBE130:
 302:src/MightyBoard/shared/UART.cc **** 			UART_SendByte((LPC_UART_TypeDef *)LPC_UART1, UART::getSlaveUART().out.getNextByteToSend());  // 
 854              	 .loc 1 302 0
 855 017e 1448     	 ldr r0,.L48+8
 856 0180 FFF7FEFF 	 bl _ZN9OutPacket17getNextByteToSendEv
 857 0184 0146     	 mov r1,r0
 858 0186 4FF00000 	 mov r0,#0
 859 018a C4F20100 	 movt r0,16385
 860 018e FFF7FEFF 	 bl UART_SendByte
 861 0192 10BD     	 pop {r4,pc}
 862              	.LVL41:
 863              	.L47:
 864              	.LBB132:
 865              	.LBB133:
 866              	.LBB134:
 867              	 .loc 5 48 0
 868 0194 40F20002 	 movw r2,#:lower16:.LANCHOR1
 869 0198 C0F20002 	 movt r2,#:upper16:.LANCHOR1
 870 019c 9378     	 ldrb r3,[r2,#2]
 871 019e 1078     	 ldrb r0,[r2,#0]
 872 01a0 4FF00101 	 mov r1,#1
 873 01a4 01FA03F1 	 lsl r1,r1,r3
 874 01a8 FFF7FEFF 	 bl GPIO_ClearValue
 875 01ac 10BD     	 pop {r4,pc}
 876              	.LVL42:
 877              	.L44:
 878              	.LBE134:
 879              	.LBE133:
 880              	.LBE132:
 303:src/MightyBoard/shared/UART.cc **** 		} else {
 304:src/MightyBoard/shared/UART.cc **** 			_delay_us(10);
 881              	 .loc 1 304 0
 882 01ae 4FF00A00 	 mov r0,#10
 883 01b2 FFF7FEFF 	 bl _delay_us
 884              	.LVL43:
 885              	.LBB137:
 886              	.LBB136:
 887              	.LBB135:
  35:src/MightyBoard/shared/Pin.hh **** 		if (is_null)
 888              	 .loc 5 35 0
 889 01b6 40F20003 	 movw r3,#:lower16:.LANCHOR1
 890 01ba C0F20003 	 movt r3,#:upper16:.LANCHOR1
 891 01be 5B78     	 ldrb r3,[r3,#1]
 892 01c0 002B     	 cmp r3,#0
 893 01c2 E7D0     	 beq .L47
 894              	.LVL44:
 895              	.L37:
 896 01c4 10BD     	 pop {r4,pc}
 897              	.L49:
 898 01c6 00BF     	 .align 2
 899              	.L48:
 900 01c8 17000000 	 .word .LC1+23
 901 01cc 03000000 	 .word _ZZN4UART12getSlaveUARTEvE9slaveUART+3
 902 01d0 28000000 	 .word _ZZN4UART12getSlaveUARTEvE9slaveUART+40
 903              	.LBE135:
 904              	.LBE136:
 905              	.LBE137:
 906              	.LBE121:
 907              	 .cfi_endproc
 908              	.LFE81:
 910              	 .section .text.CANActivity_IRQHandler,"ax",%progbits
 911              	 .align 2
 912              	 .global CANActivity_IRQHandler
 913              	 .thumb
 914              	 .thumb_func
 916              	CANActivity_IRQHandler:
 917              	.LFB82:
 305:src/MightyBoard/shared/UART.cc **** 			listen();
 306:src/MightyBoard/shared/UART.cc **** 		}
 307:src/MightyBoard/shared/UART.cc **** 	}
 308:src/MightyBoard/shared/UART.cc **** }
 309:src/MightyBoard/shared/UART.cc **** 
 310:src/MightyBoard/shared/UART.cc **** uint8_t BulkBufOut  [USB_CDC_BUFSIZE];
 311:src/MightyBoard/shared/UART.cc **** 
 312:src/MightyBoard/shared/UART.cc **** extern "C" void CANActivity_IRQHandler(void){
 918              	 .loc 1 312 0
 919              	 .cfi_startproc
 920              	 
 921              	 
 922 0000 2DE9F041 	 push {r4,r5,r6,r7,r8,lr}
 923              	.LCFI6:
 924              	 .cfi_def_cfa_offset 24
 925              	 .cfi_offset 14,-4
 926              	 .cfi_offset 8,-8
 927              	 .cfi_offset 7,-12
 928              	 .cfi_offset 6,-16
 929              	 .cfi_offset 5,-20
 930              	 .cfi_offset 4,-24
 931              	.LBB143:
 313:src/MightyBoard/shared/UART.cc **** 	int numBytesRead = USB_ReadEP(CDC_DEP_OUT, &BulkBufOut[0]);
 932              	 .loc 1 313 0
 933 0004 4FF00200 	 mov r0,#2
 934 0008 40F20001 	 movw r1,#:lower16:.LANCHOR5
 935 000c C0F20001 	 movt r1,#:upper16:.LANCHOR5
 936 0010 FFF7FEFF 	 bl USB_ReadEP
 937 0014 0546     	 mov r5,r0
 938              	.LVL45:
 314:src/MightyBoard/shared/UART.cc **** 		xprintf("\nin");
 939              	 .loc 1 314 0
 940 0016 40F20000 	 movw r0,#:lower16:.LC15
 941              	.LVL46:
 942 001a C0F20000 	 movt r0,#:upper16:.LC15
 943 001e FFF7FEFF 	 bl xprintf
 944              	.LVL47:
 945              	.LBB144:
 315:src/MightyBoard/shared/UART.cc **** 	for (int i = 0; i < numBytesRead; i++){
 946              	 .loc 1 315 0
 947 0022 002D     	 cmp r5,#0
 948 0024 2DDD     	 ble .L51
 949 0026 40F20006 	 movw r6,#:lower16:.LANCHOR5
 950 002a C0F20006 	 movt r6,#:upper16:.LANCHOR5
 312:src/MightyBoard/shared/UART.cc **** extern "C" void CANActivity_IRQHandler(void){
 951              	 .loc 1 312 0
 952 002e 7519     	 adds r5,r6,r5
 953              	.LVL48:
 316:src/MightyBoard/shared/UART.cc **** 		xprintf(" %d",BulkBufOut[i]);
 954              	 .loc 1 316 0
 955 0030 40F20007 	 movw r7,#:lower16:.LC6
 956 0034 C0F20007 	 movt r7,#:upper16:.LC6
 957              	.LBB145:
 958              	.LBB146:
  56:src/MightyBoard/shared/UART.hh ****     static UART& getHostUART() {static UART hostUART(0,RS232); return hostUART; }
 959              	 .loc 3 56 0
 960 0038 40F20004 	 movw r4,#:lower16:_ZGVZN4UART11getHostUARTEvE8hostUART
 961 003c C0F20004 	 movt r4,#:upper16:_ZGVZN4UART11getHostUARTEvE8hostUART
 962 0040 40F20008 	 movw r8,#:lower16:_ZZN4UART11getHostUARTEvE8hostUART
 963 0044 C0F20008 	 movt r8,#:upper16:_ZZN4UART11getHostUARTEvE8hostUART
 964              	.LVL49:
 965              	.L53:
 966              	.LBE146:
 967              	.LBE145:
 968              	 .loc 1 316 0 discriminator 2
 969 0048 3846     	 mov r0,r7
 970 004a 16F8011B 	 ldrb r1,[r6],#1
 971 004e FFF7FEFF 	 bl xprintf
 972              	.LBB148:
 973              	.LBB147:
  56:src/MightyBoard/shared/UART.hh ****     static UART& getHostUART() {static UART hostUART(0,RS232); return hostUART; }
 974              	 .loc 3 56 0 discriminator 2
 975 0052 2368     	 ldr r3,[r4,#0]
 976 0054 13F0010F 	 tst r3,#1
 977 0058 0CD1     	 bne .L52
  56:src/MightyBoard/shared/UART.hh ****     static UART& getHostUART() {static UART hostUART(0,RS232); return hostUART; }
 978              	 .loc 3 56 0 is_stmt 0
 979 005a 2046     	 mov r0,r4
 980 005c FFF7FEFF 	 bl __cxa_guard_acquire
 981 0060 40B1     	 cbz r0,.L52
 982 0062 4046     	 mov r0,r8
 983 0064 4FF00001 	 mov r1,#0
 984 0068 0A46     	 mov r2,r1
 985 006a FFF7FEFF 	 bl _ZN4UARTC1Eh18communication_mode
 986 006e 2046     	 mov r0,r4
 987 0070 FFF7FEFF 	 bl __cxa_guard_release
 988              	.L52:
 989              	.LBE147:
 990              	.LBE148:
 317:src/MightyBoard/shared/UART.cc **** 		UART::getHostUART().in.processByte( BulkBufOut[i] );
 991              	 .loc 1 317 0 is_stmt 1
 992 0074 0748     	 ldr r0,.L55
 993 0076 16F8011C 	 ldrb r1,[r6,#-1]
 994 007a FFF7FEFF 	 bl _ZN8InPacket11processByteEh
 315:src/MightyBoard/shared/UART.cc **** 	for (int i = 0; i < numBytesRead; i++){
 995              	 .loc 1 315 0
 996 007e AE42     	 cmp r6,r5
 997 0080 E2D1     	 bne .L53
 998              	.L51:
 999              	.LBE144:
 318:src/MightyBoard/shared/UART.cc **** 	}
 319:src/MightyBoard/shared/UART.cc **** 	xprintf("\n");
 1000              	 .loc 1 319 0
 1001 0082 40F20000 	 movw r0,#:lower16:.LC7
 1002 0086 C0F20000 	 movt r0,#:upper16:.LC7
 1003 008a FFF7FEFF 	 bl xprintf
 1004              	.LBE143:
 320:src/MightyBoard/shared/UART.cc **** }
 1005              	 .loc 1 320 0
 1006 008e BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 1007              	.L56:
 1008 0092 00BF     	 .align 2
 1009              	.L55:
 1010 0094 03000000 	 .word _ZZN4UART11getHostUARTEvE8hostUART+3
 1011              	 .cfi_endproc
 1012              	.LFE82:
 1014              	 .section .text._ZN4UART5resetEv,"ax",%progbits
 1015              	 .align 2
 1016              	 .global _ZN4UART5resetEv
 1017              	 .thumb
 1018              	 .thumb_func
 1020              	_ZN4UART5resetEv:
 1021              	.LFB83:
 321:src/MightyBoard/shared/UART.cc **** 
 322:src/MightyBoard/shared/UART.cc **** // Reset the UART to a listening state.  This is important for
 323:src/MightyBoard/shared/UART.cc **** // RS485-based comms.
 324:src/MightyBoard/shared/UART.cc **** void UART::reset() {
 1022              	 .loc 1 324 0
 1023              	 .cfi_startproc
 1024              	 
 1025              	 
 1026              	.LVL50:
 1027 0000 08B5     	 push {r3,lr}
 1028              	.LCFI7:
 1029              	 .cfi_def_cfa_offset 8
 1030              	 .cfi_offset 14,-4
 1031              	 .cfi_offset 3,-8
 325:src/MightyBoard/shared/UART.cc **** 	if (mode_ == RS485) {
 1032              	 .loc 1 325 0
 1033 0002 0378     	 ldrb r3,[r0,#0]
 1034 0004 012B     	 cmp r3,#1
 1035 0006 18D1     	 bne .L57
 326:src/MightyBoard/shared/UART.cc **** 		loopback_bytes = 0;
 1036              	 .loc 1 326 0
 1037 0008 40F20003 	 movw r3,#:lower16:.LANCHOR2
 1038 000c C0F20003 	 movt r3,#:upper16:.LANCHOR2
 1039 0010 4FF00002 	 mov r2,#0
 1040 0014 1A70     	 strb r2,[r3,#0]
 1041              	.LVL51:
 1042              	.LBB153:
 1043              	.LBB154:
 1044              	.LBB155:
  35:src/MightyBoard/shared/Pin.hh **** 		if (is_null)
 1045              	 .loc 5 35 0
 1046 0016 40F20003 	 movw r3,#:lower16:.LANCHOR1
 1047 001a C0F20003 	 movt r3,#:upper16:.LANCHOR1
 1048 001e 5B78     	 ldrb r3,[r3,#1]
 1049 0020 5BB9     	 cbnz r3,.L57
 1050              	 .loc 5 48 0
 1051 0022 40F20002 	 movw r2,#:lower16:.LANCHOR1
 1052 0026 C0F20002 	 movt r2,#:upper16:.LANCHOR1
 1053 002a 9378     	 ldrb r3,[r2,#2]
 1054 002c 1078     	 ldrb r0,[r2,#0]
 1055              	.LVL52:
 1056 002e 4FF00101 	 mov r1,#1
 1057 0032 01FA03F1 	 lsl r1,r1,r3
 1058 0036 FFF7FEFF 	 bl GPIO_ClearValue
 1059              	.LVL53:
 1060              	.L57:
 1061 003a 08BD     	 pop {r3,pc}
 1062              	.LBE155:
 1063              	.LBE154:
 1064              	.LBE153:
 1065              	 .cfi_endproc
 1066              	.LFE83:
 1068              	 .section .text._GLOBAL__sub_I_loopback_bytes,"ax",%progbits
 1069              	 .align 2
 1070              	 .thumb
 1071              	 .thumb_func
 1073              	_GLOBAL__sub_I_loopback_bytes:
 1074              	.LFB85:
 327:src/MightyBoard/shared/UART.cc **** 		listen();
 328:src/MightyBoard/shared/UART.cc **** 	}
 329:src/MightyBoard/shared/UART.cc **** }
 1075              	 .loc 1 329 0
 1076              	 .cfi_startproc
 1077              	 
 1078              	 
 1079 0000 30B5     	 push {r4,r5,lr}
 1080              	.LCFI8:
 1081              	 .cfi_def_cfa_offset 12
 1082              	 .cfi_offset 14,-4
 1083              	 .cfi_offset 5,-8
 1084              	 .cfi_offset 4,-12
 1085 0002 83B0     	 sub sp,sp,#12
 1086              	.LCFI9:
 1087              	 .cfi_def_cfa_offset 24
 1088              	.LVL54:
 1089              	.LBB158:
 1090              	.LBB159:
 1091              	 .file 6 "src/MightyBoard/shared/LPCPort.hh"
   1:src/MightyBoard/shared/LPCPort.hh **** /*
   2:src/MightyBoard/shared/LPCPort.hh **** * Copyright 2010 by Adam Mayer	 <adam@makerbot.com>
   3:src/MightyBoard/shared/LPCPort.hh **** *
   4:src/MightyBoard/shared/LPCPort.hh **** * This program is free software: you can redistribute it and/or modify
   5:src/MightyBoard/shared/LPCPort.hh **** * it under the terms of the GNU General Public License as published by
   6:src/MightyBoard/shared/LPCPort.hh **** * the Free Software Foundation, either version 3 of the License, or
   7:src/MightyBoard/shared/LPCPort.hh **** * (at your option) any later version.
   8:src/MightyBoard/shared/LPCPort.hh **** *
   9:src/MightyBoard/shared/LPCPort.hh **** * This program is distributed in the hope that it will be useful,
  10:src/MightyBoard/shared/LPCPort.hh **** * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:src/MightyBoard/shared/LPCPort.hh **** * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:src/MightyBoard/shared/LPCPort.hh **** * GNU General Public License for more details.
  13:src/MightyBoard/shared/LPCPort.hh **** *
  14:src/MightyBoard/shared/LPCPort.hh **** * You should have received a copy of the GNU General Public License
  15:src/MightyBoard/shared/LPCPort.hh **** * along with this program.  If not, see <http://www.gnu.org/licenses/>
  16:src/MightyBoard/shared/LPCPort.hh **** */
  17:src/MightyBoard/shared/LPCPort.hh **** 
  18:src/MightyBoard/shared/LPCPort.hh **** #ifndef SHARED_AVR_PORT_HH_
  19:src/MightyBoard/shared/LPCPort.hh **** #define SHARED_AVR_PORT_HH_
  20:src/MightyBoard/shared/LPCPort.hh **** 
  21:src/MightyBoard/shared/LPCPort.hh **** #define __STDC_LIMIT_MACROS
  22:src/MightyBoard/shared/LPCPort.hh **** //#include <stdint.h>
  23:src/MightyBoard/shared/LPCPort.hh **** //#include <util/atomic.h>
  24:src/MightyBoard/shared/LPCPort.hh **** 
  25:src/MightyBoard/shared/LPCPort.hh **** extern "C" {
  26:src/MightyBoard/shared/LPCPort.hh **** 	#include "lpc_types.h"
  27:src/MightyBoard/shared/LPCPort.hh **** 	#include "lpc17xx_gpio.h"
  28:src/MightyBoard/shared/LPCPort.hh **** }
  29:src/MightyBoard/shared/LPCPort.hh **** 
  30:src/MightyBoard/shared/LPCPort.hh **** 
  31:src/MightyBoard/shared/LPCPort.hh **** #define NULL_PORT 0xff
  32:src/MightyBoard/shared/LPCPort.hh **** 
  33:src/MightyBoard/shared/LPCPort.hh **** class LPCPort {
  34:src/MightyBoard/shared/LPCPort.hh **** private:
  35:src/MightyBoard/shared/LPCPort.hh **** 	const uint8_t port_base;
  36:src/MightyBoard/shared/LPCPort.hh **** 	friend class Pin;
  37:src/MightyBoard/shared/LPCPort.hh **** public:
  38:src/MightyBoard/shared/LPCPort.hh **** 	LPCPort();
  39:src/MightyBoard/shared/LPCPort.hh **** 	LPCPort(uint8_t port_base_in);
  40:src/MightyBoard/shared/LPCPort.hh **** 	bool isNull() const;
  41:src/MightyBoard/shared/LPCPort.hh **** 	void setPinDirectionOut(uint8_t pin_index) const;
  42:src/MightyBoard/shared/LPCPort.hh **** 	void setPinDirectionIn(uint8_t pin_index) const;
  43:src/MightyBoard/shared/LPCPort.hh **** 	bool getPin(uint8_t pin_index) const;
  44:src/MightyBoard/shared/LPCPort.hh **** 	void setPinOn(uint8_t pin_index) const;
  45:src/MightyBoard/shared/LPCPort.hh **** 	void setPinOff(uint8_t pin_index) const;
  46:src/MightyBoard/shared/LPCPort.hh **** };
  47:src/MightyBoard/shared/LPCPort.hh **** 
  48:src/MightyBoard/shared/LPCPort.hh **** 
  49:src/MightyBoard/shared/LPCPort.hh **** const LPCPort Port0(0);
 1092              	 .loc 6 49 0
 1093 0004 40F20000 	 movw r0,#:lower16:.LANCHOR6
 1094 0008 C0F20000 	 movt r0,#:upper16:.LANCHOR6
 1095 000c 4FF00001 	 mov r1,#0
 1096 0010 FFF7FEFF 	 bl _ZN7LPCPortC1Eh
  50:src/MightyBoard/shared/LPCPort.hh **** const LPCPort Port1(1);
 1097              	 .loc 6 50 0
 1098 0014 40F20000 	 movw r0,#:lower16:.LANCHOR7
 1099 0018 C0F20000 	 movt r0,#:upper16:.LANCHOR7
 1100 001c 4FF00101 	 mov r1,#1
 1101 0020 FFF7FEFF 	 bl _ZN7LPCPortC1Eh
  51:src/MightyBoard/shared/LPCPort.hh **** const LPCPort Port2(2);
 1102              	 .loc 6 51 0
 1103 0024 40F20004 	 movw r4,#:lower16:.LANCHOR8
 1104 0028 C0F20004 	 movt r4,#:upper16:.LANCHOR8
 1105 002c 2046     	 mov r0,r4
 1106 002e 4FF00201 	 mov r1,#2
 1107 0032 FFF7FEFF 	 bl _ZN7LPCPortC1Eh
  52:src/MightyBoard/shared/LPCPort.hh **** const LPCPort Port3(3);
 1108              	 .loc 6 52 0
 1109 0036 40F20000 	 movw r0,#:lower16:.LANCHOR9
 1110 003a C0F20000 	 movt r0,#:upper16:.LANCHOR9
 1111 003e 4FF00301 	 mov r1,#3
 1112 0042 FFF7FEFF 	 bl _ZN7LPCPortC1Eh
  53:src/MightyBoard/shared/LPCPort.hh **** const LPCPort Port4(4);
 1113              	 .loc 6 53 0
 1114 0046 40F20000 	 movw r0,#:lower16:.LANCHOR10
 1115 004a C0F20000 	 movt r0,#:upper16:.LANCHOR10
 1116 004e 4FF00401 	 mov r1,#4
 1117 0052 FFF7FEFF 	 bl _ZN7LPCPortC1Eh
  54:src/MightyBoard/shared/LPCPort.hh **** 
  55:src/MightyBoard/shared/LPCPort.hh **** const LPCPort NullPort(0xff);
 1118              	 .loc 6 55 0
 1119 0056 40F20005 	 movw r5,#:lower16:.LANCHOR11
 1120 005a C0F20005 	 movt r5,#:upper16:.LANCHOR11
 1121 005e 2846     	 mov r0,r5
 1122 0060 4FF0FF01 	 mov r1,#255
 1123 0064 FFF7FEFF 	 bl _ZN7LPCPortC1Eh
  49:src/MightyBoard/shared/Pin.hh **** 		}
  50:src/MightyBoard/shared/Pin.hh **** 		// SREG = oldSREG;
  51:src/MightyBoard/shared/Pin.hh **** 	};
  52:src/MightyBoard/shared/Pin.hh **** 
  53:src/MightyBoard/shared/Pin.hh **** 	void /*Pin::*/setValueOn() const {
  54:src/MightyBoard/shared/Pin.hh **** 		if (is_null)
  55:src/MightyBoard/shared/Pin.hh **** 		 	return;
  56:src/MightyBoard/shared/Pin.hh **** 		// uint8_t oldSREG = SREG;
  57:src/MightyBoard/shared/Pin.hh **** 		// cli();
  58:src/MightyBoard/shared/Pin.hh **** //		PORTx |= pin_mask;
  59:src/MightyBoard/shared/Pin.hh **** 		GPIO_SetValue(port_base, _BV(pin_index));
  60:src/MightyBoard/shared/Pin.hh **** 		// SREG = oldSREG;
  61:src/MightyBoard/shared/Pin.hh **** 	};
  62:src/MightyBoard/shared/Pin.hh **** 
  63:src/MightyBoard/shared/Pin.hh **** 	void /*Pin::*/setValueOff() const {
  64:src/MightyBoard/shared/Pin.hh **** 		// if (is_null)
  65:src/MightyBoard/shared/Pin.hh **** 		// 	return;
  66:src/MightyBoard/shared/Pin.hh **** 		// uint8_t oldSREG = SREG;
  67:src/MightyBoard/shared/Pin.hh **** 		// cli();
  68:src/MightyBoard/shared/Pin.hh **** //		PORTx &= pin_mask_inverted;
  69:src/MightyBoard/shared/Pin.hh **** 		GPIO_ClearValue(port_base, _BV(pin_index));
  70:src/MightyBoard/shared/Pin.hh **** 		// SREG = oldSREG;
  71:src/MightyBoard/shared/Pin.hh **** 	};
  72:src/MightyBoard/shared/Pin.hh **** 	// currently not used:
  73:src/MightyBoard/shared/Pin.hh **** 	//const uint8_t getPinIndex() const { return pin_index; }
  74:src/MightyBoard/shared/Pin.hh **** };
  75:src/MightyBoard/shared/Pin.hh **** 
  76:src/MightyBoard/shared/Pin.hh **** static const Pin NullPin(NullPort, 0);
 1124              	 .loc 5 76 0
 1125 0068 40F20000 	 movw r0,#:lower16:.LANCHOR12
 1126 006c C0F20000 	 movt r0,#:upper16:.LANCHOR12
 1127 0070 2946     	 mov r1,r5
 1128 0072 4FF00002 	 mov r2,#0
 1129 0076 FFF7FEFF 	 bl _ZN3PinC1ERK7LPCPorth
  48:src/MightyBoard/shared/UART.cc **** const Pin TX_Enable = TX_ENABLE_PIN;
 1130              	 .loc 1 48 0
 1131 007a 01A8     	 add r0,sp,#4
 1132 007c 4FF0FF01 	 mov r1,#255
 1133 0080 FFF7FEFF 	 bl _ZN7LPCPortC1Eh
 1134 0084 40F20000 	 movw r0,#:lower16:.LANCHOR1
 1135 0088 C0F20000 	 movt r0,#:upper16:.LANCHOR1
 1136 008c 01A9     	 add r1,sp,#4
 1137 008e 4FF0FF02 	 mov r2,#255
 1138 0092 FFF7FEFF 	 bl _ZN3PinC1ERK7LPCPorth
  49:src/MightyBoard/shared/UART.cc **** const Pin RX_Enable = RX_ENABLE_PIN;
 1139              	 .loc 1 49 0
 1140 0096 40F20000 	 movw r0,#:lower16:.LANCHOR3
 1141 009a C0F20000 	 movt r0,#:upper16:.LANCHOR3
 1142 009e 2146     	 mov r1,r4
 1143 00a0 4FF00802 	 mov r2,#8
 1144 00a4 FFF7FEFF 	 bl _ZN3PinC1ERK7LPCPorth
 1145              	.LBE159:
 1146              	.LBE158:
 1147              	 .loc 1 329 0
 1148 00a8 03B0     	 add sp,sp,#12
 1149 00aa 30BD     	 pop {r4,r5,pc}
 1150              	 .cfi_endproc
 1151              	.LFE85:
 1153              	 .section .init_array,"aw",%init_array
 1154              	 .align 2
 1155 0000 00000000 	 .word _GLOBAL__sub_I_loopback_bytes(target1)
 1156              	 .global BulkBufOut
 1157              	 .global loopback_bytes
 1158              	 .weak _ZGVZN4UART11getHostUARTEvE8hostUART
 1159              	 .section .bss._ZGVZN4UART11getHostUARTEvE8hostUART,"awG",%nobits,_ZGVZN4UART11getHostUARTEvE8hostUART,comdat
 1160              	 .align 2
 1163              	_ZGVZN4UART11getHostUARTEvE8hostUART:
 1164 0000 00000000 	 .space 4
 1165              	 .weak _ZZN4UART11getHostUARTEvE8hostUART
 1166              	 .section .bss._ZZN4UART11getHostUARTEvE8hostUART,"awG",%nobits,_ZZN4UART11getHostUARTEvE8hostUART,comdat
 1167              	 .align 2
 1170              	_ZZN4UART11getHostUARTEvE8hostUART:
 1171 0000 00000000 	 .space 77
 1171      00000000 
 1171      00000000 
 1171      00000000 
 1171      00000000 
 1172              	 .weak _ZGVZN4UART12getSlaveUARTEvE9slaveUART
 1173 004d 000000   	 .section .bss._ZGVZN4UART12getSlaveUARTEvE9slaveUART,"awG",%nobits,_ZGVZN4UART12getSlaveUARTEvE9slaveUART,comdat
 1174              	 .align 2
 1177              	_ZGVZN4UART12getSlaveUARTEvE9slaveUART:
 1178 0000 00000000 	 .space 4
 1179              	 .weak _ZZN4UART12getSlaveUARTEvE9slaveUART
 1180              	 .section .bss._ZZN4UART12getSlaveUARTEvE9slaveUART,"awG",%nobits,_ZZN4UART12getSlaveUARTEvE9slaveUART,comdat
 1181              	 .align 2
 1184              	_ZZN4UART12getSlaveUARTEvE9slaveUART:
 1185 0000 00000000 	 .space 77
 1185      00000000 
 1185      00000000 
 1185      00000000 
 1185      00000000 
 1186              	 .global _ZN4UARTC1Eh18communication_mode
 1187              	 .thumb_set _ZN4UARTC1Eh18communication_mode,_ZN4UARTC2Eh18communication_mode
 1188 004d 000000   	 .section .bss._ZL7NullPin,"aw",%nobits
 1189              	 .align 2
 1190              	 .set .LANCHOR12,.+0
 1193              	_ZL7NullPin:
 1194 0000 00000000 	 .space 5
 1194      00
 1195 0005 000000   	 .section .bss._ZL5Port0,"aw",%nobits
 1196              	 .align 2
 1197              	 .set .LANCHOR6,.+0
 1200              	_ZL5Port0:
 1201 0000 00       	 .space 1
 1202 0001 000000   	 .section .bss._ZL5Port1,"aw",%nobits
 1203              	 .align 2
 1204              	 .set .LANCHOR7,.+0
 1207              	_ZL5Port1:
 1208 0000 00       	 .space 1
 1209 0001 000000   	 .section .bss._ZL5Port2,"aw",%nobits
 1210              	 .align 2
 1211              	 .set .LANCHOR8,.+0
 1214              	_ZL5Port2:
 1215 0000 00       	 .space 1
 1216 0001 000000   	 .section .bss._ZL5Port3,"aw",%nobits
 1217              	 .align 2
 1218              	 .set .LANCHOR9,.+0
 1221              	_ZL5Port3:
 1222 0000 00       	 .space 1
 1223 0001 000000   	 .section .bss._ZZN4UART9beginSendEvE10sendBuffer,"aw",%nobits
 1224              	 .align 2
 1225              	 .set .LANCHOR0,.+0
 1228              	_ZZN4UART9beginSendEvE10sendBuffer:
 1229 0000 00000000 	 .space 64
 1229      00000000 
 1229      00000000 
 1229      00000000 
 1229      00000000 
 1230              	 .section .bss._ZL5Port4,"aw",%nobits
 1231              	 .align 2
 1232              	 .set .LANCHOR10,.+0
 1235              	_ZL5Port4:
 1236 0000 00       	 .space 1
 1237 0001 000000   	 .section .bss._ZL8NullPort,"aw",%nobits
 1238              	 .align 2
 1239              	 .set .LANCHOR11,.+0
 1242              	_ZL8NullPort:
 1243 0000 00       	 .space 1
 1244 0001 000000   	 .section .rodata.str1.4,"aMS",%progbits,1
 1245              	 .align 2
 1246              	.LC0:
 1247 0000 5553425F 	 .ascii "USB_Init (%s:%d)\012\000"
 1247      496E6974 
 1247      20282573 
 1247      3A256429 
 1247      0A00
 1248 0012 0000     	 .space 2
 1249              	.LC1:
 1250 0014 7372632F 	 .ascii "src/MightyBoard/shared/UART.cc\000"
 1250      4D696768 
 1250      7479426F 
 1250      6172642F 
 1250      73686172 
 1251 0033 00       	 .space 1
 1252              	.LC2:
 1253 0034 62342055 	 .ascii "b4 USB config (%s:%d)\012\000"
 1253      53422063 
 1253      6F6E6669 
 1253      67202825 
 1253      733A2564 
 1254 004b 00       	 .space 1
 1255              	.LC3:
 1256 004c 72733438 	 .ascii "rs485 (%s:%d)\012\000"
 1256      35202825 
 1256      733A2564 
 1256      290A00
 1257 005b 00       	 .space 1
 1258              	.LC4:
 1259 005c 656E6420 	 .ascii "end UART::init_serial (%s:%d)\012\000"
 1259      55415254 
 1259      3A3A696E 
 1259      69745F73 
 1259      65726961 
 1260 007b 00       	 .space 1
 1261              	.LC5:
 1262 007c 6F757420 	 .ascii "out %d\000"
 1262      256400
 1263 0083 00       	 .space 1
 1264              	.LC6:
 1265 0084 20256400 	 .ascii " %d\000"
 1266              	.LC7:
 1267 0088 0A00     	 .ascii "\012\000"
 1268 008a 0000     	 .space 2
 1269              	.LC8:
 1270 008c 5553425F 	 .ascii "USB_Connect(TRUE) (%s:%d)\012\000"
 1270      436F6E6E 
 1270      65637428 
 1270      54525545 
 1270      29202825 
 1271 00a7 00       	 .space 1
 1272              	.LC9:
 1273 00a8 61667465 	 .ascii "after USB_Connect(TRUE) (%s:%d)\012\000"
 1273      72205553 
 1273      425F436F 
 1273      6E6E6563 
 1273      74285452 
 1274 00c9 000000   	 .space 3
 1275              	.LC10:
 1276 00cc 55617274 	 .ascii "Uart0 Disabled (%s:%d)\012\000"
 1276      30204469 
 1276      7361626C 
 1276      65642028 
 1276      25733A25 
 1277              	.LC11:
 1278 00e4 55617274 	 .ascii "Uart1 Enabled (%s:%d)\012\000"
 1278      3120456E 
 1278      61626C65 
 1278      64202825 
 1278      733A2564 
 1279 00fb 00       	 .space 1
 1280              	.LC12:
 1281 00fc 55617274 	 .ascii "Uart1 Disabled (%s:%d)\012\000"
 1281      31204469 
 1281      7361626C 
 1281      65642028 
 1281      25733A25 
 1282              	.LC13:
 1283 0114 656E6420 	 .ascii "end UART::enable (%s:%d)\012\000"
 1283      55415254 
 1283      3A3A656E 
 1283      61626C65 
 1283      20282573 
 1284 012e 0000     	 .space 2
 1285              	.LC14:
 1286 0130 55415254 	 .ascii "UART1_IRQ (%s:%d)\012\000"
 1286      315F4952 
 1286      51202825 
 1286      733A2564 
 1286      290A00
 1287 0143 00       	 .space 1
 1288              	.LC15:
 1289 0144 0A696E00 	 .ascii "\012in\000"
 1290              	 .section .bss.BulkBufOut,"aw",%nobits
 1291              	 .align 2
 1292              	 .set .LANCHOR5,.+0
 1295              	BulkBufOut:
 1296 0000 00000000 	 .space 64
 1296      00000000 
 1296      00000000 
 1296      00000000 
 1296      00000000 
 1297              	 .section .bss._ZL9TX_Enable,"aw",%nobits
 1298              	 .align 2
 1299              	 .set .LANCHOR1,.+0
 1302              	_ZL9TX_Enable:
 1303 0000 00000000 	 .space 5
 1303      00
 1304 0005 000000   	 .section .bss._ZL9RX_Enable,"aw",%nobits
 1305              	 .align 2
 1306              	 .set .LANCHOR3,.+0
 1309              	_ZL9RX_Enable:
 1310 0000 00000000 	 .space 5
 1310      00
 1311 0005 000000   	 .section .bss.loopback_bytes,"aw",%nobits
 1312              	 .set .LANCHOR2,.+0
 1315              	loopback_bytes:
 1316 0000 00       	 .space 1
 1317              	 .section .bss._ZZ16UART1_IRQHandlerE7byte_in,"aw",%nobits
 1318              	 .set .LANCHOR4,.+0
 1321              	_ZZ16UART1_IRQHandlerE7byte_in:
 1322 0000 00       	 .space 1
 1323              	 .text
 1324              	.Letext0:
 1325              	 .file 7 "c:\\program files\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/arm-none-eabi/4.6.3/../../../../arm-none-eabi/include/stdint.h"
 1326              	 .file 8 "src/MightyBoard/Motherboard/system/LPC17xx.h"
 1327              	 .file 9 "src/MightyBoard/Motherboard/lib/include/lpc_types.h"
 1328              	 .file 10 "src/MightyBoard/Motherboard/lib/include/lpc17xx_uart.h"
 1329              	 .file 11 "src/MightyBoard/Motherboard/lib/include/lpc17xx_pinsel.h"
 1330              	 .file 12 "src/MightyBoard/Motherboard/USBCDC/usbcore.h"
DEFINED SYMBOLS
                            *ABS*:00000000 UART.cc
    {standard input}:19     .text._ZN4UART11init_serialEv:00000000 $t
    {standard input}:24     .text._ZN4UART11init_serialEv:00000000 _ZN4UART11init_serialEv
    {standard input}:1246   .rodata.str1.4:00000000 .LC0
    {standard input}:1252   .rodata.str1.4:00000034 .LC2
    {standard input}:1255   .rodata.str1.4:0000004c .LC3
    {standard input}:1258   .rodata.str1.4:0000005c .LC4
    {standard input}:146    .text._ZN4UART11init_serialEv:000000c4 $d
    {standard input}:151    .text._ZN4UARTC2Eh18communication_mode:00000000 $t
    {standard input}:156    .text._ZN4UARTC2Eh18communication_mode:00000000 _ZN4UARTC2Eh18communication_mode
    {standard input}:192    .text._ZN4UART9beginSendEv:00000000 $t
    {standard input}:197    .text._ZN4UART9beginSendEv:00000000 _ZN4UART9beginSendEv
    {standard input}:1163   .bss._ZGVZN4UART11getHostUARTEvE8hostUART:00000000 _ZGVZN4UART11getHostUARTEvE8hostUART
    {standard input}:1170   .bss._ZZN4UART11getHostUARTEvE8hostUART:00000000 _ZZN4UART11getHostUARTEvE8hostUART
    {standard input}:156    .text._ZN4UARTC2Eh18communication_mode:00000000 _ZN4UARTC1Eh18communication_mode
    {standard input}:1225   .bss._ZZN4UART9beginSendEvE10sendBuffer:00000000 .LANCHOR0
    {standard input}:1261   .rodata.str1.4:0000007c .LC5
    {standard input}:1264   .rodata.str1.4:00000084 .LC6
    {standard input}:1266   .rodata.str1.4:00000088 .LC7
    {standard input}:1299   .bss._ZL9TX_Enable:00000000 .LANCHOR1
    {standard input}:1312   .bss.loopback_bytes:00000000 .LANCHOR2
    {standard input}:1177   .bss._ZGVZN4UART12getSlaveUARTEvE9slaveUART:00000000 _ZGVZN4UART12getSlaveUARTEvE9slaveUART
    {standard input}:1184   .bss._ZZN4UART12getSlaveUARTEvE9slaveUART:00000000 _ZZN4UART12getSlaveUARTEvE9slaveUART
    {standard input}:470    .text._ZN4UART9beginSendEv:000001f0 $d
    {standard input}:480    .text._ZN4UART6enableEb:00000000 $t
    {standard input}:485    .text._ZN4UART6enableEb:00000000 _ZN4UART6enableEb
    {standard input}:1269   .rodata.str1.4:0000008c .LC8
    {standard input}:1272   .rodata.str1.4:000000a8 .LC9
    {standard input}:1275   .rodata.str1.4:000000cc .LC10
    {standard input}:1277   .rodata.str1.4:000000e4 .LC11
    {standard input}:1280   .rodata.str1.4:000000fc .LC12
    {standard input}:1306   .bss._ZL9RX_Enable:00000000 .LANCHOR3
    {standard input}:1282   .rodata.str1.4:00000114 .LC13
    {standard input}:669    .text._ZN4UART6enableEb:00000150 $d
    {standard input}:674    .text.UART1_IRQHandler:00000000 $t
    {standard input}:679    .text.UART1_IRQHandler:00000000 UART1_IRQHandler
    {standard input}:1285   .rodata.str1.4:00000130 .LC14
    {standard input}:1318   .bss._ZZ16UART1_IRQHandlerE7byte_in:00000000 .LANCHOR4
    {standard input}:900    .text.UART1_IRQHandler:000001c8 $d
    {standard input}:911    .text.CANActivity_IRQHandler:00000000 $t
    {standard input}:916    .text.CANActivity_IRQHandler:00000000 CANActivity_IRQHandler
    {standard input}:1292   .bss.BulkBufOut:00000000 .LANCHOR5
    {standard input}:1288   .rodata.str1.4:00000144 .LC15
    {standard input}:1010   .text.CANActivity_IRQHandler:00000094 $d
    {standard input}:1015   .text._ZN4UART5resetEv:00000000 $t
    {standard input}:1020   .text._ZN4UART5resetEv:00000000 _ZN4UART5resetEv
    {standard input}:1069   .text._GLOBAL__sub_I_loopback_bytes:00000000 $t
    {standard input}:1073   .text._GLOBAL__sub_I_loopback_bytes:00000000 _GLOBAL__sub_I_loopback_bytes
    {standard input}:1197   .bss._ZL5Port0:00000000 .LANCHOR6
    {standard input}:1204   .bss._ZL5Port1:00000000 .LANCHOR7
    {standard input}:1211   .bss._ZL5Port2:00000000 .LANCHOR8
    {standard input}:1218   .bss._ZL5Port3:00000000 .LANCHOR9
    {standard input}:1232   .bss._ZL5Port4:00000000 .LANCHOR10
    {standard input}:1239   .bss._ZL8NullPort:00000000 .LANCHOR11
    {standard input}:1190   .bss._ZL7NullPin:00000000 .LANCHOR12
    {standard input}:1154   .init_array:00000000 $d
    {standard input}:1295   .bss.BulkBufOut:00000000 BulkBufOut
    {standard input}:1315   .bss.loopback_bytes:00000000 loopback_bytes
    {standard input}:1160   .bss._ZGVZN4UART11getHostUARTEvE8hostUART:00000000 $d
    {standard input}:1167   .bss._ZZN4UART11getHostUARTEvE8hostUART:00000000 $d
    {standard input}:1174   .bss._ZGVZN4UART12getSlaveUARTEvE9slaveUART:00000000 $d
    {standard input}:1181   .bss._ZZN4UART12getSlaveUARTEvE9slaveUART:00000000 $d
    {standard input}:1189   .bss._ZL7NullPin:00000000 $d
    {standard input}:1193   .bss._ZL7NullPin:00000000 _ZL7NullPin
    {standard input}:1196   .bss._ZL5Port0:00000000 $d
    {standard input}:1200   .bss._ZL5Port0:00000000 _ZL5Port0
    {standard input}:1203   .bss._ZL5Port1:00000000 $d
    {standard input}:1207   .bss._ZL5Port1:00000000 _ZL5Port1
    {standard input}:1210   .bss._ZL5Port2:00000000 $d
    {standard input}:1214   .bss._ZL5Port2:00000000 _ZL5Port2
    {standard input}:1217   .bss._ZL5Port3:00000000 $d
    {standard input}:1221   .bss._ZL5Port3:00000000 _ZL5Port3
    {standard input}:1224   .bss._ZZN4UART9beginSendEvE10sendBuffer:00000000 $d
    {standard input}:1228   .bss._ZZN4UART9beginSendEvE10sendBuffer:00000000 _ZZN4UART9beginSendEvE10sendBuffer
    {standard input}:1231   .bss._ZL5Port4:00000000 $d
    {standard input}:1235   .bss._ZL5Port4:00000000 _ZL5Port4
    {standard input}:1238   .bss._ZL8NullPort:00000000 $d
    {standard input}:1242   .bss._ZL8NullPort:00000000 _ZL8NullPort
    {standard input}:1245   .rodata.str1.4:00000000 $d
    {standard input}:1249   .rodata.str1.4:00000014 .LC1
    {standard input}:1291   .bss.BulkBufOut:00000000 $d
    {standard input}:1298   .bss._ZL9TX_Enable:00000000 $d
    {standard input}:1302   .bss._ZL9TX_Enable:00000000 _ZL9TX_Enable
    {standard input}:1305   .bss._ZL9RX_Enable:00000000 $d
    {standard input}:1309   .bss._ZL9RX_Enable:00000000 _ZL9RX_Enable
    {standard input}:1316   .bss.loopback_bytes:00000000 $d
    {standard input}:1321   .bss._ZZ16UART1_IRQHandlerE7byte_in:00000000 _ZZ16UART1_IRQHandlerE7byte_in
    {standard input}:1322   .bss._ZZ16UART1_IRQHandlerE7byte_in:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
xprintf
USB_Init
UART_Init
PINSEL_ConfigPin
_ZN8InPacketC1Ev
_ZN9OutPacketC1Ev
__cxa_guard_acquire
__cxa_guard_release
_ZN9OutPacket17getNextByteToSendEv
USB_WriteEP
GPIO_SetValue
_delay_us
USB_Connect
USB_Configuration
WDT_Feed
UART_TxCmd
_ZNK3Pin12setDirectionEb
GPIO_ClearValue
UART_GetIntId
UART_GetLineStatus
UART_ReceiveByte
_ZN8InPacket11processByteEh
UART_SendByte
USB_ReadEP
_ZN7LPCPortC1Eh
_ZN3PinC1ERK7LPCPorth
