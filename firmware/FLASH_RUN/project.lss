
FLASH_RUN/project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0002a46c  00003000  00003000  00003000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    000001e8  0002d46c  0002d46c  0002d46c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text.align   00000004  0002d654  0002d654  0002d654  2**0
                  ALLOC, CODE
  3 .data         000005b0  10000000  0002d658  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00002820  100005b0  0002dc08  000305b0  2**3
                  ALLOC
  5 .heap         00001000  10002dd0  10002dd0  000305b0  2**3
                  CONTENTS
  6 .stack        00000300  10005d00  10005d00  000315b0  2**3
                  CONTENTS
  7 .debug_aranges 00002620  00000000  00000000  000318b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0004fed2  00000000  00000000  00033ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000cce5  00000000  00000000  00083da2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0001049c  00000000  00000000  00090a87  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00009370  00000000  00000000  000a0f24  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0001049c  00000000  00000000  000aa294  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0001848d  00000000  00000000  000ba730  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .ARM.attributes 00000027  00000000  00000000  000d2bbd  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 00002bf0  00000000  00000000  000d2be8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      00000030  00000000  00000000  000d57d8  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00003000 <__cs3_interrupt_vector>:
    3000:	00 60 00 10 cd 30 00 00 29 31 00 00 2b 31 00 00     .`...0..)1..+1..
    3010:	2d 31 00 00 2f 31 00 00 31 31 00 00 00 00 00 00     -1../1..11......
	...
    302c:	9d 31 00 00 9f 31 00 00 00 00 00 00 a1 31 00 00     .1...1.......1..
    303c:	a3 31 00 00 11 b4 00 00 51 bb 00 00 a5 31 00 00     .1......Q....1..
    304c:	e9 c0 00 00 49 c3 00 00 49 66 00 00 21 2d 01 00     ....I...If..!-..
    305c:	a5 31 00 00 a5 31 00 00 a5 31 00 00 a5 31 00 00     .1...1...1...1..
    306c:	a5 31 00 00 a5 31 00 00 a5 31 00 00 a5 31 00 00     .1...1...1...1..
    307c:	a5 31 00 00 a5 31 00 00 a5 31 00 00 a5 31 00 00     .1...1...1...1..
    308c:	a5 31 00 00 a5 31 00 00 a5 31 00 00 81 0e 01 00     .1...1...1......
    309c:	a5 31 00 00 25 60 00 00 a5 31 00 00 a5 31 00 00     .1..%`...1...1..
    30ac:	a5 31 00 00 a5 31 00 00 a5 31 00 00 a5 31 00 00     .1...1...1...1..
    30bc:	a5 31 00 00 a5 31 00 00 a5 31 00 00 f5 2e 01 00     .1...1...1......

000030cc <__cs3_reset>:
    .type   __cs3_reset_cortex_m, %function
__cs3_reset_cortex_m:
    .fnstart

/* delay at startup to let JTAG-connection catch-up */
 	LDR R0, =startup_delay
    30cc:	480d      	ldr	r0, [pc, #52]	; (3104 <__cs3_reset+0x38>)
	BLX R0
    30ce:	4780      	blx	r0

/* Copy the data segment initializers from flash to SRAM */
.extern _etext
.extern _sdata
.extern _edata
    ldr   r1, =_etext
    30d0:	490d      	ldr	r1, [pc, #52]	; (3108 <__cs3_reset+0x3c>)
    ldr   r2, =_sdata
    30d2:	4a0e      	ldr	r2, [pc, #56]	; (310c <__cs3_reset+0x40>)
    ldr   r3, =_edata
    30d4:	4b0e      	ldr	r3, [pc, #56]	; (3110 <__cs3_reset+0x44>)
1:  cmp   r2, r3
    30d6:	429a      	cmp	r2, r3
    ittt  lo
    30d8:	bf3e      	ittt	cc
    ldrlo r0, [r1], #4
    30da:	f851 0b04 	ldrcc.w	r0, [r1], #4
    strlo r0, [r2], #4
    30de:	f842 0b04 	strcc.w	r0, [r2], #4
    blo   1b
    30e2:	e7f8      	bcc.n	30d6 <__cs3_reset+0xa>

/* Zero fill the bss segment. */
.extern _sbss
.extern _ebss
    movs  r0, #0
    30e4:	2000      	movs	r0, #0
    ldr   r1, =_sbss
    30e6:	490b      	ldr	r1, [pc, #44]	; (3114 <__cs3_reset+0x48>)
    ldr   r2, =_ebss
    30e8:	4a0b      	ldr	r2, [pc, #44]	; (3118 <__cs3_reset+0x4c>)
2:  cmp   r1, r2
    30ea:	4291      	cmp	r1, r2
    itt   lo
    30ec:	bf3c      	itt	cc
    strlo r0, [r1], #4
    30ee:	f841 0b04 	strcc.w	r0, [r1], #4
    blo   2b
    30f2:	e7fa      	bcc.n	30ea <__cs3_reset+0x1e>

/* call __libc_init_array - needed for C++ support */
    LDR     R0, =__libc_init_array
    30f4:	4809      	ldr	r0, [pc, #36]	; (311c <__cs3_reset+0x50>)
    BLX     R0
    30f6:	4780      	blx	r0

/* call system init in NXP's Device CMSIS code */
    LDR     R0, =SystemInit
    30f8:	4809      	ldr	r0, [pc, #36]	; (3120 <__cs3_reset+0x54>)
    BLX     R0
    30fa:	4780      	blx	r0

/* call main() */
    LDR     R0,=main
    30fc:	4809      	ldr	r0, [pc, #36]	; (3124 <__cs3_reset+0x58>)
    BX      R0
    30fe:	4700      	bx	r0

    B .
    3100:	e7fe      	b.n	3100 <__cs3_reset+0x34>
    3102:	0000      	.short	0x0000
    .type   __cs3_reset_cortex_m, %function
__cs3_reset_cortex_m:
    .fnstart

/* delay at startup to let JTAG-connection catch-up */
 	LDR R0, =startup_delay
    3104:	00006175 	.word	0x00006175

/* Copy the data segment initializers from flash to SRAM */
.extern _etext
.extern _sdata
.extern _edata
    ldr   r1, =_etext
    3108:	0002d658 	.word	0x0002d658
    ldr   r2, =_sdata
    310c:	10000000 	.word	0x10000000
    ldr   r3, =_edata
    3110:	100005b0 	.word	0x100005b0

/* Zero fill the bss segment. */
.extern _sbss
.extern _ebss
    movs  r0, #0
    ldr   r1, =_sbss
    3114:	100005b0 	.word	0x100005b0
    ldr   r2, =_ebss
    3118:	10002dd0 	.word	0x10002dd0
    itt   lo
    strlo r0, [r1], #4
    blo   2b

/* call __libc_init_array - needed for C++ support */
    LDR     R0, =__libc_init_array
    311c:	0001ff5d 	.word	0x0001ff5d
    BLX     R0

/* call system init in NXP's Device CMSIS code */
    LDR     R0, =SystemInit
    3120:	00006279 	.word	0x00006279
    BLX     R0

/* call main() */
    LDR     R0,=main
    3124:	0000b541 	.word	0x0000b541

00003128 <NMI_Handler>:
/* Exception Handlers */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
    3128:	e7fe      	b.n	3128 <NMI_Handler>

0000312a <HardFault_Handler>:
    .size   NMI_Handler, . - NMI_Handler

    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
    312a:	e7fe      	b.n	312a <HardFault_Handler>

0000312c <MemManage_Handler>:
    .size   HardFault_Handler, . - HardFault_Handler

    .weak   MemManage_Handler
    .type   MemManage_Handler, %function
MemManage_Handler:
    B       .
    312c:	e7fe      	b.n	312c <MemManage_Handler>

0000312e <BusFault_Handler>:
    .size   MemManage_Handler, . - MemManage_Handler

    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
    312e:	e7fe      	b.n	312e <BusFault_Handler>

00003130 <UsageFault_Handler>:
    .size   BusFault_Handler, . - BusFault_Handler

    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
    3130:	e7fe      	b.n	3130 <UsageFault_Handler>
    3132:	bf00      	nop

00003134 <__do_global_dtors_aux>:
    3134:	b510      	push	{r4, lr}
    3136:	f240 54b0 	movw	r4, #1456	; 0x5b0
    313a:	f2c1 0400 	movt	r4, #4096	; 0x1000
    313e:	7823      	ldrb	r3, [r4, #0]
    3140:	b963      	cbnz	r3, 315c <__do_global_dtors_aux+0x28>
    3142:	f240 0000 	movw	r0, #0
    3146:	f2c0 0000 	movt	r0, #0
    314a:	b128      	cbz	r0, 3158 <__do_global_dtors_aux+0x24>
    314c:	f24d 30b8 	movw	r0, #54200	; 0xd3b8
    3150:	f2c0 0002 	movt	r0, #2
    3154:	f3af 8000 	nop.w
    3158:	2101      	movs	r1, #1
    315a:	7021      	strb	r1, [r4, #0]
    315c:	bd10      	pop	{r4, pc}
    315e:	bf00      	nop

00003160 <frame_dummy>:
    3160:	b508      	push	{r3, lr}
    3162:	f240 0300 	movw	r3, #0
    3166:	f2c0 0300 	movt	r3, #0
    316a:	b14b      	cbz	r3, 3180 <frame_dummy+0x20>
    316c:	f24d 30b8 	movw	r0, #54200	; 0xd3b8
    3170:	f240 51b4 	movw	r1, #1460	; 0x5b4
    3174:	f2c0 0002 	movt	r0, #2
    3178:	f2c1 0100 	movt	r1, #4096	; 0x1000
    317c:	f3af 8000 	nop.w
    3180:	f240 0000 	movw	r0, #0
    3184:	f2c1 0000 	movt	r0, #4096	; 0x1000
    3188:	6801      	ldr	r1, [r0, #0]
    318a:	b129      	cbz	r1, 3198 <frame_dummy+0x38>
    318c:	f240 0300 	movw	r3, #0
    3190:	f2c0 0300 	movt	r3, #0
    3194:	b103      	cbz	r3, 3198 <frame_dummy+0x38>
    3196:	4798      	blx	r3
    3198:	bd08      	pop	{r3, pc}
    319a:	bf00      	nop

0000319c <SVC_Handler>:
    .section ".text"

    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
    319c:	e7fe      	b.n	319c <SVC_Handler>

0000319e <DebugMon_Handler>:
    .size   SVC_Handler, . - SVC_Handler

    .weak   DebugMon_Handler
    .type   DebugMon_Handler, %function
DebugMon_Handler:
    B       .
    319e:	e7fe      	b.n	319e <DebugMon_Handler>

000031a0 <PendSV_Handler>:
    .size   DebugMon_Handler, . - DebugMon_Handler

    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
    31a0:	e7fe      	b.n	31a0 <PendSV_Handler>

000031a2 <SysTick_Handler>:
    .size   PendSV_Handler, . - PendSV_Handler

    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
    31a2:	e7fe      	b.n	31a2 <SysTick_Handler>

000031a4 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
    31a4:	e7fe      	b.n	31a4 <Default_Handler>
	...

000031a8 <ADC_Init>:
 * @param[in]	ADCx pointer to LPC_ADC_TypeDef, should be: LPC_ADC
 * @param[in]	rate ADC conversion rate, should be <=200KHz
 * @return 		None
 **********************************************************************/
void ADC_Init(LPC_ADC_TypeDef *ADCx, uint32_t rate)
{
    31a8:	b538      	push	{r3, r4, r5, lr}
    31aa:	4604      	mov	r4, r0
    31ac:	460d      	mov	r5, r1
	uint32_t temp, tmp;

	CHECK_PARAM(PARAM_ADCx(ADCx));
    31ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    31b2:	f2c4 0303 	movt	r3, #16387	; 0x4003
    31b6:	4298      	cmp	r0, r3
    31b8:	d007      	beq.n	31ca <ADC_Init+0x22>
    31ba:	f646 7014 	movw	r0, #28436	; 0x6f14
    31be:	f2c0 0002 	movt	r0, #2
    31c2:	f04f 0142 	mov.w	r1, #66	; 0x42
    31c6:	f000 f9ab 	bl	3520 <check_failed>
	CHECK_PARAM(PARAM_ADC_RATE(rate));
    31ca:	f105 32ff 	add.w	r2, r5, #4294967295
    31ce:	f640 533f 	movw	r3, #3391	; 0xd3f
    31d2:	f2c0 0303 	movt	r3, #3
    31d6:	429a      	cmp	r2, r3
    31d8:	d907      	bls.n	31ea <ADC_Init+0x42>
    31da:	f646 7014 	movw	r0, #28436	; 0x6f14
    31de:	f2c0 0002 	movt	r0, #2
    31e2:	f04f 0143 	mov.w	r1, #67	; 0x43
    31e6:	f000 f99b 	bl	3520 <check_failed>

	// Turn on power and clock
	CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCAD, ENABLE);
    31ea:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    31ee:	f04f 0101 	mov.w	r1, #1
    31f2:	f000 f921 	bl	3438 <CLKPWR_ConfigPPWR>

	ADCx->ADCR = 0;
    31f6:	f04f 0300 	mov.w	r3, #0
    31fa:	6023      	str	r3, [r4, #0]

	//Enable PDN bit
	tmp = ADC_CR_PDN;
	// Set clock frequency
	temp = CLKPWR_GetPCLK(CLKPWR_PCLKSEL_ADC);
    31fc:	f04f 0018 	mov.w	r0, #24
    3200:	f000 f904 	bl	340c <CLKPWR_GetPCLK>
	 * A/D converter, which should be less than or equal to 13MHz.
	 * A fully conversion requires 65 of these clocks.
	 * ADC clock = PCLK_ADC0 / (CLKDIV + 1);
	 * ADC rate = ADC clock / 65;
	 */
	temp = (temp /(rate * 65)) - 1;
    3204:	ea4f 1385 	mov.w	r3, r5, lsl #6
    3208:	195d      	adds	r5, r3, r5
    320a:	fbb0 f5f5 	udiv	r5, r0, r5
    320e:	f105 35ff 	add.w	r5, r5, #4294967295
	tmp |=  ADC_CR_CLKDIV(temp);
    3212:	ea4f 2505 	mov.w	r5, r5, lsl #8
    3216:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000

	ADCx->ADCR = tmp;
    321a:	6025      	str	r5, [r4, #0]
}
    321c:	bd38      	pop	{r3, r4, r5, pc}
    321e:	bf00      	nop

00003220 <ADC_StartCmd>:
*				- ADC_START_ON_MAT10
*				- ADC_START_ON_MAT11
* @return 		None
*********************************************************************/
void ADC_StartCmd(LPC_ADC_TypeDef *ADCx, uint8_t start_mode)
{
    3220:	b538      	push	{r3, r4, r5, lr}
    3222:	4604      	mov	r4, r0
    3224:	460d      	mov	r5, r1
	CHECK_PARAM(PARAM_ADCx(ADCx));
    3226:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    322a:	f2c4 0303 	movt	r3, #16387	; 0x4003
    322e:	4298      	cmp	r0, r3
    3230:	d007      	beq.n	3242 <ADC_StartCmd+0x22>
    3232:	f646 7014 	movw	r0, #28436	; 0x6f14
    3236:	f2c0 0002 	movt	r0, #2
    323a:	f04f 018b 	mov.w	r1, #139	; 0x8b
    323e:	f000 f96f 	bl	3520 <check_failed>
	CHECK_PARAM(PARAM_ADC_START_OPT(start_mode));
    3242:	2d07      	cmp	r5, #7
    3244:	d907      	bls.n	3256 <ADC_StartCmd+0x36>
    3246:	f646 7014 	movw	r0, #28436	; 0x6f14
    324a:	f2c0 0002 	movt	r0, #2
    324e:	f04f 018c 	mov.w	r1, #140	; 0x8c
    3252:	f000 f965 	bl	3520 <check_failed>

	ADCx->ADCR &= ~ADC_CR_START_MASK;
    3256:	6823      	ldr	r3, [r4, #0]
    3258:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    325c:	6023      	str	r3, [r4, #0]
	ADCx->ADCR |=ADC_CR_START_MODE_SEL((uint32_t)start_mode);
    325e:	6823      	ldr	r3, [r4, #0]
    3260:	ea43 6505 	orr.w	r5, r3, r5, lsl #24
    3264:	6025      	str	r5, [r4, #0]
}
    3266:	bd38      	pop	{r3, r4, r5, pc}

00003268 <ADC_IntConfig>:
* 					- SET : enable ADC interrupt
* 					- RESET: disable ADC interrupt
* @return 		None
**********************************************************************/
void ADC_IntConfig (LPC_ADC_TypeDef *ADCx, ADC_TYPE_INT_OPT IntType, FunctionalState NewState)
{
    3268:	b570      	push	{r4, r5, r6, lr}
    326a:	4604      	mov	r4, r0
    326c:	460d      	mov	r5, r1
    326e:	4616      	mov	r6, r2
	CHECK_PARAM(PARAM_ADCx(ADCx));
    3270:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    3274:	f2c4 0303 	movt	r3, #16387	; 0x4003
    3278:	4298      	cmp	r0, r3
    327a:	d007      	beq.n	328c <ADC_IntConfig+0x24>
    327c:	f646 7014 	movw	r0, #28436	; 0x6f14
    3280:	f2c0 0002 	movt	r0, #2
    3284:	f04f 01da 	mov.w	r1, #218	; 0xda
    3288:	f000 f94a 	bl	3520 <check_failed>
	CHECK_PARAM(PARAM_ADC_TYPE_INT_OPT(IntType));
    328c:	2d08      	cmp	r5, #8
    328e:	d907      	bls.n	32a0 <ADC_IntConfig+0x38>
    3290:	f646 7014 	movw	r0, #28436	; 0x6f14
    3294:	f2c0 0002 	movt	r0, #2
    3298:	f04f 01db 	mov.w	r1, #219	; 0xdb
    329c:	f000 f940 	bl	3520 <check_failed>

	ADCx->ADINTEN &= ~ADC_INTEN_CH(IntType);
    32a0:	68e3      	ldr	r3, [r4, #12]
    32a2:	f04f 0201 	mov.w	r2, #1
    32a6:	fa02 f505 	lsl.w	r5, r2, r5
    32aa:	ea23 0305 	bic.w	r3, r3, r5
    32ae:	60e3      	str	r3, [r4, #12]
	if (NewState){
    32b0:	b116      	cbz	r6, 32b8 <ADC_IntConfig+0x50>
		ADCx->ADINTEN |= ADC_INTEN_CH(IntType);
    32b2:	68e3      	ldr	r3, [r4, #12]
    32b4:	431d      	orrs	r5, r3
    32b6:	60e5      	str	r5, [r4, #12]
    32b8:	bd70      	pop	{r4, r5, r6, pc}
    32ba:	bf00      	nop

000032bc <ADC_ChannelCmd>:
* @param[in]	NewState Enable or Disable
*
* @return 		None
**********************************************************************/
void ADC_ChannelCmd (LPC_ADC_TypeDef *ADCx, uint8_t Channel, FunctionalState NewState)
{
    32bc:	b570      	push	{r4, r5, r6, lr}
    32be:	4604      	mov	r4, r0
    32c0:	460e      	mov	r6, r1
    32c2:	4615      	mov	r5, r2
	CHECK_PARAM(PARAM_ADCx(ADCx));
    32c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    32c8:	f2c4 0303 	movt	r3, #16387	; 0x4003
    32cc:	4298      	cmp	r0, r3
    32ce:	d007      	beq.n	32e0 <ADC_ChannelCmd+0x24>
    32d0:	f646 7014 	movw	r0, #28436	; 0x6f14
    32d4:	f2c0 0002 	movt	r0, #2
    32d8:	f04f 01ed 	mov.w	r1, #237	; 0xed
    32dc:	f000 f920 	bl	3520 <check_failed>
	CHECK_PARAM(PARAM_ADC_CHANNEL_SELECTION(Channel));

	if (NewState == ENABLE) {
    32e0:	2d01      	cmp	r5, #1
		ADCx->ADCR |= ADC_CR_CH_SEL(Channel);
    32e2:	6823      	ldr	r3, [r4, #0]
    32e4:	f04f 0201 	mov.w	r2, #1
    32e8:	fa02 f606 	lsl.w	r6, r2, r6
    32ec:	bf0c      	ite	eq
    32ee:	431e      	orreq	r6, r3
	} else {
		ADCx->ADCR &= ~ADC_CR_CH_SEL(Channel);
    32f0:	ea23 0606 	bicne.w	r6, r3, r6
    32f4:	6026      	str	r6, [r4, #0]
    32f6:	bd70      	pop	{r4, r5, r6, pc}

000032f8 <ADC_ChannelGetData>:
* @param[in]	ADCx pointer to LPC_ADC_TypeDef, should be: LPC_ADC
* @param[in]	channel: channel number, should be 0...7
* @return 		Data conversion
**********************************************************************/
uint16_t ADC_ChannelGetData(LPC_ADC_TypeDef *ADCx, uint8_t channel)
{
    32f8:	b538      	push	{r3, r4, r5, lr}
    32fa:	4604      	mov	r4, r0
    32fc:	460d      	mov	r5, r1
	uint32_t adc_value;

	CHECK_PARAM(PARAM_ADCx(ADCx));
    32fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    3302:	f2c4 0303 	movt	r3, #16387	; 0x4003
    3306:	4298      	cmp	r0, r3
    3308:	d007      	beq.n	331a <ADC_ChannelGetData+0x22>
    330a:	f646 7014 	movw	r0, #28436	; 0x6f14
    330e:	f2c0 0002 	movt	r0, #2
    3312:	f240 1101 	movw	r1, #257	; 0x101
    3316:	f000 f903 	bl	3520 <check_failed>
	CHECK_PARAM(PARAM_ADC_CHANNEL_SELECTION(channel));

	adc_value = *(uint32_t *) ((&ADCx->ADDR0) + channel);
    331a:	f104 0410 	add.w	r4, r4, #16
	return ADC_DR_RESULT(adc_value);
    331e:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
}
    3322:	f3c0 100b 	ubfx	r0, r0, #4, #12
    3326:	bd38      	pop	{r3, r4, r5, pc}

00003328 <ADC_ChannelGetStatus>:
*              		 	0:Burst status
*               		1:Done 	status
* @return 		SET / RESET
**********************************************************************/
FlagStatus ADC_ChannelGetStatus(LPC_ADC_TypeDef *ADCx, uint8_t channel, uint32_t StatusType)
{
    3328:	b570      	push	{r4, r5, r6, lr}
    332a:	4605      	mov	r5, r0
    332c:	460e      	mov	r6, r1
    332e:	4614      	mov	r4, r2
	uint32_t temp;

	CHECK_PARAM(PARAM_ADCx(ADCx));
    3330:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    3334:	f2c4 0303 	movt	r3, #16387	; 0x4003
    3338:	4298      	cmp	r0, r3
    333a:	d007      	beq.n	334c <ADC_ChannelGetStatus+0x24>
    333c:	f646 7014 	movw	r0, #28436	; 0x6f14
    3340:	f2c0 0002 	movt	r0, #2
    3344:	f240 1115 	movw	r1, #277	; 0x115
    3348:	f000 f8ea 	bl	3520 <check_failed>
	CHECK_PARAM(PARAM_ADC_CHANNEL_SELECTION(channel));
	CHECK_PARAM(PARAM_ADC_DATA_STATUS(StatusType));
    334c:	2c01      	cmp	r4, #1
    334e:	d907      	bls.n	3360 <ADC_ChannelGetStatus+0x38>
    3350:	f646 7014 	movw	r0, #28436	; 0x6f14
    3354:	f2c0 0002 	movt	r0, #2
    3358:	f240 1117 	movw	r1, #279	; 0x117
    335c:	f000 f8e0 	bl	3520 <check_failed>

	temp =  *(uint32_t *) ((&ADCx->ADDR0) + channel);
    3360:	f105 0510 	add.w	r5, r5, #16
    3364:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
	if (StatusType) {
    3368:	b114      	cbz	r4, 3370 <ADC_ChannelGetStatus+0x48>
		temp &= ADC_DR_DONE_FLAG;
    336a:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    336e:	e001      	b.n	3374 <ADC_ChannelGetStatus+0x4c>
	}else{
		temp &= ADC_DR_OVERRUN_FLAG;
    3370:	f000 4080 	and.w	r0, r0, #1073741824	; 0x40000000
		return SET;
	} else {
		return RESET;
	}

}
    3374:	3000      	adds	r0, #0
    3376:	bf18      	it	ne
    3378:	2001      	movne	r0, #1
    337a:	bd70      	pop	{r4, r5, r6, pc}

0000337c <CLKPWR_SetPCLKDiv>:
 *				- CLKPWR_PCLKSEL_CCLK_DIV_2 : PCLK_peripheral = CCLK/2
 *
 * @return none
 **********************************************************************/
void CLKPWR_SetPCLKDiv (uint32_t ClkType, uint32_t DivVal)
{
    337c:	b410      	push	{r4}
	uint32_t bitpos;

	bitpos = (ClkType < 32) ? (ClkType) : (ClkType - 32);
    337e:	281f      	cmp	r0, #31
    3380:	d917      	bls.n	33b2 <CLKPWR_SetPCLKDiv+0x36>
	}
	/* PCLKSEL1 selected */
	else
	{
		/* Clear two bit at bit position */
		LPC_SC->PCLKSEL1 &= ~(CLKPWR_PCLKSEL_BITMASK(bitpos));
    3382:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3386:	f2c4 030f 	movt	r3, #16399	; 0x400f
    338a:	f8d3 41ac 	ldr.w	r4, [r3, #428]	; 0x1ac
 **********************************************************************/
void CLKPWR_SetPCLKDiv (uint32_t ClkType, uint32_t DivVal)
{
	uint32_t bitpos;

	bitpos = (ClkType < 32) ? (ClkType) : (ClkType - 32);
    338e:	f1a0 0020 	sub.w	r0, r0, #32
	}
	/* PCLKSEL1 selected */
	else
	{
		/* Clear two bit at bit position */
		LPC_SC->PCLKSEL1 &= ~(CLKPWR_PCLKSEL_BITMASK(bitpos));
    3392:	f04f 0203 	mov.w	r2, #3
    3396:	fa02 f200 	lsl.w	r2, r2, r0
    339a:	ea24 0202 	bic.w	r2, r4, r2
    339e:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

		/* Set two selected bit */
		LPC_SC->PCLKSEL1 |= (CLKPWR_PCLKSEL_SET(bitpos, DivVal));
    33a2:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    33a6:	fa01 f000 	lsl.w	r0, r1, r0
    33aa:	4310      	orrs	r0, r2
    33ac:	f8c3 01ac 	str.w	r0, [r3, #428]	; 0x1ac
    33b0:	e014      	b.n	33dc <CLKPWR_SetPCLKDiv+0x60>

	/* PCLKSEL0 selected */
	if (ClkType < 32)
	{
		/* Clear two bit at bit position */
		LPC_SC->PCLKSEL0 &= (~(CLKPWR_PCLKSEL_BITMASK(bitpos)));
    33b2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    33b6:	f2c4 030f 	movt	r3, #16399	; 0x400f
    33ba:	f8d3 41a8 	ldr.w	r4, [r3, #424]	; 0x1a8
    33be:	f04f 0203 	mov.w	r2, #3
    33c2:	fa02 f200 	lsl.w	r2, r2, r0
    33c6:	ea24 0202 	bic.w	r2, r4, r2
    33ca:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8

		/* Set two selected bit */
		LPC_SC->PCLKSEL0 |= (CLKPWR_PCLKSEL_SET(bitpos, DivVal));
    33ce:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
    33d2:	fa01 f100 	lsl.w	r1, r1, r0
    33d6:	4311      	orrs	r1, r2
    33d8:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
		LPC_SC->PCLKSEL1 &= ~(CLKPWR_PCLKSEL_BITMASK(bitpos));

		/* Set two selected bit */
		LPC_SC->PCLKSEL1 |= (CLKPWR_PCLKSEL_SET(bitpos, DivVal));
	}
}
    33dc:	bc10      	pop	{r4}
    33de:	4770      	bx	lr

000033e0 <CLKPWR_GetPCLKSEL>:
 **********************************************************************/
uint32_t CLKPWR_GetPCLKSEL (uint32_t ClkType)
{
	uint32_t bitpos, retval;

	if (ClkType < 32)
    33e0:	281f      	cmp	r0, #31
	{
		bitpos = ClkType;
		retval = LPC_SC->PCLKSEL0;
    33e2:	bf9d      	ittte	ls
    33e4:	f44f 4340 	movls.w	r3, #49152	; 0xc000
    33e8:	f2c4 030f 	movtls	r3, #16399	; 0x400f
    33ec:	f8d3 31a8 	ldrls.w	r3, [r3, #424]	; 0x1a8
	}
	else
	{
		bitpos = ClkType - 32;
    33f0:	3820      	subhi	r0, #32
		retval = LPC_SC->PCLKSEL1;
    33f2:	bf82      	ittt	hi
    33f4:	f44f 4340 	movhi.w	r3, #49152	; 0xc000
    33f8:	f2c4 030f 	movthi	r3, #16399	; 0x400f
    33fc:	f8d3 31ac 	ldrhi.w	r3, [r3, #428]	; 0x1ac
	}

	retval = CLKPWR_PCLKSEL_GET(bitpos, retval);
    3400:	fa23 f000 	lsr.w	r0, r3, r0
	return retval;
}
    3404:	f000 0003 	and.w	r0, r0, #3
    3408:	4770      	bx	lr
    340a:	bf00      	nop

0000340c <CLKPWR_GetPCLK>:
				- CLKPWR_PCLKSEL_MC 		: MC

 * @return		Value of Selected Peripheral Clock
 **********************************************************************/
uint32_t CLKPWR_GetPCLK (uint32_t ClkType)
{
    340c:	b510      	push	{r4, lr}
	uint32_t retval, div;

	retval = SystemCoreClock;
    340e:	f240 0314 	movw	r3, #20
    3412:	f2c1 0300 	movt	r3, #4096	; 0x1000
    3416:	681c      	ldr	r4, [r3, #0]
	div = CLKPWR_GetPCLKSEL(ClkType);
    3418:	f7ff ffe2 	bl	33e0 <CLKPWR_GetPCLKSEL>

	switch (div)
    341c:	2803      	cmp	r0, #3
    341e:	d808      	bhi.n	3432 <CLKPWR_GetPCLK+0x26>
    3420:	e8df f000 	tbb	[pc, r0]
    3424:	02070705 	.word	0x02070705
	case 2:
		div = 2;
		break;

	case 3:
		div = 8;
    3428:	f04f 0008 	mov.w	r0, #8
		break;
    342c:	e001      	b.n	3432 <CLKPWR_GetPCLK+0x26>
	div = CLKPWR_GetPCLKSEL(ClkType);

	switch (div)
	{
	case 0:
		div = 4;
    342e:	f04f 0004 	mov.w	r0, #4
		break;
	}
	retval /= div;

	return retval;
}
    3432:	fbb4 f0f0 	udiv	r0, r4, r0
    3436:	bd10      	pop	{r4, pc}

00003438 <CLKPWR_ConfigPPWR>:
 *
 * @return none
 **********************************************************************/
void CLKPWR_ConfigPPWR (uint32_t PPType, FunctionalState NewState)
{
	if (NewState == ENABLE)
    3438:	2901      	cmp	r1, #1
    343a:	d10e      	bne.n	345a <CLKPWR_ConfigPPWR+0x22>
	{
		LPC_SC->PCONP |= PPType & CLKPWR_PCONP_BITMASK;
    343c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    3440:	f2c4 020f 	movt	r2, #16399	; 0x400f
    3444:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
    3448:	f24f 73de 	movw	r3, #63454	; 0xf7de
    344c:	f6ce 73ef 	movt	r3, #61423	; 0xefef
    3450:	4003      	ands	r3, r0
    3452:	430b      	orrs	r3, r1
    3454:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
    3458:	4770      	bx	lr
	}
	else if (NewState == DISABLE)
    345a:	b971      	cbnz	r1, 347a <CLKPWR_ConfigPPWR+0x42>
	{
		LPC_SC->PCONP &= (~PPType) & CLKPWR_PCONP_BITMASK;
    345c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    3460:	f2c4 020f 	movt	r2, #16399	; 0x400f
    3464:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
    3468:	f24f 73de 	movw	r3, #63454	; 0xf7de
    346c:	f6ce 73ef 	movt	r3, #61423	; 0xefef
    3470:	400b      	ands	r3, r1
    3472:	ea23 0000 	bic.w	r0, r3, r0
    3476:	f8c2 00c4 	str.w	r0, [r2, #196]	; 0xc4
    347a:	4770      	bx	lr

0000347c <GPIO_GetPointer>:
 **********************************************************************/
static LPC_GPIO_TypeDef *GPIO_GetPointer(uint8_t portNum)
{
	LPC_GPIO_TypeDef *pGPIO = NULL;

	switch (portNum) {
    347c:	2804      	cmp	r0, #4
    347e:	d804      	bhi.n	348a <GPIO_GetPointer+0xe>
    3480:	e8df f000 	tbb	[pc, r0]
    3484:	100b061a 	.word	0x100b061a
    3488:	15          	.byte	0x15
    3489:	00          	.byte	0x00
 * @param[in]	portNum		Port Number value, should be in range from 0 to 4.
 * @return		Pointer to GPIO peripheral
 **********************************************************************/
static LPC_GPIO_TypeDef *GPIO_GetPointer(uint8_t portNum)
{
	LPC_GPIO_TypeDef *pGPIO = NULL;
    348a:	f04f 0000 	mov.w	r0, #0
    348e:	4770      	bx	lr
	switch (portNum) {
	case 0:
		pGPIO = LPC_GPIO0;
		break;
	case 1:
		pGPIO = LPC_GPIO1;
    3490:	f24c 0020 	movw	r0, #49184	; 0xc020
    3494:	f2c2 0009 	movt	r0, #8201	; 0x2009
		break;
    3498:	4770      	bx	lr
	case 2:
		pGPIO = LPC_GPIO2;
    349a:	f24c 0040 	movw	r0, #49216	; 0xc040
    349e:	f2c2 0009 	movt	r0, #8201	; 0x2009
		break;
    34a2:	4770      	bx	lr
	case 3:
		pGPIO = LPC_GPIO3;
    34a4:	f24c 0060 	movw	r0, #49248	; 0xc060
    34a8:	f2c2 0009 	movt	r0, #8201	; 0x2009
		break;
    34ac:	4770      	bx	lr
	case 4:
		pGPIO = LPC_GPIO4;
    34ae:	f24c 0080 	movw	r0, #49280	; 0xc080
    34b2:	f2c2 0009 	movt	r0, #8201	; 0x2009
		break;
    34b6:	4770      	bx	lr
{
	LPC_GPIO_TypeDef *pGPIO = NULL;

	switch (portNum) {
	case 0:
		pGPIO = LPC_GPIO0;
    34b8:	f44f 4040 	mov.w	r0, #49152	; 0xc000
    34bc:	f2c2 0009 	movt	r0, #8201	; 0x2009
	default:
		break;
	}

	return pGPIO;
}
    34c0:	4770      	bx	lr
    34c2:	bf00      	nop

000034c4 <GPIO_SetDir>:
 *
 * Note: All remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void GPIO_SetDir(uint8_t portNum, uint32_t bitValue, uint8_t dir)
{
    34c4:	b538      	push	{r3, r4, r5, lr}
    34c6:	460c      	mov	r4, r1
    34c8:	4615      	mov	r5, r2
//	xprintf("GPIO_SetDir" " (%s:%d)\n",_F_,_L_);
//	xprintf("%x %x %d" " (%s:%d)\n",&bitValue,bitValue,dir,_F_,_L_);

	LPC_GPIO_TypeDef *pGPIO = GPIO_GetPointer(portNum);
    34ca:	f7ff ffd7 	bl	347c <GPIO_GetPointer>

//	xprintf("%x %x %d" " (%s:%d)\n",(uint32_t)GPIO_GetPointer(portNum),(uint32_t)GPIO_GetPointer(portNum),dir,_F_,_L_);

	if (pGPIO != NULL) {
    34ce:	b140      	cbz	r0, 34e2 <GPIO_SetDir+0x1e>
		// Enable Output
		if (dir) {
    34d0:	b11d      	cbz	r5, 34da <GPIO_SetDir+0x16>
			pGPIO->FIODIR |= bitValue;
    34d2:	6802      	ldr	r2, [r0, #0]
    34d4:	4314      	orrs	r4, r2
    34d6:	6004      	str	r4, [r0, #0]
    34d8:	bd38      	pop	{r3, r4, r5, pc}
		}
		// Enable Input
		else {
			pGPIO->FIODIR &= ~bitValue;
    34da:	6802      	ldr	r2, [r0, #0]
    34dc:	ea22 0404 	bic.w	r4, r2, r4
    34e0:	6004      	str	r4, [r0, #0]
    34e2:	bd38      	pop	{r3, r4, r5, pc}

000034e4 <GPIO_SetValue>:
 * not effect.
 * - For all remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void GPIO_SetValue(uint8_t portNum, uint32_t bitValue)
{
    34e4:	b510      	push	{r4, lr}
    34e6:	460c      	mov	r4, r1
//	xprintf("GPIO_SetValue" " (%s:%d)\n",_F_,_L_);
//	xprintf("%x %x" " (%s:%d)\n",&bitValue,bitValue,_F_,_L_);

	LPC_GPIO_TypeDef *pGPIO = GPIO_GetPointer(portNum);
    34e8:	f7ff ffc8 	bl	347c <GPIO_GetPointer>
//	xprintf("%x %x" " (%s:%d)\n",(uint32_t)GPIO_GetPointer(portNum),(uint32_t)GPIO_GetPointer(portNum),_F_,_L_);

	if (pGPIO != NULL) {
    34ec:	b100      	cbz	r0, 34f0 <GPIO_SetValue+0xc>
		pGPIO->FIOSET = bitValue;
    34ee:	6184      	str	r4, [r0, #24]
    34f0:	bd10      	pop	{r4, pc}
    34f2:	bf00      	nop

000034f4 <GPIO_ClearValue>:
 * not effect.
 * - For all remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void GPIO_ClearValue(uint8_t portNum, uint32_t bitValue)
{
    34f4:	b510      	push	{r4, lr}
    34f6:	460c      	mov	r4, r1
//	xprintf("GPIO_ClearValue" " (%s:%d)\n",_F_,_L_);
//	xprintf("%x %x" " (%s:%d)\n",&bitValue,bitValue,_F_,_L_);
	LPC_GPIO_TypeDef *pGPIO = GPIO_GetPointer(portNum);
    34f8:	f7ff ffc0 	bl	347c <GPIO_GetPointer>

	if (pGPIO != NULL) {
    34fc:	b100      	cbz	r0, 3500 <GPIO_ClearValue+0xc>
		pGPIO->FIOCLR = bitValue;
    34fe:	61c4      	str	r4, [r0, #28]
    3500:	bd10      	pop	{r4, pc}
    3502:	bf00      	nop

00003504 <GPIO_ReadValue>:
 *
 * Note: Return value contain state of each port pin (bit) on that GPIO regardless
 * its direction is input or output.
 **********************************************************************/
uint32_t GPIO_ReadValue(uint8_t portNum)
{
    3504:	b508      	push	{r3, lr}
	LPC_GPIO_TypeDef *pGPIO = GPIO_GetPointer(portNum);
    3506:	f7ff ffb9 	bl	347c <GPIO_GetPointer>

	if (pGPIO != NULL) {
    350a:	b108      	cbz	r0, 3510 <GPIO_ReadValue+0xc>
		return pGPIO->FIOPIN;
    350c:	6940      	ldr	r0, [r0, #20]
    350e:	bd08      	pop	{r3, pc}
	}

	return (0);
    3510:	f04f 0000 	mov.w	r0, #0
}
    3514:	bd08      	pop	{r3, pc}
    3516:	bf00      	nop

00003518 <FIO_ReadValue>:

/**
 * @brief The same with GPIO_ReadValue()
 */
uint32_t FIO_ReadValue(uint8_t portNum)
{
    3518:	b508      	push	{r3, lr}
	return (GPIO_ReadValue(portNum));
    351a:	f7ff fff3 	bl	3504 <GPIO_ReadValue>
}
    351e:	bd08      	pop	{r3, pc}

00003520 <check_failed>:
* @param[in]	file Pointer to the source file name
* @param[in]    line assert_param error line source number
* @return		None
*******************************************************************************/
void check_failed(uint8_t *file, uint32_t line)
{
    3520:	e7fe      	b.n	3520 <check_failed>
    3522:	bf00      	nop

00003524 <PINSEL_ConfigPin>:
 *                    that contains the configuration information for the
 *                    specified pin.
 * @return 		None
 **********************************************************************/
void PINSEL_ConfigPin(PINSEL_CFG_Type *PinCfg)
{
    3524:	b470      	push	{r4, r5, r6}
	set_PinFunc(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->Funcnum);
    3526:	7884      	ldrb	r4, [r0, #2]
 *
 * @return 		None
 **********************************************************************/
static void set_PinFunc ( uint8_t portnum, uint8_t pinnum, uint8_t funcnum)
{
	uint32_t pinnum_t = pinnum;
    3528:	7843      	ldrb	r3, [r0, #1]
	uint32_t pinselreg_idx = 2 * portnum;
    352a:	7802      	ldrb	r2, [r0, #0]
    352c:	ea4f 0242 	mov.w	r2, r2, lsl #1
	uint32_t *pPinCon = (uint32_t *)&LPC_PINCON->PINSEL0;

	if (pinnum_t >= 16) {
    3530:	2b0f      	cmp	r3, #15
		pinnum_t -= 16;
    3532:	bf84      	itt	hi
    3534:	3b10      	subhi	r3, #16
		pinselreg_idx++;
    3536:	3201      	addhi	r2, #1
	}
	*(uint32_t *)(pPinCon + pinselreg_idx) &= ~(0x03UL << (pinnum_t * 2));
    3538:	ea4f 0282 	mov.w	r2, r2, lsl #2
    353c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3540:	f502 3230 	add.w	r2, r2, #180224	; 0x2c000
    3544:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3548:	f04f 0103 	mov.w	r1, #3
    354c:	fa01 f103 	lsl.w	r1, r1, r3
    3550:	6815      	ldr	r5, [r2, #0]
    3552:	ea25 0101 	bic.w	r1, r5, r1
	*(uint32_t *)(pPinCon + pinselreg_idx) |= ((uint32_t)funcnum) << (pinnum_t * 2);
    3556:	fa04 f303 	lsl.w	r3, r4, r3
    355a:	430b      	orrs	r3, r1
    355c:	6013      	str	r3, [r2, #0]
 * @return 		None
 **********************************************************************/
void PINSEL_ConfigPin(PINSEL_CFG_Type *PinCfg)
{
	set_PinFunc(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->Funcnum);
	set_ResistorMode(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->Pinmode);
    355e:	78c5      	ldrb	r5, [r0, #3]

 * @return 		None
 **********************************************************************/
void set_ResistorMode ( uint8_t portnum, uint8_t pinnum, uint8_t modenum)
{
	uint32_t pinnum_t = pinnum;
    3560:	7842      	ldrb	r2, [r0, #1]
	uint32_t pinmodereg_idx = 2 * portnum;
    3562:	7803      	ldrb	r3, [r0, #0]
    3564:	ea4f 0343 	mov.w	r3, r3, lsl #1
	uint32_t *pPinCon = (uint32_t *)&LPC_PINCON->PINMODE0;

	if (pinnum_t >= 16) {
    3568:	2a0f      	cmp	r2, #15
		pinnum_t -= 16;
    356a:	bf84      	itt	hi
    356c:	3a10      	subhi	r2, #16
		pinmodereg_idx++ ;
    356e:	3301      	addhi	r3, #1
	}

	*(uint32_t *)(pPinCon + pinmodereg_idx) &= ~(0x03UL << (pinnum_t * 2));
    3570:	f24c 0140 	movw	r1, #49216	; 0xc040
    3574:	f2c4 0102 	movt	r1, #16386	; 0x4002
    3578:	ea4f 0242 	mov.w	r2, r2, lsl #1
    357c:	f04f 0403 	mov.w	r4, #3
    3580:	fa04 f402 	lsl.w	r4, r4, r2
    3584:	f851 6023 	ldr.w	r6, [r1, r3, lsl #2]
    3588:	ea26 0404 	bic.w	r4, r6, r4
	*(uint32_t *)(pPinCon + pinmodereg_idx) |= ((uint32_t)modenum) << (pinnum_t * 2);
    358c:	fa05 f202 	lsl.w	r2, r5, r2
    3590:	4322      	orrs	r2, r4
    3592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 **********************************************************************/
void PINSEL_ConfigPin(PINSEL_CFG_Type *PinCfg)
{
	set_PinFunc(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->Funcnum);
	set_ResistorMode(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->Pinmode);
	set_OpenDrainMode(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->OpenDrain);
    3596:	7802      	ldrb	r2, [r0, #0]
    3598:	7841      	ldrb	r1, [r0, #1]
 **********************************************************************/
void set_OpenDrainMode( uint8_t portnum, uint8_t pinnum, uint8_t modenum)
{
	uint32_t *pPinCon = (uint32_t *)&LPC_PINCON->PINMODE_OD0;

	if (modenum == PINSEL_PINMODE_OPENDRAIN){
    359a:	7903      	ldrb	r3, [r0, #4]
    359c:	2b01      	cmp	r3, #1
		*(uint32_t *)(pPinCon + portnum) |= (0x01UL << pinnum);
    359e:	f24c 0368 	movw	r3, #49256	; 0xc068
    35a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
    35a6:	f04f 0001 	mov.w	r0, #1
    35aa:	fa00 f101 	lsl.w	r1, r0, r1
    35ae:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    35b2:	bf0c      	ite	eq
    35b4:	4301      	orreq	r1, r0
	} else {
		*(uint32_t *)(pPinCon + portnum) &= ~(0x01UL << pinnum);
    35b6:	ea20 0101 	bicne.w	r1, r0, r1
    35ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
void PINSEL_ConfigPin(PINSEL_CFG_Type *PinCfg)
{
	set_PinFunc(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->Funcnum);
	set_ResistorMode(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->Pinmode);
	set_OpenDrainMode(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->OpenDrain);
}
    35be:	bc70      	pop	{r4, r5, r6}
    35c0:	4770      	bx	lr
    35c2:	bf00      	nop

000035c4 <PWM_Init>:
 * @return 		None
 * Note: PWM_ConfigStruct pointer will be assigned to corresponding structure
 * 		(PWM_TIMERCFG_Type or PWM_COUNTERCFG_Type) due to PWMTimerCounterMode.
 **********************************************************************/
void PWM_Init(LPC_PWM_TypeDef *PWMx, uint32_t PWMTimerCounterMode, void *PWM_ConfigStruct)
{
    35c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    35c6:	4604      	mov	r4, r0
    35c8:	460d      	mov	r5, r1
    35ca:	4616      	mov	r6, r2
	PWM_TIMERCFG_Type *pTimeCfg;
	PWM_COUNTERCFG_Type *pCounterCfg;
	uint64_t clkdlycnt;

	CHECK_PARAM(PARAM_PWMx(PWMx));
    35cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    35d0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    35d4:	4298      	cmp	r0, r3
    35d6:	d007      	beq.n	35e8 <PWM_Init+0x24>
    35d8:	f646 704c 	movw	r0, #28492	; 0x6f4c
    35dc:	f2c0 0002 	movt	r0, #2
    35e0:	f04f 01a2 	mov.w	r1, #162	; 0xa2
    35e4:	f7ff ff9c 	bl	3520 <check_failed>
	CHECK_PARAM(PARAM_PWM_TC_MODE(PWMTimerCounterMode));
    35e8:	2d01      	cmp	r5, #1
    35ea:	d907      	bls.n	35fc <PWM_Init+0x38>
    35ec:	f646 704c 	movw	r0, #28492	; 0x6f4c
    35f0:	f2c0 0002 	movt	r0, #2
    35f4:	f04f 01a3 	mov.w	r1, #163	; 0xa3
    35f8:	f7ff ff92 	bl	3520 <check_failed>

	pTimeCfg = (PWM_TIMERCFG_Type *)PWM_ConfigStruct;
	pCounterCfg = (PWM_COUNTERCFG_Type *)PWM_ConfigStruct;


	CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCPWM1, ENABLE);
    35fc:	f04f 0040 	mov.w	r0, #64	; 0x40
    3600:	f04f 0101 	mov.w	r1, #1
    3604:	f7ff ff18 	bl	3438 <CLKPWR_ConfigPPWR>
	CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_PWM1, CLKPWR_PCLKSEL_CCLK_DIV_4);
    3608:	f04f 000c 	mov.w	r0, #12
    360c:	f04f 0100 	mov.w	r1, #0
    3610:	f7ff feb4 	bl	337c <CLKPWR_SetPCLKDiv>
	// Get peripheral clock of PWM1
	clkdlycnt = (uint64_t) CLKPWR_GetPCLK (CLKPWR_PCLKSEL_PWM1);
    3614:	f04f 000c 	mov.w	r0, #12
    3618:	f7ff fef8 	bl	340c <CLKPWR_GetPCLK>
    361c:	4607      	mov	r7, r0


	// Clear all interrupts pending
	PWMx->IR = 0xFF & PWM_IR_BITMASK;
    361e:	f04f 033f 	mov.w	r3, #63	; 0x3f
    3622:	6023      	str	r3, [r4, #0]
	PWMx->TCR = 0x00;
    3624:	f04f 0300 	mov.w	r3, #0
    3628:	6063      	str	r3, [r4, #4]
	PWMx->CTCR = 0x00;
    362a:	6723      	str	r3, [r4, #112]	; 0x70
	PWMx->MCR = 0x00;
    362c:	6163      	str	r3, [r4, #20]
	PWMx->CCR = 0x00;
    362e:	62a3      	str	r3, [r4, #40]	; 0x28
	PWMx->PCR = 0x00;
    3630:	64e3      	str	r3, [r4, #76]	; 0x4c
	PWMx->LER = 0x00;
    3632:	6523      	str	r3, [r4, #80]	; 0x50

	if (PWMTimerCounterMode == PWM_MODE_TIMER)
    3634:	bb05      	cbnz	r5, 3678 <PWM_Init+0xb4>
	{
		CHECK_PARAM(PARAM_PWM_TIMER_PRESCALE(pTimeCfg->PrescaleOption));
    3636:	7833      	ldrb	r3, [r6, #0]
    3638:	2b01      	cmp	r3, #1
    363a:	d907      	bls.n	364c <PWM_Init+0x88>
    363c:	f646 704c 	movw	r0, #28492	; 0x6f4c
    3640:	f2c0 0002 	movt	r0, #2
    3644:	f04f 01ba 	mov.w	r1, #186	; 0xba
    3648:	f7ff ff6a 	bl	3520 <check_failed>

		/* Absolute prescale value */
		if (pTimeCfg->PrescaleOption == PWM_TIMER_PRESCALE_TICKVAL)
    364c:	7833      	ldrb	r3, [r6, #0]
    364e:	b923      	cbnz	r3, 365a <PWM_Init+0x96>
		{
			PWMx->PR   = pTimeCfg->PrescaleValue - 1;
    3650:	6873      	ldr	r3, [r6, #4]
    3652:	f103 33ff 	add.w	r3, r3, #4294967295
    3656:	60e3      	str	r3, [r4, #12]
    3658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		/* uSecond prescale value */
		else
		{
			clkdlycnt = (clkdlycnt * pTimeCfg->PrescaleValue) / 1000000;
    365a:	6870      	ldr	r0, [r6, #4]
    365c:	fba7 0100 	umull	r0, r1, r7, r0
    3660:	f244 2240 	movw	r2, #16960	; 0x4240
    3664:	f2c0 020f 	movt	r2, #15
    3668:	f04f 0300 	mov.w	r3, #0
    366c:	f010 fc38 	bl	13ee0 <__aeabi_uldivmod>
			PWMx->PR = ((uint32_t) clkdlycnt) - 1;
    3670:	f100 30ff 	add.w	r0, r0, #4294967295
    3674:	60e0      	str	r0, [r4, #12]
    3676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}

	}
	else if (PWMTimerCounterMode == PWM_MODE_COUNTER)
    3678:	2d01      	cmp	r5, #1
    367a:	d123      	bne.n	36c4 <PWM_Init+0x100>
	{
		CHECK_PARAM(PARAM_PWM_COUNTER_INPUTSEL(pCounterCfg->CountInputSelect));
    367c:	7873      	ldrb	r3, [r6, #1]
    367e:	2b01      	cmp	r3, #1
    3680:	d907      	bls.n	3692 <PWM_Init+0xce>
    3682:	f646 704c 	movw	r0, #28492	; 0x6f4c
    3686:	f2c0 0002 	movt	r0, #2
    368a:	f04f 01cb 	mov.w	r1, #203	; 0xcb
    368e:	f7ff ff47 	bl	3520 <check_failed>
		CHECK_PARAM(PARAM_PWM_COUNTER_EDGE(pCounterCfg->CounterOption));
    3692:	7833      	ldrb	r3, [r6, #0]
    3694:	f103 33ff 	add.w	r3, r3, #4294967295
    3698:	b2db      	uxtb	r3, r3
    369a:	2b02      	cmp	r3, #2
    369c:	d907      	bls.n	36ae <PWM_Init+0xea>
    369e:	f646 704c 	movw	r0, #28492	; 0x6f4c
    36a2:	f2c0 0002 	movt	r0, #2
    36a6:	f04f 01cc 	mov.w	r1, #204	; 0xcc
    36aa:	f7ff ff39 	bl	3520 <check_failed>

		PWMx->CTCR |= (PWM_CTCR_MODE((uint32_t)pCounterCfg->CounterOption)) \
    36ae:	6f21      	ldr	r1, [r4, #112]	; 0x70
    36b0:	7832      	ldrb	r2, [r6, #0]
    36b2:	f002 0203 	and.w	r2, r2, #3
						| (PWM_CTCR_SELECT_INPUT((uint32_t)pCounterCfg->CountInputSelect));
    36b6:	430a      	orrs	r2, r1
    36b8:	7873      	ldrb	r3, [r6, #1]
    36ba:	f003 0303 	and.w	r3, r3, #3
	else if (PWMTimerCounterMode == PWM_MODE_COUNTER)
	{
		CHECK_PARAM(PARAM_PWM_COUNTER_INPUTSEL(pCounterCfg->CountInputSelect));
		CHECK_PARAM(PARAM_PWM_COUNTER_EDGE(pCounterCfg->CounterOption));

		PWMx->CTCR |= (PWM_CTCR_MODE((uint32_t)pCounterCfg->CounterOption)) \
    36be:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
    36c2:	6723      	str	r3, [r4, #112]	; 0x70
    36c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    36c6:	bf00      	nop

000036c8 <PWM_Cmd>:
 * 							- ENABLE: Enable PWM peripheral
 * 							- DISABLE: Disable PWM peripheral
 * @return 		None
 **********************************************************************/
void PWM_Cmd(LPC_PWM_TypeDef *PWMx, FunctionalState NewState)
{
    36c8:	b538      	push	{r3, r4, r5, lr}
    36ca:	4604      	mov	r4, r0
    36cc:	460d      	mov	r5, r1
	CHECK_PARAM(PARAM_PWMx(PWMx));
    36ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    36d2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    36d6:	4298      	cmp	r0, r3
    36d8:	d007      	beq.n	36ea <PWM_Cmd+0x22>
    36da:	f646 704c 	movw	r0, #28492	; 0x6f4c
    36de:	f2c0 0002 	movt	r0, #2
    36e2:	f04f 01ee 	mov.w	r1, #238	; 0xee
    36e6:	f7ff ff1b 	bl	3520 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
    36ea:	2d01      	cmp	r5, #1
    36ec:	d907      	bls.n	36fe <PWM_Cmd+0x36>
    36ee:	f646 704c 	movw	r0, #28492	; 0x6f4c
    36f2:	f2c0 0002 	movt	r0, #2
    36f6:	f04f 01ef 	mov.w	r1, #239	; 0xef
    36fa:	f7ff ff11 	bl	3520 <check_failed>

	if (NewState == ENABLE)
    36fe:	2d01      	cmp	r5, #1
	{
		PWMx->TCR	|=  PWM_TCR_PWM_ENABLE;
    3700:	6863      	ldr	r3, [r4, #4]
    3702:	bf0c      	ite	eq
    3704:	f043 0308 	orreq.w	r3, r3, #8
	}
	else
	{
		PWMx->TCR &= (~PWM_TCR_PWM_ENABLE) & PWM_TCR_BITMASK;
    3708:	f003 0303 	andne.w	r3, r3, #3
    370c:	6063      	str	r3, [r4, #4]
    370e:	bd38      	pop	{r3, r4, r5, pc}

00003710 <PWM_CounterCmd>:
 * 							- ENABLE: Enable Counter in PWM peripheral
 * 							- DISABLE: Disable Counter in PWM peripheral
 * @return 		None
 **********************************************************************/
void PWM_CounterCmd(LPC_PWM_TypeDef *PWMx, FunctionalState NewState)
{
    3710:	b538      	push	{r3, r4, r5, lr}
    3712:	4604      	mov	r4, r0
    3714:	460d      	mov	r5, r1
	CHECK_PARAM(PARAM_PWMx(PWMx));
    3716:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    371a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    371e:	4298      	cmp	r0, r3
    3720:	d007      	beq.n	3732 <PWM_CounterCmd+0x22>
    3722:	f646 704c 	movw	r0, #28492	; 0x6f4c
    3726:	f2c0 0002 	movt	r0, #2
    372a:	f44f 7183 	mov.w	r1, #262	; 0x106
    372e:	f7ff fef7 	bl	3520 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
    3732:	2d01      	cmp	r5, #1
    3734:	d907      	bls.n	3746 <PWM_CounterCmd+0x36>
    3736:	f646 704c 	movw	r0, #28492	; 0x6f4c
    373a:	f2c0 0002 	movt	r0, #2
    373e:	f240 1107 	movw	r1, #263	; 0x107
    3742:	f7ff feed 	bl	3520 <check_failed>
	if (NewState == ENABLE)
    3746:	2d01      	cmp	r5, #1
	{
		PWMx->TCR	|=  PWM_TCR_COUNTER_ENABLE;
    3748:	6863      	ldr	r3, [r4, #4]
    374a:	bf0c      	ite	eq
    374c:	f043 0301 	orreq.w	r3, r3, #1
	}
	else
	{
		PWMx->TCR &= (~PWM_TCR_COUNTER_ENABLE) & PWM_TCR_BITMASK;
    3750:	f003 030a 	andne.w	r3, r3, #10
    3754:	6063      	str	r3, [r4, #4]
    3756:	bd38      	pop	{r3, r4, r5, pc}

00003758 <PWM_ResetCounter>:
 * @brief 		Reset Counter in PWM peripheral
 * @param[in]	PWMx	PWM peripheral selected, should be LPC_PWM1
 * @return 		None
 **********************************************************************/
void PWM_ResetCounter(LPC_PWM_TypeDef *PWMx)
{
    3758:	b510      	push	{r4, lr}
    375a:	4604      	mov	r4, r0
	CHECK_PARAM(PARAM_PWMx(PWMx));
    375c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    3760:	f2c4 0301 	movt	r3, #16385	; 0x4001
    3764:	4298      	cmp	r0, r3
    3766:	d007      	beq.n	3778 <PWM_ResetCounter+0x20>
    3768:	f646 704c 	movw	r0, #28492	; 0x6f4c
    376c:	f2c0 0002 	movt	r0, #2
    3770:	f44f 718d 	mov.w	r1, #282	; 0x11a
    3774:	f7ff fed4 	bl	3520 <check_failed>
	PWMx->TCR |= PWM_TCR_COUNTER_RESET;
    3778:	6863      	ldr	r3, [r4, #4]
    377a:	f043 0302 	orr.w	r3, r3, #2
    377e:	6063      	str	r3, [r4, #4]
	PWMx->TCR &= (~PWM_TCR_COUNTER_RESET) & PWM_TCR_BITMASK;
    3780:	6863      	ldr	r3, [r4, #4]
    3782:	f003 0309 	and.w	r3, r3, #9
    3786:	6063      	str	r3, [r4, #4]
}
    3788:	bd10      	pop	{r4, pc}
    378a:	bf00      	nop

0000378c <PWM_ConfigMatch>:
*                    that contains the configuration information for the
*                    specified PWM match function.
 * @return 		None
 **********************************************************************/
void PWM_ConfigMatch(LPC_PWM_TypeDef *PWMx, PWM_MATCHCFG_Type *PWM_MatchConfigStruct)
{
    378c:	b538      	push	{r3, r4, r5, lr}
    378e:	4605      	mov	r5, r0
    3790:	460c      	mov	r4, r1
	CHECK_PARAM(PARAM_PWMx(PWMx));
    3792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    3796:	f2c4 0301 	movt	r3, #16385	; 0x4001
    379a:	4298      	cmp	r0, r3
    379c:	d007      	beq.n	37ae <PWM_ConfigMatch+0x22>
    379e:	f646 704c 	movw	r0, #28492	; 0x6f4c
    37a2:	f2c0 0002 	movt	r0, #2
    37a6:	f44f 7195 	mov.w	r1, #298	; 0x12a
    37aa:	f7ff feb9 	bl	3520 <check_failed>
	CHECK_PARAM(PARAM_PWM1_MATCH_CHANNEL(PWM_MatchConfigStruct->MatchChannel));
    37ae:	7823      	ldrb	r3, [r4, #0]
    37b0:	2b06      	cmp	r3, #6
    37b2:	d907      	bls.n	37c4 <PWM_ConfigMatch+0x38>
    37b4:	f646 704c 	movw	r0, #28492	; 0x6f4c
    37b8:	f2c0 0002 	movt	r0, #2
    37bc:	f240 112b 	movw	r1, #299	; 0x12b
    37c0:	f7ff feae 	bl	3520 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(PWM_MatchConfigStruct->IntOnMatch));
    37c4:	7863      	ldrb	r3, [r4, #1]
    37c6:	2b01      	cmp	r3, #1
    37c8:	d907      	bls.n	37da <PWM_ConfigMatch+0x4e>
    37ca:	f646 704c 	movw	r0, #28492	; 0x6f4c
    37ce:	f2c0 0002 	movt	r0, #2
    37d2:	f44f 7196 	mov.w	r1, #300	; 0x12c
    37d6:	f7ff fea3 	bl	3520 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(PWM_MatchConfigStruct->ResetOnMatch));
    37da:	78e3      	ldrb	r3, [r4, #3]
    37dc:	2b01      	cmp	r3, #1
    37de:	d907      	bls.n	37f0 <PWM_ConfigMatch+0x64>
    37e0:	f646 704c 	movw	r0, #28492	; 0x6f4c
    37e4:	f2c0 0002 	movt	r0, #2
    37e8:	f240 112d 	movw	r1, #301	; 0x12d
    37ec:	f7ff fe98 	bl	3520 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(PWM_MatchConfigStruct->StopOnMatch));
    37f0:	78a3      	ldrb	r3, [r4, #2]
    37f2:	2b01      	cmp	r3, #1
    37f4:	d907      	bls.n	3806 <PWM_ConfigMatch+0x7a>
    37f6:	f646 704c 	movw	r0, #28492	; 0x6f4c
    37fa:	f2c0 0002 	movt	r0, #2
    37fe:	f44f 7197 	mov.w	r1, #302	; 0x12e
    3802:	f7ff fe8d 	bl	3520 <check_failed>

	//interrupt on MRn
	if (PWM_MatchConfigStruct->IntOnMatch == ENABLE)
    3806:	7863      	ldrb	r3, [r4, #1]
    3808:	2b01      	cmp	r3, #1
	{
		PWMx->MCR |= PWM_MCR_INT_ON_MATCH(PWM_MatchConfigStruct->MatchChannel);
    380a:	696a      	ldr	r2, [r5, #20]
    380c:	7823      	ldrb	r3, [r4, #0]
    380e:	f003 0307 	and.w	r3, r3, #7
    3812:	bf01      	itttt	eq
    3814:	eb03 0343 	addeq.w	r3, r3, r3, lsl #1
    3818:	2101      	moveq	r1, #1
    381a:	fa01 f303 	lsleq.w	r3, r1, r3
    381e:	4313      	orreq	r3, r2
	}
	else
	{
		PWMx->MCR &= (~PWM_MCR_INT_ON_MATCH(PWM_MatchConfigStruct->MatchChannel)) \
    3820:	bf1f      	itttt	ne
    3822:	f022 427f 	bicne.w	r2, r2, #4278190080	; 0xff000000
    3826:	f422 0260 	bicne.w	r2, r2, #14680064	; 0xe00000
    382a:	eb03 0343 	addne.w	r3, r3, r3, lsl #1
    382e:	2101      	movne	r1, #1
    3830:	bf1c      	itt	ne
    3832:	fa01 f303 	lslne.w	r3, r1, r3
    3836:	ea22 0303 	bicne.w	r3, r2, r3
    383a:	616b      	str	r3, [r5, #20]
					& PWM_MCR_BITMASK;
	}

	//reset on MRn
	if (PWM_MatchConfigStruct->ResetOnMatch == ENABLE)
    383c:	78e3      	ldrb	r3, [r4, #3]
    383e:	2b01      	cmp	r3, #1
    3840:	d10e      	bne.n	3860 <PWM_ConfigMatch+0xd4>
	{
		PWMx->MCR |= PWM_MCR_RESET_ON_MATCH(PWM_MatchConfigStruct->MatchChannel);
    3842:	696a      	ldr	r2, [r5, #20]
    3844:	7823      	ldrb	r3, [r4, #0]
    3846:	f003 0307 	and.w	r3, r3, #7
    384a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    384e:	f103 0301 	add.w	r3, r3, #1
    3852:	f04f 0101 	mov.w	r1, #1
    3856:	fa01 f303 	lsl.w	r3, r1, r3
    385a:	4313      	orrs	r3, r2
    385c:	616b      	str	r3, [r5, #20]
    385e:	e012      	b.n	3886 <PWM_ConfigMatch+0xfa>
	}
	else
	{
		PWMx->MCR &= (~PWM_MCR_RESET_ON_MATCH(PWM_MatchConfigStruct->MatchChannel)) \
    3860:	696a      	ldr	r2, [r5, #20]
    3862:	7823      	ldrb	r3, [r4, #0]
    3864:	f003 0307 	and.w	r3, r3, #7
    3868:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    386c:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
    3870:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3874:	f103 0301 	add.w	r3, r3, #1
    3878:	f04f 0101 	mov.w	r1, #1
    387c:	fa01 f303 	lsl.w	r3, r1, r3
    3880:	ea22 0303 	bic.w	r3, r2, r3
    3884:	616b      	str	r3, [r5, #20]
					& PWM_MCR_BITMASK;
	}

	//stop on MRn
	if (PWM_MatchConfigStruct->StopOnMatch == ENABLE)
    3886:	78a3      	ldrb	r3, [r4, #2]
    3888:	2b01      	cmp	r3, #1
    388a:	d10e      	bne.n	38aa <PWM_ConfigMatch+0x11e>
	{
		PWMx->MCR |= PWM_MCR_STOP_ON_MATCH(PWM_MatchConfigStruct->MatchChannel);
    388c:	696a      	ldr	r2, [r5, #20]
    388e:	7823      	ldrb	r3, [r4, #0]
    3890:	f003 0307 	and.w	r3, r3, #7
    3894:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3898:	f103 0302 	add.w	r3, r3, #2
    389c:	f04f 0101 	mov.w	r1, #1
    38a0:	fa01 f303 	lsl.w	r3, r1, r3
    38a4:	4313      	orrs	r3, r2
    38a6:	616b      	str	r3, [r5, #20]
    38a8:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		PWMx->MCR &= (~PWM_MCR_STOP_ON_MATCH(PWM_MatchConfigStruct->MatchChannel)) \
    38aa:	696a      	ldr	r2, [r5, #20]
    38ac:	7823      	ldrb	r3, [r4, #0]
    38ae:	f003 0307 	and.w	r3, r3, #7
    38b2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    38b6:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
    38ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    38be:	f103 0302 	add.w	r3, r3, #2
    38c2:	f04f 0101 	mov.w	r1, #1
    38c6:	fa01 f303 	lsl.w	r3, r1, r3
    38ca:	ea22 0303 	bic.w	r3, r2, r3
    38ce:	616b      	str	r3, [r5, #20]
    38d0:	bd38      	pop	{r3, r4, r5, pc}
    38d2:	bf00      	nop

000038d4 <PWM_MatchUpdate>:
 * 					this channel on next reset by a PWM Match event.
 * @return		None
 *********************************************************************/
void PWM_MatchUpdate(LPC_PWM_TypeDef *PWMx, uint8_t MatchChannel, \
					uint32_t MatchValue, uint8_t UpdateType)
{
    38d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    38d6:	4604      	mov	r4, r0
    38d8:	460d      	mov	r5, r1
    38da:	4617      	mov	r7, r2
    38dc:	461e      	mov	r6, r3
	CHECK_PARAM(PARAM_PWMx(PWMx));
    38de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    38e2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    38e6:	4298      	cmp	r0, r3
    38e8:	d007      	beq.n	38fa <PWM_MatchUpdate+0x26>
    38ea:	f646 704c 	movw	r0, #28492	; 0x6f4c
    38ee:	f2c0 0002 	movt	r0, #2
    38f2:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    38f6:	f7ff fe13 	bl	3520 <check_failed>
	CHECK_PARAM(PARAM_PWM1_MATCH_CHANNEL(MatchChannel));
    38fa:	2d06      	cmp	r5, #6
    38fc:	d907      	bls.n	390e <PWM_MatchUpdate+0x3a>
    38fe:	f646 704c 	movw	r0, #28492	; 0x6f4c
    3902:	f2c0 0002 	movt	r0, #2
    3906:	f240 11ad 	movw	r1, #429	; 0x1ad
    390a:	f7ff fe09 	bl	3520 <check_failed>
	CHECK_PARAM(PARAM_PWM_MATCH_UPDATE(UpdateType));
    390e:	2e01      	cmp	r6, #1
    3910:	d907      	bls.n	3922 <PWM_MatchUpdate+0x4e>
    3912:	f646 704c 	movw	r0, #28492	; 0x6f4c
    3916:	f2c0 0002 	movt	r0, #2
    391a:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
    391e:	f7ff fdff 	bl	3520 <check_failed>

	switch (MatchChannel)
    3922:	2d06      	cmp	r5, #6
    3924:	d813      	bhi.n	394e <PWM_MatchUpdate+0x7a>
    3926:	e8df f005 	tbb	[pc, r5]
    392a:	0604      	.short	0x0604
    392c:	0e0c0a08 	.word	0x0e0c0a08
    3930:	10          	.byte	0x10
    3931:	00          	.byte	0x00
	{
	case 0:
		PWMx->MR0 = MatchValue;
    3932:	61a7      	str	r7, [r4, #24]
		break;
    3934:	e020      	b.n	3978 <PWM_MatchUpdate+0xa4>

	case 1:
		PWMx->MR1 = MatchValue;
    3936:	61e7      	str	r7, [r4, #28]
		break;
    3938:	e01e      	b.n	3978 <PWM_MatchUpdate+0xa4>

	case 2:
		PWMx->MR2 = MatchValue;
    393a:	6227      	str	r7, [r4, #32]
		break;
    393c:	e01c      	b.n	3978 <PWM_MatchUpdate+0xa4>

	case 3:
		PWMx->MR3 = MatchValue;
    393e:	6267      	str	r7, [r4, #36]	; 0x24
		break;
    3940:	e01a      	b.n	3978 <PWM_MatchUpdate+0xa4>

	case 4:
		PWMx->MR4 = MatchValue;
    3942:	6427      	str	r7, [r4, #64]	; 0x40
		break;
    3944:	e018      	b.n	3978 <PWM_MatchUpdate+0xa4>

	case 5:
		PWMx->MR5 = MatchValue;
    3946:	6467      	str	r7, [r4, #68]	; 0x44
		break;
    3948:	e016      	b.n	3978 <PWM_MatchUpdate+0xa4>

	case 6:
		PWMx->MR6 = MatchValue;
    394a:	64a7      	str	r7, [r4, #72]	; 0x48
		break;
    394c:	e014      	b.n	3978 <PWM_MatchUpdate+0xa4>
	}

	// Write Latch register
	PWMx->LER |= PWM_LER_EN_MATCHn_LATCH(MatchChannel);
    394e:	6d23      	ldr	r3, [r4, #80]	; 0x50
    3950:	2d06      	cmp	r5, #6
    3952:	bf88      	it	hi
    3954:	2500      	movhi	r5, #0
    3956:	d803      	bhi.n	3960 <PWM_MatchUpdate+0x8c>
    3958:	f04f 0201 	mov.w	r2, #1
    395c:	fa02 f505 	lsl.w	r5, r2, r5
    3960:	432b      	orrs	r3, r5
    3962:	6523      	str	r3, [r4, #80]	; 0x50

	// In case of update now
	if (UpdateType == PWM_MATCH_UPDATE_NOW)
    3964:	b956      	cbnz	r6, 397c <PWM_MatchUpdate+0xa8>
	{
		PWMx->TCR |= PWM_TCR_COUNTER_RESET;
    3966:	6863      	ldr	r3, [r4, #4]
    3968:	f043 0302 	orr.w	r3, r3, #2
    396c:	6063      	str	r3, [r4, #4]
		PWMx->TCR &= (~PWM_TCR_COUNTER_RESET) & PWM_TCR_BITMASK;
    396e:	6863      	ldr	r3, [r4, #4]
    3970:	f003 0309 	and.w	r3, r3, #9
    3974:	6063      	str	r3, [r4, #4]
    3976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		PWMx->MR6 = MatchValue;
		break;
	}

	// Write Latch register
	PWMx->LER |= PWM_LER_EN_MATCHn_LATCH(MatchChannel);
    3978:	6d23      	ldr	r3, [r4, #80]	; 0x50
    397a:	e7ed      	b.n	3958 <PWM_MatchUpdate+0x84>
    397c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    397e:	bf00      	nop

00003980 <PWM_ChannelConfig>:
 * 				- PWM_CHANNEL_DUAL_EDGE: Dual Edge mode
 * @return 		None
 * Note: PWM Channel 1 can not be selected for mode option
 *********************************************************************/
void PWM_ChannelConfig(LPC_PWM_TypeDef *PWMx, uint8_t PWMChannel, uint8_t ModeOption)
{
    3980:	b570      	push	{r4, r5, r6, lr}
    3982:	4604      	mov	r4, r0
    3984:	460d      	mov	r5, r1
    3986:	4616      	mov	r6, r2
	CHECK_PARAM(PARAM_PWMx(PWMx));
    3988:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    398c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    3990:	4298      	cmp	r0, r3
    3992:	d007      	beq.n	39a4 <PWM_ChannelConfig+0x24>
    3994:	f646 704c 	movw	r0, #28492	; 0x6f4c
    3998:	f2c0 0002 	movt	r0, #2
    399c:	f240 2112 	movw	r1, #530	; 0x212
    39a0:	f7ff fdbe 	bl	3520 <check_failed>
	CHECK_PARAM(PARAM_PWM1_EDGE_MODE_CHANNEL(PWMChannel));
    39a4:	f1a5 0302 	sub.w	r3, r5, #2
    39a8:	b2db      	uxtb	r3, r3
    39aa:	2b04      	cmp	r3, #4
    39ac:	d907      	bls.n	39be <PWM_ChannelConfig+0x3e>
    39ae:	f646 704c 	movw	r0, #28492	; 0x6f4c
    39b2:	f2c0 0002 	movt	r0, #2
    39b6:	f240 2113 	movw	r1, #531	; 0x213
    39ba:	f7ff fdb1 	bl	3520 <check_failed>
	CHECK_PARAM(PARAM_PWM_CHANNEL_EDGE(ModeOption));
    39be:	2e01      	cmp	r6, #1
    39c0:	d907      	bls.n	39d2 <PWM_ChannelConfig+0x52>
    39c2:	f646 704c 	movw	r0, #28492	; 0x6f4c
    39c6:	f2c0 0002 	movt	r0, #2
    39ca:	f44f 7105 	mov.w	r1, #532	; 0x214
    39ce:	f7ff fda7 	bl	3520 <check_failed>

	// Single edge mode
	if (ModeOption == PWM_CHANNEL_SINGLE_EDGE)
    39d2:	b98e      	cbnz	r6, 39f8 <PWM_ChannelConfig+0x78>
	{
		PWMx->PCR &= (~PWM_PCR_PWMSELn(PWMChannel)) & PWM_PCR_BITMASK;
    39d4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    39d6:	f005 0207 	and.w	r2, r5, #7
    39da:	2a01      	cmp	r2, #1
    39dc:	bfc1      	itttt	gt
    39de:	2201      	movgt	r2, #1
    39e0:	fa02 f505 	lslgt.w	r5, r2, r5
    39e4:	f647 627c 	movwgt	r2, #32380	; 0x7e7c
    39e8:	ea22 0505 	bicgt.w	r5, r2, r5
    39ec:	bfd8      	it	le
    39ee:	f647 657c 	movwle	r5, #32380	; 0x7e7c
    39f2:	401d      	ands	r5, r3
    39f4:	64e5      	str	r5, [r4, #76]	; 0x4c
    39f6:	bd70      	pop	{r4, r5, r6, pc}
	}
	// Double edge mode
	else if (PWM_CHANNEL_DUAL_EDGE)
	{
		PWMx->PCR |= PWM_PCR_PWMSELn(PWMChannel);
    39f8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    39fa:	f005 0207 	and.w	r2, r5, #7
    39fe:	2a01      	cmp	r2, #1
    3a00:	bfc6      	itte	gt
    3a02:	2201      	movgt	r2, #1
    3a04:	fa02 f505 	lslgt.w	r5, r2, r5
    3a08:	2500      	movle	r5, #0
    3a0a:	431d      	orrs	r5, r3
    3a0c:	64e5      	str	r5, [r4, #76]	; 0x4c
    3a0e:	bd70      	pop	{r4, r5, r6, pc}

00003a10 <PWM_ChannelCmd>:
 * 				- ENABLE: Enable this PWM channel output
 * 				- DISABLE: Disable this PWM channel output
 * @return		None
 *********************************************************************/
void PWM_ChannelCmd(LPC_PWM_TypeDef *PWMx, uint8_t PWMChannel, FunctionalState NewState)
{
    3a10:	b570      	push	{r4, r5, r6, lr}
    3a12:	4604      	mov	r4, r0
    3a14:	460d      	mov	r5, r1
    3a16:	4616      	mov	r6, r2
	CHECK_PARAM(PARAM_PWMx(PWMx));
    3a18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    3a1c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    3a20:	4298      	cmp	r0, r3
    3a22:	d007      	beq.n	3a34 <PWM_ChannelCmd+0x24>
    3a24:	f646 704c 	movw	r0, #28492	; 0x6f4c
    3a28:	f2c0 0002 	movt	r0, #2
    3a2c:	f240 212f 	movw	r1, #559	; 0x22f
    3a30:	f7ff fd76 	bl	3520 <check_failed>
	CHECK_PARAM(PARAM_PWM1_CHANNEL(PWMChannel));
    3a34:	f105 33ff 	add.w	r3, r5, #4294967295
    3a38:	b2db      	uxtb	r3, r3
    3a3a:	2b05      	cmp	r3, #5
    3a3c:	d907      	bls.n	3a4e <PWM_ChannelCmd+0x3e>
    3a3e:	f646 704c 	movw	r0, #28492	; 0x6f4c
    3a42:	f2c0 0002 	movt	r0, #2
    3a46:	f44f 710c 	mov.w	r1, #560	; 0x230
    3a4a:	f7ff fd69 	bl	3520 <check_failed>

	if (NewState == ENABLE)
    3a4e:	2e01      	cmp	r6, #1
    3a50:	d10b      	bne.n	3a6a <PWM_ChannelCmd+0x5a>
	{
		PWMx->PCR |= PWM_PCR_PWMENAn(PWMChannel);
    3a52:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    3a54:	f015 0f07 	tst.w	r5, #7
    3a58:	bf1d      	ittte	ne
    3a5a:	3508      	addne	r5, #8
    3a5c:	2201      	movne	r2, #1
    3a5e:	fa02 f505 	lslne.w	r5, r2, r5
    3a62:	2500      	moveq	r5, #0
    3a64:	431d      	orrs	r5, r3
    3a66:	64e5      	str	r5, [r4, #76]	; 0x4c
    3a68:	bd70      	pop	{r4, r5, r6, pc}
	}
	else
	{
		PWMx->PCR &= (~PWM_PCR_PWMENAn(PWMChannel)) & PWM_PCR_BITMASK;
    3a6a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    3a6c:	f015 0f07 	tst.w	r5, #7
    3a70:	bf1f      	itttt	ne
    3a72:	3508      	addne	r5, #8
    3a74:	2201      	movne	r2, #1
    3a76:	fa02 f505 	lslne.w	r5, r2, r5
    3a7a:	f647 627c 	movwne	r2, #32380	; 0x7e7c
    3a7e:	bf14      	ite	ne
    3a80:	ea22 0505 	bicne.w	r5, r2, r5
    3a84:	f647 657c 	movweq	r5, #32380	; 0x7e7c
    3a88:	401d      	ands	r5, r3
    3a8a:	64e5      	str	r5, [r4, #76]	; 0x4c
    3a8c:	bd70      	pop	{r4, r5, r6, pc}
    3a8e:	bf00      	nop

00003a90 <RTC_WriteGPREG>:
 * Note: These General purpose registers can be used to store important
 * information when the main power supply is off. The value in these
 * registers is not affected by chip reset.
 **********************************************************************/
void RTC_WriteGPREG (LPC_RTC_TypeDef *RTCx, uint8_t Channel, uint32_t Value)
{
    3a90:	b570      	push	{r4, r5, r6, lr}
    3a92:	4605      	mov	r5, r0
    3a94:	460c      	mov	r4, r1
    3a96:	4616      	mov	r6, r2
	uint32_t *preg;

	CHECK_PARAM(PARAM_RTCx(RTCx));
    3a98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    3a9c:	f2c4 0302 	movt	r3, #16386	; 0x4002
    3aa0:	4298      	cmp	r0, r3
    3aa2:	d007      	beq.n	3ab4 <RTC_WriteGPREG+0x24>
    3aa4:	f646 7084 	movw	r0, #28548	; 0x6f84
    3aa8:	f2c0 0002 	movt	r0, #2
    3aac:	f240 21dd 	movw	r1, #733	; 0x2dd
    3ab0:	f7ff fd36 	bl	3520 <check_failed>
	CHECK_PARAM(PARAM_RTC_GPREG_CH(Channel));
    3ab4:	2c04      	cmp	r4, #4
    3ab6:	d907      	bls.n	3ac8 <RTC_WriteGPREG+0x38>
    3ab8:	f646 7084 	movw	r0, #28548	; 0x6f84
    3abc:	f2c0 0002 	movt	r0, #2
    3ac0:	f240 21de 	movw	r1, #734	; 0x2de
    3ac4:	f7ff fd2c 	bl	3520 <check_failed>

	preg = (uint32_t *)&RTCx->GPREG0;
    3ac8:	f105 0544 	add.w	r5, r5, #68	; 0x44
	preg += Channel;
	*preg = Value;
    3acc:	f845 6024 	str.w	r6, [r5, r4, lsl #2]
}
    3ad0:	bd70      	pop	{r4, r5, r6, pc}
    3ad2:	bf00      	nop

00003ad4 <SPI_SetClock>:
 * @param[in] 	SPIx	SPI peripheral definition, should be LPC_SPI
 * @param[in]	target_clock : clock of SPI (Hz)
 * @return 		None
 ***********************************************************************/
void SPI_SetClock (LPC_SPI_TypeDef *SPIx, uint32_t target_clock)
{
    3ad4:	b510      	push	{r4, lr}
    3ad6:	460c      	mov	r4, r1
	uint32_t spi_pclk;
	uint32_t prescale, temp;

	CHECK_PARAM(PARAM_SPIx(SPIx));
    3ad8:	f04f 0300 	mov.w	r3, #0
    3adc:	f2c4 0302 	movt	r3, #16386	; 0x4002
    3ae0:	4298      	cmp	r0, r3
    3ae2:	d008      	beq.n	3af6 <SPI_SetClock+0x22>
    3ae4:	f646 70bc 	movw	r0, #28604	; 0x6fbc
    3ae8:	f2c0 0002 	movt	r0, #2
    3aec:	f04f 0140 	mov.w	r1, #64	; 0x40
    3af0:	f7ff fd16 	bl	3520 <check_failed>
    3af4:	bd10      	pop	{r4, pc}

	if (SPIx == LPC_SPI){
		spi_pclk =  CLKPWR_GetPCLK (CLKPWR_PCLKSEL_SPI);
    3af6:	f04f 0010 	mov.w	r0, #16
    3afa:	f7ff fc87 	bl	340c <CLKPWR_GetPCLK>
 * @brief 		Setup clock rate for SPI device
 * @param[in] 	SPIx	SPI peripheral definition, should be LPC_SPI
 * @param[in]	target_clock : clock of SPI (Hz)
 * @return 		None
 ***********************************************************************/
void SPI_SetClock (LPC_SPI_TypeDef *SPIx, uint32_t target_clock)
    3afe:	ea4f 0244 	mov.w	r2, r4, lsl #1
    3b02:	ea4f 04c4 	mov.w	r4, r4, lsl #3
		spi_pclk =  CLKPWR_GetPCLK (CLKPWR_PCLKSEL_SPI);
	} else {
		return;
	}

	prescale = 8;
    3b06:	f04f 0308 	mov.w	r3, #8
	// Find closest clock to target clock
	while (1){
		temp = target_clock * prescale;
		if (temp >= spi_pclk){
    3b0a:	42a0      	cmp	r0, r4
    3b0c:	d904      	bls.n	3b18 <SPI_SetClock+0x44>
			break;
		}
		prescale += 2;
    3b0e:	f103 0302 	add.w	r3, r3, #2
    3b12:	18a4      	adds	r4, r4, r2
		if(prescale >= 254){
    3b14:	2bfe      	cmp	r3, #254	; 0xfe
    3b16:	d1f8      	bne.n	3b0a <SPI_SetClock+0x36>
			break;
		}
	}

	// Write to register
	SPIx->SPCCR = SPI_SPCCR_COUNTER(prescale);
    3b18:	b2db      	uxtb	r3, r3
    3b1a:	f04f 0200 	mov.w	r2, #0
    3b1e:	f2c4 0202 	movt	r2, #16386	; 0x4002
    3b22:	60d3      	str	r3, [r2, #12]
    3b24:	bd10      	pop	{r4, pc}
    3b26:	bf00      	nop

00003b28 <SPI_GetDataSize>:
 * @brief		Get data bit size per transfer
 * @param[in]	SPIx	SPI peripheral selected, should be LPC_SPI
 * @return 		number of bit per transfer, could be 8-16
 **********************************************************************/
uint8_t SPI_GetDataSize (LPC_SPI_TypeDef *SPIx)
{
    3b28:	b510      	push	{r4, lr}
    3b2a:	4604      	mov	r4, r0
	CHECK_PARAM(PARAM_SPIx(SPIx));
    3b2c:	f04f 0300 	mov.w	r3, #0
    3b30:	f2c4 0302 	movt	r3, #16386	; 0x4002
    3b34:	4298      	cmp	r0, r3
    3b36:	d007      	beq.n	3b48 <SPI_GetDataSize+0x20>
    3b38:	f646 70bc 	movw	r0, #28604	; 0x6fbc
    3b3c:	f2c0 0002 	movt	r0, #2
    3b40:	f04f 0171 	mov.w	r1, #113	; 0x71
    3b44:	f7ff fcec 	bl	3520 <check_failed>
	return ((SPIx->SPCR)>>8 & 0xF);
    3b48:	6820      	ldr	r0, [r4, #0]
}
    3b4a:	f3c0 2003 	ubfx	r0, r0, #8, #4
    3b4e:	bd10      	pop	{r4, pc}

00003b50 <SPI_Init>:
*                    that contains the configuration information for the
*                    specified SPI peripheral.
 * @return 		None
 *********************************************************************/
void SPI_Init(LPC_SPI_TypeDef *SPIx, SPI_CFG_Type *SPI_ConfigStruct)
{
    3b50:	b538      	push	{r3, r4, r5, lr}
    3b52:	460c      	mov	r4, r1
	uint32_t tmp;

	CHECK_PARAM(PARAM_SPIx(SPIx));
    3b54:	f04f 0300 	mov.w	r3, #0
    3b58:	f2c4 0302 	movt	r3, #16386	; 0x4002
    3b5c:	4298      	cmp	r0, r3
    3b5e:	d008      	beq.n	3b72 <SPI_Init+0x22>
    3b60:	f646 70bc 	movw	r0, #28604	; 0x6fbc
    3b64:	f2c0 0002 	movt	r0, #2
    3b68:	f04f 0182 	mov.w	r1, #130	; 0x82
    3b6c:	f7ff fcd8 	bl	3520 <check_failed>
    3b70:	bd38      	pop	{r3, r4, r5, pc}

	if(SPIx == LPC_SPI){
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCSPI, ENABLE);
    3b72:	f44f 7080 	mov.w	r0, #256	; 0x100
    3b76:	f04f 0101 	mov.w	r1, #1
    3b7a:	f7ff fc5d 	bl	3438 <CLKPWR_ConfigPPWR>
	} else {
		return;
	}

	// Configure SPI, interrupt is disable as default
	tmp = ((SPI_ConfigStruct->CPHA) | (SPI_ConfigStruct->CPOL) \
    3b7e:	68a2      	ldr	r2, [r4, #8]
    3b80:	6863      	ldr	r3, [r4, #4]
    3b82:	431a      	orrs	r2, r3
		| (SPI_ConfigStruct->DataOrder) | (SPI_ConfigStruct->Databit) \
    3b84:	6923      	ldr	r3, [r4, #16]
    3b86:	431a      	orrs	r2, r3
    3b88:	6823      	ldr	r3, [r4, #0]
    3b8a:	431a      	orrs	r2, r3
		| (SPI_ConfigStruct->Mode) | SPI_SPCR_BIT_EN) & SPI_SPCR_BITMASK;
    3b8c:	68e3      	ldr	r3, [r4, #12]
    3b8e:	431a      	orrs	r2, r3
    3b90:	f640 73f8 	movw	r3, #4088	; 0xff8
    3b94:	4013      	ands	r3, r2
	} else {
		return;
	}

	// Configure SPI, interrupt is disable as default
	tmp = ((SPI_ConfigStruct->CPHA) | (SPI_ConfigStruct->CPOL) \
    3b96:	f043 0304 	orr.w	r3, r3, #4
		| (SPI_ConfigStruct->DataOrder) | (SPI_ConfigStruct->Databit) \
		| (SPI_ConfigStruct->Mode) | SPI_SPCR_BIT_EN) & SPI_SPCR_BITMASK;
	// write back to SPI control register
	SPIx->SPCR = tmp;
    3b9a:	f04f 0500 	mov.w	r5, #0
    3b9e:	f2c4 0502 	movt	r5, #16386	; 0x4002
    3ba2:	602b      	str	r3, [r5, #0]

	// Set clock rate for SPI peripheral
	SPI_SetClock(SPIx, SPI_ConfigStruct->ClockRate);
    3ba4:	4628      	mov	r0, r5
    3ba6:	6961      	ldr	r1, [r4, #20]
    3ba8:	f7ff ff94 	bl	3ad4 <SPI_SetClock>

	// If interrupt flag is set, Write '1' to Clear interrupt flag
	if (SPIx->SPINT & SPI_SPINT_INTFLAG){
    3bac:	69eb      	ldr	r3, [r5, #28]
    3bae:	f013 0f01 	tst.w	r3, #1
		SPIx->SPINT = SPI_SPINT_INTFLAG;
    3bb2:	bf1f      	itttt	ne
    3bb4:	2300      	movne	r3, #0
    3bb6:	f2c4 0302 	movtne	r3, #16386	; 0x4002
    3bba:	2201      	movne	r2, #1
    3bbc:	61da      	strne	r2, [r3, #28]
    3bbe:	bd38      	pop	{r3, r4, r5, pc}

00003bc0 <SPI_SendData>:
 * @param[in]	Data	Data to transmit (must be 16 or 8-bit long,
 * 						this depend on SPI data bit number configured)
 * @return 		none
 **********************************************************************/
void SPI_SendData(LPC_SPI_TypeDef* SPIx, uint16_t Data)
{
    3bc0:	b538      	push	{r3, r4, r5, lr}
    3bc2:	4604      	mov	r4, r0
    3bc4:	460d      	mov	r5, r1
	CHECK_PARAM(PARAM_SPIx(SPIx));
    3bc6:	f04f 0300 	mov.w	r3, #0
    3bca:	f2c4 0302 	movt	r3, #16386	; 0x4002
    3bce:	4298      	cmp	r0, r3
    3bd0:	d007      	beq.n	3be2 <SPI_SendData+0x22>
    3bd2:	f646 70bc 	movw	r0, #28604	; 0x6fbc
    3bd6:	f2c0 0002 	movt	r0, #2
    3bda:	f04f 01bc 	mov.w	r1, #188	; 0xbc
    3bde:	f7ff fc9f 	bl	3520 <check_failed>

	SPIx->SPDR = Data & SPI_SPDR_BITMASK;
    3be2:	60a5      	str	r5, [r4, #8]
}
    3be4:	bd38      	pop	{r3, r4, r5, pc}
    3be6:	bf00      	nop

00003be8 <SPI_ReceiveData>:
 * @brief		Receive a single data from SPIx peripheral
 * @param[in]	SPIx	SPI peripheral selected, should be LPC_SPI
 * @return 		Data received (16-bit long)
 **********************************************************************/
uint16_t SPI_ReceiveData(LPC_SPI_TypeDef* SPIx)
{
    3be8:	b510      	push	{r4, lr}
    3bea:	4604      	mov	r4, r0
	CHECK_PARAM(PARAM_SPIx(SPIx));
    3bec:	f04f 0300 	mov.w	r3, #0
    3bf0:	f2c4 0302 	movt	r3, #16386	; 0x4002
    3bf4:	4298      	cmp	r0, r3
    3bf6:	d007      	beq.n	3c08 <SPI_ReceiveData+0x20>
    3bf8:	f646 70bc 	movw	r0, #28604	; 0x6fbc
    3bfc:	f2c0 0002 	movt	r0, #2
    3c00:	f04f 01ca 	mov.w	r1, #202	; 0xca
    3c04:	f7ff fc8c 	bl	3520 <check_failed>

	return ((uint16_t) (SPIx->SPDR & SPI_SPDR_BITMASK));
    3c08:	68a0      	ldr	r0, [r4, #8]
}
    3c0a:	b280      	uxth	r0, r0
    3c0c:	bd10      	pop	{r4, pc}
    3c0e:	bf00      	nop

00003c10 <SPI_IntCmd>:
 * 				- ENALBE: Enable this SPI interrupt.
* 				- DISALBE: Disable this SPI interrupt.
 * @return 		None
 *********************************************************************/
void SPI_IntCmd(LPC_SPI_TypeDef *SPIx, FunctionalState NewState)
{
    3c10:	b538      	push	{r3, r4, r5, lr}
    3c12:	4604      	mov	r4, r0
    3c14:	460d      	mov	r5, r1
	CHECK_PARAM(PARAM_SPIx(SPIx));
    3c16:	f04f 0300 	mov.w	r3, #0
    3c1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    3c1e:	4298      	cmp	r0, r3
    3c20:	d007      	beq.n	3c32 <SPI_IntCmd+0x22>
    3c22:	f646 70bc 	movw	r0, #28604	; 0x6fbc
    3c26:	f2c0 0002 	movt	r0, #2
    3c2a:	f44f 71ae 	mov.w	r1, #348	; 0x15c
    3c2e:	f7ff fc77 	bl	3520 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
    3c32:	2d01      	cmp	r5, #1
    3c34:	d907      	bls.n	3c46 <SPI_IntCmd+0x36>
    3c36:	f646 70bc 	movw	r0, #28604	; 0x6fbc
    3c3a:	f2c0 0002 	movt	r0, #2
    3c3e:	f240 115d 	movw	r1, #349	; 0x15d
    3c42:	f7ff fc6d 	bl	3520 <check_failed>

	if (NewState == ENABLE)
    3c46:	2d01      	cmp	r5, #1
	{
		SPIx->SPCR |= SPI_SPCR_SPIE;
    3c48:	bf07      	ittee	eq
    3c4a:	6823      	ldreq	r3, [r4, #0]
    3c4c:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
	}
	else
	{
		SPIx->SPCR &= (~SPI_SPCR_SPIE) & SPI_SPCR_BITMASK;
    3c50:	6822      	ldrne	r2, [r4, #0]
    3c52:	f640 737c 	movwne	r3, #3964	; 0xf7c
    3c56:	bf18      	it	ne
    3c58:	4013      	andne	r3, r2
    3c5a:	6023      	str	r3, [r4, #0]
    3c5c:	bd38      	pop	{r3, r4, r5, pc}
    3c5e:	bf00      	nop

00003c60 <SPI_ReadWrite>:
 * 				Return (-1) if error.
 * Note: This function can be used in both master and slave mode.
 ***********************************************************************/
int32_t SPI_ReadWrite (LPC_SPI_TypeDef *SPIx, SPI_DATA_SETUP_Type *dataCfg, \
						SPI_TRANSFER_Type xfType)
{
    3c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3c64:	b083      	sub	sp, #12
    3c66:	4606      	mov	r6, r0
    3c68:	460d      	mov	r5, r1
    3c6a:	9201      	str	r2, [sp, #4]
    uint32_t stat;
    uint32_t temp;
    uint8_t dataword;

	//read for empty buffer
	temp = SPIx->SPDR;
    3c6c:	6883      	ldr	r3, [r0, #8]
	//dummy to clear status
	temp = SPIx->SPSR;
    3c6e:	6843      	ldr	r3, [r0, #4]
	dataCfg->counter = 0;
    3c70:	f04f 0300 	mov.w	r3, #0
    3c74:	60cb      	str	r3, [r1, #12]
	dataCfg->status = 0;
    3c76:	610b      	str	r3, [r1, #16]

	if(SPI_GetDataSize (SPIx) == 8)
    3c78:	f7ff ff56 	bl	3b28 <SPI_GetDataSize>
		dataword = 0;
    3c7c:	f1b0 0708 	subs.w	r7, r0, #8
    3c80:	bf18      	it	ne
    3c82:	2701      	movne	r7, #1
	else dataword = 1;
	if (xfType == SPI_TRANSFER_POLLING){
    3c84:	9b01      	ldr	r3, [sp, #4]
    3c86:	2b00      	cmp	r3, #0
    3c88:	d14f      	bne.n	3d2a <SPI_ReadWrite+0xca>

		if (dataword == 0){
    3c8a:	b927      	cbnz	r7, 3c96 <SPI_ReadWrite+0x36>
			rdata8 = (uint8_t *)dataCfg->rx_data;
    3c8c:	f8d5 b004 	ldr.w	fp, [r5, #4]
			wdata8 = (uint8_t *)dataCfg->tx_data;
    3c90:	f8d5 9000 	ldr.w	r9, [r5]
    3c94:	e041      	b.n	3d1a <SPI_ReadWrite+0xba>
		} else {
			rdata16 = (uint16_t *)dataCfg->rx_data;
    3c96:	f8d5 a004 	ldr.w	sl, [r5, #4]
			wdata16 = (uint16_t *)dataCfg->tx_data;
    3c9a:	f8d5 8000 	ldr.w	r8, [r5]
    3c9e:	e03c      	b.n	3d1a <SPI_ReadWrite+0xba>
		}

		while(dataCfg->counter < dataCfg->length)
		{
			// Write data to buffer
			if(dataCfg->tx_data == NULL){
    3ca0:	682b      	ldr	r3, [r5, #0]
    3ca2:	b963      	cbnz	r3, 3cbe <SPI_ReadWrite+0x5e>
				if (dataword == 0){
    3ca4:	b92f      	cbnz	r7, 3cb2 <SPI_ReadWrite+0x52>
					SPI_SendData(SPIx, 0xFF);
    3ca6:	4630      	mov	r0, r6
    3ca8:	f04f 01ff 	mov.w	r1, #255	; 0xff
    3cac:	f7ff ff88 	bl	3bc0 <SPI_SendData>
    3cb0:	e011      	b.n	3cd6 <SPI_ReadWrite+0x76>
				} else {
					SPI_SendData(SPIx, 0xFFFF);
    3cb2:	4630      	mov	r0, r6
    3cb4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    3cb8:	f7ff ff82 	bl	3bc0 <SPI_SendData>
    3cbc:	e00b      	b.n	3cd6 <SPI_ReadWrite+0x76>
				}
			} else {
				if (dataword == 0){
    3cbe:	b92f      	cbnz	r7, 3ccc <SPI_ReadWrite+0x6c>
					SPI_SendData(SPIx, *wdata8);
    3cc0:	4630      	mov	r0, r6
    3cc2:	f819 1b01 	ldrb.w	r1, [r9], #1
    3cc6:	f7ff ff7b 	bl	3bc0 <SPI_SendData>
    3cca:	e004      	b.n	3cd6 <SPI_ReadWrite+0x76>
					wdata8++;
				} else {
					SPI_SendData(SPIx, *wdata16);
    3ccc:	4630      	mov	r0, r6
    3cce:	f838 1b02 	ldrh.w	r1, [r8], #2
    3cd2:	f7ff ff75 	bl	3bc0 <SPI_SendData>
					wdata16++;
				}
			}
			// Wait for transfer complete
			while (!((stat = SPIx->SPSR) & SPI_SPSR_SPIF));
    3cd6:	6874      	ldr	r4, [r6, #4]
    3cd8:	f014 0f80 	tst.w	r4, #128	; 0x80
    3cdc:	d0fb      	beq.n	3cd6 <SPI_ReadWrite+0x76>
			// Check for error
			if (stat & (SPI_SPSR_ABRT | SPI_SPSR_MODF | SPI_SPSR_ROVR | SPI_SPSR_WCOL)){
    3cde:	f014 0f78 	tst.w	r4, #120	; 0x78
    3ce2:	d004      	beq.n	3cee <SPI_ReadWrite+0x8e>
				// save status
				dataCfg->status = stat | SPI_STAT_ERROR;
    3ce4:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    3ce8:	612c      	str	r4, [r5, #16]
				return (dataCfg->counter);
    3cea:	68e8      	ldr	r0, [r5, #12]
    3cec:	e04c      	b.n	3d88 <SPI_ReadWrite+0x128>
			}
			// Read data from SPI dat
			temp = (uint32_t) SPI_ReceiveData(SPIx);
    3cee:	4630      	mov	r0, r6
    3cf0:	f7ff ff7a 	bl	3be8 <SPI_ReceiveData>

			// Store data to destination
			if (dataCfg->rx_data != NULL)
    3cf4:	686b      	ldr	r3, [r5, #4]
    3cf6:	b133      	cbz	r3, 3d06 <SPI_ReadWrite+0xa6>
			{
				if (dataword == 0){
    3cf8:	b917      	cbnz	r7, 3d00 <SPI_ReadWrite+0xa0>
					*(rdata8) = (uint8_t) temp;
    3cfa:	f80b 0b01 	strb.w	r0, [fp], #1
    3cfe:	e003      	b.n	3d08 <SPI_ReadWrite+0xa8>
					rdata8++;
				} else {
					*(rdata16) = (uint16_t) temp;
    3d00:	f82a 0b02 	strh.w	r0, [sl], #2
    3d04:	e005      	b.n	3d12 <SPI_ReadWrite+0xb2>
					rdata16++;
				}
			}
			// Increase counter
			if (dataword == 0){
    3d06:	b927      	cbnz	r7, 3d12 <SPI_ReadWrite+0xb2>
				dataCfg->counter++;
    3d08:	68eb      	ldr	r3, [r5, #12]
    3d0a:	f103 0301 	add.w	r3, r3, #1
    3d0e:	60eb      	str	r3, [r5, #12]
    3d10:	e003      	b.n	3d1a <SPI_ReadWrite+0xba>
			} else {
				dataCfg->counter += 2;
    3d12:	68eb      	ldr	r3, [r5, #12]
    3d14:	f103 0302 	add.w	r3, r3, #2
    3d18:	60eb      	str	r3, [r5, #12]
		} else {
			rdata16 = (uint16_t *)dataCfg->rx_data;
			wdata16 = (uint16_t *)dataCfg->tx_data;
		}

		while(dataCfg->counter < dataCfg->length)
    3d1a:	68e8      	ldr	r0, [r5, #12]
    3d1c:	68ab      	ldr	r3, [r5, #8]
    3d1e:	4298      	cmp	r0, r3
    3d20:	d3be      	bcc.n	3ca0 <SPI_ReadWrite+0x40>
			}
		}

		// Return length of actual data transferred
		// save status
		dataCfg->status = stat | SPI_STAT_DONE;
    3d22:	f444 7480 	orr.w	r4, r4, #256	; 0x100
    3d26:	612c      	str	r4, [r5, #16]
		return (dataCfg->counter);
    3d28:	e02e      	b.n	3d88 <SPI_ReadWrite+0x128>
	}
	// Interrupt mode
	else {

		// Check if interrupt flag is already set
		if(SPIx->SPINT & SPI_SPINT_INTFLAG){
    3d2a:	69f3      	ldr	r3, [r6, #28]
    3d2c:	f013 0f01 	tst.w	r3, #1
			SPIx->SPINT = SPI_SPINT_INTFLAG;
    3d30:	bf1c      	itt	ne
    3d32:	2301      	movne	r3, #1
    3d34:	61f3      	strne	r3, [r6, #28]
		}
		if (dataCfg->counter < dataCfg->length){
    3d36:	68ea      	ldr	r2, [r5, #12]
    3d38:	68ab      	ldr	r3, [r5, #8]
    3d3a:	429a      	cmp	r2, r3
				}
			}
			SPI_IntCmd(SPIx, ENABLE);
		} else {
			// Save status
			dataCfg->status = SPI_STAT_DONE;
    3d3c:	bf22      	ittt	cs
    3d3e:	f44f 7380 	movcs.w	r3, #256	; 0x100
    3d42:	612b      	strcs	r3, [r5, #16]
		}
		return (0);
    3d44:	2000      	movcs	r0, #0

		// Check if interrupt flag is already set
		if(SPIx->SPINT & SPI_SPINT_INTFLAG){
			SPIx->SPINT = SPI_SPINT_INTFLAG;
		}
		if (dataCfg->counter < dataCfg->length){
    3d46:	d21f      	bcs.n	3d88 <SPI_ReadWrite+0x128>
			// Write data to buffer
			if(dataCfg->tx_data == NULL){
    3d48:	682b      	ldr	r3, [r5, #0]
    3d4a:	b963      	cbnz	r3, 3d66 <SPI_ReadWrite+0x106>
				if (dataword == 0){
    3d4c:	b92f      	cbnz	r7, 3d5a <SPI_ReadWrite+0xfa>
					SPI_SendData(SPIx, 0xFF);
    3d4e:	4630      	mov	r0, r6
    3d50:	f04f 01ff 	mov.w	r1, #255	; 0xff
    3d54:	f7ff ff34 	bl	3bc0 <SPI_SendData>
    3d58:	e00f      	b.n	3d7a <SPI_ReadWrite+0x11a>
				} else {
					SPI_SendData(SPIx, 0xFFFF);
    3d5a:	4630      	mov	r0, r6
    3d5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    3d60:	f7ff ff2e 	bl	3bc0 <SPI_SendData>
    3d64:	e009      	b.n	3d7a <SPI_ReadWrite+0x11a>
				}
			} else {
				if (dataword == 0){
    3d66:	b927      	cbnz	r7, 3d72 <SPI_ReadWrite+0x112>
					SPI_SendData(SPIx, (*(uint8_t *)dataCfg->tx_data));
    3d68:	4630      	mov	r0, r6
    3d6a:	7819      	ldrb	r1, [r3, #0]
    3d6c:	f7ff ff28 	bl	3bc0 <SPI_SendData>
    3d70:	e003      	b.n	3d7a <SPI_ReadWrite+0x11a>
				} else {
					SPI_SendData(SPIx, (*(uint16_t *)dataCfg->tx_data));
    3d72:	4630      	mov	r0, r6
    3d74:	8819      	ldrh	r1, [r3, #0]
    3d76:	f7ff ff23 	bl	3bc0 <SPI_SendData>
				}
			}
			SPI_IntCmd(SPIx, ENABLE);
    3d7a:	4630      	mov	r0, r6
    3d7c:	f04f 0101 	mov.w	r1, #1
    3d80:	f7ff ff46 	bl	3c10 <SPI_IntCmd>
		} else {
			// Save status
			dataCfg->status = SPI_STAT_DONE;
		}
		return (0);
    3d84:	f04f 0000 	mov.w	r0, #0
	}
}
    3d88:	b003      	add	sp, #12
    3d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3d8e:	bf00      	nop

00003d90 <TIM_ClearIntPending>:
 * 				- TIM_CR0_INT: Interrupt for Capture channel 0
 * 				- TIM_CR1_INT: Interrupt for Capture channel 1
 * @return 		None
 **********************************************************************/
void TIM_ClearIntPending(LPC_TIM_TypeDef *TIMx, TIM_INT_TYPE IntFlag)
{
    3d90:	b538      	push	{r3, r4, r5, lr}
    3d92:	4604      	mov	r4, r0
    3d94:	460d      	mov	r5, r1
	CHECK_PARAM(PARAM_TIMx(TIMx));
    3d96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    3d9a:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3d9e:	1ac3      	subs	r3, r0, r3
    3da0:	bf18      	it	ne
    3da2:	2301      	movne	r3, #1
    3da4:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
    3da8:	bf0c      	ite	eq
    3daa:	2300      	moveq	r3, #0
    3dac:	f003 0301 	andne.w	r3, r3, #1
    3db0:	b1c3      	cbz	r3, 3de4 <TIM_ClearIntPending+0x54>
    3db2:	f04f 0300 	mov.w	r3, #0
    3db6:	f2c4 0309 	movt	r3, #16393	; 0x4009
    3dba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3dbe:	f2c4 0209 	movt	r2, #16393	; 0x4009
    3dc2:	1a82      	subs	r2, r0, r2
    3dc4:	bf18      	it	ne
    3dc6:	2201      	movne	r2, #1
    3dc8:	4298      	cmp	r0, r3
    3dca:	bf0c      	ite	eq
    3dcc:	2300      	moveq	r3, #0
    3dce:	f002 0301 	andne.w	r3, r2, #1
    3dd2:	b13b      	cbz	r3, 3de4 <TIM_ClearIntPending+0x54>
    3dd4:	f646 70f4 	movw	r0, #28660	; 0x6ff4
    3dd8:	f2c0 0002 	movt	r0, #2
    3ddc:	f04f 01dd 	mov.w	r1, #221	; 0xdd
    3de0:	f7ff fb9e 	bl	3520 <check_failed>
	CHECK_PARAM(PARAM_TIM_INT_TYPE(IntFlag));
    3de4:	2d05      	cmp	r5, #5
    3de6:	d907      	bls.n	3df8 <TIM_ClearIntPending+0x68>
    3de8:	f646 70f4 	movw	r0, #28660	; 0x6ff4
    3dec:	f2c0 0002 	movt	r0, #2
    3df0:	f04f 01de 	mov.w	r1, #222	; 0xde
    3df4:	f7ff fb94 	bl	3520 <check_failed>
	TIMx->IR = TIM_IR_CLR(IntFlag);
    3df8:	f04f 0301 	mov.w	r3, #1
    3dfc:	fa03 f505 	lsl.w	r5, r3, r5
    3e00:	6025      	str	r5, [r4, #0]
}
    3e02:	bd38      	pop	{r3, r4, r5, pc}

00003e04 <TIM_Init>:
 * 				that contains the configuration information for the
 *                    specified Timer peripheral.
 * @return 		None
 **********************************************************************/
void TIM_Init(LPC_TIM_TypeDef *TIMx, TIM_MODE_OPT TimerCounterMode, void *TIM_ConfigStruct)
{
    3e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e06:	4604      	mov	r4, r0
    3e08:	460d      	mov	r5, r1
    3e0a:	4616      	mov	r6, r2
	TIM_TIMERCFG_Type *pTimeCfg;
	TIM_COUNTERCFG_Type *pCounterCfg;

	CHECK_PARAM(PARAM_TIMx(TIMx));
    3e0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    3e10:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3e14:	1ac3      	subs	r3, r0, r3
    3e16:	bf18      	it	ne
    3e18:	2301      	movne	r3, #1
    3e1a:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
    3e1e:	bf0c      	ite	eq
    3e20:	2300      	moveq	r3, #0
    3e22:	f003 0301 	andne.w	r3, r3, #1
    3e26:	b1c3      	cbz	r3, 3e5a <TIM_Init+0x56>
    3e28:	f04f 0300 	mov.w	r3, #0
    3e2c:	f2c4 0309 	movt	r3, #16393	; 0x4009
    3e30:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3e34:	f2c4 0209 	movt	r2, #16393	; 0x4009
    3e38:	1a82      	subs	r2, r0, r2
    3e3a:	bf18      	it	ne
    3e3c:	2201      	movne	r2, #1
    3e3e:	4298      	cmp	r0, r3
    3e40:	bf0c      	ite	eq
    3e42:	2300      	moveq	r3, #0
    3e44:	f002 0301 	andne.w	r3, r2, #1
    3e48:	b13b      	cbz	r3, 3e5a <TIM_Init+0x56>
    3e4a:	f646 70f4 	movw	r0, #28660	; 0x6ff4
    3e4e:	f2c0 0002 	movt	r0, #2
    3e52:	f240 112b 	movw	r1, #299	; 0x12b
    3e56:	f7ff fb63 	bl	3520 <check_failed>
	CHECK_PARAM(PARAM_TIM_MODE_OPT(TimerCounterMode));
    3e5a:	2d01      	cmp	r5, #1
    3e5c:	d907      	bls.n	3e6e <TIM_Init+0x6a>
    3e5e:	f646 70f4 	movw	r0, #28660	; 0x6ff4
    3e62:	f2c0 0002 	movt	r0, #2
    3e66:	f44f 7196 	mov.w	r1, #300	; 0x12c
    3e6a:	f7ff fb59 	bl	3520 <check_failed>

	//set power

	if (TIMx== LPC_TIM0)
    3e6e:	f1b4 2f40 	cmp.w	r4, #1073758208	; 0x40004000
    3e72:	d10c      	bne.n	3e8e <TIM_Init+0x8a>
	{
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCTIM0, ENABLE);
    3e74:	f04f 0002 	mov.w	r0, #2
    3e78:	f04f 0101 	mov.w	r1, #1
    3e7c:	f7ff fadc 	bl	3438 <CLKPWR_ConfigPPWR>
		//PCLK_Timer0 = CCLK/4
		CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_TIMER0, CLKPWR_PCLKSEL_CCLK_DIV_4);
    3e80:	f04f 0002 	mov.w	r0, #2
    3e84:	f04f 0100 	mov.w	r1, #0
    3e88:	f7ff fa78 	bl	337c <CLKPWR_SetPCLKDiv>
    3e8c:	e037      	b.n	3efe <TIM_Init+0xfa>
	}
	else if (TIMx== LPC_TIM1)
    3e8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    3e92:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3e96:	429c      	cmp	r4, r3
    3e98:	d10c      	bne.n	3eb4 <TIM_Init+0xb0>
	{
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCTIM1, ENABLE);
    3e9a:	f04f 0004 	mov.w	r0, #4
    3e9e:	f04f 0101 	mov.w	r1, #1
    3ea2:	f7ff fac9 	bl	3438 <CLKPWR_ConfigPPWR>
		//PCLK_Timer1 = CCLK/4
		CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_TIMER1, CLKPWR_PCLKSEL_CCLK_DIV_4);
    3ea6:	f04f 0004 	mov.w	r0, #4
    3eaa:	f04f 0100 	mov.w	r1, #0
    3eae:	f7ff fa65 	bl	337c <CLKPWR_SetPCLKDiv>
    3eb2:	e024      	b.n	3efe <TIM_Init+0xfa>

	}

	else if (TIMx== LPC_TIM2)
    3eb4:	f04f 0300 	mov.w	r3, #0
    3eb8:	f2c4 0309 	movt	r3, #16393	; 0x4009
    3ebc:	429c      	cmp	r4, r3
    3ebe:	d10c      	bne.n	3eda <TIM_Init+0xd6>
	{
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCTIM2, ENABLE);
    3ec0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    3ec4:	f04f 0101 	mov.w	r1, #1
    3ec8:	f7ff fab6 	bl	3438 <CLKPWR_ConfigPPWR>
		//PCLK_Timer2= CCLK/4
		CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_TIMER2, CLKPWR_PCLKSEL_CCLK_DIV_4);
    3ecc:	f04f 002c 	mov.w	r0, #44	; 0x2c
    3ed0:	f04f 0100 	mov.w	r1, #0
    3ed4:	f7ff fa52 	bl	337c <CLKPWR_SetPCLKDiv>
    3ed8:	e011      	b.n	3efe <TIM_Init+0xfa>
	}
	else if (TIMx== LPC_TIM3)
    3eda:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    3ede:	f2c4 0309 	movt	r3, #16393	; 0x4009
    3ee2:	429c      	cmp	r4, r3
    3ee4:	d10b      	bne.n	3efe <TIM_Init+0xfa>
	{
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCTIM3, ENABLE);
    3ee6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    3eea:	f04f 0101 	mov.w	r1, #1
    3eee:	f7ff faa3 	bl	3438 <CLKPWR_ConfigPPWR>
		//PCLK_Timer3= CCLK/4
		CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_TIMER3, CLKPWR_PCLKSEL_CCLK_DIV_4);
    3ef2:	f04f 002e 	mov.w	r0, #46	; 0x2e
    3ef6:	f04f 0100 	mov.w	r1, #0
    3efa:	f7ff fa3f 	bl	337c <CLKPWR_SetPCLKDiv>

	}

	TIMx->CCR &= ~TIM_CTCR_MODE_MASK;
    3efe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3f00:	f023 0303 	bic.w	r3, r3, #3
    3f04:	62a3      	str	r3, [r4, #40]	; 0x28
	TIMx->CCR |= TIM_TIMER_MODE;
    3f06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3f08:	62a3      	str	r3, [r4, #40]	; 0x28

	TIMx->TC =0;
    3f0a:	f04f 0300 	mov.w	r3, #0
    3f0e:	60a3      	str	r3, [r4, #8]
	TIMx->PC =0;
    3f10:	6123      	str	r3, [r4, #16]
	TIMx->PR =0;
    3f12:	60e3      	str	r3, [r4, #12]
	TIMx->TCR |= (1<<1); //Reset Counter
    3f14:	6863      	ldr	r3, [r4, #4]
    3f16:	f043 0302 	orr.w	r3, r3, #2
    3f1a:	6063      	str	r3, [r4, #4]
	TIMx->TCR &= ~(1<<1); //release reset
    3f1c:	6863      	ldr	r3, [r4, #4]
    3f1e:	f023 0302 	bic.w	r3, r3, #2
    3f22:	6063      	str	r3, [r4, #4]
	if (TimerCounterMode == TIM_TIMER_MODE )
    3f24:	2d00      	cmp	r5, #0
    3f26:	d132      	bne.n	3f8e <TIM_Init+0x18a>
	{
		pTimeCfg = (TIM_TIMERCFG_Type *)TIM_ConfigStruct;
		if (pTimeCfg->PrescaleOption  == TIM_PRESCALE_TICKVAL)
    3f28:	7833      	ldrb	r3, [r6, #0]
    3f2a:	b923      	cbnz	r3, 3f36 <TIM_Init+0x132>
		{
			TIMx->PR   = pTimeCfg->PrescaleValue -1  ;
    3f2c:	6873      	ldr	r3, [r6, #4]
    3f2e:	f103 33ff 	add.w	r3, r3, #4294967295
    3f32:	60e3      	str	r3, [r4, #12]
    3f34:	e036      	b.n	3fa4 <TIM_Init+0x1a0>
 **********************************************************************/
uint32_t converPtrToTimeNum (LPC_TIM_TypeDef *TIMx)
{
	uint32_t tnum = -1;

	if (TIMx == LPC_TIM0)
    3f36:	f1b4 2f40 	cmp.w	r4, #1073758208	; 0x40004000
    3f3a:	d014      	beq.n	3f66 <TIM_Init+0x162>
	{
		tnum = 0;
	}
	else if (TIMx == LPC_TIM1)
    3f3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    3f40:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3f44:	429c      	cmp	r4, r3
    3f46:	d031      	beq.n	3fac <TIM_Init+0x1a8>
	{
		tnum = 1;
	}
	else if (TIMx == LPC_TIM2)
    3f48:	f04f 0300 	mov.w	r3, #0
    3f4c:	f2c4 0309 	movt	r3, #16393	; 0x4009
    3f50:	429c      	cmp	r4, r3
    3f52:	d032      	beq.n	3fba <TIM_Init+0x1b6>
	{
		tnum = 2;
	}
	else if (TIMx == LPC_TIM3)
    3f54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    3f58:	f2c4 0309 	movt	r3, #16393	; 0x4009
    3f5c:	429c      	cmp	r4, r3
		{
			TIMx->PR   = pTimeCfg->PrescaleValue -1  ;
		}
		else
		{
			TIMx->PR   = converUSecToVal (converPtrToTimeNum(TIMx),pTimeCfg->PrescaleValue)-1;
    3f5e:	bf18      	it	ne
    3f60:	6875      	ldrne	r5, [r6, #4]
	}
	else if (TIMx == LPC_TIM2)
	{
		tnum = 2;
	}
	else if (TIMx == LPC_TIM3)
    3f62:	d106      	bne.n	3f72 <TIM_Init+0x16e>
    3f64:	e030      	b.n	3fc8 <TIM_Init+0x1c4>
		{
			TIMx->PR   = pTimeCfg->PrescaleValue -1  ;
		}
		else
		{
			TIMx->PR   = converUSecToVal (converPtrToTimeNum(TIMx),pTimeCfg->PrescaleValue)-1;
    3f66:	6875      	ldr	r5, [r6, #4]
{
	uint32_t clkdlycnt;
	switch (timernum)
	{
	case 0:
		clkdlycnt = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_TIMER0);
    3f68:	f04f 0002 	mov.w	r0, #2
    3f6c:	f7ff fa4e 	bl	340c <CLKPWR_GetPCLK>
    3f70:	4607      	mov	r7, r0
	uint64_t clkdlycnt;

	// Get Pclock of timer
	clkdlycnt = (uint64_t) getPClock(timernum);

	clkdlycnt = (clkdlycnt * usec) / 1000000;
    3f72:	fba5 0107 	umull	r0, r1, r5, r7
    3f76:	f244 2240 	movw	r2, #16960	; 0x4240
    3f7a:	f2c0 020f 	movt	r2, #15
    3f7e:	f04f 0300 	mov.w	r3, #0
    3f82:	f00f ffad 	bl	13ee0 <__aeabi_uldivmod>
		{
			TIMx->PR   = pTimeCfg->PrescaleValue -1  ;
		}
		else
		{
			TIMx->PR   = converUSecToVal (converPtrToTimeNum(TIMx),pTimeCfg->PrescaleValue)-1;
    3f86:	f100 30ff 	add.w	r0, r0, #4294967295
    3f8a:	60e0      	str	r0, [r4, #12]
    3f8c:	e00a      	b.n	3fa4 <TIM_Init+0x1a0>
	}
	else
	{

		pCounterCfg = (TIM_COUNTERCFG_Type *)TIM_ConfigStruct;
		TIMx->CCR  &= ~TIM_CTCR_INPUT_MASK;
    3f8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3f90:	f023 030c 	bic.w	r3, r3, #12
    3f94:	62a3      	str	r3, [r4, #40]	; 0x28
		if (pCounterCfg->CountInputSelect == TIM_COUNTER_INCAP1)
    3f96:	7873      	ldrb	r3, [r6, #1]
    3f98:	2b01      	cmp	r3, #1
			TIMx->CCR |= _BIT(2);
    3f9a:	bf02      	ittt	eq
    3f9c:	6aa3      	ldreq	r3, [r4, #40]	; 0x28
    3f9e:	f043 0304 	orreq.w	r3, r3, #4
    3fa2:	62a3      	streq	r3, [r4, #40]	; 0x28
	}

	// Clear interrupt pending
	TIMx->IR = 0xFFFFFFFF;
    3fa4:	f04f 33ff 	mov.w	r3, #4294967295
    3fa8:	6023      	str	r3, [r4, #0]

}
    3faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		{
			TIMx->PR   = pTimeCfg->PrescaleValue -1  ;
		}
		else
		{
			TIMx->PR   = converUSecToVal (converPtrToTimeNum(TIMx),pTimeCfg->PrescaleValue)-1;
    3fac:	6875      	ldr	r5, [r6, #4]
	case 0:
		clkdlycnt = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_TIMER0);
		break;

	case 1:
		clkdlycnt = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_TIMER1);
    3fae:	f04f 0004 	mov.w	r0, #4
    3fb2:	f7ff fa2b 	bl	340c <CLKPWR_GetPCLK>
    3fb6:	4607      	mov	r7, r0
    3fb8:	e7db      	b.n	3f72 <TIM_Init+0x16e>
		{
			TIMx->PR   = pTimeCfg->PrescaleValue -1  ;
		}
		else
		{
			TIMx->PR   = converUSecToVal (converPtrToTimeNum(TIMx),pTimeCfg->PrescaleValue)-1;
    3fba:	6875      	ldr	r5, [r6, #4]
	case 1:
		clkdlycnt = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_TIMER1);
		break;

	case 2:
		clkdlycnt = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_TIMER2);
    3fbc:	f04f 002c 	mov.w	r0, #44	; 0x2c
    3fc0:	f7ff fa24 	bl	340c <CLKPWR_GetPCLK>
    3fc4:	4607      	mov	r7, r0
    3fc6:	e7d4      	b.n	3f72 <TIM_Init+0x16e>
		{
			TIMx->PR   = pTimeCfg->PrescaleValue -1  ;
		}
		else
		{
			TIMx->PR   = converUSecToVal (converPtrToTimeNum(TIMx),pTimeCfg->PrescaleValue)-1;
    3fc8:	6875      	ldr	r5, [r6, #4]
	case 2:
		clkdlycnt = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_TIMER2);
		break;

	case 3:
		clkdlycnt = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_TIMER3);
    3fca:	f04f 002e 	mov.w	r0, #46	; 0x2e
    3fce:	f7ff fa1d 	bl	340c <CLKPWR_GetPCLK>
    3fd2:	4607      	mov	r7, r0
    3fd4:	e7cd      	b.n	3f72 <TIM_Init+0x16e>
    3fd6:	bf00      	nop

00003fd8 <TIM_Cmd>:
 * 				-	ENABLE  : set timer enable
 * 				-	DISABLE : disable timer
 * @return 		None
 **********************************************************************/
void TIM_Cmd(LPC_TIM_TypeDef *TIMx, FunctionalState NewState)
{
    3fd8:	b538      	push	{r3, r4, r5, lr}
    3fda:	4604      	mov	r4, r0
    3fdc:	460d      	mov	r5, r1
	CHECK_PARAM(PARAM_TIMx(TIMx));
    3fde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    3fe2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3fe6:	1ac3      	subs	r3, r0, r3
    3fe8:	bf18      	it	ne
    3fea:	2301      	movne	r3, #1
    3fec:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
    3ff0:	bf0c      	ite	eq
    3ff2:	2300      	moveq	r3, #0
    3ff4:	f003 0301 	andne.w	r3, r3, #1
    3ff8:	b1c3      	cbz	r3, 402c <TIM_Cmd+0x54>
    3ffa:	f04f 0300 	mov.w	r3, #0
    3ffe:	f2c4 0309 	movt	r3, #16393	; 0x4009
    4002:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    4006:	f2c4 0209 	movt	r2, #16393	; 0x4009
    400a:	1a82      	subs	r2, r0, r2
    400c:	bf18      	it	ne
    400e:	2201      	movne	r2, #1
    4010:	4298      	cmp	r0, r3
    4012:	bf0c      	ite	eq
    4014:	2300      	moveq	r3, #0
    4016:	f002 0301 	andne.w	r3, r2, #1
    401a:	b13b      	cbz	r3, 402c <TIM_Cmd+0x54>
    401c:	f646 70f4 	movw	r0, #28660	; 0x6ff4
    4020:	f2c0 0002 	movt	r0, #2
    4024:	f44f 71cd 	mov.w	r1, #410	; 0x19a
    4028:	f7ff fa7a 	bl	3520 <check_failed>
	if (NewState == ENABLE)
    402c:	2d01      	cmp	r5, #1
	{
		TIMx->TCR	|=  TIM_ENABLE;
    402e:	6863      	ldr	r3, [r4, #4]
    4030:	bf0c      	ite	eq
    4032:	f043 0301 	orreq.w	r3, r3, #1
	}
	else
	{
		TIMx->TCR &= ~TIM_ENABLE;
    4036:	f023 0301 	bicne.w	r3, r3, #1
    403a:	6063      	str	r3, [r4, #4]
    403c:	bd38      	pop	{r3, r4, r5, pc}
    403e:	bf00      	nop

00004040 <TIM_ResetCounter>:
 * 				- LPC_TIM2: TIMER2 peripheral
 * 				- LPC_TIM3: TIMER3 peripheral
 * @return 		None
 **********************************************************************/
void TIM_ResetCounter(LPC_TIM_TypeDef *TIMx)
{
    4040:	b510      	push	{r4, lr}
    4042:	4604      	mov	r4, r0
	CHECK_PARAM(PARAM_TIMx(TIMx));
    4044:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    4048:	f2c4 0300 	movt	r3, #16384	; 0x4000
    404c:	1ac3      	subs	r3, r0, r3
    404e:	bf18      	it	ne
    4050:	2301      	movne	r3, #1
    4052:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
    4056:	bf0c      	ite	eq
    4058:	2300      	moveq	r3, #0
    405a:	f003 0301 	andne.w	r3, r3, #1
    405e:	b1c3      	cbz	r3, 4092 <TIM_ResetCounter+0x52>
    4060:	f04f 0300 	mov.w	r3, #0
    4064:	f2c4 0309 	movt	r3, #16393	; 0x4009
    4068:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    406c:	f2c4 0209 	movt	r2, #16393	; 0x4009
    4070:	1a82      	subs	r2, r0, r2
    4072:	bf18      	it	ne
    4074:	2201      	movne	r2, #1
    4076:	4298      	cmp	r0, r3
    4078:	bf0c      	ite	eq
    407a:	2300      	moveq	r3, #0
    407c:	f002 0301 	andne.w	r3, r2, #1
    4080:	b13b      	cbz	r3, 4092 <TIM_ResetCounter+0x52>
    4082:	f646 70f4 	movw	r0, #28660	; 0x6ff4
    4086:	f2c0 0002 	movt	r0, #2
    408a:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
    408e:	f7ff fa47 	bl	3520 <check_failed>
	TIMx->TCR |= TIM_RESET;
    4092:	6863      	ldr	r3, [r4, #4]
    4094:	f043 0302 	orr.w	r3, r3, #2
    4098:	6063      	str	r3, [r4, #4]
	TIMx->TCR &= ~TIM_RESET;
    409a:	6863      	ldr	r3, [r4, #4]
    409c:	f023 0302 	bic.w	r3, r3, #2
    40a0:	6063      	str	r3, [r4, #4]
}
    40a2:	bd10      	pop	{r4, pc}

000040a4 <TIM_ConfigMatch>:
 *						 + 	 3: Toggle external output pin if match
 *					MatchValue: Set the value to be compared with TC value
 * @return 		None
 **********************************************************************/
void TIM_ConfigMatch(LPC_TIM_TypeDef *TIMx, TIM_MATCHCFG_Type *TIM_MatchConfigStruct)
{
    40a4:	b538      	push	{r3, r4, r5, lr}
    40a6:	4604      	mov	r4, r0
    40a8:	460d      	mov	r5, r1

	CHECK_PARAM(PARAM_TIMx(TIMx));
    40aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    40ae:	f2c4 0300 	movt	r3, #16384	; 0x4000
    40b2:	1ac3      	subs	r3, r0, r3
    40b4:	bf18      	it	ne
    40b6:	2301      	movne	r3, #1
    40b8:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
    40bc:	bf0c      	ite	eq
    40be:	2300      	moveq	r3, #0
    40c0:	f003 0301 	andne.w	r3, r3, #1
    40c4:	b1c3      	cbz	r3, 40f8 <TIM_ConfigMatch+0x54>
    40c6:	f04f 0300 	mov.w	r3, #0
    40ca:	f2c4 0309 	movt	r3, #16393	; 0x4009
    40ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    40d2:	f2c4 0209 	movt	r2, #16393	; 0x4009
    40d6:	1a82      	subs	r2, r0, r2
    40d8:	bf18      	it	ne
    40da:	2201      	movne	r2, #1
    40dc:	4298      	cmp	r0, r3
    40de:	bf0c      	ite	eq
    40e0:	2300      	moveq	r3, #0
    40e2:	f002 0301 	andne.w	r3, r2, #1
    40e6:	b13b      	cbz	r3, 40f8 <TIM_ConfigMatch+0x54>
    40e8:	f646 70f4 	movw	r0, #28660	; 0x6ff4
    40ec:	f2c0 0002 	movt	r0, #2
    40f0:	f240 11d1 	movw	r1, #465	; 0x1d1
    40f4:	f7ff fa14 	bl	3520 <check_failed>
	CHECK_PARAM(PARAM_TIM_EXTMATCH_OPT(TIM_MatchConfigStruct->ExtMatchOutputType));
    40f8:	792b      	ldrb	r3, [r5, #4]
    40fa:	2b03      	cmp	r3, #3
    40fc:	d907      	bls.n	410e <TIM_ConfigMatch+0x6a>
    40fe:	f646 70f4 	movw	r0, #28660	; 0x6ff4
    4102:	f2c0 0002 	movt	r0, #2
    4106:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
    410a:	f7ff fa09 	bl	3520 <check_failed>

	switch(TIM_MatchConfigStruct->MatchChannel)
    410e:	782b      	ldrb	r3, [r5, #0]
    4110:	2b03      	cmp	r3, #3
    4112:	d80f      	bhi.n	4134 <TIM_ConfigMatch+0x90>
    4114:	e8df f003 	tbb	[pc, r3]
    4118:	0b080502 	.word	0x0b080502
	{
	case 0:
		TIMx->MR0 = TIM_MatchConfigStruct->MatchValue;
    411c:	68ab      	ldr	r3, [r5, #8]
    411e:	61a3      	str	r3, [r4, #24]
		break;
    4120:	e009      	b.n	4136 <TIM_ConfigMatch+0x92>
	case 1:
		TIMx->MR1 = TIM_MatchConfigStruct->MatchValue;
    4122:	68ab      	ldr	r3, [r5, #8]
    4124:	61e3      	str	r3, [r4, #28]
		break;
    4126:	e006      	b.n	4136 <TIM_ConfigMatch+0x92>
	case 2:
		TIMx->MR2 = TIM_MatchConfigStruct->MatchValue;
    4128:	68ab      	ldr	r3, [r5, #8]
    412a:	6223      	str	r3, [r4, #32]
		break;
    412c:	e003      	b.n	4136 <TIM_ConfigMatch+0x92>
	case 3:
		TIMx->MR3 = TIM_MatchConfigStruct->MatchValue;
    412e:	68ab      	ldr	r3, [r5, #8]
    4130:	6263      	str	r3, [r4, #36]	; 0x24
		break;
    4132:	e000      	b.n	4136 <TIM_ConfigMatch+0x92>
    4134:	e7fe      	b.n	4134 <TIM_ConfigMatch+0x90>
		//Error match value
		//Error loop
		while(1);
	}
	//interrupt on MRn
	TIMx->MCR &=~TIM_MCR_CHANNEL_MASKBIT(TIM_MatchConfigStruct->MatchChannel);
    4136:	6962      	ldr	r2, [r4, #20]
    4138:	782b      	ldrb	r3, [r5, #0]
    413a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    413e:	f04f 0107 	mov.w	r1, #7
    4142:	fa01 f303 	lsl.w	r3, r1, r3
    4146:	ea22 0303 	bic.w	r3, r2, r3
    414a:	6163      	str	r3, [r4, #20]

	if (TIM_MatchConfigStruct->IntOnMatch)
    414c:	786b      	ldrb	r3, [r5, #1]
    414e:	b14b      	cbz	r3, 4164 <TIM_ConfigMatch+0xc0>
		TIMx->MCR |= TIM_INT_ON_MATCH(TIM_MatchConfigStruct->MatchChannel);
    4150:	6962      	ldr	r2, [r4, #20]
    4152:	782b      	ldrb	r3, [r5, #0]
    4154:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4158:	f04f 0101 	mov.w	r1, #1
    415c:	fa01 f303 	lsl.w	r3, r1, r3
    4160:	4313      	orrs	r3, r2
    4162:	6163      	str	r3, [r4, #20]

	//reset on MRn
	if (TIM_MatchConfigStruct->ResetOnMatch)
    4164:	78eb      	ldrb	r3, [r5, #3]
    4166:	b15b      	cbz	r3, 4180 <TIM_ConfigMatch+0xdc>
		TIMx->MCR |= TIM_RESET_ON_MATCH(TIM_MatchConfigStruct->MatchChannel);
    4168:	6962      	ldr	r2, [r4, #20]
    416a:	782b      	ldrb	r3, [r5, #0]
    416c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4170:	f103 0301 	add.w	r3, r3, #1
    4174:	f04f 0101 	mov.w	r1, #1
    4178:	fa01 f303 	lsl.w	r3, r1, r3
    417c:	4313      	orrs	r3, r2
    417e:	6163      	str	r3, [r4, #20]

	//stop on MRn
	if (TIM_MatchConfigStruct->StopOnMatch)
    4180:	78ab      	ldrb	r3, [r5, #2]
    4182:	b15b      	cbz	r3, 419c <TIM_ConfigMatch+0xf8>
		TIMx->MCR |= TIM_STOP_ON_MATCH(TIM_MatchConfigStruct->MatchChannel);
    4184:	6962      	ldr	r2, [r4, #20]
    4186:	782b      	ldrb	r3, [r5, #0]
    4188:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    418c:	f103 0302 	add.w	r3, r3, #2
    4190:	f04f 0101 	mov.w	r1, #1
    4194:	fa01 f303 	lsl.w	r3, r1, r3
    4198:	4313      	orrs	r3, r2
    419a:	6163      	str	r3, [r4, #20]

	// match output type

	TIMx->EMR 	&= ~TIM_EM_MASK(TIM_MatchConfigStruct->MatchChannel);
    419c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    419e:	782a      	ldrb	r2, [r5, #0]
    41a0:	ea4f 0242 	mov.w	r2, r2, lsl #1
    41a4:	f102 0204 	add.w	r2, r2, #4
    41a8:	f04f 0103 	mov.w	r1, #3
    41ac:	fa01 f202 	lsl.w	r2, r1, r2
    41b0:	ea23 0302 	bic.w	r3, r3, r2
    41b4:	63e3      	str	r3, [r4, #60]	; 0x3c
	TIMx->EMR   |= TIM_EM_SET(TIM_MatchConfigStruct->MatchChannel,TIM_MatchConfigStruct->ExtMatchOutputType);
    41b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    41b8:	7929      	ldrb	r1, [r5, #4]
    41ba:	f001 0103 	and.w	r1, r1, #3
    41be:	782a      	ldrb	r2, [r5, #0]
    41c0:	ea4f 0242 	mov.w	r2, r2, lsl #1
    41c4:	f102 0204 	add.w	r2, r2, #4
    41c8:	fa01 f202 	lsl.w	r2, r1, r2
    41cc:	4313      	orrs	r3, r2
    41ce:	63e3      	str	r3, [r4, #60]	; 0x3c
}
    41d0:	bd38      	pop	{r3, r4, r5, pc}
    41d2:	bf00      	nop

000041d4 <TIM_UpdateMatchValue>:
 * @param[in]	MatchChannel	Match channel, should be: 0..3
 * @param[in]	MatchValue		updated match value
 * @return 		None
 **********************************************************************/
void TIM_UpdateMatchValue(LPC_TIM_TypeDef *TIMx,uint8_t MatchChannel, uint32_t MatchValue)
{
    41d4:	b570      	push	{r4, r5, r6, lr}
    41d6:	4604      	mov	r4, r0
    41d8:	460e      	mov	r6, r1
    41da:	4615      	mov	r5, r2
	CHECK_PARAM(PARAM_TIMx(TIMx));
    41dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    41e0:	f2c4 0300 	movt	r3, #16384	; 0x4000
    41e4:	1ac3      	subs	r3, r0, r3
    41e6:	bf18      	it	ne
    41e8:	2301      	movne	r3, #1
    41ea:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
    41ee:	bf0c      	ite	eq
    41f0:	2300      	moveq	r3, #0
    41f2:	f003 0301 	andne.w	r3, r3, #1
    41f6:	b1c3      	cbz	r3, 422a <TIM_UpdateMatchValue+0x56>
    41f8:	f04f 0300 	mov.w	r3, #0
    41fc:	f2c4 0309 	movt	r3, #16393	; 0x4009
    4200:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    4204:	f2c4 0209 	movt	r2, #16393	; 0x4009
    4208:	1a82      	subs	r2, r0, r2
    420a:	bf18      	it	ne
    420c:	2201      	movne	r2, #1
    420e:	4298      	cmp	r0, r3
    4210:	bf0c      	ite	eq
    4212:	2300      	moveq	r3, #0
    4214:	f002 0301 	andne.w	r3, r2, #1
    4218:	b13b      	cbz	r3, 422a <TIM_UpdateMatchValue+0x56>
    421a:	f646 70f4 	movw	r0, #28660	; 0x6ff4
    421e:	f2c0 0002 	movt	r0, #2
    4222:	f240 2107 	movw	r1, #519	; 0x207
    4226:	f7ff f97b 	bl	3520 <check_failed>
	switch(MatchChannel)
    422a:	2e03      	cmp	r6, #3
    422c:	d80b      	bhi.n	4246 <TIM_UpdateMatchValue+0x72>
    422e:	e8df f006 	tbb	[pc, r6]
    4232:	0402      	.short	0x0402
    4234:	0806      	.short	0x0806
	{
	case 0:
		TIMx->MR0 = MatchValue;
    4236:	61a5      	str	r5, [r4, #24]
		break;
    4238:	bd70      	pop	{r4, r5, r6, pc}
	case 1:
		TIMx->MR1 = MatchValue;
    423a:	61e5      	str	r5, [r4, #28]
		break;
    423c:	bd70      	pop	{r4, r5, r6, pc}
	case 2:
		TIMx->MR2 = MatchValue;
    423e:	6225      	str	r5, [r4, #32]
		break;
    4240:	bd70      	pop	{r4, r5, r6, pc}
	case 3:
		TIMx->MR3 = MatchValue;
    4242:	6265      	str	r5, [r4, #36]	; 0x24
		break;
    4244:	bd70      	pop	{r4, r5, r6, pc}
    4246:	e7fe      	b.n	4246 <TIM_UpdateMatchValue+0x72>

00004248 <UART_Init>:
*                    that contains the configuration information for the
*                    specified UART peripheral.
 * @return 		None
 *********************************************************************/
void UART_Init(LPC_UART_TypeDef *UARTx, UART_CFG_Type *UART_ConfigStruct)
{
    4248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    424c:	b08d      	sub	sp, #52	; 0x34
    424e:	9006      	str	r0, [sp, #24]
    4250:	910a      	str	r1, [sp, #40]	; 0x28
	uint32_t tmp;

	// For debug mode
	CHECK_PARAM(PARAM_UARTx(UARTx));
    4252:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    4256:	f2c4 0300 	movt	r3, #16384	; 0x4000
    425a:	f04f 0200 	mov.w	r2, #0
    425e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    4262:	1a82      	subs	r2, r0, r2
    4264:	bf18      	it	ne
    4266:	2201      	movne	r2, #1
    4268:	4298      	cmp	r0, r3
    426a:	bf0c      	ite	eq
    426c:	2300      	moveq	r3, #0
    426e:	f002 0301 	andne.w	r3, r2, #1
    4272:	b1c3      	cbz	r3, 42a6 <UART_Init+0x5e>
    4274:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    4278:	f2c4 0309 	movt	r3, #16393	; 0x4009
    427c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    4280:	f2c4 0209 	movt	r2, #16393	; 0x4009
    4284:	1a82      	subs	r2, r0, r2
    4286:	bf18      	it	ne
    4288:	2201      	movne	r2, #1
    428a:	4298      	cmp	r0, r3
    428c:	bf0c      	ite	eq
    428e:	2300      	moveq	r3, #0
    4290:	f002 0301 	andne.w	r3, r2, #1
    4294:	b13b      	cbz	r3, 42a6 <UART_Init+0x5e>
    4296:	f247 002c 	movw	r0, #28716	; 0x702c
    429a:	f2c0 0002 	movt	r0, #2
    429e:	f04f 01ca 	mov.w	r1, #202	; 0xca
    42a2:	f7ff f93d 	bl	3520 <check_failed>
	CHECK_PARAM(PARAM_UART_DATABIT(UART_ConfigStruct->Databits));
    42a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    42a8:	7963      	ldrb	r3, [r4, #5]
    42aa:	2b03      	cmp	r3, #3
    42ac:	d907      	bls.n	42be <UART_Init+0x76>
    42ae:	f247 002c 	movw	r0, #28716	; 0x702c
    42b2:	f2c0 0002 	movt	r0, #2
    42b6:	f04f 01cb 	mov.w	r1, #203	; 0xcb
    42ba:	f7ff f931 	bl	3520 <check_failed>
	CHECK_PARAM(PARAM_UART_STOPBIT(UART_ConfigStruct->Stopbits));
    42be:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    42c0:	79a3      	ldrb	r3, [r4, #6]
    42c2:	2b01      	cmp	r3, #1
    42c4:	d907      	bls.n	42d6 <UART_Init+0x8e>
    42c6:	f247 002c 	movw	r0, #28716	; 0x702c
    42ca:	f2c0 0002 	movt	r0, #2
    42ce:	f04f 01cc 	mov.w	r1, #204	; 0xcc
    42d2:	f7ff f925 	bl	3520 <check_failed>
	CHECK_PARAM(PARAM_UART_PARITY(UART_ConfigStruct->Parity));
    42d6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    42d8:	7923      	ldrb	r3, [r4, #4]
    42da:	2b04      	cmp	r3, #4
    42dc:	d907      	bls.n	42ee <UART_Init+0xa6>
    42de:	f247 002c 	movw	r0, #28716	; 0x702c
    42e2:	f2c0 0002 	movt	r0, #2
    42e6:	f04f 01cd 	mov.w	r1, #205	; 0xcd
    42ea:	f7ff f919 	bl	3520 <check_failed>

#ifdef _UART0
	if(UARTx == LPC_UART0)
    42ee:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    42f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    42f6:	9c06      	ldr	r4, [sp, #24]
    42f8:	429c      	cmp	r4, r3
    42fa:	d106      	bne.n	430a <UART_Init+0xc2>
	{
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART0, ENABLE);
    42fc:	f04f 0008 	mov.w	r0, #8
    4300:	f04f 0101 	mov.w	r1, #1
    4304:	f7ff f898 	bl	3438 <CLKPWR_ConfigPPWR>
    4308:	e01b      	b.n	4342 <UART_Init+0xfa>
	}
#endif

#ifdef _UART1
	if(((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    430a:	f04f 0300 	mov.w	r3, #0
    430e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    4312:	9c06      	ldr	r4, [sp, #24]
    4314:	429c      	cmp	r4, r3
    4316:	d106      	bne.n	4326 <UART_Init+0xde>
	{
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART1, ENABLE);
    4318:	f04f 0010 	mov.w	r0, #16
    431c:	f04f 0101 	mov.w	r1, #1
    4320:	f7ff f88a 	bl	3438 <CLKPWR_ConfigPPWR>
    4324:	e01b      	b.n	435e <UART_Init+0x116>
	}
#endif

#ifdef _UART2
	if(UARTx == LPC_UART2)
    4326:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    432a:	f2c4 0309 	movt	r3, #16393	; 0x4009
    432e:	9c06      	ldr	r4, [sp, #24]
    4330:	429c      	cmp	r4, r3
    4332:	d106      	bne.n	4342 <UART_Init+0xfa>
	{
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART2, ENABLE);
    4334:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    4338:	f04f 0101 	mov.w	r1, #1
    433c:	f7ff f87c 	bl	3438 <CLKPWR_ConfigPPWR>
    4340:	e046      	b.n	43d0 <UART_Init+0x188>
	}
#endif

#ifdef _UART3
	if(UARTx == LPC_UART3)
    4342:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    4346:	f2c4 0309 	movt	r3, #16393	; 0x4009
    434a:	9c06      	ldr	r4, [sp, #24]
    434c:	429c      	cmp	r4, r3
    434e:	d106      	bne.n	435e <UART_Init+0x116>
	{
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART3, ENABLE);
    4350:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    4354:	f04f 0101 	mov.w	r1, #1
    4358:	f7ff f86e 	bl	3438 <CLKPWR_ConfigPPWR>
    435c:	e038      	b.n	43d0 <UART_Init+0x188>
	}
#endif

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    435e:	f04f 0300 	mov.w	r3, #0
    4362:	f2c4 0301 	movt	r3, #16385	; 0x4001
    4366:	9c06      	ldr	r4, [sp, #24]
    4368:	429c      	cmp	r4, r3
    436a:	d131      	bne.n	43d0 <UART_Init+0x188>
	{
		/* FIFOs are empty */
		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = ( UART_FCR_FIFO_EN \
    436c:	f04f 0300 	mov.w	r3, #0
    4370:	f2c4 0301 	movt	r3, #16385	; 0x4001
    4374:	f04f 0207 	mov.w	r2, #7
    4378:	721a      	strb	r2, [r3, #8]
				| UART_FCR_RX_RS | UART_FCR_TX_RS);
		// Disable FIFO
		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = 0;
    437a:	f04f 0200 	mov.w	r2, #0
    437e:	721a      	strb	r2, [r3, #8]

		// Dummy reading
		while (((LPC_UART1_TypeDef *)UARTx)->LSR & UART_LSR_RDR)
    4380:	7d1b      	ldrb	r3, [r3, #20]
    4382:	f013 0f01 	tst.w	r3, #1
    4386:	d007      	beq.n	4398 <UART_Init+0x150>
		{
			tmp = ((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/RBR;
    4388:	4613      	mov	r3, r2
    438a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    438e:	781a      	ldrb	r2, [r3, #0]
				| UART_FCR_RX_RS | UART_FCR_TX_RS);
		// Disable FIFO
		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = 0;

		// Dummy reading
		while (((LPC_UART1_TypeDef *)UARTx)->LSR & UART_LSR_RDR)
    4390:	7d1a      	ldrb	r2, [r3, #20]
    4392:	f012 0f01 	tst.w	r2, #1
    4396:	d1fa      	bne.n	438e <UART_Init+0x146>
		{
			tmp = ((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/RBR;
		}

		((LPC_UART1_TypeDef *)UARTx)->TER = UART_TER_TXEN;
    4398:	f04f 0380 	mov.w	r3, #128	; 0x80
    439c:	9c06      	ldr	r4, [sp, #24]
    439e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    43a2:	4622      	mov	r2, r4
		// Wait for current transmit complete
		while (!(((LPC_UART1_TypeDef *)UARTx)->LSR & UART_LSR_THRE));
    43a4:	7d13      	ldrb	r3, [r2, #20]
    43a6:	f013 0f20 	tst.w	r3, #32
    43aa:	d0fb      	beq.n	43a4 <UART_Init+0x15c>
		// Disable Tx
		((LPC_UART1_TypeDef *)UARTx)->TER = 0;
    43ac:	f04f 0300 	mov.w	r3, #0
    43b0:	9c06      	ldr	r4, [sp, #24]
    43b2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

		// Disable interrupt
		((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/IER = 0;
    43b6:	6063      	str	r3, [r4, #4]
		// Set LCR to default state
		((LPC_UART1_TypeDef *)UARTx)->LCR = 0;
    43b8:	7323      	strb	r3, [r4, #12]
		// Set ACR to default state
		((LPC_UART1_TypeDef *)UARTx)->ACR = 0;
    43ba:	6223      	str	r3, [r4, #32]
		// Set Modem Control to default state
		((LPC_UART1_TypeDef *)UARTx)->MCR = 0;
    43bc:	7423      	strb	r3, [r4, #16]
		// Set RS485 control to default state
		((LPC_UART1_TypeDef *)UARTx)->RS485CTRL = 0;
    43be:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
		// Set RS485 delay timer to default state
		((LPC_UART1_TypeDef *)UARTx)->RS485DLY = 0;
    43c2:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
		// Set RS485 addr match to default state
		((LPC_UART1_TypeDef *)UARTx)->ADRMATCH = 0;
    43c6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
		//Dummy Reading to Clear Status
		tmp = ((LPC_UART1_TypeDef *)UARTx)->MSR;
    43ca:	7e23      	ldrb	r3, [r4, #24]
		tmp = ((LPC_UART1_TypeDef *)UARTx)->LSR;
    43cc:	7d23      	ldrb	r3, [r4, #20]
    43ce:	e023      	b.n	4418 <UART_Init+0x1d0>
	}
	else
	{
		/* FIFOs are empty */
		UARTx->/*IIFCR.*/FCR = ( UART_FCR_FIFO_EN | UART_FCR_RX_RS | UART_FCR_TX_RS);
    43d0:	f04f 0307 	mov.w	r3, #7
    43d4:	9c06      	ldr	r4, [sp, #24]
    43d6:	7223      	strb	r3, [r4, #8]
		// Disable FIFO
		UARTx->/*IIFCR.*/FCR = 0;
    43d8:	f04f 0300 	mov.w	r3, #0
    43dc:	7223      	strb	r3, [r4, #8]

		// Dummy reading
		while (UARTx->LSR & UART_LSR_RDR)
    43de:	7d23      	ldrb	r3, [r4, #20]
    43e0:	f013 0f01 	tst.w	r3, #1
    43e4:	d005      	beq.n	43f2 <UART_Init+0x1aa>
    43e6:	4623      	mov	r3, r4
		{
			tmp = UARTx->/*RBTHDLR.*/RBR;
    43e8:	781a      	ldrb	r2, [r3, #0]
		UARTx->/*IIFCR.*/FCR = ( UART_FCR_FIFO_EN | UART_FCR_RX_RS | UART_FCR_TX_RS);
		// Disable FIFO
		UARTx->/*IIFCR.*/FCR = 0;

		// Dummy reading
		while (UARTx->LSR & UART_LSR_RDR)
    43ea:	7d1a      	ldrb	r2, [r3, #20]
    43ec:	f012 0f01 	tst.w	r2, #1
    43f0:	d1fa      	bne.n	43e8 <UART_Init+0x1a0>
		{
			tmp = UARTx->/*RBTHDLR.*/RBR;
		}

		UARTx->TER = UART_TER_TXEN;
    43f2:	f04f 0380 	mov.w	r3, #128	; 0x80
    43f6:	9c06      	ldr	r4, [sp, #24]
    43f8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    43fc:	4622      	mov	r2, r4
		// Wait for current transmit complete
		while (!(UARTx->LSR & UART_LSR_THRE));
    43fe:	7d13      	ldrb	r3, [r2, #20]
    4400:	f013 0f20 	tst.w	r3, #32
    4404:	d0fb      	beq.n	43fe <UART_Init+0x1b6>
		// Disable Tx
		UARTx->TER = 0;
    4406:	f04f 0300 	mov.w	r3, #0
    440a:	9c06      	ldr	r4, [sp, #24]
    440c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

		// Disable interrupt
		UARTx->/*DLIER.*/IER = 0;
    4410:	6063      	str	r3, [r4, #4]
		// Set LCR to default state
		UARTx->LCR = 0;
    4412:	7323      	strb	r3, [r4, #12]
		// Set ACR to default state
		UARTx->ACR = 0;
    4414:	6223      	str	r3, [r4, #32]
		// Dummy reading
		tmp = UARTx->LSR;
    4416:	7d23      	ldrb	r3, [r4, #20]
	}

	if (UARTx == LPC_UART3)
    4418:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    441c:	f2c4 0309 	movt	r3, #16393	; 0x4009
    4420:	9c06      	ldr	r4, [sp, #24]
    4422:	429c      	cmp	r4, r3
    4424:	d10b      	bne.n	443e <UART_Init+0x1f6>
	{
		// Set IrDA to default state
		UARTx->ICR = 0;
    4426:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    442a:	f2c4 0309 	movt	r3, #16393	; 0x4009
    442e:	f04f 0200 	mov.w	r2, #0
    4432:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}

	// Set Line Control register ----------------------------

	uart_set_divisors(UARTx, (UART_ConfigStruct->Baud_rate));
    4436:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    4438:	f8d4 9000 	ldr.w	r9, [r4]
    443c:	e01c      	b.n	4478 <UART_Init+0x230>
    443e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    4440:	f8d4 9000 	ldr.w	r9, [r4]
	uint64_t best_divisor, divisor;
	uint32_t current_error, best_error;
	uint32_t recalcbaud;

	/* get UART block clock */
	if (UARTx == LPC_UART0)
    4444:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    4448:	f2c4 0300 	movt	r3, #16384	; 0x4000
    444c:	9c06      	ldr	r4, [sp, #24]
    444e:	429c      	cmp	r4, r3
    4450:	d105      	bne.n	445e <UART_Init+0x216>
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART0);
    4452:	f04f 0006 	mov.w	r0, #6
    4456:	f7fe ffd9 	bl	340c <CLKPWR_GetPCLK>
    445a:	900b      	str	r0, [sp, #44]	; 0x2c
    445c:	e025      	b.n	44aa <UART_Init+0x262>
	}
	else if (UARTx == (LPC_UART_TypeDef *)LPC_UART1)
    445e:	f04f 0300 	mov.w	r3, #0
    4462:	f2c4 0301 	movt	r3, #16385	; 0x4001
    4466:	9c06      	ldr	r4, [sp, #24]
    4468:	429c      	cmp	r4, r3
    446a:	d105      	bne.n	4478 <UART_Init+0x230>
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART1);
    446c:	f04f 0008 	mov.w	r0, #8
    4470:	f7fe ffcc 	bl	340c <CLKPWR_GetPCLK>
    4474:	900b      	str	r0, [sp, #44]	; 0x2c
    4476:	e018      	b.n	44aa <UART_Init+0x262>
	}
	else if (UARTx == LPC_UART2)
    4478:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    447c:	f2c4 0309 	movt	r3, #16393	; 0x4009
    4480:	9c06      	ldr	r4, [sp, #24]
    4482:	429c      	cmp	r4, r3
    4484:	d105      	bne.n	4492 <UART_Init+0x24a>
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART2);
    4486:	f04f 0030 	mov.w	r0, #48	; 0x30
    448a:	f7fe ffbf 	bl	340c <CLKPWR_GetPCLK>
    448e:	900b      	str	r0, [sp, #44]	; 0x2c
    4490:	e00b      	b.n	44aa <UART_Init+0x262>
	}
	else if (UARTx == LPC_UART3)
    4492:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    4496:	f2c4 0309 	movt	r3, #16393	; 0x4009
    449a:	9c06      	ldr	r4, [sp, #24]
    449c:	429c      	cmp	r4, r3
    449e:	d104      	bne.n	44aa <UART_Init+0x262>
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART3);
    44a0:	f04f 0032 	mov.w	r0, #50	; 0x32
    44a4:	f7fe ffb2 	bl	340c <CLKPWR_GetPCLK>
    44a8:	900b      	str	r0, [sp, #44]	; 0x2c
	best_divisor = 0;
	for (m = 1 ; m <= 15 ;m++)
	{
		for (d = 0 ; d < m ; d++)
		{
		  divisor = ((uint64_t)uClk<<28)*m/(baudrate*(m+d));
    44aa:	f04f 0300 	mov.w	r3, #0
    44ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    44b0:	ea4f 1212 	mov.w	r2, r2, lsr #4
    44b4:	9209      	str	r2, [sp, #36]	; 0x24
    44b6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    44b8:	ea4f 7404 	mov.w	r4, r4, lsl #28
    44bc:	9408      	str	r4, [sp, #32]
    44be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    44c2:	e9cd 0100 	strd	r0, r1, [sp]
    44c6:	f8cd 901c 	str.w	r9, [sp, #28]
	* 0 < mulFracDiv <= 15, 0 <= dividerAddFracDiv <= 15 */
	best_error = 0xFFFFFFFF; /* Worst case */
	bestd = 0;
	bestm = 0;
	best_divisor = 0;
	for (m = 1 ; m <= 15 ;m++)
    44ca:	f04f 0601 	mov.w	r6, #1
	* BaudRate= uClk * (mulFracDiv/(mulFracDiv+dividerAddFracDiv) / (16 * (DLL)
	* It involves floating point calculations. That's the reason the formulae are adjusted with
	* Multiply and divide method.*/
	/* The value of mulFracDiv and dividerAddFracDiv should comply to the following expressions:
	* 0 < mulFracDiv <= 15, 0 <= dividerAddFracDiv <= 15 */
	best_error = 0xFFFFFFFF; /* Worst case */
    44ce:	f04f 3aff 	mov.w	sl, #4294967295
	bestd = 0;
	bestm = 0;
	best_divisor = 0;
    44d2:	f04f 0000 	mov.w	r0, #0
    44d6:	f04f 0100 	mov.w	r1, #0
    44da:	e9cd 0102 	strd	r0, r1, [sp, #8]
	* Multiply and divide method.*/
	/* The value of mulFracDiv and dividerAddFracDiv should comply to the following expressions:
	* 0 < mulFracDiv <= 15, 0 <= dividerAddFracDiv <= 15 */
	best_error = 0xFFFFFFFF; /* Worst case */
	bestd = 0;
	bestm = 0;
    44de:	9305      	str	r3, [sp, #20]
	* It involves floating point calculations. That's the reason the formulae are adjusted with
	* Multiply and divide method.*/
	/* The value of mulFracDiv and dividerAddFracDiv should comply to the following expressions:
	* 0 < mulFracDiv <= 15, 0 <= dividerAddFracDiv <= 15 */
	best_error = 0xFFFFFFFF; /* Worst case */
	bestd = 0;
    44e0:	9304      	str	r3, [sp, #16]
		  if(current_error > ((uint32_t)1<<31)){
			current_error = -current_error;
			tmp++;
			}

		  if(tmp<1 || tmp>65536) /* Out of range */
    44e2:	f64f 77ff 	movw	r7, #65535	; 0xffff
	best_divisor = 0;
	for (m = 1 ; m <= 15 ;m++)
	{
		for (d = 0 ; d < m ; d++)
		{
		  divisor = ((uint64_t)uClk<<28)*m/(baudrate*(m+d));
    44e6:	4698      	mov	r8, r3
    44e8:	e037      	b.n	455a <UART_Init+0x312>
	bestd = 0;
	bestm = 0;
	best_divisor = 0;
	for (m = 1 ; m <= 15 ;m++)
	{
		for (d = 0 ; d < m ; d++)
    44ea:	9c07      	ldr	r4, [sp, #28]
    44ec:	f04f 0500 	mov.w	r5, #0
		  if( current_error < best_error){
			best_error = current_error;
			best_divisor = tmp;
			bestd = d;
			bestm = m;
			if(best_error == 0) break;
    44f0:	46b3      	mov	fp, r6
	best_divisor = 0;
	for (m = 1 ; m <= 15 ;m++)
	{
		for (d = 0 ; d < m ; d++)
		{
		  divisor = ((uint64_t)uClk<<28)*m/(baudrate*(m+d));
    44f2:	e9dd 0100 	ldrd	r0, r1, [sp]
    44f6:	4622      	mov	r2, r4
    44f8:	4643      	mov	r3, r8
    44fa:	f00f fcf1 	bl	13ee0 <__aeabi_uldivmod>
		  current_error = divisor & 0xFFFFFFFF;
    44fe:	4602      	mov	r2, r0

		  tmp = divisor>>32;
    4500:	460b      	mov	r3, r1

		  /* Adjust error */
		  if(current_error > ((uint32_t)1<<31)){
    4502:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
			current_error = -current_error;
    4506:	bf84      	itt	hi
    4508:	4242      	neghi	r2, r0
			tmp++;
    450a:	1c4b      	addhi	r3, r1, #1
			}

		  if(tmp<1 || tmp>65536) /* Out of range */
    450c:	f103 31ff 	add.w	r1, r3, #4294967295
    4510:	42b9      	cmp	r1, r7
    4512:	d80a      	bhi.n	452a <UART_Init+0x2e2>
		  continue;

		  if( current_error < best_error){
    4514:	4552      	cmp	r2, sl
    4516:	d208      	bcs.n	452a <UART_Init+0x2e2>
			best_error = current_error;
			best_divisor = tmp;
    4518:	9302      	str	r3, [sp, #8]
    451a:	f04f 0100 	mov.w	r1, #0
    451e:	9103      	str	r1, [sp, #12]
			bestd = d;
			bestm = m;
			if(best_error == 0) break;
    4520:	b31a      	cbz	r2, 456a <UART_Init+0x322>

		  if(tmp<1 || tmp>65536) /* Out of range */
		  continue;

		  if( current_error < best_error){
			best_error = current_error;
    4522:	4692      	mov	sl, r2
			best_divisor = tmp;
			bestd = d;
			bestm = m;
			if(best_error == 0) break;
    4524:	f8cd b014 	str.w	fp, [sp, #20]
    4528:	9504      	str	r5, [sp, #16]
	bestd = 0;
	bestm = 0;
	best_divisor = 0;
	for (m = 1 ; m <= 15 ;m++)
	{
		for (d = 0 ; d < m ; d++)
    452a:	f105 0501 	add.w	r5, r5, #1
    452e:	444c      	add	r4, r9
    4530:	42b5      	cmp	r5, r6
    4532:	d1de      	bne.n	44f2 <UART_Init+0x2aa>
			bestm = m;
			if(best_error == 0) break;
			}
		} /* end of inner for loop */

		if (best_error == 0)
    4534:	f1ba 0f00 	cmp.w	sl, #0
    4538:	d012      	beq.n	4560 <UART_Init+0x318>
	* 0 < mulFracDiv <= 15, 0 <= dividerAddFracDiv <= 15 */
	best_error = 0xFFFFFFFF; /* Worst case */
	bestd = 0;
	bestm = 0;
	best_divisor = 0;
	for (m = 1 ; m <= 15 ;m++)
    453a:	f106 0601 	add.w	r6, r6, #1
    453e:	9c07      	ldr	r4, [sp, #28]
    4540:	444c      	add	r4, r9
    4542:	9407      	str	r4, [sp, #28]
    4544:	e9dd 0100 	ldrd	r0, r1, [sp]
    4548:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    454c:	1880      	adds	r0, r0, r2
    454e:	eb41 0103 	adc.w	r1, r1, r3
    4552:	e9cd 0100 	strd	r0, r1, [sp]
    4556:	2e10      	cmp	r6, #16
    4558:	d005      	beq.n	4566 <UART_Init+0x31e>
	{
		for (d = 0 ; d < m ; d++)
    455a:	2e00      	cmp	r6, #0
    455c:	d1c5      	bne.n	44ea <UART_Init+0x2a2>
    455e:	e7e9      	b.n	4534 <UART_Init+0x2ec>
			bestm = m;
			if(best_error == 0) break;
			}
		} /* end of inner for loop */

		if (best_error == 0)
    4560:	9e05      	ldr	r6, [sp, #20]
    4562:	9d04      	ldr	r5, [sp, #16]
    4564:	e001      	b.n	456a <UART_Init+0x322>
	* 0 < mulFracDiv <= 15, 0 <= dividerAddFracDiv <= 15 */
	best_error = 0xFFFFFFFF; /* Worst case */
	bestd = 0;
	bestm = 0;
	best_divisor = 0;
	for (m = 1 ; m <= 15 ;m++)
    4566:	9e05      	ldr	r6, [sp, #20]
    4568:	9d04      	ldr	r5, [sp, #16]

		if (best_error == 0)
		  break;
	} /* end of outer for loop  */

	if(best_divisor == 0) return ERROR; /* can not find best match */
    456a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    456e:	4301      	orrs	r1, r0
    4570:	d05a      	beq.n	4628 <UART_Init+0x3e0>

	recalcbaud = (uClk>>4) * bestm/(best_divisor * (bestm + bestd));
    4572:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    4574:	ea4f 1014 	mov.w	r0, r4, lsr #4
    4578:	19a9      	adds	r1, r5, r6
    457a:	9c02      	ldr	r4, [sp, #8]
    457c:	fba1 2304 	umull	r2, r3, r1, r4
    4580:	9c03      	ldr	r4, [sp, #12]
    4582:	fb01 3304 	mla	r3, r1, r4, r3
    4586:	fb00 f006 	mul.w	r0, r0, r6
    458a:	f04f 0100 	mov.w	r1, #0
    458e:	f00f fca7 	bl	13ee0 <__aeabi_uldivmod>

	/* reuse best_error to evaluate baud error*/
	if(baudrate>recalcbaud) best_error = baudrate - recalcbaud;
    4592:	4548      	cmp	r0, r9
    4594:	bf34      	ite	cc
    4596:	ebc0 0009 	rsbcc	r0, r0, r9
	else best_error = recalcbaud -baudrate;
    459a:	ebc9 0000 	rsbcs	r0, r9, r0

	best_error = best_error * 100 / baudrate;
    459e:	f04f 0364 	mov.w	r3, #100	; 0x64
    45a2:	fb03 f300 	mul.w	r3, r3, r0
    45a6:	fbb3 f9f9 	udiv	r9, r3, r9

	if (best_error < UART_ACCEPTED_BAUDRATE_ERROR)
    45aa:	f1b9 0f02 	cmp.w	r9, #2
    45ae:	d83b      	bhi.n	4628 <UART_Init+0x3e0>
		{
			if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    45b0:	f04f 0300 	mov.w	r3, #0
    45b4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    45b8:	9c06      	ldr	r4, [sp, #24]
    45ba:	429c      	cmp	r4, r3
    45bc:	d11b      	bne.n	45f6 <UART_Init+0x3ae>
			{
				((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
    45be:	f04f 0300 	mov.w	r3, #0
    45c2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    45c6:	7b1a      	ldrb	r2, [r3, #12]
    45c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    45cc:	731a      	strb	r2, [r3, #12]
				((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
    45ce:	9802      	ldr	r0, [sp, #8]
    45d0:	f3c0 2207 	ubfx	r2, r0, #8, #8
    45d4:	711a      	strb	r2, [r3, #4]
				((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
    45d6:	f89d 1008 	ldrb.w	r1, [sp, #8]
    45da:	b2ca      	uxtb	r2, r1
    45dc:	701a      	strb	r2, [r3, #0]
				/* Then reset DLAB bit */
				((LPC_UART1_TypeDef *)UARTx)->LCR &= (~UART_LCR_DLAB_EN) & UART_LCR_BITMASK;
    45de:	7b1a      	ldrb	r2, [r3, #12]
    45e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    45e4:	731a      	strb	r2, [r3, #12]
				((LPC_UART1_TypeDef *)UARTx)->FDR = (UART_FDR_MULVAL(bestm) \
    45e6:	ea4f 1206 	mov.w	r2, r6, lsl #4
    45ea:	b2d2      	uxtb	r2, r2
						| UART_FDR_DIVADDVAL(bestd)) & UART_FDR_BITMASK;
    45ec:	f005 050f 	and.w	r5, r5, #15
    45f0:	432a      	orrs	r2, r5
				((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
				((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
				((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
				/* Then reset DLAB bit */
				((LPC_UART1_TypeDef *)UARTx)->LCR &= (~UART_LCR_DLAB_EN) & UART_LCR_BITMASK;
				((LPC_UART1_TypeDef *)UARTx)->FDR = (UART_FDR_MULVAL(bestm) \
    45f2:	629a      	str	r2, [r3, #40]	; 0x28
    45f4:	e01f      	b.n	4636 <UART_Init+0x3ee>
						| UART_FDR_DIVADDVAL(bestd)) & UART_FDR_BITMASK;
			}
			else
			{
				UARTx->LCR |= UART_LCR_DLAB_EN;
    45f6:	9c06      	ldr	r4, [sp, #24]
    45f8:	7b23      	ldrb	r3, [r4, #12]
    45fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    45fe:	7323      	strb	r3, [r4, #12]
				UARTx->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
    4600:	9802      	ldr	r0, [sp, #8]
    4602:	f3c0 2307 	ubfx	r3, r0, #8, #8
    4606:	7123      	strb	r3, [r4, #4]
				UARTx->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
    4608:	f89d 1008 	ldrb.w	r1, [sp, #8]
    460c:	b2cb      	uxtb	r3, r1
    460e:	7023      	strb	r3, [r4, #0]
				/* Then reset DLAB bit */
				UARTx->LCR &= (~UART_LCR_DLAB_EN) & UART_LCR_BITMASK;
    4610:	7b23      	ldrb	r3, [r4, #12]
    4612:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4616:	7323      	strb	r3, [r4, #12]
				UARTx->FDR = (UART_FDR_MULVAL(bestm) \
    4618:	f005 030f 	and.w	r3, r5, #15
    461c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
    4620:	b2db      	uxtb	r3, r3
    4622:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    4626:	e00e      	b.n	4646 <UART_Init+0x3fe>

	// Set Line Control register ----------------------------

	uart_set_divisors(UARTx, (UART_ConfigStruct->Baud_rate));

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    4628:	f04f 0300 	mov.w	r3, #0
    462c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    4630:	9c06      	ldr	r4, [sp, #24]
    4632:	429c      	cmp	r4, r3
    4634:	d107      	bne.n	4646 <UART_Init+0x3fe>
	{
		tmp = (((LPC_UART1_TypeDef *)UARTx)->LCR & (UART_LCR_DLAB_EN | UART_LCR_BREAK_EN)) \
    4636:	f04f 0300 	mov.w	r3, #0
    463a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    463e:	7b1b      	ldrb	r3, [r3, #12]
    4640:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    4644:	e003      	b.n	464e <UART_Init+0x406>
				& UART_LCR_BITMASK;
	}
	else
	{
		tmp = (UARTx->LCR & (UART_LCR_DLAB_EN | UART_LCR_BREAK_EN)) & UART_LCR_BITMASK;
    4646:	9c06      	ldr	r4, [sp, #24]
    4648:	7b23      	ldrb	r3, [r4, #12]
    464a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	}

	switch (UART_ConfigStruct->Databits){
    464e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    4650:	7962      	ldrb	r2, [r4, #5]
    4652:	2a01      	cmp	r2, #1
	case UART_DATABIT_5:
		tmp |= UART_LCR_WLEN5;
		break;
	case UART_DATABIT_6:
		tmp |= UART_LCR_WLEN6;
    4654:	bf08      	it	eq
    4656:	f043 0301 	orreq.w	r3, r3, #1
	else
	{
		tmp = (UARTx->LCR & (UART_LCR_DLAB_EN | UART_LCR_BREAK_EN)) & UART_LCR_BITMASK;
	}

	switch (UART_ConfigStruct->Databits){
    465a:	d007      	beq.n	466c <UART_Init+0x424>
    465c:	b132      	cbz	r2, 466c <UART_Init+0x424>
    465e:	2a02      	cmp	r2, #2
	case UART_DATABIT_7:
		tmp |= UART_LCR_WLEN7;
		break;
	case UART_DATABIT_8:
	default:
		tmp |= UART_LCR_WLEN8;
    4660:	bf18      	it	ne
    4662:	f043 0303 	orrne.w	r3, r3, #3
	else
	{
		tmp = (UARTx->LCR & (UART_LCR_DLAB_EN | UART_LCR_BREAK_EN)) & UART_LCR_BITMASK;
	}

	switch (UART_ConfigStruct->Databits){
    4666:	d101      	bne.n	466c <UART_Init+0x424>
		break;
	case UART_DATABIT_6:
		tmp |= UART_LCR_WLEN6;
		break;
	case UART_DATABIT_7:
		tmp |= UART_LCR_WLEN7;
    4668:	f043 0302 	orr.w	r3, r3, #2
	default:
		tmp |= UART_LCR_WLEN8;
		break;
	}

	if (UART_ConfigStruct->Parity == UART_PARITY_NONE)
    466c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    466e:	7922      	ldrb	r2, [r4, #4]
    4670:	b17a      	cbz	r2, 4692 <UART_Init+0x44a>
	{
		// Do nothing...
	}
	else
	{
		tmp |= UART_LCR_PARITY_EN;
    4672:	f043 0308 	orr.w	r3, r3, #8
		switch (UART_ConfigStruct->Parity)
    4676:	2a03      	cmp	r2, #3
		case UART_PARITY_EVEN:
			tmp |= UART_LCR_PARITY_EVEN;
			break;

		case UART_PARITY_SP_1:
			tmp |= UART_LCR_PARITY_F_1;
    4678:	bf08      	it	eq
    467a:	f043 0320 	orreq.w	r3, r3, #32
		// Do nothing...
	}
	else
	{
		tmp |= UART_LCR_PARITY_EN;
		switch (UART_ConfigStruct->Parity)
    467e:	d008      	beq.n	4692 <UART_Init+0x44a>
    4680:	2a04      	cmp	r2, #4
		case UART_PARITY_SP_1:
			tmp |= UART_LCR_PARITY_F_1;
			break;

		case UART_PARITY_SP_0:
			tmp |= UART_LCR_PARITY_F_0;
    4682:	bf08      	it	eq
    4684:	f043 0330 	orreq.w	r3, r3, #48	; 0x30
		// Do nothing...
	}
	else
	{
		tmp |= UART_LCR_PARITY_EN;
		switch (UART_ConfigStruct->Parity)
    4688:	d003      	beq.n	4692 <UART_Init+0x44a>
    468a:	2a02      	cmp	r2, #2
		case UART_PARITY_ODD:
			tmp |= UART_LCR_PARITY_ODD;
			break;

		case UART_PARITY_EVEN:
			tmp |= UART_LCR_PARITY_EVEN;
    468c:	bf08      	it	eq
    468e:	f043 0310 	orreq.w	r3, r3, #16
		default:
			break;
		}
	}

	switch (UART_ConfigStruct->Stopbits){
    4692:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    4694:	79a2      	ldrb	r2, [r4, #6]
    4696:	2a01      	cmp	r2, #1
	case UART_STOPBIT_2:
		tmp |= UART_LCR_STOPBIT_SEL;
    4698:	bf08      	it	eq
    469a:	f043 0304 	orreq.w	r3, r3, #4
		break;
	}


	// Write back to LCR, configure FIFO and Disable Tx
	if (((LPC_UART1_TypeDef *)UARTx) ==  LPC_UART1)
    469e:	f04f 0200 	mov.w	r2, #0
    46a2:	f2c4 0201 	movt	r2, #16385	; 0x4001
    46a6:	9c06      	ldr	r4, [sp, #24]
    46a8:	4294      	cmp	r4, r2
	{
		((LPC_UART1_TypeDef *)UARTx)->LCR = (uint8_t)(tmp & UART_LCR_BITMASK);
    46aa:	b2db      	uxtb	r3, r3
    46ac:	bf03      	ittte	eq
    46ae:	2200      	moveq	r2, #0
    46b0:	f2c4 0201 	movteq	r2, #16385	; 0x4001
    46b4:	7313      	strbeq	r3, [r2, #12]
	}
	else
	{
		UARTx->LCR = (uint8_t)(tmp & UART_LCR_BITMASK);
    46b6:	9c06      	ldrne	r4, [sp, #24]
    46b8:	bf18      	it	ne
    46ba:	7323      	strbne	r3, [r4, #12]
	}
}
    46bc:	b00d      	add	sp, #52	; 0x34
    46be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    46c2:	bf00      	nop

000046c4 <UART_ConfigStructInit>:
*                    which will be initialized.
* @return		None
*******************************************************************************/
void UART_ConfigStructInit(UART_CFG_Type *UART_InitStruct)
{
	UART_InitStruct->Baud_rate = 9600;
    46c4:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    46c8:	6003      	str	r3, [r0, #0]
	UART_InitStruct->Databits = UART_DATABIT_8;
    46ca:	f04f 0303 	mov.w	r3, #3
    46ce:	7143      	strb	r3, [r0, #5]
	UART_InitStruct->Parity = UART_PARITY_NONE;
    46d0:	f04f 0300 	mov.w	r3, #0
    46d4:	7103      	strb	r3, [r0, #4]
	UART_InitStruct->Stopbits = UART_STOPBIT_1;
    46d6:	7183      	strb	r3, [r0, #6]
}
    46d8:	4770      	bx	lr
    46da:	bf00      	nop

000046dc <UART_SendByte>:
 * 				- LPC_UART3: UART3 peripheral
 * @param[in]	Data	Data to transmit (must be 8-bit long)
 * @return 		None
 **********************************************************************/
void UART_SendByte(LPC_UART_TypeDef* UARTx, uint8_t Data)
{
    46dc:	b538      	push	{r3, r4, r5, lr}
    46de:	4604      	mov	r4, r0
    46e0:	460d      	mov	r5, r1
	CHECK_PARAM(PARAM_UARTx(UARTx));
    46e2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    46e6:	f2c4 0300 	movt	r3, #16384	; 0x4000
    46ea:	f04f 0200 	mov.w	r2, #0
    46ee:	f2c4 0201 	movt	r2, #16385	; 0x4001
    46f2:	1a82      	subs	r2, r0, r2
    46f4:	bf18      	it	ne
    46f6:	2201      	movne	r2, #1
    46f8:	4298      	cmp	r0, r3
    46fa:	bf0c      	ite	eq
    46fc:	2300      	moveq	r3, #0
    46fe:	f002 0301 	andne.w	r3, r2, #1
    4702:	b1c3      	cbz	r3, 4736 <UART_SendByte+0x5a>
    4704:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    4708:	f2c4 0309 	movt	r3, #16393	; 0x4009
    470c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    4710:	f2c4 0209 	movt	r2, #16393	; 0x4009
    4714:	1a82      	subs	r2, r0, r2
    4716:	bf18      	it	ne
    4718:	2201      	movne	r2, #1
    471a:	4298      	cmp	r0, r3
    471c:	bf0c      	ite	eq
    471e:	2300      	moveq	r3, #0
    4720:	f002 0301 	andne.w	r3, r2, #1
    4724:	b13b      	cbz	r3, 4736 <UART_SendByte+0x5a>
    4726:	f247 002c 	movw	r0, #28716	; 0x702c
    472a:	f2c0 0002 	movt	r0, #2
    472e:	f44f 71ed 	mov.w	r1, #474	; 0x1da
    4732:	f7fe fef5 	bl	3520 <check_failed>

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    4736:	f04f 0300 	mov.w	r3, #0
    473a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    473e:	429c      	cmp	r4, r3
	{
		((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/THR = Data & UART_THR_MASKBIT;
    4740:	bf03      	ittte	eq
    4742:	2300      	moveq	r3, #0
    4744:	f2c4 0301 	movteq	r3, #16385	; 0x4001
    4748:	701d      	strbeq	r5, [r3, #0]
	}
	else
	{
		UARTx->/*RBTHDLR.*/THR = Data & UART_THR_MASKBIT;
    474a:	7025      	strbne	r5, [r4, #0]
    474c:	bd38      	pop	{r3, r4, r5, pc}
    474e:	bf00      	nop

00004750 <UART_ReceiveByte>:
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		Data received
 **********************************************************************/
uint8_t UART_ReceiveByte(LPC_UART_TypeDef* UARTx)
{
    4750:	b510      	push	{r4, lr}
    4752:	4604      	mov	r4, r0
	CHECK_PARAM(PARAM_UARTx(UARTx));
    4754:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    4758:	f2c4 0300 	movt	r3, #16384	; 0x4000
    475c:	f04f 0200 	mov.w	r2, #0
    4760:	f2c4 0201 	movt	r2, #16385	; 0x4001
    4764:	1a82      	subs	r2, r0, r2
    4766:	bf18      	it	ne
    4768:	2201      	movne	r2, #1
    476a:	4298      	cmp	r0, r3
    476c:	bf0c      	ite	eq
    476e:	2300      	moveq	r3, #0
    4770:	f002 0301 	andne.w	r3, r2, #1
    4774:	b1c3      	cbz	r3, 47a8 <UART_ReceiveByte+0x58>
    4776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    477a:	f2c4 0309 	movt	r3, #16393	; 0x4009
    477e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    4782:	f2c4 0209 	movt	r2, #16393	; 0x4009
    4786:	1a82      	subs	r2, r0, r2
    4788:	bf18      	it	ne
    478a:	2201      	movne	r2, #1
    478c:	4298      	cmp	r0, r3
    478e:	bf0c      	ite	eq
    4790:	2300      	moveq	r3, #0
    4792:	f002 0301 	andne.w	r3, r2, #1
    4796:	b13b      	cbz	r3, 47a8 <UART_ReceiveByte+0x58>
    4798:	f247 002c 	movw	r0, #28716	; 0x702c
    479c:	f2c0 0002 	movt	r0, #2
    47a0:	f240 11f3 	movw	r1, #499	; 0x1f3
    47a4:	f7fe febc 	bl	3520 <check_failed>

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    47a8:	f04f 0300 	mov.w	r3, #0
    47ac:	f2c4 0301 	movt	r3, #16385	; 0x4001
    47b0:	429c      	cmp	r4, r3
	{
		return (((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/RBR & UART_RBR_MASKBIT);
    47b2:	bf03      	ittte	eq
    47b4:	2300      	moveq	r3, #0
    47b6:	f2c4 0301 	movteq	r3, #16385	; 0x4001
    47ba:	7818      	ldrbeq	r0, [r3, #0]
	}
	else
	{
		return (UARTx->/*RBTHDLR.*/RBR & UART_RBR_MASKBIT);
    47bc:	7820      	ldrbne	r0, [r4, #0]
	}
}
    47be:	bd10      	pop	{r4, pc}

000047c0 <UART_Send>:
 * Note: when using UART in BLOCKING mode, a time-out condition is used
 * via defined symbol UART_BLOCKING_TIMEOUT.
 **********************************************************************/
uint32_t UART_Send(LPC_UART_TypeDef *UARTx, uint8_t *txbuf,
		uint32_t buflen, TRANSFER_BLOCK_Type flag)
{
    47c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    47c4:	4604      	mov	r4, r0
    47c6:	4689      	mov	r9, r1
	uint8_t *pChar = txbuf;

	bToSend = buflen;

	// blocking mode
	if (flag == BLOCKING) {
    47c8:	2b01      	cmp	r3, #1
    47ca:	d159      	bne.n	4880 <UART_Send+0xc0>
    47cc:	e023      	b.n	4816 <UART_Send+0x56>
		bSent = 0;
		while (bToSend){
			timeOut = UART_BLOCKING_TIMEOUT;
			// Wait for THR empty with timeout
			while (!(UARTx->LSR & UART_LSR_THRE)) {
				if (timeOut == 0) break;
    47ce:	2b00      	cmp	r3, #0
    47d0:	d05f      	beq.n	4892 <UART_Send+0xd2>
				timeOut--;
    47d2:	f103 33ff 	add.w	r3, r3, #4294967295
	if (flag == BLOCKING) {
		bSent = 0;
		while (bToSend){
			timeOut = UART_BLOCKING_TIMEOUT;
			// Wait for THR empty with timeout
			while (!(UARTx->LSR & UART_LSR_THRE)) {
    47d6:	7d22      	ldrb	r2, [r4, #20]
    47d8:	f012 0f20 	tst.w	r2, #32
    47dc:	d0f7      	beq.n	47ce <UART_Send+0xe>
				if (timeOut == 0) break;
				timeOut--;
			}
			// Time out!
			if(timeOut == 0) break;
    47de:	2b00      	cmp	r3, #0
    47e0:	d057      	beq.n	4892 <UART_Send+0xd2>
			fifo_cnt = UART_TX_FIFO_SIZE;
			while (fifo_cnt && bToSend){
    47e2:	2d00      	cmp	r5, #0
    47e4:	d055      	beq.n	4892 <UART_Send+0xd2>
    47e6:	46d0      	mov	r8, sl
    47e8:	46d9      	mov	r9, fp
				UART_SendByte(UARTx, (*pChar++));
    47ea:	f818 1b01 	ldrb.w	r1, [r8], #1
    47ee:	46c2      	mov	sl, r8
    47f0:	4620      	mov	r0, r4
    47f2:	f7ff ff73 	bl	46dc <UART_SendByte>
				fifo_cnt--;
				bToSend--;
				bSent++;
    47f6:	f107 0701 	add.w	r7, r7, #1
				timeOut--;
			}
			// Time out!
			if(timeOut == 0) break;
			fifo_cnt = UART_TX_FIFO_SIZE;
			while (fifo_cnt && bToSend){
    47fa:	f1b9 0901 	subs.w	r9, r9, #1
    47fe:	bf0c      	ite	eq
    4800:	2300      	moveq	r3, #0
    4802:	2301      	movne	r3, #1
    4804:	3d01      	subs	r5, #1
    4806:	bf0c      	ite	eq
    4808:	2300      	moveq	r3, #0
    480a:	f003 0301 	andne.w	r3, r3, #1
    480e:	2b00      	cmp	r3, #0
    4810:	d1eb      	bne.n	47ea <UART_Send+0x2a>
	bToSend = buflen;

	// blocking mode
	if (flag == BLOCKING) {
		bSent = 0;
		while (bToSend){
    4812:	b965      	cbnz	r5, 482e <UART_Send+0x6e>
    4814:	e03d      	b.n	4892 <UART_Send+0xd2>
    4816:	f04f 0700 	mov.w	r7, #0
    481a:	2a00      	cmp	r2, #0
    481c:	d039      	beq.n	4892 <UART_Send+0xd2>
    481e:	468a      	mov	sl, r1
    4820:	4615      	mov	r5, r2
    4822:	f04f 0700 	mov.w	r7, #0
			timeOut = UART_BLOCKING_TIMEOUT;
			// Wait for THR empty with timeout
			while (!(UARTx->LSR & UART_LSR_THRE)) {
    4826:	f04f 36ff 	mov.w	r6, #4294967295
				timeOut--;
			}
			// Time out!
			if(timeOut == 0) break;
			fifo_cnt = UART_TX_FIFO_SIZE;
			while (fifo_cnt && bToSend){
    482a:	f04f 0b10 	mov.w	fp, #16
	if (flag == BLOCKING) {
		bSent = 0;
		while (bToSend){
			timeOut = UART_BLOCKING_TIMEOUT;
			// Wait for THR empty with timeout
			while (!(UARTx->LSR & UART_LSR_THRE)) {
    482e:	7d23      	ldrb	r3, [r4, #20]
    4830:	f013 0f20 	tst.w	r3, #32
    4834:	bf08      	it	eq
    4836:	4633      	moveq	r3, r6
    4838:	d0cb      	beq.n	47d2 <UART_Send+0x12>
    483a:	e7d2      	b.n	47e2 <UART_Send+0x22>
	}
	// None blocking mode
	else {
		bSent = 0;
		while (bToSend) {
			if (!(UARTx->LSR & UART_LSR_THRE)){
    483c:	7d23      	ldrb	r3, [r4, #20]
    483e:	f013 0f20 	tst.w	r3, #32
    4842:	d026      	beq.n	4892 <UART_Send+0xd2>
    4844:	4635      	mov	r5, r6
    4846:	e005      	b.n	4854 <UART_Send+0x94>
    4848:	4690      	mov	r8, r2
    484a:	f04f 0510 	mov.w	r5, #16
    484e:	f04f 0700 	mov.w	r7, #0
    4852:	462e      	mov	r6, r5
				break;
			}
			fifo_cnt = UART_TX_FIFO_SIZE;
			while (fifo_cnt && bToSend) {
				UART_SendByte(UARTx, (*pChar++));
    4854:	4620      	mov	r0, r4
    4856:	f819 1007 	ldrb.w	r1, [r9, r7]
    485a:	f7ff ff3f 	bl	46dc <UART_SendByte>
				bToSend--;
				fifo_cnt--;
				bSent++;
    485e:	f107 0701 	add.w	r7, r7, #1
		while (bToSend) {
			if (!(UARTx->LSR & UART_LSR_THRE)){
				break;
			}
			fifo_cnt = UART_TX_FIFO_SIZE;
			while (fifo_cnt && bToSend) {
    4862:	f1b8 0801 	subs.w	r8, r8, #1
    4866:	bf0c      	ite	eq
    4868:	2300      	moveq	r3, #0
    486a:	2301      	movne	r3, #1
    486c:	3d01      	subs	r5, #1
    486e:	bf0c      	ite	eq
    4870:	2200      	moveq	r2, #0
    4872:	f003 0201 	andne.w	r2, r3, #1
    4876:	2a00      	cmp	r2, #0
    4878:	d1ec      	bne.n	4854 <UART_Send+0x94>
		}
	}
	// None blocking mode
	else {
		bSent = 0;
		while (bToSend) {
    487a:	2b00      	cmp	r3, #0
    487c:	d1de      	bne.n	483c <UART_Send+0x7c>
    487e:	e008      	b.n	4892 <UART_Send+0xd2>
    4880:	f04f 0700 	mov.w	r7, #0
    4884:	b12a      	cbz	r2, 4892 <UART_Send+0xd2>
			if (!(UARTx->LSR & UART_LSR_THRE)){
    4886:	7d03      	ldrb	r3, [r0, #20]
    4888:	f013 0f20 	tst.w	r3, #32
    488c:	bf08      	it	eq
    488e:	2700      	moveq	r7, #0
    4890:	d1da      	bne.n	4848 <UART_Send+0x88>
				bSent++;
			}
		}
	}
	return bSent;
}
    4892:	4638      	mov	r0, r7
    4894:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00004898 <UART_Receive>:
 * Note: when using UART in BLOCKING mode, a time-out condition is used
 * via defined symbol UART_BLOCKING_TIMEOUT.
 **********************************************************************/
uint32_t UART_Receive(LPC_UART_TypeDef *UARTx, uint8_t *rxbuf, \
		uint32_t buflen, TRANSFER_BLOCK_Type flag)
{
    4898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    489c:	4604      	mov	r4, r0
    489e:	460f      	mov	r7, r1
    48a0:	4616      	mov	r6, r2
	uint8_t *pChar = rxbuf;

	bToRecv = buflen;

	// Blocking mode
	if (flag == BLOCKING) {
    48a2:	2b01      	cmp	r3, #1
    48a4:	d00a      	beq.n	48bc <UART_Receive+0x24>
		}
	}
	// None blocking mode
	else {
		bRecv = 0;
		while (bToRecv) {
    48a6:	f04f 0500 	mov.w	r5, #0
    48aa:	2a00      	cmp	r2, #0
    48ac:	d035      	beq.n	491a <UART_Receive+0x82>
			if (!(UARTx->LSR & UART_LSR_RDR)) {
    48ae:	7d03      	ldrb	r3, [r0, #20]
    48b0:	f013 0f01 	tst.w	r3, #1
    48b4:	bf18      	it	ne
    48b6:	2500      	movne	r5, #0
    48b8:	d124      	bne.n	4904 <UART_Receive+0x6c>
    48ba:	e02c      	b.n	4916 <UART_Receive+0x7e>
	bToRecv = buflen;

	// Blocking mode
	if (flag == BLOCKING) {
		bRecv = 0;
		while (bToRecv){
    48bc:	f04f 0500 	mov.w	r5, #0
    48c0:	b98a      	cbnz	r2, 48e6 <UART_Receive+0x4e>
    48c2:	e02a      	b.n	491a <UART_Receive+0x82>
			timeOut = UART_BLOCKING_TIMEOUT;
			while (!(UARTx->LSR & UART_LSR_RDR)){
				if (timeOut == 0) break;
    48c4:	b34b      	cbz	r3, 491a <UART_Receive+0x82>
				timeOut--;
    48c6:	f103 33ff 	add.w	r3, r3, #4294967295
	// Blocking mode
	if (flag == BLOCKING) {
		bRecv = 0;
		while (bToRecv){
			timeOut = UART_BLOCKING_TIMEOUT;
			while (!(UARTx->LSR & UART_LSR_RDR)){
    48ca:	7d22      	ldrb	r2, [r4, #20]
    48cc:	f012 0f01 	tst.w	r2, #1
    48d0:	d0f8      	beq.n	48c4 <UART_Receive+0x2c>
				if (timeOut == 0) break;
				timeOut--;
			}
			// Time out!
			if(timeOut == 0) break;
    48d2:	b313      	cbz	r3, 491a <UART_Receive+0x82>
			// Get data from the buffer
			(*pChar++) = UART_ReceiveByte(UARTx);
    48d4:	4620      	mov	r0, r4
    48d6:	f7ff ff3b 	bl	4750 <UART_ReceiveByte>
    48da:	5578      	strb	r0, [r7, r5]
			bToRecv--;
			bRecv++;
    48dc:	f105 0501 	add.w	r5, r5, #1
	bToRecv = buflen;

	// Blocking mode
	if (flag == BLOCKING) {
		bRecv = 0;
		while (bToRecv){
    48e0:	42b5      	cmp	r5, r6
    48e2:	d104      	bne.n	48ee <UART_Receive+0x56>
    48e4:	e019      	b.n	491a <UART_Receive+0x82>
    48e6:	f04f 0500 	mov.w	r5, #0
			timeOut = UART_BLOCKING_TIMEOUT;
			while (!(UARTx->LSR & UART_LSR_RDR)){
    48ea:	f04f 38ff 	mov.w	r8, #4294967295
    48ee:	7d23      	ldrb	r3, [r4, #20]
    48f0:	f013 0f01 	tst.w	r3, #1
    48f4:	bf08      	it	eq
    48f6:	4643      	moveq	r3, r8
    48f8:	d0e5      	beq.n	48c6 <UART_Receive+0x2e>
    48fa:	e7eb      	b.n	48d4 <UART_Receive+0x3c>
	}
	// None blocking mode
	else {
		bRecv = 0;
		while (bToRecv) {
			if (!(UARTx->LSR & UART_LSR_RDR)) {
    48fc:	7d23      	ldrb	r3, [r4, #20]
    48fe:	f013 0f01 	tst.w	r3, #1
    4902:	d00a      	beq.n	491a <UART_Receive+0x82>
				break;
			} else {
				(*pChar++) = UART_ReceiveByte(UARTx);
    4904:	4620      	mov	r0, r4
    4906:	f7ff ff23 	bl	4750 <UART_ReceiveByte>
    490a:	5578      	strb	r0, [r7, r5]
				bRecv++;
    490c:	f105 0501 	add.w	r5, r5, #1
		}
	}
	// None blocking mode
	else {
		bRecv = 0;
		while (bToRecv) {
    4910:	42b5      	cmp	r5, r6
    4912:	d1f3      	bne.n	48fc <UART_Receive+0x64>
    4914:	e001      	b.n	491a <UART_Receive+0x82>
			if (!(UARTx->LSR & UART_LSR_RDR)) {
    4916:	f04f 0500 	mov.w	r5, #0
				bToRecv--;
			}
		}
	}
	return bRecv;
}
    491a:	4628      	mov	r0, r5
    491c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004920 <UART_IntConfig>:
 * 				- ENALBE: Enable this UART interrupt type.
* 				- DISALBE: Disable this UART interrupt type.
 * @return 		None
 *********************************************************************/
void UART_IntConfig(LPC_UART_TypeDef *UARTx, UART_INT_Type UARTIntCfg, FunctionalState NewState)
{
    4920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4922:	4604      	mov	r4, r0
    4924:	460d      	mov	r5, r1
    4926:	4616      	mov	r6, r2
	uint32_t tmp;

	CHECK_PARAM(PARAM_UARTx(UARTx));
    4928:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    492c:	f2c4 0300 	movt	r3, #16384	; 0x4000
    4930:	f04f 0200 	mov.w	r2, #0
    4934:	f2c4 0201 	movt	r2, #16385	; 0x4001
    4938:	1a82      	subs	r2, r0, r2
    493a:	bf18      	it	ne
    493c:	2201      	movne	r2, #1
    493e:	4298      	cmp	r0, r3
    4940:	bf0c      	ite	eq
    4942:	2300      	moveq	r3, #0
    4944:	f002 0301 	andne.w	r3, r2, #1
    4948:	b1c3      	cbz	r3, 497c <UART_IntConfig+0x5c>
    494a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    494e:	f2c4 0309 	movt	r3, #16393	; 0x4009
    4952:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    4956:	f2c4 0209 	movt	r2, #16393	; 0x4009
    495a:	1a82      	subs	r2, r0, r2
    495c:	bf18      	it	ne
    495e:	2201      	movne	r2, #1
    4960:	4298      	cmp	r0, r3
    4962:	bf0c      	ite	eq
    4964:	2300      	moveq	r3, #0
    4966:	f002 0301 	andne.w	r3, r2, #1
    496a:	b13b      	cbz	r3, 497c <UART_IntConfig+0x5c>
    496c:	f247 002c 	movw	r0, #28716	; 0x702c
    4970:	f2c0 0002 	movt	r0, #2
    4974:	f44f 712b 	mov.w	r1, #684	; 0x2ac
    4978:	f7fe fdd2 	bl	3520 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
    497c:	2e01      	cmp	r6, #1
    497e:	d907      	bls.n	4990 <UART_IntConfig+0x70>
    4980:	f247 002c 	movw	r0, #28716	; 0x702c
    4984:	f2c0 0002 	movt	r0, #2
    4988:	f240 21ad 	movw	r1, #685	; 0x2ad
    498c:	f7fe fdc8 	bl	3520 <check_failed>

	switch(UARTIntCfg){
    4990:	2d06      	cmp	r5, #6
    4992:	d819      	bhi.n	49c8 <UART_IntConfig+0xa8>
    4994:	e8df f005 	tbb	[pc, r5]
    4998:	0a070416 	.word	0x0a070416
    499c:	100d      	.short	0x100d
    499e:	13          	.byte	0x13
    499f:	00          	.byte	0x00
		case UART_INTCFG_RBR:
			tmp = UART_IER_RBRINT_EN;
			break;
		case UART_INTCFG_THRE:
			tmp = UART_IER_THREINT_EN;
    49a0:	f04f 0702 	mov.w	r7, #2
			break;
    49a4:	e010      	b.n	49c8 <UART_IntConfig+0xa8>
		case UART_INTCFG_RLS:
			tmp = UART_IER_RLSINT_EN;
    49a6:	f04f 0704 	mov.w	r7, #4
			break;
    49aa:	e00d      	b.n	49c8 <UART_IntConfig+0xa8>
		case UART1_INTCFG_MS:
			tmp = UART1_IER_MSINT_EN;
    49ac:	f04f 0708 	mov.w	r7, #8
			break;
    49b0:	e00a      	b.n	49c8 <UART_IntConfig+0xa8>
		case UART1_INTCFG_CTS:
			tmp = UART1_IER_CTSINT_EN;
    49b2:	f04f 0780 	mov.w	r7, #128	; 0x80
			break;
    49b6:	e007      	b.n	49c8 <UART_IntConfig+0xa8>
		case UART_INTCFG_ABEO:
			tmp = UART_IER_ABEOINT_EN;
    49b8:	f44f 7780 	mov.w	r7, #256	; 0x100
			break;
    49bc:	e004      	b.n	49c8 <UART_IntConfig+0xa8>
		case UART_INTCFG_ABTO:
			tmp = UART_IER_ABTOINT_EN;
    49be:	f44f 7700 	mov.w	r7, #512	; 0x200
			break;
    49c2:	e001      	b.n	49c8 <UART_IntConfig+0xa8>
	CHECK_PARAM(PARAM_UARTx(UARTx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	switch(UARTIntCfg){
		case UART_INTCFG_RBR:
			tmp = UART_IER_RBRINT_EN;
    49c4:	f04f 0701 	mov.w	r7, #1
		case UART_INTCFG_ABTO:
			tmp = UART_IER_ABTOINT_EN;
			break;
	}

	if ((LPC_UART1_TypeDef *) UARTx == LPC_UART1)
    49c8:	f04f 0300 	mov.w	r3, #0
    49cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    49d0:	429c      	cmp	r4, r3
    49d2:	d118      	bne.n	4a06 <UART_IntConfig+0xe6>
	{
		CHECK_PARAM((PARAM_UART_INTCFG(UARTIntCfg)) || (PARAM_UART1_INTCFG(UARTIntCfg)));
    49d4:	1f6b      	subs	r3, r5, #5
    49d6:	bf18      	it	ne
    49d8:	2301      	movne	r3, #1
    49da:	2d02      	cmp	r5, #2
    49dc:	bf94      	ite	ls
    49de:	2300      	movls	r3, #0
    49e0:	f003 0301 	andhi.w	r3, r3, #1
    49e4:	b313      	cbz	r3, 4a2c <UART_IntConfig+0x10c>
    49e6:	2d06      	cmp	r5, #6
    49e8:	d020      	beq.n	4a2c <UART_IntConfig+0x10c>
    49ea:	f1a5 0503 	sub.w	r5, r5, #3
    49ee:	b2ed      	uxtb	r5, r5
    49f0:	2d01      	cmp	r5, #1
    49f2:	d91b      	bls.n	4a2c <UART_IntConfig+0x10c>
    49f4:	f247 002c 	movw	r0, #28716	; 0x702c
    49f8:	f2c0 0002 	movt	r0, #2
    49fc:	f240 21c9 	movw	r1, #713	; 0x2c9
    4a00:	f7fe fd8e 	bl	3520 <check_failed>
    4a04:	e012      	b.n	4a2c <UART_IntConfig+0x10c>
	}
	else
	{
		CHECK_PARAM(PARAM_UART_INTCFG(UARTIntCfg));
    4a06:	1f6b      	subs	r3, r5, #5
    4a08:	bf18      	it	ne
    4a0a:	2301      	movne	r3, #1
    4a0c:	2d02      	cmp	r5, #2
    4a0e:	bf94      	ite	ls
    4a10:	2300      	movls	r3, #0
    4a12:	f003 0301 	andhi.w	r3, r3, #1
    4a16:	b14b      	cbz	r3, 4a2c <UART_IntConfig+0x10c>
    4a18:	2d06      	cmp	r5, #6
    4a1a:	d007      	beq.n	4a2c <UART_IntConfig+0x10c>
    4a1c:	f247 002c 	movw	r0, #28716	; 0x702c
    4a20:	f2c0 0002 	movt	r0, #2
    4a24:	f240 21cd 	movw	r1, #717	; 0x2cd
    4a28:	f7fe fd7a 	bl	3520 <check_failed>
	}

	if (NewState == ENABLE)
    4a2c:	2e01      	cmp	r6, #1
    4a2e:	d110      	bne.n	4a52 <UART_IntConfig+0x132>
	{
		if ((LPC_UART1_TypeDef *) UARTx == LPC_UART1)
    4a30:	f04f 0300 	mov.w	r3, #0
    4a34:	f2c4 0301 	movt	r3, #16385	; 0x4001
    4a38:	429c      	cmp	r4, r3
		{
			((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/IER |= tmp;
    4a3a:	bf01      	itttt	eq
    4a3c:	2300      	moveq	r3, #0
    4a3e:	f2c4 0301 	movteq	r3, #16385	; 0x4001
    4a42:	685a      	ldreq	r2, [r3, #4]
    4a44:	4317      	orreq	r7, r2
    4a46:	bf0f      	iteee	eq
    4a48:	605f      	streq	r7, [r3, #4]
		}
		else
		{
			UARTx->/*DLIER.*/IER |= tmp;
    4a4a:	6863      	ldrne	r3, [r4, #4]
    4a4c:	431f      	orrne	r7, r3
    4a4e:	6067      	strne	r7, [r4, #4]
    4a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	}
	else
	{
		if ((LPC_UART1_TypeDef *) UARTx == LPC_UART1)
    4a52:	f04f 0300 	mov.w	r3, #0
    4a56:	f2c4 0301 	movt	r3, #16385	; 0x4001
    4a5a:	429c      	cmp	r4, r3
    4a5c:	d10b      	bne.n	4a76 <UART_IntConfig+0x156>
		{
			((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/IER &= (~tmp) & UART1_IER_BITMASK;
    4a5e:	f04f 0300 	mov.w	r3, #0
    4a62:	f2c4 0301 	movt	r3, #16385	; 0x4001
    4a66:	6859      	ldr	r1, [r3, #4]
    4a68:	f240 328f 	movw	r2, #911	; 0x38f
    4a6c:	400a      	ands	r2, r1
    4a6e:	ea22 0707 	bic.w	r7, r2, r7
    4a72:	605f      	str	r7, [r3, #4]
    4a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else
		{
			UARTx->/*DLIER.*/IER &= (~tmp) & UART_IER_BITMASK;
    4a76:	6862      	ldr	r2, [r4, #4]
    4a78:	f240 3307 	movw	r3, #775	; 0x307
    4a7c:	4013      	ands	r3, r2
    4a7e:	ea23 0707 	bic.w	r7, r3, r7
    4a82:	6067      	str	r7, [r4, #4]
    4a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4a86:	bf00      	nop

00004a88 <UART_GetLineStatus>:
 * 			Line Status register could not be correct. So this function used to
 * 			read Line status register in one time only, then the return value
 * 			used to check all flags.
 *********************************************************************/
uint8_t UART_GetLineStatus(LPC_UART_TypeDef* UARTx)
{
    4a88:	b510      	push	{r4, lr}
    4a8a:	4604      	mov	r4, r0
	CHECK_PARAM(PARAM_UARTx(UARTx));
    4a8c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    4a90:	f2c4 0300 	movt	r3, #16384	; 0x4000
    4a94:	f04f 0200 	mov.w	r2, #0
    4a98:	f2c4 0201 	movt	r2, #16385	; 0x4001
    4a9c:	1a82      	subs	r2, r0, r2
    4a9e:	bf18      	it	ne
    4aa0:	2201      	movne	r2, #1
    4aa2:	4298      	cmp	r0, r3
    4aa4:	bf0c      	ite	eq
    4aa6:	2300      	moveq	r3, #0
    4aa8:	f002 0301 	andne.w	r3, r2, #1
    4aac:	b1c3      	cbz	r3, 4ae0 <UART_GetLineStatus+0x58>
    4aae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    4ab2:	f2c4 0309 	movt	r3, #16393	; 0x4009
    4ab6:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    4aba:	f2c4 0209 	movt	r2, #16393	; 0x4009
    4abe:	1a82      	subs	r2, r0, r2
    4ac0:	bf18      	it	ne
    4ac2:	2201      	movne	r2, #1
    4ac4:	4298      	cmp	r0, r3
    4ac6:	bf0c      	ite	eq
    4ac8:	2300      	moveq	r3, #0
    4aca:	f002 0301 	andne.w	r3, r2, #1
    4ace:	b13b      	cbz	r3, 4ae0 <UART_GetLineStatus+0x58>
    4ad0:	f247 002c 	movw	r0, #28716	; 0x702c
    4ad4:	f2c0 0002 	movt	r0, #2
    4ad8:	f240 21fb 	movw	r1, #763	; 0x2fb
    4adc:	f7fe fd20 	bl	3520 <check_failed>

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    4ae0:	f04f 0300 	mov.w	r3, #0
    4ae4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    4ae8:	429c      	cmp	r4, r3
	{
		return ((((LPC_UART1_TypeDef *)LPC_UART1)->LSR) & UART_LSR_BITMASK);
    4aea:	bf03      	ittte	eq
    4aec:	2300      	moveq	r3, #0
    4aee:	f2c4 0301 	movteq	r3, #16385	; 0x4001
    4af2:	7d18      	ldrbeq	r0, [r3, #20]
	}
	else
	{
		return ((UARTx->LSR) & UART_LSR_BITMASK);
    4af4:	7d20      	ldrbne	r0, [r4, #20]
	}
}
    4af6:	bd10      	pop	{r4, pc}

00004af8 <UART_GetIntId>:
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return		Current value of UART UIIR register in UART peripheral.
 *********************************************************************/
uint32_t UART_GetIntId(LPC_UART_TypeDef* UARTx)
{
    4af8:	b510      	push	{r4, lr}
    4afa:	4604      	mov	r4, r0
	CHECK_PARAM(PARAM_UARTx(UARTx));
    4afc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    4b00:	f2c4 0300 	movt	r3, #16384	; 0x4000
    4b04:	f04f 0200 	mov.w	r2, #0
    4b08:	f2c4 0201 	movt	r2, #16385	; 0x4001
    4b0c:	1a82      	subs	r2, r0, r2
    4b0e:	bf18      	it	ne
    4b10:	2201      	movne	r2, #1
    4b12:	4298      	cmp	r0, r3
    4b14:	bf0c      	ite	eq
    4b16:	2300      	moveq	r3, #0
    4b18:	f002 0301 	andne.w	r3, r2, #1
    4b1c:	b1c3      	cbz	r3, 4b50 <UART_GetIntId+0x58>
    4b1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    4b22:	f2c4 0309 	movt	r3, #16393	; 0x4009
    4b26:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    4b2a:	f2c4 0209 	movt	r2, #16393	; 0x4009
    4b2e:	1a82      	subs	r2, r0, r2
    4b30:	bf18      	it	ne
    4b32:	2201      	movne	r2, #1
    4b34:	4298      	cmp	r0, r3
    4b36:	bf0c      	ite	eq
    4b38:	2300      	moveq	r3, #0
    4b3a:	f002 0301 	andne.w	r3, r2, #1
    4b3e:	b13b      	cbz	r3, 4b50 <UART_GetIntId+0x58>
    4b40:	f247 002c 	movw	r0, #28716	; 0x702c
    4b44:	f2c0 0002 	movt	r0, #2
    4b48:	f240 3112 	movw	r1, #786	; 0x312
    4b4c:	f7fe fce8 	bl	3520 <check_failed>
	return (UARTx->IIR & 0x03CF);
    4b50:	68a3      	ldr	r3, [r4, #8]
}
    4b52:	f240 30cf 	movw	r0, #975	; 0x3cf
    4b56:	4018      	ands	r0, r3
    4b58:	bd10      	pop	{r4, pc}
    4b5a:	bf00      	nop

00004b5c <UART_CheckBusy>:
 * 				- LPC_UART3: UART3 peripheral
 * @return		RESET if UART is not busy, otherwise return SET.
 **********************************************************************/
FlagStatus UART_CheckBusy(LPC_UART_TypeDef *UARTx)
{
	if (UARTx->LSR & UART_LSR_TEMT){
    4b5c:	7d03      	ldrb	r3, [r0, #20]
		return RESET;
    4b5e:	f013 0f40 	tst.w	r3, #64	; 0x40
	} else {
		return SET;
	}
}
    4b62:	bf14      	ite	ne
    4b64:	2000      	movne	r0, #0
    4b66:	2001      	moveq	r0, #1
    4b68:	4770      	bx	lr
    4b6a:	bf00      	nop

00004b6c <UART_TxCmd>:
 * 				- ENABLE: Enable this function
				- DISABLE: Disable this function
 * @return none
 **********************************************************************/
void UART_TxCmd(LPC_UART_TypeDef *UARTx, FunctionalState NewState)
{
    4b6c:	b538      	push	{r3, r4, r5, lr}
    4b6e:	4604      	mov	r4, r0
    4b70:	460d      	mov	r5, r1
	CHECK_PARAM(PARAM_UARTx(UARTx));
    4b72:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    4b76:	f2c4 0300 	movt	r3, #16384	; 0x4000
    4b7a:	f04f 0200 	mov.w	r2, #0
    4b7e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    4b82:	1a82      	subs	r2, r0, r2
    4b84:	bf18      	it	ne
    4b86:	2201      	movne	r2, #1
    4b88:	4298      	cmp	r0, r3
    4b8a:	bf0c      	ite	eq
    4b8c:	2300      	moveq	r3, #0
    4b8e:	f002 0301 	andne.w	r3, r2, #1
    4b92:	b1c3      	cbz	r3, 4bc6 <UART_TxCmd+0x5a>
    4b94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    4b98:	f2c4 0309 	movt	r3, #16393	; 0x4009
    4b9c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    4ba0:	f2c4 0209 	movt	r2, #16393	; 0x4009
    4ba4:	1a82      	subs	r2, r0, r2
    4ba6:	bf18      	it	ne
    4ba8:	2201      	movne	r2, #1
    4baa:	4298      	cmp	r0, r3
    4bac:	bf0c      	ite	eq
    4bae:	2300      	moveq	r3, #0
    4bb0:	f002 0301 	andne.w	r3, r2, #1
    4bb4:	b13b      	cbz	r3, 4bc6 <UART_TxCmd+0x5a>
    4bb6:	f247 002c 	movw	r0, #28716	; 0x702c
    4bba:	f2c0 0002 	movt	r0, #2
    4bbe:	f240 31eb 	movw	r1, #1003	; 0x3eb
    4bc2:	f7fe fcad 	bl	3520 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
    4bc6:	2d01      	cmp	r5, #1
    4bc8:	d907      	bls.n	4bda <UART_TxCmd+0x6e>
    4bca:	f247 002c 	movw	r0, #28716	; 0x702c
    4bce:	f2c0 0002 	movt	r0, #2
    4bd2:	f44f 717b 	mov.w	r1, #1004	; 0x3ec
    4bd6:	f7fe fca3 	bl	3520 <check_failed>

	if (NewState == ENABLE)
    4bda:	2d01      	cmp	r5, #1
    4bdc:	d116      	bne.n	4c0c <UART_TxCmd+0xa0>
	{
		if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    4bde:	f04f 0300 	mov.w	r3, #0
    4be2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    4be6:	429c      	cmp	r4, r3
		{
			((LPC_UART1_TypeDef *)UARTx)->TER |= UART_TER_TXEN;
    4be8:	bf01      	itttt	eq
    4bea:	2300      	moveq	r3, #0
    4bec:	f2c4 0301 	movteq	r3, #16385	; 0x4001
    4bf0:	f893 2030 	ldrbeq.w	r2, [r3, #48]	; 0x30
    4bf4:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    4bf8:	bf0f      	iteee	eq
    4bfa:	f883 2030 	strbeq.w	r2, [r3, #48]	; 0x30
		}
		else
		{
			UARTx->TER |= UART_TER_TXEN;
    4bfe:	f894 3030 	ldrbne.w	r3, [r4, #48]	; 0x30
    4c02:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
    4c06:	f884 3030 	strbne.w	r3, [r4, #48]	; 0x30
    4c0a:	bd38      	pop	{r3, r4, r5, pc}
		}
	}
	else
	{
		if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    4c0c:	f04f 0300 	mov.w	r3, #0
    4c10:	f2c4 0301 	movt	r3, #16385	; 0x4001
    4c14:	429c      	cmp	r4, r3
		{
			((LPC_UART1_TypeDef *)UARTx)->TER &= (~UART_TER_TXEN) & UART_TER_BITMASK;
    4c16:	bf01      	itttt	eq
    4c18:	2300      	moveq	r3, #0
    4c1a:	f2c4 0301 	movteq	r3, #16385	; 0x4001
    4c1e:	f893 2030 	ldrbeq.w	r2, [r3, #48]	; 0x30
    4c22:	2200      	moveq	r2, #0
    4c24:	bf0f      	iteee	eq
    4c26:	f883 2030 	strbeq.w	r2, [r3, #48]	; 0x30
		}
		else
		{
			UARTx->TER &= (~UART_TER_TXEN) & UART_TER_BITMASK;
    4c2a:	f894 3030 	ldrbne.w	r3, [r4, #48]	; 0x30
    4c2e:	2300      	movne	r3, #0
    4c30:	f884 3030 	strbne.w	r3, [r4, #48]	; 0x30
    4c34:	bd38      	pop	{r3, r4, r5, pc}
    4c36:	bf00      	nop

00004c38 <WDT_SetTimeOut>:
 * @param[in]	clk_source select Clock source for WDT device
 * @param[in]	timeout value of time-out for WDT (us)
 * @return		None
 *********************************************************************/
static uint8_t WDT_SetTimeOut (uint8_t clk_source, uint32_t timeout)
{
    4c38:	b510      	push	{r4, lr}

	uint32_t pclk_wdt = 0;
	uint32_t tempval = 0;

	switch ((WDT_CLK_OPT) clk_source)
    4c3a:	b110      	cbz	r0, 4c42 <WDT_SetTimeOut+0xa>
    4c3c:	2801      	cmp	r0, #1
    4c3e:	d15c      	bne.n	4cfa <WDT_SetTimeOut+0xc2>
    4c40:	e009      	b.n	4c56 <WDT_SetTimeOut+0x1e>
    {
    case WDT_CLKSRC_IRC:
    	pclk_wdt = 4000000;
    	// Calculate TC in WDT
    	tempval  = (((pclk_wdt) / WDT_US_INDEX) * (timeout / 4));
    4c42:	f021 0103 	bic.w	r1, r1, #3
    	// Check if it valid
    	if ((tempval >= WDT_TIMEOUT_MIN) && (tempval <= WDT_TIMEOUT_MAX))
    4c46:	29fe      	cmp	r1, #254	; 0xfe
    4c48:	d95a      	bls.n	4d00 <WDT_SetTimeOut+0xc8>
    	{
    		LPC_WDT->WDTC = tempval;
    4c4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4c4e:	6059      	str	r1, [r3, #4]
    		return	SUCCESS;
    4c50:	f04f 0001 	mov.w	r0, #1
    4c54:	bd10      	pop	{r4, pc}
    	break;

    case WDT_CLKSRC_PCLK:

    	// Get WDT clock with CCLK divider = 4
		pclk_wdt = SystemCoreClock / 4;
    4c56:	f240 0314 	movw	r3, #20
    4c5a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4c5e:	681b      	ldr	r3, [r3, #0]
		// Calculate TC in WDT
		tempval  = (((pclk_wdt) / WDT_US_INDEX) * (timeout / 4));
    4c60:	ea4f 0191 	mov.w	r1, r1, lsr #2
    	break;

    case WDT_CLKSRC_PCLK:

    	// Get WDT clock with CCLK divider = 4
		pclk_wdt = SystemCoreClock / 4;
    4c64:	ea4f 0493 	mov.w	r4, r3, lsr #2
		// Calculate TC in WDT
		tempval  = (((pclk_wdt) / WDT_US_INDEX) * (timeout / 4));
    4c68:	f64d 6283 	movw	r2, #56963	; 0xde83
    4c6c:	f2c4 321b 	movt	r2, #17179	; 0x431b
    4c70:	fba2 0404 	umull	r0, r4, r2, r4
    4c74:	ea4f 4494 	mov.w	r4, r4, lsr #18
    4c78:	fb04 f401 	mul.w	r4, r4, r1

		if ((tempval >= WDT_TIMEOUT_MIN) && (tempval <= WDT_TIMEOUT_MAX))
    4c7c:	2cfe      	cmp	r4, #254	; 0xfe
    4c7e:	d90a      	bls.n	4c96 <WDT_SetTimeOut+0x5e>
		{
			CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_WDT, CLKPWR_PCLKSEL_CCLK_DIV_4);
    4c80:	f04f 0000 	mov.w	r0, #0
    4c84:	4601      	mov	r1, r0
    4c86:	f7fe fb79 	bl	337c <CLKPWR_SetPCLKDiv>
			LPC_WDT->WDTC = (uint32_t) tempval;
    4c8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4c8e:	605c      	str	r4, [r3, #4]
			return SUCCESS;
    4c90:	f04f 0001 	mov.w	r0, #1
    4c94:	bd10      	pop	{r4, pc}
		}

		// Get WDT clock with CCLK divider = 2
		pclk_wdt = SystemCoreClock / 2;
    4c96:	ea4f 0453 	mov.w	r4, r3, lsr #1
		// Calculate TC in WDT
		tempval  = (((pclk_wdt) / WDT_US_INDEX) * (timeout / 4));
    4c9a:	f64d 6283 	movw	r2, #56963	; 0xde83
    4c9e:	f2c4 321b 	movt	r2, #17179	; 0x431b
    4ca2:	fba2 0404 	umull	r0, r4, r2, r4
    4ca6:	ea4f 4494 	mov.w	r4, r4, lsr #18
    4caa:	fb04 f401 	mul.w	r4, r4, r1

		if ((tempval >= WDT_TIMEOUT_MIN) && (tempval <= WDT_TIMEOUT_MAX))
    4cae:	2cfe      	cmp	r4, #254	; 0xfe
    4cb0:	d90b      	bls.n	4cca <WDT_SetTimeOut+0x92>
		{
			CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_WDT, CLKPWR_PCLKSEL_CCLK_DIV_2);
    4cb2:	f04f 0000 	mov.w	r0, #0
    4cb6:	f04f 0102 	mov.w	r1, #2
    4cba:	f7fe fb5f 	bl	337c <CLKPWR_SetPCLKDiv>
			LPC_WDT->WDTC = (uint32_t) tempval;
    4cbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4cc2:	605c      	str	r4, [r3, #4]
			return	SUCCESS;
    4cc4:	f04f 0001 	mov.w	r0, #1
    4cc8:	bd10      	pop	{r4, pc}
		}

		// Get WDT clock with CCLK divider = 1
		pclk_wdt = SystemCoreClock;
		// Calculate TC in WDT
		tempval  = (((pclk_wdt) / WDT_US_INDEX) * (timeout / 4));
    4cca:	f64d 6483 	movw	r4, #56963	; 0xde83
    4cce:	f2c4 341b 	movt	r4, #17179	; 0x431b
    4cd2:	fba4 2403 	umull	r2, r4, r4, r3
    4cd6:	ea4f 4494 	mov.w	r4, r4, lsr #18
    4cda:	fb04 f401 	mul.w	r4, r4, r1

		if ((tempval >= WDT_TIMEOUT_MIN) && (tempval <= WDT_TIMEOUT_MAX))
    4cde:	2cfe      	cmp	r4, #254	; 0xfe
    4ce0:	d911      	bls.n	4d06 <WDT_SetTimeOut+0xce>
		{
			CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_WDT, CLKPWR_PCLKSEL_CCLK_DIV_1);
    4ce2:	f04f 0000 	mov.w	r0, #0
    4ce6:	f04f 0101 	mov.w	r1, #1
    4cea:	f7fe fb47 	bl	337c <CLKPWR_SetPCLKDiv>
			LPC_WDT->WDTC = (uint32_t) tempval;
    4cee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4cf2:	605c      	str	r4, [r3, #4]
			return	SUCCESS;
    4cf4:	f04f 0001 	mov.w	r0, #1
    4cf8:	bd10      	pop	{r4, pc}
// Error parameter
		default:
			break;
}

	return ERROR;
    4cfa:	f04f 0000 	mov.w	r0, #0
    4cfe:	bd10      	pop	{r4, pc}
    4d00:	f04f 0000 	mov.w	r0, #0
    4d04:	bd10      	pop	{r4, pc}
    4d06:	f04f 0000 	mov.w	r0, #0
}
    4d0a:	bd10      	pop	{r4, pc}

00004d0c <WDT_Init>:
* 				- WDT_MODE_INT_ONLY: Use WDT to generate interrupt only
* 				- WDT_MODE_RESET: Use WDT to generate interrupt and reset MCU
* @return 		None
 **********************************************************************/
void WDT_Init (WDT_CLK_OPT ClkSrc, WDT_MODE_OPT WDTMode)
{
    4d0c:	b538      	push	{r3, r4, r5, lr}
    4d0e:	4605      	mov	r5, r0
    4d10:	460c      	mov	r4, r1
	CHECK_PARAM(PARAM_WDT_CLK_OPT(ClkSrc));
    4d12:	2802      	cmp	r0, #2
    4d14:	d907      	bls.n	4d26 <WDT_Init+0x1a>
    4d16:	f247 0064 	movw	r0, #28772	; 0x7064
    4d1a:	f2c0 0002 	movt	r0, #2
    4d1e:	f04f 01a6 	mov.w	r1, #166	; 0xa6
    4d22:	f7fe fbfd 	bl	3520 <check_failed>
	CHECK_PARAM(PARAM_WDT_MODE_OPT(WDTMode));
    4d26:	2c01      	cmp	r4, #1
    4d28:	d907      	bls.n	4d3a <WDT_Init+0x2e>
    4d2a:	f247 0064 	movw	r0, #28772	; 0x7064
    4d2e:	f2c0 0002 	movt	r0, #2
    4d32:	f04f 01a7 	mov.w	r1, #167	; 0xa7
    4d36:	f7fe fbf3 	bl	3520 <check_failed>
	CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_WDT, CLKPWR_PCLKSEL_CCLK_DIV_4);
    4d3a:	f04f 0000 	mov.w	r0, #0
    4d3e:	4601      	mov	r1, r0
    4d40:	f7fe fb1c 	bl	337c <CLKPWR_SetPCLKDiv>

	//Set clock source
	LPC_WDT->WDCLKSEL &= ~WDT_WDCLKSEL_MASK;
    4d44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4d48:	691a      	ldr	r2, [r3, #16]
    4d4a:	f022 0203 	bic.w	r2, r2, #3
    4d4e:	611a      	str	r2, [r3, #16]
	LPC_WDT->WDCLKSEL |= ClkSrc;
    4d50:	691a      	ldr	r2, [r3, #16]
    4d52:	4315      	orrs	r5, r2
    4d54:	611d      	str	r5, [r3, #16]
	//Set WDT mode
	if (WDTMode == WDT_MODE_RESET){
    4d56:	2c01      	cmp	r4, #1
		LPC_WDT->WDMOD |= WDT_WDMOD(WDTMode);
    4d58:	bf02      	ittt	eq
    4d5a:	781a      	ldrbeq	r2, [r3, #0]
    4d5c:	f042 0202 	orreq.w	r2, r2, #2
    4d60:	701a      	strbeq	r2, [r3, #0]
    4d62:	bd38      	pop	{r3, r4, r5, pc}

00004d64 <WDT_Feed>:
 *********************************************************************/
void WDT_Feed (void)
{
	// Disable irq interrupt
//	__disable_irq();
	LPC_WDT->WDFEED = 0xAA;
    4d64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4d68:	f04f 02aa 	mov.w	r2, #170	; 0xaa
    4d6c:	721a      	strb	r2, [r3, #8]
	LPC_WDT->WDFEED = 0x55;
    4d6e:	f04f 0255 	mov.w	r2, #85	; 0x55
    4d72:	721a      	strb	r2, [r3, #8]
	// Then enable irq interrupt
//	__enable_irq();
}
    4d74:	4770      	bx	lr
    4d76:	bf00      	nop

00004d78 <WDT_Start>:
* @brief 		Start WDT activity with given timeout value
* @param[in]	TimeOut WDT reset after timeout if it is not feed
* @return 		None
 **********************************************************************/
void WDT_Start(uint32_t TimeOut)
{
    4d78:	b510      	push	{r4, lr}
    4d7a:	4601      	mov	r1, r0
	uint32_t ClkSrc;

	ClkSrc = LPC_WDT->WDCLKSEL;
    4d7c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    4d80:	6920      	ldr	r0, [r4, #16]
	ClkSrc &=WDT_WDCLKSEL_MASK;
	WDT_SetTimeOut(ClkSrc,TimeOut);
    4d82:	f000 0003 	and.w	r0, r0, #3
    4d86:	f7ff ff57 	bl	4c38 <WDT_SetTimeOut>
	//enable watchdog
	LPC_WDT->WDMOD |= WDT_WDMOD_WDEN;
    4d8a:	7823      	ldrb	r3, [r4, #0]
    4d8c:	f043 0301 	orr.w	r3, r3, #1
    4d90:	7023      	strb	r3, [r4, #0]
	WDT_Feed();
    4d92:	f7ff ffe7 	bl	4d64 <WDT_Feed>
}
    4d96:	bd10      	pop	{r4, pc}

00004d98 <CDC_SendEncapsulatedCommand>:
  Return Value: TRUE - Success, FALSE - Error
 *---------------------------------------------------------------------------*/
uint32_t CDC_SendEncapsulatedCommand (void) {

  return (TRUE);
}
    4d98:	f04f 0001 	mov.w	r0, #1
    4d9c:	4770      	bx	lr
    4d9e:	bf00      	nop

00004da0 <CDC_GetEncapsulatedResponse>:
 *---------------------------------------------------------------------------*/
uint32_t CDC_GetEncapsulatedResponse (void) {

  /* ... add code to handle request */
  return (TRUE);
}
    4da0:	f04f 0001 	mov.w	r0, #1
    4da4:	4770      	bx	lr
    4da6:	bf00      	nop

00004da8 <CDC_SetCommFeature>:
 *---------------------------------------------------------------------------*/
uint32_t CDC_SetCommFeature (unsigned short wFeatureSelector) {

  /* ... add code to handle request */
  return (TRUE);
}
    4da8:	f04f 0001 	mov.w	r0, #1
    4dac:	4770      	bx	lr
    4dae:	bf00      	nop

00004db0 <CDC_GetCommFeature>:
 *---------------------------------------------------------------------------*/
uint32_t CDC_GetCommFeature (unsigned short wFeatureSelector) {

  /* ... add code to handle request */
  return (TRUE);
}
    4db0:	f04f 0001 	mov.w	r0, #1
    4db4:	4770      	bx	lr
    4db6:	bf00      	nop

00004db8 <CDC_ClearCommFeature>:
 *---------------------------------------------------------------------------*/
uint32_t CDC_ClearCommFeature (unsigned short wFeatureSelector) {

  /* ... add code to handle request */
  return (TRUE);
}
    4db8:	f04f 0001 	mov.w	r0, #1
    4dbc:	4770      	bx	lr
    4dbe:	bf00      	nop

00004dc0 <CDC_SetLineCoding>:
  Parameters:   none                    (global SetupPacket and EP0Buf)
  Return Value: TRUE - Success, FALSE - Error
 *---------------------------------------------------------------------------*/
uint32_t CDC_SetLineCoding (void) {

  CDC_LineCoding.dwDTERate   =   (EP0Buf[0] <<  0)
    4dc0:	f240 020c 	movw	r2, #12
    4dc4:	f2c1 0200 	movt	r2, #4096	; 0x1000
                               | (EP0Buf[1] <<  8)
    4dc8:	f242 5380 	movw	r3, #9600	; 0x2580
    4dcc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4dd0:	7858      	ldrb	r0, [r3, #1]
                               | (EP0Buf[2] << 16)
    4dd2:	7899      	ldrb	r1, [r3, #2]
    4dd4:	ea4f 4101 	mov.w	r1, r1, lsl #16
  Return Value: TRUE - Success, FALSE - Error
 *---------------------------------------------------------------------------*/
uint32_t CDC_SetLineCoding (void) {

  CDC_LineCoding.dwDTERate   =   (EP0Buf[0] <<  0)
                               | (EP0Buf[1] <<  8)
    4dd8:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  Parameters:   none                    (global SetupPacket and EP0Buf)
  Return Value: TRUE - Success, FALSE - Error
 *---------------------------------------------------------------------------*/
uint32_t CDC_SetLineCoding (void) {

  CDC_LineCoding.dwDTERate   =   (EP0Buf[0] <<  0)
    4ddc:	7818      	ldrb	r0, [r3, #0]
                               | (EP0Buf[1] <<  8)
                               | (EP0Buf[2] << 16)
    4dde:	4301      	orrs	r1, r0
                               | (EP0Buf[3] << 24);
    4de0:	78d8      	ldrb	r0, [r3, #3]
    4de2:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
  Parameters:   none                    (global SetupPacket and EP0Buf)
  Return Value: TRUE - Success, FALSE - Error
 *---------------------------------------------------------------------------*/
uint32_t CDC_SetLineCoding (void) {

  CDC_LineCoding.dwDTERate   =   (EP0Buf[0] <<  0)
    4de6:	6011      	str	r1, [r2, #0]
                               | (EP0Buf[1] <<  8)
                               | (EP0Buf[2] << 16)
                               | (EP0Buf[3] << 24);
  CDC_LineCoding.bCharFormat =  EP0Buf[4];
    4de8:	7919      	ldrb	r1, [r3, #4]
    4dea:	7111      	strb	r1, [r2, #4]
  CDC_LineCoding.bParityType =  EP0Buf[5];
    4dec:	7959      	ldrb	r1, [r3, #5]
    4dee:	7151      	strb	r1, [r2, #5]
  CDC_LineCoding.bDataBits   =  EP0Buf[6];
    4df0:	799b      	ldrb	r3, [r3, #6]
    4df2:	7193      	strb	r3, [r2, #6]
                CDC_LineCoding.bParityType,
                CDC_LineCoding.bCharFormat);
#endif*/

  return (TRUE);
}
    4df4:	f04f 0001 	mov.w	r0, #1
    4df8:	4770      	bx	lr
    4dfa:	bf00      	nop

00004dfc <CDC_GetLineCoding>:
  Parameters:   None                         (global SetupPacket and EP0Buf)
  Return Value: TRUE - Success, FALSE - Error
 *---------------------------------------------------------------------------*/
uint32_t CDC_GetLineCoding (void) {

  EP0Buf[0] = (CDC_LineCoding.dwDTERate >>  0) & 0xFF;
    4dfc:	f240 020c 	movw	r2, #12
    4e00:	f2c1 0200 	movt	r2, #4096	; 0x1000
    4e04:	6811      	ldr	r1, [r2, #0]
    4e06:	f242 5380 	movw	r3, #9600	; 0x2580
    4e0a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4e0e:	7019      	strb	r1, [r3, #0]
  EP0Buf[1] = (CDC_LineCoding.dwDTERate >>  8) & 0xFF;
    4e10:	ea4f 2011 	mov.w	r0, r1, lsr #8
    4e14:	7058      	strb	r0, [r3, #1]
  EP0Buf[2] = (CDC_LineCoding.dwDTERate >> 16) & 0xFF;
    4e16:	ea4f 4011 	mov.w	r0, r1, lsr #16
    4e1a:	7098      	strb	r0, [r3, #2]
  EP0Buf[3] = (CDC_LineCoding.dwDTERate >> 24) & 0xFF;
    4e1c:	ea4f 6111 	mov.w	r1, r1, lsr #24
    4e20:	70d9      	strb	r1, [r3, #3]
  EP0Buf[4] =  CDC_LineCoding.bCharFormat;
    4e22:	7911      	ldrb	r1, [r2, #4]
    4e24:	7119      	strb	r1, [r3, #4]
  EP0Buf[5] =  CDC_LineCoding.bParityType;
    4e26:	7951      	ldrb	r1, [r2, #5]
    4e28:	7159      	strb	r1, [r3, #5]
  EP0Buf[6] =  CDC_LineCoding.bDataBits;
    4e2a:	7992      	ldrb	r2, [r2, #6]
    4e2c:	719a      	strb	r2, [r3, #6]

  return (TRUE);
}
    4e2e:	f04f 0001 	mov.w	r0, #1
    4e32:	4770      	bx	lr

00004e34 <CDC_SetControlLineState>:
 *---------------------------------------------------------------------------*/
uint32_t CDC_SetControlLineState (unsigned short wControlSignalBitmap) {

  /* ... add code to handle request */
  return (TRUE);
}
    4e34:	f04f 0001 	mov.w	r0, #1
    4e38:	4770      	bx	lr
    4e3a:	bf00      	nop

00004e3c <CDC_SendBreak>:
 *---------------------------------------------------------------------------*/
uint32_t CDC_SendBreak (unsigned short wDurationOfBreak) {

  /* ... add code to handle request */
  return (TRUE);
}
    4e3c:	f04f 0001 	mov.w	r0, #1
    4e40:	4770      	bx	lr
    4e42:	bf00      	nop

00004e44 <CDC_BulkIn>:
/*----------------------------------------------------------------------------
  CDC_BulkIn call on DataIn Request
  Parameters:   none
  Return Value: none
 *---------------------------------------------------------------------------*/
void CDC_BulkIn(void) {
    4e44:	b500      	push	{lr}
    4e46:	b083      	sub	sp, #12
  int numBytesRead, numBytesAvail;

  ser_AvailChar (&numBytesAvail);
    4e48:	a801      	add	r0, sp, #4
    4e4a:	f000 f8d3 	bl	4ff4 <ser_AvailChar>

  // ... add code to check for overwrite

  numBytesRead = ser_Read ((char *)&BulkBufIn[0], &numBytesAvail);
    4e4e:	f242 30d4 	movw	r0, #9172	; 0x23d4
    4e52:	f2c1 0000 	movt	r0, #4096	; 0x1000
    4e56:	a901      	add	r1, sp, #4
    4e58:	f000 f8ae 	bl	4fb8 <ser_Read>

  // send over USB
  if (numBytesRead > 0) {
    4e5c:	1e02      	subs	r2, r0, #0
    4e5e:	dd08      	ble.n	4e72 <CDC_BulkIn+0x2e>
	USB_WriteEP (CDC_DEP_IN, &BulkBufIn[0], numBytesRead);
    4e60:	f04f 0082 	mov.w	r0, #130	; 0x82
    4e64:	f242 31d4 	movw	r1, #9172	; 0x23d4
    4e68:	f2c1 0100 	movt	r1, #4096	; 0x1000
    4e6c:	f001 f8a8 	bl	5fc0 <USB_WriteEP>
    4e70:	e006      	b.n	4e80 <CDC_BulkIn+0x3c>
  }
  else {
    CDC_DepInEmpty = 1;
    4e72:	f240 0308 	movw	r3, #8
    4e76:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4e7a:	f04f 0201 	mov.w	r2, #1
    4e7e:	801a      	strh	r2, [r3, #0]
  }
}
    4e80:	b003      	add	sp, #12
    4e82:	bd00      	pop	{pc}

00004e84 <CDC_BulkOut>:

    \param [in]      IRQn  Number of the interrupt for set pending
 */
static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
    4e84:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    4e88:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4e8c:	f04f 0204 	mov.w	r2, #4
    4e90:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

  // store data in a buffer to transmit it over serial interface
//  CDC_WrOutBuf ((char *)&BulkBufOut[0], &numBytesRead);
	NVIC_SetPendingIRQ(CANActivity_IRQn); // Software interrupt

}
    4e94:	4770      	bx	lr
    4e96:	bf00      	nop

00004e98 <CDC_GetSerialState>:
/*----------------------------------------------------------------------------
  Get the SERIAL_STATE as defined in usbcdc11.pdf, 6.3.5, Table 69.
  Parameters:   none
  Return Value: SerialState as defined in usbcdc11.pdf
 *---------------------------------------------------------------------------*/
unsigned short CDC_GetSerialState (void) {
    4e98:	b500      	push	{lr}
    4e9a:	b083      	sub	sp, #12
  unsigned short temp;

  CDC_SerialState = 0;
    4e9c:	f240 53cc 	movw	r3, #1484	; 0x5cc
    4ea0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4ea4:	f04f 0200 	mov.w	r2, #0
    4ea8:	801a      	strh	r2, [r3, #0]
  ser_LineState (&temp);
    4eaa:	f10d 0006 	add.w	r0, sp, #6
    4eae:	f000 f8af 	bl	5010 <ser_LineState>

  if (temp & 0x8000)  CDC_SerialState |= CDC_SERIAL_STATE_RX_CARRIER;
    4eb2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    4eb6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    4eba:	bf1f      	itttt	ne
    4ebc:	f240 52cc 	movwne	r2, #1484	; 0x5cc
    4ec0:	f2c1 0200 	movtne	r2, #4096	; 0x1000
    4ec4:	8811      	ldrhne	r1, [r2, #0]
    4ec6:	f041 0101 	orrne.w	r1, r1, #1
    4eca:	bf18      	it	ne
    4ecc:	8011      	strhne	r1, [r2, #0]
  if (temp & 0x2000)  CDC_SerialState |= CDC_SERIAL_STATE_TX_CARRIER;
    4ece:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    4ed2:	bf1f      	itttt	ne
    4ed4:	f240 52cc 	movwne	r2, #1484	; 0x5cc
    4ed8:	f2c1 0200 	movtne	r2, #4096	; 0x1000
    4edc:	8811      	ldrhne	r1, [r2, #0]
    4ede:	f041 0102 	orrne.w	r1, r1, #2
    4ee2:	bf18      	it	ne
    4ee4:	8011      	strhne	r1, [r2, #0]
  if (temp & 0x0010)  CDC_SerialState |= CDC_SERIAL_STATE_BREAK;
    4ee6:	f013 0f10 	tst.w	r3, #16
    4eea:	bf1f      	itttt	ne
    4eec:	f240 52cc 	movwne	r2, #1484	; 0x5cc
    4ef0:	f2c1 0200 	movtne	r2, #4096	; 0x1000
    4ef4:	8811      	ldrhne	r1, [r2, #0]
    4ef6:	f041 0104 	orrne.w	r1, r1, #4
    4efa:	bf18      	it	ne
    4efc:	8011      	strhne	r1, [r2, #0]
  if (temp & 0x4000)  CDC_SerialState |= CDC_SERIAL_STATE_RING;
    4efe:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    4f02:	bf1f      	itttt	ne
    4f04:	f240 52cc 	movwne	r2, #1484	; 0x5cc
    4f08:	f2c1 0200 	movtne	r2, #4096	; 0x1000
    4f0c:	8811      	ldrhne	r1, [r2, #0]
    4f0e:	f041 0108 	orrne.w	r1, r1, #8
    4f12:	bf18      	it	ne
    4f14:	8011      	strhne	r1, [r2, #0]
  if (temp & 0x0008)  CDC_SerialState |= CDC_SERIAL_STATE_FRAMING;
    4f16:	f013 0f08 	tst.w	r3, #8
    4f1a:	bf1f      	itttt	ne
    4f1c:	f240 52cc 	movwne	r2, #1484	; 0x5cc
    4f20:	f2c1 0200 	movtne	r2, #4096	; 0x1000
    4f24:	8811      	ldrhne	r1, [r2, #0]
    4f26:	f041 0110 	orrne.w	r1, r1, #16
    4f2a:	bf18      	it	ne
    4f2c:	8011      	strhne	r1, [r2, #0]
  if (temp & 0x0004)  CDC_SerialState |= CDC_SERIAL_STATE_PARITY;
    4f2e:	f013 0f04 	tst.w	r3, #4
    4f32:	bf1f      	itttt	ne
    4f34:	f240 52cc 	movwne	r2, #1484	; 0x5cc
    4f38:	f2c1 0200 	movtne	r2, #4096	; 0x1000
    4f3c:	8811      	ldrhne	r1, [r2, #0]
    4f3e:	f041 0120 	orrne.w	r1, r1, #32
    4f42:	bf18      	it	ne
    4f44:	8011      	strhne	r1, [r2, #0]
  if (temp & 0x0002)  CDC_SerialState |= CDC_SERIAL_STATE_OVERRUN;
    4f46:	f013 0f02 	tst.w	r3, #2
    4f4a:	bf1f      	itttt	ne
    4f4c:	f240 53cc 	movwne	r3, #1484	; 0x5cc
    4f50:	f2c1 0300 	movtne	r3, #4096	; 0x1000
    4f54:	881a      	ldrhne	r2, [r3, #0]
    4f56:	f042 0240 	orrne.w	r2, r2, #64	; 0x40
    4f5a:	bf18      	it	ne
    4f5c:	801a      	strhne	r2, [r3, #0]

  return (CDC_SerialState);
    4f5e:	f240 53cc 	movw	r3, #1484	; 0x5cc
    4f62:	f2c1 0300 	movt	r3, #4096	; 0x1000
}
    4f66:	8818      	ldrh	r0, [r3, #0]
    4f68:	b003      	add	sp, #12
    4f6a:	bd00      	pop	{pc}

00004f6c <CDC_NotificationIn>:


/*----------------------------------------------------------------------------
  Send the SERIAL_STATE notification as defined in usbcdc11.pdf, 6.3.5.
 *---------------------------------------------------------------------------*/
void CDC_NotificationIn (void) {
    4f6c:	b508      	push	{r3, lr}

  NotificationBuf[0] = 0xA1;                           // bmRequestType
    4f6e:	f242 31c8 	movw	r1, #9160	; 0x23c8
    4f72:	f2c1 0100 	movt	r1, #4096	; 0x1000
    4f76:	f04f 03a1 	mov.w	r3, #161	; 0xa1
    4f7a:	700b      	strb	r3, [r1, #0]
  NotificationBuf[1] = CDC_NOTIFICATION_SERIAL_STATE;  // bNotification (SERIAL_STATE)
    4f7c:	f04f 0320 	mov.w	r3, #32
    4f80:	704b      	strb	r3, [r1, #1]
  NotificationBuf[2] = 0x00;                           // wValue
    4f82:	f04f 0300 	mov.w	r3, #0
    4f86:	708b      	strb	r3, [r1, #2]
  NotificationBuf[3] = 0x00;
    4f88:	70cb      	strb	r3, [r1, #3]
  NotificationBuf[4] = 0x00;                           // wIndex (Interface #, LSB first)
    4f8a:	710b      	strb	r3, [r1, #4]
  NotificationBuf[5] = 0x00;
    4f8c:	714b      	strb	r3, [r1, #5]
  NotificationBuf[6] = 0x02;                           // wLength (Data length = 2 bytes, LSB first)
    4f8e:	f04f 0202 	mov.w	r2, #2
    4f92:	718a      	strb	r2, [r1, #6]
  NotificationBuf[7] = 0x00;
    4f94:	71cb      	strb	r3, [r1, #7]
  NotificationBuf[8] = (CDC_SerialState >>  0) & 0xFF; // UART State Bitmap (16bits, LSB first)
    4f96:	f240 53cc 	movw	r3, #1484	; 0x5cc
    4f9a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4f9e:	881b      	ldrh	r3, [r3, #0]
    4fa0:	720b      	strb	r3, [r1, #8]
  NotificationBuf[9] = (CDC_SerialState >>  8) & 0xFF;
    4fa2:	ea4f 2313 	mov.w	r3, r3, lsr #8
    4fa6:	724b      	strb	r3, [r1, #9]

  USB_WriteEP (CDC_CEP_IN, &NotificationBuf[0], 10);   // send notification
    4fa8:	f04f 0081 	mov.w	r0, #129	; 0x81
    4fac:	f04f 020a 	mov.w	r2, #10
    4fb0:	f001 f806 	bl	5fc0 <USB_WriteEP>
}
    4fb4:	bd08      	pop	{r3, pc}
    4fb6:	bf00      	nop

00004fb8 <ser_Read>:
*/

/*----------------------------------------------------------------------------
  read data from serial port
 *---------------------------------------------------------------------------*/
int ser_Read (char *buffer, const int *length) {
    4fb8:	b430      	push	{r4, r5}
    4fba:	4603      	mov	r3, r0
  int bytesToRead, bytesRead;

  /* Read *length bytes, block if *bytes are not avaialable	*/
  bytesToRead = *length;
    4fbc:	6808      	ldr	r0, [r1, #0]
  bytesToRead = (bytesToRead < (*length)) ? bytesToRead : (*length);
  bytesRead = bytesToRead;

  while (bytesToRead--) {
    4fbe:	b1a8      	cbz	r0, 4fec <ser_Read+0x34>
*/

/*----------------------------------------------------------------------------
  read data from serial port
 *---------------------------------------------------------------------------*/
int ser_Read (char *buffer, const int *length) {
    4fc0:	181d      	adds	r5, r3, r0
  bytesToRead = *length;
  bytesToRead = (bytesToRead < (*length)) ? bytesToRead : (*length);
  bytesRead = bytesToRead;

  while (bytesToRead--) {
    while (SER_BUF_EMPTY(ser_in));                     // Block until data is available if none
    4fc2:	f242 4264 	movw	r2, #9316	; 0x2464
    4fc6:	f2c1 0200 	movt	r2, #4096	; 0x1000
    4fca:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
    4fce:	f8d2 4080 	ldr.w	r4, [r2, #128]	; 0x80
    4fd2:	42a1      	cmp	r1, r4
    4fd4:	d00c      	beq.n	4ff0 <ser_Read+0x38>
    *buffer++ = SER_BUF_RD(ser_in);
    4fd6:	f001 047f 	and.w	r4, r1, #127	; 0x7f
    4fda:	5d14      	ldrb	r4, [r2, r4]
    4fdc:	f803 4b01 	strb.w	r4, [r3], #1
    4fe0:	f101 0101 	add.w	r1, r1, #1
    4fe4:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
  /* Read *length bytes, block if *bytes are not avaialable	*/
  bytesToRead = *length;
  bytesToRead = (bytesToRead < (*length)) ? bytesToRead : (*length);
  bytesRead = bytesToRead;

  while (bytesToRead--) {
    4fe8:	42ab      	cmp	r3, r5
    4fea:	d1ee      	bne.n	4fca <ser_Read+0x12>
    while (SER_BUF_EMPTY(ser_in));                     // Block until data is available if none
    *buffer++ = SER_BUF_RD(ser_in);
  }
  return (bytesRead);
}
    4fec:	bc30      	pop	{r4, r5}
    4fee:	4770      	bx	lr
    4ff0:	e7fe      	b.n	4ff0 <ser_Read+0x38>
    4ff2:	bf00      	nop

00004ff4 <ser_AvailChar>:
/*----------------------------------------------------------------------------
  check if character(s) are available at the serial interface
 *---------------------------------------------------------------------------*/
void ser_AvailChar (int *availChar) {

  *availChar = SER_BUF_COUNT(ser_in);
    4ff4:	f242 4364 	movw	r3, #9316	; 0x2464
    4ff8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4ffc:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    5000:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    5004:	1ad3      	subs	r3, r2, r3
    5006:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    500a:	6003      	str	r3, [r0, #0]

}
    500c:	4770      	bx	lr
    500e:	bf00      	nop

00005010 <ser_LineState>:
/*----------------------------------------------------------------------------
  read the line state of the serial port
 *---------------------------------------------------------------------------*/
void ser_LineState (unsigned short *lineState) {

  *lineState = ser_lineState;
    5010:	f242 43f0 	movw	r3, #9456	; 0x24f0
    5014:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5018:	881a      	ldrh	r2, [r3, #0]
    501a:	8002      	strh	r2, [r0, #0]
  ser_lineState = 0;
    501c:	f04f 0200 	mov.w	r2, #0
    5020:	801a      	strh	r2, [r3, #0]

}
    5022:	4770      	bx	lr

00005024 <USB_ResetCore>:
 *    Return Value:    None
 */

void USB_ResetCore (void) {

  USB_DeviceStatus  = USB_POWER;
    5024:	f242 52b0 	movw	r2, #9648	; 0x25b0
    5028:	f2c1 0200 	movt	r2, #4096	; 0x1000
    502c:	f04f 0300 	mov.w	r3, #0
    5030:	8013      	strh	r3, [r2, #0]
  USB_DeviceAddress = 0;
    5032:	f242 528c 	movw	r2, #9612	; 0x258c
    5036:	f2c1 0200 	movt	r2, #4096	; 0x1000
    503a:	7013      	strb	r3, [r2, #0]
  USB_Configuration = 0;
    503c:	f242 5298 	movw	r2, #9624	; 0x2598
    5040:	f2c1 0200 	movt	r2, #4096	; 0x1000
    5044:	7013      	strb	r3, [r2, #0]
  USB_EndPointMask  = 0x00010001;
    5046:	f242 5288 	movw	r2, #9608	; 0x2588
    504a:	f2c1 0200 	movt	r2, #4096	; 0x1000
    504e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
    5052:	6011      	str	r1, [r2, #0]
  USB_EndPointHalt  = 0x00000000;
    5054:	f242 5294 	movw	r2, #9620	; 0x2594
    5058:	f2c1 0200 	movt	r2, #4096	; 0x1000
    505c:	6013      	str	r3, [r2, #0]
  USB_EndPointStall = 0x00000000;
    505e:	f242 5290 	movw	r2, #9616	; 0x2590
    5062:	f2c1 0200 	movt	r2, #4096	; 0x1000
    5066:	6013      	str	r3, [r2, #0]
}
    5068:	4770      	bx	lr
    506a:	bf00      	nop

0000506c <USB_SetupStage>:
 *  USB Request - Setup Stage
 *    Parameters:      None (global SetupPacket)
 *    Return Value:    None
 */

void USB_SetupStage (void) {
    506c:	b508      	push	{r3, lr}
  USB_ReadEP(0x00, (uint8_t *)&SetupPacket);
    506e:	f04f 0000 	mov.w	r0, #0
    5072:	f242 519c 	movw	r1, #9628	; 0x259c
    5076:	f2c1 0100 	movt	r1, #4096	; 0x1000
    507a:	f000 ff5d 	bl	5f38 <USB_ReadEP>
}
    507e:	bd08      	pop	{r3, pc}

00005080 <USB_DataInStage>:
 *  USB Request - Data In Stage
 *    Parameters:      None (global EP0Data)
 *    Return Value:    None
 */

void USB_DataInStage (void) {
    5080:	b510      	push	{r4, lr}
  uint32_t cnt;

  if (EP0Data.Count > USB_MAX_PACKET0) {
    5082:	f242 53a8 	movw	r3, #9640	; 0x25a8
    5086:	f2c1 0300 	movt	r3, #4096	; 0x1000
    508a:	889a      	ldrh	r2, [r3, #4]
    cnt = USB_MAX_PACKET0;
  } else {
    cnt = EP0Data.Count;
  }
  cnt = USB_WriteEP(0x80, EP0Data.pData, cnt);
    508c:	461c      	mov	r4, r3
    508e:	f04f 0080 	mov.w	r0, #128	; 0x80
    5092:	6819      	ldr	r1, [r3, #0]
    5094:	2a08      	cmp	r2, #8
    5096:	bf28      	it	cs
    5098:	2208      	movcs	r2, #8
    509a:	f000 ff91 	bl	5fc0 <USB_WriteEP>
  EP0Data.pData += cnt;
    509e:	6823      	ldr	r3, [r4, #0]
    50a0:	181b      	adds	r3, r3, r0
    50a2:	6023      	str	r3, [r4, #0]
  EP0Data.Count -= cnt;
    50a4:	88a3      	ldrh	r3, [r4, #4]
    50a6:	1a18      	subs	r0, r3, r0
    50a8:	80a0      	strh	r0, [r4, #4]
}
    50aa:	bd10      	pop	{r4, pc}

000050ac <USB_DataOutStage>:
 *  USB Request - Data Out Stage
 *    Parameters:      None (global EP0Data)
 *    Return Value:    None
 */

void USB_DataOutStage (void) {
    50ac:	b510      	push	{r4, lr}
  uint32_t cnt;

  cnt = USB_ReadEP(0x00, EP0Data.pData);
    50ae:	f242 54a8 	movw	r4, #9640	; 0x25a8
    50b2:	f2c1 0400 	movt	r4, #4096	; 0x1000
    50b6:	f04f 0000 	mov.w	r0, #0
    50ba:	6821      	ldr	r1, [r4, #0]
    50bc:	f000 ff3c 	bl	5f38 <USB_ReadEP>
  EP0Data.pData += cnt;
    50c0:	6823      	ldr	r3, [r4, #0]
    50c2:	181b      	adds	r3, r3, r0
    50c4:	6023      	str	r3, [r4, #0]
  EP0Data.Count -= cnt;
    50c6:	88a3      	ldrh	r3, [r4, #4]
    50c8:	1a18      	subs	r0, r3, r0
    50ca:	80a0      	strh	r0, [r4, #4]
}
    50cc:	bd10      	pop	{r4, pc}
    50ce:	bf00      	nop

000050d0 <USB_StatusInStage>:
 *  USB Request - Status In Stage
 *    Parameters:      None
 *    Return Value:    None
 */

void USB_StatusInStage (void) {
    50d0:	b508      	push	{r3, lr}
  USB_WriteEP(0x80, NULL, 0);
    50d2:	f04f 0080 	mov.w	r0, #128	; 0x80
    50d6:	f04f 0100 	mov.w	r1, #0
    50da:	460a      	mov	r2, r1
    50dc:	f000 ff70 	bl	5fc0 <USB_WriteEP>
}
    50e0:	bd08      	pop	{r3, pc}
    50e2:	bf00      	nop

000050e4 <USB_StatusOutStage>:
 *  USB Request - Status Out Stage
 *    Parameters:      None
 *    Return Value:    None
 */

void USB_StatusOutStage (void) {
    50e4:	b508      	push	{r3, lr}
  USB_ReadEP(0x00, EP0Buf);
    50e6:	f04f 0000 	mov.w	r0, #0
    50ea:	f242 5180 	movw	r1, #9600	; 0x2580
    50ee:	f2c1 0100 	movt	r1, #4096	; 0x1000
    50f2:	f000 ff21 	bl	5f38 <USB_ReadEP>
}
    50f6:	bd08      	pop	{r3, pc}

000050f8 <USB_EndPoint0>:
 *  USB Endpoint 0 Event Callback
 *    Parameters:      event
 *    Return Value:    none
 */

void USB_EndPoint0 (uint32_t event) {
    50f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    50fc:	b085      	sub	sp, #20

  switch (event) {
    50fe:	f100 30ff 	add.w	r0, r0, #4294967295
    5102:	2806      	cmp	r0, #6
    5104:	f200 8530 	bhi.w	5b68 <USB_EndPoint0+0xa70>
    5108:	e8df f010 	tbh	[pc, r0, lsl #1]
    510c:	04a30007 	.word	0x04a30007
    5110:	052e04fc 	.word	0x052e04fc
    5114:	0519052e 	.word	0x0519052e
    5118:	051e      	.short	0x051e
    case USB_EVT_SETUP:
      USB_SetupStage();
    511a:	f7ff ffa7 	bl	506c <USB_SetupStage>
      USB_DirCtrlEP(SetupPacket.bmRequestType.BM.Dir);
    511e:	f242 549c 	movw	r4, #9628	; 0x259c
    5122:	f2c1 0400 	movt	r4, #4096	; 0x1000
    5126:	7820      	ldrb	r0, [r4, #0]
    5128:	ea4f 10d0 	mov.w	r0, r0, lsr #7
    512c:	f000 feb8 	bl	5ea0 <USB_DirCtrlEP>
      EP0Data.Count = SetupPacket.wLength;     /* Number of bytes to transfer */
    5130:	f242 53a8 	movw	r3, #9640	; 0x25a8
    5134:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5138:	88e2      	ldrh	r2, [r4, #6]
    513a:	809a      	strh	r2, [r3, #4]
      switch (SetupPacket.bmRequestType.BM.Type) {
    513c:	7823      	ldrb	r3, [r4, #0]
    513e:	f3c3 1341 	ubfx	r3, r3, #5, #2
    5142:	b11b      	cbz	r3, 514c <USB_EndPoint0+0x54>
    5144:	2b01      	cmp	r3, #1
    5146:	f040 8478 	bne.w	5a3a <USB_EndPoint0+0x942>
    514a:	e3d5      	b.n	58f8 <USB_EndPoint0+0x800>

        case REQUEST_STANDARD:
          switch (SetupPacket.bRequest) {
    514c:	f242 539c 	movw	r3, #9628	; 0x259c
    5150:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5154:	785b      	ldrb	r3, [r3, #1]
    5156:	2b0b      	cmp	r3, #11
    5158:	f200 846f 	bhi.w	5a3a <USB_EndPoint0+0x942>
    515c:	e8df f013 	tbh	[pc, r3, lsl #1]
    5160:	0082000c 	.word	0x0082000c
    5164:	00e6046d 	.word	0x00e6046d
    5168:	013f046d 	.word	0x013f046d
    516c:	01ce0157 	.word	0x01ce0157
    5170:	01ef01da 	.word	0x01ef01da
    5174:	030e02e2 	.word	0x030e02e2
#else  
__inline uint32_t USB_ReqGetStatus (void) {
#endif
  uint32_t n, m;

  switch (SetupPacket.bmRequestType.BM.Recipient) {
    5178:	f242 539c 	movw	r3, #9628	; 0x259c
    517c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5180:	781b      	ldrb	r3, [r3, #0]
    5182:	f003 031f 	and.w	r3, r3, #31
    5186:	2b01      	cmp	r3, #1
    5188:	d00f      	beq.n	51aa <USB_EndPoint0+0xb2>
    518a:	2b02      	cmp	r3, #2
    518c:	d030      	beq.n	51f0 <USB_EndPoint0+0xf8>
    518e:	2b00      	cmp	r3, #0
    5190:	f040 8453 	bne.w	5a3a <USB_EndPoint0+0x942>
    case REQUEST_TO_DEVICE:
      EP0Data.pData = (uint8_t *)&USB_DeviceStatus;
    5194:	f242 53a8 	movw	r3, #9640	; 0x25a8
    5198:	f2c1 0300 	movt	r3, #4096	; 0x1000
    519c:	f242 52b0 	movw	r2, #9648	; 0x25b0
    51a0:	f2c1 0200 	movt	r2, #4096	; 0x1000
    51a4:	601a      	str	r2, [r3, #0]
    51a6:	f000 bcd4 	b.w	5b52 <USB_EndPoint0+0xa5a>
      break;
    case REQUEST_TO_INTERFACE:
      if ((USB_Configuration != 0) && (SetupPacket.wIndex.WB.L < USB_NumInterfaces)) {
    51aa:	f242 5398 	movw	r3, #9624	; 0x2598
    51ae:	f2c1 0300 	movt	r3, #4096	; 0x1000
    51b2:	781b      	ldrb	r3, [r3, #0]
    51b4:	2b00      	cmp	r3, #0
    51b6:	f000 8440 	beq.w	5a3a <USB_EndPoint0+0x942>
    51ba:	f242 529c 	movw	r2, #9628	; 0x259c
    51be:	f2c1 0200 	movt	r2, #4096	; 0x1000
    51c2:	f242 53a4 	movw	r3, #9636	; 0x25a4
    51c6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    51ca:	7912      	ldrb	r2, [r2, #4]
    51cc:	781b      	ldrb	r3, [r3, #0]
    51ce:	429a      	cmp	r2, r3
    51d0:	f080 8433 	bcs.w	5a3a <USB_EndPoint0+0x942>
        *((__packed uint16_t *)EP0Buf) = 0;
    51d4:	f242 5380 	movw	r3, #9600	; 0x2580
    51d8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    51dc:	f04f 0200 	mov.w	r2, #0
    51e0:	801a      	strh	r2, [r3, #0]
    	  *((uint16_t *)EP0Buf) = 0;
        EP0Data.pData = EP0Buf;
    51e2:	f242 52a8 	movw	r2, #9640	; 0x25a8
    51e6:	f2c1 0200 	movt	r2, #4096	; 0x1000
    51ea:	6013      	str	r3, [r2, #0]
    51ec:	f000 bcb1 	b.w	5b52 <USB_EndPoint0+0xa5a>
      } else {
        return (FALSE);
      }
      break;
    case REQUEST_TO_ENDPOINT:
      n = SetupPacket.wIndex.WB.L & 0x8F;
    51f0:	f242 539c 	movw	r3, #9628	; 0x259c
    51f4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    51f8:	791a      	ldrb	r2, [r3, #4]
    51fa:	f002 038f 	and.w	r3, r2, #143	; 0x8f
      m = (n & 0x80) ? ((1 << 16) << (n & 0x0F)) : (1 << n);
    51fe:	f012 0f80 	tst.w	r2, #128	; 0x80
    5202:	bf1d      	ittte	ne
    5204:	f003 020f 	andne.w	r2, r3, #15
    5208:	f44f 3180 	movne.w	r1, #65536	; 0x10000
    520c:	fa01 f202 	lslne.w	r2, r1, r2
    5210:	2201      	moveq	r2, #1
    5212:	bf08      	it	eq
    5214:	409a      	lsleq	r2, r3
      if (((USB_Configuration != 0) || ((n & 0x0F) == 0)) && (USB_EndPointMask & m)) {
    5216:	f242 5198 	movw	r1, #9624	; 0x2598
    521a:	f2c1 0100 	movt	r1, #4096	; 0x1000
    521e:	7809      	ldrb	r1, [r1, #0]
    5220:	b919      	cbnz	r1, 522a <USB_EndPoint0+0x132>
    5222:	f013 0f0f 	tst.w	r3, #15
    5226:	f040 8408 	bne.w	5a3a <USB_EndPoint0+0x942>
    522a:	f242 5388 	movw	r3, #9608	; 0x2588
    522e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5232:	681b      	ldr	r3, [r3, #0]
    5234:	421a      	tst	r2, r3
    5236:	f000 8400 	beq.w	5a3a <USB_EndPoint0+0x942>
        *((__packed uint16_t *)EP0Buf) = (USB_EndPointHalt & m) ? 1 : 0;
    523a:	f242 5380 	movw	r3, #9600	; 0x2580
    523e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5242:	f242 5194 	movw	r1, #9620	; 0x2594
    5246:	f2c1 0100 	movt	r1, #4096	; 0x1000
    524a:	6809      	ldr	r1, [r1, #0]
    524c:	420a      	tst	r2, r1
    524e:	bf0c      	ite	eq
    5250:	2200      	moveq	r2, #0
    5252:	2201      	movne	r2, #1
    5254:	801a      	strh	r2, [r3, #0]
    	  *((uint16_t *)EP0Buf) = (USB_EndPointHalt & m) ? 1 : 0;
        EP0Data.pData = EP0Buf;
    5256:	f242 52a8 	movw	r2, #9640	; 0x25a8
    525a:	f2c1 0200 	movt	r2, #4096	; 0x1000
    525e:	6013      	str	r3, [r2, #0]
    5260:	f000 bc77 	b.w	5b52 <USB_EndPoint0+0xa5a>
#else
__inline uint32_t USB_ReqSetClrFeature (uint32_t sc) {
#endif
  uint32_t n, m;

  switch (SetupPacket.bmRequestType.BM.Recipient) {
    5264:	f242 539c 	movw	r3, #9628	; 0x259c
    5268:	f2c1 0300 	movt	r3, #4096	; 0x1000
    526c:	781b      	ldrb	r3, [r3, #0]
    526e:	f013 031f 	ands.w	r3, r3, #31
    5272:	d003      	beq.n	527c <USB_EndPoint0+0x184>
    5274:	2b02      	cmp	r3, #2
    5276:	f040 83e0 	bne.w	5a3a <USB_EndPoint0+0x942>
    527a:	e015      	b.n	52a8 <USB_EndPoint0+0x1b0>
    case REQUEST_TO_DEVICE:
      if (SetupPacket.wValue.W == USB_FEATURE_REMOTE_WAKEUP) {
    527c:	f242 539c 	movw	r3, #9628	; 0x259c
    5280:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5284:	885b      	ldrh	r3, [r3, #2]
    5286:	2b01      	cmp	r3, #1
    5288:	f040 83d7 	bne.w	5a3a <USB_EndPoint0+0x942>
        if (sc) {
          USB_WakeUpCfg(TRUE);
          USB_DeviceStatus |=  USB_GETSTATUS_REMOTE_WAKEUP;
        } else {
          USB_WakeUpCfg(FALSE);
    528c:	f04f 0000 	mov.w	r0, #0
    5290:	f000 fd3a 	bl	5d08 <USB_WakeUpCfg>
          USB_DeviceStatus &= ~USB_GETSTATUS_REMOTE_WAKEUP;
    5294:	f242 53b0 	movw	r3, #9648	; 0x25b0
    5298:	f2c1 0300 	movt	r3, #4096	; 0x1000
    529c:	881a      	ldrh	r2, [r3, #0]
    529e:	f022 0202 	bic.w	r2, r2, #2
    52a2:	801a      	strh	r2, [r3, #0]
    52a4:	f000 bc58 	b.w	5b58 <USB_EndPoint0+0xa60>
      }
      break;
    case REQUEST_TO_INTERFACE:
      return (FALSE);
    case REQUEST_TO_ENDPOINT:
      n = SetupPacket.wIndex.WB.L & 0x8F;
    52a8:	f242 539c 	movw	r3, #9628	; 0x259c
    52ac:	f2c1 0300 	movt	r3, #4096	; 0x1000
    52b0:	791b      	ldrb	r3, [r3, #4]
    52b2:	f003 008f 	and.w	r0, r3, #143	; 0x8f
      m = (n & 0x80) ? ((1 << 16) << (n & 0x0F)) : (1 << n);
    52b6:	f013 0f80 	tst.w	r3, #128	; 0x80
    52ba:	bf1d      	ittte	ne
    52bc:	f000 030f 	andne.w	r3, r0, #15
    52c0:	f44f 3480 	movne.w	r4, #65536	; 0x10000
    52c4:	409c      	lslne	r4, r3
    52c6:	2401      	moveq	r4, #1
    52c8:	bf08      	it	eq
    52ca:	4084      	lsleq	r4, r0
      if ((USB_Configuration != 0) && ((n & 0x0F) != 0) && (USB_EndPointMask & m)) {
    52cc:	f242 5398 	movw	r3, #9624	; 0x2598
    52d0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    52d4:	781b      	ldrb	r3, [r3, #0]
    52d6:	2b00      	cmp	r3, #0
    52d8:	f000 83af 	beq.w	5a3a <USB_EndPoint0+0x942>
    52dc:	f010 0f0f 	tst.w	r0, #15
    52e0:	f000 83ab 	beq.w	5a3a <USB_EndPoint0+0x942>
    52e4:	f242 5388 	movw	r3, #9608	; 0x2588
    52e8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    52ec:	681b      	ldr	r3, [r3, #0]
    52ee:	421c      	tst	r4, r3
    52f0:	f000 83a3 	beq.w	5a3a <USB_EndPoint0+0x942>
        if (SetupPacket.wValue.W == USB_FEATURE_ENDPOINT_STALL) {
    52f4:	f242 539c 	movw	r3, #9628	; 0x259c
    52f8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    52fc:	885b      	ldrh	r3, [r3, #2]
    52fe:	2b00      	cmp	r3, #0
    5300:	f040 839b 	bne.w	5a3a <USB_EndPoint0+0x942>
          if (sc) {
            USB_SetStallEP(n);
            USB_EndPointHalt |=  m;
          } else {
            if ((USB_EndPointStall & m) != 0) {
    5304:	f242 5390 	movw	r3, #9616	; 0x2590
    5308:	f2c1 0300 	movt	r3, #4096	; 0x1000
    530c:	681b      	ldr	r3, [r3, #0]
    530e:	421c      	tst	r4, r3
    5310:	f040 8422 	bne.w	5b58 <USB_EndPoint0+0xa60>
              return (TRUE);
            }
            USB_ClrStallEP(n);
    5314:	f000 fe02 	bl	5f1c <USB_ClrStallEP>
              if (CSW.dSignature == MSC_CSW_Signature) {
                USB_WriteEP(MSC_EP_IN, (uint8_t *)&CSW, sizeof(CSW));
              }
            }
#endif
            USB_EndPointHalt &= ~m;
    5318:	f242 5394 	movw	r3, #9620	; 0x2594
    531c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5320:	681a      	ldr	r2, [r3, #0]
    5322:	ea22 0404 	bic.w	r4, r2, r4
    5326:	601c      	str	r4, [r3, #0]
    5328:	f000 bc16 	b.w	5b58 <USB_EndPoint0+0xa60>
#else
__inline uint32_t USB_ReqSetClrFeature (uint32_t sc) {
#endif
  uint32_t n, m;

  switch (SetupPacket.bmRequestType.BM.Recipient) {
    532c:	f242 539c 	movw	r3, #9628	; 0x259c
    5330:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5334:	781b      	ldrb	r3, [r3, #0]
    5336:	f013 031f 	ands.w	r3, r3, #31
    533a:	d003      	beq.n	5344 <USB_EndPoint0+0x24c>
    533c:	2b02      	cmp	r3, #2
    533e:	f040 837c 	bne.w	5a3a <USB_EndPoint0+0x942>
    5342:	e014      	b.n	536e <USB_EndPoint0+0x276>
    case REQUEST_TO_DEVICE:
      if (SetupPacket.wValue.W == USB_FEATURE_REMOTE_WAKEUP) {
    5344:	f242 539c 	movw	r3, #9628	; 0x259c
    5348:	f2c1 0300 	movt	r3, #4096	; 0x1000
    534c:	885b      	ldrh	r3, [r3, #2]
    534e:	2b01      	cmp	r3, #1
    5350:	f040 8373 	bne.w	5a3a <USB_EndPoint0+0x942>
        if (sc) {
          USB_WakeUpCfg(TRUE);
    5354:	f04f 0001 	mov.w	r0, #1
    5358:	f000 fcd6 	bl	5d08 <USB_WakeUpCfg>
          USB_DeviceStatus |=  USB_GETSTATUS_REMOTE_WAKEUP;
    535c:	f242 53b0 	movw	r3, #9648	; 0x25b0
    5360:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5364:	881a      	ldrh	r2, [r3, #0]
    5366:	f042 0202 	orr.w	r2, r2, #2
    536a:	801a      	strh	r2, [r3, #0]
    536c:	e3f7      	b.n	5b5e <USB_EndPoint0+0xa66>
      }
      break;
    case REQUEST_TO_INTERFACE:
      return (FALSE);
    case REQUEST_TO_ENDPOINT:
      n = SetupPacket.wIndex.WB.L & 0x8F;
    536e:	f242 539c 	movw	r3, #9628	; 0x259c
    5372:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5376:	791b      	ldrb	r3, [r3, #4]
    5378:	f003 008f 	and.w	r0, r3, #143	; 0x8f
      m = (n & 0x80) ? ((1 << 16) << (n & 0x0F)) : (1 << n);
    537c:	f013 0f80 	tst.w	r3, #128	; 0x80
    5380:	bf1d      	ittte	ne
    5382:	f000 030f 	andne.w	r3, r0, #15
    5386:	f44f 3480 	movne.w	r4, #65536	; 0x10000
    538a:	409c      	lslne	r4, r3
    538c:	2401      	moveq	r4, #1
    538e:	bf08      	it	eq
    5390:	4084      	lsleq	r4, r0
      if ((USB_Configuration != 0) && ((n & 0x0F) != 0) && (USB_EndPointMask & m)) {
    5392:	f242 5398 	movw	r3, #9624	; 0x2598
    5396:	f2c1 0300 	movt	r3, #4096	; 0x1000
    539a:	781b      	ldrb	r3, [r3, #0]
    539c:	2b00      	cmp	r3, #0
    539e:	f000 834c 	beq.w	5a3a <USB_EndPoint0+0x942>
    53a2:	f010 0f0f 	tst.w	r0, #15
    53a6:	f000 8348 	beq.w	5a3a <USB_EndPoint0+0x942>
    53aa:	f242 5388 	movw	r3, #9608	; 0x2588
    53ae:	f2c1 0300 	movt	r3, #4096	; 0x1000
    53b2:	681b      	ldr	r3, [r3, #0]
    53b4:	421c      	tst	r4, r3
    53b6:	f000 8340 	beq.w	5a3a <USB_EndPoint0+0x942>
        if (SetupPacket.wValue.W == USB_FEATURE_ENDPOINT_STALL) {
    53ba:	f242 539c 	movw	r3, #9628	; 0x259c
    53be:	f2c1 0300 	movt	r3, #4096	; 0x1000
    53c2:	885b      	ldrh	r3, [r3, #2]
    53c4:	2b00      	cmp	r3, #0
    53c6:	f040 8338 	bne.w	5a3a <USB_EndPoint0+0x942>
          if (sc) {
            USB_SetStallEP(n);
    53ca:	f000 fd97 	bl	5efc <USB_SetStallEP>
            USB_EndPointHalt |=  m;
    53ce:	f242 5394 	movw	r3, #9620	; 0x2594
    53d2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    53d6:	681a      	ldr	r2, [r3, #0]
    53d8:	4314      	orrs	r4, r2
    53da:	601c      	str	r4, [r3, #0]
    53dc:	e3bf      	b.n	5b5e <USB_EndPoint0+0xa66>
#if defined (  __IAR_SYSTEMS_ICC__  )
inline uint32_t USB_ReqSetAddress (void) {
#else
__inline uint32_t USB_ReqSetAddress (void) {
#endif
  switch (SetupPacket.bmRequestType.BM.Recipient) {
    53de:	f242 539c 	movw	r3, #9628	; 0x259c
    53e2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    53e6:	781b      	ldrb	r3, [r3, #0]
    53e8:	f013 0f1f 	tst.w	r3, #31
    53ec:	f040 8325 	bne.w	5a3a <USB_EndPoint0+0x942>
    case REQUEST_TO_DEVICE:
      USB_DeviceAddress = 0x80 | SetupPacket.wValue.WB.L;
    53f0:	f242 538c 	movw	r3, #9612	; 0x258c
    53f4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    53f8:	f242 529c 	movw	r2, #9628	; 0x259c
    53fc:	f2c1 0200 	movt	r2, #4096	; 0x1000
    5400:	7892      	ldrb	r2, [r2, #2]
    5402:	f062 027f 	orn	r2, r2, #127	; 0x7f
    5406:	701a      	strb	r2, [r3, #0]

            case USB_REQUEST_SET_ADDRESS:
              if (!USB_ReqSetAddress()) {
                goto stall_i;
              }
              USB_StatusInStage();
    5408:	f7ff fe62 	bl	50d0 <USB_StatusInStage>
              break;
    540c:	e3ac      	b.n	5b68 <USB_EndPoint0+0xa70>
__inline uint32_t USB_ReqGetDescriptor (void) {
#endif
  uint8_t  *pD;
  uint32_t len, n;

  switch (SetupPacket.bmRequestType.BM.Recipient) {
    540e:	f242 539c 	movw	r3, #9628	; 0x259c
    5412:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5416:	781b      	ldrb	r3, [r3, #0]
    5418:	f013 0f1f 	tst.w	r3, #31
    541c:	f040 830d 	bne.w	5a3a <USB_EndPoint0+0x942>
    case REQUEST_TO_DEVICE:
      switch (SetupPacket.wValue.WB.H) {
    5420:	f242 539c 	movw	r3, #9628	; 0x259c
    5424:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5428:	78db      	ldrb	r3, [r3, #3]
    542a:	2b02      	cmp	r3, #2
    542c:	d011      	beq.n	5452 <USB_EndPoint0+0x35a>
    542e:	2b03      	cmp	r3, #3
    5430:	d003      	beq.n	543a <USB_EndPoint0+0x342>
    5432:	2b01      	cmp	r3, #1
    5434:	f040 8301 	bne.w	5a3a <USB_EndPoint0+0x942>
    5438:	e016      	b.n	5468 <USB_EndPoint0+0x370>
          EP0Data.pData = pD;
          len = ((USB_CONFIGURATION_DESCRIPTOR *)pD)->wTotalLength;
          break;
        case USB_STRING_DESCRIPTOR_TYPE:
          pD = (uint8_t *)USB_StringDescriptor;
          for (n = 0; n != SetupPacket.wValue.WB.L; n++) {
    543a:	f242 539c 	movw	r3, #9628	; 0x259c
    543e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5442:	7898      	ldrb	r0, [r3, #2]
    5444:	2800      	cmp	r0, #0
    5446:	d134      	bne.n	54b2 <USB_EndPoint0+0x3ba>
    5448:	f247 03e0 	movw	r3, #28896	; 0x70e0
    544c:	f2c0 0302 	movt	r3, #2
    5450:	e03c      	b.n	54cc <USB_EndPoint0+0x3d4>
          EP0Data.pData = (uint8_t *)USB_DeviceDescriptor;
          len = USB_DEVICE_DESC_SIZE;
          break;
        case USB_CONFIGURATION_DESCRIPTOR_TYPE:
          pD = (uint8_t *)USB_ConfigDescriptor;
          for (n = 0; n != SetupPacket.wValue.WB.L; n++) {
    5452:	f242 539c 	movw	r3, #9628	; 0x259c
    5456:	f2c1 0300 	movt	r3, #4096	; 0x1000
    545a:	7898      	ldrb	r0, [r3, #2]
    545c:	b980      	cbnz	r0, 5480 <USB_EndPoint0+0x388>
    545e:	f247 039c 	movw	r3, #28828	; 0x709c
    5462:	f2c0 0302 	movt	r3, #2
    5466:	e019      	b.n	549c <USB_EndPoint0+0x3a4>

  switch (SetupPacket.bmRequestType.BM.Recipient) {
    case REQUEST_TO_DEVICE:
      switch (SetupPacket.wValue.WB.H) {
        case USB_DEVICE_DESCRIPTOR_TYPE:
          EP0Data.pData = (uint8_t *)USB_DeviceDescriptor;
    5468:	f242 53a8 	movw	r3, #9640	; 0x25a8
    546c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5470:	f247 1248 	movw	r2, #29000	; 0x7148
    5474:	f2c0 0202 	movt	r2, #2
    5478:	601a      	str	r2, [r3, #0]
          len = USB_DEVICE_DESC_SIZE;
    547a:	f04f 0312 	mov.w	r3, #18
    547e:	e02f      	b.n	54e0 <USB_EndPoint0+0x3e8>
          break;
        case USB_CONFIGURATION_DESCRIPTOR_TYPE:
          pD = (uint8_t *)USB_ConfigDescriptor;
          for (n = 0; n != SetupPacket.wValue.WB.L; n++) {
    5480:	f04f 0200 	mov.w	r2, #0
    5484:	f247 039c 	movw	r3, #28828	; 0x709c
    5488:	f2c0 0302 	movt	r3, #2
            if (((USB_CONFIGURATION_DESCRIPTOR *)pD)->bLength != 0) {
    548c:	7819      	ldrb	r1, [r3, #0]
    548e:	b109      	cbz	r1, 5494 <USB_EndPoint0+0x39c>
              pD += ((USB_CONFIGURATION_DESCRIPTOR *)pD)->wTotalLength;
    5490:	8859      	ldrh	r1, [r3, #2]
    5492:	185b      	adds	r3, r3, r1
          EP0Data.pData = (uint8_t *)USB_DeviceDescriptor;
          len = USB_DEVICE_DESC_SIZE;
          break;
        case USB_CONFIGURATION_DESCRIPTOR_TYPE:
          pD = (uint8_t *)USB_ConfigDescriptor;
          for (n = 0; n != SetupPacket.wValue.WB.L; n++) {
    5494:	f102 0201 	add.w	r2, r2, #1
    5498:	4290      	cmp	r0, r2
    549a:	d1f7      	bne.n	548c <USB_EndPoint0+0x394>
            if (((USB_CONFIGURATION_DESCRIPTOR *)pD)->bLength != 0) {
              pD += ((USB_CONFIGURATION_DESCRIPTOR *)pD)->wTotalLength;
            }
          }
          if (((USB_CONFIGURATION_DESCRIPTOR *)pD)->bLength == 0) {
    549c:	781a      	ldrb	r2, [r3, #0]
    549e:	2a00      	cmp	r2, #0
    54a0:	f000 82cb 	beq.w	5a3a <USB_EndPoint0+0x942>
            return (FALSE);
          }
          EP0Data.pData = pD;
    54a4:	f242 52a8 	movw	r2, #9640	; 0x25a8
    54a8:	f2c1 0200 	movt	r2, #4096	; 0x1000
    54ac:	6013      	str	r3, [r2, #0]
          len = ((USB_CONFIGURATION_DESCRIPTOR *)pD)->wTotalLength;
    54ae:	885b      	ldrh	r3, [r3, #2]
    54b0:	e016      	b.n	54e0 <USB_EndPoint0+0x3e8>
          break;
        case USB_STRING_DESCRIPTOR_TYPE:
          pD = (uint8_t *)USB_StringDescriptor;
          for (n = 0; n != SetupPacket.wValue.WB.L; n++) {
    54b2:	f04f 0200 	mov.w	r2, #0
    54b6:	f247 03e0 	movw	r3, #28896	; 0x70e0
    54ba:	f2c0 0302 	movt	r3, #2
            if (((USB_STRING_DESCRIPTOR *)pD)->bLength != 0) {
    54be:	7819      	ldrb	r1, [r3, #0]
    54c0:	b101      	cbz	r1, 54c4 <USB_EndPoint0+0x3cc>
              pD += ((USB_STRING_DESCRIPTOR *)pD)->bLength;
    54c2:	185b      	adds	r3, r3, r1
          EP0Data.pData = pD;
          len = ((USB_CONFIGURATION_DESCRIPTOR *)pD)->wTotalLength;
          break;
        case USB_STRING_DESCRIPTOR_TYPE:
          pD = (uint8_t *)USB_StringDescriptor;
          for (n = 0; n != SetupPacket.wValue.WB.L; n++) {
    54c4:	f102 0201 	add.w	r2, r2, #1
    54c8:	4282      	cmp	r2, r0
    54ca:	d1f8      	bne.n	54be <USB_EndPoint0+0x3c6>
            if (((USB_STRING_DESCRIPTOR *)pD)->bLength != 0) {
              pD += ((USB_STRING_DESCRIPTOR *)pD)->bLength;
            }
          }
          if (((USB_STRING_DESCRIPTOR *)pD)->bLength == 0) {
    54cc:	781a      	ldrb	r2, [r3, #0]
    54ce:	2a00      	cmp	r2, #0
    54d0:	f000 82b3 	beq.w	5a3a <USB_EndPoint0+0x942>
            return (FALSE);
          }
          EP0Data.pData = pD;
    54d4:	f242 52a8 	movw	r2, #9640	; 0x25a8
    54d8:	f2c1 0200 	movt	r2, #4096	; 0x1000
    54dc:	6013      	str	r3, [r2, #0]
          len = ((USB_STRING_DESCRIPTOR *)EP0Data.pData)->bLength;
    54de:	781b      	ldrb	r3, [r3, #0]
//      break;
    default:
      return (FALSE);
  }

  if (EP0Data.Count > len) {
    54e0:	f242 52a8 	movw	r2, #9640	; 0x25a8
    54e4:	f2c1 0200 	movt	r2, #4096	; 0x1000
    54e8:	8892      	ldrh	r2, [r2, #4]
    54ea:	429a      	cmp	r2, r3
    54ec:	f240 833a 	bls.w	5b64 <USB_EndPoint0+0xa6c>
    EP0Data.Count = len;
    54f0:	f242 52a8 	movw	r2, #9640	; 0x25a8
    54f4:	f2c1 0200 	movt	r2, #4096	; 0x1000
    54f8:	8093      	strh	r3, [r2, #4]
    54fa:	e333      	b.n	5b64 <USB_EndPoint0+0xa6c>
              }
              USB_DataInStage();
              break;

            case USB_REQUEST_SET_DESCRIPTOR:
/*stall_o:*/  USB_SetStallEP(0x00);            /* not supported */
    54fc:	f04f 0000 	mov.w	r0, #0
    5500:	f000 fcfc 	bl	5efc <USB_SetStallEP>
              EP0Data.Count = 0;
    5504:	f242 53a8 	movw	r3, #9640	; 0x25a8
    5508:	f2c1 0300 	movt	r3, #4096	; 0x1000
    550c:	f04f 0200 	mov.w	r2, #0
    5510:	809a      	strh	r2, [r3, #4]
              break;
    5512:	e329      	b.n	5b68 <USB_EndPoint0+0xa70>
#if defined (  __IAR_SYSTEMS_ICC__  )
inline uint32_t USB_ReqGetConfiguration (void) {
#else
__inline uint32_t USB_ReqGetConfiguration (void) {
#endif
  switch (SetupPacket.bmRequestType.BM.Recipient) {
    5514:	f242 539c 	movw	r3, #9628	; 0x259c
    5518:	f2c1 0300 	movt	r3, #4096	; 0x1000
    551c:	781b      	ldrb	r3, [r3, #0]
    551e:	f013 0f1f 	tst.w	r3, #31
    5522:	f040 828a 	bne.w	5a3a <USB_EndPoint0+0x942>
    case REQUEST_TO_DEVICE:
      EP0Data.pData = &USB_Configuration;
    5526:	f242 53a8 	movw	r3, #9640	; 0x25a8
    552a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    552e:	f242 5298 	movw	r2, #9624	; 0x2598
    5532:	f2c1 0200 	movt	r2, #4096	; 0x1000
    5536:	601a      	str	r2, [r3, #0]

            case USB_REQUEST_GET_CONFIGURATION:
              if (!USB_ReqGetConfiguration()) {
                goto stall_i;
              }
              USB_DataInStage();
    5538:	f7ff fda2 	bl	5080 <USB_DataInStage>
              break;
    553c:	e314      	b.n	5b68 <USB_EndPoint0+0xa70>
  USB_COMMON_DESCRIPTOR *pD;
  uint32_t alt = 0;
  uint32_t n, m;
  uint32_t tmp;

  switch (SetupPacket.bmRequestType.BM.Recipient) {
    553e:	f242 539c 	movw	r3, #9628	; 0x259c
    5542:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5546:	781b      	ldrb	r3, [r3, #0]
    5548:	f013 0f1f 	tst.w	r3, #31
    554c:	f040 8275 	bne.w	5a3a <USB_EndPoint0+0x942>
    case REQUEST_TO_DEVICE:

      if (SetupPacket.wValue.WB.L) {
    5550:	f242 539c 	movw	r3, #9628	; 0x259c
    5554:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5558:	789b      	ldrb	r3, [r3, #2]
    555a:	2b00      	cmp	r3, #0
    555c:	d17e      	bne.n	565c <USB_EndPoint0+0x564>
    555e:	e094      	b.n	568a <USB_EndPoint0+0x592>
        pD = (USB_COMMON_DESCRIPTOR *)USB_ConfigDescriptor;
        while (pD->bLength) {
          switch (pD->bDescriptorType) {
    5560:	7863      	ldrb	r3, [r4, #1]
    5562:	2b04      	cmp	r3, #4
    5564:	d059      	beq.n	561a <USB_EndPoint0+0x522>
    5566:	2b05      	cmp	r3, #5
    5568:	d05a      	beq.n	5620 <USB_EndPoint0+0x528>
    556a:	2b02      	cmp	r3, #2
    556c:	d173      	bne.n	5656 <USB_EndPoint0+0x55e>
            case USB_CONFIGURATION_DESCRIPTOR_TYPE:
              if (((USB_CONFIGURATION_DESCRIPTOR *)pD)->bConfigurationValue == SetupPacket.wValue.WB.L) {
    556e:	7962      	ldrb	r2, [r4, #5]
    5570:	f242 539c 	movw	r3, #9628	; 0x259c
    5574:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5578:	789b      	ldrb	r3, [r3, #2]
    557a:	4293      	cmp	r3, r2
                  USB_DeviceStatus &= ~USB_GETSTATUS_SELF_POWERED;
                }
              } else {
//                (uint8_t *)pD += ((USB_CONFIGURATION_DESCRIPTOR *)pD)->wTotalLength;
            	  tmp = (uint32_t)pD;
            	  tmp += ((USB_CONFIGURATION_DESCRIPTOR *)pD)->wTotalLength;
    557c:	bf1c      	itt	ne
    557e:	8863      	ldrhne	r3, [r4, #2]
    5580:	18e4      	addne	r4, r4, r3
      if (SetupPacket.wValue.WB.L) {
        pD = (USB_COMMON_DESCRIPTOR *)USB_ConfigDescriptor;
        while (pD->bLength) {
          switch (pD->bDescriptorType) {
            case USB_CONFIGURATION_DESCRIPTOR_TYPE:
              if (((USB_CONFIGURATION_DESCRIPTOR *)pD)->bConfigurationValue == SetupPacket.wValue.WB.L) {
    5582:	d17d      	bne.n	5680 <USB_EndPoint0+0x588>
                USB_Configuration = SetupPacket.wValue.WB.L;
    5584:	f242 5398 	movw	r3, #9624	; 0x2598
    5588:	f2c1 0300 	movt	r3, #4096	; 0x1000
    558c:	701a      	strb	r2, [r3, #0]
                USB_NumInterfaces = ((USB_CONFIGURATION_DESCRIPTOR *)pD)->bNumInterfaces;
    558e:	f242 53a4 	movw	r3, #9636	; 0x25a4
    5592:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5596:	7922      	ldrb	r2, [r4, #4]
    5598:	701a      	strb	r2, [r3, #0]
                for (n = 0; n < USB_IF_NUM; n++) {
                  USB_AltSetting[n] = 0;
    559a:	f242 537c 	movw	r3, #9596	; 0x257c
    559e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    55a2:	f04f 0200 	mov.w	r2, #0
    55a6:	701a      	strb	r2, [r3, #0]
    55a8:	705a      	strb	r2, [r3, #1]
    55aa:	709a      	strb	r2, [r3, #2]
    55ac:	70da      	strb	r2, [r3, #3]
    55ae:	4645      	mov	r5, r8
                }
                for (n = 1; n < 16; n++) {
                  if (USB_EndPointMask & (1 << n)) {
    55b0:	462f      	mov	r7, r5
    55b2:	fa08 f205 	lsl.w	r2, r8, r5
    55b6:	6833      	ldr	r3, [r6, #0]
    55b8:	421a      	tst	r2, r3
    55ba:	d002      	beq.n	55c2 <USB_EndPoint0+0x4ca>
                    USB_DisableEP(n);
    55bc:	4628      	mov	r0, r5
    55be:	f000 fc7f 	bl	5ec0 <USB_DisableEP>
                  }
                  if (USB_EndPointMask & ((1 << 16) << n)) {
    55c2:	fa09 f707 	lsl.w	r7, r9, r7
    55c6:	6833      	ldr	r3, [r6, #0]
    55c8:	421f      	tst	r7, r3
    55ca:	d003      	beq.n	55d4 <USB_EndPoint0+0x4dc>
                    USB_DisableEP(n | 0x80);
    55cc:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    55d0:	f000 fc76 	bl	5ec0 <USB_DisableEP>
                USB_Configuration = SetupPacket.wValue.WB.L;
                USB_NumInterfaces = ((USB_CONFIGURATION_DESCRIPTOR *)pD)->bNumInterfaces;
                for (n = 0; n < USB_IF_NUM; n++) {
                  USB_AltSetting[n] = 0;
                }
                for (n = 1; n < 16; n++) {
    55d4:	f105 0501 	add.w	r5, r5, #1
    55d8:	2d10      	cmp	r5, #16
    55da:	d1e9      	bne.n	55b0 <USB_EndPoint0+0x4b8>
                  }
                  if (USB_EndPointMask & ((1 << 16) << n)) {
                    USB_DisableEP(n | 0x80);
                  }
                }
                USB_EndPointMask = 0x00010001;
    55dc:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    55e0:	6033      	str	r3, [r6, #0]
                USB_EndPointHalt = 0x00000000;
    55e2:	f242 5394 	movw	r3, #9620	; 0x2594
    55e6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    55ea:	f04f 0200 	mov.w	r2, #0
    55ee:	601a      	str	r2, [r3, #0]
                USB_EndPointStall= 0x00000000;
    55f0:	f242 5390 	movw	r3, #9616	; 0x2590
    55f4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    55f8:	601a      	str	r2, [r3, #0]
                USB_Configure(TRUE);
    55fa:	4640      	mov	r0, r8
    55fc:	f000 fbfc 	bl	5df8 <USB_Configure>
                if (((USB_CONFIGURATION_DESCRIPTOR *)pD)->bmAttributes & USB_CONFIG_POWERED_MASK) {
    5600:	79e3      	ldrb	r3, [r4, #7]
    5602:	f013 0f40 	tst.w	r3, #64	; 0x40
                  USB_DeviceStatus |=  USB_GETSTATUS_SELF_POWERED;
    5606:	f8ba 3000 	ldrh.w	r3, [sl]
    560a:	bf14      	ite	ne
    560c:	f043 0301 	orrne.w	r3, r3, #1
                } else {
                  USB_DeviceStatus &= ~USB_GETSTATUS_SELF_POWERED;
    5610:	f023 0301 	biceq.w	r3, r3, #1
    5614:	f8aa 3000 	strh.w	r3, [sl]
    5618:	e01d      	b.n	5656 <USB_EndPoint0+0x55e>
            	  pD = (USB_COMMON_DESCRIPTOR *)tmp;
            	  continue;
              }
              break;
            case USB_INTERFACE_DESCRIPTOR_TYPE:
              alt = ((USB_INTERFACE_DESCRIPTOR *)pD)->bAlternateSetting;
    561a:	f894 b003 	ldrb.w	fp, [r4, #3]
    561e:	e01a      	b.n	5656 <USB_EndPoint0+0x55e>
              break;
            case USB_ENDPOINT_DESCRIPTOR_TYPE:
              if (alt == 0) {
    5620:	f1bb 0f00 	cmp.w	fp, #0
    5624:	d117      	bne.n	5656 <USB_EndPoint0+0x55e>
                n = ((USB_ENDPOINT_DESCRIPTOR *)pD)->bEndpointAddress & 0x8F;
    5626:	78a3      	ldrb	r3, [r4, #2]
    5628:	f003 058f 	and.w	r5, r3, #143	; 0x8f
                m = (n & 0x80) ? ((1 << 16) << (n & 0x0F)) : (1 << n);
    562c:	f013 0f80 	tst.w	r3, #128	; 0x80
    5630:	bf1a      	itte	ne
    5632:	f005 030f 	andne.w	r3, r5, #15
    5636:	fa09 f303 	lslne.w	r3, r9, r3
    563a:	fa08 f305 	lsleq.w	r3, r8, r5
                USB_EndPointMask |= m;
    563e:	6832      	ldr	r2, [r6, #0]
    5640:	4313      	orrs	r3, r2
    5642:	6033      	str	r3, [r6, #0]
                USB_ConfigEP((USB_ENDPOINT_DESCRIPTOR *)pD);
    5644:	4620      	mov	r0, r4
    5646:	f000 fc01 	bl	5e4c <USB_ConfigEP>
                USB_EnableEP(n);
    564a:	4628      	mov	r0, r5
    564c:	f000 fc2a 	bl	5ea4 <USB_EnableEP>
                USB_ResetEP(n);
    5650:	4628      	mov	r0, r5
    5652:	f000 fc45 	bl	5ee0 <USB_ResetEP>
              }
              break;
          }
//          (uint8_t *)pD += pD->bLength;
			tmp = (uint32_t)pD;
			tmp += pD->bLength;
    5656:	7823      	ldrb	r3, [r4, #0]
    5658:	18e4      	adds	r4, r4, r3
    565a:	e011      	b.n	5680 <USB_EndPoint0+0x588>
  uint32_t tmp;

  switch (SetupPacket.bmRequestType.BM.Recipient) {
    case REQUEST_TO_DEVICE:

      if (SetupPacket.wValue.WB.L) {
    565c:	f04f 0b00 	mov.w	fp, #0
    5660:	f247 049c 	movw	r4, #28828	; 0x709c
    5664:	f2c0 0402 	movt	r4, #2
              break;
            case USB_ENDPOINT_DESCRIPTOR_TYPE:
              if (alt == 0) {
                n = ((USB_ENDPOINT_DESCRIPTOR *)pD)->bEndpointAddress & 0x8F;
                m = (n & 0x80) ? ((1 << 16) << (n & 0x0F)) : (1 << n);
                USB_EndPointMask |= m;
    5668:	f242 5688 	movw	r6, #9608	; 0x2588
    566c:	f2c1 0600 	movt	r6, #4096	; 0x1000
              alt = ((USB_INTERFACE_DESCRIPTOR *)pD)->bAlternateSetting;
              break;
            case USB_ENDPOINT_DESCRIPTOR_TYPE:
              if (alt == 0) {
                n = ((USB_ENDPOINT_DESCRIPTOR *)pD)->bEndpointAddress & 0x8F;
                m = (n & 0x80) ? ((1 << 16) << (n & 0x0F)) : (1 << n);
    5670:	f04f 0801 	mov.w	r8, #1
    5674:	f44f 3980 	mov.w	r9, #65536	; 0x10000
                USB_EndPointStall= 0x00000000;
                USB_Configure(TRUE);
                if (((USB_CONFIGURATION_DESCRIPTOR *)pD)->bmAttributes & USB_CONFIG_POWERED_MASK) {
                  USB_DeviceStatus |=  USB_GETSTATUS_SELF_POWERED;
                } else {
                  USB_DeviceStatus &= ~USB_GETSTATUS_SELF_POWERED;
    5678:	f242 5ab0 	movw	sl, #9648	; 0x25b0
    567c:	f2c1 0a00 	movt	sl, #4096	; 0x1000
  switch (SetupPacket.bmRequestType.BM.Recipient) {
    case REQUEST_TO_DEVICE:

      if (SetupPacket.wValue.WB.L) {
        pD = (USB_COMMON_DESCRIPTOR *)USB_ConfigDescriptor;
        while (pD->bLength) {
    5680:	7823      	ldrb	r3, [r4, #0]
    5682:	2b00      	cmp	r3, #0
    5684:	f47f af6c 	bne.w	5560 <USB_EndPoint0+0x468>
    5688:	e03a      	b.n	5700 <USB_EndPoint0+0x608>
			tmp += pD->bLength;
			pD = (USB_COMMON_DESCRIPTOR *)tmp;
        }
      }
      else {
        USB_Configuration = 0;
    568a:	f242 5398 	movw	r3, #9624	; 0x2598
    568e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5692:	f04f 0200 	mov.w	r2, #0
    5696:	701a      	strb	r2, [r3, #0]
        for (n = 1; n < 16; n++) {
    5698:	f04f 0401 	mov.w	r4, #1
          if (USB_EndPointMask & (1 << n)) {
    569c:	4627      	mov	r7, r4
    569e:	f242 5588 	movw	r5, #9608	; 0x2588
    56a2:	f2c1 0500 	movt	r5, #4096	; 0x1000
            USB_DisableEP(n);
          }
          if (USB_EndPointMask & ((1 << 16) << n)) {
    56a6:	f44f 3880 	mov.w	r8, #65536	; 0x10000
        }
      }
      else {
        USB_Configuration = 0;
        for (n = 1; n < 16; n++) {
          if (USB_EndPointMask & (1 << n)) {
    56aa:	4626      	mov	r6, r4
    56ac:	fa07 f204 	lsl.w	r2, r7, r4
    56b0:	682b      	ldr	r3, [r5, #0]
    56b2:	421a      	tst	r2, r3
    56b4:	d002      	beq.n	56bc <USB_EndPoint0+0x5c4>
            USB_DisableEP(n);
    56b6:	4620      	mov	r0, r4
    56b8:	f000 fc02 	bl	5ec0 <USB_DisableEP>
          }
          if (USB_EndPointMask & ((1 << 16) << n)) {
    56bc:	fa08 f606 	lsl.w	r6, r8, r6
    56c0:	682b      	ldr	r3, [r5, #0]
    56c2:	421e      	tst	r6, r3
    56c4:	d003      	beq.n	56ce <USB_EndPoint0+0x5d6>
            USB_DisableEP(n | 0x80);
    56c6:	f044 0080 	orr.w	r0, r4, #128	; 0x80
    56ca:	f000 fbf9 	bl	5ec0 <USB_DisableEP>
			pD = (USB_COMMON_DESCRIPTOR *)tmp;
        }
      }
      else {
        USB_Configuration = 0;
        for (n = 1; n < 16; n++) {
    56ce:	f104 0401 	add.w	r4, r4, #1
    56d2:	2c10      	cmp	r4, #16
    56d4:	d1e9      	bne.n	56aa <USB_EndPoint0+0x5b2>
          }
          if (USB_EndPointMask & ((1 << 16) << n)) {
            USB_DisableEP(n | 0x80);
          }
        }
        USB_EndPointMask  = 0x00010001;
    56d6:	f242 5388 	movw	r3, #9608	; 0x2588
    56da:	f2c1 0300 	movt	r3, #4096	; 0x1000
    56de:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    56e2:	601a      	str	r2, [r3, #0]
        USB_EndPointHalt  = 0x00000000;
    56e4:	f242 5394 	movw	r3, #9620	; 0x2594
    56e8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    56ec:	f04f 0000 	mov.w	r0, #0
    56f0:	6018      	str	r0, [r3, #0]
        USB_EndPointStall = 0x00000000;
    56f2:	f242 5390 	movw	r3, #9616	; 0x2590
    56f6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    56fa:	6018      	str	r0, [r3, #0]
        USB_Configure(FALSE);
    56fc:	f000 fb7c 	bl	5df8 <USB_Configure>
      }

      if (USB_Configuration != SetupPacket.wValue.WB.L) {
    5700:	f242 529c 	movw	r2, #9628	; 0x259c
    5704:	f2c1 0200 	movt	r2, #4096	; 0x1000
    5708:	f242 5398 	movw	r3, #9624	; 0x2598
    570c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5710:	7892      	ldrb	r2, [r2, #2]
    5712:	781b      	ldrb	r3, [r3, #0]
    5714:	429a      	cmp	r2, r3
    5716:	f040 8190 	bne.w	5a3a <USB_EndPoint0+0x942>

            case USB_REQUEST_SET_CONFIGURATION:
              if (!USB_ReqSetConfiguration()) {
                goto stall_i;
              }
              USB_StatusInStage();
    571a:	f7ff fcd9 	bl	50d0 <USB_StatusInStage>
#if USB_CONFIGURE_EVENT
              USB_Configure_Event();
    571e:	f000 fd27 	bl	6170 <USB_Configure_Event>
#endif
              break;
    5722:	e221      	b.n	5b68 <USB_EndPoint0+0xa70>
#if defined (  __IAR_SYSTEMS_ICC__  )
inline uint32_t USB_ReqGetInterface (void) {
#else
__inline uint32_t USB_ReqGetInterface (void) {
#endif
  switch (SetupPacket.bmRequestType.BM.Recipient) {
    5724:	f242 539c 	movw	r3, #9628	; 0x259c
    5728:	f2c1 0300 	movt	r3, #4096	; 0x1000
    572c:	781b      	ldrb	r3, [r3, #0]
    572e:	f003 031f 	and.w	r3, r3, #31
    5732:	2b01      	cmp	r3, #1
    5734:	f040 8181 	bne.w	5a3a <USB_EndPoint0+0x942>
    case REQUEST_TO_INTERFACE:
      if ((USB_Configuration != 0) && (SetupPacket.wIndex.WB.L < USB_NumInterfaces)) {
    5738:	f242 5398 	movw	r3, #9624	; 0x2598
    573c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5740:	781b      	ldrb	r3, [r3, #0]
    5742:	2b00      	cmp	r3, #0
    5744:	f000 8179 	beq.w	5a3a <USB_EndPoint0+0x942>
    5748:	f242 539c 	movw	r3, #9628	; 0x259c
    574c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5750:	7919      	ldrb	r1, [r3, #4]
    5752:	f242 53a4 	movw	r3, #9636	; 0x25a4
    5756:	f2c1 0300 	movt	r3, #4096	; 0x1000
    575a:	781b      	ldrb	r3, [r3, #0]
    575c:	428b      	cmp	r3, r1
    575e:	f240 816c 	bls.w	5a3a <USB_EndPoint0+0x942>
        EP0Data.pData = USB_AltSetting + SetupPacket.wIndex.WB.L;
    5762:	f242 53a8 	movw	r3, #9640	; 0x25a8
    5766:	f2c1 0300 	movt	r3, #4096	; 0x1000
    576a:	f242 527c 	movw	r2, #9596	; 0x257c
    576e:	f2c1 0200 	movt	r2, #4096	; 0x1000
    5772:	188a      	adds	r2, r1, r2
    5774:	601a      	str	r2, [r3, #0]

            case USB_REQUEST_GET_INTERFACE:
              if (!USB_ReqGetInterface()) {
                goto stall_i;
              }
              USB_DataInStage();
    5776:	f7ff fc83 	bl	5080 <USB_DataInStage>
              break;
    577a:	e1f5      	b.n	5b68 <USB_EndPoint0+0xa70>
  uint32_t ifn = 0, alt = 0, old = 0, msk = 0;
  uint32_t n, m;
  uint32_t set;
  uint32_t tmp;

  switch (SetupPacket.bmRequestType.BM.Recipient) {
    577c:	f242 539c 	movw	r3, #9628	; 0x259c
    5780:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5784:	781b      	ldrb	r3, [r3, #0]
    5786:	f003 031f 	and.w	r3, r3, #31
    578a:	2b01      	cmp	r3, #1
			tmp += pD->bLength;
			pD = (USB_COMMON_DESCRIPTOR *)tmp;
      }
      break;
    default:
      return (FALSE);
    578c:	bf18      	it	ne
    578e:	2600      	movne	r6, #0
  uint32_t ifn = 0, alt = 0, old = 0, msk = 0;
  uint32_t n, m;
  uint32_t set;
  uint32_t tmp;

  switch (SetupPacket.bmRequestType.BM.Recipient) {
    5790:	f040 80ac 	bne.w	58ec <USB_EndPoint0+0x7f4>
    case REQUEST_TO_INTERFACE:
      if (USB_Configuration == 0) return (FALSE);
    5794:	f242 5398 	movw	r3, #9624	; 0x2598
    5798:	f2c1 0300 	movt	r3, #4096	; 0x1000
    579c:	781b      	ldrb	r3, [r3, #0]
    579e:	2b00      	cmp	r3, #0
    57a0:	f000 814b 	beq.w	5a3a <USB_EndPoint0+0x942>
    57a4:	f04f 0600 	mov.w	r6, #0
    57a8:	46b2      	mov	sl, r6
    57aa:	9601      	str	r6, [sp, #4]
    57ac:	4637      	mov	r7, r6
    57ae:	4635      	mov	r5, r6
    57b0:	f247 049c 	movw	r4, #28828	; 0x709c
    57b4:	f2c0 0402 	movt	r4, #2
            ifn = ((USB_INTERFACE_DESCRIPTOR *)pD)->bInterfaceNumber;
            alt = ((USB_INTERFACE_DESCRIPTOR *)pD)->bAlternateSetting;
            msk = 0;
            if ((ifn == SetupPacket.wIndex.WB.L) && (alt == SetupPacket.wValue.WB.L)) {
              set = TRUE;
              old = USB_AltSetting[ifn];
    57b8:	f242 537c 	movw	r3, #9596	; 0x257c
    57bc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    57c0:	9302      	str	r3, [sp, #8]
                USB_EnableEP(n);
                USB_ResetEP(n);
                msk |= m;
              }
              else if ((alt == old) && ((msk & m) == 0)) {
                USB_EndPointMask &= ~m;
    57c2:	f242 5888 	movw	r8, #9608	; 0x2588
    57c6:	f2c1 0800 	movt	r8, #4096	; 0x1000
                USB_EndPointHalt &= ~m;
    57ca:	f242 5994 	movw	r9, #9620	; 0x2594
    57ce:	f2c1 0900 	movt	r9, #4096	; 0x1000
    57d2:	e087      	b.n	58e4 <USB_EndPoint0+0x7ec>
    case REQUEST_TO_INTERFACE:
      if (USB_Configuration == 0) return (FALSE);
      set = FALSE;
      pD  = (USB_COMMON_DESCRIPTOR *)USB_ConfigDescriptor;
      while (pD->bLength) {
        switch (pD->bDescriptorType) {
    57d4:	7863      	ldrb	r3, [r4, #1]
    57d6:	2b04      	cmp	r3, #4
    57d8:	d00f      	beq.n	57fa <USB_EndPoint0+0x702>
    57da:	2b05      	cmp	r3, #5
    57dc:	d02e      	beq.n	583c <USB_EndPoint0+0x744>
    57de:	2b02      	cmp	r3, #2
    57e0:	d17e      	bne.n	58e0 <USB_EndPoint0+0x7e8>
          case USB_CONFIGURATION_DESCRIPTOR_TYPE:
            if (((USB_CONFIGURATION_DESCRIPTOR *)pD)->bConfigurationValue != USB_Configuration) {
    57e2:	f242 5398 	movw	r3, #9624	; 0x2598
    57e6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    57ea:	7962      	ldrb	r2, [r4, #5]
    57ec:	781b      	ldrb	r3, [r3, #0]
    57ee:	429a      	cmp	r2, r3
//              (uint8_t *)pD += ((USB_CONFIGURATION_DESCRIPTOR *)pD)->wTotalLength;
            	tmp = (uint32_t)pD;
            	tmp += ((USB_CONFIGURATION_DESCRIPTOR *)pD)->wTotalLength;
    57f0:	bf1c      	itt	ne
    57f2:	8863      	ldrhne	r3, [r4, #2]
    57f4:	18e4      	addne	r4, r4, r3
      set = FALSE;
      pD  = (USB_COMMON_DESCRIPTOR *)USB_ConfigDescriptor;
      while (pD->bLength) {
        switch (pD->bDescriptorType) {
          case USB_CONFIGURATION_DESCRIPTOR_TYPE:
            if (((USB_CONFIGURATION_DESCRIPTOR *)pD)->bConfigurationValue != USB_Configuration) {
    57f6:	d175      	bne.n	58e4 <USB_EndPoint0+0x7ec>
    57f8:	e072      	b.n	58e0 <USB_EndPoint0+0x7e8>

              continue;
            }
            break;
          case USB_INTERFACE_DESCRIPTOR_TYPE:
            ifn = ((USB_INTERFACE_DESCRIPTOR *)pD)->bInterfaceNumber;
    57fa:	78a5      	ldrb	r5, [r4, #2]
            alt = ((USB_INTERFACE_DESCRIPTOR *)pD)->bAlternateSetting;
    57fc:	78e2      	ldrb	r2, [r4, #3]
    57fe:	4617      	mov	r7, r2
            msk = 0;
            if ((ifn == SetupPacket.wIndex.WB.L) && (alt == SetupPacket.wValue.WB.L)) {
    5800:	f242 539c 	movw	r3, #9628	; 0x259c
    5804:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5808:	791b      	ldrb	r3, [r3, #4]
    580a:	429d      	cmp	r5, r3
            }
            break;
          case USB_INTERFACE_DESCRIPTOR_TYPE:
            ifn = ((USB_INTERFACE_DESCRIPTOR *)pD)->bInterfaceNumber;
            alt = ((USB_INTERFACE_DESCRIPTOR *)pD)->bAlternateSetting;
            msk = 0;
    580c:	bf18      	it	ne
    580e:	f04f 0a00 	movne.w	sl, #0
            if ((ifn == SetupPacket.wIndex.WB.L) && (alt == SetupPacket.wValue.WB.L)) {
    5812:	d165      	bne.n	58e0 <USB_EndPoint0+0x7e8>
    5814:	f242 539c 	movw	r3, #9628	; 0x259c
    5818:	f2c1 0300 	movt	r3, #4096	; 0x1000
    581c:	789b      	ldrb	r3, [r3, #2]
    581e:	429a      	cmp	r2, r3
            }
            break;
          case USB_INTERFACE_DESCRIPTOR_TYPE:
            ifn = ((USB_INTERFACE_DESCRIPTOR *)pD)->bInterfaceNumber;
            alt = ((USB_INTERFACE_DESCRIPTOR *)pD)->bAlternateSetting;
            msk = 0;
    5820:	bf18      	it	ne
    5822:	f04f 0a00 	movne.w	sl, #0
            if ((ifn == SetupPacket.wIndex.WB.L) && (alt == SetupPacket.wValue.WB.L)) {
    5826:	d15b      	bne.n	58e0 <USB_EndPoint0+0x7e8>
              set = TRUE;
              old = USB_AltSetting[ifn];
    5828:	9b02      	ldr	r3, [sp, #8]
    582a:	5d5b      	ldrb	r3, [r3, r5]
    582c:	9301      	str	r3, [sp, #4]
              USB_AltSetting[ifn] = (uint8_t)alt;
    582e:	9b02      	ldr	r3, [sp, #8]
    5830:	555a      	strb	r2, [r3, r5]
          case USB_INTERFACE_DESCRIPTOR_TYPE:
            ifn = ((USB_INTERFACE_DESCRIPTOR *)pD)->bInterfaceNumber;
            alt = ((USB_INTERFACE_DESCRIPTOR *)pD)->bAlternateSetting;
            msk = 0;
            if ((ifn == SetupPacket.wIndex.WB.L) && (alt == SetupPacket.wValue.WB.L)) {
              set = TRUE;
    5832:	f04f 0601 	mov.w	r6, #1
            }
            break;
          case USB_INTERFACE_DESCRIPTOR_TYPE:
            ifn = ((USB_INTERFACE_DESCRIPTOR *)pD)->bInterfaceNumber;
            alt = ((USB_INTERFACE_DESCRIPTOR *)pD)->bAlternateSetting;
            msk = 0;
    5836:	f04f 0a00 	mov.w	sl, #0
    583a:	e051      	b.n	58e0 <USB_EndPoint0+0x7e8>
              old = USB_AltSetting[ifn];
              USB_AltSetting[ifn] = (uint8_t)alt;
            }
            break;
          case USB_ENDPOINT_DESCRIPTOR_TYPE:
            if (ifn == SetupPacket.wIndex.WB.L) {
    583c:	f242 539c 	movw	r3, #9628	; 0x259c
    5840:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5844:	791b      	ldrb	r3, [r3, #4]
    5846:	42ab      	cmp	r3, r5
    5848:	d14a      	bne.n	58e0 <USB_EndPoint0+0x7e8>
              n = ((USB_ENDPOINT_DESCRIPTOR *)pD)->bEndpointAddress & 0x8F;
    584a:	78a3      	ldrb	r3, [r4, #2]
    584c:	f003 028f 	and.w	r2, r3, #143	; 0x8f
    5850:	9200      	str	r2, [sp, #0]
              m = (n & 0x80) ? ((1 << 16) << (n & 0x0F)) : (1 << n);
    5852:	f013 0f80 	tst.w	r3, #128	; 0x80
    5856:	bf19      	ittee	ne
    5858:	f002 030f 	andne.w	r3, r2, #15
    585c:	f44f 3b80 	movne.w	fp, #65536	; 0x10000
    5860:	f04f 0b01 	moveq.w	fp, #1
    5864:	9b00      	ldreq	r3, [sp, #0]
    5866:	fa0b fb03 	lsl.w	fp, fp, r3
              if (alt == SetupPacket.wValue.WB.L) {
    586a:	f242 539c 	movw	r3, #9628	; 0x259c
    586e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5872:	789b      	ldrb	r3, [r3, #2]
    5874:	9303      	str	r3, [sp, #12]
    5876:	42bb      	cmp	r3, r7
    5878:	d118      	bne.n	58ac <USB_EndPoint0+0x7b4>
                USB_EndPointMask |=  m;
    587a:	f8d8 3000 	ldr.w	r3, [r8]
    587e:	ea4b 0303 	orr.w	r3, fp, r3
    5882:	f8c8 3000 	str.w	r3, [r8]
                USB_EndPointHalt &= ~m;
    5886:	f8d9 3000 	ldr.w	r3, [r9]
    588a:	ea23 030b 	bic.w	r3, r3, fp
    588e:	f8c9 3000 	str.w	r3, [r9]
                USB_ConfigEP((USB_ENDPOINT_DESCRIPTOR *)pD);
    5892:	4620      	mov	r0, r4
    5894:	f000 fada 	bl	5e4c <USB_ConfigEP>
                USB_EnableEP(n);
    5898:	9800      	ldr	r0, [sp, #0]
    589a:	f000 fb03 	bl	5ea4 <USB_EnableEP>
                USB_ResetEP(n);
    589e:	9800      	ldr	r0, [sp, #0]
    58a0:	f000 fb1e 	bl	5ee0 <USB_ResetEP>
                msk |= m;
    58a4:	ea4a 0a0b 	orr.w	sl, sl, fp
    58a8:	9f03      	ldr	r7, [sp, #12]
    58aa:	e019      	b.n	58e0 <USB_EndPoint0+0x7e8>
              }
              else if ((alt == old) && ((msk & m) == 0)) {
    58ac:	9a01      	ldr	r2, [sp, #4]
    58ae:	4297      	cmp	r7, r2
    58b0:	d116      	bne.n	58e0 <USB_EndPoint0+0x7e8>
    58b2:	ea1b 0f0a 	tst.w	fp, sl
    58b6:	d112      	bne.n	58de <USB_EndPoint0+0x7e6>
                USB_EndPointMask &= ~m;
    58b8:	ea6f 0b0b 	mvn.w	fp, fp
    58bc:	f8d8 3000 	ldr.w	r3, [r8]
    58c0:	ea0b 0303 	and.w	r3, fp, r3
    58c4:	f8c8 3000 	str.w	r3, [r8]
                USB_EndPointHalt &= ~m;
    58c8:	f8d9 3000 	ldr.w	r3, [r9]
    58cc:	ea0b 0303 	and.w	r3, fp, r3
    58d0:	f8c9 3000 	str.w	r3, [r9]
                USB_DisableEP(n);
    58d4:	9800      	ldr	r0, [sp, #0]
    58d6:	f000 faf3 	bl	5ec0 <USB_DisableEP>
    58da:	9701      	str	r7, [sp, #4]
    58dc:	e000      	b.n	58e0 <USB_EndPoint0+0x7e8>
                USB_ConfigEP((USB_ENDPOINT_DESCRIPTOR *)pD);
                USB_EnableEP(n);
                USB_ResetEP(n);
                msk |= m;
              }
              else if ((alt == old) && ((msk & m) == 0)) {
    58de:	9701      	str	r7, [sp, #4]
            }
           break;
        }
//        (uint8_t *)pD += pD->bLength;
			tmp = (uint32_t)pD;
			tmp += pD->bLength;
    58e0:	7823      	ldrb	r3, [r4, #0]
    58e2:	18e4      	adds	r4, r4, r3
  switch (SetupPacket.bmRequestType.BM.Recipient) {
    case REQUEST_TO_INTERFACE:
      if (USB_Configuration == 0) return (FALSE);
      set = FALSE;
      pD  = (USB_COMMON_DESCRIPTOR *)USB_ConfigDescriptor;
      while (pD->bLength) {
    58e4:	7823      	ldrb	r3, [r4, #0]
    58e6:	2b00      	cmp	r3, #0
    58e8:	f47f af74 	bne.w	57d4 <USB_EndPoint0+0x6dc>
              }
              USB_DataInStage();
              break;

            case USB_REQUEST_SET_INTERFACE:
              if (!USB_ReqSetInterface()) {
    58ec:	2e00      	cmp	r6, #0
    58ee:	f000 80a4 	beq.w	5a3a <USB_EndPoint0+0x942>
                goto stall_i;
              }
              USB_StatusInStage();
    58f2:	f7ff fbed 	bl	50d0 <USB_StatusInStage>
#if USB_INTERFACE_EVENT
              USB_Interface_Event();
#endif
              break;
    58f6:	e137      	b.n	5b68 <USB_EndPoint0+0xa70>
          }
          break;  /* end case REQUEST_STANDARD */

#if USB_CLASS
        case REQUEST_CLASS:
          switch (SetupPacket.bmRequestType.BM.Recipient) {
    58f8:	f242 539c 	movw	r3, #9628	; 0x259c
    58fc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5900:	781b      	ldrb	r3, [r3, #0]
    5902:	f003 031f 	and.w	r3, r3, #31
    5906:	2b01      	cmp	r3, #1
    5908:	f040 8097 	bne.w	5a3a <USB_EndPoint0+0x942>
                    goto setup_class_ok;
                }
              }
#endif  /* USB_AUDIO */
#if USB_CDC
              if ((SetupPacket.wIndex.WB.L == USB_CDC_CIF_NUM)  ||       /* IF number correct? */
    590c:	f242 539c 	movw	r3, #9628	; 0x259c
    5910:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5914:	791b      	ldrb	r3, [r3, #4]
    5916:	2b01      	cmp	r3, #1
    5918:	f200 808f 	bhi.w	5a3a <USB_EndPoint0+0x942>
                  (SetupPacket.wIndex.WB.L == USB_CDC_DIF_NUM)) {
                switch (SetupPacket.bRequest) {
    591c:	f242 539c 	movw	r3, #9628	; 0x259c
    5920:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5924:	785b      	ldrb	r3, [r3, #1]
    5926:	2b23      	cmp	r3, #35	; 0x23
    5928:	f200 8087 	bhi.w	5a3a <USB_EndPoint0+0x942>
    592c:	e8df f003 	tbb	[pc, r3]
    5930:	362c1c12 	.word	0x362c1c12
    5934:	8585854b 	.word	0x8585854b
    5938:	85858585 	.word	0x85858585
    593c:	85858585 	.word	0x85858585
    5940:	85858585 	.word	0x85858585
    5944:	85858585 	.word	0x85858585
    5948:	85858585 	.word	0x85858585
    594c:	85858585 	.word	0x85858585
    5950:	7a6f6056 	.word	0x7a6f6056
                  case CDC_SEND_ENCAPSULATED_COMMAND:
                    EP0Data.pData = EP0Buf;                              /* data to be received, see USB_EVT_OUT */
    5954:	f242 53a8 	movw	r3, #9640	; 0x25a8
    5958:	f2c1 0300 	movt	r3, #4096	; 0x1000
    595c:	f242 5280 	movw	r2, #9600	; 0x2580
    5960:	f2c1 0200 	movt	r2, #4096	; 0x1000
    5964:	601a      	str	r2, [r3, #0]
                    goto setup_class_ok;
    5966:	e0ff      	b.n	5b68 <USB_EndPoint0+0xa70>
                  case CDC_GET_ENCAPSULATED_RESPONSE:
                    if (CDC_GetEncapsulatedResponse()) {
    5968:	f7ff fa1a 	bl	4da0 <CDC_GetEncapsulatedResponse>
    596c:	2800      	cmp	r0, #0
    596e:	d064      	beq.n	5a3a <USB_EndPoint0+0x942>
                      EP0Data.pData = EP0Buf;                            /* point to data to be sent */
    5970:	f242 53a8 	movw	r3, #9640	; 0x25a8
    5974:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5978:	f242 5280 	movw	r2, #9600	; 0x2580
    597c:	f2c1 0200 	movt	r2, #4096	; 0x1000
    5980:	601a      	str	r2, [r3, #0]
                      USB_DataInStage();                                 /* send requested data */
    5982:	f7ff fb7d 	bl	5080 <USB_DataInStage>
                      goto setup_class_ok;
    5986:	e0ef      	b.n	5b68 <USB_EndPoint0+0xa70>
                    }
                    break;
                  case CDC_SET_COMM_FEATURE:
                    EP0Data.pData = EP0Buf;                              /* data to be received, see USB_EVT_OUT */
    5988:	f242 53a8 	movw	r3, #9640	; 0x25a8
    598c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5990:	f242 5280 	movw	r2, #9600	; 0x2580
    5994:	f2c1 0200 	movt	r2, #4096	; 0x1000
    5998:	601a      	str	r2, [r3, #0]
                    goto setup_class_ok;
    599a:	e0e5      	b.n	5b68 <USB_EndPoint0+0xa70>
                  case CDC_GET_COMM_FEATURE:
                    if (CDC_GetCommFeature(SetupPacket.wValue.W)) {
    599c:	f242 539c 	movw	r3, #9628	; 0x259c
    59a0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    59a4:	8858      	ldrh	r0, [r3, #2]
    59a6:	f7ff fa03 	bl	4db0 <CDC_GetCommFeature>
    59aa:	2800      	cmp	r0, #0
    59ac:	d045      	beq.n	5a3a <USB_EndPoint0+0x942>
                      EP0Data.pData = EP0Buf;                            /* point to data to be sent */
    59ae:	f242 53a8 	movw	r3, #9640	; 0x25a8
    59b2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    59b6:	f242 5280 	movw	r2, #9600	; 0x2580
    59ba:	f2c1 0200 	movt	r2, #4096	; 0x1000
    59be:	601a      	str	r2, [r3, #0]
                      USB_DataInStage();                                 /* send requested data */
    59c0:	f7ff fb5e 	bl	5080 <USB_DataInStage>
                      goto setup_class_ok;
    59c4:	e0d0      	b.n	5b68 <USB_EndPoint0+0xa70>
                    }
                    break;
                  case CDC_CLEAR_COMM_FEATURE:
                    if (CDC_ClearCommFeature(SetupPacket.wValue.W)) {
    59c6:	f242 539c 	movw	r3, #9628	; 0x259c
    59ca:	f2c1 0300 	movt	r3, #4096	; 0x1000
    59ce:	8858      	ldrh	r0, [r3, #2]
    59d0:	f7ff f9f2 	bl	4db8 <CDC_ClearCommFeature>
    59d4:	b388      	cbz	r0, 5a3a <USB_EndPoint0+0x942>
                      USB_StatusInStage();                               /* send Acknowledge */
    59d6:	f7ff fb7b 	bl	50d0 <USB_StatusInStage>
                      goto setup_class_ok;
    59da:	e0c5      	b.n	5b68 <USB_EndPoint0+0xa70>
                    }
                    break;
                  case CDC_SET_LINE_CODING:
                    EP0Data.pData = EP0Buf;                              /* data to be received, see USB_EVT_OUT */
    59dc:	f242 53a8 	movw	r3, #9640	; 0x25a8
    59e0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    59e4:	f242 5280 	movw	r2, #9600	; 0x2580
    59e8:	f2c1 0200 	movt	r2, #4096	; 0x1000
    59ec:	601a      	str	r2, [r3, #0]
                    goto setup_class_ok;
    59ee:	e0bb      	b.n	5b68 <USB_EndPoint0+0xa70>
                  case CDC_GET_LINE_CODING:
                    if (CDC_GetLineCoding()) {
    59f0:	f7ff fa04 	bl	4dfc <CDC_GetLineCoding>
    59f4:	b308      	cbz	r0, 5a3a <USB_EndPoint0+0x942>
                      EP0Data.pData = EP0Buf;                            /* point to data to be sent */
    59f6:	f242 53a8 	movw	r3, #9640	; 0x25a8
    59fa:	f2c1 0300 	movt	r3, #4096	; 0x1000
    59fe:	f242 5280 	movw	r2, #9600	; 0x2580
    5a02:	f2c1 0200 	movt	r2, #4096	; 0x1000
    5a06:	601a      	str	r2, [r3, #0]
                      USB_DataInStage();                                 /* send requested data */
    5a08:	f7ff fb3a 	bl	5080 <USB_DataInStage>
                      goto setup_class_ok;
    5a0c:	e0ac      	b.n	5b68 <USB_EndPoint0+0xa70>
                    }
                    break;
                  case CDC_SET_CONTROL_LINE_STATE:
                    if (CDC_SetControlLineState(SetupPacket.wValue.W)) {
    5a0e:	f242 539c 	movw	r3, #9628	; 0x259c
    5a12:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5a16:	8858      	ldrh	r0, [r3, #2]
    5a18:	f7ff fa0c 	bl	4e34 <CDC_SetControlLineState>
    5a1c:	b168      	cbz	r0, 5a3a <USB_EndPoint0+0x942>
                      USB_StatusInStage();                               /* send Acknowledge */
    5a1e:	f7ff fb57 	bl	50d0 <USB_StatusInStage>
                      goto setup_class_ok;
    5a22:	e0a1      	b.n	5b68 <USB_EndPoint0+0xa70>
                    }
                    break;
                  case CDC_SEND_BREAK:
                    if (CDC_SendBreak(SetupPacket.wValue.W)) {
    5a24:	f242 539c 	movw	r3, #9628	; 0x259c
    5a28:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5a2c:	8858      	ldrh	r0, [r3, #2]
    5a2e:	f7ff fa05 	bl	4e3c <CDC_SendBreak>
    5a32:	b110      	cbz	r0, 5a3a <USB_EndPoint0+0x942>
                      USB_StatusInStage();                               /* send Acknowledge */
    5a34:	f7ff fb4c 	bl	50d0 <USB_StatusInStage>
                      goto setup_class_ok;
    5a38:	e096      	b.n	5b68 <USB_EndPoint0+0xa70>

          break;  /* end case REQUEST_VENDOR */
#endif  /* USB_VENDOR */

        default:
stall_i:  USB_SetStallEP(0x80);
    5a3a:	f04f 0080 	mov.w	r0, #128	; 0x80
    5a3e:	f000 fa5d 	bl	5efc <USB_SetStallEP>
          EP0Data.Count = 0;
    5a42:	f242 53a8 	movw	r3, #9640	; 0x25a8
    5a46:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5a4a:	f04f 0200 	mov.w	r2, #0
    5a4e:	809a      	strh	r2, [r3, #4]
          break;
    5a50:	e08a      	b.n	5b68 <USB_EndPoint0+0xa70>
      }
      break;  /* end case USB_EVT_SETUP */

    case USB_EVT_OUT:
      if (SetupPacket.bmRequestType.BM.Dir == REQUEST_HOST_TO_DEVICE) {
    5a52:	f242 539c 	movw	r3, #9628	; 0x259c
    5a56:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5a5a:	781b      	ldrb	r3, [r3, #0]
    5a5c:	f013 0f80 	tst.w	r3, #128	; 0x80
    5a60:	d14d      	bne.n	5afe <USB_EndPoint0+0xa06>
        if (EP0Data.Count) {                                             /* still data to receive ? */
    5a62:	f242 53a8 	movw	r3, #9640	; 0x25a8
    5a66:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5a6a:	889b      	ldrh	r3, [r3, #4]
    5a6c:	2b00      	cmp	r3, #0
    5a6e:	d07b      	beq.n	5b68 <USB_EndPoint0+0xa70>
          USB_DataOutStage();                                            /* receive data */
    5a70:	f7ff fb1c 	bl	50ac <USB_DataOutStage>
          if (EP0Data.Count == 0) {                                      /* data complete ? */
    5a74:	f242 53a8 	movw	r3, #9640	; 0x25a8
    5a78:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5a7c:	889b      	ldrh	r3, [r3, #4]
    5a7e:	2b00      	cmp	r3, #0
    5a80:	d172      	bne.n	5b68 <USB_EndPoint0+0xa70>
            switch (SetupPacket.bmRequestType.BM.Type) {
    5a82:	f242 539c 	movw	r3, #9628	; 0x259c
    5a86:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5a8a:	781b      	ldrb	r3, [r3, #0]
    5a8c:	f3c3 1341 	ubfx	r3, r3, #5, #2
    5a90:	2b01      	cmp	r3, #1
    5a92:	d1d2      	bne.n	5a3a <USB_EndPoint0+0x942>
              case REQUEST_STANDARD:
                goto stall_i;                                            /* not supported */

#if (USB_CLASS)
              case REQUEST_CLASS:
                switch (SetupPacket.bmRequestType.BM.Recipient) {
    5a94:	f242 539c 	movw	r3, #9628	; 0x259c
    5a98:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5a9c:	781b      	ldrb	r3, [r3, #0]
    5a9e:	f003 031f 	and.w	r3, r3, #31
    5aa2:	2b01      	cmp	r3, #1
    5aa4:	d1c9      	bne.n	5a3a <USB_EndPoint0+0x942>
                          break;
                      }
                    }
#endif  /* USB_AUDIO */
#if USB_CDC
                    if ((SetupPacket.wIndex.WB.L == USB_CDC_CIF_NUM)  || /* IF number correct? */
    5aa6:	f242 539c 	movw	r3, #9628	; 0x259c
    5aaa:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5aae:	791b      	ldrb	r3, [r3, #4]
    5ab0:	2b01      	cmp	r3, #1
    5ab2:	d8c2      	bhi.n	5a3a <USB_EndPoint0+0x942>
                        (SetupPacket.wIndex.WB.L == USB_CDC_DIF_NUM)) {
                      switch (SetupPacket.bRequest) {
    5ab4:	f242 539c 	movw	r3, #9628	; 0x259c
    5ab8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5abc:	785b      	ldrb	r3, [r3, #1]
    5abe:	2b02      	cmp	r3, #2
    5ac0:	d00a      	beq.n	5ad8 <USB_EndPoint0+0x9e0>
    5ac2:	2b20      	cmp	r3, #32
    5ac4:	d014      	beq.n	5af0 <USB_EndPoint0+0x9f8>
    5ac6:	2b00      	cmp	r3, #0
    5ac8:	d1b7      	bne.n	5a3a <USB_EndPoint0+0x942>
                        case CDC_SEND_ENCAPSULATED_COMMAND:
                          if (CDC_SendEncapsulatedCommand()) {
    5aca:	f7ff f965 	bl	4d98 <CDC_SendEncapsulatedCommand>
    5ace:	2800      	cmp	r0, #0
    5ad0:	d0b3      	beq.n	5a3a <USB_EndPoint0+0x942>
                            USB_StatusInStage();                         /* send Acknowledge */
    5ad2:	f7ff fafd 	bl	50d0 <USB_StatusInStage>
                            goto out_class_ok;
    5ad6:	e047      	b.n	5b68 <USB_EndPoint0+0xa70>
                          }
                          break;
                        case CDC_SET_COMM_FEATURE:
                          if (CDC_SetCommFeature(SetupPacket.wValue.W)) {
    5ad8:	f242 539c 	movw	r3, #9628	; 0x259c
    5adc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5ae0:	8858      	ldrh	r0, [r3, #2]
    5ae2:	f7ff f961 	bl	4da8 <CDC_SetCommFeature>
    5ae6:	2800      	cmp	r0, #0
    5ae8:	d0a7      	beq.n	5a3a <USB_EndPoint0+0x942>
                            USB_StatusInStage();                         /* send Acknowledge */
    5aea:	f7ff faf1 	bl	50d0 <USB_StatusInStage>
                            goto out_class_ok;
    5aee:	e03b      	b.n	5b68 <USB_EndPoint0+0xa70>
                          }
                          break;
                        case CDC_SET_LINE_CODING:
                          if (CDC_SetLineCoding()) {
    5af0:	f7ff f966 	bl	4dc0 <CDC_SetLineCoding>
    5af4:	2800      	cmp	r0, #0
    5af6:	d0a0      	beq.n	5a3a <USB_EndPoint0+0x942>
                            USB_StatusInStage();                         /* send Acknowledge */
    5af8:	f7ff faea 	bl	50d0 <USB_StatusInStage>
                            goto out_class_ok;
    5afc:	e034      	b.n	5b68 <USB_EndPoint0+0xa70>
                goto stall_i;
            }
          }
        }
      } else {
        USB_StatusOutStage();                                            /* receive Acknowledge */
    5afe:	f7ff faf1 	bl	50e4 <USB_StatusOutStage>
    5b02:	e031      	b.n	5b68 <USB_EndPoint0+0xa70>
      }
      break;  /* end case USB_EVT_OUT */

    case USB_EVT_IN :
      if (SetupPacket.bmRequestType.BM.Dir == REQUEST_DEVICE_TO_HOST) {
    5b04:	f242 539c 	movw	r3, #9628	; 0x259c
    5b08:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5b0c:	781b      	ldrb	r3, [r3, #0]
    5b0e:	f013 0f80 	tst.w	r3, #128	; 0x80
    5b12:	d002      	beq.n	5b1a <USB_EndPoint0+0xa22>
        USB_DataInStage();                                               /* send data */
    5b14:	f7ff fab4 	bl	5080 <USB_DataInStage>
    5b18:	e026      	b.n	5b68 <USB_EndPoint0+0xa70>
      } else {
        if (USB_DeviceAddress & 0x80) {
    5b1a:	f242 538c 	movw	r3, #9612	; 0x258c
    5b1e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5b22:	781b      	ldrb	r3, [r3, #0]
    5b24:	f013 0f80 	tst.w	r3, #128	; 0x80
    5b28:	d01e      	beq.n	5b68 <USB_EndPoint0+0xa70>
          USB_DeviceAddress &= 0x7F;
    5b2a:	f003 007f 	and.w	r0, r3, #127	; 0x7f
    5b2e:	f242 528c 	movw	r2, #9612	; 0x258c
    5b32:	f2c1 0200 	movt	r2, #4096	; 0x1000
    5b36:	7010      	strb	r0, [r2, #0]
          USB_SetAddress(USB_DeviceAddress);
    5b38:	f000 f8e8 	bl	5d0c <USB_SetAddress>
    5b3c:	e014      	b.n	5b68 <USB_EndPoint0+0xa70>
        }
      }
      break;  /* end case USB_EVT_IN */

    case USB_EVT_OUT_STALL:
      USB_ClrStallEP(0x00);
    5b3e:	f04f 0000 	mov.w	r0, #0
    5b42:	f000 f9eb 	bl	5f1c <USB_ClrStallEP>
      break;
    5b46:	e00f      	b.n	5b68 <USB_EndPoint0+0xa70>

    case USB_EVT_IN_STALL:
      USB_ClrStallEP(0x80);
    5b48:	f04f 0080 	mov.w	r0, #128	; 0x80
    5b4c:	f000 f9e6 	bl	5f1c <USB_ClrStallEP>
      break;
    5b50:	e00a      	b.n	5b68 <USB_EndPoint0+0xa70>
          switch (SetupPacket.bRequest) {
            case USB_REQUEST_GET_STATUS:
              if (!USB_ReqGetStatus()) {
                goto stall_i;
              }
              USB_DataInStage();
    5b52:	f7ff fa95 	bl	5080 <USB_DataInStage>
              break;
    5b56:	e007      	b.n	5b68 <USB_EndPoint0+0xa70>

            case USB_REQUEST_CLEAR_FEATURE:
              if (!USB_ReqSetClrFeature(0)) {
                goto stall_i;
              }
              USB_StatusInStage();
    5b58:	f7ff faba 	bl	50d0 <USB_StatusInStage>
#if USB_FEATURE_EVENT
              USB_Feature_Event();
#endif
              break;
    5b5c:	e004      	b.n	5b68 <USB_EndPoint0+0xa70>

            case USB_REQUEST_SET_FEATURE:
              if (!USB_ReqSetClrFeature(1)) {
                goto stall_i;
              }
              USB_StatusInStage();
    5b5e:	f7ff fab7 	bl	50d0 <USB_StatusInStage>
#if USB_FEATURE_EVENT
              USB_Feature_Event();
#endif
              break;
    5b62:	e001      	b.n	5b68 <USB_EndPoint0+0xa70>

            case USB_REQUEST_GET_DESCRIPTOR:
              if (!USB_ReqGetDescriptor()) {
                goto stall_i;
              }
              USB_DataInStage();
    5b64:	f7ff fa8c 	bl	5080 <USB_DataInStage>
    case USB_EVT_IN_STALL:
      USB_ClrStallEP(0x80);
      break;

  }
}
    5b68:	b005      	add	sp, #20
    5b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5b6e:	bf00      	nop

00005b70 <EPAdr>:
 *                       EPNum.0..3: Address
 *                       EPNum.7:    Dir
 *    Return Value:    Endpoint Physical Address
 */

uint32_t EPAdr (uint32_t EPNum) {
    5b70:	4603      	mov	r3, r0
  uint32_t val;

  val = (EPNum & 0x0F) << 1;
    5b72:	f000 000f 	and.w	r0, r0, #15
    5b76:	ea4f 0040 	mov.w	r0, r0, lsl #1
  if (EPNum & 0x80) {
    5b7a:	f013 0f80 	tst.w	r3, #128	; 0x80
    val += 1;
    5b7e:	bf18      	it	ne
    5b80:	3001      	addne	r0, #1
  }
  return (val);
}
    5b82:	4770      	bx	lr

00005b84 <WrCmd>:
 *    Return Value:    None
 */

void WrCmd (uint32_t cmd) {

  LPC_USB->USBDevIntClr = CCEMTY_INT;
    5b84:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    5b88:	f2c5 0300 	movt	r3, #20480	; 0x5000
    5b8c:	f04f 0210 	mov.w	r2, #16
    5b90:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  LPC_USB->USBCmdCode = cmd;
    5b94:	f8c3 0210 	str.w	r0, [r3, #528]	; 0x210
  while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0);
    5b98:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    5b9c:	f2c5 0200 	movt	r2, #20480	; 0x5000
    5ba0:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    5ba4:	f013 0f10 	tst.w	r3, #16
    5ba8:	d0fa      	beq.n	5ba0 <WrCmd+0x1c>
}
    5baa:	4770      	bx	lr

00005bac <WrCmdDat>:
 *    Return Value:    None
 */

void WrCmdDat (uint32_t cmd, uint32_t val) {

  LPC_USB->USBDevIntClr = CCEMTY_INT;
    5bac:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    5bb0:	f2c5 0300 	movt	r3, #20480	; 0x5000
    5bb4:	f04f 0210 	mov.w	r2, #16
    5bb8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  LPC_USB->USBCmdCode = cmd;
    5bbc:	f8c3 0210 	str.w	r0, [r3, #528]	; 0x210
  while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0);
    5bc0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    5bc4:	f2c5 0200 	movt	r2, #20480	; 0x5000
    5bc8:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    5bcc:	f013 0f10 	tst.w	r3, #16
    5bd0:	d0fa      	beq.n	5bc8 <WrCmdDat+0x1c>
  LPC_USB->USBDevIntClr = CCEMTY_INT;
    5bd2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    5bd6:	f2c5 0300 	movt	r3, #20480	; 0x5000
    5bda:	f04f 0210 	mov.w	r2, #16
    5bde:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  LPC_USB->USBCmdCode = val;
    5be2:	f8c3 1210 	str.w	r1, [r3, #528]	; 0x210
  while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0);
    5be6:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    5bea:	f2c5 0200 	movt	r2, #20480	; 0x5000
    5bee:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    5bf2:	f013 0f10 	tst.w	r3, #16
    5bf6:	d0fa      	beq.n	5bee <WrCmdDat+0x42>
}
    5bf8:	4770      	bx	lr
    5bfa:	bf00      	nop

00005bfc <WrCmdEP>:
 *    Parameters:      cmd:   Command
 *                     val:   Data
 *    Return Value:    None
 */

void WrCmdEP (uint32_t EPNum, uint32_t cmd){
    5bfc:	b538      	push	{r3, r4, r5, lr}
    5bfe:	460d      	mov	r5, r1

  LPC_USB->USBDevIntClr = CCEMTY_INT;
    5c00:	f44f 4440 	mov.w	r4, #49152	; 0xc000
    5c04:	f2c5 0400 	movt	r4, #20480	; 0x5000
    5c08:	f04f 0310 	mov.w	r3, #16
    5c0c:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
  LPC_USB->USBCmdCode = CMD_SEL_EP(EPAdr(EPNum));
    5c10:	f7ff ffae 	bl	5b70 <EPAdr>
    5c14:	ea4f 4300 	mov.w	r3, r0, lsl #16
    5c18:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    5c1c:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0);
    5c20:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    5c24:	f2c5 0200 	movt	r2, #20480	; 0x5000
    5c28:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    5c2c:	f013 0f10 	tst.w	r3, #16
    5c30:	d0fa      	beq.n	5c28 <WrCmdEP+0x2c>
  LPC_USB->USBDevIntClr = CCEMTY_INT;
    5c32:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    5c36:	f2c5 0300 	movt	r3, #20480	; 0x5000
    5c3a:	f04f 0210 	mov.w	r2, #16
    5c3e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  LPC_USB->USBCmdCode = cmd;
    5c42:	f8c3 5210 	str.w	r5, [r3, #528]	; 0x210
  while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0);
    5c46:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    5c4a:	f2c5 0200 	movt	r2, #20480	; 0x5000
    5c4e:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    5c52:	f013 0f10 	tst.w	r3, #16
    5c56:	d0fa      	beq.n	5c4e <WrCmdEP+0x52>
}
    5c58:	bd38      	pop	{r3, r4, r5, pc}
    5c5a:	bf00      	nop

00005c5c <RdCmdDat>:
 *    Return Value:    Data Value
 */

uint32_t RdCmdDat (uint32_t cmd) {

  LPC_USB->USBDevIntClr = CCEMTY_INT | CDFULL_INT;
    5c5c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    5c60:	f2c5 0300 	movt	r3, #20480	; 0x5000
    5c64:	f04f 0230 	mov.w	r2, #48	; 0x30
    5c68:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  LPC_USB->USBCmdCode = cmd;
    5c6c:	f8c3 0210 	str.w	r0, [r3, #528]	; 0x210
  while ((LPC_USB->USBDevIntSt & CDFULL_INT) == 0);
    5c70:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    5c74:	f2c5 0200 	movt	r2, #20480	; 0x5000
    5c78:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    5c7c:	f013 0f20 	tst.w	r3, #32
    5c80:	d0fa      	beq.n	5c78 <RdCmdDat+0x1c>
  return (LPC_USB->USBCmdData);
    5c82:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    5c86:	f2c5 0300 	movt	r3, #20480	; 0x5000
    5c8a:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
}
    5c8e:	4770      	bx	lr

00005c90 <USB_Connect>:
 *   Called by the User to Connect/Disconnect USB
 *    Parameters:      con:   Connect/Disconnect
 *    Return Value:    None
 */

void USB_Connect (uint32_t con) {
    5c90:	b508      	push	{r3, lr}
  WrCmdDat(CMD_SET_DEV_STAT, DAT_WR_BYTE(con ? DEV_CON : 0));
    5c92:	f44f 7180 	mov.w	r1, #256	; 0x100
    5c96:	f2c0 0101 	movt	r1, #1
    5c9a:	2800      	cmp	r0, #0
    5c9c:	bf08      	it	eq
    5c9e:	f44f 7180 	moveq.w	r1, #256	; 0x100
    5ca2:	f44f 60a0 	mov.w	r0, #1280	; 0x500
    5ca6:	f2c0 00fe 	movt	r0, #254	; 0xfe
    5caa:	f7ff ff7f 	bl	5bac <WrCmdDat>
}
    5cae:	bd08      	pop	{r3, pc}

00005cb0 <USB_Reset>:
void USB_Reset (void) {
#if USB_DMA
  uint32_t n;
#endif

  LPC_USB->USBEpInd = 0;
    5cb0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    5cb4:	f2c5 0300 	movt	r3, #20480	; 0x5000
    5cb8:	f04f 0200 	mov.w	r2, #0
    5cbc:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
  LPC_USB->USBMaxPSize = USB_MAX_PACKET0;
    5cc0:	f04f 0208 	mov.w	r2, #8
    5cc4:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
  LPC_USB->USBEpInd = 1;
    5cc8:	f04f 0101 	mov.w	r1, #1
    5ccc:	f8c3 1248 	str.w	r1, [r3, #584]	; 0x248
  LPC_USB->USBMaxPSize = USB_MAX_PACKET0;
    5cd0:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
  while ((LPC_USB->USBDevIntSt & EP_RLZED_INT) == 0);
    5cd4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    5cd8:	f2c5 0200 	movt	r2, #20480	; 0x5000
    5cdc:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    5ce0:	f413 7f80 	tst.w	r3, #256	; 0x100
    5ce4:	d0fa      	beq.n	5cdc <USB_Reset+0x2c>

  LPC_USB->USBEpIntClr  = 0xFFFFFFFF;
    5ce6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    5cea:	f2c5 0300 	movt	r3, #20480	; 0x5000
    5cee:	f04f 32ff 	mov.w	r2, #4294967295
    5cf2:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  LPC_USB->USBEpIntEn   = 0xFFFFFFFF ^ USB_DMA_EP;
    5cf6:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  LPC_USB->USBDevIntClr = 0xFFFFFFFF;
    5cfa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  LPC_USB->USBDevIntEn  = DEV_STAT_INT    | EP_SLOW_INT    |
    5cfe:	f04f 020c 	mov.w	r2, #12
    5d02:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  for (n = 0; n < USB_EP_NUM; n++) {
    udca[n] = 0;
    UDCA[n] = 0;
  }
#endif
}
    5d06:	4770      	bx	lr

00005d08 <USB_WakeUpCfg>:
 *    Return Value:    None
 */

void USB_WakeUpCfg (uint32_t cfg) {
  /* Not needed */
}
    5d08:	4770      	bx	lr
    5d0a:	bf00      	nop

00005d0c <USB_SetAddress>:
 *  USB Set Address Function
 *    Parameters:      adr:   USB Address
 *    Return Value:    None
 */

void USB_SetAddress (uint32_t adr) {
    5d0c:	b538      	push	{r3, r4, r5, lr}
  WrCmdDat(CMD_SET_ADDR, DAT_WR_BYTE(DEV_EN | adr)); /* Don't wait for next */
    5d0e:	f040 0580 	orr.w	r5, r0, #128	; 0x80
    5d12:	ea4f 4505 	mov.w	r5, r5, lsl #16
    5d16:	f445 7580 	orr.w	r5, r5, #256	; 0x100
    5d1a:	f44f 64a0 	mov.w	r4, #1280	; 0x500
    5d1e:	f2c0 04d0 	movt	r4, #208	; 0xd0
    5d22:	4620      	mov	r0, r4
    5d24:	4629      	mov	r1, r5
    5d26:	f7ff ff41 	bl	5bac <WrCmdDat>
  WrCmdDat(CMD_SET_ADDR, DAT_WR_BYTE(DEV_EN | adr)); /*  Setup Status Phase */
    5d2a:	4620      	mov	r0, r4
    5d2c:	4629      	mov	r1, r5
    5d2e:	f7ff ff3d 	bl	5bac <WrCmdDat>
}
    5d32:	bd38      	pop	{r3, r4, r5, pc}

00005d34 <USB_Init>:
 *  USB Initialize Function
 *   Called by the User to initialize USB
 *    Return Value:    None
 */

void USB_Init (void) {
    5d34:	b508      	push	{r3, lr}
//	UART_32_HEX((LPC_UART_TypeDef *)LPC_UART2, 0x01010101);

  LPC_PINCON->PINSEL1 &= ~((3<<26)|(3<<28));   /* P0.29 D+, P0.30 D- */
    5d36:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    5d3a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    5d3e:	685a      	ldr	r2, [r3, #4]
    5d40:	f022 5270 	bic.w	r2, r2, #1006632960	; 0x3c000000
    5d44:	605a      	str	r2, [r3, #4]
  LPC_PINCON->PINSEL1 |=  ((1<<26)|(1<<28));   /* PINSEL1 26.27, 28.29  = 01 */
    5d46:	685a      	ldr	r2, [r3, #4]
    5d48:	f042 52a0 	orr.w	r2, r2, #335544320	; 0x14000000
    5d4c:	605a      	str	r2, [r3, #4]
//  UART_32_HEX((LPC_UART_TypeDef *)LPC_UART2, 0x02020202);

  LPC_PINCON->PINSEL3 &= ~((3<< 4)|(3<<28));   /* P1.18 GoodLink, P1.30 VBUS */
    5d4e:	68da      	ldr	r2, [r3, #12]
    5d50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
    5d54:	f022 0230 	bic.w	r2, r2, #48	; 0x30
    5d58:	60da      	str	r2, [r3, #12]
  LPC_PINCON->PINSEL3 |=  ((1<< 4)|(2<<28));   /* PINSEL3 4.5 = 01, 28.29 = 10 */
    5d5a:	68da      	ldr	r2, [r3, #12]
    5d5c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
    5d60:	f042 0210 	orr.w	r2, r2, #16
    5d64:	60da      	str	r2, [r3, #12]
//  UART_32_HEX((LPC_UART_TypeDef *)LPC_UART2, 0x03030303);

  LPC_PINCON->PINSEL4 &= ~((3<<18)        );   /* P2.9 SoftConnect */
    5d66:	691a      	ldr	r2, [r3, #16]
    5d68:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
    5d6c:	611a      	str	r2, [r3, #16]
  LPC_PINCON->PINSEL4 |=  ((1<<18)        );   /* PINSEL4 18.19 = 01 */
    5d6e:	691a      	ldr	r2, [r3, #16]
    5d70:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
    5d74:	611a      	str	r2, [r3, #16]
//  UART_32_HEX((LPC_UART_TypeDef *)LPC_UART2, 0x04040404);

  // P1.18 -> USB_UP_LED
  // P1.30 -> VBUS
  LPC_PINCON->PINSEL3 &= ~0x30000030;
    5d76:	68da      	ldr	r2, [r3, #12]
    5d78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
    5d7c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
    5d80:	60da      	str	r2, [r3, #12]
  LPC_PINCON->PINSEL3 |= 0x20000010;
    5d82:	68da      	ldr	r2, [r3, #12]
    5d84:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
    5d88:	f042 0210 	orr.w	r2, r2, #16
    5d8c:	60da      	str	r2, [r3, #12]
//  UART_32_HEX((LPC_UART_TypeDef *)LPC_UART2, 0x05050505);

  LPC_SC->PCONP |= (1UL<<31);                /* USB PCLK -> enable USB Per.       */
    5d8e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    5d92:	f2c4 030f 	movt	r3, #16399	; 0x400f
    5d96:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
    5d9a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    5d9e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
//  UART_32_HEX((LPC_UART_TypeDef *)LPC_UART2, 0x06060606);

  LPC_USB->USBClkCtrl = 0x1A;                /* Dev, PortSel, AHB clock enable */
    5da2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    5da6:	f2c5 0300 	movt	r3, #20480	; 0x5000
    5daa:	f04f 021a 	mov.w	r2, #26
    5dae:	f8c3 2ff4 	str.w	r2, [r3, #4084]	; 0xff4
//  UART_32_HEX((LPC_UART_TypeDef *)LPC_UART2, 0x07070707);
  while ((LPC_USB->USBClkSt & 0x1A) != 0x1A);
    5db2:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    5db6:	f2c5 0200 	movt	r2, #20480	; 0x5000
    5dba:	f8d2 3ff8 	ldr.w	r3, [r2, #4088]	; 0xff8
    5dbe:	f003 031a 	and.w	r3, r3, #26
    5dc2:	2b1a      	cmp	r3, #26
    5dc4:	d1f9      	bne.n	5dba <USB_Init+0x86>
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    5dc6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    5dca:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5dce:	f04f 0220 	mov.w	r2, #32
    5dd2:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    5dd6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5dda:	601a      	str	r2, [r3, #0]
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    5ddc:	f04f 0240 	mov.w	r2, #64	; 0x40
    5de0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    5de4:	f04f 0204 	mov.w	r2, #4
    5de8:	605a      	str	r2, [r3, #4]
  NVIC_EnableIRQ(USB_IRQn);               /* enable USB interrupt */

  NVIC_SetPriority(CANActivity_IRQn, 8);
  NVIC_EnableIRQ(CANActivity_IRQn);

  USB_Reset();
    5dea:	f7ff ff61 	bl	5cb0 <USB_Reset>
  USB_SetAddress(0);
    5dee:	f04f 0000 	mov.w	r0, #0
    5df2:	f7ff ff8b 	bl	5d0c <USB_SetAddress>
}
    5df6:	bd08      	pop	{r3, pc}

00005df8 <USB_Configure>:
 *  USB Configure Function
 *    Parameters:      cfg:   Configure/Deconfigure
 *    Return Value:    None
 */

void USB_Configure (uint32_t cfg) {
    5df8:	b508      	push	{r3, lr}

  WrCmdDat(CMD_CFG_DEV, DAT_WR_BYTE(cfg ? CONF_DVICE : 0));
    5dfa:	f44f 7180 	mov.w	r1, #256	; 0x100
    5dfe:	f2c0 0101 	movt	r1, #1
    5e02:	2800      	cmp	r0, #0
    5e04:	bf08      	it	eq
    5e06:	f44f 7180 	moveq.w	r1, #256	; 0x100
    5e0a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
    5e0e:	f2c0 00d8 	movt	r0, #216	; 0xd8
    5e12:	f7ff fecb 	bl	5bac <WrCmdDat>

  LPC_USB->USBReEp = 0x00000003;
    5e16:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    5e1a:	f2c5 0300 	movt	r3, #20480	; 0x5000
    5e1e:	f04f 0203 	mov.w	r2, #3
    5e22:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
  while ((LPC_USB->USBDevIntSt & EP_RLZED_INT) == 0);
    5e26:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    5e2a:	f2c5 0200 	movt	r2, #20480	; 0x5000
    5e2e:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    5e32:	f413 7f80 	tst.w	r3, #256	; 0x100
    5e36:	d0fa      	beq.n	5e2e <USB_Configure+0x36>
  LPC_USB->USBDevIntClr = EP_RLZED_INT;
    5e38:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    5e3c:	f2c5 0300 	movt	r3, #20480	; 0x5000
    5e40:	f44f 7280 	mov.w	r2, #256	; 0x100
    5e44:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
}
    5e48:	bd08      	pop	{r3, pc}
    5e4a:	bf00      	nop

00005e4c <USB_ConfigEP>:
 *  Configure USB Endpoint according to Descriptor
 *    Parameters:      pEPD:  Pointer to Endpoint Descriptor
 *    Return Value:    None
 */

void USB_ConfigEP (USB_ENDPOINT_DESCRIPTOR *pEPD) {
    5e4c:	b510      	push	{r4, lr}
    5e4e:	4604      	mov	r4, r0
  uint32_t num;

  num = EPAdr(pEPD->bEndpointAddress);
    5e50:	7880      	ldrb	r0, [r0, #2]
    5e52:	f7ff fe8d 	bl	5b70 <EPAdr>
  LPC_USB->USBReEp |= (1 << num);
    5e56:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    5e5a:	f2c5 0300 	movt	r3, #20480	; 0x5000
    5e5e:	f8d3 1244 	ldr.w	r1, [r3, #580]	; 0x244
    5e62:	f04f 0201 	mov.w	r2, #1
    5e66:	fa02 f200 	lsl.w	r2, r2, r0
    5e6a:	430a      	orrs	r2, r1
    5e6c:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
  LPC_USB->USBEpInd = num;
    5e70:	f8c3 0248 	str.w	r0, [r3, #584]	; 0x248
  LPC_USB->USBMaxPSize = pEPD->wMaxPacketSize;
    5e74:	88a2      	ldrh	r2, [r4, #4]
    5e76:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
  while ((LPC_USB->USBDevIntSt & EP_RLZED_INT) == 0);
    5e7a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    5e7e:	f2c5 0200 	movt	r2, #20480	; 0x5000
    5e82:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    5e86:	f413 7f80 	tst.w	r3, #256	; 0x100
    5e8a:	d0fa      	beq.n	5e82 <USB_ConfigEP+0x36>
  LPC_USB->USBDevIntClr = EP_RLZED_INT;
    5e8c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    5e90:	f2c5 0300 	movt	r3, #20480	; 0x5000
    5e94:	f44f 7280 	mov.w	r2, #256	; 0x100
    5e98:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
}
    5e9c:	bd10      	pop	{r4, pc}
    5e9e:	bf00      	nop

00005ea0 <USB_DirCtrlEP>:
 *    Return Value:    None
 */

void USB_DirCtrlEP (uint32_t dir) {
  /* Not needed */
}
    5ea0:	4770      	bx	lr
    5ea2:	bf00      	nop

00005ea4 <USB_EnableEP>:
 *                       EPNum.0..3: Address
 *                       EPNum.7:    Dir
 *    Return Value:    None
 */

void USB_EnableEP (uint32_t EPNum) {
    5ea4:	b508      	push	{r3, lr}
  WrCmdDat(CMD_SET_EP_STAT(EPAdr(EPNum)), DAT_WR_BYTE(0));
    5ea6:	f7ff fe63 	bl	5b70 <EPAdr>
    5eaa:	ea4f 4000 	mov.w	r0, r0, lsl #16
    5eae:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
    5eb2:	f440 60a0 	orr.w	r0, r0, #1280	; 0x500
    5eb6:	f44f 7180 	mov.w	r1, #256	; 0x100
    5eba:	f7ff fe77 	bl	5bac <WrCmdDat>
}
    5ebe:	bd08      	pop	{r3, pc}

00005ec0 <USB_DisableEP>:
 *                       EPNum.0..3: Address
 *                       EPNum.7:    Dir
 *    Return Value:    None
 */

void USB_DisableEP (uint32_t EPNum) {
    5ec0:	b508      	push	{r3, lr}
  WrCmdDat(CMD_SET_EP_STAT(EPAdr(EPNum)), DAT_WR_BYTE(EP_STAT_DA));
    5ec2:	f7ff fe55 	bl	5b70 <EPAdr>
    5ec6:	ea4f 4000 	mov.w	r0, r0, lsl #16
    5eca:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
    5ece:	f440 60a0 	orr.w	r0, r0, #1280	; 0x500
    5ed2:	f44f 7180 	mov.w	r1, #256	; 0x100
    5ed6:	f2c0 0120 	movt	r1, #32
    5eda:	f7ff fe67 	bl	5bac <WrCmdDat>
}
    5ede:	bd08      	pop	{r3, pc}

00005ee0 <USB_ResetEP>:
 *                       EPNum.0..3: Address
 *                       EPNum.7:    Dir
 *    Return Value:    None
 */

void USB_ResetEP (uint32_t EPNum) {
    5ee0:	b508      	push	{r3, lr}
  WrCmdDat(CMD_SET_EP_STAT(EPAdr(EPNum)), DAT_WR_BYTE(0));
    5ee2:	f7ff fe45 	bl	5b70 <EPAdr>
    5ee6:	ea4f 4000 	mov.w	r0, r0, lsl #16
    5eea:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
    5eee:	f440 60a0 	orr.w	r0, r0, #1280	; 0x500
    5ef2:	f44f 7180 	mov.w	r1, #256	; 0x100
    5ef6:	f7ff fe59 	bl	5bac <WrCmdDat>
}
    5efa:	bd08      	pop	{r3, pc}

00005efc <USB_SetStallEP>:
 *                       EPNum.0..3: Address
 *                       EPNum.7:    Dir
 *    Return Value:    None
 */

void USB_SetStallEP (uint32_t EPNum) {
    5efc:	b508      	push	{r3, lr}
  WrCmdDat(CMD_SET_EP_STAT(EPAdr(EPNum)), DAT_WR_BYTE(EP_STAT_ST));
    5efe:	f7ff fe37 	bl	5b70 <EPAdr>
    5f02:	ea4f 4000 	mov.w	r0, r0, lsl #16
    5f06:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
    5f0a:	f440 60a0 	orr.w	r0, r0, #1280	; 0x500
    5f0e:	f44f 7180 	mov.w	r1, #256	; 0x100
    5f12:	f2c0 0101 	movt	r1, #1
    5f16:	f7ff fe49 	bl	5bac <WrCmdDat>
}
    5f1a:	bd08      	pop	{r3, pc}

00005f1c <USB_ClrStallEP>:
 *                       EPNum.0..3: Address
 *                       EPNum.7:    Dir
 *    Return Value:    None
 */

void USB_ClrStallEP (uint32_t EPNum) {
    5f1c:	b508      	push	{r3, lr}
  WrCmdDat(CMD_SET_EP_STAT(EPAdr(EPNum)), DAT_WR_BYTE(0));
    5f1e:	f7ff fe27 	bl	5b70 <EPAdr>
    5f22:	ea4f 4000 	mov.w	r0, r0, lsl #16
    5f26:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
    5f2a:	f440 60a0 	orr.w	r0, r0, #1280	; 0x500
    5f2e:	f44f 7180 	mov.w	r1, #256	; 0x100
    5f32:	f7ff fe3b 	bl	5bac <WrCmdDat>
}
    5f36:	bd08      	pop	{r3, pc}

00005f38 <USB_ReadEP>:
 *                       EPNum.7:    Dir
 *                     pData: Pointer to Data Buffer
 *    Return Value:    Number of bytes read
 */

uint32_t USB_ReadEP (uint32_t EPNum, uint8_t *pData) {
    5f38:	b570      	push	{r4, r5, r6, lr}
  uint32_t cnt, n;

  LPC_USB->USBCtrl = ((EPNum & 0x0F) << 2) | CTRL_RD_EN;
    5f3a:	f000 020f 	and.w	r2, r0, #15
    5f3e:	ea4f 0282 	mov.w	r2, r2, lsl #2
    5f42:	f042 0201 	orr.w	r2, r2, #1
    5f46:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    5f4a:	f2c5 0300 	movt	r3, #20480	; 0x5000
    5f4e:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228

  do {
    cnt = LPC_USB->USBRxPLen;
    5f52:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    5f56:	f2c5 0300 	movt	r3, #20480	; 0x5000
    5f5a:	f8d3 4220 	ldr.w	r4, [r3, #544]	; 0x220
  } while ((cnt & PKT_RDY) == 0);
    5f5e:	f414 6f00 	tst.w	r4, #2048	; 0x800
    5f62:	d0fa      	beq.n	5f5a <USB_ReadEP+0x22>
  cnt &= PKT_LNGTH_MASK;
    5f64:	ea4f 5484 	mov.w	r4, r4, lsl #22
    5f68:	ea4f 5494 	mov.w	r4, r4, lsr #22

  for (n = 0; n < (cnt + 3) / 4; n++) {
    5f6c:	f104 0603 	add.w	r6, r4, #3
    5f70:	08b6      	lsrs	r6, r6, #2
    5f72:	d00d      	beq.n	5f90 <USB_ReadEP+0x58>
    5f74:	f04f 0300 	mov.w	r3, #0
    *((__packed uint32_t *)pData) = LPC_USB->USBRxData;
    5f78:	f44f 4540 	mov.w	r5, #49152	; 0xc000
    5f7c:	f2c5 0500 	movt	r5, #20480	; 0x5000
    5f80:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
    5f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  do {
    cnt = LPC_USB->USBRxPLen;
  } while ((cnt & PKT_RDY) == 0);
  cnt &= PKT_LNGTH_MASK;

  for (n = 0; n < (cnt + 3) / 4; n++) {
    5f88:	f103 0301 	add.w	r3, r3, #1
    5f8c:	42b3      	cmp	r3, r6
    5f8e:	d1f7      	bne.n	5f80 <USB_ReadEP+0x48>
    *((__packed uint32_t *)pData) = LPC_USB->USBRxData;
    pData += 4;
  }
  LPC_USB->USBCtrl = 0;
    5f90:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    5f94:	f2c5 0300 	movt	r3, #20480	; 0x5000
    5f98:	f04f 0200 	mov.w	r2, #0
    5f9c:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228

  if (((EP_MSK_ISO >> EPNum) & 1) == 0) {   /* Non-Isochronous Endpoint */
    5fa0:	f241 2348 	movw	r3, #4680	; 0x1248
    5fa4:	fa43 f300 	asr.w	r3, r3, r0
    5fa8:	f013 0f01 	tst.w	r3, #1
    5fac:	d105      	bne.n	5fba <USB_ReadEP+0x82>
    WrCmdEP(EPNum, CMD_CLR_BUF);
    5fae:	f44f 61a0 	mov.w	r1, #1280	; 0x500
    5fb2:	f2c0 01f2 	movt	r1, #242	; 0xf2
    5fb6:	f7ff fe21 	bl	5bfc <WrCmdEP>
  }

  return (cnt);
}
    5fba:	4620      	mov	r0, r4
    5fbc:	bd70      	pop	{r4, r5, r6, pc}
    5fbe:	bf00      	nop

00005fc0 <USB_WriteEP>:
 *                     pData: Pointer to Data Buffer
 *                     cnt:   Number of bytes to write
 *    Return Value:    Number of bytes written
 */

uint32_t USB_WriteEP (uint32_t EPNum, uint8_t *pData, uint32_t cnt) {
    5fc0:	b570      	push	{r4, r5, r6, lr}
    5fc2:	4614      	mov	r4, r2
  uint32_t n;

  LPC_USB->USBCtrl = ((EPNum & 0x0F) << 2) | CTRL_WR_EN;
    5fc4:	f000 020f 	and.w	r2, r0, #15
    5fc8:	ea4f 0282 	mov.w	r2, r2, lsl #2
    5fcc:	f042 0202 	orr.w	r2, r2, #2
    5fd0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    5fd4:	f2c5 0300 	movt	r3, #20480	; 0x5000
    5fd8:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228

  LPC_USB->USBTxPLen = cnt;
    5fdc:	f8c3 4224 	str.w	r4, [r3, #548]	; 0x224

  for (n = 0; n < (cnt + 3) / 4; n++) {
    5fe0:	f104 0603 	add.w	r6, r4, #3
    5fe4:	08b6      	lsrs	r6, r6, #2
    5fe6:	d00d      	beq.n	6004 <__cs3_region_size_ram+0x4>
    5fe8:	f04f 0300 	mov.w	r3, #0
    LPC_USB->USBTxData = *((__packed uint32_t *)pData);
    5fec:	f44f 4540 	mov.w	r5, #49152	; 0xc000
    5ff0:	f2c5 0500 	movt	r5, #20480	; 0x5000
    5ff4:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    5ff8:	f8c5 221c 	str.w	r2, [r5, #540]	; 0x21c

  LPC_USB->USBCtrl = ((EPNum & 0x0F) << 2) | CTRL_WR_EN;

  LPC_USB->USBTxPLen = cnt;

  for (n = 0; n < (cnt + 3) / 4; n++) {
    5ffc:	f103 0301 	add.w	r3, r3, #1
    6000:	42b3      	cmp	r3, r6
    6002:	d1f7      	bne.n	5ff4 <USB_WriteEP+0x34>
    LPC_USB->USBTxData = *((__packed uint32_t *)pData);
    pData += 4;
  }
  LPC_USB->USBCtrl = 0;
    6004:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    6008:	f2c5 0300 	movt	r3, #20480	; 0x5000
    600c:	f04f 0200 	mov.w	r2, #0
    6010:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
  WrCmdEP(EPNum, CMD_VALID_BUF);
    6014:	f44f 61a0 	mov.w	r1, #1280	; 0x500
    6018:	f2c0 01fa 	movt	r1, #250	; 0xfa
    601c:	f7ff fdee 	bl	5bfc <WrCmdEP>
  return (cnt);
}
    6020:	4620      	mov	r0, r4
    6022:	bd70      	pop	{r4, r5, r6, pc}

00006024 <USB_IRQHandler>:

/*
 *  USB Interrupt Service Routine
 */

extern void USB_IRQHandler (void) {
    6024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
//	xprintf("USB_IRQ" " (%s:%d)\n",_F_,_L_);

  uint32_t disr, val, n, m;
  uint32_t episr, episrCur;

  disr = LPC_USB->USBDevIntSt;       /* Device Interrupt Status */
    6028:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    602c:	f2c5 0300 	movt	r3, #20480	; 0x5000
    6030:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200

  /* Device Status Interrupt (Reset, Connect change, Suspend/Resume) */
  if (disr & DEV_STAT_INT) {
    6034:	f013 0f08 	tst.w	r3, #8
    6038:	d01c      	beq.n	6074 <USB_IRQHandler+0x50>
    LPC_USB->USBDevIntClr = DEV_STAT_INT;
    603a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    603e:	f2c5 0300 	movt	r3, #20480	; 0x5000
    6042:	f04f 0208 	mov.w	r2, #8
    6046:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    WrCmd(CMD_GET_DEV_STAT);
    604a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
    604e:	f2c0 00fe 	movt	r0, #254	; 0xfe
    6052:	f7ff fd97 	bl	5b84 <WrCmd>
    val = RdCmdDat(DAT_GET_DEV_STAT);       /* Device Status */
    6056:	f44f 7000 	mov.w	r0, #512	; 0x200
    605a:	f2c0 00fe 	movt	r0, #254	; 0xfe
    605e:	f7ff fdfd 	bl	5c5c <RdCmdDat>
    if (val & DEV_RST) {                    /* Reset */
    6062:	f010 0f10 	tst.w	r0, #16
    6066:	d05d      	beq.n	6124 <USB_IRQHandler+0x100>
      USB_Reset();
    6068:	f7ff fe22 	bl	5cb0 <USB_Reset>
#if   USB_RESET_EVENT
      USB_Reset_Event();
    606c:	f000 f87c 	bl	6168 <USB_Reset_Event>
    6070:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    USB_Error_Event(val);
  }
#endif

  /* Endpoint's Slow Interrupt */
  if (disr & EP_SLOW_INT) {
    6074:	f013 0f04 	tst.w	r3, #4
    6078:	d054      	beq.n	6124 <USB_IRQHandler+0x100>
    episrCur = 0;
    episr    = LPC_USB->USBEpIntSt;
    607a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    607e:	f2c5 0300 	movt	r3, #20480	; 0x5000
    6082:	f8d3 7230 	ldr.w	r7, [r3, #560]	; 0x230
    for (n = 0; n < USB_EP_NUM; n++) {      /* Check All Endpoints */
      if (episr == episrCur) break;         /* break if all EP interrupts handled */
    6086:	2f00      	cmp	r7, #0
    6088:	d044      	beq.n	6114 <USB_IRQHandler+0xf0>
    608a:	f04f 0601 	mov.w	r6, #1
    608e:	f04f 0400 	mov.w	r4, #0
  }
#endif

  /* Endpoint's Slow Interrupt */
  if (disr & EP_SLOW_INT) {
    episrCur = 0;
    6092:	46a0      	mov	r8, r4
      if (episr == episrCur) break;         /* break if all EP interrupts handled */
      if (episr & (1 << n)) {
        episrCur |= (1 << n);
        m = n >> 1;
  
        LPC_USB->USBEpIntClr = (1 << n);
    6094:	f44f 4540 	mov.w	r5, #49152	; 0xc000
    6098:	f2c5 0500 	movt	r5, #20480	; 0x5000
          }
          if (USB_P_EP[m]) {
            USB_P_EP[m](USB_EVT_OUT);
          }
        } else {                            /* IN Endpoint */
          if (USB_P_EP[m]) {
    609c:	f247 195c 	movw	r9, #29020	; 0x715c
    60a0:	f2c0 0902 	movt	r9, #2
    60a4:	e005      	b.n	60b2 <USB_IRQHandler+0x8e>
  /* Endpoint's Slow Interrupt */
  if (disr & EP_SLOW_INT) {
    episrCur = 0;
    episr    = LPC_USB->USBEpIntSt;
    for (n = 0; n < USB_EP_NUM; n++) {      /* Check All Endpoints */
      if (episr == episrCur) break;         /* break if all EP interrupts handled */
    60a6:	f104 0401 	add.w	r4, r4, #1
    60aa:	f106 0601 	add.w	r6, r6, #1
    60ae:	45b8      	cmp	r8, r7
    60b0:	d030      	beq.n	6114 <USB_IRQHandler+0xf0>
    60b2:	4622      	mov	r2, r4
      if (episr & (1 << n)) {
    60b4:	f04f 0301 	mov.w	r3, #1
    60b8:	fa03 f304 	lsl.w	r3, r3, r4
    60bc:	423b      	tst	r3, r7
    60be:	d027      	beq.n	6110 <USB_IRQHandler+0xec>
        episrCur |= (1 << n);
    60c0:	ea48 0803 	orr.w	r8, r8, r3
        m = n >> 1;
    60c4:	ea4f 0154 	mov.w	r1, r4, lsr #1
  
        LPC_USB->USBEpIntClr = (1 << n);
    60c8:	f8c5 3238 	str.w	r3, [r5, #568]	; 0x238
        while ((LPC_USB->USBDevIntSt & CDFULL_INT) == 0);
    60cc:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
    60d0:	f013 0f20 	tst.w	r3, #32
    60d4:	d0fa      	beq.n	60cc <USB_IRQHandler+0xa8>
        val = LPC_USB->USBCmdData;
    60d6:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
  
        if ((n & 1) == 0) {                 /* OUT Endpoint */
    60da:	f012 0f01 	tst.w	r2, #1
    60de:	d111      	bne.n	6104 <USB_IRQHandler+0xe0>
          if (n == 0) {                     /* Control OUT Endpoint */
    60e0:	b94c      	cbnz	r4, 60f6 <USB_IRQHandler+0xd2>
            if (val & EP_SEL_STP) {         /* Setup Packet */
    60e2:	f013 0f04 	tst.w	r3, #4
    60e6:	d006      	beq.n	60f6 <USB_IRQHandler+0xd2>
              if (USB_P_EP[0]) {
    60e8:	f8d9 3000 	ldr.w	r3, [r9]
    60ec:	b11b      	cbz	r3, 60f6 <USB_IRQHandler+0xd2>
                USB_P_EP[0](USB_EVT_SETUP);
    60ee:	f04f 0001 	mov.w	r0, #1
    60f2:	4798      	blx	r3
    60f4:	e7d7      	b.n	60a6 <USB_IRQHandler+0x82>
                continue;
              }
            }
          }
          if (USB_P_EP[m]) {
    60f6:	f859 3021 	ldr.w	r3, [r9, r1, lsl #2]
    60fa:	b14b      	cbz	r3, 6110 <USB_IRQHandler+0xec>
            USB_P_EP[m](USB_EVT_OUT);
    60fc:	f04f 0002 	mov.w	r0, #2
    6100:	4798      	blx	r3
    6102:	e005      	b.n	6110 <USB_IRQHandler+0xec>
          }
        } else {                            /* IN Endpoint */
          if (USB_P_EP[m]) {
    6104:	f859 3021 	ldr.w	r3, [r9, r1, lsl #2]
    6108:	b113      	cbz	r3, 6110 <USB_IRQHandler+0xec>
            USB_P_EP[m](USB_EVT_IN);
    610a:	f04f 0003 	mov.w	r0, #3
    610e:	4798      	blx	r3

  /* Endpoint's Slow Interrupt */
  if (disr & EP_SLOW_INT) {
    episrCur = 0;
    episr    = LPC_USB->USBEpIntSt;
    for (n = 0; n < USB_EP_NUM; n++) {      /* Check All Endpoints */
    6110:	2e1f      	cmp	r6, #31
    6112:	d9c8      	bls.n	60a6 <USB_IRQHandler+0x82>
            USB_P_EP[m](USB_EVT_IN);
          }
        }
      }
    }
    LPC_USB->USBDevIntClr = EP_SLOW_INT;
    6114:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    6118:	f2c5 0300 	movt	r3, #20480	; 0x5000
    611c:	f04f 0204 	mov.w	r2, #4
    6120:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    6124:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00006128 <USB_EndPoint2>:
 *  USB Endpoint 2 Event Callback
 *   Called automatically on USB Endpoint 2 Event
 *    Parameter:       event
 */

void USB_EndPoint2 (uint32_t event) {
    6128:	b508      	push	{r3, lr}

  switch (event) {
    612a:	2802      	cmp	r0, #2
    612c:	d002      	beq.n	6134 <USB_EndPoint2+0xc>
    612e:	2803      	cmp	r0, #3
    6130:	d105      	bne.n	613e <USB_EndPoint2+0x16>
    6132:	e002      	b.n	613a <USB_EndPoint2+0x12>
    case USB_EVT_OUT:
      CDC_BulkOut ();                /* data received from Host */
    6134:	f7fe fea6 	bl	4e84 <CDC_BulkOut>
      break;
    6138:	bd08      	pop	{r3, pc}
    case USB_EVT_IN:
      CDC_BulkIn ();                 /* data expected from Host */
    613a:	f7fe fe83 	bl	4e44 <CDC_BulkIn>
    613e:	bd08      	pop	{r3, pc}

00006140 <USB_EndPoint1>:
 *  USB Endpoint 1 Event Callback
 *   Called automatically on USB Endpoint 1 Event
 *    Parameter:       event
 */

void USB_EndPoint1 (uint32_t event) {
    6140:	b508      	push	{r3, lr}
  uint16_t temp;
  static uint16_t serialState;

  switch (event) {
    6142:	2803      	cmp	r0, #3
    6144:	d10f      	bne.n	6166 <USB_EndPoint1+0x26>
    case USB_EVT_IN:
      temp = CDC_GetSerialState();
    6146:	f7fe fea7 	bl	4e98 <CDC_GetSerialState>
      if (serialState != temp) {
    614a:	f240 53ce 	movw	r3, #1486	; 0x5ce
    614e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    6152:	881b      	ldrh	r3, [r3, #0]
    6154:	4283      	cmp	r3, r0
    6156:	d006      	beq.n	6166 <USB_EndPoint1+0x26>
         serialState = temp;
    6158:	f240 53ce 	movw	r3, #1486	; 0x5ce
    615c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    6160:	8018      	strh	r0, [r3, #0]
         CDC_NotificationIn();            /* send SERIAL_STATE notification */
    6162:	f7fe ff03 	bl	4f6c <CDC_NotificationIn>
    6166:	bd08      	pop	{r3, pc}

00006168 <USB_Reset_Event>:
 *  USB Reset Event Callback
 *   Called automatically on USB Reset Event
 */

#if USB_RESET_EVENT
void USB_Reset_Event (void) {
    6168:	b508      	push	{r3, lr}
  USB_ResetCore();
    616a:	f7fe ff5b 	bl	5024 <USB_ResetCore>
}
    616e:	bd08      	pop	{r3, pc}

00006170 <USB_Configure_Event>:
void USB_Configure_Event (void) {

  if (USB_Configuration) {                  /* Check if USB is configured */
    /* add your code here */
  }
}
    6170:	4770      	bx	lr
    6172:	bf00      	nop

00006174 <startup_delay>:

void startup_delay(void){
    6174:	b082      	sub	sp, #8
	volatile unsigned long i;
	for (i = 0; i < 5; i++) { ; }
    6176:	f04f 0300 	mov.w	r3, #0
    617a:	9301      	str	r3, [sp, #4]
    617c:	9b01      	ldr	r3, [sp, #4]
    617e:	2b04      	cmp	r3, #4
    6180:	d806      	bhi.n	6190 <startup_delay+0x1c>
    6182:	9b01      	ldr	r3, [sp, #4]
    6184:	f103 0301 	add.w	r3, r3, #1
    6188:	9301      	str	r3, [sp, #4]
    618a:	9b01      	ldr	r3, [sp, #4]
    618c:	2b04      	cmp	r3, #4
    618e:	d9f8      	bls.n	6182 <startup_delay+0xe>
}
    6190:	b002      	add	sp, #8
    6192:	4770      	bx	lr

00006194 <_kill>:
int _kill(int pid, int sig)
{
//	xprintf("%s{\n",__func__);
	(void)pid;
	(void)sig; /* avoid warnings */
	errno = EINVAL;
    6194:	f642 53c8 	movw	r3, #11720	; 0x2dc8
    6198:	f2c1 0300 	movt	r3, #4096	; 0x1000
    619c:	f04f 0216 	mov.w	r2, #22
    61a0:	601a      	str	r2, [r3, #0]
	return -1;
}
    61a2:	f04f 30ff 	mov.w	r0, #4294967295
    61a6:	4770      	bx	lr

000061a8 <_exit>:

void _exit(int status)
{
    61a8:	b508      	push	{r3, lr}
    61aa:	4601      	mov	r1, r0
	xprintf("_exit called with parameter %d\n", status);
    61ac:	f247 109c 	movw	r0, #29084	; 0x719c
    61b0:	f2c0 0002 	movt	r0, #2
    61b4:	f000 fbce 	bl	6954 <xprintf>
    61b8:	e7fe      	b.n	61b8 <_exit+0x10>
    61ba:	bf00      	nop

000061bc <_getpid>:

int _getpid(void)
{
//	xprintf("%s{\n",__func__);
	return 1;
}
    61bc:	f04f 0001 	mov.w	r0, #1
    61c0:	4770      	bx	lr
    61c2:	bf00      	nop

000061c4 <get_stack_top>:
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
    61c4:	f3ef 8008 	mrs	r0, MSP
char* get_stack_top(void)
{
//	xprintf("%s{\n",__func__);
	return (char*) __get_MSP();
	// return (char*) __get_PSP();
}
    61c8:	4770      	bx	lr
    61ca:	bf00      	nop

000061cc <_sbrk>:

caddr_t _sbrk(int incr)
{
    61cc:	b538      	push	{r3, r4, r5, lr}
//	xprintf("%s{\n",__func__);
	char *prev_heap_end;
	if (heap_end == 0) {
    61ce:	f240 53d0 	movw	r3, #1488	; 0x5d0
    61d2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    61d6:	681b      	ldr	r3, [r3, #0]
    61d8:	b943      	cbnz	r3, 61ec <_sbrk+0x20>
		heap_end = &_end;
    61da:	f240 53d0 	movw	r3, #1488	; 0x5d0
    61de:	f2c1 0300 	movt	r3, #4096	; 0x1000
    61e2:	f642 52d0 	movw	r2, #11728	; 0x2dd0
    61e6:	f2c1 0200 	movt	r2, #4096	; 0x1000
    61ea:	601a      	str	r2, [r3, #0]
	}
	prev_heap_end = heap_end;
    61ec:	f240 53d0 	movw	r3, #1488	; 0x5d0
    61f0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    61f4:	681c      	ldr	r4, [r3, #0]
#if 1
	if (heap_end + incr > get_stack_top()) {
    61f6:	1825      	adds	r5, r4, r0
    61f8:	f7ff ffe4 	bl	61c4 <get_stack_top>
    61fc:	4285      	cmp	r5, r0
    61fe:	d907      	bls.n	6210 <_sbrk+0x44>
		xprintf("Heap and stack collision\n");
    6200:	f247 10bc 	movw	r0, #29116	; 0x71bc
    6204:	f2c0 0002 	movt	r0, #2
    6208:	f000 fba4 	bl	6954 <xprintf>
		abort();
    620c:	f019 fbfa 	bl	1fa04 <abort>
	}
#endif
	heap_end += incr;
    6210:	f240 53d0 	movw	r3, #1488	; 0x5d0
    6214:	f2c1 0300 	movt	r3, #4096	; 0x1000
    6218:	601d      	str	r5, [r3, #0]
	return (caddr_t) prev_heap_end;
}
    621a:	4620      	mov	r0, r4
    621c:	bd38      	pop	{r3, r4, r5, pc}
    621e:	bf00      	nop

00006220 <_close>:
int _close(int file)
{
//	xprintf("%s{\n",__func__);
	(void)file; /* avoid warning */
	return -1;
}
    6220:	f04f 30ff 	mov.w	r0, #4294967295
    6224:	4770      	bx	lr
    6226:	bf00      	nop

00006228 <_fstat>:

int _fstat(int file, struct stat *st)
{
//	xprintf("%s{\n",__func__);
	(void)file; /* avoid warning */
	st->st_mode = S_IFCHR;
    6228:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    622c:	604b      	str	r3, [r1, #4]
	return 0;
}
    622e:	f04f 0000 	mov.w	r0, #0
    6232:	4770      	bx	lr

00006234 <_isatty>:
int _isatty(int file)
{
//	xprintf("%s{\n",__func__);
	(void)file; /* avoid warning */
	return 1;
}
    6234:	f04f 0001 	mov.w	r0, #1
    6238:	4770      	bx	lr
    623a:	bf00      	nop

0000623c <_lseek>:
//	xprintf("%s{\n",__func__);
	(void)file; /* avoid warning */
	(void)ptr;  /* avoid warning */
	(void)dir;  /* avoid warning */
	return 0;
}
    623c:	f04f 0000 	mov.w	r0, #0
    6240:	4770      	bx	lr
    6242:	bf00      	nop

00006244 <_read>:

int _read(int file, char *ptr, int len)
{
    6244:	b508      	push	{r3, lr}
//	xprintf("len=%d,func=%s{\n",len,__func__);
//	printf("len=%d,ptr=%s,func=%s{\n",len,ptr,__func__);
//	switch (file) {
//		case STDIN_FILENO:
//			UART_Receive(LPC_UART0, ptr, len, BLOCKING);
			len = UART_Receive(LPC_UART0, ptr, 1, BLOCKING);
    6246:	f44f 4040 	mov.w	r0, #49152	; 0xc000
    624a:	f2c4 0000 	movt	r0, #16384	; 0x4000
    624e:	f04f 0201 	mov.w	r2, #1
    6252:	4613      	mov	r3, r2
    6254:	f7fe fb20 	bl	4898 <UART_Receive>
			return -1;
	}
	return num;
#endif
//	return 0;
}
    6258:	bd08      	pop	{r3, pc}
    625a:	bf00      	nop

0000625c <_write>:

int _write(int file, char *ptr, int len)
{
    625c:	b570      	push	{r4, r5, r6, lr}
    625e:	460c      	mov	r4, r1
	int todo;
	(void)file; /* avoid warning */
	for (todo = 0; todo < len; todo++) {
    6260:	1e16      	subs	r6, r2, #0
    6262:	dd06      	ble.n	6272 <_write+0x16>
	return num;
#endif
//	return 0;
}

int _write(int file, char *ptr, int len)
    6264:	198d      	adds	r5, r1, r6
{
	int todo;
	(void)file; /* avoid warning */
	for (todo = 0; todo < len; todo++) {
		xputc(*ptr++);
    6266:	f814 0b01 	ldrb.w	r0, [r4], #1
    626a:	f000 fb09 	bl	6880 <xputc>

int _write(int file, char *ptr, int len)
{
	int todo;
	(void)file; /* avoid warning */
	for (todo = 0; todo < len; todo++) {
    626e:	42ac      	cmp	r4, r5
    6270:	d1f9      	bne.n	6266 <_write+0xa>
		xputc(*ptr++);
	}
	return len;
}
    6272:	4630      	mov	r0, r6
    6274:	bd70      	pop	{r4, r5, r6, pc}
    6276:	bf00      	nop

00006278 <SystemInit>:
 *         Initialize the System.
 */
void SystemInit (void)
{
#if (CLOCK_SETUP)                       /* Clock Setup                        */
  LPC_SC->SCS       = SCS_Val; /* Main oscillator enable */
    6278:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    627c:	f2c4 030f 	movt	r3, #16399	; 0x400f
    6280:	f04f 0220 	mov.w	r2, #32
    6284:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
  if (SCS_Val & (1 << 5)) {             /* If Main Oscillator is enabled      */
    while ((LPC_SC->SCS & (1<<6)) == 0);/* Wait for Oscillator to be ready    */
    6288:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    628c:	f2c4 020f 	movt	r2, #16399	; 0x400f
    6290:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
    6294:	f013 0f40 	tst.w	r3, #64	; 0x40
    6298:	d0fa      	beq.n	6290 <SystemInit+0x18>
  }

  LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider -- PLL0 output is divided by 4 to produce the CPU clock */
    629a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    629e:	f2c4 030f 	movt	r3, #16399	; 0x400f
    62a2:	f04f 0202 	mov.w	r2, #2
    62a6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

  LPC_SC->PCLKSEL0  = 0;     /* Peripheral Clock Selection -- none!         */
    62aa:	f04f 0200 	mov.w	r2, #0
    62ae:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  LPC_SC->PCLKSEL1  = 0;
    62b2:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0 -- Selects the main oscillator as the PLL0 clock source */
    62b6:	f04f 0001 	mov.w	r0, #1
    62ba:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c

#if (PLL0_SETUP)
  LPC_SC->PLL0CFG   = PLL0CFG_Val; /* configure PLL0 -- MSEL0 = 99; NSEL0 = 5, for 12MHz xtal: (24*10^6 * (99+1)) / (2 * 12*10^6) = 400 */
    62be:	f04f 0208 	mov.w	r2, #8
    62c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  LPC_SC->PLL0FEED  = 0xAA;
    62c6:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    62ca:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    62ce:	f04f 0255 	mov.w	r2, #85	; 0x55
    62d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  LPC_SC->PLL0CON   = 0x01;             /* PLL0 Enable                        */
    62d6:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
  LPC_SC->PLL0FEED  = 0xAA;
    62da:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    62de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  while (!(LPC_SC->PLL0STAT & (1<<26)));/* Wait for PLOCK0                    */
    62e2:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    62e6:	f2c4 020f 	movt	r2, #16399	; 0x400f
    62ea:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    62ee:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
    62f2:	d0fa      	beq.n	62ea <SystemInit+0x72>

  LPC_SC->PLL0CON   = 0x03;             /* PLL0 Enable & Connect              */
    62f4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    62f8:	f2c4 030f 	movt	r3, #16399	; 0x400f
    62fc:	f04f 0203 	mov.w	r2, #3
    6300:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  LPC_SC->PLL0FEED  = 0xAA;
    6304:	f04f 02aa 	mov.w	r2, #170	; 0xaa
    6308:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    630c:	f04f 0255 	mov.w	r2, #85	; 0x55
    6310:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  while (!(LPC_SC->PLL0STAT & ((1<<25) | (1<<24))));/* Wait for PLLC0_STAT & PLLE0_STAT */
    6314:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    6318:	f2c4 020f 	movt	r2, #16399	; 0x400f
    631c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    6320:	f013 7f40 	tst.w	r3, #50331648	; 0x3000000
    6324:	d0fa      	beq.n	631c <SystemInit+0xa4>
#endif

#if (PLL1_SETUP)
  LPC_SC->PLL1CFG   = PLL1CFG_Val; /* configure PLL1 -- MSEL1 = 3; PSEL1 = 1, for 12MHz xtal: (2 * 4 * 12*10^6) / 2 = 48MHz */
    6326:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    632a:	f2c4 030f 	movt	r3, #16399	; 0x400f
    632e:	f04f 0222 	mov.w	r2, #34	; 0x22
    6332:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  LPC_SC->PLL0FEED  = 0xAA;
    6336:	f04f 02aa 	mov.w	r2, #170	; 0xaa
    633a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  LPC_SC->PLL1FEED  = 0xAA;
    633e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    6342:	f04f 0155 	mov.w	r1, #85	; 0x55
    6346:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

  LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
    634a:	f04f 0001 	mov.w	r0, #1
    634e:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
  LPC_SC->PLL1FEED  = 0xAA;
    6352:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    6356:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
  while (!(LPC_SC->PLL1STAT & (1<<10)));/* Wait for PLOCK1                    */
    635a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    635e:	f2c4 020f 	movt	r2, #16399	; 0x400f
    6362:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    6366:	f413 6f80 	tst.w	r3, #1024	; 0x400
    636a:	d0fa      	beq.n	6362 <SystemInit+0xea>

  LPC_SC->PLL1CON   = 0x03;             /* PLL1 Enable & Connect              */
    636c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    6370:	f2c4 030f 	movt	r3, #16399	; 0x400f
    6374:	f04f 0203 	mov.w	r2, #3
    6378:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  LPC_SC->PLL1FEED  = 0xAA;
    637c:	f04f 02aa 	mov.w	r2, #170	; 0xaa
    6380:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    6384:	f04f 0255 	mov.w	r2, #85	; 0x55
    6388:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  while (!(LPC_SC->PLL1STAT & ((1<< 9) | (1<< 8))));/* Wait for PLLC1_STAT & PLLE1_STAT */
    638c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    6390:	f2c4 020f 	movt	r2, #16399	; 0x400f
    6394:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    6398:	f413 7f40 	tst.w	r3, #768	; 0x300
    639c:	d0fa      	beq.n	6394 <SystemInit+0x11c>
#else
  LPC_SC->USBCLKCFG = USBCLKCFG_Val;    /* Setup USB Clock Divider            */
#endif

  LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
    639e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    63a2:	f2c4 030f 	movt	r3, #16399	; 0x400f
    63a6:	f04f 0200 	mov.w	r2, #0
    63aa:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  LPC_SC->PCLKSEL1  = PCLKSEL1_Val;
    63ae:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
  LPC_SC->PCONP     = PCONP_Val;        /* Power Control for Peripherals      */
    63b2:	f248 71de 	movw	r1, #34782	; 0x87de
    63b6:	f2c0 4128 	movt	r1, #1064	; 0x428
    63ba:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
  /* Use next 2 lines (and comment 3rd) to test on P1.27 the CPU clock signal. Should be 25MHz on pin because it's divided by 4 */
#if 0
  LPC_PINCON->PINSEL3 |= 1 << 22; /* Set P1_27 to 01 - CLKOUT */
  LPC_SC->CLKOUTCFG = CLKPWR_CLKOUTCFG_BITMASK & (CLKPWR_CLKOUTCFG_CLKOUTSEL_CPU | CLKPWR_CLKOUTCFG_CLKOUTDIV(3) | CLKPWR_CLKOUTCFG_CLKOUT_EN);
#endif
  LPC_SC->CLKOUTCFG = 0;    /* Clock Output Configuration -- disable */
    63be:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
#endif

#if (FLASH_SETUP == 1)                  /* Flash Accelerator Setup            */
  LPC_SC->FLASHCFG  = FLASHCFG_Val;
    63c2:	f245 023a 	movw	r2, #20538	; 0x503a
    63c6:	601a      	str	r2, [r3, #0]
#endif
}
    63c8:	4770      	bx	lr
    63ca:	bf00      	nop

000063cc <comm_put>:
	}
	return buffer;
}
#endif

void comm_put(uint8_t d){
    63cc:	b500      	push	{lr}
    63ce:	b083      	sub	sp, #12
    63d0:	a902      	add	r1, sp, #8
    63d2:	f801 0d01 	strb.w	r0, [r1, #-1]!
	UART_Send(LPC_UART0, &d, 1, BLOCKING);//without interrupt
    63d6:	f44f 4040 	mov.w	r0, #49152	; 0xc000
    63da:	f2c4 0000 	movt	r0, #16384	; 0x4000
    63de:	f04f 0201 	mov.w	r2, #1
    63e2:	4613      	mov	r3, r2
    63e4:	f7fe f9ec 	bl	47c0 <UART_Send>
//	UARTSend(LPC_UART0, &d, 1);//with interrupt
////	serial_writechar(d);
}
    63e8:	b003      	add	sp, #12
    63ea:	bd00      	pop	{pc}

000063ec <comm_init>:
		UARTPutChar(LPC_UART0, *s++);
	}
}
#endif

void comm_init(void){
    63ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    63f0:	b084      	sub	sp, #16

	UART_LINE_LEN=0;
    63f2:	f240 53d4 	movw	r3, #1492	; 0x5d4
    63f6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    63fa:	f04f 0400 	mov.w	r4, #0
    63fe:	601c      	str	r4, [r3, #0]
//	UART_FIFO_CFG_Type UARTFIFOConfigStruct;
	// Pin configuration for UART0
	PINSEL_CFG_Type PinCfg;

	//Initialize UART0 pin connect
	PinCfg.Funcnum = 1;
    6400:	f04f 0601 	mov.w	r6, #1
    6404:	f88d 6002 	strb.w	r6, [sp, #2]
	PinCfg.OpenDrain = 0;
    6408:	f88d 4004 	strb.w	r4, [sp, #4]
	PinCfg.Pinmode = 0;
    640c:	f88d 4003 	strb.w	r4, [sp, #3]
	PinCfg.Pinnum = 2;
    6410:	f04f 0802 	mov.w	r8, #2
    6414:	f88d 8001 	strb.w	r8, [sp, #1]
	PinCfg.Portnum = 0;
    6418:	ad04      	add	r5, sp, #16
    641a:	f805 4d10 	strb.w	r4, [r5, #-16]!
	PINSEL_ConfigPin(&PinCfg);
    641e:	4668      	mov	r0, sp
    6420:	f7fd f880 	bl	3524 <PINSEL_ConfigPin>
	PinCfg.Pinnum = 3;
    6424:	f04f 0703 	mov.w	r7, #3
    6428:	f88d 7001 	strb.w	r7, [sp, #1]
	PINSEL_ConfigPin(&PinCfg);
    642c:	4668      	mov	r0, sp
    642e:	f7fd f879 	bl	3524 <PINSEL_ConfigPin>

	UART_ConfigStructInit(&UARTConfigStruct);
    6432:	a802      	add	r0, sp, #8
    6434:	f7fe f946 	bl	46c4 <UART_ConfigStructInit>
	 * Baudrate = 115200bps
	 * 8 data bit
	 * 1 Stop bit
	 * None parity
	 */
	UARTConfigStruct.Baud_rate = 512000;
    6438:	f44f 23fa 	mov.w	r3, #512000	; 0x7d000
    643c:	9302      	str	r3, [sp, #8]
//	UARTConfigStruct.Baud_rate = 115200;
	UARTConfigStruct.Parity = UART_PARITY_NONE;
    643e:	f88d 400c 	strb.w	r4, [sp, #12]
	UARTConfigStruct.Stopbits = UART_STOPBIT_1;
    6442:	f88d 400e 	strb.w	r4, [sp, #14]
	UARTConfigStruct.Databits = UART_DATABIT_8;
    6446:	f88d 700d 	strb.w	r7, [sp, #13]

	// Initialize UART0 peripheral with given to corresponding parameter
	UART_Init(LPC_UART0, &UARTConfigStruct);
    644a:	f44f 4540 	mov.w	r5, #49152	; 0xc000
    644e:	f2c4 0500 	movt	r5, #16384	; 0x4000
    6452:	4628      	mov	r0, r5
    6454:	a902      	add	r1, sp, #8
    6456:	f7fd fef7 	bl	4248 <UART_Init>

	// Enable UART Transmit
	UART_TxCmd(LPC_UART0, ENABLE);
    645a:	4628      	mov	r0, r5
    645c:	4631      	mov	r1, r6
    645e:	f7fe fb85 	bl	4b6c <UART_TxCmd>
#if 1
    /* Enable UART Rx interrupt */
	UART_IntConfig((LPC_UART_TypeDef *)LPC_UART0, UART_INTCFG_RBR, ENABLE);
    6462:	4628      	mov	r0, r5
    6464:	4621      	mov	r1, r4
    6466:	4632      	mov	r2, r6
    6468:	f7fe fa5a 	bl	4920 <UART_IntConfig>
	/* Enable UART line status interrupt */
	UART_IntConfig((LPC_UART_TypeDef *)LPC_UART0, UART_INTCFG_RLS, ENABLE);
    646c:	4628      	mov	r0, r5
    646e:	4641      	mov	r1, r8
    6470:	4632      	mov	r2, r6
    6472:	f7fe fa55 	bl	4920 <UART_IntConfig>
	/*
	 * Do not enable transmit interrupt here, since it is handled by
	 * UART_Send() function, just to reset Tx Interrupt state for the
	 * first time
	 */
	TxIntStat = RESET;
    6476:	f642 53c4 	movw	r3, #11716	; 0x2dc4
    647a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    647e:	701c      	strb	r4, [r3, #0]

	// Reset ring buf head and tail idx
	__BUF_RESET(rb.rx_head);
    6480:	f242 53b4 	movw	r3, #9652	; 0x25b4
    6484:	f2c1 0300 	movt	r3, #4096	; 0x1000
    6488:	609c      	str	r4, [r3, #8]
	__BUF_RESET(rb.rx_tail);
    648a:	60dc      	str	r4, [r3, #12]
	__BUF_RESET(rb.tx_head);
    648c:	601c      	str	r4, [r3, #0]
	__BUF_RESET(rb.tx_tail);
    648e:	605c      	str	r4, [r3, #4]
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    6490:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    6494:	f2ce 0300 	movt	r3, #57344	; 0xe000
    6498:	f04f 0250 	mov.w	r2, #80	; 0x50
    649c:	f883 2305 	strb.w	r2, [r3, #773]	; 0x305

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    64a0:	f04f 0220 	mov.w	r2, #32
    64a4:	601a      	str	r2, [r3, #0]
    /* preemption = 1, sub-priority = 1 */
    NVIC_SetPriority(UART0_IRQn, 10);
	/* Enable Interrupt for UART0 channel */
    NVIC_EnableIRQ(UART0_IRQn);
#endif
}
    64a6:	b004      	add	sp, #16
    64a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000064ac <UART_IntReceive>:
 * @brief 		UART receive function (ring buffer used)
 * @param[in]	None
 * @return 		None
 *********************************************************************/
void UART_IntReceive(void)
{
    64ac:	b570      	push	{r4, r5, r6, lr}
    64ae:	b082      	sub	sp, #8
	while(1){
		// Call UART read function in UART driver
		rLen = UART_Receive((LPC_UART_TypeDef *)LPC_UART0, &tmpc, 1, NONE_BLOCKING);
		// If data received
		if (rLen){
			UART_LINE[UART_LINE_LEN++]=tmpc;
    64b0:	f240 54d4 	movw	r4, #1492	; 0x5d4
    64b4:	f2c1 0400 	movt	r4, #4096	; 0x1000
    64b8:	f640 5508 	movw	r5, #3336	; 0xd08
    64bc:	f2c1 0500 	movt	r5, #4096	; 0x1000
			if((tmpc=='\r')||(tmpc=='\n')){
				LINE_READY = 1;
    64c0:	f240 56d8 	movw	r6, #1496	; 0x5d8
    64c4:	f2c1 0600 	movt	r6, #4096	; 0x1000
		GPIO_ClearValue(LED_3_PORT, LED_3_BIT);
	RX_TOG=!RX_TOG;
*/
	while(1){
		// Call UART read function in UART driver
		rLen = UART_Receive((LPC_UART_TypeDef *)LPC_UART0, &tmpc, 1, NONE_BLOCKING);
    64c8:	f44f 4040 	mov.w	r0, #49152	; 0xc000
    64cc:	f2c4 0000 	movt	r0, #16384	; 0x4000
    64d0:	f10d 0107 	add.w	r1, sp, #7
    64d4:	f04f 0201 	mov.w	r2, #1
    64d8:	f04f 0300 	mov.w	r3, #0
    64dc:	f7fe f9dc 	bl	4898 <UART_Receive>
		// If data received
		if (rLen){
    64e0:	2800      	cmp	r0, #0
    64e2:	d039      	beq.n	6558 <UART_IntReceive+0xac>
			UART_LINE[UART_LINE_LEN++]=tmpc;
    64e4:	6823      	ldr	r3, [r4, #0]
    64e6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    64ea:	54ea      	strb	r2, [r5, r3]
    64ec:	f103 0301 	add.w	r3, r3, #1
    64f0:	6023      	str	r3, [r4, #0]
			if((tmpc=='\r')||(tmpc=='\n')){
    64f2:	2a0a      	cmp	r2, #10
    64f4:	bf14      	ite	ne
    64f6:	2300      	movne	r3, #0
    64f8:	2301      	moveq	r3, #1
    64fa:	2a0d      	cmp	r2, #13
    64fc:	bf08      	it	eq
    64fe:	f043 0301 	orreq.w	r3, r3, #1
    6502:	b14b      	cbz	r3, 6518 <UART_IntReceive+0x6c>
				LINE_READY = 1;
    6504:	f04f 0301 	mov.w	r3, #1
    6508:	6033      	str	r3, [r6, #0]
				UART_LINE[UART_LINE_LEN-1]='\0';
    650a:	6821      	ldr	r1, [r4, #0]
    650c:	f101 31ff 	add.w	r1, r1, #4294967295
    6510:	f04f 0300 	mov.w	r3, #0
    6514:	546b      	strb	r3, [r5, r1]
				UART_LINE_LEN=0;
    6516:	6023      	str	r3, [r4, #0]
			}
			/* Check if buffer is more space
			 * If no more space, remaining character will be trimmed out
			 */
			if (!__BUF_IS_FULL(rb.rx_head,rb.rx_tail)){
    6518:	f242 53b4 	movw	r3, #9652	; 0x25b4
    651c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    6520:	68d9      	ldr	r1, [r3, #12]
    6522:	689b      	ldr	r3, [r3, #8]
    6524:	f103 0301 	add.w	r3, r3, #1
    6528:	404b      	eors	r3, r1
    652a:	ea4f 5383 	mov.w	r3, r3, lsl #22
    652e:	ea4f 5393 	mov.w	r3, r3, lsr #22
    6532:	2b00      	cmp	r3, #0
    6534:	d0c8      	beq.n	64c8 <UART_IntReceive+0x1c>
				rb.rx[rb.rx_head] = tmpc;
    6536:	f242 53b4 	movw	r3, #9652	; 0x25b4
    653a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    653e:	6899      	ldr	r1, [r3, #8]
    6540:	1859      	adds	r1, r3, r1
    6542:	f881 2410 	strb.w	r2, [r1, #1040]	; 0x410
				__BUF_INCR(rb.rx_head);
    6546:	689a      	ldr	r2, [r3, #8]
    6548:	f102 0201 	add.w	r2, r2, #1
    654c:	ea4f 5282 	mov.w	r2, r2, lsl #22
    6550:	ea4f 5292 	mov.w	r2, r2, lsr #22
    6554:	609a      	str	r2, [r3, #8]
    6556:	e7b7      	b.n	64c8 <UART_IntReceive+0x1c>
		// no more data
		else {
			break;
		}
	}
}
    6558:	b002      	add	sp, #8
    655a:	bd70      	pop	{r4, r5, r6, pc}

0000655c <UART_IntTransmit>:
 * @brief 		UART transmit function (ring buffer used)
 * @param[in]	None
 * @return 		None
 *********************************************************************/
void UART_IntTransmit(void)
{
    655c:	b570      	push	{r4, r5, r6, lr}
		GPIO_ClearValue(LED_2_PORT, LED_2_BIT);
	TX_TOG=!TX_TOG;
*/

    // Disable THRE interrupt
    UART_IntConfig((LPC_UART_TypeDef *)LPC_UART0, UART_INTCFG_THRE, DISABLE);
    655e:	f44f 4040 	mov.w	r0, #49152	; 0xc000
    6562:	f2c4 0000 	movt	r0, #16384	; 0x4000
    6566:	f04f 0101 	mov.w	r1, #1
    656a:	f04f 0200 	mov.w	r2, #0
    656e:	f7fe f9d7 	bl	4920 <UART_IntConfig>

	/* Wait for FIFO buffer empty, transfer UART_TX_FIFO_SIZE bytes
	 * of data or break whenever ring buffers are empty */
	/* Wait until THR empty */
    while (UART_CheckBusy((LPC_UART_TypeDef *)LPC_UART0) == SET);
    6572:	f44f 4440 	mov.w	r4, #49152	; 0xc000
    6576:	f2c4 0400 	movt	r4, #16384	; 0x4000
    657a:	4620      	mov	r0, r4
    657c:	f7fe faee 	bl	4b5c <UART_CheckBusy>
    6580:	2801      	cmp	r0, #1
    6582:	d0fa      	beq.n	657a <UART_IntTransmit+0x1e>

	while (!__BUF_IS_EMPTY(rb.tx_head,rb.tx_tail))
    6584:	f242 53b4 	movw	r3, #9652	; 0x25b4
    6588:	f2c1 0300 	movt	r3, #4096	; 0x1000
    658c:	681a      	ldr	r2, [r3, #0]
    658e:	685b      	ldr	r3, [r3, #4]
    6590:	4053      	eors	r3, r2
    6592:	ea4f 5383 	mov.w	r3, r3, lsl #22
    6596:	ea4f 5393 	mov.w	r3, r3, lsr #22
    659a:	b32b      	cbz	r3, 65e8 <UART_IntTransmit+0x8c>
    {
        /* Move a piece of data into the transmit FIFO */
    	if (UART_Send((LPC_UART_TypeDef *)LPC_UART0, (uint8_t *)&rb.tx[rb.tx_tail], 1, NONE_BLOCKING)){
    659c:	f242 54b4 	movw	r4, #9652	; 0x25b4
    65a0:	f2c1 0400 	movt	r4, #4096	; 0x1000
    65a4:	f44f 4540 	mov.w	r5, #49152	; 0xc000
    65a8:	f2c4 0500 	movt	r5, #16384	; 0x4000
    65ac:	f04f 0601 	mov.w	r6, #1
    65b0:	6861      	ldr	r1, [r4, #4]
    65b2:	f101 0110 	add.w	r1, r1, #16
    65b6:	4628      	mov	r0, r5
    65b8:	1861      	adds	r1, r4, r1
    65ba:	4632      	mov	r2, r6
    65bc:	f04f 0300 	mov.w	r3, #0
    65c0:	f7fe f8fe 	bl	47c0 <UART_Send>
    65c4:	b180      	cbz	r0, 65e8 <UART_IntTransmit+0x8c>
        /* Update transmit ring FIFO tail pointer */
        __BUF_INCR(rb.tx_tail);
    65c6:	6863      	ldr	r3, [r4, #4]
    65c8:	f103 0301 	add.w	r3, r3, #1
    65cc:	ea4f 5383 	mov.w	r3, r3, lsl #22
    65d0:	ea4f 5393 	mov.w	r3, r3, lsr #22
    65d4:	6063      	str	r3, [r4, #4]
	/* Wait for FIFO buffer empty, transfer UART_TX_FIFO_SIZE bytes
	 * of data or break whenever ring buffers are empty */
	/* Wait until THR empty */
    while (UART_CheckBusy((LPC_UART_TypeDef *)LPC_UART0) == SET);

	while (!__BUF_IS_EMPTY(rb.tx_head,rb.tx_tail))
    65d6:	6823      	ldr	r3, [r4, #0]
    65d8:	6862      	ldr	r2, [r4, #4]
    65da:	4053      	eors	r3, r2
    65dc:	ea4f 5383 	mov.w	r3, r3, lsl #22
    65e0:	ea4f 5393 	mov.w	r3, r3, lsr #22
    65e4:	2b00      	cmp	r3, #0
    65e6:	d1e3      	bne.n	65b0 <UART_IntTransmit+0x54>
    	}
    }

    /* If there is no more data to send, disable the transmit
       interrupt - else enable it or keep it enabled */
	if (__BUF_IS_EMPTY(rb.tx_head, rb.tx_tail)) {
    65e8:	f242 53b4 	movw	r3, #9652	; 0x25b4
    65ec:	f2c1 0300 	movt	r3, #4096	; 0x1000
    65f0:	681a      	ldr	r2, [r3, #0]
    65f2:	685b      	ldr	r3, [r3, #4]
    65f4:	4053      	eors	r3, r2
    65f6:	ea4f 5383 	mov.w	r3, r3, lsl #22
    65fa:	ea4f 5393 	mov.w	r3, r3, lsr #22
    65fe:	b98b      	cbnz	r3, 6624 <UART_IntTransmit+0xc8>
    	UART_IntConfig((LPC_UART_TypeDef *)LPC_UART0, UART_INTCFG_THRE, DISABLE);
    6600:	f44f 4040 	mov.w	r0, #49152	; 0xc000
    6604:	f2c4 0000 	movt	r0, #16384	; 0x4000
    6608:	f04f 0101 	mov.w	r1, #1
    660c:	f04f 0200 	mov.w	r2, #0
    6610:	f7fe f986 	bl	4920 <UART_IntConfig>
    	// Reset Tx Interrupt state
    	TxIntStat = RESET;
    6614:	f642 53c4 	movw	r3, #11716	; 0x2dc4
    6618:	f2c1 0300 	movt	r3, #4096	; 0x1000
    661c:	f04f 0200 	mov.w	r2, #0
    6620:	701a      	strb	r2, [r3, #0]
    6622:	bd70      	pop	{r4, r5, r6, pc}
    }
    else{
      	// Set Tx Interrupt state
		TxIntStat = SET;
    6624:	f642 53c4 	movw	r3, #11716	; 0x2dc4
    6628:	f2c1 0300 	movt	r3, #4096	; 0x1000
    662c:	f04f 0201 	mov.w	r2, #1
    6630:	701a      	strb	r2, [r3, #0]
    	UART_IntConfig((LPC_UART_TypeDef *)LPC_UART0, UART_INTCFG_THRE, ENABLE);
    6632:	f44f 4040 	mov.w	r0, #49152	; 0xc000
    6636:	f2c4 0000 	movt	r0, #16384	; 0x4000
    663a:	4611      	mov	r1, r2
    663c:	f7fe f970 	bl	4920 <UART_IntConfig>
    6640:	bd70      	pop	{r4, r5, r6, pc}
    6642:	bf00      	nop

00006644 <UART_IntErr>:
 * @brief		UART Line Status Error
 * @param[in]	bLSErrType	UART Line Status Error Type
 * @return		None
 **********************************************************************/
void UART_IntErr(uint8_t bLSErrType)
{
    6644:	e7fe      	b.n	6644 <UART_IntErr>
    6646:	bf00      	nop

00006648 <UART0_IRQHandler>:
 * @brief		UART0 interrupt handler sub-routine
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void UART0_IRQHandler(void)
{
    6648:	b510      	push	{r4, lr}
	uint32_t intsrc, tmp, tmp1;

	/* Determine the interrupt source */
	intsrc = UART_GetIntId(LPC_UART0);
    664a:	f44f 4040 	mov.w	r0, #49152	; 0xc000
    664e:	f2c4 0000 	movt	r0, #16384	; 0x4000
    6652:	f7fe fa51 	bl	4af8 <UART_GetIntId>
	tmp = intsrc & UART_IIR_INTID_MASK;
    6656:	f000 040e 	and.w	r4, r0, #14


	// Receive Line Status
	if (tmp == UART_IIR_INTID_RLS){
    665a:	2c06      	cmp	r4, #6
    665c:	d10a      	bne.n	6674 <UART0_IRQHandler+0x2c>
		// Check line status
		tmp1 = UART_GetLineStatus(LPC_UART0);
    665e:	f44f 4040 	mov.w	r0, #49152	; 0xc000
    6662:	f2c4 0000 	movt	r0, #16384	; 0x4000
    6666:	f7fe fa0f 	bl	4a88 <UART_GetLineStatus>
		// Mask out the Receive Ready and Transmit Holding empty status
		tmp1 &= (UART_LSR_OE | UART_LSR_PE | UART_LSR_FE \
				| UART_LSR_BI | UART_LSR_RXFE);
		// If any error exist
		if (tmp1) {
    666a:	f010 009e 	ands.w	r0, r0, #158	; 0x9e
    666e:	d010      	beq.n	6692 <UART0_IRQHandler+0x4a>
			UART_IntErr(tmp1);
    6670:	f7ff ffe8 	bl	6644 <UART_IntErr>
		}
	}

	// Receive Data Available or Character time-out
	if ((tmp == UART_IIR_INTID_RDA) || (tmp == UART_IIR_INTID_CTI)){
    6674:	2c0c      	cmp	r4, #12
    6676:	bf14      	ite	ne
    6678:	2300      	movne	r3, #0
    667a:	2301      	moveq	r3, #1
    667c:	2c04      	cmp	r4, #4
    667e:	bf08      	it	eq
    6680:	f043 0301 	orreq.w	r3, r3, #1
    6684:	b10b      	cbz	r3, 668a <UART0_IRQHandler+0x42>
		UART_IntReceive();
    6686:	f7ff ff11 	bl	64ac <UART_IntReceive>
	}

	// Transmit Holding Empty
	if (tmp == UART_IIR_INTID_THRE){
    668a:	2c02      	cmp	r4, #2
    668c:	d101      	bne.n	6692 <UART0_IRQHandler+0x4a>
		UART_IntTransmit();
    668e:	f7ff ff65 	bl	655c <UART_IntTransmit>
    6692:	bd10      	pop	{r4, pc}

00006694 <UARTReceive>:
 * @param[out]	rxbuf Pointer to Received buffer
 * @param[in]	buflen Length of Received buffer
 * @return 		Number of bytes actually read from the ring buffer
 **********************************************************************/
uint32_t UARTReceive(LPC_UART_TypeDef *UARTPort, uint8_t *rxbuf, uint8_t buflen)
{
    6694:	b570      	push	{r4, r5, r6, lr}
    6696:	4606      	mov	r6, r0
    6698:	460d      	mov	r5, r1
    669a:	4614      	mov	r4, r2
    uint32_t bytes = 0;

	/* Temporarily lock out UART receive interrupts during this
	   read so the UART receive interrupt won't cause problems
	   with the index values */
	UART_IntConfig(UARTPort, UART_INTCFG_RBR, DISABLE);
    669c:	f04f 0100 	mov.w	r1, #0
    66a0:	460a      	mov	r2, r1
    66a2:	f7fe f93d 	bl	4920 <UART_IntConfig>

	/* Loop until receive buffer ring is empty or
		until max_bytes expires */
	while ((buflen > 0) && (!(__BUF_IS_EMPTY(rb.rx_head, rb.rx_tail))))
    66a6:	b38c      	cbz	r4, 670c <UARTReceive+0x78>
    66a8:	f242 53b4 	movw	r3, #9652	; 0x25b4
    66ac:	f2c1 0300 	movt	r3, #4096	; 0x1000
    66b0:	689a      	ldr	r2, [r3, #8]
    66b2:	68db      	ldr	r3, [r3, #12]
    66b4:	4053      	eors	r3, r2
    66b6:	ea4f 5383 	mov.w	r3, r3, lsl #22
    66ba:	ea4f 5393 	mov.w	r3, r3, lsr #22
    66be:	b343      	cbz	r3, 6712 <UARTReceive+0x7e>
 * 				should be UART0
 * @param[out]	rxbuf Pointer to Received buffer
 * @param[in]	buflen Length of Received buffer
 * @return 		Number of bytes actually read from the ring buffer
 **********************************************************************/
uint32_t UARTReceive(LPC_UART_TypeDef *UARTPort, uint8_t *rxbuf, uint8_t buflen)
    66c0:	f104 31ff 	add.w	r1, r4, #4294967295
    66c4:	b2c9      	uxtb	r1, r1
    66c6:	f101 0101 	add.w	r1, r1, #1
{
    uint8_t *data = (uint8_t *) rxbuf;
    uint32_t bytes = 0;
    66ca:	f04f 0400 	mov.w	r4, #0
	/* Loop until receive buffer ring is empty or
		until max_bytes expires */
	while ((buflen > 0) && (!(__BUF_IS_EMPTY(rb.rx_head, rb.rx_tail))))
	{
		/* Read data from ring buffer into user buffer */
		*data = rb.rx[rb.rx_tail];
    66ce:	f242 53b4 	movw	r3, #9652	; 0x25b4
    66d2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    66d6:	68da      	ldr	r2, [r3, #12]
    66d8:	189a      	adds	r2, r3, r2
    66da:	f892 2410 	ldrb.w	r2, [r2, #1040]	; 0x410
    66de:	552a      	strb	r2, [r5, r4]
		data++;

		/* Update tail pointer */
		__BUF_INCR(rb.rx_tail);
    66e0:	68da      	ldr	r2, [r3, #12]
    66e2:	f102 0201 	add.w	r2, r2, #1
    66e6:	ea4f 5282 	mov.w	r2, r2, lsl #22
    66ea:	ea4f 5292 	mov.w	r2, r2, lsr #22
    66ee:	60da      	str	r2, [r3, #12]

		/* Increment data count and decrement buffer size count */
		bytes++;
    66f0:	f104 0401 	add.w	r4, r4, #1
	   with the index values */
	UART_IntConfig(UARTPort, UART_INTCFG_RBR, DISABLE);

	/* Loop until receive buffer ring is empty or
		until max_bytes expires */
	while ((buflen > 0) && (!(__BUF_IS_EMPTY(rb.rx_head, rb.rx_tail))))
    66f4:	428c      	cmp	r4, r1
    66f6:	d00e      	beq.n	6716 <UARTReceive+0x82>
    66f8:	689a      	ldr	r2, [r3, #8]
    66fa:	68d8      	ldr	r0, [r3, #12]
    66fc:	4042      	eors	r2, r0
    66fe:	ea4f 5282 	mov.w	r2, r2, lsl #22
    6702:	ea4f 5292 	mov.w	r2, r2, lsr #22
    6706:	2a00      	cmp	r2, #0
    6708:	d1e5      	bne.n	66d6 <UARTReceive+0x42>
    670a:	e004      	b.n	6716 <UARTReceive+0x82>
 * @return 		Number of bytes actually read from the ring buffer
 **********************************************************************/
uint32_t UARTReceive(LPC_UART_TypeDef *UARTPort, uint8_t *rxbuf, uint8_t buflen)
{
    uint8_t *data = (uint8_t *) rxbuf;
    uint32_t bytes = 0;
    670c:	f04f 0400 	mov.w	r4, #0
    6710:	e001      	b.n	6716 <UARTReceive+0x82>
    6712:	f04f 0400 	mov.w	r4, #0
		bytes++;
		buflen--;
	}

	/* Re-enable UART interrupts */
	UART_IntConfig(UARTPort, UART_INTCFG_RBR, ENABLE);
    6716:	4630      	mov	r0, r6
    6718:	f04f 0100 	mov.w	r1, #0
    671c:	f04f 0201 	mov.w	r2, #1
    6720:	f7fe f8fe 	bl	4920 <UART_IntConfig>

    return bytes;
}
    6724:	4620      	mov	r0, r4
    6726:	bd70      	pop	{r4, r5, r6, pc}

00006728 <comm_flush>:
	UART_LINE[0]='\0';
	return buffer;
#endif
}

void comm_flush(void){
    6728:	b510      	push	{r4, lr}
    672a:	b082      	sub	sp, #8
#if 1
	uint8_t buffer[1], len;
	while (UARTReceive(LPC_UART0, buffer, 1));
    672c:	f44f 4440 	mov.w	r4, #49152	; 0xc000
    6730:	f2c4 0400 	movt	r4, #16384	; 0x4000
    6734:	4620      	mov	r0, r4
    6736:	a901      	add	r1, sp, #4
    6738:	f04f 0201 	mov.w	r2, #1
    673c:	f7ff ffaa 	bl	6694 <UARTReceive>
    6740:	2800      	cmp	r0, #0
    6742:	d1f7      	bne.n	6734 <comm_flush+0xc>
#endif
}
    6744:	b002      	add	sp, #8
    6746:	bd10      	pop	{r4, pc}

00006748 <exec_cmd>:
UART_RING_BUFFER_T rb;

// Current Tx Interrupt enable state
__IO FlagStatus TxIntStat;

void exec_cmd(char *cmd){
    6748:	b510      	push	{r4, lr}
    674a:	4604      	mov	r4, r0
	comm_flush();
    674c:	f7ff ffec 	bl	6728 <comm_flush>
	if(stricmp(cmd,"b")==0){
    6750:	4620      	mov	r0, r4
    6752:	f247 11e0 	movw	r1, #29152	; 0x71e0
    6756:	f2c0 0102 	movt	r1, #2
    675a:	f01a fc37 	bl	20fcc <strcasecmp>
    675e:	bb50      	cbnz	r0, 67b6 <exec_cmd+0x6e>
		xprintf(INFO "resetting to bootloader" " (%s:%d)\n",_F_,_L_);
    6760:	f247 10e4 	movw	r0, #29156	; 0x71e4
    6764:	f2c0 0002 	movt	r0, #2
    6768:	4944      	ldr	r1, [pc, #272]	; (687c <exec_cmd+0x134>)
    676a:	f04f 0249 	mov.w	r2, #73	; 0x49
    676e:	f000 f8f1 	bl	6954 <xprintf>
		SCB->VTOR = (BOOTLOADER_START & 0x1FFFFF80);
    6772:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    6776:	f2ce 0300 	movt	r3, #57344	; 0xe000
    677a:	f04f 0200 	mov.w	r2, #0
    677e:	609a      	str	r2, [r3, #8]
		RTC_WriteGPREG(LPC_RTC, 2, 0xbbbbbbbb);
    6780:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    6784:	f2c4 0002 	movt	r0, #16386	; 0x4002
    6788:	f04f 0102 	mov.w	r1, #2
    678c:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
    6790:	f7fd f97e 	bl	3a90 <RTC_WriteGPREG>
		WDT_Init (WDT_CLKSRC_PCLK, WDT_MODE_RESET);
    6794:	f04f 0001 	mov.w	r0, #1
    6798:	4601      	mov	r1, r0
    679a:	f7fe fab7 	bl	4d0c <WDT_Init>
		WDT_Start(1);
    679e:	f04f 0001 	mov.w	r0, #1
    67a2:	f7fe fae9 	bl	4d78 <WDT_Start>
    67a6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    67aa:	f2ce 0300 	movt	r3, #57344	; 0xe000
    67ae:	f04f 0201 	mov.w	r2, #1
    67b2:	601a      	str	r2, [r3, #0]
    67b4:	bd10      	pop	{r4, pc}
		NVIC_EnableIRQ(WDT_IRQn);
	}
	else if(stricmp(cmd,"r")==0){
    67b6:	4620      	mov	r0, r4
    67b8:	f64c 11f8 	movw	r1, #51704	; 0xc9f8
    67bc:	f2c0 0102 	movt	r1, #2
    67c0:	f01a fc04 	bl	20fcc <strcasecmp>
    67c4:	b9c8      	cbnz	r0, 67fa <exec_cmd+0xb2>
		xprintf(INFO "reseting" " (%s:%d)\n",_F_,_L_);
    67c6:	f247 2030 	movw	r0, #29232	; 0x7230
    67ca:	f2c0 0002 	movt	r0, #2
    67ce:	492b      	ldr	r1, [pc, #172]	; (687c <exec_cmd+0x134>)
    67d0:	f04f 0251 	mov.w	r2, #81	; 0x51
    67d4:	f000 f8be 	bl	6954 <xprintf>
		WDT_Init(WDT_CLKSRC_PCLK, WDT_MODE_RESET);
    67d8:	f04f 0001 	mov.w	r0, #1
    67dc:	4601      	mov	r1, r0
    67de:	f7fe fa95 	bl	4d0c <WDT_Init>
		WDT_Start(1);
    67e2:	f04f 0001 	mov.w	r0, #1
    67e6:	f7fe fac7 	bl	4d78 <WDT_Start>
    67ea:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    67ee:	f2ce 0300 	movt	r3, #57344	; 0xe000
    67f2:	f04f 0201 	mov.w	r2, #1
    67f6:	601a      	str	r2, [r3, #0]
    67f8:	e7fe      	b.n	67f8 <exec_cmd+0xb0>
		NVIC_EnableIRQ(WDT_IRQn);
		while(1);//lockup, wdt will reset board
		//WDT_ClrTimeOutFlag();
	}
	else if(stricmp(cmd,"t")==0){
    67fa:	4620      	mov	r0, r4
    67fc:	f64c 11dc 	movw	r1, #51676	; 0xc9dc
    6800:	f2c0 0102 	movt	r1, #2
    6804:	f01a fbe2 	bl	20fcc <strcasecmp>
    6808:	b948      	cbnz	r0, 681e <exec_cmd+0xd6>
		xprintf(INFO "tests running" " (%s:%d)\n",_F_,_L_);
    680a:	f247 204c 	movw	r0, #29260	; 0x724c
    680e:	f2c0 0002 	movt	r0, #2
    6812:	491a      	ldr	r1, [pc, #104]	; (687c <exec_cmd+0x134>)
    6814:	f04f 0259 	mov.w	r2, #89	; 0x59
    6818:	f000 f89c 	bl	6954 <xprintf>
    681c:	bd10      	pop	{r4, pc}
	}
	else if(stricmp(cmd,"q")==0){
    681e:	4620      	mov	r0, r4
    6820:	f247 216c 	movw	r1, #29292	; 0x726c
    6824:	f2c0 0102 	movt	r1, #2
    6828:	f01a fbd0 	bl	20fcc <strcasecmp>
    682c:	b948      	cbnz	r0, 6842 <exec_cmd+0xfa>
		xprintf(INFO "q" " (%s:%d)\n",_F_,_L_);
    682e:	f247 2070 	movw	r0, #29296	; 0x7270
    6832:	f2c0 0002 	movt	r0, #2
    6836:	4911      	ldr	r1, [pc, #68]	; (687c <exec_cmd+0x134>)
    6838:	f04f 025c 	mov.w	r2, #92	; 0x5c
    683c:	f000 f88a 	bl	6954 <xprintf>
    6840:	bd10      	pop	{r4, pc}
	}
	else if(stricmp(cmd,"")==0){
    6842:	4620      	mov	r0, r4
    6844:	f64b 6100 	movw	r1, #48640	; 0xbe00
    6848:	f2c0 0102 	movt	r1, #2
    684c:	f01a fbbe 	bl	20fcc <strcasecmp>
    6850:	b948      	cbnz	r0, 6866 <exec_cmd+0x11e>
		xprintf(INFO "\r\nr-Resets board\r\nb-Resets to bootloader\r\nt-led test\r\n" " (%s:%d)\n",_F_,_L_);
    6852:	f247 2084 	movw	r0, #29316	; 0x7284
    6856:	f2c0 0002 	movt	r0, #2
    685a:	4908      	ldr	r1, [pc, #32]	; (687c <exec_cmd+0x134>)
    685c:	f04f 025f 	mov.w	r2, #95	; 0x5f
    6860:	f000 f878 	bl	6954 <xprintf>
    6864:	bd10      	pop	{r4, pc}
	}
	else{
		xprintf(INFO "Command not found (cmd=%s)" " (%s:%d)\n",cmd,_F_,_L_);
    6866:	f247 20cc 	movw	r0, #29388	; 0x72cc
    686a:	f2c0 0002 	movt	r0, #2
    686e:	4621      	mov	r1, r4
    6870:	4a02      	ldr	r2, [pc, #8]	; (687c <exec_cmd+0x134>)
    6872:	f04f 0362 	mov.w	r3, #98	; 0x62
    6876:	f000 f86d 	bl	6954 <xprintf>
    687a:	bd10      	pop	{r4, pc}
    687c:	00027228 	.word	0x00027228

00006880 <xputc>:
	return 1;
}


void xputc (char c)
{
    6880:	b510      	push	{r4, lr}
    6882:	4604      	mov	r4, r0
	if (c == '\n') comm_put('\r');
    6884:	280a      	cmp	r0, #10
    6886:	d103      	bne.n	6890 <xputc+0x10>
    6888:	f04f 000d 	mov.w	r0, #13
    688c:	f7ff fd9e 	bl	63cc <comm_put>
	comm_put(c);
    6890:	4620      	mov	r0, r4
    6892:	f7ff fd9b 	bl	63cc <comm_put>
}
    6896:	bd10      	pop	{r4, pc}

00006898 <xputs>:


void xputs (const char* str)
{
    6898:	b510      	push	{r4, lr}
    689a:	4604      	mov	r4, r0
	while (*str)
    689c:	7800      	ldrb	r0, [r0, #0]
    689e:	b128      	cbz	r0, 68ac <xputs+0x14>
		xputc(*str++);
    68a0:	f7ff ffee 	bl	6880 <xputc>
}


void xputs (const char* str)
{
	while (*str)
    68a4:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    68a8:	2800      	cmp	r0, #0
    68aa:	d1f9      	bne.n	68a0 <xputs+0x8>
    68ac:	bd10      	pop	{r4, pc}
    68ae:	bf00      	nop

000068b0 <xitoa>:
		xputc(*str++);
}


void xitoa (long val, int radix, int len)
{
    68b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    68b2:	b087      	sub	sp, #28
	uint8_t c, r, sgn = 0, pad = ' ';
	uint8_t s[20], i = 0;
	uint32_t v;

	if (radix < 0) {
    68b4:	1e0b      	subs	r3, r1, #0
}


void xitoa (long val, int radix, int len)
{
	uint8_t c, r, sgn = 0, pad = ' ';
    68b6:	bfa8      	it	ge
    68b8:	2500      	movge	r5, #0
	uint8_t s[20], i = 0;
	uint32_t v;

	if (radix < 0) {
    68ba:	da06      	bge.n	68ca <xitoa+0x1a>
		radix = -radix;
    68bc:	f1c3 0300 	rsb	r3, r3, #0
		if (val < 0) {
    68c0:	2800      	cmp	r0, #0
			val = -val;
    68c2:	bfba      	itte	lt
    68c4:	4240      	neglt	r0, r0
			sgn = '-';
    68c6:	252d      	movlt	r5, #45	; 0x2d
}


void xitoa (long val, int radix, int len)
{
	uint8_t c, r, sgn = 0, pad = ' ';
    68c8:	2500      	movge	r5, #0
			val = -val;
			sgn = '-';
		}
	}
	v = val;
	r = radix;
    68ca:	b2db      	uxtb	r3, r3
	if (len < 0) {
    68cc:	2a00      	cmp	r2, #0
		len = -len;
    68ce:	bfba      	itte	lt
    68d0:	4252      	neglt	r2, r2
		pad = '0';
    68d2:	2130      	movlt	r1, #48	; 0x30
}


void xitoa (long val, int radix, int len)
{
	uint8_t c, r, sgn = 0, pad = ' ';
    68d4:	2120      	movge	r1, #32
	r = radix;
	if (len < 0) {
		len = -len;
		pad = '0';
	}
	if (len > 20) return;
    68d6:	2a14      	cmp	r2, #20
		if (val < 0) {
			val = -val;
			sgn = '-';
		}
	}
	v = val;
    68d8:	bfd8      	it	le
    68da:	2700      	movle	r7, #0
	r = radix;
	if (len < 0) {
		len = -len;
		pad = '0';
	}
	if (len > 20) return;
    68dc:	dd01      	ble.n	68e2 <xitoa+0x32>
    68de:	e037      	b.n	6950 <xitoa+0xa0>
	do {
		c = (uint8_t)(v % r);
		if (c >= 10) c += 7;
		c += '0';
		s[i++] = c;
    68e0:	4627      	mov	r7, r4
		len = -len;
		pad = '0';
	}
	if (len > 20) return;
	do {
		c = (uint8_t)(v % r);
    68e2:	fbb0 f6f3 	udiv	r6, r0, r3
    68e6:	fb03 0616 	mls	r6, r3, r6, r0
    68ea:	b2f6      	uxtb	r6, r6
		if (c >= 10) c += 7;
    68ec:	2e09      	cmp	r6, #9
    68ee:	bf84      	itt	hi
    68f0:	3607      	addhi	r6, #7
    68f2:	b2f6      	uxtbhi	r6, r6
		c += '0';
    68f4:	f106 0630 	add.w	r6, r6, #48	; 0x30
		s[i++] = c;
    68f8:	f10d 0e18 	add.w	lr, sp, #24
    68fc:	eb0e 0407 	add.w	r4, lr, r7
    6900:	f804 6c14 	strb.w	r6, [r4, #-20]
    6904:	f107 0401 	add.w	r4, r7, #1
    6908:	b2e4      	uxtb	r4, r4
		v /= r;
    690a:	fbb0 f0f3 	udiv	r0, r0, r3
	} while (v);
    690e:	2800      	cmp	r0, #0
    6910:	d1e6      	bne.n	68e0 <xitoa+0x30>
	if (sgn) s[i++] = sgn;
    6912:	b12d      	cbz	r5, 6920 <xitoa+0x70>
    6914:	4474      	add	r4, lr
    6916:	f804 5c14 	strb.w	r5, [r4, #-20]
    691a:	f107 0402 	add.w	r4, r7, #2
    691e:	b2e4      	uxtb	r4, r4
	while (i < len)
    6920:	4623      	mov	r3, r4
    6922:	42a2      	cmp	r2, r4
    6924:	dd09      	ble.n	693a <xitoa+0x8a>
		s[i++] = pad;
    6926:	a806      	add	r0, sp, #24
    6928:	18c3      	adds	r3, r0, r3
    692a:	f803 1c14 	strb.w	r1, [r3, #-20]
    692e:	f104 0401 	add.w	r4, r4, #1
    6932:	b2e4      	uxtb	r4, r4
		c += '0';
		s[i++] = c;
		v /= r;
	} while (v);
	if (sgn) s[i++] = sgn;
	while (i < len)
    6934:	4623      	mov	r3, r4
    6936:	42a2      	cmp	r2, r4
    6938:	dcf5      	bgt.n	6926 <xitoa+0x76>
		s[i++] = pad;
	do
		xputc(s[--i]);
    693a:	f104 34ff 	add.w	r4, r4, #4294967295
    693e:	b2e4      	uxtb	r4, r4
    6940:	aa06      	add	r2, sp, #24
    6942:	1913      	adds	r3, r2, r4
    6944:	f813 0c14 	ldrb.w	r0, [r3, #-20]
    6948:	f7ff ff9a 	bl	6880 <xputc>
	while (i);
    694c:	2c00      	cmp	r4, #0
    694e:	d1f4      	bne.n	693a <xitoa+0x8a>
}
    6950:	b007      	add	sp, #28
    6952:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006954 <xprintf>:


void xprintf (const char* str, ...)
{
    6954:	b40f      	push	{r0, r1, r2, r3}
    6956:	b5f0      	push	{r4, r5, r6, r7, lr}
    6958:	b083      	sub	sp, #12
    695a:	ab08      	add	r3, sp, #32
    695c:	f853 4b04 	ldr.w	r4, [r3], #4
	va_list arp;
	int d, r, w, s, l;


	va_start(arp, str);
    6960:	9301      	str	r3, [sp, #4]
			continue;
		}
		if (d == 'u') r = 10;
		if (d == 'd') r = -10;
		if (d == 'X' || d == 'x') r = 16; // 'x' added by mthomas in increase compatibility
		if (d == 'b') r = 2;
    6962:	f04f 0502 	mov.w	r5, #2
		}
		if (d == 'c') {
			xputc((char)va_arg(arp, int));
			continue;
		}
		if (d == 'u') r = 10;
    6966:	f04f 060a 	mov.w	r6, #10
		if (d == 'd') r = -10;
    696a:	f06f 0709 	mvn.w	r7, #9
	int d, r, w, s, l;


	va_start(arp, str);

	while ((d = *str++) != 0) {
    696e:	e071      	b.n	6a54 <xprintf+0x100>
		if (d != '%') {
    6970:	2825      	cmp	r0, #37	; 0x25
    6972:	d004      	beq.n	697e <xprintf+0x2a>
	int d, r, w, s, l;


	va_start(arp, str);

	while ((d = *str++) != 0) {
    6974:	f104 0401 	add.w	r4, r4, #1
		if (d != '%') {
			xputc(d); continue;
    6978:	f7ff ff82 	bl	6880 <xputc>
    697c:	e06a      	b.n	6a54 <xprintf+0x100>
		}
		d = *str++; w = r = s = l = 0;
    697e:	7860      	ldrb	r0, [r4, #1]
		if (d == '0') {
    6980:	2830      	cmp	r0, #48	; 0x30

	while ((d = *str++) != 0) {
		if (d != '%') {
			xputc(d); continue;
		}
		d = *str++; w = r = s = l = 0;
    6982:	bf19      	ittee	ne
    6984:	3402      	addne	r4, #2
    6986:	f04f 0c00 	movne.w	ip, #0
		if (d == '0') {
			d = *str++; s = 1;
    698a:	78a0      	ldrbeq	r0, [r4, #2]
    698c:	3403      	addeq	r4, #3
    698e:	bf08      	it	eq
    6990:	f04f 0c01 	moveq.w	ip, #1
		}
		while ((d >= '0')&&(d <= '9')) {
    6994:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    6998:	2b09      	cmp	r3, #9
    699a:	bf88      	it	hi
    699c:	2200      	movhi	r2, #0
    699e:	d811      	bhi.n	69c4 <xprintf+0x70>
    69a0:	4623      	mov	r3, r4
    69a2:	f04f 0200 	mov.w	r2, #0
			w += w * 10 + (d - '0');
    69a6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    69aa:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
    69ae:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    69b2:	1812      	adds	r2, r2, r0
			d = *str++;
    69b4:	f813 1b01 	ldrb.w	r1, [r3], #1
    69b8:	4608      	mov	r0, r1
    69ba:	461c      	mov	r4, r3
		}
		d = *str++; w = r = s = l = 0;
		if (d == '0') {
			d = *str++; s = 1;
		}
		while ((d >= '0')&&(d <= '9')) {
    69bc:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
    69c0:	2909      	cmp	r1, #9
    69c2:	d9f0      	bls.n	69a6 <xprintf+0x52>
			w += w * 10 + (d - '0');
			d = *str++;
		}
		if (s) w = -w;
    69c4:	f1bc 0f00 	cmp.w	ip, #0
    69c8:	d001      	beq.n	69ce <xprintf+0x7a>
    69ca:	f1c2 0200 	rsb	r2, r2, #0
		if (d == 'l') {
    69ce:	286c      	cmp	r0, #108	; 0x6c
			l = 1;
			d = *str++;
    69d0:	bf06      	itte	eq
    69d2:	f814 0b01 	ldrbeq.w	r0, [r4], #1
			w += w * 10 + (d - '0');
			d = *str++;
		}
		if (s) w = -w;
		if (d == 'l') {
			l = 1;
    69d6:	2301      	moveq	r3, #1

	while ((d = *str++) != 0) {
		if (d != '%') {
			xputc(d); continue;
		}
		d = *str++; w = r = s = l = 0;
    69d8:	2300      	movne	r3, #0
		if (s) w = -w;
		if (d == 'l') {
			l = 1;
			d = *str++;
		}
		if (!d) break;
    69da:	2800      	cmp	r0, #0
    69dc:	d03d      	beq.n	6a5a <xprintf+0x106>
		if (d == 's') {
    69de:	2873      	cmp	r0, #115	; 0x73
    69e0:	d107      	bne.n	69f2 <xprintf+0x9e>
			xputs(va_arg(arp, char*));
    69e2:	9b01      	ldr	r3, [sp, #4]
    69e4:	f103 0204 	add.w	r2, r3, #4
    69e8:	9201      	str	r2, [sp, #4]
    69ea:	6818      	ldr	r0, [r3, #0]
    69ec:	f7ff ff54 	bl	6898 <xputs>
			continue;
    69f0:	e030      	b.n	6a54 <xprintf+0x100>
		}
		if (d == 'c') {
    69f2:	2863      	cmp	r0, #99	; 0x63
    69f4:	d107      	bne.n	6a06 <xprintf+0xb2>
			xputc((char)va_arg(arp, int));
    69f6:	9b01      	ldr	r3, [sp, #4]
    69f8:	f103 0204 	add.w	r2, r3, #4
    69fc:	9201      	str	r2, [sp, #4]
    69fe:	7818      	ldrb	r0, [r3, #0]
    6a00:	f7ff ff3e 	bl	6880 <xputc>
			continue;
    6a04:	e026      	b.n	6a54 <xprintf+0x100>
		}
		if (d == 'u') r = 10;
    6a06:	2875      	cmp	r0, #117	; 0x75
    6a08:	d00c      	beq.n	6a24 <xprintf+0xd0>
		if (d == 'd') r = -10;
    6a0a:	2864      	cmp	r0, #100	; 0x64
    6a0c:	d00e      	beq.n	6a2c <xprintf+0xd8>
		if (d == 'X' || d == 'x') r = 16; // 'x' added by mthomas in increase compatibility
    6a0e:	2878      	cmp	r0, #120	; 0x78
    6a10:	bf14      	ite	ne
    6a12:	2100      	movne	r1, #0
    6a14:	2101      	moveq	r1, #1
    6a16:	2858      	cmp	r0, #88	; 0x58
    6a18:	bf08      	it	eq
    6a1a:	f041 0101 	orreq.w	r1, r1, #1

	while ((d = *str++) != 0) {
		if (d != '%') {
			xputc(d); continue;
		}
		d = *str++; w = r = s = l = 0;
    6a1e:	ea4f 1101 	mov.w	r1, r1, lsl #4
    6a22:	e000      	b.n	6a26 <xprintf+0xd2>
		}
		if (d == 'c') {
			xputc((char)va_arg(arp, int));
			continue;
		}
		if (d == 'u') r = 10;
    6a24:	4631      	mov	r1, r6
		if (d == 'd') r = -10;
		if (d == 'X' || d == 'x') r = 16; // 'x' added by mthomas in increase compatibility
		if (d == 'b') r = 2;
    6a26:	2862      	cmp	r0, #98	; 0x62
    6a28:	d101      	bne.n	6a2e <xprintf+0xda>
    6a2a:	e002      	b.n	6a32 <xprintf+0xde>
		if (d == 'c') {
			xputc((char)va_arg(arp, int));
			continue;
		}
		if (d == 'u') r = 10;
		if (d == 'd') r = -10;
    6a2c:	4639      	mov	r1, r7
		if (d == 'X' || d == 'x') r = 16; // 'x' added by mthomas in increase compatibility
		if (d == 'b') r = 2;
		if (!r) break;
    6a2e:	b909      	cbnz	r1, 6a34 <xprintf+0xe0>
    6a30:	e013      	b.n	6a5a <xprintf+0x106>
			continue;
		}
		if (d == 'u') r = 10;
		if (d == 'd') r = -10;
		if (d == 'X' || d == 'x') r = 16; // 'x' added by mthomas in increase compatibility
		if (d == 'b') r = 2;
    6a32:	4629      	mov	r1, r5
		if (!r) break;
		if (l) {
    6a34:	b13b      	cbz	r3, 6a46 <xprintf+0xf2>
			xitoa((long)va_arg(arp, long), r, w);
    6a36:	9b01      	ldr	r3, [sp, #4]
    6a38:	f103 0004 	add.w	r0, r3, #4
    6a3c:	9001      	str	r0, [sp, #4]
    6a3e:	6818      	ldr	r0, [r3, #0]
    6a40:	f7ff ff36 	bl	68b0 <xitoa>
    6a44:	e006      	b.n	6a54 <xprintf+0x100>
		} else {
			if (r > 0)
				xitoa((unsigned long)va_arg(arp, int), r, w);
			else
				xitoa((long)va_arg(arp, int), r, w);
    6a46:	9b01      	ldr	r3, [sp, #4]
    6a48:	f103 0004 	add.w	r0, r3, #4
    6a4c:	9001      	str	r0, [sp, #4]
    6a4e:	6818      	ldr	r0, [r3, #0]
    6a50:	f7ff ff2e 	bl	68b0 <xitoa>
	int d, r, w, s, l;


	va_start(arp, str);

	while ((d = *str++) != 0) {
    6a54:	7820      	ldrb	r0, [r4, #0]
    6a56:	2800      	cmp	r0, #0
    6a58:	d18a      	bne.n	6970 <xprintf+0x1c>
				xitoa((long)va_arg(arp, int), r, w);
		}
	}

	va_end(arp);
}
    6a5a:	b003      	add	sp, #12
    6a5c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    6a60:	b004      	add	sp, #16
    6a62:	4770      	bx	lr

00006a64 <fat_get_next_cluster>:
 * \param[in] fs The filesystem for which to determine the next cluster.
 * \param[in] cluster_num The number of the cluster for which to determine its successor.
 * \returns The wanted cluster number, or 0 on error.
 */
cluster_t fat_get_next_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    6a64:	b500      	push	{lr}
    6a66:	b083      	sub	sp, #12
    if(!fs || cluster_num < 2)
    6a68:	2901      	cmp	r1, #1
    6a6a:	bf8c      	ite	hi
    6a6c:	2300      	movhi	r3, #0
    6a6e:	2301      	movls	r3, #1
    6a70:	2800      	cmp	r0, #0
    6a72:	bf08      	it	eq
    6a74:	f043 0301 	orreq.w	r3, r3, #1
    6a78:	bb43      	cbnz	r3, 6acc <fat_get_next_cluster+0x68>
    else
#endif
    {
        /* read appropriate fat entry */
        uint16_t fat_entry;
        if(!fs->partition->device_read(fs->header.fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    6a7a:	6803      	ldr	r3, [r0, #0]
    6a7c:	6880      	ldr	r0, [r0, #8]
    6a7e:	681b      	ldr	r3, [r3, #0]
    6a80:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    6a84:	f10d 0106 	add.w	r1, sp, #6
    6a88:	f04f 0202 	mov.w	r2, #2
    6a8c:	4798      	blx	r3
    6a8e:	b300      	cbz	r0, 6ad2 <fat_get_next_cluster+0x6e>
            return 0;

        /* determine next cluster from fat */
        cluster_num = ltoh16(fat_entry);
    6a90:	f8bd 0006 	ldrh.w	r0, [sp, #6]
        
        if(cluster_num == FAT16_CLUSTER_FREE ||
           cluster_num == FAT16_CLUSTER_BAD ||
    6a94:	f64f 73f7 	movw	r3, #65527	; 0xfff7
    6a98:	4298      	cmp	r0, r3
    6a9a:	bf14      	ite	ne
    6a9c:	2300      	movne	r3, #0
    6a9e:	2301      	moveq	r3, #1
            return 0;

        /* determine next cluster from fat */
        cluster_num = ltoh16(fat_entry);
        
        if(cluster_num == FAT16_CLUSTER_FREE ||
    6aa0:	2800      	cmp	r0, #0
    6aa2:	bf08      	it	eq
    6aa4:	f043 0301 	orreq.w	r3, r3, #1
    6aa8:	b9b3      	cbnz	r3, 6ad8 <fat_get_next_cluster+0x74>
           cluster_num == FAT16_CLUSTER_BAD ||
           (cluster_num >= FAT16_CLUSTER_RESERVED_MIN && cluster_num <= FAT16_CLUSTER_RESERVED_MAX) ||
    6aaa:	f100 0210 	add.w	r2, r0, #16
    6aae:	b292      	uxth	r2, r2
           (cluster_num >= FAT16_CLUSTER_LAST_MIN && cluster_num <= FAT16_CLUSTER_LAST_MAX))
    6ab0:	f64f 73f7 	movw	r3, #65527	; 0xfff7
    6ab4:	4298      	cmp	r0, r3
    6ab6:	bf94      	ite	ls
    6ab8:	2300      	movls	r3, #0
    6aba:	2301      	movhi	r3, #1
        /* determine next cluster from fat */
        cluster_num = ltoh16(fat_entry);
        
        if(cluster_num == FAT16_CLUSTER_FREE ||
           cluster_num == FAT16_CLUSTER_BAD ||
           (cluster_num >= FAT16_CLUSTER_RESERVED_MIN && cluster_num <= FAT16_CLUSTER_RESERVED_MAX) ||
    6abc:	2a06      	cmp	r2, #6
    6abe:	bf98      	it	ls
    6ac0:	f043 0301 	orrls.w	r3, r3, #1
           (cluster_num >= FAT16_CLUSTER_LAST_MIN && cluster_num <= FAT16_CLUSTER_LAST_MAX))
            return 0;
    6ac4:	2b00      	cmp	r3, #0
    6ac6:	bf18      	it	ne
    6ac8:	2000      	movne	r0, #0
    6aca:	e007      	b.n	6adc <fat_get_next_cluster+0x78>
 * \returns The wanted cluster number, or 0 on error.
 */
cluster_t fat_get_next_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
        return 0;
    6acc:	f04f 0000 	mov.w	r0, #0
    6ad0:	e004      	b.n	6adc <fat_get_next_cluster+0x78>
#endif
    {
        /* read appropriate fat entry */
        uint16_t fat_entry;
        if(!fs->partition->device_read(fs->header.fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
            return 0;
    6ad2:	f04f 0000 	mov.w	r0, #0
    6ad6:	e001      	b.n	6adc <fat_get_next_cluster+0x78>
        
        if(cluster_num == FAT16_CLUSTER_FREE ||
           cluster_num == FAT16_CLUSTER_BAD ||
           (cluster_num >= FAT16_CLUSTER_RESERVED_MIN && cluster_num <= FAT16_CLUSTER_RESERVED_MAX) ||
           (cluster_num >= FAT16_CLUSTER_LAST_MIN && cluster_num <= FAT16_CLUSTER_LAST_MAX))
            return 0;
    6ad8:	f04f 0000 	mov.w	r0, #0
    }

    return cluster_num;
}
    6adc:	b003      	add	sp, #12
    6ade:	bd00      	pop	{pc}

00006ae0 <fat_free_clusters>:
 * \param[in] cluster_num The starting cluster of the chain which to free.
 * \returns 0 on failure, 1 on success.
 * \see fat_terminate_clusters
 */
uint8_t fat_free_clusters(struct fat_fs_struct* fs, cluster_t cluster_num)
{
    6ae0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6ae4:	b083      	sub	sp, #12
    6ae6:	460c      	mov	r4, r1
    if(!fs || cluster_num < 2)
    6ae8:	4605      	mov	r5, r0
    6aea:	2901      	cmp	r1, #1
    6aec:	bf8c      	ite	hi
    6aee:	2300      	movhi	r3, #0
    6af0:	2301      	movls	r3, #1
    6af2:	2800      	cmp	r0, #0
    6af4:	bf08      	it	eq
    6af6:	f043 0301 	orreq.w	r3, r3, #1
    6afa:	bb43      	cbnz	r3, 6b4e <fat_free_clusters+0x6e>
        return 0;

    offset_t fat_offset = fs->header.fat_offset;
    6afc:	f8d0 8008 	ldr.w	r8, [r0, #8]

            cluster_num = cluster_num_next;
        }
    }

    return 1;
    6b00:	f04f 0001 	mov.w	r0, #1
    }
    else
#endif
    {
        uint16_t fat_entry;
        while(cluster_num)
    6b04:	b371      	cbz	r1, 6b64 <fat_free_clusters+0x84>
               (cluster_num_next >= FAT16_CLUSTER_RESERVED_MIN &&
                cluster_num_next <= FAT16_CLUSTER_RESERVED_MAX
               )
              )
                return 0;
            if(cluster_num_next >= FAT16_CLUSTER_LAST_MIN && cluster_num_next <= FAT16_CLUSTER_LAST_MAX)
    6b06:	f64f 77f7 	movw	r7, #65527	; 0xfff7
                cluster_num_next = 0;

            /* free cluster */
            fat_entry = HTOL16(FAT16_CLUSTER_FREE);
    6b0a:	f04f 0900 	mov.w	r9, #0
#endif
    {
        uint16_t fat_entry;
        while(cluster_num)
        {
            if(!fs->partition->device_read(fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    6b0e:	eb08 0644 	add.w	r6, r8, r4, lsl #1
    6b12:	682b      	ldr	r3, [r5, #0]
    6b14:	681b      	ldr	r3, [r3, #0]
    6b16:	4630      	mov	r0, r6
    6b18:	f10d 0106 	add.w	r1, sp, #6
    6b1c:	f04f 0202 	mov.w	r2, #2
    6b20:	4798      	blx	r3
    6b22:	b1b8      	cbz	r0, 6b54 <fat_free_clusters+0x74>
                return 0;

            /* get next cluster of current cluster before freeing current cluster */
            uint16_t cluster_num_next = ltoh16(fat_entry);
    6b24:	f8bd 4006 	ldrh.w	r4, [sp, #6]

            if(cluster_num_next == FAT16_CLUSTER_FREE)
    6b28:	b1bc      	cbz	r4, 6b5a <fat_free_clusters+0x7a>
                return 1;
            if(cluster_num_next == FAT16_CLUSTER_BAD ||
    6b2a:	f104 0310 	add.w	r3, r4, #16
    6b2e:	b29b      	uxth	r3, r3
    6b30:	2b07      	cmp	r3, #7
    6b32:	d915      	bls.n	6b60 <fat_free_clusters+0x80>
               (cluster_num_next >= FAT16_CLUSTER_RESERVED_MIN &&
                cluster_num_next <= FAT16_CLUSTER_RESERVED_MAX
               )
              )
                return 0;
            if(cluster_num_next >= FAT16_CLUSTER_LAST_MIN && cluster_num_next <= FAT16_CLUSTER_LAST_MAX)
    6b34:	42bc      	cmp	r4, r7
    6b36:	d818      	bhi.n	6b6a <fat_free_clusters+0x8a>
                cluster_num_next = 0;

            /* free cluster */
            fat_entry = HTOL16(FAT16_CLUSTER_FREE);
    6b38:	f8ad 9006 	strh.w	r9, [sp, #6]
            fs->partition->device_write(fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry));
    6b3c:	682b      	ldr	r3, [r5, #0]
    6b3e:	689b      	ldr	r3, [r3, #8]
    6b40:	4630      	mov	r0, r6
    6b42:	f10d 0106 	add.w	r1, sp, #6
    6b46:	f04f 0202 	mov.w	r2, #2
    6b4a:	4798      	blx	r3
    6b4c:	e7df      	b.n	6b0e <fat_free_clusters+0x2e>
 * \see fat_terminate_clusters
 */
uint8_t fat_free_clusters(struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
        return 0;
    6b4e:	f04f 0000 	mov.w	r0, #0
    6b52:	e007      	b.n	6b64 <fat_free_clusters+0x84>
    {
        uint16_t fat_entry;
        while(cluster_num)
        {
            if(!fs->partition->device_read(fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
                return 0;
    6b54:	f04f 0000 	mov.w	r0, #0
    6b58:	e004      	b.n	6b64 <fat_free_clusters+0x84>

            /* get next cluster of current cluster before freeing current cluster */
            uint16_t cluster_num_next = ltoh16(fat_entry);

            if(cluster_num_next == FAT16_CLUSTER_FREE)
                return 1;
    6b5a:	f04f 0001 	mov.w	r0, #1
    6b5e:	e001      	b.n	6b64 <fat_free_clusters+0x84>
            if(cluster_num_next == FAT16_CLUSTER_BAD ||
               (cluster_num_next >= FAT16_CLUSTER_RESERVED_MIN &&
                cluster_num_next <= FAT16_CLUSTER_RESERVED_MAX
               )
              )
                return 0;
    6b60:	f04f 0000 	mov.w	r0, #0
            cluster_num = cluster_num_next;
        }
    }

    return 1;
}
    6b64:	b003      	add	sp, #12
    6b66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                return 0;
            if(cluster_num_next >= FAT16_CLUSTER_LAST_MIN && cluster_num_next <= FAT16_CLUSTER_LAST_MAX)
                cluster_num_next = 0;

            /* free cluster */
            fat_entry = HTOL16(FAT16_CLUSTER_FREE);
    6b6a:	a902      	add	r1, sp, #8
    6b6c:	f04f 0300 	mov.w	r3, #0
    6b70:	f821 3d02 	strh.w	r3, [r1, #-2]!
            fs->partition->device_write(fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry));
    6b74:	682b      	ldr	r3, [r5, #0]
    6b76:	689b      	ldr	r3, [r3, #8]
    6b78:	4630      	mov	r0, r6
    6b7a:	f04f 0202 	mov.w	r2, #2
    6b7e:	4798      	blx	r3

            cluster_num = cluster_num_next;
        }
    }

    return 1;
    6b80:	f04f 0001 	mov.w	r0, #1
    6b84:	e7ee      	b.n	6b64 <fat_free_clusters+0x84>
    6b86:	bf00      	nop

00006b88 <fat_append_clusters>:
 * \param[in] cluster_num The cluster to which to append the new chain.
 * \param[in] count The number of clusters to allocate.
 * \returns 0 on failure, the number of the first new cluster on success.
 */
cluster_t fat_append_clusters(struct fat_fs_struct* fs, cluster_t cluster_num, cluster_t count)
{
    6b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6b8c:	b087      	sub	sp, #28
    6b8e:	9103      	str	r1, [sp, #12]
    if(!fs)
    6b90:	9002      	str	r0, [sp, #8]
        return 0;
    6b92:	f04f 0700 	mov.w	r7, #0
 * \param[in] count The number of clusters to allocate.
 * \returns 0 on failure, the number of the first new cluster on success.
 */
cluster_t fat_append_clusters(struct fat_fs_struct* fs, cluster_t cluster_num, cluster_t count)
{
    if(!fs)
    6b96:	2800      	cmp	r0, #0
    6b98:	d06d      	beq.n	6c76 <fat_append_clusters+0xee>
        return 0;

    device_read_t device_read = fs->partition->device_read;
    6b9a:	6803      	ldr	r3, [r0, #0]
    6b9c:	6819      	ldr	r1, [r3, #0]
    6b9e:	9100      	str	r1, [sp, #0]
    device_write_t device_write = fs->partition->device_write;
    6ba0:	689b      	ldr	r3, [r3, #8]
    6ba2:	9301      	str	r3, [sp, #4]
    offset_t fat_offset = fs->header.fat_offset;
    6ba4:	f8d0 b008 	ldr.w	fp, [r0, #8]
    cluster_t count_left = count;
    cluster_t cluster_current = fs->cluster_free;
    6ba8:	8b84      	ldrh	r4, [r0, #28]

    if(is_fat32)
        cluster_count = fs->header.fat_size / sizeof(fat_entry32);
    else
#endif
        cluster_count = fs->header.fat_size / sizeof(fat_entry16);
    6baa:	68c3      	ldr	r3, [r0, #12]
    6bac:	f3c3 0a4f 	ubfx	sl, r3, #1, #16

    fs->cluster_free = 0;
    6bb0:	f04f 0300 	mov.w	r3, #0
    6bb4:	8383      	strh	r3, [r0, #28]
    cluster_t cluster_left;
    for(cluster_left = cluster_count; cluster_left > 0; --cluster_left, ++cluster_current)
    6bb6:	f1ba 0f00 	cmp.w	sl, #0
    6bba:	d03f      	beq.n	6c3c <fat_append_clusters+0xb4>
    6bbc:	4655      	mov	r5, sl
        return 0;

    device_read_t device_read = fs->partition->device_read;
    device_write_t device_write = fs->partition->device_write;
    offset_t fat_offset = fs->header.fat_offset;
    cluster_t count_left = count;
    6bbe:	4691      	mov	r9, r2
    cluster_t cluster_current = fs->cluster_free;
    cluster_t cluster_next = 0;
    6bc0:	f04f 0700 	mov.w	r7, #0
                return 0;
        }
        else
#endif
        {
            if(!device_read(fat_offset + cluster_current * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
    6bc4:	f04f 0802 	mov.w	r8, #2

    fs->cluster_free = 0;
    cluster_t cluster_left;
    for(cluster_left = cluster_count; cluster_left > 0; --cluster_left, ++cluster_current)
    {
        if(cluster_current < 2 || cluster_current >= cluster_count)
    6bc8:	4554      	cmp	r4, sl
    6bca:	bf34      	ite	cc
    6bcc:	2300      	movcc	r3, #0
    6bce:	2301      	movcs	r3, #1
    6bd0:	2c01      	cmp	r4, #1
    6bd2:	bf98      	it	ls
    6bd4:	f043 0301 	orrls.w	r3, r3, #1
            cluster_current = 2;
    6bd8:	2b00      	cmp	r3, #0
    6bda:	bf18      	it	ne
    6bdc:	2402      	movne	r4, #2
                return 0;
        }
        else
#endif
        {
            if(!device_read(fat_offset + cluster_current * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
    6bde:	eb0b 0644 	add.w	r6, fp, r4, lsl #1
    6be2:	4630      	mov	r0, r6
    6be4:	f10d 0116 	add.w	r1, sp, #22
    6be8:	4642      	mov	r2, r8
    6bea:	9b00      	ldr	r3, [sp, #0]
    6bec:	4798      	blx	r3
    6bee:	2800      	cmp	r0, #0
    6bf0:	d03f      	beq.n	6c72 <fat_append_clusters+0xea>
        }
        else
#endif
        {
            /* check if this is a free cluster */
            if(fat_entry16 != HTOL16(FAT16_CLUSTER_FREE))
    6bf2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6bf6:	b9c3      	cbnz	r3, 6c2a <fat_append_clusters+0xa2>

            /* If we don't need this free cluster for the
             * current allocation, we keep it in mind for
             * the next time.
             */
            if(count_left == 0)
    6bf8:	f1b9 0f00 	cmp.w	r9, #0
    6bfc:	d102      	bne.n	6c04 <fat_append_clusters+0x7c>
            {
                fs->cluster_free = cluster_current;
    6bfe:	9902      	ldr	r1, [sp, #8]
    6c00:	838c      	strh	r4, [r1, #28]
    6c02:	e021      	b.n	6c48 <fat_append_clusters+0xc0>
                break;
            }

            /* allocate cluster */
            if(cluster_next == 0)
                fat_entry16 = HTOL16(FAT16_CLUSTER_LAST_MAX);
    6c04:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6c08:	2f00      	cmp	r7, #0
    6c0a:	bf18      	it	ne
    6c0c:	463b      	movne	r3, r7
                fs->cluster_free = cluster_current;
                break;
            }

            /* allocate cluster */
            if(cluster_next == 0)
    6c0e:	f8ad 3016 	strh.w	r3, [sp, #22]
                fat_entry16 = HTOL16(FAT16_CLUSTER_LAST_MAX);
            else
                fat_entry16 = htol16((uint16_t) cluster_next);

            if(!device_write(fat_offset + cluster_current * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
    6c12:	4630      	mov	r0, r6
    6c14:	f10d 0116 	add.w	r1, sp, #22
    6c18:	4642      	mov	r2, r8
    6c1a:	9b01      	ldr	r3, [sp, #4]
    6c1c:	4798      	blx	r3
    6c1e:	b308      	cbz	r0, 6c64 <fat_append_clusters+0xdc>
                break;
        }

        cluster_next = cluster_current;
        --count_left;
    6c20:	f109 39ff 	add.w	r9, r9, #4294967295
    6c24:	fa1f f989 	uxth.w	r9, r9
    6c28:	4627      	mov	r7, r4
#endif
        cluster_count = fs->header.fat_size / sizeof(fat_entry16);

    fs->cluster_free = 0;
    cluster_t cluster_left;
    for(cluster_left = cluster_count; cluster_left > 0; --cluster_left, ++cluster_current)
    6c2a:	f105 35ff 	add.w	r5, r5, #4294967295
    6c2e:	b2ad      	uxth	r5, r5
    6c30:	f104 0401 	add.w	r4, r4, #1
    6c34:	b2a4      	uxth	r4, r4
    6c36:	2d00      	cmp	r5, #0
    6c38:	d1c6      	bne.n	6bc8 <fat_append_clusters+0x40>
    6c3a:	e002      	b.n	6c42 <fat_append_clusters+0xba>
        return 0;

    device_read_t device_read = fs->partition->device_read;
    device_write_t device_write = fs->partition->device_write;
    offset_t fat_offset = fs->header.fat_offset;
    cluster_t count_left = count;
    6c3c:	4691      	mov	r9, r2
    cluster_t cluster_current = fs->cluster_free;
    cluster_t cluster_next = 0;
    6c3e:	f04f 0700 	mov.w	r7, #0
        --count_left;
    }

    do
    {
        if(count_left > 0)
    6c42:	f1b9 0f00 	cmp.w	r9, #0
    6c46:	d10d      	bne.n	6c64 <fat_append_clusters+0xdc>
            break;

        /* We allocated a new cluster chain. Now join
         * it with the existing one (if any).
         */
        if(cluster_num >= 2)
    6c48:	9903      	ldr	r1, [sp, #12]
    6c4a:	2901      	cmp	r1, #1
    6c4c:	d913      	bls.n	6c76 <fat_append_clusters+0xee>
                    break;
            }
            else
#endif
            {
                fat_entry16 = htol16((uint16_t) cluster_next);
    6c4e:	a906      	add	r1, sp, #24
    6c50:	f821 7d02 	strh.w	r7, [r1, #-2]!

                if(!device_write(fat_offset + cluster_num * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
    6c54:	9b03      	ldr	r3, [sp, #12]
    6c56:	eb0b 0043 	add.w	r0, fp, r3, lsl #1
    6c5a:	f04f 0202 	mov.w	r2, #2
    6c5e:	9b01      	ldr	r3, [sp, #4]
    6c60:	4798      	blx	r3
    6c62:	b940      	cbnz	r0, 6c76 <fat_append_clusters+0xee>
    } while(0);

    /* No space left on device or writing error.
     * Free up all clusters already allocated.
     */
    fat_free_clusters(fs, cluster_next);
    6c64:	9802      	ldr	r0, [sp, #8]
    6c66:	4639      	mov	r1, r7
    6c68:	f7ff ff3a 	bl	6ae0 <fat_free_clusters>

    return 0;
    6c6c:	f04f 0700 	mov.w	r7, #0
    6c70:	e001      	b.n	6c76 <fat_append_clusters+0xee>
        }
        else
#endif
        {
            if(!device_read(fat_offset + cluster_current * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
                return 0;
    6c72:	f04f 0700 	mov.w	r7, #0
     * Free up all clusters already allocated.
     */
    fat_free_clusters(fs, cluster_next);

    return 0;
}
    6c76:	4638      	mov	r0, r7
    6c78:	b007      	add	sp, #28
    6c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6c7e:	bf00      	nop

00006c80 <fat_clear_cluster_callback>:
 * Callback function for clearing a cluster.
 */
uintptr_t fat_clear_cluster_callback(uint8_t* buffer, offset_t offset, void* p)
{
    return 16;
}
    6c80:	f04f 0010 	mov.w	r0, #16
    6c84:	4770      	bx	lr
    6c86:	bf00      	nop

00006c88 <fat_cluster_offset>:
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    6c88:	4603      	mov	r3, r0
    6c8a:	2901      	cmp	r1, #1
    6c8c:	bf8c      	ite	hi
    6c8e:	2200      	movhi	r2, #0
    6c90:	2201      	movls	r2, #1
    6c92:	2800      	cmp	r0, #0
    6c94:	bf08      	it	eq
    6c96:	f042 0201 	orreq.w	r2, r2, #1
    6c9a:	b932      	cbnz	r2, 6caa <fat_cluster_offset+0x22>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    6c9c:	f1a1 0102 	sub.w	r1, r1, #2
    6ca0:	8a40      	ldrh	r0, [r0, #18]
    6ca2:	695b      	ldr	r3, [r3, #20]
    6ca4:	fb00 3001 	mla	r0, r0, r1, r3
    6ca8:	4770      	bx	lr
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
        return 0;
    6caa:	f04f 0000 	mov.w	r0, #0

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
}
    6cae:	4770      	bx	lr

00006cb0 <fat_calc_83_checksum>:
 * \param[in] file_name_83 The 11-byte file name buffer.
 * \returns The checksum of the given file name.
 */
uint8_t fat_calc_83_checksum(const uint8_t* file_name_83)
{
    uint8_t checksum = file_name_83[0];
    6cb0:	7803      	ldrb	r3, [r0, #0]
    6cb2:	f04f 020a 	mov.w	r2, #10
    uint8_t i;
    for(i = 1; i < 11; ++i)
        checksum = ((checksum >> 1) | (checksum << 7)) + file_name_83[i];
    6cb6:	ea4f 0153 	mov.w	r1, r3, lsr #1
    6cba:	ea41 13c3 	orr.w	r3, r1, r3, lsl #7
    6cbe:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    6cc2:	185b      	adds	r3, r3, r1
    6cc4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    6cc8:	f102 32ff 	add.w	r2, r2, #4294967295
    6ccc:	b2d2      	uxtb	r2, r2
 */
uint8_t fat_calc_83_checksum(const uint8_t* file_name_83)
{
    uint8_t checksum = file_name_83[0];
    uint8_t i;
    for(i = 1; i < 11; ++i)
    6cce:	2a00      	cmp	r2, #0
    6cd0:	d1f1      	bne.n	6cb6 <fat_calc_83_checksum+0x6>
        checksum = ((checksum >> 1) | (checksum << 7)) + file_name_83[i];

    return checksum;
}
    6cd2:	4618      	mov	r0, r3
    6cd4:	4770      	bx	lr
    6cd6:	bf00      	nop

00006cd8 <fat_clear_cluster>:
 * \param[in] fs The filesystem on which to operate.
 * \param[in] cluster_num The cluster to clear.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_clear_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    6cd8:	b510      	push	{r4, lr}
    6cda:	b086      	sub	sp, #24
    6cdc:	4604      	mov	r4, r0
    if(cluster_num < 2)
    6cde:	2901      	cmp	r1, #1
        return 0;
    6ce0:	bf98      	it	ls
    6ce2:	2000      	movls	r0, #0
 * \param[in] cluster_num The cluster to clear.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_clear_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(cluster_num < 2)
    6ce4:	d911      	bls.n	6d0a <fat_clear_cluster+0x32>
        return 0;

    offset_t cluster_offset = fat_cluster_offset(fs, cluster_num);
    6ce6:	f7ff ffcf 	bl	6c88 <fat_cluster_offset>

    uint8_t zero[16];
    memset(zero, 0, sizeof(zero));
    6cea:	f04f 0300 	mov.w	r3, #0
    6cee:	9302      	str	r3, [sp, #8]
    6cf0:	9303      	str	r3, [sp, #12]
    6cf2:	9304      	str	r3, [sp, #16]
    6cf4:	9305      	str	r3, [sp, #20]
    return fs->partition->device_write_interval(cluster_offset,
    6cf6:	6821      	ldr	r1, [r4, #0]
    6cf8:	8a62      	ldrh	r2, [r4, #18]
    6cfa:	9300      	str	r3, [sp, #0]
    6cfc:	68cc      	ldr	r4, [r1, #12]
    6cfe:	a902      	add	r1, sp, #8
    6d00:	f646 4381 	movw	r3, #27777	; 0x6c81
    6d04:	f2c0 0300 	movt	r3, #0
    6d08:	47a0      	blx	r4
                                                zero,
                                                fs->header.cluster_size,
                                                fat_clear_cluster_callback,
                                                0
                                               );
}
    6d0a:	b006      	add	sp, #24
    6d0c:	bd10      	pop	{r4, pc}
    6d0e:	bf00      	nop

00006d10 <fat_dir_entry_read_callback>:
 * \param[in,out] p An argument structure controlling operation.
 * \returns 0 on failure or completion, 1 if reading has
 *          to be continued
 */
uint8_t fat_dir_entry_read_callback(uint8_t* buffer, offset_t offset, void* p)
{
    6d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6d14:	b084      	sub	sp, #16
    6d16:	4604      	mov	r4, r0
    6d18:	460f      	mov	r7, r1
    6d1a:	4616      	mov	r6, r2
  struct fat_read_dir_callback_arg* arg = p;
    struct fat_dir_entry_struct* dir_entry = arg->dir_entry;
    6d1c:	6815      	ldr	r5, [r2, #0]

    arg->bytes_read += 32;
    6d1e:	6853      	ldr	r3, [r2, #4]
    6d20:	f103 0320 	add.w	r3, r3, #32
    6d24:	6053      	str	r3, [r2, #4]

    /* skip deleted or empty entries */
    if(buffer[0] == FAT_DIRENTRY_DELETED || !buffer[0])
    6d26:	7803      	ldrb	r3, [r0, #0]
    6d28:	f1d3 0201 	rsbs	r2, r3, #1
    6d2c:	bf38      	it	cc
    6d2e:	2200      	movcc	r2, #0
    6d30:	2be5      	cmp	r3, #229	; 0xe5
    6d32:	bf14      	ite	ne
    6d34:	4613      	movne	r3, r2
    6d36:	f042 0301 	orreq.w	r3, r2, #1
    6d3a:	b12b      	cbz	r3, 6d48 <fat_dir_entry_read_callback+0x38>
    {
#if FAT_LFN_SUPPORT
        arg->checksum = 0;
    6d3c:	f04f 0300 	mov.w	r3, #0
    6d40:	7233      	strb	r3, [r6, #8]
#endif
        return 1;
    6d42:	f04f 0001 	mov.w	r0, #1
    6d46:	e0b3      	b.n	6eb0 <fat_dir_entry_read_callback+0x1a0>
        return 1;
#endif

    char* long_name = dir_entry->long_name;
#if FAT_LFN_SUPPORT
    if(buffer[11] == 0x0f)
    6d48:	7ac3      	ldrb	r3, [r0, #11]
    6d4a:	2b0f      	cmp	r3, #15
    6d4c:	d137      	bne.n	6dbe <fat_dir_entry_read_callback+0xae>
    {
        /* checksum validation */
        if(arg->checksum == 0 || arg->checksum != buffer[13])
    6d4e:	7a33      	ldrb	r3, [r6, #8]
    6d50:	b113      	cbz	r3, 6d58 <fat_dir_entry_read_callback+0x48>
    6d52:	7b42      	ldrb	r2, [r0, #13]
    6d54:	429a      	cmp	r2, r3
    6d56:	d009      	beq.n	6d6c <fat_dir_entry_read_callback+0x5c>
        {
            /* reset directory entry */
            memset(dir_entry, 0, sizeof(*dir_entry));
    6d58:	4628      	mov	r0, r5
    6d5a:	f04f 0100 	mov.w	r1, #0
    6d5e:	f04f 022c 	mov.w	r2, #44	; 0x2c
    6d62:	f019 fd3b 	bl	207dc <memset>

            arg->checksum = buffer[13];
    6d66:	7b63      	ldrb	r3, [r4, #13]
    6d68:	7233      	strb	r3, [r6, #8]
            dir_entry->entry_offset = offset;
    6d6a:	62af      	str	r7, [r5, #40]	; 0x28

        /* lfn supports unicode, but we do not, for now.
         * So we assume pure ascii and read only every
         * second byte.
         */
        uint16_t char_offset = ((buffer[0] & 0x3f) - 1) * 13;
    6d6c:	7823      	ldrb	r3, [r4, #0]
    6d6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6d72:	f103 33ff 	add.w	r3, r3, #4294967295
    6d76:	eb03 0743 	add.w	r7, r3, r3, lsl #1
    6d7a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    6d7e:	b2bf      	uxth	r7, r7
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
    6d80:	f247 26f8 	movw	r6, #29432	; 0x72f8
    6d84:	f2c0 0602 	movt	r6, #2
    6d88:	466b      	mov	r3, sp
    6d8a:	6830      	ldr	r0, [r6, #0]
    6d8c:	6871      	ldr	r1, [r6, #4]
    6d8e:	68b2      	ldr	r2, [r6, #8]
    6d90:	c307      	stmia	r3!, {r0, r1, r2}
    6d92:	7b32      	ldrb	r2, [r6, #12]
    6d94:	701a      	strb	r2, [r3, #0]
        uint8_t i;
        for(i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
    6d96:	2f1e      	cmp	r7, #30
            long_name[char_offset + i] = buffer[char_mapping[i]];

        return 1;
    6d98:	bf88      	it	hi
    6d9a:	2001      	movhi	r0, #1
         * second byte.
         */
        uint16_t char_offset = ((buffer[0] & 0x3f) - 1) * 13;
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
        uint8_t i;
        for(i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
    6d9c:	f240 808b 	bls.w	6eb6 <fat_dir_entry_read_callback+0x1a6>
    6da0:	e086      	b.n	6eb0 <fat_dir_entry_read_callback+0x1a0>
            long_name[char_offset + i] = buffer[char_mapping[i]];
    6da2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    6da6:	5ca2      	ldrb	r2, [r4, r2]
    6da8:	707a      	strb	r2, [r7, #1]
    6daa:	f107 0701 	add.w	r7, r7, #1
         * second byte.
         */
        uint16_t char_offset = ((buffer[0] & 0x3f) - 1) * 13;
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
        uint8_t i;
        for(i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
    6dae:	428b      	cmp	r3, r1
    6db0:	d07c      	beq.n	6eac <fat_dir_entry_read_callback+0x19c>
    6db2:	19ea      	adds	r2, r5, r7
    6db4:	2a1e      	cmp	r2, #30
    6db6:	d9f4      	bls.n	6da2 <fat_dir_entry_read_callback+0x92>
            long_name[char_offset + i] = buffer[char_mapping[i]];

        return 1;
    6db8:	f04f 0001 	mov.w	r0, #1
    6dbc:	e078      	b.n	6eb0 <fat_dir_entry_read_callback+0x1a0>
    else
#endif
    {
#if FAT_LFN_SUPPORT
        /* if we do not have a long name or the previous lfn does not match, take the 8.3 name */
        if(long_name[0] == '\0' || arg->checksum != fat_calc_83_checksum(buffer))
    6dbe:	782b      	ldrb	r3, [r5, #0]
    6dc0:	b123      	cbz	r3, 6dcc <fat_dir_entry_read_callback+0xbc>
    6dc2:	f7ff ff75 	bl	6cb0 <fat_calc_83_checksum>
    6dc6:	7a33      	ldrb	r3, [r6, #8]
    6dc8:	4283      	cmp	r3, r0
    6dca:	d062      	beq.n	6e92 <fat_dir_entry_read_callback+0x182>
#endif
        {
            /* reset directory entry */
            memset(dir_entry, 0, sizeof(*dir_entry));
    6dcc:	4628      	mov	r0, r5
    6dce:	f04f 0100 	mov.w	r1, #0
    6dd2:	f04f 022c 	mov.w	r2, #44	; 0x2c
    6dd6:	f019 fd01 	bl	207dc <memset>
            dir_entry->entry_offset = offset;
    6dda:	62af      	str	r7, [r5, #40]	; 0x28

            uint8_t i;
            for(i = 0; i < 8; ++i)
            {
                if(buffer[i] == ' ')
    6ddc:	7822      	ldrb	r2, [r4, #0]
    6dde:	2a20      	cmp	r2, #32
            /* reset directory entry */
            memset(dir_entry, 0, sizeof(*dir_entry));
            dir_entry->entry_offset = offset;

            uint8_t i;
            for(i = 0; i < 8; ++i)
    6de0:	bf08      	it	eq
    6de2:	2000      	moveq	r0, #0
            {
                if(buffer[i] == ' ')
    6de4:	d020      	beq.n	6e28 <fat_dir_entry_read_callback+0x118>
 * \param[in] offset The absolute offset of the raw data.
 * \param[in,out] p An argument structure controlling operation.
 * \returns 0 on failure or completion, 1 if reading has
 *          to be continued
 */
uint8_t fat_dir_entry_read_callback(uint8_t* buffer, offset_t offset, void* p)
    6de6:	f104 0101 	add.w	r1, r4, #1
            dir_entry->entry_offset = offset;

            uint8_t i;
            for(i = 0; i < 8; ++i)
            {
                if(buffer[i] == ' ')
    6dea:	46a4      	mov	ip, r4
 * \param[in] offset The absolute offset of the raw data.
 * \param[in,out] p An argument structure controlling operation.
 * \returns 0 on failure or completion, 1 if reading has
 *          to be continued
 */
uint8_t fat_dir_entry_read_callback(uint8_t* buffer, offset_t offset, void* p)
    6dec:	f04f 0301 	mov.w	r3, #1
            dir_entry->entry_offset = offset;

            uint8_t i;
            for(i = 0; i < 8; ++i)
            {
                if(buffer[i] == ' ')
    6df0:	f04f 0000 	mov.w	r0, #0
    6df4:	e008      	b.n	6e08 <fat_dir_entry_read_callback+0xf8>
    6df6:	468c      	mov	ip, r1
    6df8:	f811 2b01 	ldrb.w	r2, [r1], #1
    6dfc:	f103 0701 	add.w	r7, r3, #1
    6e00:	2a20      	cmp	r2, #32
    6e02:	d011      	beq.n	6e28 <fat_dir_entry_read_callback+0x118>
    6e04:	4618      	mov	r0, r3
    6e06:	463b      	mov	r3, r7
                    break;
                long_name[i] = buffer[i];
    6e08:	542a      	strb	r2, [r5, r0]
                /* Windows NT and later versions do not store lfn entries
                 * for 8.3 names which have a lowercase basename, extension
                 * or both when everything else is uppercase. They use two
                 * extra bits to signal a lowercase basename or extension.
                 */
                if((buffer[12] & 0x08) && buffer[i] >= 'A' && buffer[i] <= 'Z')
    6e0a:	7b27      	ldrb	r7, [r4, #12]
    6e0c:	f017 0f08 	tst.w	r7, #8
    6e10:	d007      	beq.n	6e22 <fat_dir_entry_read_callback+0x112>
    6e12:	f89c 7000 	ldrb.w	r7, [ip]
    6e16:	2f40      	cmp	r7, #64	; 0x40
    6e18:	d903      	bls.n	6e22 <fat_dir_entry_read_callback+0x112>
    6e1a:	2f5a      	cmp	r7, #90	; 0x5a
                    long_name[i] += 'a' - 'A';
    6e1c:	bf9c      	itt	ls
    6e1e:	3220      	addls	r2, #32
    6e20:	542a      	strbls	r2, [r5, r0]
            /* reset directory entry */
            memset(dir_entry, 0, sizeof(*dir_entry));
            dir_entry->entry_offset = offset;

            uint8_t i;
            for(i = 0; i < 8; ++i)
    6e22:	b2d8      	uxtb	r0, r3
    6e24:	2b08      	cmp	r3, #8
    6e26:	d1e6      	bne.n	6df6 <fat_dir_entry_read_callback+0xe6>
                 * extra bits to signal a lowercase basename or extension.
                 */
                if((buffer[12] & 0x08) && buffer[i] >= 'A' && buffer[i] <= 'Z')
                    long_name[i] += 'a' - 'A';
            }
            if(long_name[0] == 0x05)
    6e28:	782b      	ldrb	r3, [r5, #0]
    6e2a:	2b05      	cmp	r3, #5
                long_name[0] = (char) FAT_DIRENTRY_DELETED;
    6e2c:	bf04      	itt	eq
    6e2e:	23e5      	moveq	r3, #229	; 0xe5
    6e30:	702b      	strbeq	r3, [r5, #0]

            if(buffer[8] != ' ')
    6e32:	7a23      	ldrb	r3, [r4, #8]
    6e34:	2b20      	cmp	r3, #32
    6e36:	bf08      	it	eq
    6e38:	4603      	moveq	r3, r0
    6e3a:	d027      	beq.n	6e8c <fat_dir_entry_read_callback+0x17c>
            {
                long_name[i++] = '.';
    6e3c:	f04f 032e 	mov.w	r3, #46	; 0x2e
    6e40:	542b      	strb	r3, [r5, r0]
    6e42:	f100 0301 	add.w	r3, r0, #1
    6e46:	b2db      	uxtb	r3, r3

                uint8_t j = 8;
                for(; j < 11; ++j)
                {
                    if(buffer[j] == ' ')
    6e48:	7a22      	ldrb	r2, [r4, #8]
    6e4a:	2a20      	cmp	r2, #32
    6e4c:	d01e      	beq.n	6e8c <fat_dir_entry_read_callback+0x17c>
    6e4e:	f104 0c08 	add.w	ip, r4, #8
 * \param[in] offset The absolute offset of the raw data.
 * \param[in,out] p An argument structure controlling operation.
 * \returns 0 on failure or completion, 1 if reading has
 *          to be continued
 */
uint8_t fat_dir_entry_read_callback(uint8_t* buffer, offset_t offset, void* p)
    6e52:	f104 0109 	add.w	r1, r4, #9
    6e56:	f100 0004 	add.w	r0, r0, #4
    6e5a:	b2c0      	uxtb	r0, r0
    6e5c:	e004      	b.n	6e68 <fat_dir_entry_read_callback+0x158>
                long_name[i++] = '.';

                uint8_t j = 8;
                for(; j < 11; ++j)
                {
                    if(buffer[j] == ' ')
    6e5e:	468c      	mov	ip, r1
    6e60:	f811 2b01 	ldrb.w	r2, [r1], #1
    6e64:	2a20      	cmp	r2, #32
    6e66:	d011      	beq.n	6e8c <fat_dir_entry_read_callback+0x17c>
                        break;
                    long_name[i] = buffer[j];
    6e68:	54ea      	strb	r2, [r5, r3]

                    /* See above for the lowercase 8.3 name handling of
                     * Windows NT and later.
                     */
                    if((buffer[12] & 0x10) && buffer[j] >= 'A' && buffer[j] <= 'Z')
    6e6a:	7b27      	ldrb	r7, [r4, #12]
    6e6c:	f017 0f10 	tst.w	r7, #16
    6e70:	d007      	beq.n	6e82 <fat_dir_entry_read_callback+0x172>
    6e72:	f89c 7000 	ldrb.w	r7, [ip]
    6e76:	2f40      	cmp	r7, #64	; 0x40
    6e78:	d903      	bls.n	6e82 <fat_dir_entry_read_callback+0x172>
    6e7a:	2f5a      	cmp	r7, #90	; 0x5a
                        long_name[i] += 'a' - 'A';
    6e7c:	bf9c      	itt	ls
    6e7e:	3220      	addls	r2, #32
    6e80:	54ea      	strbls	r2, [r5, r3]

                    ++i;
    6e82:	f103 0301 	add.w	r3, r3, #1
    6e86:	b2db      	uxtb	r3, r3
            if(buffer[8] != ' ')
            {
                long_name[i++] = '.';

                uint8_t j = 8;
                for(; j < 11; ++j)
    6e88:	4283      	cmp	r3, r0
    6e8a:	d1e8      	bne.n	6e5e <fat_dir_entry_read_callback+0x14e>

                    ++i;
                }
            } 

            long_name[i] = '\0';
    6e8c:	f04f 0200 	mov.w	r2, #0
    6e90:	54ea      	strb	r2, [r5, r3]
        }
        
        /* extract properties of file and store them within the structure */
        dir_entry->attributes = buffer[11];
    6e92:	7ae3      	ldrb	r3, [r4, #11]
    6e94:	f885 3020 	strb.w	r3, [r5, #32]
        dir_entry->cluster = ltoh16(*((uint16_t*) &buffer[26]));
    6e98:	8b63      	ldrh	r3, [r4, #26]
    6e9a:	846b      	strh	r3, [r5, #34]	; 0x22
#if FAT_FAT32_SUPPORT
        dir_entry->cluster |= ((cluster_t) ltoh16(*((uint16_t*) &buffer[20]))) << 16;
#endif
        dir_entry->file_size = ltoh32(*((uint32_t*) &buffer[28]));
    6e9c:	69e3      	ldr	r3, [r4, #28]
    6e9e:	626b      	str	r3, [r5, #36]	; 0x24
#if FAT_DATETIME_SUPPORT
        dir_entry->modification_time = ltoh16(*((uint16_t*) &buffer[22]));
        dir_entry->modification_date = ltoh16(*((uint16_t*) &buffer[24]));
#endif

        arg->finished = 1;
    6ea0:	f04f 0301 	mov.w	r3, #1
    6ea4:	7273      	strb	r3, [r6, #9]
        return 0;
    6ea6:	f04f 0000 	mov.w	r0, #0
    6eaa:	e001      	b.n	6eb0 <fat_dir_entry_read_callback+0x1a0>
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
        uint8_t i;
        for(i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
            long_name[char_offset + i] = buffer[char_mapping[i]];

        return 1;
    6eac:	f04f 0001 	mov.w	r0, #1
#endif

        arg->finished = 1;
        return 0;
    }
}
    6eb0:	b004      	add	sp, #16
    6eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
         */
        uint16_t char_offset = ((buffer[0] & 0x3f) - 1) * 13;
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
        uint8_t i;
        for(i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
            long_name[char_offset + i] = buffer[char_mapping[i]];
    6eb6:	ab04      	add	r3, sp, #16
    6eb8:	f813 2d10 	ldrb.w	r2, [r3, #-16]!
    6ebc:	5ca2      	ldrb	r2, [r4, r2]
    6ebe:	55ea      	strb	r2, [r5, r7]
 * \param[in] offset The absolute offset of the raw data.
 * \param[in,out] p An argument structure controlling operation.
 * \returns 0 on failure or completion, 1 if reading has
 *          to be continued
 */
uint8_t fat_dir_entry_read_callback(uint8_t* buffer, offset_t offset, void* p)
    6ec0:	19ef      	adds	r7, r5, r7
    6ec2:	a903      	add	r1, sp, #12
    6ec4:	f1c5 0501 	rsb	r5, r5, #1
    6ec8:	e773      	b.n	6db2 <fat_dir_entry_read_callback+0xa2>
    6eca:	bf00      	nop

00006ecc <fat_find_offset_for_dir_entry>:
 * \param[in] parent The directory in which to search.
 * \param[in] dir_entry The directory entry for which to search space.
 * \returns 0 on failure, a device offset on success.
 */
offset_t fat_find_offset_for_dir_entry(struct fat_fs_struct* fs, const struct fat_dir_struct* parent, const struct fat_dir_entry_struct* dir_entry)
{
    6ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6ed0:	b085      	sub	sp, #20
    6ed2:	460c      	mov	r4, r1
    if(!fs || !dir_entry)
    6ed4:	4605      	mov	r5, r0
    6ed6:	4613      	mov	r3, r2
    6ed8:	f1d2 0201 	rsbs	r2, r2, #1
    6edc:	bf38      	it	cc
    6ede:	2200      	movcc	r2, #0
    6ee0:	2800      	cmp	r0, #0
    6ee2:	bf08      	it	eq
    6ee4:	f042 0201 	orreq.w	r2, r2, #1
        return 0;
    6ee8:	f04f 0900 	mov.w	r9, #0
 * \param[in] dir_entry The directory entry for which to search space.
 * \returns 0 on failure, a device offset on success.
 */
offset_t fat_find_offset_for_dir_entry(struct fat_fs_struct* fs, const struct fat_dir_struct* parent, const struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry)
    6eec:	2a00      	cmp	r2, #0
    6eee:	d173      	bne.n	6fd8 <fat_find_offset_for_dir_entry+0x10c>
        return 0;

    /* search for a place where to write the directory entry to disk */
#if FAT_LFN_SUPPORT
    uint8_t free_dir_entries_needed = (strlen(dir_entry->long_name) + 12) / 13 + 1;
    6ef0:	4618      	mov	r0, r3
    6ef2:	f01a fa53 	bl	2139c <strlen>
    6ef6:	f100 000c 	add.w	r0, r0, #12
    6efa:	f64e 434f 	movw	r3, #60495	; 0xec4f
    6efe:	f6c4 63c4 	movt	r3, #20164	; 0x4ec4
    6f02:	fba3 2300 	umull	r2, r3, r3, r0
    6f06:	ea4f 0393 	mov.w	r3, r3, lsr #2
    6f0a:	f103 0301 	add.w	r3, r3, #1
    6f0e:	b2db      	uxtb	r3, r3
    6f10:	9301      	str	r3, [sp, #4]
    uint8_t free_dir_entries_found = 0;
#endif
    cluster_t cluster_num = parent->dir_entry.cluster;
    6f12:	f8b4 8026 	ldrh.w	r8, [r4, #38]	; 0x26
    offset_t dir_entry_offset = 0;
    offset_t offset = 0;
    offset_t offset_to = 0;
    6f16:	f04f 0700 	mov.w	r7, #0
#if FAT_LFN_SUPPORT
    uint8_t free_dir_entries_needed = (strlen(dir_entry->long_name) + 12) / 13 + 1;
    uint8_t free_dir_entries_found = 0;
#endif
    cluster_t cluster_num = parent->dir_entry.cluster;
    offset_t dir_entry_offset = 0;
    6f1a:	46b9      	mov	r9, r7
    offset_t offset_to = 0;
#if FAT_FAT32_SUPPORT
    uint8_t is_fat32 = (fs->partition->type == PARTITION_TYPE_FAT32);
#endif

    if(cluster_num == 0)
    6f1c:	f1b8 0f00 	cmp.w	r8, #0
    6f20:	d102      	bne.n	6f28 <fat_find_offset_for_dir_entry+0x5c>
        else
#endif
        {
            /* we read/write from the root directory entry */
            offset = fs->header.root_dir_offset;
            offset_to = fs->header.cluster_zero_offset;
    6f22:	696f      	ldr	r7, [r5, #20]
            dir_entry_offset = offset;
    6f24:	f8d5 9018 	ldr.w	r9, [r5, #24]
        else
        {
            offset += 32;
            dir_entry_offset = offset;
#if FAT_LFN_SUPPORT
            free_dir_entries_found = 0;
    6f28:	464c      	mov	r4, r9
    6f2a:	f04f 0600 	mov.w	r6, #0

            offset = fat_cluster_offset(fs, cluster_num);
            offset_to = offset + fs->header.cluster_size;
            dir_entry_offset = offset;
#if FAT_LFN_SUPPORT
            free_dir_entries_found = 0;
    6f2e:	46b3      	mov	fp, r6
#endif
        }
        
        /* read next lfn or 8.3 entry */
        uint8_t first_char;
        if(!fs->partition->device_read(offset, &first_char, sizeof(first_char)))
    6f30:	f04f 0a01 	mov.w	sl, #1
        }
    }
    
    while(1)
    {
        if(offset == offset_to)
    6f34:	42bc      	cmp	r4, r7
    6f36:	d128      	bne.n	6f8a <fat_find_offset_for_dir_entry+0xbe>
        {
            if(cluster_num == 0)
    6f38:	f1b8 0f00 	cmp.w	r8, #0
    6f3c:	d047      	beq.n	6fce <fat_find_offset_for_dir_entry+0x102>
                /* We iterated through the whole root directory and
                 * could not find enough space for the directory entry.
                 */
                return 0;

            if(offset)
    6f3e:	b1dc      	cbz	r4, 6f78 <fat_find_offset_for_dir_entry+0xac>
            {
                /* We reached a cluster boundary and have to
                 * switch to the next cluster.
                 */

                cluster_t cluster_next = fat_get_next_cluster(fs, cluster_num);
    6f40:	4628      	mov	r0, r5
    6f42:	4641      	mov	r1, r8
    6f44:	f7ff fd8e 	bl	6a64 <fat_get_next_cluster>
                if(!cluster_next)
    6f48:	b9a8      	cbnz	r0, 6f76 <fat_find_offset_for_dir_entry+0xaa>
                {
                    cluster_next = fat_append_clusters(fs, cluster_num, 1);
    6f4a:	4628      	mov	r0, r5
    6f4c:	4641      	mov	r1, r8
    6f4e:	f04f 0201 	mov.w	r2, #1
    6f52:	f7ff fe19 	bl	6b88 <fat_append_clusters>
                    if(!cluster_next)
    6f56:	4601      	mov	r1, r0
                        return 0;
    6f58:	f04f 0900 	mov.w	r9, #0

                cluster_t cluster_next = fat_get_next_cluster(fs, cluster_num);
                if(!cluster_next)
                {
                    cluster_next = fat_append_clusters(fs, cluster_num, 1);
                    if(!cluster_next)
    6f5c:	2800      	cmp	r0, #0
    6f5e:	d03b      	beq.n	6fd8 <fat_find_offset_for_dir_entry+0x10c>
                        return 0;

                    /* we appended a new cluster and know it is free */
                    dir_entry_offset = fs->header.cluster_zero_offset +
                                       (offset_t) (cluster_next - 2) * fs->header.cluster_size;
    6f60:	f1a0 0202 	sub.w	r2, r0, #2
    6f64:	f8b5 9012 	ldrh.w	r9, [r5, #18]
                    cluster_next = fat_append_clusters(fs, cluster_num, 1);
                    if(!cluster_next)
                        return 0;

                    /* we appended a new cluster and know it is free */
                    dir_entry_offset = fs->header.cluster_zero_offset +
    6f68:	696b      	ldr	r3, [r5, #20]
    6f6a:	fb09 3902 	mla	r9, r9, r2, r3
                                       (offset_t) (cluster_next - 2) * fs->header.cluster_size;

                    /* clear cluster to avoid garbage directory entries */
                    fat_clear_cluster(fs, cluster_next);
    6f6e:	4628      	mov	r0, r5
    6f70:	f7ff feb2 	bl	6cd8 <fat_clear_cluster>

                    break;
    6f74:	e030      	b.n	6fd8 <fat_find_offset_for_dir_entry+0x10c>
                }
                cluster_num = cluster_next;
    6f76:	4680      	mov	r8, r0
            }

            offset = fat_cluster_offset(fs, cluster_num);
    6f78:	4628      	mov	r0, r5
    6f7a:	4641      	mov	r1, r8
    6f7c:	f7ff fe84 	bl	6c88 <fat_cluster_offset>
    6f80:	4604      	mov	r4, r0
            offset_to = offset + fs->header.cluster_size;
    6f82:	8a6f      	ldrh	r7, [r5, #18]
    6f84:	19c7      	adds	r7, r0, r7
            dir_entry_offset = offset;
    6f86:	4681      	mov	r9, r0
#if FAT_LFN_SUPPORT
            free_dir_entries_found = 0;
    6f88:	465e      	mov	r6, fp
#endif
        }
        
        /* read next lfn or 8.3 entry */
        uint8_t first_char;
        if(!fs->partition->device_read(offset, &first_char, sizeof(first_char)))
    6f8a:	682b      	ldr	r3, [r5, #0]
    6f8c:	681b      	ldr	r3, [r3, #0]
    6f8e:	4620      	mov	r0, r4
    6f90:	f10d 010f 	add.w	r1, sp, #15
    6f94:	4652      	mov	r2, sl
    6f96:	4798      	blx	r3
    6f98:	b1e0      	cbz	r0, 6fd4 <fat_find_offset_for_dir_entry+0x108>
            return 0;

        /* check if we found a free directory entry */
        if(first_char == FAT_DIRENTRY_DELETED || !first_char)
    6f9a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6f9e:	f1d3 0201 	rsbs	r2, r3, #1
    6fa2:	bf38      	it	cc
    6fa4:	2200      	movcc	r2, #0
    6fa6:	2be5      	cmp	r3, #229	; 0xe5
    6fa8:	bf14      	ite	ne
    6faa:	4613      	movne	r3, r2
    6fac:	f042 0301 	orreq.w	r3, r2, #1
    6fb0:	b143      	cbz	r3, 6fc4 <fat_find_offset_for_dir_entry+0xf8>
        {
            /* check if we have the needed number of available entries */
#if FAT_LFN_SUPPORT
            ++free_dir_entries_found;
    6fb2:	f106 0601 	add.w	r6, r6, #1
    6fb6:	b2f6      	uxtb	r6, r6
            if(free_dir_entries_found >= free_dir_entries_needed)
    6fb8:	9b01      	ldr	r3, [sp, #4]
    6fba:	42b3      	cmp	r3, r6
    6fbc:	d90c      	bls.n	6fd8 <fat_find_offset_for_dir_entry+0x10c>
#endif
                break;

            offset += 32;
    6fbe:	f104 0420 	add.w	r4, r4, #32
    6fc2:	e7b7      	b.n	6f34 <fat_find_offset_for_dir_entry+0x68>
        }
        else
        {
            offset += 32;
    6fc4:	f104 0420 	add.w	r4, r4, #32
            dir_entry_offset = offset;
    6fc8:	46a1      	mov	r9, r4
#if FAT_LFN_SUPPORT
            free_dir_entries_found = 0;
    6fca:	465e      	mov	r6, fp
    6fcc:	e7b2      	b.n	6f34 <fat_find_offset_for_dir_entry+0x68>
        {
            if(cluster_num == 0)
                /* We iterated through the whole root directory and
                 * could not find enough space for the directory entry.
                 */
                return 0;
    6fce:	f04f 0900 	mov.w	r9, #0
    6fd2:	e001      	b.n	6fd8 <fat_find_offset_for_dir_entry+0x10c>
        }
        
        /* read next lfn or 8.3 entry */
        uint8_t first_char;
        if(!fs->partition->device_read(offset, &first_char, sizeof(first_char)))
            return 0;
    6fd4:	f04f 0900 	mov.w	r9, #0
#endif
        }
    }

    return dir_entry_offset;
}
    6fd8:	4648      	mov	r0, r9
    6fda:	b005      	add	sp, #20
    6fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00006fe0 <fat_write_dir_entry>:
 * \param[in] fs The filesystem on which to operate.
 * \param[in] dir_entry The directory entry to write.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_write_dir_entry(const struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
    6fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6fe4:	b089      	sub	sp, #36	; 0x24
    if(!fs || !dir_entry)
    6fe6:	460e      	mov	r6, r1
    6fe8:	f1d1 0101 	rsbs	r1, r1, #1
    6fec:	bf38      	it	cc
    6fee:	2100      	movcc	r1, #0
    6ff0:	2800      	cmp	r0, #0
    6ff2:	bf08      	it	eq
    6ff4:	f041 0101 	orreq.w	r1, r1, #1
    6ff8:	2900      	cmp	r1, #0
    6ffa:	f040 80e4 	bne.w	71c6 <fat_write_dir_entry+0x1e6>
        fat_set_file_modification_date(dir_entry, year, month, day);
        fat_set_file_modification_time(dir_entry, hour, min, sec);
    }
#endif

    device_write_t device_write = fs->partition->device_write;
    6ffe:	6803      	ldr	r3, [r0, #0]
    7000:	f8d3 a008 	ldr.w	sl, [r3, #8]
    offset_t offset = dir_entry->entry_offset;
    7004:	6ab7      	ldr	r7, [r6, #40]	; 0x28
    const char* name = dir_entry->long_name;
    7006:	4635      	mov	r5, r6
    uint8_t name_len = strlen(name);
    7008:	4630      	mov	r0, r6
    700a:	f01a f9c7 	bl	2139c <strlen>
    700e:	b2c4      	uxtb	r4, r0
#if FAT_LFN_SUPPORT
    uint8_t lfn_entry_count = (name_len + 12) / 13;
    7010:	f104 090c 	add.w	r9, r4, #12
    7014:	f64e 434f 	movw	r3, #60495	; 0xec4f
    7018:	f6c4 63c4 	movt	r3, #20164	; 0x4ec4
    701c:	fb83 0309 	smull	r0, r3, r3, r9
    7020:	ea4f 0993 	mov.w	r9, r3, lsr #2
    uint8_t buffer[32];

    /* write 8.3 entry */

    /* generate 8.3 file name */
    memset(&buffer[0], ' ', 11);
    7024:	4668      	mov	r0, sp
    7026:	f04f 0120 	mov.w	r1, #32
    702a:	f04f 020b 	mov.w	r2, #11
    702e:	f019 fbd5 	bl	207dc <memset>
    char* name_ext = strrchr(name, '.');
    7032:	4630      	mov	r0, r6
    7034:	f04f 012e 	mov.w	r1, #46	; 0x2e
    7038:	f01a fa6e 	bl	21518 <strrchr>
    if(name_ext && *++name_ext)
    703c:	b190      	cbz	r0, 7064 <fat_write_dir_entry+0x84>
    703e:	7843      	ldrb	r3, [r0, #1]
    7040:	b183      	cbz	r3, 7064 <fat_write_dir_entry+0x84>
    7042:	f100 0801 	add.w	r8, r0, #1
    {
        uint8_t name_ext_len = strlen(name_ext);
    7046:	4640      	mov	r0, r8
    7048:	f01a f9a8 	bl	2139c <strlen>
    704c:	b2c2      	uxtb	r2, r0
        name_len -= name_ext_len + 1;
    704e:	ea6f 0302 	mvn.w	r3, r2
    7052:	18e4      	adds	r4, r4, r3
    7054:	b2e4      	uxtb	r4, r4
            name_ext_len = 3;
#else
            return 0;
#endif
        
        memcpy(&buffer[8], name_ext, name_ext_len);
    7056:	a802      	add	r0, sp, #8
    7058:	4641      	mov	r1, r8
    705a:	2a03      	cmp	r2, #3
    705c:	bf28      	it	cs
    705e:	2203      	movcs	r2, #3
    7060:	f019 fae6 	bl	20630 <memcpy>
    }
    
    if(name_len <= 8)
    7064:	2c08      	cmp	r4, #8
    7066:	d810      	bhi.n	708a <fat_write_dir_entry+0xaa>
    {
        memcpy(buffer, name, name_len);
    7068:	4668      	mov	r0, sp
    706a:	4631      	mov	r1, r6
    706c:	4622      	mov	r2, r4
    706e:	f019 fadf 	bl	20630 <memcpy>
         *
         * Theoretically it would be possible to leave
         * the 8.3 entry alone if the basename and the
         * extension have no mixed capitalization.
         */
        if(name[0] == '.' &&
    7072:	7833      	ldrb	r3, [r6, #0]
    7074:	2b2e      	cmp	r3, #46	; 0x2e
    7076:	d11e      	bne.n	70b6 <fat_write_dir_entry+0xd6>
           ((name[1] == '.' && name[2] == '\0') ||
    7078:	7873      	ldrb	r3, [r6, #1]
         *
         * Theoretically it would be possible to leave
         * the 8.3 entry alone if the basename and the
         * extension have no mixed capitalization.
         */
        if(name[0] == '.' &&
    707a:	2b2e      	cmp	r3, #46	; 0x2e
           ((name[1] == '.' && name[2] == '\0') ||
    707c:	bf08      	it	eq
    707e:	78b3      	ldrbeq	r3, [r6, #2]
            name[1] == '\0')
          )
            lfn_entry_count = 0;
    7080:	2b00      	cmp	r3, #0
    7082:	bf08      	it	eq
    7084:	f04f 0900 	moveq.w	r9, #0
    7088:	e015      	b.n	70b6 <fat_write_dir_entry+0xd6>
#endif
    }
    else
    {
#if FAT_LFN_SUPPORT
        memcpy(buffer, name, 8);
    708a:	466b      	mov	r3, sp
    708c:	6828      	ldr	r0, [r5, #0]
    708e:	6869      	ldr	r1, [r5, #4]
    7090:	c303      	stmia	r3!, {r0, r1}

        /* Minimize 8.3 name clashes by appending
         * the lower byte of the cluster number.
         */
        uint8_t num = dir_entry->cluster & 0xff;
    7092:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22

        buffer[6] = (num < 0xa0) ? ('0' + (num >> 4)) : ('a' + (num >> 4));
    7096:	2b9f      	cmp	r3, #159	; 0x9f
    7098:	ea4f 1213 	mov.w	r2, r3, lsr #4
    709c:	bf94      	ite	ls
    709e:	3230      	addls	r2, #48	; 0x30
    70a0:	3261      	addhi	r2, #97	; 0x61
    70a2:	f88d 2006 	strb.w	r2, [sp, #6]
        num &= 0x0f;
    70a6:	f003 030f 	and.w	r3, r3, #15
        buffer[7] = (num < 0x0a) ? ('0' + num) : ('a' + num);
    70aa:	2b09      	cmp	r3, #9
    70ac:	bf94      	ite	ls
    70ae:	3330      	addls	r3, #48	; 0x30
    70b0:	3361      	addhi	r3, #97	; 0x61
    70b2:	f88d 3007 	strb.w	r3, [sp, #7]
#else
        return 0;
#endif
    }
    if(buffer[0] == FAT_DIRENTRY_DELETED)
    70b6:	f89d 3000 	ldrb.w	r3, [sp]
    70ba:	2be5      	cmp	r3, #229	; 0xe5
        buffer[0] = 0x05;
    70bc:	bf04      	itt	eq
    70be:	2305      	moveq	r3, #5
    70c0:	f88d 3000 	strbeq.w	r3, [sp]

    /* fill directory entry buffer */
    memset(&buffer[11], 0, sizeof(buffer) - 11);
    70c4:	f10d 000b 	add.w	r0, sp, #11
    70c8:	f04f 0100 	mov.w	r1, #0
    70cc:	f04f 0215 	mov.w	r2, #21
    70d0:	f019 fb84 	bl	207dc <memset>
    buffer[0x0b] = dir_entry->attributes;
    70d4:	f896 3020 	ldrb.w	r3, [r6, #32]
    70d8:	f88d 300b 	strb.w	r3, [sp, #11]
    *((uint16_t*) &buffer[0x18]) = htol16(dir_entry->modification_date);
#endif
#if FAT_FAT32_SUPPORT
    *((uint16_t*) &buffer[0x14]) = htol16((uint16_t) (dir_entry->cluster >> 16));
#endif
    *((uint16_t*) &buffer[0x1a]) = htol16(dir_entry->cluster);
    70dc:	8c72      	ldrh	r2, [r6, #34]	; 0x22
    70de:	f8ad 201a 	strh.w	r2, [sp, #26]
    *((uint32_t*) &buffer[0x1c]) = htol32(dir_entry->file_size);
    70e2:	6a73      	ldr	r3, [r6, #36]	; 0x24
    70e4:	9307      	str	r3, [sp, #28]

    /* write to disk */
#if FAT_LFN_SUPPORT
    if(!device_write(offset + (uint16_t) lfn_entry_count * 32, buffer, sizeof(buffer)))
    70e6:	ea4f 1049 	mov.w	r0, r9, lsl #5
    70ea:	19c0      	adds	r0, r0, r7
    70ec:	4669      	mov	r1, sp
    70ee:	f04f 0220 	mov.w	r2, #32
    70f2:	47d0      	blx	sl
    70f4:	2800      	cmp	r0, #0
    70f6:	d069      	beq.n	71cc <fat_write_dir_entry+0x1ec>
#endif
        return 0;
    
#if FAT_LFN_SUPPORT
    /* calculate checksum of 8.3 name */
    uint8_t checksum = fat_calc_83_checksum(buffer);
    70f8:	4668      	mov	r0, sp
    70fa:	f7ff fdd9 	bl	6cb0 <fat_calc_83_checksum>
    70fe:	4683      	mov	fp, r0
    
        offset += sizeof(buffer);
    }
#endif
    
    return 1;
    7100:	f04f 0001 	mov.w	r0, #1
    /* calculate checksum of 8.3 name */
    uint8_t checksum = fat_calc_83_checksum(buffer);
    
    /* write lfn entries */
    uint8_t lfn_entry;
    for(lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
    7104:	f1b9 0f00 	cmp.w	r9, #0
    7108:	d062      	beq.n	71d0 <fat_write_dir_entry+0x1f0>
    710a:	464d      	mov	r5, r9
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
        uint8_t i = 1;
        while(i < 0x1f)
        {
            buffer[i++] = *long_name_curr;
            buffer[i++] = 0;
    710c:	f04f 0400 	mov.w	r4, #0

            switch(i)
            {
                case 0x0b:
                    i = 0x0e;
    7110:	f04f 080e 	mov.w	r8, #14
    
    /* write lfn entries */
    uint8_t lfn_entry;
    for(lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
    {
        memset(buffer, 0xff, sizeof(buffer));
    7114:	4668      	mov	r0, sp
    7116:	f04f 01ff 	mov.w	r1, #255	; 0xff
    711a:	f04f 0220 	mov.w	r2, #32
    711e:	f019 fb5d 	bl	207dc <memset>
        
        /* set file name */
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
    7122:	f105 33ff 	add.w	r3, r5, #4294967295
    7126:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    712a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
        uint8_t i = 1;
        while(i < 0x1f)
        {
            buffer[i++] = *long_name_curr;
    712e:	5cf2      	ldrb	r2, [r6, r3]
    7130:	f88d 2001 	strb.w	r2, [sp, #1]
            buffer[i++] = 0;
    7134:	f88d 4002 	strb.w	r4, [sp, #2]
    for(lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
    {
        memset(buffer, 0xff, sizeof(buffer));
        
        /* set file name */
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
    7138:	18f3      	adds	r3, r6, r3
 *
 * \param[in] fs The filesystem on which to operate.
 * \param[in] dir_entry The directory entry to write.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_write_dir_entry(const struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
    713a:	f103 32ff 	add.w	r2, r3, #4294967295
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
        uint8_t i = 1;
        while(i < 0x1f)
        {
            buffer[i++] = *long_name_curr;
            buffer[i++] = 0;
    713e:	f04f 0303 	mov.w	r3, #3
    7142:	e016      	b.n	7172 <fat_write_dir_entry+0x192>
        /* set file name */
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
        uint8_t i = 1;
        while(i < 0x1f)
        {
            buffer[i++] = *long_name_curr;
    7144:	7840      	ldrb	r0, [r0, #1]
    7146:	f10d 0e20 	add.w	lr, sp, #32
    714a:	eb0e 0103 	add.w	r1, lr, r3
    714e:	f801 0c20 	strb.w	r0, [r1, #-32]
    7152:	f103 0101 	add.w	r1, r3, #1
            buffer[i++] = 0;
    7156:	b2c9      	uxtb	r1, r1
    7158:	4471      	add	r1, lr
    715a:	f801 4c20 	strb.w	r4, [r1, #-32]
    715e:	f103 0302 	add.w	r3, r3, #2
    7162:	b2db      	uxtb	r3, r3

            switch(i)
    7164:	2b0b      	cmp	r3, #11
            {
                case 0x0b:
                    i = 0x0e;
    7166:	bf08      	it	eq
    7168:	4643      	moveq	r3, r8
        while(i < 0x1f)
        {
            buffer[i++] = *long_name_curr;
            buffer[i++] = 0;

            switch(i)
    716a:	d002      	beq.n	7172 <fat_write_dir_entry+0x192>
            {
                case 0x0b:
                    i = 0x0e;
                    break;
                case 0x1a:
                    i = 0x1c;
    716c:	2b1a      	cmp	r3, #26
    716e:	bf08      	it	eq
    7170:	231c      	moveq	r3, #28
                    break;
    7172:	f102 0201 	add.w	r2, r2, #1
 *
 * \param[in] fs The filesystem on which to operate.
 * \param[in] dir_entry The directory entry to write.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_write_dir_entry(const struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
    7176:	4610      	mov	r0, r2
                case 0x1a:
                    i = 0x1c;
                    break;
            }

            if(!*long_name_curr++)
    7178:	7811      	ldrb	r1, [r2, #0]
    717a:	b109      	cbz	r1, 7180 <fat_write_dir_entry+0x1a0>
        memset(buffer, 0xff, sizeof(buffer));
        
        /* set file name */
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
        uint8_t i = 1;
        while(i < 0x1f)
    717c:	2b1e      	cmp	r3, #30
    717e:	d9e1      	bls.n	7144 <fat_write_dir_entry+0x164>
            if(!*long_name_curr++)
                break;
        }
        
        /* set index of lfn entry */
        buffer[0x00] = lfn_entry;
    7180:	f88d 5000 	strb.w	r5, [sp]
        if(lfn_entry == lfn_entry_count)
    7184:	454d      	cmp	r5, r9
            buffer[0x00] |= FAT_DIRENTRY_LFNLAST;
    7186:	bf04      	itt	eq
    7188:	f049 0340 	orreq.w	r3, r9, #64	; 0x40
    718c:	f88d 3000 	strbeq.w	r3, [sp]

        /* mark as lfn entry */
        buffer[0x0b] = 0x0f;
    7190:	f04f 030f 	mov.w	r3, #15
    7194:	f88d 300b 	strb.w	r3, [sp, #11]

        /* set 8.3 checksum */
        buffer[0x0d] = checksum;
    7198:	f88d b00d 	strb.w	fp, [sp, #13]

        /* clear reserved bytes */
        buffer[0x0c] = 0;
    719c:	f88d 400c 	strb.w	r4, [sp, #12]
        buffer[0x1a] = 0;
    71a0:	f88d 401a 	strb.w	r4, [sp, #26]
        buffer[0x1b] = 0;
    71a4:	f88d 401b 	strb.w	r4, [sp, #27]

        /* write entry */
        device_write(offset, buffer, sizeof(buffer));
    71a8:	4638      	mov	r0, r7
    71aa:	4669      	mov	r1, sp
    71ac:	f04f 0220 	mov.w	r2, #32
    71b0:	47d0      	blx	sl
    
        offset += sizeof(buffer);
    71b2:	f107 0720 	add.w	r7, r7, #32
    /* calculate checksum of 8.3 name */
    uint8_t checksum = fat_calc_83_checksum(buffer);
    
    /* write lfn entries */
    uint8_t lfn_entry;
    for(lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
    71b6:	f105 35ff 	add.w	r5, r5, #4294967295
    71ba:	b2ed      	uxtb	r5, r5
    71bc:	2d00      	cmp	r5, #0
    71be:	d1a9      	bne.n	7114 <fat_write_dir_entry+0x134>
    
        offset += sizeof(buffer);
    }
#endif
    
    return 1;
    71c0:	f04f 0001 	mov.w	r0, #1
    71c4:	e004      	b.n	71d0 <fat_write_dir_entry+0x1f0>
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_write_dir_entry(const struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry)
        return 0;
    71c6:	f04f 0000 	mov.w	r0, #0
    71ca:	e001      	b.n	71d0 <fat_write_dir_entry+0x1f0>
#if FAT_LFN_SUPPORT
    if(!device_write(offset + (uint16_t) lfn_entry_count * 32, buffer, sizeof(buffer)))
#else
    if(!device_write(offset, buffer, sizeof(buffer)))
#endif
        return 0;
    71cc:	f04f 0000 	mov.w	r0, #0
        offset += sizeof(buffer);
    }
#endif
    
    return 1;
}
    71d0:	b009      	add	sp, #36	; 0x24
    71d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    71d6:	bf00      	nop

000071d8 <fat_open>:
 * \param[in] partition Discriptor of partition on which the filesystem resides.
 * \returns 0 on error, a FAT filesystem descriptor on success.
 * \see fat_close
 */
struct fat_fs_struct* fat_open(struct partition_struct* partition)
{
    71d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    71dc:	b088      	sub	sp, #32
    if(!partition ||
    71de:	4604      	mov	r4, r0
    71e0:	2800      	cmp	r0, #0
    71e2:	f000 809f 	beq.w	7324 <fat_open+0x14c>
    71e6:	6883      	ldr	r3, [r0, #8]
    71e8:	2b00      	cmp	r3, #0
    71ea:	f000 809e 	beq.w	732a <fat_open+0x152>
#if FAT_WRITE_SUPPORT
       !partition->device_write ||
    71ee:	68c3      	ldr	r3, [r0, #12]
    71f0:	2b00      	cmp	r3, #0
    71f2:	f000 809d 	beq.w	7330 <fat_open+0x158>
#else
    struct fat_fs_struct* fs = fat_fs_handles;
    uint8_t i;
    for(i = 0; i < FAT_FS_COUNT; ++i)
    {
        if(!fs->partition)
    71f6:	f240 53dc 	movw	r3, #1500	; 0x5dc
    71fa:	f2c1 0300 	movt	r3, #4096	; 0x1000
    71fe:	681b      	ldr	r3, [r3, #0]
    7200:	2b00      	cmp	r3, #0
    7202:	f040 8098 	bne.w	7336 <fat_open+0x15e>
#if USE_DYNAMIC_MEMORY
    struct fat_fs_struct* fs = malloc(sizeof(*fs));
    if(!fs)
        return 0;
#else
    struct fat_fs_struct* fs = fat_fs_handles;
    7206:	f240 51dc 	movw	r1, #1500	; 0x5dc
    720a:	f2c1 0100 	movt	r1, #4096	; 0x1000
    }
    if(i >= FAT_FS_COUNT)
        return 0;
#endif

    memset(fs, 0, sizeof(*fs));
    720e:	f04f 0200 	mov.w	r2, #0
    7212:	604a      	str	r2, [r1, #4]
    7214:	f101 0308 	add.w	r3, r1, #8
    7218:	f843 2b04 	str.w	r2, [r3], #4
    721c:	f843 2b04 	str.w	r2, [r3], #4
    7220:	f843 2b04 	str.w	r2, [r3], #4
    7224:	f843 2b04 	str.w	r2, [r3], #4
    7228:	f843 2b04 	str.w	r2, [r3], #4
    722c:	601a      	str	r2, [r3, #0]

    fs->partition = partition;
    722e:	6008      	str	r0, [r1, #0]
#if FAT_FAT32_SUPPORT
    uint8_t buffer[37];
#else
    uint8_t buffer[25];
#endif
    offset_t partition_offset = (offset_t) partition->offset * 512;
    7230:	6945      	ldr	r5, [r0, #20]
    7232:	ea4f 2545 	mov.w	r5, r5, lsl #9
    if(!partition->device_read(partition_offset + 0x0b, buffer, sizeof(buffer)))
    7236:	6803      	ldr	r3, [r0, #0]
    7238:	f105 000b 	add.w	r0, r5, #11
    723c:	a901      	add	r1, sp, #4
    723e:	f04f 0219 	mov.w	r2, #25
    7242:	4798      	blx	r3
    7244:	2800      	cmp	r0, #0
    7246:	d065      	beq.n	7314 <fat_open+0x13c>
        return 0;

    uint16_t bytes_per_sector = ltoh16(*((uint16_t*) &buffer[0x00]));
    7248:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    uint16_t reserved_sectors = ltoh16(*((uint16_t*) &buffer[0x03]));
    724c:	f8bd c007 	ldrh.w	ip, [sp, #7]
    uint8_t sectors_per_cluster = buffer[0x02];
    7250:	f89d 7006 	ldrb.w	r7, [sp, #6]
    uint8_t fat_copies = buffer[0x05];
    7254:	f89d 8009 	ldrb.w	r8, [sp, #9]
    uint16_t max_root_entries = ltoh16(*((uint16_t*) &buffer[0x06]));
    7258:	f8bd 600a 	ldrh.w	r6, [sp, #10]
    uint16_t sector_count_16 = ltoh16(*((uint16_t*) &buffer[0x08]));
    725c:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    uint16_t sectors_per_fat = ltoh16(*((uint16_t*) &buffer[0x0b]));
    7260:	f8bd 100f 	ldrh.w	r1, [sp, #15]
    uint32_t sector_count = ltoh32(*((uint32_t*) &buffer[0x15]));
    7264:	f8dd 2019 	ldr.w	r2, [sp, #25]
#if FAT_FAT32_SUPPORT
    uint32_t sectors_per_fat32 = ltoh32(*((uint32_t*) &buffer[0x19]));
    uint32_t cluster_root_dir = ltoh32(*((uint32_t*) &buffer[0x21]));
#endif

    if(sector_count == 0)
    7268:	b912      	cbnz	r2, 7270 <fat_open+0x98>
    {
        if(sector_count_16 == 0)
    726a:	2800      	cmp	r0, #0
    726c:	d052      	beq.n	7314 <fat_open+0x13c>
            /* illegal volume size */
            return 0;
        else
            sector_count = sector_count_16;
    726e:	4602      	mov	r2, r0
        sectors_per_fat32 = sectors_per_fat;
    else if(sectors_per_fat32 == 0)
        /* this is neither FAT16 nor FAT32 */
        return 0;
#else
    if(sectors_per_fat == 0)
    7270:	2900      	cmp	r1, #0
    7272:	d04f      	beq.n	7314 <fat_open+0x13c>
    uint32_t data_sector_count = sector_count
                                 - reserved_sectors
#if FAT_FAT32_SUPPORT
                                 - sectors_per_fat32 * fat_copies
#else
                                 - (uint32_t) sectors_per_fat * fat_copies
    7274:	fb01 f108 	mul.w	r1, r1, r8
        return 0;
#endif

    /* determine the type of FAT we have here */
    uint32_t data_sector_count = sector_count
                                 - reserved_sectors
    7278:	ebcc 0902 	rsb	r9, ip, r2
#if FAT_FAT32_SUPPORT
                                 - sectors_per_fat32 * fat_copies
#else
                                 - (uint32_t) sectors_per_fat * fat_copies
    727c:	ebc1 0909 	rsb	r9, r1, r9
#endif
                                 - ((max_root_entries * 32 + bytes_per_sector - 1) / bytes_per_sector);
    7280:	ea4f 1046 	mov.w	r0, r6, lsl #5
    7284:	18c0      	adds	r0, r0, r3
    7286:	f100 30ff 	add.w	r0, r0, #4294967295
    728a:	fb90 f0f3 	sdiv	r0, r0, r3
        /* this is not a FAT16 */
        return 0;
#endif

    /* determine the type of FAT we have here */
    uint32_t data_sector_count = sector_count
    728e:	ebc0 0909 	rsb	r9, r0, r9
                                 - sectors_per_fat32 * fat_copies
#else
                                 - (uint32_t) sectors_per_fat * fat_copies
#endif
                                 - ((max_root_entries * 32 + bytes_per_sector - 1) / bytes_per_sector);
    uint32_t data_cluster_count = data_sector_count / sectors_per_cluster;
    7292:	fbb9 f9f7 	udiv	r9, r9, r7
    if(data_cluster_count < 4085)
    7296:	f640 70f4 	movw	r0, #4084	; 0xff4
    729a:	4581      	cmp	r9, r0
    729c:	d93a      	bls.n	7314 <fat_open+0x13c>
        /* this is a FAT12, not supported */
        return 0;
    else if(data_cluster_count < 65525)
        /* this is a FAT16 */
        partition->type = PARTITION_TYPE_FAT16;
    729e:	f64f 70f4 	movw	r0, #65524	; 0xfff4
    72a2:	4581      	cmp	r9, r0
    72a4:	bf8c      	ite	hi
    72a6:	200b      	movhi	r0, #11
    72a8:	2006      	movls	r0, #6
                                 - ((max_root_entries * 32 + bytes_per_sector - 1) / bytes_per_sector);
    uint32_t data_cluster_count = data_sector_count / sectors_per_cluster;
    if(data_cluster_count < 4085)
        /* this is a FAT12, not supported */
        return 0;
    else if(data_cluster_count < 65525)
    72aa:	7420      	strb	r0, [r4, #16]
    else
        /* this is a FAT32 */
        partition->type = PARTITION_TYPE_FAT32;

    /* fill header information */
    struct fat_header_struct* header = &fs->header;
    72ac:	f240 58dc 	movw	r8, #1500	; 0x5dc
    72b0:	f2c1 0800 	movt	r8, #4096	; 0x1000
    memset(header, 0, sizeof(*header));
    72b4:	f04f 0a00 	mov.w	sl, #0
    72b8:	f108 000c 	add.w	r0, r8, #12
    72bc:	f840 ab04 	str.w	sl, [r0], #4
    72c0:	f840 ab04 	str.w	sl, [r0], #4
    72c4:	f840 ab04 	str.w	sl, [r0], #4
    72c8:	f8c0 a000 	str.w	sl, [r0]
    
    header->size = (offset_t) sector_count * bytes_per_sector;
    72cc:	fb03 f202 	mul.w	r2, r3, r2
    72d0:	f8c8 2004 	str.w	r2, [r8, #4]

    header->fat_offset = /* jump to partition */
                         partition_offset +
    72d4:	fb0c 5503 	mla	r5, ip, r3, r5
    struct fat_header_struct* header = &fs->header;
    memset(header, 0, sizeof(*header));
    
    header->size = (offset_t) sector_count * bytes_per_sector;

    header->fat_offset = /* jump to partition */
    72d8:	f8c8 5008 	str.w	r5, [r8, #8]
                         partition_offset +
                         /* jump to fat */
                         (offset_t) reserved_sectors * bytes_per_sector;
    header->fat_size = (data_cluster_count + 2) * (partition->type == PARTITION_TYPE_FAT16 ? 2 : 4);
    72dc:	f109 0902 	add.w	r9, r9, #2
    72e0:	7c22      	ldrb	r2, [r4, #16]
    72e2:	2a06      	cmp	r2, #6
    72e4:	bf14      	ite	ne
    72e6:	2204      	movne	r2, #4
    72e8:	2202      	moveq	r2, #2
    72ea:	4640      	mov	r0, r8
    72ec:	fb09 f202 	mul.w	r2, r9, r2
    72f0:	f8c8 200c 	str.w	r2, [r8, #12]

    header->sector_size = bytes_per_sector;
    72f4:	f8a8 3010 	strh.w	r3, [r8, #16]
    header->cluster_size = (uint16_t) bytes_per_sector * sectors_per_cluster;
    72f8:	fb03 f707 	mul.w	r7, r3, r7
    72fc:	f8a8 7012 	strh.w	r7, [r8, #18]
#if FAT_FAT32_SUPPORT
    if(partition->type == PARTITION_TYPE_FAT16)
#endif
    {
        header->root_dir_offset = /* jump to fats */
                                  header->fat_offset +
    7300:	fb03 5301 	mla	r3, r3, r1, r5

#if FAT_FAT32_SUPPORT
    if(partition->type == PARTITION_TYPE_FAT16)
#endif
    {
        header->root_dir_offset = /* jump to fats */
    7304:	f8c8 3018 	str.w	r3, [r8, #24]
                                  (offset_t) fat_copies * sectors_per_fat * bytes_per_sector;

        header->cluster_zero_offset = /* jump to root directory entries */
                                      header->root_dir_offset +
                                      /* skip root directory entries */
                                      (offset_t) max_root_entries * 32;
    7308:	ea4f 1646 	mov.w	r6, r6, lsl #5
                                  header->fat_offset +
                                  /* jump to root directory entries */
                                  (offset_t) fat_copies * sectors_per_fat * bytes_per_sector;

        header->cluster_zero_offset = /* jump to root directory entries */
                                      header->root_dir_offset +
    730c:	199b      	adds	r3, r3, r6
        header->root_dir_offset = /* jump to fats */
                                  header->fat_offset +
                                  /* jump to root directory entries */
                                  (offset_t) fat_copies * sectors_per_fat * bytes_per_sector;

        header->cluster_zero_offset = /* jump to root directory entries */
    730e:	f8c8 3014 	str.w	r3, [r8, #20]
    7312:	e012      	b.n	733a <fat_open+0x162>
    if(!fat_read_header(fs))
    {
#if USE_DYNAMIC_MEMORY
        free(fs);
#else
        fs->partition = 0;
    7314:	f240 53dc 	movw	r3, #1500	; 0x5dc
    7318:	f2c1 0300 	movt	r3, #4096	; 0x1000
    731c:	f04f 0000 	mov.w	r0, #0
    7320:	6018      	str	r0, [r3, #0]
#endif
        return 0;
    7322:	e00a      	b.n	733a <fat_open+0x162>
       !partition->device_write_interval
#else
       0
#endif
      )
        return 0;
    7324:	f04f 0000 	mov.w	r0, #0
    7328:	e007      	b.n	733a <fat_open+0x162>
    732a:	f04f 0000 	mov.w	r0, #0
    732e:	e004      	b.n	733a <fat_open+0x162>
    7330:	f04f 0000 	mov.w	r0, #0
    7334:	e001      	b.n	733a <fat_open+0x162>
            break;

        ++fs;
    }
    if(i >= FAT_FS_COUNT)
        return 0;
    7336:	f04f 0000 	mov.w	r0, #0
#endif
        return 0;
    }

    return fs;
}
    733a:	b008      	add	sp, #32
    733c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00007340 <fat_close>:
 * \param[in] fs The filesystem to close.
 * \see fat_open
 */
void fat_close(struct fat_fs_struct* fs)
{
    if(!fs)
    7340:	b110      	cbz	r0, 7348 <fat_close+0x8>
        return;

#if USE_DYNAMIC_MEMORY
    free(fs);
#else
    fs->partition = 0;
    7342:	f04f 0200 	mov.w	r2, #0
    7346:	6002      	str	r2, [r0, #0]
    7348:	4770      	bx	lr
    734a:	bf00      	nop

0000734c <fat_open_file>:
 * \param[in] dir_entry The directory entry of the file to open.
 * \returns The file handle, or 0 on failure.
 * \see fat_close_file
 */
struct fat_file_struct* fat_open_file(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    734c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
    if(!fs || !dir_entry || (dir_entry->attributes & FAT_ATTRIB_DIR))
    7350:	4680      	mov	r8, r0
    7352:	460d      	mov	r5, r1
    7354:	f1d1 0101 	rsbs	r1, r1, #1
    7358:	bf38      	it	cc
    735a:	2100      	movcc	r1, #0
    735c:	2800      	cmp	r0, #0
    735e:	bf08      	it	eq
    7360:	f041 0101 	orreq.w	r1, r1, #1
        return 0;
    7364:	f04f 0000 	mov.w	r0, #0
 * \returns The file handle, or 0 on failure.
 * \see fat_close_file
 */
struct fat_file_struct* fat_open_file(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry || (dir_entry->attributes & FAT_ATTRIB_DIR))
    7368:	bb81      	cbnz	r1, 73cc <fat_open_file+0x80>
    736a:	f895 3020 	ldrb.w	r3, [r5, #32]
    736e:	f013 0f10 	tst.w	r3, #16
        return 0;
    7372:	bf18      	it	ne
    7374:	2000      	movne	r0, #0
 * \returns The file handle, or 0 on failure.
 * \see fat_close_file
 */
struct fat_file_struct* fat_open_file(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry || (dir_entry->attributes & FAT_ATTRIB_DIR))
    7376:	d129      	bne.n	73cc <fat_open_file+0x80>
#else
    struct fat_file_struct* fd = fat_file_handles;
    uint8_t i;
    for(i = 0; i < FAT_FILE_COUNT; ++i)
    {
        if(!fd->fs)
    7378:	f240 6364 	movw	r3, #1636	; 0x664
    737c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7380:	681b      	ldr	r3, [r3, #0]
            break;

        ++fd;
    }
    if(i >= FAT_FILE_COUNT)
        return 0;
    7382:	f04f 0000 	mov.w	r0, #0
#else
    struct fat_file_struct* fd = fat_file_handles;
    uint8_t i;
    for(i = 0; i < FAT_FILE_COUNT; ++i)
    {
        if(!fd->fs)
    7386:	bb0b      	cbnz	r3, 73cc <fat_open_file+0x80>
    }
    if(i >= FAT_FILE_COUNT)
        return 0;
#endif
    
    memcpy(&fd->dir_entry, dir_entry, sizeof(*dir_entry));
    7388:	462c      	mov	r4, r5
    738a:	f8df c048 	ldr.w	ip, [pc, #72]	; 73d4 <fat_open_file+0x88>
    738e:	f105 0720 	add.w	r7, r5, #32
    7392:	4666      	mov	r6, ip
    7394:	6820      	ldr	r0, [r4, #0]
    7396:	6861      	ldr	r1, [r4, #4]
    7398:	68a2      	ldr	r2, [r4, #8]
    739a:	68e3      	ldr	r3, [r4, #12]
    739c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    739e:	f104 0410 	add.w	r4, r4, #16
    73a2:	46b4      	mov	ip, r6
    73a4:	42bc      	cmp	r4, r7
    73a6:	d1f4      	bne.n	7392 <fat_open_file+0x46>
    73a8:	6820      	ldr	r0, [r4, #0]
    73aa:	6861      	ldr	r1, [r4, #4]
    73ac:	68a2      	ldr	r2, [r4, #8]
    73ae:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
    fd->fs = fs;
    73b2:	f240 6064 	movw	r0, #1636	; 0x664
    73b6:	f2c1 0000 	movt	r0, #4096	; 0x1000
    73ba:	f8c0 8000 	str.w	r8, [r0]
    fd->pos = 0;
    73be:	f04f 0300 	mov.w	r3, #0
    73c2:	6303      	str	r3, [r0, #48]	; 0x30
    fd->pos_cluster = dir_entry->cluster;
    73c4:	8c6d      	ldrh	r5, [r5, #34]	; 0x22
    73c6:	8685      	strh	r5, [r0, #52]	; 0x34
#ifdef FAT_DELAY_DIRENTRY_UPDATE
	fd->needs_write = 0;
    73c8:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
#endif

    return fd;
}
    73cc:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
    73d0:	4770      	bx	lr
    73d2:	bf00      	nop
    73d4:	10000668 	.word	0x10000668

000073d8 <fat_close_file>:
 * \param[in] fd The file handle of the file to close.
 * \see fat_open_file
 */
void fat_close_file(struct fat_file_struct* fd)
{
    if(fd)
    73d8:	b110      	cbz	r0, 73e0 <fat_close_file+0x8>
#endif

#if USE_DYNAMIC_MEMORY
        free(fd);
#else
        fd->fs = 0;
    73da:	f04f 0200 	mov.w	r2, #0
    73de:	6002      	str	r2, [r0, #0]
    73e0:	4770      	bx	lr
    73e2:	bf00      	nop

000073e4 <fat_read_file>:
 * \param[in] buffer_len The amount of data to read.
 * \returns The number of bytes read, 0 on end of file, or -1 on failure.
 * \see fat_write_file
 */
intptr_t fat_read_file(struct fat_file_struct* fd, uint8_t* buffer, uintptr_t buffer_len)
{
    73e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    73e8:	b083      	sub	sp, #12
    73ea:	9201      	str	r2, [sp, #4]
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
    73ec:	4605      	mov	r5, r0
    73ee:	4689      	mov	r9, r1
    73f0:	f1d1 0101 	rsbs	r1, r1, #1
    73f4:	bf38      	it	cc
    73f6:	2100      	movcc	r1, #0
    73f8:	2800      	cmp	r0, #0
    73fa:	bf08      	it	eq
    73fc:	f041 0101 	orreq.w	r1, r1, #1
    7400:	2900      	cmp	r1, #0
    7402:	d15f      	bne.n	74c4 <fat_read_file+0xe0>
    7404:	2a00      	cmp	r2, #0
    7406:	d060      	beq.n	74ca <fat_read_file+0xe6>
        return -1;

    /* determine number of bytes to read */
    if(fd->pos + buffer_len > fd->dir_entry.file_size)
    7408:	6b06      	ldr	r6, [r0, #48]	; 0x30
    740a:	6a83      	ldr	r3, [r0, #40]	; 0x28
    740c:	1992      	adds	r2, r2, r6
    740e:	429a      	cmp	r2, r3
    7410:	d904      	bls.n	741c <fat_read_file+0x38>
        buffer_len = fd->dir_entry.file_size - fd->pos;
    if(buffer_len == 0)
    7412:	1b9b      	subs	r3, r3, r6
    7414:	9301      	str	r3, [sp, #4]
        return 0;
    7416:	bf08      	it	eq
    7418:	2000      	moveq	r0, #0
        return -1;

    /* determine number of bytes to read */
    if(fd->pos + buffer_len > fd->dir_entry.file_size)
        buffer_len = fd->dir_entry.file_size - fd->pos;
    if(buffer_len == 0)
    741a:	d05b      	beq.n	74d4 <fat_read_file+0xf0>
        return 0;
    
    uint16_t cluster_size = fd->fs->header.cluster_size;
    741c:	682b      	ldr	r3, [r5, #0]
    741e:	f8b3 b012 	ldrh.w	fp, [r3, #18]
    cluster_t cluster_num = fd->pos_cluster;
    7422:	8eaf      	ldrh	r7, [r5, #52]	; 0x34
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));

    /* find cluster in which to start reading */
    if(!cluster_num)
    7424:	b9af      	cbnz	r7, 7452 <fat_read_file+0x6e>
    {
        cluster_num = fd->dir_entry.cluster;
    7426:	8cef      	ldrh	r7, [r5, #38]	; 0x26
        
        if(!cluster_num)
        {
            if(!fd->pos)
                return 0;
    7428:	2e00      	cmp	r6, #0
    742a:	bf14      	ite	ne
    742c:	f04f 30ff 	movne.w	r0, #4294967295
    7430:	2000      	moveq	r0, #0
    /* find cluster in which to start reading */
    if(!cluster_num)
    {
        cluster_num = fd->dir_entry.cluster;
        
        if(!cluster_num)
    7432:	2f00      	cmp	r7, #0
    7434:	d04e      	beq.n	74d4 <fat_read_file+0xf0>
                return 0;
            else
                return -1;
        }

        if(fd->pos)
    7436:	4634      	mov	r4, r6
    7438:	b94e      	cbnz	r6, 744e <fat_read_file+0x6a>
    743a:	e00a      	b.n	7452 <fat_read_file+0x6e>
 * \param[out] buffer The buffer into which to write.
 * \param[in] buffer_len The amount of data to read.
 * \returns The number of bytes read, 0 on end of file, or -1 on failure.
 * \see fat_write_file
 */
intptr_t fat_read_file(struct fat_file_struct* fd, uint8_t* buffer, uintptr_t buffer_len)
    743c:	ebcb 0404 	rsb	r4, fp, r4
        {
            uint32_t pos = fd->pos;
            while(pos >= cluster_size)
            {
                pos -= cluster_size;
                cluster_num = fat_get_next_cluster(fd->fs, cluster_num);
    7440:	6828      	ldr	r0, [r5, #0]
    7442:	4639      	mov	r1, r7
    7444:	f7ff fb0e 	bl	6a64 <fat_get_next_cluster>
                if(!cluster_num)
    7448:	4607      	mov	r7, r0
    744a:	2800      	cmp	r0, #0
    744c:	d040      	beq.n	74d0 <fat_read_file+0xec>
        }

        if(fd->pos)
        {
            uint32_t pos = fd->pos;
            while(pos >= cluster_size)
    744e:	455c      	cmp	r4, fp
    7450:	d2f4      	bcs.n	743c <fat_read_file+0x58>
        return 0;
    
    uint16_t cluster_size = fd->fs->header.cluster_size;
    cluster_t cluster_num = fd->pos_cluster;
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));
    7452:	f10b 38ff 	add.w	r8, fp, #4294967295
    7456:	ea08 0606 	and.w	r6, r8, r6
    745a:	fa1f f886 	uxth.w	r8, r6
    745e:	9e01      	ldr	r6, [sp, #4]
    
    /* read data */
    do
    {
        /* calculate data size to copy from cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
    7460:	f8d5 a000 	ldr.w	sl, [r5]
    7464:	4650      	mov	r0, sl
    7466:	4639      	mov	r1, r7
    7468:	f7ff fc0e 	bl	6c88 <fat_cluster_offset>
    746c:	4440      	add	r0, r8
        uint16_t copy_length = cluster_size - first_cluster_offset;
    746e:	ebc8 040b 	rsb	r4, r8, fp
    7472:	b2a4      	uxth	r4, r4
        if(copy_length > buffer_left)
    7474:	42a6      	cmp	r6, r4
            copy_length = buffer_left;
    7476:	bf38      	it	cc
    7478:	b2b4      	uxthcc	r4, r6

        /* read data */
        if(!fd->fs->partition->device_read(cluster_offset, buffer, copy_length))
    747a:	f8da 3000 	ldr.w	r3, [sl]
    747e:	681b      	ldr	r3, [r3, #0]
    7480:	4649      	mov	r1, r9
    7482:	4622      	mov	r2, r4
    7484:	4798      	blx	r3
    7486:	b910      	cbnz	r0, 748e <fat_read_file+0xaa>
            return buffer_len - buffer_left;
    7488:	9901      	ldr	r1, [sp, #4]
    748a:	1b88      	subs	r0, r1, r6
    748c:	e022      	b.n	74d4 <fat_read_file+0xf0>

        /* calculate new file position */
        buffer += copy_length;
    748e:	44a1      	add	r9, r4
        buffer_left -= copy_length;
    7490:	1b36      	subs	r6, r6, r4
        fd->pos += copy_length;
    7492:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    7494:	191b      	adds	r3, r3, r4
    7496:	632b      	str	r3, [r5, #48]	; 0x30

        if(first_cluster_offset + copy_length >= cluster_size)
    7498:	4444      	add	r4, r8
    749a:	455c      	cmp	r4, fp
    749c:	db0d      	blt.n	74ba <fat_read_file+0xd6>
        {
            /* we are on a cluster boundary, so get the next cluster */
            if((cluster_num = fat_get_next_cluster(fd->fs, cluster_num)))
    749e:	6828      	ldr	r0, [r5, #0]
    74a0:	4639      	mov	r1, r7
    74a2:	f7ff fadf 	bl	6a64 <fat_get_next_cluster>
    74a6:	4607      	mov	r7, r0
    74a8:	b928      	cbnz	r0, 74b6 <fat_read_file+0xd2>
            {
                first_cluster_offset = 0;
            }
            else
            {
                fd->pos_cluster = 0;
    74aa:	f04f 0300 	mov.w	r3, #0
    74ae:	86ab      	strh	r3, [r5, #52]	; 0x34
                return buffer_len - buffer_left;
    74b0:	9901      	ldr	r1, [sp, #4]
    74b2:	1b88      	subs	r0, r1, r6
    74b4:	e00e      	b.n	74d4 <fat_read_file+0xf0>
        if(first_cluster_offset + copy_length >= cluster_size)
        {
            /* we are on a cluster boundary, so get the next cluster */
            if((cluster_num = fat_get_next_cluster(fd->fs, cluster_num)))
            {
                first_cluster_offset = 0;
    74b6:	f04f 0800 	mov.w	r8, #0
                fd->pos_cluster = 0;
                return buffer_len - buffer_left;
            }
        }

        fd->pos_cluster = cluster_num;
    74ba:	86af      	strh	r7, [r5, #52]	; 0x34

    } while(buffer_left > 0); /* check if we are done */
    74bc:	2e00      	cmp	r6, #0
    74be:	d1cf      	bne.n	7460 <fat_read_file+0x7c>

    return buffer_len;
    74c0:	9801      	ldr	r0, [sp, #4]
    74c2:	e007      	b.n	74d4 <fat_read_file+0xf0>
 */
intptr_t fat_read_file(struct fat_file_struct* fd, uint8_t* buffer, uintptr_t buffer_len)
{
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
        return -1;
    74c4:	f04f 30ff 	mov.w	r0, #4294967295
    74c8:	e004      	b.n	74d4 <fat_read_file+0xf0>
    74ca:	f04f 30ff 	mov.w	r0, #4294967295
    74ce:	e001      	b.n	74d4 <fat_read_file+0xf0>
            while(pos >= cluster_size)
            {
                pos -= cluster_size;
                cluster_num = fat_get_next_cluster(fd->fs, cluster_num);
                if(!cluster_num)
                    return -1;
    74d0:	f04f 30ff 	mov.w	r0, #4294967295
        fd->pos_cluster = cluster_num;

    } while(buffer_left > 0); /* check if we are done */

    return buffer_len;
}
    74d4:	b003      	add	sp, #12
    74d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    74da:	bf00      	nop

000074dc <fat_write_file>:
 * \param[in] buffer_len The amount of data to write.
 * \returns The number of bytes written, 0 on disk full, or -1 on failure.
 * \see fat_read_file
 */
intptr_t fat_write_file(struct fat_file_struct* fd, const uint8_t* buffer, uintptr_t buffer_len)
{
    74dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    74e0:	b083      	sub	sp, #12
    74e2:	9201      	str	r2, [sp, #4]
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
    74e4:	4605      	mov	r5, r0
    74e6:	468a      	mov	sl, r1
    74e8:	f1d1 0101 	rsbs	r1, r1, #1
    74ec:	bf38      	it	cc
    74ee:	2100      	movcc	r1, #0
    74f0:	2800      	cmp	r0, #0
    74f2:	bf08      	it	eq
    74f4:	f041 0101 	orreq.w	r1, r1, #1
    74f8:	2900      	cmp	r1, #0
    74fa:	f040 8091 	bne.w	7620 <fat_write_file+0x144>
    74fe:	2a00      	cmp	r2, #0
    7500:	f000 8091 	beq.w	7626 <fat_write_file+0x14a>
        return -1;
    if(fd->pos > fd->dir_entry.file_size)
    7504:	6b06      	ldr	r6, [r0, #48]	; 0x30
    7506:	6a83      	ldr	r3, [r0, #40]	; 0x28
    7508:	429e      	cmp	r6, r3
        return -1;
    750a:	bf88      	it	hi
    750c:	f04f 30ff 	movhi.w	r0, #4294967295
intptr_t fat_write_file(struct fat_file_struct* fd, const uint8_t* buffer, uintptr_t buffer_len)
{
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
        return -1;
    if(fd->pos > fd->dir_entry.file_size)
    7510:	f200 8094 	bhi.w	763c <fat_write_file+0x160>
        return -1;

    uint16_t cluster_size = fd->fs->header.cluster_size;
    7514:	6800      	ldr	r0, [r0, #0]
    7516:	f8b0 b012 	ldrh.w	fp, [r0, #18]
    cluster_t cluster_num = fd->pos_cluster;
    751a:	8eaf      	ldrh	r7, [r5, #52]	; 0x34
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));

    /* find cluster in which to start writing */
    if(!cluster_num)
    751c:	2f00      	cmp	r7, #0
    751e:	d12d      	bne.n	757c <fat_write_file+0xa0>
    {
        cluster_num = fd->dir_entry.cluster;
    7520:	8cef      	ldrh	r7, [r5, #38]	; 0x26
        
        if(!cluster_num)
    7522:	b957      	cbnz	r7, 753a <fat_write_file+0x5e>
        {
            if(!fd->pos)
    7524:	2e00      	cmp	r6, #0
    7526:	f040 8081 	bne.w	762c <fat_write_file+0x150>
            {
                /* empty file */
                fd->dir_entry.cluster = cluster_num = fat_append_clusters(fd->fs, 0, 1);
    752a:	f04f 0201 	mov.w	r2, #1
    752e:	f7ff fb2b 	bl	6b88 <fat_append_clusters>
    7532:	4607      	mov	r7, r0
    7534:	84e8      	strh	r0, [r5, #38]	; 0x26
                if(!cluster_num)
    7536:	2800      	cmp	r0, #0
    7538:	d07b      	beq.n	7632 <fat_write_file+0x156>
            {
                return -1;
            }
        }

        if(fd->pos)
    753a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
            {
                pos -= cluster_size;
                cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
                if(!cluster_num_next && pos == 0)
                    /* the file exactly ends on a cluster boundary, and we append to it */
                    cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
    753c:	f04f 0801 	mov.w	r8, #1
            {
                return -1;
            }
        }

        if(fd->pos)
    7540:	b9d4      	cbnz	r4, 7578 <fat_write_file+0x9c>
    7542:	e01b      	b.n	757c <fat_write_file+0xa0>
 * \param[in] buffer The buffer from which to read the data to be written.
 * \param[in] buffer_len The amount of data to write.
 * \returns The number of bytes written, 0 on disk full, or -1 on failure.
 * \see fat_read_file
 */
intptr_t fat_write_file(struct fat_file_struct* fd, const uint8_t* buffer, uintptr_t buffer_len)
    7544:	ebcb 0404 	rsb	r4, fp, r4
            uint32_t pos = fd->pos;
            cluster_t cluster_num_next;
            while(pos >= cluster_size)
            {
                pos -= cluster_size;
                cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    7548:	6828      	ldr	r0, [r5, #0]
    754a:	4639      	mov	r1, r7
    754c:	f7ff fa8a 	bl	6a64 <fat_get_next_cluster>
                if(!cluster_num_next && pos == 0)
    7550:	4603      	mov	r3, r0
    7552:	f1d4 0201 	rsbs	r2, r4, #1
    7556:	bf38      	it	cc
    7558:	2200      	movcc	r2, #0
    755a:	2800      	cmp	r0, #0
    755c:	bf14      	ite	ne
    755e:	2200      	movne	r2, #0
    7560:	f002 0201 	andeq.w	r2, r2, #1
    7564:	b12a      	cbz	r2, 7572 <fat_write_file+0x96>
                    /* the file exactly ends on a cluster boundary, and we append to it */
                    cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
    7566:	6828      	ldr	r0, [r5, #0]
    7568:	4639      	mov	r1, r7
    756a:	4642      	mov	r2, r8
    756c:	f7ff fb0c 	bl	6b88 <fat_append_clusters>
    7570:	4603      	mov	r3, r0
                if(!cluster_num_next)
    7572:	2b00      	cmp	r3, #0
    7574:	d060      	beq.n	7638 <fat_write_file+0x15c>
                    return -1;

                cluster_num = cluster_num_next;
    7576:	461f      	mov	r7, r3

        if(fd->pos)
        {
            uint32_t pos = fd->pos;
            cluster_t cluster_num_next;
            while(pos >= cluster_size)
    7578:	455c      	cmp	r4, fp
    757a:	d2e3      	bcs.n	7544 <fat_write_file+0x68>
        return -1;

    uint16_t cluster_size = fd->fs->header.cluster_size;
    cluster_t cluster_num = fd->pos_cluster;
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));
    757c:	f10b 38ff 	add.w	r8, fp, #4294967295
    7580:	ea08 0806 	and.w	r8, r8, r6
    7584:	fa1f f888 	uxth.w	r8, r8
    7588:	9e01      	ldr	r6, [sp, #4]
        {
            /* we are on a cluster boundary, so get the next cluster */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
            if(!cluster_num_next && buffer_left > 0)
                /* we reached the last cluster, append a new one */
                cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
    758a:	46b9      	mov	r9, r7
    
    /* write data */
    do
    {
        /* calculate data size to write to cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
    758c:	682f      	ldr	r7, [r5, #0]
    758e:	4638      	mov	r0, r7
    7590:	4649      	mov	r1, r9
    7592:	f7ff fb79 	bl	6c88 <fat_cluster_offset>
    7596:	4440      	add	r0, r8
        uint16_t write_length = cluster_size - first_cluster_offset;
    7598:	ebc8 040b 	rsb	r4, r8, fp
    759c:	b2a4      	uxth	r4, r4
        if(write_length > buffer_left)
    759e:	42a6      	cmp	r6, r4
            write_length = buffer_left;
    75a0:	bf38      	it	cc
    75a2:	b2b4      	uxthcc	r4, r6

        /* write data which fits into the current cluster */
        if(!fd->fs->partition->device_write(cluster_offset, buffer, write_length))
    75a4:	683b      	ldr	r3, [r7, #0]
    75a6:	689b      	ldr	r3, [r3, #8]
    75a8:	4651      	mov	r1, sl
    75aa:	4622      	mov	r2, r4
    75ac:	4798      	blx	r3
    75ae:	b330      	cbz	r0, 75fe <fat_write_file+0x122>
            break;

        /* calculate new file position */
        buffer += write_length;
    75b0:	44a2      	add	sl, r4
        buffer_left -= write_length;
    75b2:	1b36      	subs	r6, r6, r4
        fd->pos += write_length;
    75b4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    75b6:	191b      	adds	r3, r3, r4
    75b8:	632b      	str	r3, [r5, #48]	; 0x30

        if(first_cluster_offset + write_length >= cluster_size)
    75ba:	4444      	add	r4, r8
    75bc:	455c      	cmp	r4, fp
    75be:	db1a      	blt.n	75f6 <fat_write_file+0x11a>
        {
            /* we are on a cluster boundary, so get the next cluster */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    75c0:	6828      	ldr	r0, [r5, #0]
    75c2:	4649      	mov	r1, r9
    75c4:	f7ff fa4e 	bl	6a64 <fat_get_next_cluster>
            if(!cluster_num_next && buffer_left > 0)
    75c8:	4603      	mov	r3, r0
    75ca:	1c32      	adds	r2, r6, #0
    75cc:	bf18      	it	ne
    75ce:	2201      	movne	r2, #1
    75d0:	2800      	cmp	r0, #0
    75d2:	bf14      	ite	ne
    75d4:	2200      	movne	r2, #0
    75d6:	f002 0201 	andeq.w	r2, r2, #1
    75da:	b132      	cbz	r2, 75ea <fat_write_file+0x10e>
                /* we reached the last cluster, append a new one */
                cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
    75dc:	6828      	ldr	r0, [r5, #0]
    75de:	4649      	mov	r1, r9
    75e0:	f04f 0201 	mov.w	r2, #1
    75e4:	f7ff fad0 	bl	6b88 <fat_append_clusters>
    75e8:	4603      	mov	r3, r0
            if(!cluster_num_next)
    75ea:	b90b      	cbnz	r3, 75f0 <fat_write_file+0x114>
            {
                fd->pos_cluster = 0;
    75ec:	86ab      	strh	r3, [r5, #52]	; 0x34
                break;
    75ee:	e006      	b.n	75fe <fat_write_file+0x122>
            }

            cluster_num = cluster_num_next;
    75f0:	4699      	mov	r9, r3
            first_cluster_offset = 0;
    75f2:	f04f 0800 	mov.w	r8, #0
        }

        fd->pos_cluster = cluster_num;
    75f6:	f8a5 9034 	strh.w	r9, [r5, #52]	; 0x34

    } while(buffer_left > 0); /* check if we are done */
    75fa:	2e00      	cmp	r6, #0
    75fc:	d1c6      	bne.n	758c <fat_write_file+0xb0>

    /* update directory entry */
    if(fd->pos > fd->dir_entry.file_size)
    75fe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    7600:	6aac      	ldr	r4, [r5, #40]	; 0x28
    7602:	42a3      	cmp	r3, r4
    7604:	d909      	bls.n	761a <fat_write_file+0x13e>
		/* record the need to write */
		fd->needs_write = 1;
#endif

        /* update file size */
        fd->dir_entry.file_size = fd->pos;
    7606:	62ab      	str	r3, [r5, #40]	; 0x28

#if !FAT_DELAY_DIRENTRY_UPDATE
        /* write directory entry */
        if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
    7608:	4629      	mov	r1, r5
    760a:	f851 0b04 	ldr.w	r0, [r1], #4
    760e:	f7ff fce7 	bl	6fe0 <fat_write_dir_entry>
    7612:	b910      	cbnz	r0, 761a <fat_write_file+0x13e>
        {
            /* We do not return an error here since we actually wrote
             * some data to disk. So we calculate the amount of data
             * we wrote to disk and which lies within the old file size.
             */
            buffer_left = fd->pos - size_old;
    7614:	6b2e      	ldr	r6, [r5, #48]	; 0x30
    7616:	1b36      	subs	r6, r6, r4
            fd->pos = size_old;
    7618:	632c      	str	r4, [r5, #48]	; 0x30
        }
#endif
    }

    return buffer_len - buffer_left;
    761a:	9b01      	ldr	r3, [sp, #4]
    761c:	1b98      	subs	r0, r3, r6
    761e:	e00d      	b.n	763c <fat_write_file+0x160>
 */
intptr_t fat_write_file(struct fat_file_struct* fd, const uint8_t* buffer, uintptr_t buffer_len)
{
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
        return -1;
    7620:	f04f 30ff 	mov.w	r0, #4294967295
    7624:	e00a      	b.n	763c <fat_write_file+0x160>
    7626:	f04f 30ff 	mov.w	r0, #4294967295
    762a:	e007      	b.n	763c <fat_write_file+0x160>
                if(!cluster_num)
                    return -1;
            }
            else
            {
                return -1;
    762c:	f04f 30ff 	mov.w	r0, #4294967295
    7630:	e004      	b.n	763c <fat_write_file+0x160>
            if(!fd->pos)
            {
                /* empty file */
                fd->dir_entry.cluster = cluster_num = fat_append_clusters(fd->fs, 0, 1);
                if(!cluster_num)
                    return -1;
    7632:	f04f 30ff 	mov.w	r0, #4294967295
    7636:	e001      	b.n	763c <fat_write_file+0x160>
                cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
                if(!cluster_num_next && pos == 0)
                    /* the file exactly ends on a cluster boundary, and we append to it */
                    cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
                if(!cluster_num_next)
                    return -1;
    7638:	f04f 30ff 	mov.w	r0, #4294967295
        }
#endif
    }

    return buffer_len - buffer_left;
}
    763c:	b003      	add	sp, #12
    763e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7642:	bf00      	nop

00007644 <fat_open_dir>:
 * \param[in] dir_entry The directory entry which stands for the directory to open.
 * \returns An opaque directory descriptor on success, 0 on failure.
 * \see fat_close_dir
 */
struct fat_dir_struct* fat_open_dir(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    7644:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    if(!fs || !dir_entry || !(dir_entry->attributes & FAT_ATTRIB_DIR))
    7648:	4684      	mov	ip, r0
    764a:	460d      	mov	r5, r1
    764c:	f1d1 0101 	rsbs	r1, r1, #1
    7650:	bf38      	it	cc
    7652:	2100      	movcc	r1, #0
    7654:	2800      	cmp	r0, #0
    7656:	bf08      	it	eq
    7658:	f041 0101 	orreq.w	r1, r1, #1
        return 0;
    765c:	f04f 0400 	mov.w	r4, #0
 * \returns An opaque directory descriptor on success, 0 on failure.
 * \see fat_close_dir
 */
struct fat_dir_struct* fat_open_dir(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry || !(dir_entry->attributes & FAT_ATTRIB_DIR))
    7660:	2900      	cmp	r1, #0
    7662:	d13e      	bne.n	76e2 <fat_open_dir+0x9e>
    7664:	f895 3020 	ldrb.w	r3, [r5, #32]
    7668:	f013 0f10 	tst.w	r3, #16
        return 0;
    766c:	bf08      	it	eq
    766e:	2400      	moveq	r4, #0
 * \returns An opaque directory descriptor on success, 0 on failure.
 * \see fat_close_dir
 */
struct fat_dir_struct* fat_open_dir(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry || !(dir_entry->attributes & FAT_ATTRIB_DIR))
    7670:	d037      	beq.n	76e2 <fat_open_dir+0x9e>
#else
    struct fat_dir_struct* dd = fat_dir_handles;
    uint8_t i;
    for(i = 0; i < FAT_DIR_COUNT; ++i)
    {
        if(!dd->fs)
    7672:	f240 53fc 	movw	r3, #1532	; 0x5fc
    7676:	f2c1 0300 	movt	r3, #4096	; 0x1000
    767a:	681b      	ldr	r3, [r3, #0]
    767c:	b13b      	cbz	r3, 768e <fat_open_dir+0x4a>
    767e:	f240 53fc 	movw	r3, #1532	; 0x5fc
    7682:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            break;

        ++dd;
    7688:	4c18      	ldr	r4, [pc, #96]	; (76ec <fat_open_dir+0xa8>)
#else
    struct fat_dir_struct* dd = fat_dir_handles;
    uint8_t i;
    for(i = 0; i < FAT_DIR_COUNT; ++i)
    {
        if(!dd->fs)
    768a:	bb43      	cbnz	r3, 76de <fat_open_dir+0x9a>
    768c:	e003      	b.n	7696 <fat_open_dir+0x52>
#if USE_DYNAMIC_MEMORY
    struct fat_dir_struct* dd = malloc(sizeof(*dd));
    if(!dd)
        return 0;
#else
    struct fat_dir_struct* dd = fat_dir_handles;
    768e:	f240 54fc 	movw	r4, #1532	; 0x5fc
    7692:	f2c1 0400 	movt	r4, #4096	; 0x1000
    }
    if(i >= FAT_DIR_COUNT)
        return 0;
#endif
    
    memcpy(&dd->dir_entry, dir_entry, sizeof(*dir_entry));
    7696:	46a8      	mov	r8, r5
    7698:	f104 0904 	add.w	r9, r4, #4
    769c:	f105 0720 	add.w	r7, r5, #32
    76a0:	464e      	mov	r6, r9
    76a2:	f8d8 0000 	ldr.w	r0, [r8]
    76a6:	f8d8 1004 	ldr.w	r1, [r8, #4]
    76aa:	f8d8 2008 	ldr.w	r2, [r8, #8]
    76ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
    76b2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    76b4:	f108 0810 	add.w	r8, r8, #16
    76b8:	46b1      	mov	r9, r6
    76ba:	45b8      	cmp	r8, r7
    76bc:	d1f0      	bne.n	76a0 <fat_open_dir+0x5c>
    76be:	f8d8 0000 	ldr.w	r0, [r8]
    76c2:	f8d8 1004 	ldr.w	r1, [r8, #4]
    76c6:	f8d8 2008 	ldr.w	r2, [r8, #8]
    76ca:	e8a9 0007 	stmia.w	r9!, {r0, r1, r2}
    dd->fs = fs;
    76ce:	f8c4 c000 	str.w	ip, [r4]
    dd->entry_cluster = dir_entry->cluster;
    76d2:	8c6d      	ldrh	r5, [r5, #34]	; 0x22
    76d4:	8625      	strh	r5, [r4, #48]	; 0x30
    dd->entry_offset = 0;
    76d6:	f04f 0300 	mov.w	r3, #0
    76da:	8663      	strh	r3, [r4, #50]	; 0x32

    return dd;
    76dc:	e001      	b.n	76e2 <fat_open_dir+0x9e>
            break;

        ++dd;
    }
    if(i >= FAT_DIR_COUNT)
        return 0;
    76de:	f04f 0400 	mov.w	r4, #0
    dd->fs = fs;
    dd->entry_cluster = dir_entry->cluster;
    dd->entry_offset = 0;

    return dd;
}
    76e2:	4620      	mov	r0, r4
    76e4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    76e8:	4770      	bx	lr
    76ea:	bf00      	nop
    76ec:	10000630 	.word	0x10000630

000076f0 <fat_close_dir>:
 * \param[in] dd The directory descriptor to close.
 * \see fat_open_dir
 */
void fat_close_dir(struct fat_dir_struct* dd)
{
    if(dd)
    76f0:	b110      	cbz	r0, 76f8 <fat_close_dir+0x8>
#if USE_DYNAMIC_MEMORY
        free(dd);
#else
        dd->fs = 0;
    76f2:	f04f 0200 	mov.w	r2, #0
    76f6:	6002      	str	r2, [r0, #0]
    76f8:	4770      	bx	lr
    76fa:	bf00      	nop

000076fc <fat_reset_dir>:
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    if(!dd)
    76fc:	b138      	cbz	r0, 770e <fat_reset_dir+0x12>
        return 0;

    dd->entry_cluster = dd->dir_entry.cluster;
    76fe:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
    7700:	8602      	strh	r2, [r0, #48]	; 0x30
    dd->entry_offset = 0;
    7702:	f04f 0200 	mov.w	r2, #0
    7706:	8642      	strh	r2, [r0, #50]	; 0x32
    return 1;
    7708:	f04f 0001 	mov.w	r0, #1
    770c:	4770      	bx	lr
 * \see fat_read_dir
 */
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    if(!dd)
        return 0;
    770e:	f04f 0000 	mov.w	r0, #0

    dd->entry_cluster = dd->dir_entry.cluster;
    dd->entry_offset = 0;
    return 1;
}
    7712:	4770      	bx	lr

00007714 <fat_read_dir>:
 * \param[out] dir_entry Pointer to a buffer into which to write the directory entry information.
 * \returns 0 on failure, 1 on success.
 * \see fat_reset_dir
 */
uint8_t fat_read_dir(struct fat_dir_struct* dd, struct fat_dir_entry_struct* dir_entry)
{
    7714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7718:	b08f      	sub	sp, #60	; 0x3c
    if(!dd || !dir_entry)
    771a:	4683      	mov	fp, r0
    771c:	460f      	mov	r7, r1
    771e:	f1d1 0101 	rsbs	r1, r1, #1
    7722:	bf38      	it	cc
    7724:	2100      	movcc	r1, #0
    7726:	2800      	cmp	r0, #0
    7728:	bf08      	it	eq
    772a:	f041 0101 	orreq.w	r1, r1, #1
    772e:	2900      	cmp	r1, #0
    7730:	d161      	bne.n	77f6 <fat_read_dir+0xe2>
        return 0;

    /* get current position of directory handle */
    struct fat_fs_struct* fs = dd->fs;
    7732:	6805      	ldr	r5, [r0, #0]
    const struct fat_header_struct* header = &fs->header;
    uint16_t cluster_size = header->cluster_size;
    7734:	8a6e      	ldrh	r6, [r5, #18]
    cluster_t cluster_num = dd->entry_cluster;
    7736:	f8b0 8030 	ldrh.w	r8, [r0, #48]	; 0x30
    uint16_t cluster_offset = dd->entry_offset;
    773a:	8e44      	ldrh	r4, [r0, #50]	; 0x32
    struct fat_read_dir_callback_arg arg;

    if(cluster_offset >= cluster_size)
    773c:	42a6      	cmp	r6, r4
    773e:	d804      	bhi.n	774a <fat_read_dir+0x36>
        /* The latest call hit the border of the last cluster in
         * the chain, but it still returned a directory entry.
         * So we now reset the handle and signal the caller the
         * end of the listing.
         */
        fat_reset_dir(dd);
    7740:	f7ff ffdc 	bl	76fc <fat_reset_dir>
        return 0;
    7744:	f04f 0000 	mov.w	r0, #0
    7748:	e05a      	b.n	7800 <fat_read_dir+0xec>
    }

    /* reset callback arguments */
    memset(&arg, 0, sizeof(arg));
    774a:	f04f 0100 	mov.w	r1, #0
    774e:	910c      	str	r1, [sp, #48]	; 0x30
    7750:	910d      	str	r1, [sp, #52]	; 0x34
    memset(dir_entry, 0, sizeof(*dir_entry));
    7752:	4638      	mov	r0, r7
    7754:	f04f 022c 	mov.w	r2, #44	; 0x2c
    7758:	f019 f840 	bl	207dc <memset>
    arg.dir_entry = dir_entry;
    775c:	970b      	str	r7, [sp, #44]	; 0x2c

    /* check if we read from the root directory */
    if(cluster_num == 0)
    775e:	f1b8 0f00 	cmp.w	r8, #0
    7762:	d139      	bne.n	77d8 <fat_read_dir+0xc4>
#if FAT_FAT32_SUPPORT
        if(fs->partition->type == PARTITION_TYPE_FAT32)
            cluster_num = header->root_dir_cluster;
        else
#endif
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
    7764:	696e      	ldr	r6, [r5, #20]
    7766:	69ab      	ldr	r3, [r5, #24]
    7768:	1af6      	subs	r6, r6, r3
    776a:	b2b6      	uxth	r6, r6
    776c:	e034      	b.n	77d8 <fat_read_dir+0xc4>
    /* read entries */
    uint8_t buffer[32];
    while(!arg.finished)
    {
        /* read directory entries up to the cluster border */
        uint16_t cluster_left = cluster_size - cluster_offset;
    776e:	ebc4 0906 	rsb	r9, r4, r6
    7772:	fa1f f989 	uxth.w	r9, r9
        offset_t pos = cluster_offset;
        if(cluster_num == 0)
    7776:	f1b8 0f00 	cmp.w	r8, #0
    777a:	d102      	bne.n	7782 <fat_read_dir+0x6e>
            pos += header->root_dir_offset;
    777c:	69a8      	ldr	r0, [r5, #24]
    777e:	1820      	adds	r0, r4, r0
    7780:	e004      	b.n	778c <fat_read_dir+0x78>
        else
            pos += fat_cluster_offset(fs, cluster_num);
    7782:	4628      	mov	r0, r5
    7784:	4641      	mov	r1, r8
    7786:	f7ff fa7f 	bl	6c88 <fat_cluster_offset>
    778a:	1900      	adds	r0, r0, r4

        arg.bytes_read = 0;
    778c:	f04f 0300 	mov.w	r3, #0
    7790:	930c      	str	r3, [sp, #48]	; 0x30
        if(!fs->partition->device_read_interval(pos,
    7792:	682b      	ldr	r3, [r5, #0]
    7794:	f8cd a000 	str.w	sl, [sp]
    7798:	aa0b      	add	r2, sp, #44	; 0x2c
    779a:	9201      	str	r2, [sp, #4]
    779c:	685f      	ldr	r7, [r3, #4]
    779e:	a903      	add	r1, sp, #12
    77a0:	f04f 0220 	mov.w	r2, #32
    77a4:	464b      	mov	r3, r9
    77a6:	47b8      	blx	r7
    77a8:	b340      	cbz	r0, 77fc <fat_read_dir+0xe8>
                                                fat_dir_entry_read_callback,
                                                &arg)
          )
            return 0;

        cluster_offset += arg.bytes_read;
    77aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    77ac:	18e4      	adds	r4, r4, r3
    77ae:	b2a4      	uxth	r4, r4

        if(cluster_offset >= cluster_size)
    77b0:	42a6      	cmp	r6, r4
    77b2:	d815      	bhi.n	77e0 <fat_read_dir+0xcc>
        {
            /* we reached the cluster border and switch to the next cluster */

            /* get number of next cluster */
            if((cluster_num = fat_get_next_cluster(fs, cluster_num)) != 0)
    77b4:	4628      	mov	r0, r5
    77b6:	4641      	mov	r1, r8
    77b8:	f7ff f954 	bl	6a64 <fat_get_next_cluster>
    77bc:	4680      	mov	r8, r0
    77be:	b940      	cbnz	r0, 77d2 <fat_read_dir+0xbe>
                cluster_offset = 0;
                continue;
            }

            /* we are at the end of the cluster chain */
            if(!arg.finished)
    77c0:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    77c4:	b983      	cbnz	r3, 77e8 <fat_read_dir+0xd4>
            {
                /* directory entry not found, reset directory handle */
                fat_reset_dir(dd);
    77c6:	4658      	mov	r0, fp
    77c8:	f7ff ff98 	bl	76fc <fat_reset_dir>
                return 0;
    77cc:	f04f 0000 	mov.w	r0, #0
    77d0:	e016      	b.n	7800 <fat_read_dir+0xec>
            /* we reached the cluster border and switch to the next cluster */

            /* get number of next cluster */
            if((cluster_num = fat_get_next_cluster(fs, cluster_num)) != 0)
            {
                cluster_offset = 0;
    77d2:	f04f 0400 	mov.w	r4, #0
    77d6:	e003      	b.n	77e0 <fat_read_dir+0xcc>
            pos += header->root_dir_offset;
        else
            pos += fat_cluster_offset(fs, cluster_num);

        arg.bytes_read = 0;
        if(!fs->partition->device_read_interval(pos,
    77d8:	f646 5a11 	movw	sl, #27921	; 0x6d11
    77dc:	f2c0 0a00 	movt	sl, #0
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
    }

    /* read entries */
    uint8_t buffer[32];
    while(!arg.finished)
    77e0:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    77e4:	2b00      	cmp	r3, #0
    77e6:	d0c2      	beq.n	776e <fat_read_dir+0x5a>

            break;
        }
    }

    dd->entry_cluster = cluster_num;
    77e8:	f8ab 8030 	strh.w	r8, [fp, #48]	; 0x30
    dd->entry_offset = cluster_offset;
    77ec:	f8ab 4032 	strh.w	r4, [fp, #50]	; 0x32

    return arg.finished;
    77f0:	f89d 0035 	ldrb.w	r0, [sp, #53]	; 0x35
    77f4:	e004      	b.n	7800 <fat_read_dir+0xec>
 * \see fat_reset_dir
 */
uint8_t fat_read_dir(struct fat_dir_struct* dd, struct fat_dir_entry_struct* dir_entry)
{
    if(!dd || !dir_entry)
        return 0;
    77f6:	f04f 0000 	mov.w	r0, #0
    77fa:	e001      	b.n	7800 <fat_read_dir+0xec>
                                                sizeof(buffer),
                                                cluster_left,
                                                fat_dir_entry_read_callback,
                                                &arg)
          )
            return 0;
    77fc:	f04f 0000 	mov.w	r0, #0

    dd->entry_cluster = cluster_num;
    dd->entry_offset = cluster_offset;

    return arg.finished;
}
    7800:	b00f      	add	sp, #60	; 0x3c
    7802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7806:	bf00      	nop

00007808 <fat_get_dir_entry_of_path>:
 * \param[out] dir_entry The directory entry to fill.
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_get_dir_entry_of_path(struct fat_fs_struct* fs, const char* path, struct fat_dir_entry_struct* dir_entry)
{
    7808:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    780c:	4614      	mov	r4, r2
    if(!fs || !path || path[0] == '\0' || !dir_entry)
    780e:	4682      	mov	sl, r0
    7810:	4688      	mov	r8, r1
    7812:	f1d1 0101 	rsbs	r1, r1, #1
    7816:	bf38      	it	cc
    7818:	2100      	movcc	r1, #0
    781a:	2800      	cmp	r0, #0
    781c:	bf08      	it	eq
    781e:	f041 0101 	orreq.w	r1, r1, #1
    7822:	2900      	cmp	r1, #0
    7824:	d16a      	bne.n	78fc <fat_get_dir_entry_of_path+0xf4>
    7826:	f898 3000 	ldrb.w	r3, [r8]
    782a:	f1d2 0201 	rsbs	r2, r2, #1
    782e:	bf38      	it	cc
    7830:	2200      	movcc	r2, #0
    7832:	2b00      	cmp	r3, #0
    7834:	bf08      	it	eq
    7836:	f042 0201 	orreq.w	r2, r2, #1
    783a:	2a00      	cmp	r2, #0
    783c:	d162      	bne.n	7904 <fat_get_dir_entry_of_path+0xfc>
        return 0;

    if(path[0] == '/')
    783e:	2b2f      	cmp	r3, #47	; 0x2f
        ++path;
    7840:	bf08      	it	eq
    7842:	f108 0801 	addeq.w	r8, r8, #1

    /* begin with the root directory */
    memset(dir_entry, 0, sizeof(*dir_entry));
    7846:	4620      	mov	r0, r4
    7848:	f04f 0100 	mov.w	r1, #0
    784c:	f04f 022c 	mov.w	r2, #44	; 0x2c
    7850:	f018 ffc4 	bl	207dc <memset>
    dir_entry->attributes = FAT_ATTRIB_DIR;
    7854:	f04f 0310 	mov.w	r3, #16
    7858:	f884 3020 	strb.w	r3, [r4, #32]

    while(1)
    {
        if(path[0] == '\0')
    785c:	f898 3000 	ldrb.w	r3, [r8]
    7860:	2b00      	cmp	r3, #0
    7862:	d053      	beq.n	790c <fat_get_dir_entry_of_path+0x104>
        struct fat_dir_struct* dd = fat_open_dir(fs, dir_entry);
        if(!dd)
            break;

        /* extract the next hierarchy we will search for */
        const char* sub_path = strchr(path, '/');
    7864:	f04f 0b2f 	mov.w	fp, #47	; 0x2f
    while(1)
    {
        if(path[0] == '\0')
            return 1;

        struct fat_dir_struct* dd = fat_open_dir(fs, dir_entry);
    7868:	4650      	mov	r0, sl
    786a:	4621      	mov	r1, r4
    786c:	f7ff feea 	bl	7644 <fat_open_dir>
        if(!dd)
    7870:	4606      	mov	r6, r0
    7872:	2800      	cmp	r0, #0
    7874:	d04e      	beq.n	7914 <fat_get_dir_entry_of_path+0x10c>
            break;

        /* extract the next hierarchy we will search for */
        const char* sub_path = strchr(path, '/');
    7876:	4640      	mov	r0, r8
    7878:	4659      	mov	r1, fp
    787a:	f019 fbcb 	bl	21014 <strchr>
        uint8_t length_to_sep;
        if(sub_path)
    787e:	b128      	cbz	r0, 788c <fat_get_dir_entry_of_path+0x84>
        {
            length_to_sep = sub_path - path;
    7880:	ebc8 0700 	rsb	r7, r8, r0
    7884:	b2ff      	uxtb	r7, r7
            ++sub_path;
    7886:	f100 0901 	add.w	r9, r0, #1
    788a:	e022      	b.n	78d2 <fat_get_dir_entry_of_path+0xca>
        }
        else
        {
            length_to_sep = strlen(path);
    788c:	4640      	mov	r0, r8
    788e:	f019 fd85 	bl	2139c <strlen>
    7892:	b2c7      	uxtb	r7, r0
            sub_path = path + length_to_sep;
    7894:	eb08 0907 	add.w	r9, r8, r7
    7898:	e01b      	b.n	78d2 <fat_get_dir_entry_of_path+0xca>
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    789a:	4620      	mov	r0, r4
    789c:	f019 fd7e 	bl	2139c <strlen>
    78a0:	4605      	mov	r5, r0
    78a2:	42b8      	cmp	r0, r7
    78a4:	d115      	bne.n	78d2 <fat_get_dir_entry_of_path+0xca>
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
    78a6:	4640      	mov	r0, r8
    78a8:	4621      	mov	r1, r4
    78aa:	462a      	mov	r2, r5
    78ac:	f019 fda6 	bl	213fc <strncmp>
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    78b0:	b978      	cbnz	r0, 78d2 <fat_get_dir_entry_of_path+0xca>
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
                continue;

            fat_close_dir(dd);
    78b2:	4630      	mov	r0, r6
    78b4:	f7ff ff1c 	bl	76f0 <fat_close_dir>
            dd = 0;

            if(path[length_to_sep] == '\0')
    78b8:	f818 3005 	ldrb.w	r3, [r8, r5]
    78bc:	2b00      	cmp	r3, #0
    78be:	d02d      	beq.n	791c <fat_get_dir_entry_of_path+0x114>
                /* we iterated through the whole path and have found the file */
                return 1;

            if(dir_entry->attributes & FAT_ATTRIB_DIR)
    78c0:	f894 3020 	ldrb.w	r3, [r4, #32]
    78c4:	f013 0f10 	tst.w	r3, #16
    78c8:	d10a      	bne.n	78e0 <fat_get_dir_entry_of_path+0xd8>
                path = sub_path;
                break;
            }

            /* a parent of the file exists, but not the file itself */
            return 0;
    78ca:	f04f 0000 	mov.w	r0, #0
    78ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            length_to_sep = strlen(path);
            sub_path = path + length_to_sep;
        }
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
    78d2:	4630      	mov	r0, r6
    78d4:	4621      	mov	r1, r4
    78d6:	f7ff ff1d 	bl	7714 <fat_read_dir>
    78da:	2800      	cmp	r0, #0
    78dc:	d1dd      	bne.n	789a <fat_get_dir_entry_of_path+0x92>
    78de:	e002      	b.n	78e6 <fat_get_dir_entry_of_path+0xde>
                return 1;

            if(dir_entry->attributes & FAT_ATTRIB_DIR)
            {
                /* we found a parent directory of the file we are searching for */
                path = sub_path;
    78e0:	46c8      	mov	r8, r9
            if((strlen(dir_entry->long_name) != length_to_sep ||
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
                continue;

            fat_close_dir(dd);
            dd = 0;
    78e2:	f04f 0600 	mov.w	r6, #0

            /* a parent of the file exists, but not the file itself */
            return 0;
        }

        fat_close_dir(dd);
    78e6:	4630      	mov	r0, r6
    78e8:	f7ff ff02 	bl	76f0 <fat_close_dir>
    memset(dir_entry, 0, sizeof(*dir_entry));
    dir_entry->attributes = FAT_ATTRIB_DIR;

    while(1)
    {
        if(path[0] == '\0')
    78ec:	f898 3000 	ldrb.w	r3, [r8]
    78f0:	2b00      	cmp	r3, #0
    78f2:	d1b9      	bne.n	7868 <fat_get_dir_entry_of_path+0x60>
            return 1;
    78f4:	f04f 0001 	mov.w	r0, #1
    78f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 * \see fat_read_dir
 */
uint8_t fat_get_dir_entry_of_path(struct fat_fs_struct* fs, const char* path, struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !path || path[0] == '\0' || !dir_entry)
        return 0;
    78fc:	f04f 0000 	mov.w	r0, #0
    7900:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7904:	f04f 0000 	mov.w	r0, #0
    7908:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dir_entry->attributes = FAT_ATTRIB_DIR;

    while(1)
    {
        if(path[0] == '\0')
            return 1;
    790c:	f04f 0001 	mov.w	r0, #1
    7910:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        }

        fat_close_dir(dd);
    }
    
    return 0;
    7914:	f04f 0000 	mov.w	r0, #0
    7918:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            fat_close_dir(dd);
            dd = 0;

            if(path[length_to_sep] == '\0')
                /* we iterated through the whole path and have found the file */
                return 1;
    791c:	f04f 0001 	mov.w	r0, #1

        fat_close_dir(dd);
    }
    
    return 0;
}
    7920:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00007924 <fat_create_file>:
 * \param[out] dir_entry The directory entry to fill for the new file.
 * \returns 0 on failure, 1 on success.
 * \see fat_delete_file
 */
uint8_t fat_create_file(struct fat_dir_struct* parent, const char* file, struct fat_dir_entry_struct* dir_entry)
{
    7924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7926:	4614      	mov	r4, r2
    if(!parent || !file || !file[0] || !dir_entry)
    7928:	4606      	mov	r6, r0
    792a:	460d      	mov	r5, r1
    792c:	f1d1 0101 	rsbs	r1, r1, #1
    7930:	bf38      	it	cc
    7932:	2100      	movcc	r1, #0
    7934:	2800      	cmp	r0, #0
    7936:	bf08      	it	eq
    7938:	f041 0101 	orreq.w	r1, r1, #1
    793c:	2900      	cmp	r1, #0
    793e:	d138      	bne.n	79b2 <fat_create_file+0x8e>
    7940:	782a      	ldrb	r2, [r5, #0]
    7942:	f1d4 0301 	rsbs	r3, r4, #1
    7946:	bf38      	it	cc
    7948:	2300      	movcc	r3, #0
    794a:	2a00      	cmp	r2, #0
    794c:	bf08      	it	eq
    794e:	f043 0301 	orreq.w	r3, r3, #1
    7952:	2b00      	cmp	r3, #0
    7954:	d130      	bne.n	79b8 <fat_create_file+0x94>
        return 0;

    /* check if the file already exists */
    while(1)
    {
        if(!fat_read_dir(parent, dir_entry))
    7956:	4630      	mov	r0, r6
    7958:	4621      	mov	r1, r4
    795a:	f7ff fedb 	bl	7714 <fat_read_dir>
    795e:	b158      	cbz	r0, 7978 <fat_create_file+0x54>
            break;

        if(strcmp(file, dir_entry->long_name) == 0)
    7960:	4628      	mov	r0, r5
    7962:	4621      	mov	r1, r4
    7964:	f019 fbce 	bl	21104 <strcmp>
    7968:	2800      	cmp	r0, #0
    796a:	d1f4      	bne.n	7956 <fat_create_file+0x32>
        {
            fat_reset_dir(parent);
    796c:	4630      	mov	r0, r6
    796e:	f7ff fec5 	bl	76fc <fat_reset_dir>
            return 0;
    7972:	f04f 0000 	mov.w	r0, #0
    7976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        }
    }

    struct fat_fs_struct* fs = parent->fs;
    7978:	6837      	ldr	r7, [r6, #0]

    /* prepare directory entry with values already known */
    memset(dir_entry, 0, sizeof(*dir_entry));
    797a:	4620      	mov	r0, r4
    797c:	f04f 0100 	mov.w	r1, #0
    7980:	f04f 022c 	mov.w	r2, #44	; 0x2c
    7984:	f018 ff2a 	bl	207dc <memset>
    strncpy(dir_entry->long_name, file, sizeof(dir_entry->long_name) - 1);
    7988:	4620      	mov	r0, r4
    798a:	4629      	mov	r1, r5
    798c:	f04f 021f 	mov.w	r2, #31
    7990:	f019 fd88 	bl	214a4 <strncpy>

    /* find place where to store directory entry */
    if(!(dir_entry->entry_offset = fat_find_offset_for_dir_entry(fs, parent, dir_entry)))
    7994:	4638      	mov	r0, r7
    7996:	4631      	mov	r1, r6
    7998:	4622      	mov	r2, r4
    799a:	f7ff fa97 	bl	6ecc <fat_find_offset_for_dir_entry>
    799e:	62a0      	str	r0, [r4, #40]	; 0x28
    79a0:	b168      	cbz	r0, 79be <fat_create_file+0x9a>
        return 0;
    
    /* write directory entry to disk */
    if(!fat_write_dir_entry(fs, dir_entry))
    79a2:	4638      	mov	r0, r7
    79a4:	4621      	mov	r1, r4
    79a6:	f7ff fb1b 	bl	6fe0 <fat_write_dir_entry>
 * \see fat_delete_file
 */
uint8_t fat_create_file(struct fat_dir_struct* parent, const char* file, struct fat_dir_entry_struct* dir_entry)
{
    if(!parent || !file || !file[0] || !dir_entry)
        return 0;
    79aa:	3000      	adds	r0, #0
    79ac:	bf18      	it	ne
    79ae:	2001      	movne	r0, #1
    79b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    79b2:	f04f 0000 	mov.w	r0, #0
    79b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    79b8:	f04f 0000 	mov.w	r0, #0
    79bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    memset(dir_entry, 0, sizeof(*dir_entry));
    strncpy(dir_entry->long_name, file, sizeof(dir_entry->long_name) - 1);

    /* find place where to store directory entry */
    if(!(dir_entry->entry_offset = fat_find_offset_for_dir_entry(fs, parent, dir_entry)))
        return 0;
    79be:	f04f 0000 	mov.w	r0, #0
    /* write directory entry to disk */
    if(!fat_write_dir_entry(fs, dir_entry))
        return 0;
    
    return 1;
}
    79c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000079c4 <fat_delete_file>:
 * \param[in] dir_entry The directory entry of the file to delete.
 * \returns 0 on failure, 1 on success.
 * \see fat_create_file
 */
uint8_t fat_delete_file(struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
    79c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    79c8:	b084      	sub	sp, #16
    if(!fs || !dir_entry)
    79ca:	4605      	mov	r5, r0
    79cc:	4688      	mov	r8, r1
    79ce:	f1d1 0101 	rsbs	r1, r1, #1
    79d2:	bf38      	it	cc
    79d4:	2100      	movcc	r1, #0
    79d6:	2800      	cmp	r0, #0
    79d8:	bf08      	it	eq
    79da:	f041 0101 	orreq.w	r1, r1, #1
        return 0;
    79de:	f04f 0000 	mov.w	r0, #0
 * \returns 0 on failure, 1 on success.
 * \see fat_create_file
 */
uint8_t fat_delete_file(struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry)
    79e2:	2900      	cmp	r1, #0
    79e4:	d132      	bne.n	7a4c <fat_delete_file+0x88>
        return 0;

    /* get offset of the file's directory entry */
    offset_t dir_entry_offset = dir_entry->entry_offset;
    79e6:	f8d8 4028 	ldr.w	r4, [r8, #40]	; 0x28
    if(!dir_entry_offset)
        return 0;
    79ea:	f04f 0000 	mov.w	r0, #0
    if(!fs || !dir_entry)
        return 0;

    /* get offset of the file's directory entry */
    offset_t dir_entry_offset = dir_entry->entry_offset;
    if(!dir_entry_offset)
    79ee:	2c00      	cmp	r4, #0
    79f0:	d02c      	beq.n	7a4c <fat_delete_file+0x88>
#if FAT_LFN_SUPPORT
    uint8_t buffer[12];
    while(1)
    {
        /* read directory entry */
        if(!fs->partition->device_read(dir_entry_offset, buffer, sizeof(buffer)))
    79f2:	f04f 060c 	mov.w	r6, #12
            return 0;
        
        /* mark the directory entry as deleted */
        buffer[0] = FAT_DIRENTRY_DELETED;
    79f6:	f04f 07e5 	mov.w	r7, #229	; 0xe5
#if FAT_LFN_SUPPORT
    uint8_t buffer[12];
    while(1)
    {
        /* read directory entry */
        if(!fs->partition->device_read(dir_entry_offset, buffer, sizeof(buffer)))
    79fa:	682b      	ldr	r3, [r5, #0]
    79fc:	681b      	ldr	r3, [r3, #0]
    79fe:	4620      	mov	r0, r4
    7a00:	a901      	add	r1, sp, #4
    7a02:	4632      	mov	r2, r6
    7a04:	4798      	blx	r3
    7a06:	b1e0      	cbz	r0, 7a42 <fat_delete_file+0x7e>
            return 0;
        
        /* mark the directory entry as deleted */
        buffer[0] = FAT_DIRENTRY_DELETED;
    7a08:	f88d 7004 	strb.w	r7, [sp, #4]
        
        /* write back entry */
        if(!fs->partition->device_write(dir_entry_offset, buffer, sizeof(buffer)))
    7a0c:	682b      	ldr	r3, [r5, #0]
    7a0e:	689b      	ldr	r3, [r3, #8]
    7a10:	4620      	mov	r0, r4
    7a12:	a901      	add	r1, sp, #4
    7a14:	4632      	mov	r2, r6
    7a16:	4798      	blx	r3
    7a18:	b1b0      	cbz	r0, 7a48 <fat_delete_file+0x84>
            return 0;

        /* check if we deleted the whole entry */
        if(buffer[11] != 0x0f)
    7a1a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    7a1e:	2b0f      	cmp	r3, #15
    7a20:	d102      	bne.n	7a28 <fat_delete_file+0x64>
            break;

        dir_entry_offset += 32;
    7a22:	f104 0420 	add.w	r4, r4, #32
    }
    7a26:	e7e8      	b.n	79fa <fat_delete_file+0x36>
#endif

    /* We deleted the directory entry. The next thing to do is
     * marking all occupied clusters as free.
     */
    return (dir_entry->cluster == 0 || fat_free_clusters(fs, dir_entry->cluster));
    7a28:	f8b8 1022 	ldrh.w	r1, [r8, #34]	; 0x22
    7a2c:	f04f 0001 	mov.w	r0, #1
    7a30:	b129      	cbz	r1, 7a3e <fat_delete_file+0x7a>
    7a32:	4628      	mov	r0, r5
    7a34:	f7ff f854 	bl	6ae0 <fat_free_clusters>
    7a38:	3000      	adds	r0, #0
    7a3a:	bf18      	it	ne
    7a3c:	2001      	movne	r0, #1
    7a3e:	b2c0      	uxtb	r0, r0
    7a40:	e004      	b.n	7a4c <fat_delete_file+0x88>
    uint8_t buffer[12];
    while(1)
    {
        /* read directory entry */
        if(!fs->partition->device_read(dir_entry_offset, buffer, sizeof(buffer)))
            return 0;
    7a42:	f04f 0000 	mov.w	r0, #0
    7a46:	e001      	b.n	7a4c <fat_delete_file+0x88>
        /* mark the directory entry as deleted */
        buffer[0] = FAT_DIRENTRY_DELETED;
        
        /* write back entry */
        if(!fs->partition->device_write(dir_entry_offset, buffer, sizeof(buffer)))
            return 0;
    7a48:	f04f 0000 	mov.w	r0, #0

    /* We deleted the directory entry. The next thing to do is
     * marking all occupied clusters as free.
     */
    return (dir_entry->cluster == 0 || fat_free_clusters(fs, dir_entry->cluster));
}
    7a4c:	b004      	add	sp, #16
    7a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7a52:	bf00      	nop

00007a54 <fat_get_file_size>:
}
#endif

offset_t fat_get_file_size(const struct fat_file_struct* fd){
	return fd->dir_entry.file_size;
}
    7a54:	6a80      	ldr	r0, [r0, #40]	; 0x28
    7a56:	4770      	bx	lr

00007a58 <fat_get_fs_size>:
 * \param[in] fs The filesystem on which to operate.
 * \returns 0 on failure, the filesystem size in bytes otherwise.
 */
offset_t fat_get_fs_size(const struct fat_fs_struct* fs)
{
    if(!fs)
    7a58:	4603      	mov	r3, r0
    7a5a:	b140      	cbz	r0, 7a6e <fat_get_fs_size+0x16>
#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
        return (offset_t) (fs->header.fat_size / 4 - 2) * fs->header.cluster_size;
    else
#endif
        return (offset_t) (fs->header.fat_size / 2 - 2) * fs->header.cluster_size;
    7a5c:	68c0      	ldr	r0, [r0, #12]
    7a5e:	ea4f 0050 	mov.w	r0, r0, lsr #1
    7a62:	f1a0 0002 	sub.w	r0, r0, #2
    7a66:	8a5b      	ldrh	r3, [r3, #18]
    7a68:	fb03 f000 	mul.w	r0, r3, r0
    7a6c:	4770      	bx	lr
 * \returns 0 on failure, the filesystem size in bytes otherwise.
 */
offset_t fat_get_fs_size(const struct fat_fs_struct* fs)
{
    if(!fs)
        return 0;
    7a6e:	f04f 0000 	mov.w	r0, #0
    if(fs->partition->type == PARTITION_TYPE_FAT32)
        return (offset_t) (fs->header.fat_size / 4 - 2) * fs->header.cluster_size;
    else
#endif
        return (offset_t) (fs->header.fat_size / 2 - 2) * fs->header.cluster_size;
}
    7a72:	4770      	bx	lr

00007a74 <partition_open>:
 *                  as a single partition (e.g. for "super floppy" use).
 * \returns 0 on failure, a partition descriptor on success.
 * \see partition_close
 */
struct partition_struct* partition_open(device_read_t device_read, device_read_interval_t device_read_interval, device_write_t device_write, device_write_interval_t device_write_interval, int8_t index)
{
    7a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7a78:	b084      	sub	sp, #16
    7a7a:	4617      	mov	r7, r2
    7a7c:	4698      	mov	r8, r3
    7a7e:	f99d 4028 	ldrsb.w	r4, [sp, #40]	; 0x28
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index >= 4)
    7a82:	4605      	mov	r5, r0
    7a84:	460e      	mov	r6, r1
    7a86:	f1d1 0101 	rsbs	r1, r1, #1
    7a8a:	bf38      	it	cc
    7a8c:	2100      	movcc	r1, #0
    7a8e:	2800      	cmp	r0, #0
    7a90:	bf08      	it	eq
    7a92:	f041 0101 	orreq.w	r1, r1, #1
        return 0;
    7a96:	f04f 0000 	mov.w	r0, #0
struct partition_struct* partition_open(device_read_t device_read, device_read_interval_t device_read_interval, device_write_t device_write, device_write_interval_t device_write_interval, int8_t index)
{
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index >= 4)
    7a9a:	2900      	cmp	r1, #0
    7a9c:	d163      	bne.n	7b66 <partition_open+0xf2>
    7a9e:	2c03      	cmp	r4, #3
        return 0;
    7aa0:	bfc8      	it	gt
    7aa2:	2000      	movgt	r0, #0
struct partition_struct* partition_open(device_read_t device_read, device_read_interval_t device_read_interval, device_write_t device_write, device_write_interval_t device_write_interval, int8_t index)
{
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index >= 4)
    7aa4:	dc5f      	bgt.n	7b66 <partition_open+0xf2>
        return 0;

    if(index >= 0)
    7aa6:	2c00      	cmp	r4, #0
    7aa8:	db0f      	blt.n	7aca <partition_open+0x56>
    {
        /* read specified partition table index */
        if(!device_read(0x01be + index * 0x10, buffer, sizeof(buffer)))
    7aaa:	ea4f 1004 	mov.w	r0, r4, lsl #4
    7aae:	f500 70df 	add.w	r0, r0, #446	; 0x1be
    7ab2:	4669      	mov	r1, sp
    7ab4:	f04f 0210 	mov.w	r2, #16
    7ab8:	47a8      	blx	r5
    7aba:	2800      	cmp	r0, #0
    7abc:	d051      	beq.n	7b62 <partition_open+0xee>
            return 0;

        /* abort on empty partition entry */
        if(buffer[4] == 0x00)
    7abe:	f89d 3004 	ldrb.w	r3, [sp, #4]
            return 0;
    7ac2:	f04f 0000 	mov.w	r0, #0
        /* read specified partition table index */
        if(!device_read(0x01be + index * 0x10, buffer, sizeof(buffer)))
            return 0;

        /* abort on empty partition entry */
        if(buffer[4] == 0x00)
    7ac6:	2b00      	cmp	r3, #0
    7ac8:	d04d      	beq.n	7b66 <partition_open+0xf2>
#else
    new_partition = partition_handles;
    uint8_t i;
    for(i = 0; i < PARTITION_COUNT; ++i)
    {
        if(new_partition->type == PARTITION_TYPE_FREE)
    7aca:	f240 639c 	movw	r3, #1692	; 0x69c
    7ace:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7ad2:	7c1b      	ldrb	r3, [r3, #16]
            break;

        ++new_partition;
    }
    if(i >= PARTITION_COUNT)
        return 0;
    7ad4:	f04f 0000 	mov.w	r0, #0
#else
    new_partition = partition_handles;
    uint8_t i;
    for(i = 0; i < PARTITION_COUNT; ++i)
    {
        if(new_partition->type == PARTITION_TYPE_FREE)
    7ad8:	2b00      	cmp	r3, #0
    7ada:	d144      	bne.n	7b66 <partition_open+0xf2>
#if USE_DYNAMIC_MEMORY
    new_partition = malloc(sizeof(*new_partition));
    if(!new_partition)
        return 0;
#else
    new_partition = partition_handles;
    7adc:	f240 639c 	movw	r3, #1692	; 0x69c
    7ae0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    }
    if(i >= PARTITION_COUNT)
        return 0;
#endif

    memset(new_partition, 0, sizeof(*new_partition));
    7ae4:	f04f 0100 	mov.w	r1, #0
    7ae8:	f103 020c 	add.w	r2, r3, #12
    7aec:	f842 1b04 	str.w	r1, [r2], #4
    7af0:	f842 1b04 	str.w	r1, [r2], #4
    7af4:	f842 1b04 	str.w	r1, [r2], #4
    7af8:	6011      	str	r1, [r2, #0]

    /* fill partition descriptor */
    new_partition->device_read = device_read;
    7afa:	601d      	str	r5, [r3, #0]
    new_partition->device_read_interval = device_read_interval;
    7afc:	605e      	str	r6, [r3, #4]
    new_partition->device_write = device_write;
    7afe:	609f      	str	r7, [r3, #8]
    new_partition->device_write_interval = device_write_interval;
    7b00:	f8c3 800c 	str.w	r8, [r3, #12]

    if(index >= 0)
    7b04:	428c      	cmp	r4, r1
    7b06:	db24      	blt.n	7b52 <partition_open+0xde>
    {
        new_partition->type = buffer[4];
    7b08:	4618      	mov	r0, r3
    7b0a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7b0e:	7403      	strb	r3, [r0, #16]
        new_partition->offset = ((uint32_t) buffer[8]) |
                                ((uint32_t) buffer[9] << 8) |
    7b10:	f89d 2009 	ldrb.w	r2, [sp, #9]
                                ((uint32_t) buffer[10] << 16) |
    7b14:	f89d 300a 	ldrb.w	r3, [sp, #10]
    7b18:	ea4f 4303 	mov.w	r3, r3, lsl #16
    new_partition->device_write_interval = device_write_interval;

    if(index >= 0)
    {
        new_partition->type = buffer[4];
        new_partition->offset = ((uint32_t) buffer[8]) |
    7b1c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    7b20:	f89d 2008 	ldrb.w	r2, [sp, #8]
                                ((uint32_t) buffer[9] << 8) |
    7b24:	4313      	orrs	r3, r2
                                ((uint32_t) buffer[10] << 16) |
                                ((uint32_t) buffer[11] << 24);
    7b26:	f89d 200b 	ldrb.w	r2, [sp, #11]
    if(index >= 0)
    {
        new_partition->type = buffer[4];
        new_partition->offset = ((uint32_t) buffer[8]) |
                                ((uint32_t) buffer[9] << 8) |
                                ((uint32_t) buffer[10] << 16) |
    7b2a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    new_partition->device_write_interval = device_write_interval;

    if(index >= 0)
    {
        new_partition->type = buffer[4];
        new_partition->offset = ((uint32_t) buffer[8]) |
    7b2e:	6143      	str	r3, [r0, #20]
                                ((uint32_t) buffer[9] << 8) |
                                ((uint32_t) buffer[10] << 16) |
                                ((uint32_t) buffer[11] << 24);
        new_partition->length = ((uint32_t) buffer[12]) |
                                ((uint32_t) buffer[13] << 8) |
    7b30:	f89d 200d 	ldrb.w	r2, [sp, #13]
                                ((uint32_t) buffer[14] << 16) |
    7b34:	f89d 300e 	ldrb.w	r3, [sp, #14]
    7b38:	ea4f 4303 	mov.w	r3, r3, lsl #16
        new_partition->type = buffer[4];
        new_partition->offset = ((uint32_t) buffer[8]) |
                                ((uint32_t) buffer[9] << 8) |
                                ((uint32_t) buffer[10] << 16) |
                                ((uint32_t) buffer[11] << 24);
        new_partition->length = ((uint32_t) buffer[12]) |
    7b3c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    7b40:	f89d 200c 	ldrb.w	r2, [sp, #12]
                                ((uint32_t) buffer[13] << 8) |
    7b44:	4313      	orrs	r3, r2
                                ((uint32_t) buffer[14] << 16) |
                                ((uint32_t) buffer[15] << 24);
    7b46:	f89d 200f 	ldrb.w	r2, [sp, #15]
                                ((uint32_t) buffer[9] << 8) |
                                ((uint32_t) buffer[10] << 16) |
                                ((uint32_t) buffer[11] << 24);
        new_partition->length = ((uint32_t) buffer[12]) |
                                ((uint32_t) buffer[13] << 8) |
                                ((uint32_t) buffer[14] << 16) |
    7b4a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
        new_partition->type = buffer[4];
        new_partition->offset = ((uint32_t) buffer[8]) |
                                ((uint32_t) buffer[9] << 8) |
                                ((uint32_t) buffer[10] << 16) |
                                ((uint32_t) buffer[11] << 24);
        new_partition->length = ((uint32_t) buffer[12]) |
    7b4e:	6183      	str	r3, [r0, #24]
    7b50:	e009      	b.n	7b66 <partition_open+0xf2>
                                ((uint32_t) buffer[14] << 16) |
                                ((uint32_t) buffer[15] << 24);
    }
    else
    {
        new_partition->type = 0xff;
    7b52:	f240 609c 	movw	r0, #1692	; 0x69c
    7b56:	f2c1 0000 	movt	r0, #4096	; 0x1000
    7b5a:	f04f 03ff 	mov.w	r3, #255	; 0xff
    7b5e:	7403      	strb	r3, [r0, #16]
    7b60:	e001      	b.n	7b66 <partition_open+0xf2>

    if(index >= 0)
    {
        /* read specified partition table index */
        if(!device_read(0x01be + index * 0x10, buffer, sizeof(buffer)))
            return 0;
    7b62:	f04f 0000 	mov.w	r0, #0
    {
        new_partition->type = 0xff;
    }

    return new_partition;
}
    7b66:	b004      	add	sp, #16
    7b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007b6c <partition_close>:
 * \returns 0 on failure, 1 on success.
 * \see partition_open
 */
uint8_t partition_close(struct partition_struct* partition)
{
    if(!partition)
    7b6c:	b128      	cbz	r0, 7b7a <partition_close+0xe>

    /* destroy partition descriptor */
#if USE_DYNAMIC_MEMORY
    free(partition);
#else
    partition->type = PARTITION_TYPE_FREE;
    7b6e:	f04f 0200 	mov.w	r2, #0
    7b72:	7402      	strb	r2, [r0, #16]
#endif

    return 1;
    7b74:	f04f 0001 	mov.w	r0, #1
    7b78:	4770      	bx	lr
 * \see partition_open
 */
uint8_t partition_close(struct partition_struct* partition)
{
    if(!partition)
        return 0;
    7b7a:	f04f 0000 	mov.w	r0, #0
#else
    partition->type = PARTITION_TYPE_FREE;
#endif

    return 1;
}
    7b7e:	4770      	bx	lr

00007b80 <sd_raw_send_byte>:
 *
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    7b80:	b500      	push	{lr}
    7b82:	b087      	sub	sp, #28
	uint8_t tx_buf[0];
	tx_buf[0] = b;
    7b84:	f88d 0018 	strb.w	r0, [sp, #24]
    SPI_DATA_SETUP_Type  xferConfig;
	xferConfig.tx_data = tx_buf;
    7b88:	ab06      	add	r3, sp, #24
    7b8a:	9301      	str	r3, [sp, #4]
    xferConfig.length = 1;
    7b8c:	f04f 0301 	mov.w	r3, #1
    7b90:	9303      	str	r3, [sp, #12]
	SPI_ReadWrite((LPC_SPI_TypeDef *)LPC_SPI, &xferConfig, SPI_TRANSFER_POLLING);
    7b92:	f04f 0000 	mov.w	r0, #0
    7b96:	f2c4 0002 	movt	r0, #16386	; 0x4002
    7b9a:	a901      	add	r1, sp, #4
    7b9c:	f04f 0200 	mov.w	r2, #0
    7ba0:	f7fc f85e 	bl	3c60 <SPI_ReadWrite>
//    SPDR = b;
    /* wait for byte to be shifted out */
//    while(!(SPSR & (1 << SPIF)));
//    SPSR &= ~(1 << SPIF);
}
    7ba4:	b007      	add	sp, #28
    7ba6:	bd00      	pop	{pc}

00007ba8 <sd_raw_rec_byte>:
 *
 * \returns The byte which should be read.
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    7ba8:	b500      	push	{lr}
    7baa:	b087      	sub	sp, #28
	uint8_t rx_buf[0];
    SPI_DATA_SETUP_Type  xferConfig;
	xferConfig.rx_data = rx_buf;
    7bac:	ab06      	add	r3, sp, #24
    7bae:	9302      	str	r3, [sp, #8]
    xferConfig.length = 1;
    7bb0:	f04f 0301 	mov.w	r3, #1
    7bb4:	9303      	str	r3, [sp, #12]
	SPI_ReadWrite((LPC_SPI_TypeDef *)LPC_SPI, &xferConfig, SPI_TRANSFER_POLLING);
    7bb6:	f04f 0000 	mov.w	r0, #0
    7bba:	f2c4 0002 	movt	r0, #16386	; 0x4002
    7bbe:	a901      	add	r1, sp, #4
    7bc0:	f04f 0200 	mov.w	r2, #0
    7bc4:	f7fc f84c 	bl	3c60 <SPI_ReadWrite>
    /* send dummy data for receiving some */
//    SPDR = 0xff;
//    while(!(SPSR & (1 << SPIF)));
//    SPSR &= ~(1 << SPIF);
//    return SPDR;
}
    7bc8:	f89d 0018 	ldrb.w	r0, [sp, #24]
    7bcc:	b007      	add	sp, #28
    7bce:	bd00      	pop	{pc}

00007bd0 <sd_raw_send_command>:
 * \param[in] command The command to send.
 * \param[in] arg The argument for command.
 * \returns The command answer.
 */
uint8_t sd_raw_send_command(uint8_t command, uint32_t arg)
{
    7bd0:	b538      	push	{r3, r4, r5, lr}
    7bd2:	4605      	mov	r5, r0
    7bd4:	460c      	mov	r4, r1
    uint8_t response;

    /* wait some clock cycles */
    sd_raw_rec_byte();
    7bd6:	f7ff ffe7 	bl	7ba8 <sd_raw_rec_byte>

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
    7bda:	f045 0040 	orr.w	r0, r5, #64	; 0x40
    7bde:	f7ff ffcf 	bl	7b80 <sd_raw_send_byte>
    sd_raw_send_byte((arg >> 24) & 0xff);
    7be2:	ea4f 6014 	mov.w	r0, r4, lsr #24
    7be6:	f7ff ffcb 	bl	7b80 <sd_raw_send_byte>
    sd_raw_send_byte((arg >> 16) & 0xff);
    7bea:	f3c4 4007 	ubfx	r0, r4, #16, #8
    7bee:	f7ff ffc7 	bl	7b80 <sd_raw_send_byte>
    sd_raw_send_byte((arg >> 8) & 0xff);
    7bf2:	f3c4 2007 	ubfx	r0, r4, #8, #8
    7bf6:	f7ff ffc3 	bl	7b80 <sd_raw_send_byte>
    sd_raw_send_byte((arg >> 0) & 0xff);
    7bfa:	b2e0      	uxtb	r0, r4
    7bfc:	f7ff ffc0 	bl	7b80 <sd_raw_send_byte>
    switch(command)
    7c00:	b115      	cbz	r5, 7c08 <sd_raw_send_command+0x38>
    7c02:	2d08      	cmp	r5, #8
    7c04:	d10c      	bne.n	7c20 <sd_raw_send_command+0x50>
    7c06:	e006      	b.n	7c16 <sd_raw_send_command+0x46>
    {
        case CMD_GO_IDLE_STATE:
           sd_raw_send_byte(0x95);
    7c08:	f04f 0095 	mov.w	r0, #149	; 0x95
    7c0c:	f7ff ffb8 	bl	7b80 <sd_raw_send_byte>
 * \param[in] command The command to send.
 * \param[in] arg The argument for command.
 * \returns The command answer.
 */
uint8_t sd_raw_send_command(uint8_t command, uint32_t arg)
{
    7c10:	f04f 040a 	mov.w	r4, #10
    7c14:	e009      	b.n	7c2a <sd_raw_send_command+0x5a>
    {
        case CMD_GO_IDLE_STATE:
           sd_raw_send_byte(0x95);
           break;
        case CMD_SEND_IF_COND:
           sd_raw_send_byte(0x87);
    7c16:	f04f 0087 	mov.w	r0, #135	; 0x87
    7c1a:	f7ff ffb1 	bl	7b80 <sd_raw_send_byte>
           break;
    7c1e:	e7f7      	b.n	7c10 <sd_raw_send_command+0x40>
        default:
           sd_raw_send_byte(0xff);
    7c20:	f04f 00ff 	mov.w	r0, #255	; 0xff
    7c24:	f7ff ffac 	bl	7b80 <sd_raw_send_byte>
           break;
    7c28:	e7f2      	b.n	7c10 <sd_raw_send_command+0x40>
    
    /* receive response */
    uint8_t i;
    for(i = 0; i < 10; ++i)
    {
        response = sd_raw_rec_byte();
    7c2a:	f7ff ffbd 	bl	7ba8 <sd_raw_rec_byte>
        if(response != 0xff)
    7c2e:	28ff      	cmp	r0, #255	; 0xff
    7c30:	d104      	bne.n	7c3c <sd_raw_send_command+0x6c>
    7c32:	f104 34ff 	add.w	r4, r4, #4294967295
    7c36:	b2e4      	uxtb	r4, r4
           break;
    }
    
    /* receive response */
    uint8_t i;
    for(i = 0; i < 10; ++i)
    7c38:	2c00      	cmp	r4, #0
    7c3a:	d1f6      	bne.n	7c2a <sd_raw_send_command+0x5a>
        if(response != 0xff)
            break;
    }

    return response;
}
    7c3c:	bd38      	pop	{r3, r4, r5, pc}
    7c3e:	bf00      	nop

00007c40 <sd_raw_available>:
 * Checks wether a memory card is located in the slot.
 *
 * \returns 1 if the card is available, 0 if it is not.
 */
uint8_t sd_raw_available()
{
    7c40:	b508      	push	{r3, lr}
    return get_pin_available() == 0x00;
    7c42:	f04f 0001 	mov.w	r0, #1
    7c46:	f7fb fc5d 	bl	3504 <GPIO_ReadValue>
}
    7c4a:	f04f 0001 	mov.w	r0, #1
    7c4e:	bd08      	pop	{r3, pc}

00007c50 <sd_raw_locked>:
 * Checks wether the memory card is locked for write access.
 *
 * \returns 1 if the card is locked, 0 if it is not.
 */
uint8_t sd_raw_locked()
{
    7c50:	b508      	push	{r3, lr}
    return get_pin_locked() == 0x00;
    7c52:	f04f 0001 	mov.w	r0, #1
    7c56:	f7fb fc55 	bl	3504 <GPIO_ReadValue>
}
    7c5a:	f04f 0000 	mov.w	r0, #0
    7c5e:	bd08      	pop	{r3, pc}

00007c60 <sd_raw_sync>:
 *
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write
 */
uint8_t sd_raw_sync()
{
    7c60:	b508      	push	{r3, lr}
#if SD_RAW_WRITE_BUFFERING
    if(raw_block_written)
    7c62:	f240 63c0 	movw	r3, #1728	; 0x6c0
    7c66:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7c6a:	781b      	ldrb	r3, [r3, #0]
    7c6c:	b9ab      	cbnz	r3, 7c9a <sd_raw_sync+0x3a>
        return 1;
    if(!sd_raw_write(raw_block_address, raw_block, sizeof(raw_block)))
    7c6e:	f240 63bc 	movw	r3, #1724	; 0x6bc
    7c72:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7c76:	6818      	ldr	r0, [r3, #0]
    7c78:	f240 61c4 	movw	r1, #1732	; 0x6c4
    7c7c:	f2c1 0100 	movt	r1, #4096	; 0x1000
    7c80:	f44f 7200 	mov.w	r2, #512	; 0x200
    7c84:	f000 f9d0 	bl	8028 <sd_raw_write>
    7c88:	b150      	cbz	r0, 7ca0 <sd_raw_sync+0x40>
        return 0;
    raw_block_written = 1;
    7c8a:	f240 63c0 	movw	r3, #1728	; 0x6c0
    7c8e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7c92:	f04f 0001 	mov.w	r0, #1
    7c96:	7018      	strb	r0, [r3, #0]
#endif
    return 1;
    7c98:	bd08      	pop	{r3, pc}
 */
uint8_t sd_raw_sync()
{
#if SD_RAW_WRITE_BUFFERING
    if(raw_block_written)
        return 1;
    7c9a:	f04f 0001 	mov.w	r0, #1
    7c9e:	bd08      	pop	{r3, pc}
    if(!sd_raw_write(raw_block_address, raw_block, sizeof(raw_block)))
        return 0;
    7ca0:	f04f 0000 	mov.w	r0, #0
    raw_block_written = 1;
#endif
    return 1;
}
    7ca4:	bd08      	pop	{r3, pc}
    7ca6:	bf00      	nop

00007ca8 <sd_raw_read>:
 * \param[in] length The number of bytes to read.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_write_interval
 */
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    7ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7cac:	4605      	mov	r5, r0
    7cae:	4608      	mov	r0, r1
    offset_t block_address;
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    7cb0:	4616      	mov	r6, r2
    7cb2:	2a00      	cmp	r2, #0
    7cb4:	d05f      	beq.n	7d76 <sd_raw_read+0xce>
        if(read_length > length)
            read_length = length;
        
#if !SD_RAW_SAVE_RAM
        /* check if the requested data is cached */
        if(block_address != raw_block_address)
    7cb6:	f240 67bc 	movw	r7, #1724	; 0x6bc
    7cba:	f2c1 0700 	movt	r7, #4096	; 0x1000
        }
#if !SD_RAW_SAVE_RAM
        else
        {
            /* use cached data */
            memcpy(buffer, raw_block + block_offset, read_length);
    7cbe:	f240 69c4 	movw	r9, #1732	; 0x6c4
    7cc2:	f2c1 0900 	movt	r9, #4096	; 0x1000
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    {
        /* determine byte count to read at once */
        block_offset = offset & 0x01ff;
    7cc6:	ea4f 51c5 	mov.w	r1, r5, lsl #23
    7cca:	ea4f 51d1 	mov.w	r1, r1, lsr #23
        block_address = offset - block_offset;
    7cce:	ebc1 0805 	rsb	r8, r1, r5
        read_length = 512 - block_offset; /* read up to block border */
    7cd2:	f5c1 7400 	rsb	r4, r1, #512	; 0x200
    7cd6:	b2a4      	uxth	r4, r4
        if(read_length > length)
    7cd8:	42b4      	cmp	r4, r6
            read_length = length;
    7cda:	bf88      	it	hi
    7cdc:	b2b4      	uxthhi	r4, r6
        
#if !SD_RAW_SAVE_RAM
        /* check if the requested data is cached */
        if(block_address != raw_block_address)
    7cde:	683b      	ldr	r3, [r7, #0]
    7ce0:	4598      	cmp	r8, r3
    7ce2:	d03c      	beq.n	7d5e <sd_raw_read+0xb6>
#endif
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
    7ce4:	f7ff ffbc 	bl	7c60 <sd_raw_sync>
    7ce8:	2800      	cmp	r0, #0
    7cea:	d048      	beq.n	7d7e <sd_raw_read+0xd6>
                return 0;
#endif

            /* address card */
            select_card();
    7cec:	f04f 0001 	mov.w	r0, #1
    7cf0:	f04f 0100 	mov.w	r1, #0
    7cf4:	4602      	mov	r2, r0
    7cf6:	f7fb fbe5 	bl	34c4 <GPIO_SetDir>
    7cfa:	f04f 0001 	mov.w	r0, #1
    7cfe:	f7fb fc01 	bl	3504 <GPIO_ReadValue>
    7d02:	f04f 0001 	mov.w	r0, #1
    7d06:	f04f 0100 	mov.w	r1, #0
    7d0a:	f7fb fbeb 	bl	34e4 <GPIO_SetValue>

            /* send single block request */
#if SD_RAW_SDHC
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
#else
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, block_address))
    7d0e:	f04f 0011 	mov.w	r0, #17
    7d12:	4641      	mov	r1, r8
    7d14:	f7ff ff5c 	bl	7bd0 <sd_raw_send_command>
    7d18:	b1a0      	cbz	r0, 7d44 <sd_raw_read+0x9c>
#endif
            {
                unselect_card();
    7d1a:	f04f 0001 	mov.w	r0, #1
    7d1e:	f04f 0100 	mov.w	r1, #0
    7d22:	4602      	mov	r2, r0
    7d24:	f7fb fbce 	bl	34c4 <GPIO_SetDir>
    7d28:	f04f 0001 	mov.w	r0, #1
    7d2c:	f7fb fbea 	bl	3504 <GPIO_ReadValue>
    7d30:	f04f 0001 	mov.w	r0, #1
    7d34:	f04f 0100 	mov.w	r1, #0
    7d38:	f7fb fbd4 	bl	34e4 <GPIO_SetValue>
                return 0;
    7d3c:	f04f 0000 	mov.w	r0, #0
    7d40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            }

            /* wait for data block (start byte 0xfe) */
            while(sd_raw_rec_byte() != 0xfe);
    7d44:	f7ff ff30 	bl	7ba8 <sd_raw_rec_byte>
    7d48:	28fe      	cmp	r0, #254	; 0xfe
    7d4a:	d1fb      	bne.n	7d44 <sd_raw_read+0x9c>
                if(i >= block_offset && i < read_to)
                    *buffer++ = b;
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
    7d4c:	f240 64c4 	movw	r4, #1732	; 0x6c4
    7d50:	f2c1 0400 	movt	r4, #4096	; 0x1000
            uint8_t i;
            for(i = 0; i < 512; ++i)
                *cache++ = sd_raw_rec_byte();
    7d54:	f7ff ff28 	bl	7ba8 <sd_raw_rec_byte>
    7d58:	f804 0b01 	strb.w	r0, [r4], #1
    7d5c:	e7fa      	b.n	7d54 <sd_raw_read+0xac>
        }
#if !SD_RAW_SAVE_RAM
        else
        {
            /* use cached data */
            memcpy(buffer, raw_block + block_offset, read_length);
    7d5e:	4449      	add	r1, r9
    7d60:	4622      	mov	r2, r4
    7d62:	f018 fc65 	bl	20630 <memcpy>
            buffer += read_length;
    7d66:	1900      	adds	r0, r0, r4
        }
#endif

        length -= read_length;
        offset += read_length;
    7d68:	192d      	adds	r5, r5, r4
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    offset_t block_address;
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    7d6a:	1b36      	subs	r6, r6, r4
    7d6c:	d1ab      	bne.n	7cc6 <sd_raw_read+0x1e>

        length -= read_length;
        offset += read_length;
    }

    return 1;
    7d6e:	f04f 0001 	mov.w	r0, #1
    7d72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7d76:	f04f 0001 	mov.w	r0, #1
    7d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(block_address != raw_block_address)
#endif
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
                return 0;
    7d7e:	f04f 0000 	mov.w	r0, #0
        length -= read_length;
        offset += read_length;
    }

    return 1;
}
    7d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7d86:	bf00      	nop

00007d88 <sd_raw_read_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_write
 */
uint8_t sd_raw_read_interval(offset_t offset, uint8_t* buffer, uintptr_t interval, uintptr_t length, sd_raw_read_interval_handler_t callback, void* p)
{
    7d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7d8c:	4605      	mov	r5, r0
    7d8e:	461e      	mov	r6, r3
    7d90:	f8dd 8020 	ldr.w	r8, [sp, #32]
    7d94:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if(!buffer || interval == 0 || length < interval || !callback)
    7d98:	460f      	mov	r7, r1
    7d9a:	4614      	mov	r4, r2
    7d9c:	f1d2 0201 	rsbs	r2, r2, #1
    7da0:	bf38      	it	cc
    7da2:	2200      	movcc	r2, #0
    7da4:	2900      	cmp	r1, #0
    7da6:	bf08      	it	eq
    7da8:	f042 0201 	orreq.w	r2, r2, #1
    7dac:	b9ea      	cbnz	r2, 7dea <sd_raw_read_interval+0x62>
    7dae:	f1d8 0301 	rsbs	r3, r8, #1
    7db2:	bf38      	it	cc
    7db4:	2300      	movcc	r3, #0
    7db6:	42a6      	cmp	r6, r4
    7db8:	bf38      	it	cc
    7dba:	f043 0301 	orrcc.w	r3, r3, #1
    7dbe:	b9c3      	cbnz	r3, 7df2 <sd_raw_read_interval+0x6a>
        return 0;

#if !SD_RAW_SAVE_RAM
    while(length >= interval)
    7dc0:	42b4      	cmp	r4, r6
    7dc2:	d81a      	bhi.n	7dfa <sd_raw_read_interval+0x72>
    {
        /* as reading is now buffered, we directly
         * hand over the request to sd_raw_read()
         */
        if(!sd_raw_read(offset, buffer, interval))
    7dc4:	4628      	mov	r0, r5
    7dc6:	4639      	mov	r1, r7
    7dc8:	4622      	mov	r2, r4
    7dca:	f7ff ff6d 	bl	7ca8 <sd_raw_read>
    7dce:	b1c0      	cbz	r0, 7e02 <sd_raw_read_interval+0x7a>
            return 0;
        if(!callback(buffer, offset, p))
    7dd0:	4638      	mov	r0, r7
    7dd2:	4629      	mov	r1, r5
    7dd4:	464a      	mov	r2, r9
    7dd6:	47c0      	blx	r8
    7dd8:	b1b8      	cbz	r0, 7e0a <sd_raw_read_interval+0x82>
            break;
        offset += interval;
    7dda:	192d      	adds	r5, r5, r4
        length -= interval;
    7ddc:	1b36      	subs	r6, r6, r4
{
    if(!buffer || interval == 0 || length < interval || !callback)
        return 0;

#if !SD_RAW_SAVE_RAM
    while(length >= interval)
    7dde:	42b4      	cmp	r4, r6
    7de0:	d9f0      	bls.n	7dc4 <sd_raw_read_interval+0x3c>
            break;
        offset += interval;
        length -= interval;
    }

    return 1;
    7de2:	f04f 0001 	mov.w	r0, #1
    7de6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_write
 */
uint8_t sd_raw_read_interval(offset_t offset, uint8_t* buffer, uintptr_t interval, uintptr_t length, sd_raw_read_interval_handler_t callback, void* p)
{
    if(!buffer || interval == 0 || length < interval || !callback)
        return 0;
    7dea:	f04f 0000 	mov.w	r0, #0
    7dee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7df2:	f04f 0000 	mov.w	r0, #0
    7df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            break;
        offset += interval;
        length -= interval;
    }

    return 1;
    7dfa:	f04f 0001 	mov.w	r0, #1
    7dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    {
        /* as reading is now buffered, we directly
         * hand over the request to sd_raw_read()
         */
        if(!sd_raw_read(offset, buffer, interval))
            return 0;
    7e02:	f04f 0000 	mov.w	r0, #0
    7e06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            break;
        offset += interval;
        length -= interval;
    }

    return 1;
    7e0a:	f04f 0001 	mov.w	r0, #1
    /* let card some time to finish */
    sd_raw_rec_byte();

    return 1;
#endif
}
    7e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7e12:	bf00      	nop

00007e14 <sd_raw_init>:
 * Initializes memory card communication.
 *
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_init()
{
    7e14:	b570      	push	{r4, r5, r6, lr}
    7e16:	b086      	sub	sp, #24
    /* enable inputs for reading card status */
    configure_pin_available();
    7e18:	f04f 0001 	mov.w	r0, #1
    7e1c:	f04f 0100 	mov.w	r1, #0
    7e20:	460a      	mov	r2, r1
    7e22:	f7fb fb4f 	bl	34c4 <GPIO_SetDir>
    configure_pin_locked();
    7e26:	f04f 0001 	mov.w	r0, #1
    7e2a:	f04f 0100 	mov.w	r1, #0
    7e2e:	460a      	mov	r2, r1
    7e30:	f7fb fb48 	bl	34c4 <GPIO_SetDir>

    /* enable outputs for MOSI, SCK, SS, input for MISO */
    configure_pin_mosi();
    7e34:	f04f 0001 	mov.w	r0, #1
    7e38:	f04f 0100 	mov.w	r1, #0
    7e3c:	4602      	mov	r2, r0
    7e3e:	f7fb fb41 	bl	34c4 <GPIO_SetDir>
    configure_pin_sck();
    7e42:	f04f 0001 	mov.w	r0, #1
    7e46:	f04f 0100 	mov.w	r1, #0
    7e4a:	4602      	mov	r2, r0
    7e4c:	f7fb fb3a 	bl	34c4 <GPIO_SetDir>
    configure_pin_ss();
    7e50:	f04f 0001 	mov.w	r0, #1
    7e54:	f04f 0100 	mov.w	r1, #0
    7e58:	4602      	mov	r2, r0
    7e5a:	f7fb fb33 	bl	34c4 <GPIO_SetDir>
    configure_pin_miso();
    7e5e:	f04f 0001 	mov.w	r0, #1
    7e62:	f04f 0100 	mov.w	r1, #0
    7e66:	4602      	mov	r2, r0
    7e68:	f7fb fb2c 	bl	34c4 <GPIO_SetDir>

    unselect_card();
    7e6c:	f04f 0001 	mov.w	r0, #1
    7e70:	f04f 0100 	mov.w	r1, #0
    7e74:	4602      	mov	r2, r0
    7e76:	f7fb fb25 	bl	34c4 <GPIO_SetDir>
    7e7a:	f04f 0001 	mov.w	r0, #1
    7e7e:	f7fb fb41 	bl	3504 <GPIO_ReadValue>
    7e82:	f04f 0001 	mov.w	r0, #1
    7e86:	f04f 0100 	mov.w	r1, #0
    7e8a:	f7fb fb2b 	bl	34e4 <GPIO_SetValue>

    SPI_CFG_Type spi_cfg;
    spi_cfg.Databit = SPI_DATABIT_8;
    7e8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
    7e92:	9300      	str	r3, [sp, #0]
    spi_cfg.CPHA = SPI_CPHA_FIRST;
    7e94:	f04f 0400 	mov.w	r4, #0
    7e98:	9401      	str	r4, [sp, #4]
    spi_cfg.CPOL = SPI_CPOL_HI;
    7e9a:	9402      	str	r4, [sp, #8]
    spi_cfg.Mode = SPI_MASTER_MODE;
    7e9c:	f04f 0320 	mov.w	r3, #32
    7ea0:	9303      	str	r3, [sp, #12]
    spi_cfg.DataOrder = SPI_DATA_MSB_FIRST;
    7ea2:	9404      	str	r4, [sp, #16]
    spi_cfg.ClockRate = 50000000/128;
    7ea4:	f24f 53e1 	movw	r3, #62945	; 0xf5e1
    7ea8:	f2c0 0305 	movt	r3, #5
    7eac:	9305      	str	r3, [sp, #20]

    SPI_Init((LPC_SPI_TypeDef *)LPC_SPI, &spi_cfg);
    7eae:	4620      	mov	r0, r4
    7eb0:	f2c4 0002 	movt	r0, #16386	; 0x4002
    7eb4:	4669      	mov	r1, sp
    7eb6:	f7fb fe4b 	bl	3b50 <SPI_Init>
//           (1 << SPR1) | /* Clock Frequency: f_OSC / 128 */
//           (1 << SPR0);
//    SPSR &= ~(1 << SPI2X); /* No doubled clock frequency */

    /* initialization procedure */
    sd_raw_card_type = 0;
    7eba:	f240 63b8 	movw	r3, #1720	; 0x6b8
    7ebe:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7ec2:	701c      	strb	r4, [r3, #0]
    
    if(!sd_raw_available())
    7ec4:	f7ff febc 	bl	7c40 <sd_raw_available>
    7ec8:	2800      	cmp	r0, #0
    7eca:	f000 80a8 	beq.w	801e <sd_raw_init+0x20a>
    7ece:	f04f 040a 	mov.w	r4, #10
    /* card needs 74 cycles minimum to start up */
    uint8_t i;
    for(i = 0; i < 10; ++i)
    {
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    7ed2:	f7ff fe69 	bl	7ba8 <sd_raw_rec_byte>
    7ed6:	f104 34ff 	add.w	r4, r4, #4294967295
    7eda:	b2e4      	uxtb	r4, r4
    if(!sd_raw_available())
        return 0;

    /* card needs 74 cycles minimum to start up */
    uint8_t i;
    for(i = 0; i < 10; ++i)
    7edc:	2c00      	cmp	r4, #0
    7ede:	d1f8      	bne.n	7ed2 <sd_raw_init+0xbe>
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    }

    /* address card */
    select_card();
    7ee0:	f04f 0001 	mov.w	r0, #1
    7ee4:	f04f 0100 	mov.w	r1, #0
    7ee8:	4602      	mov	r2, r0
    7eea:	f7fb faeb 	bl	34c4 <GPIO_SetDir>
    7eee:	f04f 0001 	mov.w	r0, #1
    7ef2:	f7fb fb07 	bl	3504 <GPIO_ReadValue>
    7ef6:	f04f 0001 	mov.w	r0, #1
    7efa:	f04f 0100 	mov.w	r1, #0
    7efe:	f7fb faf1 	bl	34e4 <GPIO_SetValue>

    /* reset card */
    uint8_t response;
    for(i = 0; ; ++i)
    {
        response = sd_raw_send_command(CMD_GO_IDLE_STATE, 0);
    7f02:	4620      	mov	r0, r4
    7f04:	4621      	mov	r1, r4
    7f06:	f7ff fe63 	bl	7bd0 <sd_raw_send_command>
        if(response == (1 << R1_IDLE_STATE))
    7f0a:	2801      	cmp	r0, #1
    7f0c:	d1f9      	bne.n	7f02 <sd_raw_init+0xee>
    }
    else
#endif
    {
        /* determine SD/MMC card type */
        sd_raw_send_command(CMD_APP, 0);
    7f0e:	f04f 0037 	mov.w	r0, #55	; 0x37
    7f12:	f04f 0100 	mov.w	r1, #0
    7f16:	f7ff fe5b 	bl	7bd0 <sd_raw_send_command>
        response = sd_raw_send_command(CMD_SD_SEND_OP_COND, 0);
    7f1a:	f04f 0029 	mov.w	r0, #41	; 0x29
    7f1e:	f04f 0100 	mov.w	r1, #0
    7f22:	f7ff fe55 	bl	7bd0 <sd_raw_send_command>
        if((response & (1 << R1_ILL_COMMAND)) == 0)
    7f26:	f010 0f04 	tst.w	r0, #4
        {
            /* card conforms to SD 1 card specification */
            sd_raw_card_type |= (1 << SD_RAW_SPEC_1);
    7f2a:	bf01      	itttt	eq
    7f2c:	f240 63b8 	movweq	r3, #1720	; 0x6b8
    7f30:	f2c1 0300 	movteq	r3, #4096	; 0x1000
    7f34:	781a      	ldrbeq	r2, [r3, #0]
    7f36:	f042 0201 	orreq.w	r2, r2, #1
    7f3a:	bf08      	it	eq
    7f3c:	701a      	strbeq	r2, [r3, #0]
    }

    /* wait for card to get ready */
    for(i = 0; ; ++i)
    {
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
    7f3e:	f240 65b8 	movw	r5, #1720	; 0x6b8
    7f42:	f2c1 0500 	movt	r5, #4096	; 0x1000
            uint32_t arg = 0;
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
                arg = 0x40000000;
#endif
            sd_raw_send_command(CMD_APP, 0);
    7f46:	f04f 0637 	mov.w	r6, #55	; 0x37
    7f4a:	f04f 0400 	mov.w	r4, #0
    }

    /* wait for card to get ready */
    for(i = 0; ; ++i)
    {
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
    7f4e:	782b      	ldrb	r3, [r5, #0]
    7f50:	f013 0f03 	tst.w	r3, #3
    7f54:	d009      	beq.n	7f6a <sd_raw_init+0x156>
            uint32_t arg = 0;
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
                arg = 0x40000000;
#endif
            sd_raw_send_command(CMD_APP, 0);
    7f56:	4630      	mov	r0, r6
    7f58:	4621      	mov	r1, r4
    7f5a:	f7ff fe39 	bl	7bd0 <sd_raw_send_command>
            response = sd_raw_send_command(CMD_SD_SEND_OP_COND, arg);
    7f5e:	f04f 0029 	mov.w	r0, #41	; 0x29
    7f62:	4621      	mov	r1, r4
    7f64:	f7ff fe34 	bl	7bd0 <sd_raw_send_command>
    7f68:	e004      	b.n	7f74 <sd_raw_init+0x160>
        }
        else
        {
            response = sd_raw_send_command(CMD_SEND_OP_COND, 0);
    7f6a:	f04f 0001 	mov.w	r0, #1
    7f6e:	4621      	mov	r1, r4
    7f70:	f7ff fe2e 	bl	7bd0 <sd_raw_send_command>
        }

        if((response & (1 << R1_IDLE_STATE)) == 0)
    7f74:	f010 0f01 	tst.w	r0, #1
    7f78:	d1e9      	bne.n	7f4e <sd_raw_init+0x13a>
        sd_raw_rec_byte();
    }
#endif

    /* set block size to 512 bytes */
    if(sd_raw_send_command(CMD_SET_BLOCKLEN, 512))
    7f7a:	f04f 0010 	mov.w	r0, #16
    7f7e:	f44f 7100 	mov.w	r1, #512	; 0x200
    7f82:	f7ff fe25 	bl	7bd0 <sd_raw_send_command>
    7f86:	b198      	cbz	r0, 7fb0 <sd_raw_init+0x19c>
    {
        unselect_card();
    7f88:	f04f 0001 	mov.w	r0, #1
    7f8c:	f04f 0100 	mov.w	r1, #0
    7f90:	4602      	mov	r2, r0
    7f92:	f7fb fa97 	bl	34c4 <GPIO_SetDir>
    7f96:	f04f 0001 	mov.w	r0, #1
    7f9a:	f7fb fab3 	bl	3504 <GPIO_ReadValue>
    7f9e:	f04f 0001 	mov.w	r0, #1
    7fa2:	f04f 0100 	mov.w	r1, #0
    7fa6:	f7fb fa9d 	bl	34e4 <GPIO_SetValue>
        return 0;
    7faa:	f04f 0000 	mov.w	r0, #0
    7fae:	e038      	b.n	8022 <sd_raw_init+0x20e>
    }

    /* deaddress card */
    unselect_card();
    7fb0:	f04f 0001 	mov.w	r0, #1
    7fb4:	f04f 0100 	mov.w	r1, #0
    7fb8:	4602      	mov	r2, r0
    7fba:	f7fb fa83 	bl	34c4 <GPIO_SetDir>
    7fbe:	f04f 0001 	mov.w	r0, #1
    7fc2:	f7fb fa9f 	bl	3504 <GPIO_ReadValue>
    7fc6:	f04f 0001 	mov.w	r0, #1
    7fca:	f04f 0100 	mov.w	r1, #0
    7fce:	f7fb fa89 	bl	34e4 <GPIO_SetValue>

    /* switch to highest SPI frequency possible */
//    SPCR &= ~((1 << SPR1) | (1 << SPR0)); /* Clock Frequency: f_OSC / 4 */
//    SPSR |= (1 << SPI2X); /* Doubled Clock Frequency: f_OSC / 2 */
    SPI_SetClock ((LPC_SPI_TypeDef *)LPC_SPI, 50000000/4);
    7fd2:	f04f 0000 	mov.w	r0, #0
    7fd6:	f2c4 0002 	movt	r0, #16386	; 0x4002
    7fda:	f64b 4120 	movw	r1, #48160	; 0xbc20
    7fde:	f2c0 01be 	movt	r1, #190	; 0xbe
    7fe2:	f7fb fd77 	bl	3ad4 <SPI_SetClock>

#if !SD_RAW_SAVE_RAM
    /* the first block is likely to be accessed first, so precache it here */
    raw_block_address = (offset_t) -1;
    7fe6:	f240 63bc 	movw	r3, #1724	; 0x6bc
    7fea:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7fee:	f04f 32ff 	mov.w	r2, #4294967295
    7ff2:	601a      	str	r2, [r3, #0]
#if SD_RAW_WRITE_BUFFERING
    raw_block_written = 1;
    7ff4:	f240 63c0 	movw	r3, #1728	; 0x6c0
    7ff8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7ffc:	f04f 0201 	mov.w	r2, #1
    8000:	701a      	strb	r2, [r3, #0]
#endif
    if(!sd_raw_read(0, raw_block, sizeof(raw_block)))
    8002:	f04f 0000 	mov.w	r0, #0
    8006:	f240 61c4 	movw	r1, #1732	; 0x6c4
    800a:	f2c1 0100 	movt	r1, #4096	; 0x1000
    800e:	f44f 7200 	mov.w	r2, #512	; 0x200
    8012:	f7ff fe49 	bl	7ca8 <sd_raw_read>

    /* initialization procedure */
    sd_raw_card_type = 0;
    
    if(!sd_raw_available())
        return 0;
    8016:	3000      	adds	r0, #0
    8018:	bf18      	it	ne
    801a:	2001      	movne	r0, #1
    801c:	e001      	b.n	8022 <sd_raw_init+0x20e>
    801e:	f04f 0000 	mov.w	r0, #0
    if(!sd_raw_read(0, raw_block, sizeof(raw_block)))
        return 0;
#endif

    return 1;
}
    8022:	b006      	add	sp, #24
    8024:	bd70      	pop	{r4, r5, r6, pc}
    8026:	bf00      	nop

00008028 <sd_raw_write>:
 * \param[in] length The number of bytes to write.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_read_interval
 */
uint8_t sd_raw_write(offset_t offset, const uint8_t* buffer, uintptr_t length)
{
    8028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    802c:	4606      	mov	r6, r0
    802e:	4688      	mov	r8, r1
    8030:	4617      	mov	r7, r2
    if(sd_raw_locked())
    8032:	f7ff fe0d 	bl	7c50 <sd_raw_locked>
    8036:	2800      	cmp	r0, #0
    8038:	d07d      	beq.n	8136 <sd_raw_write+0x10e>
    803a:	e082      	b.n	8142 <sd_raw_write+0x11a>
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    {
        /* determine byte count to write at once */
        block_offset = offset & 0x01ff;
    803c:	ea4f 54c6 	mov.w	r4, r6, lsl #23
    8040:	ea4f 54d4 	mov.w	r4, r4, lsr #23
        block_address = offset - block_offset;
    8044:	1b36      	subs	r6, r6, r4
        write_length = 512 - block_offset; /* write up to block border */
    8046:	f5c4 7500 	rsb	r5, r4, #512	; 0x200
    804a:	b2ad      	uxth	r5, r5
        if(write_length > length)
    804c:	42af      	cmp	r7, r5
            write_length = length;
    804e:	bf38      	it	cc
    8050:	b2bd      	uxthcc	r5, r7
        
        /* Merge the data to write with the content of the block.
         * Use the cached block if available.
         */
        if(block_address != raw_block_address)
    8052:	f240 63bc 	movw	r3, #1724	; 0x6bc
    8056:	f2c1 0300 	movt	r3, #4096	; 0x1000
    805a:	681b      	ldr	r3, [r3, #0]
    805c:	429e      	cmp	r6, r3
    805e:	d01d      	beq.n	809c <sd_raw_write+0x74>
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
    8060:	f7ff fdfe 	bl	7c60 <sd_raw_sync>
    8064:	2800      	cmp	r0, #0
    8066:	d070      	beq.n	814a <sd_raw_write+0x122>
                return 0;
#endif

            if(block_offset || write_length < 512)
    8068:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    806c:	bf2c      	ite	cs
    806e:	2300      	movcs	r3, #0
    8070:	2301      	movcc	r3, #1
    8072:	2c00      	cmp	r4, #0
    8074:	bf18      	it	ne
    8076:	f043 0301 	orrne.w	r3, r3, #1
    807a:	b153      	cbz	r3, 8092 <sd_raw_write+0x6a>
            {
                if(!sd_raw_read(block_address, raw_block, sizeof(raw_block)))
    807c:	4630      	mov	r0, r6
    807e:	f240 61c4 	movw	r1, #1732	; 0x6c4
    8082:	f2c1 0100 	movt	r1, #4096	; 0x1000
    8086:	f44f 7200 	mov.w	r2, #512	; 0x200
    808a:	f7ff fe0d 	bl	7ca8 <sd_raw_read>
    808e:	2800      	cmp	r0, #0
    8090:	d05f      	beq.n	8152 <sd_raw_write+0x12a>
                    return 0;
            }
            raw_block_address = block_address;
    8092:	f240 63bc 	movw	r3, #1724	; 0x6bc
    8096:	f2c1 0300 	movt	r3, #4096	; 0x1000
    809a:	601e      	str	r6, [r3, #0]
        }

        if(buffer != raw_block)
    809c:	f240 63c4 	movw	r3, #1732	; 0x6c4
    80a0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    80a4:	4598      	cmp	r8, r3
    80a6:	d00d      	beq.n	80c4 <sd_raw_write+0x9c>
        {
            memcpy(raw_block + block_offset, buffer, write_length);
    80a8:	1918      	adds	r0, r3, r4
    80aa:	4641      	mov	r1, r8
    80ac:	462a      	mov	r2, r5
    80ae:	f018 fabf 	bl	20630 <memcpy>

#if SD_RAW_WRITE_BUFFERING
            raw_block_written = 0;
    80b2:	f240 63c0 	movw	r3, #1728	; 0x6c0
    80b6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    80ba:	f04f 0200 	mov.w	r2, #0
    80be:	701a      	strb	r2, [r3, #0]

            if(length == write_length)
    80c0:	42af      	cmp	r7, r5
    80c2:	d04a      	beq.n	815a <sd_raw_write+0x132>
                return 1;
#endif
        }

        /* address card */
        select_card();
    80c4:	f04f 0001 	mov.w	r0, #1
    80c8:	f04f 0100 	mov.w	r1, #0
    80cc:	4602      	mov	r2, r0
    80ce:	f7fb f9f9 	bl	34c4 <GPIO_SetDir>
    80d2:	f04f 0001 	mov.w	r0, #1
    80d6:	f7fb fa15 	bl	3504 <GPIO_ReadValue>
    80da:	f04f 0001 	mov.w	r0, #1
    80de:	f04f 0100 	mov.w	r1, #0
    80e2:	f7fb f9ff 	bl	34e4 <GPIO_SetValue>

        /* send single block request */
#if SD_RAW_SDHC
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
#else
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, block_address))
    80e6:	f04f 0018 	mov.w	r0, #24
    80ea:	4631      	mov	r1, r6
    80ec:	f7ff fd70 	bl	7bd0 <sd_raw_send_command>
    80f0:	b1a0      	cbz	r0, 811c <sd_raw_write+0xf4>
#endif
        {
            unselect_card();
    80f2:	f04f 0001 	mov.w	r0, #1
    80f6:	f04f 0100 	mov.w	r1, #0
    80fa:	4602      	mov	r2, r0
    80fc:	f7fb f9e2 	bl	34c4 <GPIO_SetDir>
    8100:	f04f 0001 	mov.w	r0, #1
    8104:	f7fb f9fe 	bl	3504 <GPIO_ReadValue>
    8108:	f04f 0001 	mov.w	r0, #1
    810c:	f04f 0100 	mov.w	r1, #0
    8110:	f7fb f9e8 	bl	34e4 <GPIO_SetValue>
            return 0;
    8114:	f04f 0000 	mov.w	r0, #0
    8118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }

        /* send start byte */
        sd_raw_send_byte(0xfe);
    811c:	f04f 00fe 	mov.w	r0, #254	; 0xfe
    8120:	f7ff fd2e 	bl	7b80 <sd_raw_send_byte>

        /* write byte block */
        uint8_t* cache = raw_block;
    8124:	f240 64c4 	movw	r4, #1732	; 0x6c4
    8128:	f2c1 0400 	movt	r4, #4096	; 0x1000
        uint8_t i;
        for(i = 0; i < 512; ++i)
            sd_raw_send_byte(*cache++);
    812c:	f814 0b01 	ldrb.w	r0, [r4], #1
    8130:	f7ff fd26 	bl	7b80 <sd_raw_send_byte>
    8134:	e7fa      	b.n	812c <sd_raw_write+0x104>
        return 0;

    offset_t block_address;
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    8136:	2f00      	cmp	r7, #0
    8138:	d180      	bne.n	803c <sd_raw_write+0x14>
#if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
#endif
    }

    return 1;
    813a:	f04f 0001 	mov.w	r0, #1
    813e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_read_interval
 */
uint8_t sd_raw_write(offset_t offset, const uint8_t* buffer, uintptr_t length)
{
    if(sd_raw_locked())
        return 0;
    8142:	f04f 0000 	mov.w	r0, #0
    8146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
         */
        if(block_address != raw_block_address)
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
                return 0;
    814a:	f04f 0000 	mov.w	r0, #0
    814e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#endif

            if(block_offset || write_length < 512)
            {
                if(!sd_raw_read(block_address, raw_block, sizeof(raw_block)))
                    return 0;
    8152:	f04f 0000 	mov.w	r0, #0
    8156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

#if SD_RAW_WRITE_BUFFERING
            raw_block_written = 0;

            if(length == write_length)
                return 1;
    815a:	f04f 0001 	mov.w	r0, #1
        raw_block_written = 1;
#endif
    }

    return 1;
}
    815e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8162:	bf00      	nop

00008164 <sd_raw_write_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_read
 */
uint8_t sd_raw_write_interval(offset_t offset, uint8_t* buffer, uintptr_t length, sd_raw_write_interval_handler_t callback, void* p)
{
    8164:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8168:	4605      	mov	r5, r0
    816a:	4616      	mov	r6, r2
    816c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
#if SD_RAW_SAVE_RAM
    #error "SD_RAW_WRITE_SUPPORT is not supported together with SD_RAW_SAVE_RAM"
#endif

    if(!buffer || !callback)
    8170:	460f      	mov	r7, r1
    8172:	4699      	mov	r9, r3
    8174:	f1d3 0301 	rsbs	r3, r3, #1
    8178:	bf38      	it	cc
    817a:	2300      	movcc	r3, #0
    817c:	2900      	cmp	r1, #0
    817e:	bf08      	it	eq
    8180:	f043 0301 	orreq.w	r3, r3, #1
    8184:	bb43      	cbnz	r3, 81d8 <sd_raw_write_interval+0x74>
        return 0;

    uint8_t endless = (length == 0);
    8186:	f1d2 0801 	rsbs	r8, r2, #1
    818a:	bf38      	it	cc
    818c:	f04f 0800 	movcc.w	r8, #0
    while(endless || length > 0)
    8190:	46c2      	mov	sl, r8
    8192:	2a00      	cmp	r2, #0
    8194:	bf0c      	ite	eq
    8196:	4643      	moveq	r3, r8
    8198:	f048 0301 	orrne.w	r3, r8, #1
    819c:	b303      	cbz	r3, 81e0 <sd_raw_write_interval+0x7c>
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
    819e:	4638      	mov	r0, r7
    81a0:	4629      	mov	r1, r5
    81a2:	465a      	mov	r2, fp
    81a4:	47c8      	blx	r9
    81a6:	b284      	uxth	r4, r0
        if(!bytes_to_write)
    81a8:	b1f4      	cbz	r4, 81e8 <sd_raw_write_interval+0x84>
            break;
        if(!endless && bytes_to_write > length)
    81aa:	f1b8 0f00 	cmp.w	r8, #0
    81ae:	d101      	bne.n	81b4 <sd_raw_write_interval+0x50>
    81b0:	42b4      	cmp	r4, r6
    81b2:	d81d      	bhi.n	81f0 <sd_raw_write_interval+0x8c>
            return 0;

        /* as writing is always buffered, we directly
         * hand over the request to sd_raw_write()
         */
        if(!sd_raw_write(offset, buffer, bytes_to_write))
    81b4:	4628      	mov	r0, r5
    81b6:	4639      	mov	r1, r7
    81b8:	4622      	mov	r2, r4
    81ba:	f7ff ff35 	bl	8028 <sd_raw_write>
    81be:	b1d8      	cbz	r0, 81f8 <sd_raw_write_interval+0x94>
            return 0;

        offset += bytes_to_write;
    81c0:	192d      	adds	r5, r5, r4

    if(!buffer || !callback)
        return 0;

    uint8_t endless = (length == 0);
    while(endless || length > 0)
    81c2:	1b36      	subs	r6, r6, r4
    81c4:	bf0c      	ite	eq
    81c6:	4653      	moveq	r3, sl
    81c8:	f04a 0301 	orrne.w	r3, sl, #1
    81cc:	2b00      	cmp	r3, #0
    81ce:	d1e6      	bne.n	819e <sd_raw_write_interval+0x3a>

        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
    81d0:	f04f 0001 	mov.w	r0, #1
    81d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
#if SD_RAW_SAVE_RAM
    #error "SD_RAW_WRITE_SUPPORT is not supported together with SD_RAW_SAVE_RAM"
#endif

    if(!buffer || !callback)
        return 0;
    81d8:	f04f 0000 	mov.w	r0, #0
    81dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
    81e0:	f04f 0001 	mov.w	r0, #1
    81e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    81e8:	f04f 0001 	mov.w	r0, #1
    81ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
        if(!bytes_to_write)
            break;
        if(!endless && bytes_to_write > length)
            return 0;
    81f0:	f04f 0000 	mov.w	r0, #0
    81f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

        /* as writing is always buffered, we directly
         * hand over the request to sd_raw_write()
         */
        if(!sd_raw_write(offset, buffer, bytes_to_write))
            return 0;
    81f8:	f04f 0000 	mov.w	r0, #0
        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
}
    81fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00008200 <_GLOBAL__sub_I_center_holding>:
}

void ButtonArray::clearButtonPress(){

		previousJ = 0x1F;
}
    8200:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
    8202:	f640 00c4 	movw	r0, #2244	; 0x8c4
    8206:	f2c1 0000 	movt	r0, #4096	; 0x1000
    820a:	f04f 0100 	mov.w	r1, #0
    820e:	f009 fd15 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
    8212:	f640 00c8 	movw	r0, #2248	; 0x8c8
    8216:	f2c1 0000 	movt	r0, #4096	; 0x1000
    821a:	f04f 0101 	mov.w	r1, #1
    821e:	f009 fd0d 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
    8222:	f640 00cc 	movw	r0, #2252	; 0x8cc
    8226:	f2c1 0000 	movt	r0, #4096	; 0x1000
    822a:	f04f 0102 	mov.w	r1, #2
    822e:	f009 fd05 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
    8232:	f640 00d0 	movw	r0, #2256	; 0x8d0
    8236:	f2c1 0000 	movt	r0, #4096	; 0x1000
    823a:	f04f 0103 	mov.w	r1, #3
    823e:	f009 fcfd 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
    8242:	f640 00d4 	movw	r0, #2260	; 0x8d4
    8246:	f2c1 0000 	movt	r0, #4096	; 0x1000
    824a:	f04f 0104 	mov.w	r1, #4
    824e:	f009 fcf5 	bl	11c3c <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
    8252:	f640 04d8 	movw	r4, #2264	; 0x8d8
    8256:	f2c1 0400 	movt	r4, #4096	; 0x1000
    825a:	4620      	mov	r0, r4
    825c:	f04f 01ff 	mov.w	r1, #255	; 0xff
    8260:	f009 fcec 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
	};
	// currently not used:
	//const uint8_t getPinIndex() const { return pin_index; }
};

static const Pin NullPin(NullPort, 0);
    8264:	f640 00dc 	movw	r0, #2268	; 0x8dc
    8268:	f2c1 0000 	movt	r0, #4096	; 0x1000
    826c:	4621      	mov	r1, r4
    826e:	f04f 0200 	mov.w	r2, #0
    8272:	f009 fef5 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    8276:	bd10      	pop	{r4, pc}

00008278 <command::getRemainingCapacity()>:
		return length;
	}

	/// Get the remaining capacity of this buffer
	inline const BufSizeType getRemainingCapacity() const {
		return size - length;
    8278:	f640 3340 	movw	r3, #2880	; 0xb40
    827c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8280:	885a      	ldrh	r2, [r3, #2]
    8282:	8818      	ldrh	r0, [r3, #0]
    8284:	1a80      	subs	r0, r0, r2
	uint16_t sz;
//	ATOMIC_BLOCK(ATOMIC_FORCEON) {
		sz = command_buffer.getRemainingCapacity();
//	}
	return sz;
}
    8286:	b280      	uxth	r0, r0
    8288:	4770      	bx	lr
    828a:	bf00      	nop

0000828c <command::pause(bool)>:

void pause(bool pause) {
	paused = pause;
    828c:	f640 3368 	movw	r3, #2920	; 0xb68
    8290:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8294:	7018      	strb	r0, [r3, #0]
}
    8296:	4770      	bx	lr

00008298 <command::heatShutdown()>:
void heatShutdown(){
	heat_shutdown = true;
    8298:	f640 333c 	movw	r3, #2876	; 0xb3c
    829c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    82a0:	f04f 0201 	mov.w	r2, #1
    82a4:	701a      	strb	r2, [r3, #0]
}
    82a6:	4770      	bx	lr

000082a8 <command::isPaused()>:

bool isPaused() {
	return paused;
    82a8:	f640 3368 	movw	r3, #2920	; 0xb68
    82ac:	f2c1 0300 	movt	r3, #4096	; 0x1000
}
    82b0:	7818      	ldrb	r0, [r3, #0]
    82b2:	4770      	bx	lr

000082b4 <command::isEmpty()>:
	}

	/// Check if the buffer is empty
	inline const bool isEmpty() const {
		return length == 0;
    82b4:	f640 3340 	movw	r3, #2880	; 0xb40
    82b8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    82bc:	8858      	ldrh	r0, [r3, #2]
    82be:	b280      	uxth	r0, r0

bool isEmpty() {
	return command_buffer.isEmpty();
}
    82c0:	f1d0 0001 	rsbs	r0, r0, #1
    82c4:	bf38      	it	cc
    82c6:	2000      	movcc	r0, #0
    82c8:	4770      	bx	lr
    82ca:	bf00      	nop

000082cc <command::push(unsigned char)>:

void push(uint8_t byte) {
    82cc:	b410      	push	{r4}
		overflow = false;
		underflow = false;
	}
	/// Append a byte to the tail of the buffer
	inline void push(BufDataType b) {
		if (length < size) {
    82ce:	f640 3340 	movw	r3, #2880	; 0xb40
    82d2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    82d6:	8859      	ldrh	r1, [r3, #2]
    82d8:	b289      	uxth	r1, r1
    82da:	881a      	ldrh	r2, [r3, #0]
    82dc:	4291      	cmp	r1, r2
    82de:	d215      	bcs.n	830c <command::push(unsigned char)+0x40>
			operator[](length) = b;
    82e0:	f640 3340 	movw	r3, #2880	; 0xb40
    82e4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    82e8:	885c      	ldrh	r4, [r3, #2]
    82ea:	b2a4      	uxth	r4, r4
	inline const bool isEmpty() const {
		return length == 0;
	}
	/// Read the buffer directly
	inline BufDataType& operator[](BufSizeType index) {
		const BufSizeType actual_index = (index + start) % size;
    82ec:	8899      	ldrh	r1, [r3, #4]
    82ee:	b289      	uxth	r1, r1
    82f0:	1861      	adds	r1, r4, r1
    82f2:	fb91 f4f2 	sdiv	r4, r1, r2
    82f6:	fb02 1214 	mls	r2, r2, r4, r1
		return data[actual_index];
    82fa:	b292      	uxth	r2, r2
		underflow = false;
	}
	/// Append a byte to the tail of the buffer
	inline void push(BufDataType b) {
		if (length < size) {
			operator[](length) = b;
    82fc:	6899      	ldr	r1, [r3, #8]
    82fe:	5488      	strb	r0, [r1, r2]
			length++;
    8300:	885a      	ldrh	r2, [r3, #2]
    8302:	f102 0201 	add.w	r2, r2, #1
    8306:	b292      	uxth	r2, r2
    8308:	805a      	strh	r2, [r3, #2]
    830a:	e006      	b.n	831a <command::push(unsigned char)+0x4e>
		} else {
			overflow = true;
    830c:	f640 3340 	movw	r3, #2880	; 0xb40
    8310:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8314:	f04f 0201 	mov.w	r2, #1
    8318:	731a      	strb	r2, [r3, #12]
	command_buffer.push(byte);
}
    831a:	bc10      	pop	{r4}
    831c:	4770      	bx	lr
    831e:	bf00      	nop

00008320 <command::pop8()>:

uint8_t pop8() {
    8320:	b430      	push	{r4, r5}
		return size - length;
	}

	/// Check if the buffer is empty
	inline const bool isEmpty() const {
		return length == 0;
    8322:	f640 3340 	movw	r3, #2880	; 0xb40
    8326:	f2c1 0300 	movt	r3, #4096	; 0x1000
    832a:	885b      	ldrh	r3, [r3, #2]
    832c:	b29b      	uxth	r3, r3
			overflow = true;
		}
	}
	/// Pop a byte off the head of the buffer
	inline BufDataType pop() {
		if (isEmpty()) {
    832e:	b94b      	cbnz	r3, 8344 <command::pop8()+0x24>
			underflow = true;
    8330:	f640 3340 	movw	r3, #2880	; 0xb40
    8334:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8338:	f04f 0201 	mov.w	r2, #1
    833c:	735a      	strb	r2, [r3, #13]
			return BufDataType();
    833e:	f04f 0000 	mov.w	r0, #0
    8342:	e01c      	b.n	837e <command::pop8()+0x5e>
	inline const bool isEmpty() const {
		return length == 0;
	}
	/// Read the buffer directly
	inline BufDataType& operator[](BufSizeType index) {
		const BufSizeType actual_index = (index + start) % size;
    8344:	f640 3340 	movw	r3, #2880	; 0xb40
    8348:	f2c1 0300 	movt	r3, #4096	; 0x1000
    834c:	8899      	ldrh	r1, [r3, #4]
    834e:	b289      	uxth	r1, r1
    8350:	881a      	ldrh	r2, [r3, #0]
    8352:	fb91 f0f2 	sdiv	r0, r1, r2
    8356:	fb02 1110 	mls	r1, r2, r0, r1
		return data[actual_index];
    835a:	b288      	uxth	r0, r1
    835c:	689c      	ldr	r4, [r3, #8]
		if (isEmpty()) {
			underflow = true;
			return BufDataType();
		}
		const BufDataType& popped_byte = operator[](0);
		start = (start + 1) % size;
    835e:	8899      	ldrh	r1, [r3, #4]
    8360:	b289      	uxth	r1, r1
    8362:	f101 0101 	add.w	r1, r1, #1
    8366:	fb91 f5f2 	sdiv	r5, r1, r2
    836a:	fb02 1215 	mls	r2, r2, r5, r1
    836e:	b292      	uxth	r2, r2
    8370:	809a      	strh	r2, [r3, #4]
		length--;
    8372:	885a      	ldrh	r2, [r3, #2]
    8374:	f102 32ff 	add.w	r2, r2, #4294967295
    8378:	b292      	uxth	r2, r2
    837a:	805a      	strh	r2, [r3, #2]
		return popped_byte;
    837c:	5c20      	ldrb	r0, [r4, r0]
//	sd_count ++;
	return command_buffer.pop();
}
    837e:	bc30      	pop	{r4, r5}
    8380:	4770      	bx	lr
    8382:	bf00      	nop

00008384 <command::pop16()>:

int16_t pop16() {
    8384:	b470      	push	{r4, r5, r6}
		return size - length;
	}

	/// Check if the buffer is empty
	inline const bool isEmpty() const {
		return length == 0;
    8386:	f640 3340 	movw	r3, #2880	; 0xb40
    838a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    838e:	885b      	ldrh	r3, [r3, #2]
    8390:	b29b      	uxth	r3, r3
			overflow = true;
		}
	}
	/// Pop a byte off the head of the buffer
	inline BufDataType pop() {
		if (isEmpty()) {
    8392:	b94b      	cbnz	r3, 83a8 <command::pop16()+0x24>
			underflow = true;
    8394:	f640 3340 	movw	r3, #2880	; 0xb40
    8398:	f2c1 0300 	movt	r3, #4096	; 0x1000
    839c:	f04f 0201 	mov.w	r2, #1
    83a0:	735a      	strb	r2, [r3, #13]
			return BufDataType();
    83a2:	f04f 0300 	mov.w	r3, #0
    83a6:	e01c      	b.n	83e2 <command::pop16()+0x5e>
	inline const bool isEmpty() const {
		return length == 0;
	}
	/// Read the buffer directly
	inline BufDataType& operator[](BufSizeType index) {
		const BufSizeType actual_index = (index + start) % size;
    83a8:	f640 3340 	movw	r3, #2880	; 0xb40
    83ac:	f2c1 0300 	movt	r3, #4096	; 0x1000
    83b0:	8899      	ldrh	r1, [r3, #4]
    83b2:	b289      	uxth	r1, r1
    83b4:	881a      	ldrh	r2, [r3, #0]
    83b6:	fb91 f0f2 	sdiv	r0, r1, r2
    83ba:	fb02 1110 	mls	r1, r2, r0, r1
		return data[actual_index];
    83be:	b288      	uxth	r0, r1
    83c0:	689c      	ldr	r4, [r3, #8]
		if (isEmpty()) {
			underflow = true;
			return BufDataType();
		}
		const BufDataType& popped_byte = operator[](0);
		start = (start + 1) % size;
    83c2:	8899      	ldrh	r1, [r3, #4]
    83c4:	b289      	uxth	r1, r1
    83c6:	f101 0101 	add.w	r1, r1, #1
    83ca:	fb91 f5f2 	sdiv	r5, r1, r2
    83ce:	fb02 1215 	mls	r2, r2, r5, r1
    83d2:	b292      	uxth	r2, r2
    83d4:	809a      	strh	r2, [r3, #4]
		length--;
    83d6:	885a      	ldrh	r2, [r3, #2]
    83d8:	f102 32ff 	add.w	r2, r2, #4294967295
    83dc:	b292      	uxth	r2, r2
    83de:	805a      	strh	r2, [r3, #2]
		return popped_byte;
    83e0:	5c23      	ldrb	r3, [r4, r0]
		int16_t a;
		struct {
			uint8_t data[2];
		} b;
	} shared;
	shared.b.data[0] = command_buffer.pop();
    83e2:	f04f 0000 	mov.w	r0, #0
    83e6:	f363 0007 	bfi	r0, r3, #0, #8
		return size - length;
	}

	/// Check if the buffer is empty
	inline const bool isEmpty() const {
		return length == 0;
    83ea:	f640 3340 	movw	r3, #2880	; 0xb40
    83ee:	f2c1 0300 	movt	r3, #4096	; 0x1000
    83f2:	885b      	ldrh	r3, [r3, #2]
    83f4:	b29b      	uxth	r3, r3
			overflow = true;
		}
	}
	/// Pop a byte off the head of the buffer
	inline BufDataType pop() {
		if (isEmpty()) {
    83f6:	b94b      	cbnz	r3, 840c <command::pop16()+0x88>
			underflow = true;
    83f8:	f640 3340 	movw	r3, #2880	; 0xb40
    83fc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8400:	f04f 0201 	mov.w	r2, #1
    8404:	735a      	strb	r2, [r3, #13]
			return BufDataType();
    8406:	f04f 0300 	mov.w	r3, #0
    840a:	e01c      	b.n	8446 <command::pop16()+0xc2>
	inline const bool isEmpty() const {
		return length == 0;
	}
	/// Read the buffer directly
	inline BufDataType& operator[](BufSizeType index) {
		const BufSizeType actual_index = (index + start) % size;
    840c:	f640 3340 	movw	r3, #2880	; 0xb40
    8410:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8414:	8899      	ldrh	r1, [r3, #4]
    8416:	b289      	uxth	r1, r1
    8418:	881a      	ldrh	r2, [r3, #0]
    841a:	fb91 f4f2 	sdiv	r4, r1, r2
    841e:	fb02 1114 	mls	r1, r2, r4, r1
		return data[actual_index];
    8422:	b28c      	uxth	r4, r1
    8424:	689d      	ldr	r5, [r3, #8]
		if (isEmpty()) {
			underflow = true;
			return BufDataType();
		}
		const BufDataType& popped_byte = operator[](0);
		start = (start + 1) % size;
    8426:	8899      	ldrh	r1, [r3, #4]
    8428:	b289      	uxth	r1, r1
    842a:	f101 0101 	add.w	r1, r1, #1
    842e:	fb91 f6f2 	sdiv	r6, r1, r2
    8432:	fb02 1216 	mls	r2, r2, r6, r1
    8436:	b292      	uxth	r2, r2
    8438:	809a      	strh	r2, [r3, #4]
		length--;
    843a:	885a      	ldrh	r2, [r3, #2]
    843c:	f102 32ff 	add.w	r2, r2, #4294967295
    8440:	b292      	uxth	r2, r2
    8442:	805a      	strh	r2, [r3, #2]
		return popped_byte;
    8444:	5d2b      	ldrb	r3, [r5, r4]
	shared.b.data[1] = command_buffer.pop();
    8446:	f363 200f 	bfi	r0, r3, #8, #8
//	sd_count+=2;
	return shared.a;
}
    844a:	b200      	sxth	r0, r0
    844c:	bc70      	pop	{r4, r5, r6}
    844e:	4770      	bx	lr

00008450 <command::pop32()>:

int32_t pop32() {
    8450:	b470      	push	{r4, r5, r6}
		return size - length;
	}

	/// Check if the buffer is empty
	inline const bool isEmpty() const {
		return length == 0;
    8452:	f640 3340 	movw	r3, #2880	; 0xb40
    8456:	f2c1 0300 	movt	r3, #4096	; 0x1000
    845a:	885b      	ldrh	r3, [r3, #2]
    845c:	b29b      	uxth	r3, r3
			overflow = true;
		}
	}
	/// Pop a byte off the head of the buffer
	inline BufDataType pop() {
		if (isEmpty()) {
    845e:	b94b      	cbnz	r3, 8474 <command::pop32()+0x24>
			underflow = true;
    8460:	f640 3340 	movw	r3, #2880	; 0xb40
    8464:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8468:	f04f 0201 	mov.w	r2, #1
    846c:	735a      	strb	r2, [r3, #13]
			return BufDataType();
    846e:	f04f 0300 	mov.w	r3, #0
    8472:	e01c      	b.n	84ae <command::pop32()+0x5e>
	inline const bool isEmpty() const {
		return length == 0;
	}
	/// Read the buffer directly
	inline BufDataType& operator[](BufSizeType index) {
		const BufSizeType actual_index = (index + start) % size;
    8474:	f640 3340 	movw	r3, #2880	; 0xb40
    8478:	f2c1 0300 	movt	r3, #4096	; 0x1000
    847c:	8899      	ldrh	r1, [r3, #4]
    847e:	b289      	uxth	r1, r1
    8480:	881a      	ldrh	r2, [r3, #0]
    8482:	fb91 f0f2 	sdiv	r0, r1, r2
    8486:	fb02 1110 	mls	r1, r2, r0, r1
		return data[actual_index];
    848a:	b288      	uxth	r0, r1
    848c:	689c      	ldr	r4, [r3, #8]
		if (isEmpty()) {
			underflow = true;
			return BufDataType();
		}
		const BufDataType& popped_byte = operator[](0);
		start = (start + 1) % size;
    848e:	8899      	ldrh	r1, [r3, #4]
    8490:	b289      	uxth	r1, r1
    8492:	f101 0101 	add.w	r1, r1, #1
    8496:	fb91 f5f2 	sdiv	r5, r1, r2
    849a:	fb02 1215 	mls	r2, r2, r5, r1
    849e:	b292      	uxth	r2, r2
    84a0:	809a      	strh	r2, [r3, #4]
		length--;
    84a2:	885a      	ldrh	r2, [r3, #2]
    84a4:	f102 32ff 	add.w	r2, r2, #4294967295
    84a8:	b292      	uxth	r2, r2
    84aa:	805a      	strh	r2, [r3, #2]
		return popped_byte;
    84ac:	5c23      	ldrb	r3, [r4, r0]
		int32_t a;
		struct {
			uint8_t data[4];
		} b;
	} shared;
	shared.b.data[0] = command_buffer.pop();
    84ae:	f04f 0000 	mov.w	r0, #0
    84b2:	f363 0007 	bfi	r0, r3, #0, #8
		return size - length;
	}

	/// Check if the buffer is empty
	inline const bool isEmpty() const {
		return length == 0;
    84b6:	f640 3340 	movw	r3, #2880	; 0xb40
    84ba:	f2c1 0300 	movt	r3, #4096	; 0x1000
    84be:	885b      	ldrh	r3, [r3, #2]
    84c0:	b29b      	uxth	r3, r3
			overflow = true;
		}
	}
	/// Pop a byte off the head of the buffer
	inline BufDataType pop() {
		if (isEmpty()) {
    84c2:	b94b      	cbnz	r3, 84d8 <command::pop32()+0x88>
			underflow = true;
    84c4:	f640 3340 	movw	r3, #2880	; 0xb40
    84c8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    84cc:	f04f 0201 	mov.w	r2, #1
    84d0:	735a      	strb	r2, [r3, #13]
			return BufDataType();
    84d2:	f04f 0300 	mov.w	r3, #0
    84d6:	e01c      	b.n	8512 <command::pop32()+0xc2>
	inline const bool isEmpty() const {
		return length == 0;
	}
	/// Read the buffer directly
	inline BufDataType& operator[](BufSizeType index) {
		const BufSizeType actual_index = (index + start) % size;
    84d8:	f640 3340 	movw	r3, #2880	; 0xb40
    84dc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    84e0:	8899      	ldrh	r1, [r3, #4]
    84e2:	b289      	uxth	r1, r1
    84e4:	881a      	ldrh	r2, [r3, #0]
    84e6:	fb91 f4f2 	sdiv	r4, r1, r2
    84ea:	fb02 1114 	mls	r1, r2, r4, r1
		return data[actual_index];
    84ee:	b28c      	uxth	r4, r1
    84f0:	689d      	ldr	r5, [r3, #8]
		if (isEmpty()) {
			underflow = true;
			return BufDataType();
		}
		const BufDataType& popped_byte = operator[](0);
		start = (start + 1) % size;
    84f2:	8899      	ldrh	r1, [r3, #4]
    84f4:	b289      	uxth	r1, r1
    84f6:	f101 0101 	add.w	r1, r1, #1
    84fa:	fb91 f6f2 	sdiv	r6, r1, r2
    84fe:	fb02 1216 	mls	r2, r2, r6, r1
    8502:	b292      	uxth	r2, r2
    8504:	809a      	strh	r2, [r3, #4]
		length--;
    8506:	885a      	ldrh	r2, [r3, #2]
    8508:	f102 32ff 	add.w	r2, r2, #4294967295
    850c:	b292      	uxth	r2, r2
    850e:	805a      	strh	r2, [r3, #2]
		return popped_byte;
    8510:	5d2b      	ldrb	r3, [r5, r4]
	shared.b.data[1] = command_buffer.pop();
    8512:	f363 200f 	bfi	r0, r3, #8, #8
		return size - length;
	}

	/// Check if the buffer is empty
	inline const bool isEmpty() const {
		return length == 0;
    8516:	f640 3340 	movw	r3, #2880	; 0xb40
    851a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    851e:	885b      	ldrh	r3, [r3, #2]
    8520:	b29b      	uxth	r3, r3
			overflow = true;
		}
	}
	/// Pop a byte off the head of the buffer
	inline BufDataType pop() {
		if (isEmpty()) {
    8522:	b94b      	cbnz	r3, 8538 <command::pop32()+0xe8>
			underflow = true;
    8524:	f640 3340 	movw	r3, #2880	; 0xb40
    8528:	f2c1 0300 	movt	r3, #4096	; 0x1000
    852c:	f04f 0201 	mov.w	r2, #1
    8530:	735a      	strb	r2, [r3, #13]
			return BufDataType();
    8532:	f04f 0300 	mov.w	r3, #0
    8536:	e01c      	b.n	8572 <command::pop32()+0x122>
	inline const bool isEmpty() const {
		return length == 0;
	}
	/// Read the buffer directly
	inline BufDataType& operator[](BufSizeType index) {
		const BufSizeType actual_index = (index + start) % size;
    8538:	f640 3340 	movw	r3, #2880	; 0xb40
    853c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8540:	8899      	ldrh	r1, [r3, #4]
    8542:	b289      	uxth	r1, r1
    8544:	881a      	ldrh	r2, [r3, #0]
    8546:	fb91 f4f2 	sdiv	r4, r1, r2
    854a:	fb02 1114 	mls	r1, r2, r4, r1
		return data[actual_index];
    854e:	b28c      	uxth	r4, r1
    8550:	689d      	ldr	r5, [r3, #8]
		if (isEmpty()) {
			underflow = true;
			return BufDataType();
		}
		const BufDataType& popped_byte = operator[](0);
		start = (start + 1) % size;
    8552:	8899      	ldrh	r1, [r3, #4]
    8554:	b289      	uxth	r1, r1
    8556:	f101 0101 	add.w	r1, r1, #1
    855a:	fb91 f6f2 	sdiv	r6, r1, r2
    855e:	fb02 1216 	mls	r2, r2, r6, r1
    8562:	b292      	uxth	r2, r2
    8564:	809a      	strh	r2, [r3, #4]
		length--;
    8566:	885a      	ldrh	r2, [r3, #2]
    8568:	f102 32ff 	add.w	r2, r2, #4294967295
    856c:	b292      	uxth	r2, r2
    856e:	805a      	strh	r2, [r3, #2]
		return popped_byte;
    8570:	5d2b      	ldrb	r3, [r5, r4]
	shared.b.data[2] = command_buffer.pop();
    8572:	f363 4017 	bfi	r0, r3, #16, #8
		return size - length;
	}

	/// Check if the buffer is empty
	inline const bool isEmpty() const {
		return length == 0;
    8576:	f640 3340 	movw	r3, #2880	; 0xb40
    857a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    857e:	885b      	ldrh	r3, [r3, #2]
    8580:	b29b      	uxth	r3, r3
			overflow = true;
		}
	}
	/// Pop a byte off the head of the buffer
	inline BufDataType pop() {
		if (isEmpty()) {
    8582:	b94b      	cbnz	r3, 8598 <command::pop32()+0x148>
			underflow = true;
    8584:	f640 3340 	movw	r3, #2880	; 0xb40
    8588:	f2c1 0300 	movt	r3, #4096	; 0x1000
    858c:	f04f 0201 	mov.w	r2, #1
    8590:	735a      	strb	r2, [r3, #13]
			return BufDataType();
    8592:	f04f 0300 	mov.w	r3, #0
    8596:	e01c      	b.n	85d2 <command::pop32()+0x182>
	inline const bool isEmpty() const {
		return length == 0;
	}
	/// Read the buffer directly
	inline BufDataType& operator[](BufSizeType index) {
		const BufSizeType actual_index = (index + start) % size;
    8598:	f640 3340 	movw	r3, #2880	; 0xb40
    859c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    85a0:	8899      	ldrh	r1, [r3, #4]
    85a2:	b289      	uxth	r1, r1
    85a4:	881a      	ldrh	r2, [r3, #0]
    85a6:	fb91 f4f2 	sdiv	r4, r1, r2
    85aa:	fb02 1114 	mls	r1, r2, r4, r1
		return data[actual_index];
    85ae:	b28c      	uxth	r4, r1
    85b0:	689d      	ldr	r5, [r3, #8]
		if (isEmpty()) {
			underflow = true;
			return BufDataType();
		}
		const BufDataType& popped_byte = operator[](0);
		start = (start + 1) % size;
    85b2:	8899      	ldrh	r1, [r3, #4]
    85b4:	b289      	uxth	r1, r1
    85b6:	f101 0101 	add.w	r1, r1, #1
    85ba:	fb91 f6f2 	sdiv	r6, r1, r2
    85be:	fb02 1216 	mls	r2, r2, r6, r1
    85c2:	b292      	uxth	r2, r2
    85c4:	809a      	strh	r2, [r3, #4]
		length--;
    85c6:	885a      	ldrh	r2, [r3, #2]
    85c8:	f102 32ff 	add.w	r2, r2, #4294967295
    85cc:	b292      	uxth	r2, r2
    85ce:	805a      	strh	r2, [r3, #2]
		return popped_byte;
    85d0:	5d2b      	ldrb	r3, [r5, r4]
	shared.b.data[3] = command_buffer.pop();
    85d2:	f363 601f 	bfi	r0, r3, #24, #8
//	sd_count+=4;
	return shared.a;
}
    85d6:	bc70      	pop	{r4, r5, r6}
    85d8:	4770      	bx	lr
    85da:	bf00      	nop

000085dc <command::handleMovementCommand(unsigned char const&)>:
	line_number = 0;
}


// Handle movement comands -- called from a few places
static void handleMovementCommand(const uint8_t &command) {
    85dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    85e0:	b08f      	sub	sp, #60	; 0x3c
    85e2:	4604      	mov	r4, r0
	// if we're already moving, check to make sure the buffer isn't full
	if (/*mode == MOVING && */planner::isBufferFull()) {
    85e4:	f004 fc20 	bl	ce28 <planner::isBufferFull()>
    85e8:	2800      	cmp	r0, #0
    85ea:	f040 8085 	bne.w	86f8 <command::handleMovementCommand(unsigned char const&)+0x11c>
		return; // we'll be back!
	}
	if (command == HOST_CMD_QUEUE_POINT_EXT) {
    85ee:	7823      	ldrb	r3, [r4, #0]
    85f0:	2b8b      	cmp	r3, #139	; 0x8b
    85f2:	d13d      	bne.n	8670 <command::handleMovementCommand(unsigned char const&)+0x94>
		length -= sz;
	}

	/// Get the length of the buffer
	inline const BufSizeType getLength() const {
		return length;
    85f4:	f640 3340 	movw	r3, #2880	; 0xb40
    85f8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    85fc:	885b      	ldrh	r3, [r3, #2]
    85fe:	b29b      	uxth	r3, r3
		// check for completion
		if (command_buffer.getLength() >= 25) {
    8600:	2b18      	cmp	r3, #24
    8602:	d979      	bls.n	86f8 <command::handleMovementCommand(unsigned char const&)+0x11c>
			Motherboard::getBoard().resetUserInputTimeout();
    8604:	f640 509c 	movw	r0, #3484	; 0xd9c
    8608:	f2c1 0000 	movt	r0, #4096	; 0x1000
    860c:	f003 fa90 	bl	bb30 <Motherboard::resetUserInputTimeout()>
			pop8(); // remove the command code
    8610:	f7ff fe86 	bl	8320 <command::pop8()>
			mode = MOVING;
    8614:	f640 03e6 	movw	r3, #2278	; 0x8e6
    8618:	f2c1 0300 	movt	r3, #4096	; 0x1000
    861c:	f04f 0201 	mov.w	r2, #1
    8620:	701a      	strb	r2, [r3, #0]

			int32_t x = pop32();
    8622:	f7ff ff15 	bl	8450 <command::pop32()>
    8626:	4606      	mov	r6, r0
			int32_t y = pop32();
    8628:	f7ff ff12 	bl	8450 <command::pop32()>
    862c:	4607      	mov	r7, r0
			int32_t z = pop32();
    862e:	f7ff ff0f 	bl	8450 <command::pop32()>
    8632:	4680      	mov	r8, r0
			int32_t a = pop32();
    8634:	f7ff ff0c 	bl	8450 <command::pop32()>
    8638:	4605      	mov	r5, r0
			int32_t b = pop32();
    863a:	f7ff ff09 	bl	8450 <command::pop32()>
    863e:	4604      	mov	r4, r0
			int32_t dda = pop32();
    8640:	f7ff ff06 	bl	8450 <command::pop32()>
    8644:	9003      	str	r0, [sp, #12]

			line_number++;
    8646:	f640 3350 	movw	r3, #2896	; 0xb50
    864a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    864e:	681a      	ldr	r2, [r3, #0]
    8650:	f102 0201 	add.w	r2, r2, #1
    8654:	601a      	str	r2, [r3, #0]
		
			planner::addMoveToBuffer(Point(x,y,z,a,b), dda);
    8656:	9500      	str	r5, [sp, #0]
    8658:	9401      	str	r4, [sp, #4]
    865a:	a804      	add	r0, sp, #16
    865c:	4631      	mov	r1, r6
    865e:	463a      	mov	r2, r7
    8660:	4643      	mov	r3, r8
    8662:	f005 fa61 	bl	db28 <Point::Point(long, long, long, long, long)>
    8666:	a804      	add	r0, sp, #16
    8668:	a903      	add	r1, sp, #12
    866a:	f004 fef9 	bl	d460 <planner::addMoveToBuffer(Point const&, long const&)>
    866e:	e043      	b.n	86f8 <command::handleMovementCommand(unsigned char const&)+0x11c>
		}
	}
	 else if (command == HOST_CMD_QUEUE_POINT_NEW) {
    8670:	2b8e      	cmp	r3, #142	; 0x8e
    8672:	d141      	bne.n	86f8 <command::handleMovementCommand(unsigned char const&)+0x11c>
    8674:	f640 3340 	movw	r3, #2880	; 0xb40
    8678:	f2c1 0300 	movt	r3, #4096	; 0x1000
    867c:	885b      	ldrh	r3, [r3, #2]
    867e:	b29b      	uxth	r3, r3
		// check for completion
		if (command_buffer.getLength() >= 26) {
    8680:	2b19      	cmp	r3, #25
    8682:	d939      	bls.n	86f8 <command::handleMovementCommand(unsigned char const&)+0x11c>
			Motherboard::getBoard().resetUserInputTimeout();
    8684:	f640 509c 	movw	r0, #3484	; 0xd9c
    8688:	f2c1 0000 	movt	r0, #4096	; 0x1000
    868c:	f003 fa50 	bl	bb30 <Motherboard::resetUserInputTimeout()>
			pop8(); // remove the command code
    8690:	f7ff fe46 	bl	8320 <command::pop8()>
			mode = MOVING;
    8694:	f640 03e6 	movw	r3, #2278	; 0x8e6
    8698:	f2c1 0300 	movt	r3, #4096	; 0x1000
    869c:	f04f 0201 	mov.w	r2, #1
    86a0:	701a      	strb	r2, [r3, #0]
			
			int32_t x = pop32();
    86a2:	f7ff fed5 	bl	8450 <command::pop32()>
    86a6:	4606      	mov	r6, r0
			int32_t y = pop32();
    86a8:	f7ff fed2 	bl	8450 <command::pop32()>
    86ac:	4607      	mov	r7, r0
			int32_t z = pop32();
    86ae:	f7ff fecf 	bl	8450 <command::pop32()>
    86b2:	4680      	mov	r8, r0
			int32_t a = pop32();
    86b4:	f7ff fecc 	bl	8450 <command::pop32()>
    86b8:	4605      	mov	r5, r0
			int32_t b = pop32();
    86ba:	f7ff fec9 	bl	8450 <command::pop32()>
    86be:	4604      	mov	r4, r0
			int32_t us = pop32();
    86c0:	f7ff fec6 	bl	8450 <command::pop32()>
    86c4:	9003      	str	r0, [sp, #12]
			int32_t relative = pop8();
    86c6:	f7ff fe2b 	bl	8320 <command::pop8()>
    86ca:	4681      	mov	r9, r0

			line_number++;
    86cc:	f640 3350 	movw	r3, #2896	; 0xb50
    86d0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    86d4:	681a      	ldr	r2, [r3, #0]
    86d6:	f102 0201 	add.w	r2, r2, #1
    86da:	601a      	str	r2, [r3, #0]
			
			planner::addMoveToBufferRelative(Point(x,y,z,a,b), us, relative);
    86dc:	9500      	str	r5, [sp, #0]
    86de:	9401      	str	r4, [sp, #4]
    86e0:	a809      	add	r0, sp, #36	; 0x24
    86e2:	4631      	mov	r1, r6
    86e4:	463a      	mov	r2, r7
    86e6:	4643      	mov	r3, r8
    86e8:	f005 fa1e 	bl	db28 <Point::Point(long, long, long, long, long)>
    86ec:	a809      	add	r0, sp, #36	; 0x24
    86ee:	a903      	add	r1, sp, #12
    86f0:	fa4f f289 	sxtb.w	r2, r9
    86f4:	f004 fefc 	bl	d4f0 <planner::addMoveToBufferRelative(Point const&, long const&, signed char)>
		}
	}
	
}
    86f8:	b00f      	add	sp, #60	; 0x3c
    86fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    86fe:	bf00      	nop

00008700 <command::reset()>:
	}

	/// Reset the buffer to its empty state.  All data in
	/// the buffer will be (effectively) lost.
	inline void reset() {
		length = 0;
    8700:	f640 3240 	movw	r2, #2880	; 0xb40
    8704:	f2c1 0200 	movt	r2, #4096	; 0x1000
    8708:	f04f 0100 	mov.w	r1, #0
    870c:	8051      	strh	r1, [r2, #2]
		start = 0;
    870e:	8091      	strh	r1, [r2, #4]
		overflow = false;
    8710:	7311      	strb	r1, [r2, #12]
		underflow = false;
    8712:	7351      	strb	r1, [r2, #13]

bool sdcard_reset = false;

void reset() {
	command_buffer.reset();
	line_number = 0;
    8714:	f640 3250 	movw	r2, #2896	; 0xb50
    8718:	f2c1 0200 	movt	r2, #4096	; 0x1000
    871c:	6011      	str	r1, [r2, #0]
	check_temp_state = false;
    871e:	f640 02e4 	movw	r2, #2276	; 0x8e4
    8722:	f2c1 0200 	movt	r2, #4096	; 0x1000
    8726:	7011      	strb	r1, [r2, #0]
	paused = false;
    8728:	f640 3268 	movw	r2, #2920	; 0xb68
    872c:	f2c1 0200 	movt	r2, #4096	; 0x1000
    8730:	7011      	strb	r1, [r2, #0]
	sd_count = 0;
    8732:	f640 02f8 	movw	r2, #2296	; 0x8f8
    8736:	f2c1 0200 	movt	r2, #4096	; 0x1000
    873a:	6011      	str	r1, [r2, #0]
	sdcard_reset = false;
    873c:	f640 3254 	movw	r2, #2900	; 0xb54
    8740:	f2c1 0200 	movt	r2, #4096	; 0x1000
    8744:	7011      	strb	r1, [r2, #0]
	mode = READY;
    8746:	f640 02e6 	movw	r2, #2278	; 0x8e6
    874a:	f2c1 0200 	movt	r2, #4096	; 0x1000
    874e:	7011      	strb	r1, [r2, #0]
}
    8750:	4770      	bx	lr
    8752:	bf00      	nop

00008754 <command::getLineNumber()>:
bool isReady() {
    return (mode == READY);
}

uint32_t getLineNumber() {
	return line_number;	
    8754:	f640 3350 	movw	r3, #2896	; 0xb50
    8758:	f2c1 0300 	movt	r3, #4096	; 0x1000
}
    875c:	6818      	ldr	r0, [r3, #0]
    875e:	4770      	bx	lr

00008760 <command::clearLineNumber()>:

void clearLineNumber() {
	line_number = 0;
    8760:	f640 3350 	movw	r3, #2896	; 0xb50
    8764:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8768:	f04f 0200 	mov.w	r2, #0
    876c:	601a      	str	r2, [r3, #0]
}
    876e:	4770      	bx	lr

00008770 <command::processExtruderCommandPacket()>:
		}
	}
	
}

bool processExtruderCommandPacket() {
    8770:	b538      	push	{r3, r4, r5, lr}
	Motherboard& board = Motherboard::getBoard();
        uint8_t	id = pop8();
    8772:	f7ff fdd5 	bl	8320 <command::pop8()>
    8776:	4605      	mov	r5, r0
		uint8_t command = pop8();
    8778:	f7ff fdd2 	bl	8320 <command::pop8()>
    877c:	4604      	mov	r4, r0
		uint8_t length = pop8();
    877e:	f7ff fdcf 	bl	8320 <command::pop8()>

		switch (command) {
    8782:	f1a4 0403 	sub.w	r4, r4, #3
    8786:	2c1c      	cmp	r4, #28
    8788:	f200 80d1 	bhi.w	892e <command::processExtruderCommandPacket()+0x1be>
    878c:	e8df f014 	tbh	[pc, r4, lsl #1]
    8790:	00a7001d 	.word	0x00a7001d
    8794:	00bb00ac 	.word	0x00bb00ac
    8798:	00b100c0 	.word	0x00b100c0
    879c:	009d00b6 	.word	0x009d00b6
    87a0:	005600a2 	.word	0x005600a2
    87a4:	00c50067 	.word	0x00c50067
    87a8:	00cf00ca 	.word	0x00cf00ca
    87ac:	00cf00cf 	.word	0x00cf00cf
    87b0:	00cf00cf 	.word	0x00cf00cf
    87b4:	00cf00cf 	.word	0x00cf00cf
    87b8:	00cf004c 	.word	0x00cf004c
    87bc:	00cf00cf 	.word	0x00cf00cf
    87c0:	00cf00cf 	.word	0x00cf00cf
    87c4:	00cf00cf 	.word	0x00cf00cf
    87c8:	0074      	.short	0x0074
        static Motherboard motherboard;

public:
        /// Get the motherboard instance.
        static Motherboard& getBoard() { return motherboard; }
       ExtruderBoard& getExtruderBoard(uint8_t id) { if(id == 1){ return Extruder_Two;} else  { return Extruder_One;} }
    87ca:	4b62      	ldr	r3, [pc, #392]	; (8954 <command::processExtruderCommandPacket()+0x1e4>)
    87cc:	f1a3 04e0 	sub.w	r4, r3, #224	; 0xe0
    87d0:	2d01      	cmp	r5, #1
    87d2:	bf08      	it	eq
    87d4:	461c      	moveq	r4, r3
		case SLAVE_CMD_SET_TEMP:
//			xprintf("SLAVE_CMD_SET_TEMP" " (%s:%d)\n",_F_,_L_);
			board.getExtruderBoard(id).getExtruderHeater().set_target_temperature(pop16());
    87d6:	f7ff fdd5 	bl	8384 <command::pop16()>
    87da:	4601      	mov	r1, r0
    87dc:	f104 0028 	add.w	r0, r4, #40	; 0x28
    87e0:	f008 ff38 	bl	11654 <Heater::set_target_temperature(int)>
			/// if platform is actively heating and extruder is not cooling down, pause extruder
			if(board.getPlatformHeater().isHeating() && !board.getPlatformHeater().isCooling() && !board.getExtruderBoard(id).getExtruderHeater().isCooling()){
    87e4:	485c      	ldr	r0, [pc, #368]	; (8958 <command::processExtruderCommandPacket()+0x1e8>)
    87e6:	f008 ffc7 	bl	11778 <Heater::isHeating()>
    87ea:	2800      	cmp	r0, #0
    87ec:	f000 80a2 	beq.w	8934 <command::processExtruderCommandPacket()+0x1c4>
    87f0:	4859      	ldr	r0, [pc, #356]	; (8958 <command::processExtruderCommandPacket()+0x1e8>)
    87f2:	f008 ffd5 	bl	117a0 <Heater::isCooling()>
    87f6:	2800      	cmp	r0, #0
    87f8:	f040 809c 	bne.w	8934 <command::processExtruderCommandPacket()+0x1c4>
    87fc:	f104 0028 	add.w	r0, r4, #40	; 0x28
    8800:	f008 ffce 	bl	117a0 <Heater::isCooling()>
    8804:	2800      	cmp	r0, #0
    8806:	f040 8095 	bne.w	8934 <command::processExtruderCommandPacket()+0x1c4>
				check_temp_state = true;
    880a:	f640 03e4 	movw	r3, #2276	; 0x8e4
    880e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8812:	f04f 0201 	mov.w	r2, #1
    8816:	701a      	strb	r2, [r3, #0]
				board.getExtruderBoard(id).getExtruderHeater().Pause(true);
    8818:	f104 0028 	add.w	r0, r4, #40	; 0x28
    881c:	4611      	mov	r1, r2
    881e:	f008 ffdd 	bl	117dc <Heater::Pause(bool)>
			}  /// else ensure extruder is not paused  
			else {
				board.getExtruderBoard(id).getExtruderHeater().Pause(false);
			}
			return true;
    8822:	f04f 0001 	mov.w	r0, #1
    8826:	bd38      	pop	{r3, r4, r5, pc}
		// can be removed in process via host query works OK
 		case SLAVE_CMD_PAUSE_UNPAUSE:
			host::pauseBuild(!command::isPaused());
    8828:	f7ff fd3e 	bl	82a8 <command::isPaused()>
    882c:	f080 0001 	eor.w	r0, r0, #1
    8830:	b2c0      	uxtb	r0, r0
    8832:	f001 fea7 	bl	a584 <host::pauseBuild(bool)>
			return true;
    8836:	f04f 0001 	mov.w	r0, #1
    883a:	bd38      	pop	{r3, r4, r5, pc}
    883c:	4b45      	ldr	r3, [pc, #276]	; (8954 <command::processExtruderCommandPacket()+0x1e4>)
    883e:	f1a3 02e0 	sub.w	r2, r3, #224	; 0xe0
    8842:	2d01      	cmp	r5, #1
    8844:	bf14      	ite	ne
    8846:	4615      	movne	r5, r2
    8848:	461d      	moveq	r5, r3
		case SLAVE_CMD_TOGGLE_FAN:
			board.getExtruderBoard(id).setFan((pop8() & 0x01) != 0);
    884a:	f7ff fd69 	bl	8320 <command::pop8()>
    884e:	f000 0101 	and.w	r1, r0, #1
    8852:	4628      	mov	r0, r5
    8854:	f001 fc58 	bl	a108 <ExtruderBoard::setFan(unsigned char)>
			return true;
    8858:	f04f 0001 	mov.w	r0, #1
    885c:	bd38      	pop	{r3, r4, r5, pc}
		case SLAVE_CMD_TOGGLE_VALVE:
			board.setValve((pop8() & 0x01) != 0);
    885e:	f7ff fd5f 	bl	8320 <command::pop8()>
    8862:	f000 0101 	and.w	r1, r0, #1
    8866:	f640 509c 	movw	r0, #3484	; 0xd9c
    886a:	f2c1 0000 	movt	r0, #4096	; 0x1000
    886e:	f003 fd7b 	bl	c368 <Motherboard::setValve(bool)>
			return true;
    8872:	f04f 0001 	mov.w	r0, #1
    8876:	bd38      	pop	{r3, r4, r5, pc}
		case SLAVE_CMD_SET_PLATFORM_TEMP:
//			xprintf("SLAVE_CMD_SET_PLATFORM_TEMP" " (%s:%d)\n",_F_,_L_);
			board.setUsingPlatform(true);
    8878:	f640 549c 	movw	r4, #3484	; 0xd9c
    887c:	f2c1 0400 	movt	r4, #4096	; 0x1000
    8880:	4620      	mov	r0, r4
    8882:	f04f 0101 	mov.w	r1, #1
    8886:	f003 fd6b 	bl	c360 <Motherboard::setUsingPlatform(bool)>
			board.getPlatformHeater().set_target_temperature(pop16());
    888a:	f7ff fd7b 	bl	8384 <command::pop16()>
    888e:	4601      	mov	r1, r0
    8890:	f504 7503 	add.w	r5, r4, #524	; 0x20c
    8894:	4628      	mov	r0, r5
    8896:	f008 fedd 	bl	11654 <Heater::set_target_temperature(int)>
			// pause extruder heaters platform is heating up
			bool pause_state; /// avr-gcc doesn't allow cross-initializtion of variables within a switch statement
			pause_state = false;
			if(!board.getPlatformHeater().isCooling()){
    889a:	4628      	mov	r0, r5
    889c:	f008 ff80 	bl	117a0 <Heater::isCooling()>
		}
	}
	
}

bool processExtruderCommandPacket() {
    88a0:	f080 0001 	eor.w	r0, r0, #1
    88a4:	b2c5      	uxtb	r5, r0
			bool pause_state; /// avr-gcc doesn't allow cross-initializtion of variables within a switch statement
			pause_state = false;
			if(!board.getPlatformHeater().isCooling()){
				pause_state = true;
			}
			check_temp_state = pause_state;
    88a6:	f640 03e4 	movw	r3, #2276	; 0x8e4
    88aa:	f2c1 0300 	movt	r3, #4096	; 0x1000
    88ae:	701d      	strb	r5, [r3, #0]
			board.getExtruderBoard(0).getExtruderHeater().Pause(pause_state);
    88b0:	f104 0050 	add.w	r0, r4, #80	; 0x50
    88b4:	4629      	mov	r1, r5
    88b6:	f008 ff91 	bl	117dc <Heater::Pause(bool)>
			board.getExtruderBoard(1).getExtruderHeater().Pause(pause_state);
    88ba:	f504 7098 	add.w	r0, r4, #304	; 0x130
    88be:	4629      	mov	r1, r5
    88c0:	f008 ff8c 	bl	117dc <Heater::Pause(bool)>
			
			return true;
    88c4:	f04f 0001 	mov.w	r0, #1
    88c8:	bd38      	pop	{r3, r4, r5, pc}
        // not being used with 5D
		case SLAVE_CMD_TOGGLE_MOTOR_1:
			pop8();
    88ca:	f7ff fd29 	bl	8320 <command::pop8()>
			return true;
    88ce:	f04f 0001 	mov.w	r0, #1
    88d2:	bd38      	pop	{r3, r4, r5, pc}
        // not being used with 5D
		case SLAVE_CMD_TOGGLE_MOTOR_2: 
			pop8();
    88d4:	f7ff fd24 	bl	8320 <command::pop8()>
			return true;
    88d8:	f04f 0001 	mov.w	r0, #1
    88dc:	bd38      	pop	{r3, r4, r5, pc}
		case SLAVE_CMD_SET_MOTOR_1_PWM:
//			xprintf("SLAVE_CMD_SET_MOTOR_1_PWM" " (%s:%d)\n",_F_,_L_);
			pop8();
    88de:	f7ff fd1f 	bl	8320 <command::pop8()>
			return true;
    88e2:	f04f 0001 	mov.w	r0, #1
    88e6:	bd38      	pop	{r3, r4, r5, pc}
		case SLAVE_CMD_SET_MOTOR_2_PWM:
			pop8();
    88e8:	f7ff fd1a 	bl	8320 <command::pop8()>
			return true;
    88ec:	f04f 0001 	mov.w	r0, #1
    88f0:	bd38      	pop	{r3, r4, r5, pc}
		case SLAVE_CMD_SET_MOTOR_1_DIR:
			pop8();
    88f2:	f7ff fd15 	bl	8320 <command::pop8()>
			return true;
    88f6:	f04f 0001 	mov.w	r0, #1
    88fa:	bd38      	pop	{r3, r4, r5, pc}
		case SLAVE_CMD_SET_MOTOR_2_DIR:
			pop8();
    88fc:	f7ff fd10 	bl	8320 <command::pop8()>
			return true;
    8900:	f04f 0001 	mov.w	r0, #1
    8904:	bd38      	pop	{r3, r4, r5, pc}
		case SLAVE_CMD_SET_MOTOR_1_RPM:
			pop32();
    8906:	f7ff fda3 	bl	8450 <command::pop32()>
			return true;
    890a:	f04f 0001 	mov.w	r0, #1
    890e:	bd38      	pop	{r3, r4, r5, pc}
		case SLAVE_CMD_SET_MOTOR_2_RPM:
			pop32();
    8910:	f7ff fd9e 	bl	8450 <command::pop32()>
			return true;
    8914:	f04f 0001 	mov.w	r0, #1
    8918:	bd38      	pop	{r3, r4, r5, pc}
		case SLAVE_CMD_SET_SERVO_1_POS:
			pop8();
    891a:	f7ff fd01 	bl	8320 <command::pop8()>
			return true;
    891e:	f04f 0001 	mov.w	r0, #1
    8922:	bd38      	pop	{r3, r4, r5, pc}
		case SLAVE_CMD_SET_SERVO_2_POS:
			pop8();
    8924:	f7ff fcfc 	bl	8320 <command::pop8()>
			return true;
    8928:	f04f 0001 	mov.w	r0, #1
    892c:	bd38      	pop	{r3, r4, r5, pc}
		}
	return false;
    892e:	f04f 0000 	mov.w	r0, #0
}
    8932:	bd38      	pop	{r3, r4, r5, pc}
    8934:	4b07      	ldr	r3, [pc, #28]	; (8954 <command::processExtruderCommandPacket()+0x1e4>)
    8936:	f1a3 00e0 	sub.w	r0, r3, #224	; 0xe0
    893a:	2d01      	cmp	r5, #1
    893c:	bf08      	it	eq
    893e:	4618      	moveq	r0, r3
			if(board.getPlatformHeater().isHeating() && !board.getPlatformHeater().isCooling() && !board.getExtruderBoard(id).getExtruderHeater().isCooling()){
				check_temp_state = true;
				board.getExtruderBoard(id).getExtruderHeater().Pause(true);
			}  /// else ensure extruder is not paused  
			else {
				board.getExtruderBoard(id).getExtruderHeater().Pause(false);
    8940:	f100 0028 	add.w	r0, r0, #40	; 0x28
    8944:	f04f 0100 	mov.w	r1, #0
    8948:	f008 ff48 	bl	117dc <Heater::Pause(bool)>
			}
			return true;
    894c:	f04f 0001 	mov.w	r0, #1
    8950:	bd38      	pop	{r3, r4, r5, pc}
    8952:	bf00      	nop
    8954:	10000ea4 	.word	0x10000ea4
    8958:	10000fa8 	.word	0x10000fa8

0000895c <command::runCommandSlice()>:
	return false;
}


// A fast slice for processing commands and refilling the stepper queue, etc.
void runCommandSlice() {
    895c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8960:	b096      	sub	sp, #88	; 0x58
    // get command from SD card if building from SD
	if (sdcard::isPlaying()) {
    8962:	f005 fd7d 	bl	e460 <sdcard::isPlaying()>
    8966:	b9a0      	cbnz	r0, 8992 <command::runCommandSlice()+0x36>
    8968:	e063      	b.n	8a32 <command::runCommandSlice()+0xd6>
	}
	/// Append a byte to the tail of the buffer
	inline void push(BufDataType b) {
		if (length < size) {
			operator[](length) = b;
    896a:	8861      	ldrh	r1, [r4, #2]
    896c:	b289      	uxth	r1, r1
	inline const bool isEmpty() const {
		return length == 0;
	}
	/// Read the buffer directly
	inline BufDataType& operator[](BufSizeType index) {
		const BufSizeType actual_index = (index + start) % size;
    896e:	88a2      	ldrh	r2, [r4, #4]
    8970:	b292      	uxth	r2, r2
    8972:	188a      	adds	r2, r1, r2
    8974:	fb92 f1f3 	sdiv	r1, r2, r3
    8978:	fb03 2311 	mls	r3, r3, r1, r2
		return data[actual_index];
    897c:	b29b      	uxth	r3, r3
		underflow = false;
	}
	/// Append a byte to the tail of the buffer
	inline void push(BufDataType b) {
		if (length < size) {
			operator[](length) = b;
    897e:	68a2      	ldr	r2, [r4, #8]
    8980:	54d0      	strb	r0, [r2, r3]
			length++;
    8982:	8863      	ldrh	r3, [r4, #2]
    8984:	f103 0301 	add.w	r3, r3, #1
    8988:	b29b      	uxth	r3, r3
    898a:	8063      	strh	r3, [r4, #2]
    898c:	e00b      	b.n	89a6 <command::runCommandSlice()+0x4a>
		} else {
			overflow = true;
    898e:	7326      	strb	r6, [r4, #12]
    8990:	e009      	b.n	89a6 <command::runCommandSlice()+0x4a>
		return length;
	}

	/// Get the remaining capacity of this buffer
	inline const BufSizeType getRemainingCapacity() const {
		return size - length;
    8992:	f640 3440 	movw	r4, #2880	; 0xb40
    8996:	f2c1 0400 	movt	r4, #4096	; 0x1000
		while (command_buffer.getRemainingCapacity() > 0 && sdcard::playbackHasNext()) {
			sd_count++;
    899a:	f640 05f8 	movw	r5, #2296	; 0x8f8
    899e:	f2c1 0500 	movt	r5, #4096	; 0x1000
	inline void push(BufDataType b) {
		if (length < size) {
			operator[](length) = b;
			length++;
		} else {
			overflow = true;
    89a2:	f04f 0601 	mov.w	r6, #1
		return length;
	}

	/// Get the remaining capacity of this buffer
	inline const BufSizeType getRemainingCapacity() const {
		return size - length;
    89a6:	8863      	ldrh	r3, [r4, #2]
    89a8:	b29b      	uxth	r3, r3

// A fast slice for processing commands and refilling the stepper queue, etc.
void runCommandSlice() {
    // get command from SD card if building from SD
	if (sdcard::isPlaying()) {
		while (command_buffer.getRemainingCapacity() > 0 && sdcard::playbackHasNext()) {
    89aa:	8822      	ldrh	r2, [r4, #0]
    89ac:	429a      	cmp	r2, r3
    89ae:	f000 8584 	beq.w	94ba <command::runCommandSlice()+0xb5e>
    89b2:	f005 fdd1 	bl	e558 <sdcard::playbackHasNext()>
    89b6:	2800      	cmp	r0, #0
    89b8:	f000 857f 	beq.w	94ba <command::runCommandSlice()+0xb5e>
			sd_count++;
    89bc:	682b      	ldr	r3, [r5, #0]
    89be:	f103 0301 	add.w	r3, r3, #1
    89c2:	602b      	str	r3, [r5, #0]
			command_buffer.push(sdcard::playbackNext());
    89c4:	f005 fdce 	bl	e564 <sdcard::playbackNext()>
		overflow = false;
		underflow = false;
	}
	/// Append a byte to the tail of the buffer
	inline void push(BufDataType b) {
		if (length < size) {
    89c8:	8862      	ldrh	r2, [r4, #2]
    89ca:	b292      	uxth	r2, r2
    89cc:	8823      	ldrh	r3, [r4, #0]
    89ce:	429a      	cmp	r2, r3
    89d0:	d3cb      	bcc.n	896a <command::runCommandSlice()+0xe>
    89d2:	e7dc      	b.n	898e <command::runCommandSlice()+0x32>
		}
		if(!sdcard::playbackHasNext() && (sd_count < sdcard::getFileSize()) && !sdcard_reset){
    89d4:	f005 fd14 	bl	e400 <sdcard::getFileSize()>
    89d8:	f640 03f8 	movw	r3, #2296	; 0x8f8
    89dc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    89e0:	681b      	ldr	r3, [r3, #0]
    89e2:	4298      	cmp	r0, r3
    89e4:	f240 856e 	bls.w	94c4 <command::runCommandSlice()+0xb68>
    89e8:	f640 3354 	movw	r3, #2900	; 0xb54
    89ec:	f2c1 0300 	movt	r3, #4096	; 0x1000
    89f0:	781b      	ldrb	r3, [r3, #0]
    89f2:	2b00      	cmp	r3, #0
    89f4:	f040 8566 	bne.w	94c4 <command::runCommandSlice()+0xb68>
			
//			Motherboard::getBoard().getInterfaceBoard().resetLCD();
			Motherboard::getBoard().errorResponse(STATICFAIL_MSG);
    89f8:	f640 509c 	movw	r0, #3484	; 0xd9c
    89fc:	f2c1 0000 	movt	r0, #4096	; 0x1000
    8a00:	f247 3108 	movw	r1, #29448	; 0x7308
    8a04:	f2c0 0102 	movt	r1, #2
    8a08:	f04f 0200 	mov.w	r2, #0
    8a0c:	f003 f91a 	bl	bc44 <Motherboard::errorResponse(char*, bool)>
			sdcard_reset = true;
    8a10:	f640 3354 	movw	r3, #2900	; 0xb54
    8a14:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8a18:	f04f 0201 	mov.w	r2, #1
    8a1c:	701a      	strb	r2, [r3, #0]
    8a1e:	e008      	b.n	8a32 <command::runCommandSlice()+0xd6>
		return size - length;
	}

	/// Check if the buffer is empty
	inline const bool isEmpty() const {
		return length == 0;
    8a20:	f640 3340 	movw	r3, #2880	; 0xb40
    8a24:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8a28:	885b      	ldrh	r3, [r3, #2]
    8a2a:	b29b      	uxth	r3, r3
			//sdcard::startPlayback(host::getBuildName());
			//uint32_t count;
			//while(count < sd_count){
			//	sdcard::playbackNext();
			//}
		}else if(!sdcard::playbackHasNext() && command_buffer.isEmpty()){
    8a2c:	b90b      	cbnz	r3, 8a32 <command::runCommandSlice()+0xd6>
			sdcard::finishPlayback();
    8a2e:	f005 fda3 	bl	e578 <sdcard::finishPlayback()>
		}
	}
    // get command from onboard script if building from onboard
	if(utility::isPlaying()){		
    8a32:	f008 f965 	bl	10d00 <utility::isPlaying()>
    8a36:	b9a0      	cbnz	r0, 8a62 <command::runCommandSlice()+0x106>
    8a38:	e035      	b.n	8aa6 <command::runCommandSlice()+0x14a>
		underflow = false;
	}
	/// Append a byte to the tail of the buffer
	inline void push(BufDataType b) {
		if (length < size) {
			operator[](length) = b;
    8a3a:	8861      	ldrh	r1, [r4, #2]
    8a3c:	b289      	uxth	r1, r1
	inline const bool isEmpty() const {
		return length == 0;
	}
	/// Read the buffer directly
	inline BufDataType& operator[](BufSizeType index) {
		const BufSizeType actual_index = (index + start) % size;
    8a3e:	88a2      	ldrh	r2, [r4, #4]
    8a40:	b292      	uxth	r2, r2
    8a42:	188a      	adds	r2, r1, r2
    8a44:	fb92 f1f3 	sdiv	r1, r2, r3
    8a48:	fb03 2311 	mls	r3, r3, r1, r2
		return data[actual_index];
    8a4c:	b29b      	uxth	r3, r3
		underflow = false;
	}
	/// Append a byte to the tail of the buffer
	inline void push(BufDataType b) {
		if (length < size) {
			operator[](length) = b;
    8a4e:	68a2      	ldr	r2, [r4, #8]
    8a50:	54d0      	strb	r0, [r2, r3]
			length++;
    8a52:	8863      	ldrh	r3, [r4, #2]
    8a54:	f103 0301 	add.w	r3, r3, #1
    8a58:	b29b      	uxth	r3, r3
    8a5a:	8063      	strh	r3, [r4, #2]
    8a5c:	e007      	b.n	8a6e <command::runCommandSlice()+0x112>
		} else {
			overflow = true;
    8a5e:	7325      	strb	r5, [r4, #12]
    8a60:	e005      	b.n	8a6e <command::runCommandSlice()+0x112>
		return length;
	}

	/// Get the remaining capacity of this buffer
	inline const BufSizeType getRemainingCapacity() const {
		return size - length;
    8a62:	f640 3440 	movw	r4, #2880	; 0xb40
    8a66:	f2c1 0400 	movt	r4, #4096	; 0x1000
	inline void push(BufDataType b) {
		if (length < size) {
			operator[](length) = b;
			length++;
		} else {
			overflow = true;
    8a6a:	f04f 0501 	mov.w	r5, #1
		return length;
	}

	/// Get the remaining capacity of this buffer
	inline const BufSizeType getRemainingCapacity() const {
		return size - length;
    8a6e:	8863      	ldrh	r3, [r4, #2]
    8a70:	b29b      	uxth	r3, r3
		while (command_buffer.getRemainingCapacity() > 0 && utility::playbackHasNext()){
    8a72:	8822      	ldrh	r2, [r4, #0]
    8a74:	429a      	cmp	r2, r3
    8a76:	f000 852c 	beq.w	94d2 <command::runCommandSlice()+0xb76>
    8a7a:	f008 f94f 	bl	10d1c <utility::playbackHasNext()>
    8a7e:	2800      	cmp	r0, #0
    8a80:	f000 8527 	beq.w	94d2 <command::runCommandSlice()+0xb76>
			command_buffer.push(utility::playbackNext());
    8a84:	f008 f95a 	bl	10d3c <utility::playbackNext()>
		overflow = false;
		underflow = false;
	}
	/// Append a byte to the tail of the buffer
	inline void push(BufDataType b) {
		if (length < size) {
    8a88:	8862      	ldrh	r2, [r4, #2]
    8a8a:	b292      	uxth	r2, r2
    8a8c:	8823      	ldrh	r3, [r4, #0]
    8a8e:	429a      	cmp	r2, r3
    8a90:	d3d3      	bcc.n	8a3a <command::runCommandSlice()+0xde>
    8a92:	e7e4      	b.n	8a5e <command::runCommandSlice()+0x102>
		return size - length;
	}

	/// Check if the buffer is empty
	inline const bool isEmpty() const {
		return length == 0;
    8a94:	f640 3340 	movw	r3, #2880	; 0xb40
    8a98:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8a9c:	885b      	ldrh	r3, [r3, #2]
    8a9e:	b29b      	uxth	r3, r3
		}
		if(!utility::playbackHasNext() && command_buffer.isEmpty()){
    8aa0:	b90b      	cbnz	r3, 8aa6 <command::runCommandSlice()+0x14a>
			utility::finishPlayback();
    8aa2:	f008 f967 	bl	10d74 <utility::finishPlayback()>
	}
	
	// if printer is not waiting for tool or platform to heat, we need to make
	// sure the extruders are not in a paused state.  this is relevant when 
	// heating using the control panel in desktop software
	if(check_temp_state){
    8aa6:	f640 03e4 	movw	r3, #2276	; 0x8e4
    8aaa:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8aae:	781b      	ldrb	r3, [r3, #0]
    8ab0:	b1b3      	cbz	r3, 8ae0 <command::runCommandSlice()+0x184>
		if (Motherboard::getBoard().getPlatformHeater().has_reached_target_temperature()){
    8ab2:	48b0      	ldr	r0, [pc, #704]	; (8d74 <command::runCommandSlice()+0x418>)
    8ab4:	f008 fe2c 	bl	11710 <Heater::has_reached_target_temperature()>
    8ab8:	b190      	cbz	r0, 8ae0 <command::runCommandSlice()+0x184>
			// unpause extruder heaters in case they are paused
			Motherboard::getBoard().getExtruderBoard(0).getExtruderHeater().Pause(false);
    8aba:	4caf      	ldr	r4, [pc, #700]	; (8d78 <command::runCommandSlice()+0x41c>)
    8abc:	4620      	mov	r0, r4
    8abe:	f04f 0100 	mov.w	r1, #0
    8ac2:	f008 fe8b 	bl	117dc <Heater::Pause(bool)>
			Motherboard::getBoard().getExtruderBoard(1).getExtruderHeater().Pause(false);
    8ac6:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
    8aca:	f04f 0100 	mov.w	r1, #0
    8ace:	f008 fe85 	bl	117dc <Heater::Pause(bool)>
			check_temp_state = false;
    8ad2:	f640 03e4 	movw	r3, #2276	; 0x8e4
    8ad6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8ada:	f04f 0200 	mov.w	r2, #0
    8ade:	701a      	strb	r2, [r3, #0]
		}
	}
	// don't execute commands if paused or shutdown because of heater failure
	if (paused || heat_shutdown) {	return; }
    8ae0:	f640 3368 	movw	r3, #2920	; 0xb68
    8ae4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8ae8:	781b      	ldrb	r3, [r3, #0]
    8aea:	2b00      	cmp	r3, #0
    8aec:	f040 84f8 	bne.w	94e0 <command::runCommandSlice()+0xb84>
    8af0:	f640 333c 	movw	r3, #2876	; 0xb3c
    8af4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8af8:	781b      	ldrb	r3, [r3, #0]
    8afa:	2b00      	cmp	r3, #0
    8afc:	f040 84f0 	bne.w	94e0 <command::runCommandSlice()+0xb84>
    
	if (mode == HOMING) {
    8b00:	f640 03e6 	movw	r3, #2278	; 0x8e6
    8b04:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8b08:	781b      	ldrb	r3, [r3, #0]
    8b0a:	2b03      	cmp	r3, #3
    8b0c:	d11b      	bne.n	8b46 <command::runCommandSlice()+0x1ea>
//		xprintf("HOMING" " (%s:%d)\n",_F_,_L_);
		if (!steppers::isRunning()) {
    8b0e:	f006 f835 	bl	eb7c <steppers::isRunning()>
    8b12:	b938      	cbnz	r0, 8b24 <command::runCommandSlice()+0x1c8>
			mode = READY;
    8b14:	f640 03e6 	movw	r3, #2278	; 0x8e6
    8b18:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8b1c:	f04f 0200 	mov.w	r2, #0
    8b20:	701a      	strb	r2, [r3, #0]
    8b22:	e05c      	b.n	8bde <command::runCommandSlice()+0x282>
		} else if (homing_timeout.hasElapsed()) {
    8b24:	f640 302c 	movw	r0, #2860	; 0xb2c
    8b28:	f2c1 0000 	movt	r0, #4096	; 0x1000
    8b2c:	f009 fe4c 	bl	127c8 <Timeout::hasElapsed()>
    8b30:	b148      	cbz	r0, 8b46 <command::runCommandSlice()+0x1ea>
			planner::abort();
    8b32:	f004 fd8f 	bl	d654 <planner::abort()>
			mode = READY;
    8b36:	f640 03e6 	movw	r3, #2278	; 0x8e6
    8b3a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8b3e:	f04f 0200 	mov.w	r2, #0
    8b42:	701a      	strb	r2, [r3, #0]
    8b44:	e04b      	b.n	8bde <command::runCommandSlice()+0x282>
		}
	}
	if (mode == MOVING) {
    8b46:	f640 03e6 	movw	r3, #2278	; 0x8e6
    8b4a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8b4e:	781b      	ldrb	r3, [r3, #0]
    8b50:	2b01      	cmp	r3, #1
    8b52:	d144      	bne.n	8bde <command::runCommandSlice()+0x282>
//		xprintf("1");
//		xprintf("12" " (%s:%d)\n",_F_,_L_);
		if (!steppers::isRunning()) {
    8b54:	f006 f812 	bl	eb7c <steppers::isRunning()>
    8b58:	b938      	cbnz	r0, 8b6a <command::runCommandSlice()+0x20e>
//			xprintf("2");
//			xprintf("13" " (%s:%d)\n",_F_,_L_);
			mode = READY;
    8b5a:	f640 03e6 	movw	r3, #2278	; 0x8e6
    8b5e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8b62:	f04f 0200 	mov.w	r2, #0
    8b66:	701a      	strb	r2, [r3, #0]
    8b68:	e0a3      	b.n	8cb2 <command::runCommandSlice()+0x356>
		length -= sz;
	}

	/// Get the length of the buffer
	inline const BufSizeType getLength() const {
		return length;
    8b6a:	f640 3340 	movw	r3, #2880	; 0xb40
    8b6e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8b72:	885b      	ldrh	r3, [r3, #2]
    8b74:	b29b      	uxth	r3, r3
		} else {
//			xprintf("3");
//			xprintf("13" " (%s:%d)\n",_F_,_L_);
			if (command_buffer.getLength() > 0) {
    8b76:	2b00      	cmp	r3, #0
    8b78:	d031      	beq.n	8bde <command::runCommandSlice()+0x282>
				Motherboard::getBoard().resetUserInputTimeout();
    8b7a:	f640 509c 	movw	r0, #3484	; 0xd9c
    8b7e:	f2c1 0000 	movt	r0, #4096	; 0x1000
    8b82:	f002 ffd5 	bl	bb30 <Motherboard::resetUserInputTimeout()>
	inline const bool isEmpty() const {
		return length == 0;
	}
	/// Read the buffer directly
	inline BufDataType& operator[](BufSizeType index) {
		const BufSizeType actual_index = (index + start) % size;
    8b86:	f640 3340 	movw	r3, #2880	; 0xb40
    8b8a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8b8e:	8899      	ldrh	r1, [r3, #4]
    8b90:	b289      	uxth	r1, r1
    8b92:	881a      	ldrh	r2, [r3, #0]
    8b94:	fb91 f0f2 	sdiv	r0, r1, r2
    8b98:	fb02 1210 	mls	r2, r2, r0, r1
		return data[actual_index];
    8b9c:	b292      	uxth	r2, r2
				uint8_t command = command_buffer[0];
    8b9e:	689b      	ldr	r3, [r3, #8]
    8ba0:	5c9b      	ldrb	r3, [r3, r2]
    8ba2:	f88d 301f 	strb.w	r3, [sp, #31]
				if (command == HOST_CMD_QUEUE_POINT_EXT || command == HOST_CMD_QUEUE_POINT_NEW) {
    8ba6:	2b8e      	cmp	r3, #142	; 0x8e
    8ba8:	bf14      	ite	ne
    8baa:	2200      	movne	r2, #0
    8bac:	2201      	moveq	r2, #1
    8bae:	2b8b      	cmp	r3, #139	; 0x8b
    8bb0:	bf08      	it	eq
    8bb2:	f042 0201 	orreq.w	r2, r2, #1
    8bb6:	b122      	cbz	r2, 8bc2 <command::runCommandSlice()+0x266>
//					xprintf("command == HOST_CMD_QUEUE_POINT_EXT || command == HOST_CMD_QUEUE_POINT_NEW" " (%s:%d)\n",_F_,_L_);
					handleMovementCommand(command);
    8bb8:	f10d 001f 	add.w	r0, sp, #31
    8bbc:	f7ff fd0e 	bl	85dc <command::handleMovementCommand(unsigned char const&)>
    8bc0:	e00d      	b.n	8bde <command::runCommandSlice()+0x282>
				}
				else if (command == HOST_CMD_ENABLE_AXES) {
    8bc2:	2b89      	cmp	r3, #137	; 0x89
    8bc4:	d10b      	bne.n	8bde <command::runCommandSlice()+0x282>
		length -= sz;
	}

	/// Get the length of the buffer
	inline const BufSizeType getLength() const {
		return length;
    8bc6:	f640 3340 	movw	r3, #2880	; 0xb40
    8bca:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8bce:	885b      	ldrh	r3, [r3, #2]
    8bd0:	b29b      	uxth	r3, r3
					if (command_buffer.getLength() >= 2) {
    8bd2:	2b01      	cmp	r3, #1
    8bd4:	d903      	bls.n	8bde <command::runCommandSlice()+0x282>
						pop8(); // remove the command code
    8bd6:	f7ff fba3 	bl	8320 <command::pop8()>
						uint8_t axes = pop8();
    8bda:	f7ff fba1 	bl	8320 <command::pop8()>
						}
				}
			}
		}
	}
	if (mode == DELAY) {
    8bde:	f640 03e6 	movw	r3, #2278	; 0x8e6
    8be2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8be6:	781b      	ldrb	r3, [r3, #0]
    8be8:	2b02      	cmp	r3, #2
    8bea:	d10e      	bne.n	8c0a <command::runCommandSlice()+0x2ae>
		// check timers
		if (delay_timeout.hasElapsed()) {
    8bec:	f640 3058 	movw	r0, #2904	; 0xb58
    8bf0:	f2c1 0000 	movt	r0, #4096	; 0x1000
    8bf4:	f009 fde8 	bl	127c8 <Timeout::hasElapsed()>
    8bf8:	b138      	cbz	r0, 8c0a <command::runCommandSlice()+0x2ae>
			mode = READY;
    8bfa:	f640 03e6 	movw	r3, #2278	; 0x8e6
    8bfe:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8c02:	f04f 0200 	mov.w	r2, #0
    8c06:	701a      	strb	r2, [r3, #0]
    8c08:	e08d      	b.n	8d26 <command::runCommandSlice()+0x3ca>
		}
	}
	if (mode == WAIT_ON_TOOL) {
    8c0a:	f640 03e6 	movw	r3, #2278	; 0x8e6
    8c0e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8c12:	781b      	ldrb	r3, [r3, #0]
    8c14:	2b04      	cmp	r3, #4
    8c16:	d14c      	bne.n	8cb2 <command::runCommandSlice()+0x356>
		if(tool_wait_timeout.hasElapsed()){
    8c18:	f640 3000 	movw	r0, #2816	; 0xb00
    8c1c:	f2c1 0000 	movt	r0, #4096	; 0x1000
    8c20:	f009 fdd2 	bl	127c8 <Timeout::hasElapsed()>
    8c24:	b198      	cbz	r0, 8c4e <command::runCommandSlice()+0x2f2>
			Motherboard::getBoard().errorResponse("I timed out while   attempting to heat  my extruder."); 
    8c26:	f640 509c 	movw	r0, #3484	; 0xd9c
    8c2a:	f2c1 0000 	movt	r0, #4096	; 0x1000
    8c2e:	f247 315c 	movw	r1, #29532	; 0x735c
    8c32:	f2c0 0102 	movt	r1, #2
    8c36:	f04f 0200 	mov.w	r2, #0
    8c3a:	f003 f803 	bl	bc44 <Motherboard::errorResponse(char*, bool)>
			mode = READY;		
    8c3e:	f640 03e6 	movw	r3, #2278	; 0x8e6
    8c42:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8c46:	f04f 0200 	mov.w	r2, #0
    8c4a:	701a      	strb	r2, [r3, #0]
    8c4c:	e06b      	b.n	8d26 <command::runCommandSlice()+0x3ca>
    8c4e:	f640 03e5 	movw	r3, #2277	; 0x8e5
    8c52:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8c56:	7818      	ldrb	r0, [r3, #0]
    8c58:	4b48      	ldr	r3, [pc, #288]	; (8d7c <command::runCommandSlice()+0x420>)
    8c5a:	f1a3 02e0 	sub.w	r2, r3, #224	; 0xe0
    8c5e:	2801      	cmp	r0, #1
    8c60:	bf14      	ite	ne
    8c62:	4610      	movne	r0, r2
    8c64:	4618      	moveq	r0, r3
		}
		else if(!Motherboard::getBoard().getExtruderBoard(currentToolIndex).getExtruderHeater().isHeating()){
    8c66:	f100 0028 	add.w	r0, r0, #40	; 0x28
    8c6a:	f008 fd85 	bl	11778 <Heater::isHeating()>
    8c6e:	b938      	cbnz	r0, 8c80 <command::runCommandSlice()+0x324>
			mode = READY;
    8c70:	f640 03e6 	movw	r3, #2278	; 0x8e6
    8c74:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8c78:	f04f 0200 	mov.w	r2, #0
    8c7c:	701a      	strb	r2, [r3, #0]
    8c7e:	e052      	b.n	8d26 <command::runCommandSlice()+0x3ca>
    8c80:	f640 03e5 	movw	r3, #2277	; 0x8e5
    8c84:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8c88:	7818      	ldrb	r0, [r3, #0]
    8c8a:	4b3c      	ldr	r3, [pc, #240]	; (8d7c <command::runCommandSlice()+0x420>)
    8c8c:	f1a3 02e0 	sub.w	r2, r3, #224	; 0xe0
    8c90:	2801      	cmp	r0, #1
    8c92:	bf14      	ite	ne
    8c94:	4610      	movne	r0, r2
    8c96:	4618      	moveq	r0, r3
		}else if( Motherboard::getBoard().getExtruderBoard(currentToolIndex).getExtruderHeater().has_reached_target_temperature()){
    8c98:	f100 0028 	add.w	r0, r0, #40	; 0x28
    8c9c:	f008 fd38 	bl	11710 <Heater::has_reached_target_temperature()>
    8ca0:	b138      	cbz	r0, 8cb2 <command::runCommandSlice()+0x356>
            mode = READY;
    8ca2:	f640 03e6 	movw	r3, #2278	; 0x8e6
    8ca6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8caa:	f04f 0200 	mov.w	r2, #0
    8cae:	701a      	strb	r2, [r3, #0]
    8cb0:	e039      	b.n	8d26 <command::runCommandSlice()+0x3ca>
		}
	}
	if (mode == WAIT_ON_PLATFORM) {
    8cb2:	f640 03e6 	movw	r3, #2278	; 0x8e6
    8cb6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8cba:	781b      	ldrb	r3, [r3, #0]
    8cbc:	2b05      	cmp	r3, #5
    8cbe:	d132      	bne.n	8d26 <command::runCommandSlice()+0x3ca>
		if(tool_wait_timeout.hasElapsed()){
    8cc0:	f640 3000 	movw	r0, #2816	; 0xb00
    8cc4:	f2c1 0000 	movt	r0, #4096	; 0x1000
    8cc8:	f009 fd7e 	bl	127c8 <Timeout::hasElapsed()>
    8ccc:	b198      	cbz	r0, 8cf6 <command::runCommandSlice()+0x39a>
			Motherboard::getBoard().errorResponse("I timed out while   attempting to heat  my platform."); 
    8cce:	f640 509c 	movw	r0, #3484	; 0xd9c
    8cd2:	f2c1 0000 	movt	r0, #4096	; 0x1000
    8cd6:	f247 3194 	movw	r1, #29588	; 0x7394
    8cda:	f2c0 0102 	movt	r1, #2
    8cde:	f04f 0200 	mov.w	r2, #0
    8ce2:	f002 ffaf 	bl	bc44 <Motherboard::errorResponse(char*, bool)>
			mode = READY;		
    8ce6:	f640 03e6 	movw	r3, #2278	; 0x8e6
    8cea:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8cee:	f04f 0200 	mov.w	r2, #0
    8cf2:	701a      	strb	r2, [r3, #0]
    8cf4:	e044      	b.n	8d80 <command::runCommandSlice()+0x424>
		} else if (!Motherboard::getBoard().getPlatformHeater().isHeating()){
    8cf6:	481f      	ldr	r0, [pc, #124]	; (8d74 <command::runCommandSlice()+0x418>)
    8cf8:	f008 fd3e 	bl	11778 <Heater::isHeating()>
    8cfc:	b938      	cbnz	r0, 8d0e <command::runCommandSlice()+0x3b2>
			mode = READY;
    8cfe:	f640 03e6 	movw	r3, #2278	; 0x8e6
    8d02:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8d06:	f04f 0200 	mov.w	r2, #0
    8d0a:	701a      	strb	r2, [r3, #0]
    8d0c:	e038      	b.n	8d80 <command::runCommandSlice()+0x424>
		}
		else if(Motherboard::getBoard().getPlatformHeater().has_reached_target_temperature()){
    8d0e:	4819      	ldr	r0, [pc, #100]	; (8d74 <command::runCommandSlice()+0x418>)
    8d10:	f008 fcfe 	bl	11710 <Heater::has_reached_target_temperature()>
    8d14:	b138      	cbz	r0, 8d26 <command::runCommandSlice()+0x3ca>
            mode = READY;
    8d16:	f640 03e6 	movw	r3, #2278	; 0x8e6
    8d1a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8d1e:	f04f 0200 	mov.w	r2, #0
    8d22:	701a      	strb	r2, [r3, #0]
    8d24:	e02c      	b.n	8d80 <command::runCommandSlice()+0x424>
		}
	}
	if (mode == WAIT_ON_BUTTON) {
    8d26:	f640 03e6 	movw	r3, #2278	; 0x8e6
    8d2a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8d2e:	781b      	ldrb	r3, [r3, #0]
    8d30:	2b06      	cmp	r3, #6
    8d32:	d125      	bne.n	8d80 <command::runCommandSlice()+0x424>
		if (button_wait_timeout.hasElapsed()) {
    8d34:	f640 301c 	movw	r0, #2844	; 0xb1c
    8d38:	f2c1 0000 	movt	r0, #4096	; 0x1000
    8d3c:	f009 fd44 	bl	127c8 <Timeout::hasElapsed()>
    8d40:	b1f0      	cbz	r0, 8d80 <command::runCommandSlice()+0x424>
			if (button_timeout_behavior & (1 << BUTTON_TIMEOUT_ABORT)) {
    8d42:	f640 3369 	movw	r3, #2921	; 0xb69
    8d46:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8d4a:	781b      	ldrb	r3, [r3, #0]
    8d4c:	f013 0f02 	tst.w	r3, #2
    8d50:	d008      	beq.n	8d64 <command::runCommandSlice()+0x408>
				// Abort build!
				// We'll interpret this as a catastrophic situation
				// and do a full reset of the machine.
				Motherboard::getBoard().reset(false);
    8d52:	f640 509c 	movw	r0, #3484	; 0xd9c
    8d56:	f2c1 0000 	movt	r0, #4096	; 0x1000
    8d5a:	f04f 0100 	mov.w	r1, #0
    8d5e:	f003 f847 	bl	bdf0 <Motherboard::reset(bool)>
    8d62:	e00d      	b.n	8d80 <command::runCommandSlice()+0x424>

			} else {
				mode = READY;
    8d64:	f640 03e6 	movw	r3, #2278	; 0x8e6
    8d68:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8d6c:	f04f 0200 	mov.w	r2, #0
    8d70:	701a      	strb	r2, [r3, #0]
    8d72:	e00d      	b.n	8d90 <command::runCommandSlice()+0x434>
    8d74:	10000fa8 	.word	0x10000fa8
    8d78:	10000dec 	.word	0x10000dec
    8d7c:	10000ea4 	.word	0x10000ea4
//				mode = READY;
//			}
		}
	}

	if (mode == READY) {
    8d80:	f640 03e6 	movw	r3, #2278	; 0x8e6
    8d84:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8d88:	781b      	ldrb	r3, [r3, #0]
    8d8a:	2b00      	cmp	r3, #0
    8d8c:	f040 8380 	bne.w	9490 <command::runCommandSlice()+0xb34>
    8d90:	f640 3340 	movw	r3, #2880	; 0xb40
    8d94:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8d98:	885b      	ldrh	r3, [r3, #2]
    8d9a:	b29b      	uxth	r3, r3
//		xprintf("mode == READY" " (%s:%d)\n",_F_,_L_);
		
		// process next command on the queue.
		if ((command_buffer.getLength() > 0)){
    8d9c:	2b00      	cmp	r3, #0
    8d9e:	f000 8377 	beq.w	9490 <command::runCommandSlice()+0xb34>
//			xprintf("command_buffer.getLength() > 0" " (%s:%d)\n",_F_,_L_);
			Motherboard::getBoard().resetUserInputTimeout();
    8da2:	f640 509c 	movw	r0, #3484	; 0xd9c
    8da6:	f2c1 0000 	movt	r0, #4096	; 0x1000
    8daa:	f002 fec1 	bl	bb30 <Motherboard::resetUserInputTimeout()>
	inline const bool isEmpty() const {
		return length == 0;
	}
	/// Read the buffer directly
	inline BufDataType& operator[](BufSizeType index) {
		const BufSizeType actual_index = (index + start) % size;
    8dae:	f640 3340 	movw	r3, #2880	; 0xb40
    8db2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8db6:	8899      	ldrh	r1, [r3, #4]
    8db8:	b289      	uxth	r1, r1
    8dba:	881a      	ldrh	r2, [r3, #0]
		return data[actual_index];
    8dbc:	6898      	ldr	r0, [r3, #8]
	inline const bool isEmpty() const {
		return length == 0;
	}
	/// Read the buffer directly
	inline BufDataType& operator[](BufSizeType index) {
		const BufSizeType actual_index = (index + start) % size;
    8dbe:	fb91 f3f2 	sdiv	r3, r1, r2
    8dc2:	fb02 1313 	mls	r3, r2, r3, r1
		return data[actual_index];
    8dc6:	b29b      	uxth	r3, r3
			
			uint8_t command = command_buffer[0];
    8dc8:	5cc3      	ldrb	r3, [r0, r3]
    8dca:	f88d 301f 	strb.w	r3, [sp, #31]

		if (command == HOST_CMD_QUEUE_POINT_EXT || command == HOST_CMD_QUEUE_POINT_NEW) {
    8dce:	2b8e      	cmp	r3, #142	; 0x8e
    8dd0:	bf14      	ite	ne
    8dd2:	2100      	movne	r1, #0
    8dd4:	2101      	moveq	r1, #1
    8dd6:	2b8b      	cmp	r3, #139	; 0x8b
    8dd8:	bf08      	it	eq
    8dda:	f041 0101 	orreq.w	r1, r1, #1
    8dde:	b121      	cbz	r1, 8dea <command::runCommandSlice()+0x48e>
					handleMovementCommand(command);
    8de0:	f10d 001f 	add.w	r0, sp, #31
    8de4:	f7ff fbfa 	bl	85dc <command::handleMovementCommand(unsigned char const&)>
    8de8:	e352      	b.n	9490 <command::runCommandSlice()+0xb34>
			}  else if (command == HOST_CMD_CHANGE_TOOL) {
    8dea:	2b86      	cmp	r3, #134	; 0x86
    8dec:	d11c      	bne.n	8e28 <command::runCommandSlice()+0x4cc>
		length -= sz;
	}

	/// Get the length of the buffer
	inline const BufSizeType getLength() const {
		return length;
    8dee:	f640 3340 	movw	r3, #2880	; 0xb40
    8df2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8df6:	885b      	ldrh	r3, [r3, #2]
    8df8:	b29b      	uxth	r3, r3
				if (command_buffer.getLength() >= 2) {
    8dfa:	2b01      	cmp	r3, #1
    8dfc:	f240 8348 	bls.w	9490 <command::runCommandSlice()+0xb34>
					pop8(); // remove the command code
    8e00:	f7ff fa8e 	bl	8320 <command::pop8()>
                    currentToolIndex = pop8();
    8e04:	f7ff fa8c 	bl	8320 <command::pop8()>
    8e08:	f640 03e5 	movw	r3, #2277	; 0x8e5
    8e0c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8e10:	7018      	strb	r0, [r3, #0]
                    line_number++;
    8e12:	f640 3350 	movw	r3, #2896	; 0xb50
    8e16:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8e1a:	681a      	ldr	r2, [r3, #0]
    8e1c:	f102 0201 	add.w	r2, r2, #1
    8e20:	601a      	str	r2, [r3, #0]
                    
                    planner::changeToolIndex(currentToolIndex);
    8e22:	f004 fc05 	bl	d630 <planner::changeToolIndex(unsigned char)>
    8e26:	e333      	b.n	9490 <command::runCommandSlice()+0xb34>
				}
			} else if (command == HOST_CMD_ENABLE_AXES) {
    8e28:	2b89      	cmp	r3, #137	; 0x89
    8e2a:	d127      	bne.n	8e7c <command::runCommandSlice()+0x520>
    8e2c:	f640 3340 	movw	r3, #2880	; 0xb40
    8e30:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8e34:	885b      	ldrh	r3, [r3, #2]
    8e36:	b29b      	uxth	r3, r3
				if (command_buffer.getLength() >= 2) {
    8e38:	2b01      	cmp	r3, #1
    8e3a:	f240 8329 	bls.w	9490 <command::runCommandSlice()+0xb34>
					pop8(); // remove the command code
    8e3e:	f7ff fa6f 	bl	8320 <command::pop8()>
					uint8_t axes = pop8();
    8e42:	f7ff fa6d 	bl	8320 <command::pop8()>
    8e46:	4605      	mov	r5, r0
					line_number++;
    8e48:	f640 3350 	movw	r3, #2896	; 0xb50
    8e4c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8e50:	681a      	ldr	r2, [r3, #0]
    8e52:	f102 0201 	add.w	r2, r2, #1
    8e56:	601a      	str	r2, [r3, #0]
					
					bool enable = (axes & 0x80) != 0;
    8e58:	f3c0 16c0 	ubfx	r6, r0, #7, #1
					for (int i = 0; i < STEPPER_COUNT; i++) {
    8e5c:	f04f 0400 	mov.w	r4, #0
						if ((axes & _BV(i)) != 0) {
    8e60:	fa45 f304 	asr.w	r3, r5, r4
    8e64:	f013 0f01 	tst.w	r3, #1
    8e68:	d003      	beq.n	8e72 <command::runCommandSlice()+0x516>
							steppers::enableAxis(i, enable);
    8e6a:	b2e0      	uxtb	r0, r4
    8e6c:	4631      	mov	r1, r6
    8e6e:	f006 ff33 	bl	fcd8 <steppers::enableAxis(unsigned char, bool)>
					pop8(); // remove the command code
					uint8_t axes = pop8();
					line_number++;
					
					bool enable = (axes & 0x80) != 0;
					for (int i = 0; i < STEPPER_COUNT; i++) {
    8e72:	f104 0401 	add.w	r4, r4, #1
    8e76:	2c04      	cmp	r4, #4
    8e78:	d1f2      	bne.n	8e60 <command::runCommandSlice()+0x504>
    8e7a:	e309      	b.n	9490 <command::runCommandSlice()+0xb34>
						if ((axes & _BV(i)) != 0) {
							steppers::enableAxis(i, enable);
						}
					}
				}
			} else if (command == HOST_CMD_SET_POSITION_EXT) {
    8e7c:	2b8c      	cmp	r3, #140	; 0x8c
    8e7e:	d12c      	bne.n	8eda <command::runCommandSlice()+0x57e>
    8e80:	f640 3340 	movw	r3, #2880	; 0xb40
    8e84:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8e88:	885b      	ldrh	r3, [r3, #2]
    8e8a:	b29b      	uxth	r3, r3
//				xprintf("HOST_CMD_SET_POSITION_EXT) {" " (%s:%d)\n",_F_,_L_);
				// check for completion
				if (command_buffer.getLength() >= 21) {
    8e8c:	2b14      	cmp	r3, #20
    8e8e:	f240 82ff 	bls.w	9490 <command::runCommandSlice()+0xb34>
					pop8(); // remove the command code
    8e92:	f7ff fa45 	bl	8320 <command::pop8()>
					int32_t x = pop32();
    8e96:	f7ff fadb 	bl	8450 <command::pop32()>
    8e9a:	4604      	mov	r4, r0
					int32_t y = pop32();
    8e9c:	f7ff fad8 	bl	8450 <command::pop32()>
    8ea0:	4606      	mov	r6, r0
					int32_t z = pop32();
    8ea2:	f7ff fad5 	bl	8450 <command::pop32()>
    8ea6:	4607      	mov	r7, r0
					int32_t a = pop32();
    8ea8:	f7ff fad2 	bl	8450 <command::pop32()>
    8eac:	4605      	mov	r5, r0
					int32_t b = pop32();
    8eae:	f7ff facf 	bl	8450 <command::pop32()>
					line_number++;
    8eb2:	f640 3350 	movw	r3, #2896	; 0xb50
    8eb6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8eba:	681a      	ldr	r2, [r3, #0]
    8ebc:	f102 0201 	add.w	r2, r2, #1
    8ec0:	601a      	str	r2, [r3, #0]
//					xprintf("if (command_buffer.getLength() >= 21) {" " (%s:%d)\n",_F_,_L_);
					planner::definePosition(Point(x,y,z,a,b));
    8ec2:	9500      	str	r5, [sp, #0]
    8ec4:	9001      	str	r0, [sp, #4]
    8ec6:	a808      	add	r0, sp, #32
    8ec8:	4621      	mov	r1, r4
    8eca:	4632      	mov	r2, r6
    8ecc:	463b      	mov	r3, r7
    8ece:	f004 fe2b 	bl	db28 <Point::Point(long, long, long, long, long)>
    8ed2:	a808      	add	r0, sp, #32
    8ed4:	f004 fd54 	bl	d980 <planner::definePosition(Point const&)>
    8ed8:	e2da      	b.n	9490 <command::runCommandSlice()+0xb34>
				}
			} else if (command == HOST_CMD_DELAY) {
    8eda:	2b85      	cmp	r3, #133	; 0x85
    8edc:	d126      	bne.n	8f2c <command::runCommandSlice()+0x5d0>
    8ede:	f640 3340 	movw	r3, #2880	; 0xb40
    8ee2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8ee6:	885b      	ldrh	r3, [r3, #2]
    8ee8:	b29b      	uxth	r3, r3
				if (command_buffer.getLength() >= 5) {
    8eea:	2b04      	cmp	r3, #4
    8eec:	f240 82d0 	bls.w	9490 <command::runCommandSlice()+0xb34>
					mode = DELAY;
    8ef0:	f640 03e6 	movw	r3, #2278	; 0x8e6
    8ef4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8ef8:	f04f 0202 	mov.w	r2, #2
    8efc:	701a      	strb	r2, [r3, #0]
					pop8(); // remove the command code
    8efe:	f7ff fa0f 	bl	8320 <command::pop8()>
					// parameter is in milliseconds; timeouts need microseconds
					uint32_t microseconds = pop32() * 1000L;
    8f02:	f7ff faa5 	bl	8450 <command::pop32()>
					line_number++;
    8f06:	f640 3350 	movw	r3, #2896	; 0xb50
    8f0a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8f0e:	681a      	ldr	r2, [r3, #0]
    8f10:	f102 0201 	add.w	r2, r2, #1
    8f14:	601a      	str	r2, [r3, #0]
			} else if (command == HOST_CMD_DELAY) {
				if (command_buffer.getLength() >= 5) {
					mode = DELAY;
					pop8(); // remove the command code
					// parameter is in milliseconds; timeouts need microseconds
					uint32_t microseconds = pop32() * 1000L;
    8f16:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8f1a:	fb01 f100 	mul.w	r1, r1, r0
					line_number++;
					
					delay_timeout.start(microseconds);
    8f1e:	f640 3058 	movw	r0, #2904	; 0xb58
    8f22:	f2c1 0000 	movt	r0, #4096	; 0x1000
    8f26:	f009 fc3b 	bl	127a0 <Timeout::start(unsigned long)>
    8f2a:	e2b1      	b.n	9490 <command::runCommandSlice()+0xb34>
				}
			} else if (command == HOST_CMD_PAUSE_FOR_BUTTON) {
    8f2c:	2b94      	cmp	r3, #148	; 0x94
    8f2e:	d14f      	bne.n	8fd0 <command::runCommandSlice()+0x674>
    8f30:	f640 3340 	movw	r3, #2880	; 0xb40
    8f34:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8f38:	885b      	ldrh	r3, [r3, #2]
    8f3a:	b29b      	uxth	r3, r3
				if (command_buffer.getLength() >= 5) {
    8f3c:	2b04      	cmp	r3, #4
    8f3e:	f240 82a7 	bls.w	9490 <command::runCommandSlice()+0xb34>
					pop8(); // remove the command code
    8f42:	f7ff f9ed 	bl	8320 <command::pop8()>
					button_mask = pop8();
    8f46:	f7ff f9eb 	bl	8320 <command::pop8()>
    8f4a:	f640 3355 	movw	r3, #2901	; 0xb55
    8f4e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8f52:	7018      	strb	r0, [r3, #0]
					uint16_t timeout_seconds = pop16();
    8f54:	f7ff fa16 	bl	8384 <command::pop16()>
    8f58:	b284      	uxth	r4, r0
					button_timeout_behavior = pop8();
    8f5a:	f7ff f9e1 	bl	8320 <command::pop8()>
    8f5e:	f640 3369 	movw	r3, #2921	; 0xb69
    8f62:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8f66:	7018      	strb	r0, [r3, #0]
					line_number++;
    8f68:	f640 3350 	movw	r3, #2896	; 0xb50
    8f6c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8f70:	681a      	ldr	r2, [r3, #0]
    8f72:	f102 0201 	add.w	r2, r2, #1
    8f76:	601a      	str	r2, [r3, #0]
					
					if (timeout_seconds != 0) {
    8f78:	b164      	cbz	r4, 8f94 <command::runCommandSlice()+0x638>
						button_wait_timeout.start(timeout_seconds * 1000L * 1000L);
    8f7a:	f244 2140 	movw	r1, #16960	; 0x4240
    8f7e:	f2c0 010f 	movt	r1, #15
    8f82:	f640 301c 	movw	r0, #2844	; 0xb1c
    8f86:	f2c1 0000 	movt	r0, #4096	; 0x1000
    8f8a:	fb01 f104 	mul.w	r1, r1, r4
    8f8e:	f009 fc07 	bl	127a0 <Timeout::start(unsigned long)>
    8f92:	e00b      	b.n	8fac <command::runCommandSlice()+0x650>
					} else {
						button_wait_timeout = Timeout();
    8f94:	ac0d      	add	r4, sp, #52	; 0x34
    8f96:	4620      	mov	r0, r4
    8f98:	f009 fbfc 	bl	12794 <Timeout::Timeout()>
    8f9c:	f640 351c 	movw	r5, #2844	; 0xb1c
    8fa0:	f2c1 0500 	movt	r5, #4096	; 0x1000
    8fa4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    8fa8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
					}
                    // set button wait via interface board
					Motherboard::getBoard().interfaceBlink(25,15);
    8fac:	f640 509c 	movw	r0, #3484	; 0xd9c
    8fb0:	f2c1 0000 	movt	r0, #4096	; 0x1000
    8fb4:	f04f 0119 	mov.w	r1, #25
    8fb8:	f04f 020f 	mov.w	r2, #15
    8fbc:	f002 fe10 	bl	bbe0 <Motherboard::interfaceBlink(int, int)>
//					InterfaceBoard& ib = Motherboard::getBoard().getInterfaceBoard();
//					ib.waitForButton(button_mask);
					mode = WAIT_ON_BUTTON;
    8fc0:	f640 03e6 	movw	r3, #2278	; 0x8e6
    8fc4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8fc8:	f04f 0206 	mov.w	r2, #6
    8fcc:	701a      	strb	r2, [r3, #0]
    8fce:	e25f      	b.n	9490 <command::runCommandSlice()+0xb34>
				}
			} else if (command == HOST_CMD_DISPLAY_MESSAGE) {
    8fd0:	2b95      	cmp	r3, #149	; 0x95
    8fd2:	d11b      	bne.n	900c <command::runCommandSlice()+0x6b0>
    8fd4:	f640 3340 	movw	r3, #2880	; 0xb40
    8fd8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8fdc:	885b      	ldrh	r3, [r3, #2]
    8fde:	b29b      	uxth	r3, r3
//				MessageScreen* scr = Motherboard::getBoard().getMessageScreen();
				if (command_buffer.getLength() >= 6) {
    8fe0:	2b05      	cmp	r3, #5
    8fe2:	f240 8255 	bls.w	9490 <command::runCommandSlice()+0xb34>
					pop8(); // remove the command code
    8fe6:	f7ff f99b 	bl	8320 <command::pop8()>
					uint8_t options = pop8();
    8fea:	f7ff f999 	bl	8320 <command::pop8()>
					uint8_t xpos = pop8();
    8fee:	f7ff f997 	bl	8320 <command::pop8()>
					uint8_t ypos = pop8();
    8ff2:	f7ff f995 	bl	8320 <command::pop8()>
					uint8_t timeout_seconds = pop8();
    8ff6:	f7ff f993 	bl	8320 <command::pop8()>
					line_number++;
    8ffa:	f640 3350 	movw	r3, #2896	; 0xb50
    8ffe:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9002:	681a      	ldr	r2, [r3, #0]
    9004:	f102 0201 	add.w	r2, r2, #1
    9008:	601a      	str	r2, [r3, #0]
    900a:	e241      	b.n	9490 <command::runCommandSlice()+0xb34>
//							mode = WAIT_ON_BUTTON;
//						}
//					}
				}
					
			} else if (command == HOST_CMD_FIND_AXES_MINIMUM ||
    900c:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    9010:	b2c9      	uxtb	r1, r1
    9012:	2901      	cmp	r1, #1
    9014:	d839      	bhi.n	908a <command::runCommandSlice()+0x72e>
    9016:	f640 3340 	movw	r3, #2880	; 0xb40
    901a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    901e:	885b      	ldrh	r3, [r3, #2]
    9020:	b29b      	uxth	r3, r3
					command == HOST_CMD_FIND_AXES_MAXIMUM) {
//				xprintf("HOST_CMD_FIND_AXES_MINIMUM||HOST_CMD_FIND_AXES_MAXIMUM) {" " (%s:%d)\n",_F_,_L_);
				if (command_buffer.getLength() >= 8) {
    9022:	2b07      	cmp	r3, #7
    9024:	f240 8234 	bls.w	9490 <command::runCommandSlice()+0xb34>
					pop8(); // remove the command
    9028:	f7ff f97a 	bl	8320 <command::pop8()>
					uint8_t flags = pop8();
    902c:	f7ff f978 	bl	8320 <command::pop8()>
    9030:	4605      	mov	r5, r0
					uint32_t feedrate = pop32(); // feedrate in us per step
    9032:	f7ff fa0d 	bl	8450 <command::pop32()>
    9036:	4604      	mov	r4, r0
					uint16_t timeout_s = pop16();
    9038:	f7ff f9a4 	bl	8384 <command::pop16()>
					line_number++;
    903c:	f640 3350 	movw	r3, #2896	; 0xb50
    9040:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9044:	681a      	ldr	r2, [r3, #0]
    9046:	f102 0201 	add.w	r2, r2, #1
    904a:	601a      	str	r2, [r3, #0]
					
					bool direction = command == HOST_CMD_FIND_AXES_MAXIMUM;
					mode = HOMING;
    904c:	f640 03e6 	movw	r3, #2278	; 0x8e6
    9050:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9054:	f04f 0203 	mov.w	r2, #3
    9058:	701a      	strb	r2, [r3, #0]
					homing_timeout.start(timeout_s * 1000L * 1000L);
    905a:	b281      	uxth	r1, r0
    905c:	f244 2340 	movw	r3, #16960	; 0x4240
    9060:	f2c0 030f 	movt	r3, #15
    9064:	f640 302c 	movw	r0, #2860	; 0xb2c
    9068:	f2c1 0000 	movt	r0, #4096	; 0x1000
    906c:	fb03 f101 	mul.w	r1, r3, r1
    9070:	f009 fb96 	bl	127a0 <Timeout::start(unsigned long)>
					steppers::startHoming(command==HOST_CMD_FIND_AXES_MAXIMUM,
							flags,
							feedrate);
    9074:	f89d 001f 	ldrb.w	r0, [sp, #31]
    9078:	2884      	cmp	r0, #132	; 0x84
    907a:	bf14      	ite	ne
    907c:	2000      	movne	r0, #0
    907e:	2001      	moveq	r0, #1
    9080:	4629      	mov	r1, r5
    9082:	4622      	mov	r2, r4
    9084:	f006 fcac 	bl	f9e0 <steppers::startHoming(bool, unsigned char, unsigned long)>
    9088:	e202      	b.n	9490 <command::runCommandSlice()+0xb34>
				}
			} else if (command == HOST_CMD_WAIT_FOR_TOOL) {
    908a:	2b87      	cmp	r3, #135	; 0x87
    908c:	d132      	bne.n	90f4 <command::runCommandSlice()+0x798>
    908e:	f640 3340 	movw	r3, #2880	; 0xb40
    9092:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9096:	885b      	ldrh	r3, [r3, #2]
    9098:	b29b      	uxth	r3, r3
				if (command_buffer.getLength() >= 6) {
    909a:	2b05      	cmp	r3, #5
    909c:	f240 81f8 	bls.w	9490 <command::runCommandSlice()+0xb34>
					mode = WAIT_ON_TOOL;
    90a0:	f640 03e6 	movw	r3, #2278	; 0x8e6
    90a4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    90a8:	f04f 0204 	mov.w	r2, #4
    90ac:	701a      	strb	r2, [r3, #0]
					pop8();
    90ae:	f7ff f937 	bl	8320 <command::pop8()>
					currentToolIndex = pop8();
    90b2:	f7ff f935 	bl	8320 <command::pop8()>
    90b6:	f640 03e5 	movw	r3, #2277	; 0x8e5
    90ba:	f2c1 0300 	movt	r3, #4096	; 0x1000
    90be:	7018      	strb	r0, [r3, #0]
					uint16_t toolPingDelay = (uint16_t)pop16();
    90c0:	f7ff f960 	bl	8384 <command::pop16()>
					uint16_t toolTimeout = (uint16_t)pop16();
    90c4:	f7ff f95e 	bl	8384 <command::pop16()>
					line_number++;
    90c8:	f640 3350 	movw	r3, #2896	; 0xb50
    90cc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    90d0:	681a      	ldr	r2, [r3, #0]
    90d2:	f102 0201 	add.w	r2, r2, #1
    90d6:	601a      	str	r2, [r3, #0]
					
					// if we re-add handling of toolTimeout, we need to make sure
					// that values that overflow our counter will not be passed)
					tool_wait_timeout.start(toolTimeout*1000000L);
    90d8:	b281      	uxth	r1, r0
    90da:	f244 2340 	movw	r3, #16960	; 0x4240
    90de:	f2c0 030f 	movt	r3, #15
    90e2:	f640 3000 	movw	r0, #2816	; 0xb00
    90e6:	f2c1 0000 	movt	r0, #4096	; 0x1000
    90ea:	fb03 f101 	mul.w	r1, r3, r1
    90ee:	f009 fb57 	bl	127a0 <Timeout::start(unsigned long)>
    90f2:	e1cd      	b.n	9490 <command::runCommandSlice()+0xb34>
				}
			} else if (command == HOST_CMD_WAIT_FOR_PLATFORM) {
    90f4:	2b8d      	cmp	r3, #141	; 0x8d
    90f6:	d12d      	bne.n	9154 <command::runCommandSlice()+0x7f8>
    90f8:	f640 3340 	movw	r3, #2880	; 0xb40
    90fc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9100:	885b      	ldrh	r3, [r3, #2]
    9102:	b29b      	uxth	r3, r3
        // FIXME: Almost equivalent to WAIT_FOR_TOOL
				if (command_buffer.getLength() >= 6) {
    9104:	2b05      	cmp	r3, #5
    9106:	f240 81c3 	bls.w	9490 <command::runCommandSlice()+0xb34>
					mode = WAIT_ON_PLATFORM;
    910a:	f640 03e6 	movw	r3, #2278	; 0x8e6
    910e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9112:	f04f 0205 	mov.w	r2, #5
    9116:	701a      	strb	r2, [r3, #0]
					pop8();
    9118:	f7ff f902 	bl	8320 <command::pop8()>
					uint8_t currentToolIndex = pop8();
    911c:	f7ff f900 	bl	8320 <command::pop8()>
					uint16_t toolPingDelay = (uint16_t)pop16();
    9120:	f7ff f930 	bl	8384 <command::pop16()>
					uint16_t toolTimeout = (uint16_t)pop16();
    9124:	f7ff f92e 	bl	8384 <command::pop16()>
					line_number++;
    9128:	f640 3350 	movw	r3, #2896	; 0xb50
    912c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9130:	681a      	ldr	r2, [r3, #0]
    9132:	f102 0201 	add.w	r2, r2, #1
    9136:	601a      	str	r2, [r3, #0]
					
					// if we re-add handling of toolTimeout, we need to make sure
					// that values that overflow our counter will not be passed)
					tool_wait_timeout.start(toolTimeout*1000000L);
    9138:	b281      	uxth	r1, r0
    913a:	f244 2340 	movw	r3, #16960	; 0x4240
    913e:	f2c0 030f 	movt	r3, #15
    9142:	f640 3000 	movw	r0, #2816	; 0xb00
    9146:	f2c1 0000 	movt	r0, #4096	; 0x1000
    914a:	fb03 f101 	mul.w	r1, r3, r1
    914e:	f009 fb27 	bl	127a0 <Timeout::start(unsigned long)>
    9152:	e19d      	b.n	9490 <command::runCommandSlice()+0xb34>
				}
			} else if (command == HOST_CMD_STORE_HOME_POSITION) {
    9154:	2b8f      	cmp	r3, #143	; 0x8f
    9156:	d131      	bne.n	91bc <command::runCommandSlice()+0x860>
    9158:	f640 3340 	movw	r3, #2880	; 0xb40
    915c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9160:	885b      	ldrh	r3, [r3, #2]
    9162:	b29b      	uxth	r3, r3

				// check for completion
				if (command_buffer.getLength() >= 2) {
    9164:	2b01      	cmp	r3, #1
    9166:	f240 8193 	bls.w	9490 <command::runCommandSlice()+0xb34>
					pop8();
    916a:	f7ff f8d9 	bl	8320 <command::pop8()>
					uint8_t axes = pop8();
    916e:	f7ff f8d7 	bl	8320 <command::pop8()>
    9172:	4606      	mov	r6, r0
					line_number++;
    9174:	f640 3350 	movw	r3, #2896	; 0xb50
    9178:	f2c1 0300 	movt	r3, #4096	; 0x1000
    917c:	681a      	ldr	r2, [r3, #0]
    917e:	f102 0201 	add.w	r2, r2, #1
    9182:	601a      	str	r2, [r3, #0]
    9184:	f04f 050e 	mov.w	r5, #14
    9188:	f04f 0400 	mov.w	r4, #0
					
					// Go through each axis, and if that axis is specified, read it's value,
					// then record it to the eeprom.
					for (uint8_t i = 0; i < STEPPER_COUNT; i++) {
						if ( axes & (1 << i) ) {
    918c:	fa46 f304 	asr.w	r3, r6, r4
    9190:	f013 0f01 	tst.w	r3, #1
    9194:	d00a      	beq.n	91ac <command::runCommandSlice()+0x850>
							eeprom::setEeprom32(eeprom_offsets::AXIS_HOME_POSITIONS_STEPS + (i*4), steppers::getPosition()[i]);
    9196:	a811      	add	r0, sp, #68	; 0x44
    9198:	f006 f858 	bl	f24c <steppers::getPosition()>
    919c:	a811      	add	r0, sp, #68	; 0x44
    919e:	4621      	mov	r1, r4
    91a0:	f004 fccc 	bl	db3c <Point::operator[](unsigned int) const>
    91a4:	6801      	ldr	r1, [r0, #0]
    91a6:	4628      	mov	r0, r5
    91a8:	f008 f984 	bl	114b4 <eeprom::setEeprom32(unsigned short, unsigned long)>
    91ac:	f104 0401 	add.w	r4, r4, #1
    91b0:	f105 0504 	add.w	r5, r5, #4
    91b4:	b2ad      	uxth	r5, r5
					uint8_t axes = pop8();
					line_number++;
					
					// Go through each axis, and if that axis is specified, read it's value,
					// then record it to the eeprom.
					for (uint8_t i = 0; i < STEPPER_COUNT; i++) {
    91b6:	2c04      	cmp	r4, #4
    91b8:	d1e8      	bne.n	918c <command::runCommandSlice()+0x830>
    91ba:	e169      	b.n	9490 <command::runCommandSlice()+0xb34>
//							sei();
						}
						//eeprom::save_to_flash();
					}
				}
			} else if (command == HOST_CMD_RECALL_HOME_POSITION) {
    91bc:	2b90      	cmp	r3, #144	; 0x90
    91be:	d137      	bne.n	9230 <command::runCommandSlice()+0x8d4>
    91c0:	f640 3340 	movw	r3, #2880	; 0xb40
    91c4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    91c8:	885b      	ldrh	r3, [r3, #2]
    91ca:	b29b      	uxth	r3, r3
				// check for completion
				if (command_buffer.getLength() >= 2) {
    91cc:	2b01      	cmp	r3, #1
    91ce:	f240 815f 	bls.w	9490 <command::runCommandSlice()+0xb34>
					pop8();
    91d2:	f7ff f8a5 	bl	8320 <command::pop8()>
					uint8_t axes = pop8();
    91d6:	f7ff f8a3 	bl	8320 <command::pop8()>
    91da:	4607      	mov	r7, r0
					line_number++;
    91dc:	f640 3350 	movw	r3, #2896	; 0xb50
    91e0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    91e4:	681a      	ldr	r2, [r3, #0]
    91e6:	f102 0201 	add.w	r2, r2, #1
    91ea:	601a      	str	r2, [r3, #0]

					Point newPoint = steppers::getPosition();
    91ec:	a802      	add	r0, sp, #8
    91ee:	f006 f82d 	bl	f24c <steppers::getPosition()>
    91f2:	f04f 060e 	mov.w	r6, #14
    91f6:	f04f 0400 	mov.w	r4, #0

					for (uint8_t i = 0; i < STEPPER_COUNT; i++) {
						if ( axes & (1 << i) ) {
							newPoint[i] = eeprom::getEeprom32(eeprom_offsets::AXIS_HOME_POSITIONS_STEPS + (i*4),0);
    91fa:	46a0      	mov	r8, r4
					line_number++;

					Point newPoint = steppers::getPosition();

					for (uint8_t i = 0; i < STEPPER_COUNT; i++) {
						if ( axes & (1 << i) ) {
    91fc:	fa47 f304 	asr.w	r3, r7, r4
    9200:	f013 0f01 	tst.w	r3, #1
    9204:	d009      	beq.n	921a <command::runCommandSlice()+0x8be>
							newPoint[i] = eeprom::getEeprom32(eeprom_offsets::AXIS_HOME_POSITIONS_STEPS + (i*4),0);
    9206:	a802      	add	r0, sp, #8
    9208:	4621      	mov	r1, r4
    920a:	f004 fc9b 	bl	db44 <Point::operator[](unsigned int)>
    920e:	4605      	mov	r5, r0
    9210:	4630      	mov	r0, r6
    9212:	4641      	mov	r1, r8
    9214:	f008 f938 	bl	11488 <eeprom::getEeprom32(unsigned short, unsigned long)>
    9218:	6028      	str	r0, [r5, #0]
    921a:	f104 0401 	add.w	r4, r4, #1
    921e:	f106 0604 	add.w	r6, r6, #4
    9222:	b2b6      	uxth	r6, r6
					uint8_t axes = pop8();
					line_number++;

					Point newPoint = steppers::getPosition();

					for (uint8_t i = 0; i < STEPPER_COUNT; i++) {
    9224:	2c04      	cmp	r4, #4
    9226:	d1e9      	bne.n	91fc <command::runCommandSlice()+0x8a0>
//							eeprom_read_block(&(newPoint[i]), (void*) offset, 4);
//							sei();
						}
					}

					planner::definePosition(newPoint);
    9228:	a802      	add	r0, sp, #8
    922a:	f004 fba9 	bl	d980 <planner::definePosition(Point const&)>
    922e:	e12f      	b.n	9490 <command::runCommandSlice()+0xb34>
				}

			}else if (command == HOST_CMD_SET_POT_VALUE){
    9230:	2b91      	cmp	r3, #145	; 0x91
    9232:	d11c      	bne.n	926e <command::runCommandSlice()+0x912>
    9234:	f640 3340 	movw	r3, #2880	; 0xb40
    9238:	f2c1 0300 	movt	r3, #4096	; 0x1000
    923c:	885b      	ldrh	r3, [r3, #2]
    923e:	b29b      	uxth	r3, r3
				if (command_buffer.getLength() >= 3) {
    9240:	2b02      	cmp	r3, #2
    9242:	f240 8125 	bls.w	9490 <command::runCommandSlice()+0xb34>
					pop8(); // remove the command code
    9246:	f7ff f86b 	bl	8320 <command::pop8()>
					uint8_t axis = pop8();
    924a:	f7ff f869 	bl	8320 <command::pop8()>
    924e:	4604      	mov	r4, r0
					uint8_t value = pop8();
    9250:	f7ff f866 	bl	8320 <command::pop8()>
    9254:	4601      	mov	r1, r0
					line_number++;
    9256:	f640 3350 	movw	r3, #2896	; 0xb50
    925a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    925e:	681a      	ldr	r2, [r3, #0]
    9260:	f102 0201 	add.w	r2, r2, #1
    9264:	601a      	str	r2, [r3, #0]
                    steppers::setAxisPotValue(axis, value);
    9266:	4620      	mov	r0, r4
    9268:	f006 fdf8 	bl	fe5c <steppers::setAxisPotValue(unsigned char, unsigned char)>
    926c:	e110      	b.n	9490 <command::runCommandSlice()+0xb34>
				}
			}else if (command == HOST_CMD_SET_RGB_LED){
    926e:	2b92      	cmp	r3, #146	; 0x92
    9270:	d129      	bne.n	92c6 <command::runCommandSlice()+0x96a>
    9272:	f640 3340 	movw	r3, #2880	; 0xb40
    9276:	f2c1 0300 	movt	r3, #4096	; 0x1000
    927a:	885b      	ldrh	r3, [r3, #2]
    927c:	b29b      	uxth	r3, r3
				if (command_buffer.getLength() >= 6) {
    927e:	2b05      	cmp	r3, #5
    9280:	f240 8106 	bls.w	9490 <command::runCommandSlice()+0xb34>
					pop8(); // remove the command code
    9284:	f7ff f84c 	bl	8320 <command::pop8()>

					uint8_t red = pop8();
    9288:	f7ff f84a 	bl	8320 <command::pop8()>
    928c:	4604      	mov	r4, r0
					uint8_t green = pop8();
    928e:	f7ff f847 	bl	8320 <command::pop8()>
    9292:	4606      	mov	r6, r0
					uint8_t blue = pop8();
    9294:	f7ff f844 	bl	8320 <command::pop8()>
    9298:	4607      	mov	r7, r0
					uint8_t blink_rate = pop8();
    929a:	f7ff f841 	bl	8320 <command::pop8()>
    929e:	4605      	mov	r5, r0

                    uint8_t effect = pop8();
    92a0:	f7ff f83e 	bl	8320 <command::pop8()>
                    line_number++;
    92a4:	f640 3350 	movw	r3, #2896	; 0xb50
    92a8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    92ac:	681a      	ldr	r2, [r3, #0]
    92ae:	f102 0201 	add.w	r2, r2, #1
    92b2:	601a      	str	r2, [r3, #0]
                    RGB_LED::setLEDBlink(blink_rate);
    92b4:	4628      	mov	r0, r5
    92b6:	f004 ff69 	bl	e18c <RGB_LED::setLEDBlink(unsigned char)>
                    RGB_LED::setCustomColor(red, green, blue);
    92ba:	4620      	mov	r0, r4
    92bc:	4631      	mov	r1, r6
    92be:	463a      	mov	r2, r7
    92c0:	f004 fe96 	bl	dff0 <RGB_LED::setCustomColor(unsigned char, unsigned char, unsigned char)>
    92c4:	e0e4      	b.n	9490 <command::runCommandSlice()+0xb34>

				}
			}else if (command == HOST_CMD_SET_BEEP){
    92c6:	2b93      	cmp	r3, #147	; 0x93
    92c8:	d11f      	bne.n	930a <command::runCommandSlice()+0x9ae>
    92ca:	f640 3340 	movw	r3, #2880	; 0xb40
    92ce:	f2c1 0300 	movt	r3, #4096	; 0x1000
    92d2:	885b      	ldrh	r3, [r3, #2]
    92d4:	b29b      	uxth	r3, r3
				if (command_buffer.getLength() >= 6) {
    92d6:	2b05      	cmp	r3, #5
    92d8:	f240 80da 	bls.w	9490 <command::runCommandSlice()+0xb34>
					pop8(); // remove the command code
    92dc:	f7ff f820 	bl	8320 <command::pop8()>
					uint16_t frequency= pop16();
    92e0:	f7ff f850 	bl	8384 <command::pop16()>
    92e4:	4605      	mov	r5, r0
					uint16_t beep_length = pop16();
    92e6:	f7ff f84d 	bl	8384 <command::pop16()>
    92ea:	4604      	mov	r4, r0
					uint8_t effect = pop8();
    92ec:	f7ff f818 	bl	8320 <command::pop8()>
					line_number++;
    92f0:	f640 3350 	movw	r3, #2896	; 0xb50
    92f4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    92f8:	681a      	ldr	r2, [r3, #0]
    92fa:	f102 0201 	add.w	r2, r2, #1
    92fe:	601a      	str	r2, [r3, #0]
                    Piezo::setTone(frequency, beep_length);
    9300:	b2a8      	uxth	r0, r5
    9302:	b2a1      	uxth	r1, r4
    9304:	f003 f91c 	bl	c540 <Piezo::setTone(unsigned short, unsigned short)>
    9308:	e0c2      	b.n	9490 <command::runCommandSlice()+0xb34>

				}			
			}else if (command == HOST_CMD_TOOL_COMMAND) {
    930a:	2b88      	cmp	r3, #136	; 0x88
    930c:	d12a      	bne.n	9364 <command::runCommandSlice()+0xa08>
    930e:	f640 3340 	movw	r3, #2880	; 0xb40
    9312:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9316:	885b      	ldrh	r3, [r3, #2]
    9318:	b29b      	uxth	r3, r3
//				xprintf("HOST_CMD_TOOL_COMMAND" " (%s:%d)\n",_F_,_L_);
				if (command_buffer.getLength() >= 4) { // needs a payload
    931a:	2b03      	cmp	r3, #3
    931c:	f240 80b8 	bls.w	9490 <command::runCommandSlice()+0xb34>
	inline const bool isEmpty() const {
		return length == 0;
	}
	/// Read the buffer directly
	inline BufDataType& operator[](BufSizeType index) {
		const BufSizeType actual_index = (index + start) % size;
    9320:	f640 3340 	movw	r3, #2880	; 0xb40
    9324:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9328:	889c      	ldrh	r4, [r3, #4]
    932a:	b2a4      	uxth	r4, r4
		length -= sz;
	}

	/// Get the length of the buffer
	inline const BufSizeType getLength() const {
		return length;
    932c:	8859      	ldrh	r1, [r3, #2]
    932e:	b289      	uxth	r1, r1
	inline const bool isEmpty() const {
		return length == 0;
	}
	/// Read the buffer directly
	inline BufDataType& operator[](BufSizeType index) {
		const BufSizeType actual_index = (index + start) % size;
    9330:	f104 0303 	add.w	r3, r4, #3
    9334:	fb93 f4f2 	sdiv	r4, r3, r2
    9338:	fb02 3314 	mls	r3, r2, r4, r3
		return data[actual_index];
    933c:	b29b      	uxth	r3, r3
					uint8_t payload_length = command_buffer[3];
					if (command_buffer.getLength() >= 4+payload_length) {
    933e:	5cc3      	ldrb	r3, [r0, r3]
    9340:	f103 0304 	add.w	r3, r3, #4
    9344:	4299      	cmp	r1, r3
    9346:	f2c0 80a3 	blt.w	9490 <command::runCommandSlice()+0xb34>
							pop8(); // remove the command code
    934a:	f7fe ffe9 	bl	8320 <command::pop8()>
							line_number++;
    934e:	f640 3350 	movw	r3, #2896	; 0xb50
    9352:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9356:	681a      	ldr	r2, [r3, #0]
    9358:	f102 0201 	add.w	r2, r2, #1
    935c:	601a      	str	r2, [r3, #0]
							processExtruderCommandPacket();
    935e:	f7ff fa07 	bl	8770 <command::processExtruderCommandPacket()>
    9362:	e095      	b.n	9490 <command::runCommandSlice()+0xb34>
				}
			}
			} else if (command == HOST_CMD_SET_BUILD_PERCENT){
    9364:	2b96      	cmp	r3, #150	; 0x96
    9366:	d117      	bne.n	9398 <command::runCommandSlice()+0xa3c>
		length -= sz;
	}

	/// Get the length of the buffer
	inline const BufSizeType getLength() const {
		return length;
    9368:	f640 3340 	movw	r3, #2880	; 0xb40
    936c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9370:	885b      	ldrh	r3, [r3, #2]
    9372:	b29b      	uxth	r3, r3
//				xprintf("HOST_CMD_SET_BUILD_PERCENT) {" " (%s:%d)\n",_F_,_L_);
				if (command_buffer.getLength() >= 3){
    9374:	2b02      	cmp	r3, #2
    9376:	f240 808b 	bls.w	9490 <command::runCommandSlice()+0xb34>
					pop8(); // remove the command code
    937a:	f7fe ffd1 	bl	8320 <command::pop8()>
					uint8_t percent = pop8();
    937e:	f7fe ffcf 	bl	8320 <command::pop8()>
					uint8_t ignore = pop8(); // remove the reserved byte
    9382:	f7fe ffcd 	bl	8320 <command::pop8()>
					line_number++;
    9386:	f640 3350 	movw	r3, #2896	; 0xb50
    938a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    938e:	681a      	ldr	r2, [r3, #0]
    9390:	f102 0201 	add.w	r2, r2, #1
    9394:	601a      	str	r2, [r3, #0]
    9396:	e07b      	b.n	9490 <command::runCommandSlice()+0xb34>
//					interface::setBuildPercentage(percent);
				}
			} else if (command == HOST_CMD_QUEUE_SONG ) //queue a song for playing
    9398:	2b97      	cmp	r3, #151	; 0x97
    939a:	d123      	bne.n	93e4 <command::runCommandSlice()+0xa88>
    939c:	f640 3340 	movw	r3, #2880	; 0xb40
    93a0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    93a4:	885b      	ldrh	r3, [r3, #2]
    93a6:	b29b      	uxth	r3, r3
 			{
				/// Error tone is 0,
				/// End tone is 1,
				/// all other tones user-defined (defaults to end-tone)
				if (command_buffer.getLength() >= 2){
    93a8:	2b01      	cmp	r3, #1
    93aa:	d971      	bls.n	9490 <command::runCommandSlice()+0xb34>
					pop8(); // remove the command code
    93ac:	f7fe ffb8 	bl	8320 <command::pop8()>
					uint8_t songId = pop8();
    93b0:	f7fe ffb6 	bl	8320 <command::pop8()>
					line_number++;
    93b4:	f640 3350 	movw	r3, #2896	; 0xb50
    93b8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    93bc:	681a      	ldr	r2, [r3, #0]
    93be:	f102 0201 	add.w	r2, r2, #1
    93c2:	601a      	str	r2, [r3, #0]
					if(songId == 0)
    93c4:	b920      	cbnz	r0, 93d0 <command::runCommandSlice()+0xa74>
						Piezo::errorTone(4);
    93c6:	f04f 0004 	mov.w	r0, #4
    93ca:	f003 f91d 	bl	c608 <Piezo::errorTone(unsigned char)>
    93ce:	e05f      	b.n	9490 <command::runCommandSlice()+0xb34>
					else if (songId == 1 )
    93d0:	2801      	cmp	r0, #1
    93d2:	d102      	bne.n	93da <command::runCommandSlice()+0xa7e>
						Piezo::doneTone();
    93d4:	f003 f932 	bl	c63c <Piezo::doneTone()>
    93d8:	e05a      	b.n	9490 <command::runCommandSlice()+0xb34>
					else
						Piezo::errorTone(2);
    93da:	f04f 0002 	mov.w	r0, #2
    93de:	f003 f913 	bl	c608 <Piezo::errorTone(unsigned char)>
    93e2:	e055      	b.n	9490 <command::runCommandSlice()+0xb34>
				}

			} else if ( command == HOST_CMD_RESET_TO_FACTORY) {
    93e4:	2b98      	cmp	r3, #152	; 0x98
    93e6:	d11e      	bne.n	9426 <command::runCommandSlice()+0xaca>
    93e8:	f640 3340 	movw	r3, #2880	; 0xb40
    93ec:	f2c1 0300 	movt	r3, #4096	; 0x1000
    93f0:	885b      	ldrh	r3, [r3, #2]
    93f2:	b29b      	uxth	r3, r3
				/// reset EEPROM settings to the factory value. Reboot bot.
				if (command_buffer.getLength() >= 2){
    93f4:	2b01      	cmp	r3, #1
    93f6:	d94b      	bls.n	9490 <command::runCommandSlice()+0xb34>
				pop8(); // remove the command code
    93f8:	f7fe ff92 	bl	8320 <command::pop8()>
				uint8_t options = pop8();
    93fc:	f7fe ff90 	bl	8320 <command::pop8()>
				line_number++;
    9400:	f640 3350 	movw	r3, #2896	; 0xb50
    9404:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9408:	681a      	ldr	r2, [r3, #0]
    940a:	f102 0201 	add.w	r2, r2, #1
    940e:	601a      	str	r2, [r3, #0]
				eeprom::factoryResetEEPROM();
    9410:	f000 fcf4 	bl	9dfc <eeprom::factoryResetEEPROM()>
				Motherboard::getBoard().reset(false);
    9414:	f640 509c 	movw	r0, #3484	; 0xd9c
    9418:	f2c1 0000 	movt	r0, #4096	; 0x1000
    941c:	f04f 0100 	mov.w	r1, #0
    9420:	f002 fce6 	bl	bdf0 <Motherboard::reset(bool)>
    9424:	e034      	b.n	9490 <command::runCommandSlice()+0xb34>
				}
			} else if ( command == HOST_CMD_BUILD_START_NOTIFICATION) {
    9426:	2b99      	cmp	r3, #153	; 0x99
    9428:	d11a      	bne.n	9460 <command::runCommandSlice()+0xb04>
    942a:	f640 3340 	movw	r3, #2880	; 0xb40
    942e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9432:	885b      	ldrh	r3, [r3, #2]
    9434:	b29b      	uxth	r3, r3
//				xprintf("HOST_CMD_BUILD_START_NOTIFICATION" " (%s:%d)\n",_F_,_L_);
				if (command_buffer.getLength() >= 5){
    9436:	2b04      	cmp	r3, #4
    9438:	d92a      	bls.n	9490 <command::runCommandSlice()+0xb34>
					pop8(); // remove the command code
    943a:	f7fe ff71 	bl	8320 <command::pop8()>
					int buildSteps = pop32();
    943e:	f7ff f807 	bl	8450 <command::pop32()>
					line_number++;
    9442:	f640 3350 	movw	r3, #2896	; 0xb50
    9446:	f2c1 0300 	movt	r3, #4096	; 0x1000
    944a:	681a      	ldr	r2, [r3, #0]
    944c:	f102 0201 	add.w	r2, r2, #1
    9450:	601a      	str	r2, [r3, #0]
					host::handleBuildStartNotification(command_buffer);		
    9452:	f640 3040 	movw	r0, #2880	; 0xb40
    9456:	f2c1 0000 	movt	r0, #4096	; 0x1000
    945a:	f001 f8d1 	bl	a600 <host::handleBuildStartNotification(CircularBufferTempl<unsigned char>&)>
    945e:	e017      	b.n	9490 <command::runCommandSlice()+0xb34>
				}
			 } else if ( command == HOST_CMD_BUILD_END_NOTIFICATION) {
    9460:	2b9a      	cmp	r3, #154	; 0x9a
    9462:	d115      	bne.n	9490 <command::runCommandSlice()+0xb34>
    9464:	f640 3340 	movw	r3, #2880	; 0xb40
    9468:	f2c1 0300 	movt	r3, #4096	; 0x1000
    946c:	885b      	ldrh	r3, [r3, #2]
    946e:	b29b      	uxth	r3, r3
				if (command_buffer.getLength() >= 2){
    9470:	2b01      	cmp	r3, #1
    9472:	d90d      	bls.n	9490 <command::runCommandSlice()+0xb34>
					pop8(); // remove the command code
    9474:	f7fe ff54 	bl	8320 <command::pop8()>
					uint8_t flags = pop8();
    9478:	f7fe ff52 	bl	8320 <command::pop8()>
					line_number++;
    947c:	f640 3350 	movw	r3, #2896	; 0xb50
    9480:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9484:	681a      	ldr	r2, [r3, #0]
    9486:	f102 0201 	add.w	r2, r2, #1
    948a:	601a      	str	r2, [r3, #0]
					host::handleBuildStopNotification(flags);
    948c:	f001 f9fe 	bl	a88c <host::handleBuildStopNotification(unsigned char)>
			}
		}
	}
	
	/// we're not handling overflows in the line counter.  Possibly implement this later.
	if(line_number > MAX_LINE_COUNT){
    9490:	f640 3350 	movw	r3, #2896	; 0xb50
    9494:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9498:	f44f 424a 	mov.w	r2, #51712	; 0xca00
    949c:	f6c3 329a 	movt	r2, #15258	; 0x3b9a
    94a0:	681b      	ldr	r3, [r3, #0]
    94a2:	4293      	cmp	r3, r2
    94a4:	d91c      	bls.n	94e0 <command::runCommandSlice()+0xb84>
		line_number = MAX_LINE_COUNT + 1;
    94a6:	f640 3350 	movw	r3, #2896	; 0xb50
    94aa:	f2c1 0300 	movt	r3, #4096	; 0x1000
    94ae:	f64c 2201 	movw	r2, #51713	; 0xca01
    94b2:	f6c3 329a 	movt	r2, #15258	; 0x3b9a
    94b6:	601a      	str	r2, [r3, #0]
    94b8:	e012      	b.n	94e0 <command::runCommandSlice()+0xb84>
	if (sdcard::isPlaying()) {
		while (command_buffer.getRemainingCapacity() > 0 && sdcard::playbackHasNext()) {
			sd_count++;
			command_buffer.push(sdcard::playbackNext());
		}
		if(!sdcard::playbackHasNext() && (sd_count < sdcard::getFileSize()) && !sdcard_reset){
    94ba:	f005 f84d 	bl	e558 <sdcard::playbackHasNext()>
    94be:	2800      	cmp	r0, #0
    94c0:	f43f aa88 	beq.w	89d4 <command::runCommandSlice()+0x78>
			//sdcard::startPlayback(host::getBuildName());
			//uint32_t count;
			//while(count < sd_count){
			//	sdcard::playbackNext();
			//}
		}else if(!sdcard::playbackHasNext() && command_buffer.isEmpty()){
    94c4:	f005 f848 	bl	e558 <sdcard::playbackHasNext()>
    94c8:	2800      	cmp	r0, #0
    94ca:	f43f aaa9 	beq.w	8a20 <command::runCommandSlice()+0xc4>
    94ce:	f7ff bab0 	b.w	8a32 <command::runCommandSlice()+0xd6>
    // get command from onboard script if building from onboard
	if(utility::isPlaying()){		
		while (command_buffer.getRemainingCapacity() > 0 && utility::playbackHasNext()){
			command_buffer.push(utility::playbackNext());
		}
		if(!utility::playbackHasNext() && command_buffer.isEmpty()){
    94d2:	f007 fc23 	bl	10d1c <utility::playbackHasNext()>
    94d6:	2800      	cmp	r0, #0
    94d8:	f43f aadc 	beq.w	8a94 <command::runCommandSlice()+0x138>
    94dc:	f7ff bae3 	b.w	8aa6 <command::runCommandSlice()+0x14a>
	
	/// we're not handling overflows in the line counter.  Possibly implement this later.
	if(line_number > MAX_LINE_COUNT){
		line_number = MAX_LINE_COUNT + 1;
	}
}
    94e0:	b016      	add	sp, #88	; 0x58
    94e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    94e6:	bf00      	nop

000094e8 <_GLOBAL__sub_I__ZN7command11buffer_dataE>:
}
    94e8:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
    94ea:	f640 00e8 	movw	r0, #2280	; 0x8e8
    94ee:	f2c1 0000 	movt	r0, #4096	; 0x1000
    94f2:	f04f 0100 	mov.w	r1, #0
    94f6:	f008 fba1 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
    94fa:	f640 00ec 	movw	r0, #2284	; 0x8ec
    94fe:	f2c1 0000 	movt	r0, #4096	; 0x1000
    9502:	f04f 0101 	mov.w	r1, #1
    9506:	f008 fb99 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
    950a:	f640 00f0 	movw	r0, #2288	; 0x8f0
    950e:	f2c1 0000 	movt	r0, #4096	; 0x1000
    9512:	f04f 0102 	mov.w	r1, #2
    9516:	f008 fb91 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
    951a:	f640 00f4 	movw	r0, #2292	; 0x8f4
    951e:	f2c1 0000 	movt	r0, #4096	; 0x1000
    9522:	f04f 0103 	mov.w	r1, #3
    9526:	f008 fb89 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
    952a:	f640 00fc 	movw	r0, #2300	; 0x8fc
    952e:	f2c1 0000 	movt	r0, #4096	; 0x1000
    9532:	f04f 0104 	mov.w	r1, #4
    9536:	f008 fb81 	bl	11c3c <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
    953a:	f640 3418 	movw	r4, #2840	; 0xb18
    953e:	f2c1 0400 	movt	r4, #4096	; 0x1000
    9542:	4620      	mov	r0, r4
    9544:	f04f 01ff 	mov.w	r1, #255	; 0xff
    9548:	f008 fb78 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    954c:	f640 3010 	movw	r0, #2832	; 0xb10
    9550:	f2c1 0000 	movt	r0, #4096	; 0x1000
    9554:	4621      	mov	r1, r4
    9556:	f04f 0200 	mov.w	r2, #0
    955a:	f008 fd81 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
	volatile bool overflow; /// Overflow indicator
	volatile bool underflow; /// Underflow indicator
public:
	CircularBufferTempl(BufSizeType size_in, BufDataType* data_in) :
		size(size_in), length(0), start(0), data(data_in), overflow(false),
				underflow(false) {
    955e:	f640 3340 	movw	r3, #2880	; 0xb40
    9562:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9566:	f44f 7200 	mov.w	r2, #512	; 0x200
    956a:	801a      	strh	r2, [r3, #0]
    956c:	f04f 0200 	mov.w	r2, #0
    9570:	4611      	mov	r1, r2
    9572:	805a      	strh	r2, [r3, #2]
    9574:	809a      	strh	r2, [r3, #4]
    9576:	f640 1200 	movw	r2, #2304	; 0x900
    957a:	f2c1 0200 	movt	r2, #4096	; 0x1000
    957e:	609a      	str	r2, [r3, #8]
    9580:	7319      	strb	r1, [r3, #12]
    9582:	7359      	strb	r1, [r3, #13]
	WAIT_ON_TOOL,
	WAIT_ON_PLATFORM,
	WAIT_ON_BUTTON
} mode = READY;

Timeout delay_timeout;
    9584:	f640 3058 	movw	r0, #2904	; 0xb58
    9588:	f2c1 0000 	movt	r0, #4096	; 0x1000
    958c:	f009 f902 	bl	12794 <Timeout::Timeout()>
Timeout homing_timeout;
    9590:	f640 302c 	movw	r0, #2860	; 0xb2c
    9594:	f2c1 0000 	movt	r0, #4096	; 0x1000
    9598:	f009 f8fc 	bl	12794 <Timeout::Timeout()>
Timeout tool_wait_timeout;
    959c:	f640 3000 	movw	r0, #2816	; 0xb00
    95a0:	f2c1 0000 	movt	r0, #4096	; 0x1000
    95a4:	f009 f8f6 	bl	12794 <Timeout::Timeout()>
Timeout button_wait_timeout;
    95a8:	f640 301c 	movw	r0, #2844	; 0xb1c
    95ac:	f2c1 0000 	movt	r0, #4096	; 0x1000
    95b0:	f009 f8f0 	bl	12794 <Timeout::Timeout()>
	/// we're not handling overflows in the line counter.  Possibly implement this later.
	if(line_number > MAX_LINE_COUNT){
		line_number = MAX_LINE_COUNT + 1;
	}
}
}
    95b4:	bd10      	pop	{r4, pc}
    95b6:	bf00      	nop

000095b8 <Cutoff::resetCutoff()>:
	// set reset line to default value (low)
	CUTOFF_RESET.setValue(false);
	
}

void Cutoff::resetCutoff(){
    95b8:	b510      	push	{r4, lr}
    95ba:	b08c      	sub	sp, #48	; 0x30
    95bc:	4604      	mov	r4, r0
	
	//Timeout resetTimeout;

	// abort if cutoff test is high
	if(CUTOFF_TEST.getValue())
    95be:	a802      	add	r0, sp, #8
    95c0:	f04f 01ff 	mov.w	r1, #255	; 0xff
    95c4:	f008 fb3a 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    95c8:	4668      	mov	r0, sp
    95ca:	a902      	add	r1, sp, #8
    95cc:	f04f 02ff 	mov.w	r2, #255	; 0xff
    95d0:	f008 fd46 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
	Pin(const LPCPort& port_in, uint8_t pin_index_in);
	Pin(const Pin& other_pin);
	bool isNull() const;
	void setDirection(bool out) const;
	bool /*Pin::*/getValue() const {
		if (is_null)
    95d4:	f89d 3001 	ldrb.w	r3, [sp, #1]
    95d8:	b96b      	cbnz	r3, 95f6 <Cutoff::resetCutoff()+0x3e>
			return false; // null pin is always low ... ?
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
    95da:	f89d 0000 	ldrb.w	r0, [sp]
    95de:	f7f9 ff9b 	bl	3518 <FIO_ReadValue>
    95e2:	f89d 3002 	ldrb.w	r3, [sp, #2]
    95e6:	f04f 0201 	mov.w	r2, #1
    95ea:	fa02 f303 	lsl.w	r3, r2, r3
    95ee:	4003      	ands	r3, r0
    95f0:	f013 0fff 	tst.w	r3, #255	; 0xff
    95f4:	d14f      	bne.n	9696 <Cutoff::resetCutoff()+0xde>
		return;
		
	// toggle reset pin	
	CUTOFF_RESET.setValue(true);
    95f6:	a805      	add	r0, sp, #20
    95f8:	f04f 01ff 	mov.w	r1, #255	; 0xff
    95fc:	f008 fb1e 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    9600:	a803      	add	r0, sp, #12
    9602:	a905      	add	r1, sp, #20
    9604:	f04f 02ff 	mov.w	r2, #255	; 0xff
    9608:	f008 fd2a 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    960c:	f89d 300d 	ldrb.w	r3, [sp, #13]
    9610:	b94b      	cbnz	r3, 9626 <Cutoff::resetCutoff()+0x6e>
//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    9612:	f89d 300e 	ldrb.w	r3, [sp, #14]
    9616:	f89d 000c 	ldrb.w	r0, [sp, #12]
    961a:	f04f 0101 	mov.w	r1, #1
    961e:	fa01 f103 	lsl.w	r1, r1, r3
    9622:	f7f9 ff5f 	bl	34e4 <GPIO_SetValue>
	
	// ensure that reset worked
	// if not, enable hardware circuit
	if(CUTOFF_SR_CHECK.getValue())
    9626:	a808      	add	r0, sp, #32
    9628:	f04f 01ff 	mov.w	r1, #255	; 0xff
    962c:	f008 fb06 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    9630:	a806      	add	r0, sp, #24
    9632:	a908      	add	r1, sp, #32
    9634:	f04f 02ff 	mov.w	r2, #255	; 0xff
    9638:	f008 fd12 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
	Pin(const LPCPort& port_in, uint8_t pin_index_in);
	Pin(const Pin& other_pin);
	bool isNull() const;
	void setDirection(bool out) const;
	bool /*Pin::*/getValue() const {
		if (is_null)
    963c:	f89d 3019 	ldrb.w	r3, [sp, #25]
    9640:	b98b      	cbnz	r3, 9666 <Cutoff::resetCutoff()+0xae>
			return false; // null pin is always low ... ?
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
    9642:	f89d 0018 	ldrb.w	r0, [sp, #24]
    9646:	f7f9 ff67 	bl	3518 <FIO_ReadValue>
    964a:	f89d 301a 	ldrb.w	r3, [sp, #26]
    964e:	f04f 0201 	mov.w	r2, #1
    9652:	fa02 f303 	lsl.w	r3, r2, r3
    9656:	4003      	ands	r3, r0
    9658:	f013 0fff 	tst.w	r3, #255	; 0xff
    965c:	d003      	beq.n	9666 <Cutoff::resetCutoff()+0xae>
		disable();
    965e:	4620      	mov	r0, r4
    9660:	f000 f81c 	bl	969c <Cutoff::disable()>
    9664:	e017      	b.n	9696 <Cutoff::resetCutoff()+0xde>
	// if reset OK, return reset line to default (pulled down)
	else
		CUTOFF_RESET.setValue(false);
    9666:	a80b      	add	r0, sp, #44	; 0x2c
    9668:	f04f 01ff 	mov.w	r1, #255	; 0xff
    966c:	f008 fae6 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    9670:	a809      	add	r0, sp, #36	; 0x24
    9672:	a90b      	add	r1, sp, #44	; 0x2c
    9674:	f04f 02ff 	mov.w	r2, #255	; 0xff
    9678:	f008 fcf2 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    967c:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    9680:	b94b      	cbnz	r3, 9696 <Cutoff::resetCutoff()+0xde>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    9682:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    9686:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    968a:	f04f 0101 	mov.w	r1, #1
    968e:	fa01 f103 	lsl.w	r1, r1, r3
    9692:	f7f9 ff2f 	bl	34f4 <GPIO_ClearValue>
}
    9696:	b00c      	add	sp, #48	; 0x30
    9698:	bd10      	pop	{r4, pc}
    969a:	bf00      	nop

0000969c <Cutoff::disable()>:
	// set reset line to default value (low)
	CUTOFF_RESET.setValue(false);
	
}
void Cutoff::disable()
{
    969c:	b510      	push	{r4, lr}
    969e:	b08c      	sub	sp, #48	; 0x30
    96a0:	4604      	mov	r4, r0
	// cutoff test pin is an output and pulled down
	CUTOFF_TEST.setValue(false);
    96a2:	a802      	add	r0, sp, #8
    96a4:	f04f 01ff 	mov.w	r1, #255	; 0xff
    96a8:	f008 fac8 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    96ac:	4668      	mov	r0, sp
    96ae:	a902      	add	r1, sp, #8
    96b0:	f04f 02ff 	mov.w	r2, #255	; 0xff
    96b4:	f008 fcd4 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    96b8:	f89d 3001 	ldrb.w	r3, [sp, #1]
    96bc:	b94b      	cbnz	r3, 96d2 <Cutoff::disable()+0x36>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    96be:	f89d 3002 	ldrb.w	r3, [sp, #2]
    96c2:	f89d 0000 	ldrb.w	r0, [sp]
    96c6:	f04f 0101 	mov.w	r1, #1
    96ca:	fa01 f103 	lsl.w	r1, r1, r3
    96ce:	f7f9 ff11 	bl	34f4 <GPIO_ClearValue>
	CUTOFF_TEST.setDirection(true);
    96d2:	a805      	add	r0, sp, #20
    96d4:	f04f 01ff 	mov.w	r1, #255	; 0xff
    96d8:	f008 fab0 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    96dc:	a803      	add	r0, sp, #12
    96de:	a905      	add	r1, sp, #20
    96e0:	f04f 02ff 	mov.w	r2, #255	; 0xff
    96e4:	f008 fcbc 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    96e8:	a803      	add	r0, sp, #12
    96ea:	f04f 0101 	mov.w	r1, #1
    96ee:	f008 fcd7 	bl	120a0 <Pin::setDirection(bool) const>
	
	cutoff_enabled = false;
    96f2:	f04f 0300 	mov.w	r3, #0
    96f6:	7023      	strb	r3, [r4, #0]
	// if output is shut off (high when off), toggle reset pin
	if(CUTOFF_SR_CHECK.getValue())
    96f8:	a808      	add	r0, sp, #32
    96fa:	f04f 01ff 	mov.w	r1, #255	; 0xff
    96fe:	f008 fa9d 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    9702:	a806      	add	r0, sp, #24
    9704:	a908      	add	r1, sp, #32
    9706:	f04f 02ff 	mov.w	r2, #255	; 0xff
    970a:	f008 fca9 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
	Pin(const LPCPort& port_in, uint8_t pin_index_in);
	Pin(const Pin& other_pin);
	bool isNull() const;
	void setDirection(bool out) const;
	bool /*Pin::*/getValue() const {
		if (is_null)
    970e:	f89d 3019 	ldrb.w	r3, [sp, #25]
    9712:	b983      	cbnz	r3, 9736 <Cutoff::disable()+0x9a>
			return false; // null pin is always low ... ?
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
    9714:	f89d 0018 	ldrb.w	r0, [sp, #24]
    9718:	f7f9 fefe 	bl	3518 <FIO_ReadValue>
    971c:	f89d 301a 	ldrb.w	r3, [sp, #26]
    9720:	f04f 0201 	mov.w	r2, #1
    9724:	fa02 f303 	lsl.w	r3, r2, r3
    9728:	4003      	ands	r3, r0
    972a:	f013 0fff 	tst.w	r3, #255	; 0xff
    972e:	d002      	beq.n	9736 <Cutoff::disable()+0x9a>
		resetCutoff();
    9730:	4620      	mov	r0, r4
    9732:	f7ff ff41 	bl	95b8 <Cutoff::resetCutoff()>
	
	// set reset line to default value (low)
	CUTOFF_RESET.setValue(false);
    9736:	a80b      	add	r0, sp, #44	; 0x2c
    9738:	f04f 01ff 	mov.w	r1, #255	; 0xff
    973c:	f008 fa7e 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    9740:	a809      	add	r0, sp, #36	; 0x24
    9742:	a90b      	add	r1, sp, #44	; 0x2c
    9744:	f04f 02ff 	mov.w	r2, #255	; 0xff
    9748:	f008 fc8a 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    974c:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    9750:	b94b      	cbnz	r3, 9766 <Cutoff::disable()+0xca>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    9752:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    9756:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    975a:	f04f 0101 	mov.w	r1, #1
    975e:	fa01 f103 	lsl.w	r1, r1, r3
    9762:	f7f9 fec7 	bl	34f4 <GPIO_ClearValue>
	
}
    9766:	b00c      	add	sp, #48	; 0x30
    9768:	bd10      	pop	{r4, pc}
    976a:	bf00      	nop

0000976c <Cutoff::init()>:
#include "Pin.hh"
#include "Piezo.hh"


void Cutoff::init()
{
    976c:	b510      	push	{r4, lr}
    976e:	4604      	mov	r4, r0
//	CUTOFF_SR_CHECK.setDirection(false);
 
	if (CUTOFF_PRESENT)
		enable();
	else
		disable();
    9770:	f7ff ff94 	bl	969c <Cutoff::disable()>
		
	noiseCount = 0;
    9774:	f04f 0300 	mov.w	r3, #0
    9778:	7063      	strb	r3, [r4, #1]
	cutoffCount = 0;
    977a:	70a3      	strb	r3, [r4, #2]
	alarmRun = false;
    977c:	70e3      	strb	r3, [r4, #3]
}
    977e:	bd10      	pop	{r4, pc}

00009780 <_GLOBAL__sub_I__ZN6Cutoff4initEv>:
			noiseCount++;
			cutoffCount = 0;
		}
		
		return true;
}
    9780:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
    9782:	f640 306c 	movw	r0, #2924	; 0xb6c
    9786:	f2c1 0000 	movt	r0, #4096	; 0x1000
    978a:	f04f 0100 	mov.w	r1, #0
    978e:	f008 fa55 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
    9792:	f640 3070 	movw	r0, #2928	; 0xb70
    9796:	f2c1 0000 	movt	r0, #4096	; 0x1000
    979a:	f04f 0101 	mov.w	r1, #1
    979e:	f008 fa4d 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
    97a2:	f640 3074 	movw	r0, #2932	; 0xb74
    97a6:	f2c1 0000 	movt	r0, #4096	; 0x1000
    97aa:	f04f 0102 	mov.w	r1, #2
    97ae:	f008 fa45 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
    97b2:	f640 3078 	movw	r0, #2936	; 0xb78
    97b6:	f2c1 0000 	movt	r0, #4096	; 0x1000
    97ba:	f04f 0103 	mov.w	r1, #3
    97be:	f008 fa3d 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
    97c2:	f640 307c 	movw	r0, #2940	; 0xb7c
    97c6:	f2c1 0000 	movt	r0, #4096	; 0x1000
    97ca:	f04f 0104 	mov.w	r1, #4
    97ce:	f008 fa35 	bl	11c3c <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
    97d2:	f640 3480 	movw	r4, #2944	; 0xb80
    97d6:	f2c1 0400 	movt	r4, #4096	; 0x1000
    97da:	4620      	mov	r0, r4
    97dc:	f04f 01ff 	mov.w	r1, #255	; 0xff
    97e0:	f008 fa2c 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
	};
	// currently not used:
	//const uint8_t getPinIndex() const { return pin_index; }
};

static const Pin NullPin(NullPort, 0);
    97e4:	f640 3084 	movw	r0, #2948	; 0xb84
    97e8:	f2c1 0000 	movt	r0, #4096	; 0x1000
    97ec:	4621      	mov	r1, r4
    97ee:	f04f 0200 	mov.w	r2, #0
    97f2:	f008 fc35 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    97f6:	bd10      	pop	{r4, pc}

000097f8 <processDebugPacket(InPacket const&, OutPacket&)>:

/// Identify a debug packet, and process it.  If the packet is a debug
/// packet, return true, indicating that no further processing should
/// be done.  Otherwise, processing of this packet should drop through
/// to the next processing level.
bool processDebugPacket(const InPacket& from_host, OutPacket& to_host) {
    97f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    97fa:	4604      	mov	r4, r0
    97fc:	460d      	mov	r5, r1
	void error(uint8_t error_code_in) {
		reset();
		error_code = error_code_in;
	}
public:
	uint8_t getLength() const { return length; }
    97fe:	7803      	ldrb	r3, [r0, #0]
	if (from_host.getLength() == 0) {
    9800:	2b00      	cmp	r3, #0
    9802:	d072      	beq.n	98ea <processDebugPacket(InPacket const&, OutPacket&)+0xf2>
		return false;
	} // drop through on a nop packet
	uint8_t command = from_host.read8(0);
    9804:	4607      	mov	r7, r0
    9806:	f04f 0100 	mov.w	r1, #0
    980a:	f008 fb0f 	bl	11e2c <Packet::read8(unsigned char) const>

	if ((command & 0x70) == 0x70) {
    980e:	f000 0370 	and.w	r3, r0, #112	; 0x70
    9812:	2b70      	cmp	r3, #112	; 0x70
    9814:	d16c      	bne.n	98f0 <processDebugPacket(InPacket const&, OutPacket&)+0xf8>
		// This is a debug packet
		if (command == CommandCode::DEBUG_ECHO) {
    9816:	2870      	cmp	r0, #112	; 0x70
    9818:	d117      	bne.n	984a <processDebugPacket(InPacket const&, OutPacket&)+0x52>
			// We start from 1 so we can skip the debug command byte.
			to_host.reset();
    981a:	4628      	mov	r0, r5
    981c:	f008 fb14 	bl	11e48 <OutPacket::reset()>
    9820:	7823      	ldrb	r3, [r4, #0]
			for (int i = 1; i < from_host.getLength(); i++) {
    9822:	2b01      	cmp	r3, #1
    9824:	dd67      	ble.n	98f6 <processDebugPacket(InPacket const&, OutPacket&)+0xfe>
    9826:	f04f 0601 	mov.w	r6, #1
				to_host.append8(from_host.read8(i));
    982a:	4638      	mov	r0, r7
    982c:	b2f1      	uxtb	r1, r6
    982e:	f008 fafd 	bl	11e2c <Packet::read8(unsigned char) const>
    9832:	4601      	mov	r1, r0
    9834:	4628      	mov	r0, r5
    9836:	f008 fb51 	bl	11edc <OutPacket::append8(unsigned char)>
	if ((command & 0x70) == 0x70) {
		// This is a debug packet
		if (command == CommandCode::DEBUG_ECHO) {
			// We start from 1 so we can skip the debug command byte.
			to_host.reset();
			for (int i = 1; i < from_host.getLength(); i++) {
    983a:	f106 0601 	add.w	r6, r6, #1
    983e:	7823      	ldrb	r3, [r4, #0]
    9840:	42b3      	cmp	r3, r6
    9842:	dcf2      	bgt.n	982a <processDebugPacket(InPacket const&, OutPacket&)+0x32>
				to_host.append8(from_host.read8(i));
			}
			return true;
    9844:	f04f 0001 	mov.w	r0, #1
    9848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		} else if (command == CommandCode::DEBUG_GENERATE_BAD_PACKET) {
    984a:	2871      	cmp	r0, #113	; 0x71
    984c:	d056      	beq.n	98fc <processDebugPacket(InPacket const&, OutPacket&)+0x104>
			// TODO
		} else if (command == CommandCode::DEBUG_SIMULATE_BAD_PACKET) {
    984e:	2872      	cmp	r0, #114	; 0x72
    9850:	d057      	beq.n	9902 <processDebugPacket(InPacket const&, OutPacket&)+0x10a>
				for (int i = 0; i < in.getLength(); i++) {
					to_host.append8(in.read8(i));
				}
			}
			return true;
		} */else if (command == CommandCode::DEBUG_CLEAR_COMMAND_QUEUE) {
    9852:	2874      	cmp	r0, #116	; 0x74
    9854:	d109      	bne.n	986a <processDebugPacket(InPacket const&, OutPacket&)+0x72>
			command::reset();
    9856:	f7fe ff53 	bl	8700 <command::reset()>
			to_host.append8(RC_OK);
    985a:	4628      	mov	r0, r5
    985c:	f04f 0181 	mov.w	r1, #129	; 0x81
    9860:	f008 fb3c 	bl	11edc <OutPacket::append8(unsigned char)>
			return true;
    9864:	f04f 0001 	mov.w	r0, #1
    9868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		} else if (command == CommandCode::DEBUG_SET_DEBUG_CODE ) {
    986a:	2876      	cmp	r0, #118	; 0x76
    986c:	d11a      	bne.n	98a4 <processDebugPacket(InPacket const&, OutPacket&)+0xac>
			uint8_t debug_register = from_host.read8(1);
    986e:	4620      	mov	r0, r4
    9870:	f04f 0101 	mov.w	r1, #1
    9874:	f008 fada 	bl	11e2c <Packet::read8(unsigned char) const>
    9878:	4606      	mov	r6, r0
			uint8_t value = from_host.read8(2);
    987a:	4620      	mov	r0, r4
    987c:	f04f 0102 	mov.w	r1, #2
    9880:	f008 fad4 	bl	11e2c <Packet::read8(unsigned char) const>
    9884:	4601      	mov	r1, r0
			if (debug_register == 0) {
    9886:	b92e      	cbnz	r6, 9894 <processDebugPacket(InPacket const&, OutPacket&)+0x9c>
				Motherboard::getBoard().indicateError(value);
    9888:	f640 509c 	movw	r0, #3484	; 0xd9c
    988c:	f2c1 0000 	movt	r0, #4096	; 0x1000
    9890:	f002 f96c 	bl	bb6c <Motherboard::indicateError(int)>
			}
			to_host.append8(RC_OK);
    9894:	4628      	mov	r0, r5
    9896:	f04f 0181 	mov.w	r1, #129	; 0x81
    989a:	f008 fb1f 	bl	11edc <OutPacket::append8(unsigned char)>
				to_host.append8(Motherboard::getBoard().getCurrentError());
			} else {
				to_host.append8(0);
			}
		}
		return false;
    989e:	f04f 0000 	mov.w	r0, #0
    98a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uint8_t value = from_host.read8(2);
			if (debug_register == 0) {
				Motherboard::getBoard().indicateError(value);
			}
			to_host.append8(RC_OK);
		} else if (command == CommandCode::DEBUG_GET_DEBUG_CODE ) {
    98a4:	2877      	cmp	r0, #119	; 0x77
    98a6:	d12f      	bne.n	9908 <processDebugPacket(InPacket const&, OutPacket&)+0x110>
			uint8_t debug_register = from_host.read8(1);
    98a8:	4620      	mov	r0, r4
    98aa:	f04f 0101 	mov.w	r1, #1
    98ae:	f008 fabd 	bl	11e2c <Packet::read8(unsigned char) const>
    98b2:	4604      	mov	r4, r0
			to_host.append8(RC_OK);
    98b4:	4628      	mov	r0, r5
    98b6:	f04f 0181 	mov.w	r1, #129	; 0x81
    98ba:	f008 fb0f 	bl	11edc <OutPacket::append8(unsigned char)>
			if (debug_register == 0) {
    98be:	b964      	cbnz	r4, 98da <processDebugPacket(InPacket const&, OutPacket&)+0xe2>
				to_host.append8(Motherboard::getBoard().getCurrentError());
    98c0:	f640 509c 	movw	r0, #3484	; 0xd9c
    98c4:	f2c1 0000 	movt	r0, #4096	; 0x1000
    98c8:	f002 fc08 	bl	c0dc <Motherboard::getCurrentError()>
    98cc:	4601      	mov	r1, r0
    98ce:	4628      	mov	r0, r5
    98d0:	f008 fb04 	bl	11edc <OutPacket::append8(unsigned char)>
			} else {
				to_host.append8(0);
			}
		}
		return false;
    98d4:	f04f 0000 	mov.w	r0, #0
    98d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uint8_t debug_register = from_host.read8(1);
			to_host.append8(RC_OK);
			if (debug_register == 0) {
				to_host.append8(Motherboard::getBoard().getCurrentError());
			} else {
				to_host.append8(0);
    98da:	4628      	mov	r0, r5
    98dc:	f04f 0100 	mov.w	r1, #0
    98e0:	f008 fafc 	bl	11edc <OutPacket::append8(unsigned char)>
			}
		}
		return false;
    98e4:	f04f 0000 	mov.w	r0, #0
    98e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
/// packet, return true, indicating that no further processing should
/// be done.  Otherwise, processing of this packet should drop through
/// to the next processing level.
bool processDebugPacket(const InPacket& from_host, OutPacket& to_host) {
	if (from_host.getLength() == 0) {
		return false;
    98ea:	f04f 0000 	mov.w	r0, #0
    98ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}
		}
		return false;
	} else {
		// This is not a debug packet
		return false;
    98f0:	f04f 0000 	mov.w	r0, #0
    98f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			// We start from 1 so we can skip the debug command byte.
			to_host.reset();
			for (int i = 1; i < from_host.getLength(); i++) {
				to_host.append8(from_host.read8(i));
			}
			return true;
    98f6:	f04f 0001 	mov.w	r0, #1
    98fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				to_host.append8(Motherboard::getBoard().getCurrentError());
			} else {
				to_host.append8(0);
			}
		}
		return false;
    98fc:	f04f 0000 	mov.w	r0, #0
    9900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9902:	f04f 0000 	mov.w	r0, #0
    9906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9908:	f04f 0000 	mov.w	r0, #0
	} else {
		// This is not a debug packet
		return false;
	}
}
    990c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    990e:	bf00      	nop

00009910 <_GLOBAL__sub_I_debugSlaveOut>:
    9910:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
    9912:	f640 308c 	movw	r0, #2956	; 0xb8c
    9916:	f2c1 0000 	movt	r0, #4096	; 0x1000
    991a:	f04f 0100 	mov.w	r1, #0
    991e:	f008 f98d 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
    9922:	f640 3090 	movw	r0, #2960	; 0xb90
    9926:	f2c1 0000 	movt	r0, #4096	; 0x1000
    992a:	f04f 0101 	mov.w	r1, #1
    992e:	f008 f985 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
    9932:	f640 30c0 	movw	r0, #3008	; 0xbc0
    9936:	f2c1 0000 	movt	r0, #4096	; 0x1000
    993a:	f04f 0102 	mov.w	r1, #2
    993e:	f008 f97d 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
    9942:	f640 30bc 	movw	r0, #3004	; 0xbbc
    9946:	f2c1 0000 	movt	r0, #4096	; 0x1000
    994a:	f04f 0103 	mov.w	r1, #3
    994e:	f008 f975 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
    9952:	f640 30c4 	movw	r0, #3012	; 0xbc4
    9956:	f2c1 0000 	movt	r0, #4096	; 0x1000
    995a:	f04f 0104 	mov.w	r1, #4
    995e:	f008 f96d 	bl	11c3c <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
    9962:	f640 34c8 	movw	r4, #3016	; 0xbc8
    9966:	f2c1 0400 	movt	r4, #4096	; 0x1000
    996a:	4620      	mov	r0, r4
    996c:	f04f 01ff 	mov.w	r1, #255	; 0xff
    9970:	f008 f964 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    9974:	f640 30cc 	movw	r0, #3020	; 0xbcc
    9978:	f2c1 0000 	movt	r0, #4096	; 0x1000
    997c:	4621      	mov	r1, r4
    997e:	f04f 0200 	mov.w	r2, #0
    9982:	f008 fb6d 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
	TIMEOUT = 5
};

}

OutPacket debugSlaveOut;
    9986:	f640 3094 	movw	r0, #2964	; 0xb94
    998a:	f2c1 0000 	movt	r0, #4096	; 0x1000
    998e:	f008 fa65 	bl	11e5c <OutPacket::OutPacket()>
		return false;
	} else {
		// This is not a debug packet
		return false;
	}
}
    9992:	bd10      	pop	{r4, pc}

00009994 <few_ticks>:
extern "C" {
#endif

void few_ticks()
{
	__ASM("nop");
    9994:	bf00      	nop
	__ASM("nop");
    9996:	bf00      	nop
	__ASM("nop");
    9998:	bf00      	nop
	__ASM("nop");
    999a:	bf00      	nop
	__ASM("nop");
    999c:	bf00      	nop
	__ASM("nop");
    999e:	bf00      	nop
	__ASM("nop");
    99a0:	bf00      	nop
	__ASM("nop");
    99a2:	bf00      	nop
	__ASM("nop");
    99a4:	bf00      	nop
	__ASM("nop");
    99a6:	bf00      	nop
	__ASM("nop");
    99a8:	bf00      	nop
	__ASM("nop");
    99aa:	bf00      	nop
	__ASM("nop");
    99ac:	bf00      	nop
	__ASM("nop");
    99ae:	bf00      	nop
	__ASM("nop");
    99b0:	bf00      	nop
	__ASM("nop");
    99b2:	bf00      	nop
	__ASM("nop");
    99b4:	bf00      	nop
	__ASM("nop");
    99b6:	bf00      	nop
	__ASM("nop");
    99b8:	bf00      	nop
	__ASM("nop");
    99ba:	bf00      	nop
	__ASM("nop");
    99bc:	bf00      	nop
	__ASM("nop");
    99be:	bf00      	nop
	__ASM("nop");
    99c0:	bf00      	nop
	__ASM("nop");
    99c2:	bf00      	nop
	__ASM("nop");
    99c4:	bf00      	nop
	__ASM("nop");
    99c6:	bf00      	nop
	__ASM("nop");
    99c8:	bf00      	nop
	__ASM("nop");
    99ca:	bf00      	nop
	__ASM("nop");
    99cc:	bf00      	nop
	__ASM("nop");
    99ce:	bf00      	nop
	__ASM("nop");
    99d0:	bf00      	nop
	__ASM("nop");
    99d2:	bf00      	nop
	__ASM("nop");
    99d4:	bf00      	nop
	__ASM("nop");
    99d6:	bf00      	nop
	__ASM("nop");
    99d8:	bf00      	nop
	__ASM("nop");
    99da:	bf00      	nop
	__ASM("nop");
    99dc:	bf00      	nop
	__ASM("nop");
    99de:	bf00      	nop
	__ASM("nop");
    99e0:	bf00      	nop
	__ASM("nop");
    99e2:	bf00      	nop
	__ASM("nop");
    99e4:	bf00      	nop
	__ASM("nop");
    99e6:	bf00      	nop
	__ASM("nop");
    99e8:	bf00      	nop
	__ASM("nop");
    99ea:	bf00      	nop
	__ASM("nop");
    99ec:	bf00      	nop
	__ASM("nop");
    99ee:	bf00      	nop
	__ASM("nop");
    99f0:	bf00      	nop
	__ASM("nop");
    99f2:	bf00      	nop
	__ASM("nop");
    99f4:	bf00      	nop
	__ASM("nop");
    99f6:	bf00      	nop
	__ASM("nop");
    99f8:	bf00      	nop
	__ASM("nop");
    99fa:	bf00      	nop
	__ASM("nop");
    99fc:	bf00      	nop
	__ASM("nop");
    99fe:	bf00      	nop
	__ASM("nop");
    9a00:	bf00      	nop
	__ASM("nop");
    9a02:	bf00      	nop
	__ASM("nop");
    9a04:	bf00      	nop
	__ASM("nop");
    9a06:	bf00      	nop
	__ASM("nop");
    9a08:	bf00      	nop
	__ASM("nop");
    9a0a:	bf00      	nop
	__ASM("nop");
    9a0c:	bf00      	nop
	__ASM("nop");
    9a0e:	bf00      	nop
	__ASM("nop");
    9a10:	bf00      	nop
	__ASM("nop");
    9a12:	bf00      	nop
	__ASM("nop");
    9a14:	bf00      	nop
	__ASM("nop");
    9a16:	bf00      	nop
	__ASM("nop");
    9a18:	bf00      	nop
	__ASM("nop");
    9a1a:	bf00      	nop
	__ASM("nop");
    9a1c:	bf00      	nop
	__ASM("nop");
    9a1e:	bf00      	nop
	__ASM("nop");
    9a20:	bf00      	nop
	__ASM("nop");
    9a22:	bf00      	nop
	__ASM("nop");
    9a24:	bf00      	nop
	__ASM("nop");
    9a26:	bf00      	nop
	__ASM("nop");
    9a28:	bf00      	nop
	__ASM("nop");
    9a2a:	bf00      	nop
	__ASM("nop");
    9a2c:	bf00      	nop
	__ASM("nop");
    9a2e:	bf00      	nop
	__ASM("nop");
    9a30:	bf00      	nop
	__ASM("nop");
    9a32:	bf00      	nop
	__ASM("nop");
    9a34:	bf00      	nop
	__ASM("nop");
    9a36:	bf00      	nop
	__ASM("nop");
    9a38:	bf00      	nop
	__ASM("nop");
    9a3a:	bf00      	nop
	__ASM("nop");
    9a3c:	bf00      	nop
	__ASM("nop");
    9a3e:	bf00      	nop
	__ASM("nop");
    9a40:	bf00      	nop
	__ASM("nop");
    9a42:	bf00      	nop
	__ASM("nop");
    9a44:	bf00      	nop
	__ASM("nop");
    9a46:	bf00      	nop
	__ASM("nop");
    9a48:	bf00      	nop
	__ASM("nop");
    9a4a:	bf00      	nop
	__ASM("nop");
    9a4c:	bf00      	nop
	__ASM("nop");
    9a4e:	bf00      	nop
}
    9a50:	4770      	bx	lr
    9a52:	bf00      	nop

00009a54 <_delay_us>:

void _delay_us(uint32_t time)
{
    9a54:	b538      	push	{r3, r4, r5, lr}
	uint32_t i;
	for(i=0;i<time;i++)
    9a56:	4605      	mov	r5, r0
    9a58:	b138      	cbz	r0, 9a6a <_delay_us+0x16>
    9a5a:	f04f 0400 	mov.w	r4, #0
		few_ticks();
    9a5e:	f7ff ff99 	bl	9994 <few_ticks>
}

void _delay_us(uint32_t time)
{
	uint32_t i;
	for(i=0;i<time;i++)
    9a62:	f104 0401 	add.w	r4, r4, #1
    9a66:	42ac      	cmp	r4, r5
    9a68:	d1f9      	bne.n	9a5e <_delay_us+0xa>
    9a6a:	bd38      	pop	{r3, r4, r5, pc}

00009a6c <eeprom::write_ff_to_ram()>:
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    9a6c:	b672      	cpsid	i
    9a6e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
    9a72:	f2c1 0300 	movt	r3, #4096	; 0x1000

void write_ff_to_ram (void){
	uint32_t i;
	__disable_irq ();
	for (i = 0x00000000; i < eeprom_info::EEPROM_SIZE; i++,i++,i++,i++) {
		eeprom_address(EEPROM_START_ADDRESS + i, 0) = 0xffffffff;
    9a76:	f04f 31ff 	mov.w	r1, #4294967295
#define THERM_BETA_DEFAULT_VALUE (4067)

void write_ff_to_ram (void){
	uint32_t i;
	__disable_irq ();
	for (i = 0x00000000; i < eeprom_info::EEPROM_SIZE; i++,i++,i++,i++) {
    9a7a:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
    9a7e:	f2c1 0200 	movt	r2, #4096	; 0x1000
		eeprom_address(EEPROM_START_ADDRESS + i, 0) = 0xffffffff;
    9a82:	f843 1b04 	str.w	r1, [r3], #4
#define THERM_BETA_DEFAULT_VALUE (4067)

void write_ff_to_ram (void){
	uint32_t i;
	__disable_irq ();
	for (i = 0x00000000; i < eeprom_info::EEPROM_SIZE; i++,i++,i++,i++) {
    9a86:	4293      	cmp	r3, r2
    9a88:	d1fb      	bne.n	9a82 <eeprom::write_ff_to_ram()+0x16>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    9a8a:	b662      	cpsie	i
		eeprom_address(EEPROM_START_ADDRESS + i, 0) = 0xffffffff;
//		xprintf("%x %x" " (%s:%d)\n",EEPROM_START_ADDRESS + i,eeprom_address(EEPROM_START_ADDRESS + i, 0),_F_,_L_);
	}
	__enable_irq ();
};
    9a8c:	4770      	bx	lr
    9a8e:	bf00      	nop

00009a90 <eeprom::read_all_from_flash()>:
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    9a90:	b672      	cpsid	i
    9a92:	f44f 5300 	mov.w	r3, #8192	; 0x2000

void read_all_from_flash (void){
    9a96:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
    9a9a:	f502 42a0 	add.w	r2, r2, #20480	; 0x5000
	uint32_t i;
	__disable_irq ();
//		xprintf("%x %x" " (%s:%d)\n",EEPROM_START_ADDRESS+i,eeprom_address(EEPROM_START_ADDRESS+i, 0),_F_,_L_);
	for (i = 0x00000000; i < eeprom_info::EEPROM_SIZE; i++,i++,i++,i++) {
		eeprom_address(EEPROM_START_ADDRESS + i, 0) = eeprom_address(EEPROM_FLASH_AREA_START + i, 0);
    9a9e:	f853 1b04 	ldr.w	r1, [r3], #4
    9aa2:	6011      	str	r1, [r2, #0]

void read_all_from_flash (void){
	uint32_t i;
	__disable_irq ();
//		xprintf("%x %x" " (%s:%d)\n",EEPROM_START_ADDRESS+i,eeprom_address(EEPROM_START_ADDRESS+i, 0),_F_,_L_);
	for (i = 0x00000000; i < eeprom_info::EEPROM_SIZE; i++,i++,i++,i++) {
    9aa4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
    9aa8:	d1f5      	bne.n	9a96 <eeprom::read_all_from_flash()+0x6>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    9aaa:	b662      	cpsie	i
		eeprom_address(EEPROM_START_ADDRESS + i, 0) = eeprom_address(EEPROM_FLASH_AREA_START + i, 0);
//		xprintf("%x %x" " (%s:%d)\n",EEPROM_FLASH_AREA_START+i,eeprom_address(EEPROM_FLASH_AREA_START+i, 0),_F_,_L_);
	}
//		xprintf("%x %x" " (%s:%d)\n",EEPROM_START_ADDRESS+i,eeprom_address(EEPROM_START_ADDRESS+i, 0),_F_,_L_);
	__enable_irq ();
};
    9aac:	4770      	bx	lr
    9aae:	bf00      	nop

00009ab0 <eeprom::save_to_flash()>:

void save_to_flash (void) {
    9ab0:	b508      	push	{r3, lr}
	xprintf("save_to_flash" " (%s:%d)\n",_F_,_L_);
    9ab2:	f247 30ec 	movw	r0, #29676	; 0x73ec
    9ab6:	f2c0 0002 	movt	r0, #2
    9aba:	4905      	ldr	r1, [pc, #20]	; (9ad0 <eeprom::save_to_flash()+0x20>)
    9abc:	f04f 024d 	mov.w	r2, #77	; 0x4d
    9ac0:	f7fc ff48 	bl	6954 <xprintf>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    9ac4:	b672      	cpsid	i
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    9ac6:	b662      	cpsie	i
	IAP in_ap_prog;
//	int error_code_ret = in_ap_prog.erase(USER_FLASH_AREA_START, USER_FLASH_AREA_START);
//	error_code_ret = in_ap_prog.write((char)0x10007000, (char)USER_FLASH_AREA_START, (int)USER_FLASH_AREA_SIZE );
	// read all variables back into Ram
	__enable_irq ();
	clearflashupdate();
    9ac8:	f007 fc32 	bl	11330 <eeprom::clearflashupdate()>
};
    9acc:	bd08      	pop	{r3, pc}
    9ace:	bf00      	nop
    9ad0:	00027420 	.word	0x00027420

00009ad4 <eeprom::setDefaultCoolingFan(unsigned short)>:
*/
/**
 *
 * @param eeprom_base start of eeprom map of cooling settings
 */
void setDefaultCoolingFan(uint16_t eeprom_base){
    9ad4:	b510      	push	{r4, lr}
    9ad6:	4604      	mov	r4, r0

	uint8_t fan_settings[] = {1, DEFAULT_COOLING_FAN_SETPOINT_C};
	setEeprom8(eeprom_base + cooler_eeprom_offsets::ENABLE_OFFSET, fan_settings[0]);
    9ad8:	f04f 0101 	mov.w	r1, #1
    9adc:	f007 fc52 	bl	11384 <eeprom::setEeprom8(unsigned short, unsigned char)>
	setEeprom8(eeprom_base + cooler_eeprom_offsets::ENABLE_OFFSET+1, fan_settings[1]);
    9ae0:	f104 0001 	add.w	r0, r4, #1
    9ae4:	b280      	uxth	r0, r0
    9ae6:	f04f 0132 	mov.w	r1, #50	; 0x32
    9aea:	f007 fc4b 	bl	11384 <eeprom::setEeprom8(unsigned short, unsigned char)>
//    eeprom_write_block( fan_settings, (uint8_t*)(eeprom_base + cooler_eeprom_offsets::ENABLE_OFFSET),2);
}
    9aee:	bd10      	pop	{r4, pc}

00009af0 <eeprom::setDefaultPID(unsigned short)>:
/**
 * Start of PID block of EEPROM. Can be extruder or HPB
 * @param eeprom_base
 */
void setDefaultPID(uint16_t eeprom_base)
{
    9af0:	b510      	push	{r4, lr}
    9af2:	4604      	mov	r4, r0
	setEeprom16(eeprom_base + pid_eeprom_offsets::P_TERM_OFFSET, DEFAULT_P_VALUE);
    9af4:	f04f 0107 	mov.w	r1, #7
    9af8:	f007 fcb8 	bl	1146c <eeprom::setEeprom16(unsigned short, unsigned short)>
	setEeprom16(eeprom_base + pid_eeprom_offsets::I_TERM_OFFSET, DEFAULT_I_VALUE);
    9afc:	f104 0002 	add.w	r0, r4, #2
    9b00:	b280      	uxth	r0, r0
    9b02:	f04f 0100 	mov.w	r1, #0
    9b06:	f007 fcb1 	bl	1146c <eeprom::setEeprom16(unsigned short, unsigned short)>
	setEeprom16(eeprom_base + pid_eeprom_offsets::D_TERM_OFFSET, DEFAULT_D_VALUE);
    9b0a:	f104 0004 	add.w	r0, r4, #4
    9b0e:	b280      	uxth	r0, r0
    9b10:	f04f 0124 	mov.w	r1, #36	; 0x24
    9b14:	f007 fcaa 	bl	1146c <eeprom::setEeprom16(unsigned short, unsigned short)>
//	setEepromFixed16(( eeprom_base + pid_eeprom_offsets::P_TERM_OFFSET ), DEFAULT_P_VALUE);
//	setEepromFixed16(( eeprom_base + pid_eeprom_offsets::I_TERM_OFFSET ), DEFAULT_I_VALUE);
//	setEepromFixed16(( eeprom_base + pid_eeprom_offsets::D_TERM_OFFSET ), DEFAULT_D_VALUE);
}
    9b18:	bd10      	pop	{r4, pc}
    9b1a:	bf00      	nop

00009b1c <eeprom::setDefaultsExtruder(int, unsigned short)>:
 *
 * @param index
 * @param eeprom_base start of this extruder's data in the eeprom
 */
void setDefaultsExtruder(int index,uint16_t eeprom_base)
{
    9b1c:	b510      	push	{r4, lr}
    9b1e:	460c      	mov	r4, r1
	uint8_t featuresT0 = eeprom_info::HEATER_0_PRESENT | eeprom_info::HEATER_0_THERMISTOR | eeprom_info::HEATER_0_THERMOCOUPLE;
	uint8_t featuresT1 = eeprom_info::HEATER_1_PRESENT | eeprom_info::HEATER_1_THERMISTOR | eeprom_info::HEATER_1_THERMOCOUPLE;
	if( index == 0 ){
    9b20:	b960      	cbnz	r0, 9b3c <eeprom::setDefaultsExtruder(int, unsigned short)+0x20>
		int slaveId = '12';
		setEeprom8(eeprom_base + toolhead_eeprom_offsets::FEATURES, featuresT0);
    9b22:	4608      	mov	r0, r1
    9b24:	f04f 0107 	mov.w	r1, #7
    9b28:	f007 fc2c 	bl	11384 <eeprom::setEeprom8(unsigned short, unsigned char)>
		setEeprom8(eeprom_base + toolhead_eeprom_offsets::SLAVE_ID, slaveId);
    9b2c:	f104 0018 	add.w	r0, r4, #24
    9b30:	b280      	uxth	r0, r0
    9b32:	f04f 0132 	mov.w	r1, #50	; 0x32
    9b36:	f007 fc25 	bl	11384 <eeprom::setEeprom8(unsigned short, unsigned char)>
    9b3a:	e00b      	b.n	9b54 <eeprom::setDefaultsExtruder(int, unsigned short)+0x38>
//	    eeprom_write_byte( (uint8_t*)(eeprom_base + toolhead_eeprom_offsets::FEATURES),featuresT0);
//		eeprom_write_byte( (uint8_t*)eeprom_base +toolhead_eeprom_offsets::SLAVE_ID,slaveId);
	}
	else{
		int slaveId = '32';
		setEeprom8(eeprom_base + toolhead_eeprom_offsets::FEATURES, featuresT1);
    9b3c:	4608      	mov	r0, r1
    9b3e:	f04f 0138 	mov.w	r1, #56	; 0x38
    9b42:	f007 fc1f 	bl	11384 <eeprom::setEeprom8(unsigned short, unsigned char)>
		setEeprom8(eeprom_base + toolhead_eeprom_offsets::SLAVE_ID, slaveId);
    9b46:	f104 0018 	add.w	r0, r4, #24
    9b4a:	b280      	uxth	r0, r0
    9b4c:	f04f 0132 	mov.w	r1, #50	; 0x32
    9b50:	f007 fc18 	bl	11384 <eeprom::setEeprom8(unsigned short, unsigned char)>
//		eeprom_write_byte( (uint8_t*)(eeprom_base + toolhead_eeprom_offsets::FEATURES),featuresT1);
//		eeprom_write_byte( (uint8_t*)eeprom_base +toolhead_eeprom_offsets::SLAVE_ID,slaveId);
	}
	setDefaultPID(eeprom_base + toolhead_eeprom_offsets::EXTRUDER_PID_BASE);
    9b54:	f104 000a 	add.w	r0, r4, #10
    9b58:	b280      	uxth	r0, r0
    9b5a:	f7ff ffc9 	bl	9af0 <eeprom::setDefaultPID(unsigned short)>
    setDefaultPID(eeprom_base + toolhead_eeprom_offsets::HBP_PID_BASE);
    9b5e:	f104 0010 	add.w	r0, r4, #16
    9b62:	b280      	uxth	r0, r0
    9b64:	f7ff ffc4 	bl	9af0 <eeprom::setDefaultPID(unsigned short)>
    setDefaultCoolingFan(eeprom_base + toolhead_eeprom_offsets::COOLING_FAN_SETTINGS);
    9b68:	f104 001a 	add.w	r0, r4, #26
    9b6c:	b280      	uxth	r0, r0
    9b6e:	f7ff ffb1 	bl	9ad4 <eeprom::setDefaultCoolingFan(unsigned short)>

    setEeprom16(eeprom_base + toolhead_eeprom_offsets::BACKOFF_FORWARD_TIME, 500);
    9b72:	f104 0006 	add.w	r0, r4, #6
    9b76:	b280      	uxth	r0, r0
    9b78:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    9b7c:	f007 fc76 	bl	1146c <eeprom::setEeprom16(unsigned short, unsigned short)>
    setEeprom16(eeprom_base + toolhead_eeprom_offsets::BACKOFF_STOP_TIME, 5);
    9b80:	f104 0002 	add.w	r0, r4, #2
    9b84:	b280      	uxth	r0, r0
    9b86:	f04f 0105 	mov.w	r1, #5
    9b8a:	f007 fc6f 	bl	1146c <eeprom::setEeprom16(unsigned short, unsigned short)>
    setEeprom16(eeprom_base + toolhead_eeprom_offsets::BACKOFF_REVERSE_TIME, 500);
    9b8e:	f104 0004 	add.w	r0, r4, #4
    9b92:	b280      	uxth	r0, r0
    9b94:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    9b98:	f007 fc68 	bl	1146c <eeprom::setEeprom16(unsigned short, unsigned short)>
    setEeprom16(eeprom_base + toolhead_eeprom_offsets::BACKOFF_TRIGGER_TIME, 300);
    9b9c:	f104 0008 	add.w	r0, r4, #8
    9ba0:	b280      	uxth	r0, r0
    9ba2:	f44f 7196 	mov.w	r1, #300	; 0x12c
    9ba6:	f007 fc61 	bl	1146c <eeprom::setEeprom16(unsigned short, unsigned short)>
//    eeprom_write_word((uint16_t*)(eeprom_base + toolhead_eeprom_offsets::BACKOFF_FORWARD_TIME),500);
//    eeprom_write_word((uint16_t*)(eeprom_base + toolhead_eeprom_offsets::BACKOFF_STOP_TIME),5);
//    eeprom_write_word((uint16_t*)(eeprom_base + toolhead_eeprom_offsets::BACKOFF_REVERSE_TIME),500);
//    eeprom_write_word((uint16_t*)(eeprom_base + toolhead_eeprom_offsets::BACKOFF_TRIGGER_TIME),300);
}
    9baa:	bd10      	pop	{r4, pc}

00009bac <eeprom::SetDefaultsThermal(unsigned short)>:
/**
 * Set thermal table offsets
 * @param eeprom_base
 */
void SetDefaultsThermal(uint16_t eeprom_base)
{
    9bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9bae:	4604      	mov	r4, r0
    setEeprom16(eeprom_base + therm_eeprom_offsets::THERM_R0_OFFSET, THERM_R0_DEFAULT_VALUE);
    9bb0:	f248 61a0 	movw	r1, #34464	; 0x86a0
    9bb4:	f007 fc5a 	bl	1146c <eeprom::setEeprom16(unsigned short, unsigned short)>
    setEeprom16(eeprom_base + therm_eeprom_offsets::THERM_T0_OFFSET, THERM_T0_DEFAULT_VALUE);
    9bb8:	f104 0004 	add.w	r0, r4, #4
    9bbc:	b280      	uxth	r0, r0
    9bbe:	f04f 0119 	mov.w	r1, #25
    9bc2:	f007 fc53 	bl	1146c <eeprom::setEeprom16(unsigned short, unsigned short)>
    setEeprom16(eeprom_base + therm_eeprom_offsets::THERM_BETA_OFFSET, THERM_BETA_DEFAULT_VALUE);
    9bc6:	f104 0008 	add.w	r0, r4, #8
    9bca:	b280      	uxth	r0, r0
    9bcc:	f640 71e3 	movw	r1, #4067	; 0xfe3
    9bd0:	f007 fc4c 	bl	1146c <eeprom::setEeprom16(unsigned short, unsigned short)>
    9bd4:	f104 0410 	add.w	r4, r4, #16
    9bd8:	b2a4      	uxth	r4, r4
    9bda:	f04f 0600 	mov.w	r6, #0
//	eeprom_write_dword( (uint32_t*)(eeprom_base + therm_eeprom_offsets::THERM_R0_OFFSET), THERM_R0_DEFAULT_VALUE);
//	eeprom_write_dword( (uint32_t*)(eeprom_base + therm_eeprom_offsets::THERM_T0_OFFSET), THERM_T0_DEFAULT_VALUE);
//	eeprom_write_dword( (uint32_t*)(eeprom_base + therm_eeprom_offsets::THERM_BETA_OFFSET), THERM_BETA_DEFAULT_VALUE);
	/// write the default thermal table.
	for(uint8_t i=0;i<NUMTEMPS;i++){
		setEeprom16(eeprom_base + therm_eeprom_offsets::THERM_DATA_OFFSET+i, default_therm_table[i].adc);
    9bde:	f64b 6740 	movw	r7, #48704	; 0xbe40
    9be2:	f2c0 0702 	movt	r7, #2
    9be6:	19f5      	adds	r5, r6, r7
    9be8:	4620      	mov	r0, r4
    9bea:	5bb9      	ldrh	r1, [r7, r6]
    9bec:	f007 fc3e 	bl	1146c <eeprom::setEeprom16(unsigned short, unsigned short)>
		setEeprom16(eeprom_base + therm_eeprom_offsets::THERM_DATA_OFFSET+i+2, default_therm_table[i].value);
    9bf0:	f104 0002 	add.w	r0, r4, #2
    9bf4:	b280      	uxth	r0, r0
    9bf6:	8869      	ldrh	r1, [r5, #2]
    9bf8:	f007 fc38 	bl	1146c <eeprom::setEeprom16(unsigned short, unsigned short)>
    9bfc:	f106 0604 	add.w	r6, r6, #4
    9c00:	f104 0401 	add.w	r4, r4, #1
    9c04:	b2a4      	uxth	r4, r4
//	xprintf("%x %d" " (%s:%d)\n",EEPROM_START_ADDRESS + (eeprom_base + therm_eeprom_offsets::THERM_BETA_OFFSET)*4,eeprom_address(EEPROM_START_ADDRESS, eeprom_base + therm_eeprom_offsets::THERM_BETA_OFFSET),_F_,_L_);
//	eeprom_write_dword( (uint32_t*)(eeprom_base + therm_eeprom_offsets::THERM_R0_OFFSET), THERM_R0_DEFAULT_VALUE);
//	eeprom_write_dword( (uint32_t*)(eeprom_base + therm_eeprom_offsets::THERM_T0_OFFSET), THERM_T0_DEFAULT_VALUE);
//	eeprom_write_dword( (uint32_t*)(eeprom_base + therm_eeprom_offsets::THERM_BETA_OFFSET), THERM_BETA_DEFAULT_VALUE);
	/// write the default thermal table.
	for(uint8_t i=0;i<NUMTEMPS;i++){
    9c06:	2e7c      	cmp	r6, #124	; 0x7c
    9c08:	d1ed      	bne.n	9be6 <eeprom::SetDefaultsThermal(unsigned short)+0x3a>
//		xprintf("%x %d" " (%s:%d)\n",EEPROM_START_ADDRESS + (eeprom_base + therm_eeprom_offsets::THERM_DATA_OFFSET+i)*4,eeprom_address(EEPROM_START_ADDRESS, eeprom_base + therm_eeprom_offsets::THERM_DATA_OFFSET+i),_F_,_L_);
//		xprintf("%x %d" " (%s:%d)\n",EEPROM_START_ADDRESS + (eeprom_base + therm_eeprom_offsets::THERM_DATA_OFFSET+i+1)*4,eeprom_address(EEPROM_START_ADDRESS, eeprom_base + therm_eeprom_offsets::THERM_DATA_OFFSET+i+1),_F_,_L_);
	}
	//	eeprom_write_block( (const uint8_t*)default_therm_table,
//			(uint8_t*)(eeprom_base + therm_eeprom_offsets::THERM_DATA_OFFSET), sizeof(uint16_t)*2*NUMTEMPS);
}
    9c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00009c0c <eeprom::setDefaultLedEffects(unsigned short)>:
/**
 *
 * @param eeprom_base start of Led effects table
 */
void setDefaultLedEffects(uint16_t eeprom_base)
{
    9c0c:	b510      	push	{r4, lr}
    9c0e:	4604      	mov	r4, r0
	Color colors;

	// default color is white
	setEeprom8(eeprom_base + blink_eeprom_offsets::BASIC_COLOR_OFFSET, LED_DEFAULT_WHITE);
    9c10:	f04f 0100 	mov.w	r1, #0
    9c14:	f007 fbb6 	bl	11384 <eeprom::setEeprom8(unsigned short, unsigned char)>
	setEeprom8(eeprom_base + blink_eeprom_offsets::LED_HEAT_OFFSET, 1);
    9c18:	f104 0002 	add.w	r0, r4, #2
    9c1c:	b280      	uxth	r0, r0
    9c1e:	f04f 0101 	mov.w	r1, #1
    9c22:	f007 fbaf 	bl	11384 <eeprom::setEeprom8(unsigned short, unsigned char)>
//	eeprom_write_byte((uint8_t*)(eeprom_base + blink_eeprom_offsets::BASIC_COLOR_OFFSET), LED_DEFAULT_WHITE);
//	eeprom_write_byte((uint8_t*)(eeprom_base + blink_eeprom_offsets::LED_HEAT_OFFSET), 1);
    
	colors.red=0xFF; colors.green =colors.blue =0x00;
	setEeprom8(eeprom_base + blink_eeprom_offsets::CUSTOM_COLOR_OFFSET, colors.red);
    9c26:	f104 0004 	add.w	r0, r4, #4
    9c2a:	b280      	uxth	r0, r0
    9c2c:	f04f 01ff 	mov.w	r1, #255	; 0xff
    9c30:	f007 fba8 	bl	11384 <eeprom::setEeprom8(unsigned short, unsigned char)>
	setEeprom8(eeprom_base + blink_eeprom_offsets::CUSTOM_COLOR_OFFSET+1, colors.green);
    9c34:	f104 0005 	add.w	r0, r4, #5
    9c38:	b280      	uxth	r0, r0
    9c3a:	f04f 0100 	mov.w	r1, #0
    9c3e:	f007 fba1 	bl	11384 <eeprom::setEeprom8(unsigned short, unsigned char)>
	setEeprom8(eeprom_base + blink_eeprom_offsets::CUSTOM_COLOR_OFFSET+2, colors.blue);
    9c42:	f104 0006 	add.w	r0, r4, #6
    9c46:	b280      	uxth	r0, r0
    9c48:	f04f 0100 	mov.w	r1, #0
    9c4c:	f007 fb9a 	bl	11384 <eeprom::setEeprom8(unsigned short, unsigned char)>

	//	eeprom_write_block((void*)&colors,(uint8_t*)(eeprom_base + blink_eeprom_offsets::CUSTOM_COLOR_OFFSET),sizeof(colors));
}
    9c50:	bd10      	pop	{r4, pc}
    9c52:	bf00      	nop

00009c54 <eeprom::setCustomColor(unsigned char, unsigned char, unsigned char)>:
     * @param red value
     * @param green value
     * @param blue value
     */

void setCustomColor(uint8_t red, uint8_t green, uint8_t blue){
    9c54:	b538      	push	{r3, r4, r5, lr}
    9c56:	4603      	mov	r3, r0
    9c58:	460d      	mov	r5, r1
    9c5a:	4614      	mov	r4, r2
	
//	eeprom_address(EEPROM_START_ADDRESS, eeprom_offsets::LED_STRIP_SETTINGS + blink_eeprom_offsets::BASIC_COLOR_OFFSET) = LED_DEFAULT_CUSTOM;
//	eeprom_write_byte((uint8_t*)(eeprom_offsets::LED_STRIP_SETTINGS + blink_eeprom_offsets::BASIC_COLOR_OFFSET), LED_DEFAULT_CUSTOM);
	
	colors.red=red; colors.green = green; colors.blue =blue;
	setEeprom8(eeprom_offsets::LED_STRIP_SETTINGS + blink_eeprom_offsets::CUSTOM_COLOR_OFFSET, colors.red);
    9c5c:	f44f 70a2 	mov.w	r0, #324	; 0x144
    9c60:	4619      	mov	r1, r3
    9c62:	f007 fb8f 	bl	11384 <eeprom::setEeprom8(unsigned short, unsigned char)>
	setEeprom8(eeprom_offsets::LED_STRIP_SETTINGS + blink_eeprom_offsets::CUSTOM_COLOR_OFFSET+1, colors.green);
    9c66:	f240 1045 	movw	r0, #325	; 0x145
    9c6a:	4629      	mov	r1, r5
    9c6c:	f007 fb8a 	bl	11384 <eeprom::setEeprom8(unsigned short, unsigned char)>
	setEeprom8(eeprom_offsets::LED_STRIP_SETTINGS + blink_eeprom_offsets::CUSTOM_COLOR_OFFSET+2, colors.blue);
    9c70:	f44f 70a3 	mov.w	r0, #326	; 0x146
    9c74:	4621      	mov	r1, r4
    9c76:	f007 fb85 	bl	11384 <eeprom::setEeprom8(unsigned short, unsigned char)>
	//	eeprom_write_block((void*)&colors,(uint8_t*)(eeprom_offsets::LED_STRIP_SETTINGS + blink_eeprom_offsets::CUSTOM_COLOR_OFFSET),sizeof(colors));
}
    9c7a:	bd38      	pop	{r3, r4, r5, pc}

00009c7c <eeprom::eeprom_write_sound(Sound, unsigned short)>:
     *
     * @param sound desired
     * @param dest in eeprom
     */   
void eeprom_write_sound(Sound sound, uint16_t dest)
{
    9c7c:	b510      	push	{r4, lr}
    9c7e:	b082      	sub	sp, #8
    9c80:	9001      	str	r0, [sp, #4]
    9c82:	460c      	mov	r4, r1
	setEeprom16(dest,sound.freq);
    9c84:	b281      	uxth	r1, r0
    9c86:	4620      	mov	r0, r4
    9c88:	f007 fbf0 	bl	1146c <eeprom::setEeprom16(unsigned short, unsigned short)>
	setEeprom16(dest + 2, sound.durationMs);
    9c8c:	f104 0002 	add.w	r0, r4, #2
    9c90:	b280      	uxth	r0, r0
    9c92:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    9c96:	f007 fbe9 	bl	1146c <eeprom::setEeprom16(unsigned short, unsigned short)>
//	eeprom_write_word((uint16_t*)dest, 	sound.freq);
//	eeprom_write_word((uint16_t*)dest + 2, sound.durationMs);
}
    9c9a:	b002      	add	sp, #8
    9c9c:	bd10      	pop	{r4, pc}
    9c9e:	bf00      	nop

00009ca0 <eeprom::setDefaultBuzzEffects(unsigned short)>:
/**
 *
 * @param eeprom_base start of buzz effects table
 */
void setDefaultBuzzEffects(uint16_t eeprom_base)
{
    9ca0:	b500      	push	{lr}
    9ca2:	b083      	sub	sp, #12
    9ca4:	4601      	mov	r1, r0
	Sound blare = {NOTE_B2, 500};
    9ca6:	f247 33cc 	movw	r3, #29644	; 0x73cc
    9caa:	f2c0 0302 	movt	r3, #2
    9cae:	6818      	ldr	r0, [r3, #0]
    9cb0:	9001      	str	r0, [sp, #4]
	eeprom_write_sound(blare,eeprom_base + buzz_eeprom_offsets::BASIC_BUZZ_OFFSET);
    9cb2:	9801      	ldr	r0, [sp, #4]
    9cb4:	f7ff ffe2 	bl	9c7c <eeprom::eeprom_write_sound(Sound, unsigned short)>
}
    9cb8:	b003      	add	sp, #12
    9cba:	bd00      	pop	{pc}

00009cbc <eeprom::setDefaultsPreheat(unsigned short)>:
/**
 *
 * @param eeprom_base start of preheat settings table
 */
void setDefaultsPreheat(uint16_t eeprom_base)
{
    9cbc:	b510      	push	{r4, lr}
    9cbe:	4604      	mov	r4, r0
	setEeprom16(eeprom_base + preheat_eeprom_offsets::PREHEAT_RIGHT_OFFSET, 220);
    9cc0:	f04f 01dc 	mov.w	r1, #220	; 0xdc
    9cc4:	f007 fbd2 	bl	1146c <eeprom::setEeprom16(unsigned short, unsigned short)>
	setEeprom16(eeprom_base + preheat_eeprom_offsets::PREHEAT_LEFT_OFFSET, 220);
    9cc8:	f104 0002 	add.w	r0, r4, #2
    9ccc:	b280      	uxth	r0, r0
    9cce:	f04f 01dc 	mov.w	r1, #220	; 0xdc
    9cd2:	f007 fbcb 	bl	1146c <eeprom::setEeprom16(unsigned short, unsigned short)>
	setEeprom16(eeprom_base + preheat_eeprom_offsets::PREHEAT_PLATFORM_OFFSET, 110);
    9cd6:	f104 0004 	add.w	r0, r4, #4
    9cda:	b280      	uxth	r0, r0
    9cdc:	f04f 016e 	mov.w	r1, #110	; 0x6e
    9ce0:	f007 fbc4 	bl	1146c <eeprom::setEeprom16(unsigned short, unsigned short)>
	setEeprom16(eeprom_base + preheat_eeprom_offsets::PREHEAT_ON_OFF_OFFSET, (1<<HEAT_MASK_RIGHT) + (1<<HEAT_MASK_PLATFORM));
    9ce4:	f104 0006 	add.w	r0, r4, #6
    9ce8:	b280      	uxth	r0, r0
    9cea:	f04f 0105 	mov.w	r1, #5
    9cee:	f007 fbbd 	bl	1146c <eeprom::setEeprom16(unsigned short, unsigned short)>
//    eeprom_write_word((uint16_t*)(eeprom_base + preheat_eeprom_offsets::PREHEAT_RIGHT_OFFSET), 220);
//    eeprom_write_word((uint16_t*)(eeprom_base + preheat_eeprom_offsets::PREHEAT_LEFT_OFFSET), 220);
//    eeprom_write_word((uint16_t*)(eeprom_base + preheat_eeprom_offsets::PREHEAT_PLATFORM_OFFSET), 110);
//    eeprom_write_byte((uint8_t*)(eeprom_base + preheat_eeprom_offsets::PREHEAT_ON_OFF_OFFSET), (1<<HEAT_MASK_RIGHT) + (1<<HEAT_MASK_PLATFORM));
}
    9cf2:	bd10      	pop	{r4, pc}

00009cf4 <eeprom::setDefaultsAcceleration()>:
/**
 *
 * break with the form here as eeprom_base is available in class and we
 * want to cleanly call this function externally
 */
void setDefaultsAcceleration(){
    9cf4:	b508      	push	{r3, lr}
//	xprintf("%x" " (%s:%d)\n",eeprom_address(EEPROM_START_ADDRESS, eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::ACTIVE_OFFSET),_F_,_L_);
//	xprintf("%x" " (%s:%d)\n",(EEPROM_START_ADDRESS + eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::ACTIVE_OFFSET),_F_,_L_);
//	_delay_us(10000);
	setEeprom8(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::ACTIVE_OFFSET, 0x01);
    9cf6:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    9cfa:	f04f 0101 	mov.w	r1, #1
    9cfe:	f007 fb41 	bl	11384 <eeprom::setEeprom8(unsigned short, unsigned char)>
	setEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::ACCELERATION_RATE_OFFSET, DEFAULT_ACCELERATION);
    9d02:	f44f 70b8 	mov.w	r0, #368	; 0x170
    9d06:	f640 31b8 	movw	r1, #3000	; 0xbb8
    9d0a:	f007 fbaf 	bl	1146c <eeprom::setEeprom16(unsigned short, unsigned short)>
//    eeprom_write_byte((uint8_t*)(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::ACTIVE_OFFSET), 0x00);
//    eeprom_write_word((uint16_t*)(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::ACCELERATION_RATE_OFFSET), DEFAULT_ACCELERATION);
    
	setEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_RATES_OFFSET + 0, DEFAULT_X_ACCELERATION);
    9d0e:	f44f 70b9 	mov.w	r0, #370	; 0x172
    9d12:	f640 31b8 	movw	r1, #3000	; 0xbb8
    9d16:	f007 fba9 	bl	1146c <eeprom::setEeprom16(unsigned short, unsigned short)>
	setEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_RATES_OFFSET + 2, DEFAULT_Y_ACCELERATION);
    9d1a:	f44f 70ba 	mov.w	r0, #372	; 0x174
    9d1e:	f640 31b8 	movw	r1, #3000	; 0xbb8
    9d22:	f007 fba3 	bl	1146c <eeprom::setEeprom16(unsigned short, unsigned short)>
	setEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_RATES_OFFSET + 4, DEFAULT_Z_ACCELERATION);
    9d26:	f44f 70bb 	mov.w	r0, #374	; 0x176
    9d2a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    9d2e:	f007 fb9d 	bl	1146c <eeprom::setEeprom16(unsigned short, unsigned short)>
	setEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_RATES_OFFSET + 6, DEFAULT_A_ACCELERATION);
    9d32:	f44f 70bc 	mov.w	r0, #376	; 0x178
    9d36:	f640 31b8 	movw	r1, #3000	; 0xbb8
    9d3a:	f007 fb97 	bl	1146c <eeprom::setEeprom16(unsigned short, unsigned short)>
	setEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_RATES_OFFSET + 8, DEFAULT_B_ACCELERATION);
    9d3e:	f44f 70bd 	mov.w	r0, #378	; 0x17a
    9d42:	f640 31b8 	movw	r1, #3000	; 0xbb8
    9d46:	f007 fb91 	bl	1146c <eeprom::setEeprom16(unsigned short, unsigned short)>
//	eeprom_write_word((uint16_t*)(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_RATES_OFFSET + 2), DEFAULT_Y_ACCELERATION);
//	eeprom_write_word((uint16_t*)(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_RATES_OFFSET + 4), DEFAULT_Z_ACCELERATION);
//	eeprom_write_word((uint16_t*)(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_RATES_OFFSET + 6), DEFAULT_A_ACCELERATION);
//	eeprom_write_word((uint16_t*)(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_RATES_OFFSET + 8), DEFAULT_B_ACCELERATION);

	setEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_JERK_OFFSET + 0, DEFAULT_MAX_XY_JERK);
    9d4a:	f44f 70be 	mov.w	r0, #380	; 0x17c
    9d4e:	f04f 0114 	mov.w	r1, #20
    9d52:	f007 fb8b 	bl	1146c <eeprom::setEeprom16(unsigned short, unsigned short)>
	setEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_JERK_OFFSET + 2, DEFAULT_MAX_XY_JERK);
    9d56:	f44f 70bf 	mov.w	r0, #382	; 0x17e
    9d5a:	f04f 0114 	mov.w	r1, #20
    9d5e:	f007 fb85 	bl	1146c <eeprom::setEeprom16(unsigned short, unsigned short)>
	setEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_JERK_OFFSET + 4, DEFAULT_MAX_Z_JERK);
    9d62:	f44f 70c0 	mov.w	r0, #384	; 0x180
    9d66:	f04f 0101 	mov.w	r1, #1
    9d6a:	f007 fb7f 	bl	1146c <eeprom::setEeprom16(unsigned short, unsigned short)>
	setEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_JERK_OFFSET + 6, DEFAULT_MAX_A_JERK);
    9d6e:	f44f 70c1 	mov.w	r0, #386	; 0x182
    9d72:	f04f 0102 	mov.w	r1, #2
    9d76:	f007 fb79 	bl	1146c <eeprom::setEeprom16(unsigned short, unsigned short)>
	setEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_JERK_OFFSET + 8, DEFAULT_MAX_B_JERK);
    9d7a:	f44f 70c2 	mov.w	r0, #388	; 0x184
    9d7e:	f04f 0102 	mov.w	r1, #2
    9d82:	f007 fb73 	bl	1146c <eeprom::setEeprom16(unsigned short, unsigned short)>
//	setEepromFixed16((eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_JERK_OFFSET + 2), DEFAULT_MAX_XY_JERK);
//	setEepromFixed16((eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_JERK_OFFSET + 4), DEFAULT_MAX_Z_JERK);
//	setEepromFixed16((eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_JERK_OFFSET + 6), DEFAULT_MAX_A_JERK);
//	setEepromFixed16((eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_JERK_OFFSET + 8), DEFAULT_MAX_B_JERK);
	
	setEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::MINIMUM_SPEED, DEFAULT_MIN_SPEED);
    9d86:	f44f 70c3 	mov.w	r0, #390	; 0x186
    9d8a:	f04f 010f 	mov.w	r1, #15
    9d8e:	f007 fb6d 	bl	1146c <eeprom::setEeprom16(unsigned short, unsigned short)>
//	eeprom_write_word((uint16_t*)(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::MINIMUM_SPEED), DEFAULT_MIN_SPEED);
	
	setEeprom8(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::DEFAULTS_FLAG, _BV(ACCELERATION_INIT_BIT));
    9d92:	f44f 70c4 	mov.w	r0, #392	; 0x188
    9d96:	f04f 0180 	mov.w	r1, #128	; 0x80
    9d9a:	f007 faf3 	bl	11384 <eeprom::setEeprom8(unsigned short, unsigned char)>
//	eeprom_write_byte((uint8_t*)(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::DEFAULTS_FLAG), _BV(ACCELERATION_INIT_BIT));
}
    9d9e:	bd08      	pop	{r3, pc}

00009da0 <eeprom::isSingleTool()>:
	// update XY axis offsets to match tool head settins
	setDefaultAxisHomePositions();
}

    // check single / dual tool status
bool isSingleTool(){
    9da0:	b508      	push	{r3, lr}
	return (getEeprom8(eeprom_offsets::TOOL_COUNT, 1) == 1);
    9da2:	f04f 0042 	mov.w	r0, #66	; 0x42
    9da6:	f04f 0101 	mov.w	r1, #1
    9daa:	f007 fac9 	bl	11340 <eeprom::getEeprom8(unsigned short, unsigned char)>
}
    9dae:	2801      	cmp	r0, #1
    9db0:	bf14      	ite	ne
    9db2:	2000      	movne	r0, #0
    9db4:	2001      	moveq	r0, #1
    9db6:	bd08      	pop	{r3, pc}

00009db8 <eeprom::setDefaultAxisHomePositions()>:
}

/// Writes to EEPROM the default toolhead 'home' values to idicate toolhead offset
/// from idealized point-center of the toolhead
void setDefaultAxisHomePositions()
{
    9db8:	b530      	push	{r4, r5, lr}
    9dba:	b087      	sub	sp, #28
	uint32_t homes[5] = {replicator_axis_offsets::DUAL_X_OFFSET_STEPS,replicator_axis_offsets::DUAL_Y_OFFSET_STEPS,0,0,0};
    9dbc:	ac01      	add	r4, sp, #4
    9dbe:	4d0e      	ldr	r5, [pc, #56]	; (9df8 <eeprom::setDefaultAxisHomePositions()+0x40>)
    9dc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    9dc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    9dc4:	682b      	ldr	r3, [r5, #0]
    9dc6:	6023      	str	r3, [r4, #0]
	if(isSingleTool()){
    9dc8:	f7ff ffea 	bl	9da0 <eeprom::isSingleTool()>
    9dcc:	b128      	cbz	r0, 9dda <eeprom::setDefaultAxisHomePositions()+0x22>
		homes[0] = replicator_axis_offsets::SINGLE_X_OFFSET_STEPS;
    9dce:	f243 73e5 	movw	r3, #14309	; 0x37e5
    9dd2:	9301      	str	r3, [sp, #4]
		homes[1] = replicator_axis_offsets::SINGLE_Y_OFFSET_STEPS;
    9dd4:	f641 237a 	movw	r3, #6778	; 0x1a7a
    9dd8:	9302      	str	r3, [sp, #8]
    9dda:	466d      	mov	r5, sp
}

/// Writes to EEPROM the default toolhead 'home' values to idicate toolhead offset
/// from idealized point-center of the toolhead
void setDefaultAxisHomePositions()
{
    9ddc:	f04f 040e 	mov.w	r4, #14
		homes[0] = replicator_axis_offsets::SINGLE_X_OFFSET_STEPS;
		homes[1] = replicator_axis_offsets::SINGLE_Y_OFFSET_STEPS;
	}
	for (uint8_t i=0;i<5;i++){
//		xprintf("%x" " (%s:%d)\n",(EEPROM_START_ADDRESS + (eeprom_offsets::AXIS_HOME_POSITIONS_STEPS+i)*4),_F_,_L_);
		setEeprom32(eeprom_offsets::AXIS_HOME_POSITIONS_STEPS+(i*4), homes[i]);
    9de0:	4620      	mov	r0, r4
    9de2:	f855 1f04 	ldr.w	r1, [r5, #4]!
    9de6:	f007 fb65 	bl	114b4 <eeprom::setEeprom32(unsigned short, unsigned long)>
    9dea:	f104 0404 	add.w	r4, r4, #4
    9dee:	b2a4      	uxth	r4, r4
	uint32_t homes[5] = {replicator_axis_offsets::DUAL_X_OFFSET_STEPS,replicator_axis_offsets::DUAL_Y_OFFSET_STEPS,0,0,0};
	if(isSingleTool()){
		homes[0] = replicator_axis_offsets::SINGLE_X_OFFSET_STEPS;
		homes[1] = replicator_axis_offsets::SINGLE_Y_OFFSET_STEPS;
	}
	for (uint8_t i=0;i<5;i++){
    9df0:	2c22      	cmp	r4, #34	; 0x22
    9df2:	d1f5      	bne.n	9de0 <eeprom::setDefaultAxisHomePositions()+0x28>
//		xprintf("%x" " (%s:%d)\n",(EEPROM_START_ADDRESS + (eeprom_offsets::AXIS_HOME_POSITIONS_STEPS+i)*4),_F_,_L_);
		setEeprom32(eeprom_offsets::AXIS_HOME_POSITIONS_STEPS+(i*4), homes[i]);
	}
//	eeprom_write_block((uint8_t*)&(homes[0]),(uint8_t*)(eeprom_offsets::AXIS_HOME_POSITIONS_STEPS), 20 );
}
    9df4:	b007      	add	sp, #28
    9df6:	bd30      	pop	{r4, r5, pc}
    9df8:	000273d0 	.word	0x000273d0

00009dfc <eeprom::factoryResetEEPROM()>:
    
/// Does a factory reset (resets all defaults except home/endstops, axis direction and tool count)
void factoryResetEEPROM() {
    9dfc:	b530      	push	{r4, r5, lr}
    9dfe:	b087      	sub	sp, #28
	// Default: enstops inverted, Z axis inverted
	uint8_t endstop_invert = 0b10011111; // all endstops inverted

	uint8_t home_direction = 0b11011; // X,Y Max, Z min  (AB max - to never halt on edge in stepper interface)

	uint8_t vRefBase[] = {118,118,40,118,118};  //(AB maxed out)
    9e00:	f247 33cc 	movw	r3, #29644	; 0x73cc
    9e04:	f2c0 0302 	movt	r3, #2
    9e08:	f853 0f18 	ldr.w	r0, [r3, #24]!
    9e0c:	9004      	str	r0, [sp, #16]
    9e0e:	791b      	ldrb	r3, [r3, #4]
    9e10:	f88d 3014 	strb.w	r3, [sp, #20]
	uint16_t vidPid[] = {0x23C1, 0xB404};		/// PID/VID for the MightyBoard!

	/// Write 'MainBoard' settings
	char machine_name_in[] = "The Replicator";
    9e14:	f247 4330 	movw	r3, #29744	; 0x7430
    9e18:	f2c0 0302 	movt	r3, #2
    9e1c:	466c      	mov	r4, sp
    9e1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    9e20:	c407      	stmia	r4!, {r0, r1, r2}
    9e22:	f824 3b02 	strh.w	r3, [r4], #2
    9e26:	ea4f 4313 	mov.w	r3, r3, lsr #16
    9e2a:	7023      	strb	r3, [r4, #0]
    9e2c:	f10d 35ff 	add.w	r5, sp, #4294967295
    9e30:	f04f 0422 	mov.w	r4, #34	; 0x22
	for (uint8_t i=0;i<16;i++){
		setEeprom8(eeprom_offsets::MACHINE_NAME+i, machine_name_in[i]);
    9e34:	4620      	mov	r0, r4
    9e36:	f815 1f01 	ldrb.w	r1, [r5, #1]!
    9e3a:	f007 faa3 	bl	11384 <eeprom::setEeprom8(unsigned short, unsigned char)>
    9e3e:	f104 0401 	add.w	r4, r4, #1
    9e42:	b2a4      	uxth	r4, r4
	uint8_t vRefBase[] = {118,118,40,118,118};  //(AB maxed out)
	uint16_t vidPid[] = {0x23C1, 0xB404};		/// PID/VID for the MightyBoard!

	/// Write 'MainBoard' settings
	char machine_name_in[] = "The Replicator";
	for (uint8_t i=0;i<16;i++){
    9e44:	2c32      	cmp	r4, #50	; 0x32
    9e46:	d1f5      	bne.n	9e34 <eeprom::factoryResetEEPROM()+0x38>
    9e48:	f10d 050f 	add.w	r5, sp, #15
    9e4c:	f04f 0406 	mov.w	r4, #6
		setEeprom8(eeprom_offsets::MACHINE_NAME+i, machine_name_in[i]);
//		xprintf("%x %c" " (%s:%d)\n",EEPROM_START_ADDRESS + (eeprom_offsets::MACHINE_NAME+i)*4,eeprom_address(EEPROM_START_ADDRESS, eeprom_offsets::MACHINE_NAME+i),_F_,_L_);
	}
//	eeprom_write_block("The Replicator",(uint8_t*)eeprom_offsets::MACHINE_NAME,20); // name is null
	for (uint8_t i=0;i<5;i++){
		setEeprom8(eeprom_offsets::DIGI_POT_SETTINGS+i, vRefBase[i]);
    9e50:	4620      	mov	r0, r4
    9e52:	f815 1f01 	ldrb.w	r1, [r5, #1]!
    9e56:	f007 fa95 	bl	11384 <eeprom::setEeprom8(unsigned short, unsigned char)>
    9e5a:	f104 0401 	add.w	r4, r4, #1
    9e5e:	b2a4      	uxth	r4, r4
	for (uint8_t i=0;i<16;i++){
		setEeprom8(eeprom_offsets::MACHINE_NAME+i, machine_name_in[i]);
//		xprintf("%x %c" " (%s:%d)\n",EEPROM_START_ADDRESS + (eeprom_offsets::MACHINE_NAME+i)*4,eeprom_address(EEPROM_START_ADDRESS, eeprom_offsets::MACHINE_NAME+i),_F_,_L_);
	}
//	eeprom_write_block("The Replicator",(uint8_t*)eeprom_offsets::MACHINE_NAME,20); // name is null
	for (uint8_t i=0;i<5;i++){
    9e60:	2c0b      	cmp	r4, #11
    9e62:	d1f5      	bne.n	9e50 <eeprom::factoryResetEEPROM()+0x54>
		setEeprom8(eeprom_offsets::DIGI_POT_SETTINGS+i, vRefBase[i]);
//		xprintf("%x %c" " (%s:%d)\n",EEPROM_START_ADDRESS + (eeprom_offsets::DIGI_POT_SETTINGS+i)*4,eeprom_address(EEPROM_START_ADDRESS, eeprom_offsets::DIGI_POT_SETTINGS+i),_F_,_L_);
	}
//	eeprom_write_block(&(vRefBase[0]),(uint8_t*)(eeprom_offsets::DIGI_POT_SETTINGS), 5 );
	setEeprom8(eeprom_offsets::ENDSTOP_INVERSION, endstop_invert);
    9e64:	f04f 0004 	mov.w	r0, #4
    9e68:	f04f 019f 	mov.w	r1, #159	; 0x9f
    9e6c:	f007 fa8a 	bl	11384 <eeprom::setEeprom8(unsigned short, unsigned char)>
//	eeprom_write_byte((uint8_t*)eeprom_offsets::ENDSTOP_INVERSION, endstop_invert);
	setEeprom8(eeprom_offsets::AXIS_HOME_DIRECTION, home_direction);
    9e70:	f04f 000c 	mov.w	r0, #12
    9e74:	f04f 011b 	mov.w	r1, #27
    9e78:	f007 fa84 	bl	11384 <eeprom::setEeprom8(unsigned short, unsigned char)>
//	eeprom_write_byte((uint8_t*)eeprom_offsets::AXIS_HOME_DIRECTION, home_direction);
    

	setDefaultAxisHomePositions();
    9e7c:	f7ff ff9c 	bl	9db8 <eeprom::setDefaultAxisHomePositions()>
    9e80:	4d22      	ldr	r5, [pc, #136]	; (9f0c <eeprom::factoryResetEEPROM()+0x110>)
    9e82:	f44f 74c6 	mov.w	r4, #396	; 0x18c
    
    /// store the default axis lengths for the machine
    for (uint8_t i=0;i<5;i++){
    	setEeprom32(eeprom_offsets::AXIS_LENGTHS+(i*4), replicator_axis_lengths::axis_lengths[i]);
    9e86:	4620      	mov	r0, r4
    9e88:	f855 1f04 	ldr.w	r1, [r5, #4]!
    9e8c:	f007 fb12 	bl	114b4 <eeprom::setEeprom32(unsigned short, unsigned long)>
    9e90:	f104 0404 	add.w	r4, r4, #4
    9e94:	b2a4      	uxth	r4, r4
    

	setDefaultAxisHomePositions();
    
    /// store the default axis lengths for the machine
    for (uint8_t i=0;i<5;i++){
    9e96:	f5b4 7fd0 	cmp.w	r4, #416	; 0x1a0
    9e9a:	d1f4      	bne.n	9e86 <eeprom::factoryResetEEPROM()+0x8a>
    	setEeprom32(eeprom_offsets::AXIS_LENGTHS+(i*4), replicator_axis_lengths::axis_lengths[i]);
    }
//    eeprom_write_block((uint8_t*)&(replicator_axis_lengths::axis_lengths[0]), (uint8_t*)(eeprom_offsets::AXIS_LENGTHS), 20);
    
    setDefaultsAcceleration();
    9e9c:	f7ff ff2a 	bl	9cf4 <eeprom::setDefaultsAcceleration()>
	
    setEeprom8(eeprom_offsets::FILAMENT_HELP_SETTINGS, 1);
    9ea0:	f44f 70b0 	mov.w	r0, #352	; 0x160
    9ea4:	f04f 0101 	mov.w	r1, #1
    9ea8:	f007 fa6c 	bl	11384 <eeprom::setEeprom8(unsigned short, unsigned char)>
//	eeprom_write_byte((uint8_t*)eeprom_offsets::FILAMENT_HELP_SETTINGS, 1);

    /// Thermal table settings
    SetDefaultsThermal(eeprom_offsets::THERM_TABLE);
    9eac:	f04f 0074 	mov.w	r0, #116	; 0x74
    9eb0:	f7ff fe7c 	bl	9bac <eeprom::SetDefaultsThermal(unsigned short)>
    
    /// Preheat heater settings
    setDefaultsPreheat(eeprom_offsets::PREHEAT_SETTINGS);
    9eb4:	f44f 70ac 	mov.w	r0, #344	; 0x158
    9eb8:	f7ff ff00 	bl	9cbc <eeprom::setDefaultsPreheat(unsigned short)>

    /// write MightyBoard VID/PID. Only after verification does production write
    /// a proper 'The Replicator' PID/VID to eeprom, and to the USB chip
    setEeprom16(eeprom_offsets::VID_PID_INFO, vidPid[0]);
    9ebc:	f04f 0044 	mov.w	r0, #68	; 0x44
    9ec0:	f242 31c1 	movw	r1, #9153	; 0x23c1
    9ec4:	f007 fad2 	bl	1146c <eeprom::setEeprom16(unsigned short, unsigned short)>
    setEeprom16(eeprom_offsets::VID_PID_INFO+2, vidPid[1]);
    9ec8:	f04f 0046 	mov.w	r0, #70	; 0x46
    9ecc:	f24b 4104 	movw	r1, #46084	; 0xb404
    9ed0:	f007 facc 	bl	1146c <eeprom::setEeprom16(unsigned short, unsigned short)>
//    eeprom_write_block(&(vidPid[0]),(uint8_t*)eeprom_offsets::VID_PID_INFO,4);

    /// Write 'extruder 0' settings
    setDefaultsExtruder(0,eeprom_offsets::T0_DATA_BASE);
    9ed4:	f04f 0000 	mov.w	r0, #0
    9ed8:	f44f 7180 	mov.w	r1, #256	; 0x100
    9edc:	f7ff fe1e 	bl	9b1c <eeprom::setDefaultsExtruder(int, unsigned short)>

    /// Write 'extruder 1' stttings
    setDefaultsExtruder(1,eeprom_offsets::T1_DATA_BASE);
    9ee0:	f04f 0001 	mov.w	r0, #1
    9ee4:	f44f 718e 	mov.w	r1, #284	; 0x11c
    9ee8:	f7ff fe18 	bl	9b1c <eeprom::setDefaultsExtruder(int, unsigned short)>

    /// write blink and buzz defaults
    setDefaultLedEffects(eeprom_offsets::LED_STRIP_SETTINGS);
    9eec:	f44f 70a0 	mov.w	r0, #320	; 0x140
    9ef0:	f7ff fe8c 	bl	9c0c <eeprom::setDefaultLedEffects(unsigned short)>
    setDefaultBuzzEffects(eeprom_offsets::BUZZ_SETTINGS);
    9ef4:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    9ef8:	f7ff fed2 	bl	9ca0 <eeprom::setDefaultBuzzEffects(unsigned short)>
    
    // startup script flag is cleared
    setEeprom8(eeprom_offsets::FIRST_BOOT_FLAG, 0);
    9efc:	f44f 70ab 	mov.w	r0, #342	; 0x156
    9f00:	f04f 0100 	mov.w	r1, #0
    9f04:	f007 fa3e 	bl	11384 <eeprom::setEeprom8(unsigned short, unsigned char)>
//    eeprom_write_byte((uint8_t*)eeprom_offsets::FIRST_BOOT_FLAG, 0);
}
    9f08:	b007      	add	sp, #28
    9f0a:	bd30      	pop	{r4, r5, pc}
    9f0c:	0002743c 	.word	0x0002743c

00009f10 <eeprom::storeToolheadToleranceDefaults()>:
    setEeprom8(eeprom_offsets::FILAMENT_HELP_SETTINGS, 1);
//   eeprom_write_byte((uint8_t*)eeprom_offsets::FILAMENT_HELP_SETTINGS, 1);
}

//
void storeToolheadToleranceDefaults(){
    9f10:	b500      	push	{lr}
    9f12:	b085      	sub	sp, #20
	// assume t0 to t1 distance is in specifications (0 steps tolerance error)
	uint32_t offsets[3] = {0,0,0};
    9f14:	f04f 0100 	mov.w	r1, #0
    9f18:	9101      	str	r1, [sp, #4]
    9f1a:	9102      	str	r1, [sp, #8]
    9f1c:	9103      	str	r1, [sp, #12]
	for (uint8_t i=0;i<3;i++){
		setEeprom32(eeprom_offsets::TOOLHEAD_OFFSET_SETTINGS+(i*4), offsets[i]);
    9f1e:	f44f 70b1 	mov.w	r0, #354	; 0x162
    9f22:	f007 fac7 	bl	114b4 <eeprom::setEeprom32(unsigned short, unsigned long)>
    9f26:	f44f 70b3 	mov.w	r0, #358	; 0x166
    9f2a:	9902      	ldr	r1, [sp, #8]
    9f2c:	f007 fac2 	bl	114b4 <eeprom::setEeprom32(unsigned short, unsigned long)>
    9f30:	f44f 70b5 	mov.w	r0, #362	; 0x16a
    9f34:	9903      	ldr	r1, [sp, #12]
    9f36:	f007 fabd 	bl	114b4 <eeprom::setEeprom32(unsigned short, unsigned long)>
//		xprintf("%x" " (%s:%d)\n",eeprom_address(EEPROM_START_ADDRESS, eeprom_offsets::TOOLHEAD_OFFSET_SETTINGS+(i*4)),_F_,_L_);
//		xprintf("%x" " (%s:%d)\n",(EEPROM_START_ADDRESS + eeprom_offsets::TOOLHEAD_OFFSET_SETTINGS+(i*4)),_F_,_L_);
	}
//	eeprom_write_block((uint8_t*)&(offsets[0]),(uint8_t*)(eeprom_offsets::TOOLHEAD_OFFSET_SETTINGS), 12 );
}
    9f3a:	b005      	add	sp, #20
    9f3c:	bd00      	pop	{pc}
    9f3e:	bf00      	nop

00009f40 <eeprom::updateBuildTime(unsigned char, unsigned char)>:

void updateBuildTime(uint8_t new_hours, uint8_t new_minutes){
    9f40:	b570      	push	{r4, r5, r6, lr}
    9f42:	4606      	mov	r6, r0
    9f44:	460d      	mov	r5, r1
	
	uint16_t hours = eeprom::getEeprom16(eeprom_offsets::TOTAL_BUILD_TIME + build_time_offsets::HOURS_OFFSET,0);
    9f46:	f44f 70d0 	mov.w	r0, #416	; 0x1a0
    9f4a:	f04f 0100 	mov.w	r1, #0
    9f4e:	f007 fa75 	bl	1143c <eeprom::getEeprom16(unsigned short, unsigned short)>
    9f52:	4604      	mov	r4, r0
	uint8_t minutes = eeprom::getEeprom8(eeprom_offsets::TOTAL_BUILD_TIME + build_time_offsets::MINUTES_OFFSET,0);
    9f54:	f44f 70d1 	mov.w	r0, #418	; 0x1a2
    9f58:	f04f 0100 	mov.w	r1, #0
    9f5c:	f007 f9f0 	bl	11340 <eeprom::getEeprom8(unsigned short, unsigned char)>
	
	uint8_t total_minutes = new_minutes + minutes;
    9f60:	1940      	adds	r0, r0, r5
    9f62:	b2c0      	uxtb	r0, r0
	minutes = total_minutes % 60;
    9f64:	f648 0589 	movw	r5, #34953	; 0x8889
    9f68:	f6c8 0588 	movt	r5, #34952	; 0x8888
    9f6c:	fba5 3500 	umull	r3, r5, r5, r0
    9f70:	ea4f 1555 	mov.w	r5, r5, lsr #5
    9f74:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
    9f78:	eba0 0585 	sub.w	r5, r0, r5, lsl #2
    9f7c:	b2ed      	uxtb	r5, r5
	
	// increment hours if minutes are over 60
	if(total_minutes > 60){
    9f7e:	283c      	cmp	r0, #60	; 0x3c
		hours++;
    9f80:	bf84      	itt	hi
    9f82:	3401      	addhi	r4, #1
    9f84:	b2a4      	uxthhi	r4, r4
	}
	
	// update build time
	setEeprom16(eeprom_offsets::TOTAL_BUILD_TIME + build_time_offsets::HOURS_OFFSET, hours + new_hours);
    9f86:	19a4      	adds	r4, r4, r6
    9f88:	f44f 70d0 	mov.w	r0, #416	; 0x1a0
    9f8c:	b2a1      	uxth	r1, r4
    9f8e:	f007 fa6d 	bl	1146c <eeprom::setEeprom16(unsigned short, unsigned short)>
	setEeprom8(eeprom_offsets::TOTAL_BUILD_TIME + build_time_offsets::MINUTES_OFFSET, minutes);
    9f92:	f44f 70d1 	mov.w	r0, #418	; 0x1a2
    9f96:	4629      	mov	r1, r5
    9f98:	f007 f9f4 	bl	11384 <eeprom::setEeprom8(unsigned short, unsigned char)>
//	eeprom_write_word((uint16_t*)(eeprom_offsets::TOTAL_BUILD_TIME + build_time_offsets::HOURS_OFFSET), hours + new_hours);
//	eeprom_write_byte((uint8_t*)(eeprom_offsets::TOTAL_BUILD_TIME + build_time_offsets::MINUTES_OFFSET), minutes);

}
    9f9c:	bd70      	pop	{r4, r5, r6, pc}
    9f9e:	bf00      	nop

00009fa0 <eeprom::fullResetEEPROM()>:

/// Initialize entire eeprom map, including factor-set settings
void fullResetEEPROM() {
    9fa0:	b508      	push	{r3, lr}
	write_ff_to_ram();
    9fa2:	f7ff fd63 	bl	9a6c <eeprom::write_ff_to_ram()>
	// axis inversion settings
	uint8_t axis_invert = 0b10111; // invert XYBZ
	setEeprom8(eeprom_offsets::AXIS_INVERSION, axis_invert);
    9fa6:	f04f 0002 	mov.w	r0, #2
    9faa:	f04f 0117 	mov.w	r1, #23
    9fae:	f007 f9e9 	bl	11384 <eeprom::setEeprom8(unsigned short, unsigned char)>
//	eeprom_write_byte((uint8_t*)eeprom_offsets::AXIS_INVERSION, axis_invert);
	
	// tool count settings
	setEeprom8(eeprom_offsets::TOOL_COUNT, 1);
    9fb2:	f04f 0042 	mov.w	r0, #66	; 0x42
    9fb6:	f04f 0101 	mov.w	r1, #1
    9fba:	f007 f9e3 	bl	11384 <eeprom::setEeprom8(unsigned short, unsigned char)>
//	eeprom_write_byte((uint8_t*)eeprom_offsets::TOOL_COUNT, 1);
	
	// toolhead offset defaults
	storeToolheadToleranceDefaults();
    9fbe:	f7ff ffa7 	bl	9f10 <eeprom::storeToolheadToleranceDefaults()>
	
	// set build time to zero
	setEeprom16(eeprom_offsets::TOTAL_BUILD_TIME + build_time_offsets::HOURS_OFFSET, 0);
    9fc2:	f44f 70d0 	mov.w	r0, #416	; 0x1a0
    9fc6:	f04f 0100 	mov.w	r1, #0
    9fca:	f007 fa4f 	bl	1146c <eeprom::setEeprom16(unsigned short, unsigned short)>
	setEeprom8(eeprom_offsets::TOTAL_BUILD_TIME + build_time_offsets::MINUTES_OFFSET, 0);
    9fce:	f44f 70d1 	mov.w	r0, #418	; 0x1a2
    9fd2:	f04f 0100 	mov.w	r1, #0
    9fd6:	f007 f9d5 	bl	11384 <eeprom::setEeprom8(unsigned short, unsigned char)>
//	eeprom_write_word((uint16_t*)(eeprom_offsets::TOTAL_BUILD_TIME + build_time_offsets::HOURS_OFFSET), 0);
//	eeprom_write_byte((uint8_t*)(eeprom_offsets::TOTAL_BUILD_TIME + build_time_offsets::MINUTES_OFFSET), 0);
	
	factoryResetEEPROM();
    9fda:	f7ff ff0f 	bl	9dfc <eeprom::factoryResetEEPROM()>
}
    9fde:	bd08      	pop	{r3, pc}

00009fe0 <_GLOBAL__sub_I__ZN6eeprom15write_ff_to_ramEv>:

}
    9fe0:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
    9fe2:	f640 30d4 	movw	r0, #3028	; 0xbd4
    9fe6:	f2c1 0000 	movt	r0, #4096	; 0x1000
    9fea:	f04f 0100 	mov.w	r1, #0
    9fee:	f007 fe25 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
    9ff2:	f640 30d8 	movw	r0, #3032	; 0xbd8
    9ff6:	f2c1 0000 	movt	r0, #4096	; 0x1000
    9ffa:	f04f 0101 	mov.w	r1, #1
    9ffe:	f007 fe1d 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
    a002:	f640 30dc 	movw	r0, #3036	; 0xbdc
    a006:	f2c1 0000 	movt	r0, #4096	; 0x1000
    a00a:	f04f 0102 	mov.w	r1, #2
    a00e:	f007 fe15 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
    a012:	f640 30e0 	movw	r0, #3040	; 0xbe0
    a016:	f2c1 0000 	movt	r0, #4096	; 0x1000
    a01a:	f04f 0103 	mov.w	r1, #3
    a01e:	f007 fe0d 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
    a022:	f640 30e4 	movw	r0, #3044	; 0xbe4
    a026:	f2c1 0000 	movt	r0, #4096	; 0x1000
    a02a:	f04f 0104 	mov.w	r1, #4
    a02e:	f007 fe05 	bl	11c3c <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
    a032:	f640 34e8 	movw	r4, #3048	; 0xbe8
    a036:	f2c1 0400 	movt	r4, #4096	; 0x1000
    a03a:	4620      	mov	r0, r4
    a03c:	f04f 01ff 	mov.w	r1, #255	; 0xff
    a040:	f007 fdfc 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    a044:	f640 30ec 	movw	r0, #3052	; 0xbec
    a048:	f2c1 0000 	movt	r0, #4096	; 0x1000
    a04c:	4621      	mov	r1, r4
    a04e:	f04f 0200 	mov.w	r2, #0
    a052:	f008 f805 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    a056:	bd10      	pop	{r4, pc}

0000a058 <HeatingElement::~HeatingElement()>:
/// The heating element interface is a standard interface used to communicate with
/// things that can control
/// \ingroup SoftwareLibraries
class HeatingElement {
public:
		virtual ~HeatingElement(){};
    a058:	4b01      	ldr	r3, [pc, #4]	; (a060 <HeatingElement::~HeatingElement()+0x8>)
    a05a:	6003      	str	r3, [r0, #0]
    a05c:	4770      	bx	lr
    a05e:	bf00      	nop
    a060:	00027460 	.word	0x00027460

0000a064 <ExtruderHeatingElement::~ExtruderHeatingElement()>:
    a064:	4b01      	ldr	r3, [pc, #4]	; (a06c <ExtruderHeatingElement::~ExtruderHeatingElement()+0x8>)
    a066:	6003      	str	r3, [r0, #0]
#include "CoolingFan.hh"
//#include "MotorController.hh"

/// Extruder heating element on v34 Extruder controller
/// \ingroup ECv34
class ExtruderHeatingElement : public HeatingElement {
    a068:	4770      	bx	lr
    a06a:	bf00      	nop
    a06c:	00027460 	.word	0x00027460

0000a070 <ExtruderHeatingElement::~ExtruderHeatingElement()>:
    a070:	b510      	push	{r4, lr}
    a072:	4604      	mov	r4, r0
    a074:	4b02      	ldr	r3, [pc, #8]	; (a080 <ExtruderHeatingElement::~ExtruderHeatingElement()+0x10>)
    a076:	6003      	str	r3, [r0, #0]
    a078:	f00a fc12 	bl	148a0 <operator delete(void*)>
    a07c:	4620      	mov	r0, r4
    a07e:	bd10      	pop	{r4, pc}
    a080:	00027460 	.word	0x00027460

0000a084 <HeatingElement::~HeatingElement()>:
    a084:	b510      	push	{r4, lr}
    a086:	4604      	mov	r4, r0
    a088:	4b02      	ldr	r3, [pc, #8]	; (a094 <HeatingElement::~HeatingElement()+0x10>)
    a08a:	6003      	str	r3, [r0, #0]
    a08c:	f00a fc08 	bl	148a0 <operator delete(void*)>
    a090:	4620      	mov	r0, r4
    a092:	bd10      	pop	{r4, pc}
    a094:	00027460 	.word	0x00027460

0000a098 <ExtruderBoard::reset()>:
			eeprom_base(eeprom_base)
{
}


void ExtruderBoard::reset() {
    a098:	b510      	push	{r4, lr}
    a09a:	4604      	mov	r4, r0
	xprintf("ExtruderBoard::reset()" " (%s:%d)\n",_F_,_L_);
    a09c:	f247 4088 	movw	r0, #29832	; 0x7488
    a0a0:	f2c0 0002 	movt	r0, #2
    a0a4:	4911      	ldr	r1, [pc, #68]	; (a0ec <ExtruderBoard::reset()+0x54>)
    a0a6:	f04f 0236 	mov.w	r2, #54	; 0x36
    a0aa:	f7fc fc53 	bl	6954 <xprintf>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    a0ae:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
    a0b2:	b94b      	cbnz	r3, a0c8 <ExtruderBoard::reset()+0x30>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    a0b4:	f894 30b6 	ldrb.w	r3, [r4, #182]	; 0xb6
    a0b8:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    a0bc:	f04f 0101 	mov.w	r1, #1
    a0c0:	fa01 f103 	lsl.w	r1, r1, r3
    a0c4:	f7f9 fa16 	bl	34f4 <GPIO_ClearValue>
	// Set the output mode for the mosfets.  
	Heater_Pin.setValue(false);
	Heater_Pin.setDirection(true);
    a0c8:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    a0cc:	f04f 0101 	mov.w	r1, #1
    a0d0:	f007 ffe6 	bl	120a0 <Pin::setDirection(bool) const>

	extruder_heater.reset();
    a0d4:	f104 0028 	add.w	r0, r4, #40	; 0x28
    a0d8:	f007 fa06 	bl	114e8 <Heater::reset()>
//	extruder_thermocouple.init();
	extruder_thermistor.init();
    a0dc:	4620      	mov	r0, r4
    a0de:	f008 f889 	bl	121f4 <Thermistor::init()>
	coolingFan.reset();
    a0e2:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    a0e6:	f006 ffed 	bl	110c4 <CoolingFan::reset()>

}
    a0ea:	bd10      	pop	{r4, pc}
    a0ec:	000274c4 	.word	0x000274c4

0000a0f0 <ExtruderBoard::runExtruderSlice()>:

void ExtruderBoard::runExtruderSlice() {
    a0f0:	b510      	push	{r4, lr}
    a0f2:	4604      	mov	r4, r0
        extruder_heater.manage_temperature();
    a0f4:	f100 0028 	add.w	r0, r0, #40	; 0x28
    a0f8:	f007 fbba 	bl	11870 <Heater::manage_temperature()>
        coolingFan.manageCoolingFan();
    a0fc:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    a100:	f006 ffa2 	bl	11048 <CoolingFan::manageCoolingFan()>

}
    a104:	bd10      	pop	{r4, pc}
    a106:	bf00      	nop

0000a108 <ExtruderBoard::setFan(unsigned char)>:

void ExtruderBoard::setFan(uint8_t on)
{
    a108:	b508      	push	{r3, lr}
	if(on)
    a10a:	b121      	cbz	r1, a116 <ExtruderBoard::setFan(unsigned char)+0xe>
		coolingFan.enable();
    a10c:	f100 00bc 	add.w	r0, r0, #188	; 0xbc
    a110:	f006 ff7e 	bl	11010 <CoolingFan::enable()>
    a114:	bd08      	pop	{r3, pc}
	else
		coolingFan.disable();
    a116:	f100 00bc 	add.w	r0, r0, #188	; 0xbc
    a11a:	f006 ffcb 	bl	110b4 <CoolingFan::disable()>
    a11e:	bd08      	pop	{r3, pc}

0000a120 <pwmEx2_On(bool)>:
}

// Turn on/off PWM for Extruder Two (OC1A)
void pwmEx2_On(bool on) {
    a120:	b508      	push	{r3, lr}
	if (on) {
    a122:	b150      	cbz	r0, a13a <pwmEx2_On(bool)+0x1a>
		PWM_ChannelCmd(LPC_PWM1, 4, ENABLE);
    a124:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    a128:	f2c4 0001 	movt	r0, #16385	; 0x4001
    a12c:	f04f 0104 	mov.w	r1, #4
    a130:	f04f 0201 	mov.w	r2, #1
    a134:	f7f9 fc6c 	bl	3a10 <PWM_ChannelCmd>
    a138:	bd08      	pop	{r3, pc}
//		xprintf("PWM_ChannelCmd(LPC_PWM1, 4, ENABLE)" " (%s:%d)\n",_F_,_L_);
//		TCCR1A |= 0b10000000;
	} else {
		PWM_ChannelCmd(LPC_PWM1, 4, DISABLE);
    a13a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    a13e:	f2c4 0001 	movt	r0, #16385	; 0x4001
    a142:	f04f 0104 	mov.w	r1, #4
    a146:	f04f 0200 	mov.w	r2, #0
    a14a:	f7f9 fc61 	bl	3a10 <PWM_ChannelCmd>
    a14e:	bd08      	pop	{r3, pc}

0000a150 <pwmEx1_On(bool)>:
//		TCCR1A &= 0b00111111;
	}
}

// Turn on/off PWM for Extruder One (OC4A)
void pwmEx1_On(bool on) {
    a150:	b508      	push	{r3, lr}
	if (on) {
    a152:	b150      	cbz	r0, a16a <pwmEx1_On(bool)+0x1a>
		PWM_ChannelCmd(LPC_PWM1, 5, ENABLE);
    a154:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    a158:	f2c4 0001 	movt	r0, #16385	; 0x4001
    a15c:	f04f 0105 	mov.w	r1, #5
    a160:	f04f 0201 	mov.w	r2, #1
    a164:	f7f9 fc54 	bl	3a10 <PWM_ChannelCmd>
    a168:	bd08      	pop	{r3, pc}
//		xprintf("PWM_ChannelCmd(LPC_PWM1, 5, ENABLE)" " (%s:%d)\n",_F_,_L_);
//		TCCR4A |= 0b10000000;
	} else {
		PWM_ChannelCmd(LPC_PWM1, 5, DISABLE);
    a16a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    a16e:	f2c4 0001 	movt	r0, #16385	; 0x4001
    a172:	f04f 0105 	mov.w	r1, #5
    a176:	f04f 0200 	mov.w	r2, #0
    a17a:	f7f9 fc49 	bl	3a10 <PWM_ChannelCmd>
    a17e:	bd08      	pop	{r3, pc}

0000a180 <ExtruderHeatingElement::setHeatingElement(unsigned char)>:
ExtruderHeatingElement::ExtruderHeatingElement(uint8_t id):
	heater_id(id)
{
}

void ExtruderHeatingElement::setHeatingElement(uint8_t value) {
    a180:	b510      	push	{r4, lr}
    a182:	b084      	sub	sp, #16
    a184:	460c      	mov	r4, r1
	
	
//  	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
	   if(heater_id == 0)
    a186:	7903      	ldrb	r3, [r0, #4]
    a188:	bb93      	cbnz	r3, a1f0 <ExtruderHeatingElement::setHeatingElement(unsigned char)+0x70>
	   { 
     		if (value == 0 || value == 255) {
    a18a:	f101 33ff 	add.w	r3, r1, #4294967295
    a18e:	b2db      	uxtb	r3, r3
    a190:	2bfd      	cmp	r3, #253	; 0xfd
    a192:	d928      	bls.n	a1e6 <ExtruderHeatingElement::setHeatingElement(unsigned char)+0x66>
			pwmEx1_On(false);
    a194:	f04f 0000 	mov.w	r0, #0
    a198:	f7ff ffda 	bl	a150 <pwmEx1_On(bool)>
			EX1_PWR.setValue(value == 255);
    a19c:	4668      	mov	r0, sp
    a19e:	f640 31f8 	movw	r1, #3064	; 0xbf8
    a1a2:	f2c1 0100 	movt	r1, #4096	; 0x1000
    a1a6:	f04f 0204 	mov.w	r2, #4
    a1aa:	f007 ff59 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    a1ae:	f89d 3001 	ldrb.w	r3, [sp, #1]
    a1b2:	2b00      	cmp	r3, #0
    a1b4:	d14f      	bne.n	a256 <ExtruderHeatingElement::setHeatingElement(unsigned char)+0xd6>
		 	return;
		// uint8_t oldSREG = SREG;

//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
    a1b6:	2cff      	cmp	r4, #255	; 0xff
    a1b8:	d10a      	bne.n	a1d0 <ExtruderHeatingElement::setHeatingElement(unsigned char)+0x50>
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    a1ba:	f89d 3002 	ldrb.w	r3, [sp, #2]
    a1be:	f89d 0000 	ldrb.w	r0, [sp]
    a1c2:	f04f 0101 	mov.w	r1, #1
    a1c6:	fa01 f103 	lsl.w	r1, r1, r3
    a1ca:	f7f9 f98b 	bl	34e4 <GPIO_SetValue>
    a1ce:	e042      	b.n	a256 <ExtruderHeatingElement::setHeatingElement(unsigned char)+0xd6>
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    a1d0:	f89d 3002 	ldrb.w	r3, [sp, #2]
    a1d4:	f89d 0000 	ldrb.w	r0, [sp]
    a1d8:	f04f 0101 	mov.w	r1, #1
    a1dc:	fa01 f103 	lsl.w	r1, r1, r3
    a1e0:	f7f9 f988 	bl	34f4 <GPIO_ClearValue>
    a1e4:	e037      	b.n	a256 <ExtruderHeatingElement::setHeatingElement(unsigned char)+0xd6>
			} else {
//				OCR4A = value;
				pwmEx1_On(true);
    a1e6:	f04f 0001 	mov.w	r0, #1
    a1ea:	f7ff ffb1 	bl	a150 <pwmEx1_On(bool)>
    a1ee:	e032      	b.n	a256 <ExtruderHeatingElement::setHeatingElement(unsigned char)+0xd6>
				
				
			}
		}
		else if(heater_id == 1)
    a1f0:	2b01      	cmp	r3, #1
    a1f2:	d130      	bne.n	a256 <ExtruderHeatingElement::setHeatingElement(unsigned char)+0xd6>
	   { 
     		if (value == 0 || value == 255) {
    a1f4:	f101 33ff 	add.w	r3, r1, #4294967295
    a1f8:	b2db      	uxtb	r3, r3
    a1fa:	2bfd      	cmp	r3, #253	; 0xfd
    a1fc:	d927      	bls.n	a24e <ExtruderHeatingElement::setHeatingElement(unsigned char)+0xce>
			pwmEx2_On(false);
    a1fe:	f04f 0000 	mov.w	r0, #0
    a202:	f7ff ff8d 	bl	a120 <pwmEx2_On(bool)>
			EX2_PWR.setValue(value == 255);
    a206:	a802      	add	r0, sp, #8
    a208:	f640 31f8 	movw	r1, #3064	; 0xbf8
    a20c:	f2c1 0100 	movt	r1, #4096	; 0x1000
    a210:	f04f 0203 	mov.w	r2, #3
    a214:	f007 ff24 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    a218:	f89d 3009 	ldrb.w	r3, [sp, #9]
    a21c:	b9db      	cbnz	r3, a256 <ExtruderHeatingElement::setHeatingElement(unsigned char)+0xd6>
		 	return;
		// uint8_t oldSREG = SREG;

//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
    a21e:	2cff      	cmp	r4, #255	; 0xff
    a220:	d10a      	bne.n	a238 <ExtruderHeatingElement::setHeatingElement(unsigned char)+0xb8>
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    a222:	f89d 300a 	ldrb.w	r3, [sp, #10]
    a226:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a22a:	f04f 0101 	mov.w	r1, #1
    a22e:	fa01 f103 	lsl.w	r1, r1, r3
    a232:	f7f9 f957 	bl	34e4 <GPIO_SetValue>
    a236:	e00e      	b.n	a256 <ExtruderHeatingElement::setHeatingElement(unsigned char)+0xd6>
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    a238:	f89d 300a 	ldrb.w	r3, [sp, #10]
    a23c:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a240:	f04f 0101 	mov.w	r1, #1
    a244:	fa01 f103 	lsl.w	r1, r1, r3
    a248:	f7f9 f954 	bl	34f4 <GPIO_ClearValue>
    a24c:	e003      	b.n	a256 <ExtruderHeatingElement::setHeatingElement(unsigned char)+0xd6>
			
			} else {
//				OCR1A = value;
				pwmEx2_On(true);
    a24e:	f04f 0001 	mov.w	r0, #1
    a252:	f7ff ff65 	bl	a120 <pwmEx2_On(bool)>
			}
		}
//	}
}
    a256:	b004      	add	sp, #16
    a258:	bd10      	pop	{r4, pc}
    a25a:	bf00      	nop

0000a25c <ExtruderHeatingElement::ExtruderHeatingElement(unsigned char)>:
//		TCCR4A &= 0b00111111;
	} 
}

ExtruderHeatingElement::ExtruderHeatingElement(uint8_t id):
	heater_id(id)
    a25c:	4a01      	ldr	r2, [pc, #4]	; (a264 <ExtruderHeatingElement::ExtruderHeatingElement(unsigned char)+0x8>)
    a25e:	6002      	str	r2, [r0, #0]
    a260:	7101      	strb	r1, [r0, #4]
{
}
    a262:	4770      	bx	lr
    a264:	00027478 	.word	0x00027478

0000a268 <ExtruderBoard::ExtruderBoard(unsigned char, Pin, Pin, Pin, unsigned short)>:
}


//ExtruderBoard ExtruderBoard::extruder_board;

ExtruderBoard::ExtruderBoard(uint8_t slave_id_in, Pin HeaterPin_In, Pin FanPin_In,
    a268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a26c:	b082      	sub	sp, #8
    a26e:	4604      	mov	r4, r0
    a270:	460f      	mov	r7, r1
    a272:	4691      	mov	r9, r2
    a274:	469a      	mov	sl, r3
    a276:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
     		extruder_heater(extruder_thermistor,extruder_element,SAMPLE_INTERVAL_MICROS_THERMOCOUPLE,
        		  (eeprom_base+ toolhead_eeprom_offsets::EXTRUDER_PID_BASE), true ),
      		coolingFan(extruder_heater, (eeprom_base + toolhead_eeprom_offsets::COOLING_FAN_SETTINGS), FanPin_In),
      		slave_id(slave_id_in),
      		Heater_Pin(HeaterPin_In),
			eeprom_base(eeprom_base)
    a27a:	f04f 0200 	mov.w	r2, #0
    a27e:	f007 ffc1 	bl	12204 <Thermistor::Thermistor(unsigned char, unsigned char)>
    a282:	f104 0620 	add.w	r6, r4, #32
    a286:	4630      	mov	r0, r6
    a288:	4639      	mov	r1, r7
    a28a:	f7ff ffe7 	bl	a25c <ExtruderHeatingElement::ExtruderHeatingElement(unsigned char)>
    a28e:	f104 0828 	add.w	r8, r4, #40	; 0x28
    a292:	f105 030a 	add.w	r3, r5, #10
    a296:	b29b      	uxth	r3, r3
    a298:	9300      	str	r3, [sp, #0]
    a29a:	f04f 0301 	mov.w	r3, #1
    a29e:	9301      	str	r3, [sp, #4]
    a2a0:	4640      	mov	r0, r8
    a2a2:	4621      	mov	r1, r4
    a2a4:	4632      	mov	r2, r6
    a2a6:	f24a 1320 	movw	r3, #41248	; 0xa120
    a2aa:	f2c0 0307 	movt	r3, #7
    a2ae:	f007 f9ab 	bl	11608 <Heater::Heater(TemperatureSensor&, HeatingElement&, unsigned long, unsigned short, bool)>
    a2b2:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    a2b6:	4649      	mov	r1, r9
    a2b8:	f007 fee4 	bl	12084 <Pin::Pin(Pin const&)>
    a2bc:	f884 70b9 	strb.w	r7, [r4, #185]	; 0xb9
    a2c0:	f105 021a 	add.w	r2, r5, #26
    a2c4:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    a2c8:	4641      	mov	r1, r8
    a2ca:	b292      	uxth	r2, r2
    a2cc:	4653      	mov	r3, sl
    a2ce:	f006 ff29 	bl	11124 <CoolingFan::CoolingFan(Heater&, unsigned short, Pin const&)>
    a2d2:	f884 50dc 	strb.w	r5, [r4, #220]	; 0xdc
{
}
    a2d6:	4620      	mov	r0, r4
    a2d8:	b002      	add	sp, #8
    a2da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a2de:	bf00      	nop

0000a2e0 <_GLOBAL__sub_I__ZN13ExtruderBoardC2Eh3PinS0_S0_t>:
//				OCR1A = value;
				pwmEx2_On(true);
			}
		}
//	}
}
    a2e0:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
    a2e2:	f640 30f4 	movw	r0, #3060	; 0xbf4
    a2e6:	f2c1 0000 	movt	r0, #4096	; 0x1000
    a2ea:	f04f 0100 	mov.w	r1, #0
    a2ee:	f007 fca5 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
    a2f2:	f640 30fc 	movw	r0, #3068	; 0xbfc
    a2f6:	f2c1 0000 	movt	r0, #4096	; 0x1000
    a2fa:	f04f 0101 	mov.w	r1, #1
    a2fe:	f007 fc9d 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
    a302:	f640 30f8 	movw	r0, #3064	; 0xbf8
    a306:	f2c1 0000 	movt	r0, #4096	; 0x1000
    a30a:	f04f 0102 	mov.w	r1, #2
    a30e:	f007 fc95 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
    a312:	f640 4004 	movw	r0, #3076	; 0xc04
    a316:	f2c1 0000 	movt	r0, #4096	; 0x1000
    a31a:	f04f 0103 	mov.w	r1, #3
    a31e:	f007 fc8d 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
    a322:	f640 4000 	movw	r0, #3072	; 0xc00
    a326:	f2c1 0000 	movt	r0, #4096	; 0x1000
    a32a:	f04f 0104 	mov.w	r1, #4
    a32e:	f007 fc85 	bl	11c3c <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
    a332:	f640 4408 	movw	r4, #3080	; 0xc08
    a336:	f2c1 0400 	movt	r4, #4096	; 0x1000
    a33a:	4620      	mov	r0, r4
    a33c:	f04f 01ff 	mov.w	r1, #255	; 0xff
    a340:	f007 fc7c 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
	};
	// currently not used:
	//const uint8_t getPinIndex() const { return pin_index; }
};

static const Pin NullPin(NullPort, 0);
    a344:	f640 400c 	movw	r0, #3084	; 0xc0c
    a348:	f2c1 0000 	movt	r0, #4096	; 0x1000
    a34c:	4621      	mov	r1, r4
    a34e:	f04f 0200 	mov.w	r2, #0
    a352:	f007 fe85 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    a356:	bd10      	pop	{r4, pc}

0000a358 <host::processCommandPacket(InPacket const&, OutPacket&)>:
/** Identify a command packet, and process it.  If the packet is a command
 * packet, return true, indicating that the packet has been queued and no
 * other processing needs to be done. Otherwise, processing of this packet
 * should drop through to the next processing level.
 */
bool processCommandPacket(const InPacket& from_host, OutPacket& to_host) {
    a358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a35a:	4604      	mov	r4, r0
    a35c:	460d      	mov	r5, r1
    a35e:	7803      	ldrb	r3, [r0, #0]
	if (from_host.getLength() >= 1) {
    a360:	2b00      	cmp	r3, #0
    a362:	d042      	beq.n	a3ea <host::processCommandPacket(InPacket const&, OutPacket&)+0x92>
		uint8_t command = from_host.read8(0);
    a364:	4606      	mov	r6, r0
    a366:	f04f 0100 	mov.w	r1, #0
    a36a:	f007 fd5f 	bl	11e2c <Packet::read8(unsigned char) const>
		if ((command & 0x80) != 0) {
    a36e:	f010 0f80 	tst.w	r0, #128	; 0x80
    a372:	d03d      	beq.n	a3f0 <host::processCommandPacket(InPacket const&, OutPacket&)+0x98>
			// If we're capturing a file to an SD card, we send it to the sdcard module
			// for processing.
			if (sdcard::isCapturing()) {
    a374:	f004 f87a 	bl	e46c <sdcard::isCapturing()>
    a378:	b150      	cbz	r0, a390 <host::processCommandPacket(InPacket const&, OutPacket&)+0x38>
				sdcard::capturePacket(from_host);
    a37a:	4620      	mov	r0, r4
    a37c:	f004 f87c 	bl	e478 <sdcard::capturePacket(Packet const&)>
				to_host.append8(RC_OK);
    a380:	4628      	mov	r0, r5
    a382:	f04f 0181 	mov.w	r1, #129	; 0x81
    a386:	f007 fda9 	bl	11edc <OutPacket::append8(unsigned char)>
				return true;
    a38a:	f04f 0001 	mov.w	r0, #1
    a38e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}
			if(sdcard::isPlaying() || utility::isPlaying()){
    a390:	f004 f866 	bl	e460 <sdcard::isPlaying()>
    a394:	b918      	cbnz	r0, a39e <host::processCommandPacket(InPacket const&, OutPacket&)+0x46>
    a396:	f006 fcb3 	bl	10d00 <utility::isPlaying()>
    a39a:	2800      	cmp	r0, #0
    a39c:	d02b      	beq.n	a3f6 <host::processCommandPacket(InPacket const&, OutPacket&)+0x9e>
				// ignore action commands if SD card build is playing
				// or if ONBOARD script is playing
				to_host.append8(RC_BOT_BUILDING);
    a39e:	4628      	mov	r0, r5
    a3a0:	f04f 018a 	mov.w	r1, #138	; 0x8a
    a3a4:	f007 fd9a 	bl	11edc <OutPacket::append8(unsigned char)>
				return true;
    a3a8:	f04f 0001 	mov.w	r0, #1
    a3ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			// Turn off interrupts while querying or manipulating the queue!
//			ATOMIC_BLOCK(ATOMIC_FORCEON) {
				const uint8_t command_length = from_host.getLength();
				if (command::getRemainingCapacity() >= command_length) {
					// Append command to buffer
					for (int i = 0; i < command_length; i++) {
    a3ae:	4627      	mov	r7, r4
    a3b0:	b15c      	cbz	r4, a3ca <host::processCommandPacket(InPacket const&, OutPacket&)+0x72>
    a3b2:	f04f 0400 	mov.w	r4, #0
						command::push(from_host.read8(i));
    a3b6:	4630      	mov	r0, r6
    a3b8:	b2e1      	uxtb	r1, r4
    a3ba:	f007 fd37 	bl	11e2c <Packet::read8(unsigned char) const>
    a3be:	f7fd ff85 	bl	82cc <command::push(unsigned char)>
			// Turn off interrupts while querying or manipulating the queue!
//			ATOMIC_BLOCK(ATOMIC_FORCEON) {
				const uint8_t command_length = from_host.getLength();
				if (command::getRemainingCapacity() >= command_length) {
					// Append command to buffer
					for (int i = 0; i < command_length; i++) {
    a3c2:	f104 0401 	add.w	r4, r4, #1
    a3c6:	42bc      	cmp	r4, r7
    a3c8:	dbf5      	blt.n	a3b6 <host::processCommandPacket(InPacket const&, OutPacket&)+0x5e>
						command::push(from_host.read8(i));
					}
					to_host.append8(RC_OK);
    a3ca:	4628      	mov	r0, r5
    a3cc:	f04f 0181 	mov.w	r1, #129	; 0x81
    a3d0:	f007 fd84 	bl	11edc <OutPacket::append8(unsigned char)>
				} else {
					to_host.append8(RC_BUFFER_OVERFLOW);
				}
//			}
			return true;
    a3d4:	f04f 0001 	mov.w	r0, #1
    a3d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					for (int i = 0; i < command_length; i++) {
						command::push(from_host.read8(i));
					}
					to_host.append8(RC_OK);
				} else {
					to_host.append8(RC_BUFFER_OVERFLOW);
    a3da:	4628      	mov	r0, r5
    a3dc:	f04f 0182 	mov.w	r1, #130	; 0x82
    a3e0:	f007 fd7c 	bl	11edc <OutPacket::append8(unsigned char)>
				}
//			}
			return true;
    a3e4:	f04f 0001 	mov.w	r0, #1
    a3e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	}
	return false;
    a3ea:	f04f 0000 	mov.w	r0, #0
    a3ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a3f0:	f04f 0000 	mov.w	r0, #0
}
    a3f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a3f6:	7824      	ldrb	r4, [r4, #0]
			
			// Queue command, if there's room.
			// Turn off interrupts while querying or manipulating the queue!
//			ATOMIC_BLOCK(ATOMIC_FORCEON) {
				const uint8_t command_length = from_host.getLength();
				if (command::getRemainingCapacity() >= command_length) {
    a3f8:	f7fd ff3e 	bl	8278 <command::getRemainingCapacity()>
    a3fc:	42a0      	cmp	r0, r4
    a3fe:	d2d6      	bcs.n	a3ae <host::processCommandPacket(InPacket const&, OutPacket&)+0x56>
    a400:	e7eb      	b.n	a3da <host::processCommandPacket(InPacket const&, OutPacket&)+0x82>
    a402:	bf00      	nop

0000a404 <host::heatShutdown()>:
	return false;
}

    // alert the host that the bot has had a heat failure
void heatShutdown(){
	currentState = HOST_STATE_HEAT_SHUTDOWN;
    a404:	f640 4368 	movw	r3, #3176	; 0xc68
    a408:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a40c:	f04f 0206 	mov.w	r2, #6
    a410:	701a      	strb	r2, [r3, #0]
	cancelBuild = true;
    a412:	f640 4394 	movw	r3, #3220	; 0xc94
    a416:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a41a:	f04f 0201 	mov.w	r2, #1
    a41e:	701a      	strb	r2, [r3, #0]
}
    a420:	4770      	bx	lr
    a422:	bf00      	nop

0000a424 <host::handleNextFilename(InPacket const&, OutPacket&)>:
	uint8_t response = startBuildFromSD();
	to_host.append8(response);
}

    // retrive SD file names
inline void handleNextFilename(const InPacket& from_host, OutPacket& to_host) {
    a424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a428:	af00      	add	r7, sp, #0
    a42a:	4604      	mov	r4, r0
    a42c:	460d      	mov	r5, r1
		e = sdcard::directoryNextEntry(fnbuf,MAX_FILE_LEN);
		if (fnbuf[0] == '\0') break;
	} while (e == sdcard::SD_SUCCESS && fnbuf[0] == '.');
	to_host.append8(e);
	uint8_t idx;
	for (idx = 0; (idx < MAX_FILE_LEN) && (fnbuf[idx] != 0); idx++) {
    a42e:	46e8      	mov	r8, sp
	to_host.append8(response);
}

    // retrive SD file names
inline void handleNextFilename(const InPacket& from_host, OutPacket& to_host) {
	to_host.append8(RC_OK);
    a430:	4608      	mov	r0, r1
    a432:	f04f 0181 	mov.w	r1, #129	; 0x81
    a436:	f007 fd51 	bl	11edc <OutPacket::append8(unsigned char)>
	uint8_t resetFlag = from_host.read8(1);
    a43a:	4620      	mov	r0, r4
    a43c:	f04f 0101 	mov.w	r1, #1
    a440:	f007 fcf4 	bl	11e2c <Packet::read8(unsigned char) const>
	if (resetFlag != 0) {
    a444:	b160      	cbz	r0, a460 <host::handleNextFilename(InPacket const&, OutPacket&)+0x3c>
		sdcard::SdErrorCode e = sdcard::directoryReset();
    a446:	f004 f99b 	bl	e780 <sdcard::directoryReset()>
		if (e != sdcard::SD_SUCCESS) {
    a44a:	4601      	mov	r1, r0
    a44c:	b140      	cbz	r0, a460 <host::handleNextFilename(InPacket const&, OutPacket&)+0x3c>
			to_host.append8(e);
    a44e:	4628      	mov	r0, r5
    a450:	f007 fd44 	bl	11edc <OutPacket::append8(unsigned char)>
			to_host.append8(0);
    a454:	4628      	mov	r0, r5
    a456:	f04f 0100 	mov.w	r1, #0
    a45a:	f007 fd3f 	bl	11edc <OutPacket::append8(unsigned char)>
    a45e:	e027      	b.n	a4b0 <host::handleNextFilename(InPacket const&, OutPacket&)+0x8c>
			return;
		}
	}
	int MAX_FILE_LEN = MAX_PACKET_PAYLOAD-1;
	char fnbuf[MAX_FILE_LEN];
    a460:	b08a      	sub	sp, #40	; 0x28
    a462:	466c      	mov	r4, sp
	sdcard::SdErrorCode e;
	// Ignore dot-files
	do {
		e = sdcard::directoryNextEntry(fnbuf,MAX_FILE_LEN);
    a464:	f04f 061f 	mov.w	r6, #31
    a468:	f04f 0900 	mov.w	r9, #0
    a46c:	4620      	mov	r0, r4
    a46e:	4631      	mov	r1, r6
    a470:	464a      	mov	r2, r9
    a472:	f003 ff53 	bl	e31c <sdcard::directoryNextEntry(char*, unsigned char, unsigned char*)>
    a476:	4601      	mov	r1, r0
		if (fnbuf[0] == '\0') break;
    a478:	7823      	ldrb	r3, [r4, #0]
    a47a:	b113      	cbz	r3, a482 <host::handleNextFilename(InPacket const&, OutPacket&)+0x5e>
	}
	int MAX_FILE_LEN = MAX_PACKET_PAYLOAD-1;
	char fnbuf[MAX_FILE_LEN];
	sdcard::SdErrorCode e;
	// Ignore dot-files
	do {
    a47c:	b908      	cbnz	r0, a482 <host::handleNextFilename(InPacket const&, OutPacket&)+0x5e>
    a47e:	2b2e      	cmp	r3, #46	; 0x2e
    a480:	d0f4      	beq.n	a46c <host::handleNextFilename(InPacket const&, OutPacket&)+0x48>
		e = sdcard::directoryNextEntry(fnbuf,MAX_FILE_LEN);
		if (fnbuf[0] == '\0') break;
	} while (e == sdcard::SD_SUCCESS && fnbuf[0] == '.');
	to_host.append8(e);
    a482:	4628      	mov	r0, r5
    a484:	f007 fd2a 	bl	11edc <OutPacket::append8(unsigned char)>
	uint8_t idx;
	for (idx = 0; (idx < MAX_FILE_LEN) && (fnbuf[idx] != 0); idx++) {
    a488:	f04f 0300 	mov.w	r3, #0
    a48c:	461e      	mov	r6, r3
    a48e:	5ce1      	ldrb	r1, [r4, r3]
    a490:	b141      	cbz	r1, a4a4 <host::handleNextFilename(InPacket const&, OutPacket&)+0x80>
		to_host.append8(fnbuf[idx]);
    a492:	4628      	mov	r0, r5
    a494:	f007 fd22 	bl	11edc <OutPacket::append8(unsigned char)>
		e = sdcard::directoryNextEntry(fnbuf,MAX_FILE_LEN);
		if (fnbuf[0] == '\0') break;
	} while (e == sdcard::SD_SUCCESS && fnbuf[0] == '.');
	to_host.append8(e);
	uint8_t idx;
	for (idx = 0; (idx < MAX_FILE_LEN) && (fnbuf[idx] != 0); idx++) {
    a498:	f106 0601 	add.w	r6, r6, #1
    a49c:	b2f6      	uxtb	r6, r6
    a49e:	4633      	mov	r3, r6
    a4a0:	2e1e      	cmp	r6, #30
    a4a2:	ddf4      	ble.n	a48e <host::handleNextFilename(InPacket const&, OutPacket&)+0x6a>
		to_host.append8(fnbuf[idx]);
	}
	to_host.append8(0);
    a4a4:	4628      	mov	r0, r5
    a4a6:	f04f 0100 	mov.w	r1, #0
    a4aa:	f007 fd17 	bl	11edc <OutPacket::append8(unsigned char)>
    a4ae:	46c5      	mov	sp, r8
}
    a4b0:	46bd      	mov	sp, r7
    a4b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a4b6:	bf00      	nop

0000a4b8 <host::handleReadEeprom(InPacket const&, OutPacket&)>:
		bool done = !steppers::isRunning() && command::isEmpty();
		to_host.append8(done?1:0);
//	}
}
    // read value from eeprom
inline void handleReadEeprom(const InPacket& from_host, OutPacket& to_host) {
    a4b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a4bc:	af00      	add	r7, sp, #0
    a4be:	4605      	mov	r5, r0
    a4c0:	460e      	mov	r6, r1
//	xprintf("handleReadEeprom" " (%s:%d)\n",_F_,_L_);
    uint16_t offset = from_host.read16(1);
    a4c2:	f04f 0101 	mov.w	r1, #1
    a4c6:	f007 fcb5 	bl	11e34 <Packet::read16(unsigned char) const>
    a4ca:	4604      	mov	r4, r0
    uint8_t length = from_host.read8(3);
    a4cc:	4628      	mov	r0, r5
    a4ce:	f04f 0103 	mov.w	r1, #3
    a4d2:	f007 fcab 	bl	11e2c <Packet::read8(unsigned char) const>
    a4d6:	4605      	mov	r5, r0
    uint8_t data[length];
    a4d8:	4680      	mov	r8, r0
    a4da:	f100 030e 	add.w	r3, r0, #14
    a4de:	f023 0307 	bic.w	r3, r3, #7
    a4e2:	ebad 0d03 	sub.w	sp, sp, r3
//    eeprom_read_block(data, (const void*) offset, length);
    to_host.append8(RC_OK);
    a4e6:	4630      	mov	r0, r6
    a4e8:	f04f 0181 	mov.w	r1, #129	; 0x81
    a4ec:	f007 fcf6 	bl	11edc <OutPacket::append8(unsigned char)>
    for (int i = 0; i < length; i++) {
    a4f0:	2d00      	cmp	r5, #0
    a4f2:	dd11      	ble.n	a518 <host::handleReadEeprom(InPacket const&, OutPacket&)+0x60>
    a4f4:	f04f 0500 	mov.w	r5, #0
		to_host.append8(eeprom::getEeprom8(offset + i,0));
    a4f8:	46a9      	mov	r9, r5
    a4fa:	4620      	mov	r0, r4
    a4fc:	4649      	mov	r1, r9
    a4fe:	f006 ff1f 	bl	11340 <eeprom::getEeprom8(unsigned short, unsigned char)>
    a502:	4601      	mov	r1, r0
    a504:	4630      	mov	r0, r6
    a506:	f007 fce9 	bl	11edc <OutPacket::append8(unsigned char)>
    uint16_t offset = from_host.read16(1);
    uint8_t length = from_host.read8(3);
    uint8_t data[length];
//    eeprom_read_block(data, (const void*) offset, length);
    to_host.append8(RC_OK);
    for (int i = 0; i < length; i++) {
    a50a:	f105 0501 	add.w	r5, r5, #1
    a50e:	f104 0401 	add.w	r4, r4, #1
    a512:	b2a4      	uxth	r4, r4
    a514:	45a8      	cmp	r8, r5
    a516:	dcf0      	bgt.n	a4fa <host::handleReadEeprom(InPacket const&, OutPacket&)+0x42>
		to_host.append8(eeprom::getEeprom8(offset + i,0));
//		to_host.append8(data[i]);
    }
}
    a518:	46bd      	mov	sp, r7
    a51a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a51e:	bf00      	nop

0000a520 <host::getHostState()>:
char* getBuildName() {
	return buildName;
}

HostState getHostState() {
	return currentState;
    a520:	f640 4368 	movw	r3, #3176	; 0xc68
    a524:	f2c1 0300 	movt	r3, #4096	; 0x1000
}
    a528:	7818      	ldrb	r0, [r3, #0]
    a52a:	4770      	bx	lr

0000a52c <host::startBuildFromSD()>:

sdcard::SdErrorCode startBuildFromSD() {
    a52c:	b538      	push	{r3, r4, r5, lr}
	sdcard::SdErrorCode e;

	// Attempt to start build
	e = sdcard::startPlayback(buildName);
    a52e:	f640 40e4 	movw	r0, #3300	; 0xce4
    a532:	f2c1 0000 	movt	r0, #4096	; 0x1000
    a536:	f004 f8b1 	bl	e69c <sdcard::startPlayback(char*)>
	if (e != sdcard::SD_SUCCESS) {
    a53a:	4604      	mov	r4, r0
    a53c:	b9f0      	cbnz	r0, a57c <host::startBuildFromSD()+0x50>
		// TODO: report error
		return e;
	}
	
	// clear heater temps
	Motherboard::getBoard().getPlatformHeater().set_target_temperature(0);
    a53e:	4d10      	ldr	r5, [pc, #64]	; (a580 <host::startBuildFromSD()+0x54>)
    a540:	4628      	mov	r0, r5
    a542:	f04f 0100 	mov.w	r1, #0
    a546:	f007 f885 	bl	11654 <Heater::set_target_temperature(int)>
	Motherboard::getBoard().getExtruderBoard(0).getExtruderHeater().set_target_temperature(0);
    a54a:	f5a5 70de 	sub.w	r0, r5, #444	; 0x1bc
    a54e:	f04f 0100 	mov.w	r1, #0
    a552:	f007 f87f 	bl	11654 <Heater::set_target_temperature(int)>
	Motherboard::getBoard().getExtruderBoard(1).getExtruderHeater().set_target_temperature(0);
    a556:	f1a5 00dc 	sub.w	r0, r5, #220	; 0xdc
    a55a:	f04f 0100 	mov.w	r1, #0
    a55e:	f007 f879 	bl	11654 <Heater::set_target_temperature(int)>
	
	command::reset();
    a562:	f7fe f8cd 	bl	8700 <command::reset()>
	steppers::reset();
    a566:	f004 fdc5 	bl	f0f4 <steppers::reset()>
	planner::abort();
    a56a:	f003 f873 	bl	d654 <planner::abort()>
	

	currentState = HOST_STATE_BUILDING_FROM_SD;
    a56e:	f640 4368 	movw	r3, #3176	; 0xc68
    a572:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a576:	f04f 0202 	mov.w	r2, #2
    a57a:	701a      	strb	r2, [r3, #0]

	return e;
}
    a57c:	4620      	mov	r0, r4
    a57e:	bd38      	pop	{r3, r4, r5, pc}
    a580:	10000fa8 	.word	0x10000fa8

0000a584 <host::pauseBuild(bool)>:
	do_host_reset = true; // indicate reset after response has been sent
	buildState = BUILD_CANCELED;
}

/// update state variables if print is paused
void pauseBuild(bool pause){
    a584:	b510      	push	{r4, lr}
    a586:	4604      	mov	r4, r0
	
	/// don't update time or state if we are already in the desired state
	if (!(pause == command::isPaused())){
    a588:	f7fd fe8e 	bl	82a8 <command::isPaused()>
    a58c:	42a0      	cmp	r0, r4
    a58e:	d022      	beq.n	a5d6 <host::pauseBuild(bool)+0x52>
		
		command::pause(pause);
    a590:	4620      	mov	r0, r4
    a592:	f7fd fe7b 	bl	828c <command::pause(bool)>
		if(pause){
    a596:	b17c      	cbz	r4, a5b8 <host::pauseBuild(bool)+0x34>
			buildState = BUILD_PAUSED;
    a598:	f640 43e0 	movw	r3, #3296	; 0xce0
    a59c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a5a0:	f04f 0203 	mov.w	r2, #3
    a5a4:	701a      	strb	r2, [r3, #0]
			print_time.pause(true);
    a5a6:	f640 409c 	movw	r0, #3228	; 0xc9c
    a5aa:	f2c1 0000 	movt	r0, #4096	; 0x1000
    a5ae:	f04f 0101 	mov.w	r1, #1
    a5b2:	f008 f92b 	bl	1280c <Timeout::pause(bool)>
    a5b6:	bd10      	pop	{r4, pc}
		}else{
			buildState = BUILD_RUNNING;
    a5b8:	f640 43e0 	movw	r3, #3296	; 0xce0
    a5bc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a5c0:	f04f 0201 	mov.w	r2, #1
    a5c4:	701a      	strb	r2, [r3, #0]
			print_time.pause(false);
    a5c6:	f640 409c 	movw	r0, #3228	; 0xc9c
    a5ca:	f2c1 0000 	movt	r0, #4096	; 0x1000
    a5ce:	f04f 0100 	mov.w	r1, #0
    a5d2:	f008 f91b 	bl	1280c <Timeout::pause(bool)>
    a5d6:	bd10      	pop	{r4, pc}

0000a5d8 <host::startPrintTime()>:
		}
	}
}

void startPrintTime(){
    a5d8:	b508      	push	{r3, lr}
	print_time.start(ONE_HOUR);
    a5da:	f640 409c 	movw	r0, #3228	; 0xc9c
    a5de:	f2c1 0000 	movt	r0, #4096	; 0x1000
    a5e2:	f44f 4124 	mov.w	r1, #41984	; 0xa400
    a5e6:	f2cd 6193 	movt	r1, #54931	; 0xd693
    a5ea:	f008 f8d9 	bl	127a0 <Timeout::start(unsigned long)>
	print_time_hours = 0;
    a5ee:	f640 5304 	movw	r3, #3332	; 0xd04
    a5f2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a5f6:	f04f 0200 	mov.w	r2, #0
    a5fa:	701a      	strb	r2, [r3, #0]
}
    a5fc:	bd08      	pop	{r3, pc}
    a5fe:	bf00      	nop

0000a600 <host::handleBuildStartNotification(CircularBufferTempl<unsigned char>&)>:
	to_host.append8(RC_OK);
	to_host.append8(0);
}

    //set build name and build state
void handleBuildStartNotification(CircularBuffer& buf) {
    a600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a604:	b088      	sub	sp, #32
	
	uint8_t idx = 0;
	char newName[MAX_FILE_LEN];
	switch (currentState){
    a606:	f640 4368 	movw	r3, #3176	; 0xc68
    a60a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a60e:	781b      	ldrb	r3, [r3, #0]
    a610:	2b05      	cmp	r3, #5
    a612:	f200 8085 	bhi.w	a720 <host::handleBuildStartNotification(CircularBufferTempl<unsigned char>&)+0x120>
    a616:	e8df f003 	tbb	[pc, r3]
    a61a:	4e47      	.short	0x4e47
    a61c:	4e838303 	.word	0x4e838303
    a620:	f04f 0300 	mov.w	r3, #0
		}
	}
	/// Pop a byte off the head of the buffer
	inline BufDataType pop() {
		if (isEmpty()) {
			underflow = true;
    a624:	f04f 0601 	mov.w	r6, #1
			return BufDataType();
    a628:	461d      	mov	r5, r3
		case HOST_STATE_BUILDING_FROM_SD:
			do {
				newName[idx++] = buf.pop();		
    a62a:	461c      	mov	r4, r3
		return size - length;
	}

	/// Check if the buffer is empty
	inline const bool isEmpty() const {
		return length == 0;
    a62c:	8842      	ldrh	r2, [r0, #2]
    a62e:	b292      	uxth	r2, r2
			overflow = true;
		}
	}
	/// Pop a byte off the head of the buffer
	inline BufDataType pop() {
		if (isEmpty()) {
    a630:	b912      	cbnz	r2, a638 <host::handleBuildStartNotification(CircularBufferTempl<unsigned char>&)+0x38>
			underflow = true;
    a632:	7346      	strb	r6, [r0, #13]
			return BufDataType();
    a634:	4629      	mov	r1, r5
    a636:	e01a      	b.n	a66e <host::handleBuildStartNotification(CircularBufferTempl<unsigned char>&)+0x6e>
	inline const bool isEmpty() const {
		return length == 0;
	}
	/// Read the buffer directly
	inline BufDataType& operator[](BufSizeType index) {
		const BufSizeType actual_index = (index + start) % size;
    a638:	8881      	ldrh	r1, [r0, #4]
    a63a:	b289      	uxth	r1, r1
    a63c:	8802      	ldrh	r2, [r0, #0]
    a63e:	fb91 f7f2 	sdiv	r7, r1, r2
    a642:	fb02 1117 	mls	r1, r2, r7, r1
		return data[actual_index];
    a646:	b28f      	uxth	r7, r1
    a648:	f8d0 e008 	ldr.w	lr, [r0, #8]
		if (isEmpty()) {
			underflow = true;
			return BufDataType();
		}
		const BufDataType& popped_byte = operator[](0);
		start = (start + 1) % size;
    a64c:	8881      	ldrh	r1, [r0, #4]
    a64e:	b289      	uxth	r1, r1
    a650:	f101 0101 	add.w	r1, r1, #1
    a654:	fb91 fcf2 	sdiv	ip, r1, r2
    a658:	fb02 121c 	mls	r2, r2, ip, r1
    a65c:	b292      	uxth	r2, r2
    a65e:	8082      	strh	r2, [r0, #4]
		length--;
    a660:	8842      	ldrh	r2, [r0, #2]
    a662:	f102 32ff 	add.w	r2, r2, #4294967295
    a666:	b292      	uxth	r2, r2
    a668:	8042      	strh	r2, [r0, #2]
		return popped_byte;
    a66a:	f81e 1007 	ldrb.w	r1, [lr, r7]
    a66e:	af08      	add	r7, sp, #32
    a670:	193a      	adds	r2, r7, r4
    a672:	f802 1c20 	strb.w	r1, [r2, #-32]
    a676:	f103 0301 	add.w	r3, r3, #1
    a67a:	b2db      	uxtb	r3, r3
			} while (newName[idx-1] != '\0');
    a67c:	18fa      	adds	r2, r7, r3
	
	uint8_t idx = 0;
	char newName[MAX_FILE_LEN];
	switch (currentState){
		case HOST_STATE_BUILDING_FROM_SD:
			do {
    a67e:	f812 2c21 	ldrb.w	r2, [r2, #-33]
    a682:	2a00      	cmp	r2, #0
    a684:	d1d1      	bne.n	a62a <host::handleBuildStartNotification(CircularBufferTempl<unsigned char>&)+0x2a>
				newName[idx++] = buf.pop();		
			} while (newName[idx-1] != '\0');
			if(strcmp(newName, "RepG Build"))
    a686:	4668      	mov	r0, sp
    a688:	f247 41d8 	movw	r1, #29912	; 0x74d8
    a68c:	f2c0 0102 	movt	r1, #2
    a690:	f016 fd38 	bl	21104 <strcmp>
    a694:	2800      	cmp	r0, #0
    a696:	d043      	beq.n	a720 <host::handleBuildStartNotification(CircularBufferTempl<unsigned char>&)+0x120>
				strcpy(buildName, newName);
    a698:	f640 40e4 	movw	r0, #3300	; 0xce4
    a69c:	f2c1 0000 	movt	r0, #4096	; 0x1000
    a6a0:	4669      	mov	r1, sp
    a6a2:	f016 fe1d 	bl	212e0 <strcpy>
    a6a6:	e03b      	b.n	a720 <host::handleBuildStartNotification(CircularBufferTempl<unsigned char>&)+0x120>
			break;
		case HOST_STATE_READY:
			currentState = HOST_STATE_BUILDING;
    a6a8:	f640 4368 	movw	r3, #3176	; 0xc68
    a6ac:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a6b0:	f04f 0201 	mov.w	r2, #1
    a6b4:	701a      	strb	r2, [r3, #0]
	}
	/// Pop a byte off the head of the buffer
	inline BufDataType pop() {
		if (isEmpty()) {
			underflow = true;
			return BufDataType();
    a6b6:	f04f 0300 	mov.w	r3, #0
		}
	}
	/// Pop a byte off the head of the buffer
	inline BufDataType pop() {
		if (isEmpty()) {
			underflow = true;
    a6ba:	f04f 0701 	mov.w	r7, #1
			return BufDataType();
    a6be:	461e      	mov	r6, r3
		case HOST_STATE_BUILDING_ONBOARD:
		case HOST_STATE_BUILDING:
			do {
				buildName[idx++] = buf.pop();		
    a6c0:	f640 41e4 	movw	r1, #3300	; 0xce4
    a6c4:	f2c1 0100 	movt	r1, #4096	; 0x1000
    a6c8:	461c      	mov	r4, r3
		return size - length;
	}

	/// Check if the buffer is empty
	inline const bool isEmpty() const {
		return length == 0;
    a6ca:	8842      	ldrh	r2, [r0, #2]
    a6cc:	b292      	uxth	r2, r2
			overflow = true;
		}
	}
	/// Pop a byte off the head of the buffer
	inline BufDataType pop() {
		if (isEmpty()) {
    a6ce:	b912      	cbnz	r2, a6d6 <host::handleBuildStartNotification(CircularBufferTempl<unsigned char>&)+0xd6>
			underflow = true;
    a6d0:	7347      	strb	r7, [r0, #13]
			return BufDataType();
    a6d2:	4632      	mov	r2, r6
    a6d4:	e01b      	b.n	a70e <host::handleBuildStartNotification(CircularBufferTempl<unsigned char>&)+0x10e>
	inline const bool isEmpty() const {
		return length == 0;
	}
	/// Read the buffer directly
	inline BufDataType& operator[](BufSizeType index) {
		const BufSizeType actual_index = (index + start) % size;
    a6d6:	8885      	ldrh	r5, [r0, #4]
    a6d8:	b2ad      	uxth	r5, r5
    a6da:	8802      	ldrh	r2, [r0, #0]
    a6dc:	fb95 fef2 	sdiv	lr, r5, r2
    a6e0:	fb02 551e 	mls	r5, r2, lr, r5
		return data[actual_index];
    a6e4:	fa1f fe85 	uxth.w	lr, r5
    a6e8:	f8d0 c008 	ldr.w	ip, [r0, #8]
		if (isEmpty()) {
			underflow = true;
			return BufDataType();
		}
		const BufDataType& popped_byte = operator[](0);
		start = (start + 1) % size;
    a6ec:	8885      	ldrh	r5, [r0, #4]
    a6ee:	b2ad      	uxth	r5, r5
    a6f0:	f105 0501 	add.w	r5, r5, #1
    a6f4:	fb95 f8f2 	sdiv	r8, r5, r2
    a6f8:	fb02 5218 	mls	r2, r2, r8, r5
    a6fc:	b292      	uxth	r2, r2
    a6fe:	8082      	strh	r2, [r0, #4]
		length--;
    a700:	8842      	ldrh	r2, [r0, #2]
    a702:	f102 32ff 	add.w	r2, r2, #4294967295
    a706:	b292      	uxth	r2, r2
    a708:	8042      	strh	r2, [r0, #2]
		return popped_byte;
    a70a:	f81c 200e 	ldrb.w	r2, [ip, lr]
    a70e:	550a      	strb	r2, [r1, r4]
    a710:	f103 0301 	add.w	r3, r3, #1
    a714:	b2db      	uxtb	r3, r3
			} while (buildName[idx-1] != '\0');
    a716:	18ca      	adds	r2, r1, r3
			break;
		case HOST_STATE_READY:
			currentState = HOST_STATE_BUILDING;
		case HOST_STATE_BUILDING_ONBOARD:
		case HOST_STATE_BUILDING:
			do {
    a718:	f812 2c01 	ldrb.w	r2, [r2, #-1]
    a71c:	2a00      	cmp	r2, #0
    a71e:	d1d3      	bne.n	a6c8 <host::handleBuildStartNotification(CircularBufferTempl<unsigned char>&)+0xc8>
				buildName[idx++] = buf.pop();		
			} while (buildName[idx-1] != '\0');
			break;
	}
	startPrintTime();
    a720:	f7ff ff5a 	bl	a5d8 <host::startPrintTime()>
	command::clearLineNumber();
    a724:	f7fe f81c 	bl	8760 <command::clearLineNumber()>
	buildState = BUILD_RUNNING;
    a728:	f640 43e0 	movw	r3, #3296	; 0xce0
    a72c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a730:	f04f 0201 	mov.w	r2, #1
    a734:	701a      	strb	r2, [r3, #0]
}
    a736:	b008      	add	sp, #32
    a738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a73c <host::managePrintTime()>:
	eeprom::updateBuildTime(last_print_hours, last_print_minutes);
	print_time = Timeout();
	print_time_hours = 0;
}

void managePrintTime(){
    a73c:	b508      	push	{r3, lr}

	/// print time is precise to the host loop frequency 
	if (print_time.hasElapsed()){
    a73e:	f640 409c 	movw	r0, #3228	; 0xc9c
    a742:	f2c1 0000 	movt	r0, #4096	; 0x1000
    a746:	f008 f83f 	bl	127c8 <Timeout::hasElapsed()>
    a74a:	b188      	cbz	r0, a770 <host::managePrintTime()+0x34>
		print_time.start(ONE_HOUR);
    a74c:	f640 409c 	movw	r0, #3228	; 0xc9c
    a750:	f2c1 0000 	movt	r0, #4096	; 0x1000
    a754:	f44f 4124 	mov.w	r1, #41984	; 0xa400
    a758:	f2cd 6193 	movt	r1, #54931	; 0xd693
    a75c:	f008 f820 	bl	127a0 <Timeout::start(unsigned long)>
		print_time_hours++;
    a760:	f640 5304 	movw	r3, #3332	; 0xd04
    a764:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a768:	781a      	ldrb	r2, [r3, #0]
    a76a:	f102 0201 	add.w	r2, r2, #1
    a76e:	701a      	strb	r2, [r3, #0]
    a770:	bd08      	pop	{r3, pc}
    a772:	bf00      	nop

0000a774 <host::getPrintTime(unsigned char&, unsigned char&)>:
	}
}

/// returns time hours and minutes since the start of the print
void getPrintTime(uint8_t& hours, uint8_t& minutes){
    a774:	b510      	push	{r4, lr}
    a776:	460c      	mov	r4, r1
        /// \return True if the timeout has elapsed.
	bool hasElapsed();

        ///
        /// \return True if the timeout is still running.
	bool isActive() const { return active; }
    a778:	f640 439c 	movw	r3, #3228	; 0xc9c
    a77c:	f2c1 0300 	movt	r3, #4096	; 0x1000
	
	if(!print_time.isActive()){
    a780:	781b      	ldrb	r3, [r3, #0]
    a782:	b963      	cbnz	r3, a79e <host::getPrintTime(unsigned char&, unsigned char&)+0x2a>
		hours = last_print_hours;
    a784:	f640 4374 	movw	r3, #3188	; 0xc74
    a788:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a78c:	781b      	ldrb	r3, [r3, #0]
    a78e:	7003      	strb	r3, [r0, #0]
		minutes = last_print_minutes;
    a790:	f640 43d5 	movw	r3, #3285	; 0xcd5
    a794:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a798:	781b      	ldrb	r3, [r3, #0]
    a79a:	700b      	strb	r3, [r1, #0]
    a79c:	bd10      	pop	{r4, pc}
	} else{
		hours = print_time_hours;
    a79e:	f640 5304 	movw	r3, #3332	; 0xd04
    a7a2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a7a6:	781b      	ldrb	r3, [r3, #0]
    a7a8:	7003      	strb	r3, [r0, #0]
		minutes = print_time.getCurrentElapsed() / 60000000;
    a7aa:	f640 409c 	movw	r0, #3228	; 0xc9c
    a7ae:	f2c1 0000 	movt	r0, #4096	; 0x1000
    a7b2:	f008 f847 	bl	12844 <Timeout::getCurrentElapsed()>
    a7b6:	ea4f 2010 	mov.w	r0, r0, lsr #8
    a7ba:	f245 43c7 	movw	r3, #21703	; 0x54c7
    a7be:	f2c0 131e 	movt	r3, #286	; 0x11e
    a7c2:	fba3 2300 	umull	r2, r3, r3, r0
    a7c6:	ea4f 2393 	mov.w	r3, r3, lsr #10
    a7ca:	7023      	strb	r3, [r4, #0]
    a7cc:	bd10      	pop	{r4, pc}
    a7ce:	bf00      	nop

0000a7d0 <host::stopPrintTime()>:
void startPrintTime(){
	print_time.start(ONE_HOUR);
	print_time_hours = 0;
}

void stopPrintTime(){
    a7d0:	b530      	push	{r4, r5, lr}
    a7d2:	b085      	sub	sp, #20
	
	getPrintTime(last_print_hours, last_print_minutes);
    a7d4:	f640 4574 	movw	r5, #3188	; 0xc74
    a7d8:	f2c1 0500 	movt	r5, #4096	; 0x1000
    a7dc:	f640 44d5 	movw	r4, #3285	; 0xcd5
    a7e0:	f2c1 0400 	movt	r4, #4096	; 0x1000
    a7e4:	4628      	mov	r0, r5
    a7e6:	4621      	mov	r1, r4
    a7e8:	f7ff ffc4 	bl	a774 <host::getPrintTime(unsigned char&, unsigned char&)>
	eeprom::updateBuildTime(last_print_hours, last_print_minutes);
    a7ec:	7828      	ldrb	r0, [r5, #0]
    a7ee:	7821      	ldrb	r1, [r4, #0]
    a7f0:	f7ff fba6 	bl	9f40 <eeprom::updateBuildTime(unsigned char, unsigned char)>
	print_time = Timeout();
    a7f4:	4668      	mov	r0, sp
    a7f6:	f007 ffcd 	bl	12794 <Timeout::Timeout()>
    a7fa:	f640 459c 	movw	r5, #3228	; 0xc9c
    a7fe:	f2c1 0500 	movt	r5, #4096	; 0x1000
    a802:	e89d 000f 	ldmia.w	sp, {r0, r1, r2, r3}
    a806:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	print_time_hours = 0;
    a80a:	f640 5304 	movw	r3, #3332	; 0xd04
    a80e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a812:	f04f 0200 	mov.w	r2, #0
    a816:	701a      	strb	r2, [r3, #0]
}
    a818:	b005      	add	sp, #20
    a81a:	bd30      	pop	{r4, r5, pc}

0000a81c <host::stopBuild()>:
	command::reset();
	planner::abort();
}

// Stop the current build, if any
void stopBuild() {
    a81c:	b508      	push	{r3, lr}
    // if building from repG, try to send a cancel msg to repG before reseting 
	if(currentState == HOST_STATE_BUILDING)
    a81e:	f640 4368 	movw	r3, #3176	; 0xc68
    a822:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a826:	781b      	ldrb	r3, [r3, #0]
    a828:	2b01      	cmp	r3, #1
    a82a:	d117      	bne.n	a85c <host::stopBuild()+0x40>
	{	
		currentState = HOST_STATE_CANCEL_BUILD;
    a82c:	f640 4368 	movw	r3, #3176	; 0xc68
    a830:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a834:	f04f 0204 	mov.w	r2, #4
    a838:	701a      	strb	r2, [r3, #0]
		cancel_timeout.start(1000000); //look for commands from repG for one second before resetting
    a83a:	f640 40c4 	movw	r0, #3268	; 0xcc4
    a83e:	f2c1 0000 	movt	r0, #4096	; 0x1000
    a842:	f244 2140 	movw	r1, #16960	; 0x4240
    a846:	f2c0 010f 	movt	r1, #15
    a84a:	f007 ffa9 	bl	127a0 <Timeout::start(unsigned long)>
		cancelBuild = true;
    a84e:	f640 4394 	movw	r3, #3220	; 0xc94
    a852:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a856:	f04f 0201 	mov.w	r2, #1
    a85a:	701a      	strb	r2, [r3, #0]
	}
	last_print_line = command::getLineNumber();
    a85c:	f7fd ff7a 	bl	8754 <command::getLineNumber()>
    a860:	f640 436c 	movw	r3, #3180	; 0xc6c
    a864:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a868:	6018      	str	r0, [r3, #0]
	stopPrintTime();
    a86a:	f7ff ffb1 	bl	a7d0 <host::stopPrintTime()>
	do_host_reset = true; // indicate reset after response has been sent
    a86e:	f640 4380 	movw	r3, #3200	; 0xc80
    a872:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a876:	f04f 0201 	mov.w	r2, #1
    a87a:	701a      	strb	r2, [r3, #0]
	buildState = BUILD_CANCELED;
    a87c:	f640 43e0 	movw	r3, #3296	; 0xce0
    a880:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a884:	f04f 0204 	mov.w	r2, #4
    a888:	701a      	strb	r2, [r3, #0]
}
    a88a:	bd08      	pop	{r3, pc}

0000a88c <host::handleBuildStopNotification(unsigned char)>:
	command::clearLineNumber();
	buildState = BUILD_RUNNING;
}

    // set build state to ready
void handleBuildStopNotification(uint8_t stopFlags) {
    a88c:	b508      	push	{r3, lr}
	uint8_t flags = stopFlags;

	stopPrintTime();
    a88e:	f7ff ff9f 	bl	a7d0 <host::stopPrintTime()>
	last_print_line = command::getLineNumber();
    a892:	f7fd ff5f 	bl	8754 <command::getLineNumber()>
    a896:	f640 436c 	movw	r3, #3180	; 0xc6c
    a89a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a89e:	6018      	str	r0, [r3, #0]
	buildState = BUILD_FINISHED_NORMALLY;
    a8a0:	f640 43e0 	movw	r3, #3296	; 0xce0
    a8a4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a8a8:	f04f 0202 	mov.w	r2, #2
    a8ac:	701a      	strb	r2, [r3, #0]
	currentState = HOST_STATE_READY;
    a8ae:	f640 4368 	movw	r3, #3176	; 0xc68
    a8b2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a8b6:	f04f 0200 	mov.w	r2, #0
    a8ba:	701a      	strb	r2, [r3, #0]
}
    a8bc:	bd08      	pop	{r3, pc}
    a8be:	bf00      	nop

0000a8c0 <host::processExtruderQueryPacket(InPacket const&, OutPacket&)>:
	}
	return;
}

    // legacy tool / motherboard breakout of query commands
bool processExtruderQueryPacket(const InPacket& from_host, OutPacket& to_host) {
    a8c0:	b570      	push	{r4, r5, r6, lr}
    a8c2:	4604      	mov	r4, r0
    a8c4:	460d      	mov	r5, r1
    a8c6:	7803      	ldrb	r3, [r0, #0]
	Motherboard& board = Motherboard::getBoard();
	if (from_host.getLength() >= 1) {
    a8c8:	2b00      	cmp	r3, #0
    a8ca:	f000 811c 	beq.w	ab06 <host::processExtruderQueryPacket(InPacket const&, OutPacket&)+0x246>
			
        uint8_t	id = from_host.read8(1);
    a8ce:	f04f 0101 	mov.w	r1, #1
    a8d2:	f007 faab 	bl	11e2c <Packet::read8(unsigned char) const>
    a8d6:	4606      	mov	r6, r0
		uint8_t command = from_host.read8(2);
    a8d8:	4620      	mov	r0, r4
    a8da:	f04f 0102 	mov.w	r1, #2
    a8de:	f007 faa5 	bl	11e2c <Packet::read8(unsigned char) const>
		// All commands are query commands.	
		switch (command) {
    a8e2:	2825      	cmp	r0, #37	; 0x25
    a8e4:	f200 8112 	bhi.w	ab0c <host::processExtruderQueryPacket(InPacket const&, OutPacket&)+0x24c>
    a8e8:	e8df f010 	tbh	[pc, r0, lsl #1]
    a8ec:	01100026 	.word	0x01100026
    a8f0:	01100033 	.word	0x01100033
    a8f4:	01100110 	.word	0x01100110
    a8f8:	01100110 	.word	0x01100110
    a8fc:	01100110 	.word	0x01100110
    a900:	01100110 	.word	0x01100110
    a904:	01100110 	.word	0x01100110
    a908:	01100110 	.word	0x01100110
    a90c:	01100110 	.word	0x01100110
    a910:	01100110 	.word	0x01100110
    a914:	01100110 	.word	0x01100110
    a918:	01100049 	.word	0x01100049
    a91c:	01100110 	.word	0x01100110
    a920:	01100110 	.word	0x01100110
    a924:	01100110 	.word	0x01100110
    a928:	0110005f 	.word	0x0110005f
    a92c:	0084006e 	.word	0x0084006e
    a930:	00930110 	.word	0x00930110
    a934:	00d400a2 	.word	0x00d400a2
		case SLAVE_CMD_VERSION:
			to_host.append8(RC_OK);
    a938:	4628      	mov	r0, r5
    a93a:	f04f 0181 	mov.w	r1, #129	; 0x81
    a93e:	f007 facd 	bl	11edc <OutPacket::append8(unsigned char)>
			to_host.append16(firmware_version);
    a942:	4628      	mov	r0, r5
    a944:	f240 212a 	movw	r1, #554	; 0x22a
    a948:	f007 facc 	bl	11ee4 <OutPacket::append16(unsigned short)>
			return true;
    a94c:	f04f 0001 	mov.w	r0, #1
    a950:	bd70      	pop	{r4, r5, r6, pc}
		case SLAVE_CMD_GET_TEMP:
//			xprintf("SLAVE_CMD_GET_TEMP" " (%s:%d)\n",_F_,_L_);
			to_host.append8(RC_OK);
    a952:	4628      	mov	r0, r5
    a954:	f04f 0181 	mov.w	r1, #129	; 0x81
    a958:	f007 fac0 	bl	11edc <OutPacket::append8(unsigned char)>
    a95c:	4b7a      	ldr	r3, [pc, #488]	; (ab48 <host::processExtruderQueryPacket(InPacket const&, OutPacket&)+0x288>)
    a95e:	f1a3 00e0 	sub.w	r0, r3, #224	; 0xe0
    a962:	2e01      	cmp	r6, #1
    a964:	bf08      	it	eq
    a966:	4618      	moveq	r0, r3
			to_host.append16(board.getExtruderBoard(id).getExtruderHeater().get_current_temperature());
    a968:	f100 0028 	add.w	r0, r0, #40	; 0x28
    a96c:	f006 feee 	bl	1174c <Heater::get_current_temperature()>
    a970:	b281      	uxth	r1, r0
    a972:	4628      	mov	r0, r5
    a974:	f007 fab6 	bl	11ee4 <OutPacket::append16(unsigned short)>
			return true;
    a978:	f04f 0001 	mov.w	r0, #1
    a97c:	bd70      	pop	{r4, r5, r6, pc}
		case SLAVE_CMD_IS_TOOL_READY:
			to_host.append8(RC_OK);
    a97e:	4628      	mov	r0, r5
    a980:	f04f 0181 	mov.w	r1, #129	; 0x81
    a984:	f007 faaa 	bl	11edc <OutPacket::append8(unsigned char)>
    a988:	4b6f      	ldr	r3, [pc, #444]	; (ab48 <host::processExtruderQueryPacket(InPacket const&, OutPacket&)+0x288>)
    a98a:	f1a3 00e0 	sub.w	r0, r3, #224	; 0xe0
    a98e:	2e01      	cmp	r6, #1
    a990:	bf08      	it	eq
    a992:	4618      	moveq	r0, r3
			to_host.append8(board.getExtruderBoard(id).getExtruderHeater().has_reached_target_temperature()?1:0);
    a994:	f100 0028 	add.w	r0, r0, #40	; 0x28
    a998:	f006 feba 	bl	11710 <Heater::has_reached_target_temperature()>
    a99c:	4601      	mov	r1, r0
    a99e:	4628      	mov	r0, r5
    a9a0:	f007 fa9c 	bl	11edc <OutPacket::append8(unsigned char)>
			return true;
    a9a4:	f04f 0001 	mov.w	r0, #1
    a9a8:	bd70      	pop	{r4, r5, r6, pc}
		case SLAVE_CMD_GET_PLATFORM_TEMP:
//			xprintf("SLAVE_CMD_GET_PLATFORM_TEMP" " (%s:%d)\n",_F_,_L_);
			to_host.append8(RC_OK);
    a9aa:	4628      	mov	r0, r5
    a9ac:	f04f 0181 	mov.w	r1, #129	; 0x81
    a9b0:	f007 fa94 	bl	11edc <OutPacket::append8(unsigned char)>
			to_host.append16(board.getPlatformHeater().get_current_temperature());
    a9b4:	4865      	ldr	r0, [pc, #404]	; (ab4c <host::processExtruderQueryPacket(InPacket const&, OutPacket&)+0x28c>)
    a9b6:	f006 fec9 	bl	1174c <Heater::get_current_temperature()>
    a9ba:	b281      	uxth	r1, r0
    a9bc:	4628      	mov	r0, r5
    a9be:	f007 fa91 	bl	11ee4 <OutPacket::append16(unsigned short)>
			return true;
    a9c2:	f04f 0001 	mov.w	r0, #1
    a9c6:	bd70      	pop	{r4, r5, r6, pc}
		case SLAVE_CMD_GET_SP:
			to_host.append8(RC_OK);
    a9c8:	4628      	mov	r0, r5
    a9ca:	f04f 0181 	mov.w	r1, #129	; 0x81
    a9ce:	f007 fa85 	bl	11edc <OutPacket::append8(unsigned char)>
    a9d2:	4b5d      	ldr	r3, [pc, #372]	; (ab48 <host::processExtruderQueryPacket(InPacket const&, OutPacket&)+0x288>)
    a9d4:	f1a3 00e0 	sub.w	r0, r3, #224	; 0xe0
    a9d8:	2e01      	cmp	r6, #1
    a9da:	bf08      	it	eq
    a9dc:	4618      	moveq	r0, r3
			to_host.append16(board.getExtruderBoard(id).getExtruderHeater().get_set_temperature());
    a9de:	f100 0028 	add.w	r0, r0, #40	; 0x28
    a9e2:	f006 feb1 	bl	11748 <Heater::get_set_temperature()>
    a9e6:	b281      	uxth	r1, r0
    a9e8:	4628      	mov	r0, r5
    a9ea:	f007 fa7b 	bl	11ee4 <OutPacket::append16(unsigned short)>
			return true;
    a9ee:	f04f 0001 	mov.w	r0, #1
    a9f2:	bd70      	pop	{r4, r5, r6, pc}
		case SLAVE_CMD_GET_PLATFORM_SP:
			to_host.append8(RC_OK);
    a9f4:	4628      	mov	r0, r5
    a9f6:	f04f 0181 	mov.w	r1, #129	; 0x81
    a9fa:	f007 fa6f 	bl	11edc <OutPacket::append8(unsigned char)>
			to_host.append16(board.getPlatformHeater().get_set_temperature());
    a9fe:	4853      	ldr	r0, [pc, #332]	; (ab4c <host::processExtruderQueryPacket(InPacket const&, OutPacket&)+0x28c>)
    aa00:	f006 fea2 	bl	11748 <Heater::get_set_temperature()>
    aa04:	b281      	uxth	r1, r0
    aa06:	4628      	mov	r0, r5
    aa08:	f007 fa6c 	bl	11ee4 <OutPacket::append16(unsigned short)>
			return true;
    aa0c:	f04f 0001 	mov.w	r0, #1
    aa10:	bd70      	pop	{r4, r5, r6, pc}
		case SLAVE_CMD_IS_PLATFORM_READY:
			to_host.append8(RC_OK);
    aa12:	4628      	mov	r0, r5
    aa14:	f04f 0181 	mov.w	r1, #129	; 0x81
    aa18:	f007 fa60 	bl	11edc <OutPacket::append8(unsigned char)>
			to_host.append8(board.getPlatformHeater().has_reached_target_temperature()?1:0);
    aa1c:	484b      	ldr	r0, [pc, #300]	; (ab4c <host::processExtruderQueryPacket(InPacket const&, OutPacket&)+0x28c>)
    aa1e:	f006 fe77 	bl	11710 <Heater::has_reached_target_temperature()>
    aa22:	4601      	mov	r1, r0
    aa24:	4628      	mov	r0, r5
    aa26:	f007 fa59 	bl	11edc <OutPacket::append8(unsigned char)>
			return true;
    aa2a:	f04f 0001 	mov.w	r0, #1
    aa2e:	bd70      	pop	{r4, r5, r6, pc}
		case SLAVE_CMD_GET_TOOL_STATUS:
			to_host.append8(RC_OK);
    aa30:	4628      	mov	r0, r5
    aa32:	f04f 0181 	mov.w	r1, #129	; 0x81
    aa36:	f007 fa51 	bl	11edc <OutPacket::append8(unsigned char)>
    aa3a:	4b43      	ldr	r3, [pc, #268]	; (ab48 <host::processExtruderQueryPacket(InPacket const&, OutPacket&)+0x288>)
    aa3c:	f1a3 00e0 	sub.w	r0, r3, #224	; 0xe0
    aa40:	2e01      	cmp	r6, #1
    aa42:	bf08      	it	eq
    aa44:	4618      	moveq	r0, r3
			to_host.append8((board.getExtruderBoard(id).getExtruderHeater().has_failed()?128:0)
    aa46:	f100 0028 	add.w	r0, r0, #40	; 0x28
    aa4a:	f006 fff9 	bl	11a40 <Heater::has_failed()>
							| (board.getPlatformHeater().has_failed()?64:0)
							| (board.getExtruderBoard(id).getExtruderHeater().GetFailMode())
							| (board.getExtruderBoard(id).getExtruderHeater().has_reached_target_temperature()?1:0));
    aa4e:	2800      	cmp	r0, #0
    aa50:	bf14      	ite	ne
    aa52:	2480      	movne	r4, #128	; 0x80
    aa54:	2400      	moveq	r4, #0
			to_host.append8(board.getPlatformHeater().has_reached_target_temperature()?1:0);
			return true;
		case SLAVE_CMD_GET_TOOL_STATUS:
			to_host.append8(RC_OK);
			to_host.append8((board.getExtruderBoard(id).getExtruderHeater().has_failed()?128:0)
							| (board.getPlatformHeater().has_failed()?64:0)
    aa56:	483d      	ldr	r0, [pc, #244]	; (ab4c <host::processExtruderQueryPacket(InPacket const&, OutPacket&)+0x28c>)
    aa58:	f006 fff2 	bl	11a40 <Heater::has_failed()>
							| (board.getExtruderBoard(id).getExtruderHeater().GetFailMode())
							| (board.getExtruderBoard(id).getExtruderHeater().has_reached_target_temperature()?1:0));
    aa5c:	2800      	cmp	r0, #0
    aa5e:	bf14      	ite	ne
    aa60:	2040      	movne	r0, #64	; 0x40
    aa62:	2000      	moveq	r0, #0
    aa64:	4304      	orrs	r4, r0
    aa66:	2e01      	cmp	r6, #1
    aa68:	d153      	bne.n	ab12 <host::processExtruderQueryPacket(InPacket const&, OutPacket&)+0x252>
			return true;
		case SLAVE_CMD_GET_TOOL_STATUS:
			to_host.append8(RC_OK);
			to_host.append8((board.getExtruderBoard(id).getExtruderHeater().has_failed()?128:0)
							| (board.getPlatformHeater().has_failed()?64:0)
							| (board.getExtruderBoard(id).getExtruderHeater().GetFailMode())
    aa6a:	4e39      	ldr	r6, [pc, #228]	; (ab50 <host::processExtruderQueryPacket(InPacket const&, OutPacket&)+0x290>)
    aa6c:	4630      	mov	r0, r6
    aa6e:	f006 ffeb 	bl	11a48 <Heater::GetFailMode()>
							| (board.getExtruderBoard(id).getExtruderHeater().has_reached_target_temperature()?1:0));
    aa72:	4304      	orrs	r4, r0
    aa74:	b2e4      	uxtb	r4, r4
    aa76:	f1a6 0028 	sub.w	r0, r6, #40	; 0x28
    aa7a:	f100 0028 	add.w	r0, r0, #40	; 0x28
    aa7e:	f006 fe47 	bl	11710 <Heater::has_reached_target_temperature()>
    aa82:	ea40 0104 	orr.w	r1, r0, r4
    aa86:	4628      	mov	r0, r5
    aa88:	b2c9      	uxtb	r1, r1
    aa8a:	f007 fa27 	bl	11edc <OutPacket::append8(unsigned char)>
			return true;
    aa8e:	f04f 0001 	mov.w	r0, #1
    aa92:	bd70      	pop	{r4, r5, r6, pc}
		case SLAVE_CMD_GET_PID_STATE:
			to_host.append8(RC_OK);
    aa94:	4628      	mov	r0, r5
    aa96:	f04f 0181 	mov.w	r1, #129	; 0x81
    aa9a:	f007 fa1f 	bl	11edc <OutPacket::append8(unsigned char)>
    aa9e:	2e01      	cmp	r6, #1
    aaa0:	d140      	bne.n	ab24 <host::processExtruderQueryPacket(InPacket const&, OutPacket&)+0x264>
			to_host.append16(board.getExtruderBoard(id).getExtruderHeater().getPIDErrorTerm());
    aaa2:	4c2b      	ldr	r4, [pc, #172]	; (ab50 <host::processExtruderQueryPacket(InPacket const&, OutPacket&)+0x290>)
    aaa4:	4620      	mov	r0, r4
    aaa6:	f006 fe55 	bl	11754 <Heater::getPIDErrorTerm()>
    aaaa:	b281      	uxth	r1, r0
    aaac:	4628      	mov	r0, r5
    aaae:	f007 fa19 	bl	11ee4 <OutPacket::append16(unsigned short)>
			to_host.append16(board.getExtruderBoard(id).getExtruderHeater().getPIDDeltaTerm());
    aab2:	4620      	mov	r0, r4
    aab4:	f006 fe54 	bl	11760 <Heater::getPIDDeltaTerm()>
    aab8:	b281      	uxth	r1, r0
    aaba:	4628      	mov	r0, r5
    aabc:	f007 fa12 	bl	11ee4 <OutPacket::append16(unsigned short)>
    aac0:	f1a4 0028 	sub.w	r0, r4, #40	; 0x28
			to_host.append16(board.getExtruderBoard(id).getExtruderHeater().getPIDLastOutput());
    aac4:	f100 0028 	add.w	r0, r0, #40	; 0x28
    aac8:	f006 fe50 	bl	1176c <Heater::getPIDLastOutput()>
    aacc:	b281      	uxth	r1, r0
    aace:	4628      	mov	r0, r5
    aad0:	f007 fa08 	bl	11ee4 <OutPacket::append16(unsigned short)>
			to_host.append16(board.getPlatformHeater().getPIDErrorTerm());
    aad4:	4c1d      	ldr	r4, [pc, #116]	; (ab4c <host::processExtruderQueryPacket(InPacket const&, OutPacket&)+0x28c>)
    aad6:	4620      	mov	r0, r4
    aad8:	f006 fe3c 	bl	11754 <Heater::getPIDErrorTerm()>
    aadc:	b281      	uxth	r1, r0
    aade:	4628      	mov	r0, r5
    aae0:	f007 fa00 	bl	11ee4 <OutPacket::append16(unsigned short)>
			to_host.append16(board.getPlatformHeater().getPIDDeltaTerm());
    aae4:	4620      	mov	r0, r4
    aae6:	f006 fe3b 	bl	11760 <Heater::getPIDDeltaTerm()>
    aaea:	b281      	uxth	r1, r0
    aaec:	4628      	mov	r0, r5
    aaee:	f007 f9f9 	bl	11ee4 <OutPacket::append16(unsigned short)>
			to_host.append16(board.getPlatformHeater().getPIDLastOutput());
    aaf2:	4620      	mov	r0, r4
    aaf4:	f006 fe3a 	bl	1176c <Heater::getPIDLastOutput()>
    aaf8:	b281      	uxth	r1, r0
    aafa:	4628      	mov	r0, r5
    aafc:	f007 f9f2 	bl	11ee4 <OutPacket::append16(unsigned short)>
			return true;
    ab00:	f04f 0001 	mov.w	r0, #1
    ab04:	bd70      	pop	{r4, r5, r6, pc}
		}
	}
	return false;
    ab06:	f04f 0000 	mov.w	r0, #0
    ab0a:	bd70      	pop	{r4, r5, r6, pc}
    ab0c:	f04f 0000 	mov.w	r0, #0
}
    ab10:	bd70      	pop	{r4, r5, r6, pc}
			return true;
		case SLAVE_CMD_GET_TOOL_STATUS:
			to_host.append8(RC_OK);
			to_host.append8((board.getExtruderBoard(id).getExtruderHeater().has_failed()?128:0)
							| (board.getPlatformHeater().has_failed()?64:0)
							| (board.getExtruderBoard(id).getExtruderHeater().GetFailMode())
    ab12:	4e10      	ldr	r6, [pc, #64]	; (ab54 <host::processExtruderQueryPacket(InPacket const&, OutPacket&)+0x294>)
    ab14:	4630      	mov	r0, r6
    ab16:	f006 ff97 	bl	11a48 <Heater::GetFailMode()>
							| (board.getExtruderBoard(id).getExtruderHeater().has_reached_target_temperature()?1:0));
    ab1a:	4304      	orrs	r4, r0
    ab1c:	b2e4      	uxtb	r4, r4
    ab1e:	f1a6 0028 	sub.w	r0, r6, #40	; 0x28
    ab22:	e7aa      	b.n	aa7a <host::processExtruderQueryPacket(InPacket const&, OutPacket&)+0x1ba>
			return true;
		case SLAVE_CMD_GET_PID_STATE:
			to_host.append8(RC_OK);
			to_host.append16(board.getExtruderBoard(id).getExtruderHeater().getPIDErrorTerm());
    ab24:	4c0b      	ldr	r4, [pc, #44]	; (ab54 <host::processExtruderQueryPacket(InPacket const&, OutPacket&)+0x294>)
    ab26:	4620      	mov	r0, r4
    ab28:	f006 fe14 	bl	11754 <Heater::getPIDErrorTerm()>
    ab2c:	b281      	uxth	r1, r0
    ab2e:	4628      	mov	r0, r5
    ab30:	f007 f9d8 	bl	11ee4 <OutPacket::append16(unsigned short)>
			to_host.append16(board.getExtruderBoard(id).getExtruderHeater().getPIDDeltaTerm());
    ab34:	4620      	mov	r0, r4
    ab36:	f006 fe13 	bl	11760 <Heater::getPIDDeltaTerm()>
    ab3a:	b281      	uxth	r1, r0
    ab3c:	4628      	mov	r0, r5
    ab3e:	f007 f9d1 	bl	11ee4 <OutPacket::append16(unsigned short)>
    ab42:	f1a4 0028 	sub.w	r0, r4, #40	; 0x28
    ab46:	e7bd      	b.n	aac4 <host::processExtruderQueryPacket(InPacket const&, OutPacket&)+0x204>
    ab48:	10000ea4 	.word	0x10000ea4
    ab4c:	10000fa8 	.word	0x10000fa8
    ab50:	10000ecc 	.word	0x10000ecc
    ab54:	10000dec 	.word	0x10000dec

0000ab58 <host::processQueryPacket(InPacket const&, OutPacket&)>:
	to_host.append8(RC_OK);
	to_host.append8(board.GetErrorStatus());
}

// query packets (non action, not queued)
bool processQueryPacket(const InPacket& from_host, OutPacket& to_host) {
    ab58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ab5c:	b086      	sub	sp, #24
    ab5e:	4604      	mov	r4, r0
    ab60:	460e      	mov	r6, r1
    ab62:	7803      	ldrb	r3, [r0, #0]
	if (from_host.getLength() >= 1) {
    ab64:	2b00      	cmp	r3, #0
    ab66:	f000 824c 	beq.w	b002 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4aa>
		uint8_t command = from_host.read8(0);
    ab6a:	4607      	mov	r7, r0
    ab6c:	f04f 0100 	mov.w	r1, #0
    ab70:	f007 f95c 	bl	11e2c <Packet::read8(unsigned char) const>
		if ((command & 0x80) == 0) {
    ab74:	f010 0f80 	tst.w	r0, #128	; 0x80
				handleGetAdvancedVersion(from_host, to_host);
				return true;
			}
		}
	}
	return false;
    ab78:	bf18      	it	ne
    ab7a:	2000      	movne	r0, #0

// query packets (non action, not queued)
bool processQueryPacket(const InPacket& from_host, OutPacket& to_host) {
	if (from_host.getLength() >= 1) {
		uint8_t command = from_host.read8(0);
		if ((command & 0x80) == 0) {
    ab7c:	f040 8249 	bne.w	b012 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ba>
			// Is query command.
			switch (command) {
    ab80:	281b      	cmp	r0, #27
    ab82:	f200 8241 	bhi.w	b008 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4b0>
    ab86:	e8df f010 	tbh	[pc, r0, lsl #1]
    ab8a:	001c      	.short	0x001c
    ab8c:	00850056 	.word	0x00850056
    ab90:	0093005e 	.word	0x0093005e
    ab94:	023f023f 	.word	0x023f023f
    ab98:	014b005e 	.word	0x014b005e
    ab9c:	015a023f 	.word	0x015a023f
    aba0:	0174015f 	.word	0x0174015f
    aba4:	00fd017b 	.word	0x00fd017b
    aba8:	011d010d 	.word	0x011d010d
    abac:	0144005e 	.word	0x0144005e
    abb0:	003d023f 	.word	0x003d023f
    abb4:	01ad00bf 	.word	0x01ad00bf
    abb8:	01dc01ca 	.word	0x01dc01ca
    abbc:	023f023f 	.word	0x023f023f
    abc0:	021b      	.short	0x021b
// Received driver version info, and request for fw version info.
// puts fw version into a reply packet, and send it back
inline void handleVersion(const InPacket& from_host, OutPacket& to_host) {

    // Case to give an error on Replicator G versions older than 0025. See footnote 1
    if(from_host.read16(1)  <=  25   ) {
    abc2:	4620      	mov	r0, r4
    abc4:	f04f 0101 	mov.w	r1, #1
    abc8:	f007 f934 	bl	11e34 <Packet::read16(unsigned char) const>
    abcc:	2819      	cmp	r0, #25
    abce:	d80c      	bhi.n	abea <host::processQueryPacket(InPacket const&, OutPacket&)+0x92>
        to_host.append8(RC_OK);
    abd0:	4630      	mov	r0, r6
    abd2:	f04f 0181 	mov.w	r1, #129	; 0x81
    abd6:	f007 f981 	bl	11edc <OutPacket::append8(unsigned char)>
        to_host.append16(0x0000);
    abda:	4630      	mov	r0, r6
    abdc:	f04f 0100 	mov.w	r1, #0
    abe0:	f007 f980 	bl	11ee4 <OutPacket::append16(unsigned short)>
		if ((command & 0x80) == 0) {
			// Is query command.
			switch (command) {
			case HOST_CMD_VERSION:
				handleVersion(from_host,to_host);
				return true;
    abe4:	f04f 0001 	mov.w	r0, #1
    abe8:	e213      	b.n	b012 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ba>
    if(from_host.read16(1)  <=  25   ) {
        to_host.append8(RC_OK);
        to_host.append16(0x0000);
    }
    else  {
        to_host.append8(RC_OK);
    abea:	4630      	mov	r0, r6
    abec:	f04f 0181 	mov.w	r1, #129	; 0x81
    abf0:	f007 f974 	bl	11edc <OutPacket::append8(unsigned char)>
        to_host.append16(firmware_version);
    abf4:	4630      	mov	r0, r6
    abf6:	f240 212a 	movw	r1, #554	; 0x22a
    abfa:	f007 f973 	bl	11ee4 <OutPacket::append16(unsigned short)>
		if ((command & 0x80) == 0) {
			// Is query command.
			switch (command) {
			case HOST_CMD_VERSION:
				handleVersion(from_host,to_host);
				return true;
    abfe:	f04f 0001 	mov.w	r0, #1
    ac02:	e206      	b.n	b012 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ba>

}

    // return build name
inline void handleGetBuildName(const InPacket& from_host, OutPacket& to_host) {
	to_host.append8(RC_OK);
    ac04:	4630      	mov	r0, r6
    ac06:	f04f 0181 	mov.w	r1, #129	; 0x81
    ac0a:	f007 f967 	bl	11edc <OutPacket::append8(unsigned char)>
    ac0e:	f640 44e4 	movw	r4, #3300	; 0xce4
    ac12:	f2c1 0400 	movt	r4, #4096	; 0x1000
	to_host.append8(RC_OK);
	to_host.append8(board.GetErrorStatus());
}

// query packets (non action, not queued)
bool processQueryPacket(const InPacket& from_host, OutPacket& to_host) {
    ac16:	f104 051f 	add.w	r5, r4, #31

    // return build name
inline void handleGetBuildName(const InPacket& from_host, OutPacket& to_host) {
	to_host.append8(RC_OK);
	for (uint8_t idx = 0; idx < MAX_FILE_LEN; idx++) {
	  to_host.append8(buildName[idx]);
    ac1a:	4630      	mov	r0, r6
    ac1c:	7821      	ldrb	r1, [r4, #0]
    ac1e:	f007 f95d 	bl	11edc <OutPacket::append8(unsigned char)>
	  if (buildName[idx] == '\0') { break; }
    ac22:	f814 3b01 	ldrb.w	r3, [r4], #1
    ac26:	2b00      	cmp	r3, #0
    ac28:	f000 81f1 	beq.w	b00e <host::processQueryPacket(InPacket const&, OutPacket&)+0x4b6>
}

    // return build name
inline void handleGetBuildName(const InPacket& from_host, OutPacket& to_host) {
	to_host.append8(RC_OK);
	for (uint8_t idx = 0; idx < MAX_FILE_LEN; idx++) {
    ac2c:	42ac      	cmp	r4, r5
    ac2e:	d1f4      	bne.n	ac1a <host::processQueryPacket(InPacket const&, OutPacket&)+0xc2>
			case HOST_CMD_VERSION:
				handleVersion(from_host,to_host);
				return true;
			case HOST_CMD_GET_BUILD_NAME:
				handleGetBuildName(from_host,to_host);
				return true;
    ac30:	f04f 0001 	mov.w	r0, #1
    ac34:	e1ed      	b.n	b012 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ba>
			case HOST_CMD_INIT:
				// There's really nothing we want to do here; we don't want to
				// interrupt a running build, for example.
				to_host.append8(RC_OK);
    ac36:	4630      	mov	r0, r6
    ac38:	f04f 0181 	mov.w	r1, #129	; 0x81
    ac3c:	f007 f94e 	bl	11edc <OutPacket::append8(unsigned char)>
				return true;
    ac40:	f04f 0001 	mov.w	r0, #1
    ac44:	e1e5      	b.n	b012 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ba>
			case HOST_CMD_CLEAR_BUFFER: // equivalent at current time
			case HOST_CMD_ABORT: // equivalent at current time
			case HOST_CMD_RESET:
				if (currentState == HOST_STATE_BUILDING
    ac46:	f640 4368 	movw	r3, #3176	; 0xc68
    ac4a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ac4e:	781b      	ldrb	r3, [r3, #0]
    ac50:	f103 32ff 	add.w	r2, r3, #4294967295
    ac54:	b2d2      	uxtb	r2, r2
    ac56:	2b05      	cmp	r3, #5
    ac58:	bf14      	ite	ne
    ac5a:	2300      	movne	r3, #0
    ac5c:	2301      	moveq	r3, #1
    ac5e:	2a01      	cmp	r2, #1
    ac60:	bf98      	it	ls
    ac62:	f043 0301 	orrls.w	r3, r3, #1
    ac66:	b13b      	cbz	r3, ac78 <host::processQueryPacket(InPacket const&, OutPacket&)+0x120>
						|| currentState == HOST_STATE_BUILDING_FROM_SD
						|| currentState == HOST_STATE_BUILDING_ONBOARD) {
					Motherboard::getBoard().indicateError(ERR_RESET_DURING_BUILD);
    ac68:	f640 509c 	movw	r0, #3484	; 0xd9c
    ac6c:	f2c1 0000 	movt	r0, #4096	; 0x1000
    ac70:	f04f 0104 	mov.w	r1, #4
    ac74:	f000 ff7a 	bl	bb6c <Motherboard::indicateError(int)>
				}
				do_host_reset = true; // indicate reset after response has been sent
    ac78:	f640 4380 	movw	r3, #3200	; 0xc80
    ac7c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ac80:	f04f 0401 	mov.w	r4, #1
    ac84:	701c      	strb	r4, [r3, #0]
				to_host.append8(RC_OK);
    ac86:	4630      	mov	r0, r6
    ac88:	f04f 0181 	mov.w	r1, #129	; 0x81
    ac8c:	f007 f926 	bl	11edc <OutPacket::append8(unsigned char)>
				return true;
    ac90:	4620      	mov	r0, r4
    ac92:	e1be      	b.n	b012 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ba>
	  if (buildName[idx] == '\0') { break; }
	}
}

inline void handleGetBufferSize(const InPacket& from_host, OutPacket& to_host) {
	to_host.append8(RC_OK);
    ac94:	4630      	mov	r0, r6
    ac96:	f04f 0181 	mov.w	r1, #129	; 0x81
    ac9a:	f007 f91f 	bl	11edc <OutPacket::append8(unsigned char)>
	to_host.append32(command::getRemainingCapacity());
    ac9e:	f7fd faeb 	bl	8278 <command::getRemainingCapacity()>
    aca2:	4601      	mov	r1, r0
    aca4:	4630      	mov	r0, r6
    aca6:	f007 f929 	bl	11efc <OutPacket::append32(unsigned long)>
				do_host_reset = true; // indicate reset after response has been sent
				to_host.append8(RC_OK);
				return true;
			case HOST_CMD_GET_BUFFER_SIZE:
				handleGetBufferSize(from_host,to_host);
				return true;
    acaa:	f04f 0001 	mov.w	r0, #1
    acae:	e1b0      	b.n	b012 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ba>
	to_host.append32(command::getRemainingCapacity());
}

inline void handleGetPosition(const InPacket& from_host, OutPacket& to_host) {
//	ATOMIC_BLOCK(ATOMIC_FORCEON) {
		const Point p = planner::getPosition();
    acb0:	4668      	mov	r0, sp
    acb2:	f002 fe9f 	bl	d9f4 <planner::getPosition()>
		to_host.append8(RC_OK);
    acb6:	4630      	mov	r0, r6
    acb8:	f04f 0181 	mov.w	r1, #129	; 0x81
    acbc:	f007 f90e 	bl	11edc <OutPacket::append8(unsigned char)>
		to_host.append32(p[0]);
    acc0:	4668      	mov	r0, sp
    acc2:	f04f 0100 	mov.w	r1, #0
    acc6:	f002 ff39 	bl	db3c <Point::operator[](unsigned int) const>
    acca:	6801      	ldr	r1, [r0, #0]
    accc:	4630      	mov	r0, r6
    acce:	f007 f915 	bl	11efc <OutPacket::append32(unsigned long)>
		to_host.append32(p[1]);
    acd2:	4668      	mov	r0, sp
    acd4:	f04f 0101 	mov.w	r1, #1
    acd8:	f002 ff30 	bl	db3c <Point::operator[](unsigned int) const>
    acdc:	6801      	ldr	r1, [r0, #0]
    acde:	4630      	mov	r0, r6
    ace0:	f007 f90c 	bl	11efc <OutPacket::append32(unsigned long)>
		to_host.append32(p[2]);
    ace4:	4668      	mov	r0, sp
    ace6:	f04f 0102 	mov.w	r1, #2
    acea:	f002 ff27 	bl	db3c <Point::operator[](unsigned int) const>
    acee:	6801      	ldr	r1, [r0, #0]
    acf0:	4630      	mov	r0, r6
    acf2:	f007 f903 	bl	11efc <OutPacket::append32(unsigned long)>
		// From spec:
		// endstop status bits: (7-0) : | N/A | N/A | z max | z min | y max | y min | x max | x min |
		Motherboard& board = Motherboard::getBoard();
		uint8_t endstop_status = steppers::getEndstopStatus();
    acf6:	f005 f8cd 	bl	fe94 <steppers::getEndstopStatus()>
    acfa:	4601      	mov	r1, r0
		to_host.append8(endstop_status);
    acfc:	4630      	mov	r0, r6
    acfe:	f007 f8ed 	bl	11edc <OutPacket::append8(unsigned char)>
			case HOST_CMD_GET_BUFFER_SIZE:
				handleGetBufferSize(from_host,to_host);
				return true;
			case HOST_CMD_GET_POSITION:
				handleGetPosition(from_host,to_host);
				return true;
    ad02:	f04f 0001 	mov.w	r0, #1
    ad06:	e184      	b.n	b012 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ba>
//	}
}

inline void handleGetPositionExt(const InPacket& from_host, OutPacket& to_host) {
//	ATOMIC_BLOCK(ATOMIC_FORCEON) {
		const Point p = planner::getPosition();
    ad08:	4668      	mov	r0, sp
    ad0a:	f002 fe73 	bl	d9f4 <planner::getPosition()>
		to_host.append8(RC_OK);
    ad0e:	4630      	mov	r0, r6
    ad10:	f04f 0181 	mov.w	r1, #129	; 0x81
    ad14:	f007 f8e2 	bl	11edc <OutPacket::append8(unsigned char)>
		to_host.append32(p[0]);
    ad18:	4668      	mov	r0, sp
    ad1a:	f04f 0100 	mov.w	r1, #0
    ad1e:	f002 ff0d 	bl	db3c <Point::operator[](unsigned int) const>
    ad22:	6801      	ldr	r1, [r0, #0]
    ad24:	4630      	mov	r0, r6
    ad26:	f007 f8e9 	bl	11efc <OutPacket::append32(unsigned long)>
		to_host.append32(p[1]);
    ad2a:	4668      	mov	r0, sp
    ad2c:	f04f 0101 	mov.w	r1, #1
    ad30:	f002 ff04 	bl	db3c <Point::operator[](unsigned int) const>
    ad34:	6801      	ldr	r1, [r0, #0]
    ad36:	4630      	mov	r0, r6
    ad38:	f007 f8e0 	bl	11efc <OutPacket::append32(unsigned long)>
		to_host.append32(p[2]);
    ad3c:	4668      	mov	r0, sp
    ad3e:	f04f 0102 	mov.w	r1, #2
    ad42:	f002 fefb 	bl	db3c <Point::operator[](unsigned int) const>
    ad46:	6801      	ldr	r1, [r0, #0]
    ad48:	4630      	mov	r0, r6
    ad4a:	f007 f8d7 	bl	11efc <OutPacket::append32(unsigned long)>
#if STEPPER_COUNT > 3
		to_host.append32(p[3]);
    ad4e:	4668      	mov	r0, sp
    ad50:	f04f 0103 	mov.w	r1, #3
    ad54:	f002 fef2 	bl	db3c <Point::operator[](unsigned int) const>
    ad58:	6801      	ldr	r1, [r0, #0]
    ad5a:	4630      	mov	r0, r6
    ad5c:	f007 f8ce 	bl	11efc <OutPacket::append32(unsigned long)>
		to_host.append32(p[4]);
    ad60:	4668      	mov	r0, sp
    ad62:	f04f 0104 	mov.w	r1, #4
    ad66:	f002 fee9 	bl	db3c <Point::operator[](unsigned int) const>
    ad6a:	6801      	ldr	r1, [r0, #0]
    ad6c:	4630      	mov	r0, r6
    ad6e:	f007 f8c5 	bl	11efc <OutPacket::append32(unsigned long)>
		to_host.append32(0);
#endif
		// From spec:
		// endstop status bits: (15-0) : | b max | b min | a max | a min | z max | z min | y max | y min | x max | x min |
		Motherboard& board = Motherboard::getBoard();
		uint8_t endstop_status = steppers::getEndstopStatus();
    ad72:	f005 f88f 	bl	fe94 <steppers::getEndstopStatus()>
    ad76:	4601      	mov	r1, r0
		
		to_host.append16((uint16_t)endstop_status);
    ad78:	4630      	mov	r0, r6
    ad7a:	f007 f8b3 	bl	11ee4 <OutPacket::append16(unsigned short)>
				handleGetPosition(from_host,to_host);
				return true;
			case HOST_CMD_GET_POSITION_EXT:
//				xprintf("HOST_CMD_GET_POSITION_EXT" " (%s:%d)\n",_F_,_L_);
				handleGetPositionExt(from_host,to_host);
				return true;
    ad7e:	f04f 0001 	mov.w	r0, #1
    ad82:	e146      	b.n	b012 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ba>
}

    // capture to SD
inline void handleCaptureToFile(const InPacket& from_host, OutPacket& to_host) {
	char *p = (char*)from_host.getData() + 1;
	to_host.append8(RC_OK);
    ad84:	4630      	mov	r0, r6
    ad86:	f04f 0181 	mov.w	r1, #129	; 0x81
    ad8a:	f007 f8a7 	bl	11edc <OutPacket::append8(unsigned char)>
	to_host.append8(sdcard::startCapture(p));
    ad8e:	f104 0003 	add.w	r0, r4, #3
    ad92:	f003 fcb9 	bl	e708 <sdcard::startCapture(char*)>
    ad96:	4601      	mov	r1, r0
    ad98:	4630      	mov	r0, r6
    ad9a:	f007 f89f 	bl	11edc <OutPacket::append8(unsigned char)>
//				xprintf("HOST_CMD_GET_POSITION_EXT" " (%s:%d)\n",_F_,_L_);
				handleGetPositionExt(from_host,to_host);
				return true;
			case HOST_CMD_CAPTURE_TO_FILE:
				handleCaptureToFile(from_host,to_host);
				return true;
    ad9e:	f04f 0001 	mov.w	r0, #1
    ada2:	e136      	b.n	b012 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ba>
	to_host.append8(RC_OK);
	to_host.append8(sdcard::startCapture(p));
}
    // stop capture to SD
inline void handleEndCapture(const InPacket& from_host, OutPacket& to_host) {
	to_host.append8(RC_OK);
    ada4:	4630      	mov	r0, r6
    ada6:	f04f 0181 	mov.w	r1, #129	; 0x81
    adaa:	f007 f897 	bl	11edc <OutPacket::append8(unsigned char)>
	to_host.append32(sdcard::finishCapture());
    adae:	f003 fb79 	bl	e4a4 <sdcard::finishCapture()>
    adb2:	4601      	mov	r1, r0
    adb4:	4630      	mov	r0, r6
    adb6:	f007 f8a1 	bl	11efc <OutPacket::append32(unsigned long)>
	sdcard::reset();
    adba:	f003 fbf7 	bl	e5ac <sdcard::reset()>
			case HOST_CMD_CAPTURE_TO_FILE:
				handleCaptureToFile(from_host,to_host);
				return true;
			case HOST_CMD_END_CAPTURE:
				handleEndCapture(from_host,to_host);
				return true;
    adbe:	f04f 0001 	mov.w	r0, #1
    adc2:	e126      	b.n	b012 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ba>
	sdcard::reset();
}

    // playback from SD
inline void handlePlayback(const InPacket& from_host, OutPacket& to_host) {
	to_host.append8(RC_OK);
    adc4:	4630      	mov	r0, r6
    adc6:	f04f 0181 	mov.w	r1, #129	; 0x81
    adca:	f007 f887 	bl	11edc <OutPacket::append8(unsigned char)>
    adce:	7823      	ldrb	r3, [r4, #0]
	for (int idx = 1; idx < from_host.getLength(); idx++) {
    add0:	2b01      	cmp	r3, #1
    add2:	dd0e      	ble.n	adf2 <host::processQueryPacket(InPacket const&, OutPacket&)+0x29a>
    add4:	f8df 8240 	ldr.w	r8, [pc, #576]	; b018 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4c0>
    add8:	f04f 0501 	mov.w	r5, #1
		buildName[idx-1] = from_host.read8(idx);
    addc:	4638      	mov	r0, r7
    adde:	b2e9      	uxtb	r1, r5
    ade0:	f007 f824 	bl	11e2c <Packet::read8(unsigned char) const>
    ade4:	f808 0f01 	strb.w	r0, [r8, #1]!
}

    // playback from SD
inline void handlePlayback(const InPacket& from_host, OutPacket& to_host) {
	to_host.append8(RC_OK);
	for (int idx = 1; idx < from_host.getLength(); idx++) {
    ade8:	f105 0501 	add.w	r5, r5, #1
    adec:	7823      	ldrb	r3, [r4, #0]
    adee:	429d      	cmp	r5, r3
    adf0:	dbf4      	blt.n	addc <host::processQueryPacket(InPacket const&, OutPacket&)+0x284>
		buildName[idx-1] = from_host.read8(idx);
	}
	buildName[MAX_FILE_LEN-1] = '\0';
    adf2:	f640 43e4 	movw	r3, #3300	; 0xce4
    adf6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    adfa:	f04f 0200 	mov.w	r2, #0
    adfe:	779a      	strb	r2, [r3, #30]

	uint8_t response = startBuildFromSD();
    ae00:	f7ff fb94 	bl	a52c <host::startBuildFromSD()>
    ae04:	4601      	mov	r1, r0
	to_host.append8(response);
    ae06:	4630      	mov	r0, r6
    ae08:	f007 f868 	bl	11edc <OutPacket::append8(unsigned char)>
			case HOST_CMD_END_CAPTURE:
				handleEndCapture(from_host,to_host);
				return true;
			case HOST_CMD_PLAYBACK_CAPTURE:
				handlePlayback(from_host,to_host);
				return true;
    ae0c:	f04f 0001 	mov.w	r0, #1
    ae10:	e0ff      	b.n	b012 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ba>
			case HOST_CMD_NEXT_FILENAME:
				handleNextFilename(from_host,to_host);
    ae12:	4620      	mov	r0, r4
    ae14:	4631      	mov	r1, r6
    ae16:	f7ff fb05 	bl	a424 <host::handleNextFilename(InPacket const&, OutPacket&)>
				return true;
    ae1a:	f04f 0001 	mov.w	r0, #1
    ae1e:	e0f8      	b.n	b012 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ba>
}

    // pause command response
inline void handlePause(const InPacket& from_host, OutPacket& to_host) {
	/// this command also calls the host::pauseBuild() command
	pauseBuild(!command::isPaused());
    ae20:	f7fd fa42 	bl	82a8 <command::isPaused()>
    ae24:	f080 0001 	eor.w	r0, r0, #1
    ae28:	b2c0      	uxtb	r0, r0
    ae2a:	f7ff fbab 	bl	a584 <host::pauseBuild(bool)>
	to_host.append8(RC_OK);
    ae2e:	4630      	mov	r0, r6
    ae30:	f04f 0181 	mov.w	r1, #129	; 0x81
    ae34:	f007 f852 	bl	11edc <OutPacket::append8(unsigned char)>
			case HOST_CMD_NEXT_FILENAME:
				handleNextFilename(from_host,to_host);
				return true;
			case HOST_CMD_PAUSE:
				handlePause(from_host,to_host);
				return true;
    ae38:	f04f 0001 	mov.w	r0, #1
    ae3c:	e0e9      	b.n	b012 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ba>
			case HOST_CMD_TOOL_QUERY:
//				xprintf("HOST_CMD_TOOL_QUERY" " (%s:%d)\n",_F_,_L_);
				if(processExtruderQueryPacket(from_host,to_host)){
    ae3e:	4620      	mov	r0, r4
    ae40:	4631      	mov	r1, r6
    ae42:	f7ff fd3d 	bl	a8c0 <host::processExtruderQueryPacket(InPacket const&, OutPacket&)>
    ae46:	e0e4      	b.n	b012 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ba>
	to_host.append8(RC_OK);
}

    // check if steppers are still executing a command
inline void handleIsFinished(const InPacket& from_host, OutPacket& to_host) {
	to_host.append8(RC_OK);
    ae48:	4630      	mov	r0, r6
    ae4a:	f04f 0181 	mov.w	r1, #129	; 0x81
    ae4e:	f007 f845 	bl	11edc <OutPacket::append8(unsigned char)>
//	ATOMIC_BLOCK(ATOMIC_FORCEON) {
		bool done = !steppers::isRunning() && command::isEmpty();
    ae52:	f003 fe93 	bl	eb7c <steppers::isRunning()>
    ae56:	f04f 0100 	mov.w	r1, #0
    ae5a:	b920      	cbnz	r0, ae66 <host::processQueryPacket(InPacket const&, OutPacket&)+0x30e>
    ae5c:	f7fd fa2a 	bl	82b4 <command::isEmpty()>
    ae60:	1c01      	adds	r1, r0, #0
    ae62:	bf18      	it	ne
    ae64:	2101      	movne	r1, #1
		to_host.append8(done?1:0);
    ae66:	4630      	mov	r0, r6
    ae68:	f007 f838 	bl	11edc <OutPacket::append8(unsigned char)>
				if(processExtruderQueryPacket(from_host,to_host)){
					return true;}
				break;
			case HOST_CMD_IS_FINISHED:
				handleIsFinished(from_host,to_host);
				return true;
    ae6c:	f04f 0001 	mov.w	r0, #1
    ae70:	e0cf      	b.n	b012 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ba>
			case HOST_CMD_READ_EEPROM:
				handleReadEeprom(from_host,to_host);
    ae72:	4620      	mov	r0, r4
    ae74:	4631      	mov	r1, r6
    ae76:	f7ff fb1f 	bl	a4b8 <host::handleReadEeprom(InPacket const&, OutPacket&)>
				return true;
    ae7a:	f04f 0001 	mov.w	r0, #1
    ae7e:	e0c8      	b.n	b012 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ba>
/**
 * writes a chunk of data from a input packet to eeprom
 */
inline void handleWriteEeprom(const InPacket& from_host, OutPacket& to_host) {
//	xprintf("handleWriteEeprom" " (%s:%d)\n",_F_,_L_);
    uint16_t offset = from_host.read16(1);
    ae80:	4620      	mov	r0, r4
    ae82:	f04f 0101 	mov.w	r1, #1
    ae86:	f006 ffd5 	bl	11e34 <Packet::read16(unsigned char) const>
    ae8a:	4680      	mov	r8, r0
    uint8_t length = from_host.read8(3);
    ae8c:	4620      	mov	r0, r4
    ae8e:	f04f 0103 	mov.w	r1, #3
    ae92:	f006 ffcb 	bl	11e2c <Packet::read8(unsigned char) const>
    ae96:	4682      	mov	sl, r0
//	xprintf("%x" " (%s:%d)\n",offset,_F_,_L_);
//	xprintf("%x" " (%s:%d)\n",length,_F_,_L_);
//    uint8_t data[length];
//    eeprom_read_block(data, (const void*) offset, length);
    for (int i = 0; i < length; i++) {
    ae98:	4681      	mov	r9, r0
    ae9a:	2800      	cmp	r0, #0
    ae9c:	dd16      	ble.n	aecc <host::processQueryPacket(InPacket const&, OutPacket&)+0x374>
    ae9e:	f04f 0404 	mov.w	r4, #4
    aea2:	f04f 0500 	mov.w	r5, #0
    	eeprom::setEeprom8(offset + i, from_host.read8(i + 4));
    aea6:	4638      	mov	r0, r7
    aea8:	4621      	mov	r1, r4
    aeaa:	f006 ffbf 	bl	11e2c <Packet::read8(unsigned char) const>
    aeae:	4601      	mov	r1, r0
    aeb0:	4640      	mov	r0, r8
    aeb2:	f006 fa67 	bl	11384 <eeprom::setEeprom8(unsigned short, unsigned char)>
    uint8_t length = from_host.read8(3);
//	xprintf("%x" " (%s:%d)\n",offset,_F_,_L_);
//	xprintf("%x" " (%s:%d)\n",length,_F_,_L_);
//    uint8_t data[length];
//    eeprom_read_block(data, (const void*) offset, length);
    for (int i = 0; i < length; i++) {
    aeb6:	f105 0501 	add.w	r5, r5, #1
    aeba:	f104 0401 	add.w	r4, r4, #1
    aebe:	b2e4      	uxtb	r4, r4
    aec0:	f108 0801 	add.w	r8, r8, #1
    aec4:	fa1f f888 	uxth.w	r8, r8
    aec8:	454d      	cmp	r5, r9
    aeca:	dbec      	blt.n	aea6 <host::processQueryPacket(InPacket const&, OutPacket&)+0x34e>
    }
//    ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
//    	eeprom::save_to_flash();
//		eeprom_write_block(data, (void*) offset, length);
//	}
    to_host.append8(RC_OK);
    aecc:	4630      	mov	r0, r6
    aece:	f04f 0181 	mov.w	r1, #129	; 0x81
    aed2:	f007 f803 	bl	11edc <OutPacket::append8(unsigned char)>
    to_host.append8(length);
    aed6:	4630      	mov	r0, r6
    aed8:	4651      	mov	r1, sl
    aeda:	f006 ffff 	bl	11edc <OutPacket::append8(unsigned char)>
			case HOST_CMD_READ_EEPROM:
				handleReadEeprom(from_host,to_host);
				return true;
			case HOST_CMD_WRITE_EEPROM:
				handleWriteEeprom(from_host,to_host);
				return true;
    aede:	f04f 0001 	mov.w	r0, #1
    aee2:	e096      	b.n	b012 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ba>
	ES_COMMANDS = 1  // clean queue
};

    // stop steppers and command execution
inline void handleExtendedStop(const InPacket& from_host, OutPacket& to_host) {
	uint8_t flags = from_host.read8(1);
    aee4:	4620      	mov	r0, r4
    aee6:	f04f 0101 	mov.w	r1, #1
    aeea:	f006 ff9f 	bl	11e2c <Packet::read8(unsigned char) const>
    aeee:	4604      	mov	r4, r0
	if (flags & _BV(ES_STEPPERS)) {
    aef0:	f010 0f01 	tst.w	r0, #1
    aef4:	d001      	beq.n	aefa <host::processQueryPacket(InPacket const&, OutPacket&)+0x3a2>
		planner::abort();
    aef6:	f002 fbad 	bl	d654 <planner::abort()>
	}
	if (flags & _BV(ES_COMMANDS)) {
    aefa:	f014 0f02 	tst.w	r4, #2
    aefe:	d001      	beq.n	af04 <host::processQueryPacket(InPacket const&, OutPacket&)+0x3ac>
		command::reset();
    af00:	f7fd fbfe 	bl	8700 <command::reset()>
	}

	to_host.append8(RC_OK);
    af04:	4630      	mov	r0, r6
    af06:	f04f 0181 	mov.w	r1, #129	; 0x81
    af0a:	f006 ffe7 	bl	11edc <OutPacket::append8(unsigned char)>
	to_host.append8(0);
    af0e:	4630      	mov	r0, r6
    af10:	f04f 0100 	mov.w	r1, #0
    af14:	f006 ffe2 	bl	11edc <OutPacket::append8(unsigned char)>
			case HOST_CMD_WRITE_EEPROM:
				handleWriteEeprom(from_host,to_host);
				return true;
			case HOST_CMD_EXTENDED_STOP:
				handleExtendedStop(from_host,to_host);
				return true;
    af18:	f04f 0001 	mov.w	r0, #1
    af1c:	e079      	b.n	b012 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ba>
        to_host.append32(0);// open spot for filament detect info
}
/// get current print stats if printing, or last print stats if not printing
inline void handleGetBoardStatus(OutPacket& to_host) {
	Motherboard& board = Motherboard::getBoard();
	to_host.append8(RC_OK);
    af1e:	4630      	mov	r0, r6
    af20:	f04f 0181 	mov.w	r1, #129	; 0x81
    af24:	f006 ffda 	bl	11edc <OutPacket::append8(unsigned char)>
	to_host.append8(board.GetErrorStatus());
    af28:	f640 509c 	movw	r0, #3484	; 0xd9c
    af2c:	f2c1 0000 	movt	r0, #4096	; 0x1000
    af30:	f000 fdfa 	bl	bb28 <Motherboard::GetErrorStatus()>
    af34:	4601      	mov	r1, r0
    af36:	4630      	mov	r0, r6
    af38:	f006 ffd0 	bl	11edc <OutPacket::append8(unsigned char)>
			case HOST_CMD_EXTENDED_STOP:
				handleExtendedStop(from_host,to_host);
				return true;
			case HOST_CMD_BOARD_STATUS:
				handleGetBoardStatus(to_host);
				return true;
    af3c:	f04f 0001 	mov.w	r0, #1
    af40:	e067      	b.n	b012 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ba>
	currentState = HOST_STATE_READY;
}

/// get current print stats if printing, or last print stats if not printing
inline void handleGetBuildStats(OutPacket& to_host) {
        to_host.append8(RC_OK);
    af42:	4630      	mov	r0, r6
    af44:	f04f 0181 	mov.w	r1, #129	; 0x81
    af48:	f006 ffc8 	bl	11edc <OutPacket::append8(unsigned char)>
 
		uint8_t hours;
		uint8_t minutes;
		
		getPrintTime(hours, minutes);
    af4c:	f10d 0016 	add.w	r0, sp, #22
    af50:	f10d 0117 	add.w	r1, sp, #23
    af54:	f7ff fc0e 	bl	a774 <host::getPrintTime(unsigned char&, unsigned char&)>
		
        to_host.append8(buildState);
    af58:	f640 44e0 	movw	r4, #3296	; 0xce0
    af5c:	f2c1 0400 	movt	r4, #4096	; 0x1000
    af60:	4630      	mov	r0, r6
    af62:	7821      	ldrb	r1, [r4, #0]
    af64:	f006 ffba 	bl	11edc <OutPacket::append8(unsigned char)>
        to_host.append8(hours);
    af68:	4630      	mov	r0, r6
    af6a:	f89d 1016 	ldrb.w	r1, [sp, #22]
    af6e:	f006 ffb5 	bl	11edc <OutPacket::append8(unsigned char)>
        to_host.append8(minutes);
    af72:	4630      	mov	r0, r6
    af74:	f89d 1017 	ldrb.w	r1, [sp, #23]
    af78:	f006 ffb0 	bl	11edc <OutPacket::append8(unsigned char)>
        if((buildState == BUILD_RUNNING) || (buildState == BUILD_PAUSED)){
    af7c:	7823      	ldrb	r3, [r4, #0]
    af7e:	2b03      	cmp	r3, #3
    af80:	bf14      	ite	ne
    af82:	2200      	movne	r2, #0
    af84:	2201      	moveq	r2, #1
    af86:	2b01      	cmp	r3, #1
    af88:	bf14      	ite	ne
    af8a:	4613      	movne	r3, r2
    af8c:	f042 0301 	orreq.w	r3, r2, #1
    af90:	b133      	cbz	r3, afa0 <host::processQueryPacket(InPacket const&, OutPacket&)+0x448>
			to_host.append32(command::getLineNumber());
    af92:	f7fd fbdf 	bl	8754 <command::getLineNumber()>
    af96:	4601      	mov	r1, r0
    af98:	4630      	mov	r0, r6
    af9a:	f006 ffaf 	bl	11efc <OutPacket::append32(unsigned long)>
    af9e:	e007      	b.n	afb0 <host::processQueryPacket(InPacket const&, OutPacket&)+0x458>
		} else {
			to_host.append32(last_print_line);
    afa0:	f640 436c 	movw	r3, #3180	; 0xc6c
    afa4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    afa8:	4630      	mov	r0, r6
    afaa:	6819      	ldr	r1, [r3, #0]
    afac:	f006 ffa6 	bl	11efc <OutPacket::append32(unsigned long)>
		}
        to_host.append32(0);// open spot for filament detect info
    afb0:	4630      	mov	r0, r6
    afb2:	f04f 0100 	mov.w	r1, #0
    afb6:	f006 ffa1 	bl	11efc <OutPacket::append32(unsigned long)>
			case HOST_CMD_BOARD_STATUS:
				handleGetBoardStatus(to_host);
				return true;
			case HOST_CMD_GET_BUILD_STATS:
				handleGetBuildStats(to_host);
				return true;
    afba:	f04f 0001 	mov.w	r0, #1
    afbe:	e028      	b.n	b012 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ba>
// Received driver version info, and request for fw version info.
// puts fw version into a reply packet, and send it back
inline void handleGetAdvancedVersion(const InPacket& from_host, OutPacket& to_host) {

	// we're not doing anything with the host version at the moment
	uint16_t host_version = from_host.read16(1);
    afc0:	4620      	mov	r0, r4
    afc2:	f04f 0101 	mov.w	r1, #1
    afc6:	f006 ff35 	bl	11e34 <Packet::read16(unsigned char) const>
	
	to_host.append8(RC_OK);
    afca:	4630      	mov	r0, r6
    afcc:	f04f 0181 	mov.w	r1, #129	; 0x81
    afd0:	f006 ff84 	bl	11edc <OutPacket::append8(unsigned char)>
	to_host.append16(firmware_version);
    afd4:	4630      	mov	r0, r6
    afd6:	f240 212a 	movw	r1, #554	; 0x22a
    afda:	f006 ff83 	bl	11ee4 <OutPacket::append16(unsigned short)>
	to_host.append16(internal_version);
    afde:	4630      	mov	r0, r6
    afe0:	f04f 0100 	mov.w	r1, #0
    afe4:	f006 ff7e 	bl	11ee4 <OutPacket::append16(unsigned short)>
	to_host.append16(0);
    afe8:	4630      	mov	r0, r6
    afea:	f04f 0100 	mov.w	r1, #0
    afee:	f006 ff79 	bl	11ee4 <OutPacket::append16(unsigned short)>
	to_host.append16(0);
    aff2:	4630      	mov	r0, r6
    aff4:	f04f 0100 	mov.w	r1, #0
    aff8:	f006 ff74 	bl	11ee4 <OutPacket::append16(unsigned short)>
			case HOST_CMD_GET_BUILD_STATS:
				handleGetBuildStats(to_host);
				return true;
			case HOST_CMD_ADVANCED_VERSION:
				handleGetAdvancedVersion(from_host, to_host);
				return true;
    affc:	f04f 0001 	mov.w	r0, #1
    b000:	e007      	b.n	b012 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ba>
			}
		}
	}
	return false;
    b002:	f04f 0000 	mov.w	r0, #0
    b006:	e004      	b.n	b012 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ba>
    b008:	f04f 0000 	mov.w	r0, #0
    b00c:	e001      	b.n	b012 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ba>
			case HOST_CMD_VERSION:
				handleVersion(from_host,to_host);
				return true;
			case HOST_CMD_GET_BUILD_NAME:
				handleGetBuildName(from_host,to_host);
				return true;
    b00e:	f04f 0001 	mov.w	r0, #1
				return true;
			}
		}
	}
	return false;
}
    b012:	b006      	add	sp, #24
    b014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b018:	10000ce3 	.word	0x10000ce3

0000b01c <host::runHostSlice()>:

bool do_host_reset = false;
bool hard_reset = false;
bool cancelBuild = false;

void runHostSlice() {
    b01c:	b530      	push	{r4, r5, lr}
    b01e:	b085      	sub	sp, #20
#endif

public:
    /// Get a reference to the host UART
    /// \return hostUART instance, which should act as a slave to a computer (or motherboard)
    static UART& getHostUART() {static UART hostUART(0,RS232); return hostUART; }
    b020:	f640 4314 	movw	r3, #3092	; 0xc14
    b024:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b028:	681b      	ldr	r3, [r3, #0]
    b02a:	f013 0f01 	tst.w	r3, #1
    b02e:	d133      	bne.n	b098 <host::runHostSlice()+0x7c>
    b030:	f640 4014 	movw	r0, #3092	; 0xc14
    b034:	f2c1 0000 	movt	r0, #4096	; 0x1000
    b038:	f009 fd26 	bl	14a88 <__cxa_guard_acquire>
    b03c:	b170      	cbz	r0, b05c <host::runHostSlice()+0x40>
    b03e:	f640 4018 	movw	r0, #3096	; 0xc18
    b042:	f2c1 0000 	movt	r0, #4096	; 0x1000
    b046:	f04f 0100 	mov.w	r1, #0
    b04a:	460a      	mov	r2, r1
    b04c:	f007 fcae 	bl	129ac <UART::UART(unsigned char, communication_mode)>
    b050:	f640 4014 	movw	r0, #3092	; 0xc14
    b054:	f2c1 0000 	movt	r0, #4096	; 0x1000
    b058:	f009 fd34 	bl	14ac4 <__cxa_guard_release>
    b05c:	f640 4314 	movw	r3, #3092	; 0xc14
    b060:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b064:	681b      	ldr	r3, [r3, #0]
    b066:	f013 0f01 	tst.w	r3, #1
    b06a:	d115      	bne.n	b098 <host::runHostSlice()+0x7c>
    b06c:	f640 4014 	movw	r0, #3092	; 0xc14
    b070:	f2c1 0000 	movt	r0, #4096	; 0x1000
    b074:	f009 fd08 	bl	14a88 <__cxa_guard_acquire>
    b078:	b170      	cbz	r0, b098 <host::runHostSlice()+0x7c>
    b07a:	f640 4018 	movw	r0, #3096	; 0xc18
    b07e:	f2c1 0000 	movt	r0, #4096	; 0x1000
    b082:	f04f 0100 	mov.w	r1, #0
    b086:	460a      	mov	r2, r1
    b088:	f007 fc90 	bl	129ac <UART::UART(unsigned char, communication_mode)>
    b08c:	f640 4014 	movw	r0, #3092	; 0xc14
    b090:	f2c1 0000 	movt	r0, #4096	; 0x1000
    b094:	f009 fd16 	bl	14ac4 <__cxa_guard_release>
	bool isFinished() const {
		return state == PS_LAST;
	}

	bool isSending() const {
		return state != PS_START && state != PS_LAST;
    b098:	f640 4318 	movw	r3, #3096	; 0xc18
    b09c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b0a0:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
    b0a4:	2b00      	cmp	r3, #0
    b0a6:	f000 814d 	beq.w	b344 <host::runHostSlice()+0x328>
    b0aa:	f640 4318 	movw	r3, #3096	; 0xc18
    b0ae:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b0b2:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
    b0b6:	2b04      	cmp	r3, #4
    b0b8:	f040 8156 	bne.w	b368 <host::runHostSlice()+0x34c>
    b0bc:	e142      	b.n	b344 <host::runHostSlice()+0x328>
	if (out.isSending()) {
		// still sending; wait until send is complete before reading new host packets.
		return;
	}
    // soft reset the machine unless waiting to notify repG that a cancel has occured
	if (do_host_reset && (!cancelBuild || cancel_timeout.hasElapsed())){
    b0be:	f640 4394 	movw	r3, #3220	; 0xc94
    b0c2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b0c6:	781b      	ldrb	r3, [r3, #0]
    b0c8:	b143      	cbz	r3, b0dc <host::runHostSlice()+0xc0>
    b0ca:	f640 40c4 	movw	r0, #3268	; 0xcc4
    b0ce:	f2c1 0000 	movt	r0, #4096	; 0x1000
    b0d2:	f007 fb79 	bl	127c8 <Timeout::hasElapsed()>
    b0d6:	2800      	cmp	r0, #0
    b0d8:	f000 813c 	beq.w	b354 <host::runHostSlice()+0x338>
		
		
		
		if((buildState == BUILD_RUNNING) || (buildState == BUILD_PAUSED)){
    b0dc:	f640 43e0 	movw	r3, #3296	; 0xce0
    b0e0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b0e4:	781b      	ldrb	r3, [r3, #0]
    b0e6:	2b03      	cmp	r3, #3
    b0e8:	bf14      	ite	ne
    b0ea:	2200      	movne	r2, #0
    b0ec:	2201      	moveq	r2, #1
    b0ee:	2b01      	cmp	r3, #1
    b0f0:	bf14      	ite	ne
    b0f2:	4613      	movne	r3, r2
    b0f4:	f042 0301 	orreq.w	r3, r2, #1
    b0f8:	b10b      	cbz	r3, b0fe <host::runHostSlice()+0xe2>
			stopBuild();
    b0fa:	f7ff fb8f 	bl	a81c <host::stopBuild()>
		}
		do_host_reset = false;
    b0fe:	f640 4380 	movw	r3, #3200	; 0xc80
    b102:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b106:	f04f 0400 	mov.w	r4, #0
    b10a:	701c      	strb	r4, [r3, #0]

		// reset local board
		
 		reset(hard_reset);
    b10c:	f640 45d4 	movw	r5, #3284	; 0xcd4
    b110:	f2c1 0500 	movt	r5, #4096	; 0x1000
    b114:	7828      	ldrb	r0, [r5, #0]
    b116:	f000 f9a9 	bl	b46c <reset(bool)>
		
        // hard_reset can be called, but is not called by any
        // a hard reset calls the start up sound and resets heater errors
		hard_reset = false;
    b11a:	702c      	strb	r4, [r5, #0]
		packet_in_timeout.abort();
    b11c:	f640 40b0 	movw	r0, #3248	; 0xcb0
    b120:	f2c1 0000 	movt	r0, #4096	; 0x1000
    b124:	f007 fb6a 	bl	127fc <Timeout::abort()>

		// Clear the machine and build names
		machineName[0] = 0;
    b128:	f640 4384 	movw	r3, #3204	; 0xc84
    b12c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b130:	701c      	strb	r4, [r3, #0]
		buildName[0] = 0;
    b132:	f640 43e4 	movw	r3, #3300	; 0xce4
    b136:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b13a:	701c      	strb	r4, [r3, #0]
		currentState = HOST_STATE_READY;
    b13c:	f640 4368 	movw	r3, #3176	; 0xc68
    b140:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b144:	701c      	strb	r4, [r3, #0]
			
		return;
    b146:	e10f      	b.n	b368 <host::runHostSlice()+0x34c>

	//process a byte for our packet.
	void processByte(uint8_t b);

	bool isFinished() const {
		return state == PS_LAST;
    b148:	f640 4318 	movw	r3, #3096	; 0xc18
    b14c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b150:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	}
    // new packet coming in
	if (in.isStarted() && !in.isFinished()) {
    b154:	2b04      	cmp	r3, #4
    b156:	d01f      	beq.n	b198 <host::runHostSlice()+0x17c>
    b158:	f640 43b0 	movw	r3, #3248	; 0xcb0
    b15c:	f2c1 0300 	movt	r3, #4096	; 0x1000
//		xprintf("in.isStarted() && !in.isFinished()" " (%s:%d)\n",_F_,_L_);
		if (!packet_in_timeout.isActive()) {
    b160:	781b      	ldrb	r3, [r3, #0]
    b162:	b953      	cbnz	r3, b17a <host::runHostSlice()+0x15e>
			// initiate timeout
			packet_in_timeout.start(HOST_PACKET_TIMEOUT_MICROS);
    b164:	f640 40b0 	movw	r0, #3248	; 0xcb0
    b168:	f2c1 0000 	movt	r0, #4096	; 0x1000
    b16c:	f44f 6154 	mov.w	r1, #3392	; 0xd40
    b170:	f2c0 0103 	movt	r1, #3
    b174:	f007 fb14 	bl	127a0 <Timeout::start(unsigned long)>
    b178:	e00e      	b.n	b198 <host::runHostSlice()+0x17c>
		} else if (packet_in_timeout.hasElapsed()) {
    b17a:	f640 40b0 	movw	r0, #3248	; 0xcb0
    b17e:	f2c1 0000 	movt	r0, #4096	; 0x1000
    b182:	f007 fb21 	bl	127c8 <Timeout::hasElapsed()>
    b186:	b138      	cbz	r0, b198 <host::runHostSlice()+0x17c>
	void appendByte(uint8_t data);
	/// Reset this packet to an empty state
	void reset();

	void error(uint8_t error_code_in) {
		reset();
    b188:	4c78      	ldr	r4, [pc, #480]	; (b36c <host::runHostSlice()+0x350>)
    b18a:	4620      	mov	r0, r4
    b18c:	f006 fdec 	bl	11d68 <Packet::reset()>
		error_code = error_code_in;
    b190:	f04f 0304 	mov.w	r3, #4
    b194:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	}
public:
	uint8_t getLength() const { return length; }

	bool hasError() const {
		return error_code != PacketError::NO_ERROR;
    b198:	f640 4318 	movw	r3, #3096	; 0xc18
    b19c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b1a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
			in.timeout();
		}

	}
	if (in.hasError()) {
    b1a4:	b113      	cbz	r3, b1ac <host::runHostSlice()+0x190>
			default:
				out.append8(RC_PACKET_ERROR);
				break;
		}
		*/  	
		in.reset();
    b1a6:	4871      	ldr	r0, [pc, #452]	; (b36c <host::runHostSlice()+0x350>)
    b1a8:	f006 fde8 	bl	11d7c <InPacket::reset()>

	//process a byte for our packet.
	void processByte(uint8_t b);

	bool isFinished() const {
		return state == PS_LAST;
    b1ac:	f640 4318 	movw	r3, #3096	; 0xc18
    b1b0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b1b4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
		//UART::getHostUART().beginSend();
		//Motherboard::getBoard().indicateError(ERR_HOST_PACKET_MISC);
		
	}
	if (in.isFinished()) {
    b1b8:	2b04      	cmp	r3, #4
    b1ba:	f040 809d 	bne.w	b2f8 <host::runHostSlice()+0x2dc>
//		xprintf("in.isFinished()" " (%s:%d)\n",_F_,_L_);
		DEBUG_PIN1.setValue(false);
    b1be:	a803      	add	r0, sp, #12
    b1c0:	f04f 01ff 	mov.w	r1, #255	; 0xff
    b1c4:	f006 fd3a 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    b1c8:	a801      	add	r0, sp, #4
    b1ca:	a903      	add	r1, sp, #12
    b1cc:	f04f 02ff 	mov.w	r2, #255	; 0xff
    b1d0:	f006 ff46 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    b1d4:	f89d 3005 	ldrb.w	r3, [sp, #5]
    b1d8:	b94b      	cbnz	r3, b1ee <host::runHostSlice()+0x1d2>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    b1da:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b1de:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b1e2:	f04f 0101 	mov.w	r1, #1
    b1e6:	fa01 f103 	lsl.w	r1, r1, r3
    b1ea:	f7f8 f983 	bl	34f4 <GPIO_ClearValue>
		packet_in_timeout.abort();
    b1ee:	f640 40b0 	movw	r0, #3248	; 0xcb0
    b1f2:	f2c1 0000 	movt	r0, #4096	; 0x1000
    b1f6:	f007 fb01 	bl	127fc <Timeout::abort()>
		out.reset();
    b1fa:	485d      	ldr	r0, [pc, #372]	; (b370 <host::runHostSlice()+0x354>)
    b1fc:	f006 fe24 	bl	11e48 <OutPacket::reset()>
	  // do not respond to commands if the bot has had a heater failure
		if(currentState == HOST_STATE_HEAT_SHUTDOWN){
    b200:	f640 4368 	movw	r3, #3176	; 0xc68
    b204:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b208:	781b      	ldrb	r3, [r3, #0]
    b20a:	2b06      	cmp	r3, #6
    b20c:	d118      	bne.n	b240 <host::runHostSlice()+0x224>
			if(cancelBuild){
    b20e:	f640 4394 	movw	r3, #3220	; 0xc94
    b212:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b216:	781b      	ldrb	r3, [r3, #0]
    b218:	b163      	cbz	r3, b234 <host::runHostSlice()+0x218>
				out.append8(RC_CANCEL_BUILD);
    b21a:	4855      	ldr	r0, [pc, #340]	; (b370 <host::runHostSlice()+0x354>)
    b21c:	f04f 0189 	mov.w	r1, #137	; 0x89
    b220:	f006 fe5c 	bl	11edc <OutPacket::append8(unsigned char)>
				cancelBuild= false;
    b224:	f640 4394 	movw	r3, #3220	; 0xc94
    b228:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b22c:	f04f 0200 	mov.w	r2, #0
    b230:	701a      	strb	r2, [r3, #0]
    b232:	e03a      	b.n	b2aa <host::runHostSlice()+0x28e>
			}else{
				out.append8(RC_BOT_OVERHEAT);
    b234:	484e      	ldr	r0, [pc, #312]	; (b370 <host::runHostSlice()+0x354>)
    b236:	f04f 018b 	mov.w	r1, #139	; 0x8b
    b23a:	f006 fe4f 	bl	11edc <OutPacket::append8(unsigned char)>
    b23e:	e034      	b.n	b2aa <host::runHostSlice()+0x28e>
			}
		}else if(cancelBuild){
    b240:	f640 4394 	movw	r3, #3220	; 0xc94
    b244:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b248:	781b      	ldrb	r3, [r3, #0]
    b24a:	b1a3      	cbz	r3, b276 <host::runHostSlice()+0x25a>
			out.append8(RC_CANCEL_BUILD);
    b24c:	4848      	ldr	r0, [pc, #288]	; (b370 <host::runHostSlice()+0x354>)
    b24e:	f04f 0189 	mov.w	r1, #137	; 0x89
    b252:	f006 fe43 	bl	11edc <OutPacket::append8(unsigned char)>
			cancelBuild = false;
    b256:	f640 4394 	movw	r3, #3220	; 0xc94
    b25a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b25e:	f04f 0200 	mov.w	r2, #0
    b262:	701a      	strb	r2, [r3, #0]
			Motherboard::getBoard().indicateError(6);
    b264:	f640 509c 	movw	r0, #3484	; 0xd9c
    b268:	f2c1 0000 	movt	r0, #4096	; 0x1000
    b26c:	f04f 0106 	mov.w	r1, #6
    b270:	f000 fc7c 	bl	bb6c <Motherboard::indicateError(int)>
    b274:	e019      	b.n	b2aa <host::runHostSlice()+0x28e>
		} else
#if defined(HONOR_DEBUG_PACKETS) && (HONOR_DEBUG_PACKETS == 1)
		if (processDebugPacket(in, out)) {
    b276:	493d      	ldr	r1, [pc, #244]	; (b36c <host::runHostSlice()+0x350>)
    b278:	4608      	mov	r0, r1
    b27a:	f101 0125 	add.w	r1, r1, #37	; 0x25
    b27e:	f7fe fabb 	bl	97f8 <processDebugPacket(InPacket const&, OutPacket&)>
    b282:	b990      	cbnz	r0, b2aa <host::runHostSlice()+0x28e>
			// okay, processed
		} else
#endif
		if (processCommandPacket(in, out)) {
    b284:	4939      	ldr	r1, [pc, #228]	; (b36c <host::runHostSlice()+0x350>)
    b286:	4608      	mov	r0, r1
    b288:	f101 0125 	add.w	r1, r1, #37	; 0x25
    b28c:	f7ff f864 	bl	a358 <host::processCommandPacket(InPacket const&, OutPacket&)>
    b290:	b958      	cbnz	r0, b2aa <host::runHostSlice()+0x28e>
			// okay, processed
		} else if (processQueryPacket(in, out)) {
    b292:	4936      	ldr	r1, [pc, #216]	; (b36c <host::runHostSlice()+0x350>)
    b294:	4608      	mov	r0, r1
    b296:	f101 0125 	add.w	r1, r1, #37	; 0x25
    b29a:	f7ff fc5d 	bl	ab58 <host::processQueryPacket(InPacket const&, OutPacket&)>
    b29e:	b920      	cbnz	r0, b2aa <host::runHostSlice()+0x28e>
			// okay, processed
		} else {
			// Unrecognized command
			out.append8(RC_CMD_UNSUPPORTED);
    b2a0:	4833      	ldr	r0, [pc, #204]	; (b370 <host::runHostSlice()+0x354>)
    b2a2:	f04f 0185 	mov.w	r1, #133	; 0x85
    b2a6:	f006 fe19 	bl	11edc <OutPacket::append8(unsigned char)>
		}
		in.reset();
    b2aa:	4830      	ldr	r0, [pc, #192]	; (b36c <host::runHostSlice()+0x350>)
    b2ac:	f006 fd66 	bl	11d7c <InPacket::reset()>
    b2b0:	f640 4314 	movw	r3, #3092	; 0xc14
    b2b4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b2b8:	681b      	ldr	r3, [r3, #0]
    b2ba:	f013 0f01 	tst.w	r3, #1
    b2be:	d115      	bne.n	b2ec <host::runHostSlice()+0x2d0>
    b2c0:	f640 4014 	movw	r0, #3092	; 0xc14
    b2c4:	f2c1 0000 	movt	r0, #4096	; 0x1000
    b2c8:	f009 fbde 	bl	14a88 <__cxa_guard_acquire>
    b2cc:	b170      	cbz	r0, b2ec <host::runHostSlice()+0x2d0>
    b2ce:	f640 4018 	movw	r0, #3096	; 0xc18
    b2d2:	f2c1 0000 	movt	r0, #4096	; 0x1000
    b2d6:	f04f 0100 	mov.w	r1, #0
    b2da:	460a      	mov	r2, r1
    b2dc:	f007 fb66 	bl	129ac <UART::UART(unsigned char, communication_mode)>
    b2e0:	f640 4014 	movw	r0, #3092	; 0xc14
    b2e4:	f2c1 0000 	movt	r0, #4096	; 0x1000
    b2e8:	f009 fbec 	bl	14ac4 <__cxa_guard_release>
                UART::getHostUART().beginSend();
    b2ec:	f640 4018 	movw	r0, #3096	; 0xc18
    b2f0:	f2c1 0000 	movt	r0, #4096	; 0x1000
    b2f4:	f007 fb6e 	bl	129d4 <UART::beginSend()>
	}
    /// mark new state as ready if done building from SD
	if(currentState==HOST_STATE_BUILDING_FROM_SD)
    b2f8:	f640 4368 	movw	r3, #3176	; 0xc68
    b2fc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b300:	781b      	ldrb	r3, [r3, #0]
    b302:	2b02      	cmp	r3, #2
    b304:	d10a      	bne.n	b31c <host::runHostSlice()+0x300>
	{
		if(!sdcard::isPlaying())
    b306:	f003 f8ab 	bl	e460 <sdcard::isPlaying()>
    b30a:	b938      	cbnz	r0, b31c <host::runHostSlice()+0x300>
			currentState = HOST_STATE_READY;
    b30c:	f640 4368 	movw	r3, #3176	; 0xc68
    b310:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b314:	f04f 0200 	mov.w	r2, #0
    b318:	701a      	strb	r2, [r3, #0]
    b31a:	e010      	b.n	b33e <host::runHostSlice()+0x322>
	}
    // mark new state as ready if done buiding onboard script
	if((currentState==HOST_STATE_BUILDING_ONBOARD))
    b31c:	f640 4368 	movw	r3, #3176	; 0xc68
    b320:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b324:	781b      	ldrb	r3, [r3, #0]
    b326:	2b05      	cmp	r3, #5
    b328:	d109      	bne.n	b33e <host::runHostSlice()+0x322>
	{
		if(!utility::isPlaying()){
    b32a:	f005 fce9 	bl	10d00 <utility::isPlaying()>
    b32e:	b930      	cbnz	r0, b33e <host::runHostSlice()+0x322>
			currentState = HOST_STATE_READY;
    b330:	f640 4368 	movw	r3, #3176	; 0xc68
    b334:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b338:	f04f 0200 	mov.w	r2, #0
    b33c:	701a      	strb	r2, [r3, #0]
		}
	}
	managePrintTime();
    b33e:	f7ff f9fd 	bl	a73c <host::managePrintTime()>
    b342:	e011      	b.n	b368 <host::runHostSlice()+0x34c>
	if (out.isSending()) {
		// still sending; wait until send is complete before reading new host packets.
		return;
	}
    // soft reset the machine unless waiting to notify repG that a cancel has occured
	if (do_host_reset && (!cancelBuild || cancel_timeout.hasElapsed())){
    b344:	f640 4380 	movw	r3, #3200	; 0xc80
    b348:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b34c:	781b      	ldrb	r3, [r3, #0]
    b34e:	2b00      	cmp	r3, #0
    b350:	f47f aeb5 	bne.w	b0be <host::runHostSlice()+0xa2>
	}

	bool isStarted() const {
		return state != PS_START;
    b354:	f640 4318 	movw	r3, #3096	; 0xc18
    b358:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b35c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
		currentState = HOST_STATE_READY;
			
		return;
	}
    // new packet coming in
	if (in.isStarted() && !in.isFinished()) {
    b360:	2b00      	cmp	r3, #0
    b362:	f47f aef1 	bne.w	b148 <host::runHostSlice()+0x12c>
    b366:	e717      	b.n	b198 <host::runHostSlice()+0x17c>
		if(!utility::isPlaying()){
			currentState = HOST_STATE_READY;
		}
	}
	managePrintTime();
}
    b368:	b005      	add	sp, #20
    b36a:	bd30      	pop	{r4, r5, pc}
    b36c:	10000c1b 	.word	0x10000c1b
    b370:	10000c40 	.word	0x10000c40

0000b374 <_GLOBAL__sub_I__ZN4host17packet_in_timeoutE>:
		}
	}
	return false;
}

}
    b374:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
    b376:	f640 4070 	movw	r0, #3184	; 0xc70
    b37a:	f2c1 0000 	movt	r0, #4096	; 0x1000
    b37e:	f04f 0100 	mov.w	r1, #0
    b382:	f006 fc5b 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
    b386:	f640 4078 	movw	r0, #3192	; 0xc78
    b38a:	f2c1 0000 	movt	r0, #4096	; 0x1000
    b38e:	f04f 0101 	mov.w	r1, #1
    b392:	f006 fc53 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
    b396:	f640 407c 	movw	r0, #3196	; 0xc7c
    b39a:	f2c1 0000 	movt	r0, #4096	; 0x1000
    b39e:	f04f 0102 	mov.w	r1, #2
    b3a2:	f006 fc4b 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
    b3a6:	f640 4098 	movw	r0, #3224	; 0xc98
    b3aa:	f2c1 0000 	movt	r0, #4096	; 0x1000
    b3ae:	f04f 0103 	mov.w	r1, #3
    b3b2:	f006 fc43 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
    b3b6:	f640 40ac 	movw	r0, #3244	; 0xcac
    b3ba:	f2c1 0000 	movt	r0, #4096	; 0x1000
    b3be:	f04f 0104 	mov.w	r1, #4
    b3c2:	f006 fc3b 	bl	11c3c <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
    b3c6:	f640 44c0 	movw	r4, #3264	; 0xcc0
    b3ca:	f2c1 0400 	movt	r4, #4096	; 0x1000
    b3ce:	4620      	mov	r0, r4
    b3d0:	f04f 01ff 	mov.w	r1, #255	; 0xff
    b3d4:	f006 fc32 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
	};
	// currently not used:
	//const uint8_t getPinIndex() const { return pin_index; }
};

static const Pin NullPin(NullPort, 0);
    b3d8:	f640 40d8 	movw	r0, #3288	; 0xcd8
    b3dc:	f2c1 0000 	movt	r0, #4096	; 0x1000
    b3e0:	4621      	mov	r1, r4
    b3e2:	f04f 0200 	mov.w	r2, #0
    b3e6:	f006 fe3b 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
bool processCommandPacket(const InPacket& from_host, OutPacket& to_host);
bool processQueryPacket(const InPacket& from_host, OutPacket& to_host);
bool processExtruderQueryPacket(const InPacket& from_host, OutPacket& to_host);

// Timeout from time first bit recieved until we abort packet reception
Timeout packet_in_timeout;
    b3ea:	f640 40b0 	movw	r0, #3248	; 0xcb0
    b3ee:	f2c1 0000 	movt	r0, #4096	; 0x1000
    b3f2:	f007 f9cf 	bl	12794 <Timeout::Timeout()>
Timeout cancel_timeout;
    b3f6:	f640 40c4 	movw	r0, #3268	; 0xcc4
    b3fa:	f2c1 0000 	movt	r0, #4096	; 0x1000
    b3fe:	f007 f9c9 	bl	12794 <Timeout::Timeout()>

uint32_t last_print_line = 0;

/// counter for current print time
uint8_t print_time_hours = 0;
Timeout print_time;
    b402:	f640 409c 	movw	r0, #3228	; 0xc9c
    b406:	f2c1 0000 	movt	r0, #4096	; 0x1000
    b40a:	f007 f9c3 	bl	12794 <Timeout::Timeout()>
		}
	}
	return false;
}

}
    b40e:	bd10      	pop	{r4, pc}

0000b410 <WDT_IRQHandler>:
}

#define USER_FLASH_START 0x3000 // For USB bootloader
#define BOOTLOADER_START 0x0 // To enter bootloader

extern "C" void WDT_IRQHandler (void){
    b410:	b538      	push	{r3, r4, r5, lr}

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    b412:	f44f 4561 	mov.w	r5, #57600	; 0xe100
    b416:	f2ce 0500 	movt	r5, #57344	; 0xe000
    b41a:	f04f 0401 	mov.w	r4, #1
    b41e:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
	NVIC_DisableIRQ(WDT_IRQn);
	xprintf("WDT_IRQHandler" " (%s:%d)\n",_F_,_L_);
    b422:	f247 40e4 	movw	r0, #29924	; 0x74e4
    b426:	f2c0 0002 	movt	r0, #2
    b42a:	490f      	ldr	r1, [pc, #60]	; (b468 <WDT_IRQHandler+0x58>)
    b42c:	f04f 0234 	mov.w	r2, #52	; 0x34
    b430:	f7fb fa90 	bl	6954 <xprintf>
	SCB->VTOR = (BOOTLOADER_START & 0x1FFFFF80);
    b434:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    b438:	f2ce 0300 	movt	r3, #57344	; 0xe000
    b43c:	f04f 0200 	mov.w	r2, #0
    b440:	609a      	str	r2, [r3, #8]
	RTC_WriteGPREG(LPC_RTC, 2, 0xbbbbbbbb);
    b442:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    b446:	f2c4 0002 	movt	r0, #16386	; 0x4002
    b44a:	f04f 0102 	mov.w	r1, #2
    b44e:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
    b452:	f7f8 fb1d 	bl	3a90 <RTC_WriteGPREG>
	WDT_Init (WDT_CLKSRC_PCLK, WDT_MODE_RESET);
    b456:	4620      	mov	r0, r4
    b458:	4621      	mov	r1, r4
    b45a:	f7f9 fc57 	bl	4d0c <WDT_Init>
	WDT_Start(1);
    b45e:	4620      	mov	r0, r4
    b460:	f7f9 fc8a 	bl	4d78 <WDT_Start>

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    b464:	602c      	str	r4, [r5, #0]
    b466:	e7fe      	b.n	b466 <WDT_IRQHandler+0x56>
    b468:	00027518 	.word	0x00027518

0000b46c <reset(bool)>:
	NVIC_EnableIRQ(WDT_IRQn);
	while(1);
}

void reset(bool hard_reset) {
    b46c:	b538      	push	{r3, r4, r5, lr}
//		if(resetFlags & (1 << 2)){
//			brown_out = true;
//		}
		
        // clear watch dog timer and re-enable
		if(hard_reset)
    b46e:	4605      	mov	r5, r0
    b470:	b1a0      	cbz	r0, b49c <reset(bool)+0x30>
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    b472:	f44f 4461 	mov.w	r4, #57600	; 0xe100
    b476:	f2ce 0400 	movt	r4, #57344	; 0xe000
    b47a:	f04f 0100 	mov.w	r1, #0
    b47e:	f884 1300 	strb.w	r1, [r4, #768]	; 0x300
		{ 
            // ATODO: remove disable
			NVIC_SetPriority(WDT_IRQn, 0);
			WDT_Init (WDT_CLKSRC_PCLK, WDT_MODE_INT_ONLY);
    b482:	f04f 0001 	mov.w	r0, #1
    b486:	f7f9 fc41 	bl	4d0c <WDT_Init>
			WDT_Start(8000000);
    b48a:	f44f 5090 	mov.w	r0, #4608	; 0x1200
    b48e:	f2c0 007a 	movt	r0, #122	; 0x7a
    b492:	f7f9 fc71 	bl	4d78 <WDT_Start>

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    b496:	f04f 0301 	mov.w	r3, #1
    b49a:	6023      	str	r3, [r4, #0]
//			wdt_enable(WDTO_8S); // 8 seconds is max timeout
		}
		
		// initialize major classes
		Motherboard& board = Motherboard::getBoard();
		sdcard::reset();
    b49c:	f003 f886 	bl	e5ac <sdcard::reset()>
		xprintf("sdcard::reset" " (%s:%d)\n",_F_,_L_);
    b4a0:	4c26      	ldr	r4, [pc, #152]	; (b53c <reset(bool)+0xd0>)
    b4a2:	f247 5020 	movw	r0, #29984	; 0x7520
    b4a6:	f2c0 0002 	movt	r0, #2
    b4aa:	4621      	mov	r1, r4
    b4ac:	f04f 0257 	mov.w	r2, #87	; 0x57
    b4b0:	f7fb fa50 	bl	6954 <xprintf>
		utility::reset();
    b4b4:	f005 fc2a 	bl	10d0c <utility::reset()>
		xprintf("utility::reset" " (%s:%d)\n",_F_,_L_);
    b4b8:	f247 5038 	movw	r0, #30008	; 0x7538
    b4bc:	f2c0 0002 	movt	r0, #2
    b4c0:	4621      	mov	r1, r4
    b4c2:	f04f 0259 	mov.w	r2, #89	; 0x59
    b4c6:	f7fb fa45 	bl	6954 <xprintf>
		planner::init();
    b4ca:	f002 f95d 	bl	d788 <planner::init()>
		xprintf("planner::init" " (%s:%d)\n",_F_,_L_);
    b4ce:	f247 5050 	movw	r0, #30032	; 0x7550
    b4d2:	f2c0 0002 	movt	r0, #2
    b4d6:	4621      	mov	r1, r4
    b4d8:	f04f 025b 	mov.w	r2, #91	; 0x5b
    b4dc:	f7fb fa3a 	bl	6954 <xprintf>
		planner::abort();
    b4e0:	f002 f8b8 	bl	d654 <planner::abort()>
		command::reset();
    b4e4:	f7fd f90c 	bl	8700 <command::reset()>
		eeprom::init();
    b4e8:	f005 ff72 	bl	113d0 <eeprom::init()>
		xprintf("eeprom::init" " (%s:%d)\n",_F_,_L_);
    b4ec:	f247 5068 	movw	r0, #30056	; 0x7568
    b4f0:	f2c0 0002 	movt	r0, #2
    b4f4:	4621      	mov	r1, r4
    b4f6:	f04f 025f 	mov.w	r2, #95	; 0x5f
    b4fa:	f7fb fa2b 	bl	6954 <xprintf>
		steppers::reset();
    b4fe:	f003 fdf9 	bl	f0f4 <steppers::reset()>
		xprintf("steppers::reset" " (%s:%d)\n",_F_,_L_);
    b502:	f247 5080 	movw	r0, #30080	; 0x7580
    b506:	f2c0 0002 	movt	r0, #2
    b50a:	4621      	mov	r1, r4
    b50c:	f04f 0261 	mov.w	r2, #97	; 0x61
    b510:	f7fb fa20 	bl	6954 <xprintf>
		initThermistorTables();
    b514:	f007 f8c4 	bl	126a0 <initThermistorTables()>
		board.reset(hard_reset);
    b518:	f640 509c 	movw	r0, #3484	; 0xd9c
    b51c:	f2c1 0000 	movt	r0, #4096	; 0x1000
    b520:	4629      	mov	r1, r5
    b522:	f000 fc65 	bl	bdf0 <Motherboard::reset(bool)>
		xprintf("board.reset(hard_reset)" " (%s:%d)\n",_F_,_L_);
    b526:	f247 509c 	movw	r0, #30108	; 0x759c
    b52a:	f2c0 0002 	movt	r0, #2
    b52e:	4621      	mov	r1, r4
    b530:	f04f 0264 	mov.w	r2, #100	; 0x64
    b534:	f7fb fa0e 	bl	6954 <xprintf>
	//	{
	//		board.getInterfaceBoard().errorMessage("Brown-Out Reset     Occured", 27);
	//		board.startButtonWait();
	//	}	
//	}
}
    b538:	bd38      	pop	{r3, r4, r5, pc}
    b53a:	bf00      	nop
    b53c:	00027518 	.word	0x00027518

0000b540 <main>:
volatile uint32_t USER_MILLIS;

volatile char UART_LINE[50];
volatile uint32_t UART_LINE_LEN;

int main() {
    b540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
    b544:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    b548:	f2ce 0200 	movt	r2, #57344	; 0xe000
    b54c:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
    b54e:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
    b552:	4019      	ands	r1, r3
  reg_value  =  (reg_value                       |
                (0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
    b554:	f44f 6380 	mov.w	r3, #1024	; 0x400
    b558:	f2c0 53fa 	movt	r3, #1530	; 0x5fa
    b55c:	430b      	orrs	r3, r1
  SCB->AIRCR =  reg_value;
    b55e:	60d3      	str	r3, [r2, #12]
	// assign ADC to group 4 sub-priority 1 = 17
	NVIC_SetPriorityGrouping(4);

//	SCB->VTOR = (USER_FLASH_START & 0x1FFFFF80);

	comm_init();
    b560:	f7fa ff44 	bl	63ec <comm_init>
	comm_flush();
    b564:	f7fb f8e0 	bl	6728 <comm_flush>
	xprintf("\r\n\r\n\r\n\r\n\r\n**BOOTED**" " (%s:%d)\n",_F_,_L_);
    b568:	4e32      	ldr	r6, [pc, #200]	; (b634 <main+0xf4>)
    b56a:	f247 50c0 	movw	r0, #30144	; 0x75c0
    b56e:	f2c0 0002 	movt	r0, #2
    b572:	4631      	mov	r1, r6
    b574:	f04f 0293 	mov.w	r2, #147	; 0x93
    b578:	f7fb f9ec 	bl	6954 <xprintf>
			_delay_us(10000);
//		}
	}

	Motherboard& board = Motherboard::getBoard();
	reset(true);
    b57c:	f04f 0001 	mov.w	r0, #1
    b580:	f7ff ff74 	bl	b46c <reset(bool)>
	xprintf("reset done" " (%s:%d)\n",_F_,_L_);
    b584:	f247 50e0 	movw	r0, #30176	; 0x75e0
    b588:	f2c0 0002 	movt	r0, #2
    b58c:	4631      	mov	r1, r6
    b58e:	f04f 02ad 	mov.w	r2, #173	; 0xad
    b592:	f7fb f9df 	bl	6954 <xprintf>
	steppers::init();
    b596:	f003 fdb1 	bl	f0fc <steppers::init()>
	xprintf("stepper init done" " (%s:%d)\n",_F_,_L_);
    b59a:	f247 50f4 	movw	r0, #30196	; 0x75f4
    b59e:	f2c0 0002 	movt	r0, #2
    b5a2:	4631      	mov	r1, r6
    b5a4:	f04f 02af 	mov.w	r2, #175	; 0xaf
    b5a8:	f7fb f9d4 	bl	6954 <xprintf>
//	sei();
		xprintf("Loop" " (%s:%d)\n",_F_,_L_);
    b5ac:	f247 6010 	movw	r0, #30224	; 0x7610
    b5b0:	f2c0 0002 	movt	r0, #2
    b5b4:	4631      	mov	r1, r6
    b5b6:	f04f 02b1 	mov.w	r2, #177	; 0xb1
    b5ba:	f7fb f9cb 	bl	6954 <xprintf>
		// Host interaction thread.
		host::runHostSlice();
		// Command handling thread.
		command::runCommandSlice();
		// Motherboard slice
		board.runMotherboardSlice();
    b5be:	f640 579c 	movw	r7, #3484	; 0xd9c
    b5c2:	f2c1 0700 	movt	r7, #4096	; 0x1000
        // reset the watch dog timer
		WDT_Feed ();
		if(LINE_READY){
    b5c6:	f240 56d8 	movw	r6, #1496	; 0x5d8
    b5ca:	f2c1 0600 	movt	r6, #4096	; 0x1000
			exec_cmd(UART_LINE);
    b5ce:	f640 5808 	movw	r8, #3336	; 0xd08
    b5d2:	f2c1 0800 	movt	r8, #4096	; 0x1000
	xprintf("stepper init done" " (%s:%d)\n",_F_,_L_);
//	sei();
		xprintf("Loop" " (%s:%d)\n",_F_,_L_);
	while (1) {
		// Host interaction thread.
		host::runHostSlice();
    b5d6:	f7ff fd21 	bl	b01c <host::runHostSlice()>
		// Command handling thread.
		command::runCommandSlice();
    b5da:	f7fd f9bf 	bl	895c <command::runCommandSlice()>
		// Motherboard slice
		board.runMotherboardSlice();
    b5de:	4638      	mov	r0, r7
    b5e0:	f000 fb38 	bl	bc54 <Motherboard::runMotherboardSlice()>
        // reset the watch dog timer
		WDT_Feed ();
    b5e4:	f7f9 fbbe 	bl	4d64 <WDT_Feed>
		if(LINE_READY){
    b5e8:	6833      	ldr	r3, [r6, #0]
    b5ea:	b12b      	cbz	r3, b5f8 <main+0xb8>
			exec_cmd(UART_LINE);
    b5ec:	4640      	mov	r0, r8
    b5ee:	f7fb f8ab 	bl	6748 <exec_cmd>
			LINE_READY=0;
    b5f2:	f04f 0300 	mov.w	r3, #0
    b5f6:	6033      	str	r3, [r6, #0]
		}
//		wdt_reset();
		uint32_t loop1;
		loop1++;
    b5f8:	f104 0401 	add.w	r4, r4, #1
		if (loop1 > 5000){
    b5fc:	f241 3388 	movw	r3, #5000	; 0x1388
    b600:	429c      	cmp	r4, r3
    b602:	d907      	bls.n	b614 <main+0xd4>
			loop1=0;
			xprintf(".");
    b604:	f247 6020 	movw	r0, #30240	; 0x7620
    b608:	f2c0 0002 	movt	r0, #2
    b60c:	f7fb f9a2 	bl	6954 <xprintf>
		}
//		wdt_reset();
		uint32_t loop1;
		loop1++;
		if (loop1 > 5000){
			loop1=0;
    b610:	f04f 0400 	mov.w	r4, #0
			xprintf(".");
		}
		// only update flash after a few reads have taken place - Limited Life!!!
		uint32_t loop2;
		if (eeprom::getflashupdate()){
    b614:	f005 fe86 	bl	11324 <eeprom::getflashupdate()>
    b618:	b108      	cbz	r0, b61e <main+0xde>
			loop2++;
    b61a:	f105 0501 	add.w	r5, r5, #1
		}
		if (loop2 > 500000){
    b61e:	f24a 1320 	movw	r3, #41248	; 0xa120
    b622:	f2c0 0307 	movt	r3, #7
    b626:	429d      	cmp	r5, r3
    b628:	d9d5      	bls.n	b5d6 <main+0x96>
			eeprom::save_to_flash();
    b62a:	f7fe fa41 	bl	9ab0 <eeprom::save_to_flash()>
			loop2=0;
    b62e:	f04f 0500 	mov.w	r5, #0
    b632:	e7d0      	b.n	b5d6 <main+0x96>
    b634:	00027518 	.word	0x00027518

0000b638 <_GLOBAL__sub_I_WDT_IRQHandler>:
		}
	}
	return 0;
}
    b638:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
    b63a:	f640 503c 	movw	r0, #3388	; 0xd3c
    b63e:	f2c1 0000 	movt	r0, #4096	; 0x1000
    b642:	f04f 0100 	mov.w	r1, #0
    b646:	f006 faf9 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
    b64a:	f640 5040 	movw	r0, #3392	; 0xd40
    b64e:	f2c1 0000 	movt	r0, #4096	; 0x1000
    b652:	f04f 0101 	mov.w	r1, #1
    b656:	f006 faf1 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
    b65a:	f640 5044 	movw	r0, #3396	; 0xd44
    b65e:	f2c1 0000 	movt	r0, #4096	; 0x1000
    b662:	f04f 0102 	mov.w	r1, #2
    b666:	f006 fae9 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
    b66a:	f640 5048 	movw	r0, #3400	; 0xd48
    b66e:	f2c1 0000 	movt	r0, #4096	; 0x1000
    b672:	f04f 0103 	mov.w	r1, #3
    b676:	f006 fae1 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
    b67a:	f640 504c 	movw	r0, #3404	; 0xd4c
    b67e:	f2c1 0000 	movt	r0, #4096	; 0x1000
    b682:	f04f 0104 	mov.w	r1, #4
    b686:	f006 fad9 	bl	11c3c <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
    b68a:	f640 5450 	movw	r4, #3408	; 0xd50
    b68e:	f2c1 0400 	movt	r4, #4096	; 0x1000
    b692:	4620      	mov	r0, r4
    b694:	f04f 01ff 	mov.w	r1, #255	; 0xff
    b698:	f006 fad0 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    b69c:	f640 5054 	movw	r0, #3412	; 0xd54
    b6a0:	f2c1 0000 	movt	r0, #4096	; 0x1000
    b6a4:	4621      	mov	r1, r4
    b6a6:	f04f 0200 	mov.w	r2, #0
    b6aa:	f006 fcd9 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    b6ae:	bd10      	pop	{r4, pc}

0000b6b0 <TemperatureSensor::~TemperatureSensor()>:
protected:
        /// The last temperature reading from the sensor, in degrees Celcius, or
        /// #BAD_TEMPERATURE if the last reading is invalid.
	volatile uint16_t current_temp;
public:
	virtual ~TemperatureSensor(){};
    b6b0:	4b01      	ldr	r3, [pc, #4]	; (b6b8 <TemperatureSensor::~TemperatureSensor()+0x8>)
    b6b2:	6003      	str	r3, [r0, #0]
    b6b4:	4770      	bx	lr
    b6b6:	bf00      	nop
    b6b8:	00027630 	.word	0x00027630

0000b6bc <TemperatureSensor::init()>:
	///         last read failed.
	int16_t getTemperature() const { return current_temp; }

	/// Initialize the temperature sensor hardware. Must be called before the temperature
	/// sensor can be used.
	virtual void init() {}
    b6bc:	4770      	bx	lr
    b6be:	bf00      	nop

0000b6c0 <BuildPlatformHeatingElement::~BuildPlatformHeatingElement()>:
    b6c0:	4b01      	ldr	r3, [pc, #4]	; (b6c8 <BuildPlatformHeatingElement::~BuildPlatformHeatingElement()+0x8>)
    b6c2:	6003      	str	r3, [r0, #0]
};


/// Build platform heating element on v34 Extruder controller
/// \ingroup ECv34
class BuildPlatformHeatingElement : public HeatingElement {
    b6c4:	4770      	bx	lr
    b6c6:	bf00      	nop
    b6c8:	00027460 	.word	0x00027460

0000b6cc <Motherboard::~Motherboard()>:
    b6cc:	4906      	ldr	r1, [pc, #24]	; (b6e8 <Motherboard::~Motherboard()+0x1c>)
    b6ce:	f8c0 1208 	str.w	r1, [r0, #520]	; 0x208
protected:
        /// The last temperature reading from the sensor, in degrees Celcius, or
        /// #BAD_TEMPERATURE if the last reading is invalid.
	volatile uint16_t current_temp;
public:
	virtual ~TemperatureSensor(){};
    b6d2:	4a06      	ldr	r2, [pc, #24]	; (b6ec <Motherboard::~Motherboard()+0x20>)
    b6d4:	f8c0 21e8 	str.w	r2, [r0, #488]	; 0x1e8
    b6d8:	f8c0 1128 	str.w	r1, [r0, #296]	; 0x128
    b6dc:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
    b6e0:	6481      	str	r1, [r0, #72]	; 0x48
    b6e2:	6282      	str	r2, [r0, #40]	; 0x28
};

/// Main class for Motherboard version 4.0+ (Gen4 electronics)
/// \ingroup HardwareLibraries
/// \ingroup MBv40
class Motherboard {
    b6e4:	4770      	bx	lr
    b6e6:	bf00      	nop
    b6e8:	00027460 	.word	0x00027460
    b6ec:	00027630 	.word	0x00027630

0000b6f0 <BuildPlatformHeatingElement::~BuildPlatformHeatingElement()>:
};


/// Build platform heating element on v34 Extruder controller
/// \ingroup ECv34
class BuildPlatformHeatingElement : public HeatingElement {
    b6f0:	b510      	push	{r4, lr}
    b6f2:	4604      	mov	r4, r0
    b6f4:	4b02      	ldr	r3, [pc, #8]	; (b700 <BuildPlatformHeatingElement::~BuildPlatformHeatingElement()+0x10>)
    b6f6:	6003      	str	r3, [r0, #0]
    b6f8:	f009 f8d2 	bl	148a0 <operator delete(void*)>
    b6fc:	4620      	mov	r0, r4
    b6fe:	bd10      	pop	{r4, pc}
    b700:	00027460 	.word	0x00027460

0000b704 <TemperatureSensor::~TemperatureSensor()>:
    b704:	b510      	push	{r4, lr}
    b706:	4604      	mov	r4, r0
    b708:	4b02      	ldr	r3, [pc, #8]	; (b714 <TemperatureSensor::~TemperatureSensor()+0x10>)
    b70a:	6003      	str	r3, [r0, #0]
    b70c:	f009 f8c8 	bl	148a0 <operator delete(void*)>
    b710:	4620      	mov	r0, r4
    b712:	bd10      	pop	{r4, pc}
    b714:	00027630 	.word	0x00027630

0000b718 <BuildPlatformHeatingElement::setHeatingElement(unsigned char)>:
		EXTRA_FET.setDirection(true);
		EXTRA_FET.setValue(on);
//	}
}

void BuildPlatformHeatingElement::setHeatingElement(uint8_t value) {
    b718:	b510      	push	{r4, lr}
    b71a:	b084      	sub	sp, #16
    b71c:	460c      	mov	r4, r1
	// This is a bit of a hack to get the temperatures right until we fix our
	// PWM'd PID implementation.  We reduce the MV to one bit, essentially.
	// It works relatively well.
//  	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		pwmHBP_On(false);
		HBP_HEAT.setValue(value != 0);
    b71e:	a803      	add	r0, sp, #12
    b720:	f04f 01ff 	mov.w	r1, #255	; 0xff
    b724:	f006 fa8a 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    b728:	a801      	add	r0, sp, #4
    b72a:	a903      	add	r1, sp, #12
    b72c:	f04f 02ff 	mov.w	r2, #255	; 0xff
    b730:	f006 fc96 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    b734:	f89d 3005 	ldrb.w	r3, [sp, #5]
    b738:	b9ab      	cbnz	r3, b766 <BuildPlatformHeatingElement::setHeatingElement(unsigned char)+0x4e>
		 	return;
		// uint8_t oldSREG = SREG;

//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
    b73a:	b154      	cbz	r4, b752 <BuildPlatformHeatingElement::setHeatingElement(unsigned char)+0x3a>
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    b73c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b740:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b744:	f04f 0101 	mov.w	r1, #1
    b748:	fa01 f103 	lsl.w	r1, r1, r3
    b74c:	f7f7 feca 	bl	34e4 <GPIO_SetValue>
    b750:	e009      	b.n	b766 <BuildPlatformHeatingElement::setHeatingElement(unsigned char)+0x4e>
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    b752:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b756:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b75a:	f04f 0101 	mov.w	r1, #1
    b75e:	fa01 f103 	lsl.w	r1, r1, r3
    b762:	f7f7 fec7 	bl	34f4 <GPIO_ClearValue>
//	}
}
    b766:	b004      	add	sp, #16
    b768:	bd10      	pop	{r4, pc}
    b76a:	bf00      	nop

0000b76c <Motherboard::Motherboard()>:

/// Instantiate static motherboard instance
Motherboard Motherboard::motherboard;

/// Create motherboard object
Motherboard::Motherboard() :
    b76c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b76e:	b093      	sub	sp, #76	; 0x4c
    b770:	4604      	mov	r4, r0
            platform_heater(platform_thermistor,platform_element,SAMPLE_INTERVAL_MICROS_THERMISTOR,
            		eeprom_offsets::T0_DATA_BASE + toolhead_eeprom_offsets::HBP_PID_BASE, false), //TRICKY: HBP is only and anways on T0 for this machine
			using_platform(false),
			Extruder_One(0, EX1_PWR, EX1_FAN, THERMOCOUPLE_CS1,eeprom_offsets::T0_DATA_BASE),
			Extruder_Two(1, EX2_PWR, EX2_FAN, THERMOCOUPLE_CS2,eeprom_offsets::T1_DATA_BASE),
			hasInterfaceBoard(0)
    b772:	f100 0004 	add.w	r0, r0, #4
    b776:	f007 f80d 	bl	12794 <Timeout::Timeout()>
    b77a:	f104 0014 	add.w	r0, r4, #20
    b77e:	f007 f809 	bl	12794 <Timeout::Timeout()>
    b782:	f04f 0600 	mov.w	r6, #0
    b786:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
    b78a:	f640 5770 	movw	r7, #3440	; 0xd70
    b78e:	f2c1 0700 	movt	r7, #4096	; 0x1000
    b792:	a802      	add	r0, sp, #8
    b794:	4639      	mov	r1, r7
    b796:	f04f 0204 	mov.w	r2, #4
    b79a:	f006 fc61 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    b79e:	a806      	add	r0, sp, #24
    b7a0:	f04f 01ff 	mov.w	r1, #255	; 0xff
    b7a4:	f006 fa4a 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    b7a8:	a804      	add	r0, sp, #16
    b7aa:	a906      	add	r1, sp, #24
    b7ac:	f04f 02ff 	mov.w	r2, #255	; 0xff
    b7b0:	f006 fc56 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    b7b4:	a809      	add	r0, sp, #36	; 0x24
    b7b6:	f04f 01ff 	mov.w	r1, #255	; 0xff
    b7ba:	f006 fa3f 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    b7be:	ad07      	add	r5, sp, #28
    b7c0:	4628      	mov	r0, r5
    b7c2:	a909      	add	r1, sp, #36	; 0x24
    b7c4:	f04f 02ff 	mov.w	r2, #255	; 0xff
    b7c8:	f006 fc4a 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    b7cc:	9500      	str	r5, [sp, #0]
    b7ce:	f44f 7380 	mov.w	r3, #256	; 0x100
    b7d2:	9301      	str	r3, [sp, #4]
    b7d4:	f104 0028 	add.w	r0, r4, #40	; 0x28
    b7d8:	4631      	mov	r1, r6
    b7da:	aa02      	add	r2, sp, #8
    b7dc:	ab04      	add	r3, sp, #16
    b7de:	f7fe fd43 	bl	a268 <ExtruderBoard::ExtruderBoard(unsigned char, Pin, Pin, Pin, unsigned short)>
    b7e2:	a80a      	add	r0, sp, #40	; 0x28
    b7e4:	4639      	mov	r1, r7
    b7e6:	f04f 0203 	mov.w	r2, #3
    b7ea:	f006 fc39 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    b7ee:	a80e      	add	r0, sp, #56	; 0x38
    b7f0:	f04f 01ff 	mov.w	r1, #255	; 0xff
    b7f4:	f006 fa22 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    b7f8:	a80c      	add	r0, sp, #48	; 0x30
    b7fa:	a90e      	add	r1, sp, #56	; 0x38
    b7fc:	f04f 02ff 	mov.w	r2, #255	; 0xff
    b800:	f006 fc2e 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    b804:	a811      	add	r0, sp, #68	; 0x44
    b806:	f04f 01ff 	mov.w	r1, #255	; 0xff
    b80a:	f006 fa17 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    b80e:	ad0f      	add	r5, sp, #60	; 0x3c
    b810:	4628      	mov	r0, r5
    b812:	a911      	add	r1, sp, #68	; 0x44
    b814:	f04f 02ff 	mov.w	r2, #255	; 0xff
    b818:	f006 fc22 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    b81c:	9500      	str	r5, [sp, #0]
    b81e:	f44f 738e 	mov.w	r3, #284	; 0x11c
    b822:	9301      	str	r3, [sp, #4]
    b824:	f504 7084 	add.w	r0, r4, #264	; 0x108
    b828:	f04f 0101 	mov.w	r1, #1
    b82c:	aa0a      	add	r2, sp, #40	; 0x28
    b82e:	ab0c      	add	r3, sp, #48	; 0x30
    b830:	f7fe fd1a 	bl	a268 <ExtruderBoard::ExtruderBoard(unsigned char, Pin, Pin, Pin, unsigned short)>
    b834:	f504 75f4 	add.w	r5, r4, #488	; 0x1e8
    b838:	4628      	mov	r0, r5
    b83a:	f04f 0118 	mov.w	r1, #24
    b83e:	4632      	mov	r2, r6
    b840:	f006 fce0 	bl	12204 <Thermistor::Thermistor(unsigned char, unsigned char)>
    b844:	4b0a      	ldr	r3, [pc, #40]	; (b870 <Motherboard::Motherboard()+0x104>)
    b846:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
    b84a:	f44f 7388 	mov.w	r3, #272	; 0x110
    b84e:	9300      	str	r3, [sp, #0]
    b850:	9601      	str	r6, [sp, #4]
    b852:	f504 7003 	add.w	r0, r4, #524	; 0x20c
    b856:	4629      	mov	r1, r5
    b858:	f504 7202 	add.w	r2, r4, #520	; 0x208
    b85c:	f24c 3350 	movw	r3, #50000	; 0xc350
    b860:	f005 fed2 	bl	11608 <Heater::Heater(TemperatureSensor&, HeatingElement&, unsigned long, unsigned short, bool)>
    b864:	f884 6298 	strb.w	r6, [r4, #664]	; 0x298
{
}
    b868:	4620      	mov	r0, r4
    b86a:	b013      	add	sp, #76	; 0x4c
    b86c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b86e:	bf00      	nop
    b870:	00027690 	.word	0x00027690

0000b874 <Motherboard::initClocks()>:

void Motherboard::initClocks(){
    b874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b878:	b094      	sub	sp, #80	; 0x50
	// Reset and configure timer 0, the piezo buzzer timer
	// Mode: Phase-correct PWM with OCRnA (WGM2:0 = 101)
	// Prescaler: set on call by piezo function
	TIM_TIMERCFG_Type TMR3_Cfg;
	TIM_MATCHCFG_Type TMR3_Match;
	TMR3_Cfg.PrescaleOption = TIM_PRESCALE_USVAL;
    b87a:	f04f 0601 	mov.w	r6, #1
    b87e:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
	TMR3_Cfg.PrescaleValue = 1; // reset to 1 - 1uS
    b882:	960a      	str	r6, [sp, #40]	; 0x28
	TMR3_Match.MatchChannel = TIM_MR0_INT;
    b884:	f04f 0400 	mov.w	r4, #0
    b888:	f88d 4000 	strb.w	r4, [sp]
	TMR3_Match.IntOnMatch = ENABLE;
    b88c:	f88d 6001 	strb.w	r6, [sp, #1]
	TMR3_Match.ResetOnMatch = ENABLE;
    b890:	f88d 6003 	strb.w	r6, [sp, #3]
	TMR3_Match.StopOnMatch = DISABLE;
    b894:	f88d 4002 	strb.w	r4, [sp, #2]
	TMR3_Match.ExtMatchOutputType = TIM_EXTMATCH_NOTHING;
    b898:	f88d 4004 	strb.w	r4, [sp, #4]
	// Set Match value, count value of INTERVAL_IN_MICROSECONDS (64 * 1uS = 64us )
	TMR3_Match.MatchValue = INTERVAL_IN_MICROSECONDS;
    b89c:	f04f 0880 	mov.w	r8, #128	; 0x80
    b8a0:	f8cd 8008 	str.w	r8, [sp, #8]
	// Set configuration for Tim_config and Tim_MatchConfig
	TIM_Init(LPC_TIM3, TIM_TIMER_MODE, &TMR3_Cfg);
    b8a4:	f44f 4580 	mov.w	r5, #16384	; 0x4000
    b8a8:	f2c4 0509 	movt	r5, #16393	; 0x4009
    b8ac:	4628      	mov	r0, r5
    b8ae:	4621      	mov	r1, r4
    b8b0:	aa09      	add	r2, sp, #36	; 0x24
    b8b2:	f7f8 faa7 	bl	3e04 <TIM_Init>
	TIM_ConfigMatch(LPC_TIM3, &TMR3_Match);
    b8b6:	4628      	mov	r0, r5
    b8b8:	4669      	mov	r1, sp
    b8ba:	f7f8 fbf3 	bl	40a4 <TIM_ConfigMatch>
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    b8be:	f44f 4761 	mov.w	r7, #57600	; 0xe100
    b8c2:	f2ce 0700 	movt	r7, #57344	; 0xe000
    b8c6:	f887 8304 	strb.w	r8, [r7, #772]	; 0x304
	NVIC_SetPriority(TIMER3_IRQn, 16);
	TIM_ResetCounter(LPC_TIM3);
    b8ca:	4628      	mov	r0, r5
    b8cc:	f7f8 fbb8 	bl	4040 <TIM_ResetCounter>
	TIM_Cmd(LPC_TIM3,ENABLE);
    b8d0:	4628      	mov	r0, r5
    b8d2:	4631      	mov	r1, r6
    b8d4:	f7f8 fb80 	bl	3fd8 <TIM_Cmd>

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    b8d8:	f04f 0310 	mov.w	r3, #16
    b8dc:	603b      	str	r3, [r7, #0]
	
	// Reset and configure timer 3, the microsecond and stepper // Steppers only now!
	// interrupt timer.
	TIM_TIMERCFG_Type TMR0_Cfg;
	TIM_MATCHCFG_Type TMR0_Match;
	TMR0_Cfg.PrescaleOption = TIM_PRESCALE_USVAL;
    b8de:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
	TMR0_Cfg.PrescaleValue = 1;
    b8e2:	960c      	str	r6, [sp, #48]	; 0x30
	TMR0_Match.MatchChannel = TIM_MR0_INT;
    b8e4:	f88d 400c 	strb.w	r4, [sp, #12]
	TMR0_Match.IntOnMatch = ENABLE;
    b8e8:	f88d 600d 	strb.w	r6, [sp, #13]
	TMR0_Match.ResetOnMatch = ENABLE;
    b8ec:	f88d 600f 	strb.w	r6, [sp, #15]
	TMR0_Match.StopOnMatch = DISABLE;
    b8f0:	f88d 400e 	strb.w	r4, [sp, #14]
	TMR0_Match.ExtMatchOutputType = TIM_EXTMATCH_NOTHING;
    b8f4:	f88d 4010 	strb.w	r4, [sp, #16]
	// Set Match value, count value of 100 (10 * 10000uS = 100000us = 1s --> 10 Hz)
	TMR0_Match.MatchValue = INTERVAL_IN_MICROSECONDS; // 16 for 16mhz avr
    b8f8:	f8cd 8014 	str.w	r8, [sp, #20]
	// Set configuration for Tim_config and Tim_MatchConfig
	TIM_Init(LPC_TIM0, TIM_TIMER_MODE, &TMR0_Cfg);
    b8fc:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    b900:	4621      	mov	r1, r4
    b902:	aa0b      	add	r2, sp, #44	; 0x2c
    b904:	f7f8 fa7e 	bl	3e04 <TIM_Init>
	TIM_ConfigMatch(LPC_TIM0, &TMR0_Match);
    b908:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    b90c:	a903      	add	r1, sp, #12
    b90e:	f7f8 fbc9 	bl	40a4 <TIM_ConfigMatch>
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    b912:	f04f 0a08 	mov.w	sl, #8
    b916:	f887 a301 	strb.w	sl, [r7, #769]	; 0x301
	NVIC_SetPriority(TIMER0_IRQn, 1);
	TIM_ResetCounter(LPC_TIM0);
    b91a:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    b91e:	f7f8 fb8f 	bl	4040 <TIM_ResetCounter>
	TIM_Cmd(LPC_TIM0,ENABLE);
    b922:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    b926:	4631      	mov	r1, r6
    b928:	f7f8 fb56 	bl	3fd8 <TIM_Cmd>

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    b92c:	f04f 0902 	mov.w	r9, #2
    b930:	f8c7 9000 	str.w	r9, [r7]
//	TIMSK3 = 0x02; // turn on OCR3A match interrupt

	// Reset and configure timer 2, the microsecond timer and debug LED flasher timer.
	TIM_TIMERCFG_Type TMR2_Cfg;
	TIM_MATCHCFG_Type TMR2_Match;
	TMR2_Cfg.PrescaleOption = TIM_PRESCALE_USVAL;
    b934:	f88d 6034 	strb.w	r6, [sp, #52]	; 0x34
	TMR2_Cfg.PrescaleValue = 1; // reset to 1 - 1uS
    b938:	960e      	str	r6, [sp, #56]	; 0x38
	// Use channel 1, MR1
	TMR2_Match.MatchChannel = TIM_MR0_INT;
    b93a:	f88d 4018 	strb.w	r4, [sp, #24]
	// Enable interrupt when MR0 matches the value in TC register
	TMR2_Match.IntOnMatch = ENABLE;
    b93e:	f88d 6019 	strb.w	r6, [sp, #25]
	// Enable reset on MR0: TIMER will reset if MR0 matches it
	TMR2_Match.ResetOnMatch = ENABLE;
    b942:	f88d 601b 	strb.w	r6, [sp, #27]
	// Don't stop on MR0 if MR0 matches it
	TMR2_Match.StopOnMatch = DISABLE;
    b946:	f88d 401a 	strb.w	r4, [sp, #26]
	// Do nothing for external output pin if match (see cmsis help, there are another options)
	TMR2_Match.ExtMatchOutputType = TIM_EXTMATCH_NOTHING;
    b94a:	f88d 401c 	strb.w	r4, [sp, #28]
	// Set Match value, count value of INTERVAL_IN_MICROSECONDS (64 * 1uS = 64us )
	TMR2_Match.MatchValue = INTERVAL_IN_MICROSECONDS;// *10000;
    b94e:	f8cd 8020 	str.w	r8, [sp, #32]
	// Set configuration for Tim_config and Tim_MatchConfig
	TIM_Init(LPC_TIM2, TIM_TIMER_MODE, &TMR2_Cfg);
    b952:	4625      	mov	r5, r4
    b954:	f2c4 0509 	movt	r5, #16393	; 0x4009
    b958:	4628      	mov	r0, r5
    b95a:	4621      	mov	r1, r4
    b95c:	aa0d      	add	r2, sp, #52	; 0x34
    b95e:	f7f8 fa51 	bl	3e04 <TIM_Init>
	TIM_ConfigMatch(LPC_TIM2, &TMR2_Match);
    b962:	4628      	mov	r0, r5
    b964:	a906      	add	r1, sp, #24
    b966:	f7f8 fb9d 	bl	40a4 <TIM_ConfigMatch>
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    b96a:	f04f 0360 	mov.w	r3, #96	; 0x60
    b96e:	f887 3303 	strb.w	r3, [r7, #771]	; 0x303
	NVIC_SetPriority(TIMER2_IRQn, 12);
	TIM_ResetCounter(LPC_TIM2);
    b972:	4628      	mov	r0, r5
    b974:	f7f8 fb64 	bl	4040 <TIM_ResetCounter>
	TIM_Cmd(LPC_TIM2,ENABLE);
    b978:	4628      	mov	r0, r5
    b97a:	4631      	mov	r1, r6
    b97c:	f7f8 fb2c 	bl	3fd8 <TIM_Cmd>

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    b980:	f8c7 a000 	str.w	sl, [r7]
	TCCR5B = 0x09;
	OCR5A =  0;
	OCR5B = 0;
	TIMSK5 = 0x0; */

	xprintf("// Setup PWM timer" " (%s:%d)\n",_F_,_L_);
    b984:	f247 6040 	movw	r0, #30272	; 0x7640
    b988:	f2c0 0002 	movt	r0, #2
    b98c:	4949      	ldr	r1, [pc, #292]	; (bab4 <Motherboard::initClocks()+0x240>)
    b98e:	f04f 02a8 	mov.w	r2, #168	; 0xa8
    b992:	f7fa ffdf 	bl	6954 <xprintf>
	// Setup PWM timer
	PWM_TIMERCFG_Type PWMCfgDat;
	PWM_MATCHCFG_Type PWMMatchCfgDat;
	PWMCfgDat.PrescaleOption = PWM_TIMER_PRESCALE_USVAL;
    b996:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
	PWMCfgDat.PrescaleValue = 1000;
    b99a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    b99e:	9310      	str	r3, [sp, #64]	; 0x40
	PWM_Init(LPC_PWM1, PWM_MODE_TIMER, &PWMCfgDat);
    b9a0:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    b9a4:	f2c4 0501 	movt	r5, #16385	; 0x4001
    b9a8:	4628      	mov	r0, r5
    b9aa:	4621      	mov	r1, r4
    b9ac:	aa0f      	add	r2, sp, #60	; 0x3c
    b9ae:	f7f7 fe09 	bl	35c4 <PWM_Init>
	PWMMatchCfgDat.MatchChannel = 0;
    b9b2:	f88d 404c 	strb.w	r4, [sp, #76]	; 0x4c
	PWMMatchCfgDat.IntOnMatch = DISABLE;
    b9b6:	f88d 404d 	strb.w	r4, [sp, #77]	; 0x4d
	PWMMatchCfgDat.ResetOnMatch = ENABLE;
    b9ba:	f88d 604f 	strb.w	r6, [sp, #79]	; 0x4f
	PWMMatchCfgDat.StopOnMatch = DISABLE;
    b9be:	f88d 404e 	strb.w	r4, [sp, #78]	; 0x4e
	PWM_ConfigMatch(LPC_PWM1, &PWMMatchCfgDat);
    b9c2:	4628      	mov	r0, r5
    b9c4:	a913      	add	r1, sp, #76	; 0x4c
    b9c6:	f7f7 fee1 	bl	378c <PWM_ConfigMatch>
	PWM_ResetCounter(LPC_PWM1);
    b9ca:	4628      	mov	r0, r5
    b9cc:	f7f7 fec4 	bl	3758 <PWM_ResetCounter>
	PWM_MatchUpdate(LPC_PWM1, 0, 500, PWM_MATCH_UPDATE_NOW);
    b9d0:	4628      	mov	r0, r5
    b9d2:	4621      	mov	r1, r4
    b9d4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    b9d8:	4623      	mov	r3, r4
    b9da:	f7f7 ff7b 	bl	38d4 <PWM_MatchUpdate>
	PINSEL_CFG_Type PinCfg;

	// reset and configure timer 1, the Extruder Two PWM timer
	// Mode: Fast PWM with TOP=0xFF (8bit) (WGM3:0 = 0101), cycle freq= 976 Hz
	// Prescaler: 1/64 (250 KHz)
	PinCfg.Funcnum = 1;
    b9de:	f88d 6046 	strb.w	r6, [sp, #70]	; 0x46
	PinCfg.OpenDrain = 0;
    b9e2:	f88d 4048 	strb.w	r4, [sp, #72]	; 0x48
	PinCfg.Pinmode = 0;
    b9e6:	f88d 4047 	strb.w	r4, [sp, #71]	; 0x47
	PinCfg.Portnum = 2;
    b9ea:	f88d 9044 	strb.w	r9, [sp, #68]	; 0x44
	PinCfg.Pinnum = 3;
    b9ee:	f04f 0303 	mov.w	r3, #3
    b9f2:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
	PINSEL_ConfigPin(&PinCfg);
    b9f6:	a811      	add	r0, sp, #68	; 0x44
    b9f8:	f7f7 fd94 	bl	3524 <PINSEL_ConfigPin>
	PWM_ChannelConfig(LPC_PWM1, 4, PWM_CHANNEL_SINGLE_EDGE);
    b9fc:	4628      	mov	r0, r5
    b9fe:	f04f 0104 	mov.w	r1, #4
    ba02:	4622      	mov	r2, r4
    ba04:	f7f7 ffbc 	bl	3980 <PWM_ChannelConfig>
	PWM_MatchUpdate(LPC_PWM1, 4, 250, PWM_MATCH_UPDATE_NOW);
    ba08:	4628      	mov	r0, r5
    ba0a:	f04f 0104 	mov.w	r1, #4
    ba0e:	f04f 02fa 	mov.w	r2, #250	; 0xfa
    ba12:	4623      	mov	r3, r4
    ba14:	f7f7 ff5e 	bl	38d4 <PWM_MatchUpdate>
	PWMMatchCfgDat.MatchChannel = 4;
    ba18:	f04f 0704 	mov.w	r7, #4
    ba1c:	f88d 704c 	strb.w	r7, [sp, #76]	; 0x4c
	PWMMatchCfgDat.IntOnMatch = DISABLE;
    ba20:	f88d 404d 	strb.w	r4, [sp, #77]	; 0x4d
	PWMMatchCfgDat.ResetOnMatch = ENABLE;
    ba24:	f88d 604f 	strb.w	r6, [sp, #79]	; 0x4f
	PWMMatchCfgDat.StopOnMatch = DISABLE;
    ba28:	f88d 404e 	strb.w	r4, [sp, #78]	; 0x4e
	PWM_ConfigMatch(LPC_PWM1, &PWMMatchCfgDat);
    ba2c:	4628      	mov	r0, r5
    ba2e:	a913      	add	r1, sp, #76	; 0x4c
    ba30:	f7f7 feac 	bl	378c <PWM_ConfigMatch>
	PWM_ChannelCmd(LPC_PWM1, 4, ENABLE);
    ba34:	4628      	mov	r0, r5
    ba36:	4639      	mov	r1, r7
    ba38:	4632      	mov	r2, r6
    ba3a:	f7f7 ffe9 	bl	3a10 <PWM_ChannelCmd>
//	TIMSK1 = 0b00000000; // no interrupts needed
	
	// reset and configure timer 2, the Extruder One PWM timer
	// Mode: Fast PWM with TOP=0xFF (8bit) (WGM3:0 = 0101), cycle freq= 976 Hz
	// Prescaler: 1/64 (250 KHz)
	PinCfg.Funcnum = 1;
    ba3e:	f88d 6046 	strb.w	r6, [sp, #70]	; 0x46
	PinCfg.OpenDrain = 0;
    ba42:	f88d 4048 	strb.w	r4, [sp, #72]	; 0x48
	PinCfg.Pinmode = 0;
    ba46:	f88d 4047 	strb.w	r4, [sp, #71]	; 0x47
	PinCfg.Portnum = 2;
    ba4a:	f88d 9044 	strb.w	r9, [sp, #68]	; 0x44
	PinCfg.Pinnum = 4;
    ba4e:	f88d 7045 	strb.w	r7, [sp, #69]	; 0x45
	PINSEL_ConfigPin(&PinCfg);
    ba52:	a811      	add	r0, sp, #68	; 0x44
    ba54:	f7f7 fd66 	bl	3524 <PINSEL_ConfigPin>
	PWM_ConfigMatch(LPC_PWM1, &PWMMatchCfgDat);
    ba58:	4628      	mov	r0, r5
    ba5a:	a913      	add	r1, sp, #76	; 0x4c
    ba5c:	f7f7 fe96 	bl	378c <PWM_ConfigMatch>
	PWM_ChannelConfig(LPC_PWM1, 5, PWM_CHANNEL_SINGLE_EDGE);
    ba60:	4628      	mov	r0, r5
    ba62:	f04f 0105 	mov.w	r1, #5
    ba66:	4622      	mov	r2, r4
    ba68:	f7f7 ff8a 	bl	3980 <PWM_ChannelConfig>
	PWM_MatchUpdate(LPC_PWM1, 5, 250, PWM_MATCH_UPDATE_NOW);
    ba6c:	4628      	mov	r0, r5
    ba6e:	f04f 0105 	mov.w	r1, #5
    ba72:	f04f 02fa 	mov.w	r2, #250	; 0xfa
    ba76:	4623      	mov	r3, r4
    ba78:	f7f7 ff2c 	bl	38d4 <PWM_MatchUpdate>
	PWMMatchCfgDat.MatchChannel = 5;
    ba7c:	f04f 0105 	mov.w	r1, #5
    ba80:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
	PWMMatchCfgDat.IntOnMatch = DISABLE;
    ba84:	f88d 404d 	strb.w	r4, [sp, #77]	; 0x4d
	PWMMatchCfgDat.ResetOnMatch = ENABLE;
    ba88:	f88d 604f 	strb.w	r6, [sp, #79]	; 0x4f
	PWMMatchCfgDat.StopOnMatch = DISABLE;
    ba8c:	f88d 404e 	strb.w	r4, [sp, #78]	; 0x4e
	PWM_ChannelCmd(LPC_PWM1, 5, ENABLE);
    ba90:	4628      	mov	r0, r5
    ba92:	4632      	mov	r2, r6
    ba94:	f7f7 ffbc 	bl	3a10 <PWM_ChannelCmd>
//	OCR4A = 0;
//	OCR4B = 0;
//	TIMSK4 = 0b00000000; // no interrupts needed

	// Reset and Start counter
	PWM_ResetCounter(LPC_PWM1);
    ba98:	4628      	mov	r0, r5
    ba9a:	f7f7 fe5d 	bl	3758 <PWM_ResetCounter>
	PWM_CounterCmd(LPC_PWM1, ENABLE);
    ba9e:	4628      	mov	r0, r5
    baa0:	4631      	mov	r1, r6
    baa2:	f7f7 fe35 	bl	3710 <PWM_CounterCmd>
	// Start PWM now
	PWM_Cmd(LPC_PWM1, ENABLE);
    baa6:	4628      	mov	r0, r5
    baa8:	4631      	mov	r1, r6
    baaa:	f7f7 fe0d 	bl	36c8 <PWM_Cmd>
}
    baae:	b014      	add	sp, #80	; 0x50
    bab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bab4:	00027678 	.word	0x00027678

0000bab8 <Motherboard::getCurrentMicros()>:
/// Get the number of microseconds that have passed since
/// the board was booted.
micros_t Motherboard::getCurrentMicros() {
	micros_t micros_snapshot;
//	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		micros_snapshot = micros;
    bab8:	6800      	ldr	r0, [r0, #0]
//	}
	return micros_snapshot;
}
    baba:	4770      	bx	lr

0000babc <Motherboard::doInterrupt()>:

/// Run the motherboard interrupt
void Motherboard::doInterrupt() {
    babc:	b508      	push	{r3, lr}
	//micros += INTERVAL_IN_MICROSECONDS;
	// Do not move steppers if the board is in a paused state
//	xprintf("%d",command::isPaused());
	if (command::isPaused()) return;
    babe:	f7fc fbf3 	bl	82a8 <command::isPaused()>
    bac2:	b908      	cbnz	r0, bac8 <Motherboard::doInterrupt()+0xc>
	steppers::doInterrupt();
    bac4:	f004 faa4 	bl	10010 <steppers::doInterrupt()>
    bac8:	bd08      	pop	{r3, pc}
    baca:	bf00      	nop

0000bacc <Motherboard::heaterFail(HeaterFailMode)>:
}

bool connectionsErrorTriggered = false;

void Motherboard::heaterFail(HeaterFailMode mode){
    bacc:	b510      	push	{r4, lr}
    bace:	4604      	mov	r4, r0

    // record heat fail mode
	heatFailMode = mode;
    bad0:	f880 12a0 	strb.w	r1, [r0, #672]	; 0x2a0
    
	if(heatFailMode == HEATER_FAIL_NOT_PLUGGED_IN)
    bad4:	2902      	cmp	r1, #2
    bad6:	d119      	bne.n	bb0c <Motherboard::heaterFail(HeaterFailMode)+0x40>
	{
		// if single tool, one heater is not plugged in on purpose
		// do not trigger a heatFail message unless both heaters are unplugged 
		if(!platform_heater.has_failed() && eeprom::isSingleTool() && 
    bad8:	f500 7003 	add.w	r0, r0, #524	; 0x20c
    badc:	f005 ffb0 	bl	11a40 <Heater::has_failed()>
    bae0:	b9c8      	cbnz	r0, bb16 <Motherboard::heaterFail(HeaterFailMode)+0x4a>
    bae2:	f7fe f95d 	bl	9da0 <eeprom::isSingleTool()>
    bae6:	b1b0      	cbz	r0, bb16 <Motherboard::heaterFail(HeaterFailMode)+0x4a>
			(!(Extruder_One.getExtruderHeater().has_failed() && Extruder_Two.getExtruderHeater().has_failed())))
    bae8:	f104 0050 	add.w	r0, r4, #80	; 0x50
    baec:	f005 ffa8 	bl	11a40 <Heater::has_failed()>
    
	if(heatFailMode == HEATER_FAIL_NOT_PLUGGED_IN)
	{
		// if single tool, one heater is not plugged in on purpose
		// do not trigger a heatFail message unless both heaters are unplugged 
		if(!platform_heater.has_failed() && eeprom::isSingleTool() && 
    baf0:	b1c0      	cbz	r0, bb24 <Motherboard::heaterFail(HeaterFailMode)+0x58>
			(!(Extruder_One.getExtruderHeater().has_failed() && Extruder_Two.getExtruderHeater().has_failed())))
    baf2:	f504 7098 	add.w	r0, r4, #304	; 0x130
    baf6:	f005 ffa3 	bl	11a40 <Heater::has_failed()>
    bafa:	b198      	cbz	r0, bb24 <Motherboard::heaterFail(HeaterFailMode)+0x58>
    bafc:	e00b      	b.n	bb16 <Motherboard::heaterFail(HeaterFailMode)+0x4a>
				return;
        // only fire the heater not connected error once.  The user should be able to dismiss this one
		else if (connectionsErrorTriggered)
			return;
		else
			connectionsErrorTriggered =true;
    bafe:	f640 537e 	movw	r3, #3454	; 0xd7e
    bb02:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bb06:	f04f 0201 	mov.w	r2, #1
    bb0a:	701a      	strb	r2, [r3, #0]
	}
    
    // flag heat shutdown response
	heatShutdown = true;
    bb0c:	f04f 0301 	mov.w	r3, #1
    bb10:	f884 329d 	strb.w	r3, [r4, #669]	; 0x29d
    bb14:	bd10      	pop	{r4, pc}
		// do not trigger a heatFail message unless both heaters are unplugged 
		if(!platform_heater.has_failed() && eeprom::isSingleTool() && 
			(!(Extruder_One.getExtruderHeater().has_failed() && Extruder_Two.getExtruderHeater().has_failed())))
				return;
        // only fire the heater not connected error once.  The user should be able to dismiss this one
		else if (connectionsErrorTriggered)
    bb16:	f640 537e 	movw	r3, #3454	; 0xd7e
    bb1a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bb1e:	781b      	ldrb	r3, [r3, #0]
    bb20:	2b00      	cmp	r3, #0
    bb22:	d0ec      	beq.n	bafe <Motherboard::heaterFail(HeaterFailMode)+0x32>
    bb24:	bd10      	pop	{r4, pc}
    bb26:	bf00      	nop

0000bb28 <Motherboard::GetErrorStatus()>:
}

uint8_t Motherboard::GetErrorStatus(){

	return board_status;
}
    bb28:	f890 02a1 	ldrb.w	r0, [r0, #673]	; 0x2a1
    bb2c:	4770      	bx	lr
    bb2e:	bf00      	nop

0000bb30 <Motherboard::resetUserInputTimeout()>:
	

}

// reset user timeout to start from zero
void Motherboard::resetUserInputTimeout(){
    bb30:	b508      	push	{r3, lr}
	user_input_timeout.start(USER_INPUT_TIMEOUT);
    bb32:	f100 0014 	add.w	r0, r0, #20
    bb36:	f44f 4152 	mov.w	r1, #53760	; 0xd200
    bb3a:	f6c6 3149 	movt	r1, #27465	; 0x6b49
    bb3e:	f006 fe2f 	bl	127a0 <Timeout::start(unsigned long)>
}
    bb42:	bd08      	pop	{r3, pc}

0000bb44 <Motherboard::UpdateMicros()>:
#define MICROS_INTERVAL INTERVAL_IN_MICROSECONDS
//#define MICROS_INTERVAL 128

void Motherboard::UpdateMicros(){
//	xprintf("%x" " (%s:%d)\n",micros,_F_,_L_);
	micros += MICROS_INTERVAL;//_IN_MICROSECONDS;
    bb44:	6803      	ldr	r3, [r0, #0]
    bb46:	f103 0380 	add.w	r3, r3, #128	; 0x80
    bb4a:	6003      	str	r3, [r0, #0]
}
    bb4c:	4770      	bx	lr
    bb4e:	bf00      	nop

0000bb50 <TIMER0_IRQHandler>:
volatile uint32_t loop2;
volatile uint32_t loop3;

/// Timer three comparator match interrupt
//ISR(TIMER3_COMPA_vect) {
extern "C" void TIMER0_IRQHandler (void){
    bb50:	b508      	push	{r3, lr}
//	DEBUG_LED1.setDirection(true);
//	DEBUG_LED1.setValue(true);
//	xprintf("0" " (%s:%d)\n",_F_,_L_);
//	xprintf("TIMER0_IRQHandler" " (%s:%d)\n",_F_,_L_);
	TIM_ClearIntPending(LPC_TIM0, TIM_MR0_INT);
    bb52:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    bb56:	f04f 0100 	mov.w	r1, #0
    bb5a:	f7f8 f919 	bl	3d90 <TIM_ClearIntPending>
	Motherboard::getBoard().doInterrupt();
    bb5e:	f640 509c 	movw	r0, #3484	; 0xd9c
    bb62:	f2c1 0000 	movt	r0, #4096	; 0x1000
    bb66:	f7ff ffa9 	bl	babc <Motherboard::doInterrupt()>
//			led_toggle0 = led_toggle0^1;
//			DEBUG_LED1.setValue(led_toggle0);
		}
	}
//	DEBUG_LED1.setValue(false);
}
    bb6a:	bd08      	pop	{r3, pc}

0000bb6c <Motherboard::indicateError(int)>:
/// state trackers for blinking LEDS
int blink_state = BLINK_NONE;
int interface_blink_state = BLINK_NONE;

/// Write an error code to the debug pin.
void Motherboard::indicateError(int error_code) {
    bb6c:	b510      	push	{r4, lr}
    bb6e:	b084      	sub	sp, #16
	if (error_code == 0) {
    bb70:	460c      	mov	r4, r1
    bb72:	b9f9      	cbnz	r1, bbb4 <Motherboard::indicateError(int)+0x48>
		blink_state = BLINK_NONE;
    bb74:	f640 5360 	movw	r3, #3424	; 0xd60
    bb78:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bb7c:	f04f 0200 	mov.w	r2, #0
    bb80:	601a      	str	r2, [r3, #0]
		DEBUG_PIN.setValue(false);
    bb82:	a803      	add	r0, sp, #12
    bb84:	f04f 01ff 	mov.w	r1, #255	; 0xff
    bb88:	f006 f858 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    bb8c:	a801      	add	r0, sp, #4
    bb8e:	a903      	add	r1, sp, #12
    bb90:	f04f 02ff 	mov.w	r2, #255	; 0xff
    bb94:	f006 fa64 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    bb98:	f89d 3005 	ldrb.w	r3, [sp, #5]
    bb9c:	b9bb      	cbnz	r3, bbce <Motherboard::indicateError(int)+0x62>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    bb9e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    bba2:	f89d 0004 	ldrb.w	r0, [sp, #4]
    bba6:	f04f 0101 	mov.w	r1, #1
    bbaa:	fa01 f103 	lsl.w	r1, r1, r3
    bbae:	f7f7 fca1 	bl	34f4 <GPIO_ClearValue>
    bbb2:	e00c      	b.n	bbce <Motherboard::indicateError(int)+0x62>
	}
	else if (blink_count != error_code) {
    bbb4:	f241 0344 	movw	r3, #4164	; 0x1044
    bbb8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bbbc:	781b      	ldrb	r3, [r3, #0]
    bbbe:	4299      	cmp	r1, r3
		blink_state = BLINK_OFF;
    bbc0:	bf1f      	itttt	ne
    bbc2:	f640 5360 	movwne	r3, #3424	; 0xd60
    bbc6:	f2c1 0300 	movtne	r3, #4096	; 0x1000
    bbca:	2202      	movne	r2, #2
    bbcc:	601a      	strne	r2, [r3, #0]
	}
	blink_count = error_code;
    bbce:	b2e4      	uxtb	r4, r4
    bbd0:	f241 0344 	movw	r3, #4164	; 0x1044
    bbd4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bbd8:	701c      	strb	r4, [r3, #0]
}
    bbda:	b004      	add	sp, #16
    bbdc:	bd10      	pop	{r4, pc}
    bbde:	bf00      	nop

0000bbe0 <Motherboard::interfaceBlink(int, int)>:

// set on / off period for blinking interface LEDs
// if both times are zero, LEDs are full on, if just on-time is zero, LEDs are full OFF
void Motherboard::interfaceBlink(int on_time, int off_time){
	
	if(off_time == 0){
    bbe0:	4613      	mov	r3, r2
    bbe2:	b92a      	cbnz	r2, bbf0 <Motherboard::interfaceBlink(int, int)+0x10>
		interface_blink_state = BLINK_NONE;
    bbe4:	f640 5398 	movw	r3, #3480	; 0xd98
    bbe8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bbec:	601a      	str	r2, [r3, #0]
    bbee:	4770      	bx	lr
//		interface::setLEDs(true);
	}else if(on_time == 0){
    bbf0:	b939      	cbnz	r1, bc02 <Motherboard::interfaceBlink(int, int)+0x22>
		interface_blink_state = BLINK_NONE;
    bbf2:	f640 5398 	movw	r3, #3480	; 0xd98
    bbf6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bbfa:	f04f 0200 	mov.w	r2, #0
    bbfe:	601a      	str	r2, [r3, #0]
    bc00:	4770      	bx	lr
//		interface::setLEDs(false);
	} else{
		interface_on_time = on_time;
    bc02:	f640 525c 	movw	r2, #3420	; 0xd5c
    bc06:	f2c1 0200 	movt	r2, #4096	; 0x1000
    bc0a:	7011      	strb	r1, [r2, #0]
		interface_off_time = off_time;
    bc0c:	f640 527c 	movw	r2, #3452	; 0xd7c
    bc10:	f2c1 0200 	movt	r2, #4096	; 0x1000
    bc14:	7013      	strb	r3, [r2, #0]
		interface_blink_state = BLINK_ON;
    bc16:	f640 5398 	movw	r3, #3480	; 0xd98
    bc1a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bc1e:	f04f 0201 	mov.w	r2, #1
    bc22:	601a      	str	r2, [r3, #0]
    bc24:	4770      	bx	lr
    bc26:	bf00      	nop

0000bc28 <Motherboard::startButtonWait()>:
	heatShutdown = true;
}

// Motherboard class waits for a button press from the user
// used for firmware initiated error reporting
void Motherboard::startButtonWait(){
    bc28:	b510      	push	{r4, lr}
    bc2a:	4604      	mov	r4, r0
    // blink the interface LEDs
	interfaceBlink(25,15);
    bc2c:	f04f 0119 	mov.w	r1, #25
    bc30:	f04f 020f 	mov.w	r2, #15
    bc34:	f7ff ffd4 	bl	bbe0 <Motherboard::interfaceBlink(int, int)>
    
//	interfaceBoard.waitForButton(0xFF);
	buttonWait = true;
    bc38:	f04f 0301 	mov.w	r3, #1
    bc3c:	f884 329e 	strb.w	r3, [r4, #670]	; 0x29e

}
    bc40:	bd10      	pop	{r4, pc}
    bc42:	bf00      	nop

0000bc44 <Motherboard::errorResponse(char*, bool)>:

// set an error message on the interface and wait for user button press
void Motherboard::errorResponse(char msg[], bool reset_errorResponse){
    bc44:	b538      	push	{r3, r4, r5, lr}
    bc46:	4604      	mov	r4, r0
    bc48:	4615      	mov	r5, r2
//	interfaceBoard.errorMessage(msg);
	startButtonWait();
    bc4a:	f7ff ffed 	bl	bc28 <Motherboard::startButtonWait()>
	reset_request = reset_errorResponse;
    bc4e:	f884 529f 	strb.w	r5, [r4, #671]	; 0x29f
}
    bc52:	bd38      	pop	{r3, r4, r5, pc}

0000bc54 <Motherboard::runMotherboardSlice()>:
}


bool triggered = false;
// main motherboard loop
void Motherboard::runMotherboardSlice() {
    bc54:	b570      	push	{r4, r5, r6, lr}
    bc56:	4604      	mov	r4, r0
//			interface_update_timeout.start(interfaceBoard.getUpdateRate());
//			stagger = STAGGER_MID;
//		}
//	}
			   
    if(isUsingPlatform()) {
    bc58:	f890 3298 	ldrb.w	r3, [r0, #664]	; 0x298
    bc5c:	b11b      	cbz	r3, bc66 <Motherboard::runMotherboardSlice()+0x12>
		// manage heating loops for the HBP
		platform_heater.manage_temperature();
    bc5e:	f500 7003 	add.w	r0, r0, #524	; 0x20c
    bc62:	f005 fe05 	bl	11870 <Heater::manage_temperature()>
		
//	}

	// if no user input for USER_INPUT_TIMEOUT, shutdown heaters and warn user
    // don't do this if a heat failure has occured ( in this case heaters are already shutdown and separate error messaging used)
    if(user_input_timeout.hasElapsed() && !heatShutdown && (host::getHostState() != host::HOST_STATE_BUILDING_FROM_SD) && (host::getHostState() != host::HOST_STATE_BUILDING)){
    bc66:	f104 0514 	add.w	r5, r4, #20
    bc6a:	4628      	mov	r0, r5
    bc6c:	f006 fdac 	bl	127c8 <Timeout::hasElapsed()>
    bc70:	2800      	cmp	r0, #0
    bc72:	d044      	beq.n	bcfe <Motherboard::runMotherboardSlice()+0xaa>
    bc74:	f894 329d 	ldrb.w	r3, [r4, #669]	; 0x29d
    bc78:	2b00      	cmp	r3, #0
    bc7a:	d140      	bne.n	bcfe <Motherboard::runMotherboardSlice()+0xaa>
    bc7c:	f7fe fc50 	bl	a520 <host::getHostState()>
    bc80:	2802      	cmp	r0, #2
    bc82:	d03c      	beq.n	bcfe <Motherboard::runMotherboardSlice()+0xaa>
    bc84:	f7fe fc4c 	bl	a520 <host::getHostState()>
    bc88:	2801      	cmp	r0, #1
    bc8a:	d038      	beq.n	bcfe <Motherboard::runMotherboardSlice()+0xaa>
        // clear timeout
		user_input_timeout.clear();
    bc8c:	4628      	mov	r0, r5
    bc8e:	f006 fdb9 	bl	12804 <Timeout::clear()>
		
		board_status |= STATUS_HEAT_INACTIVE_SHUTDOWN;
    bc92:	f894 32a1 	ldrb.w	r3, [r4, #673]	; 0x2a1
    bc96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bc9a:	f884 32a1 	strb.w	r3, [r4, #673]	; 0x2a1
		
		// alert user if heaters are not already set to 0
		if((Extruder_One.getExtruderHeater().get_set_temperature() > 0) ||
    bc9e:	f104 0550 	add.w	r5, r4, #80	; 0x50
    bca2:	4628      	mov	r0, r5
    bca4:	f005 fd50 	bl	11748 <Heater::get_set_temperature()>
    bca8:	2800      	cmp	r0, #0
    bcaa:	dc0b      	bgt.n	bcc4 <Motherboard::runMotherboardSlice()+0x70>
			(Extruder_Two.getExtruderHeater().get_set_temperature() > 0) ||
    bcac:	f504 7098 	add.w	r0, r4, #304	; 0x130
    bcb0:	f005 fd4a 	bl	11748 <Heater::get_set_temperature()>
		user_input_timeout.clear();
		
		board_status |= STATUS_HEAT_INACTIVE_SHUTDOWN;
		
		// alert user if heaters are not already set to 0
		if((Extruder_One.getExtruderHeater().get_set_temperature() > 0) ||
    bcb4:	2800      	cmp	r0, #0
    bcb6:	dc05      	bgt.n	bcc4 <Motherboard::runMotherboardSlice()+0x70>
			(Extruder_Two.getExtruderHeater().get_set_temperature() > 0) ||
			(platform_heater.get_set_temperature() > 0)){
    bcb8:	f504 7003 	add.w	r0, r4, #524	; 0x20c
    bcbc:	f005 fd44 	bl	11748 <Heater::get_set_temperature()>
		user_input_timeout.clear();
		
		board_status |= STATUS_HEAT_INACTIVE_SHUTDOWN;
		
		// alert user if heaters are not already set to 0
		if((Extruder_One.getExtruderHeater().get_set_temperature() > 0) ||
    bcc0:	2800      	cmp	r0, #0
    bcc2:	dd0b      	ble.n	bcdc <Motherboard::runMotherboardSlice()+0x88>
			(Extruder_Two.getExtruderHeater().get_set_temperature() > 0) ||
			(platform_heater.get_set_temperature() > 0)){
//				interfaceBoard.errorMessage(HEATER_INACTIVITY_MSG);//37
				startButtonWait();
    bcc4:	4620      	mov	r0, r4
    bcc6:	f7ff ffaf 	bl	bc28 <Motherboard::startButtonWait()>
                // turn LEDs blue
				RGB_LED::setColor(0,0,255, true);
    bcca:	f04f 0000 	mov.w	r0, #0
    bcce:	4601      	mov	r1, r0
    bcd0:	f04f 02ff 	mov.w	r2, #255	; 0xff
    bcd4:	f04f 0301 	mov.w	r3, #1
    bcd8:	f002 f876 	bl	ddc8 <RGB_LED::setColor(unsigned char, unsigned char, unsigned char, bool)>
		}
        // set tempertures to 0
		Extruder_One.getExtruderHeater().set_target_temperature(0);
    bcdc:	4628      	mov	r0, r5
    bcde:	f04f 0100 	mov.w	r1, #0
    bce2:	f005 fcb7 	bl	11654 <Heater::set_target_temperature(int)>
		Extruder_Two.getExtruderHeater().set_target_temperature(0);
    bce6:	f504 7098 	add.w	r0, r4, #304	; 0x130
    bcea:	f04f 0100 	mov.w	r1, #0
    bcee:	f005 fcb1 	bl	11654 <Heater::set_target_temperature(int)>
		platform_heater.set_target_temperature(0);
    bcf2:	f504 7003 	add.w	r0, r4, #524	; 0x20c
    bcf6:	f04f 0100 	mov.w	r1, #0
    bcfa:	f005 fcab 	bl	11654 <Heater::set_target_temperature(int)>
	}
	
    // respond to heatshutdown.  response only needs to be called once
	if(heatShutdown && !triggered && !Piezo::isPlaying())
    bcfe:	f894 329d 	ldrb.w	r3, [r4, #669]	; 0x29d
    bd02:	2b00      	cmp	r3, #0
    bd04:	d048      	beq.n	bd98 <Motherboard::runMotherboardSlice()+0x144>
    bd06:	f640 538c 	movw	r3, #3468	; 0xd8c
    bd0a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bd0e:	781b      	ldrb	r3, [r3, #0]
    bd10:	2b00      	cmp	r3, #0
    bd12:	d141      	bne.n	bd98 <Motherboard::runMotherboardSlice()+0x144>
    bd14:	f000 fbb4 	bl	c480 <Piezo::isPlaying()>
    bd18:	2800      	cmp	r0, #0
    bd1a:	d13d      	bne.n	bd98 <Motherboard::runMotherboardSlice()+0x144>
	{
        triggered = true;
    bd1c:	f640 538c 	movw	r3, #3468	; 0xd8c
    bd20:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bd24:	f04f 0201 	mov.w	r2, #1
    bd28:	701a      	strb	r2, [r3, #0]
		// rgb led response
		interfaceBlink(10,10);
    bd2a:	4620      	mov	r0, r4
    bd2c:	f04f 010a 	mov.w	r1, #10
    bd30:	460a      	mov	r2, r1
    bd32:	f7ff ff55 	bl	bbe0 <Motherboard::interfaceBlink(int, int)>
        // set all heater temperatures to zero
        Extruder_One.getExtruderHeater().set_target_temperature(0);
    bd36:	f104 0050 	add.w	r0, r4, #80	; 0x50
    bd3a:	f04f 0100 	mov.w	r1, #0
    bd3e:	f005 fc89 	bl	11654 <Heater::set_target_temperature(int)>
		Extruder_Two.getExtruderHeater().set_target_temperature(0);
    bd42:	f504 7098 	add.w	r0, r4, #304	; 0x130
    bd46:	f04f 0100 	mov.w	r1, #0
    bd4a:	f005 fc83 	bl	11654 <Heater::set_target_temperature(int)>
		platform_heater.set_target_temperature(0);
    bd4e:	f504 7003 	add.w	r0, r4, #524	; 0x20c
    bd52:	f04f 0100 	mov.w	r1, #0
    bd56:	f005 fc7d 	bl	11654 <Heater::set_target_temperature(int)>
		/// error message
		switch (heatFailMode){
    bd5a:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
    bd5e:	2b02      	cmp	r3, #2
    bd60:	d107      	bne.n	bd72 <Motherboard::runMotherboardSlice()+0x11e>
			case HEATER_FAIL_DROPPING_TEMP:
//				interfaceBoard.errorMessage(HEATER_FAIL_DROPPING_TEMP_MSG);//,79);
				break;
			case HEATER_FAIL_NOT_PLUGGED_IN:
//				interfaceBoard.errorMessage(HEATER_FAIL_NOT_PLUGGED_IN_MSG);//,79);
                startButtonWait();
    bd62:	4620      	mov	r0, r4
    bd64:	f7ff ff60 	bl	bc28 <Motherboard::startButtonWait()>
                heatShutdown = false;
    bd68:	f04f 0300 	mov.w	r3, #0
    bd6c:	f884 329d 	strb.w	r3, [r4, #669]	; 0x29d
                return;
    bd70:	bd70      	pop	{r4, r5, r6, pc}
		}
        // blink LEDS red
		RGB_LED::errorSequence();
    bd72:	f002 f815 	bl	dda0 <RGB_LED::errorSequence()>
		// disable command processing and steppers
		host::heatShutdown();
    bd76:	f7fe fb45 	bl	a404 <host::heatShutdown()>
		command::heatShutdown();
    bd7a:	f7fc fa8d 	bl	8298 <command::heatShutdown()>
		planner::abort();
    bd7e:	f001 fc69 	bl	d654 <planner::abort()>
        for(int i = 0; i < STEPPER_COUNT; i++)
    bd82:	f04f 0500 	mov.w	r5, #0
			steppers::enableAxis(i, false);
    bd86:	462e      	mov	r6, r5
    bd88:	b2e8      	uxtb	r0, r5
    bd8a:	4631      	mov	r1, r6
    bd8c:	f003 ffa4 	bl	fcd8 <steppers::enableAxis(unsigned char, bool)>
		RGB_LED::errorSequence();
		// disable command processing and steppers
		host::heatShutdown();
		command::heatShutdown();
		planner::abort();
        for(int i = 0; i < STEPPER_COUNT; i++)
    bd90:	f105 0501 	add.w	r5, r5, #1
    bd94:	2d04      	cmp	r5, #4
    bd96:	d1f7      	bne.n	bd88 <Motherboard::runMotherboardSlice()+0x134>
			steppers::enableAxis(i, false);
	}
		       
	// Temperature monitoring thread
	// stagger mid accounts for the case when we've just run the interface update
	if(stagger == STAGGER_MID){
    bd98:	f640 537d 	movw	r3, #3453	; 0xd7d
    bd9c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bda0:	781b      	ldrb	r3, [r3, #0]
    bda2:	2b01      	cmp	r3, #1
    bda4:	d107      	bne.n	bdb6 <Motherboard::runMotherboardSlice()+0x162>
		stagger = STAGGER_EX1;
    bda6:	f640 537d 	movw	r3, #3453	; 0xd7d
    bdaa:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bdae:	f04f 0203 	mov.w	r2, #3
    bdb2:	701a      	strb	r2, [r3, #0]
    bdb4:	bd70      	pop	{r4, r5, r6, pc}
	}else if(stagger == STAGGER_EX1){
    bdb6:	2b03      	cmp	r3, #3
    bdb8:	d10b      	bne.n	bdd2 <Motherboard::runMotherboardSlice()+0x17e>
		Extruder_One.runExtruderSlice();
    bdba:	f104 0028 	add.w	r0, r4, #40	; 0x28
    bdbe:	f7fe f997 	bl	a0f0 <ExtruderBoard::runExtruderSlice()>
		stagger = STAGGER_EX2;
    bdc2:	f640 537d 	movw	r3, #3453	; 0xd7d
    bdc6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bdca:	f04f 0202 	mov.w	r2, #2
    bdce:	701a      	strb	r2, [r3, #0]
    bdd0:	bd70      	pop	{r4, r5, r6, pc}
	}else if (stagger == STAGGER_EX2){
    bdd2:	2b02      	cmp	r3, #2
    bdd4:	d10a      	bne.n	bdec <Motherboard::runMotherboardSlice()+0x198>
		Extruder_Two.runExtruderSlice();
    bdd6:	f504 7084 	add.w	r0, r4, #264	; 0x108
    bdda:	f7fe f989 	bl	a0f0 <ExtruderBoard::runExtruderSlice()>
//		stagger = STAGGER_INTERFACE;
		stagger = STAGGER_MID;
    bdde:	f640 537d 	movw	r3, #3453	; 0xd7d
    bde2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bde6:	f04f 0201 	mov.w	r2, #1
    bdea:	701a      	strb	r2, [r3, #0]
    bdec:	bd70      	pop	{r4, r5, r6, pc}
    bdee:	bf00      	nop

0000bdf0 <Motherboard::reset(bool)>:
}stagger = STAGGER_INTERFACE;

/// Reset the motherboard to its initial state.
/// This only resets the board, and does not send a reset
/// to any attached toolheads.
void Motherboard::reset(bool hard_reset) {
    bdf0:	b570      	push	{r4, r5, r6, lr}
    bdf2:	b0a4      	sub	sp, #144	; 0x90
    bdf4:	4604      	mov	r4, r0
    bdf6:	460e      	mov	r6, r1
	indicateError(0); // turn on blinker
    bdf8:	f04f 0100 	mov.w	r1, #0
    bdfc:	f7ff feb6 	bl	bb6c <Motherboard::indicateError(int)>

	// Init steppers
	uint8_t axis_invert = eeprom::getEeprom8(eeprom_offsets::AXIS_INVERSION, 0);
    be00:	f04f 0002 	mov.w	r0, #2
    be04:	f04f 0100 	mov.w	r1, #0
    be08:	f005 fa9a 	bl	11340 <eeprom::getEeprom8(unsigned short, unsigned char)>
    be0c:	4605      	mov	r5, r0
    SoftI2cManager::getI2cManager().init();
    be0e:	f241 706c 	movw	r0, #5996	; 0x176c
    be12:	f2c1 0000 	movt	r0, #4096	; 0x1000
    be16:	f002 fd7d 	bl	e914 <SoftI2cManager::init()>
	// coil to ensure that the Z stage does not shift.
	// Bit 7 of the AXIS_INVERSION eeprom setting
	// indicates whether or not to use z holding; 
	// the bit is active low. (0 means use z holding,
	// 1 means turn it off.)
	bool hold_z = (axis_invert & (1<<7)) == 0;
    be1a:	ea6f 0005 	mvn.w	r0, r5
	steppers::setHoldZ(hold_z);
    be1e:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    be22:	f003 fa27 	bl	f274 <steppers::setHoldZ(bool)>
    be26:	f640 4314 	movw	r3, #3092	; 0xc14
    be2a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    be2e:	681b      	ldr	r3, [r3, #0]
    be30:	f013 0f01 	tst.w	r3, #1
    be34:	d115      	bne.n	be62 <Motherboard::reset(bool)+0x72>
    be36:	f640 4014 	movw	r0, #3092	; 0xc14
    be3a:	f2c1 0000 	movt	r0, #4096	; 0x1000
    be3e:	f008 fe23 	bl	14a88 <__cxa_guard_acquire>
    be42:	b170      	cbz	r0, be62 <Motherboard::reset(bool)+0x72>
    be44:	f640 4018 	movw	r0, #3096	; 0xc18
    be48:	f2c1 0000 	movt	r0, #4096	; 0x1000
    be4c:	f04f 0100 	mov.w	r1, #0
    be50:	460a      	mov	r2, r1
    be52:	f006 fdab 	bl	129ac <UART::UART(unsigned char, communication_mode)>
    be56:	f640 4014 	movw	r0, #3092	; 0xc14
    be5a:	f2c1 0000 	movt	r0, #4096	; 0x1000
    be5e:	f008 fe31 	bl	14ac4 <__cxa_guard_release>

	// Initialize the host and slave UARTs
	UART::getHostUART().enable(true);
    be62:	f640 4018 	movw	r0, #3096	; 0xc18
    be66:	f2c1 0000 	movt	r0, #4096	; 0x1000
    be6a:	f04f 0101 	mov.w	r1, #1
    be6e:	f006 fead 	bl	12bcc <UART::enable(bool)>
    be72:	f640 4314 	movw	r3, #3092	; 0xc14
    be76:	f2c1 0300 	movt	r3, #4096	; 0x1000
    be7a:	681b      	ldr	r3, [r3, #0]
    be7c:	f013 0f01 	tst.w	r3, #1
    be80:	d115      	bne.n	beae <Motherboard::reset(bool)+0xbe>
    be82:	f640 4014 	movw	r0, #3092	; 0xc14
    be86:	f2c1 0000 	movt	r0, #4096	; 0x1000
    be8a:	f008 fdfd 	bl	14a88 <__cxa_guard_acquire>
    be8e:	b170      	cbz	r0, beae <Motherboard::reset(bool)+0xbe>
    be90:	f640 4018 	movw	r0, #3096	; 0xc18
    be94:	f2c1 0000 	movt	r0, #4096	; 0x1000
    be98:	f04f 0100 	mov.w	r1, #0
    be9c:	460a      	mov	r2, r1
    be9e:	f006 fd85 	bl	129ac <UART::UART(unsigned char, communication_mode)>
    bea2:	f640 4014 	movw	r0, #3092	; 0xc14
    bea6:	f2c1 0000 	movt	r0, #4096	; 0x1000
    beaa:	f008 fe0b 	bl	14ac4 <__cxa_guard_release>
	UART::getHostUART().in.reset();
    beae:	488a      	ldr	r0, [pc, #552]	; (c0d8 <Motherboard::reset(bool)+0x2e8>)
    beb0:	f005 ff64 	bl	11d7c <InPacket::reset()>
	
	micros = 0;
    beb4:	f04f 0500 	mov.w	r5, #0
    beb8:	6025      	str	r5, [r4, #0]
	stagger = STAGGER_MID;
    beba:	f640 537d 	movw	r3, #3453	; 0xd7d
    bebe:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bec2:	f04f 0201 	mov.w	r2, #1
    bec6:	701a      	strb	r2, [r3, #0]
	
	initClocks();
    bec8:	4620      	mov	r0, r4
    beca:	f7ff fcd3 	bl	b874 <Motherboard::initClocks()>
    }*/
    
    
    
    // interface LEDs default to full ON
    interfaceBlink(0,0);
    bece:	4620      	mov	r0, r4
    bed0:	4629      	mov	r1, r5
    bed2:	462a      	mov	r2, r5
    bed4:	f7ff fe84 	bl	bbe0 <Motherboard::interfaceBlink(int, int)>
    
    // only call the piezo buzzer on full reboot start up
    // do not clear heater fail messages, though the user should not be able to soft reboot from heater fail
    if(hard_reset)
    bed8:	2e00      	cmp	r6, #0
    beda:	f000 80c2 	beq.w	c062 <Motherboard::reset(bool)+0x272>
	{
		// Configure the debug pins.
		DEBUG_LED1.setDirection(true);
    bede:	f640 556c 	movw	r5, #3436	; 0xd6c
    bee2:	f2c1 0500 	movt	r5, #4096	; 0x1000
    bee6:	a801      	add	r0, sp, #4
    bee8:	4629      	mov	r1, r5
    beea:	f04f 0212 	mov.w	r2, #18
    beee:	f006 f8b7 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    bef2:	a801      	add	r0, sp, #4
    bef4:	f04f 0101 	mov.w	r1, #1
    bef8:	f006 f8d2 	bl	120a0 <Pin::setDirection(bool) const>
		DEBUG_LED2.setDirection(true);
    befc:	a803      	add	r0, sp, #12
    befe:	4629      	mov	r1, r5
    bf00:	f04f 0214 	mov.w	r2, #20
    bf04:	f006 f8ac 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    bf08:	a803      	add	r0, sp, #12
    bf0a:	f04f 0101 	mov.w	r1, #1
    bf0e:	f006 f8c7 	bl	120a0 <Pin::setDirection(bool) const>
		DEBUG_LED3.setDirection(true);
    bf12:	a805      	add	r0, sp, #20
    bf14:	4629      	mov	r1, r5
    bf16:	f04f 0215 	mov.w	r2, #21
    bf1a:	f006 f8a1 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    bf1e:	a805      	add	r0, sp, #20
    bf20:	f04f 0101 	mov.w	r1, #1
    bf24:	f006 f8bc 	bl	120a0 <Pin::setDirection(bool) const>
		DEBUG_LED4.setDirection(true);
    bf28:	a807      	add	r0, sp, #28
    bf2a:	4629      	mov	r1, r5
    bf2c:	f04f 0217 	mov.w	r2, #23
    bf30:	f006 f896 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    bf34:	a807      	add	r0, sp, #28
    bf36:	f04f 0101 	mov.w	r1, #1
    bf3a:	f006 f8b1 	bl	120a0 <Pin::setDirection(bool) const>
		DEBUG_PIN.setDirection(true);
    bf3e:	a80b      	add	r0, sp, #44	; 0x2c
    bf40:	f04f 01ff 	mov.w	r1, #255	; 0xff
    bf44:	f005 fe7a 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    bf48:	a809      	add	r0, sp, #36	; 0x24
    bf4a:	a90b      	add	r1, sp, #44	; 0x2c
    bf4c:	f04f 02ff 	mov.w	r2, #255	; 0xff
    bf50:	f006 f886 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    bf54:	a809      	add	r0, sp, #36	; 0x24
    bf56:	f04f 0101 	mov.w	r1, #1
    bf5a:	f006 f8a1 	bl	120a0 <Pin::setDirection(bool) const>
		DEBUG_PIN1.setDirection(true);
    bf5e:	a80e      	add	r0, sp, #56	; 0x38
    bf60:	f04f 01ff 	mov.w	r1, #255	; 0xff
    bf64:	f005 fe6a 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    bf68:	a80c      	add	r0, sp, #48	; 0x30
    bf6a:	a90e      	add	r1, sp, #56	; 0x38
    bf6c:	f04f 02ff 	mov.w	r2, #255	; 0xff
    bf70:	f006 f876 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    bf74:	a80c      	add	r0, sp, #48	; 0x30
    bf76:	f04f 0101 	mov.w	r1, #1
    bf7a:	f006 f891 	bl	120a0 <Pin::setDirection(bool) const>
		DEBUG_PIN2.setDirection(true);
    bf7e:	a811      	add	r0, sp, #68	; 0x44
    bf80:	f04f 01ff 	mov.w	r1, #255	; 0xff
    bf84:	f005 fe5a 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    bf88:	a80f      	add	r0, sp, #60	; 0x3c
    bf8a:	a911      	add	r1, sp, #68	; 0x44
    bf8c:	f04f 02ff 	mov.w	r2, #255	; 0xff
    bf90:	f006 f866 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    bf94:	a80f      	add	r0, sp, #60	; 0x3c
    bf96:	f04f 0101 	mov.w	r1, #1
    bf9a:	f006 f881 	bl	120a0 <Pin::setDirection(bool) const>
		DEBUG_PIN3.setDirection(true);	
    bf9e:	a814      	add	r0, sp, #80	; 0x50
    bfa0:	f04f 01ff 	mov.w	r1, #255	; 0xff
    bfa4:	f005 fe4a 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    bfa8:	a812      	add	r0, sp, #72	; 0x48
    bfaa:	a914      	add	r1, sp, #80	; 0x50
    bfac:	f04f 02ff 	mov.w	r2, #255	; 0xff
    bfb0:	f006 f856 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    bfb4:	a812      	add	r0, sp, #72	; 0x48
    bfb6:	f04f 0101 	mov.w	r1, #1
    bfba:	f006 f871 	bl	120a0 <Pin::setDirection(bool) const>
		DEBUG_PIN4.setDirection(true);
    bfbe:	a817      	add	r0, sp, #92	; 0x5c
    bfc0:	f04f 01ff 	mov.w	r1, #255	; 0xff
    bfc4:	f005 fe3a 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    bfc8:	a815      	add	r0, sp, #84	; 0x54
    bfca:	a917      	add	r1, sp, #92	; 0x5c
    bfcc:	f04f 02ff 	mov.w	r2, #255	; 0xff
    bfd0:	f006 f846 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    bfd4:	a815      	add	r0, sp, #84	; 0x54
    bfd6:	f04f 0101 	mov.w	r1, #1
    bfda:	f006 f861 	bl	120a0 <Pin::setDirection(bool) const>
		DEBUG_PIN5.setDirection(true);
    bfde:	a81a      	add	r0, sp, #104	; 0x68
    bfe0:	f04f 01ff 	mov.w	r1, #255	; 0xff
    bfe4:	f005 fe2a 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    bfe8:	a818      	add	r0, sp, #96	; 0x60
    bfea:	a91a      	add	r1, sp, #104	; 0x68
    bfec:	f04f 02ff 	mov.w	r2, #255	; 0xff
    bff0:	f006 f836 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    bff4:	a818      	add	r0, sp, #96	; 0x60
    bff6:	f04f 0101 	mov.w	r1, #1
    bffa:	f006 f851 	bl	120a0 <Pin::setDirection(bool) const>
		DEBUG_PIN6.setDirection(true);
    bffe:	a81d      	add	r0, sp, #116	; 0x74
    c000:	f04f 01ff 	mov.w	r1, #255	; 0xff
    c004:	f005 fe1a 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    c008:	a81b      	add	r0, sp, #108	; 0x6c
    c00a:	a91d      	add	r1, sp, #116	; 0x74
    c00c:	f04f 02ff 	mov.w	r2, #255	; 0xff
    c010:	f006 f826 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    c014:	a81b      	add	r0, sp, #108	; 0x6c
    c016:	f04f 0101 	mov.w	r1, #1
    c01a:	f006 f841 	bl	120a0 <Pin::setDirection(bool) const>
		DEBUG_PIN7.setDirection(true);
    c01e:	a820      	add	r0, sp, #128	; 0x80
    c020:	f04f 01ff 	mov.w	r1, #255	; 0xff
    c024:	f005 fe0a 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    c028:	a81e      	add	r0, sp, #120	; 0x78
    c02a:	a920      	add	r1, sp, #128	; 0x80
    c02c:	f04f 02ff 	mov.w	r2, #255	; 0xff
    c030:	f006 f816 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    c034:	a81e      	add	r0, sp, #120	; 0x78
    c036:	f04f 0101 	mov.w	r1, #1
    c03a:	f006 f831 	bl	120a0 <Pin::setDirection(bool) const>
		
		RGB_LED::init();
    c03e:	f002 f8af 	bl	e1a0 <RGB_LED::init()>
		
		Piezo::startUpTone();
    c042:	f000 fb39 	bl	c6b8 <Piezo::startUpTone()>
		
		heatShutdown = false;
    c046:	f04f 0500 	mov.w	r5, #0
    c04a:	f884 529d 	strb.w	r5, [r4, #669]	; 0x29d
		heatFailMode = HEATER_FAIL_NONE;
    c04e:	f884 52a0 	strb.w	r5, [r4, #672]	; 0x2a0
		cutoff.init();
    c052:	f504 7026 	add.w	r0, r4, #664	; 0x298
    c056:	f100 0001 	add.w	r0, r0, #1
    c05a:	f7fd fb87 	bl	976c <Cutoff::init()>
		
		board_status = STATUS_NONE;
    c05e:	f884 52a1 	strb.w	r5, [r4, #673]	; 0x2a1
   }
    
     // initialize the extruders
    Extruder_One.reset();
    c062:	f104 0028 	add.w	r0, r4, #40	; 0x28
    c066:	f7fe f817 	bl	a098 <ExtruderBoard::reset()>
    Extruder_Two.reset();
    c06a:	f504 7084 	add.w	r0, r4, #264	; 0x108
    c06e:	f7fe f813 	bl	a098 <ExtruderBoard::reset()>
    
    HBP_HEAT.setDirection(true);
    c072:	a823      	add	r0, sp, #140	; 0x8c
    c074:	f04f 01ff 	mov.w	r1, #255	; 0xff
    c078:	f005 fde0 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    c07c:	a821      	add	r0, sp, #132	; 0x84
    c07e:	a923      	add	r1, sp, #140	; 0x8c
    c080:	f04f 02ff 	mov.w	r2, #255	; 0xff
    c084:	f005 ffec 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    c088:	a821      	add	r0, sp, #132	; 0x84
    c08a:	f04f 0101 	mov.w	r1, #1
    c08e:	f006 f807 	bl	120a0 <Pin::setDirection(bool) const>
	platform_thermistor.init();
    c092:	f504 70f4 	add.w	r0, r4, #488	; 0x1e8
    c096:	f006 f8ad 	bl	121f4 <Thermistor::init()>
	platform_heater.reset();
    c09a:	f504 7503 	add.w	r5, r4, #524	; 0x20c
    c09e:	4628      	mov	r0, r5
    c0a0:	f005 fa22 	bl	114e8 <Heater::reset()>
    
    Extruder_One.getExtruderHeater().set_target_temperature(0);
    c0a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
    c0a8:	f04f 0100 	mov.w	r1, #0
    c0ac:	f005 fad2 	bl	11654 <Heater::set_target_temperature(int)>
	Extruder_Two.getExtruderHeater().set_target_temperature(0);
    c0b0:	f504 7098 	add.w	r0, r4, #304	; 0x130
    c0b4:	f04f 0100 	mov.w	r1, #0
    c0b8:	f005 facc 	bl	11654 <Heater::set_target_temperature(int)>
	platform_heater.set_target_temperature(0);	
    c0bc:	4628      	mov	r0, r5
    c0be:	f04f 0100 	mov.w	r1, #0
    c0c2:	f005 fac7 	bl	11654 <Heater::set_target_temperature(int)>
	
	RGB_LED::setDefaultColor(); 
    c0c6:	f001 ffa1 	bl	e00c <RGB_LED::setDefaultColor()>
	buttonWait = false;
    c0ca:	f04f 0300 	mov.w	r3, #0
    c0ce:	f884 329e 	strb.w	r3, [r4, #670]	; 0x29e
//	DEBUG_LED1.setDirection(true);
//	DEBUG_LED2.setDirection(false);
//	DEBUG_LED3.setDirection(true);
//	DEBUG_LED4.setDirection(false);

}
    c0d2:	b024      	add	sp, #144	; 0x90
    c0d4:	bd70      	pop	{r4, r5, r6, pc}
    c0d6:	bf00      	nop
    c0d8:	10000c1b 	.word	0x10000c1b

0000c0dc <Motherboard::getCurrentError()>:

}

/// Get the current error code.
uint8_t Motherboard::getCurrentError() {
	return blink_count;
    c0dc:	f241 0344 	movw	r3, #4164	; 0x1044
    c0e0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c0e4:	7818      	ldrb	r0, [r3, #0]
}
    c0e6:	4770      	bx	lr

0000c0e8 <TIMER2_IRQHandler>:
uint16_t blink_overflow_counter = 0;

/// Timer 2 overflow interrupt

//ISR(TIMER2_COMPA_vect) {
extern "C" void TIMER2_IRQHandler (void){
    c0e8:	b500      	push	{lr}
    c0ea:	b08d      	sub	sp, #52	; 0x34
//	DEBUG_LED2.setDirection(true);
//	DEBUG_LED2.setValue(true);
//	xprintf("2" " (%s:%d)\n",_F_,_L_);
//	xprintf("TIMER2_IRQHandler" " (%s:%d)\n",_F_,_L_);
	TIM_ClearIntPending(LPC_TIM2,TIM_MR0_INT);
    c0ec:	f04f 0000 	mov.w	r0, #0
    c0f0:	f2c4 0009 	movt	r0, #16393	; 0x4009
    c0f4:	f04f 0100 	mov.w	r1, #0
    c0f8:	f7f7 fe4a 	bl	3d90 <TIM_ClearIntPending>
	
	Motherboard::getBoard().UpdateMicros();
    c0fc:	f640 509c 	movw	r0, #3484	; 0xd9c
    c100:	f2c1 0000 	movt	r0, #4096	; 0x1000
    c104:	f7ff fd1e 	bl	bb44 <Motherboard::UpdateMicros()>
	DEBUG_LED2.setValue(false);
    c108:	a801      	add	r0, sp, #4
    c10a:	f640 516c 	movw	r1, #3436	; 0xd6c
    c10e:	f2c1 0100 	movt	r1, #4096	; 0x1000
    c112:	f04f 0214 	mov.w	r2, #20
    c116:	f005 ffa3 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    c11a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    c11e:	b94b      	cbnz	r3, c134 <TIMER2_IRQHandler+0x4c>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    c120:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c124:	f89d 0004 	ldrb.w	r0, [sp, #4]
    c128:	f04f 0101 	mov.w	r1, #1
    c12c:	fa01 f103 	lsl.w	r1, r1, r3
    c130:	f7f7 f9e0 	bl	34f4 <GPIO_ClearValue>
	
	if(blink_overflow_counter++ <= 0x080)
    c134:	f640 5364 	movw	r3, #3428	; 0xd64
    c138:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c13c:	881a      	ldrh	r2, [r3, #0]
    c13e:	f102 0101 	add.w	r1, r2, #1
    c142:	8019      	strh	r1, [r3, #0]
    c144:	2a80      	cmp	r2, #128	; 0x80
    c146:	f240 80fc 	bls.w	c342 <TIMER2_IRQHandler+0x25a>
			return;
	
	blink_overflow_counter = 0;
    c14a:	f640 5364 	movw	r3, #3428	; 0xd64
    c14e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c152:	f04f 0200 	mov.w	r2, #0
    c156:	801a      	strh	r2, [r3, #0]
			
	/// Debug LEDS on Motherboard
	if (blink_ovfs_remaining > 0) {
    c158:	f640 5394 	movw	r3, #3476	; 0xd94
    c15c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c160:	681a      	ldr	r2, [r3, #0]
    c162:	2a00      	cmp	r2, #0
    c164:	dd07      	ble.n	c176 <TIMER2_IRQHandler+0x8e>
		blink_ovfs_remaining--;
    c166:	f640 5394 	movw	r3, #3476	; 0xd94
    c16a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c16e:	f102 32ff 	add.w	r2, r2, #4294967295
    c172:	601a      	str	r2, [r3, #0]
    c174:	e0aa      	b.n	c2cc <TIMER2_IRQHandler+0x1e4>
	} else {
		if (blink_state == BLINK_ON) {
    c176:	f640 5360 	movw	r3, #3424	; 0xd60
    c17a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c17e:	681b      	ldr	r3, [r3, #0]
    c180:	2b01      	cmp	r3, #1
    c182:	d12f      	bne.n	c1e4 <TIMER2_IRQHandler+0xfc>
			blinked_so_far++;
    c184:	f241 0340 	movw	r3, #4160	; 0x1040
    c188:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c18c:	681a      	ldr	r2, [r3, #0]
    c18e:	f102 0201 	add.w	r2, r2, #1
    c192:	601a      	str	r2, [r3, #0]
			blink_state = BLINK_OFF;
    c194:	f640 5360 	movw	r3, #3424	; 0xd60
    c198:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c19c:	f04f 0202 	mov.w	r2, #2
    c1a0:	601a      	str	r2, [r3, #0]
			blink_ovfs_remaining = OVFS_OFF;
    c1a2:	f640 5394 	movw	r3, #3476	; 0xd94
    c1a6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c1aa:	f04f 0212 	mov.w	r2, #18
    c1ae:	601a      	str	r2, [r3, #0]
			DEBUG_PIN.setValue(false);
    c1b0:	a805      	add	r0, sp, #20
    c1b2:	f04f 01ff 	mov.w	r1, #255	; 0xff
    c1b6:	f005 fd41 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    c1ba:	a803      	add	r0, sp, #12
    c1bc:	a905      	add	r1, sp, #20
    c1be:	f04f 02ff 	mov.w	r2, #255	; 0xff
    c1c2:	f005 ff4d 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    c1c6:	f89d 300d 	ldrb.w	r3, [sp, #13]
    c1ca:	2b00      	cmp	r3, #0
    c1cc:	d17e      	bne.n	c2cc <TIMER2_IRQHandler+0x1e4>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    c1ce:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c1d2:	f89d 000c 	ldrb.w	r0, [sp, #12]
    c1d6:	f04f 0101 	mov.w	r1, #1
    c1da:	fa01 f103 	lsl.w	r1, r1, r3
    c1de:	f7f7 f989 	bl	34f4 <GPIO_ClearValue>
    c1e2:	e073      	b.n	c2cc <TIMER2_IRQHandler+0x1e4>
		} else if (blink_state == BLINK_OFF) {
    c1e4:	2b02      	cmp	r3, #2
    c1e6:	d142      	bne.n	c26e <TIMER2_IRQHandler+0x186>
			if (blinked_so_far >= blink_count) {
    c1e8:	f241 0344 	movw	r3, #4164	; 0x1044
    c1ec:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c1f0:	781a      	ldrb	r2, [r3, #0]
    c1f2:	f241 0340 	movw	r3, #4160	; 0x1040
    c1f6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c1fa:	681b      	ldr	r3, [r3, #0]
    c1fc:	429a      	cmp	r2, r3
    c1fe:	dc0e      	bgt.n	c21e <TIMER2_IRQHandler+0x136>
				blink_state = BLINK_PAUSE;
    c200:	f640 5360 	movw	r3, #3424	; 0xd60
    c204:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c208:	f04f 0203 	mov.w	r2, #3
    c20c:	601a      	str	r2, [r3, #0]
				blink_ovfs_remaining = OVFS_PAUSE;
    c20e:	f640 5394 	movw	r3, #3476	; 0xd94
    c212:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c216:	f04f 0250 	mov.w	r2, #80	; 0x50
    c21a:	601a      	str	r2, [r3, #0]
    c21c:	e056      	b.n	c2cc <TIMER2_IRQHandler+0x1e4>
			} else {
				blink_state = BLINK_ON;
    c21e:	f640 5360 	movw	r3, #3424	; 0xd60
    c222:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c226:	f04f 0201 	mov.w	r2, #1
    c22a:	601a      	str	r2, [r3, #0]
				blink_ovfs_remaining = OVFS_ON;
    c22c:	f640 5394 	movw	r3, #3476	; 0xd94
    c230:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c234:	f04f 0212 	mov.w	r2, #18
    c238:	601a      	str	r2, [r3, #0]
				DEBUG_PIN.setValue(true);
    c23a:	a808      	add	r0, sp, #32
    c23c:	f04f 01ff 	mov.w	r1, #255	; 0xff
    c240:	f005 fcfc 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    c244:	a806      	add	r0, sp, #24
    c246:	a908      	add	r1, sp, #32
    c248:	f04f 02ff 	mov.w	r2, #255	; 0xff
    c24c:	f005 ff08 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    c250:	f89d 3019 	ldrb.w	r3, [sp, #25]
    c254:	2b00      	cmp	r3, #0
    c256:	d139      	bne.n	c2cc <TIMER2_IRQHandler+0x1e4>
//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    c258:	f89d 301a 	ldrb.w	r3, [sp, #26]
    c25c:	f89d 0018 	ldrb.w	r0, [sp, #24]
    c260:	f04f 0101 	mov.w	r1, #1
    c264:	fa01 f103 	lsl.w	r1, r1, r3
    c268:	f7f7 f93c 	bl	34e4 <GPIO_SetValue>
    c26c:	e02e      	b.n	c2cc <TIMER2_IRQHandler+0x1e4>
			}
		} else if (blink_state == BLINK_PAUSE) {
    c26e:	2b03      	cmp	r3, #3
    c270:	d12c      	bne.n	c2cc <TIMER2_IRQHandler+0x1e4>
			blinked_so_far = 0;
    c272:	f241 0340 	movw	r3, #4160	; 0x1040
    c276:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c27a:	f04f 0200 	mov.w	r2, #0
    c27e:	601a      	str	r2, [r3, #0]
			blink_state = BLINK_ON;
    c280:	f640 5360 	movw	r3, #3424	; 0xd60
    c284:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c288:	f04f 0201 	mov.w	r2, #1
    c28c:	601a      	str	r2, [r3, #0]
			blink_ovfs_remaining = OVFS_ON;
    c28e:	f640 5394 	movw	r3, #3476	; 0xd94
    c292:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c296:	f04f 0212 	mov.w	r2, #18
    c29a:	601a      	str	r2, [r3, #0]
			DEBUG_PIN.setValue(true);
    c29c:	a80b      	add	r0, sp, #44	; 0x2c
    c29e:	f04f 01ff 	mov.w	r1, #255	; 0xff
    c2a2:	f005 fccb 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    c2a6:	a809      	add	r0, sp, #36	; 0x24
    c2a8:	a90b      	add	r1, sp, #44	; 0x2c
    c2aa:	f04f 02ff 	mov.w	r2, #255	; 0xff
    c2ae:	f005 fed7 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    c2b2:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
    c2b6:	b94b      	cbnz	r3, c2cc <TIMER2_IRQHandler+0x1e4>
//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    c2b8:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    c2bc:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    c2c0:	f04f 0101 	mov.w	r1, #1
    c2c4:	fa01 f103 	lsl.w	r1, r1, r3
    c2c8:	f7f7 f90c 	bl	34e4 <GPIO_SetValue>
		}
	}
	/// Interface Board LEDs
	if( interface_ovfs_remaining > 0){
    c2cc:	f640 5380 	movw	r3, #3456	; 0xd80
    c2d0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c2d4:	681b      	ldr	r3, [r3, #0]
    c2d6:	2b00      	cmp	r3, #0
    c2d8:	dd07      	ble.n	c2ea <TIMER2_IRQHandler+0x202>
		interface_ovfs_remaining--;
    c2da:	f640 5280 	movw	r2, #3456	; 0xd80
    c2de:	f2c1 0200 	movt	r2, #4096	; 0x1000
    c2e2:	f103 33ff 	add.w	r3, r3, #4294967295
    c2e6:	6013      	str	r3, [r2, #0]
    c2e8:	e02b      	b.n	c342 <TIMER2_IRQHandler+0x25a>
	} else {
		if (interface_blink_state == BLINK_ON) {
    c2ea:	f640 5398 	movw	r3, #3480	; 0xd98
    c2ee:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c2f2:	681b      	ldr	r3, [r3, #0]
    c2f4:	2b01      	cmp	r3, #1
    c2f6:	d111      	bne.n	c31c <TIMER2_IRQHandler+0x234>
			interface_blink_state = BLINK_OFF;
    c2f8:	f640 5398 	movw	r3, #3480	; 0xd98
    c2fc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c300:	f04f 0202 	mov.w	r2, #2
    c304:	601a      	str	r2, [r3, #0]
			interface_ovfs_remaining = interface_on_time;
    c306:	f640 5380 	movw	r3, #3456	; 0xd80
    c30a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c30e:	f640 525c 	movw	r2, #3420	; 0xd5c
    c312:	f2c1 0200 	movt	r2, #4096	; 0x1000
    c316:	7812      	ldrb	r2, [r2, #0]
    c318:	601a      	str	r2, [r3, #0]
    c31a:	e012      	b.n	c342 <TIMER2_IRQHandler+0x25a>
//			interface::setLEDs(true);
		} else if (interface_blink_state == BLINK_OFF) {
    c31c:	2b02      	cmp	r3, #2
    c31e:	d110      	bne.n	c342 <TIMER2_IRQHandler+0x25a>
			interface_blink_state = BLINK_ON;
    c320:	f640 5398 	movw	r3, #3480	; 0xd98
    c324:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c328:	f04f 0201 	mov.w	r2, #1
    c32c:	601a      	str	r2, [r3, #0]
			interface_ovfs_remaining = interface_off_time;
    c32e:	f640 5380 	movw	r3, #3456	; 0xd80
    c332:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c336:	f640 527c 	movw	r2, #3452	; 0xd7c
    c33a:	f2c1 0200 	movt	r2, #4096	; 0x1000
    c33e:	7812      	ldrb	r2, [r2, #0]
    c340:	601a      	str	r2, [r3, #0]
			loop2=0;
//			led_toggle2 = led_toggle2^1;
//			DEBUG_LED2.setValue(led_toggle2);
		}
	}
}
    c342:	b00d      	add	sp, #52	; 0x34
    c344:	bd00      	pop	{pc}
    c346:	bf00      	nop

0000c348 <TIMER3_IRQHandler>:

// piezo buzzer update
// this interrupt gets garbled with the much more rapid stepper interrupt
//ISR(TIMER0_COMPA_vect)
extern "C" void TIMER3_IRQHandler (void){
    c348:	b508      	push	{r3, lr}
//	DEBUG_LED3.setDirection(true);
//	DEBUG_LED3.setValue(true);
//	xprintf("3" " (%s:%d)\n",_F_,_L_);
//	xprintf("TIMER3_IRQHandler" " (%s:%d)\n",_F_,_L_);
	TIM_ClearIntPending(LPC_TIM3,TIM_MR0_INT);
    c34a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    c34e:	f2c4 0009 	movt	r0, #16393	; 0x4009
    c352:	f04f 0100 	mov.w	r1, #0
    c356:	f7f7 fd1b 	bl	3d90 <TIM_ClearIntPending>
	Piezo::doInterrupt();
    c35a:	f000 f9cd 	bl	c6f8 <Piezo::doInterrupt()>
//			led_toggle3 = led_toggle3^1;
//			DEBUG_LED3.setValue(led_toggle3);
		}
	}
//	DEBUG_LED3.setValue(false);
}
    c35e:	bd08      	pop	{r3, pc}

0000c360 <Motherboard::setUsingPlatform(bool)>:
	}
}


void Motherboard::setUsingPlatform(bool is_using) {
  using_platform = is_using;
    c360:	f880 1298 	strb.w	r1, [r0, #664]	; 0x298
}
    c364:	4770      	bx	lr
    c366:	bf00      	nop

0000c368 <Motherboard::setValve(bool)>:

void Motherboard::setValve(bool on) {
    c368:	b510      	push	{r4, lr}
    c36a:	b086      	sub	sp, #24
    c36c:	460c      	mov	r4, r1
//  	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		setUsingPlatform(false);
    c36e:	f04f 0100 	mov.w	r1, #0
    c372:	f7ff fff5 	bl	c360 <Motherboard::setUsingPlatform(bool)>
		pwmHBP_On(false);
		EXTRA_FET.setDirection(true);
    c376:	a802      	add	r0, sp, #8
    c378:	f04f 01ff 	mov.w	r1, #255	; 0xff
    c37c:	f005 fc5e 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    c380:	4668      	mov	r0, sp
    c382:	a902      	add	r1, sp, #8
    c384:	f04f 02ff 	mov.w	r2, #255	; 0xff
    c388:	f005 fe6a 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    c38c:	4668      	mov	r0, sp
    c38e:	f04f 0101 	mov.w	r1, #1
    c392:	f005 fe85 	bl	120a0 <Pin::setDirection(bool) const>
		EXTRA_FET.setValue(on);
    c396:	a805      	add	r0, sp, #20
    c398:	f04f 01ff 	mov.w	r1, #255	; 0xff
    c39c:	f005 fc4e 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    c3a0:	a803      	add	r0, sp, #12
    c3a2:	a905      	add	r1, sp, #20
    c3a4:	f04f 02ff 	mov.w	r2, #255	; 0xff
    c3a8:	f005 fe5a 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    c3ac:	f89d 300d 	ldrb.w	r3, [sp, #13]
    c3b0:	b9ab      	cbnz	r3, c3de <Motherboard::setValve(bool)+0x76>
		 	return;
		// uint8_t oldSREG = SREG;

//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
    c3b2:	b154      	cbz	r4, c3ca <Motherboard::setValve(bool)+0x62>
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    c3b4:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c3b8:	f89d 000c 	ldrb.w	r0, [sp, #12]
    c3bc:	f04f 0101 	mov.w	r1, #1
    c3c0:	fa01 f103 	lsl.w	r1, r1, r3
    c3c4:	f7f7 f88e 	bl	34e4 <GPIO_SetValue>
    c3c8:	e009      	b.n	c3de <Motherboard::setValve(bool)+0x76>
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    c3ca:	f89d 300e 	ldrb.w	r3, [sp, #14]
    c3ce:	f89d 000c 	ldrb.w	r0, [sp, #12]
    c3d2:	f04f 0101 	mov.w	r1, #1
    c3d6:	fa01 f103 	lsl.w	r1, r1, r3
    c3da:	f7f7 f88b 	bl	34f4 <GPIO_ClearValue>
//	}
}
    c3de:	b006      	add	sp, #24
    c3e0:	bd10      	pop	{r4, pc}
    c3e2:	bf00      	nop

0000c3e4 <_GLOBAL__sub_I__ZN11Motherboard11motherboardE>:
	// It works relatively well.
//  	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		pwmHBP_On(false);
		HBP_HEAT.setValue(value != 0);
//	}
}
    c3e4:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
    c3e6:	f640 5068 	movw	r0, #3432	; 0xd68
    c3ea:	f2c1 0000 	movt	r0, #4096	; 0x1000
    c3ee:	f04f 0100 	mov.w	r1, #0
    c3f2:	f005 fc23 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
    c3f6:	f640 506c 	movw	r0, #3436	; 0xd6c
    c3fa:	f2c1 0000 	movt	r0, #4096	; 0x1000
    c3fe:	f04f 0101 	mov.w	r1, #1
    c402:	f005 fc1b 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
    c406:	f640 5070 	movw	r0, #3440	; 0xd70
    c40a:	f2c1 0000 	movt	r0, #4096	; 0x1000
    c40e:	f04f 0102 	mov.w	r1, #2
    c412:	f005 fc13 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
    c416:	f640 5074 	movw	r0, #3444	; 0xd74
    c41a:	f2c1 0000 	movt	r0, #4096	; 0x1000
    c41e:	f04f 0103 	mov.w	r1, #3
    c422:	f005 fc0b 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
    c426:	f640 5078 	movw	r0, #3448	; 0xd78
    c42a:	f2c1 0000 	movt	r0, #4096	; 0x1000
    c42e:	f04f 0104 	mov.w	r1, #4
    c432:	f005 fc03 	bl	11c3c <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
    c436:	f640 5490 	movw	r4, #3472	; 0xd90
    c43a:	f2c1 0400 	movt	r4, #4096	; 0x1000
    c43e:	4620      	mov	r0, r4
    c440:	f04f 01ff 	mov.w	r1, #255	; 0xff
    c444:	f005 fbfa 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
	};
	// currently not used:
	//const uint8_t getPinIndex() const { return pin_index; }
};

static const Pin NullPin(NullPort, 0);
    c448:	f640 5084 	movw	r0, #3460	; 0xd84
    c44c:	f2c1 0000 	movt	r0, #4096	; 0x1000
    c450:	4621      	mov	r1, r4
    c452:	f04f 0200 	mov.w	r2, #0
    c456:	f005 fe03 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
	#include "lpc17xx_rtc.h"
	#include "lpc17xx_pwm.h"
}

/// Instantiate static motherboard instance
Motherboard Motherboard::motherboard;
    c45a:	f640 549c 	movw	r4, #3484	; 0xd9c
    c45e:	f2c1 0400 	movt	r4, #4096	; 0x1000
    c462:	4620      	mov	r0, r4
    c464:	f7ff f982 	bl	b76c <Motherboard::Motherboard()>
    c468:	4620      	mov	r0, r4
    c46a:	f24b 61cd 	movw	r1, #46797	; 0xb6cd
    c46e:	f2c0 0100 	movt	r1, #0
    c472:	f240 0204 	movw	r2, #4
    c476:	f2c1 0200 	movt	r2, #4096	; 0x1000
    c47a:	f008 faff 	bl	14a7c <__aeabi_atexit>
	// It works relatively well.
//  	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		pwmHBP_On(false);
		HBP_HEAT.setValue(value != 0);
//	}
}
    c47e:	bd10      	pop	{r4, pc}

0000c480 <Piezo::isPlaying()>:
	 setTone(NOTE_0, 188);
	 setTone(NOTE_A7, 333);

 }
 bool isPlaying(){
	return playing;
    c480:	f241 03e8 	movw	r3, #4328	; 0x10e8
    c484:	f2c1 0300 	movt	r3, #4096	; 0x1000
 }
    c488:	7818      	ldrb	r0, [r3, #0]
    c48a:	4770      	bx	lr

0000c48c <Piezo::queueTone(unsigned short, unsigned short)>:
 }
 
 // allow queuing of tones so that multiple tones can be called sequentially
 // without waiting for each to finish
 void queueTone(uint16_t frequency, uint16_t duration)
 {
    c48c:	b430      	push	{r4, r5}
		return length;
	}

	/// Get the remaining capacity of this buffer
	inline const BufSizeType getRemainingCapacity() const {
		return size - length;
    c48e:	f241 03d4 	movw	r3, #4308	; 0x10d4
    c492:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c496:	881a      	ldrh	r2, [r3, #0]
    c498:	885b      	ldrh	r3, [r3, #2]
    c49a:	b29b      	uxth	r3, r3
	 if(frequencies.getRemainingCapacity() > 0 ) {
    c49c:	429a      	cmp	r2, r3
    c49e:	d04c      	beq.n	c53a <Piezo::queueTone(unsigned short, unsigned short)+0xae>
		overflow = false;
		underflow = false;
	}
	/// Append a byte to the tail of the buffer
	inline void push(BufDataType b) {
		if (length < size) {
    c4a0:	f241 03d4 	movw	r3, #4308	; 0x10d4
    c4a4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c4a8:	885b      	ldrh	r3, [r3, #2]
    c4aa:	b29b      	uxth	r3, r3
    c4ac:	429a      	cmp	r2, r3
    c4ae:	d916      	bls.n	c4de <Piezo::queueTone(unsigned short, unsigned short)+0x52>
			operator[](length) = b;
    c4b0:	f241 03d4 	movw	r3, #4308	; 0x10d4
    c4b4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c4b8:	885d      	ldrh	r5, [r3, #2]
    c4ba:	b2ad      	uxth	r5, r5
	inline const bool isEmpty() const {
		return length == 0;
	}
	/// Read the buffer directly
	inline BufDataType& operator[](BufSizeType index) {
		const BufSizeType actual_index = (index + start) % size;
    c4bc:	889c      	ldrh	r4, [r3, #4]
    c4be:	b2a4      	uxth	r4, r4
    c4c0:	192c      	adds	r4, r5, r4
    c4c2:	fb94 f5f2 	sdiv	r5, r4, r2
    c4c6:	fb02 4215 	mls	r2, r2, r5, r4
		return data[actual_index];
    c4ca:	b292      	uxth	r2, r2
		underflow = false;
	}
	/// Append a byte to the tail of the buffer
	inline void push(BufDataType b) {
		if (length < size) {
			operator[](length) = b;
    c4cc:	689d      	ldr	r5, [r3, #8]
    c4ce:	f825 0012 	strh.w	r0, [r5, r2, lsl #1]
			length++;
    c4d2:	885a      	ldrh	r2, [r3, #2]
    c4d4:	f102 0201 	add.w	r2, r2, #1
    c4d8:	b292      	uxth	r2, r2
    c4da:	805a      	strh	r2, [r3, #2]
    c4dc:	e006      	b.n	c4ec <Piezo::queueTone(unsigned short, unsigned short)+0x60>
		} else {
			overflow = true;
    c4de:	f241 03d4 	movw	r3, #4308	; 0x10d4
    c4e2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c4e6:	f04f 0201 	mov.w	r2, #1
    c4ea:	731a      	strb	r2, [r3, #12]
		overflow = false;
		underflow = false;
	}
	/// Append a byte to the tail of the buffer
	inline void push(BufDataType b) {
		if (length < size) {
    c4ec:	f241 0350 	movw	r3, #4176	; 0x1050
    c4f0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c4f4:	8858      	ldrh	r0, [r3, #2]
    c4f6:	b280      	uxth	r0, r0
    c4f8:	881a      	ldrh	r2, [r3, #0]
    c4fa:	4290      	cmp	r0, r2
    c4fc:	d216      	bcs.n	c52c <Piezo::queueTone(unsigned short, unsigned short)+0xa0>
			operator[](length) = b;
    c4fe:	f241 0350 	movw	r3, #4176	; 0x1050
    c502:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c506:	885c      	ldrh	r4, [r3, #2]
    c508:	b2a4      	uxth	r4, r4
	inline const bool isEmpty() const {
		return length == 0;
	}
	/// Read the buffer directly
	inline BufDataType& operator[](BufSizeType index) {
		const BufSizeType actual_index = (index + start) % size;
    c50a:	8898      	ldrh	r0, [r3, #4]
    c50c:	b280      	uxth	r0, r0
    c50e:	1820      	adds	r0, r4, r0
    c510:	fb90 f4f2 	sdiv	r4, r0, r2
    c514:	fb02 0214 	mls	r2, r2, r4, r0
		return data[actual_index];
    c518:	b292      	uxth	r2, r2
		underflow = false;
	}
	/// Append a byte to the tail of the buffer
	inline void push(BufDataType b) {
		if (length < size) {
			operator[](length) = b;
    c51a:	689c      	ldr	r4, [r3, #8]
    c51c:	f824 1012 	strh.w	r1, [r4, r2, lsl #1]
			length++;
    c520:	885a      	ldrh	r2, [r3, #2]
    c522:	f102 0201 	add.w	r2, r2, #1
    c526:	b292      	uxth	r2, r2
    c528:	805a      	strh	r2, [r3, #2]
    c52a:	e006      	b.n	c53a <Piezo::queueTone(unsigned short, unsigned short)+0xae>
		} else {
			overflow = true;
    c52c:	f241 0350 	movw	r3, #4176	; 0x1050
    c530:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c534:	f04f 0201 	mov.w	r2, #1
    c538:	731a      	strb	r2, [r3, #12]
		 frequencies.push(frequency);
		 durations.push(duration);
	 }
	 //FUTURE: set an error blink here.
 }
    c53a:	bc30      	pop	{r4, r5}
    c53c:	4770      	bx	lr
    c53e:	bf00      	nop

0000c540 <Piezo::setTone(unsigned short, unsigned short)>:
 
 // derived from arduino Tone library
 void setTone(uint16_t frequency, uint16_t duration)
{
    c540:	b538      	push	{r3, r4, r5, lr}
    c542:	4604      	mov	r4, r0
    c544:	460d      	mov	r5, r1
	 /// if we are already playing, cache the next tone
	if( ToneOn ) {
    c546:	f241 0370 	movw	r3, #4208	; 0x1070
    c54a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c54e:	781b      	ldrb	r3, [r3, #0]
    c550:	b113      	cbz	r3, c558 <Piezo::setTone(unsigned short, unsigned short)+0x18>
		queueTone(frequency,duration);
    c552:	f7ff ff9b 	bl	c48c <Piezo::queueTone(unsigned short, unsigned short)>
		return;
    c556:	bd38      	pop	{r3, r4, r5, pc}
	}

    if(eeprom::getEeprom8(eeprom_offsets::BUZZ_SETTINGS + buzz_eeprom_offsets::BASIC_BUZZ_OFFSET,1) == 0)
    c558:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    c55c:	f04f 0101 	mov.w	r1, #1
    c560:	f004 feee 	bl	11340 <eeprom::getEeprom8(unsigned short, unsigned char)>
    c564:	2800      	cmp	r0, #0
    c566:	d04e      	beq.n	c606 <Piezo::setTone(unsigned short, unsigned short)+0xc6>
        return;

	playing = true;
    c568:	f241 03e8 	movw	r3, #4328	; 0x10e8
    c56c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c570:	f04f 0201 	mov.w	r2, #1
    c574:	701a      	strb	r2, [r3, #0]
	ToneOn = true;
    c576:	f241 0370 	movw	r3, #4208	; 0x1070
    c57a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c57e:	701a      	strb	r2, [r3, #0]
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    c580:	f241 03a4 	movw	r3, #4260	; 0x10a4
    c584:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c588:	785b      	ldrb	r3, [r3, #1]
    c58a:	b95b      	cbnz	r3, c5a4 <Piezo::setTone(unsigned short, unsigned short)+0x64>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    c58c:	f241 02a4 	movw	r2, #4260	; 0x10a4
    c590:	f2c1 0200 	movt	r2, #4096	; 0x1000
    c594:	7893      	ldrb	r3, [r2, #2]
    c596:	7810      	ldrb	r0, [r2, #0]
    c598:	f04f 0101 	mov.w	r1, #1
    c59c:	fa01 f103 	lsl.w	r1, r1, r3
    c5a0:	f7f6 ffa8 	bl	34f4 <GPIO_ClearValue>
	BuzzPin.setValue(false);
    BuzzPin.setDirection(true);
    c5a4:	f241 00a4 	movw	r0, #4260	; 0x10a4
    c5a8:	f2c1 0000 	movt	r0, #4096	; 0x1000
    c5ac:	f04f 0101 	mov.w	r1, #1
    c5b0:	f005 fd76 	bl	120a0 <Pin::setDirection(bool) const>
		
	// 8 MHZ base clock
	uint32_t fCPU = 8000000;
	// scan through prescalars to find the best fit
      uint32_t ocr = fCPU / frequency / 2 - 1;
      toggle_time = ocr;
    c5b4:	f241 03ec 	movw	r3, #4332	; 0x10ec
    c5b8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    BuzzPin.setDirection(true);
		
	// 8 MHZ base clock
	uint32_t fCPU = 8000000;
	// scan through prescalars to find the best fit
      uint32_t ocr = fCPU / frequency / 2 - 1;
    c5bc:	f44f 5290 	mov.w	r2, #4608	; 0x1200
    c5c0:	f2c0 027a 	movt	r2, #122	; 0x7a
    c5c4:	fbb2 f2f4 	udiv	r2, r2, r4
    c5c8:	ea4f 0252 	mov.w	r2, r2, lsr #1
    c5cc:	f102 32ff 	add.w	r2, r2, #4294967295
      toggle_time = ocr;
    c5d0:	601a      	str	r2, [r3, #0]
//      TCCR0B = 0b00001000 + prescalarbits; //set prescaler to desired value
      
//      OCR0A = ocr & 0xFF;
//      OCR0B = ocr & 0xFF; //set pwm frequency
//      TIMSK0 = 0b00000010; //turn compA interrupt on
      toggleCount = 2L * frequency * duration / 1000L;
    c5d2:	f241 03a0 	movw	r3, #4256	; 0x10a0
    c5d6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c5da:	ea4f 0444 	mov.w	r4, r4, lsl #1
    c5de:	fb05 f504 	mul.w	r5, r5, r4
    c5e2:	f644 52d3 	movw	r2, #19923	; 0x4dd3
    c5e6:	f2c1 0262 	movt	r2, #4194	; 0x1062
    c5ea:	fb82 1205 	smull	r1, r2, r2, r5
    c5ee:	ea4f 75e5 	mov.w	r5, r5, asr #31
    c5f2:	ebc5 15a2 	rsb	r5, r5, r2, asr #6
    c5f6:	601d      	str	r5, [r3, #0]
      lastMicros = 0;
    c5f8:	f241 034c 	movw	r3, #4172	; 0x104c
    c5fc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c600:	f04f 0200 	mov.w	r2, #0
    c604:	601a      	str	r2, [r3, #0]
    c606:	bd38      	pop	{r3, r4, r5, pc}

0000c608 <Piezo::errorTone(unsigned char)>:



 // call this sequence on error
 void errorTone(uint8_t iterations)
 {
    c608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	 for(int i = 0; i < iterations; i++)
    c60c:	4606      	mov	r6, r0
    c60e:	b198      	cbz	r0, c638 <Piezo::errorTone(unsigned char)+0x30>
    c610:	f04f 0400 	mov.w	r4, #0
	 {
		setTone(NOTE_B4, 300);
    c614:	f44f 77f7 	mov.w	r7, #494	; 0x1ee
    c618:	f44f 7596 	mov.w	r5, #300	; 0x12c
		setTone(NOTE_A4, 300);
    c61c:	f44f 78dc 	mov.w	r8, #440	; 0x1b8
 // call this sequence on error
 void errorTone(uint8_t iterations)
 {
	 for(int i = 0; i < iterations; i++)
	 {
		setTone(NOTE_B4, 300);
    c620:	4638      	mov	r0, r7
    c622:	4629      	mov	r1, r5
    c624:	f7ff ff8c 	bl	c540 <Piezo::setTone(unsigned short, unsigned short)>
		setTone(NOTE_A4, 300);
    c628:	4640      	mov	r0, r8
    c62a:	4629      	mov	r1, r5
    c62c:	f7ff ff88 	bl	c540 <Piezo::setTone(unsigned short, unsigned short)>


 // call this sequence on error
 void errorTone(uint8_t iterations)
 {
	 for(int i = 0; i < iterations; i++)
    c630:	f104 0401 	add.w	r4, r4, #1
    c634:	42b4      	cmp	r4, r6
    c636:	dbf3      	blt.n	c620 <Piezo::errorTone(unsigned char)+0x18>
    c638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c63c <Piezo::doneTone()>:
	 setTone(NOTE_D8, 433);
 }

// call this sequence at the end of prints
 void doneTone( )// Ta-da!
 {
    c63c:	b508      	push	{r3, lr}

	 setTone(NOTE_A5, 188);
    c63e:	f44f 705c 	mov.w	r0, #880	; 0x370
    c642:	f04f 01bc 	mov.w	r1, #188	; 0xbc
    c646:	f7ff ff7b 	bl	c540 <Piezo::setTone(unsigned short, unsigned short)>
	 setTone(NOTE_0, 188);
    c64a:	f04f 0000 	mov.w	r0, #0
    c64e:	f04f 01bc 	mov.w	r1, #188	; 0xbc
    c652:	f7ff ff75 	bl	c540 <Piezo::setTone(unsigned short, unsigned short)>
	 setTone(NOTE_A6, 188);
    c656:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
    c65a:	f04f 01bc 	mov.w	r1, #188	; 0xbc
    c65e:	f7ff ff6f 	bl	c540 <Piezo::setTone(unsigned short, unsigned short)>
	 setTone(NOTE_0, 188);
    c662:	f04f 0000 	mov.w	r0, #0
    c666:	f04f 01bc 	mov.w	r1, #188	; 0xbc
    c66a:	f7ff ff69 	bl	c540 <Piezo::setTone(unsigned short, unsigned short)>
	 setTone(NOTE_B6, 188);
    c66e:	f44f 60f7 	mov.w	r0, #1976	; 0x7b8
    c672:	f04f 01bc 	mov.w	r1, #188	; 0xbc
    c676:	f7ff ff63 	bl	c540 <Piezo::setTone(unsigned short, unsigned short)>
	 setTone(NOTE_0, 188);
    c67a:	f04f 0000 	mov.w	r0, #0
    c67e:	f04f 01bc 	mov.w	r1, #188	; 0xbc
    c682:	f7ff ff5d 	bl	c540 <Piezo::setTone(unsigned short, unsigned short)>
	 setTone(NOTE_C7, 188);
    c686:	f640 002d 	movw	r0, #2093	; 0x82d
    c68a:	f04f 01bc 	mov.w	r1, #188	; 0xbc
    c68e:	f7ff ff57 	bl	c540 <Piezo::setTone(unsigned short, unsigned short)>
	 setTone(NOTE_CS7, 188);
    c692:	f640 00a9 	movw	r0, #2217	; 0x8a9
    c696:	f04f 01bc 	mov.w	r1, #188	; 0xbc
    c69a:	f7ff ff51 	bl	c540 <Piezo::setTone(unsigned short, unsigned short)>
	 setTone(NOTE_0, 188);
    c69e:	f04f 0000 	mov.w	r0, #0
    c6a2:	f04f 01bc 	mov.w	r1, #188	; 0xbc
    c6a6:	f7ff ff4b 	bl	c540 <Piezo::setTone(unsigned short, unsigned short)>
	 setTone(NOTE_A7, 333);
    c6aa:	f44f 605c 	mov.w	r0, #3520	; 0xdc0
    c6ae:	f240 114d 	movw	r1, #333	; 0x14d
    c6b2:	f7ff ff45 	bl	c540 <Piezo::setTone(unsigned short, unsigned short)>

 }
    c6b6:	bd08      	pop	{r3, pc}

0000c6b8 <Piezo::startUpTone()>:
CircularBuffer16 frequencies(TONE_QUEUE_SIZE, frequency_buf);
CircularBuffer16 durations(TONE_QUEUE_SIZE, duration_buf);
 
 // call this sequence on startup
 void startUpTone()
 {		
    c6b8:	b508      	push	{r3, lr}
	 ///song 3
	 setTone(NOTE_A7, 288);
    c6ba:	f44f 605c 	mov.w	r0, #3520	; 0xdc0
    c6be:	f44f 7190 	mov.w	r1, #288	; 0x120
    c6c2:	f7ff ff3d 	bl	c540 <Piezo::setTone(unsigned short, unsigned short)>
	 setTone(NOTE_0, 188);
    c6c6:	f04f 0000 	mov.w	r0, #0
    c6ca:	f04f 01bc 	mov.w	r1, #188	; 0xbc
    c6ce:	f7ff ff37 	bl	c540 <Piezo::setTone(unsigned short, unsigned short)>
	 setTone(NOTE_CS8, 188);
    c6d2:	f241 1053 	movw	r0, #4435	; 0x1153
    c6d6:	f04f 01bc 	mov.w	r1, #188	; 0xbc
    c6da:	f7ff ff31 	bl	c540 <Piezo::setTone(unsigned short, unsigned short)>
	 setTone(NOTE_0, 188);
    c6de:	f04f 0000 	mov.w	r0, #0
    c6e2:	f04f 01bc 	mov.w	r1, #188	; 0xbc
    c6e6:	f7ff ff2b 	bl	c540 <Piezo::setTone(unsigned short, unsigned short)>
	 setTone(NOTE_D8, 433);
    c6ea:	f241 205b 	movw	r0, #4699	; 0x125b
    c6ee:	f240 11b1 	movw	r1, #433	; 0x1b1
    c6f2:	f7ff ff25 	bl	c540 <Piezo::setTone(unsigned short, unsigned short)>
 }
    c6f6:	bd08      	pop	{r3, pc}

0000c6f8 <Piezo::doInterrupt()>:
      toggleCount = 2L * frequency * duration / 1000L;
      lastMicros = 0;
}

void doInterrupt()
{			  
    c6f8:	b570      	push	{r4, r5, r6, lr}
	if (toggleCount != 0)
    c6fa:	f241 03a0 	movw	r3, #4256	; 0x10a0
    c6fe:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c702:	681b      	ldr	r3, [r3, #0]
    c704:	2b00      	cmp	r3, #0
    c706:	d037      	beq.n	c778 <Piezo::doInterrupt()+0x80>
  {
    // toggle the pin
    toggle = !toggle;
    c708:	f241 0368 	movw	r3, #4200	; 0x1068
    c70c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c710:	781a      	ldrb	r2, [r3, #0]
    c712:	f082 0201 	eor.w	r2, r2, #1
    c716:	701a      	strb	r2, [r3, #0]
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    c718:	f241 03a4 	movw	r3, #4260	; 0x10a4
    c71c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c720:	785b      	ldrb	r3, [r3, #1]
    c722:	b9cb      	cbnz	r3, c758 <Piezo::doInterrupt()+0x60>
		 	return;
		// uint8_t oldSREG = SREG;

//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
    c724:	b162      	cbz	r2, c740 <Piezo::doInterrupt()+0x48>
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    c726:	f241 02a4 	movw	r2, #4260	; 0x10a4
    c72a:	f2c1 0200 	movt	r2, #4096	; 0x1000
    c72e:	7893      	ldrb	r3, [r2, #2]
    c730:	7810      	ldrb	r0, [r2, #0]
    c732:	f04f 0101 	mov.w	r1, #1
    c736:	fa01 f103 	lsl.w	r1, r1, r3
    c73a:	f7f6 fed3 	bl	34e4 <GPIO_SetValue>
    c73e:	e00b      	b.n	c758 <Piezo::doInterrupt()+0x60>
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    c740:	f241 02a4 	movw	r2, #4260	; 0x10a4
    c744:	f2c1 0200 	movt	r2, #4096	; 0x1000
    c748:	7893      	ldrb	r3, [r2, #2]
    c74a:	7810      	ldrb	r0, [r2, #0]
    c74c:	f04f 0101 	mov.w	r1, #1
    c750:	fa01 f103 	lsl.w	r1, r1, r3
    c754:	f7f6 fece 	bl	34f4 <GPIO_ClearValue>
    BuzzPin.setValue(toggle);

    if (toggleCount > 0)
    c758:	f241 03a0 	movw	r3, #4256	; 0x10a0
    c75c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c760:	681b      	ldr	r3, [r3, #0]
    c762:	2b00      	cmp	r3, #0
    c764:	f000 8091 	beq.w	c88a <Piezo::doInterrupt()+0x192>
      toggleCount--;
    c768:	f241 02a0 	movw	r2, #4256	; 0x10a0
    c76c:	f2c1 0200 	movt	r2, #4096	; 0x1000
    c770:	f103 33ff 	add.w	r3, r3, #4294967295
    c774:	6013      	str	r3, [r2, #0]
    c776:	bd70      	pop	{r4, r5, r6, pc}
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    c778:	f241 03a4 	movw	r3, #4260	; 0x10a4
    c77c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c780:	785b      	ldrb	r3, [r3, #1]
    c782:	b95b      	cbnz	r3, c79c <Piezo::doInterrupt()+0xa4>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    c784:	f241 02a4 	movw	r2, #4260	; 0x10a4
    c788:	f2c1 0200 	movt	r2, #4096	; 0x1000
    c78c:	7893      	ldrb	r3, [r2, #2]
    c78e:	7810      	ldrb	r0, [r2, #0]
    c790:	f04f 0101 	mov.w	r1, #1
    c794:	fa01 f103 	lsl.w	r1, r1, r3
    c798:	f7f6 feac 	bl	34f4 <GPIO_ClearValue>
  {
//    TIMSK0 = 0;
//    OCR0B = 0;
//    OCR0A = 0;
    BuzzPin.setValue(false);  // keep pin low after stop
    ToneOn = false;
    c79c:	f241 0370 	movw	r3, #4208	; 0x1070
    c7a0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c7a4:	f04f 0200 	mov.w	r2, #0
    c7a8:	701a      	strb	r2, [r3, #0]
		return size - length;
	}

	/// Check if the buffer is empty
	inline const bool isEmpty() const {
		return length == 0;
    c7aa:	f241 03d4 	movw	r3, #4308	; 0x10d4
    c7ae:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c7b2:	885b      	ldrh	r3, [r3, #2]
    c7b4:	b29b      	uxth	r3, r3
    if(frequencies.isEmpty() == false)
    c7b6:	2b00      	cmp	r3, #0
    c7b8:	d060      	beq.n	c87c <Piezo::doInterrupt()+0x184>
    c7ba:	f241 03d4 	movw	r3, #4308	; 0x10d4
    c7be:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c7c2:	885b      	ldrh	r3, [r3, #2]
    c7c4:	b29b      	uxth	r3, r3
			overflow = true;
		}
	}
	/// Pop a byte off the head of the buffer
	inline BufDataType pop() {
		if (isEmpty()) {
    c7c6:	b94b      	cbnz	r3, c7dc <Piezo::doInterrupt()+0xe4>
			underflow = true;
    c7c8:	f241 03d4 	movw	r3, #4308	; 0x10d4
    c7cc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c7d0:	f04f 0201 	mov.w	r2, #1
    c7d4:	735a      	strb	r2, [r3, #13]
			return BufDataType();
    c7d6:	f04f 0000 	mov.w	r0, #0
    c7da:	e01d      	b.n	c818 <Piezo::doInterrupt()+0x120>
	inline const bool isEmpty() const {
		return length == 0;
	}
	/// Read the buffer directly
	inline BufDataType& operator[](BufSizeType index) {
		const BufSizeType actual_index = (index + start) % size;
    c7dc:	f241 03d4 	movw	r3, #4308	; 0x10d4
    c7e0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c7e4:	8899      	ldrh	r1, [r3, #4]
    c7e6:	b289      	uxth	r1, r1
    c7e8:	881a      	ldrh	r2, [r3, #0]
    c7ea:	fb91 f4f2 	sdiv	r4, r1, r2
    c7ee:	fb02 1114 	mls	r1, r2, r4, r1
		return data[actual_index];
    c7f2:	b28c      	uxth	r4, r1
    c7f4:	6898      	ldr	r0, [r3, #8]
		if (isEmpty()) {
			underflow = true;
			return BufDataType();
		}
		const BufDataType& popped_byte = operator[](0);
		start = (start + 1) % size;
    c7f6:	8899      	ldrh	r1, [r3, #4]
    c7f8:	b289      	uxth	r1, r1
    c7fa:	f101 0101 	add.w	r1, r1, #1
    c7fe:	fb91 f5f2 	sdiv	r5, r1, r2
    c802:	fb02 1215 	mls	r2, r2, r5, r1
    c806:	b292      	uxth	r2, r2
    c808:	809a      	strh	r2, [r3, #4]
		length--;
    c80a:	885a      	ldrh	r2, [r3, #2]
    c80c:	f102 32ff 	add.w	r2, r2, #4294967295
    c810:	b292      	uxth	r2, r2
    c812:	805a      	strh	r2, [r3, #2]
		return popped_byte;
    c814:	f830 0014 	ldrh.w	r0, [r0, r4, lsl #1]
		return size - length;
	}

	/// Check if the buffer is empty
	inline const bool isEmpty() const {
		return length == 0;
    c818:	f241 0350 	movw	r3, #4176	; 0x1050
    c81c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c820:	885b      	ldrh	r3, [r3, #2]
    c822:	b29b      	uxth	r3, r3
			overflow = true;
		}
	}
	/// Pop a byte off the head of the buffer
	inline BufDataType pop() {
		if (isEmpty()) {
    c824:	b94b      	cbnz	r3, c83a <Piezo::doInterrupt()+0x142>
			underflow = true;
    c826:	f241 0350 	movw	r3, #4176	; 0x1050
    c82a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c82e:	f04f 0201 	mov.w	r2, #1
    c832:	735a      	strb	r2, [r3, #13]
			return BufDataType();
    c834:	f04f 0100 	mov.w	r1, #0
    c838:	e01d      	b.n	c876 <Piezo::doInterrupt()+0x17e>
	inline const bool isEmpty() const {
		return length == 0;
	}
	/// Read the buffer directly
	inline BufDataType& operator[](BufSizeType index) {
		const BufSizeType actual_index = (index + start) % size;
    c83a:	f241 0350 	movw	r3, #4176	; 0x1050
    c83e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c842:	8899      	ldrh	r1, [r3, #4]
    c844:	b289      	uxth	r1, r1
    c846:	881a      	ldrh	r2, [r3, #0]
    c848:	fb91 f5f2 	sdiv	r5, r1, r2
    c84c:	fb02 1115 	mls	r1, r2, r5, r1
		return data[actual_index];
    c850:	b28d      	uxth	r5, r1
    c852:	689c      	ldr	r4, [r3, #8]
		if (isEmpty()) {
			underflow = true;
			return BufDataType();
		}
		const BufDataType& popped_byte = operator[](0);
		start = (start + 1) % size;
    c854:	8899      	ldrh	r1, [r3, #4]
    c856:	b289      	uxth	r1, r1
    c858:	f101 0101 	add.w	r1, r1, #1
    c85c:	fb91 f6f2 	sdiv	r6, r1, r2
    c860:	fb02 1216 	mls	r2, r2, r6, r1
    c864:	b292      	uxth	r2, r2
    c866:	809a      	strh	r2, [r3, #4]
		length--;
    c868:	885a      	ldrh	r2, [r3, #2]
    c86a:	f102 32ff 	add.w	r2, r2, #4294967295
    c86e:	b292      	uxth	r2, r2
    c870:	805a      	strh	r2, [r3, #2]
		return popped_byte;
    c872:	f834 1015 	ldrh.w	r1, [r4, r5, lsl #1]
		setTone(frequencies.pop(), durations.pop());
    c876:	f7ff fe63 	bl	c540 <Piezo::setTone(unsigned short, unsigned short)>
    c87a:	bd70      	pop	{r4, r5, r6, pc}
	else
		playing = false;
    c87c:	f241 03e8 	movw	r3, #4328	; 0x10e8
    c880:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c884:	f04f 0200 	mov.w	r2, #0
    c888:	701a      	strb	r2, [r3, #0]
    c88a:	bd70      	pop	{r4, r5, r6, pc}

0000c88c <_GLOBAL__sub_I__ZN5Piezo7BuzzPinE>:
   }
}
}
    c88c:	b538      	push	{r3, r4, r5, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
    c88e:	f241 0048 	movw	r0, #4168	; 0x1048
    c892:	f2c1 0000 	movt	r0, #4096	; 0x1000
    c896:	f04f 0100 	mov.w	r1, #0
    c89a:	f005 f9cf 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
    c89e:	f241 0060 	movw	r0, #4192	; 0x1060
    c8a2:	f2c1 0000 	movt	r0, #4096	; 0x1000
    c8a6:	f04f 0101 	mov.w	r1, #1
    c8aa:	f005 f9c7 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
    c8ae:	f241 0464 	movw	r4, #4196	; 0x1064
    c8b2:	f2c1 0400 	movt	r4, #4096	; 0x1000
    c8b6:	4620      	mov	r0, r4
    c8b8:	f04f 0102 	mov.w	r1, #2
    c8bc:	f005 f9be 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
    c8c0:	f241 0074 	movw	r0, #4212	; 0x1074
    c8c4:	f2c1 0000 	movt	r0, #4096	; 0x1000
    c8c8:	f04f 0103 	mov.w	r1, #3
    c8cc:	f005 f9b6 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
    c8d0:	f241 006c 	movw	r0, #4204	; 0x106c
    c8d4:	f2c1 0000 	movt	r0, #4096	; 0x1000
    c8d8:	f04f 0104 	mov.w	r1, #4
    c8dc:	f005 f9ae 	bl	11c3c <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
    c8e0:	f241 05e4 	movw	r5, #4324	; 0x10e4
    c8e4:	f2c1 0500 	movt	r5, #4096	; 0x1000
    c8e8:	4628      	mov	r0, r5
    c8ea:	f04f 01ff 	mov.w	r1, #255	; 0xff
    c8ee:	f005 f9a5 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
	};
	// currently not used:
	//const uint8_t getPinIndex() const { return pin_index; }
};

static const Pin NullPin(NullPort, 0);
    c8f2:	f241 00f0 	movw	r0, #4336	; 0x10f0
    c8f6:	f2c1 0000 	movt	r0, #4096	; 0x1000
    c8fa:	4629      	mov	r1, r5
    c8fc:	f04f 0200 	mov.w	r2, #0
    c900:	f005 fbae 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
#include "Eeprom.hh"
//#include <avr/eeprom.h>
 
 namespace Piezo{

Pin BuzzPin = BUZZER_PIN;
    c904:	f241 00a4 	movw	r0, #4260	; 0x10a4
    c908:	f2c1 0000 	movt	r0, #4096	; 0x1000
    c90c:	4621      	mov	r1, r4
    c90e:	f04f 0205 	mov.w	r2, #5
    c912:	f005 fba5 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
Timeout piezoTimeout;
    c916:	f241 00f8 	movw	r0, #4344	; 0x10f8
    c91a:	f2c1 0000 	movt	r0, #4096	; 0x1000
    c91e:	f005 ff39 	bl	12794 <Timeout::Timeout()>
	volatile bool overflow; /// Overflow indicator
	volatile bool underflow; /// Underflow indicator
public:
	CircularBufferTempl(BufSizeType size_in, BufDataType* data_in) :
		size(size_in), length(0), start(0), data(data_in), overflow(false),
				underflow(false) {
    c922:	f241 03d4 	movw	r3, #4308	; 0x10d4
    c926:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c92a:	f04f 0414 	mov.w	r4, #20
    c92e:	801c      	strh	r4, [r3, #0]
    c930:	f04f 0200 	mov.w	r2, #0
    c934:	4611      	mov	r1, r2
    c936:	805a      	strh	r2, [r3, #2]
    c938:	809a      	strh	r2, [r3, #4]
    c93a:	f241 00ac 	movw	r0, #4268	; 0x10ac
    c93e:	f2c1 0000 	movt	r0, #4096	; 0x1000
    c942:	6098      	str	r0, [r3, #8]
    c944:	731a      	strb	r2, [r3, #12]
    c946:	735a      	strb	r2, [r3, #13]
    c948:	f241 0350 	movw	r3, #4176	; 0x1050
    c94c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c950:	801c      	strh	r4, [r3, #0]
    c952:	805a      	strh	r2, [r3, #2]
    c954:	809a      	strh	r2, [r3, #4]
    c956:	f241 0278 	movw	r2, #4216	; 0x1078
    c95a:	f2c1 0200 	movt	r2, #4096	; 0x1000
    c95e:	609a      	str	r2, [r3, #8]
    c960:	7319      	strb	r1, [r3, #12]
    c962:	7359      	strb	r1, [r3, #13]
		setTone(frequencies.pop(), durations.pop());
	else
		playing = false;
   }
}
}
    c964:	bd38      	pop	{r3, r4, r5, pc}
    c966:	bf00      	nop

0000c968 <planner::setMaxAxisJerk(float, unsigned char)>:
	void setAccelerationOn(bool on){
		accelerationON = on;
	}
	
	void setMaxAxisJerk(float jerk, uint8_t axis) {
		if (axis < STEPPER_COUNT)
    c968:	2903      	cmp	r1, #3
			axes[axis].max_axis_jerk = jerk;
    c96a:	bf9f      	itttt	ls
    c96c:	f241 6304 	movwls	r3, #5636	; 0x1604
    c970:	f2c1 0300 	movtls	r3, #4096	; 0x1000
    c974:	eb01 0181 	addls.w	r1, r1, r1, lsl #2
    c978:	eb03 0381 	addls.w	r3, r3, r1, lsl #2
    c97c:	bf98      	it	ls
    c97e:	6118      	strls	r0, [r3, #16]
    c980:	4770      	bx	lr
    c982:	bf00      	nop

0000c984 <planner::setAxisMaxLength(long, unsigned char, bool)>:
	}
	
	void setAxisMaxLength(int32_t length, uint8_t axis, bool max){
		if (axis < STEPPER_COUNT){
    c984:	2903      	cmp	r1, #3
    c986:	d813      	bhi.n	c9b0 <planner::setAxisMaxLength(long, unsigned char, bool)+0x2c>
			if (max){
    c988:	b14a      	cbz	r2, c99e <planner::setAxisMaxLength(long, unsigned char, bool)+0x1a>
				axes[axis].max_length = length;
    c98a:	f241 6304 	movw	r3, #5636	; 0x1604
    c98e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c992:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    c996:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    c99a:	6058      	str	r0, [r3, #4]
    c99c:	4770      	bx	lr
			} else {
				axes[axis].min_length = length;
    c99e:	f241 6304 	movw	r3, #5636	; 0x1604
    c9a2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c9a6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    c9aa:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    c9ae:	6098      	str	r0, [r3, #8]
    c9b0:	4770      	bx	lr
    c9b2:	bf00      	nop

0000c9b4 <planner::setMaxXYJerk(float)>:
		}
	}
	
	
	void setMaxXYJerk(float jerk) {
		max_xy_jerk = jerk;
    c9b4:	f241 131c 	movw	r3, #4380	; 0x111c
    c9b8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c9bc:	6018      	str	r0, [r3, #0]
	}
    c9be:	4770      	bx	lr

0000c9c0 <planner::setAxisStepsPerMM(float, unsigned char)>:
	
	void setAxisStepsPerMM(float steps_per_mm, uint8_t axis) {
		if (axis < STEPPER_COUNT)
    c9c0:	2903      	cmp	r1, #3
			axes[axis].steps_per_mm = steps_per_mm;
    c9c2:	bf9f      	itttt	ls
    c9c4:	f241 6304 	movwls	r3, #5636	; 0x1604
    c9c8:	f2c1 0300 	movtls	r3, #4096	; 0x1000
    c9cc:	eb01 0181 	addls.w	r1, r1, r1, lsl #2
    c9d0:	f843 0021 	strls.w	r0, [r3, r1, lsl #2]
    c9d4:	4770      	bx	lr
    c9d6:	bf00      	nop

0000c9d8 <planner::setAcceleration(long)>:
	}

	void setAcceleration(int32_t new_acceleration) {
    c9d8:	b510      	push	{r4, lr}
		default_acceleration = (float)new_acceleration;
    c9da:	f241 1428 	movw	r4, #4392	; 0x1128
    c9de:	f2c1 0400 	movt	r4, #4096	; 0x1000
    c9e2:	f007 f81d 	bl	13a20 <__aeabi_i2f>
    c9e6:	6020      	str	r0, [r4, #0]
	}
    c9e8:	bd10      	pop	{r4, pc}
    c9ea:	bf00      	nop

0000c9ec <planner::setAxisAcceleration(long, unsigned char)>:
	
	// This is in steps/mm.
	void setAxisAcceleration(int32_t new_acceleration, uint8_t axis) {
    c9ec:	b570      	push	{r4, r5, r6, lr}
		if (axis < STEPPER_COUNT)
    c9ee:	2903      	cmp	r1, #3
    c9f0:	d810      	bhi.n	ca14 <planner::setAxisAcceleration(long, unsigned char)+0x28>
			axes[axis].max_acceleration = (float)new_acceleration*axes[axis].steps_per_mm;
    c9f2:	f241 6604 	movw	r6, #5636	; 0x1604
    c9f6:	f2c1 0600 	movt	r6, #4096	; 0x1000
    c9fa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    c9fe:	ea4f 0481 	mov.w	r4, r1, lsl #2
    ca02:	1935      	adds	r5, r6, r4
    ca04:	f007 f80c 	bl	13a20 <__aeabi_i2f>
    ca08:	5931      	ldr	r1, [r6, r4]
    ca0a:	f007 f85d 	bl	13ac8 <__aeabi_fmul>
    ca0e:	f007 fa47 	bl	13ea0 <__aeabi_f2uiz>
    ca12:	60e8      	str	r0, [r5, #12]
    ca14:	bd70      	pop	{r4, r5, r6, pc}
    ca16:	bf00      	nop

0000ca18 <planner::Block::calculate_trapezoid(float const&)>:
	}
#endif

	// Calculates trapezoid parameters so that the entry- and exit-speed is compensated by the provided factors.
	// calculate_trapezoid_for_block(block, block->entry_speed/block->nominal_speed, exit_factor_speed/block->nominal_speed);
	bool Block::calculate_trapezoid(const float &exit_factor_speed) {
    ca18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ca1c:	4604      	mov	r4, r0
    ca1e:	4689      	mov	r9, r1

		float entry_factor = entry_speed/nominal_speed;
    ca20:	6a06      	ldr	r6, [r0, #32]
		float exit_factor = exit_factor_speed/nominal_speed;
		
		uint32_t local_initial_rate = ceil((float)nominal_rate*entry_factor); // (step/min)
    ca22:	f8d0 8038 	ldr.w	r8, [r0, #56]	; 0x38
    ca26:	4640      	mov	r0, r8
    ca28:	f006 fff6 	bl	13a18 <__aeabi_ui2f>
    ca2c:	4607      	mov	r7, r0

	// Calculates trapezoid parameters so that the entry- and exit-speed is compensated by the provided factors.
	// calculate_trapezoid_for_block(block, block->entry_speed/block->nominal_speed, exit_factor_speed/block->nominal_speed);
	bool Block::calculate_trapezoid(const float &exit_factor_speed) {

		float entry_factor = entry_speed/nominal_speed;
    ca2e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    ca30:	4631      	mov	r1, r6
    ca32:	f007 f8fd 	bl	13c30 <__aeabi_fdiv>
    ca36:	4601      	mov	r1, r0
		float exit_factor = exit_factor_speed/nominal_speed;
		
		uint32_t local_initial_rate = ceil((float)nominal_rate*entry_factor); // (step/min)
    ca38:	4638      	mov	r0, r7
    ca3a:	f007 f845 	bl	13ac8 <__aeabi_fmul>
    ca3e:	f006 fc5f 	bl	13300 <__aeabi_f2d>
    ca42:	f012 fdc9 	bl	1f5d8 <ceil>
    ca46:	f006 fec1 	bl	137cc <__aeabi_d2uiz>
    ca4a:	4605      	mov	r5, r0
	// Calculates trapezoid parameters so that the entry- and exit-speed is compensated by the provided factors.
	// calculate_trapezoid_for_block(block, block->entry_speed/block->nominal_speed, exit_factor_speed/block->nominal_speed);
	bool Block::calculate_trapezoid(const float &exit_factor_speed) {

		float entry_factor = entry_speed/nominal_speed;
		float exit_factor = exit_factor_speed/nominal_speed;
    ca4c:	f8d9 0000 	ldr.w	r0, [r9]
    ca50:	4631      	mov	r1, r6
    ca52:	f007 f8ed 	bl	13c30 <__aeabi_fdiv>
		
		uint32_t local_initial_rate = ceil((float)nominal_rate*entry_factor); // (step/min)
		uint32_t local_final_rate = ceil((float)nominal_rate*exit_factor); // (step/min)
    ca56:	4639      	mov	r1, r7
    ca58:	f007 f836 	bl	13ac8 <__aeabi_fmul>
    ca5c:	f006 fc50 	bl	13300 <__aeabi_f2d>
    ca60:	f012 fdba 	bl	1f5d8 <ceil>
    ca64:	f006 feb2 	bl	137cc <__aeabi_d2uiz>
		
		// Limit minimal step rate (Otherwise the timer will overflow.)
		if(local_initial_rate < 120)
			local_initial_rate = 120;
    ca68:	2d77      	cmp	r5, #119	; 0x77
    ca6a:	bf98      	it	ls
    ca6c:	2578      	movls	r5, #120	; 0x78
		if(local_final_rate < 120)
			local_final_rate = 120;
    ca6e:	2877      	cmp	r0, #119	; 0x77
    ca70:	bf98      	it	ls
    ca72:	2078      	movls	r0, #120	; 0x78
		
		int32_t local_initial_rate_squared = (local_initial_rate * local_initial_rate);
    ca74:	fb05 fc05 	mul.w	ip, r5, r5
		int32_t local_final_rate_squared   = (local_final_rate   * local_final_rate);
    ca78:	fb00 f700 	mul.w	r7, r0, r0
		int32_t nominal_rate_squared       = (nominal_rate       * nominal_rate);
		
		int32_t local_acceleration_doubled = acceleration_st<<(1); // == acceleration_st*2
    ca7c:	6c63      	ldr	r3, [r4, #68]	; 0x44

	// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
	// given acceleration:
	FORCE_INLINE int32_t estimate_acceleration_distance(const int32_t &initial_rate_squared, const int32_t &target_rate_squared, const int32_t &acceleration_doubled)
	{
		if (acceleration_doubled!=0) {
    ca7e:	0059      	lsls	r1, r3, #1
			return (target_rate_squared-initial_rate_squared)/acceleration_doubled;
		}
		else {
			return 0;  // acceleration was 0, set acceleration distance to 0
    ca80:	bf04      	itt	eq
    ca82:	2300      	moveq	r3, #0
    ca84:	4698      	moveq	r8, r3

	// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
	// given acceleration:
	FORCE_INLINE int32_t estimate_acceleration_distance(const int32_t &initial_rate_squared, const int32_t &target_rate_squared, const int32_t &acceleration_doubled)
	{
		if (acceleration_doubled!=0) {
    ca86:	d00f      	beq.n	caa8 <planner::Block::calculate_trapezoid(float const&)+0x90>
		if(local_final_rate < 120)
			local_final_rate = 120;
		
		int32_t local_initial_rate_squared = (local_initial_rate * local_initial_rate);
		int32_t local_final_rate_squared   = (local_final_rate   * local_final_rate);
		int32_t nominal_rate_squared       = (nominal_rate       * nominal_rate);
    ca88:	fb08 f808 	mul.w	r8, r8, r8
	// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
	// given acceleration:
	FORCE_INLINE int32_t estimate_acceleration_distance(const int32_t &initial_rate_squared, const int32_t &target_rate_squared, const int32_t &acceleration_doubled)
	{
		if (acceleration_doubled!=0) {
			return (target_rate_squared-initial_rate_squared)/acceleration_doubled;
    ca8c:	ebcc 0308 	rsb	r3, ip, r8
    ca90:	fb93 f3f1 	sdiv	r3, r3, r1
		int32_t local_acceleration_doubled = acceleration_st<<(1); // == acceleration_st*2
		
		int32_t accelerate_steps =
			/*ceil*/(estimate_acceleration_distance(local_initial_rate_squared, nominal_rate_squared, local_acceleration_doubled));
		int32_t decelerate_steps =
			/*floor*/(estimate_acceleration_distance(nominal_rate_squared, local_final_rate_squared, -local_acceleration_doubled));
    ca94:	f1c1 0200 	rsb	r2, r1, #0

	// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
	// given acceleration:
	FORCE_INLINE int32_t estimate_acceleration_distance(const int32_t &initial_rate_squared, const int32_t &target_rate_squared, const int32_t &acceleration_doubled)
	{
		if (acceleration_doubled!=0) {
    ca98:	b122      	cbz	r2, caa4 <planner::Block::calculate_trapezoid(float const&)+0x8c>
			return (target_rate_squared-initial_rate_squared)/acceleration_doubled;
    ca9a:	ebc8 0807 	rsb	r8, r8, r7
    ca9e:	fb98 f8f2 	sdiv	r8, r8, r2
    caa2:	e001      	b.n	caa8 <planner::Block::calculate_trapezoid(float const&)+0x90>
		}
		else {
			return 0;  // acceleration was 0, set acceleration distance to 0
    caa4:	f04f 0800 	mov.w	r8, #0
			/*ceil*/(estimate_acceleration_distance(local_initial_rate_squared, nominal_rate_squared, local_acceleration_doubled));
		int32_t decelerate_steps =
			/*floor*/(estimate_acceleration_distance(nominal_rate_squared, local_final_rate_squared, -local_acceleration_doubled));

		// Calculate the size of Plateau of Nominal Rate.
		int32_t plateau_steps = step_event_count-accelerate_steps-decelerate_steps;
    caa8:	8aa6      	ldrh	r6, [r4, #20]
    caaa:	1af2      	subs	r2, r6, r3

		// Is the Plateau of Nominal Rate smaller than nothing? That means no cruising, and we will
		// have to use intersection_distance() to calculate when to abort acceleration and start braking
		// in order to reach the local_final_rate exactly at the end of this block.
		
		if (plateau_steps < 0) {
    caac:	ebb2 0808 	subs.w	r8, r2, r8
    cab0:	d511      	bpl.n	cad6 <planner::Block::calculate_trapezoid(float const&)+0xbe>
	// a total travel of distance. This can be used to compute the intersection point between acceleration and
	// deceleration in the cases where the trapezoid has no plateau (i.e. never reaches maximum speed)

	FORCE_INLINE int32_t intersection_distance(const int32_t &initial_rate_squared, const int32_t &final_rate_squared, const int32_t &acceleration_mangled, const int32_t &acceleration_quadrupled, const int32_t &distance) 
	{
		if (acceleration_quadrupled!=0) {
    cab2:	004a      	lsls	r2, r1, #1
			return (acceleration_mangled*distance-initial_rate_squared+final_rate_squared)/acceleration_quadrupled;
    cab4:	bf1f      	itttt	ne
    cab6:	fb06 f301 	mulne.w	r3, r6, r1
    caba:	ebcc 0303 	rsbne	r3, ip, r3
    cabe:	18fb      	addne	r3, r7, r3
    cac0:	fb93 f3f2 	sdivne	r3, r3, r2
    cac4:	bf14      	ite	ne
    cac6:	ea23 73e3 	bicne.w	r3, r3, r3, asr #31

template <typename T>
inline const T& min(const T& a, const T& b) { return (a)<(b)?(a):(b); }

template <typename T>
inline const T& max(const T& a, const T& b) { return (a)>(b)?(a):(b); }
    caca:	2300      	moveq	r3, #0
	// deceleration in the cases where the trapezoid has no plateau (i.e. never reaches maximum speed)

	FORCE_INLINE int32_t intersection_distance(const int32_t &initial_rate_squared, const int32_t &final_rate_squared, const int32_t &acceleration_mangled, const int32_t &acceleration_quadrupled, const int32_t &distance) 
	{
		if (acceleration_quadrupled!=0) {
			return (acceleration_mangled*distance-initial_rate_squared+final_rate_squared)/acceleration_quadrupled;
    cacc:	42b3      	cmp	r3, r6
    cace:	bfa8      	it	ge
    cad0:	4633      	movge	r3, r6
			accelerate_steps = /*ceil*/(
				intersection_distance(local_initial_rate_squared, local_final_rate_squared, local_acceleration_doubled, local_acceleration_quadrupled, step_event_count));
			accelerate_steps = max(accelerate_steps, 0L); // Check limits due to numerical round-off
			
			accelerate_steps = min(accelerate_steps, (int32_t)step_event_count);
			plateau_steps = 0;
    cad2:	f04f 0800 	mov.w	r8, #0

		}

		//bool successfully_replanned = true;
//		ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {  // Fill variables used by the stepper in a critical section
				accelerate_until = accelerate_steps;
    cad6:	b29b      	uxth	r3, r3
    cad8:	82e3      	strh	r3, [r4, #22]
				decelerate_after = accelerate_steps+plateau_steps;
    cada:	4443      	add	r3, r8
    cadc:	8323      	strh	r3, [r4, #24]
				initial_rate     = local_initial_rate;
    cade:	63e5      	str	r5, [r4, #60]	; 0x3c
				final_rate       = local_final_rate;
    cae0:	6420      	str	r0, [r4, #64]	; 0x40
//		} // ISR state will be automatically restored here
		
	
		
		return true; //successfully_replanned;
	}
    cae2:	f04f 0001 	mov.w	r0, #1
    cae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    caea:	bf00      	nop

0000caec <planner::planner_reverse_pass()>:
		}
	}

	// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
	// implements the reverse pass.
	void planner_reverse_pass() {
    caec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    caf0:	b083      	sub	sp, #12
		inline bool isFull() {
			return (getNextIndex(head) == tail);
		}
		
		inline BufSizeType getUsedCount() {
			return ((head-tail+size) & size_mask);
    caf2:	f241 638c 	movw	r3, #5772	; 0x168c
    caf6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cafa:	7818      	ldrb	r0, [r3, #0]
    cafc:	785a      	ldrb	r2, [r3, #1]
    cafe:	7899      	ldrb	r1, [r3, #2]
    cb00:	1841      	adds	r1, r0, r1
    cb02:	1a89      	subs	r1, r1, r2
    cb04:	78da      	ldrb	r2, [r3, #3]
	}

	// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
	// implements the reverse pass.
	void planner_reverse_pass() {
		if (block_buffer.getUsedCount() > 1) {
    cb06:	ea01 0302 	and.w	r3, r1, r2
    cb0a:	2b01      	cmp	r3, #1
    cb0c:	d968      	bls.n	cbe0 <planner::planner_reverse_pass()+0xf4>
		
		inline BufDataType *getHead() {
			return &data[head];
		}
		inline BufSizeType getHeadIndex() {
			return head;
    cb0e:	f241 638c 	movw	r3, #5772	; 0x168c
    cb12:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cb16:	781e      	ldrb	r6, [r3, #0]
		}
		
		inline BufDataType &operator[] (BufSizeType index) {
			 // adding size should make negative indexes < size work ok
			// int16_t offset = index < 0 ? index : ((index + size) & size_mask);
			return data[index];
    cb18:	685b      	ldr	r3, [r3, #4]
    cb1a:	f04f 084c 	mov.w	r8, #76	; 0x4c
    cb1e:	fb08 3806 	mla	r8, r8, r6, r3
		inline BufSizeType getNextIndex(BufSizeType from) {
			return ((from + 1) & size_mask);
		}
		
		inline BufSizeType getPreviousIndex(BufSizeType from) {
			return (((from+size) - 1) & size_mask);
    cb22:	f241 658c 	movw	r5, #5772	; 0x168c
    cb26:	f2c1 0500 	movt	r5, #4096	; 0x1000
		}
		
		inline BufDataType &operator[] (BufSizeType index) {
			 // adding size should make negative indexes < size work ok
			// int16_t offset = index < 0 ? index : ((index + size) & size_mask);
			return data[index];
    cb2a:	f04f 094c 	mov.w	r9, #76	; 0x4c
    cb2e:	e000      	b.n	cb32 <planner::planner_reverse_pass()+0x46>
			uint8_t block_index = block_buffer.getHeadIndex();
			Block *block[2] = { &block_buffer[block_index], NULL };
			do { 
				block_index = block_buffer.getPreviousIndex(block_index); 
				block[1] = block[0];
				block[0] = &block_buffer[block_index];
    cb30:	46a0      	mov	r8, r4
		inline BufSizeType getNextIndex(BufSizeType from) {
			return ((from + 1) & size_mask);
		}
		
		inline BufSizeType getPreviousIndex(BufSizeType from) {
			return (((from+size) - 1) & size_mask);
    cb32:	78ab      	ldrb	r3, [r5, #2]
    cb34:	f103 33ff 	add.w	r3, r3, #4294967295
    cb38:	18f6      	adds	r6, r6, r3
    cb3a:	78eb      	ldrb	r3, [r5, #3]
    cb3c:	401e      	ands	r6, r3
		}
		
		inline BufDataType &operator[] (BufSizeType index) {
			 // adding size should make negative indexes < size work ok
			// int16_t offset = index < 0 ? index : ((index + size) & size_mask);
			return data[index];
    cb3e:	686c      	ldr	r4, [r5, #4]
    cb40:	fb09 4406 	mla	r4, r9, r6, r4

	}

	// The kernel called by planner_recalculate() when scanning the plan from last to first entry.
	inline void planner_reverse_pass_kernel(Block *current, Block *next) {
		if(!current) { return; }
    cb44:	2c00      	cmp	r4, #0
    cb46:	d048      	beq.n	cbda <planner::planner_reverse_pass()+0xee>

		// If entry speed is already at the maximum entry speed, no need to recheck. Block is cruising.
		// If not, block in state of acceleration or deceleration. Reset entry speed to maximum and
		// check for maximum allowable speed reductions to ensure maximum possible planned speed.
		// We cannot change the entry speed of a Busy block ... we've already entered...
		if (current->entry_speed != current->max_entry_speed && !current->flags & Block::Busy) {
    cb48:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    cb4a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    cb4c:	4639      	mov	r1, r7
    cb4e:	f007 f94f 	bl	13df0 <__aeabi_fcmpeq>
    cb52:	2800      	cmp	r0, #0
    cb54:	d141      	bne.n	cbda <planner::planner_reverse_pass()+0xee>
    cb56:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    cb5a:	2b00      	cmp	r3, #0
    cb5c:	d13d      	bne.n	cbda <planner::planner_reverse_pass()+0xee>
			// If nominal length true, max junction speed is guaranteed to be reached. Only compute
			// for max allowable speed if block is decelerating and nominal length is false.
			if ((!(current->flags & Block::NominalLength)) && (current->max_entry_speed >= next->entry_speed)) {
    cb5e:	f8d8 8024 	ldr.w	r8, [r8, #36]	; 0x24
    cb62:	4638      	mov	r0, r7
    cb64:	4641      	mov	r1, r8
    cb66:	f007 f961 	bl	13e2c <__aeabi_fcmpge>
    cb6a:	2800      	cmp	r0, #0
    cb6c:	d02e      	beq.n	cbcc <planner::planner_reverse_pass()+0xe0>
	
	// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
	// acceleration within the allotted distance.
	// Needs to be conbverted to fixed-point.
	FORCE_INLINE float max_allowable_speed(const float &acceleration, const float &target_velocity, const float &distance) {
		return sqrt((target_velocity*target_velocity)-(acceleration*2.0)*distance);
    cb6e:	4640      	mov	r0, r8
    cb70:	4641      	mov	r1, r8
    cb72:	f006 ffa9 	bl	13ac8 <__aeabi_fmul>
    cb76:	f006 fbc3 	bl	13300 <__aeabi_f2d>
    cb7a:	e9cd 0100 	strd	r0, r1, [sp]
		if (current->entry_speed != current->max_entry_speed && !current->flags & Block::Busy) {
			// If nominal length true, max junction speed is guaranteed to be reached. Only compute
			// for max allowable speed if block is decelerating and nominal length is false.
			if ((!(current->flags & Block::NominalLength)) && (current->max_entry_speed >= next->entry_speed)) {
				current->entry_speed = min( current->max_entry_speed,
					max_allowable_speed(-current->acceleration,next->entry_speed,current->millimeters));
    cb7e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    cb80:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
	
	// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
	// acceleration within the allotted distance.
	// Needs to be conbverted to fixed-point.
	FORCE_INLINE float max_allowable_speed(const float &acceleration, const float &target_velocity, const float &distance) {
		return sqrt((target_velocity*target_velocity)-(acceleration*2.0)*distance);
    cb84:	f006 fbbc 	bl	13300 <__aeabi_f2d>
    cb88:	4602      	mov	r2, r0
    cb8a:	460b      	mov	r3, r1
    cb8c:	f006 fa5a 	bl	13044 <__adddf3>
    cb90:	4682      	mov	sl, r0
    cb92:	468b      	mov	fp, r1
    cb94:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    cb96:	f006 fbb3 	bl	13300 <__aeabi_f2d>
    cb9a:	4602      	mov	r2, r0
    cb9c:	460b      	mov	r3, r1
    cb9e:	4650      	mov	r0, sl
    cba0:	4659      	mov	r1, fp
    cba2:	f006 fc01 	bl	133a8 <__aeabi_dmul>
    cba6:	4602      	mov	r2, r0
    cba8:	460b      	mov	r3, r1
    cbaa:	e9dd 0100 	ldrd	r0, r1, [sp]
    cbae:	f006 fa47 	bl	13040 <__aeabi_dsub>
    cbb2:	f012 fda9 	bl	1f708 <sqrt>
    cbb6:	f006 fe29 	bl	1380c <__aeabi_d2f>
    cbba:	4680      	mov	r8, r0
#ifdef max
#undef max
#endif

template <typename T>
inline const T& min(const T& a, const T& b) { return (a)<(b)?(a):(b); }
    cbbc:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    cbbe:	4639      	mov	r1, r7
    cbc0:	f007 f93e 	bl	13e40 <__aeabi_fcmpgt>
    cbc4:	b900      	cbnz	r0, cbc8 <planner::planner_reverse_pass()+0xdc>
    cbc6:	4647      	mov	r7, r8
		if (current->entry_speed != current->max_entry_speed && !current->flags & Block::Busy) {
			// If nominal length true, max junction speed is guaranteed to be reached. Only compute
			// for max allowable speed if block is decelerating and nominal length is false.
			if ((!(current->flags & Block::NominalLength)) && (current->max_entry_speed >= next->entry_speed)) {
				current->entry_speed = min( current->max_entry_speed,
					max_allowable_speed(-current->acceleration,next->entry_speed,current->millimeters));
    cbc8:	6267      	str	r7, [r4, #36]	; 0x24
    cbca:	e000      	b.n	cbce <planner::planner_reverse_pass()+0xe2>
			} else {
				current->entry_speed = current->max_entry_speed;
    cbcc:	6267      	str	r7, [r4, #36]	; 0x24
			}
			current->flags |= Block::Recalculate;
    cbce:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    cbd2:	f043 0302 	orr.w	r3, r3, #2
    cbd6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
		
		inline BufDataType *getTail() {
			return &data[tail];
		}
		inline BufSizeType getTailIndex() {
			return tail;
    cbda:	786b      	ldrb	r3, [r5, #1]
	// implements the reverse pass.
	void planner_reverse_pass() {
		if (block_buffer.getUsedCount() > 1) {
			uint8_t block_index = block_buffer.getHeadIndex();
			Block *block[2] = { &block_buffer[block_index], NULL };
			do { 
    cbdc:	429e      	cmp	r6, r3
    cbde:	d1a7      	bne.n	cb30 <planner::planner_reverse_pass()+0x44>
				block[1] = block[0];
				block[0] = &block_buffer[block_index];
				planner_reverse_pass_kernel(block[0], block[1]);
			} while (block_index != block_buffer.getTailIndex());
		}
	}
    cbe0:	b003      	add	sp, #12
    cbe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cbe6:	bf00      	nop

0000cbe8 <planner::planner_forward_pass()>:
		}
	}

	// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
	// implements the forward pass.
	void planner_forward_pass() {
    cbe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cbec:	b085      	sub	sp, #20
		
		inline BufDataType *getTail() {
			return &data[tail];
		}
		inline BufSizeType getTailIndex() {
			return tail;
    cbee:	f241 638c 	movw	r3, #5772	; 0x168c
    cbf2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cbf6:	785d      	ldrb	r5, [r3, #1]
		
		inline BufDataType *getHead() {
			return &data[head];
		}
		inline BufSizeType getHeadIndex() {
			return head;
    cbf8:	781b      	ldrb	r3, [r3, #0]
	// implements the forward pass.
	void planner_forward_pass() {
		uint8_t block_index = block_buffer.getTailIndex();
		Block *block[3] = { NULL, NULL, NULL };

		while(block_index != block_buffer.getHeadIndex()) {
    cbfa:	429d      	cmp	r5, r3
    cbfc:	f040 80a2 	bne.w	cd44 <planner::planner_forward_pass()+0x15c>
    cc00:	e0b2      	b.n	cd68 <planner::planner_forward_pass()+0x180>
		}
		
		inline BufDataType &operator[] (BufSizeType index) {
			 // adding size should make negative indexes < size work ok
			// int16_t offset = index < 0 ? index : ((index + size) & size_mask);
			return data[index];
    cc02:	6873      	ldr	r3, [r6, #4]
    cc04:	fb0a 3905 	mla	r9, sl, r5, r3
		}
	}

	// The kernel called by planner_recalculate() when scanning the plan from first to last entry.
	inline void planner_forward_pass_kernel(Block *previous, Block *current, Block *next) {
		if(!previous) { return; }
    cc08:	2c00      	cmp	r4, #0
    cc0a:	d047      	beq.n	cc9c <planner::planner_forward_pass()+0xb4>

		// If the previous block is an acceleration block, but it is not long enough to complete the
		// full speed change within the block, we need to adjust the entry speed accordingly. Entry
		// speeds have already been reset, maximized, and reverse planned by reverse planner.
		// If nominal length is true, max junction speed is guaranteed to be reached. No need to recheck.
		if (!(previous->flags & Block::NominalLength)) {
    cc0c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    cc10:	f013 0f04 	tst.w	r3, #4
    cc14:	d142      	bne.n	cc9c <planner::planner_forward_pass()+0xb4>
			if (previous->entry_speed <= current->entry_speed) {
    cc16:	6a67      	ldr	r7, [r4, #36]	; 0x24
    cc18:	4638      	mov	r0, r7
    cc1a:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
    cc1e:	f007 f8fb 	bl	13e18 <__aeabi_fcmple>
    cc22:	2800      	cmp	r0, #0
    cc24:	d03a      	beq.n	cc9c <planner::planner_forward_pass()+0xb4>
	
	// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
	// acceleration within the allotted distance.
	// Needs to be conbverted to fixed-point.
	FORCE_INLINE float max_allowable_speed(const float &acceleration, const float &target_velocity, const float &distance) {
		return sqrt((target_velocity*target_velocity)-(acceleration*2.0)*distance);
    cc26:	4638      	mov	r0, r7
    cc28:	4639      	mov	r1, r7
    cc2a:	f006 ff4d 	bl	13ac8 <__aeabi_fmul>
    cc2e:	f006 fb67 	bl	13300 <__aeabi_f2d>
    cc32:	e9cd 0100 	strd	r0, r1, [sp]
		// speeds have already been reset, maximized, and reverse planned by reverse planner.
		// If nominal length is true, max junction speed is guaranteed to be reached. No need to recheck.
		if (!(previous->flags & Block::NominalLength)) {
			if (previous->entry_speed <= current->entry_speed) {
				float entry_speed = min( current->entry_speed,
					max_allowable_speed(-previous->acceleration,previous->entry_speed,previous->millimeters) );
    cc36:	6b20      	ldr	r0, [r4, #48]	; 0x30
    cc38:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
	
	// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
	// acceleration within the allotted distance.
	// Needs to be conbverted to fixed-point.
	FORCE_INLINE float max_allowable_speed(const float &acceleration, const float &target_velocity, const float &distance) {
		return sqrt((target_velocity*target_velocity)-(acceleration*2.0)*distance);
    cc3c:	f006 fb60 	bl	13300 <__aeabi_f2d>
    cc40:	4602      	mov	r2, r0
    cc42:	460b      	mov	r3, r1
    cc44:	f006 f9fe 	bl	13044 <__adddf3>
    cc48:	e9cd 0102 	strd	r0, r1, [sp, #8]
    cc4c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    cc4e:	f006 fb57 	bl	13300 <__aeabi_f2d>
    cc52:	4602      	mov	r2, r0
    cc54:	460b      	mov	r3, r1
    cc56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    cc5a:	f006 fba5 	bl	133a8 <__aeabi_dmul>
    cc5e:	4602      	mov	r2, r0
    cc60:	460b      	mov	r3, r1
    cc62:	e9dd 0100 	ldrd	r0, r1, [sp]
    cc66:	f006 f9eb 	bl	13040 <__aeabi_dsub>
    cc6a:	f012 fd4d 	bl	1f708 <sqrt>
    cc6e:	f006 fdcd 	bl	1380c <__aeabi_d2f>
    cc72:	4607      	mov	r7, r0
#ifdef max
#undef max
#endif

template <typename T>
inline const T& min(const T& a, const T& b) { return (a)<(b)?(a):(b); }
    cc74:	f8d8 4024 	ldr.w	r4, [r8, #36]	; 0x24
    cc78:	4621      	mov	r1, r4
    cc7a:	f007 f8e1 	bl	13e40 <__aeabi_fcmpgt>
    cc7e:	b100      	cbz	r0, cc82 <planner::planner_forward_pass()+0x9a>
		// speeds have already been reset, maximized, and reverse planned by reverse planner.
		// If nominal length is true, max junction speed is guaranteed to be reached. No need to recheck.
		if (!(previous->flags & Block::NominalLength)) {
			if (previous->entry_speed <= current->entry_speed) {
				float entry_speed = min( current->entry_speed,
					max_allowable_speed(-previous->acceleration,previous->entry_speed,previous->millimeters) );
    cc80:	4627      	mov	r7, r4

				// Check for junction speed change
				if (current->entry_speed != entry_speed) {
    cc82:	4620      	mov	r0, r4
    cc84:	4639      	mov	r1, r7
    cc86:	f007 f8b3 	bl	13df0 <__aeabi_fcmpeq>
    cc8a:	b938      	cbnz	r0, cc9c <planner::planner_forward_pass()+0xb4>
					current->entry_speed = entry_speed;
    cc8c:	f8c8 7024 	str.w	r7, [r8, #36]	; 0x24
					current->flags |= Block::Recalculate;
    cc90:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
    cc94:	f043 0302 	orr.w	r3, r3, #2
    cc98:	f888 3048 	strb.w	r3, [r8, #72]	; 0x48
		// speeds have already been reset, maximized, and reverse planned by reverse planner.
		// If nominal length is true, max junction speed is guaranteed to be reached. No need to recheck.
		if (!(previous->flags & Block::NominalLength)) {
			if (previous->entry_speed <= current->entry_speed) {
				float entry_speed = min( current->entry_speed,
					max_allowable_speed(-previous->acceleration,previous->entry_speed,previous->millimeters) );
    cc9c:	4644      	mov	r4, r8
		}
		
		inline BufDataType &operator[] (BufSizeType index) {
			 // adding size should make negative indexes < size work ok
			// int16_t offset = index < 0 ? index : ((index + size) & size_mask);
			return data[index];
    cc9e:	46c8      	mov	r8, r9
		inline BufSizeType getTailIndex() {
			return tail;
		}
		
		inline BufSizeType getNextIndex(BufSizeType from) {
			return ((from + 1) & size_mask);
    cca0:	f105 0501 	add.w	r5, r5, #1
    cca4:	78f3      	ldrb	r3, [r6, #3]
    cca6:	401d      	ands	r5, r3
		
		inline BufDataType *getHead() {
			return &data[head];
		}
		inline BufSizeType getHeadIndex() {
			return head;
    cca8:	7833      	ldrb	r3, [r6, #0]
	// implements the forward pass.
	void planner_forward_pass() {
		uint8_t block_index = block_buffer.getTailIndex();
		Block *block[3] = { NULL, NULL, NULL };

		while(block_index != block_buffer.getHeadIndex()) {
    ccaa:	429d      	cmp	r5, r3
    ccac:	d1a9      	bne.n	cc02 <planner::planner_forward_pass()+0x1a>
		}
	}

	// The kernel called by planner_recalculate() when scanning the plan from first to last entry.
	inline void planner_forward_pass_kernel(Block *previous, Block *current, Block *next) {
		if(!previous) { return; }
    ccae:	2c00      	cmp	r4, #0
    ccb0:	d05a      	beq.n	cd68 <planner::planner_forward_pass()+0x180>

		// If the previous block is an acceleration block, but it is not long enough to complete the
		// full speed change within the block, we need to adjust the entry speed accordingly. Entry
		// speeds have already been reset, maximized, and reverse planned by reverse planner.
		// If nominal length is true, max junction speed is guaranteed to be reached. No need to recheck.
		if (!(previous->flags & Block::NominalLength)) {
    ccb2:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    ccb6:	f013 0f04 	tst.w	r3, #4
    ccba:	d155      	bne.n	cd68 <planner::planner_forward_pass()+0x180>
			if (previous->entry_speed <= current->entry_speed) {
    ccbc:	6a65      	ldr	r5, [r4, #36]	; 0x24
    ccbe:	4628      	mov	r0, r5
    ccc0:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
    ccc4:	f007 f8a8 	bl	13e18 <__aeabi_fcmple>
    ccc8:	2800      	cmp	r0, #0
    ccca:	d04d      	beq.n	cd68 <planner::planner_forward_pass()+0x180>
	
	// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
	// acceleration within the allotted distance.
	// Needs to be conbverted to fixed-point.
	FORCE_INLINE float max_allowable_speed(const float &acceleration, const float &target_velocity, const float &distance) {
		return sqrt((target_velocity*target_velocity)-(acceleration*2.0)*distance);
    cccc:	4628      	mov	r0, r5
    ccce:	4629      	mov	r1, r5
    ccd0:	f006 fefa 	bl	13ac8 <__aeabi_fmul>
    ccd4:	f006 fb14 	bl	13300 <__aeabi_f2d>
    ccd8:	4682      	mov	sl, r0
    ccda:	468b      	mov	fp, r1
		// speeds have already been reset, maximized, and reverse planned by reverse planner.
		// If nominal length is true, max junction speed is guaranteed to be reached. No need to recheck.
		if (!(previous->flags & Block::NominalLength)) {
			if (previous->entry_speed <= current->entry_speed) {
				float entry_speed = min( current->entry_speed,
					max_allowable_speed(-previous->acceleration,previous->entry_speed,previous->millimeters) );
    ccdc:	6b20      	ldr	r0, [r4, #48]	; 0x30
    ccde:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
	
	// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
	// acceleration within the allotted distance.
	// Needs to be conbverted to fixed-point.
	FORCE_INLINE float max_allowable_speed(const float &acceleration, const float &target_velocity, const float &distance) {
		return sqrt((target_velocity*target_velocity)-(acceleration*2.0)*distance);
    cce2:	f006 fb0d 	bl	13300 <__aeabi_f2d>
    cce6:	4602      	mov	r2, r0
    cce8:	460b      	mov	r3, r1
    ccea:	f006 f9ab 	bl	13044 <__adddf3>
    ccee:	4606      	mov	r6, r0
    ccf0:	460f      	mov	r7, r1
    ccf2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ccf4:	f006 fb04 	bl	13300 <__aeabi_f2d>
    ccf8:	4602      	mov	r2, r0
    ccfa:	460b      	mov	r3, r1
    ccfc:	4630      	mov	r0, r6
    ccfe:	4639      	mov	r1, r7
    cd00:	f006 fb52 	bl	133a8 <__aeabi_dmul>
    cd04:	4602      	mov	r2, r0
    cd06:	460b      	mov	r3, r1
    cd08:	4650      	mov	r0, sl
    cd0a:	4659      	mov	r1, fp
    cd0c:	f006 f998 	bl	13040 <__aeabi_dsub>
    cd10:	f012 fcfa 	bl	1f708 <sqrt>
    cd14:	f006 fd7a 	bl	1380c <__aeabi_d2f>
    cd18:	4605      	mov	r5, r0
#ifdef max
#undef max
#endif

template <typename T>
inline const T& min(const T& a, const T& b) { return (a)<(b)?(a):(b); }
    cd1a:	f8d8 4024 	ldr.w	r4, [r8, #36]	; 0x24
    cd1e:	4621      	mov	r1, r4
    cd20:	f007 f88e 	bl	13e40 <__aeabi_fcmpgt>
    cd24:	b100      	cbz	r0, cd28 <planner::planner_forward_pass()+0x140>
		// speeds have already been reset, maximized, and reverse planned by reverse planner.
		// If nominal length is true, max junction speed is guaranteed to be reached. No need to recheck.
		if (!(previous->flags & Block::NominalLength)) {
			if (previous->entry_speed <= current->entry_speed) {
				float entry_speed = min( current->entry_speed,
					max_allowable_speed(-previous->acceleration,previous->entry_speed,previous->millimeters) );
    cd26:	4625      	mov	r5, r4

				// Check for junction speed change
				if (current->entry_speed != entry_speed) {
    cd28:	4620      	mov	r0, r4
    cd2a:	4629      	mov	r1, r5
    cd2c:	f007 f860 	bl	13df0 <__aeabi_fcmpeq>
    cd30:	b9d0      	cbnz	r0, cd68 <planner::planner_forward_pass()+0x180>
					current->entry_speed = entry_speed;
    cd32:	f8c8 5024 	str.w	r5, [r8, #36]	; 0x24
					current->flags |= Block::Recalculate;
    cd36:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
    cd3a:	f043 0302 	orr.w	r3, r3, #2
    cd3e:	f888 3048 	strb.w	r3, [r8, #72]	; 0x48
    cd42:	e011      	b.n	cd68 <planner::planner_forward_pass()+0x180>
		}
		
		inline BufDataType &operator[] (BufSizeType index) {
			 // adding size should make negative indexes < size work ok
			// int16_t offset = index < 0 ? index : ((index + size) & size_mask);
			return data[index];
    cd44:	f241 638c 	movw	r3, #5772	; 0x168c
    cd48:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cd4c:	685b      	ldr	r3, [r3, #4]
    cd4e:	f04f 084c 	mov.w	r8, #76	; 0x4c
    cd52:	fb08 3805 	mla	r8, r8, r5, r3

	// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
	// implements the forward pass.
	void planner_forward_pass() {
		uint8_t block_index = block_buffer.getTailIndex();
		Block *block[3] = { NULL, NULL, NULL };
    cd56:	f04f 0400 	mov.w	r4, #0
		inline BufSizeType getTailIndex() {
			return tail;
		}
		
		inline BufSizeType getNextIndex(BufSizeType from) {
			return ((from + 1) & size_mask);
    cd5a:	f241 668c 	movw	r6, #5772	; 0x168c
    cd5e:	f2c1 0600 	movt	r6, #4096	; 0x1000
		}
		
		inline BufDataType &operator[] (BufSizeType index) {
			 // adding size should make negative indexes < size work ok
			// int16_t offset = index < 0 ? index : ((index + size) & size_mask);
			return data[index];
    cd62:	f04f 0a4c 	mov.w	sl, #76	; 0x4c
    cd66:	e79b      	b.n	cca0 <planner::planner_forward_pass()+0xb8>
			block[2] = &block_buffer[block_index];
			planner_forward_pass_kernel(block[0],block[1],block[2]);
			block_index = block_buffer.getNextIndex(block_index);
		}
		planner_forward_pass_kernel(block[1], block[2], NULL);
	}
    cd68:	b005      	add	sp, #20
    cd6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cd6e:	bf00      	nop

0000cd70 <planner::planner_recalculate_trapezoids()>:

	// Recalculates the trapezoid speed profiles for all blocks in the plan according to the 
	// entry_factor for each junction. Must be called by planner_recalculate() after 
	// updating the blocks.
	// Returns true if planning succeded.
	bool planner_recalculate_trapezoids() {
    cd70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		
		inline BufDataType *getTail() {
			return &data[tail];
		}
		inline BufSizeType getTailIndex() {
			return tail;
    cd74:	f241 638c 	movw	r3, #5772	; 0x168c
    cd78:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cd7c:	785e      	ldrb	r6, [r3, #1]
		
		inline BufDataType *getHead() {
			return &data[head];
		}
		inline BufSizeType getHeadIndex() {
			return head;
    cd7e:	781b      	ldrb	r3, [r3, #0]
	bool planner_recalculate_trapezoids() {
		int8_t block_index = block_buffer.getTailIndex();
		Block *current;
		Block *next = NULL;
		
		while(block_index != block_buffer.getHeadIndex()) {
    cd80:	b272      	sxtb	r2, r6
    cd82:	429a      	cmp	r2, r3
	// updating the blocks.
	// Returns true if planning succeded.
	bool planner_recalculate_trapezoids() {
		int8_t block_index = block_buffer.getTailIndex();
		Block *current;
		Block *next = NULL;
    cd84:	bf08      	it	eq
    cd86:	2400      	moveq	r4, #0
		
		while(block_index != block_buffer.getHeadIndex()) {
    cd88:	d135      	bne.n	cdf6 <planner::planner_recalculate_trapezoids()+0x86>
    cd8a:	e025      	b.n	cdd8 <planner::planner_recalculate_trapezoids()+0x68>
			current = next;
			next = &block_buffer[block_index];
    cd8c:	b2f6      	uxtb	r6, r6
		}
		
		inline BufDataType &operator[] (BufSizeType index) {
			 // adding size should make negative indexes < size work ok
			// int16_t offset = index < 0 ? index : ((index + size) & size_mask);
			return data[index];
    cd8e:	686f      	ldr	r7, [r5, #4]
    cd90:	fb08 7706 	mla	r7, r8, r6, r7
		Block *next = NULL;
		
		while(block_index != block_buffer.getHeadIndex()) {
			current = next;
			next = &block_buffer[block_index];
			if (current) {
    cd94:	b1bc      	cbz	r4, cdc6 <planner::planner_recalculate_trapezoids()+0x56>
				// Recalculate if current block entry or exit junction speed has changed.
				if ((current->flags & Block::Recalculate) || (next->flags & Block::Recalculate) && !(current->flags & Block::Busy)) {
    cd96:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    cd9a:	f013 0f02 	tst.w	r3, #2
    cd9e:	d107      	bne.n	cdb0 <planner::planner_recalculate_trapezoids()+0x40>
    cda0:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
    cda4:	f012 0f02 	tst.w	r2, #2
    cda8:	d00d      	beq.n	cdc6 <planner::planner_recalculate_trapezoids()+0x56>
    cdaa:	f013 0f01 	tst.w	r3, #1
    cdae:	d10a      	bne.n	cdc6 <planner::planner_recalculate_trapezoids()+0x56>
					// NOTE: Entry and exit factors always > 0 by all previous logic operations.
					current->calculate_trapezoid(next->entry_speed);
    cdb0:	4620      	mov	r0, r4
    cdb2:	f107 0124 	add.w	r1, r7, #36	; 0x24
    cdb6:	f7ff fe2f 	bl	ca18 <planner::Block::calculate_trapezoid(float const&)>
				
					// Reset current only to ensure next trapezoid is computed
					// Also make sure the PlannedToStop flag gets cleared, since we are planning to the next move
					current->flags &= ~Block::Recalculate;//(Block::Recalculate|Block::PlannedToStop);
    cdba:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    cdbe:	f023 0302 	bic.w	r3, r3, #2
    cdc2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
		}
		
		inline BufDataType &operator[] (BufSizeType index) {
			 // adding size should make negative indexes < size work ok
			// int16_t offset = index < 0 ? index : ((index + size) & size_mask);
			return data[index];
    cdc6:	463c      	mov	r4, r7
		inline BufSizeType getTailIndex() {
			return tail;
		}
		
		inline BufSizeType getNextIndex(BufSizeType from) {
			return ((from + 1) & size_mask);
    cdc8:	f106 0601 	add.w	r6, r6, #1
    cdcc:	78eb      	ldrb	r3, [r5, #3]
    cdce:	401e      	ands	r6, r3
		
		inline BufDataType *getHead() {
			return &data[head];
		}
		inline BufSizeType getHeadIndex() {
			return head;
    cdd0:	782b      	ldrb	r3, [r5, #0]
	bool planner_recalculate_trapezoids() {
		int8_t block_index = block_buffer.getTailIndex();
		Block *current;
		Block *next = NULL;
		
		while(block_index != block_buffer.getHeadIndex()) {
    cdd2:	b272      	sxtb	r2, r6
    cdd4:	429a      	cmp	r2, r3
    cdd6:	d1d9      	bne.n	cd8c <planner::planner_recalculate_trapezoids()+0x1c>
			}
			block_index = block_buffer.getNextIndex( block_index );
		}
		
		// Last/newest block in buffer. Exit speed is set with stop_speed. Always recalculated.
		next->calculate_trapezoid(next->stop_speed);
    cdd8:	4620      	mov	r0, r4
    cdda:	f104 0134 	add.w	r1, r4, #52	; 0x34
    cdde:	f7ff fe1b 	bl	ca18 <planner::Block::calculate_trapezoid(float const&)>
		next->flags &= ~Block::Recalculate;
    cde2:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    cde6:	f023 0302 	bic.w	r3, r3, #2
    cdea:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
		return true;
	}
    cdee:	f04f 0001 	mov.w	r0, #1
    cdf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		Block *current;
		Block *next = NULL;
		
		while(block_index != block_buffer.getHeadIndex()) {
			current = next;
			next = &block_buffer[block_index];
    cdf6:	b2f6      	uxtb	r6, r6
		}
		
		inline BufDataType &operator[] (BufSizeType index) {
			 // adding size should make negative indexes < size work ok
			// int16_t offset = index < 0 ? index : ((index + size) & size_mask);
			return data[index];
    cdf8:	f241 638c 	movw	r3, #5772	; 0x168c
    cdfc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ce00:	685b      	ldr	r3, [r3, #4]
    ce02:	f04f 044c 	mov.w	r4, #76	; 0x4c
    ce06:	fb04 3406 	mla	r4, r4, r6, r3
		inline BufSizeType getTailIndex() {
			return tail;
		}
		
		inline BufSizeType getNextIndex(BufSizeType from) {
			return ((from + 1) & size_mask);
    ce0a:	f241 658c 	movw	r5, #5772	; 0x168c
    ce0e:	f2c1 0500 	movt	r5, #4096	; 0x1000
		}
		
		inline BufDataType &operator[] (BufSizeType index) {
			 // adding size should make negative indexes < size work ok
			// int16_t offset = index < 0 ? index : ((index + size) & size_mask);
			return data[index];
    ce12:	f04f 084c 	mov.w	r8, #76	; 0x4c
    ce16:	e7d7      	b.n	cdc8 <planner::planner_recalculate_trapezoids()+0x58>

0000ce18 <planner::planner_recalculate()>:
	//      with no updated junction speeds will not be recalculated and assumed ok as is.
	//
	// All planner computations are performed with doubles (float on Arduinos) to minimize numerical round-
	// off errors. Only when planned values are converted to stepper rate parameters, these are integers.

	void planner_recalculate() {   
    ce18:	b508      	push	{r3, lr}
			planner_reverse_pass();
    ce1a:	f7ff fe67 	bl	caec <planner::planner_reverse_pass()>
			planner_forward_pass();
    ce1e:	f7ff fee3 	bl	cbe8 <planner::planner_forward_pass()>
			planner_recalculate_trapezoids();
    ce22:	f7ff ffa5 	bl	cd70 <planner::planner_recalculate_trapezoids()>

	}
    ce26:	bd08      	pop	{r3, pc}

0000ce28 <planner::isBufferFull()>:
		inline bool isEmpty() {
			return head == tail;
		}
		
		inline bool isFull() {
			return (getNextIndex(head) == tail);
    ce28:	f241 638c 	movw	r3, #5772	; 0x168c
    ce2c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ce30:	7818      	ldrb	r0, [r3, #0]
    ce32:	785a      	ldrb	r2, [r3, #1]
		inline BufSizeType getTailIndex() {
			return tail;
		}
		
		inline BufSizeType getNextIndex(BufSizeType from) {
			return ((from + 1) & size_mask);
    ce34:	f100 0001 	add.w	r0, r0, #1
    ce38:	78db      	ldrb	r3, [r3, #3]
		inline bool isEmpty() {
			return head == tail;
		}
		
		inline bool isFull() {
			return (getNextIndex(head) == tail);
    ce3a:	4018      	ands	r0, r3
	}

	bool isBufferFull() {
//		xprintf("isBufferFull" " (%s:%d)\n",_F_,_L_);
		return block_buffer.isFull();//planner_buffer.isFull(); 
	}
    ce3c:	4290      	cmp	r0, r2
    ce3e:	bf14      	ite	ne
    ce40:	2000      	movne	r0, #0
    ce42:	2001      	moveq	r0, #1
    ce44:	4770      	bx	lr
    ce46:	bf00      	nop

0000ce48 <planner::isBufferEmpty()>:
		inline void bumpTail() {
			tail = getNextIndex(tail);
		}
		
		inline bool isEmpty() {
			return head == tail;
    ce48:	f241 638c 	movw	r3, #5772	; 0x168c
    ce4c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ce50:	7818      	ldrb	r0, [r3, #0]
    ce52:	785b      	ldrb	r3, [r3, #1]
	
	// Are we completely out of upcoming moves?
	bool isBufferEmpty() {
		bool is_buffer_empty = block_buffer.isEmpty();// && planner_buffer.isEmpty();
		return is_buffer_empty;
	}
    ce54:	4298      	cmp	r0, r3
    ce56:	bf14      	ite	ne
    ce58:	2000      	movne	r0, #0
    ce5a:	2001      	moveq	r0, #1
    ce5c:	4770      	bx	lr
    ce5e:	bf00      	nop

0000ce60 <planner::isReady()>:
	
	// Is the move in the buffer ready to use?
	bool isReady() {
		return !(force_replan_from_stopped || block_buffer.isEmpty());
    ce60:	f241 6394 	movw	r3, #5780	; 0x1694
    ce64:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ce68:	781b      	ldrb	r3, [r3, #0]
    ce6a:	b94b      	cbnz	r3, ce80 <planner::isReady()+0x20>
		inline void bumpTail() {
			tail = getNextIndex(tail);
		}
		
		inline bool isEmpty() {
			return head == tail;
    ce6c:	f241 638c 	movw	r3, #5772	; 0x168c
    ce70:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ce74:	7818      	ldrb	r0, [r3, #0]
    ce76:	785b      	ldrb	r3, [r3, #1]
		bool is_buffer_empty = block_buffer.isEmpty();// && planner_buffer.isEmpty();
		return is_buffer_empty;
	}
	
	// Is the move in the buffer ready to use?
	bool isReady() {
    ce78:	1ac0      	subs	r0, r0, r3
    ce7a:	bf18      	it	ne
    ce7c:	2001      	movne	r0, #1
    ce7e:	4770      	bx	lr
		return !(force_replan_from_stopped || block_buffer.isEmpty());
    ce80:	f04f 0000 	mov.w	r0, #0
	}
    ce84:	4770      	bx	lr
    ce86:	bf00      	nop

0000ce88 <planner::getNextBlock()>:
		inline BufSizeType getHeadIndex() {
			return head;
		}
		
		inline BufDataType *getTail() {
			return &data[tail];
    ce88:	f241 638c 	movw	r3, #5772	; 0x168c
    ce8c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ce90:	785a      	ldrb	r2, [r3, #1]
    ce92:	685b      	ldr	r3, [r3, #4]
	}
	
	Block *getNextBlock() {
		Block *block = block_buffer.getTail();
		return block;
	}
    ce94:	f04f 004c 	mov.w	r0, #76	; 0x4c
    ce98:	fb00 3002 	mla	r0, r0, r2, r3
    ce9c:	4770      	bx	lr
    ce9e:	bf00      	nop

0000cea0 <planner::doneWithNextBlock()>:
		}

		// bump the tail. cannot return anything useful, so it doesn't
		// WARNING: no sanity checks!
		inline void bumpTail() {
			tail = getNextIndex(tail);
    cea0:	f241 638c 	movw	r3, #5772	; 0x168c
    cea4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cea8:	785a      	ldrb	r2, [r3, #1]
		inline BufSizeType getTailIndex() {
			return tail;
		}
		
		inline BufSizeType getNextIndex(BufSizeType from) {
			return ((from + 1) & size_mask);
    ceaa:	f102 0201 	add.w	r2, r2, #1
    ceae:	78d9      	ldrb	r1, [r3, #3]
    ceb0:	400a      	ands	r2, r1
		}

		// bump the tail. cannot return anything useful, so it doesn't
		// WARNING: no sanity checks!
		inline void bumpTail() {
			tail = getNextIndex(tail);
    ceb2:	705a      	strb	r2, [r3, #1]
		return block;
	}
	
	void doneWithNextBlock() {
		block_buffer.bumpTail();
	}
    ceb4:	4770      	bx	lr
    ceb6:	bf00      	nop

0000ceb8 <planner::planNextMove(Point&, long, Point const&)>:
	}


	///
	bool planNextMove(Point& target, const int32_t us_per_step_in, const Point& steps)
	{
    ceb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cebc:	b08f      	sub	sp, #60	; 0x3c
    cebe:	4605      	mov	r5, r0
    cec0:	9100      	str	r1, [sp, #0]
    cec2:	4614      	mov	r4, r2
				data[i] = BufDataType();
			}
		};
		
		inline BufDataType *getHead() {
			return &data[head];
    cec4:	f241 638c 	movw	r3, #5772	; 0x168c
    cec8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cecc:	781a      	ldrb	r2, [r3, #0]
    cece:	685b      	ldr	r3, [r3, #4]
    ced0:	f04f 094c 	mov.w	r9, #76	; 0x4c
    ced4:	fb09 3902 	mla	r9, r9, r2, r3
	///
	bool planNextMove(Point& target, const int32_t us_per_step_in, const Point& steps)
	{
		Block *block = block_buffer.getHead();
		// Mark block as not busy (Not executed by the stepper interrupt)
		block->flags = 0;
    ced8:	f04f 0600 	mov.w	r6, #0
    cedc:	f889 6048 	strb.w	r6, [r9, #72]	; 0x48
		
		block->target = target;
    cee0:	464f      	mov	r7, r9
    cee2:	6800      	ldr	r0, [r0, #0]
    cee4:	6869      	ldr	r1, [r5, #4]
    cee6:	68aa      	ldr	r2, [r5, #8]
    cee8:	68eb      	ldr	r3, [r5, #12]
    ceea:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    ceec:	6928      	ldr	r0, [r5, #16]
    ceee:	6038      	str	r0, [r7, #0]
		float delta_mm[STEPPER_COUNT];
		float local_millimeters = 0.0;
		uint32_t local_step_event_count = 0;

		// intentionally unraveled loop
		int32_t abs_steps = abs(steps[X_AXIS]);
    cef0:	4620      	mov	r0, r4
    cef2:	4631      	mov	r1, r6
    cef4:	f000 fe22 	bl	db3c <Point::operator[](unsigned int) const>

template <>
inline int abs(int x) { return __builtin_abs(x); }

template <>
inline long abs(long x) { return __builtin_labs(x); }
    cef8:	6803      	ldr	r3, [r0, #0]
    cefa:	ea83 78e3 	eor.w	r8, r3, r3, asr #31
    cefe:	eba8 78e3 	sub.w	r8, r8, r3, asr #31
		uint32_t local_step_event_count = 0;

		// intentionally unraveled loop
		int32_t abs_steps = abs(steps[X_AXIS]);
		local_step_event_count = abs_steps;
		delta_mm[X_AXIS] = ((float)steps[X_AXIS])/axes[X_AXIS].steps_per_mm;
    cf02:	4620      	mov	r0, r4
    cf04:	4631      	mov	r1, r6
    cf06:	f000 fe19 	bl	db3c <Point::operator[](unsigned int) const>
    cf0a:	6800      	ldr	r0, [r0, #0]
    cf0c:	f006 fd88 	bl	13a20 <__aeabi_i2f>
    cf10:	f241 6604 	movw	r6, #5636	; 0x1604
    cf14:	f2c1 0600 	movt	r6, #4096	; 0x1000
    cf18:	6831      	ldr	r1, [r6, #0]
    cf1a:	f006 fe89 	bl	13c30 <__aeabi_fdiv>
    cf1e:	4607      	mov	r7, r0
    cf20:	9006      	str	r0, [sp, #24]

		abs_steps = abs(steps[Y_AXIS]);
    cf22:	4620      	mov	r0, r4
    cf24:	f04f 0101 	mov.w	r1, #1
    cf28:	f000 fe08 	bl	db3c <Point::operator[](unsigned int) const>

template <>
inline int abs(int x) { return __builtin_abs(x); }

template <>
inline long abs(long x) { return __builtin_labs(x); }
    cf2c:	6803      	ldr	r3, [r0, #0]
    cf2e:	ea83 7be3 	eor.w	fp, r3, r3, asr #31
    cf32:	ebab 7be3 	sub.w	fp, fp, r3, asr #31
		// intentionally unraveled loop
		int32_t abs_steps = abs(steps[X_AXIS]);
		local_step_event_count = abs_steps;
		delta_mm[X_AXIS] = ((float)steps[X_AXIS])/axes[X_AXIS].steps_per_mm;

		abs_steps = abs(steps[Y_AXIS]);
    cf36:	45c3      	cmp	fp, r8
    cf38:	bfb8      	it	lt
    cf3a:	46c3      	movlt	fp, r8
		local_step_event_count = max((int32_t)local_step_event_count, abs_steps);
		delta_mm[Y_AXIS] = ((float)steps[Y_AXIS])/axes[Y_AXIS].steps_per_mm;
    cf3c:	4620      	mov	r0, r4
    cf3e:	f04f 0101 	mov.w	r1, #1
    cf42:	f000 fdfb 	bl	db3c <Point::operator[](unsigned int) const>
    cf46:	6800      	ldr	r0, [r0, #0]
    cf48:	f006 fd6a 	bl	13a20 <__aeabi_i2f>
    cf4c:	6971      	ldr	r1, [r6, #20]
    cf4e:	f006 fe6f 	bl	13c30 <__aeabi_fdiv>
    cf52:	4680      	mov	r8, r0
    cf54:	9007      	str	r0, [sp, #28]

		abs_steps = abs(steps[Z_AXIS]);
    cf56:	4620      	mov	r0, r4
    cf58:	f04f 0102 	mov.w	r1, #2
    cf5c:	f000 fdee 	bl	db3c <Point::operator[](unsigned int) const>

template <>
inline int abs(int x) { return __builtin_abs(x); }

template <>
inline long abs(long x) { return __builtin_labs(x); }
    cf60:	6803      	ldr	r3, [r0, #0]
    cf62:	ea83 7ae3 	eor.w	sl, r3, r3, asr #31
    cf66:	ebaa 7ae3 	sub.w	sl, sl, r3, asr #31

		abs_steps = abs(steps[Y_AXIS]);
		local_step_event_count = max((int32_t)local_step_event_count, abs_steps);
		delta_mm[Y_AXIS] = ((float)steps[Y_AXIS])/axes[Y_AXIS].steps_per_mm;

		abs_steps = abs(steps[Z_AXIS]);
    cf6a:	45d3      	cmp	fp, sl
    cf6c:	bfa8      	it	ge
    cf6e:	46da      	movge	sl, fp
		local_step_event_count = max((int32_t)local_step_event_count, abs_steps);
		delta_mm[Z_AXIS] = ((float)steps[Z_AXIS])/axes[Z_AXIS].steps_per_mm;
    cf70:	4620      	mov	r0, r4
    cf72:	f04f 0102 	mov.w	r1, #2
    cf76:	f000 fde1 	bl	db3c <Point::operator[](unsigned int) const>
    cf7a:	6800      	ldr	r0, [r0, #0]
    cf7c:	f006 fd50 	bl	13a20 <__aeabi_i2f>
    cf80:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    cf82:	f006 fe55 	bl	13c30 <__aeabi_fdiv>
    cf86:	4606      	mov	r6, r0
    cf88:	9008      	str	r0, [sp, #32]
		
		

		//local_step_event_cout is the max of x,y,z speeds)
		if (local_step_event_count > 0) {
    cf8a:	f1ba 0f00 	cmp.w	sl, #0
    cf8e:	f000 8248 	beq.w	d422 <planner::planNextMove(Point&, long, Point const&)+0x56a>
			local_millimeters = sqrt(delta_mm[X_AXIS]*delta_mm[X_AXIS] + delta_mm[Y_AXIS]*delta_mm[Y_AXIS] + delta_mm[Z_AXIS]*delta_mm[Z_AXIS]);
    cf92:	4638      	mov	r0, r7
    cf94:	4639      	mov	r1, r7
    cf96:	f006 fd97 	bl	13ac8 <__aeabi_fmul>
    cf9a:	4607      	mov	r7, r0
    cf9c:	4640      	mov	r0, r8
    cf9e:	4641      	mov	r1, r8
    cfa0:	f006 fd92 	bl	13ac8 <__aeabi_fmul>
    cfa4:	4601      	mov	r1, r0
    cfa6:	4638      	mov	r0, r7
    cfa8:	f006 fc86 	bl	138b8 <__addsf3>
    cfac:	4607      	mov	r7, r0
    cfae:	4630      	mov	r0, r6
    cfb0:	4631      	mov	r1, r6
    cfb2:	f006 fd89 	bl	13ac8 <__aeabi_fmul>
    cfb6:	4601      	mov	r1, r0
    cfb8:	4638      	mov	r0, r7
    cfba:	f006 fc7d 	bl	138b8 <__addsf3>
    cfbe:	f006 f99f 	bl	13300 <__aeabi_f2d>
    cfc2:	f012 fba1 	bl	1f708 <sqrt>
    cfc6:	f006 fc21 	bl	1380c <__aeabi_d2f>
    cfca:	9003      	str	r0, [sp, #12]
		}

		abs_steps = abs(steps[A_AXIS]);
    cfcc:	4620      	mov	r0, r4
    cfce:	f04f 0103 	mov.w	r1, #3
    cfd2:	f000 fdb3 	bl	db3c <Point::operator[](unsigned int) const>

template <>
inline int abs(int x) { return __builtin_abs(x); }

template <>
inline long abs(long x) { return __builtin_labs(x); }
    cfd6:	6803      	ldr	r3, [r0, #0]
    cfd8:	2b00      	cmp	r3, #0
    cfda:	bfb8      	it	lt
    cfdc:	425b      	neglt	r3, r3
		if (local_step_event_count > 0) {
			local_millimeters = sqrt(delta_mm[X_AXIS]*delta_mm[X_AXIS] + delta_mm[Y_AXIS]*delta_mm[Y_AXIS] + delta_mm[Z_AXIS]*delta_mm[Z_AXIS]);
		}

		abs_steps = abs(steps[A_AXIS]);
		local_step_event_count = max((int32_t)local_step_event_count, abs_steps);
    cfde:	4553      	cmp	r3, sl
    cfe0:	bfb8      	it	lt
    cfe2:	4653      	movlt	r3, sl
    cfe4:	9302      	str	r3, [sp, #8]
		delta_mm[A_AXIS] = ((float)steps[A_AXIS])/axes[A_AXIS].steps_per_mm;
    cfe6:	4620      	mov	r0, r4
    cfe8:	f04f 0103 	mov.w	r1, #3
    cfec:	f000 fda6 	bl	db3c <Point::operator[](unsigned int) const>
    cff0:	6800      	ldr	r0, [r0, #0]
    cff2:	f006 fd15 	bl	13a20 <__aeabi_i2f>
    cff6:	f241 6304 	movw	r3, #5636	; 0x1604
    cffa:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cffe:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    d000:	f006 fe16 	bl	13c30 <__aeabi_fdiv>
    d004:	4606      	mov	r6, r0
    d006:	9009      	str	r0, [sp, #36]	; 0x24

		if (local_millimeters == 0.0) {
    d008:	9803      	ldr	r0, [sp, #12]
    d00a:	f04f 0100 	mov.w	r1, #0
    d00e:	f006 feef 	bl	13df0 <__aeabi_fcmpeq>
    d012:	b150      	cbz	r0, d02a <planner::planNextMove(Point&, long, Point const&)+0x172>
			local_millimeters = sqrt(delta_mm[X_AXIS]*delta_mm[X_AXIS] + delta_mm[Y_AXIS]*delta_mm[Y_AXIS] + delta_mm[Z_AXIS]*delta_mm[Z_AXIS]);
		}

		abs_steps = abs(steps[A_AXIS]);
		local_step_event_count = max((int32_t)local_step_event_count, abs_steps);
		delta_mm[A_AXIS] = ((float)steps[A_AXIS])/axes[A_AXIS].steps_per_mm;
    d014:	9603      	str	r6, [sp, #12]
#ifdef labs
#undef labs
#endif

template <typename T>
inline T abs(T x) { return (x)>0?(x):-(x); }
    d016:	9803      	ldr	r0, [sp, #12]
    d018:	f04f 0100 	mov.w	r1, #0
    d01c:	f006 ff10 	bl	13e40 <__aeabi_fcmpgt>
    d020:	b918      	cbnz	r0, d02a <planner::planNextMove(Point&, long, Point const&)+0x172>
    d022:	9903      	ldr	r1, [sp, #12]
    d024:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    d028:	9303      	str	r3, [sp, #12]
			local_millimeters = abs(delta_mm[B_AXIS]);
		}
#endif

		//local_step_event_cout is the max of x,y,z,a,b speeds)
		if (local_step_event_count == 0)
    d02a:	9a02      	ldr	r2, [sp, #8]
			return false;
    d02c:	f04f 0000 	mov.w	r0, #0
			local_millimeters = abs(delta_mm[B_AXIS]);
		}
#endif

		//local_step_event_cout is the max of x,y,z,a,b speeds)
		if (local_step_event_count == 0)
    d030:	2a00      	cmp	r2, #0
    d032:	f000 81f3 	beq.w	d41c <planner::planNextMove(Point&, long, Point const&)+0x564>
		// Mark block as not busy (Not executed by the stepper interrupt)
		block->flags = 0;
		
		block->target = target;
		
		uint32_t us_per_step = us_per_step_in;
    d036:	9f00      	ldr	r7, [sp, #0]

		//local_step_event_cout is the max of x,y,z,a,b speeds)
		if (local_step_event_count == 0)
			return false;

		if(!accelerationON){
    d038:	f240 0318 	movw	r3, #24
    d03c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d040:	781b      	ldrb	r3, [r3, #0]
    d042:	bb53      	cbnz	r3, d09a <planner::planNextMove(Point&, long, Point const&)+0x1e2>
			block->target = target;
    d044:	464c      	mov	r4, r9
    d046:	6828      	ldr	r0, [r5, #0]
    d048:	6869      	ldr	r1, [r5, #4]
    d04a:	68aa      	ldr	r2, [r5, #8]
    d04c:	68eb      	ldr	r3, [r5, #12]
    d04e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d050:	6928      	ldr	r0, [r5, #16]
    d052:	6020      	str	r0, [r4, #0]
			block->nominal_rate = 1000000/us_per_step;
    d054:	f244 2340 	movw	r3, #16960	; 0x4240
    d058:	f2c0 030f 	movt	r3, #15
    d05c:	fbb3 f3f7 	udiv	r3, r3, r7
    d060:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
			block->accelerate_until = 0;
    d064:	f04f 0300 	mov.w	r3, #0
    d068:	f8a9 3016 	strh.w	r3, [r9, #22]
			block->step_event_count = local_step_event_count;
    d06c:	9d02      	ldr	r5, [sp, #8]
    d06e:	b2aa      	uxth	r2, r5
    d070:	f8a9 2014 	strh.w	r2, [r9, #20]
			block->decelerate_after = local_step_event_count;
    d074:	f8a9 2018 	strh.w	r2, [r9, #24]
			block->acceleration_rate = 0;
    d078:	f8c9 301c 	str.w	r3, [r9, #28]
		}
		
		// bump the head. cannot return anything useful, so it doesn't
		// WARNING: no sanity checks!
		inline void bumpHead() {
			head = getNextIndex(head);
    d07c:	f241 638c 	movw	r3, #5772	; 0x168c
    d080:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d084:	781a      	ldrb	r2, [r3, #0]
		inline BufSizeType getTailIndex() {
			return tail;
		}
		
		inline BufSizeType getNextIndex(BufSizeType from) {
			return ((from + 1) & size_mask);
    d086:	f102 0201 	add.w	r2, r2, #1
    d08a:	78d9      	ldrb	r1, [r3, #3]
    d08c:	400a      	ands	r2, r1
		}
		
		// bump the head. cannot return anything useful, so it doesn't
		// WARNING: no sanity checks!
		inline void bumpHead() {
			head = getNextIndex(head);
    d08e:	701a      	strb	r2, [r3, #0]
			block->accelerate_until = 0;
			block->step_event_count = local_step_event_count;
			block->decelerate_after = local_step_event_count;
			block->acceleration_rate = 0;
			block_buffer.bumpHead();
			steppers::startRunning();
    d090:	f002 fef2 	bl	fe78 <steppers::startRunning()>
			return true; //acceleration was not on, just move value into queue and run it
    d094:	f04f 0001 	mov.w	r0, #1
    d098:	e1c0      	b.n	d41c <planner::planNextMove(Point&, long, Point const&)+0x564>
		}

		// if printing from RepG, ensure moves take a minimum amount of time so that the serial transfer can keep up
		if(!sdcard::isPlaying() ){
    d09a:	f001 f9e1 	bl	e460 <sdcard::isPlaying()>
    d09e:	b958      	cbnz	r0, d0b8 <planner::planNextMove(Point&, long, Point const&)+0x200>
			if ((us_per_step * local_step_event_count) < MIN_MS_PER_SEGMENT) {
    d0a0:	9900      	ldr	r1, [sp, #0]
    d0a2:	9d02      	ldr	r5, [sp, #8]
    d0a4:	fb01 f205 	mul.w	r2, r1, r5
    d0a8:	f242 730f 	movw	r3, #9999	; 0x270f
    d0ac:	429a      	cmp	r2, r3
				us_per_step = MIN_MS_PER_SEGMENT / local_step_event_count;
    d0ae:	bf9c      	itt	ls
    d0b0:	f242 7710 	movwls	r7, #10000	; 0x2710
    d0b4:	fbb7 f7f5 	udivls	r7, r7, r5
		*/


		float inverse_millimeters = 1.0/local_millimeters; // Inverse millimeters to remove multiple divides
		// Calculate 1 second/(seconds for this movement)
		float inverse_second = 1000000.0/(float)(us_per_step * local_step_event_count);
    d0b8:	9d02      	ldr	r5, [sp, #8]
    d0ba:	fb05 f007 	mul.w	r0, r5, r7
    d0be:	f006 fcab 	bl	13a18 <__aeabi_ui2f>
    d0c2:	4601      	mov	r1, r0
    d0c4:	f44f 5010 	mov.w	r0, #9216	; 0x2400
    d0c8:	f6c4 1074 	movt	r0, #18804	; 0x4974
    d0cc:	f006 fdb0 	bl	13c30 <__aeabi_fdiv>
    d0d0:	4606      	mov	r6, r0
		float steps_per_mm = (float)local_step_event_count * inverse_millimeters;
    d0d2:	9802      	ldr	r0, [sp, #8]
    d0d4:	f006 fca0 	bl	13a18 <__aeabi_ui2f>
    d0d8:	9000      	str	r0, [sp, #0]
			}
		}
		*/


		float inverse_millimeters = 1.0/local_millimeters; // Inverse millimeters to remove multiple divides
    d0da:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    d0de:	9903      	ldr	r1, [sp, #12]
    d0e0:	f006 fda6 	bl	13c30 <__aeabi_fdiv>
    d0e4:	4601      	mov	r1, r0
		// Calculate 1 second/(seconds for this movement)
		float inverse_second = 1000000.0/(float)(us_per_step * local_step_event_count);
		float steps_per_mm = (float)local_step_event_count * inverse_millimeters;
    d0e6:	9800      	ldr	r0, [sp, #0]
    d0e8:	f006 fcee 	bl	13ac8 <__aeabi_fmul>
    d0ec:	9005      	str	r0, [sp, #20]

		// we are given microseconds/step, and we need steps/mm, and steps/second

		// Calculate speed in steps/sec
		uint32_t steps_per_second = 1000000/us_per_step;
		float mm_per_second = local_millimeters * inverse_second;
    d0ee:	4630      	mov	r0, r6
    d0f0:	9903      	ldr	r1, [sp, #12]
    d0f2:	f006 fce9 	bl	13ac8 <__aeabi_fmul>
    d0f6:	9004      	str	r0, [sp, #16]
		float steps_per_mm = (float)local_step_event_count * inverse_millimeters;

		// we are given microseconds/step, and we need steps/mm, and steps/second

		// Calculate speed in steps/sec
		uint32_t steps_per_second = 1000000/us_per_step;
    d0f8:	f244 2340 	movw	r3, #16960	; 0x4240
    d0fc:	f2c0 030f 	movt	r3, #15
    d100:	fbb3 f7f7 	udiv	r7, r3, r7
		float mm_per_second = local_millimeters * inverse_second;

		// Calculate speed in mm/second for each axis. No divide by zero due to previous checks.
		float local_nominal_speed = mm_per_second; // (mm/sec) Always > 0
		block->nominal_rate = steps_per_second; // (step/sec) Always > 0
    d104:	f8c9 7038 	str.w	r7, [r9, #56]	; 0x38
    d108:	f04f 0500 	mov.w	r5, #0

		float current_speed[STEPPER_COUNT];
		for(int i=0; i < STEPPER_COUNT; i++) {
			current_speed[i] = delta_mm[i] * inverse_second;
    d10c:	f105 0218 	add.w	r2, r5, #24
    d110:	4669      	mov	r1, sp
    d112:	5850      	ldr	r0, [r2, r1]
    d114:	4631      	mov	r1, r6
    d116:	f006 fcd7 	bl	13ac8 <__aeabi_fmul>
    d11a:	ab0a      	add	r3, sp, #40	; 0x28
    d11c:	5158      	str	r0, [r3, r5]
    d11e:	f105 0504 	add.w	r5, r5, #4
		// Calculate speed in mm/second for each axis. No divide by zero due to previous checks.
		float local_nominal_speed = mm_per_second; // (mm/sec) Always > 0
		block->nominal_rate = steps_per_second; // (step/sec) Always > 0

		float current_speed[STEPPER_COUNT];
		for(int i=0; i < STEPPER_COUNT; i++) {
    d122:	2d10      	cmp	r5, #16
    d124:	d1f2      	bne.n	d10c <planner::planNextMove(Point&, long, Point const&)+0x254>
			current_speed[i] = delta_mm[i] * inverse_second;
		}

		// Compute and limit the acceleration rate for the trapezoid generator.
		uint32_t local_acceleration_st = ceil(default_acceleration * steps_per_mm); // convert to: acceleration steps/sec^2
    d126:	f241 1328 	movw	r3, #4392	; 0x1128
    d12a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d12e:	9805      	ldr	r0, [sp, #20]
    d130:	6819      	ldr	r1, [r3, #0]
    d132:	f006 fcc9 	bl	13ac8 <__aeabi_fmul>
    d136:	f006 f8e3 	bl	13300 <__aeabi_f2d>
    d13a:	f012 fa4d 	bl	1f5d8 <ceil>
    d13e:	f006 fb45 	bl	137cc <__aeabi_d2uiz>
    d142:	4682      	mov	sl, r0
    d144:	f241 6704 	movw	r7, #5636	; 0x1604
    d148:	f2c1 0700 	movt	r7, #4096	; 0x1000
		// Limit acceleration per axis
		for(int i=0; i < STEPPER_COUNT; i++) {
    d14c:	f04f 0600 	mov.w	r6, #0
    d150:	46cb      	mov	fp, r9
    d152:	46a1      	mov	r9, r4
			// warning: arithmetic overflow is easy here. Try to mitigate.
			float step_scale = (float)abs(steps[i]) / (float)local_step_event_count;
    d154:	4648      	mov	r0, r9
    d156:	4631      	mov	r1, r6
    d158:	f000 fcf0 	bl	db3c <Point::operator[](unsigned int) const>
    d15c:	4604      	mov	r4, r0
			float axis_acceleration_st = (float)local_acceleration_st * step_scale;
			if((uint32_t)axis_acceleration_st > axes[i].max_acceleration)
    d15e:	68fd      	ldr	r5, [r7, #12]
		uint32_t local_acceleration_st = ceil(default_acceleration * steps_per_mm); // convert to: acceleration steps/sec^2
		// Limit acceleration per axis
		for(int i=0; i < STEPPER_COUNT; i++) {
			// warning: arithmetic overflow is easy here. Try to mitigate.
			float step_scale = (float)abs(steps[i]) / (float)local_step_event_count;
			float axis_acceleration_st = (float)local_acceleration_st * step_scale;
    d160:	4650      	mov	r0, sl
    d162:	f006 fc59 	bl	13a18 <__aeabi_ui2f>
    d166:	4680      	mov	r8, r0

template <>
inline int abs(int x) { return __builtin_abs(x); }

template <>
inline long abs(long x) { return __builtin_labs(x); }
    d168:	6820      	ldr	r0, [r4, #0]
		// Compute and limit the acceleration rate for the trapezoid generator.
		uint32_t local_acceleration_st = ceil(default_acceleration * steps_per_mm); // convert to: acceleration steps/sec^2
		// Limit acceleration per axis
		for(int i=0; i < STEPPER_COUNT; i++) {
			// warning: arithmetic overflow is easy here. Try to mitigate.
			float step_scale = (float)abs(steps[i]) / (float)local_step_event_count;
    d16a:	2800      	cmp	r0, #0
    d16c:	bfb8      	it	lt
    d16e:	4240      	neglt	r0, r0
    d170:	f006 fc56 	bl	13a20 <__aeabi_i2f>
    d174:	9900      	ldr	r1, [sp, #0]
    d176:	f006 fd5b 	bl	13c30 <__aeabi_fdiv>
    d17a:	4601      	mov	r1, r0
			float axis_acceleration_st = (float)local_acceleration_st * step_scale;
    d17c:	4640      	mov	r0, r8
    d17e:	f006 fca3 	bl	13ac8 <__aeabi_fmul>
			if((uint32_t)axis_acceleration_st > axes[i].max_acceleration)
    d182:	f006 fe8d 	bl	13ea0 <__aeabi_f2uiz>
				local_acceleration_st = axes[i].max_acceleration;
    d186:	42a8      	cmp	r0, r5
    d188:	bf88      	it	hi
    d18a:	46aa      	movhi	sl, r5
		}

		// Compute and limit the acceleration rate for the trapezoid generator.
		uint32_t local_acceleration_st = ceil(default_acceleration * steps_per_mm); // convert to: acceleration steps/sec^2
		// Limit acceleration per axis
		for(int i=0; i < STEPPER_COUNT; i++) {
    d18c:	f106 0601 	add.w	r6, r6, #1
    d190:	f107 0714 	add.w	r7, r7, #20
    d194:	2e04      	cmp	r6, #4
    d196:	d1dd      	bne.n	d154 <planner::planNextMove(Point&, long, Point const&)+0x29c>
    d198:	46d9      	mov	r9, fp
			float step_scale = (float)abs(steps[i]) / (float)local_step_event_count;
			float axis_acceleration_st = (float)local_acceleration_st * step_scale;
			if((uint32_t)axis_acceleration_st > axes[i].max_acceleration)
				local_acceleration_st = axes[i].max_acceleration;
		}
		block->acceleration = local_acceleration_st / steps_per_mm;
    d19a:	4650      	mov	r0, sl
    d19c:	f006 fc3c 	bl	13a18 <__aeabi_ui2f>
    d1a0:	9905      	ldr	r1, [sp, #20]
    d1a2:	f006 fd45 	bl	13c30 <__aeabi_fdiv>
    d1a6:	f8cb 0030 	str.w	r0, [fp, #48]	; 0x30
		block->acceleration_rate = local_acceleration_st / ACCELERATION_TICKS_PER_SECOND;
    d1aa:	ea4f 029a 	mov.w	r2, sl, lsr #2
    d1ae:	f647 4301 	movw	r3, #31745	; 0x7c01
    d1b2:	f2c2 138e 	movt	r3, #8590	; 0x218e
    d1b6:	fba3 5302 	umull	r5, r3, r3, r2
    d1ba:	ea4f 2313 	mov.w	r3, r3, lsr #8
    d1be:	f8cb 301c 	str.w	r3, [fp, #28]
#ifdef max
#undef max
#endif

template <typename T>
inline const T& min(const T& a, const T& b) { return (a)<(b)?(a):(b); }
    d1c2:	f241 130c 	movw	r3, #4364	; 0x110c
    d1c6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d1ca:	681d      	ldr	r5, [r3, #0]
    d1cc:	9804      	ldr	r0, [sp, #16]
    d1ce:	4629      	mov	r1, r5
    d1d0:	f006 fe36 	bl	13e40 <__aeabi_fcmpgt>
    d1d4:	b900      	cbnz	r0, d1d8 <planner::planNextMove(Point&, long, Point const&)+0x320>
    d1d6:	9d04      	ldr	r5, [sp, #16]
		inline void bumpTail() {
			tail = getNextIndex(tail);
		}
		
		inline bool isEmpty() {
			return head == tail;
    d1d8:	f241 638c 	movw	r3, #5772	; 0x168c
    d1dc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d1e0:	781a      	ldrb	r2, [r3, #0]
    d1e2:	785b      	ldrb	r3, [r3, #1]
		
		// Compute the speed trasitions, or "jerks"
		// The default value the junction speed is the minimum_planner_speed (or local_nominal_speed if it is less than the minimum_planner_speed)
		float vmax_junction = min(minimum_planner_speed, local_nominal_speed); 
		
		if ((!block_buffer.isEmpty()) && (previous_nominal_speed > 0.0)) {
    d1e4:	429a      	cmp	r2, r3
    d1e6:	f000 809a 	beq.w	d31e <planner::planNextMove(Point&, long, Point const&)+0x466>
    d1ea:	f241 6388 	movw	r3, #5768	; 0x1688
    d1ee:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d1f2:	6818      	ldr	r0, [r3, #0]
    d1f4:	f04f 0100 	mov.w	r1, #0
    d1f8:	f006 fe22 	bl	13e40 <__aeabi_fcmpgt>
    d1fc:	2800      	cmp	r0, #0
    d1fe:	f000 808e 	beq.w	d31e <planner::planNextMove(Point&, long, Point const&)+0x466>
			   float jerk = sqrt(pow((current_speed[X_AXIS]-previous_speed[X_AXIS]), 2)+pow((current_speed[Y_AXIS]-previous_speed[Y_AXIS]), 2));
    d202:	f241 6498 	movw	r4, #5784	; 0x1698
    d206:	f2c1 0400 	movt	r4, #4096	; 0x1000
    d20a:	980a      	ldr	r0, [sp, #40]	; 0x28
    d20c:	6821      	ldr	r1, [r4, #0]
    d20e:	f006 fb51 	bl	138b4 <__aeabi_fsub>
    d212:	f006 f875 	bl	13300 <__aeabi_f2d>
    d216:	4602      	mov	r2, r0
    d218:	460b      	mov	r3, r1
    d21a:	f006 f8c5 	bl	133a8 <__aeabi_dmul>
    d21e:	4606      	mov	r6, r0
    d220:	460f      	mov	r7, r1
    d222:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d224:	6861      	ldr	r1, [r4, #4]
    d226:	f006 fb45 	bl	138b4 <__aeabi_fsub>
    d22a:	f006 f869 	bl	13300 <__aeabi_f2d>
    d22e:	4602      	mov	r2, r0
    d230:	460b      	mov	r3, r1
    d232:	f006 f8b9 	bl	133a8 <__aeabi_dmul>
    d236:	4602      	mov	r2, r0
    d238:	460b      	mov	r3, r1
    d23a:	4630      	mov	r0, r6
    d23c:	4639      	mov	r1, r7
    d23e:	f005 ff01 	bl	13044 <__adddf3>
    d242:	f012 fa61 	bl	1f708 <sqrt>
    d246:	f006 fae1 	bl	1380c <__aeabi_d2f>
    d24a:	4606      	mov	r6, r0
			   if((previous_speed[X_AXIS] != 0.0) || (previous_speed[Y_AXIS] != 0.0)) {
    d24c:	6820      	ldr	r0, [r4, #0]
    d24e:	f04f 0100 	mov.w	r1, #0
    d252:	f006 fdcd 	bl	13df0 <__aeabi_fcmpeq>
    d256:	b130      	cbz	r0, d266 <planner::planNextMove(Point&, long, Point const&)+0x3ae>
    d258:	6860      	ldr	r0, [r4, #4]
    d25a:	f04f 0100 	mov.w	r1, #0
    d25e:	f006 fdc7 	bl	13df0 <__aeabi_fcmpeq>
    d262:	b110      	cbz	r0, d26a <planner::planNextMove(Point&, long, Point const&)+0x3b2>
    d264:	e002      	b.n	d26c <planner::planNextMove(Point&, long, Point const&)+0x3b4>
					   vmax_junction = local_nominal_speed;
    d266:	9d04      	ldr	r5, [sp, #16]
    d268:	e000      	b.n	d26c <planner::planNextMove(Point&, long, Point const&)+0x3b4>
    d26a:	9d04      	ldr	r5, [sp, #16]
			   }

			   if (jerk > max_xy_jerk) {
    d26c:	f241 131c 	movw	r3, #4380	; 0x111c
    d270:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d274:	681c      	ldr	r4, [r3, #0]
    d276:	4630      	mov	r0, r6
    d278:	4621      	mov	r1, r4
    d27a:	f006 fde1 	bl	13e40 <__aeabi_fcmpgt>
    d27e:	b140      	cbz	r0, d292 <planner::planNextMove(Point&, long, Point const&)+0x3da>
					   vmax_junction *= (max_xy_jerk/jerk);
    d280:	4620      	mov	r0, r4
    d282:	4631      	mov	r1, r6
    d284:	f006 fcd4 	bl	13c30 <__aeabi_fdiv>
    d288:	4601      	mov	r1, r0
    d28a:	4628      	mov	r0, r5
    d28c:	f006 fc1c 	bl	13ac8 <__aeabi_fmul>
    d290:	4605      	mov	r5, r0
				   }
			   
			   for (int i_axis = Z_AXIS; i_axis < STEPPER_COUNT; i_axis++) {
					   jerk = abs(previous_speed[i_axis] - current_speed[i_axis]);
    d292:	f241 6398 	movw	r3, #5784	; 0x1698
    d296:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d29a:	6898      	ldr	r0, [r3, #8]
    d29c:	990c      	ldr	r1, [sp, #48]	; 0x30
    d29e:	f006 fb09 	bl	138b4 <__aeabi_fsub>
    d2a2:	4604      	mov	r4, r0
#ifdef labs
#undef labs
#endif

template <typename T>
inline T abs(T x) { return (x)>0?(x):-(x); }
    d2a4:	f04f 0100 	mov.w	r1, #0
    d2a8:	f006 fdca 	bl	13e40 <__aeabi_fcmpgt>
    d2ac:	b908      	cbnz	r0, d2b2 <planner::planNextMove(Point&, long, Point const&)+0x3fa>
    d2ae:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
					   vmax_junction *= (max_xy_jerk/jerk);
				   }
			   
			   for (int i_axis = Z_AXIS; i_axis < STEPPER_COUNT; i_axis++) {
					   jerk = abs(previous_speed[i_axis] - current_speed[i_axis]);
					   if (jerk > axes[i_axis].max_axis_jerk) {
    d2b2:	f241 6304 	movw	r3, #5636	; 0x1604
    d2b6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d2ba:	6b9e      	ldr	r6, [r3, #56]	; 0x38
    d2bc:	4630      	mov	r0, r6
    d2be:	4621      	mov	r1, r4
    d2c0:	f006 fda0 	bl	13e04 <__aeabi_fcmplt>
    d2c4:	b140      	cbz	r0, d2d8 <planner::planNextMove(Point&, long, Point const&)+0x420>
							   vmax_junction *= (axes[i_axis].max_axis_jerk/jerk);                               }
    d2c6:	4630      	mov	r0, r6
    d2c8:	4621      	mov	r1, r4
    d2ca:	f006 fcb1 	bl	13c30 <__aeabi_fdiv>
    d2ce:	4601      	mov	r1, r0
    d2d0:	4628      	mov	r0, r5
    d2d2:	f006 fbf9 	bl	13ac8 <__aeabi_fmul>
    d2d6:	4605      	mov	r5, r0
			   if (jerk > max_xy_jerk) {
					   vmax_junction *= (max_xy_jerk/jerk);
				   }
			   
			   for (int i_axis = Z_AXIS; i_axis < STEPPER_COUNT; i_axis++) {
					   jerk = abs(previous_speed[i_axis] - current_speed[i_axis]);
    d2d8:	f241 6398 	movw	r3, #5784	; 0x1698
    d2dc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d2e0:	68d8      	ldr	r0, [r3, #12]
    d2e2:	990d      	ldr	r1, [sp, #52]	; 0x34
    d2e4:	f006 fae6 	bl	138b4 <__aeabi_fsub>
    d2e8:	4604      	mov	r4, r0
#ifdef labs
#undef labs
#endif

template <typename T>
inline T abs(T x) { return (x)>0?(x):-(x); }
    d2ea:	f04f 0100 	mov.w	r1, #0
    d2ee:	f006 fda7 	bl	13e40 <__aeabi_fcmpgt>
    d2f2:	b908      	cbnz	r0, d2f8 <planner::planNextMove(Point&, long, Point const&)+0x440>
    d2f4:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
					   vmax_junction *= (max_xy_jerk/jerk);
				   }
			   
			   for (int i_axis = Z_AXIS; i_axis < STEPPER_COUNT; i_axis++) {
					   jerk = abs(previous_speed[i_axis] - current_speed[i_axis]);
					   if (jerk > axes[i_axis].max_axis_jerk) {
    d2f8:	f241 6304 	movw	r3, #5636	; 0x1604
    d2fc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d300:	6cde      	ldr	r6, [r3, #76]	; 0x4c
    d302:	4630      	mov	r0, r6
    d304:	4621      	mov	r1, r4
    d306:	f006 fd7d 	bl	13e04 <__aeabi_fcmplt>
    d30a:	b140      	cbz	r0, d31e <planner::planNextMove(Point&, long, Point const&)+0x466>
							   vmax_junction *= (axes[i_axis].max_axis_jerk/jerk);                               }
    d30c:	4630      	mov	r0, r6
    d30e:	4621      	mov	r1, r4
    d310:	f006 fc8e 	bl	13c30 <__aeabi_fdiv>
    d314:	4601      	mov	r1, r0
    d316:	4628      	mov	r0, r5
    d318:	f006 fbd6 	bl	13ac8 <__aeabi_fmul>
    d31c:	4605      	mov	r5, r0
			   }
         } 

		
		/// set the max_entry_speed to the junction speed
		block->max_entry_speed = vmax_junction;
    d31e:	f8c9 5028 	str.w	r5, [r9, #40]	; 0x28
	
	// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
	// acceleration within the allotted distance.
	// Needs to be conbverted to fixed-point.
	FORCE_INLINE float max_allowable_speed(const float &acceleration, const float &target_velocity, const float &distance) {
		return sqrt((target_velocity*target_velocity)-(acceleration*2.0)*distance);
    d322:	f241 130c 	movw	r3, #4364	; 0x110c
    d326:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d32a:	6819      	ldr	r1, [r3, #0]
    d32c:	4608      	mov	r0, r1
    d32e:	f006 fbcb 	bl	13ac8 <__aeabi_fmul>
    d332:	f005 ffe5 	bl	13300 <__aeabi_f2d>
    d336:	e9cd 0100 	strd	r0, r1, [sp]
		/// set the max_entry_speed to the junction speed
		block->max_entry_speed = vmax_junction;
		
		// Initialize block entry speed. Compute based on deceleration to stop_speed.
		/// the entry speed may change in the look ahead planner
		float v_allowable = max_allowable_speed(-block->acceleration, minimum_planner_speed, local_millimeters);// stop_speed, local_millimeters);
    d33a:	f8d9 0030 	ldr.w	r0, [r9, #48]	; 0x30
    d33e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
	
	// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
	// acceleration within the allotted distance.
	// Needs to be conbverted to fixed-point.
	FORCE_INLINE float max_allowable_speed(const float &acceleration, const float &target_velocity, const float &distance) {
		return sqrt((target_velocity*target_velocity)-(acceleration*2.0)*distance);
    d342:	f005 ffdd 	bl	13300 <__aeabi_f2d>
    d346:	4602      	mov	r2, r0
    d348:	460b      	mov	r3, r1
    d34a:	f005 fe7b 	bl	13044 <__adddf3>
    d34e:	4606      	mov	r6, r0
    d350:	460f      	mov	r7, r1
    d352:	9803      	ldr	r0, [sp, #12]
    d354:	f005 ffd4 	bl	13300 <__aeabi_f2d>
    d358:	4602      	mov	r2, r0
    d35a:	460b      	mov	r3, r1
    d35c:	4630      	mov	r0, r6
    d35e:	4639      	mov	r1, r7
    d360:	f006 f822 	bl	133a8 <__aeabi_dmul>
    d364:	4602      	mov	r2, r0
    d366:	460b      	mov	r3, r1
    d368:	e9dd 0100 	ldrd	r0, r1, [sp]
    d36c:	f005 fe68 	bl	13040 <__aeabi_dsub>
    d370:	f012 f9ca 	bl	1f708 <sqrt>
    d374:	f006 fa4a 	bl	1380c <__aeabi_d2f>
    d378:	4604      	mov	r4, r0
#ifdef max
#undef max
#endif

template <typename T>
inline const T& min(const T& a, const T& b) { return (a)<(b)?(a):(b); }
    d37a:	4628      	mov	r0, r5
    d37c:	4621      	mov	r1, r4
    d37e:	f006 fd41 	bl	13e04 <__aeabi_fcmplt>
    d382:	b900      	cbnz	r0, d386 <planner::planNextMove(Point&, long, Point const&)+0x4ce>
    d384:	4625      	mov	r5, r4
		block->max_entry_speed = vmax_junction;
		
		// Initialize block entry speed. Compute based on deceleration to stop_speed.
		/// the entry speed may change in the look ahead planner
		float v_allowable = max_allowable_speed(-block->acceleration, minimum_planner_speed, local_millimeters);// stop_speed, local_millimeters);
		block->entry_speed = min(vmax_junction, v_allowable);
    d386:	f8c9 5024 	str.w	r5, [r9, #36]	; 0x24
		// the current block and next block junction speeds are guaranteed to always be at their maximum
		// junction speeds in deceleration and acceleration, respectively. This is due to how the current
		// block nominal speed limits both the current and next maximum junction speeds. Hence, in both
		// the reverse and forward planners, the corresponding block junction speed will always be at the
		// the maximum junction speed and may always be ignored for any speed reduction checks.
		if (local_nominal_speed <= v_allowable)
    d38a:	9804      	ldr	r0, [sp, #16]
    d38c:	4621      	mov	r1, r4
    d38e:	f006 fd43 	bl	13e18 <__aeabi_fcmple>
    d392:	b130      	cbz	r0, d3a2 <planner::planNextMove(Point&, long, Point const&)+0x4ea>
			block->flags |= Block::NominalLength;
    d394:	f899 3048 	ldrb.w	r3, [r9, #72]	; 0x48
    d398:	f043 0304 	orr.w	r3, r3, #4
    d39c:	f889 3048 	strb.w	r3, [r9, #72]	; 0x48
    d3a0:	e005      	b.n	d3ae <planner::planNextMove(Point&, long, Point const&)+0x4f6>
		else
			block->flags &= ~Block::NominalLength;
    d3a2:	f899 3048 	ldrb.w	r3, [r9, #72]	; 0x48
    d3a6:	f023 0304 	bic.w	r3, r3, #4
    d3aa:	f889 3048 	strb.w	r3, [r9, #72]	; 0x48
		block->flags |= Block::Recalculate; // Always calculate trapezoid for new block
    d3ae:	f899 3048 	ldrb.w	r3, [r9, #72]	; 0x48
    d3b2:	f043 0302 	orr.w	r3, r3, #2
    d3b6:	f889 3048 	strb.w	r3, [r9, #72]	; 0x48

		// Update previous path speed and nominal speed
		memcpy(previous_speed, current_speed, sizeof(previous_speed)); // previous_speed[] = current_speed[]
    d3ba:	f241 6498 	movw	r4, #5784	; 0x1698
    d3be:	f2c1 0400 	movt	r4, #4096	; 0x1000
    d3c2:	ad0e      	add	r5, sp, #56	; 0x38
    d3c4:	e915 000f 	ldmdb	r5, {r0, r1, r2, r3}
    d3c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		previous_nominal_speed = local_nominal_speed;
    d3cc:	f241 6388 	movw	r3, #5768	; 0x1688
    d3d0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d3d4:	9d04      	ldr	r5, [sp, #16]
    d3d6:	601d      	str	r5, [r3, #0]

		// move locals to the block
		block->millimeters = local_millimeters;
    d3d8:	9d03      	ldr	r5, [sp, #12]
    d3da:	f8c9 502c 	str.w	r5, [r9, #44]	; 0x2c
		block->step_event_count = local_step_event_count;
    d3de:	9d02      	ldr	r5, [sp, #8]
    d3e0:	f8a9 5014 	strh.w	r5, [r9, #20]
		block->nominal_speed = local_nominal_speed;
    d3e4:	9d04      	ldr	r5, [sp, #16]
    d3e6:	f8c9 5020 	str.w	r5, [r9, #32]
		block->acceleration_st = local_acceleration_st;
    d3ea:	f8c9 a044 	str.w	sl, [r9, #68]	; 0x44
		block->stop_speed = minimum_planner_speed;
    d3ee:	f241 130c 	movw	r3, #4364	; 0x110c
    d3f2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d3f6:	681b      	ldr	r3, [r3, #0]
    d3f8:	f8c9 3034 	str.w	r3, [r9, #52]	; 0x34
		}
		
		// bump the head. cannot return anything useful, so it doesn't
		// WARNING: no sanity checks!
		inline void bumpHead() {
			head = getNextIndex(head);
    d3fc:	f241 638c 	movw	r3, #5772	; 0x168c
    d400:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d404:	781a      	ldrb	r2, [r3, #0]
		inline BufSizeType getTailIndex() {
			return tail;
		}
		
		inline BufSizeType getNextIndex(BufSizeType from) {
			return ((from + 1) & size_mask);
    d406:	f102 0201 	add.w	r2, r2, #1
    d40a:	78d9      	ldrb	r1, [r3, #3]
    d40c:	400a      	ands	r2, r1
		}
		
		// bump the head. cannot return anything useful, so it doesn't
		// WARNING: no sanity checks!
		inline void bumpHead() {
			head = getNextIndex(head);
    d40e:	701a      	strb	r2, [r3, #0]
		block->stop_speed = minimum_planner_speed;

		// Move buffer head
		block_buffer.bumpHead();

		planner_recalculate();
    d410:	f7ff fd02 	bl	ce18 <planner::planner_recalculate()>

		steppers::startRunning();
    d414:	f002 fd30 	bl	fe78 <steppers::startRunning()>

		return true;
    d418:	f04f 0001 	mov.w	r0, #1
	}
    d41c:	b00f      	add	sp, #60	; 0x3c
    d41e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		//local_step_event_cout is the max of x,y,z speeds)
		if (local_step_event_count > 0) {
			local_millimeters = sqrt(delta_mm[X_AXIS]*delta_mm[X_AXIS] + delta_mm[Y_AXIS]*delta_mm[Y_AXIS] + delta_mm[Z_AXIS]*delta_mm[Z_AXIS]);
		}

		abs_steps = abs(steps[A_AXIS]);
    d422:	4620      	mov	r0, r4
    d424:	f04f 0103 	mov.w	r1, #3
    d428:	f000 fb88 	bl	db3c <Point::operator[](unsigned int) const>

template <>
inline int abs(int x) { return __builtin_abs(x); }

template <>
inline long abs(long x) { return __builtin_labs(x); }
    d42c:	6803      	ldr	r3, [r0, #0]
    d42e:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
    d432:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
		if (local_step_event_count > 0) {
			local_millimeters = sqrt(delta_mm[X_AXIS]*delta_mm[X_AXIS] + delta_mm[Y_AXIS]*delta_mm[Y_AXIS] + delta_mm[Z_AXIS]*delta_mm[Z_AXIS]);
		}

		abs_steps = abs(steps[A_AXIS]);
		local_step_event_count = max((int32_t)local_step_event_count, abs_steps);
    d436:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    d43a:	9102      	str	r1, [sp, #8]
		delta_mm[A_AXIS] = ((float)steps[A_AXIS])/axes[A_AXIS].steps_per_mm;
    d43c:	4620      	mov	r0, r4
    d43e:	f04f 0103 	mov.w	r1, #3
    d442:	f000 fb7b 	bl	db3c <Point::operator[](unsigned int) const>
    d446:	6800      	ldr	r0, [r0, #0]
    d448:	f006 faea 	bl	13a20 <__aeabi_i2f>
    d44c:	f241 6304 	movw	r3, #5636	; 0x1604
    d450:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d454:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    d456:	f006 fbeb 	bl	13c30 <__aeabi_fdiv>
    d45a:	9003      	str	r0, [sp, #12]
    d45c:	9009      	str	r0, [sp, #36]	; 0x24
    d45e:	e5da      	b.n	d016 <planner::planNextMove(Point&, long, Point const&)+0x15e>

0000d460 <planner::addMoveToBuffer(Point const&, long const&)>:
		position = target;
	}

	// Buffer the move. IOW, add a new block, and recalculate the acceleration accordingly
	void addMoveToBuffer(const Point& target, const int32_t &us_per_step)
	{
    d460:	b570      	push	{r4, r5, r6, lr}
    d462:	b090      	sub	sp, #64	; 0x40
    d464:	4604      	mov	r4, r0
    d466:	460d      	mov	r5, r1
//		xprintf("addMoveToBuffer" " (%s:%d)\n",_F_,_L_);
		Point offset_target;
    d468:	a806      	add	r0, sp, #24
    d46a:	f000 fb5b 	bl	db24 <Point::Point()>
		offset_target = target + *tool_offsets;
    d46e:	f241 1308 	movw	r3, #4360	; 0x1108
    d472:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d476:	4668      	mov	r0, sp
    d478:	4621      	mov	r1, r4
    d47a:	681a      	ldr	r2, [r3, #0]
    d47c:	f000 fb88 	bl	db90 <operator+(Point const&, Point const&)>
    d480:	ae06      	add	r6, sp, #24
    d482:	9800      	ldr	r0, [sp, #0]
    d484:	9901      	ldr	r1, [sp, #4]
    d486:	9a02      	ldr	r2, [sp, #8]
    d488:	9b03      	ldr	r3, [sp, #12]
    d48a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    d48c:	9804      	ldr	r0, [sp, #16]
    d48e:	6030      	str	r0, [r6, #0]
		
		/// Clip Z axis so that plate cannot attempt to move out of build area
		/// other axis clipping will be added in a future revision
		if(offset_target[Z_AXIS] > axes[Z_AXIS].max_length){
    d490:	a806      	add	r0, sp, #24
    d492:	f04f 0102 	mov.w	r1, #2
    d496:	f000 fb55 	bl	db44 <Point::operator[](unsigned int)>
    d49a:	f241 6304 	movw	r3, #5636	; 0x1604
    d49e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d4a2:	6802      	ldr	r2, [r0, #0]
    d4a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    d4a6:	429a      	cmp	r2, r3
    d4a8:	dd0a      	ble.n	d4c0 <planner::addMoveToBuffer(Point const&, long const&)+0x60>
			offset_target[Z_AXIS] = axes[Z_AXIS].max_length;
    d4aa:	a806      	add	r0, sp, #24
    d4ac:	f04f 0102 	mov.w	r1, #2
    d4b0:	f000 fb48 	bl	db44 <Point::operator[](unsigned int)>
    d4b4:	f241 6304 	movw	r3, #5636	; 0x1604
    d4b8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d4bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    d4be:	6003      	str	r3, [r0, #0]
		}

			
		planNextMove(offset_target, us_per_step, offset_target - position);
    d4c0:	682e      	ldr	r6, [r5, #0]
    d4c2:	f241 6560 	movw	r5, #5728	; 0x1660
    d4c6:	f2c1 0500 	movt	r5, #4096	; 0x1000
    d4ca:	a80b      	add	r0, sp, #44	; 0x2c
    d4cc:	a906      	add	r1, sp, #24
    d4ce:	462a      	mov	r2, r5
    d4d0:	f000 fb3c 	bl	db4c <operator-(Point const&, Point const&)>
    d4d4:	a806      	add	r0, sp, #24
    d4d6:	4631      	mov	r1, r6
    d4d8:	aa0b      	add	r2, sp, #44	; 0x2c
    d4da:	f7ff fced 	bl	ceb8 <planner::planNextMove(Point&, long, Point const&)>
		position = target;
    d4de:	6820      	ldr	r0, [r4, #0]
    d4e0:	6861      	ldr	r1, [r4, #4]
    d4e2:	68a2      	ldr	r2, [r4, #8]
    d4e4:	68e3      	ldr	r3, [r4, #12]
    d4e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    d4e8:	6920      	ldr	r0, [r4, #16]
    d4ea:	6028      	str	r0, [r5, #0]

	}
    d4ec:	b010      	add	sp, #64	; 0x40
    d4ee:	bd70      	pop	{r4, r5, r6, pc}

0000d4f0 <planner::addMoveToBufferRelative(Point const&, long const&, signed char)>:
	}

	/// Command calls this to add a move to the buffer,
	/// so that the planner will generate an acceleration trapezoid
	void addMoveToBufferRelative(const Point& move, const int32_t &ms, const int8_t relative)
	{
    d4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d4f4:	b093      	sub	sp, #76	; 0x4c
    d4f6:	4607      	mov	r7, r0
    d4f8:	9101      	str	r1, [sp, #4]
    d4fa:	4691      	mov	r9, r2
		
		Point target;
    d4fc:	a808      	add	r0, sp, #32
    d4fe:	f000 fb11 	bl	db24 <Point::Point()>

		target = move + *tool_offsets;
    d502:	f241 1308 	movw	r3, #4360	; 0x1108
    d506:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d50a:	a802      	add	r0, sp, #8
    d50c:	4639      	mov	r1, r7
    d50e:	681a      	ldr	r2, [r3, #0]
    d510:	f000 fb3e 	bl	db90 <operator+(Point const&, Point const&)>
    d514:	ac08      	add	r4, sp, #32
    d516:	9802      	ldr	r0, [sp, #8]
    d518:	9903      	ldr	r1, [sp, #12]
    d51a:	9a04      	ldr	r2, [sp, #16]
    d51c:	9b05      	ldr	r3, [sp, #20]
    d51e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d520:	9806      	ldr	r0, [sp, #24]
    d522:	6020      	str	r0, [r4, #0]

		int32_t max_delta = 0;
		for (int i = 0; i < STEPPER_COUNT; i++) {
    d524:	f04f 0400 	mov.w	r4, #0
		
		Point target;

		target = move + *tool_offsets;

		int32_t max_delta = 0;
    d528:	4626      	mov	r6, r4
			int32_t delta = 0;
			if ((relative & (1 << i))) {
				target[i] = position[i] + move[i];
				delta = abs(move[i]);
			} else {
				target[i] = move[i] + (*tool_offsets)[i];
    d52a:	f241 1a08 	movw	sl, #4360	; 0x1108
    d52e:	f2c1 0a00 	movt	sl, #4096	; 0x1000
				delta = abs(target[i] - position[i]);
    d532:	f241 6860 	movw	r8, #5728	; 0x1660
    d536:	f2c1 0800 	movt	r8, #4096	; 0x1000
		target = move + *tool_offsets;

		int32_t max_delta = 0;
		for (int i = 0; i < STEPPER_COUNT; i++) {
			int32_t delta = 0;
			if ((relative & (1 << i))) {
    d53a:	fa49 f304 	asr.w	r3, r9, r4
    d53e:	f013 0f01 	tst.w	r3, #1
    d542:	d01a      	beq.n	d57a <planner::addMoveToBufferRelative(Point const&, long const&, signed char)+0x8a>
				target[i] = position[i] + move[i];
    d544:	a808      	add	r0, sp, #32
    d546:	4621      	mov	r1, r4
    d548:	f000 fafc 	bl	db44 <Point::operator[](unsigned int)>
    d54c:	4683      	mov	fp, r0
    d54e:	4640      	mov	r0, r8
    d550:	4621      	mov	r1, r4
    d552:	f000 faf7 	bl	db44 <Point::operator[](unsigned int)>
    d556:	6805      	ldr	r5, [r0, #0]
    d558:	4638      	mov	r0, r7
    d55a:	4621      	mov	r1, r4
    d55c:	f000 faee 	bl	db3c <Point::operator[](unsigned int) const>
    d560:	6803      	ldr	r3, [r0, #0]
    d562:	18ed      	adds	r5, r5, r3
    d564:	f8cb 5000 	str.w	r5, [fp]
				delta = abs(move[i]);
    d568:	4638      	mov	r0, r7
    d56a:	4621      	mov	r1, r4
    d56c:	f000 fae6 	bl	db3c <Point::operator[](unsigned int) const>

template <>
inline int abs(int x) { return __builtin_abs(x); }

template <>
inline long abs(long x) { return __builtin_labs(x); }
    d570:	6805      	ldr	r5, [r0, #0]
    d572:	2d00      	cmp	r5, #0
    d574:	bfb8      	it	lt
    d576:	426d      	neglt	r5, r5
    d578:	e020      	b.n	d5bc <planner::addMoveToBufferRelative(Point const&, long const&, signed char)+0xcc>
			int32_t delta = 0;
			if ((relative & (1 << i))) {
				target[i] = position[i] + move[i];
				delta = abs(move[i]);
			} else {
				target[i] = move[i] + (*tool_offsets)[i];
    d57a:	a808      	add	r0, sp, #32
    d57c:	4621      	mov	r1, r4
    d57e:	f000 fae1 	bl	db44 <Point::operator[](unsigned int)>
    d582:	4683      	mov	fp, r0
    d584:	4638      	mov	r0, r7
    d586:	4621      	mov	r1, r4
    d588:	f000 fad8 	bl	db3c <Point::operator[](unsigned int) const>
    d58c:	6805      	ldr	r5, [r0, #0]
    d58e:	f8da 0000 	ldr.w	r0, [sl]
    d592:	4621      	mov	r1, r4
    d594:	f000 fad6 	bl	db44 <Point::operator[](unsigned int)>
    d598:	6803      	ldr	r3, [r0, #0]
    d59a:	18ed      	adds	r5, r5, r3
    d59c:	f8cb 5000 	str.w	r5, [fp]
				delta = abs(target[i] - position[i]);
    d5a0:	a808      	add	r0, sp, #32
    d5a2:	4621      	mov	r1, r4
    d5a4:	f000 face 	bl	db44 <Point::operator[](unsigned int)>
    d5a8:	6805      	ldr	r5, [r0, #0]
    d5aa:	4640      	mov	r0, r8
    d5ac:	4621      	mov	r1, r4
    d5ae:	f000 fac9 	bl	db44 <Point::operator[](unsigned int)>
    d5b2:	6803      	ldr	r3, [r0, #0]
    d5b4:	1aed      	subs	r5, r5, r3

template <>
inline int abs(int x) { return __builtin_abs(x); }

template <>
inline long abs(long x) { return __builtin_labs(x); }
    d5b6:	2d00      	cmp	r5, #0
    d5b8:	bfb8      	it	lt
    d5ba:	426d      	neglt	r5, r5
    d5bc:	42ae      	cmp	r6, r5
    d5be:	bfb8      	it	lt
    d5c0:	462e      	movlt	r6, r5
		Point target;

		target = move + *tool_offsets;

		int32_t max_delta = 0;
		for (int i = 0; i < STEPPER_COUNT; i++) {
    d5c2:	f104 0401 	add.w	r4, r4, #1
    d5c6:	2c04      	cmp	r4, #4
    d5c8:	d1b7      	bne.n	d53a <planner::addMoveToBufferRelative(Point const&, long const&, signed char)+0x4a>
			}
		}

		/// Clip Z axis so that plate cannot attempt to move out of build area
		/// other axis clipping will be added in a future revision
		if(target[Z_AXIS] > axes[Z_AXIS].max_length){
    d5ca:	a808      	add	r0, sp, #32
    d5cc:	f04f 0102 	mov.w	r1, #2
    d5d0:	f000 fab8 	bl	db44 <Point::operator[](unsigned int)>
    d5d4:	f241 6304 	movw	r3, #5636	; 0x1604
    d5d8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d5dc:	6802      	ldr	r2, [r0, #0]
    d5de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    d5e0:	429a      	cmp	r2, r3
    d5e2:	dd0a      	ble.n	d5fa <planner::addMoveToBufferRelative(Point const&, long const&, signed char)+0x10a>
			target[Z_AXIS] = axes[Z_AXIS].max_length;
    d5e4:	a808      	add	r0, sp, #32
    d5e6:	f04f 0102 	mov.w	r1, #2
    d5ea:	f000 faab 	bl	db44 <Point::operator[](unsigned int)>
    d5ee:	f241 6304 	movw	r3, #5636	; 0x1604
    d5f2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d5f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    d5f8:	6003      	str	r3, [r0, #0]
		}

		planNextMove(target, ms/max_delta, target-position);
    d5fa:	9a01      	ldr	r2, [sp, #4]
    d5fc:	6813      	ldr	r3, [r2, #0]
    d5fe:	fb93 f6f6 	sdiv	r6, r3, r6
    d602:	f241 6460 	movw	r4, #5728	; 0x1660
    d606:	f2c1 0400 	movt	r4, #4096	; 0x1000
    d60a:	a80d      	add	r0, sp, #52	; 0x34
    d60c:	a908      	add	r1, sp, #32
    d60e:	4622      	mov	r2, r4
    d610:	f000 fa9c 	bl	db4c <operator-(Point const&, Point const&)>
    d614:	a808      	add	r0, sp, #32
    d616:	4631      	mov	r1, r6
    d618:	aa0d      	add	r2, sp, #52	; 0x34
    d61a:	f7ff fc4d 	bl	ceb8 <planner::planNextMove(Point&, long, Point const&)>
		position = target;
    d61e:	ad08      	add	r5, sp, #32
    d620:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d624:	682b      	ldr	r3, [r5, #0]
    d626:	6023      	str	r3, [r4, #0]
	}
    d628:	b013      	add	sp, #76	; 0x4c
    d62a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d62e:	bf00      	nop

0000d630 <planner::changeToolIndex(unsigned char)>:
#endif
	}
	
	void changeToolIndex(uint8_t tool){
		if(tool == 1)
			tool_offsets = &tolerance_offset_T1;
    d630:	f241 52ec 	movw	r2, #5612	; 0x15ec
    d634:	f2c1 0200 	movt	r2, #4096	; 0x1000
    d638:	f241 6374 	movw	r3, #5748	; 0x1674
    d63c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d640:	2801      	cmp	r0, #1
    d642:	bf08      	it	eq
    d644:	461a      	moveq	r2, r3
		previous_unit_vec[2]= 0.0;
#endif
	}
	
	void changeToolIndex(uint8_t tool){
		if(tool == 1)
    d646:	f241 1308 	movw	r3, #4360	; 0x1108
    d64a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d64e:	601a      	str	r2, [r3, #0]
			tool_offsets = &tolerance_offset_T1;
		else
			tool_offsets = &tolerance_offset_T0;
	}
    d650:	4770      	bx	lr
    d652:	bf00      	nop

0000d654 <planner::abort()>:
//		}
	}

	/// call when a move is starting or ending, or canceling a move
	/// clears planner buffer
	void abort() {
    d654:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d658:	b087      	sub	sp, #28
		steppers::abort();
    d65a:	f001 fda5 	bl	f1a8 <steppers::abort()>
		position = steppers::getPosition();
    d65e:	4668      	mov	r0, sp
    d660:	f001 fdf4 	bl	f24c <steppers::getPosition()>
    d664:	f241 6460 	movw	r4, #5728	; 0x1660
    d668:	f2c1 0400 	movt	r4, #4096	; 0x1000
    d66c:	9800      	ldr	r0, [sp, #0]
    d66e:	9901      	ldr	r1, [sp, #4]
    d670:	9a02      	ldr	r2, [sp, #8]
    d672:	9b03      	ldr	r3, [sp, #12]
    d674:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d676:	9804      	ldr	r0, [sp, #16]
    d678:	6020      	str	r0, [r4, #0]
    d67a:	f44f 76b1 	mov.w	r6, #354	; 0x162
	}
	
	inline void loadToleranceOffsets(){
		// get toolhead offsets
//		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
			for(int i = 0; i  < 3; i++){
    d67e:	f04f 0400 	mov.w	r4, #0
				int32_t tolerance_err = (int32_t)(eeprom::getEeprom32(eeprom_offsets::TOOLHEAD_OFFSET_SETTINGS + i*4, 0)) / 10;
    d682:	46a1      	mov	r9, r4
				tolerance_offset_T0[i] = (tolerance_err/2);
    d684:	f241 58ec 	movw	r8, #5612	; 0x15ec
    d688:	f2c1 0800 	movt	r8, #4096	; 0x1000
	
	inline void loadToleranceOffsets(){
		// get toolhead offsets
//		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
			for(int i = 0; i  < 3; i++){
				int32_t tolerance_err = (int32_t)(eeprom::getEeprom32(eeprom_offsets::TOOLHEAD_OFFSET_SETTINGS + i*4, 0)) / 10;
    d68c:	f246 6767 	movw	r7, #26215	; 0x6667
    d690:	f2c6 6766 	movt	r7, #26214	; 0x6666
    d694:	4630      	mov	r0, r6
    d696:	4649      	mov	r1, r9
    d698:	f003 fef6 	bl	11488 <eeprom::getEeprom32(unsigned short, unsigned long)>
    d69c:	4605      	mov	r5, r0
				tolerance_offset_T0[i] = (tolerance_err/2);
    d69e:	4640      	mov	r0, r8
    d6a0:	4621      	mov	r1, r4
    d6a2:	f000 fa4f 	bl	db44 <Point::operator[](unsigned int)>
	
	inline void loadToleranceOffsets(){
		// get toolhead offsets
//		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
			for(int i = 0; i  < 3; i++){
				int32_t tolerance_err = (int32_t)(eeprom::getEeprom32(eeprom_offsets::TOOLHEAD_OFFSET_SETTINGS + i*4, 0)) / 10;
    d6a6:	fb87 2305 	smull	r2, r3, r7, r5
    d6aa:	ea4f 75e5 	mov.w	r5, r5, asr #31
    d6ae:	ebc5 05a3 	rsb	r5, r5, r3, asr #2
				tolerance_offset_T0[i] = (tolerance_err/2);
    d6b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
    d6b6:	ea4f 0565 	mov.w	r5, r5, asr #1
    d6ba:	6005      	str	r5, [r0, #0]
	}
	
	inline void loadToleranceOffsets(){
		// get toolhead offsets
//		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
			for(int i = 0; i  < 3; i++){
    d6bc:	f104 0401 	add.w	r4, r4, #1
    d6c0:	f106 0604 	add.w	r6, r6, #4
    d6c4:	b2b6      	uxth	r6, r6
    d6c6:	2c03      	cmp	r4, #3
    d6c8:	d1e4      	bne.n	d694 <planner::abort()+0x40>
				tolerance_offset_T0[i] = (tolerance_err/2);
			}
			// For now, force Z offset to be zero as bad things can happen if it has a value AND there is no use case for it having a value on the replicator
			// extruder axes are 0 because offset concept does not apply
			for (int i = 2; i < STEPPER_COUNT; i++)
				tolerance_offset_T0[i] = 0;
    d6ca:	f241 55ec 	movw	r5, #5612	; 0x15ec
    d6ce:	f2c1 0500 	movt	r5, #4096	; 0x1000
    d6d2:	4628      	mov	r0, r5
    d6d4:	f04f 0102 	mov.w	r1, #2
    d6d8:	f000 fa34 	bl	db44 <Point::operator[](unsigned int)>
    d6dc:	f04f 0400 	mov.w	r4, #0
    d6e0:	6004      	str	r4, [r0, #0]
    d6e2:	4628      	mov	r0, r5
    d6e4:	f04f 0103 	mov.w	r1, #3
    d6e8:	f000 fa2c 	bl	db44 <Point::operator[](unsigned int)>
    d6ec:	6004      	str	r4, [r0, #0]

			for(int i = 0; i < STEPPER_COUNT; i++)
				tolerance_offset_T1[i] = -1 * tolerance_offset_T0[i];
    d6ee:	f241 6674 	movw	r6, #5748	; 0x1674
    d6f2:	f2c1 0600 	movt	r6, #4096	; 0x1000
    d6f6:	462f      	mov	r7, r5
    d6f8:	4630      	mov	r0, r6
    d6fa:	4621      	mov	r1, r4
    d6fc:	f000 fa22 	bl	db44 <Point::operator[](unsigned int)>
    d700:	4605      	mov	r5, r0
    d702:	4638      	mov	r0, r7
    d704:	4621      	mov	r1, r4
    d706:	f000 fa1d 	bl	db44 <Point::operator[](unsigned int)>
    d70a:	6803      	ldr	r3, [r0, #0]
    d70c:	f1c3 0300 	rsb	r3, r3, #0
    d710:	602b      	str	r3, [r5, #0]
			// For now, force Z offset to be zero as bad things can happen if it has a value AND there is no use case for it having a value on the replicator
			// extruder axes are 0 because offset concept does not apply
			for (int i = 2; i < STEPPER_COUNT; i++)
				tolerance_offset_T0[i] = 0;

			for(int i = 0; i < STEPPER_COUNT; i++)
    d712:	f104 0401 	add.w	r4, r4, #1
    d716:	2c04      	cmp	r4, #4
    d718:	d1ee      	bne.n	d6f8 <planner::abort()+0xa4>
		position = steppers::getPosition();

		/// load toolhead offset values from EEPROM
		loadToleranceOffsets();
		/// tool 0 is default
		changeToolIndex(0);
    d71a:	f04f 0000 	mov.w	r0, #0
    d71e:	f7ff ff87 	bl	d630 <planner::changeToolIndex(unsigned char)>
		// reset speed
		for (int i = 0; i < STEPPER_COUNT; i++) {
			previous_speed[i] = 0.0;
    d722:	f241 6398 	movw	r3, #5784	; 0x1698
    d726:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d72a:	f04f 0200 	mov.w	r2, #0
    d72e:	601a      	str	r2, [r3, #0]
    d730:	605a      	str	r2, [r3, #4]
    d732:	609a      	str	r2, [r3, #8]
    d734:	60da      	str	r2, [r3, #12]
		}
		previous_nominal_speed = 0.0;
    d736:	f241 6388 	movw	r3, #5768	; 0x1688
    d73a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d73e:	601a      	str	r2, [r3, #0]
		inline BufSizeType getUsedCount() {
			return ((head-tail+size) & size_mask);
		}
		
		inline void clear() {
			head = 0;
    d740:	f241 638c 	movw	r3, #5772	; 0x168c
    d744:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d748:	f04f 0400 	mov.w	r4, #0
    d74c:	701c      	strb	r4, [r3, #0]
			tail = 0;
    d74e:	705c      	strb	r4, [r3, #1]
		}
		previous_nominal_speed = 0.0;
		
		block_buffer.clear();

		accelerationON = eeprom::getEeprom8(eeprom_offsets::ACCELERATION_SETTINGS, 1);
    d750:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    d754:	f04f 0101 	mov.w	r1, #1
    d758:	f003 fdf2 	bl	11340 <eeprom::getEeprom8(unsigned short, unsigned char)>
    d75c:	f240 0318 	movw	r3, #24
    d760:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d764:	1b00      	subs	r0, r0, r4
    d766:	bf18      	it	ne
    d768:	2001      	movne	r0, #1
    d76a:	7018      	strb	r0, [r3, #0]

		additional_ms_per_segment = 0;
    d76c:	f241 1320 	movw	r3, #4384	; 0x1120
    d770:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d774:	601c      	str	r4, [r3, #0]
		force_replan_from_stopped = false;
    d776:	f241 6394 	movw	r3, #5780	; 0x1694
    d77a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d77e:	701c      	strb	r4, [r3, #0]
#ifdef CENTREPEDAL
		previous_unit_vec[0]= 0.0;
		previous_unit_vec[1]= 0.0;
		previous_unit_vec[2]= 0.0;
#endif
	}
    d780:	b007      	add	sp, #28
    d782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d786:	bf00      	nop

0000d788 <planner::init()>:
	uint32_t additional_ms_per_segment;
	
	volatile bool force_replan_from_stopped;
	
	void init()
	{
    d788:	b570      	push	{r4, r5, r6, lr}
		xprintf("planner::init" " (%s:%d)\n",_F_,_L_);
    d78a:	f247 5050 	movw	r0, #30032	; 0x7550
    d78e:	f2c0 0002 	movt	r0, #2
    d792:	497a      	ldr	r1, [pc, #488]	; (d97c <planner::init()+0x1f4>)
    d794:	f240 120f 	movw	r2, #271	; 0x10f
    d798:	f7f9 f8dc 	bl	6954 <xprintf>

		/// if eeprom has not been initialized. store default values
		if (eeprom::getEeprom32(eeprom_offsets::TOOLHEAD_OFFSET_SETTINGS, 0xFFFFFFFF) == 0xFFFFFFFF) {
    d79c:	f44f 70b1 	mov.w	r0, #354	; 0x162
    d7a0:	f04f 31ff 	mov.w	r1, #4294967295
    d7a4:	f003 fe70 	bl	11488 <eeprom::getEeprom32(unsigned short, unsigned long)>
    d7a8:	f1b0 3fff 	cmp.w	r0, #4294967295
    d7ac:	d10a      	bne.n	d7c4 <planner::init()+0x3c>
			xprintf("planner::init" " (%s:%d)\n",_F_,_L_);
    d7ae:	f247 5050 	movw	r0, #30032	; 0x7550
    d7b2:	f2c0 0002 	movt	r0, #2
    d7b6:	4971      	ldr	r1, [pc, #452]	; (d97c <planner::init()+0x1f4>)
    d7b8:	f240 1213 	movw	r2, #275	; 0x113
    d7bc:	f7f9 f8ca 	bl	6954 <xprintf>
			eeprom::storeToolheadToleranceDefaults();
    d7c0:	f7fc fba6 	bl	9f10 <eeprom::storeToolheadToleranceDefaults()>
		}
		xprintf("planner::init" " (%s:%d)\n",_F_,_L_);
    d7c4:	f247 5450 	movw	r4, #30032	; 0x7550
    d7c8:	f2c0 0402 	movt	r4, #2
    d7cc:	4e6b      	ldr	r6, [pc, #428]	; (d97c <planner::init()+0x1f4>)
    d7ce:	4620      	mov	r0, r4
    d7d0:	4631      	mov	r1, r6
    d7d2:	f44f 728b 	mov.w	r2, #278	; 0x116
    d7d6:	f7f9 f8bd 	bl	6954 <xprintf>
		
		setAxisStepsPerMM(XSTEPS_PER_MM,0);
    d7da:	f644 40cd 	movw	r0, #19661	; 0x4ccd
    d7de:	f2c4 2080 	movt	r0, #17024	; 0x4280
    d7e2:	f04f 0100 	mov.w	r1, #0
    d7e6:	f7ff f8eb 	bl	c9c0 <planner::setAxisStepsPerMM(float, unsigned char)>
		setAxisStepsPerMM(YSTEPS_PER_MM,1);               
    d7ea:	f64b 0052 	movw	r0, #47186	; 0xb852
    d7ee:	f2c4 2037 	movt	r0, #16951	; 0x4237
    d7f2:	f04f 0101 	mov.w	r1, #1
    d7f6:	f7ff f8e3 	bl	c9c0 <planner::setAxisStepsPerMM(float, unsigned char)>
		setAxisStepsPerMM(ZSTEPS_PER_MM,2);
    d7fa:	f04f 0000 	mov.w	r0, #0
    d7fe:	f2c4 5020 	movt	r0, #17696	; 0x4520
    d802:	f04f 0102 	mov.w	r1, #2
    d806:	f7ff f8db 	bl	c9c0 <planner::setAxisStepsPerMM(float, unsigned char)>
		setAxisStepsPerMM(ASTEPS_PER_MM,3);
    d80a:	f643 65b8 	movw	r5, #16056	; 0x3eb8
    d80e:	f2c4 35a5 	movt	r5, #17317	; 0x43a5
    d812:	4628      	mov	r0, r5
    d814:	f04f 0103 	mov.w	r1, #3
    d818:	f7ff f8d2 	bl	c9c0 <planner::setAxisStepsPerMM(float, unsigned char)>
		setAxisStepsPerMM(BSTEPS_PER_MM,4);
    d81c:	4628      	mov	r0, r5
    d81e:	f04f 0104 	mov.w	r1, #4
    d822:	f7ff f8cd 	bl	c9c0 <planner::setAxisStepsPerMM(float, unsigned char)>

		xprintf("planner::init" " (%s:%d)\n",_F_,_L_);
    d826:	4620      	mov	r0, r4
    d828:	4631      	mov	r1, r6
    d82a:	f44f 728f 	mov.w	r2, #286	; 0x11e
    d82e:	f7f9 f891 	bl	6954 <xprintf>
		// check that acceleration settings have been initialized 
		// if not, load defaults

		uint8_t accelerationStatus = eeprom::getEeprom8(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::DEFAULTS_FLAG, 0xFF);
    d832:	f44f 70c4 	mov.w	r0, #392	; 0x188
    d836:	f04f 01ff 	mov.w	r1, #255	; 0xff
    d83a:	f003 fd81 	bl	11340 <eeprom::getEeprom8(unsigned short, unsigned char)>
		if(accelerationStatus !=  _BV(ACCELERATION_INIT_BIT)){
    d83e:	2880      	cmp	r0, #128	; 0x80
    d840:	d007      	beq.n	d852 <planner::init()+0xca>
			xprintf("planner::init" " (%s:%d)\n",_F_,_L_);
    d842:	4620      	mov	r0, r4
    d844:	4631      	mov	r1, r6
    d846:	f44f 7292 	mov.w	r2, #292	; 0x124
    d84a:	f7f9 f883 	bl	6954 <xprintf>
			eeprom::setDefaultsAcceleration();
    d84e:	f7fc fa51 	bl	9cf4 <eeprom::setDefaultsAcceleration()>
		}
		xprintf("planner::init" " (%s:%d)\n",_F_,_L_);
    d852:	f247 5050 	movw	r0, #30032	; 0x7550
    d856:	f2c0 0002 	movt	r0, #2
    d85a:	4948      	ldr	r1, [pc, #288]	; (d97c <planner::init()+0x1f4>)
    d85c:	f240 1227 	movw	r2, #295	; 0x127
    d860:	f7f9 f878 	bl	6954 <xprintf>

		// Master acceleration
		setAcceleration((int32_t)eeprom::getEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::ACCELERATION_RATE_OFFSET, DEFAULT_ACCELERATION));
    d864:	f44f 70b8 	mov.w	r0, #368	; 0x170
    d868:	f640 31b8 	movw	r1, #3000	; 0xbb8
    d86c:	f003 fde6 	bl	1143c <eeprom::getEeprom16(unsigned short, unsigned short)>
    d870:	f7ff f8b2 	bl	c9d8 <planner::setAcceleration(long)>
		
		setAxisAcceleration((int32_t)eeprom::getEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_RATES_OFFSET+ 0, DEFAULT_X_ACCELERATION), 0);        
    d874:	f44f 70b9 	mov.w	r0, #370	; 0x172
    d878:	f640 31b8 	movw	r1, #3000	; 0xbb8
    d87c:	f003 fdde 	bl	1143c <eeprom::getEeprom16(unsigned short, unsigned short)>
    d880:	f04f 0100 	mov.w	r1, #0
    d884:	f7ff f8b2 	bl	c9ec <planner::setAxisAcceleration(long, unsigned char)>
		setAxisAcceleration((int32_t)eeprom::getEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_RATES_OFFSET+ 2, DEFAULT_Y_ACCELERATION), 1);
    d888:	f44f 70ba 	mov.w	r0, #372	; 0x174
    d88c:	f640 31b8 	movw	r1, #3000	; 0xbb8
    d890:	f003 fdd4 	bl	1143c <eeprom::getEeprom16(unsigned short, unsigned short)>
    d894:	f04f 0101 	mov.w	r1, #1
    d898:	f7ff f8a8 	bl	c9ec <planner::setAxisAcceleration(long, unsigned char)>
		setAxisAcceleration((int32_t)eeprom::getEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_RATES_OFFSET+ 4, DEFAULT_Z_ACCELERATION), 2);
    d89c:	f44f 70bb 	mov.w	r0, #374	; 0x176
    d8a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    d8a4:	f003 fdca 	bl	1143c <eeprom::getEeprom16(unsigned short, unsigned short)>
    d8a8:	f04f 0102 	mov.w	r1, #2
    d8ac:	f7ff f89e 	bl	c9ec <planner::setAxisAcceleration(long, unsigned char)>
		setAxisAcceleration((int32_t)eeprom::getEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_RATES_OFFSET+ 6, DEFAULT_A_ACCELERATION), 3);
    d8b0:	f44f 70bc 	mov.w	r0, #376	; 0x178
    d8b4:	f640 31b8 	movw	r1, #3000	; 0xbb8
    d8b8:	f003 fdc0 	bl	1143c <eeprom::getEeprom16(unsigned short, unsigned short)>
    d8bc:	f04f 0103 	mov.w	r1, #3
    d8c0:	f7ff f894 	bl	c9ec <planner::setAxisAcceleration(long, unsigned char)>
		setAxisAcceleration((int32_t)eeprom::getEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_RATES_OFFSET+ 8, DEFAULT_B_ACCELERATION), 4);
    d8c4:	f44f 70bd 	mov.w	r0, #378	; 0x17a
    d8c8:	f640 31b8 	movw	r1, #3000	; 0xbb8
    d8cc:	f003 fdb6 	bl	1143c <eeprom::getEeprom16(unsigned short, unsigned short)>
    d8d0:	f04f 0104 	mov.w	r1, #4
    d8d4:	f7ff f88a 	bl	c9ec <planner::setAxisAcceleration(long, unsigned char)>

		setMaxXYJerk((float)eeprom::getEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_JERK_OFFSET, DEFAULT_MAX_XY_JERK));
    d8d8:	f44f 70be 	mov.w	r0, #380	; 0x17c
    d8dc:	f04f 0114 	mov.w	r1, #20
    d8e0:	f003 fdac 	bl	1143c <eeprom::getEeprom16(unsigned short, unsigned short)>
    d8e4:	f006 f898 	bl	13a18 <__aeabi_ui2f>
    d8e8:	f7ff f864 	bl	c9b4 <planner::setMaxXYJerk(float)>
		setMaxAxisJerk((float)eeprom::getEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_JERK_OFFSET + 4, DEFAULT_MAX_Z_JERK), 2);
    d8ec:	f44f 70c0 	mov.w	r0, #384	; 0x180
    d8f0:	f04f 0101 	mov.w	r1, #1
    d8f4:	f003 fda2 	bl	1143c <eeprom::getEeprom16(unsigned short, unsigned short)>
    d8f8:	f006 f88e 	bl	13a18 <__aeabi_ui2f>
    d8fc:	f04f 0102 	mov.w	r1, #2
    d900:	f7ff f832 	bl	c968 <planner::setMaxAxisJerk(float, unsigned char)>
		setMaxAxisJerk((float)eeprom::getEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_JERK_OFFSET + 6, DEFAULT_MAX_A_JERK), 3);
    d904:	f44f 70c1 	mov.w	r0, #386	; 0x182
    d908:	f04f 0102 	mov.w	r1, #2
    d90c:	f003 fd96 	bl	1143c <eeprom::getEeprom16(unsigned short, unsigned short)>
    d910:	f006 f882 	bl	13a18 <__aeabi_ui2f>
    d914:	f04f 0103 	mov.w	r1, #3
    d918:	f7ff f826 	bl	c968 <planner::setMaxAxisJerk(float, unsigned char)>
		setMaxAxisJerk((float)eeprom::getEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_JERK_OFFSET + 8, DEFAULT_MAX_B_JERK), 4);
    d91c:	f44f 70c2 	mov.w	r0, #388	; 0x184
    d920:	f04f 0102 	mov.w	r1, #2
    d924:	f003 fd8a 	bl	1143c <eeprom::getEeprom16(unsigned short, unsigned short)>
    d928:	f006 f876 	bl	13a18 <__aeabi_ui2f>
    d92c:	f04f 0104 	mov.w	r1, #4
    d930:	f7ff f81a 	bl	c968 <planner::setMaxAxisJerk(float, unsigned char)>

		minimum_planner_speed = eeprom::getEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::MINIMUM_SPEED, DEFAULT_MIN_SPEED);
    d934:	f44f 70c3 	mov.w	r0, #390	; 0x186
    d938:	f04f 010f 	mov.w	r1, #15
    d93c:	f003 fd7e 	bl	1143c <eeprom::getEeprom16(unsigned short, unsigned short)>
    d940:	f241 140c 	movw	r4, #4364	; 0x110c
    d944:	f2c1 0400 	movt	r4, #4096	; 0x1000
    d948:	f006 f866 	bl	13a18 <__aeabi_ui2f>
    d94c:	6020      	str	r0, [r4, #0]
		
		// Z axis max and min
		setAxisMaxLength(eeprom::getEeprom32(eeprom_offsets::AXIS_LENGTHS + 4*2, replicator_axis_lengths::axis_lengths[2]), 2, true);
    d94e:	f44f 70ca 	mov.w	r0, #404	; 0x194
    d952:	f64e 2160 	movw	r1, #60000	; 0xea60
    d956:	f003 fd97 	bl	11488 <eeprom::getEeprom32(unsigned short, unsigned long)>
    d95a:	f04f 0102 	mov.w	r1, #2
    d95e:	f04f 0201 	mov.w	r2, #1
    d962:	f7ff f80f 	bl	c984 <planner::setAxisMaxLength(long, unsigned char, bool)>
		setAxisMaxLength(0, 2, false);
    d966:	f04f 0000 	mov.w	r0, #0
    d96a:	f04f 0102 	mov.w	r1, #2
    d96e:	4602      	mov	r2, r0
    d970:	f7ff f808 	bl	c984 <planner::setAxisMaxLength(long, unsigned char, bool)>

		abort();
    d974:	f7ff fe6e 	bl	d654 <planner::abort()>
#ifdef CENTREPEDAL
		previous_unit_vec[0]= 0.0;
		previous_unit_vec[1]= 0.0;
		previous_unit_vec[2]= 0.0;
#endif
	}
    d978:	bd70      	pop	{r4, r5, r6, pc}
    d97a:	bf00      	nop
    d97c:	000276bc 	.word	0x000276bc

0000d980 <planner::definePosition(Point const&)>:
		else
			tool_offsets = &tolerance_offset_T0;
	}

	void definePosition(const Point& new_position)
	{
    d980:	b570      	push	{r4, r5, r6, lr}
    d982:	4604      	mov	r4, r0
//	    xprintf("definePosition(const Point& new_position)" " (%s:%d)\n",_F_,_L_);
		position = new_position;
    d984:	f241 6660 	movw	r6, #5728	; 0x1660
    d988:	f2c1 0600 	movt	r6, #4096	; 0x1000
    d98c:	4635      	mov	r5, r6
    d98e:	6800      	ldr	r0, [r0, #0]
    d990:	6861      	ldr	r1, [r4, #4]
    d992:	68a2      	ldr	r2, [r4, #8]
    d994:	68e3      	ldr	r3, [r4, #12]
    d996:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    d998:	6920      	ldr	r0, [r4, #16]
    d99a:	6028      	str	r0, [r5, #0]
		
		/// Clip Z axis so that plate cannot attempt to move out of build area
		/// other axis clipping will be added in a future revision
		if(position[Z_AXIS] > axes[Z_AXIS].max_length){
    d99c:	4630      	mov	r0, r6
    d99e:	f04f 0102 	mov.w	r1, #2
    d9a2:	f000 f8cf 	bl	db44 <Point::operator[](unsigned int)>
    d9a6:	f241 6304 	movw	r3, #5636	; 0x1604
    d9aa:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d9ae:	6802      	ldr	r2, [r0, #0]
    d9b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    d9b2:	429a      	cmp	r2, r3
    d9b4:	dd0a      	ble.n	d9cc <planner::definePosition(Point const&)+0x4c>
			position[Z_AXIS] = axes[Z_AXIS].max_length;
    d9b6:	4630      	mov	r0, r6
    d9b8:	f04f 0102 	mov.w	r1, #2
    d9bc:	f000 f8c2 	bl	db44 <Point::operator[](unsigned int)>
    d9c0:	f241 6304 	movw	r3, #5636	; 0x1604
    d9c4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d9c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    d9ca:	6003      	str	r3, [r0, #0]
		}
		
		steppers::definePosition(new_position);
    d9cc:	4620      	mov	r0, r4
    d9ce:	f001 fc29 	bl	f224 <steppers::definePosition(Point const&)>
		
		// reset speed
		for (int i = 0; i < STEPPER_COUNT; i++) {
			previous_speed[i] = 0.0;
    d9d2:	f241 6398 	movw	r3, #5784	; 0x1698
    d9d6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d9da:	f04f 0200 	mov.w	r2, #0
    d9de:	601a      	str	r2, [r3, #0]
    d9e0:	605a      	str	r2, [r3, #4]
    d9e2:	609a      	str	r2, [r3, #8]
    d9e4:	60da      	str	r2, [r3, #12]
		}
		previous_nominal_speed = 0.0;
    d9e6:	f241 6388 	movw	r3, #5768	; 0x1688
    d9ea:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d9ee:	601a      	str	r2, [r3, #0]
#ifdef CENTREPEDAL
		previous_unit_vec[0]= 0.0;
		previous_unit_vec[1]= 0.0;
		previous_unit_vec[2]= 0.0;
#endif
	}
    d9f0:	bd70      	pop	{r4, r5, r6, pc}
    d9f2:	bf00      	nop

0000d9f4 <planner::getPosition()>:

	const Point getPosition()
	{
    d9f4:	b430      	push	{r4, r5}
    d9f6:	4605      	mov	r5, r0
		return position;
    d9f8:	f241 6460 	movw	r4, #5728	; 0x1660
    d9fc:	f2c1 0400 	movt	r4, #4096	; 0x1000
    da00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    da02:	6028      	str	r0, [r5, #0]
    da04:	6069      	str	r1, [r5, #4]
    da06:	60aa      	str	r2, [r5, #8]
    da08:	60eb      	str	r3, [r5, #12]
    da0a:	6820      	ldr	r0, [r4, #0]
    da0c:	6128      	str	r0, [r5, #16]
	}
    da0e:	4628      	mov	r0, r5
    da10:	bc30      	pop	{r4, r5}
    da12:	4770      	bx	lr

0000da14 <_GLOBAL__sub_I__ZN7planner4axesE>:
}
    da14:	b5f0      	push	{r4, r5, r6, r7, lr}
    da16:	b095      	sub	sp, #84	; 0x54
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
    da18:	f241 1010 	movw	r0, #4368	; 0x1110
    da1c:	f2c1 0000 	movt	r0, #4096	; 0x1000
    da20:	f04f 0100 	mov.w	r1, #0
    da24:	f004 f90a 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
    da28:	f241 1014 	movw	r0, #4372	; 0x1114
    da2c:	f2c1 0000 	movt	r0, #4096	; 0x1000
    da30:	f04f 0101 	mov.w	r1, #1
    da34:	f004 f902 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
    da38:	f241 1018 	movw	r0, #4376	; 0x1118
    da3c:	f2c1 0000 	movt	r0, #4096	; 0x1000
    da40:	f04f 0102 	mov.w	r1, #2
    da44:	f004 f8fa 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
    da48:	f241 1024 	movw	r0, #4388	; 0x1124
    da4c:	f2c1 0000 	movt	r0, #4096	; 0x1000
    da50:	f04f 0103 	mov.w	r1, #3
    da54:	f004 f8f2 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
    da58:	f241 6000 	movw	r0, #5632	; 0x1600
    da5c:	f2c1 0000 	movt	r0, #4096	; 0x1000
    da60:	f04f 0104 	mov.w	r1, #4
    da64:	f004 f8ea 	bl	11c3c <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
    da68:	f241 645c 	movw	r4, #5724	; 0x165c
    da6c:	f2c1 0400 	movt	r4, #4096	; 0x1000
    da70:	4620      	mov	r0, r4
    da72:	f04f 01ff 	mov.w	r1, #255	; 0xff
    da76:	f004 f8e1 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    da7a:	f241 6054 	movw	r0, #5716	; 0x1654
    da7e:	f2c1 0000 	movt	r0, #4096	; 0x1000
    da82:	4621      	mov	r1, r4
    da84:	f04f 0200 	mov.w	r2, #0
    da88:	f004 faea 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
	
	PlannerAxis axes[STEPPER_COUNT];
	
	float default_acceleration;
	float minimum_planner_speed;
	Point position; // the current position (planning-wise, not bot/stepper-wise) in steps
    da8c:	f241 6060 	movw	r0, #5728	; 0x1660
    da90:	f2c1 0000 	movt	r0, #4096	; 0x1000
    da94:	f000 f846 	bl	db24 <Point::Point()>
    da98:	f241 142c 	movw	r4, #4396	; 0x112c
    da9c:	f2c1 0400 	movt	r4, #4096	; 0x1000

	const Point getPosition()
	{
		return position;
	}
}
    daa0:	f504 6598 	add.w	r5, r4, #1216	; 0x4c0
		uint32_t initial_rate;                        // The jerk-adjusted step rate at start of block  
		uint32_t final_rate;                          // The minimal rate at exit
		uint32_t acceleration_st;                     // acceleration steps/sec^2
		uint8_t flags;
		
		Block() : target() {};
    daa4:	4620      	mov	r0, r4
    daa6:	f000 f83d 	bl	db24 <Point::Point()>
    daaa:	f104 044c 	add.w	r4, r4, #76	; 0x4c
#endif
	float previous_nominal_speed; // Nominal speed of previous path line segment
	static float max_xy_jerk;
	
	/// List of accelerated moves to execute
	Block block_buffer_data[BLOCK_BUFFER_SIZE];
    daae:	42ac      	cmp	r4, r5
    dab0:	d1f8      	bne.n	daa4 <_GLOBAL__sub_I__ZN7planner4axesE+0x90>
		BufDataType* const data; /// Pointer to buffer data
	
	public:
		///@param buffer_in pre-allocaed data of <T>
		///@param size_in count in elements of buffer_in
		ReusingCircularBufferTempl(BufSizeType size_in, BufDataType* buffer_in) : head(0), tail(0), /*full(false),*/ size(size_in), size_mask(size_in-1), data(buffer_in) {
    dab2:	f241 638c 	movw	r3, #5772	; 0x168c
    dab6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    daba:	f04f 0200 	mov.w	r2, #0
    dabe:	701a      	strb	r2, [r3, #0]
    dac0:	705a      	strb	r2, [r3, #1]
    dac2:	f04f 0210 	mov.w	r2, #16
    dac6:	709a      	strb	r2, [r3, #2]
    dac8:	f04f 020f 	mov.w	r2, #15
    dacc:	70da      	strb	r2, [r3, #3]
    dace:	f241 122c 	movw	r2, #4396	; 0x112c
    dad2:	f2c1 0200 	movt	r2, #4096	; 0x1000
    dad6:	605a      	str	r2, [r3, #4]
			for (BufSizeType i = 0; i < size; i++) {
    dad8:	f04f 0400 	mov.w	r4, #0
				data[i] = BufDataType();
    dadc:	461e      	mov	r6, r3
    dade:	f04f 074c 	mov.w	r7, #76	; 0x4c
    dae2:	6875      	ldr	r5, [r6, #4]
    dae4:	fb07 5504 	mla	r5, r7, r4, r5
    dae8:	a801      	add	r0, sp, #4
    daea:	f000 f81b 	bl	db24 <Point::Point()>
    daee:	4628      	mov	r0, r5
    daf0:	a901      	add	r1, sp, #4
    daf2:	f04f 0249 	mov.w	r2, #73	; 0x49
    daf6:	f012 fd9b 	bl	20630 <memcpy>
	
	public:
		///@param buffer_in pre-allocaed data of <T>
		///@param size_in count in elements of buffer_in
		ReusingCircularBufferTempl(BufSizeType size_in, BufDataType* buffer_in) : head(0), tail(0), /*full(false),*/ size(size_in), size_mask(size_in-1), data(buffer_in) {
			for (BufSizeType i = 0; i < size; i++) {
    dafa:	f104 0401 	add.w	r4, r4, #1
    dafe:	b2e4      	uxtb	r4, r4
    db00:	78b3      	ldrb	r3, [r6, #2]
    db02:	42a3      	cmp	r3, r4
    db04:	d8ed      	bhi.n	dae2 <_GLOBAL__sub_I__ZN7planner4axesE+0xce>
	Block block_buffer_data[BLOCK_BUFFER_SIZE];
	ReusingCircularBufferTempl<Block> block_buffer(BLOCK_BUFFER_SIZE, block_buffer_data);
	
	bool accelerationON = true;

	Point tolerance_offset_T0;
    db06:	f241 50ec 	movw	r0, #5612	; 0x15ec
    db0a:	f2c1 0000 	movt	r0, #4096	; 0x1000
    db0e:	f000 f809 	bl	db24 <Point::Point()>
	Point tolerance_offset_T1;
    db12:	f241 6074 	movw	r0, #5748	; 0x1674
    db16:	f2c1 0000 	movt	r0, #4096	; 0x1000
    db1a:	f000 f803 	bl	db24 <Point::Point()>

	const Point getPosition()
	{
		return position;
	}
}
    db1e:	b015      	add	sp, #84	; 0x54
    db20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    db22:	bf00      	nop

0000db24 <Point::Point()>:
	// coordinates[0] = 0;
	// coordinates[1] = 0;
	// coordinates[2] = 0;
	// coordinates[3] = 0;
	// coordinates[4] = 0;
}
    db24:	4770      	bx	lr
    db26:	bf00      	nop

0000db28 <Point::Point(long, long, long, long, long)>:
// 	coordinates[4] = other.coordinates[4];
// #endif
// }


Point::Point(const int32_t x, const int32_t y, const int32_t z, const int32_t a, const int32_t b) {
    db28:	b410      	push	{r4}
	coordinates[0] = x;
    db2a:	6001      	str	r1, [r0, #0]
	coordinates[1] = y;
    db2c:	6042      	str	r2, [r0, #4]
	coordinates[2] = z;
    db2e:	6083      	str	r3, [r0, #8]
#if AXIS_COUNT > 3
	coordinates[3] = a;
    db30:	9b01      	ldr	r3, [sp, #4]
    db32:	60c3      	str	r3, [r0, #12]
	coordinates[4] = b;
    db34:	9b02      	ldr	r3, [sp, #8]
    db36:	6103      	str	r3, [r0, #16]
#endif
}
    db38:	bc10      	pop	{r4}
    db3a:	4770      	bx	lr

0000db3c <Point::operator[](unsigned int) const>:
#endif
}

const int32_t& Point::operator[](const unsigned int index) const {
	return coordinates[index];
}
    db3c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    db40:	4770      	bx	lr
    db42:	bf00      	nop

0000db44 <Point::operator[](unsigned int)>:

int32_t& Point::operator[](const unsigned int index) {
	return coordinates[index];
}
    db44:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    db48:	4770      	bx	lr
    db4a:	bf00      	nop

0000db4c <operator-(Point const&, Point const&)>:

/// Subtraction operator, for fast deltas
Point operator- (const Point &a, const Point &b) {
    db4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    db50:	b083      	sub	sp, #12
    db52:	4604      	mov	r4, r0
	Point c = Point(
		a.coordinates[0] - b.coordinates[0],
    db54:	f8d1 c000 	ldr.w	ip, [r1]
    db58:	f8d2 e000 	ldr.w	lr, [r2]
		a.coordinates[1] - b.coordinates[1],
    db5c:	684f      	ldr	r7, [r1, #4]
    db5e:	6856      	ldr	r6, [r2, #4]
		a.coordinates[2] - b.coordinates[2],
    db60:	688d      	ldr	r5, [r1, #8]
    db62:	6893      	ldr	r3, [r2, #8]
#if AXIS_COUNT > 3
		a.coordinates[3] - b.coordinates[3],
    db64:	f8d1 900c 	ldr.w	r9, [r1, #12]
    db68:	f8d2 800c 	ldr.w	r8, [r2, #12]
		a.coordinates[4] - b.coordinates[4]
#endif
	);
    db6c:	ebc8 0809 	rsb	r8, r8, r9
    db70:	f8cd 8000 	str.w	r8, [sp]
		a.coordinates[0] - b.coordinates[0],
		a.coordinates[1] - b.coordinates[1],
		a.coordinates[2] - b.coordinates[2],
#if AXIS_COUNT > 3
		a.coordinates[3] - b.coordinates[3],
		a.coordinates[4] - b.coordinates[4]
    db74:	6909      	ldr	r1, [r1, #16]
    db76:	6912      	ldr	r2, [r2, #16]
#endif
	);
    db78:	1a8a      	subs	r2, r1, r2
    db7a:	9201      	str	r2, [sp, #4]
    db7c:	ebce 010c 	rsb	r1, lr, ip
    db80:	1bba      	subs	r2, r7, r6
    db82:	1aeb      	subs	r3, r5, r3
    db84:	f7ff ffd0 	bl	db28 <Point::Point(long, long, long, long, long)>
	return c;
}
    db88:	4620      	mov	r0, r4
    db8a:	b003      	add	sp, #12
    db8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000db90 <operator+(Point const&, Point const&)>:

/// Addition operator, for offsets
Point operator+ (const Point &a, const Point &b) {
    db90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    db94:	b083      	sub	sp, #12
    db96:	4604      	mov	r4, r0
	Point c = Point(
		a.coordinates[0] + b.coordinates[0],
    db98:	f8d1 c000 	ldr.w	ip, [r1]
    db9c:	f8d2 e000 	ldr.w	lr, [r2]
		a.coordinates[1] + b.coordinates[1],
    dba0:	684f      	ldr	r7, [r1, #4]
    dba2:	6856      	ldr	r6, [r2, #4]
		a.coordinates[2] + b.coordinates[2],
    dba4:	688d      	ldr	r5, [r1, #8]
    dba6:	6893      	ldr	r3, [r2, #8]
#if AXIS_COUNT > 3
		a.coordinates[3] + b.coordinates[3],
    dba8:	f8d1 900c 	ldr.w	r9, [r1, #12]
    dbac:	f8d2 800c 	ldr.w	r8, [r2, #12]
		a.coordinates[4] + b.coordinates[4]
#endif
	);
    dbb0:	44c8      	add	r8, r9
    dbb2:	f8cd 8000 	str.w	r8, [sp]
		a.coordinates[0] + b.coordinates[0],
		a.coordinates[1] + b.coordinates[1],
		a.coordinates[2] + b.coordinates[2],
#if AXIS_COUNT > 3
		a.coordinates[3] + b.coordinates[3],
		a.coordinates[4] + b.coordinates[4]
    dbb6:	6909      	ldr	r1, [r1, #16]
    dbb8:	6912      	ldr	r2, [r2, #16]
#endif
	);
    dbba:	188a      	adds	r2, r1, r2
    dbbc:	9201      	str	r2, [sp, #4]
    dbbe:	eb0c 010e 	add.w	r1, ip, lr
    dbc2:	19ba      	adds	r2, r7, r6
    dbc4:	18eb      	adds	r3, r5, r3
    dbc6:	f7ff ffaf 	bl	db28 <Point::Point(long, long, long, long, long)>
	return c;
}
    dbca:	4620      	mov	r0, r4
    dbcc:	b003      	add	sp, #12
    dbce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    dbd2:	bf00      	nop

0000dbd4 <_GLOBAL__sub_I__ZN5PointC2Ev>:
		::abs(coordinates[3]),
		::abs(coordinates[4])
#endif
	);
	return absPoint;
}
    dbd4:	b508      	push	{r3, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
    dbd6:	f241 60a8 	movw	r0, #5800	; 0x16a8
    dbda:	f2c1 0000 	movt	r0, #4096	; 0x1000
    dbde:	f04f 0100 	mov.w	r1, #0
    dbe2:	f004 f82b 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
    dbe6:	f241 60ac 	movw	r0, #5804	; 0x16ac
    dbea:	f2c1 0000 	movt	r0, #4096	; 0x1000
    dbee:	f04f 0101 	mov.w	r1, #1
    dbf2:	f004 f823 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
    dbf6:	f241 60b0 	movw	r0, #5808	; 0x16b0
    dbfa:	f2c1 0000 	movt	r0, #4096	; 0x1000
    dbfe:	f04f 0102 	mov.w	r1, #2
    dc02:	f004 f81b 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
    dc06:	f241 60b4 	movw	r0, #5812	; 0x16b4
    dc0a:	f2c1 0000 	movt	r0, #4096	; 0x1000
    dc0e:	f04f 0103 	mov.w	r1, #3
    dc12:	f004 f813 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
    dc16:	f241 60b8 	movw	r0, #5816	; 0x16b8
    dc1a:	f2c1 0000 	movt	r0, #4096	; 0x1000
    dc1e:	f04f 0104 	mov.w	r1, #4
    dc22:	f004 f80b 	bl	11c3c <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
    dc26:	f241 60bc 	movw	r0, #5820	; 0x16bc
    dc2a:	f2c1 0000 	movt	r0, #4096	; 0x1000
    dc2e:	f04f 01ff 	mov.w	r1, #255	; 0xff
    dc32:	f004 f803 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    dc36:	bd08      	pop	{r3, pc}

0000dc38 <_GLOBAL__sub_I__ZN3PSUC2ERK3Pin>:
}

void PSU::turnOn(bool on) {
	// PSU pin is pulled low to turn on power supply
        psu_pin.setValue(!on);
}
    dc38:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
    dc3a:	f241 60c0 	movw	r0, #5824	; 0x16c0
    dc3e:	f2c1 0000 	movt	r0, #4096	; 0x1000
    dc42:	f04f 0100 	mov.w	r1, #0
    dc46:	f003 fff9 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
    dc4a:	f241 60c4 	movw	r0, #5828	; 0x16c4
    dc4e:	f2c1 0000 	movt	r0, #4096	; 0x1000
    dc52:	f04f 0101 	mov.w	r1, #1
    dc56:	f003 fff1 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
    dc5a:	f241 60c8 	movw	r0, #5832	; 0x16c8
    dc5e:	f2c1 0000 	movt	r0, #4096	; 0x1000
    dc62:	f04f 0102 	mov.w	r1, #2
    dc66:	f003 ffe9 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
    dc6a:	f241 60cc 	movw	r0, #5836	; 0x16cc
    dc6e:	f2c1 0000 	movt	r0, #4096	; 0x1000
    dc72:	f04f 0103 	mov.w	r1, #3
    dc76:	f003 ffe1 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
    dc7a:	f241 60d0 	movw	r0, #5840	; 0x16d0
    dc7e:	f2c1 0000 	movt	r0, #4096	; 0x1000
    dc82:	f04f 0104 	mov.w	r1, #4
    dc86:	f003 ffd9 	bl	11c3c <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
    dc8a:	f241 64d4 	movw	r4, #5844	; 0x16d4
    dc8e:	f2c1 0400 	movt	r4, #4096	; 0x1000
    dc92:	4620      	mov	r0, r4
    dc94:	f04f 01ff 	mov.w	r1, #255	; 0xff
    dc98:	f003 ffd0 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    dc9c:	f241 60d8 	movw	r0, #5848	; 0x16d8
    dca0:	f2c1 0000 	movt	r0, #4096	; 0x1000
    dca4:	4621      	mov	r1, r4
    dca6:	f04f 0200 	mov.w	r2, #0
    dcaa:	f004 f9d9 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    dcae:	bd10      	pop	{r4, pc}

0000dcb0 <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)>:
  // channel : 1,2 select PWM channels, channel 3 does nothing
 // level : blink rate for channels 1,2,  channel 3 ignores this
 // LEDs:  {bits: XXBBGGRR : BLUE: 0b110000, Green:0b1100, RED:0b11} 
 //  		ones indicate on, zeros indicate off 
 void setBlinkRate(uint8_t Channel, uint8_t rate, uint8_t LEDs)
 {
    dcb0:	b510      	push	{r4, lr}
	 uint8_t data[4] = {0 , rate, LED_REG_SELECT, 0};
     uint8_t data1[2] = {LED_REG_SELECT, 0};
     uint8_t data2[2] = {0 , rate};
 	
 	// set pwm for select channel
 	if (Channel == LED_CHANNEL1){
    dcb2:	b950      	cbnz	r0, dcca <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)+0x1a>
 		data2[0] = LED_REG_PSC0;
 		// clear past select data and apply PWM0
 		data1[1] = (LEDSelect & ~LEDs) | (LED_BLINK_PWM0 & LEDs);
    dcb4:	f241 63f8 	movw	r3, #5880	; 0x16f8
    dcb8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    dcbc:	781c      	ldrb	r4, [r3, #0]
    dcbe:	ea24 0402 	bic.w	r4, r4, r2
    dcc2:	f022 0255 	bic.w	r2, r2, #85	; 0x55
    dcc6:	4314      	orrs	r4, r2
    dcc8:	e009      	b.n	dcde <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)+0x2e>
 	}
 	else if (Channel == LED_CHANNEL2){
    dcca:	2801      	cmp	r0, #1
    dccc:	d114      	bne.n	dcf8 <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)+0x48>
 		data2[0] = LED_REG_PSC1;
 		// clear past select data and apply PWM1
 		data1[1] = (LEDSelect & ~LEDs) | (LED_BLINK_PWM1 & LEDs);
    dcce:	f241 63f8 	movw	r3, #5880	; 0x16f8
    dcd2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    dcd6:	781c      	ldrb	r4, [r3, #0]
    dcd8:	ea24 0402 	bic.w	r4, r4, r2
    dcdc:	4314      	orrs	r4, r2
 	}
 	else
 		return;
 	
//     uint8_t error = TWI_write_data(LEDAddress, data1, 2);
     _delay_us(1);
    dcde:	f04f 0001 	mov.w	r0, #1
    dce2:	f7fb feb7 	bl	9a54 <_delay_us>
//     error = TWI_write_data(LEDAddress, data2, 2);
     _delay_us(1);
    dce6:	f04f 0001 	mov.w	r0, #1
    dcea:	f7fb feb3 	bl	9a54 <_delay_us>
     
 	LEDSelect = data1[1];	
    dcee:	f241 63f8 	movw	r3, #5880	; 0x16f8
    dcf2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    dcf6:	701c      	strb	r4, [r3, #0]
    dcf8:	bd10      	pop	{r4, pc}
    dcfa:	bf00      	nop

0000dcfc <RGB_LED::toggleLEDNoPWM(bool, unsigned char)>:
 //  		ones indicate on, zeros indicate off 
 void toggleLEDNoPWM(bool enable, uint8_t LEDs)
 {
 	uint8_t data[2] = {LED_REG_SELECT, 0};
 	
 	if(enable)
    dcfc:	b150      	cbz	r0, dd14 <RGB_LED::toggleLEDNoPWM(bool, unsigned char)+0x18>
 	// clear past select data and turn LEDs full on
 		data[1] = (LEDSelect & ~LEDs) | (LED_ON & LEDs);
    dcfe:	f241 63f8 	movw	r3, #5880	; 0x16f8
    dd02:	f2c1 0300 	movt	r3, #4096	; 0x1000
    dd06:	781b      	ldrb	r3, [r3, #0]
    dd08:	ea23 0301 	bic.w	r3, r3, r1
    dd0c:	f001 0155 	and.w	r1, r1, #85	; 0x55
    dd10:	4319      	orrs	r1, r3
    dd12:	e006      	b.n	dd22 <RGB_LED::toggleLEDNoPWM(bool, unsigned char)+0x26>
 	else
 	// clear past select data and turn LEDs full off
 		data[1] = (LEDSelect & ~LEDs) | (LED_OFF & LEDs); 
    dd14:	f241 63f8 	movw	r3, #5880	; 0x16f8
    dd18:	f2c1 0300 	movt	r3, #4096	; 0x1000
    dd1c:	781b      	ldrb	r3, [r3, #0]
    dd1e:	ea23 0101 	bic.w	r1, r3, r1
 		
// 	uint8_t error = TWI_write_data(LEDAddress, data, 2);
 	
     LEDSelect = data[1];
    dd22:	f241 63f8 	movw	r3, #5880	; 0x16f8
    dd26:	f2c1 0300 	movt	r3, #4096	; 0x1000
    dd2a:	7019      	strb	r1, [r3, #0]
 }
    dd2c:	4770      	bx	lr
    dd2e:	bf00      	nop

0000dd30 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)>:
 // level : duty cycle (brightness) for channels 1,2,  
 //			for Channel 3, level is on if not zero
 // LEDs:  {bits: XXBBGGRR : BLUE: 0b110000, Red:0b1100, Green:0b11} 
 //  		ones indicate on, zeros indicate off 
 void setBrightness(uint8_t Channel, uint8_t level, uint8_t LEDs)
 {
    dd30:	b510      	push	{r4, lr}
 	uint8_t data[4] = {LED_REG_SELECT, 0, 0 , level};
     uint8_t data1[2] = {LED_REG_SELECT, 0};
     uint8_t data2[2] = {0, level};

	// set pwm for select channel
 	if (Channel == LED_CHANNEL1){
    dd32:	b950      	cbnz	r0, dd4a <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)+0x1a>
 		data2[0] = LED_REG_PWM0;
 		// clear past select data and apply PWM0
 		data1[1] = (LEDSelect & ~LEDs) | (LED_BLINK_PWM0 & LEDs);
    dd34:	f241 63f8 	movw	r3, #5880	; 0x16f8
    dd38:	f2c1 0300 	movt	r3, #4096	; 0x1000
    dd3c:	781c      	ldrb	r4, [r3, #0]
    dd3e:	ea24 0402 	bic.w	r4, r4, r2
    dd42:	f022 0255 	bic.w	r2, r2, #85	; 0x55
    dd46:	4314      	orrs	r4, r2
    dd48:	e011      	b.n	dd6e <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)+0x3e>
 	}
 	else if (Channel == LED_CHANNEL2){
    dd4a:	2801      	cmp	r0, #1
    dd4c:	d108      	bne.n	dd60 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)+0x30>
 		data2[0] = LED_REG_PWM1;
 		// clear past select data and apply PWM1
 		data1[1] = (LEDSelect & ~LEDs) | (LED_BLINK_PWM1 & LEDs);
    dd4e:	f241 63f8 	movw	r3, #5880	; 0x16f8
    dd52:	f2c1 0300 	movt	r3, #4096	; 0x1000
    dd56:	781c      	ldrb	r4, [r3, #0]
    dd58:	ea24 0402 	bic.w	r4, r4, r2
    dd5c:	4314      	orrs	r4, r2
    dd5e:	e006      	b.n	dd6e <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)+0x3e>
 	}
 	else {
 		toggleLEDNoPWM((level != 0), LEDs);
    dd60:	1c08      	adds	r0, r1, #0
    dd62:	bf18      	it	ne
    dd64:	2001      	movne	r0, #1
    dd66:	4611      	mov	r1, r2
    dd68:	f7ff ffc8 	bl	dcfc <RGB_LED::toggleLEDNoPWM(bool, unsigned char)>
 		return;
    dd6c:	bd10      	pop	{r4, pc}
 	}
 	
// 	uint8_t error = TWI_write_data(LEDAddress, data1, 2);
     _delay_us(1);
    dd6e:	f04f 0001 	mov.w	r0, #1
    dd72:	f7fb fe6f 	bl	9a54 <_delay_us>
//    error = TWI_write_data(LEDAddress, data2, 2);
     _delay_us(1);
    dd76:	f04f 0001 	mov.w	r0, #1
    dd7a:	f7fb fe6b 	bl	9a54 <_delay_us>
 	
     LEDSelect = data1[1];
    dd7e:	f241 63f8 	movw	r3, #5880	; 0x16f8
    dd82:	f2c1 0300 	movt	r3, #4096	; 0x1000
    dd86:	701c      	strb	r4, [r3, #0]
    dd88:	bd10      	pop	{r4, pc}
    dd8a:	bf00      	nop

0000dd8c <RGB_LED::clear()>:
 }
 
 void startupSequence(){
 }
     
 void clear(){
    dd8c:	b508      	push	{r3, lr}
	 
	 // clear LEDs 
    setBrightness(3, 0, LED_RED | LED_GREEN | LED_BLUE);
    dd8e:	f04f 0003 	mov.w	r0, #3
    dd92:	f04f 0100 	mov.w	r1, #0
    dd96:	f04f 023f 	mov.w	r2, #63	; 0x3f
    dd9a:	f7ff ffc9 	bl	dd30 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)>
 }
    dd9e:	bd08      	pop	{r3, pc}

0000dda0 <RGB_LED::errorSequence()>:
 
void errorSequence(){
    dda0:	b508      	push	{r3, lr}
	
	clear();
    dda2:	f7ff fff3 	bl	dd8c <RGB_LED::clear()>
     
    // set blinking red lights
    setBrightness(1, 200, LED_RED);
    dda6:	f04f 0001 	mov.w	r0, #1
    ddaa:	f04f 01c8 	mov.w	r1, #200	; 0xc8
    ddae:	f04f 0203 	mov.w	r2, #3
    ddb2:	f7ff ffbd 	bl	dd30 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)>
    setBlinkRate(1, 130, LED_RED);    
    ddb6:	f04f 0001 	mov.w	r0, #1
    ddba:	f04f 0182 	mov.w	r1, #130	; 0x82
    ddbe:	f04f 0203 	mov.w	r2, #3
    ddc2:	f7ff ff75 	bl	dcb0 <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)>
}
    ddc6:	bd08      	pop	{r3, pc}

0000ddc8 <RGB_LED::setColor(unsigned char, unsigned char, unsigned char, bool)>:
}

#define abs(X) ((X) < 0 ? -(X) : (X)) 

// wiggly: set a three value color using a 2 value driver (+ ON/OFF channel)
void setColor(uint8_t red, uint8_t green, uint8_t blue, bool clearOld){
    ddc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ddcc:	4604      	mov	r4, r0
    ddce:	460f      	mov	r7, r1
    ddd0:	4616      	mov	r6, r2

	if(clearOld){
    ddd2:	b10b      	cbz	r3, ddd8 <RGB_LED::setColor(unsigned char, unsigned char, unsigned char, bool)+0x10>
		clear();}
    ddd4:	f7ff ffda 	bl	dd8c <RGB_LED::clear()>
	int on, count;
	on = count = 0;
    uint8_t leds_on;
	
    // if any color is all on, set it to ON
    if (red == 255)
    ddd8:	2cff      	cmp	r4, #255	; 0xff
        leds_on |= LED_RED;
    ddda:	bf08      	it	eq
    dddc:	2503      	moveq	r5, #3
    if (green == 255)
    ddde:	2fff      	cmp	r7, #255	; 0xff
        leds_on |= LED_GREEN;
    dde0:	bf04      	itt	eq
    dde2:	f045 050c 	orreq.w	r5, r5, #12
    dde6:	b2ed      	uxtbeq	r5, r5
    if(blue == 255)
    dde8:	2eff      	cmp	r6, #255	; 0xff
        leds_on |= LED_BLUE;
    ddea:	bf04      	itt	eq
    ddec:	f045 0530 	orreq.w	r5, r5, #48	; 0x30
    ddf0:	b2ed      	uxtbeq	r5, r5
    
    setBrightness(3, 1, leds_on);
    ddf2:	f04f 0003 	mov.w	r0, #3
    ddf6:	f04f 0101 	mov.w	r1, #1
    ddfa:	462a      	mov	r2, r5
    ddfc:	f7ff ff98 	bl	dd30 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)>
    
    // find number of distict color values
	if(!((red == 0) || (red == 255)))
    de00:	f104 32ff 	add.w	r2, r4, #4294967295
}

#define abs(X) ((X) < 0 ? -(X) : (X)) 

// wiggly: set a three value color using a 2 value driver (+ ON/OFF channel)
void setColor(uint8_t red, uint8_t green, uint8_t blue, bool clearOld){
    de04:	b2d2      	uxtb	r2, r2
    de06:	2afd      	cmp	r2, #253	; 0xfd
    de08:	bf8c      	ite	hi
    de0a:	2200      	movhi	r2, #0
    de0c:	2201      	movls	r2, #1

	if(clearOld){
		clear();}
	
	int on, count;
	on = count = 0;
    de0e:	4613      	mov	r3, r2
    
    // find number of distict color values
	if(!((red == 0) || (red == 255)))
	{	count++;}
		
	if(!((green == 0) || (green == 255)))
    de10:	f107 35ff 	add.w	r5, r7, #4294967295
    de14:	b2ed      	uxtb	r5, r5
    de16:	2dfd      	cmp	r5, #253	; 0xfd
	{	count++;}
    de18:	bf98      	it	ls
    de1a:	1c53      	addls	r3, r2, #1
	
	if(!((blue == 0) || (blue == 255)))
    de1c:	f106 38ff 	add.w	r8, r6, #4294967295
    de20:	fa5f f888 	uxtb.w	r8, r8
    de24:	f1b8 0ffd 	cmp.w	r8, #253	; 0xfd
	{	count++;}
    de28:	bf98      	it	ls
    de2a:	3301      	addls	r3, #1
    
	
	// we have two channels for brightness, if we have two settings
	// or less, just set the channels to the requested values
	int channel = 0;
	if(count < 3){
    de2c:	2b02      	cmp	r3, #2
    de2e:	dc44      	bgt.n	deba <RGB_LED::setColor(unsigned char, unsigned char, unsigned char, bool)+0xf2>
	{	count++;}
    
	
	// we have two channels for brightness, if we have two settings
	// or less, just set the channels to the requested values
	int channel = 0;
    de30:	f04f 0900 	mov.w	r9, #0
	if(count < 3){
		if((red > 0) && (red < 255)){
    de34:	b19a      	cbz	r2, de5e <RGB_LED::setColor(unsigned char, unsigned char, unsigned char, bool)+0x96>
            setBlinkRate(channel, blinkRate, LED_RED);
    de36:	f241 63e4 	movw	r3, #5860	; 0x16e4
    de3a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    de3e:	f04f 0000 	mov.w	r0, #0
    de42:	7819      	ldrb	r1, [r3, #0]
    de44:	f04f 0203 	mov.w	r2, #3
    de48:	f7ff ff32 	bl	dcb0 <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)>
			setBrightness(channel++, red, LED_RED);
    de4c:	f04f 0000 	mov.w	r0, #0
    de50:	4621      	mov	r1, r4
    de52:	f04f 0203 	mov.w	r2, #3
    de56:	f7ff ff6b 	bl	dd30 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)>
    de5a:	f04f 0901 	mov.w	r9, #1
        }
		if((green > 0) && (green < 255))
    de5e:	2dfd      	cmp	r5, #253	; 0xfd
    de60:	d813      	bhi.n	de8a <RGB_LED::setColor(unsigned char, unsigned char, unsigned char, bool)+0xc2>
        {
            setBlinkRate(channel, blinkRate, LED_GREEN);
    de62:	fa5f f489 	uxtb.w	r4, r9
    de66:	f241 63e4 	movw	r3, #5860	; 0x16e4
    de6a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    de6e:	4620      	mov	r0, r4
    de70:	7819      	ldrb	r1, [r3, #0]
    de72:	f04f 020c 	mov.w	r2, #12
    de76:	f7ff ff1b 	bl	dcb0 <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)>
			setBrightness(channel++, green, LED_GREEN);
    de7a:	f109 0901 	add.w	r9, r9, #1
    de7e:	4620      	mov	r0, r4
    de80:	4639      	mov	r1, r7
    de82:	f04f 020c 	mov.w	r2, #12
    de86:	f7ff ff53 	bl	dd30 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)>
        }
		if((blue > 0) && (blue < 255)){
    de8a:	f1b8 0ffd 	cmp.w	r8, #253	; 0xfd
    de8e:	f200 80ac 	bhi.w	dfea <RGB_LED::setColor(unsigned char, unsigned char, unsigned char, bool)+0x222>
            setBlinkRate(channel, blinkRate, LED_BLUE);
    de92:	fa5f f989 	uxtb.w	r9, r9
    de96:	f241 63e4 	movw	r3, #5860	; 0x16e4
    de9a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    de9e:	4648      	mov	r0, r9
    dea0:	7819      	ldrb	r1, [r3, #0]
    dea2:	f04f 0230 	mov.w	r2, #48	; 0x30
    dea6:	f7ff ff03 	bl	dcb0 <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)>
			setBrightness(channel++, blue, LED_BLUE);
    deaa:	4648      	mov	r0, r9
    deac:	4631      	mov	r1, r6
    deae:	f04f 0230 	mov.w	r2, #48	; 0x30
    deb2:	f7ff ff3d 	bl	dd30 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)>
    deb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        }
	}
	// if three different values are requested, set the two closest
	// values to be equal and use the same channel 
	else {
		int distRB = abs(red - blue);
    deba:	1ba2      	subs	r2, r4, r6
    debc:	2a00      	cmp	r2, #0
    debe:	bfb8      	it	lt
    dec0:	4252      	neglt	r2, r2
		int distRG = abs(red - green);
    dec2:	1be3      	subs	r3, r4, r7
    dec4:	2b00      	cmp	r3, #0
    dec6:	bfb8      	it	lt
    dec8:	425b      	neglt	r3, r3
		int distBG = abs(blue - green);
    deca:	1bf1      	subs	r1, r6, r7
    decc:	2900      	cmp	r1, #0
    dece:	bfb8      	it	lt
    ded0:	4249      	neglt	r1, r1
		
		if(distRB < distRG){
    ded2:	429a      	cmp	r2, r3
    ded4:	da45      	bge.n	df62 <RGB_LED::setColor(unsigned char, unsigned char, unsigned char, bool)+0x19a>
			/// red and blue closest
			if(distRB < distBG){
    ded6:	428a      	cmp	r2, r1
    ded8:	da21      	bge.n	df1e <RGB_LED::setColor(unsigned char, unsigned char, unsigned char, bool)+0x156>
                setBlinkRate(0, blinkRate, LED_GREEN);
    deda:	f241 65e4 	movw	r5, #5860	; 0x16e4
    dede:	f2c1 0500 	movt	r5, #4096	; 0x1000
    dee2:	f04f 0000 	mov.w	r0, #0
    dee6:	7829      	ldrb	r1, [r5, #0]
    dee8:	f04f 020c 	mov.w	r2, #12
    deec:	f7ff fee0 	bl	dcb0 <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)>
				setBrightness(0, green, LED_GREEN);
    def0:	f04f 0000 	mov.w	r0, #0
    def4:	4639      	mov	r1, r7
    def6:	f04f 020c 	mov.w	r2, #12
    defa:	f7ff ff19 	bl	dd30 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)>
				setBlinkRate(1, blinkRate, LED_RED | LED_BLUE);
    defe:	f04f 0001 	mov.w	r0, #1
    df02:	7829      	ldrb	r1, [r5, #0]
    df04:	f04f 0233 	mov.w	r2, #51	; 0x33
    df08:	f7ff fed2 	bl	dcb0 <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)>
				setBrightness(1, red, LED_RED | LED_BLUE);
    df0c:	f04f 0001 	mov.w	r0, #1
    df10:	4621      	mov	r1, r4
    df12:	f04f 0233 	mov.w	r2, #51	; 0x33
    df16:	f7ff ff0b 	bl	dd30 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)>
    df1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			}
			/// blue and green closest
			else{
                setBlinkRate(0, blinkRate, LED_RED);
    df1e:	f241 65e4 	movw	r5, #5860	; 0x16e4
    df22:	f2c1 0500 	movt	r5, #4096	; 0x1000
    df26:	f04f 0000 	mov.w	r0, #0
    df2a:	7829      	ldrb	r1, [r5, #0]
    df2c:	f04f 0203 	mov.w	r2, #3
    df30:	f7ff febe 	bl	dcb0 <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)>
				setBrightness(0, red, LED_RED);
    df34:	f04f 0000 	mov.w	r0, #0
    df38:	4621      	mov	r1, r4
    df3a:	f04f 0203 	mov.w	r2, #3
    df3e:	f7ff fef7 	bl	dd30 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)>
				setBlinkRate(1, blinkRate, LED_GREEN |LED_BLUE);
    df42:	f04f 0001 	mov.w	r0, #1
    df46:	7829      	ldrb	r1, [r5, #0]
    df48:	f04f 023c 	mov.w	r2, #60	; 0x3c
    df4c:	f7ff feb0 	bl	dcb0 <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)>
				setBrightness(1, green, LED_GREEN | LED_BLUE);
    df50:	f04f 0001 	mov.w	r0, #1
    df54:	4639      	mov	r1, r7
    df56:	f04f 023c 	mov.w	r2, #60	; 0x3c
    df5a:	f7ff fee9 	bl	dd30 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)>
    df5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			}
		}
		else{
			/// red and green closest
			if(distRG < distBG){
    df62:	428b      	cmp	r3, r1
    df64:	da21      	bge.n	dfaa <RGB_LED::setColor(unsigned char, unsigned char, unsigned char, bool)+0x1e2>
                setBlinkRate(0, blinkRate, LED_BLUE);
    df66:	f241 64e4 	movw	r4, #5860	; 0x16e4
    df6a:	f2c1 0400 	movt	r4, #4096	; 0x1000
    df6e:	f04f 0000 	mov.w	r0, #0
    df72:	7821      	ldrb	r1, [r4, #0]
    df74:	f04f 0230 	mov.w	r2, #48	; 0x30
    df78:	f7ff fe9a 	bl	dcb0 <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)>
				setBrightness(0, blue, LED_BLUE);
    df7c:	f04f 0000 	mov.w	r0, #0
    df80:	4631      	mov	r1, r6
    df82:	f04f 0230 	mov.w	r2, #48	; 0x30
    df86:	f7ff fed3 	bl	dd30 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)>
				setBlinkRate(1, blinkRate, LED_GREEN | LED_RED);
    df8a:	f04f 0001 	mov.w	r0, #1
    df8e:	7821      	ldrb	r1, [r4, #0]
    df90:	f04f 020f 	mov.w	r2, #15
    df94:	f7ff fe8c 	bl	dcb0 <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)>
				setBrightness(1, green, LED_GREEN | LED_RED);
    df98:	f04f 0001 	mov.w	r0, #1
    df9c:	4639      	mov	r1, r7
    df9e:	f04f 020f 	mov.w	r2, #15
    dfa2:	f7ff fec5 	bl	dd30 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)>
    dfa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			}
			/// blue and green closest
			else{
                setBlinkRate(0, blinkRate, LED_RED);
    dfaa:	f241 65e4 	movw	r5, #5860	; 0x16e4
    dfae:	f2c1 0500 	movt	r5, #4096	; 0x1000
    dfb2:	f04f 0000 	mov.w	r0, #0
    dfb6:	7829      	ldrb	r1, [r5, #0]
    dfb8:	f04f 0203 	mov.w	r2, #3
    dfbc:	f7ff fe78 	bl	dcb0 <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)>
				setBrightness(0, red, LED_RED);
    dfc0:	f04f 0000 	mov.w	r0, #0
    dfc4:	4621      	mov	r1, r4
    dfc6:	f04f 0203 	mov.w	r2, #3
    dfca:	f7ff feb1 	bl	dd30 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)>
				setBlinkRate(1, blinkRate, LED_GREEN |LED_BLUE);
    dfce:	f04f 0001 	mov.w	r0, #1
    dfd2:	7829      	ldrb	r1, [r5, #0]
    dfd4:	f04f 023c 	mov.w	r2, #60	; 0x3c
    dfd8:	f7ff fe6a 	bl	dcb0 <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)>
				setBrightness(1, green, LED_GREEN | LED_BLUE);
    dfdc:	f04f 0001 	mov.w	r0, #1
    dfe0:	4639      	mov	r1, r7
    dfe2:	f04f 023c 	mov.w	r2, #60	; 0x3c
    dfe6:	f7ff fea3 	bl	dd30 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)>
    dfea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dfee:	bf00      	nop

0000dff0 <RGB_LED::setCustomColor(unsigned char, unsigned char, unsigned char)>:
	blinkRate = rate;
	setDefaultColor();
}

    // set LED color and store to EEPROM "custom" color area
void setCustomColor(uint8_t red, uint8_t green, uint8_t blue){
    dff0:	b570      	push	{r4, r5, r6, lr}
    dff2:	4605      	mov	r5, r0
    dff4:	460c      	mov	r4, r1
    dff6:	4616      	mov	r6, r2
	eeprom::setCustomColor(red, green, blue);
    dff8:	f7fb fe2c 	bl	9c54 <eeprom::setCustomColor(unsigned char, unsigned char, unsigned char)>
	setColor(red, green, blue, true);
    dffc:	4628      	mov	r0, r5
    dffe:	4621      	mov	r1, r4
    e000:	4632      	mov	r2, r6
    e002:	f04f 0301 	mov.w	r3, #1
    e006:	f7ff fedf 	bl	ddc8 <RGB_LED::setColor(unsigned char, unsigned char, unsigned char, bool)>
}
    e00a:	bd70      	pop	{r4, r5, r6, pc}

0000e00c <RGB_LED::setDefaultColor()>:
    // set blinking red lights
    setBrightness(1, 200, LED_RED);
    setBlinkRate(1, 130, LED_RED);    
}

void setDefaultColor(){
    e00c:	b510      	push	{r4, lr}
	
	clear();
    e00e:	f7ff febd 	bl	dd8c <RGB_LED::clear()>
		 
	 // set frequency to slowest and duty cyle to zero (off)
	 uint8_t LEDColor = eeprom::getEeprom8(eeprom_offsets::LED_STRIP_SETTINGS, 1);
    e012:	f44f 70a0 	mov.w	r0, #320	; 0x140
    e016:	f04f 0101 	mov.w	r1, #1
    e01a:	f003 f991 	bl	11340 <eeprom::getEeprom8(unsigned short, unsigned char)>
    e01e:	4604      	mov	r4, r0
	 uint32_t CustomColor = eeprom::getEeprom32(eeprom_offsets::LED_STRIP_SETTINGS + blink_eeprom_offsets::CUSTOM_COLOR_OFFSET, 0xFFFFFFFF);
    e020:	f44f 70a2 	mov.w	r0, #324	; 0x144
    e024:	f04f 31ff 	mov.w	r1, #4294967295
    e028:	f003 fa2e 	bl	11488 <eeprom::getEeprom32(unsigned short, unsigned long)>
    e02c:	4602      	mov	r2, r0
	
	// blink rate has to be set first in order for color to register,
	// so set blink before each color
	 
	 switch(LEDColor){
    e02e:	2c07      	cmp	r4, #7
    e030:	f200 80ab 	bhi.w	e18a <RGB_LED::setDefaultColor()+0x17e>
    e034:	e8df f004 	tbb	[pc, r4]
    e038:	77542c04 	.word	0x77542c04
    e03c:	9f8b1840 	.word	0x9f8b1840
		 case LED_DEFAULT_WHITE:
			setBlinkRate(1, blinkRate, LED_RED | LED_GREEN | LED_BLUE);
    e040:	f241 63e4 	movw	r3, #5860	; 0x16e4
    e044:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e048:	f04f 0001 	mov.w	r0, #1
    e04c:	7819      	ldrb	r1, [r3, #0]
    e04e:	f04f 023f 	mov.w	r2, #63	; 0x3f
    e052:	f7ff fe2d 	bl	dcb0 <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)>
			setBrightness(1, 100, LED_RED | LED_GREEN | LED_BLUE);	
    e056:	f04f 0001 	mov.w	r0, #1
    e05a:	f04f 0164 	mov.w	r1, #100	; 0x64
    e05e:	f04f 023f 	mov.w	r2, #63	; 0x3f
    e062:	f7ff fe65 	bl	dd30 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)>
			break;
    e066:	bd10      	pop	{r4, pc}
		 case LED_DEFAULT_BLUE:
			setBlinkRate(1, blinkRate, LED_BLUE);
    e068:	f241 63e4 	movw	r3, #5860	; 0x16e4
    e06c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e070:	f04f 0001 	mov.w	r0, #1
    e074:	7819      	ldrb	r1, [r3, #0]
    e076:	f04f 0230 	mov.w	r2, #48	; 0x30
    e07a:	f7ff fe19 	bl	dcb0 <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)>
			setBrightness(1, 100, LED_BLUE);
    e07e:	f04f 0001 	mov.w	r0, #1
    e082:	f04f 0164 	mov.w	r1, #100	; 0x64
    e086:	f04f 0230 	mov.w	r2, #48	; 0x30
    e08a:	f7ff fe51 	bl	dd30 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)>
			break;
    e08e:	bd10      	pop	{r4, pc}
		 case LED_DEFAULT_RED: 
		    setBlinkRate(1, blinkRate, LED_RED);
    e090:	f241 63e4 	movw	r3, #5860	; 0x16e4
    e094:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e098:	f04f 0001 	mov.w	r0, #1
    e09c:	7819      	ldrb	r1, [r3, #0]
    e09e:	f04f 0203 	mov.w	r2, #3
    e0a2:	f7ff fe05 	bl	dcb0 <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)>
			setBrightness(1, 100, LED_RED);
    e0a6:	f04f 0001 	mov.w	r0, #1
    e0aa:	f04f 0164 	mov.w	r1, #100	; 0x64
    e0ae:	f04f 0203 	mov.w	r2, #3
    e0b2:	f7ff fe3d 	bl	dd30 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)>
			break;
    e0b6:	bd10      	pop	{r4, pc}
		 case LED_DEFAULT_GREEN: 
			setBlinkRate(1, blinkRate, LED_GREEN);
    e0b8:	f241 63e4 	movw	r3, #5860	; 0x16e4
    e0bc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e0c0:	f04f 0001 	mov.w	r0, #1
    e0c4:	7819      	ldrb	r1, [r3, #0]
    e0c6:	f04f 020c 	mov.w	r2, #12
    e0ca:	f7ff fdf1 	bl	dcb0 <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)>
			setBrightness(1, 100, LED_GREEN);
    e0ce:	f04f 0001 	mov.w	r0, #1
    e0d2:	f04f 0164 	mov.w	r1, #100	; 0x64
    e0d6:	f04f 020c 	mov.w	r2, #12
    e0da:	f7ff fe29 	bl	dd30 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)>
			break;
    e0de:	bd10      	pop	{r4, pc}
		 case LED_DEFAULT_ORANGE:		
			setBlinkRate(1, blinkRate, LED_GREEN);
    e0e0:	f241 64e4 	movw	r4, #5860	; 0x16e4
    e0e4:	f2c1 0400 	movt	r4, #4096	; 0x1000
    e0e8:	f04f 0001 	mov.w	r0, #1
    e0ec:	7821      	ldrb	r1, [r4, #0]
    e0ee:	f04f 020c 	mov.w	r2, #12
    e0f2:	f7ff fddd 	bl	dcb0 <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)>
			setBrightness(1, 50, LED_GREEN);		
    e0f6:	f04f 0001 	mov.w	r0, #1
    e0fa:	f04f 0132 	mov.w	r1, #50	; 0x32
    e0fe:	f04f 020c 	mov.w	r2, #12
    e102:	f7ff fe15 	bl	dd30 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)>
			setBlinkRate(0, blinkRate, LED_RED);
    e106:	f04f 0000 	mov.w	r0, #0
    e10a:	7821      	ldrb	r1, [r4, #0]
    e10c:	f04f 0203 	mov.w	r2, #3
    e110:	f7ff fdce 	bl	dcb0 <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)>
			setBrightness(0, 200, LED_RED);
    e114:	f04f 0000 	mov.w	r0, #0
    e118:	f04f 01c8 	mov.w	r1, #200	; 0xc8
    e11c:	f04f 0203 	mov.w	r2, #3
    e120:	f7ff fe06 	bl	dd30 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)>
			break;
    e124:	bd10      	pop	{r4, pc}
		 case LED_DEFAULT_PINK:
			setBlinkRate(1, blinkRate, LED_BLUE| LED_RED);
    e126:	f241 63e4 	movw	r3, #5860	; 0x16e4
    e12a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e12e:	f04f 0001 	mov.w	r0, #1
    e132:	7819      	ldrb	r1, [r3, #0]
    e134:	f04f 0233 	mov.w	r2, #51	; 0x33
    e138:	f7ff fdba 	bl	dcb0 <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)>
			setBrightness(1, 70, LED_BLUE| LED_RED);
    e13c:	f04f 0001 	mov.w	r0, #1
    e140:	f04f 0146 	mov.w	r1, #70	; 0x46
    e144:	f04f 0233 	mov.w	r2, #51	; 0x33
    e148:	f7ff fdf2 	bl	dd30 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)>
			break;
    e14c:	bd10      	pop	{r4, pc}
		 case LED_DEFAULT_PURPLE:
			setBlinkRate(1, blinkRate, LED_BLUE | LED_RED);
    e14e:	f241 63e4 	movw	r3, #5860	; 0x16e4
    e152:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e156:	f04f 0001 	mov.w	r0, #1
    e15a:	7819      	ldrb	r1, [r3, #0]
    e15c:	f04f 0233 	mov.w	r2, #51	; 0x33
    e160:	f7ff fda6 	bl	dcb0 <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)>
			setBrightness(1, 200, LED_BLUE | LED_RED);
    e164:	f04f 0001 	mov.w	r0, #1
    e168:	f04f 01c8 	mov.w	r1, #200	; 0xc8
    e16c:	f04f 0233 	mov.w	r2, #51	; 0x33
    e170:	f7ff fdde 	bl	dd30 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)>
			break;
    e174:	bd10      	pop	{r4, pc}
		 case LED_DEFAULT_CUSTOM:
			setColor(CustomColor >> 24, CustomColor >> 16, CustomColor >> 8, true);
    e176:	ea4f 6010 	mov.w	r0, r0, lsr #24
    e17a:	f3c2 4107 	ubfx	r1, r2, #16, #8
    e17e:	f3c2 2207 	ubfx	r2, r2, #8, #8
    e182:	f04f 0301 	mov.w	r3, #1
    e186:	f7ff fe1f 	bl	ddc8 <RGB_LED::setColor(unsigned char, unsigned char, unsigned char, bool)>
    e18a:	bd10      	pop	{r4, pc}

0000e18c <RGB_LED::setLEDBlink(unsigned char)>:
			break;
	 }
}

void setLEDBlink(uint8_t rate){
    e18c:	b508      	push	{r3, lr}
		
	blinkRate = rate;
    e18e:	f241 63e4 	movw	r3, #5860	; 0x16e4
    e192:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e196:	7018      	strb	r0, [r3, #0]
	setDefaultColor();
    e198:	f7ff ff38 	bl	e00c <RGB_LED::setDefaultColor()>
}
    e19c:	bd08      	pop	{r3, pc}
    e19e:	bf00      	nop

0000e1a0 <RGB_LED::init()>:
namespace RGB_LED{
//	const static int LEDAddress = 0B11000100;
	uint8_t LEDSelect = 0;
	uint8_t blinkRate = 0;
 
void init(){
    e1a0:	b508      	push	{r3, lr}
	 
//	 TWI_init();
	 
	 setDefaultColor();
    e1a2:	f7ff ff33 	bl	e00c <RGB_LED::setDefaultColor()>
 }
    e1a6:	bd08      	pop	{r3, pc}

0000e1a8 <_GLOBAL__sub_I__ZN7RGB_LED9LEDSelectE>:
		}
	}	
 
}
    
}
    e1a8:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
    e1aa:	f241 60e0 	movw	r0, #5856	; 0x16e0
    e1ae:	f2c1 0000 	movt	r0, #4096	; 0x1000
    e1b2:	f04f 0100 	mov.w	r1, #0
    e1b6:	f003 fd41 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
    e1ba:	f241 60e8 	movw	r0, #5864	; 0x16e8
    e1be:	f2c1 0000 	movt	r0, #4096	; 0x1000
    e1c2:	f04f 0101 	mov.w	r1, #1
    e1c6:	f003 fd39 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
    e1ca:	f241 60f0 	movw	r0, #5872	; 0x16f0
    e1ce:	f2c1 0000 	movt	r0, #4096	; 0x1000
    e1d2:	f04f 0102 	mov.w	r1, #2
    e1d6:	f003 fd31 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
    e1da:	f241 60ec 	movw	r0, #5868	; 0x16ec
    e1de:	f2c1 0000 	movt	r0, #4096	; 0x1000
    e1e2:	f04f 0103 	mov.w	r1, #3
    e1e6:	f003 fd29 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
    e1ea:	f241 60f4 	movw	r0, #5876	; 0x16f4
    e1ee:	f2c1 0000 	movt	r0, #4096	; 0x1000
    e1f2:	f04f 0104 	mov.w	r1, #4
    e1f6:	f003 fd21 	bl	11c3c <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
    e1fa:	f241 64fc 	movw	r4, #5884	; 0x16fc
    e1fe:	f2c1 0400 	movt	r4, #4096	; 0x1000
    e202:	4620      	mov	r0, r4
    e204:	f04f 01ff 	mov.w	r1, #255	; 0xff
    e208:	f003 fd18 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    e20c:	f241 7000 	movw	r0, #5888	; 0x1700
    e210:	f2c1 0000 	movt	r0, #4096	; 0x1000
    e214:	4621      	mov	r1, r4
    e216:	f04f 0200 	mov.w	r2, #0
    e21a:	f003 ff21 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    e21e:	bd10      	pop	{r4, pc}

0000e220 <sdcard::openPartition()>:
struct fat_fs_struct* fs = 0;
struct fat_dir_struct* dd = 0;
struct fat_file_struct* file = 0;

bool openPartition()
{
    e220:	b500      	push	{lr}
    e222:	b083      	sub	sp, #12
  /* open first partition */
  partition = partition_open(sd_raw_read,
                             sd_raw_read_interval,
                             sd_raw_write,
                             sd_raw_write_interval,
                             0);
    e224:	f04f 0300 	mov.w	r3, #0
    e228:	9300      	str	r3, [sp, #0]
    e22a:	f647 40a9 	movw	r0, #31913	; 0x7ca9
    e22e:	f2c0 0000 	movt	r0, #0
    e232:	f647 5189 	movw	r1, #32137	; 0x7d89
    e236:	f2c0 0100 	movt	r1, #0
    e23a:	f248 0229 	movw	r2, #32809	; 0x8029
    e23e:	f2c0 0200 	movt	r2, #0
    e242:	f248 1365 	movw	r3, #33125	; 0x8165
    e246:	f2c0 0300 	movt	r3, #0
    e24a:	f7f9 fc13 	bl	7a74 <partition_open>
    e24e:	f241 7328 	movw	r3, #5928	; 0x1728
    e252:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e256:	6018      	str	r0, [r3, #0]
                             
  if(!partition)
    e258:	b9c8      	cbnz	r0, e28e <sdcard::openPartition()+0x6e>
    */
    partition = partition_open(sd_raw_read,
                               sd_raw_read_interval,
                               sd_raw_write,
                               sd_raw_write_interval,
                               -1);
    e25a:	f04f 33ff 	mov.w	r3, #4294967295
    e25e:	9300      	str	r3, [sp, #0]
    e260:	f647 40a9 	movw	r0, #31913	; 0x7ca9
    e264:	f2c0 0000 	movt	r0, #0
    e268:	f647 5189 	movw	r1, #32137	; 0x7d89
    e26c:	f2c0 0100 	movt	r1, #0
    e270:	f248 0229 	movw	r2, #32809	; 0x8029
    e274:	f2c0 0200 	movt	r2, #0
    e278:	f248 1365 	movw	r3, #33125	; 0x8165
    e27c:	f2c0 0300 	movt	r3, #0
    e280:	f7f9 fbf8 	bl	7a74 <partition_open>
    e284:	f241 7328 	movw	r3, #5928	; 0x1728
    e288:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e28c:	6018      	str	r0, [r3, #0]
struct partition_struct* partition = 0;
struct fat_fs_struct* fs = 0;
struct fat_dir_struct* dd = 0;
struct fat_file_struct* file = 0;

bool openPartition()
    e28e:	f241 7328 	movw	r3, #5928	; 0x1728
    e292:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e296:	6818      	ldr	r0, [r3, #0]
                               -1);
  }
  if(!partition)
    return false;
  return true;
}
    e298:	3000      	adds	r0, #0
    e29a:	bf18      	it	ne
    e29c:	2001      	movne	r0, #1
    e29e:	b003      	add	sp, #12
    e2a0:	bd00      	pop	{pc}
    e2a2:	bf00      	nop

0000e2a4 <sdcard::openFilesys()>:

bool openFilesys()
{
    e2a4:	b508      	push	{r3, lr}
  /* open file system */
  fs = fat_open(partition);
    e2a6:	f241 7328 	movw	r3, #5928	; 0x1728
    e2aa:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e2ae:	6818      	ldr	r0, [r3, #0]
    e2b0:	f7f8 ff92 	bl	71d8 <fat_open>
    e2b4:	f241 7310 	movw	r3, #5904	; 0x1710
    e2b8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e2bc:	6018      	str	r0, [r3, #0]
  return fs != 0;
}
    e2be:	3000      	adds	r0, #0
    e2c0:	bf18      	it	ne
    e2c2:	2001      	movne	r0, #1
    e2c4:	bd08      	pop	{r3, pc}
    e2c6:	bf00      	nop

0000e2c8 <sdcard::openRoot()>:

bool openRoot()
{
    e2c8:	b510      	push	{r4, lr}
    e2ca:	b08c      	sub	sp, #48	; 0x30
  // Open root directory
  struct fat_dir_entry_struct rootdirectory;
  fat_get_dir_entry_of_path(fs, "/", &rootdirectory);
    e2cc:	f241 7410 	movw	r4, #5904	; 0x1710
    e2d0:	f2c1 0400 	movt	r4, #4096	; 0x1000
    e2d4:	6820      	ldr	r0, [r4, #0]
    e2d6:	f247 61c8 	movw	r1, #30408	; 0x76c8
    e2da:	f2c0 0102 	movt	r1, #2
    e2de:	aa01      	add	r2, sp, #4
    e2e0:	f7f9 fa92 	bl	7808 <fat_get_dir_entry_of_path>
  dd = fat_open_dir(fs, &rootdirectory);
    e2e4:	6820      	ldr	r0, [r4, #0]
    e2e6:	a901      	add	r1, sp, #4
    e2e8:	f7f9 f9ac 	bl	7644 <fat_open_dir>
    e2ec:	f241 730c 	movw	r3, #5900	; 0x170c
    e2f0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e2f4:	6018      	str	r0, [r3, #0]
  return dd != 0;
}
    e2f6:	3000      	adds	r0, #0
    e2f8:	bf18      	it	ne
    e2fa:	2001      	movne	r0, #1
    e2fc:	b00c      	add	sp, #48	; 0x30
    e2fe:	bd10      	pop	{r4, pc}

0000e300 <sdcard::checkVolumeSize()>:

bool checkVolumeSize(){
    e300:	b508      	push	{r3, lr}
#if SD_RAW_SDHC 
	return true;
#else
	return fat_get_fs_size(fs) < 2147483648; //2GB
    e302:	f241 7310 	movw	r3, #5904	; 0x1710
    e306:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e30a:	6818      	ldr	r0, [r3, #0]
    e30c:	f7f9 fba4 	bl	7a58 <fat_get_fs_size>
#endif
}
    e310:	ea6f 0000 	mvn.w	r0, r0
    e314:	ea4f 70d0 	mov.w	r0, r0, lsr #31
    e318:	bd08      	pop	{r3, pc}
    e31a:	bf00      	nop

0000e31c <sdcard::directoryNextEntry(char*, unsigned char, unsigned char*)>:
  }
  fat_reset_dir(dd);
  return SD_SUCCESS;
}

SdErrorCode directoryNextEntry(char* buffer, uint8_t bufsize, uint8_t * fileLength) {
    e31c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e320:	b08c      	sub	sp, #48	; 0x30
    e322:	4604      	mov	r4, r0
    e324:	4690      	mov	r8, r2
    e326:	f04f 0605 	mov.w	r6, #5
	// of signalling we've gone through the directory, so we discard these
	// entries.  We have an upper limit on the number of entries to cycle
	// through, so we don't potentially lock up here.
	uint8_t tries = 5;
	while (tries) {
		if (fat_read_dir(dd, &entry)) {
    e32a:	f241 770c 	movw	r7, #5900	; 0x170c
    e32e:	f2c1 0700 	movt	r7, #4096	; 0x1000
			int i;
			for (i = 0; (i < bufsize-1) && entry.long_name[i] != 0; i++) {
    e332:	f101 35ff 	add.w	r5, r1, #4294967295
	// of signalling we've gone through the directory, so we discard these
	// entries.  We have an upper limit on the number of entries to cycle
	// through, so we don't potentially lock up here.
	uint8_t tries = 5;
	while (tries) {
		if (fat_read_dir(dd, &entry)) {
    e336:	6838      	ldr	r0, [r7, #0]
    e338:	a901      	add	r1, sp, #4
    e33a:	f7f9 f9eb 	bl	7714 <fat_read_dir>
    e33e:	b1c0      	cbz	r0, e372 <sdcard::directoryNextEntry(char*, unsigned char, unsigned char*)+0x56>
    e340:	f04f 0300 	mov.w	r3, #0
			int i;
			for (i = 0; (i < bufsize-1) && entry.long_name[i] != 0; i++) {
    e344:	42ab      	cmp	r3, r5
    e346:	da1c      	bge.n	e382 <sdcard::directoryNextEntry(char*, unsigned char, unsigned char*)+0x66>
    e348:	aa01      	add	r2, sp, #4
    e34a:	5c9a      	ldrb	r2, [r3, r2]
    e34c:	b1da      	cbz	r2, e386 <sdcard::directoryNextEntry(char*, unsigned char, unsigned char*)+0x6a>
				buffer[i] = entry.long_name[i];
    e34e:	aa01      	add	r2, sp, #4
    e350:	5cd2      	ldrb	r2, [r2, r3]
    e352:	54e2      	strb	r2, [r4, r3]
	// through, so we don't potentially lock up here.
	uint8_t tries = 5;
	while (tries) {
		if (fat_read_dir(dd, &entry)) {
			int i;
			for (i = 0; (i < bufsize-1) && entry.long_name[i] != 0; i++) {
    e354:	f103 0301 	add.w	r3, r3, #1
    e358:	e7f4      	b.n	e344 <sdcard::directoryNextEntry(char*, unsigned char, unsigned char*)+0x28>
				buffer[i] = entry.long_name[i];
			}
			buffer[i] = 0;
			if (i > 0) {
				if(fileLength != 0)
    e35a:	f1b8 0f00 	cmp.w	r8, #0
    e35e:	d00b      	beq.n	e378 <sdcard::directoryNextEntry(char*, unsigned char, unsigned char*)+0x5c>
					*fileLength = i;
    e360:	f888 3000 	strb.w	r3, [r8]
    e364:	e008      	b.n	e378 <sdcard::directoryNextEntry(char*, unsigned char, unsigned char*)+0x5c>
    e366:	f106 36ff 	add.w	r6, r6, #4294967295
    e36a:	b2f6      	uxtb	r6, r6
	// necessarily broken in of itself, but a null name is also our way
	// of signalling we've gone through the directory, so we discard these
	// entries.  We have an upper limit on the number of entries to cycle
	// through, so we don't potentially lock up here.
	uint8_t tries = 5;
	while (tries) {
    e36c:	2e00      	cmp	r6, #0
    e36e:	d1e2      	bne.n	e336 <sdcard::directoryNextEntry(char*, unsigned char, unsigned char*)+0x1a>
    e370:	e002      	b.n	e378 <sdcard::directoryNextEntry(char*, unsigned char, unsigned char*)+0x5c>
				break;
			} else {
				tries--;
			}
		} else {
			buffer[0] = 0;
    e372:	f04f 0300 	mov.w	r3, #0
    e376:	7023      	strb	r3, [r4, #0]
			break;
		}
	}
	return SD_SUCCESS;
}
    e378:	f04f 0000 	mov.w	r0, #0
    e37c:	b00c      	add	sp, #48	; 0x30
    e37e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	// through, so we don't potentially lock up here.
	uint8_t tries = 5;
	while (tries) {
		if (fat_read_dir(dd, &entry)) {
			int i;
			for (i = 0; (i < bufsize-1) && entry.long_name[i] != 0; i++) {
    e382:	461a      	mov	r2, r3
    e384:	e000      	b.n	e388 <sdcard::directoryNextEntry(char*, unsigned char, unsigned char*)+0x6c>
    e386:	461a      	mov	r2, r3
				buffer[i] = entry.long_name[i];
			}
			buffer[i] = 0;
    e388:	f04f 0100 	mov.w	r1, #0
    e38c:	54a1      	strb	r1, [r4, r2]
			if (i > 0) {
    e38e:	428a      	cmp	r2, r1
    e390:	dde9      	ble.n	e366 <sdcard::directoryNextEntry(char*, unsigned char, unsigned char*)+0x4a>
    e392:	e7e2      	b.n	e35a <sdcard::directoryNextEntry(char*, unsigned char, unsigned char*)+0x3e>

0000e394 <sdcard::findFileInDir(char const*, fat_dir_entry_struct*)>:
	}
	return SD_SUCCESS;
}

bool findFileInDir(const char* name, struct fat_dir_entry_struct* dir_entry)
{
    e394:	b570      	push	{r4, r5, r6, lr}
    e396:	4606      	mov	r6, r0
    e398:	460c      	mov	r4, r1
  while(fat_read_dir(dd, dir_entry))
    e39a:	f241 750c 	movw	r5, #5900	; 0x170c
    e39e:	f2c1 0500 	movt	r5, #4096	; 0x1000
    e3a2:	e00e      	b.n	e3c2 <sdcard::findFileInDir(char const*, fat_dir_entry_struct*)+0x2e>
  {
    if(strcmp(dir_entry->long_name, name) == 0)
    e3a4:	4620      	mov	r0, r4
    e3a6:	4631      	mov	r1, r6
    e3a8:	f012 feac 	bl	21104 <strcmp>
    e3ac:	b948      	cbnz	r0, e3c2 <sdcard::findFileInDir(char const*, fat_dir_entry_struct*)+0x2e>
    {
      fat_reset_dir(dd);
    e3ae:	f241 730c 	movw	r3, #5900	; 0x170c
    e3b2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e3b6:	6818      	ldr	r0, [r3, #0]
    e3b8:	f7f9 f9a0 	bl	76fc <fat_reset_dir>
      return true;
    e3bc:	f04f 0001 	mov.w	r0, #1
    e3c0:	bd70      	pop	{r4, r5, r6, pc}
	return SD_SUCCESS;
}

bool findFileInDir(const char* name, struct fat_dir_entry_struct* dir_entry)
{
  while(fat_read_dir(dd, dir_entry))
    e3c2:	6828      	ldr	r0, [r5, #0]
    e3c4:	4621      	mov	r1, r4
    e3c6:	f7f9 f9a5 	bl	7714 <fat_read_dir>
    e3ca:	2800      	cmp	r0, #0
    e3cc:	d1ea      	bne.n	e3a4 <sdcard::findFileInDir(char const*, fat_dir_entry_struct*)+0x10>
      fat_reset_dir(dd);
      return true;
    }
  }
  return false;
}
    e3ce:	bd70      	pop	{r4, r5, r6, pc}

0000e3d0 <sdcard::openFile(char const*, fat_file_struct**)>:

bool openFile(const char* name, struct fat_file_struct** file)
{
    e3d0:	b510      	push	{r4, lr}
    e3d2:	b08c      	sub	sp, #48	; 0x30
    e3d4:	460c      	mov	r4, r1
  struct fat_dir_entry_struct fileEntry;
  if(!findFileInDir(name, &fileEntry))
    e3d6:	a901      	add	r1, sp, #4
    e3d8:	f7ff ffdc 	bl	e394 <sdcard::findFileInDir(char const*, fat_dir_entry_struct*)>
    e3dc:	b158      	cbz	r0, e3f6 <sdcard::openFile(char const*, fat_file_struct**)+0x26>
  {
    return false;
  }

  *file = fat_open_file(fs, &fileEntry);
    e3de:	f241 7310 	movw	r3, #5904	; 0x1710
    e3e2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e3e6:	6818      	ldr	r0, [r3, #0]
    e3e8:	a901      	add	r1, sp, #4
    e3ea:	f7f8 ffaf 	bl	734c <fat_open_file>
    e3ee:	6020      	str	r0, [r4, #0]
  return true;
    e3f0:	f04f 0001 	mov.w	r0, #1
    e3f4:	e001      	b.n	e3fa <sdcard::openFile(char const*, fat_file_struct**)+0x2a>
bool openFile(const char* name, struct fat_file_struct** file)
{
  struct fat_dir_entry_struct fileEntry;
  if(!findFileInDir(name, &fileEntry))
  {
    return false;
    e3f6:	f04f 0000 	mov.w	r0, #0
  }

  *file = fat_open_file(fs, &fileEntry);
  return true;
}
    e3fa:	b00c      	add	sp, #48	; 0x30
    e3fc:	bd10      	pop	{r4, pc}
    e3fe:	bf00      	nop

0000e400 <sdcard::getFileSize()>:

uint32_t getFileSize(){
    e400:	b508      	push	{r3, lr}
	return fat_get_file_size(file);
    e402:	f241 732c 	movw	r3, #5932	; 0x172c
    e406:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e40a:	6818      	ldr	r0, [r3, #0]
    e40c:	f7f9 fb22 	bl	7a54 <fat_get_file_size>
}
    e410:	bd08      	pop	{r3, pc}
    e412:	bf00      	nop

0000e414 <sdcard::deleteFile(char*)>:

bool deleteFile(char *name)
{
    e414:	b500      	push	{lr}
    e416:	b08d      	sub	sp, #52	; 0x34
  struct fat_dir_entry_struct fileEntry;
  if(!findFileInDir(name, &fileEntry))
    e418:	a901      	add	r1, sp, #4
    e41a:	f7ff ffbb 	bl	e394 <sdcard::findFileInDir(char const*, fat_dir_entry_struct*)>
    e41e:	b150      	cbz	r0, e436 <sdcard::deleteFile(char*)+0x22>
  {
    return false;
  }
  fat_delete_file(fs, &fileEntry);
    e420:	f241 7310 	movw	r3, #5904	; 0x1710
    e424:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e428:	6818      	ldr	r0, [r3, #0]
    e42a:	a901      	add	r1, sp, #4
    e42c:	f7f9 faca 	bl	79c4 <fat_delete_file>
  return true;
    e430:	f04f 0001 	mov.w	r0, #1
    e434:	e001      	b.n	e43a <sdcard::deleteFile(char*)+0x26>
bool deleteFile(char *name)
{
  struct fat_dir_entry_struct fileEntry;
  if(!findFileInDir(name, &fileEntry))
  {
    return false;
    e436:	f04f 0000 	mov.w	r0, #0
  }
  fat_delete_file(fs, &fileEntry);
  return true;
}
    e43a:	b00d      	add	sp, #52	; 0x34
    e43c:	bd00      	pop	{pc}
    e43e:	bf00      	nop

0000e440 <sdcard::createFile(char*)>:

bool createFile(char *name)
{
    e440:	b500      	push	{lr}
    e442:	b08d      	sub	sp, #52	; 0x34
    e444:	4601      	mov	r1, r0
  struct fat_dir_entry_struct fileEntry;
  return fat_create_file(dd, name, &fileEntry) != 0;
    e446:	f241 730c 	movw	r3, #5900	; 0x170c
    e44a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e44e:	6818      	ldr	r0, [r3, #0]
    e450:	aa01      	add	r2, sp, #4
    e452:	f7f9 fa67 	bl	7924 <fat_create_file>
}
    e456:	3000      	adds	r0, #0
    e458:	bf18      	it	ne
    e45a:	2001      	movne	r0, #1
    e45c:	b00d      	add	sp, #52	; 0x34
    e45e:	bd00      	pop	{pc}

0000e460 <sdcard::isPlaying()>:
bool capturing = false;
bool playing = false;
uint32_t capturedBytes = 0L;

bool isPlaying() {
	return playing;
    e460:	f241 7324 	movw	r3, #5924	; 0x1724
    e464:	f2c1 0300 	movt	r3, #4096	; 0x1000
}
    e468:	7818      	ldrb	r0, [r3, #0]
    e46a:	4770      	bx	lr

0000e46c <sdcard::isCapturing()>:

bool isCapturing() {
	return capturing;
    e46c:	f241 7344 	movw	r3, #5956	; 0x1744
    e470:	f2c1 0300 	movt	r3, #4096	; 0x1000
}
    e474:	7818      	ldrb	r0, [r3, #0]
    e476:	4770      	bx	lr

0000e478 <sdcard::capturePacket(Packet const&)>:
  capturing = true;
  return SD_SUCCESS;
}

void capturePacket(const Packet& packet)
{
    e478:	b510      	push	{r4, lr}
    e47a:	4604      	mov	r4, r0
	if (file == 0) return;
    e47c:	f241 732c 	movw	r3, #5932	; 0x172c
    e480:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e484:	6818      	ldr	r0, [r3, #0]
    e486:	b160      	cbz	r0, e4a2 <sdcard::capturePacket(Packet const&)+0x2a>
	void error(uint8_t error_code_in) {
		reset();
		error_code = error_code_in;
	}
public:
	uint8_t getLength() const { return length; }
    e488:	7822      	ldrb	r2, [r4, #0]
	// Casting away volatile is OK in this instance; we know where the
	// data is located and that fat_write_file isn't caching
	fat_write_file(file, (uint8_t*)packet.getData(), packet.getLength());
    e48a:	f104 0102 	add.w	r1, r4, #2
    e48e:	f7f9 f825 	bl	74dc <fat_write_file>
    e492:	7821      	ldrb	r1, [r4, #0]
	capturedBytes += packet.getLength();
    e494:	f241 7348 	movw	r3, #5960	; 0x1748
    e498:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e49c:	681a      	ldr	r2, [r3, #0]
    e49e:	188a      	adds	r2, r1, r2
    e4a0:	601a      	str	r2, [r3, #0]
    e4a2:	bd10      	pop	{r4, pc}

0000e4a4 <sdcard::finishCapture()>:
}


uint32_t finishCapture()
{
    e4a4:	b508      	push	{r3, lr}
  if (capturing) {
    e4a6:	f241 7344 	movw	r3, #5956	; 0x1744
    e4aa:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e4ae:	781b      	ldrb	r3, [r3, #0]
    e4b0:	b1ab      	cbz	r3, e4de <sdcard::finishCapture()+0x3a>
    if (file != 0) {
    e4b2:	f241 732c 	movw	r3, #5932	; 0x172c
    e4b6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e4ba:	6818      	ldr	r0, [r3, #0]
    e4bc:	b118      	cbz	r0, e4c6 <sdcard::finishCapture()+0x22>
    	fat_close_file(file);
    e4be:	f7f8 ff8b 	bl	73d8 <fat_close_file>
    	sd_raw_sync();
    e4c2:	f7f9 fbcd 	bl	7c60 <sd_raw_sync>
    }
    file = 0;
    e4c6:	f241 732c 	movw	r3, #5932	; 0x172c
    e4ca:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e4ce:	f04f 0200 	mov.w	r2, #0
    e4d2:	601a      	str	r2, [r3, #0]
    capturing = false;
    e4d4:	f241 7344 	movw	r3, #5956	; 0x1744
    e4d8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e4dc:	701a      	strb	r2, [r3, #0]
  }
  //reset();
  return capturedBytes;
    e4de:	f241 7348 	movw	r3, #5960	; 0x1748
    e4e2:	f2c1 0300 	movt	r3, #4096	; 0x1000
}
    e4e6:	6818      	ldr	r0, [r3, #0]
    e4e8:	bd08      	pop	{r3, pc}
    e4ea:	bf00      	nop

0000e4ec <sdcard::fetchNextByte()>:

uint8_t next_byte;
bool has_more;
bool retry;

void fetchNextByte() {
    e4ec:	b508      	push	{r3, lr}
  if(sd_raw_available()){
    e4ee:	f7f9 fba7 	bl	7c40 <sd_raw_available>
    e4f2:	b1b8      	cbz	r0, e524 <sdcard::fetchNextByte()+0x38>
	int16_t read = fat_read_file(file, &next_byte, 1);
    e4f4:	f241 732c 	movw	r3, #5932	; 0x172c
    e4f8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e4fc:	6818      	ldr	r0, [r3, #0]
    e4fe:	f241 7125 	movw	r1, #5925	; 0x1725
    e502:	f2c1 0100 	movt	r1, #4096	; 0x1000
    e506:	f04f 0201 	mov.w	r2, #1
    e50a:	f7f8 ff6b 	bl	73e4 <fat_read_file>
	//retry = read < 0;
	has_more = read > 0;
    e50e:	f241 733c 	movw	r3, #5948	; 0x173c
    e512:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e516:	b200      	sxth	r0, r0
    e518:	2800      	cmp	r0, #0
    e51a:	bfd4      	ite	le
    e51c:	2000      	movle	r0, #0
    e51e:	2001      	movgt	r0, #1
    e520:	7018      	strb	r0, [r3, #0]
    e522:	bd08      	pop	{r3, pc}
  }else{
	Motherboard::getBoard().errorResponse("SD Card Removed", true);
    e524:	f640 509c 	movw	r0, #3484	; 0xd9c
    e528:	f2c1 0000 	movt	r0, #4096	; 0x1000
    e52c:	f247 61cc 	movw	r1, #30412	; 0x76cc
    e530:	f2c0 0102 	movt	r1, #2
    e534:	f04f 0201 	mov.w	r2, #1
    e538:	f7fd fb84 	bl	bc44 <Motherboard::errorResponse(char*, bool)>
	has_more = 0;
    e53c:	f241 733c 	movw	r3, #5948	; 0x173c
    e540:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e544:	f04f 0200 	mov.w	r2, #0
    e548:	701a      	strb	r2, [r3, #0]
	retry = 0;
    e54a:	f241 7318 	movw	r3, #5912	; 0x1718
    e54e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e552:	701a      	strb	r2, [r3, #0]
    e554:	bd08      	pop	{r3, pc}
    e556:	bf00      	nop

0000e558 <sdcard::playbackHasNext()>:
bool playbackRetry() {
	return retry;
}

bool playbackHasNext() {
  return has_more;// || retry;
    e558:	f241 733c 	movw	r3, #5948	; 0x173c
    e55c:	f2c1 0300 	movt	r3, #4096	; 0x1000
}
    e560:	7818      	ldrb	r0, [r3, #0]
    e562:	4770      	bx	lr

0000e564 <sdcard::playbackNext()>:

uint8_t playbackNext() {
    e564:	b510      	push	{r4, lr}
  uint8_t rv = next_byte;
    e566:	f241 7325 	movw	r3, #5925	; 0x1725
    e56a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e56e:	781c      	ldrb	r4, [r3, #0]
  fetchNextByte();
    e570:	f7ff ffbc 	bl	e4ec <sdcard::fetchNextByte()>
  return rv;
}
    e574:	4620      	mov	r0, r4
    e576:	bd10      	pop	{r4, pc}

0000e578 <sdcard::finishPlayback()>:
void playbackRewind(uint8_t bytes) {
  int32_t offset = -((int32_t)bytes);
  fat_seek_file(file, &offset, FAT_SEEK_CUR);
}

void finishPlayback() {
    e578:	b508      	push	{r3, lr}
  playing = false;
    e57a:	f241 7324 	movw	r3, #5924	; 0x1724
    e57e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e582:	f04f 0200 	mov.w	r2, #0
    e586:	701a      	strb	r2, [r3, #0]
  if (file != 0) {
    e588:	f241 732c 	movw	r3, #5932	; 0x172c
    e58c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e590:	6818      	ldr	r0, [r3, #0]
    e592:	b118      	cbz	r0, e59c <sdcard::finishPlayback()+0x24>
	  fat_close_file(file);
    e594:	f7f8 ff20 	bl	73d8 <fat_close_file>
	  sd_raw_sync();
    e598:	f7f9 fb62 	bl	7c60 <sd_raw_sync>
  }
  file = 0;
    e59c:	f241 732c 	movw	r3, #5932	; 0x172c
    e5a0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e5a4:	f04f 0200 	mov.w	r2, #0
    e5a8:	601a      	str	r2, [r3, #0]
}
    e5aa:	bd08      	pop	{r3, pc}

0000e5ac <sdcard::reset()>:


void reset() {
    e5ac:	b508      	push	{r3, lr}
	if (playing)
    e5ae:	f241 7324 	movw	r3, #5924	; 0x1724
    e5b2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e5b6:	781b      	ldrb	r3, [r3, #0]
    e5b8:	b10b      	cbz	r3, e5be <sdcard::reset()+0x12>
		finishPlayback();
    e5ba:	f7ff ffdd 	bl	e578 <sdcard::finishPlayback()>
	if (capturing)
    e5be:	f241 7344 	movw	r3, #5956	; 0x1744
    e5c2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e5c6:	781b      	ldrb	r3, [r3, #0]
    e5c8:	b10b      	cbz	r3, e5ce <sdcard::reset()+0x22>
		finishCapture();
    e5ca:	f7ff ff6b 	bl	e4a4 <sdcard::finishCapture()>
	if (dd != 0) {
    e5ce:	f241 730c 	movw	r3, #5900	; 0x170c
    e5d2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e5d6:	6818      	ldr	r0, [r3, #0]
    e5d8:	b140      	cbz	r0, e5ec <sdcard::reset()+0x40>
		fat_close_dir(dd);
    e5da:	f7f9 f889 	bl	76f0 <fat_close_dir>
		dd = 0;
    e5de:	f241 730c 	movw	r3, #5900	; 0x170c
    e5e2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e5e6:	f04f 0200 	mov.w	r2, #0
    e5ea:	601a      	str	r2, [r3, #0]
	}
	if (fs != 0) {
    e5ec:	f241 7310 	movw	r3, #5904	; 0x1710
    e5f0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e5f4:	6818      	ldr	r0, [r3, #0]
    e5f6:	b140      	cbz	r0, e60a <sdcard::reset()+0x5e>
		fat_close(fs);
    e5f8:	f7f8 fea2 	bl	7340 <fat_close>
		fs = 0;
    e5fc:	f241 7310 	movw	r3, #5904	; 0x1710
    e600:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e604:	f04f 0200 	mov.w	r2, #0
    e608:	601a      	str	r2, [r3, #0]
	}
	if (partition != 0) {
    e60a:	f241 7328 	movw	r3, #5928	; 0x1728
    e60e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e612:	6818      	ldr	r0, [r3, #0]
    e614:	b140      	cbz	r0, e628 <sdcard::reset()+0x7c>
		partition_close(partition);
    e616:	f7f9 faa9 	bl	7b6c <partition_close>
		partition = 0;
    e61a:	f241 7328 	movw	r3, #5928	; 0x1728
    e61e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e622:	f04f 0200 	mov.w	r2, #0
    e626:	601a      	str	r2, [r3, #0]
    e628:	bd08      	pop	{r3, pc}
    e62a:	bf00      	nop

0000e62c <sdcard::initCard()>:
	return fat_get_fs_size(fs) < 2147483648; //2GB
#endif
}


SdErrorCode initCard() {
    e62c:	b508      	push	{r3, lr}
	if (!sd_raw_init()) {;
    e62e:	f7f9 fbf1 	bl	7e14 <sd_raw_init>
    e632:	b960      	cbnz	r0, e64e <sdcard::initCard()+0x22>
		if (!sd_raw_available()) {
    e634:	f7f9 fb04 	bl	7c40 <sd_raw_available>
    e638:	b920      	cbnz	r0, e644 <sdcard::initCard()+0x18>
			reset();
    e63a:	f7ff ffb7 	bl	e5ac <sdcard::reset()>
			return SD_ERR_NO_CARD_PRESENT;
    e63e:	f04f 0001 	mov.w	r0, #1
    e642:	bd08      	pop	{r3, pc}
		} else {
			reset();
    e644:	f7ff ffb2 	bl	e5ac <sdcard::reset()>
			return SD_ERR_INIT_FAILED;
    e648:	f04f 0002 	mov.w	r0, #2
    e64c:	bd08      	pop	{r3, pc}
		}
	} else if (!openPartition()) {
    e64e:	f7ff fde7 	bl	e220 <sdcard::openPartition()>
    e652:	b920      	cbnz	r0, e65e <sdcard::initCard()+0x32>
		reset();
    e654:	f7ff ffaa 	bl	e5ac <sdcard::reset()>
		return SD_ERR_PARTITION_READ;
    e658:	f04f 0003 	mov.w	r0, #3
    e65c:	bd08      	pop	{r3, pc}
	} else if (!openFilesys()) {
    e65e:	f7ff fe21 	bl	e2a4 <sdcard::openFilesys()>
    e662:	b920      	cbnz	r0, e66e <sdcard::initCard()+0x42>
		reset();
    e664:	f7ff ffa2 	bl	e5ac <sdcard::reset()>
		return SD_ERR_OPEN_FILESYSTEM;
    e668:	f04f 0004 	mov.w	r0, #4
    e66c:	bd08      	pop	{r3, pc}
	} else if (!openRoot()) {
    e66e:	f7ff fe2b 	bl	e2c8 <sdcard::openRoot()>
    e672:	b920      	cbnz	r0, e67e <sdcard::initCard()+0x52>
		reset();
    e674:	f7ff ff9a 	bl	e5ac <sdcard::reset()>
		return SD_ERR_NO_ROOT;
    e678:	f04f 0005 	mov.w	r0, #5
    e67c:	bd08      	pop	{r3, pc}
	} else if (!checkVolumeSize()){
    e67e:	f7ff fe3f 	bl	e300 <sdcard::checkVolumeSize()>
    e682:	b920      	cbnz	r0, e68e <sdcard::initCard()+0x62>
		reset();
    e684:	f7ff ff92 	bl	e5ac <sdcard::reset()>
		return SD_ERR_VOLUME_TOO_BIG;
    e688:	f04f 000a 	mov.w	r0, #10
    e68c:	bd08      	pop	{r3, pc}
		
	/* we need to keep locked as the last check */
	} else if (sd_raw_locked()) {
    e68e:	f7f9 fadf 	bl	7c50 <sd_raw_locked>
		return SD_ERR_CARD_LOCKED;
    e692:	2800      	cmp	r0, #0
    e694:	bf14      	ite	ne
    e696:	2006      	movne	r0, #6
    e698:	2000      	moveq	r0, #0
	}
	return SD_SUCCESS;
}
    e69a:	bd08      	pop	{r3, pc}

0000e69c <sdcard::startPlayback(char*)>:
  uint8_t rv = next_byte;
  fetchNextByte();
  return rv;
}

SdErrorCode startPlayback(char* filename) {
    e69c:	b510      	push	{r4, lr}
    e69e:	4604      	mov	r4, r0
  reset();
    e6a0:	f7ff ff84 	bl	e5ac <sdcard::reset()>
  SdErrorCode result = initCard();
    e6a4:	f7ff ffc2 	bl	e62c <sdcard::initCard()>
  /* for playback it's ok if the card is locked */
  if (result != SD_SUCCESS && result != SD_ERR_CARD_LOCKED) {
    e6a8:	4603      	mov	r3, r0
    e6aa:	1f82      	subs	r2, r0, #6
    e6ac:	bf18      	it	ne
    e6ae:	2201      	movne	r2, #1
    e6b0:	2800      	cmp	r0, #0
    e6b2:	bf0c      	ite	eq
    e6b4:	2200      	moveq	r2, #0
    e6b6:	f002 0201 	andne.w	r2, r2, #1
    e6ba:	bb1a      	cbnz	r2, e704 <sdcard::startPlayback(char*)+0x68>
    return result;
  }
  capturedBytes = 0L;
    e6bc:	f241 7348 	movw	r3, #5960	; 0x1748
    e6c0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e6c4:	601a      	str	r2, [r3, #0]
  file = 0;
    e6c6:	f241 712c 	movw	r1, #5932	; 0x172c
    e6ca:	f2c1 0100 	movt	r1, #4096	; 0x1000
    e6ce:	600a      	str	r2, [r1, #0]
  if (!openFile(filename, &file) || file == 0) {
    e6d0:	4620      	mov	r0, r4
    e6d2:	f7ff fe7d 	bl	e3d0 <sdcard::openFile(char const*, fat_file_struct**)>
    return SD_ERR_FILE_NOT_FOUND;
    e6d6:	f04f 0307 	mov.w	r3, #7
  if (result != SD_SUCCESS && result != SD_ERR_CARD_LOCKED) {
    return result;
  }
  capturedBytes = 0L;
  file = 0;
  if (!openFile(filename, &file) || file == 0) {
    e6da:	b198      	cbz	r0, e704 <sdcard::startPlayback(char*)+0x68>
    e6dc:	f241 732c 	movw	r3, #5932	; 0x172c
    e6e0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e6e4:	681b      	ldr	r3, [r3, #0]
    e6e6:	b15b      	cbz	r3, e700 <sdcard::startPlayback(char*)+0x64>
    return SD_ERR_FILE_NOT_FOUND;
  }
  playing = true;
    e6e8:	f241 7324 	movw	r3, #5924	; 0x1724
    e6ec:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e6f0:	f04f 0201 	mov.w	r2, #1
    e6f4:	701a      	strb	r2, [r3, #0]
  fetchNextByte();
    e6f6:	f7ff fef9 	bl	e4ec <sdcard::fetchNextByte()>
  return SD_SUCCESS;
    e6fa:	f04f 0300 	mov.w	r3, #0
    e6fe:	e001      	b.n	e704 <sdcard::startPlayback(char*)+0x68>
    return result;
  }
  capturedBytes = 0L;
  file = 0;
  if (!openFile(filename, &file) || file == 0) {
    return SD_ERR_FILE_NOT_FOUND;
    e700:	f04f 0307 	mov.w	r3, #7
  }
  playing = true;
  fetchNextByte();
  return SD_SUCCESS;
}
    e704:	4618      	mov	r0, r3
    e706:	bd10      	pop	{r4, pc}

0000e708 <sdcard::startCapture(char*)>:
bool isCapturing() {
	return capturing;
}

SdErrorCode startCapture(char* filename)
{
    e708:	b538      	push	{r3, r4, r5, lr}
    e70a:	4605      	mov	r5, r0
  reset();
    e70c:	f7ff ff4e 	bl	e5ac <sdcard::reset()>
  SdErrorCode result = initCard();
    e710:	f7ff ff8c 	bl	e62c <sdcard::initCard()>
  if (result != SD_SUCCESS) {
    e714:	4604      	mov	r4, r0
    e716:	bb80      	cbnz	r0, e77a <sdcard::startCapture(char*)+0x72>
    return result;
  }
  capturedBytes = 0L;
    e718:	f241 7348 	movw	r3, #5960	; 0x1748
    e71c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e720:	f04f 0200 	mov.w	r2, #0
    e724:	601a      	str	r2, [r3, #0]
  file = 0;
    e726:	f241 732c 	movw	r3, #5932	; 0x172c
    e72a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e72e:	601a      	str	r2, [r3, #0]
  // Always operate in truncation mode.
  deleteFile(filename);
    e730:	4628      	mov	r0, r5
    e732:	f7ff fe6f 	bl	e414 <sdcard::deleteFile(char*)>
  if (!createFile(filename)) {
    e736:	4628      	mov	r0, r5
    e738:	f7ff fe82 	bl	e440 <sdcard::createFile(char*)>
    e73c:	b1a8      	cbz	r0, e76a <sdcard::startCapture(char*)+0x62>
    return SD_ERR_FILE_NOT_FOUND;
  }

  if (!openFile(filename,&file)) {
    e73e:	4628      	mov	r0, r5
    e740:	f241 712c 	movw	r1, #5932	; 0x172c
    e744:	f2c1 0100 	movt	r1, #4096	; 0x1000
    e748:	f7ff fe42 	bl	e3d0 <sdcard::openFile(char const*, fat_file_struct**)>
    e74c:	b180      	cbz	r0, e770 <sdcard::startCapture(char*)+0x68>
    return SD_ERR_PARTITION_READ;
  }
  if (file == 0) {
    e74e:	f241 732c 	movw	r3, #5932	; 0x172c
    e752:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e756:	681b      	ldr	r3, [r3, #0]
    e758:	b16b      	cbz	r3, e776 <sdcard::startCapture(char*)+0x6e>
    return SD_ERR_GENERIC;
  }

  capturing = true;
    e75a:	f241 7344 	movw	r3, #5956	; 0x1744
    e75e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e762:	f04f 0201 	mov.w	r2, #1
    e766:	701a      	strb	r2, [r3, #0]
  return SD_SUCCESS;
    e768:	e007      	b.n	e77a <sdcard::startCapture(char*)+0x72>
  capturedBytes = 0L;
  file = 0;
  // Always operate in truncation mode.
  deleteFile(filename);
  if (!createFile(filename)) {
    return SD_ERR_FILE_NOT_FOUND;
    e76a:	f04f 0407 	mov.w	r4, #7
    e76e:	e004      	b.n	e77a <sdcard::startCapture(char*)+0x72>
  }

  if (!openFile(filename,&file)) {
    return SD_ERR_PARTITION_READ;
    e770:	f04f 0403 	mov.w	r4, #3
    e774:	e001      	b.n	e77a <sdcard::startCapture(char*)+0x72>
  }
  if (file == 0) {
    return SD_ERR_GENERIC;
    e776:	f04f 0408 	mov.w	r4, #8
  }

  capturing = true;
  return SD_SUCCESS;
}
    e77a:	4620      	mov	r0, r4
    e77c:	bd38      	pop	{r3, r4, r5, pc}
    e77e:	bf00      	nop

0000e780 <sdcard::directoryReset()>:
		return SD_ERR_CARD_LOCKED;
	}
	return SD_SUCCESS;
}

SdErrorCode directoryReset() {
    e780:	b508      	push	{r3, lr}
  reset();
    e782:	f7ff ff13 	bl	e5ac <sdcard::reset()>
  SdErrorCode rsp = initCard();
    e786:	f7ff ff51 	bl	e62c <sdcard::initCard()>
  if (rsp != SD_SUCCESS && rsp != SD_ERR_CARD_LOCKED) {
    e78a:	4603      	mov	r3, r0
    e78c:	1f82      	subs	r2, r0, #6
    e78e:	bf18      	it	ne
    e790:	2201      	movne	r2, #1
    e792:	2800      	cmp	r0, #0
    e794:	bf0c      	ite	eq
    e796:	2200      	moveq	r2, #0
    e798:	f002 0201 	andne.w	r2, r2, #1
    e79c:	b942      	cbnz	r2, e7b0 <sdcard::directoryReset()+0x30>
    return rsp;
  }
  fat_reset_dir(dd);
    e79e:	f241 730c 	movw	r3, #5900	; 0x170c
    e7a2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e7a6:	6818      	ldr	r0, [r3, #0]
    e7a8:	f7f8 ffa8 	bl	76fc <fat_reset_dir>
  return SD_SUCCESS;
    e7ac:	f04f 0300 	mov.w	r3, #0
}
    e7b0:	4618      	mov	r0, r3
    e7b2:	bd08      	pop	{r3, pc}

0000e7b4 <_GLOBAL__sub_I__ZN6sdcard9partitionE>:
		partition_close(partition);
		partition = 0;
	}
}

} // namespace sdcard
    e7b4:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
    e7b6:	f241 7008 	movw	r0, #5896	; 0x1708
    e7ba:	f2c1 0000 	movt	r0, #4096	; 0x1000
    e7be:	f04f 0100 	mov.w	r1, #0
    e7c2:	f003 fa3b 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
    e7c6:	f241 7014 	movw	r0, #5908	; 0x1714
    e7ca:	f2c1 0000 	movt	r0, #4096	; 0x1000
    e7ce:	f04f 0101 	mov.w	r1, #1
    e7d2:	f003 fa33 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
    e7d6:	f241 7020 	movw	r0, #5920	; 0x1720
    e7da:	f2c1 0000 	movt	r0, #4096	; 0x1000
    e7de:	f04f 0102 	mov.w	r1, #2
    e7e2:	f003 fa2b 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
    e7e6:	f241 701c 	movw	r0, #5916	; 0x171c
    e7ea:	f2c1 0000 	movt	r0, #4096	; 0x1000
    e7ee:	f04f 0103 	mov.w	r1, #3
    e7f2:	f003 fa23 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
    e7f6:	f241 7040 	movw	r0, #5952	; 0x1740
    e7fa:	f2c1 0000 	movt	r0, #4096	; 0x1000
    e7fe:	f04f 0104 	mov.w	r1, #4
    e802:	f003 fa1b 	bl	11c3c <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
    e806:	f241 7438 	movw	r4, #5944	; 0x1738
    e80a:	f2c1 0400 	movt	r4, #4096	; 0x1000
    e80e:	4620      	mov	r0, r4
    e810:	f04f 01ff 	mov.w	r1, #255	; 0xff
    e814:	f003 fa12 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    e818:	f241 7030 	movw	r0, #5936	; 0x1730
    e81c:	f2c1 0000 	movt	r0, #4096	; 0x1000
    e820:	4621      	mov	r1, r4
    e822:	f04f 0200 	mov.w	r2, #0
    e826:	f003 fc1b 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    e82a:	bd10      	pop	{r4, pc}

0000e82c <SoftI2cManager::SoftI2cManager()>:

// initiate static i2cManager instance
SoftI2cManager SoftI2cManager::i2cManager;

// constructor
SoftI2cManager::SoftI2cManager():
    e82c:	b570      	push	{r4, r5, r6, lr}
    e82e:	b090      	sub	sp, #64	; 0x40
    e830:	4606      	mov	r6, r0
    e832:	4604      	mov	r4, r0
    e834:	f100 0514 	add.w	r5, r0, #20
    numPins(STEPPER_COUNT),
    sclPin(POTS_SCL)
    e838:	4620      	mov	r0, r4
    e83a:	f003 fbff 	bl	1203c <Pin::Pin()>
    e83e:	f104 0405 	add.w	r4, r4, #5
    e842:	42ac      	cmp	r4, r5
    e844:	d1f8      	bne.n	e838 <SoftI2cManager::SoftI2cManager()+0xc>
    e846:	4668      	mov	r0, sp
    e848:	f04f 01ff 	mov.w	r1, #255	; 0xff
    e84c:	f003 f9f6 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    e850:	f106 0414 	add.w	r4, r6, #20
    e854:	4620      	mov	r0, r4
    e856:	4669      	mov	r1, sp
    e858:	f04f 02ff 	mov.w	r2, #255	; 0xff
    e85c:	f003 fc00 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    e860:	f04f 0304 	mov.w	r3, #4
    e864:	7673      	strb	r3, [r6, #25]
{
    sdaPins[0] = X_POT_PIN;
    e866:	a803      	add	r0, sp, #12
    e868:	f04f 01ff 	mov.w	r1, #255	; 0xff
    e86c:	f003 f9e6 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    e870:	a801      	add	r0, sp, #4
    e872:	a903      	add	r1, sp, #12
    e874:	f04f 02ff 	mov.w	r2, #255	; 0xff
    e878:	f003 fbf2 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    e87c:	9801      	ldr	r0, [sp, #4]
    e87e:	6030      	str	r0, [r6, #0]
    e880:	f89d 3008 	ldrb.w	r3, [sp, #8]
    e884:	7133      	strb	r3, [r6, #4]
    sdaPins[1] = Y_POT_PIN;
    e886:	a806      	add	r0, sp, #24
    e888:	f04f 01ff 	mov.w	r1, #255	; 0xff
    e88c:	f003 f9d6 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    e890:	a804      	add	r0, sp, #16
    e892:	a906      	add	r1, sp, #24
    e894:	f04f 02ff 	mov.w	r2, #255	; 0xff
    e898:	f003 fbe2 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    e89c:	9804      	ldr	r0, [sp, #16]
    e89e:	f8c6 0005 	str.w	r0, [r6, #5]
    e8a2:	f89d 3014 	ldrb.w	r3, [sp, #20]
    e8a6:	7273      	strb	r3, [r6, #9]
    sdaPins[2] = Z_POT_PIN;
    e8a8:	a809      	add	r0, sp, #36	; 0x24
    e8aa:	f04f 01ff 	mov.w	r1, #255	; 0xff
    e8ae:	f003 f9c5 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    e8b2:	a807      	add	r0, sp, #28
    e8b4:	a909      	add	r1, sp, #36	; 0x24
    e8b6:	f04f 02ff 	mov.w	r2, #255	; 0xff
    e8ba:	f003 fbd1 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    e8be:	9807      	ldr	r0, [sp, #28]
    e8c0:	f8c6 000a 	str.w	r0, [r6, #10]
    e8c4:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e8c8:	73b3      	strb	r3, [r6, #14]
    sdaPins[3] = A_POT_PIN;
    e8ca:	a80c      	add	r0, sp, #48	; 0x30
    e8cc:	f04f 01ff 	mov.w	r1, #255	; 0xff
    e8d0:	f003 f9b4 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    e8d4:	a80a      	add	r0, sp, #40	; 0x28
    e8d6:	a90c      	add	r1, sp, #48	; 0x30
    e8d8:	f04f 02ff 	mov.w	r2, #255	; 0xff
    e8dc:	f003 fbc0 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    e8e0:	980a      	ldr	r0, [sp, #40]	; 0x28
    e8e2:	f8c6 000f 	str.w	r0, [r6, #15]
    e8e6:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    e8ea:	74f3      	strb	r3, [r6, #19]
    sdaPins[4] = B_POT_PIN;
    e8ec:	a80f      	add	r0, sp, #60	; 0x3c
    e8ee:	f04f 01ff 	mov.w	r1, #255	; 0xff
    e8f2:	f003 f9a3 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    e8f6:	a80d      	add	r0, sp, #52	; 0x34
    e8f8:	a90f      	add	r1, sp, #60	; 0x3c
    e8fa:	f04f 02ff 	mov.w	r2, #255	; 0xff
    e8fe:	f003 fbaf 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    e902:	980d      	ldr	r0, [sp, #52]	; 0x34
    e904:	6170      	str	r0, [r6, #20]
    e906:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    e90a:	7633      	strb	r3, [r6, #24]
    
}
    e90c:	4630      	mov	r0, r6
    e90e:	b010      	add	sp, #64	; 0x40
    e910:	bd70      	pop	{r4, r5, r6, pc}
    e912:	bf00      	nop

0000e914 <SoftI2cManager::init()>:


// init pins and set bus high
void SoftI2cManager::init()
{
    e914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e918:	4606      	mov	r6, r0
    for (uint8_t i = 0; i < numPins; i++)
    e91a:	7e43      	ldrb	r3, [r0, #25]
    e91c:	b1c3      	cbz	r3, e950 <SoftI2cManager::init()+0x3c>
    e91e:	f04f 0400 	mov.w	r4, #0
    {
        sdaPins[i].setDirection(true);
    e922:	f04f 0801 	mov.w	r8, #1
    e926:	eb04 0784 	add.w	r7, r4, r4, lsl #2
    e92a:	19f5      	adds	r5, r6, r7
    e92c:	4628      	mov	r0, r5
    e92e:	4641      	mov	r1, r8
    e930:	f003 fbb6 	bl	120a0 <Pin::setDirection(bool) const>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    e934:	786b      	ldrb	r3, [r5, #1]
    e936:	b92b      	cbnz	r3, e944 <SoftI2cManager::init()+0x30>
//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    e938:	78a9      	ldrb	r1, [r5, #2]
    e93a:	5df0      	ldrb	r0, [r6, r7]
    e93c:	fa08 f101 	lsl.w	r1, r8, r1
    e940:	f7f4 fdd0 	bl	34e4 <GPIO_SetValue>


// init pins and set bus high
void SoftI2cManager::init()
{
    for (uint8_t i = 0; i < numPins; i++)
    e944:	f104 0401 	add.w	r4, r4, #1
    e948:	b2e4      	uxtb	r4, r4
    e94a:	7e73      	ldrb	r3, [r6, #25]
    e94c:	42a3      	cmp	r3, r4
    e94e:	d8ea      	bhi.n	e926 <SoftI2cManager::init()+0x12>
    {
        sdaPins[i].setDirection(true);
        sdaPins[i].setValue(true);
    }
    sclPin.setDirection(true);
    e950:	f106 0014 	add.w	r0, r6, #20
    e954:	f04f 0101 	mov.w	r1, #1
    e958:	f003 fba2 	bl	120a0 <Pin::setDirection(bool) const>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    e95c:	7d73      	ldrb	r3, [r6, #21]
    e95e:	b93b      	cbnz	r3, e970 <SoftI2cManager::init()+0x5c>
//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    e960:	7db3      	ldrb	r3, [r6, #22]
    e962:	7d30      	ldrb	r0, [r6, #20]
    e964:	f04f 0101 	mov.w	r1, #1
    e968:	fa01 f103 	lsl.w	r1, r1, r3
    e96c:	f7f4 fdba 	bl	34e4 <GPIO_SetValue>
    e970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e974 <SoftI2cManager::stop()>:
  return write(addressRW, sdaPin);
}
//------------------------------------------------------------------------------
// issue a stop condition
void SoftI2cManager::stop()
{
    e974:	b570      	push	{r4, r5, r6, lr}
    e976:	4605      	mov	r5, r0
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    e978:	7d43      	ldrb	r3, [r0, #21]
    e97a:	b93b      	cbnz	r3, e98c <SoftI2cManager::stop()+0x18>
//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    e97c:	7d83      	ldrb	r3, [r0, #22]
    e97e:	7d00      	ldrb	r0, [r0, #20]
    e980:	f04f 0101 	mov.w	r1, #1
    e984:	fa01 f103 	lsl.w	r1, r1, r3
    e988:	f7f4 fdac 	bl	34e4 <GPIO_SetValue>
//  _delay_us(I2C_DELAY_USEC);
   sclPin.setValue(true);  
//  _delay_us(I2C_DELAY_USEC);
    for(uint8_t i = 0; i < numPins; i++)
    e98c:	7e6b      	ldrb	r3, [r5, #25]
    e98e:	b1a3      	cbz	r3, e9ba <SoftI2cManager::stop()+0x46>
    e990:	f04f 0400 	mov.w	r4, #0
    e994:	f04f 0601 	mov.w	r6, #1
        sdaPins[i].setValue(true);  
    e998:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    e99c:	18ea      	adds	r2, r5, r3
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    e99e:	7851      	ldrb	r1, [r2, #1]
    e9a0:	b929      	cbnz	r1, e9ae <SoftI2cManager::stop()+0x3a>
//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    e9a2:	7891      	ldrb	r1, [r2, #2]
    e9a4:	5ce8      	ldrb	r0, [r5, r3]
    e9a6:	fa06 f101 	lsl.w	r1, r6, r1
    e9aa:	f7f4 fd9b 	bl	34e4 <GPIO_SetValue>
void SoftI2cManager::stop()
{
//  _delay_us(I2C_DELAY_USEC);
   sclPin.setValue(true);  
//  _delay_us(I2C_DELAY_USEC);
    for(uint8_t i = 0; i < numPins; i++)
    e9ae:	f104 0401 	add.w	r4, r4, #1
    e9b2:	b2e4      	uxtb	r4, r4
    e9b4:	7e6b      	ldrb	r3, [r5, #25]
    e9b6:	42a3      	cmp	r3, r4
    e9b8:	d8ee      	bhi.n	e998 <SoftI2cManager::stop()+0x24>
    e9ba:	bd70      	pop	{r4, r5, r6, pc}

0000e9bc <SoftI2cManager::write(unsigned char, Pin const&)>:
//  _delay_us(I2C_DELAY_USEC);
}
//------------------------------------------------------------------------------
// write byte and return true for Ack or false for Nak
bool SoftI2cManager::write(uint8_t b, const Pin &sdaPin)
{
    e9bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e9c0:	4604      	mov	r4, r0
    e9c2:	4689      	mov	r9, r1
    e9c4:	4615      	mov	r5, r2
    e9c6:	f04f 0708 	mov.w	r7, #8
  // write byte
  for (uint8_t m = 0X80; m != 0; m >>= 1) {
    e9ca:	f04f 0680 	mov.w	r6, #128	; 0x80
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    e9ce:	f04f 0801 	mov.w	r8, #1
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    e9d2:	786b      	ldrb	r3, [r5, #1]
    e9d4:	b97b      	cbnz	r3, e9f6 <SoftI2cManager::write(unsigned char, Pin const&)+0x3a>
		 	return;
		// uint8_t oldSREG = SREG;

//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
    e9d6:	ea16 0f09 	tst.w	r6, r9
    e9da:	d006      	beq.n	e9ea <SoftI2cManager::write(unsigned char, Pin const&)+0x2e>
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    e9dc:	78a9      	ldrb	r1, [r5, #2]
    e9de:	7828      	ldrb	r0, [r5, #0]
    e9e0:	fa08 f101 	lsl.w	r1, r8, r1
    e9e4:	f7f4 fd7e 	bl	34e4 <GPIO_SetValue>
    e9e8:	e005      	b.n	e9f6 <SoftI2cManager::write(unsigned char, Pin const&)+0x3a>
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    e9ea:	78a9      	ldrb	r1, [r5, #2]
    e9ec:	7828      	ldrb	r0, [r5, #0]
    e9ee:	fa08 f101 	lsl.w	r1, r8, r1
    e9f2:	f7f4 fd7f 	bl	34f4 <GPIO_ClearValue>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    e9f6:	7d63      	ldrb	r3, [r4, #21]
    e9f8:	b96b      	cbnz	r3, ea16 <SoftI2cManager::write(unsigned char, Pin const&)+0x5a>
//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    e9fa:	7da1      	ldrb	r1, [r4, #22]
    e9fc:	7d20      	ldrb	r0, [r4, #20]
    e9fe:	fa08 f101 	lsl.w	r1, r8, r1
    ea02:	f7f4 fd6f 	bl	34e4 <GPIO_SetValue>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    ea06:	7d63      	ldrb	r3, [r4, #21]
    ea08:	b92b      	cbnz	r3, ea16 <SoftI2cManager::write(unsigned char, Pin const&)+0x5a>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    ea0a:	7da1      	ldrb	r1, [r4, #22]
    ea0c:	7d20      	ldrb	r0, [r4, #20]
    ea0e:	fa08 f101 	lsl.w	r1, r8, r1
    ea12:	f7f4 fd6f 	bl	34f4 <GPIO_ClearValue>
    ea16:	ea4f 0656 	mov.w	r6, r6, lsr #1
    ea1a:	3f01      	subs	r7, #1
    ea1c:	d1d9      	bne.n	e9d2 <SoftI2cManager::write(unsigned char, Pin const&)+0x16>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    ea1e:	786b      	ldrb	r3, [r5, #1]
    ea20:	b93b      	cbnz	r3, ea32 <SoftI2cManager::write(unsigned char, Pin const&)+0x76>
//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    ea22:	78ab      	ldrb	r3, [r5, #2]
    ea24:	7828      	ldrb	r0, [r5, #0]
    ea26:	f04f 0101 	mov.w	r1, #1
    ea2a:	fa01 f103 	lsl.w	r1, r1, r3
    ea2e:	f7f4 fd59 	bl	34e4 <GPIO_SetValue>
//    _delay_us(I2C_DELAY_USEC);
     sclPin.setValue(false);  
  }
  // get Ack or Nak
   sdaPin.setValue(true);  
   sdaPin.setDirection(false); 
    ea32:	4628      	mov	r0, r5
    ea34:	f04f 0100 	mov.w	r1, #0
    ea38:	f003 fb32 	bl	120a0 <Pin::setDirection(bool) const>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    ea3c:	7d63      	ldrb	r3, [r4, #21]
    ea3e:	b93b      	cbnz	r3, ea50 <SoftI2cManager::write(unsigned char, Pin const&)+0x94>
//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    ea40:	7da3      	ldrb	r3, [r4, #22]
    ea42:	7d20      	ldrb	r0, [r4, #20]
    ea44:	f04f 0101 	mov.w	r1, #1
    ea48:	fa01 f103 	lsl.w	r1, r1, r3
    ea4c:	f7f4 fd4a 	bl	34e4 <GPIO_SetValue>
	Pin(const LPCPort& port_in, uint8_t pin_index_in);
	Pin(const Pin& other_pin);
	bool isNull() const;
	void setDirection(bool out) const;
	bool /*Pin::*/getValue() const {
		if (is_null)
    ea50:	786b      	ldrb	r3, [r5, #1]
			return false; // null pin is always low ... ?
    ea52:	f04f 0600 	mov.w	r6, #0
	Pin(const LPCPort& port_in, uint8_t pin_index_in);
	Pin(const Pin& other_pin);
	bool isNull() const;
	void setDirection(bool out) const;
	bool /*Pin::*/getValue() const {
		if (is_null)
    ea56:	b96b      	cbnz	r3, ea74 <SoftI2cManager::write(unsigned char, Pin const&)+0xb8>
			return false; // null pin is always low ... ?
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
    ea58:	7828      	ldrb	r0, [r5, #0]
    ea5a:	f7f4 fd5d 	bl	3518 <FIO_ReadValue>
    ea5e:	78ab      	ldrb	r3, [r5, #2]
    ea60:	f04f 0201 	mov.w	r2, #1
    ea64:	fa02 f303 	lsl.w	r3, r2, r3
    ea68:	4003      	ands	r3, r0
    ea6a:	f013 0fff 	tst.w	r3, #255	; 0xff
    ea6e:	bf0c      	ite	eq
    ea70:	2600      	moveq	r6, #0
    ea72:	2601      	movne	r6, #1
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    ea74:	7d63      	ldrb	r3, [r4, #21]
    ea76:	b93b      	cbnz	r3, ea88 <SoftI2cManager::write(unsigned char, Pin const&)+0xcc>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    ea78:	7da3      	ldrb	r3, [r4, #22]
    ea7a:	7d20      	ldrb	r0, [r4, #20]
    ea7c:	f04f 0101 	mov.w	r1, #1
    ea80:	fa01 f103 	lsl.w	r1, r1, r3
    ea84:	f7f4 fd36 	bl	34f4 <GPIO_ClearValue>
   sclPin.setValue(true);  
   b = sdaPin.getValue();
   sclPin.setValue(false); 
   sdaPin.setDirection(true);
    ea88:	4628      	mov	r0, r5
    ea8a:	f04f 0101 	mov.w	r1, #1
    ea8e:	f003 fb07 	bl	120a0 <Pin::setDirection(bool) const>
   return b == 0;
}
    ea92:	f086 0001 	eor.w	r0, r6, #1
    ea96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ea9a:	bf00      	nop

0000ea9c <SoftI2cManager::start(unsigned char, Pin const&)>:
  return start(addressRW, sdaPin);
}
//------------------------------------------------------------------------------
// issue a start condition for i2c address with read/write bit
uint8_t SoftI2cManager::start(uint8_t addressRW, const Pin &sdaPin)
{
    ea9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eaa0:	4605      	mov	r5, r0
    eaa2:	460f      	mov	r7, r1
    eaa4:	4690      	mov	r8, r2
    for(uint8_t i = 0; i < numPins; i++)
    eaa6:	7e43      	ldrb	r3, [r0, #25]
    eaa8:	b1a3      	cbz	r3, ead4 <SoftI2cManager::start(unsigned char, Pin const&)+0x38>
    eaaa:	f04f 0400 	mov.w	r4, #0
    eaae:	f04f 0601 	mov.w	r6, #1
        sdaPins[i].setValue(false);
    eab2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    eab6:	18ea      	adds	r2, r5, r3
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    eab8:	7851      	ldrb	r1, [r2, #1]
    eaba:	b929      	cbnz	r1, eac8 <SoftI2cManager::start(unsigned char, Pin const&)+0x2c>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    eabc:	7891      	ldrb	r1, [r2, #2]
    eabe:	5ce8      	ldrb	r0, [r5, r3]
    eac0:	fa06 f101 	lsl.w	r1, r6, r1
    eac4:	f7f4 fd16 	bl	34f4 <GPIO_ClearValue>
}
//------------------------------------------------------------------------------
// issue a start condition for i2c address with read/write bit
uint8_t SoftI2cManager::start(uint8_t addressRW, const Pin &sdaPin)
{
    for(uint8_t i = 0; i < numPins; i++)
    eac8:	f104 0401 	add.w	r4, r4, #1
    eacc:	b2e4      	uxtb	r4, r4
    eace:	7e6b      	ldrb	r3, [r5, #25]
    ead0:	42a3      	cmp	r3, r4
    ead2:	d8ee      	bhi.n	eab2 <SoftI2cManager::start(unsigned char, Pin const&)+0x16>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    ead4:	7d6b      	ldrb	r3, [r5, #21]
    ead6:	b93b      	cbnz	r3, eae8 <SoftI2cManager::start(unsigned char, Pin const&)+0x4c>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    ead8:	7dab      	ldrb	r3, [r5, #22]
    eada:	7d28      	ldrb	r0, [r5, #20]
    eadc:	f04f 0101 	mov.w	r1, #1
    eae0:	fa01 f103 	lsl.w	r1, r1, r3
    eae4:	f7f4 fd06 	bl	34f4 <GPIO_ClearValue>
        sdaPins[i].setValue(false);
//  _delay_us(I2C_DELAY_USEC);
  sclPin.setValue(false);
  return write(addressRW, sdaPin);
    eae8:	4628      	mov	r0, r5
    eaea:	4639      	mov	r1, r7
    eaec:	4642      	mov	r2, r8
    eaee:	f7ff ff65 	bl	e9bc <SoftI2cManager::write(unsigned char, Pin const&)>
}
    eaf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eaf6:	bf00      	nop

0000eaf8 <_GLOBAL__sub_I__ZN14SoftI2cManager10i2cManagerE>:
   sclPin.setValue(true);  
   b = sdaPin.getValue();
   sclPin.setValue(false); 
   sdaPin.setDirection(true);
   return b == 0;
}
    eaf8:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
    eafa:	f241 704c 	movw	r0, #5964	; 0x174c
    eafe:	f2c1 0000 	movt	r0, #4096	; 0x1000
    eb02:	f04f 0100 	mov.w	r1, #0
    eb06:	f003 f899 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
    eb0a:	f241 7050 	movw	r0, #5968	; 0x1750
    eb0e:	f2c1 0000 	movt	r0, #4096	; 0x1000
    eb12:	f04f 0101 	mov.w	r1, #1
    eb16:	f003 f891 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
    eb1a:	f241 7054 	movw	r0, #5972	; 0x1754
    eb1e:	f2c1 0000 	movt	r0, #4096	; 0x1000
    eb22:	f04f 0102 	mov.w	r1, #2
    eb26:	f003 f889 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
    eb2a:	f241 7058 	movw	r0, #5976	; 0x1758
    eb2e:	f2c1 0000 	movt	r0, #4096	; 0x1000
    eb32:	f04f 0103 	mov.w	r1, #3
    eb36:	f003 f881 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
    eb3a:	f241 705c 	movw	r0, #5980	; 0x175c
    eb3e:	f2c1 0000 	movt	r0, #4096	; 0x1000
    eb42:	f04f 0104 	mov.w	r1, #4
    eb46:	f003 f879 	bl	11c3c <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
    eb4a:	f241 7460 	movw	r4, #5984	; 0x1760
    eb4e:	f2c1 0400 	movt	r4, #4096	; 0x1000
    eb52:	4620      	mov	r0, r4
    eb54:	f04f 01ff 	mov.w	r1, #255	; 0xff
    eb58:	f003 f870 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
	};
	// currently not used:
	//const uint8_t getPinIndex() const { return pin_index; }
};

static const Pin NullPin(NullPort, 0);
    eb5c:	f241 7064 	movw	r0, #5988	; 0x1764
    eb60:	f2c1 0000 	movt	r0, #4096	; 0x1000
    eb64:	4621      	mov	r1, r4
    eb66:	f04f 0200 	mov.w	r2, #0
    eb6a:	f003 fa79 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
extern "C" {
#include "comm.h"
}

// initiate static i2cManager instance
SoftI2cManager SoftI2cManager::i2cManager;
    eb6e:	f241 706c 	movw	r0, #5996	; 0x176c
    eb72:	f2c1 0000 	movt	r0, #4096	; 0x1000
    eb76:	f7ff fe59 	bl	e82c <SoftI2cManager::SoftI2cManager()>
   sclPin.setValue(true);  
   b = sdaPin.getValue();
   sclPin.setValue(false); 
   sdaPin.setDirection(true);
   return b == 0;
}
    eb7a:	bd10      	pop	{r4, pc}

0000eb7c <steppers::isRunning()>:

bool holdZ = false;

static planner::Block *current_block;

bool isRunning() {
    eb7c:	b508      	push	{r3, lr}
	return is_running || is_homing || !planner::isBufferEmpty();
    eb7e:	f641 0370 	movw	r3, #6256	; 0x1870
    eb82:	f2c1 0300 	movt	r3, #4096	; 0x1000
    eb86:	781b      	ldrb	r3, [r3, #0]
    eb88:	b95b      	cbnz	r3, eba2 <steppers::isRunning()+0x26>
    eb8a:	f641 0310 	movw	r3, #6160	; 0x1810
    eb8e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    eb92:	781b      	ldrb	r3, [r3, #0]
    eb94:	b943      	cbnz	r3, eba8 <steppers::isRunning()+0x2c>
    eb96:	f7fe f957 	bl	ce48 <planner::isBufferEmpty()>

bool holdZ = false;

static planner::Block *current_block;

bool isRunning() {
    eb9a:	f080 0001 	eor.w	r0, r0, #1
    eb9e:	b2c0      	uxtb	r0, r0
    eba0:	bd08      	pop	{r3, pc}
	return is_running || is_homing || !planner::isBufferEmpty();
    eba2:	f04f 0001 	mov.w	r0, #1
    eba6:	bd08      	pop	{r3, pc}
    eba8:	f04f 0001 	mov.w	r0, #1
}
    ebac:	bd08      	pop	{r3, pc}
    ebae:	bf00      	nop

0000ebb0 <steppers::InitPins()>:

void InitPins(){
    ebb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    ebb2:	b0bd      	sub	sp, #244	; 0xf4
	// initialize stepper control pins
	X_STEP_PIN.setDirection(true);
    ebb4:	f241 74b8 	movw	r4, #6072	; 0x17b8
    ebb8:	f2c1 0400 	movt	r4, #4096	; 0x1000
    ebbc:	a801      	add	r0, sp, #4
    ebbe:	4621      	mov	r1, r4
    ebc0:	f04f 020d 	mov.w	r2, #13
    ebc4:	f003 fa4c 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    ebc8:	a801      	add	r0, sp, #4
    ebca:	f04f 0101 	mov.w	r1, #1
    ebce:	f003 fa67 	bl	120a0 <Pin::setDirection(bool) const>
	X_DIR_PIN.setDirection(true);
    ebd2:	a803      	add	r0, sp, #12
    ebd4:	4621      	mov	r1, r4
    ebd6:	f04f 020c 	mov.w	r2, #12
    ebda:	f003 fa41 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    ebde:	a803      	add	r0, sp, #12
    ebe0:	f04f 0101 	mov.w	r1, #1
    ebe4:	f003 fa5c 	bl	120a0 <Pin::setDirection(bool) const>
	X_ENABLE_PIN.setValue(true);
    ebe8:	a805      	add	r0, sp, #20
    ebea:	4621      	mov	r1, r4
    ebec:	f04f 020b 	mov.w	r2, #11
    ebf0:	f003 fa36 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    ebf4:	f89d 3015 	ldrb.w	r3, [sp, #21]
    ebf8:	b94b      	cbnz	r3, ec0e <steppers::InitPins()+0x5e>
//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    ebfa:	f89d 3016 	ldrb.w	r3, [sp, #22]
    ebfe:	f89d 0014 	ldrb.w	r0, [sp, #20]
    ec02:	f04f 0101 	mov.w	r1, #1
    ec06:	fa01 f103 	lsl.w	r1, r1, r3
    ec0a:	f7f4 fc6b 	bl	34e4 <GPIO_SetValue>
	X_ENABLE_PIN.setDirection(true);
    ec0e:	a807      	add	r0, sp, #28
    ec10:	f241 71b8 	movw	r1, #6072	; 0x17b8
    ec14:	f2c1 0100 	movt	r1, #4096	; 0x1000
    ec18:	f04f 020b 	mov.w	r2, #11
    ec1c:	f003 fa20 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    ec20:	a807      	add	r0, sp, #28
    ec22:	f04f 0101 	mov.w	r1, #1
    ec26:	f003 fa3b 	bl	120a0 <Pin::setDirection(bool) const>

	Y_STEP_PIN.setDirection(true);
    ec2a:	f241 74b0 	movw	r4, #6064	; 0x17b0
    ec2e:	f2c1 0400 	movt	r4, #4096	; 0x1000
    ec32:	a809      	add	r0, sp, #36	; 0x24
    ec34:	4621      	mov	r1, r4
    ec36:	f04f 021c 	mov.w	r2, #28
    ec3a:	f003 fa11 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    ec3e:	a809      	add	r0, sp, #36	; 0x24
    ec40:	f04f 0101 	mov.w	r1, #1
    ec44:	f003 fa2c 	bl	120a0 <Pin::setDirection(bool) const>
	Y_DIR_PIN.setDirection(true);
    ec48:	a80b      	add	r0, sp, #44	; 0x2c
    ec4a:	4621      	mov	r1, r4
    ec4c:	f04f 021d 	mov.w	r2, #29
    ec50:	f003 fa06 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    ec54:	a80b      	add	r0, sp, #44	; 0x2c
    ec56:	f04f 0101 	mov.w	r1, #1
    ec5a:	f003 fa21 	bl	120a0 <Pin::setDirection(bool) const>
	Y_ENABLE_PIN.setValue(true);
    ec5e:	a80d      	add	r0, sp, #52	; 0x34
    ec60:	f241 719c 	movw	r1, #6044	; 0x179c
    ec64:	f2c1 0100 	movt	r1, #4096	; 0x1000
    ec68:	f04f 020a 	mov.w	r2, #10
    ec6c:	f003 f9f8 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    ec70:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    ec74:	b94b      	cbnz	r3, ec8a <steppers::InitPins()+0xda>
//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    ec76:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
    ec7a:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
    ec7e:	f04f 0101 	mov.w	r1, #1
    ec82:	fa01 f103 	lsl.w	r1, r1, r3
    ec86:	f7f4 fc2d 	bl	34e4 <GPIO_SetValue>
	Y_ENABLE_PIN.setDirection(true);
    ec8a:	a80f      	add	r0, sp, #60	; 0x3c
    ec8c:	f241 719c 	movw	r1, #6044	; 0x179c
    ec90:	f2c1 0100 	movt	r1, #4096	; 0x1000
    ec94:	f04f 020a 	mov.w	r2, #10
    ec98:	f003 f9e2 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    ec9c:	a80f      	add	r0, sp, #60	; 0x3c
    ec9e:	f04f 0101 	mov.w	r1, #1
    eca2:	f003 f9fd 	bl	120a0 <Pin::setDirection(bool) const>

	Z_STEP_PIN.setDirection(true);
    eca6:	f241 74b0 	movw	r4, #6064	; 0x17b0
    ecaa:	f2c1 0400 	movt	r4, #4096	; 0x1000
    ecae:	a811      	add	r0, sp, #68	; 0x44
    ecb0:	4621      	mov	r1, r4
    ecb2:	f04f 0218 	mov.w	r2, #24
    ecb6:	f003 f9d3 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    ecba:	a811      	add	r0, sp, #68	; 0x44
    ecbc:	f04f 0101 	mov.w	r1, #1
    ecc0:	f003 f9ee 	bl	120a0 <Pin::setDirection(bool) const>
	Z_DIR_PIN.setDirection(true);
    ecc4:	a813      	add	r0, sp, #76	; 0x4c
    ecc6:	4621      	mov	r1, r4
    ecc8:	f04f 0219 	mov.w	r2, #25
    eccc:	f003 f9c8 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    ecd0:	a813      	add	r0, sp, #76	; 0x4c
    ecd2:	f04f 0101 	mov.w	r1, #1
    ecd6:	f003 f9e3 	bl	120a0 <Pin::setDirection(bool) const>
	Z_ENABLE_PIN.setValue(true);
    ecda:	a815      	add	r0, sp, #84	; 0x54
    ecdc:	4621      	mov	r1, r4
    ecde:	f04f 021a 	mov.w	r2, #26
    ece2:	f003 f9bd 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    ece6:	f89d 3055 	ldrb.w	r3, [sp, #85]	; 0x55
    ecea:	b94b      	cbnz	r3, ed00 <steppers::InitPins()+0x150>
//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    ecec:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
    ecf0:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
    ecf4:	f04f 0101 	mov.w	r1, #1
    ecf8:	fa01 f103 	lsl.w	r1, r1, r3
    ecfc:	f7f4 fbf2 	bl	34e4 <GPIO_SetValue>
	Z_ENABLE_PIN.setDirection(true);
    ed00:	f241 74b0 	movw	r4, #6064	; 0x17b0
    ed04:	f2c1 0400 	movt	r4, #4096	; 0x1000
    ed08:	a817      	add	r0, sp, #92	; 0x5c
    ed0a:	4621      	mov	r1, r4
    ed0c:	f04f 021a 	mov.w	r2, #26
    ed10:	f003 f9a6 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    ed14:	a817      	add	r0, sp, #92	; 0x5c
    ed16:	f04f 0101 	mov.w	r1, #1
    ed1a:	f003 f9c1 	bl	120a0 <Pin::setDirection(bool) const>
		_SET_DIRECTION(Z_STEP, true);
		_WRITE(Z_ENABLE, true);
		_SET_DIRECTION(Z_ENABLE, true);*/

#if STEPPER_COUNT > 3	
	A_STEP_PIN.setDirection(true);
    ed1e:	a819      	add	r0, sp, #100	; 0x64
    ed20:	4621      	mov	r1, r4
    ed22:	f04f 0213 	mov.w	r2, #19
    ed26:	f003 f99b 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    ed2a:	a819      	add	r0, sp, #100	; 0x64
    ed2c:	f04f 0101 	mov.w	r1, #1
    ed30:	f003 f9b6 	bl	120a0 <Pin::setDirection(bool) const>
	A_DIR_PIN.setDirection(true);
    ed34:	a81d      	add	r0, sp, #116	; 0x74
    ed36:	f04f 01ff 	mov.w	r1, #255	; 0xff
    ed3a:	f002 ff7f 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    ed3e:	a81b      	add	r0, sp, #108	; 0x6c
    ed40:	a91d      	add	r1, sp, #116	; 0x74
    ed42:	f04f 02ff 	mov.w	r2, #255	; 0xff
    ed46:	f003 f98b 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    ed4a:	a81b      	add	r0, sp, #108	; 0x6c
    ed4c:	f04f 0101 	mov.w	r1, #1
    ed50:	f003 f9a6 	bl	120a0 <Pin::setDirection(bool) const>
	A_ENABLE_PIN.setValue(true);
    ed54:	a820      	add	r0, sp, #128	; 0x80
    ed56:	f04f 01ff 	mov.w	r1, #255	; 0xff
    ed5a:	f002 ff6f 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    ed5e:	a81e      	add	r0, sp, #120	; 0x78
    ed60:	a920      	add	r1, sp, #128	; 0x80
    ed62:	f04f 02ff 	mov.w	r2, #255	; 0xff
    ed66:	f003 f97b 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    ed6a:	f89d 3079 	ldrb.w	r3, [sp, #121]	; 0x79
    ed6e:	b94b      	cbnz	r3, ed84 <steppers::InitPins()+0x1d4>
//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    ed70:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
    ed74:	f89d 0078 	ldrb.w	r0, [sp, #120]	; 0x78
    ed78:	f04f 0101 	mov.w	r1, #1
    ed7c:	fa01 f103 	lsl.w	r1, r1, r3
    ed80:	f7f4 fbb0 	bl	34e4 <GPIO_SetValue>
	A_ENABLE_PIN.setDirection(true);
    ed84:	a823      	add	r0, sp, #140	; 0x8c
    ed86:	f04f 01ff 	mov.w	r1, #255	; 0xff
    ed8a:	f002 ff57 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    ed8e:	a821      	add	r0, sp, #132	; 0x84
    ed90:	a923      	add	r1, sp, #140	; 0x8c
    ed92:	f04f 02ff 	mov.w	r2, #255	; 0xff
    ed96:	f003 f963 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    ed9a:	a821      	add	r0, sp, #132	; 0x84
    ed9c:	f04f 0101 	mov.w	r1, #1
    eda0:	f003 f97e 	bl	120a0 <Pin::setDirection(bool) const>
		_WRITE(B_ENABLE, true);
		_SET_DIRECTION(B_ENABLE, true);*/
#endif	
		
		// get inversion characteristics
		uint8_t axes_invert = eeprom::getEeprom8(eeprom_offsets::AXIS_INVERSION, 0);
    eda4:	f04f 0002 	mov.w	r0, #2
    eda8:	f04f 0100 	mov.w	r1, #0
    edac:	f002 fac8 	bl	11340 <eeprom::getEeprom8(unsigned short, unsigned char)>
    edb0:	4604      	mov	r4, r0
		uint8_t endstops_invert = eeprom::getEeprom8(eeprom_offsets::ENDSTOP_INVERSION, 0);
    edb2:	f04f 0004 	mov.w	r0, #4
    edb6:	f04f 0100 	mov.w	r1, #0
    edba:	f002 fac1 	bl	11340 <eeprom::getEeprom8(unsigned short, unsigned char)>
    edbe:	f04f 0300 	mov.w	r3, #0
			
			bool endstops_present = (endstops_invert & (1<<7)) != 0;	
			
			// If endstops are not present, then we consider them inverted, since they will
			// always register as high (pulled up).
			invert_endstops[i] = !endstops_present || ((endstops_invert & (1<<i)) != 0);
    edc2:	b247      	sxtb	r7, r0
    edc4:	f04f 0e01 	mov.w	lr, #1
    edc8:	f241 76c0 	movw	r6, #6080	; 0x17c0
    edcc:	f2c1 0600 	movt	r6, #4096	; 0x1000
			invert_axis[i] = (axes_invert & (1<<i)) != 0;
    edd0:	f641 0518 	movw	r5, #6168	; 0x1818
    edd4:	f2c1 0500 	movt	r5, #4096	; 0x1000
			
			bool endstops_present = (endstops_invert & (1<<7)) != 0;	
			
			// If endstops are not present, then we consider them inverted, since they will
			// always register as high (pulled up).
			invert_endstops[i] = !endstops_present || ((endstops_invert & (1<<i)) != 0);
    edd8:	2f00      	cmp	r7, #0
    edda:	bfba      	itte	lt
    eddc:	fa40 f103 	asrlt.w	r1, r0, r3

bool isRunning() {
	return is_running || is_homing || !planner::isBufferEmpty();
}

void InitPins(){
    ede0:	f001 0101 	andlt.w	r1, r1, #1
			
			bool endstops_present = (endstops_invert & (1<<7)) != 0;	
			
			// If endstops are not present, then we consider them inverted, since they will
			// always register as high (pulled up).
			invert_endstops[i] = !endstops_present || ((endstops_invert & (1<<i)) != 0);
    ede4:	4671      	movge	r1, lr
    ede6:	5599      	strb	r1, [r3, r6]
			invert_axis[i] = (axes_invert & (1<<i)) != 0;
    ede8:	fa44 f203 	asr.w	r2, r4, r3
    edec:	f002 0201 	and.w	r2, r2, #1
    edf0:	555a      	strb	r2, [r3, r5]
    edf2:	f103 0301 	add.w	r3, r3, #1
		
		// get inversion characteristics
		uint8_t axes_invert = eeprom::getEeprom8(eeprom_offsets::AXIS_INVERSION, 0);
		uint8_t endstops_invert = eeprom::getEeprom8(eeprom_offsets::ENDSTOP_INVERSION, 0);

		for (uint8_t i = 0; i < STEPPER_COUNT; i++){
    edf6:	2b04      	cmp	r3, #4
    edf8:	d1ee      	bne.n	edd8 <steppers::InitPins()+0x228>
					
		}
		
		// intialize endstop pins
		if ( X_MAX != 0){
			X_MAX_PIN.setDirection(false);
    edfa:	f241 749c 	movw	r4, #6044	; 0x179c
    edfe:	f2c1 0400 	movt	r4, #4096	; 0x1000
    ee02:	a824      	add	r0, sp, #144	; 0x90
    ee04:	4621      	mov	r1, r4
    ee06:	f04f 020b 	mov.w	r2, #11
    ee0a:	f003 f929 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    ee0e:	a824      	add	r0, sp, #144	; 0x90
    ee10:	f04f 0100 	mov.w	r1, #0
    ee14:	f003 f944 	bl	120a0 <Pin::setDirection(bool) const>
			X_MAX_PIN.setValue(invert_endstops[X_AXIS]);
    ee18:	a826      	add	r0, sp, #152	; 0x98
    ee1a:	4621      	mov	r1, r4
    ee1c:	f04f 020b 	mov.w	r2, #11
    ee20:	f003 f91e 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    ee24:	f241 73c0 	movw	r3, #6080	; 0x17c0
    ee28:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ee2c:	781a      	ldrb	r2, [r3, #0]
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    ee2e:	f89d 3099 	ldrb.w	r3, [sp, #153]	; 0x99
    ee32:	b9ab      	cbnz	r3, ee60 <steppers::InitPins()+0x2b0>
		 	return;
		// uint8_t oldSREG = SREG;

//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
    ee34:	b152      	cbz	r2, ee4c <steppers::InitPins()+0x29c>
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    ee36:	f89d 309a 	ldrb.w	r3, [sp, #154]	; 0x9a
    ee3a:	f89d 0098 	ldrb.w	r0, [sp, #152]	; 0x98
    ee3e:	f04f 0101 	mov.w	r1, #1
    ee42:	fa01 f103 	lsl.w	r1, r1, r3
    ee46:	f7f4 fb4d 	bl	34e4 <GPIO_SetValue>
    ee4a:	e009      	b.n	ee60 <steppers::InitPins()+0x2b0>
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    ee4c:	f89d 309a 	ldrb.w	r3, [sp, #154]	; 0x9a
    ee50:	f89d 0098 	ldrb.w	r0, [sp, #152]	; 0x98
    ee54:	f04f 0101 	mov.w	r1, #1
    ee58:	fa01 f103 	lsl.w	r1, r1, r3
    ee5c:	f7f4 fb4a 	bl	34f4 <GPIO_ClearValue>
//			_SET_DIRECTION(X_MAX, false);
//			_WRITE(X_MAX, invert_endstops[X_AXIS]);
		}if ( X_MIN != 0) {
			X_MIN_PIN.setDirection(false);
    ee60:	f241 749c 	movw	r4, #6044	; 0x179c
    ee64:	f2c1 0400 	movt	r4, #4096	; 0x1000
    ee68:	a828      	add	r0, sp, #160	; 0xa0
    ee6a:	4621      	mov	r1, r4
    ee6c:	f04f 0216 	mov.w	r2, #22
    ee70:	f003 f8f6 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    ee74:	a828      	add	r0, sp, #160	; 0xa0
    ee76:	f04f 0100 	mov.w	r1, #0
    ee7a:	f003 f911 	bl	120a0 <Pin::setDirection(bool) const>
			X_MIN_PIN.setValue(invert_endstops[X_AXIS]);
    ee7e:	a82a      	add	r0, sp, #168	; 0xa8
    ee80:	4621      	mov	r1, r4
    ee82:	f04f 0216 	mov.w	r2, #22
    ee86:	f003 f8eb 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    ee8a:	f241 73c0 	movw	r3, #6080	; 0x17c0
    ee8e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ee92:	781a      	ldrb	r2, [r3, #0]
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    ee94:	f89d 30a9 	ldrb.w	r3, [sp, #169]	; 0xa9
    ee98:	b9ab      	cbnz	r3, eec6 <steppers::InitPins()+0x316>
		 	return;
		// uint8_t oldSREG = SREG;

//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
    ee9a:	b152      	cbz	r2, eeb2 <steppers::InitPins()+0x302>
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    ee9c:	f89d 30aa 	ldrb.w	r3, [sp, #170]	; 0xaa
    eea0:	f89d 00a8 	ldrb.w	r0, [sp, #168]	; 0xa8
    eea4:	f04f 0101 	mov.w	r1, #1
    eea8:	fa01 f103 	lsl.w	r1, r1, r3
    eeac:	f7f4 fb1a 	bl	34e4 <GPIO_SetValue>
    eeb0:	e009      	b.n	eec6 <steppers::InitPins()+0x316>
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    eeb2:	f89d 30aa 	ldrb.w	r3, [sp, #170]	; 0xaa
    eeb6:	f89d 00a8 	ldrb.w	r0, [sp, #168]	; 0xa8
    eeba:	f04f 0101 	mov.w	r1, #1
    eebe:	fa01 f103 	lsl.w	r1, r1, r3
    eec2:	f7f4 fb17 	bl	34f4 <GPIO_ClearValue>
//			_SET_DIRECTION(X_MIN, false);
//			_WRITE(X_MIN, invert_endstops[X_AXIS]);
		}
		
		if ( Y_MAX != 0){
			Y_MAX_PIN.setDirection(false);
    eec6:	f241 74b0 	movw	r4, #6064	; 0x17b0
    eeca:	f2c1 0400 	movt	r4, #4096	; 0x1000
    eece:	a82c      	add	r0, sp, #176	; 0xb0
    eed0:	4621      	mov	r1, r4
    eed2:	f04f 0217 	mov.w	r2, #23
    eed6:	f003 f8c3 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    eeda:	a82c      	add	r0, sp, #176	; 0xb0
    eedc:	f04f 0100 	mov.w	r1, #0
    eee0:	f003 f8de 	bl	120a0 <Pin::setDirection(bool) const>
			Y_MAX_PIN.setValue(invert_endstops[Y_AXIS]);
    eee4:	a82e      	add	r0, sp, #184	; 0xb8
    eee6:	4621      	mov	r1, r4
    eee8:	f04f 0217 	mov.w	r2, #23
    eeec:	f003 f8b8 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    eef0:	f241 73c0 	movw	r3, #6080	; 0x17c0
    eef4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    eef8:	785a      	ldrb	r2, [r3, #1]
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    eefa:	f89d 30b9 	ldrb.w	r3, [sp, #185]	; 0xb9
    eefe:	b9ab      	cbnz	r3, ef2c <steppers::InitPins()+0x37c>
		 	return;
		// uint8_t oldSREG = SREG;

//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
    ef00:	b152      	cbz	r2, ef18 <steppers::InitPins()+0x368>
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    ef02:	f89d 30ba 	ldrb.w	r3, [sp, #186]	; 0xba
    ef06:	f89d 00b8 	ldrb.w	r0, [sp, #184]	; 0xb8
    ef0a:	f04f 0101 	mov.w	r1, #1
    ef0e:	fa01 f103 	lsl.w	r1, r1, r3
    ef12:	f7f4 fae7 	bl	34e4 <GPIO_SetValue>
    ef16:	e009      	b.n	ef2c <steppers::InitPins()+0x37c>
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    ef18:	f89d 30ba 	ldrb.w	r3, [sp, #186]	; 0xba
    ef1c:	f89d 00b8 	ldrb.w	r0, [sp, #184]	; 0xb8
    ef20:	f04f 0101 	mov.w	r1, #1
    ef24:	fa01 f103 	lsl.w	r1, r1, r3
    ef28:	f7f4 fae4 	bl	34f4 <GPIO_ClearValue>
//			_SET_DIRECTION(Y_MAX, false);
//			_WRITE(Y_MAX, invert_endstops[Y_AXIS]);
		}if ( Y_MIN != 0) {
			Y_MIN_PIN.setDirection(false);
    ef2c:	f241 74b0 	movw	r4, #6064	; 0x17b0
    ef30:	f2c1 0400 	movt	r4, #4096	; 0x1000
    ef34:	a830      	add	r0, sp, #192	; 0xc0
    ef36:	4621      	mov	r1, r4
    ef38:	f04f 021b 	mov.w	r2, #27
    ef3c:	f003 f890 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    ef40:	a830      	add	r0, sp, #192	; 0xc0
    ef42:	f04f 0100 	mov.w	r1, #0
    ef46:	f003 f8ab 	bl	120a0 <Pin::setDirection(bool) const>
			Y_MIN_PIN.setValue(invert_endstops[Y_AXIS]);
    ef4a:	a832      	add	r0, sp, #200	; 0xc8
    ef4c:	4621      	mov	r1, r4
    ef4e:	f04f 021b 	mov.w	r2, #27
    ef52:	f003 f885 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    ef56:	f241 73c0 	movw	r3, #6080	; 0x17c0
    ef5a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ef5e:	785a      	ldrb	r2, [r3, #1]
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    ef60:	f89d 30c9 	ldrb.w	r3, [sp, #201]	; 0xc9
    ef64:	b9ab      	cbnz	r3, ef92 <steppers::InitPins()+0x3e2>
		 	return;
		// uint8_t oldSREG = SREG;

//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
    ef66:	b152      	cbz	r2, ef7e <steppers::InitPins()+0x3ce>
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    ef68:	f89d 30ca 	ldrb.w	r3, [sp, #202]	; 0xca
    ef6c:	f89d 00c8 	ldrb.w	r0, [sp, #200]	; 0xc8
    ef70:	f04f 0101 	mov.w	r1, #1
    ef74:	fa01 f103 	lsl.w	r1, r1, r3
    ef78:	f7f4 fab4 	bl	34e4 <GPIO_SetValue>
    ef7c:	e009      	b.n	ef92 <steppers::InitPins()+0x3e2>
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    ef7e:	f89d 30ca 	ldrb.w	r3, [sp, #202]	; 0xca
    ef82:	f89d 00c8 	ldrb.w	r0, [sp, #200]	; 0xc8
    ef86:	f04f 0101 	mov.w	r1, #1
    ef8a:	fa01 f103 	lsl.w	r1, r1, r3
    ef8e:	f7f4 fab1 	bl	34f4 <GPIO_ClearValue>
//			_SET_DIRECTION(Y_MIN, false);
//			_WRITE(Y_MIN, invert_endstops[Y_AXIS]);
		}
		
		if ( Z_MAX != 0){
			Z_MAX_PIN.setDirection(false);
    ef92:	f241 74b4 	movw	r4, #6068	; 0x17b4
    ef96:	f2c1 0400 	movt	r4, #4096	; 0x1000
    ef9a:	a834      	add	r0, sp, #208	; 0xd0
    ef9c:	4621      	mov	r1, r4
    ef9e:	f04f 0219 	mov.w	r2, #25
    efa2:	f003 f85d 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    efa6:	a834      	add	r0, sp, #208	; 0xd0
    efa8:	f04f 0100 	mov.w	r1, #0
    efac:	f003 f878 	bl	120a0 <Pin::setDirection(bool) const>
			Z_MAX_PIN.setValue(invert_endstops[Z_AXIS]);
    efb0:	a836      	add	r0, sp, #216	; 0xd8
    efb2:	4621      	mov	r1, r4
    efb4:	f04f 0219 	mov.w	r2, #25
    efb8:	f003 f852 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    efbc:	f241 73c0 	movw	r3, #6080	; 0x17c0
    efc0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    efc4:	789a      	ldrb	r2, [r3, #2]
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    efc6:	f89d 30d9 	ldrb.w	r3, [sp, #217]	; 0xd9
    efca:	b9ab      	cbnz	r3, eff8 <steppers::InitPins()+0x448>
		 	return;
		// uint8_t oldSREG = SREG;

//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
    efcc:	b152      	cbz	r2, efe4 <steppers::InitPins()+0x434>
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    efce:	f89d 30da 	ldrb.w	r3, [sp, #218]	; 0xda
    efd2:	f89d 00d8 	ldrb.w	r0, [sp, #216]	; 0xd8
    efd6:	f04f 0101 	mov.w	r1, #1
    efda:	fa01 f103 	lsl.w	r1, r1, r3
    efde:	f7f4 fa81 	bl	34e4 <GPIO_SetValue>
    efe2:	e009      	b.n	eff8 <steppers::InitPins()+0x448>
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    efe4:	f89d 30da 	ldrb.w	r3, [sp, #218]	; 0xda
    efe8:	f89d 00d8 	ldrb.w	r0, [sp, #216]	; 0xd8
    efec:	f04f 0101 	mov.w	r1, #1
    eff0:	fa01 f103 	lsl.w	r1, r1, r3
    eff4:	f7f4 fa7e 	bl	34f4 <GPIO_ClearValue>
//			_SET_DIRECTION(Z_MAX, false);
//			_WRITE(Z_MAX, invert_endstops[Z_AXIS]);
		}if ( Z_MIN != 0) {
			Z_MIN_PIN.setDirection(false);
    eff8:	f241 74b0 	movw	r4, #6064	; 0x17b0
    effc:	f2c1 0400 	movt	r4, #4096	; 0x1000
    f000:	a838      	add	r0, sp, #224	; 0xe0
    f002:	4621      	mov	r1, r4
    f004:	f04f 0216 	mov.w	r2, #22
    f008:	f003 f82a 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    f00c:	a838      	add	r0, sp, #224	; 0xe0
    f00e:	f04f 0100 	mov.w	r1, #0
    f012:	f003 f845 	bl	120a0 <Pin::setDirection(bool) const>
			Z_MIN_PIN.setValue(invert_endstops[Z_AXIS]);
    f016:	a83a      	add	r0, sp, #232	; 0xe8
    f018:	4621      	mov	r1, r4
    f01a:	f04f 0216 	mov.w	r2, #22
    f01e:	f003 f81f 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    f022:	f241 73c0 	movw	r3, #6080	; 0x17c0
    f026:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f02a:	789a      	ldrb	r2, [r3, #2]
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    f02c:	f89d 30e9 	ldrb.w	r3, [sp, #233]	; 0xe9
    f030:	b9ab      	cbnz	r3, f05e <steppers::InitPins()+0x4ae>
		 	return;
		// uint8_t oldSREG = SREG;

//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
    f032:	b152      	cbz	r2, f04a <steppers::InitPins()+0x49a>
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    f034:	f89d 30ea 	ldrb.w	r3, [sp, #234]	; 0xea
    f038:	f89d 00e8 	ldrb.w	r0, [sp, #232]	; 0xe8
    f03c:	f04f 0101 	mov.w	r1, #1
    f040:	fa01 f103 	lsl.w	r1, r1, r3
    f044:	f7f4 fa4e 	bl	34e4 <GPIO_SetValue>
    f048:	e009      	b.n	f05e <steppers::InitPins()+0x4ae>
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    f04a:	f89d 30ea 	ldrb.w	r3, [sp, #234]	; 0xea
    f04e:	f89d 00e8 	ldrb.w	r0, [sp, #232]	; 0xe8
    f052:	f04f 0101 	mov.w	r1, #1
    f056:	fa01 f103 	lsl.w	r1, r1, r3
    f05a:	f7f4 fa4b 	bl	34f4 <GPIO_ClearValue>
//			_WRITE(Z_MIN, invert_endstops[Z_AXIS]);
		}
		
		// there are no endstops for the extruder axes
		
		xprintf("// set digi pots to stored default values" " (%s:%d)\n",_F_,_L_);
    f05e:	f24b 60e0 	movw	r0, #46816	; 0xb6e0
    f062:	f2c0 0002 	movt	r0, #2
    f066:	4910      	ldr	r1, [pc, #64]	; (f0a8 <steppers::InitPins()+0x4f8>)
    f068:	f04f 02e8 	mov.w	r2, #232	; 0xe8
    f06c:	f7f7 fc72 	bl	6954 <xprintf>
		// set digi pots to stored default values
		for(int i = 0; i < STEPPER_COUNT; i++){
    f070:	f04f 0400 	mov.w	r4, #0
			digi_pots[i].init(i);
    f074:	f241 75c4 	movw	r5, #6084	; 0x17c4
    f078:	f2c1 0500 	movt	r5, #4096	; 0x1000
    f07c:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    f080:	eb05 0040 	add.w	r0, r5, r0, lsl #1
    f084:	b2e1      	uxtb	r1, r4
    f086:	f002 f8d7 	bl	11238 <DigiPots::init(unsigned char)>
		
		// there are no endstops for the extruder axes
		
		xprintf("// set digi pots to stored default values" " (%s:%d)\n",_F_,_L_);
		// set digi pots to stored default values
		for(int i = 0; i < STEPPER_COUNT; i++){
    f08a:	f104 0401 	add.w	r4, r4, #1
    f08e:	2c04      	cmp	r4, #4
    f090:	d1f4      	bne.n	f07c <steppers::InitPins()+0x4cc>
			digi_pots[i].init(i);
		}
		xprintf("end of InitPins" " (%s:%d)\n",_F_,_L_);
    f092:	f24b 703c 	movw	r0, #46908	; 0xb73c
    f096:	f2c0 0002 	movt	r0, #2
    f09a:	4903      	ldr	r1, [pc, #12]	; (f0a8 <steppers::InitPins()+0x4f8>)
    f09c:	f04f 02ed 	mov.w	r2, #237	; 0xed
    f0a0:	f7f7 fc58 	bl	6954 <xprintf>
}
    f0a4:	b03d      	add	sp, #244	; 0xf4
    f0a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f0a8:	0002b730 	.word	0x0002b730

0000f0ac <steppers::ResetCounters()>:

void ResetCounters() {
    f0ac:	b470      	push	{r4, r5, r6}
    f0ae:	f04f 0300 	mov.w	r3, #0

	for(uint8_t i = 0; i < STEPPER_COUNT; i++){
		position[i] = 0;
    f0b2:	f241 75fc 	movw	r5, #6140	; 0x17fc
    f0b6:	f2c1 0500 	movt	r5, #4096	; 0x1000
    f0ba:	461a      	mov	r2, r3
		counter[i] = 0;
    f0bc:	f241 74a0 	movw	r4, #6048	; 0x17a0
    f0c0:	f2c1 0400 	movt	r4, #4096	; 0x1000
		delta[i] = 0;
    f0c4:	f641 0028 	movw	r0, #6184	; 0x1828
    f0c8:	f2c1 0000 	movt	r0, #4096	; 0x1000
		step_change[i] = 1;
    f0cc:	f641 0144 	movw	r1, #6212	; 0x1844
    f0d0:	f2c1 0100 	movt	r1, #4096	; 0x1000
    f0d4:	f04f 0601 	mov.w	r6, #1
}

void ResetCounters() {

	for(uint8_t i = 0; i < STEPPER_COUNT; i++){
		position[i] = 0;
    f0d8:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
		counter[i] = 0;
    f0dc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		delta[i] = 0;
    f0e0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		step_change[i] = 1;
    f0e4:	54ce      	strb	r6, [r1, r3]
    f0e6:	f103 0301 	add.w	r3, r3, #1
		xprintf("end of InitPins" " (%s:%d)\n",_F_,_L_);
}

void ResetCounters() {

	for(uint8_t i = 0; i < STEPPER_COUNT; i++){
    f0ea:	2b04      	cmp	r3, #4
    f0ec:	d1f4      	bne.n	f0d8 <steppers::ResetCounters()+0x2c>
#if defined(SINGLE_SWITCH_ENDSTOPS) && (SINGLE_SWITCH_ENDSTOPS == 1)
		endstop_play[i] = ENDSTOP_DEFAULT_PLAY;
		endstop_status[i] = ESS_UNKNOWN;
#endif //SINGLE_SWITCH_ENDSTOPS
	}
}
    f0ee:	bc70      	pop	{r4, r5, r6}
    f0f0:	4770      	bx	lr
    f0f2:	bf00      	nop

0000f0f4 <steppers::reset()>:

void reset(){
    f0f4:	b508      	push	{r3, lr}

	InitPins();
    f0f6:	f7ff fd5b 	bl	ebb0 <steppers::InitPins()>
}
    f0fa:	bd08      	pop	{r3, pc}

0000f0fc <steppers::init()>:

//public:
void init() {
    f0fc:	b510      	push	{r4, lr}
	is_running = false;
    f0fe:	f641 0370 	movw	r3, #6256	; 0x1870
    f102:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f106:	f04f 0400 	mov.w	r4, #0
    f10a:	701c      	strb	r4, [r3, #0]
	is_homing = false;
    f10c:	f641 0310 	movw	r3, #6160	; 0x1810
    f110:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f114:	701c      	strb	r4, [r3, #0]
	
	InitPins();
    f116:	f7ff fd4b 	bl	ebb0 <steppers::InitPins()>
	
	ResetCounters();
    f11a:	f7ff ffc7 	bl	f0ac <steppers::ResetCounters()>

	timer_counter = 0;
    f11e:	f641 030c 	movw	r3, #6156	; 0x180c
    f122:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f126:	601c      	str	r4, [r3, #0]

	current_block = NULL;
    f128:	f241 7388 	movw	r3, #6024	; 0x1788
    f12c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f130:	601c      	str	r4, [r3, #0]
    f132:	f641 0248 	movw	r2, #6216	; 0x1848
    f136:	f2c1 0200 	movt	r2, #4096	; 0x1000
    f13a:	f102 0308 	add.w	r3, r2, #8

	InitPins();
}

//public:
void init() {
    f13e:	f102 012c 	add.w	r1, r2, #44	; 0x2c
	timer_counter = 0;

	current_block = NULL;
	
	for (int i = 0; i < 3; i++) {
		feedrate_elements[i] = feedrate_element();
    f142:	4622      	mov	r2, r4
		feedrate_elements[i].rate = 0;
    f144:	f843 2c08 	str.w	r2, [r3, #-8]
		feedrate_elements[i].target = 0;
    f148:	601a      	str	r2, [r3, #0]
		feedrate_elements[i].steps = 0;
    f14a:	f843 2c04 	str.w	r2, [r3, #-4]
    f14e:	f103 030c 	add.w	r3, r3, #12

	timer_counter = 0;

	current_block = NULL;
	
	for (int i = 0; i < 3; i++) {
    f152:	428b      	cmp	r3, r1
    f154:	d1f6      	bne.n	f144 <steppers::init()+0x48>
		feedrate_elements[i].rate = 0;
		feedrate_elements[i].target = 0;
		feedrate_elements[i].steps = 0;
	}
	
	feedrate_steps_remaining = 0;
    f156:	f641 023c 	movw	r2, #6204	; 0x183c
    f15a:	f2c1 0200 	movt	r2, #4096	; 0x1000
    f15e:	f04f 0300 	mov.w	r3, #0
    f162:	6013      	str	r3, [r2, #0]
	feedrate = 0;
    f164:	f241 72f0 	movw	r2, #6128	; 0x17f0
    f168:	f2c1 0200 	movt	r2, #4096	; 0x1000
    f16c:	6013      	str	r3, [r2, #0]
	feedrate_inverted = 0;
    f16e:	f641 0220 	movw	r2, #6176	; 0x1820
    f172:	f2c1 0200 	movt	r2, #4096	; 0x1000
    f176:	6013      	str	r3, [r2, #0]
	feedrate_dirty = 1;
    f178:	f641 021c 	movw	r2, #6172	; 0x181c
    f17c:	f2c1 0200 	movt	r2, #4096	; 0x1000
    f180:	f04f 0101 	mov.w	r1, #1
    f184:	7011      	strb	r1, [r2, #0]
	acceleration_tick_counter = 0;
    f186:	f641 026c 	movw	r2, #6252	; 0x186c
    f18a:	f2c1 0200 	movt	r2, #4096	; 0x1000
    f18e:	6013      	str	r3, [r2, #0]
	current_feedrate_index = 0;
    f190:	f241 7294 	movw	r2, #6036	; 0x1794
    f194:	f2c1 0200 	movt	r2, #4096	; 0x1000
    f198:	7013      	strb	r3, [r2, #0]
	acceleration_on = true;
    f19a:	f241 738c 	movw	r3, #6028	; 0x178c
    f19e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f1a2:	7019      	strb	r1, [r3, #0]
}
    f1a4:	bd10      	pop	{r4, pc}
    f1a6:	bf00      	nop

0000f1a8 <steppers::abort()>:

void abort() {
    f1a8:	b508      	push	{r3, lr}
	is_running = false;
    f1aa:	f641 0370 	movw	r3, #6256	; 0x1870
    f1ae:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f1b2:	f04f 0100 	mov.w	r1, #0
    f1b6:	7019      	strb	r1, [r3, #0]
	is_homing = false;
    f1b8:	f641 0310 	movw	r3, #6160	; 0x1810
    f1bc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f1c0:	7019      	strb	r1, [r3, #0]
	timer_counter = 0;
    f1c2:	f641 030c 	movw	r3, #6156	; 0x180c
    f1c6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f1ca:	6019      	str	r1, [r3, #0]
	current_block = NULL;
    f1cc:	f241 7388 	movw	r3, #6024	; 0x1788
    f1d0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f1d4:	6019      	str	r1, [r3, #0]
	feedrate_steps_remaining = 0;
    f1d6:	f641 033c 	movw	r3, #6204	; 0x183c
    f1da:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f1de:	6019      	str	r1, [r3, #0]
	feedrate = 0;
    f1e0:	f241 73f0 	movw	r3, #6128	; 0x17f0
    f1e4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f1e8:	6019      	str	r1, [r3, #0]
	feedrate_inverted = 0;
    f1ea:	f641 0320 	movw	r3, #6176	; 0x1820
    f1ee:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f1f2:	6019      	str	r1, [r3, #0]
	feedrate_dirty = 1;
    f1f4:	f641 031c 	movw	r3, #6172	; 0x181c
    f1f8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f1fc:	f04f 0201 	mov.w	r2, #1
    f200:	701a      	strb	r2, [r3, #0]
	acceleration_tick_counter = 0;
    f202:	f641 036c 	movw	r3, #6252	; 0x186c
    f206:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f20a:	6019      	str	r1, [r3, #0]
	current_feedrate_index = 0;
    f20c:	f241 7394 	movw	r3, #6036	; 0x1794
    f210:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f214:	7019      	strb	r1, [r3, #0]

	TIM_UpdateMatchValue(LPC_TIM0,TIM_MR0_INT, INTERVAL_IN_MICROSECONDS);
    f216:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    f21a:	f04f 0280 	mov.w	r2, #128	; 0x80
    f21e:	f7f4 ffd9 	bl	41d4 <TIM_UpdateMatchValue>
//	OCR3A = INTERVAL_IN_MICROSECONDS * 16;	// TODO: find value
}
    f222:	bd08      	pop	{r3, pc}

0000f224 <steppers::definePosition(Point const&)>:

/// Define current position as given point
void definePosition(const Point& position_in) {
    f224:	b570      	push	{r4, r5, r6, lr}
    f226:	4606      	mov	r6, r0
	for (int i = 0; i < STEPPER_COUNT; i++) {
    f228:	f04f 0400 	mov.w	r4, #0
		position[i] = position_in[i];
    f22c:	f241 75fc 	movw	r5, #6140	; 0x17fc
    f230:	f2c1 0500 	movt	r5, #4096	; 0x1000
    f234:	4630      	mov	r0, r6
    f236:	4621      	mov	r1, r4
    f238:	f7fe fc80 	bl	db3c <Point::operator[](unsigned int) const>
    f23c:	6803      	ldr	r3, [r0, #0]
    f23e:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
//	OCR3A = INTERVAL_IN_MICROSECONDS * 16;	// TODO: find value
}

/// Define current position as given point
void definePosition(const Point& position_in) {
	for (int i = 0; i < STEPPER_COUNT; i++) {
    f242:	f104 0401 	add.w	r4, r4, #1
    f246:	2c04      	cmp	r4, #4
    f248:	d1f4      	bne.n	f234 <steppers::definePosition(Point const&)+0x10>
		position[i] = position_in[i];
	}
}
    f24a:	bd70      	pop	{r4, r5, r6, pc}

0000f24c <steppers::getPosition()>:

/// Get current position
const Point getPosition() {
    f24c:	b570      	push	{r4, r5, r6, lr}
    f24e:	b082      	sub	sp, #8
    f250:	4604      	mov	r4, r0
#if STEPPER_COUNT > 3
	return Point(position[0],position[1],position[2],position[3],position[4]);
    f252:	f241 75fc 	movw	r5, #6140	; 0x17fc
    f256:	f2c1 0500 	movt	r5, #4096	; 0x1000
    f25a:	6829      	ldr	r1, [r5, #0]
    f25c:	686a      	ldr	r2, [r5, #4]
    f25e:	68ab      	ldr	r3, [r5, #8]
    f260:	68ee      	ldr	r6, [r5, #12]
    f262:	692d      	ldr	r5, [r5, #16]
    f264:	9600      	str	r6, [sp, #0]
    f266:	9501      	str	r5, [sp, #4]
    f268:	f7fe fc5e 	bl	db28 <Point::Point(long, long, long, long, long)>
#else
	return Point(position[0],position[1],position[2]);
#endif
}
    f26c:	4620      	mov	r0, r4
    f26e:	b002      	add	sp, #8
    f270:	bd70      	pop	{r4, r5, r6, pc}
    f272:	bf00      	nop

0000f274 <steppers::setHoldZ(bool)>:

void setHoldZ(bool holdZ_in) {
	holdZ = holdZ_in;
    f274:	f241 73bc 	movw	r3, #6076	; 0x17bc
    f278:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f27c:	7018      	strb	r0, [r3, #0]
}
    f27e:	4770      	bx	lr

0000f280 <steppers::setTarget(Point)>:
	}
	
	feedrate_dirty = 0;
}

void setTarget(Point target_in) {
    f280:	b084      	sub	sp, #16
    f282:	b530      	push	{r4, r5, lr}
    f284:	b093      	sub	sp, #76	; 0x4c
    f286:	ac16      	add	r4, sp, #88	; 0x58
    f288:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	delta[X_AXIS] = target_in[X_AXIS] - position[X_AXIS];
    f28c:	4620      	mov	r0, r4
    f28e:	f04f 0100 	mov.w	r1, #0
    f292:	f7fe fc57 	bl	db44 <Point::operator[](unsigned int)>
    f296:	f241 75fc 	movw	r5, #6140	; 0x17fc
    f29a:	f2c1 0500 	movt	r5, #4096	; 0x1000
    f29e:	682b      	ldr	r3, [r5, #0]
    f2a0:	6802      	ldr	r2, [r0, #0]
    f2a2:	1ad3      	subs	r3, r2, r3
    f2a4:	f641 0428 	movw	r4, #6184	; 0x1828
    f2a8:	f2c1 0400 	movt	r4, #4096	; 0x1000
    f2ac:	6023      	str	r3, [r4, #0]
	delta[Y_AXIS] = target_in[Y_AXIS] - position[Y_AXIS];
    f2ae:	a816      	add	r0, sp, #88	; 0x58
    f2b0:	f04f 0101 	mov.w	r1, #1
    f2b4:	f7fe fc46 	bl	db44 <Point::operator[](unsigned int)>
    f2b8:	686b      	ldr	r3, [r5, #4]
    f2ba:	6802      	ldr	r2, [r0, #0]
    f2bc:	1ad3      	subs	r3, r2, r3
    f2be:	6063      	str	r3, [r4, #4]
	delta[Z_AXIS] = target_in[Z_AXIS] - position[Z_AXIS];
    f2c0:	a816      	add	r0, sp, #88	; 0x58
    f2c2:	f04f 0102 	mov.w	r1, #2
    f2c6:	f7fe fc3d 	bl	db44 <Point::operator[](unsigned int)>
    f2ca:	68ab      	ldr	r3, [r5, #8]
    f2cc:	6802      	ldr	r2, [r0, #0]
    f2ce:	1ad3      	subs	r3, r2, r3
    f2d0:	60a3      	str	r3, [r4, #8]
	delta[A_AXIS] = target_in[A_AXIS] - position[A_AXIS];
    f2d2:	a816      	add	r0, sp, #88	; 0x58
    f2d4:	f04f 0103 	mov.w	r1, #3
    f2d8:	f7fe fc34 	bl	db44 <Point::operator[](unsigned int)>
    f2dc:	68eb      	ldr	r3, [r5, #12]
    f2de:	6802      	ldr	r2, [r0, #0]
    f2e0:	1ad3      	subs	r3, r2, r3
    f2e2:	60e3      	str	r3, [r4, #12]
	delta[B_AXIS] = target_in[B_AXIS] - position[B_AXIS];
    f2e4:	a816      	add	r0, sp, #88	; 0x58
    f2e6:	f04f 0104 	mov.w	r1, #4
    f2ea:	f7fe fc2b 	bl	db44 <Point::operator[](unsigned int)>
    f2ee:	692b      	ldr	r3, [r5, #16]
    f2f0:	6802      	ldr	r2, [r0, #0]
    f2f2:	1ad3      	subs	r3, r2, r3
    f2f4:	6123      	str	r3, [r4, #16]

	// The A3982 stepper driver chip has an inverted enable.
	if(delta[X_AXIS] != 0){
    f2f6:	6823      	ldr	r3, [r4, #0]
    f2f8:	2b00      	cmp	r3, #0
    f2fa:	d074      	beq.n	f3e6 <steppers::setTarget(Point)+0x166>
		X_ENABLE_PIN.setValue(false);
    f2fc:	4668      	mov	r0, sp
    f2fe:	f241 71b8 	movw	r1, #6072	; 0x17b8
    f302:	f2c1 0100 	movt	r1, #4096	; 0x1000
    f306:	f04f 020b 	mov.w	r2, #11
    f30a:	f002 fea9 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    f30e:	f89d 3001 	ldrb.w	r3, [sp, #1]
    f312:	b94b      	cbnz	r3, f328 <steppers::setTarget(Point)+0xa8>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    f314:	f89d 3002 	ldrb.w	r3, [sp, #2]
    f318:	f89d 0000 	ldrb.w	r0, [sp]
    f31c:	f04f 0101 	mov.w	r1, #1
    f320:	fa01 f103 	lsl.w	r1, r1, r3
    f324:	f7f4 f8e6 	bl	34f4 <GPIO_ClearValue>
//		_WRITE(X_ENABLE, false);
		if(delta[X_AXIS] < 0){
    f328:	f641 0328 	movw	r3, #6184	; 0x1828
    f32c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f330:	681b      	ldr	r3, [r3, #0]
    f332:	2b00      	cmp	r3, #0
    f334:	da16      	bge.n	f364 <steppers::setTarget(Point)+0xe4>
			delta[X_AXIS] = -delta[X_AXIS];
    f336:	f641 0328 	movw	r3, #6184	; 0x1828
    f33a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f33e:	681a      	ldr	r2, [r3, #0]
    f340:	f1c2 0200 	rsb	r2, r2, #0
    f344:	601a      	str	r2, [r3, #0]
			direction[X_AXIS] = false;
    f346:	f641 0340 	movw	r3, #6208	; 0x1840
    f34a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f34e:	f04f 0200 	mov.w	r2, #0
    f352:	701a      	strb	r2, [r3, #0]
			step_change[X_AXIS] = -1;
    f354:	f641 0344 	movw	r3, #6212	; 0x1844
    f358:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f35c:	f04f 02ff 	mov.w	r2, #255	; 0xff
    f360:	701a      	strb	r2, [r3, #0]
    f362:	e00b      	b.n	f37c <steppers::setTarget(Point)+0xfc>
		}else{
			direction[X_AXIS] = true;
    f364:	f641 0340 	movw	r3, #6208	; 0x1840
    f368:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f36c:	f04f 0201 	mov.w	r2, #1
    f370:	701a      	strb	r2, [r3, #0]
			step_change[X_AXIS] = 1;
    f372:	f641 0344 	movw	r3, #6212	; 0x1844
    f376:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f37a:	701a      	strb	r2, [r3, #0]
			}
		X_DIR_PIN.setValue(invert_axis[X_AXIS] ? !direction[X_AXIS] : direction[X_AXIS]);
    f37c:	a802      	add	r0, sp, #8
    f37e:	f241 71b8 	movw	r1, #6072	; 0x17b8
    f382:	f2c1 0100 	movt	r1, #4096	; 0x1000
    f386:	f04f 020c 	mov.w	r2, #12
    f38a:	f002 fe69 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    f38e:	f641 0318 	movw	r3, #6168	; 0x1818
    f392:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f396:	781b      	ldrb	r3, [r3, #0]
    f398:	b13b      	cbz	r3, f3aa <steppers::setTarget(Point)+0x12a>
    f39a:	f641 0340 	movw	r3, #6208	; 0x1840
    f39e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f3a2:	781a      	ldrb	r2, [r3, #0]
    f3a4:	f082 0201 	eor.w	r2, r2, #1
    f3a8:	e004      	b.n	f3b4 <steppers::setTarget(Point)+0x134>
    f3aa:	f641 0340 	movw	r3, #6208	; 0x1840
    f3ae:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f3b2:	781a      	ldrb	r2, [r3, #0]
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    f3b4:	f89d 3009 	ldrb.w	r3, [sp, #9]
    f3b8:	b9ab      	cbnz	r3, f3e6 <steppers::setTarget(Point)+0x166>
		 	return;
		// uint8_t oldSREG = SREG;

//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
    f3ba:	b152      	cbz	r2, f3d2 <steppers::setTarget(Point)+0x152>
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    f3bc:	f89d 300a 	ldrb.w	r3, [sp, #10]
    f3c0:	f89d 0008 	ldrb.w	r0, [sp, #8]
    f3c4:	f04f 0101 	mov.w	r1, #1
    f3c8:	fa01 f103 	lsl.w	r1, r1, r3
    f3cc:	f7f4 f88a 	bl	34e4 <GPIO_SetValue>
    f3d0:	e009      	b.n	f3e6 <steppers::setTarget(Point)+0x166>
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    f3d2:	f89d 300a 	ldrb.w	r3, [sp, #10]
    f3d6:	f89d 0008 	ldrb.w	r0, [sp, #8]
    f3da:	f04f 0101 	mov.w	r1, #1
    f3de:	fa01 f103 	lsl.w	r1, r1, r3
    f3e2:	f7f4 f887 	bl	34f4 <GPIO_ClearValue>
//		_WRITE(X_DIR, invert_axis[X_AXIS] ? !direction[X_AXIS] : direction[X_AXIS]);
	}
	
	if(delta[Y_AXIS] != 0){
    f3e6:	f641 0328 	movw	r3, #6184	; 0x1828
    f3ea:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f3ee:	685b      	ldr	r3, [r3, #4]
    f3f0:	2b00      	cmp	r3, #0
    f3f2:	d074      	beq.n	f4de <steppers::setTarget(Point)+0x25e>
		Y_ENABLE_PIN.setValue(false);
    f3f4:	a804      	add	r0, sp, #16
    f3f6:	f241 719c 	movw	r1, #6044	; 0x179c
    f3fa:	f2c1 0100 	movt	r1, #4096	; 0x1000
    f3fe:	f04f 020a 	mov.w	r2, #10
    f402:	f002 fe2d 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    f406:	f89d 3011 	ldrb.w	r3, [sp, #17]
    f40a:	b94b      	cbnz	r3, f420 <steppers::setTarget(Point)+0x1a0>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    f40c:	f89d 3012 	ldrb.w	r3, [sp, #18]
    f410:	f89d 0010 	ldrb.w	r0, [sp, #16]
    f414:	f04f 0101 	mov.w	r1, #1
    f418:	fa01 f103 	lsl.w	r1, r1, r3
    f41c:	f7f4 f86a 	bl	34f4 <GPIO_ClearValue>
//		_WRITE(Y_ENABLE, false);
		if(delta[Y_AXIS] < 0){
    f420:	f641 0328 	movw	r3, #6184	; 0x1828
    f424:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f428:	685b      	ldr	r3, [r3, #4]
    f42a:	2b00      	cmp	r3, #0
    f42c:	da16      	bge.n	f45c <steppers::setTarget(Point)+0x1dc>
			delta[Y_AXIS] = -delta[Y_AXIS];
    f42e:	f641 0328 	movw	r3, #6184	; 0x1828
    f432:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f436:	685a      	ldr	r2, [r3, #4]
    f438:	f1c2 0200 	rsb	r2, r2, #0
    f43c:	605a      	str	r2, [r3, #4]
			direction[Y_AXIS] = false;
    f43e:	f641 0340 	movw	r3, #6208	; 0x1840
    f442:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f446:	f04f 0200 	mov.w	r2, #0
    f44a:	705a      	strb	r2, [r3, #1]
			step_change[Y_AXIS] = -1;
    f44c:	f641 0344 	movw	r3, #6212	; 0x1844
    f450:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f454:	f04f 02ff 	mov.w	r2, #255	; 0xff
    f458:	705a      	strb	r2, [r3, #1]
    f45a:	e00b      	b.n	f474 <steppers::setTarget(Point)+0x1f4>
		}else{
			direction[Y_AXIS] = true;
    f45c:	f641 0340 	movw	r3, #6208	; 0x1840
    f460:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f464:	f04f 0201 	mov.w	r2, #1
    f468:	705a      	strb	r2, [r3, #1]
			step_change[Y_AXIS] = 1;
    f46a:	f641 0344 	movw	r3, #6212	; 0x1844
    f46e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f472:	705a      	strb	r2, [r3, #1]
			}
		Y_DIR_PIN.setValue(invert_axis[Y_AXIS] ? !direction[Y_AXIS] : direction[Y_AXIS]);
    f474:	a806      	add	r0, sp, #24
    f476:	f241 71b0 	movw	r1, #6064	; 0x17b0
    f47a:	f2c1 0100 	movt	r1, #4096	; 0x1000
    f47e:	f04f 021d 	mov.w	r2, #29
    f482:	f002 fded 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    f486:	f641 0318 	movw	r3, #6168	; 0x1818
    f48a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f48e:	785b      	ldrb	r3, [r3, #1]
    f490:	b13b      	cbz	r3, f4a2 <steppers::setTarget(Point)+0x222>
    f492:	f641 0340 	movw	r3, #6208	; 0x1840
    f496:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f49a:	785a      	ldrb	r2, [r3, #1]
    f49c:	f082 0201 	eor.w	r2, r2, #1
    f4a0:	e004      	b.n	f4ac <steppers::setTarget(Point)+0x22c>
    f4a2:	f641 0340 	movw	r3, #6208	; 0x1840
    f4a6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f4aa:	785a      	ldrb	r2, [r3, #1]
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    f4ac:	f89d 3019 	ldrb.w	r3, [sp, #25]
    f4b0:	b9ab      	cbnz	r3, f4de <steppers::setTarget(Point)+0x25e>
		 	return;
		// uint8_t oldSREG = SREG;

//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
    f4b2:	b152      	cbz	r2, f4ca <steppers::setTarget(Point)+0x24a>
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    f4b4:	f89d 301a 	ldrb.w	r3, [sp, #26]
    f4b8:	f89d 0018 	ldrb.w	r0, [sp, #24]
    f4bc:	f04f 0101 	mov.w	r1, #1
    f4c0:	fa01 f103 	lsl.w	r1, r1, r3
    f4c4:	f7f4 f80e 	bl	34e4 <GPIO_SetValue>
    f4c8:	e009      	b.n	f4de <steppers::setTarget(Point)+0x25e>
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    f4ca:	f89d 301a 	ldrb.w	r3, [sp, #26]
    f4ce:	f89d 0018 	ldrb.w	r0, [sp, #24]
    f4d2:	f04f 0101 	mov.w	r1, #1
    f4d6:	fa01 f103 	lsl.w	r1, r1, r3
    f4da:	f7f4 f80b 	bl	34f4 <GPIO_ClearValue>
//		_WRITE(Y_DIR, invert_axis[Y_AXIS] ? !direction[Y_AXIS] : direction[Y_AXIS]);
	}
	
	if(delta[Z_AXIS] != 0){
    f4de:	f641 0328 	movw	r3, #6184	; 0x1828
    f4e2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f4e6:	689b      	ldr	r3, [r3, #8]
    f4e8:	2b00      	cmp	r3, #0
    f4ea:	d074      	beq.n	f5d6 <steppers::setTarget(Point)+0x356>
		Z_ENABLE_PIN.setValue(false);
    f4ec:	a808      	add	r0, sp, #32
    f4ee:	f241 71b0 	movw	r1, #6064	; 0x17b0
    f4f2:	f2c1 0100 	movt	r1, #4096	; 0x1000
    f4f6:	f04f 021a 	mov.w	r2, #26
    f4fa:	f002 fdb1 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    f4fe:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    f502:	b94b      	cbnz	r3, f518 <steppers::setTarget(Point)+0x298>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    f504:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    f508:	f89d 0020 	ldrb.w	r0, [sp, #32]
    f50c:	f04f 0101 	mov.w	r1, #1
    f510:	fa01 f103 	lsl.w	r1, r1, r3
    f514:	f7f3 ffee 	bl	34f4 <GPIO_ClearValue>
//		_WRITE(Z_ENABLE, false);
		if(delta[Z_AXIS] < 0){
    f518:	f641 0328 	movw	r3, #6184	; 0x1828
    f51c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f520:	689b      	ldr	r3, [r3, #8]
    f522:	2b00      	cmp	r3, #0
    f524:	da16      	bge.n	f554 <steppers::setTarget(Point)+0x2d4>
			delta[Z_AXIS] = -delta[Z_AXIS];
    f526:	f641 0328 	movw	r3, #6184	; 0x1828
    f52a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f52e:	689a      	ldr	r2, [r3, #8]
    f530:	f1c2 0200 	rsb	r2, r2, #0
    f534:	609a      	str	r2, [r3, #8]
			direction[Z_AXIS] = false;
    f536:	f641 0340 	movw	r3, #6208	; 0x1840
    f53a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f53e:	f04f 0200 	mov.w	r2, #0
    f542:	709a      	strb	r2, [r3, #2]
			step_change[Z_AXIS] = -1;
    f544:	f641 0344 	movw	r3, #6212	; 0x1844
    f548:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f54c:	f04f 02ff 	mov.w	r2, #255	; 0xff
    f550:	709a      	strb	r2, [r3, #2]
    f552:	e00b      	b.n	f56c <steppers::setTarget(Point)+0x2ec>
		}else{
			direction[Z_AXIS] = true;
    f554:	f641 0340 	movw	r3, #6208	; 0x1840
    f558:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f55c:	f04f 0201 	mov.w	r2, #1
    f560:	709a      	strb	r2, [r3, #2]
			step_change[Z_AXIS] = 1;
    f562:	f641 0344 	movw	r3, #6212	; 0x1844
    f566:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f56a:	709a      	strb	r2, [r3, #2]
			}
		Z_DIR_PIN.setValue(invert_axis[Z_AXIS] ? !direction[Z_AXIS] : direction[Z_AXIS]);
    f56c:	a80a      	add	r0, sp, #40	; 0x28
    f56e:	f241 71b0 	movw	r1, #6064	; 0x17b0
    f572:	f2c1 0100 	movt	r1, #4096	; 0x1000
    f576:	f04f 0219 	mov.w	r2, #25
    f57a:	f002 fd71 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    f57e:	f641 0318 	movw	r3, #6168	; 0x1818
    f582:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f586:	789b      	ldrb	r3, [r3, #2]
    f588:	b13b      	cbz	r3, f59a <steppers::setTarget(Point)+0x31a>
    f58a:	f641 0340 	movw	r3, #6208	; 0x1840
    f58e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f592:	789a      	ldrb	r2, [r3, #2]
    f594:	f082 0201 	eor.w	r2, r2, #1
    f598:	e004      	b.n	f5a4 <steppers::setTarget(Point)+0x324>
    f59a:	f641 0340 	movw	r3, #6208	; 0x1840
    f59e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f5a2:	789a      	ldrb	r2, [r3, #2]
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    f5a4:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    f5a8:	b9ab      	cbnz	r3, f5d6 <steppers::setTarget(Point)+0x356>
		 	return;
		// uint8_t oldSREG = SREG;

//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
    f5aa:	b152      	cbz	r2, f5c2 <steppers::setTarget(Point)+0x342>
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    f5ac:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
    f5b0:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
    f5b4:	f04f 0101 	mov.w	r1, #1
    f5b8:	fa01 f103 	lsl.w	r1, r1, r3
    f5bc:	f7f3 ff92 	bl	34e4 <GPIO_SetValue>
    f5c0:	e009      	b.n	f5d6 <steppers::setTarget(Point)+0x356>
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    f5c2:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
    f5c6:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
    f5ca:	f04f 0101 	mov.w	r1, #1
    f5ce:	fa01 f103 	lsl.w	r1, r1, r3
    f5d2:	f7f3 ff8f 	bl	34f4 <GPIO_ClearValue>
//		_WRITE(Z_DIR, invert_axis[Z_AXIS] ? !direction[Z_AXIS] : direction[Z_AXIS]);
	}
	

#if STEPPER_COUNT > 3
	if(delta[A_AXIS] != 0){
    f5d6:	f641 0328 	movw	r3, #6184	; 0x1828
    f5da:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f5de:	68db      	ldr	r3, [r3, #12]
    f5e0:	2b00      	cmp	r3, #0
    f5e2:	d078      	beq.n	f6d6 <steppers::setTarget(Point)+0x456>
		A_ENABLE_PIN.setValue(false);
    f5e4:	a80e      	add	r0, sp, #56	; 0x38
    f5e6:	f04f 01ff 	mov.w	r1, #255	; 0xff
    f5ea:	f002 fb27 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    f5ee:	a80c      	add	r0, sp, #48	; 0x30
    f5f0:	a90e      	add	r1, sp, #56	; 0x38
    f5f2:	f04f 02ff 	mov.w	r2, #255	; 0xff
    f5f6:	f002 fd33 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    f5fa:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    f5fe:	b94b      	cbnz	r3, f614 <steppers::setTarget(Point)+0x394>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    f600:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    f604:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    f608:	f04f 0101 	mov.w	r1, #1
    f60c:	fa01 f103 	lsl.w	r1, r1, r3
    f610:	f7f3 ff70 	bl	34f4 <GPIO_ClearValue>
//		_WRITE(A_ENABLE, false);
		if(delta[A_AXIS] < 0){
    f614:	f641 0328 	movw	r3, #6184	; 0x1828
    f618:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f61c:	68db      	ldr	r3, [r3, #12]
    f61e:	2b00      	cmp	r3, #0
    f620:	da16      	bge.n	f650 <steppers::setTarget(Point)+0x3d0>
			delta[A_AXIS] = -delta[A_AXIS];
    f622:	f641 0328 	movw	r3, #6184	; 0x1828
    f626:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f62a:	68da      	ldr	r2, [r3, #12]
    f62c:	f1c2 0200 	rsb	r2, r2, #0
    f630:	60da      	str	r2, [r3, #12]
			direction[A_AXIS] = false;
    f632:	f641 0340 	movw	r3, #6208	; 0x1840
    f636:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f63a:	f04f 0200 	mov.w	r2, #0
    f63e:	70da      	strb	r2, [r3, #3]
			step_change[A_AXIS] = -1;
    f640:	f641 0344 	movw	r3, #6212	; 0x1844
    f644:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f648:	f04f 02ff 	mov.w	r2, #255	; 0xff
    f64c:	70da      	strb	r2, [r3, #3]
    f64e:	e00b      	b.n	f668 <steppers::setTarget(Point)+0x3e8>
		}else{
			direction[A_AXIS] = true;
    f650:	f641 0340 	movw	r3, #6208	; 0x1840
    f654:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f658:	f04f 0201 	mov.w	r2, #1
    f65c:	70da      	strb	r2, [r3, #3]
			step_change[A_AXIS] = 1;
    f65e:	f641 0344 	movw	r3, #6212	; 0x1844
    f662:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f666:	70da      	strb	r2, [r3, #3]
			}
		A_DIR_PIN.setValue(invert_axis[A_AXIS] ? !direction[A_AXIS] : direction[A_AXIS]);
    f668:	a811      	add	r0, sp, #68	; 0x44
    f66a:	f04f 01ff 	mov.w	r1, #255	; 0xff
    f66e:	f002 fae5 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    f672:	a80f      	add	r0, sp, #60	; 0x3c
    f674:	a911      	add	r1, sp, #68	; 0x44
    f676:	f04f 02ff 	mov.w	r2, #255	; 0xff
    f67a:	f002 fcf1 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    f67e:	f641 0318 	movw	r3, #6168	; 0x1818
    f682:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f686:	78db      	ldrb	r3, [r3, #3]
    f688:	b13b      	cbz	r3, f69a <steppers::setTarget(Point)+0x41a>
    f68a:	f641 0340 	movw	r3, #6208	; 0x1840
    f68e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f692:	78da      	ldrb	r2, [r3, #3]
    f694:	f082 0201 	eor.w	r2, r2, #1
    f698:	e004      	b.n	f6a4 <steppers::setTarget(Point)+0x424>
    f69a:	f641 0340 	movw	r3, #6208	; 0x1840
    f69e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f6a2:	78da      	ldrb	r2, [r3, #3]
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    f6a4:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    f6a8:	b9ab      	cbnz	r3, f6d6 <steppers::setTarget(Point)+0x456>
		 	return;
		// uint8_t oldSREG = SREG;

//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
    f6aa:	b152      	cbz	r2, f6c2 <steppers::setTarget(Point)+0x442>
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    f6ac:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
    f6b0:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    f6b4:	f04f 0101 	mov.w	r1, #1
    f6b8:	fa01 f103 	lsl.w	r1, r1, r3
    f6bc:	f7f3 ff12 	bl	34e4 <GPIO_SetValue>
    f6c0:	e009      	b.n	f6d6 <steppers::setTarget(Point)+0x456>
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    f6c2:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
    f6c6:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    f6ca:	f04f 0101 	mov.w	r1, #1
    f6ce:	fa01 f103 	lsl.w	r1, r1, r3
    f6d2:	f7f3 ff0f 	bl	34f4 <GPIO_ClearValue>
		B_DIR_PIN.setValue(invert_axis[B_AXIS] ? !direction[B_AXIS] : direction[B_AXIS]);
//		_WRITE(B_DIR, invert_axis[B_AXIS] ? !direction[B_AXIS] : direction[B_AXIS]);
	}
#endif	

}
    f6d6:	b013      	add	sp, #76	; 0x4c
    f6d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    f6dc:	b004      	add	sp, #16
    f6de:	4770      	bx	lr

0000f6e0 <steppers::getNextMove()>:


/// load up the next movement
/// WARNING: called from inside the ISR, so get out fast
bool getNextMove() {
    f6e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    f6e2:	b083      	sub	sp, #12
//	xprintf("getNextMove" " (%s:%d)\n",_F_,_L_);
	is_running = false; // this ensures that the interrupt does not .. interrupt us
    f6e4:	f641 0370 	movw	r3, #6256	; 0x1870
    f6e8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f6ec:	f04f 0200 	mov.w	r2, #0
    f6f0:	701a      	strb	r2, [r3, #0]

	if (current_block != NULL) {
    f6f2:	f241 7388 	movw	r3, #6024	; 0x1788
    f6f6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f6fa:	681b      	ldr	r3, [r3, #0]
    f6fc:	b173      	cbz	r3, f71c <steppers::getNextMove()+0x3c>
		current_block->flags &= ~planner::Block::Busy;
    f6fe:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
    f702:	f022 0201 	bic.w	r2, r2, #1
    f706:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		planner::doneWithNextBlock();
    f70a:	f7fd fbc9 	bl	cea0 <planner::doneWithNextBlock()>
		current_block = NULL;
    f70e:	f241 7388 	movw	r3, #6024	; 0x1788
    f712:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f716:	f04f 0200 	mov.w	r2, #0
    f71a:	601a      	str	r2, [r3, #0]
	}

	if (!planner::isReady()) {
    f71c:	f7fd fba0 	bl	ce60 <planner::isReady()>
    f720:	b960      	cbnz	r0, f73c <steppers::getNextMove()+0x5c>
		is_running = !planner::isBufferEmpty();
    f722:	f7fd fb91 	bl	ce48 <planner::isBufferEmpty()>
    f726:	f080 0001 	eor.w	r0, r0, #1
    f72a:	b2c0      	uxtb	r0, r0
    f72c:	f641 0370 	movw	r3, #6256	; 0x1870
    f730:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f734:	7018      	strb	r0, [r3, #0]
		return false;
    f736:	f04f 0000 	mov.w	r0, #0
    f73a:	e14f      	b.n	f9dc <steppers::getNextMove()+0x2fc>
	}

	current_block = planner::getNextBlock();
    f73c:	f7fd fba4 	bl	ce88 <planner::getNextBlock()>
    f740:	f241 7488 	movw	r4, #6024	; 0x1788
    f744:	f2c1 0400 	movt	r4, #4096	; 0x1000
    f748:	6020      	str	r0, [r4, #0]

	// Mark block as busy (being executed by the stepper interrupt)
	// Also mark it a locked
	current_block->flags |= (planner::Block::Busy | planner::Block::Locked);
    f74a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
    f74e:	f043 0321 	orr.w	r3, r3, #33	; 0x21
    f752:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48

	Point &target = current_block->target;

	int32_t max_delta = current_block->step_event_count;
    f756:	8a85      	ldrh	r5, [r0, #20]
	
	setTarget(target);
    f758:	6806      	ldr	r6, [r0, #0]
    f75a:	6841      	ldr	r1, [r0, #4]
    f75c:	6882      	ldr	r2, [r0, #8]
    f75e:	68c3      	ldr	r3, [r0, #12]
    f760:	6900      	ldr	r0, [r0, #16]
    f762:	9000      	str	r0, [sp, #0]
    f764:	4630      	mov	r0, r6
    f766:	f7ff fd8b 	bl	f280 <steppers::setTarget(Point)>
	
	current_feedrate_index = 0;
    f76a:	f241 7394 	movw	r3, #6036	; 0x1794
    f76e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f772:	f04f 0200 	mov.w	r2, #0
    f776:	701a      	strb	r2, [r3, #0]
	int feedrate_being_setup = 0;
	// setup acceleration
	feedrate = 0;
    f778:	f241 73f0 	movw	r3, #6128	; 0x17f0
    f77c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f780:	601a      	str	r2, [r3, #0]
	if (current_block->accelerate_until > 0) {
    f782:	6823      	ldr	r3, [r4, #0]
    f784:	8ad9      	ldrh	r1, [r3, #22]
	int32_t max_delta = current_block->step_event_count;
	
	setTarget(target);
	
	current_feedrate_index = 0;
	int feedrate_being_setup = 0;
    f786:	f04f 0200 	mov.w	r2, #0
	// setup acceleration
	feedrate = 0;
	if (current_block->accelerate_until > 0) {
    f78a:	b181      	cbz	r1, f7ae <steppers::getNextMove()+0xce>

		feedrate = current_block->initial_rate;
    f78c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    f78e:	f241 72f0 	movw	r2, #6128	; 0x17f0
    f792:	f2c1 0200 	movt	r2, #4096	; 0x1000
    f796:	6010      	str	r0, [r2, #0]

		feedrate_elements[feedrate_being_setup].steps     = current_block->accelerate_until;
    f798:	f641 0248 	movw	r2, #6216	; 0x1848
    f79c:	f2c1 0200 	movt	r2, #4096	; 0x1000
    f7a0:	6051      	str	r1, [r2, #4]
		feedrate_elements[feedrate_being_setup].rate      = current_block->acceleration_rate;
    f7a2:	69d8      	ldr	r0, [r3, #28]
    f7a4:	6010      	str	r0, [r2, #0]
		feedrate_elements[feedrate_being_setup].target    = current_block->nominal_rate;
    f7a6:	6b98      	ldr	r0, [r3, #56]	; 0x38
    f7a8:	6090      	str	r0, [r2, #8]
		feedrate_being_setup++;
    f7aa:	f04f 0201 	mov.w	r2, #1

	}

	// setup plateau
	if (current_block->decelerate_after > current_block->accelerate_until) {
    f7ae:	8b1c      	ldrh	r4, [r3, #24]
    f7b0:	42a1      	cmp	r1, r4
    f7b2:	d218      	bcs.n	f7e6 <steppers::getNextMove()+0x106>
		if (feedrate_being_setup == 0)
    f7b4:	b92a      	cbnz	r2, f7c2 <steppers::getNextMove()+0xe2>
			feedrate = current_block->nominal_rate;
    f7b6:	6b9e      	ldr	r6, [r3, #56]	; 0x38
    f7b8:	f241 70f0 	movw	r0, #6128	; 0x17f0
    f7bc:	f2c1 0000 	movt	r0, #4096	; 0x1000
    f7c0:	6006      	str	r6, [r0, #0]
			
		feedrate_elements[feedrate_being_setup].steps     = current_block->decelerate_after - current_block->accelerate_until;
    f7c2:	f641 0048 	movw	r0, #6216	; 0x1848
    f7c6:	f2c1 0000 	movt	r0, #4096	; 0x1000
    f7ca:	eb02 0742 	add.w	r7, r2, r2, lsl #1
    f7ce:	ea4f 0787 	mov.w	r7, r7, lsl #2
    f7d2:	19c6      	adds	r6, r0, r7
    f7d4:	1a61      	subs	r1, r4, r1
    f7d6:	6071      	str	r1, [r6, #4]
		feedrate_elements[feedrate_being_setup].rate      = 0;
    f7d8:	f04f 0100 	mov.w	r1, #0
    f7dc:	51c1      	str	r1, [r0, r7]
		feedrate_elements[feedrate_being_setup].target    = current_block->nominal_rate;
    f7de:	6b99      	ldr	r1, [r3, #56]	; 0x38
    f7e0:	60b1      	str	r1, [r6, #8]
		feedrate_being_setup++;
    f7e2:	f102 0201 	add.w	r2, r2, #1
	}

	// setup deceleration
	if (current_block->decelerate_after < current_block->step_event_count) {
    f7e6:	8b18      	ldrh	r0, [r3, #24]
    f7e8:	8a99      	ldrh	r1, [r3, #20]
    f7ea:	4288      	cmp	r0, r1
    f7ec:	d219      	bcs.n	f822 <steppers::getNextMove()+0x142>
		if (feedrate_being_setup == 0)
    f7ee:	b92a      	cbnz	r2, f7fc <steppers::getNextMove()+0x11c>
			feedrate = current_block->initial_rate;
    f7f0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    f7f2:	f241 71f0 	movw	r1, #6128	; 0x17f0
    f7f6:	f2c1 0100 	movt	r1, #4096	; 0x1000
    f7fa:	6008      	str	r0, [r1, #0]
		// To prevent "falling off the end" we will say we have a "bazillion" steps left...
		feedrate_elements[feedrate_being_setup].steps     = INT16_MAX; //current_block->step_event_count - current_block->decelerate_after;
    f7fc:	f641 0148 	movw	r1, #6216	; 0x1848
    f800:	f2c1 0100 	movt	r1, #4096	; 0x1000
    f804:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    f808:	ea4f 0282 	mov.w	r2, r2, lsl #2
    f80c:	1888      	adds	r0, r1, r2
    f80e:	f647 74ff 	movw	r4, #32767	; 0x7fff
    f812:	6044      	str	r4, [r0, #4]
		feedrate_elements[feedrate_being_setup].rate      = -current_block->acceleration_rate;
    f814:	69dc      	ldr	r4, [r3, #28]
    f816:	f1c4 0400 	rsb	r4, r4, #0
    f81a:	508c      	str	r4, [r1, r2]
		feedrate_elements[feedrate_being_setup].target    = current_block->final_rate;
    f81c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    f81e:	6083      	str	r3, [r0, #8]
    f820:	e00c      	b.n	f83c <steppers::getNextMove()+0x15c>
	
	} else {
		// and in case there wasn't a deceleration phase, we'll do the same for whichever phase was last...
		feedrate_elements[feedrate_being_setup-1].steps     = INT16_MAX;
    f822:	f641 0348 	movw	r3, #6216	; 0x1848
    f826:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f82a:	f102 32ff 	add.w	r2, r2, #4294967295
    f82e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    f832:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    f836:	f647 72ff 	movw	r2, #32767	; 0x7fff
    f83a:	605a      	str	r2, [r3, #4]
		// We don't setup anything else because we limit to the target speed anyway.
	}

	current_block->flags &= ~planner::Block::Locked;
    f83c:	f241 7388 	movw	r3, #6024	; 0x1788
    f840:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f844:	681b      	ldr	r3, [r3, #0]
    f846:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
    f84a:	f022 0220 	bic.w	r2, r2, #32
    f84e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	if (feedrate == 0) {
    f852:	f241 73f0 	movw	r3, #6128	; 0x17f0
    f856:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f85a:	681b      	ldr	r3, [r3, #0]
    f85c:	b93b      	cbnz	r3, f86e <steppers::getNextMove()+0x18e>
		is_running = false;
    f85e:	f641 0370 	movw	r3, #6256	; 0x1870
    f862:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f866:	f04f 0000 	mov.w	r0, #0
    f86a:	7018      	strb	r0, [r3, #0]
		return false;
    f86c:	e0b6      	b.n	f9dc <steppers::getNextMove()+0x2fc>
void setHoldZ(bool holdZ_in) {
	holdZ = holdZ_in;
}

inline void prepareFeedrateIntervals() {
	if (current_feedrate_index > 2){
    f86e:	f241 7394 	movw	r3, #6036	; 0x1794
    f872:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f876:	781b      	ldrb	r3, [r3, #0]
    f878:	2b02      	cmp	r3, #2
    f87a:	d827      	bhi.n	f8cc <steppers::getNextMove()+0x1ec>
		return;
	}

	feedrate_steps_remaining  = feedrate_elements[current_feedrate_index].steps;
    f87c:	f241 7294 	movw	r2, #6036	; 0x1794
    f880:	f2c1 0200 	movt	r2, #4096	; 0x1000
    f884:	7811      	ldrb	r1, [r2, #0]
    f886:	f641 0348 	movw	r3, #6216	; 0x1848
    f88a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f88e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    f892:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    f896:	6848      	ldr	r0, [r1, #4]
    f898:	f641 013c 	movw	r1, #6204	; 0x183c
    f89c:	f2c1 0100 	movt	r1, #4096	; 0x1000
    f8a0:	6008      	str	r0, [r1, #0]
	feedrate_changerate       = feedrate_elements[current_feedrate_index].rate;
    f8a2:	7811      	ldrb	r1, [r2, #0]
    f8a4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    f8a8:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
    f8ac:	f241 7198 	movw	r1, #6040	; 0x1798
    f8b0:	f2c1 0100 	movt	r1, #4096	; 0x1000
    f8b4:	6008      	str	r0, [r1, #0]
	feedrate_target           = feedrate_elements[current_feedrate_index].target;
    f8b6:	7812      	ldrb	r2, [r2, #0]
    f8b8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    f8bc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    f8c0:	689a      	ldr	r2, [r3, #8]
    f8c2:	f241 7390 	movw	r3, #6032	; 0x1790
    f8c6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f8ca:	601a      	str	r2, [r3, #0]
}

inline void recalcFeedrate() {
	
	if((feedrate > 32768)){
    f8cc:	f241 73f0 	movw	r3, #6128	; 0x17f0
    f8d0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f8d4:	681b      	ldr	r3, [r3, #0]
    f8d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    f8da:	dd07      	ble.n	f8ec <steppers::getNextMove()+0x20c>
		feedrate_inverted = 30;
    f8dc:	f641 0320 	movw	r3, #6176	; 0x1820
    f8e0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f8e4:	f04f 021e 	mov.w	r2, #30
    f8e8:	601a      	str	r2, [r3, #0]
    f8ea:	e038      	b.n	f95e <steppers::getNextMove()+0x27e>
	}
	else if(feedrate >= 8192)
    f8ec:	f241 73f0 	movw	r3, #6128	; 0x17f0
    f8f0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f8f4:	681b      	ldr	r3, [r3, #0]
    f8f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    f8fa:	db13      	blt.n	f924 <steppers::getNextMove()+0x244>
		feedrate_inverted = rate_table_fast[(feedrate-8192) >> 4];
    f8fc:	f241 73f0 	movw	r3, #6128	; 0x17f0
    f900:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f904:	681a      	ldr	r2, [r3, #0]
    f906:	f24b 7358 	movw	r3, #46936	; 0xb758
    f90a:	f2c0 0302 	movt	r3, #2
    f90e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
    f912:	ea4f 1222 	mov.w	r2, r2, asr #4
    f916:	5c9a      	ldrb	r2, [r3, r2]
    f918:	f641 0320 	movw	r3, #6176	; 0x1820
    f91c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f920:	601a      	str	r2, [r3, #0]
    f922:	e01c      	b.n	f95e <steppers::getNextMove()+0x27e>
//		feedrate_inverted = (int32_t)pgm_read_byte(&rate_table_fast[(feedrate-8192) >> 4]);
	else {
		if(feedrate < 32) {feedrate = 32;}
    f924:	f241 73f0 	movw	r3, #6128	; 0x17f0
    f928:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f92c:	681b      	ldr	r3, [r3, #0]
    f92e:	2b1f      	cmp	r3, #31
    f930:	bfdf      	itttt	le
    f932:	f241 73f0 	movwle	r3, #6128	; 0x17f0
    f936:	f2c1 0300 	movtle	r3, #4096	; 0x1000
    f93a:	2220      	movle	r2, #32
    f93c:	601a      	strle	r2, [r3, #0]
		feedrate_inverted = rate_table_slow[feedrate];
    f93e:	f241 73f0 	movw	r3, #6128	; 0x17f0
    f942:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f946:	681a      	ldr	r2, [r3, #0]
    f948:	f247 63e0 	movw	r3, #30432	; 0x76e0
    f94c:	f2c0 0302 	movt	r3, #2
    f950:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
    f954:	f641 0320 	movw	r3, #6176	; 0x1820
    f958:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f95c:	601a      	str	r2, [r3, #0]
//		feedrate_inverted = (int32_t)pgm_read_word(&rate_table_slow[feedrate]);
	}
	
	feedrate_dirty = 0;
    f95e:	f641 031c 	movw	r3, #6172	; 0x181c
    f962:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f966:	f04f 0200 	mov.w	r2, #0
    f96a:	701a      	strb	r2, [r3, #0]
		return false;
	}

	prepareFeedrateIntervals();
	recalcFeedrate();
	acceleration_tick_counter = TICKS_PER_ACCELERATION;
    f96c:	f641 036c 	movw	r3, #6252	; 0x186c
    f970:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f974:	f04f 0101 	mov.w	r1, #1
    f978:	6019      	str	r1, [r3, #0]

	timer_counter = 0;
    f97a:	f641 030c 	movw	r3, #6156	; 0x180c
    f97e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f982:	601a      	str	r2, [r3, #0]


	intervals = max_delta;
    f984:	f641 0324 	movw	r3, #6180	; 0x1824
    f988:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f98c:	601d      	str	r5, [r3, #0]
	intervals_remaining = intervals;
    f98e:	6818      	ldr	r0, [r3, #0]
    f990:	f641 0238 	movw	r2, #6200	; 0x1838
    f994:	f2c1 0200 	movt	r2, #4096	; 0x1000
    f998:	6010      	str	r0, [r2, #0]
	const int32_t negative_half_interval = -(intervals>>1);
    f99a:	681a      	ldr	r2, [r3, #0]
    f99c:	fa42 f201 	asr.w	r2, r2, r1
    f9a0:	f1c2 0200 	rsb	r2, r2, #0
	counter[X_AXIS] = negative_half_interval;
    f9a4:	f241 73a0 	movw	r3, #6048	; 0x17a0
    f9a8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f9ac:	601a      	str	r2, [r3, #0]
	counter[Y_AXIS] = negative_half_interval;
    f9ae:	605a      	str	r2, [r3, #4]
	counter[Z_AXIS] = negative_half_interval;
    f9b0:	609a      	str	r2, [r3, #8]
#if STEPPER_COUNT > 3
	counter[A_AXIS] = negative_half_interval;
    f9b2:	60da      	str	r2, [r3, #12]
#endif
#if STEPPER_COUNT > 4
	counter[B_AXIS] = negative_half_interval;
#endif
	is_running = true;
    f9b4:	f641 0370 	movw	r3, #6256	; 0x1870
    f9b8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f9bc:	7019      	strb	r1, [r3, #0]
	
	if(delta[Z_AXIS] > ZSTEPS_PER_MM*10){
    f9be:	f641 0328 	movw	r3, #6184	; 0x1828
    f9c2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f9c6:	689b      	ldr	r3, [r3, #8]
		TIM_UpdateMatchValue(LPC_TIM0,TIM_MR0_INT, HOMING_INTERVAL_IN_MICROSECONDS);
//		OCR3A = HOMING_INTERVAL_IN_MICROSECONDS * 16;	//TODO find value for this
	} else {
		TIM_UpdateMatchValue(LPC_TIM0,TIM_MR0_INT, INTERVAL_IN_MICROSECONDS);
    f9c8:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    f9cc:	f04f 0100 	mov.w	r1, #0
    f9d0:	f04f 0280 	mov.w	r2, #128	; 0x80
    f9d4:	f7f4 fbfe 	bl	41d4 <TIM_UpdateMatchValue>
//		OCR3A = INTERVAL_IN_MICROSECONDS * 16;	//TODO find value for this
	}
	return true;
    f9d8:	f04f 0001 	mov.w	r0, #1
}
    f9dc:	b003      	add	sp, #12
    f9de:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000f9e0 <steppers::startHoming(bool, unsigned char, unsigned long)>:


/// Start homing
void startHoming(const bool maximums, const uint8_t axes_enabled, const uint32_t us_per_step) {
    f9e0:	b530      	push	{r4, r5, lr}
    f9e2:	b08d      	sub	sp, #52	; 0x34
    f9e4:	4605      	mov	r5, r0
    f9e6:	460c      	mov	r4, r1
	intervals_remaining = INT32_MAX;
    f9e8:	f641 0338 	movw	r3, #6200	; 0x1838
    f9ec:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f9f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    f9f4:	6019      	str	r1, [r3, #0]
	intervals = 1;
    f9f6:	f641 0324 	movw	r3, #6180	; 0x1824
    f9fa:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f9fe:	f04f 0101 	mov.w	r1, #1
    fa02:	6019      	str	r1, [r3, #0]
	feedrate_inverted = us_per_step;
    fa04:	f641 0320 	movw	r3, #6176	; 0x1820
    fa08:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fa0c:	601a      	str	r2, [r3, #0]
	// ToDo: Return to using the interval if the us_per_step > INTERVAL_IN_MICROSECONDS
	const int32_t negative_half_interval = -1;
	TIM_UpdateMatchValue(LPC_TIM0,TIM_MR0_INT, HOMING_INTERVAL_IN_MICROSECONDS);
    fa0e:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    fa12:	f04f 0100 	mov.w	r1, #0
    fa16:	f04f 0280 	mov.w	r2, #128	; 0x80
    fa1a:	f7f4 fbdb 	bl	41d4 <TIM_UpdateMatchValue>
//	OCR3A = HOMING_INTERVAL_IN_MICROSECONDS * 16;	//TODO find value for this
	
	
	for (int i = 0; i < STEPPER_COUNT; i++) {
		counter[i] = negative_half_interval;
    fa1e:	f241 72a0 	movw	r2, #6048	; 0x17a0
    fa22:	f2c1 0200 	movt	r2, #4096	; 0x1000
    fa26:	f04f 30ff 	mov.w	r0, #4294967295
    fa2a:	6010      	str	r0, [r2, #0]
		delta[i] = 0;
    fa2c:	f641 0328 	movw	r3, #6184	; 0x1828
    fa30:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fa34:	f04f 0100 	mov.w	r1, #0
    fa38:	6019      	str	r1, [r3, #0]
	TIM_UpdateMatchValue(LPC_TIM0,TIM_MR0_INT, HOMING_INTERVAL_IN_MICROSECONDS);
//	OCR3A = HOMING_INTERVAL_IN_MICROSECONDS * 16;	//TODO find value for this
	
	
	for (int i = 0; i < STEPPER_COUNT; i++) {
		counter[i] = negative_half_interval;
    fa3a:	6050      	str	r0, [r2, #4]
		delta[i] = 0;
    fa3c:	6059      	str	r1, [r3, #4]
	TIM_UpdateMatchValue(LPC_TIM0,TIM_MR0_INT, HOMING_INTERVAL_IN_MICROSECONDS);
//	OCR3A = HOMING_INTERVAL_IN_MICROSECONDS * 16;	//TODO find value for this
	
	
	for (int i = 0; i < STEPPER_COUNT; i++) {
		counter[i] = negative_half_interval;
    fa3e:	6090      	str	r0, [r2, #8]
		delta[i] = 0;
    fa40:	6099      	str	r1, [r3, #8]
	TIM_UpdateMatchValue(LPC_TIM0,TIM_MR0_INT, HOMING_INTERVAL_IN_MICROSECONDS);
//	OCR3A = HOMING_INTERVAL_IN_MICROSECONDS * 16;	//TODO find value for this
	
	
	for (int i = 0; i < STEPPER_COUNT; i++) {
		counter[i] = negative_half_interval;
    fa42:	60d0      	str	r0, [r2, #12]
		delta[i] = 0;
    fa44:	60d9      	str	r1, [r3, #12]
	}
	
	// The A3982 stepper driver chip has an inverted enable.
	if ((axes_enabled & (1<<X_AXIS)) != 0) {
    fa46:	f014 0f01 	tst.w	r4, #1
    fa4a:	d063      	beq.n	fb14 <steppers::startHoming(bool, unsigned char, unsigned long)+0x134>
		direction[X_AXIS] = maximums;
    fa4c:	f641 0340 	movw	r3, #6208	; 0x1840
    fa50:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fa54:	701d      	strb	r5, [r3, #0]
		X_DIR_PIN.setValue(invert_axis[X_AXIS] ? !direction[X_AXIS] : direction[X_AXIS]);
    fa56:	4668      	mov	r0, sp
    fa58:	f241 71b8 	movw	r1, #6072	; 0x17b8
    fa5c:	f2c1 0100 	movt	r1, #4096	; 0x1000
    fa60:	f04f 020c 	mov.w	r2, #12
    fa64:	f002 fafc 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    fa68:	f641 0318 	movw	r3, #6168	; 0x1818
    fa6c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fa70:	781b      	ldrb	r3, [r3, #0]
    fa72:	b13b      	cbz	r3, fa84 <steppers::startHoming(bool, unsigned char, unsigned long)+0xa4>
    fa74:	f641 0340 	movw	r3, #6208	; 0x1840
    fa78:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fa7c:	781a      	ldrb	r2, [r3, #0]
    fa7e:	f082 0201 	eor.w	r2, r2, #1
    fa82:	e004      	b.n	fa8e <steppers::startHoming(bool, unsigned char, unsigned long)+0xae>
    fa84:	f641 0340 	movw	r3, #6208	; 0x1840
    fa88:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fa8c:	781a      	ldrb	r2, [r3, #0]
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    fa8e:	f89d 3001 	ldrb.w	r3, [sp, #1]
    fa92:	b9ab      	cbnz	r3, fac0 <steppers::startHoming(bool, unsigned char, unsigned long)+0xe0>
		 	return;
		// uint8_t oldSREG = SREG;

//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
    fa94:	b152      	cbz	r2, faac <steppers::startHoming(bool, unsigned char, unsigned long)+0xcc>
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    fa96:	f89d 3002 	ldrb.w	r3, [sp, #2]
    fa9a:	f89d 0000 	ldrb.w	r0, [sp]
    fa9e:	f04f 0101 	mov.w	r1, #1
    faa2:	fa01 f103 	lsl.w	r1, r1, r3
    faa6:	f7f3 fd1d 	bl	34e4 <GPIO_SetValue>
    faaa:	e009      	b.n	fac0 <steppers::startHoming(bool, unsigned char, unsigned long)+0xe0>
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    faac:	f89d 3002 	ldrb.w	r3, [sp, #2]
    fab0:	f89d 0000 	ldrb.w	r0, [sp]
    fab4:	f04f 0101 	mov.w	r1, #1
    fab8:	fa01 f103 	lsl.w	r1, r1, r3
    fabc:	f7f3 fd1a 	bl	34f4 <GPIO_ClearValue>
//		_WRITE(X_DIR, invert_axis[X_AXIS] ? !direction[X_AXIS] : direction[X_AXIS]);
		X_ENABLE_PIN.setValue(false);
    fac0:	a802      	add	r0, sp, #8
    fac2:	f241 71b8 	movw	r1, #6072	; 0x17b8
    fac6:	f2c1 0100 	movt	r1, #4096	; 0x1000
    faca:	f04f 020b 	mov.w	r2, #11
    face:	f002 fac7 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    fad2:	f89d 3009 	ldrb.w	r3, [sp, #9]
    fad6:	b94b      	cbnz	r3, faec <steppers::startHoming(bool, unsigned char, unsigned long)+0x10c>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    fad8:	f89d 300a 	ldrb.w	r3, [sp, #10]
    fadc:	f89d 0008 	ldrb.w	r0, [sp, #8]
    fae0:	f04f 0101 	mov.w	r1, #1
    fae4:	fa01 f103 	lsl.w	r1, r1, r3
    fae8:	f7f3 fd04 	bl	34f4 <GPIO_ClearValue>
//		_WRITE(X_ENABLE, false);
		delta[X_AXIS] = 1;
    faec:	f641 0328 	movw	r3, #6184	; 0x1828
    faf0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    faf4:	f04f 0201 	mov.w	r2, #1
    faf8:	601a      	str	r2, [r3, #0]
		step_change[X_AXIS] = direction[X_AXIS] ? 1 : -1;
    fafa:	f641 0340 	movw	r3, #6208	; 0x1840
    fafe:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fb02:	781b      	ldrb	r3, [r3, #0]
    fb04:	2b00      	cmp	r3, #0
    fb06:	bf08      	it	eq
    fb08:	22ff      	moveq	r2, #255	; 0xff
    fb0a:	f641 0344 	movw	r3, #6212	; 0x1844
    fb0e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fb12:	701a      	strb	r2, [r3, #0]
	}
	
	if ((axes_enabled & (1<<Y_AXIS)) != 0) {
    fb14:	f014 0f02 	tst.w	r4, #2
    fb18:	d063      	beq.n	fbe2 <steppers::startHoming(bool, unsigned char, unsigned long)+0x202>
		direction[Y_AXIS] = maximums;
    fb1a:	f641 0340 	movw	r3, #6208	; 0x1840
    fb1e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fb22:	705d      	strb	r5, [r3, #1]
		Y_DIR_PIN.setValue(invert_axis[Y_AXIS] ? !direction[Y_AXIS] : direction[Y_AXIS]);
    fb24:	a804      	add	r0, sp, #16
    fb26:	f241 71b0 	movw	r1, #6064	; 0x17b0
    fb2a:	f2c1 0100 	movt	r1, #4096	; 0x1000
    fb2e:	f04f 021d 	mov.w	r2, #29
    fb32:	f002 fa95 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    fb36:	f641 0318 	movw	r3, #6168	; 0x1818
    fb3a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fb3e:	785b      	ldrb	r3, [r3, #1]
    fb40:	b13b      	cbz	r3, fb52 <steppers::startHoming(bool, unsigned char, unsigned long)+0x172>
    fb42:	f641 0340 	movw	r3, #6208	; 0x1840
    fb46:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fb4a:	785a      	ldrb	r2, [r3, #1]
    fb4c:	f082 0201 	eor.w	r2, r2, #1
    fb50:	e004      	b.n	fb5c <steppers::startHoming(bool, unsigned char, unsigned long)+0x17c>
    fb52:	f641 0340 	movw	r3, #6208	; 0x1840
    fb56:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fb5a:	785a      	ldrb	r2, [r3, #1]
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    fb5c:	f89d 3011 	ldrb.w	r3, [sp, #17]
    fb60:	b9ab      	cbnz	r3, fb8e <steppers::startHoming(bool, unsigned char, unsigned long)+0x1ae>
		 	return;
		// uint8_t oldSREG = SREG;

//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
    fb62:	b152      	cbz	r2, fb7a <steppers::startHoming(bool, unsigned char, unsigned long)+0x19a>
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    fb64:	f89d 3012 	ldrb.w	r3, [sp, #18]
    fb68:	f89d 0010 	ldrb.w	r0, [sp, #16]
    fb6c:	f04f 0101 	mov.w	r1, #1
    fb70:	fa01 f103 	lsl.w	r1, r1, r3
    fb74:	f7f3 fcb6 	bl	34e4 <GPIO_SetValue>
    fb78:	e009      	b.n	fb8e <steppers::startHoming(bool, unsigned char, unsigned long)+0x1ae>
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    fb7a:	f89d 3012 	ldrb.w	r3, [sp, #18]
    fb7e:	f89d 0010 	ldrb.w	r0, [sp, #16]
    fb82:	f04f 0101 	mov.w	r1, #1
    fb86:	fa01 f103 	lsl.w	r1, r1, r3
    fb8a:	f7f3 fcb3 	bl	34f4 <GPIO_ClearValue>
//		_WRITE(Y_DIR, invert_axis[Y_AXIS] ? !direction[Y_AXIS] : direction[Y_AXIS]);
		Y_ENABLE_PIN.setValue(false);
    fb8e:	a806      	add	r0, sp, #24
    fb90:	f241 719c 	movw	r1, #6044	; 0x179c
    fb94:	f2c1 0100 	movt	r1, #4096	; 0x1000
    fb98:	f04f 020a 	mov.w	r2, #10
    fb9c:	f002 fa60 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    fba0:	f89d 3019 	ldrb.w	r3, [sp, #25]
    fba4:	b94b      	cbnz	r3, fbba <steppers::startHoming(bool, unsigned char, unsigned long)+0x1da>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    fba6:	f89d 301a 	ldrb.w	r3, [sp, #26]
    fbaa:	f89d 0018 	ldrb.w	r0, [sp, #24]
    fbae:	f04f 0101 	mov.w	r1, #1
    fbb2:	fa01 f103 	lsl.w	r1, r1, r3
    fbb6:	f7f3 fc9d 	bl	34f4 <GPIO_ClearValue>
//		_WRITE(Y_ENABLE, false);
		delta[Y_AXIS] = 1;
    fbba:	f641 0328 	movw	r3, #6184	; 0x1828
    fbbe:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fbc2:	f04f 0201 	mov.w	r2, #1
    fbc6:	605a      	str	r2, [r3, #4]
		step_change[Y_AXIS] = direction[Y_AXIS] ? 1 : -1;
    fbc8:	f641 0340 	movw	r3, #6208	; 0x1840
    fbcc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fbd0:	785b      	ldrb	r3, [r3, #1]
    fbd2:	2b00      	cmp	r3, #0
    fbd4:	bf08      	it	eq
    fbd6:	22ff      	moveq	r2, #255	; 0xff
    fbd8:	f641 0344 	movw	r3, #6212	; 0x1844
    fbdc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fbe0:	705a      	strb	r2, [r3, #1]
	}
	
	if ((axes_enabled & (1<<Z_AXIS)) != 0) {
    fbe2:	f014 0f04 	tst.w	r4, #4
    fbe6:	d063      	beq.n	fcb0 <steppers::startHoming(bool, unsigned char, unsigned long)+0x2d0>
		direction[Z_AXIS] = maximums;
    fbe8:	f641 0340 	movw	r3, #6208	; 0x1840
    fbec:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fbf0:	709d      	strb	r5, [r3, #2]
		Z_DIR_PIN.setValue(invert_axis[Z_AXIS] ? !direction[Z_AXIS] : direction[Z_AXIS]);
    fbf2:	a808      	add	r0, sp, #32
    fbf4:	f241 71b0 	movw	r1, #6064	; 0x17b0
    fbf8:	f2c1 0100 	movt	r1, #4096	; 0x1000
    fbfc:	f04f 0219 	mov.w	r2, #25
    fc00:	f002 fa2e 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
    fc04:	f641 0318 	movw	r3, #6168	; 0x1818
    fc08:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fc0c:	789b      	ldrb	r3, [r3, #2]
    fc0e:	b13b      	cbz	r3, fc20 <steppers::startHoming(bool, unsigned char, unsigned long)+0x240>
    fc10:	f641 0340 	movw	r3, #6208	; 0x1840
    fc14:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fc18:	789a      	ldrb	r2, [r3, #2]
    fc1a:	f082 0201 	eor.w	r2, r2, #1
    fc1e:	e004      	b.n	fc2a <steppers::startHoming(bool, unsigned char, unsigned long)+0x24a>
    fc20:	f641 0340 	movw	r3, #6208	; 0x1840
    fc24:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fc28:	789a      	ldrb	r2, [r3, #2]
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    fc2a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    fc2e:	b9ab      	cbnz	r3, fc5c <steppers::startHoming(bool, unsigned char, unsigned long)+0x27c>
		 	return;
		// uint8_t oldSREG = SREG;

//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
    fc30:	b152      	cbz	r2, fc48 <steppers::startHoming(bool, unsigned char, unsigned long)+0x268>
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    fc32:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    fc36:	f89d 0020 	ldrb.w	r0, [sp, #32]
    fc3a:	f04f 0101 	mov.w	r1, #1
    fc3e:	fa01 f103 	lsl.w	r1, r1, r3
    fc42:	f7f3 fc4f 	bl	34e4 <GPIO_SetValue>
    fc46:	e009      	b.n	fc5c <steppers::startHoming(bool, unsigned char, unsigned long)+0x27c>
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    fc48:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    fc4c:	f89d 0020 	ldrb.w	r0, [sp, #32]
    fc50:	f04f 0101 	mov.w	r1, #1
    fc54:	fa01 f103 	lsl.w	r1, r1, r3
    fc58:	f7f3 fc4c 	bl	34f4 <GPIO_ClearValue>
//		_WRITE(Z_DIR, invert_axis[Z_AXIS] ? !direction[Z_AXIS] : direction[Z_AXIS]);
		Z_ENABLE_PIN.setValue( false);
    fc5c:	a80a      	add	r0, sp, #40	; 0x28
    fc5e:	f241 71b0 	movw	r1, #6064	; 0x17b0
    fc62:	f2c1 0100 	movt	r1, #4096	; 0x1000
    fc66:	f04f 021a 	mov.w	r2, #26
    fc6a:	f002 f9f9 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    fc6e:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    fc72:	b94b      	cbnz	r3, fc88 <steppers::startHoming(bool, unsigned char, unsigned long)+0x2a8>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    fc74:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
    fc78:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
    fc7c:	f04f 0101 	mov.w	r1, #1
    fc80:	fa01 f103 	lsl.w	r1, r1, r3
    fc84:	f7f3 fc36 	bl	34f4 <GPIO_ClearValue>
//		_WRITE(Z_ENABLE, false);
		delta[Z_AXIS] = 1;
    fc88:	f641 0328 	movw	r3, #6184	; 0x1828
    fc8c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fc90:	f04f 0201 	mov.w	r2, #1
    fc94:	609a      	str	r2, [r3, #8]
		step_change[Z_AXIS] = direction[Z_AXIS] ? 1 : -1;
    fc96:	f641 0340 	movw	r3, #6208	; 0x1840
    fc9a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fc9e:	789b      	ldrb	r3, [r3, #2]
    fca0:	2b00      	cmp	r3, #0
    fca2:	bf08      	it	eq
    fca4:	22ff      	moveq	r2, #255	; 0xff
    fca6:	f641 0344 	movw	r3, #6212	; 0x1844
    fcaa:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fcae:	709a      	strb	r2, [r3, #2]
	}
	
	timer_counter = feedrate_inverted;
    fcb0:	f641 0320 	movw	r3, #6176	; 0x1820
    fcb4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fcb8:	681a      	ldr	r2, [r3, #0]
    fcba:	f641 030c 	movw	r3, #6156	; 0x180c
    fcbe:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fcc2:	601a      	str	r2, [r3, #0]
	is_homing = true;
    fcc4:	f641 0310 	movw	r3, #6160	; 0x1810
    fcc8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fccc:	f04f 0201 	mov.w	r2, #1
    fcd0:	701a      	strb	r2, [r3, #0]
}
    fcd2:	b00d      	add	sp, #52	; 0x34
    fcd4:	bd30      	pop	{r4, r5, pc}
    fcd6:	bf00      	nop

0000fcd8 <steppers::enableAxis(unsigned char, bool)>:

/// Enable/disable the given axis.
void enableAxis(uint8_t index, bool enable) {
    fcd8:	b510      	push	{r4, lr}
    fcda:	b08c      	sub	sp, #48	; 0x30
    fcdc:	460c      	mov	r4, r1
	
	// The A3982 stepper driver chip has an inverted enable.
	switch(index){
    fcde:	2804      	cmp	r0, #4
    fce0:	f200 80ba 	bhi.w	fe58 <steppers::enableAxis(unsigned char, bool)+0x180>
    fce4:	e8df f000 	tbb	[pc, r0]
    fce8:	714d2803 	.word	0x714d2803
    fcec:	96          	.byte	0x96
    fced:	00          	.byte	0x00
		case X_AXIS: 
			X_ENABLE_PIN.setValue(!enable);
    fcee:	a801      	add	r0, sp, #4
    fcf0:	f241 71b8 	movw	r1, #6072	; 0x17b8
    fcf4:	f2c1 0100 	movt	r1, #4096	; 0x1000
    fcf8:	f04f 020b 	mov.w	r2, #11
    fcfc:	f002 f9b0 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    fd00:	f89d 3005 	ldrb.w	r3, [sp, #5]
    fd04:	2b00      	cmp	r3, #0
    fd06:	f040 80a7 	bne.w	fe58 <steppers::enableAxis(unsigned char, bool)+0x180>
		 	return;
		// uint8_t oldSREG = SREG;

//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
    fd0a:	b954      	cbnz	r4, fd22 <steppers::enableAxis(unsigned char, bool)+0x4a>
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    fd0c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fd10:	f89d 0004 	ldrb.w	r0, [sp, #4]
    fd14:	f04f 0101 	mov.w	r1, #1
    fd18:	fa01 f103 	lsl.w	r1, r1, r3
    fd1c:	f7f3 fbe2 	bl	34e4 <GPIO_SetValue>
    fd20:	e09a      	b.n	fe58 <steppers::enableAxis(unsigned char, bool)+0x180>
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    fd22:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fd26:	f89d 0004 	ldrb.w	r0, [sp, #4]
    fd2a:	f04f 0101 	mov.w	r1, #1
    fd2e:	fa01 f103 	lsl.w	r1, r1, r3
    fd32:	f7f3 fbdf 	bl	34f4 <GPIO_ClearValue>
    fd36:	e08f      	b.n	fe58 <steppers::enableAxis(unsigned char, bool)+0x180>
//			_WRITE(X_ENABLE, !enable);
			break;
        case Y_AXIS: 
			Y_ENABLE_PIN.setValue(!enable);
    fd38:	a803      	add	r0, sp, #12
    fd3a:	f241 719c 	movw	r1, #6044	; 0x179c
    fd3e:	f2c1 0100 	movt	r1, #4096	; 0x1000
    fd42:	f04f 020a 	mov.w	r2, #10
    fd46:	f002 f98b 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    fd4a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    fd4e:	2b00      	cmp	r3, #0
    fd50:	f040 8082 	bne.w	fe58 <steppers::enableAxis(unsigned char, bool)+0x180>
		 	return;
		// uint8_t oldSREG = SREG;

//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
    fd54:	b954      	cbnz	r4, fd6c <steppers::enableAxis(unsigned char, bool)+0x94>
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    fd56:	f89d 300e 	ldrb.w	r3, [sp, #14]
    fd5a:	f89d 000c 	ldrb.w	r0, [sp, #12]
    fd5e:	f04f 0101 	mov.w	r1, #1
    fd62:	fa01 f103 	lsl.w	r1, r1, r3
    fd66:	f7f3 fbbd 	bl	34e4 <GPIO_SetValue>
    fd6a:	e075      	b.n	fe58 <steppers::enableAxis(unsigned char, bool)+0x180>
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    fd6c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    fd70:	f89d 000c 	ldrb.w	r0, [sp, #12]
    fd74:	f04f 0101 	mov.w	r1, #1
    fd78:	fa01 f103 	lsl.w	r1, r1, r3
    fd7c:	f7f3 fbba 	bl	34f4 <GPIO_ClearValue>
    fd80:	e06a      	b.n	fe58 <steppers::enableAxis(unsigned char, bool)+0x180>
//			_WRITE(Y_ENABLE, !enable);
			break;
		case Z_AXIS: 
			Z_ENABLE_PIN.setValue(!enable);
    fd82:	a805      	add	r0, sp, #20
    fd84:	f241 71b0 	movw	r1, #6064	; 0x17b0
    fd88:	f2c1 0100 	movt	r1, #4096	; 0x1000
    fd8c:	f04f 021a 	mov.w	r2, #26
    fd90:	f002 f966 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    fd94:	f89d 3015 	ldrb.w	r3, [sp, #21]
    fd98:	2b00      	cmp	r3, #0
    fd9a:	d15d      	bne.n	fe58 <steppers::enableAxis(unsigned char, bool)+0x180>
		 	return;
		// uint8_t oldSREG = SREG;

//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
    fd9c:	b954      	cbnz	r4, fdb4 <steppers::enableAxis(unsigned char, bool)+0xdc>
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    fd9e:	f89d 3016 	ldrb.w	r3, [sp, #22]
    fda2:	f89d 0014 	ldrb.w	r0, [sp, #20]
    fda6:	f04f 0101 	mov.w	r1, #1
    fdaa:	fa01 f103 	lsl.w	r1, r1, r3
    fdae:	f7f3 fb99 	bl	34e4 <GPIO_SetValue>
    fdb2:	e051      	b.n	fe58 <steppers::enableAxis(unsigned char, bool)+0x180>
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    fdb4:	f89d 3016 	ldrb.w	r3, [sp, #22]
    fdb8:	f89d 0014 	ldrb.w	r0, [sp, #20]
    fdbc:	f04f 0101 	mov.w	r1, #1
    fdc0:	fa01 f103 	lsl.w	r1, r1, r3
    fdc4:	f7f3 fb96 	bl	34f4 <GPIO_ClearValue>
    fdc8:	e046      	b.n	fe58 <steppers::enableAxis(unsigned char, bool)+0x180>
//			_WRITE(Z_ENABLE, !enable);
			break;
		case A_AXIS: 
			A_ENABLE_PIN.setValue(!enable);
    fdca:	a809      	add	r0, sp, #36	; 0x24
    fdcc:	f04f 01ff 	mov.w	r1, #255	; 0xff
    fdd0:	f001 ff34 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
    fdd4:	a807      	add	r0, sp, #28
    fdd6:	a909      	add	r1, sp, #36	; 0x24
    fdd8:	f04f 02ff 	mov.w	r2, #255	; 0xff
    fddc:	f002 f940 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    fde0:	f89d 301d 	ldrb.w	r3, [sp, #29]
    fde4:	bbc3      	cbnz	r3, fe58 <steppers::enableAxis(unsigned char, bool)+0x180>
		 	return;
		// uint8_t oldSREG = SREG;

//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
    fde6:	b954      	cbnz	r4, fdfe <steppers::enableAxis(unsigned char, bool)+0x126>
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    fde8:	f89d 301e 	ldrb.w	r3, [sp, #30]
    fdec:	f89d 001c 	ldrb.w	r0, [sp, #28]
    fdf0:	f04f 0101 	mov.w	r1, #1
    fdf4:	fa01 f103 	lsl.w	r1, r1, r3
    fdf8:	f7f3 fb74 	bl	34e4 <GPIO_SetValue>
    fdfc:	e02c      	b.n	fe58 <steppers::enableAxis(unsigned char, bool)+0x180>
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    fdfe:	f89d 301e 	ldrb.w	r3, [sp, #30]
    fe02:	f89d 001c 	ldrb.w	r0, [sp, #28]
    fe06:	f04f 0101 	mov.w	r1, #1
    fe0a:	fa01 f103 	lsl.w	r1, r1, r3
    fe0e:	f7f3 fb71 	bl	34f4 <GPIO_ClearValue>
    fe12:	e021      	b.n	fe58 <steppers::enableAxis(unsigned char, bool)+0x180>
//			_WRITE(A_ENABLE, !enable);
			break;
		case B_AXIS: 
			B_ENABLE_PIN.setValue(!enable);
    fe14:	a80a      	add	r0, sp, #40	; 0x28
    fe16:	f241 71b4 	movw	r1, #6068	; 0x17b4
    fe1a:	f2c1 0100 	movt	r1, #4096	; 0x1000
    fe1e:	f04f 021a 	mov.w	r2, #26
    fe22:	f002 f91d 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    fe26:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    fe2a:	b9ab      	cbnz	r3, fe58 <steppers::enableAxis(unsigned char, bool)+0x180>
		 	return;
		// uint8_t oldSREG = SREG;

//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
    fe2c:	b954      	cbnz	r4, fe44 <steppers::enableAxis(unsigned char, bool)+0x16c>
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    fe2e:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
    fe32:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
    fe36:	f04f 0101 	mov.w	r1, #1
    fe3a:	fa01 f103 	lsl.w	r1, r1, r3
    fe3e:	f7f3 fb51 	bl	34e4 <GPIO_SetValue>
    fe42:	e009      	b.n	fe58 <steppers::enableAxis(unsigned char, bool)+0x180>
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    fe44:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
    fe48:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
    fe4c:	f04f 0101 	mov.w	r1, #1
    fe50:	fa01 f103 	lsl.w	r1, r1, r3
    fe54:	f7f3 fb4e 	bl	34f4 <GPIO_ClearValue>
//			_WRITE(B_ENABLE, !enable);
			break;
	}
}
    fe58:	b00c      	add	sp, #48	; 0x30
    fe5a:	bd10      	pop	{r4, pc}

0000fe5c <steppers::setAxisPotValue(unsigned char, unsigned char)>:

/// set digital potentiometer for stepper axis
void setAxisPotValue(uint8_t index, uint8_t value){
    fe5c:	b508      	push	{r3, lr}
		if (index < STEPPER_COUNT) {
    fe5e:	2803      	cmp	r0, #3
    fe60:	d809      	bhi.n	fe76 <steppers::setAxisPotValue(unsigned char, unsigned char)+0x1a>
			digi_pots[index].setPotValue(value);
    fe62:	f241 73c4 	movw	r3, #6084	; 0x17c4
    fe66:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fe6a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    fe6e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    fe72:	f001 f9e7 	bl	11244 <DigiPots::setPotValue(unsigned char)>
    fe76:	bd08      	pop	{r3, pc}

0000fe78 <steppers::startRunning()>:
	}
}

void startRunning() {
	if (is_running)
    fe78:	f641 0370 	movw	r3, #6256	; 0x1870
    fe7c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fe80:	781b      	ldrb	r3, [r3, #0]
    fe82:	b933      	cbnz	r3, fe92 <steppers::startRunning()+0x1a>
		return;
	is_running = true;
    fe84:	f641 0370 	movw	r3, #6256	; 0x1870
    fe88:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fe8c:	f04f 0201 	mov.w	r2, #1
    fe90:	701a      	strb	r2, [r3, #0]
    fe92:	4770      	bx	lr

0000fe94 <steppers::getEndstopStatus()>:
	acceleration_on = on;
}

/// returns a bit field indicating the endstop status as follows
/// (7-0) : | N/A | N/A | z max | z min | y max | y min | x max | x min |
uint8_t getEndstopStatus(){
    fe94:	b510      	push	{r4, lr}
    fe96:	b08c      	sub	sp, #48	; 0x30

	uint8_t status = 0;
	status |= Z_MAX_PIN.getValue() ? 0x20 : 0;
    fe98:	4668      	mov	r0, sp
    fe9a:	f241 71b4 	movw	r1, #6068	; 0x17b4
    fe9e:	f2c1 0100 	movt	r1, #4096	; 0x1000
    fea2:	f04f 0219 	mov.w	r2, #25
    fea6:	f002 f8db 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
	Pin(const LPCPort& port_in, uint8_t pin_index_in);
	Pin(const Pin& other_pin);
	bool isNull() const;
	void setDirection(bool out) const;
	bool /*Pin::*/getValue() const {
		if (is_null)
    feaa:	f89d 3001 	ldrb.w	r3, [sp, #1]
    feae:	b97b      	cbnz	r3, fed0 <steppers::getEndstopStatus()+0x3c>
			return false; // null pin is always low ... ?
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
    feb0:	f89d 0000 	ldrb.w	r0, [sp]
    feb4:	f7f3 fb30 	bl	3518 <FIO_ReadValue>
    feb8:	f89d 3002 	ldrb.w	r3, [sp, #2]
    febc:	f04f 0201 	mov.w	r2, #1
    fec0:	fa02 f303 	lsl.w	r3, r2, r3
    fec4:	4003      	ands	r3, r0
    fec6:	f013 0fff 	tst.w	r3, #255	; 0xff
    feca:	bf18      	it	ne
    fecc:	2420      	movne	r4, #32
    fece:	d101      	bne.n	fed4 <steppers::getEndstopStatus()+0x40>
    fed0:	f04f 0400 	mov.w	r4, #0
	status |= Z_MIN_PIN.getValue() ? 0x10 : 0;
    fed4:	a802      	add	r0, sp, #8
    fed6:	f241 71b0 	movw	r1, #6064	; 0x17b0
    feda:	f2c1 0100 	movt	r1, #4096	; 0x1000
    fede:	f04f 0216 	mov.w	r2, #22
    fee2:	f002 f8bd 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
	Pin(const LPCPort& port_in, uint8_t pin_index_in);
	Pin(const Pin& other_pin);
	bool isNull() const;
	void setDirection(bool out) const;
	bool /*Pin::*/getValue() const {
		if (is_null)
    fee6:	f89d 3009 	ldrb.w	r3, [sp, #9]
    feea:	b97b      	cbnz	r3, ff0c <steppers::getEndstopStatus()+0x78>
			return false; // null pin is always low ... ?
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
    feec:	f89d 0008 	ldrb.w	r0, [sp, #8]
    fef0:	f7f3 fb12 	bl	3518 <FIO_ReadValue>
    fef4:	f89d 300a 	ldrb.w	r3, [sp, #10]
    fef8:	f04f 0201 	mov.w	r2, #1
    fefc:	fa02 f303 	lsl.w	r3, r2, r3
    ff00:	4003      	ands	r3, r0
    ff02:	f013 0fff 	tst.w	r3, #255	; 0xff
    ff06:	bf18      	it	ne
    ff08:	2310      	movne	r3, #16
    ff0a:	d101      	bne.n	ff10 <steppers::getEndstopStatus()+0x7c>
    ff0c:	f04f 0300 	mov.w	r3, #0
    ff10:	431c      	orrs	r4, r3
	status |= Y_MAX_PIN.getValue() ? 0x08 : 0;
    ff12:	a804      	add	r0, sp, #16
    ff14:	f241 71b0 	movw	r1, #6064	; 0x17b0
    ff18:	f2c1 0100 	movt	r1, #4096	; 0x1000
    ff1c:	f04f 0217 	mov.w	r2, #23
    ff20:	f002 f89e 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
	Pin(const LPCPort& port_in, uint8_t pin_index_in);
	Pin(const Pin& other_pin);
	bool isNull() const;
	void setDirection(bool out) const;
	bool /*Pin::*/getValue() const {
		if (is_null)
    ff24:	f89d 3011 	ldrb.w	r3, [sp, #17]
    ff28:	b97b      	cbnz	r3, ff4a <steppers::getEndstopStatus()+0xb6>
			return false; // null pin is always low ... ?
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
    ff2a:	f89d 0010 	ldrb.w	r0, [sp, #16]
    ff2e:	f7f3 faf3 	bl	3518 <FIO_ReadValue>
    ff32:	f89d 3012 	ldrb.w	r3, [sp, #18]
    ff36:	f04f 0201 	mov.w	r2, #1
    ff3a:	fa02 f303 	lsl.w	r3, r2, r3
    ff3e:	4003      	ands	r3, r0
    ff40:	f013 0fff 	tst.w	r3, #255	; 0xff
    ff44:	bf18      	it	ne
    ff46:	2308      	movne	r3, #8
    ff48:	d101      	bne.n	ff4e <steppers::getEndstopStatus()+0xba>
    ff4a:	f04f 0300 	mov.w	r3, #0
    ff4e:	431c      	orrs	r4, r3
	status |= Y_MIN_PIN.getValue() ? 0x04 : 0;
    ff50:	a806      	add	r0, sp, #24
    ff52:	f241 71b0 	movw	r1, #6064	; 0x17b0
    ff56:	f2c1 0100 	movt	r1, #4096	; 0x1000
    ff5a:	f04f 021b 	mov.w	r2, #27
    ff5e:	f002 f87f 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
	Pin(const LPCPort& port_in, uint8_t pin_index_in);
	Pin(const Pin& other_pin);
	bool isNull() const;
	void setDirection(bool out) const;
	bool /*Pin::*/getValue() const {
		if (is_null)
    ff62:	f89d 3019 	ldrb.w	r3, [sp, #25]
    ff66:	b97b      	cbnz	r3, ff88 <steppers::getEndstopStatus()+0xf4>
			return false; // null pin is always low ... ?
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
    ff68:	f89d 0018 	ldrb.w	r0, [sp, #24]
    ff6c:	f7f3 fad4 	bl	3518 <FIO_ReadValue>
    ff70:	f89d 301a 	ldrb.w	r3, [sp, #26]
    ff74:	f04f 0201 	mov.w	r2, #1
    ff78:	fa02 f303 	lsl.w	r3, r2, r3
    ff7c:	4003      	ands	r3, r0
    ff7e:	f013 0fff 	tst.w	r3, #255	; 0xff
    ff82:	bf18      	it	ne
    ff84:	2304      	movne	r3, #4
    ff86:	d101      	bne.n	ff8c <steppers::getEndstopStatus()+0xf8>
    ff88:	f04f 0300 	mov.w	r3, #0
    ff8c:	431c      	orrs	r4, r3
	status |= X_MAX_PIN.getValue() ? 0x02 : 0;
    ff8e:	a808      	add	r0, sp, #32
    ff90:	f241 719c 	movw	r1, #6044	; 0x179c
    ff94:	f2c1 0100 	movt	r1, #4096	; 0x1000
    ff98:	f04f 020b 	mov.w	r2, #11
    ff9c:	f002 f860 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
	Pin(const LPCPort& port_in, uint8_t pin_index_in);
	Pin(const Pin& other_pin);
	bool isNull() const;
	void setDirection(bool out) const;
	bool /*Pin::*/getValue() const {
		if (is_null)
    ffa0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    ffa4:	b97b      	cbnz	r3, ffc6 <steppers::getEndstopStatus()+0x132>
			return false; // null pin is always low ... ?
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
    ffa6:	f89d 0020 	ldrb.w	r0, [sp, #32]
    ffaa:	f7f3 fab5 	bl	3518 <FIO_ReadValue>
    ffae:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    ffb2:	f04f 0201 	mov.w	r2, #1
    ffb6:	fa02 f303 	lsl.w	r3, r2, r3
    ffba:	4003      	ands	r3, r0
    ffbc:	f013 0fff 	tst.w	r3, #255	; 0xff
    ffc0:	bf18      	it	ne
    ffc2:	2302      	movne	r3, #2
    ffc4:	d101      	bne.n	ffca <steppers::getEndstopStatus()+0x136>
    ffc6:	f04f 0300 	mov.w	r3, #0
    ffca:	431c      	orrs	r4, r3
	status |= X_MIN_PIN.getValue() ? 0x01 : 0;
    ffcc:	a80a      	add	r0, sp, #40	; 0x28
    ffce:	f241 719c 	movw	r1, #6044	; 0x179c
    ffd2:	f2c1 0100 	movt	r1, #4096	; 0x1000
    ffd6:	f04f 0216 	mov.w	r2, #22
    ffda:	f002 f841 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
	Pin(const LPCPort& port_in, uint8_t pin_index_in);
	Pin(const Pin& other_pin);
	bool isNull() const;
	void setDirection(bool out) const;
	bool /*Pin::*/getValue() const {
		if (is_null)
    ffde:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
			return false; // null pin is always low ... ?
    ffe2:	f04f 0000 	mov.w	r0, #0
	Pin(const LPCPort& port_in, uint8_t pin_index_in);
	Pin(const Pin& other_pin);
	bool isNull() const;
	void setDirection(bool out) const;
	bool /*Pin::*/getValue() const {
		if (is_null)
    ffe6:	b97b      	cbnz	r3, 10008 <steppers::getEndstopStatus()+0x174>
			return false; // null pin is always low ... ?
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
    ffe8:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
    ffec:	f7f3 fa94 	bl	3518 <FIO_ReadValue>
    fff0:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
    fff4:	f04f 0201 	mov.w	r2, #1
    fff8:	fa02 f303 	lsl.w	r3, r2, r3
    fffc:	4003      	ands	r3, r0
    fffe:	f013 0fff 	tst.w	r3, #255	; 0xff
   10002:	bf0c      	ite	eq
   10004:	2000      	moveq	r0, #0
   10006:	2001      	movne	r0, #1
	status |= (_READ(Y_MIN)) ? 0x04 : 0;
	status |= (_READ(X_MAX)) ? 0x02 : 0;
	status |= (_READ(X_MIN)) ? 0x01 : 0; 
	*/
	return status;
}
   10008:	4320      	orrs	r0, r4
   1000a:	b00c      	add	sp, #48	; 0x30
   1000c:	bd10      	pop	{r4, pc}
   1000e:	bf00      	nop

00010010 <steppers::doInterrupt()>:


bool doInterrupt() {
   10010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10014:	b0b7      	sub	sp, #220	; 0xdc
//	xprintf("%d" " (%s:%d)\n",Motherboard::getBoard().getCurrentMillis(),_F_,_L_);
//	xprintf("%d",is_running);
	if (is_running) {
   10016:	f641 0370 	movw	r3, #6256	; 0x1870
   1001a:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1001e:	781b      	ldrb	r3, [r3, #0]
   10020:	2b00      	cmp	r3, #0
   10022:	f000 8368 	beq.w	106f6 <steppers::doInterrupt()+0x6e6>
		if (current_block == NULL) {
   10026:	f241 7388 	movw	r3, #6024	; 0x1788
   1002a:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1002e:	681b      	ldr	r3, [r3, #0]
   10030:	b94b      	cbnz	r3, 10046 <steppers::doInterrupt()+0x36>
			bool got_a_move = getNextMove();
   10032:	f7ff fb55 	bl	f6e0 <steppers::getNextMove()>
			if (!got_a_move) {
   10036:	b930      	cbnz	r0, 10046 <steppers::doInterrupt()+0x36>
				return is_running;
   10038:	f641 0370 	movw	r3, #6256	; 0x1870
   1003c:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10040:	7818      	ldrb	r0, [r3, #0]
   10042:	f000 bdc4 	b.w	10bce <steppers::doInterrupt()+0xbbe>
			}
		}
	
		timer_counter -= INTERVAL_IN_MICROSECONDS; //interval_microseconds;
   10046:	f641 030c 	movw	r3, #6156	; 0x180c
   1004a:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1004e:	681a      	ldr	r2, [r3, #0]
   10050:	f1a2 0280 	sub.w	r2, r2, #128	; 0x80
   10054:	601a      	str	r2, [r3, #0]
//		xprintf("%d" " (%s:%d)\n",timer_counter,_F_,_L_);

		if (timer_counter < 0) {
   10056:	681b      	ldr	r3, [r3, #0]
   10058:	2b00      	cmp	r3, #0
   1005a:	f280 82f9 	bge.w	10650 <steppers::doInterrupt()+0x640>
			// if we are supposed to step too fast, we simulate double-size microsteps
			int8_t feedrate_multiplier = 1;
			timer_counter += feedrate_inverted;
   1005e:	f641 030c 	movw	r3, #6156	; 0x180c
   10062:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10066:	6819      	ldr	r1, [r3, #0]
   10068:	f641 0220 	movw	r2, #6176	; 0x1820
   1006c:	f2c1 0200 	movt	r2, #4096	; 0x1000
   10070:	6812      	ldr	r2, [r2, #0]
   10072:	188a      	adds	r2, r1, r2
   10074:	601a      	str	r2, [r3, #0]
		timer_counter -= INTERVAL_IN_MICROSECONDS; //interval_microseconds;
//		xprintf("%d" " (%s:%d)\n",timer_counter,_F_,_L_);

		if (timer_counter < 0) {
			// if we are supposed to step too fast, we simulate double-size microsteps
			int8_t feedrate_multiplier = 1;
   10076:	f04f 0801 	mov.w	r8, #1
			timer_counter += feedrate_inverted;
			
			//if(acceleration_on){
				while (timer_counter < 0 && feedrate_multiplier < intervals_remaining) {
   1007a:	461a      	mov	r2, r3
   1007c:	f641 0138 	movw	r1, #6200	; 0x1838
   10080:	f2c1 0100 	movt	r1, #4096	; 0x1000
					feedrate_multiplier++;
					timer_counter += feedrate_inverted;
   10084:	f641 0420 	movw	r4, #6176	; 0x1820
   10088:	f2c1 0400 	movt	r4, #4096	; 0x1000
			// if we are supposed to step too fast, we simulate double-size microsteps
			int8_t feedrate_multiplier = 1;
			timer_counter += feedrate_inverted;
			
			//if(acceleration_on){
				while (timer_counter < 0 && feedrate_multiplier < intervals_remaining) {
   1008c:	6813      	ldr	r3, [r2, #0]
   1008e:	2b00      	cmp	r3, #0
   10090:	f280 85a0 	bge.w	10bd4 <steppers::doInterrupt()+0xbc4>
   10094:	680b      	ldr	r3, [r1, #0]
   10096:	fa4f f088 	sxtb.w	r0, r8
   1009a:	4298      	cmp	r0, r3
   1009c:	f280 859a 	bge.w	10bd4 <steppers::doInterrupt()+0xbc4>
					feedrate_multiplier++;
   100a0:	f108 0801 	add.w	r8, r8, #1
   100a4:	fa5f f888 	uxtb.w	r8, r8
					timer_counter += feedrate_inverted;
   100a8:	6810      	ldr	r0, [r2, #0]
   100aa:	6823      	ldr	r3, [r4, #0]
   100ac:	18c3      	adds	r3, r0, r3
   100ae:	6013      	str	r3, [r2, #0]
   100b0:	e7ec      	b.n	1008c <steppers::doInterrupt()+0x7c>
				axis_active[i] = IsActive(i);
			}
#else
			//TODO: Port this to handle max/min pins = NULL and non-inverted endstops ( see old stepper interface functions)
			//TODO: READ ENDSTOPS ALL AT ONCE
			axis_active[X_AXIS] = (delta[X_AXIS] != 0) && !(direction[X_AXIS] ? !X_MAX_PIN.getValue() : !X_MIN_PIN.getValue());
   100b2:	f641 0340 	movw	r3, #6208	; 0x1840
   100b6:	f2c1 0300 	movt	r3, #4096	; 0x1000
   100ba:	781b      	ldrb	r3, [r3, #0]
   100bc:	b1f3      	cbz	r3, 100fc <steppers::doInterrupt()+0xec>
   100be:	a802      	add	r0, sp, #8
   100c0:	f241 719c 	movw	r1, #6044	; 0x179c
   100c4:	f2c1 0100 	movt	r1, #4096	; 0x1000
   100c8:	f04f 020b 	mov.w	r2, #11
   100cc:	f001 ffc8 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
	Pin(const LPCPort& port_in, uint8_t pin_index_in);
	Pin(const Pin& other_pin);
	bool isNull() const;
	void setDirection(bool out) const;
	bool /*Pin::*/getValue() const {
		if (is_null)
   100d0:	f89d 3009 	ldrb.w	r3, [sp, #9]
   100d4:	f04f 0700 	mov.w	r7, #0
   100d8:	bb73      	cbnz	r3, 10138 <steppers::doInterrupt()+0x128>
			return false; // null pin is always low ... ?
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
   100da:	f89d 0008 	ldrb.w	r0, [sp, #8]
   100de:	f7f3 fa1b 	bl	3518 <FIO_ReadValue>
   100e2:	f89d 300a 	ldrb.w	r3, [sp, #10]
   100e6:	f04f 0201 	mov.w	r2, #1
   100ea:	fa02 f303 	lsl.w	r3, r2, r3
   100ee:	4003      	ands	r3, r0
   100f0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   100f4:	1c1f      	adds	r7, r3, #0
   100f6:	bf18      	it	ne
   100f8:	2701      	movne	r7, #1
   100fa:	e01d      	b.n	10138 <steppers::doInterrupt()+0x128>
   100fc:	a804      	add	r0, sp, #16
   100fe:	f241 719c 	movw	r1, #6044	; 0x179c
   10102:	f2c1 0100 	movt	r1, #4096	; 0x1000
   10106:	f04f 0216 	mov.w	r2, #22
   1010a:	f001 ffa9 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
	Pin(const LPCPort& port_in, uint8_t pin_index_in);
	Pin(const Pin& other_pin);
	bool isNull() const;
	void setDirection(bool out) const;
	bool /*Pin::*/getValue() const {
		if (is_null)
   1010e:	f89d 3011 	ldrb.w	r3, [sp, #17]
   10112:	f04f 0700 	mov.w	r7, #0
   10116:	b97b      	cbnz	r3, 10138 <steppers::doInterrupt()+0x128>
			return false; // null pin is always low ... ?
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
   10118:	f89d 0010 	ldrb.w	r0, [sp, #16]
   1011c:	f7f3 f9fc 	bl	3518 <FIO_ReadValue>
   10120:	f89d 3012 	ldrb.w	r3, [sp, #18]
   10124:	f04f 0201 	mov.w	r2, #1
   10128:	fa02 f303 	lsl.w	r3, r2, r3
   1012c:	4003      	ands	r3, r0
   1012e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   10132:	1c1f      	adds	r7, r3, #0
   10134:	bf18      	it	ne
   10136:	2701      	movne	r7, #1
			axis_active[Y_AXIS] = (delta[Y_AXIS] != 0) && !(direction[Y_AXIS] ? !Y_MAX_PIN.getValue() : !Y_MIN_PIN.getValue());
   10138:	f641 0328 	movw	r3, #6184	; 0x1828
   1013c:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10140:	685b      	ldr	r3, [r3, #4]
   10142:	f04f 0b00 	mov.w	fp, #0
   10146:	2b00      	cmp	r3, #0
   10148:	d046      	beq.n	101d8 <steppers::doInterrupt()+0x1c8>
   1014a:	f641 0340 	movw	r3, #6208	; 0x1840
   1014e:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10152:	785b      	ldrb	r3, [r3, #1]
   10154:	b303      	cbz	r3, 10198 <steppers::doInterrupt()+0x188>
   10156:	a806      	add	r0, sp, #24
   10158:	f241 71b0 	movw	r1, #6064	; 0x17b0
   1015c:	f2c1 0100 	movt	r1, #4096	; 0x1000
   10160:	f04f 0217 	mov.w	r2, #23
   10164:	f001 ff7c 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
	Pin(const LPCPort& port_in, uint8_t pin_index_in);
	Pin(const Pin& other_pin);
	bool isNull() const;
	void setDirection(bool out) const;
	bool /*Pin::*/getValue() const {
		if (is_null)
   10168:	f89d 3019 	ldrb.w	r3, [sp, #25]
   1016c:	f04f 0b00 	mov.w	fp, #0
   10170:	bb93      	cbnz	r3, 101d8 <steppers::doInterrupt()+0x1c8>
			return false; // null pin is always low ... ?
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
   10172:	f89d 0018 	ldrb.w	r0, [sp, #24]
   10176:	f7f3 f9cf 	bl	3518 <FIO_ReadValue>
   1017a:	f89d 301a 	ldrb.w	r3, [sp, #26]
   1017e:	f04f 0201 	mov.w	r2, #1
   10182:	fa02 f303 	lsl.w	r3, r2, r3
   10186:	4003      	ands	r3, r0
   10188:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   1018c:	f113 0b00 	adds.w	fp, r3, #0
   10190:	bf18      	it	ne
   10192:	f04f 0b01 	movne.w	fp, #1
   10196:	e01f      	b.n	101d8 <steppers::doInterrupt()+0x1c8>
   10198:	a808      	add	r0, sp, #32
   1019a:	f241 71b0 	movw	r1, #6064	; 0x17b0
   1019e:	f2c1 0100 	movt	r1, #4096	; 0x1000
   101a2:	f04f 021b 	mov.w	r2, #27
   101a6:	f001 ff5b 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
	Pin(const LPCPort& port_in, uint8_t pin_index_in);
	Pin(const Pin& other_pin);
	bool isNull() const;
	void setDirection(bool out) const;
	bool /*Pin::*/getValue() const {
		if (is_null)
   101aa:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   101ae:	f04f 0b00 	mov.w	fp, #0
   101b2:	b98b      	cbnz	r3, 101d8 <steppers::doInterrupt()+0x1c8>
			return false; // null pin is always low ... ?
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
   101b4:	f89d 0020 	ldrb.w	r0, [sp, #32]
   101b8:	f7f3 f9ae 	bl	3518 <FIO_ReadValue>
   101bc:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   101c0:	f04f 0201 	mov.w	r2, #1
   101c4:	fa02 f303 	lsl.w	r3, r2, r3
   101c8:	4003      	ands	r3, r0
   101ca:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   101ce:	f113 0b00 	adds.w	fp, r3, #0
   101d2:	bf18      	it	ne
   101d4:	f04f 0b01 	movne.w	fp, #1
			axis_active[Z_AXIS] = (delta[Z_AXIS] != 0) && !(direction[Z_AXIS] ? !Z_MAX_PIN.getValue() : !Z_MIN_PIN.getValue());
   101d8:	f641 0328 	movw	r3, #6184	; 0x1828
   101dc:	f2c1 0300 	movt	r3, #4096	; 0x1000
   101e0:	689b      	ldr	r3, [r3, #8]
   101e2:	f04f 0a00 	mov.w	sl, #0
   101e6:	2b00      	cmp	r3, #0
   101e8:	d046      	beq.n	10278 <steppers::doInterrupt()+0x268>
   101ea:	f641 0340 	movw	r3, #6208	; 0x1840
   101ee:	f2c1 0300 	movt	r3, #4096	; 0x1000
   101f2:	789b      	ldrb	r3, [r3, #2]
   101f4:	b303      	cbz	r3, 10238 <steppers::doInterrupt()+0x228>
   101f6:	a80a      	add	r0, sp, #40	; 0x28
   101f8:	f241 71b4 	movw	r1, #6068	; 0x17b4
   101fc:	f2c1 0100 	movt	r1, #4096	; 0x1000
   10200:	f04f 0219 	mov.w	r2, #25
   10204:	f001 ff2c 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
	Pin(const LPCPort& port_in, uint8_t pin_index_in);
	Pin(const Pin& other_pin);
	bool isNull() const;
	void setDirection(bool out) const;
	bool /*Pin::*/getValue() const {
		if (is_null)
   10208:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
   1020c:	f04f 0a00 	mov.w	sl, #0
   10210:	bb93      	cbnz	r3, 10278 <steppers::doInterrupt()+0x268>
			return false; // null pin is always low ... ?
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
   10212:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
   10216:	f7f3 f97f 	bl	3518 <FIO_ReadValue>
   1021a:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   1021e:	f04f 0201 	mov.w	r2, #1
   10222:	fa02 f303 	lsl.w	r3, r2, r3
   10226:	4003      	ands	r3, r0
   10228:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   1022c:	f113 0a00 	adds.w	sl, r3, #0
   10230:	bf18      	it	ne
   10232:	f04f 0a01 	movne.w	sl, #1
   10236:	e01f      	b.n	10278 <steppers::doInterrupt()+0x268>
   10238:	a80c      	add	r0, sp, #48	; 0x30
   1023a:	f241 71b0 	movw	r1, #6064	; 0x17b0
   1023e:	f2c1 0100 	movt	r1, #4096	; 0x1000
   10242:	f04f 0216 	mov.w	r2, #22
   10246:	f001 ff0b 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
	Pin(const LPCPort& port_in, uint8_t pin_index_in);
	Pin(const Pin& other_pin);
	bool isNull() const;
	void setDirection(bool out) const;
	bool /*Pin::*/getValue() const {
		if (is_null)
   1024a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1024e:	f04f 0a00 	mov.w	sl, #0
   10252:	b98b      	cbnz	r3, 10278 <steppers::doInterrupt()+0x268>
			return false; // null pin is always low ... ?
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
   10254:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   10258:	f7f3 f95e 	bl	3518 <FIO_ReadValue>
   1025c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   10260:	f04f 0201 	mov.w	r2, #1
   10264:	fa02 f303 	lsl.w	r3, r2, r3
   10268:	4003      	ands	r3, r0
   1026a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   1026e:	f113 0a00 	adds.w	sl, r3, #0
   10272:	bf18      	it	ne
   10274:	f04f 0a01 	movne.w	sl, #1
//			axis_active[X_AXIS] = (delta[X_AXIS] != 0) && !(direction[X_AXIS] ? !_READ(X_MAX) : !_READ(X_MIN));
//			axis_active[Y_AXIS] = (delta[Y_AXIS] != 0) && !(direction[Y_AXIS] ? !_READ(Y_MAX) : !_READ(Y_MIN));
//			axis_active[Z_AXIS] = (delta[Z_AXIS] != 0) && !(direction[Z_AXIS] ? !_READ(Z_MAX) : !_READ(Z_MIN));
#if STEPPER_COUNT > 3
			axis_active[A_AXIS] = (delta[A_AXIS] != 0);
   10278:	f641 0328 	movw	r3, #6184	; 0x1828
   1027c:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10280:	f8d3 900c 	ldr.w	r9, [r3, #12]
#if STEPPER_COUNT > 4
			axis_active[B_AXIS] = (delta[B_AXIS] != 0); 
#endif
#endif

			for (uint8_t i = 0; i < feedrate_multiplier; i++){
   10284:	fa4f f888 	sxtb.w	r8, r8
   10288:	f1b8 0f00 	cmp.w	r8, #0
   1028c:	f340 8137 	ble.w	104fe <steppers::doInterrupt()+0x4ee>
   10290:	f04f 0500 	mov.w	r5, #0
				if(axis_active[X_AXIS]){
					counter[X_AXIS] += delta[X_AXIS] ;
   10294:	f241 74a0 	movw	r4, #6048	; 0x17a0
   10298:	f2c1 0400 	movt	r4, #4096	; 0x1000
   1029c:	461e      	mov	r6, r3
					if (counter[X_AXIS]  >= 0) {
						X_STEP_PIN.setValue(true);
   1029e:	f241 73b8 	movw	r3, #6072	; 0x17b8
   102a2:	f2c1 0300 	movt	r3, #4096	; 0x1000
   102a6:	9301      	str	r3, [sp, #4]
			axis_active[B_AXIS] = (delta[B_AXIS] != 0); 
#endif
#endif

			for (uint8_t i = 0; i < feedrate_multiplier; i++){
				if(axis_active[X_AXIS]){
   102a8:	2f00      	cmp	r7, #0
   102aa:	d041      	beq.n	10330 <steppers::doInterrupt()+0x320>
					counter[X_AXIS] += delta[X_AXIS] ;
   102ac:	6822      	ldr	r2, [r4, #0]
   102ae:	6833      	ldr	r3, [r6, #0]
   102b0:	18d3      	adds	r3, r2, r3
   102b2:	6023      	str	r3, [r4, #0]
					if (counter[X_AXIS]  >= 0) {
   102b4:	6823      	ldr	r3, [r4, #0]
   102b6:	2b00      	cmp	r3, #0
   102b8:	db3a      	blt.n	10330 <steppers::doInterrupt()+0x320>
						X_STEP_PIN.setValue(true);
   102ba:	a80e      	add	r0, sp, #56	; 0x38
   102bc:	9901      	ldr	r1, [sp, #4]
   102be:	f04f 020d 	mov.w	r2, #13
   102c2:	f001 fecd 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
   102c6:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   102ca:	b94b      	cbnz	r3, 102e0 <steppers::doInterrupt()+0x2d0>
//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
   102cc:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   102d0:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
   102d4:	f04f 0101 	mov.w	r1, #1
   102d8:	fa01 f103 	lsl.w	r1, r1, r3
   102dc:	f7f3 f902 	bl	34e4 <GPIO_SetValue>
//						_WRITE(X_STEP, true);
						counter[X_AXIS]  -= intervals ;
   102e0:	6822      	ldr	r2, [r4, #0]
   102e2:	f641 0324 	movw	r3, #6180	; 0x1824
   102e6:	f2c1 0300 	movt	r3, #4096	; 0x1000
   102ea:	681b      	ldr	r3, [r3, #0]
   102ec:	1ad3      	subs	r3, r2, r3
   102ee:	6023      	str	r3, [r4, #0]
						position[X_AXIS]  += step_change[X_AXIS] ;
   102f0:	f241 73fc 	movw	r3, #6140	; 0x17fc
   102f4:	f2c1 0300 	movt	r3, #4096	; 0x1000
   102f8:	6819      	ldr	r1, [r3, #0]
   102fa:	f641 0244 	movw	r2, #6212	; 0x1844
   102fe:	f2c1 0200 	movt	r2, #4096	; 0x1000
   10302:	7812      	ldrb	r2, [r2, #0]
   10304:	b252      	sxtb	r2, r2
   10306:	188a      	adds	r2, r1, r2
   10308:	601a      	str	r2, [r3, #0]
						X_STEP_PIN.setValue(false);
   1030a:	a810      	add	r0, sp, #64	; 0x40
   1030c:	9901      	ldr	r1, [sp, #4]
   1030e:	f04f 020d 	mov.w	r2, #13
   10312:	f001 fea5 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
   10316:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   1031a:	b94b      	cbnz	r3, 10330 <steppers::doInterrupt()+0x320>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
   1031c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   10320:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   10324:	f04f 0101 	mov.w	r1, #1
   10328:	fa01 f103 	lsl.w	r1, r1, r3
   1032c:	f7f3 f8e2 	bl	34f4 <GPIO_ClearValue>
//						_WRITE(X_STEP, false);
					}
				}
				if(axis_active[Y_AXIS])	{
   10330:	f1bb 0f00 	cmp.w	fp, #0
   10334:	d047      	beq.n	103c6 <steppers::doInterrupt()+0x3b6>
					counter[Y_AXIS] += delta[Y_AXIS] ;
   10336:	6862      	ldr	r2, [r4, #4]
   10338:	6873      	ldr	r3, [r6, #4]
   1033a:	18d3      	adds	r3, r2, r3
   1033c:	6063      	str	r3, [r4, #4]
					if (counter[Y_AXIS]  >= 0) {
   1033e:	6863      	ldr	r3, [r4, #4]
   10340:	2b00      	cmp	r3, #0
   10342:	db40      	blt.n	103c6 <steppers::doInterrupt()+0x3b6>
						Y_STEP_PIN.setValue(true);
   10344:	a812      	add	r0, sp, #72	; 0x48
   10346:	f241 71b0 	movw	r1, #6064	; 0x17b0
   1034a:	f2c1 0100 	movt	r1, #4096	; 0x1000
   1034e:	f04f 021c 	mov.w	r2, #28
   10352:	f001 fe85 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
   10356:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   1035a:	b94b      	cbnz	r3, 10370 <steppers::doInterrupt()+0x360>
//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
   1035c:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   10360:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   10364:	f04f 0101 	mov.w	r1, #1
   10368:	fa01 f103 	lsl.w	r1, r1, r3
   1036c:	f7f3 f8ba 	bl	34e4 <GPIO_SetValue>
//						_WRITE(Y_STEP, true);
						counter[Y_AXIS]  -= intervals ;
   10370:	6862      	ldr	r2, [r4, #4]
   10372:	f641 0324 	movw	r3, #6180	; 0x1824
   10376:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1037a:	681b      	ldr	r3, [r3, #0]
   1037c:	1ad3      	subs	r3, r2, r3
   1037e:	6063      	str	r3, [r4, #4]
						position[Y_AXIS]  += step_change[Y_AXIS] ;
   10380:	f241 73fc 	movw	r3, #6140	; 0x17fc
   10384:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10388:	6859      	ldr	r1, [r3, #4]
   1038a:	f641 0244 	movw	r2, #6212	; 0x1844
   1038e:	f2c1 0200 	movt	r2, #4096	; 0x1000
   10392:	7852      	ldrb	r2, [r2, #1]
   10394:	b252      	sxtb	r2, r2
   10396:	188a      	adds	r2, r1, r2
   10398:	605a      	str	r2, [r3, #4]
						Y_STEP_PIN.setValue(false);
   1039a:	a814      	add	r0, sp, #80	; 0x50
   1039c:	f241 71b0 	movw	r1, #6064	; 0x17b0
   103a0:	f2c1 0100 	movt	r1, #4096	; 0x1000
   103a4:	f04f 021c 	mov.w	r2, #28
   103a8:	f001 fe5a 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
   103ac:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
   103b0:	b94b      	cbnz	r3, 103c6 <steppers::doInterrupt()+0x3b6>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
   103b2:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
   103b6:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
   103ba:	f04f 0101 	mov.w	r1, #1
   103be:	fa01 f103 	lsl.w	r1, r1, r3
   103c2:	f7f3 f897 	bl	34f4 <GPIO_ClearValue>
//						_WRITE(Y_STEP, false);
					}
				}
				if(axis_active[Z_AXIS])	{
   103c6:	f1ba 0f00 	cmp.w	sl, #0
   103ca:	d047      	beq.n	1045c <steppers::doInterrupt()+0x44c>
					counter[Z_AXIS] += delta[Z_AXIS] ;
   103cc:	68a2      	ldr	r2, [r4, #8]
   103ce:	68b3      	ldr	r3, [r6, #8]
   103d0:	18d3      	adds	r3, r2, r3
   103d2:	60a3      	str	r3, [r4, #8]
					if (counter[Z_AXIS]  >= 0) {
   103d4:	68a3      	ldr	r3, [r4, #8]
   103d6:	2b00      	cmp	r3, #0
   103d8:	db40      	blt.n	1045c <steppers::doInterrupt()+0x44c>
						Z_STEP_PIN.setValue(true);
   103da:	a816      	add	r0, sp, #88	; 0x58
   103dc:	f241 71b0 	movw	r1, #6064	; 0x17b0
   103e0:	f2c1 0100 	movt	r1, #4096	; 0x1000
   103e4:	f04f 0218 	mov.w	r2, #24
   103e8:	f001 fe3a 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
   103ec:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
   103f0:	b94b      	cbnz	r3, 10406 <steppers::doInterrupt()+0x3f6>
//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
   103f2:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
   103f6:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
   103fa:	f04f 0101 	mov.w	r1, #1
   103fe:	fa01 f103 	lsl.w	r1, r1, r3
   10402:	f7f3 f86f 	bl	34e4 <GPIO_SetValue>
//						_WRITE(Z_STEP, true);
						counter[Z_AXIS]  -= intervals ;
   10406:	68a2      	ldr	r2, [r4, #8]
   10408:	f641 0324 	movw	r3, #6180	; 0x1824
   1040c:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10410:	681b      	ldr	r3, [r3, #0]
   10412:	1ad3      	subs	r3, r2, r3
   10414:	60a3      	str	r3, [r4, #8]
						position[Z_AXIS]  += step_change[Z_AXIS] ;
   10416:	f241 73fc 	movw	r3, #6140	; 0x17fc
   1041a:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1041e:	6899      	ldr	r1, [r3, #8]
   10420:	f641 0244 	movw	r2, #6212	; 0x1844
   10424:	f2c1 0200 	movt	r2, #4096	; 0x1000
   10428:	7892      	ldrb	r2, [r2, #2]
   1042a:	b252      	sxtb	r2, r2
   1042c:	188a      	adds	r2, r1, r2
   1042e:	609a      	str	r2, [r3, #8]
						Z_STEP_PIN.setValue(false);
   10430:	a818      	add	r0, sp, #96	; 0x60
   10432:	f241 71b0 	movw	r1, #6064	; 0x17b0
   10436:	f2c1 0100 	movt	r1, #4096	; 0x1000
   1043a:	f04f 0218 	mov.w	r2, #24
   1043e:	f001 fe0f 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
   10442:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
   10446:	b94b      	cbnz	r3, 1045c <steppers::doInterrupt()+0x44c>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
   10448:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
   1044c:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
   10450:	f04f 0101 	mov.w	r1, #1
   10454:	fa01 f103 	lsl.w	r1, r1, r3
   10458:	f7f3 f84c 	bl	34f4 <GPIO_ClearValue>
//						_WRITE(Z_STEP, false);
					}
				}
	#if STEPPER_COUNT > 3
				if(axis_active[A_AXIS]){
   1045c:	f1b9 0f00 	cmp.w	r9, #0
   10460:	d047      	beq.n	104f2 <steppers::doInterrupt()+0x4e2>
					counter[A_AXIS] += delta[A_AXIS] ;
   10462:	68e2      	ldr	r2, [r4, #12]
   10464:	68f3      	ldr	r3, [r6, #12]
   10466:	18d3      	adds	r3, r2, r3
   10468:	60e3      	str	r3, [r4, #12]
					if (counter[A_AXIS]  >= 0) {
   1046a:	68e3      	ldr	r3, [r4, #12]
   1046c:	2b00      	cmp	r3, #0
   1046e:	db40      	blt.n	104f2 <steppers::doInterrupt()+0x4e2>
						A_STEP_PIN.setValue(true);
   10470:	a81a      	add	r0, sp, #104	; 0x68
   10472:	f241 71b0 	movw	r1, #6064	; 0x17b0
   10476:	f2c1 0100 	movt	r1, #4096	; 0x1000
   1047a:	f04f 0213 	mov.w	r2, #19
   1047e:	f001 fdef 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
   10482:	f89d 3069 	ldrb.w	r3, [sp, #105]	; 0x69
   10486:	b94b      	cbnz	r3, 1049c <steppers::doInterrupt()+0x48c>
//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
   10488:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
   1048c:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
   10490:	f04f 0101 	mov.w	r1, #1
   10494:	fa01 f103 	lsl.w	r1, r1, r3
   10498:	f7f3 f824 	bl	34e4 <GPIO_SetValue>
//						_WRITE(A_STEP, true);
						counter[A_AXIS]  -= intervals ;
   1049c:	68e2      	ldr	r2, [r4, #12]
   1049e:	f641 0324 	movw	r3, #6180	; 0x1824
   104a2:	f2c1 0300 	movt	r3, #4096	; 0x1000
   104a6:	681b      	ldr	r3, [r3, #0]
   104a8:	1ad3      	subs	r3, r2, r3
   104aa:	60e3      	str	r3, [r4, #12]
						position[A_AXIS]  += step_change[A_AXIS] ;
   104ac:	f241 73fc 	movw	r3, #6140	; 0x17fc
   104b0:	f2c1 0300 	movt	r3, #4096	; 0x1000
   104b4:	68d9      	ldr	r1, [r3, #12]
   104b6:	f641 0244 	movw	r2, #6212	; 0x1844
   104ba:	f2c1 0200 	movt	r2, #4096	; 0x1000
   104be:	78d2      	ldrb	r2, [r2, #3]
   104c0:	b252      	sxtb	r2, r2
   104c2:	188a      	adds	r2, r1, r2
   104c4:	60da      	str	r2, [r3, #12]
						A_STEP_PIN.setValue(false);
   104c6:	a81c      	add	r0, sp, #112	; 0x70
   104c8:	f241 71b0 	movw	r1, #6064	; 0x17b0
   104cc:	f2c1 0100 	movt	r1, #4096	; 0x1000
   104d0:	f04f 0213 	mov.w	r2, #19
   104d4:	f001 fdc4 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
   104d8:	f89d 3071 	ldrb.w	r3, [sp, #113]	; 0x71
   104dc:	b94b      	cbnz	r3, 104f2 <steppers::doInterrupt()+0x4e2>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
   104de:	f89d 3072 	ldrb.w	r3, [sp, #114]	; 0x72
   104e2:	f89d 0070 	ldrb.w	r0, [sp, #112]	; 0x70
   104e6:	f04f 0101 	mov.w	r1, #1
   104ea:	fa01 f103 	lsl.w	r1, r1, r3
   104ee:	f7f3 f801 	bl	34f4 <GPIO_ClearValue>
#if STEPPER_COUNT > 4
			axis_active[B_AXIS] = (delta[B_AXIS] != 0); 
#endif
#endif

			for (uint8_t i = 0; i < feedrate_multiplier; i++){
   104f2:	f105 0501 	add.w	r5, r5, #1
   104f6:	b2ed      	uxtb	r5, r5
   104f8:	4545      	cmp	r5, r8
   104fa:	f6ff aed5 	blt.w	102a8 <steppers::doInterrupt()+0x298>
					}
				}
	#endif

			}
			intervals_remaining -= feedrate_multiplier;
   104fe:	f641 0338 	movw	r3, #6200	; 0x1838
   10502:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10506:	681a      	ldr	r2, [r3, #0]
   10508:	ebc8 0202 	rsb	r2, r8, r2
   1050c:	601a      	str	r2, [r3, #0]

			if (intervals_remaining <= 0) { // should never need the < part, but just in case...
   1050e:	681b      	ldr	r3, [r3, #0]
   10510:	2b00      	cmp	r3, #0
   10512:	dc08      	bgt.n	10526 <steppers::doInterrupt()+0x516>
				bool got_a_move = getNextMove();
   10514:	f7ff f8e4 	bl	f6e0 <steppers::getNextMove()>
				if (!got_a_move) {
   10518:	b928      	cbnz	r0, 10526 <steppers::doInterrupt()+0x516>
					return is_running;
   1051a:	f641 0370 	movw	r3, #6256	; 0x1870
   1051e:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10522:	7818      	ldrb	r0, [r3, #0]
   10524:	e353      	b.n	10bce <steppers::doInterrupt()+0xbbe>
				}
			}

			if ((feedrate_steps_remaining-=feedrate_multiplier) <= 0) {
   10526:	f641 033c 	movw	r3, #6204	; 0x183c
   1052a:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1052e:	681a      	ldr	r2, [r3, #0]
   10530:	ebc8 0202 	rsb	r2, r8, r2
   10534:	601a      	str	r2, [r3, #0]
   10536:	2a00      	cmp	r2, #0
   10538:	dc33      	bgt.n	105a2 <steppers::doInterrupt()+0x592>
				current_feedrate_index++;
   1053a:	f241 7394 	movw	r3, #6036	; 0x1794
   1053e:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10542:	781a      	ldrb	r2, [r3, #0]
   10544:	f102 0201 	add.w	r2, r2, #1
   10548:	b2d2      	uxtb	r2, r2
   1054a:	701a      	strb	r2, [r3, #0]
void setHoldZ(bool holdZ_in) {
	holdZ = holdZ_in;
}

inline void prepareFeedrateIntervals() {
	if (current_feedrate_index > 2){
   1054c:	781b      	ldrb	r3, [r3, #0]
   1054e:	2b02      	cmp	r3, #2
   10550:	d827      	bhi.n	105a2 <steppers::doInterrupt()+0x592>
		return;
	}

	feedrate_steps_remaining  = feedrate_elements[current_feedrate_index].steps;
   10552:	f241 7294 	movw	r2, #6036	; 0x1794
   10556:	f2c1 0200 	movt	r2, #4096	; 0x1000
   1055a:	7811      	ldrb	r1, [r2, #0]
   1055c:	f641 0348 	movw	r3, #6216	; 0x1848
   10560:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10564:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   10568:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1056c:	6848      	ldr	r0, [r1, #4]
   1056e:	f641 013c 	movw	r1, #6204	; 0x183c
   10572:	f2c1 0100 	movt	r1, #4096	; 0x1000
   10576:	6008      	str	r0, [r1, #0]
	feedrate_changerate       = feedrate_elements[current_feedrate_index].rate;
   10578:	7811      	ldrb	r1, [r2, #0]
   1057a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1057e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   10582:	f241 7198 	movw	r1, #6040	; 0x1798
   10586:	f2c1 0100 	movt	r1, #4096	; 0x1000
   1058a:	6008      	str	r0, [r1, #0]
	feedrate_target           = feedrate_elements[current_feedrate_index].target;
   1058c:	7812      	ldrb	r2, [r2, #0]
   1058e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   10592:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   10596:	689a      	ldr	r2, [r3, #8]
   10598:	f241 7390 	movw	r3, #6032	; 0x1790
   1059c:	f2c1 0300 	movt	r3, #4096	; 0x1000
   105a0:	601a      	str	r2, [r3, #0]
			if ((feedrate_steps_remaining-=feedrate_multiplier) <= 0) {
				current_feedrate_index++;
				prepareFeedrateIntervals();
			}

			if (feedrate_dirty) {
   105a2:	f641 031c 	movw	r3, #6172	; 0x181c
   105a6:	f2c1 0300 	movt	r3, #4096	; 0x1000
   105aa:	781b      	ldrb	r3, [r3, #0]
   105ac:	2b00      	cmp	r3, #0
   105ae:	d04f      	beq.n	10650 <steppers::doInterrupt()+0x640>
	feedrate_target           = feedrate_elements[current_feedrate_index].target;
}

inline void recalcFeedrate() {
	
	if((feedrate > 32768)){
   105b0:	f241 73f0 	movw	r3, #6128	; 0x17f0
   105b4:	f2c1 0300 	movt	r3, #4096	; 0x1000
   105b8:	681b      	ldr	r3, [r3, #0]
   105ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   105be:	dd07      	ble.n	105d0 <steppers::doInterrupt()+0x5c0>
		feedrate_inverted = 30;
   105c0:	f641 0320 	movw	r3, #6176	; 0x1820
   105c4:	f2c1 0300 	movt	r3, #4096	; 0x1000
   105c8:	f04f 021e 	mov.w	r2, #30
   105cc:	601a      	str	r2, [r3, #0]
   105ce:	e038      	b.n	10642 <steppers::doInterrupt()+0x632>
	}
	else if(feedrate >= 8192)
   105d0:	f241 73f0 	movw	r3, #6128	; 0x17f0
   105d4:	f2c1 0300 	movt	r3, #4096	; 0x1000
   105d8:	681b      	ldr	r3, [r3, #0]
   105da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   105de:	db13      	blt.n	10608 <steppers::doInterrupt()+0x5f8>
		feedrate_inverted = rate_table_fast[(feedrate-8192) >> 4];
   105e0:	f241 73f0 	movw	r3, #6128	; 0x17f0
   105e4:	f2c1 0300 	movt	r3, #4096	; 0x1000
   105e8:	681a      	ldr	r2, [r3, #0]
   105ea:	f24b 7358 	movw	r3, #46936	; 0xb758
   105ee:	f2c0 0302 	movt	r3, #2
   105f2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   105f6:	ea4f 1222 	mov.w	r2, r2, asr #4
   105fa:	5c9a      	ldrb	r2, [r3, r2]
   105fc:	f641 0320 	movw	r3, #6176	; 0x1820
   10600:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10604:	601a      	str	r2, [r3, #0]
   10606:	e01c      	b.n	10642 <steppers::doInterrupt()+0x632>
//		feedrate_inverted = (int32_t)pgm_read_byte(&rate_table_fast[(feedrate-8192) >> 4]);
	else {
		if(feedrate < 32) {feedrate = 32;}
   10608:	f241 73f0 	movw	r3, #6128	; 0x17f0
   1060c:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10610:	681b      	ldr	r3, [r3, #0]
   10612:	2b1f      	cmp	r3, #31
   10614:	bfdf      	itttt	le
   10616:	f241 73f0 	movwle	r3, #6128	; 0x17f0
   1061a:	f2c1 0300 	movtle	r3, #4096	; 0x1000
   1061e:	2220      	movle	r2, #32
   10620:	601a      	strle	r2, [r3, #0]
		feedrate_inverted = rate_table_slow[feedrate];
   10622:	f241 73f0 	movw	r3, #6128	; 0x17f0
   10626:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1062a:	681a      	ldr	r2, [r3, #0]
   1062c:	f247 63e0 	movw	r3, #30432	; 0x76e0
   10630:	f2c0 0302 	movt	r3, #2
   10634:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
   10638:	f641 0320 	movw	r3, #6176	; 0x1820
   1063c:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10640:	601a      	str	r2, [r3, #0]
//		feedrate_inverted = (int32_t)pgm_read_word(&rate_table_slow[feedrate]);
	}
	
	feedrate_dirty = 0;
   10642:	f641 031c 	movw	r3, #6172	; 0x181c
   10646:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1064a:	f04f 0200 	mov.w	r2, #0
   1064e:	701a      	strb	r2, [r3, #0]
			if (feedrate_dirty) {
				recalcFeedrate();
			}
		}

		if ((feedrate_changerate != 0)){
   10650:	f241 7398 	movw	r3, #6040	; 0x1798
   10654:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10658:	681b      	ldr	r3, [r3, #0]
   1065a:	2b00      	cmp	r3, #0
   1065c:	d045      	beq.n	106ea <steppers::doInterrupt()+0x6da>
			 
			// Change our feedrate. 
			feedrate += feedrate_changerate;
   1065e:	f241 72f0 	movw	r2, #6128	; 0x17f0
   10662:	f2c1 0200 	movt	r2, #4096	; 0x1000
   10666:	6810      	ldr	r0, [r2, #0]
   10668:	f241 7398 	movw	r3, #6040	; 0x1798
   1066c:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10670:	6819      	ldr	r1, [r3, #0]
   10672:	1841      	adds	r1, r0, r1
   10674:	6011      	str	r1, [r2, #0]
			feedrate_dirty = 1;
   10676:	f641 021c 	movw	r2, #6172	; 0x181c
   1067a:	f2c1 0200 	movt	r2, #4096	; 0x1000
   1067e:	f04f 0101 	mov.w	r1, #1
   10682:	7011      	strb	r1, [r2, #0]

			if ((feedrate_changerate > 0 && feedrate > feedrate_target)
   10684:	681b      	ldr	r3, [r3, #0]
   10686:	2b00      	cmp	r3, #0
   10688:	dd0b      	ble.n	106a2 <steppers::doInterrupt()+0x692>
   1068a:	f241 73f0 	movw	r3, #6128	; 0x17f0
   1068e:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10692:	681a      	ldr	r2, [r3, #0]
   10694:	f241 7390 	movw	r3, #6032	; 0x1790
   10698:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1069c:	681b      	ldr	r3, [r3, #0]
   1069e:	429a      	cmp	r2, r3
   106a0:	dc12      	bgt.n	106c8 <steppers::doInterrupt()+0x6b8>
   106a2:	f241 7398 	movw	r3, #6040	; 0x1798
   106a6:	f2c1 0300 	movt	r3, #4096	; 0x1000
   106aa:	681b      	ldr	r3, [r3, #0]
   106ac:	2b00      	cmp	r3, #0
   106ae:	da1c      	bge.n	106ea <steppers::doInterrupt()+0x6da>
   106b0:	f241 73f0 	movw	r3, #6128	; 0x17f0
   106b4:	f2c1 0300 	movt	r3, #4096	; 0x1000
   106b8:	681a      	ldr	r2, [r3, #0]
   106ba:	f241 7390 	movw	r3, #6032	; 0x1790
   106be:	f2c1 0300 	movt	r3, #4096	; 0x1000
   106c2:	681b      	ldr	r3, [r3, #0]
   106c4:	429a      	cmp	r2, r3
   106c6:	da10      	bge.n	106ea <steppers::doInterrupt()+0x6da>
			    || (feedrate_changerate < 0 && feedrate < feedrate_target)) {
				
				feedrate_changerate = 0;
   106c8:	f241 7398 	movw	r3, #6040	; 0x1798
   106cc:	f2c1 0300 	movt	r3, #4096	; 0x1000
   106d0:	f04f 0200 	mov.w	r2, #0
   106d4:	601a      	str	r2, [r3, #0]
				feedrate = feedrate_target;
   106d6:	f241 7390 	movw	r3, #6032	; 0x1790
   106da:	f2c1 0300 	movt	r3, #4096	; 0x1000
   106de:	681a      	ldr	r2, [r3, #0]
   106e0:	f241 73f0 	movw	r3, #6128	; 0x17f0
   106e4:	f2c1 0300 	movt	r3, #4096	; 0x1000
   106e8:	601a      	str	r2, [r3, #0]
			} 
		}
		return is_running;
   106ea:	f641 0370 	movw	r3, #6256	; 0x1870
   106ee:	f2c1 0300 	movt	r3, #4096	; 0x1000
   106f2:	7818      	ldrb	r0, [r3, #0]
   106f4:	e26b      	b.n	10bce <steppers::doInterrupt()+0xbbe>
	} else if (is_homing) {
   106f6:	f641 0310 	movw	r3, #6160	; 0x1810
   106fa:	f2c1 0300 	movt	r3, #4096	; 0x1000
   106fe:	781b      	ldrb	r3, [r3, #0]
		// if we're done, force a sync with the planner
		if (!is_homing)
			planner::abort();
		return is_homing;
	}
	return false;
   10700:	f04f 0000 	mov.w	r0, #0
				feedrate_changerate = 0;
				feedrate = feedrate_target;
			} 
		}
		return is_running;
	} else if (is_homing) {
   10704:	2b00      	cmp	r3, #0
   10706:	f000 8262 	beq.w	10bce <steppers::doInterrupt()+0xbbe>
		timer_counter -= HOMING_INTERVAL_IN_MICROSECONDS;//interval_microseconds;
   1070a:	f641 030c 	movw	r3, #6156	; 0x180c
   1070e:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10712:	681a      	ldr	r2, [r3, #0]
   10714:	f1a2 0280 	sub.w	r2, r2, #128	; 0x80
   10718:	601a      	str	r2, [r3, #0]
		if (timer_counter <= 0) {
   1071a:	681b      	ldr	r3, [r3, #0]
   1071c:	2b00      	cmp	r3, #0
   1071e:	f300 8249 	bgt.w	10bb4 <steppers::doInterrupt()+0xba4>
			is_homing = false;
   10722:	f641 0310 	movw	r3, #6160	; 0x1810
   10726:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1072a:	f04f 0200 	mov.w	r2, #0
   1072e:	701a      	strb	r2, [r3, #0]
			// if we are supposed to step too fast, we simulate double-size microsteps
			int8_t feedrate_multiplier = 1;
			while (timer_counter <= -feedrate_inverted) {
   10730:	f641 0320 	movw	r3, #6176	; 0x1820
   10734:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10738:	6819      	ldr	r1, [r3, #0]
   1073a:	f641 030c 	movw	r3, #6156	; 0x180c
   1073e:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10742:	681a      	ldr	r2, [r3, #0]
   10744:	f1c1 0300 	rsb	r3, r1, #0
   10748:	429a      	cmp	r2, r3
   1074a:	dd10      	ble.n	1076e <steppers::doInterrupt()+0x75e>
	} else if (is_homing) {
		timer_counter -= HOMING_INTERVAL_IN_MICROSECONDS;//interval_microseconds;
		if (timer_counter <= 0) {
			is_homing = false;
			// if we are supposed to step too fast, we simulate double-size microsteps
			int8_t feedrate_multiplier = 1;
   1074c:	f04f 0601 	mov.w	r6, #1
			while (timer_counter <= -feedrate_inverted) {
				feedrate_multiplier++;
   10750:	f04f 0700 	mov.w	r7, #0
				timer_counter += feedrate_inverted;
			}

			//TODO: Port endstop check to handle max/min pins = NULL and non-inverted endstops ( see old stepper interface functions)
			for (int8_t i = 0; i < feedrate_multiplier; i++){
				if (delta[X_AXIS] != 0){
   10754:	f641 0528 	movw	r5, #6184	; 0x1828
   10758:	f2c1 0500 	movt	r5, #4096	; 0x1000
					counter[X_AXIS] += delta[X_AXIS];
   1075c:	f241 74a0 	movw	r4, #6048	; 0x17a0
   10760:	f2c1 0400 	movt	r4, #4096	; 0x1000
					if (counter[X_AXIS] >= 0) {
						counter[X_AXIS] -= intervals;
   10764:	f641 0824 	movw	r8, #6180	; 0x1824
   10768:	f2c1 0800 	movt	r8, #4096	; 0x1000
   1076c:	e01a      	b.n	107a4 <steppers::doInterrupt()+0x794>
	} else if (is_homing) {
		timer_counter -= HOMING_INTERVAL_IN_MICROSECONDS;//interval_microseconds;
		if (timer_counter <= 0) {
			is_homing = false;
			// if we are supposed to step too fast, we simulate double-size microsteps
			int8_t feedrate_multiplier = 1;
   1076e:	f04f 0601 	mov.w	r6, #1
			while (timer_counter <= -feedrate_inverted) {
				feedrate_multiplier++;
				timer_counter += feedrate_inverted;
   10772:	f641 030c 	movw	r3, #6156	; 0x180c
   10776:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1077a:	f641 0220 	movw	r2, #6176	; 0x1820
   1077e:	f2c1 0200 	movt	r2, #4096	; 0x1000
		if (timer_counter <= 0) {
			is_homing = false;
			// if we are supposed to step too fast, we simulate double-size microsteps
			int8_t feedrate_multiplier = 1;
			while (timer_counter <= -feedrate_inverted) {
				feedrate_multiplier++;
   10782:	f106 0601 	add.w	r6, r6, #1
   10786:	b2f6      	uxtb	r6, r6
				timer_counter += feedrate_inverted;
   10788:	6818      	ldr	r0, [r3, #0]
   1078a:	6811      	ldr	r1, [r2, #0]
   1078c:	1841      	adds	r1, r0, r1
   1078e:	6019      	str	r1, [r3, #0]
		timer_counter -= HOMING_INTERVAL_IN_MICROSECONDS;//interval_microseconds;
		if (timer_counter <= 0) {
			is_homing = false;
			// if we are supposed to step too fast, we simulate double-size microsteps
			int8_t feedrate_multiplier = 1;
			while (timer_counter <= -feedrate_inverted) {
   10790:	6810      	ldr	r0, [r2, #0]
   10792:	6819      	ldr	r1, [r3, #0]
   10794:	f1c0 0000 	rsb	r0, r0, #0
   10798:	4288      	cmp	r0, r1
   1079a:	daf2      	bge.n	10782 <steppers::doInterrupt()+0x772>
				feedrate_multiplier++;
				timer_counter += feedrate_inverted;
			}

			//TODO: Port endstop check to handle max/min pins = NULL and non-inverted endstops ( see old stepper interface functions)
			for (int8_t i = 0; i < feedrate_multiplier; i++){
   1079c:	b273      	sxtb	r3, r6
   1079e:	2b00      	cmp	r3, #0
   107a0:	dcd6      	bgt.n	10750 <steppers::doInterrupt()+0x740>
   107a2:	e1f3      	b.n	10b8c <steppers::doInterrupt()+0xb7c>
				if (delta[X_AXIS] != 0){
   107a4:	682b      	ldr	r3, [r5, #0]
   107a6:	2b00      	cmp	r3, #0
   107a8:	f000 80a0 	beq.w	108ec <steppers::doInterrupt()+0x8dc>
					counter[X_AXIS] += delta[X_AXIS];
   107ac:	6822      	ldr	r2, [r4, #0]
   107ae:	682b      	ldr	r3, [r5, #0]
   107b0:	18d3      	adds	r3, r2, r3
   107b2:	6023      	str	r3, [r4, #0]
					if (counter[X_AXIS] >= 0) {
   107b4:	6823      	ldr	r3, [r4, #0]
   107b6:	2b00      	cmp	r3, #0
   107b8:	f2c0 8098 	blt.w	108ec <steppers::doInterrupt()+0x8dc>
						counter[X_AXIS] -= intervals;
   107bc:	6822      	ldr	r2, [r4, #0]
   107be:	f8d8 3000 	ldr.w	r3, [r8]
   107c2:	1ad3      	subs	r3, r2, r3
   107c4:	6023      	str	r3, [r4, #0]
						bool hit_endstop = direction[X_AXIS] ? !X_MAX_PIN.getValue() : !X_MIN_PIN.getValue();
   107c6:	f641 0340 	movw	r3, #6208	; 0x1840
   107ca:	f2c1 0300 	movt	r3, #4096	; 0x1000
   107ce:	781b      	ldrb	r3, [r3, #0]
   107d0:	b30b      	cbz	r3, 10816 <steppers::doInterrupt()+0x806>
   107d2:	a81e      	add	r0, sp, #120	; 0x78
   107d4:	f241 719c 	movw	r1, #6044	; 0x179c
   107d8:	f2c1 0100 	movt	r1, #4096	; 0x1000
   107dc:	f04f 020b 	mov.w	r2, #11
   107e0:	f001 fc3e 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
	Pin(const LPCPort& port_in, uint8_t pin_index_in);
	Pin(const Pin& other_pin);
	bool isNull() const;
	void setDirection(bool out) const;
	bool /*Pin::*/getValue() const {
		if (is_null)
   107e4:	f89d 3079 	ldrb.w	r3, [sp, #121]	; 0x79
   107e8:	b983      	cbnz	r3, 1080c <steppers::doInterrupt()+0x7fc>
			return false; // null pin is always low ... ?
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
   107ea:	f89d 0078 	ldrb.w	r0, [sp, #120]	; 0x78
   107ee:	f7f2 fe93 	bl	3518 <FIO_ReadValue>
   107f2:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
   107f6:	f04f 0201 	mov.w	r2, #1
   107fa:	fa02 f303 	lsl.w	r3, r2, r3
   107fe:	4003      	ands	r3, r0
   10800:	f013 0fff 	tst.w	r3, #255	; 0xff
   10804:	bf0c      	ite	eq
   10806:	2300      	moveq	r3, #0
   10808:	2301      	movne	r3, #1
   1080a:	e001      	b.n	10810 <steppers::doInterrupt()+0x800>
	Pin(const Pin& other_pin);
	bool isNull() const;
	void setDirection(bool out) const;
	bool /*Pin::*/getValue() const {
		if (is_null)
			return false; // null pin is always low ... ?
   1080c:	f04f 0300 	mov.w	r3, #0
   10810:	f083 0301 	eor.w	r3, r3, #1
   10814:	e020      	b.n	10858 <steppers::doInterrupt()+0x848>
   10816:	a820      	add	r0, sp, #128	; 0x80
   10818:	f241 719c 	movw	r1, #6044	; 0x179c
   1081c:	f2c1 0100 	movt	r1, #4096	; 0x1000
   10820:	f04f 0216 	mov.w	r2, #22
   10824:	f001 fc1c 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
	Pin(const LPCPort& port_in, uint8_t pin_index_in);
	Pin(const Pin& other_pin);
	bool isNull() const;
	void setDirection(bool out) const;
	bool /*Pin::*/getValue() const {
		if (is_null)
   10828:	f89d 3081 	ldrb.w	r3, [sp, #129]	; 0x81
   1082c:	b983      	cbnz	r3, 10850 <steppers::doInterrupt()+0x840>
			return false; // null pin is always low ... ?
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
   1082e:	f89d 0080 	ldrb.w	r0, [sp, #128]	; 0x80
   10832:	f7f2 fe71 	bl	3518 <FIO_ReadValue>
   10836:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
   1083a:	f04f 0201 	mov.w	r2, #1
   1083e:	fa02 f303 	lsl.w	r3, r2, r3
   10842:	4003      	ands	r3, r0
   10844:	f013 0fff 	tst.w	r3, #255	; 0xff
   10848:	bf0c      	ite	eq
   1084a:	2300      	moveq	r3, #0
   1084c:	2301      	movne	r3, #1
   1084e:	e001      	b.n	10854 <steppers::doInterrupt()+0x844>
	Pin(const Pin& other_pin);
	bool isNull() const;
	void setDirection(bool out) const;
	bool /*Pin::*/getValue() const {
		if (is_null)
			return false; // null pin is always low ... ?
   10850:	f04f 0300 	mov.w	r3, #0
   10854:	f083 0301 	eor.w	r3, r3, #1
//						bool hit_endstop = direction[X_AXIS] ? !_READ(X_MAX) : !_READ(X_MIN);
						if (!hit_endstop) {
   10858:	2b00      	cmp	r3, #0
   1085a:	d141      	bne.n	108e0 <steppers::doInterrupt()+0x8d0>
							X_STEP_PIN.setValue(true);
   1085c:	a822      	add	r0, sp, #136	; 0x88
   1085e:	f241 71b8 	movw	r1, #6072	; 0x17b8
   10862:	f2c1 0100 	movt	r1, #4096	; 0x1000
   10866:	f04f 020d 	mov.w	r2, #13
   1086a:	f001 fbf9 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
   1086e:	f89d 3089 	ldrb.w	r3, [sp, #137]	; 0x89
   10872:	b94b      	cbnz	r3, 10888 <steppers::doInterrupt()+0x878>
//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
   10874:	f89d 308a 	ldrb.w	r3, [sp, #138]	; 0x8a
   10878:	f89d 0088 	ldrb.w	r0, [sp, #136]	; 0x88
   1087c:	f04f 0101 	mov.w	r1, #1
   10880:	fa01 f103 	lsl.w	r1, r1, r3
   10884:	f7f2 fe2e 	bl	34e4 <GPIO_SetValue>
//							_WRITE(X_STEP, true);
							is_homing |= true;
   10888:	f641 0310 	movw	r3, #6160	; 0x1810
   1088c:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10890:	781a      	ldrb	r2, [r3, #0]
   10892:	f04f 0201 	mov.w	r2, #1
   10896:	701a      	strb	r2, [r3, #0]
							position[X_AXIS] += step_change[X_AXIS];
   10898:	f241 73fc 	movw	r3, #6140	; 0x17fc
   1089c:	f2c1 0300 	movt	r3, #4096	; 0x1000
   108a0:	6819      	ldr	r1, [r3, #0]
   108a2:	f641 0244 	movw	r2, #6212	; 0x1844
   108a6:	f2c1 0200 	movt	r2, #4096	; 0x1000
   108aa:	7812      	ldrb	r2, [r2, #0]
   108ac:	b252      	sxtb	r2, r2
   108ae:	188a      	adds	r2, r1, r2
   108b0:	601a      	str	r2, [r3, #0]
							X_STEP_PIN.setValue(false);
   108b2:	a824      	add	r0, sp, #144	; 0x90
   108b4:	f241 71b8 	movw	r1, #6072	; 0x17b8
   108b8:	f2c1 0100 	movt	r1, #4096	; 0x1000
   108bc:	f04f 020d 	mov.w	r2, #13
   108c0:	f001 fbce 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
   108c4:	f89d 3091 	ldrb.w	r3, [sp, #145]	; 0x91
   108c8:	b983      	cbnz	r3, 108ec <steppers::doInterrupt()+0x8dc>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
   108ca:	f89d 3092 	ldrb.w	r3, [sp, #146]	; 0x92
   108ce:	f89d 0090 	ldrb.w	r0, [sp, #144]	; 0x90
   108d2:	f04f 0101 	mov.w	r1, #1
   108d6:	fa01 f103 	lsl.w	r1, r1, r3
   108da:	f7f2 fe0b 	bl	34f4 <GPIO_ClearValue>
   108de:	e005      	b.n	108ec <steppers::doInterrupt()+0x8dc>
//							_WRITE(X_STEP, false);
						} else {
							is_homing |= false;
   108e0:	f641 0310 	movw	r3, #6160	; 0x1810
   108e4:	f2c1 0300 	movt	r3, #4096	; 0x1000
   108e8:	781a      	ldrb	r2, [r3, #0]
   108ea:	701a      	strb	r2, [r3, #0]
						}
					}
				}
				
				if (delta[Y_AXIS] != 0){
   108ec:	686b      	ldr	r3, [r5, #4]
   108ee:	2b00      	cmp	r3, #0
   108f0:	f000 80a0 	beq.w	10a34 <steppers::doInterrupt()+0xa24>
					counter[Y_AXIS] += delta[Y_AXIS];
   108f4:	6862      	ldr	r2, [r4, #4]
   108f6:	686b      	ldr	r3, [r5, #4]
   108f8:	18d3      	adds	r3, r2, r3
   108fa:	6063      	str	r3, [r4, #4]
					if (counter[Y_AXIS] >= 0) {
   108fc:	6863      	ldr	r3, [r4, #4]
   108fe:	2b00      	cmp	r3, #0
   10900:	f2c0 8098 	blt.w	10a34 <steppers::doInterrupt()+0xa24>
						counter[Y_AXIS] -= intervals;
   10904:	6862      	ldr	r2, [r4, #4]
   10906:	f8d8 3000 	ldr.w	r3, [r8]
   1090a:	1ad3      	subs	r3, r2, r3
   1090c:	6063      	str	r3, [r4, #4]
						bool hit_endstop = direction[Y_AXIS] ? !Y_MAX_PIN.getValue() : !Y_MIN_PIN.getValue();
   1090e:	f641 0340 	movw	r3, #6208	; 0x1840
   10912:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10916:	785b      	ldrb	r3, [r3, #1]
   10918:	b30b      	cbz	r3, 1095e <steppers::doInterrupt()+0x94e>
   1091a:	a826      	add	r0, sp, #152	; 0x98
   1091c:	f241 71b0 	movw	r1, #6064	; 0x17b0
   10920:	f2c1 0100 	movt	r1, #4096	; 0x1000
   10924:	f04f 0217 	mov.w	r2, #23
   10928:	f001 fb9a 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
	Pin(const LPCPort& port_in, uint8_t pin_index_in);
	Pin(const Pin& other_pin);
	bool isNull() const;
	void setDirection(bool out) const;
	bool /*Pin::*/getValue() const {
		if (is_null)
   1092c:	f89d 3099 	ldrb.w	r3, [sp, #153]	; 0x99
   10930:	b983      	cbnz	r3, 10954 <steppers::doInterrupt()+0x944>
			return false; // null pin is always low ... ?
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
   10932:	f89d 0098 	ldrb.w	r0, [sp, #152]	; 0x98
   10936:	f7f2 fdef 	bl	3518 <FIO_ReadValue>
   1093a:	f89d 309a 	ldrb.w	r3, [sp, #154]	; 0x9a
   1093e:	f04f 0201 	mov.w	r2, #1
   10942:	fa02 f303 	lsl.w	r3, r2, r3
   10946:	4003      	ands	r3, r0
   10948:	f013 0fff 	tst.w	r3, #255	; 0xff
   1094c:	bf0c      	ite	eq
   1094e:	2300      	moveq	r3, #0
   10950:	2301      	movne	r3, #1
   10952:	e001      	b.n	10958 <steppers::doInterrupt()+0x948>
	Pin(const Pin& other_pin);
	bool isNull() const;
	void setDirection(bool out) const;
	bool /*Pin::*/getValue() const {
		if (is_null)
			return false; // null pin is always low ... ?
   10954:	f04f 0300 	mov.w	r3, #0
   10958:	f083 0301 	eor.w	r3, r3, #1
   1095c:	e020      	b.n	109a0 <steppers::doInterrupt()+0x990>
   1095e:	a828      	add	r0, sp, #160	; 0xa0
   10960:	f241 71b0 	movw	r1, #6064	; 0x17b0
   10964:	f2c1 0100 	movt	r1, #4096	; 0x1000
   10968:	f04f 021b 	mov.w	r2, #27
   1096c:	f001 fb78 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
	Pin(const LPCPort& port_in, uint8_t pin_index_in);
	Pin(const Pin& other_pin);
	bool isNull() const;
	void setDirection(bool out) const;
	bool /*Pin::*/getValue() const {
		if (is_null)
   10970:	f89d 30a1 	ldrb.w	r3, [sp, #161]	; 0xa1
   10974:	b983      	cbnz	r3, 10998 <steppers::doInterrupt()+0x988>
			return false; // null pin is always low ... ?
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
   10976:	f89d 00a0 	ldrb.w	r0, [sp, #160]	; 0xa0
   1097a:	f7f2 fdcd 	bl	3518 <FIO_ReadValue>
   1097e:	f89d 30a2 	ldrb.w	r3, [sp, #162]	; 0xa2
   10982:	f04f 0201 	mov.w	r2, #1
   10986:	fa02 f303 	lsl.w	r3, r2, r3
   1098a:	4003      	ands	r3, r0
   1098c:	f013 0fff 	tst.w	r3, #255	; 0xff
   10990:	bf0c      	ite	eq
   10992:	2300      	moveq	r3, #0
   10994:	2301      	movne	r3, #1
   10996:	e001      	b.n	1099c <steppers::doInterrupt()+0x98c>
	Pin(const Pin& other_pin);
	bool isNull() const;
	void setDirection(bool out) const;
	bool /*Pin::*/getValue() const {
		if (is_null)
			return false; // null pin is always low ... ?
   10998:	f04f 0300 	mov.w	r3, #0
   1099c:	f083 0301 	eor.w	r3, r3, #1
//						bool hit_endstop = direction[Y_AXIS] ? !_READ(Y_MAX) : !_READ(Y_MIN);
						if (!hit_endstop) {
   109a0:	2b00      	cmp	r3, #0
   109a2:	d141      	bne.n	10a28 <steppers::doInterrupt()+0xa18>
							Y_STEP_PIN.setValue(true);
   109a4:	a82a      	add	r0, sp, #168	; 0xa8
   109a6:	f241 71b0 	movw	r1, #6064	; 0x17b0
   109aa:	f2c1 0100 	movt	r1, #4096	; 0x1000
   109ae:	f04f 021c 	mov.w	r2, #28
   109b2:	f001 fb55 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
   109b6:	f89d 30a9 	ldrb.w	r3, [sp, #169]	; 0xa9
   109ba:	b94b      	cbnz	r3, 109d0 <steppers::doInterrupt()+0x9c0>
//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
   109bc:	f89d 30aa 	ldrb.w	r3, [sp, #170]	; 0xaa
   109c0:	f89d 00a8 	ldrb.w	r0, [sp, #168]	; 0xa8
   109c4:	f04f 0101 	mov.w	r1, #1
   109c8:	fa01 f103 	lsl.w	r1, r1, r3
   109cc:	f7f2 fd8a 	bl	34e4 <GPIO_SetValue>
//							_WRITE(Y_STEP, true);
							is_homing |= true;
   109d0:	f641 0310 	movw	r3, #6160	; 0x1810
   109d4:	f2c1 0300 	movt	r3, #4096	; 0x1000
   109d8:	781a      	ldrb	r2, [r3, #0]
   109da:	f04f 0201 	mov.w	r2, #1
   109de:	701a      	strb	r2, [r3, #0]
							position[Y_AXIS] += step_change[Y_AXIS];
   109e0:	f241 73fc 	movw	r3, #6140	; 0x17fc
   109e4:	f2c1 0300 	movt	r3, #4096	; 0x1000
   109e8:	6859      	ldr	r1, [r3, #4]
   109ea:	f641 0244 	movw	r2, #6212	; 0x1844
   109ee:	f2c1 0200 	movt	r2, #4096	; 0x1000
   109f2:	7852      	ldrb	r2, [r2, #1]
   109f4:	b252      	sxtb	r2, r2
   109f6:	188a      	adds	r2, r1, r2
   109f8:	605a      	str	r2, [r3, #4]
							Y_STEP_PIN.setValue(false);
   109fa:	a82c      	add	r0, sp, #176	; 0xb0
   109fc:	f241 71b0 	movw	r1, #6064	; 0x17b0
   10a00:	f2c1 0100 	movt	r1, #4096	; 0x1000
   10a04:	f04f 021c 	mov.w	r2, #28
   10a08:	f001 fb2a 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
   10a0c:	f89d 30b1 	ldrb.w	r3, [sp, #177]	; 0xb1
   10a10:	b983      	cbnz	r3, 10a34 <steppers::doInterrupt()+0xa24>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
   10a12:	f89d 30b2 	ldrb.w	r3, [sp, #178]	; 0xb2
   10a16:	f89d 00b0 	ldrb.w	r0, [sp, #176]	; 0xb0
   10a1a:	f04f 0101 	mov.w	r1, #1
   10a1e:	fa01 f103 	lsl.w	r1, r1, r3
   10a22:	f7f2 fd67 	bl	34f4 <GPIO_ClearValue>
   10a26:	e005      	b.n	10a34 <steppers::doInterrupt()+0xa24>
//							_WRITE(Y_STEP, false);
						} else {
							is_homing |= false;
   10a28:	f641 0310 	movw	r3, #6160	; 0x1810
   10a2c:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10a30:	781a      	ldrb	r2, [r3, #0]
   10a32:	701a      	strb	r2, [r3, #0]
						}
					}
				}
				
				if (delta[Z_AXIS] != 0){
   10a34:	68ab      	ldr	r3, [r5, #8]
   10a36:	2b00      	cmp	r3, #0
   10a38:	f000 80a0 	beq.w	10b7c <steppers::doInterrupt()+0xb6c>
					counter[Z_AXIS] += delta[Z_AXIS];
   10a3c:	68a2      	ldr	r2, [r4, #8]
   10a3e:	68ab      	ldr	r3, [r5, #8]
   10a40:	18d3      	adds	r3, r2, r3
   10a42:	60a3      	str	r3, [r4, #8]
					if (counter[Z_AXIS] >= 0) {
   10a44:	68a3      	ldr	r3, [r4, #8]
   10a46:	2b00      	cmp	r3, #0
   10a48:	f2c0 8098 	blt.w	10b7c <steppers::doInterrupt()+0xb6c>
						counter[Z_AXIS] -= intervals;
   10a4c:	68a2      	ldr	r2, [r4, #8]
   10a4e:	f8d8 3000 	ldr.w	r3, [r8]
   10a52:	1ad3      	subs	r3, r2, r3
   10a54:	60a3      	str	r3, [r4, #8]
						bool hit_endstop = direction[Z_AXIS] ? !Z_MAX_PIN.getValue() : !Z_MIN_PIN.getValue();
   10a56:	f641 0340 	movw	r3, #6208	; 0x1840
   10a5a:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10a5e:	789b      	ldrb	r3, [r3, #2]
   10a60:	b30b      	cbz	r3, 10aa6 <steppers::doInterrupt()+0xa96>
   10a62:	a82e      	add	r0, sp, #184	; 0xb8
   10a64:	f241 71b4 	movw	r1, #6068	; 0x17b4
   10a68:	f2c1 0100 	movt	r1, #4096	; 0x1000
   10a6c:	f04f 0219 	mov.w	r2, #25
   10a70:	f001 faf6 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
	Pin(const LPCPort& port_in, uint8_t pin_index_in);
	Pin(const Pin& other_pin);
	bool isNull() const;
	void setDirection(bool out) const;
	bool /*Pin::*/getValue() const {
		if (is_null)
   10a74:	f89d 30b9 	ldrb.w	r3, [sp, #185]	; 0xb9
   10a78:	b983      	cbnz	r3, 10a9c <steppers::doInterrupt()+0xa8c>
			return false; // null pin is always low ... ?
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
   10a7a:	f89d 00b8 	ldrb.w	r0, [sp, #184]	; 0xb8
   10a7e:	f7f2 fd4b 	bl	3518 <FIO_ReadValue>
   10a82:	f89d 30ba 	ldrb.w	r3, [sp, #186]	; 0xba
   10a86:	f04f 0201 	mov.w	r2, #1
   10a8a:	fa02 f303 	lsl.w	r3, r2, r3
   10a8e:	4003      	ands	r3, r0
   10a90:	f013 0fff 	tst.w	r3, #255	; 0xff
   10a94:	bf0c      	ite	eq
   10a96:	2300      	moveq	r3, #0
   10a98:	2301      	movne	r3, #1
   10a9a:	e001      	b.n	10aa0 <steppers::doInterrupt()+0xa90>
	Pin(const Pin& other_pin);
	bool isNull() const;
	void setDirection(bool out) const;
	bool /*Pin::*/getValue() const {
		if (is_null)
			return false; // null pin is always low ... ?
   10a9c:	f04f 0300 	mov.w	r3, #0
   10aa0:	f083 0301 	eor.w	r3, r3, #1
   10aa4:	e020      	b.n	10ae8 <steppers::doInterrupt()+0xad8>
   10aa6:	a830      	add	r0, sp, #192	; 0xc0
   10aa8:	f241 71b0 	movw	r1, #6064	; 0x17b0
   10aac:	f2c1 0100 	movt	r1, #4096	; 0x1000
   10ab0:	f04f 0216 	mov.w	r2, #22
   10ab4:	f001 fad4 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
	Pin(const LPCPort& port_in, uint8_t pin_index_in);
	Pin(const Pin& other_pin);
	bool isNull() const;
	void setDirection(bool out) const;
	bool /*Pin::*/getValue() const {
		if (is_null)
   10ab8:	f89d 30c1 	ldrb.w	r3, [sp, #193]	; 0xc1
   10abc:	b983      	cbnz	r3, 10ae0 <steppers::doInterrupt()+0xad0>
			return false; // null pin is always low ... ?
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
   10abe:	f89d 00c0 	ldrb.w	r0, [sp, #192]	; 0xc0
   10ac2:	f7f2 fd29 	bl	3518 <FIO_ReadValue>
   10ac6:	f89d 30c2 	ldrb.w	r3, [sp, #194]	; 0xc2
   10aca:	f04f 0201 	mov.w	r2, #1
   10ace:	fa02 f303 	lsl.w	r3, r2, r3
   10ad2:	4003      	ands	r3, r0
   10ad4:	f013 0fff 	tst.w	r3, #255	; 0xff
   10ad8:	bf0c      	ite	eq
   10ada:	2300      	moveq	r3, #0
   10adc:	2301      	movne	r3, #1
   10ade:	e001      	b.n	10ae4 <steppers::doInterrupt()+0xad4>
	Pin(const Pin& other_pin);
	bool isNull() const;
	void setDirection(bool out) const;
	bool /*Pin::*/getValue() const {
		if (is_null)
			return false; // null pin is always low ... ?
   10ae0:	f04f 0300 	mov.w	r3, #0
   10ae4:	f083 0301 	eor.w	r3, r3, #1
//						bool hit_endstop = direction[Z_AXIS] ? !_READ(Z_MAX) : !_READ(Z_MIN);
						if (!hit_endstop) {
   10ae8:	2b00      	cmp	r3, #0
   10aea:	d141      	bne.n	10b70 <steppers::doInterrupt()+0xb60>
							Z_STEP_PIN.setValue(true);
   10aec:	a832      	add	r0, sp, #200	; 0xc8
   10aee:	f241 71b0 	movw	r1, #6064	; 0x17b0
   10af2:	f2c1 0100 	movt	r1, #4096	; 0x1000
   10af6:	f04f 0218 	mov.w	r2, #24
   10afa:	f001 fab1 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
   10afe:	f89d 30c9 	ldrb.w	r3, [sp, #201]	; 0xc9
   10b02:	b94b      	cbnz	r3, 10b18 <steppers::doInterrupt()+0xb08>
//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
   10b04:	f89d 30ca 	ldrb.w	r3, [sp, #202]	; 0xca
   10b08:	f89d 00c8 	ldrb.w	r0, [sp, #200]	; 0xc8
   10b0c:	f04f 0101 	mov.w	r1, #1
   10b10:	fa01 f103 	lsl.w	r1, r1, r3
   10b14:	f7f2 fce6 	bl	34e4 <GPIO_SetValue>
//							_WRITE(Z_STEP, true);
							is_homing |= true;
   10b18:	f641 0310 	movw	r3, #6160	; 0x1810
   10b1c:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10b20:	781a      	ldrb	r2, [r3, #0]
   10b22:	f04f 0201 	mov.w	r2, #1
   10b26:	701a      	strb	r2, [r3, #0]
							position[Z_AXIS] += step_change[Z_AXIS];
   10b28:	f241 73fc 	movw	r3, #6140	; 0x17fc
   10b2c:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10b30:	6899      	ldr	r1, [r3, #8]
   10b32:	f641 0244 	movw	r2, #6212	; 0x1844
   10b36:	f2c1 0200 	movt	r2, #4096	; 0x1000
   10b3a:	7892      	ldrb	r2, [r2, #2]
   10b3c:	b252      	sxtb	r2, r2
   10b3e:	188a      	adds	r2, r1, r2
   10b40:	609a      	str	r2, [r3, #8]
							Z_STEP_PIN.setValue(false);
   10b42:	a834      	add	r0, sp, #208	; 0xd0
   10b44:	f241 71b0 	movw	r1, #6064	; 0x17b0
   10b48:	f2c1 0100 	movt	r1, #4096	; 0x1000
   10b4c:	f04f 0218 	mov.w	r2, #24
   10b50:	f001 fa86 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
   10b54:	f89d 30d1 	ldrb.w	r3, [sp, #209]	; 0xd1
   10b58:	b983      	cbnz	r3, 10b7c <steppers::doInterrupt()+0xb6c>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
   10b5a:	f89d 30d2 	ldrb.w	r3, [sp, #210]	; 0xd2
   10b5e:	f89d 00d0 	ldrb.w	r0, [sp, #208]	; 0xd0
   10b62:	f04f 0101 	mov.w	r1, #1
   10b66:	fa01 f103 	lsl.w	r1, r1, r3
   10b6a:	f7f2 fcc3 	bl	34f4 <GPIO_ClearValue>
   10b6e:	e005      	b.n	10b7c <steppers::doInterrupt()+0xb6c>
//							_WRITE(Z_STEP, false);
						} else {
							is_homing |= false;
   10b70:	f641 0310 	movw	r3, #6160	; 0x1810
   10b74:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10b78:	781a      	ldrb	r2, [r3, #0]
   10b7a:	701a      	strb	r2, [r3, #0]
				feedrate_multiplier++;
				timer_counter += feedrate_inverted;
			}

			//TODO: Port endstop check to handle max/min pins = NULL and non-inverted endstops ( see old stepper interface functions)
			for (int8_t i = 0; i < feedrate_multiplier; i++){
   10b7c:	f107 0701 	add.w	r7, r7, #1
   10b80:	b2ff      	uxtb	r7, r7
   10b82:	b27a      	sxtb	r2, r7
   10b84:	b273      	sxtb	r3, r6
   10b86:	429a      	cmp	r2, r3
   10b88:	f6ff ae0c 	blt.w	107a4 <steppers::doInterrupt()+0x794>
					}
				}
			}
			
			// if we're done, force a sync with the planner
			if (!is_homing)
   10b8c:	f641 0310 	movw	r3, #6160	; 0x1810
   10b90:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10b94:	781b      	ldrb	r3, [r3, #0]
   10b96:	b90b      	cbnz	r3, 10b9c <steppers::doInterrupt()+0xb8c>
				planner::abort();
   10b98:	f7fc fd5c 	bl	d654 <planner::abort()>

			timer_counter += feedrate_inverted;
   10b9c:	f641 030c 	movw	r3, #6156	; 0x180c
   10ba0:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10ba4:	6819      	ldr	r1, [r3, #0]
   10ba6:	f641 0220 	movw	r2, #6176	; 0x1820
   10baa:	f2c1 0200 	movt	r2, #4096	; 0x1000
   10bae:	6812      	ldr	r2, [r2, #0]
   10bb0:	188a      	adds	r2, r1, r2
   10bb2:	601a      	str	r2, [r3, #0]
		}
		// if we're done, force a sync with the planner
		if (!is_homing)
   10bb4:	f641 0310 	movw	r3, #6160	; 0x1810
   10bb8:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10bbc:	781b      	ldrb	r3, [r3, #0]
   10bbe:	b90b      	cbnz	r3, 10bc4 <steppers::doInterrupt()+0xbb4>
			planner::abort();
   10bc0:	f7fc fd48 	bl	d654 <planner::abort()>
		return is_homing;
   10bc4:	f641 0310 	movw	r3, #6160	; 0x1810
   10bc8:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10bcc:	7818      	ldrb	r0, [r3, #0]
	}
	return false;
}
   10bce:	b037      	add	sp, #220	; 0xdc
   10bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				axis_active[i] = IsActive(i);
			}
#else
			//TODO: Port this to handle max/min pins = NULL and non-inverted endstops ( see old stepper interface functions)
			//TODO: READ ENDSTOPS ALL AT ONCE
			axis_active[X_AXIS] = (delta[X_AXIS] != 0) && !(direction[X_AXIS] ? !X_MAX_PIN.getValue() : !X_MIN_PIN.getValue());
   10bd4:	f641 0328 	movw	r3, #6184	; 0x1828
   10bd8:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10bdc:	681b      	ldr	r3, [r3, #0]
   10bde:	f04f 0700 	mov.w	r7, #0
   10be2:	2b00      	cmp	r3, #0
   10be4:	f43f aaa8 	beq.w	10138 <steppers::doInterrupt()+0x128>
   10be8:	f7ff ba63 	b.w	100b2 <steppers::doInterrupt()+0xa2>

00010bec <_GLOBAL__sub_I__ZN8steppers9digi_potsE>:
		return is_homing;
	}
	return false;
}

}
   10bec:	b530      	push	{r4, r5, lr}
   10bee:	b08d      	sub	sp, #52	; 0x34
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
   10bf0:	f241 709c 	movw	r0, #6044	; 0x179c
   10bf4:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10bf8:	f04f 0100 	mov.w	r1, #0
   10bfc:	f001 f81e 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
   10c00:	f241 70b0 	movw	r0, #6064	; 0x17b0
   10c04:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10c08:	f04f 0101 	mov.w	r1, #1
   10c0c:	f001 f816 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
   10c10:	f241 70b8 	movw	r0, #6072	; 0x17b8
   10c14:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10c18:	f04f 0102 	mov.w	r1, #2
   10c1c:	f001 f80e 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
   10c20:	f241 70b4 	movw	r0, #6068	; 0x17b4
   10c24:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10c28:	f04f 0103 	mov.w	r1, #3
   10c2c:	f001 f806 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
   10c30:	f241 70ec 	movw	r0, #6124	; 0x17ec
   10c34:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10c38:	f04f 0104 	mov.w	r1, #4
   10c3c:	f000 fffe 	bl	11c3c <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
   10c40:	f641 0414 	movw	r4, #6164	; 0x1814
   10c44:	f2c1 0400 	movt	r4, #4096	; 0x1000
   10c48:	4620      	mov	r0, r4
   10c4a:	f04f 01ff 	mov.w	r1, #255	; 0xff
   10c4e:	f000 fff5 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
	};
	// currently not used:
	//const uint8_t getPinIndex() const { return pin_index; }
};

static const Pin NullPin(NullPort, 0);
   10c52:	f241 70f4 	movw	r0, #6132	; 0x17f4
   10c56:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10c5a:	4621      	mov	r1, r4
   10c5c:	f04f 0200 	mov.w	r2, #0
   10c60:	f001 f9fe 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
#endif
#if STEPPER_COUNT > 4
        DigiPots(B_POT_PIN,
				eeprom_offsets::DIGI_POT_SETTINGS),
#endif
};
   10c64:	a809      	add	r0, sp, #36	; 0x24
   10c66:	f04f 01ff 	mov.w	r1, #255	; 0xff
   10c6a:	f000 ffe7 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
   10c6e:	a80a      	add	r0, sp, #40	; 0x28
   10c70:	a909      	add	r1, sp, #36	; 0x24
   10c72:	f04f 02ff 	mov.w	r2, #255	; 0xff
   10c76:	f001 f9f3 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
   10c7a:	f241 75c4 	movw	r5, #6084	; 0x17c4
   10c7e:	f2c1 0500 	movt	r5, #4096	; 0x1000
   10c82:	f247 64dc 	movw	r4, #30428	; 0x76dc
   10c86:	f2c0 0402 	movt	r4, #2
   10c8a:	4628      	mov	r0, r5
   10c8c:	a90a      	add	r1, sp, #40	; 0x28
   10c8e:	4622      	mov	r2, r4
   10c90:	f000 fa92 	bl	111b8 <DigiPots::DigiPots(Pin const&, unsigned short const&)>
   10c94:	a806      	add	r0, sp, #24
   10c96:	f04f 01ff 	mov.w	r1, #255	; 0xff
   10c9a:	f000 ffcf 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
   10c9e:	a807      	add	r0, sp, #28
   10ca0:	a906      	add	r1, sp, #24
   10ca2:	f04f 02ff 	mov.w	r2, #255	; 0xff
   10ca6:	f001 f9db 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
   10caa:	f105 000a 	add.w	r0, r5, #10
   10cae:	a907      	add	r1, sp, #28
   10cb0:	4622      	mov	r2, r4
   10cb2:	f000 fa81 	bl	111b8 <DigiPots::DigiPots(Pin const&, unsigned short const&)>
   10cb6:	a803      	add	r0, sp, #12
   10cb8:	f04f 01ff 	mov.w	r1, #255	; 0xff
   10cbc:	f000 ffbe 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
   10cc0:	a804      	add	r0, sp, #16
   10cc2:	a903      	add	r1, sp, #12
   10cc4:	f04f 02ff 	mov.w	r2, #255	; 0xff
   10cc8:	f001 f9ca 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
   10ccc:	f105 0014 	add.w	r0, r5, #20
   10cd0:	a904      	add	r1, sp, #16
   10cd2:	4622      	mov	r2, r4
   10cd4:	f000 fa70 	bl	111b8 <DigiPots::DigiPots(Pin const&, unsigned short const&)>
   10cd8:	4668      	mov	r0, sp
   10cda:	f04f 01ff 	mov.w	r1, #255	; 0xff
   10cde:	f000 ffad 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
   10ce2:	a801      	add	r0, sp, #4
   10ce4:	4669      	mov	r1, sp
   10ce6:	f04f 02ff 	mov.w	r2, #255	; 0xff
   10cea:	f001 f9b9 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
   10cee:	f105 001e 	add.w	r0, r5, #30
   10cf2:	a901      	add	r1, sp, #4
   10cf4:	4622      	mov	r2, r4
   10cf6:	f000 fa5f 	bl	111b8 <DigiPots::DigiPots(Pin const&, unsigned short const&)>
		return is_homing;
	}
	return false;
}

}
   10cfa:	b00d      	add	sp, #52	; 0x34
   10cfc:	bd30      	pop	{r4, r5, pc}
   10cfe:	bf00      	nop

00010d00 <utility::isPlaying()>:
	 uint8_t * buildFile;
	  
 /// returns true if script is running
 bool isPlaying(){
	 
	 return is_playing;		 
   10d00:	f641 037c 	movw	r3, #6268	; 0x187c
   10d04:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10d08:	7818      	ldrb	r0, [r3, #0]
 }
   10d0a:	4770      	bx	lr

00010d0c <utility::reset()>:
 void reset(){
	 uint16_t build_index = 0;
	 uint16_t build_length = 0;
	 is_playing = false;
   10d0c:	f641 037c 	movw	r3, #6268	; 0x187c
   10d10:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10d14:	f04f 0200 	mov.w	r2, #0
   10d18:	701a      	strb	r2, [r3, #0]
 
 }
   10d1a:	4770      	bx	lr

00010d1c <utility::playbackHasNext()>:
 
 /// returns true if more bytes are available in the script
 bool playbackHasNext(){
	return (build_index < build_length);
   10d1c:	f641 0278 	movw	r2, #6264	; 0x1878
   10d20:	f2c1 0200 	movt	r2, #4096	; 0x1000
   10d24:	f641 0380 	movw	r3, #6272	; 0x1880
   10d28:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10d2c:	6810      	ldr	r0, [r2, #0]
   10d2e:	681b      	ldr	r3, [r3, #0]
 }
   10d30:	4298      	cmp	r0, r3
   10d32:	bfac      	ite	ge
   10d34:	2000      	movge	r0, #0
   10d36:	2001      	movlt	r0, #1
   10d38:	4770      	bx	lr
   10d3a:	bf00      	nop

00010d3c <utility::playbackNext()>:
 /// gets next byte in script
 uint8_t playbackNext(){
	 
	 uint8_t byte;
	 
	 if(build_index < build_length)
   10d3c:	f641 0378 	movw	r3, #6264	; 0x1878
   10d40:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10d44:	681a      	ldr	r2, [r3, #0]
   10d46:	f641 0380 	movw	r3, #6272	; 0x1880
   10d4a:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10d4e:	681b      	ldr	r3, [r3, #0]
   10d50:	429a      	cmp	r2, r3
	 {
		 byte = pgm_read_byte(buildFile + build_index++);
   10d52:	bfbf      	itttt	lt
   10d54:	f641 0374 	movwlt	r3, #6260	; 0x1874
   10d58:	f2c1 0300 	movtlt	r3, #4096	; 0x1000
   10d5c:	681b      	ldrlt	r3, [r3, #0]
   10d5e:	5c98      	ldrblt	r0, [r3, r2]
   10d60:	bfbf      	itttt	lt
   10d62:	f641 0378 	movwlt	r3, #6264	; 0x1878
   10d66:	f2c1 0300 	movtlt	r3, #4096	; 0x1000
   10d6a:	3201      	addlt	r2, #1
   10d6c:	601a      	strlt	r2, [r3, #0]
		return byte;
	}

	else 
		return 0;
   10d6e:	bfa8      	it	ge
   10d70:	2000      	movge	r0, #0
 }
   10d72:	4770      	bx	lr

00010d74 <utility::finishPlayback()>:
	
 }
 
 /// updates state to finished playback
 void finishPlayback(){
	is_playing = false;
   10d74:	f641 037c 	movw	r3, #6268	; 0x187c
   10d78:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10d7c:	f04f 0200 	mov.w	r2, #0
   10d80:	701a      	strb	r2, [r3, #0]
	
 }
   10d82:	4770      	bx	lr

00010d84 <initAnalogPin(unsigned char)>:
#else
    // We are using the AVcc as our reference.  There's a 100nF cap
    // to ground on the AREF pin.
//    const uint8_t ANALOG_REF = 0x01;

void initAnalogPin(uint8_t pin) {
   10d84:	b570      	push	{r4, r5, r6, lr}
   10d86:	b082      	sub	sp, #8
   10d88:	4606      	mov	r6, r0
	xprintf("initAnalogPin pin:%d" " (%s:%d)\n",pin,_F_,_L_);
   10d8a:	4c1f      	ldr	r4, [pc, #124]	; (10e08 <initAnalogPin(unsigned char)+0x84>)
   10d8c:	f64b 505c 	movw	r0, #48476	; 0xbd5c
   10d90:	f2c0 0002 	movt	r0, #2
   10d94:	4631      	mov	r1, r6
   10d96:	4622      	mov	r2, r4
   10d98:	f04f 0365 	mov.w	r3, #101	; 0x65
   10d9c:	f7f5 fdda 	bl	6954 <xprintf>
	xprintf("pin-23:%d" " (%s:%d)\n",pin-23,_F_,_L_);
   10da0:	f64b 50a0 	movw	r0, #48544	; 0xbda0
   10da4:	f2c0 0002 	movt	r0, #2
   10da8:	f1a6 0117 	sub.w	r1, r6, #23
   10dac:	4622      	mov	r2, r4
   10dae:	f04f 0366 	mov.w	r3, #102	; 0x66
   10db2:	f7f5 fdcf 	bl	6954 <xprintf>
//			ADMUX = 0b01000000 + pin;
            // enable a2d conversions, interrupt on completion
//            ADCSRA |= _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) |
//                            _BV(ADEN) | _BV(ADIE);
	  PINSEL_CFG_Type PinCfg;
	  PinCfg.Funcnum = PINSEL_FUNC_1; /* ADC function */
   10db6:	f04f 0501 	mov.w	r5, #1
   10dba:	f88d 5002 	strb.w	r5, [sp, #2]
	  PinCfg.OpenDrain = PINSEL_PINMODE_NORMAL;
   10dbe:	f04f 0400 	mov.w	r4, #0
   10dc2:	f88d 4004 	strb.w	r4, [sp, #4]
	  PinCfg.Pinmode = PINSEL_PINMODE_PULLUP;
   10dc6:	f88d 4003 	strb.w	r4, [sp, #3]
	  PinCfg.Portnum = 0;
   10dca:	f88d 4000 	strb.w	r4, [sp]
	  PinCfg.Pinnum = pin;
   10dce:	f88d 6001 	strb.w	r6, [sp, #1]
	  PINSEL_ConfigPin(&PinCfg);
   10dd2:	4668      	mov	r0, sp
   10dd4:	f7f2 fba6 	bl	3524 <PINSEL_ConfigPin>
	  GPIO_SetDir(0, _BV(pin), 0);
   10dd8:	4620      	mov	r0, r4
   10dda:	fa05 f106 	lsl.w	r1, r5, r6
   10dde:	4622      	mov	r2, r4
   10de0:	f7f2 fb70 	bl	34c4 <GPIO_SetDir>

	  ADC_Init(LPC_ADC, 1000); /* ADC conversion rate = 200Khz */
   10de4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   10de8:	f2c4 0003 	movt	r0, #16387	; 0x4003
   10dec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10df0:	f7f2 f9da 	bl	31a8 <ADC_Init>
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   10df4:	f44f 4361 	mov.w	r3, #57600	; 0xe100
   10df8:	f2ce 0300 	movt	r3, #57344	; 0xe000
   10dfc:	f04f 0288 	mov.w	r2, #136	; 0x88
   10e00:	f883 2316 	strb.w	r2, [r3, #790]	; 0x316
	  NVIC_SetPriority(ADC_IRQn, 17);
    }
   10e04:	b002      	add	sp, #8
   10e06:	bd70      	pop	{r4, r5, r6, pc}
   10e08:	0002bd93 	.word	0x0002bd93

00010e0c <startAnalogRead(unsigned char, short volatile*, bool volatile*)>:

    bool startAnalogRead(uint8_t pin,
                         volatile int16_t* destination,
                         volatile bool* finished) {
   10e0c:	b538      	push	{r3, r4, r5, lr}
//    	xprintf("pin-23:%d" " (%s:%d)\n",pin-23,_F_,_L_);
            // ADSC is cleared when the conversion finishes.
            // We should not start a new read while an existing one is in progress.
    		  if (*adc_finished == false)
   10e0e:	f641 0384 	movw	r3, #6276	; 0x1884
   10e12:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10e16:	681b      	ldr	r3, [r3, #0]
   10e18:	781b      	ldrb	r3, [r3, #0]
   10e1a:	b373      	cbz	r3, 10e7a <startAnalogRead(unsigned char, short volatile*, bool volatile*)+0x6e>
    			  return false;
//            if ((ADCSRA & _BV(ADSC)) != 0) {
//                    return false;
//            }
//            ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
                    adc_destination = destination;
   10e1c:	f641 039c 	movw	r3, #6300	; 0x189c
   10e20:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10e24:	6019      	str	r1, [r3, #0]
                    adc_finished = finished;
   10e26:	f641 0384 	movw	r3, #6276	; 0x1884
   10e2a:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10e2e:	601a      	str	r2, [r3, #0]
                    *adc_finished = false;
   10e30:	f04f 0300 	mov.w	r3, #0
   10e34:	7013      	strb	r3, [r2, #0]

                    // start the conversion.
//                    ADCSRA |= _BV(ADSC);
//            }
              // Start conversion
              ADC_IntConfig(LPC_ADC,pin-23,ENABLE);
   10e36:	f1a0 0517 	sub.w	r5, r0, #23
   10e3a:	b2ed      	uxtb	r5, r5
   10e3c:	f44f 4480 	mov.w	r4, #16384	; 0x4000
   10e40:	f2c4 0403 	movt	r4, #16387	; 0x4003
   10e44:	4620      	mov	r0, r4
   10e46:	4629      	mov	r1, r5
   10e48:	f04f 0201 	mov.w	r2, #1
   10e4c:	f7f2 fa0c 	bl	3268 <ADC_IntConfig>
              ADC_ChannelCmd(LPC_ADC,pin-23,ENABLE);
   10e50:	4620      	mov	r0, r4
   10e52:	4629      	mov	r1, r5
   10e54:	f04f 0201 	mov.w	r2, #1
   10e58:	f7f2 fa30 	bl	32bc <ADC_ChannelCmd>
              ADC_StartCmd(LPC_ADC, ADC_START_NOW);
   10e5c:	4620      	mov	r0, r4
   10e5e:	f04f 0101 	mov.w	r1, #1
   10e62:	f7f2 f9dd 	bl	3220 <ADC_StartCmd>

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   10e66:	f44f 4361 	mov.w	r3, #57600	; 0xe100
   10e6a:	f2ce 0300 	movt	r3, #57344	; 0xe000
   10e6e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   10e72:	601a      	str	r2, [r3, #0]
              NVIC_EnableIRQ(ADC_IRQn);
            // An interrupt will signal conversion completion.
            return true;
   10e74:	f04f 0001 	mov.w	r0, #1
   10e78:	bd38      	pop	{r3, r4, r5, pc}
                         volatile bool* finished) {
//    	xprintf("pin-23:%d" " (%s:%d)\n",pin-23,_F_,_L_);
            // ADSC is cleared when the conversion finishes.
            // We should not start a new read while an existing one is in progress.
    		  if (*adc_finished == false)
    			  return false;
   10e7a:	f04f 0000 	mov.w	r0, #0
              ADC_ChannelCmd(LPC_ADC,pin-23,ENABLE);
              ADC_StartCmd(LPC_ADC, ADC_START_NOW);
              NVIC_EnableIRQ(ADC_IRQn);
            // An interrupt will signal conversion completion.
            return true;
    }
   10e7e:	bd38      	pop	{r3, r4, r5, pc}

00010e80 <ADC_IRQHandler>:

            // combine the two bytes
            *adc_destination = (high_byte << 8) | low_byte;
            *adc_finished = true;
    }*/
    extern "C" void ADC_IRQHandler(void){
   10e80:	b538      	push	{r3, r4, r5, lr}
//    	xprintf("A c1:%d hc1:%h",ADC_ChannelGetData(LPC_ADC,ADC_CHANNEL_1),ADC_ChannelGetData(LPC_ADC,ADC_CHANNEL_1));
//    	xprintf("A c2:%d hc1:%h",ADC_ChannelGetData(LPC_ADC,ADC_CHANNEL_2),ADC_ChannelGetData(LPC_ADC,ADC_CHANNEL_2));
//    	xprintf("A c3:%d hc1:%h",ADC_ChannelGetData(LPC_ADC,ADC_CHANNEL_3),ADC_ChannelGetData(LPC_ADC,ADC_CHANNEL_3));
    	if (ADC_ChannelGetStatus(LPC_ADC,ADC_CHANNEL_1,ADC_DATA_DONE)){
   10e82:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   10e86:	f2c4 0003 	movt	r0, #16387	; 0x4003
   10e8a:	f04f 0101 	mov.w	r1, #1
   10e8e:	460a      	mov	r2, r1
   10e90:	f7f2 fa4a 	bl	3328 <ADC_ChannelGetStatus>
   10e94:	b1e8      	cbz	r0, 10ed2 <ADC_IRQHandler+0x52>
            ADC_IntConfig(LPC_ADC,ADC_ADINTEN1,DISABLE);
   10e96:	f44f 4480 	mov.w	r4, #16384	; 0x4000
   10e9a:	f2c4 0403 	movt	r4, #16387	; 0x4003
   10e9e:	4620      	mov	r0, r4
   10ea0:	f04f 0101 	mov.w	r1, #1
   10ea4:	f04f 0200 	mov.w	r2, #0
   10ea8:	f7f2 f9de 	bl	3268 <ADC_IntConfig>
            ADC_ChannelCmd(LPC_ADC,ADC_CHANNEL_1,DISABLE);
   10eac:	4620      	mov	r0, r4
   10eae:	f04f 0101 	mov.w	r1, #1
   10eb2:	f04f 0200 	mov.w	r2, #0
   10eb6:	f7f2 fa01 	bl	32bc <ADC_ChannelCmd>
    		*adc_destination = ADC_ChannelGetData(LPC_ADC,ADC_CHANNEL_1);
   10eba:	f641 039c 	movw	r3, #6300	; 0x189c
   10ebe:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10ec2:	681d      	ldr	r5, [r3, #0]
   10ec4:	4620      	mov	r0, r4
   10ec6:	f04f 0101 	mov.w	r1, #1
   10eca:	f7f2 fa15 	bl	32f8 <ADC_ChannelGetData>
   10ece:	b280      	uxth	r0, r0
   10ed0:	8028      	strh	r0, [r5, #0]
    	}
    	if (ADC_ChannelGetStatus(LPC_ADC,ADC_CHANNEL_2,ADC_DATA_DONE)){
   10ed2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   10ed6:	f2c4 0003 	movt	r0, #16387	; 0x4003
   10eda:	f04f 0102 	mov.w	r1, #2
   10ede:	f04f 0201 	mov.w	r2, #1
   10ee2:	f7f2 fa21 	bl	3328 <ADC_ChannelGetStatus>
   10ee6:	b1e8      	cbz	r0, 10f24 <ADC_IRQHandler+0xa4>
            ADC_IntConfig(LPC_ADC,ADC_ADINTEN2,DISABLE);
   10ee8:	f44f 4480 	mov.w	r4, #16384	; 0x4000
   10eec:	f2c4 0403 	movt	r4, #16387	; 0x4003
   10ef0:	4620      	mov	r0, r4
   10ef2:	f04f 0102 	mov.w	r1, #2
   10ef6:	f04f 0200 	mov.w	r2, #0
   10efa:	f7f2 f9b5 	bl	3268 <ADC_IntConfig>
            ADC_ChannelCmd(LPC_ADC,ADC_CHANNEL_2,DISABLE);
   10efe:	4620      	mov	r0, r4
   10f00:	f04f 0102 	mov.w	r1, #2
   10f04:	f04f 0200 	mov.w	r2, #0
   10f08:	f7f2 f9d8 	bl	32bc <ADC_ChannelCmd>
    		*adc_destination = ADC_ChannelGetData(LPC_ADC,ADC_CHANNEL_2);
   10f0c:	f641 039c 	movw	r3, #6300	; 0x189c
   10f10:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10f14:	681d      	ldr	r5, [r3, #0]
   10f16:	4620      	mov	r0, r4
   10f18:	f04f 0102 	mov.w	r1, #2
   10f1c:	f7f2 f9ec 	bl	32f8 <ADC_ChannelGetData>
   10f20:	b280      	uxth	r0, r0
   10f22:	8028      	strh	r0, [r5, #0]
    	}
    	if (ADC_ChannelGetStatus(LPC_ADC,ADC_CHANNEL_3,ADC_DATA_DONE)){
   10f24:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   10f28:	f2c4 0003 	movt	r0, #16387	; 0x4003
   10f2c:	f04f 0103 	mov.w	r1, #3
   10f30:	f04f 0201 	mov.w	r2, #1
   10f34:	f7f2 f9f8 	bl	3328 <ADC_ChannelGetStatus>
   10f38:	b1e8      	cbz	r0, 10f76 <ADC_IRQHandler+0xf6>
            ADC_IntConfig(LPC_ADC,ADC_ADINTEN3,DISABLE);
   10f3a:	f44f 4480 	mov.w	r4, #16384	; 0x4000
   10f3e:	f2c4 0403 	movt	r4, #16387	; 0x4003
   10f42:	4620      	mov	r0, r4
   10f44:	f04f 0103 	mov.w	r1, #3
   10f48:	f04f 0200 	mov.w	r2, #0
   10f4c:	f7f2 f98c 	bl	3268 <ADC_IntConfig>
            ADC_ChannelCmd(LPC_ADC,ADC_CHANNEL_3,DISABLE);
   10f50:	4620      	mov	r0, r4
   10f52:	f04f 0103 	mov.w	r1, #3
   10f56:	f04f 0200 	mov.w	r2, #0
   10f5a:	f7f2 f9af 	bl	32bc <ADC_ChannelCmd>
    		*adc_destination = ADC_ChannelGetData(LPC_ADC,ADC_CHANNEL_3);
   10f5e:	f641 039c 	movw	r3, #6300	; 0x189c
   10f62:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10f66:	681d      	ldr	r5, [r3, #0]
   10f68:	4620      	mov	r0, r4
   10f6a:	f04f 0103 	mov.w	r1, #3
   10f6e:	f7f2 f9c3 	bl	32f8 <ADC_ChannelGetData>
   10f72:	b280      	uxth	r0, r0
   10f74:	8028      	strh	r0, [r5, #0]

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   10f76:	f44f 4361 	mov.w	r3, #57600	; 0xe100
   10f7a:	f2ce 0300 	movt	r3, #57344	; 0xe000
   10f7e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   10f82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    	}
    	NVIC_DisableIRQ(ADC_IRQn);
    	*adc_finished = true;
   10f86:	f641 0384 	movw	r3, #6276	; 0x1884
   10f8a:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10f8e:	681b      	ldr	r3, [r3, #0]
   10f90:	f04f 0201 	mov.w	r2, #1
   10f94:	701a      	strb	r2, [r3, #0]
    }
   10f96:	bd38      	pop	{r3, r4, r5, pc}

00010f98 <_GLOBAL__sub_I_adc_destination>:
   10f98:	b508      	push	{r3, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
   10f9a:	f641 0088 	movw	r0, #6280	; 0x1888
   10f9e:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10fa2:	f04f 0100 	mov.w	r1, #0
   10fa6:	f000 fe49 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
   10faa:	f641 008c 	movw	r0, #6284	; 0x188c
   10fae:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10fb2:	f04f 0101 	mov.w	r1, #1
   10fb6:	f000 fe41 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
   10fba:	f641 0090 	movw	r0, #6288	; 0x1890
   10fbe:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10fc2:	f04f 0102 	mov.w	r1, #2
   10fc6:	f000 fe39 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
   10fca:	f641 0094 	movw	r0, #6292	; 0x1894
   10fce:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10fd2:	f04f 0103 	mov.w	r1, #3
   10fd6:	f000 fe31 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
   10fda:	f641 0098 	movw	r0, #6296	; 0x1898
   10fde:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10fe2:	f04f 0104 	mov.w	r1, #4
   10fe6:	f000 fe29 	bl	11c3c <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
   10fea:	f641 00a0 	movw	r0, #6304	; 0x18a0
   10fee:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10ff2:	f04f 01ff 	mov.w	r1, #255	; 0xff
   10ff6:	f000 fe21 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
   10ffa:	bd08      	pop	{r3, pc}

00010ffc <CoolingFan::setSetpoint(int)>:
	}
	fan_on = false;
}

void CoolingFan::setSetpoint(int temperature) {
	setPoint = temperature;
   10ffc:	60c1      	str	r1, [r0, #12]
	midSetPoint = temperature;
   10ffe:	6101      	str	r1, [r0, #16]
	lowSetPoint = temperature - 10;
   11000:	f1a1 030a 	sub.w	r3, r1, #10
   11004:	6143      	str	r3, [r0, #20]
	highSetPoint = temperature + 10;
   11006:	f101 010a 	add.w	r1, r1, #10
   1100a:	6181      	str	r1, [r0, #24]
}
   1100c:	4770      	bx	lr
   1100e:	bf00      	nop

00011010 <CoolingFan::enable()>:

void CoolingFan::enable() {
	enabled = true;
   11010:	f04f 0301 	mov.w	r3, #1
   11014:	7243      	strb	r3, [r0, #9]
}
   11016:	4770      	bx	lr

00011018 <CoolingFan::enableFan()>:
			}
		}
	}
}

void CoolingFan::enableFan() {
   11018:	b508      	push	{r3, lr}
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
   1101a:	7943      	ldrb	r3, [r0, #5]
   1101c:	b93b      	cbnz	r3, 1102e <CoolingFan::enableFan()+0x16>
//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
   1101e:	7983      	ldrb	r3, [r0, #6]
   11020:	7900      	ldrb	r0, [r0, #4]
   11022:	f04f 0101 	mov.w	r1, #1
   11026:	fa01 f103 	lsl.w	r1, r1, r3
   1102a:	f7f2 fa5b 	bl	34e4 <GPIO_SetValue>
   1102e:	bd08      	pop	{r3, pc}

00011030 <CoolingFan::disableFan()>:
//#else
//	#warning cooling fan feature disabled
//#endif
}

void CoolingFan::disableFan() {
   11030:	b508      	push	{r3, lr}
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
   11032:	7943      	ldrb	r3, [r0, #5]
   11034:	b93b      	cbnz	r3, 11046 <CoolingFan::disableFan()+0x16>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
   11036:	7983      	ldrb	r3, [r0, #6]
   11038:	7900      	ldrb	r0, [r0, #4]
   1103a:	f04f 0101 	mov.w	r1, #1
   1103e:	fa01 f103 	lsl.w	r1, r1, r3
   11042:	f7f2 fa57 	bl	34f4 <GPIO_ClearValue>
   11046:	bd08      	pop	{r3, pc}

00011048 <CoolingFan::manageCoolingFan()>:
void CoolingFan::disable() {
	enabled = false;
	disableFan();
}

void CoolingFan::manageCoolingFan() {
   11048:	b538      	push	{r3, r4, r5, lr}
   1104a:	4604      	mov	r4, r0
	// TODO: only change the state if necessary
	if (enabled) {
   1104c:	7a43      	ldrb	r3, [r0, #9]
   1104e:	2b00      	cmp	r3, #0
   11050:	d02f      	beq.n	110b2 <CoolingFan::manageCoolingFan()+0x6a>
		int temp = heater.get_current_temperature();
   11052:	6800      	ldr	r0, [r0, #0]
   11054:	f000 fb7a 	bl	1174c <Heater::get_current_temperature()>
   11058:	4605      	mov	r5, r0
		
		if ((temp > setPoint) && (temp != DEFAULT_THERMOCOUPLE_VAL)){
   1105a:	68e2      	ldr	r2, [r4, #12]
   1105c:	f5b0 6380 	subs.w	r3, r0, #1024	; 0x400
   11060:	bf18      	it	ne
   11062:	2301      	movne	r3, #1
   11064:	4282      	cmp	r2, r0
   11066:	bfac      	ite	ge
   11068:	2300      	movge	r3, #0
   1106a:	f003 0301 	andlt.w	r3, r3, #1
   1106e:	b183      	cbz	r3, 11092 <CoolingFan::manageCoolingFan()+0x4a>
			enableFan();
   11070:	4620      	mov	r0, r4
   11072:	f7ff ffd1 	bl	11018 <CoolingFan::enableFan()>
			// hysteresis in fan on/off behavior
			if(!fan_on && temp < highSetPoint){
   11076:	7f23      	ldrb	r3, [r4, #28]
   11078:	b92b      	cbnz	r3, 11086 <CoolingFan::manageCoolingFan()+0x3e>
   1107a:	69a3      	ldr	r3, [r4, #24]
   1107c:	429d      	cmp	r5, r3
   1107e:	da02      	bge.n	11086 <CoolingFan::manageCoolingFan()+0x3e>
				setPoint = lowSetPoint;
   11080:	6963      	ldr	r3, [r4, #20]
   11082:	60e3      	str	r3, [r4, #12]
   11084:	bd38      	pop	{r3, r4, r5, pc}
			}
			else{
				fan_on = true;
   11086:	f04f 0301 	mov.w	r3, #1
   1108a:	7723      	strb	r3, [r4, #28]
				setPoint = midSetPoint;
   1108c:	6923      	ldr	r3, [r4, #16]
   1108e:	60e3      	str	r3, [r4, #12]
   11090:	bd38      	pop	{r3, r4, r5, pc}
			}
			
		}
		else {
			disableFan();
   11092:	4620      	mov	r0, r4
   11094:	f7ff ffcc 	bl	11030 <CoolingFan::disableFan()>
			// hysteresis in fan on/off behavior
			if(fan_on && temp > lowSetPoint){
   11098:	7f23      	ldrb	r3, [r4, #28]
   1109a:	b12b      	cbz	r3, 110a8 <CoolingFan::manageCoolingFan()+0x60>
   1109c:	6963      	ldr	r3, [r4, #20]
   1109e:	429d      	cmp	r5, r3
   110a0:	dd02      	ble.n	110a8 <CoolingFan::manageCoolingFan()+0x60>
				setPoint = highSetPoint;
   110a2:	69a3      	ldr	r3, [r4, #24]
   110a4:	60e3      	str	r3, [r4, #12]
   110a6:	bd38      	pop	{r3, r4, r5, pc}
			}
			else{
				fan_on = false;
   110a8:	f04f 0300 	mov.w	r3, #0
   110ac:	7723      	strb	r3, [r4, #28]
				setPoint = midSetPoint;
   110ae:	6923      	ldr	r3, [r4, #16]
   110b0:	60e3      	str	r3, [r4, #12]
   110b2:	bd38      	pop	{r3, r4, r5, pc}

000110b4 <CoolingFan::disable()>:

void CoolingFan::enable() {
	enabled = true;
}

void CoolingFan::disable() {
   110b4:	b508      	push	{r3, lr}
	enabled = false;
   110b6:	f04f 0200 	mov.w	r2, #0
   110ba:	7242      	strb	r2, [r0, #9]
	disableFan();
   110bc:	f7ff ffb8 	bl	11030 <CoolingFan::disableFan()>
}
   110c0:	bd08      	pop	{r3, pc}
   110c2:	bf00      	nop

000110c4 <CoolingFan::reset()>:
        Fan_Pin(fan)
{
	reset();
}

void CoolingFan::reset() {
   110c4:	b510      	push	{r4, lr}
   110c6:	4604      	mov	r4, r0
	uint16_t offset = eeprom_base + cooler_eeprom_offsets::SETPOINT_C_OFFSET;
   110c8:	8bc0      	ldrh	r0, [r0, #30]
   110ca:	f100 0001 	add.w	r0, r0, #1
	setSetpoint(eeprom::getEeprom8(offset, DEFAULT_COOLING_FAN_SETPOINT_C));
   110ce:	b280      	uxth	r0, r0
   110d0:	f04f 0132 	mov.w	r1, #50	; 0x32
   110d4:	f000 f934 	bl	11340 <eeprom::getEeprom8(unsigned short, unsigned char)>
   110d8:	4601      	mov	r1, r0
   110da:	4620      	mov	r0, r4
   110dc:	f7ff ff8e 	bl	10ffc <CoolingFan::setSetpoint(int)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
   110e0:	7963      	ldrb	r3, [r4, #5]
   110e2:	b93b      	cbnz	r3, 110f4 <CoolingFan::reset()+0x30>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
   110e4:	79a3      	ldrb	r3, [r4, #6]
   110e6:	7920      	ldrb	r0, [r4, #4]
   110e8:	f04f 0101 	mov.w	r1, #1
   110ec:	fa01 f103 	lsl.w	r1, r1, r3
   110f0:	f7f2 fa00 	bl	34f4 <GPIO_ClearValue>

	Fan_Pin.setValue(false);
	Fan_Pin.setDirection(true);
   110f4:	f104 0004 	add.w	r0, r4, #4
   110f8:	f04f 0101 	mov.w	r1, #1
   110fc:	f000 ffd0 	bl	120a0 <Pin::setDirection(bool) const>

	offset = eeprom_base + cooler_eeprom_offsets::ENABLE_OFFSET;
	if (eeprom::getEeprom8(offset ,DEFAULT_COOLING_FAN_ENABLE) == FAN_ENABLED) {
   11100:	8be0      	ldrh	r0, [r4, #30]
   11102:	f04f 0101 	mov.w	r1, #1
   11106:	f000 f91b 	bl	11340 <eeprom::getEeprom8(unsigned short, unsigned char)>
   1110a:	2801      	cmp	r0, #1
   1110c:	d103      	bne.n	11116 <CoolingFan::reset()+0x52>
		enable();
   1110e:	4620      	mov	r0, r4
   11110:	f7ff ff7e 	bl	11010 <CoolingFan::enable()>
   11114:	e002      	b.n	1111c <CoolingFan::reset()+0x58>
	}
	else {
		disable();
   11116:	4620      	mov	r0, r4
   11118:	f7ff ffcc 	bl	110b4 <CoolingFan::disable()>
	}
	fan_on = false;
   1111c:	f04f 0300 	mov.w	r3, #0
   11120:	7723      	strb	r3, [r4, #28]
}
   11122:	bd10      	pop	{r4, pc}

00011124 <CoolingFan::CoolingFan(Heater&, unsigned short, Pin const&)>:

// TODO: Come up with a unified strategy for these.
// EEPROM map


CoolingFan::CoolingFan(Heater& heater_in, uint16_t eeprom_base_in, const Pin &fan) :
   11124:	b538      	push	{r3, r4, r5, lr}
   11126:	4604      	mov	r4, r0
   11128:	4615      	mov	r5, r2
        heater(heater_in),
        eeprom_base(eeprom_base_in),
        Fan_Pin(fan)
   1112a:	f840 1b04 	str.w	r1, [r0], #4
   1112e:	4619      	mov	r1, r3
   11130:	f000 ffa8 	bl	12084 <Pin::Pin(Pin const&)>
   11134:	83e5      	strh	r5, [r4, #30]
{
	reset();
   11136:	4620      	mov	r0, r4
   11138:	f7ff ffc4 	bl	110c4 <CoolingFan::reset()>
}
   1113c:	4620      	mov	r0, r4
   1113e:	bd38      	pop	{r3, r4, r5, pc}

00011140 <_GLOBAL__sub_I__ZN10CoolingFanC2ER6HeatertRK3Pin>:
//#warning cooling fan feature disabled
	Fan_Pin.setValue(false);
//#else
//	#warning cooling fan feature disabled
//#endif
}
   11140:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
   11142:	f641 00a4 	movw	r0, #6308	; 0x18a4
   11146:	f2c1 0000 	movt	r0, #4096	; 0x1000
   1114a:	f04f 0100 	mov.w	r1, #0
   1114e:	f000 fd75 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
   11152:	f641 00a8 	movw	r0, #6312	; 0x18a8
   11156:	f2c1 0000 	movt	r0, #4096	; 0x1000
   1115a:	f04f 0101 	mov.w	r1, #1
   1115e:	f000 fd6d 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
   11162:	f641 00ac 	movw	r0, #6316	; 0x18ac
   11166:	f2c1 0000 	movt	r0, #4096	; 0x1000
   1116a:	f04f 0102 	mov.w	r1, #2
   1116e:	f000 fd65 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
   11172:	f641 00b0 	movw	r0, #6320	; 0x18b0
   11176:	f2c1 0000 	movt	r0, #4096	; 0x1000
   1117a:	f04f 0103 	mov.w	r1, #3
   1117e:	f000 fd5d 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
   11182:	f641 00b4 	movw	r0, #6324	; 0x18b4
   11186:	f2c1 0000 	movt	r0, #4096	; 0x1000
   1118a:	f04f 0104 	mov.w	r1, #4
   1118e:	f000 fd55 	bl	11c3c <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
   11192:	f641 04b8 	movw	r4, #6328	; 0x18b8
   11196:	f2c1 0400 	movt	r4, #4096	; 0x1000
   1119a:	4620      	mov	r0, r4
   1119c:	f04f 01ff 	mov.w	r1, #255	; 0xff
   111a0:	f000 fd4c 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
	};
	// currently not used:
	//const uint8_t getPinIndex() const { return pin_index; }
};

static const Pin NullPin(NullPort, 0);
   111a4:	f641 00bc 	movw	r0, #6332	; 0x18bc
   111a8:	f2c1 0000 	movt	r0, #4096	; 0x1000
   111ac:	4621      	mov	r1, r4
   111ae:	f04f 0200 	mov.w	r2, #0
   111b2:	f000 ff55 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
   111b6:	bd10      	pop	{r4, pc}

000111b8 <DigiPots::DigiPots(Pin const&, unsigned short const&)>:
#include "EepromMap.hh"
#include "Configuration.hh"
#include "SoftI2cManager.hh"
#include "DigiPots.hh"

DigiPots::DigiPots(const Pin& pot,
   111b8:	b538      	push	{r3, r4, r5, lr}
   111ba:	4604      	mov	r4, r0
   111bc:	4615      	mov	r5, r2
                                   const uint16_t &eeprom_base_in) :
    
    pot_pin(pot),
    eeprom_base(eeprom_base_in) {
   111be:	f000 ff61 	bl	12084 <Pin::Pin(Pin const&)>
   111c2:	882d      	ldrh	r5, [r5, #0]
   111c4:	80e5      	strh	r5, [r4, #6]
}
   111c6:	4620      	mov	r0, r4
   111c8:	bd38      	pop	{r3, r4, r5, pc}
   111ca:	bf00      	nop

000111cc <DigiPots::resetPots()>:
    resetPots();
 
}

void DigiPots::resetPots()
{
   111cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   111ce:	b089      	sub	sp, #36	; 0x24
   111d0:	4607      	mov	r7, r0

// R/W direction bit to OR with address for start or restart
#define I2C_READ 1
#define I2C_WRITE 0

class SoftI2cManager {
   111d2:	ac01      	add	r4, sp, #4
   111d4:	f241 756c 	movw	r5, #5996	; 0x176c
   111d8:	f2c1 0500 	movt	r5, #4096	; 0x1000
	eeprom_pot_offset = idx;
    resetPots();
 
}

void DigiPots::resetPots()
   111dc:	ae06      	add	r6, sp, #24
   111de:	4620      	mov	r0, r4
   111e0:	4629      	mov	r1, r5
   111e2:	f000 ff4f 	bl	12084 <Pin::Pin(Pin const&)>
   111e6:	f104 0405 	add.w	r4, r4, #5
   111ea:	f105 0505 	add.w	r5, r5, #5
   111ee:	42b4      	cmp	r4, r6
   111f0:	d1f5      	bne.n	111de <DigiPots::resetPots()+0x12>
   111f2:	4c10      	ldr	r4, [pc, #64]	; (11234 <DigiPots::resetPots()+0x68>)
   111f4:	a806      	add	r0, sp, #24
   111f6:	4621      	mov	r1, r4
   111f8:	f000 ff44 	bl	12084 <Pin::Pin(Pin const&)>
   111fc:	7963      	ldrb	r3, [r4, #5]
   111fe:	f88d 301d 	strb.w	r3, [sp, #29]
{
    SoftI2cManager i2cPots = SoftI2cManager::getI2cManager();
    i2cPots.start(0b01011110 | I2C_WRITE, pot_pin);
   11202:	a801      	add	r0, sp, #4
   11204:	f04f 015e 	mov.w	r1, #94	; 0x5e
   11208:	463a      	mov	r2, r7
   1120a:	f7fd fc47 	bl	ea9c <SoftI2cManager::start(unsigned char, Pin const&)>
    i2cPots.write(eeprom::getEeprom8(eeprom_base + eeprom_pot_offset, 0), pot_pin);
   1120e:	8938      	ldrh	r0, [r7, #8]
   11210:	88fb      	ldrh	r3, [r7, #6]
   11212:	18c0      	adds	r0, r0, r3
   11214:	b280      	uxth	r0, r0
   11216:	f04f 0100 	mov.w	r1, #0
   1121a:	f000 f891 	bl	11340 <eeprom::getEeprom8(unsigned short, unsigned char)>
   1121e:	4601      	mov	r1, r0
   11220:	a801      	add	r0, sp, #4
   11222:	463a      	mov	r2, r7
   11224:	f7fd fbca 	bl	e9bc <SoftI2cManager::write(unsigned char, Pin const&)>
    i2cPots.stop();
   11228:	a801      	add	r0, sp, #4
   1122a:	f7fd fba3 	bl	e974 <SoftI2cManager::stop()>
}
   1122e:	b009      	add	sp, #36	; 0x24
   11230:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11232:	bf00      	nop
   11234:	10001780 	.word	0x10001780

00011238 <DigiPots::init(unsigned char)>:
    
    pot_pin(pot),
    eeprom_base(eeprom_base_in) {
}

void DigiPots::init(const uint8_t idx) {
   11238:	b508      	push	{r3, lr}
	
	eeprom_pot_offset = idx;
   1123a:	8101      	strh	r1, [r0, #8]
    resetPots();
   1123c:	f7ff ffc6 	bl	111cc <DigiPots::resetPots()>
 
}
   11240:	bd08      	pop	{r3, pc}
   11242:	bf00      	nop

00011244 <DigiPots::setPotValue(unsigned char)>:
    i2cPots.write(eeprom::getEeprom8(eeprom_base + eeprom_pot_offset, 0), pot_pin);
    i2cPots.stop();
}

void DigiPots::setPotValue(const uint8_t val)
{
   11244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11248:	b088      	sub	sp, #32
   1124a:	4607      	mov	r7, r0
   1124c:	4688      	mov	r8, r1
   1124e:	ac01      	add	r4, sp, #4
   11250:	f241 756c 	movw	r5, #5996	; 0x176c
   11254:	f2c1 0500 	movt	r5, #4096	; 0x1000
    i2cPots.start(0b01011110 | I2C_WRITE, pot_pin);
    i2cPots.write(eeprom::getEeprom8(eeprom_base + eeprom_pot_offset, 0), pot_pin);
    i2cPots.stop();
}

void DigiPots::setPotValue(const uint8_t val)
   11258:	ae06      	add	r6, sp, #24
   1125a:	4620      	mov	r0, r4
   1125c:	4629      	mov	r1, r5
   1125e:	f000 ff11 	bl	12084 <Pin::Pin(Pin const&)>
   11262:	f104 0405 	add.w	r4, r4, #5
   11266:	f105 0505 	add.w	r5, r5, #5
   1126a:	42b4      	cmp	r4, r6
   1126c:	d1f5      	bne.n	1125a <DigiPots::setPotValue(unsigned char)+0x16>
   1126e:	4c0e      	ldr	r4, [pc, #56]	; (112a8 <DigiPots::setPotValue(unsigned char)+0x64>)
   11270:	a806      	add	r0, sp, #24
   11272:	4621      	mov	r1, r4
   11274:	f000 ff06 	bl	12084 <Pin::Pin(Pin const&)>
   11278:	7963      	ldrb	r3, [r4, #5]
   1127a:	f88d 301d 	strb.w	r3, [sp, #29]
{
    SoftI2cManager i2cPots = SoftI2cManager::getI2cManager();
    i2cPots.start(0b01011110 | I2C_WRITE, pot_pin);
   1127e:	a801      	add	r0, sp, #4
   11280:	f04f 015e 	mov.w	r1, #94	; 0x5e
   11284:	463a      	mov	r2, r7
   11286:	f7fd fc09 	bl	ea9c <SoftI2cManager::start(unsigned char, Pin const&)>
    i2cPots.write(val > DIGI_POT_MAX ? DIGI_POT_MAX : val, pot_pin);
   1128a:	a801      	add	r0, sp, #4
   1128c:	f1b8 0f76 	cmp.w	r8, #118	; 0x76
   11290:	bf34      	ite	cc
   11292:	4641      	movcc	r1, r8
   11294:	2176      	movcs	r1, #118	; 0x76
   11296:	463a      	mov	r2, r7
   11298:	f7fd fb90 	bl	e9bc <SoftI2cManager::write(unsigned char, Pin const&)>
    i2cPots.stop(); 
   1129c:	a801      	add	r0, sp, #4
   1129e:	f7fd fb69 	bl	e974 <SoftI2cManager::stop()>
}
   112a2:	b008      	add	sp, #32
   112a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   112a8:	10001780 	.word	0x10001780

000112ac <_GLOBAL__sub_I__ZN8DigiPotsC2ERK3PinRKt>:
   112ac:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
   112ae:	f641 00c4 	movw	r0, #6340	; 0x18c4
   112b2:	f2c1 0000 	movt	r0, #4096	; 0x1000
   112b6:	f04f 0100 	mov.w	r1, #0
   112ba:	f000 fcbf 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
   112be:	f641 00c8 	movw	r0, #6344	; 0x18c8
   112c2:	f2c1 0000 	movt	r0, #4096	; 0x1000
   112c6:	f04f 0101 	mov.w	r1, #1
   112ca:	f000 fcb7 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
   112ce:	f641 00cc 	movw	r0, #6348	; 0x18cc
   112d2:	f2c1 0000 	movt	r0, #4096	; 0x1000
   112d6:	f04f 0102 	mov.w	r1, #2
   112da:	f000 fcaf 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
   112de:	f641 00d0 	movw	r0, #6352	; 0x18d0
   112e2:	f2c1 0000 	movt	r0, #4096	; 0x1000
   112e6:	f04f 0103 	mov.w	r1, #3
   112ea:	f000 fca7 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
   112ee:	f641 00d4 	movw	r0, #6356	; 0x18d4
   112f2:	f2c1 0000 	movt	r0, #4096	; 0x1000
   112f6:	f04f 0104 	mov.w	r1, #4
   112fa:	f000 fc9f 	bl	11c3c <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
   112fe:	f641 04d8 	movw	r4, #6360	; 0x18d8
   11302:	f2c1 0400 	movt	r4, #4096	; 0x1000
   11306:	4620      	mov	r0, r4
   11308:	f04f 01ff 	mov.w	r1, #255	; 0xff
   1130c:	f000 fc96 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
   11310:	f641 00dc 	movw	r0, #6364	; 0x18dc
   11314:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11318:	4621      	mov	r1, r4
   1131a:	f04f 0200 	mov.w	r2, #0
   1131e:	f000 fe9f 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
   11322:	bd10      	pop	{r4, pc}

00011324 <eeprom::getflashupdate()>:
namespace eeprom {

volatile bool flash_updated;

bool getflashupdate(void){
	return flash_updated;
   11324:	f641 03e4 	movw	r3, #6372	; 0x18e4
   11328:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1132c:	7818      	ldrb	r0, [r3, #0]
}
   1132e:	4770      	bx	lr

00011330 <eeprom::clearflashupdate()>:

void clearflashupdate(void){
	flash_updated = false;
   11330:	f641 03e4 	movw	r3, #6372	; 0x18e4
   11334:	f2c1 0300 	movt	r3, #4096	; 0x1000
   11338:	f04f 0200 	mov.w	r2, #0
   1133c:	701a      	strb	r2, [r3, #0]
}
   1133e:	4770      	bx	lr

00011340 <eeprom::getEeprom8(unsigned short, unsigned char)>:
	//Update XHomeOffsets to update incorrect settings for single/dual machines
	setDefaultAxisHomePositions(); //:FAR:Q: do we need to do this here?
//	save_to_flash();
}

uint8_t getEeprom8(const uint16_t location, const uint8_t default_value) {
   11340:	b538      	push	{r3, r4, r5, lr}
   11342:	4604      	mov	r4, r0
   11344:	460d      	mov	r5, r1
        uint8_t data;
        /// TODO: why not just use eeprom_read_byte?
		if (location < 0 || location >= eeprom_info::EEPROM_SIZE){
   11346:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   1134a:	d30f      	bcc.n	1136c <eeprom::getEeprom8(unsigned short, unsigned char)+0x2c>
			xprintf("Start Address:%x Hex written:0x\%x char written:%c" "\n",EEPROM_START_ADDRESS + (location*4), (uint8_t)eeprom_address(EEPROM_START_ADDRESS, location), (uint8_t)eeprom_address(EEPROM_START_ADDRESS, location));
   1134c:	f100 6180 	add.w	r1, r0, #67108864	; 0x4000000
   11350:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
   11354:	ea4f 0181 	mov.w	r1, r1, lsl #2
   11358:	680a      	ldr	r2, [r1, #0]
   1135a:	680b      	ldr	r3, [r1, #0]
   1135c:	f64b 50b4 	movw	r0, #48564	; 0xbdb4
   11360:	f2c0 0002 	movt	r0, #2
   11364:	b2d2      	uxtb	r2, r2
   11366:	b2db      	uxtb	r3, r3
   11368:	f7f5 faf4 	bl	6954 <xprintf>
		}
    	data = (uint8_t)eeprom_address(EEPROM_START_ADDRESS, location);
   1136c:	f104 6480 	add.w	r4, r4, #67108864	; 0x4000000
   11370:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
   11374:	ea4f 0484 	mov.w	r4, r4, lsl #2
   11378:	6820      	ldr	r0, [r4, #0]
   1137a:	b2c0      	uxtb	r0, r0
    	if (data == 0xff) data = default_value;
//        eeprom_read_block(&data,(const uint8_t*)location,1);
//        if (data == 0xff) data = default_value;
        return data;
}
   1137c:	28ff      	cmp	r0, #255	; 0xff
   1137e:	bf08      	it	eq
   11380:	4628      	moveq	r0, r5
   11382:	bd38      	pop	{r3, r4, r5, pc}

00011384 <eeprom::setEeprom8(unsigned short, unsigned char)>:

void setEeprom8(const uint16_t location, const uint8_t set_value) {
   11384:	b538      	push	{r3, r4, r5, lr}
   11386:	4604      	mov	r4, r0
   11388:	460d      	mov	r5, r1
        /// TODO: why not just use eeprom_read_byte?
		if (location < 0 || location >= eeprom_info::EEPROM_SIZE){
   1138a:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   1138e:	d30f      	bcc.n	113b0 <eeprom::setEeprom8(unsigned short, unsigned char)+0x2c>
			xprintf("Start Address:%x Hex written:0x\%x char written:%c" "\n",EEPROM_START_ADDRESS + (location*4), (uint8_t)eeprom_address(EEPROM_START_ADDRESS, location), (uint8_t)eeprom_address(EEPROM_START_ADDRESS, location));
   11390:	f100 6180 	add.w	r1, r0, #67108864	; 0x4000000
   11394:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
   11398:	ea4f 0181 	mov.w	r1, r1, lsl #2
   1139c:	680a      	ldr	r2, [r1, #0]
   1139e:	680b      	ldr	r3, [r1, #0]
   113a0:	f64b 50b4 	movw	r0, #48564	; 0xbdb4
   113a4:	f2c0 0002 	movt	r0, #2
   113a8:	b2d2      	uxtb	r2, r2
   113aa:	b2db      	uxtb	r3, r3
   113ac:	f7f5 fad2 	bl	6954 <xprintf>
		}
    	eeprom_address(EEPROM_START_ADDRESS, location) = set_value;
   113b0:	f104 6480 	add.w	r4, r4, #67108864	; 0x4000000
   113b4:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
   113b8:	ea4f 0484 	mov.w	r4, r4, lsl #2
   113bc:	6025      	str	r5, [r4, #0]
    	flash_updated = true;
   113be:	f641 03e4 	movw	r3, #6372	; 0x18e4
   113c2:	f2c1 0300 	movt	r3, #4096	; 0x1000
   113c6:	f04f 0201 	mov.w	r2, #1
   113ca:	701a      	strb	r2, [r3, #0]
}
   113cc:	bd38      	pop	{r3, r4, r5, pc}
   113ce:	bf00      	nop

000113d0 <eeprom::init()>:
/**
 * if the EEPROM is initalized and matches firmware version, exit
 * if the EEPROM is not initalized, write defaults, and set a new version
 * if the EEPROM is initalized but is not the current version, re-write the version number
 */
void init() {
   113d0:	b510      	push	{r4, lr}
   113d2:	b082      	sub	sp, #8
	read_all_from_flash();
   113d4:	f7f8 fb5c 	bl	9a90 <eeprom::read_all_from_flash()>
	uint8_t prom_version[2];
	prom_version[0] = getEeprom8(eeprom_offsets::VERSION_LOW, 0);
   113d8:	f04f 0000 	mov.w	r0, #0
   113dc:	4601      	mov	r1, r0
   113de:	f7ff ffaf 	bl	11340 <eeprom::getEeprom8(unsigned short, unsigned char)>
   113e2:	4604      	mov	r4, r0
	prom_version[1] = getEeprom8(eeprom_offsets::VERSION_HIGH, 0);
   113e4:	f04f 0001 	mov.w	r0, #1
   113e8:	f04f 0100 	mov.w	r1, #0
   113ec:	f7ff ffa8 	bl	11340 <eeprom::getEeprom8(unsigned short, unsigned char)>
//	eeprom_read_block(prom_version,(const uint8_t*)eeprom_offsets::VERSION_LOW,2);
	if ((prom_version[1]*100+prom_version[0]) == firmware_version)
   113f0:	f04f 0364 	mov.w	r3, #100	; 0x64
   113f4:	fb03 4400 	mla	r4, r3, r0, r4
   113f8:	f240 232a 	movw	r3, #554	; 0x22a
   113fc:	429c      	cmp	r4, r3
   113fe:	d01a      	beq.n	11436 <eeprom::init()+0x66>
		return;

	/// if our eeprom is empty (version is still FF, ie unwritten)
	if (prom_version[1] == 0xff || prom_version[1] < 2) {
   11400:	f1a0 0002 	sub.w	r0, r0, #2
   11404:	b2c0      	uxtb	r0, r0
   11406:	28fc      	cmp	r0, #252	; 0xfc
   11408:	d901      	bls.n	1140e <eeprom::init()+0x3e>
		fullResetEEPROM();
   1140a:	f7f8 fdc9 	bl	9fa0 <eeprom::fullResetEEPROM()>
            //setDefaults();
	}

	//Update eeprom version # to match current firmware version
	prom_version[0] = firmware_version % 100;
   1140e:	f04f 0136 	mov.w	r1, #54	; 0x36
   11412:	f88d 1004 	strb.w	r1, [sp, #4]
	prom_version[1] = firmware_version / 100;
   11416:	f04f 0305 	mov.w	r3, #5
   1141a:	f88d 3005 	strb.w	r3, [sp, #5]
	for (uint8_t i=0; i<2;i++) {
		setEeprom8(eeprom_offsets::VERSION_LOW + i, prom_version[i]);
   1141e:	f04f 0000 	mov.w	r0, #0
   11422:	f7ff ffaf 	bl	11384 <eeprom::setEeprom8(unsigned short, unsigned char)>
   11426:	f04f 0001 	mov.w	r0, #1
   1142a:	f89d 1005 	ldrb.w	r1, [sp, #5]
   1142e:	f7ff ffa9 	bl	11384 <eeprom::setEeprom8(unsigned short, unsigned char)>
	}
//	xprintf("%x" " (%s:%d)\n",eeprom_address(EEPROM_START_ADDRESS, eeprom_offsets::VERSION_LOW),_F_,_L_);
//	xprintf("%x" " (%s:%d)\n",eeprom_address(EEPROM_START_ADDRESS, eeprom_offsets::VERSION_HIGH),_F_,_L_);
//	eeprom_write_block(prom_version,(uint8_t*)eeprom_offsets::VERSION_LOW,2);
	//Update XHomeOffsets to update incorrect settings for single/dual machines
	setDefaultAxisHomePositions(); //:FAR:Q: do we need to do this here?
   11432:	f7f8 fcc1 	bl	9db8 <eeprom::setDefaultAxisHomePositions()>
//	save_to_flash();
}
   11436:	b002      	add	sp, #8
   11438:	bd10      	pop	{r4, pc}
   1143a:	bf00      	nop

0001143c <eeprom::getEeprom16(unsigned short, unsigned short)>:
		}
    	eeprom_address(EEPROM_START_ADDRESS, location) = set_value;
    	flash_updated = true;
}

uint16_t getEeprom16(const uint16_t location, const uint16_t default_value) {
   1143c:	b570      	push	{r4, r5, r6, lr}
   1143e:	4605      	mov	r5, r0
   11440:	460e      	mov	r6, r1
	uint16_t data =	getEeprom8(location, 0);
   11442:	f04f 0100 	mov.w	r1, #0
   11446:	f7ff ff7b 	bl	11340 <eeprom::getEeprom8(unsigned short, unsigned char)>
   1144a:	4604      	mov	r4, r0
	data |= getEeprom8(location+1, 0)<<8;
   1144c:	f105 0001 	add.w	r0, r5, #1
   11450:	b280      	uxth	r0, r0
   11452:	f04f 0100 	mov.w	r1, #0
   11456:	f7ff ff73 	bl	11340 <eeprom::getEeprom8(unsigned short, unsigned char)>
   1145a:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
        /// TODO: why not just use eeprom_read_word?
    	if (data == 0xffff) data = default_value;
   1145e:	b280      	uxth	r0, r0
//        eeprom_read_block(&data,(const uint8_t*)location,2);
//        if (data == 0xffff) data = default_value;
//    	xprintf("getEeprom16" " (%s:%d)\n",_F_,_L_);
//    	xprintf("%x" " (%s:%d)\n",data,_F_,_L_);
        return data;
}
   11460:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11464:	4298      	cmp	r0, r3
   11466:	bf08      	it	eq
   11468:	4630      	moveq	r0, r6
   1146a:	bd70      	pop	{r4, r5, r6, pc}

0001146c <eeprom::setEeprom16(unsigned short, unsigned short)>:

void setEeprom16(const uint16_t location, const uint16_t set_value) {
   1146c:	b538      	push	{r3, r4, r5, lr}
   1146e:	4605      	mov	r5, r0
   11470:	460c      	mov	r4, r1
	setEeprom8(location, set_value&0xff);
   11472:	b2c9      	uxtb	r1, r1
   11474:	f7ff ff86 	bl	11384 <eeprom::setEeprom8(unsigned short, unsigned char)>
	setEeprom8(location+1, set_value>>8);
   11478:	f105 0001 	add.w	r0, r5, #1
   1147c:	b280      	uxth	r0, r0
   1147e:	ea4f 2114 	mov.w	r1, r4, lsr #8
   11482:	f7ff ff7f 	bl	11384 <eeprom::setEeprom8(unsigned short, unsigned char)>
}
   11486:	bd38      	pop	{r3, r4, r5, pc}

00011488 <eeprom::getEeprom32(unsigned short, unsigned long)>:

uint32_t getEeprom32(const uint16_t location, const uint32_t default_value) {
   11488:	b570      	push	{r4, r5, r6, lr}
   1148a:	4605      	mov	r5, r0
   1148c:	460e      	mov	r6, r1
	uint32_t data =	getEeprom16(location, 0);
   1148e:	f04f 0100 	mov.w	r1, #0
   11492:	f7ff ffd3 	bl	1143c <eeprom::getEeprom16(unsigned short, unsigned short)>
   11496:	4604      	mov	r4, r0
	data |= getEeprom8(location+2, 0)<<8;
   11498:	f105 0002 	add.w	r0, r5, #2
   1149c:	b280      	uxth	r0, r0
   1149e:	f04f 0100 	mov.w	r1, #0
   114a2:	f7ff ff4d 	bl	11340 <eeprom::getEeprom8(unsigned short, unsigned char)>
   114a6:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
//	uint32_t data = eeprom_read_dword((const uint32_t*)location);
        if (data == 0xffffffff) return default_value;
//    	xprintf("getEeprom32" " (%s:%d)\n",_F_,_L_);
//    	xprintf("%x" " (%s:%d)\n",data,_F_,_L_);
        return data;
}
   114aa:	f1b0 3fff 	cmp.w	r0, #4294967295
   114ae:	bf08      	it	eq
   114b0:	4630      	moveq	r0, r6
   114b2:	bd70      	pop	{r4, r5, r6, pc}

000114b4 <eeprom::setEeprom32(unsigned short, unsigned long)>:

void setEeprom32(const uint16_t location, const uint32_t set_value) {
   114b4:	b538      	push	{r3, r4, r5, lr}
   114b6:	4605      	mov	r5, r0
   114b8:	460c      	mov	r4, r1
	setEeprom16(location, (uint16_t)(set_value&0xffff));
   114ba:	b289      	uxth	r1, r1
   114bc:	f7ff ffd6 	bl	1146c <eeprom::setEeprom16(unsigned short, unsigned short)>
	setEeprom16(location+2, (uint16_t)(set_value>>16));
   114c0:	f105 0002 	add.w	r0, r5, #2
   114c4:	b280      	uxth	r0, r0
   114c6:	ea4f 4114 	mov.w	r1, r4, lsr #16
   114ca:	f7ff ffcf 	bl	1146c <eeprom::setEeprom16(unsigned short, unsigned short)>
}
   114ce:	bd38      	pop	{r3, r4, r5, pc}

000114d0 <eeprom::getEepromFixed16(unsigned short, float)>:
	setEeprom16(location, (uint16_t)set_value&0xffff);
	setEeprom16(location+2, (uint16_t)set_value>>16);
}

/// Fetch a fixed 16 value from eeprom
float getEepromFixed16(const uint16_t location, const float default_value) {
   114d0:	b508      	push	{r3, lr}
//        uint8_t data[2];
		uint16_t data = (uint8_t)eeprom_address(EEPROM_START_ADDRESS, location);
   114d2:	f100 6380 	add.w	r3, r0, #67108864	; 0x4000000
   114d6:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
   114da:	ea4f 0383 	mov.w	r3, r3, lsl #2
   114de:	6818      	ldr	r0, [r3, #0]
   114e0:	b2c0      	uxtb	r0, r0
//        eeprom_read_block(data,(const uint8_t*)location,2);
//    	xprintf("getEepromFixed16" " (%s:%d)\n",_F_,_L_);
//    	xprintf("%x" " (%s:%d)\n",data[0],_F_,_L_);
//    	xprintf("%x" " (%s:%d)\n",data[1],_F_,_L_);
        if (data == 0xffff) return default_value;
        return ((float)data);
   114e2:	f002 fa99 	bl	13a18 <__aeabi_ui2f>
//        if (data[0] == 0xff && data[1] == 0xff) return default_value;
//        return ((float)data[0]) + ((float)data[1])/256.0;
}
   114e6:	bd08      	pop	{r3, pc}

000114e8 <Heater::reset()>:
		heat_timing_check(timingCheckOn)
{
	reset();
}

void Heater::reset() {
   114e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   114ec:	b088      	sub	sp, #32
   114ee:	4604      	mov	r4, r0
	// TODO: Reset sensor, element here?
	xprintf("Heater::reset()" " (%s:%d)\n",_F_,_L_);
   114f0:	f64b 50e8 	movw	r0, #48616	; 0xbde8
   114f4:	f2c0 0002 	movt	r0, #2
   114f8:	4942      	ldr	r1, [pc, #264]	; (11604 <Heater::reset()+0x11c>)
   114fa:	f04f 024d 	mov.w	r2, #77	; 0x4d
   114fe:	f7f5 fa29 	bl	6954 <xprintf>
	current_temperature = 0;
   11502:	f04f 0300 	mov.w	r3, #0
   11506:	461e      	mov	r6, r3
   11508:	85a3      	strh	r3, [r4, #44]	; 0x2c
	startTemp = 0;
   1150a:	85e3      	strh	r3, [r4, #46]	; 0x2e

	fail_state = false;
   1150c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
	fail_count = 0;
   11510:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
	fail_mode = HEATER_FAIL_NONE;
   11514:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	value_fail_count = 0;
   11518:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63

	heatingUpTimer = Timeout();
   1151c:	4668      	mov	r0, sp
   1151e:	f001 f939 	bl	12794 <Timeout::Timeout()>
   11522:	f104 0768 	add.w	r7, r4, #104	; 0x68
   11526:	e89d 000f 	ldmia.w	sp, {r0, r1, r2, r3}
   1152a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
	heatProgressTimer = Timeout();
   1152e:	ad04      	add	r5, sp, #16
   11530:	4628      	mov	r0, r5
   11532:	f001 f92f 	bl	12794 <Timeout::Timeout()>
   11536:	f104 0778 	add.w	r7, r4, #120	; 0x78
   1153a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1153e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
	progressChecked = false;
   11542:	f884 6088 	strb.w	r6, [r4, #136]	; 0x88
	newTargetReached = false;
   11546:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
//	reached_count = 0;
	is_paused = false;
   1154a:	f884 608a 	strb.w	r6, [r4, #138]	; 0x8a

	float p = eeprom::getEepromFixed16(eeprom_base+pid_eeprom_offsets::P_TERM_OFFSET,DEFAULT_P);
   1154e:	8e60      	ldrh	r0, [r4, #50]	; 0x32
   11550:	f04f 0100 	mov.w	r1, #0
   11554:	f2c4 01e0 	movt	r1, #16608	; 0x40e0
   11558:	f7ff ffba 	bl	114d0 <eeprom::getEepromFixed16(unsigned short, float)>
   1155c:	4605      	mov	r5, r0
	float i = eeprom::getEepromFixed16(eeprom_base+pid_eeprom_offsets::I_TERM_OFFSET,DEFAULT_I);
   1155e:	8e60      	ldrh	r0, [r4, #50]	; 0x32
   11560:	f100 0002 	add.w	r0, r0, #2
   11564:	b280      	uxth	r0, r0
   11566:	f246 6166 	movw	r1, #26214	; 0x6666
   1156a:	f6c3 61a6 	movt	r1, #16038	; 0x3ea6
   1156e:	f7ff ffaf 	bl	114d0 <eeprom::getEepromFixed16(unsigned short, float)>
   11572:	4607      	mov	r7, r0
	float d = eeprom::getEepromFixed16(eeprom_base+pid_eeprom_offsets::D_TERM_OFFSET,DEFAULT_D);
   11574:	8e60      	ldrh	r0, [r4, #50]	; 0x32
   11576:	f100 0004 	add.w	r0, r0, #4
   1157a:	b280      	uxth	r0, r0
   1157c:	f04f 0100 	mov.w	r1, #0
   11580:	f2c4 2110 	movt	r1, #16912	; 0x4210
   11584:	f7ff ffa4 	bl	114d0 <eeprom::getEepromFixed16(unsigned short, float)>
   11588:	4680      	mov	r8, r0

	pid.reset();
   1158a:	f104 0634 	add.w	r6, r4, #52	; 0x34
   1158e:	4630      	mov	r0, r6
   11590:	f000 fcd8 	bl	11f44 <PID::reset()>
	if (p == 0 && i == 0 && d == 0) {
   11594:	4628      	mov	r0, r5
   11596:	f04f 0100 	mov.w	r1, #0
   1159a:	f002 fc29 	bl	13df0 <__aeabi_fcmpeq>
   1159e:	b1b8      	cbz	r0, 115d0 <Heater::reset()+0xe8>
   115a0:	4638      	mov	r0, r7
   115a2:	f04f 0100 	mov.w	r1, #0
   115a6:	f002 fc23 	bl	13df0 <__aeabi_fcmpeq>
   115aa:	b188      	cbz	r0, 115d0 <Heater::reset()+0xe8>
   115ac:	4640      	mov	r0, r8
   115ae:	f04f 0100 	mov.w	r1, #0
   115b2:	f002 fc1d 	bl	13df0 <__aeabi_fcmpeq>
   115b6:	b158      	cbz	r0, 115d0 <Heater::reset()+0xe8>
		p = DEFAULT_P; i = DEFAULT_I; d = DEFAULT_D;
   115b8:	f04f 0800 	mov.w	r8, #0
   115bc:	f2c4 2810 	movt	r8, #16912	; 0x4210
   115c0:	f246 6766 	movw	r7, #26214	; 0x6666
   115c4:	f6c3 67a6 	movt	r7, #16038	; 0x3ea6
   115c8:	f04f 0500 	mov.w	r5, #0
   115cc:	f2c4 05e0 	movt	r5, #16608	; 0x40e0
    /// Initialize the PID module
    PID();

    /// Set the P term of the PID controller
    /// \param[in] p_gain_in New proportional gain term
    void setPGain(const float p_gain_in) { p_gain = p_gain_in; }
   115d0:	6365      	str	r5, [r4, #52]	; 0x34

    /// Set the I term of the PID controller
    /// \param[in] i_gain_in New integration gain term
    void setIGain(const float i_gain_in) { i_gain = i_gain_in; }
   115d2:	63a7      	str	r7, [r4, #56]	; 0x38

    /// Set the D term of the PID controller
    /// \param[in] d_gain_in New derivative gain term
    void setDGain(const float d_gain_in) { d_gain = d_gain_in; }
   115d4:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
	}
	pid.setPGain(p);
	pid.setIGain(i);
	pid.setDGain(d);
	pid.setTarget(0);
   115d8:	4630      	mov	r0, r6
   115da:	f04f 0100 	mov.w	r1, #0
   115de:	f000 fd19 	bl	12014 <PID::setTarget(int)>
	next_pid_timeout.start(UPDATE_INTERVAL_MICROS);
   115e2:	f104 0008 	add.w	r0, r4, #8
   115e6:	f24a 1120 	movw	r1, #41248	; 0xa120
   115ea:	f2c0 0107 	movt	r1, #7
   115ee:	f001 f8d7 	bl	127a0 <Timeout::start(unsigned long)>
	next_sense_timeout.start(sample_interval_micros);
   115f2:	f104 0018 	add.w	r0, r4, #24
   115f6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   115f8:	f001 f8d2 	bl	127a0 <Timeout::start(unsigned long)>

}
   115fc:	b008      	add	sp, #32
   115fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11602:	bf00      	nop
   11604:	0002be1b 	.word	0x0002be1b

00011608 <Heater::Heater(TemperatureSensor&, HeatingElement&, unsigned long, unsigned short, bool)>:


/// threshold above starting temperature we check for heating progres
const uint16_t HEAT_PROGRESS_THRESHOLD = 10;

Heater::Heater(TemperatureSensor& sensor_in,
   11608:	b538      	push	{r3, r4, r5, lr}
   1160a:	4604      	mov	r4, r0
   1160c:	461d      	mov	r5, r3
               uint16_t eeprom_base_in, bool timingCheckOn) :
		sensor(sensor_in),
		element(element_in),
		sample_interval_micros(sample_interval_micros_in),
		eeprom_base(eeprom_base_in),
		heat_timing_check(timingCheckOn)
   1160e:	6001      	str	r1, [r0, #0]
   11610:	6042      	str	r2, [r0, #4]
   11612:	f100 0008 	add.w	r0, r0, #8
   11616:	f001 f8bd 	bl	12794 <Timeout::Timeout()>
   1161a:	f104 0018 	add.w	r0, r4, #24
   1161e:	f001 f8b9 	bl	12794 <Timeout::Timeout()>
   11622:	62a5      	str	r5, [r4, #40]	; 0x28
   11624:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   11628:	8663      	strh	r3, [r4, #50]	; 0x32
   1162a:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1162e:	f000 fc95 	bl	11f5c <PID::PID()>
   11632:	f104 0068 	add.w	r0, r4, #104	; 0x68
   11636:	f001 f8ad 	bl	12794 <Timeout::Timeout()>
   1163a:	f104 0078 	add.w	r0, r4, #120	; 0x78
   1163e:	f001 f8a9 	bl	12794 <Timeout::Timeout()>
   11642:	f89d 3014 	ldrb.w	r3, [sp, #20]
   11646:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
{
	reset();
   1164a:	4620      	mov	r0, r4
   1164c:	f7ff ff4c 	bl	114e8 <Heater::reset()>
}
   11650:	4620      	mov	r0, r4
   11652:	bd38      	pop	{r3, r4, r5, pc}

00011654 <Heater::set_target_temperature(int)>:
  'disable heaters'
 */
#define MAX_VALID_TEMP 280

void Heater::set_target_temperature(int temp)
{
   11654:	b5f0      	push	{r4, r5, r6, r7, lr}
   11656:	b08d      	sub	sp, #52	; 0x34
   11658:	4604      	mov	r4, r0
   1165a:	f5b1 7f8c 	cmp.w	r1, #280	; 0x118
   1165e:	bfa8      	it	ge
   11660:	f44f 718c 	movge.w	r1, #280	; 0x118
   11664:	ea21 76e1 	bic.w	r6, r1, r1, asr #31
	}
	if(temp < 0){
		temp = 0;
	}
	
	newTargetReached = false;
   11668:	f04f 0300 	mov.w	r3, #0
   1166c:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
	//reached_count = 0;
	
	if(heat_timing_check){
   11670:	f890 3089 	ldrb.w	r3, [r0, #137]	; 0x89
   11674:	2b00      	cmp	r3, #0
   11676:	d039      	beq.n	116ec <Heater::set_target_temperature(int)+0x98>
		startTemp = current_temperature;	
   11678:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   1167a:	b29b      	uxth	r3, r3
   1167c:	85c3      	strh	r3, [r0, #46]	; 0x2e
		progressChecked = false;
   1167e:	f04f 0300 	mov.w	r3, #0
   11682:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
		value_fail_count = 0;
   11686:	f880 3063 	strb.w	r3, [r0, #99]	; 0x63
	
		// start a progress timer to verify we are getting temp change over time.
		if(temp > HEAT_FAIL_THRESHOLD){
   1168a:	2e1e      	cmp	r6, #30
   1168c:	dd1a      	ble.n	116c4 <Heater::set_target_temperature(int)+0x70>
			// if the current temp is greater than a (low) threshold, don't check the heating up time, because
			// we've already done that to get to this temperature
			if((temp > startTemp + HEAT_PROGRESS_THRESHOLD) && (startTemp < HEAT_CHECKED_THRESHOLD))
   1168e:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   11690:	b29b      	uxth	r3, r3
   11692:	f103 030a 	add.w	r3, r3, #10
   11696:	42b3      	cmp	r3, r6
   11698:	da2f      	bge.n	116fa <Heater::set_target_temperature(int)+0xa6>
   1169a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   1169c:	b29b      	uxth	r3, r3
   1169e:	2b31      	cmp	r3, #49	; 0x31
   116a0:	d82b      	bhi.n	116fa <Heater::set_target_temperature(int)+0xa6>
			{	heatProgressTimer.start(HEAT_PROGRESS_TIME);}
   116a2:	f100 0078 	add.w	r0, r0, #120	; 0x78
   116a6:	f44f 4195 	mov.w	r1, #19072	; 0x4a80
   116aa:	f2c0 515d 	movt	r1, #1373	; 0x55d
   116ae:	f001 f877 	bl	127a0 <Timeout::start(unsigned long)>
			else
			{	heatProgressTimer = Timeout(); }
				
			heatingUpTimer.start(HEAT_UP_TIME);
   116b2:	f104 0068 	add.w	r0, r4, #104	; 0x68
   116b6:	f44f 4123 	mov.w	r1, #41728	; 0xa300
   116ba:	f2c1 11e1 	movt	r1, #4577	; 0x11e1
   116be:	f001 f86f 	bl	127a0 <Timeout::start(unsigned long)>
   116c2:	e013      	b.n	116ec <Heater::set_target_temperature(int)+0x98>
		}
		else{
			heatingUpTimer = Timeout();
   116c4:	ad04      	add	r5, sp, #16
   116c6:	4628      	mov	r0, r5
   116c8:	f001 f864 	bl	12794 <Timeout::Timeout()>
   116cc:	f104 0768 	add.w	r7, r4, #104	; 0x68
   116d0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   116d4:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
			heatProgressTimer = Timeout();
   116d8:	ad08      	add	r5, sp, #32
   116da:	4628      	mov	r0, r5
   116dc:	f001 f85a 	bl	12794 <Timeout::Timeout()>
   116e0:	f104 0778 	add.w	r7, r4, #120	; 0x78
   116e4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   116e8:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
		}
	}
	pid.setTarget(temp);
   116ec:	f104 0034 	add.w	r0, r4, #52	; 0x34
   116f0:	4631      	mov	r1, r6
   116f2:	f000 fc8f 	bl	12014 <PID::setTarget(int)>
}
   116f6:	b00d      	add	sp, #52	; 0x34
   116f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			// if the current temp is greater than a (low) threshold, don't check the heating up time, because
			// we've already done that to get to this temperature
			if((temp > startTemp + HEAT_PROGRESS_THRESHOLD) && (startTemp < HEAT_CHECKED_THRESHOLD))
			{	heatProgressTimer.start(HEAT_PROGRESS_TIME);}
			else
			{	heatProgressTimer = Timeout(); }
   116fa:	4668      	mov	r0, sp
   116fc:	f001 f84a 	bl	12794 <Timeout::Timeout()>
   11700:	f104 0778 	add.w	r7, r4, #120	; 0x78
   11704:	e89d 000f 	ldmia.w	sp, {r0, r1, r2, r3}
   11708:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   1170c:	e7d1      	b.n	116b2 <Heater::set_target_temperature(int)+0x5e>
   1170e:	bf00      	nop

00011710 <Heater::has_reached_target_temperature()>:

/// Returns true if the current PID temperature is within tolerance
/// of the expected current temperature.
bool Heater::has_reached_target_temperature()
{
	if(is_paused){
   11710:	f890 308a 	ldrb.w	r3, [r0, #138]	; 0x8a
   11714:	b9ab      	cbnz	r3, 11742 <Heater::has_reached_target_temperature()+0x32>
		return false;
	}
    // flag temperature reached so that PID variations don't trigger this
    // a second time
	if(!newTargetReached){
   11716:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
   1171a:	b97b      	cbnz	r3, 1173c <Heater::has_reached_target_temperature()+0x2c>
		if((current_temperature >= (pid.getTarget() - TARGET_HYSTERESIS)) &&
   1171c:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
   1171e:	b289      	uxth	r1, r1
    void setTarget(const int target);

    /// Get the current PID target
    /// \return Current setpoint

    const int getTarget() const { return sp; }
   11720:	6d83      	ldr	r3, [r0, #88]	; 0x58
   11722:	f1a3 0202 	sub.w	r2, r3, #2
   11726:	4291      	cmp	r1, r2
   11728:	db08      	blt.n	1173c <Heater::has_reached_target_temperature()+0x2c>
   1172a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   1172c:	b292      	uxth	r2, r2
   1172e:	f103 0302 	add.w	r3, r3, #2
   11732:	429a      	cmp	r2, r3
			(current_temperature <= (pid.getTarget() + TARGET_HYSTERESIS)))
		{	
		//	reached_count++;
		//	if(reached_count >= TARGET_CHECK_COUNT){
				newTargetReached = true;
   11734:	bfdc      	itt	le
   11736:	2301      	movle	r3, #1
   11738:	f880 3030 	strble.w	r3, [r0, #48]	; 0x30
		//		}
		}
	}
	return newTargetReached; 
   1173c:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
   11740:	4770      	bx	lr
/// Returns true if the current PID temperature is within tolerance
/// of the expected current temperature.
bool Heater::has_reached_target_temperature()
{
	if(is_paused){
		return false;
   11742:	f04f 0000 	mov.w	r0, #0
				newTargetReached = true;
		//		}
		}
	}
	return newTargetReached; 
}
   11746:	4770      	bx	lr

00011748 <Heater::get_set_temperature()>:

int Heater::get_set_temperature() {
	return pid.getTarget();
}
   11748:	6d80      	ldr	r0, [r0, #88]	; 0x58
   1174a:	4770      	bx	lr

0001174c <Heater::get_current_temperature()>:

int Heater::get_current_temperature()
{
	return current_temperature;
   1174c:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
}
   1174e:	b280      	uxth	r0, r0
   11750:	4770      	bx	lr
   11752:	bf00      	nop

00011754 <Heater::getPIDErrorTerm()>:

int Heater::getPIDErrorTerm() {
   11754:	b508      	push	{r3, lr}
	return pid.getErrorTerm();
   11756:	f100 0034 	add.w	r0, r0, #52	; 0x34
   1175a:	f000 fc65 	bl	12028 <PID::getErrorTerm()>
}
   1175e:	bd08      	pop	{r3, pc}

00011760 <Heater::getPIDDeltaTerm()>:

int Heater::getPIDDeltaTerm() {
   11760:	b508      	push	{r3, lr}
	return pid.getDeltaTerm();
   11762:	f100 0034 	add.w	r0, r0, #52	; 0x34
   11766:	f000 fc61 	bl	1202c <PID::getDeltaTerm()>
}
   1176a:	bd08      	pop	{r3, pc}

0001176c <Heater::getPIDLastOutput()>:

int Heater::getPIDLastOutput() {
   1176c:	b508      	push	{r3, lr}
	return pid.getLastOutput();
   1176e:	f100 0034 	add.w	r0, r0, #52	; 0x34
   11772:	f000 fc61 	bl	12038 <PID::getLastOutput()>
}
   11776:	bd08      	pop	{r3, pc}

00011778 <Heater::isHeating()>:

bool Heater::isHeating(){
   11778:	b510      	push	{r4, lr}
   1177a:	4604      	mov	r4, r0
       return (pid.getTarget() > 0) && !has_reached_target_temperature() && !fail_state;
   1177c:	6d83      	ldr	r3, [r0, #88]	; 0x58
   1177e:	2b00      	cmp	r3, #0
   11780:	dd07      	ble.n	11792 <Heater::isHeating()+0x1a>
   11782:	f7ff ffc5 	bl	11710 <Heater::has_reached_target_temperature()>
   11786:	b938      	cbnz	r0, 11798 <Heater::isHeating()+0x20>

int Heater::getPIDLastOutput() {
	return pid.getLastOutput();
}

bool Heater::isHeating(){
   11788:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
   1178c:	f080 0001 	eor.w	r0, r0, #1
   11790:	bd10      	pop	{r4, pc}
       return (pid.getTarget() > 0) && !has_reached_target_temperature() && !fail_state;
   11792:	f04f 0000 	mov.w	r0, #0
   11796:	bd10      	pop	{r4, pc}
   11798:	f04f 0000 	mov.w	r0, #0
}
   1179c:	bd10      	pop	{r4, pc}
   1179e:	bf00      	nop

000117a0 <Heater::isCooling()>:

bool Heater::isCooling(){
   117a0:	b538      	push	{r3, r4, r5, lr}
   117a2:	4604      	mov	r4, r0
	return (current_temperature > get_set_temperature()) && !has_reached_target_temperature() && !fail_state;
   117a4:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   117a6:	b2ad      	uxth	r5, r5
   117a8:	f7ff ffce 	bl	11748 <Heater::get_set_temperature()>
   117ac:	4285      	cmp	r5, r0
   117ae:	dd08      	ble.n	117c2 <Heater::isCooling()+0x22>
   117b0:	4620      	mov	r0, r4
   117b2:	f7ff ffad 	bl	11710 <Heater::has_reached_target_temperature()>
   117b6:	b938      	cbnz	r0, 117c8 <Heater::isCooling()+0x28>

bool Heater::isHeating(){
       return (pid.getTarget() > 0) && !has_reached_target_temperature() && !fail_state;
}

bool Heater::isCooling(){
   117b8:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
   117bc:	f080 0001 	eor.w	r0, r0, #1
   117c0:	bd38      	pop	{r3, r4, r5, pc}
	return (current_temperature > get_set_temperature()) && !has_reached_target_temperature() && !fail_state;
   117c2:	f04f 0000 	mov.w	r0, #0
   117c6:	bd38      	pop	{r3, r4, r5, pc}
   117c8:	f04f 0000 	mov.w	r0, #0
}
   117cc:	bd38      	pop	{r3, r4, r5, pc}
   117ce:	bf00      	nop

000117d0 <Heater::set_output(unsigned char)>:
		
	}
}

void Heater::set_output(uint8_t value)
{
   117d0:	b508      	push	{r3, lr}
	element.setHeatingElement(value);
   117d2:	6840      	ldr	r0, [r0, #4]
   117d4:	6803      	ldr	r3, [r0, #0]
   117d6:	689b      	ldr	r3, [r3, #8]
   117d8:	4798      	blx	r3
}
   117da:	bd08      	pop	{r3, pc}

000117dc <Heater::Pause(bool)>:
}


// wait on heating the heater until told to continue
// @param on set pause to on or off
void Heater::Pause(bool on){	
   117dc:	b570      	push	{r4, r5, r6, lr}
   117de:	b088      	sub	sp, #32
   117e0:	4604      	mov	r4, r0
   117e2:	460d      	mov	r5, r1
	
	// don't pause / un-pause again
	if(is_paused == on)
   117e4:	f890 308a 	ldrb.w	r3, [r0, #138]	; 0x8a
   117e8:	428b      	cmp	r3, r1
   117ea:	d02b      	beq.n	11844 <Heater::Pause(bool)+0x68>
		return;
		
	// don't pause if heater is not on
	if (on && !isHeating())
   117ec:	b119      	cbz	r1, 117f6 <Heater::Pause(bool)+0x1a>
   117ee:	f7ff ffc3 	bl	11778 <Heater::isHeating()>
   117f2:	b948      	cbnz	r0, 11808 <Heater::Pause(bool)+0x2c>
   117f4:	e026      	b.n	11844 <Heater::Pause(bool)+0x68>
		return;
	
	//set paused flag
	is_paused = on;
   117f6:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
		// clear reached target temperature
		newTargetReached = false;
		
	}else{
		// restart heatup
		set_target_temperature(get_set_temperature());
   117fa:	f7ff ffa5 	bl	11748 <Heater::get_set_temperature()>
   117fe:	4601      	mov	r1, r0
   11800:	4620      	mov	r0, r4
   11802:	f7ff ff27 	bl	11654 <Heater::set_target_temperature(int)>
   11806:	e01d      	b.n	11844 <Heater::Pause(bool)+0x68>
	// don't pause if heater is not on
	if (on && !isHeating())
		return;
	
	//set paused flag
	is_paused = on;
   11808:	f884 508a 	strb.w	r5, [r4, #138]	; 0x8a
	
	if(is_paused){
		//set output to zero
		set_output(0);
   1180c:	4620      	mov	r0, r4
   1180e:	f04f 0100 	mov.w	r1, #0
   11812:	f7ff ffdd 	bl	117d0 <Heater::set_output(unsigned char)>
		// clear heatup timers
		heatingUpTimer = Timeout();
   11816:	4668      	mov	r0, sp
   11818:	f000 ffbc 	bl	12794 <Timeout::Timeout()>
   1181c:	f104 0668 	add.w	r6, r4, #104	; 0x68
   11820:	e89d 000f 	ldmia.w	sp, {r0, r1, r2, r3}
   11824:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		heatProgressTimer = Timeout();
   11828:	ad04      	add	r5, sp, #16
   1182a:	4628      	mov	r0, r5
   1182c:	f000 ffb2 	bl	12794 <Timeout::Timeout()>
   11830:	f104 0678 	add.w	r6, r4, #120	; 0x78
   11834:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   11838:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		// clear reached target temperature
		newTargetReached = false;
   1183c:	f04f 0300 	mov.w	r3, #0
   11840:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	}else{
		// restart heatup
		set_target_temperature(get_set_temperature());
		
	}
}
   11844:	b008      	add	sp, #32
   11846:	bd70      	pop	{r4, r5, r6, pc}

00011848 <Heater::fail()>:
	element.setHeatingElement(value);
}

// mark as failed and report to motherboard for user messaging
void Heater::fail()
{
   11848:	b510      	push	{r4, lr}
   1184a:	4604      	mov	r4, r0
	fail_state = true;
   1184c:	f04f 0301 	mov.w	r3, #1
   11850:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
	set_output(0);
   11854:	f04f 0100 	mov.w	r1, #0
   11858:	f7ff ffba 	bl	117d0 <Heater::set_output(unsigned char)>
	Motherboard::getBoard().heaterFail(fail_mode);
   1185c:	f640 509c 	movw	r0, #3484	; 0xd9c
   11860:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11864:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
   11868:	f7fa f930 	bl	bacc <Motherboard::heaterFail(HeaterFailMode)>
}
   1186c:	bd10      	pop	{r4, pc}
   1186e:	bf00      	nop

00011870 <Heater::manage_temperature()>:
		int16_t delta = (target > temp) ? target - temp : temp - target;
        return delta;
}


void Heater::manage_temperature() {
   11870:	b538      	push	{r3, r4, r5, lr}
   11872:	4604      	mov	r4, r0
//	xprintf("manage_temperature" " (%s:%d)\n",_F_,_L_);
	if (next_sense_timeout.hasElapsed()) {
   11874:	f100 0518 	add.w	r5, r0, #24
   11878:	4628      	mov	r0, r5
   1187a:	f000 ffa5 	bl	127c8 <Timeout::hasElapsed()>
   1187e:	2800      	cmp	r0, #0
   11880:	f000 8092 	beq.w	119a8 <Heater::manage_temperature()+0x138>
		next_sense_timeout.start(sample_interval_micros);
   11884:	4628      	mov	r0, r5
   11886:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   11888:	f000 ff8a 	bl	127a0 <Timeout::start(unsigned long)>
		switch (sensor.update()) {
   1188c:	6820      	ldr	r0, [r4, #0]
   1188e:	6803      	ldr	r3, [r0, #0]
   11890:	68db      	ldr	r3, [r3, #12]
   11892:	4798      	blx	r3
   11894:	b128      	cbz	r0, 118a2 <Heater::manage_temperature()+0x32>
   11896:	2802      	cmp	r0, #2
   11898:	d80f      	bhi.n	118ba <Heater::manage_temperature()+0x4a>
		case TemperatureSensor::SS_ADC_BUSY:
		case TemperatureSensor::SS_ADC_WAITING:
			// We're waiting for the ADC, so don't update the temperature yet.
			current_temperature = 2;
   1189a:	f04f 0302 	mov.w	r3, #2
   1189e:	85a3      	strh	r3, [r4, #44]	; 0x2c
			return;
   118a0:	bd38      	pop	{r3, r4, r5, pc}
			break;
		case TemperatureSensor::SS_OK:
			// Result was ok, so reset the fail counter, and continue.
			fail_count = 0;
   118a2:	f04f 0300 	mov.w	r3, #0
   118a6:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
			current_temperature = 3;
			return;
			break;
		}

		current_temperature = sensor.getTemperature();
   118aa:	6823      	ldr	r3, [r4, #0]

	/// Get the last read temperature from the sensor. Note that you need to call
	/// update() at least once for this to return good data.
	/// \return The current temperature, in degrees Celcius, or #BAD_TEMPERATURE if the
	///         last read failed.
	int16_t getTemperature() const { return current_temp; }
   118ac:	889b      	ldrh	r3, [r3, #4]
   118ae:	b29b      	uxth	r3, r3
   118b0:	85a3      	strh	r3, [r4, #44]	; 0x2c
		
		if (!is_paused){
   118b2:	f894 308a 	ldrb.w	r3, [r4, #138]	; 0x8a
   118b6:	b1a3      	cbz	r3, 118e2 <Heater::manage_temperature()+0x72>
   118b8:	e076      	b.n	119a8 <Heater::manage_temperature()+0x138>
			fail_count = 0;
			break;
		case TemperatureSensor::SS_ERROR_UNPLUGGED:
		default:
			// If we get too many bad readings in a row, shut down the heater.
			fail_count++;
   118ba:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   118be:	f103 0301 	add.w	r3, r3, #1
   118c2:	b2db      	uxtb	r3, r3
   118c4:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62

			if (fail_count > SENSOR_MAX_BAD_READINGS) {
   118c8:	2b05      	cmp	r3, #5
   118ca:	d906      	bls.n	118da <Heater::manage_temperature()+0x6a>
				fail_mode = HEATER_FAIL_NOT_PLUGGED_IN;
   118cc:	f04f 0302 	mov.w	r3, #2
   118d0:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
				fail();
   118d4:	4620      	mov	r0, r4
   118d6:	f7ff ffb7 	bl	11848 <Heater::fail()>
			}
			current_temperature = 3;
   118da:	f04f 0303 	mov.w	r3, #3
   118de:	85a3      	strh	r3, [r4, #44]	; 0x2c
			return;
   118e0:	bd38      	pop	{r3, r4, r5, pc}
		}

		current_temperature = sensor.getTemperature();
		
		if (!is_paused){
			uint8_t old_value_count = value_fail_count;
   118e2:	f894 5063 	ldrb.w	r5, [r4, #99]	; 0x63
			// check that the the heater isn't reading above the maximum allowable temp
			if (current_temperature > HEATER_CUTOFF_TEMPERATURE) {
   118e6:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   118e8:	b29b      	uxth	r3, r3
   118ea:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   118ee:	d90e      	bls.n	1190e <Heater::manage_temperature()+0x9e>
				value_fail_count++;
   118f0:	f105 0301 	add.w	r3, r5, #1
   118f4:	b2db      	uxtb	r3, r3
   118f6:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63

				if (value_fail_count > SENSOR_MAX_BAD_READINGS) {
   118fa:	2b05      	cmp	r3, #5
   118fc:	d907      	bls.n	1190e <Heater::manage_temperature()+0x9e>
					fail_mode = HEATER_FAIL_SOFTWARE_CUTOFF;
   118fe:	f04f 0304 	mov.w	r3, #4
   11902:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
					fail();
   11906:	4620      	mov	r0, r4
   11908:	f7ff ff9e 	bl	11848 <Heater::fail()>
					return;
   1190c:	bd38      	pop	{r3, r4, r5, pc}
				}
			}
			// check that the heater is heating up after target is set
			if(!progressChecked){
   1190e:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   11912:	bb0b      	cbnz	r3, 11958 <Heater::manage_temperature()+0xe8>
				if(heatProgressTimer.hasElapsed()){ 
   11914:	f104 0078 	add.w	r0, r4, #120	; 0x78
   11918:	f000 ff56 	bl	127c8 <Timeout::hasElapsed()>
   1191c:	b1e0      	cbz	r0, 11958 <Heater::manage_temperature()+0xe8>
					if(current_temperature < (startTemp + HEAT_PROGRESS_THRESHOLD )){
   1191e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   11920:	b292      	uxth	r2, r2
   11922:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   11924:	b29b      	uxth	r3, r3
   11926:	f103 030a 	add.w	r3, r3, #10
   1192a:	429a      	cmp	r2, r3
							fail();
							return;
						}
					}
					else
						progressChecked = true;
   1192c:	bfa4      	itt	ge
   1192e:	2301      	movge	r3, #1
   11930:	f884 3088 	strbge.w	r3, [r4, #136]	; 0x88
				}
			}
			// check that the heater is heating up after target is set
			if(!progressChecked){
				if(heatProgressTimer.hasElapsed()){ 
					if(current_temperature < (startTemp + HEAT_PROGRESS_THRESHOLD )){
   11934:	da10      	bge.n	11958 <Heater::manage_temperature()+0xe8>
						value_fail_count++;
   11936:	f894 3063 	ldrb.w	r3, [r4, #99]	; 0x63
   1193a:	f103 0301 	add.w	r3, r3, #1
   1193e:	b2db      	uxtb	r3, r3
   11940:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63

						if (value_fail_count > SENSOR_MAX_BAD_READINGS) {
   11944:	2b05      	cmp	r3, #5
   11946:	d907      	bls.n	11958 <Heater::manage_temperature()+0xe8>
							fail_mode = HEATER_FAIL_NOT_HEATING;
   11948:	f04f 0308 	mov.w	r3, #8
   1194c:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
							fail();
   11950:	4620      	mov	r0, r4
   11952:	f7ff ff79 	bl	11848 <Heater::fail()>
							return;
   11956:	bd38      	pop	{r3, r4, r5, pc}
					else
						progressChecked = true;
				}
			}
			// check that the heater temperature does not drop when still set to high temp
			if(heatingUpTimer.hasElapsed() && has_reached_target_temperature() && (current_temperature < (pid.getTarget() - HEAT_FAIL_THRESHOLD))){
   11958:	f104 0068 	add.w	r0, r4, #104	; 0x68
   1195c:	f000 ff34 	bl	127c8 <Timeout::hasElapsed()>
   11960:	b1d8      	cbz	r0, 1199a <Heater::manage_temperature()+0x12a>
   11962:	4620      	mov	r0, r4
   11964:	f7ff fed4 	bl	11710 <Heater::has_reached_target_temperature()>
   11968:	b1b8      	cbz	r0, 1199a <Heater::manage_temperature()+0x12a>
   1196a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   1196c:	b292      	uxth	r2, r2
   1196e:	6da3      	ldr	r3, [r4, #88]	; 0x58
   11970:	f1a3 031e 	sub.w	r3, r3, #30
   11974:	429a      	cmp	r2, r3
   11976:	da10      	bge.n	1199a <Heater::manage_temperature()+0x12a>
					value_fail_count++;
   11978:	f894 3063 	ldrb.w	r3, [r4, #99]	; 0x63
   1197c:	f103 0301 	add.w	r3, r3, #1
   11980:	b2db      	uxtb	r3, r3
   11982:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63

					if (value_fail_count > SENSOR_MAX_BAD_READINGS) {
   11986:	2b05      	cmp	r3, #5
   11988:	d907      	bls.n	1199a <Heater::manage_temperature()+0x12a>
						fail_mode = HEATER_FAIL_DROPPING_TEMP;
   1198a:	f04f 0310 	mov.w	r3, #16
   1198e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
						fail();
   11992:	4620      	mov	r0, r4
   11994:	f7ff ff58 	bl	11848 <Heater::fail()>
						return;
   11998:	bd38      	pop	{r3, r4, r5, pc}
					}
			}
			// if no bad heat reads have occured, clear the fail count
			// we don't want this to add up continually forever
			if(value_fail_count == old_value_count)
   1199a:	f894 3063 	ldrb.w	r3, [r4, #99]	; 0x63
   1199e:	42ab      	cmp	r3, r5
				value_fail_count = 0;
   119a0:	bf04      	itt	eq
   119a2:	2300      	moveq	r3, #0
   119a4:	f884 3063 	strbeq.w	r3, [r4, #99]	; 0x63
		}
	}
	if (fail_state) {
   119a8:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   119ac:	2b00      	cmp	r3, #0
   119ae:	d146      	bne.n	11a3e <Heater::manage_temperature()+0x1ce>
		return;
	}
	if (next_pid_timeout.hasElapsed() && !is_paused) {
   119b0:	f104 0508 	add.w	r5, r4, #8
   119b4:	4628      	mov	r0, r5
   119b6:	f000 ff07 	bl	127c8 <Timeout::hasElapsed()>
   119ba:	2800      	cmp	r0, #0
   119bc:	d03f      	beq.n	11a3e <Heater::manage_temperature()+0x1ce>
   119be:	f894 308a 	ldrb.w	r3, [r4, #138]	; 0x8a
   119c2:	2b00      	cmp	r3, #0
   119c4:	d13b      	bne.n	11a3e <Heater::manage_temperature()+0x1ce>
		
		next_pid_timeout.start(UPDATE_INTERVAL_MICROS);
   119c6:	4628      	mov	r0, r5
   119c8:	f24a 1120 	movw	r1, #41248	; 0xa120
   119cc:	f2c0 0107 	movt	r1, #7
   119d0:	f000 fee6 	bl	127a0 <Timeout::start(unsigned long)>

		int delta = pid.getTarget() - current_temperature;
   119d4:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   119d6:	b292      	uxth	r2, r2
   119d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
   119da:	1a9a      	subs	r2, r3, r2

		if( bypassing_PID && (delta < PID_BYPASS_DELTA) ) {
   119dc:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   119e0:	b15b      	cbz	r3, 119fa <Heater::manage_temperature()+0x18a>
   119e2:	2a0e      	cmp	r2, #14
   119e4:	dc08      	bgt.n	119f8 <Heater::manage_temperature()+0x188>
			bypassing_PID = false;
   119e6:	f04f 0300 	mov.w	r3, #0
   119ea:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

			pid.reset_state();
   119ee:	f104 0034 	add.w	r0, r4, #52	; 0x34
   119f2:	f000 fa99 	bl	11f28 <PID::reset_state()>
   119f6:	e006      	b.n	11a06 <Heater::manage_temperature()+0x196>
		}
		else if ( !bypassing_PID && (delta > PID_BYPASS_DELTA + 10) ) {
   119f8:	b943      	cbnz	r3, 11a0c <Heater::manage_temperature()+0x19c>
   119fa:	2a19      	cmp	r2, #25
			bypassing_PID = true;
   119fc:	bfc4      	itt	gt
   119fe:	2301      	movgt	r3, #1
   11a00:	f884 3060 	strbgt.w	r3, [r4, #96]	; 0x60
		if( bypassing_PID && (delta < PID_BYPASS_DELTA) ) {
			bypassing_PID = false;

			pid.reset_state();
		}
		else if ( !bypassing_PID && (delta > PID_BYPASS_DELTA + 10) ) {
   11a04:	dc02      	bgt.n	11a0c <Heater::manage_temperature()+0x19c>
			bypassing_PID = true;
		}

		if( bypassing_PID ) {
   11a06:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   11a0a:	b12b      	cbz	r3, 11a18 <Heater::manage_temperature()+0x1a8>
			set_output(255);
   11a0c:	4620      	mov	r0, r4
   11a0e:	f04f 01ff 	mov.w	r1, #255	; 0xff
   11a12:	f7ff fedd 	bl	117d0 <Heater::set_output(unsigned char)>
   11a16:	bd38      	pop	{r3, r4, r5, pc}
		}
		else {
			int mv = pid.calculate(current_temperature);
   11a18:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
   11a1a:	f104 0034 	add.w	r0, r4, #52	; 0x34
   11a1e:	b289      	uxth	r1, r1
   11a20:	f000 faa2 	bl	11f68 <PID::calculate(int)>
			// but this works pretty well.
			mv += HEATER_OFFSET_ADJUSTMENT;
			// clamp value
			if (mv < 0) { mv = 0; }
			if (mv >255) { mv = 255; }
			if (pid.getTarget() == 0) { mv = 0; }
   11a24:	6da3      	ldr	r3, [r4, #88]	; 0x58
   11a26:	f04f 0100 	mov.w	r1, #0
   11a2a:	b123      	cbz	r3, 11a36 <Heater::manage_temperature()+0x1c6>
   11a2c:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
   11a30:	29ff      	cmp	r1, #255	; 0xff
   11a32:	bfa8      	it	ge
   11a34:	21ff      	movge	r1, #255	; 0xff
			set_output(mv);
   11a36:	4620      	mov	r0, r4
   11a38:	b2c9      	uxtb	r1, r1
   11a3a:	f7ff fec9 	bl	117d0 <Heater::set_output(unsigned char)>
   11a3e:	bd38      	pop	{r3, r4, r5, pc}

00011a40 <Heater::has_failed()>:
}

bool Heater::has_failed()
{
	return fail_state;
}
   11a40:	f890 0061 	ldrb.w	r0, [r0, #97]	; 0x61
   11a44:	4770      	bx	lr
   11a46:	bf00      	nop

00011a48 <Heater::GetFailMode()>:

uint8_t Heater::GetFailMode(){
	
	return fail_mode;
}
   11a48:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
   11a4c:	4770      	bx	lr
   11a4e:	bf00      	nop

00011a50 <_GLOBAL__sub_I__ZN6HeaterC2ER17TemperatureSensorR14HeatingElementmtb>:
   11a50:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
   11a52:	f641 00e8 	movw	r0, #6376	; 0x18e8
   11a56:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11a5a:	f04f 0100 	mov.w	r1, #0
   11a5e:	f000 f8ed 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
   11a62:	f641 00ec 	movw	r0, #6380	; 0x18ec
   11a66:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11a6a:	f04f 0101 	mov.w	r1, #1
   11a6e:	f000 f8e5 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
   11a72:	f641 00f0 	movw	r0, #6384	; 0x18f0
   11a76:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11a7a:	f04f 0102 	mov.w	r1, #2
   11a7e:	f000 f8dd 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
   11a82:	f641 00f4 	movw	r0, #6388	; 0x18f4
   11a86:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11a8a:	f04f 0103 	mov.w	r1, #3
   11a8e:	f000 f8d5 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
   11a92:	f641 00f8 	movw	r0, #6392	; 0x18f8
   11a96:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11a9a:	f04f 0104 	mov.w	r1, #4
   11a9e:	f000 f8cd 	bl	11c3c <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
   11aa2:	f641 04fc 	movw	r4, #6396	; 0x18fc
   11aa6:	f2c1 0400 	movt	r4, #4096	; 0x1000
   11aaa:	4620      	mov	r0, r4
   11aac:	f04f 01ff 	mov.w	r1, #255	; 0xff
   11ab0:	f000 f8c4 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
   11ab4:	f641 1000 	movw	r0, #6400	; 0x1900
   11ab8:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11abc:	4621      	mov	r1, r4
   11abe:	f04f 0200 	mov.w	r2, #0
   11ac2:	f000 facd 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
   11ac6:	bd10      	pop	{r4, pc}

00011ac8 <_GLOBAL__sub_I__ZN9interface11isConnectedEv>:
void setLEDs(bool on){
	board->setLED(0,on);
	board->setLED(1,on);
}

}
   11ac8:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
   11aca:	f641 1008 	movw	r0, #6408	; 0x1908
   11ace:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11ad2:	f04f 0100 	mov.w	r1, #0
   11ad6:	f000 f8b1 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
   11ada:	f641 100c 	movw	r0, #6412	; 0x190c
   11ade:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11ae2:	f04f 0101 	mov.w	r1, #1
   11ae6:	f000 f8a9 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
   11aea:	f641 1010 	movw	r0, #6416	; 0x1910
   11aee:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11af2:	f04f 0102 	mov.w	r1, #2
   11af6:	f000 f8a1 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
   11afa:	f641 1018 	movw	r0, #6424	; 0x1918
   11afe:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11b02:	f04f 0103 	mov.w	r1, #3
   11b06:	f000 f899 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
   11b0a:	f641 1014 	movw	r0, #6420	; 0x1914
   11b0e:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11b12:	f04f 0104 	mov.w	r1, #4
   11b16:	f000 f891 	bl	11c3c <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
   11b1a:	f641 141c 	movw	r4, #6428	; 0x191c
   11b1e:	f2c1 0400 	movt	r4, #4096	; 0x1000
   11b22:	4620      	mov	r0, r4
   11b24:	f04f 01ff 	mov.w	r1, #255	; 0xff
   11b28:	f000 f888 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
   11b2c:	f641 1020 	movw	r0, #6432	; 0x1920
   11b30:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11b34:	4621      	mov	r1, r4
   11b36:	f04f 0200 	mov.w	r2, #0
   11b3a:	f000 fa91 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
   11b3e:	bd10      	pop	{r4, pc}

00011b40 <_GLOBAL__sub_I_button_timeout>:

/// Check if the expected button push has been made. If waitForButton was
/// never called, always return true.
bool InterfaceBoard::buttonPushed() {
  return waitingMask == 0;
}
   11b40:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
   11b42:	f641 1028 	movw	r0, #6440	; 0x1928
   11b46:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11b4a:	f04f 0100 	mov.w	r1, #0
   11b4e:	f000 f875 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
   11b52:	f641 102c 	movw	r0, #6444	; 0x192c
   11b56:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11b5a:	f04f 0101 	mov.w	r1, #1
   11b5e:	f000 f86d 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
   11b62:	f641 1030 	movw	r0, #6448	; 0x1930
   11b66:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11b6a:	f04f 0102 	mov.w	r1, #2
   11b6e:	f000 f865 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
   11b72:	f641 1034 	movw	r0, #6452	; 0x1934
   11b76:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11b7a:	f04f 0103 	mov.w	r1, #3
   11b7e:	f000 f85d 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
   11b82:	f641 1038 	movw	r0, #6456	; 0x1938
   11b86:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11b8a:	f04f 0104 	mov.w	r1, #4
   11b8e:	f000 f855 	bl	11c3c <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
   11b92:	f641 144c 	movw	r4, #6476	; 0x194c
   11b96:	f2c1 0400 	movt	r4, #4096	; 0x1000
   11b9a:	4620      	mov	r0, r4
   11b9c:	f04f 01ff 	mov.w	r1, #255	; 0xff
   11ba0:	f000 f84c 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
   11ba4:	f641 1050 	movw	r0, #6480	; 0x1950
   11ba8:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11bac:	4621      	mov	r1, r4
   11bae:	f04f 0200 	mov.w	r2, #0
   11bb2:	f000 fa55 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
//#include "Command.hh"
#include "Motherboard.hh"

#if defined HAS_INTERFACE_BOARD

Timeout button_timeout;
   11bb6:	f641 103c 	movw	r0, #6460	; 0x193c
   11bba:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11bbe:	f000 fde9 	bl	12794 <Timeout::Timeout()>

/// Check if the expected button push has been made. If waitForButton was
/// never called, always return true.
bool InterfaceBoard::buttonPushed() {
  return waitingMask == 0;
}
   11bc2:	bd10      	pop	{r4, pc}

00011bc4 <_GLOBAL__sub_I__ZN19LiquidCrystalSerialC2E3PinS0_S0_>:
  
    _strobe_pin.setValue(true);
    _delay_us(1);
    _strobe_pin.setValue(false);
     
}
   11bc4:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
   11bc6:	f641 1058 	movw	r0, #6488	; 0x1958
   11bca:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11bce:	f04f 0100 	mov.w	r1, #0
   11bd2:	f000 f833 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
   11bd6:	f641 105c 	movw	r0, #6492	; 0x195c
   11bda:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11bde:	f04f 0101 	mov.w	r1, #1
   11be2:	f000 f82b 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
   11be6:	f641 1060 	movw	r0, #6496	; 0x1960
   11bea:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11bee:	f04f 0102 	mov.w	r1, #2
   11bf2:	f000 f823 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
   11bf6:	f641 1064 	movw	r0, #6500	; 0x1964
   11bfa:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11bfe:	f04f 0103 	mov.w	r1, #3
   11c02:	f000 f81b 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
   11c06:	f641 1068 	movw	r0, #6504	; 0x1968
   11c0a:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11c0e:	f04f 0104 	mov.w	r1, #4
   11c12:	f000 f813 	bl	11c3c <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
   11c16:	f641 146c 	movw	r4, #6508	; 0x196c
   11c1a:	f2c1 0400 	movt	r4, #4096	; 0x1000
   11c1e:	4620      	mov	r0, r4
   11c20:	f04f 01ff 	mov.w	r1, #255	; 0xff
   11c24:	f000 f80a 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
   11c28:	f641 1070 	movw	r0, #6512	; 0x1970
   11c2c:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11c30:	4621      	mov	r1, r4
   11c32:	f04f 0200 	mov.w	r2, #0
   11c36:	f000 fa13 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
   11c3a:	bd10      	pop	{r4, pc}

00011c3c <LPCPort::LPCPort(unsigned char)>:

extern const LPCPort NullPort(NULL_PORT);
*/
LPCPort::LPCPort() : port_base(NULL_PORT) {};

LPCPort::LPCPort(uint8_t port_base_in) : port_base(port_base_in) {
   11c3c:	7001      	strb	r1, [r0, #0]
};
   11c3e:	4770      	bx	lr

00011c40 <_GLOBAL__sub_I__ZN7LPCPortC2Ev>:
void LPCPort::setPinOff(uint8_t pin_index) const {
//	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
//		PORTx &= (uint8_t)pin_mask_inverted;
//	}
	GPIO_ClearValue(port_base, _BV(pin_index));
};
   11c40:	b508      	push	{r3, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
   11c42:	f641 1078 	movw	r0, #6520	; 0x1978
   11c46:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11c4a:	f04f 0100 	mov.w	r1, #0
   11c4e:	f7ff fff5 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
   11c52:	f641 107c 	movw	r0, #6524	; 0x197c
   11c56:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11c5a:	f04f 0101 	mov.w	r1, #1
   11c5e:	f7ff ffed 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
   11c62:	f641 1080 	movw	r0, #6528	; 0x1980
   11c66:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11c6a:	f04f 0102 	mov.w	r1, #2
   11c6e:	f7ff ffe5 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
   11c72:	f641 1084 	movw	r0, #6532	; 0x1984
   11c76:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11c7a:	f04f 0103 	mov.w	r1, #3
   11c7e:	f7ff ffdd 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
   11c82:	f641 1088 	movw	r0, #6536	; 0x1988
   11c86:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11c8a:	f04f 0104 	mov.w	r1, #4
   11c8e:	f7ff ffd5 	bl	11c3c <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
   11c92:	f641 108c 	movw	r0, #6540	; 0x198c
   11c96:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11c9a:	f04f 01ff 	mov.w	r1, #255	; 0xff
   11c9e:	f7ff ffcd 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
   11ca2:	bd08      	pop	{r3, pc}

00011ca4 <_GLOBAL__sub_I_ready_fail>:
	if (e != sdcard::SD_SUCCESS) {
        interface::popScreen();
		Motherboard::getBoard().errorResponse(" SD card read error");
		return;
	}
}
   11ca4:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
   11ca6:	f641 1098 	movw	r0, #6552	; 0x1998
   11caa:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11cae:	f04f 0100 	mov.w	r1, #0
   11cb2:	f7ff ffc3 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
   11cb6:	f641 10a8 	movw	r0, #6568	; 0x19a8
   11cba:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11cbe:	f04f 0101 	mov.w	r1, #1
   11cc2:	f7ff ffbb 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
   11cc6:	f641 109c 	movw	r0, #6556	; 0x199c
   11cca:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11cce:	f04f 0102 	mov.w	r1, #2
   11cd2:	f7ff ffb3 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
   11cd6:	f641 10ac 	movw	r0, #6572	; 0x19ac
   11cda:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11cde:	f04f 0103 	mov.w	r1, #3
   11ce2:	f7ff ffab 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
   11ce6:	f641 10a0 	movw	r0, #6560	; 0x19a0
   11cea:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11cee:	f04f 0104 	mov.w	r1, #4
   11cf2:	f7ff ffa3 	bl	11c3c <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
   11cf6:	f641 14a4 	movw	r4, #6564	; 0x19a4
   11cfa:	f2c1 0400 	movt	r4, #4096	; 0x1000
   11cfe:	4620      	mov	r0, r4
   11d00:	f04f 01ff 	mov.w	r1, #255	; 0xff
   11d04:	f7ff ff9a 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
   11d08:	f641 1090 	movw	r0, #6544	; 0x1990
   11d0c:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11d10:	4621      	mov	r1, r4
   11d12:	f04f 0200 	mov.w	r2, #0
   11d16:	f000 f9a3 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
   11d1a:	bd10      	pop	{r4, pc}

00011d1c <_crc_ibutton_update>:
    uint8_t
    _crc_ibutton_update(uint8_t crc, uint8_t data)
    {
	uint8_t i;

	crc = crc ^ data;
   11d1c:	4048      	eors	r0, r1
   11d1e:	f04f 0308 	mov.w	r3, #8
	for (i = 0; i < 8; i++)
	{
	    if (crc & 0x01)
	        crc = (crc >> 1) ^ 0x8C;
   11d22:	f06f 0273 	mvn.w	r2, #115	; 0x73
	uint8_t i;

	crc = crc ^ data;
	for (i = 0; i < 8; i++)
	{
	    if (crc & 0x01)
   11d26:	f010 0f01 	tst.w	r0, #1
	        crc = (crc >> 1) ^ 0x8C;
   11d2a:	bf1a      	itte	ne
   11d2c:	ea82 0060 	eorne.w	r0, r2, r0, asr #1
   11d30:	b2c0      	uxtbne	r0, r0
	    else
	        crc >>= 1;
   11d32:	0840      	lsreq	r0, r0, #1
   11d34:	f103 33ff 	add.w	r3, r3, #4294967295
   11d38:	b2db      	uxtb	r3, r3
    _crc_ibutton_update(uint8_t crc, uint8_t data)
    {
	uint8_t i;

	crc = crc ^ data;
	for (i = 0; i < 8; i++)
   11d3a:	2b00      	cmp	r3, #0
   11d3c:	d1f3      	bne.n	11d26 <_crc_ibutton_update+0xa>
	    else
	        crc >>= 1;
	}

	return crc;
    }
   11d3e:	4770      	bx	lr

00011d40 <Packet::appendByte(unsigned char)>:
	#include "crc16.h"
#include "comm.h"
}

/// Append a byte and update the CRC
void Packet::appendByte(uint8_t data) {
   11d40:	b538      	push	{r3, r4, r5, lr}
   11d42:	4604      	mov	r4, r0
   11d44:	460d      	mov	r5, r1
	if (length < MAX_PACKET_PAYLOAD) {
   11d46:	7803      	ldrb	r3, [r0, #0]
   11d48:	2b1f      	cmp	r3, #31
   11d4a:	d80b      	bhi.n	11d64 <Packet::appendByte(unsigned char)+0x24>
		crc = _crc_ibutton_update(crc, data);
   11d4c:	7840      	ldrb	r0, [r0, #1]
   11d4e:	f7ff ffe5 	bl	11d1c <_crc_ibutton_update>
   11d52:	7060      	strb	r0, [r4, #1]
		payload[length] = data;
   11d54:	7823      	ldrb	r3, [r4, #0]
   11d56:	18e3      	adds	r3, r4, r3
   11d58:	709d      	strb	r5, [r3, #2]
		length++;
   11d5a:	7823      	ldrb	r3, [r4, #0]
   11d5c:	f103 0301 	add.w	r3, r3, #1
   11d60:	b2db      	uxtb	r3, r3
   11d62:	7023      	strb	r3, [r4, #0]
   11d64:	bd38      	pop	{r3, r4, r5, pc}
   11d66:	bf00      	nop

00011d68 <Packet::reset()>:
	}
}
/// Reset this packet to an empty state
void Packet::reset() {
	crc = 0;
   11d68:	f04f 0300 	mov.w	r3, #0
   11d6c:	7043      	strb	r3, [r0, #1]
	length = 0;
   11d6e:	7003      	strb	r3, [r0, #0]
#ifdef PARANOID
	for (uint8_t i = 0; i < MAX_PACKET_PAYLOAD; i++) {
		payload[i] = 0;
	}
#endif // PARANOID
	error_code = PacketError::NO_ERROR;
   11d70:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	state = PS_START;
   11d74:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
}
   11d78:	4770      	bx	lr
   11d7a:	bf00      	nop

00011d7c <InPacket::reset()>:
InPacket::InPacket() {
	reset();
}

/// Reset the entire packet reception.
void InPacket::reset() {
   11d7c:	b508      	push	{r3, lr}
	Packet::reset();
   11d7e:	f7ff fff3 	bl	11d68 <Packet::reset()>
}
   11d82:	bd08      	pop	{r3, pc}

00011d84 <InPacket::InPacket()>:
#endif // PARANOID
	error_code = PacketError::NO_ERROR;
	state = PS_START;
}

InPacket::InPacket() {
   11d84:	b510      	push	{r4, lr}
   11d86:	4604      	mov	r4, r0
	reset();
   11d88:	f7ff fff8 	bl	11d7c <InPacket::reset()>
}
   11d8c:	4620      	mov	r0, r4
   11d8e:	bd10      	pop	{r4, pc}

00011d90 <InPacket::processByte(unsigned char)>:
void InPacket::reset() {
	Packet::reset();
}

//process a byte for our packet.
void InPacket::processByte(uint8_t b) {
   11d90:	b510      	push	{r4, lr}
   11d92:	4604      	mov	r4, r0
	if (state == PS_START) {
   11d94:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
   11d98:	b96b      	cbnz	r3, 11db6 <InPacket::processByte(unsigned char)+0x26>
		if (b == START_BYTE) {
   11d9a:	29d5      	cmp	r1, #213	; 0xd5
   11d9c:	d104      	bne.n	11da8 <InPacket::processByte(unsigned char)+0x18>
			state = PS_LEN;
   11d9e:	f04f 0301 	mov.w	r3, #1
   11da2:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
   11da6:	bd10      	pop	{r4, pc}
	void appendByte(uint8_t data);
	/// Reset this packet to an empty state
	void reset();

	void error(uint8_t error_code_in) {
		reset();
   11da8:	f7ff ffde 	bl	11d68 <Packet::reset()>
		error_code = error_code_in;
   11dac:	f04f 0301 	mov.w	r3, #1
   11db0:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   11db4:	bd10      	pop	{r4, pc}
		} else {
			error(PacketError::NOISE_BYTE);
		}
	} else if (state == PS_LEN) {
   11db6:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
   11dba:	2b01      	cmp	r3, #1
   11dbc:	d113      	bne.n	11de6 <InPacket::processByte(unsigned char)+0x56>
		if (b <= MAX_PACKET_PAYLOAD) {
   11dbe:	2920      	cmp	r1, #32
   11dc0:	d80a      	bhi.n	11dd8 <InPacket::processByte(unsigned char)+0x48>
			expected_length = b;
   11dc2:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
			state = (expected_length == 0) ? PS_CRC : PS_PAYLOAD;
   11dc6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   11dca:	2b00      	cmp	r3, #0
   11dcc:	bf14      	ite	ne
   11dce:	2302      	movne	r3, #2
   11dd0:	2303      	moveq	r3, #3
   11dd2:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
   11dd6:	bd10      	pop	{r4, pc}
	void appendByte(uint8_t data);
	/// Reset this packet to an empty state
	void reset();

	void error(uint8_t error_code_in) {
		reset();
   11dd8:	f7ff ffc6 	bl	11d68 <Packet::reset()>
		error_code = error_code_in;
   11ddc:	f04f 0302 	mov.w	r3, #2
   11de0:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   11de4:	bd10      	pop	{r4, pc}
		} else {
			error(PacketError::EXCEEDED_MAX_LENGTH);
		}
	} else if (state == PS_PAYLOAD) {
   11de6:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
   11dea:	2b02      	cmp	r3, #2
   11dec:	d10b      	bne.n	11e06 <InPacket::processByte(unsigned char)+0x76>
		appendByte(b);
   11dee:	f7ff ffa7 	bl	11d40 <Packet::appendByte(unsigned char)>
		if (length >= expected_length) {
   11df2:	7822      	ldrb	r2, [r4, #0]
   11df4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   11df8:	429a      	cmp	r2, r3
   11dfa:	d316      	bcc.n	11e2a <InPacket::processByte(unsigned char)+0x9a>
			state = PS_CRC;
   11dfc:	f04f 0303 	mov.w	r3, #3
   11e00:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
   11e04:	bd10      	pop	{r4, pc}
		}
	} else if (state == PS_CRC) {
   11e06:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
   11e0a:	2b03      	cmp	r3, #3
   11e0c:	d10d      	bne.n	11e2a <InPacket::processByte(unsigned char)+0x9a>
		if (crc == b) {
   11e0e:	7843      	ldrb	r3, [r0, #1]
   11e10:	4299      	cmp	r1, r3
   11e12:	d104      	bne.n	11e1e <InPacket::processByte(unsigned char)+0x8e>
			state = PS_LAST;
   11e14:	f04f 0304 	mov.w	r3, #4
   11e18:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
   11e1c:	bd10      	pop	{r4, pc}
	void appendByte(uint8_t data);
	/// Reset this packet to an empty state
	void reset();

	void error(uint8_t error_code_in) {
		reset();
   11e1e:	f7ff ffa3 	bl	11d68 <Packet::reset()>
		error_code = error_code_in;
   11e22:	f04f 0303 	mov.w	r3, #3
   11e26:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   11e2a:	bd10      	pop	{r4, pc}

00011e2c <Packet::read8(unsigned char) const>:

}

// Reads an 8-bit byte from the specified index of the payload
uint8_t Packet::read8(uint8_t index) const {
	return payload[index];
   11e2c:	1841      	adds	r1, r0, r1
   11e2e:	7888      	ldrb	r0, [r1, #2]
}
   11e30:	4770      	bx	lr
   11e32:	bf00      	nop

00011e34 <Packet::read16(unsigned char) const>:
uint16_t Packet::read16(uint8_t index) const {
	return payload[index] | (payload[index + 1] << 8);
   11e34:	1843      	adds	r3, r0, r1
   11e36:	789b      	ldrb	r3, [r3, #2]
   11e38:	f101 0101 	add.w	r1, r1, #1
   11e3c:	1840      	adds	r0, r0, r1
   11e3e:	7880      	ldrb	r0, [r0, #2]
}
   11e40:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   11e44:	4770      	bx	lr
   11e46:	bf00      	nop

00011e48 <OutPacket::reset()>:
OutPacket::OutPacket() {
	reset();
}

/// Reset the entire packet transmission.
void OutPacket::reset() {
   11e48:	b510      	push	{r4, lr}
   11e4a:	4604      	mov	r4, r0
	Packet::reset();
   11e4c:	f7ff ff8c 	bl	11d68 <Packet::reset()>
	send_payload_index = 0;
   11e50:	f04f 0300 	mov.w	r3, #0
   11e54:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
   11e58:	bd10      	pop	{r4, pc}
   11e5a:	bf00      	nop

00011e5c <OutPacket::OutPacket()>:
	shared.b.data[3] = payload[index+3];

	return shared.a;
}

OutPacket::OutPacket() {
   11e5c:	b510      	push	{r4, lr}
   11e5e:	4604      	mov	r4, r0
	reset();
   11e60:	f7ff fff2 	bl	11e48 <OutPacket::reset()>
}
   11e64:	4620      	mov	r0, r4
   11e66:	bd10      	pop	{r4, pc}

00011e68 <OutPacket::getNextByteToSend()>:
void OutPacket::prepareForResend() {
	error_code = PacketError::NO_ERROR;
	state = PS_START;
	send_payload_index = 0;
}
uint8_t OutPacket::getNextByteToSend() {
   11e68:	4603      	mov	r3, r0
	uint8_t next_byte = 0;
	if (state == PS_START) {
   11e6a:	f890 2023 	ldrb.w	r2, [r0, #35]	; 0x23
   11e6e:	b932      	cbnz	r2, 11e7e <OutPacket::getNextByteToSend()+0x16>
		next_byte = START_BYTE;
		state = PS_LEN;
   11e70:	f04f 0201 	mov.w	r2, #1
   11e74:	f880 2023 	strb.w	r2, [r0, #35]	; 0x23
	send_payload_index = 0;
}
uint8_t OutPacket::getNextByteToSend() {
	uint8_t next_byte = 0;
	if (state == PS_START) {
		next_byte = START_BYTE;
   11e78:	f04f 00d5 	mov.w	r0, #213	; 0xd5
   11e7c:	4770      	bx	lr
		state = PS_LEN;
	} else if (state == PS_LEN) {
   11e7e:	f890 2023 	ldrb.w	r2, [r0, #35]	; 0x23
   11e82:	2a01      	cmp	r2, #1
   11e84:	d108      	bne.n	11e98 <OutPacket::getNextByteToSend()+0x30>
		next_byte = length;
   11e86:	7800      	ldrb	r0, [r0, #0]
		state = (length==0)?PS_CRC:PS_PAYLOAD;
   11e88:	781a      	ldrb	r2, [r3, #0]
   11e8a:	2a00      	cmp	r2, #0
   11e8c:	bf14      	ite	ne
   11e8e:	2202      	movne	r2, #2
   11e90:	2203      	moveq	r2, #3
   11e92:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
   11e96:	4770      	bx	lr
	} else if (state == PS_PAYLOAD) {
   11e98:	f890 2023 	ldrb.w	r2, [r0, #35]	; 0x23
   11e9c:	2a02      	cmp	r2, #2
   11e9e:	d110      	bne.n	11ec2 <OutPacket::getNextByteToSend()+0x5a>
		next_byte= payload[send_payload_index++];
   11ea0:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   11ea4:	1881      	adds	r1, r0, r2
   11ea6:	7888      	ldrb	r0, [r1, #2]
   11ea8:	f102 0201 	add.w	r2, r2, #1
   11eac:	b2d2      	uxtb	r2, r2
   11eae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		if (send_payload_index >= length) {
   11eb2:	7819      	ldrb	r1, [r3, #0]
   11eb4:	428a      	cmp	r2, r1
   11eb6:	d310      	bcc.n	11eda <OutPacket::getNextByteToSend()+0x72>
			state = PS_CRC;
   11eb8:	f04f 0203 	mov.w	r2, #3
   11ebc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
   11ec0:	4770      	bx	lr
		}
	} else if (state == PS_CRC) {
   11ec2:	f890 2023 	ldrb.w	r2, [r0, #35]	; 0x23
   11ec6:	2a03      	cmp	r2, #3
	error_code = PacketError::NO_ERROR;
	state = PS_START;
	send_payload_index = 0;
}
uint8_t OutPacket::getNextByteToSend() {
	uint8_t next_byte = 0;
   11ec8:	bf18      	it	ne
   11eca:	2000      	movne	r0, #0
	} else if (state == PS_PAYLOAD) {
		next_byte= payload[send_payload_index++];
		if (send_payload_index >= length) {
			state = PS_CRC;
		}
	} else if (state == PS_CRC) {
   11ecc:	d105      	bne.n	11eda <OutPacket::getNextByteToSend()+0x72>
		next_byte = crc;
   11ece:	7858      	ldrb	r0, [r3, #1]
		state = PS_LAST;
   11ed0:	f04f 0204 	mov.w	r2, #4
   11ed4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
   11ed8:	4770      	bx	lr
	}
	return next_byte;
}
   11eda:	4770      	bx	lr

00011edc <OutPacket::append8(unsigned char)>:

// Add an 8-bit byte to the end of the payload
void OutPacket::append8(uint8_t value) {
   11edc:	b508      	push	{r3, lr}
	appendByte(value);
   11ede:	f7ff ff2f 	bl	11d40 <Packet::appendByte(unsigned char)>
}
   11ee2:	bd08      	pop	{r3, pc}

00011ee4 <OutPacket::append16(unsigned short)>:
void OutPacket::append16(uint16_t value) {
   11ee4:	b538      	push	{r3, r4, r5, lr}
   11ee6:	4605      	mov	r5, r0
   11ee8:	460c      	mov	r4, r1
	appendByte(value&0xff);
   11eea:	b2c9      	uxtb	r1, r1
   11eec:	f7ff ff28 	bl	11d40 <Packet::appendByte(unsigned char)>
	appendByte((value>>8)&0xff);
   11ef0:	4628      	mov	r0, r5
   11ef2:	ea4f 2114 	mov.w	r1, r4, lsr #8
   11ef6:	f7ff ff23 	bl	11d40 <Packet::appendByte(unsigned char)>
}
   11efa:	bd38      	pop	{r3, r4, r5, pc}

00011efc <OutPacket::append32(unsigned long)>:
void OutPacket::append32(uint32_t value) {
   11efc:	b538      	push	{r3, r4, r5, lr}
   11efe:	4605      	mov	r5, r0
   11f00:	460c      	mov	r4, r1
	appendByte(value&0xff);
   11f02:	b2c9      	uxtb	r1, r1
   11f04:	f7ff ff1c 	bl	11d40 <Packet::appendByte(unsigned char)>
	appendByte((value>>8)&0xff);
   11f08:	4628      	mov	r0, r5
   11f0a:	f3c4 2107 	ubfx	r1, r4, #8, #8
   11f0e:	f7ff ff17 	bl	11d40 <Packet::appendByte(unsigned char)>
	appendByte((value>>16)&0xff);
   11f12:	4628      	mov	r0, r5
   11f14:	f3c4 4107 	ubfx	r1, r4, #16, #8
   11f18:	f7ff ff12 	bl	11d40 <Packet::appendByte(unsigned char)>
	appendByte((value>>24)&0xff);
   11f1c:	4628      	mov	r0, r5
   11f1e:	ea4f 6114 	mov.w	r1, r4, lsr #24
   11f22:	f7ff ff0d 	bl	11d40 <Packet::appendByte(unsigned char)>
}
   11f26:	bd38      	pop	{r3, r4, r5, pc}

00011f28 <PID::reset_state()>:

	reset_state();
}

void PID::reset_state() {
	error_acc = 0;
   11f28:	f04f 0300 	mov.w	r3, #0
   11f2c:	6203      	str	r3, [r0, #32]
	prev_error = 0;
   11f2e:	61c3      	str	r3, [r0, #28]
	delta_idx = 0;

	for (delta_idx = 0; delta_idx < DELTA_SAMPLES; delta_idx++) {
		delta_history[delta_idx] = 0;
   11f30:	8183      	strh	r3, [r0, #12]
   11f32:	81c3      	strh	r3, [r0, #14]
   11f34:	8203      	strh	r3, [r0, #16]
   11f36:	8243      	strh	r3, [r0, #18]
	}
	delta_idx = 0;
   11f38:	7603      	strb	r3, [r0, #24]
	delta_summation = 0;
   11f3a:	f04f 0200 	mov.w	r2, #0
   11f3e:	6142      	str	r2, [r0, #20]

	last_output = 0;
   11f40:	6283      	str	r3, [r0, #40]	; 0x28
}
   11f42:	4770      	bx	lr

00011f44 <PID::reset()>:

PID::PID() {
    reset();
}

void PID::reset() {
   11f44:	b508      	push	{r3, lr}
	sp = 0;
   11f46:	f04f 0200 	mov.w	r2, #0
   11f4a:	6242      	str	r2, [r0, #36]	; 0x24
	p_gain = i_gain = d_gain = 0;
   11f4c:	f04f 0200 	mov.w	r2, #0
   11f50:	6082      	str	r2, [r0, #8]
   11f52:	6042      	str	r2, [r0, #4]
   11f54:	6002      	str	r2, [r0, #0]

	reset_state();
   11f56:	f7ff ffe7 	bl	11f28 <PID::reset_state()>
}
   11f5a:	bd08      	pop	{r3, pc}

00011f5c <PID::PID()>:
#define ERR_ACC_MIN -ERR_ACC_MAX

// scale the output term to account for our fixed-point bounds
#define OUTPUT_SCALE 2

PID::PID() {
   11f5c:	b510      	push	{r4, lr}
   11f5e:	4604      	mov	r4, r0
    reset();
   11f60:	f7ff fff0 	bl	11f44 <PID::reset()>
}
   11f64:	4620      	mov	r0, r4
   11f66:	bd10      	pop	{r4, pc}

00011f68 <PID::calculate(int)>:
// series of samples.  This helps us get a reasonable delta despite the discrete
// nature of the samples; on average we will get a delta of maybe 1/deg/second,
// which will give us a delta impulse for that one calculation round and then
// the D term will immediately disappear.  By averaging the last N deltas, we
// allow changes to be registered rather than get subsumed in the sampling noise.
int PID::calculate(const int pv) {
   11f68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f6c:	4604      	mov	r4, r0
	int e = sp - pv;
   11f6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
   11f70:	1a6d      	subs	r5, r5, r1
	error_acc += e;
   11f72:	6a03      	ldr	r3, [r0, #32]
   11f74:	18eb      	adds	r3, r5, r3
   11f76:	6203      	str	r3, [r0, #32]
	// Clamp the error accumulator at accepted values.
	// This will help control overcorrection for accumulated error during the run-up
	// and allow the I term to be integrated away more quickly as we approach the
	// setpoint.
	if (error_acc > ERR_ACC_MAX) {
   11f78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
		error_acc = ERR_ACC_MAX;
   11f7c:	bfc4      	itt	gt
   11f7e:	f44f 7380 	movgt.w	r3, #256	; 0x100
   11f82:	6203      	strgt	r3, [r0, #32]
	error_acc += e;
	// Clamp the error accumulator at accepted values.
	// This will help control overcorrection for accumulated error during the run-up
	// and allow the I term to be integrated away more quickly as we approach the
	// setpoint.
	if (error_acc > ERR_ACC_MAX) {
   11f84:	dc05      	bgt.n	11f92 <PID::calculate(int)+0x2a>
		error_acc = ERR_ACC_MAX;
	}
	if (error_acc < ERR_ACC_MIN) {
   11f86:	f513 7f80 	cmn.w	r3, #256	; 0x100
		error_acc = ERR_ACC_MIN;
   11f8a:	bfbc      	itt	lt
   11f8c:	f06f 03ff 	mvnlt.w	r3, #255	; 0xff
   11f90:	6203      	strlt	r3, [r0, #32]
	}
	float p_term = (float)e * p_gain;
   11f92:	4628      	mov	r0, r5
   11f94:	f001 fd44 	bl	13a20 <__aeabi_i2f>
   11f98:	6821      	ldr	r1, [r4, #0]
   11f9a:	f001 fd95 	bl	13ac8 <__aeabi_fmul>
   11f9e:	4682      	mov	sl, r0
	float i_term = (float)error_acc * i_gain;
   11fa0:	6a20      	ldr	r0, [r4, #32]
   11fa2:	f001 fd3d 	bl	13a20 <__aeabi_i2f>
   11fa6:	6861      	ldr	r1, [r4, #4]
   11fa8:	f001 fd8e 	bl	13ac8 <__aeabi_fmul>
   11fac:	4683      	mov	fp, r0
	int delta = e - prev_error;
   11fae:	69e7      	ldr	r7, [r4, #28]
   11fb0:	1bef      	subs	r7, r5, r7
	// Add to delta history
	delta_summation -= delta_history[delta_idx];
   11fb2:	f894 8018 	ldrb.w	r8, [r4, #24]
   11fb6:	f108 0604 	add.w	r6, r8, #4
   11fba:	eb04 0646 	add.w	r6, r4, r6, lsl #1
   11fbe:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
   11fc2:	f001 fd2d 	bl	13a20 <__aeabi_i2f>
   11fc6:	4601      	mov	r1, r0
   11fc8:	6960      	ldr	r0, [r4, #20]
   11fca:	f001 fc73 	bl	138b4 <__aeabi_fsub>
   11fce:	4681      	mov	r9, r0
	delta_history[delta_idx] = delta;
   11fd0:	80b7      	strh	r7, [r6, #4]
	delta_summation += (float)delta;
   11fd2:	4638      	mov	r0, r7
   11fd4:	f001 fd24 	bl	13a20 <__aeabi_i2f>
   11fd8:	4601      	mov	r1, r0
   11fda:	4648      	mov	r0, r9
   11fdc:	f001 fc6c 	bl	138b8 <__addsf3>
   11fe0:	6160      	str	r0, [r4, #20]
	delta_idx = (delta_idx+1) % DELTA_SAMPLES;
   11fe2:	f108 0801 	add.w	r8, r8, #1
   11fe6:	f008 0803 	and.w	r8, r8, #3
   11fea:	f884 8018 	strb.w	r8, [r4, #24]
	// Use the delta over the whole window
	float d_term = delta_summation * d_gain;
   11fee:	68a1      	ldr	r1, [r4, #8]
   11ff0:	f001 fd6a 	bl	13ac8 <__aeabi_fmul>
   11ff4:	4606      	mov	r6, r0

	prev_error = e;
   11ff6:	61e5      	str	r5, [r4, #28]

	last_output = ((int)(p_term + i_term + d_term))*OUTPUT_SCALE;
   11ff8:	4650      	mov	r0, sl
   11ffa:	4659      	mov	r1, fp
   11ffc:	f001 fc5c 	bl	138b8 <__addsf3>
   12000:	4631      	mov	r1, r6
   12002:	f001 fc59 	bl	138b8 <__addsf3>
   12006:	f001 ff25 	bl	13e54 <__aeabi_f2iz>
   1200a:	ea4f 0040 	mov.w	r0, r0, lsl #1
   1200e:	62a0      	str	r0, [r4, #40]	; 0x28

	return last_output;
}
   12010:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012014 <PID::setTarget(int)>:

void PID::setTarget(const int target) {
   12014:	b538      	push	{r3, r4, r5, lr}
   12016:	4604      	mov	r4, r0
   12018:	460d      	mov	r5, r1
	if (sp != target) {
   1201a:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1201c:	428b      	cmp	r3, r1
   1201e:	d002      	beq.n	12026 <PID::setTarget(int)+0x12>
		reset_state();
   12020:	f7ff ff82 	bl	11f28 <PID::reset_state()>
		sp = target;
   12024:	6265      	str	r5, [r4, #36]	; 0x24
   12026:	bd38      	pop	{r3, r4, r5, pc}

00012028 <PID::getErrorTerm()>:
	}
}

int PID::getErrorTerm() {
	return error_acc;
}
   12028:	6a00      	ldr	r0, [r0, #32]
   1202a:	4770      	bx	lr

0001202c <PID::getDeltaTerm()>:

int PID::getDeltaTerm() {
   1202c:	b508      	push	{r3, lr}
	return (int)delta_summation;
   1202e:	6940      	ldr	r0, [r0, #20]
   12030:	f001 ff10 	bl	13e54 <__aeabi_f2iz>
}
   12034:	bd08      	pop	{r3, pc}
   12036:	bf00      	nop

00012038 <PID::getLastOutput()>:

int PID::getLastOutput() {
	return (int)last_output;
}
   12038:	6a80      	ldr	r0, [r0, #40]	; 0x28
   1203a:	4770      	bx	lr

0001203c <Pin::Pin()>:
#include "Pin.hh"

Pin::Pin() : port_base(NullPort.port_base), is_null(true), pin_index(0), pin_mask(0), pin_mask_inverted((uint8_t)~0) {}
   1203c:	f641 12c4 	movw	r2, #6596	; 0x19c4
   12040:	f2c1 0200 	movt	r2, #4096	; 0x1000
   12044:	7812      	ldrb	r2, [r2, #0]
   12046:	7002      	strb	r2, [r0, #0]
   12048:	f04f 0201 	mov.w	r2, #1
   1204c:	7042      	strb	r2, [r0, #1]
   1204e:	f04f 0200 	mov.w	r2, #0
   12052:	7082      	strb	r2, [r0, #2]
   12054:	70c2      	strb	r2, [r0, #3]
   12056:	f04f 02ff 	mov.w	r2, #255	; 0xff
   1205a:	7102      	strb	r2, [r0, #4]
   1205c:	4770      	bx	lr
   1205e:	bf00      	nop

00012060 <Pin::Pin(LPCPort const&, unsigned char)>:

Pin::Pin(const LPCPort& port_in, uint8_t pin_index_in) : port_base(port_in.port_base), is_null(port_base == NULL_PORT), pin_index(pin_index_in), pin_mask((uint8_t)_BV(pin_index_in)), pin_mask_inverted((uint8_t)~_BV(pin_index_in)) {}
   12060:	7809      	ldrb	r1, [r1, #0]
   12062:	7001      	strb	r1, [r0, #0]
   12064:	29ff      	cmp	r1, #255	; 0xff
   12066:	bf14      	ite	ne
   12068:	2100      	movne	r1, #0
   1206a:	2101      	moveq	r1, #1
   1206c:	7041      	strb	r1, [r0, #1]
   1206e:	7082      	strb	r2, [r0, #2]
   12070:	f04f 0101 	mov.w	r1, #1
   12074:	fa01 f202 	lsl.w	r2, r1, r2
   12078:	b2d2      	uxtb	r2, r2
   1207a:	70c2      	strb	r2, [r0, #3]
   1207c:	ea6f 0202 	mvn.w	r2, r2
   12080:	7102      	strb	r2, [r0, #4]
   12082:	4770      	bx	lr

00012084 <Pin::Pin(Pin const&)>:

Pin::Pin(const Pin& other_pin) : port_base(other_pin.port_base), is_null(port_base == NULL_PORT), pin_index(other_pin.pin_index), pin_mask(other_pin.pin_mask), pin_mask_inverted(other_pin.pin_mask_inverted) {}
   12084:	780a      	ldrb	r2, [r1, #0]
   12086:	7002      	strb	r2, [r0, #0]
   12088:	2aff      	cmp	r2, #255	; 0xff
   1208a:	bf14      	ite	ne
   1208c:	2200      	movne	r2, #0
   1208e:	2201      	moveq	r2, #1
   12090:	7042      	strb	r2, [r0, #1]
   12092:	788a      	ldrb	r2, [r1, #2]
   12094:	7082      	strb	r2, [r0, #2]
   12096:	78ca      	ldrb	r2, [r1, #3]
   12098:	70c2      	strb	r2, [r0, #3]
   1209a:	790a      	ldrb	r2, [r1, #4]
   1209c:	7102      	strb	r2, [r0, #4]
   1209e:	4770      	bx	lr

000120a0 <Pin::setDirection(bool) const>:

bool Pin::isNull() const { return is_null; }

void Pin::setDirection(bool out) const {
   120a0:	b530      	push	{r4, r5, lr}
   120a2:	b083      	sub	sp, #12
   120a4:	4604      	mov	r4, r0
   120a6:	460d      	mov	r5, r1
	 if (is_null)
   120a8:	7843      	ldrb	r3, [r0, #1]
   120aa:	b9c3      	cbnz	r3, 120de <Pin::setDirection(bool) const+0x3e>
//		GPIO_SetDir(port_base, _BV(pin_index), 0);
//	}
//	xprintf("%x (%s:%d)\n",&GPIO_SetDir,_F_,_L_);

	PINSEL_CFG_Type PinCfg;
	PinCfg.Funcnum = PINSEL_FUNC_0;
   120ac:	f88d 3002 	strb.w	r3, [sp, #2]
	PinCfg.OpenDrain = PINSEL_PINMODE_NORMAL;
   120b0:	f88d 3004 	strb.w	r3, [sp, #4]
	PinCfg.Pinmode = PINSEL_PINMODE_PULLUP;
   120b4:	f88d 3003 	strb.w	r3, [sp, #3]
	PinCfg.Pinnum = pin_index;
   120b8:	7883      	ldrb	r3, [r0, #2]
   120ba:	f88d 3001 	strb.w	r3, [sp, #1]
	PinCfg.Portnum = port_base;
   120be:	7803      	ldrb	r3, [r0, #0]
   120c0:	a802      	add	r0, sp, #8
   120c2:	f800 3d08 	strb.w	r3, [r0, #-8]!
	PINSEL_ConfigPin(&PinCfg);
   120c6:	4668      	mov	r0, sp
   120c8:	f7f1 fa2c 	bl	3524 <PINSEL_ConfigPin>

	GPIO_SetDir(port_base, _BV(pin_index), out);
   120cc:	78a3      	ldrb	r3, [r4, #2]
   120ce:	7820      	ldrb	r0, [r4, #0]
   120d0:	f04f 0101 	mov.w	r1, #1
   120d4:	fa01 f103 	lsl.w	r1, r1, r3
   120d8:	462a      	mov	r2, r5
   120da:	f7f1 f9f3 	bl	34c4 <GPIO_SetDir>
//	SREG = oldSREG;
}
   120de:	b003      	add	sp, #12
   120e0:	bd30      	pop	{r4, r5, pc}
   120e2:	bf00      	nop

000120e4 <_GLOBAL__sub_I__ZN3PinC2Ev>:
   120e4:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
   120e6:	f641 10b0 	movw	r0, #6576	; 0x19b0
   120ea:	f2c1 0000 	movt	r0, #4096	; 0x1000
   120ee:	f04f 0100 	mov.w	r1, #0
   120f2:	f7ff fda3 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
   120f6:	f641 10b4 	movw	r0, #6580	; 0x19b4
   120fa:	f2c1 0000 	movt	r0, #4096	; 0x1000
   120fe:	f04f 0101 	mov.w	r1, #1
   12102:	f7ff fd9b 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
   12106:	f641 10b8 	movw	r0, #6584	; 0x19b8
   1210a:	f2c1 0000 	movt	r0, #4096	; 0x1000
   1210e:	f04f 0102 	mov.w	r1, #2
   12112:	f7ff fd93 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
   12116:	f641 10bc 	movw	r0, #6588	; 0x19bc
   1211a:	f2c1 0000 	movt	r0, #4096	; 0x1000
   1211e:	f04f 0103 	mov.w	r1, #3
   12122:	f7ff fd8b 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
   12126:	f641 10c0 	movw	r0, #6592	; 0x19c0
   1212a:	f2c1 0000 	movt	r0, #4096	; 0x1000
   1212e:	f04f 0104 	mov.w	r1, #4
   12132:	f7ff fd83 	bl	11c3c <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
   12136:	f641 14c4 	movw	r4, #6596	; 0x19c4
   1213a:	f2c1 0400 	movt	r4, #4096	; 0x1000
   1213e:	4620      	mov	r0, r4
   12140:	f04f 01ff 	mov.w	r1, #255	; 0xff
   12144:	f7ff fd7a 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
   12148:	f641 10c8 	movw	r0, #6600	; 0x19c8
   1214c:	f2c1 0000 	movt	r0, #4096	; 0x1000
   12150:	4621      	mov	r1, r4
   12152:	f04f 0200 	mov.w	r2, #0
   12156:	f7ff ff83 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
   1215a:	bd10      	pop	{r4, pc}

0001215c <_GLOBAL__sub_I__ZN3PSUC2ERK3Pin>:
   1215c:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
   1215e:	f641 10d0 	movw	r0, #6608	; 0x19d0
   12162:	f2c1 0000 	movt	r0, #4096	; 0x1000
   12166:	f04f 0100 	mov.w	r1, #0
   1216a:	f7ff fd67 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
   1216e:	f641 10d4 	movw	r0, #6612	; 0x19d4
   12172:	f2c1 0000 	movt	r0, #4096	; 0x1000
   12176:	f04f 0101 	mov.w	r1, #1
   1217a:	f7ff fd5f 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
   1217e:	f641 10d8 	movw	r0, #6616	; 0x19d8
   12182:	f2c1 0000 	movt	r0, #4096	; 0x1000
   12186:	f04f 0102 	mov.w	r1, #2
   1218a:	f7ff fd57 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
   1218e:	f641 10dc 	movw	r0, #6620	; 0x19dc
   12192:	f2c1 0000 	movt	r0, #4096	; 0x1000
   12196:	f04f 0103 	mov.w	r1, #3
   1219a:	f7ff fd4f 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
   1219e:	f641 10e0 	movw	r0, #6624	; 0x19e0
   121a2:	f2c1 0000 	movt	r0, #4096	; 0x1000
   121a6:	f04f 0104 	mov.w	r1, #4
   121aa:	f7ff fd47 	bl	11c3c <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
   121ae:	f641 14e4 	movw	r4, #6628	; 0x19e4
   121b2:	f2c1 0400 	movt	r4, #4096	; 0x1000
   121b6:	4620      	mov	r0, r4
   121b8:	f04f 01ff 	mov.w	r1, #255	; 0xff
   121bc:	f7ff fd3e 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
   121c0:	f641 10e8 	movw	r0, #6632	; 0x19e8
   121c4:	f2c1 0000 	movt	r0, #4096	; 0x1000
   121c8:	4621      	mov	r1, r4
   121ca:	f04f 0200 	mov.w	r2, #0
   121ce:	f7ff ff47 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
   121d2:	bd10      	pop	{r4, pc}

000121d4 <Thermistor::~Thermistor()>:
protected:
        /// The last temperature reading from the sensor, in degrees Celcius, or
        /// #BAD_TEMPERATURE if the last reading is invalid.
	volatile uint16_t current_temp;
public:
	virtual ~TemperatureSensor(){};
   121d4:	4b01      	ldr	r3, [pc, #4]	; (121dc <Thermistor::~Thermistor()+0x8>)
   121d6:	6003      	str	r3, [r0, #0]
#define SAMPLE_COUNT 9

/// The thermistor module provides a driver to read the value of a thermistor connected
/// to an analog pin, and convert it to a corrected temperature in degress Celcius.
/// \ingroup SoftwareLibraries
class Thermistor : public TemperatureSensor {
   121d8:	4770      	bx	lr
   121da:	bf00      	nop
   121dc:	00027630 	.word	0x00027630

000121e0 <Thermistor::~Thermistor()>:
   121e0:	b510      	push	{r4, lr}
   121e2:	4604      	mov	r4, r0
   121e4:	4b02      	ldr	r3, [pc, #8]	; (121f0 <Thermistor::~Thermistor()+0x10>)
   121e6:	6003      	str	r3, [r0, #0]
   121e8:	f002 fb5a 	bl	148a0 <operator delete(void*)>
   121ec:	4620      	mov	r0, r4
   121ee:	bd10      	pop	{r4, pc}
   121f0:	00027630 	.word	0x00027630

000121f4 <Thermistor::init()>:
        for (int i = 0; i < SAMPLE_COUNT; i++) {
            sample_buffer[i] = 0;
        }
}

void Thermistor::init() {
   121f4:	b508      	push	{r3, lr}
  current_temp = 0;
   121f6:	f04f 0300 	mov.w	r3, #0
   121fa:	8083      	strh	r3, [r0, #4]
	initAnalogPin(analog_pin);
   121fc:	7980      	ldrb	r0, [r0, #6]
   121fe:	f7fe fdc1 	bl	10d84 <initAnalogPin(unsigned char)>
}
   12202:	bd08      	pop	{r3, pc}

00012204 <Thermistor::Thermistor(unsigned char, unsigned char)>:

Thermistor::Thermistor(uint8_t analog_pin_in, uint8_t table_index_in) :
    analog_pin(analog_pin_in),
    next_sample(0),
    raw_valid(false),
    table_index(table_index_in)
   12204:	4b0e      	ldr	r3, [pc, #56]	; (12240 <Thermistor::Thermistor(unsigned char, unsigned char)+0x3c>)
   12206:	6003      	str	r3, [r0, #0]
   12208:	7181      	strb	r1, [r0, #6]
   1220a:	f04f 0300 	mov.w	r3, #0
   1220e:	7283      	strb	r3, [r0, #10]
   12210:	7783      	strb	r3, [r0, #30]
   12212:	77c2      	strb	r2, [r0, #31]
{
	  if (analog_pin==0)
   12214:	b919      	cbnz	r1, 1221e <Thermistor::Thermistor(unsigned char, unsigned char)+0x1a>
		  analog_pin = 26;
   12216:	f04f 031a 	mov.w	r3, #26
   1221a:	7183      	strb	r3, [r0, #6]
   1221c:	e004      	b.n	12228 <Thermistor::Thermistor(unsigned char, unsigned char)+0x24>
	  if (analog_pin==1)
   1221e:	7983      	ldrb	r3, [r0, #6]
   12220:	2b01      	cmp	r3, #1
		  analog_pin = 25;
   12222:	bf04      	itt	eq
   12224:	2319      	moveq	r3, #25
   12226:	7183      	strbeq	r3, [r0, #6]
        int16_t adc;
        int16_t celsius;
} __attribute__ ((packed));


Thermistor::Thermistor(uint8_t analog_pin_in, uint8_t table_index_in) :
   12228:	f100 020a 	add.w	r2, r0, #10
   1222c:	f04f 0309 	mov.w	r3, #9
	  if (analog_pin==0)
		  analog_pin = 26;
	  if (analog_pin==1)
		  analog_pin = 25;
        for (int i = 0; i < SAMPLE_COUNT; i++) {
            sample_buffer[i] = 0;
   12230:	f04f 0100 	mov.w	r1, #0
   12234:	f822 1f02 	strh.w	r1, [r2, #2]!
{
	  if (analog_pin==0)
		  analog_pin = 26;
	  if (analog_pin==1)
		  analog_pin = 25;
        for (int i = 0; i < SAMPLE_COUNT; i++) {
   12238:	3b01      	subs	r3, #1
   1223a:	d1fb      	bne.n	12234 <Thermistor::Thermistor(unsigned char, unsigned char)+0x30>
            sample_buffer[i] = 0;
        }
}
   1223c:	4770      	bx	lr
   1223e:	bf00      	nop
   12240:	0002be30 	.word	0x0002be30

00012244 <void std::__move_median_first<unsigned long*>(unsigned long*, unsigned long*, unsigned long*)>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  /// Swaps the median value of *__a, *__b and *__c to *__a
  template<typename _Iterator>
    void
    __move_median_first(_Iterator __a, _Iterator __b, _Iterator __c)
   12244:	b430      	push	{r4, r5}
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<
	    typename iterator_traits<_Iterator>::value_type>)

      if (*__a < *__b)
   12246:	6803      	ldr	r3, [r0, #0]
   12248:	680c      	ldr	r4, [r1, #0]
   1224a:	42a3      	cmp	r3, r4
   1224c:	d20a      	bcs.n	12264 <void std::__move_median_first<unsigned long*>(unsigned long*, unsigned long*, unsigned long*)+0x20>
	{
	  if (*__b < *__c)
   1224e:	6815      	ldr	r5, [r2, #0]
   12250:	42ac      	cmp	r4, r5
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   12252:	bf3c      	itt	cc
   12254:	6004      	strcc	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   12256:	600b      	strcc	r3, [r1, #0]
   12258:	d30d      	bcc.n	12276 <void std::__move_median_first<unsigned long*>(unsigned long*, unsigned long*, unsigned long*)+0x32>
	    std::iter_swap(__a, __b);
	  else if (*__a < *__c)
   1225a:	42ab      	cmp	r3, r5
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   1225c:	bf3c      	itt	cc
   1225e:	6005      	strcc	r5, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   12260:	6013      	strcc	r3, [r2, #0]
   12262:	e008      	b.n	12276 <void std::__move_median_first<unsigned long*>(unsigned long*, unsigned long*, unsigned long*)+0x32>
	    std::iter_swap(__a, __c);
	}
      else if (*__a < *__c)
   12264:	6815      	ldr	r5, [r2, #0]
   12266:	42ab      	cmp	r3, r5
   12268:	d305      	bcc.n	12276 <void std::__move_median_first<unsigned long*>(unsigned long*, unsigned long*, unsigned long*)+0x32>
	return;
      else if (*__b < *__c)
   1226a:	42ac      	cmp	r4, r5
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   1226c:	bf39      	ittee	cc
   1226e:	6005      	strcc	r5, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   12270:	6013      	strcc	r3, [r2, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   12272:	6004      	strcs	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   12274:	600b      	strcs	r3, [r1, #0]
	std::iter_swap(__a, __c);
      else
	std::iter_swap(__a, __b);
    }
   12276:	bc30      	pop	{r4, r5}
   12278:	4770      	bx	lr
   1227a:	bf00      	nop

0001227c <unsigned long* std::__unguarded_partition<unsigned long*, unsigned long>(unsigned long*, unsigned long*, unsigned long const&)>:
    }

  /// This is a helper function...
  template<typename _RandomAccessIterator, typename _Tp>
    _RandomAccessIterator
    __unguarded_partition(_RandomAccessIterator __first,
   1227c:	b470      	push	{r4, r5, r6}
			  _RandomAccessIterator __last, const _Tp& __pivot)
    {
      while (true)
	{
	  while (*__first < __pivot)
   1227e:	6805      	ldr	r5, [r0, #0]
   12280:	6814      	ldr	r4, [r2, #0]
   12282:	42a5      	cmp	r5, r4
   12284:	d206      	bcs.n	12294 <unsigned long* std::__unguarded_partition<unsigned long*, unsigned long>(unsigned long*, unsigned long*, unsigned long const&)+0x18>
   12286:	4603      	mov	r3, r0
	    ++__first;
   12288:	f100 0004 	add.w	r0, r0, #4
    __unguarded_partition(_RandomAccessIterator __first,
			  _RandomAccessIterator __last, const _Tp& __pivot)
    {
      while (true)
	{
	  while (*__first < __pivot)
   1228c:	f853 5f04 	ldr.w	r5, [r3, #4]!
   12290:	42a5      	cmp	r5, r4
   12292:	d3f9      	bcc.n	12288 <unsigned long* std::__unguarded_partition<unsigned long*, unsigned long>(unsigned long*, unsigned long*, unsigned long const&)+0xc>
	    ++__first;
	  --__last;
   12294:	f1a1 0304 	sub.w	r3, r1, #4
	  while (__pivot < *__last)
   12298:	f851 6c04 	ldr.w	r6, [r1, #-4]
   1229c:	42a6      	cmp	r6, r4
    {
      while (true)
	{
	  while (*__first < __pivot)
	    ++__first;
	  --__last;
   1229e:	bf98      	it	ls
   122a0:	4619      	movls	r1, r3
	  while (__pivot < *__last)
   122a2:	d906      	bls.n	122b2 <unsigned long* std::__unguarded_partition<unsigned long*, unsigned long>(unsigned long*, unsigned long*, unsigned long const&)+0x36>
    }

  /// This is a helper function...
  template<typename _RandomAccessIterator, typename _Tp>
    _RandomAccessIterator
    __unguarded_partition(_RandomAccessIterator __first,
   122a4:	f1a3 0104 	sub.w	r1, r3, #4
      while (true)
	{
	  while (*__first < __pivot)
	    ++__first;
	  --__last;
	  while (__pivot < *__last)
   122a8:	f853 6c04 	ldr.w	r6, [r3, #-4]
   122ac:	460b      	mov	r3, r1
   122ae:	42a6      	cmp	r6, r4
   122b0:	d8f8      	bhi.n	122a4 <unsigned long* std::__unguarded_partition<unsigned long*, unsigned long>(unsigned long*, unsigned long*, unsigned long const&)+0x28>
	    --__last;
	  if (!(__first < __last))
   122b2:	4281      	cmp	r1, r0
   122b4:	d801      	bhi.n	122ba <unsigned long* std::__unguarded_partition<unsigned long*, unsigned long>(unsigned long*, unsigned long*, unsigned long const&)+0x3e>
	    return __first;
	  std::iter_swap(__first, __last);
	  ++__first;
	}
    }
   122b6:	bc70      	pop	{r4, r5, r6}
   122b8:	4770      	bx	lr
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   122ba:	f840 6b04 	str.w	r6, [r0], #4
      __b = _GLIBCXX_MOVE(__tmp);
   122be:	600d      	str	r5, [r1, #0]
  template<typename _RandomAccessIterator, typename _Tp>
    _RandomAccessIterator
    __unguarded_partition(_RandomAccessIterator __first,
			  _RandomAccessIterator __last, const _Tp& __pivot)
    {
      while (true)
   122c0:	e7dd      	b.n	1227e <unsigned long* std::__unguarded_partition<unsigned long*, unsigned long>(unsigned long*, unsigned long*, unsigned long const&)+0x2>
   122c2:	bf00      	nop

000122c4 <void std::__unguarded_linear_insert<unsigned long*>(unsigned long*)>:
    }

  /// This is a helper function for the sort routine.
  template<typename _RandomAccessIterator>
    void
    __unguarded_linear_insert(_RandomAccessIterator __last)
   122c4:	b410      	push	{r4}
    {
      typename iterator_traits<_RandomAccessIterator>::value_type
	__val = _GLIBCXX_MOVE(*__last);
   122c6:	6804      	ldr	r4, [r0, #0]
      _RandomAccessIterator __next = __last;
      --__next;
      while (__val < *__next)
   122c8:	f850 3c04 	ldr.w	r3, [r0, #-4]
   122cc:	429c      	cmp	r4, r3
    __unguarded_linear_insert(_RandomAccessIterator __last)
    {
      typename iterator_traits<_RandomAccessIterator>::value_type
	__val = _GLIBCXX_MOVE(*__last);
      _RandomAccessIterator __next = __last;
      --__next;
   122ce:	bf38      	it	cc
   122d0:	1f02      	subcc	r2, r0, #4
      while (__val < *__next)
   122d2:	d301      	bcc.n	122d8 <void std::__unguarded_linear_insert<unsigned long*>(unsigned long*)+0x14>
   122d4:	e007      	b.n	122e6 <void std::__unguarded_linear_insert<unsigned long*>(unsigned long*)+0x22>
   122d6:	4608      	mov	r0, r1
   122d8:	4611      	mov	r1, r2
	{
	  *__last = _GLIBCXX_MOVE(*__next);
   122da:	6003      	str	r3, [r0, #0]
    {
      typename iterator_traits<_RandomAccessIterator>::value_type
	__val = _GLIBCXX_MOVE(*__last);
      _RandomAccessIterator __next = __last;
      --__next;
      while (__val < *__next)
   122dc:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   122e0:	429c      	cmp	r4, r3
   122e2:	d3f8      	bcc.n	122d6 <void std::__unguarded_linear_insert<unsigned long*>(unsigned long*)+0x12>
   122e4:	4608      	mov	r0, r1
	{
	  *__last = _GLIBCXX_MOVE(*__next);
	  __last = __next;
	  --__next;
	}
      *__last = _GLIBCXX_MOVE(__val);
   122e6:	6004      	str	r4, [r0, #0]
    }
   122e8:	bc10      	pop	{r4}
   122ea:	4770      	bx	lr

000122ec <void std::__insertion_sort<unsigned long*>(unsigned long*, unsigned long*)>:
    }

  /// This is a helper function for the sort routine.
  template<typename _RandomAccessIterator>
    void
    __insertion_sort(_RandomAccessIterator __first,
   122ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   122f0:	4605      	mov	r5, r0
   122f2:	4688      	mov	r8, r1
		     _RandomAccessIterator __last)
    {
      if (__first == __last)
   122f4:	4288      	cmp	r0, r1
   122f6:	d01b      	beq.n	12330 <void std::__insertion_sort<unsigned long*>(unsigned long*, unsigned long*)+0x44>
	return;

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
   122f8:	f100 0404 	add.w	r4, r0, #4
   122fc:	42a1      	cmp	r1, r4
   122fe:	d017      	beq.n	12330 <void std::__insertion_sort<unsigned long*>(unsigned long*, unsigned long*)+0x44>
   12300:	f04f 0600 	mov.w	r6, #0
   12304:	4620      	mov	r0, r4
	{
	  if (*__i < *__first)
   12306:	f854 7b04 	ldr.w	r7, [r4], #4
   1230a:	f106 0604 	add.w	r6, r6, #4
   1230e:	682b      	ldr	r3, [r5, #0]
   12310:	429f      	cmp	r7, r3
   12312:	d209      	bcs.n	12328 <void std::__insertion_sort<unsigned long*>(unsigned long*, unsigned long*)+0x3c>
      template<typename _Tp>
        static _Tp*
        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   12314:	10b2      	asrs	r2, r6, #2
   12316:	d005      	beq.n	12324 <void std::__insertion_sort<unsigned long*>(unsigned long*, unsigned long*)+0x38>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   12318:	ea4f 0282 	mov.w	r2, r2, lsl #2
   1231c:	1aa0      	subs	r0, r4, r2
   1231e:	4629      	mov	r1, r5
   12320:	f00e f9fe 	bl	20720 <memmove>
	    {
	      typename iterator_traits<_RandomAccessIterator>::value_type
		__val = _GLIBCXX_MOVE(*__i);
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
	      *__first = _GLIBCXX_MOVE(__val);
   12324:	602f      	str	r7, [r5, #0]
   12326:	e001      	b.n	1232c <void std::__insertion_sort<unsigned long*>(unsigned long*, unsigned long*)+0x40>
	    }
	  else
	    std::__unguarded_linear_insert(__i);
   12328:	f7ff ffcc 	bl	122c4 <void std::__unguarded_linear_insert<unsigned long*>(unsigned long*)>
		     _RandomAccessIterator __last)
    {
      if (__first == __last)
	return;

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
   1232c:	45a0      	cmp	r8, r4
   1232e:	d1e9      	bne.n	12304 <void std::__insertion_sort<unsigned long*>(unsigned long*, unsigned long*)+0x18>
   12330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00012334 <void std::__final_insertion_sort<unsigned long*>(unsigned long*, unsigned long*)>:
  enum { _S_threshold = 16 };

  /// This is a helper function for the sort routine.
  template<typename _RandomAccessIterator>
    void
    __final_insertion_sort(_RandomAccessIterator __first,
   12334:	b538      	push	{r3, r4, r5, lr}
   12336:	460d      	mov	r5, r1
			   _RandomAccessIterator __last)
    {
      if (__last - __first > int(_S_threshold))
   12338:	1a0b      	subs	r3, r1, r0
   1233a:	2b43      	cmp	r3, #67	; 0x43
   1233c:	dd0e      	ble.n	1235c <void std::__final_insertion_sort<unsigned long*>(unsigned long*, unsigned long*)+0x28>
	{
	  std::__insertion_sort(__first, __first + int(_S_threshold));
   1233e:	f100 0440 	add.w	r4, r0, #64	; 0x40
   12342:	4621      	mov	r1, r4
   12344:	f7ff ffd2 	bl	122ec <void std::__insertion_sort<unsigned long*>(unsigned long*, unsigned long*)>
			       _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
	_ValueType;

      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
   12348:	42a5      	cmp	r5, r4
   1234a:	d009      	beq.n	12360 <void std::__final_insertion_sort<unsigned long*>(unsigned long*, unsigned long*)+0x2c>
	std::__unguarded_linear_insert(__i);
   1234c:	4620      	mov	r0, r4
   1234e:	f7ff ffb9 	bl	122c4 <void std::__unguarded_linear_insert<unsigned long*>(unsigned long*)>
			       _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
	_ValueType;

      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
   12352:	f104 0404 	add.w	r4, r4, #4
   12356:	42a5      	cmp	r5, r4
   12358:	d1f8      	bne.n	1234c <void std::__final_insertion_sort<unsigned long*>(unsigned long*, unsigned long*)+0x18>
   1235a:	bd38      	pop	{r3, r4, r5, pc}
	{
	  std::__insertion_sort(__first, __first + int(_S_threshold));
	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last);
	}
      else
	std::__insertion_sort(__first, __last);
   1235c:	f7ff ffc6 	bl	122ec <void std::__insertion_sort<unsigned long*>(unsigned long*, unsigned long*)>
   12360:	bd38      	pop	{r3, r4, r5, pc}
   12362:	bf00      	nop

00012364 <void std::__push_heap<unsigned long*, int, unsigned long>(unsigned long*, int, int, unsigned long)>:
  // Heap-manipulation functions: push_heap, pop_heap, make_heap, sort_heap,
  // + is_heap and is_heap_until in C++0x.

  template<typename _RandomAccessIterator, typename _Distance, typename _Tp>
    void
    __push_heap(_RandomAccessIterator __first,
   12364:	b430      	push	{r4, r5}
		_Distance __holeIndex, _Distance __topIndex, _Tp __value)
    {
      _Distance __parent = (__holeIndex - 1) / 2;
   12366:	f101 34ff 	add.w	r4, r1, #4294967295
   1236a:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
   1236e:	ea4f 0464 	mov.w	r4, r4, asr #1
      while (__holeIndex > __topIndex && *(__first + __parent) < __value)
   12372:	4291      	cmp	r1, r2
   12374:	dd0d      	ble.n	12392 <void std::__push_heap<unsigned long*, int, unsigned long>(unsigned long*, int, int, unsigned long)+0x2e>
   12376:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
   1237a:	429d      	cmp	r5, r3
   1237c:	d209      	bcs.n	12392 <void std::__push_heap<unsigned long*, int, unsigned long>(unsigned long*, int, int, unsigned long)+0x2e>
	{
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
   1237e:	f840 5021 	str.w	r5, [r0, r1, lsl #2]
	  __holeIndex = __parent;
	  __parent = (__holeIndex - 1) / 2;
   12382:	f104 31ff 	add.w	r1, r4, #4294967295
   12386:	eb01 75d1 	add.w	r5, r1, r1, lsr #31
    {
      _Distance __parent = (__holeIndex - 1) / 2;
      while (__holeIndex > __topIndex && *(__first + __parent) < __value)
	{
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
	  __holeIndex = __parent;
   1238a:	4621      	mov	r1, r4
	  __parent = (__holeIndex - 1) / 2;
   1238c:	ea4f 0465 	mov.w	r4, r5, asr #1
   12390:	e7ef      	b.n	12372 <void std::__push_heap<unsigned long*, int, unsigned long>(unsigned long*, int, int, unsigned long)+0xe>
	}
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
   12392:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
    }
   12396:	bc30      	pop	{r4, r5}
   12398:	4770      	bx	lr
   1239a:	bf00      	nop

0001239c <void std::__adjust_heap<unsigned long*, int, unsigned long>(unsigned long*, int, int, unsigned long)>:
		       _DistanceType(0), _GLIBCXX_MOVE(__value), __comp);
    }

  template<typename _RandomAccessIterator, typename _Distance, typename _Tp>
    void
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
   1239c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1239e:	460c      	mov	r4, r1
		  _Distance __len, _Tp __value)
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while (__secondChild < (__len - 1) / 2)
   123a0:	f102 3eff 	add.w	lr, r2, #4294967295
   123a4:	eb0e 7ede 	add.w	lr, lr, lr, lsr #31
   123a8:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   123ac:	4571      	cmp	r1, lr
   123ae:	bfb8      	it	lt
   123b0:	460d      	movlt	r5, r1
   123b2:	db01      	blt.n	123b8 <void std::__adjust_heap<unsigned long*, int, unsigned long>(unsigned long*, int, int, unsigned long)+0x1c>
   123b4:	e014      	b.n	123e0 <void std::__adjust_heap<unsigned long*, int, unsigned long>(unsigned long*, int, int, unsigned long)+0x44>
   123b6:	460d      	mov	r5, r1
	{
	  __secondChild = 2 * (__secondChild + 1);
   123b8:	f105 0101 	add.w	r1, r5, #1
   123bc:	ea4f 0141 	mov.w	r1, r1, lsl #1
	  if (*(__first + __secondChild) < *(__first + (__secondChild - 1)))
   123c0:	f101 36ff 	add.w	r6, r1, #4294967295
   123c4:	f850 7021 	ldr.w	r7, [r0, r1, lsl #2]
   123c8:	f850 6026 	ldr.w	r6, [r0, r6, lsl #2]
   123cc:	42b7      	cmp	r7, r6
	    __secondChild--;
   123ce:	bf38      	it	cc
   123d0:	f101 31ff 	addcc.w	r1, r1, #4294967295
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
   123d4:	f850 6021 	ldr.w	r6, [r0, r1, lsl #2]
   123d8:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
		  _Distance __len, _Tp __value)
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while (__secondChild < (__len - 1) / 2)
   123dc:	4571      	cmp	r1, lr
   123de:	dbea      	blt.n	123b6 <void std::__adjust_heap<unsigned long*, int, unsigned long>(unsigned long*, int, int, unsigned long)+0x1a>
	  if (*(__first + __secondChild) < *(__first + (__secondChild - 1)))
	    __secondChild--;
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
	  __holeIndex = __secondChild;
	}
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
   123e0:	f012 0f01 	tst.w	r2, #1
   123e4:	d10e      	bne.n	12404 <void std::__adjust_heap<unsigned long*, int, unsigned long>(unsigned long*, int, int, unsigned long)+0x68>
   123e6:	f1a2 0202 	sub.w	r2, r2, #2
   123ea:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   123ee:	ebb1 0f62 	cmp.w	r1, r2, asr #1
	{
	  __secondChild = 2 * (__secondChild + 1);
   123f2:	bf01      	itttt	eq
   123f4:	004a      	lsleq	r2, r1, #1
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
   123f6:	3201      	addeq	r2, #1
   123f8:	f850 5022 	ldreq.w	r5, [r0, r2, lsl #2]
   123fc:	f840 5021 	streq.w	r5, [r0, r1, lsl #2]
						     + (__secondChild - 1)));
	  __holeIndex = __secondChild - 1;
   12400:	bf08      	it	eq
   12402:	4611      	moveq	r1, r2
	}
      std::__push_heap(__first, __holeIndex, __topIndex,
   12404:	4622      	mov	r2, r4
   12406:	f7ff ffad 	bl	12364 <void std::__push_heap<unsigned long*, int, unsigned long>(unsigned long*, int, int, unsigned long)>
		       _GLIBCXX_MOVE(__value));
    }
   1240a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001240c <void std::make_heap<unsigned long*>(unsigned long*, unsigned long*)>:
   *
   *  This operation makes the elements in [first,last) into a heap.
  */
  template<typename _RandomAccessIterator>
    void
    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
   1240c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1240e:	4606      	mov	r6, r0
      __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<
	    _RandomAccessIterator>)
      __glibcxx_function_requires(_LessThanComparableConcept<_ValueType>)
      __glibcxx_requires_valid_range(__first, __last);

      if (__last - __first < 2)
   12410:	1a09      	subs	r1, r1, r0
   12412:	2907      	cmp	r1, #7
   12414:	dd14      	ble.n	12440 <void std::make_heap<unsigned long*>(unsigned long*, unsigned long*)+0x34>
	return;

      const _DistanceType __len = __last - __first;
   12416:	ea4f 07a1 	mov.w	r7, r1, asr #2
      _DistanceType __parent = (__len - 2) / 2;
   1241a:	f1a7 0402 	sub.w	r4, r7, #2
   1241e:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
   12422:	ea4f 0464 	mov.w	r4, r4, asr #1
   *
   *  This operation makes the elements in [first,last) into a heap.
  */
  template<typename _RandomAccessIterator>
    void
    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
   12426:	eb00 0584 	add.w	r5, r0, r4, lsl #2
      const _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2) / 2;
      while (true)
	{
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value));
   1242a:	4630      	mov	r0, r6
   1242c:	4621      	mov	r1, r4
   1242e:	463a      	mov	r2, r7
   12430:	f855 3904 	ldr.w	r3, [r5], #-4
   12434:	f7ff ffb2 	bl	1239c <void std::__adjust_heap<unsigned long*, int, unsigned long>(unsigned long*, int, int, unsigned long)>
	  if (__parent == 0)
   12438:	b114      	cbz	r4, 12440 <void std::make_heap<unsigned long*>(unsigned long*, unsigned long*)+0x34>
	    return;
	  __parent--;
   1243a:	f104 34ff 	add.w	r4, r4, #4294967295
      if (__last - __first < 2)
	return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2) / 2;
      while (true)
   1243e:	e7f4      	b.n	1242a <void std::make_heap<unsigned long*>(unsigned long*, unsigned long*)+0x1e>
   12440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12442:	bf00      	nop

00012444 <void std::__heap_select<unsigned long*>(unsigned long*, unsigned long*, unsigned long*)>:
    }

  /// This is a helper function for the sort routines.
  template<typename _RandomAccessIterator>
    void
    __heap_select(_RandomAccessIterator __first,
   12444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12448:	4605      	mov	r5, r0
   1244a:	460c      	mov	r4, r1
   1244c:	4616      	mov	r6, r2
		  _RandomAccessIterator __middle,
		  _RandomAccessIterator __last)
    {
      std::make_heap(__first, __middle);
   1244e:	f7ff ffdd 	bl	1240c <void std::make_heap<unsigned long*>(unsigned long*, unsigned long*)>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
   12452:	42b4      	cmp	r4, r6
   12454:	d213      	bcs.n	1247e <void std::__heap_select<unsigned long*>(unsigned long*, unsigned long*, unsigned long*)+0x3a>
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
	_DistanceType;

      _ValueType __value = _GLIBCXX_MOVE(*__result);
      *__result = _GLIBCXX_MOVE(*__first);
      std::__adjust_heap(__first, _DistanceType(0),
   12456:	ebc5 0804 	rsb	r8, r5, r4
   1245a:	ea4f 08a8 	mov.w	r8, r8, asr #2
   1245e:	f04f 0700 	mov.w	r7, #0
	if (*__i < *__first)
   12462:	f854 3b04 	ldr.w	r3, [r4], #4
   12466:	682a      	ldr	r2, [r5, #0]
   12468:	4293      	cmp	r3, r2
   1246a:	d206      	bcs.n	1247a <void std::__heap_select<unsigned long*>(unsigned long*, unsigned long*, unsigned long*)+0x36>
	_ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
	_DistanceType;

      _ValueType __value = _GLIBCXX_MOVE(*__result);
      *__result = _GLIBCXX_MOVE(*__first);
   1246c:	f844 2c04 	str.w	r2, [r4, #-4]
      std::__adjust_heap(__first, _DistanceType(0),
   12470:	4628      	mov	r0, r5
   12472:	4639      	mov	r1, r7
   12474:	4642      	mov	r2, r8
   12476:	f7ff ff91 	bl	1239c <void std::__adjust_heap<unsigned long*, int, unsigned long>(unsigned long*, int, int, unsigned long)>
    __heap_select(_RandomAccessIterator __first,
		  _RandomAccessIterator __middle,
		  _RandomAccessIterator __last)
    {
      std::make_heap(__first, __middle);
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
   1247a:	42a6      	cmp	r6, r4
   1247c:	d8f1      	bhi.n	12462 <void std::__heap_select<unsigned long*>(unsigned long*, unsigned long*, unsigned long*)+0x1e>
   1247e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12482:	bf00      	nop

00012484 <void std::sort_heap<unsigned long*>(unsigned long*, unsigned long*)>:
   *
   *  This operation sorts the valid heap in the range [first,last).
  */
  template<typename _RandomAccessIterator>
    void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
   12484:	b570      	push	{r4, r5, r6, lr}
   12486:	4605      	mov	r5, r0
      __glibcxx_function_requires(_LessThanComparableConcept<
	    typename iterator_traits<_RandomAccessIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_heap(__first, __last);

      while (__last - __first > 1)
   12488:	1a0b      	subs	r3, r1, r0
   1248a:	2b07      	cmp	r3, #7
   1248c:	dd13      	ble.n	124b6 <void std::sort_heap<unsigned long*>(unsigned long*, unsigned long*)+0x32>
   *
   *  This operation sorts the valid heap in the range [first,last).
  */
  template<typename _RandomAccessIterator>
    void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
   1248e:	4619      	mov	r1, r3
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
	_DistanceType;

      _ValueType __value = _GLIBCXX_MOVE(*__result);
      *__result = _GLIBCXX_MOVE(*__first);
      std::__adjust_heap(__first, _DistanceType(0),
   12490:	f04f 0600 	mov.w	r6, #0
   *
   *  This operation sorts the valid heap in the range [first,last).
  */
  template<typename _RandomAccessIterator>
    void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
   12494:	186a      	adds	r2, r5, r1
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
	_ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
	_DistanceType;

      _ValueType __value = _GLIBCXX_MOVE(*__result);
   12496:	f852 3c04 	ldr.w	r3, [r2, #-4]
      *__result = _GLIBCXX_MOVE(*__first);
   1249a:	6828      	ldr	r0, [r5, #0]
   1249c:	f842 0c04 	str.w	r0, [r2, #-4]
   *
   *  This operation sorts the valid heap in the range [first,last).
  */
  template<typename _RandomAccessIterator>
    void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
   124a0:	f1a1 0404 	sub.w	r4, r1, #4
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
	_DistanceType;

      _ValueType __value = _GLIBCXX_MOVE(*__result);
      *__result = _GLIBCXX_MOVE(*__first);
      std::__adjust_heap(__first, _DistanceType(0),
   124a4:	4628      	mov	r0, r5
   124a6:	4631      	mov	r1, r6
   124a8:	ea4f 02a4 	mov.w	r2, r4, asr #2
   124ac:	f7ff ff76 	bl	1239c <void std::__adjust_heap<unsigned long*, int, unsigned long>(unsigned long*, int, int, unsigned long)>
   124b0:	4621      	mov	r1, r4
      __glibcxx_function_requires(_LessThanComparableConcept<
	    typename iterator_traits<_RandomAccessIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_heap(__first, __last);

      while (__last - __first > 1)
   124b2:	2c07      	cmp	r4, #7
   124b4:	dcee      	bgt.n	12494 <void std::sort_heap<unsigned long*>(unsigned long*, unsigned long*)+0x10>
   124b6:	bd70      	pop	{r4, r5, r6, pc}

000124b8 <void std::__introsort_loop<unsigned long*, int>(unsigned long*, unsigned long*, int)>:
    }

  /// This is a helper function for the sort routine.
  template<typename _RandomAccessIterator, typename _Size>
    void
    __introsort_loop(_RandomAccessIterator __first,
   124b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   124bc:	4606      	mov	r6, r0
   124be:	460c      	mov	r4, r1
   124c0:	4615      	mov	r5, r2
		     _RandomAccessIterator __last,
		     _Size __depth_limit)
    {
      while (__last - __first > int(_S_threshold))
   124c2:	4680      	mov	r8, r0
   124c4:	1a0b      	subs	r3, r1, r0
   124c6:	2b43      	cmp	r3, #67	; 0x43
   124c8:	dd2f      	ble.n	1252a <void std::__introsort_loop<unsigned long*, int>(unsigned long*, unsigned long*, int)+0x72>
	{
	  if (__depth_limit == 0)
   124ca:	b97a      	cbnz	r2, 124ec <void std::__introsort_loop<unsigned long*, int>(unsigned long*, unsigned long*, int)+0x34>
   124cc:	e001      	b.n	124d2 <void std::__introsort_loop<unsigned long*, int>(unsigned long*, unsigned long*, int)+0x1a>
   124ce:	b95d      	cbnz	r5, 124e8 <void std::__introsort_loop<unsigned long*, int>(unsigned long*, unsigned long*, int)+0x30>
    __unguarded_partition_pivot(_RandomAccessIterator __first,
				_RandomAccessIterator __last)
    {
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
      std::__move_median_first(__first, __mid, (__last - 1));
      return std::__unguarded_partition(__first + 1, __last, *__first);
   124d0:	463c      	mov	r4, r7
	    _RandomAccessIterator>)
      __glibcxx_function_requires(_LessThanComparableConcept<_ValueType>)
      __glibcxx_requires_valid_range(__first, __middle);
      __glibcxx_requires_valid_range(__middle, __last);

      std::__heap_select(__first, __middle, __last);
   124d2:	4630      	mov	r0, r6
   124d4:	4621      	mov	r1, r4
   124d6:	4622      	mov	r2, r4
   124d8:	f7ff ffb4 	bl	12444 <void std::__heap_select<unsigned long*>(unsigned long*, unsigned long*, unsigned long*)>
      std::sort_heap(__first, __middle);
   124dc:	4630      	mov	r0, r6
   124de:	4621      	mov	r1, r4
   124e0:	f7ff ffd0 	bl	12484 <void std::sort_heap<unsigned long*>(unsigned long*, unsigned long*)>
   124e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __unguarded_partition_pivot(_RandomAccessIterator __first,
				_RandomAccessIterator __last)
    {
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
      std::__move_median_first(__first, __mid, (__last - 1));
      return std::__unguarded_partition(__first + 1, __last, *__first);
   124e8:	463c      	mov	r4, r7
   124ea:	e001      	b.n	124f0 <void std::__introsort_loop<unsigned long*, int>(unsigned long*, unsigned long*, int)+0x38>
   124ec:	f100 0904 	add.w	r9, r0, #4
	  if (__depth_limit == 0)
	    {
	      _GLIBCXX_STD_A::partial_sort(__first, __last, __last);
	      return;
	    }
	  --__depth_limit;
   124f0:	f105 35ff 	add.w	r5, r5, #4294967295
  template<typename _RandomAccessIterator>
    inline _RandomAccessIterator
    __unguarded_partition_pivot(_RandomAccessIterator __first,
				_RandomAccessIterator __last)
    {
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
   124f4:	ea4f 03a3 	mov.w	r3, r3, asr #2
   124f8:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   124fc:	ea4f 0163 	mov.w	r1, r3, asr #1
      std::__move_median_first(__first, __mid, (__last - 1));
   12500:	4630      	mov	r0, r6
   12502:	eb06 0181 	add.w	r1, r6, r1, lsl #2
   12506:	f1a4 0204 	sub.w	r2, r4, #4
   1250a:	f7ff fe9b 	bl	12244 <void std::__move_median_first<unsigned long*>(unsigned long*, unsigned long*, unsigned long*)>
      return std::__unguarded_partition(__first + 1, __last, *__first);
   1250e:	4648      	mov	r0, r9
   12510:	4621      	mov	r1, r4
   12512:	4632      	mov	r2, r6
   12514:	f7ff feb2 	bl	1227c <unsigned long* std::__unguarded_partition<unsigned long*, unsigned long>(unsigned long*, unsigned long*, unsigned long const&)>
   12518:	4607      	mov	r7, r0
	      return;
	    }
	  --__depth_limit;
	  _RandomAccessIterator __cut =
	    std::__unguarded_partition_pivot(__first, __last);
	  std::__introsort_loop(__cut, __last, __depth_limit);
   1251a:	4621      	mov	r1, r4
   1251c:	462a      	mov	r2, r5
   1251e:	f7ff ffcb 	bl	124b8 <void std::__introsort_loop<unsigned long*, int>(unsigned long*, unsigned long*, int)>
    void
    __introsort_loop(_RandomAccessIterator __first,
		     _RandomAccessIterator __last,
		     _Size __depth_limit)
    {
      while (__last - __first > int(_S_threshold))
   12522:	ebc8 0307 	rsb	r3, r8, r7
   12526:	2b43      	cmp	r3, #67	; 0x43
   12528:	dcd1      	bgt.n	124ce <void std::__introsort_loop<unsigned long*, int>(unsigned long*, unsigned long*, int)+0x16>
   1252a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1252e:	bf00      	nop

00012530 <Thermistor::update()>:
void Thermistor::init() {
  current_temp = 0;
	initAnalogPin(analog_pin);
}

Thermistor::SensorState Thermistor::update() {
   12530:	b530      	push	{r4, r5, lr}
   12532:	b08b      	sub	sp, #44	; 0x2c
   12534:	4604      	mov	r4, r0
//	xprintf("Thermistor::SensorState Thermistor::update()" "\n",analog_pin);
	int16_t temp;
	bool valid;

//	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		valid = raw_valid;
   12536:	7a85      	ldrb	r5, [r0, #10]
		temp = raw_value;
   12538:	8903      	ldrh	r3, [r0, #8]

		// Invalidate the result now that we have read it
		if (raw_valid) {
   1253a:	7a83      	ldrb	r3, [r0, #10]
   1253c:	b113      	cbz	r3, 12544 <Thermistor::update()+0x14>
			raw_valid = false;
   1253e:	f04f 0300 	mov.w	r3, #0
   12542:	7283      	strb	r3, [r0, #10]
                }
//	}

	// initiate next read
	if (!startAnalogRead(analog_pin,&raw_value, &raw_valid)) return SS_ADC_BUSY;
   12544:	79a0      	ldrb	r0, [r4, #6]
   12546:	f104 0108 	add.w	r1, r4, #8
   1254a:	f104 020a 	add.w	r2, r4, #10
   1254e:	f7fe fc5d 	bl	10e0c <startAnalogRead(unsigned char, short volatile*, bool volatile*)>
   12552:	2800      	cmp	r0, #0
   12554:	d04a      	beq.n	125ec <Thermistor::update()+0xbc>

	// If we haven't gotten data yet, return.
	if (!valid) return SS_ADC_WAITING;
   12556:	f04f 0002 	mov.w	r0, #2
   1255a:	2d00      	cmp	r5, #0
   1255c:	d048      	beq.n	125f0 <Thermistor::update()+0xc0>

	// my filter
	uint32_t sort_table[SAMPLE_COUNT];
	static uint32_t adc_table_index = 0;
	static uint32_t adc_previous_samples[SAMPLE_COUNT];
	adc_previous_samples[adc_table_index]=raw_value;
   1255e:	f641 2314 	movw	r3, #6676	; 0x1a14
   12562:	f2c1 0300 	movt	r3, #4096	; 0x1000
   12566:	6819      	ldr	r1, [r3, #0]
   12568:	8920      	ldrh	r0, [r4, #8]
   1256a:	f641 12f0 	movw	r2, #6640	; 0x19f0
   1256e:	f2c1 0200 	movt	r2, #4096	; 0x1000
   12572:	b200      	sxth	r0, r0
   12574:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	adc_table_index++;
   12578:	f101 0201 	add.w	r2, r1, #1
   1257c:	601a      	str	r2, [r3, #0]
	if (adc_table_index==SAMPLE_COUNT)
   1257e:	2a09      	cmp	r2, #9
		adc_table_index=0;
   12580:	bf01      	itttt	eq
   12582:	f641 2314 	movweq	r3, #6676	; 0x1a14
   12586:	f2c1 0300 	movteq	r3, #4096	; 0x1000
   1258a:	2200      	moveq	r2, #0
   1258c:	601a      	streq	r2, [r3, #0]
void Thermistor::init() {
  current_temp = 0;
	initAnalogPin(analog_pin);
}

Thermistor::SensorState Thermistor::update() {
   1258e:	f04f 0300 	mov.w	r3, #0
	adc_previous_samples[adc_table_index]=raw_value;
	adc_table_index++;
	if (adc_table_index==SAMPLE_COUNT)
		adc_table_index=0;
	for (uint8_t i=0;i<SAMPLE_COUNT;i++)
		sort_table[i]=adc_previous_samples[i];
   12592:	f641 10f0 	movw	r0, #6640	; 0x19f0
   12596:	f2c1 0000 	movt	r0, #4096	; 0x1000
   1259a:	5819      	ldr	r1, [r3, r0]
   1259c:	aa01      	add	r2, sp, #4
   1259e:	5099      	str	r1, [r3, r2]
   125a0:	f103 0304 	add.w	r3, r3, #4
	static uint32_t adc_previous_samples[SAMPLE_COUNT];
	adc_previous_samples[adc_table_index]=raw_value;
	adc_table_index++;
	if (adc_table_index==SAMPLE_COUNT)
		adc_table_index=0;
	for (uint8_t i=0;i<SAMPLE_COUNT;i++)
   125a4:	2b24      	cmp	r3, #36	; 0x24
   125a6:	d1f8      	bne.n	1259a <Thermistor::update()+0x6a>
      __glibcxx_function_requires(_LessThanComparableConcept<_ValueType>)
      __glibcxx_requires_valid_range(__first, __last);

      if (__first != __last)
	{
	  std::__introsort_loop(__first, __last,
   125a8:	4610      	mov	r0, r2
   125aa:	a90a      	add	r1, sp, #40	; 0x28
   125ac:	f04f 0206 	mov.w	r2, #6
   125b0:	f7ff ff82 	bl	124b8 <void std::__introsort_loop<unsigned long*, int>(unsigned long*, unsigned long*, int)>
				std::__lg(__last - __first) * 2);
	  std::__final_insertion_sort(__first, __last);
   125b4:	a801      	add	r0, sp, #4
   125b6:	a90a      	add	r1, sp, #40	; 0x28
   125b8:	f7ff febc 	bl	12334 <void std::__final_insertion_sort<unsigned long*>(unsigned long*, unsigned long*)>
		sort_table[i]=adc_previous_samples[i];
	std::sort(sort_table, sort_table+SAMPLE_COUNT);
	temp = sort_table[4];
   125bc:	f8bd 0014 	ldrh.w	r0, [sp, #20]

	// TODO: The raw_value appears to be 0 the first time this loop is run,
	//       which causes this failsafe to trigger unnecessarily. Disabling
	//       for now, since it doesn't work for ABP/HBP thermistors.
	if ((temp > ADC_RANGE - 2) || (temp < 2)) {
   125c0:	f1a0 0202 	sub.w	r2, r0, #2
   125c4:	b292      	uxth	r2, r2
   125c6:	f640 73fc 	movw	r3, #4092	; 0xffc
   125ca:	429a      	cmp	r2, r3
                current_temp = BAD_TEMPERATURE;	// Set the temperature to 1024 as an error condition
   125cc:	bf82      	ittt	hi
   125ce:	f44f 6380 	movhi.w	r3, #1024	; 0x400
   125d2:	80a3      	strhhi	r3, [r4, #4]
		return SS_ERROR_UNPLUGGED;
   125d4:	2003      	movhi	r0, #3
	temp = sort_table[4];

	// TODO: The raw_value appears to be 0 the first time this loop is run,
	//       which causes this failsafe to trigger unnecessarily. Disabling
	//       for now, since it doesn't work for ABP/HBP thermistors.
	if ((temp > ADC_RANGE - 2) || (temp < 2)) {
   125d6:	d80b      	bhi.n	125f0 <Thermistor::update()+0xc0>
	}

//	int16_t avg = cumulative / SAMPLE_COUNT;

	//current_temp = thermistorToCelsius(avg,table_index);
	current_temp = thermistorToCelsius(temp,table_index);
   125d8:	b200      	sxth	r0, r0
   125da:	f994 101f 	ldrsb.w	r1, [r4, #31]
   125de:	f000 f809 	bl	125f4 <thermistorToCelsius(short, signed char)>
   125e2:	b280      	uxth	r0, r0
   125e4:	80a0      	strh	r0, [r4, #4]
	return SS_OK;
   125e6:	f04f 0000 	mov.w	r0, #0
   125ea:	e001      	b.n	125f0 <Thermistor::update()+0xc0>
			raw_valid = false;
                }
//	}

	// initiate next read
	if (!startAnalogRead(analog_pin,&raw_value, &raw_valid)) return SS_ADC_BUSY;
   125ec:	f04f 0001 	mov.w	r0, #1
//	int16_t avg = cumulative / SAMPLE_COUNT;

	//current_temp = thermistorToCelsius(avg,table_index);
	current_temp = thermistorToCelsius(temp,table_index);
	return SS_OK;
}
   125f0:	b00b      	add	sp, #44	; 0x2c
   125f2:	bd30      	pop	{r4, r5, pc}

000125f4 <thermistorToCelsius(short, signed char)>:
//		memcpy_P(&rv, (const void*)&(default_therm_table[entryIdx]), sizeof(Entry));
	}
	return rv;
}

int16_t thermistorToCelsius(int16_t reading, int8_t table_idx) {
   125f4:	b4f0      	push	{r4, r5, r6, r7}
  int8_t bottom = 0;
  int8_t top = NUMTEMPS-1;
  int8_t mid = (bottom+top)/2;
   125f6:	f04f 030f 	mov.w	r3, #15
	return rv;
}

int16_t thermistorToCelsius(int16_t reading, int8_t table_idx) {
  int8_t bottom = 0;
  int8_t top = NUMTEMPS-1;
   125fa:	f04f 061e 	mov.w	r6, #30
	}
	return rv;
}

int16_t thermistorToCelsius(int16_t reading, int8_t table_idx) {
  int8_t bottom = 0;
   125fe:	f04f 0100 	mov.w	r1, #0
//		}
//		offset += sizeof(Entry) * entryIdx;				//TODO: Fix if if(0) changes
//		eeprom_read_block(&rv,(const void*)offset,sizeof(Entry)); //TODO: Fix if if(0) changes
	} else {
		// get from progmem
		rv.adc = default_therm_table[entryIdx].adc;
   12602:	f64b 6540 	movw	r5, #48704	; 0xbe40
   12606:	f2c0 0502 	movt	r5, #2
   1260a:	b25a      	sxtb	r2, r3
  int8_t t;
  Entry e;
  while (mid > bottom) {
	  t = mid;
	  e = getEntry(mid,table_idx);
	  if (reading < e.adc) {
   1260c:	f935 4022 	ldrsh.w	r4, [r5, r2, lsl #2]
   12610:	4284      	cmp	r4, r0
		  top = mid;
		  mid = (bottom+top)/2;
   12612:	bfc1      	itttt	gt
   12614:	b24c      	sxtbgt	r4, r1
   12616:	18a2      	addgt	r2, r4, r2
   12618:	eb02 72d2 	addgt.w	r2, r2, r2, lsr #31
   1261c:	461e      	movgt	r6, r3
	  } else {
		  bottom = mid;
		  mid = (bottom+top)/2;
   1261e:	bfdf      	itttt	le
   12620:	b271      	sxtble	r1, r6
   12622:	188a      	addle	r2, r1, r2
   12624:	eb02 72d2 	addle.w	r2, r2, r2, lsr #31
   12628:	4619      	movle	r1, r3
   1262a:	f3c2 0347 	ubfx	r3, r2, #1, #8
  int8_t bottom = 0;
  int8_t top = NUMTEMPS-1;
  int8_t mid = (bottom+top)/2;
  int8_t t;
  Entry e;
  while (mid > bottom) {
   1262e:	b25c      	sxtb	r4, r3
   12630:	b24a      	sxtb	r2, r1
   12632:	4294      	cmp	r4, r2
   12634:	dce9      	bgt.n	1260a <thermistorToCelsius(short, signed char)+0x16>
//		}
//		offset += sizeof(Entry) * entryIdx;				//TODO: Fix if if(0) changes
//		eeprom_read_block(&rv,(const void*)offset,sizeof(Entry)); //TODO: Fix if if(0) changes
	} else {
		// get from progmem
		rv.adc = default_therm_table[entryIdx].adc;
   12636:	f64b 6340 	movw	r3, #48704	; 0xbe40
   1263a:	f2c0 0302 	movt	r3, #2
   1263e:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
		rv.value = default_therm_table[entryIdx].value;
   12642:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   12646:	8854      	ldrh	r4, [r2, #2]
//		}
//		offset += sizeof(Entry) * entryIdx;				//TODO: Fix if if(0) changes
//		eeprom_read_block(&rv,(const void*)offset,sizeof(Entry)); //TODO: Fix if if(0) changes
	} else {
		// get from progmem
		rv.adc = default_therm_table[entryIdx].adc;
   12648:	b272      	sxtb	r2, r6
   1264a:	f833 7022 	ldrh.w	r7, [r3, r2, lsl #2]
		rv.value = default_therm_table[entryIdx].value;
   1264e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   12652:	885b      	ldrh	r3, [r3, #2]
		  mid = (bottom+top)/2;
	  }
  }
  Entry eb = getEntry(bottom,table_idx);
  Entry et = getEntry(top,table_idx);
  if (bottom == 0 && reading < eb.adc) {
   12654:	b921      	cbnz	r1, 12660 <thermistorToCelsius(short, signed char)+0x6c>
   12656:	b22a      	sxth	r2, r5
   12658:	4290      	cmp	r0, r2
	  // out of scale; safety mode
	  return 255;
   1265a:	bfb8      	it	lt
   1265c:	20ff      	movlt	r0, #255	; 0xff
		  mid = (bottom+top)/2;
	  }
  }
  Entry eb = getEntry(bottom,table_idx);
  Entry et = getEntry(top,table_idx);
  if (bottom == 0 && reading < eb.adc) {
   1265e:	db18      	blt.n	12692 <thermistorToCelsius(short, signed char)+0x9e>
	  // out of scale; safety mode
	  return 255;
  }
  if (top == NUMTEMPS-1 && reading > et.adc) {
   12660:	b276      	sxtb	r6, r6
   12662:	2e1e      	cmp	r6, #30
   12664:	d104      	bne.n	12670 <thermistorToCelsius(short, signed char)+0x7c>
   12666:	b23a      	sxth	r2, r7
   12668:	4290      	cmp	r0, r2
	  // out of scale; safety mode
	  return 255;
   1266a:	bfc8      	it	gt
   1266c:	20ff      	movgt	r0, #255	; 0xff
  Entry et = getEntry(top,table_idx);
  if (bottom == 0 && reading < eb.adc) {
	  // out of scale; safety mode
	  return 255;
  }
  if (top == NUMTEMPS-1 && reading > et.adc) {
   1266e:	dc10      	bgt.n	12692 <thermistorToCelsius(short, signed char)+0x9e>
	  // out of scale; safety mode
	  return 255;
  }

  int16_t celsius  = eb.value +
		  ((reading - eb.adc) * (et.value - eb.value)) / (et.adc - eb.adc);
   12670:	b22d      	sxth	r5, r5
   12672:	1b40      	subs	r0, r0, r5
   12674:	b21b      	sxth	r3, r3
   12676:	b222      	sxth	r2, r4
   12678:	1a9b      	subs	r3, r3, r2
   1267a:	fb03 f000 	mul.w	r0, r3, r0
   1267e:	b23f      	sxth	r7, r7
   12680:	1b7d      	subs	r5, r7, r5
   12682:	fb90 f0f5 	sdiv	r0, r0, r5
   12686:	1900      	adds	r0, r0, r4
   12688:	b200      	sxth	r0, r0
   1268a:	28ff      	cmp	r0, #255	; 0xff
   1268c:	bfa8      	it	ge
   1268e:	20ff      	movge	r0, #255	; 0xff
   12690:	b280      	uxth	r0, r0
  if (celsius > 255)
	  celsius = 255;
  return celsius;
}
   12692:	b200      	sxth	r0, r0
   12694:	bcf0      	pop	{r4, r5, r6, r7}
   12696:	4770      	bx	lr

00012698 <isTableSet(unsigned short)>:
//	const void* offset = (const void*)off;
	uint8_t first_byte;
//	first_byte = (uint8_t)(eeprom_address(EEPROM_START_ADDRESS, off));
//	eeprom_read_block(&first_byte,offset,1);
	return first_byte != 0xff;
}
   12698:	f04f 0001 	mov.w	r0, #1
   1269c:	4770      	bx	lr
   1269e:	bf00      	nop

000126a0 <initThermistorTables()>:


void initThermistorTables() {
   126a0:	b508      	push	{r3, lr}
	has_table[0] = isTableSet(eeprom_offsets::THERM_TABLE + therm_eeprom_offsets::THERM_DATA_OFFSET);
   126a2:	f04f 0084 	mov.w	r0, #132	; 0x84
   126a6:	f7ff fff7 	bl	12698 <isTableSet(unsigned short)>
   126aa:	f641 231c 	movw	r3, #6684	; 0x1a1c
   126ae:	f2c1 0300 	movt	r3, #4096	; 0x1000
   126b2:	7018      	strb	r0, [r3, #0]
	//has_table[1] = isTableSet(eeprom::THERM_TABLE_1 + eeprom::THERM_DATA_OFFSET);
}
   126b4:	bd08      	pop	{r3, pc}
   126b6:	bf00      	nop

000126b8 <_GLOBAL__sub_I_default_therm_table>:
   126b8:	b508      	push	{r3, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
   126ba:	f641 2018 	movw	r0, #6680	; 0x1a18
   126be:	f2c1 0000 	movt	r0, #4096	; 0x1000
   126c2:	f04f 0100 	mov.w	r1, #0
   126c6:	f7ff fab9 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
   126ca:	f641 2020 	movw	r0, #6688	; 0x1a20
   126ce:	f2c1 0000 	movt	r0, #4096	; 0x1000
   126d2:	f04f 0101 	mov.w	r1, #1
   126d6:	f7ff fab1 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
   126da:	f641 2024 	movw	r0, #6692	; 0x1a24
   126de:	f2c1 0000 	movt	r0, #4096	; 0x1000
   126e2:	f04f 0102 	mov.w	r1, #2
   126e6:	f7ff faa9 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
   126ea:	f641 2028 	movw	r0, #6696	; 0x1a28
   126ee:	f2c1 0000 	movt	r0, #4096	; 0x1000
   126f2:	f04f 0103 	mov.w	r1, #3
   126f6:	f7ff faa1 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
   126fa:	f641 202c 	movw	r0, #6700	; 0x1a2c
   126fe:	f2c1 0000 	movt	r0, #4096	; 0x1000
   12702:	f04f 0104 	mov.w	r1, #4
   12706:	f7ff fa99 	bl	11c3c <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
   1270a:	f641 2030 	movw	r0, #6704	; 0x1a30
   1270e:	f2c1 0000 	movt	r0, #4096	; 0x1000
   12712:	f04f 01ff 	mov.w	r1, #255	; 0xff
   12716:	f7ff fa91 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
   1271a:	bd08      	pop	{r3, pc}

0001271c <_GLOBAL__sub_I__ZN12ThermocoupleC2E3PinS0_S0_>:
	  return SS_ERROR_UNPLUGGED;
	}

	current_temp = raw;
	return SS_OK;
}
   1271c:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
   1271e:	f641 2034 	movw	r0, #6708	; 0x1a34
   12722:	f2c1 0000 	movt	r0, #4096	; 0x1000
   12726:	f04f 0100 	mov.w	r1, #0
   1272a:	f7ff fa87 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
   1272e:	f641 2038 	movw	r0, #6712	; 0x1a38
   12732:	f2c1 0000 	movt	r0, #4096	; 0x1000
   12736:	f04f 0101 	mov.w	r1, #1
   1273a:	f7ff fa7f 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
   1273e:	f641 203c 	movw	r0, #6716	; 0x1a3c
   12742:	f2c1 0000 	movt	r0, #4096	; 0x1000
   12746:	f04f 0102 	mov.w	r1, #2
   1274a:	f7ff fa77 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
   1274e:	f641 2040 	movw	r0, #6720	; 0x1a40
   12752:	f2c1 0000 	movt	r0, #4096	; 0x1000
   12756:	f04f 0103 	mov.w	r1, #3
   1275a:	f7ff fa6f 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
   1275e:	f641 2044 	movw	r0, #6724	; 0x1a44
   12762:	f2c1 0000 	movt	r0, #4096	; 0x1000
   12766:	f04f 0104 	mov.w	r1, #4
   1276a:	f7ff fa67 	bl	11c3c <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
   1276e:	f641 2448 	movw	r4, #6728	; 0x1a48
   12772:	f2c1 0400 	movt	r4, #4096	; 0x1000
   12776:	4620      	mov	r0, r4
   12778:	f04f 01ff 	mov.w	r1, #255	; 0xff
   1277c:	f7ff fa5e 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
   12780:	f641 204c 	movw	r0, #6732	; 0x1a4c
   12784:	f2c1 0000 	movt	r0, #4096	; 0x1000
   12788:	4621      	mov	r1, r4
   1278a:	f04f 0200 	mov.w	r2, #0
   1278e:	f7ff fc67 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
   12792:	bd10      	pop	{r4, pc}

00012794 <Timeout::Timeout()>:
    #include "Motherboard.hh"

    inline micros_t getMicros() { return Motherboard::getBoard().getCurrentMicros(); }
#endif

Timeout::Timeout() : active(false), elapsed(false) {}
   12794:	f04f 0200 	mov.w	r2, #0
   12798:	7002      	strb	r2, [r0, #0]
   1279a:	7042      	strb	r2, [r0, #1]
   1279c:	4770      	bx	lr
   1279e:	bf00      	nop

000127a0 <Timeout::start(unsigned long)>:

void Timeout::start(micros_t duration_micros_in) {
   127a0:	b570      	push	{r4, r5, r6, lr}
   127a2:	4604      	mov	r4, r0
   127a4:	460e      	mov	r6, r1
	active = true;
   127a6:	f04f 0301 	mov.w	r3, #1
   127aa:	7003      	strb	r3, [r0, #0]
	is_paused = false;
   127ac:	f04f 0500 	mov.w	r5, #0
   127b0:	7085      	strb	r5, [r0, #2]
	elapsed = false;
   127b2:	7045      	strb	r5, [r0, #1]

	inline micros_t getMicros() { return ExtruderBoard::getBoard().getCurrentMicros(); }
#else
    #include "Motherboard.hh"

    inline micros_t getMicros() { return Motherboard::getBoard().getCurrentMicros(); }
   127b4:	f640 509c 	movw	r0, #3484	; 0xd9c
   127b8:	f2c1 0000 	movt	r0, #4096	; 0x1000
   127bc:	f7f9 f97c 	bl	bab8 <Motherboard::getCurrentMicros()>

void Timeout::start(micros_t duration_micros_in) {
	active = true;
	is_paused = false;
	elapsed = false;
    start_stamp_micros = getMicros();
   127c0:	6060      	str	r0, [r4, #4]
	duration_micros = duration_micros_in;
   127c2:	60a6      	str	r6, [r4, #8]
	pause_micros = 0;
   127c4:	60e5      	str	r5, [r4, #12]
}
   127c6:	bd70      	pop	{r4, r5, r6, pc}

000127c8 <Timeout::hasElapsed()>:

bool Timeout::hasElapsed() {
   127c8:	b510      	push	{r4, lr}
   127ca:	4604      	mov	r4, r0
	if (active && !elapsed && !is_paused) {
   127cc:	7803      	ldrb	r3, [r0, #0]
   127ce:	b193      	cbz	r3, 127f6 <Timeout::hasElapsed()+0x2e>
   127d0:	7843      	ldrb	r3, [r0, #1]
   127d2:	b983      	cbnz	r3, 127f6 <Timeout::hasElapsed()+0x2e>
   127d4:	7883      	ldrb	r3, [r0, #2]
   127d6:	b973      	cbnz	r3, 127f6 <Timeout::hasElapsed()+0x2e>

	inline micros_t getMicros() { return ExtruderBoard::getBoard().getCurrentMicros(); }
#else
    #include "Motherboard.hh"

    inline micros_t getMicros() { return Motherboard::getBoard().getCurrentMicros(); }
   127d8:	f640 509c 	movw	r0, #3484	; 0xd9c
   127dc:	f2c1 0000 	movt	r0, #4096	; 0x1000
   127e0:	f7f9 f96a 	bl	bab8 <Motherboard::getCurrentMicros()>
	pause_micros = 0;
}

bool Timeout::hasElapsed() {
	if (active && !elapsed && !is_paused) {
                micros_t delta = getMicros() - start_stamp_micros;
   127e4:	6863      	ldr	r3, [r4, #4]
   127e6:	1ac3      	subs	r3, r0, r3
		if (delta >= duration_micros) {
   127e8:	68a2      	ldr	r2, [r4, #8]
   127ea:	4293      	cmp	r3, r2
			active = false;
   127ec:	bf21      	itttt	cs
   127ee:	2300      	movcs	r3, #0
   127f0:	7023      	strbcs	r3, [r4, #0]
			elapsed = true;
   127f2:	2301      	movcs	r3, #1
   127f4:	7063      	strbcs	r3, [r4, #1]
		}
	}
	return elapsed;
}
   127f6:	7860      	ldrb	r0, [r4, #1]
   127f8:	bd10      	pop	{r4, pc}
   127fa:	bf00      	nop

000127fc <Timeout::abort()>:

void Timeout::abort() {
	active = false;
   127fc:	f04f 0300 	mov.w	r3, #0
   12800:	7003      	strb	r3, [r0, #0]
}
   12802:	4770      	bx	lr

00012804 <Timeout::clear()>:
void Timeout::clear(){
	elapsed = false;
   12804:	f04f 0300 	mov.w	r3, #0
   12808:	7043      	strb	r3, [r0, #1]
}
   1280a:	4770      	bx	lr

0001280c <Timeout::pause(bool)>:
void Timeout::pause(bool pause_in){
   1280c:	b510      	push	{r4, lr}
   1280e:	4604      	mov	r4, r0

	/// don't update time or state if we are already in the desired state
	if (is_paused != pause_in){
   12810:	7883      	ldrb	r3, [r0, #2]
   12812:	428b      	cmp	r3, r1
   12814:	d014      	beq.n	12840 <Timeout::pause(bool)+0x34>
		
		is_paused = pause_in;
   12816:	7081      	strb	r1, [r0, #2]

		if(pause_in){
   12818:	b149      	cbz	r1, 1282e <Timeout::pause(bool)+0x22>

	inline micros_t getMicros() { return ExtruderBoard::getBoard().getCurrentMicros(); }
#else
    #include "Motherboard.hh"

    inline micros_t getMicros() { return Motherboard::getBoard().getCurrentMicros(); }
   1281a:	f640 509c 	movw	r0, #3484	; 0xd9c
   1281e:	f2c1 0000 	movt	r0, #4096	; 0x1000
   12822:	f7f9 f949 	bl	bab8 <Motherboard::getCurrentMicros()>
	if (is_paused != pause_in){
		
		is_paused = pause_in;

		if(pause_in){
			pause_micros = getMicros() - start_stamp_micros;
   12826:	6863      	ldr	r3, [r4, #4]
   12828:	1ac3      	subs	r3, r0, r3
   1282a:	60e3      	str	r3, [r4, #12]
   1282c:	bd10      	pop	{r4, pc}

	inline micros_t getMicros() { return ExtruderBoard::getBoard().getCurrentMicros(); }
#else
    #include "Motherboard.hh"

    inline micros_t getMicros() { return Motherboard::getBoard().getCurrentMicros(); }
   1282e:	f640 509c 	movw	r0, #3484	; 0xd9c
   12832:	f2c1 0000 	movt	r0, #4096	; 0x1000
   12836:	f7f9 f93f 	bl	bab8 <Motherboard::getCurrentMicros()>
		is_paused = pause_in;

		if(pause_in){
			pause_micros = getMicros() - start_stamp_micros;
		}else{
			start_stamp_micros = getMicros() - pause_micros;
   1283a:	68e3      	ldr	r3, [r4, #12]
   1283c:	1ac3      	subs	r3, r0, r3
   1283e:	6063      	str	r3, [r4, #4]
   12840:	bd10      	pop	{r4, pc}
   12842:	bf00      	nop

00012844 <Timeout::getCurrentElapsed()>:
		}
	}

}

micros_t Timeout::getCurrentElapsed(){
   12844:	b510      	push	{r4, lr}
   12846:	4604      	mov	r4, r0
	if(active){
   12848:	7803      	ldrb	r3, [r0, #0]
   1284a:	b163      	cbz	r3, 12866 <Timeout::getCurrentElapsed()+0x22>
		if(is_paused){
   1284c:	7883      	ldrb	r3, [r0, #2]
   1284e:	b10b      	cbz	r3, 12854 <Timeout::getCurrentElapsed()+0x10>
			return pause_micros;
   12850:	68c0      	ldr	r0, [r0, #12]
   12852:	bd10      	pop	{r4, pc}

	inline micros_t getMicros() { return ExtruderBoard::getBoard().getCurrentMicros(); }
#else
    #include "Motherboard.hh"

    inline micros_t getMicros() { return Motherboard::getBoard().getCurrentMicros(); }
   12854:	f640 509c 	movw	r0, #3484	; 0xd9c
   12858:	f2c1 0000 	movt	r0, #4096	; 0x1000
   1285c:	f7f9 f92c 	bl	bab8 <Motherboard::getCurrentMicros()>
micros_t Timeout::getCurrentElapsed(){
	if(active){
		if(is_paused){
			return pause_micros;
		}else{
			return getMicros() - start_stamp_micros;
   12860:	6863      	ldr	r3, [r4, #4]
   12862:	1ac0      	subs	r0, r0, r3
   12864:	bd10      	pop	{r4, pc}
		}
	}else{
		return 0;
   12866:	f04f 0000 	mov.w	r0, #0
	}
}
   1286a:	bd10      	pop	{r4, pc}

0001286c <_GLOBAL__sub_I__ZN7TimeoutC2Ev>:
   1286c:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
   1286e:	f641 2054 	movw	r0, #6740	; 0x1a54
   12872:	f2c1 0000 	movt	r0, #4096	; 0x1000
   12876:	f04f 0100 	mov.w	r1, #0
   1287a:	f7ff f9df 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
   1287e:	f641 2058 	movw	r0, #6744	; 0x1a58
   12882:	f2c1 0000 	movt	r0, #4096	; 0x1000
   12886:	f04f 0101 	mov.w	r1, #1
   1288a:	f7ff f9d7 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
   1288e:	f641 205c 	movw	r0, #6748	; 0x1a5c
   12892:	f2c1 0000 	movt	r0, #4096	; 0x1000
   12896:	f04f 0102 	mov.w	r1, #2
   1289a:	f7ff f9cf 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
   1289e:	f641 2060 	movw	r0, #6752	; 0x1a60
   128a2:	f2c1 0000 	movt	r0, #4096	; 0x1000
   128a6:	f04f 0103 	mov.w	r1, #3
   128aa:	f7ff f9c7 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
   128ae:	f641 2064 	movw	r0, #6756	; 0x1a64
   128b2:	f2c1 0000 	movt	r0, #4096	; 0x1000
   128b6:	f04f 0104 	mov.w	r1, #4
   128ba:	f7ff f9bf 	bl	11c3c <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
   128be:	f641 2468 	movw	r4, #6760	; 0x1a68
   128c2:	f2c1 0400 	movt	r4, #4096	; 0x1000
   128c6:	4620      	mov	r0, r4
   128c8:	f04f 01ff 	mov.w	r1, #255	; 0xff
   128cc:	f7ff f9b6 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
   128d0:	f641 206c 	movw	r0, #6764	; 0x1a6c
   128d4:	f2c1 0000 	movt	r0, #4096	; 0x1000
   128d8:	4621      	mov	r1, r4
   128da:	f04f 0200 	mov.w	r2, #0
   128de:	f7ff fbbf 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
   128e2:	bd10      	pop	{r4, pc}

000128e4 <UART::init_serial()>:
    #endif

#endif
*/

void UART::init_serial() {
   128e4:	b570      	push	{r4, r5, r6, lr}
   128e6:	b084      	sub	sp, #16
    if(index_ == RS232) {
   128e8:	7843      	ldrb	r3, [r0, #1]
   128ea:	b9ab      	cbnz	r3, 12918 <UART::init_serial()+0x34>
    	xprintf("USB_Init" " (%s:%d)\n",_F_,_L_);
   128ec:	4c2e      	ldr	r4, [pc, #184]	; (129a8 <UART::init_serial()+0xc4>)
   128ee:	f64b 60bc 	movw	r0, #48828	; 0xbebc
   128f2:	f2c0 0002 	movt	r0, #2
   128f6:	4621      	mov	r1, r4
   128f8:	f04f 0295 	mov.w	r2, #149	; 0x95
   128fc:	f7f4 f82a 	bl	6954 <xprintf>
    	USB_Init();
   12900:	f7f3 fa18 	bl	5d34 <USB_Init>
    	xprintf("b4 USB config" " (%s:%d)\n",_F_,_L_);
   12904:	f64b 60f0 	movw	r0, #48880	; 0xbef0
   12908:	f2c0 0002 	movt	r0, #2
   1290c:	4621      	mov	r1, r4
   1290e:	f04f 0297 	mov.w	r2, #151	; 0x97
   12912:	f7f4 f81f 	bl	6954 <xprintf>
   12916:	e03b      	b.n	12990 <UART::init_serial()+0xac>
 //   		xprintf("b4 USB config" " (%s:%d)\n",_F_,_L_);
 //   	}
    }
#if HAS_SLAVE_UART
    else {
    	xprintf("rs485" " (%s:%d)\n",_F_,_L_);
   12918:	f64b 7008 	movw	r0, #48904	; 0xbf08
   1291c:	f2c0 0002 	movt	r0, #2
   12920:	4921      	ldr	r1, [pc, #132]	; (129a8 <UART::init_serial()+0xc4>)
   12922:	f04f 029e 	mov.w	r2, #158	; 0x9e
   12926:	f7f4 f815 	bl	6954 <xprintf>
		// UART Configuration Structure
		UART_CFG_Type u_cfg;
		u_cfg.Baud_rate = 38400;
   1292a:	f44f 4316 	mov.w	r3, #38400	; 0x9600
   1292e:	9300      	str	r3, [sp, #0]
		u_cfg.Databits = UART_DATABIT_8;
   12930:	f04f 0303 	mov.w	r3, #3
   12934:	f88d 3005 	strb.w	r3, [sp, #5]
		u_cfg.Parity = UART_PARITY_NONE;
   12938:	f04f 0400 	mov.w	r4, #0
   1293c:	f88d 4004 	strb.w	r4, [sp, #4]
		u_cfg.Stopbits = UART_STOPBIT_1;
   12940:	f88d 4006 	strb.w	r4, [sp, #6]
		UART_Init((LPC_UART_TypeDef *)LPC_UART1, &u_cfg);
   12944:	4620      	mov	r0, r4
   12946:	f2c4 0001 	movt	r0, #16385	; 0x4001
   1294a:	4669      	mov	r1, sp
   1294c:	f7f1 fc7c 	bl	4248 <UART_Init>
		// Initialize UART0 pin connect
		PINSEL_CFG_Type PinCfg;
		PinCfg.Funcnum = 1;
   12950:	f04f 0601 	mov.w	r6, #1
   12954:	f88d 600a 	strb.w	r6, [sp, #10]
		PinCfg.OpenDrain = 0;
   12958:	f88d 400c 	strb.w	r4, [sp, #12]
		PinCfg.Pinmode = 0;
   1295c:	f88d 400b 	strb.w	r4, [sp, #11]
		PinCfg.Pinnum = 0;
   12960:	f88d 4009 	strb.w	r4, [sp, #9]
		PinCfg.Portnum = 0;
   12964:	ad04      	add	r5, sp, #16
   12966:	f805 4d08 	strb.w	r4, [r5, #-8]!
		PINSEL_ConfigPin(&PinCfg);
   1296a:	4628      	mov	r0, r5
   1296c:	f7f0 fdda 	bl	3524 <PINSEL_ConfigPin>
		PinCfg.Pinnum = 1;
   12970:	f88d 6009 	strb.w	r6, [sp, #9]
		PINSEL_ConfigPin(&PinCfg);
   12974:	4628      	mov	r0, r5
   12976:	f7f0 fdd5 	bl	3524 <PINSEL_ConfigPin>
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   1297a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
   1297e:	f2ce 0300 	movt	r3, #57344	; 0xe000
   12982:	f04f 0248 	mov.w	r2, #72	; 0x48
   12986:	f883 2306 	strb.w	r2, [r3, #774]	; 0x306

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   1298a:	f04f 0240 	mov.w	r2, #64	; 0x40
   1298e:	601a      	str	r2, [r3, #0]
		NVIC_SetPriority(UART1_IRQn, 9);
		NVIC_EnableIRQ(UART1_IRQn);
    }
#endif
    xprintf("end UART::init_serial" " (%s:%d)\n",_F_,_L_);
   12990:	f64b 7018 	movw	r0, #48920	; 0xbf18
   12994:	f2c0 0002 	movt	r0, #2
   12998:	4903      	ldr	r1, [pc, #12]	; (129a8 <UART::init_serial()+0xc4>)
   1299a:	f04f 02b4 	mov.w	r2, #180	; 0xb4
   1299e:	f7f3 ffd9 	bl	6954 <xprintf>
}
   129a2:	b004      	add	sp, #16
   129a4:	bd70      	pop	{r4, r5, r6, pc}
   129a6:	bf00      	nop
   129a8:	0002bee7 	.word	0x0002bee7

000129ac <UART::UART(unsigned char, communication_mode)>:
// Transition to a transmitting state
inline void speak() {
    TX_Enable.setValue(true);
}

UART::UART(uint8_t index, communication_mode mode) :
   129ac:	b510      	push	{r4, lr}
   129ae:	4604      	mov	r4, r0
    mode_(mode),
    index_(index),
    enabled_(false) {
   129b0:	7002      	strb	r2, [r0, #0]
   129b2:	7041      	strb	r1, [r0, #1]
   129b4:	f04f 0300 	mov.w	r3, #0
   129b8:	7083      	strb	r3, [r0, #2]
   129ba:	f100 0003 	add.w	r0, r0, #3
   129be:	f7ff f9e1 	bl	11d84 <InPacket::InPacket()>
   129c2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   129c6:	f7ff fa49 	bl	11e5c <OutPacket::OutPacket()>

        init_serial();
   129ca:	4620      	mov	r0, r4
   129cc:	f7ff ff8a 	bl	128e4 <UART::init_serial()>

}
   129d0:	4620      	mov	r0, r4
   129d2:	bd10      	pop	{r4, pc}

000129d4 <UART::beginSend()>:

// Subsequent bytes will be triggered by the tx complete interrupt.
void UART::beginSend() {
   129d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
//	xprintf("beginSend()" " (%s:%d)\n",_F_,_L_);
	if (!enabled_) { return; }
   129d8:	7883      	ldrb	r3, [r0, #2]
   129da:	2b00      	cmp	r3, #0
   129dc:	f000 80f0 	beq.w	12bc0 <UART::beginSend()+0x1ec>
	if (index_ == RS232) {		//uart0 eg usb
   129e0:	7843      	ldrb	r3, [r0, #1]
   129e2:	2b00      	cmp	r3, #0
   129e4:	f040 80ac 	bne.w	12b40 <UART::beginSend()+0x16c>
   129e8:	f640 4314 	movw	r3, #3092	; 0xc14
   129ec:	f2c1 0300 	movt	r3, #4096	; 0x1000
   129f0:	681b      	ldr	r3, [r3, #0]
   129f2:	f013 0f01 	tst.w	r3, #1
   129f6:	d115      	bne.n	12a24 <UART::beginSend()+0x50>
   129f8:	f640 4014 	movw	r0, #3092	; 0xc14
   129fc:	f2c1 0000 	movt	r0, #4096	; 0x1000
   12a00:	f002 f842 	bl	14a88 <__cxa_guard_acquire>
   12a04:	b170      	cbz	r0, 12a24 <UART::beginSend()+0x50>
   12a06:	f640 4018 	movw	r0, #3096	; 0xc18
   12a0a:	f2c1 0000 	movt	r0, #4096	; 0x1000
   12a0e:	f04f 0100 	mov.w	r1, #0
   12a12:	460a      	mov	r2, r1
   12a14:	f7ff ffca 	bl	129ac <UART::UART(unsigned char, communication_mode)>
   12a18:	f640 4014 	movw	r0, #3092	; 0xc14
   12a1c:	f2c1 0000 	movt	r0, #4096	; 0x1000
   12a20:	f002 f850 	bl	14ac4 <__cxa_guard_release>
		static unsigned char sendBuffer[64];
		sendBuffer[0] = UART::getHostUART().out.getNextByteToSend();
   12a24:	4867      	ldr	r0, [pc, #412]	; (12bc4 <UART::beginSend()+0x1f0>)
   12a26:	f7ff fa1f 	bl	11e68 <OutPacket::getNextByteToSend()>
   12a2a:	4601      	mov	r1, r0
   12a2c:	f641 23e0 	movw	r3, #6880	; 0x1ae0
   12a30:	f2c1 0300 	movt	r3, #4096	; 0x1000
   12a34:	7018      	strb	r0, [r3, #0]
		xprintf("out %d",sendBuffer[0]);
   12a36:	f64b 7038 	movw	r0, #48952	; 0xbf38
   12a3a:	f2c0 0002 	movt	r0, #2
   12a3e:	f7f3 ff89 	bl	6954 <xprintf>
   12a42:	f640 4414 	movw	r4, #3092	; 0xc14
   12a46:	f2c1 0400 	movt	r4, #4096	; 0x1000
		while (UART::getHostUART().out.isSending()) {
			uint32_t i;
			for (i = 1; i < USB_CDC_BUFSIZE-1; i++){
				sendBuffer[i] = UART::getHostUART().out.getNextByteToSend();
   12a4a:	f8df 8178 	ldr.w	r8, [pc, #376]	; 12bc4 <UART::beginSend()+0x1f0>
	if (!enabled_) { return; }
	if (index_ == RS232) {		//uart0 eg usb
		static unsigned char sendBuffer[64];
		sendBuffer[0] = UART::getHostUART().out.getNextByteToSend();
		xprintf("out %d",sendBuffer[0]);
		while (UART::getHostUART().out.isSending()) {
   12a4e:	e048      	b.n	12ae2 <UART::beginSend()+0x10e>
   12a50:	6823      	ldr	r3, [r4, #0]
   12a52:	f013 0f01 	tst.w	r3, #1
   12a56:	d10c      	bne.n	12a72 <UART::beginSend()+0x9e>
   12a58:	4620      	mov	r0, r4
   12a5a:	f002 f815 	bl	14a88 <__cxa_guard_acquire>
   12a5e:	b140      	cbz	r0, 12a72 <UART::beginSend()+0x9e>
   12a60:	4630      	mov	r0, r6
   12a62:	f04f 0100 	mov.w	r1, #0
   12a66:	460a      	mov	r2, r1
   12a68:	f7ff ffa0 	bl	129ac <UART::UART(unsigned char, communication_mode)>
   12a6c:	4620      	mov	r0, r4
   12a6e:	f002 f829 	bl	14ac4 <__cxa_guard_release>
			uint32_t i;
			for (i = 1; i < USB_CDC_BUFSIZE-1; i++){
				sendBuffer[i] = UART::getHostUART().out.getNextByteToSend();
   12a72:	4640      	mov	r0, r8
   12a74:	f7ff f9f8 	bl	11e68 <OutPacket::getNextByteToSend()>
   12a78:	4601      	mov	r1, r0
   12a7a:	f805 0f01 	strb.w	r0, [r5, #1]!
				xprintf(" %d",sendBuffer[i]);
   12a7e:	f64b 7040 	movw	r0, #48960	; 0xbf40
   12a82:	f2c0 0002 	movt	r0, #2
   12a86:	f7f3 ff65 	bl	6954 <xprintf>
   12a8a:	6823      	ldr	r3, [r4, #0]
   12a8c:	f013 0f01 	tst.w	r3, #1
   12a90:	d10c      	bne.n	12aac <UART::beginSend()+0xd8>
   12a92:	4620      	mov	r0, r4
   12a94:	f001 fff8 	bl	14a88 <__cxa_guard_acquire>
   12a98:	b140      	cbz	r0, 12aac <UART::beginSend()+0xd8>
   12a9a:	4630      	mov	r0, r6
   12a9c:	f04f 0100 	mov.w	r1, #0
   12aa0:	460a      	mov	r2, r1
   12aa2:	f7ff ff83 	bl	129ac <UART::UART(unsigned char, communication_mode)>
   12aa6:	4620      	mov	r0, r4
   12aa8:	f002 f80c 	bl	14ac4 <__cxa_guard_release>
	bool isFinished() const {
		return state == PS_LAST;
	}

	bool isSending() const {
		return state != PS_START && state != PS_LAST;
   12aac:	f896 304b 	ldrb.w	r3, [r6, #75]	; 0x4b
   12ab0:	b16b      	cbz	r3, 12ace <UART::beginSend()+0xfa>
   12ab2:	f896 304b 	ldrb.w	r3, [r6, #75]	; 0x4b
   12ab6:	2b04      	cmp	r3, #4
   12ab8:	d009      	beq.n	12ace <UART::beginSend()+0xfa>
		static unsigned char sendBuffer[64];
		sendBuffer[0] = UART::getHostUART().out.getNextByteToSend();
		xprintf("out %d",sendBuffer[0]);
		while (UART::getHostUART().out.isSending()) {
			uint32_t i;
			for (i = 1; i < USB_CDC_BUFSIZE-1; i++){
   12aba:	f107 0701 	add.w	r7, r7, #1
   12abe:	2f3f      	cmp	r7, #63	; 0x3f
   12ac0:	d1c6      	bne.n	12a50 <UART::beginSend()+0x7c>
				sendBuffer[i] = UART::getHostUART().out.getNextByteToSend();
				xprintf(" %d",sendBuffer[i]);
				if (!UART::getHostUART().out.isSending()) goto skip;
			}
			xprintf("\n");
   12ac2:	f247 50dc 	movw	r0, #30172	; 0x75dc
   12ac6:	f2c0 0002 	movt	r0, #2
   12aca:	f7f3 ff43 	bl	6954 <xprintf>
			skip:
			USB_WriteEP (CDC_DEP_IN, (unsigned char *)&sendBuffer[0], i+1);
   12ace:	f04f 0082 	mov.w	r0, #130	; 0x82
   12ad2:	f641 21e0 	movw	r1, #6880	; 0x1ae0
   12ad6:	f2c1 0100 	movt	r1, #4096	; 0x1000
   12ada:	f107 0201 	add.w	r2, r7, #1
   12ade:	f7f3 fa6f 	bl	5fc0 <USB_WriteEP>
   12ae2:	6823      	ldr	r3, [r4, #0]
   12ae4:	f013 0f01 	tst.w	r3, #1
   12ae8:	d10f      	bne.n	12b0a <UART::beginSend()+0x136>
   12aea:	4620      	mov	r0, r4
   12aec:	f001 ffcc 	bl	14a88 <__cxa_guard_acquire>
   12af0:	b158      	cbz	r0, 12b0a <UART::beginSend()+0x136>
   12af2:	f640 4018 	movw	r0, #3096	; 0xc18
   12af6:	f2c1 0000 	movt	r0, #4096	; 0x1000
   12afa:	f04f 0100 	mov.w	r1, #0
   12afe:	460a      	mov	r2, r1
   12b00:	f7ff ff54 	bl	129ac <UART::UART(unsigned char, communication_mode)>
   12b04:	4620      	mov	r0, r4
   12b06:	f001 ffdd 	bl	14ac4 <__cxa_guard_release>
   12b0a:	f640 4318 	movw	r3, #3096	; 0xc18
   12b0e:	f2c1 0300 	movt	r3, #4096	; 0x1000
   12b12:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
   12b16:	2b00      	cmp	r3, #0
   12b18:	d052      	beq.n	12bc0 <UART::beginSend()+0x1ec>
   12b1a:	f640 4318 	movw	r3, #3096	; 0xc18
   12b1e:	f2c1 0300 	movt	r3, #4096	; 0x1000
   12b22:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
   12b26:	2b04      	cmp	r3, #4
   12b28:	d04a      	beq.n	12bc0 <UART::beginSend()+0x1ec>
   12b2a:	f641 25e0 	movw	r5, #6880	; 0x1ae0
   12b2e:	f2c1 0500 	movt	r5, #4096	; 0x1000
   12b32:	f04f 0701 	mov.w	r7, #1
   12b36:	f640 4618 	movw	r6, #3096	; 0xc18
   12b3a:	f2c1 0600 	movt	r6, #4096	; 0x1000
   12b3e:	e787      	b.n	12a50 <UART::beginSend()+0x7c>
		}
	} else if (index_ == RS485) {
   12b40:	2b01      	cmp	r3, #1
   12b42:	d13d      	bne.n	12bc0 <UART::beginSend()+0x1ec>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
   12b44:	f641 3368 	movw	r3, #7016	; 0x1b68
   12b48:	f2c1 0300 	movt	r3, #4096	; 0x1000
   12b4c:	785b      	ldrb	r3, [r3, #1]
   12b4e:	b95b      	cbnz	r3, 12b68 <UART::beginSend()+0x194>
//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
   12b50:	f641 3268 	movw	r2, #7016	; 0x1b68
   12b54:	f2c1 0200 	movt	r2, #4096	; 0x1000
   12b58:	7893      	ldrb	r3, [r2, #2]
   12b5a:	7810      	ldrb	r0, [r2, #0]
   12b5c:	f04f 0101 	mov.w	r1, #1
   12b60:	fa01 f103 	lsl.w	r1, r1, r3
   12b64:	f7f0 fcbe 	bl	34e4 <GPIO_SetValue>
		speak();
		_delay_us(10);
   12b68:	f04f 000a 	mov.w	r0, #10
   12b6c:	f7f6 ff72 	bl	9a54 <_delay_us>
		loopback_bytes = 1;
   12b70:	f641 3378 	movw	r3, #7032	; 0x1b78
   12b74:	f2c1 0300 	movt	r3, #4096	; 0x1000
   12b78:	f04f 0201 	mov.w	r2, #1
   12b7c:	701a      	strb	r2, [r3, #0]
//    static UART& getHostUART() { return hostUART; }

#if HAS_SLAVE_UART
    /// Get a reference to the slave UART
    /// \return slaveUART instance, which should act as a master to one or more slave toolheads.
    static UART& getSlaveUART() {static UART slaveUART(1,RS485); return slaveUART; }
   12b7e:	f641 2374 	movw	r3, #6772	; 0x1a74
   12b82:	f2c1 0300 	movt	r3, #4096	; 0x1000
   12b86:	681b      	ldr	r3, [r3, #0]
   12b88:	f013 0f01 	tst.w	r3, #1
   12b8c:	d115      	bne.n	12bba <UART::beginSend()+0x1e6>
   12b8e:	f641 2074 	movw	r0, #6772	; 0x1a74
   12b92:	f2c1 0000 	movt	r0, #4096	; 0x1000
   12b96:	f001 ff77 	bl	14a88 <__cxa_guard_acquire>
   12b9a:	b170      	cbz	r0, 12bba <UART::beginSend()+0x1e6>
   12b9c:	f641 2078 	movw	r0, #6776	; 0x1a78
   12ba0:	f2c1 0000 	movt	r0, #4096	; 0x1000
   12ba4:	f04f 0101 	mov.w	r1, #1
   12ba8:	460a      	mov	r2, r1
   12baa:	f7ff feff 	bl	129ac <UART::UART(unsigned char, communication_mode)>
   12bae:	f641 2074 	movw	r0, #6772	; 0x1a74
   12bb2:	f2c1 0000 	movt	r0, #4096	; 0x1000
   12bb6:	f001 ff85 	bl	14ac4 <__cxa_guard_release>
		uint8_t bytestosend = getSlaveUART().out.getNextByteToSend();
   12bba:	4803      	ldr	r0, [pc, #12]	; (12bc8 <UART::beginSend()+0x1f4>)
   12bbc:	f7ff f954 	bl	11e68 <OutPacket::getNextByteToSend()>
   12bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12bc4:	10000c40 	.word	0x10000c40
   12bc8:	10001aa0 	.word	0x10001aa0

00012bcc <UART::enable(bool)>:
	}
}

void UART::enable(bool enabled) {
   12bcc:	b570      	push	{r4, r5, r6, lr}
   12bce:	4604      	mov	r4, r0
//	xprintf("UART::enable" " (%s:%d)\n",_F_,_L_);
	enabled_ = enabled;
   12bd0:	7081      	strb	r1, [r0, #2]
	if (index_ == 0) {
   12bd2:	7843      	ldrb	r3, [r0, #1]
   12bd4:	2b00      	cmp	r3, #0
   12bd6:	d139      	bne.n	12c4c <UART::enable(bool)+0x80>
		if (enabled) {
   12bd8:	b351      	cbz	r1, 12c30 <UART::enable(bool)+0x64>
			xprintf("USB_Connect(TRUE)" " (%s:%d)\n",_F_,_L_);
   12bda:	f64b 7044 	movw	r0, #48964	; 0xbf44
   12bde:	f2c0 0002 	movt	r0, #2
   12be2:	494e      	ldr	r1, [pc, #312]	; (12d1c <UART::enable(bool)+0x150>)
   12be4:	f04f 02eb 	mov.w	r2, #235	; 0xeb
   12be8:	f7f3 feb4 	bl	6954 <xprintf>
			USB_Connect(TRUE);      // USB Connect
   12bec:	f04f 0001 	mov.w	r0, #1
   12bf0:	f7f3 f84e 	bl	5c90 <USB_Connect>
			while (!USB_Configuration){		// wait until USB is configured
   12bf4:	f242 5398 	movw	r3, #9624	; 0x2598
   12bf8:	f2c1 0300 	movt	r3, #4096	; 0x1000
   12bfc:	781b      	ldrb	r3, [r3, #0]
   12bfe:	b96b      	cbnz	r3, 12c1c <UART::enable(bool)+0x50>
				_delay_us(100);
   12c00:	f04f 0664 	mov.w	r6, #100	; 0x64
	enabled_ = enabled;
	if (index_ == 0) {
		if (enabled) {
			xprintf("USB_Connect(TRUE)" " (%s:%d)\n",_F_,_L_);
			USB_Connect(TRUE);      // USB Connect
			while (!USB_Configuration){		// wait until USB is configured
   12c04:	f242 5598 	movw	r5, #9624	; 0x2598
   12c08:	f2c1 0500 	movt	r5, #4096	; 0x1000
				_delay_us(100);
   12c0c:	4630      	mov	r0, r6
   12c0e:	f7f6 ff21 	bl	9a54 <_delay_us>
				WDT_Feed ();
   12c12:	f7f2 f8a7 	bl	4d64 <WDT_Feed>
	enabled_ = enabled;
	if (index_ == 0) {
		if (enabled) {
			xprintf("USB_Connect(TRUE)" " (%s:%d)\n",_F_,_L_);
			USB_Connect(TRUE);      // USB Connect
			while (!USB_Configuration){		// wait until USB is configured
   12c16:	782b      	ldrb	r3, [r5, #0]
   12c18:	2b00      	cmp	r3, #0
   12c1a:	d0f7      	beq.n	12c0c <UART::enable(bool)+0x40>
				_delay_us(100);
				WDT_Feed ();
//				xprintf("enable !USB_Configuration" " (%s:%d)\n",_F_,_L_);
			}
			xprintf("after USB_Connect(TRUE)" " (%s:%d)\n",_F_,_L_);
   12c1c:	f64b 7060 	movw	r0, #48992	; 0xbf60
   12c20:	f2c0 0002 	movt	r0, #2
   12c24:	493d      	ldr	r1, [pc, #244]	; (12d1c <UART::enable(bool)+0x150>)
   12c26:	f04f 02f2 	mov.w	r2, #242	; 0xf2
   12c2a:	f7f3 fe93 	bl	6954 <xprintf>
   12c2e:	e033      	b.n	12c98 <UART::enable(bool)+0xcc>
		}
		else {
			xprintf("Uart0 Disabled" " (%s:%d)\n",_F_,_L_);
   12c30:	f64b 7084 	movw	r0, #49028	; 0xbf84
   12c34:	f2c0 0002 	movt	r0, #2
   12c38:	4938      	ldr	r1, [pc, #224]	; (12d1c <UART::enable(bool)+0x150>)
   12c3a:	f04f 02f5 	mov.w	r2, #245	; 0xf5
   12c3e:	f7f3 fe89 	bl	6954 <xprintf>
			USB_Connect(FALSE);      // USB Disconnect
   12c42:	f04f 0000 	mov.w	r0, #0
   12c46:	f7f3 f823 	bl	5c90 <USB_Connect>
   12c4a:	e025      	b.n	12c98 <UART::enable(bool)+0xcc>
		}
	} else if (index_ == 1) {
   12c4c:	2b01      	cmp	r3, #1
   12c4e:	d123      	bne.n	12c98 <UART::enable(bool)+0xcc>
		if (enabled){
   12c50:	b189      	cbz	r1, 12c76 <UART::enable(bool)+0xaa>
			xprintf("Uart1 Enabled" " (%s:%d)\n",_F_,_L_);
   12c52:	f64b 709c 	movw	r0, #49052	; 0xbf9c
   12c56:	f2c0 0002 	movt	r0, #2
   12c5a:	4930      	ldr	r1, [pc, #192]	; (12d1c <UART::enable(bool)+0x150>)
   12c5c:	f04f 02fa 	mov.w	r2, #250	; 0xfa
   12c60:	f7f3 fe78 	bl	6954 <xprintf>
			UART_TxCmd((LPC_UART_TypeDef *)LPC_UART1, ENABLE);
   12c64:	f04f 0000 	mov.w	r0, #0
   12c68:	f2c4 0001 	movt	r0, #16385	; 0x4001
   12c6c:	f04f 0101 	mov.w	r1, #1
   12c70:	f7f1 ff7c 	bl	4b6c <UART_TxCmd>
   12c74:	e010      	b.n	12c98 <UART::enable(bool)+0xcc>
		}
		else {
			xprintf("Uart1 Disabled" " (%s:%d)\n",_F_,_L_);
   12c76:	f64b 70b4 	movw	r0, #49076	; 0xbfb4
   12c7a:	f2c0 0002 	movt	r0, #2
   12c7e:	4927      	ldr	r1, [pc, #156]	; (12d1c <UART::enable(bool)+0x150>)
   12c80:	f04f 02fe 	mov.w	r2, #254	; 0xfe
   12c84:	f7f3 fe66 	bl	6954 <xprintf>
			UART_TxCmd((LPC_UART_TypeDef *)LPC_UART1, DISABLE);
   12c88:	f04f 0000 	mov.w	r0, #0
   12c8c:	f2c4 0001 	movt	r0, #16385	; 0x4001
   12c90:	f04f 0100 	mov.w	r1, #0
   12c94:	f7f1 ff6a 	bl	4b6c <UART_TxCmd>
		}
	}
        if (mode_ == RS485) {
   12c98:	7823      	ldrb	r3, [r4, #0]
   12c9a:	2b01      	cmp	r3, #1
   12c9c:	d133      	bne.n	12d06 <UART::enable(bool)+0x13a>
                // If this is an RS485 pin, set up the RX and TX enable control lines.
                TX_Enable.setDirection(true);
   12c9e:	f641 3068 	movw	r0, #7016	; 0x1b68
   12ca2:	f2c1 0000 	movt	r0, #4096	; 0x1000
   12ca6:	f04f 0101 	mov.w	r1, #1
   12caa:	f7ff f9f9 	bl	120a0 <Pin::setDirection(bool) const>
                RX_Enable.setDirection(true);
   12cae:	f641 3470 	movw	r4, #7024	; 0x1b70
   12cb2:	f2c1 0400 	movt	r4, #4096	; 0x1000
   12cb6:	4620      	mov	r0, r4
   12cb8:	f04f 0101 	mov.w	r1, #1
   12cbc:	f7ff f9f0 	bl	120a0 <Pin::setDirection(bool) const>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
   12cc0:	7863      	ldrb	r3, [r4, #1]
   12cc2:	b93b      	cbnz	r3, 12cd4 <UART::enable(bool)+0x108>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
   12cc4:	78a3      	ldrb	r3, [r4, #2]
   12cc6:	7820      	ldrb	r0, [r4, #0]
   12cc8:	f04f 0101 	mov.w	r1, #1
   12ccc:	fa01 f103 	lsl.w	r1, r1, r3
   12cd0:	f7f0 fc10 	bl	34f4 <GPIO_ClearValue>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
   12cd4:	f641 3368 	movw	r3, #7016	; 0x1b68
   12cd8:	f2c1 0300 	movt	r3, #4096	; 0x1000
   12cdc:	785b      	ldrb	r3, [r3, #1]
   12cde:	b95b      	cbnz	r3, 12cf8 <UART::enable(bool)+0x12c>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
   12ce0:	f641 3268 	movw	r2, #7016	; 0x1b68
   12ce4:	f2c1 0200 	movt	r2, #4096	; 0x1000
   12ce8:	7893      	ldrb	r3, [r2, #2]
   12cea:	7810      	ldrb	r0, [r2, #0]
   12cec:	f04f 0101 	mov.w	r1, #1
   12cf0:	fa01 f103 	lsl.w	r1, r1, r3
   12cf4:	f7f0 fbfe 	bl	34f4 <GPIO_ClearValue>
                RX_Enable.setValue(false);  // Active low
                listen();
                loopback_bytes = 0;
   12cf8:	f641 3378 	movw	r3, #7032	; 0x1b78
   12cfc:	f2c1 0300 	movt	r3, #4096	; 0x1000
   12d00:	f04f 0200 	mov.w	r2, #0
   12d04:	701a      	strb	r2, [r3, #0]
        }
	xprintf("end UART::enable" " (%s:%d)\n",_F_,_L_);
   12d06:	f64b 70cc 	movw	r0, #49100	; 0xbfcc
   12d0a:	f2c0 0002 	movt	r0, #2
   12d0e:	4903      	ldr	r1, [pc, #12]	; (12d1c <UART::enable(bool)+0x150>)
   12d10:	f44f 7285 	mov.w	r2, #266	; 0x10a
   12d14:	f7f3 fe1e 	bl	6954 <xprintf>
}
   12d18:	bd70      	pop	{r4, r5, r6, pc}
   12d1a:	bf00      	nop
   12d1c:	0002bee7 	.word	0x0002bee7

00012d20 <UART1_IRQHandler>:

extern "C" void UART1_IRQHandler(void){
   12d20:	b510      	push	{r4, lr}
	xprintf("UART1_IRQ" " (%s:%d)\n",_F_,_L_);
   12d22:	f64b 70e8 	movw	r0, #49128	; 0xbfe8
   12d26:	f2c0 0002 	movt	r0, #2
   12d2a:	496f      	ldr	r1, [pc, #444]	; (12ee8 <UART1_IRQHandler+0x1c8>)
   12d2c:	f44f 7287 	mov.w	r2, #270	; 0x10e
   12d30:	f7f3 fe10 	bl	6954 <xprintf>

	uint32_t intsrc, tmp, tmp1;
	// Determine the interrupt source
	intsrc = UART_GetIntId((LPC_UART_TypeDef *)LPC_UART1);
   12d34:	f04f 0000 	mov.w	r0, #0
   12d38:	f2c4 0001 	movt	r0, #16385	; 0x4001
   12d3c:	f7f1 fedc 	bl	4af8 <UART_GetIntId>
	tmp = intsrc & UART_IIR_INTID_MASK;
   12d40:	f000 040e 	and.w	r4, r0, #14
	// Receive Line Status
	if (tmp == UART_IIR_INTID_RLS){
   12d44:	2c06      	cmp	r4, #6
   12d46:	d106      	bne.n	12d56 <UART1_IRQHandler+0x36>
		// Check line status
		tmp1 = UART_GetLineStatus((LPC_UART_TypeDef *)LPC_UART1);
   12d48:	f04f 0000 	mov.w	r0, #0
   12d4c:	f2c4 0001 	movt	r0, #16385	; 0x4001
   12d50:	f7f1 fe9a 	bl	4a88 <UART_GetLineStatus>
   12d54:	bd10      	pop	{r4, pc}
		// if (tmp1) {
		//	UART_IntErr(tmp1);
		// }
	}
	// Receive Data Available or Character time-out
	if ((tmp == UART_IIR_INTID_RDA) || (tmp == UART_IIR_INTID_CTI)) {
   12d56:	2c0c      	cmp	r4, #12
   12d58:	bf14      	ite	ne
   12d5a:	2300      	movne	r3, #0
   12d5c:	2301      	moveq	r3, #1
   12d5e:	2c04      	cmp	r4, #4
   12d60:	bf08      	it	eq
   12d62:	f043 0301 	orreq.w	r3, r3, #1
   12d66:	2b00      	cmp	r3, #0
   12d68:	d042      	beq.n	12df0 <UART1_IRQHandler+0xd0>
		static uint8_t byte_in;
		byte_in = UART_ReceiveByte((LPC_UART_TypeDef *)LPC_UART1);
   12d6a:	f04f 0000 	mov.w	r0, #0
   12d6e:	f2c4 0001 	movt	r0, #16385	; 0x4001
   12d72:	f7f1 fced 	bl	4750 <UART_ReceiveByte>
   12d76:	f641 3379 	movw	r3, #7033	; 0x1b79
   12d7a:	f2c1 0300 	movt	r3, #4096	; 0x1000
   12d7e:	7018      	strb	r0, [r3, #0]
		if (loopback_bytes > 0) {
   12d80:	f641 3378 	movw	r3, #7032	; 0x1b78
   12d84:	f2c1 0300 	movt	r3, #4096	; 0x1000
   12d88:	781b      	ldrb	r3, [r3, #0]
   12d8a:	b14b      	cbz	r3, 12da0 <UART1_IRQHandler+0x80>
			loopback_bytes--;
   12d8c:	f641 3378 	movw	r3, #7032	; 0x1b78
   12d90:	f2c1 0300 	movt	r3, #4096	; 0x1000
   12d94:	781a      	ldrb	r2, [r3, #0]
   12d96:	f102 32ff 	add.w	r2, r2, #4294967295
   12d9a:	b2d2      	uxtb	r2, r2
   12d9c:	701a      	strb	r2, [r3, #0]
   12d9e:	e027      	b.n	12df0 <UART1_IRQHandler+0xd0>
   12da0:	f641 2374 	movw	r3, #6772	; 0x1a74
   12da4:	f2c1 0300 	movt	r3, #4096	; 0x1000
   12da8:	681b      	ldr	r3, [r3, #0]
   12daa:	f013 0f01 	tst.w	r3, #1
   12dae:	d115      	bne.n	12ddc <UART1_IRQHandler+0xbc>
   12db0:	f641 2074 	movw	r0, #6772	; 0x1a74
   12db4:	f2c1 0000 	movt	r0, #4096	; 0x1000
   12db8:	f001 fe66 	bl	14a88 <__cxa_guard_acquire>
   12dbc:	b170      	cbz	r0, 12ddc <UART1_IRQHandler+0xbc>
   12dbe:	f641 2078 	movw	r0, #6776	; 0x1a78
   12dc2:	f2c1 0000 	movt	r0, #4096	; 0x1000
   12dc6:	f04f 0101 	mov.w	r1, #1
   12dca:	460a      	mov	r2, r1
   12dcc:	f7ff fdee 	bl	129ac <UART::UART(unsigned char, communication_mode)>
   12dd0:	f641 2074 	movw	r0, #6772	; 0x1a74
   12dd4:	f2c1 0000 	movt	r0, #4096	; 0x1000
   12dd8:	f001 fe74 	bl	14ac4 <__cxa_guard_release>
		} else {
			UART::getSlaveUART().in.processByte( UART_ReceiveByte((LPC_UART_TypeDef *)LPC_UART1) );
   12ddc:	f04f 0000 	mov.w	r0, #0
   12de0:	f2c4 0001 	movt	r0, #16385	; 0x4001
   12de4:	f7f1 fcb4 	bl	4750 <UART_ReceiveByte>
   12de8:	4601      	mov	r1, r0
   12dea:	4840      	ldr	r0, [pc, #256]	; (12eec <UART1_IRQHandler+0x1cc>)
   12dec:	f7fe ffd0 	bl	11d90 <InPacket::processByte(unsigned char)>
		}
	}

	// Transmit Holding Empty
	if (tmp == UART_IIR_INTID_THRE){
   12df0:	2c02      	cmp	r4, #2
   12df2:	d177      	bne.n	12ee4 <UART1_IRQHandler+0x1c4>
   12df4:	f641 2374 	movw	r3, #6772	; 0x1a74
   12df8:	f2c1 0300 	movt	r3, #4096	; 0x1000
   12dfc:	681b      	ldr	r3, [r3, #0]
   12dfe:	f013 0f01 	tst.w	r3, #1
   12e02:	d115      	bne.n	12e30 <UART1_IRQHandler+0x110>
   12e04:	f641 2074 	movw	r0, #6772	; 0x1a74
   12e08:	f2c1 0000 	movt	r0, #4096	; 0x1000
   12e0c:	f001 fe3c 	bl	14a88 <__cxa_guard_acquire>
   12e10:	b170      	cbz	r0, 12e30 <UART1_IRQHandler+0x110>
   12e12:	f641 2078 	movw	r0, #6776	; 0x1a78
   12e16:	f2c1 0000 	movt	r0, #4096	; 0x1000
   12e1a:	f04f 0101 	mov.w	r1, #1
   12e1e:	460a      	mov	r2, r1
   12e20:	f7ff fdc4 	bl	129ac <UART::UART(unsigned char, communication_mode)>
   12e24:	f641 2074 	movw	r0, #6772	; 0x1a74
   12e28:	f2c1 0000 	movt	r0, #4096	; 0x1000
   12e2c:	f001 fe4a 	bl	14ac4 <__cxa_guard_release>
   12e30:	f641 2378 	movw	r3, #6776	; 0x1a78
   12e34:	f2c1 0300 	movt	r3, #4096	; 0x1000
   12e38:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
   12e3c:	2b00      	cmp	r3, #0
   12e3e:	d046      	beq.n	12ece <UART1_IRQHandler+0x1ae>
   12e40:	f641 2378 	movw	r3, #6776	; 0x1a78
   12e44:	f2c1 0300 	movt	r3, #4096	; 0x1000
   12e48:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
   12e4c:	2b04      	cmp	r3, #4
   12e4e:	d03e      	beq.n	12ece <UART1_IRQHandler+0x1ae>
		if (UART::getSlaveUART().out.isSending()) {
			loopback_bytes++;
   12e50:	f641 3378 	movw	r3, #7032	; 0x1b78
   12e54:	f2c1 0300 	movt	r3, #4096	; 0x1000
   12e58:	781a      	ldrb	r2, [r3, #0]
   12e5a:	f102 0201 	add.w	r2, r2, #1
   12e5e:	b2d2      	uxtb	r2, r2
   12e60:	701a      	strb	r2, [r3, #0]
   12e62:	f641 2374 	movw	r3, #6772	; 0x1a74
   12e66:	f2c1 0300 	movt	r3, #4096	; 0x1000
   12e6a:	681b      	ldr	r3, [r3, #0]
   12e6c:	f013 0f01 	tst.w	r3, #1
   12e70:	d115      	bne.n	12e9e <UART1_IRQHandler+0x17e>
   12e72:	f641 2074 	movw	r0, #6772	; 0x1a74
   12e76:	f2c1 0000 	movt	r0, #4096	; 0x1000
   12e7a:	f001 fe05 	bl	14a88 <__cxa_guard_acquire>
   12e7e:	b170      	cbz	r0, 12e9e <UART1_IRQHandler+0x17e>
   12e80:	f641 2078 	movw	r0, #6776	; 0x1a78
   12e84:	f2c1 0000 	movt	r0, #4096	; 0x1000
   12e88:	f04f 0101 	mov.w	r1, #1
   12e8c:	460a      	mov	r2, r1
   12e8e:	f7ff fd8d 	bl	129ac <UART::UART(unsigned char, communication_mode)>
   12e92:	f641 2074 	movw	r0, #6772	; 0x1a74
   12e96:	f2c1 0000 	movt	r0, #4096	; 0x1000
   12e9a:	f001 fe13 	bl	14ac4 <__cxa_guard_release>
			UART_SendByte((LPC_UART_TypeDef *)LPC_UART1, UART::getSlaveUART().out.getNextByteToSend());  // NEED to choose which UART
   12e9e:	4814      	ldr	r0, [pc, #80]	; (12ef0 <UART1_IRQHandler+0x1d0>)
   12ea0:	f7fe ffe2 	bl	11e68 <OutPacket::getNextByteToSend()>
   12ea4:	4601      	mov	r1, r0
   12ea6:	f04f 0000 	mov.w	r0, #0
   12eaa:	f2c4 0001 	movt	r0, #16385	; 0x4001
   12eae:	f7f1 fc15 	bl	46dc <UART_SendByte>
   12eb2:	bd10      	pop	{r4, pc}
   12eb4:	f641 3268 	movw	r2, #7016	; 0x1b68
   12eb8:	f2c1 0200 	movt	r2, #4096	; 0x1000
   12ebc:	7893      	ldrb	r3, [r2, #2]
   12ebe:	7810      	ldrb	r0, [r2, #0]
   12ec0:	f04f 0101 	mov.w	r1, #1
   12ec4:	fa01 f103 	lsl.w	r1, r1, r3
   12ec8:	f7f0 fb14 	bl	34f4 <GPIO_ClearValue>
   12ecc:	bd10      	pop	{r4, pc}
		} else {
			_delay_us(10);
   12ece:	f04f 000a 	mov.w	r0, #10
   12ed2:	f7f6 fdbf 	bl	9a54 <_delay_us>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
   12ed6:	f641 3368 	movw	r3, #7016	; 0x1b68
   12eda:	f2c1 0300 	movt	r3, #4096	; 0x1000
   12ede:	785b      	ldrb	r3, [r3, #1]
   12ee0:	2b00      	cmp	r3, #0
   12ee2:	d0e7      	beq.n	12eb4 <UART1_IRQHandler+0x194>
   12ee4:	bd10      	pop	{r4, pc}
   12ee6:	bf00      	nop
   12ee8:	0002bee7 	.word	0x0002bee7
   12eec:	10001a7b 	.word	0x10001a7b
   12ef0:	10001aa0 	.word	0x10001aa0

00012ef4 <CANActivity_IRQHandler>:
	}
}

uint8_t BulkBufOut  [USB_CDC_BUFSIZE];

extern "C" void CANActivity_IRQHandler(void){
   12ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int numBytesRead = USB_ReadEP(CDC_DEP_OUT, &BulkBufOut[0]);
   12ef8:	f04f 0002 	mov.w	r0, #2
   12efc:	f641 3128 	movw	r1, #6952	; 0x1b28
   12f00:	f2c1 0100 	movt	r1, #4096	; 0x1000
   12f04:	f7f3 f818 	bl	5f38 <USB_ReadEP>
   12f08:	4605      	mov	r5, r0
		xprintf("\nin");
   12f0a:	f64b 70fc 	movw	r0, #49148	; 0xbffc
   12f0e:	f2c0 0002 	movt	r0, #2
   12f12:	f7f3 fd1f 	bl	6954 <xprintf>
	for (int i = 0; i < numBytesRead; i++){
   12f16:	2d00      	cmp	r5, #0
   12f18:	dd2d      	ble.n	12f76 <CANActivity_IRQHandler+0x82>
   12f1a:	f641 3628 	movw	r6, #6952	; 0x1b28
   12f1e:	f2c1 0600 	movt	r6, #4096	; 0x1000
	}
}

uint8_t BulkBufOut  [USB_CDC_BUFSIZE];

extern "C" void CANActivity_IRQHandler(void){
   12f22:	1975      	adds	r5, r6, r5
	int numBytesRead = USB_ReadEP(CDC_DEP_OUT, &BulkBufOut[0]);
		xprintf("\nin");
	for (int i = 0; i < numBytesRead; i++){
		xprintf(" %d",BulkBufOut[i]);
   12f24:	f64b 7740 	movw	r7, #48960	; 0xbf40
   12f28:	f2c0 0702 	movt	r7, #2
#endif

public:
    /// Get a reference to the host UART
    /// \return hostUART instance, which should act as a slave to a computer (or motherboard)
    static UART& getHostUART() {static UART hostUART(0,RS232); return hostUART; }
   12f2c:	f640 4414 	movw	r4, #3092	; 0xc14
   12f30:	f2c1 0400 	movt	r4, #4096	; 0x1000
   12f34:	f640 4818 	movw	r8, #3096	; 0xc18
   12f38:	f2c1 0800 	movt	r8, #4096	; 0x1000
   12f3c:	4638      	mov	r0, r7
   12f3e:	f816 1b01 	ldrb.w	r1, [r6], #1
   12f42:	f7f3 fd07 	bl	6954 <xprintf>
   12f46:	6823      	ldr	r3, [r4, #0]
   12f48:	f013 0f01 	tst.w	r3, #1
   12f4c:	d10c      	bne.n	12f68 <CANActivity_IRQHandler+0x74>
   12f4e:	4620      	mov	r0, r4
   12f50:	f001 fd9a 	bl	14a88 <__cxa_guard_acquire>
   12f54:	b140      	cbz	r0, 12f68 <CANActivity_IRQHandler+0x74>
   12f56:	4640      	mov	r0, r8
   12f58:	f04f 0100 	mov.w	r1, #0
   12f5c:	460a      	mov	r2, r1
   12f5e:	f7ff fd25 	bl	129ac <UART::UART(unsigned char, communication_mode)>
   12f62:	4620      	mov	r0, r4
   12f64:	f001 fdae 	bl	14ac4 <__cxa_guard_release>
		UART::getHostUART().in.processByte( BulkBufOut[i] );
   12f68:	4807      	ldr	r0, [pc, #28]	; (12f88 <CANActivity_IRQHandler+0x94>)
   12f6a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
   12f6e:	f7fe ff0f 	bl	11d90 <InPacket::processByte(unsigned char)>
uint8_t BulkBufOut  [USB_CDC_BUFSIZE];

extern "C" void CANActivity_IRQHandler(void){
	int numBytesRead = USB_ReadEP(CDC_DEP_OUT, &BulkBufOut[0]);
		xprintf("\nin");
	for (int i = 0; i < numBytesRead; i++){
   12f72:	42ae      	cmp	r6, r5
   12f74:	d1e2      	bne.n	12f3c <CANActivity_IRQHandler+0x48>
		xprintf(" %d",BulkBufOut[i]);
		UART::getHostUART().in.processByte( BulkBufOut[i] );
	}
	xprintf("\n");
   12f76:	f247 50dc 	movw	r0, #30172	; 0x75dc
   12f7a:	f2c0 0002 	movt	r0, #2
   12f7e:	f7f3 fce9 	bl	6954 <xprintf>
}
   12f82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12f86:	bf00      	nop
   12f88:	10000c1b 	.word	0x10000c1b

00012f8c <_GLOBAL__sub_I_loopback_bytes>:
void UART::reset() {
	if (mode_ == RS485) {
		loopback_bytes = 0;
		listen();
	}
}
   12f8c:	b530      	push	{r4, r5, lr}
   12f8e:	b083      	sub	sp, #12
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
   12f90:	f641 20d0 	movw	r0, #6864	; 0x1ad0
   12f94:	f2c1 0000 	movt	r0, #4096	; 0x1000
   12f98:	f04f 0100 	mov.w	r1, #0
   12f9c:	f7fe fe4e 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
   12fa0:	f641 20d4 	movw	r0, #6868	; 0x1ad4
   12fa4:	f2c1 0000 	movt	r0, #4096	; 0x1000
   12fa8:	f04f 0101 	mov.w	r1, #1
   12fac:	f7fe fe46 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
   12fb0:	f641 24d8 	movw	r4, #6872	; 0x1ad8
   12fb4:	f2c1 0400 	movt	r4, #4096	; 0x1000
   12fb8:	4620      	mov	r0, r4
   12fba:	f04f 0102 	mov.w	r1, #2
   12fbe:	f7fe fe3d 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
   12fc2:	f641 20dc 	movw	r0, #6876	; 0x1adc
   12fc6:	f2c1 0000 	movt	r0, #4096	; 0x1000
   12fca:	f04f 0103 	mov.w	r1, #3
   12fce:	f7fe fe35 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
   12fd2:	f641 3020 	movw	r0, #6944	; 0x1b20
   12fd6:	f2c1 0000 	movt	r0, #4096	; 0x1000
   12fda:	f04f 0104 	mov.w	r1, #4
   12fde:	f7fe fe2d 	bl	11c3c <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
   12fe2:	f641 3524 	movw	r5, #6948	; 0x1b24
   12fe6:	f2c1 0500 	movt	r5, #4096	; 0x1000
   12fea:	4628      	mov	r0, r5
   12fec:	f04f 01ff 	mov.w	r1, #255	; 0xff
   12ff0:	f7fe fe24 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
	};
	// currently not used:
	//const uint8_t getPinIndex() const { return pin_index; }
};

static const Pin NullPin(NullPort, 0);
   12ff4:	f641 20c8 	movw	r0, #6856	; 0x1ac8
   12ff8:	f2c1 0000 	movt	r0, #4096	; 0x1000
   12ffc:	4629      	mov	r1, r5
   12ffe:	f04f 0200 	mov.w	r2, #0
   13002:	f7ff f82d 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
#if ASSERT_LINE_FIX
#include "ExtruderBoard.hh"
#endif

// Avoid repeatedly creating temp objects
const Pin TX_Enable = TX_ENABLE_PIN;
   13006:	a801      	add	r0, sp, #4
   13008:	f04f 01ff 	mov.w	r1, #255	; 0xff
   1300c:	f7fe fe16 	bl	11c3c <LPCPort::LPCPort(unsigned char)>
   13010:	f641 3068 	movw	r0, #7016	; 0x1b68
   13014:	f2c1 0000 	movt	r0, #4096	; 0x1000
   13018:	a901      	add	r1, sp, #4
   1301a:	f04f 02ff 	mov.w	r2, #255	; 0xff
   1301e:	f7ff f81f 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
const Pin RX_Enable = RX_ENABLE_PIN;
   13022:	f641 3070 	movw	r0, #7024	; 0x1b70
   13026:	f2c1 0000 	movt	r0, #4096	; 0x1000
   1302a:	4621      	mov	r1, r4
   1302c:	f04f 0208 	mov.w	r2, #8
   13030:	f7ff f816 	bl	12060 <Pin::Pin(LPCPort const&, unsigned char)>
void UART::reset() {
	if (mode_ == RS485) {
		loopback_bytes = 0;
		listen();
	}
}
   13034:	b003      	add	sp, #12
   13036:	bd30      	pop	{r4, r5, pc}

00013038 <__aeabi_drsub>:
   13038:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1303c:	e002      	b.n	13044 <__adddf3>
   1303e:	bf00      	nop

00013040 <__aeabi_dsub>:
   13040:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00013044 <__adddf3>:
   13044:	b530      	push	{r4, r5, lr}
   13046:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1304a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1304e:	ea94 0f05 	teq	r4, r5
   13052:	bf08      	it	eq
   13054:	ea90 0f02 	teqeq	r0, r2
   13058:	bf1f      	itttt	ne
   1305a:	ea54 0c00 	orrsne.w	ip, r4, r0
   1305e:	ea55 0c02 	orrsne.w	ip, r5, r2
   13062:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   13066:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1306a:	f000 80e2 	beq.w	13232 <__adddf3+0x1ee>
   1306e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   13072:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   13076:	bfb8      	it	lt
   13078:	426d      	neglt	r5, r5
   1307a:	dd0c      	ble.n	13096 <__adddf3+0x52>
   1307c:	442c      	add	r4, r5
   1307e:	ea80 0202 	eor.w	r2, r0, r2
   13082:	ea81 0303 	eor.w	r3, r1, r3
   13086:	ea82 0000 	eor.w	r0, r2, r0
   1308a:	ea83 0101 	eor.w	r1, r3, r1
   1308e:	ea80 0202 	eor.w	r2, r0, r2
   13092:	ea81 0303 	eor.w	r3, r1, r3
   13096:	2d36      	cmp	r5, #54	; 0x36
   13098:	bf88      	it	hi
   1309a:	bd30      	pophi	{r4, r5, pc}
   1309c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   130a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   130a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   130a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   130ac:	d002      	beq.n	130b4 <__adddf3+0x70>
   130ae:	4240      	negs	r0, r0
   130b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   130b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   130b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   130bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   130c0:	d002      	beq.n	130c8 <__adddf3+0x84>
   130c2:	4252      	negs	r2, r2
   130c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   130c8:	ea94 0f05 	teq	r4, r5
   130cc:	f000 80a7 	beq.w	1321e <__adddf3+0x1da>
   130d0:	f1a4 0401 	sub.w	r4, r4, #1
   130d4:	f1d5 0e20 	rsbs	lr, r5, #32
   130d8:	db0d      	blt.n	130f6 <__adddf3+0xb2>
   130da:	fa02 fc0e 	lsl.w	ip, r2, lr
   130de:	fa22 f205 	lsr.w	r2, r2, r5
   130e2:	1880      	adds	r0, r0, r2
   130e4:	f141 0100 	adc.w	r1, r1, #0
   130e8:	fa03 f20e 	lsl.w	r2, r3, lr
   130ec:	1880      	adds	r0, r0, r2
   130ee:	fa43 f305 	asr.w	r3, r3, r5
   130f2:	4159      	adcs	r1, r3
   130f4:	e00e      	b.n	13114 <__adddf3+0xd0>
   130f6:	f1a5 0520 	sub.w	r5, r5, #32
   130fa:	f10e 0e20 	add.w	lr, lr, #32
   130fe:	2a01      	cmp	r2, #1
   13100:	fa03 fc0e 	lsl.w	ip, r3, lr
   13104:	bf28      	it	cs
   13106:	f04c 0c02 	orrcs.w	ip, ip, #2
   1310a:	fa43 f305 	asr.w	r3, r3, r5
   1310e:	18c0      	adds	r0, r0, r3
   13110:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   13114:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   13118:	d507      	bpl.n	1312a <__adddf3+0xe6>
   1311a:	f04f 0e00 	mov.w	lr, #0
   1311e:	f1dc 0c00 	rsbs	ip, ip, #0
   13122:	eb7e 0000 	sbcs.w	r0, lr, r0
   13126:	eb6e 0101 	sbc.w	r1, lr, r1
   1312a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1312e:	d31b      	bcc.n	13168 <__adddf3+0x124>
   13130:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   13134:	d30c      	bcc.n	13150 <__adddf3+0x10c>
   13136:	0849      	lsrs	r1, r1, #1
   13138:	ea5f 0030 	movs.w	r0, r0, rrx
   1313c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   13140:	f104 0401 	add.w	r4, r4, #1
   13144:	ea4f 5244 	mov.w	r2, r4, lsl #21
   13148:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1314c:	f080 809a 	bcs.w	13284 <__adddf3+0x240>
   13150:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   13154:	bf08      	it	eq
   13156:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1315a:	f150 0000 	adcs.w	r0, r0, #0
   1315e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   13162:	ea41 0105 	orr.w	r1, r1, r5
   13166:	bd30      	pop	{r4, r5, pc}
   13168:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1316c:	4140      	adcs	r0, r0
   1316e:	eb41 0101 	adc.w	r1, r1, r1
   13172:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   13176:	f1a4 0401 	sub.w	r4, r4, #1
   1317a:	d1e9      	bne.n	13150 <__adddf3+0x10c>
   1317c:	f091 0f00 	teq	r1, #0
   13180:	bf04      	itt	eq
   13182:	4601      	moveq	r1, r0
   13184:	2000      	moveq	r0, #0
   13186:	fab1 f381 	clz	r3, r1
   1318a:	bf08      	it	eq
   1318c:	3320      	addeq	r3, #32
   1318e:	f1a3 030b 	sub.w	r3, r3, #11
   13192:	f1b3 0220 	subs.w	r2, r3, #32
   13196:	da0c      	bge.n	131b2 <__adddf3+0x16e>
   13198:	320c      	adds	r2, #12
   1319a:	dd08      	ble.n	131ae <__adddf3+0x16a>
   1319c:	f102 0c14 	add.w	ip, r2, #20
   131a0:	f1c2 020c 	rsb	r2, r2, #12
   131a4:	fa01 f00c 	lsl.w	r0, r1, ip
   131a8:	fa21 f102 	lsr.w	r1, r1, r2
   131ac:	e00c      	b.n	131c8 <__adddf3+0x184>
   131ae:	f102 0214 	add.w	r2, r2, #20
   131b2:	bfd8      	it	le
   131b4:	f1c2 0c20 	rsble	ip, r2, #32
   131b8:	fa01 f102 	lsl.w	r1, r1, r2
   131bc:	fa20 fc0c 	lsr.w	ip, r0, ip
   131c0:	bfdc      	itt	le
   131c2:	ea41 010c 	orrle.w	r1, r1, ip
   131c6:	4090      	lslle	r0, r2
   131c8:	1ae4      	subs	r4, r4, r3
   131ca:	bfa2      	ittt	ge
   131cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   131d0:	4329      	orrge	r1, r5
   131d2:	bd30      	popge	{r4, r5, pc}
   131d4:	ea6f 0404 	mvn.w	r4, r4
   131d8:	3c1f      	subs	r4, #31
   131da:	da1c      	bge.n	13216 <__adddf3+0x1d2>
   131dc:	340c      	adds	r4, #12
   131de:	dc0e      	bgt.n	131fe <__adddf3+0x1ba>
   131e0:	f104 0414 	add.w	r4, r4, #20
   131e4:	f1c4 0220 	rsb	r2, r4, #32
   131e8:	fa20 f004 	lsr.w	r0, r0, r4
   131ec:	fa01 f302 	lsl.w	r3, r1, r2
   131f0:	ea40 0003 	orr.w	r0, r0, r3
   131f4:	fa21 f304 	lsr.w	r3, r1, r4
   131f8:	ea45 0103 	orr.w	r1, r5, r3
   131fc:	bd30      	pop	{r4, r5, pc}
   131fe:	f1c4 040c 	rsb	r4, r4, #12
   13202:	f1c4 0220 	rsb	r2, r4, #32
   13206:	fa20 f002 	lsr.w	r0, r0, r2
   1320a:	fa01 f304 	lsl.w	r3, r1, r4
   1320e:	ea40 0003 	orr.w	r0, r0, r3
   13212:	4629      	mov	r1, r5
   13214:	bd30      	pop	{r4, r5, pc}
   13216:	fa21 f004 	lsr.w	r0, r1, r4
   1321a:	4629      	mov	r1, r5
   1321c:	bd30      	pop	{r4, r5, pc}
   1321e:	f094 0f00 	teq	r4, #0
   13222:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   13226:	bf06      	itte	eq
   13228:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1322c:	3401      	addeq	r4, #1
   1322e:	3d01      	subne	r5, #1
   13230:	e74e      	b.n	130d0 <__adddf3+0x8c>
   13232:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   13236:	bf18      	it	ne
   13238:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1323c:	d029      	beq.n	13292 <__adddf3+0x24e>
   1323e:	ea94 0f05 	teq	r4, r5
   13242:	bf08      	it	eq
   13244:	ea90 0f02 	teqeq	r0, r2
   13248:	d005      	beq.n	13256 <__adddf3+0x212>
   1324a:	ea54 0c00 	orrs.w	ip, r4, r0
   1324e:	bf04      	itt	eq
   13250:	4619      	moveq	r1, r3
   13252:	4610      	moveq	r0, r2
   13254:	bd30      	pop	{r4, r5, pc}
   13256:	ea91 0f03 	teq	r1, r3
   1325a:	bf1e      	ittt	ne
   1325c:	2100      	movne	r1, #0
   1325e:	2000      	movne	r0, #0
   13260:	bd30      	popne	{r4, r5, pc}
   13262:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   13266:	d105      	bne.n	13274 <__adddf3+0x230>
   13268:	0040      	lsls	r0, r0, #1
   1326a:	4149      	adcs	r1, r1
   1326c:	bf28      	it	cs
   1326e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   13272:	bd30      	pop	{r4, r5, pc}
   13274:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   13278:	bf3c      	itt	cc
   1327a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1327e:	bd30      	popcc	{r4, r5, pc}
   13280:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   13284:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   13288:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1328c:	f04f 0000 	mov.w	r0, #0
   13290:	bd30      	pop	{r4, r5, pc}
   13292:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   13296:	bf1a      	itte	ne
   13298:	4619      	movne	r1, r3
   1329a:	4610      	movne	r0, r2
   1329c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   132a0:	bf1c      	itt	ne
   132a2:	460b      	movne	r3, r1
   132a4:	4602      	movne	r2, r0
   132a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   132aa:	bf06      	itte	eq
   132ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   132b0:	ea91 0f03 	teqeq	r1, r3
   132b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   132b8:	bd30      	pop	{r4, r5, pc}
   132ba:	bf00      	nop

000132bc <__aeabi_ui2d>:
   132bc:	f090 0f00 	teq	r0, #0
   132c0:	bf04      	itt	eq
   132c2:	2100      	moveq	r1, #0
   132c4:	4770      	bxeq	lr
   132c6:	b530      	push	{r4, r5, lr}
   132c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   132cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   132d0:	f04f 0500 	mov.w	r5, #0
   132d4:	f04f 0100 	mov.w	r1, #0
   132d8:	e750      	b.n	1317c <__adddf3+0x138>
   132da:	bf00      	nop

000132dc <__aeabi_i2d>:
   132dc:	f090 0f00 	teq	r0, #0
   132e0:	bf04      	itt	eq
   132e2:	2100      	moveq	r1, #0
   132e4:	4770      	bxeq	lr
   132e6:	b530      	push	{r4, r5, lr}
   132e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   132ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
   132f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   132f4:	bf48      	it	mi
   132f6:	4240      	negmi	r0, r0
   132f8:	f04f 0100 	mov.w	r1, #0
   132fc:	e73e      	b.n	1317c <__adddf3+0x138>
   132fe:	bf00      	nop

00013300 <__aeabi_f2d>:
   13300:	0042      	lsls	r2, r0, #1
   13302:	ea4f 01e2 	mov.w	r1, r2, asr #3
   13306:	ea4f 0131 	mov.w	r1, r1, rrx
   1330a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1330e:	bf1f      	itttt	ne
   13310:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   13314:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   13318:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1331c:	4770      	bxne	lr
   1331e:	f092 0f00 	teq	r2, #0
   13322:	bf14      	ite	ne
   13324:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   13328:	4770      	bxeq	lr
   1332a:	b530      	push	{r4, r5, lr}
   1332c:	f44f 7460 	mov.w	r4, #896	; 0x380
   13330:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   13334:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   13338:	e720      	b.n	1317c <__adddf3+0x138>
   1333a:	bf00      	nop

0001333c <__aeabi_ul2d>:
   1333c:	ea50 0201 	orrs.w	r2, r0, r1
   13340:	bf08      	it	eq
   13342:	4770      	bxeq	lr
   13344:	b530      	push	{r4, r5, lr}
   13346:	f04f 0500 	mov.w	r5, #0
   1334a:	e00a      	b.n	13362 <__aeabi_l2d+0x16>

0001334c <__aeabi_l2d>:
   1334c:	ea50 0201 	orrs.w	r2, r0, r1
   13350:	bf08      	it	eq
   13352:	4770      	bxeq	lr
   13354:	b530      	push	{r4, r5, lr}
   13356:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1335a:	d502      	bpl.n	13362 <__aeabi_l2d+0x16>
   1335c:	4240      	negs	r0, r0
   1335e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   13362:	f44f 6480 	mov.w	r4, #1024	; 0x400
   13366:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1336a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1336e:	f43f aedc 	beq.w	1312a <__adddf3+0xe6>
   13372:	f04f 0203 	mov.w	r2, #3
   13376:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1337a:	bf18      	it	ne
   1337c:	3203      	addne	r2, #3
   1337e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   13382:	bf18      	it	ne
   13384:	3203      	addne	r2, #3
   13386:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1338a:	f1c2 0320 	rsb	r3, r2, #32
   1338e:	fa00 fc03 	lsl.w	ip, r0, r3
   13392:	fa20 f002 	lsr.w	r0, r0, r2
   13396:	fa01 fe03 	lsl.w	lr, r1, r3
   1339a:	ea40 000e 	orr.w	r0, r0, lr
   1339e:	fa21 f102 	lsr.w	r1, r1, r2
   133a2:	4414      	add	r4, r2
   133a4:	e6c1      	b.n	1312a <__adddf3+0xe6>
   133a6:	bf00      	nop

000133a8 <__aeabi_dmul>:
   133a8:	b570      	push	{r4, r5, r6, lr}
   133aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
   133ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   133b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   133b6:	bf1d      	ittte	ne
   133b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   133bc:	ea94 0f0c 	teqne	r4, ip
   133c0:	ea95 0f0c 	teqne	r5, ip
   133c4:	f000 f8de 	bleq	13584 <__aeabi_dmul+0x1dc>
   133c8:	442c      	add	r4, r5
   133ca:	ea81 0603 	eor.w	r6, r1, r3
   133ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   133d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   133d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   133da:	bf18      	it	ne
   133dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   133e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   133e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   133e8:	d038      	beq.n	1345c <__aeabi_dmul+0xb4>
   133ea:	fba0 ce02 	umull	ip, lr, r0, r2
   133ee:	f04f 0500 	mov.w	r5, #0
   133f2:	fbe1 e502 	umlal	lr, r5, r1, r2
   133f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   133fa:	fbe0 e503 	umlal	lr, r5, r0, r3
   133fe:	f04f 0600 	mov.w	r6, #0
   13402:	fbe1 5603 	umlal	r5, r6, r1, r3
   13406:	f09c 0f00 	teq	ip, #0
   1340a:	bf18      	it	ne
   1340c:	f04e 0e01 	orrne.w	lr, lr, #1
   13410:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   13414:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   13418:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1341c:	d204      	bcs.n	13428 <__aeabi_dmul+0x80>
   1341e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   13422:	416d      	adcs	r5, r5
   13424:	eb46 0606 	adc.w	r6, r6, r6
   13428:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1342c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   13430:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   13434:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   13438:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1343c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   13440:	bf88      	it	hi
   13442:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   13446:	d81e      	bhi.n	13486 <__aeabi_dmul+0xde>
   13448:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1344c:	bf08      	it	eq
   1344e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   13452:	f150 0000 	adcs.w	r0, r0, #0
   13456:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1345a:	bd70      	pop	{r4, r5, r6, pc}
   1345c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   13460:	ea46 0101 	orr.w	r1, r6, r1
   13464:	ea40 0002 	orr.w	r0, r0, r2
   13468:	ea81 0103 	eor.w	r1, r1, r3
   1346c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   13470:	bfc2      	ittt	gt
   13472:	ebd4 050c 	rsbsgt	r5, r4, ip
   13476:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1347a:	bd70      	popgt	{r4, r5, r6, pc}
   1347c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   13480:	f04f 0e00 	mov.w	lr, #0
   13484:	3c01      	subs	r4, #1
   13486:	f300 80ab 	bgt.w	135e0 <__aeabi_dmul+0x238>
   1348a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1348e:	bfde      	ittt	le
   13490:	2000      	movle	r0, #0
   13492:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   13496:	bd70      	pople	{r4, r5, r6, pc}
   13498:	f1c4 0400 	rsb	r4, r4, #0
   1349c:	3c20      	subs	r4, #32
   1349e:	da35      	bge.n	1350c <__aeabi_dmul+0x164>
   134a0:	340c      	adds	r4, #12
   134a2:	dc1b      	bgt.n	134dc <__aeabi_dmul+0x134>
   134a4:	f104 0414 	add.w	r4, r4, #20
   134a8:	f1c4 0520 	rsb	r5, r4, #32
   134ac:	fa00 f305 	lsl.w	r3, r0, r5
   134b0:	fa20 f004 	lsr.w	r0, r0, r4
   134b4:	fa01 f205 	lsl.w	r2, r1, r5
   134b8:	ea40 0002 	orr.w	r0, r0, r2
   134bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   134c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   134c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   134c8:	fa21 f604 	lsr.w	r6, r1, r4
   134cc:	eb42 0106 	adc.w	r1, r2, r6
   134d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   134d4:	bf08      	it	eq
   134d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   134da:	bd70      	pop	{r4, r5, r6, pc}
   134dc:	f1c4 040c 	rsb	r4, r4, #12
   134e0:	f1c4 0520 	rsb	r5, r4, #32
   134e4:	fa00 f304 	lsl.w	r3, r0, r4
   134e8:	fa20 f005 	lsr.w	r0, r0, r5
   134ec:	fa01 f204 	lsl.w	r2, r1, r4
   134f0:	ea40 0002 	orr.w	r0, r0, r2
   134f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   134f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   134fc:	f141 0100 	adc.w	r1, r1, #0
   13500:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   13504:	bf08      	it	eq
   13506:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1350a:	bd70      	pop	{r4, r5, r6, pc}
   1350c:	f1c4 0520 	rsb	r5, r4, #32
   13510:	fa00 f205 	lsl.w	r2, r0, r5
   13514:	ea4e 0e02 	orr.w	lr, lr, r2
   13518:	fa20 f304 	lsr.w	r3, r0, r4
   1351c:	fa01 f205 	lsl.w	r2, r1, r5
   13520:	ea43 0302 	orr.w	r3, r3, r2
   13524:	fa21 f004 	lsr.w	r0, r1, r4
   13528:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1352c:	fa21 f204 	lsr.w	r2, r1, r4
   13530:	ea20 0002 	bic.w	r0, r0, r2
   13534:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   13538:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1353c:	bf08      	it	eq
   1353e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   13542:	bd70      	pop	{r4, r5, r6, pc}
   13544:	f094 0f00 	teq	r4, #0
   13548:	d10f      	bne.n	1356a <__aeabi_dmul+0x1c2>
   1354a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1354e:	0040      	lsls	r0, r0, #1
   13550:	eb41 0101 	adc.w	r1, r1, r1
   13554:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   13558:	bf08      	it	eq
   1355a:	3c01      	subeq	r4, #1
   1355c:	d0f7      	beq.n	1354e <__aeabi_dmul+0x1a6>
   1355e:	ea41 0106 	orr.w	r1, r1, r6
   13562:	f095 0f00 	teq	r5, #0
   13566:	bf18      	it	ne
   13568:	4770      	bxne	lr
   1356a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1356e:	0052      	lsls	r2, r2, #1
   13570:	eb43 0303 	adc.w	r3, r3, r3
   13574:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   13578:	bf08      	it	eq
   1357a:	3d01      	subeq	r5, #1
   1357c:	d0f7      	beq.n	1356e <__aeabi_dmul+0x1c6>
   1357e:	ea43 0306 	orr.w	r3, r3, r6
   13582:	4770      	bx	lr
   13584:	ea94 0f0c 	teq	r4, ip
   13588:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1358c:	bf18      	it	ne
   1358e:	ea95 0f0c 	teqne	r5, ip
   13592:	d00c      	beq.n	135ae <__aeabi_dmul+0x206>
   13594:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   13598:	bf18      	it	ne
   1359a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1359e:	d1d1      	bne.n	13544 <__aeabi_dmul+0x19c>
   135a0:	ea81 0103 	eor.w	r1, r1, r3
   135a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   135a8:	f04f 0000 	mov.w	r0, #0
   135ac:	bd70      	pop	{r4, r5, r6, pc}
   135ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   135b2:	bf06      	itte	eq
   135b4:	4610      	moveq	r0, r2
   135b6:	4619      	moveq	r1, r3
   135b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   135bc:	d019      	beq.n	135f2 <__aeabi_dmul+0x24a>
   135be:	ea94 0f0c 	teq	r4, ip
   135c2:	d102      	bne.n	135ca <__aeabi_dmul+0x222>
   135c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   135c8:	d113      	bne.n	135f2 <__aeabi_dmul+0x24a>
   135ca:	ea95 0f0c 	teq	r5, ip
   135ce:	d105      	bne.n	135dc <__aeabi_dmul+0x234>
   135d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   135d4:	bf1c      	itt	ne
   135d6:	4610      	movne	r0, r2
   135d8:	4619      	movne	r1, r3
   135da:	d10a      	bne.n	135f2 <__aeabi_dmul+0x24a>
   135dc:	ea81 0103 	eor.w	r1, r1, r3
   135e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   135e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   135e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   135ec:	f04f 0000 	mov.w	r0, #0
   135f0:	bd70      	pop	{r4, r5, r6, pc}
   135f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   135f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   135fa:	bd70      	pop	{r4, r5, r6, pc}

000135fc <__aeabi_ddiv>:
   135fc:	b570      	push	{r4, r5, r6, lr}
   135fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
   13602:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   13606:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1360a:	bf1d      	ittte	ne
   1360c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   13610:	ea94 0f0c 	teqne	r4, ip
   13614:	ea95 0f0c 	teqne	r5, ip
   13618:	f000 f8a7 	bleq	1376a <__aeabi_ddiv+0x16e>
   1361c:	eba4 0405 	sub.w	r4, r4, r5
   13620:	ea81 0e03 	eor.w	lr, r1, r3
   13624:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   13628:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1362c:	f000 8088 	beq.w	13740 <__aeabi_ddiv+0x144>
   13630:	ea4f 3303 	mov.w	r3, r3, lsl #12
   13634:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   13638:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1363c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   13640:	ea4f 2202 	mov.w	r2, r2, lsl #8
   13644:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   13648:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1364c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   13650:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   13654:	429d      	cmp	r5, r3
   13656:	bf08      	it	eq
   13658:	4296      	cmpeq	r6, r2
   1365a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1365e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   13662:	d202      	bcs.n	1366a <__aeabi_ddiv+0x6e>
   13664:	085b      	lsrs	r3, r3, #1
   13666:	ea4f 0232 	mov.w	r2, r2, rrx
   1366a:	1ab6      	subs	r6, r6, r2
   1366c:	eb65 0503 	sbc.w	r5, r5, r3
   13670:	085b      	lsrs	r3, r3, #1
   13672:	ea4f 0232 	mov.w	r2, r2, rrx
   13676:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1367a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1367e:	ebb6 0e02 	subs.w	lr, r6, r2
   13682:	eb75 0e03 	sbcs.w	lr, r5, r3
   13686:	bf22      	ittt	cs
   13688:	1ab6      	subcs	r6, r6, r2
   1368a:	4675      	movcs	r5, lr
   1368c:	ea40 000c 	orrcs.w	r0, r0, ip
   13690:	085b      	lsrs	r3, r3, #1
   13692:	ea4f 0232 	mov.w	r2, r2, rrx
   13696:	ebb6 0e02 	subs.w	lr, r6, r2
   1369a:	eb75 0e03 	sbcs.w	lr, r5, r3
   1369e:	bf22      	ittt	cs
   136a0:	1ab6      	subcs	r6, r6, r2
   136a2:	4675      	movcs	r5, lr
   136a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   136a8:	085b      	lsrs	r3, r3, #1
   136aa:	ea4f 0232 	mov.w	r2, r2, rrx
   136ae:	ebb6 0e02 	subs.w	lr, r6, r2
   136b2:	eb75 0e03 	sbcs.w	lr, r5, r3
   136b6:	bf22      	ittt	cs
   136b8:	1ab6      	subcs	r6, r6, r2
   136ba:	4675      	movcs	r5, lr
   136bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   136c0:	085b      	lsrs	r3, r3, #1
   136c2:	ea4f 0232 	mov.w	r2, r2, rrx
   136c6:	ebb6 0e02 	subs.w	lr, r6, r2
   136ca:	eb75 0e03 	sbcs.w	lr, r5, r3
   136ce:	bf22      	ittt	cs
   136d0:	1ab6      	subcs	r6, r6, r2
   136d2:	4675      	movcs	r5, lr
   136d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   136d8:	ea55 0e06 	orrs.w	lr, r5, r6
   136dc:	d018      	beq.n	13710 <__aeabi_ddiv+0x114>
   136de:	ea4f 1505 	mov.w	r5, r5, lsl #4
   136e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   136e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   136ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   136ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   136f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   136f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   136fa:	d1c0      	bne.n	1367e <__aeabi_ddiv+0x82>
   136fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   13700:	d10b      	bne.n	1371a <__aeabi_ddiv+0x11e>
   13702:	ea41 0100 	orr.w	r1, r1, r0
   13706:	f04f 0000 	mov.w	r0, #0
   1370a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1370e:	e7b6      	b.n	1367e <__aeabi_ddiv+0x82>
   13710:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   13714:	bf04      	itt	eq
   13716:	4301      	orreq	r1, r0
   13718:	2000      	moveq	r0, #0
   1371a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1371e:	bf88      	it	hi
   13720:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   13724:	f63f aeaf 	bhi.w	13486 <__aeabi_dmul+0xde>
   13728:	ebb5 0c03 	subs.w	ip, r5, r3
   1372c:	bf04      	itt	eq
   1372e:	ebb6 0c02 	subseq.w	ip, r6, r2
   13732:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   13736:	f150 0000 	adcs.w	r0, r0, #0
   1373a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1373e:	bd70      	pop	{r4, r5, r6, pc}
   13740:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   13744:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   13748:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1374c:	bfc2      	ittt	gt
   1374e:	ebd4 050c 	rsbsgt	r5, r4, ip
   13752:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   13756:	bd70      	popgt	{r4, r5, r6, pc}
   13758:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1375c:	f04f 0e00 	mov.w	lr, #0
   13760:	3c01      	subs	r4, #1
   13762:	e690      	b.n	13486 <__aeabi_dmul+0xde>
   13764:	ea45 0e06 	orr.w	lr, r5, r6
   13768:	e68d      	b.n	13486 <__aeabi_dmul+0xde>
   1376a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1376e:	ea94 0f0c 	teq	r4, ip
   13772:	bf08      	it	eq
   13774:	ea95 0f0c 	teqeq	r5, ip
   13778:	f43f af3b 	beq.w	135f2 <__aeabi_dmul+0x24a>
   1377c:	ea94 0f0c 	teq	r4, ip
   13780:	d10a      	bne.n	13798 <__aeabi_ddiv+0x19c>
   13782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   13786:	f47f af34 	bne.w	135f2 <__aeabi_dmul+0x24a>
   1378a:	ea95 0f0c 	teq	r5, ip
   1378e:	f47f af25 	bne.w	135dc <__aeabi_dmul+0x234>
   13792:	4610      	mov	r0, r2
   13794:	4619      	mov	r1, r3
   13796:	e72c      	b.n	135f2 <__aeabi_dmul+0x24a>
   13798:	ea95 0f0c 	teq	r5, ip
   1379c:	d106      	bne.n	137ac <__aeabi_ddiv+0x1b0>
   1379e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   137a2:	f43f aefd 	beq.w	135a0 <__aeabi_dmul+0x1f8>
   137a6:	4610      	mov	r0, r2
   137a8:	4619      	mov	r1, r3
   137aa:	e722      	b.n	135f2 <__aeabi_dmul+0x24a>
   137ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   137b0:	bf18      	it	ne
   137b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   137b6:	f47f aec5 	bne.w	13544 <__aeabi_dmul+0x19c>
   137ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   137be:	f47f af0d 	bne.w	135dc <__aeabi_dmul+0x234>
   137c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   137c6:	f47f aeeb 	bne.w	135a0 <__aeabi_dmul+0x1f8>
   137ca:	e712      	b.n	135f2 <__aeabi_dmul+0x24a>

000137cc <__aeabi_d2uiz>:
   137cc:	004a      	lsls	r2, r1, #1
   137ce:	d211      	bcs.n	137f4 <__aeabi_d2uiz+0x28>
   137d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   137d4:	d211      	bcs.n	137fa <__aeabi_d2uiz+0x2e>
   137d6:	d50d      	bpl.n	137f4 <__aeabi_d2uiz+0x28>
   137d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   137dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   137e0:	d40e      	bmi.n	13800 <__aeabi_d2uiz+0x34>
   137e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   137e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   137ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   137ee:	fa23 f002 	lsr.w	r0, r3, r2
   137f2:	4770      	bx	lr
   137f4:	f04f 0000 	mov.w	r0, #0
   137f8:	4770      	bx	lr
   137fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   137fe:	d102      	bne.n	13806 <__aeabi_d2uiz+0x3a>
   13800:	f04f 30ff 	mov.w	r0, #4294967295
   13804:	4770      	bx	lr
   13806:	f04f 0000 	mov.w	r0, #0
   1380a:	4770      	bx	lr

0001380c <__aeabi_d2f>:
   1380c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   13810:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   13814:	bf24      	itt	cs
   13816:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   1381a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   1381e:	d90d      	bls.n	1383c <__aeabi_d2f+0x30>
   13820:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   13824:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   13828:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   1382c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   13830:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   13834:	bf08      	it	eq
   13836:	f020 0001 	biceq.w	r0, r0, #1
   1383a:	4770      	bx	lr
   1383c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   13840:	d121      	bne.n	13886 <__aeabi_d2f+0x7a>
   13842:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   13846:	bfbc      	itt	lt
   13848:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   1384c:	4770      	bxlt	lr
   1384e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   13852:	ea4f 5252 	mov.w	r2, r2, lsr #21
   13856:	f1c2 0218 	rsb	r2, r2, #24
   1385a:	f1c2 0c20 	rsb	ip, r2, #32
   1385e:	fa10 f30c 	lsls.w	r3, r0, ip
   13862:	fa20 f002 	lsr.w	r0, r0, r2
   13866:	bf18      	it	ne
   13868:	f040 0001 	orrne.w	r0, r0, #1
   1386c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   13870:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   13874:	fa03 fc0c 	lsl.w	ip, r3, ip
   13878:	ea40 000c 	orr.w	r0, r0, ip
   1387c:	fa23 f302 	lsr.w	r3, r3, r2
   13880:	ea4f 0343 	mov.w	r3, r3, lsl #1
   13884:	e7cc      	b.n	13820 <__aeabi_d2f+0x14>
   13886:	ea7f 5362 	mvns.w	r3, r2, asr #21
   1388a:	d107      	bne.n	1389c <__aeabi_d2f+0x90>
   1388c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   13890:	bf1e      	ittt	ne
   13892:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   13896:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   1389a:	4770      	bxne	lr
   1389c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   138a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   138a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   138a8:	4770      	bx	lr
   138aa:	bf00      	nop

000138ac <__aeabi_frsub>:
   138ac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   138b0:	e002      	b.n	138b8 <__addsf3>
   138b2:	bf00      	nop

000138b4 <__aeabi_fsub>:
   138b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000138b8 <__addsf3>:
   138b8:	0042      	lsls	r2, r0, #1
   138ba:	bf1f      	itttt	ne
   138bc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   138c0:	ea92 0f03 	teqne	r2, r3
   138c4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   138c8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   138cc:	d06a      	beq.n	139a4 <__addsf3+0xec>
   138ce:	ea4f 6212 	mov.w	r2, r2, lsr #24
   138d2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   138d6:	bfc1      	itttt	gt
   138d8:	18d2      	addgt	r2, r2, r3
   138da:	4041      	eorgt	r1, r0
   138dc:	4048      	eorgt	r0, r1
   138de:	4041      	eorgt	r1, r0
   138e0:	bfb8      	it	lt
   138e2:	425b      	neglt	r3, r3
   138e4:	2b19      	cmp	r3, #25
   138e6:	bf88      	it	hi
   138e8:	4770      	bxhi	lr
   138ea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   138ee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   138f2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   138f6:	bf18      	it	ne
   138f8:	4240      	negne	r0, r0
   138fa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   138fe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   13902:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   13906:	bf18      	it	ne
   13908:	4249      	negne	r1, r1
   1390a:	ea92 0f03 	teq	r2, r3
   1390e:	d03f      	beq.n	13990 <__addsf3+0xd8>
   13910:	f1a2 0201 	sub.w	r2, r2, #1
   13914:	fa41 fc03 	asr.w	ip, r1, r3
   13918:	eb10 000c 	adds.w	r0, r0, ip
   1391c:	f1c3 0320 	rsb	r3, r3, #32
   13920:	fa01 f103 	lsl.w	r1, r1, r3
   13924:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   13928:	d502      	bpl.n	13930 <__addsf3+0x78>
   1392a:	4249      	negs	r1, r1
   1392c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   13930:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   13934:	d313      	bcc.n	1395e <__addsf3+0xa6>
   13936:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   1393a:	d306      	bcc.n	1394a <__addsf3+0x92>
   1393c:	0840      	lsrs	r0, r0, #1
   1393e:	ea4f 0131 	mov.w	r1, r1, rrx
   13942:	f102 0201 	add.w	r2, r2, #1
   13946:	2afe      	cmp	r2, #254	; 0xfe
   13948:	d251      	bcs.n	139ee <__addsf3+0x136>
   1394a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   1394e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   13952:	bf08      	it	eq
   13954:	f020 0001 	biceq.w	r0, r0, #1
   13958:	ea40 0003 	orr.w	r0, r0, r3
   1395c:	4770      	bx	lr
   1395e:	0049      	lsls	r1, r1, #1
   13960:	eb40 0000 	adc.w	r0, r0, r0
   13964:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   13968:	f1a2 0201 	sub.w	r2, r2, #1
   1396c:	d1ed      	bne.n	1394a <__addsf3+0x92>
   1396e:	fab0 fc80 	clz	ip, r0
   13972:	f1ac 0c08 	sub.w	ip, ip, #8
   13976:	ebb2 020c 	subs.w	r2, r2, ip
   1397a:	fa00 f00c 	lsl.w	r0, r0, ip
   1397e:	bfaa      	itet	ge
   13980:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   13984:	4252      	neglt	r2, r2
   13986:	4318      	orrge	r0, r3
   13988:	bfbc      	itt	lt
   1398a:	40d0      	lsrlt	r0, r2
   1398c:	4318      	orrlt	r0, r3
   1398e:	4770      	bx	lr
   13990:	f092 0f00 	teq	r2, #0
   13994:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   13998:	bf06      	itte	eq
   1399a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   1399e:	3201      	addeq	r2, #1
   139a0:	3b01      	subne	r3, #1
   139a2:	e7b5      	b.n	13910 <__addsf3+0x58>
   139a4:	ea4f 0341 	mov.w	r3, r1, lsl #1
   139a8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   139ac:	bf18      	it	ne
   139ae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   139b2:	d021      	beq.n	139f8 <__addsf3+0x140>
   139b4:	ea92 0f03 	teq	r2, r3
   139b8:	d004      	beq.n	139c4 <__addsf3+0x10c>
   139ba:	f092 0f00 	teq	r2, #0
   139be:	bf08      	it	eq
   139c0:	4608      	moveq	r0, r1
   139c2:	4770      	bx	lr
   139c4:	ea90 0f01 	teq	r0, r1
   139c8:	bf1c      	itt	ne
   139ca:	2000      	movne	r0, #0
   139cc:	4770      	bxne	lr
   139ce:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   139d2:	d104      	bne.n	139de <__addsf3+0x126>
   139d4:	0040      	lsls	r0, r0, #1
   139d6:	bf28      	it	cs
   139d8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   139dc:	4770      	bx	lr
   139de:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   139e2:	bf3c      	itt	cc
   139e4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   139e8:	4770      	bxcc	lr
   139ea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   139ee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   139f2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   139f6:	4770      	bx	lr
   139f8:	ea7f 6222 	mvns.w	r2, r2, asr #24
   139fc:	bf16      	itet	ne
   139fe:	4608      	movne	r0, r1
   13a00:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   13a04:	4601      	movne	r1, r0
   13a06:	0242      	lsls	r2, r0, #9
   13a08:	bf06      	itte	eq
   13a0a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   13a0e:	ea90 0f01 	teqeq	r0, r1
   13a12:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   13a16:	4770      	bx	lr

00013a18 <__aeabi_ui2f>:
   13a18:	f04f 0300 	mov.w	r3, #0
   13a1c:	e004      	b.n	13a28 <__aeabi_i2f+0x8>
   13a1e:	bf00      	nop

00013a20 <__aeabi_i2f>:
   13a20:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   13a24:	bf48      	it	mi
   13a26:	4240      	negmi	r0, r0
   13a28:	ea5f 0c00 	movs.w	ip, r0
   13a2c:	bf08      	it	eq
   13a2e:	4770      	bxeq	lr
   13a30:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   13a34:	4601      	mov	r1, r0
   13a36:	f04f 0000 	mov.w	r0, #0
   13a3a:	e01c      	b.n	13a76 <__aeabi_l2f+0x2a>

00013a3c <__aeabi_ul2f>:
   13a3c:	ea50 0201 	orrs.w	r2, r0, r1
   13a40:	bf08      	it	eq
   13a42:	4770      	bxeq	lr
   13a44:	f04f 0300 	mov.w	r3, #0
   13a48:	e00a      	b.n	13a60 <__aeabi_l2f+0x14>
   13a4a:	bf00      	nop

00013a4c <__aeabi_l2f>:
   13a4c:	ea50 0201 	orrs.w	r2, r0, r1
   13a50:	bf08      	it	eq
   13a52:	4770      	bxeq	lr
   13a54:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   13a58:	d502      	bpl.n	13a60 <__aeabi_l2f+0x14>
   13a5a:	4240      	negs	r0, r0
   13a5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   13a60:	ea5f 0c01 	movs.w	ip, r1
   13a64:	bf02      	ittt	eq
   13a66:	4684      	moveq	ip, r0
   13a68:	4601      	moveq	r1, r0
   13a6a:	2000      	moveq	r0, #0
   13a6c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   13a70:	bf08      	it	eq
   13a72:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   13a76:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   13a7a:	fabc f28c 	clz	r2, ip
   13a7e:	3a08      	subs	r2, #8
   13a80:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   13a84:	db10      	blt.n	13aa8 <__aeabi_l2f+0x5c>
   13a86:	fa01 fc02 	lsl.w	ip, r1, r2
   13a8a:	4463      	add	r3, ip
   13a8c:	fa00 fc02 	lsl.w	ip, r0, r2
   13a90:	f1c2 0220 	rsb	r2, r2, #32
   13a94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   13a98:	fa20 f202 	lsr.w	r2, r0, r2
   13a9c:	eb43 0002 	adc.w	r0, r3, r2
   13aa0:	bf08      	it	eq
   13aa2:	f020 0001 	biceq.w	r0, r0, #1
   13aa6:	4770      	bx	lr
   13aa8:	f102 0220 	add.w	r2, r2, #32
   13aac:	fa01 fc02 	lsl.w	ip, r1, r2
   13ab0:	f1c2 0220 	rsb	r2, r2, #32
   13ab4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   13ab8:	fa21 f202 	lsr.w	r2, r1, r2
   13abc:	eb43 0002 	adc.w	r0, r3, r2
   13ac0:	bf08      	it	eq
   13ac2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   13ac6:	4770      	bx	lr

00013ac8 <__aeabi_fmul>:
   13ac8:	f04f 0cff 	mov.w	ip, #255	; 0xff
   13acc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   13ad0:	bf1e      	ittt	ne
   13ad2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   13ad6:	ea92 0f0c 	teqne	r2, ip
   13ada:	ea93 0f0c 	teqne	r3, ip
   13ade:	d06f      	beq.n	13bc0 <__aeabi_fmul+0xf8>
   13ae0:	441a      	add	r2, r3
   13ae2:	ea80 0c01 	eor.w	ip, r0, r1
   13ae6:	0240      	lsls	r0, r0, #9
   13ae8:	bf18      	it	ne
   13aea:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   13aee:	d01e      	beq.n	13b2e <__aeabi_fmul+0x66>
   13af0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   13af4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   13af8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   13afc:	fba0 3101 	umull	r3, r1, r0, r1
   13b00:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   13b04:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   13b08:	bf3e      	ittt	cc
   13b0a:	0049      	lslcc	r1, r1, #1
   13b0c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   13b10:	005b      	lslcc	r3, r3, #1
   13b12:	ea40 0001 	orr.w	r0, r0, r1
   13b16:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   13b1a:	2afd      	cmp	r2, #253	; 0xfd
   13b1c:	d81d      	bhi.n	13b5a <__aeabi_fmul+0x92>
   13b1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   13b22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   13b26:	bf08      	it	eq
   13b28:	f020 0001 	biceq.w	r0, r0, #1
   13b2c:	4770      	bx	lr
   13b2e:	f090 0f00 	teq	r0, #0
   13b32:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   13b36:	bf08      	it	eq
   13b38:	0249      	lsleq	r1, r1, #9
   13b3a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   13b3e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   13b42:	3a7f      	subs	r2, #127	; 0x7f
   13b44:	bfc2      	ittt	gt
   13b46:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   13b4a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   13b4e:	4770      	bxgt	lr
   13b50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   13b54:	f04f 0300 	mov.w	r3, #0
   13b58:	3a01      	subs	r2, #1
   13b5a:	dc5d      	bgt.n	13c18 <__aeabi_fmul+0x150>
   13b5c:	f112 0f19 	cmn.w	r2, #25
   13b60:	bfdc      	itt	le
   13b62:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   13b66:	4770      	bxle	lr
   13b68:	f1c2 0200 	rsb	r2, r2, #0
   13b6c:	0041      	lsls	r1, r0, #1
   13b6e:	fa21 f102 	lsr.w	r1, r1, r2
   13b72:	f1c2 0220 	rsb	r2, r2, #32
   13b76:	fa00 fc02 	lsl.w	ip, r0, r2
   13b7a:	ea5f 0031 	movs.w	r0, r1, rrx
   13b7e:	f140 0000 	adc.w	r0, r0, #0
   13b82:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   13b86:	bf08      	it	eq
   13b88:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   13b8c:	4770      	bx	lr
   13b8e:	f092 0f00 	teq	r2, #0
   13b92:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   13b96:	bf02      	ittt	eq
   13b98:	0040      	lsleq	r0, r0, #1
   13b9a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   13b9e:	3a01      	subeq	r2, #1
   13ba0:	d0f9      	beq.n	13b96 <__aeabi_fmul+0xce>
   13ba2:	ea40 000c 	orr.w	r0, r0, ip
   13ba6:	f093 0f00 	teq	r3, #0
   13baa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   13bae:	bf02      	ittt	eq
   13bb0:	0049      	lsleq	r1, r1, #1
   13bb2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   13bb6:	3b01      	subeq	r3, #1
   13bb8:	d0f9      	beq.n	13bae <__aeabi_fmul+0xe6>
   13bba:	ea41 010c 	orr.w	r1, r1, ip
   13bbe:	e78f      	b.n	13ae0 <__aeabi_fmul+0x18>
   13bc0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   13bc4:	ea92 0f0c 	teq	r2, ip
   13bc8:	bf18      	it	ne
   13bca:	ea93 0f0c 	teqne	r3, ip
   13bce:	d00a      	beq.n	13be6 <__aeabi_fmul+0x11e>
   13bd0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   13bd4:	bf18      	it	ne
   13bd6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   13bda:	d1d8      	bne.n	13b8e <__aeabi_fmul+0xc6>
   13bdc:	ea80 0001 	eor.w	r0, r0, r1
   13be0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   13be4:	4770      	bx	lr
   13be6:	f090 0f00 	teq	r0, #0
   13bea:	bf17      	itett	ne
   13bec:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   13bf0:	4608      	moveq	r0, r1
   13bf2:	f091 0f00 	teqne	r1, #0
   13bf6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   13bfa:	d014      	beq.n	13c26 <__aeabi_fmul+0x15e>
   13bfc:	ea92 0f0c 	teq	r2, ip
   13c00:	d101      	bne.n	13c06 <__aeabi_fmul+0x13e>
   13c02:	0242      	lsls	r2, r0, #9
   13c04:	d10f      	bne.n	13c26 <__aeabi_fmul+0x15e>
   13c06:	ea93 0f0c 	teq	r3, ip
   13c0a:	d103      	bne.n	13c14 <__aeabi_fmul+0x14c>
   13c0c:	024b      	lsls	r3, r1, #9
   13c0e:	bf18      	it	ne
   13c10:	4608      	movne	r0, r1
   13c12:	d108      	bne.n	13c26 <__aeabi_fmul+0x15e>
   13c14:	ea80 0001 	eor.w	r0, r0, r1
   13c18:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   13c1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   13c20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   13c24:	4770      	bx	lr
   13c26:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   13c2a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   13c2e:	4770      	bx	lr

00013c30 <__aeabi_fdiv>:
   13c30:	f04f 0cff 	mov.w	ip, #255	; 0xff
   13c34:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   13c38:	bf1e      	ittt	ne
   13c3a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   13c3e:	ea92 0f0c 	teqne	r2, ip
   13c42:	ea93 0f0c 	teqne	r3, ip
   13c46:	d069      	beq.n	13d1c <__aeabi_fdiv+0xec>
   13c48:	eba2 0203 	sub.w	r2, r2, r3
   13c4c:	ea80 0c01 	eor.w	ip, r0, r1
   13c50:	0249      	lsls	r1, r1, #9
   13c52:	ea4f 2040 	mov.w	r0, r0, lsl #9
   13c56:	d037      	beq.n	13cc8 <__aeabi_fdiv+0x98>
   13c58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   13c5c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   13c60:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   13c64:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   13c68:	428b      	cmp	r3, r1
   13c6a:	bf38      	it	cc
   13c6c:	005b      	lslcc	r3, r3, #1
   13c6e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   13c72:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   13c76:	428b      	cmp	r3, r1
   13c78:	bf24      	itt	cs
   13c7a:	1a5b      	subcs	r3, r3, r1
   13c7c:	ea40 000c 	orrcs.w	r0, r0, ip
   13c80:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   13c84:	bf24      	itt	cs
   13c86:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   13c8a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   13c8e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   13c92:	bf24      	itt	cs
   13c94:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   13c98:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   13c9c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   13ca0:	bf24      	itt	cs
   13ca2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   13ca6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   13caa:	011b      	lsls	r3, r3, #4
   13cac:	bf18      	it	ne
   13cae:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   13cb2:	d1e0      	bne.n	13c76 <__aeabi_fdiv+0x46>
   13cb4:	2afd      	cmp	r2, #253	; 0xfd
   13cb6:	f63f af50 	bhi.w	13b5a <__aeabi_fmul+0x92>
   13cba:	428b      	cmp	r3, r1
   13cbc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   13cc0:	bf08      	it	eq
   13cc2:	f020 0001 	biceq.w	r0, r0, #1
   13cc6:	4770      	bx	lr
   13cc8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   13ccc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   13cd0:	327f      	adds	r2, #127	; 0x7f
   13cd2:	bfc2      	ittt	gt
   13cd4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   13cd8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   13cdc:	4770      	bxgt	lr
   13cde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   13ce2:	f04f 0300 	mov.w	r3, #0
   13ce6:	3a01      	subs	r2, #1
   13ce8:	e737      	b.n	13b5a <__aeabi_fmul+0x92>
   13cea:	f092 0f00 	teq	r2, #0
   13cee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   13cf2:	bf02      	ittt	eq
   13cf4:	0040      	lsleq	r0, r0, #1
   13cf6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   13cfa:	3a01      	subeq	r2, #1
   13cfc:	d0f9      	beq.n	13cf2 <__aeabi_fdiv+0xc2>
   13cfe:	ea40 000c 	orr.w	r0, r0, ip
   13d02:	f093 0f00 	teq	r3, #0
   13d06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   13d0a:	bf02      	ittt	eq
   13d0c:	0049      	lsleq	r1, r1, #1
   13d0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   13d12:	3b01      	subeq	r3, #1
   13d14:	d0f9      	beq.n	13d0a <__aeabi_fdiv+0xda>
   13d16:	ea41 010c 	orr.w	r1, r1, ip
   13d1a:	e795      	b.n	13c48 <__aeabi_fdiv+0x18>
   13d1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   13d20:	ea92 0f0c 	teq	r2, ip
   13d24:	d108      	bne.n	13d38 <__aeabi_fdiv+0x108>
   13d26:	0242      	lsls	r2, r0, #9
   13d28:	f47f af7d 	bne.w	13c26 <__aeabi_fmul+0x15e>
   13d2c:	ea93 0f0c 	teq	r3, ip
   13d30:	f47f af70 	bne.w	13c14 <__aeabi_fmul+0x14c>
   13d34:	4608      	mov	r0, r1
   13d36:	e776      	b.n	13c26 <__aeabi_fmul+0x15e>
   13d38:	ea93 0f0c 	teq	r3, ip
   13d3c:	d104      	bne.n	13d48 <__aeabi_fdiv+0x118>
   13d3e:	024b      	lsls	r3, r1, #9
   13d40:	f43f af4c 	beq.w	13bdc <__aeabi_fmul+0x114>
   13d44:	4608      	mov	r0, r1
   13d46:	e76e      	b.n	13c26 <__aeabi_fmul+0x15e>
   13d48:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   13d4c:	bf18      	it	ne
   13d4e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   13d52:	d1ca      	bne.n	13cea <__aeabi_fdiv+0xba>
   13d54:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   13d58:	f47f af5c 	bne.w	13c14 <__aeabi_fmul+0x14c>
   13d5c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   13d60:	f47f af3c 	bne.w	13bdc <__aeabi_fmul+0x114>
   13d64:	e75f      	b.n	13c26 <__aeabi_fmul+0x15e>
   13d66:	bf00      	nop

00013d68 <__gesf2>:
   13d68:	f04f 3cff 	mov.w	ip, #4294967295
   13d6c:	e006      	b.n	13d7c <__cmpsf2+0x4>
   13d6e:	bf00      	nop

00013d70 <__lesf2>:
   13d70:	f04f 0c01 	mov.w	ip, #1
   13d74:	e002      	b.n	13d7c <__cmpsf2+0x4>
   13d76:	bf00      	nop

00013d78 <__cmpsf2>:
   13d78:	f04f 0c01 	mov.w	ip, #1
   13d7c:	f84d cd04 	str.w	ip, [sp, #-4]!
   13d80:	ea4f 0240 	mov.w	r2, r0, lsl #1
   13d84:	ea4f 0341 	mov.w	r3, r1, lsl #1
   13d88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   13d8c:	bf18      	it	ne
   13d8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   13d92:	d011      	beq.n	13db8 <__cmpsf2+0x40>
   13d94:	b001      	add	sp, #4
   13d96:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   13d9a:	bf18      	it	ne
   13d9c:	ea90 0f01 	teqne	r0, r1
   13da0:	bf58      	it	pl
   13da2:	ebb2 0003 	subspl.w	r0, r2, r3
   13da6:	bf88      	it	hi
   13da8:	17c8      	asrhi	r0, r1, #31
   13daa:	bf38      	it	cc
   13dac:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   13db0:	bf18      	it	ne
   13db2:	f040 0001 	orrne.w	r0, r0, #1
   13db6:	4770      	bx	lr
   13db8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   13dbc:	d102      	bne.n	13dc4 <__cmpsf2+0x4c>
   13dbe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   13dc2:	d105      	bne.n	13dd0 <__cmpsf2+0x58>
   13dc4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   13dc8:	d1e4      	bne.n	13d94 <__cmpsf2+0x1c>
   13dca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   13dce:	d0e1      	beq.n	13d94 <__cmpsf2+0x1c>
   13dd0:	f85d 0b04 	ldr.w	r0, [sp], #4
   13dd4:	4770      	bx	lr
   13dd6:	bf00      	nop

00013dd8 <__aeabi_cfrcmple>:
   13dd8:	4684      	mov	ip, r0
   13dda:	4608      	mov	r0, r1
   13ddc:	4661      	mov	r1, ip
   13dde:	e7ff      	b.n	13de0 <__aeabi_cfcmpeq>

00013de0 <__aeabi_cfcmpeq>:
   13de0:	b50f      	push	{r0, r1, r2, r3, lr}
   13de2:	f7ff ffc9 	bl	13d78 <__cmpsf2>
   13de6:	2800      	cmp	r0, #0
   13de8:	bf48      	it	mi
   13dea:	f110 0f00 	cmnmi.w	r0, #0
   13dee:	bd0f      	pop	{r0, r1, r2, r3, pc}

00013df0 <__aeabi_fcmpeq>:
   13df0:	f84d ed08 	str.w	lr, [sp, #-8]!
   13df4:	f7ff fff4 	bl	13de0 <__aeabi_cfcmpeq>
   13df8:	bf0c      	ite	eq
   13dfa:	2001      	moveq	r0, #1
   13dfc:	2000      	movne	r0, #0
   13dfe:	f85d fb08 	ldr.w	pc, [sp], #8
   13e02:	bf00      	nop

00013e04 <__aeabi_fcmplt>:
   13e04:	f84d ed08 	str.w	lr, [sp, #-8]!
   13e08:	f7ff ffea 	bl	13de0 <__aeabi_cfcmpeq>
   13e0c:	bf34      	ite	cc
   13e0e:	2001      	movcc	r0, #1
   13e10:	2000      	movcs	r0, #0
   13e12:	f85d fb08 	ldr.w	pc, [sp], #8
   13e16:	bf00      	nop

00013e18 <__aeabi_fcmple>:
   13e18:	f84d ed08 	str.w	lr, [sp, #-8]!
   13e1c:	f7ff ffe0 	bl	13de0 <__aeabi_cfcmpeq>
   13e20:	bf94      	ite	ls
   13e22:	2001      	movls	r0, #1
   13e24:	2000      	movhi	r0, #0
   13e26:	f85d fb08 	ldr.w	pc, [sp], #8
   13e2a:	bf00      	nop

00013e2c <__aeabi_fcmpge>:
   13e2c:	f84d ed08 	str.w	lr, [sp, #-8]!
   13e30:	f7ff ffd2 	bl	13dd8 <__aeabi_cfrcmple>
   13e34:	bf94      	ite	ls
   13e36:	2001      	movls	r0, #1
   13e38:	2000      	movhi	r0, #0
   13e3a:	f85d fb08 	ldr.w	pc, [sp], #8
   13e3e:	bf00      	nop

00013e40 <__aeabi_fcmpgt>:
   13e40:	f84d ed08 	str.w	lr, [sp, #-8]!
   13e44:	f7ff ffc8 	bl	13dd8 <__aeabi_cfrcmple>
   13e48:	bf34      	ite	cc
   13e4a:	2001      	movcc	r0, #1
   13e4c:	2000      	movcs	r0, #0
   13e4e:	f85d fb08 	ldr.w	pc, [sp], #8
   13e52:	bf00      	nop

00013e54 <__aeabi_f2iz>:
   13e54:	ea4f 0240 	mov.w	r2, r0, lsl #1
   13e58:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   13e5c:	d30f      	bcc.n	13e7e <__aeabi_f2iz+0x2a>
   13e5e:	f04f 039e 	mov.w	r3, #158	; 0x9e
   13e62:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   13e66:	d90d      	bls.n	13e84 <__aeabi_f2iz+0x30>
   13e68:	ea4f 2300 	mov.w	r3, r0, lsl #8
   13e6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   13e70:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   13e74:	fa23 f002 	lsr.w	r0, r3, r2
   13e78:	bf18      	it	ne
   13e7a:	4240      	negne	r0, r0
   13e7c:	4770      	bx	lr
   13e7e:	f04f 0000 	mov.w	r0, #0
   13e82:	4770      	bx	lr
   13e84:	f112 0f61 	cmn.w	r2, #97	; 0x61
   13e88:	d101      	bne.n	13e8e <__aeabi_f2iz+0x3a>
   13e8a:	0242      	lsls	r2, r0, #9
   13e8c:	d105      	bne.n	13e9a <__aeabi_f2iz+0x46>
   13e8e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   13e92:	bf08      	it	eq
   13e94:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   13e98:	4770      	bx	lr
   13e9a:	f04f 0000 	mov.w	r0, #0
   13e9e:	4770      	bx	lr

00013ea0 <__aeabi_f2uiz>:
   13ea0:	0042      	lsls	r2, r0, #1
   13ea2:	d20e      	bcs.n	13ec2 <__aeabi_f2uiz+0x22>
   13ea4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   13ea8:	d30b      	bcc.n	13ec2 <__aeabi_f2uiz+0x22>
   13eaa:	f04f 039e 	mov.w	r3, #158	; 0x9e
   13eae:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   13eb2:	d409      	bmi.n	13ec8 <__aeabi_f2uiz+0x28>
   13eb4:	ea4f 2300 	mov.w	r3, r0, lsl #8
   13eb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   13ebc:	fa23 f002 	lsr.w	r0, r3, r2
   13ec0:	4770      	bx	lr
   13ec2:	f04f 0000 	mov.w	r0, #0
   13ec6:	4770      	bx	lr
   13ec8:	f112 0f61 	cmn.w	r2, #97	; 0x61
   13ecc:	d101      	bne.n	13ed2 <__aeabi_f2uiz+0x32>
   13ece:	0242      	lsls	r2, r0, #9
   13ed0:	d102      	bne.n	13ed8 <__aeabi_f2uiz+0x38>
   13ed2:	f04f 30ff 	mov.w	r0, #4294967295
   13ed6:	4770      	bx	lr
   13ed8:	f04f 0000 	mov.w	r0, #0
   13edc:	4770      	bx	lr
   13ede:	bf00      	nop

00013ee0 <__aeabi_uldivmod>:
   13ee0:	b94b      	cbnz	r3, 13ef6 <__aeabi_uldivmod+0x16>
   13ee2:	b942      	cbnz	r2, 13ef6 <__aeabi_uldivmod+0x16>
   13ee4:	2900      	cmp	r1, #0
   13ee6:	bf08      	it	eq
   13ee8:	2800      	cmpeq	r0, #0
   13eea:	d002      	beq.n	13ef2 <__aeabi_uldivmod+0x12>
   13eec:	f04f 31ff 	mov.w	r1, #4294967295
   13ef0:	4608      	mov	r0, r1
   13ef2:	f000 b839 	b.w	13f68 <__aeabi_idiv0>
   13ef6:	b082      	sub	sp, #8
   13ef8:	46ec      	mov	ip, sp
   13efa:	e92d 5000 	stmdb	sp!, {ip, lr}
   13efe:	f000 f81d 	bl	13f3c <__gnu_uldivmod_helper>
   13f02:	f8dd e004 	ldr.w	lr, [sp, #4]
   13f06:	b002      	add	sp, #8
   13f08:	bc0c      	pop	{r2, r3}
   13f0a:	4770      	bx	lr

00013f0c <__gnu_ldivmod_helper>:
   13f0c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   13f10:	461e      	mov	r6, r3
   13f12:	4614      	mov	r4, r2
   13f14:	4680      	mov	r8, r0
   13f16:	4689      	mov	r9, r1
   13f18:	f000 f828 	bl	13f6c <__divdi3>
   13f1c:	fba4 2300 	umull	r2, r3, r4, r0
   13f20:	fb04 f401 	mul.w	r4, r4, r1
   13f24:	fb00 4406 	mla	r4, r0, r6, r4
   13f28:	18e3      	adds	r3, r4, r3
   13f2a:	9c06      	ldr	r4, [sp, #24]
   13f2c:	ebb8 0202 	subs.w	r2, r8, r2
   13f30:	eb69 0303 	sbc.w	r3, r9, r3
   13f34:	e9c4 2300 	strd	r2, r3, [r4]
   13f38:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

00013f3c <__gnu_uldivmod_helper>:
   13f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13f3e:	4614      	mov	r4, r2
   13f40:	4606      	mov	r6, r0
   13f42:	460f      	mov	r7, r1
   13f44:	461d      	mov	r5, r3
   13f46:	f000 f9c3 	bl	142d0 <__udivdi3>
   13f4a:	fb00 f505 	mul.w	r5, r0, r5
   13f4e:	fba0 2304 	umull	r2, r3, r0, r4
   13f52:	fb04 5401 	mla	r4, r4, r1, r5
   13f56:	18e3      	adds	r3, r4, r3
   13f58:	9c06      	ldr	r4, [sp, #24]
   13f5a:	1ab2      	subs	r2, r6, r2
   13f5c:	eb67 0303 	sbc.w	r3, r7, r3
   13f60:	e9c4 2300 	strd	r2, r3, [r4]
   13f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13f66:	bf00      	nop

00013f68 <__aeabi_idiv0>:
   13f68:	4770      	bx	lr
   13f6a:	bf00      	nop

00013f6c <__divdi3>:
   13f6c:	2900      	cmp	r1, #0
   13f6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f72:	461c      	mov	r4, r3
   13f74:	b085      	sub	sp, #20
   13f76:	bfa8      	it	ge
   13f78:	f04f 0800 	movge.w	r8, #0
   13f7c:	f2c0 80c9 	blt.w	14112 <__divdi3+0x1a6>
   13f80:	2c00      	cmp	r4, #0
   13f82:	f2c0 80c0 	blt.w	14106 <__divdi3+0x19a>
   13f86:	460f      	mov	r7, r1
   13f88:	4694      	mov	ip, r2
   13f8a:	4614      	mov	r4, r2
   13f8c:	4605      	mov	r5, r0
   13f8e:	460e      	mov	r6, r1
   13f90:	2b00      	cmp	r3, #0
   13f92:	d14b      	bne.n	1402c <__divdi3+0xc0>
   13f94:	42ba      	cmp	r2, r7
   13f96:	d96a      	bls.n	1406e <__divdi3+0x102>
   13f98:	fab2 f382 	clz	r3, r2
   13f9c:	b153      	cbz	r3, 13fb4 <__divdi3+0x48>
   13f9e:	f1c3 0120 	rsb	r1, r3, #32
   13fa2:	fa07 f603 	lsl.w	r6, r7, r3
   13fa6:	fa20 f201 	lsr.w	r2, r0, r1
   13faa:	fa0c f403 	lsl.w	r4, ip, r3
   13fae:	4316      	orrs	r6, r2
   13fb0:	fa00 f503 	lsl.w	r5, r0, r3
   13fb4:	ea4f 4914 	mov.w	r9, r4, lsr #16
   13fb8:	4630      	mov	r0, r6
   13fba:	4649      	mov	r1, r9
   13fbc:	b2a7      	uxth	r7, r4
   13fbe:	f000 fb27 	bl	14610 <__aeabi_uidiv>
   13fc2:	4649      	mov	r1, r9
   13fc4:	4682      	mov	sl, r0
   13fc6:	4630      	mov	r0, r6
   13fc8:	f000 fc50 	bl	1486c <__aeabi_uidivmod>
   13fcc:	0c28      	lsrs	r0, r5, #16
   13fce:	fb07 f30a 	mul.w	r3, r7, sl
   13fd2:	ea40 4b01 	orr.w	fp, r0, r1, lsl #16
   13fd6:	455b      	cmp	r3, fp
   13fd8:	d90b      	bls.n	13ff2 <__divdi3+0x86>
   13fda:	eb1b 0b04 	adds.w	fp, fp, r4
   13fde:	f10a 32ff 	add.w	r2, sl, #4294967295
   13fe2:	d205      	bcs.n	13ff0 <__divdi3+0x84>
   13fe4:	455b      	cmp	r3, fp
   13fe6:	bf84      	itt	hi
   13fe8:	f1aa 0a02 	subhi.w	sl, sl, #2
   13fec:	44a3      	addhi	fp, r4
   13fee:	d800      	bhi.n	13ff2 <__divdi3+0x86>
   13ff0:	4692      	mov	sl, r2
   13ff2:	ebc3 0b0b 	rsb	fp, r3, fp
   13ff6:	4649      	mov	r1, r9
   13ff8:	4658      	mov	r0, fp
   13ffa:	b2ad      	uxth	r5, r5
   13ffc:	f000 fb08 	bl	14610 <__aeabi_uidiv>
   14000:	4649      	mov	r1, r9
   14002:	4606      	mov	r6, r0
   14004:	4658      	mov	r0, fp
   14006:	f000 fc31 	bl	1486c <__aeabi_uidivmod>
   1400a:	fb07 f706 	mul.w	r7, r7, r6
   1400e:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   14012:	42af      	cmp	r7, r5
   14014:	d906      	bls.n	14024 <__divdi3+0xb8>
   14016:	1e73      	subs	r3, r6, #1
   14018:	192d      	adds	r5, r5, r4
   1401a:	d202      	bcs.n	14022 <__divdi3+0xb6>
   1401c:	3e02      	subs	r6, #2
   1401e:	42af      	cmp	r7, r5
   14020:	d800      	bhi.n	14024 <__divdi3+0xb8>
   14022:	461e      	mov	r6, r3
   14024:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
   14028:	2700      	movs	r7, #0
   1402a:	e003      	b.n	14034 <__divdi3+0xc8>
   1402c:	42bb      	cmp	r3, r7
   1402e:	d90c      	bls.n	1404a <__divdi3+0xde>
   14030:	2700      	movs	r7, #0
   14032:	463e      	mov	r6, r7
   14034:	4630      	mov	r0, r6
   14036:	4639      	mov	r1, r7
   14038:	f1b8 0f00 	cmp.w	r8, #0
   1403c:	d002      	beq.n	14044 <__divdi3+0xd8>
   1403e:	4240      	negs	r0, r0
   14040:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   14044:	b005      	add	sp, #20
   14046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1404a:	fab3 f483 	clz	r4, r3
   1404e:	2c00      	cmp	r4, #0
   14050:	f040 80b2 	bne.w	141b8 <__divdi3+0x24c>
   14054:	42bb      	cmp	r3, r7
   14056:	bf2c      	ite	cs
   14058:	2700      	movcs	r7, #0
   1405a:	2701      	movcc	r7, #1
   1405c:	4282      	cmp	r2, r0
   1405e:	bf98      	it	ls
   14060:	f047 0701 	orrls.w	r7, r7, #1
   14064:	2f00      	cmp	r7, #0
   14066:	d0e4      	beq.n	14032 <__divdi3+0xc6>
   14068:	4627      	mov	r7, r4
   1406a:	2601      	movs	r6, #1
   1406c:	e7e2      	b.n	14034 <__divdi3+0xc8>
   1406e:	b922      	cbnz	r2, 1407a <__divdi3+0x10e>
   14070:	2001      	movs	r0, #1
   14072:	4611      	mov	r1, r2
   14074:	f000 facc 	bl	14610 <__aeabi_uidiv>
   14078:	4604      	mov	r4, r0
   1407a:	fab4 f384 	clz	r3, r4
   1407e:	2b00      	cmp	r3, #0
   14080:	d14d      	bne.n	1411e <__divdi3+0x1b2>
   14082:	1b36      	subs	r6, r6, r4
   14084:	ea4f 4914 	mov.w	r9, r4, lsr #16
   14088:	2701      	movs	r7, #1
   1408a:	b2a3      	uxth	r3, r4
   1408c:	9302      	str	r3, [sp, #8]
   1408e:	4649      	mov	r1, r9
   14090:	4630      	mov	r0, r6
   14092:	f000 fabd 	bl	14610 <__aeabi_uidiv>
   14096:	4649      	mov	r1, r9
   14098:	4682      	mov	sl, r0
   1409a:	4630      	mov	r0, r6
   1409c:	f000 fbe6 	bl	1486c <__aeabi_uidivmod>
   140a0:	9802      	ldr	r0, [sp, #8]
   140a2:	0c2a      	lsrs	r2, r5, #16
   140a4:	fb00 f30a 	mul.w	r3, r0, sl
   140a8:	ea42 4b01 	orr.w	fp, r2, r1, lsl #16
   140ac:	455b      	cmp	r3, fp
   140ae:	d90c      	bls.n	140ca <__divdi3+0x15e>
   140b0:	eb1b 0b04 	adds.w	fp, fp, r4
   140b4:	f10a 32ff 	add.w	r2, sl, #4294967295
   140b8:	f080 80ff 	bcs.w	142ba <__divdi3+0x34e>
   140bc:	455b      	cmp	r3, fp
   140be:	bf84      	itt	hi
   140c0:	f1aa 0a02 	subhi.w	sl, sl, #2
   140c4:	44a3      	addhi	fp, r4
   140c6:	f240 80f8 	bls.w	142ba <__divdi3+0x34e>
   140ca:	ebc3 0b0b 	rsb	fp, r3, fp
   140ce:	4649      	mov	r1, r9
   140d0:	4658      	mov	r0, fp
   140d2:	f000 fa9d 	bl	14610 <__aeabi_uidiv>
   140d6:	4649      	mov	r1, r9
   140d8:	4606      	mov	r6, r0
   140da:	4658      	mov	r0, fp
   140dc:	f000 fbc6 	bl	1486c <__aeabi_uidivmod>
   140e0:	9b02      	ldr	r3, [sp, #8]
   140e2:	fa1f fc85 	uxth.w	ip, r5
   140e6:	fb03 f306 	mul.w	r3, r3, r6
   140ea:	ea4c 4501 	orr.w	r5, ip, r1, lsl #16
   140ee:	42ab      	cmp	r3, r5
   140f0:	d906      	bls.n	14100 <__divdi3+0x194>
   140f2:	1e72      	subs	r2, r6, #1
   140f4:	192d      	adds	r5, r5, r4
   140f6:	d202      	bcs.n	140fe <__divdi3+0x192>
   140f8:	3e02      	subs	r6, #2
   140fa:	42ab      	cmp	r3, r5
   140fc:	d800      	bhi.n	14100 <__divdi3+0x194>
   140fe:	4616      	mov	r6, r2
   14100:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
   14104:	e796      	b.n	14034 <__divdi3+0xc8>
   14106:	4252      	negs	r2, r2
   14108:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1410c:	ea6f 0808 	mvn.w	r8, r8
   14110:	e739      	b.n	13f86 <__divdi3+0x1a>
   14112:	4240      	negs	r0, r0
   14114:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   14118:	f04f 38ff 	mov.w	r8, #4294967295
   1411c:	e730      	b.n	13f80 <__divdi3+0x14>
   1411e:	409c      	lsls	r4, r3
   14120:	f1c3 0120 	rsb	r1, r3, #32
   14124:	fa26 f701 	lsr.w	r7, r6, r1
   14128:	fa06 fa03 	lsl.w	sl, r6, r3
   1412c:	ea4f 4914 	mov.w	r9, r4, lsr #16
   14130:	fa25 f201 	lsr.w	r2, r5, r1
   14134:	4638      	mov	r0, r7
   14136:	4649      	mov	r1, r9
   14138:	ea42 0b0a 	orr.w	fp, r2, sl
   1413c:	409d      	lsls	r5, r3
   1413e:	f000 fa67 	bl	14610 <__aeabi_uidiv>
   14142:	4649      	mov	r1, r9
   14144:	b2a6      	uxth	r6, r4
   14146:	4682      	mov	sl, r0
   14148:	4638      	mov	r0, r7
   1414a:	f000 fb8f 	bl	1486c <__aeabi_uidivmod>
   1414e:	ea4f 471b 	mov.w	r7, fp, lsr #16
   14152:	fb06 f30a 	mul.w	r3, r6, sl
   14156:	9602      	str	r6, [sp, #8]
   14158:	ea47 4601 	orr.w	r6, r7, r1, lsl #16
   1415c:	42b3      	cmp	r3, r6
   1415e:	d90b      	bls.n	14178 <__divdi3+0x20c>
   14160:	1936      	adds	r6, r6, r4
   14162:	f10a 32ff 	add.w	r2, sl, #4294967295
   14166:	f080 80b0 	bcs.w	142ca <__divdi3+0x35e>
   1416a:	42b3      	cmp	r3, r6
   1416c:	bf84      	itt	hi
   1416e:	f1aa 0a02 	subhi.w	sl, sl, #2
   14172:	1936      	addhi	r6, r6, r4
   14174:	f240 80a9 	bls.w	142ca <__divdi3+0x35e>
   14178:	1af6      	subs	r6, r6, r3
   1417a:	4649      	mov	r1, r9
   1417c:	4630      	mov	r0, r6
   1417e:	f000 fa47 	bl	14610 <__aeabi_uidiv>
   14182:	4649      	mov	r1, r9
   14184:	4607      	mov	r7, r0
   14186:	4630      	mov	r0, r6
   14188:	f000 fb70 	bl	1486c <__aeabi_uidivmod>
   1418c:	9b02      	ldr	r3, [sp, #8]
   1418e:	fa1f f08b 	uxth.w	r0, fp
   14192:	fb03 f307 	mul.w	r3, r3, r7
   14196:	ea40 4601 	orr.w	r6, r0, r1, lsl #16
   1419a:	42b3      	cmp	r3, r6
   1419c:	d908      	bls.n	141b0 <__divdi3+0x244>
   1419e:	1e7a      	subs	r2, r7, #1
   141a0:	1936      	adds	r6, r6, r4
   141a2:	f080 808c 	bcs.w	142be <__divdi3+0x352>
   141a6:	42b3      	cmp	r3, r6
   141a8:	f240 8089 	bls.w	142be <__divdi3+0x352>
   141ac:	3f02      	subs	r7, #2
   141ae:	1936      	adds	r6, r6, r4
   141b0:	1af6      	subs	r6, r6, r3
   141b2:	ea47 470a 	orr.w	r7, r7, sl, lsl #16
   141b6:	e76a      	b.n	1408e <__divdi3+0x122>
   141b8:	f1c4 0b20 	rsb	fp, r4, #32
   141bc:	fa03 f904 	lsl.w	r9, r3, r4
   141c0:	fa22 f30b 	lsr.w	r3, r2, fp
   141c4:	fa27 fa0b 	lsr.w	sl, r7, fp
   141c8:	ea43 0909 	orr.w	r9, r3, r9
   141cc:	fa20 f10b 	lsr.w	r1, r0, fp
   141d0:	fa07 f604 	lsl.w	r6, r7, r4
   141d4:	4650      	mov	r0, sl
   141d6:	ea4f 4b19 	mov.w	fp, r9, lsr #16
   141da:	ea41 0706 	orr.w	r7, r1, r6
   141de:	4659      	mov	r1, fp
   141e0:	fa02 fe04 	lsl.w	lr, r2, r4
   141e4:	9703      	str	r7, [sp, #12]
   141e6:	f8cd e008 	str.w	lr, [sp, #8]
   141ea:	f000 fa11 	bl	14610 <__aeabi_uidiv>
   141ee:	4659      	mov	r1, fp
   141f0:	4607      	mov	r7, r0
   141f2:	4650      	mov	r0, sl
   141f4:	f000 fb3a 	bl	1486c <__aeabi_uidivmod>
   141f8:	9a03      	ldr	r2, [sp, #12]
   141fa:	fa1f f389 	uxth.w	r3, r9
   141fe:	0c16      	lsrs	r6, r2, #16
   14200:	fb03 f207 	mul.w	r2, r3, r7
   14204:	ea46 4a01 	orr.w	sl, r6, r1, lsl #16
   14208:	4552      	cmp	r2, sl
   1420a:	d907      	bls.n	1421c <__divdi3+0x2b0>
   1420c:	1e79      	subs	r1, r7, #1
   1420e:	eb1a 0a09 	adds.w	sl, sl, r9
   14212:	d258      	bcs.n	142c6 <__divdi3+0x35a>
   14214:	4552      	cmp	r2, sl
   14216:	d956      	bls.n	142c6 <__divdi3+0x35a>
   14218:	3f02      	subs	r7, #2
   1421a:	44ca      	add	sl, r9
   1421c:	ebc2 0a0a 	rsb	sl, r2, sl
   14220:	4659      	mov	r1, fp
   14222:	4650      	mov	r0, sl
   14224:	9301      	str	r3, [sp, #4]
   14226:	f000 f9f3 	bl	14610 <__aeabi_uidiv>
   1422a:	4659      	mov	r1, fp
   1422c:	4606      	mov	r6, r0
   1422e:	4650      	mov	r0, sl
   14230:	f000 fb1c 	bl	1486c <__aeabi_uidivmod>
   14234:	9b01      	ldr	r3, [sp, #4]
   14236:	9a03      	ldr	r2, [sp, #12]
   14238:	fb03 f306 	mul.w	r3, r3, r6
   1423c:	b290      	uxth	r0, r2
   1423e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
   14242:	4293      	cmp	r3, r2
   14244:	d907      	bls.n	14256 <__divdi3+0x2ea>
   14246:	1e71      	subs	r1, r6, #1
   14248:	eb12 0209 	adds.w	r2, r2, r9
   1424c:	d239      	bcs.n	142c2 <__divdi3+0x356>
   1424e:	4293      	cmp	r3, r2
   14250:	d937      	bls.n	142c2 <__divdi3+0x356>
   14252:	3e02      	subs	r6, #2
   14254:	444a      	add	r2, r9
   14256:	9802      	ldr	r0, [sp, #8]
   14258:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
   1425c:	1ad2      	subs	r2, r2, r3
   1425e:	b2b3      	uxth	r3, r6
   14260:	0c37      	lsrs	r7, r6, #16
   14262:	fa1f fe80 	uxth.w	lr, r0
   14266:	ea4f 4c10 	mov.w	ip, r0, lsr #16
   1426a:	fb0e f903 	mul.w	r9, lr, r3
   1426e:	fb0e f007 	mul.w	r0, lr, r7
   14272:	fb0c 0103 	mla	r1, ip, r3, r0
   14276:	fb0c fe07 	mul.w	lr, ip, r7
   1427a:	eb01 4119 	add.w	r1, r1, r9, lsr #16
   1427e:	4288      	cmp	r0, r1
   14280:	bf88      	it	hi
   14282:	f50e 3e80 	addhi.w	lr, lr, #65536	; 0x10000
   14286:	eb0e 4c11 	add.w	ip, lr, r1, lsr #16
   1428a:	4562      	cmp	r2, ip
   1428c:	d312      	bcc.n	142b4 <__divdi3+0x348>
   1428e:	ea4f 4101 	mov.w	r1, r1, lsl #16
   14292:	fa1f f989 	uxth.w	r9, r9
   14296:	bf14      	ite	ne
   14298:	2700      	movne	r7, #0
   1429a:	2701      	moveq	r7, #1
   1429c:	fa05 f404 	lsl.w	r4, r5, r4
   142a0:	eb01 0209 	add.w	r2, r1, r9
   142a4:	4294      	cmp	r4, r2
   142a6:	bf2c      	ite	cs
   142a8:	2700      	movcs	r7, #0
   142aa:	f007 0701 	andcc.w	r7, r7, #1
   142ae:	2f00      	cmp	r7, #0
   142b0:	f43f aec0 	beq.w	14034 <__divdi3+0xc8>
   142b4:	3e01      	subs	r6, #1
   142b6:	2700      	movs	r7, #0
   142b8:	e6bc      	b.n	14034 <__divdi3+0xc8>
   142ba:	4692      	mov	sl, r2
   142bc:	e705      	b.n	140ca <__divdi3+0x15e>
   142be:	4617      	mov	r7, r2
   142c0:	e776      	b.n	141b0 <__divdi3+0x244>
   142c2:	460e      	mov	r6, r1
   142c4:	e7c7      	b.n	14256 <__divdi3+0x2ea>
   142c6:	460f      	mov	r7, r1
   142c8:	e7a8      	b.n	1421c <__divdi3+0x2b0>
   142ca:	4692      	mov	sl, r2
   142cc:	e754      	b.n	14178 <__divdi3+0x20c>
   142ce:	bf00      	nop

000142d0 <__udivdi3>:
   142d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142d4:	4605      	mov	r5, r0
   142d6:	b083      	sub	sp, #12
   142d8:	460c      	mov	r4, r1
   142da:	4617      	mov	r7, r2
   142dc:	4680      	mov	r8, r0
   142de:	468b      	mov	fp, r1
   142e0:	2b00      	cmp	r3, #0
   142e2:	d152      	bne.n	1438a <__udivdi3+0xba>
   142e4:	428a      	cmp	r2, r1
   142e6:	d964      	bls.n	143b2 <__udivdi3+0xe2>
   142e8:	fab2 f382 	clz	r3, r2
   142ec:	b153      	cbz	r3, 14304 <__udivdi3+0x34>
   142ee:	f1c3 0420 	rsb	r4, r3, #32
   142f2:	fa01 f103 	lsl.w	r1, r1, r3
   142f6:	fa20 f204 	lsr.w	r2, r0, r4
   142fa:	409f      	lsls	r7, r3
   142fc:	ea42 0b01 	orr.w	fp, r2, r1
   14300:	fa00 f803 	lsl.w	r8, r0, r3
   14304:	0c3c      	lsrs	r4, r7, #16
   14306:	4658      	mov	r0, fp
   14308:	4621      	mov	r1, r4
   1430a:	b2be      	uxth	r6, r7
   1430c:	f000 f980 	bl	14610 <__aeabi_uidiv>
   14310:	4621      	mov	r1, r4
   14312:	4681      	mov	r9, r0
   14314:	4658      	mov	r0, fp
   14316:	f000 faa9 	bl	1486c <__aeabi_uidivmod>
   1431a:	ea4f 4018 	mov.w	r0, r8, lsr #16
   1431e:	fb06 f309 	mul.w	r3, r6, r9
   14322:	ea40 4a01 	orr.w	sl, r0, r1, lsl #16
   14326:	4553      	cmp	r3, sl
   14328:	d90b      	bls.n	14342 <__udivdi3+0x72>
   1432a:	eb1a 0a07 	adds.w	sl, sl, r7
   1432e:	f109 32ff 	add.w	r2, r9, #4294967295
   14332:	d205      	bcs.n	14340 <__udivdi3+0x70>
   14334:	4553      	cmp	r3, sl
   14336:	bf84      	itt	hi
   14338:	f1a9 0902 	subhi.w	r9, r9, #2
   1433c:	44ba      	addhi	sl, r7
   1433e:	d800      	bhi.n	14342 <__udivdi3+0x72>
   14340:	4691      	mov	r9, r2
   14342:	ebc3 0a0a 	rsb	sl, r3, sl
   14346:	4621      	mov	r1, r4
   14348:	4650      	mov	r0, sl
   1434a:	f000 f961 	bl	14610 <__aeabi_uidiv>
   1434e:	4621      	mov	r1, r4
   14350:	4605      	mov	r5, r0
   14352:	4650      	mov	r0, sl
   14354:	f000 fa8a 	bl	1486c <__aeabi_uidivmod>
   14358:	fa1f f388 	uxth.w	r3, r8
   1435c:	fb06 f605 	mul.w	r6, r6, r5
   14360:	ea43 4801 	orr.w	r8, r3, r1, lsl #16
   14364:	4546      	cmp	r6, r8
   14366:	d908      	bls.n	1437a <__udivdi3+0xaa>
   14368:	1e6b      	subs	r3, r5, #1
   1436a:	eb18 0807 	adds.w	r8, r8, r7
   1436e:	f080 812e 	bcs.w	145ce <__udivdi3+0x2fe>
   14372:	3d02      	subs	r5, #2
   14374:	4546      	cmp	r6, r8
   14376:	f240 812a 	bls.w	145ce <__udivdi3+0x2fe>
   1437a:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
   1437e:	2600      	movs	r6, #0
   14380:	4631      	mov	r1, r6
   14382:	4628      	mov	r0, r5
   14384:	b003      	add	sp, #12
   14386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1438a:	428b      	cmp	r3, r1
   1438c:	d85a      	bhi.n	14444 <__udivdi3+0x174>
   1438e:	fab3 f683 	clz	r6, r3
   14392:	2e00      	cmp	r6, #0
   14394:	d159      	bne.n	1444a <__udivdi3+0x17a>
   14396:	428b      	cmp	r3, r1
   14398:	bf2c      	ite	cs
   1439a:	2400      	movcs	r4, #0
   1439c:	2401      	movcc	r4, #1
   1439e:	4282      	cmp	r2, r0
   143a0:	bf8c      	ite	hi
   143a2:	4625      	movhi	r5, r4
   143a4:	f044 0501 	orrls.w	r5, r4, #1
   143a8:	2d00      	cmp	r5, #0
   143aa:	f040 8116 	bne.w	145da <__udivdi3+0x30a>
   143ae:	462e      	mov	r6, r5
   143b0:	e7e6      	b.n	14380 <__udivdi3+0xb0>
   143b2:	b922      	cbnz	r2, 143be <__udivdi3+0xee>
   143b4:	2001      	movs	r0, #1
   143b6:	4611      	mov	r1, r2
   143b8:	f000 f92a 	bl	14610 <__aeabi_uidiv>
   143bc:	4607      	mov	r7, r0
   143be:	fab7 f387 	clz	r3, r7
   143c2:	2b00      	cmp	r3, #0
   143c4:	f040 80bd 	bne.w	14542 <__udivdi3+0x272>
   143c8:	1be4      	subs	r4, r4, r7
   143ca:	ea4f 4b17 	mov.w	fp, r7, lsr #16
   143ce:	fa1f f987 	uxth.w	r9, r7
   143d2:	2601      	movs	r6, #1
   143d4:	4659      	mov	r1, fp
   143d6:	4620      	mov	r0, r4
   143d8:	f000 f91a 	bl	14610 <__aeabi_uidiv>
   143dc:	4659      	mov	r1, fp
   143de:	4605      	mov	r5, r0
   143e0:	4620      	mov	r0, r4
   143e2:	f000 fa43 	bl	1486c <__aeabi_uidivmod>
   143e6:	ea4f 4018 	mov.w	r0, r8, lsr #16
   143ea:	fb09 f305 	mul.w	r3, r9, r5
   143ee:	ea40 4a01 	orr.w	sl, r0, r1, lsl #16
   143f2:	4553      	cmp	r3, sl
   143f4:	d907      	bls.n	14406 <__udivdi3+0x136>
   143f6:	1e6a      	subs	r2, r5, #1
   143f8:	eb1a 0a07 	adds.w	sl, sl, r7
   143fc:	d202      	bcs.n	14404 <__udivdi3+0x134>
   143fe:	4553      	cmp	r3, sl
   14400:	f200 8101 	bhi.w	14606 <__udivdi3+0x336>
   14404:	4615      	mov	r5, r2
   14406:	ebc3 0a0a 	rsb	sl, r3, sl
   1440a:	4659      	mov	r1, fp
   1440c:	4650      	mov	r0, sl
   1440e:	f000 f8ff 	bl	14610 <__aeabi_uidiv>
   14412:	4659      	mov	r1, fp
   14414:	4604      	mov	r4, r0
   14416:	4650      	mov	r0, sl
   14418:	f000 fa28 	bl	1486c <__aeabi_uidivmod>
   1441c:	fa1f f388 	uxth.w	r3, r8
   14420:	fb09 f904 	mul.w	r9, r9, r4
   14424:	ea43 4801 	orr.w	r8, r3, r1, lsl #16
   14428:	45c1      	cmp	r9, r8
   1442a:	d908      	bls.n	1443e <__udivdi3+0x16e>
   1442c:	1e63      	subs	r3, r4, #1
   1442e:	eb18 0807 	adds.w	r8, r8, r7
   14432:	f080 80ce 	bcs.w	145d2 <__udivdi3+0x302>
   14436:	3c02      	subs	r4, #2
   14438:	45c1      	cmp	r9, r8
   1443a:	f240 80ca 	bls.w	145d2 <__udivdi3+0x302>
   1443e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   14442:	e79d      	b.n	14380 <__udivdi3+0xb0>
   14444:	2600      	movs	r6, #0
   14446:	4635      	mov	r5, r6
   14448:	e79a      	b.n	14380 <__udivdi3+0xb0>
   1444a:	f1c6 0e20 	rsb	lr, r6, #32
   1444e:	fa03 f706 	lsl.w	r7, r3, r6
   14452:	fa22 fc0e 	lsr.w	ip, r2, lr
   14456:	fa21 fb0e 	lsr.w	fp, r1, lr
   1445a:	ea4c 0707 	orr.w	r7, ip, r7
   1445e:	fa20 fa0e 	lsr.w	sl, r0, lr
   14462:	fa01 f306 	lsl.w	r3, r1, r6
   14466:	4658      	mov	r0, fp
   14468:	ea4f 4817 	mov.w	r8, r7, lsr #16
   1446c:	ea4a 0103 	orr.w	r1, sl, r3
   14470:	9101      	str	r1, [sp, #4]
   14472:	4641      	mov	r1, r8
   14474:	fa02 f406 	lsl.w	r4, r2, r6
   14478:	9400      	str	r4, [sp, #0]
   1447a:	f000 f8c9 	bl	14610 <__aeabi_uidiv>
   1447e:	4641      	mov	r1, r8
   14480:	b2bc      	uxth	r4, r7
   14482:	4682      	mov	sl, r0
   14484:	4658      	mov	r0, fp
   14486:	f000 f9f1 	bl	1486c <__aeabi_uidivmod>
   1448a:	9801      	ldr	r0, [sp, #4]
   1448c:	fb04 f30a 	mul.w	r3, r4, sl
   14490:	0c02      	lsrs	r2, r0, #16
   14492:	ea42 4b01 	orr.w	fp, r2, r1, lsl #16
   14496:	455b      	cmp	r3, fp
   14498:	d906      	bls.n	144a8 <__udivdi3+0x1d8>
   1449a:	eb1b 0b07 	adds.w	fp, fp, r7
   1449e:	f10a 32ff 	add.w	r2, sl, #4294967295
   144a2:	f0c0 80a4 	bcc.w	145ee <__udivdi3+0x31e>
   144a6:	4692      	mov	sl, r2
   144a8:	ebc3 0b0b 	rsb	fp, r3, fp
   144ac:	4641      	mov	r1, r8
   144ae:	4658      	mov	r0, fp
   144b0:	f000 f8ae 	bl	14610 <__aeabi_uidiv>
   144b4:	4641      	mov	r1, r8
   144b6:	4681      	mov	r9, r0
   144b8:	4658      	mov	r0, fp
   144ba:	f000 f9d7 	bl	1486c <__aeabi_uidivmod>
   144be:	9801      	ldr	r0, [sp, #4]
   144c0:	fb04 f409 	mul.w	r4, r4, r9
   144c4:	b282      	uxth	r2, r0
   144c6:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
   144ca:	429c      	cmp	r4, r3
   144cc:	d905      	bls.n	144da <__udivdi3+0x20a>
   144ce:	19db      	adds	r3, r3, r7
   144d0:	f109 32ff 	add.w	r2, r9, #4294967295
   144d4:	f0c0 8083 	bcc.w	145de <__udivdi3+0x30e>
   144d8:	4691      	mov	r9, r2
   144da:	9f00      	ldr	r7, [sp, #0]
   144dc:	ea49 490a 	orr.w	r9, r9, sl, lsl #16
   144e0:	1b1c      	subs	r4, r3, r4
   144e2:	fa1f f389 	uxth.w	r3, r9
   144e6:	fa1f fe87 	uxth.w	lr, r7
   144ea:	0c3a      	lsrs	r2, r7, #16
   144ec:	ea4f 4719 	mov.w	r7, r9, lsr #16
   144f0:	fb0e fc03 	mul.w	ip, lr, r3
   144f4:	fb0e f007 	mul.w	r0, lr, r7
   144f8:	fb02 0103 	mla	r1, r2, r3, r0
   144fc:	fb02 fe07 	mul.w	lr, r2, r7
   14500:	eb01 411c 	add.w	r1, r1, ip, lsr #16
   14504:	4288      	cmp	r0, r1
   14506:	bf88      	it	hi
   14508:	f50e 3e80 	addhi.w	lr, lr, #65536	; 0x10000
   1450c:	eb0e 4311 	add.w	r3, lr, r1, lsr #16
   14510:	429c      	cmp	r4, r3
   14512:	d312      	bcc.n	1453a <__udivdi3+0x26a>
   14514:	ea4f 4101 	mov.w	r1, r1, lsl #16
   14518:	fa1f f28c 	uxth.w	r2, ip
   1451c:	fa05 f506 	lsl.w	r5, r5, r6
   14520:	bf14      	ite	ne
   14522:	2000      	movne	r0, #0
   14524:	2001      	moveq	r0, #1
   14526:	188e      	adds	r6, r1, r2
   14528:	42b5      	cmp	r5, r6
   1452a:	bf2c      	ite	cs
   1452c:	2600      	movcs	r6, #0
   1452e:	f000 0601 	andcc.w	r6, r0, #1
   14532:	464d      	mov	r5, r9
   14534:	2e00      	cmp	r6, #0
   14536:	f43f af23 	beq.w	14380 <__udivdi3+0xb0>
   1453a:	f109 35ff 	add.w	r5, r9, #4294967295
   1453e:	2600      	movs	r6, #0
   14540:	e71e      	b.n	14380 <__udivdi3+0xb0>
   14542:	409f      	lsls	r7, r3
   14544:	f1c3 0120 	rsb	r1, r3, #32
   14548:	fa24 f901 	lsr.w	r9, r4, r1
   1454c:	fa04 f203 	lsl.w	r2, r4, r3
   14550:	ea4f 4b17 	mov.w	fp, r7, lsr #16
   14554:	fa25 f601 	lsr.w	r6, r5, r1
   14558:	4648      	mov	r0, r9
   1455a:	4659      	mov	r1, fp
   1455c:	ea46 0a02 	orr.w	sl, r6, r2
   14560:	fa05 f803 	lsl.w	r8, r5, r3
   14564:	f000 f854 	bl	14610 <__aeabi_uidiv>
   14568:	4659      	mov	r1, fp
   1456a:	ea4f 451a 	mov.w	r5, sl, lsr #16
   1456e:	4606      	mov	r6, r0
   14570:	4648      	mov	r0, r9
   14572:	f000 f97b 	bl	1486c <__aeabi_uidivmod>
   14576:	fa1f f987 	uxth.w	r9, r7
   1457a:	fb09 f306 	mul.w	r3, r9, r6
   1457e:	ea45 4401 	orr.w	r4, r5, r1, lsl #16
   14582:	42a3      	cmp	r3, r4
   14584:	d906      	bls.n	14594 <__udivdi3+0x2c4>
   14586:	1e72      	subs	r2, r6, #1
   14588:	19e4      	adds	r4, r4, r7
   1458a:	d238      	bcs.n	145fe <__udivdi3+0x32e>
   1458c:	42a3      	cmp	r3, r4
   1458e:	d936      	bls.n	145fe <__udivdi3+0x32e>
   14590:	3e02      	subs	r6, #2
   14592:	19e4      	adds	r4, r4, r7
   14594:	1ae4      	subs	r4, r4, r3
   14596:	4659      	mov	r1, fp
   14598:	4620      	mov	r0, r4
   1459a:	f000 f839 	bl	14610 <__aeabi_uidiv>
   1459e:	4659      	mov	r1, fp
   145a0:	4605      	mov	r5, r0
   145a2:	4620      	mov	r0, r4
   145a4:	f000 f962 	bl	1486c <__aeabi_uidivmod>
   145a8:	fa1f f48a 	uxth.w	r4, sl
   145ac:	fb09 f305 	mul.w	r3, r9, r5
   145b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   145b4:	42a3      	cmp	r3, r4
   145b6:	d906      	bls.n	145c6 <__udivdi3+0x2f6>
   145b8:	1e6a      	subs	r2, r5, #1
   145ba:	19e4      	adds	r4, r4, r7
   145bc:	d221      	bcs.n	14602 <__udivdi3+0x332>
   145be:	42a3      	cmp	r3, r4
   145c0:	d91f      	bls.n	14602 <__udivdi3+0x332>
   145c2:	3d02      	subs	r5, #2
   145c4:	19e4      	adds	r4, r4, r7
   145c6:	1ae4      	subs	r4, r4, r3
   145c8:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
   145cc:	e702      	b.n	143d4 <__udivdi3+0x104>
   145ce:	461d      	mov	r5, r3
   145d0:	e6d3      	b.n	1437a <__udivdi3+0xaa>
   145d2:	461c      	mov	r4, r3
   145d4:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   145d8:	e6d2      	b.n	14380 <__udivdi3+0xb0>
   145da:	2501      	movs	r5, #1
   145dc:	e6d0      	b.n	14380 <__udivdi3+0xb0>
   145de:	429c      	cmp	r4, r3
   145e0:	bf84      	itt	hi
   145e2:	f1a9 0902 	subhi.w	r9, r9, #2
   145e6:	19db      	addhi	r3, r3, r7
   145e8:	f63f af77 	bhi.w	144da <__udivdi3+0x20a>
   145ec:	e774      	b.n	144d8 <__udivdi3+0x208>
   145ee:	455b      	cmp	r3, fp
   145f0:	bf84      	itt	hi
   145f2:	f1aa 0a02 	subhi.w	sl, sl, #2
   145f6:	44bb      	addhi	fp, r7
   145f8:	f63f af56 	bhi.w	144a8 <__udivdi3+0x1d8>
   145fc:	e753      	b.n	144a6 <__udivdi3+0x1d6>
   145fe:	4616      	mov	r6, r2
   14600:	e7c8      	b.n	14594 <__udivdi3+0x2c4>
   14602:	4615      	mov	r5, r2
   14604:	e7df      	b.n	145c6 <__udivdi3+0x2f6>
   14606:	3d02      	subs	r5, #2
   14608:	44ba      	add	sl, r7
   1460a:	e6fc      	b.n	14406 <__udivdi3+0x136>
   1460c:	0000      	movs	r0, r0
	...

00014610 <__aeabi_uidiv>:
   14610:	1e4a      	subs	r2, r1, #1
   14612:	bf08      	it	eq
   14614:	4770      	bxeq	lr
   14616:	f0c0 8124 	bcc.w	14862 <__aeabi_uidiv+0x252>
   1461a:	4288      	cmp	r0, r1
   1461c:	f240 8116 	bls.w	1484c <__aeabi_uidiv+0x23c>
   14620:	4211      	tst	r1, r2
   14622:	f000 8117 	beq.w	14854 <__aeabi_uidiv+0x244>
   14626:	fab0 f380 	clz	r3, r0
   1462a:	fab1 f281 	clz	r2, r1
   1462e:	eba2 0303 	sub.w	r3, r2, r3
   14632:	f1c3 031f 	rsb	r3, r3, #31
   14636:	a204      	add	r2, pc, #16	; (adr r2, 14648 <__aeabi_uidiv+0x38>)
   14638:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   1463c:	f04f 0200 	mov.w	r2, #0
   14640:	469f      	mov	pc, r3
   14642:	bf00      	nop
   14644:	f3af 8000 	nop.w
   14648:	ebb0 7fc1 	cmp.w	r0, r1, lsl #31
   1464c:	bf00      	nop
   1464e:	eb42 0202 	adc.w	r2, r2, r2
   14652:	bf28      	it	cs
   14654:	eba0 70c1 	subcs.w	r0, r0, r1, lsl #31
   14658:	ebb0 7f81 	cmp.w	r0, r1, lsl #30
   1465c:	bf00      	nop
   1465e:	eb42 0202 	adc.w	r2, r2, r2
   14662:	bf28      	it	cs
   14664:	eba0 7081 	subcs.w	r0, r0, r1, lsl #30
   14668:	ebb0 7f41 	cmp.w	r0, r1, lsl #29
   1466c:	bf00      	nop
   1466e:	eb42 0202 	adc.w	r2, r2, r2
   14672:	bf28      	it	cs
   14674:	eba0 7041 	subcs.w	r0, r0, r1, lsl #29
   14678:	ebb0 7f01 	cmp.w	r0, r1, lsl #28
   1467c:	bf00      	nop
   1467e:	eb42 0202 	adc.w	r2, r2, r2
   14682:	bf28      	it	cs
   14684:	eba0 7001 	subcs.w	r0, r0, r1, lsl #28
   14688:	ebb0 6fc1 	cmp.w	r0, r1, lsl #27
   1468c:	bf00      	nop
   1468e:	eb42 0202 	adc.w	r2, r2, r2
   14692:	bf28      	it	cs
   14694:	eba0 60c1 	subcs.w	r0, r0, r1, lsl #27
   14698:	ebb0 6f81 	cmp.w	r0, r1, lsl #26
   1469c:	bf00      	nop
   1469e:	eb42 0202 	adc.w	r2, r2, r2
   146a2:	bf28      	it	cs
   146a4:	eba0 6081 	subcs.w	r0, r0, r1, lsl #26
   146a8:	ebb0 6f41 	cmp.w	r0, r1, lsl #25
   146ac:	bf00      	nop
   146ae:	eb42 0202 	adc.w	r2, r2, r2
   146b2:	bf28      	it	cs
   146b4:	eba0 6041 	subcs.w	r0, r0, r1, lsl #25
   146b8:	ebb0 6f01 	cmp.w	r0, r1, lsl #24
   146bc:	bf00      	nop
   146be:	eb42 0202 	adc.w	r2, r2, r2
   146c2:	bf28      	it	cs
   146c4:	eba0 6001 	subcs.w	r0, r0, r1, lsl #24
   146c8:	ebb0 5fc1 	cmp.w	r0, r1, lsl #23
   146cc:	bf00      	nop
   146ce:	eb42 0202 	adc.w	r2, r2, r2
   146d2:	bf28      	it	cs
   146d4:	eba0 50c1 	subcs.w	r0, r0, r1, lsl #23
   146d8:	ebb0 5f81 	cmp.w	r0, r1, lsl #22
   146dc:	bf00      	nop
   146de:	eb42 0202 	adc.w	r2, r2, r2
   146e2:	bf28      	it	cs
   146e4:	eba0 5081 	subcs.w	r0, r0, r1, lsl #22
   146e8:	ebb0 5f41 	cmp.w	r0, r1, lsl #21
   146ec:	bf00      	nop
   146ee:	eb42 0202 	adc.w	r2, r2, r2
   146f2:	bf28      	it	cs
   146f4:	eba0 5041 	subcs.w	r0, r0, r1, lsl #21
   146f8:	ebb0 5f01 	cmp.w	r0, r1, lsl #20
   146fc:	bf00      	nop
   146fe:	eb42 0202 	adc.w	r2, r2, r2
   14702:	bf28      	it	cs
   14704:	eba0 5001 	subcs.w	r0, r0, r1, lsl #20
   14708:	ebb0 4fc1 	cmp.w	r0, r1, lsl #19
   1470c:	bf00      	nop
   1470e:	eb42 0202 	adc.w	r2, r2, r2
   14712:	bf28      	it	cs
   14714:	eba0 40c1 	subcs.w	r0, r0, r1, lsl #19
   14718:	ebb0 4f81 	cmp.w	r0, r1, lsl #18
   1471c:	bf00      	nop
   1471e:	eb42 0202 	adc.w	r2, r2, r2
   14722:	bf28      	it	cs
   14724:	eba0 4081 	subcs.w	r0, r0, r1, lsl #18
   14728:	ebb0 4f41 	cmp.w	r0, r1, lsl #17
   1472c:	bf00      	nop
   1472e:	eb42 0202 	adc.w	r2, r2, r2
   14732:	bf28      	it	cs
   14734:	eba0 4041 	subcs.w	r0, r0, r1, lsl #17
   14738:	ebb0 4f01 	cmp.w	r0, r1, lsl #16
   1473c:	bf00      	nop
   1473e:	eb42 0202 	adc.w	r2, r2, r2
   14742:	bf28      	it	cs
   14744:	eba0 4001 	subcs.w	r0, r0, r1, lsl #16
   14748:	ebb0 3fc1 	cmp.w	r0, r1, lsl #15
   1474c:	bf00      	nop
   1474e:	eb42 0202 	adc.w	r2, r2, r2
   14752:	bf28      	it	cs
   14754:	eba0 30c1 	subcs.w	r0, r0, r1, lsl #15
   14758:	ebb0 3f81 	cmp.w	r0, r1, lsl #14
   1475c:	bf00      	nop
   1475e:	eb42 0202 	adc.w	r2, r2, r2
   14762:	bf28      	it	cs
   14764:	eba0 3081 	subcs.w	r0, r0, r1, lsl #14
   14768:	ebb0 3f41 	cmp.w	r0, r1, lsl #13
   1476c:	bf00      	nop
   1476e:	eb42 0202 	adc.w	r2, r2, r2
   14772:	bf28      	it	cs
   14774:	eba0 3041 	subcs.w	r0, r0, r1, lsl #13
   14778:	ebb0 3f01 	cmp.w	r0, r1, lsl #12
   1477c:	bf00      	nop
   1477e:	eb42 0202 	adc.w	r2, r2, r2
   14782:	bf28      	it	cs
   14784:	eba0 3001 	subcs.w	r0, r0, r1, lsl #12
   14788:	ebb0 2fc1 	cmp.w	r0, r1, lsl #11
   1478c:	bf00      	nop
   1478e:	eb42 0202 	adc.w	r2, r2, r2
   14792:	bf28      	it	cs
   14794:	eba0 20c1 	subcs.w	r0, r0, r1, lsl #11
   14798:	ebb0 2f81 	cmp.w	r0, r1, lsl #10
   1479c:	bf00      	nop
   1479e:	eb42 0202 	adc.w	r2, r2, r2
   147a2:	bf28      	it	cs
   147a4:	eba0 2081 	subcs.w	r0, r0, r1, lsl #10
   147a8:	ebb0 2f41 	cmp.w	r0, r1, lsl #9
   147ac:	bf00      	nop
   147ae:	eb42 0202 	adc.w	r2, r2, r2
   147b2:	bf28      	it	cs
   147b4:	eba0 2041 	subcs.w	r0, r0, r1, lsl #9
   147b8:	ebb0 2f01 	cmp.w	r0, r1, lsl #8
   147bc:	bf00      	nop
   147be:	eb42 0202 	adc.w	r2, r2, r2
   147c2:	bf28      	it	cs
   147c4:	eba0 2001 	subcs.w	r0, r0, r1, lsl #8
   147c8:	ebb0 1fc1 	cmp.w	r0, r1, lsl #7
   147cc:	bf00      	nop
   147ce:	eb42 0202 	adc.w	r2, r2, r2
   147d2:	bf28      	it	cs
   147d4:	eba0 10c1 	subcs.w	r0, r0, r1, lsl #7
   147d8:	ebb0 1f81 	cmp.w	r0, r1, lsl #6
   147dc:	bf00      	nop
   147de:	eb42 0202 	adc.w	r2, r2, r2
   147e2:	bf28      	it	cs
   147e4:	eba0 1081 	subcs.w	r0, r0, r1, lsl #6
   147e8:	ebb0 1f41 	cmp.w	r0, r1, lsl #5
   147ec:	bf00      	nop
   147ee:	eb42 0202 	adc.w	r2, r2, r2
   147f2:	bf28      	it	cs
   147f4:	eba0 1041 	subcs.w	r0, r0, r1, lsl #5
   147f8:	ebb0 1f01 	cmp.w	r0, r1, lsl #4
   147fc:	bf00      	nop
   147fe:	eb42 0202 	adc.w	r2, r2, r2
   14802:	bf28      	it	cs
   14804:	eba0 1001 	subcs.w	r0, r0, r1, lsl #4
   14808:	ebb0 0fc1 	cmp.w	r0, r1, lsl #3
   1480c:	bf00      	nop
   1480e:	eb42 0202 	adc.w	r2, r2, r2
   14812:	bf28      	it	cs
   14814:	eba0 00c1 	subcs.w	r0, r0, r1, lsl #3
   14818:	ebb0 0f81 	cmp.w	r0, r1, lsl #2
   1481c:	bf00      	nop
   1481e:	eb42 0202 	adc.w	r2, r2, r2
   14822:	bf28      	it	cs
   14824:	eba0 0081 	subcs.w	r0, r0, r1, lsl #2
   14828:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
   1482c:	bf00      	nop
   1482e:	eb42 0202 	adc.w	r2, r2, r2
   14832:	bf28      	it	cs
   14834:	eba0 0041 	subcs.w	r0, r0, r1, lsl #1
   14838:	ebb0 0f01 	cmp.w	r0, r1
   1483c:	bf00      	nop
   1483e:	eb42 0202 	adc.w	r2, r2, r2
   14842:	bf28      	it	cs
   14844:	eba0 0001 	subcs.w	r0, r0, r1
   14848:	4610      	mov	r0, r2
   1484a:	4770      	bx	lr
   1484c:	bf0c      	ite	eq
   1484e:	2001      	moveq	r0, #1
   14850:	2000      	movne	r0, #0
   14852:	4770      	bx	lr
   14854:	fab1 f281 	clz	r2, r1
   14858:	f1c2 021f 	rsb	r2, r2, #31
   1485c:	fa20 f002 	lsr.w	r0, r0, r2
   14860:	4770      	bx	lr
   14862:	b108      	cbz	r0, 14868 <__aeabi_uidiv+0x258>
   14864:	f04f 30ff 	mov.w	r0, #4294967295
   14868:	f7ff bb7e 	b.w	13f68 <__aeabi_idiv0>

0001486c <__aeabi_uidivmod>:
   1486c:	2900      	cmp	r1, #0
   1486e:	d0f8      	beq.n	14862 <__aeabi_uidiv+0x252>
   14870:	e92d 4003 	stmdb	sp!, {r0, r1, lr}
   14874:	f7ff fecc 	bl	14610 <__aeabi_uidiv>
   14878:	e8bd 4006 	ldmia.w	sp!, {r1, r2, lr}
   1487c:	fb02 f300 	mul.w	r3, r2, r0
   14880:	eba1 0103 	sub.w	r1, r1, r3
   14884:	4770      	bx	lr
   14886:	bf00      	nop

00014888 <__cxa_pure_virtual>:
   14888:	f24c 0100 	movw	r1, #49152	; 0xc000
   1488c:	221b      	movs	r2, #27
   1488e:	b508      	push	{r3, lr}
   14890:	f2c0 0102 	movt	r1, #2
   14894:	2002      	movs	r0, #2
   14896:	f00e f8c3 	bl	22a20 <write>
   1489a:	f000 f819 	bl	148d0 <std::terminate()>
   1489e:	bf00      	nop

000148a0 <operator delete(void*)>:
   148a0:	b108      	cbz	r0, 148a6 <operator delete(void*)+0x6>
   148a2:	f00b bb8b 	b.w	1ffbc <free>
   148a6:	4770      	bx	lr

000148a8 <__cxxabiv1::__terminate(void (*)())>:
   148a8:	b508      	push	{r3, lr}
   148aa:	4780      	blx	r0
   148ac:	f00b f8aa 	bl	1fa04 <abort>
   148b0:	f000 f9fe 	bl	14cb0 <__cxa_begin_catch>
   148b4:	f00b f8a6 	bl	1fa04 <abort>
   148b8:	460c      	mov	r4, r1
   148ba:	4605      	mov	r5, r0
   148bc:	f000 fa44 	bl	14d48 <__cxa_end_catch>
   148c0:	3401      	adds	r4, #1
   148c2:	d001      	beq.n	148c8 <__cxxabiv1::__terminate(void (*)())+0x20>
   148c4:	f000 f916 	bl	14af4 <__cxa_end_cleanup>
   148c8:	4628      	mov	r0, r5
   148ca:	f000 f83f 	bl	1494c <__cxa_call_unexpected>
   148ce:	bf00      	nop

000148d0 <std::terminate()>:
   148d0:	b508      	push	{r3, lr}
   148d2:	f240 031c 	movw	r3, #28
   148d6:	f2c1 0300 	movt	r3, #4096	; 0x1000
   148da:	6818      	ldr	r0, [r3, #0]
   148dc:	f7ff ffe4 	bl	148a8 <__cxxabiv1::__terminate(void (*)())>

000148e0 <__cxxabiv1::__unexpected(void (*)())>:
   148e0:	b508      	push	{r3, lr}
   148e2:	4780      	blx	r0
   148e4:	f7ff fff4 	bl	148d0 <std::terminate()>

000148e8 <std::unexpected()>:
   148e8:	f240 0020 	movw	r0, #32
   148ec:	f2c1 0000 	movt	r0, #4096	; 0x1000
   148f0:	b508      	push	{r3, lr}
   148f2:	6803      	ldr	r3, [r0, #0]
   148f4:	4798      	blx	r3
   148f6:	f7ff ffeb 	bl	148d0 <std::terminate()>
   148fa:	bf00      	nop

000148fc <__cxa_call_terminate>:
   148fc:	b508      	push	{r3, lr}
   148fe:	4604      	mov	r4, r0
   14900:	b120      	cbz	r0, 1490c <__cxa_call_terminate+0x10>
   14902:	f000 f9d5 	bl	14cb0 <__cxa_begin_catch>
   14906:	7823      	ldrb	r3, [r4, #0]
   14908:	2b47      	cmp	r3, #71	; 0x47
   1490a:	d001      	beq.n	14910 <__cxa_call_terminate+0x14>
   1490c:	f7ff ffe0 	bl	148d0 <std::terminate()>
   14910:	7860      	ldrb	r0, [r4, #1]
   14912:	284e      	cmp	r0, #78	; 0x4e
   14914:	d1fa      	bne.n	1490c <__cxa_call_terminate+0x10>
   14916:	78a1      	ldrb	r1, [r4, #2]
   14918:	2955      	cmp	r1, #85	; 0x55
   1491a:	d1f7      	bne.n	1490c <__cxa_call_terminate+0x10>
   1491c:	78e2      	ldrb	r2, [r4, #3]
   1491e:	2a43      	cmp	r2, #67	; 0x43
   14920:	d1f4      	bne.n	1490c <__cxa_call_terminate+0x10>
   14922:	f894 c004 	ldrb.w	ip, [r4, #4]
   14926:	f1bc 0f43 	cmp.w	ip, #67	; 0x43
   1492a:	d1ef      	bne.n	1490c <__cxa_call_terminate+0x10>
   1492c:	f894 e005 	ldrb.w	lr, [r4, #5]
   14930:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
   14934:	d1ea      	bne.n	1490c <__cxa_call_terminate+0x10>
   14936:	79a3      	ldrb	r3, [r4, #6]
   14938:	2b2b      	cmp	r3, #43	; 0x2b
   1493a:	d1e7      	bne.n	1490c <__cxa_call_terminate+0x10>
   1493c:	79e0      	ldrb	r0, [r4, #7]
   1493e:	2801      	cmp	r0, #1
   14940:	d8e4      	bhi.n	1490c <__cxa_call_terminate+0x10>
   14942:	f854 0c14 	ldr.w	r0, [r4, #-20]
   14946:	f7ff ffaf 	bl	148a8 <__cxxabiv1::__terminate(void (*)())>
   1494a:	bf00      	nop

0001494c <__cxa_call_unexpected>:
   1494c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14950:	b085      	sub	sp, #20
   14952:	7803      	ldrb	r3, [r0, #0]
   14954:	2b47      	cmp	r3, #71	; 0x47
   14956:	d010      	beq.n	1497a <__cxa_call_unexpected+0x2e>
   14958:	2400      	movs	r4, #0
   1495a:	f04f 0801 	mov.w	r8, #1
   1495e:	46a1      	mov	r9, r4
   14960:	4625      	mov	r5, r4
   14962:	4626      	mov	r6, r4
   14964:	4627      	mov	r7, r4
   14966:	f000 f9a3 	bl	14cb0 <__cxa_begin_catch>
   1496a:	f1b8 0f00 	cmp.w	r8, #0
   1496e:	d001      	beq.n	14974 <__cxa_call_unexpected+0x28>
   14970:	f7ff ffba 	bl	148e8 <std::unexpected()>
   14974:	4648      	mov	r0, r9
   14976:	f7ff ffb3 	bl	148e0 <__cxxabiv1::__unexpected(void (*)())>
   1497a:	7841      	ldrb	r1, [r0, #1]
   1497c:	294e      	cmp	r1, #78	; 0x4e
   1497e:	d1eb      	bne.n	14958 <__cxa_call_unexpected+0xc>
   14980:	7882      	ldrb	r2, [r0, #2]
   14982:	2a55      	cmp	r2, #85	; 0x55
   14984:	d1e8      	bne.n	14958 <__cxa_call_unexpected+0xc>
   14986:	78c4      	ldrb	r4, [r0, #3]
   14988:	2c43      	cmp	r4, #67	; 0x43
   1498a:	d1e5      	bne.n	14958 <__cxa_call_unexpected+0xc>
   1498c:	7905      	ldrb	r5, [r0, #4]
   1498e:	2d43      	cmp	r5, #67	; 0x43
   14990:	d1e2      	bne.n	14958 <__cxa_call_unexpected+0xc>
   14992:	7946      	ldrb	r6, [r0, #5]
   14994:	2e2b      	cmp	r6, #43	; 0x2b
   14996:	d1df      	bne.n	14958 <__cxa_call_unexpected+0xc>
   14998:	7987      	ldrb	r7, [r0, #6]
   1499a:	2f2b      	cmp	r7, #43	; 0x2b
   1499c:	d1dc      	bne.n	14958 <__cxa_call_unexpected+0xc>
   1499e:	f890 8007 	ldrb.w	r8, [r0, #7]
   149a2:	f1b8 0f01 	cmp.w	r8, #1
   149a6:	d8d7      	bhi.n	14958 <__cxa_call_unexpected+0xc>
   149a8:	f850 9c18 	ldr.w	r9, [r0, #-24]
   149ac:	f04f 0800 	mov.w	r8, #0
   149b0:	f850 4c14 	ldr.w	r4, [r0, #-20]
   149b4:	6a87      	ldr	r7, [r0, #40]	; 0x28
   149b6:	6b06      	ldr	r6, [r0, #48]	; 0x30
   149b8:	6b45      	ldr	r5, [r0, #52]	; 0x34
   149ba:	e7d4      	b.n	14966 <__cxa_call_unexpected+0x1a>
   149bc:	f000 f978 	bl	14cb0 <__cxa_begin_catch>
   149c0:	f000 faee 	bl	14fa0 <__cxa_get_globals_fast>
   149c4:	6803      	ldr	r3, [r0, #0]
   149c6:	f893 9027 	ldrb.w	r9, [r3, #39]	; 0x27
   149ca:	f1b9 0f01 	cmp.w	r9, #1
   149ce:	d045      	beq.n	14a5c <__cxa_call_unexpected+0x110>
   149d0:	f103 0278 	add.w	r2, r3, #120	; 0x78
   149d4:	f04f 0800 	mov.w	r8, #0
   149d8:	f026 0003 	bic.w	r0, r6, #3
   149dc:	f10d 0910 	add.w	r9, sp, #16
   149e0:	462e      	mov	r6, r5
   149e2:	46c2      	mov	sl, r8
   149e4:	f103 0b20 	add.w	fp, r3, #32
   149e8:	9001      	str	r0, [sp, #4]
   149ea:	f849 2d04 	str.w	r2, [r9, #-4]!
   149ee:	4557      	cmp	r7, sl
   149f0:	dd22      	ble.n	14a38 <__cxa_call_unexpected+0xec>
   149f2:	6835      	ldr	r5, [r6, #0]
   149f4:	b105      	cbz	r5, 149f8 <__cxa_call_unexpected+0xac>
   149f6:	19ad      	adds	r5, r5, r6
   149f8:	4658      	mov	r0, fp
   149fa:	4629      	mov	r1, r5
   149fc:	2200      	movs	r2, #0
   149fe:	464b      	mov	r3, r9
   14a00:	f000 f87e 	bl	14b00 <__cxa_type_match>
   14a04:	4602      	mov	r2, r0
   14a06:	bb70      	cbnz	r0, 14a66 <__cxa_call_unexpected+0x11a>
   14a08:	f8d5 e000 	ldr.w	lr, [r5]
   14a0c:	f64c 61d0 	movw	r1, #52944	; 0xced0
   14a10:	4628      	mov	r0, r5
   14a12:	f2c0 0102 	movt	r1, #2
   14a16:	2301      	movs	r3, #1
   14a18:	f8de 5010 	ldr.w	r5, [lr, #16]
   14a1c:	47a8      	blx	r5
   14a1e:	9b01      	ldr	r3, [sp, #4]
   14a20:	2800      	cmp	r0, #0
   14a22:	bf18      	it	ne
   14a24:	f04f 0801 	movne.w	r8, #1
   14a28:	f10a 0a01 	add.w	sl, sl, #1
   14a2c:	18f6      	adds	r6, r6, r3
   14a2e:	e7de      	b.n	149ee <__cxa_call_unexpected+0xa2>
   14a30:	f000 f93e 	bl	14cb0 <__cxa_begin_catch>
   14a34:	f7ff ff4c 	bl	148d0 <std::terminate()>
   14a38:	f1b8 0f00 	cmp.w	r8, #0
   14a3c:	d010      	beq.n	14a60 <__cxa_call_unexpected+0x114>
   14a3e:	2004      	movs	r0, #4
   14a40:	4c0d      	ldr	r4, [pc, #52]	; (14a78 <__cxa_call_unexpected+0x12c>)
   14a42:	f000 f9cb 	bl	14ddc <__cxa_allocate_exception>
   14a46:	f64c 61d0 	movw	r1, #52944	; 0xced0
   14a4a:	f64e 5295 	movw	r2, #60821	; 0xed95
   14a4e:	f2c0 0102 	movt	r1, #2
   14a52:	f2c0 0201 	movt	r2, #1
   14a56:	6004      	str	r4, [r0, #0]
   14a58:	f00a f9e8 	bl	1ee2c <__cxa_throw>
   14a5c:	681a      	ldr	r2, [r3, #0]
   14a5e:	e7b9      	b.n	149d4 <__cxa_call_unexpected+0x88>
   14a60:	4620      	mov	r0, r4
   14a62:	f7ff ff21 	bl	148a8 <__cxxabiv1::__terminate(void (*)())>
   14a66:	f00a fa21 	bl	1eeac <__cxa_rethrow>
   14a6a:	f000 f96d 	bl	14d48 <__cxa_end_catch>
   14a6e:	f000 f96b 	bl	14d48 <__cxa_end_catch>
   14a72:	f000 f83f 	bl	14af4 <__cxa_end_cleanup>
   14a76:	bf00      	nop
   14a78:	0002ce90 	.word	0x0002ce90

00014a7c <__aeabi_atexit>:
   14a7c:	4603      	mov	r3, r0
   14a7e:	4608      	mov	r0, r1
   14a80:	4619      	mov	r1, r3
   14a82:	f00a bfc7 	b.w	1fa14 <__cxa_atexit>
   14a86:	bf00      	nop

00014a88 <__cxa_guard_acquire>:
   14a88:	b508      	push	{r3, lr}
   14a8a:	6803      	ldr	r3, [r0, #0]
   14a8c:	07db      	lsls	r3, r3, #31
   14a8e:	d405      	bmi.n	14a9c <__cxa_guard_acquire+0x14>
   14a90:	7841      	ldrb	r1, [r0, #1]
   14a92:	b929      	cbnz	r1, 14aa0 <__cxa_guard_acquire+0x18>
   14a94:	2201      	movs	r2, #1
   14a96:	7042      	strb	r2, [r0, #1]
   14a98:	4610      	mov	r0, r2
   14a9a:	bd08      	pop	{r3, pc}
   14a9c:	2000      	movs	r0, #0
   14a9e:	bd08      	pop	{r3, pc}
   14aa0:	2004      	movs	r0, #4
   14aa2:	f000 f99b 	bl	14ddc <__cxa_allocate_exception>
   14aa6:	4b06      	ldr	r3, [pc, #24]	; (14ac0 <__cxa_guard_acquire+0x38>)
   14aa8:	f24c 011c 	movw	r1, #49180	; 0xc01c
   14aac:	f644 22cd 	movw	r2, #19149	; 0x4acd
   14ab0:	f2c0 0102 	movt	r1, #2
   14ab4:	f2c0 0201 	movt	r2, #1
   14ab8:	6003      	str	r3, [r0, #0]
   14aba:	f00a f9b7 	bl	1ee2c <__cxa_throw>
   14abe:	bf00      	nop
   14ac0:	0002c058 	.word	0x0002c058

00014ac4 <__cxa_guard_release>:
   14ac4:	2301      	movs	r3, #1
   14ac6:	6003      	str	r3, [r0, #0]
   14ac8:	4770      	bx	lr
   14aca:	bf00      	nop

00014acc <__gnu_cxx::recursive_init_error::~recursive_init_error()>:
   14acc:	4b03      	ldr	r3, [pc, #12]	; (14adc <__gnu_cxx::recursive_init_error::~recursive_init_error()+0x10>)
   14ace:	b510      	push	{r4, lr}
   14ad0:	4604      	mov	r4, r0
   14ad2:	6003      	str	r3, [r0, #0]
   14ad4:	f00a f958 	bl	1ed88 <std::exception::~exception()>
   14ad8:	4620      	mov	r0, r4
   14ada:	bd10      	pop	{r4, pc}
   14adc:	0002c058 	.word	0x0002c058

00014ae0 <__gnu_cxx::recursive_init_error::~recursive_init_error()>:
   14ae0:	b510      	push	{r4, lr}
   14ae2:	4604      	mov	r4, r0
   14ae4:	f7ff fff2 	bl	14acc <__gnu_cxx::recursive_init_error::~recursive_init_error()>
   14ae8:	4620      	mov	r0, r4
   14aea:	f7ff fed9 	bl	148a0 <operator delete(void*)>
   14aee:	4620      	mov	r0, r4
   14af0:	bd10      	pop	{r4, pc}
   14af2:	bf00      	nop

00014af4 <__cxa_end_cleanup>:
   14af4:	b41e      	push	{r1, r2, r3, r4}
   14af6:	f000 f89d 	bl	14c34 <__gnu_end_cleanup>
   14afa:	bc1e      	pop	{r1, r2, r3, r4}
   14afc:	f011 ffe6 	bl	26acc <_Unwind_Resume>

00014b00 <__cxa_type_match>:
   14b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14b04:	461e      	mov	r6, r3
   14b06:	7803      	ldrb	r3, [r0, #0]
   14b08:	b082      	sub	sp, #8
   14b0a:	460f      	mov	r7, r1
   14b0c:	2b47      	cmp	r3, #71	; 0x47
   14b0e:	d020      	beq.n	14b52 <__cxa_type_match+0x52>
   14b10:	f64c 687c 	movw	r8, #52860	; 0xce7c
   14b14:	2400      	movs	r4, #0
   14b16:	f2c0 0802 	movt	r8, #2
   14b1a:	9401      	str	r4, [sp, #4]
   14b1c:	f8d8 3000 	ldr.w	r3, [r8]
   14b20:	4640      	mov	r0, r8
   14b22:	2401      	movs	r4, #1
   14b24:	689d      	ldr	r5, [r3, #8]
   14b26:	47a8      	blx	r5
   14b28:	b118      	cbz	r0, 14b32 <__cxa_type_match+0x32>
   14b2a:	9901      	ldr	r1, [sp, #4]
   14b2c:	2402      	movs	r4, #2
   14b2e:	6808      	ldr	r0, [r1, #0]
   14b30:	9001      	str	r0, [sp, #4]
   14b32:	683d      	ldr	r5, [r7, #0]
   14b34:	4638      	mov	r0, r7
   14b36:	4641      	mov	r1, r8
   14b38:	aa01      	add	r2, sp, #4
   14b3a:	2301      	movs	r3, #1
   14b3c:	692d      	ldr	r5, [r5, #16]
   14b3e:	47a8      	blx	r5
   14b40:	b128      	cbz	r0, 14b4e <__cxa_type_match+0x4e>
   14b42:	9a01      	ldr	r2, [sp, #4]
   14b44:	6032      	str	r2, [r6, #0]
   14b46:	4620      	mov	r0, r4
   14b48:	b002      	add	sp, #8
   14b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14b4e:	4604      	mov	r4, r0
   14b50:	e7f9      	b.n	14b46 <__cxa_type_match+0x46>
   14b52:	7841      	ldrb	r1, [r0, #1]
   14b54:	294e      	cmp	r1, #78	; 0x4e
   14b56:	d1db      	bne.n	14b10 <__cxa_type_match+0x10>
   14b58:	7882      	ldrb	r2, [r0, #2]
   14b5a:	2a55      	cmp	r2, #85	; 0x55
   14b5c:	d1d8      	bne.n	14b10 <__cxa_type_match+0x10>
   14b5e:	78c4      	ldrb	r4, [r0, #3]
   14b60:	2c43      	cmp	r4, #67	; 0x43
   14b62:	d1d5      	bne.n	14b10 <__cxa_type_match+0x10>
   14b64:	7905      	ldrb	r5, [r0, #4]
   14b66:	2d46      	cmp	r5, #70	; 0x46
   14b68:	d015      	beq.n	14b96 <__cxa_type_match+0x96>
   14b6a:	7903      	ldrb	r3, [r0, #4]
   14b6c:	2b43      	cmp	r3, #67	; 0x43
   14b6e:	d1cf      	bne.n	14b10 <__cxa_type_match+0x10>
   14b70:	7941      	ldrb	r1, [r0, #5]
   14b72:	292b      	cmp	r1, #43	; 0x2b
   14b74:	d1cc      	bne.n	14b10 <__cxa_type_match+0x10>
   14b76:	7982      	ldrb	r2, [r0, #6]
   14b78:	2a2b      	cmp	r2, #43	; 0x2b
   14b7a:	d1c9      	bne.n	14b10 <__cxa_type_match+0x10>
   14b7c:	79c4      	ldrb	r4, [r0, #7]
   14b7e:	2c01      	cmp	r4, #1
   14b80:	d8c6      	bhi.n	14b10 <__cxa_type_match+0x10>
   14b82:	bf0b      	itete	eq
   14b84:	f850 0c20 	ldreq.w	r0, [r0, #-32]
   14b88:	f850 8c20 	ldrne.w	r8, [r0, #-32]
   14b8c:	f850 8c78 	ldreq.w	r8, [r0, #-120]
   14b90:	3058      	addne	r0, #88	; 0x58
   14b92:	9001      	str	r0, [sp, #4]
   14b94:	e7c2      	b.n	14b1c <__cxa_type_match+0x1c>
   14b96:	f890 c005 	ldrb.w	ip, [r0, #5]
   14b9a:	f1bc 0f4f 	cmp.w	ip, #79	; 0x4f
   14b9e:	d1e4      	bne.n	14b6a <__cxa_type_match+0x6a>
   14ba0:	f890 e006 	ldrb.w	lr, [r0, #6]
   14ba4:	f1be 0f52 	cmp.w	lr, #82	; 0x52
   14ba8:	d1df      	bne.n	14b6a <__cxa_type_match+0x6a>
   14baa:	79c3      	ldrb	r3, [r0, #7]
   14bac:	2b00      	cmp	r3, #0
   14bae:	d1dc      	bne.n	14b6a <__cxa_type_match+0x6a>
   14bb0:	f64c 6810 	movw	r8, #52752	; 0xce10
   14bb4:	9301      	str	r3, [sp, #4]
   14bb6:	f2c0 0802 	movt	r8, #2
   14bba:	e7af      	b.n	14b1c <__cxa_type_match+0x1c>

00014bbc <__cxa_begin_cleanup>:
   14bbc:	b510      	push	{r4, lr}
   14bbe:	4604      	mov	r4, r0
   14bc0:	f000 f9f4 	bl	14fac <__cxa_get_globals>
   14bc4:	f1a4 0220 	sub.w	r2, r4, #32
   14bc8:	7823      	ldrb	r3, [r4, #0]
   14bca:	2b47      	cmp	r3, #71	; 0x47
   14bcc:	d005      	beq.n	14bda <__cxa_begin_cleanup+0x1e>
   14bce:	6881      	ldr	r1, [r0, #8]
   14bd0:	2900      	cmp	r1, #0
   14bd2:	d12c      	bne.n	14c2e <__cxa_begin_cleanup+0x72>
   14bd4:	6082      	str	r2, [r0, #8]
   14bd6:	2001      	movs	r0, #1
   14bd8:	bd10      	pop	{r4, pc}
   14bda:	7861      	ldrb	r1, [r4, #1]
   14bdc:	294e      	cmp	r1, #78	; 0x4e
   14bde:	d1f6      	bne.n	14bce <__cxa_begin_cleanup+0x12>
   14be0:	f894 c002 	ldrb.w	ip, [r4, #2]
   14be4:	f1bc 0f55 	cmp.w	ip, #85	; 0x55
   14be8:	d1f1      	bne.n	14bce <__cxa_begin_cleanup+0x12>
   14bea:	f894 e003 	ldrb.w	lr, [r4, #3]
   14bee:	f1be 0f43 	cmp.w	lr, #67	; 0x43
   14bf2:	d1ec      	bne.n	14bce <__cxa_begin_cleanup+0x12>
   14bf4:	7923      	ldrb	r3, [r4, #4]
   14bf6:	2b43      	cmp	r3, #67	; 0x43
   14bf8:	d1e9      	bne.n	14bce <__cxa_begin_cleanup+0x12>
   14bfa:	7961      	ldrb	r1, [r4, #5]
   14bfc:	292b      	cmp	r1, #43	; 0x2b
   14bfe:	d1e6      	bne.n	14bce <__cxa_begin_cleanup+0x12>
   14c00:	f894 c006 	ldrb.w	ip, [r4, #6]
   14c04:	f1bc 0f2b 	cmp.w	ip, #43	; 0x2b
   14c08:	d1e1      	bne.n	14bce <__cxa_begin_cleanup+0x12>
   14c0a:	f894 e007 	ldrb.w	lr, [r4, #7]
   14c0e:	f1be 0f01 	cmp.w	lr, #1
   14c12:	d8dc      	bhi.n	14bce <__cxa_begin_cleanup+0x12>
   14c14:	f854 1c04 	ldr.w	r1, [r4, #-4]
   14c18:	1c4b      	adds	r3, r1, #1
   14c1a:	f844 3c04 	str.w	r3, [r4, #-4]
   14c1e:	2b01      	cmp	r3, #1
   14c20:	d1d9      	bne.n	14bd6 <__cxa_begin_cleanup+0x1a>
   14c22:	6883      	ldr	r3, [r0, #8]
   14c24:	f844 3c08 	str.w	r3, [r4, #-8]
   14c28:	6082      	str	r2, [r0, #8]
   14c2a:	2001      	movs	r0, #1
   14c2c:	bd10      	pop	{r4, pc}
   14c2e:	f7ff fe4f 	bl	148d0 <std::terminate()>
   14c32:	bf00      	nop

00014c34 <__gnu_end_cleanup>:
   14c34:	b508      	push	{r3, lr}
   14c36:	f000 f9b9 	bl	14fac <__cxa_get_globals>
   14c3a:	6883      	ldr	r3, [r0, #8]
   14c3c:	2b00      	cmp	r3, #0
   14c3e:	d034      	beq.n	14caa <__gnu_end_cleanup+0x76>
   14c40:	f893 2020 	ldrb.w	r2, [r3, #32]
   14c44:	2a47      	cmp	r2, #71	; 0x47
   14c46:	d004      	beq.n	14c52 <__gnu_end_cleanup+0x1e>
   14c48:	2100      	movs	r1, #0
   14c4a:	6081      	str	r1, [r0, #8]
   14c4c:	f103 0020 	add.w	r0, r3, #32
   14c50:	bd08      	pop	{r3, pc}
   14c52:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
   14c56:	294e      	cmp	r1, #78	; 0x4e
   14c58:	d1f6      	bne.n	14c48 <__gnu_end_cleanup+0x14>
   14c5a:	f893 c022 	ldrb.w	ip, [r3, #34]	; 0x22
   14c5e:	f1bc 0f55 	cmp.w	ip, #85	; 0x55
   14c62:	d1f1      	bne.n	14c48 <__gnu_end_cleanup+0x14>
   14c64:	f893 e023 	ldrb.w	lr, [r3, #35]	; 0x23
   14c68:	f1be 0f43 	cmp.w	lr, #67	; 0x43
   14c6c:	d1ec      	bne.n	14c48 <__gnu_end_cleanup+0x14>
   14c6e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   14c72:	2a43      	cmp	r2, #67	; 0x43
   14c74:	d1e8      	bne.n	14c48 <__gnu_end_cleanup+0x14>
   14c76:	f893 1025 	ldrb.w	r1, [r3, #37]	; 0x25
   14c7a:	292b      	cmp	r1, #43	; 0x2b
   14c7c:	d1e4      	bne.n	14c48 <__gnu_end_cleanup+0x14>
   14c7e:	f893 c026 	ldrb.w	ip, [r3, #38]	; 0x26
   14c82:	f1bc 0f2b 	cmp.w	ip, #43	; 0x2b
   14c86:	d1df      	bne.n	14c48 <__gnu_end_cleanup+0x14>
   14c88:	f893 e027 	ldrb.w	lr, [r3, #39]	; 0x27
   14c8c:	f1be 0f01 	cmp.w	lr, #1
   14c90:	d8da      	bhi.n	14c48 <__gnu_end_cleanup+0x14>
   14c92:	69d9      	ldr	r1, [r3, #28]
   14c94:	1e4a      	subs	r2, r1, #1
   14c96:	61da      	str	r2, [r3, #28]
   14c98:	2a00      	cmp	r2, #0
   14c9a:	d1d7      	bne.n	14c4c <__gnu_end_cleanup+0x18>
   14c9c:	699a      	ldr	r2, [r3, #24]
   14c9e:	6082      	str	r2, [r0, #8]
   14ca0:	2000      	movs	r0, #0
   14ca2:	6198      	str	r0, [r3, #24]
   14ca4:	f103 0020 	add.w	r0, r3, #32
   14ca8:	bd08      	pop	{r3, pc}
   14caa:	f7ff fe11 	bl	148d0 <std::terminate()>
   14cae:	bf00      	nop

00014cb0 <__cxa_begin_catch>:
   14cb0:	b538      	push	{r3, r4, r5, lr}
   14cb2:	4605      	mov	r5, r0
   14cb4:	f000 f97a 	bl	14fac <__cxa_get_globals>
   14cb8:	f1a5 0320 	sub.w	r3, r5, #32
   14cbc:	782a      	ldrb	r2, [r5, #0]
   14cbe:	2a47      	cmp	r2, #71	; 0x47
   14cc0:	6804      	ldr	r4, [r0, #0]
   14cc2:	d004      	beq.n	14cce <__cxa_begin_catch+0x1e>
   14cc4:	2c00      	cmp	r4, #0
   14cc6:	d137      	bne.n	14d38 <__cxa_begin_catch+0x88>
   14cc8:	6003      	str	r3, [r0, #0]
   14cca:	4620      	mov	r0, r4
   14ccc:	bd38      	pop	{r3, r4, r5, pc}
   14cce:	7869      	ldrb	r1, [r5, #1]
   14cd0:	294e      	cmp	r1, #78	; 0x4e
   14cd2:	d1f7      	bne.n	14cc4 <__cxa_begin_catch+0x14>
   14cd4:	f895 c002 	ldrb.w	ip, [r5, #2]
   14cd8:	f1bc 0f55 	cmp.w	ip, #85	; 0x55
   14cdc:	d1f2      	bne.n	14cc4 <__cxa_begin_catch+0x14>
   14cde:	f895 e003 	ldrb.w	lr, [r5, #3]
   14ce2:	f1be 0f43 	cmp.w	lr, #67	; 0x43
   14ce6:	d1ed      	bne.n	14cc4 <__cxa_begin_catch+0x14>
   14ce8:	792a      	ldrb	r2, [r5, #4]
   14cea:	2a43      	cmp	r2, #67	; 0x43
   14cec:	d1ea      	bne.n	14cc4 <__cxa_begin_catch+0x14>
   14cee:	7969      	ldrb	r1, [r5, #5]
   14cf0:	292b      	cmp	r1, #43	; 0x2b
   14cf2:	d1e7      	bne.n	14cc4 <__cxa_begin_catch+0x14>
   14cf4:	f895 c006 	ldrb.w	ip, [r5, #6]
   14cf8:	f1bc 0f2b 	cmp.w	ip, #43	; 0x2b
   14cfc:	d1e2      	bne.n	14cc4 <__cxa_begin_catch+0x14>
   14cfe:	f895 e007 	ldrb.w	lr, [r5, #7]
   14d02:	f1be 0f01 	cmp.w	lr, #1
   14d06:	d8dd      	bhi.n	14cc4 <__cxa_begin_catch+0x14>
   14d08:	f855 1c0c 	ldr.w	r1, [r5, #-12]
   14d0c:	2900      	cmp	r1, #0
   14d0e:	db10      	blt.n	14d32 <__cxa_begin_catch+0x82>
   14d10:	3101      	adds	r1, #1
   14d12:	6842      	ldr	r2, [r0, #4]
   14d14:	f845 1c0c 	str.w	r1, [r5, #-12]
   14d18:	3a01      	subs	r2, #1
   14d1a:	42a3      	cmp	r3, r4
   14d1c:	6042      	str	r2, [r0, #4]
   14d1e:	bf1c      	itt	ne
   14d20:	f845 4c10 	strne.w	r4, [r5, #-16]
   14d24:	6003      	strne	r3, [r0, #0]
   14d26:	4628      	mov	r0, r5
   14d28:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   14d2a:	f011 fdf9 	bl	26920 <_Unwind_Complete>
   14d2e:	4620      	mov	r0, r4
   14d30:	bd38      	pop	{r3, r4, r5, pc}
   14d32:	f1c1 0101 	rsb	r1, r1, #1
   14d36:	e7ec      	b.n	14d12 <__cxa_begin_catch+0x62>
   14d38:	f7ff fdca 	bl	148d0 <std::terminate()>
   14d3c:	3101      	adds	r1, #1
   14d3e:	d001      	beq.n	14d44 <__cxa_begin_catch+0x94>
   14d40:	f7ff fed8 	bl	14af4 <__cxa_end_cleanup>
   14d44:	f7ff fe02 	bl	1494c <__cxa_call_unexpected>

00014d48 <__cxa_end_catch>:
   14d48:	b508      	push	{r3, lr}
   14d4a:	f000 f929 	bl	14fa0 <__cxa_get_globals_fast>
   14d4e:	4603      	mov	r3, r0
   14d50:	6800      	ldr	r0, [r0, #0]
   14d52:	2800      	cmp	r0, #0
   14d54:	d041      	beq.n	14dda <__cxa_end_catch+0x92>
   14d56:	f890 2020 	ldrb.w	r2, [r0, #32]
   14d5a:	2a47      	cmp	r2, #71	; 0x47
   14d5c:	d006      	beq.n	14d6c <__cxa_end_catch+0x24>
   14d5e:	2100      	movs	r1, #0
   14d60:	3020      	adds	r0, #32
   14d62:	6019      	str	r1, [r3, #0]
   14d64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   14d68:	f011 bddc 	b.w	26924 <_Unwind_DeleteException>
   14d6c:	f890 1021 	ldrb.w	r1, [r0, #33]	; 0x21
   14d70:	294e      	cmp	r1, #78	; 0x4e
   14d72:	d1f4      	bne.n	14d5e <__cxa_end_catch+0x16>
   14d74:	f890 c022 	ldrb.w	ip, [r0, #34]	; 0x22
   14d78:	f1bc 0f55 	cmp.w	ip, #85	; 0x55
   14d7c:	d1ef      	bne.n	14d5e <__cxa_end_catch+0x16>
   14d7e:	f890 e023 	ldrb.w	lr, [r0, #35]	; 0x23
   14d82:	f1be 0f43 	cmp.w	lr, #67	; 0x43
   14d86:	d1ea      	bne.n	14d5e <__cxa_end_catch+0x16>
   14d88:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   14d8c:	2a43      	cmp	r2, #67	; 0x43
   14d8e:	d1e6      	bne.n	14d5e <__cxa_end_catch+0x16>
   14d90:	f890 1025 	ldrb.w	r1, [r0, #37]	; 0x25
   14d94:	292b      	cmp	r1, #43	; 0x2b
   14d96:	d1e2      	bne.n	14d5e <__cxa_end_catch+0x16>
   14d98:	f890 c026 	ldrb.w	ip, [r0, #38]	; 0x26
   14d9c:	f1bc 0f2b 	cmp.w	ip, #43	; 0x2b
   14da0:	d1dd      	bne.n	14d5e <__cxa_end_catch+0x16>
   14da2:	f890 e027 	ldrb.w	lr, [r0, #39]	; 0x27
   14da6:	f1be 0f01 	cmp.w	lr, #1
   14daa:	d8d8      	bhi.n	14d5e <__cxa_end_catch+0x16>
   14dac:	6942      	ldr	r2, [r0, #20]
   14dae:	2a00      	cmp	r2, #0
   14db0:	db05      	blt.n	14dbe <__cxa_end_catch+0x76>
   14db2:	3a01      	subs	r2, #1
   14db4:	d008      	beq.n	14dc8 <__cxa_end_catch+0x80>
   14db6:	1c53      	adds	r3, r2, #1
   14db8:	d00d      	beq.n	14dd6 <__cxa_end_catch+0x8e>
   14dba:	6142      	str	r2, [r0, #20]
   14dbc:	bd08      	pop	{r3, pc}
   14dbe:	3201      	adds	r2, #1
   14dc0:	d1fb      	bne.n	14dba <__cxa_end_catch+0x72>
   14dc2:	6901      	ldr	r1, [r0, #16]
   14dc4:	6019      	str	r1, [r3, #0]
   14dc6:	e7f8      	b.n	14dba <__cxa_end_catch+0x72>
   14dc8:	6902      	ldr	r2, [r0, #16]
   14dca:	3020      	adds	r0, #32
   14dcc:	601a      	str	r2, [r3, #0]
   14dce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   14dd2:	f011 bda7 	b.w	26924 <_Unwind_DeleteException>
   14dd6:	f7ff fd7b 	bl	148d0 <std::terminate()>
   14dda:	bd08      	pop	{r3, pc}

00014ddc <__cxa_allocate_exception>:
   14ddc:	b538      	push	{r3, r4, r5, lr}
   14dde:	f100 0580 	add.w	r5, r0, #128	; 0x80
   14de2:	4628      	mov	r0, r5
   14de4:	f00b f8e2 	bl	1ffac <malloc>
   14de8:	4604      	mov	r4, r0
   14dea:	b168      	cbz	r0, 14e08 <__cxa_allocate_exception+0x2c>
   14dec:	f000 f8de 	bl	14fac <__cxa_get_globals>
   14df0:	2100      	movs	r1, #0
   14df2:	2280      	movs	r2, #128	; 0x80
   14df4:	4603      	mov	r3, r0
   14df6:	4620      	mov	r0, r4
   14df8:	685d      	ldr	r5, [r3, #4]
   14dfa:	3501      	adds	r5, #1
   14dfc:	605d      	str	r5, [r3, #4]
   14dfe:	f00b fced 	bl	207dc <memset>
   14e02:	f104 0080 	add.w	r0, r4, #128	; 0x80
   14e06:	bd38      	pop	{r3, r4, r5, pc}
   14e08:	f641 337c 	movw	r3, #7036	; 0x1b7c
   14e0c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   14e10:	f2c1 0300 	movt	r3, #4096	; 0x1000
   14e14:	681a      	ldr	r2, [r3, #0]
   14e16:	d901      	bls.n	14e1c <__cxa_allocate_exception+0x40>
   14e18:	f7ff fd5a 	bl	148d0 <std::terminate()>
   14e1c:	f012 0101 	ands.w	r1, r2, #1
   14e20:	d006      	beq.n	14e30 <__cxa_allocate_exception+0x54>
   14e22:	0794      	lsls	r4, r2, #30
   14e24:	d510      	bpl.n	14e48 <__cxa_allocate_exception+0x6c>
   14e26:	0750      	lsls	r0, r2, #29
   14e28:	d510      	bpl.n	14e4c <__cxa_allocate_exception+0x70>
   14e2a:	0711      	lsls	r1, r2, #28
   14e2c:	d4f4      	bmi.n	14e18 <__cxa_allocate_exception+0x3c>
   14e2e:	2103      	movs	r1, #3
   14e30:	2501      	movs	r5, #1
   14e32:	f641 3080 	movw	r0, #7040	; 0x1b80
   14e36:	024c      	lsls	r4, r1, #9
   14e38:	f2c1 0000 	movt	r0, #4096	; 0x1000
   14e3c:	fa05 f101 	lsl.w	r1, r5, r1
   14e40:	1904      	adds	r4, r0, r4
   14e42:	430a      	orrs	r2, r1
   14e44:	601a      	str	r2, [r3, #0]
   14e46:	e7d1      	b.n	14dec <__cxa_allocate_exception+0x10>
   14e48:	2101      	movs	r1, #1
   14e4a:	e7f1      	b.n	14e30 <__cxa_allocate_exception+0x54>
   14e4c:	2102      	movs	r1, #2
   14e4e:	e7ef      	b.n	14e30 <__cxa_allocate_exception+0x54>

00014e50 <__cxa_free_exception>:
   14e50:	f641 3380 	movw	r3, #7040	; 0x1b80
   14e54:	f2c1 0300 	movt	r3, #4096	; 0x1000
   14e58:	4298      	cmp	r0, r3
   14e5a:	d313      	bcc.n	14e84 <__cxa_free_exception+0x34>
   14e5c:	f503 6200 	add.w	r2, r3, #2048	; 0x800
   14e60:	4290      	cmp	r0, r2
   14e62:	d20f      	bcs.n	14e84 <__cxa_free_exception+0x34>
   14e64:	f641 3c7c 	movw	ip, #7036	; 0x1b7c
   14e68:	1ac0      	subs	r0, r0, r3
   14e6a:	f2c1 0c00 	movt	ip, #4096	; 0x1000
   14e6e:	2301      	movs	r3, #1
   14e70:	0a42      	lsrs	r2, r0, #9
   14e72:	f8dc 1000 	ldr.w	r1, [ip]
   14e76:	fa03 f002 	lsl.w	r0, r3, r2
   14e7a:	ea21 0300 	bic.w	r3, r1, r0
   14e7e:	f8cc 3000 	str.w	r3, [ip]
   14e82:	4770      	bx	lr
   14e84:	3880      	subs	r0, #128	; 0x80
   14e86:	f00b b899 	b.w	1ffbc <free>
   14e8a:	bf00      	nop

00014e8c <__cxxabiv1::__si_class_type_info::~__si_class_type_info()>:
   14e8c:	4b03      	ldr	r3, [pc, #12]	; (14e9c <__cxxabiv1::__si_class_type_info::~__si_class_type_info()+0x10>)
   14e8e:	b510      	push	{r4, lr}
   14e90:	4604      	mov	r4, r0
   14e92:	6003      	str	r3, [r0, #0]
   14e94:	f00a fb4a 	bl	1f52c <__cxxabiv1::__class_type_info::~__class_type_info()>
   14e98:	4620      	mov	r0, r4
   14e9a:	bd10      	pop	{r4, pc}
   14e9c:	0002c070 	.word	0x0002c070

00014ea0 <__cxxabiv1::__si_class_type_info::~__si_class_type_info()>:
   14ea0:	b510      	push	{r4, lr}
   14ea2:	4604      	mov	r4, r0
   14ea4:	f7ff fff2 	bl	14e8c <__cxxabiv1::__si_class_type_info::~__si_class_type_info()>
   14ea8:	4620      	mov	r0, r4
   14eaa:	f7ff fcf9 	bl	148a0 <operator delete(void*)>
   14eae:	4620      	mov	r0, r4
   14eb0:	bd10      	pop	{r4, pc}
   14eb2:	bf00      	nop

00014eb4 <__cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>:
   14eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14eb6:	4607      	mov	r7, r0
   14eb8:	460e      	mov	r6, r1
   14eba:	4615      	mov	r5, r2
   14ebc:	461c      	mov	r4, r3
   14ebe:	f00a fb27 	bl	1f510 <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>
   14ec2:	b108      	cbz	r0, 14ec8 <__cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const+0x14>
   14ec4:	2001      	movs	r0, #1
   14ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14ec8:	68bf      	ldr	r7, [r7, #8]
   14eca:	4623      	mov	r3, r4
   14ecc:	4631      	mov	r1, r6
   14ece:	462a      	mov	r2, r5
   14ed0:	4638      	mov	r0, r7
   14ed2:	683c      	ldr	r4, [r7, #0]
   14ed4:	69a4      	ldr	r4, [r4, #24]
   14ed6:	47a0      	blx	r4
   14ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14eda:	bf00      	nop

00014edc <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const>:
   14edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ee0:	b087      	sub	sp, #28
   14ee2:	4688      	mov	r8, r1
   14ee4:	4619      	mov	r1, r3
   14ee6:	461f      	mov	r7, r3
   14ee8:	4681      	mov	r9, r0
   14eea:	4692      	mov	sl, r2
   14eec:	9d10      	ldr	r5, [sp, #64]	; 0x40
   14eee:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
   14ef2:	9e12      	ldr	r6, [sp, #72]	; 0x48
   14ef4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   14ef6:	f000 f875 	bl	14fe4 <std::type_info::operator==(std::type_info const&) const>
   14efa:	4603      	mov	r3, r0
   14efc:	b168      	cbz	r0, 14f1a <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x3e>
   14efe:	f1b8 0f00 	cmp.w	r8, #0
   14f02:	6025      	str	r5, [r4, #0]
   14f04:	f884 a004 	strb.w	sl, [r4, #4]
   14f08:	db1a      	blt.n	14f40 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x64>
   14f0a:	4445      	add	r5, r8
   14f0c:	2000      	movs	r0, #0
   14f0e:	42ae      	cmp	r6, r5
   14f10:	bf14      	ite	ne
   14f12:	2601      	movne	r6, #1
   14f14:	2606      	moveq	r6, #6
   14f16:	71a6      	strb	r6, [r4, #6]
   14f18:	e00f      	b.n	14f3a <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x5e>
   14f1a:	42b5      	cmp	r5, r6
   14f1c:	d017      	beq.n	14f4e <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x72>
   14f1e:	f8d9 e008 	ldr.w	lr, [r9, #8]
   14f22:	463b      	mov	r3, r7
   14f24:	4641      	mov	r1, r8
   14f26:	4652      	mov	r2, sl
   14f28:	4670      	mov	r0, lr
   14f2a:	f8de 7000 	ldr.w	r7, [lr]
   14f2e:	9602      	str	r6, [sp, #8]
   14f30:	9403      	str	r4, [sp, #12]
   14f32:	e88d 0820 	stmia.w	sp, {r5, fp}
   14f36:	69fc      	ldr	r4, [r7, #28]
   14f38:	47a0      	blx	r4
   14f3a:	b007      	add	sp, #28
   14f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f40:	2000      	movs	r0, #0
   14f42:	f118 0f02 	cmn.w	r8, #2
   14f46:	d1f8      	bne.n	14f3a <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x5e>
   14f48:	2301      	movs	r3, #1
   14f4a:	71a3      	strb	r3, [r4, #6]
   14f4c:	e7f5      	b.n	14f3a <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x5e>
   14f4e:	4648      	mov	r0, r9
   14f50:	4659      	mov	r1, fp
   14f52:	9305      	str	r3, [sp, #20]
   14f54:	f000 f846 	bl	14fe4 <std::type_info::operator==(std::type_info const&) const>
   14f58:	9b05      	ldr	r3, [sp, #20]
   14f5a:	2800      	cmp	r0, #0
   14f5c:	d0df      	beq.n	14f1e <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x42>
   14f5e:	f884 a005 	strb.w	sl, [r4, #5]
   14f62:	4618      	mov	r0, r3
   14f64:	e7e9      	b.n	14f3a <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x5e>
   14f66:	bf00      	nop

00014f68 <__cxxabiv1::__si_class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const>:
   14f68:	b570      	push	{r4, r5, r6, lr}
   14f6a:	b084      	sub	sp, #16
   14f6c:	4605      	mov	r5, r0
   14f6e:	460e      	mov	r6, r1
   14f70:	9c08      	ldr	r4, [sp, #32]
   14f72:	4294      	cmp	r4, r2
   14f74:	d008      	beq.n	14f88 <__cxxabiv1::__si_class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const+0x20>
   14f76:	68ad      	ldr	r5, [r5, #8]
   14f78:	4631      	mov	r1, r6
   14f7a:	4628      	mov	r0, r5
   14f7c:	682d      	ldr	r5, [r5, #0]
   14f7e:	9400      	str	r4, [sp, #0]
   14f80:	6a2c      	ldr	r4, [r5, #32]
   14f82:	47a0      	blx	r4
   14f84:	b004      	add	sp, #16
   14f86:	bd70      	pop	{r4, r5, r6, pc}
   14f88:	4619      	mov	r1, r3
   14f8a:	9203      	str	r2, [sp, #12]
   14f8c:	9302      	str	r3, [sp, #8]
   14f8e:	f000 f829 	bl	14fe4 <std::type_info::operator==(std::type_info const&) const>
   14f92:	9a03      	ldr	r2, [sp, #12]
   14f94:	9b02      	ldr	r3, [sp, #8]
   14f96:	2800      	cmp	r0, #0
   14f98:	d0ed      	beq.n	14f76 <__cxxabiv1::__si_class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const+0xe>
   14f9a:	2006      	movs	r0, #6
   14f9c:	e7f2      	b.n	14f84 <__cxxabiv1::__si_class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const+0x1c>
   14f9e:	bf00      	nop

00014fa0 <__cxa_get_globals_fast>:
   14fa0:	f242 3080 	movw	r0, #9088	; 0x2380
   14fa4:	f2c1 0000 	movt	r0, #4096	; 0x1000
   14fa8:	4770      	bx	lr
   14faa:	bf00      	nop

00014fac <__cxa_get_globals>:
   14fac:	f242 3080 	movw	r0, #9088	; 0x2380
   14fb0:	f2c1 0000 	movt	r0, #4096	; 0x1000
   14fb4:	4770      	bx	lr
   14fb6:	bf00      	nop

00014fb8 <std::type_info::~type_info()>:
   14fb8:	4b01      	ldr	r3, [pc, #4]	; (14fc0 <std::type_info::~type_info()+0x8>)
   14fba:	6003      	str	r3, [r0, #0]
   14fbc:	4770      	bx	lr
   14fbe:	bf00      	nop
   14fc0:	0002c0f0 	.word	0x0002c0f0

00014fc4 <std::type_info::__is_pointer_p() const>:
   14fc4:	2000      	movs	r0, #0
   14fc6:	4770      	bx	lr

00014fc8 <std::type_info::__is_function_p() const>:
   14fc8:	2000      	movs	r0, #0
   14fca:	4770      	bx	lr

00014fcc <std::type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const>:
   14fcc:	2000      	movs	r0, #0
   14fce:	4770      	bx	lr

00014fd0 <std::type_info::~type_info()>:
   14fd0:	4b03      	ldr	r3, [pc, #12]	; (14fe0 <std::type_info::~type_info()+0x10>)
   14fd2:	b510      	push	{r4, lr}
   14fd4:	4604      	mov	r4, r0
   14fd6:	6003      	str	r3, [r0, #0]
   14fd8:	f7ff fc62 	bl	148a0 <operator delete(void*)>
   14fdc:	4620      	mov	r0, r4
   14fde:	bd10      	pop	{r4, pc}
   14fe0:	0002c0f0 	.word	0x0002c0f0

00014fe4 <std::type_info::operator==(std::type_info const&) const>:
   14fe4:	4281      	cmp	r1, r0
   14fe6:	b508      	push	{r3, lr}
   14fe8:	d018      	beq.n	1501c <std::type_info::operator==(std::type_info const&) const+0x38>
   14fea:	6840      	ldr	r0, [r0, #4]
   14fec:	7803      	ldrb	r3, [r0, #0]
   14fee:	2b2a      	cmp	r3, #42	; 0x2a
   14ff0:	d00d      	beq.n	1500e <std::type_info::operator==(std::type_info const&) const+0x2a>
   14ff2:	6849      	ldr	r1, [r1, #4]
   14ff4:	f891 c000 	ldrb.w	ip, [r1]
   14ff8:	f1bc 0f2a 	cmp.w	ip, #42	; 0x2a
   14ffc:	bf08      	it	eq
   14ffe:	3101      	addeq	r1, #1
   15000:	f00c f880 	bl	21104 <strcmp>
   15004:	f1d0 0001 	rsbs	r0, r0, #1
   15008:	bf38      	it	cc
   1500a:	2000      	movcc	r0, #0
   1500c:	bd08      	pop	{r3, pc}
   1500e:	7842      	ldrb	r2, [r0, #1]
   15010:	2a2a      	cmp	r2, #42	; 0x2a
   15012:	d101      	bne.n	15018 <std::type_info::operator==(std::type_info const&) const+0x34>
   15014:	2000      	movs	r0, #0
   15016:	bd08      	pop	{r3, pc}
   15018:	3001      	adds	r0, #1
   1501a:	e7ea      	b.n	14ff2 <std::type_info::operator==(std::type_info const&) const+0xe>
   1501c:	2001      	movs	r0, #1
   1501e:	bd08      	pop	{r3, pc}

00015020 <std::type_info::__do_catch(std::type_info const*, void**, unsigned int) const>:
   15020:	f7ff bfe0 	b.w	14fe4 <std::type_info::operator==(std::type_info const&) const>

00015024 <__gnu_cxx::__verbose_terminate_handler()>:
   15024:	f242 338c 	movw	r3, #9100	; 0x238c
   15028:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1502c:	b570      	push	{r4, r5, r6, lr}
   1502e:	b082      	sub	sp, #8
   15030:	781a      	ldrb	r2, [r3, #0]
   15032:	2a00      	cmp	r2, #0
   15034:	d13e      	bne.n	150b4 <__gnu_cxx::__verbose_terminate_handler()+0x90>
   15036:	2401      	movs	r4, #1
   15038:	701c      	strb	r4, [r3, #0]
   1503a:	f00a fabd 	bl	1f5b8 <__cxa_current_exception_type>
   1503e:	2800      	cmp	r0, #0
   15040:	d056      	beq.n	150f0 <__gnu_cxx::__verbose_terminate_handler()+0xcc>
   15042:	6845      	ldr	r5, [r0, #4]
   15044:	ab02      	add	r3, sp, #8
   15046:	f04f 36ff 	mov.w	r6, #4294967295
   1504a:	7829      	ldrb	r1, [r5, #0]
   1504c:	f843 6d04 	str.w	r6, [r3, #-4]!
   15050:	292a      	cmp	r1, #42	; 0x2a
   15052:	bf08      	it	eq
   15054:	192d      	addeq	r5, r5, r4
   15056:	2100      	movs	r1, #0
   15058:	460a      	mov	r2, r1
   1505a:	4628      	mov	r0, r5
   1505c:	f009 fe18 	bl	1ec90 <__cxa_demangle>
   15060:	f240 0428 	movw	r4, #40	; 0x28
   15064:	f2c1 0400 	movt	r4, #4096	; 0x1000
   15068:	2101      	movs	r1, #1
   1506a:	2230      	movs	r2, #48	; 0x30
   1506c:	6823      	ldr	r3, [r4, #0]
   1506e:	68db      	ldr	r3, [r3, #12]
   15070:	4606      	mov	r6, r0
   15072:	f24c 1028 	movw	r0, #49448	; 0xc128
   15076:	f2c0 0002 	movt	r0, #2
   1507a:	f00a ff5d 	bl	1ff38 <fwrite>
   1507e:	9801      	ldr	r0, [sp, #4]
   15080:	b190      	cbz	r0, 150a8 <__gnu_cxx::__verbose_terminate_handler()+0x84>
   15082:	6822      	ldr	r2, [r4, #0]
   15084:	4628      	mov	r0, r5
   15086:	68d1      	ldr	r1, [r2, #12]
   15088:	f00a fd6a 	bl	1fb60 <fputs>
   1508c:	6823      	ldr	r3, [r4, #0]
   1508e:	f24c 105c 	movw	r0, #49500	; 0xc15c
   15092:	f2c0 0002 	movt	r0, #2
   15096:	2101      	movs	r1, #1
   15098:	2202      	movs	r2, #2
   1509a:	68db      	ldr	r3, [r3, #12]
   1509c:	f00a ff4c 	bl	1ff38 <fwrite>
   150a0:	9801      	ldr	r0, [sp, #4]
   150a2:	b1b8      	cbz	r0, 150d4 <__gnu_cxx::__verbose_terminate_handler()+0xb0>
   150a4:	f009 ff02 	bl	1eeac <__cxa_rethrow>
   150a8:	6825      	ldr	r5, [r4, #0]
   150aa:	4630      	mov	r0, r6
   150ac:	68e9      	ldr	r1, [r5, #12]
   150ae:	f00a fd57 	bl	1fb60 <fputs>
   150b2:	e7eb      	b.n	1508c <__gnu_cxx::__verbose_terminate_handler()+0x68>
   150b4:	f240 0428 	movw	r4, #40	; 0x28
   150b8:	f24c 1008 	movw	r0, #49416	; 0xc108
   150bc:	f2c1 0400 	movt	r4, #4096	; 0x1000
   150c0:	2101      	movs	r1, #1
   150c2:	221d      	movs	r2, #29
   150c4:	f2c0 0002 	movt	r0, #2
   150c8:	6823      	ldr	r3, [r4, #0]
   150ca:	68db      	ldr	r3, [r3, #12]
   150cc:	f00a ff34 	bl	1ff38 <fwrite>
   150d0:	f00a fc98 	bl	1fa04 <abort>
   150d4:	4630      	mov	r0, r6
   150d6:	f00a ff71 	bl	1ffbc <free>
   150da:	f009 fee7 	bl	1eeac <__cxa_rethrow>
   150de:	2901      	cmp	r1, #1
   150e0:	460e      	mov	r6, r1
   150e2:	d016      	beq.n	15112 <__gnu_cxx::__verbose_terminate_handler()+0xee>
   150e4:	f7ff fde4 	bl	14cb0 <__cxa_begin_catch>
   150e8:	f7ff fe2e 	bl	14d48 <__cxa_end_catch>
   150ec:	f00a fc8a 	bl	1fa04 <abort>
   150f0:	f240 0c28 	movw	ip, #40	; 0x28
   150f4:	4621      	mov	r1, r4
   150f6:	f2c1 0c00 	movt	ip, #4096	; 0x1000
   150fa:	f24c 1060 	movw	r0, #49504	; 0xc160
   150fe:	222d      	movs	r2, #45	; 0x2d
   15100:	f2c0 0002 	movt	r0, #2
   15104:	f8dc 4000 	ldr.w	r4, [ip]
   15108:	68e3      	ldr	r3, [r4, #12]
   1510a:	f00a ff15 	bl	1ff38 <fwrite>
   1510e:	f00a fc79 	bl	1fa04 <abort>
   15112:	f7ff fdcd 	bl	14cb0 <__cxa_begin_catch>
   15116:	6805      	ldr	r5, [r0, #0]
   15118:	68a9      	ldr	r1, [r5, #8]
   1511a:	4788      	blx	r1
   1511c:	6823      	ldr	r3, [r4, #0]
   1511e:	4631      	mov	r1, r6
   15120:	220b      	movs	r2, #11
   15122:	68db      	ldr	r3, [r3, #12]
   15124:	4605      	mov	r5, r0
   15126:	f24c 1090 	movw	r0, #49552	; 0xc190
   1512a:	f2c0 0002 	movt	r0, #2
   1512e:	f00a ff03 	bl	1ff38 <fwrite>
   15132:	6826      	ldr	r6, [r4, #0]
   15134:	4628      	mov	r0, r5
   15136:	68f1      	ldr	r1, [r6, #12]
   15138:	f00a fd12 	bl	1fb60 <fputs>
   1513c:	6822      	ldr	r2, [r4, #0]
   1513e:	200a      	movs	r0, #10
   15140:	68d1      	ldr	r1, [r2, #12]
   15142:	f00a fca1 	bl	1fa88 <fputc>
   15146:	f7ff fdff 	bl	14d48 <__cxa_end_catch>
   1514a:	e7cf      	b.n	150ec <__gnu_cxx::__verbose_terminate_handler()+0xc8>
   1514c:	f7ff fdfc 	bl	14d48 <__cxa_end_catch>
   15150:	f7ff fcd0 	bl	14af4 <__cxa_end_cleanup>

00015154 <d_make_comp>:
   15154:	b470      	push	{r4, r5, r6}
   15156:	1e4c      	subs	r4, r1, #1
   15158:	2c41      	cmp	r4, #65	; 0x41
   1515a:	d828      	bhi.n	151ae <d_make_comp+0x5a>
   1515c:	e8df f004 	tbb	[pc, r4]
   15160:	3a3a3a3a 	.word	0x3a3a3a3a
   15164:	27272727 	.word	0x27272727
   15168:	363a3636 	.word	0x363a3636
   1516c:	36363636 	.word	0x36363636
   15170:	36363636 	.word	0x36363636
   15174:	23232736 	.word	0x23232736
   15178:	23232323 	.word	0x23232323
   1517c:	3636363a 	.word	0x3636363a
   15180:	36273636 	.word	0x36273636
   15184:	273a2123 	.word	0x273a2123
   15188:	2723233a 	.word	0x2723233a
   1518c:	3a3a3627 	.word	0x3a3a3627
   15190:	3a3a3a3a 	.word	0x3a3a3a3a
   15194:	3a363a3a 	.word	0x3a363a3a
   15198:	36362727 	.word	0x36362727
   1519c:	27272736 	.word	0x27272736
   151a0:	3a36      	.short	0x3a36
   151a2:	2b00      	cmp	r3, #0
   151a4:	d025      	beq.n	151f2 <d_make_comp+0x9e>
   151a6:	6944      	ldr	r4, [r0, #20]
   151a8:	6985      	ldr	r5, [r0, #24]
   151aa:	42ac      	cmp	r4, r5
   151ac:	db02      	blt.n	151b4 <d_make_comp+0x60>
   151ae:	2000      	movs	r0, #0
   151b0:	bc70      	pop	{r4, r5, r6}
   151b2:	4770      	bx	lr
   151b4:	eb04 0644 	add.w	r6, r4, r4, lsl #1
   151b8:	6905      	ldr	r5, [r0, #16]
   151ba:	3401      	adds	r4, #1
   151bc:	6144      	str	r4, [r0, #20]
   151be:	00b4      	lsls	r4, r6, #2
   151c0:	1928      	adds	r0, r5, r4
   151c2:	bf1e      	ittt	ne
   151c4:	6042      	strne	r2, [r0, #4]
   151c6:	5529      	strbne	r1, [r5, r4]
   151c8:	6083      	strne	r3, [r0, #8]
   151ca:	e7f1      	b.n	151b0 <d_make_comp+0x5c>
   151cc:	2a00      	cmp	r2, #0
   151ce:	d1ea      	bne.n	151a6 <d_make_comp+0x52>
   151d0:	4610      	mov	r0, r2
   151d2:	e7ed      	b.n	151b0 <d_make_comp+0x5c>
   151d4:	f1d2 0401 	rsbs	r4, r2, #1
   151d8:	bf38      	it	cc
   151da:	2400      	movcc	r4, #0
   151dc:	2b00      	cmp	r3, #0
   151de:	bf08      	it	eq
   151e0:	f044 0401 	orreq.w	r4, r4, #1
   151e4:	2c00      	cmp	r4, #0
   151e6:	d1e2      	bne.n	151ae <d_make_comp+0x5a>
   151e8:	6944      	ldr	r4, [r0, #20]
   151ea:	6985      	ldr	r5, [r0, #24]
   151ec:	42ac      	cmp	r4, r5
   151ee:	dade      	bge.n	151ae <d_make_comp+0x5a>
   151f0:	e7e0      	b.n	151b4 <d_make_comp+0x60>
   151f2:	4618      	mov	r0, r3
   151f4:	e7dc      	b.n	151b0 <d_make_comp+0x5c>
   151f6:	bf00      	nop

000151f8 <d_make_name>:
   151f8:	b430      	push	{r4, r5}
   151fa:	6943      	ldr	r3, [r0, #20]
   151fc:	6984      	ldr	r4, [r0, #24]
   151fe:	42a3      	cmp	r3, r4
   15200:	da11      	bge.n	15226 <d_make_name+0x2e>
   15202:	6904      	ldr	r4, [r0, #16]
   15204:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   15208:	3301      	adds	r3, #1
   1520a:	6143      	str	r3, [r0, #20]
   1520c:	eb14 0085 	adds.w	r0, r4, r5, lsl #2
   15210:	bf14      	ite	ne
   15212:	2300      	movne	r3, #0
   15214:	2301      	moveq	r3, #1
   15216:	2900      	cmp	r1, #0
   15218:	bf08      	it	eq
   1521a:	f043 0301 	orreq.w	r3, r3, #1
   1521e:	b953      	cbnz	r3, 15236 <d_make_name+0x3e>
   15220:	b962      	cbnz	r2, 1523c <d_make_name+0x44>
   15222:	4610      	mov	r0, r2
   15224:	e008      	b.n	15238 <d_make_name+0x40>
   15226:	2301      	movs	r3, #1
   15228:	2000      	movs	r0, #0
   1522a:	2900      	cmp	r1, #0
   1522c:	bf08      	it	eq
   1522e:	f043 0301 	orreq.w	r3, r3, #1
   15232:	2b00      	cmp	r3, #0
   15234:	d0f4      	beq.n	15220 <d_make_name+0x28>
   15236:	2000      	movs	r0, #0
   15238:	bc30      	pop	{r4, r5}
   1523a:	4770      	bx	lr
   1523c:	7003      	strb	r3, [r0, #0]
   1523e:	6041      	str	r1, [r0, #4]
   15240:	6082      	str	r2, [r0, #8]
   15242:	e7f9      	b.n	15238 <d_make_name+0x40>

00015244 <d_number>:
   15244:	68c2      	ldr	r2, [r0, #12]
   15246:	b470      	push	{r4, r5, r6}
   15248:	2600      	movs	r6, #0
   1524a:	7813      	ldrb	r3, [r2, #0]
   1524c:	4605      	mov	r5, r0
   1524e:	2b6e      	cmp	r3, #110	; 0x6e
   15250:	d01a      	beq.n	15288 <d_number+0x44>
   15252:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   15256:	b2c2      	uxtb	r2, r0
   15258:	2a09      	cmp	r2, #9
   1525a:	d81a      	bhi.n	15292 <d_number+0x4e>
   1525c:	68ea      	ldr	r2, [r5, #12]
   1525e:	2000      	movs	r0, #0
   15260:	4611      	mov	r1, r2
   15262:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   15266:	3201      	adds	r2, #1
   15268:	60ea      	str	r2, [r5, #12]
   1526a:	eb03 0c40 	add.w	ip, r3, r0, lsl #1
   1526e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   15272:	f1ac 0030 	sub.w	r0, ip, #48	; 0x30
   15276:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
   1527a:	b2e4      	uxtb	r4, r4
   1527c:	2c09      	cmp	r4, #9
   1527e:	d9f0      	bls.n	15262 <d_number+0x1e>
   15280:	b106      	cbz	r6, 15284 <d_number+0x40>
   15282:	4240      	negs	r0, r0
   15284:	bc70      	pop	{r4, r5, r6}
   15286:	4770      	bx	lr
   15288:	1c53      	adds	r3, r2, #1
   1528a:	2601      	movs	r6, #1
   1528c:	60c3      	str	r3, [r0, #12]
   1528e:	7853      	ldrb	r3, [r2, #1]
   15290:	e7df      	b.n	15252 <d_number+0xe>
   15292:	2000      	movs	r0, #0
   15294:	e7f4      	b.n	15280 <d_number+0x3c>
   15296:	bf00      	nop

00015298 <d_cv_qualifiers>:
   15298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1529a:	4616      	mov	r6, r2
   1529c:	68c3      	ldr	r3, [r0, #12]
   1529e:	4604      	mov	r4, r0
   152a0:	460d      	mov	r5, r1
   152a2:	781a      	ldrb	r2, [r3, #0]
   152a4:	e013      	b.n	152ce <d_cv_qualifiers+0x36>
   152a6:	2a4b      	cmp	r2, #75	; 0x4b
   152a8:	d133      	bne.n	15312 <d_cv_qualifiers+0x7a>
   152aa:	60e7      	str	r7, [r4, #12]
   152ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
   152ae:	2e00      	cmp	r6, #0
   152b0:	bf0c      	ite	eq
   152b2:	2119      	moveq	r1, #25
   152b4:	211c      	movne	r1, #28
   152b6:	1d9a      	adds	r2, r3, #6
   152b8:	6322      	str	r2, [r4, #48]	; 0x30
   152ba:	2200      	movs	r2, #0
   152bc:	4620      	mov	r0, r4
   152be:	4613      	mov	r3, r2
   152c0:	f7ff ff48 	bl	15154 <d_make_comp>
   152c4:	6028      	str	r0, [r5, #0]
   152c6:	b318      	cbz	r0, 15310 <d_cv_qualifiers+0x78>
   152c8:	68e3      	ldr	r3, [r4, #12]
   152ca:	1d05      	adds	r5, r0, #4
   152cc:	781a      	ldrb	r2, [r3, #0]
   152ce:	f1a2 0c72 	sub.w	ip, r2, #114	; 0x72
   152d2:	f1a2 0056 	sub.w	r0, r2, #86	; 0x56
   152d6:	f1dc 0100 	rsbs	r1, ip, #0
   152da:	eb41 010c 	adc.w	r1, r1, ip
   152de:	4247      	negs	r7, r0
   152e0:	eb47 0000 	adc.w	r0, r7, r0
   152e4:	ea50 0701 	orrs.w	r7, r0, r1
   152e8:	f103 0701 	add.w	r7, r3, #1
   152ec:	d0db      	beq.n	152a6 <d_cv_qualifiers+0xe>
   152ee:	60e7      	str	r7, [r4, #12]
   152f0:	b189      	cbz	r1, 15316 <d_cv_qualifiers+0x7e>
   152f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   152f4:	2200      	movs	r2, #0
   152f6:	2e00      	cmp	r6, #0
   152f8:	bf0c      	ite	eq
   152fa:	2117      	moveq	r1, #23
   152fc:	211a      	movne	r1, #26
   152fe:	4620      	mov	r0, r4
   15300:	3309      	adds	r3, #9
   15302:	6323      	str	r3, [r4, #48]	; 0x30
   15304:	4613      	mov	r3, r2
   15306:	f7ff ff25 	bl	15154 <d_make_comp>
   1530a:	6028      	str	r0, [r5, #0]
   1530c:	2800      	cmp	r0, #0
   1530e:	d1db      	bne.n	152c8 <d_cv_qualifiers+0x30>
   15310:	4605      	mov	r5, r0
   15312:	4628      	mov	r0, r5
   15314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15316:	2800      	cmp	r0, #0
   15318:	d0c8      	beq.n	152ac <d_cv_qualifiers+0x14>
   1531a:	6b20      	ldr	r0, [r4, #48]	; 0x30
   1531c:	2e00      	cmp	r6, #0
   1531e:	bf0c      	ite	eq
   15320:	2118      	moveq	r1, #24
   15322:	211b      	movne	r1, #27
   15324:	3009      	adds	r0, #9
   15326:	6320      	str	r0, [r4, #48]	; 0x30
   15328:	e7c7      	b.n	152ba <d_cv_qualifiers+0x22>
   1532a:	bf00      	nop

0001532c <d_compact_number>:
   1532c:	68c3      	ldr	r3, [r0, #12]
   1532e:	b510      	push	{r4, lr}
   15330:	4604      	mov	r4, r0
   15332:	781a      	ldrb	r2, [r3, #0]
   15334:	2a5f      	cmp	r2, #95	; 0x5f
   15336:	d00b      	beq.n	15350 <d_compact_number+0x24>
   15338:	2a6e      	cmp	r2, #110	; 0x6e
   1533a:	d00d      	beq.n	15358 <d_compact_number+0x2c>
   1533c:	f7ff ff82 	bl	15244 <d_number>
   15340:	68e3      	ldr	r3, [r4, #12]
   15342:	781a      	ldrb	r2, [r3, #0]
   15344:	3001      	adds	r0, #1
   15346:	2a5f      	cmp	r2, #95	; 0x5f
   15348:	d003      	beq.n	15352 <d_compact_number+0x26>
   1534a:	f04f 30ff 	mov.w	r0, #4294967295
   1534e:	bd10      	pop	{r4, pc}
   15350:	2000      	movs	r0, #0
   15352:	3301      	adds	r3, #1
   15354:	60e3      	str	r3, [r4, #12]
   15356:	bd10      	pop	{r4, pc}
   15358:	f04f 30ff 	mov.w	r0, #4294967295
   1535c:	bd10      	pop	{r4, pc}
   1535e:	bf00      	nop

00015360 <d_template_param>:
   15360:	b538      	push	{r3, r4, r5, lr}
   15362:	4604      	mov	r4, r0
   15364:	68c3      	ldr	r3, [r0, #12]
   15366:	781a      	ldrb	r2, [r3, #0]
   15368:	2a54      	cmp	r2, #84	; 0x54
   1536a:	d001      	beq.n	15370 <d_template_param+0x10>
   1536c:	2000      	movs	r0, #0
   1536e:	bd38      	pop	{r3, r4, r5, pc}
   15370:	3301      	adds	r3, #1
   15372:	60c3      	str	r3, [r0, #12]
   15374:	f7ff ffda 	bl	1532c <d_compact_number>
   15378:	1e05      	subs	r5, r0, #0
   1537a:	dbf7      	blt.n	1536c <d_template_param+0xc>
   1537c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1537e:	6963      	ldr	r3, [r4, #20]
   15380:	69a2      	ldr	r2, [r4, #24]
   15382:	1c41      	adds	r1, r0, #1
   15384:	2000      	movs	r0, #0
   15386:	62a1      	str	r1, [r4, #40]	; 0x28
   15388:	4293      	cmp	r3, r2
   1538a:	da0b      	bge.n	153a4 <d_template_param+0x44>
   1538c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   15390:	6922      	ldr	r2, [r4, #16]
   15392:	3301      	adds	r3, #1
   15394:	6163      	str	r3, [r4, #20]
   15396:	008b      	lsls	r3, r1, #2
   15398:	18d0      	adds	r0, r2, r3
   1539a:	d003      	beq.n	153a4 <d_template_param+0x44>
   1539c:	2105      	movs	r1, #5
   1539e:	6045      	str	r5, [r0, #4]
   153a0:	54d1      	strb	r1, [r2, r3]
   153a2:	bd38      	pop	{r3, r4, r5, pc}
   153a4:	bd38      	pop	{r3, r4, r5, pc}
   153a6:	bf00      	nop

000153a8 <d_substitution>:
   153a8:	4603      	mov	r3, r0
   153aa:	68c0      	ldr	r0, [r0, #12]
   153ac:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
   153b0:	7802      	ldrb	r2, [r0, #0]
   153b2:	2a53      	cmp	r2, #83	; 0x53
   153b4:	d003      	beq.n	153be <d_substitution+0x16>
   153b6:	2000      	movs	r0, #0
   153b8:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
   153bc:	4770      	bx	lr
   153be:	1c42      	adds	r2, r0, #1
   153c0:	60da      	str	r2, [r3, #12]
   153c2:	7842      	ldrb	r2, [r0, #1]
   153c4:	2a00      	cmp	r2, #0
   153c6:	d03f      	beq.n	15448 <d_substitution+0xa0>
   153c8:	f1a2 0c5f 	sub.w	ip, r2, #95	; 0x5f
   153cc:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   153d0:	f1dc 0500 	rsbs	r5, ip, #0
   153d4:	eb45 050c 	adc.w	r5, r5, ip
   153d8:	3002      	adds	r0, #2
   153da:	60d8      	str	r0, [r3, #12]
   153dc:	b2e0      	uxtb	r0, r4
   153de:	2809      	cmp	r0, #9
   153e0:	bf8c      	ite	hi
   153e2:	4628      	movhi	r0, r5
   153e4:	f045 0001 	orrls.w	r0, r5, #1
   153e8:	2800      	cmp	r0, #0
   153ea:	f000 808f 	beq.w	1550c <d_substitution+0x164>
   153ee:	2000      	movs	r0, #0
   153f0:	2a5f      	cmp	r2, #95	; 0x5f
   153f2:	d01f      	beq.n	15434 <d_substitution+0x8c>
   153f4:	2100      	movs	r1, #0
   153f6:	eb01 0cc1 	add.w	ip, r1, r1, lsl #3
   153fa:	b2e4      	uxtb	r4, r4
   153fc:	f1a2 0641 	sub.w	r6, r2, #65	; 0x41
   15400:	2c09      	cmp	r4, #9
   15402:	eb02 008c 	add.w	r0, r2, ip, lsl #2
   15406:	4602      	mov	r2, r0
   15408:	b2f6      	uxtb	r6, r6
   1540a:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
   1540e:	d903      	bls.n	15418 <d_substitution+0x70>
   15410:	2e19      	cmp	r6, #25
   15412:	f1a2 0037 	sub.w	r0, r2, #55	; 0x37
   15416:	d8ce      	bhi.n	153b6 <d_substitution+0xe>
   15418:	4281      	cmp	r1, r0
   1541a:	4601      	mov	r1, r0
   1541c:	d8cb      	bhi.n	153b6 <d_substitution+0xe>
   1541e:	68da      	ldr	r2, [r3, #12]
   15420:	1c54      	adds	r4, r2, #1
   15422:	7812      	ldrb	r2, [r2, #0]
   15424:	b112      	cbz	r2, 1542c <d_substitution+0x84>
   15426:	2a5f      	cmp	r2, #95	; 0x5f
   15428:	60dc      	str	r4, [r3, #12]
   1542a:	d002      	beq.n	15432 <d_substitution+0x8a>
   1542c:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   15430:	e7e1      	b.n	153f6 <d_substitution+0x4e>
   15432:	3001      	adds	r0, #1
   15434:	6a19      	ldr	r1, [r3, #32]
   15436:	4288      	cmp	r0, r1
   15438:	d2bd      	bcs.n	153b6 <d_substitution+0xe>
   1543a:	69d9      	ldr	r1, [r3, #28]
   1543c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1543e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
   15442:	3201      	adds	r2, #1
   15444:	629a      	str	r2, [r3, #40]	; 0x28
   15446:	e7b7      	b.n	153b8 <d_substitution+0x10>
   15448:	689f      	ldr	r7, [r3, #8]
   1544a:	f3c7 07c0 	ubfx	r7, r7, #3, #1
   1544e:	f087 0c01 	eor.w	ip, r7, #1
   15452:	2900      	cmp	r1, #0
   15454:	bf0c      	ite	eq
   15456:	2000      	moveq	r0, #0
   15458:	f00c 0001 	andne.w	r0, ip, #1
   1545c:	b9c0      	cbnz	r0, 15490 <d_substitution+0xe8>
   1545e:	2a74      	cmp	r2, #116	; 0x74
   15460:	f24c 119c 	movw	r1, #49564	; 0xc19c
   15464:	f2c0 0102 	movt	r1, #2
   15468:	bf1e      	ittt	ne
   1546a:	f101 06c4 	addne.w	r6, r1, #196	; 0xc4
   1546e:	460d      	movne	r5, r1
   15470:	f101 041c 	addne.w	r4, r1, #28
   15474:	d104      	bne.n	15480 <d_substitution+0xd8>
   15476:	e014      	b.n	154a2 <d_substitution+0xfa>
   15478:	f810 cc1c 	ldrb.w	ip, [r0, #-28]
   1547c:	4594      	cmp	ip, r2
   1547e:	d010      	beq.n	154a2 <d_substitution+0xfa>
   15480:	311c      	adds	r1, #28
   15482:	42b1      	cmp	r1, r6
   15484:	ebc5 0c01 	rsb	ip, r5, r1
   15488:	eb0c 0004 	add.w	r0, ip, r4
   1548c:	d3f4      	bcc.n	15478 <d_substitution+0xd0>
   1548e:	e792      	b.n	153b6 <d_substitution+0xe>
   15490:	68d8      	ldr	r0, [r3, #12]
   15492:	7801      	ldrb	r1, [r0, #0]
   15494:	3943      	subs	r1, #67	; 0x43
   15496:	b2cf      	uxtb	r7, r1
   15498:	2f01      	cmp	r7, #1
   1549a:	bf8c      	ite	hi
   1549c:	2700      	movhi	r7, #0
   1549e:	2701      	movls	r7, #1
   154a0:	e7dd      	b.n	1545e <d_substitution+0xb6>
   154a2:	694d      	ldr	r5, [r1, #20]
   154a4:	695a      	ldr	r2, [r3, #20]
   154a6:	6998      	ldr	r0, [r3, #24]
   154a8:	b1b5      	cbz	r5, 154d8 <d_substitution+0x130>
   154aa:	2400      	movs	r4, #0
   154ac:	4282      	cmp	r2, r0
   154ae:	f8d1 8018 	ldr.w	r8, [r1, #24]
   154b2:	da10      	bge.n	154d6 <d_substitution+0x12e>
   154b4:	eb02 0442 	add.w	r4, r2, r2, lsl #1
   154b8:	f8d3 c010 	ldr.w	ip, [r3, #16]
   154bc:	3201      	adds	r2, #1
   154be:	615a      	str	r2, [r3, #20]
   154c0:	00a6      	lsls	r6, r4, #2
   154c2:	eb1c 0406 	adds.w	r4, ip, r6
   154c6:	d006      	beq.n	154d6 <d_substitution+0x12e>
   154c8:	6065      	str	r5, [r4, #4]
   154ca:	2516      	movs	r5, #22
   154cc:	f8c4 8008 	str.w	r8, [r4, #8]
   154d0:	6998      	ldr	r0, [r3, #24]
   154d2:	f80c 5006 	strb.w	r5, [ip, r6]
   154d6:	62dc      	str	r4, [r3, #44]	; 0x2c
   154d8:	b9af      	cbnz	r7, 15506 <d_substitution+0x15e>
   154da:	684d      	ldr	r5, [r1, #4]
   154dc:	6889      	ldr	r1, [r1, #8]
   154de:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   154e0:	4290      	cmp	r0, r2
   154e2:	440c      	add	r4, r1
   154e4:	631c      	str	r4, [r3, #48]	; 0x30
   154e6:	f77f af66 	ble.w	153b6 <d_substitution+0xe>
   154ea:	eb02 0042 	add.w	r0, r2, r2, lsl #1
   154ee:	691c      	ldr	r4, [r3, #16]
   154f0:	3201      	adds	r2, #1
   154f2:	615a      	str	r2, [r3, #20]
   154f4:	0083      	lsls	r3, r0, #2
   154f6:	18e0      	adds	r0, r4, r3
   154f8:	f43f af5e 	beq.w	153b8 <d_substitution+0x10>
   154fc:	2216      	movs	r2, #22
   154fe:	6045      	str	r5, [r0, #4]
   15500:	54e2      	strb	r2, [r4, r3]
   15502:	6081      	str	r1, [r0, #8]
   15504:	e758      	b.n	153b8 <d_substitution+0x10>
   15506:	68cd      	ldr	r5, [r1, #12]
   15508:	6909      	ldr	r1, [r1, #16]
   1550a:	e7e8      	b.n	154de <d_substitution+0x136>
   1550c:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   15510:	b2ed      	uxtb	r5, r5
   15512:	2d19      	cmp	r5, #25
   15514:	d898      	bhi.n	15448 <d_substitution+0xa0>
   15516:	4601      	mov	r1, r0
   15518:	e76d      	b.n	153f6 <d_substitution+0x4e>
   1551a:	bf00      	nop

0001551c <d_append_char>:
   1551c:	b570      	push	{r4, r5, r6, lr}
   1551e:	460d      	mov	r5, r1
   15520:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
   15524:	4604      	mov	r4, r0
   15526:	1c4b      	adds	r3, r1, #1
   15528:	29ff      	cmp	r1, #255	; 0xff
   1552a:	d006      	beq.n	1553a <d_append_char+0x1e>
   1552c:	1861      	adds	r1, r4, r1
   1552e:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   15532:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
   15536:	710d      	strb	r5, [r1, #4]
   15538:	bd70      	pop	{r4, r5, r6, pc}
   1553a:	2600      	movs	r6, #0
   1553c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   15540:	f880 6103 	strb.w	r6, [r0, #259]	; 0x103
   15544:	3004      	adds	r0, #4
   15546:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1554a:	4798      	blx	r3
   1554c:	4631      	mov	r1, r6
   1554e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   15552:	1861      	adds	r1, r4, r1
   15554:	2301      	movs	r3, #1
   15556:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
   1555a:	18c2      	adds	r2, r0, r3
   1555c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   15560:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   15564:	710d      	strb	r5, [r1, #4]
   15566:	bd70      	pop	{r4, r5, r6, pc}

00015568 <d_find_pack>:
   15568:	b538      	push	{r3, r4, r5, lr}
   1556a:	460c      	mov	r4, r1
   1556c:	4605      	mov	r5, r0
   1556e:	2900      	cmp	r1, #0
   15570:	d073      	beq.n	1565a <d_find_pack+0xf2>
   15572:	7823      	ldrb	r3, [r4, #0]
   15574:	2b41      	cmp	r3, #65	; 0x41
   15576:	d822      	bhi.n	155be <d_find_pack+0x56>
   15578:	e8df f003 	tbb	[pc, r3]
   1557c:	21212158 	.word	0x21212158
   15580:	27582c21 	.word	0x27582c21
   15584:	21212127 	.word	0x21212127
   15588:	21212121 	.word	0x21212121
   1558c:	21212121 	.word	0x21212121
   15590:	21582121 	.word	0x21582121
   15594:	21212121 	.word	0x21212121
   15598:	21212121 	.word	0x21212121
   1559c:	58212121 	.word	0x58212121
   155a0:	21212121 	.word	0x21212121
   155a4:	21212121 	.word	0x21212121
   155a8:	21212758 	.word	0x21212758
   155ac:	21212121 	.word	0x21212121
   155b0:	21212121 	.word	0x21212121
   155b4:	21215821 	.word	0x21215821
   155b8:	21582121 	.word	0x21582121
   155bc:	5821      	.short	0x5821
   155be:	6861      	ldr	r1, [r4, #4]
   155c0:	4628      	mov	r0, r5
   155c2:	f7ff ffd1 	bl	15568 <d_find_pack>
   155c6:	2800      	cmp	r0, #0
   155c8:	d13a      	bne.n	15640 <d_find_pack+0xd8>
   155ca:	68a4      	ldr	r4, [r4, #8]
   155cc:	2c00      	cmp	r4, #0
   155ce:	d1d0      	bne.n	15572 <d_find_pack+0xa>
   155d0:	4620      	mov	r0, r4
   155d2:	bd38      	pop	{r3, r4, r5, pc}
   155d4:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
   155d8:	2800      	cmp	r0, #0
   155da:	d03a      	beq.n	15652 <d_find_pack+0xea>
   155dc:	6840      	ldr	r0, [r0, #4]
   155de:	6862      	ldr	r2, [r4, #4]
   155e0:	6883      	ldr	r3, [r0, #8]
   155e2:	b32b      	cbz	r3, 15630 <d_find_pack+0xc8>
   155e4:	f893 c000 	ldrb.w	ip, [r3]
   155e8:	f1bc 0f2b 	cmp.w	ip, #43	; 0x2b
   155ec:	d11e      	bne.n	1562c <d_find_pack+0xc4>
   155ee:	2a00      	cmp	r2, #0
   155f0:	dd35      	ble.n	1565e <d_find_pack+0xf6>
   155f2:	689b      	ldr	r3, [r3, #8]
   155f4:	3a01      	subs	r2, #1
   155f6:	f002 0001 	and.w	r0, r2, #1
   155fa:	b1cb      	cbz	r3, 15630 <d_find_pack+0xc8>
   155fc:	f893 c000 	ldrb.w	ip, [r3]
   15600:	f1bc 0f2b 	cmp.w	ip, #43	; 0x2b
   15604:	d112      	bne.n	1562c <d_find_pack+0xc4>
   15606:	b1e2      	cbz	r2, 15642 <d_find_pack+0xda>
   15608:	b120      	cbz	r0, 15614 <d_find_pack+0xac>
   1560a:	689b      	ldr	r3, [r3, #8]
   1560c:	3a01      	subs	r2, #1
   1560e:	b953      	cbnz	r3, 15626 <d_find_pack+0xbe>
   15610:	e00e      	b.n	15630 <d_find_pack+0xc8>
   15612:	b1b2      	cbz	r2, 15642 <d_find_pack+0xda>
   15614:	689b      	ldr	r3, [r3, #8]
   15616:	3a01      	subs	r2, #1
   15618:	b153      	cbz	r3, 15630 <d_find_pack+0xc8>
   1561a:	7819      	ldrb	r1, [r3, #0]
   1561c:	3a01      	subs	r2, #1
   1561e:	292b      	cmp	r1, #43	; 0x2b
   15620:	d104      	bne.n	1562c <d_find_pack+0xc4>
   15622:	689b      	ldr	r3, [r3, #8]
   15624:	b123      	cbz	r3, 15630 <d_find_pack+0xc8>
   15626:	7818      	ldrb	r0, [r3, #0]
   15628:	282b      	cmp	r0, #43	; 0x2b
   1562a:	d0f2      	beq.n	15612 <d_find_pack+0xaa>
   1562c:	2000      	movs	r0, #0
   1562e:	bd38      	pop	{r3, r4, r5, pc}
   15630:	2101      	movs	r1, #1
   15632:	2a00      	cmp	r2, #0
   15634:	bf0c      	ite	eq
   15636:	460a      	moveq	r2, r1
   15638:	f041 0201 	orrne.w	r2, r1, #1
   1563c:	2000      	movs	r0, #0
   1563e:	b102      	cbz	r2, 15642 <d_find_pack+0xda>
   15640:	bd38      	pop	{r3, r4, r5, pc}
   15642:	6858      	ldr	r0, [r3, #4]
   15644:	2800      	cmp	r0, #0
   15646:	d0fb      	beq.n	15640 <d_find_pack+0xd8>
   15648:	7803      	ldrb	r3, [r0, #0]
   1564a:	2b2b      	cmp	r3, #43	; 0x2b
   1564c:	bf18      	it	ne
   1564e:	2000      	movne	r0, #0
   15650:	bd38      	pop	{r3, r4, r5, pc}
   15652:	2101      	movs	r1, #1
   15654:	f8c5 111c 	str.w	r1, [r5, #284]	; 0x11c
   15658:	bd38      	pop	{r3, r4, r5, pc}
   1565a:	4608      	mov	r0, r1
   1565c:	bd38      	pop	{r3, r4, r5, pc}
   1565e:	2100      	movs	r1, #0
   15660:	e7e7      	b.n	15632 <d_find_pack+0xca>
   15662:	bf00      	nop

00015664 <d_source_name>:
   15664:	b570      	push	{r4, r5, r6, lr}
   15666:	4604      	mov	r4, r0
   15668:	f7ff fdec 	bl	15244 <d_number>
   1566c:	1e06      	subs	r6, r0, #0
   1566e:	dd41      	ble.n	156f4 <d_source_name+0x90>
   15670:	6860      	ldr	r0, [r4, #4]
   15672:	68e5      	ldr	r5, [r4, #12]
   15674:	1b43      	subs	r3, r0, r5
   15676:	2000      	movs	r0, #0
   15678:	429e      	cmp	r6, r3
   1567a:	dc14      	bgt.n	156a6 <d_source_name+0x42>
   1567c:	68a2      	ldr	r2, [r4, #8]
   1567e:	19ab      	adds	r3, r5, r6
   15680:	60e3      	str	r3, [r4, #12]
   15682:	0750      	lsls	r0, r2, #29
   15684:	d411      	bmi.n	156aa <d_source_name+0x46>
   15686:	2e09      	cmp	r6, #9
   15688:	dd08      	ble.n	1569c <d_source_name+0x38>
   1568a:	f64c 0144 	movw	r1, #51268	; 0xc844
   1568e:	4628      	mov	r0, r5
   15690:	f2c0 0102 	movt	r1, #2
   15694:	2208      	movs	r2, #8
   15696:	f00a ff9d 	bl	205d4 <memcmp>
   1569a:	b160      	cbz	r0, 156b6 <d_source_name+0x52>
   1569c:	4620      	mov	r0, r4
   1569e:	4629      	mov	r1, r5
   156a0:	4632      	mov	r2, r6
   156a2:	f7ff fda9 	bl	151f8 <d_make_name>
   156a6:	62e0      	str	r0, [r4, #44]	; 0x2c
   156a8:	bd70      	pop	{r4, r5, r6, pc}
   156aa:	5da9      	ldrb	r1, [r5, r6]
   156ac:	2924      	cmp	r1, #36	; 0x24
   156ae:	d1ea      	bne.n	15686 <d_source_name+0x22>
   156b0:	3301      	adds	r3, #1
   156b2:	60e3      	str	r3, [r4, #12]
   156b4:	e7e7      	b.n	15686 <d_source_name+0x22>
   156b6:	7a2b      	ldrb	r3, [r5, #8]
   156b8:	f1a3 022e 	sub.w	r2, r3, #46	; 0x2e
   156bc:	f1d2 0c00 	rsbs	ip, r2, #0
   156c0:	eb4c 0002 	adc.w	r0, ip, r2
   156c4:	2b5f      	cmp	r3, #95	; 0x5f
   156c6:	bf08      	it	eq
   156c8:	f040 0001 	orreq.w	r0, r0, #1
   156cc:	b178      	cbz	r0, 156ee <d_source_name+0x8a>
   156ce:	7a69      	ldrb	r1, [r5, #9]
   156d0:	294e      	cmp	r1, #78	; 0x4e
   156d2:	d1e3      	bne.n	1569c <d_source_name+0x38>
   156d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   156d6:	f64c 0150 	movw	r1, #51280	; 0xc850
   156da:	4620      	mov	r0, r4
   156dc:	f2c0 0102 	movt	r1, #2
   156e0:	3316      	adds	r3, #22
   156e2:	2215      	movs	r2, #21
   156e4:	1b9e      	subs	r6, r3, r6
   156e6:	6326      	str	r6, [r4, #48]	; 0x30
   156e8:	f7ff fd86 	bl	151f8 <d_make_name>
   156ec:	e7db      	b.n	156a6 <d_source_name+0x42>
   156ee:	2b24      	cmp	r3, #36	; 0x24
   156f0:	d1d4      	bne.n	1569c <d_source_name+0x38>
   156f2:	e7ec      	b.n	156ce <d_source_name+0x6a>
   156f4:	2000      	movs	r0, #0
   156f6:	bd70      	pop	{r4, r5, r6, pc}

000156f8 <d_call_offset>:
   156f8:	b510      	push	{r4, lr}
   156fa:	4604      	mov	r4, r0
   156fc:	b921      	cbnz	r1, 15708 <d_call_offset+0x10>
   156fe:	68c3      	ldr	r3, [r0, #12]
   15700:	7819      	ldrb	r1, [r3, #0]
   15702:	b139      	cbz	r1, 15714 <d_call_offset+0x1c>
   15704:	3301      	adds	r3, #1
   15706:	60c3      	str	r3, [r0, #12]
   15708:	2968      	cmp	r1, #104	; 0x68
   1570a:	d00e      	beq.n	1572a <d_call_offset+0x32>
   1570c:	2976      	cmp	r1, #118	; 0x76
   1570e:	d003      	beq.n	15718 <d_call_offset+0x20>
   15710:	2000      	movs	r0, #0
   15712:	bd10      	pop	{r4, pc}
   15714:	4608      	mov	r0, r1
   15716:	bd10      	pop	{r4, pc}
   15718:	4620      	mov	r0, r4
   1571a:	f7ff fd93 	bl	15244 <d_number>
   1571e:	68e3      	ldr	r3, [r4, #12]
   15720:	781a      	ldrb	r2, [r3, #0]
   15722:	2a5f      	cmp	r2, #95	; 0x5f
   15724:	d00c      	beq.n	15740 <d_call_offset+0x48>
   15726:	2000      	movs	r0, #0
   15728:	bd10      	pop	{r4, pc}
   1572a:	4620      	mov	r0, r4
   1572c:	f7ff fd8a 	bl	15244 <d_number>
   15730:	68e3      	ldr	r3, [r4, #12]
   15732:	7818      	ldrb	r0, [r3, #0]
   15734:	285f      	cmp	r0, #95	; 0x5f
   15736:	d1eb      	bne.n	15710 <d_call_offset+0x18>
   15738:	3301      	adds	r3, #1
   1573a:	2001      	movs	r0, #1
   1573c:	60e3      	str	r3, [r4, #12]
   1573e:	bd10      	pop	{r4, pc}
   15740:	1c59      	adds	r1, r3, #1
   15742:	4620      	mov	r0, r4
   15744:	60e1      	str	r1, [r4, #12]
   15746:	f7ff fd7d 	bl	15244 <d_number>
   1574a:	e7f1      	b.n	15730 <d_call_offset+0x38>

0001574c <d_add_substitution>:
   1574c:	b430      	push	{r4, r5}
   1574e:	4603      	mov	r3, r0
   15750:	b169      	cbz	r1, 1576e <d_add_substitution+0x22>
   15752:	6a02      	ldr	r2, [r0, #32]
   15754:	6a40      	ldr	r0, [r0, #36]	; 0x24
   15756:	4282      	cmp	r2, r0
   15758:	da07      	bge.n	1576a <d_add_substitution+0x1e>
   1575a:	69dd      	ldr	r5, [r3, #28]
   1575c:	2001      	movs	r0, #1
   1575e:	1c54      	adds	r4, r2, #1
   15760:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
   15764:	621c      	str	r4, [r3, #32]
   15766:	bc30      	pop	{r4, r5}
   15768:	4770      	bx	lr
   1576a:	2000      	movs	r0, #0
   1576c:	e7fb      	b.n	15766 <d_add_substitution+0x1a>
   1576e:	4608      	mov	r0, r1
   15770:	e7f9      	b.n	15766 <d_add_substitution+0x1a>
   15772:	bf00      	nop

00015774 <d_growable_string_callback_adapter>:
   15774:	b5f0      	push	{r4, r5, r6, r7, lr}
   15776:	4607      	mov	r7, r0
   15778:	6850      	ldr	r0, [r2, #4]
   1577a:	b083      	sub	sp, #12
   1577c:	6896      	ldr	r6, [r2, #8]
   1577e:	4614      	mov	r4, r2
   15780:	1c43      	adds	r3, r0, #1
   15782:	460d      	mov	r5, r1
   15784:	185b      	adds	r3, r3, r1
   15786:	42b3      	cmp	r3, r6
   15788:	d814      	bhi.n	157b4 <d_growable_string_callback_adapter+0x40>
   1578a:	68e6      	ldr	r6, [r4, #12]
   1578c:	b10e      	cbz	r6, 15792 <d_growable_string_callback_adapter+0x1e>
   1578e:	b003      	add	sp, #12
   15790:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15792:	6863      	ldr	r3, [r4, #4]
   15794:	462a      	mov	r2, r5
   15796:	6820      	ldr	r0, [r4, #0]
   15798:	4639      	mov	r1, r7
   1579a:	18c0      	adds	r0, r0, r3
   1579c:	f00a ff48 	bl	20630 <memcpy>
   157a0:	e894 000c 	ldmia.w	r4, {r2, r3}
   157a4:	eb02 0c05 	add.w	ip, r2, r5
   157a8:	f80c 6003 	strb.w	r6, [ip, r3]
   157ac:	6860      	ldr	r0, [r4, #4]
   157ae:	1945      	adds	r5, r0, r5
   157b0:	6065      	str	r5, [r4, #4]
   157b2:	e7ec      	b.n	1578e <d_growable_string_callback_adapter+0x1a>
   157b4:	68d2      	ldr	r2, [r2, #12]
   157b6:	2a00      	cmp	r2, #0
   157b8:	d1e9      	bne.n	1578e <d_growable_string_callback_adapter+0x1a>
   157ba:	b916      	cbnz	r6, 157c2 <d_growable_string_callback_adapter+0x4e>
   157bc:	2602      	movs	r6, #2
   157be:	2b02      	cmp	r3, #2
   157c0:	d902      	bls.n	157c8 <d_growable_string_callback_adapter+0x54>
   157c2:	0076      	lsls	r6, r6, #1
   157c4:	42b3      	cmp	r3, r6
   157c6:	d8fc      	bhi.n	157c2 <d_growable_string_callback_adapter+0x4e>
   157c8:	6820      	ldr	r0, [r4, #0]
   157ca:	4631      	mov	r1, r6
   157cc:	f00b f8ec 	bl	209a8 <realloc>
   157d0:	4603      	mov	r3, r0
   157d2:	b110      	cbz	r0, 157da <d_growable_string_callback_adapter+0x66>
   157d4:	6020      	str	r0, [r4, #0]
   157d6:	60a6      	str	r6, [r4, #8]
   157d8:	e7d7      	b.n	1578a <d_growable_string_callback_adapter+0x16>
   157da:	6820      	ldr	r0, [r4, #0]
   157dc:	9301      	str	r3, [sp, #4]
   157de:	f00a fbed 	bl	1ffbc <free>
   157e2:	9b01      	ldr	r3, [sp, #4]
   157e4:	2101      	movs	r1, #1
   157e6:	60e1      	str	r1, [r4, #12]
   157e8:	6023      	str	r3, [r4, #0]
   157ea:	6063      	str	r3, [r4, #4]
   157ec:	60a3      	str	r3, [r4, #8]
   157ee:	e7ce      	b.n	1578e <d_growable_string_callback_adapter+0x1a>

000157f0 <d_type>:
   157f0:	68c2      	ldr	r2, [r0, #12]
   157f2:	b5f0      	push	{r4, r5, r6, r7, lr}
   157f4:	4604      	mov	r4, r0
   157f6:	7813      	ldrb	r3, [r2, #0]
   157f8:	b083      	sub	sp, #12
   157fa:	f1a3 0572 	sub.w	r5, r3, #114	; 0x72
   157fe:	4268      	negs	r0, r5
   15800:	eb40 0105 	adc.w	r1, r0, r5
   15804:	2b56      	cmp	r3, #86	; 0x56
   15806:	bf08      	it	eq
   15808:	f041 0101 	orreq.w	r1, r1, #1
   1580c:	2900      	cmp	r1, #0
   1580e:	d154      	bne.n	158ba <d_type+0xca>
   15810:	2b4b      	cmp	r3, #75	; 0x4b
   15812:	d052      	beq.n	158ba <d_type+0xca>
   15814:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
   15818:	f1bc 0f4a 	cmp.w	ip, #74	; 0x4a
   1581c:	f200 808b 	bhi.w	15936 <d_type+0x146>
   15820:	e8df f01c 	tbh	[pc, ip, lsl #1]
   15824:	01160116 	.word	0x01160116
   15828:	01160116 	.word	0x01160116
   1582c:	01160116 	.word	0x01160116
   15830:	01160116 	.word	0x01160116
   15834:	01160116 	.word	0x01160116
   15838:	00890089 	.word	0x00890089
   1583c:	00890089 	.word	0x00890089
   15840:	00890089 	.word	0x00890089
   15844:	01b20089 	.word	0x01b20089
   15848:	01080089 	.word	0x01080089
   1584c:	00890099 	.word	0x00890099
   15850:	008b020a 	.word	0x008b020a
   15854:	00890089 	.word	0x00890089
   15858:	00890089 	.word	0x00890089
   1585c:	01de0089 	.word	0x01de0089
   15860:	00600116 	.word	0x00600116
   15864:	0089016e 	.word	0x0089016e
   15868:	013c0160 	.word	0x013c0160
   1586c:	0192011c 	.word	0x0192011c
   15870:	00890089 	.word	0x00890089
   15874:	00890089 	.word	0x00890089
   15878:	00890116 	.word	0x00890116
   1587c:	00890089 	.word	0x00890089
   15880:	00890089 	.word	0x00890089
   15884:	017c0089 	.word	0x017c0089
   15888:	017c017c 	.word	0x017c017c
   1588c:	017c017c 	.word	0x017c017c
   15890:	017c017c 	.word	0x017c017c
   15894:	017c017c 	.word	0x017c017c
   15898:	0089017c 	.word	0x0089017c
   1589c:	017c017c 	.word	0x017c017c
   158a0:	017c017c 	.word	0x017c017c
   158a4:	00890089 	.word	0x00890089
   158a8:	017c0089 	.word	0x017c0089
   158ac:	01a4017c 	.word	0x01a4017c
   158b0:	017c017c 	.word	0x017c017c
   158b4:	017c017c 	.word	0x017c017c
   158b8:	017c      	.short	0x017c
   158ba:	4620      	mov	r0, r4
   158bc:	4669      	mov	r1, sp
   158be:	2200      	movs	r2, #0
   158c0:	f7ff fcea 	bl	15298 <d_cv_qualifiers>
   158c4:	4605      	mov	r5, r0
   158c6:	b150      	cbz	r0, 158de <d_type+0xee>
   158c8:	4620      	mov	r0, r4
   158ca:	f7ff ff91 	bl	157f0 <d_type>
   158ce:	6028      	str	r0, [r5, #0]
   158d0:	b1d8      	cbz	r0, 1590a <d_type+0x11a>
   158d2:	4620      	mov	r0, r4
   158d4:	9900      	ldr	r1, [sp, #0]
   158d6:	f7ff ff39 	bl	1574c <d_add_substitution>
   158da:	b1b0      	cbz	r0, 1590a <d_type+0x11a>
   158dc:	9d00      	ldr	r5, [sp, #0]
   158de:	4628      	mov	r0, r5
   158e0:	b003      	add	sp, #12
   158e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   158e4:	1c55      	adds	r5, r2, #1
   158e6:	4620      	mov	r0, r4
   158e8:	60e5      	str	r5, [r4, #12]
   158ea:	f7ff ff81 	bl	157f0 <d_type>
   158ee:	2120      	movs	r1, #32
   158f0:	2300      	movs	r3, #0
   158f2:	4602      	mov	r2, r0
   158f4:	4620      	mov	r0, r4
   158f6:	f7ff fc2d 	bl	15154 <d_make_comp>
   158fa:	4605      	mov	r5, r0
   158fc:	9000      	str	r0, [sp, #0]
   158fe:	4620      	mov	r0, r4
   15900:	4629      	mov	r1, r5
   15902:	f7ff ff23 	bl	1574c <d_add_substitution>
   15906:	2800      	cmp	r0, #0
   15908:	d1e8      	bne.n	158dc <d_type+0xec>
   1590a:	4605      	mov	r5, r0
   1590c:	e7e7      	b.n	158de <d_type+0xee>
   1590e:	4620      	mov	r0, r4
   15910:	f001 fa2a 	bl	16d68 <d_expression>
   15914:	213b      	movs	r1, #59	; 0x3b
   15916:	2300      	movs	r3, #0
   15918:	4602      	mov	r2, r0
   1591a:	4620      	mov	r0, r4
   1591c:	f7ff fc1a 	bl	15154 <d_make_comp>
   15920:	4605      	mov	r5, r0
   15922:	9000      	str	r0, [sp, #0]
   15924:	2800      	cmp	r0, #0
   15926:	d0da      	beq.n	158de <d_type+0xee>
   15928:	68e2      	ldr	r2, [r4, #12]
   1592a:	7813      	ldrb	r3, [r2, #0]
   1592c:	b11b      	cbz	r3, 15936 <d_type+0x146>
   1592e:	3201      	adds	r2, #1
   15930:	2b45      	cmp	r3, #69	; 0x45
   15932:	60e2      	str	r2, [r4, #12]
   15934:	d0d3      	beq.n	158de <d_type+0xee>
   15936:	2500      	movs	r5, #0
   15938:	e7d1      	b.n	158de <d_type+0xee>
   1593a:	1c55      	adds	r5, r2, #1
   1593c:	4620      	mov	r0, r4
   1593e:	60e5      	str	r5, [r4, #12]
   15940:	f7ff ff56 	bl	157f0 <d_type>
   15944:	2122      	movs	r1, #34	; 0x22
   15946:	2300      	movs	r3, #0
   15948:	4602      	mov	r2, r0
   1594a:	4620      	mov	r0, r4
   1594c:	f7ff fc02 	bl	15154 <d_make_comp>
   15950:	4605      	mov	r5, r0
   15952:	9000      	str	r0, [sp, #0]
   15954:	e7d3      	b.n	158fe <d_type+0x10e>
   15956:	1c50      	adds	r0, r2, #1
   15958:	60e0      	str	r0, [r4, #12]
   1595a:	7855      	ldrb	r5, [r2, #1]
   1595c:	2d00      	cmp	r5, #0
   1595e:	d0be      	beq.n	158de <d_type+0xee>
   15960:	3d46      	subs	r5, #70	; 0x46
   15962:	1c91      	adds	r1, r2, #2
   15964:	60e1      	str	r1, [r4, #12]
   15966:	2d30      	cmp	r5, #48	; 0x30
   15968:	d8e5      	bhi.n	15936 <d_type+0x146>
   1596a:	a301      	add	r3, pc, #4	; (adr r3, 15970 <d_type+0x180>)
   1596c:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   15970:	00015dbd 	.word	0x00015dbd
   15974:	00015937 	.word	0x00015937
   15978:	00015937 	.word	0x00015937
   1597c:	00015937 	.word	0x00015937
   15980:	00015937 	.word	0x00015937
   15984:	00015937 	.word	0x00015937
   15988:	00015937 	.word	0x00015937
   1598c:	00015937 	.word	0x00015937
   15990:	00015937 	.word	0x00015937
   15994:	00015937 	.word	0x00015937
   15998:	00015937 	.word	0x00015937
   1599c:	00015937 	.word	0x00015937
   159a0:	00015937 	.word	0x00015937
   159a4:	00015937 	.word	0x00015937
   159a8:	0001590f 	.word	0x0001590f
   159ac:	00015937 	.word	0x00015937
   159b0:	00015937 	.word	0x00015937
   159b4:	00015937 	.word	0x00015937
   159b8:	00015937 	.word	0x00015937
   159bc:	00015937 	.word	0x00015937
   159c0:	00015937 	.word	0x00015937
   159c4:	00015937 	.word	0x00015937
   159c8:	00015937 	.word	0x00015937
   159cc:	00015937 	.word	0x00015937
   159d0:	00015937 	.word	0x00015937
   159d4:	00015937 	.word	0x00015937
   159d8:	00015937 	.word	0x00015937
   159dc:	00015937 	.word	0x00015937
   159e0:	00015937 	.word	0x00015937
   159e4:	00015937 	.word	0x00015937
   159e8:	00015d7d 	.word	0x00015d7d
   159ec:	00015d55 	.word	0x00015d55
   159f0:	00015e47 	.word	0x00015e47
   159f4:	00015937 	.word	0x00015937
   159f8:	00015e23 	.word	0x00015e23
   159fc:	00015d17 	.word	0x00015d17
   15a00:	00015937 	.word	0x00015937
   15a04:	00015937 	.word	0x00015937
   15a08:	00015937 	.word	0x00015937
   15a0c:	00015937 	.word	0x00015937
   15a10:	00015cef 	.word	0x00015cef
   15a14:	00015937 	.word	0x00015937
   15a18:	00015d3f 	.word	0x00015d3f
   15a1c:	00015937 	.word	0x00015937
   15a20:	00015937 	.word	0x00015937
   15a24:	00015cbf 	.word	0x00015cbf
   15a28:	0001590f 	.word	0x0001590f
   15a2c:	00015937 	.word	0x00015937
   15a30:	00015c67 	.word	0x00015c67
   15a34:	3201      	adds	r2, #1
   15a36:	4620      	mov	r0, r4
   15a38:	60e2      	str	r2, [r4, #12]
   15a3a:	f7ff fed9 	bl	157f0 <d_type>
   15a3e:	2121      	movs	r1, #33	; 0x21
   15a40:	2300      	movs	r3, #0
   15a42:	4602      	mov	r2, r0
   15a44:	4620      	mov	r0, r4
   15a46:	f7ff fb85 	bl	15154 <d_make_comp>
   15a4a:	4605      	mov	r5, r0
   15a4c:	9000      	str	r0, [sp, #0]
   15a4e:	e756      	b.n	158fe <d_type+0x10e>
   15a50:	4620      	mov	r0, r4
   15a52:	f000 fc95 	bl	16380 <d_name>
   15a56:	4605      	mov	r5, r0
   15a58:	9000      	str	r0, [sp, #0]
   15a5a:	e750      	b.n	158fe <d_type+0x10e>
   15a5c:	4620      	mov	r0, r4
   15a5e:	f7ff fc7f 	bl	15360 <d_template_param>
   15a62:	68e3      	ldr	r3, [r4, #12]
   15a64:	9000      	str	r0, [sp, #0]
   15a66:	4605      	mov	r5, r0
   15a68:	f893 c000 	ldrb.w	ip, [r3]
   15a6c:	f1bc 0f49 	cmp.w	ip, #73	; 0x49
   15a70:	f47f af45 	bne.w	158fe <d_type+0x10e>
   15a74:	4629      	mov	r1, r5
   15a76:	4620      	mov	r0, r4
   15a78:	f7ff fe68 	bl	1574c <d_add_substitution>
   15a7c:	9d00      	ldr	r5, [sp, #0]
   15a7e:	2800      	cmp	r0, #0
   15a80:	f43f af43 	beq.w	1590a <d_type+0x11a>
   15a84:	4620      	mov	r0, r4
   15a86:	f000 fc25 	bl	162d4 <d_template_args>
   15a8a:	462a      	mov	r2, r5
   15a8c:	2104      	movs	r1, #4
   15a8e:	4603      	mov	r3, r0
   15a90:	4620      	mov	r0, r4
   15a92:	f7ff fb5f 	bl	15154 <d_make_comp>
   15a96:	4605      	mov	r5, r0
   15a98:	9000      	str	r0, [sp, #0]
   15a9a:	e730      	b.n	158fe <d_type+0x10e>
   15a9c:	7853      	ldrb	r3, [r2, #1]
   15a9e:	f1a3 055f 	sub.w	r5, r3, #95	; 0x5f
   15aa2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   15aa6:	4268      	negs	r0, r5
   15aa8:	eb40 0105 	adc.w	r1, r0, r5
   15aac:	fa5f fe82 	uxtb.w	lr, r2
   15ab0:	f1be 0f09 	cmp.w	lr, #9
   15ab4:	bf8c      	ite	hi
   15ab6:	460d      	movhi	r5, r1
   15ab8:	f041 0501 	orrls.w	r5, r1, #1
   15abc:	4620      	mov	r0, r4
   15abe:	b935      	cbnz	r5, 15ace <d_type+0x2de>
   15ac0:	3b41      	subs	r3, #65	; 0x41
   15ac2:	fa5f fc83 	uxtb.w	ip, r3
   15ac6:	f1bc 0f19 	cmp.w	ip, #25
   15aca:	f200 81e2 	bhi.w	15e92 <d_type+0x6a2>
   15ace:	2100      	movs	r1, #0
   15ad0:	f7ff fc6a 	bl	153a8 <d_substitution>
   15ad4:	68e1      	ldr	r1, [r4, #12]
   15ad6:	9000      	str	r0, [sp, #0]
   15ad8:	4605      	mov	r5, r0
   15ada:	780b      	ldrb	r3, [r1, #0]
   15adc:	2b49      	cmp	r3, #73	; 0x49
   15ade:	f47f aefe 	bne.w	158de <d_type+0xee>
   15ae2:	e7cf      	b.n	15a84 <d_type+0x294>
   15ae4:	1c51      	adds	r1, r2, #1
   15ae6:	4620      	mov	r0, r4
   15ae8:	60e1      	str	r1, [r4, #12]
   15aea:	f7ff fe81 	bl	157f0 <d_type>
   15aee:	211f      	movs	r1, #31
   15af0:	2300      	movs	r3, #0
   15af2:	4602      	mov	r2, r0
   15af4:	4620      	mov	r0, r4
   15af6:	f7ff fb2d 	bl	15154 <d_make_comp>
   15afa:	4605      	mov	r5, r0
   15afc:	9000      	str	r0, [sp, #0]
   15afe:	e6fe      	b.n	158fe <d_type+0x10e>
   15b00:	1c53      	adds	r3, r2, #1
   15b02:	4620      	mov	r0, r4
   15b04:	60e3      	str	r3, [r4, #12]
   15b06:	f7ff fe73 	bl	157f0 <d_type>
   15b0a:	211e      	movs	r1, #30
   15b0c:	2300      	movs	r3, #0
   15b0e:	4602      	mov	r2, r0
   15b10:	4620      	mov	r0, r4
   15b12:	f7ff fb1f 	bl	15154 <d_make_comp>
   15b16:	4605      	mov	r5, r0
   15b18:	9000      	str	r0, [sp, #0]
   15b1a:	e6f0      	b.n	158fe <d_type+0x10e>
   15b1c:	49a1      	ldr	r1, [pc, #644]	; (15da4 <d_type+0x5b4>)
   15b1e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   15b22:	eb11 0383 	adds.w	r3, r1, r3, lsl #2
   15b26:	f000 81c9 	beq.w	15ebc <d_type+0x6cc>
   15b2a:	6961      	ldr	r1, [r4, #20]
   15b2c:	69a0      	ldr	r0, [r4, #24]
   15b2e:	4281      	cmp	r1, r0
   15b30:	f2c0 819b 	blt.w	15e6a <d_type+0x67a>
   15b34:	2300      	movs	r3, #0
   15b36:	461d      	mov	r5, r3
   15b38:	685b      	ldr	r3, [r3, #4]
   15b3a:	6858      	ldr	r0, [r3, #4]
   15b3c:	1c51      	adds	r1, r2, #1
   15b3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15b40:	60e1      	str	r1, [r4, #12]
   15b42:	181a      	adds	r2, r3, r0
   15b44:	6322      	str	r2, [r4, #48]	; 0x30
   15b46:	e6ca      	b.n	158de <d_type+0xee>
   15b48:	1c53      	adds	r3, r2, #1
   15b4a:	4620      	mov	r0, r4
   15b4c:	60e3      	str	r3, [r4, #12]
   15b4e:	f7ff fd89 	bl	15664 <d_source_name>
   15b52:	9000      	str	r0, [sp, #0]
   15b54:	4620      	mov	r0, r4
   15b56:	f7ff fe4b 	bl	157f0 <d_type>
   15b5a:	211d      	movs	r1, #29
   15b5c:	9b00      	ldr	r3, [sp, #0]
   15b5e:	4602      	mov	r2, r0
   15b60:	4620      	mov	r0, r4
   15b62:	f7ff faf7 	bl	15154 <d_make_comp>
   15b66:	4605      	mov	r5, r0
   15b68:	9000      	str	r0, [sp, #0]
   15b6a:	e6c8      	b.n	158fe <d_type+0x10e>
   15b6c:	1c55      	adds	r5, r2, #1
   15b6e:	4620      	mov	r0, r4
   15b70:	60e5      	str	r5, [r4, #12]
   15b72:	f7ff fd77 	bl	15664 <d_source_name>
   15b76:	2124      	movs	r1, #36	; 0x24
   15b78:	2300      	movs	r3, #0
   15b7a:	4602      	mov	r2, r0
   15b7c:	4620      	mov	r0, r4
   15b7e:	f7ff fae9 	bl	15154 <d_make_comp>
   15b82:	4605      	mov	r5, r0
   15b84:	9000      	str	r0, [sp, #0]
   15b86:	e6ba      	b.n	158fe <d_type+0x10e>
   15b88:	1c51      	adds	r1, r2, #1
   15b8a:	60e1      	str	r1, [r4, #12]
   15b8c:	7853      	ldrb	r3, [r2, #1]
   15b8e:	2b5f      	cmp	r3, #95	; 0x5f
   15b90:	f000 8197 	beq.w	15ec2 <d_type+0x6d2>
   15b94:	3b30      	subs	r3, #48	; 0x30
   15b96:	b2dd      	uxtb	r5, r3
   15b98:	2d09      	cmp	r5, #9
   15b9a:	f200 8186 	bhi.w	15eaa <d_type+0x6ba>
   15b9e:	4608      	mov	r0, r1
   15ba0:	1c42      	adds	r2, r0, #1
   15ba2:	60e2      	str	r2, [r4, #12]
   15ba4:	7845      	ldrb	r5, [r0, #1]
   15ba6:	4610      	mov	r0, r2
   15ba8:	3d30      	subs	r5, #48	; 0x30
   15baa:	b2eb      	uxtb	r3, r5
   15bac:	2b09      	cmp	r3, #9
   15bae:	d9f7      	bls.n	15ba0 <d_type+0x3b0>
   15bb0:	4620      	mov	r0, r4
   15bb2:	1a52      	subs	r2, r2, r1
   15bb4:	f7ff fb20 	bl	151f8 <d_make_name>
   15bb8:	4605      	mov	r5, r0
   15bba:	b178      	cbz	r0, 15bdc <d_type+0x3ec>
   15bbc:	68e1      	ldr	r1, [r4, #12]
   15bbe:	780a      	ldrb	r2, [r1, #0]
   15bc0:	2a5f      	cmp	r2, #95	; 0x5f
   15bc2:	d149      	bne.n	15c58 <d_type+0x468>
   15bc4:	3101      	adds	r1, #1
   15bc6:	4620      	mov	r0, r4
   15bc8:	60e1      	str	r1, [r4, #12]
   15bca:	f7ff fe11 	bl	157f0 <d_type>
   15bce:	462a      	mov	r2, r5
   15bd0:	2126      	movs	r1, #38	; 0x26
   15bd2:	4603      	mov	r3, r0
   15bd4:	4620      	mov	r0, r4
   15bd6:	f7ff fabd 	bl	15154 <d_make_comp>
   15bda:	4605      	mov	r5, r0
   15bdc:	9500      	str	r5, [sp, #0]
   15bde:	e68e      	b.n	158fe <d_type+0x10e>
   15be0:	1c56      	adds	r6, r2, #1
   15be2:	4620      	mov	r0, r4
   15be4:	60e6      	str	r6, [r4, #12]
   15be6:	ad01      	add	r5, sp, #4
   15be8:	f7ff fe02 	bl	157f0 <d_type>
   15bec:	4629      	mov	r1, r5
   15bee:	2201      	movs	r2, #1
   15bf0:	4606      	mov	r6, r0
   15bf2:	4620      	mov	r0, r4
   15bf4:	f7ff fb50 	bl	15298 <d_cv_qualifiers>
   15bf8:	4607      	mov	r7, r0
   15bfa:	2800      	cmp	r0, #0
   15bfc:	f000 8163 	beq.w	15ec6 <d_type+0x6d6>
   15c00:	4620      	mov	r0, r4
   15c02:	f7ff fdf5 	bl	157f0 <d_type>
   15c06:	6038      	str	r0, [r7, #0]
   15c08:	2800      	cmp	r0, #0
   15c0a:	f000 815c 	beq.w	15ec6 <d_type+0x6d6>
   15c0e:	42af      	cmp	r7, r5
   15c10:	d009      	beq.n	15c26 <d_type+0x436>
   15c12:	7800      	ldrb	r0, [r0, #0]
   15c14:	2825      	cmp	r0, #37	; 0x25
   15c16:	d006      	beq.n	15c26 <d_type+0x436>
   15c18:	4620      	mov	r0, r4
   15c1a:	9901      	ldr	r1, [sp, #4]
   15c1c:	f7ff fd96 	bl	1574c <d_add_substitution>
   15c20:	2800      	cmp	r0, #0
   15c22:	f000 8150 	beq.w	15ec6 <d_type+0x6d6>
   15c26:	4620      	mov	r0, r4
   15c28:	2127      	movs	r1, #39	; 0x27
   15c2a:	4632      	mov	r2, r6
   15c2c:	9b01      	ldr	r3, [sp, #4]
   15c2e:	f7ff fa91 	bl	15154 <d_make_comp>
   15c32:	4605      	mov	r5, r0
   15c34:	9500      	str	r5, [sp, #0]
   15c36:	e662      	b.n	158fe <d_type+0x10e>
   15c38:	1c53      	adds	r3, r2, #1
   15c3a:	60e3      	str	r3, [r4, #12]
   15c3c:	7850      	ldrb	r0, [r2, #1]
   15c3e:	2859      	cmp	r0, #89	; 0x59
   15c40:	d101      	bne.n	15c46 <d_type+0x456>
   15c42:	3202      	adds	r2, #2
   15c44:	60e2      	str	r2, [r4, #12]
   15c46:	2101      	movs	r1, #1
   15c48:	4620      	mov	r0, r4
   15c4a:	f000 f9a3 	bl	15f94 <d_bare_function_type>
   15c4e:	68e3      	ldr	r3, [r4, #12]
   15c50:	7819      	ldrb	r1, [r3, #0]
   15c52:	2945      	cmp	r1, #69	; 0x45
   15c54:	4605      	mov	r5, r0
   15c56:	d002      	beq.n	15c5e <d_type+0x46e>
   15c58:	2500      	movs	r5, #0
   15c5a:	9500      	str	r5, [sp, #0]
   15c5c:	e64f      	b.n	158fe <d_type+0x10e>
   15c5e:	1c58      	adds	r0, r3, #1
   15c60:	9500      	str	r5, [sp, #0]
   15c62:	60e0      	str	r0, [r4, #12]
   15c64:	e64b      	b.n	158fe <d_type+0x10e>
   15c66:	7890      	ldrb	r0, [r2, #2]
   15c68:	285f      	cmp	r0, #95	; 0x5f
   15c6a:	f000 8134 	beq.w	15ed6 <d_type+0x6e6>
   15c6e:	6961      	ldr	r1, [r4, #20]
   15c70:	69a5      	ldr	r5, [r4, #24]
   15c72:	42a9      	cmp	r1, r5
   15c74:	f6bf ae5f 	bge.w	15936 <d_type+0x146>
   15c78:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   15c7c:	6922      	ldr	r2, [r4, #16]
   15c7e:	1c48      	adds	r0, r1, #1
   15c80:	6160      	str	r0, [r4, #20]
   15c82:	009b      	lsls	r3, r3, #2
   15c84:	18d5      	adds	r5, r2, r3
   15c86:	f43f ae2a 	beq.w	158de <d_type+0xee>
   15c8a:	213a      	movs	r1, #58	; 0x3a
   15c8c:	4620      	mov	r0, r4
   15c8e:	54d1      	strb	r1, [r2, r3]
   15c90:	f7ff fad8 	bl	15244 <d_number>
   15c94:	6068      	str	r0, [r5, #4]
   15c96:	68e3      	ldr	r3, [r4, #12]
   15c98:	f893 e000 	ldrb.w	lr, [r3]
   15c9c:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
   15ca0:	f47f ae49 	bne.w	15936 <d_type+0x146>
   15ca4:	1c5a      	adds	r2, r3, #1
   15ca6:	4620      	mov	r0, r4
   15ca8:	60e2      	str	r2, [r4, #12]
   15caa:	f7ff fda1 	bl	157f0 <d_type>
   15cae:	462a      	mov	r2, r5
   15cb0:	2129      	movs	r1, #41	; 0x29
   15cb2:	4603      	mov	r3, r0
   15cb4:	4620      	mov	r0, r4
   15cb6:	f7ff fa4d 	bl	15154 <d_make_comp>
   15cba:	4605      	mov	r5, r0
   15cbc:	e60f      	b.n	158de <d_type+0xee>
   15cbe:	6963      	ldr	r3, [r4, #20]
   15cc0:	69a1      	ldr	r1, [r4, #24]
   15cc2:	428b      	cmp	r3, r1
   15cc4:	f280 80e1 	bge.w	15e8a <d_type+0x69a>
   15cc8:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   15ccc:	6921      	ldr	r1, [r4, #16]
   15cce:	3301      	adds	r3, #1
   15cd0:	6163      	str	r3, [r4, #20]
   15cd2:	00ab      	lsls	r3, r5, #2
   15cd4:	18cd      	adds	r5, r1, r3
   15cd6:	f000 8108 	beq.w	15eea <d_type+0x6fa>
   15cda:	4a33      	ldr	r2, [pc, #204]	; (15da8 <d_type+0x5b8>)
   15cdc:	2023      	movs	r0, #35	; 0x23
   15cde:	54c8      	strb	r0, [r1, r3]
   15ce0:	4613      	mov	r3, r2
   15ce2:	606a      	str	r2, [r5, #4]
   15ce4:	6b22      	ldr	r2, [r4, #48]	; 0x30
   15ce6:	685b      	ldr	r3, [r3, #4]
   15ce8:	18d1      	adds	r1, r2, r3
   15cea:	6321      	str	r1, [r4, #48]	; 0x30
   15cec:	e5f7      	b.n	158de <d_type+0xee>
   15cee:	6963      	ldr	r3, [r4, #20]
   15cf0:	69a5      	ldr	r5, [r4, #24]
   15cf2:	42ab      	cmp	r3, r5
   15cf4:	f280 80c9 	bge.w	15e8a <d_type+0x69a>
   15cf8:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   15cfc:	6921      	ldr	r1, [r4, #16]
   15cfe:	1c5a      	adds	r2, r3, #1
   15d00:	6162      	str	r2, [r4, #20]
   15d02:	0083      	lsls	r3, r0, #2
   15d04:	18cd      	adds	r5, r1, r3
   15d06:	f000 80f0 	beq.w	15eea <d_type+0x6fa>
   15d0a:	4a28      	ldr	r2, [pc, #160]	; (15dac <d_type+0x5bc>)
   15d0c:	2023      	movs	r0, #35	; 0x23
   15d0e:	54c8      	strb	r0, [r1, r3]
   15d10:	4613      	mov	r3, r2
   15d12:	606a      	str	r2, [r5, #4]
   15d14:	e7e6      	b.n	15ce4 <d_type+0x4f4>
   15d16:	6963      	ldr	r3, [r4, #20]
   15d18:	69a1      	ldr	r1, [r4, #24]
   15d1a:	428b      	cmp	r3, r1
   15d1c:	f280 80b5 	bge.w	15e8a <d_type+0x69a>
   15d20:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   15d24:	6921      	ldr	r1, [r4, #16]
   15d26:	3301      	adds	r3, #1
   15d28:	6163      	str	r3, [r4, #20]
   15d2a:	00ab      	lsls	r3, r5, #2
   15d2c:	18cd      	adds	r5, r1, r3
   15d2e:	f000 80dc 	beq.w	15eea <d_type+0x6fa>
   15d32:	4a1f      	ldr	r2, [pc, #124]	; (15db0 <d_type+0x5c0>)
   15d34:	2023      	movs	r0, #35	; 0x23
   15d36:	54c8      	strb	r0, [r1, r3]
   15d38:	4613      	mov	r3, r2
   15d3a:	606a      	str	r2, [r5, #4]
   15d3c:	e7d2      	b.n	15ce4 <d_type+0x4f4>
   15d3e:	4620      	mov	r0, r4
   15d40:	f7ff fd56 	bl	157f0 <d_type>
   15d44:	2141      	movs	r1, #65	; 0x41
   15d46:	2300      	movs	r3, #0
   15d48:	4602      	mov	r2, r0
   15d4a:	4620      	mov	r0, r4
   15d4c:	f7ff fa02 	bl	15154 <d_make_comp>
   15d50:	4605      	mov	r5, r0
   15d52:	e5c4      	b.n	158de <d_type+0xee>
   15d54:	6963      	ldr	r3, [r4, #20]
   15d56:	69a1      	ldr	r1, [r4, #24]
   15d58:	428b      	cmp	r3, r1
   15d5a:	f280 8096 	bge.w	15e8a <d_type+0x69a>
   15d5e:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   15d62:	6921      	ldr	r1, [r4, #16]
   15d64:	3301      	adds	r3, #1
   15d66:	6163      	str	r3, [r4, #20]
   15d68:	00ab      	lsls	r3, r5, #2
   15d6a:	18cd      	adds	r5, r1, r3
   15d6c:	f000 80bd 	beq.w	15eea <d_type+0x6fa>
   15d70:	4a10      	ldr	r2, [pc, #64]	; (15db4 <d_type+0x5c4>)
   15d72:	2023      	movs	r0, #35	; 0x23
   15d74:	54c8      	strb	r0, [r1, r3]
   15d76:	4613      	mov	r3, r2
   15d78:	606a      	str	r2, [r5, #4]
   15d7a:	e7b3      	b.n	15ce4 <d_type+0x4f4>
   15d7c:	6963      	ldr	r3, [r4, #20]
   15d7e:	69a1      	ldr	r1, [r4, #24]
   15d80:	428b      	cmp	r3, r1
   15d82:	f280 8082 	bge.w	15e8a <d_type+0x69a>
   15d86:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   15d8a:	6921      	ldr	r1, [r4, #16]
   15d8c:	3301      	adds	r3, #1
   15d8e:	6163      	str	r3, [r4, #20]
   15d90:	00ab      	lsls	r3, r5, #2
   15d92:	18cd      	adds	r5, r1, r3
   15d94:	f000 80a9 	beq.w	15eea <d_type+0x6fa>
   15d98:	4a07      	ldr	r2, [pc, #28]	; (15db8 <d_type+0x5c8>)
   15d9a:	2023      	movs	r0, #35	; 0x23
   15d9c:	54c8      	strb	r0, [r1, r3]
   15d9e:	4613      	mov	r3, r2
   15da0:	606a      	str	r2, [r5, #4]
   15da2:	e79f      	b.n	15ce4 <d_type+0x4f4>
   15da4:	0002bacc 	.word	0x0002bacc
   15da8:	0002c4b8 	.word	0x0002c4b8
   15dac:	0002c4e0 	.word	0x0002c4e0
   15db0:	0002c4cc 	.word	0x0002c4cc
   15db4:	0002c490 	.word	0x0002c490
   15db8:	0002c47c 	.word	0x0002c47c
   15dbc:	6963      	ldr	r3, [r4, #20]
   15dbe:	2500      	movs	r5, #0
   15dc0:	69a1      	ldr	r1, [r4, #24]
   15dc2:	428b      	cmp	r3, r1
   15dc4:	da06      	bge.n	15dd4 <d_type+0x5e4>
   15dc6:	eb03 0e43 	add.w	lr, r3, r3, lsl #1
   15dca:	6925      	ldr	r5, [r4, #16]
   15dcc:	3301      	adds	r3, #1
   15dce:	6163      	str	r3, [r4, #20]
   15dd0:	eb05 058e 	add.w	r5, r5, lr, lsl #2
   15dd4:	9500      	str	r5, [sp, #0]
   15dd6:	2128      	movs	r1, #40	; 0x28
   15dd8:	7029      	strb	r1, [r5, #0]
   15dda:	7890      	ldrb	r0, [r2, #2]
   15ddc:	3830      	subs	r0, #48	; 0x30
   15dde:	b2c2      	uxtb	r2, r0
   15de0:	2a09      	cmp	r2, #9
   15de2:	bf8c      	ite	hi
   15de4:	2200      	movhi	r2, #0
   15de6:	2201      	movls	r2, #1
   15de8:	812a      	strh	r2, [r5, #8]
   15dea:	2a00      	cmp	r2, #0
   15dec:	d16e      	bne.n	15ecc <d_type+0x6dc>
   15dee:	4620      	mov	r0, r4
   15df0:	f7ff fcfe 	bl	157f0 <d_type>
   15df4:	6068      	str	r0, [r5, #4]
   15df6:	9d00      	ldr	r5, [sp, #0]
   15df8:	686d      	ldr	r5, [r5, #4]
   15dfa:	2d00      	cmp	r5, #0
   15dfc:	f43f ad6f 	beq.w	158de <d_type+0xee>
   15e00:	4620      	mov	r0, r4
   15e02:	f7ff fa1f 	bl	15244 <d_number>
   15e06:	68e2      	ldr	r2, [r4, #12]
   15e08:	7813      	ldrb	r3, [r2, #0]
   15e0a:	b13b      	cbz	r3, 15e1c <d_type+0x62c>
   15e0c:	f1a3 0373 	sub.w	r3, r3, #115	; 0x73
   15e10:	3201      	adds	r2, #1
   15e12:	f1d3 0c00 	rsbs	ip, r3, #0
   15e16:	60e2      	str	r2, [r4, #12]
   15e18:	eb4c 0303 	adc.w	r3, ip, r3
   15e1c:	9d00      	ldr	r5, [sp, #0]
   15e1e:	816b      	strh	r3, [r5, #10]
   15e20:	e55d      	b.n	158de <d_type+0xee>
   15e22:	6963      	ldr	r3, [r4, #20]
   15e24:	69a1      	ldr	r1, [r4, #24]
   15e26:	428b      	cmp	r3, r1
   15e28:	da2f      	bge.n	15e8a <d_type+0x69a>
   15e2a:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   15e2e:	6921      	ldr	r1, [r4, #16]
   15e30:	3301      	adds	r3, #1
   15e32:	6163      	str	r3, [r4, #20]
   15e34:	00ab      	lsls	r3, r5, #2
   15e36:	18cd      	adds	r5, r1, r3
   15e38:	d057      	beq.n	15eea <d_type+0x6fa>
   15e3a:	4a2d      	ldr	r2, [pc, #180]	; (15ef0 <d_type+0x700>)
   15e3c:	2023      	movs	r0, #35	; 0x23
   15e3e:	54c8      	strb	r0, [r1, r3]
   15e40:	4613      	mov	r3, r2
   15e42:	606a      	str	r2, [r5, #4]
   15e44:	e74e      	b.n	15ce4 <d_type+0x4f4>
   15e46:	6963      	ldr	r3, [r4, #20]
   15e48:	69a5      	ldr	r5, [r4, #24]
   15e4a:	42ab      	cmp	r3, r5
   15e4c:	da1d      	bge.n	15e8a <d_type+0x69a>
   15e4e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   15e52:	6921      	ldr	r1, [r4, #16]
   15e54:	3301      	adds	r3, #1
   15e56:	6163      	str	r3, [r4, #20]
   15e58:	0083      	lsls	r3, r0, #2
   15e5a:	18cd      	adds	r5, r1, r3
   15e5c:	d045      	beq.n	15eea <d_type+0x6fa>
   15e5e:	4a25      	ldr	r2, [pc, #148]	; (15ef4 <d_type+0x704>)
   15e60:	2023      	movs	r0, #35	; 0x23
   15e62:	54c8      	strb	r0, [r1, r3]
   15e64:	4613      	mov	r3, r2
   15e66:	606a      	str	r2, [r5, #4]
   15e68:	e73c      	b.n	15ce4 <d_type+0x4f4>
   15e6a:	eb01 0541 	add.w	r5, r1, r1, lsl #1
   15e6e:	6920      	ldr	r0, [r4, #16]
   15e70:	3101      	adds	r1, #1
   15e72:	6161      	str	r1, [r4, #20]
   15e74:	00a9      	lsls	r1, r5, #2
   15e76:	1845      	adds	r5, r0, r1
   15e78:	bf08      	it	eq
   15e7a:	686b      	ldreq	r3, [r5, #4]
   15e7c:	f43f ae5d 	beq.w	15b3a <d_type+0x34a>
   15e80:	606b      	str	r3, [r5, #4]
   15e82:	2623      	movs	r6, #35	; 0x23
   15e84:	68e2      	ldr	r2, [r4, #12]
   15e86:	5446      	strb	r6, [r0, r1]
   15e88:	e657      	b.n	15b3a <d_type+0x34a>
   15e8a:	2300      	movs	r3, #0
   15e8c:	461d      	mov	r5, r3
   15e8e:	685b      	ldr	r3, [r3, #4]
   15e90:	e728      	b.n	15ce4 <d_type+0x4f4>
   15e92:	f000 fa75 	bl	16380 <d_name>
   15e96:	4605      	mov	r5, r0
   15e98:	9000      	str	r0, [sp, #0]
   15e9a:	2800      	cmp	r0, #0
   15e9c:	f43f ad2f 	beq.w	158fe <d_type+0x10e>
   15ea0:	7802      	ldrb	r2, [r0, #0]
   15ea2:	2a16      	cmp	r2, #22
   15ea4:	f47f ad2b 	bne.w	158fe <d_type+0x10e>
   15ea8:	e519      	b.n	158de <d_type+0xee>
   15eaa:	4620      	mov	r0, r4
   15eac:	f000 ff5c 	bl	16d68 <d_expression>
   15eb0:	4605      	mov	r5, r0
   15eb2:	2800      	cmp	r0, #0
   15eb4:	f47f ae82 	bne.w	15bbc <d_type+0x3cc>
   15eb8:	9500      	str	r5, [sp, #0]
   15eba:	e520      	b.n	158fe <d_type+0x10e>
   15ebc:	685b      	ldr	r3, [r3, #4]
   15ebe:	2500      	movs	r5, #0
   15ec0:	e63b      	b.n	15b3a <d_type+0x34a>
   15ec2:	2500      	movs	r5, #0
   15ec4:	e67e      	b.n	15bc4 <d_type+0x3d4>
   15ec6:	4605      	mov	r5, r0
   15ec8:	9500      	str	r5, [sp, #0]
   15eca:	e518      	b.n	158fe <d_type+0x10e>
   15ecc:	4620      	mov	r0, r4
   15ece:	f7ff f9b9 	bl	15244 <d_number>
   15ed2:	9d00      	ldr	r5, [sp, #0]
   15ed4:	e78b      	b.n	15dee <d_type+0x5fe>
   15ed6:	1cd1      	adds	r1, r2, #3
   15ed8:	4620      	mov	r0, r4
   15eda:	60e1      	str	r1, [r4, #12]
   15edc:	f000 ff44 	bl	16d68 <d_expression>
   15ee0:	4605      	mov	r5, r0
   15ee2:	2800      	cmp	r0, #0
   15ee4:	f47f aed7 	bne.w	15c96 <d_type+0x4a6>
   15ee8:	e4f9      	b.n	158de <d_type+0xee>
   15eea:	686b      	ldr	r3, [r5, #4]
   15eec:	e6fa      	b.n	15ce4 <d_type+0x4f4>
   15eee:	bf00      	nop
   15ef0:	0002c4a4 	.word	0x0002c4a4
   15ef4:	0002c468 	.word	0x0002c468

00015ef8 <d_parmlist>:
   15ef8:	68c3      	ldr	r3, [r0, #12]
   15efa:	b570      	push	{r4, r5, r6, lr}
   15efc:	b082      	sub	sp, #8
   15efe:	2500      	movs	r5, #0
   15f00:	4604      	mov	r4, r0
   15f02:	9501      	str	r5, [sp, #4]
   15f04:	781b      	ldrb	r3, [r3, #0]
   15f06:	f1a3 0245 	sub.w	r2, r3, #69	; 0x45
   15f0a:	4250      	negs	r0, r2
   15f0c:	eb40 0002 	adc.w	r0, r0, r2
   15f10:	42ab      	cmp	r3, r5
   15f12:	bf08      	it	eq
   15f14:	f040 0001 	orreq.w	r0, r0, #1
   15f18:	bb08      	cbnz	r0, 15f5e <d_parmlist+0x66>
   15f1a:	2b2e      	cmp	r3, #46	; 0x2e
   15f1c:	bf18      	it	ne
   15f1e:	ae01      	addne	r6, sp, #4
   15f20:	d113      	bne.n	15f4a <d_parmlist+0x52>
   15f22:	e01d      	b.n	15f60 <d_parmlist+0x68>
   15f24:	f7ff f916 	bl	15154 <d_make_comp>
   15f28:	6030      	str	r0, [r6, #0]
   15f2a:	b1c8      	cbz	r0, 15f60 <d_parmlist+0x68>
   15f2c:	68e2      	ldr	r2, [r4, #12]
   15f2e:	f100 0608 	add.w	r6, r0, #8
   15f32:	7813      	ldrb	r3, [r2, #0]
   15f34:	f1d3 0101 	rsbs	r1, r3, #1
   15f38:	bf38      	it	cc
   15f3a:	2100      	movcc	r1, #0
   15f3c:	2b45      	cmp	r3, #69	; 0x45
   15f3e:	bf08      	it	eq
   15f40:	f041 0101 	orreq.w	r1, r1, #1
   15f44:	b971      	cbnz	r1, 15f64 <d_parmlist+0x6c>
   15f46:	2b2e      	cmp	r3, #46	; 0x2e
   15f48:	d00c      	beq.n	15f64 <d_parmlist+0x6c>
   15f4a:	4620      	mov	r0, r4
   15f4c:	f7ff fc50 	bl	157f0 <d_type>
   15f50:	212a      	movs	r1, #42	; 0x2a
   15f52:	2300      	movs	r3, #0
   15f54:	4605      	mov	r5, r0
   15f56:	4620      	mov	r0, r4
   15f58:	462a      	mov	r2, r5
   15f5a:	2d00      	cmp	r5, #0
   15f5c:	d1e2      	bne.n	15f24 <d_parmlist+0x2c>
   15f5e:	4628      	mov	r0, r5
   15f60:	b002      	add	sp, #8
   15f62:	bd70      	pop	{r4, r5, r6, pc}
   15f64:	9801      	ldr	r0, [sp, #4]
   15f66:	2800      	cmp	r0, #0
   15f68:	d0fa      	beq.n	15f60 <d_parmlist+0x68>
   15f6a:	6883      	ldr	r3, [r0, #8]
   15f6c:	2b00      	cmp	r3, #0
   15f6e:	d1f7      	bne.n	15f60 <d_parmlist+0x68>
   15f70:	6842      	ldr	r2, [r0, #4]
   15f72:	f892 c000 	ldrb.w	ip, [r2]
   15f76:	f1bc 0f23 	cmp.w	ip, #35	; 0x23
   15f7a:	d1f1      	bne.n	15f60 <d_parmlist+0x68>
   15f7c:	6852      	ldr	r2, [r2, #4]
   15f7e:	f892 e010 	ldrb.w	lr, [r2, #16]
   15f82:	f1be 0f09 	cmp.w	lr, #9
   15f86:	d1eb      	bne.n	15f60 <d_parmlist+0x68>
   15f88:	6b21      	ldr	r1, [r4, #48]	; 0x30
   15f8a:	6852      	ldr	r2, [r2, #4]
   15f8c:	1a89      	subs	r1, r1, r2
   15f8e:	6321      	str	r1, [r4, #48]	; 0x30
   15f90:	6043      	str	r3, [r0, #4]
   15f92:	e7e5      	b.n	15f60 <d_parmlist+0x68>

00015f94 <d_bare_function_type>:
   15f94:	68c2      	ldr	r2, [r0, #12]
   15f96:	b570      	push	{r4, r5, r6, lr}
   15f98:	4604      	mov	r4, r0
   15f9a:	7813      	ldrb	r3, [r2, #0]
   15f9c:	2b4a      	cmp	r3, #74	; 0x4a
   15f9e:	d00d      	beq.n	15fbc <d_bare_function_type+0x28>
   15fa0:	460d      	mov	r5, r1
   15fa2:	b969      	cbnz	r1, 15fc0 <d_bare_function_type+0x2c>
   15fa4:	4620      	mov	r0, r4
   15fa6:	f7ff ffa7 	bl	15ef8 <d_parmlist>
   15faa:	4603      	mov	r3, r0
   15fac:	b178      	cbz	r0, 15fce <d_bare_function_type+0x3a>
   15fae:	4620      	mov	r0, r4
   15fb0:	2125      	movs	r1, #37	; 0x25
   15fb2:	462a      	mov	r2, r5
   15fb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   15fb8:	f7ff b8cc 	b.w	15154 <d_make_comp>
   15fbc:	3201      	adds	r2, #1
   15fbe:	60c2      	str	r2, [r0, #12]
   15fc0:	4620      	mov	r0, r4
   15fc2:	f7ff fc15 	bl	157f0 <d_type>
   15fc6:	4605      	mov	r5, r0
   15fc8:	2800      	cmp	r0, #0
   15fca:	d1eb      	bne.n	15fa4 <d_bare_function_type+0x10>
   15fcc:	bd70      	pop	{r4, r5, r6, pc}
   15fce:	bd70      	pop	{r4, r5, r6, pc}

00015fd0 <d_operator_name>:
   15fd0:	68c3      	ldr	r3, [r0, #12]
   15fd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15fd6:	4604      	mov	r4, r0
   15fd8:	781e      	ldrb	r6, [r3, #0]
   15fda:	46b4      	mov	ip, r6
   15fdc:	b17e      	cbz	r6, 15ffe <d_operator_name+0x2e>
   15fde:	1c5a      	adds	r2, r3, #1
   15fe0:	60c2      	str	r2, [r0, #12]
   15fe2:	f893 c001 	ldrb.w	ip, [r3, #1]
   15fe6:	f1bc 0f00 	cmp.w	ip, #0
   15fea:	d001      	beq.n	15ff0 <d_operator_name+0x20>
   15fec:	3302      	adds	r3, #2
   15fee:	60c3      	str	r3, [r0, #12]
   15ff0:	2e76      	cmp	r6, #118	; 0x76
   15ff2:	d122      	bne.n	1603a <d_operator_name+0x6a>
   15ff4:	f1ac 0530 	sub.w	r5, ip, #48	; 0x30
   15ff8:	b2e8      	uxtb	r0, r5
   15ffa:	2809      	cmp	r0, #9
   15ffc:	d935      	bls.n	1606a <d_operator_name+0x9a>
   15ffe:	4f32      	ldr	r7, [pc, #200]	; (160c8 <d_operator_name+0xf8>)
   16000:	2034      	movs	r0, #52	; 0x34
   16002:	2300      	movs	r3, #0
   16004:	1ac2      	subs	r2, r0, r3
   16006:	eb02 78d2 	add.w	r8, r2, r2, lsr #31
   1600a:	eb03 0168 	add.w	r1, r3, r8, asr #1
   1600e:	010d      	lsls	r5, r1, #4
   16010:	eb07 0805 	add.w	r8, r7, r5
   16014:	597d      	ldr	r5, [r7, r5]
   16016:	782a      	ldrb	r2, [r5, #0]
   16018:	4296      	cmp	r6, r2
   1601a:	d007      	beq.n	1602c <d_operator_name+0x5c>
   1601c:	42b2      	cmp	r2, r6
   1601e:	d90a      	bls.n	16036 <d_operator_name+0x66>
   16020:	4608      	mov	r0, r1
   16022:	4283      	cmp	r3, r0
   16024:	d1ee      	bne.n	16004 <d_operator_name+0x34>
   16026:	2000      	movs	r0, #0
   16028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1602c:	786a      	ldrb	r2, [r5, #1]
   1602e:	4594      	cmp	ip, r2
   16030:	d032      	beq.n	16098 <d_operator_name+0xc8>
   16032:	4562      	cmp	r2, ip
   16034:	d8f4      	bhi.n	16020 <d_operator_name+0x50>
   16036:	1c4b      	adds	r3, r1, #1
   16038:	e7f3      	b.n	16022 <d_operator_name+0x52>
   1603a:	f1a6 0163 	sub.w	r1, r6, #99	; 0x63
   1603e:	4248      	negs	r0, r1
   16040:	eb40 0201 	adc.w	r2, r0, r1
   16044:	f1bc 0f76 	cmp.w	ip, #118	; 0x76
   16048:	bf14      	ite	ne
   1604a:	2200      	movne	r2, #0
   1604c:	f002 0201 	andeq.w	r2, r2, #1
   16050:	2a00      	cmp	r2, #0
   16052:	d0d4      	beq.n	15ffe <d_operator_name+0x2e>
   16054:	4620      	mov	r0, r4
   16056:	f7ff fbcb 	bl	157f0 <d_type>
   1605a:	212e      	movs	r1, #46	; 0x2e
   1605c:	2300      	movs	r3, #0
   1605e:	4602      	mov	r2, r0
   16060:	4620      	mov	r0, r4
   16062:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   16066:	f7ff b875 	b.w	15154 <d_make_comp>
   1606a:	4620      	mov	r0, r4
   1606c:	f7ff fafa 	bl	15664 <d_source_name>
   16070:	6963      	ldr	r3, [r4, #20]
   16072:	69a1      	ldr	r1, [r4, #24]
   16074:	428b      	cmp	r3, r1
   16076:	4602      	mov	r2, r0
   16078:	dad5      	bge.n	16026 <d_operator_name+0x56>
   1607a:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   1607e:	6921      	ldr	r1, [r4, #16]
   16080:	3301      	adds	r3, #1
   16082:	6163      	str	r3, [r4, #20]
   16084:	0083      	lsls	r3, r0, #2
   16086:	18c8      	adds	r0, r1, r3
   16088:	d019      	beq.n	160be <d_operator_name+0xee>
   1608a:	b1d2      	cbz	r2, 160c2 <d_operator_name+0xf2>
   1608c:	242d      	movs	r4, #45	; 0x2d
   1608e:	6045      	str	r5, [r0, #4]
   16090:	54cc      	strb	r4, [r1, r3]
   16092:	6082      	str	r2, [r0, #8]
   16094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16098:	6963      	ldr	r3, [r4, #20]
   1609a:	2000      	movs	r0, #0
   1609c:	69a1      	ldr	r1, [r4, #24]
   1609e:	428b      	cmp	r3, r1
   160a0:	da0d      	bge.n	160be <d_operator_name+0xee>
   160a2:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   160a6:	6922      	ldr	r2, [r4, #16]
   160a8:	3301      	adds	r3, #1
   160aa:	6163      	str	r3, [r4, #20]
   160ac:	0083      	lsls	r3, r0, #2
   160ae:	18d0      	adds	r0, r2, r3
   160b0:	d005      	beq.n	160be <d_operator_name+0xee>
   160b2:	212c      	movs	r1, #44	; 0x2c
   160b4:	f8c0 8004 	str.w	r8, [r0, #4]
   160b8:	54d1      	strb	r1, [r2, r3]
   160ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   160be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   160c2:	4610      	mov	r0, r2
   160c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   160c8:	0002c4f4 	.word	0x0002c4f4

000160cc <d_unqualified_name>:
   160cc:	68c2      	ldr	r2, [r0, #12]
   160ce:	b570      	push	{r4, r5, r6, lr}
   160d0:	4605      	mov	r5, r0
   160d2:	7813      	ldrb	r3, [r2, #0]
   160d4:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
   160d8:	fa5f f18c 	uxtb.w	r1, ip
   160dc:	2909      	cmp	r1, #9
   160de:	d927      	bls.n	16130 <d_unqualified_name+0x64>
   160e0:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   160e4:	fa5f f18c 	uxtb.w	r1, ip
   160e8:	2919      	cmp	r1, #25
   160ea:	d913      	bls.n	16114 <d_unqualified_name+0x48>
   160ec:	f1a3 0143 	sub.w	r1, r3, #67	; 0x43
   160f0:	fa5f fc81 	uxtb.w	ip, r1
   160f4:	f1bc 0f01 	cmp.w	ip, #1
   160f8:	d958      	bls.n	161ac <d_unqualified_name+0xe0>
   160fa:	2b4c      	cmp	r3, #76	; 0x4c
   160fc:	d01c      	beq.n	16138 <d_unqualified_name+0x6c>
   160fe:	2b55      	cmp	r3, #85	; 0x55
   16100:	d106      	bne.n	16110 <d_unqualified_name+0x44>
   16102:	7853      	ldrb	r3, [r2, #1]
   16104:	2b6c      	cmp	r3, #108	; 0x6c
   16106:	d07f      	beq.n	16208 <d_unqualified_name+0x13c>
   16108:	2b74      	cmp	r3, #116	; 0x74
   1610a:	d028      	beq.n	1615e <d_unqualified_name+0x92>
   1610c:	2000      	movs	r0, #0
   1610e:	bd70      	pop	{r4, r5, r6, pc}
   16110:	2000      	movs	r0, #0
   16112:	bd70      	pop	{r4, r5, r6, pc}
   16114:	f7ff ff5c 	bl	15fd0 <d_operator_name>
   16118:	2800      	cmp	r0, #0
   1611a:	d0f8      	beq.n	1610e <d_unqualified_name+0x42>
   1611c:	7803      	ldrb	r3, [r0, #0]
   1611e:	2b2c      	cmp	r3, #44	; 0x2c
   16120:	d1f5      	bne.n	1610e <d_unqualified_name+0x42>
   16122:	6841      	ldr	r1, [r0, #4]
   16124:	6b2a      	ldr	r2, [r5, #48]	; 0x30
   16126:	688b      	ldr	r3, [r1, #8]
   16128:	18d1      	adds	r1, r2, r3
   1612a:	1dca      	adds	r2, r1, #7
   1612c:	632a      	str	r2, [r5, #48]	; 0x30
   1612e:	bd70      	pop	{r4, r5, r6, pc}
   16130:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   16134:	f7ff ba96 	b.w	15664 <d_source_name>
   16138:	1c54      	adds	r4, r2, #1
   1613a:	60c4      	str	r4, [r0, #12]
   1613c:	f7ff fa92 	bl	15664 <d_source_name>
   16140:	4604      	mov	r4, r0
   16142:	2800      	cmp	r0, #0
   16144:	d0e3      	beq.n	1610e <d_unqualified_name+0x42>
   16146:	68eb      	ldr	r3, [r5, #12]
   16148:	7819      	ldrb	r1, [r3, #0]
   1614a:	295f      	cmp	r1, #95	; 0x5f
   1614c:	d1df      	bne.n	1610e <d_unqualified_name+0x42>
   1614e:	3301      	adds	r3, #1
   16150:	4628      	mov	r0, r5
   16152:	60eb      	str	r3, [r5, #12]
   16154:	f7ff f876 	bl	15244 <d_number>
   16158:	ea24 70e0 	bic.w	r0, r4, r0, asr #31
   1615c:	bd70      	pop	{r4, r5, r6, pc}
   1615e:	1c53      	adds	r3, r2, #1
   16160:	60c3      	str	r3, [r0, #12]
   16162:	f892 c001 	ldrb.w	ip, [r2, #1]
   16166:	f1bc 0f74 	cmp.w	ip, #116	; 0x74
   1616a:	d1d1      	bne.n	16110 <d_unqualified_name+0x44>
   1616c:	3202      	adds	r2, #2
   1616e:	60c2      	str	r2, [r0, #12]
   16170:	f7ff f8dc 	bl	1532c <d_compact_number>
   16174:	2800      	cmp	r0, #0
   16176:	dbcb      	blt.n	16110 <d_unqualified_name+0x44>
   16178:	696b      	ldr	r3, [r5, #20]
   1617a:	69ac      	ldr	r4, [r5, #24]
   1617c:	42a3      	cmp	r3, r4
   1617e:	da13      	bge.n	161a8 <d_unqualified_name+0xdc>
   16180:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   16184:	692a      	ldr	r2, [r5, #16]
   16186:	3301      	adds	r3, #1
   16188:	616b      	str	r3, [r5, #20]
   1618a:	008b      	lsls	r3, r1, #2
   1618c:	18d4      	adds	r4, r2, r3
   1618e:	d002      	beq.n	16196 <d_unqualified_name+0xca>
   16190:	6060      	str	r0, [r4, #4]
   16192:	2040      	movs	r0, #64	; 0x40
   16194:	54d0      	strb	r0, [r2, r3]
   16196:	4628      	mov	r0, r5
   16198:	4621      	mov	r1, r4
   1619a:	f7ff fad7 	bl	1574c <d_add_substitution>
   1619e:	2800      	cmp	r0, #0
   161a0:	bf14      	ite	ne
   161a2:	4620      	movne	r0, r4
   161a4:	2000      	moveq	r0, #0
   161a6:	bd70      	pop	{r4, r5, r6, pc}
   161a8:	2400      	movs	r4, #0
   161aa:	e7f4      	b.n	16196 <d_unqualified_name+0xca>
   161ac:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   161ae:	b121      	cbz	r1, 161ba <d_unqualified_name+0xee>
   161b0:	7808      	ldrb	r0, [r1, #0]
   161b2:	2800      	cmp	r0, #0
   161b4:	d054      	beq.n	16260 <d_unqualified_name+0x194>
   161b6:	2816      	cmp	r0, #22
   161b8:	d052      	beq.n	16260 <d_unqualified_name+0x194>
   161ba:	2b43      	cmp	r3, #67	; 0x43
   161bc:	d056      	beq.n	1626c <d_unqualified_name+0x1a0>
   161be:	2b44      	cmp	r3, #68	; 0x44
   161c0:	d1a6      	bne.n	16110 <d_unqualified_name+0x44>
   161c2:	7853      	ldrb	r3, [r2, #1]
   161c4:	2b31      	cmp	r3, #49	; 0x31
   161c6:	d07c      	beq.n	162c2 <d_unqualified_name+0x1f6>
   161c8:	2b32      	cmp	r3, #50	; 0x32
   161ca:	d07c      	beq.n	162c6 <d_unqualified_name+0x1fa>
   161cc:	2b30      	cmp	r3, #48	; 0x30
   161ce:	d19f      	bne.n	16110 <d_unqualified_name+0x44>
   161d0:	2401      	movs	r4, #1
   161d2:	696b      	ldr	r3, [r5, #20]
   161d4:	3202      	adds	r2, #2
   161d6:	69a8      	ldr	r0, [r5, #24]
   161d8:	60ea      	str	r2, [r5, #12]
   161da:	4283      	cmp	r3, r0
   161dc:	da6b      	bge.n	162b6 <d_unqualified_name+0x1ea>
   161de:	6928      	ldr	r0, [r5, #16]
   161e0:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
   161e4:	3301      	adds	r3, #1
   161e6:	616b      	str	r3, [r5, #20]
   161e8:	eb10 008c 	adds.w	r0, r0, ip, lsl #2
   161ec:	bf14      	ite	ne
   161ee:	2300      	movne	r3, #0
   161f0:	2301      	moveq	r3, #1
   161f2:	2900      	cmp	r1, #0
   161f4:	bf08      	it	eq
   161f6:	f043 0301 	orreq.w	r3, r3, #1
   161fa:	2b00      	cmp	r3, #0
   161fc:	d188      	bne.n	16110 <d_unqualified_name+0x44>
   161fe:	2208      	movs	r2, #8
   16200:	7104      	strb	r4, [r0, #4]
   16202:	7002      	strb	r2, [r0, #0]
   16204:	6081      	str	r1, [r0, #8]
   16206:	bd70      	pop	{r4, r5, r6, pc}
   16208:	1c53      	adds	r3, r2, #1
   1620a:	60c3      	str	r3, [r0, #12]
   1620c:	7851      	ldrb	r1, [r2, #1]
   1620e:	296c      	cmp	r1, #108	; 0x6c
   16210:	f47f af7e 	bne.w	16110 <d_unqualified_name+0x44>
   16214:	1c96      	adds	r6, r2, #2
   16216:	60c6      	str	r6, [r0, #12]
   16218:	f7ff fe6e 	bl	15ef8 <d_parmlist>
   1621c:	4606      	mov	r6, r0
   1621e:	2800      	cmp	r0, #0
   16220:	f43f af75 	beq.w	1610e <d_unqualified_name+0x42>
   16224:	68eb      	ldr	r3, [r5, #12]
   16226:	7818      	ldrb	r0, [r3, #0]
   16228:	2845      	cmp	r0, #69	; 0x45
   1622a:	f47f af71 	bne.w	16110 <d_unqualified_name+0x44>
   1622e:	1c5a      	adds	r2, r3, #1
   16230:	4628      	mov	r0, r5
   16232:	60ea      	str	r2, [r5, #12]
   16234:	f7ff f87a 	bl	1532c <d_compact_number>
   16238:	2800      	cmp	r0, #0
   1623a:	f6ff af69 	blt.w	16110 <d_unqualified_name+0x44>
   1623e:	696b      	ldr	r3, [r5, #20]
   16240:	69ac      	ldr	r4, [r5, #24]
   16242:	42a3      	cmp	r3, r4
   16244:	dab0      	bge.n	161a8 <d_unqualified_name+0xdc>
   16246:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   1624a:	692a      	ldr	r2, [r5, #16]
   1624c:	3301      	adds	r3, #1
   1624e:	616b      	str	r3, [r5, #20]
   16250:	008b      	lsls	r3, r1, #2
   16252:	18d4      	adds	r4, r2, r3
   16254:	d09f      	beq.n	16196 <d_unqualified_name+0xca>
   16256:	213e      	movs	r1, #62	; 0x3e
   16258:	6066      	str	r6, [r4, #4]
   1625a:	54d1      	strb	r1, [r2, r3]
   1625c:	60a0      	str	r0, [r4, #8]
   1625e:	e79a      	b.n	16196 <d_unqualified_name+0xca>
   16260:	688b      	ldr	r3, [r1, #8]
   16262:	6b28      	ldr	r0, [r5, #48]	; 0x30
   16264:	18c0      	adds	r0, r0, r3
   16266:	6328      	str	r0, [r5, #48]	; 0x30
   16268:	7813      	ldrb	r3, [r2, #0]
   1626a:	e7a6      	b.n	161ba <d_unqualified_name+0xee>
   1626c:	7853      	ldrb	r3, [r2, #1]
   1626e:	2b32      	cmp	r3, #50	; 0x32
   16270:	d02d      	beq.n	162ce <d_unqualified_name+0x202>
   16272:	2b33      	cmp	r3, #51	; 0x33
   16274:	d029      	beq.n	162ca <d_unqualified_name+0x1fe>
   16276:	2b31      	cmp	r3, #49	; 0x31
   16278:	f47f af4a 	bne.w	16110 <d_unqualified_name+0x44>
   1627c:	2401      	movs	r4, #1
   1627e:	696b      	ldr	r3, [r5, #20]
   16280:	3202      	adds	r2, #2
   16282:	69a8      	ldr	r0, [r5, #24]
   16284:	60ea      	str	r2, [r5, #12]
   16286:	4283      	cmp	r3, r0
   16288:	da18      	bge.n	162bc <d_unqualified_name+0x1f0>
   1628a:	6928      	ldr	r0, [r5, #16]
   1628c:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
   16290:	3301      	adds	r3, #1
   16292:	616b      	str	r3, [r5, #20]
   16294:	eb10 008c 	adds.w	r0, r0, ip, lsl #2
   16298:	bf14      	ite	ne
   1629a:	2300      	movne	r3, #0
   1629c:	2301      	moveq	r3, #1
   1629e:	2900      	cmp	r1, #0
   162a0:	bf08      	it	eq
   162a2:	f043 0301 	orreq.w	r3, r3, #1
   162a6:	2b00      	cmp	r3, #0
   162a8:	f47f af32 	bne.w	16110 <d_unqualified_name+0x44>
   162ac:	2207      	movs	r2, #7
   162ae:	7104      	strb	r4, [r0, #4]
   162b0:	7002      	strb	r2, [r0, #0]
   162b2:	6081      	str	r1, [r0, #8]
   162b4:	bd70      	pop	{r4, r5, r6, pc}
   162b6:	2301      	movs	r3, #1
   162b8:	2000      	movs	r0, #0
   162ba:	e79a      	b.n	161f2 <d_unqualified_name+0x126>
   162bc:	2301      	movs	r3, #1
   162be:	2000      	movs	r0, #0
   162c0:	e7ed      	b.n	1629e <d_unqualified_name+0x1d2>
   162c2:	2402      	movs	r4, #2
   162c4:	e785      	b.n	161d2 <d_unqualified_name+0x106>
   162c6:	2403      	movs	r4, #3
   162c8:	e783      	b.n	161d2 <d_unqualified_name+0x106>
   162ca:	2403      	movs	r4, #3
   162cc:	e7d7      	b.n	1627e <d_unqualified_name+0x1b2>
   162ce:	2402      	movs	r4, #2
   162d0:	e7d5      	b.n	1627e <d_unqualified_name+0x1b2>
   162d2:	bf00      	nop

000162d4 <d_template_args>:
   162d4:	68c3      	ldr	r3, [r0, #12]
   162d6:	b570      	push	{r4, r5, r6, lr}
   162d8:	4604      	mov	r4, r0
   162da:	781a      	ldrb	r2, [r3, #0]
   162dc:	b082      	sub	sp, #8
   162de:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   162e0:	2a49      	cmp	r2, #73	; 0x49
   162e2:	d002      	beq.n	162ea <d_template_args+0x16>
   162e4:	2000      	movs	r0, #0
   162e6:	b002      	add	sp, #8
   162e8:	bd70      	pop	{r4, r5, r6, pc}
   162ea:	1c59      	adds	r1, r3, #1
   162ec:	60c1      	str	r1, [r0, #12]
   162ee:	785a      	ldrb	r2, [r3, #1]
   162f0:	2a45      	cmp	r2, #69	; 0x45
   162f2:	d039      	beq.n	16368 <d_template_args+0x94>
   162f4:	ad02      	add	r5, sp, #8
   162f6:	2000      	movs	r0, #0
   162f8:	f845 0d04 	str.w	r0, [r5, #-4]!
   162fc:	2a4c      	cmp	r2, #76	; 0x4c
   162fe:	d02e      	beq.n	1635e <d_template_args+0x8a>
   16300:	2a58      	cmp	r2, #88	; 0x58
   16302:	d01f      	beq.n	16344 <d_template_args+0x70>
   16304:	2a49      	cmp	r2, #73	; 0x49
   16306:	d018      	beq.n	1633a <d_template_args+0x66>
   16308:	4620      	mov	r0, r4
   1630a:	f7ff fa71 	bl	157f0 <d_type>
   1630e:	4602      	mov	r2, r0
   16310:	2a00      	cmp	r2, #0
   16312:	d033      	beq.n	1637c <d_template_args+0xa8>
   16314:	4620      	mov	r0, r4
   16316:	212b      	movs	r1, #43	; 0x2b
   16318:	2300      	movs	r3, #0
   1631a:	f7fe ff1b 	bl	15154 <d_make_comp>
   1631e:	6028      	str	r0, [r5, #0]
   16320:	2800      	cmp	r0, #0
   16322:	d0e0      	beq.n	162e6 <d_template_args+0x12>
   16324:	68e1      	ldr	r1, [r4, #12]
   16326:	f100 0508 	add.w	r5, r0, #8
   1632a:	780a      	ldrb	r2, [r1, #0]
   1632c:	2a45      	cmp	r2, #69	; 0x45
   1632e:	d1e5      	bne.n	162fc <d_template_args+0x28>
   16330:	1c48      	adds	r0, r1, #1
   16332:	62e6      	str	r6, [r4, #44]	; 0x2c
   16334:	60e0      	str	r0, [r4, #12]
   16336:	9801      	ldr	r0, [sp, #4]
   16338:	e7d5      	b.n	162e6 <d_template_args+0x12>
   1633a:	4620      	mov	r0, r4
   1633c:	f7ff ffca 	bl	162d4 <d_template_args>
   16340:	4602      	mov	r2, r0
   16342:	e7e5      	b.n	16310 <d_template_args+0x3c>
   16344:	1c4a      	adds	r2, r1, #1
   16346:	4620      	mov	r0, r4
   16348:	60e2      	str	r2, [r4, #12]
   1634a:	f000 fd0d 	bl	16d68 <d_expression>
   1634e:	68e3      	ldr	r3, [r4, #12]
   16350:	7819      	ldrb	r1, [r3, #0]
   16352:	2945      	cmp	r1, #69	; 0x45
   16354:	4602      	mov	r2, r0
   16356:	d1c5      	bne.n	162e4 <d_template_args+0x10>
   16358:	3301      	adds	r3, #1
   1635a:	60e3      	str	r3, [r4, #12]
   1635c:	e7d8      	b.n	16310 <d_template_args+0x3c>
   1635e:	4620      	mov	r0, r4
   16360:	f000 fca4 	bl	16cac <d_expr_primary>
   16364:	4602      	mov	r2, r0
   16366:	e7d3      	b.n	16310 <d_template_args+0x3c>
   16368:	2200      	movs	r2, #0
   1636a:	3302      	adds	r3, #2
   1636c:	212b      	movs	r1, #43	; 0x2b
   1636e:	60c3      	str	r3, [r0, #12]
   16370:	4613      	mov	r3, r2
   16372:	b002      	add	sp, #8
   16374:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   16378:	f7fe beec 	b.w	15154 <d_make_comp>
   1637c:	4610      	mov	r0, r2
   1637e:	e7b2      	b.n	162e6 <d_template_args+0x12>

00016380 <d_name>:
   16380:	68c3      	ldr	r3, [r0, #12]
   16382:	b5f0      	push	{r4, r5, r6, r7, lr}
   16384:	4605      	mov	r5, r0
   16386:	781a      	ldrb	r2, [r3, #0]
   16388:	b083      	sub	sp, #12
   1638a:	3a4c      	subs	r2, #76	; 0x4c
   1638c:	2a0e      	cmp	r2, #14
   1638e:	d828      	bhi.n	163e2 <d_name+0x62>
   16390:	e8df f002 	tbb	[pc, r2]
   16394:	27362721 	.word	0x27362721
   16398:	08272727 	.word	0x08272727
   1639c:	27272127 	.word	0x27272127
   163a0:	2727      	.short	0x2727
   163a2:	89          	.byte	0x89
   163a3:	00          	.byte	0x00
   163a4:	785e      	ldrb	r6, [r3, #1]
   163a6:	2e74      	cmp	r6, #116	; 0x74
   163a8:	f000 8089 	beq.w	164be <d_name+0x13e>
   163ac:	2100      	movs	r1, #0
   163ae:	2401      	movs	r4, #1
   163b0:	f7fe fffa 	bl	153a8 <d_substitution>
   163b4:	4606      	mov	r6, r0
   163b6:	68e9      	ldr	r1, [r5, #12]
   163b8:	7808      	ldrb	r0, [r1, #0]
   163ba:	2849      	cmp	r0, #73	; 0x49
   163bc:	d10e      	bne.n	163dc <d_name+0x5c>
   163be:	2c00      	cmp	r4, #0
   163c0:	f040 8096 	bne.w	164f0 <d_name+0x170>
   163c4:	4628      	mov	r0, r5
   163c6:	4631      	mov	r1, r6
   163c8:	f7ff f9c0 	bl	1574c <d_add_substitution>
   163cc:	2800      	cmp	r0, #0
   163ce:	f040 808f 	bne.w	164f0 <d_name+0x170>
   163d2:	4626      	mov	r6, r4
   163d4:	e002      	b.n	163dc <d_name+0x5c>
   163d6:	f7ff fe79 	bl	160cc <d_unqualified_name>
   163da:	4606      	mov	r6, r0
   163dc:	4630      	mov	r0, r6
   163de:	b003      	add	sp, #12
   163e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   163e2:	f7ff fe73 	bl	160cc <d_unqualified_name>
   163e6:	68eb      	ldr	r3, [r5, #12]
   163e8:	781a      	ldrb	r2, [r3, #0]
   163ea:	2a49      	cmp	r2, #73	; 0x49
   163ec:	4606      	mov	r6, r0
   163ee:	d1f5      	bne.n	163dc <d_name+0x5c>
   163f0:	4628      	mov	r0, r5
   163f2:	4631      	mov	r1, r6
   163f4:	f7ff f9aa 	bl	1574c <d_add_substitution>
   163f8:	2800      	cmp	r0, #0
   163fa:	d179      	bne.n	164f0 <d_name+0x170>
   163fc:	4606      	mov	r6, r0
   163fe:	e7ed      	b.n	163dc <d_name+0x5c>
   16400:	3301      	adds	r3, #1
   16402:	a901      	add	r1, sp, #4
   16404:	60c3      	str	r3, [r0, #12]
   16406:	2201      	movs	r2, #1
   16408:	f7fe ff46 	bl	15298 <d_cv_qualifiers>
   1640c:	4606      	mov	r6, r0
   1640e:	2800      	cmp	r0, #0
   16410:	d0e4      	beq.n	163dc <d_name+0x5c>
   16412:	68eb      	ldr	r3, [r5, #12]
   16414:	2700      	movs	r7, #0
   16416:	781c      	ldrb	r4, [r3, #0]
   16418:	2c00      	cmp	r4, #0
   1641a:	f000 80ca 	beq.w	165b2 <d_name+0x232>
   1641e:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
   16422:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   16426:	b2d1      	uxtb	r1, r2
   16428:	fa5f fc8e 	uxtb.w	ip, lr
   1642c:	2909      	cmp	r1, #9
   1642e:	bf8c      	ite	hi
   16430:	2100      	movhi	r1, #0
   16432:	2101      	movls	r1, #1
   16434:	f1bc 0f19 	cmp.w	ip, #25
   16438:	bf8c      	ite	hi
   1643a:	4608      	movhi	r0, r1
   1643c:	f041 0001 	orrls.w	r0, r1, #1
   16440:	2800      	cmp	r0, #0
   16442:	f040 8093 	bne.w	1656c <d_name+0x1ec>
   16446:	f1a4 0143 	sub.w	r1, r4, #67	; 0x43
   1644a:	f1d1 0c00 	rsbs	ip, r1, #0
   1644e:	eb4c 0001 	adc.w	r0, ip, r1
   16452:	2c44      	cmp	r4, #68	; 0x44
   16454:	bf08      	it	eq
   16456:	f040 0001 	orreq.w	r0, r0, #1
   1645a:	2800      	cmp	r0, #0
   1645c:	f040 8086 	bne.w	1656c <d_name+0x1ec>
   16460:	f1a4 0255 	sub.w	r2, r4, #85	; 0x55
   16464:	f1d2 0e00 	rsbs	lr, r2, #0
   16468:	eb4e 0202 	adc.w	r2, lr, r2
   1646c:	2c4c      	cmp	r4, #76	; 0x4c
   1646e:	bf08      	it	eq
   16470:	f042 0201 	orreq.w	r2, r2, #1
   16474:	2a00      	cmp	r2, #0
   16476:	d179      	bne.n	1656c <d_name+0x1ec>
   16478:	2c53      	cmp	r4, #83	; 0x53
   1647a:	f000 809e 	beq.w	165ba <d_name+0x23a>
   1647e:	2c49      	cmp	r4, #73	; 0x49
   16480:	f000 8090 	beq.w	165a4 <d_name+0x224>
   16484:	2c54      	cmp	r4, #84	; 0x54
   16486:	f000 80ba 	beq.w	165fe <d_name+0x27e>
   1648a:	2c45      	cmp	r4, #69	; 0x45
   1648c:	f000 80ce 	beq.w	1662c <d_name+0x2ac>
   16490:	2c4d      	cmp	r4, #77	; 0x4d
   16492:	f040 808e 	bne.w	165b2 <d_name+0x232>
   16496:	2f00      	cmp	r7, #0
   16498:	f000 808b 	beq.w	165b2 <d_name+0x232>
   1649c:	1c58      	adds	r0, r3, #1
   1649e:	60e8      	str	r0, [r5, #12]
   164a0:	785c      	ldrb	r4, [r3, #1]
   164a2:	4603      	mov	r3, r0
   164a4:	e7b8      	b.n	16418 <d_name+0x98>
   164a6:	1c5c      	adds	r4, r3, #1
   164a8:	2100      	movs	r1, #0
   164aa:	60c4      	str	r4, [r0, #12]
   164ac:	f000 f8ce 	bl	1664c <d_encoding>
   164b0:	68eb      	ldr	r3, [r5, #12]
   164b2:	781e      	ldrb	r6, [r3, #0]
   164b4:	2e45      	cmp	r6, #69	; 0x45
   164b6:	4604      	mov	r4, r0
   164b8:	d025      	beq.n	16506 <d_name+0x186>
   164ba:	2600      	movs	r6, #0
   164bc:	e78e      	b.n	163dc <d_name+0x5c>
   164be:	f64c 0178 	movw	r1, #51320	; 0xc878
   164c2:	3302      	adds	r3, #2
   164c4:	2203      	movs	r2, #3
   164c6:	f2c0 0102 	movt	r1, #2
   164ca:	60c3      	str	r3, [r0, #12]
   164cc:	f7fe fe94 	bl	151f8 <d_make_name>
   164d0:	4604      	mov	r4, r0
   164d2:	4628      	mov	r0, r5
   164d4:	f7ff fdfa 	bl	160cc <d_unqualified_name>
   164d8:	4622      	mov	r2, r4
   164da:	2101      	movs	r1, #1
   164dc:	2400      	movs	r4, #0
   164de:	4603      	mov	r3, r0
   164e0:	4628      	mov	r0, r5
   164e2:	f7fe fe37 	bl	15154 <d_make_comp>
   164e6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
   164e8:	1cd1      	adds	r1, r2, #3
   164ea:	6329      	str	r1, [r5, #48]	; 0x30
   164ec:	4606      	mov	r6, r0
   164ee:	e762      	b.n	163b6 <d_name+0x36>
   164f0:	4628      	mov	r0, r5
   164f2:	f7ff feef 	bl	162d4 <d_template_args>
   164f6:	4632      	mov	r2, r6
   164f8:	2104      	movs	r1, #4
   164fa:	4603      	mov	r3, r0
   164fc:	4628      	mov	r0, r5
   164fe:	f7fe fe29 	bl	15154 <d_make_comp>
   16502:	4606      	mov	r6, r0
   16504:	e76a      	b.n	163dc <d_name+0x5c>
   16506:	1c59      	adds	r1, r3, #1
   16508:	60e9      	str	r1, [r5, #12]
   1650a:	785a      	ldrb	r2, [r3, #1]
   1650c:	2a73      	cmp	r2, #115	; 0x73
   1650e:	d05a      	beq.n	165c6 <d_name+0x246>
   16510:	2a64      	cmp	r2, #100	; 0x64
   16512:	bf18      	it	ne
   16514:	f04f 37ff 	movne.w	r7, #4294967295
   16518:	d068      	beq.n	165ec <d_name+0x26c>
   1651a:	4628      	mov	r0, r5
   1651c:	f7ff ff30 	bl	16380 <d_name>
   16520:	4606      	mov	r6, r0
   16522:	b140      	cbz	r0, 16536 <d_name+0x1b6>
   16524:	7803      	ldrb	r3, [r0, #0]
   16526:	2b3e      	cmp	r3, #62	; 0x3e
   16528:	d005      	beq.n	16536 <d_name+0x1b6>
   1652a:	2b40      	cmp	r3, #64	; 0x40
   1652c:	d003      	beq.n	16536 <d_name+0x1b6>
   1652e:	68eb      	ldr	r3, [r5, #12]
   16530:	7818      	ldrb	r0, [r3, #0]
   16532:	285f      	cmp	r0, #95	; 0x5f
   16534:	d068      	beq.n	16608 <d_name+0x288>
   16536:	1c78      	adds	r0, r7, #1
   16538:	bf08      	it	eq
   1653a:	4633      	moveq	r3, r6
   1653c:	d00f      	beq.n	1655e <d_name+0x1de>
   1653e:	696b      	ldr	r3, [r5, #20]
   16540:	69aa      	ldr	r2, [r5, #24]
   16542:	4293      	cmp	r3, r2
   16544:	da50      	bge.n	165e8 <d_name+0x268>
   16546:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   1654a:	6929      	ldr	r1, [r5, #16]
   1654c:	3301      	adds	r3, #1
   1654e:	616b      	str	r3, [r5, #20]
   16550:	0082      	lsls	r2, r0, #2
   16552:	188b      	adds	r3, r1, r2
   16554:	d003      	beq.n	1655e <d_name+0x1de>
   16556:	203f      	movs	r0, #63	; 0x3f
   16558:	609f      	str	r7, [r3, #8]
   1655a:	5488      	strb	r0, [r1, r2]
   1655c:	605e      	str	r6, [r3, #4]
   1655e:	4628      	mov	r0, r5
   16560:	2102      	movs	r1, #2
   16562:	4622      	mov	r2, r4
   16564:	f7fe fdf6 	bl	15154 <d_make_comp>
   16568:	4606      	mov	r6, r0
   1656a:	e737      	b.n	163dc <d_name+0x5c>
   1656c:	4628      	mov	r0, r5
   1656e:	f7ff fdad 	bl	160cc <d_unqualified_name>
   16572:	4603      	mov	r3, r0
   16574:	b1a7      	cbz	r7, 165a0 <d_name+0x220>
   16576:	2101      	movs	r1, #1
   16578:	463a      	mov	r2, r7
   1657a:	4628      	mov	r0, r5
   1657c:	f7fe fdea 	bl	15154 <d_make_comp>
   16580:	4607      	mov	r7, r0
   16582:	2c53      	cmp	r4, #83	; 0x53
   16584:	d009      	beq.n	1659a <d_name+0x21a>
   16586:	68eb      	ldr	r3, [r5, #12]
   16588:	781c      	ldrb	r4, [r3, #0]
   1658a:	2c45      	cmp	r4, #69	; 0x45
   1658c:	f43f af47 	beq.w	1641e <d_name+0x9e>
   16590:	4628      	mov	r0, r5
   16592:	4639      	mov	r1, r7
   16594:	f7ff f8da 	bl	1574c <d_add_substitution>
   16598:	b158      	cbz	r0, 165b2 <d_name+0x232>
   1659a:	68eb      	ldr	r3, [r5, #12]
   1659c:	781c      	ldrb	r4, [r3, #0]
   1659e:	e73b      	b.n	16418 <d_name+0x98>
   165a0:	461f      	mov	r7, r3
   165a2:	e7ee      	b.n	16582 <d_name+0x202>
   165a4:	b12f      	cbz	r7, 165b2 <d_name+0x232>
   165a6:	4628      	mov	r0, r5
   165a8:	f7ff fe94 	bl	162d4 <d_template_args>
   165ac:	2104      	movs	r1, #4
   165ae:	4603      	mov	r3, r0
   165b0:	e7e2      	b.n	16578 <d_name+0x1f8>
   165b2:	2700      	movs	r7, #0
   165b4:	6037      	str	r7, [r6, #0]
   165b6:	463e      	mov	r6, r7
   165b8:	e710      	b.n	163dc <d_name+0x5c>
   165ba:	4628      	mov	r0, r5
   165bc:	2101      	movs	r1, #1
   165be:	f7fe fef3 	bl	153a8 <d_substitution>
   165c2:	4603      	mov	r3, r0
   165c4:	e7d6      	b.n	16574 <d_name+0x1f4>
   165c6:	1c9a      	adds	r2, r3, #2
   165c8:	60ea      	str	r2, [r5, #12]
   165ca:	f893 e002 	ldrb.w	lr, [r3, #2]
   165ce:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
   165d2:	d022      	beq.n	1661a <d_name+0x29a>
   165d4:	f64c 0168 	movw	r1, #51304	; 0xc868
   165d8:	220e      	movs	r2, #14
   165da:	f2c0 0102 	movt	r1, #2
   165de:	4628      	mov	r0, r5
   165e0:	f7fe fe0a 	bl	151f8 <d_make_name>
   165e4:	4603      	mov	r3, r0
   165e6:	e7ba      	b.n	1655e <d_name+0x1de>
   165e8:	2300      	movs	r3, #0
   165ea:	e7b8      	b.n	1655e <d_name+0x1de>
   165ec:	1c9f      	adds	r7, r3, #2
   165ee:	4628      	mov	r0, r5
   165f0:	60ef      	str	r7, [r5, #12]
   165f2:	f7fe fe9b 	bl	1532c <d_compact_number>
   165f6:	1e07      	subs	r7, r0, #0
   165f8:	da8f      	bge.n	1651a <d_name+0x19a>
   165fa:	2600      	movs	r6, #0
   165fc:	e6ee      	b.n	163dc <d_name+0x5c>
   165fe:	4628      	mov	r0, r5
   16600:	f7fe feae 	bl	15360 <d_template_param>
   16604:	4603      	mov	r3, r0
   16606:	e7b5      	b.n	16574 <d_name+0x1f4>
   16608:	1c59      	adds	r1, r3, #1
   1660a:	4628      	mov	r0, r5
   1660c:	60e9      	str	r1, [r5, #12]
   1660e:	f7fe fe19 	bl	15244 <d_number>
   16612:	2800      	cmp	r0, #0
   16614:	da8f      	bge.n	16536 <d_name+0x1b6>
   16616:	2600      	movs	r6, #0
   16618:	e6e0      	b.n	163dc <d_name+0x5c>
   1661a:	3303      	adds	r3, #3
   1661c:	4628      	mov	r0, r5
   1661e:	60eb      	str	r3, [r5, #12]
   16620:	f7fe fe10 	bl	15244 <d_number>
   16624:	2800      	cmp	r0, #0
   16626:	dad5      	bge.n	165d4 <d_name+0x254>
   16628:	2600      	movs	r6, #0
   1662a:	e6d7      	b.n	163dc <d_name+0x5c>
   1662c:	6037      	str	r7, [r6, #0]
   1662e:	2f00      	cmp	r7, #0
   16630:	d0c1      	beq.n	165b6 <d_name+0x236>
   16632:	68eb      	ldr	r3, [r5, #12]
   16634:	f893 c000 	ldrb.w	ip, [r3]
   16638:	f1bc 0f45 	cmp.w	ip, #69	; 0x45
   1663c:	bf18      	it	ne
   1663e:	4616      	movne	r6, r2
   16640:	f47f aecc 	bne.w	163dc <d_name+0x5c>
   16644:	3301      	adds	r3, #1
   16646:	9e01      	ldr	r6, [sp, #4]
   16648:	60eb      	str	r3, [r5, #12]
   1664a:	e6c7      	b.n	163dc <d_name+0x5c>

0001664c <d_encoding>:
   1664c:	68c2      	ldr	r2, [r0, #12]
   1664e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16652:	460e      	mov	r6, r1
   16654:	f892 c000 	ldrb.w	ip, [r2]
   16658:	4604      	mov	r4, r0
   1665a:	f1ac 0147 	sub.w	r1, ip, #71	; 0x47
   1665e:	424b      	negs	r3, r1
   16660:	eb43 0501 	adc.w	r5, r3, r1
   16664:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   16668:	bf14      	ite	ne
   1666a:	462b      	movne	r3, r5
   1666c:	f045 0301 	orreq.w	r3, r5, #1
   16670:	2b00      	cmp	r3, #0
   16672:	d14f      	bne.n	16714 <d_encoding+0xc8>
   16674:	f7ff fe84 	bl	16380 <d_name>
   16678:	3600      	adds	r6, #0
   1667a:	bf18      	it	ne
   1667c:	2601      	movne	r6, #1
   1667e:	2800      	cmp	r0, #0
   16680:	bf0c      	ite	eq
   16682:	2600      	moveq	r6, #0
   16684:	f006 0601 	andne.w	r6, r6, #1
   16688:	4605      	mov	r5, r0
   1668a:	2e00      	cmp	r6, #0
   1668c:	d121      	bne.n	166d2 <d_encoding+0x86>
   1668e:	68e3      	ldr	r3, [r4, #12]
   16690:	781b      	ldrb	r3, [r3, #0]
   16692:	f1d3 0201 	rsbs	r2, r3, #1
   16696:	bf38      	it	cc
   16698:	2200      	movcc	r2, #0
   1669a:	2d00      	cmp	r5, #0
   1669c:	bf08      	it	eq
   1669e:	f042 0201 	orreq.w	r2, r2, #1
   166a2:	2a00      	cmp	r2, #0
   166a4:	d133      	bne.n	1670e <d_encoding+0xc2>
   166a6:	2b45      	cmp	r3, #69	; 0x45
   166a8:	d031      	beq.n	1670e <d_encoding+0xc2>
   166aa:	462b      	mov	r3, r5
   166ac:	781a      	ldrb	r2, [r3, #0]
   166ae:	2a04      	cmp	r2, #4
   166b0:	f000 811e 	beq.w	168f0 <d_encoding+0x2a4>
   166b4:	f1a2 021a 	sub.w	r2, r2, #26
   166b8:	d239      	bcs.n	1672e <d_encoding+0xe2>
   166ba:	2100      	movs	r1, #0
   166bc:	4620      	mov	r0, r4
   166be:	f7ff fc69 	bl	15f94 <d_bare_function_type>
   166c2:	2103      	movs	r1, #3
   166c4:	462a      	mov	r2, r5
   166c6:	4603      	mov	r3, r0
   166c8:	4620      	mov	r0, r4
   166ca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   166ce:	f7fe bd41 	b.w	15154 <d_make_comp>
   166d2:	68a1      	ldr	r1, [r4, #8]
   166d4:	07cb      	lsls	r3, r1, #31
   166d6:	d4da      	bmi.n	1668e <d_encoding+0x42>
   166d8:	7803      	ldrb	r3, [r0, #0]
   166da:	f1a3 0e1a 	sub.w	lr, r3, #26
   166de:	fa5f f08e 	uxtb.w	r0, lr
   166e2:	2802      	cmp	r0, #2
   166e4:	d808      	bhi.n	166f8 <d_encoding+0xac>
   166e6:	686d      	ldr	r5, [r5, #4]
   166e8:	782b      	ldrb	r3, [r5, #0]
   166ea:	f1a3 021a 	sub.w	r2, r3, #26
   166ee:	fa5f fc82 	uxtb.w	ip, r2
   166f2:	f1bc 0f02 	cmp.w	ip, #2
   166f6:	d9f6      	bls.n	166e6 <d_encoding+0x9a>
   166f8:	2b02      	cmp	r3, #2
   166fa:	d108      	bne.n	1670e <d_encoding+0xc2>
   166fc:	68ab      	ldr	r3, [r5, #8]
   166fe:	e000      	b.n	16702 <d_encoding+0xb6>
   16700:	685b      	ldr	r3, [r3, #4]
   16702:	7818      	ldrb	r0, [r3, #0]
   16704:	381a      	subs	r0, #26
   16706:	b2c1      	uxtb	r1, r0
   16708:	2902      	cmp	r1, #2
   1670a:	d9f9      	bls.n	16700 <d_encoding+0xb4>
   1670c:	60ab      	str	r3, [r5, #8]
   1670e:	4628      	mov	r0, r5
   16710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16714:	6b01      	ldr	r1, [r0, #48]	; 0x30
   16716:	f101 0514 	add.w	r5, r1, #20
   1671a:	6305      	str	r5, [r0, #48]	; 0x30
   1671c:	7813      	ldrb	r3, [r2, #0]
   1671e:	2b54      	cmp	r3, #84	; 0x54
   16720:	d070      	beq.n	16804 <d_encoding+0x1b8>
   16722:	2b47      	cmp	r3, #71	; 0x47
   16724:	d00a      	beq.n	1673c <d_encoding+0xf0>
   16726:	2500      	movs	r5, #0
   16728:	4628      	mov	r0, r5
   1672a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1672e:	2a02      	cmp	r2, #2
   16730:	d8c3      	bhi.n	166ba <d_encoding+0x6e>
   16732:	685b      	ldr	r3, [r3, #4]
   16734:	2b00      	cmp	r3, #0
   16736:	d1b9      	bne.n	166ac <d_encoding+0x60>
   16738:	4619      	mov	r1, r3
   1673a:	e7bf      	b.n	166bc <d_encoding+0x70>
   1673c:	1c53      	adds	r3, r2, #1
   1673e:	60c3      	str	r3, [r0, #12]
   16740:	7855      	ldrb	r5, [r2, #1]
   16742:	2d00      	cmp	r5, #0
   16744:	d0e3      	beq.n	1670e <d_encoding+0xc2>
   16746:	3202      	adds	r2, #2
   16748:	2d52      	cmp	r5, #82	; 0x52
   1674a:	60c2      	str	r2, [r0, #12]
   1674c:	f000 8202 	beq.w	16b54 <d_encoding+0x508>
   16750:	f240 8139 	bls.w	169c6 <d_encoding+0x37a>
   16754:	2d56      	cmp	r5, #86	; 0x56
   16756:	f000 81f3 	beq.w	16b40 <d_encoding+0x4f4>
   1675a:	2d72      	cmp	r5, #114	; 0x72
   1675c:	d1e3      	bne.n	16726 <d_encoding+0xda>
   1675e:	f7fe fd71 	bl	15244 <d_number>
   16762:	2801      	cmp	r0, #1
   16764:	dddf      	ble.n	16726 <d_encoding+0xda>
   16766:	68e6      	ldr	r6, [r4, #12]
   16768:	7833      	ldrb	r3, [r6, #0]
   1676a:	2b00      	cmp	r3, #0
   1676c:	d0db      	beq.n	16726 <d_encoding+0xda>
   1676e:	3601      	adds	r6, #1
   16770:	2b5f      	cmp	r3, #95	; 0x5f
   16772:	60e6      	str	r6, [r4, #12]
   16774:	d1d7      	bne.n	16726 <d_encoding+0xda>
   16776:	1e45      	subs	r5, r0, #1
   16778:	f04f 0800 	mov.w	r8, #0
   1677c:	f04f 0939 	mov.w	r9, #57	; 0x39
   16780:	7833      	ldrb	r3, [r6, #0]
   16782:	2b00      	cmp	r3, #0
   16784:	f000 8206 	beq.w	16b94 <d_encoding+0x548>
   16788:	2b24      	cmp	r3, #36	; 0x24
   1678a:	f000 81c5 	beq.w	16b18 <d_encoding+0x4cc>
   1678e:	2700      	movs	r7, #0
   16790:	07e8      	lsls	r0, r5, #31
   16792:	4633      	mov	r3, r6
   16794:	d405      	bmi.n	167a2 <d_encoding+0x156>
   16796:	2701      	movs	r7, #1
   16798:	42af      	cmp	r7, r5
   1679a:	db0b      	blt.n	167b4 <d_encoding+0x168>
   1679c:	e00e      	b.n	167bc <d_encoding+0x170>
   1679e:	2a24      	cmp	r2, #36	; 0x24
   167a0:	d00c      	beq.n	167bc <d_encoding+0x170>
   167a2:	3701      	adds	r7, #1
   167a4:	42af      	cmp	r7, r5
   167a6:	da09      	bge.n	167bc <d_encoding+0x170>
   167a8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   167ac:	b132      	cbz	r2, 167bc <d_encoding+0x170>
   167ae:	2a24      	cmp	r2, #36	; 0x24
   167b0:	d004      	beq.n	167bc <d_encoding+0x170>
   167b2:	3701      	adds	r7, #1
   167b4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   167b8:	2a00      	cmp	r2, #0
   167ba:	d1f0      	bne.n	1679e <d_encoding+0x152>
   167bc:	4631      	mov	r1, r6
   167be:	4620      	mov	r0, r4
   167c0:	463a      	mov	r2, r7
   167c2:	f7fe fd19 	bl	151f8 <d_make_name>
   167c6:	68e3      	ldr	r3, [r4, #12]
   167c8:	19de      	adds	r6, r3, r7
   167ca:	60e6      	str	r6, [r4, #12]
   167cc:	4603      	mov	r3, r0
   167ce:	2800      	cmp	r0, #0
   167d0:	f000 81ca 	beq.w	16b68 <d_encoding+0x51c>
   167d4:	1bed      	subs	r5, r5, r7
   167d6:	f1b8 0f00 	cmp.w	r8, #0
   167da:	f000 81af 	beq.w	16b3c <d_encoding+0x4f0>
   167de:	4642      	mov	r2, r8
   167e0:	4620      	mov	r0, r4
   167e2:	2138      	movs	r1, #56	; 0x38
   167e4:	f7fe fcb6 	bl	15154 <d_make_comp>
   167e8:	4680      	mov	r8, r0
   167ea:	2800      	cmp	r0, #0
   167ec:	f000 81bc 	beq.w	16b68 <d_encoding+0x51c>
   167f0:	2d00      	cmp	r5, #0
   167f2:	dcc5      	bgt.n	16780 <d_encoding+0x134>
   167f4:	4620      	mov	r0, r4
   167f6:	2137      	movs	r1, #55	; 0x37
   167f8:	4642      	mov	r2, r8
   167fa:	2300      	movs	r3, #0
   167fc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16800:	f7fe bca8 	b.w	15154 <d_make_comp>
   16804:	1c53      	adds	r3, r2, #1
   16806:	60c3      	str	r3, [r0, #12]
   16808:	7855      	ldrb	r5, [r2, #1]
   1680a:	2d00      	cmp	r5, #0
   1680c:	f43f af7f 	beq.w	1670e <d_encoding+0xc2>
   16810:	3d43      	subs	r5, #67	; 0x43
   16812:	3202      	adds	r2, #2
   16814:	60c2      	str	r2, [r0, #12]
   16816:	2d33      	cmp	r5, #51	; 0x33
   16818:	d885      	bhi.n	16726 <d_encoding+0xda>
   1681a:	a301      	add	r3, pc, #4	; (adr r3, 16820 <d_encoding+0x1d4>)
   1681c:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   16820:	00016add 	.word	0x00016add
   16824:	00016727 	.word	0x00016727
   16828:	00016727 	.word	0x00016727
   1682c:	00016ac9 	.word	0x00016ac9
   16830:	00016727 	.word	0x00016727
   16834:	00016727 	.word	0x00016727
   16838:	00016ab5 	.word	0x00016ab5
   1683c:	00016aa1 	.word	0x00016aa1
   16840:	00016727 	.word	0x00016727
   16844:	00016727 	.word	0x00016727
   16848:	00016727 	.word	0x00016727
   1684c:	00016727 	.word	0x00016727
   16850:	00016727 	.word	0x00016727
   16854:	00016727 	.word	0x00016727
   16858:	00016727 	.word	0x00016727
   1685c:	00016727 	.word	0x00016727
   16860:	00016a8d 	.word	0x00016a8d
   16864:	00016a75 	.word	0x00016a75
   16868:	00016727 	.word	0x00016727
   1686c:	00016a5d 	.word	0x00016a5d
   16870:	00016727 	.word	0x00016727
   16874:	00016727 	.word	0x00016727
   16878:	00016727 	.word	0x00016727
   1687c:	00016727 	.word	0x00016727
   16880:	00016727 	.word	0x00016727
   16884:	00016727 	.word	0x00016727
   16888:	00016727 	.word	0x00016727
   1688c:	00016727 	.word	0x00016727
   16890:	00016727 	.word	0x00016727
   16894:	00016727 	.word	0x00016727
   16898:	00016727 	.word	0x00016727
   1689c:	00016727 	.word	0x00016727
   168a0:	00016a2b 	.word	0x00016a2b
   168a4:	00016727 	.word	0x00016727
   168a8:	00016727 	.word	0x00016727
   168ac:	00016727 	.word	0x00016727
   168b0:	00016727 	.word	0x00016727
   168b4:	00016a07 	.word	0x00016a07
   168b8:	00016727 	.word	0x00016727
   168bc:	00016727 	.word	0x00016727
   168c0:	00016727 	.word	0x00016727
   168c4:	00016727 	.word	0x00016727
   168c8:	00016727 	.word	0x00016727
   168cc:	00016727 	.word	0x00016727
   168d0:	00016727 	.word	0x00016727
   168d4:	00016727 	.word	0x00016727
   168d8:	00016727 	.word	0x00016727
   168dc:	00016727 	.word	0x00016727
   168e0:	00016727 	.word	0x00016727
   168e4:	00016727 	.word	0x00016727
   168e8:	00016727 	.word	0x00016727
   168ec:	000169e3 	.word	0x000169e3
   168f0:	685b      	ldr	r3, [r3, #4]
   168f2:	2b00      	cmp	r3, #0
   168f4:	d065      	beq.n	169c2 <d_encoding+0x376>
   168f6:	7819      	ldrb	r1, [r3, #0]
   168f8:	1e48      	subs	r0, r1, #1
   168fa:	282d      	cmp	r0, #45	; 0x2d
   168fc:	d861      	bhi.n	169c2 <d_encoding+0x376>
   168fe:	a101      	add	r1, pc, #4	; (adr r1, 16904 <d_encoding+0x2b8>)
   16900:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
   16904:	000169bd 	.word	0x000169bd
   16908:	000169bd 	.word	0x000169bd
   1690c:	000169c3 	.word	0x000169c3
   16910:	000169c3 	.word	0x000169c3
   16914:	000169c3 	.word	0x000169c3
   16918:	000169c3 	.word	0x000169c3
   1691c:	000166bb 	.word	0x000166bb
   16920:	000166bb 	.word	0x000166bb
   16924:	000169c3 	.word	0x000169c3
   16928:	000169c3 	.word	0x000169c3
   1692c:	000169c3 	.word	0x000169c3
   16930:	000169c3 	.word	0x000169c3
   16934:	000169c3 	.word	0x000169c3
   16938:	000169c3 	.word	0x000169c3
   1693c:	000169c3 	.word	0x000169c3
   16940:	000169c3 	.word	0x000169c3
   16944:	000169c3 	.word	0x000169c3
   16948:	000169c3 	.word	0x000169c3
   1694c:	000169c3 	.word	0x000169c3
   16950:	000169c3 	.word	0x000169c3
   16954:	000169c3 	.word	0x000169c3
   16958:	000169c3 	.word	0x000169c3
   1695c:	000169c3 	.word	0x000169c3
   16960:	000169c3 	.word	0x000169c3
   16964:	000169c3 	.word	0x000169c3
   16968:	000169c3 	.word	0x000169c3
   1696c:	000169c3 	.word	0x000169c3
   16970:	000169c3 	.word	0x000169c3
   16974:	000169c3 	.word	0x000169c3
   16978:	000169c3 	.word	0x000169c3
   1697c:	000169c3 	.word	0x000169c3
   16980:	000169c3 	.word	0x000169c3
   16984:	000169c3 	.word	0x000169c3
   16988:	000169c3 	.word	0x000169c3
   1698c:	000169c3 	.word	0x000169c3
   16990:	000169c3 	.word	0x000169c3
   16994:	000169c3 	.word	0x000169c3
   16998:	000169c3 	.word	0x000169c3
   1699c:	000169c3 	.word	0x000169c3
   169a0:	000169c3 	.word	0x000169c3
   169a4:	000169c3 	.word	0x000169c3
   169a8:	000169c3 	.word	0x000169c3
   169ac:	000169c3 	.word	0x000169c3
   169b0:	000169c3 	.word	0x000169c3
   169b4:	000169c3 	.word	0x000169c3
   169b8:	000166bb 	.word	0x000166bb
   169bc:	689b      	ldr	r3, [r3, #8]
   169be:	2b00      	cmp	r3, #0
   169c0:	d199      	bne.n	168f6 <d_encoding+0x2aa>
   169c2:	2101      	movs	r1, #1
   169c4:	e67a      	b.n	166bc <d_encoding+0x70>
   169c6:	2d41      	cmp	r5, #65	; 0x41
   169c8:	f47f aead 	bne.w	16726 <d_encoding+0xda>
   169cc:	2100      	movs	r1, #0
   169ce:	f7ff fe3d 	bl	1664c <d_encoding>
   169d2:	2115      	movs	r1, #21
   169d4:	2300      	movs	r3, #0
   169d6:	4602      	mov	r2, r0
   169d8:	4620      	mov	r0, r4
   169da:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   169de:	f7fe bbb9 	b.w	15154 <d_make_comp>
   169e2:	2176      	movs	r1, #118	; 0x76
   169e4:	f7fe fe88 	bl	156f8 <d_call_offset>
   169e8:	2800      	cmp	r0, #0
   169ea:	f000 80bd 	beq.w	16b68 <d_encoding+0x51c>
   169ee:	2100      	movs	r1, #0
   169f0:	4620      	mov	r0, r4
   169f2:	f7ff fe2b 	bl	1664c <d_encoding>
   169f6:	2110      	movs	r1, #16
   169f8:	2300      	movs	r3, #0
   169fa:	4602      	mov	r2, r0
   169fc:	4620      	mov	r0, r4
   169fe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16a02:	f7fe bba7 	b.w	15154 <d_make_comp>
   16a06:	2168      	movs	r1, #104	; 0x68
   16a08:	f7fe fe76 	bl	156f8 <d_call_offset>
   16a0c:	2800      	cmp	r0, #0
   16a0e:	f000 80ab 	beq.w	16b68 <d_encoding+0x51c>
   16a12:	2100      	movs	r1, #0
   16a14:	4620      	mov	r0, r4
   16a16:	f7ff fe19 	bl	1664c <d_encoding>
   16a1a:	210f      	movs	r1, #15
   16a1c:	2300      	movs	r3, #0
   16a1e:	4602      	mov	r2, r0
   16a20:	4620      	mov	r0, r4
   16a22:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16a26:	f7fe bb95 	b.w	15154 <d_make_comp>
   16a2a:	2100      	movs	r1, #0
   16a2c:	f7fe fe64 	bl	156f8 <d_call_offset>
   16a30:	2800      	cmp	r0, #0
   16a32:	f000 8099 	beq.w	16b68 <d_encoding+0x51c>
   16a36:	4620      	mov	r0, r4
   16a38:	2100      	movs	r1, #0
   16a3a:	f7fe fe5d 	bl	156f8 <d_call_offset>
   16a3e:	2800      	cmp	r0, #0
   16a40:	f000 8092 	beq.w	16b68 <d_encoding+0x51c>
   16a44:	2100      	movs	r1, #0
   16a46:	4620      	mov	r0, r4
   16a48:	f7ff fe00 	bl	1664c <d_encoding>
   16a4c:	2111      	movs	r1, #17
   16a4e:	2300      	movs	r3, #0
   16a50:	4602      	mov	r2, r0
   16a52:	4620      	mov	r0, r4
   16a54:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16a58:	f7fe bb7c 	b.w	15154 <d_make_comp>
   16a5c:	310f      	adds	r1, #15
   16a5e:	6301      	str	r1, [r0, #48]	; 0x30
   16a60:	f7fe fec6 	bl	157f0 <d_type>
   16a64:	2109      	movs	r1, #9
   16a66:	2300      	movs	r3, #0
   16a68:	4602      	mov	r2, r0
   16a6a:	4620      	mov	r0, r4
   16a6c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16a70:	f7fe bb70 	b.w	15154 <d_make_comp>
   16a74:	310a      	adds	r1, #10
   16a76:	6301      	str	r1, [r0, #48]	; 0x30
   16a78:	f7fe feba 	bl	157f0 <d_type>
   16a7c:	210a      	movs	r1, #10
   16a7e:	2300      	movs	r3, #0
   16a80:	4602      	mov	r2, r0
   16a82:	4620      	mov	r0, r4
   16a84:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16a88:	f7fe bb64 	b.w	15154 <d_make_comp>
   16a8c:	f7fe feb0 	bl	157f0 <d_type>
   16a90:	210d      	movs	r1, #13
   16a92:	2300      	movs	r3, #0
   16a94:	4602      	mov	r2, r0
   16a96:	4620      	mov	r0, r4
   16a98:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16a9c:	f7fe bb5a 	b.w	15154 <d_make_comp>
   16aa0:	f7fe fea6 	bl	157f0 <d_type>
   16aa4:	2112      	movs	r1, #18
   16aa6:	2300      	movs	r3, #0
   16aa8:	4602      	mov	r2, r0
   16aaa:	4620      	mov	r0, r4
   16aac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16ab0:	f7fe bb50 	b.w	15154 <d_make_comp>
   16ab4:	f7fe fe9c 	bl	157f0 <d_type>
   16ab8:	210c      	movs	r1, #12
   16aba:	2300      	movs	r3, #0
   16abc:	4602      	mov	r2, r0
   16abe:	4620      	mov	r0, r4
   16ac0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16ac4:	f7fe bb46 	b.w	15154 <d_make_comp>
   16ac8:	f7fe fe92 	bl	157f0 <d_type>
   16acc:	210e      	movs	r1, #14
   16ace:	2300      	movs	r3, #0
   16ad0:	4602      	mov	r2, r0
   16ad2:	4620      	mov	r0, r4
   16ad4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16ad8:	f7fe bb3c 	b.w	15154 <d_make_comp>
   16adc:	f7fe fe88 	bl	157f0 <d_type>
   16ae0:	4606      	mov	r6, r0
   16ae2:	4620      	mov	r0, r4
   16ae4:	f7fe fbae 	bl	15244 <d_number>
   16ae8:	2800      	cmp	r0, #0
   16aea:	f6ff ae1c 	blt.w	16726 <d_encoding+0xda>
   16aee:	68e3      	ldr	r3, [r4, #12]
   16af0:	7818      	ldrb	r0, [r3, #0]
   16af2:	285f      	cmp	r0, #95	; 0x5f
   16af4:	f47f ae17 	bne.w	16726 <d_encoding+0xda>
   16af8:	1c59      	adds	r1, r3, #1
   16afa:	4620      	mov	r0, r4
   16afc:	60e1      	str	r1, [r4, #12]
   16afe:	f7fe fe77 	bl	157f0 <d_type>
   16b02:	6b25      	ldr	r5, [r4, #48]	; 0x30
   16b04:	210b      	movs	r1, #11
   16b06:	4633      	mov	r3, r6
   16b08:	3505      	adds	r5, #5
   16b0a:	6325      	str	r5, [r4, #48]	; 0x30
   16b0c:	4602      	mov	r2, r0
   16b0e:	4620      	mov	r0, r4
   16b10:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16b14:	f7fe bb1e 	b.w	15154 <d_make_comp>
   16b18:	7873      	ldrb	r3, [r6, #1]
   16b1a:	2b53      	cmp	r3, #83	; 0x53
   16b1c:	d038      	beq.n	16b90 <d_encoding+0x544>
   16b1e:	2b5f      	cmp	r3, #95	; 0x5f
   16b20:	d034      	beq.n	16b8c <d_encoding+0x540>
   16b22:	2b24      	cmp	r3, #36	; 0x24
   16b24:	f47f adff 	bne.w	16726 <d_encoding+0xda>
   16b28:	461e      	mov	r6, r3
   16b2a:	6962      	ldr	r2, [r4, #20]
   16b2c:	69a0      	ldr	r0, [r4, #24]
   16b2e:	4282      	cmp	r2, r0
   16b30:	db1c      	blt.n	16b6c <d_encoding+0x520>
   16b32:	68e2      	ldr	r2, [r4, #12]
   16b34:	2500      	movs	r5, #0
   16b36:	1c91      	adds	r1, r2, #2
   16b38:	60e1      	str	r1, [r4, #12]
   16b3a:	e5e8      	b.n	1670e <d_encoding+0xc2>
   16b3c:	4698      	mov	r8, r3
   16b3e:	e657      	b.n	167f0 <d_encoding+0x1a4>
   16b40:	f7ff fc1e 	bl	16380 <d_name>
   16b44:	2113      	movs	r1, #19
   16b46:	2300      	movs	r3, #0
   16b48:	4602      	mov	r2, r0
   16b4a:	4620      	mov	r0, r4
   16b4c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16b50:	f7fe bb00 	b.w	15154 <d_make_comp>
   16b54:	f7ff fc14 	bl	16380 <d_name>
   16b58:	2114      	movs	r1, #20
   16b5a:	2300      	movs	r3, #0
   16b5c:	4602      	mov	r2, r0
   16b5e:	4620      	mov	r0, r4
   16b60:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16b64:	f7fe baf6 	b.w	15154 <d_make_comp>
   16b68:	4605      	mov	r5, r0
   16b6a:	e5d0      	b.n	1670e <d_encoding+0xc2>
   16b6c:	6921      	ldr	r1, [r4, #16]
   16b6e:	eb02 0042 	add.w	r0, r2, r2, lsl #1
   16b72:	1c53      	adds	r3, r2, #1
   16b74:	6163      	str	r3, [r4, #20]
   16b76:	eb11 0380 	adds.w	r3, r1, r0, lsl #2
   16b7a:	d0da      	beq.n	16b32 <d_encoding+0x4e6>
   16b7c:	605e      	str	r6, [r3, #4]
   16b7e:	3d02      	subs	r5, #2
   16b80:	68e6      	ldr	r6, [r4, #12]
   16b82:	f801 9020 	strb.w	r9, [r1, r0, lsl #2]
   16b86:	3602      	adds	r6, #2
   16b88:	60e6      	str	r6, [r4, #12]
   16b8a:	e624      	b.n	167d6 <d_encoding+0x18a>
   16b8c:	262e      	movs	r6, #46	; 0x2e
   16b8e:	e7cc      	b.n	16b2a <d_encoding+0x4de>
   16b90:	262f      	movs	r6, #47	; 0x2f
   16b92:	e7ca      	b.n	16b2a <d_encoding+0x4de>
   16b94:	461d      	mov	r5, r3
   16b96:	e5ba      	b.n	1670e <d_encoding+0xc2>

00016b98 <d_mangled_name>:
   16b98:	68c2      	ldr	r2, [r0, #12]
   16b9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16b9c:	4604      	mov	r4, r0
   16b9e:	7813      	ldrb	r3, [r2, #0]
   16ba0:	460e      	mov	r6, r1
   16ba2:	2b5f      	cmp	r3, #95	; 0x5f
   16ba4:	d07d      	beq.n	16ca2 <d_mangled_name+0x10a>
   16ba6:	b909      	cbnz	r1, 16bac <d_mangled_name+0x14>
   16ba8:	2b5a      	cmp	r3, #90	; 0x5a
   16baa:	d002      	beq.n	16bb2 <d_mangled_name+0x1a>
   16bac:	2500      	movs	r5, #0
   16bae:	4628      	mov	r0, r5
   16bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16bb2:	3201      	adds	r2, #1
   16bb4:	4620      	mov	r0, r4
   16bb6:	60e2      	str	r2, [r4, #12]
   16bb8:	4631      	mov	r1, r6
   16bba:	f7ff fd47 	bl	1664c <d_encoding>
   16bbe:	4605      	mov	r5, r0
   16bc0:	2e00      	cmp	r6, #0
   16bc2:	d0f4      	beq.n	16bae <d_mangled_name+0x16>
   16bc4:	68a3      	ldr	r3, [r4, #8]
   16bc6:	07db      	lsls	r3, r3, #31
   16bc8:	d5f1      	bpl.n	16bae <d_mangled_name+0x16>
   16bca:	68e1      	ldr	r1, [r4, #12]
   16bcc:	780a      	ldrb	r2, [r1, #0]
   16bce:	2a2e      	cmp	r2, #46	; 0x2e
   16bd0:	d1ed      	bne.n	16bae <d_mangled_name+0x16>
   16bd2:	784b      	ldrb	r3, [r1, #1]
   16bd4:	f1a3 0e5f 	sub.w	lr, r3, #95	; 0x5f
   16bd8:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   16bdc:	f1de 0000 	rsbs	r0, lr, #0
   16be0:	eb40 0c0e 	adc.w	ip, r0, lr
   16be4:	fa5f fe82 	uxtb.w	lr, r2
   16be8:	f1be 0f19 	cmp.w	lr, #25
   16bec:	bf8c      	ite	hi
   16bee:	4660      	movhi	r0, ip
   16bf0:	f04c 0001 	orrls.w	r0, ip, #1
   16bf4:	2800      	cmp	r0, #0
   16bf6:	d12c      	bne.n	16c52 <d_mangled_name+0xba>
   16bf8:	3b30      	subs	r3, #48	; 0x30
   16bfa:	b2db      	uxtb	r3, r3
   16bfc:	2b09      	cmp	r3, #9
   16bfe:	d8d6      	bhi.n	16bae <d_mangled_name+0x16>
   16c00:	780b      	ldrb	r3, [r1, #0]
   16c02:	460a      	mov	r2, r1
   16c04:	2b2e      	cmp	r3, #46	; 0x2e
   16c06:	d117      	bne.n	16c38 <d_mangled_name+0xa0>
   16c08:	7850      	ldrb	r0, [r2, #1]
   16c0a:	3830      	subs	r0, #48	; 0x30
   16c0c:	b2c3      	uxtb	r3, r0
   16c0e:	2b09      	cmp	r3, #9
   16c10:	d812      	bhi.n	16c38 <d_mangled_name+0xa0>
   16c12:	7893      	ldrb	r3, [r2, #2]
   16c14:	3202      	adds	r2, #2
   16c16:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
   16c1a:	fa5f f08c 	uxtb.w	r0, ip
   16c1e:	2809      	cmp	r0, #9
   16c20:	d8f0      	bhi.n	16c04 <d_mangled_name+0x6c>
   16c22:	4610      	mov	r0, r2
   16c24:	3001      	adds	r0, #1
   16c26:	4602      	mov	r2, r0
   16c28:	7803      	ldrb	r3, [r0, #0]
   16c2a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   16c2e:	b2f6      	uxtb	r6, r6
   16c30:	2e09      	cmp	r6, #9
   16c32:	d9f7      	bls.n	16c24 <d_mangled_name+0x8c>
   16c34:	2b2e      	cmp	r3, #46	; 0x2e
   16c36:	d0e7      	beq.n	16c08 <d_mangled_name+0x70>
   16c38:	60e2      	str	r2, [r4, #12]
   16c3a:	4620      	mov	r0, r4
   16c3c:	1a52      	subs	r2, r2, r1
   16c3e:	f7fe fadb 	bl	151f8 <d_make_name>
   16c42:	462a      	mov	r2, r5
   16c44:	2142      	movs	r1, #66	; 0x42
   16c46:	4603      	mov	r3, r0
   16c48:	4620      	mov	r0, r4
   16c4a:	f7fe fa83 	bl	15154 <d_make_comp>
   16c4e:	4605      	mov	r5, r0
   16c50:	e7bb      	b.n	16bca <d_mangled_name+0x32>
   16c52:	788b      	ldrb	r3, [r1, #2]
   16c54:	1c8a      	adds	r2, r1, #2
   16c56:	f1a3 005f 	sub.w	r0, r3, #95	; 0x5f
   16c5a:	f1a3 0661 	sub.w	r6, r3, #97	; 0x61
   16c5e:	f1d0 0e00 	rsbs	lr, r0, #0
   16c62:	eb4e 0000 	adc.w	r0, lr, r0
   16c66:	b2f6      	uxtb	r6, r6
   16c68:	2e19      	cmp	r6, #25
   16c6a:	bf98      	it	ls
   16c6c:	f040 0001 	orrls.w	r0, r0, #1
   16c70:	2800      	cmp	r0, #0
   16c72:	d0c7      	beq.n	16c04 <d_mangled_name+0x6c>
   16c74:	4610      	mov	r0, r2
   16c76:	3001      	adds	r0, #1
   16c78:	4602      	mov	r2, r0
   16c7a:	7803      	ldrb	r3, [r0, #0]
   16c7c:	f1a3 0661 	sub.w	r6, r3, #97	; 0x61
   16c80:	f1a3 0e5f 	sub.w	lr, r3, #95	; 0x5f
   16c84:	f1de 0700 	rsbs	r7, lr, #0
   16c88:	eb47 070e 	adc.w	r7, r7, lr
   16c8c:	fa5f fc86 	uxtb.w	ip, r6
   16c90:	f1bc 0f19 	cmp.w	ip, #25
   16c94:	bf8c      	ite	hi
   16c96:	463e      	movhi	r6, r7
   16c98:	f047 0601 	orrls.w	r6, r7, #1
   16c9c:	2e00      	cmp	r6, #0
   16c9e:	d1ea      	bne.n	16c76 <d_mangled_name+0xde>
   16ca0:	e7b0      	b.n	16c04 <d_mangled_name+0x6c>
   16ca2:	1c51      	adds	r1, r2, #1
   16ca4:	60c1      	str	r1, [r0, #12]
   16ca6:	7853      	ldrb	r3, [r2, #1]
   16ca8:	460a      	mov	r2, r1
   16caa:	e77d      	b.n	16ba8 <d_mangled_name+0x10>

00016cac <d_expr_primary>:
   16cac:	68c3      	ldr	r3, [r0, #12]
   16cae:	b570      	push	{r4, r5, r6, lr}
   16cb0:	4604      	mov	r4, r0
   16cb2:	781a      	ldrb	r2, [r3, #0]
   16cb4:	2a4c      	cmp	r2, #76	; 0x4c
   16cb6:	d001      	beq.n	16cbc <d_expr_primary+0x10>
   16cb8:	2000      	movs	r0, #0
   16cba:	bd70      	pop	{r4, r5, r6, pc}
   16cbc:	1c59      	adds	r1, r3, #1
   16cbe:	60c1      	str	r1, [r0, #12]
   16cc0:	f893 c001 	ldrb.w	ip, [r3, #1]
   16cc4:	f1ac 025f 	sub.w	r2, ip, #95	; 0x5f
   16cc8:	f1d2 0e00 	rsbs	lr, r2, #0
   16ccc:	eb4e 0102 	adc.w	r1, lr, r2
   16cd0:	f1bc 0f5a 	cmp.w	ip, #90	; 0x5a
   16cd4:	bf14      	ite	ne
   16cd6:	460b      	movne	r3, r1
   16cd8:	f041 0301 	orreq.w	r3, r1, #1
   16cdc:	2b00      	cmp	r3, #0
   16cde:	d128      	bne.n	16d32 <d_expr_primary+0x86>
   16ce0:	f7fe fd86 	bl	157f0 <d_type>
   16ce4:	4605      	mov	r5, r0
   16ce6:	b318      	cbz	r0, 16d30 <d_expr_primary+0x84>
   16ce8:	7806      	ldrb	r6, [r0, #0]
   16cea:	2e23      	cmp	r6, #35	; 0x23
   16cec:	d031      	beq.n	16d52 <d_expr_primary+0xa6>
   16cee:	68e1      	ldr	r1, [r4, #12]
   16cf0:	2635      	movs	r6, #53	; 0x35
   16cf2:	7808      	ldrb	r0, [r1, #0]
   16cf4:	286e      	cmp	r0, #110	; 0x6e
   16cf6:	d026      	beq.n	16d46 <d_expr_primary+0x9a>
   16cf8:	2845      	cmp	r0, #69	; 0x45
   16cfa:	d033      	beq.n	16d64 <d_expr_primary+0xb8>
   16cfc:	460b      	mov	r3, r1
   16cfe:	460a      	mov	r2, r1
   16d00:	b908      	cbnz	r0, 16d06 <d_expr_primary+0x5a>
   16d02:	e015      	b.n	16d30 <d_expr_primary+0x84>
   16d04:	b1a0      	cbz	r0, 16d30 <d_expr_primary+0x84>
   16d06:	3201      	adds	r2, #1
   16d08:	60e2      	str	r2, [r4, #12]
   16d0a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   16d0e:	2845      	cmp	r0, #69	; 0x45
   16d10:	d1f8      	bne.n	16d04 <d_expr_primary+0x58>
   16d12:	1a52      	subs	r2, r2, r1
   16d14:	4620      	mov	r0, r4
   16d16:	f7fe fa6f 	bl	151f8 <d_make_name>
   16d1a:	4631      	mov	r1, r6
   16d1c:	462a      	mov	r2, r5
   16d1e:	4603      	mov	r3, r0
   16d20:	4620      	mov	r0, r4
   16d22:	f7fe fa17 	bl	15154 <d_make_comp>
   16d26:	68e3      	ldr	r3, [r4, #12]
   16d28:	7819      	ldrb	r1, [r3, #0]
   16d2a:	2945      	cmp	r1, #69	; 0x45
   16d2c:	d008      	beq.n	16d40 <d_expr_primary+0x94>
   16d2e:	2000      	movs	r0, #0
   16d30:	bd70      	pop	{r4, r5, r6, pc}
   16d32:	2100      	movs	r1, #0
   16d34:	f7ff ff30 	bl	16b98 <d_mangled_name>
   16d38:	68e3      	ldr	r3, [r4, #12]
   16d3a:	7819      	ldrb	r1, [r3, #0]
   16d3c:	2945      	cmp	r1, #69	; 0x45
   16d3e:	d1f6      	bne.n	16d2e <d_expr_primary+0x82>
   16d40:	1c5a      	adds	r2, r3, #1
   16d42:	60e2      	str	r2, [r4, #12]
   16d44:	bd70      	pop	{r4, r5, r6, pc}
   16d46:	1c4b      	adds	r3, r1, #1
   16d48:	2636      	movs	r6, #54	; 0x36
   16d4a:	60e3      	str	r3, [r4, #12]
   16d4c:	7848      	ldrb	r0, [r1, #1]
   16d4e:	4619      	mov	r1, r3
   16d50:	e7d2      	b.n	16cf8 <d_expr_primary+0x4c>
   16d52:	6843      	ldr	r3, [r0, #4]
   16d54:	7c18      	ldrb	r0, [r3, #16]
   16d56:	2800      	cmp	r0, #0
   16d58:	d0c9      	beq.n	16cee <d_expr_primary+0x42>
   16d5a:	6b22      	ldr	r2, [r4, #48]	; 0x30
   16d5c:	6859      	ldr	r1, [r3, #4]
   16d5e:	1a53      	subs	r3, r2, r1
   16d60:	6323      	str	r3, [r4, #48]	; 0x30
   16d62:	e7c4      	b.n	16cee <d_expr_primary+0x42>
   16d64:	2200      	movs	r2, #0
   16d66:	e7d5      	b.n	16d14 <d_expr_primary+0x68>

00016d68 <d_expression>:
   16d68:	68c2      	ldr	r2, [r0, #12]
   16d6a:	b5f0      	push	{r4, r5, r6, r7, lr}
   16d6c:	4604      	mov	r4, r0
   16d6e:	7813      	ldrb	r3, [r2, #0]
   16d70:	b083      	sub	sp, #12
   16d72:	2b4c      	cmp	r3, #76	; 0x4c
   16d74:	d060      	beq.n	16e38 <d_expression+0xd0>
   16d76:	2b54      	cmp	r3, #84	; 0x54
   16d78:	d075      	beq.n	16e66 <d_expression+0xfe>
   16d7a:	2b73      	cmp	r3, #115	; 0x73
   16d7c:	d02b      	beq.n	16dd6 <d_expression+0x6e>
   16d7e:	2b66      	cmp	r3, #102	; 0x66
   16d80:	d012      	beq.n	16da8 <d_expression+0x40>
   16d82:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   16d86:	fa5f fc8e 	uxtb.w	ip, lr
   16d8a:	f1bc 0f09 	cmp.w	ip, #9
   16d8e:	d84b      	bhi.n	16e28 <d_expression+0xc0>
   16d90:	4620      	mov	r0, r4
   16d92:	f7ff f99b 	bl	160cc <d_unqualified_name>
   16d96:	4605      	mov	r5, r0
   16d98:	b118      	cbz	r0, 16da2 <d_expression+0x3a>
   16d9a:	68e0      	ldr	r0, [r4, #12]
   16d9c:	7801      	ldrb	r1, [r0, #0]
   16d9e:	2949      	cmp	r1, #73	; 0x49
   16da0:	d066      	beq.n	16e70 <d_expression+0x108>
   16da2:	4628      	mov	r0, r5
   16da4:	b003      	add	sp, #12
   16da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16da8:	7855      	ldrb	r5, [r2, #1]
   16daa:	2d70      	cmp	r5, #112	; 0x70
   16dac:	f000 80db 	beq.w	16f66 <d_expression+0x1fe>
   16db0:	4620      	mov	r0, r4
   16db2:	f7ff f90d 	bl	15fd0 <d_operator_name>
   16db6:	4605      	mov	r5, r0
   16db8:	2800      	cmp	r0, #0
   16dba:	d0f2      	beq.n	16da2 <d_expression+0x3a>
   16dbc:	7806      	ldrb	r6, [r0, #0]
   16dbe:	2e2c      	cmp	r6, #44	; 0x2c
   16dc0:	d03f      	beq.n	16e42 <d_expression+0xda>
   16dc2:	2e2d      	cmp	r6, #45	; 0x2d
   16dc4:	d01a      	beq.n	16dfc <d_expression+0x94>
   16dc6:	2e2e      	cmp	r6, #46	; 0x2e
   16dc8:	f000 80e6 	beq.w	16f98 <d_expression+0x230>
   16dcc:	2e2c      	cmp	r6, #44	; 0x2c
   16dce:	f000 80b1 	beq.w	16f34 <d_expression+0x1cc>
   16dd2:	2500      	movs	r5, #0
   16dd4:	e7e5      	b.n	16da2 <d_expression+0x3a>
   16dd6:	7853      	ldrb	r3, [r2, #1]
   16dd8:	2b72      	cmp	r3, #114	; 0x72
   16dda:	f000 80ae 	beq.w	16f3a <d_expression+0x1d2>
   16dde:	2b70      	cmp	r3, #112	; 0x70
   16de0:	d1e6      	bne.n	16db0 <d_expression+0x48>
   16de2:	1c91      	adds	r1, r2, #2
   16de4:	60c1      	str	r1, [r0, #12]
   16de6:	f7ff ffbf 	bl	16d68 <d_expression>
   16dea:	2141      	movs	r1, #65	; 0x41
   16dec:	2300      	movs	r3, #0
   16dee:	4602      	mov	r2, r0
   16df0:	4620      	mov	r0, r4
   16df2:	b003      	add	sp, #12
   16df4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   16df8:	f7fe b9ac 	b.w	15154 <d_make_comp>
   16dfc:	6843      	ldr	r3, [r0, #4]
   16dfe:	2b02      	cmp	r3, #2
   16e00:	d062      	beq.n	16ec8 <d_expression+0x160>
   16e02:	2b03      	cmp	r3, #3
   16e04:	d040      	beq.n	16e88 <d_expression+0x120>
   16e06:	2b01      	cmp	r3, #1
   16e08:	d1e3      	bne.n	16dd2 <d_expression+0x6a>
   16e0a:	2e2e      	cmp	r6, #46	; 0x2e
   16e0c:	f000 80c4 	beq.w	16f98 <d_expression+0x230>
   16e10:	4620      	mov	r0, r4
   16e12:	f7ff ffa9 	bl	16d68 <d_expression>
   16e16:	4603      	mov	r3, r0
   16e18:	4620      	mov	r0, r4
   16e1a:	212f      	movs	r1, #47	; 0x2f
   16e1c:	462a      	mov	r2, r5
   16e1e:	b003      	add	sp, #12
   16e20:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   16e24:	f7fe b996 	b.w	15154 <d_make_comp>
   16e28:	2b6f      	cmp	r3, #111	; 0x6f
   16e2a:	d1c1      	bne.n	16db0 <d_expression+0x48>
   16e2c:	7853      	ldrb	r3, [r2, #1]
   16e2e:	2b6e      	cmp	r3, #110	; 0x6e
   16e30:	d1be      	bne.n	16db0 <d_expression+0x48>
   16e32:	3202      	adds	r2, #2
   16e34:	60c2      	str	r2, [r0, #12]
   16e36:	e7ab      	b.n	16d90 <d_expression+0x28>
   16e38:	b003      	add	sp, #12
   16e3a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   16e3e:	f7ff bf35 	b.w	16cac <d_expr_primary>
   16e42:	6847      	ldr	r7, [r0, #4]
   16e44:	f64c 017c 	movw	r1, #51324	; 0xc87c
   16e48:	6b22      	ldr	r2, [r4, #48]	; 0x30
   16e4a:	f2c0 0102 	movt	r1, #2
   16e4e:	68bb      	ldr	r3, [r7, #8]
   16e50:	6838      	ldr	r0, [r7, #0]
   16e52:	3b02      	subs	r3, #2
   16e54:	18d3      	adds	r3, r2, r3
   16e56:	6323      	str	r3, [r4, #48]	; 0x30
   16e58:	f00a f954 	bl	21104 <strcmp>
   16e5c:	2800      	cmp	r0, #0
   16e5e:	f000 80a7 	beq.w	16fb0 <d_expression+0x248>
   16e62:	68fb      	ldr	r3, [r7, #12]
   16e64:	e7cb      	b.n	16dfe <d_expression+0x96>
   16e66:	b003      	add	sp, #12
   16e68:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   16e6c:	f7fe ba78 	b.w	15360 <d_template_param>
   16e70:	4620      	mov	r0, r4
   16e72:	f7ff fa2f 	bl	162d4 <d_template_args>
   16e76:	2104      	movs	r1, #4
   16e78:	462a      	mov	r2, r5
   16e7a:	4603      	mov	r3, r0
   16e7c:	4620      	mov	r0, r4
   16e7e:	b003      	add	sp, #12
   16e80:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   16e84:	f7fe b966 	b.w	15154 <d_make_comp>
   16e88:	4620      	mov	r0, r4
   16e8a:	f7ff ff6d 	bl	16d68 <d_expression>
   16e8e:	4606      	mov	r6, r0
   16e90:	4620      	mov	r0, r4
   16e92:	f7ff ff69 	bl	16d68 <d_expression>
   16e96:	4607      	mov	r7, r0
   16e98:	4620      	mov	r0, r4
   16e9a:	f7ff ff65 	bl	16d68 <d_expression>
   16e9e:	2134      	movs	r1, #52	; 0x34
   16ea0:	463a      	mov	r2, r7
   16ea2:	4603      	mov	r3, r0
   16ea4:	4620      	mov	r0, r4
   16ea6:	f7fe f955 	bl	15154 <d_make_comp>
   16eaa:	2133      	movs	r1, #51	; 0x33
   16eac:	4632      	mov	r2, r6
   16eae:	4603      	mov	r3, r0
   16eb0:	4620      	mov	r0, r4
   16eb2:	f7fe f94f 	bl	15154 <d_make_comp>
   16eb6:	2132      	movs	r1, #50	; 0x32
   16eb8:	462a      	mov	r2, r5
   16eba:	4603      	mov	r3, r0
   16ebc:	4620      	mov	r0, r4
   16ebe:	b003      	add	sp, #12
   16ec0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   16ec4:	f7fe b946 	b.w	15154 <d_make_comp>
   16ec8:	686e      	ldr	r6, [r5, #4]
   16eca:	4620      	mov	r0, r4
   16ecc:	6837      	ldr	r7, [r6, #0]
   16ece:	f7ff ff4b 	bl	16d68 <d_expression>
   16ed2:	f64c 0180 	movw	r1, #51328	; 0xc880
   16ed6:	f2c0 0102 	movt	r1, #2
   16eda:	4606      	mov	r6, r0
   16edc:	4638      	mov	r0, r7
   16ede:	f00a f911 	bl	21104 <strcmp>
   16ee2:	2800      	cmp	r0, #0
   16ee4:	d069      	beq.n	16fba <d_expression+0x252>
   16ee6:	f64c 0184 	movw	r1, #51332	; 0xc884
   16eea:	4638      	mov	r0, r7
   16eec:	f2c0 0102 	movt	r1, #2
   16ef0:	f00a f908 	bl	21104 <strcmp>
   16ef4:	b140      	cbz	r0, 16f08 <d_expression+0x1a0>
   16ef6:	f64c 0188 	movw	r1, #51336	; 0xc888
   16efa:	4638      	mov	r0, r7
   16efc:	f2c0 0102 	movt	r1, #2
   16f00:	f00a f900 	bl	21104 <strcmp>
   16f04:	2800      	cmp	r0, #0
   16f06:	d16e      	bne.n	16fe6 <d_expression+0x27e>
   16f08:	4620      	mov	r0, r4
   16f0a:	f7ff f8df 	bl	160cc <d_unqualified_name>
   16f0e:	68e1      	ldr	r1, [r4, #12]
   16f10:	4603      	mov	r3, r0
   16f12:	7808      	ldrb	r0, [r1, #0]
   16f14:	2849      	cmp	r0, #73	; 0x49
   16f16:	d06b      	beq.n	16ff0 <d_expression+0x288>
   16f18:	2131      	movs	r1, #49	; 0x31
   16f1a:	4632      	mov	r2, r6
   16f1c:	4620      	mov	r0, r4
   16f1e:	f7fe f919 	bl	15154 <d_make_comp>
   16f22:	2130      	movs	r1, #48	; 0x30
   16f24:	462a      	mov	r2, r5
   16f26:	4603      	mov	r3, r0
   16f28:	4620      	mov	r0, r4
   16f2a:	b003      	add	sp, #12
   16f2c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   16f30:	f7fe b910 	b.w	15154 <d_make_comp>
   16f34:	6847      	ldr	r7, [r0, #4]
   16f36:	68fb      	ldr	r3, [r7, #12]
   16f38:	e761      	b.n	16dfe <d_expression+0x96>
   16f3a:	3202      	adds	r2, #2
   16f3c:	60c2      	str	r2, [r0, #12]
   16f3e:	f7fe fc57 	bl	157f0 <d_type>
   16f42:	4605      	mov	r5, r0
   16f44:	4620      	mov	r0, r4
   16f46:	f7ff f8c1 	bl	160cc <d_unqualified_name>
   16f4a:	4606      	mov	r6, r0
   16f4c:	68e0      	ldr	r0, [r4, #12]
   16f4e:	7803      	ldrb	r3, [r0, #0]
   16f50:	4620      	mov	r0, r4
   16f52:	2b49      	cmp	r3, #73	; 0x49
   16f54:	d036      	beq.n	16fc4 <d_expression+0x25c>
   16f56:	2101      	movs	r1, #1
   16f58:	462a      	mov	r2, r5
   16f5a:	4633      	mov	r3, r6
   16f5c:	b003      	add	sp, #12
   16f5e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   16f62:	f7fe b8f7 	b.w	15154 <d_make_comp>
   16f66:	1c93      	adds	r3, r2, #2
   16f68:	60c3      	str	r3, [r0, #12]
   16f6a:	f7fe f9df 	bl	1532c <d_compact_number>
   16f6e:	2800      	cmp	r0, #0
   16f70:	f6ff af2f 	blt.w	16dd2 <d_expression+0x6a>
   16f74:	6963      	ldr	r3, [r4, #20]
   16f76:	69a2      	ldr	r2, [r4, #24]
   16f78:	4293      	cmp	r3, r2
   16f7a:	f6bf af2a 	bge.w	16dd2 <d_expression+0x6a>
   16f7e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   16f82:	6922      	ldr	r2, [r4, #16]
   16f84:	1c5d      	adds	r5, r3, #1
   16f86:	6165      	str	r5, [r4, #20]
   16f88:	008b      	lsls	r3, r1, #2
   16f8a:	18d5      	adds	r5, r2, r3
   16f8c:	f43f af09 	beq.w	16da2 <d_expression+0x3a>
   16f90:	6068      	str	r0, [r5, #4]
   16f92:	2006      	movs	r0, #6
   16f94:	54d0      	strb	r0, [r2, r3]
   16f96:	e704      	b.n	16da2 <d_expression+0x3a>
   16f98:	68e3      	ldr	r3, [r4, #12]
   16f9a:	7819      	ldrb	r1, [r3, #0]
   16f9c:	295f      	cmp	r1, #95	; 0x5f
   16f9e:	f47f af37 	bne.w	16e10 <d_expression+0xa8>
   16fa2:	1c5a      	adds	r2, r3, #1
   16fa4:	4620      	mov	r0, r4
   16fa6:	60e2      	str	r2, [r4, #12]
   16fa8:	f000 f830 	bl	1700c <d_exprlist>
   16fac:	4603      	mov	r3, r0
   16fae:	e733      	b.n	16e18 <d_expression+0xb0>
   16fb0:	4620      	mov	r0, r4
   16fb2:	f7fe fc1d 	bl	157f0 <d_type>
   16fb6:	4603      	mov	r3, r0
   16fb8:	e72e      	b.n	16e18 <d_expression+0xb0>
   16fba:	4620      	mov	r0, r4
   16fbc:	f000 f826 	bl	1700c <d_exprlist>
   16fc0:	4603      	mov	r3, r0
   16fc2:	e7a9      	b.n	16f18 <d_expression+0x1b0>
   16fc4:	f7ff f986 	bl	162d4 <d_template_args>
   16fc8:	2104      	movs	r1, #4
   16fca:	4632      	mov	r2, r6
   16fcc:	4603      	mov	r3, r0
   16fce:	4620      	mov	r0, r4
   16fd0:	f7fe f8c0 	bl	15154 <d_make_comp>
   16fd4:	2101      	movs	r1, #1
   16fd6:	462a      	mov	r2, r5
   16fd8:	4603      	mov	r3, r0
   16fda:	4620      	mov	r0, r4
   16fdc:	b003      	add	sp, #12
   16fde:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   16fe2:	f7fe b8b7 	b.w	15154 <d_make_comp>
   16fe6:	4620      	mov	r0, r4
   16fe8:	f7ff febe 	bl	16d68 <d_expression>
   16fec:	4603      	mov	r3, r0
   16fee:	e793      	b.n	16f18 <d_expression+0x1b0>
   16ff0:	4620      	mov	r0, r4
   16ff2:	9301      	str	r3, [sp, #4]
   16ff4:	f7ff f96e 	bl	162d4 <d_template_args>
   16ff8:	9b01      	ldr	r3, [sp, #4]
   16ffa:	2104      	movs	r1, #4
   16ffc:	461a      	mov	r2, r3
   16ffe:	4607      	mov	r7, r0
   17000:	4620      	mov	r0, r4
   17002:	463b      	mov	r3, r7
   17004:	f7fe f8a6 	bl	15154 <d_make_comp>
   17008:	4603      	mov	r3, r0
   1700a:	e785      	b.n	16f18 <d_expression+0x1b0>

0001700c <d_exprlist>:
   1700c:	68c3      	ldr	r3, [r0, #12]
   1700e:	2200      	movs	r2, #0
   17010:	b570      	push	{r4, r5, r6, lr}
   17012:	b082      	sub	sp, #8
   17014:	7819      	ldrb	r1, [r3, #0]
   17016:	4604      	mov	r4, r0
   17018:	9201      	str	r2, [sp, #4]
   1701a:	2945      	cmp	r1, #69	; 0x45
   1701c:	bf18      	it	ne
   1701e:	ae01      	addne	r6, sp, #4
   17020:	d019      	beq.n	17056 <d_exprlist+0x4a>
   17022:	4620      	mov	r0, r4
   17024:	f7ff fea0 	bl	16d68 <d_expression>
   17028:	212a      	movs	r1, #42	; 0x2a
   1702a:	2300      	movs	r3, #0
   1702c:	4605      	mov	r5, r0
   1702e:	4620      	mov	r0, r4
   17030:	462a      	mov	r2, r5
   17032:	b175      	cbz	r5, 17052 <d_exprlist+0x46>
   17034:	f7fe f88e 	bl	15154 <d_make_comp>
   17038:	6030      	str	r0, [r6, #0]
   1703a:	b140      	cbz	r0, 1704e <d_exprlist+0x42>
   1703c:	68e3      	ldr	r3, [r4, #12]
   1703e:	f100 0608 	add.w	r6, r0, #8
   17042:	781a      	ldrb	r2, [r3, #0]
   17044:	2a45      	cmp	r2, #69	; 0x45
   17046:	d1ec      	bne.n	17022 <d_exprlist+0x16>
   17048:	9801      	ldr	r0, [sp, #4]
   1704a:	1c59      	adds	r1, r3, #1
   1704c:	60e1      	str	r1, [r4, #12]
   1704e:	b002      	add	sp, #8
   17050:	bd70      	pop	{r4, r5, r6, pc}
   17052:	4628      	mov	r0, r5
   17054:	e7fb      	b.n	1704e <d_exprlist+0x42>
   17056:	3301      	adds	r3, #1
   17058:	212a      	movs	r1, #42	; 0x2a
   1705a:	60c3      	str	r3, [r0, #12]
   1705c:	4613      	mov	r3, r2
   1705e:	b002      	add	sp, #8
   17060:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   17064:	f7fe b876 	b.w	15154 <d_make_comp>

00017068 <d_append_string>:
   17068:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1706c:	4604      	mov	r4, r0
   1706e:	4608      	mov	r0, r1
   17070:	460f      	mov	r7, r1
   17072:	f00a f993 	bl	2139c <strlen>
   17076:	4680      	mov	r8, r0
   17078:	2800      	cmp	r0, #0
   1707a:	d05b      	beq.n	17134 <d_append_string+0xcc>
   1707c:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   17080:	3801      	subs	r0, #1
   17082:	f04f 0900 	mov.w	r9, #0
   17086:	f104 0a04 	add.w	sl, r4, #4
   1708a:	29ff      	cmp	r1, #255	; 0xff
   1708c:	f000 0b01 	and.w	fp, r0, #1
   17090:	783e      	ldrb	r6, [r7, #0]
   17092:	d06f      	beq.n	17174 <d_append_string+0x10c>
   17094:	460b      	mov	r3, r1
   17096:	3101      	adds	r1, #1
   17098:	2501      	movs	r5, #1
   1709a:	eb04 0e03 	add.w	lr, r4, r3
   1709e:	4545      	cmp	r5, r8
   170a0:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   170a4:	f88e 6004 	strb.w	r6, [lr, #4]
   170a8:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   170ac:	d042      	beq.n	17134 <d_append_string+0xcc>
   170ae:	f1bb 0f00 	cmp.w	fp, #0
   170b2:	d029      	beq.n	17108 <d_append_string+0xa0>
   170b4:	29ff      	cmp	r1, #255	; 0xff
   170b6:	5d7e      	ldrb	r6, [r7, r5]
   170b8:	d06c      	beq.n	17194 <d_append_string+0x12c>
   170ba:	460b      	mov	r3, r1
   170bc:	3101      	adds	r1, #1
   170be:	3501      	adds	r5, #1
   170c0:	eb04 0c03 	add.w	ip, r4, r3
   170c4:	4545      	cmp	r5, r8
   170c6:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   170ca:	f88c 6004 	strb.w	r6, [ip, #4]
   170ce:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   170d2:	d119      	bne.n	17108 <d_append_string+0xa0>
   170d4:	e06e      	b.n	171b4 <d_append_string+0x14c>
   170d6:	eb04 0c03 	add.w	ip, r4, r3
   170da:	3501      	adds	r5, #1
   170dc:	1c51      	adds	r1, r2, #1
   170de:	2aff      	cmp	r2, #255	; 0xff
   170e0:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   170e4:	4613      	mov	r3, r2
   170e6:	f88c 6004 	strb.w	r6, [ip, #4]
   170ea:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   170ee:	5d7e      	ldrb	r6, [r7, r5]
   170f0:	d022      	beq.n	17138 <d_append_string+0xd0>
   170f2:	3501      	adds	r5, #1
   170f4:	eb04 0e03 	add.w	lr, r4, r3
   170f8:	4545      	cmp	r5, r8
   170fa:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   170fe:	f88e 6004 	strb.w	r6, [lr, #4]
   17102:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   17106:	d033      	beq.n	17170 <d_append_string+0x108>
   17108:	29ff      	cmp	r1, #255	; 0xff
   1710a:	460b      	mov	r3, r1
   1710c:	5d7e      	ldrb	r6, [r7, r5]
   1710e:	f101 0201 	add.w	r2, r1, #1
   17112:	d1e0      	bne.n	170d6 <d_append_string+0x6e>
   17114:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   17118:	4650      	mov	r0, sl
   1711a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1711e:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   17122:	4798      	blx	r3
   17124:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   17128:	2201      	movs	r2, #1
   1712a:	2300      	movs	r3, #0
   1712c:	1881      	adds	r1, r0, r2
   1712e:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
   17132:	e7d0      	b.n	170d6 <d_append_string+0x6e>
   17134:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17138:	4611      	mov	r1, r2
   1713a:	4650      	mov	r0, sl
   1713c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   17140:	3501      	adds	r5, #1
   17142:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   17146:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   1714a:	4798      	blx	r3
   1714c:	2300      	movs	r3, #0
   1714e:	2101      	movs	r1, #1
   17150:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   17154:	eb04 0e03 	add.w	lr, r4, r3
   17158:	4545      	cmp	r5, r8
   1715a:	eb02 0001 	add.w	r0, r2, r1
   1715e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17162:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   17166:	f88e 6004 	strb.w	r6, [lr, #4]
   1716a:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   1716e:	d1cb      	bne.n	17108 <d_append_string+0xa0>
   17170:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17174:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   17178:	4650      	mov	r0, sl
   1717a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1717e:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   17182:	4798      	blx	r3
   17184:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
   17188:	2101      	movs	r1, #1
   1718a:	464b      	mov	r3, r9
   1718c:	186a      	adds	r2, r5, r1
   1718e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   17192:	e781      	b.n	17098 <d_append_string+0x30>
   17194:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   17198:	4650      	mov	r0, sl
   1719a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1719e:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   171a2:	4798      	blx	r3
   171a4:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   171a8:	4629      	mov	r1, r5
   171aa:	2300      	movs	r3, #0
   171ac:	1950      	adds	r0, r2, r5
   171ae:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   171b2:	e784      	b.n	170be <d_append_string+0x56>
   171b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000171b8 <d_print_comp>:
   171b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171bc:	460d      	mov	r5, r1
   171be:	b099      	sub	sp, #100	; 0x64
   171c0:	4604      	mov	r4, r0
   171c2:	2900      	cmp	r1, #0
   171c4:	f000 80f1 	beq.w	173aa <d_print_comp+0x1f2>
   171c8:	f8d0 011c 	ldr.w	r0, [r0, #284]	; 0x11c
   171cc:	2800      	cmp	r0, #0
   171ce:	f040 80e9 	bne.w	173a4 <d_print_comp+0x1ec>
   171d2:	780b      	ldrb	r3, [r1, #0]
   171d4:	2b42      	cmp	r3, #66	; 0x42
   171d6:	f201 86c5 	bhi.w	18f64 <d_print_comp+0x1dac>
   171da:	a001      	add	r0, pc, #4	; (adr r0, 171e0 <d_print_comp+0x28>)
   171dc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   171e0:	00018e9f 	.word	0x00018e9f
   171e4:	00018bcf 	.word	0x00018bcf
   171e8:	00018bcf 	.word	0x00018bcf
   171ec:	000172ed 	.word	0x000172ed
   171f0:	00018c9f 	.word	0x00018c9f
   171f4:	00018c25 	.word	0x00018c25
   171f8:	00018d25 	.word	0x00018d25
   171fc:	00018bc3 	.word	0x00018bc3
   17200:	000196e1 	.word	0x000196e1
   17204:	000195b3 	.word	0x000195b3
   17208:	00018ae3 	.word	0x00018ae3
   1720c:	00018a6b 	.word	0x00018a6b
   17210:	00018909 	.word	0x00018909
   17214:	0001888d 	.word	0x0001888d
   17218:	000186e1 	.word	0x000186e1
   1721c:	00018649 	.word	0x00018649
   17220:	0001814f 	.word	0x0001814f
   17224:	000180d7 	.word	0x000180d7
   17228:	00017f45 	.word	0x00017f45
   1722c:	00017ea9 	.word	0x00017ea9
   17230:	000184df 	.word	0x000184df
   17234:	00018319 	.word	0x00018319
   17238:	00018557 	.word	0x00018557
   1723c:	00017e79 	.word	0x00017e79
   17240:	00017e79 	.word	0x00017e79
   17244:	00017e79 	.word	0x00017e79
   17248:	00019355 	.word	0x00019355
   1724c:	00019355 	.word	0x00019355
   17250:	00019355 	.word	0x00019355
   17254:	00019355 	.word	0x00019355
   17258:	00019355 	.word	0x00019355
   1725c:	00019355 	.word	0x00019355
   17260:	00019355 	.word	0x00019355
   17264:	00019355 	.word	0x00019355
   17268:	00019355 	.word	0x00019355
   1726c:	00019297 	.word	0x00019297
   17270:	0001928b 	.word	0x0001928b
   17274:	0001920d 	.word	0x0001920d
   17278:	000193c5 	.word	0x000193c5
   1727c:	0001938d 	.word	0x0001938d
   17280:	000194cf 	.word	0x000194cf
   17284:	0001938d 	.word	0x0001938d
   17288:	00017e1b 	.word	0x00017e1b
   1728c:	00017e1b 	.word	0x00017e1b
   17290:	00017c81 	.word	0x00017c81
   17294:	00017a85 	.word	0x00017a85
   17298:	00017b7d 	.word	0x00017b7d
   1729c:	00017a67 	.word	0x00017a67
   172a0:	00017a55 	.word	0x00017a55
   172a4:	00017a4d 	.word	0x00017a4d
   172a8:	00017a3b 	.word	0x00017a3b
   172ac:	00017a33 	.word	0x00017a33
   172b0:	00017a33 	.word	0x00017a33
   172b4:	0001988d 	.word	0x0001988d
   172b8:	0001988d 	.word	0x0001988d
   172bc:	00019715 	.word	0x00019715
   172c0:	00018635 	.word	0x00018635
   172c4:	00018613 	.word	0x00018613
   172c8:	000190a1 	.word	0x000190a1
   172cc:	00018f6f 	.word	0x00018f6f
   172d0:	00019177 	.word	0x00019177
   172d4:	000179bb 	.word	0x000179bb
   172d8:	000177d5 	.word	0x000177d5
   172dc:	00018f65 	.word	0x00018f65
   172e0:	00017593 	.word	0x00017593
   172e4:	000174b3 	.word	0x000174b3
   172e8:	000173b3 	.word	0x000173b3
   172ec:	f8d4 7118 	ldr.w	r7, [r4, #280]	; 0x118
   172f0:	2300      	movs	r3, #0
   172f2:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   172f6:	684e      	ldr	r6, [r1, #4]
   172f8:	9701      	str	r7, [sp, #4]
   172fa:	2e00      	cmp	r6, #0
   172fc:	f005 80ed 	beq.w	1c4da <d_print_comp+0x5322>
   17300:	7832      	ldrb	r2, [r6, #0]
   17302:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   17306:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
   1730a:	3a1a      	subs	r2, #26
   1730c:	f848 3d48 	str.w	r3, [r8, #-72]!
   17310:	9607      	str	r6, [sp, #28]
   17312:	b2d2      	uxtb	r2, r2
   17314:	f8c4 8118 	str.w	r8, [r4, #280]	; 0x118
   17318:	2a02      	cmp	r2, #2
   1731a:	9308      	str	r3, [sp, #32]
   1731c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   17320:	f205 83d2 	bhi.w	1cac8 <d_print_comp+0x5910>
   17324:	6876      	ldr	r6, [r6, #4]
   17326:	2e00      	cmp	r6, #0
   17328:	f005 80d7 	beq.w	1c4da <d_print_comp+0x5322>
   1732c:	7831      	ldrb	r1, [r6, #0]
   1732e:	aa18      	add	r2, sp, #96	; 0x60
   17330:	960b      	str	r6, [sp, #44]	; 0x2c
   17332:	391a      	subs	r1, #26
   17334:	f842 8d38 	str.w	r8, [r2, #-56]!
   17338:	930c      	str	r3, [sp, #48]	; 0x30
   1733a:	b2c8      	uxtb	r0, r1
   1733c:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
   17340:	2802      	cmp	r0, #2
   17342:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
   17346:	f205 850d 	bhi.w	1cd64 <d_print_comp+0x5bac>
   1734a:	6876      	ldr	r6, [r6, #4]
   1734c:	2e00      	cmp	r6, #0
   1734e:	f005 80c4 	beq.w	1c4da <d_print_comp+0x5322>
   17352:	7830      	ldrb	r0, [r6, #0]
   17354:	a918      	add	r1, sp, #96	; 0x60
   17356:	960f      	str	r6, [sp, #60]	; 0x3c
   17358:	381a      	subs	r0, #26
   1735a:	f841 2d28 	str.w	r2, [r1, #-40]!
   1735e:	9310      	str	r3, [sp, #64]	; 0x40
   17360:	b2c2      	uxtb	r2, r0
   17362:	f8c4 1118 	str.w	r1, [r4, #280]	; 0x118
   17366:	2a02      	cmp	r2, #2
   17368:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
   1736c:	f205 84f7 	bhi.w	1cd5e <d_print_comp+0x5ba6>
   17370:	6876      	ldr	r6, [r6, #4]
   17372:	2e00      	cmp	r6, #0
   17374:	f005 80b1 	beq.w	1c4da <d_print_comp+0x5322>
   17378:	7830      	ldrb	r0, [r6, #0]
   1737a:	aa18      	add	r2, sp, #96	; 0x60
   1737c:	9314      	str	r3, [sp, #80]	; 0x50
   1737e:	381a      	subs	r0, #26
   17380:	f842 1d18 	str.w	r1, [r2, #-24]!
   17384:	9613      	str	r6, [sp, #76]	; 0x4c
   17386:	b2c3      	uxtb	r3, r0
   17388:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
   1738c:	2b02      	cmp	r3, #2
   1738e:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
   17392:	f205 84e1 	bhi.w	1cd58 <d_print_comp+0x5ba0>
   17396:	6871      	ldr	r1, [r6, #4]
   17398:	2900      	cmp	r1, #0
   1739a:	f005 809e 	beq.w	1c4da <d_print_comp+0x5322>
   1739e:	2201      	movs	r2, #1
   173a0:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
   173a4:	b019      	add	sp, #100	; 0x64
   173a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   173aa:	2301      	movs	r3, #1
   173ac:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   173b0:	e7f8      	b.n	173a4 <d_print_comp+0x1ec>
   173b2:	6849      	ldr	r1, [r1, #4]
   173b4:	4620      	mov	r0, r4
   173b6:	f7ff feff 	bl	171b8 <d_print_comp>
   173ba:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   173be:	29ff      	cmp	r1, #255	; 0xff
   173c0:	f004 81aa 	beq.w	1b718 <d_print_comp+0x4560>
   173c4:	1862      	adds	r2, r4, r1
   173c6:	3101      	adds	r1, #1
   173c8:	2320      	movs	r3, #32
   173ca:	29ff      	cmp	r1, #255	; 0xff
   173cc:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   173d0:	7113      	strb	r3, [r2, #4]
   173d2:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   173d6:	f004 818c 	beq.w	1b6f2 <d_print_comp+0x453a>
   173da:	eb04 0c01 	add.w	ip, r4, r1
   173de:	3101      	adds	r1, #1
   173e0:	235b      	movs	r3, #91	; 0x5b
   173e2:	29ff      	cmp	r1, #255	; 0xff
   173e4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   173e8:	f88c 3004 	strb.w	r3, [ip, #4]
   173ec:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   173f0:	f004 81de 	beq.w	1b7b0 <d_print_comp+0x45f8>
   173f4:	eb04 0e01 	add.w	lr, r4, r1
   173f8:	3101      	adds	r1, #1
   173fa:	2363      	movs	r3, #99	; 0x63
   173fc:	29ff      	cmp	r1, #255	; 0xff
   173fe:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17402:	f88e 3004 	strb.w	r3, [lr, #4]
   17406:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1740a:	f004 81be 	beq.w	1b78a <d_print_comp+0x45d2>
   1740e:	eb04 0c01 	add.w	ip, r4, r1
   17412:	3101      	adds	r1, #1
   17414:	236c      	movs	r3, #108	; 0x6c
   17416:	29ff      	cmp	r1, #255	; 0xff
   17418:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1741c:	f88c 3004 	strb.w	r3, [ip, #4]
   17420:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   17424:	f004 819e 	beq.w	1b764 <d_print_comp+0x45ac>
   17428:	eb04 0e01 	add.w	lr, r4, r1
   1742c:	3101      	adds	r1, #1
   1742e:	236f      	movs	r3, #111	; 0x6f
   17430:	29ff      	cmp	r1, #255	; 0xff
   17432:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17436:	f88e 3004 	strb.w	r3, [lr, #4]
   1743a:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1743e:	f004 817e 	beq.w	1b73e <d_print_comp+0x4586>
   17442:	eb04 0c01 	add.w	ip, r4, r1
   17446:	3101      	adds	r1, #1
   17448:	236e      	movs	r3, #110	; 0x6e
   1744a:	29ff      	cmp	r1, #255	; 0xff
   1744c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17450:	f88c 3004 	strb.w	r3, [ip, #4]
   17454:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   17458:	f003 86ee 	beq.w	1b238 <d_print_comp+0x4080>
   1745c:	eb04 0e01 	add.w	lr, r4, r1
   17460:	3101      	adds	r1, #1
   17462:	2365      	movs	r3, #101	; 0x65
   17464:	29ff      	cmp	r1, #255	; 0xff
   17466:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1746a:	f88e 3004 	strb.w	r3, [lr, #4]
   1746e:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   17472:	f002 8355 	beq.w	19b20 <d_print_comp+0x2968>
   17476:	1c48      	adds	r0, r1, #1
   17478:	eb04 0c01 	add.w	ip, r4, r1
   1747c:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   17480:	2120      	movs	r1, #32
   17482:	4620      	mov	r0, r4
   17484:	f88c 1004 	strb.w	r1, [ip, #4]
   17488:	f884 1108 	strb.w	r1, [r4, #264]	; 0x108
   1748c:	68a9      	ldr	r1, [r5, #8]
   1748e:	f7ff fe93 	bl	171b8 <d_print_comp>
   17492:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   17496:	1c4a      	adds	r2, r1, #1
   17498:	29ff      	cmp	r1, #255	; 0xff
   1749a:	f004 8118 	beq.w	1b6ce <d_print_comp+0x4516>
   1749e:	eb04 0e01 	add.w	lr, r4, r1
   174a2:	205d      	movs	r0, #93	; 0x5d
   174a4:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   174a8:	f88e 0004 	strb.w	r0, [lr, #4]
   174ac:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   174b0:	e778      	b.n	173a4 <d_print_comp+0x1ec>
   174b2:	4620      	mov	r0, r4
   174b4:	6849      	ldr	r1, [r1, #4]
   174b6:	f7fe f857 	bl	15568 <d_find_pack>
   174ba:	2800      	cmp	r0, #0
   174bc:	f005 8262 	beq.w	1c984 <d_print_comp+0x57cc>
   174c0:	7802      	ldrb	r2, [r0, #0]
   174c2:	2a2b      	cmp	r2, #43	; 0x2b
   174c4:	f47f af6e 	bne.w	173a4 <d_print_comp+0x1ec>
   174c8:	6841      	ldr	r1, [r0, #4]
   174ca:	2900      	cmp	r1, #0
   174cc:	f43f af6a 	beq.w	173a4 <d_print_comp+0x1ec>
   174d0:	2600      	movs	r6, #0
   174d2:	e007      	b.n	174e4 <d_print_comp+0x32c>
   174d4:	f890 9000 	ldrb.w	r9, [r0]
   174d8:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
   174dc:	d106      	bne.n	174ec <d_print_comp+0x334>
   174de:	6843      	ldr	r3, [r0, #4]
   174e0:	b123      	cbz	r3, 174ec <d_print_comp+0x334>
   174e2:	463e      	mov	r6, r7
   174e4:	6880      	ldr	r0, [r0, #8]
   174e6:	1c77      	adds	r7, r6, #1
   174e8:	2800      	cmp	r0, #0
   174ea:	d1f3      	bne.n	174d4 <d_print_comp+0x31c>
   174ec:	f8d5 8004 	ldr.w	r8, [r5, #4]
   174f0:	f04f 0a00 	mov.w	sl, #0
   174f4:	4620      	mov	r0, r4
   174f6:	f8c4 a120 	str.w	sl, [r4, #288]	; 0x120
   174fa:	4641      	mov	r1, r8
   174fc:	1e7d      	subs	r5, r7, #1
   174fe:	f7ff fe5b 	bl	171b8 <d_print_comp>
   17502:	45b2      	cmp	sl, r6
   17504:	f04f 0920 	mov.w	r9, #32
   17508:	f005 0b01 	and.w	fp, r5, #1
   1750c:	f2c3 8027 	blt.w	1a55e <d_print_comp+0x33a6>
   17510:	2501      	movs	r5, #1
   17512:	42bd      	cmp	r5, r7
   17514:	f43f af46 	beq.w	173a4 <d_print_comp+0x1ec>
   17518:	f1bb 0f00 	cmp.w	fp, #0
   1751c:	d00c      	beq.n	17538 <d_print_comp+0x380>
   1751e:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
   17522:	4620      	mov	r0, r4
   17524:	4641      	mov	r1, r8
   17526:	f7ff fe47 	bl	171b8 <d_print_comp>
   1752a:	42b5      	cmp	r5, r6
   1752c:	f2c3 809d 	blt.w	1a66a <d_print_comp+0x34b2>
   17530:	3501      	adds	r5, #1
   17532:	42bd      	cmp	r5, r7
   17534:	f43f af36 	beq.w	173a4 <d_print_comp+0x1ec>
   17538:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
   1753c:	4620      	mov	r0, r4
   1753e:	4641      	mov	r1, r8
   17540:	f7ff fe3a 	bl	171b8 <d_print_comp>
   17544:	42b5      	cmp	r5, r6
   17546:	f2c2 8343 	blt.w	19bd0 <d_print_comp+0x2a18>
   1754a:	3501      	adds	r5, #1
   1754c:	4620      	mov	r0, r4
   1754e:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
   17552:	4641      	mov	r1, r8
   17554:	f7ff fe30 	bl	171b8 <d_print_comp>
   17558:	42b5      	cmp	r5, r6
   1755a:	dae9      	bge.n	17530 <d_print_comp+0x378>
   1755c:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   17560:	29ff      	cmp	r1, #255	; 0xff
   17562:	f003 8070 	beq.w	1a646 <d_print_comp+0x348e>
   17566:	eb04 0e01 	add.w	lr, r4, r1
   1756a:	3101      	adds	r1, #1
   1756c:	202c      	movs	r0, #44	; 0x2c
   1756e:	29ff      	cmp	r1, #255	; 0xff
   17570:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17574:	f88e 0004 	strb.w	r0, [lr, #4]
   17578:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1757c:	f002 81c5 	beq.w	1990a <d_print_comp+0x2752>
   17580:	1c4b      	adds	r3, r1, #1
   17582:	1861      	adds	r1, r4, r1
   17584:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   17588:	f884 9108 	strb.w	r9, [r4, #264]	; 0x108
   1758c:	f881 9004 	strb.w	r9, [r1, #4]
   17590:	e7ce      	b.n	17530 <d_print_comp+0x378>
   17592:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   17596:	29ff      	cmp	r1, #255	; 0xff
   17598:	f004 81a1 	beq.w	1b8de <d_print_comp+0x4726>
   1759c:	1862      	adds	r2, r4, r1
   1759e:	3101      	adds	r1, #1
   175a0:	277b      	movs	r7, #123	; 0x7b
   175a2:	29ff      	cmp	r1, #255	; 0xff
   175a4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   175a8:	7117      	strb	r7, [r2, #4]
   175aa:	f884 7108 	strb.w	r7, [r4, #264]	; 0x108
   175ae:	f004 8183 	beq.w	1b8b8 <d_print_comp+0x4700>
   175b2:	eb04 0c01 	add.w	ip, r4, r1
   175b6:	3101      	adds	r1, #1
   175b8:	2075      	movs	r0, #117	; 0x75
   175ba:	29ff      	cmp	r1, #255	; 0xff
   175bc:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   175c0:	f88c 0004 	strb.w	r0, [ip, #4]
   175c4:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   175c8:	f004 8163 	beq.w	1b892 <d_print_comp+0x46da>
   175cc:	eb04 0e01 	add.w	lr, r4, r1
   175d0:	3101      	adds	r1, #1
   175d2:	266e      	movs	r6, #110	; 0x6e
   175d4:	29ff      	cmp	r1, #255	; 0xff
   175d6:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   175da:	f88e 6004 	strb.w	r6, [lr, #4]
   175de:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   175e2:	f004 8144 	beq.w	1b86e <d_print_comp+0x46b6>
   175e6:	eb04 0c01 	add.w	ip, r4, r1
   175ea:	3101      	adds	r1, #1
   175ec:	206e      	movs	r0, #110	; 0x6e
   175ee:	29ff      	cmp	r1, #255	; 0xff
   175f0:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   175f4:	f88c 0004 	strb.w	r0, [ip, #4]
   175f8:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   175fc:	f004 8124 	beq.w	1b848 <d_print_comp+0x4690>
   17600:	eb04 0e01 	add.w	lr, r4, r1
   17604:	3101      	adds	r1, #1
   17606:	2061      	movs	r0, #97	; 0x61
   17608:	29ff      	cmp	r1, #255	; 0xff
   1760a:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1760e:	f88e 0004 	strb.w	r0, [lr, #4]
   17612:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   17616:	f004 8104 	beq.w	1b822 <d_print_comp+0x466a>
   1761a:	eb04 0c01 	add.w	ip, r4, r1
   1761e:	3101      	adds	r1, #1
   17620:	236d      	movs	r3, #109	; 0x6d
   17622:	29ff      	cmp	r1, #255	; 0xff
   17624:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17628:	f88c 3004 	strb.w	r3, [ip, #4]
   1762c:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   17630:	f004 80e4 	beq.w	1b7fc <d_print_comp+0x4644>
   17634:	eb04 0e01 	add.w	lr, r4, r1
   17638:	3101      	adds	r1, #1
   1763a:	2065      	movs	r0, #101	; 0x65
   1763c:	29ff      	cmp	r1, #255	; 0xff
   1763e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17642:	f88e 0004 	strb.w	r0, [lr, #4]
   17646:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1764a:	f004 80c4 	beq.w	1b7d6 <d_print_comp+0x461e>
   1764e:	eb04 0c01 	add.w	ip, r4, r1
   17652:	3101      	adds	r1, #1
   17654:	2764      	movs	r7, #100	; 0x64
   17656:	29ff      	cmp	r1, #255	; 0xff
   17658:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1765c:	f88c 7004 	strb.w	r7, [ip, #4]
   17660:	f884 7108 	strb.w	r7, [r4, #264]	; 0x108
   17664:	f003 844c 	beq.w	1af00 <d_print_comp+0x3d48>
   17668:	eb04 0e01 	add.w	lr, r4, r1
   1766c:	3101      	adds	r1, #1
   1766e:	2020      	movs	r0, #32
   17670:	29ff      	cmp	r1, #255	; 0xff
   17672:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17676:	f88e 0004 	strb.w	r0, [lr, #4]
   1767a:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1767e:	f003 842c 	beq.w	1aeda <d_print_comp+0x3d22>
   17682:	eb04 0c01 	add.w	ip, r4, r1
   17686:	3101      	adds	r1, #1
   17688:	2374      	movs	r3, #116	; 0x74
   1768a:	29ff      	cmp	r1, #255	; 0xff
   1768c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17690:	f88c 3004 	strb.w	r3, [ip, #4]
   17694:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   17698:	f003 840c 	beq.w	1aeb4 <d_print_comp+0x3cfc>
   1769c:	eb04 0e01 	add.w	lr, r4, r1
   176a0:	3101      	adds	r1, #1
   176a2:	2079      	movs	r0, #121	; 0x79
   176a4:	29ff      	cmp	r1, #255	; 0xff
   176a6:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   176aa:	f88e 0004 	strb.w	r0, [lr, #4]
   176ae:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   176b2:	f003 83ec 	beq.w	1ae8e <d_print_comp+0x3cd6>
   176b6:	eb04 0c01 	add.w	ip, r4, r1
   176ba:	3101      	adds	r1, #1
   176bc:	2770      	movs	r7, #112	; 0x70
   176be:	29ff      	cmp	r1, #255	; 0xff
   176c0:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   176c4:	f88c 7004 	strb.w	r7, [ip, #4]
   176c8:	f884 7108 	strb.w	r7, [r4, #264]	; 0x108
   176cc:	f003 85c7 	beq.w	1b25e <d_print_comp+0x40a6>
   176d0:	eb04 0e01 	add.w	lr, r4, r1
   176d4:	3101      	adds	r1, #1
   176d6:	2065      	movs	r0, #101	; 0x65
   176d8:	29ff      	cmp	r1, #255	; 0xff
   176da:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   176de:	f88e 0004 	strb.w	r0, [lr, #4]
   176e2:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   176e6:	f002 822d 	beq.w	19b44 <d_print_comp+0x298c>
   176ea:	1c4a      	adds	r2, r1, #1
   176ec:	1861      	adds	r1, r4, r1
   176ee:	2023      	movs	r0, #35	; 0x23
   176f0:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   176f4:	7108      	strb	r0, [r1, #4]
   176f6:	f64c 1150 	movw	r1, #51536	; 0xc950
   176fa:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   176fe:	f2c0 0102 	movt	r1, #2
   17702:	686a      	ldr	r2, [r5, #4]
   17704:	a806      	add	r0, sp, #24
   17706:	3201      	adds	r2, #1
   17708:	f009 fc38 	bl	20f7c <sprintf>
   1770c:	a806      	add	r0, sp, #24
   1770e:	f009 fe45 	bl	2139c <strlen>
   17712:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   17716:	4607      	mov	r7, r0
   17718:	2800      	cmp	r0, #0
   1771a:	f002 8310 	beq.w	19d3e <d_print_comp+0x2b86>
   1771e:	29ff      	cmp	r1, #255	; 0xff
   17720:	f100 35ff 	add.w	r5, r0, #4294967295
   17724:	f04f 0800 	mov.w	r8, #0
   17728:	f104 0a04 	add.w	sl, r4, #4
   1772c:	f005 0901 	and.w	r9, r5, #1
   17730:	f89d 6018 	ldrb.w	r6, [sp, #24]
   17734:	f004 859b 	beq.w	1c26e <d_print_comp+0x50b6>
   17738:	460b      	mov	r3, r1
   1773a:	3101      	adds	r1, #1
   1773c:	2501      	movs	r5, #1
   1773e:	eb04 0e03 	add.w	lr, r4, r3
   17742:	42bd      	cmp	r5, r7
   17744:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17748:	f88e 6004 	strb.w	r6, [lr, #4]
   1774c:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   17750:	f002 82f5 	beq.w	19d3e <d_print_comp+0x2b86>
   17754:	f1b9 0f00 	cmp.w	r9, #0
   17758:	d012      	beq.n	17780 <d_print_comp+0x5c8>
   1775a:	ae06      	add	r6, sp, #24
   1775c:	29ff      	cmp	r1, #255	; 0xff
   1775e:	5d76      	ldrb	r6, [r6, r5]
   17760:	f004 85fc 	beq.w	1c35c <d_print_comp+0x51a4>
   17764:	460b      	mov	r3, r1
   17766:	3101      	adds	r1, #1
   17768:	3501      	adds	r5, #1
   1776a:	eb04 0c03 	add.w	ip, r4, r3
   1776e:	42bd      	cmp	r5, r7
   17770:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17774:	f88c 6004 	strb.w	r6, [ip, #4]
   17778:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   1777c:	f002 82df 	beq.w	19d3e <d_print_comp+0x2b86>
   17780:	ae06      	add	r6, sp, #24
   17782:	29ff      	cmp	r1, #255	; 0xff
   17784:	460b      	mov	r3, r1
   17786:	f101 0201 	add.w	r2, r1, #1
   1778a:	5d76      	ldrb	r6, [r6, r5]
   1778c:	f002 8346 	beq.w	19e1c <d_print_comp+0x2c64>
   17790:	eb04 0e03 	add.w	lr, r4, r3
   17794:	3501      	adds	r5, #1
   17796:	1c51      	adds	r1, r2, #1
   17798:	f10d 0c18 	add.w	ip, sp, #24
   1779c:	2aff      	cmp	r2, #255	; 0xff
   1779e:	f88e 6004 	strb.w	r6, [lr, #4]
   177a2:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   177a6:	4613      	mov	r3, r2
   177a8:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   177ac:	f81c 6005 	ldrb.w	r6, [ip, r5]
   177b0:	d1da      	bne.n	17768 <d_print_comp+0x5b0>
   177b2:	4611      	mov	r1, r2
   177b4:	4650      	mov	r0, sl
   177b6:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   177ba:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   177be:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
   177c2:	4798      	blx	r3
   177c4:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   177c8:	2101      	movs	r1, #1
   177ca:	2300      	movs	r3, #0
   177cc:	1850      	adds	r0, r2, r1
   177ce:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   177d2:	e7c9      	b.n	17768 <d_print_comp+0x5b0>
   177d4:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   177d8:	29ff      	cmp	r1, #255	; 0xff
   177da:	f003 8215 	beq.w	1ac08 <d_print_comp+0x3a50>
   177de:	1862      	adds	r2, r4, r1
   177e0:	3101      	adds	r1, #1
   177e2:	277b      	movs	r7, #123	; 0x7b
   177e4:	29ff      	cmp	r1, #255	; 0xff
   177e6:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   177ea:	7117      	strb	r7, [r2, #4]
   177ec:	f884 7108 	strb.w	r7, [r4, #264]	; 0x108
   177f0:	f003 81f7 	beq.w	1abe2 <d_print_comp+0x3a2a>
   177f4:	eb04 0c01 	add.w	ip, r4, r1
   177f8:	3101      	adds	r1, #1
   177fa:	206c      	movs	r0, #108	; 0x6c
   177fc:	29ff      	cmp	r1, #255	; 0xff
   177fe:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17802:	f88c 0004 	strb.w	r0, [ip, #4]
   17806:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1780a:	f003 81d7 	beq.w	1abbc <d_print_comp+0x3a04>
   1780e:	eb04 0e01 	add.w	lr, r4, r1
   17812:	3101      	adds	r1, #1
   17814:	2361      	movs	r3, #97	; 0x61
   17816:	29ff      	cmp	r1, #255	; 0xff
   17818:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1781c:	f88e 3004 	strb.w	r3, [lr, #4]
   17820:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   17824:	f003 81b7 	beq.w	1ab96 <d_print_comp+0x39de>
   17828:	eb04 0c01 	add.w	ip, r4, r1
   1782c:	3101      	adds	r1, #1
   1782e:	206d      	movs	r0, #109	; 0x6d
   17830:	29ff      	cmp	r1, #255	; 0xff
   17832:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17836:	f88c 0004 	strb.w	r0, [ip, #4]
   1783a:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1783e:	f003 8197 	beq.w	1ab70 <d_print_comp+0x39b8>
   17842:	eb04 0e01 	add.w	lr, r4, r1
   17846:	3101      	adds	r1, #1
   17848:	2762      	movs	r7, #98	; 0x62
   1784a:	29ff      	cmp	r1, #255	; 0xff
   1784c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17850:	f88e 7004 	strb.w	r7, [lr, #4]
   17854:	f884 7108 	strb.w	r7, [r4, #264]	; 0x108
   17858:	f003 8177 	beq.w	1ab4a <d_print_comp+0x3992>
   1785c:	eb04 0c01 	add.w	ip, r4, r1
   17860:	3101      	adds	r1, #1
   17862:	2064      	movs	r0, #100	; 0x64
   17864:	29ff      	cmp	r1, #255	; 0xff
   17866:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1786a:	f88c 0004 	strb.w	r0, [ip, #4]
   1786e:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   17872:	f003 8157 	beq.w	1ab24 <d_print_comp+0x396c>
   17876:	eb04 0e01 	add.w	lr, r4, r1
   1787a:	3101      	adds	r1, #1
   1787c:	2361      	movs	r3, #97	; 0x61
   1787e:	29ff      	cmp	r1, #255	; 0xff
   17880:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17884:	f88e 3004 	strb.w	r3, [lr, #4]
   17888:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1788c:	f002 80ef 	beq.w	19a6e <d_print_comp+0x28b6>
   17890:	1c48      	adds	r0, r1, #1
   17892:	eb04 0c01 	add.w	ip, r4, r1
   17896:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   1789a:	2128      	movs	r1, #40	; 0x28
   1789c:	4620      	mov	r0, r4
   1789e:	f88c 1004 	strb.w	r1, [ip, #4]
   178a2:	f884 1108 	strb.w	r1, [r4, #264]	; 0x108
   178a6:	6869      	ldr	r1, [r5, #4]
   178a8:	f7ff fc86 	bl	171b8 <d_print_comp>
   178ac:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   178b0:	29ff      	cmp	r1, #255	; 0xff
   178b2:	f004 8039 	beq.w	1b928 <d_print_comp+0x4770>
   178b6:	eb04 0e01 	add.w	lr, r4, r1
   178ba:	3101      	adds	r1, #1
   178bc:	2029      	movs	r0, #41	; 0x29
   178be:	29ff      	cmp	r1, #255	; 0xff
   178c0:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   178c4:	f88e 0004 	strb.w	r0, [lr, #4]
   178c8:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   178cc:	f002 802e 	beq.w	1992c <d_print_comp+0x2774>
   178d0:	1c4a      	adds	r2, r1, #1
   178d2:	1861      	adds	r1, r4, r1
   178d4:	2023      	movs	r0, #35	; 0x23
   178d6:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   178da:	7108      	strb	r0, [r1, #4]
   178dc:	f64c 1150 	movw	r1, #51536	; 0xc950
   178e0:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   178e4:	f2c0 0102 	movt	r1, #2
   178e8:	68aa      	ldr	r2, [r5, #8]
   178ea:	a806      	add	r0, sp, #24
   178ec:	3201      	adds	r2, #1
   178ee:	f009 fb45 	bl	20f7c <sprintf>
   178f2:	a806      	add	r0, sp, #24
   178f4:	f009 fd52 	bl	2139c <strlen>
   178f8:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   178fc:	4607      	mov	r7, r0
   178fe:	2800      	cmp	r0, #0
   17900:	f002 822a 	beq.w	19d58 <d_print_comp+0x2ba0>
   17904:	29ff      	cmp	r1, #255	; 0xff
   17906:	f100 35ff 	add.w	r5, r0, #4294967295
   1790a:	f04f 0800 	mov.w	r8, #0
   1790e:	f104 0a04 	add.w	sl, r4, #4
   17912:	f005 0901 	and.w	r9, r5, #1
   17916:	f89d 6018 	ldrb.w	r6, [sp, #24]
   1791a:	f004 843f 	beq.w	1c19c <d_print_comp+0x4fe4>
   1791e:	460b      	mov	r3, r1
   17920:	3101      	adds	r1, #1
   17922:	2501      	movs	r5, #1
   17924:	eb04 0e03 	add.w	lr, r4, r3
   17928:	42bd      	cmp	r5, r7
   1792a:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1792e:	f88e 6004 	strb.w	r6, [lr, #4]
   17932:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   17936:	f002 820f 	beq.w	19d58 <d_print_comp+0x2ba0>
   1793a:	f1b9 0f00 	cmp.w	r9, #0
   1793e:	d012      	beq.n	17966 <d_print_comp+0x7ae>
   17940:	ae06      	add	r6, sp, #24
   17942:	29ff      	cmp	r1, #255	; 0xff
   17944:	5d76      	ldrb	r6, [r6, r5]
   17946:	f004 84d6 	beq.w	1c2f6 <d_print_comp+0x513e>
   1794a:	460b      	mov	r3, r1
   1794c:	3101      	adds	r1, #1
   1794e:	3501      	adds	r5, #1
   17950:	eb04 0c03 	add.w	ip, r4, r3
   17954:	42bd      	cmp	r5, r7
   17956:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1795a:	f88c 6004 	strb.w	r6, [ip, #4]
   1795e:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   17962:	f002 81f9 	beq.w	19d58 <d_print_comp+0x2ba0>
   17966:	ae06      	add	r6, sp, #24
   17968:	29ff      	cmp	r1, #255	; 0xff
   1796a:	460b      	mov	r3, r1
   1796c:	f101 0201 	add.w	r2, r1, #1
   17970:	5d76      	ldrb	r6, [r6, r5]
   17972:	f002 8220 	beq.w	19db6 <d_print_comp+0x2bfe>
   17976:	eb04 0e03 	add.w	lr, r4, r3
   1797a:	3501      	adds	r5, #1
   1797c:	1c51      	adds	r1, r2, #1
   1797e:	f10d 0c18 	add.w	ip, sp, #24
   17982:	2aff      	cmp	r2, #255	; 0xff
   17984:	f88e 6004 	strb.w	r6, [lr, #4]
   17988:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   1798c:	4613      	mov	r3, r2
   1798e:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   17992:	f81c 6005 	ldrb.w	r6, [ip, r5]
   17996:	d1da      	bne.n	1794e <d_print_comp+0x796>
   17998:	4611      	mov	r1, r2
   1799a:	4650      	mov	r0, sl
   1799c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   179a0:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   179a4:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
   179a8:	4798      	blx	r3
   179aa:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   179ae:	2101      	movs	r1, #1
   179b0:	2300      	movs	r3, #0
   179b2:	1842      	adds	r2, r0, r1
   179b4:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   179b8:	e7c9      	b.n	1794e <d_print_comp+0x796>
   179ba:	4eb0      	ldr	r6, [pc, #704]	; (17c7c <d_print_comp+0xac4>)
   179bc:	f04f 0a00 	mov.w	sl, #0
   179c0:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   179c4:	f104 0b04 	add.w	fp, r4, #4
   179c8:	f106 081c 	add.w	r8, r6, #28
   179cc:	46a9      	mov	r9, r5
   179ce:	e019      	b.n	17a04 <d_print_comp+0x84c>
   179d0:	eb04 0e03 	add.w	lr, r4, r3
   179d4:	1c6e      	adds	r6, r5, #1
   179d6:	1c51      	adds	r1, r2, #1
   179d8:	2aff      	cmp	r2, #255	; 0xff
   179da:	4613      	mov	r3, r2
   179dc:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   179e0:	f88e 7004 	strb.w	r7, [lr, #4]
   179e4:	f884 7108 	strb.w	r7, [r4, #264]	; 0x108
   179e8:	786d      	ldrb	r5, [r5, #1]
   179ea:	f002 8141 	beq.w	19c70 <d_print_comp+0x2ab8>
   179ee:	eb04 0c03 	add.w	ip, r4, r3
   179f2:	4546      	cmp	r6, r8
   179f4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   179f8:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
   179fc:	f88c 5004 	strb.w	r5, [ip, #4]
   17a00:	f002 83d9 	beq.w	1a1b6 <d_print_comp+0x2ffe>
   17a04:	1c75      	adds	r5, r6, #1
   17a06:	29ff      	cmp	r1, #255	; 0xff
   17a08:	460b      	mov	r3, r1
   17a0a:	7877      	ldrb	r7, [r6, #1]
   17a0c:	f101 0201 	add.w	r2, r1, #1
   17a10:	d1de      	bne.n	179d0 <d_print_comp+0x818>
   17a12:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   17a16:	4658      	mov	r0, fp
   17a18:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   17a1c:	f884 a103 	strb.w	sl, [r4, #259]	; 0x103
   17a20:	4798      	blx	r3
   17a22:	f8d4 6124 	ldr.w	r6, [r4, #292]	; 0x124
   17a26:	2201      	movs	r2, #1
   17a28:	2300      	movs	r3, #0
   17a2a:	18b1      	adds	r1, r6, r2
   17a2c:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
   17a30:	e7ce      	b.n	179d0 <d_print_comp+0x818>
   17a32:	2001      	movs	r0, #1
   17a34:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
   17a38:	e4b4      	b.n	173a4 <d_print_comp+0x1ec>
   17a3a:	688b      	ldr	r3, [r1, #8]
   17a3c:	7819      	ldrb	r1, [r3, #0]
   17a3e:	2933      	cmp	r1, #51	; 0x33
   17a40:	f002 8466 	beq.w	1a310 <d_print_comp+0x3158>
   17a44:	2301      	movs	r3, #1
   17a46:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   17a4a:	e4ab      	b.n	173a4 <d_print_comp+0x1ec>
   17a4c:	2201      	movs	r2, #1
   17a4e:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
   17a52:	e4a7      	b.n	173a4 <d_print_comp+0x1ec>
   17a54:	688b      	ldr	r3, [r1, #8]
   17a56:	7818      	ldrb	r0, [r3, #0]
   17a58:	2831      	cmp	r0, #49	; 0x31
   17a5a:	f002 8480 	beq.w	1a35e <d_print_comp+0x31a6>
   17a5e:	2301      	movs	r3, #1
   17a60:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   17a64:	e49e      	b.n	173a4 <d_print_comp+0x1ec>
   17a66:	6849      	ldr	r1, [r1, #4]
   17a68:	f891 c000 	ldrb.w	ip, [r1]
   17a6c:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
   17a70:	f002 8535 	beq.w	1a4de <d_print_comp+0x3326>
   17a74:	4620      	mov	r0, r4
   17a76:	f006 ff1d 	bl	1e8b4 <d_print_expr_op>
   17a7a:	4620      	mov	r0, r4
   17a7c:	68a9      	ldr	r1, [r5, #8]
   17a7e:	f006 ffbd 	bl	1e9fc <d_print_subexpr>
   17a82:	e48f      	b.n	173a4 <d_print_comp+0x1ec>
   17a84:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   17a88:	29ff      	cmp	r1, #255	; 0xff
   17a8a:	f003 87f6 	beq.w	1ba7a <d_print_comp+0x48c2>
   17a8e:	eb04 0e01 	add.w	lr, r4, r1
   17a92:	3101      	adds	r1, #1
   17a94:	206f      	movs	r0, #111	; 0x6f
   17a96:	29ff      	cmp	r1, #255	; 0xff
   17a98:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17a9c:	f88e 0004 	strb.w	r0, [lr, #4]
   17aa0:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   17aa4:	f003 87d6 	beq.w	1ba54 <d_print_comp+0x489c>
   17aa8:	eb04 0c01 	add.w	ip, r4, r1
   17aac:	3101      	adds	r1, #1
   17aae:	2070      	movs	r0, #112	; 0x70
   17ab0:	29ff      	cmp	r1, #255	; 0xff
   17ab2:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17ab6:	f88c 0004 	strb.w	r0, [ip, #4]
   17aba:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   17abe:	f003 87b6 	beq.w	1ba2e <d_print_comp+0x4876>
   17ac2:	eb04 0e01 	add.w	lr, r4, r1
   17ac6:	3101      	adds	r1, #1
   17ac8:	2065      	movs	r0, #101	; 0x65
   17aca:	29ff      	cmp	r1, #255	; 0xff
   17acc:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17ad0:	f88e 0004 	strb.w	r0, [lr, #4]
   17ad4:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   17ad8:	f003 8796 	beq.w	1ba08 <d_print_comp+0x4850>
   17adc:	eb04 0c01 	add.w	ip, r4, r1
   17ae0:	3101      	adds	r1, #1
   17ae2:	2072      	movs	r0, #114	; 0x72
   17ae4:	29ff      	cmp	r1, #255	; 0xff
   17ae6:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17aea:	f88c 0004 	strb.w	r0, [ip, #4]
   17aee:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   17af2:	f003 8776 	beq.w	1b9e2 <d_print_comp+0x482a>
   17af6:	eb04 0e01 	add.w	lr, r4, r1
   17afa:	3101      	adds	r1, #1
   17afc:	2061      	movs	r0, #97	; 0x61
   17afe:	29ff      	cmp	r1, #255	; 0xff
   17b00:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17b04:	f88e 0004 	strb.w	r0, [lr, #4]
   17b08:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   17b0c:	f003 8756 	beq.w	1b9bc <d_print_comp+0x4804>
   17b10:	eb04 0c01 	add.w	ip, r4, r1
   17b14:	3101      	adds	r1, #1
   17b16:	2074      	movs	r0, #116	; 0x74
   17b18:	29ff      	cmp	r1, #255	; 0xff
   17b1a:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17b1e:	f88c 0004 	strb.w	r0, [ip, #4]
   17b22:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   17b26:	f003 8736 	beq.w	1b996 <d_print_comp+0x47de>
   17b2a:	eb04 0e01 	add.w	lr, r4, r1
   17b2e:	3101      	adds	r1, #1
   17b30:	206f      	movs	r0, #111	; 0x6f
   17b32:	29ff      	cmp	r1, #255	; 0xff
   17b34:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17b38:	f88e 0004 	strb.w	r0, [lr, #4]
   17b3c:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   17b40:	f003 8716 	beq.w	1b970 <d_print_comp+0x47b8>
   17b44:	eb04 0c01 	add.w	ip, r4, r1
   17b48:	3101      	adds	r1, #1
   17b4a:	2072      	movs	r0, #114	; 0x72
   17b4c:	29ff      	cmp	r1, #255	; 0xff
   17b4e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17b52:	f88c 0004 	strb.w	r0, [ip, #4]
   17b56:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   17b5a:	f001 87bd 	beq.w	19ad8 <d_print_comp+0x2920>
   17b5e:	1c48      	adds	r0, r1, #1
   17b60:	eb04 0e01 	add.w	lr, r4, r1
   17b64:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   17b68:	2120      	movs	r1, #32
   17b6a:	4620      	mov	r0, r4
   17b6c:	f88e 1004 	strb.w	r1, [lr, #4]
   17b70:	f884 1108 	strb.w	r1, [r4, #264]	; 0x108
   17b74:	68a9      	ldr	r1, [r5, #8]
   17b76:	f7ff fb1f 	bl	171b8 <d_print_comp>
   17b7a:	e413      	b.n	173a4 <d_print_comp+0x1ec>
   17b7c:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   17b80:	29ff      	cmp	r1, #255	; 0xff
   17b82:	f004 8012 	beq.w	1bbaa <d_print_comp+0x49f2>
   17b86:	eb04 0c01 	add.w	ip, r4, r1
   17b8a:	3101      	adds	r1, #1
   17b8c:	206f      	movs	r0, #111	; 0x6f
   17b8e:	29ff      	cmp	r1, #255	; 0xff
   17b90:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17b94:	f88c 0004 	strb.w	r0, [ip, #4]
   17b98:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   17b9c:	f003 87f2 	beq.w	1bb84 <d_print_comp+0x49cc>
   17ba0:	eb04 0e01 	add.w	lr, r4, r1
   17ba4:	3101      	adds	r1, #1
   17ba6:	2070      	movs	r0, #112	; 0x70
   17ba8:	29ff      	cmp	r1, #255	; 0xff
   17baa:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17bae:	f88e 0004 	strb.w	r0, [lr, #4]
   17bb2:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   17bb6:	f003 87d2 	beq.w	1bb5e <d_print_comp+0x49a6>
   17bba:	eb04 0c01 	add.w	ip, r4, r1
   17bbe:	3101      	adds	r1, #1
   17bc0:	2065      	movs	r0, #101	; 0x65
   17bc2:	29ff      	cmp	r1, #255	; 0xff
   17bc4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17bc8:	f88c 0004 	strb.w	r0, [ip, #4]
   17bcc:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   17bd0:	f003 87b2 	beq.w	1bb38 <d_print_comp+0x4980>
   17bd4:	eb04 0e01 	add.w	lr, r4, r1
   17bd8:	3101      	adds	r1, #1
   17bda:	2072      	movs	r0, #114	; 0x72
   17bdc:	29ff      	cmp	r1, #255	; 0xff
   17bde:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17be2:	f88e 0004 	strb.w	r0, [lr, #4]
   17be6:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   17bea:	f003 8792 	beq.w	1bb12 <d_print_comp+0x495a>
   17bee:	eb04 0c01 	add.w	ip, r4, r1
   17bf2:	3101      	adds	r1, #1
   17bf4:	2061      	movs	r0, #97	; 0x61
   17bf6:	29ff      	cmp	r1, #255	; 0xff
   17bf8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17bfc:	f88c 0004 	strb.w	r0, [ip, #4]
   17c00:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   17c04:	f003 8772 	beq.w	1baec <d_print_comp+0x4934>
   17c08:	eb04 0e01 	add.w	lr, r4, r1
   17c0c:	3101      	adds	r1, #1
   17c0e:	2074      	movs	r0, #116	; 0x74
   17c10:	29ff      	cmp	r1, #255	; 0xff
   17c12:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17c16:	f88e 0004 	strb.w	r0, [lr, #4]
   17c1a:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   17c1e:	f003 8752 	beq.w	1bac6 <d_print_comp+0x490e>
   17c22:	eb04 0c01 	add.w	ip, r4, r1
   17c26:	3101      	adds	r1, #1
   17c28:	206f      	movs	r0, #111	; 0x6f
   17c2a:	29ff      	cmp	r1, #255	; 0xff
   17c2c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17c30:	f88c 0004 	strb.w	r0, [ip, #4]
   17c34:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   17c38:	f003 8732 	beq.w	1baa0 <d_print_comp+0x48e8>
   17c3c:	eb04 0e01 	add.w	lr, r4, r1
   17c40:	3101      	adds	r1, #1
   17c42:	2072      	movs	r0, #114	; 0x72
   17c44:	29ff      	cmp	r1, #255	; 0xff
   17c46:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17c4a:	f88e 0004 	strb.w	r0, [lr, #4]
   17c4e:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   17c52:	f001 8753 	beq.w	19afc <d_print_comp+0x2944>
   17c56:	1c4a      	adds	r2, r1, #1
   17c58:	1861      	adds	r1, r4, r1
   17c5a:	2020      	movs	r0, #32
   17c5c:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   17c60:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   17c64:	7108      	strb	r0, [r1, #4]
   17c66:	4620      	mov	r0, r4
   17c68:	6869      	ldr	r1, [r5, #4]
   17c6a:	780a      	ldrb	r2, [r1, #0]
   17c6c:	2a04      	cmp	r2, #4
   17c6e:	f002 8371 	beq.w	1a354 <d_print_comp+0x319c>
   17c72:	f7ff faa1 	bl	171b8 <d_print_comp>
   17c76:	f7ff bb95 	b.w	173a4 <d_print_comp+0x1ec>
   17c7a:	bf00      	nop
   17c7c:	0002c977 	.word	0x0002c977
   17c80:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   17c84:	29ff      	cmp	r1, #255	; 0xff
   17c86:	f003 87dc 	beq.w	1bc42 <d_print_comp+0x4a8a>
   17c8a:	eb04 0c01 	add.w	ip, r4, r1
   17c8e:	3101      	adds	r1, #1
   17c90:	276f      	movs	r7, #111	; 0x6f
   17c92:	29ff      	cmp	r1, #255	; 0xff
   17c94:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17c98:	f88c 7004 	strb.w	r7, [ip, #4]
   17c9c:	f884 7108 	strb.w	r7, [r4, #264]	; 0x108
   17ca0:	f003 87bc 	beq.w	1bc1c <d_print_comp+0x4a64>
   17ca4:	eb04 0801 	add.w	r8, r4, r1
   17ca8:	3101      	adds	r1, #1
   17caa:	2370      	movs	r3, #112	; 0x70
   17cac:	29ff      	cmp	r1, #255	; 0xff
   17cae:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17cb2:	f888 3004 	strb.w	r3, [r8, #4]
   17cb6:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   17cba:	f003 879c 	beq.w	1bbf6 <d_print_comp+0x4a3e>
   17cbe:	eb04 0c01 	add.w	ip, r4, r1
   17cc2:	3101      	adds	r1, #1
   17cc4:	2065      	movs	r0, #101	; 0x65
   17cc6:	29ff      	cmp	r1, #255	; 0xff
   17cc8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17ccc:	f88c 0004 	strb.w	r0, [ip, #4]
   17cd0:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   17cd4:	f003 877c 	beq.w	1bbd0 <d_print_comp+0x4a18>
   17cd8:	eb04 0801 	add.w	r8, r4, r1
   17cdc:	3101      	adds	r1, #1
   17cde:	2772      	movs	r7, #114	; 0x72
   17ce0:	29ff      	cmp	r1, #255	; 0xff
   17ce2:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17ce6:	f888 7004 	strb.w	r7, [r8, #4]
   17cea:	f884 7108 	strb.w	r7, [r4, #264]	; 0x108
   17cee:	f003 87ce 	beq.w	1bc8e <d_print_comp+0x4ad6>
   17cf2:	eb04 0c01 	add.w	ip, r4, r1
   17cf6:	3101      	adds	r1, #1
   17cf8:	2061      	movs	r0, #97	; 0x61
   17cfa:	29ff      	cmp	r1, #255	; 0xff
   17cfc:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17d00:	f88c 0004 	strb.w	r0, [ip, #4]
   17d04:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   17d08:	f003 87ae 	beq.w	1bc68 <d_print_comp+0x4ab0>
   17d0c:	eb04 0801 	add.w	r8, r4, r1
   17d10:	3101      	adds	r1, #1
   17d12:	2374      	movs	r3, #116	; 0x74
   17d14:	29ff      	cmp	r1, #255	; 0xff
   17d16:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17d1a:	f888 3004 	strb.w	r3, [r8, #4]
   17d1e:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   17d22:	f003 83ca 	beq.w	1b4ba <d_print_comp+0x4302>
   17d26:	eb04 0c01 	add.w	ip, r4, r1
   17d2a:	3101      	adds	r1, #1
   17d2c:	206f      	movs	r0, #111	; 0x6f
   17d2e:	29ff      	cmp	r1, #255	; 0xff
   17d30:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17d34:	f88c 0004 	strb.w	r0, [ip, #4]
   17d38:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   17d3c:	f001 86a9 	beq.w	19a92 <d_print_comp+0x28da>
   17d40:	1c4a      	adds	r2, r1, #1
   17d42:	eb04 0801 	add.w	r8, r4, r1
   17d46:	2372      	movs	r3, #114	; 0x72
   17d48:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   17d4c:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   17d50:	f888 3004 	strb.w	r3, [r8, #4]
   17d54:	686b      	ldr	r3, [r5, #4]
   17d56:	685f      	ldr	r7, [r3, #4]
   17d58:	7838      	ldrb	r0, [r7, #0]
   17d5a:	3861      	subs	r0, #97	; 0x61
   17d5c:	b2c1      	uxtb	r1, r0
   17d5e:	2919      	cmp	r1, #25
   17d60:	f242 82c5 	bls.w	1a2ee <d_print_comp+0x3136>
   17d64:	f8d3 8008 	ldr.w	r8, [r3, #8]
   17d68:	f1b8 0f00 	cmp.w	r8, #0
   17d6c:	f43f ab1a 	beq.w	173a4 <d_print_comp+0x1ec>
   17d70:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   17d74:	f108 36ff 	add.w	r6, r8, #4294967295
   17d78:	f006 0b01 	and.w	fp, r6, #1
   17d7c:	f04f 0900 	mov.w	r9, #0
   17d80:	29ff      	cmp	r1, #255	; 0xff
   17d82:	f104 0a04 	add.w	sl, r4, #4
   17d86:	783e      	ldrb	r6, [r7, #0]
   17d88:	f004 8219 	beq.w	1c1be <d_print_comp+0x5006>
   17d8c:	460b      	mov	r3, r1
   17d8e:	3101      	adds	r1, #1
   17d90:	2501      	movs	r5, #1
   17d92:	18e0      	adds	r0, r4, r3
   17d94:	45a8      	cmp	r8, r5
   17d96:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17d9a:	7106      	strb	r6, [r0, #4]
   17d9c:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   17da0:	f43f ab00 	beq.w	173a4 <d_print_comp+0x1ec>
   17da4:	f1bb 0f00 	cmp.w	fp, #0
   17da8:	d011      	beq.n	17dce <d_print_comp+0xc16>
   17daa:	29ff      	cmp	r1, #255	; 0xff
   17dac:	5d7e      	ldrb	r6, [r7, r5]
   17dae:	f004 8291 	beq.w	1c2d4 <d_print_comp+0x511c>
   17db2:	460b      	mov	r3, r1
   17db4:	3101      	adds	r1, #1
   17db6:	3501      	adds	r5, #1
   17db8:	eb04 0c03 	add.w	ip, r4, r3
   17dbc:	45a8      	cmp	r8, r5
   17dbe:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17dc2:	f88c 6004 	strb.w	r6, [ip, #4]
   17dc6:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   17dca:	f43f aaeb 	beq.w	173a4 <d_print_comp+0x1ec>
   17dce:	29ff      	cmp	r1, #255	; 0xff
   17dd0:	460b      	mov	r3, r1
   17dd2:	5d7e      	ldrb	r6, [r7, r5]
   17dd4:	f101 0201 	add.w	r2, r1, #1
   17dd8:	f001 87dc 	beq.w	19d94 <d_print_comp+0x2bdc>
   17ddc:	eb04 0c03 	add.w	ip, r4, r3
   17de0:	3501      	adds	r5, #1
   17de2:	1c51      	adds	r1, r2, #1
   17de4:	2aff      	cmp	r2, #255	; 0xff
   17de6:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   17dea:	4613      	mov	r3, r2
   17dec:	f88c 6004 	strb.w	r6, [ip, #4]
   17df0:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   17df4:	5d7e      	ldrb	r6, [r7, r5]
   17df6:	d1de      	bne.n	17db6 <d_print_comp+0xbfe>
   17df8:	4611      	mov	r1, r2
   17dfa:	4650      	mov	r0, sl
   17dfc:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   17e00:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   17e04:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   17e08:	4798      	blx	r3
   17e0a:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   17e0e:	2101      	movs	r1, #1
   17e10:	2300      	movs	r3, #0
   17e12:	1842      	adds	r2, r0, r1
   17e14:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   17e18:	e7cd      	b.n	17db6 <d_print_comp+0xbfe>
   17e1a:	6849      	ldr	r1, [r1, #4]
   17e1c:	b111      	cbz	r1, 17e24 <d_print_comp+0xc6c>
   17e1e:	4620      	mov	r0, r4
   17e20:	f7ff f9ca 	bl	171b8 <d_print_comp>
   17e24:	68aa      	ldr	r2, [r5, #8]
   17e26:	2a00      	cmp	r2, #0
   17e28:	f43f aabc 	beq.w	173a4 <d_print_comp+0x1ec>
   17e2c:	f8d4 6104 	ldr.w	r6, [r4, #260]	; 0x104
   17e30:	2efd      	cmp	r6, #253	; 0xfd
   17e32:	bf98      	it	ls
   17e34:	f8d4 8124 	ldrls.w	r8, [r4, #292]	; 0x124
   17e38:	f202 837c 	bhi.w	1a534 <d_print_comp+0x337c>
   17e3c:	eb04 0e06 	add.w	lr, r4, r6
   17e40:	2220      	movs	r2, #32
   17e42:	212c      	movs	r1, #44	; 0x2c
   17e44:	f884 2108 	strb.w	r2, [r4, #264]	; 0x108
   17e48:	f88e 1004 	strb.w	r1, [lr, #4]
   17e4c:	1cb7      	adds	r7, r6, #2
   17e4e:	f88e 2005 	strb.w	r2, [lr, #5]
   17e52:	4620      	mov	r0, r4
   17e54:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
   17e58:	68a9      	ldr	r1, [r5, #8]
   17e5a:	f7ff f9ad 	bl	171b8 <d_print_comp>
   17e5e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   17e62:	4580      	cmp	r8, r0
   17e64:	f47f aa9e 	bne.w	173a4 <d_print_comp+0x1ec>
   17e68:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   17e6c:	42bb      	cmp	r3, r7
   17e6e:	bf08      	it	eq
   17e70:	f8c4 6104 	streq.w	r6, [r4, #260]	; 0x104
   17e74:	f7ff ba96 	b.w	173a4 <d_print_comp+0x1ec>
   17e78:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
   17e7c:	2900      	cmp	r1, #0
   17e7e:	f001 826b 	beq.w	19358 <d_print_comp+0x21a0>
   17e82:	460a      	mov	r2, r1
   17e84:	6890      	ldr	r0, [r2, #8]
   17e86:	b950      	cbnz	r0, 17e9e <d_print_comp+0xce6>
   17e88:	6850      	ldr	r0, [r2, #4]
   17e8a:	7800      	ldrb	r0, [r0, #0]
   17e8c:	f1a0 0617 	sub.w	r6, r0, #23
   17e90:	b2f6      	uxtb	r6, r6
   17e92:	2e02      	cmp	r6, #2
   17e94:	f201 8260 	bhi.w	19358 <d_print_comp+0x21a0>
   17e98:	4283      	cmp	r3, r0
   17e9a:	f002 83bc 	beq.w	1a616 <d_print_comp+0x345e>
   17e9e:	6812      	ldr	r2, [r2, #0]
   17ea0:	2a00      	cmp	r2, #0
   17ea2:	d1ef      	bne.n	17e84 <d_print_comp+0xccc>
   17ea4:	f001 ba58 	b.w	19358 <d_print_comp+0x21a0>
   17ea8:	f64c 08fc 	movw	r8, #51452	; 0xc8fc
   17eac:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   17eb0:	f2c0 0802 	movt	r8, #2
   17eb4:	f04f 0900 	mov.w	r9, #0
   17eb8:	4646      	mov	r6, r8
   17eba:	29ff      	cmp	r1, #255	; 0xff
   17ebc:	f108 0813 	add.w	r8, r8, #19
   17ec0:	f104 0a04 	add.w	sl, r4, #4
   17ec4:	f816 7b01 	ldrb.w	r7, [r6], #1
   17ec8:	f003 802d 	beq.w	1af26 <d_print_comp+0x3d6e>
   17ecc:	460b      	mov	r3, r1
   17ece:	3101      	adds	r1, #1
   17ed0:	eb04 0c03 	add.w	ip, r4, r3
   17ed4:	f884 7108 	strb.w	r7, [r4, #264]	; 0x108
   17ed8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17edc:	f88c 7004 	strb.w	r7, [ip, #4]
   17ee0:	462f      	mov	r7, r5
   17ee2:	e019      	b.n	17f18 <d_print_comp+0xd60>
   17ee4:	eb04 0c03 	add.w	ip, r4, r3
   17ee8:	1c51      	adds	r1, r2, #1
   17eea:	2aff      	cmp	r2, #255	; 0xff
   17eec:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
   17ef0:	f88c 5004 	strb.w	r5, [ip, #4]
   17ef4:	4613      	mov	r3, r2
   17ef6:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   17efa:	f816 5b01 	ldrb.w	r5, [r6], #1
   17efe:	f001 86a5 	beq.w	19c4c <d_print_comp+0x2a94>
   17f02:	eb04 0e03 	add.w	lr, r4, r3
   17f06:	4546      	cmp	r6, r8
   17f08:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17f0c:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
   17f10:	f88e 5004 	strb.w	r5, [lr, #4]
   17f14:	f002 80de 	beq.w	1a0d4 <d_print_comp+0x2f1c>
   17f18:	1c4a      	adds	r2, r1, #1
   17f1a:	29ff      	cmp	r1, #255	; 0xff
   17f1c:	460b      	mov	r3, r1
   17f1e:	f816 5b01 	ldrb.w	r5, [r6], #1
   17f22:	d1df      	bne.n	17ee4 <d_print_comp+0xd2c>
   17f24:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   17f28:	4650      	mov	r0, sl
   17f2a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   17f2e:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   17f32:	4798      	blx	r3
   17f34:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
   17f38:	2201      	movs	r2, #1
   17f3a:	2300      	movs	r3, #0
   17f3c:	1888      	adds	r0, r1, r2
   17f3e:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   17f42:	e7cf      	b.n	17ee4 <d_print_comp+0xd2c>
   17f44:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   17f48:	29ff      	cmp	r1, #255	; 0xff
   17f4a:	f003 87bb 	beq.w	1bec4 <d_print_comp+0x4d0c>
   17f4e:	1862      	adds	r2, r4, r1
   17f50:	3101      	adds	r1, #1
   17f52:	206a      	movs	r0, #106	; 0x6a
   17f54:	29ff      	cmp	r1, #255	; 0xff
   17f56:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17f5a:	7110      	strb	r0, [r2, #4]
   17f5c:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   17f60:	f003 879d 	beq.w	1be9e <d_print_comp+0x4ce6>
   17f64:	eb04 0c01 	add.w	ip, r4, r1
   17f68:	3101      	adds	r1, #1
   17f6a:	2361      	movs	r3, #97	; 0x61
   17f6c:	29ff      	cmp	r1, #255	; 0xff
   17f6e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17f72:	f88c 3004 	strb.w	r3, [ip, #4]
   17f76:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   17f7a:	f003 877d 	beq.w	1be78 <d_print_comp+0x4cc0>
   17f7e:	eb04 0e01 	add.w	lr, r4, r1
   17f82:	3101      	adds	r1, #1
   17f84:	2376      	movs	r3, #118	; 0x76
   17f86:	29ff      	cmp	r1, #255	; 0xff
   17f88:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17f8c:	f88e 3004 	strb.w	r3, [lr, #4]
   17f90:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   17f94:	f003 875d 	beq.w	1be52 <d_print_comp+0x4c9a>
   17f98:	eb04 0c01 	add.w	ip, r4, r1
   17f9c:	3101      	adds	r1, #1
   17f9e:	2361      	movs	r3, #97	; 0x61
   17fa0:	29ff      	cmp	r1, #255	; 0xff
   17fa2:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17fa6:	f88c 3004 	strb.w	r3, [ip, #4]
   17faa:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   17fae:	f003 873d 	beq.w	1be2c <d_print_comp+0x4c74>
   17fb2:	eb04 0e01 	add.w	lr, r4, r1
   17fb6:	3101      	adds	r1, #1
   17fb8:	2320      	movs	r3, #32
   17fba:	29ff      	cmp	r1, #255	; 0xff
   17fbc:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17fc0:	f88e 3004 	strb.w	r3, [lr, #4]
   17fc4:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   17fc8:	f003 871d 	beq.w	1be06 <d_print_comp+0x4c4e>
   17fcc:	eb04 0c01 	add.w	ip, r4, r1
   17fd0:	3101      	adds	r1, #1
   17fd2:	2343      	movs	r3, #67	; 0x43
   17fd4:	29ff      	cmp	r1, #255	; 0xff
   17fd6:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17fda:	f88c 3004 	strb.w	r3, [ip, #4]
   17fde:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   17fe2:	f003 86fd 	beq.w	1bde0 <d_print_comp+0x4c28>
   17fe6:	eb04 0e01 	add.w	lr, r4, r1
   17fea:	3101      	adds	r1, #1
   17fec:	236c      	movs	r3, #108	; 0x6c
   17fee:	29ff      	cmp	r1, #255	; 0xff
   17ff0:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17ff4:	f88e 3004 	strb.w	r3, [lr, #4]
   17ff8:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   17ffc:	f003 86dd 	beq.w	1bdba <d_print_comp+0x4c02>
   18000:	eb04 0c01 	add.w	ip, r4, r1
   18004:	3101      	adds	r1, #1
   18006:	2361      	movs	r3, #97	; 0x61
   18008:	29ff      	cmp	r1, #255	; 0xff
   1800a:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1800e:	f88c 3004 	strb.w	r3, [ip, #4]
   18012:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   18016:	f003 86bd 	beq.w	1bd94 <d_print_comp+0x4bdc>
   1801a:	eb04 0e01 	add.w	lr, r4, r1
   1801e:	3101      	adds	r1, #1
   18020:	2673      	movs	r6, #115	; 0x73
   18022:	29ff      	cmp	r1, #255	; 0xff
   18024:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18028:	f88e 6004 	strb.w	r6, [lr, #4]
   1802c:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   18030:	f003 869e 	beq.w	1bd70 <d_print_comp+0x4bb8>
   18034:	eb04 0c01 	add.w	ip, r4, r1
   18038:	3101      	adds	r1, #1
   1803a:	2373      	movs	r3, #115	; 0x73
   1803c:	29ff      	cmp	r1, #255	; 0xff
   1803e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18042:	f88c 3004 	strb.w	r3, [ip, #4]
   18046:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1804a:	f003 867e 	beq.w	1bd4a <d_print_comp+0x4b92>
   1804e:	eb04 0e01 	add.w	lr, r4, r1
   18052:	3101      	adds	r1, #1
   18054:	2020      	movs	r0, #32
   18056:	29ff      	cmp	r1, #255	; 0xff
   18058:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1805c:	f88e 0004 	strb.w	r0, [lr, #4]
   18060:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   18064:	f003 865e 	beq.w	1bd24 <d_print_comp+0x4b6c>
   18068:	eb04 0c01 	add.w	ip, r4, r1
   1806c:	3101      	adds	r1, #1
   1806e:	2066      	movs	r0, #102	; 0x66
   18070:	29ff      	cmp	r1, #255	; 0xff
   18072:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18076:	f88c 0004 	strb.w	r0, [ip, #4]
   1807a:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1807e:	f003 863e 	beq.w	1bcfe <d_print_comp+0x4b46>
   18082:	eb04 0e01 	add.w	lr, r4, r1
   18086:	3101      	adds	r1, #1
   18088:	206f      	movs	r0, #111	; 0x6f
   1808a:	29ff      	cmp	r1, #255	; 0xff
   1808c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18090:	f88e 0004 	strb.w	r0, [lr, #4]
   18094:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   18098:	f003 861e 	beq.w	1bcd8 <d_print_comp+0x4b20>
   1809c:	eb04 0c01 	add.w	ip, r4, r1
   180a0:	3101      	adds	r1, #1
   180a2:	2072      	movs	r0, #114	; 0x72
   180a4:	29ff      	cmp	r1, #255	; 0xff
   180a6:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   180aa:	f88c 0004 	strb.w	r0, [ip, #4]
   180ae:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   180b2:	f001 8559 	beq.w	19b68 <d_print_comp+0x29b0>
   180b6:	1c48      	adds	r0, r1, #1
   180b8:	eb04 0e01 	add.w	lr, r4, r1
   180bc:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   180c0:	2120      	movs	r1, #32
   180c2:	4620      	mov	r0, r4
   180c4:	f88e 1004 	strb.w	r1, [lr, #4]
   180c8:	f884 1108 	strb.w	r1, [r4, #264]	; 0x108
   180cc:	6869      	ldr	r1, [r5, #4]
   180ce:	f7ff f873 	bl	171b8 <d_print_comp>
   180d2:	f7ff b967 	b.w	173a4 <d_print_comp+0x1ec>
   180d6:	4e8f      	ldr	r6, [pc, #572]	; (18314 <d_print_comp+0x115c>)
   180d8:	f04f 0a00 	mov.w	sl, #0
   180dc:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   180e0:	f104 0b04 	add.w	fp, r4, #4
   180e4:	f106 081a 	add.w	r8, r6, #26
   180e8:	46a9      	mov	r9, r5
   180ea:	e019      	b.n	18120 <d_print_comp+0xf68>
   180ec:	eb04 0e03 	add.w	lr, r4, r3
   180f0:	1c6e      	adds	r6, r5, #1
   180f2:	1c51      	adds	r1, r2, #1
   180f4:	2aff      	cmp	r2, #255	; 0xff
   180f6:	4613      	mov	r3, r2
   180f8:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   180fc:	f88e 7004 	strb.w	r7, [lr, #4]
   18100:	f884 7108 	strb.w	r7, [r4, #264]	; 0x108
   18104:	786d      	ldrb	r5, [r5, #1]
   18106:	f001 85fb 	beq.w	19d00 <d_print_comp+0x2b48>
   1810a:	eb04 0e03 	add.w	lr, r4, r3
   1810e:	4546      	cmp	r6, r8
   18110:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18114:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
   18118:	f88e 5004 	strb.w	r5, [lr, #4]
   1811c:	f001 87cc 	beq.w	1a0b8 <d_print_comp+0x2f00>
   18120:	1c75      	adds	r5, r6, #1
   18122:	29ff      	cmp	r1, #255	; 0xff
   18124:	460b      	mov	r3, r1
   18126:	7877      	ldrb	r7, [r6, #1]
   18128:	f101 0201 	add.w	r2, r1, #1
   1812c:	d1de      	bne.n	180ec <d_print_comp+0xf34>
   1812e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   18132:	4658      	mov	r0, fp
   18134:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18138:	f884 a103 	strb.w	sl, [r4, #259]	; 0x103
   1813c:	4798      	blx	r3
   1813e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   18142:	2201      	movs	r2, #1
   18144:	2300      	movs	r3, #0
   18146:	1886      	adds	r6, r0, r2
   18148:	f8c4 6124 	str.w	r6, [r4, #292]	; 0x124
   1814c:	e7ce      	b.n	180ec <d_print_comp+0xf34>
   1814e:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   18152:	29ff      	cmp	r1, #255	; 0xff
   18154:	f003 87e6 	beq.w	1c124 <d_print_comp+0x4f6c>
   18158:	1862      	adds	r2, r4, r1
   1815a:	3101      	adds	r1, #1
   1815c:	2076      	movs	r0, #118	; 0x76
   1815e:	29ff      	cmp	r1, #255	; 0xff
   18160:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18164:	7110      	strb	r0, [r2, #4]
   18166:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1816a:	f003 87c8 	beq.w	1c0fe <d_print_comp+0x4f46>
   1816e:	eb04 0e01 	add.w	lr, r4, r1
   18172:	3101      	adds	r1, #1
   18174:	2369      	movs	r3, #105	; 0x69
   18176:	29ff      	cmp	r1, #255	; 0xff
   18178:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1817c:	f88e 3004 	strb.w	r3, [lr, #4]
   18180:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   18184:	f003 87a8 	beq.w	1c0d8 <d_print_comp+0x4f20>
   18188:	eb04 0c01 	add.w	ip, r4, r1
   1818c:	3101      	adds	r1, #1
   1818e:	2372      	movs	r3, #114	; 0x72
   18190:	29ff      	cmp	r1, #255	; 0xff
   18192:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18196:	f88c 3004 	strb.w	r3, [ip, #4]
   1819a:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1819e:	f003 8788 	beq.w	1c0b2 <d_print_comp+0x4efa>
   181a2:	eb04 0e01 	add.w	lr, r4, r1
   181a6:	3101      	adds	r1, #1
   181a8:	2374      	movs	r3, #116	; 0x74
   181aa:	29ff      	cmp	r1, #255	; 0xff
   181ac:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   181b0:	f88e 3004 	strb.w	r3, [lr, #4]
   181b4:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   181b8:	f003 8768 	beq.w	1c08c <d_print_comp+0x4ed4>
   181bc:	eb04 0c01 	add.w	ip, r4, r1
   181c0:	3101      	adds	r1, #1
   181c2:	2375      	movs	r3, #117	; 0x75
   181c4:	29ff      	cmp	r1, #255	; 0xff
   181c6:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   181ca:	f88c 3004 	strb.w	r3, [ip, #4]
   181ce:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   181d2:	f003 8748 	beq.w	1c066 <d_print_comp+0x4eae>
   181d6:	eb04 0e01 	add.w	lr, r4, r1
   181da:	3101      	adds	r1, #1
   181dc:	2361      	movs	r3, #97	; 0x61
   181de:	29ff      	cmp	r1, #255	; 0xff
   181e0:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   181e4:	f88e 3004 	strb.w	r3, [lr, #4]
   181e8:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   181ec:	f003 8728 	beq.w	1c040 <d_print_comp+0x4e88>
   181f0:	eb04 0c01 	add.w	ip, r4, r1
   181f4:	3101      	adds	r1, #1
   181f6:	236c      	movs	r3, #108	; 0x6c
   181f8:	29ff      	cmp	r1, #255	; 0xff
   181fa:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   181fe:	f88c 3004 	strb.w	r3, [ip, #4]
   18202:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   18206:	f003 8708 	beq.w	1c01a <d_print_comp+0x4e62>
   1820a:	eb04 0e01 	add.w	lr, r4, r1
   1820e:	3101      	adds	r1, #1
   18210:	2320      	movs	r3, #32
   18212:	29ff      	cmp	r1, #255	; 0xff
   18214:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18218:	f88e 3004 	strb.w	r3, [lr, #4]
   1821c:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   18220:	f003 86e8 	beq.w	1bff4 <d_print_comp+0x4e3c>
   18224:	eb04 0c01 	add.w	ip, r4, r1
   18228:	3101      	adds	r1, #1
   1822a:	2374      	movs	r3, #116	; 0x74
   1822c:	29ff      	cmp	r1, #255	; 0xff
   1822e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18232:	f88c 3004 	strb.w	r3, [ip, #4]
   18236:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1823a:	f003 86c8 	beq.w	1bfce <d_print_comp+0x4e16>
   1823e:	eb04 0e01 	add.w	lr, r4, r1
   18242:	3101      	adds	r1, #1
   18244:	2368      	movs	r3, #104	; 0x68
   18246:	29ff      	cmp	r1, #255	; 0xff
   18248:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1824c:	f88e 3004 	strb.w	r3, [lr, #4]
   18250:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   18254:	f003 86a8 	beq.w	1bfa8 <d_print_comp+0x4df0>
   18258:	eb04 0c01 	add.w	ip, r4, r1
   1825c:	3101      	adds	r1, #1
   1825e:	2375      	movs	r3, #117	; 0x75
   18260:	29ff      	cmp	r1, #255	; 0xff
   18262:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18266:	f88c 3004 	strb.w	r3, [ip, #4]
   1826a:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1826e:	f003 8688 	beq.w	1bf82 <d_print_comp+0x4dca>
   18272:	eb04 0e01 	add.w	lr, r4, r1
   18276:	3101      	adds	r1, #1
   18278:	236e      	movs	r3, #110	; 0x6e
   1827a:	29ff      	cmp	r1, #255	; 0xff
   1827c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18280:	f88e 3004 	strb.w	r3, [lr, #4]
   18284:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   18288:	f003 8668 	beq.w	1bf5c <d_print_comp+0x4da4>
   1828c:	eb04 0c01 	add.w	ip, r4, r1
   18290:	3101      	adds	r1, #1
   18292:	236b      	movs	r3, #107	; 0x6b
   18294:	29ff      	cmp	r1, #255	; 0xff
   18296:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1829a:	f88c 3004 	strb.w	r3, [ip, #4]
   1829e:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   182a2:	f003 8648 	beq.w	1bf36 <d_print_comp+0x4d7e>
   182a6:	eb04 0e01 	add.w	lr, r4, r1
   182aa:	3101      	adds	r1, #1
   182ac:	2320      	movs	r3, #32
   182ae:	29ff      	cmp	r1, #255	; 0xff
   182b0:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   182b4:	f88e 3004 	strb.w	r3, [lr, #4]
   182b8:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   182bc:	f003 8628 	beq.w	1bf10 <d_print_comp+0x4d58>
   182c0:	eb04 0c01 	add.w	ip, r4, r1
   182c4:	3101      	adds	r1, #1
   182c6:	2374      	movs	r3, #116	; 0x74
   182c8:	29ff      	cmp	r1, #255	; 0xff
   182ca:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   182ce:	f88c 3004 	strb.w	r3, [ip, #4]
   182d2:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   182d6:	f003 8608 	beq.w	1beea <d_print_comp+0x4d32>
   182da:	eb04 0e01 	add.w	lr, r4, r1
   182de:	3101      	adds	r1, #1
   182e0:	236f      	movs	r3, #111	; 0x6f
   182e2:	29ff      	cmp	r1, #255	; 0xff
   182e4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   182e8:	f88e 3004 	strb.w	r3, [lr, #4]
   182ec:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   182f0:	f001 8376 	beq.w	199e0 <d_print_comp+0x2828>
   182f4:	1c48      	adds	r0, r1, #1
   182f6:	eb04 0c01 	add.w	ip, r4, r1
   182fa:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   182fe:	2120      	movs	r1, #32
   18300:	4620      	mov	r0, r4
   18302:	f88c 1004 	strb.w	r1, [ip, #4]
   18306:	f884 1108 	strb.w	r1, [r4, #264]	; 0x108
   1830a:	6869      	ldr	r1, [r5, #4]
   1830c:	f7fe ff54 	bl	171b8 <d_print_comp>
   18310:	f7ff b848 	b.w	173a4 <d_print_comp+0x1ec>
   18314:	0002c8df 	.word	0x0002c8df
   18318:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1831c:	29ff      	cmp	r1, #255	; 0xff
   1831e:	f002 8213 	beq.w	1a748 <d_print_comp+0x3590>
   18322:	1862      	adds	r2, r4, r1
   18324:	3101      	adds	r1, #1
   18326:	2068      	movs	r0, #104	; 0x68
   18328:	29ff      	cmp	r1, #255	; 0xff
   1832a:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1832e:	7110      	strb	r0, [r2, #4]
   18330:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   18334:	f002 81bc 	beq.w	1a6b0 <d_print_comp+0x34f8>
   18338:	eb04 0c01 	add.w	ip, r4, r1
   1833c:	3101      	adds	r1, #1
   1833e:	2369      	movs	r3, #105	; 0x69
   18340:	29ff      	cmp	r1, #255	; 0xff
   18342:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18346:	f88c 3004 	strb.w	r3, [ip, #4]
   1834a:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1834e:	f002 874e 	beq.w	1b1ee <d_print_comp+0x4036>
   18352:	eb04 0e01 	add.w	lr, r4, r1
   18356:	3101      	adds	r1, #1
   18358:	2664      	movs	r6, #100	; 0x64
   1835a:	29ff      	cmp	r1, #255	; 0xff
   1835c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18360:	f88e 6004 	strb.w	r6, [lr, #4]
   18364:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   18368:	f002 872f 	beq.w	1b1ca <d_print_comp+0x4012>
   1836c:	eb04 0c01 	add.w	ip, r4, r1
   18370:	3101      	adds	r1, #1
   18372:	2364      	movs	r3, #100	; 0x64
   18374:	29ff      	cmp	r1, #255	; 0xff
   18376:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1837a:	f88c 3004 	strb.w	r3, [ip, #4]
   1837e:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   18382:	f002 870f 	beq.w	1b1a4 <d_print_comp+0x3fec>
   18386:	eb04 0e01 	add.w	lr, r4, r1
   1838a:	3101      	adds	r1, #1
   1838c:	2065      	movs	r0, #101	; 0x65
   1838e:	29ff      	cmp	r1, #255	; 0xff
   18390:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18394:	f88e 0004 	strb.w	r0, [lr, #4]
   18398:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1839c:	f002 86ef 	beq.w	1b17e <d_print_comp+0x3fc6>
   183a0:	eb04 0c01 	add.w	ip, r4, r1
   183a4:	3101      	adds	r1, #1
   183a6:	206e      	movs	r0, #110	; 0x6e
   183a8:	29ff      	cmp	r1, #255	; 0xff
   183aa:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   183ae:	f88c 0004 	strb.w	r0, [ip, #4]
   183b2:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   183b6:	f002 86cf 	beq.w	1b158 <d_print_comp+0x3fa0>
   183ba:	eb04 0e01 	add.w	lr, r4, r1
   183be:	3101      	adds	r1, #1
   183c0:	2020      	movs	r0, #32
   183c2:	29ff      	cmp	r1, #255	; 0xff
   183c4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   183c8:	f88e 0004 	strb.w	r0, [lr, #4]
   183cc:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   183d0:	f002 86af 	beq.w	1b132 <d_print_comp+0x3f7a>
   183d4:	eb04 0c01 	add.w	ip, r4, r1
   183d8:	3101      	adds	r1, #1
   183da:	2061      	movs	r0, #97	; 0x61
   183dc:	29ff      	cmp	r1, #255	; 0xff
   183de:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   183e2:	f88c 0004 	strb.w	r0, [ip, #4]
   183e6:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   183ea:	f002 868f 	beq.w	1b10c <d_print_comp+0x3f54>
   183ee:	eb04 0e01 	add.w	lr, r4, r1
   183f2:	3101      	adds	r1, #1
   183f4:	206c      	movs	r0, #108	; 0x6c
   183f6:	29ff      	cmp	r1, #255	; 0xff
   183f8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   183fc:	f88e 0004 	strb.w	r0, [lr, #4]
   18400:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   18404:	f002 866f 	beq.w	1b0e6 <d_print_comp+0x3f2e>
   18408:	eb04 0c01 	add.w	ip, r4, r1
   1840c:	3101      	adds	r1, #1
   1840e:	2069      	movs	r0, #105	; 0x69
   18410:	29ff      	cmp	r1, #255	; 0xff
   18412:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18416:	f88c 0004 	strb.w	r0, [ip, #4]
   1841a:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1841e:	f002 864f 	beq.w	1b0c0 <d_print_comp+0x3f08>
   18422:	eb04 0e01 	add.w	lr, r4, r1
   18426:	3101      	adds	r1, #1
   18428:	2061      	movs	r0, #97	; 0x61
   1842a:	29ff      	cmp	r1, #255	; 0xff
   1842c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18430:	f88e 0004 	strb.w	r0, [lr, #4]
   18434:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   18438:	f002 862f 	beq.w	1b09a <d_print_comp+0x3ee2>
   1843c:	eb04 0c01 	add.w	ip, r4, r1
   18440:	3101      	adds	r1, #1
   18442:	2073      	movs	r0, #115	; 0x73
   18444:	29ff      	cmp	r1, #255	; 0xff
   18446:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1844a:	f88c 0004 	strb.w	r0, [ip, #4]
   1844e:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   18452:	f002 860f 	beq.w	1b074 <d_print_comp+0x3ebc>
   18456:	eb04 0e01 	add.w	lr, r4, r1
   1845a:	3101      	adds	r1, #1
   1845c:	2020      	movs	r0, #32
   1845e:	29ff      	cmp	r1, #255	; 0xff
   18460:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18464:	f88e 0004 	strb.w	r0, [lr, #4]
   18468:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1846c:	f002 85ef 	beq.w	1b04e <d_print_comp+0x3e96>
   18470:	eb04 0c01 	add.w	ip, r4, r1
   18474:	3101      	adds	r1, #1
   18476:	2066      	movs	r0, #102	; 0x66
   18478:	29ff      	cmp	r1, #255	; 0xff
   1847a:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1847e:	f88c 0004 	strb.w	r0, [ip, #4]
   18482:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   18486:	f002 83e5 	beq.w	1ac54 <d_print_comp+0x3a9c>
   1848a:	eb04 0e01 	add.w	lr, r4, r1
   1848e:	3101      	adds	r1, #1
   18490:	206f      	movs	r0, #111	; 0x6f
   18492:	29ff      	cmp	r1, #255	; 0xff
   18494:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18498:	f88e 0004 	strb.w	r0, [lr, #4]
   1849c:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   184a0:	f002 83c5 	beq.w	1ac2e <d_print_comp+0x3a76>
   184a4:	eb04 0c01 	add.w	ip, r4, r1
   184a8:	3101      	adds	r1, #1
   184aa:	2072      	movs	r0, #114	; 0x72
   184ac:	29ff      	cmp	r1, #255	; 0xff
   184ae:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   184b2:	f88c 0004 	strb.w	r0, [ip, #4]
   184b6:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   184ba:	f001 82a3 	beq.w	19a04 <d_print_comp+0x284c>
   184be:	1c48      	adds	r0, r1, #1
   184c0:	eb04 0e01 	add.w	lr, r4, r1
   184c4:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   184c8:	2120      	movs	r1, #32
   184ca:	4620      	mov	r0, r4
   184cc:	f88e 1004 	strb.w	r1, [lr, #4]
   184d0:	f884 1108 	strb.w	r1, [r4, #264]	; 0x108
   184d4:	6869      	ldr	r1, [r5, #4]
   184d6:	f7fe fe6f 	bl	171b8 <d_print_comp>
   184da:	f7fe bf63 	b.w	173a4 <d_print_comp+0x1ec>
   184de:	4e7e      	ldr	r6, [pc, #504]	; (186d8 <d_print_comp+0x1520>)
   184e0:	f04f 0a00 	mov.w	sl, #0
   184e4:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   184e8:	f104 0b04 	add.w	fp, r4, #4
   184ec:	f106 0818 	add.w	r8, r6, #24
   184f0:	46a9      	mov	r9, r5
   184f2:	e019      	b.n	18528 <d_print_comp+0x1370>
   184f4:	eb04 0e03 	add.w	lr, r4, r3
   184f8:	1c6e      	adds	r6, r5, #1
   184fa:	1c51      	adds	r1, r2, #1
   184fc:	2aff      	cmp	r2, #255	; 0xff
   184fe:	4613      	mov	r3, r2
   18500:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   18504:	f88e 7004 	strb.w	r7, [lr, #4]
   18508:	f884 7108 	strb.w	r7, [r4, #264]	; 0x108
   1850c:	786d      	ldrb	r5, [r5, #1]
   1850e:	f001 83c1 	beq.w	19c94 <d_print_comp+0x2adc>
   18512:	eb04 0c03 	add.w	ip, r4, r3
   18516:	4546      	cmp	r6, r8
   18518:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1851c:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
   18520:	f88c 5004 	strb.w	r5, [ip, #4]
   18524:	f001 864e 	beq.w	1a1c4 <d_print_comp+0x300c>
   18528:	1c75      	adds	r5, r6, #1
   1852a:	29ff      	cmp	r1, #255	; 0xff
   1852c:	460b      	mov	r3, r1
   1852e:	7877      	ldrb	r7, [r6, #1]
   18530:	f101 0201 	add.w	r2, r1, #1
   18534:	d1de      	bne.n	184f4 <d_print_comp+0x133c>
   18536:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1853a:	4658      	mov	r0, fp
   1853c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18540:	f884 a103 	strb.w	sl, [r4, #259]	; 0x103
   18544:	4798      	blx	r3
   18546:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1854a:	2201      	movs	r2, #1
   1854c:	2300      	movs	r3, #0
   1854e:	1886      	adds	r6, r0, r2
   18550:	f8c4 6124 	str.w	r6, [r4, #292]	; 0x124
   18554:	e7ce      	b.n	184f4 <d_print_comp+0x133c>
   18556:	688f      	ldr	r7, [r1, #8]
   18558:	f8d1 8004 	ldr.w	r8, [r1, #4]
   1855c:	2f00      	cmp	r7, #0
   1855e:	f43e af21 	beq.w	173a4 <d_print_comp+0x1ec>
   18562:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   18566:	1e7d      	subs	r5, r7, #1
   18568:	f04f 0900 	mov.w	r9, #0
   1856c:	f104 0a04 	add.w	sl, r4, #4
   18570:	29ff      	cmp	r1, #255	; 0xff
   18572:	f005 0b01 	and.w	fp, r5, #1
   18576:	f898 6000 	ldrb.w	r6, [r8]
   1857a:	f003 8631 	beq.w	1c1e0 <d_print_comp+0x5028>
   1857e:	460b      	mov	r3, r1
   18580:	3101      	adds	r1, #1
   18582:	2501      	movs	r5, #1
   18584:	18e0      	adds	r0, r4, r3
   18586:	42af      	cmp	r7, r5
   18588:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1858c:	7106      	strb	r6, [r0, #4]
   1858e:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   18592:	f43e af07 	beq.w	173a4 <d_print_comp+0x1ec>
   18596:	f1bb 0f00 	cmp.w	fp, #0
   1859a:	d012      	beq.n	185c2 <d_print_comp+0x140a>
   1859c:	29ff      	cmp	r1, #255	; 0xff
   1859e:	f818 6005 	ldrb.w	r6, [r8, r5]
   185a2:	f003 86b9 	beq.w	1c318 <d_print_comp+0x5160>
   185a6:	460b      	mov	r3, r1
   185a8:	3101      	adds	r1, #1
   185aa:	3501      	adds	r5, #1
   185ac:	eb04 0c03 	add.w	ip, r4, r3
   185b0:	42af      	cmp	r7, r5
   185b2:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   185b6:	f88c 6004 	strb.w	r6, [ip, #4]
   185ba:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   185be:	f43e aef1 	beq.w	173a4 <d_print_comp+0x1ec>
   185c2:	29ff      	cmp	r1, #255	; 0xff
   185c4:	460b      	mov	r3, r1
   185c6:	f818 6005 	ldrb.w	r6, [r8, r5]
   185ca:	f101 0201 	add.w	r2, r1, #1
   185ce:	f001 8414 	beq.w	19dfa <d_print_comp+0x2c42>
   185d2:	eb04 0c03 	add.w	ip, r4, r3
   185d6:	3501      	adds	r5, #1
   185d8:	1c51      	adds	r1, r2, #1
   185da:	2aff      	cmp	r2, #255	; 0xff
   185dc:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   185e0:	4613      	mov	r3, r2
   185e2:	f88c 6004 	strb.w	r6, [ip, #4]
   185e6:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   185ea:	f818 6005 	ldrb.w	r6, [r8, r5]
   185ee:	d1dc      	bne.n	185aa <d_print_comp+0x13f2>
   185f0:	4611      	mov	r1, r2
   185f2:	4650      	mov	r0, sl
   185f4:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   185f8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   185fc:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   18600:	4798      	blx	r3
   18602:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   18606:	2101      	movs	r1, #1
   18608:	2300      	movs	r3, #0
   1860a:	1842      	adds	r2, r0, r1
   1860c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   18610:	e7cb      	b.n	185aa <d_print_comp+0x13f2>
   18612:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   18616:	792d      	ldrb	r5, [r5, #4]
   18618:	1c4b      	adds	r3, r1, #1
   1861a:	29ff      	cmp	r1, #255	; 0xff
   1861c:	f002 8691 	beq.w	1b342 <d_print_comp+0x418a>
   18620:	eb04 0c01 	add.w	ip, r4, r1
   18624:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   18628:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
   1862c:	f88c 5004 	strb.w	r5, [ip, #4]
   18630:	f7fe beb8 	b.w	173a4 <d_print_comp+0x1ec>
   18634:	4620      	mov	r0, r4
   18636:	6849      	ldr	r1, [r1, #4]
   18638:	f7fe fdbe 	bl	171b8 <d_print_comp>
   1863c:	4620      	mov	r0, r4
   1863e:	68a9      	ldr	r1, [r5, #8]
   18640:	f7fe fdba 	bl	171b8 <d_print_comp>
   18644:	f7fe beae 	b.w	173a4 <d_print_comp+0x1ec>
   18648:	4e24      	ldr	r6, [pc, #144]	; (186dc <d_print_comp+0x1524>)
   1864a:	f04f 0a00 	mov.w	sl, #0
   1864e:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   18652:	f104 0b04 	add.w	fp, r4, #4
   18656:	f106 0815 	add.w	r8, r6, #21
   1865a:	46a9      	mov	r9, r5
   1865c:	e026      	b.n	186ac <d_print_comp+0x14f4>
   1865e:	eb04 0c01 	add.w	ip, r4, r1
   18662:	1c51      	adds	r1, r2, #1
   18664:	2aff      	cmp	r2, #255	; 0xff
   18666:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1866a:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   1866e:	f88c 6004 	strb.w	r6, [ip, #4]
   18672:	786f      	ldrb	r7, [r5, #1]
   18674:	f001 83f4 	beq.w	19e60 <d_print_comp+0x2ca8>
   18678:	1cae      	adds	r6, r5, #2
   1867a:	eb04 0e02 	add.w	lr, r4, r2
   1867e:	29ff      	cmp	r1, #255	; 0xff
   18680:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18684:	f884 7108 	strb.w	r7, [r4, #264]	; 0x108
   18688:	f88e 7004 	strb.w	r7, [lr, #4]
   1868c:	78ad      	ldrb	r5, [r5, #2]
   1868e:	f001 83d6 	beq.w	19e3e <d_print_comp+0x2c86>
   18692:	460b      	mov	r3, r1
   18694:	3101      	adds	r1, #1
   18696:	eb04 0c03 	add.w	ip, r4, r3
   1869a:	4546      	cmp	r6, r8
   1869c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   186a0:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
   186a4:	f88c 5004 	strb.w	r5, [ip, #4]
   186a8:	f001 8698 	beq.w	1a3dc <d_print_comp+0x3224>
   186ac:	1c75      	adds	r5, r6, #1
   186ae:	1c4a      	adds	r2, r1, #1
   186b0:	29ff      	cmp	r1, #255	; 0xff
   186b2:	7876      	ldrb	r6, [r6, #1]
   186b4:	d1d3      	bne.n	1865e <d_print_comp+0x14a6>
   186b6:	4658      	mov	r0, fp
   186b8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   186bc:	f884 a103 	strb.w	sl, [r4, #259]	; 0x103
   186c0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   186c4:	4798      	blx	r3
   186c6:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   186ca:	2201      	movs	r2, #1
   186cc:	2100      	movs	r1, #0
   186ce:	1887      	adds	r7, r0, r2
   186d0:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
   186d4:	e7c3      	b.n	1865e <d_print_comp+0x14a6>
   186d6:	bf00      	nop
   186d8:	0002c90f 	.word	0x0002c90f
   186dc:	0002c8c7 	.word	0x0002c8c7
   186e0:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   186e4:	29ff      	cmp	r1, #255	; 0xff
   186e6:	f002 815f 	beq.w	1a9a8 <d_print_comp+0x37f0>
   186ea:	1862      	adds	r2, r4, r1
   186ec:	3101      	adds	r1, #1
   186ee:	2074      	movs	r0, #116	; 0x74
   186f0:	29ff      	cmp	r1, #255	; 0xff
   186f2:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   186f6:	7110      	strb	r0, [r2, #4]
   186f8:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   186fc:	f002 8141 	beq.w	1a982 <d_print_comp+0x37ca>
   18700:	eb04 0e01 	add.w	lr, r4, r1
   18704:	3101      	adds	r1, #1
   18706:	2379      	movs	r3, #121	; 0x79
   18708:	29ff      	cmp	r1, #255	; 0xff
   1870a:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1870e:	f88e 3004 	strb.w	r3, [lr, #4]
   18712:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   18716:	f002 8121 	beq.w	1a95c <d_print_comp+0x37a4>
   1871a:	eb04 0c01 	add.w	ip, r4, r1
   1871e:	3101      	adds	r1, #1
   18720:	2370      	movs	r3, #112	; 0x70
   18722:	29ff      	cmp	r1, #255	; 0xff
   18724:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18728:	f88c 3004 	strb.w	r3, [ip, #4]
   1872c:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   18730:	f002 8101 	beq.w	1a936 <d_print_comp+0x377e>
   18734:	eb04 0e01 	add.w	lr, r4, r1
   18738:	3101      	adds	r1, #1
   1873a:	2365      	movs	r3, #101	; 0x65
   1873c:	29ff      	cmp	r1, #255	; 0xff
   1873e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18742:	f88e 3004 	strb.w	r3, [lr, #4]
   18746:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1874a:	f002 80e1 	beq.w	1a910 <d_print_comp+0x3758>
   1874e:	eb04 0c01 	add.w	ip, r4, r1
   18752:	3101      	adds	r1, #1
   18754:	2369      	movs	r3, #105	; 0x69
   18756:	29ff      	cmp	r1, #255	; 0xff
   18758:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1875c:	f88c 3004 	strb.w	r3, [ip, #4]
   18760:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   18764:	f002 80c1 	beq.w	1a8ea <d_print_comp+0x3732>
   18768:	eb04 0e01 	add.w	lr, r4, r1
   1876c:	3101      	adds	r1, #1
   1876e:	236e      	movs	r3, #110	; 0x6e
   18770:	29ff      	cmp	r1, #255	; 0xff
   18772:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18776:	f88e 3004 	strb.w	r3, [lr, #4]
   1877a:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1877e:	f002 80a1 	beq.w	1a8c4 <d_print_comp+0x370c>
   18782:	eb04 0c01 	add.w	ip, r4, r1
   18786:	3101      	adds	r1, #1
   18788:	2366      	movs	r3, #102	; 0x66
   1878a:	29ff      	cmp	r1, #255	; 0xff
   1878c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18790:	f88c 3004 	strb.w	r3, [ip, #4]
   18794:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   18798:	f002 8081 	beq.w	1a89e <d_print_comp+0x36e6>
   1879c:	eb04 0e01 	add.w	lr, r4, r1
   187a0:	3101      	adds	r1, #1
   187a2:	236f      	movs	r3, #111	; 0x6f
   187a4:	29ff      	cmp	r1, #255	; 0xff
   187a6:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   187aa:	f88e 3004 	strb.w	r3, [lr, #4]
   187ae:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   187b2:	f002 8061 	beq.w	1a878 <d_print_comp+0x36c0>
   187b6:	eb04 0c01 	add.w	ip, r4, r1
   187ba:	3101      	adds	r1, #1
   187bc:	2320      	movs	r3, #32
   187be:	29ff      	cmp	r1, #255	; 0xff
   187c0:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   187c4:	f88c 3004 	strb.w	r3, [ip, #4]
   187c8:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   187cc:	f002 8041 	beq.w	1a852 <d_print_comp+0x369a>
   187d0:	eb04 0e01 	add.w	lr, r4, r1
   187d4:	3101      	adds	r1, #1
   187d6:	2366      	movs	r3, #102	; 0x66
   187d8:	29ff      	cmp	r1, #255	; 0xff
   187da:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   187de:	f88e 3004 	strb.w	r3, [lr, #4]
   187e2:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   187e6:	f002 8021 	beq.w	1a82c <d_print_comp+0x3674>
   187ea:	eb04 0c01 	add.w	ip, r4, r1
   187ee:	3101      	adds	r1, #1
   187f0:	236e      	movs	r3, #110	; 0x6e
   187f2:	29ff      	cmp	r1, #255	; 0xff
   187f4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   187f8:	f88c 3004 	strb.w	r3, [ip, #4]
   187fc:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   18800:	f002 8001 	beq.w	1a806 <d_print_comp+0x364e>
   18804:	eb04 0e01 	add.w	lr, r4, r1
   18808:	3101      	adds	r1, #1
   1880a:	2320      	movs	r3, #32
   1880c:	29ff      	cmp	r1, #255	; 0xff
   1880e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18812:	f88e 3004 	strb.w	r3, [lr, #4]
   18816:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1881a:	f001 87e1 	beq.w	1a7e0 <d_print_comp+0x3628>
   1881e:	eb04 0c01 	add.w	ip, r4, r1
   18822:	3101      	adds	r1, #1
   18824:	2366      	movs	r3, #102	; 0x66
   18826:	29ff      	cmp	r1, #255	; 0xff
   18828:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1882c:	f88c 3004 	strb.w	r3, [ip, #4]
   18830:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   18834:	f001 87c1 	beq.w	1a7ba <d_print_comp+0x3602>
   18838:	eb04 0e01 	add.w	lr, r4, r1
   1883c:	3101      	adds	r1, #1
   1883e:	236f      	movs	r3, #111	; 0x6f
   18840:	29ff      	cmp	r1, #255	; 0xff
   18842:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18846:	f88e 3004 	strb.w	r3, [lr, #4]
   1884a:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1884e:	f001 87a1 	beq.w	1a794 <d_print_comp+0x35dc>
   18852:	eb04 0c01 	add.w	ip, r4, r1
   18856:	3101      	adds	r1, #1
   18858:	2372      	movs	r3, #114	; 0x72
   1885a:	29ff      	cmp	r1, #255	; 0xff
   1885c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18860:	f88c 3004 	strb.w	r3, [ip, #4]
   18864:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   18868:	f001 8096 	beq.w	19998 <d_print_comp+0x27e0>
   1886c:	1c48      	adds	r0, r1, #1
   1886e:	eb04 0e01 	add.w	lr, r4, r1
   18872:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   18876:	2120      	movs	r1, #32
   18878:	4620      	mov	r0, r4
   1887a:	f88e 1004 	strb.w	r1, [lr, #4]
   1887e:	f884 1108 	strb.w	r1, [r4, #264]	; 0x108
   18882:	6869      	ldr	r1, [r5, #4]
   18884:	f7fe fc98 	bl	171b8 <d_print_comp>
   18888:	f7fe bd8c 	b.w	173a4 <d_print_comp+0x1ec>
   1888c:	f64c 06b4 	movw	r6, #51380	; 0xc8b4
   18890:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   18894:	f2c0 0602 	movt	r6, #2
   18898:	f04f 0900 	mov.w	r9, #0
   1889c:	f106 0812 	add.w	r8, r6, #18
   188a0:	f104 0a04 	add.w	sl, r4, #4
   188a4:	462f      	mov	r7, r5
   188a6:	e019      	b.n	188dc <d_print_comp+0x1724>
   188a8:	eb04 0c03 	add.w	ip, r4, r3
   188ac:	1c51      	adds	r1, r2, #1
   188ae:	2aff      	cmp	r2, #255	; 0xff
   188b0:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
   188b4:	f88c 5004 	strb.w	r5, [ip, #4]
   188b8:	4613      	mov	r3, r2
   188ba:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   188be:	f816 5b01 	ldrb.w	r5, [r6], #1
   188c2:	f001 81f9 	beq.w	19cb8 <d_print_comp+0x2b00>
   188c6:	eb04 0c03 	add.w	ip, r4, r3
   188ca:	4546      	cmp	r6, r8
   188cc:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   188d0:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
   188d4:	f88c 5004 	strb.w	r5, [ip, #4]
   188d8:	f001 82d4 	beq.w	19e84 <d_print_comp+0x2ccc>
   188dc:	1c4a      	adds	r2, r1, #1
   188de:	29ff      	cmp	r1, #255	; 0xff
   188e0:	460b      	mov	r3, r1
   188e2:	f816 5b01 	ldrb.w	r5, [r6], #1
   188e6:	d1df      	bne.n	188a8 <d_print_comp+0x16f0>
   188e8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   188ec:	4650      	mov	r0, sl
   188ee:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   188f2:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   188f6:	4798      	blx	r3
   188f8:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
   188fc:	2201      	movs	r2, #1
   188fe:	2300      	movs	r3, #0
   18900:	1888      	adds	r0, r1, r2
   18902:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   18906:	e7cf      	b.n	188a8 <d_print_comp+0x16f0>
   18908:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1890c:	29ff      	cmp	r1, #255	; 0xff
   1890e:	f002 85af 	beq.w	1b470 <d_print_comp+0x42b8>
   18912:	eb04 0e01 	add.w	lr, r4, r1
   18916:	3101      	adds	r1, #1
   18918:	2074      	movs	r0, #116	; 0x74
   1891a:	29ff      	cmp	r1, #255	; 0xff
   1891c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18920:	f88e 0004 	strb.w	r0, [lr, #4]
   18924:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   18928:	f002 858f 	beq.w	1b44a <d_print_comp+0x4292>
   1892c:	eb04 0c01 	add.w	ip, r4, r1
   18930:	3101      	adds	r1, #1
   18932:	2079      	movs	r0, #121	; 0x79
   18934:	29ff      	cmp	r1, #255	; 0xff
   18936:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1893a:	f88c 0004 	strb.w	r0, [ip, #4]
   1893e:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   18942:	f002 856f 	beq.w	1b424 <d_print_comp+0x426c>
   18946:	eb04 0e01 	add.w	lr, r4, r1
   1894a:	3101      	adds	r1, #1
   1894c:	2070      	movs	r0, #112	; 0x70
   1894e:	29ff      	cmp	r1, #255	; 0xff
   18950:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18954:	f88e 0004 	strb.w	r0, [lr, #4]
   18958:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1895c:	f002 854f 	beq.w	1b3fe <d_print_comp+0x4246>
   18960:	eb04 0c01 	add.w	ip, r4, r1
   18964:	3101      	adds	r1, #1
   18966:	2065      	movs	r0, #101	; 0x65
   18968:	29ff      	cmp	r1, #255	; 0xff
   1896a:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1896e:	f88c 0004 	strb.w	r0, [ip, #4]
   18972:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   18976:	f002 852f 	beq.w	1b3d8 <d_print_comp+0x4220>
   1897a:	eb04 0e01 	add.w	lr, r4, r1
   1897e:	3101      	adds	r1, #1
   18980:	2069      	movs	r0, #105	; 0x69
   18982:	29ff      	cmp	r1, #255	; 0xff
   18984:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18988:	f88e 0004 	strb.w	r0, [lr, #4]
   1898c:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   18990:	f002 850f 	beq.w	1b3b2 <d_print_comp+0x41fa>
   18994:	eb04 0c01 	add.w	ip, r4, r1
   18998:	3101      	adds	r1, #1
   1899a:	206e      	movs	r0, #110	; 0x6e
   1899c:	29ff      	cmp	r1, #255	; 0xff
   1899e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   189a2:	f88c 0004 	strb.w	r0, [ip, #4]
   189a6:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   189aa:	f002 84ef 	beq.w	1b38c <d_print_comp+0x41d4>
   189ae:	eb04 0e01 	add.w	lr, r4, r1
   189b2:	3101      	adds	r1, #1
   189b4:	2066      	movs	r0, #102	; 0x66
   189b6:	29ff      	cmp	r1, #255	; 0xff
   189b8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   189bc:	f88e 0004 	strb.w	r0, [lr, #4]
   189c0:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   189c4:	f002 84cf 	beq.w	1b366 <d_print_comp+0x41ae>
   189c8:	eb04 0c01 	add.w	ip, r4, r1
   189cc:	3101      	adds	r1, #1
   189ce:	206f      	movs	r0, #111	; 0x6f
   189d0:	29ff      	cmp	r1, #255	; 0xff
   189d2:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   189d6:	f88c 0004 	strb.w	r0, [ip, #4]
   189da:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   189de:	f002 81ab 	beq.w	1ad38 <d_print_comp+0x3b80>
   189e2:	eb04 0e01 	add.w	lr, r4, r1
   189e6:	3101      	adds	r1, #1
   189e8:	2020      	movs	r0, #32
   189ea:	29ff      	cmp	r1, #255	; 0xff
   189ec:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   189f0:	f88e 0004 	strb.w	r0, [lr, #4]
   189f4:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   189f8:	f002 818b 	beq.w	1ad12 <d_print_comp+0x3b5a>
   189fc:	eb04 0c01 	add.w	ip, r4, r1
   18a00:	3101      	adds	r1, #1
   18a02:	2066      	movs	r0, #102	; 0x66
   18a04:	29ff      	cmp	r1, #255	; 0xff
   18a06:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18a0a:	f88c 0004 	strb.w	r0, [ip, #4]
   18a0e:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   18a12:	f002 816b 	beq.w	1acec <d_print_comp+0x3b34>
   18a16:	eb04 0e01 	add.w	lr, r4, r1
   18a1a:	3101      	adds	r1, #1
   18a1c:	206f      	movs	r0, #111	; 0x6f
   18a1e:	29ff      	cmp	r1, #255	; 0xff
   18a20:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18a24:	f88e 0004 	strb.w	r0, [lr, #4]
   18a28:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   18a2c:	f002 814b 	beq.w	1acc6 <d_print_comp+0x3b0e>
   18a30:	eb04 0c01 	add.w	ip, r4, r1
   18a34:	3101      	adds	r1, #1
   18a36:	2072      	movs	r0, #114	; 0x72
   18a38:	29ff      	cmp	r1, #255	; 0xff
   18a3a:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18a3e:	f88c 0004 	strb.w	r0, [ip, #4]
   18a42:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   18a46:	f000 87ef 	beq.w	19a28 <d_print_comp+0x2870>
   18a4a:	1c48      	adds	r0, r1, #1
   18a4c:	eb04 0e01 	add.w	lr, r4, r1
   18a50:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   18a54:	2120      	movs	r1, #32
   18a56:	4620      	mov	r0, r4
   18a58:	f88e 1004 	strb.w	r1, [lr, #4]
   18a5c:	f884 1108 	strb.w	r1, [r4, #264]	; 0x108
   18a60:	6869      	ldr	r1, [r5, #4]
   18a62:	f7fe fba9 	bl	171b8 <d_print_comp>
   18a66:	f7fe bc9d 	b.w	173a4 <d_print_comp+0x1ec>
   18a6a:	4ead      	ldr	r6, [pc, #692]	; (18d20 <d_print_comp+0x1b68>)
   18a6c:	f04f 0a00 	mov.w	sl, #0
   18a70:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   18a74:	f104 0b04 	add.w	fp, r4, #4
   18a78:	f106 0818 	add.w	r8, r6, #24
   18a7c:	46a9      	mov	r9, r5
   18a7e:	e019      	b.n	18ab4 <d_print_comp+0x18fc>
   18a80:	eb04 0e03 	add.w	lr, r4, r3
   18a84:	1c6e      	adds	r6, r5, #1
   18a86:	1c51      	adds	r1, r2, #1
   18a88:	2aff      	cmp	r2, #255	; 0xff
   18a8a:	4613      	mov	r3, r2
   18a8c:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   18a90:	f88e 7004 	strb.w	r7, [lr, #4]
   18a94:	f884 7108 	strb.w	r7, [r4, #264]	; 0x108
   18a98:	786d      	ldrb	r5, [r5, #1]
   18a9a:	f001 811f 	beq.w	19cdc <d_print_comp+0x2b24>
   18a9e:	eb04 0e03 	add.w	lr, r4, r3
   18aa2:	4546      	cmp	r6, r8
   18aa4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18aa8:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
   18aac:	f88e 5004 	strb.w	r5, [lr, #4]
   18ab0:	f001 81ee 	beq.w	19e90 <d_print_comp+0x2cd8>
   18ab4:	1c75      	adds	r5, r6, #1
   18ab6:	29ff      	cmp	r1, #255	; 0xff
   18ab8:	460b      	mov	r3, r1
   18aba:	7877      	ldrb	r7, [r6, #1]
   18abc:	f101 0201 	add.w	r2, r1, #1
   18ac0:	d1de      	bne.n	18a80 <d_print_comp+0x18c8>
   18ac2:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   18ac6:	4658      	mov	r0, fp
   18ac8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18acc:	f884 a103 	strb.w	sl, [r4, #259]	; 0x103
   18ad0:	4798      	blx	r3
   18ad2:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   18ad6:	2201      	movs	r2, #1
   18ad8:	2300      	movs	r3, #0
   18ada:	1886      	adds	r6, r0, r2
   18adc:	f8c4 6124 	str.w	r6, [r4, #292]	; 0x124
   18ae0:	e7ce      	b.n	18a80 <d_print_comp+0x18c8>
   18ae2:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   18ae6:	29ff      	cmp	r1, #255	; 0xff
   18ae8:	f002 829e 	beq.w	1b028 <d_print_comp+0x3e70>
   18aec:	eb04 0e01 	add.w	lr, r4, r1
   18af0:	3101      	adds	r1, #1
   18af2:	2056      	movs	r0, #86	; 0x56
   18af4:	29ff      	cmp	r1, #255	; 0xff
   18af6:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18afa:	f88e 0004 	strb.w	r0, [lr, #4]
   18afe:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   18b02:	f002 827e 	beq.w	1b002 <d_print_comp+0x3e4a>
   18b06:	eb04 0c01 	add.w	ip, r4, r1
   18b0a:	3101      	adds	r1, #1
   18b0c:	2654      	movs	r6, #84	; 0x54
   18b0e:	29ff      	cmp	r1, #255	; 0xff
   18b10:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18b14:	f88c 6004 	strb.w	r6, [ip, #4]
   18b18:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   18b1c:	f002 825f 	beq.w	1afde <d_print_comp+0x3e26>
   18b20:	eb04 0e01 	add.w	lr, r4, r1
   18b24:	3101      	adds	r1, #1
   18b26:	2054      	movs	r0, #84	; 0x54
   18b28:	29ff      	cmp	r1, #255	; 0xff
   18b2a:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18b2e:	f88e 0004 	strb.w	r0, [lr, #4]
   18b32:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   18b36:	f002 823f 	beq.w	1afb8 <d_print_comp+0x3e00>
   18b3a:	eb04 0c01 	add.w	ip, r4, r1
   18b3e:	3101      	adds	r1, #1
   18b40:	2320      	movs	r3, #32
   18b42:	29ff      	cmp	r1, #255	; 0xff
   18b44:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18b48:	f88c 3004 	strb.w	r3, [ip, #4]
   18b4c:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   18b50:	f002 820d 	beq.w	1af6e <d_print_comp+0x3db6>
   18b54:	eb04 0e01 	add.w	lr, r4, r1
   18b58:	3101      	adds	r1, #1
   18b5a:	2366      	movs	r3, #102	; 0x66
   18b5c:	29ff      	cmp	r1, #255	; 0xff
   18b5e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18b62:	f88e 3004 	strb.w	r3, [lr, #4]
   18b66:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   18b6a:	f002 81ed 	beq.w	1af48 <d_print_comp+0x3d90>
   18b6e:	eb04 0c01 	add.w	ip, r4, r1
   18b72:	3101      	adds	r1, #1
   18b74:	236f      	movs	r3, #111	; 0x6f
   18b76:	29ff      	cmp	r1, #255	; 0xff
   18b78:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18b7c:	f88c 3004 	strb.w	r3, [ip, #4]
   18b80:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   18b84:	f001 85f3 	beq.w	1a76e <d_print_comp+0x35b6>
   18b88:	eb04 0e01 	add.w	lr, r4, r1
   18b8c:	3101      	adds	r1, #1
   18b8e:	2372      	movs	r3, #114	; 0x72
   18b90:	29ff      	cmp	r1, #255	; 0xff
   18b92:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18b96:	f88e 3004 	strb.w	r3, [lr, #4]
   18b9a:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   18b9e:	f000 86e9 	beq.w	19974 <d_print_comp+0x27bc>
   18ba2:	1c48      	adds	r0, r1, #1
   18ba4:	eb04 0c01 	add.w	ip, r4, r1
   18ba8:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   18bac:	2120      	movs	r1, #32
   18bae:	4620      	mov	r0, r4
   18bb0:	f88c 1004 	strb.w	r1, [ip, #4]
   18bb4:	f884 1108 	strb.w	r1, [r4, #264]	; 0x108
   18bb8:	6869      	ldr	r1, [r5, #4]
   18bba:	f7fe fafd 	bl	171b8 <d_print_comp>
   18bbe:	f7fe bbf1 	b.w	173a4 <d_print_comp+0x1ec>
   18bc2:	4620      	mov	r0, r4
   18bc4:	6889      	ldr	r1, [r1, #8]
   18bc6:	f7fe faf7 	bl	171b8 <d_print_comp>
   18bca:	f7fe bbeb 	b.w	173a4 <d_print_comp+0x1ec>
   18bce:	6849      	ldr	r1, [r1, #4]
   18bd0:	4620      	mov	r0, r4
   18bd2:	f7fe faf1 	bl	171b8 <d_print_comp>
   18bd6:	6826      	ldr	r6, [r4, #0]
   18bd8:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   18bdc:	f016 0604 	ands.w	r6, r6, #4
   18be0:	f041 827e 	bne.w	1a0e0 <d_print_comp+0x2f28>
   18be4:	29ff      	cmp	r1, #255	; 0xff
   18be6:	f003 8571 	beq.w	1c6cc <d_print_comp+0x5514>
   18bea:	eb04 0e01 	add.w	lr, r4, r1
   18bee:	3101      	adds	r1, #1
   18bf0:	203a      	movs	r0, #58	; 0x3a
   18bf2:	29ff      	cmp	r1, #255	; 0xff
   18bf4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18bf8:	f88e 0004 	strb.w	r0, [lr, #4]
   18bfc:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   18c00:	f000 87d5 	beq.w	19bae <d_print_comp+0x29f6>
   18c04:	1c4a      	adds	r2, r1, #1
   18c06:	eb04 0c01 	add.w	ip, r4, r1
   18c0a:	203a      	movs	r0, #58	; 0x3a
   18c0c:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   18c10:	f88c 0004 	strb.w	r0, [ip, #4]
   18c14:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   18c18:	4620      	mov	r0, r4
   18c1a:	68a9      	ldr	r1, [r5, #8]
   18c1c:	f7fe facc 	bl	171b8 <d_print_comp>
   18c20:	f7fe bbc0 	b.w	173a4 <d_print_comp+0x1ec>
   18c24:	f8d4 6114 	ldr.w	r6, [r4, #276]	; 0x114
   18c28:	2e00      	cmp	r6, #0
   18c2a:	d033      	beq.n	18c94 <d_print_comp+0x1adc>
   18c2c:	6873      	ldr	r3, [r6, #4]
   18c2e:	684a      	ldr	r2, [r1, #4]
   18c30:	689b      	ldr	r3, [r3, #8]
   18c32:	2b00      	cmp	r3, #0
   18c34:	f001 83e5 	beq.w	1a402 <d_print_comp+0x324a>
   18c38:	7818      	ldrb	r0, [r3, #0]
   18c3a:	282b      	cmp	r0, #43	; 0x2b
   18c3c:	d12a      	bne.n	18c94 <d_print_comp+0x1adc>
   18c3e:	2a00      	cmp	r2, #0
   18c40:	f343 86d2 	ble.w	1c9e8 <d_print_comp+0x5830>
   18c44:	689b      	ldr	r3, [r3, #8]
   18c46:	3a01      	subs	r2, #1
   18c48:	f002 0101 	and.w	r1, r2, #1
   18c4c:	2b00      	cmp	r3, #0
   18c4e:	f001 83d8 	beq.w	1a402 <d_print_comp+0x324a>
   18c52:	7818      	ldrb	r0, [r3, #0]
   18c54:	282b      	cmp	r0, #43	; 0x2b
   18c56:	d11d      	bne.n	18c94 <d_print_comp+0x1adc>
   18c58:	2a00      	cmp	r2, #0
   18c5a:	f001 83db 	beq.w	1a414 <d_print_comp+0x325c>
   18c5e:	b139      	cbz	r1, 18c70 <d_print_comp+0x1ab8>
   18c60:	689b      	ldr	r3, [r3, #8]
   18c62:	3a01      	subs	r2, #1
   18c64:	b99b      	cbnz	r3, 18c8e <d_print_comp+0x1ad6>
   18c66:	f001 bbcc 	b.w	1a402 <d_print_comp+0x324a>
   18c6a:	2a00      	cmp	r2, #0
   18c6c:	f001 83d2 	beq.w	1a414 <d_print_comp+0x325c>
   18c70:	689b      	ldr	r3, [r3, #8]
   18c72:	3a01      	subs	r2, #1
   18c74:	2b00      	cmp	r3, #0
   18c76:	f001 83c4 	beq.w	1a402 <d_print_comp+0x324a>
   18c7a:	f893 c000 	ldrb.w	ip, [r3]
   18c7e:	3a01      	subs	r2, #1
   18c80:	f1bc 0f2b 	cmp.w	ip, #43	; 0x2b
   18c84:	d106      	bne.n	18c94 <d_print_comp+0x1adc>
   18c86:	689b      	ldr	r3, [r3, #8]
   18c88:	2b00      	cmp	r3, #0
   18c8a:	f001 83ba 	beq.w	1a402 <d_print_comp+0x324a>
   18c8e:	7819      	ldrb	r1, [r3, #0]
   18c90:	292b      	cmp	r1, #43	; 0x2b
   18c92:	d0ea      	beq.n	18c6a <d_print_comp+0x1ab2>
   18c94:	2101      	movs	r1, #1
   18c96:	f8c4 111c 	str.w	r1, [r4, #284]	; 0x11c
   18c9a:	f7fe bb83 	b.w	173a4 <d_print_comp+0x1ec>
   18c9e:	6820      	ldr	r0, [r4, #0]
   18ca0:	2600      	movs	r6, #0
   18ca2:	f8d4 7118 	ldr.w	r7, [r4, #280]	; 0x118
   18ca6:	0743      	lsls	r3, r0, #29
   18ca8:	f8c4 6118 	str.w	r6, [r4, #280]	; 0x118
   18cac:	684e      	ldr	r6, [r1, #4]
   18cae:	d505      	bpl.n	18cbc <d_print_comp+0x1b04>
   18cb0:	7831      	ldrb	r1, [r6, #0]
   18cb2:	b919      	cbnz	r1, 18cbc <d_print_comp+0x1b04>
   18cb4:	68b2      	ldr	r2, [r6, #8]
   18cb6:	2a06      	cmp	r2, #6
   18cb8:	f003 854d 	beq.w	1c756 <d_print_comp+0x559e>
   18cbc:	4631      	mov	r1, r6
   18cbe:	4620      	mov	r0, r4
   18cc0:	f7fe fa7a 	bl	171b8 <d_print_comp>
   18cc4:	f894 2108 	ldrb.w	r2, [r4, #264]	; 0x108
   18cc8:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   18ccc:	2a3c      	cmp	r2, #60	; 0x3c
   18cce:	f003 83d1 	beq.w	1c474 <d_print_comp+0x52bc>
   18cd2:	1c48      	adds	r0, r1, #1
   18cd4:	29ff      	cmp	r1, #255	; 0xff
   18cd6:	f003 824a 	beq.w	1c16e <d_print_comp+0x4fb6>
   18cda:	eb04 0e01 	add.w	lr, r4, r1
   18cde:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   18ce2:	213c      	movs	r1, #60	; 0x3c
   18ce4:	4620      	mov	r0, r4
   18ce6:	f88e 1004 	strb.w	r1, [lr, #4]
   18cea:	f884 1108 	strb.w	r1, [r4, #264]	; 0x108
   18cee:	68a9      	ldr	r1, [r5, #8]
   18cf0:	f7fe fa62 	bl	171b8 <d_print_comp>
   18cf4:	f894 0108 	ldrb.w	r0, [r4, #264]	; 0x108
   18cf8:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   18cfc:	283e      	cmp	r0, #62	; 0x3e
   18cfe:	f003 83aa 	beq.w	1c456 <d_print_comp+0x529e>
   18d02:	1c4a      	adds	r2, r1, #1
   18d04:	29ff      	cmp	r1, #255	; 0xff
   18d06:	f003 8220 	beq.w	1c14a <d_print_comp+0x4f92>
   18d0a:	1861      	adds	r1, r4, r1
   18d0c:	203e      	movs	r0, #62	; 0x3e
   18d0e:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   18d12:	7108      	strb	r0, [r1, #4]
   18d14:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   18d18:	f8c4 7118 	str.w	r7, [r4, #280]	; 0x118
   18d1c:	f7fe bb42 	b.w	173a4 <d_print_comp+0x1ec>
   18d20:	0002c897 	.word	0x0002c897
   18d24:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   18d28:	29ff      	cmp	r1, #255	; 0xff
   18d2a:	f002 82f7 	beq.w	1b31c <d_print_comp+0x4164>
   18d2e:	eb04 0c01 	add.w	ip, r4, r1
   18d32:	3101      	adds	r1, #1
   18d34:	277b      	movs	r7, #123	; 0x7b
   18d36:	29ff      	cmp	r1, #255	; 0xff
   18d38:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18d3c:	f88c 7004 	strb.w	r7, [ip, #4]
   18d40:	f884 7108 	strb.w	r7, [r4, #264]	; 0x108
   18d44:	f002 82d7 	beq.w	1b2f6 <d_print_comp+0x413e>
   18d48:	eb04 0e01 	add.w	lr, r4, r1
   18d4c:	3101      	adds	r1, #1
   18d4e:	2370      	movs	r3, #112	; 0x70
   18d50:	29ff      	cmp	r1, #255	; 0xff
   18d52:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18d56:	f88e 3004 	strb.w	r3, [lr, #4]
   18d5a:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   18d5e:	f002 82b7 	beq.w	1b2d0 <d_print_comp+0x4118>
   18d62:	eb04 0c01 	add.w	ip, r4, r1
   18d66:	3101      	adds	r1, #1
   18d68:	2061      	movs	r0, #97	; 0x61
   18d6a:	29ff      	cmp	r1, #255	; 0xff
   18d6c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18d70:	f88c 0004 	strb.w	r0, [ip, #4]
   18d74:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   18d78:	f002 8297 	beq.w	1b2aa <d_print_comp+0x40f2>
   18d7c:	eb04 0e01 	add.w	lr, r4, r1
   18d80:	3101      	adds	r1, #1
   18d82:	2772      	movs	r7, #114	; 0x72
   18d84:	29ff      	cmp	r1, #255	; 0xff
   18d86:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18d8a:	f88e 7004 	strb.w	r7, [lr, #4]
   18d8e:	f884 7108 	strb.w	r7, [r4, #264]	; 0x108
   18d92:	f002 8277 	beq.w	1b284 <d_print_comp+0x40cc>
   18d96:	eb04 0c01 	add.w	ip, r4, r1
   18d9a:	3101      	adds	r1, #1
   18d9c:	206d      	movs	r0, #109	; 0x6d
   18d9e:	29ff      	cmp	r1, #255	; 0xff
   18da0:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18da4:	f88c 0004 	strb.w	r0, [ip, #4]
   18da8:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   18dac:	f000 85d0 	beq.w	19950 <d_print_comp+0x2798>
   18db0:	1c4a      	adds	r2, r1, #1
   18db2:	1861      	adds	r1, r4, r1
   18db4:	2023      	movs	r0, #35	; 0x23
   18db6:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   18dba:	7108      	strb	r0, [r1, #4]
   18dbc:	f64c 1150 	movw	r1, #51536	; 0xc950
   18dc0:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   18dc4:	f2c0 0102 	movt	r1, #2
   18dc8:	686a      	ldr	r2, [r5, #4]
   18dca:	a806      	add	r0, sp, #24
   18dcc:	3201      	adds	r2, #1
   18dce:	f008 f8d5 	bl	20f7c <sprintf>
   18dd2:	a806      	add	r0, sp, #24
   18dd4:	f008 fae2 	bl	2139c <strlen>
   18dd8:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   18ddc:	4607      	mov	r7, r0
   18dde:	2800      	cmp	r0, #0
   18de0:	f000 87a0 	beq.w	19d24 <d_print_comp+0x2b6c>
   18de4:	29ff      	cmp	r1, #255	; 0xff
   18de6:	f100 36ff 	add.w	r6, r0, #4294967295
   18dea:	f006 0901 	and.w	r9, r6, #1
   18dee:	f04f 0800 	mov.w	r8, #0
   18df2:	f104 0a04 	add.w	sl, r4, #4
   18df6:	f89d 6018 	ldrb.w	r6, [sp, #24]
   18dfa:	f003 8202 	beq.w	1c202 <d_print_comp+0x504a>
   18dfe:	460b      	mov	r3, r1
   18e00:	3101      	adds	r1, #1
   18e02:	2501      	movs	r5, #1
   18e04:	eb04 0e03 	add.w	lr, r4, r3
   18e08:	42bd      	cmp	r5, r7
   18e0a:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18e0e:	f88e 6004 	strb.w	r6, [lr, #4]
   18e12:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   18e16:	f000 8785 	beq.w	19d24 <d_print_comp+0x2b6c>
   18e1a:	f1b9 0f00 	cmp.w	r9, #0
   18e1e:	d012      	beq.n	18e46 <d_print_comp+0x1c8e>
   18e20:	ae06      	add	r6, sp, #24
   18e22:	29ff      	cmp	r1, #255	; 0xff
   18e24:	5d76      	ldrb	r6, [r6, r5]
   18e26:	f003 8288 	beq.w	1c33a <d_print_comp+0x5182>
   18e2a:	460b      	mov	r3, r1
   18e2c:	3101      	adds	r1, #1
   18e2e:	3501      	adds	r5, #1
   18e30:	eb04 0c03 	add.w	ip, r4, r3
   18e34:	42bd      	cmp	r5, r7
   18e36:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18e3a:	f88c 6004 	strb.w	r6, [ip, #4]
   18e3e:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   18e42:	f000 876f 	beq.w	19d24 <d_print_comp+0x2b6c>
   18e46:	f10d 0e18 	add.w	lr, sp, #24
   18e4a:	29ff      	cmp	r1, #255	; 0xff
   18e4c:	460b      	mov	r3, r1
   18e4e:	f101 0201 	add.w	r2, r1, #1
   18e52:	f81e 6005 	ldrb.w	r6, [lr, r5]
   18e56:	f000 878c 	beq.w	19d72 <d_print_comp+0x2bba>
   18e5a:	eb04 0e03 	add.w	lr, r4, r3
   18e5e:	3501      	adds	r5, #1
   18e60:	1c51      	adds	r1, r2, #1
   18e62:	f10d 0c18 	add.w	ip, sp, #24
   18e66:	2aff      	cmp	r2, #255	; 0xff
   18e68:	f88e 6004 	strb.w	r6, [lr, #4]
   18e6c:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   18e70:	4613      	mov	r3, r2
   18e72:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   18e76:	f81c 6005 	ldrb.w	r6, [ip, r5]
   18e7a:	d1d8      	bne.n	18e2e <d_print_comp+0x1c76>
   18e7c:	4611      	mov	r1, r2
   18e7e:	4650      	mov	r0, sl
   18e80:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   18e84:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18e88:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
   18e8c:	4798      	blx	r3
   18e8e:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   18e92:	2101      	movs	r1, #1
   18e94:	2300      	movs	r3, #0
   18e96:	1850      	adds	r0, r2, r1
   18e98:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   18e9c:	e7c7      	b.n	18e2e <d_print_comp+0x1c76>
   18e9e:	6822      	ldr	r2, [r4, #0]
   18ea0:	f012 0904 	ands.w	r9, r2, #4
   18ea4:	f041 8044 	bne.w	19f30 <d_print_comp+0x2d78>
   18ea8:	688f      	ldr	r7, [r1, #8]
   18eaa:	f8d1 8004 	ldr.w	r8, [r1, #4]
   18eae:	2f00      	cmp	r7, #0
   18eb0:	f43e aa78 	beq.w	173a4 <d_print_comp+0x1ec>
   18eb4:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   18eb8:	1e7d      	subs	r5, r7, #1
   18eba:	f104 0a04 	add.w	sl, r4, #4
   18ebe:	f005 0b01 	and.w	fp, r5, #1
   18ec2:	29ff      	cmp	r1, #255	; 0xff
   18ec4:	f898 6000 	ldrb.w	r6, [r8]
   18ec8:	f003 845e 	beq.w	1c788 <d_print_comp+0x55d0>
   18ecc:	460b      	mov	r3, r1
   18ece:	3101      	adds	r1, #1
   18ed0:	2501      	movs	r5, #1
   18ed2:	eb04 0c03 	add.w	ip, r4, r3
   18ed6:	42af      	cmp	r7, r5
   18ed8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18edc:	f88c 6004 	strb.w	r6, [ip, #4]
   18ee0:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   18ee4:	f43e aa5e 	beq.w	173a4 <d_print_comp+0x1ec>
   18ee8:	f1bb 0f00 	cmp.w	fp, #0
   18eec:	d012      	beq.n	18f14 <d_print_comp+0x1d5c>
   18eee:	29ff      	cmp	r1, #255	; 0xff
   18ef0:	f818 6005 	ldrb.w	r6, [r8, r5]
   18ef4:	f003 848c 	beq.w	1c810 <d_print_comp+0x5658>
   18ef8:	460b      	mov	r3, r1
   18efa:	3101      	adds	r1, #1
   18efc:	3501      	adds	r5, #1
   18efe:	eb04 0c03 	add.w	ip, r4, r3
   18f02:	42af      	cmp	r7, r5
   18f04:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18f08:	f88c 6004 	strb.w	r6, [ip, #4]
   18f0c:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   18f10:	f43e aa48 	beq.w	173a4 <d_print_comp+0x1ec>
   18f14:	29ff      	cmp	r1, #255	; 0xff
   18f16:	460b      	mov	r3, r1
   18f18:	f818 6005 	ldrb.w	r6, [r8, r5]
   18f1c:	f101 0201 	add.w	r2, r1, #1
   18f20:	f001 81d4 	beq.w	1a2cc <d_print_comp+0x3114>
   18f24:	eb04 0c03 	add.w	ip, r4, r3
   18f28:	3501      	adds	r5, #1
   18f2a:	1c51      	adds	r1, r2, #1
   18f2c:	2aff      	cmp	r2, #255	; 0xff
   18f2e:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   18f32:	4613      	mov	r3, r2
   18f34:	f88c 6004 	strb.w	r6, [ip, #4]
   18f38:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   18f3c:	f818 6005 	ldrb.w	r6, [r8, r5]
   18f40:	d1dc      	bne.n	18efc <d_print_comp+0x1d44>
   18f42:	4611      	mov	r1, r2
   18f44:	4650      	mov	r0, sl
   18f46:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   18f4a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18f4e:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   18f52:	4798      	blx	r3
   18f54:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   18f58:	2101      	movs	r1, #1
   18f5a:	2300      	movs	r3, #0
   18f5c:	1842      	adds	r2, r0, r1
   18f5e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   18f62:	e7cb      	b.n	18efc <d_print_comp+0x1d44>
   18f64:	2201      	movs	r2, #1
   18f66:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
   18f6a:	f7fe ba1b 	b.w	173a4 <d_print_comp+0x1ec>
   18f6e:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   18f72:	29ff      	cmp	r1, #255	; 0xff
   18f74:	f001 85b0 	beq.w	1aad8 <d_print_comp+0x3920>
   18f78:	eb04 0e01 	add.w	lr, r4, r1
   18f7c:	3101      	adds	r1, #1
   18f7e:	2064      	movs	r0, #100	; 0x64
   18f80:	29ff      	cmp	r1, #255	; 0xff
   18f82:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18f86:	f88e 0004 	strb.w	r0, [lr, #4]
   18f8a:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   18f8e:	f001 8590 	beq.w	1aab2 <d_print_comp+0x38fa>
   18f92:	eb04 0c01 	add.w	ip, r4, r1
   18f96:	3101      	adds	r1, #1
   18f98:	2065      	movs	r0, #101	; 0x65
   18f9a:	29ff      	cmp	r1, #255	; 0xff
   18f9c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18fa0:	f88c 0004 	strb.w	r0, [ip, #4]
   18fa4:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   18fa8:	f001 8570 	beq.w	1aa8c <d_print_comp+0x38d4>
   18fac:	eb04 0e01 	add.w	lr, r4, r1
   18fb0:	3101      	adds	r1, #1
   18fb2:	2063      	movs	r0, #99	; 0x63
   18fb4:	29ff      	cmp	r1, #255	; 0xff
   18fb6:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18fba:	f88e 0004 	strb.w	r0, [lr, #4]
   18fbe:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   18fc2:	f001 8550 	beq.w	1aa66 <d_print_comp+0x38ae>
   18fc6:	eb04 0c01 	add.w	ip, r4, r1
   18fca:	3101      	adds	r1, #1
   18fcc:	206c      	movs	r0, #108	; 0x6c
   18fce:	29ff      	cmp	r1, #255	; 0xff
   18fd0:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18fd4:	f88c 0004 	strb.w	r0, [ip, #4]
   18fd8:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   18fdc:	f001 8530 	beq.w	1aa40 <d_print_comp+0x3888>
   18fe0:	eb04 0e01 	add.w	lr, r4, r1
   18fe4:	3101      	adds	r1, #1
   18fe6:	2074      	movs	r0, #116	; 0x74
   18fe8:	29ff      	cmp	r1, #255	; 0xff
   18fea:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18fee:	f88e 0004 	strb.w	r0, [lr, #4]
   18ff2:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   18ff6:	f001 8510 	beq.w	1aa1a <d_print_comp+0x3862>
   18ffa:	eb04 0c01 	add.w	ip, r4, r1
   18ffe:	3101      	adds	r1, #1
   19000:	2079      	movs	r0, #121	; 0x79
   19002:	29ff      	cmp	r1, #255	; 0xff
   19004:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   19008:	f88c 0004 	strb.w	r0, [ip, #4]
   1900c:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   19010:	f001 84f0 	beq.w	1a9f4 <d_print_comp+0x383c>
   19014:	eb04 0e01 	add.w	lr, r4, r1
   19018:	3101      	adds	r1, #1
   1901a:	2070      	movs	r0, #112	; 0x70
   1901c:	29ff      	cmp	r1, #255	; 0xff
   1901e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   19022:	f88e 0004 	strb.w	r0, [lr, #4]
   19026:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1902a:	f001 84d0 	beq.w	1a9ce <d_print_comp+0x3816>
   1902e:	eb04 0c01 	add.w	ip, r4, r1
   19032:	3101      	adds	r1, #1
   19034:	2065      	movs	r0, #101	; 0x65
   19036:	29ff      	cmp	r1, #255	; 0xff
   19038:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1903c:	f88c 0004 	strb.w	r0, [ip, #4]
   19040:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   19044:	f001 855b 	beq.w	1aafe <d_print_comp+0x3946>
   19048:	eb04 0e01 	add.w	lr, r4, r1
   1904c:	3101      	adds	r1, #1
   1904e:	2020      	movs	r0, #32
   19050:	29ff      	cmp	r1, #255	; 0xff
   19052:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   19056:	f88e 0004 	strb.w	r0, [lr, #4]
   1905a:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1905e:	f000 84ad 	beq.w	199bc <d_print_comp+0x2804>
   19062:	1c48      	adds	r0, r1, #1
   19064:	eb04 0c01 	add.w	ip, r4, r1
   19068:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   1906c:	2128      	movs	r1, #40	; 0x28
   1906e:	4620      	mov	r0, r4
   19070:	f88c 1004 	strb.w	r1, [ip, #4]
   19074:	f884 1108 	strb.w	r1, [r4, #264]	; 0x108
   19078:	6869      	ldr	r1, [r5, #4]
   1907a:	f7fe f89d 	bl	171b8 <d_print_comp>
   1907e:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   19082:	1c4a      	adds	r2, r1, #1
   19084:	29ff      	cmp	r1, #255	; 0xff
   19086:	f002 843d 	beq.w	1b904 <d_print_comp+0x474c>
   1908a:	eb04 0e01 	add.w	lr, r4, r1
   1908e:	2029      	movs	r0, #41	; 0x29
   19090:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   19094:	f88e 0004 	strb.w	r0, [lr, #4]
   19098:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1909c:	f7fe b982 	b.w	173a4 <d_print_comp+0x1ec>
   190a0:	f64c 1150 	movw	r1, #51536	; 0xc950
   190a4:	686a      	ldr	r2, [r5, #4]
   190a6:	f2c0 0102 	movt	r1, #2
   190aa:	a806      	add	r0, sp, #24
   190ac:	f007 ff66 	bl	20f7c <sprintf>
   190b0:	a806      	add	r0, sp, #24
   190b2:	f008 f973 	bl	2139c <strlen>
   190b6:	4607      	mov	r7, r0
   190b8:	2800      	cmp	r0, #0
   190ba:	f43e a973 	beq.w	173a4 <d_print_comp+0x1ec>
   190be:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   190c2:	1e45      	subs	r5, r0, #1
   190c4:	f04f 0800 	mov.w	r8, #0
   190c8:	f104 0a04 	add.w	sl, r4, #4
   190cc:	29ff      	cmp	r1, #255	; 0xff
   190ce:	f005 0901 	and.w	r9, r5, #1
   190d2:	f89d 6018 	ldrb.w	r6, [sp, #24]
   190d6:	f003 80db 	beq.w	1c290 <d_print_comp+0x50d8>
   190da:	460b      	mov	r3, r1
   190dc:	3101      	adds	r1, #1
   190de:	2501      	movs	r5, #1
   190e0:	eb04 0e03 	add.w	lr, r4, r3
   190e4:	42bd      	cmp	r5, r7
   190e6:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   190ea:	f88e 6004 	strb.w	r6, [lr, #4]
   190ee:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   190f2:	f43e a957 	beq.w	173a4 <d_print_comp+0x1ec>
   190f6:	f1b9 0f00 	cmp.w	r9, #0
   190fa:	d012      	beq.n	19122 <d_print_comp+0x1f6a>
   190fc:	ae06      	add	r6, sp, #24
   190fe:	29ff      	cmp	r1, #255	; 0xff
   19100:	5d76      	ldrb	r6, [r6, r5]
   19102:	f003 80d6 	beq.w	1c2b2 <d_print_comp+0x50fa>
   19106:	460b      	mov	r3, r1
   19108:	3101      	adds	r1, #1
   1910a:	3501      	adds	r5, #1
   1910c:	eb04 0c03 	add.w	ip, r4, r3
   19110:	42bd      	cmp	r5, r7
   19112:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   19116:	f88c 6004 	strb.w	r6, [ip, #4]
   1911a:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   1911e:	f43e a941 	beq.w	173a4 <d_print_comp+0x1ec>
   19122:	ae06      	add	r6, sp, #24
   19124:	29ff      	cmp	r1, #255	; 0xff
   19126:	460b      	mov	r3, r1
   19128:	f101 0201 	add.w	r2, r1, #1
   1912c:	5d76      	ldrb	r6, [r6, r5]
   1912e:	f000 8653 	beq.w	19dd8 <d_print_comp+0x2c20>
   19132:	eb04 0c03 	add.w	ip, r4, r3
   19136:	3501      	adds	r5, #1
   19138:	1c51      	adds	r1, r2, #1
   1913a:	f10d 0e18 	add.w	lr, sp, #24
   1913e:	2aff      	cmp	r2, #255	; 0xff
   19140:	f88c 6004 	strb.w	r6, [ip, #4]
   19144:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   19148:	4613      	mov	r3, r2
   1914a:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1914e:	f81e 6005 	ldrb.w	r6, [lr, r5]
   19152:	d1da      	bne.n	1910a <d_print_comp+0x1f52>
   19154:	4611      	mov	r1, r2
   19156:	4650      	mov	r0, sl
   19158:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1915c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19160:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
   19164:	4798      	blx	r3
   19166:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1916a:	2101      	movs	r1, #1
   1916c:	2300      	movs	r3, #0
   1916e:	1850      	adds	r0, r2, r1
   19170:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   19174:	e7c9      	b.n	1910a <d_print_comp+0x1f52>
   19176:	f8df 8598 	ldr.w	r8, [pc, #1432]	; 19710 <d_print_comp+0x2558>
   1917a:	f04f 0a00 	mov.w	sl, #0
   1917e:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   19182:	f104 0b04 	add.w	fp, r4, #4
   19186:	4646      	mov	r6, r8
   19188:	29ff      	cmp	r1, #255	; 0xff
   1918a:	f816 7d1c 	ldrb.w	r7, [r6, #-28]!
   1918e:	f002 83de 	beq.w	1b94e <d_print_comp+0x4796>
   19192:	460b      	mov	r3, r1
   19194:	3101      	adds	r1, #1
   19196:	eb04 0903 	add.w	r9, r4, r3
   1919a:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1919e:	f884 7108 	strb.w	r7, [r4, #264]	; 0x108
   191a2:	f889 7004 	strb.w	r7, [r9, #4]
   191a6:	46a9      	mov	r9, r5
   191a8:	e019      	b.n	191de <d_print_comp+0x2026>
   191aa:	eb04 0c03 	add.w	ip, r4, r3
   191ae:	1c6e      	adds	r6, r5, #1
   191b0:	1c51      	adds	r1, r2, #1
   191b2:	2aff      	cmp	r2, #255	; 0xff
   191b4:	4613      	mov	r3, r2
   191b6:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   191ba:	f88c 7004 	strb.w	r7, [ip, #4]
   191be:	f884 7108 	strb.w	r7, [r4, #264]	; 0x108
   191c2:	786d      	ldrb	r5, [r5, #1]
   191c4:	f000 8530 	beq.w	19c28 <d_print_comp+0x2a70>
   191c8:	eb04 0e03 	add.w	lr, r4, r3
   191cc:	4546      	cmp	r6, r8
   191ce:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   191d2:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
   191d6:	f88e 5004 	strb.w	r5, [lr, #4]
   191da:	f000 8774 	beq.w	1a0c6 <d_print_comp+0x2f0e>
   191de:	1c75      	adds	r5, r6, #1
   191e0:	29ff      	cmp	r1, #255	; 0xff
   191e2:	460b      	mov	r3, r1
   191e4:	7877      	ldrb	r7, [r6, #1]
   191e6:	f101 0201 	add.w	r2, r1, #1
   191ea:	d1de      	bne.n	191aa <d_print_comp+0x1ff2>
   191ec:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   191f0:	4658      	mov	r0, fp
   191f2:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   191f6:	f884 a103 	strb.w	sl, [r4, #259]	; 0x103
   191fa:	4798      	blx	r3
   191fc:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   19200:	2201      	movs	r2, #1
   19202:	2300      	movs	r3, #0
   19204:	1886      	adds	r6, r0, r2
   19206:	f8c4 6124 	str.w	r6, [r4, #292]	; 0x124
   1920a:	e7ce      	b.n	191aa <d_print_comp+0x1ff2>
   1920c:	6822      	ldr	r2, [r4, #0]
   1920e:	0690      	lsls	r0, r2, #26
   19210:	f101 80f0 	bmi.w	1a3f4 <d_print_comp+0x323c>
   19214:	6869      	ldr	r1, [r5, #4]
   19216:	2900      	cmp	r1, #0
   19218:	f001 80e7 	beq.w	1a3ea <d_print_comp+0x3232>
   1921c:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
   19220:	aa18      	add	r2, sp, #96	; 0x60
   19222:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   19226:	4620      	mov	r0, r4
   19228:	9507      	str	r5, [sp, #28]
   1922a:	f842 1d48 	str.w	r1, [r2, #-72]!
   1922e:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
   19232:	2200      	movs	r2, #0
   19234:	6869      	ldr	r1, [r5, #4]
   19236:	9309      	str	r3, [sp, #36]	; 0x24
   19238:	9208      	str	r2, [sp, #32]
   1923a:	f7fd ffbd 	bl	171b8 <d_print_comp>
   1923e:	9b06      	ldr	r3, [sp, #24]
   19240:	9808      	ldr	r0, [sp, #32]
   19242:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   19246:	2800      	cmp	r0, #0
   19248:	f47e a8ac 	bne.w	173a4 <d_print_comp+0x1ec>
   1924c:	6826      	ldr	r6, [r4, #0]
   1924e:	f016 0620 	ands.w	r6, r6, #32
   19252:	f47e a8a7 	bne.w	173a4 <d_print_comp+0x1ec>
   19256:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1925a:	29ff      	cmp	r1, #255	; 0xff
   1925c:	f003 841b 	beq.w	1ca96 <d_print_comp+0x58de>
   19260:	eb04 0e01 	add.w	lr, r4, r1
   19264:	2020      	movs	r0, #32
   19266:	3101      	adds	r1, #1
   19268:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1926c:	f88e 0004 	strb.w	r0, [lr, #4]
   19270:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   19274:	2e00      	cmp	r6, #0
   19276:	f47e a895 	bne.w	173a4 <d_print_comp+0x1ec>
   1927a:	4620      	mov	r0, r4
   1927c:	4629      	mov	r1, r5
   1927e:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
   19282:	f005 f97b 	bl	1e57c <d_print_function_type>
   19286:	f7fe b88d 	b.w	173a4 <d_print_comp+0x1ec>
   1928a:	4620      	mov	r0, r4
   1928c:	6849      	ldr	r1, [r1, #4]
   1928e:	f7fd ff93 	bl	171b8 <d_print_comp>
   19292:	f7fe b887 	b.w	173a4 <d_print_comp+0x1ec>
   19296:	6827      	ldr	r7, [r4, #0]
   19298:	f017 0904 	ands.w	r9, r7, #4
   1929c:	f040 8799 	bne.w	1a1d2 <d_print_comp+0x301a>
   192a0:	6848      	ldr	r0, [r1, #4]
   192a2:	e890 0180 	ldmia.w	r0, {r7, r8}
   192a6:	f1b8 0f00 	cmp.w	r8, #0
   192aa:	f43e a87b 	beq.w	173a4 <d_print_comp+0x1ec>
   192ae:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   192b2:	f108 35ff 	add.w	r5, r8, #4294967295
   192b6:	f104 0a04 	add.w	sl, r4, #4
   192ba:	f005 0b01 	and.w	fp, r5, #1
   192be:	29ff      	cmp	r1, #255	; 0xff
   192c0:	783e      	ldrb	r6, [r7, #0]
   192c2:	f003 8272 	beq.w	1c7aa <d_print_comp+0x55f2>
   192c6:	460b      	mov	r3, r1
   192c8:	3101      	adds	r1, #1
   192ca:	2501      	movs	r5, #1
   192cc:	18e0      	adds	r0, r4, r3
   192ce:	45a8      	cmp	r8, r5
   192d0:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   192d4:	7106      	strb	r6, [r0, #4]
   192d6:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   192da:	f43e a863 	beq.w	173a4 <d_print_comp+0x1ec>
   192de:	f1bb 0f00 	cmp.w	fp, #0
   192e2:	d011      	beq.n	19308 <d_print_comp+0x2150>
   192e4:	29ff      	cmp	r1, #255	; 0xff
   192e6:	5d7e      	ldrb	r6, [r7, r5]
   192e8:	f003 82a3 	beq.w	1c832 <d_print_comp+0x567a>
   192ec:	460b      	mov	r3, r1
   192ee:	3101      	adds	r1, #1
   192f0:	3501      	adds	r5, #1
   192f2:	eb04 0c03 	add.w	ip, r4, r3
   192f6:	45a8      	cmp	r8, r5
   192f8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   192fc:	f88c 6004 	strb.w	r6, [ip, #4]
   19300:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   19304:	f43e a84e 	beq.w	173a4 <d_print_comp+0x1ec>
   19308:	29ff      	cmp	r1, #255	; 0xff
   1930a:	460b      	mov	r3, r1
   1930c:	5d7e      	ldrb	r6, [r7, r5]
   1930e:	f101 0201 	add.w	r2, r1, #1
   19312:	f000 87ca 	beq.w	1a2aa <d_print_comp+0x30f2>
   19316:	eb04 0c03 	add.w	ip, r4, r3
   1931a:	3501      	adds	r5, #1
   1931c:	1c51      	adds	r1, r2, #1
   1931e:	2aff      	cmp	r2, #255	; 0xff
   19320:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   19324:	4613      	mov	r3, r2
   19326:	f88c 6004 	strb.w	r6, [ip, #4]
   1932a:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   1932e:	5d7e      	ldrb	r6, [r7, r5]
   19330:	d1de      	bne.n	192f0 <d_print_comp+0x2138>
   19332:	4611      	mov	r1, r2
   19334:	4650      	mov	r0, sl
   19336:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1933a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1933e:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   19342:	4798      	blx	r3
   19344:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   19348:	2101      	movs	r1, #1
   1934a:	2300      	movs	r3, #0
   1934c:	1842      	adds	r2, r0, r1
   1934e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19352:	e7cd      	b.n	192f0 <d_print_comp+0x2138>
   19354:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
   19358:	aa18      	add	r2, sp, #96	; 0x60
   1935a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1935e:	4620      	mov	r0, r4
   19360:	9507      	str	r5, [sp, #28]
   19362:	f842 1d48 	str.w	r1, [r2, #-72]!
   19366:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
   1936a:	2200      	movs	r2, #0
   1936c:	6869      	ldr	r1, [r5, #4]
   1936e:	9208      	str	r2, [sp, #32]
   19370:	9309      	str	r3, [sp, #36]	; 0x24
   19372:	f7fd ff21 	bl	171b8 <d_print_comp>
   19376:	9a08      	ldr	r2, [sp, #32]
   19378:	b91a      	cbnz	r2, 19382 <d_print_comp+0x21ca>
   1937a:	4620      	mov	r0, r4
   1937c:	4629      	mov	r1, r5
   1937e:	f003 fd55 	bl	1ce2c <d_print_mod>
   19382:	9906      	ldr	r1, [sp, #24]
   19384:	f8c4 1118 	str.w	r1, [r4, #280]	; 0x118
   19388:	f7fe b80c 	b.w	173a4 <d_print_comp+0x1ec>
   1938c:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
   19390:	aa18      	add	r2, sp, #96	; 0x60
   19392:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   19396:	4620      	mov	r0, r4
   19398:	9507      	str	r5, [sp, #28]
   1939a:	f842 1d48 	str.w	r1, [r2, #-72]!
   1939e:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
   193a2:	2200      	movs	r2, #0
   193a4:	68a9      	ldr	r1, [r5, #8]
   193a6:	9208      	str	r2, [sp, #32]
   193a8:	9309      	str	r3, [sp, #36]	; 0x24
   193aa:	f7fd ff05 	bl	171b8 <d_print_comp>
   193ae:	9808      	ldr	r0, [sp, #32]
   193b0:	b918      	cbnz	r0, 193ba <d_print_comp+0x2202>
   193b2:	4620      	mov	r0, r4
   193b4:	4629      	mov	r1, r5
   193b6:	f003 fd39 	bl	1ce2c <d_print_mod>
   193ba:	9806      	ldr	r0, [sp, #24]
   193bc:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
   193c0:	f7fd bff0 	b.w	173a4 <d_print_comp+0x1ec>
   193c4:	f8d4 7118 	ldr.w	r7, [r4, #280]	; 0x118
   193c8:	f10d 0b60 	add.w	fp, sp, #96	; 0x60
   193cc:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   193d0:	2200      	movs	r2, #0
   193d2:	9107      	str	r1, [sp, #28]
   193d4:	f84b 7d48 	str.w	r7, [fp, #-72]!
   193d8:	46da      	mov	sl, fp
   193da:	9700      	str	r7, [sp, #0]
   193dc:	9701      	str	r7, [sp, #4]
   193de:	f8c4 b118 	str.w	fp, [r4, #280]	; 0x118
   193e2:	9208      	str	r2, [sp, #32]
   193e4:	9309      	str	r3, [sp, #36]	; 0x24
   193e6:	2f00      	cmp	r7, #0
   193e8:	f003 8341 	beq.w	1ca6e <d_print_comp+0x58b6>
   193ec:	687a      	ldr	r2, [r7, #4]
   193ee:	f04f 0801 	mov.w	r8, #1
   193f2:	7813      	ldrb	r3, [r2, #0]
   193f4:	3b17      	subs	r3, #23
   193f6:	b2d8      	uxtb	r0, r3
   193f8:	2802      	cmp	r0, #2
   193fa:	d828      	bhi.n	1944e <d_print_comp+0x2296>
   193fc:	463e      	mov	r6, r7
   193fe:	46a4      	mov	ip, r4
   19400:	4689      	mov	r9, r1
   19402:	e005      	b.n	19410 <d_print_comp+0x2258>
   19404:	6872      	ldr	r2, [r6, #4]
   19406:	7813      	ldrb	r3, [r2, #0]
   19408:	3b17      	subs	r3, #23
   1940a:	b2d8      	uxtb	r0, r3
   1940c:	2802      	cmp	r0, #2
   1940e:	d81c      	bhi.n	1944a <d_print_comp+0x2292>
   19410:	68b5      	ldr	r5, [r6, #8]
   19412:	ea4f 1408 	mov.w	r4, r8, lsl #4
   19416:	af18      	add	r7, sp, #96	; 0x60
   19418:	193f      	adds	r7, r7, r4
   1941a:	b99d      	cbnz	r5, 19444 <d_print_comp+0x228c>
   1941c:	f1b8 0f03 	cmp.w	r8, #3
   19420:	f1a7 0548 	sub.w	r5, r7, #72	; 0x48
   19424:	f108 0801 	add.w	r8, r8, #1
   19428:	f202 86b3 	bhi.w	1c192 <d_print_comp+0x4fda>
   1942c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   19430:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   19434:	f847 ac48 	str.w	sl, [r7, #-72]
   19438:	eb0b 0a04 	add.w	sl, fp, r4
   1943c:	2401      	movs	r4, #1
   1943e:	f8cc a118 	str.w	sl, [ip, #280]	; 0x118
   19442:	60b4      	str	r4, [r6, #8]
   19444:	6836      	ldr	r6, [r6, #0]
   19446:	2e00      	cmp	r6, #0
   19448:	d1dc      	bne.n	19404 <d_print_comp+0x224c>
   1944a:	4664      	mov	r4, ip
   1944c:	464d      	mov	r5, r9
   1944e:	68a9      	ldr	r1, [r5, #8]
   19450:	4620      	mov	r0, r4
   19452:	f7fd feb1 	bl	171b8 <d_print_comp>
   19456:	9f00      	ldr	r7, [sp, #0]
   19458:	9908      	ldr	r1, [sp, #32]
   1945a:	f8c4 7118 	str.w	r7, [r4, #280]	; 0x118
   1945e:	2900      	cmp	r1, #0
   19460:	f47d afa0 	bne.w	173a4 <d_print_comp+0x1ec>
   19464:	f1b8 0f01 	cmp.w	r8, #1
   19468:	d02a      	beq.n	194c0 <d_print_comp+0x2308>
   1946a:	eb0b 1708 	add.w	r7, fp, r8, lsl #4
   1946e:	f108 36ff 	add.w	r6, r8, #4294967295
   19472:	4620      	mov	r0, r4
   19474:	f008 0801 	and.w	r8, r8, #1
   19478:	f857 1c0c 	ldr.w	r1, [r7, #-12]
   1947c:	3f10      	subs	r7, #16
   1947e:	f003 fcd5 	bl	1ce2c <d_print_mod>
   19482:	2e01      	cmp	r6, #1
   19484:	d019      	beq.n	194ba <d_print_comp+0x2302>
   19486:	f1b8 0f00 	cmp.w	r8, #0
   1948a:	d008      	beq.n	1949e <d_print_comp+0x22e6>
   1948c:	f857 1c0c 	ldr.w	r1, [r7, #-12]
   19490:	4620      	mov	r0, r4
   19492:	3e01      	subs	r6, #1
   19494:	f003 fcca 	bl	1ce2c <d_print_mod>
   19498:	3f10      	subs	r7, #16
   1949a:	2e01      	cmp	r6, #1
   1949c:	d00d      	beq.n	194ba <d_print_comp+0x2302>
   1949e:	f857 1c0c 	ldr.w	r1, [r7, #-12]
   194a2:	4620      	mov	r0, r4
   194a4:	f003 fcc2 	bl	1ce2c <d_print_mod>
   194a8:	3e02      	subs	r6, #2
   194aa:	f857 1c1c 	ldr.w	r1, [r7, #-28]
   194ae:	4620      	mov	r0, r4
   194b0:	f003 fcbc 	bl	1ce2c <d_print_mod>
   194b4:	3f20      	subs	r7, #32
   194b6:	2e01      	cmp	r6, #1
   194b8:	d1f1      	bne.n	1949e <d_print_comp+0x22e6>
   194ba:	f8d4 7118 	ldr.w	r7, [r4, #280]	; 0x118
   194be:	9701      	str	r7, [sp, #4]
   194c0:	4620      	mov	r0, r4
   194c2:	4629      	mov	r1, r5
   194c4:	9a01      	ldr	r2, [sp, #4]
   194c6:	f004 ff6b 	bl	1e3a0 <d_print_array_type>
   194ca:	f7fd bf6b 	b.w	173a4 <d_print_comp+0x1ec>
   194ce:	f9b1 300a 	ldrsh.w	r3, [r1, #10]
   194d2:	2b00      	cmp	r3, #0
   194d4:	f040 87b0 	bne.w	1a438 <d_print_comp+0x3280>
   194d8:	6869      	ldr	r1, [r5, #4]
   194da:	4b8c      	ldr	r3, [pc, #560]	; (1970c <d_print_comp+0x2554>)
   194dc:	684a      	ldr	r2, [r1, #4]
   194de:	429a      	cmp	r2, r3
   194e0:	bf08      	it	eq
   194e2:	f8d4 1104 	ldreq.w	r1, [r4, #260]	; 0x104
   194e6:	d011      	beq.n	1950c <d_print_comp+0x2354>
   194e8:	4620      	mov	r0, r4
   194ea:	f7fd fe65 	bl	171b8 <d_print_comp>
   194ee:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   194f2:	1c59      	adds	r1, r3, #1
   194f4:	2bff      	cmp	r3, #255	; 0xff
   194f6:	f002 879b 	beq.w	1c430 <d_print_comp+0x5278>
   194fa:	eb04 0e03 	add.w	lr, r4, r3
   194fe:	2020      	movs	r0, #32
   19500:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   19504:	f88e 0004 	strb.w	r0, [lr, #4]
   19508:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1950c:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
   19510:	2b00      	cmp	r3, #0
   19512:	f000 85f2 	beq.w	1a0fa <d_print_comp+0x2f42>
   19516:	29ff      	cmp	r1, #255	; 0xff
   19518:	f003 8063 	beq.w	1c5e2 <d_print_comp+0x542a>
   1951c:	eb04 0c01 	add.w	ip, r4, r1
   19520:	3101      	adds	r1, #1
   19522:	235f      	movs	r3, #95	; 0x5f
   19524:	29ff      	cmp	r1, #255	; 0xff
   19526:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1952a:	f88c 3004 	strb.w	r3, [ip, #4]
   1952e:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   19532:	f003 8043 	beq.w	1c5bc <d_print_comp+0x5404>
   19536:	eb04 0c01 	add.w	ip, r4, r1
   1953a:	3101      	adds	r1, #1
   1953c:	2341      	movs	r3, #65	; 0x41
   1953e:	29ff      	cmp	r1, #255	; 0xff
   19540:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   19544:	f88c 3004 	strb.w	r3, [ip, #4]
   19548:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1954c:	f003 8023 	beq.w	1c596 <d_print_comp+0x53de>
   19550:	eb04 0c01 	add.w	ip, r4, r1
   19554:	3101      	adds	r1, #1
   19556:	2563      	movs	r5, #99	; 0x63
   19558:	29ff      	cmp	r1, #255	; 0xff
   1955a:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1955e:	f88c 5004 	strb.w	r5, [ip, #4]
   19562:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
   19566:	f003 8004 	beq.w	1c572 <d_print_comp+0x53ba>
   1956a:	eb04 0c01 	add.w	ip, r4, r1
   1956e:	3101      	adds	r1, #1
   19570:	2363      	movs	r3, #99	; 0x63
   19572:	29ff      	cmp	r1, #255	; 0xff
   19574:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   19578:	f88c 3004 	strb.w	r3, [ip, #4]
   1957c:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   19580:	f002 87e4 	beq.w	1c54c <d_print_comp+0x5394>
   19584:	eb04 0c01 	add.w	ip, r4, r1
   19588:	3101      	adds	r1, #1
   1958a:	2075      	movs	r0, #117	; 0x75
   1958c:	29ff      	cmp	r1, #255	; 0xff
   1958e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   19592:	f88c 0004 	strb.w	r0, [ip, #4]
   19596:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1959a:	f000 82f7 	beq.w	19b8c <d_print_comp+0x29d4>
   1959e:	1c4a      	adds	r2, r1, #1
   195a0:	1861      	adds	r1, r4, r1
   195a2:	206d      	movs	r0, #109	; 0x6d
   195a4:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   195a8:	7108      	strb	r0, [r1, #4]
   195aa:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   195ae:	f7fd bef9 	b.w	173a4 <d_print_comp+0x1ec>
   195b2:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   195b6:	29ff      	cmp	r1, #255	; 0xff
   195b8:	f001 8456 	beq.w	1ae68 <d_print_comp+0x3cb0>
   195bc:	eb04 0c01 	add.w	ip, r4, r1
   195c0:	3101      	adds	r1, #1
   195c2:	2076      	movs	r0, #118	; 0x76
   195c4:	29ff      	cmp	r1, #255	; 0xff
   195c6:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   195ca:	f88c 0004 	strb.w	r0, [ip, #4]
   195ce:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   195d2:	f001 8436 	beq.w	1ae42 <d_print_comp+0x3c8a>
   195d6:	eb04 0e01 	add.w	lr, r4, r1
   195da:	3101      	adds	r1, #1
   195dc:	2074      	movs	r0, #116	; 0x74
   195de:	29ff      	cmp	r1, #255	; 0xff
   195e0:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   195e4:	f88e 0004 	strb.w	r0, [lr, #4]
   195e8:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   195ec:	f001 8416 	beq.w	1ae1c <d_print_comp+0x3c64>
   195f0:	eb04 0c01 	add.w	ip, r4, r1
   195f4:	3101      	adds	r1, #1
   195f6:	2061      	movs	r0, #97	; 0x61
   195f8:	29ff      	cmp	r1, #255	; 0xff
   195fa:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   195fe:	f88c 0004 	strb.w	r0, [ip, #4]
   19602:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   19606:	f001 83f6 	beq.w	1adf6 <d_print_comp+0x3c3e>
   1960a:	eb04 0e01 	add.w	lr, r4, r1
   1960e:	3101      	adds	r1, #1
   19610:	2062      	movs	r0, #98	; 0x62
   19612:	29ff      	cmp	r1, #255	; 0xff
   19614:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   19618:	f88e 0004 	strb.w	r0, [lr, #4]
   1961c:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   19620:	f001 83d6 	beq.w	1add0 <d_print_comp+0x3c18>
   19624:	eb04 0c01 	add.w	ip, r4, r1
   19628:	3101      	adds	r1, #1
   1962a:	206c      	movs	r0, #108	; 0x6c
   1962c:	29ff      	cmp	r1, #255	; 0xff
   1962e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   19632:	f88c 0004 	strb.w	r0, [ip, #4]
   19636:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1963a:	f001 83b6 	beq.w	1adaa <d_print_comp+0x3bf2>
   1963e:	eb04 0e01 	add.w	lr, r4, r1
   19642:	3101      	adds	r1, #1
   19644:	2065      	movs	r0, #101	; 0x65
   19646:	29ff      	cmp	r1, #255	; 0xff
   19648:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1964c:	f88e 0004 	strb.w	r0, [lr, #4]
   19650:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   19654:	f001 8396 	beq.w	1ad84 <d_print_comp+0x3bcc>
   19658:	eb04 0c01 	add.w	ip, r4, r1
   1965c:	3101      	adds	r1, #1
   1965e:	2020      	movs	r0, #32
   19660:	29ff      	cmp	r1, #255	; 0xff
   19662:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   19666:	f88c 0004 	strb.w	r0, [ip, #4]
   1966a:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1966e:	f001 8376 	beq.w	1ad5e <d_print_comp+0x3ba6>
   19672:	eb04 0e01 	add.w	lr, r4, r1
   19676:	3101      	adds	r1, #1
   19678:	2066      	movs	r0, #102	; 0x66
   1967a:	29ff      	cmp	r1, #255	; 0xff
   1967c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   19680:	f88e 0004 	strb.w	r0, [lr, #4]
   19684:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   19688:	f001 830a 	beq.w	1aca0 <d_print_comp+0x3ae8>
   1968c:	eb04 0c01 	add.w	ip, r4, r1
   19690:	3101      	adds	r1, #1
   19692:	206f      	movs	r0, #111	; 0x6f
   19694:	29ff      	cmp	r1, #255	; 0xff
   19696:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1969a:	f88c 0004 	strb.w	r0, [ip, #4]
   1969e:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   196a2:	f001 82ea 	beq.w	1ac7a <d_print_comp+0x3ac2>
   196a6:	eb04 0e01 	add.w	lr, r4, r1
   196aa:	3101      	adds	r1, #1
   196ac:	2072      	movs	r0, #114	; 0x72
   196ae:	29ff      	cmp	r1, #255	; 0xff
   196b0:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   196b4:	f88e 0004 	strb.w	r0, [lr, #4]
   196b8:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   196bc:	f000 81c6 	beq.w	19a4c <d_print_comp+0x2894>
   196c0:	1c48      	adds	r0, r1, #1
   196c2:	eb04 0c01 	add.w	ip, r4, r1
   196c6:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   196ca:	2120      	movs	r1, #32
   196cc:	4620      	mov	r0, r4
   196ce:	f88c 1004 	strb.w	r1, [ip, #4]
   196d2:	f884 1108 	strb.w	r1, [r4, #264]	; 0x108
   196d6:	6869      	ldr	r1, [r5, #4]
   196d8:	f7fd fd6e 	bl	171b8 <d_print_comp>
   196dc:	f7fd be62 	b.w	173a4 <d_print_comp+0x1ec>
   196e0:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   196e4:	1c48      	adds	r0, r1, #1
   196e6:	29ff      	cmp	r1, #255	; 0xff
   196e8:	f001 86d5 	beq.w	1b496 <d_print_comp+0x42de>
   196ec:	eb04 0e01 	add.w	lr, r4, r1
   196f0:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   196f4:	217e      	movs	r1, #126	; 0x7e
   196f6:	4620      	mov	r0, r4
   196f8:	f88e 1004 	strb.w	r1, [lr, #4]
   196fc:	f884 1108 	strb.w	r1, [r4, #264]	; 0x108
   19700:	68a9      	ldr	r1, [r5, #8]
   19702:	f7fd fd59 	bl	171b8 <d_print_comp>
   19706:	f7fd be4d 	b.w	173a4 <d_print_comp+0x1ec>
   1970a:	bf00      	nop
   1970c:	0002c300 	.word	0x0002c300
   19710:	0002c974 	.word	0x0002c974
   19714:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   19718:	29ff      	cmp	r1, #255	; 0xff
   1971a:	f001 87c5 	beq.w	1b6a8 <d_print_comp+0x44f0>
   1971e:	1862      	adds	r2, r4, r1
   19720:	3101      	adds	r1, #1
   19722:	206a      	movs	r0, #106	; 0x6a
   19724:	29ff      	cmp	r1, #255	; 0xff
   19726:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1972a:	7110      	strb	r0, [r2, #4]
   1972c:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   19730:	f001 87a7 	beq.w	1b682 <d_print_comp+0x44ca>
   19734:	eb04 0e01 	add.w	lr, r4, r1
   19738:	3101      	adds	r1, #1
   1973a:	2361      	movs	r3, #97	; 0x61
   1973c:	29ff      	cmp	r1, #255	; 0xff
   1973e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   19742:	f88e 3004 	strb.w	r3, [lr, #4]
   19746:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1974a:	f001 8787 	beq.w	1b65c <d_print_comp+0x44a4>
   1974e:	eb04 0c01 	add.w	ip, r4, r1
   19752:	3101      	adds	r1, #1
   19754:	2376      	movs	r3, #118	; 0x76
   19756:	29ff      	cmp	r1, #255	; 0xff
   19758:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1975c:	f88c 3004 	strb.w	r3, [ip, #4]
   19760:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   19764:	f001 8767 	beq.w	1b636 <d_print_comp+0x447e>
   19768:	eb04 0e01 	add.w	lr, r4, r1
   1976c:	3101      	adds	r1, #1
   1976e:	2361      	movs	r3, #97	; 0x61
   19770:	29ff      	cmp	r1, #255	; 0xff
   19772:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   19776:	f88e 3004 	strb.w	r3, [lr, #4]
   1977a:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1977e:	f001 8747 	beq.w	1b610 <d_print_comp+0x4458>
   19782:	eb04 0c01 	add.w	ip, r4, r1
   19786:	3101      	adds	r1, #1
   19788:	2320      	movs	r3, #32
   1978a:	29ff      	cmp	r1, #255	; 0xff
   1978c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   19790:	f88c 3004 	strb.w	r3, [ip, #4]
   19794:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   19798:	f001 8727 	beq.w	1b5ea <d_print_comp+0x4432>
   1979c:	eb04 0e01 	add.w	lr, r4, r1
   197a0:	3101      	adds	r1, #1
   197a2:	2372      	movs	r3, #114	; 0x72
   197a4:	29ff      	cmp	r1, #255	; 0xff
   197a6:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   197aa:	f88e 3004 	strb.w	r3, [lr, #4]
   197ae:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   197b2:	f001 8707 	beq.w	1b5c4 <d_print_comp+0x440c>
   197b6:	eb04 0c01 	add.w	ip, r4, r1
   197ba:	3101      	adds	r1, #1
   197bc:	2365      	movs	r3, #101	; 0x65
   197be:	29ff      	cmp	r1, #255	; 0xff
   197c0:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   197c4:	f88c 3004 	strb.w	r3, [ip, #4]
   197c8:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   197cc:	f001 86e7 	beq.w	1b59e <d_print_comp+0x43e6>
   197d0:	eb04 0e01 	add.w	lr, r4, r1
   197d4:	3101      	adds	r1, #1
   197d6:	2373      	movs	r3, #115	; 0x73
   197d8:	29ff      	cmp	r1, #255	; 0xff
   197da:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   197de:	f88e 3004 	strb.w	r3, [lr, #4]
   197e2:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   197e6:	f001 86c7 	beq.w	1b578 <d_print_comp+0x43c0>
   197ea:	eb04 0c01 	add.w	ip, r4, r1
   197ee:	3101      	adds	r1, #1
   197f0:	236f      	movs	r3, #111	; 0x6f
   197f2:	29ff      	cmp	r1, #255	; 0xff
   197f4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   197f8:	f88c 3004 	strb.w	r3, [ip, #4]
   197fc:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   19800:	f001 86a7 	beq.w	1b552 <d_print_comp+0x439a>
   19804:	eb04 0e01 	add.w	lr, r4, r1
   19808:	3101      	adds	r1, #1
   1980a:	2375      	movs	r3, #117	; 0x75
   1980c:	29ff      	cmp	r1, #255	; 0xff
   1980e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   19812:	f88e 3004 	strb.w	r3, [lr, #4]
   19816:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1981a:	f001 8687 	beq.w	1b52c <d_print_comp+0x4374>
   1981e:	eb04 0c01 	add.w	ip, r4, r1
   19822:	3101      	adds	r1, #1
   19824:	2372      	movs	r3, #114	; 0x72
   19826:	29ff      	cmp	r1, #255	; 0xff
   19828:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1982c:	f88c 3004 	strb.w	r3, [ip, #4]
   19830:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   19834:	f001 8667 	beq.w	1b506 <d_print_comp+0x434e>
   19838:	eb04 0e01 	add.w	lr, r4, r1
   1983c:	3101      	adds	r1, #1
   1983e:	2363      	movs	r3, #99	; 0x63
   19840:	29ff      	cmp	r1, #255	; 0xff
   19842:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   19846:	f88e 3004 	strb.w	r3, [lr, #4]
   1984a:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1984e:	f001 8647 	beq.w	1b4e0 <d_print_comp+0x4328>
   19852:	eb04 0c01 	add.w	ip, r4, r1
   19856:	3101      	adds	r1, #1
   19858:	2365      	movs	r3, #101	; 0x65
   1985a:	29ff      	cmp	r1, #255	; 0xff
   1985c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   19860:	f88c 3004 	strb.w	r3, [ip, #4]
   19864:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   19868:	f000 8125 	beq.w	19ab6 <d_print_comp+0x28fe>
   1986c:	1c48      	adds	r0, r1, #1
   1986e:	eb04 0e01 	add.w	lr, r4, r1
   19872:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   19876:	2120      	movs	r1, #32
   19878:	4620      	mov	r0, r4
   1987a:	f88e 1004 	strb.w	r1, [lr, #4]
   1987e:	f884 1108 	strb.w	r1, [r4, #264]	; 0x108
   19882:	6869      	ldr	r1, [r5, #4]
   19884:	f7fd fc98 	bl	171b8 <d_print_comp>
   19888:	f7fd bd8c 	b.w	173a4 <d_print_comp+0x1ec>
   1988c:	684a      	ldr	r2, [r1, #4]
   1988e:	2600      	movs	r6, #0
   19890:	f892 e000 	ldrb.w	lr, [r2]
   19894:	f1be 0f23 	cmp.w	lr, #35	; 0x23
   19898:	d108      	bne.n	198ac <d_print_comp+0x26f4>
   1989a:	6856      	ldr	r6, [r2, #4]
   1989c:	7c36      	ldrb	r6, [r6, #16]
   1989e:	b12e      	cbz	r6, 198ac <d_print_comp+0x26f4>
   198a0:	2e06      	cmp	r6, #6
   198a2:	f242 8589 	bls.w	1c3b8 <d_print_comp+0x5200>
   198a6:	2e07      	cmp	r6, #7
   198a8:	f002 8569 	beq.w	1c37e <d_print_comp+0x51c6>
   198ac:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   198b0:	1c48      	adds	r0, r1, #1
   198b2:	29ff      	cmp	r1, #255	; 0xff
   198b4:	f002 84c9 	beq.w	1c24a <d_print_comp+0x5092>
   198b8:	eb04 0c01 	add.w	ip, r4, r1
   198bc:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   198c0:	2128      	movs	r1, #40	; 0x28
   198c2:	4620      	mov	r0, r4
   198c4:	f88c 1004 	strb.w	r1, [ip, #4]
   198c8:	f884 1108 	strb.w	r1, [r4, #264]	; 0x108
   198cc:	6869      	ldr	r1, [r5, #4]
   198ce:	f7fd fc73 	bl	171b8 <d_print_comp>
   198d2:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   198d6:	1c59      	adds	r1, r3, #1
   198d8:	2bff      	cmp	r3, #255	; 0xff
   198da:	f002 84a3 	beq.w	1c224 <d_print_comp+0x506c>
   198de:	eb04 0e03 	add.w	lr, r4, r3
   198e2:	2229      	movs	r2, #41	; 0x29
   198e4:	f884 2108 	strb.w	r2, [r4, #264]	; 0x108
   198e8:	f88e 2004 	strb.w	r2, [lr, #4]
   198ec:	7828      	ldrb	r0, [r5, #0]
   198ee:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   198f2:	2836      	cmp	r0, #54	; 0x36
   198f4:	f002 85f6 	beq.w	1c4e4 <d_print_comp+0x532c>
   198f8:	2e08      	cmp	r6, #8
   198fa:	f002 85ca 	beq.w	1c492 <d_print_comp+0x52da>
   198fe:	4620      	mov	r0, r4
   19900:	68a9      	ldr	r1, [r5, #8]
   19902:	f7fd fc59 	bl	171b8 <d_print_comp>
   19906:	f7fd bd4d 	b.w	173a4 <d_print_comp+0x1ec>
   1990a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1990e:	1d20      	adds	r0, r4, #4
   19910:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19914:	f884 a103 	strb.w	sl, [r4, #259]	; 0x103
   19918:	4798      	blx	r3
   1991a:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1991e:	2301      	movs	r3, #1
   19920:	2100      	movs	r1, #0
   19922:	18c2      	adds	r2, r0, r3
   19924:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19928:	f7fd be2b 	b.w	17582 <d_print_comp+0x3ca>
   1992c:	2600      	movs	r6, #0
   1992e:	f8d4 710c 	ldr.w	r7, [r4, #268]	; 0x10c
   19932:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19936:	1d20      	adds	r0, r4, #4
   19938:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   1993c:	47b8      	blx	r7
   1993e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19942:	2201      	movs	r2, #1
   19944:	4631      	mov	r1, r6
   19946:	189f      	adds	r7, r3, r2
   19948:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
   1994c:	f7fd bfc1 	b.w	178d2 <d_print_comp+0x71a>
   19950:	2600      	movs	r6, #0
   19952:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19956:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1995a:	1d20      	adds	r0, r4, #4
   1995c:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   19960:	4798      	blx	r3
   19962:	f8d4 7124 	ldr.w	r7, [r4, #292]	; 0x124
   19966:	2201      	movs	r2, #1
   19968:	4631      	mov	r1, r6
   1996a:	18bb      	adds	r3, r7, r2
   1996c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19970:	f7ff ba1f 	b.w	18db2 <d_print_comp+0x1bfa>
   19974:	2600      	movs	r6, #0
   19976:	1d20      	adds	r0, r4, #4
   19978:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1997c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19980:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   19984:	4798      	blx	r3
   19986:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1998a:	2001      	movs	r0, #1
   1998c:	4631      	mov	r1, r6
   1998e:	181a      	adds	r2, r3, r0
   19990:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19994:	f7ff b906 	b.w	18ba4 <d_print_comp+0x19ec>
   19998:	2600      	movs	r6, #0
   1999a:	1d20      	adds	r0, r4, #4
   1999c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   199a0:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   199a4:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   199a8:	4798      	blx	r3
   199aa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   199ae:	2001      	movs	r0, #1
   199b0:	4631      	mov	r1, r6
   199b2:	181a      	adds	r2, r3, r0
   199b4:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   199b8:	f7fe bf59 	b.w	1886e <d_print_comp+0x16b6>
   199bc:	2600      	movs	r6, #0
   199be:	1d20      	adds	r0, r4, #4
   199c0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   199c4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   199c8:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   199cc:	4798      	blx	r3
   199ce:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   199d2:	2001      	movs	r0, #1
   199d4:	4631      	mov	r1, r6
   199d6:	1813      	adds	r3, r2, r0
   199d8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   199dc:	f7ff bb42 	b.w	19064 <d_print_comp+0x1eac>
   199e0:	2600      	movs	r6, #0
   199e2:	1d20      	adds	r0, r4, #4
   199e4:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   199e8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   199ec:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   199f0:	4798      	blx	r3
   199f2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   199f6:	2001      	movs	r0, #1
   199f8:	4631      	mov	r1, r6
   199fa:	181a      	adds	r2, r3, r0
   199fc:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19a00:	f7fe bc79 	b.w	182f6 <d_print_comp+0x113e>
   19a04:	2600      	movs	r6, #0
   19a06:	1d20      	adds	r0, r4, #4
   19a08:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19a0c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19a10:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   19a14:	4798      	blx	r3
   19a16:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   19a1a:	2001      	movs	r0, #1
   19a1c:	4631      	mov	r1, r6
   19a1e:	1813      	adds	r3, r2, r0
   19a20:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19a24:	f7fe bd4c 	b.w	184c0 <d_print_comp+0x1308>
   19a28:	2600      	movs	r6, #0
   19a2a:	1d20      	adds	r0, r4, #4
   19a2c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19a30:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19a34:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   19a38:	4798      	blx	r3
   19a3a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   19a3e:	2001      	movs	r0, #1
   19a40:	4631      	mov	r1, r6
   19a42:	1813      	adds	r3, r2, r0
   19a44:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19a48:	f7ff b800 	b.w	18a4c <d_print_comp+0x1894>
   19a4c:	2600      	movs	r6, #0
   19a4e:	1d20      	adds	r0, r4, #4
   19a50:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19a54:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19a58:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   19a5c:	4798      	blx	r3
   19a5e:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   19a62:	2001      	movs	r0, #1
   19a64:	4631      	mov	r1, r6
   19a66:	1813      	adds	r3, r2, r0
   19a68:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19a6c:	e629      	b.n	196c2 <d_print_comp+0x250a>
   19a6e:	2600      	movs	r6, #0
   19a70:	1d20      	adds	r0, r4, #4
   19a72:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19a76:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   19a7a:	f8d4 710c 	ldr.w	r7, [r4, #268]	; 0x10c
   19a7e:	47b8      	blx	r7
   19a80:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19a84:	2001      	movs	r0, #1
   19a86:	4631      	mov	r1, r6
   19a88:	181a      	adds	r2, r3, r0
   19a8a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19a8e:	f7fd bf00 	b.w	17892 <d_print_comp+0x6da>
   19a92:	2600      	movs	r6, #0
   19a94:	f8d4 710c 	ldr.w	r7, [r4, #268]	; 0x10c
   19a98:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19a9c:	1d20      	adds	r0, r4, #4
   19a9e:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   19aa2:	47b8      	blx	r7
   19aa4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19aa8:	2201      	movs	r2, #1
   19aaa:	4631      	mov	r1, r6
   19aac:	189f      	adds	r7, r3, r2
   19aae:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
   19ab2:	f7fe b946 	b.w	17d42 <d_print_comp+0xb8a>
   19ab6:	2600      	movs	r6, #0
   19ab8:	1d20      	adds	r0, r4, #4
   19aba:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19abe:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19ac2:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   19ac6:	4798      	blx	r3
   19ac8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19acc:	2001      	movs	r0, #1
   19ace:	4631      	mov	r1, r6
   19ad0:	181a      	adds	r2, r3, r0
   19ad2:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19ad6:	e6ca      	b.n	1986e <d_print_comp+0x26b6>
   19ad8:	2600      	movs	r6, #0
   19ada:	1d20      	adds	r0, r4, #4
   19adc:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19ae0:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19ae4:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   19ae8:	4798      	blx	r3
   19aea:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   19aee:	2001      	movs	r0, #1
   19af0:	4631      	mov	r1, r6
   19af2:	1813      	adds	r3, r2, r0
   19af4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19af8:	f7fe b832 	b.w	17b60 <d_print_comp+0x9a8>
   19afc:	2600      	movs	r6, #0
   19afe:	1d20      	adds	r0, r4, #4
   19b00:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19b04:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19b08:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   19b0c:	4798      	blx	r3
   19b0e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19b12:	2201      	movs	r2, #1
   19b14:	4631      	mov	r1, r6
   19b16:	1898      	adds	r0, r3, r2
   19b18:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   19b1c:	f7fe b89c 	b.w	17c58 <d_print_comp+0xaa0>
   19b20:	2600      	movs	r6, #0
   19b22:	1d20      	adds	r0, r4, #4
   19b24:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19b28:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19b2c:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   19b30:	4798      	blx	r3
   19b32:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19b36:	2001      	movs	r0, #1
   19b38:	4631      	mov	r1, r6
   19b3a:	181a      	adds	r2, r3, r0
   19b3c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19b40:	f7fd bc9a 	b.w	17478 <d_print_comp+0x2c0>
   19b44:	2600      	movs	r6, #0
   19b46:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19b4a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19b4e:	1d20      	adds	r0, r4, #4
   19b50:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   19b54:	4798      	blx	r3
   19b56:	f8d4 7124 	ldr.w	r7, [r4, #292]	; 0x124
   19b5a:	2201      	movs	r2, #1
   19b5c:	4631      	mov	r1, r6
   19b5e:	18bb      	adds	r3, r7, r2
   19b60:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19b64:	f7fd bdc2 	b.w	176ec <d_print_comp+0x534>
   19b68:	2600      	movs	r6, #0
   19b6a:	1d20      	adds	r0, r4, #4
   19b6c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19b70:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19b74:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   19b78:	4798      	blx	r3
   19b7a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   19b7e:	2001      	movs	r0, #1
   19b80:	4631      	mov	r1, r6
   19b82:	1813      	adds	r3, r2, r0
   19b84:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19b88:	f7fe ba96 	b.w	180b8 <d_print_comp+0xf00>
   19b8c:	2500      	movs	r5, #0
   19b8e:	1d20      	adds	r0, r4, #4
   19b90:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19b94:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19b98:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   19b9c:	4798      	blx	r3
   19b9e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19ba2:	2201      	movs	r2, #1
   19ba4:	4629      	mov	r1, r5
   19ba6:	1898      	adds	r0, r3, r2
   19ba8:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   19bac:	e4f8      	b.n	195a0 <d_print_comp+0x23e8>
   19bae:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19bb2:	1d20      	adds	r0, r4, #4
   19bb4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19bb8:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   19bbc:	4798      	blx	r3
   19bbe:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19bc2:	2201      	movs	r2, #1
   19bc4:	4631      	mov	r1, r6
   19bc6:	1898      	adds	r0, r3, r2
   19bc8:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   19bcc:	f7ff b81b 	b.w	18c06 <d_print_comp+0x1a4e>
   19bd0:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   19bd4:	29ff      	cmp	r1, #255	; 0xff
   19bd6:	f000 8524 	beq.w	1a622 <d_print_comp+0x346a>
   19bda:	eb04 0c01 	add.w	ip, r4, r1
   19bde:	3101      	adds	r1, #1
   19be0:	202c      	movs	r0, #44	; 0x2c
   19be2:	29ff      	cmp	r1, #255	; 0xff
   19be4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   19be8:	f88c 0004 	strb.w	r0, [ip, #4]
   19bec:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   19bf0:	d00a      	beq.n	19c08 <d_print_comp+0x2a50>
   19bf2:	1c4b      	adds	r3, r1, #1
   19bf4:	eb04 0e01 	add.w	lr, r4, r1
   19bf8:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   19bfc:	f884 9108 	strb.w	r9, [r4, #264]	; 0x108
   19c00:	f88e 9004 	strb.w	r9, [lr, #4]
   19c04:	f7fd bca1 	b.w	1754a <d_print_comp+0x392>
   19c08:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19c0c:	1d20      	adds	r0, r4, #4
   19c0e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19c12:	f884 a103 	strb.w	sl, [r4, #259]	; 0x103
   19c16:	4798      	blx	r3
   19c18:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   19c1c:	2301      	movs	r3, #1
   19c1e:	2100      	movs	r1, #0
   19c20:	18c2      	adds	r2, r0, r3
   19c22:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19c26:	e7e5      	b.n	19bf4 <d_print_comp+0x2a3c>
   19c28:	4611      	mov	r1, r2
   19c2a:	4658      	mov	r0, fp
   19c2c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19c30:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19c34:	f884 a103 	strb.w	sl, [r4, #259]	; 0x103
   19c38:	4798      	blx	r3
   19c3a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   19c3e:	2101      	movs	r1, #1
   19c40:	2300      	movs	r3, #0
   19c42:	1850      	adds	r0, r2, r1
   19c44:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   19c48:	f7ff babe 	b.w	191c8 <d_print_comp+0x2010>
   19c4c:	4611      	mov	r1, r2
   19c4e:	4650      	mov	r0, sl
   19c50:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19c54:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19c58:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   19c5c:	4798      	blx	r3
   19c5e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   19c62:	2101      	movs	r1, #1
   19c64:	2300      	movs	r3, #0
   19c66:	1842      	adds	r2, r0, r1
   19c68:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19c6c:	f7fe b949 	b.w	17f02 <d_print_comp+0xd4a>
   19c70:	4611      	mov	r1, r2
   19c72:	4658      	mov	r0, fp
   19c74:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19c78:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19c7c:	f884 a103 	strb.w	sl, [r4, #259]	; 0x103
   19c80:	4798      	blx	r3
   19c82:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   19c86:	2101      	movs	r1, #1
   19c88:	2300      	movs	r3, #0
   19c8a:	1850      	adds	r0, r2, r1
   19c8c:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   19c90:	f7fd bead 	b.w	179ee <d_print_comp+0x836>
   19c94:	4611      	mov	r1, r2
   19c96:	4658      	mov	r0, fp
   19c98:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19c9c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19ca0:	f884 a103 	strb.w	sl, [r4, #259]	; 0x103
   19ca4:	4798      	blx	r3
   19ca6:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   19caa:	2101      	movs	r1, #1
   19cac:	2300      	movs	r3, #0
   19cae:	1842      	adds	r2, r0, r1
   19cb0:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19cb4:	f7fe bc2d 	b.w	18512 <d_print_comp+0x135a>
   19cb8:	4611      	mov	r1, r2
   19cba:	4650      	mov	r0, sl
   19cbc:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19cc0:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19cc4:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   19cc8:	4798      	blx	r3
   19cca:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   19cce:	2101      	movs	r1, #1
   19cd0:	2300      	movs	r3, #0
   19cd2:	1850      	adds	r0, r2, r1
   19cd4:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   19cd8:	f7fe bdf5 	b.w	188c6 <d_print_comp+0x170e>
   19cdc:	4611      	mov	r1, r2
   19cde:	4658      	mov	r0, fp
   19ce0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19ce4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19ce8:	f884 a103 	strb.w	sl, [r4, #259]	; 0x103
   19cec:	4798      	blx	r3
   19cee:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   19cf2:	2101      	movs	r1, #1
   19cf4:	2300      	movs	r3, #0
   19cf6:	1850      	adds	r0, r2, r1
   19cf8:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   19cfc:	f7fe becf 	b.w	18a9e <d_print_comp+0x18e6>
   19d00:	4611      	mov	r1, r2
   19d02:	4658      	mov	r0, fp
   19d04:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19d08:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19d0c:	f884 a103 	strb.w	sl, [r4, #259]	; 0x103
   19d10:	4798      	blx	r3
   19d12:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   19d16:	2101      	movs	r1, #1
   19d18:	2300      	movs	r3, #0
   19d1a:	1842      	adds	r2, r0, r1
   19d1c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19d20:	f7fe b9f3 	b.w	1810a <d_print_comp+0xf52>
   19d24:	1c4a      	adds	r2, r1, #1
   19d26:	29ff      	cmp	r1, #255	; 0xff
   19d28:	f001 8274 	beq.w	1b214 <d_print_comp+0x405c>
   19d2c:	1861      	adds	r1, r4, r1
   19d2e:	207d      	movs	r0, #125	; 0x7d
   19d30:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   19d34:	7108      	strb	r0, [r1, #4]
   19d36:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   19d3a:	f7fd bb33 	b.w	173a4 <d_print_comp+0x1ec>
   19d3e:	1c4a      	adds	r2, r1, #1
   19d40:	29ff      	cmp	r1, #255	; 0xff
   19d42:	f001 87b7 	beq.w	1bcb4 <d_print_comp+0x4afc>
   19d46:	1861      	adds	r1, r4, r1
   19d48:	207d      	movs	r0, #125	; 0x7d
   19d4a:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   19d4e:	7108      	strb	r0, [r1, #4]
   19d50:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   19d54:	f7fd bb26 	b.w	173a4 <d_print_comp+0x1ec>
   19d58:	1c4a      	adds	r2, r1, #1
   19d5a:	29ff      	cmp	r1, #255	; 0xff
   19d5c:	f001 811a 	beq.w	1af94 <d_print_comp+0x3ddc>
   19d60:	1861      	adds	r1, r4, r1
   19d62:	207d      	movs	r0, #125	; 0x7d
   19d64:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   19d68:	7108      	strb	r0, [r1, #4]
   19d6a:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   19d6e:	f7fd bb19 	b.w	173a4 <d_print_comp+0x1ec>
   19d72:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19d76:	4650      	mov	r0, sl
   19d78:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19d7c:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
   19d80:	4798      	blx	r3
   19d82:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
   19d86:	2201      	movs	r2, #1
   19d88:	2300      	movs	r3, #0
   19d8a:	1888      	adds	r0, r1, r2
   19d8c:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   19d90:	f7ff b863 	b.w	18e5a <d_print_comp+0x1ca2>
   19d94:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19d98:	4650      	mov	r0, sl
   19d9a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19d9e:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   19da2:	4798      	blx	r3
   19da4:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   19da8:	2201      	movs	r2, #1
   19daa:	2300      	movs	r3, #0
   19dac:	1881      	adds	r1, r0, r2
   19dae:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
   19db2:	f7fe b813 	b.w	17ddc <d_print_comp+0xc24>
   19db6:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19dba:	4650      	mov	r0, sl
   19dbc:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19dc0:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
   19dc4:	4798      	blx	r3
   19dc6:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
   19dca:	2201      	movs	r2, #1
   19dcc:	2300      	movs	r3, #0
   19dce:	1888      	adds	r0, r1, r2
   19dd0:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   19dd4:	f7fd bdcf 	b.w	17976 <d_print_comp+0x7be>
   19dd8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19ddc:	4650      	mov	r0, sl
   19dde:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19de2:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
   19de6:	4798      	blx	r3
   19de8:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
   19dec:	2201      	movs	r2, #1
   19dee:	2300      	movs	r3, #0
   19df0:	1888      	adds	r0, r1, r2
   19df2:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   19df6:	f7ff b99c 	b.w	19132 <d_print_comp+0x1f7a>
   19dfa:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19dfe:	4650      	mov	r0, sl
   19e00:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19e04:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   19e08:	4798      	blx	r3
   19e0a:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
   19e0e:	2201      	movs	r2, #1
   19e10:	2300      	movs	r3, #0
   19e12:	1888      	adds	r0, r1, r2
   19e14:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   19e18:	f7fe bbdb 	b.w	185d2 <d_print_comp+0x141a>
   19e1c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19e20:	4650      	mov	r0, sl
   19e22:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19e26:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
   19e2a:	4798      	blx	r3
   19e2c:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
   19e30:	2201      	movs	r2, #1
   19e32:	2300      	movs	r3, #0
   19e34:	1888      	adds	r0, r1, r2
   19e36:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   19e3a:	f7fd bca9 	b.w	17790 <d_print_comp+0x5d8>
   19e3e:	4658      	mov	r0, fp
   19e40:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19e44:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19e48:	f884 a103 	strb.w	sl, [r4, #259]	; 0x103
   19e4c:	4798      	blx	r3
   19e4e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   19e52:	2101      	movs	r1, #1
   19e54:	2300      	movs	r3, #0
   19e56:	1842      	adds	r2, r0, r1
   19e58:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19e5c:	f7fe bc1b 	b.w	18696 <d_print_comp+0x14de>
   19e60:	4611      	mov	r1, r2
   19e62:	4658      	mov	r0, fp
   19e64:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19e68:	f884 a103 	strb.w	sl, [r4, #259]	; 0x103
   19e6c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19e70:	4798      	blx	r3
   19e72:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   19e76:	2101      	movs	r1, #1
   19e78:	2200      	movs	r2, #0
   19e7a:	1846      	adds	r6, r0, r1
   19e7c:	f8c4 6124 	str.w	r6, [r4, #292]	; 0x124
   19e80:	f7fe bbfa 	b.w	18678 <d_print_comp+0x14c0>
   19e84:	4620      	mov	r0, r4
   19e86:	6879      	ldr	r1, [r7, #4]
   19e88:	f7fd f996 	bl	171b8 <d_print_comp>
   19e8c:	f7fd ba8a 	b.w	173a4 <d_print_comp+0x1ec>
   19e90:	f8d9 1004 	ldr.w	r1, [r9, #4]
   19e94:	4620      	mov	r0, r4
   19e96:	f7fd f98f 	bl	171b8 <d_print_comp>
   19e9a:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   19e9e:	464d      	mov	r5, r9
   19ea0:	29ff      	cmp	r1, #255	; 0xff
   19ea2:	f000 843e 	beq.w	1a722 <d_print_comp+0x356a>
   19ea6:	1862      	adds	r2, r4, r1
   19ea8:	3101      	adds	r1, #1
   19eaa:	202d      	movs	r0, #45	; 0x2d
   19eac:	29ff      	cmp	r1, #255	; 0xff
   19eae:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   19eb2:	7110      	strb	r0, [r2, #4]
   19eb4:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   19eb8:	f000 8420 	beq.w	1a6fc <d_print_comp+0x3544>
   19ebc:	eb04 0c01 	add.w	ip, r4, r1
   19ec0:	3101      	adds	r1, #1
   19ec2:	2369      	movs	r3, #105	; 0x69
   19ec4:	29ff      	cmp	r1, #255	; 0xff
   19ec6:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   19eca:	f88c 3004 	strb.w	r3, [ip, #4]
   19ece:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   19ed2:	f000 8400 	beq.w	1a6d6 <d_print_comp+0x351e>
   19ed6:	eb04 0e01 	add.w	lr, r4, r1
   19eda:	3101      	adds	r1, #1
   19edc:	236e      	movs	r3, #110	; 0x6e
   19ede:	29ff      	cmp	r1, #255	; 0xff
   19ee0:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   19ee4:	f88e 3004 	strb.w	r3, [lr, #4]
   19ee8:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   19eec:	d00f      	beq.n	19f0e <d_print_comp+0x2d56>
   19eee:	1c48      	adds	r0, r1, #1
   19ef0:	eb04 0c01 	add.w	ip, r4, r1
   19ef4:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   19ef8:	212d      	movs	r1, #45	; 0x2d
   19efa:	4620      	mov	r0, r4
   19efc:	f88c 1004 	strb.w	r1, [ip, #4]
   19f00:	f884 1108 	strb.w	r1, [r4, #264]	; 0x108
   19f04:	68a9      	ldr	r1, [r5, #8]
   19f06:	f7fd f957 	bl	171b8 <d_print_comp>
   19f0a:	f7fd ba4b 	b.w	173a4 <d_print_comp+0x1ec>
   19f0e:	2600      	movs	r6, #0
   19f10:	1d20      	adds	r0, r4, #4
   19f12:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19f16:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19f1a:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   19f1e:	4798      	blx	r3
   19f20:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19f24:	2001      	movs	r0, #1
   19f26:	4631      	mov	r1, r6
   19f28:	181a      	adds	r2, r3, r0
   19f2a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19f2e:	e7df      	b.n	19ef0 <d_print_comp+0x2d38>
   19f30:	684e      	ldr	r6, [r1, #4]
   19f32:	688f      	ldr	r7, [r1, #8]
   19f34:	19f7      	adds	r7, r6, r7
   19f36:	42be      	cmp	r6, r7
   19f38:	f4bd aa34 	bcs.w	173a4 <d_print_comp+0x1ec>
   19f3c:	f04f 0900 	mov.w	r9, #0
   19f40:	f104 0a04 	add.w	sl, r4, #4
   19f44:	e00f      	b.n	19f66 <d_print_comp+0x2dae>
   19f46:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   19f4a:	1c4b      	adds	r3, r1, #1
   19f4c:	29ff      	cmp	r1, #255	; 0xff
   19f4e:	f000 80a3 	beq.w	1a098 <d_print_comp+0x2ee0>
   19f52:	1861      	adds	r1, r4, r1
   19f54:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   19f58:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
   19f5c:	710d      	strb	r5, [r1, #4]
   19f5e:	3601      	adds	r6, #1
   19f60:	42b7      	cmp	r7, r6
   19f62:	f67d aa1f 	bls.w	173a4 <d_print_comp+0x1ec>
   19f66:	1bba      	subs	r2, r7, r6
   19f68:	7835      	ldrb	r5, [r6, #0]
   19f6a:	2a03      	cmp	r2, #3
   19f6c:	ddeb      	ble.n	19f46 <d_print_comp+0x2d8e>
   19f6e:	2d5f      	cmp	r5, #95	; 0x5f
   19f70:	d1e9      	bne.n	19f46 <d_print_comp+0x2d8e>
   19f72:	7871      	ldrb	r1, [r6, #1]
   19f74:	295f      	cmp	r1, #95	; 0x5f
   19f76:	d1e6      	bne.n	19f46 <d_print_comp+0x2d8e>
   19f78:	78b0      	ldrb	r0, [r6, #2]
   19f7a:	2855      	cmp	r0, #85	; 0x55
   19f7c:	d1e3      	bne.n	19f46 <d_print_comp+0x2d8e>
   19f7e:	f106 0803 	add.w	r8, r6, #3
   19f82:	4547      	cmp	r7, r8
   19f84:	d9df      	bls.n	19f46 <d_print_comp+0x2d8e>
   19f86:	78f3      	ldrb	r3, [r6, #3]
   19f88:	ea6f 0108 	mvn.w	r1, r8
   19f8c:	187a      	adds	r2, r7, r1
   19f8e:	2000      	movs	r0, #0
   19f90:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   19f94:	f002 0b01 	and.w	fp, r2, #1
   19f98:	1d32      	adds	r2, r6, #4
   19f9a:	fa5f fc81 	uxtb.w	ip, r1
   19f9e:	f1bc 0f09 	cmp.w	ip, #9
   19fa2:	f202 850e 	bhi.w	1c9c2 <d_print_comp+0x580a>
   19fa6:	460b      	mov	r3, r1
   19fa8:	42ba      	cmp	r2, r7
   19faa:	4618      	mov	r0, r3
   19fac:	d0cb      	beq.n	19f46 <d_print_comp+0x2d8e>
   19fae:	f1bb 0f00 	cmp.w	fp, #0
   19fb2:	d040      	beq.n	1a036 <d_print_comp+0x2e7e>
   19fb4:	4690      	mov	r8, r2
   19fb6:	f812 3b01 	ldrb.w	r3, [r2], #1
   19fba:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   19fbe:	fa5f fc81 	uxtb.w	ip, r1
   19fc2:	f1bc 0f09 	cmp.w	ip, #9
   19fc6:	f242 850c 	bls.w	1c9e2 <d_print_comp+0x582a>
   19fca:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   19fce:	fa5f f18c 	uxtb.w	r1, ip
   19fd2:	2905      	cmp	r1, #5
   19fd4:	f242 8572 	bls.w	1cabc <d_print_comp+0x5904>
   19fd8:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   19fdc:	fa5f f18c 	uxtb.w	r1, ip
   19fe0:	2905      	cmp	r1, #5
   19fe2:	d841      	bhi.n	1a068 <d_print_comp+0x2eb0>
   19fe4:	3b57      	subs	r3, #87	; 0x57
   19fe6:	42ba      	cmp	r2, r7
   19fe8:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   19fec:	d123      	bne.n	1a036 <d_print_comp+0x2e7e>
   19fee:	e7aa      	b.n	19f46 <d_print_comp+0x2d8e>
   19ff0:	f1a3 0157 	sub.w	r1, r3, #87	; 0x57
   19ff4:	4690      	mov	r8, r2
   19ff6:	f812 3b01 	ldrb.w	r3, [r2], #1
   19ffa:	eb01 1000 	add.w	r0, r1, r0, lsl #4
   19ffe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1a002:	fa5f fc81 	uxtb.w	ip, r1
   1a006:	f1bc 0f09 	cmp.w	ip, #9
   1a00a:	d910      	bls.n	1a02e <d_print_comp+0x2e76>
   1a00c:	f1a3 0141 	sub.w	r1, r3, #65	; 0x41
   1a010:	b2c9      	uxtb	r1, r1
   1a012:	2905      	cmp	r1, #5
   1a014:	bf98      	it	ls
   1a016:	f1a3 0137 	subls.w	r1, r3, #55	; 0x37
   1a01a:	d908      	bls.n	1a02e <d_print_comp+0x2e76>
   1a01c:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
   1a020:	fa5f fc81 	uxtb.w	ip, r1
   1a024:	f1bc 0f05 	cmp.w	ip, #5
   1a028:	d81e      	bhi.n	1a068 <d_print_comp+0x2eb0>
   1a02a:	f1a3 0157 	sub.w	r1, r3, #87	; 0x57
   1a02e:	42ba      	cmp	r2, r7
   1a030:	eb01 1000 	add.w	r0, r1, r0, lsl #4
   1a034:	d087      	beq.n	19f46 <d_print_comp+0x2d8e>
   1a036:	4690      	mov	r8, r2
   1a038:	f812 3b01 	ldrb.w	r3, [r2], #1
   1a03c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1a040:	fa5f fc81 	uxtb.w	ip, r1
   1a044:	f1bc 0f09 	cmp.w	ip, #9
   1a048:	d9d4      	bls.n	19ff4 <d_print_comp+0x2e3c>
   1a04a:	f1a3 0141 	sub.w	r1, r3, #65	; 0x41
   1a04e:	b2c9      	uxtb	r1, r1
   1a050:	2905      	cmp	r1, #5
   1a052:	bf98      	it	ls
   1a054:	f1a3 0137 	subls.w	r1, r3, #55	; 0x37
   1a058:	d9cc      	bls.n	19ff4 <d_print_comp+0x2e3c>
   1a05a:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
   1a05e:	fa5f fc81 	uxtb.w	ip, r1
   1a062:	f1bc 0f05 	cmp.w	ip, #5
   1a066:	d9c3      	bls.n	19ff0 <d_print_comp+0x2e38>
   1a068:	4547      	cmp	r7, r8
   1a06a:	f67f af6c 	bls.w	19f46 <d_print_comp+0x2d8e>
   1a06e:	28ff      	cmp	r0, #255	; 0xff
   1a070:	f63f af69 	bhi.w	19f46 <d_print_comp+0x2d8e>
   1a074:	2b5f      	cmp	r3, #95	; 0x5f
   1a076:	f47f af66 	bne.w	19f46 <d_print_comp+0x2d8e>
   1a07a:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1a07e:	4605      	mov	r5, r0
   1a080:	29ff      	cmp	r1, #255	; 0xff
   1a082:	f002 86b7 	beq.w	1cdf4 <d_print_comp+0x5c3c>
   1a086:	1862      	adds	r2, r4, r1
   1a088:	1c48      	adds	r0, r1, #1
   1a08a:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
   1a08e:	4646      	mov	r6, r8
   1a090:	7115      	strb	r5, [r2, #4]
   1a092:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   1a096:	e762      	b.n	19f5e <d_print_comp+0x2da6>
   1a098:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a09c:	4650      	mov	r0, sl
   1a09e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a0a2:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   1a0a6:	4798      	blx	r3
   1a0a8:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1a0ac:	2301      	movs	r3, #1
   1a0ae:	2100      	movs	r1, #0
   1a0b0:	18d0      	adds	r0, r2, r3
   1a0b2:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a0b6:	e74c      	b.n	19f52 <d_print_comp+0x2d9a>
   1a0b8:	4620      	mov	r0, r4
   1a0ba:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1a0be:	f7fd f87b 	bl	171b8 <d_print_comp>
   1a0c2:	f7fd b96f 	b.w	173a4 <d_print_comp+0x1ec>
   1a0c6:	4620      	mov	r0, r4
   1a0c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1a0cc:	f7fd f874 	bl	171b8 <d_print_comp>
   1a0d0:	f7fd b968 	b.w	173a4 <d_print_comp+0x1ec>
   1a0d4:	4620      	mov	r0, r4
   1a0d6:	6879      	ldr	r1, [r7, #4]
   1a0d8:	f7fd f86e 	bl	171b8 <d_print_comp>
   1a0dc:	f7fd b962 	b.w	173a4 <d_print_comp+0x1ec>
   1a0e0:	1c4a      	adds	r2, r1, #1
   1a0e2:	29ff      	cmp	r1, #255	; 0xff
   1a0e4:	f002 8315 	beq.w	1c712 <d_print_comp+0x555a>
   1a0e8:	1861      	adds	r1, r4, r1
   1a0ea:	202e      	movs	r0, #46	; 0x2e
   1a0ec:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1a0f0:	7108      	strb	r0, [r1, #4]
   1a0f2:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1a0f6:	f7fe bd8f 	b.w	18c18 <d_print_comp+0x1a60>
   1a0fa:	29ff      	cmp	r1, #255	; 0xff
   1a0fc:	f002 82d4 	beq.w	1c6a8 <d_print_comp+0x54f0>
   1a100:	eb04 0c01 	add.w	ip, r4, r1
   1a104:	3101      	adds	r1, #1
   1a106:	225f      	movs	r2, #95	; 0x5f
   1a108:	29ff      	cmp	r1, #255	; 0xff
   1a10a:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1a10e:	f88c 2004 	strb.w	r2, [ip, #4]
   1a112:	f884 2108 	strb.w	r2, [r4, #264]	; 0x108
   1a116:	f002 82b5 	beq.w	1c684 <d_print_comp+0x54cc>
   1a11a:	eb04 0c01 	add.w	ip, r4, r1
   1a11e:	3101      	adds	r1, #1
   1a120:	2046      	movs	r0, #70	; 0x46
   1a122:	29ff      	cmp	r1, #255	; 0xff
   1a124:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1a128:	f88c 0004 	strb.w	r0, [ip, #4]
   1a12c:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1a130:	f002 8290 	beq.w	1c654 <d_print_comp+0x549c>
   1a134:	eb04 0c01 	add.w	ip, r4, r1
   1a138:	3101      	adds	r1, #1
   1a13a:	2072      	movs	r0, #114	; 0x72
   1a13c:	29ff      	cmp	r1, #255	; 0xff
   1a13e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1a142:	f88c 0004 	strb.w	r0, [ip, #4]
   1a146:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1a14a:	f002 8270 	beq.w	1c62e <d_print_comp+0x5476>
   1a14e:	eb04 0c01 	add.w	ip, r4, r1
   1a152:	3101      	adds	r1, #1
   1a154:	2061      	movs	r0, #97	; 0x61
   1a156:	29ff      	cmp	r1, #255	; 0xff
   1a158:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1a15c:	f88c 0004 	strb.w	r0, [ip, #4]
   1a160:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1a164:	f002 8250 	beq.w	1c608 <d_print_comp+0x5450>
   1a168:	eb04 0c01 	add.w	ip, r4, r1
   1a16c:	3101      	adds	r1, #1
   1a16e:	2063      	movs	r0, #99	; 0x63
   1a170:	29ff      	cmp	r1, #255	; 0xff
   1a172:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1a176:	f88c 0004 	strb.w	r0, [ip, #4]
   1a17a:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1a17e:	d009      	beq.n	1a194 <d_print_comp+0x2fdc>
   1a180:	1c4a      	adds	r2, r1, #1
   1a182:	1861      	adds	r1, r4, r1
   1a184:	2074      	movs	r0, #116	; 0x74
   1a186:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1a18a:	7108      	strb	r0, [r1, #4]
   1a18c:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1a190:	f7fd b908 	b.w	173a4 <d_print_comp+0x1ec>
   1a194:	2500      	movs	r5, #0
   1a196:	1d20      	adds	r0, r4, #4
   1a198:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a19c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a1a0:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   1a1a4:	4798      	blx	r3
   1a1a6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a1aa:	2201      	movs	r2, #1
   1a1ac:	4629      	mov	r1, r5
   1a1ae:	1898      	adds	r0, r3, r2
   1a1b0:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a1b4:	e7e5      	b.n	1a182 <d_print_comp+0x2fca>
   1a1b6:	4620      	mov	r0, r4
   1a1b8:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1a1bc:	f7fc fffc 	bl	171b8 <d_print_comp>
   1a1c0:	f7fd b8f0 	b.w	173a4 <d_print_comp+0x1ec>
   1a1c4:	4620      	mov	r0, r4
   1a1c6:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1a1ca:	f7fc fff5 	bl	171b8 <d_print_comp>
   1a1ce:	f7fd b8e9 	b.w	173a4 <d_print_comp+0x1ec>
   1a1d2:	684a      	ldr	r2, [r1, #4]
   1a1d4:	f8d2 800c 	ldr.w	r8, [r2, #12]
   1a1d8:	6897      	ldr	r7, [r2, #8]
   1a1da:	f1b8 0f00 	cmp.w	r8, #0
   1a1de:	f43d a8e1 	beq.w	173a4 <d_print_comp+0x1ec>
   1a1e2:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1a1e6:	f108 36ff 	add.w	r6, r8, #4294967295
   1a1ea:	f006 0b01 	and.w	fp, r6, #1
   1a1ee:	f04f 0900 	mov.w	r9, #0
   1a1f2:	29ff      	cmp	r1, #255	; 0xff
   1a1f4:	f104 0a04 	add.w	sl, r4, #4
   1a1f8:	783e      	ldrb	r6, [r7, #0]
   1a1fa:	f002 82e7 	beq.w	1c7cc <d_print_comp+0x5614>
   1a1fe:	460b      	mov	r3, r1
   1a200:	3101      	adds	r1, #1
   1a202:	2501      	movs	r5, #1
   1a204:	18e0      	adds	r0, r4, r3
   1a206:	45a8      	cmp	r8, r5
   1a208:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1a20c:	7106      	strb	r6, [r0, #4]
   1a20e:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   1a212:	f43d a8c7 	beq.w	173a4 <d_print_comp+0x1ec>
   1a216:	f1bb 0f00 	cmp.w	fp, #0
   1a21a:	d011      	beq.n	1a240 <d_print_comp+0x3088>
   1a21c:	29ff      	cmp	r1, #255	; 0xff
   1a21e:	5d7e      	ldrb	r6, [r7, r5]
   1a220:	f002 82e5 	beq.w	1c7ee <d_print_comp+0x5636>
   1a224:	460b      	mov	r3, r1
   1a226:	3101      	adds	r1, #1
   1a228:	3501      	adds	r5, #1
   1a22a:	eb04 0c03 	add.w	ip, r4, r3
   1a22e:	45a8      	cmp	r8, r5
   1a230:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1a234:	f88c 6004 	strb.w	r6, [ip, #4]
   1a238:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   1a23c:	f43d a8b2 	beq.w	173a4 <d_print_comp+0x1ec>
   1a240:	29ff      	cmp	r1, #255	; 0xff
   1a242:	460b      	mov	r3, r1
   1a244:	5d7e      	ldrb	r6, [r7, r5]
   1a246:	f101 0201 	add.w	r2, r1, #1
   1a24a:	d01e      	beq.n	1a28a <d_print_comp+0x30d2>
   1a24c:	eb04 0c03 	add.w	ip, r4, r3
   1a250:	3501      	adds	r5, #1
   1a252:	1c51      	adds	r1, r2, #1
   1a254:	2aff      	cmp	r2, #255	; 0xff
   1a256:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1a25a:	4613      	mov	r3, r2
   1a25c:	f88c 6004 	strb.w	r6, [ip, #4]
   1a260:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   1a264:	5d7e      	ldrb	r6, [r7, r5]
   1a266:	d1df      	bne.n	1a228 <d_print_comp+0x3070>
   1a268:	4611      	mov	r1, r2
   1a26a:	4650      	mov	r0, sl
   1a26c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a270:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a274:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   1a278:	4798      	blx	r3
   1a27a:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1a27e:	2101      	movs	r1, #1
   1a280:	2300      	movs	r3, #0
   1a282:	1842      	adds	r2, r0, r1
   1a284:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a288:	e7ce      	b.n	1a228 <d_print_comp+0x3070>
   1a28a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a28e:	4650      	mov	r0, sl
   1a290:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a294:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   1a298:	4798      	blx	r3
   1a29a:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1a29e:	2201      	movs	r2, #1
   1a2a0:	2300      	movs	r3, #0
   1a2a2:	1881      	adds	r1, r0, r2
   1a2a4:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
   1a2a8:	e7d0      	b.n	1a24c <d_print_comp+0x3094>
   1a2aa:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a2ae:	4650      	mov	r0, sl
   1a2b0:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a2b4:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   1a2b8:	4798      	blx	r3
   1a2ba:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1a2be:	2201      	movs	r2, #1
   1a2c0:	2300      	movs	r3, #0
   1a2c2:	1881      	adds	r1, r0, r2
   1a2c4:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
   1a2c8:	f7ff b825 	b.w	19316 <d_print_comp+0x215e>
   1a2cc:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a2d0:	4650      	mov	r0, sl
   1a2d2:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a2d6:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   1a2da:	4798      	blx	r3
   1a2dc:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1a2e0:	2201      	movs	r2, #1
   1a2e2:	2300      	movs	r3, #0
   1a2e4:	1881      	adds	r1, r0, r2
   1a2e6:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
   1a2ea:	f7fe be1b 	b.w	18f24 <d_print_comp+0x1d6c>
   1a2ee:	2aff      	cmp	r2, #255	; 0xff
   1a2f0:	f002 82b0 	beq.w	1c854 <d_print_comp+0x569c>
   1a2f4:	eb04 0c02 	add.w	ip, r4, r2
   1a2f8:	2020      	movs	r0, #32
   1a2fa:	3201      	adds	r2, #1
   1a2fc:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1a300:	f88c 0004 	strb.w	r0, [ip, #4]
   1a304:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1a308:	686b      	ldr	r3, [r5, #4]
   1a30a:	685f      	ldr	r7, [r3, #4]
   1a30c:	f7fd bd2a 	b.w	17d64 <d_print_comp+0xbac>
   1a310:	689a      	ldr	r2, [r3, #8]
   1a312:	7810      	ldrb	r0, [r2, #0]
   1a314:	2834      	cmp	r0, #52	; 0x34
   1a316:	f47d ab95 	bne.w	17a44 <d_print_comp+0x88c>
   1a31a:	6859      	ldr	r1, [r3, #4]
   1a31c:	4620      	mov	r0, r4
   1a31e:	f004 fb6d 	bl	1e9fc <d_print_subexpr>
   1a322:	4620      	mov	r0, r4
   1a324:	6869      	ldr	r1, [r5, #4]
   1a326:	f004 fac5 	bl	1e8b4 <d_print_expr_op>
   1a32a:	68a9      	ldr	r1, [r5, #8]
   1a32c:	4620      	mov	r0, r4
   1a32e:	688b      	ldr	r3, [r1, #8]
   1a330:	6859      	ldr	r1, [r3, #4]
   1a332:	f004 fb63 	bl	1e9fc <d_print_subexpr>
   1a336:	f64c 1130 	movw	r1, #51504	; 0xc930
   1a33a:	4620      	mov	r0, r4
   1a33c:	f2c0 0102 	movt	r1, #2
   1a340:	f7fc fe92 	bl	17068 <d_append_string>
   1a344:	68aa      	ldr	r2, [r5, #8]
   1a346:	4620      	mov	r0, r4
   1a348:	6891      	ldr	r1, [r2, #8]
   1a34a:	6889      	ldr	r1, [r1, #8]
   1a34c:	f004 fb56 	bl	1e9fc <d_print_subexpr>
   1a350:	f7fd b828 	b.w	173a4 <d_print_comp+0x1ec>
   1a354:	4629      	mov	r1, r5
   1a356:	f004 fa05 	bl	1e764 <d_print_cast.part.7>
   1a35a:	f7fd b823 	b.w	173a4 <d_print_comp+0x1ec>
   1a35e:	684a      	ldr	r2, [r1, #4]
   1a360:	7817      	ldrb	r7, [r2, #0]
   1a362:	2f2c      	cmp	r7, #44	; 0x2c
   1a364:	f002 81c4 	beq.w	1c6f0 <d_print_comp+0x5538>
   1a368:	6859      	ldr	r1, [r3, #4]
   1a36a:	4620      	mov	r0, r4
   1a36c:	f004 fb46 	bl	1e9fc <d_print_subexpr>
   1a370:	f8d5 8004 	ldr.w	r8, [r5, #4]
   1a374:	f64c 112c 	movw	r1, #51500	; 0xc92c
   1a378:	f2c0 0102 	movt	r1, #2
   1a37c:	f8d8 0004 	ldr.w	r0, [r8, #4]
   1a380:	6807      	ldr	r7, [r0, #0]
   1a382:	4638      	mov	r0, r7
   1a384:	f006 febe 	bl	21104 <strcmp>
   1a388:	4606      	mov	r6, r0
   1a38a:	2800      	cmp	r0, #0
   1a38c:	f002 80b9 	beq.w	1c502 <d_print_comp+0x534a>
   1a390:	f64c 0180 	movw	r1, #51328	; 0xc880
   1a394:	4638      	mov	r0, r7
   1a396:	f2c0 0102 	movt	r1, #2
   1a39a:	f006 feb3 	bl	21104 <strcmp>
   1a39e:	2800      	cmp	r0, #0
   1a3a0:	f042 826a 	bne.w	1c878 <d_print_comp+0x56c0>
   1a3a4:	68aa      	ldr	r2, [r5, #8]
   1a3a6:	4620      	mov	r0, r4
   1a3a8:	6891      	ldr	r1, [r2, #8]
   1a3aa:	f004 fb27 	bl	1e9fc <d_print_subexpr>
   1a3ae:	686b      	ldr	r3, [r5, #4]
   1a3b0:	7819      	ldrb	r1, [r3, #0]
   1a3b2:	292c      	cmp	r1, #44	; 0x2c
   1a3b4:	f47c aff6 	bne.w	173a4 <d_print_comp+0x1ec>
   1a3b8:	685b      	ldr	r3, [r3, #4]
   1a3ba:	6898      	ldr	r0, [r3, #8]
   1a3bc:	2801      	cmp	r0, #1
   1a3be:	f47c aff1 	bne.w	173a4 <d_print_comp+0x1ec>
   1a3c2:	685b      	ldr	r3, [r3, #4]
   1a3c4:	f893 c000 	ldrb.w	ip, [r3]
   1a3c8:	f1bc 0f3e 	cmp.w	ip, #62	; 0x3e
   1a3cc:	f47c afea 	bne.w	173a4 <d_print_comp+0x1ec>
   1a3d0:	4620      	mov	r0, r4
   1a3d2:	2129      	movs	r1, #41	; 0x29
   1a3d4:	f7fb f8a2 	bl	1551c <d_append_char>
   1a3d8:	f7fc bfe4 	b.w	173a4 <d_print_comp+0x1ec>
   1a3dc:	4620      	mov	r0, r4
   1a3de:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1a3e2:	f7fc fee9 	bl	171b8 <d_print_comp>
   1a3e6:	f7fc bfdd 	b.w	173a4 <d_print_comp+0x1ec>
   1a3ea:	6826      	ldr	r6, [r4, #0]
   1a3ec:	f006 0620 	and.w	r6, r6, #32
   1a3f0:	f7fe bf40 	b.w	19274 <d_print_comp+0x20bc>
   1a3f4:	4620      	mov	r0, r4
   1a3f6:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
   1a3fa:	f004 f8bf 	bl	1e57c <d_print_function_type>
   1a3fe:	f7fe bf09 	b.w	19214 <d_print_comp+0x205c>
   1a402:	2101      	movs	r1, #1
   1a404:	2a00      	cmp	r2, #0
   1a406:	bf0c      	ite	eq
   1a408:	460a      	moveq	r2, r1
   1a40a:	f041 0201 	orrne.w	r2, r1, #1
   1a40e:	2a00      	cmp	r2, #0
   1a410:	f47e ac40 	bne.w	18c94 <d_print_comp+0x1adc>
   1a414:	6859      	ldr	r1, [r3, #4]
   1a416:	2900      	cmp	r1, #0
   1a418:	f43e ac3c 	beq.w	18c94 <d_print_comp+0x1adc>
   1a41c:	780b      	ldrb	r3, [r1, #0]
   1a41e:	2b2b      	cmp	r3, #43	; 0x2b
   1a420:	f000 80c8 	beq.w	1a5b4 <d_print_comp+0x33fc>
   1a424:	6833      	ldr	r3, [r6, #0]
   1a426:	4620      	mov	r0, r4
   1a428:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1a42c:	f7fc fec4 	bl	171b8 <d_print_comp>
   1a430:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
   1a434:	f7fc bfb6 	b.w	173a4 <d_print_comp+0x1ec>
   1a438:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1a43c:	29ff      	cmp	r1, #255	; 0xff
   1a43e:	f002 8221 	beq.w	1c884 <d_print_comp+0x56cc>
   1a442:	eb04 0c01 	add.w	ip, r4, r1
   1a446:	3101      	adds	r1, #1
   1a448:	205f      	movs	r0, #95	; 0x5f
   1a44a:	29ff      	cmp	r1, #255	; 0xff
   1a44c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1a450:	f88c 0004 	strb.w	r0, [ip, #4]
   1a454:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1a458:	f002 826f 	beq.w	1c93a <d_print_comp+0x5782>
   1a45c:	eb04 0c01 	add.w	ip, r4, r1
   1a460:	3101      	adds	r1, #1
   1a462:	2053      	movs	r0, #83	; 0x53
   1a464:	29ff      	cmp	r1, #255	; 0xff
   1a466:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1a46a:	f88c 0004 	strb.w	r0, [ip, #4]
   1a46e:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1a472:	f002 824f 	beq.w	1c914 <d_print_comp+0x575c>
   1a476:	eb04 0c01 	add.w	ip, r4, r1
   1a47a:	3101      	adds	r1, #1
   1a47c:	2061      	movs	r0, #97	; 0x61
   1a47e:	29ff      	cmp	r1, #255	; 0xff
   1a480:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1a484:	f88c 0004 	strb.w	r0, [ip, #4]
   1a488:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1a48c:	f002 822f 	beq.w	1c8ee <d_print_comp+0x5736>
   1a490:	eb04 0c01 	add.w	ip, r4, r1
   1a494:	3101      	adds	r1, #1
   1a496:	2074      	movs	r0, #116	; 0x74
   1a498:	29ff      	cmp	r1, #255	; 0xff
   1a49a:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1a49e:	f88c 0004 	strb.w	r0, [ip, #4]
   1a4a2:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1a4a6:	d009      	beq.n	1a4bc <d_print_comp+0x3304>
   1a4a8:	1c4a      	adds	r2, r1, #1
   1a4aa:	1861      	adds	r1, r4, r1
   1a4ac:	2020      	movs	r0, #32
   1a4ae:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1a4b2:	7108      	strb	r0, [r1, #4]
   1a4b4:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1a4b8:	f7ff b80e 	b.w	194d8 <d_print_comp+0x2320>
   1a4bc:	2600      	movs	r6, #0
   1a4be:	1d20      	adds	r0, r4, #4
   1a4c0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a4c4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a4c8:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   1a4cc:	4798      	blx	r3
   1a4ce:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a4d2:	2201      	movs	r2, #1
   1a4d4:	4631      	mov	r1, r6
   1a4d6:	1898      	adds	r0, r3, r2
   1a4d8:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a4dc:	e7e5      	b.n	1a4aa <d_print_comp+0x32f2>
   1a4de:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1a4e2:	29ff      	cmp	r1, #255	; 0xff
   1a4e4:	f002 81e1 	beq.w	1c8aa <d_print_comp+0x56f2>
   1a4e8:	eb04 0c01 	add.w	ip, r4, r1
   1a4ec:	1c48      	adds	r0, r1, #1
   1a4ee:	2228      	movs	r2, #40	; 0x28
   1a4f0:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   1a4f4:	f884 2108 	strb.w	r2, [r4, #264]	; 0x108
   1a4f8:	4620      	mov	r0, r4
   1a4fa:	f88c 2004 	strb.w	r2, [ip, #4]
   1a4fe:	686b      	ldr	r3, [r5, #4]
   1a500:	6859      	ldr	r1, [r3, #4]
   1a502:	f891 e000 	ldrb.w	lr, [r1]
   1a506:	f1be 0f04 	cmp.w	lr, #4
   1a50a:	f002 80b6 	beq.w	1c67a <d_print_comp+0x54c2>
   1a50e:	f7fc fe53 	bl	171b8 <d_print_comp>
   1a512:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1a516:	29ff      	cmp	r1, #255	; 0xff
   1a518:	f002 81d8 	beq.w	1c8cc <d_print_comp+0x5714>
   1a51c:	eb04 0e01 	add.w	lr, r4, r1
   1a520:	2229      	movs	r2, #41	; 0x29
   1a522:	3101      	adds	r1, #1
   1a524:	f884 2108 	strb.w	r2, [r4, #264]	; 0x108
   1a528:	f88e 2004 	strb.w	r2, [lr, #4]
   1a52c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1a530:	f7fd baa3 	b.w	17a7a <d_print_comp+0x8c2>
   1a534:	eb04 0806 	add.w	r8, r4, r6
   1a538:	2700      	movs	r7, #0
   1a53a:	4631      	mov	r1, r6
   1a53c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a540:	f888 7004 	strb.w	r7, [r8, #4]
   1a544:	1d20      	adds	r0, r4, #4
   1a546:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a54a:	463e      	mov	r6, r7
   1a54c:	4798      	blx	r3
   1a54e:	f8d4 7124 	ldr.w	r7, [r4, #292]	; 0x124
   1a552:	f107 0801 	add.w	r8, r7, #1
   1a556:	f8c4 8124 	str.w	r8, [r4, #292]	; 0x124
   1a55a:	f7fd bc6f 	b.w	17e3c <d_print_comp+0xc84>
   1a55e:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1a562:	29ff      	cmp	r1, #255	; 0xff
   1a564:	f002 81fc 	beq.w	1c960 <d_print_comp+0x57a8>
   1a568:	eb04 0e01 	add.w	lr, r4, r1
   1a56c:	3101      	adds	r1, #1
   1a56e:	252c      	movs	r5, #44	; 0x2c
   1a570:	29ff      	cmp	r1, #255	; 0xff
   1a572:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1a576:	f88e 5004 	strb.w	r5, [lr, #4]
   1a57a:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
   1a57e:	d009      	beq.n	1a594 <d_print_comp+0x33dc>
   1a580:	1c4b      	adds	r3, r1, #1
   1a582:	1861      	adds	r1, r4, r1
   1a584:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1a588:	f884 9108 	strb.w	r9, [r4, #264]	; 0x108
   1a58c:	f881 9004 	strb.w	r9, [r1, #4]
   1a590:	f7fc bfbe 	b.w	17510 <d_print_comp+0x358>
   1a594:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a598:	1d20      	adds	r0, r4, #4
   1a59a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a59e:	f884 a103 	strb.w	sl, [r4, #259]	; 0x103
   1a5a2:	4798      	blx	r3
   1a5a4:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1a5a8:	2301      	movs	r3, #1
   1a5aa:	4651      	mov	r1, sl
   1a5ac:	18d0      	adds	r0, r2, r3
   1a5ae:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a5b2:	e7e6      	b.n	1a582 <d_print_comp+0x33ca>
   1a5b4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1a5b8:	2b00      	cmp	r3, #0
   1a5ba:	f342 80bc 	ble.w	1c736 <d_print_comp+0x557e>
   1a5be:	6889      	ldr	r1, [r1, #8]
   1a5c0:	3b01      	subs	r3, #1
   1a5c2:	f003 0201 	and.w	r2, r3, #1
   1a5c6:	2900      	cmp	r1, #0
   1a5c8:	f002 80b5 	beq.w	1c736 <d_print_comp+0x557e>
   1a5cc:	f891 c000 	ldrb.w	ip, [r1]
   1a5d0:	f1bc 0f2b 	cmp.w	ip, #43	; 0x2b
   1a5d4:	f47e ab5e 	bne.w	18c94 <d_print_comp+0x1adc>
   1a5d8:	2b00      	cmp	r3, #0
   1a5da:	f002 80b6 	beq.w	1c74a <d_print_comp+0x5592>
   1a5de:	b13a      	cbz	r2, 1a5f0 <d_print_comp+0x3438>
   1a5e0:	6889      	ldr	r1, [r1, #8]
   1a5e2:	3b01      	subs	r3, #1
   1a5e4:	b991      	cbnz	r1, 1a60c <d_print_comp+0x3454>
   1a5e6:	f002 b8a6 	b.w	1c736 <d_print_comp+0x557e>
   1a5ea:	2b00      	cmp	r3, #0
   1a5ec:	f002 80ad 	beq.w	1c74a <d_print_comp+0x5592>
   1a5f0:	6889      	ldr	r1, [r1, #8]
   1a5f2:	3b01      	subs	r3, #1
   1a5f4:	2900      	cmp	r1, #0
   1a5f6:	f002 809e 	beq.w	1c736 <d_print_comp+0x557e>
   1a5fa:	7808      	ldrb	r0, [r1, #0]
   1a5fc:	3b01      	subs	r3, #1
   1a5fe:	282b      	cmp	r0, #43	; 0x2b
   1a600:	f47e ab48 	bne.w	18c94 <d_print_comp+0x1adc>
   1a604:	6889      	ldr	r1, [r1, #8]
   1a606:	2900      	cmp	r1, #0
   1a608:	f002 8095 	beq.w	1c736 <d_print_comp+0x557e>
   1a60c:	780a      	ldrb	r2, [r1, #0]
   1a60e:	2a2b      	cmp	r2, #43	; 0x2b
   1a610:	d0eb      	beq.n	1a5ea <d_print_comp+0x3432>
   1a612:	f7fe bb3f 	b.w	18c94 <d_print_comp+0x1adc>
   1a616:	4620      	mov	r0, r4
   1a618:	6869      	ldr	r1, [r5, #4]
   1a61a:	f7fc fdcd 	bl	171b8 <d_print_comp>
   1a61e:	f7fc bec1 	b.w	173a4 <d_print_comp+0x1ec>
   1a622:	1d20      	adds	r0, r4, #4
   1a624:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a628:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a62c:	f884 a103 	strb.w	sl, [r4, #259]	; 0x103
   1a630:	4798      	blx	r3
   1a632:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1a636:	2101      	movs	r1, #1
   1a638:	222c      	movs	r2, #44	; 0x2c
   1a63a:	1843      	adds	r3, r0, r1
   1a63c:	7122      	strb	r2, [r4, #4]
   1a63e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a642:	f7ff bad6 	b.w	19bf2 <d_print_comp+0x2a3a>
   1a646:	1d20      	adds	r0, r4, #4
   1a648:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a64c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a650:	f884 a103 	strb.w	sl, [r4, #259]	; 0x103
   1a654:	4798      	blx	r3
   1a656:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a65a:	2101      	movs	r1, #1
   1a65c:	222c      	movs	r2, #44	; 0x2c
   1a65e:	1858      	adds	r0, r3, r1
   1a660:	7122      	strb	r2, [r4, #4]
   1a662:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a666:	f7fc bf8b 	b.w	17580 <d_print_comp+0x3c8>
   1a66a:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1a66e:	29ff      	cmp	r1, #255	; 0xff
   1a670:	f002 8195 	beq.w	1c99e <d_print_comp+0x57e6>
   1a674:	eb04 0c01 	add.w	ip, r4, r1
   1a678:	3101      	adds	r1, #1
   1a67a:	202c      	movs	r0, #44	; 0x2c
   1a67c:	29ff      	cmp	r1, #255	; 0xff
   1a67e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1a682:	f88c 0004 	strb.w	r0, [ip, #4]
   1a686:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1a68a:	f47c af79 	bne.w	17580 <d_print_comp+0x3c8>
   1a68e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a692:	1d20      	adds	r0, r4, #4
   1a694:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a698:	f884 a103 	strb.w	sl, [r4, #259]	; 0x103
   1a69c:	4798      	blx	r3
   1a69e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1a6a2:	462b      	mov	r3, r5
   1a6a4:	2100      	movs	r1, #0
   1a6a6:	1c42      	adds	r2, r0, #1
   1a6a8:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a6ac:	f7fc bf69 	b.w	17582 <d_print_comp+0x3ca>
   1a6b0:	2600      	movs	r6, #0
   1a6b2:	1d20      	adds	r0, r4, #4
   1a6b4:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   1a6b8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a6bc:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a6c0:	4798      	blx	r3
   1a6c2:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1a6c6:	2101      	movs	r1, #1
   1a6c8:	2269      	movs	r2, #105	; 0x69
   1a6ca:	1846      	adds	r6, r0, r1
   1a6cc:	7122      	strb	r2, [r4, #4]
   1a6ce:	f8c4 6124 	str.w	r6, [r4, #292]	; 0x124
   1a6d2:	f7fd be3e 	b.w	18352 <d_print_comp+0x119a>
   1a6d6:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a6da:	2000      	movs	r0, #0
   1a6dc:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a6e0:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a6e4:	1d20      	adds	r0, r4, #4
   1a6e6:	4798      	blx	r3
   1a6e8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a6ec:	2101      	movs	r1, #1
   1a6ee:	226e      	movs	r2, #110	; 0x6e
   1a6f0:	1858      	adds	r0, r3, r1
   1a6f2:	7122      	strb	r2, [r4, #4]
   1a6f4:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a6f8:	f7ff bbf9 	b.w	19eee <d_print_comp+0x2d36>
   1a6fc:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a700:	2000      	movs	r0, #0
   1a702:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a706:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a70a:	1d20      	adds	r0, r4, #4
   1a70c:	4798      	blx	r3
   1a70e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a712:	2101      	movs	r1, #1
   1a714:	2269      	movs	r2, #105	; 0x69
   1a716:	1858      	adds	r0, r3, r1
   1a718:	7122      	strb	r2, [r4, #4]
   1a71a:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a71e:	f7ff bbda 	b.w	19ed6 <d_print_comp+0x2d1e>
   1a722:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a726:	2000      	movs	r0, #0
   1a728:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a72c:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a730:	1d20      	adds	r0, r4, #4
   1a732:	4798      	blx	r3
   1a734:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1a738:	2101      	movs	r1, #1
   1a73a:	202d      	movs	r0, #45	; 0x2d
   1a73c:	1853      	adds	r3, r2, r1
   1a73e:	7120      	strb	r0, [r4, #4]
   1a740:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a744:	f7ff bbba 	b.w	19ebc <d_print_comp+0x2d04>
   1a748:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a74c:	2000      	movs	r0, #0
   1a74e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a752:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a756:	1d20      	adds	r0, r4, #4
   1a758:	4798      	blx	r3
   1a75a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1a75e:	2101      	movs	r1, #1
   1a760:	2068      	movs	r0, #104	; 0x68
   1a762:	1853      	adds	r3, r2, r1
   1a764:	7120      	strb	r0, [r4, #4]
   1a766:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a76a:	f7fd bde5 	b.w	18338 <d_print_comp+0x1180>
   1a76e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a772:	2000      	movs	r0, #0
   1a774:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a778:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a77c:	1d20      	adds	r0, r4, #4
   1a77e:	4798      	blx	r3
   1a780:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a784:	2101      	movs	r1, #1
   1a786:	2272      	movs	r2, #114	; 0x72
   1a788:	1858      	adds	r0, r3, r1
   1a78a:	7122      	strb	r2, [r4, #4]
   1a78c:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a790:	f7fe ba07 	b.w	18ba2 <d_print_comp+0x19ea>
   1a794:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a798:	2000      	movs	r0, #0
   1a79a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a79e:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a7a2:	1d20      	adds	r0, r4, #4
   1a7a4:	4798      	blx	r3
   1a7a6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a7aa:	2101      	movs	r1, #1
   1a7ac:	2272      	movs	r2, #114	; 0x72
   1a7ae:	1858      	adds	r0, r3, r1
   1a7b0:	7122      	strb	r2, [r4, #4]
   1a7b2:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a7b6:	f7fe b859 	b.w	1886c <d_print_comp+0x16b4>
   1a7ba:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a7be:	2000      	movs	r0, #0
   1a7c0:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a7c4:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a7c8:	1d20      	adds	r0, r4, #4
   1a7ca:	4798      	blx	r3
   1a7cc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a7d0:	2101      	movs	r1, #1
   1a7d2:	226f      	movs	r2, #111	; 0x6f
   1a7d4:	1858      	adds	r0, r3, r1
   1a7d6:	7122      	strb	r2, [r4, #4]
   1a7d8:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a7dc:	f7fe b839 	b.w	18852 <d_print_comp+0x169a>
   1a7e0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a7e4:	2000      	movs	r0, #0
   1a7e6:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a7ea:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a7ee:	1d20      	adds	r0, r4, #4
   1a7f0:	4798      	blx	r3
   1a7f2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a7f6:	2101      	movs	r1, #1
   1a7f8:	2266      	movs	r2, #102	; 0x66
   1a7fa:	1858      	adds	r0, r3, r1
   1a7fc:	7122      	strb	r2, [r4, #4]
   1a7fe:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a802:	f7fe b819 	b.w	18838 <d_print_comp+0x1680>
   1a806:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a80a:	2000      	movs	r0, #0
   1a80c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a810:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a814:	1d20      	adds	r0, r4, #4
   1a816:	4798      	blx	r3
   1a818:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a81c:	2101      	movs	r1, #1
   1a81e:	2220      	movs	r2, #32
   1a820:	1858      	adds	r0, r3, r1
   1a822:	7122      	strb	r2, [r4, #4]
   1a824:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a828:	f7fd bff9 	b.w	1881e <d_print_comp+0x1666>
   1a82c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a830:	2000      	movs	r0, #0
   1a832:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a836:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a83a:	1d20      	adds	r0, r4, #4
   1a83c:	4798      	blx	r3
   1a83e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a842:	2101      	movs	r1, #1
   1a844:	226e      	movs	r2, #110	; 0x6e
   1a846:	1858      	adds	r0, r3, r1
   1a848:	7122      	strb	r2, [r4, #4]
   1a84a:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a84e:	f7fd bfd9 	b.w	18804 <d_print_comp+0x164c>
   1a852:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a856:	2000      	movs	r0, #0
   1a858:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a85c:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a860:	1d20      	adds	r0, r4, #4
   1a862:	4798      	blx	r3
   1a864:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a868:	2101      	movs	r1, #1
   1a86a:	2266      	movs	r2, #102	; 0x66
   1a86c:	1858      	adds	r0, r3, r1
   1a86e:	7122      	strb	r2, [r4, #4]
   1a870:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a874:	f7fd bfb9 	b.w	187ea <d_print_comp+0x1632>
   1a878:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a87c:	2000      	movs	r0, #0
   1a87e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a882:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a886:	1d20      	adds	r0, r4, #4
   1a888:	4798      	blx	r3
   1a88a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a88e:	2101      	movs	r1, #1
   1a890:	2220      	movs	r2, #32
   1a892:	1858      	adds	r0, r3, r1
   1a894:	7122      	strb	r2, [r4, #4]
   1a896:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a89a:	f7fd bf99 	b.w	187d0 <d_print_comp+0x1618>
   1a89e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a8a2:	2000      	movs	r0, #0
   1a8a4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a8a8:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a8ac:	1d20      	adds	r0, r4, #4
   1a8ae:	4798      	blx	r3
   1a8b0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a8b4:	2101      	movs	r1, #1
   1a8b6:	226f      	movs	r2, #111	; 0x6f
   1a8b8:	1858      	adds	r0, r3, r1
   1a8ba:	7122      	strb	r2, [r4, #4]
   1a8bc:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a8c0:	f7fd bf79 	b.w	187b6 <d_print_comp+0x15fe>
   1a8c4:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a8c8:	2000      	movs	r0, #0
   1a8ca:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a8ce:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a8d2:	1d20      	adds	r0, r4, #4
   1a8d4:	4798      	blx	r3
   1a8d6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a8da:	2101      	movs	r1, #1
   1a8dc:	2266      	movs	r2, #102	; 0x66
   1a8de:	1858      	adds	r0, r3, r1
   1a8e0:	7122      	strb	r2, [r4, #4]
   1a8e2:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a8e6:	f7fd bf59 	b.w	1879c <d_print_comp+0x15e4>
   1a8ea:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a8ee:	2000      	movs	r0, #0
   1a8f0:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a8f4:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a8f8:	1d20      	adds	r0, r4, #4
   1a8fa:	4798      	blx	r3
   1a8fc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a900:	2101      	movs	r1, #1
   1a902:	226e      	movs	r2, #110	; 0x6e
   1a904:	1858      	adds	r0, r3, r1
   1a906:	7122      	strb	r2, [r4, #4]
   1a908:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a90c:	f7fd bf39 	b.w	18782 <d_print_comp+0x15ca>
   1a910:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a914:	2000      	movs	r0, #0
   1a916:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a91a:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a91e:	1d20      	adds	r0, r4, #4
   1a920:	4798      	blx	r3
   1a922:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a926:	2101      	movs	r1, #1
   1a928:	2269      	movs	r2, #105	; 0x69
   1a92a:	1858      	adds	r0, r3, r1
   1a92c:	7122      	strb	r2, [r4, #4]
   1a92e:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a932:	f7fd bf19 	b.w	18768 <d_print_comp+0x15b0>
   1a936:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a93a:	2000      	movs	r0, #0
   1a93c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a940:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a944:	1d20      	adds	r0, r4, #4
   1a946:	4798      	blx	r3
   1a948:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a94c:	2101      	movs	r1, #1
   1a94e:	2265      	movs	r2, #101	; 0x65
   1a950:	1858      	adds	r0, r3, r1
   1a952:	7122      	strb	r2, [r4, #4]
   1a954:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a958:	f7fd bef9 	b.w	1874e <d_print_comp+0x1596>
   1a95c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a960:	2000      	movs	r0, #0
   1a962:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a966:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a96a:	1d20      	adds	r0, r4, #4
   1a96c:	4798      	blx	r3
   1a96e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a972:	2101      	movs	r1, #1
   1a974:	2270      	movs	r2, #112	; 0x70
   1a976:	1858      	adds	r0, r3, r1
   1a978:	7122      	strb	r2, [r4, #4]
   1a97a:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a97e:	f7fd bed9 	b.w	18734 <d_print_comp+0x157c>
   1a982:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a986:	2000      	movs	r0, #0
   1a988:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a98c:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a990:	1d20      	adds	r0, r4, #4
   1a992:	4798      	blx	r3
   1a994:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a998:	2101      	movs	r1, #1
   1a99a:	2279      	movs	r2, #121	; 0x79
   1a99c:	1858      	adds	r0, r3, r1
   1a99e:	7122      	strb	r2, [r4, #4]
   1a9a0:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a9a4:	f7fd beb9 	b.w	1871a <d_print_comp+0x1562>
   1a9a8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a9ac:	2000      	movs	r0, #0
   1a9ae:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a9b2:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a9b6:	1d20      	adds	r0, r4, #4
   1a9b8:	4798      	blx	r3
   1a9ba:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1a9be:	2101      	movs	r1, #1
   1a9c0:	2074      	movs	r0, #116	; 0x74
   1a9c2:	1853      	adds	r3, r2, r1
   1a9c4:	7120      	strb	r0, [r4, #4]
   1a9c6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a9ca:	f7fd be99 	b.w	18700 <d_print_comp+0x1548>
   1a9ce:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a9d2:	2200      	movs	r2, #0
   1a9d4:	1d20      	adds	r0, r4, #4
   1a9d6:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1a9da:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a9de:	4798      	blx	r3
   1a9e0:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1a9e4:	2101      	movs	r1, #1
   1a9e6:	2265      	movs	r2, #101	; 0x65
   1a9e8:	1843      	adds	r3, r0, r1
   1a9ea:	7122      	strb	r2, [r4, #4]
   1a9ec:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a9f0:	f7fe bb2a 	b.w	19048 <d_print_comp+0x1e90>
   1a9f4:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a9f8:	2200      	movs	r2, #0
   1a9fa:	1d20      	adds	r0, r4, #4
   1a9fc:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1aa00:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1aa04:	4798      	blx	r3
   1aa06:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1aa0a:	2101      	movs	r1, #1
   1aa0c:	2270      	movs	r2, #112	; 0x70
   1aa0e:	1843      	adds	r3, r0, r1
   1aa10:	7122      	strb	r2, [r4, #4]
   1aa12:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1aa16:	f7fe bb0a 	b.w	1902e <d_print_comp+0x1e76>
   1aa1a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1aa1e:	2200      	movs	r2, #0
   1aa20:	1d20      	adds	r0, r4, #4
   1aa22:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1aa26:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1aa2a:	4798      	blx	r3
   1aa2c:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1aa30:	2101      	movs	r1, #1
   1aa32:	2279      	movs	r2, #121	; 0x79
   1aa34:	1843      	adds	r3, r0, r1
   1aa36:	7122      	strb	r2, [r4, #4]
   1aa38:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1aa3c:	f7fe baea 	b.w	19014 <d_print_comp+0x1e5c>
   1aa40:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1aa44:	2200      	movs	r2, #0
   1aa46:	1d20      	adds	r0, r4, #4
   1aa48:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1aa4c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1aa50:	4798      	blx	r3
   1aa52:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1aa56:	2101      	movs	r1, #1
   1aa58:	2274      	movs	r2, #116	; 0x74
   1aa5a:	1843      	adds	r3, r0, r1
   1aa5c:	7122      	strb	r2, [r4, #4]
   1aa5e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1aa62:	f7fe baca 	b.w	18ffa <d_print_comp+0x1e42>
   1aa66:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1aa6a:	2200      	movs	r2, #0
   1aa6c:	1d20      	adds	r0, r4, #4
   1aa6e:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1aa72:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1aa76:	4798      	blx	r3
   1aa78:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1aa7c:	2101      	movs	r1, #1
   1aa7e:	226c      	movs	r2, #108	; 0x6c
   1aa80:	1843      	adds	r3, r0, r1
   1aa82:	7122      	strb	r2, [r4, #4]
   1aa84:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1aa88:	f7fe baaa 	b.w	18fe0 <d_print_comp+0x1e28>
   1aa8c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1aa90:	2200      	movs	r2, #0
   1aa92:	1d20      	adds	r0, r4, #4
   1aa94:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1aa98:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1aa9c:	4798      	blx	r3
   1aa9e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1aaa2:	2101      	movs	r1, #1
   1aaa4:	2263      	movs	r2, #99	; 0x63
   1aaa6:	1843      	adds	r3, r0, r1
   1aaa8:	7122      	strb	r2, [r4, #4]
   1aaaa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1aaae:	f7fe ba8a 	b.w	18fc6 <d_print_comp+0x1e0e>
   1aab2:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1aab6:	2200      	movs	r2, #0
   1aab8:	1d20      	adds	r0, r4, #4
   1aaba:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1aabe:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1aac2:	4798      	blx	r3
   1aac4:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1aac8:	2101      	movs	r1, #1
   1aaca:	2265      	movs	r2, #101	; 0x65
   1aacc:	1843      	adds	r3, r0, r1
   1aace:	7122      	strb	r2, [r4, #4]
   1aad0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1aad4:	f7fe ba6a 	b.w	18fac <d_print_comp+0x1df4>
   1aad8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1aadc:	2200      	movs	r2, #0
   1aade:	1d20      	adds	r0, r4, #4
   1aae0:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1aae4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1aae8:	4798      	blx	r3
   1aaea:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1aaee:	2101      	movs	r1, #1
   1aaf0:	2264      	movs	r2, #100	; 0x64
   1aaf2:	1843      	adds	r3, r0, r1
   1aaf4:	7122      	strb	r2, [r4, #4]
   1aaf6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1aafa:	f7fe ba4a 	b.w	18f92 <d_print_comp+0x1dda>
   1aafe:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ab02:	2200      	movs	r2, #0
   1ab04:	1d20      	adds	r0, r4, #4
   1ab06:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1ab0a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ab0e:	4798      	blx	r3
   1ab10:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1ab14:	2101      	movs	r1, #1
   1ab16:	2220      	movs	r2, #32
   1ab18:	1843      	adds	r3, r0, r1
   1ab1a:	7122      	strb	r2, [r4, #4]
   1ab1c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1ab20:	f7fe ba9f 	b.w	19062 <d_print_comp+0x1eaa>
   1ab24:	2700      	movs	r7, #0
   1ab26:	1d20      	adds	r0, r4, #4
   1ab28:	f884 7103 	strb.w	r7, [r4, #259]	; 0x103
   1ab2c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ab30:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ab34:	4798      	blx	r3
   1ab36:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1ab3a:	2101      	movs	r1, #1
   1ab3c:	2261      	movs	r2, #97	; 0x61
   1ab3e:	1847      	adds	r7, r0, r1
   1ab40:	7122      	strb	r2, [r4, #4]
   1ab42:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
   1ab46:	f7fc bea3 	b.w	17890 <d_print_comp+0x6d8>
   1ab4a:	f8d4 710c 	ldr.w	r7, [r4, #268]	; 0x10c
   1ab4e:	2000      	movs	r0, #0
   1ab50:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ab54:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1ab58:	1d20      	adds	r0, r4, #4
   1ab5a:	47b8      	blx	r7
   1ab5c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1ab60:	2101      	movs	r1, #1
   1ab62:	2264      	movs	r2, #100	; 0x64
   1ab64:	185f      	adds	r7, r3, r1
   1ab66:	7122      	strb	r2, [r4, #4]
   1ab68:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
   1ab6c:	f7fc be83 	b.w	17876 <d_print_comp+0x6be>
   1ab70:	2300      	movs	r3, #0
   1ab72:	1d20      	adds	r0, r4, #4
   1ab74:	f884 3103 	strb.w	r3, [r4, #259]	; 0x103
   1ab78:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ab7c:	f8d4 710c 	ldr.w	r7, [r4, #268]	; 0x10c
   1ab80:	47b8      	blx	r7
   1ab82:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1ab86:	2101      	movs	r1, #1
   1ab88:	2262      	movs	r2, #98	; 0x62
   1ab8a:	1843      	adds	r3, r0, r1
   1ab8c:	7122      	strb	r2, [r4, #4]
   1ab8e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1ab92:	f7fc be63 	b.w	1785c <d_print_comp+0x6a4>
   1ab96:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ab9a:	2000      	movs	r0, #0
   1ab9c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1aba0:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1aba4:	1d20      	adds	r0, r4, #4
   1aba6:	4798      	blx	r3
   1aba8:	f8d4 7124 	ldr.w	r7, [r4, #292]	; 0x124
   1abac:	2101      	movs	r1, #1
   1abae:	226d      	movs	r2, #109	; 0x6d
   1abb0:	187b      	adds	r3, r7, r1
   1abb2:	7122      	strb	r2, [r4, #4]
   1abb4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1abb8:	f7fc be43 	b.w	17842 <d_print_comp+0x68a>
   1abbc:	2700      	movs	r7, #0
   1abbe:	1d20      	adds	r0, r4, #4
   1abc0:	f884 7103 	strb.w	r7, [r4, #259]	; 0x103
   1abc4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1abc8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1abcc:	4798      	blx	r3
   1abce:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1abd2:	2101      	movs	r1, #1
   1abd4:	2261      	movs	r2, #97	; 0x61
   1abd6:	1847      	adds	r7, r0, r1
   1abd8:	7122      	strb	r2, [r4, #4]
   1abda:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
   1abde:	f7fc be23 	b.w	17828 <d_print_comp+0x670>
   1abe2:	f8d4 710c 	ldr.w	r7, [r4, #268]	; 0x10c
   1abe6:	2000      	movs	r0, #0
   1abe8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1abec:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1abf0:	1d20      	adds	r0, r4, #4
   1abf2:	47b8      	blx	r7
   1abf4:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1abf8:	2101      	movs	r1, #1
   1abfa:	236c      	movs	r3, #108	; 0x6c
   1abfc:	1857      	adds	r7, r2, r1
   1abfe:	7123      	strb	r3, [r4, #4]
   1ac00:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
   1ac04:	f7fc be03 	b.w	1780e <d_print_comp+0x656>
   1ac08:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ac0c:	2200      	movs	r2, #0
   1ac0e:	1d20      	adds	r0, r4, #4
   1ac10:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1ac14:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ac18:	4798      	blx	r3
   1ac1a:	f8d4 7124 	ldr.w	r7, [r4, #292]	; 0x124
   1ac1e:	2101      	movs	r1, #1
   1ac20:	237b      	movs	r3, #123	; 0x7b
   1ac22:	1878      	adds	r0, r7, r1
   1ac24:	7123      	strb	r3, [r4, #4]
   1ac26:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1ac2a:	f7fc bde3 	b.w	177f4 <d_print_comp+0x63c>
   1ac2e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ac32:	2200      	movs	r2, #0
   1ac34:	1d20      	adds	r0, r4, #4
   1ac36:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1ac3a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ac3e:	4798      	blx	r3
   1ac40:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1ac44:	2101      	movs	r1, #1
   1ac46:	2272      	movs	r2, #114	; 0x72
   1ac48:	1843      	adds	r3, r0, r1
   1ac4a:	7122      	strb	r2, [r4, #4]
   1ac4c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1ac50:	f7fd bc35 	b.w	184be <d_print_comp+0x1306>
   1ac54:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ac58:	2200      	movs	r2, #0
   1ac5a:	1d20      	adds	r0, r4, #4
   1ac5c:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1ac60:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ac64:	4798      	blx	r3
   1ac66:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1ac6a:	2101      	movs	r1, #1
   1ac6c:	226f      	movs	r2, #111	; 0x6f
   1ac6e:	1843      	adds	r3, r0, r1
   1ac70:	7122      	strb	r2, [r4, #4]
   1ac72:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1ac76:	f7fd bc15 	b.w	184a4 <d_print_comp+0x12ec>
   1ac7a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ac7e:	2200      	movs	r2, #0
   1ac80:	1d20      	adds	r0, r4, #4
   1ac82:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1ac86:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ac8a:	4798      	blx	r3
   1ac8c:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1ac90:	2101      	movs	r1, #1
   1ac92:	2272      	movs	r2, #114	; 0x72
   1ac94:	1843      	adds	r3, r0, r1
   1ac96:	7122      	strb	r2, [r4, #4]
   1ac98:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1ac9c:	f7fe bd10 	b.w	196c0 <d_print_comp+0x2508>
   1aca0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1aca4:	2200      	movs	r2, #0
   1aca6:	1d20      	adds	r0, r4, #4
   1aca8:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1acac:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1acb0:	4798      	blx	r3
   1acb2:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1acb6:	2101      	movs	r1, #1
   1acb8:	226f      	movs	r2, #111	; 0x6f
   1acba:	1843      	adds	r3, r0, r1
   1acbc:	7122      	strb	r2, [r4, #4]
   1acbe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1acc2:	f7fe bcf0 	b.w	196a6 <d_print_comp+0x24ee>
   1acc6:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1acca:	2200      	movs	r2, #0
   1accc:	1d20      	adds	r0, r4, #4
   1acce:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1acd2:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1acd6:	4798      	blx	r3
   1acd8:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1acdc:	2101      	movs	r1, #1
   1acde:	2272      	movs	r2, #114	; 0x72
   1ace0:	1843      	adds	r3, r0, r1
   1ace2:	7122      	strb	r2, [r4, #4]
   1ace4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1ace8:	f7fd beaf 	b.w	18a4a <d_print_comp+0x1892>
   1acec:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1acf0:	2200      	movs	r2, #0
   1acf2:	1d20      	adds	r0, r4, #4
   1acf4:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1acf8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1acfc:	4798      	blx	r3
   1acfe:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1ad02:	2101      	movs	r1, #1
   1ad04:	226f      	movs	r2, #111	; 0x6f
   1ad06:	1843      	adds	r3, r0, r1
   1ad08:	7122      	strb	r2, [r4, #4]
   1ad0a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1ad0e:	f7fd be8f 	b.w	18a30 <d_print_comp+0x1878>
   1ad12:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ad16:	2200      	movs	r2, #0
   1ad18:	1d20      	adds	r0, r4, #4
   1ad1a:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1ad1e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ad22:	4798      	blx	r3
   1ad24:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1ad28:	2101      	movs	r1, #1
   1ad2a:	2266      	movs	r2, #102	; 0x66
   1ad2c:	1843      	adds	r3, r0, r1
   1ad2e:	7122      	strb	r2, [r4, #4]
   1ad30:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1ad34:	f7fd be6f 	b.w	18a16 <d_print_comp+0x185e>
   1ad38:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ad3c:	2200      	movs	r2, #0
   1ad3e:	1d20      	adds	r0, r4, #4
   1ad40:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1ad44:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ad48:	4798      	blx	r3
   1ad4a:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1ad4e:	2101      	movs	r1, #1
   1ad50:	2220      	movs	r2, #32
   1ad52:	1843      	adds	r3, r0, r1
   1ad54:	7122      	strb	r2, [r4, #4]
   1ad56:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1ad5a:	f7fd be4f 	b.w	189fc <d_print_comp+0x1844>
   1ad5e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ad62:	2200      	movs	r2, #0
   1ad64:	1d20      	adds	r0, r4, #4
   1ad66:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1ad6a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ad6e:	4798      	blx	r3
   1ad70:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1ad74:	2101      	movs	r1, #1
   1ad76:	2266      	movs	r2, #102	; 0x66
   1ad78:	1843      	adds	r3, r0, r1
   1ad7a:	7122      	strb	r2, [r4, #4]
   1ad7c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1ad80:	f7fe bc84 	b.w	1968c <d_print_comp+0x24d4>
   1ad84:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ad88:	2200      	movs	r2, #0
   1ad8a:	1d20      	adds	r0, r4, #4
   1ad8c:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1ad90:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ad94:	4798      	blx	r3
   1ad96:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1ad9a:	2101      	movs	r1, #1
   1ad9c:	2220      	movs	r2, #32
   1ad9e:	1843      	adds	r3, r0, r1
   1ada0:	7122      	strb	r2, [r4, #4]
   1ada2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1ada6:	f7fe bc64 	b.w	19672 <d_print_comp+0x24ba>
   1adaa:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1adae:	2200      	movs	r2, #0
   1adb0:	1d20      	adds	r0, r4, #4
   1adb2:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1adb6:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1adba:	4798      	blx	r3
   1adbc:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1adc0:	2101      	movs	r1, #1
   1adc2:	2265      	movs	r2, #101	; 0x65
   1adc4:	1843      	adds	r3, r0, r1
   1adc6:	7122      	strb	r2, [r4, #4]
   1adc8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1adcc:	f7fe bc44 	b.w	19658 <d_print_comp+0x24a0>
   1add0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1add4:	2200      	movs	r2, #0
   1add6:	1d20      	adds	r0, r4, #4
   1add8:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1addc:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ade0:	4798      	blx	r3
   1ade2:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1ade6:	2101      	movs	r1, #1
   1ade8:	226c      	movs	r2, #108	; 0x6c
   1adea:	1843      	adds	r3, r0, r1
   1adec:	7122      	strb	r2, [r4, #4]
   1adee:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1adf2:	f7fe bc24 	b.w	1963e <d_print_comp+0x2486>
   1adf6:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1adfa:	2200      	movs	r2, #0
   1adfc:	1d20      	adds	r0, r4, #4
   1adfe:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1ae02:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ae06:	4798      	blx	r3
   1ae08:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1ae0c:	2101      	movs	r1, #1
   1ae0e:	2262      	movs	r2, #98	; 0x62
   1ae10:	1843      	adds	r3, r0, r1
   1ae12:	7122      	strb	r2, [r4, #4]
   1ae14:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1ae18:	f7fe bc04 	b.w	19624 <d_print_comp+0x246c>
   1ae1c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ae20:	2200      	movs	r2, #0
   1ae22:	1d20      	adds	r0, r4, #4
   1ae24:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1ae28:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ae2c:	4798      	blx	r3
   1ae2e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1ae32:	2101      	movs	r1, #1
   1ae34:	2261      	movs	r2, #97	; 0x61
   1ae36:	1843      	adds	r3, r0, r1
   1ae38:	7122      	strb	r2, [r4, #4]
   1ae3a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1ae3e:	f7fe bbe4 	b.w	1960a <d_print_comp+0x2452>
   1ae42:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ae46:	2200      	movs	r2, #0
   1ae48:	1d20      	adds	r0, r4, #4
   1ae4a:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1ae4e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ae52:	4798      	blx	r3
   1ae54:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1ae58:	2101      	movs	r1, #1
   1ae5a:	2274      	movs	r2, #116	; 0x74
   1ae5c:	1843      	adds	r3, r0, r1
   1ae5e:	7122      	strb	r2, [r4, #4]
   1ae60:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1ae64:	f7fe bbc4 	b.w	195f0 <d_print_comp+0x2438>
   1ae68:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ae6c:	2200      	movs	r2, #0
   1ae6e:	1d20      	adds	r0, r4, #4
   1ae70:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1ae74:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ae78:	4798      	blx	r3
   1ae7a:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1ae7e:	2101      	movs	r1, #1
   1ae80:	2276      	movs	r2, #118	; 0x76
   1ae82:	1843      	adds	r3, r0, r1
   1ae84:	7122      	strb	r2, [r4, #4]
   1ae86:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1ae8a:	f7fe bba4 	b.w	195d6 <d_print_comp+0x241e>
   1ae8e:	2300      	movs	r3, #0
   1ae90:	1d20      	adds	r0, r4, #4
   1ae92:	f884 3103 	strb.w	r3, [r4, #259]	; 0x103
   1ae96:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ae9a:	f8d4 710c 	ldr.w	r7, [r4, #268]	; 0x10c
   1ae9e:	47b8      	blx	r7
   1aea0:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1aea4:	2101      	movs	r1, #1
   1aea6:	2270      	movs	r2, #112	; 0x70
   1aea8:	1843      	adds	r3, r0, r1
   1aeaa:	7122      	strb	r2, [r4, #4]
   1aeac:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1aeb0:	f7fc bc0e 	b.w	176d0 <d_print_comp+0x518>
   1aeb4:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1aeb8:	2000      	movs	r0, #0
   1aeba:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1aebe:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1aec2:	1d20      	adds	r0, r4, #4
   1aec4:	4798      	blx	r3
   1aec6:	f8d4 7124 	ldr.w	r7, [r4, #292]	; 0x124
   1aeca:	2101      	movs	r1, #1
   1aecc:	2279      	movs	r2, #121	; 0x79
   1aece:	187b      	adds	r3, r7, r1
   1aed0:	7122      	strb	r2, [r4, #4]
   1aed2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1aed6:	f7fc bbee 	b.w	176b6 <d_print_comp+0x4fe>
   1aeda:	2700      	movs	r7, #0
   1aedc:	1d20      	adds	r0, r4, #4
   1aede:	f884 7103 	strb.w	r7, [r4, #259]	; 0x103
   1aee2:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1aee6:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1aeea:	4798      	blx	r3
   1aeec:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1aef0:	2101      	movs	r1, #1
   1aef2:	2274      	movs	r2, #116	; 0x74
   1aef4:	1847      	adds	r7, r0, r1
   1aef6:	7122      	strb	r2, [r4, #4]
   1aef8:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
   1aefc:	f7fc bbce 	b.w	1769c <d_print_comp+0x4e4>
   1af00:	f8d4 710c 	ldr.w	r7, [r4, #268]	; 0x10c
   1af04:	2000      	movs	r0, #0
   1af06:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1af0a:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1af0e:	1d20      	adds	r0, r4, #4
   1af10:	47b8      	blx	r7
   1af12:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1af16:	2101      	movs	r1, #1
   1af18:	2220      	movs	r2, #32
   1af1a:	185f      	adds	r7, r3, r1
   1af1c:	7122      	strb	r2, [r4, #4]
   1af1e:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
   1af22:	f7fc bbae 	b.w	17682 <d_print_comp+0x4ca>
   1af26:	4650      	mov	r0, sl
   1af28:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1af2c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1af30:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   1af34:	4798      	blx	r3
   1af36:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1af3a:	2101      	movs	r1, #1
   1af3c:	464b      	mov	r3, r9
   1af3e:	1842      	adds	r2, r0, r1
   1af40:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1af44:	f7fc bfc4 	b.w	17ed0 <d_print_comp+0xd18>
   1af48:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1af4c:	2000      	movs	r0, #0
   1af4e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1af52:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1af56:	1d20      	adds	r0, r4, #4
   1af58:	4798      	blx	r3
   1af5a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1af5e:	2101      	movs	r1, #1
   1af60:	226f      	movs	r2, #111	; 0x6f
   1af62:	1858      	adds	r0, r3, r1
   1af64:	7122      	strb	r2, [r4, #4]
   1af66:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1af6a:	f7fd be0d 	b.w	18b88 <d_print_comp+0x19d0>
   1af6e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1af72:	2000      	movs	r0, #0
   1af74:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1af78:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1af7c:	1d20      	adds	r0, r4, #4
   1af7e:	4798      	blx	r3
   1af80:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1af84:	2101      	movs	r1, #1
   1af86:	2266      	movs	r2, #102	; 0x66
   1af88:	1858      	adds	r0, r3, r1
   1af8a:	7122      	strb	r2, [r4, #4]
   1af8c:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1af90:	f7fd bded 	b.w	18b6e <d_print_comp+0x19b6>
   1af94:	2500      	movs	r5, #0
   1af96:	1d20      	adds	r0, r4, #4
   1af98:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1af9c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1afa0:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   1afa4:	4798      	blx	r3
   1afa6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1afaa:	2201      	movs	r2, #1
   1afac:	4629      	mov	r1, r5
   1afae:	1898      	adds	r0, r3, r2
   1afb0:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1afb4:	f7fe bed4 	b.w	19d60 <d_print_comp+0x2ba8>
   1afb8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1afbc:	2000      	movs	r0, #0
   1afbe:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1afc2:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1afc6:	1d20      	adds	r0, r4, #4
   1afc8:	4798      	blx	r3
   1afca:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1afce:	2101      	movs	r1, #1
   1afd0:	2220      	movs	r2, #32
   1afd2:	1858      	adds	r0, r3, r1
   1afd4:	7122      	strb	r2, [r4, #4]
   1afd6:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1afda:	f7fd bdbb 	b.w	18b54 <d_print_comp+0x199c>
   1afde:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1afe2:	2000      	movs	r0, #0
   1afe4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1afe8:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1afec:	1d20      	adds	r0, r4, #4
   1afee:	4798      	blx	r3
   1aff0:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1aff4:	2101      	movs	r1, #1
   1aff6:	7126      	strb	r6, [r4, #4]
   1aff8:	1853      	adds	r3, r2, r1
   1affa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1affe:	f7fd bd9c 	b.w	18b3a <d_print_comp+0x1982>
   1b002:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b006:	2200      	movs	r2, #0
   1b008:	1d20      	adds	r0, r4, #4
   1b00a:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1b00e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b012:	4798      	blx	r3
   1b014:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b018:	2101      	movs	r1, #1
   1b01a:	2254      	movs	r2, #84	; 0x54
   1b01c:	1843      	adds	r3, r0, r1
   1b01e:	7122      	strb	r2, [r4, #4]
   1b020:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b024:	f7fd bd7c 	b.w	18b20 <d_print_comp+0x1968>
   1b028:	f8d4 610c 	ldr.w	r6, [r4, #268]	; 0x10c
   1b02c:	2000      	movs	r0, #0
   1b02e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b032:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1b036:	1d20      	adds	r0, r4, #4
   1b038:	47b0      	blx	r6
   1b03a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b03e:	2101      	movs	r1, #1
   1b040:	2256      	movs	r2, #86	; 0x56
   1b042:	185e      	adds	r6, r3, r1
   1b044:	7122      	strb	r2, [r4, #4]
   1b046:	f8c4 6124 	str.w	r6, [r4, #292]	; 0x124
   1b04a:	f7fd bd5c 	b.w	18b06 <d_print_comp+0x194e>
   1b04e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b052:	2200      	movs	r2, #0
   1b054:	1d20      	adds	r0, r4, #4
   1b056:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1b05a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b05e:	4798      	blx	r3
   1b060:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b064:	2101      	movs	r1, #1
   1b066:	2266      	movs	r2, #102	; 0x66
   1b068:	1843      	adds	r3, r0, r1
   1b06a:	7122      	strb	r2, [r4, #4]
   1b06c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b070:	f7fd ba0b 	b.w	1848a <d_print_comp+0x12d2>
   1b074:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b078:	2200      	movs	r2, #0
   1b07a:	1d20      	adds	r0, r4, #4
   1b07c:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1b080:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b084:	4798      	blx	r3
   1b086:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b08a:	2101      	movs	r1, #1
   1b08c:	2220      	movs	r2, #32
   1b08e:	1843      	adds	r3, r0, r1
   1b090:	7122      	strb	r2, [r4, #4]
   1b092:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b096:	f7fd b9eb 	b.w	18470 <d_print_comp+0x12b8>
   1b09a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b09e:	2200      	movs	r2, #0
   1b0a0:	1d20      	adds	r0, r4, #4
   1b0a2:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1b0a6:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b0aa:	4798      	blx	r3
   1b0ac:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b0b0:	2101      	movs	r1, #1
   1b0b2:	2273      	movs	r2, #115	; 0x73
   1b0b4:	1843      	adds	r3, r0, r1
   1b0b6:	7122      	strb	r2, [r4, #4]
   1b0b8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b0bc:	f7fd b9cb 	b.w	18456 <d_print_comp+0x129e>
   1b0c0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b0c4:	2200      	movs	r2, #0
   1b0c6:	1d20      	adds	r0, r4, #4
   1b0c8:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1b0cc:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b0d0:	4798      	blx	r3
   1b0d2:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b0d6:	2101      	movs	r1, #1
   1b0d8:	2261      	movs	r2, #97	; 0x61
   1b0da:	1843      	adds	r3, r0, r1
   1b0dc:	7122      	strb	r2, [r4, #4]
   1b0de:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b0e2:	f7fd b9ab 	b.w	1843c <d_print_comp+0x1284>
   1b0e6:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b0ea:	2200      	movs	r2, #0
   1b0ec:	1d20      	adds	r0, r4, #4
   1b0ee:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1b0f2:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b0f6:	4798      	blx	r3
   1b0f8:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b0fc:	2101      	movs	r1, #1
   1b0fe:	2269      	movs	r2, #105	; 0x69
   1b100:	1843      	adds	r3, r0, r1
   1b102:	7122      	strb	r2, [r4, #4]
   1b104:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b108:	f7fd b98b 	b.w	18422 <d_print_comp+0x126a>
   1b10c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b110:	2200      	movs	r2, #0
   1b112:	1d20      	adds	r0, r4, #4
   1b114:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1b118:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b11c:	4798      	blx	r3
   1b11e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b122:	2101      	movs	r1, #1
   1b124:	226c      	movs	r2, #108	; 0x6c
   1b126:	1843      	adds	r3, r0, r1
   1b128:	7122      	strb	r2, [r4, #4]
   1b12a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b12e:	f7fd b96b 	b.w	18408 <d_print_comp+0x1250>
   1b132:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b136:	2200      	movs	r2, #0
   1b138:	1d20      	adds	r0, r4, #4
   1b13a:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1b13e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b142:	4798      	blx	r3
   1b144:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b148:	2101      	movs	r1, #1
   1b14a:	2261      	movs	r2, #97	; 0x61
   1b14c:	1843      	adds	r3, r0, r1
   1b14e:	7122      	strb	r2, [r4, #4]
   1b150:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b154:	f7fd b94b 	b.w	183ee <d_print_comp+0x1236>
   1b158:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b15c:	2200      	movs	r2, #0
   1b15e:	1d20      	adds	r0, r4, #4
   1b160:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1b164:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b168:	4798      	blx	r3
   1b16a:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b16e:	2101      	movs	r1, #1
   1b170:	2220      	movs	r2, #32
   1b172:	1843      	adds	r3, r0, r1
   1b174:	7122      	strb	r2, [r4, #4]
   1b176:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b17a:	f7fd b92b 	b.w	183d4 <d_print_comp+0x121c>
   1b17e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b182:	2200      	movs	r2, #0
   1b184:	1d20      	adds	r0, r4, #4
   1b186:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1b18a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b18e:	4798      	blx	r3
   1b190:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b194:	2101      	movs	r1, #1
   1b196:	226e      	movs	r2, #110	; 0x6e
   1b198:	1843      	adds	r3, r0, r1
   1b19a:	7122      	strb	r2, [r4, #4]
   1b19c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b1a0:	f7fd b90b 	b.w	183ba <d_print_comp+0x1202>
   1b1a4:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b1a8:	2200      	movs	r2, #0
   1b1aa:	1d20      	adds	r0, r4, #4
   1b1ac:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1b1b0:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b1b4:	4798      	blx	r3
   1b1b6:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b1ba:	2101      	movs	r1, #1
   1b1bc:	2265      	movs	r2, #101	; 0x65
   1b1be:	1843      	adds	r3, r0, r1
   1b1c0:	7122      	strb	r2, [r4, #4]
   1b1c2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b1c6:	f7fd b8eb 	b.w	183a0 <d_print_comp+0x11e8>
   1b1ca:	2200      	movs	r2, #0
   1b1cc:	1d20      	adds	r0, r4, #4
   1b1ce:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1b1d2:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b1d6:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b1da:	4798      	blx	r3
   1b1dc:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b1e0:	2101      	movs	r1, #1
   1b1e2:	7126      	strb	r6, [r4, #4]
   1b1e4:	1842      	adds	r2, r0, r1
   1b1e6:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1b1ea:	f7fd b8cc 	b.w	18386 <d_print_comp+0x11ce>
   1b1ee:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b1f2:	2000      	movs	r0, #0
   1b1f4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b1f8:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1b1fc:	1d20      	adds	r0, r4, #4
   1b1fe:	4798      	blx	r3
   1b200:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b204:	2101      	movs	r1, #1
   1b206:	2264      	movs	r2, #100	; 0x64
   1b208:	1858      	adds	r0, r3, r1
   1b20a:	7122      	strb	r2, [r4, #4]
   1b20c:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1b210:	f7fd b8ac 	b.w	1836c <d_print_comp+0x11b4>
   1b214:	2500      	movs	r5, #0
   1b216:	1d20      	adds	r0, r4, #4
   1b218:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b21c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b220:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   1b224:	4798      	blx	r3
   1b226:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b22a:	2201      	movs	r2, #1
   1b22c:	4629      	mov	r1, r5
   1b22e:	1898      	adds	r0, r3, r2
   1b230:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1b234:	f7fe bd7a 	b.w	19d2c <d_print_comp+0x2b74>
   1b238:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b23c:	2000      	movs	r0, #0
   1b23e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b242:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1b246:	1d20      	adds	r0, r4, #4
   1b248:	4798      	blx	r3
   1b24a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b24e:	2101      	movs	r1, #1
   1b250:	2265      	movs	r2, #101	; 0x65
   1b252:	1858      	adds	r0, r3, r1
   1b254:	7122      	strb	r2, [r4, #4]
   1b256:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1b25a:	f7fc b90c 	b.w	17476 <d_print_comp+0x2be>
   1b25e:	f8d4 710c 	ldr.w	r7, [r4, #268]	; 0x10c
   1b262:	2000      	movs	r0, #0
   1b264:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b268:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1b26c:	1d20      	adds	r0, r4, #4
   1b26e:	47b8      	blx	r7
   1b270:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b274:	2101      	movs	r1, #1
   1b276:	2265      	movs	r2, #101	; 0x65
   1b278:	185f      	adds	r7, r3, r1
   1b27a:	7122      	strb	r2, [r4, #4]
   1b27c:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
   1b280:	f7fc ba33 	b.w	176ea <d_print_comp+0x532>
   1b284:	f8d4 710c 	ldr.w	r7, [r4, #268]	; 0x10c
   1b288:	2000      	movs	r0, #0
   1b28a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b28e:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1b292:	1d20      	adds	r0, r4, #4
   1b294:	47b8      	blx	r7
   1b296:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b29a:	2101      	movs	r1, #1
   1b29c:	226d      	movs	r2, #109	; 0x6d
   1b29e:	185f      	adds	r7, r3, r1
   1b2a0:	7122      	strb	r2, [r4, #4]
   1b2a2:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
   1b2a6:	f7fd bd83 	b.w	18db0 <d_print_comp+0x1bf8>
   1b2aa:	2300      	movs	r3, #0
   1b2ac:	1d20      	adds	r0, r4, #4
   1b2ae:	f884 3103 	strb.w	r3, [r4, #259]	; 0x103
   1b2b2:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b2b6:	f8d4 710c 	ldr.w	r7, [r4, #268]	; 0x10c
   1b2ba:	47b8      	blx	r7
   1b2bc:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b2c0:	2101      	movs	r1, #1
   1b2c2:	2272      	movs	r2, #114	; 0x72
   1b2c4:	1843      	adds	r3, r0, r1
   1b2c6:	7122      	strb	r2, [r4, #4]
   1b2c8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b2cc:	f7fd bd63 	b.w	18d96 <d_print_comp+0x1bde>
   1b2d0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b2d4:	2000      	movs	r0, #0
   1b2d6:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b2da:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1b2de:	1d20      	adds	r0, r4, #4
   1b2e0:	4798      	blx	r3
   1b2e2:	f8d4 7124 	ldr.w	r7, [r4, #292]	; 0x124
   1b2e6:	2101      	movs	r1, #1
   1b2e8:	2261      	movs	r2, #97	; 0x61
   1b2ea:	187b      	adds	r3, r7, r1
   1b2ec:	7122      	strb	r2, [r4, #4]
   1b2ee:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b2f2:	f7fd bd43 	b.w	18d7c <d_print_comp+0x1bc4>
   1b2f6:	2700      	movs	r7, #0
   1b2f8:	1d20      	adds	r0, r4, #4
   1b2fa:	f884 7103 	strb.w	r7, [r4, #259]	; 0x103
   1b2fe:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b302:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b306:	4798      	blx	r3
   1b308:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b30c:	2101      	movs	r1, #1
   1b30e:	2270      	movs	r2, #112	; 0x70
   1b310:	1847      	adds	r7, r0, r1
   1b312:	7122      	strb	r2, [r4, #4]
   1b314:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
   1b318:	f7fd bd23 	b.w	18d62 <d_print_comp+0x1baa>
   1b31c:	2000      	movs	r0, #0
   1b31e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b322:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1b326:	1d20      	adds	r0, r4, #4
   1b328:	f8d4 710c 	ldr.w	r7, [r4, #268]	; 0x10c
   1b32c:	47b8      	blx	r7
   1b32e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b332:	2101      	movs	r1, #1
   1b334:	227b      	movs	r2, #123	; 0x7b
   1b336:	1858      	adds	r0, r3, r1
   1b338:	7122      	strb	r2, [r4, #4]
   1b33a:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1b33e:	f7fd bd03 	b.w	18d48 <d_print_comp+0x1b90>
   1b342:	2600      	movs	r6, #0
   1b344:	1d20      	adds	r0, r4, #4
   1b346:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b34a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b34e:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   1b352:	4798      	blx	r3
   1b354:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1b358:	2301      	movs	r3, #1
   1b35a:	4631      	mov	r1, r6
   1b35c:	18d0      	adds	r0, r2, r3
   1b35e:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1b362:	f7fd b95d 	b.w	18620 <d_print_comp+0x1468>
   1b366:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b36a:	2200      	movs	r2, #0
   1b36c:	1d20      	adds	r0, r4, #4
   1b36e:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1b372:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b376:	4798      	blx	r3
   1b378:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b37c:	2101      	movs	r1, #1
   1b37e:	226f      	movs	r2, #111	; 0x6f
   1b380:	1843      	adds	r3, r0, r1
   1b382:	7122      	strb	r2, [r4, #4]
   1b384:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b388:	f7fd bb2b 	b.w	189e2 <d_print_comp+0x182a>
   1b38c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b390:	2200      	movs	r2, #0
   1b392:	1d20      	adds	r0, r4, #4
   1b394:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1b398:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b39c:	4798      	blx	r3
   1b39e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b3a2:	2101      	movs	r1, #1
   1b3a4:	2266      	movs	r2, #102	; 0x66
   1b3a6:	1843      	adds	r3, r0, r1
   1b3a8:	7122      	strb	r2, [r4, #4]
   1b3aa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b3ae:	f7fd bb0b 	b.w	189c8 <d_print_comp+0x1810>
   1b3b2:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b3b6:	2200      	movs	r2, #0
   1b3b8:	1d20      	adds	r0, r4, #4
   1b3ba:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1b3be:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b3c2:	4798      	blx	r3
   1b3c4:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b3c8:	2101      	movs	r1, #1
   1b3ca:	226e      	movs	r2, #110	; 0x6e
   1b3cc:	1843      	adds	r3, r0, r1
   1b3ce:	7122      	strb	r2, [r4, #4]
   1b3d0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b3d4:	f7fd baeb 	b.w	189ae <d_print_comp+0x17f6>
   1b3d8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b3dc:	2200      	movs	r2, #0
   1b3de:	1d20      	adds	r0, r4, #4
   1b3e0:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1b3e4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b3e8:	4798      	blx	r3
   1b3ea:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b3ee:	2101      	movs	r1, #1
   1b3f0:	2269      	movs	r2, #105	; 0x69
   1b3f2:	1843      	adds	r3, r0, r1
   1b3f4:	7122      	strb	r2, [r4, #4]
   1b3f6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b3fa:	f7fd bacb 	b.w	18994 <d_print_comp+0x17dc>
   1b3fe:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b402:	2200      	movs	r2, #0
   1b404:	1d20      	adds	r0, r4, #4
   1b406:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1b40a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b40e:	4798      	blx	r3
   1b410:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b414:	2101      	movs	r1, #1
   1b416:	2265      	movs	r2, #101	; 0x65
   1b418:	1843      	adds	r3, r0, r1
   1b41a:	7122      	strb	r2, [r4, #4]
   1b41c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b420:	f7fd baab 	b.w	1897a <d_print_comp+0x17c2>
   1b424:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b428:	2200      	movs	r2, #0
   1b42a:	1d20      	adds	r0, r4, #4
   1b42c:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1b430:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b434:	4798      	blx	r3
   1b436:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b43a:	2101      	movs	r1, #1
   1b43c:	2270      	movs	r2, #112	; 0x70
   1b43e:	1843      	adds	r3, r0, r1
   1b440:	7122      	strb	r2, [r4, #4]
   1b442:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b446:	f7fd ba8b 	b.w	18960 <d_print_comp+0x17a8>
   1b44a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b44e:	2200      	movs	r2, #0
   1b450:	1d20      	adds	r0, r4, #4
   1b452:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1b456:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b45a:	4798      	blx	r3
   1b45c:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b460:	2101      	movs	r1, #1
   1b462:	2279      	movs	r2, #121	; 0x79
   1b464:	1843      	adds	r3, r0, r1
   1b466:	7122      	strb	r2, [r4, #4]
   1b468:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b46c:	f7fd ba6b 	b.w	18946 <d_print_comp+0x178e>
   1b470:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b474:	2200      	movs	r2, #0
   1b476:	1d20      	adds	r0, r4, #4
   1b478:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1b47c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b480:	4798      	blx	r3
   1b482:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b486:	2101      	movs	r1, #1
   1b488:	2274      	movs	r2, #116	; 0x74
   1b48a:	1843      	adds	r3, r0, r1
   1b48c:	7122      	strb	r2, [r4, #4]
   1b48e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b492:	f7fd ba4b 	b.w	1892c <d_print_comp+0x1774>
   1b496:	2600      	movs	r6, #0
   1b498:	1d20      	adds	r0, r4, #4
   1b49a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b49e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b4a2:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   1b4a6:	4798      	blx	r3
   1b4a8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b4ac:	2001      	movs	r0, #1
   1b4ae:	4631      	mov	r1, r6
   1b4b0:	181a      	adds	r2, r3, r0
   1b4b2:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1b4b6:	f7fe b919 	b.w	196ec <d_print_comp+0x2534>
   1b4ba:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b4be:	2000      	movs	r0, #0
   1b4c0:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b4c4:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1b4c8:	1d20      	adds	r0, r4, #4
   1b4ca:	4798      	blx	r3
   1b4cc:	f8d4 7124 	ldr.w	r7, [r4, #292]	; 0x124
   1b4d0:	2101      	movs	r1, #1
   1b4d2:	226f      	movs	r2, #111	; 0x6f
   1b4d4:	187b      	adds	r3, r7, r1
   1b4d6:	7122      	strb	r2, [r4, #4]
   1b4d8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b4dc:	f7fc bc30 	b.w	17d40 <d_print_comp+0xb88>
   1b4e0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b4e4:	2000      	movs	r0, #0
   1b4e6:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b4ea:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1b4ee:	1d20      	adds	r0, r4, #4
   1b4f0:	4798      	blx	r3
   1b4f2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b4f6:	2101      	movs	r1, #1
   1b4f8:	2265      	movs	r2, #101	; 0x65
   1b4fa:	1858      	adds	r0, r3, r1
   1b4fc:	7122      	strb	r2, [r4, #4]
   1b4fe:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1b502:	f7fe b9b3 	b.w	1986c <d_print_comp+0x26b4>
   1b506:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b50a:	2000      	movs	r0, #0
   1b50c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b510:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1b514:	1d20      	adds	r0, r4, #4
   1b516:	4798      	blx	r3
   1b518:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b51c:	2101      	movs	r1, #1
   1b51e:	2263      	movs	r2, #99	; 0x63
   1b520:	1858      	adds	r0, r3, r1
   1b522:	7122      	strb	r2, [r4, #4]
   1b524:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1b528:	f7fe b993 	b.w	19852 <d_print_comp+0x269a>
   1b52c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b530:	2000      	movs	r0, #0
   1b532:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b536:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1b53a:	1d20      	adds	r0, r4, #4
   1b53c:	4798      	blx	r3
   1b53e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b542:	2101      	movs	r1, #1
   1b544:	2272      	movs	r2, #114	; 0x72
   1b546:	1858      	adds	r0, r3, r1
   1b548:	7122      	strb	r2, [r4, #4]
   1b54a:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1b54e:	f7fe b973 	b.w	19838 <d_print_comp+0x2680>
   1b552:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b556:	2000      	movs	r0, #0
   1b558:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b55c:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1b560:	1d20      	adds	r0, r4, #4
   1b562:	4798      	blx	r3
   1b564:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b568:	2101      	movs	r1, #1
   1b56a:	2275      	movs	r2, #117	; 0x75
   1b56c:	1858      	adds	r0, r3, r1
   1b56e:	7122      	strb	r2, [r4, #4]
   1b570:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1b574:	f7fe b953 	b.w	1981e <d_print_comp+0x2666>
   1b578:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b57c:	2000      	movs	r0, #0
   1b57e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b582:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1b586:	1d20      	adds	r0, r4, #4
   1b588:	4798      	blx	r3
   1b58a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b58e:	2101      	movs	r1, #1
   1b590:	226f      	movs	r2, #111	; 0x6f
   1b592:	1858      	adds	r0, r3, r1
   1b594:	7122      	strb	r2, [r4, #4]
   1b596:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1b59a:	f7fe b933 	b.w	19804 <d_print_comp+0x264c>
   1b59e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b5a2:	2000      	movs	r0, #0
   1b5a4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b5a8:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1b5ac:	1d20      	adds	r0, r4, #4
   1b5ae:	4798      	blx	r3
   1b5b0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b5b4:	2101      	movs	r1, #1
   1b5b6:	2273      	movs	r2, #115	; 0x73
   1b5b8:	1858      	adds	r0, r3, r1
   1b5ba:	7122      	strb	r2, [r4, #4]
   1b5bc:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1b5c0:	f7fe b913 	b.w	197ea <d_print_comp+0x2632>
   1b5c4:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b5c8:	2000      	movs	r0, #0
   1b5ca:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b5ce:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1b5d2:	1d20      	adds	r0, r4, #4
   1b5d4:	4798      	blx	r3
   1b5d6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b5da:	2101      	movs	r1, #1
   1b5dc:	2265      	movs	r2, #101	; 0x65
   1b5de:	1858      	adds	r0, r3, r1
   1b5e0:	7122      	strb	r2, [r4, #4]
   1b5e2:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1b5e6:	f7fe b8f3 	b.w	197d0 <d_print_comp+0x2618>
   1b5ea:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b5ee:	2000      	movs	r0, #0
   1b5f0:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b5f4:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1b5f8:	1d20      	adds	r0, r4, #4
   1b5fa:	4798      	blx	r3
   1b5fc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b600:	2101      	movs	r1, #1
   1b602:	2272      	movs	r2, #114	; 0x72
   1b604:	1858      	adds	r0, r3, r1
   1b606:	7122      	strb	r2, [r4, #4]
   1b608:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1b60c:	f7fe b8d3 	b.w	197b6 <d_print_comp+0x25fe>
   1b610:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b614:	2000      	movs	r0, #0
   1b616:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b61a:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1b61e:	1d20      	adds	r0, r4, #4
   1b620:	4798      	blx	r3
   1b622:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b626:	2101      	movs	r1, #1
   1b628:	2220      	movs	r2, #32
   1b62a:	1858      	adds	r0, r3, r1
   1b62c:	7122      	strb	r2, [r4, #4]
   1b62e:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1b632:	f7fe b8b3 	b.w	1979c <d_print_comp+0x25e4>
   1b636:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b63a:	2000      	movs	r0, #0
   1b63c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b640:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1b644:	1d20      	adds	r0, r4, #4
   1b646:	4798      	blx	r3
   1b648:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b64c:	2101      	movs	r1, #1
   1b64e:	2261      	movs	r2, #97	; 0x61
   1b650:	1858      	adds	r0, r3, r1
   1b652:	7122      	strb	r2, [r4, #4]
   1b654:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1b658:	f7fe b893 	b.w	19782 <d_print_comp+0x25ca>
   1b65c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b660:	2000      	movs	r0, #0
   1b662:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b666:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1b66a:	1d20      	adds	r0, r4, #4
   1b66c:	4798      	blx	r3
   1b66e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b672:	2101      	movs	r1, #1
   1b674:	2276      	movs	r2, #118	; 0x76
   1b676:	1858      	adds	r0, r3, r1
   1b678:	7122      	strb	r2, [r4, #4]
   1b67a:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1b67e:	f7fe b873 	b.w	19768 <d_print_comp+0x25b0>
   1b682:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b686:	2000      	movs	r0, #0
   1b688:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b68c:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1b690:	1d20      	adds	r0, r4, #4
   1b692:	4798      	blx	r3
   1b694:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b698:	2101      	movs	r1, #1
   1b69a:	2261      	movs	r2, #97	; 0x61
   1b69c:	1858      	adds	r0, r3, r1
   1b69e:	7122      	strb	r2, [r4, #4]
   1b6a0:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1b6a4:	f7fe b853 	b.w	1974e <d_print_comp+0x2596>
   1b6a8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b6ac:	2000      	movs	r0, #0
   1b6ae:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b6b2:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1b6b6:	1d20      	adds	r0, r4, #4
   1b6b8:	4798      	blx	r3
   1b6ba:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1b6be:	2101      	movs	r1, #1
   1b6c0:	206a      	movs	r0, #106	; 0x6a
   1b6c2:	1853      	adds	r3, r2, r1
   1b6c4:	7120      	strb	r0, [r4, #4]
   1b6c6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b6ca:	f7fe b833 	b.w	19734 <d_print_comp+0x257c>
   1b6ce:	2500      	movs	r5, #0
   1b6d0:	1d20      	adds	r0, r4, #4
   1b6d2:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b6d6:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b6da:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   1b6de:	4798      	blx	r3
   1b6e0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b6e4:	2201      	movs	r2, #1
   1b6e6:	4629      	mov	r1, r5
   1b6e8:	1898      	adds	r0, r3, r2
   1b6ea:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1b6ee:	f7fb bed6 	b.w	1749e <d_print_comp+0x2e6>
   1b6f2:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b6f6:	2000      	movs	r0, #0
   1b6f8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b6fc:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1b700:	1d20      	adds	r0, r4, #4
   1b702:	4798      	blx	r3
   1b704:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b708:	2101      	movs	r1, #1
   1b70a:	225b      	movs	r2, #91	; 0x5b
   1b70c:	1858      	adds	r0, r3, r1
   1b70e:	7122      	strb	r2, [r4, #4]
   1b710:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1b714:	f7fb be6e 	b.w	173f4 <d_print_comp+0x23c>
   1b718:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b71c:	2000      	movs	r0, #0
   1b71e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b722:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1b726:	1d20      	adds	r0, r4, #4
   1b728:	4798      	blx	r3
   1b72a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1b72e:	2101      	movs	r1, #1
   1b730:	2320      	movs	r3, #32
   1b732:	1850      	adds	r0, r2, r1
   1b734:	7123      	strb	r3, [r4, #4]
   1b736:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1b73a:	f7fb be4e 	b.w	173da <d_print_comp+0x222>
   1b73e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b742:	2000      	movs	r0, #0
   1b744:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b748:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1b74c:	1d20      	adds	r0, r4, #4
   1b74e:	4798      	blx	r3
   1b750:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b754:	2101      	movs	r1, #1
   1b756:	226e      	movs	r2, #110	; 0x6e
   1b758:	1858      	adds	r0, r3, r1
   1b75a:	7122      	strb	r2, [r4, #4]
   1b75c:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1b760:	f7fb be7c 	b.w	1745c <d_print_comp+0x2a4>
   1b764:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b768:	2000      	movs	r0, #0
   1b76a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b76e:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1b772:	1d20      	adds	r0, r4, #4
   1b774:	4798      	blx	r3
   1b776:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b77a:	2101      	movs	r1, #1
   1b77c:	226f      	movs	r2, #111	; 0x6f
   1b77e:	1858      	adds	r0, r3, r1
   1b780:	7122      	strb	r2, [r4, #4]
   1b782:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1b786:	f7fb be5c 	b.w	17442 <d_print_comp+0x28a>
   1b78a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b78e:	2000      	movs	r0, #0
   1b790:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b794:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1b798:	1d20      	adds	r0, r4, #4
   1b79a:	4798      	blx	r3
   1b79c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b7a0:	2101      	movs	r1, #1
   1b7a2:	226c      	movs	r2, #108	; 0x6c
   1b7a4:	1858      	adds	r0, r3, r1
   1b7a6:	7122      	strb	r2, [r4, #4]
   1b7a8:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1b7ac:	f7fb be3c 	b.w	17428 <d_print_comp+0x270>
   1b7b0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b7b4:	2000      	movs	r0, #0
   1b7b6:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b7ba:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1b7be:	1d20      	adds	r0, r4, #4
   1b7c0:	4798      	blx	r3
   1b7c2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b7c6:	2101      	movs	r1, #1
   1b7c8:	2263      	movs	r2, #99	; 0x63
   1b7ca:	1858      	adds	r0, r3, r1
   1b7cc:	7122      	strb	r2, [r4, #4]
   1b7ce:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1b7d2:	f7fb be1c 	b.w	1740e <d_print_comp+0x256>
   1b7d6:	2300      	movs	r3, #0
   1b7d8:	1d20      	adds	r0, r4, #4
   1b7da:	f884 3103 	strb.w	r3, [r4, #259]	; 0x103
   1b7de:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b7e2:	f8d4 710c 	ldr.w	r7, [r4, #268]	; 0x10c
   1b7e6:	47b8      	blx	r7
   1b7e8:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b7ec:	2101      	movs	r1, #1
   1b7ee:	2264      	movs	r2, #100	; 0x64
   1b7f0:	1843      	adds	r3, r0, r1
   1b7f2:	7122      	strb	r2, [r4, #4]
   1b7f4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b7f8:	f7fb bf36 	b.w	17668 <d_print_comp+0x4b0>
   1b7fc:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b800:	2000      	movs	r0, #0
   1b802:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b806:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1b80a:	1d20      	adds	r0, r4, #4
   1b80c:	4798      	blx	r3
   1b80e:	f8d4 7124 	ldr.w	r7, [r4, #292]	; 0x124
   1b812:	2101      	movs	r1, #1
   1b814:	2265      	movs	r2, #101	; 0x65
   1b816:	187b      	adds	r3, r7, r1
   1b818:	7122      	strb	r2, [r4, #4]
   1b81a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b81e:	f7fb bf16 	b.w	1764e <d_print_comp+0x496>
   1b822:	2700      	movs	r7, #0
   1b824:	1d20      	adds	r0, r4, #4
   1b826:	f884 7103 	strb.w	r7, [r4, #259]	; 0x103
   1b82a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b82e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b832:	4798      	blx	r3
   1b834:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b838:	2101      	movs	r1, #1
   1b83a:	226d      	movs	r2, #109	; 0x6d
   1b83c:	1847      	adds	r7, r0, r1
   1b83e:	7122      	strb	r2, [r4, #4]
   1b840:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
   1b844:	f7fb bef6 	b.w	17634 <d_print_comp+0x47c>
   1b848:	f8d4 710c 	ldr.w	r7, [r4, #268]	; 0x10c
   1b84c:	2000      	movs	r0, #0
   1b84e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b852:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1b856:	1d20      	adds	r0, r4, #4
   1b858:	47b8      	blx	r7
   1b85a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1b85e:	2101      	movs	r1, #1
   1b860:	2361      	movs	r3, #97	; 0x61
   1b862:	1857      	adds	r7, r2, r1
   1b864:	7123      	strb	r3, [r4, #4]
   1b866:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
   1b86a:	f7fb bed6 	b.w	1761a <d_print_comp+0x462>
   1b86e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b872:	2200      	movs	r2, #0
   1b874:	1d20      	adds	r0, r4, #4
   1b876:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1b87a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b87e:	4798      	blx	r3
   1b880:	f8d4 7124 	ldr.w	r7, [r4, #292]	; 0x124
   1b884:	2101      	movs	r1, #1
   1b886:	7126      	strb	r6, [r4, #4]
   1b888:	187b      	adds	r3, r7, r1
   1b88a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b88e:	f7fb beb7 	b.w	17600 <d_print_comp+0x448>
   1b892:	f8d4 710c 	ldr.w	r7, [r4, #268]	; 0x10c
   1b896:	2200      	movs	r2, #0
   1b898:	1d20      	adds	r0, r4, #4
   1b89a:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1b89e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b8a2:	47b8      	blx	r7
   1b8a4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b8a8:	2101      	movs	r1, #1
   1b8aa:	276e      	movs	r7, #110	; 0x6e
   1b8ac:	1858      	adds	r0, r3, r1
   1b8ae:	7127      	strb	r7, [r4, #4]
   1b8b0:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1b8b4:	f7fb be97 	b.w	175e6 <d_print_comp+0x42e>
   1b8b8:	f8d4 610c 	ldr.w	r6, [r4, #268]	; 0x10c
   1b8bc:	2200      	movs	r2, #0
   1b8be:	1d20      	adds	r0, r4, #4
   1b8c0:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1b8c4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b8c8:	2775      	movs	r7, #117	; 0x75
   1b8ca:	47b0      	blx	r6
   1b8cc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b8d0:	2101      	movs	r1, #1
   1b8d2:	7127      	strb	r7, [r4, #4]
   1b8d4:	185e      	adds	r6, r3, r1
   1b8d6:	f8c4 6124 	str.w	r6, [r4, #292]	; 0x124
   1b8da:	f7fb be77 	b.w	175cc <d_print_comp+0x414>
   1b8de:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b8e2:	2200      	movs	r2, #0
   1b8e4:	1d20      	adds	r0, r4, #4
   1b8e6:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1b8ea:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b8ee:	4798      	blx	r3
   1b8f0:	f8d4 7124 	ldr.w	r7, [r4, #292]	; 0x124
   1b8f4:	2101      	movs	r1, #1
   1b8f6:	207b      	movs	r0, #123	; 0x7b
   1b8f8:	187b      	adds	r3, r7, r1
   1b8fa:	7120      	strb	r0, [r4, #4]
   1b8fc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b900:	f7fb be57 	b.w	175b2 <d_print_comp+0x3fa>
   1b904:	2500      	movs	r5, #0
   1b906:	1d20      	adds	r0, r4, #4
   1b908:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b90c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b910:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   1b914:	4798      	blx	r3
   1b916:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b91a:	2201      	movs	r2, #1
   1b91c:	4629      	mov	r1, r5
   1b91e:	1898      	adds	r0, r3, r2
   1b920:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1b924:	f7fd bbb1 	b.w	1908a <d_print_comp+0x1ed2>
   1b928:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b92c:	2000      	movs	r0, #0
   1b92e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b932:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1b936:	1d20      	adds	r0, r4, #4
   1b938:	4798      	blx	r3
   1b93a:	f8d4 7124 	ldr.w	r7, [r4, #292]	; 0x124
   1b93e:	2101      	movs	r1, #1
   1b940:	2229      	movs	r2, #41	; 0x29
   1b942:	187b      	adds	r3, r7, r1
   1b944:	7122      	strb	r2, [r4, #4]
   1b946:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b94a:	f7fb bfc1 	b.w	178d0 <d_print_comp+0x718>
   1b94e:	4658      	mov	r0, fp
   1b950:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b954:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b958:	f884 a103 	strb.w	sl, [r4, #259]	; 0x103
   1b95c:	4798      	blx	r3
   1b95e:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1b962:	2101      	movs	r1, #1
   1b964:	4653      	mov	r3, sl
   1b966:	1850      	adds	r0, r2, r1
   1b968:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1b96c:	f7fd bc13 	b.w	19196 <d_print_comp+0x1fde>
   1b970:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b974:	2200      	movs	r2, #0
   1b976:	1d20      	adds	r0, r4, #4
   1b978:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1b97c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b980:	4798      	blx	r3
   1b982:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b986:	2101      	movs	r1, #1
   1b988:	2272      	movs	r2, #114	; 0x72
   1b98a:	1843      	adds	r3, r0, r1
   1b98c:	7122      	strb	r2, [r4, #4]
   1b98e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b992:	f7fc b8e4 	b.w	17b5e <d_print_comp+0x9a6>
   1b996:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b99a:	2200      	movs	r2, #0
   1b99c:	1d20      	adds	r0, r4, #4
   1b99e:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1b9a2:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b9a6:	4798      	blx	r3
   1b9a8:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b9ac:	2101      	movs	r1, #1
   1b9ae:	226f      	movs	r2, #111	; 0x6f
   1b9b0:	1843      	adds	r3, r0, r1
   1b9b2:	7122      	strb	r2, [r4, #4]
   1b9b4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b9b8:	f7fc b8c4 	b.w	17b44 <d_print_comp+0x98c>
   1b9bc:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b9c0:	2200      	movs	r2, #0
   1b9c2:	1d20      	adds	r0, r4, #4
   1b9c4:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1b9c8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b9cc:	4798      	blx	r3
   1b9ce:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b9d2:	2101      	movs	r1, #1
   1b9d4:	2274      	movs	r2, #116	; 0x74
   1b9d6:	1843      	adds	r3, r0, r1
   1b9d8:	7122      	strb	r2, [r4, #4]
   1b9da:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b9de:	f7fc b8a4 	b.w	17b2a <d_print_comp+0x972>
   1b9e2:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b9e6:	2200      	movs	r2, #0
   1b9e8:	1d20      	adds	r0, r4, #4
   1b9ea:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1b9ee:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b9f2:	4798      	blx	r3
   1b9f4:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b9f8:	2101      	movs	r1, #1
   1b9fa:	2261      	movs	r2, #97	; 0x61
   1b9fc:	1843      	adds	r3, r0, r1
   1b9fe:	7122      	strb	r2, [r4, #4]
   1ba00:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1ba04:	f7fc b884 	b.w	17b10 <d_print_comp+0x958>
   1ba08:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ba0c:	2200      	movs	r2, #0
   1ba0e:	1d20      	adds	r0, r4, #4
   1ba10:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1ba14:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ba18:	4798      	blx	r3
   1ba1a:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1ba1e:	2101      	movs	r1, #1
   1ba20:	2272      	movs	r2, #114	; 0x72
   1ba22:	1843      	adds	r3, r0, r1
   1ba24:	7122      	strb	r2, [r4, #4]
   1ba26:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1ba2a:	f7fc b864 	b.w	17af6 <d_print_comp+0x93e>
   1ba2e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ba32:	2200      	movs	r2, #0
   1ba34:	1d20      	adds	r0, r4, #4
   1ba36:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1ba3a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ba3e:	4798      	blx	r3
   1ba40:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1ba44:	2101      	movs	r1, #1
   1ba46:	2265      	movs	r2, #101	; 0x65
   1ba48:	1843      	adds	r3, r0, r1
   1ba4a:	7122      	strb	r2, [r4, #4]
   1ba4c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1ba50:	f7fc b844 	b.w	17adc <d_print_comp+0x924>
   1ba54:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ba58:	2200      	movs	r2, #0
   1ba5a:	1d20      	adds	r0, r4, #4
   1ba5c:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1ba60:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ba64:	4798      	blx	r3
   1ba66:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1ba6a:	2101      	movs	r1, #1
   1ba6c:	2270      	movs	r2, #112	; 0x70
   1ba6e:	1843      	adds	r3, r0, r1
   1ba70:	7122      	strb	r2, [r4, #4]
   1ba72:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1ba76:	f7fc b824 	b.w	17ac2 <d_print_comp+0x90a>
   1ba7a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ba7e:	2200      	movs	r2, #0
   1ba80:	1d20      	adds	r0, r4, #4
   1ba82:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1ba86:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ba8a:	4798      	blx	r3
   1ba8c:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1ba90:	2101      	movs	r1, #1
   1ba92:	226f      	movs	r2, #111	; 0x6f
   1ba94:	1843      	adds	r3, r0, r1
   1ba96:	7122      	strb	r2, [r4, #4]
   1ba98:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1ba9c:	f7fc b804 	b.w	17aa8 <d_print_comp+0x8f0>
   1baa0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1baa4:	2200      	movs	r2, #0
   1baa6:	1d20      	adds	r0, r4, #4
   1baa8:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1baac:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1bab0:	4798      	blx	r3
   1bab2:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1bab6:	2101      	movs	r1, #1
   1bab8:	2272      	movs	r2, #114	; 0x72
   1baba:	1843      	adds	r3, r0, r1
   1babc:	7122      	strb	r2, [r4, #4]
   1babe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1bac2:	f7fc b8c8 	b.w	17c56 <d_print_comp+0xa9e>
   1bac6:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1baca:	2200      	movs	r2, #0
   1bacc:	1d20      	adds	r0, r4, #4
   1bace:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1bad2:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1bad6:	4798      	blx	r3
   1bad8:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1badc:	2101      	movs	r1, #1
   1bade:	226f      	movs	r2, #111	; 0x6f
   1bae0:	1843      	adds	r3, r0, r1
   1bae2:	7122      	strb	r2, [r4, #4]
   1bae4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1bae8:	f7fc b8a8 	b.w	17c3c <d_print_comp+0xa84>
   1baec:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1baf0:	2200      	movs	r2, #0
   1baf2:	1d20      	adds	r0, r4, #4
   1baf4:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1baf8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1bafc:	4798      	blx	r3
   1bafe:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1bb02:	2101      	movs	r1, #1
   1bb04:	2274      	movs	r2, #116	; 0x74
   1bb06:	1843      	adds	r3, r0, r1
   1bb08:	7122      	strb	r2, [r4, #4]
   1bb0a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1bb0e:	f7fc b888 	b.w	17c22 <d_print_comp+0xa6a>
   1bb12:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1bb16:	2200      	movs	r2, #0
   1bb18:	1d20      	adds	r0, r4, #4
   1bb1a:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1bb1e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1bb22:	4798      	blx	r3
   1bb24:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1bb28:	2101      	movs	r1, #1
   1bb2a:	2261      	movs	r2, #97	; 0x61
   1bb2c:	1843      	adds	r3, r0, r1
   1bb2e:	7122      	strb	r2, [r4, #4]
   1bb30:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1bb34:	f7fc b868 	b.w	17c08 <d_print_comp+0xa50>
   1bb38:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1bb3c:	2200      	movs	r2, #0
   1bb3e:	1d20      	adds	r0, r4, #4
   1bb40:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1bb44:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1bb48:	4798      	blx	r3
   1bb4a:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1bb4e:	2101      	movs	r1, #1
   1bb50:	2272      	movs	r2, #114	; 0x72
   1bb52:	1843      	adds	r3, r0, r1
   1bb54:	7122      	strb	r2, [r4, #4]
   1bb56:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1bb5a:	f7fc b848 	b.w	17bee <d_print_comp+0xa36>
   1bb5e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1bb62:	2200      	movs	r2, #0
   1bb64:	1d20      	adds	r0, r4, #4
   1bb66:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1bb6a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1bb6e:	4798      	blx	r3
   1bb70:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1bb74:	2101      	movs	r1, #1
   1bb76:	2265      	movs	r2, #101	; 0x65
   1bb78:	1843      	adds	r3, r0, r1
   1bb7a:	7122      	strb	r2, [r4, #4]
   1bb7c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1bb80:	f7fc b828 	b.w	17bd4 <d_print_comp+0xa1c>
   1bb84:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1bb88:	2200      	movs	r2, #0
   1bb8a:	1d20      	adds	r0, r4, #4
   1bb8c:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1bb90:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1bb94:	4798      	blx	r3
   1bb96:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1bb9a:	2101      	movs	r1, #1
   1bb9c:	2270      	movs	r2, #112	; 0x70
   1bb9e:	1843      	adds	r3, r0, r1
   1bba0:	7122      	strb	r2, [r4, #4]
   1bba2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1bba6:	f7fc b808 	b.w	17bba <d_print_comp+0xa02>
   1bbaa:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1bbae:	2200      	movs	r2, #0
   1bbb0:	1d20      	adds	r0, r4, #4
   1bbb2:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1bbb6:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1bbba:	4798      	blx	r3
   1bbbc:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1bbc0:	2101      	movs	r1, #1
   1bbc2:	226f      	movs	r2, #111	; 0x6f
   1bbc4:	1843      	adds	r3, r0, r1
   1bbc6:	7122      	strb	r2, [r4, #4]
   1bbc8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1bbcc:	f7fb bfe8 	b.w	17ba0 <d_print_comp+0x9e8>
   1bbd0:	2300      	movs	r3, #0
   1bbd2:	1d20      	adds	r0, r4, #4
   1bbd4:	f884 3103 	strb.w	r3, [r4, #259]	; 0x103
   1bbd8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1bbdc:	f8d4 710c 	ldr.w	r7, [r4, #268]	; 0x10c
   1bbe0:	47b8      	blx	r7
   1bbe2:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1bbe6:	2101      	movs	r1, #1
   1bbe8:	2272      	movs	r2, #114	; 0x72
   1bbea:	1843      	adds	r3, r0, r1
   1bbec:	7122      	strb	r2, [r4, #4]
   1bbee:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1bbf2:	f7fc b87e 	b.w	17cf2 <d_print_comp+0xb3a>
   1bbf6:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1bbfa:	2000      	movs	r0, #0
   1bbfc:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1bc00:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1bc04:	1d20      	adds	r0, r4, #4
   1bc06:	4798      	blx	r3
   1bc08:	f8d4 7124 	ldr.w	r7, [r4, #292]	; 0x124
   1bc0c:	2101      	movs	r1, #1
   1bc0e:	2265      	movs	r2, #101	; 0x65
   1bc10:	187b      	adds	r3, r7, r1
   1bc12:	7122      	strb	r2, [r4, #4]
   1bc14:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1bc18:	f7fc b85e 	b.w	17cd8 <d_print_comp+0xb20>
   1bc1c:	2700      	movs	r7, #0
   1bc1e:	1d20      	adds	r0, r4, #4
   1bc20:	f884 7103 	strb.w	r7, [r4, #259]	; 0x103
   1bc24:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1bc28:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1bc2c:	4798      	blx	r3
   1bc2e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1bc32:	2101      	movs	r1, #1
   1bc34:	2270      	movs	r2, #112	; 0x70
   1bc36:	1847      	adds	r7, r0, r1
   1bc38:	7122      	strb	r2, [r4, #4]
   1bc3a:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
   1bc3e:	f7fc b83e 	b.w	17cbe <d_print_comp+0xb06>
   1bc42:	2000      	movs	r0, #0
   1bc44:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1bc48:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1bc4c:	1d20      	adds	r0, r4, #4
   1bc4e:	f8d4 710c 	ldr.w	r7, [r4, #268]	; 0x10c
   1bc52:	47b8      	blx	r7
   1bc54:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1bc58:	2101      	movs	r1, #1
   1bc5a:	226f      	movs	r2, #111	; 0x6f
   1bc5c:	1858      	adds	r0, r3, r1
   1bc5e:	7122      	strb	r2, [r4, #4]
   1bc60:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1bc64:	f7fc b81e 	b.w	17ca4 <d_print_comp+0xaec>
   1bc68:	2700      	movs	r7, #0
   1bc6a:	1d20      	adds	r0, r4, #4
   1bc6c:	f884 7103 	strb.w	r7, [r4, #259]	; 0x103
   1bc70:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1bc74:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1bc78:	4798      	blx	r3
   1bc7a:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1bc7e:	2101      	movs	r1, #1
   1bc80:	2274      	movs	r2, #116	; 0x74
   1bc82:	1847      	adds	r7, r0, r1
   1bc84:	7122      	strb	r2, [r4, #4]
   1bc86:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
   1bc8a:	f7fc b84c 	b.w	17d26 <d_print_comp+0xb6e>
   1bc8e:	f8d4 710c 	ldr.w	r7, [r4, #268]	; 0x10c
   1bc92:	2000      	movs	r0, #0
   1bc94:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1bc98:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1bc9c:	1d20      	adds	r0, r4, #4
   1bc9e:	47b8      	blx	r7
   1bca0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1bca4:	2101      	movs	r1, #1
   1bca6:	2261      	movs	r2, #97	; 0x61
   1bca8:	185f      	adds	r7, r3, r1
   1bcaa:	7122      	strb	r2, [r4, #4]
   1bcac:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
   1bcb0:	f7fc b82c 	b.w	17d0c <d_print_comp+0xb54>
   1bcb4:	2500      	movs	r5, #0
   1bcb6:	1d20      	adds	r0, r4, #4
   1bcb8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1bcbc:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1bcc0:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   1bcc4:	4798      	blx	r3
   1bcc6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1bcca:	2201      	movs	r2, #1
   1bccc:	4629      	mov	r1, r5
   1bcce:	1898      	adds	r0, r3, r2
   1bcd0:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1bcd4:	f7fe b837 	b.w	19d46 <d_print_comp+0x2b8e>
   1bcd8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1bcdc:	2200      	movs	r2, #0
   1bcde:	1d20      	adds	r0, r4, #4
   1bce0:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1bce4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1bce8:	4798      	blx	r3
   1bcea:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1bcee:	2101      	movs	r1, #1
   1bcf0:	2272      	movs	r2, #114	; 0x72
   1bcf2:	1843      	adds	r3, r0, r1
   1bcf4:	7122      	strb	r2, [r4, #4]
   1bcf6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1bcfa:	f7fc b9dc 	b.w	180b6 <d_print_comp+0xefe>
   1bcfe:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1bd02:	2200      	movs	r2, #0
   1bd04:	1d20      	adds	r0, r4, #4
   1bd06:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1bd0a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1bd0e:	4798      	blx	r3
   1bd10:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1bd14:	2101      	movs	r1, #1
   1bd16:	226f      	movs	r2, #111	; 0x6f
   1bd18:	1843      	adds	r3, r0, r1
   1bd1a:	7122      	strb	r2, [r4, #4]
   1bd1c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1bd20:	f7fc b9bc 	b.w	1809c <d_print_comp+0xee4>
   1bd24:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1bd28:	2200      	movs	r2, #0
   1bd2a:	1d20      	adds	r0, r4, #4
   1bd2c:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1bd30:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1bd34:	4798      	blx	r3
   1bd36:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1bd3a:	2101      	movs	r1, #1
   1bd3c:	2266      	movs	r2, #102	; 0x66
   1bd3e:	1843      	adds	r3, r0, r1
   1bd40:	7122      	strb	r2, [r4, #4]
   1bd42:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1bd46:	f7fc b99c 	b.w	18082 <d_print_comp+0xeca>
   1bd4a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1bd4e:	2200      	movs	r2, #0
   1bd50:	1d20      	adds	r0, r4, #4
   1bd52:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1bd56:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1bd5a:	4798      	blx	r3
   1bd5c:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1bd60:	2101      	movs	r1, #1
   1bd62:	2220      	movs	r2, #32
   1bd64:	1843      	adds	r3, r0, r1
   1bd66:	7122      	strb	r2, [r4, #4]
   1bd68:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1bd6c:	f7fc b97c 	b.w	18068 <d_print_comp+0xeb0>
   1bd70:	2200      	movs	r2, #0
   1bd72:	1d20      	adds	r0, r4, #4
   1bd74:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1bd78:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1bd7c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1bd80:	4798      	blx	r3
   1bd82:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1bd86:	2101      	movs	r1, #1
   1bd88:	7126      	strb	r6, [r4, #4]
   1bd8a:	1842      	adds	r2, r0, r1
   1bd8c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1bd90:	f7fc b95d 	b.w	1804e <d_print_comp+0xe96>
   1bd94:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1bd98:	2000      	movs	r0, #0
   1bd9a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1bd9e:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1bda2:	1d20      	adds	r0, r4, #4
   1bda4:	4798      	blx	r3
   1bda6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1bdaa:	2101      	movs	r1, #1
   1bdac:	2273      	movs	r2, #115	; 0x73
   1bdae:	1858      	adds	r0, r3, r1
   1bdb0:	7122      	strb	r2, [r4, #4]
   1bdb2:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1bdb6:	f7fc b93d 	b.w	18034 <d_print_comp+0xe7c>
   1bdba:	2600      	movs	r6, #0
   1bdbc:	1d20      	adds	r0, r4, #4
   1bdbe:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   1bdc2:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1bdc6:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1bdca:	4798      	blx	r3
   1bdcc:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1bdd0:	2101      	movs	r1, #1
   1bdd2:	2261      	movs	r2, #97	; 0x61
   1bdd4:	1846      	adds	r6, r0, r1
   1bdd6:	7122      	strb	r2, [r4, #4]
   1bdd8:	f8c4 6124 	str.w	r6, [r4, #292]	; 0x124
   1bddc:	f7fc b91d 	b.w	1801a <d_print_comp+0xe62>
   1bde0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1bde4:	2000      	movs	r0, #0
   1bde6:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1bdea:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1bdee:	1d20      	adds	r0, r4, #4
   1bdf0:	4798      	blx	r3
   1bdf2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1bdf6:	2101      	movs	r1, #1
   1bdf8:	226c      	movs	r2, #108	; 0x6c
   1bdfa:	1858      	adds	r0, r3, r1
   1bdfc:	7122      	strb	r2, [r4, #4]
   1bdfe:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1be02:	f7fc b8fd 	b.w	18000 <d_print_comp+0xe48>
   1be06:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1be0a:	2000      	movs	r0, #0
   1be0c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1be10:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1be14:	1d20      	adds	r0, r4, #4
   1be16:	4798      	blx	r3
   1be18:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1be1c:	2101      	movs	r1, #1
   1be1e:	2243      	movs	r2, #67	; 0x43
   1be20:	1858      	adds	r0, r3, r1
   1be22:	7122      	strb	r2, [r4, #4]
   1be24:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1be28:	f7fc b8dd 	b.w	17fe6 <d_print_comp+0xe2e>
   1be2c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1be30:	2000      	movs	r0, #0
   1be32:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1be36:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1be3a:	1d20      	adds	r0, r4, #4
   1be3c:	4798      	blx	r3
   1be3e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1be42:	2101      	movs	r1, #1
   1be44:	2220      	movs	r2, #32
   1be46:	1858      	adds	r0, r3, r1
   1be48:	7122      	strb	r2, [r4, #4]
   1be4a:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1be4e:	f7fc b8bd 	b.w	17fcc <d_print_comp+0xe14>
   1be52:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1be56:	2000      	movs	r0, #0
   1be58:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1be5c:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1be60:	1d20      	adds	r0, r4, #4
   1be62:	4798      	blx	r3
   1be64:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1be68:	2101      	movs	r1, #1
   1be6a:	2261      	movs	r2, #97	; 0x61
   1be6c:	1858      	adds	r0, r3, r1
   1be6e:	7122      	strb	r2, [r4, #4]
   1be70:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1be74:	f7fc b89d 	b.w	17fb2 <d_print_comp+0xdfa>
   1be78:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1be7c:	2000      	movs	r0, #0
   1be7e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1be82:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1be86:	1d20      	adds	r0, r4, #4
   1be88:	4798      	blx	r3
   1be8a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1be8e:	2101      	movs	r1, #1
   1be90:	2276      	movs	r2, #118	; 0x76
   1be92:	1858      	adds	r0, r3, r1
   1be94:	7122      	strb	r2, [r4, #4]
   1be96:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1be9a:	f7fc b87d 	b.w	17f98 <d_print_comp+0xde0>
   1be9e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1bea2:	2000      	movs	r0, #0
   1bea4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1bea8:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1beac:	1d20      	adds	r0, r4, #4
   1beae:	4798      	blx	r3
   1beb0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1beb4:	2101      	movs	r1, #1
   1beb6:	2261      	movs	r2, #97	; 0x61
   1beb8:	1858      	adds	r0, r3, r1
   1beba:	7122      	strb	r2, [r4, #4]
   1bebc:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1bec0:	f7fc b85d 	b.w	17f7e <d_print_comp+0xdc6>
   1bec4:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1bec8:	2000      	movs	r0, #0
   1beca:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1bece:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1bed2:	1d20      	adds	r0, r4, #4
   1bed4:	4798      	blx	r3
   1bed6:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1beda:	2101      	movs	r1, #1
   1bedc:	206a      	movs	r0, #106	; 0x6a
   1bede:	1853      	adds	r3, r2, r1
   1bee0:	7120      	strb	r0, [r4, #4]
   1bee2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1bee6:	f7fc b83d 	b.w	17f64 <d_print_comp+0xdac>
   1beea:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1beee:	2000      	movs	r0, #0
   1bef0:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1bef4:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1bef8:	1d20      	adds	r0, r4, #4
   1befa:	4798      	blx	r3
   1befc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1bf00:	2101      	movs	r1, #1
   1bf02:	226f      	movs	r2, #111	; 0x6f
   1bf04:	1858      	adds	r0, r3, r1
   1bf06:	7122      	strb	r2, [r4, #4]
   1bf08:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1bf0c:	f7fc b9f2 	b.w	182f4 <d_print_comp+0x113c>
   1bf10:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1bf14:	2000      	movs	r0, #0
   1bf16:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1bf1a:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1bf1e:	1d20      	adds	r0, r4, #4
   1bf20:	4798      	blx	r3
   1bf22:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1bf26:	2101      	movs	r1, #1
   1bf28:	2274      	movs	r2, #116	; 0x74
   1bf2a:	1858      	adds	r0, r3, r1
   1bf2c:	7122      	strb	r2, [r4, #4]
   1bf2e:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1bf32:	f7fc b9d2 	b.w	182da <d_print_comp+0x1122>
   1bf36:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1bf3a:	2000      	movs	r0, #0
   1bf3c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1bf40:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1bf44:	1d20      	adds	r0, r4, #4
   1bf46:	4798      	blx	r3
   1bf48:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1bf4c:	2101      	movs	r1, #1
   1bf4e:	2220      	movs	r2, #32
   1bf50:	1858      	adds	r0, r3, r1
   1bf52:	7122      	strb	r2, [r4, #4]
   1bf54:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1bf58:	f7fc b9b2 	b.w	182c0 <d_print_comp+0x1108>
   1bf5c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1bf60:	2000      	movs	r0, #0
   1bf62:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1bf66:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1bf6a:	1d20      	adds	r0, r4, #4
   1bf6c:	4798      	blx	r3
   1bf6e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1bf72:	2101      	movs	r1, #1
   1bf74:	226b      	movs	r2, #107	; 0x6b
   1bf76:	1858      	adds	r0, r3, r1
   1bf78:	7122      	strb	r2, [r4, #4]
   1bf7a:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1bf7e:	f7fc b992 	b.w	182a6 <d_print_comp+0x10ee>
   1bf82:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1bf86:	2000      	movs	r0, #0
   1bf88:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1bf8c:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1bf90:	1d20      	adds	r0, r4, #4
   1bf92:	4798      	blx	r3
   1bf94:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1bf98:	2101      	movs	r1, #1
   1bf9a:	226e      	movs	r2, #110	; 0x6e
   1bf9c:	1858      	adds	r0, r3, r1
   1bf9e:	7122      	strb	r2, [r4, #4]
   1bfa0:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1bfa4:	f7fc b972 	b.w	1828c <d_print_comp+0x10d4>
   1bfa8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1bfac:	2000      	movs	r0, #0
   1bfae:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1bfb2:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1bfb6:	1d20      	adds	r0, r4, #4
   1bfb8:	4798      	blx	r3
   1bfba:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1bfbe:	2101      	movs	r1, #1
   1bfc0:	2275      	movs	r2, #117	; 0x75
   1bfc2:	1858      	adds	r0, r3, r1
   1bfc4:	7122      	strb	r2, [r4, #4]
   1bfc6:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1bfca:	f7fc b952 	b.w	18272 <d_print_comp+0x10ba>
   1bfce:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1bfd2:	2000      	movs	r0, #0
   1bfd4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1bfd8:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1bfdc:	1d20      	adds	r0, r4, #4
   1bfde:	4798      	blx	r3
   1bfe0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1bfe4:	2101      	movs	r1, #1
   1bfe6:	2268      	movs	r2, #104	; 0x68
   1bfe8:	1858      	adds	r0, r3, r1
   1bfea:	7122      	strb	r2, [r4, #4]
   1bfec:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1bff0:	f7fc b932 	b.w	18258 <d_print_comp+0x10a0>
   1bff4:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1bff8:	2000      	movs	r0, #0
   1bffa:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1bffe:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1c002:	1d20      	adds	r0, r4, #4
   1c004:	4798      	blx	r3
   1c006:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1c00a:	2101      	movs	r1, #1
   1c00c:	2274      	movs	r2, #116	; 0x74
   1c00e:	1858      	adds	r0, r3, r1
   1c010:	7122      	strb	r2, [r4, #4]
   1c012:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1c016:	f7fc b912 	b.w	1823e <d_print_comp+0x1086>
   1c01a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c01e:	2000      	movs	r0, #0
   1c020:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c024:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1c028:	1d20      	adds	r0, r4, #4
   1c02a:	4798      	blx	r3
   1c02c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1c030:	2101      	movs	r1, #1
   1c032:	2220      	movs	r2, #32
   1c034:	1858      	adds	r0, r3, r1
   1c036:	7122      	strb	r2, [r4, #4]
   1c038:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1c03c:	f7fc b8f2 	b.w	18224 <d_print_comp+0x106c>
   1c040:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c044:	2000      	movs	r0, #0
   1c046:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c04a:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1c04e:	1d20      	adds	r0, r4, #4
   1c050:	4798      	blx	r3
   1c052:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1c056:	2101      	movs	r1, #1
   1c058:	226c      	movs	r2, #108	; 0x6c
   1c05a:	1858      	adds	r0, r3, r1
   1c05c:	7122      	strb	r2, [r4, #4]
   1c05e:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1c062:	f7fc b8d2 	b.w	1820a <d_print_comp+0x1052>
   1c066:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c06a:	2000      	movs	r0, #0
   1c06c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c070:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1c074:	1d20      	adds	r0, r4, #4
   1c076:	4798      	blx	r3
   1c078:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1c07c:	2101      	movs	r1, #1
   1c07e:	2261      	movs	r2, #97	; 0x61
   1c080:	1858      	adds	r0, r3, r1
   1c082:	7122      	strb	r2, [r4, #4]
   1c084:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1c088:	f7fc b8b2 	b.w	181f0 <d_print_comp+0x1038>
   1c08c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c090:	2000      	movs	r0, #0
   1c092:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c096:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1c09a:	1d20      	adds	r0, r4, #4
   1c09c:	4798      	blx	r3
   1c09e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1c0a2:	2101      	movs	r1, #1
   1c0a4:	2275      	movs	r2, #117	; 0x75
   1c0a6:	1858      	adds	r0, r3, r1
   1c0a8:	7122      	strb	r2, [r4, #4]
   1c0aa:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1c0ae:	f7fc b892 	b.w	181d6 <d_print_comp+0x101e>
   1c0b2:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c0b6:	2000      	movs	r0, #0
   1c0b8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c0bc:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1c0c0:	1d20      	adds	r0, r4, #4
   1c0c2:	4798      	blx	r3
   1c0c4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1c0c8:	2101      	movs	r1, #1
   1c0ca:	2274      	movs	r2, #116	; 0x74
   1c0cc:	1858      	adds	r0, r3, r1
   1c0ce:	7122      	strb	r2, [r4, #4]
   1c0d0:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1c0d4:	f7fc b872 	b.w	181bc <d_print_comp+0x1004>
   1c0d8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c0dc:	2000      	movs	r0, #0
   1c0de:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c0e2:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1c0e6:	1d20      	adds	r0, r4, #4
   1c0e8:	4798      	blx	r3
   1c0ea:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1c0ee:	2101      	movs	r1, #1
   1c0f0:	2272      	movs	r2, #114	; 0x72
   1c0f2:	1858      	adds	r0, r3, r1
   1c0f4:	7122      	strb	r2, [r4, #4]
   1c0f6:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1c0fa:	f7fc b852 	b.w	181a2 <d_print_comp+0xfea>
   1c0fe:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c102:	2000      	movs	r0, #0
   1c104:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c108:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1c10c:	1d20      	adds	r0, r4, #4
   1c10e:	4798      	blx	r3
   1c110:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1c114:	2101      	movs	r1, #1
   1c116:	2269      	movs	r2, #105	; 0x69
   1c118:	1858      	adds	r0, r3, r1
   1c11a:	7122      	strb	r2, [r4, #4]
   1c11c:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1c120:	f7fc b832 	b.w	18188 <d_print_comp+0xfd0>
   1c124:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c128:	2000      	movs	r0, #0
   1c12a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c12e:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1c132:	1d20      	adds	r0, r4, #4
   1c134:	4798      	blx	r3
   1c136:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1c13a:	2101      	movs	r1, #1
   1c13c:	2076      	movs	r0, #118	; 0x76
   1c13e:	1853      	adds	r3, r2, r1
   1c140:	7120      	strb	r0, [r4, #4]
   1c142:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1c146:	f7fc b812 	b.w	1816e <d_print_comp+0xfb6>
   1c14a:	2500      	movs	r5, #0
   1c14c:	1d20      	adds	r0, r4, #4
   1c14e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c152:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c156:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   1c15a:	4798      	blx	r3
   1c15c:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1c160:	2201      	movs	r2, #1
   1c162:	4629      	mov	r1, r5
   1c164:	1883      	adds	r3, r0, r2
   1c166:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1c16a:	f7fc bdce 	b.w	18d0a <d_print_comp+0x1b52>
   1c16e:	2600      	movs	r6, #0
   1c170:	1d20      	adds	r0, r4, #4
   1c172:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c176:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c17a:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   1c17e:	4798      	blx	r3
   1c180:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1c184:	2001      	movs	r0, #1
   1c186:	4631      	mov	r1, r6
   1c188:	1813      	adds	r3, r2, r0
   1c18a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1c18e:	f7fc bda4 	b.w	18cda <d_print_comp+0x1b22>
   1c192:	2101      	movs	r1, #1
   1c194:	f8cc 111c 	str.w	r1, [ip, #284]	; 0x11c
   1c198:	f7fb b904 	b.w	173a4 <d_print_comp+0x1ec>
   1c19c:	4650      	mov	r0, sl
   1c19e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c1a2:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
   1c1a6:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c1aa:	4798      	blx	r3
   1c1ac:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1c1b0:	2101      	movs	r1, #1
   1c1b2:	4643      	mov	r3, r8
   1c1b4:	1845      	adds	r5, r0, r1
   1c1b6:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
   1c1ba:	f7fb bbb2 	b.w	17922 <d_print_comp+0x76a>
   1c1be:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c1c2:	4650      	mov	r0, sl
   1c1c4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c1c8:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   1c1cc:	4798      	blx	r3
   1c1ce:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1c1d2:	2101      	movs	r1, #1
   1c1d4:	464b      	mov	r3, r9
   1c1d6:	1855      	adds	r5, r2, r1
   1c1d8:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
   1c1dc:	f7fb bdd8 	b.w	17d90 <d_print_comp+0xbd8>
   1c1e0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c1e4:	4650      	mov	r0, sl
   1c1e6:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c1ea:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   1c1ee:	4798      	blx	r3
   1c1f0:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1c1f4:	2101      	movs	r1, #1
   1c1f6:	464b      	mov	r3, r9
   1c1f8:	1855      	adds	r5, r2, r1
   1c1fa:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
   1c1fe:	f7fc b9c0 	b.w	18582 <d_print_comp+0x13ca>
   1c202:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c206:	4650      	mov	r0, sl
   1c208:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c20c:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
   1c210:	4798      	blx	r3
   1c212:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1c216:	2101      	movs	r1, #1
   1c218:	4643      	mov	r3, r8
   1c21a:	1855      	adds	r5, r2, r1
   1c21c:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
   1c220:	f7fc bdef 	b.w	18e02 <d_print_comp+0x1c4a>
   1c224:	4619      	mov	r1, r3
   1c226:	2700      	movs	r7, #0
   1c228:	1d20      	adds	r0, r4, #4
   1c22a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c22e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c232:	f884 7103 	strb.w	r7, [r4, #259]	; 0x103
   1c236:	4798      	blx	r3
   1c238:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1c23c:	2101      	movs	r1, #1
   1c23e:	463b      	mov	r3, r7
   1c240:	1850      	adds	r0, r2, r1
   1c242:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1c246:	f7fd bb4a 	b.w	198de <d_print_comp+0x2726>
   1c24a:	2700      	movs	r7, #0
   1c24c:	1d20      	adds	r0, r4, #4
   1c24e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c252:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c256:	f884 7103 	strb.w	r7, [r4, #259]	; 0x103
   1c25a:	4798      	blx	r3
   1c25c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1c260:	2001      	movs	r0, #1
   1c262:	4639      	mov	r1, r7
   1c264:	181a      	adds	r2, r3, r0
   1c266:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1c26a:	f7fd bb25 	b.w	198b8 <d_print_comp+0x2700>
   1c26e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c272:	4650      	mov	r0, sl
   1c274:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c278:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
   1c27c:	4798      	blx	r3
   1c27e:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1c282:	2101      	movs	r1, #1
   1c284:	4643      	mov	r3, r8
   1c286:	1855      	adds	r5, r2, r1
   1c288:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
   1c28c:	f7fb ba56 	b.w	1773c <d_print_comp+0x584>
   1c290:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c294:	4650      	mov	r0, sl
   1c296:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c29a:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
   1c29e:	4798      	blx	r3
   1c2a0:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1c2a4:	2101      	movs	r1, #1
   1c2a6:	4643      	mov	r3, r8
   1c2a8:	1855      	adds	r5, r2, r1
   1c2aa:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
   1c2ae:	f7fc bf16 	b.w	190de <d_print_comp+0x1f26>
   1c2b2:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c2b6:	4650      	mov	r0, sl
   1c2b8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c2bc:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
   1c2c0:	4798      	blx	r3
   1c2c2:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1c2c6:	4629      	mov	r1, r5
   1c2c8:	2300      	movs	r3, #0
   1c2ca:	1950      	adds	r0, r2, r5
   1c2cc:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1c2d0:	f7fc bf1b 	b.w	1910a <d_print_comp+0x1f52>
   1c2d4:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c2d8:	4650      	mov	r0, sl
   1c2da:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c2de:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   1c2e2:	4798      	blx	r3
   1c2e4:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1c2e8:	4629      	mov	r1, r5
   1c2ea:	2300      	movs	r3, #0
   1c2ec:	1942      	adds	r2, r0, r5
   1c2ee:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1c2f2:	f7fb bd60 	b.w	17db6 <d_print_comp+0xbfe>
   1c2f6:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c2fa:	4650      	mov	r0, sl
   1c2fc:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c300:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
   1c304:	4798      	blx	r3
   1c306:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1c30a:	4629      	mov	r1, r5
   1c30c:	2300      	movs	r3, #0
   1c30e:	1942      	adds	r2, r0, r5
   1c310:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1c314:	f7fb bb1b 	b.w	1794e <d_print_comp+0x796>
   1c318:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c31c:	4650      	mov	r0, sl
   1c31e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c322:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   1c326:	4798      	blx	r3
   1c328:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1c32c:	4629      	mov	r1, r5
   1c32e:	2300      	movs	r3, #0
   1c330:	1942      	adds	r2, r0, r5
   1c332:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1c336:	f7fc b938 	b.w	185aa <d_print_comp+0x13f2>
   1c33a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c33e:	4650      	mov	r0, sl
   1c340:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c344:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
   1c348:	4798      	blx	r3
   1c34a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1c34e:	4629      	mov	r1, r5
   1c350:	2300      	movs	r3, #0
   1c352:	1950      	adds	r0, r2, r5
   1c354:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1c358:	f7fc bd69 	b.w	18e2e <d_print_comp+0x1c76>
   1c35c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c360:	4650      	mov	r0, sl
   1c362:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c366:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
   1c36a:	4798      	blx	r3
   1c36c:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1c370:	4629      	mov	r1, r5
   1c372:	2300      	movs	r3, #0
   1c374:	1950      	adds	r0, r2, r5
   1c376:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1c37a:	f7fb b9f5 	b.w	17768 <d_print_comp+0x5b0>
   1c37e:	688a      	ldr	r2, [r1, #8]
   1c380:	7810      	ldrb	r0, [r2, #0]
   1c382:	2800      	cmp	r0, #0
   1c384:	f47d aa92 	bne.w	198ac <d_print_comp+0x26f4>
   1c388:	6891      	ldr	r1, [r2, #8]
   1c38a:	2901      	cmp	r1, #1
   1c38c:	f47d aa8e 	bne.w	198ac <d_print_comp+0x26f4>
   1c390:	2b35      	cmp	r3, #53	; 0x35
   1c392:	f47d aa8b 	bne.w	198ac <d_print_comp+0x26f4>
   1c396:	6853      	ldr	r3, [r2, #4]
   1c398:	781b      	ldrb	r3, [r3, #0]
   1c39a:	2b30      	cmp	r3, #48	; 0x30
   1c39c:	f000 853c 	beq.w	1ce18 <d_print_comp+0x5c60>
   1c3a0:	2b31      	cmp	r3, #49	; 0x31
   1c3a2:	f47d aa83 	bne.w	198ac <d_print_comp+0x26f4>
   1c3a6:	f64c 1148 	movw	r1, #51528	; 0xc948
   1c3aa:	4620      	mov	r0, r4
   1c3ac:	f2c0 0102 	movt	r1, #2
   1c3b0:	f7fa fe5a 	bl	17068 <d_append_string>
   1c3b4:	f7fa bff6 	b.w	173a4 <d_print_comp+0x1ec>
   1c3b8:	6889      	ldr	r1, [r1, #8]
   1c3ba:	780a      	ldrb	r2, [r1, #0]
   1c3bc:	2a00      	cmp	r2, #0
   1c3be:	f47d aa75 	bne.w	198ac <d_print_comp+0x26f4>
   1c3c2:	2b36      	cmp	r3, #54	; 0x36
   1c3c4:	f000 8510 	beq.w	1cde8 <d_print_comp+0x5c30>
   1c3c8:	4620      	mov	r0, r4
   1c3ca:	68a9      	ldr	r1, [r5, #8]
   1c3cc:	3e02      	subs	r6, #2
   1c3ce:	f7fa fef3 	bl	171b8 <d_print_comp>
   1c3d2:	2e04      	cmp	r6, #4
   1c3d4:	f63a afe6 	bhi.w	173a4 <d_print_comp+0x1ec>
   1c3d8:	e8df f006 	tbb	[pc, r6]
   1c3dc:	0c151e24 	.word	0x0c151e24
   1c3e0:	03          	.byte	0x03
   1c3e1:	00          	.byte	0x00
   1c3e2:	f64c 113c 	movw	r1, #51516	; 0xc93c
   1c3e6:	4620      	mov	r0, r4
   1c3e8:	f2c0 0102 	movt	r1, #2
   1c3ec:	f7fa fe3c 	bl	17068 <d_append_string>
   1c3f0:	f7fa bfd8 	b.w	173a4 <d_print_comp+0x1ec>
   1c3f4:	f64c 1138 	movw	r1, #51512	; 0xc938
   1c3f8:	4620      	mov	r0, r4
   1c3fa:	f2c0 0102 	movt	r1, #2
   1c3fe:	f7fa fe33 	bl	17068 <d_append_string>
   1c402:	f7fa bfcf 	b.w	173a4 <d_print_comp+0x1ec>
   1c406:	f64c 1134 	movw	r1, #51508	; 0xc934
   1c40a:	4620      	mov	r0, r4
   1c40c:	f2c0 0102 	movt	r1, #2
   1c410:	f7fa fe2a 	bl	17068 <d_append_string>
   1c414:	f7fa bfc6 	b.w	173a4 <d_print_comp+0x1ec>
   1c418:	4620      	mov	r0, r4
   1c41a:	216c      	movs	r1, #108	; 0x6c
   1c41c:	f7f9 f87e 	bl	1551c <d_append_char>
   1c420:	f7fa bfc0 	b.w	173a4 <d_print_comp+0x1ec>
   1c424:	4620      	mov	r0, r4
   1c426:	2175      	movs	r1, #117	; 0x75
   1c428:	f7f9 f878 	bl	1551c <d_append_char>
   1c42c:	f7fa bfba 	b.w	173a4 <d_print_comp+0x1ec>
   1c430:	4619      	mov	r1, r3
   1c432:	2600      	movs	r6, #0
   1c434:	1d20      	adds	r0, r4, #4
   1c436:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c43a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c43e:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   1c442:	4798      	blx	r3
   1c444:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1c448:	2101      	movs	r1, #1
   1c44a:	4633      	mov	r3, r6
   1c44c:	1850      	adds	r0, r2, r1
   1c44e:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1c452:	f7fd b852 	b.w	194fa <d_print_comp+0x2342>
   1c456:	29ff      	cmp	r1, #255	; 0xff
   1c458:	f000 82d9 	beq.w	1ca0e <d_print_comp+0x5856>
   1c45c:	eb04 0c01 	add.w	ip, r4, r1
   1c460:	2020      	movs	r0, #32
   1c462:	3101      	adds	r1, #1
   1c464:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1c468:	f88c 0004 	strb.w	r0, [ip, #4]
   1c46c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1c470:	f7fc bc47 	b.w	18d02 <d_print_comp+0x1b4a>
   1c474:	29ff      	cmp	r1, #255	; 0xff
   1c476:	f000 82fe 	beq.w	1ca76 <d_print_comp+0x58be>
   1c47a:	eb04 0c01 	add.w	ip, r4, r1
   1c47e:	2220      	movs	r2, #32
   1c480:	3101      	adds	r1, #1
   1c482:	f884 2108 	strb.w	r2, [r4, #264]	; 0x108
   1c486:	f88c 2004 	strb.w	r2, [ip, #4]
   1c48a:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1c48e:	f7fc bc20 	b.w	18cd2 <d_print_comp+0x1b1a>
   1c492:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1c496:	29ff      	cmp	r1, #255	; 0xff
   1c498:	f000 82d9 	beq.w	1ca4e <d_print_comp+0x5896>
   1c49c:	eb04 0e01 	add.w	lr, r4, r1
   1c4a0:	225b      	movs	r2, #91	; 0x5b
   1c4a2:	3101      	adds	r1, #1
   1c4a4:	f884 2108 	strb.w	r2, [r4, #264]	; 0x108
   1c4a8:	f88e 2004 	strb.w	r2, [lr, #4]
   1c4ac:	4620      	mov	r0, r4
   1c4ae:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1c4b2:	68a9      	ldr	r1, [r5, #8]
   1c4b4:	f7fa fe80 	bl	171b8 <d_print_comp>
   1c4b8:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1c4bc:	29ff      	cmp	r1, #255	; 0xff
   1c4be:	f000 82b6 	beq.w	1ca2e <d_print_comp+0x5876>
   1c4c2:	eb04 0c01 	add.w	ip, r4, r1
   1c4c6:	225d      	movs	r2, #93	; 0x5d
   1c4c8:	3101      	adds	r1, #1
   1c4ca:	f884 2108 	strb.w	r2, [r4, #264]	; 0x108
   1c4ce:	f88c 2004 	strb.w	r2, [ip, #4]
   1c4d2:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1c4d6:	f7fa bf65 	b.w	173a4 <d_print_comp+0x1ec>
   1c4da:	2101      	movs	r1, #1
   1c4dc:	f8c4 111c 	str.w	r1, [r4, #284]	; 0x11c
   1c4e0:	f7fa bf60 	b.w	173a4 <d_print_comp+0x1ec>
   1c4e4:	29ff      	cmp	r1, #255	; 0xff
   1c4e6:	f000 8282 	beq.w	1c9ee <d_print_comp+0x5836>
   1c4ea:	eb04 0c01 	add.w	ip, r4, r1
   1c4ee:	222d      	movs	r2, #45	; 0x2d
   1c4f0:	3101      	adds	r1, #1
   1c4f2:	f884 2108 	strb.w	r2, [r4, #264]	; 0x108
   1c4f6:	f88c 2004 	strb.w	r2, [ip, #4]
   1c4fa:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1c4fe:	f7fd b9fb 	b.w	198f8 <d_print_comp+0x2740>
   1c502:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1c506:	29ff      	cmp	r1, #255	; 0xff
   1c508:	f000 8440 	beq.w	1cd8c <d_print_comp+0x5bd4>
   1c50c:	eb04 0c01 	add.w	ip, r4, r1
   1c510:	205b      	movs	r0, #91	; 0x5b
   1c512:	1c4b      	adds	r3, r1, #1
   1c514:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1c518:	f88c 0004 	strb.w	r0, [ip, #4]
   1c51c:	4620      	mov	r0, r4
   1c51e:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1c522:	68a9      	ldr	r1, [r5, #8]
   1c524:	6889      	ldr	r1, [r1, #8]
   1c526:	f7fa fe47 	bl	171b8 <d_print_comp>
   1c52a:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1c52e:	29ff      	cmp	r1, #255	; 0xff
   1c530:	f000 841b 	beq.w	1cd6a <d_print_comp+0x5bb2>
   1c534:	eb04 0e01 	add.w	lr, r4, r1
   1c538:	205d      	movs	r0, #93	; 0x5d
   1c53a:	3101      	adds	r1, #1
   1c53c:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1c540:	f88e 0004 	strb.w	r0, [lr, #4]
   1c544:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1c548:	f7fd bf31 	b.w	1a3ae <d_print_comp+0x31f6>
   1c54c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c550:	2200      	movs	r2, #0
   1c552:	1d20      	adds	r0, r4, #4
   1c554:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1c558:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c55c:	4798      	blx	r3
   1c55e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1c562:	2101      	movs	r1, #1
   1c564:	2275      	movs	r2, #117	; 0x75
   1c566:	1843      	adds	r3, r0, r1
   1c568:	7122      	strb	r2, [r4, #4]
   1c56a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1c56e:	f7fd b816 	b.w	1959e <d_print_comp+0x23e6>
   1c572:	2200      	movs	r2, #0
   1c574:	1d20      	adds	r0, r4, #4
   1c576:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1c57a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c57e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c582:	4798      	blx	r3
   1c584:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1c588:	2101      	movs	r1, #1
   1c58a:	7125      	strb	r5, [r4, #4]
   1c58c:	1842      	adds	r2, r0, r1
   1c58e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1c592:	f7fc bff7 	b.w	19584 <d_print_comp+0x23cc>
   1c596:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c59a:	2000      	movs	r0, #0
   1c59c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c5a0:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1c5a4:	1d20      	adds	r0, r4, #4
   1c5a6:	4798      	blx	r3
   1c5a8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1c5ac:	2101      	movs	r1, #1
   1c5ae:	2263      	movs	r2, #99	; 0x63
   1c5b0:	1858      	adds	r0, r3, r1
   1c5b2:	7122      	strb	r2, [r4, #4]
   1c5b4:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1c5b8:	f7fc bfd7 	b.w	1956a <d_print_comp+0x23b2>
   1c5bc:	2500      	movs	r5, #0
   1c5be:	1d20      	adds	r0, r4, #4
   1c5c0:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   1c5c4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c5c8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c5cc:	4798      	blx	r3
   1c5ce:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1c5d2:	2101      	movs	r1, #1
   1c5d4:	2241      	movs	r2, #65	; 0x41
   1c5d6:	1845      	adds	r5, r0, r1
   1c5d8:	7122      	strb	r2, [r4, #4]
   1c5da:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
   1c5de:	f7fc bfb7 	b.w	19550 <d_print_comp+0x2398>
   1c5e2:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c5e6:	2000      	movs	r0, #0
   1c5e8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c5ec:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1c5f0:	1d20      	adds	r0, r4, #4
   1c5f2:	4798      	blx	r3
   1c5f4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1c5f8:	2101      	movs	r1, #1
   1c5fa:	225f      	movs	r2, #95	; 0x5f
   1c5fc:	1858      	adds	r0, r3, r1
   1c5fe:	7122      	strb	r2, [r4, #4]
   1c600:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1c604:	f7fc bf97 	b.w	19536 <d_print_comp+0x237e>
   1c608:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c60c:	2200      	movs	r2, #0
   1c60e:	1d20      	adds	r0, r4, #4
   1c610:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1c614:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c618:	4798      	blx	r3
   1c61a:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1c61e:	2101      	movs	r1, #1
   1c620:	2263      	movs	r2, #99	; 0x63
   1c622:	1843      	adds	r3, r0, r1
   1c624:	7122      	strb	r2, [r4, #4]
   1c626:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1c62a:	f7fd bda9 	b.w	1a180 <d_print_comp+0x2fc8>
   1c62e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c632:	2200      	movs	r2, #0
   1c634:	1d20      	adds	r0, r4, #4
   1c636:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1c63a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c63e:	4798      	blx	r3
   1c640:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1c644:	2101      	movs	r1, #1
   1c646:	2261      	movs	r2, #97	; 0x61
   1c648:	1843      	adds	r3, r0, r1
   1c64a:	7122      	strb	r2, [r4, #4]
   1c64c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1c650:	f7fd bd8a 	b.w	1a168 <d_print_comp+0x2fb0>
   1c654:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c658:	2200      	movs	r2, #0
   1c65a:	1d20      	adds	r0, r4, #4
   1c65c:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1c660:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c664:	4798      	blx	r3
   1c666:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1c66a:	2101      	movs	r1, #1
   1c66c:	2272      	movs	r2, #114	; 0x72
   1c66e:	1843      	adds	r3, r0, r1
   1c670:	7122      	strb	r2, [r4, #4]
   1c672:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1c676:	f7fd bd6a 	b.w	1a14e <d_print_comp+0x2f96>
   1c67a:	4619      	mov	r1, r3
   1c67c:	f002 f872 	bl	1e764 <d_print_cast.part.7>
   1c680:	f7fd bf47 	b.w	1a512 <d_print_comp+0x335a>
   1c684:	f884 3103 	strb.w	r3, [r4, #259]	; 0x103
   1c688:	1d20      	adds	r0, r4, #4
   1c68a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c68e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c692:	4798      	blx	r3
   1c694:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1c698:	2101      	movs	r1, #1
   1c69a:	2246      	movs	r2, #70	; 0x46
   1c69c:	1843      	adds	r3, r0, r1
   1c69e:	7122      	strb	r2, [r4, #4]
   1c6a0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1c6a4:	f7fd bd46 	b.w	1a134 <d_print_comp+0x2f7c>
   1c6a8:	f884 3103 	strb.w	r3, [r4, #259]	; 0x103
   1c6ac:	1d20      	adds	r0, r4, #4
   1c6ae:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c6b2:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c6b6:	4798      	blx	r3
   1c6b8:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1c6bc:	2101      	movs	r1, #1
   1c6be:	205f      	movs	r0, #95	; 0x5f
   1c6c0:	1853      	adds	r3, r2, r1
   1c6c2:	7120      	strb	r0, [r4, #4]
   1c6c4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1c6c8:	f7fd bd27 	b.w	1a11a <d_print_comp+0x2f62>
   1c6cc:	1d20      	adds	r0, r4, #4
   1c6ce:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c6d2:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c6d6:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   1c6da:	4798      	blx	r3
   1c6dc:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1c6e0:	2101      	movs	r1, #1
   1c6e2:	223a      	movs	r2, #58	; 0x3a
   1c6e4:	1843      	adds	r3, r0, r1
   1c6e6:	7122      	strb	r2, [r4, #4]
   1c6e8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1c6ec:	f7fc ba8a 	b.w	18c04 <d_print_comp+0x1a4c>
   1c6f0:	6852      	ldr	r2, [r2, #4]
   1c6f2:	6896      	ldr	r6, [r2, #8]
   1c6f4:	2e01      	cmp	r6, #1
   1c6f6:	f47d ae37 	bne.w	1a368 <d_print_comp+0x31b0>
   1c6fa:	6852      	ldr	r2, [r2, #4]
   1c6fc:	7811      	ldrb	r1, [r2, #0]
   1c6fe:	293e      	cmp	r1, #62	; 0x3e
   1c700:	f47d ae32 	bne.w	1a368 <d_print_comp+0x31b0>
   1c704:	4620      	mov	r0, r4
   1c706:	2128      	movs	r1, #40	; 0x28
   1c708:	f7f8 ff08 	bl	1551c <d_append_char>
   1c70c:	68ab      	ldr	r3, [r5, #8]
   1c70e:	f7fd be2b 	b.w	1a368 <d_print_comp+0x31b0>
   1c712:	2600      	movs	r6, #0
   1c714:	1d20      	adds	r0, r4, #4
   1c716:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c71a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c71e:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   1c722:	4798      	blx	r3
   1c724:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1c728:	2201      	movs	r2, #1
   1c72a:	4631      	mov	r1, r6
   1c72c:	1883      	adds	r3, r0, r2
   1c72e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1c732:	f7fd bcd9 	b.w	1a0e8 <d_print_comp+0x2f30>
   1c736:	1c1a      	adds	r2, r3, #0
   1c738:	bf18      	it	ne
   1c73a:	2201      	movne	r2, #1
   1c73c:	2900      	cmp	r1, #0
   1c73e:	bf08      	it	eq
   1c740:	f042 0201 	orreq.w	r2, r2, #1
   1c744:	2a00      	cmp	r2, #0
   1c746:	f47c aaa5 	bne.w	18c94 <d_print_comp+0x1adc>
   1c74a:	6849      	ldr	r1, [r1, #4]
   1c74c:	2900      	cmp	r1, #0
   1c74e:	f47d ae69 	bne.w	1a424 <d_print_comp+0x326c>
   1c752:	f7fc ba9f 	b.w	18c94 <d_print_comp+0x1adc>
   1c756:	f64c 018c 	movw	r1, #51340	; 0xc88c
   1c75a:	6870      	ldr	r0, [r6, #4]
   1c75c:	f2c0 0102 	movt	r1, #2
   1c760:	f004 fe4c 	bl	213fc <strncmp>
   1c764:	2800      	cmp	r0, #0
   1c766:	f47c aaa9 	bne.w	18cbc <d_print_comp+0x1b04>
   1c76a:	68a9      	ldr	r1, [r5, #8]
   1c76c:	4620      	mov	r0, r4
   1c76e:	f7fa fd23 	bl	171b8 <d_print_comp>
   1c772:	f64c 0194 	movw	r1, #51348	; 0xc894
   1c776:	4620      	mov	r0, r4
   1c778:	f2c0 0102 	movt	r1, #2
   1c77c:	f7fa fc74 	bl	17068 <d_append_string>
   1c780:	f8c4 7118 	str.w	r7, [r4, #280]	; 0x118
   1c784:	f7fa be0e 	b.w	173a4 <d_print_comp+0x1ec>
   1c788:	4650      	mov	r0, sl
   1c78a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c78e:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   1c792:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c796:	4798      	blx	r3
   1c798:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1c79c:	2101      	movs	r1, #1
   1c79e:	464b      	mov	r3, r9
   1c7a0:	1845      	adds	r5, r0, r1
   1c7a2:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
   1c7a6:	f7fc bb93 	b.w	18ed0 <d_print_comp+0x1d18>
   1c7aa:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c7ae:	4650      	mov	r0, sl
   1c7b0:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c7b4:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   1c7b8:	4798      	blx	r3
   1c7ba:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1c7be:	2101      	movs	r1, #1
   1c7c0:	464b      	mov	r3, r9
   1c7c2:	1855      	adds	r5, r2, r1
   1c7c4:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
   1c7c8:	f7fc bd7f 	b.w	192ca <d_print_comp+0x2112>
   1c7cc:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c7d0:	4650      	mov	r0, sl
   1c7d2:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c7d6:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   1c7da:	4798      	blx	r3
   1c7dc:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1c7e0:	2101      	movs	r1, #1
   1c7e2:	464b      	mov	r3, r9
   1c7e4:	1855      	adds	r5, r2, r1
   1c7e6:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
   1c7ea:	f7fd bd0a 	b.w	1a202 <d_print_comp+0x304a>
   1c7ee:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c7f2:	4650      	mov	r0, sl
   1c7f4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c7f8:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   1c7fc:	4798      	blx	r3
   1c7fe:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1c802:	4629      	mov	r1, r5
   1c804:	2300      	movs	r3, #0
   1c806:	1942      	adds	r2, r0, r5
   1c808:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1c80c:	f7fd bd0c 	b.w	1a228 <d_print_comp+0x3070>
   1c810:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c814:	4650      	mov	r0, sl
   1c816:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c81a:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   1c81e:	4798      	blx	r3
   1c820:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1c824:	4629      	mov	r1, r5
   1c826:	2300      	movs	r3, #0
   1c828:	1942      	adds	r2, r0, r5
   1c82a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1c82e:	f7fc bb65 	b.w	18efc <d_print_comp+0x1d44>
   1c832:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c836:	4650      	mov	r0, sl
   1c838:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c83c:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   1c840:	4798      	blx	r3
   1c842:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1c846:	4629      	mov	r1, r5
   1c848:	2300      	movs	r3, #0
   1c84a:	1942      	adds	r2, r0, r5
   1c84c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1c850:	f7fc bd4e 	b.w	192f0 <d_print_comp+0x2138>
   1c854:	4611      	mov	r1, r2
   1c856:	2600      	movs	r6, #0
   1c858:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c85c:	1d20      	adds	r0, r4, #4
   1c85e:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   1c862:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c866:	4798      	blx	r3
   1c868:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
   1c86c:	4632      	mov	r2, r6
   1c86e:	1c4f      	adds	r7, r1, #1
   1c870:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
   1c874:	f7fd bd3e 	b.w	1a2f4 <d_print_comp+0x313c>
   1c878:	4620      	mov	r0, r4
   1c87a:	4641      	mov	r1, r8
   1c87c:	f002 f81a 	bl	1e8b4 <d_print_expr_op>
   1c880:	f7fd bd90 	b.w	1a3a4 <d_print_comp+0x31ec>
   1c884:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c888:	2200      	movs	r2, #0
   1c88a:	1d20      	adds	r0, r4, #4
   1c88c:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1c890:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c894:	4798      	blx	r3
   1c896:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1c89a:	2101      	movs	r1, #1
   1c89c:	225f      	movs	r2, #95	; 0x5f
   1c89e:	1843      	adds	r3, r0, r1
   1c8a0:	7122      	strb	r2, [r4, #4]
   1c8a2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1c8a6:	f7fd bdd9 	b.w	1a45c <d_print_comp+0x32a4>
   1c8aa:	2600      	movs	r6, #0
   1c8ac:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c8b0:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c8b4:	1d20      	adds	r0, r4, #4
   1c8b6:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   1c8ba:	4798      	blx	r3
   1c8bc:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1c8c0:	4631      	mov	r1, r6
   1c8c2:	1c53      	adds	r3, r2, #1
   1c8c4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1c8c8:	f7fd be0e 	b.w	1a4e8 <d_print_comp+0x3330>
   1c8cc:	2600      	movs	r6, #0
   1c8ce:	1d20      	adds	r0, r4, #4
   1c8d0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c8d4:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   1c8d8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c8dc:	4798      	blx	r3
   1c8de:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1c8e2:	4631      	mov	r1, r6
   1c8e4:	1c43      	adds	r3, r0, #1
   1c8e6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1c8ea:	f7fd be17 	b.w	1a51c <d_print_comp+0x3364>
   1c8ee:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c8f2:	2200      	movs	r2, #0
   1c8f4:	1d20      	adds	r0, r4, #4
   1c8f6:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1c8fa:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c8fe:	4798      	blx	r3
   1c900:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1c904:	2101      	movs	r1, #1
   1c906:	2274      	movs	r2, #116	; 0x74
   1c908:	1843      	adds	r3, r0, r1
   1c90a:	7122      	strb	r2, [r4, #4]
   1c90c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1c910:	f7fd bdca 	b.w	1a4a8 <d_print_comp+0x32f0>
   1c914:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c918:	2200      	movs	r2, #0
   1c91a:	1d20      	adds	r0, r4, #4
   1c91c:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1c920:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c924:	4798      	blx	r3
   1c926:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1c92a:	2101      	movs	r1, #1
   1c92c:	2261      	movs	r2, #97	; 0x61
   1c92e:	1843      	adds	r3, r0, r1
   1c930:	7122      	strb	r2, [r4, #4]
   1c932:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1c936:	f7fd bdab 	b.w	1a490 <d_print_comp+0x32d8>
   1c93a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c93e:	2200      	movs	r2, #0
   1c940:	1d20      	adds	r0, r4, #4
   1c942:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1c946:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c94a:	4798      	blx	r3
   1c94c:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1c950:	2101      	movs	r1, #1
   1c952:	2253      	movs	r2, #83	; 0x53
   1c954:	1843      	adds	r3, r0, r1
   1c956:	7122      	strb	r2, [r4, #4]
   1c958:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1c95c:	f7fd bd8b 	b.w	1a476 <d_print_comp+0x32be>
   1c960:	1d20      	adds	r0, r4, #4
   1c962:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c966:	f884 a103 	strb.w	sl, [r4, #259]	; 0x103
   1c96a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c96e:	4798      	blx	r3
   1c970:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1c974:	2101      	movs	r1, #1
   1c976:	202c      	movs	r0, #44	; 0x2c
   1c978:	1855      	adds	r5, r2, r1
   1c97a:	7120      	strb	r0, [r4, #4]
   1c97c:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
   1c980:	f7fd bdfe 	b.w	1a580 <d_print_comp+0x33c8>
   1c984:	6869      	ldr	r1, [r5, #4]
   1c986:	4620      	mov	r0, r4
   1c988:	f002 f838 	bl	1e9fc <d_print_subexpr>
   1c98c:	f64c 1154 	movw	r1, #51540	; 0xc954
   1c990:	4620      	mov	r0, r4
   1c992:	f2c0 0102 	movt	r1, #2
   1c996:	f7fa fb67 	bl	17068 <d_append_string>
   1c99a:	f7fa bd03 	b.w	173a4 <d_print_comp+0x1ec>
   1c99e:	1d20      	adds	r0, r4, #4
   1c9a0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c9a4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c9a8:	f884 a103 	strb.w	sl, [r4, #259]	; 0x103
   1c9ac:	4798      	blx	r3
   1c9ae:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1c9b2:	222c      	movs	r2, #44	; 0x2c
   1c9b4:	4629      	mov	r1, r5
   1c9b6:	1c58      	adds	r0, r3, #1
   1c9b8:	7122      	strb	r2, [r4, #4]
   1c9ba:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1c9be:	f7fa bddf 	b.w	17580 <d_print_comp+0x3c8>
   1c9c2:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   1c9c6:	fa5f f18c 	uxtb.w	r1, ip
   1c9ca:	2905      	cmp	r1, #5
   1c9cc:	d979      	bls.n	1cac2 <d_print_comp+0x590a>
   1c9ce:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   1c9d2:	fa5f f18c 	uxtb.w	r1, ip
   1c9d6:	2905      	cmp	r1, #5
   1c9d8:	f63d ab46 	bhi.w	1a068 <d_print_comp+0x2eb0>
   1c9dc:	3b57      	subs	r3, #87	; 0x57
   1c9de:	f7fd bae3 	b.w	19fa8 <d_print_comp+0x2df0>
   1c9e2:	460b      	mov	r3, r1
   1c9e4:	f7fd baff 	b.w	19fe6 <d_print_comp+0x2e2e>
   1c9e8:	2100      	movs	r1, #0
   1c9ea:	f7fd bd0b 	b.w	1a404 <d_print_comp+0x324c>
   1c9ee:	2700      	movs	r7, #0
   1c9f0:	1d20      	adds	r0, r4, #4
   1c9f2:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c9f6:	f884 7103 	strb.w	r7, [r4, #259]	; 0x103
   1c9fa:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c9fe:	4798      	blx	r3
   1ca00:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1ca04:	4639      	mov	r1, r7
   1ca06:	1c43      	adds	r3, r0, #1
   1ca08:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1ca0c:	e56d      	b.n	1c4ea <d_print_comp+0x5332>
   1ca0e:	2500      	movs	r5, #0
   1ca10:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ca14:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ca18:	1d20      	adds	r0, r4, #4
   1ca1a:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   1ca1e:	4798      	blx	r3
   1ca20:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1ca24:	4629      	mov	r1, r5
   1ca26:	1c5a      	adds	r2, r3, #1
   1ca28:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1ca2c:	e516      	b.n	1c45c <d_print_comp+0x52a4>
   1ca2e:	2500      	movs	r5, #0
   1ca30:	1d20      	adds	r0, r4, #4
   1ca32:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ca36:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   1ca3a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ca3e:	4798      	blx	r3
   1ca40:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1ca44:	4629      	mov	r1, r5
   1ca46:	1c58      	adds	r0, r3, #1
   1ca48:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1ca4c:	e539      	b.n	1c4c2 <d_print_comp+0x530a>
   1ca4e:	2600      	movs	r6, #0
   1ca50:	1d20      	adds	r0, r4, #4
   1ca52:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ca56:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   1ca5a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ca5e:	4798      	blx	r3
   1ca60:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1ca64:	4631      	mov	r1, r6
   1ca66:	1c58      	adds	r0, r3, #1
   1ca68:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1ca6c:	e516      	b.n	1c49c <d_print_comp+0x52e4>
   1ca6e:	f04f 0801 	mov.w	r8, #1
   1ca72:	f7fc bcec 	b.w	1944e <d_print_comp+0x2296>
   1ca76:	2600      	movs	r6, #0
   1ca78:	1d20      	adds	r0, r4, #4
   1ca7a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ca7e:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   1ca82:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ca86:	4798      	blx	r3
   1ca88:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1ca8c:	4631      	mov	r1, r6
   1ca8e:	1c43      	adds	r3, r0, #1
   1ca90:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1ca94:	e4f1      	b.n	1c47a <d_print_comp+0x52c2>
   1ca96:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   1ca9a:	1d20      	adds	r0, r4, #4
   1ca9c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1caa0:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1caa4:	4798      	blx	r3
   1caa6:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1caaa:	6820      	ldr	r0, [r4, #0]
   1caac:	4631      	mov	r1, r6
   1caae:	1c53      	adds	r3, r2, #1
   1cab0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1cab4:	f000 0620 	and.w	r6, r0, #32
   1cab8:	f7fc bbd2 	b.w	19260 <d_print_comp+0x20a8>
   1cabc:	3b37      	subs	r3, #55	; 0x37
   1cabe:	f7fd ba92 	b.w	19fe6 <d_print_comp+0x2e2e>
   1cac2:	3b37      	subs	r3, #55	; 0x37
   1cac4:	f7fd ba70 	b.w	19fa8 <d_print_comp+0x2df0>
   1cac8:	f04f 0901 	mov.w	r9, #1
   1cacc:	7833      	ldrb	r3, [r6, #0]
   1cace:	2b04      	cmp	r3, #4
   1cad0:	f000 810f 	beq.w	1ccf2 <d_print_comp+0x5b3a>
   1cad4:	2b02      	cmp	r3, #2
   1cad6:	f040 808b 	bne.w	1cbf0 <d_print_comp+0x5a38>
   1cada:	68b7      	ldr	r7, [r6, #8]
   1cadc:	7839      	ldrb	r1, [r7, #0]
   1cade:	9702      	str	r7, [sp, #8]
   1cae0:	293f      	cmp	r1, #63	; 0x3f
   1cae2:	bf04      	itt	eq
   1cae4:	687a      	ldreq	r2, [r7, #4]
   1cae6:	9202      	streq	r2, [sp, #8]
   1cae8:	9f02      	ldr	r7, [sp, #8]
   1caea:	783a      	ldrb	r2, [r7, #0]
   1caec:	3a1a      	subs	r2, #26
   1caee:	b2d0      	uxtb	r0, r2
   1caf0:	2802      	cmp	r0, #2
   1caf2:	d87d      	bhi.n	1cbf0 <d_print_comp+0x5a38>
   1caf4:	f1b9 0f04 	cmp.w	r9, #4
   1caf8:	f000 8129 	beq.w	1cd4e <d_print_comp+0x5b96>
   1cafc:	f109 32ff 	add.w	r2, r9, #4294967295
   1cb00:	f019 0f01 	tst.w	r9, #1
   1cb04:	9200      	str	r2, [sp, #0]
   1cb06:	eb08 1a02 	add.w	sl, r8, r2, lsl #4
   1cb0a:	d120      	bne.n	1cb4e <d_print_comp+0x5996>
   1cb0c:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
   1cb10:	eb08 1709 	add.w	r7, r8, r9, lsl #4
   1cb14:	f8c4 7118 	str.w	r7, [r4, #280]	; 0x118
   1cb18:	f10a 0b10 	add.w	fp, sl, #16
   1cb1c:	9f02      	ldr	r7, [sp, #8]
   1cb1e:	f109 0901 	add.w	r9, r9, #1
   1cb22:	e88b 000f 	stmia.w	fp, {r0, r1, r2, r3}
   1cb26:	2000      	movs	r0, #0
   1cb28:	f8ca a010 	str.w	sl, [sl, #16]
   1cb2c:	f8ca 7004 	str.w	r7, [sl, #4]
   1cb30:	f8ca 0008 	str.w	r0, [sl, #8]
   1cb34:	f8ca c00c 	str.w	ip, [sl, #12]
   1cb38:	687f      	ldr	r7, [r7, #4]
   1cb3a:	783a      	ldrb	r2, [r7, #0]
   1cb3c:	9702      	str	r7, [sp, #8]
   1cb3e:	3a1a      	subs	r2, #26
   1cb40:	b2d1      	uxtb	r1, r2
   1cb42:	2902      	cmp	r1, #2
   1cb44:	d854      	bhi.n	1cbf0 <d_print_comp+0x5a38>
   1cb46:	46da      	mov	sl, fp
   1cb48:	f109 33ff 	add.w	r3, r9, #4294967295
   1cb4c:	9300      	str	r3, [sp, #0]
   1cb4e:	46e3      	mov	fp, ip
   1cb50:	9f02      	ldr	r7, [sp, #8]
   1cb52:	9604      	str	r6, [sp, #16]
   1cb54:	46a4      	mov	ip, r4
   1cb56:	9505      	str	r5, [sp, #20]
   1cb58:	e01c      	b.n	1cb94 <d_print_comp+0x59dc>
   1cb5a:	f1b9 0f04 	cmp.w	r9, #4
   1cb5e:	f109 0901 	add.w	r9, r9, #1
   1cb62:	f109 37ff 	add.w	r7, r9, #4294967295
   1cb66:	9700      	str	r7, [sp, #0]
   1cb68:	f000 80f0 	beq.w	1cd4c <d_print_comp+0x5b94>
   1cb6c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1cb70:	9f03      	ldr	r7, [sp, #12]
   1cb72:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   1cb76:	2600      	movs	r6, #0
   1cb78:	9b02      	ldr	r3, [sp, #8]
   1cb7a:	6065      	str	r5, [r4, #4]
   1cb7c:	60a6      	str	r6, [r4, #8]
   1cb7e:	6123      	str	r3, [r4, #16]
   1cb80:	f8c4 b00c 	str.w	fp, [r4, #12]
   1cb84:	f8cc 7118 	str.w	r7, [ip, #280]	; 0x118
   1cb88:	686f      	ldr	r7, [r5, #4]
   1cb8a:	783d      	ldrb	r5, [r7, #0]
   1cb8c:	3d1a      	subs	r5, #26
   1cb8e:	b2ec      	uxtb	r4, r5
   1cb90:	2c02      	cmp	r4, #2
   1cb92:	d82a      	bhi.n	1cbea <d_print_comp+0x5a32>
   1cb94:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
   1cb98:	f10a 0410 	add.w	r4, sl, #16
   1cb9c:	9d00      	ldr	r5, [sp, #0]
   1cb9e:	f104 0610 	add.w	r6, r4, #16
   1cba2:	eb08 1505 	add.w	r5, r8, r5, lsl #4
   1cba6:	9500      	str	r5, [sp, #0]
   1cba8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1cbac:	eb08 1509 	add.w	r5, r8, r9, lsl #4
   1cbb0:	9a00      	ldr	r2, [sp, #0]
   1cbb2:	f109 0901 	add.w	r9, r9, #1
   1cbb6:	f8cc 5118 	str.w	r5, [ip, #280]	; 0x118
   1cbba:	f109 35ff 	add.w	r5, r9, #4294967295
   1cbbe:	f8ca 7004 	str.w	r7, [sl, #4]
   1cbc2:	eb08 1109 	add.w	r1, r8, r9, lsl #4
   1cbc6:	f8ca 2010 	str.w	r2, [sl, #16]
   1cbca:	eb08 1005 	add.w	r0, r8, r5, lsl #4
   1cbce:	f8ca b00c 	str.w	fp, [sl, #12]
   1cbd2:	2500      	movs	r5, #0
   1cbd4:	f8ca 5008 	str.w	r5, [sl, #8]
   1cbd8:	46b2      	mov	sl, r6
   1cbda:	687d      	ldr	r5, [r7, #4]
   1cbdc:	9103      	str	r1, [sp, #12]
   1cbde:	9002      	str	r0, [sp, #8]
   1cbe0:	782b      	ldrb	r3, [r5, #0]
   1cbe2:	3b1a      	subs	r3, #26
   1cbe4:	b2d9      	uxtb	r1, r3
   1cbe6:	2902      	cmp	r1, #2
   1cbe8:	d9b7      	bls.n	1cb5a <d_print_comp+0x59a2>
   1cbea:	9e04      	ldr	r6, [sp, #16]
   1cbec:	4664      	mov	r4, ip
   1cbee:	9d05      	ldr	r5, [sp, #20]
   1cbf0:	4620      	mov	r0, r4
   1cbf2:	68a9      	ldr	r1, [r5, #8]
   1cbf4:	f7fa fae0 	bl	171b8 <d_print_comp>
   1cbf8:	7833      	ldrb	r3, [r6, #0]
   1cbfa:	2b04      	cmp	r3, #4
   1cbfc:	bf04      	itt	eq
   1cbfe:	9b16      	ldreq	r3, [sp, #88]	; 0x58
   1cc00:	f8c4 3114 	streq.w	r3, [r4, #276]	; 0x114
   1cc04:	f1b9 0f00 	cmp.w	r9, #0
   1cc08:	d01a      	beq.n	1cc40 <d_print_comp+0x5a88>
   1cc0a:	eb08 1509 	add.w	r5, r8, r9, lsl #4
   1cc0e:	f109 36ff 	add.w	r6, r9, #4294967295
   1cc12:	2720      	movs	r7, #32
   1cc14:	f104 0a04 	add.w	sl, r4, #4
   1cc18:	f855 8c08 	ldr.w	r8, [r5, #-8]
   1cc1c:	f006 0b01 	and.w	fp, r6, #1
   1cc20:	f1b8 0f00 	cmp.w	r8, #0
   1cc24:	d023      	beq.n	1cc6e <d_print_comp+0x5ab6>
   1cc26:	3d10      	subs	r5, #16
   1cc28:	b156      	cbz	r6, 1cc40 <d_print_comp+0x5a88>
   1cc2a:	f1bb 0f00 	cmp.w	fp, #0
   1cc2e:	d00c      	beq.n	1cc4a <d_print_comp+0x5a92>
   1cc30:	f855 8c08 	ldr.w	r8, [r5, #-8]
   1cc34:	3e01      	subs	r6, #1
   1cc36:	f1b8 0f00 	cmp.w	r8, #0
   1cc3a:	d039      	beq.n	1ccb0 <d_print_comp+0x5af8>
   1cc3c:	3d10      	subs	r5, #16
   1cc3e:	b926      	cbnz	r6, 1cc4a <d_print_comp+0x5a92>
   1cc40:	9d01      	ldr	r5, [sp, #4]
   1cc42:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
   1cc46:	f7fa bbad 	b.w	173a4 <d_print_comp+0x1ec>
   1cc4a:	f855 9c08 	ldr.w	r9, [r5, #-8]
   1cc4e:	f1a5 0810 	sub.w	r8, r5, #16
   1cc52:	3e01      	subs	r6, #1
   1cc54:	f1b9 0f00 	cmp.w	r9, #0
   1cc58:	d065      	beq.n	1cd26 <d_print_comp+0x5b6e>
   1cc5a:	f858 5c08 	ldr.w	r5, [r8, #-8]
   1cc5e:	3e01      	subs	r6, #1
   1cc60:	2d00      	cmp	r5, #0
   1cc62:	d04d      	beq.n	1cd00 <d_print_comp+0x5b48>
   1cc64:	f1a8 0510 	sub.w	r5, r8, #16
   1cc68:	2e00      	cmp	r6, #0
   1cc6a:	d1ee      	bne.n	1cc4a <d_print_comp+0x5a92>
   1cc6c:	e7e8      	b.n	1cc40 <d_print_comp+0x5a88>
   1cc6e:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1cc72:	29ff      	cmp	r1, #255	; 0xff
   1cc74:	d10d      	bne.n	1cc92 <d_print_comp+0x5ada>
   1cc76:	4650      	mov	r0, sl
   1cc78:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1cc7c:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
   1cc80:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1cc84:	4798      	blx	r3
   1cc86:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1cc8a:	4641      	mov	r1, r8
   1cc8c:	1c42      	adds	r2, r0, #1
   1cc8e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1cc92:	eb04 0e01 	add.w	lr, r4, r1
   1cc96:	1c4b      	adds	r3, r1, #1
   1cc98:	f884 7108 	strb.w	r7, [r4, #264]	; 0x108
   1cc9c:	4620      	mov	r0, r4
   1cc9e:	f88e 7004 	strb.w	r7, [lr, #4]
   1cca2:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1cca6:	f855 1c0c 	ldr.w	r1, [r5, #-12]
   1ccaa:	f000 f8bf 	bl	1ce2c <d_print_mod>
   1ccae:	e7ba      	b.n	1cc26 <d_print_comp+0x5a6e>
   1ccb0:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1ccb4:	29ff      	cmp	r1, #255	; 0xff
   1ccb6:	d10d      	bne.n	1ccd4 <d_print_comp+0x5b1c>
   1ccb8:	4650      	mov	r0, sl
   1ccba:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ccbe:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
   1ccc2:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ccc6:	4798      	blx	r3
   1ccc8:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1cccc:	4641      	mov	r1, r8
   1ccce:	1c42      	adds	r2, r0, #1
   1ccd0:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1ccd4:	eb04 0c01 	add.w	ip, r4, r1
   1ccd8:	f884 7108 	strb.w	r7, [r4, #264]	; 0x108
   1ccdc:	3101      	adds	r1, #1
   1ccde:	4620      	mov	r0, r4
   1cce0:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1cce4:	f88c 7004 	strb.w	r7, [ip, #4]
   1cce8:	f855 1c0c 	ldr.w	r1, [r5, #-12]
   1ccec:	f000 f89e 	bl	1ce2c <d_print_mod>
   1ccf0:	e7a4      	b.n	1cc3c <d_print_comp+0x5a84>
   1ccf2:	ab18      	add	r3, sp, #96	; 0x60
   1ccf4:	9617      	str	r6, [sp, #92]	; 0x5c
   1ccf6:	f843 cd08 	str.w	ip, [r3, #-8]!
   1ccfa:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1ccfe:	e777      	b.n	1cbf0 <d_print_comp+0x5a38>
   1cd00:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1cd04:	29ff      	cmp	r1, #255	; 0xff
   1cd06:	d051      	beq.n	1cdac <d_print_comp+0x5bf4>
   1cd08:	eb04 0e01 	add.w	lr, r4, r1
   1cd0c:	1c4d      	adds	r5, r1, #1
   1cd0e:	f884 7108 	strb.w	r7, [r4, #264]	; 0x108
   1cd12:	4620      	mov	r0, r4
   1cd14:	f88e 7004 	strb.w	r7, [lr, #4]
   1cd18:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
   1cd1c:	f858 1c0c 	ldr.w	r1, [r8, #-12]
   1cd20:	f000 f884 	bl	1ce2c <d_print_mod>
   1cd24:	e79e      	b.n	1cc64 <d_print_comp+0x5aac>
   1cd26:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1cd2a:	29ff      	cmp	r1, #255	; 0xff
   1cd2c:	d04d      	beq.n	1cdca <d_print_comp+0x5c12>
   1cd2e:	eb04 0e01 	add.w	lr, r4, r1
   1cd32:	1c4b      	adds	r3, r1, #1
   1cd34:	4620      	mov	r0, r4
   1cd36:	f855 1c0c 	ldr.w	r1, [r5, #-12]
   1cd3a:	f88e 7004 	strb.w	r7, [lr, #4]
   1cd3e:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1cd42:	f884 7108 	strb.w	r7, [r4, #264]	; 0x108
   1cd46:	f000 f871 	bl	1ce2c <d_print_mod>
   1cd4a:	e786      	b.n	1cc5a <d_print_comp+0x5aa2>
   1cd4c:	4664      	mov	r4, ip
   1cd4e:	2001      	movs	r0, #1
   1cd50:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
   1cd54:	f7fa bb26 	b.w	173a4 <d_print_comp+0x1ec>
   1cd58:	f04f 0904 	mov.w	r9, #4
   1cd5c:	e6b6      	b.n	1cacc <d_print_comp+0x5914>
   1cd5e:	f04f 0903 	mov.w	r9, #3
   1cd62:	e6b3      	b.n	1cacc <d_print_comp+0x5914>
   1cd64:	f04f 0902 	mov.w	r9, #2
   1cd68:	e6b0      	b.n	1cacc <d_print_comp+0x5914>
   1cd6a:	2600      	movs	r6, #0
   1cd6c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1cd70:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1cd74:	1d20      	adds	r0, r4, #4
   1cd76:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   1cd7a:	4798      	blx	r3
   1cd7c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1cd80:	4631      	mov	r1, r6
   1cd82:	1c5a      	adds	r2, r3, #1
   1cd84:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1cd88:	f7ff bbd4 	b.w	1c534 <d_print_comp+0x537c>
   1cd8c:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1cd90:	1d20      	adds	r0, r4, #4
   1cd92:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1cd96:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1cd9a:	4798      	blx	r3
   1cd9c:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1cda0:	4631      	mov	r1, r6
   1cda2:	1c53      	adds	r3, r2, #1
   1cda4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1cda8:	f7ff bbb0 	b.w	1c50c <d_print_comp+0x5354>
   1cdac:	4650      	mov	r0, sl
   1cdae:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1cdb2:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   1cdb6:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1cdba:	4798      	blx	r3
   1cdbc:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1cdc0:	4629      	mov	r1, r5
   1cdc2:	1c42      	adds	r2, r0, #1
   1cdc4:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1cdc8:	e79e      	b.n	1cd08 <d_print_comp+0x5b50>
   1cdca:	4650      	mov	r0, sl
   1cdcc:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1cdd0:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   1cdd4:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1cdd8:	4798      	blx	r3
   1cdda:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1cdde:	4649      	mov	r1, r9
   1cde0:	1c50      	adds	r0, r2, #1
   1cde2:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1cde6:	e7a2      	b.n	1cd2e <d_print_comp+0x5b76>
   1cde8:	4620      	mov	r0, r4
   1cdea:	212d      	movs	r1, #45	; 0x2d
   1cdec:	f7f8 fb96 	bl	1551c <d_append_char>
   1cdf0:	f7ff baea 	b.w	1c3c8 <d_print_comp+0x5210>
   1cdf4:	f8d4 610c 	ldr.w	r6, [r4, #268]	; 0x10c
   1cdf8:	4650      	mov	r0, sl
   1cdfa:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   1cdfe:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ce02:	47b0      	blx	r6
   1ce04:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1ce08:	2100      	movs	r1, #0
   1ce0a:	f8c4 9104 	str.w	r9, [r4, #260]	; 0x104
   1ce0e:	1c5e      	adds	r6, r3, #1
   1ce10:	f8c4 6124 	str.w	r6, [r4, #292]	; 0x124
   1ce14:	f7fd b937 	b.w	1a086 <d_print_comp+0x2ece>
   1ce18:	f64c 1140 	movw	r1, #51520	; 0xc940
   1ce1c:	4620      	mov	r0, r4
   1ce1e:	f2c0 0102 	movt	r1, #2
   1ce22:	f7fa f921 	bl	17068 <d_append_string>
   1ce26:	f7fa babd 	b.w	173a4 <d_print_comp+0x1ec>
   1ce2a:	bf00      	nop

0001ce2c <d_print_mod>:
   1ce2c:	780a      	ldrb	r2, [r1, #0]
   1ce2e:	b570      	push	{r4, r5, r6, lr}
   1ce30:	1ed3      	subs	r3, r2, #3
   1ce32:	460d      	mov	r5, r1
   1ce34:	4604      	mov	r4, r0
   1ce36:	2b26      	cmp	r3, #38	; 0x26
   1ce38:	f200 80bf 	bhi.w	1cfba <d_print_mod+0x18e>
   1ce3c:	e8df f013 	tbh	[pc, r3, lsl #1]
   1ce40:	00bd01ab 	.word	0x00bd01ab
   1ce44:	00bd00bd 	.word	0x00bd00bd
   1ce48:	00bd00bd 	.word	0x00bd00bd
   1ce4c:	00bd00bd 	.word	0x00bd00bd
   1ce50:	00bd00bd 	.word	0x00bd00bd
   1ce54:	00bd00bd 	.word	0x00bd00bd
   1ce58:	00bd00bd 	.word	0x00bd00bd
   1ce5c:	00bd00bd 	.word	0x00bd00bd
   1ce60:	00bd00bd 	.word	0x00bd00bd
   1ce64:	00bd00bd 	.word	0x00bd00bd
   1ce68:	013500c1 	.word	0x013500c1
   1ce6c:	00c101b0 	.word	0x00c101b0
   1ce70:	01b00135 	.word	0x01b00135
   1ce74:	02f301ed 	.word	0x02f301ed
   1ce78:	02020338 	.word	0x02020338
   1ce7c:	0282021b 	.word	0x0282021b
   1ce80:	00bd00bd 	.word	0x00bd00bd
   1ce84:	00bd00bd 	.word	0x00bd00bd
   1ce88:	00bd02f9 	.word	0x00bd02f9
   1ce8c:	0027      	.short	0x0027
   1ce8e:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
   1ce92:	29ff      	cmp	r1, #255	; 0xff
   1ce94:	f000 86d6 	beq.w	1dc44 <d_print_mod+0xe18>
   1ce98:	eb00 0c01 	add.w	ip, r0, r1
   1ce9c:	3101      	adds	r1, #1
   1ce9e:	2320      	movs	r3, #32
   1cea0:	29ff      	cmp	r1, #255	; 0xff
   1cea2:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
   1cea6:	f88c 3004 	strb.w	r3, [ip, #4]
   1ceaa:	f880 3108 	strb.w	r3, [r0, #264]	; 0x108
   1ceae:	f000 8391 	beq.w	1d5d4 <d_print_mod+0x7a8>
   1ceb2:	eb04 0e01 	add.w	lr, r4, r1
   1ceb6:	3101      	adds	r1, #1
   1ceb8:	265f      	movs	r6, #95	; 0x5f
   1ceba:	29ff      	cmp	r1, #255	; 0xff
   1cebc:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1cec0:	f88e 6004 	strb.w	r6, [lr, #4]
   1cec4:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   1cec8:	f000 845b 	beq.w	1d782 <d_print_mod+0x956>
   1cecc:	eb04 0c01 	add.w	ip, r4, r1
   1ced0:	3101      	adds	r1, #1
   1ced2:	205f      	movs	r0, #95	; 0x5f
   1ced4:	29ff      	cmp	r1, #255	; 0xff
   1ced6:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1ceda:	f88c 0004 	strb.w	r0, [ip, #4]
   1cede:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1cee2:	f000 843b 	beq.w	1d75c <d_print_mod+0x930>
   1cee6:	eb04 0e01 	add.w	lr, r4, r1
   1ceea:	3101      	adds	r1, #1
   1ceec:	2376      	movs	r3, #118	; 0x76
   1ceee:	29ff      	cmp	r1, #255	; 0xff
   1cef0:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1cef4:	f88e 3004 	strb.w	r3, [lr, #4]
   1cef8:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1cefc:	f000 850b 	beq.w	1d916 <d_print_mod+0xaea>
   1cf00:	eb04 0c01 	add.w	ip, r4, r1
   1cf04:	3101      	adds	r1, #1
   1cf06:	2365      	movs	r3, #101	; 0x65
   1cf08:	29ff      	cmp	r1, #255	; 0xff
   1cf0a:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1cf0e:	f88c 3004 	strb.w	r3, [ip, #4]
   1cf12:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1cf16:	f000 84eb 	beq.w	1d8f0 <d_print_mod+0xac4>
   1cf1a:	eb04 0e01 	add.w	lr, r4, r1
   1cf1e:	3101      	adds	r1, #1
   1cf20:	2363      	movs	r3, #99	; 0x63
   1cf22:	29ff      	cmp	r1, #255	; 0xff
   1cf24:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1cf28:	f88e 3004 	strb.w	r3, [lr, #4]
   1cf2c:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1cf30:	f000 84cb 	beq.w	1d8ca <d_print_mod+0xa9e>
   1cf34:	eb04 0c01 	add.w	ip, r4, r1
   1cf38:	3101      	adds	r1, #1
   1cf3a:	2374      	movs	r3, #116	; 0x74
   1cf3c:	29ff      	cmp	r1, #255	; 0xff
   1cf3e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1cf42:	f88c 3004 	strb.w	r3, [ip, #4]
   1cf46:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1cf4a:	f000 84ab 	beq.w	1d8a4 <d_print_mod+0xa78>
   1cf4e:	eb04 0e01 	add.w	lr, r4, r1
   1cf52:	3101      	adds	r1, #1
   1cf54:	236f      	movs	r3, #111	; 0x6f
   1cf56:	29ff      	cmp	r1, #255	; 0xff
   1cf58:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1cf5c:	f88e 3004 	strb.w	r3, [lr, #4]
   1cf60:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1cf64:	f000 848b 	beq.w	1d87e <d_print_mod+0xa52>
   1cf68:	eb04 0c01 	add.w	ip, r4, r1
   1cf6c:	3101      	adds	r1, #1
   1cf6e:	2372      	movs	r3, #114	; 0x72
   1cf70:	29ff      	cmp	r1, #255	; 0xff
   1cf72:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1cf76:	f88c 3004 	strb.w	r3, [ip, #4]
   1cf7a:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1cf7e:	f000 846c 	beq.w	1d85a <d_print_mod+0xa2e>
   1cf82:	1c4a      	adds	r2, r1, #1
   1cf84:	1861      	adds	r1, r4, r1
   1cf86:	2328      	movs	r3, #40	; 0x28
   1cf88:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1cf8c:	4620      	mov	r0, r4
   1cf8e:	710b      	strb	r3, [r1, #4]
   1cf90:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1cf94:	6869      	ldr	r1, [r5, #4]
   1cf96:	f7fa f90f 	bl	171b8 <d_print_comp>
   1cf9a:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1cf9e:	1c4a      	adds	r2, r1, #1
   1cfa0:	29ff      	cmp	r1, #255	; 0xff
   1cfa2:	f000 8604 	beq.w	1dbae <d_print_mod+0xd82>
   1cfa6:	eb04 0e01 	add.w	lr, r4, r1
   1cfaa:	2029      	movs	r0, #41	; 0x29
   1cfac:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1cfb0:	f88e 0004 	strb.w	r0, [lr, #4]
   1cfb4:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1cfb8:	bd70      	pop	{r4, r5, r6, pc}
   1cfba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1cfbe:	f7fa b8fb 	b.w	171b8 <d_print_comp>
   1cfc2:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
   1cfc6:	29ff      	cmp	r1, #255	; 0xff
   1cfc8:	f000 8629 	beq.w	1dc1e <d_print_mod+0xdf2>
   1cfcc:	eb00 0c01 	add.w	ip, r0, r1
   1cfd0:	3101      	adds	r1, #1
   1cfd2:	2320      	movs	r3, #32
   1cfd4:	29ff      	cmp	r1, #255	; 0xff
   1cfd6:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
   1cfda:	f88c 3004 	strb.w	r3, [ip, #4]
   1cfde:	f880 3108 	strb.w	r3, [r0, #264]	; 0x108
   1cfe2:	f000 82e5 	beq.w	1d5b0 <d_print_mod+0x784>
   1cfe6:	eb04 0c01 	add.w	ip, r4, r1
   1cfea:	3101      	adds	r1, #1
   1cfec:	2072      	movs	r0, #114	; 0x72
   1cfee:	29ff      	cmp	r1, #255	; 0xff
   1cff0:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1cff4:	f88c 0004 	strb.w	r0, [ip, #4]
   1cff8:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1cffc:	f000 84b1 	beq.w	1d962 <d_print_mod+0xb36>
   1d000:	eb04 0c01 	add.w	ip, r4, r1
   1d004:	3101      	adds	r1, #1
   1d006:	2065      	movs	r0, #101	; 0x65
   1d008:	29ff      	cmp	r1, #255	; 0xff
   1d00a:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d00e:	f88c 0004 	strb.w	r0, [ip, #4]
   1d012:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1d016:	f000 8491 	beq.w	1d93c <d_print_mod+0xb10>
   1d01a:	eb04 0c01 	add.w	ip, r4, r1
   1d01e:	3101      	adds	r1, #1
   1d020:	2073      	movs	r0, #115	; 0x73
   1d022:	29ff      	cmp	r1, #255	; 0xff
   1d024:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d028:	f88c 0004 	strb.w	r0, [ip, #4]
   1d02c:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1d030:	f000 8554 	beq.w	1dadc <d_print_mod+0xcb0>
   1d034:	eb04 0c01 	add.w	ip, r4, r1
   1d038:	3101      	adds	r1, #1
   1d03a:	2074      	movs	r0, #116	; 0x74
   1d03c:	29ff      	cmp	r1, #255	; 0xff
   1d03e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d042:	f88c 0004 	strb.w	r0, [ip, #4]
   1d046:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1d04a:	f000 8534 	beq.w	1dab6 <d_print_mod+0xc8a>
   1d04e:	eb04 0c01 	add.w	ip, r4, r1
   1d052:	3101      	adds	r1, #1
   1d054:	2072      	movs	r0, #114	; 0x72
   1d056:	29ff      	cmp	r1, #255	; 0xff
   1d058:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d05c:	f88c 0004 	strb.w	r0, [ip, #4]
   1d060:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1d064:	f000 8514 	beq.w	1da90 <d_print_mod+0xc64>
   1d068:	eb04 0c01 	add.w	ip, r4, r1
   1d06c:	3101      	adds	r1, #1
   1d06e:	2069      	movs	r0, #105	; 0x69
   1d070:	29ff      	cmp	r1, #255	; 0xff
   1d072:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d076:	f88c 0004 	strb.w	r0, [ip, #4]
   1d07a:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1d07e:	f000 84f4 	beq.w	1da6a <d_print_mod+0xc3e>
   1d082:	1862      	adds	r2, r4, r1
   1d084:	2363      	movs	r3, #99	; 0x63
   1d086:	3101      	adds	r1, #1
   1d088:	29ff      	cmp	r1, #255	; 0xff
   1d08a:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d08e:	7113      	strb	r3, [r2, #4]
   1d090:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1d094:	f000 8222 	beq.w	1d4dc <d_print_mod+0x6b0>
   1d098:	1c4a      	adds	r2, r1, #1
   1d09a:	1861      	adds	r1, r4, r1
   1d09c:	2074      	movs	r0, #116	; 0x74
   1d09e:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1d0a2:	7108      	strb	r0, [r1, #4]
   1d0a4:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1d0a8:	bd70      	pop	{r4, r5, r6, pc}
   1d0aa:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
   1d0ae:	29ff      	cmp	r1, #255	; 0xff
   1d0b0:	f000 85a2 	beq.w	1dbf8 <d_print_mod+0xdcc>
   1d0b4:	eb00 0c01 	add.w	ip, r0, r1
   1d0b8:	3101      	adds	r1, #1
   1d0ba:	2320      	movs	r3, #32
   1d0bc:	29ff      	cmp	r1, #255	; 0xff
   1d0be:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
   1d0c2:	f88c 3004 	strb.w	r3, [ip, #4]
   1d0c6:	f880 3108 	strb.w	r3, [r0, #264]	; 0x108
   1d0ca:	f000 825f 	beq.w	1d58c <d_print_mod+0x760>
   1d0ce:	eb04 0c01 	add.w	ip, r4, r1
   1d0d2:	3101      	adds	r1, #1
   1d0d4:	2076      	movs	r0, #118	; 0x76
   1d0d6:	29ff      	cmp	r1, #255	; 0xff
   1d0d8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d0dc:	f88c 0004 	strb.w	r0, [ip, #4]
   1d0e0:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1d0e4:	f000 83a7 	beq.w	1d836 <d_print_mod+0xa0a>
   1d0e8:	eb04 0c01 	add.w	ip, r4, r1
   1d0ec:	3101      	adds	r1, #1
   1d0ee:	206f      	movs	r0, #111	; 0x6f
   1d0f0:	29ff      	cmp	r1, #255	; 0xff
   1d0f2:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d0f6:	f88c 0004 	strb.w	r0, [ip, #4]
   1d0fa:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1d0fe:	f000 84a1 	beq.w	1da44 <d_print_mod+0xc18>
   1d102:	eb04 0c01 	add.w	ip, r4, r1
   1d106:	3101      	adds	r1, #1
   1d108:	206c      	movs	r0, #108	; 0x6c
   1d10a:	29ff      	cmp	r1, #255	; 0xff
   1d10c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d110:	f88c 0004 	strb.w	r0, [ip, #4]
   1d114:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1d118:	f000 8481 	beq.w	1da1e <d_print_mod+0xbf2>
   1d11c:	eb04 0c01 	add.w	ip, r4, r1
   1d120:	3101      	adds	r1, #1
   1d122:	2061      	movs	r0, #97	; 0x61
   1d124:	29ff      	cmp	r1, #255	; 0xff
   1d126:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d12a:	f88c 0004 	strb.w	r0, [ip, #4]
   1d12e:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1d132:	f000 8461 	beq.w	1d9f8 <d_print_mod+0xbcc>
   1d136:	eb04 0c01 	add.w	ip, r4, r1
   1d13a:	3101      	adds	r1, #1
   1d13c:	2074      	movs	r0, #116	; 0x74
   1d13e:	29ff      	cmp	r1, #255	; 0xff
   1d140:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d144:	f88c 0004 	strb.w	r0, [ip, #4]
   1d148:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1d14c:	f000 8441 	beq.w	1d9d2 <d_print_mod+0xba6>
   1d150:	eb04 0c01 	add.w	ip, r4, r1
   1d154:	3101      	adds	r1, #1
   1d156:	2069      	movs	r0, #105	; 0x69
   1d158:	29ff      	cmp	r1, #255	; 0xff
   1d15a:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d15e:	f88c 0004 	strb.w	r0, [ip, #4]
   1d162:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1d166:	f000 8421 	beq.w	1d9ac <d_print_mod+0xb80>
   1d16a:	eb04 0c01 	add.w	ip, r4, r1
   1d16e:	3101      	adds	r1, #1
   1d170:	206c      	movs	r0, #108	; 0x6c
   1d172:	29ff      	cmp	r1, #255	; 0xff
   1d174:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d178:	f88c 0004 	strb.w	r0, [ip, #4]
   1d17c:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1d180:	f000 8402 	beq.w	1d988 <d_print_mod+0xb5c>
   1d184:	1c4a      	adds	r2, r1, #1
   1d186:	1861      	adds	r1, r4, r1
   1d188:	2065      	movs	r0, #101	; 0x65
   1d18a:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1d18e:	7108      	strb	r0, [r1, #4]
   1d190:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1d194:	bd70      	pop	{r4, r5, r6, pc}
   1d196:	6849      	ldr	r1, [r1, #4]
   1d198:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1d19c:	f7fa b80c 	b.w	171b8 <d_print_comp>
   1d1a0:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
   1d1a4:	29ff      	cmp	r1, #255	; 0xff
   1d1a6:	f000 8514 	beq.w	1dbd2 <d_print_mod+0xda6>
   1d1aa:	eb00 0c01 	add.w	ip, r0, r1
   1d1ae:	3101      	adds	r1, #1
   1d1b0:	2320      	movs	r3, #32
   1d1b2:	29ff      	cmp	r1, #255	; 0xff
   1d1b4:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
   1d1b8:	f88c 3004 	strb.w	r3, [ip, #4]
   1d1bc:	f880 3108 	strb.w	r3, [r0, #264]	; 0x108
   1d1c0:	f000 81d2 	beq.w	1d568 <d_print_mod+0x73c>
   1d1c4:	eb04 0c01 	add.w	ip, r4, r1
   1d1c8:	3101      	adds	r1, #1
   1d1ca:	2063      	movs	r0, #99	; 0x63
   1d1cc:	29ff      	cmp	r1, #255	; 0xff
   1d1ce:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d1d2:	f88c 0004 	strb.w	r0, [ip, #4]
   1d1d6:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1d1da:	f000 84b8 	beq.w	1db4e <d_print_mod+0xd22>
   1d1de:	eb04 0c01 	add.w	ip, r4, r1
   1d1e2:	3101      	adds	r1, #1
   1d1e4:	206f      	movs	r0, #111	; 0x6f
   1d1e6:	29ff      	cmp	r1, #255	; 0xff
   1d1e8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d1ec:	f88c 0004 	strb.w	r0, [ip, #4]
   1d1f0:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1d1f4:	f000 8498 	beq.w	1db28 <d_print_mod+0xcfc>
   1d1f8:	eb04 0c01 	add.w	ip, r4, r1
   1d1fc:	3101      	adds	r1, #1
   1d1fe:	206e      	movs	r0, #110	; 0x6e
   1d200:	29ff      	cmp	r1, #255	; 0xff
   1d202:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d206:	f88c 0004 	strb.w	r0, [ip, #4]
   1d20a:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1d20e:	f000 8478 	beq.w	1db02 <d_print_mod+0xcd6>
   1d212:	1862      	adds	r2, r4, r1
   1d214:	2373      	movs	r3, #115	; 0x73
   1d216:	3101      	adds	r1, #1
   1d218:	e736      	b.n	1d088 <d_print_mod+0x25c>
   1d21a:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
   1d21e:	29ff      	cmp	r1, #255	; 0xff
   1d220:	f000 855c 	beq.w	1dcdc <d_print_mod+0xeb0>
   1d224:	1c48      	adds	r0, r1, #1
   1d226:	eb04 0c01 	add.w	ip, r4, r1
   1d22a:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   1d22e:	2120      	movs	r1, #32
   1d230:	4620      	mov	r0, r4
   1d232:	f88c 1004 	strb.w	r1, [ip, #4]
   1d236:	f884 1108 	strb.w	r1, [r4, #264]	; 0x108
   1d23a:	68a9      	ldr	r1, [r5, #8]
   1d23c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1d240:	f7f9 bfba 	b.w	171b8 <d_print_comp>
   1d244:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
   1d248:	29ff      	cmp	r1, #255	; 0xff
   1d24a:	f000 8534 	beq.w	1dcb6 <d_print_mod+0xe8a>
   1d24e:	1842      	adds	r2, r0, r1
   1d250:	3101      	adds	r1, #1
   1d252:	2326      	movs	r3, #38	; 0x26
   1d254:	29ff      	cmp	r1, #255	; 0xff
   1d256:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
   1d25a:	7113      	strb	r3, [r2, #4]
   1d25c:	f880 3108 	strb.w	r3, [r0, #264]	; 0x108
   1d260:	f000 812b 	beq.w	1d4ba <d_print_mod+0x68e>
   1d264:	1c4a      	adds	r2, r1, #1
   1d266:	1861      	adds	r1, r4, r1
   1d268:	2026      	movs	r0, #38	; 0x26
   1d26a:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1d26e:	7108      	strb	r0, [r1, #4]
   1d270:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1d274:	bd70      	pop	{r4, r5, r6, pc}
   1d276:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
   1d27a:	29ff      	cmp	r1, #255	; 0xff
   1d27c:	f000 84f5 	beq.w	1dc6a <d_print_mod+0xe3e>
   1d280:	eb00 0c01 	add.w	ip, r0, r1
   1d284:	3101      	adds	r1, #1
   1d286:	2363      	movs	r3, #99	; 0x63
   1d288:	29ff      	cmp	r1, #255	; 0xff
   1d28a:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
   1d28e:	f88c 3004 	strb.w	r3, [ip, #4]
   1d292:	f880 3108 	strb.w	r3, [r0, #264]	; 0x108
   1d296:	f000 8155 	beq.w	1d544 <d_print_mod+0x718>
   1d29a:	eb04 0c01 	add.w	ip, r4, r1
   1d29e:	3101      	adds	r1, #1
   1d2a0:	206f      	movs	r0, #111	; 0x6f
   1d2a2:	29ff      	cmp	r1, #255	; 0xff
   1d2a4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d2a8:	f88c 0004 	strb.w	r0, [ip, #4]
   1d2ac:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1d2b0:	f000 82af 	beq.w	1d812 <d_print_mod+0x9e6>
   1d2b4:	eb04 0c01 	add.w	ip, r4, r1
   1d2b8:	3101      	adds	r1, #1
   1d2ba:	206d      	movs	r0, #109	; 0x6d
   1d2bc:	29ff      	cmp	r1, #255	; 0xff
   1d2be:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d2c2:	f88c 0004 	strb.w	r0, [ip, #4]
   1d2c6:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1d2ca:	f000 8290 	beq.w	1d7ee <d_print_mod+0x9c2>
   1d2ce:	eb04 0c01 	add.w	ip, r4, r1
   1d2d2:	3101      	adds	r1, #1
   1d2d4:	2070      	movs	r0, #112	; 0x70
   1d2d6:	29ff      	cmp	r1, #255	; 0xff
   1d2d8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d2dc:	f88c 0004 	strb.w	r0, [ip, #4]
   1d2e0:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1d2e4:	f000 8271 	beq.w	1d7ca <d_print_mod+0x99e>
   1d2e8:	eb04 0c01 	add.w	ip, r4, r1
   1d2ec:	3101      	adds	r1, #1
   1d2ee:	206c      	movs	r0, #108	; 0x6c
   1d2f0:	29ff      	cmp	r1, #255	; 0xff
   1d2f2:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d2f6:	f88c 0004 	strb.w	r0, [ip, #4]
   1d2fa:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1d2fe:	f000 8252 	beq.w	1d7a6 <d_print_mod+0x97a>
   1d302:	eb04 0c01 	add.w	ip, r4, r1
   1d306:	3101      	adds	r1, #1
   1d308:	2065      	movs	r0, #101	; 0x65
   1d30a:	29ff      	cmp	r1, #255	; 0xff
   1d30c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d310:	f88c 0004 	strb.w	r0, [ip, #4]
   1d314:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1d318:	f000 8102 	beq.w	1d520 <d_print_mod+0x6f4>
   1d31c:	1862      	adds	r2, r4, r1
   1d31e:	2378      	movs	r3, #120	; 0x78
   1d320:	3101      	adds	r1, #1
   1d322:	29ff      	cmp	r1, #255	; 0xff
   1d324:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d328:	7113      	strb	r3, [r2, #4]
   1d32a:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1d32e:	f000 80e6 	beq.w	1d4fe <d_print_mod+0x6d2>
   1d332:	1c4a      	adds	r2, r1, #1
   1d334:	1861      	adds	r1, r4, r1
   1d336:	2020      	movs	r0, #32
   1d338:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1d33c:	7108      	strb	r0, [r1, #4]
   1d33e:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1d342:	bd70      	pop	{r4, r5, r6, pc}
   1d344:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
   1d348:	29ff      	cmp	r1, #255	; 0xff
   1d34a:	f000 84a1 	beq.w	1dc90 <d_print_mod+0xe64>
   1d34e:	eb00 0c01 	add.w	ip, r0, r1
   1d352:	3101      	adds	r1, #1
   1d354:	2369      	movs	r3, #105	; 0x69
   1d356:	29ff      	cmp	r1, #255	; 0xff
   1d358:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
   1d35c:	f88c 3004 	strb.w	r3, [ip, #4]
   1d360:	f880 3108 	strb.w	r3, [r0, #264]	; 0x108
   1d364:	f000 81e8 	beq.w	1d738 <d_print_mod+0x90c>
   1d368:	eb04 0c01 	add.w	ip, r4, r1
   1d36c:	3101      	adds	r1, #1
   1d36e:	206d      	movs	r0, #109	; 0x6d
   1d370:	29ff      	cmp	r1, #255	; 0xff
   1d372:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d376:	f88c 0004 	strb.w	r0, [ip, #4]
   1d37a:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1d37e:	f000 81c9 	beq.w	1d714 <d_print_mod+0x8e8>
   1d382:	eb04 0c01 	add.w	ip, r4, r1
   1d386:	3101      	adds	r1, #1
   1d388:	2061      	movs	r0, #97	; 0x61
   1d38a:	29ff      	cmp	r1, #255	; 0xff
   1d38c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d390:	f88c 0004 	strb.w	r0, [ip, #4]
   1d394:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1d398:	f000 81aa 	beq.w	1d6f0 <d_print_mod+0x8c4>
   1d39c:	eb04 0c01 	add.w	ip, r4, r1
   1d3a0:	3101      	adds	r1, #1
   1d3a2:	2067      	movs	r0, #103	; 0x67
   1d3a4:	29ff      	cmp	r1, #255	; 0xff
   1d3a6:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d3aa:	f88c 0004 	strb.w	r0, [ip, #4]
   1d3ae:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1d3b2:	f000 818b 	beq.w	1d6cc <d_print_mod+0x8a0>
   1d3b6:	eb04 0c01 	add.w	ip, r4, r1
   1d3ba:	3101      	adds	r1, #1
   1d3bc:	2069      	movs	r0, #105	; 0x69
   1d3be:	29ff      	cmp	r1, #255	; 0xff
   1d3c0:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d3c4:	f88c 0004 	strb.w	r0, [ip, #4]
   1d3c8:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1d3cc:	f000 816c 	beq.w	1d6a8 <d_print_mod+0x87c>
   1d3d0:	eb04 0c01 	add.w	ip, r4, r1
   1d3d4:	3101      	adds	r1, #1
   1d3d6:	206e      	movs	r0, #110	; 0x6e
   1d3d8:	29ff      	cmp	r1, #255	; 0xff
   1d3da:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d3de:	f88c 0004 	strb.w	r0, [ip, #4]
   1d3e2:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1d3e6:	f000 814d 	beq.w	1d684 <d_print_mod+0x858>
   1d3ea:	eb04 0c01 	add.w	ip, r4, r1
   1d3ee:	3101      	adds	r1, #1
   1d3f0:	2061      	movs	r0, #97	; 0x61
   1d3f2:	29ff      	cmp	r1, #255	; 0xff
   1d3f4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d3f8:	f88c 0004 	strb.w	r0, [ip, #4]
   1d3fc:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1d400:	f000 812e 	beq.w	1d660 <d_print_mod+0x834>
   1d404:	eb04 0c01 	add.w	ip, r4, r1
   1d408:	3101      	adds	r1, #1
   1d40a:	2072      	movs	r0, #114	; 0x72
   1d40c:	29ff      	cmp	r1, #255	; 0xff
   1d40e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d412:	f88c 0004 	strb.w	r0, [ip, #4]
   1d416:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1d41a:	f000 810f 	beq.w	1d63c <d_print_mod+0x810>
   1d41e:	1862      	adds	r2, r4, r1
   1d420:	2379      	movs	r3, #121	; 0x79
   1d422:	3101      	adds	r1, #1
   1d424:	e77d      	b.n	1d322 <d_print_mod+0x4f6>
   1d426:	6805      	ldr	r5, [r0, #0]
   1d428:	f015 0504 	ands.w	r5, r5, #4
   1d42c:	f000 83a2 	beq.w	1db74 <d_print_mod+0xd48>
   1d430:	bd70      	pop	{r4, r5, r6, pc}
   1d432:	f890 2108 	ldrb.w	r2, [r0, #264]	; 0x108
   1d436:	2a28      	cmp	r2, #40	; 0x28
   1d438:	d00e      	beq.n	1d458 <d_print_mod+0x62c>
   1d43a:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
   1d43e:	1c4a      	adds	r2, r1, #1
   1d440:	29ff      	cmp	r1, #255	; 0xff
   1d442:	f000 845d 	beq.w	1dd00 <d_print_mod+0xed4>
   1d446:	eb04 0e01 	add.w	lr, r4, r1
   1d44a:	2020      	movs	r0, #32
   1d44c:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1d450:	f88e 0004 	strb.w	r0, [lr, #4]
   1d454:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1d458:	6869      	ldr	r1, [r5, #4]
   1d45a:	4620      	mov	r0, r4
   1d45c:	f7f9 feac 	bl	171b8 <d_print_comp>
   1d460:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1d464:	29ff      	cmp	r1, #255	; 0xff
   1d466:	f000 8390 	beq.w	1db8a <d_print_mod+0xd5e>
   1d46a:	eb04 0c01 	add.w	ip, r4, r1
   1d46e:	3101      	adds	r1, #1
   1d470:	253a      	movs	r5, #58	; 0x3a
   1d472:	29ff      	cmp	r1, #255	; 0xff
   1d474:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d478:	f88c 5004 	strb.w	r5, [ip, #4]
   1d47c:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
   1d480:	f000 80cb 	beq.w	1d61a <d_print_mod+0x7ee>
   1d484:	eb04 0e01 	add.w	lr, r4, r1
   1d488:	3101      	adds	r1, #1
   1d48a:	203a      	movs	r0, #58	; 0x3a
   1d48c:	29ff      	cmp	r1, #255	; 0xff
   1d48e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d492:	f88e 0004 	strb.w	r0, [lr, #4]
   1d496:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1d49a:	f000 80ad 	beq.w	1d5f8 <d_print_mod+0x7cc>
   1d49e:	1c4a      	adds	r2, r1, #1
   1d4a0:	1861      	adds	r1, r4, r1
   1d4a2:	232a      	movs	r3, #42	; 0x2a
   1d4a4:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1d4a8:	710b      	strb	r3, [r1, #4]
   1d4aa:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1d4ae:	bd70      	pop	{r4, r5, r6, pc}
   1d4b0:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
   1d4b4:	29ff      	cmp	r1, #255	; 0xff
   1d4b6:	f47f aed5 	bne.w	1d264 <d_print_mod+0x438>
   1d4ba:	2500      	movs	r5, #0
   1d4bc:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d4c0:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
   1d4c4:	3004      	adds	r0, #4
   1d4c6:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d4ca:	4798      	blx	r3
   1d4cc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1d4d0:	2201      	movs	r2, #1
   1d4d2:	4629      	mov	r1, r5
   1d4d4:	1898      	adds	r0, r3, r2
   1d4d6:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1d4da:	e6c4      	b.n	1d266 <d_print_mod+0x43a>
   1d4dc:	2500      	movs	r5, #0
   1d4de:	1d20      	adds	r0, r4, #4
   1d4e0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d4e4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d4e8:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   1d4ec:	4798      	blx	r3
   1d4ee:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1d4f2:	2201      	movs	r2, #1
   1d4f4:	4629      	mov	r1, r5
   1d4f6:	1883      	adds	r3, r0, r2
   1d4f8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1d4fc:	e5cd      	b.n	1d09a <d_print_mod+0x26e>
   1d4fe:	2500      	movs	r5, #0
   1d500:	1d20      	adds	r0, r4, #4
   1d502:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d506:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d50a:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   1d50e:	4798      	blx	r3
   1d510:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1d514:	2201      	movs	r2, #1
   1d516:	4629      	mov	r1, r5
   1d518:	1883      	adds	r3, r0, r2
   1d51a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1d51e:	e709      	b.n	1d334 <d_print_mod+0x508>
   1d520:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d524:	2000      	movs	r0, #0
   1d526:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d52a:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1d52e:	1d20      	adds	r0, r4, #4
   1d530:	4798      	blx	r3
   1d532:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1d536:	2101      	movs	r1, #1
   1d538:	2378      	movs	r3, #120	; 0x78
   1d53a:	1850      	adds	r0, r2, r1
   1d53c:	7123      	strb	r3, [r4, #4]
   1d53e:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1d542:	e6f6      	b.n	1d332 <d_print_mod+0x506>
   1d544:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
   1d548:	2200      	movs	r2, #0
   1d54a:	f880 2103 	strb.w	r2, [r0, #259]	; 0x103
   1d54e:	3004      	adds	r0, #4
   1d550:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d554:	4798      	blx	r3
   1d556:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1d55a:	2101      	movs	r1, #1
   1d55c:	226f      	movs	r2, #111	; 0x6f
   1d55e:	1843      	adds	r3, r0, r1
   1d560:	7122      	strb	r2, [r4, #4]
   1d562:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1d566:	e6a5      	b.n	1d2b4 <d_print_mod+0x488>
   1d568:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
   1d56c:	2200      	movs	r2, #0
   1d56e:	f880 2103 	strb.w	r2, [r0, #259]	; 0x103
   1d572:	3004      	adds	r0, #4
   1d574:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d578:	4798      	blx	r3
   1d57a:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1d57e:	2101      	movs	r1, #1
   1d580:	2263      	movs	r2, #99	; 0x63
   1d582:	1843      	adds	r3, r0, r1
   1d584:	7122      	strb	r2, [r4, #4]
   1d586:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1d58a:	e628      	b.n	1d1de <d_print_mod+0x3b2>
   1d58c:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
   1d590:	2200      	movs	r2, #0
   1d592:	f880 2103 	strb.w	r2, [r0, #259]	; 0x103
   1d596:	3004      	adds	r0, #4
   1d598:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d59c:	4798      	blx	r3
   1d59e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1d5a2:	2101      	movs	r1, #1
   1d5a4:	2276      	movs	r2, #118	; 0x76
   1d5a6:	1843      	adds	r3, r0, r1
   1d5a8:	7122      	strb	r2, [r4, #4]
   1d5aa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1d5ae:	e59b      	b.n	1d0e8 <d_print_mod+0x2bc>
   1d5b0:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
   1d5b4:	2200      	movs	r2, #0
   1d5b6:	f880 2103 	strb.w	r2, [r0, #259]	; 0x103
   1d5ba:	3004      	adds	r0, #4
   1d5bc:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d5c0:	4798      	blx	r3
   1d5c2:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1d5c6:	2101      	movs	r1, #1
   1d5c8:	2272      	movs	r2, #114	; 0x72
   1d5ca:	1843      	adds	r3, r0, r1
   1d5cc:	7122      	strb	r2, [r4, #4]
   1d5ce:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1d5d2:	e515      	b.n	1d000 <d_print_mod+0x1d4>
   1d5d4:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
   1d5d8:	2200      	movs	r2, #0
   1d5da:	f880 2103 	strb.w	r2, [r0, #259]	; 0x103
   1d5de:	3004      	adds	r0, #4
   1d5e0:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d5e4:	4798      	blx	r3
   1d5e6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1d5ea:	2101      	movs	r1, #1
   1d5ec:	225f      	movs	r2, #95	; 0x5f
   1d5ee:	1858      	adds	r0, r3, r1
   1d5f0:	7122      	strb	r2, [r4, #4]
   1d5f2:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1d5f6:	e469      	b.n	1cecc <d_print_mod+0xa0>
   1d5f8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d5fc:	1d20      	adds	r0, r4, #4
   1d5fe:	2500      	movs	r5, #0
   1d600:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   1d604:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d608:	4798      	blx	r3
   1d60a:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1d60e:	2201      	movs	r2, #1
   1d610:	4629      	mov	r1, r5
   1d612:	1883      	adds	r3, r0, r2
   1d614:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1d618:	e742      	b.n	1d4a0 <d_print_mod+0x674>
   1d61a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d61e:	2000      	movs	r0, #0
   1d620:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d624:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1d628:	1d20      	adds	r0, r4, #4
   1d62a:	4798      	blx	r3
   1d62c:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1d630:	2101      	movs	r1, #1
   1d632:	7125      	strb	r5, [r4, #4]
   1d634:	1853      	adds	r3, r2, r1
   1d636:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1d63a:	e730      	b.n	1d49e <d_print_mod+0x672>
   1d63c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d640:	2000      	movs	r0, #0
   1d642:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d646:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1d64a:	1d20      	adds	r0, r4, #4
   1d64c:	4798      	blx	r3
   1d64e:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1d652:	2101      	movs	r1, #1
   1d654:	2379      	movs	r3, #121	; 0x79
   1d656:	1850      	adds	r0, r2, r1
   1d658:	7123      	strb	r3, [r4, #4]
   1d65a:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1d65e:	e668      	b.n	1d332 <d_print_mod+0x506>
   1d660:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d664:	2200      	movs	r2, #0
   1d666:	1d20      	adds	r0, r4, #4
   1d668:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1d66c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d670:	4798      	blx	r3
   1d672:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1d676:	2101      	movs	r1, #1
   1d678:	2272      	movs	r2, #114	; 0x72
   1d67a:	1843      	adds	r3, r0, r1
   1d67c:	7122      	strb	r2, [r4, #4]
   1d67e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1d682:	e6cc      	b.n	1d41e <d_print_mod+0x5f2>
   1d684:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d688:	2200      	movs	r2, #0
   1d68a:	1d20      	adds	r0, r4, #4
   1d68c:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1d690:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d694:	4798      	blx	r3
   1d696:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1d69a:	2101      	movs	r1, #1
   1d69c:	2261      	movs	r2, #97	; 0x61
   1d69e:	1843      	adds	r3, r0, r1
   1d6a0:	7122      	strb	r2, [r4, #4]
   1d6a2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1d6a6:	e6ad      	b.n	1d404 <d_print_mod+0x5d8>
   1d6a8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d6ac:	2200      	movs	r2, #0
   1d6ae:	1d20      	adds	r0, r4, #4
   1d6b0:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1d6b4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d6b8:	4798      	blx	r3
   1d6ba:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1d6be:	2101      	movs	r1, #1
   1d6c0:	226e      	movs	r2, #110	; 0x6e
   1d6c2:	1843      	adds	r3, r0, r1
   1d6c4:	7122      	strb	r2, [r4, #4]
   1d6c6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1d6ca:	e68e      	b.n	1d3ea <d_print_mod+0x5be>
   1d6cc:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d6d0:	2200      	movs	r2, #0
   1d6d2:	1d20      	adds	r0, r4, #4
   1d6d4:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1d6d8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d6dc:	4798      	blx	r3
   1d6de:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1d6e2:	2101      	movs	r1, #1
   1d6e4:	2269      	movs	r2, #105	; 0x69
   1d6e6:	1843      	adds	r3, r0, r1
   1d6e8:	7122      	strb	r2, [r4, #4]
   1d6ea:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1d6ee:	e66f      	b.n	1d3d0 <d_print_mod+0x5a4>
   1d6f0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d6f4:	2200      	movs	r2, #0
   1d6f6:	1d20      	adds	r0, r4, #4
   1d6f8:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1d6fc:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d700:	4798      	blx	r3
   1d702:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1d706:	2101      	movs	r1, #1
   1d708:	2267      	movs	r2, #103	; 0x67
   1d70a:	1843      	adds	r3, r0, r1
   1d70c:	7122      	strb	r2, [r4, #4]
   1d70e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1d712:	e650      	b.n	1d3b6 <d_print_mod+0x58a>
   1d714:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d718:	2200      	movs	r2, #0
   1d71a:	1d20      	adds	r0, r4, #4
   1d71c:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1d720:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d724:	4798      	blx	r3
   1d726:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1d72a:	2101      	movs	r1, #1
   1d72c:	2261      	movs	r2, #97	; 0x61
   1d72e:	1843      	adds	r3, r0, r1
   1d730:	7122      	strb	r2, [r4, #4]
   1d732:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1d736:	e631      	b.n	1d39c <d_print_mod+0x570>
   1d738:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
   1d73c:	2200      	movs	r2, #0
   1d73e:	f880 2103 	strb.w	r2, [r0, #259]	; 0x103
   1d742:	3004      	adds	r0, #4
   1d744:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d748:	4798      	blx	r3
   1d74a:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1d74e:	2101      	movs	r1, #1
   1d750:	226d      	movs	r2, #109	; 0x6d
   1d752:	1843      	adds	r3, r0, r1
   1d754:	7122      	strb	r2, [r4, #4]
   1d756:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1d75a:	e612      	b.n	1d382 <d_print_mod+0x556>
   1d75c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d760:	2000      	movs	r0, #0
   1d762:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d766:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1d76a:	1d20      	adds	r0, r4, #4
   1d76c:	4798      	blx	r3
   1d76e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1d772:	2101      	movs	r1, #1
   1d774:	2276      	movs	r2, #118	; 0x76
   1d776:	1858      	adds	r0, r3, r1
   1d778:	7122      	strb	r2, [r4, #4]
   1d77a:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1d77e:	f7ff bbbf 	b.w	1cf00 <d_print_mod+0xd4>
   1d782:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d786:	2000      	movs	r0, #0
   1d788:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d78c:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1d790:	1d20      	adds	r0, r4, #4
   1d792:	4798      	blx	r3
   1d794:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1d798:	2101      	movs	r1, #1
   1d79a:	7126      	strb	r6, [r4, #4]
   1d79c:	1853      	adds	r3, r2, r1
   1d79e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1d7a2:	f7ff bba0 	b.w	1cee6 <d_print_mod+0xba>
   1d7a6:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d7aa:	2200      	movs	r2, #0
   1d7ac:	1d20      	adds	r0, r4, #4
   1d7ae:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1d7b2:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d7b6:	4798      	blx	r3
   1d7b8:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1d7bc:	2101      	movs	r1, #1
   1d7be:	2265      	movs	r2, #101	; 0x65
   1d7c0:	1843      	adds	r3, r0, r1
   1d7c2:	7122      	strb	r2, [r4, #4]
   1d7c4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1d7c8:	e5a8      	b.n	1d31c <d_print_mod+0x4f0>
   1d7ca:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d7ce:	2200      	movs	r2, #0
   1d7d0:	1d20      	adds	r0, r4, #4
   1d7d2:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1d7d6:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d7da:	4798      	blx	r3
   1d7dc:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1d7e0:	2101      	movs	r1, #1
   1d7e2:	226c      	movs	r2, #108	; 0x6c
   1d7e4:	1843      	adds	r3, r0, r1
   1d7e6:	7122      	strb	r2, [r4, #4]
   1d7e8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1d7ec:	e589      	b.n	1d302 <d_print_mod+0x4d6>
   1d7ee:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d7f2:	2200      	movs	r2, #0
   1d7f4:	1d20      	adds	r0, r4, #4
   1d7f6:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1d7fa:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d7fe:	4798      	blx	r3
   1d800:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1d804:	2101      	movs	r1, #1
   1d806:	2270      	movs	r2, #112	; 0x70
   1d808:	1843      	adds	r3, r0, r1
   1d80a:	7122      	strb	r2, [r4, #4]
   1d80c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1d810:	e56a      	b.n	1d2e8 <d_print_mod+0x4bc>
   1d812:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d816:	2200      	movs	r2, #0
   1d818:	1d20      	adds	r0, r4, #4
   1d81a:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1d81e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d822:	4798      	blx	r3
   1d824:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1d828:	2101      	movs	r1, #1
   1d82a:	226d      	movs	r2, #109	; 0x6d
   1d82c:	1843      	adds	r3, r0, r1
   1d82e:	7122      	strb	r2, [r4, #4]
   1d830:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1d834:	e54b      	b.n	1d2ce <d_print_mod+0x4a2>
   1d836:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d83a:	2200      	movs	r2, #0
   1d83c:	1d20      	adds	r0, r4, #4
   1d83e:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1d842:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d846:	4798      	blx	r3
   1d848:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1d84c:	2101      	movs	r1, #1
   1d84e:	226f      	movs	r2, #111	; 0x6f
   1d850:	1843      	adds	r3, r0, r1
   1d852:	7122      	strb	r2, [r4, #4]
   1d854:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1d858:	e453      	b.n	1d102 <d_print_mod+0x2d6>
   1d85a:	2600      	movs	r6, #0
   1d85c:	1d20      	adds	r0, r4, #4
   1d85e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d862:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d866:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   1d86a:	4798      	blx	r3
   1d86c:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1d870:	2201      	movs	r2, #1
   1d872:	4631      	mov	r1, r6
   1d874:	1883      	adds	r3, r0, r2
   1d876:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1d87a:	f7ff bb83 	b.w	1cf84 <d_print_mod+0x158>
   1d87e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d882:	2000      	movs	r0, #0
   1d884:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d888:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1d88c:	1d20      	adds	r0, r4, #4
   1d88e:	4798      	blx	r3
   1d890:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1d894:	2101      	movs	r1, #1
   1d896:	2272      	movs	r2, #114	; 0x72
   1d898:	1858      	adds	r0, r3, r1
   1d89a:	7122      	strb	r2, [r4, #4]
   1d89c:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1d8a0:	f7ff bb6f 	b.w	1cf82 <d_print_mod+0x156>
   1d8a4:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d8a8:	2000      	movs	r0, #0
   1d8aa:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d8ae:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1d8b2:	1d20      	adds	r0, r4, #4
   1d8b4:	4798      	blx	r3
   1d8b6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1d8ba:	2101      	movs	r1, #1
   1d8bc:	226f      	movs	r2, #111	; 0x6f
   1d8be:	1858      	adds	r0, r3, r1
   1d8c0:	7122      	strb	r2, [r4, #4]
   1d8c2:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1d8c6:	f7ff bb4f 	b.w	1cf68 <d_print_mod+0x13c>
   1d8ca:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d8ce:	2000      	movs	r0, #0
   1d8d0:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d8d4:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1d8d8:	1d20      	adds	r0, r4, #4
   1d8da:	4798      	blx	r3
   1d8dc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1d8e0:	2101      	movs	r1, #1
   1d8e2:	2274      	movs	r2, #116	; 0x74
   1d8e4:	1858      	adds	r0, r3, r1
   1d8e6:	7122      	strb	r2, [r4, #4]
   1d8e8:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1d8ec:	f7ff bb2f 	b.w	1cf4e <d_print_mod+0x122>
   1d8f0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d8f4:	2000      	movs	r0, #0
   1d8f6:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d8fa:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1d8fe:	1d20      	adds	r0, r4, #4
   1d900:	4798      	blx	r3
   1d902:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1d906:	2101      	movs	r1, #1
   1d908:	2263      	movs	r2, #99	; 0x63
   1d90a:	1858      	adds	r0, r3, r1
   1d90c:	7122      	strb	r2, [r4, #4]
   1d90e:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1d912:	f7ff bb0f 	b.w	1cf34 <d_print_mod+0x108>
   1d916:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d91a:	2000      	movs	r0, #0
   1d91c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d920:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1d924:	1d20      	adds	r0, r4, #4
   1d926:	4798      	blx	r3
   1d928:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1d92c:	2101      	movs	r1, #1
   1d92e:	2265      	movs	r2, #101	; 0x65
   1d930:	1858      	adds	r0, r3, r1
   1d932:	7122      	strb	r2, [r4, #4]
   1d934:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1d938:	f7ff baef 	b.w	1cf1a <d_print_mod+0xee>
   1d93c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d940:	2200      	movs	r2, #0
   1d942:	1d20      	adds	r0, r4, #4
   1d944:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1d948:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d94c:	4798      	blx	r3
   1d94e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1d952:	2101      	movs	r1, #1
   1d954:	2273      	movs	r2, #115	; 0x73
   1d956:	1843      	adds	r3, r0, r1
   1d958:	7122      	strb	r2, [r4, #4]
   1d95a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1d95e:	f7ff bb69 	b.w	1d034 <d_print_mod+0x208>
   1d962:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d966:	2200      	movs	r2, #0
   1d968:	1d20      	adds	r0, r4, #4
   1d96a:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1d96e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d972:	4798      	blx	r3
   1d974:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1d978:	2101      	movs	r1, #1
   1d97a:	2265      	movs	r2, #101	; 0x65
   1d97c:	1843      	adds	r3, r0, r1
   1d97e:	7122      	strb	r2, [r4, #4]
   1d980:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1d984:	f7ff bb49 	b.w	1d01a <d_print_mod+0x1ee>
   1d988:	2500      	movs	r5, #0
   1d98a:	1d20      	adds	r0, r4, #4
   1d98c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d990:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d994:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   1d998:	4798      	blx	r3
   1d99a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1d99e:	2201      	movs	r2, #1
   1d9a0:	4629      	mov	r1, r5
   1d9a2:	1898      	adds	r0, r3, r2
   1d9a4:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1d9a8:	f7ff bbed 	b.w	1d186 <d_print_mod+0x35a>
   1d9ac:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d9b0:	2200      	movs	r2, #0
   1d9b2:	1d20      	adds	r0, r4, #4
   1d9b4:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1d9b8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d9bc:	4798      	blx	r3
   1d9be:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1d9c2:	2101      	movs	r1, #1
   1d9c4:	226c      	movs	r2, #108	; 0x6c
   1d9c6:	1843      	adds	r3, r0, r1
   1d9c8:	7122      	strb	r2, [r4, #4]
   1d9ca:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1d9ce:	f7ff bbd9 	b.w	1d184 <d_print_mod+0x358>
   1d9d2:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d9d6:	2200      	movs	r2, #0
   1d9d8:	1d20      	adds	r0, r4, #4
   1d9da:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1d9de:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d9e2:	4798      	blx	r3
   1d9e4:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1d9e8:	2101      	movs	r1, #1
   1d9ea:	2269      	movs	r2, #105	; 0x69
   1d9ec:	1843      	adds	r3, r0, r1
   1d9ee:	7122      	strb	r2, [r4, #4]
   1d9f0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1d9f4:	f7ff bbb9 	b.w	1d16a <d_print_mod+0x33e>
   1d9f8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d9fc:	2200      	movs	r2, #0
   1d9fe:	1d20      	adds	r0, r4, #4
   1da00:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1da04:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1da08:	4798      	blx	r3
   1da0a:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1da0e:	2101      	movs	r1, #1
   1da10:	2274      	movs	r2, #116	; 0x74
   1da12:	1843      	adds	r3, r0, r1
   1da14:	7122      	strb	r2, [r4, #4]
   1da16:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1da1a:	f7ff bb99 	b.w	1d150 <d_print_mod+0x324>
   1da1e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1da22:	2200      	movs	r2, #0
   1da24:	1d20      	adds	r0, r4, #4
   1da26:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1da2a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1da2e:	4798      	blx	r3
   1da30:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1da34:	2101      	movs	r1, #1
   1da36:	2261      	movs	r2, #97	; 0x61
   1da38:	1843      	adds	r3, r0, r1
   1da3a:	7122      	strb	r2, [r4, #4]
   1da3c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1da40:	f7ff bb79 	b.w	1d136 <d_print_mod+0x30a>
   1da44:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1da48:	2200      	movs	r2, #0
   1da4a:	1d20      	adds	r0, r4, #4
   1da4c:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1da50:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1da54:	4798      	blx	r3
   1da56:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1da5a:	2101      	movs	r1, #1
   1da5c:	226c      	movs	r2, #108	; 0x6c
   1da5e:	1843      	adds	r3, r0, r1
   1da60:	7122      	strb	r2, [r4, #4]
   1da62:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1da66:	f7ff bb59 	b.w	1d11c <d_print_mod+0x2f0>
   1da6a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1da6e:	2000      	movs	r0, #0
   1da70:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1da74:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1da78:	1d20      	adds	r0, r4, #4
   1da7a:	4798      	blx	r3
   1da7c:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1da80:	2101      	movs	r1, #1
   1da82:	2363      	movs	r3, #99	; 0x63
   1da84:	1850      	adds	r0, r2, r1
   1da86:	7123      	strb	r3, [r4, #4]
   1da88:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1da8c:	f7ff bb04 	b.w	1d098 <d_print_mod+0x26c>
   1da90:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1da94:	2200      	movs	r2, #0
   1da96:	1d20      	adds	r0, r4, #4
   1da98:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1da9c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1daa0:	4798      	blx	r3
   1daa2:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1daa6:	2101      	movs	r1, #1
   1daa8:	2269      	movs	r2, #105	; 0x69
   1daaa:	1843      	adds	r3, r0, r1
   1daac:	7122      	strb	r2, [r4, #4]
   1daae:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1dab2:	f7ff bae6 	b.w	1d082 <d_print_mod+0x256>
   1dab6:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1daba:	2200      	movs	r2, #0
   1dabc:	1d20      	adds	r0, r4, #4
   1dabe:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1dac2:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1dac6:	4798      	blx	r3
   1dac8:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1dacc:	2101      	movs	r1, #1
   1dace:	2272      	movs	r2, #114	; 0x72
   1dad0:	1843      	adds	r3, r0, r1
   1dad2:	7122      	strb	r2, [r4, #4]
   1dad4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1dad8:	f7ff bac6 	b.w	1d068 <d_print_mod+0x23c>
   1dadc:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1dae0:	2200      	movs	r2, #0
   1dae2:	1d20      	adds	r0, r4, #4
   1dae4:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1dae8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1daec:	4798      	blx	r3
   1daee:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1daf2:	2101      	movs	r1, #1
   1daf4:	2274      	movs	r2, #116	; 0x74
   1daf6:	1843      	adds	r3, r0, r1
   1daf8:	7122      	strb	r2, [r4, #4]
   1dafa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1dafe:	f7ff baa6 	b.w	1d04e <d_print_mod+0x222>
   1db02:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1db06:	2000      	movs	r0, #0
   1db08:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1db0c:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1db10:	1d20      	adds	r0, r4, #4
   1db12:	4798      	blx	r3
   1db14:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1db18:	2101      	movs	r1, #1
   1db1a:	2373      	movs	r3, #115	; 0x73
   1db1c:	1850      	adds	r0, r2, r1
   1db1e:	7123      	strb	r3, [r4, #4]
   1db20:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1db24:	f7ff bab8 	b.w	1d098 <d_print_mod+0x26c>
   1db28:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1db2c:	2200      	movs	r2, #0
   1db2e:	1d20      	adds	r0, r4, #4
   1db30:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1db34:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1db38:	4798      	blx	r3
   1db3a:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1db3e:	2101      	movs	r1, #1
   1db40:	226e      	movs	r2, #110	; 0x6e
   1db42:	1843      	adds	r3, r0, r1
   1db44:	7122      	strb	r2, [r4, #4]
   1db46:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1db4a:	f7ff bb62 	b.w	1d212 <d_print_mod+0x3e6>
   1db4e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1db52:	2200      	movs	r2, #0
   1db54:	1d20      	adds	r0, r4, #4
   1db56:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1db5a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1db5e:	4798      	blx	r3
   1db60:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1db64:	2101      	movs	r1, #1
   1db66:	226f      	movs	r2, #111	; 0x6f
   1db68:	1843      	adds	r3, r0, r1
   1db6a:	7122      	strb	r2, [r4, #4]
   1db6c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1db70:	f7ff bb42 	b.w	1d1f8 <d_print_mod+0x3cc>
   1db74:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
   1db78:	29ff      	cmp	r1, #255	; 0xff
   1db7a:	f47f ac90 	bne.w	1d49e <d_print_mod+0x672>
   1db7e:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
   1db82:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
   1db86:	3004      	adds	r0, #4
   1db88:	e53c      	b.n	1d604 <d_print_mod+0x7d8>
   1db8a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1db8e:	2200      	movs	r2, #0
   1db90:	1d20      	adds	r0, r4, #4
   1db92:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1db96:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1db9a:	4798      	blx	r3
   1db9c:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1dba0:	2101      	movs	r1, #1
   1dba2:	223a      	movs	r2, #58	; 0x3a
   1dba4:	1843      	adds	r3, r0, r1
   1dba6:	7122      	strb	r2, [r4, #4]
   1dba8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1dbac:	e46a      	b.n	1d484 <d_print_mod+0x658>
   1dbae:	2500      	movs	r5, #0
   1dbb0:	1d20      	adds	r0, r4, #4
   1dbb2:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1dbb6:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1dbba:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   1dbbe:	4798      	blx	r3
   1dbc0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1dbc4:	2201      	movs	r2, #1
   1dbc6:	4629      	mov	r1, r5
   1dbc8:	1898      	adds	r0, r3, r2
   1dbca:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1dbce:	f7ff b9ea 	b.w	1cfa6 <d_print_mod+0x17a>
   1dbd2:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
   1dbd6:	2200      	movs	r2, #0
   1dbd8:	f880 2103 	strb.w	r2, [r0, #259]	; 0x103
   1dbdc:	3004      	adds	r0, #4
   1dbde:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1dbe2:	4798      	blx	r3
   1dbe4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1dbe8:	2101      	movs	r1, #1
   1dbea:	2220      	movs	r2, #32
   1dbec:	1858      	adds	r0, r3, r1
   1dbee:	7122      	strb	r2, [r4, #4]
   1dbf0:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1dbf4:	f7ff bae6 	b.w	1d1c4 <d_print_mod+0x398>
   1dbf8:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
   1dbfc:	2200      	movs	r2, #0
   1dbfe:	f880 2103 	strb.w	r2, [r0, #259]	; 0x103
   1dc02:	3004      	adds	r0, #4
   1dc04:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1dc08:	4798      	blx	r3
   1dc0a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1dc0e:	2101      	movs	r1, #1
   1dc10:	2220      	movs	r2, #32
   1dc12:	1858      	adds	r0, r3, r1
   1dc14:	7122      	strb	r2, [r4, #4]
   1dc16:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1dc1a:	f7ff ba58 	b.w	1d0ce <d_print_mod+0x2a2>
   1dc1e:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
   1dc22:	2200      	movs	r2, #0
   1dc24:	f880 2103 	strb.w	r2, [r0, #259]	; 0x103
   1dc28:	3004      	adds	r0, #4
   1dc2a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1dc2e:	4798      	blx	r3
   1dc30:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1dc34:	2101      	movs	r1, #1
   1dc36:	2220      	movs	r2, #32
   1dc38:	1858      	adds	r0, r3, r1
   1dc3a:	7122      	strb	r2, [r4, #4]
   1dc3c:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1dc40:	f7ff b9d1 	b.w	1cfe6 <d_print_mod+0x1ba>
   1dc44:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
   1dc48:	2600      	movs	r6, #0
   1dc4a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1dc4e:	f880 6103 	strb.w	r6, [r0, #259]	; 0x103
   1dc52:	3004      	adds	r0, #4
   1dc54:	4798      	blx	r3
   1dc56:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1dc5a:	2101      	movs	r1, #1
   1dc5c:	2220      	movs	r2, #32
   1dc5e:	1846      	adds	r6, r0, r1
   1dc60:	7122      	strb	r2, [r4, #4]
   1dc62:	f8c4 6124 	str.w	r6, [r4, #292]	; 0x124
   1dc66:	f7ff b924 	b.w	1ceb2 <d_print_mod+0x86>
   1dc6a:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
   1dc6e:	2200      	movs	r2, #0
   1dc70:	f880 2103 	strb.w	r2, [r0, #259]	; 0x103
   1dc74:	3004      	adds	r0, #4
   1dc76:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1dc7a:	4798      	blx	r3
   1dc7c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1dc80:	2101      	movs	r1, #1
   1dc82:	2263      	movs	r2, #99	; 0x63
   1dc84:	1858      	adds	r0, r3, r1
   1dc86:	7122      	strb	r2, [r4, #4]
   1dc88:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1dc8c:	f7ff bb05 	b.w	1d29a <d_print_mod+0x46e>
   1dc90:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
   1dc94:	2200      	movs	r2, #0
   1dc96:	f880 2103 	strb.w	r2, [r0, #259]	; 0x103
   1dc9a:	3004      	adds	r0, #4
   1dc9c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1dca0:	4798      	blx	r3
   1dca2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1dca6:	2101      	movs	r1, #1
   1dca8:	2269      	movs	r2, #105	; 0x69
   1dcaa:	1858      	adds	r0, r3, r1
   1dcac:	7122      	strb	r2, [r4, #4]
   1dcae:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1dcb2:	f7ff bb59 	b.w	1d368 <d_print_mod+0x53c>
   1dcb6:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
   1dcba:	2200      	movs	r2, #0
   1dcbc:	f880 2103 	strb.w	r2, [r0, #259]	; 0x103
   1dcc0:	3004      	adds	r0, #4
   1dcc2:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1dcc6:	4798      	blx	r3
   1dcc8:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1dccc:	2101      	movs	r1, #1
   1dcce:	2326      	movs	r3, #38	; 0x26
   1dcd0:	1850      	adds	r0, r2, r1
   1dcd2:	7123      	strb	r3, [r4, #4]
   1dcd4:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1dcd8:	f7ff bac4 	b.w	1d264 <d_print_mod+0x438>
   1dcdc:	2600      	movs	r6, #0
   1dcde:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1dce2:	f880 6103 	strb.w	r6, [r0, #259]	; 0x103
   1dce6:	3004      	adds	r0, #4
   1dce8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1dcec:	4798      	blx	r3
   1dcee:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1dcf2:	2001      	movs	r0, #1
   1dcf4:	4631      	mov	r1, r6
   1dcf6:	181a      	adds	r2, r3, r0
   1dcf8:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1dcfc:	f7ff ba93 	b.w	1d226 <d_print_mod+0x3fa>
   1dd00:	2600      	movs	r6, #0
   1dd02:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1dd06:	f880 6103 	strb.w	r6, [r0, #259]	; 0x103
   1dd0a:	3004      	adds	r0, #4
   1dd0c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1dd10:	4798      	blx	r3
   1dd12:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1dd16:	2201      	movs	r2, #1
   1dd18:	4631      	mov	r1, r6
   1dd1a:	1883      	adds	r3, r0, r2
   1dd1c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1dd20:	f7ff bb91 	b.w	1d446 <d_print_mod+0x61a>

0001dd24 <d_print_mod_list>:
   1dd24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dd28:	460e      	mov	r6, r1
   1dd2a:	b08b      	sub	sp, #44	; 0x2c
   1dd2c:	4604      	mov	r4, r0
   1dd2e:	4617      	mov	r7, r2
   1dd30:	b339      	cbz	r1, 1dd82 <d_print_mod_list+0x5e>
   1dd32:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
   1dd36:	bb23      	cbnz	r3, 1dd82 <d_print_mod_list+0x5e>
   1dd38:	f04f 0801 	mov.w	r8, #1
   1dd3c:	e002      	b.n	1dd44 <d_print_mod_list+0x20>
   1dd3e:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
   1dd42:	b9f0      	cbnz	r0, 1dd82 <d_print_mod_list+0x5e>
   1dd44:	68b1      	ldr	r1, [r6, #8]
   1dd46:	b9c9      	cbnz	r1, 1dd7c <d_print_mod_list+0x58>
   1dd48:	6871      	ldr	r1, [r6, #4]
   1dd4a:	b927      	cbnz	r7, 1dd56 <d_print_mod_list+0x32>
   1dd4c:	780b      	ldrb	r3, [r1, #0]
   1dd4e:	3b1a      	subs	r3, #26
   1dd50:	b2da      	uxtb	r2, r3
   1dd52:	2a02      	cmp	r2, #2
   1dd54:	d912      	bls.n	1dd7c <d_print_mod_list+0x58>
   1dd56:	780b      	ldrb	r3, [r1, #0]
   1dd58:	68f0      	ldr	r0, [r6, #12]
   1dd5a:	2b25      	cmp	r3, #37	; 0x25
   1dd5c:	f8c6 8008 	str.w	r8, [r6, #8]
   1dd60:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
   1dd64:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
   1dd68:	d00e      	beq.n	1dd88 <d_print_mod_list+0x64>
   1dd6a:	2b26      	cmp	r3, #38	; 0x26
   1dd6c:	d013      	beq.n	1dd96 <d_print_mod_list+0x72>
   1dd6e:	2b02      	cmp	r3, #2
   1dd70:	d018      	beq.n	1dda4 <d_print_mod_list+0x80>
   1dd72:	4620      	mov	r0, r4
   1dd74:	f7ff f85a 	bl	1ce2c <d_print_mod>
   1dd78:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
   1dd7c:	6836      	ldr	r6, [r6, #0]
   1dd7e:	2e00      	cmp	r6, #0
   1dd80:	d1dd      	bne.n	1dd3e <d_print_mod_list+0x1a>
   1dd82:	b00b      	add	sp, #44	; 0x2c
   1dd84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd88:	4620      	mov	r0, r4
   1dd8a:	6832      	ldr	r2, [r6, #0]
   1dd8c:	f000 fbf6 	bl	1e57c <d_print_function_type>
   1dd90:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
   1dd94:	e7f5      	b.n	1dd82 <d_print_mod_list+0x5e>
   1dd96:	4620      	mov	r0, r4
   1dd98:	6832      	ldr	r2, [r6, #0]
   1dd9a:	f000 fb01 	bl	1e3a0 <d_print_array_type>
   1dd9e:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
   1dda2:	e7ee      	b.n	1dd82 <d_print_mod_list+0x5e>
   1dda4:	f8d4 9118 	ldr.w	r9, [r4, #280]	; 0x118
   1dda8:	2700      	movs	r7, #0
   1ddaa:	4620      	mov	r0, r4
   1ddac:	f8c4 7118 	str.w	r7, [r4, #280]	; 0x118
   1ddb0:	6849      	ldr	r1, [r1, #4]
   1ddb2:	f7f9 fa01 	bl	171b8 <d_print_comp>
   1ddb6:	6822      	ldr	r2, [r4, #0]
   1ddb8:	f8c4 9118 	str.w	r9, [r4, #280]	; 0x118
   1ddbc:	f012 0804 	ands.w	r8, r2, #4
   1ddc0:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1ddc4:	d118      	bne.n	1ddf8 <d_print_mod_list+0xd4>
   1ddc6:	29ff      	cmp	r1, #255	; 0xff
   1ddc8:	d043      	beq.n	1de52 <d_print_mod_list+0x12e>
   1ddca:	eb04 0c01 	add.w	ip, r4, r1
   1ddce:	3101      	adds	r1, #1
   1ddd0:	233a      	movs	r3, #58	; 0x3a
   1ddd2:	29ff      	cmp	r1, #255	; 0xff
   1ddd4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1ddd8:	f88c 3004 	strb.w	r3, [ip, #4]
   1dddc:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1dde0:	d027      	beq.n	1de32 <d_print_mod_list+0x10e>
   1dde2:	1c4a      	adds	r2, r1, #1
   1dde4:	eb04 0e01 	add.w	lr, r4, r1
   1dde8:	203a      	movs	r0, #58	; 0x3a
   1ddea:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1ddee:	f88e 0004 	strb.w	r0, [lr, #4]
   1ddf2:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1ddf6:	e009      	b.n	1de0c <d_print_mod_list+0xe8>
   1ddf8:	1c4a      	adds	r2, r1, #1
   1ddfa:	29ff      	cmp	r1, #255	; 0xff
   1ddfc:	d03a      	beq.n	1de74 <d_print_mod_list+0x150>
   1ddfe:	1861      	adds	r1, r4, r1
   1de00:	202e      	movs	r0, #46	; 0x2e
   1de02:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1de06:	7108      	strb	r0, [r1, #4]
   1de08:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1de0c:	6876      	ldr	r6, [r6, #4]
   1de0e:	68b6      	ldr	r6, [r6, #8]
   1de10:	7833      	ldrb	r3, [r6, #0]
   1de12:	2b3f      	cmp	r3, #63	; 0x3f
   1de14:	d102      	bne.n	1de1c <d_print_mod_list+0xf8>
   1de16:	e03d      	b.n	1de94 <d_print_mod_list+0x170>
   1de18:	6876      	ldr	r6, [r6, #4]
   1de1a:	7833      	ldrb	r3, [r6, #0]
   1de1c:	3b1a      	subs	r3, #26
   1de1e:	b2da      	uxtb	r2, r3
   1de20:	2a02      	cmp	r2, #2
   1de22:	d9f9      	bls.n	1de18 <d_print_mod_list+0xf4>
   1de24:	4620      	mov	r0, r4
   1de26:	4631      	mov	r1, r6
   1de28:	f7f9 f9c6 	bl	171b8 <d_print_comp>
   1de2c:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
   1de30:	e7a7      	b.n	1dd82 <d_print_mod_list+0x5e>
   1de32:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1de36:	1d20      	adds	r0, r4, #4
   1de38:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1de3c:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
   1de40:	4798      	blx	r3
   1de42:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1de46:	2201      	movs	r2, #1
   1de48:	4641      	mov	r1, r8
   1de4a:	1898      	adds	r0, r3, r2
   1de4c:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1de50:	e7c8      	b.n	1dde4 <d_print_mod_list+0xc0>
   1de52:	1d20      	adds	r0, r4, #4
   1de54:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1de58:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1de5c:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
   1de60:	4798      	blx	r3
   1de62:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1de66:	2101      	movs	r1, #1
   1de68:	223a      	movs	r2, #58	; 0x3a
   1de6a:	1858      	adds	r0, r3, r1
   1de6c:	7122      	strb	r2, [r4, #4]
   1de6e:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1de72:	e7b6      	b.n	1dde2 <d_print_mod_list+0xbe>
   1de74:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1de78:	1d20      	adds	r0, r4, #4
   1de7a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1de7e:	f884 7103 	strb.w	r7, [r4, #259]	; 0x103
   1de82:	4798      	blx	r3
   1de84:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1de88:	2201      	movs	r2, #1
   1de8a:	4639      	mov	r1, r7
   1de8c:	1883      	adds	r3, r0, r2
   1de8e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1de92:	e7b4      	b.n	1ddfe <d_print_mod_list+0xda>
   1de94:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1de98:	29ff      	cmp	r1, #255	; 0xff
   1de9a:	f000 826e 	beq.w	1e37a <d_print_mod_list+0x656>
   1de9e:	eb04 0901 	add.w	r9, r4, r1
   1dea2:	3101      	adds	r1, #1
   1dea4:	237b      	movs	r3, #123	; 0x7b
   1dea6:	29ff      	cmp	r1, #255	; 0xff
   1dea8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1deac:	f889 3004 	strb.w	r3, [r9, #4]
   1deb0:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1deb4:	f000 824f 	beq.w	1e356 <d_print_mod_list+0x632>
   1deb8:	eb04 0a01 	add.w	sl, r4, r1
   1debc:	3101      	adds	r1, #1
   1debe:	2364      	movs	r3, #100	; 0x64
   1dec0:	29ff      	cmp	r1, #255	; 0xff
   1dec2:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1dec6:	f88a 3004 	strb.w	r3, [sl, #4]
   1deca:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1dece:	f000 8230 	beq.w	1e332 <d_print_mod_list+0x60e>
   1ded2:	eb04 0c01 	add.w	ip, r4, r1
   1ded6:	3101      	adds	r1, #1
   1ded8:	2365      	movs	r3, #101	; 0x65
   1deda:	29ff      	cmp	r1, #255	; 0xff
   1dedc:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1dee0:	f88c 3004 	strb.w	r3, [ip, #4]
   1dee4:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1dee8:	f000 8211 	beq.w	1e30e <d_print_mod_list+0x5ea>
   1deec:	eb04 0e01 	add.w	lr, r4, r1
   1def0:	3101      	adds	r1, #1
   1def2:	2366      	movs	r3, #102	; 0x66
   1def4:	29ff      	cmp	r1, #255	; 0xff
   1def6:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1defa:	f88e 3004 	strb.w	r3, [lr, #4]
   1defe:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1df02:	f000 81f2 	beq.w	1e2ea <d_print_mod_list+0x5c6>
   1df06:	eb04 0901 	add.w	r9, r4, r1
   1df0a:	3101      	adds	r1, #1
   1df0c:	2361      	movs	r3, #97	; 0x61
   1df0e:	29ff      	cmp	r1, #255	; 0xff
   1df10:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1df14:	f889 3004 	strb.w	r3, [r9, #4]
   1df18:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1df1c:	f000 81d3 	beq.w	1e2c6 <d_print_mod_list+0x5a2>
   1df20:	eb04 0a01 	add.w	sl, r4, r1
   1df24:	3101      	adds	r1, #1
   1df26:	2375      	movs	r3, #117	; 0x75
   1df28:	29ff      	cmp	r1, #255	; 0xff
   1df2a:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1df2e:	f88a 3004 	strb.w	r3, [sl, #4]
   1df32:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1df36:	f000 81b4 	beq.w	1e2a2 <d_print_mod_list+0x57e>
   1df3a:	eb04 0c01 	add.w	ip, r4, r1
   1df3e:	3101      	adds	r1, #1
   1df40:	236c      	movs	r3, #108	; 0x6c
   1df42:	29ff      	cmp	r1, #255	; 0xff
   1df44:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1df48:	f88c 3004 	strb.w	r3, [ip, #4]
   1df4c:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1df50:	f000 8195 	beq.w	1e27e <d_print_mod_list+0x55a>
   1df54:	eb04 0e01 	add.w	lr, r4, r1
   1df58:	3101      	adds	r1, #1
   1df5a:	2374      	movs	r3, #116	; 0x74
   1df5c:	29ff      	cmp	r1, #255	; 0xff
   1df5e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1df62:	f88e 3004 	strb.w	r3, [lr, #4]
   1df66:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1df6a:	f000 8176 	beq.w	1e25a <d_print_mod_list+0x536>
   1df6e:	eb04 0901 	add.w	r9, r4, r1
   1df72:	3101      	adds	r1, #1
   1df74:	2320      	movs	r3, #32
   1df76:	29ff      	cmp	r1, #255	; 0xff
   1df78:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1df7c:	f889 3004 	strb.w	r3, [r9, #4]
   1df80:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1df84:	f000 8157 	beq.w	1e236 <d_print_mod_list+0x512>
   1df88:	eb04 0a01 	add.w	sl, r4, r1
   1df8c:	3101      	adds	r1, #1
   1df8e:	2361      	movs	r3, #97	; 0x61
   1df90:	29ff      	cmp	r1, #255	; 0xff
   1df92:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1df96:	f88a 3004 	strb.w	r3, [sl, #4]
   1df9a:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1df9e:	f000 8138 	beq.w	1e212 <d_print_mod_list+0x4ee>
   1dfa2:	eb04 0c01 	add.w	ip, r4, r1
   1dfa6:	3101      	adds	r1, #1
   1dfa8:	2372      	movs	r3, #114	; 0x72
   1dfaa:	29ff      	cmp	r1, #255	; 0xff
   1dfac:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1dfb0:	f88c 3004 	strb.w	r3, [ip, #4]
   1dfb4:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1dfb8:	f000 8119 	beq.w	1e1ee <d_print_mod_list+0x4ca>
   1dfbc:	eb04 0e01 	add.w	lr, r4, r1
   1dfc0:	3101      	adds	r1, #1
   1dfc2:	2367      	movs	r3, #103	; 0x67
   1dfc4:	29ff      	cmp	r1, #255	; 0xff
   1dfc6:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1dfca:	f88e 3004 	strb.w	r3, [lr, #4]
   1dfce:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1dfd2:	d06f      	beq.n	1e0b4 <d_print_mod_list+0x390>
   1dfd4:	1c4a      	adds	r2, r1, #1
   1dfd6:	1861      	adds	r1, r4, r1
   1dfd8:	2023      	movs	r0, #35	; 0x23
   1dfda:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1dfde:	f10d 090c 	add.w	r9, sp, #12
   1dfe2:	7108      	strb	r0, [r1, #4]
   1dfe4:	f64c 1150 	movw	r1, #51536	; 0xc950
   1dfe8:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1dfec:	f2c0 0102 	movt	r1, #2
   1dff0:	68b2      	ldr	r2, [r6, #8]
   1dff2:	4648      	mov	r0, r9
   1dff4:	3201      	adds	r2, #1
   1dff6:	f002 ffc1 	bl	20f7c <sprintf>
   1dffa:	4648      	mov	r0, r9
   1dffc:	f003 f9ce 	bl	2139c <strlen>
   1e000:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1e004:	4682      	mov	sl, r0
   1e006:	2800      	cmp	r0, #0
   1e008:	d065      	beq.n	1e0d6 <d_print_mod_list+0x3b2>
   1e00a:	1e43      	subs	r3, r0, #1
   1e00c:	1d22      	adds	r2, r4, #4
   1e00e:	29ff      	cmp	r1, #255	; 0xff
   1e010:	f003 0701 	and.w	r7, r3, #1
   1e014:	f04f 0b00 	mov.w	fp, #0
   1e018:	e88d 0084 	stmia.w	sp, {r2, r7}
   1e01c:	f899 8000 	ldrb.w	r8, [r9]
   1e020:	f000 80d5 	beq.w	1e1ce <d_print_mod_list+0x4aa>
   1e024:	460b      	mov	r3, r1
   1e026:	3101      	adds	r1, #1
   1e028:	2701      	movs	r7, #1
   1e02a:	eb04 0c03 	add.w	ip, r4, r3
   1e02e:	4557      	cmp	r7, sl
   1e030:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1e034:	f88c 8004 	strb.w	r8, [ip, #4]
   1e038:	f884 8108 	strb.w	r8, [r4, #264]	; 0x108
   1e03c:	d04b      	beq.n	1e0d6 <d_print_mod_list+0x3b2>
   1e03e:	9801      	ldr	r0, [sp, #4]
   1e040:	b188      	cbz	r0, 1e066 <d_print_mod_list+0x342>
   1e042:	29ff      	cmp	r1, #255	; 0xff
   1e044:	f819 8007 	ldrb.w	r8, [r9, r7]
   1e048:	f000 809f 	beq.w	1e18a <d_print_mod_list+0x466>
   1e04c:	460b      	mov	r3, r1
   1e04e:	3101      	adds	r1, #1
   1e050:	3701      	adds	r7, #1
   1e052:	eb04 0e03 	add.w	lr, r4, r3
   1e056:	4557      	cmp	r7, sl
   1e058:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1e05c:	f88e 8004 	strb.w	r8, [lr, #4]
   1e060:	f884 8108 	strb.w	r8, [r4, #264]	; 0x108
   1e064:	d037      	beq.n	1e0d6 <d_print_mod_list+0x3b2>
   1e066:	29ff      	cmp	r1, #255	; 0xff
   1e068:	460b      	mov	r3, r1
   1e06a:	f819 8007 	ldrb.w	r8, [r9, r7]
   1e06e:	f101 0201 	add.w	r2, r1, #1
   1e072:	d068      	beq.n	1e146 <d_print_mod_list+0x422>
   1e074:	eb04 0c03 	add.w	ip, r4, r3
   1e078:	3701      	adds	r7, #1
   1e07a:	1c51      	adds	r1, r2, #1
   1e07c:	2aff      	cmp	r2, #255	; 0xff
   1e07e:	f88c 8004 	strb.w	r8, [ip, #4]
   1e082:	4613      	mov	r3, r2
   1e084:	f884 8108 	strb.w	r8, [r4, #264]	; 0x108
   1e088:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1e08c:	f819 8007 	ldrb.w	r8, [r9, r7]
   1e090:	d1de      	bne.n	1e050 <d_print_mod_list+0x32c>
   1e092:	4611      	mov	r1, r2
   1e094:	9800      	ldr	r0, [sp, #0]
   1e096:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1e09a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1e09e:	f884 b103 	strb.w	fp, [r4, #259]	; 0x103
   1e0a2:	4798      	blx	r3
   1e0a4:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1e0a8:	2101      	movs	r1, #1
   1e0aa:	2300      	movs	r3, #0
   1e0ac:	1842      	adds	r2, r0, r1
   1e0ae:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1e0b2:	e7cd      	b.n	1e050 <d_print_mod_list+0x32c>
   1e0b4:	2700      	movs	r7, #0
   1e0b6:	1d20      	adds	r0, r4, #4
   1e0b8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1e0bc:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1e0c0:	f884 7103 	strb.w	r7, [r4, #259]	; 0x103
   1e0c4:	4798      	blx	r3
   1e0c6:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1e0ca:	2201      	movs	r2, #1
   1e0cc:	4639      	mov	r1, r7
   1e0ce:	1883      	adds	r3, r0, r2
   1e0d0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1e0d4:	e77f      	b.n	1dfd6 <d_print_mod_list+0x2b2>
   1e0d6:	29ff      	cmp	r1, #255	; 0xff
   1e0d8:	d067      	beq.n	1e1aa <d_print_mod_list+0x486>
   1e0da:	eb04 0c01 	add.w	ip, r4, r1
   1e0de:	3101      	adds	r1, #1
   1e0e0:	237d      	movs	r3, #125	; 0x7d
   1e0e2:	29ff      	cmp	r1, #255	; 0xff
   1e0e4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1e0e8:	f88c 3004 	strb.w	r3, [ip, #4]
   1e0ec:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1e0f0:	d039      	beq.n	1e166 <d_print_mod_list+0x442>
   1e0f2:	eb04 0e01 	add.w	lr, r4, r1
   1e0f6:	3101      	adds	r1, #1
   1e0f8:	233a      	movs	r3, #58	; 0x3a
   1e0fa:	29ff      	cmp	r1, #255	; 0xff
   1e0fc:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1e100:	f88e 3004 	strb.w	r3, [lr, #4]
   1e104:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1e108:	d00c      	beq.n	1e124 <d_print_mod_list+0x400>
   1e10a:	1c4a      	adds	r2, r1, #1
   1e10c:	eb04 0e01 	add.w	lr, r4, r1
   1e110:	203a      	movs	r0, #58	; 0x3a
   1e112:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1e116:	f88e 0004 	strb.w	r0, [lr, #4]
   1e11a:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1e11e:	6876      	ldr	r6, [r6, #4]
   1e120:	7833      	ldrb	r3, [r6, #0]
   1e122:	e67b      	b.n	1de1c <d_print_mod_list+0xf8>
   1e124:	2700      	movs	r7, #0
   1e126:	1d20      	adds	r0, r4, #4
   1e128:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1e12c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1e130:	f884 7103 	strb.w	r7, [r4, #259]	; 0x103
   1e134:	4798      	blx	r3
   1e136:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1e13a:	2201      	movs	r2, #1
   1e13c:	4639      	mov	r1, r7
   1e13e:	1898      	adds	r0, r3, r2
   1e140:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1e144:	e7e2      	b.n	1e10c <d_print_mod_list+0x3e8>
   1e146:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1e14a:	9800      	ldr	r0, [sp, #0]
   1e14c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1e150:	f884 b103 	strb.w	fp, [r4, #259]	; 0x103
   1e154:	4798      	blx	r3
   1e156:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
   1e15a:	2201      	movs	r2, #1
   1e15c:	2300      	movs	r3, #0
   1e15e:	1888      	adds	r0, r1, r2
   1e160:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1e164:	e786      	b.n	1e074 <d_print_mod_list+0x350>
   1e166:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1e16a:	2000      	movs	r0, #0
   1e16c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1e170:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1e174:	1d20      	adds	r0, r4, #4
   1e176:	4798      	blx	r3
   1e178:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1e17c:	2101      	movs	r1, #1
   1e17e:	223a      	movs	r2, #58	; 0x3a
   1e180:	1858      	adds	r0, r3, r1
   1e182:	7122      	strb	r2, [r4, #4]
   1e184:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1e188:	e7bf      	b.n	1e10a <d_print_mod_list+0x3e6>
   1e18a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1e18e:	9800      	ldr	r0, [sp, #0]
   1e190:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1e194:	f884 b103 	strb.w	fp, [r4, #259]	; 0x103
   1e198:	4798      	blx	r3
   1e19a:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1e19e:	4639      	mov	r1, r7
   1e1a0:	2300      	movs	r3, #0
   1e1a2:	19c2      	adds	r2, r0, r7
   1e1a4:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1e1a8:	e752      	b.n	1e050 <d_print_mod_list+0x32c>
   1e1aa:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1e1ae:	2000      	movs	r0, #0
   1e1b0:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1e1b4:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1e1b8:	1d20      	adds	r0, r4, #4
   1e1ba:	4798      	blx	r3
   1e1bc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1e1c0:	2101      	movs	r1, #1
   1e1c2:	227d      	movs	r2, #125	; 0x7d
   1e1c4:	1858      	adds	r0, r3, r1
   1e1c6:	7122      	strb	r2, [r4, #4]
   1e1c8:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1e1cc:	e791      	b.n	1e0f2 <d_print_mod_list+0x3ce>
   1e1ce:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1e1d2:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1e1d6:	f884 b103 	strb.w	fp, [r4, #259]	; 0x103
   1e1da:	9800      	ldr	r0, [sp, #0]
   1e1dc:	4798      	blx	r3
   1e1de:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1e1e2:	2101      	movs	r1, #1
   1e1e4:	465b      	mov	r3, fp
   1e1e6:	1857      	adds	r7, r2, r1
   1e1e8:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
   1e1ec:	e71c      	b.n	1e028 <d_print_mod_list+0x304>
   1e1ee:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1e1f2:	2000      	movs	r0, #0
   1e1f4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1e1f8:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1e1fc:	1d20      	adds	r0, r4, #4
   1e1fe:	4798      	blx	r3
   1e200:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1e204:	2101      	movs	r1, #1
   1e206:	2267      	movs	r2, #103	; 0x67
   1e208:	1858      	adds	r0, r3, r1
   1e20a:	7122      	strb	r2, [r4, #4]
   1e20c:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1e210:	e6e0      	b.n	1dfd4 <d_print_mod_list+0x2b0>
   1e212:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1e216:	2000      	movs	r0, #0
   1e218:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1e21c:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1e220:	1d20      	adds	r0, r4, #4
   1e222:	4798      	blx	r3
   1e224:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1e228:	2101      	movs	r1, #1
   1e22a:	2272      	movs	r2, #114	; 0x72
   1e22c:	1858      	adds	r0, r3, r1
   1e22e:	7122      	strb	r2, [r4, #4]
   1e230:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1e234:	e6c2      	b.n	1dfbc <d_print_mod_list+0x298>
   1e236:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1e23a:	2000      	movs	r0, #0
   1e23c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1e240:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1e244:	1d20      	adds	r0, r4, #4
   1e246:	4798      	blx	r3
   1e248:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1e24c:	2101      	movs	r1, #1
   1e24e:	2261      	movs	r2, #97	; 0x61
   1e250:	1858      	adds	r0, r3, r1
   1e252:	7122      	strb	r2, [r4, #4]
   1e254:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1e258:	e6a3      	b.n	1dfa2 <d_print_mod_list+0x27e>
   1e25a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1e25e:	2000      	movs	r0, #0
   1e260:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1e264:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1e268:	1d20      	adds	r0, r4, #4
   1e26a:	4798      	blx	r3
   1e26c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1e270:	2101      	movs	r1, #1
   1e272:	2220      	movs	r2, #32
   1e274:	1858      	adds	r0, r3, r1
   1e276:	7122      	strb	r2, [r4, #4]
   1e278:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1e27c:	e684      	b.n	1df88 <d_print_mod_list+0x264>
   1e27e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1e282:	2000      	movs	r0, #0
   1e284:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1e288:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1e28c:	1d20      	adds	r0, r4, #4
   1e28e:	4798      	blx	r3
   1e290:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1e294:	2101      	movs	r1, #1
   1e296:	2274      	movs	r2, #116	; 0x74
   1e298:	1858      	adds	r0, r3, r1
   1e29a:	7122      	strb	r2, [r4, #4]
   1e29c:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1e2a0:	e665      	b.n	1df6e <d_print_mod_list+0x24a>
   1e2a2:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1e2a6:	2000      	movs	r0, #0
   1e2a8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1e2ac:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1e2b0:	1d20      	adds	r0, r4, #4
   1e2b2:	4798      	blx	r3
   1e2b4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1e2b8:	2101      	movs	r1, #1
   1e2ba:	226c      	movs	r2, #108	; 0x6c
   1e2bc:	1858      	adds	r0, r3, r1
   1e2be:	7122      	strb	r2, [r4, #4]
   1e2c0:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1e2c4:	e646      	b.n	1df54 <d_print_mod_list+0x230>
   1e2c6:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1e2ca:	2000      	movs	r0, #0
   1e2cc:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1e2d0:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1e2d4:	1d20      	adds	r0, r4, #4
   1e2d6:	4798      	blx	r3
   1e2d8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1e2dc:	2101      	movs	r1, #1
   1e2de:	2275      	movs	r2, #117	; 0x75
   1e2e0:	1858      	adds	r0, r3, r1
   1e2e2:	7122      	strb	r2, [r4, #4]
   1e2e4:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1e2e8:	e627      	b.n	1df3a <d_print_mod_list+0x216>
   1e2ea:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1e2ee:	2000      	movs	r0, #0
   1e2f0:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1e2f4:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1e2f8:	1d20      	adds	r0, r4, #4
   1e2fa:	4798      	blx	r3
   1e2fc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1e300:	2101      	movs	r1, #1
   1e302:	2261      	movs	r2, #97	; 0x61
   1e304:	1858      	adds	r0, r3, r1
   1e306:	7122      	strb	r2, [r4, #4]
   1e308:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1e30c:	e608      	b.n	1df20 <d_print_mod_list+0x1fc>
   1e30e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1e312:	2000      	movs	r0, #0
   1e314:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1e318:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1e31c:	1d20      	adds	r0, r4, #4
   1e31e:	4798      	blx	r3
   1e320:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1e324:	2101      	movs	r1, #1
   1e326:	2266      	movs	r2, #102	; 0x66
   1e328:	1858      	adds	r0, r3, r1
   1e32a:	7122      	strb	r2, [r4, #4]
   1e32c:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1e330:	e5e9      	b.n	1df06 <d_print_mod_list+0x1e2>
   1e332:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1e336:	2000      	movs	r0, #0
   1e338:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1e33c:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1e340:	1d20      	adds	r0, r4, #4
   1e342:	4798      	blx	r3
   1e344:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1e348:	2101      	movs	r1, #1
   1e34a:	2265      	movs	r2, #101	; 0x65
   1e34c:	1858      	adds	r0, r3, r1
   1e34e:	7122      	strb	r2, [r4, #4]
   1e350:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1e354:	e5ca      	b.n	1deec <d_print_mod_list+0x1c8>
   1e356:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1e35a:	2000      	movs	r0, #0
   1e35c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1e360:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1e364:	1d20      	adds	r0, r4, #4
   1e366:	4798      	blx	r3
   1e368:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1e36c:	2101      	movs	r1, #1
   1e36e:	2264      	movs	r2, #100	; 0x64
   1e370:	1858      	adds	r0, r3, r1
   1e372:	7122      	strb	r2, [r4, #4]
   1e374:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1e378:	e5ab      	b.n	1ded2 <d_print_mod_list+0x1ae>
   1e37a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1e37e:	2000      	movs	r0, #0
   1e380:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1e384:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1e388:	1d20      	adds	r0, r4, #4
   1e38a:	4798      	blx	r3
   1e38c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1e390:	2101      	movs	r1, #1
   1e392:	227b      	movs	r2, #123	; 0x7b
   1e394:	1858      	adds	r0, r3, r1
   1e396:	7122      	strb	r2, [r4, #4]
   1e398:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1e39c:	e58c      	b.n	1deb8 <d_print_mod_list+0x194>
   1e39e:	bf00      	nop

0001e3a0 <d_print_array_type>:
   1e3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e3a2:	4615      	mov	r5, r2
   1e3a4:	4604      	mov	r4, r0
   1e3a6:	460e      	mov	r6, r1
   1e3a8:	b91a      	cbnz	r2, 1e3b2 <d_print_array_type+0x12>
   1e3aa:	e0a6      	b.n	1e4fa <d_print_array_type+0x15a>
   1e3ac:	6812      	ldr	r2, [r2, #0]
   1e3ae:	2a00      	cmp	r2, #0
   1e3b0:	d05f      	beq.n	1e472 <d_print_array_type+0xd2>
   1e3b2:	6893      	ldr	r3, [r2, #8]
   1e3b4:	2b00      	cmp	r3, #0
   1e3b6:	d1f9      	bne.n	1e3ac <d_print_array_type+0xc>
   1e3b8:	6851      	ldr	r1, [r2, #4]
   1e3ba:	7808      	ldrb	r0, [r1, #0]
   1e3bc:	2826      	cmp	r0, #38	; 0x26
   1e3be:	f000 809f 	beq.w	1e500 <d_print_array_type+0x160>
   1e3c2:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1e3c6:	29ff      	cmp	r1, #255	; 0xff
   1e3c8:	f000 80a2 	beq.w	1e510 <d_print_array_type+0x170>
   1e3cc:	1862      	adds	r2, r4, r1
   1e3ce:	3101      	adds	r1, #1
   1e3d0:	2320      	movs	r3, #32
   1e3d2:	29ff      	cmp	r1, #255	; 0xff
   1e3d4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1e3d8:	7113      	strb	r3, [r2, #4]
   1e3da:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1e3de:	d04f      	beq.n	1e480 <d_print_array_type+0xe0>
   1e3e0:	1c4a      	adds	r2, r1, #1
   1e3e2:	eb04 0c01 	add.w	ip, r4, r1
   1e3e6:	2328      	movs	r3, #40	; 0x28
   1e3e8:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1e3ec:	4629      	mov	r1, r5
   1e3ee:	f88c 3004 	strb.w	r3, [ip, #4]
   1e3f2:	2200      	movs	r2, #0
   1e3f4:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1e3f8:	4620      	mov	r0, r4
   1e3fa:	f7ff fc93 	bl	1dd24 <d_print_mod_list>
   1e3fe:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1e402:	1c4b      	adds	r3, r1, #1
   1e404:	29ff      	cmp	r1, #255	; 0xff
   1e406:	f000 80a7 	beq.w	1e558 <d_print_array_type+0x1b8>
   1e40a:	eb04 0e01 	add.w	lr, r4, r1
   1e40e:	2229      	movs	r2, #41	; 0x29
   1e410:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1e414:	f88e 2004 	strb.w	r2, [lr, #4]
   1e418:	f884 2108 	strb.w	r2, [r4, #264]	; 0x108
   1e41c:	1c59      	adds	r1, r3, #1
   1e41e:	2bff      	cmp	r3, #255	; 0xff
   1e420:	f000 8088 	beq.w	1e534 <d_print_array_type+0x194>
   1e424:	eb04 0c03 	add.w	ip, r4, r3
   1e428:	2020      	movs	r0, #32
   1e42a:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1e42e:	f88c 0004 	strb.w	r0, [ip, #4]
   1e432:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1e436:	1c4b      	adds	r3, r1, #1
   1e438:	29ff      	cmp	r1, #255	; 0xff
   1e43a:	d04d      	beq.n	1e4d8 <d_print_array_type+0x138>
   1e43c:	1861      	adds	r1, r4, r1
   1e43e:	225b      	movs	r2, #91	; 0x5b
   1e440:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1e444:	710a      	strb	r2, [r1, #4]
   1e446:	f884 2108 	strb.w	r2, [r4, #264]	; 0x108
   1e44a:	6871      	ldr	r1, [r6, #4]
   1e44c:	b121      	cbz	r1, 1e458 <d_print_array_type+0xb8>
   1e44e:	4620      	mov	r0, r4
   1e450:	f7f8 feb2 	bl	171b8 <d_print_comp>
   1e454:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1e458:	1c59      	adds	r1, r3, #1
   1e45a:	2bff      	cmp	r3, #255	; 0xff
   1e45c:	d021      	beq.n	1e4a2 <d_print_array_type+0x102>
   1e45e:	eb04 0c03 	add.w	ip, r4, r3
   1e462:	205d      	movs	r0, #93	; 0x5d
   1e464:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1e468:	f88c 0004 	strb.w	r0, [ip, #4]
   1e46c:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1e470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e472:	4620      	mov	r0, r4
   1e474:	4629      	mov	r1, r5
   1e476:	f7ff fc55 	bl	1dd24 <d_print_mod_list>
   1e47a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1e47e:	e7cd      	b.n	1e41c <d_print_array_type+0x7c>
   1e480:	2700      	movs	r7, #0
   1e482:	1d20      	adds	r0, r4, #4
   1e484:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1e488:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1e48c:	f884 7103 	strb.w	r7, [r4, #259]	; 0x103
   1e490:	4798      	blx	r3
   1e492:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1e496:	2201      	movs	r2, #1
   1e498:	4639      	mov	r1, r7
   1e49a:	1883      	adds	r3, r0, r2
   1e49c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1e4a0:	e79f      	b.n	1e3e2 <d_print_array_type+0x42>
   1e4a2:	4619      	mov	r1, r3
   1e4a4:	2500      	movs	r5, #0
   1e4a6:	1d20      	adds	r0, r4, #4
   1e4a8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1e4ac:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1e4b0:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   1e4b4:	4798      	blx	r3
   1e4b6:	462b      	mov	r3, r5
   1e4b8:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1e4bc:	eb04 0c03 	add.w	ip, r4, r3
   1e4c0:	2101      	movs	r1, #1
   1e4c2:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1e4c6:	1850      	adds	r0, r2, r1
   1e4c8:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1e4cc:	205d      	movs	r0, #93	; 0x5d
   1e4ce:	f88c 0004 	strb.w	r0, [ip, #4]
   1e4d2:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1e4d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e4d8:	2500      	movs	r5, #0
   1e4da:	1d20      	adds	r0, r4, #4
   1e4dc:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1e4e0:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1e4e4:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   1e4e8:	4798      	blx	r3
   1e4ea:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1e4ee:	2301      	movs	r3, #1
   1e4f0:	4629      	mov	r1, r5
   1e4f2:	18c2      	adds	r2, r0, r3
   1e4f4:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1e4f8:	e7a0      	b.n	1e43c <d_print_array_type+0x9c>
   1e4fa:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
   1e4fe:	e78d      	b.n	1e41c <d_print_array_type+0x7c>
   1e500:	4629      	mov	r1, r5
   1e502:	4620      	mov	r0, r4
   1e504:	2200      	movs	r2, #0
   1e506:	f7ff fc0d 	bl	1dd24 <d_print_mod_list>
   1e50a:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1e50e:	e792      	b.n	1e436 <d_print_array_type+0x96>
   1e510:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1e514:	2000      	movs	r0, #0
   1e516:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1e51a:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1e51e:	1d20      	adds	r0, r4, #4
   1e520:	4798      	blx	r3
   1e522:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1e526:	2101      	movs	r1, #1
   1e528:	2320      	movs	r3, #32
   1e52a:	1850      	adds	r0, r2, r1
   1e52c:	7123      	strb	r3, [r4, #4]
   1e52e:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1e532:	e755      	b.n	1e3e0 <d_print_array_type+0x40>
   1e534:	4619      	mov	r1, r3
   1e536:	2500      	movs	r5, #0
   1e538:	1d20      	adds	r0, r4, #4
   1e53a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1e53e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1e542:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   1e546:	4798      	blx	r3
   1e548:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1e54c:	2101      	movs	r1, #1
   1e54e:	462b      	mov	r3, r5
   1e550:	1850      	adds	r0, r2, r1
   1e552:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1e556:	e765      	b.n	1e424 <d_print_array_type+0x84>
   1e558:	2500      	movs	r5, #0
   1e55a:	1d20      	adds	r0, r4, #4
   1e55c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1e560:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1e564:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   1e568:	4798      	blx	r3
   1e56a:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1e56e:	2301      	movs	r3, #1
   1e570:	4629      	mov	r1, r5
   1e572:	18c2      	adds	r2, r0, r3
   1e574:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1e578:	e747      	b.n	1e40a <d_print_array_type+0x6a>
   1e57a:	bf00      	nop

0001e57c <d_print_function_type>:
   1e57c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e580:	4615      	mov	r5, r2
   1e582:	4604      	mov	r4, r0
   1e584:	460e      	mov	r6, r1
   1e586:	2a00      	cmp	r2, #0
   1e588:	d05f      	beq.n	1e64a <d_print_function_type+0xce>
   1e58a:	6893      	ldr	r3, [r2, #8]
   1e58c:	2b00      	cmp	r3, #0
   1e58e:	d15c      	bne.n	1e64a <d_print_function_type+0xce>
   1e590:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1e594:	4613      	mov	r3, r2
   1e596:	f2ce 2030 	movt	r0, #57904	; 0xe230
   1e59a:	f04f 77e0 	mov.w	r7, #29360128	; 0x1c00000
   1e59e:	6859      	ldr	r1, [r3, #4]
   1e5a0:	780a      	ldrb	r2, [r1, #0]
   1e5a2:	3a17      	subs	r2, #23
   1e5a4:	b2d1      	uxtb	r1, r2
   1e5a6:	b252      	sxtb	r2, r2
   1e5a8:	2910      	cmp	r1, #16
   1e5aa:	d849      	bhi.n	1e640 <d_print_function_type+0xc4>
   1e5ac:	fa10 f102 	lsls.w	r1, r0, r2
   1e5b0:	d47c      	bmi.n	1e6ac <d_print_function_type+0x130>
   1e5b2:	fa17 f202 	lsls.w	r2, r7, r2
   1e5b6:	d543      	bpl.n	1e640 <d_print_function_type+0xc4>
   1e5b8:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
   1e5bc:	2b28      	cmp	r3, #40	; 0x28
   1e5be:	d001      	beq.n	1e5c4 <d_print_function_type+0x48>
   1e5c0:	2b2a      	cmp	r3, #42	; 0x2a
   1e5c2:	d175      	bne.n	1e6b0 <d_print_function_type+0x134>
   1e5c4:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1e5c8:	1c4a      	adds	r2, r1, #1
   1e5ca:	29ff      	cmp	r1, #255	; 0xff
   1e5cc:	f000 8084 	beq.w	1e6d8 <d_print_function_type+0x15c>
   1e5d0:	eb04 0c01 	add.w	ip, r4, r1
   1e5d4:	f04f 0800 	mov.w	r8, #0
   1e5d8:	2328      	movs	r3, #40	; 0x28
   1e5da:	f8d4 7118 	ldr.w	r7, [r4, #280]	; 0x118
   1e5de:	f88c 3004 	strb.w	r3, [ip, #4]
   1e5e2:	4629      	mov	r1, r5
   1e5e4:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1e5e8:	4620      	mov	r0, r4
   1e5ea:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1e5ee:	4642      	mov	r2, r8
   1e5f0:	f8c4 8118 	str.w	r8, [r4, #280]	; 0x118
   1e5f4:	f7ff fb96 	bl	1dd24 <d_print_mod_list>
   1e5f8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1e5fc:	1c59      	adds	r1, r3, #1
   1e5fe:	2bff      	cmp	r3, #255	; 0xff
   1e600:	f000 808d 	beq.w	1e71e <d_print_function_type+0x1a2>
   1e604:	eb04 0e03 	add.w	lr, r4, r3
   1e608:	2229      	movs	r2, #41	; 0x29
   1e60a:	f884 2108 	strb.w	r2, [r4, #264]	; 0x108
   1e60e:	f88e 2004 	strb.w	r2, [lr, #4]
   1e612:	1c4a      	adds	r2, r1, #1
   1e614:	29ff      	cmp	r1, #255	; 0xff
   1e616:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1e61a:	d124      	bne.n	1e666 <d_print_function_type+0xea>
   1e61c:	f04f 0800 	mov.w	r8, #0
   1e620:	1d20      	adds	r0, r4, #4
   1e622:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1e626:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1e62a:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
   1e62e:	4798      	blx	r3
   1e630:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1e634:	2201      	movs	r2, #1
   1e636:	4641      	mov	r1, r8
   1e638:	1898      	adds	r0, r3, r2
   1e63a:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1e63e:	e012      	b.n	1e666 <d_print_function_type+0xea>
   1e640:	681b      	ldr	r3, [r3, #0]
   1e642:	b113      	cbz	r3, 1e64a <d_print_function_type+0xce>
   1e644:	689a      	ldr	r2, [r3, #8]
   1e646:	2a00      	cmp	r2, #0
   1e648:	d0a9      	beq.n	1e59e <d_print_function_type+0x22>
   1e64a:	2200      	movs	r2, #0
   1e64c:	f8d4 7118 	ldr.w	r7, [r4, #280]	; 0x118
   1e650:	4629      	mov	r1, r5
   1e652:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
   1e656:	4620      	mov	r0, r4
   1e658:	f7ff fb64 	bl	1dd24 <d_print_mod_list>
   1e65c:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1e660:	1c4a      	adds	r2, r1, #1
   1e662:	29ff      	cmp	r1, #255	; 0xff
   1e664:	d0da      	beq.n	1e61c <d_print_function_type+0xa0>
   1e666:	1861      	adds	r1, r4, r1
   1e668:	2028      	movs	r0, #40	; 0x28
   1e66a:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1e66e:	7108      	strb	r0, [r1, #4]
   1e670:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1e674:	68b1      	ldr	r1, [r6, #8]
   1e676:	b121      	cbz	r1, 1e682 <d_print_function_type+0x106>
   1e678:	4620      	mov	r0, r4
   1e67a:	f7f8 fd9d 	bl	171b8 <d_print_comp>
   1e67e:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
   1e682:	1c51      	adds	r1, r2, #1
   1e684:	2aff      	cmp	r2, #255	; 0xff
   1e686:	d038      	beq.n	1e6fa <d_print_function_type+0x17e>
   1e688:	eb04 0c02 	add.w	ip, r4, r2
   1e68c:	2329      	movs	r3, #41	; 0x29
   1e68e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1e692:	4620      	mov	r0, r4
   1e694:	f88c 3004 	strb.w	r3, [ip, #4]
   1e698:	4629      	mov	r1, r5
   1e69a:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1e69e:	2201      	movs	r2, #1
   1e6a0:	f7ff fb40 	bl	1dd24 <d_print_mod_list>
   1e6a4:	f8c4 7118 	str.w	r7, [r4, #280]	; 0x118
   1e6a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e6ac:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
   1e6b0:	2b20      	cmp	r3, #32
   1e6b2:	d087      	beq.n	1e5c4 <d_print_function_type+0x48>
   1e6b4:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1e6b8:	1c59      	adds	r1, r3, #1
   1e6ba:	2bff      	cmp	r3, #255	; 0xff
   1e6bc:	d040      	beq.n	1e740 <d_print_function_type+0x1c4>
   1e6be:	2020      	movs	r0, #32
   1e6c0:	eb04 0803 	add.w	r8, r4, r3
   1e6c4:	1c4a      	adds	r2, r1, #1
   1e6c6:	29ff      	cmp	r1, #255	; 0xff
   1e6c8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1e6cc:	f888 0004 	strb.w	r0, [r8, #4]
   1e6d0:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1e6d4:	f47f af7c 	bne.w	1e5d0 <d_print_function_type+0x54>
   1e6d8:	2700      	movs	r7, #0
   1e6da:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1e6de:	f884 7103 	strb.w	r7, [r4, #259]	; 0x103
   1e6e2:	1d20      	adds	r0, r4, #4
   1e6e4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1e6e8:	4798      	blx	r3
   1e6ea:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1e6ee:	2201      	movs	r2, #1
   1e6f0:	4639      	mov	r1, r7
   1e6f2:	189f      	adds	r7, r3, r2
   1e6f4:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
   1e6f8:	e76a      	b.n	1e5d0 <d_print_function_type+0x54>
   1e6fa:	4611      	mov	r1, r2
   1e6fc:	2600      	movs	r6, #0
   1e6fe:	1d20      	adds	r0, r4, #4
   1e700:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1e704:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1e708:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   1e70c:	4798      	blx	r3
   1e70e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1e712:	2101      	movs	r1, #1
   1e714:	4632      	mov	r2, r6
   1e716:	1843      	adds	r3, r0, r1
   1e718:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1e71c:	e7b4      	b.n	1e688 <d_print_function_type+0x10c>
   1e71e:	4619      	mov	r1, r3
   1e720:	1d20      	adds	r0, r4, #4
   1e722:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1e726:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1e72a:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
   1e72e:	4798      	blx	r3
   1e730:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1e734:	2101      	movs	r1, #1
   1e736:	4643      	mov	r3, r8
   1e738:	1842      	adds	r2, r0, r1
   1e73a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1e73e:	e761      	b.n	1e604 <d_print_function_type+0x88>
   1e740:	4619      	mov	r1, r3
   1e742:	2700      	movs	r7, #0
   1e744:	1d20      	adds	r0, r4, #4
   1e746:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1e74a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1e74e:	f884 7103 	strb.w	r7, [r4, #259]	; 0x103
   1e752:	4798      	blx	r3
   1e754:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1e758:	2101      	movs	r1, #1
   1e75a:	463b      	mov	r3, r7
   1e75c:	1850      	adds	r0, r2, r1
   1e75e:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1e762:	e7ac      	b.n	1e6be <d_print_function_type+0x142>

0001e764 <d_print_cast.part.7>:
   1e764:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e766:	b083      	sub	sp, #12
   1e768:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
   1e76c:	ab02      	add	r3, sp, #8
   1e76e:	2600      	movs	r6, #0
   1e770:	f8d0 7118 	ldr.w	r7, [r0, #280]	; 0x118
   1e774:	460d      	mov	r5, r1
   1e776:	f8c0 6118 	str.w	r6, [r0, #280]	; 0x118
   1e77a:	f843 2d08 	str.w	r2, [r3, #-8]!
   1e77e:	4604      	mov	r4, r0
   1e780:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   1e784:	6849      	ldr	r1, [r1, #4]
   1e786:	9101      	str	r1, [sp, #4]
   1e788:	6849      	ldr	r1, [r1, #4]
   1e78a:	f7f8 fd15 	bl	171b8 <d_print_comp>
   1e78e:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
   1e792:	9a00      	ldr	r2, [sp, #0]
   1e794:	2b3c      	cmp	r3, #60	; 0x3c
   1e796:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
   1e79a:	bf18      	it	ne
   1e79c:	f8d4 1104 	ldrne.w	r1, [r4, #260]	; 0x104
   1e7a0:	d056      	beq.n	1e850 <d_print_cast.part.7+0xec>
   1e7a2:	1c4b      	adds	r3, r1, #1
   1e7a4:	29ff      	cmp	r1, #255	; 0xff
   1e7a6:	d022      	beq.n	1e7ee <d_print_cast.part.7+0x8a>
   1e7a8:	eb04 0e01 	add.w	lr, r4, r1
   1e7ac:	203c      	movs	r0, #60	; 0x3c
   1e7ae:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1e7b2:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1e7b6:	f88e 0004 	strb.w	r0, [lr, #4]
   1e7ba:	4620      	mov	r0, r4
   1e7bc:	686a      	ldr	r2, [r5, #4]
   1e7be:	6891      	ldr	r1, [r2, #8]
   1e7c0:	f7f8 fcfa 	bl	171b8 <d_print_comp>
   1e7c4:	f894 1108 	ldrb.w	r1, [r4, #264]	; 0x108
   1e7c8:	293e      	cmp	r1, #62	; 0x3e
   1e7ca:	bf18      	it	ne
   1e7cc:	f8d4 1104 	ldrne.w	r1, [r4, #260]	; 0x104
   1e7d0:	d02f      	beq.n	1e832 <d_print_cast.part.7+0xce>
   1e7d2:	1c4a      	adds	r2, r1, #1
   1e7d4:	29ff      	cmp	r1, #255	; 0xff
   1e7d6:	d01b      	beq.n	1e810 <d_print_cast.part.7+0xac>
   1e7d8:	1861      	adds	r1, r4, r1
   1e7da:	203e      	movs	r0, #62	; 0x3e
   1e7dc:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1e7e0:	7108      	strb	r0, [r1, #4]
   1e7e2:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1e7e6:	f8c4 7118 	str.w	r7, [r4, #280]	; 0x118
   1e7ea:	b003      	add	sp, #12
   1e7ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e7ee:	2600      	movs	r6, #0
   1e7f0:	1d20      	adds	r0, r4, #4
   1e7f2:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1e7f6:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1e7fa:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   1e7fe:	4798      	blx	r3
   1e800:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1e804:	2301      	movs	r3, #1
   1e806:	4631      	mov	r1, r6
   1e808:	18c2      	adds	r2, r0, r3
   1e80a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1e80e:	e7cb      	b.n	1e7a8 <d_print_cast.part.7+0x44>
   1e810:	2500      	movs	r5, #0
   1e812:	1d20      	adds	r0, r4, #4
   1e814:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1e818:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1e81c:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   1e820:	4798      	blx	r3
   1e822:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1e826:	2201      	movs	r2, #1
   1e828:	4629      	mov	r1, r5
   1e82a:	1898      	adds	r0, r3, r2
   1e82c:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1e830:	e7d2      	b.n	1e7d8 <d_print_cast.part.7+0x74>
   1e832:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1e836:	1c59      	adds	r1, r3, #1
   1e838:	2bff      	cmp	r3, #255	; 0xff
   1e83a:	d018      	beq.n	1e86e <d_print_cast.part.7+0x10a>
   1e83c:	eb04 0c03 	add.w	ip, r4, r3
   1e840:	2220      	movs	r2, #32
   1e842:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1e846:	f88c 2004 	strb.w	r2, [ip, #4]
   1e84a:	f884 2108 	strb.w	r2, [r4, #264]	; 0x108
   1e84e:	e7c0      	b.n	1e7d2 <d_print_cast.part.7+0x6e>
   1e850:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1e854:	1c59      	adds	r1, r3, #1
   1e856:	2bff      	cmp	r3, #255	; 0xff
   1e858:	d01b      	beq.n	1e892 <d_print_cast.part.7+0x12e>
   1e85a:	eb04 0c03 	add.w	ip, r4, r3
   1e85e:	2020      	movs	r0, #32
   1e860:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1e864:	f88c 0004 	strb.w	r0, [ip, #4]
   1e868:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1e86c:	e799      	b.n	1e7a2 <d_print_cast.part.7+0x3e>
   1e86e:	4619      	mov	r1, r3
   1e870:	2500      	movs	r5, #0
   1e872:	1d20      	adds	r0, r4, #4
   1e874:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1e878:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1e87c:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   1e880:	4798      	blx	r3
   1e882:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1e886:	2101      	movs	r1, #1
   1e888:	462b      	mov	r3, r5
   1e88a:	1842      	adds	r2, r0, r1
   1e88c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1e890:	e7d4      	b.n	1e83c <d_print_cast.part.7+0xd8>
   1e892:	4619      	mov	r1, r3
   1e894:	1d20      	adds	r0, r4, #4
   1e896:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1e89a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1e89e:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   1e8a2:	4798      	blx	r3
   1e8a4:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1e8a8:	2101      	movs	r1, #1
   1e8aa:	4633      	mov	r3, r6
   1e8ac:	1850      	adds	r0, r2, r1
   1e8ae:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1e8b2:	e7d2      	b.n	1e85a <d_print_cast.part.7+0xf6>

0001e8b4 <d_print_expr_op>:
   1e8b4:	780a      	ldrb	r2, [r1, #0]
   1e8b6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e8ba:	2a2c      	cmp	r2, #44	; 0x2c
   1e8bc:	4604      	mov	r4, r0
   1e8be:	d003      	beq.n	1e8c8 <d_print_expr_op+0x14>
   1e8c0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e8c4:	f7f8 bc78 	b.w	171b8 <d_print_comp>
   1e8c8:	684b      	ldr	r3, [r1, #4]
   1e8ca:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1e8ce:	685f      	ldr	r7, [r3, #4]
   1e8d0:	f1b8 0f00 	cmp.w	r8, #0
   1e8d4:	d05a      	beq.n	1e98c <d_print_expr_op+0xd8>
   1e8d6:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
   1e8da:	f108 35ff 	add.w	r5, r8, #4294967295
   1e8de:	f04f 0900 	mov.w	r9, #0
   1e8e2:	f100 0a04 	add.w	sl, r0, #4
   1e8e6:	29ff      	cmp	r1, #255	; 0xff
   1e8e8:	f005 0b01 	and.w	fp, r5, #1
   1e8ec:	783e      	ldrb	r6, [r7, #0]
   1e8ee:	d062      	beq.n	1e9b6 <d_print_expr_op+0x102>
   1e8f0:	460b      	mov	r3, r1
   1e8f2:	3101      	adds	r1, #1
   1e8f4:	2501      	movs	r5, #1
   1e8f6:	18e0      	adds	r0, r4, r3
   1e8f8:	45a8      	cmp	r8, r5
   1e8fa:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1e8fe:	7106      	strb	r6, [r0, #4]
   1e900:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   1e904:	d042      	beq.n	1e98c <d_print_expr_op+0xd8>
   1e906:	f1bb 0f00 	cmp.w	fp, #0
   1e90a:	d029      	beq.n	1e960 <d_print_expr_op+0xac>
   1e90c:	29ff      	cmp	r1, #255	; 0xff
   1e90e:	5d7e      	ldrb	r6, [r7, r5]
   1e910:	d061      	beq.n	1e9d6 <d_print_expr_op+0x122>
   1e912:	460b      	mov	r3, r1
   1e914:	3101      	adds	r1, #1
   1e916:	3501      	adds	r5, #1
   1e918:	eb04 0c03 	add.w	ip, r4, r3
   1e91c:	45a8      	cmp	r8, r5
   1e91e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1e922:	f88c 6004 	strb.w	r6, [ip, #4]
   1e926:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   1e92a:	d119      	bne.n	1e960 <d_print_expr_op+0xac>
   1e92c:	e063      	b.n	1e9f6 <d_print_expr_op+0x142>
   1e92e:	eb04 0c03 	add.w	ip, r4, r3
   1e932:	3501      	adds	r5, #1
   1e934:	1c51      	adds	r1, r2, #1
   1e936:	2aff      	cmp	r2, #255	; 0xff
   1e938:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1e93c:	4613      	mov	r3, r2
   1e93e:	f88c 6004 	strb.w	r6, [ip, #4]
   1e942:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   1e946:	5d7e      	ldrb	r6, [r7, r5]
   1e948:	d022      	beq.n	1e990 <d_print_expr_op+0xdc>
   1e94a:	3501      	adds	r5, #1
   1e94c:	eb04 0c03 	add.w	ip, r4, r3
   1e950:	45a8      	cmp	r8, r5
   1e952:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1e956:	f88c 6004 	strb.w	r6, [ip, #4]
   1e95a:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   1e95e:	d028      	beq.n	1e9b2 <d_print_expr_op+0xfe>
   1e960:	29ff      	cmp	r1, #255	; 0xff
   1e962:	460b      	mov	r3, r1
   1e964:	5d7e      	ldrb	r6, [r7, r5]
   1e966:	f101 0201 	add.w	r2, r1, #1
   1e96a:	d1e0      	bne.n	1e92e <d_print_expr_op+0x7a>
   1e96c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1e970:	4650      	mov	r0, sl
   1e972:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1e976:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   1e97a:	4798      	blx	r3
   1e97c:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1e980:	2201      	movs	r2, #1
   1e982:	2300      	movs	r3, #0
   1e984:	1881      	adds	r1, r0, r2
   1e986:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
   1e98a:	e7d0      	b.n	1e92e <d_print_expr_op+0x7a>
   1e98c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e990:	4611      	mov	r1, r2
   1e992:	4650      	mov	r0, sl
   1e994:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1e998:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1e99c:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   1e9a0:	4798      	blx	r3
   1e9a2:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1e9a6:	2101      	movs	r1, #1
   1e9a8:	2300      	movs	r3, #0
   1e9aa:	1842      	adds	r2, r0, r1
   1e9ac:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1e9b0:	e7cb      	b.n	1e94a <d_print_expr_op+0x96>
   1e9b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e9b6:	f880 9103 	strb.w	r9, [r0, #259]	; 0x103
   1e9ba:	4650      	mov	r0, sl
   1e9bc:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1e9c0:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1e9c4:	4798      	blx	r3
   1e9c6:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
   1e9ca:	2101      	movs	r1, #1
   1e9cc:	464b      	mov	r3, r9
   1e9ce:	186a      	adds	r2, r5, r1
   1e9d0:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1e9d4:	e78e      	b.n	1e8f4 <d_print_expr_op+0x40>
   1e9d6:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1e9da:	4650      	mov	r0, sl
   1e9dc:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1e9e0:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   1e9e4:	4798      	blx	r3
   1e9e6:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1e9ea:	4629      	mov	r1, r5
   1e9ec:	2300      	movs	r3, #0
   1e9ee:	1942      	adds	r2, r0, r5
   1e9f0:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1e9f4:	e78f      	b.n	1e916 <d_print_expr_op+0x62>
   1e9f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e9fa:	bf00      	nop

0001e9fc <d_print_subexpr>:
   1e9fc:	780b      	ldrb	r3, [r1, #0]
   1e9fe:	b570      	push	{r4, r5, r6, lr}
   1ea00:	f1d3 0201 	rsbs	r2, r3, #1
   1ea04:	bf38      	it	cc
   1ea06:	2200      	movcc	r2, #0
   1ea08:	460d      	mov	r5, r1
   1ea0a:	2b06      	cmp	r3, #6
   1ea0c:	bf14      	ite	ne
   1ea0e:	4613      	movne	r3, r2
   1ea10:	f042 0301 	orreq.w	r3, r2, #1
   1ea14:	4604      	mov	r4, r0
   1ea16:	461e      	mov	r6, r3
   1ea18:	b9f3      	cbnz	r3, 1ea58 <d_print_subexpr+0x5c>
   1ea1a:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
   1ea1e:	1c4a      	adds	r2, r1, #1
   1ea20:	29ff      	cmp	r1, #255	; 0xff
   1ea22:	d01d      	beq.n	1ea60 <d_print_subexpr+0x64>
   1ea24:	1861      	adds	r1, r4, r1
   1ea26:	2328      	movs	r3, #40	; 0x28
   1ea28:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1ea2c:	4620      	mov	r0, r4
   1ea2e:	710b      	strb	r3, [r1, #4]
   1ea30:	4629      	mov	r1, r5
   1ea32:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1ea36:	f7f8 fbbf 	bl	171b8 <d_print_comp>
   1ea3a:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1ea3e:	1c4a      	adds	r2, r1, #1
   1ea40:	29ff      	cmp	r1, #255	; 0xff
   1ea42:	d01d      	beq.n	1ea80 <d_print_subexpr+0x84>
   1ea44:	eb04 0c01 	add.w	ip, r4, r1
   1ea48:	2029      	movs	r0, #41	; 0x29
   1ea4a:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1ea4e:	f88c 0004 	strb.w	r0, [ip, #4]
   1ea52:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1ea56:	bd70      	pop	{r4, r5, r6, pc}
   1ea58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1ea5c:	f7f8 bbac 	b.w	171b8 <d_print_comp>
   1ea60:	f880 3103 	strb.w	r3, [r0, #259]	; 0x103
   1ea64:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ea68:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
   1ea6c:	3004      	adds	r0, #4
   1ea6e:	4798      	blx	r3
   1ea70:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1ea74:	2201      	movs	r2, #1
   1ea76:	4631      	mov	r1, r6
   1ea78:	1898      	adds	r0, r3, r2
   1ea7a:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1ea7e:	e7d1      	b.n	1ea24 <d_print_subexpr+0x28>
   1ea80:	2500      	movs	r5, #0
   1ea82:	1d20      	adds	r0, r4, #4
   1ea84:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ea88:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ea8c:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   1ea90:	4798      	blx	r3
   1ea92:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1ea96:	2201      	movs	r2, #1
   1ea98:	4629      	mov	r1, r5
   1ea9a:	1898      	adds	r0, r3, r2
   1ea9c:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1eaa0:	e7d0      	b.n	1ea44 <d_print_subexpr+0x48>
   1eaa2:	bf00      	nop

0001eaa4 <d_demangle_callback.constprop.11>:
   1eaa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1eaa8:	b0d8      	sub	sp, #352	; 0x160
   1eaaa:	4680      	mov	r8, r0
   1eaac:	af00      	add	r7, sp, #0
   1eaae:	460d      	mov	r5, r1
   1eab0:	7803      	ldrb	r3, [r0, #0]
   1eab2:	4614      	mov	r4, r2
   1eab4:	2b5f      	cmp	r3, #95	; 0x5f
   1eab6:	f000 80a0 	beq.w	1ebfa <d_demangle_callback.constprop.11+0x156>
   1eaba:	f64c 0144 	movw	r1, #51268	; 0xc844
   1eabe:	4640      	mov	r0, r8
   1eac0:	f2c0 0102 	movt	r1, #2
   1eac4:	2208      	movs	r2, #8
   1eac6:	f002 fc99 	bl	213fc <strncmp>
   1eaca:	bb38      	cbnz	r0, 1eb1c <d_demangle_callback.constprop.11+0x78>
   1eacc:	f898 3008 	ldrb.w	r3, [r8, #8]
   1ead0:	f1a3 012e 	sub.w	r1, r3, #46	; 0x2e
   1ead4:	424a      	negs	r2, r1
   1ead6:	eb42 0201 	adc.w	r2, r2, r1
   1eada:	2b5f      	cmp	r3, #95	; 0x5f
   1eadc:	bf08      	it	eq
   1eade:	f042 0201 	orreq.w	r2, r2, #1
   1eae2:	b91a      	cbnz	r2, 1eaec <d_demangle_callback.constprop.11+0x48>
   1eae4:	2b24      	cmp	r3, #36	; 0x24
   1eae6:	bf18      	it	ne
   1eae8:	4691      	movne	r9, r2
   1eaea:	d119      	bne.n	1eb20 <d_demangle_callback.constprop.11+0x7c>
   1eaec:	f898 3009 	ldrb.w	r3, [r8, #9]
   1eaf0:	f1a3 0249 	sub.w	r2, r3, #73	; 0x49
   1eaf4:	4250      	negs	r0, r2
   1eaf6:	eb40 0202 	adc.w	r2, r0, r2
   1eafa:	2b44      	cmp	r3, #68	; 0x44
   1eafc:	bf14      	ite	ne
   1eafe:	4616      	movne	r6, r2
   1eb00:	f042 0601 	orreq.w	r6, r2, #1
   1eb04:	46b1      	mov	r9, r6
   1eb06:	b15e      	cbz	r6, 1eb20 <d_demangle_callback.constprop.11+0x7c>
   1eb08:	f898 100a 	ldrb.w	r1, [r8, #10]
   1eb0c:	2a00      	cmp	r2, #0
   1eb0e:	bf0c      	ite	eq
   1eb10:	f04f 0903 	moveq.w	r9, #3
   1eb14:	f04f 0902 	movne.w	r9, #2
   1eb18:	295f      	cmp	r1, #95	; 0x5f
   1eb1a:	d001      	beq.n	1eb20 <d_demangle_callback.constprop.11+0x7c>
   1eb1c:	f04f 0900 	mov.w	r9, #0
   1eb20:	4640      	mov	r0, r8
   1eb22:	f002 fc3b 	bl	2139c <strlen>
   1eb26:	2100      	movs	r1, #0
   1eb28:	f8c7 812c 	str.w	r8, [r7, #300]	; 0x12c
   1eb2c:	f8c7 8138 	str.w	r8, [r7, #312]	; 0x138
   1eb30:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   1eb34:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
   1eb38:	f8c7 1154 	str.w	r1, [r7, #340]	; 0x154
   1eb3c:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
   1eb40:	f8c7 115c 	str.w	r1, [r7, #348]	; 0x15c
   1eb44:	0043      	lsls	r3, r0, #1
   1eb46:	0082      	lsls	r2, r0, #2
   1eb48:	18d6      	adds	r6, r2, r3
   1eb4a:	320e      	adds	r2, #14
   1eb4c:	f022 0c07 	bic.w	ip, r2, #7
   1eb50:	2211      	movs	r2, #17
   1eb52:	00b6      	lsls	r6, r6, #2
   1eb54:	eb08 0e00 	add.w	lr, r8, r0
   1eb58:	3608      	adds	r6, #8
   1eb5a:	f1b9 0f01 	cmp.w	r9, #1
   1eb5e:	ebad 0d06 	sub.w	sp, sp, r6
   1eb62:	f8c7 e130 	str.w	lr, [r7, #304]	; 0x130
   1eb66:	466e      	mov	r6, sp
   1eb68:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
   1eb6c:	ebad 0d0c 	sub.w	sp, sp, ip
   1eb70:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   1eb74:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
   1eb78:	f8c7 613c 	str.w	r6, [r7, #316]	; 0x13c
   1eb7c:	f8c7 d148 	str.w	sp, [r7, #328]	; 0x148
   1eb80:	d043      	beq.n	1ec0a <d_demangle_callback.constprop.11+0x166>
   1eb82:	d24b      	bcs.n	1ec1c <d_demangle_callback.constprop.11+0x178>
   1eb84:	f507 7096 	add.w	r0, r7, #300	; 0x12c
   1eb88:	f7f6 fe32 	bl	157f0 <d_type>
   1eb8c:	4680      	mov	r8, r0
   1eb8e:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
   1eb92:	7806      	ldrb	r6, [r0, #0]
   1eb94:	2000      	movs	r0, #0
   1eb96:	bb5e      	cbnz	r6, 1ebf0 <d_demangle_callback.constprop.11+0x14c>
   1eb98:	4640      	mov	r0, r8
   1eb9a:	f1b8 0f00 	cmp.w	r8, #0
   1eb9e:	d027      	beq.n	1ebf0 <d_demangle_callback.constprop.11+0x14c>
   1eba0:	1d38      	adds	r0, r7, #4
   1eba2:	4641      	mov	r1, r8
   1eba4:	2211      	movs	r2, #17
   1eba6:	f8c7 4114 	str.w	r4, [r7, #276]	; 0x114
   1ebaa:	607a      	str	r2, [r7, #4]
   1ebac:	1d3c      	adds	r4, r7, #4
   1ebae:	f8c7 6108 	str.w	r6, [r7, #264]	; 0x108
   1ebb2:	f887 610c 	strb.w	r6, [r7, #268]	; 0x10c
   1ebb6:	f8c7 6118 	str.w	r6, [r7, #280]	; 0x118
   1ebba:	f8c7 611c 	str.w	r6, [r7, #284]	; 0x11c
   1ebbe:	f8c7 6128 	str.w	r6, [r7, #296]	; 0x128
   1ebc2:	f8c7 5110 	str.w	r5, [r7, #272]	; 0x110
   1ebc6:	f8c7 6120 	str.w	r6, [r7, #288]	; 0x120
   1ebca:	f7f8 faf5 	bl	171b8 <d_print_comp>
   1ebce:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   1ebd2:	f107 0008 	add.w	r0, r7, #8
   1ebd6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
   1ebda:	1864      	adds	r4, r4, r1
   1ebdc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
   1ebe0:	7126      	strb	r6, [r4, #4]
   1ebe2:	4798      	blx	r3
   1ebe4:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
   1ebe8:	f1d1 0001 	rsbs	r0, r1, #1
   1ebec:	bf38      	it	cc
   1ebee:	2000      	movcc	r0, #0
   1ebf0:	f507 77b0 	add.w	r7, r7, #352	; 0x160
   1ebf4:	46bd      	mov	sp, r7
   1ebf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ebfa:	7840      	ldrb	r0, [r0, #1]
   1ebfc:	285a      	cmp	r0, #90	; 0x5a
   1ebfe:	bf08      	it	eq
   1ec00:	f04f 0901 	moveq.w	r9, #1
   1ec04:	f47f af59 	bne.w	1eaba <d_demangle_callback.constprop.11+0x16>
   1ec08:	e78a      	b.n	1eb20 <d_demangle_callback.constprop.11+0x7c>
   1ec0a:	f507 7096 	add.w	r0, r7, #300	; 0x12c
   1ec0e:	4649      	mov	r1, r9
   1ec10:	f7f7 ffc2 	bl	16b98 <d_mangled_name>
   1ec14:	4680      	mov	r8, r0
   1ec16:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
   1ec1a:	e7ba      	b.n	1eb92 <d_demangle_callback.constprop.11+0xee>
   1ec1c:	f898 000b 	ldrb.w	r0, [r8, #11]
   1ec20:	f1b9 0f02 	cmp.w	r9, #2
   1ec24:	bf14      	ite	ne
   1ec26:	f04f 093d 	movne.w	r9, #61	; 0x3d
   1ec2a:	f04f 093c 	moveq.w	r9, #60	; 0x3c
   1ec2e:	f108 0a0b 	add.w	sl, r8, #11
   1ec32:	f8c7 a138 	str.w	sl, [r7, #312]	; 0x138
   1ec36:	285f      	cmp	r0, #95	; 0x5f
   1ec38:	d104      	bne.n	1ec44 <d_demangle_callback.constprop.11+0x1a0>
   1ec3a:	f898 c00c 	ldrb.w	ip, [r8, #12]
   1ec3e:	f1bc 0f5a 	cmp.w	ip, #90	; 0x5a
   1ec42:	d019      	beq.n	1ec78 <d_demangle_callback.constprop.11+0x1d4>
   1ec44:	4650      	mov	r0, sl
   1ec46:	f507 7696 	add.w	r6, r7, #300	; 0x12c
   1ec4a:	f002 fba7 	bl	2139c <strlen>
   1ec4e:	4651      	mov	r1, sl
   1ec50:	4602      	mov	r2, r0
   1ec52:	4630      	mov	r0, r6
   1ec54:	f7f6 fad0 	bl	151f8 <d_make_name>
   1ec58:	4602      	mov	r2, r0
   1ec5a:	4649      	mov	r1, r9
   1ec5c:	2300      	movs	r3, #0
   1ec5e:	4630      	mov	r0, r6
   1ec60:	f7f6 fa78 	bl	15154 <d_make_comp>
   1ec64:	f8d7 6138 	ldr.w	r6, [r7, #312]	; 0x138
   1ec68:	4680      	mov	r8, r0
   1ec6a:	4630      	mov	r0, r6
   1ec6c:	f002 fb96 	bl	2139c <strlen>
   1ec70:	1830      	adds	r0, r6, r0
   1ec72:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
   1ec76:	e78c      	b.n	1eb92 <d_demangle_callback.constprop.11+0xee>
   1ec78:	f507 7696 	add.w	r6, r7, #300	; 0x12c
   1ec7c:	f108 030d 	add.w	r3, r8, #13
   1ec80:	4630      	mov	r0, r6
   1ec82:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   1ec86:	f7f7 fce1 	bl	1664c <d_encoding>
   1ec8a:	4602      	mov	r2, r0
   1ec8c:	e7e5      	b.n	1ec5a <d_demangle_callback.constprop.11+0x1b6>
   1ec8e:	bf00      	nop

0001ec90 <__cxa_demangle>:
   1ec90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ec94:	460c      	mov	r4, r1
   1ec96:	b084      	sub	sp, #16
   1ec98:	4615      	mov	r5, r2
   1ec9a:	461e      	mov	r6, r3
   1ec9c:	4607      	mov	r7, r0
   1ec9e:	2800      	cmp	r0, #0
   1eca0:	d04b      	beq.n	1ed3a <__cxa_demangle+0xaa>
   1eca2:	1c0b      	adds	r3, r1, #0
   1eca4:	bf18      	it	ne
   1eca6:	2301      	movne	r3, #1
   1eca8:	2a00      	cmp	r2, #0
   1ecaa:	bf14      	ite	ne
   1ecac:	2300      	movne	r3, #0
   1ecae:	f003 0301 	andeq.w	r3, r3, #1
   1ecb2:	b14b      	cbz	r3, 1ecc8 <__cxa_demangle+0x38>
   1ecb4:	2e00      	cmp	r6, #0
   1ecb6:	d044      	beq.n	1ed42 <__cxa_demangle+0xb2>
   1ecb8:	2700      	movs	r7, #0
   1ecba:	f06f 0302 	mvn.w	r3, #2
   1ecbe:	6033      	str	r3, [r6, #0]
   1ecc0:	4638      	mov	r0, r7
   1ecc2:	b004      	add	sp, #16
   1ecc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ecc8:	f245 7175 	movw	r1, #22389	; 0x5775
   1eccc:	466a      	mov	r2, sp
   1ecce:	f2c0 0101 	movt	r1, #1
   1ecd2:	9300      	str	r3, [sp, #0]
   1ecd4:	9301      	str	r3, [sp, #4]
   1ecd6:	9302      	str	r3, [sp, #8]
   1ecd8:	9303      	str	r3, [sp, #12]
   1ecda:	f7ff fee3 	bl	1eaa4 <d_demangle_callback.constprop.11>
   1ecde:	4603      	mov	r3, r0
   1ece0:	b1e0      	cbz	r0, 1ed1c <__cxa_demangle+0x8c>
   1ece2:	9b03      	ldr	r3, [sp, #12]
   1ece4:	f8dd 8008 	ldr.w	r8, [sp, #8]
   1ece8:	b10b      	cbz	r3, 1ecee <__cxa_demangle+0x5e>
   1ecea:	f04f 0801 	mov.w	r8, #1
   1ecee:	9f00      	ldr	r7, [sp, #0]
   1ecf0:	b1c7      	cbz	r7, 1ed24 <__cxa_demangle+0x94>
   1ecf2:	2c00      	cmp	r4, #0
   1ecf4:	d02d      	beq.n	1ed52 <__cxa_demangle+0xc2>
   1ecf6:	4638      	mov	r0, r7
   1ecf8:	f002 fb50 	bl	2139c <strlen>
   1ecfc:	6829      	ldr	r1, [r5, #0]
   1ecfe:	4288      	cmp	r0, r1
   1ed00:	d221      	bcs.n	1ed46 <__cxa_demangle+0xb6>
   1ed02:	4639      	mov	r1, r7
   1ed04:	4620      	mov	r0, r4
   1ed06:	f002 faeb 	bl	212e0 <strcpy>
   1ed0a:	4638      	mov	r0, r7
   1ed0c:	f001 f956 	bl	1ffbc <free>
   1ed10:	4627      	mov	r7, r4
   1ed12:	2e00      	cmp	r6, #0
   1ed14:	d0d4      	beq.n	1ecc0 <__cxa_demangle+0x30>
   1ed16:	2000      	movs	r0, #0
   1ed18:	6030      	str	r0, [r6, #0]
   1ed1a:	e7d1      	b.n	1ecc0 <__cxa_demangle+0x30>
   1ed1c:	9800      	ldr	r0, [sp, #0]
   1ed1e:	4698      	mov	r8, r3
   1ed20:	f001 f94c 	bl	1ffbc <free>
   1ed24:	b16e      	cbz	r6, 1ed42 <__cxa_demangle+0xb2>
   1ed26:	2700      	movs	r7, #0
   1ed28:	f1b8 0f01 	cmp.w	r8, #1
   1ed2c:	bf0c      	ite	eq
   1ed2e:	f04f 33ff 	moveq.w	r3, #4294967295
   1ed32:	f06f 0301 	mvnne.w	r3, #1
   1ed36:	6033      	str	r3, [r6, #0]
   1ed38:	e7c2      	b.n	1ecc0 <__cxa_demangle+0x30>
   1ed3a:	2b00      	cmp	r3, #0
   1ed3c:	d1bd      	bne.n	1ecba <__cxa_demangle+0x2a>
   1ed3e:	461f      	mov	r7, r3
   1ed40:	e7be      	b.n	1ecc0 <__cxa_demangle+0x30>
   1ed42:	4637      	mov	r7, r6
   1ed44:	e7bc      	b.n	1ecc0 <__cxa_demangle+0x30>
   1ed46:	4620      	mov	r0, r4
   1ed48:	f001 f938 	bl	1ffbc <free>
   1ed4c:	f8c5 8000 	str.w	r8, [r5]
   1ed50:	e7df      	b.n	1ed12 <__cxa_demangle+0x82>
   1ed52:	2d00      	cmp	r5, #0
   1ed54:	d0dd      	beq.n	1ed12 <__cxa_demangle+0x82>
   1ed56:	f8c5 8000 	str.w	r8, [r5]
   1ed5a:	e7da      	b.n	1ed12 <__cxa_demangle+0x82>

0001ed5c <__gcclibcxx_demangle_callback>:
   1ed5c:	b508      	push	{r3, lr}
   1ed5e:	f1d0 0301 	rsbs	r3, r0, #1
   1ed62:	bf38      	it	cc
   1ed64:	2300      	movcc	r3, #0
   1ed66:	2900      	cmp	r1, #0
   1ed68:	bf08      	it	eq
   1ed6a:	f043 0301 	orreq.w	r3, r3, #1
   1ed6e:	b93b      	cbnz	r3, 1ed80 <__gcclibcxx_demangle_callback+0x24>
   1ed70:	f7ff fe98 	bl	1eaa4 <d_demangle_callback.constprop.11>
   1ed74:	2800      	cmp	r0, #0
   1ed76:	bf14      	ite	ne
   1ed78:	2000      	movne	r0, #0
   1ed7a:	f06f 0001 	mvneq.w	r0, #1
   1ed7e:	bd08      	pop	{r3, pc}
   1ed80:	f06f 0002 	mvn.w	r0, #2
   1ed84:	bd08      	pop	{r3, pc}
   1ed86:	bf00      	nop

0001ed88 <std::exception::~exception()>:
   1ed88:	4b01      	ldr	r3, [pc, #4]	; (1ed90 <std::exception::~exception()+0x8>)
   1ed8a:	6003      	str	r3, [r0, #0]
   1ed8c:	4770      	bx	lr
   1ed8e:	bf00      	nop
   1ed90:	0002ce00 	.word	0x0002ce00

0001ed94 <std::bad_exception::~bad_exception()>:
   1ed94:	4b01      	ldr	r3, [pc, #4]	; (1ed9c <std::bad_exception::~bad_exception()+0x8>)
   1ed96:	6003      	str	r3, [r0, #0]
   1ed98:	4770      	bx	lr
   1ed9a:	bf00      	nop
   1ed9c:	0002ce00 	.word	0x0002ce00

0001eda0 <std::exception::what() const>:
   1eda0:	f64c 6034 	movw	r0, #52788	; 0xce34
   1eda4:	f2c0 0002 	movt	r0, #2
   1eda8:	4770      	bx	lr
   1edaa:	bf00      	nop

0001edac <std::bad_exception::what() const>:
   1edac:	f64c 6044 	movw	r0, #52804	; 0xce44
   1edb0:	f2c0 0002 	movt	r0, #2
   1edb4:	4770      	bx	lr
   1edb6:	bf00      	nop

0001edb8 <std::bad_exception::~bad_exception()>:
   1edb8:	4b03      	ldr	r3, [pc, #12]	; (1edc8 <std::bad_exception::~bad_exception()+0x10>)
   1edba:	b510      	push	{r4, lr}
   1edbc:	4604      	mov	r4, r0
   1edbe:	6003      	str	r3, [r0, #0]
   1edc0:	f7f5 fd6e 	bl	148a0 <operator delete(void*)>
   1edc4:	4620      	mov	r0, r4
   1edc6:	bd10      	pop	{r4, pc}
   1edc8:	0002ce00 	.word	0x0002ce00

0001edcc <std::exception::~exception()>:
   1edcc:	4b03      	ldr	r3, [pc, #12]	; (1eddc <std::exception::~exception()+0x10>)
   1edce:	b510      	push	{r4, lr}
   1edd0:	4604      	mov	r4, r0
   1edd2:	6003      	str	r3, [r0, #0]
   1edd4:	f7f5 fd64 	bl	148a0 <operator delete(void*)>
   1edd8:	4620      	mov	r0, r4
   1edda:	bd10      	pop	{r4, pc}
   1eddc:	0002ce00 	.word	0x0002ce00

0001ede0 <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)>:
   1ede0:	2801      	cmp	r0, #1
   1ede2:	b510      	push	{r4, lr}
   1ede4:	d81d      	bhi.n	1ee22 <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)+0x42>
   1ede6:	f04f 32ff 	mov.w	r2, #4294967295
   1edea:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
   1edee:	f3bf 8f5f 	dmb	sy
   1edf2:	e853 0f00 	ldrex	r0, [r3]
   1edf6:	4410      	add	r0, r2
   1edf8:	e843 0400 	strex	r4, r0, [r3]
   1edfc:	f094 0f00 	teq	r4, #0
   1ee00:	d1f7      	bne.n	1edf2 <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)+0x12>
   1ee02:	f3bf 8f5f 	dmb	sy
   1ee06:	b958      	cbnz	r0, 1ee20 <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)+0x40>
   1ee08:	f851 3c1c 	ldr.w	r3, [r1, #-28]
   1ee0c:	f101 0458 	add.w	r4, r1, #88	; 0x58
   1ee10:	b10b      	cbz	r3, 1ee16 <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)+0x36>
   1ee12:	4620      	mov	r0, r4
   1ee14:	4798      	blx	r3
   1ee16:	4620      	mov	r0, r4
   1ee18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ee1c:	f7f6 b818 	b.w	14e50 <__cxa_free_exception>
   1ee20:	bd10      	pop	{r4, pc}
   1ee22:	f851 0c14 	ldr.w	r0, [r1, #-20]
   1ee26:	f7f5 fd3f 	bl	148a8 <__cxxabiv1::__terminate(void (*)())>
   1ee2a:	bf00      	nop

0001ee2c <__cxa_throw>:
   1ee2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ee2e:	f240 0c1c 	movw	ip, #28
   1ee32:	f240 0e20 	movw	lr, #32
   1ee36:	f2c1 0c00 	movt	ip, #4096	; 0x1000
   1ee3a:	f2c1 0e00 	movt	lr, #4096	; 0x1000
   1ee3e:	4603      	mov	r3, r0
   1ee40:	f1a0 0458 	sub.w	r4, r0, #88	; 0x58
   1ee44:	f8dc 0000 	ldr.w	r0, [ip]
   1ee48:	f8de 7000 	ldr.w	r7, [lr]
   1ee4c:	f64e 55e1 	movw	r5, #60897	; 0xede1
   1ee50:	f843 1c78 	str.w	r1, [r3, #-120]
   1ee54:	2643      	movs	r6, #67	; 0x43
   1ee56:	212b      	movs	r1, #43	; 0x2b
   1ee58:	f843 2c74 	str.w	r2, [r3, #-116]
   1ee5c:	f843 7c70 	str.w	r7, [r3, #-112]
   1ee60:	2247      	movs	r2, #71	; 0x47
   1ee62:	f843 0c6c 	str.w	r0, [r3, #-108]
   1ee66:	2701      	movs	r7, #1
   1ee68:	f803 2c58 	strb.w	r2, [r3, #-88]
   1ee6c:	2055      	movs	r0, #85	; 0x55
   1ee6e:	f843 7c80 	str.w	r7, [r3, #-128]
   1ee72:	2200      	movs	r2, #0
   1ee74:	f803 0c56 	strb.w	r0, [r3, #-86]
   1ee78:	f2c0 0501 	movt	r5, #1
   1ee7c:	f803 6c55 	strb.w	r6, [r3, #-85]
   1ee80:	274e      	movs	r7, #78	; 0x4e
   1ee82:	f803 6c54 	strb.w	r6, [r3, #-84]
   1ee86:	4620      	mov	r0, r4
   1ee88:	f803 7c57 	strb.w	r7, [r3, #-87]
   1ee8c:	f803 1c53 	strb.w	r1, [r3, #-83]
   1ee90:	f803 1c52 	strb.w	r1, [r3, #-82]
   1ee94:	f803 2c51 	strb.w	r2, [r3, #-81]
   1ee98:	f843 5c50 	str.w	r5, [r3, #-80]
   1ee9c:	f007 fe04 	bl	26aa8 <_Unwind_RaiseException>
   1eea0:	4620      	mov	r0, r4
   1eea2:	f7f5 ff05 	bl	14cb0 <__cxa_begin_catch>
   1eea6:	f7f5 fd13 	bl	148d0 <std::terminate()>
   1eeaa:	bf00      	nop

0001eeac <__cxa_rethrow>:
   1eeac:	b510      	push	{r4, lr}
   1eeae:	f7f6 f87d 	bl	14fac <__cxa_get_globals>
   1eeb2:	6841      	ldr	r1, [r0, #4]
   1eeb4:	6804      	ldr	r4, [r0, #0]
   1eeb6:	1c4b      	adds	r3, r1, #1
   1eeb8:	6043      	str	r3, [r0, #4]
   1eeba:	b164      	cbz	r4, 1eed6 <__cxa_rethrow+0x2a>
   1eebc:	f894 2020 	ldrb.w	r2, [r4, #32]
   1eec0:	2a47      	cmp	r2, #71	; 0x47
   1eec2:	d00a      	beq.n	1eeda <__cxa_rethrow+0x2e>
   1eec4:	2100      	movs	r1, #0
   1eec6:	6001      	str	r1, [r0, #0]
   1eec8:	3420      	adds	r4, #32
   1eeca:	4620      	mov	r0, r4
   1eecc:	f007 fe10 	bl	26af0 <_Unwind_Resume_or_Rethrow>
   1eed0:	4620      	mov	r0, r4
   1eed2:	f7f5 feed 	bl	14cb0 <__cxa_begin_catch>
   1eed6:	f7f5 fcfb 	bl	148d0 <std::terminate()>
   1eeda:	f894 c021 	ldrb.w	ip, [r4, #33]	; 0x21
   1eede:	f1bc 0f4e 	cmp.w	ip, #78	; 0x4e
   1eee2:	d1ef      	bne.n	1eec4 <__cxa_rethrow+0x18>
   1eee4:	f894 e022 	ldrb.w	lr, [r4, #34]	; 0x22
   1eee8:	f1be 0f55 	cmp.w	lr, #85	; 0x55
   1eeec:	d1ea      	bne.n	1eec4 <__cxa_rethrow+0x18>
   1eeee:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1eef2:	2b43      	cmp	r3, #67	; 0x43
   1eef4:	d1e6      	bne.n	1eec4 <__cxa_rethrow+0x18>
   1eef6:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
   1eefa:	2943      	cmp	r1, #67	; 0x43
   1eefc:	d1e2      	bne.n	1eec4 <__cxa_rethrow+0x18>
   1eefe:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   1ef02:	2a2b      	cmp	r2, #43	; 0x2b
   1ef04:	d1de      	bne.n	1eec4 <__cxa_rethrow+0x18>
   1ef06:	f894 c026 	ldrb.w	ip, [r4, #38]	; 0x26
   1ef0a:	f1bc 0f2b 	cmp.w	ip, #43	; 0x2b
   1ef0e:	d1d9      	bne.n	1eec4 <__cxa_rethrow+0x18>
   1ef10:	f894 e027 	ldrb.w	lr, [r4, #39]	; 0x27
   1ef14:	f1be 0f01 	cmp.w	lr, #1
   1ef18:	d8d4      	bhi.n	1eec4 <__cxa_rethrow+0x18>
   1ef1a:	6963      	ldr	r3, [r4, #20]
   1ef1c:	4258      	negs	r0, r3
   1ef1e:	6160      	str	r0, [r4, #20]
   1ef20:	e7d2      	b.n	1eec8 <__cxa_rethrow+0x1c>
   1ef22:	bf00      	nop

0001ef24 <read_sleb128(unsigned char const*, long*)>:
   1ef24:	2300      	movs	r3, #0
   1ef26:	461a      	mov	r2, r3
   1ef28:	b470      	push	{r4, r5, r6}
   1ef2a:	f810 4b01 	ldrb.w	r4, [r0], #1
   1ef2e:	f004 057f 	and.w	r5, r4, #127	; 0x7f
   1ef32:	4606      	mov	r6, r0
   1ef34:	fa05 f502 	lsl.w	r5, r5, r2
   1ef38:	3207      	adds	r2, #7
   1ef3a:	f014 0f80 	tst.w	r4, #128	; 0x80
   1ef3e:	ea43 0305 	orr.w	r3, r3, r5
   1ef42:	d1f2      	bne.n	1ef2a <read_sleb128(unsigned char const*, long*)+0x6>
   1ef44:	2a1f      	cmp	r2, #31
   1ef46:	d806      	bhi.n	1ef56 <read_sleb128(unsigned char const*, long*)+0x32>
   1ef48:	0660      	lsls	r0, r4, #25
   1ef4a:	bf42      	ittt	mi
   1ef4c:	f04f 30ff 	movmi.w	r0, #4294967295
   1ef50:	fa00 f202 	lslmi.w	r2, r0, r2
   1ef54:	4313      	orrmi	r3, r2
   1ef56:	600b      	str	r3, [r1, #0]
   1ef58:	4630      	mov	r0, r6
   1ef5a:	bc70      	pop	{r4, r5, r6}
   1ef5c:	4770      	bx	lr
   1ef5e:	bf00      	nop

0001ef60 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>:
   1ef60:	2850      	cmp	r0, #80	; 0x50
   1ef62:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ef64:	4604      	mov	r4, r0
   1ef66:	b085      	sub	sp, #20
   1ef68:	460d      	mov	r5, r1
   1ef6a:	d044      	beq.n	1eff6 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x96>
   1ef6c:	f000 010f 	and.w	r1, r0, #15
   1ef70:	290c      	cmp	r1, #12
   1ef72:	d82a      	bhi.n	1efca <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x6a>
   1ef74:	e8df f001 	tbb	[pc, r1]
   1ef78:	073b2b07 	.word	0x073b2b07
   1ef7c:	29292917 	.word	0x29292917
   1ef80:	071b1f29 	.word	0x071b1f29
   1ef84:	17          	.byte	0x17
   1ef85:	00          	.byte	0x00
   1ef86:	4610      	mov	r0, r2
   1ef88:	f850 1b04 	ldr.w	r1, [r0], #4
   1ef8c:	b141      	cbz	r1, 1efa0 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x40>
   1ef8e:	f004 0670 	and.w	r6, r4, #112	; 0x70
   1ef92:	2e10      	cmp	r6, #16
   1ef94:	bf08      	it	eq
   1ef96:	4615      	moveq	r5, r2
   1ef98:	0622      	lsls	r2, r4, #24
   1ef9a:	4429      	add	r1, r5
   1ef9c:	bf48      	it	mi
   1ef9e:	6809      	ldrmi	r1, [r1, #0]
   1efa0:	6019      	str	r1, [r3, #0]
   1efa2:	b005      	add	sp, #20
   1efa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1efa6:	4610      	mov	r0, r2
   1efa8:	f850 1b08 	ldr.w	r1, [r0], #8
   1efac:	e7ee      	b.n	1ef8c <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x2c>
   1efae:	4610      	mov	r0, r2
   1efb0:	f930 1b02 	ldrsh.w	r1, [r0], #2
   1efb4:	e7ea      	b.n	1ef8c <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x2c>
   1efb6:	4610      	mov	r0, r2
   1efb8:	a903      	add	r1, sp, #12
   1efba:	9201      	str	r2, [sp, #4]
   1efbc:	9300      	str	r3, [sp, #0]
   1efbe:	f7ff ffb1 	bl	1ef24 <read_sleb128(unsigned char const*, long*)>
   1efc2:	9903      	ldr	r1, [sp, #12]
   1efc4:	9a01      	ldr	r2, [sp, #4]
   1efc6:	9b00      	ldr	r3, [sp, #0]
   1efc8:	e7e0      	b.n	1ef8c <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x2c>
   1efca:	f000 fd1b 	bl	1fa04 <abort>
   1efce:	2100      	movs	r1, #0
   1efd0:	4610      	mov	r0, r2
   1efd2:	460e      	mov	r6, r1
   1efd4:	f810 7b01 	ldrb.w	r7, [r0], #1
   1efd8:	f007 0c7f 	and.w	ip, r7, #127	; 0x7f
   1efdc:	fa0c fc06 	lsl.w	ip, ip, r6
   1efe0:	3607      	adds	r6, #7
   1efe2:	f017 0f80 	tst.w	r7, #128	; 0x80
   1efe6:	ea41 010c 	orr.w	r1, r1, ip
   1efea:	d1f3      	bne.n	1efd4 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x74>
   1efec:	e7ce      	b.n	1ef8c <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x2c>
   1efee:	4610      	mov	r0, r2
   1eff0:	f830 1b02 	ldrh.w	r1, [r0], #2
   1eff4:	e7ca      	b.n	1ef8c <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x2c>
   1eff6:	3203      	adds	r2, #3
   1eff8:	f022 0003 	bic.w	r0, r2, #3
   1effc:	f850 1b04 	ldr.w	r1, [r0], #4
   1f000:	e7ce      	b.n	1efa0 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x40>
   1f002:	bf00      	nop

0001f004 <base_of_encoded_value(unsigned char, _Unwind_Context*)>:
   1f004:	28ff      	cmp	r0, #255	; 0xff
   1f006:	b508      	push	{r3, lr}
   1f008:	d00d      	beq.n	1f026 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x22>
   1f00a:	f000 0370 	and.w	r3, r0, #112	; 0x70
   1f00e:	2b20      	cmp	r3, #32
   1f010:	d019      	beq.n	1f046 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x42>
   1f012:	dd07      	ble.n	1f024 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x20>
   1f014:	2b40      	cmp	r3, #64	; 0x40
   1f016:	d011      	beq.n	1f03c <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x38>
   1f018:	2b50      	cmp	r3, #80	; 0x50
   1f01a:	d004      	beq.n	1f026 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x22>
   1f01c:	2b30      	cmp	r3, #48	; 0x30
   1f01e:	d008      	beq.n	1f032 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x2e>
   1f020:	f000 fcf0 	bl	1fa04 <abort>
   1f024:	b90b      	cbnz	r3, 1f02a <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x26>
   1f026:	2000      	movs	r0, #0
   1f028:	bd08      	pop	{r3, pc}
   1f02a:	2b10      	cmp	r3, #16
   1f02c:	d0fb      	beq.n	1f026 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x22>
   1f02e:	f000 fce9 	bl	1fa04 <abort>
   1f032:	4608      	mov	r0, r1
   1f034:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1f038:	f007 bf64 	b.w	26f04 <_Unwind_GetDataRelBase>
   1f03c:	4608      	mov	r0, r1
   1f03e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1f042:	f007 bf4f 	b.w	26ee4 <_Unwind_GetRegionStart>
   1f046:	4608      	mov	r0, r1
   1f048:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1f04c:	f007 bf5e 	b.w	26f0c <_Unwind_GetTextRelBase>

0001f050 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1>:
   1f050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f052:	460d      	mov	r5, r1
   1f054:	4614      	mov	r4, r2
   1f056:	4607      	mov	r7, r0
   1f058:	b108      	cbz	r0, 1f05e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1+0xe>
   1f05a:	f007 ff43 	bl	26ee4 <_Unwind_GetRegionStart>
   1f05e:	6020      	str	r0, [r4, #0]
   1f060:	f815 6b01 	ldrb.w	r6, [r5], #1
   1f064:	2eff      	cmp	r6, #255	; 0xff
   1f066:	bf08      	it	eq
   1f068:	6060      	streq	r0, [r4, #4]
   1f06a:	d00a      	beq.n	1f082 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1+0x32>
   1f06c:	4639      	mov	r1, r7
   1f06e:	4630      	mov	r0, r6
   1f070:	f7ff ffc8 	bl	1f004 <base_of_encoded_value(unsigned char, _Unwind_Context*)>
   1f074:	462a      	mov	r2, r5
   1f076:	1d23      	adds	r3, r4, #4
   1f078:	4601      	mov	r1, r0
   1f07a:	4630      	mov	r0, r6
   1f07c:	f7ff ff70 	bl	1ef60 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>
   1f080:	4605      	mov	r5, r0
   1f082:	f815 3b01 	ldrb.w	r3, [r5], #1
   1f086:	2bff      	cmp	r3, #255	; 0xff
   1f088:	7523      	strb	r3, [r4, #20]
   1f08a:	d025      	beq.n	1f0d8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1+0x88>
   1f08c:	2000      	movs	r0, #0
   1f08e:	4602      	mov	r2, r0
   1f090:	462b      	mov	r3, r5
   1f092:	f813 1b01 	ldrb.w	r1, [r3], #1
   1f096:	f001 0c7f 	and.w	ip, r1, #127	; 0x7f
   1f09a:	461d      	mov	r5, r3
   1f09c:	fa0c f602 	lsl.w	r6, ip, r2
   1f0a0:	3207      	adds	r2, #7
   1f0a2:	4330      	orrs	r0, r6
   1f0a4:	060e      	lsls	r6, r1, #24
   1f0a6:	d4f3      	bmi.n	1f090 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1+0x40>
   1f0a8:	1818      	adds	r0, r3, r0
   1f0aa:	60e0      	str	r0, [r4, #12]
   1f0ac:	2300      	movs	r3, #0
   1f0ae:	f815 1b01 	ldrb.w	r1, [r5], #1
   1f0b2:	461a      	mov	r2, r3
   1f0b4:	7561      	strb	r1, [r4, #21]
   1f0b6:	4628      	mov	r0, r5
   1f0b8:	f810 cb01 	ldrb.w	ip, [r0], #1
   1f0bc:	f00c 067f 	and.w	r6, ip, #127	; 0x7f
   1f0c0:	4605      	mov	r5, r0
   1f0c2:	fa06 f602 	lsl.w	r6, r6, r2
   1f0c6:	3207      	adds	r2, #7
   1f0c8:	ea5f 610c 	movs.w	r1, ip, lsl #24
   1f0cc:	ea43 0306 	orr.w	r3, r3, r6
   1f0d0:	d4f1      	bmi.n	1f0b6 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1+0x66>
   1f0d2:	18c3      	adds	r3, r0, r3
   1f0d4:	6123      	str	r3, [r4, #16]
   1f0d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f0d8:	2200      	movs	r2, #0
   1f0da:	60e2      	str	r2, [r4, #12]
   1f0dc:	e7e6      	b.n	1f0ac <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1+0x5c>
   1f0de:	bf00      	nop

0001f0e0 <__gxx_personality_v0>:
   1f0e0:	f000 0303 	and.w	r3, r0, #3
   1f0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f0e8:	2400      	movs	r4, #0
   1f0ea:	b093      	sub	sp, #76	; 0x4c
   1f0ec:	2b01      	cmp	r3, #1
   1f0ee:	4688      	mov	r8, r1
   1f0f0:	4617      	mov	r7, r2
   1f0f2:	940b      	str	r4, [sp, #44]	; 0x2c
   1f0f4:	f000 809d 	beq.w	1f232 <__gxx_personality_v0+0x152>
   1f0f8:	2b02      	cmp	r3, #2
   1f0fa:	f000 808f 	beq.w	1f21c <__gxx_personality_v0+0x13c>
   1f0fe:	2b00      	cmp	r3, #0
   1f100:	f040 808a 	bne.w	1f218 <__gxx_personality_v0+0x138>
   1f104:	f010 0108 	ands.w	r1, r0, #8
   1f108:	f040 80d4 	bne.w	1f2b4 <__gxx_personality_v0+0x1d4>
   1f10c:	ad12      	add	r5, sp, #72	; 0x48
   1f10e:	4610      	mov	r0, r2
   1f110:	460b      	mov	r3, r1
   1f112:	220c      	movs	r2, #12
   1f114:	f845 8d10 	str.w	r8, [r5, #-16]!
   1f118:	f04f 0901 	mov.w	r9, #1
   1f11c:	9500      	str	r5, [sp, #0]
   1f11e:	f006 ffdf 	bl	260e0 <_Unwind_VRS_Set>
   1f122:	4638      	mov	r0, r7
   1f124:	f007 fee4 	bl	26ef0 <_Unwind_GetLanguageSpecificData>
   1f128:	4682      	mov	sl, r0
   1f12a:	2800      	cmp	r0, #0
   1f12c:	f000 8098 	beq.w	1f260 <__gxx_personality_v0+0x180>
   1f130:	aa05      	add	r2, sp, #20
   1f132:	4601      	mov	r1, r0
   1f134:	4638      	mov	r0, r7
   1f136:	f7ff ff8b 	bl	1f050 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1>
   1f13a:	4639      	mov	r1, r7
   1f13c:	4604      	mov	r4, r0
   1f13e:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
   1f142:	f7ff ff5f 	bl	1f004 <base_of_encoded_value(unsigned char, _Unwind_Context*)>
   1f146:	2100      	movs	r1, #0
   1f148:	460b      	mov	r3, r1
   1f14a:	220f      	movs	r2, #15
   1f14c:	9500      	str	r5, [sp, #0]
   1f14e:	9007      	str	r0, [sp, #28]
   1f150:	4638      	mov	r0, r7
   1f152:	f006 ff9f 	bl	26094 <_Unwind_VRS_Get>
   1f156:	980e      	ldr	r0, [sp, #56]	; 0x38
   1f158:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f15a:	f020 0601 	bic.w	r6, r0, #1
   1f15e:	3e01      	subs	r6, #1
   1f160:	429c      	cmp	r4, r3
   1f162:	d23c      	bcs.n	1f1de <__gxx_personality_v0+0xfe>
   1f164:	f89d b029 	ldrb.w	fp, [sp, #41]	; 0x29
   1f168:	2100      	movs	r1, #0
   1f16a:	4658      	mov	r0, fp
   1f16c:	f7ff ff4a 	bl	1f004 <base_of_encoded_value(unsigned char, _Unwind_Context*)>
   1f170:	4622      	mov	r2, r4
   1f172:	ab0c      	add	r3, sp, #48	; 0x30
   1f174:	4601      	mov	r1, r0
   1f176:	4658      	mov	r0, fp
   1f178:	f7ff fef2 	bl	1ef60 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>
   1f17c:	f89d 4029 	ldrb.w	r4, [sp, #41]	; 0x29
   1f180:	2100      	movs	r1, #0
   1f182:	4683      	mov	fp, r0
   1f184:	4620      	mov	r0, r4
   1f186:	f7ff ff3d 	bl	1f004 <base_of_encoded_value(unsigned char, _Unwind_Context*)>
   1f18a:	465a      	mov	r2, fp
   1f18c:	ab0d      	add	r3, sp, #52	; 0x34
   1f18e:	4601      	mov	r1, r0
   1f190:	4620      	mov	r0, r4
   1f192:	f7ff fee5 	bl	1ef60 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>
   1f196:	f89d 4029 	ldrb.w	r4, [sp, #41]	; 0x29
   1f19a:	2100      	movs	r1, #0
   1f19c:	4683      	mov	fp, r0
   1f19e:	4620      	mov	r0, r4
   1f1a0:	f7ff ff30 	bl	1f004 <base_of_encoded_value(unsigned char, _Unwind_Context*)>
   1f1a4:	462b      	mov	r3, r5
   1f1a6:	465a      	mov	r2, fp
   1f1a8:	4601      	mov	r1, r0
   1f1aa:	4620      	mov	r0, r4
   1f1ac:	f7ff fed8 	bl	1ef60 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>
   1f1b0:	2100      	movs	r1, #0
   1f1b2:	460b      	mov	r3, r1
   1f1b4:	4604      	mov	r4, r0
   1f1b6:	f814 2b01 	ldrb.w	r2, [r4], #1
   1f1ba:	f002 0e7f 	and.w	lr, r2, #127	; 0x7f
   1f1be:	fa0e fc03 	lsl.w	ip, lr, r3
   1f1c2:	3307      	adds	r3, #7
   1f1c4:	0612      	lsls	r2, r2, #24
   1f1c6:	ea41 010c 	orr.w	r1, r1, ip
   1f1ca:	d4f4      	bmi.n	1f1b6 <__gxx_personality_v0+0xd6>
   1f1cc:	9b05      	ldr	r3, [sp, #20]
   1f1ce:	980c      	ldr	r0, [sp, #48]	; 0x30
   1f1d0:	18c3      	adds	r3, r0, r3
   1f1d2:	429e      	cmp	r6, r3
   1f1d4:	d277      	bcs.n	1f2c6 <__gxx_personality_v0+0x1e6>
   1f1d6:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1f1d8:	4623      	mov	r3, r4
   1f1da:	429c      	cmp	r4, r3
   1f1dc:	d3c2      	bcc.n	1f164 <__gxx_personality_v0+0x84>
   1f1de:	2400      	movs	r4, #0
   1f1e0:	2601      	movs	r6, #1
   1f1e2:	46a3      	mov	fp, r4
   1f1e4:	f019 0f01 	tst.w	r9, #1
   1f1e8:	d073      	beq.n	1f2d2 <__gxx_personality_v0+0x1f2>
   1f1ea:	2e02      	cmp	r6, #2
   1f1ec:	d038      	beq.n	1f260 <__gxx_personality_v0+0x180>
   1f1ee:	2100      	movs	r1, #0
   1f1f0:	220d      	movs	r2, #13
   1f1f2:	4638      	mov	r0, r7
   1f1f4:	460b      	mov	r3, r1
   1f1f6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1f1f8:	9500      	str	r5, [sp, #0]
   1f1fa:	f006 ff4b 	bl	26094 <_Unwind_VRS_Get>
   1f1fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1f200:	2006      	movs	r0, #6
   1f202:	f8c8 6024 	str.w	r6, [r8, #36]	; 0x24
   1f206:	f8c8 4028 	str.w	r4, [r8, #40]	; 0x28
   1f20a:	f8c8 2020 	str.w	r2, [r8, #32]
   1f20e:	f8c8 a02c 	str.w	sl, [r8, #44]	; 0x2c
   1f212:	f8c8 b030 	str.w	fp, [r8, #48]	; 0x30
   1f216:	e009      	b.n	1f22c <__gxx_personality_v0+0x14c>
   1f218:	f000 fbf4 	bl	1fa04 <abort>
   1f21c:	4608      	mov	r0, r1
   1f21e:	4611      	mov	r1, r2
   1f220:	f007 fe4a 	bl	26eb8 <__gnu_unwind_frame>
   1f224:	2800      	cmp	r0, #0
   1f226:	bf0c      	ite	eq
   1f228:	2008      	moveq	r0, #8
   1f22a:	2009      	movne	r0, #9
   1f22c:	b013      	add	sp, #76	; 0x4c
   1f22e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f232:	f010 0608 	ands.w	r6, r0, #8
   1f236:	bf18      	it	ne
   1f238:	ad0e      	addne	r5, sp, #56	; 0x38
   1f23a:	d01a      	beq.n	1f272 <__gxx_personality_v0+0x192>
   1f23c:	2100      	movs	r1, #0
   1f23e:	220c      	movs	r2, #12
   1f240:	460b      	mov	r3, r1
   1f242:	4638      	mov	r0, r7
   1f244:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
   1f248:	f046 0902 	orr.w	r9, r6, #2
   1f24c:	9500      	str	r5, [sp, #0]
   1f24e:	f006 ff47 	bl	260e0 <_Unwind_VRS_Set>
   1f252:	4638      	mov	r0, r7
   1f254:	f007 fe4c 	bl	26ef0 <_Unwind_GetLanguageSpecificData>
   1f258:	4682      	mov	sl, r0
   1f25a:	2800      	cmp	r0, #0
   1f25c:	f47f af68 	bne.w	1f130 <__gxx_personality_v0+0x50>
   1f260:	4640      	mov	r0, r8
   1f262:	4639      	mov	r1, r7
   1f264:	f007 fe28 	bl	26eb8 <__gnu_unwind_frame>
   1f268:	2800      	cmp	r0, #0
   1f26a:	bf0c      	ite	eq
   1f26c:	2008      	moveq	r0, #8
   1f26e:	2009      	movne	r0, #9
   1f270:	e7dc      	b.n	1f22c <__gxx_personality_v0+0x14c>
   1f272:	4610      	mov	r0, r2
   1f274:	4633      	mov	r3, r6
   1f276:	220d      	movs	r2, #13
   1f278:	4631      	mov	r1, r6
   1f27a:	f8d8 4020 	ldr.w	r4, [r8, #32]
   1f27e:	ad0e      	add	r5, sp, #56	; 0x38
   1f280:	9500      	str	r5, [sp, #0]
   1f282:	f006 ff07 	bl	26094 <_Unwind_VRS_Get>
   1f286:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f288:	429c      	cmp	r4, r3
   1f28a:	d1d7      	bne.n	1f23c <__gxx_personality_v0+0x15c>
   1f28c:	f108 0a28 	add.w	sl, r8, #40	; 0x28
   1f290:	4631      	mov	r1, r6
   1f292:	4633      	mov	r3, r6
   1f294:	4638      	mov	r0, r7
   1f296:	220c      	movs	r2, #12
   1f298:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
   1f29c:	9500      	str	r5, [sp, #0]
   1f29e:	f006 ff1f 	bl	260e0 <_Unwind_VRS_Set>
   1f2a2:	e89a 0c10 	ldmia.w	sl, {r4, sl, fp}
   1f2a6:	2603      	movs	r6, #3
   1f2a8:	f1bb 0f00 	cmp.w	fp, #0
   1f2ac:	d14a      	bne.n	1f344 <__gxx_personality_v0+0x264>
   1f2ae:	4640      	mov	r0, r8
   1f2b0:	f7f5 fb24 	bl	148fc <__cxa_call_terminate>
   1f2b4:	4640      	mov	r0, r8
   1f2b6:	4611      	mov	r1, r2
   1f2b8:	f007 fdfe 	bl	26eb8 <__gnu_unwind_frame>
   1f2bc:	42a0      	cmp	r0, r4
   1f2be:	bf0c      	ite	eq
   1f2c0:	2008      	moveq	r0, #8
   1f2c2:	2009      	movne	r0, #9
   1f2c4:	e7b2      	b.n	1f22c <__gxx_personality_v0+0x14c>
   1f2c6:	980d      	ldr	r0, [sp, #52]	; 0x34
   1f2c8:	181a      	adds	r2, r3, r0
   1f2ca:	4296      	cmp	r6, r2
   1f2cc:	d35a      	bcc.n	1f384 <__gxx_personality_v0+0x2a4>
   1f2ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f2d0:	e746      	b.n	1f160 <__gxx_personality_v0+0x80>
   1f2d2:	f019 0f08 	tst.w	r9, #8
   1f2d6:	d033      	beq.n	1f340 <__gxx_personality_v0+0x260>
   1f2d8:	2e01      	cmp	r6, #1
   1f2da:	f000 80f5 	beq.w	1f4c8 <__gxx_personality_v0+0x3e8>
   1f2de:	2c00      	cmp	r4, #0
   1f2e0:	f2c0 80ee 	blt.w	1f4c0 <__gxx_personality_v0+0x3e0>
   1f2e4:	2100      	movs	r1, #0
   1f2e6:	4638      	mov	r0, r7
   1f2e8:	460a      	mov	r2, r1
   1f2ea:	460b      	mov	r3, r1
   1f2ec:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
   1f2f0:	9500      	str	r5, [sp, #0]
   1f2f2:	f006 fef5 	bl	260e0 <_Unwind_VRS_Set>
   1f2f6:	2100      	movs	r1, #0
   1f2f8:	2201      	movs	r2, #1
   1f2fa:	460b      	mov	r3, r1
   1f2fc:	4638      	mov	r0, r7
   1f2fe:	940e      	str	r4, [sp, #56]	; 0x38
   1f300:	9500      	str	r5, [sp, #0]
   1f302:	f006 feed 	bl	260e0 <_Unwind_VRS_Set>
   1f306:	2100      	movs	r1, #0
   1f308:	220f      	movs	r2, #15
   1f30a:	460b      	mov	r3, r1
   1f30c:	4638      	mov	r0, r7
   1f30e:	9500      	str	r5, [sp, #0]
   1f310:	f006 fec0 	bl	26094 <_Unwind_VRS_Get>
   1f314:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f316:	2100      	movs	r1, #0
   1f318:	220f      	movs	r2, #15
   1f31a:	4638      	mov	r0, r7
   1f31c:	f003 0401 	and.w	r4, r3, #1
   1f320:	460b      	mov	r3, r1
   1f322:	ea4b 0404 	orr.w	r4, fp, r4
   1f326:	9500      	str	r5, [sp, #0]
   1f328:	940e      	str	r4, [sp, #56]	; 0x38
   1f32a:	f006 fed9 	bl	260e0 <_Unwind_VRS_Set>
   1f32e:	2007      	movs	r0, #7
   1f330:	2e02      	cmp	r6, #2
   1f332:	f47f af7b 	bne.w	1f22c <__gxx_personality_v0+0x14c>
   1f336:	4640      	mov	r0, r8
   1f338:	f7f5 fc40 	bl	14bbc <__cxa_begin_cleanup>
   1f33c:	2007      	movs	r0, #7
   1f33e:	e775      	b.n	1f22c <__gxx_personality_v0+0x14c>
   1f340:	2e01      	cmp	r6, #1
   1f342:	d0b4      	beq.n	1f2ae <__gxx_personality_v0+0x1ce>
   1f344:	2c00      	cmp	r4, #0
   1f346:	dacd      	bge.n	1f2e4 <__gxx_personality_v0+0x204>
   1f348:	4651      	mov	r1, sl
   1f34a:	4638      	mov	r0, r7
   1f34c:	aa05      	add	r2, sp, #20
   1f34e:	f7ff fe7f 	bl	1f050 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1>
   1f352:	9908      	ldr	r1, [sp, #32]
   1f354:	43e3      	mvns	r3, r4
   1f356:	eb01 0083 	add.w	r0, r1, r3, lsl #2
   1f35a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   1f35e:	b133      	cbz	r3, 1f36e <__gxx_personality_v0+0x28e>
   1f360:	4602      	mov	r2, r0
   1f362:	2300      	movs	r3, #0
   1f364:	f852 1f04 	ldr.w	r1, [r2, #4]!
   1f368:	3301      	adds	r3, #1
   1f36a:	2900      	cmp	r1, #0
   1f36c:	d1fa      	bne.n	1f364 <__gxx_personality_v0+0x284>
   1f36e:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
   1f372:	2204      	movs	r2, #4
   1f374:	2300      	movs	r3, #0
   1f376:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
   1f37a:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
   1f37e:	f8c8 0034 	str.w	r0, [r8, #52]	; 0x34
   1f382:	e7af      	b.n	1f2e4 <__gxx_personality_v0+0x204>
   1f384:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f386:	469b      	mov	fp, r3
   1f388:	b113      	cbz	r3, 1f390 <__gxx_personality_v0+0x2b0>
   1f38a:	9a06      	ldr	r2, [sp, #24]
   1f38c:	eb03 0b02 	add.w	fp, r3, r2
   1f390:	4608      	mov	r0, r1
   1f392:	b111      	cbz	r1, 1f39a <__gxx_personality_v0+0x2ba>
   1f394:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f396:	3901      	subs	r1, #1
   1f398:	1858      	adds	r0, r3, r1
   1f39a:	f1bb 0f00 	cmp.w	fp, #0
   1f39e:	f43f af5f 	beq.w	1f260 <__gxx_personality_v0+0x180>
   1f3a2:	2800      	cmp	r0, #0
   1f3a4:	f000 8089 	beq.w	1f4ba <__gxx_personality_v0+0x3da>
   1f3a8:	f019 0608 	ands.w	r6, r9, #8
   1f3ac:	9603      	str	r6, [sp, #12]
   1f3ae:	d07a      	beq.n	1f4a6 <__gxx_personality_v0+0x3c6>
   1f3b0:	2347      	movs	r3, #71	; 0x47
   1f3b2:	224e      	movs	r2, #78	; 0x4e
   1f3b4:	2455      	movs	r4, #85	; 0x55
   1f3b6:	f888 3000 	strb.w	r3, [r8]
   1f3ba:	f888 2001 	strb.w	r2, [r8, #1]
   1f3be:	2643      	movs	r6, #67	; 0x43
   1f3c0:	f888 4002 	strb.w	r4, [r8, #2]
   1f3c4:	2146      	movs	r1, #70	; 0x46
   1f3c6:	234f      	movs	r3, #79	; 0x4f
   1f3c8:	2252      	movs	r2, #82	; 0x52
   1f3ca:	2400      	movs	r4, #0
   1f3cc:	f888 6003 	strb.w	r6, [r8, #3]
   1f3d0:	f888 1004 	strb.w	r1, [r8, #4]
   1f3d4:	f888 3005 	strb.w	r3, [r8, #5]
   1f3d8:	f888 2006 	strb.w	r2, [r8, #6]
   1f3dc:	f888 4007 	strb.w	r4, [r8, #7]
   1f3e0:	46bc      	mov	ip, r7
   1f3e2:	4647      	mov	r7, r8
   1f3e4:	46e0      	mov	r8, ip
   1f3e6:	2100      	movs	r1, #0
   1f3e8:	9102      	str	r1, [sp, #8]
   1f3ea:	a90f      	add	r1, sp, #60	; 0x3c
   1f3ec:	f7ff fd9a 	bl	1ef24 <read_sleb128(unsigned char const*, long*)>
   1f3f0:	a910      	add	r1, sp, #64	; 0x40
   1f3f2:	4606      	mov	r6, r0
   1f3f4:	f7ff fd96 	bl	1ef24 <read_sleb128(unsigned char const*, long*)>
   1f3f8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   1f3fa:	2c00      	cmp	r4, #0
   1f3fc:	4623      	mov	r3, r4
   1f3fe:	d014      	beq.n	1f42a <__gxx_personality_v0+0x34a>
   1f400:	dd1e      	ble.n	1f440 <__gxx_personality_v0+0x360>
   1f402:	9808      	ldr	r0, [sp, #32]
   1f404:	eba0 0384 	sub.w	r3, r0, r4, lsl #2
   1f408:	6819      	ldr	r1, [r3, #0]
   1f40a:	b1a9      	cbz	r1, 1f438 <__gxx_personality_v0+0x358>
   1f40c:	18c9      	adds	r1, r1, r3
   1f40e:	d013      	beq.n	1f438 <__gxx_personality_v0+0x358>
   1f410:	b16f      	cbz	r7, 1f42e <__gxx_personality_v0+0x34e>
   1f412:	4638      	mov	r0, r7
   1f414:	2200      	movs	r2, #0
   1f416:	ab0b      	add	r3, sp, #44	; 0x2c
   1f418:	f7f5 fb72 	bl	14b00 <__cxa_type_match>
   1f41c:	b138      	cbz	r0, 1f42e <__gxx_personality_v0+0x34e>
   1f41e:	46c6      	mov	lr, r8
   1f420:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   1f422:	46b8      	mov	r8, r7
   1f424:	4677      	mov	r7, lr
   1f426:	2603      	movs	r6, #3
   1f428:	e6dc      	b.n	1f1e4 <__gxx_personality_v0+0x104>
   1f42a:	2301      	movs	r3, #1
   1f42c:	9302      	str	r3, [sp, #8]
   1f42e:	9c10      	ldr	r4, [sp, #64]	; 0x40
   1f430:	2c00      	cmp	r4, #0
   1f432:	d029      	beq.n	1f488 <__gxx_personality_v0+0x3a8>
   1f434:	1930      	adds	r0, r6, r4
   1f436:	e7d8      	b.n	1f3ea <__gxx_personality_v0+0x30a>
   1f438:	4646      	mov	r6, r8
   1f43a:	46b8      	mov	r8, r7
   1f43c:	4637      	mov	r7, r6
   1f43e:	e7f2      	b.n	1f426 <__gxx_personality_v0+0x346>
   1f440:	b1bf      	cbz	r7, 1f472 <__gxx_personality_v0+0x392>
   1f442:	9a03      	ldr	r2, [sp, #12]
   1f444:	b9aa      	cbnz	r2, 1f472 <__gxx_personality_v0+0x392>
   1f446:	9a08      	ldr	r2, [sp, #32]
   1f448:	43e1      	mvns	r1, r4
   1f44a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1f44c:	eb02 0481 	add.w	r4, r2, r1, lsl #2
   1f450:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   1f454:	9011      	str	r0, [sp, #68]	; 0x44
   1f456:	b919      	cbnz	r1, 1f460 <__gxx_personality_v0+0x380>
   1f458:	e011      	b.n	1f47e <__gxx_personality_v0+0x39e>
   1f45a:	f854 1f04 	ldr.w	r1, [r4, #4]!
   1f45e:	b1e1      	cbz	r1, 1f49a <__gxx_personality_v0+0x3ba>
   1f460:	4638      	mov	r0, r7
   1f462:	1861      	adds	r1, r4, r1
   1f464:	2200      	movs	r2, #0
   1f466:	ab11      	add	r3, sp, #68	; 0x44
   1f468:	f7f5 fb4a 	bl	14b00 <__cxa_type_match>
   1f46c:	2800      	cmp	r0, #0
   1f46e:	d0f4      	beq.n	1f45a <__gxx_personality_v0+0x37a>
   1f470:	e7dd      	b.n	1f42e <__gxx_personality_v0+0x34e>
   1f472:	9a08      	ldr	r2, [sp, #32]
   1f474:	43d9      	mvns	r1, r3
   1f476:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   1f47a:	2800      	cmp	r0, #0
   1f47c:	d1d7      	bne.n	1f42e <__gxx_personality_v0+0x34e>
   1f47e:	46c4      	mov	ip, r8
   1f480:	461c      	mov	r4, r3
   1f482:	46b8      	mov	r8, r7
   1f484:	4667      	mov	r7, ip
   1f486:	e7ce      	b.n	1f426 <__gxx_personality_v0+0x346>
   1f488:	9802      	ldr	r0, [sp, #8]
   1f48a:	46c6      	mov	lr, r8
   1f48c:	46b8      	mov	r8, r7
   1f48e:	4677      	mov	r7, lr
   1f490:	2800      	cmp	r0, #0
   1f492:	f43f aee5 	beq.w	1f260 <__gxx_personality_v0+0x180>
   1f496:	2602      	movs	r6, #2
   1f498:	e6a4      	b.n	1f1e4 <__gxx_personality_v0+0x104>
   1f49a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f49c:	4644      	mov	r4, r8
   1f49e:	46b8      	mov	r8, r7
   1f4a0:	4627      	mov	r7, r4
   1f4a2:	461c      	mov	r4, r3
   1f4a4:	e7bf      	b.n	1f426 <__gxx_personality_v0+0x346>
   1f4a6:	f898 6007 	ldrb.w	r6, [r8, #7]
   1f4aa:	2e01      	cmp	r6, #1
   1f4ac:	bf14      	ite	ne
   1f4ae:	f108 0658 	addne.w	r6, r8, #88	; 0x58
   1f4b2:	f858 6c20 	ldreq.w	r6, [r8, #-32]
   1f4b6:	960b      	str	r6, [sp, #44]	; 0x2c
   1f4b8:	e792      	b.n	1f3e0 <__gxx_personality_v0+0x300>
   1f4ba:	4604      	mov	r4, r0
   1f4bc:	2602      	movs	r6, #2
   1f4be:	e691      	b.n	1f1e4 <__gxx_personality_v0+0x104>
   1f4c0:	f7f5 fa12 	bl	148e8 <std::unexpected()>
   1f4c4:	f7f5 fbf4 	bl	14cb0 <__cxa_begin_catch>
   1f4c8:	f7f5 fa02 	bl	148d0 <std::terminate()>

0001f4cc <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const>:
   1f4cc:	b570      	push	{r4, r5, r6, lr}
   1f4ce:	4615      	mov	r5, r2
   1f4d0:	6806      	ldr	r6, [r0, #0]
   1f4d2:	b084      	sub	sp, #16
   1f4d4:	2400      	movs	r4, #0
   1f4d6:	2210      	movs	r2, #16
   1f4d8:	466b      	mov	r3, sp
   1f4da:	9202      	str	r2, [sp, #8]
   1f4dc:	9400      	str	r4, [sp, #0]
   1f4de:	f88d 4004 	strb.w	r4, [sp, #4]
   1f4e2:	9403      	str	r4, [sp, #12]
   1f4e4:	69b6      	ldr	r6, [r6, #24]
   1f4e6:	682a      	ldr	r2, [r5, #0]
   1f4e8:	47b0      	blx	r6
   1f4ea:	f89d 1004 	ldrb.w	r1, [sp, #4]
   1f4ee:	f001 0306 	and.w	r3, r1, #6
   1f4f2:	2b06      	cmp	r3, #6
   1f4f4:	bf18      	it	ne
   1f4f6:	4620      	movne	r0, r4
   1f4f8:	d102      	bne.n	1f500 <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const+0x34>
   1f4fa:	9b00      	ldr	r3, [sp, #0]
   1f4fc:	2001      	movs	r0, #1
   1f4fe:	602b      	str	r3, [r5, #0]
   1f500:	b004      	add	sp, #16
   1f502:	bd70      	pop	{r4, r5, r6, pc}

0001f504 <__cxxabiv1::__class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const>:
   1f504:	9800      	ldr	r0, [sp, #0]
   1f506:	4290      	cmp	r0, r2
   1f508:	bf14      	ite	ne
   1f50a:	2001      	movne	r0, #1
   1f50c:	2006      	moveq	r0, #6
   1f50e:	4770      	bx	lr

0001f510 <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>:
   1f510:	b538      	push	{r3, r4, r5, lr}
   1f512:	4614      	mov	r4, r2
   1f514:	461d      	mov	r5, r3
   1f516:	f7f5 fd65 	bl	14fe4 <std::type_info::operator==(std::type_info const&) const>
   1f51a:	b128      	cbz	r0, 1f528 <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const+0x18>
   1f51c:	2001      	movs	r0, #1
   1f51e:	2108      	movs	r1, #8
   1f520:	2306      	movs	r3, #6
   1f522:	602c      	str	r4, [r5, #0]
   1f524:	60e9      	str	r1, [r5, #12]
   1f526:	712b      	strb	r3, [r5, #4]
   1f528:	bd38      	pop	{r3, r4, r5, pc}
   1f52a:	bf00      	nop

0001f52c <__cxxabiv1::__class_type_info::~__class_type_info()>:
   1f52c:	4b03      	ldr	r3, [pc, #12]	; (1f53c <__cxxabiv1::__class_type_info::~__class_type_info()+0x10>)
   1f52e:	b510      	push	{r4, lr}
   1f530:	4604      	mov	r4, r0
   1f532:	6003      	str	r3, [r0, #0]
   1f534:	f7f5 fd40 	bl	14fb8 <std::type_info::~type_info()>
   1f538:	4620      	mov	r0, r4
   1f53a:	bd10      	pop	{r4, pc}
   1f53c:	0002cee8 	.word	0x0002cee8

0001f540 <__cxxabiv1::__class_type_info::~__class_type_info()>:
   1f540:	b510      	push	{r4, lr}
   1f542:	4604      	mov	r4, r0
   1f544:	f7ff fff2 	bl	1f52c <__cxxabiv1::__class_type_info::~__class_type_info()>
   1f548:	4620      	mov	r0, r4
   1f54a:	f7f5 f9a9 	bl	148a0 <operator delete(void*)>
   1f54e:	4620      	mov	r0, r4
   1f550:	bd10      	pop	{r4, pc}
   1f552:	bf00      	nop

0001f554 <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const>:
   1f554:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f556:	b083      	sub	sp, #12
   1f558:	4616      	mov	r6, r2
   1f55a:	4605      	mov	r5, r0
   1f55c:	9c08      	ldr	r4, [sp, #32]
   1f55e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f560:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   1f562:	4294      	cmp	r4, r2
   1f564:	d00b      	beq.n	1f57e <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x2a>
   1f566:	4628      	mov	r0, r5
   1f568:	4619      	mov	r1, r3
   1f56a:	f7f5 fd3b 	bl	14fe4 <std::type_info::operator==(std::type_info const&) const>
   1f56e:	b118      	cbz	r0, 1f578 <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x24>
   1f570:	2301      	movs	r3, #1
   1f572:	603c      	str	r4, [r7, #0]
   1f574:	713e      	strb	r6, [r7, #4]
   1f576:	71bb      	strb	r3, [r7, #6]
   1f578:	2000      	movs	r0, #0
   1f57a:	b003      	add	sp, #12
   1f57c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f57e:	9909      	ldr	r1, [sp, #36]	; 0x24
   1f580:	9301      	str	r3, [sp, #4]
   1f582:	f7f5 fd2f 	bl	14fe4 <std::type_info::operator==(std::type_info const&) const>
   1f586:	9b01      	ldr	r3, [sp, #4]
   1f588:	2800      	cmp	r0, #0
   1f58a:	d0ec      	beq.n	1f566 <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x12>
   1f58c:	717e      	strb	r6, [r7, #5]
   1f58e:	e7f3      	b.n	1f578 <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x24>

0001f590 <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const>:
   1f590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f592:	4605      	mov	r5, r0
   1f594:	460c      	mov	r4, r1
   1f596:	4616      	mov	r6, r2
   1f598:	461f      	mov	r7, r3
   1f59a:	f7f5 fd23 	bl	14fe4 <std::type_info::operator==(std::type_info const&) const>
   1f59e:	b948      	cbnz	r0, 1f5b4 <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const+0x24>
   1f5a0:	2f03      	cmp	r7, #3
   1f5a2:	d900      	bls.n	1f5a6 <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const+0x16>
   1f5a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f5a6:	6823      	ldr	r3, [r4, #0]
   1f5a8:	4620      	mov	r0, r4
   1f5aa:	4629      	mov	r1, r5
   1f5ac:	4632      	mov	r2, r6
   1f5ae:	695b      	ldr	r3, [r3, #20]
   1f5b0:	4798      	blx	r3
   1f5b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f5b4:	2001      	movs	r0, #1
   1f5b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001f5b8 <__cxa_current_exception_type>:
   1f5b8:	b508      	push	{r3, lr}
   1f5ba:	f7f5 fcf7 	bl	14fac <__cxa_get_globals>
   1f5be:	6800      	ldr	r0, [r0, #0]
   1f5c0:	b130      	cbz	r0, 1f5d0 <__cxa_current_exception_type+0x18>
   1f5c2:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   1f5c6:	2b01      	cmp	r3, #1
   1f5c8:	bf04      	itt	eq
   1f5ca:	6800      	ldreq	r0, [r0, #0]
   1f5cc:	3878      	subeq	r0, #120	; 0x78
   1f5ce:	6800      	ldr	r0, [r0, #0]
   1f5d0:	bd08      	pop	{r3, pc}
   1f5d2:	bf00      	nop
   1f5d4:	0000      	movs	r0, r0
	...

0001f5d8 <ceil>:
   1f5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f5dc:	f3c1 560a 	ubfx	r6, r1, #20, #11
   1f5e0:	f5a6 747e 	sub.w	r4, r6, #1016	; 0x3f8
   1f5e4:	b083      	sub	sp, #12
   1f5e6:	3c07      	subs	r4, #7
   1f5e8:	4680      	mov	r8, r0
   1f5ea:	2c13      	cmp	r4, #19
   1f5ec:	4689      	mov	r9, r1
   1f5ee:	4682      	mov	sl, r0
   1f5f0:	dc21      	bgt.n	1f636 <ceil+0x5e>
   1f5f2:	2c00      	cmp	r4, #0
   1f5f4:	db56      	blt.n	1f6a4 <ceil+0xcc>
   1f5f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1f5fa:	f2c0 030f 	movt	r3, #15
   1f5fe:	fa43 f604 	asr.w	r6, r3, r4
   1f602:	ea06 0501 	and.w	r5, r6, r1
   1f606:	4305      	orrs	r5, r0
   1f608:	d010      	beq.n	1f62c <ceil+0x54>
   1f60a:	a33d      	add	r3, pc, #244	; (adr r3, 1f700 <ceil+0x128>)
   1f60c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f610:	9101      	str	r1, [sp, #4]
   1f612:	f7f3 fd17 	bl	13044 <__adddf3>
   1f616:	2200      	movs	r2, #0
   1f618:	2300      	movs	r3, #0
   1f61a:	f006 fba7 	bl	25d6c <__aeabi_dcmpgt>
   1f61e:	f8dd c004 	ldr.w	ip, [sp, #4]
   1f622:	2800      	cmp	r0, #0
   1f624:	d15f      	bne.n	1f6e6 <ceil+0x10e>
   1f626:	46cc      	mov	ip, r9
   1f628:	46e1      	mov	r9, ip
   1f62a:	46d0      	mov	r8, sl
   1f62c:	4640      	mov	r0, r8
   1f62e:	4649      	mov	r1, r9
   1f630:	b003      	add	sp, #12
   1f632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f636:	2c33      	cmp	r4, #51	; 0x33
   1f638:	dd09      	ble.n	1f64e <ceil+0x76>
   1f63a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   1f63e:	d1f5      	bne.n	1f62c <ceil+0x54>
   1f640:	4602      	mov	r2, r0
   1f642:	460b      	mov	r3, r1
   1f644:	f7f3 fcfe 	bl	13044 <__adddf3>
   1f648:	4680      	mov	r8, r0
   1f64a:	4689      	mov	r9, r1
   1f64c:	e7ee      	b.n	1f62c <ceil+0x54>
   1f64e:	f5a6 6382 	sub.w	r3, r6, #1040	; 0x410
   1f652:	f04f 32ff 	mov.w	r2, #4294967295
   1f656:	3b03      	subs	r3, #3
   1f658:	fa22 f503 	lsr.w	r5, r2, r3
   1f65c:	4205      	tst	r5, r0
   1f65e:	d0e5      	beq.n	1f62c <ceil+0x54>
   1f660:	a327      	add	r3, pc, #156	; (adr r3, 1f700 <ceil+0x128>)
   1f662:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f666:	9101      	str	r1, [sp, #4]
   1f668:	f7f3 fcec 	bl	13044 <__adddf3>
   1f66c:	2200      	movs	r2, #0
   1f66e:	2300      	movs	r3, #0
   1f670:	f006 fb7c 	bl	25d6c <__aeabi_dcmpgt>
   1f674:	f8dd c004 	ldr.w	ip, [sp, #4]
   1f678:	2800      	cmp	r0, #0
   1f67a:	d0d4      	beq.n	1f626 <ceil+0x4e>
   1f67c:	f1bc 0f00 	cmp.w	ip, #0
   1f680:	dd0d      	ble.n	1f69e <ceil+0xc6>
   1f682:	2c14      	cmp	r4, #20
   1f684:	d009      	beq.n	1f69a <ceil+0xc2>
   1f686:	f5c6 6686 	rsb	r6, r6, #1072	; 0x430
   1f68a:	f04f 0a01 	mov.w	sl, #1
   1f68e:	3603      	adds	r6, #3
   1f690:	fa0a fa06 	lsl.w	sl, sl, r6
   1f694:	eb1a 0a08 	adds.w	sl, sl, r8
   1f698:	d301      	bcc.n	1f69e <ceil+0xc6>
   1f69a:	f10c 0c01 	add.w	ip, ip, #1
   1f69e:	ea2a 0a05 	bic.w	sl, sl, r5
   1f6a2:	e7c1      	b.n	1f628 <ceil+0x50>
   1f6a4:	a316      	add	r3, pc, #88	; (adr r3, 1f700 <ceil+0x128>)
   1f6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f6aa:	f7f3 fccb 	bl	13044 <__adddf3>
   1f6ae:	2200      	movs	r2, #0
   1f6b0:	2300      	movs	r3, #0
   1f6b2:	f006 fb5b 	bl	25d6c <__aeabi_dcmpgt>
   1f6b6:	2800      	cmp	r0, #0
   1f6b8:	d0b5      	beq.n	1f626 <ceil+0x4e>
   1f6ba:	f1b9 0f00 	cmp.w	r9, #0
   1f6be:	bfbc      	itt	lt
   1f6c0:	f04f 0a00 	movlt.w	sl, #0
   1f6c4:	f04f 4c00 	movlt.w	ip, #2147483648	; 0x80000000
   1f6c8:	dbae      	blt.n	1f628 <ceil+0x50>
   1f6ca:	ea48 0509 	orr.w	r5, r8, r9
   1f6ce:	f04f 0c00 	mov.w	ip, #0
   1f6d2:	4565      	cmp	r5, ip
   1f6d4:	f6c3 7cf0 	movt	ip, #16368	; 0x3ff0
   1f6d8:	bf0c      	ite	eq
   1f6da:	46aa      	moveq	sl, r5
   1f6dc:	f04f 0a00 	movne.w	sl, #0
   1f6e0:	bf08      	it	eq
   1f6e2:	46ac      	moveq	ip, r5
   1f6e4:	e7a0      	b.n	1f628 <ceil+0x50>
   1f6e6:	f1bc 0f00 	cmp.w	ip, #0
   1f6ea:	f04f 0a00 	mov.w	sl, #0
   1f6ee:	bfc2      	ittt	gt
   1f6f0:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
   1f6f4:	fa43 f404 	asrgt.w	r4, r3, r4
   1f6f8:	44a4      	addgt	ip, r4
   1f6fa:	ea2c 0c06 	bic.w	ip, ip, r6
   1f6fe:	e793      	b.n	1f628 <ceil+0x50>
   1f700:	8800759c 	.word	0x8800759c
   1f704:	7e37e43c 	.word	0x7e37e43c

0001f708 <sqrt>:
   1f708:	e92d 4fd0 	stmdb	sp!, {r4, r6, r7, r8, r9, sl, fp, lr}
   1f70c:	b08a      	sub	sp, #40	; 0x28
   1f70e:	4606      	mov	r6, r0
   1f710:	460f      	mov	r7, r1
   1f712:	f000 f84f 	bl	1f7b4 <__ieee754_sqrt>
   1f716:	f240 0424 	movw	r4, #36	; 0x24
   1f71a:	f2c1 0400 	movt	r4, #4096	; 0x1000
   1f71e:	f994 3000 	ldrsb.w	r3, [r4]
   1f722:	3301      	adds	r3, #1
   1f724:	4680      	mov	r8, r0
   1f726:	4689      	mov	r9, r1
   1f728:	d031      	beq.n	1f78e <sqrt+0x86>
   1f72a:	4630      	mov	r0, r6
   1f72c:	4639      	mov	r1, r7
   1f72e:	f000 f91d 	bl	1f96c <__fpclassifyd>
   1f732:	2800      	cmp	r0, #0
   1f734:	d02b      	beq.n	1f78e <sqrt+0x86>
   1f736:	f04f 0a00 	mov.w	sl, #0
   1f73a:	f04f 0b00 	mov.w	fp, #0
   1f73e:	4630      	mov	r0, r6
   1f740:	4639      	mov	r1, r7
   1f742:	4652      	mov	r2, sl
   1f744:	465b      	mov	r3, fp
   1f746:	f006 faf3 	bl	25d30 <__aeabi_dcmplt>
   1f74a:	b300      	cbz	r0, 1f78e <sqrt+0x86>
   1f74c:	7824      	ldrb	r4, [r4, #0]
   1f74e:	f64c 7340 	movw	r3, #53056	; 0xcf40
   1f752:	f2c0 0302 	movt	r3, #2
   1f756:	2201      	movs	r2, #1
   1f758:	e9cd 6704 	strd	r6, r7, [sp, #16]
   1f75c:	e88d 000c 	stmia.w	sp, {r2, r3}
   1f760:	2300      	movs	r3, #0
   1f762:	e9cd 6702 	strd	r6, r7, [sp, #8]
   1f766:	9308      	str	r3, [sp, #32]
   1f768:	b1b4      	cbz	r4, 1f798 <sqrt+0x90>
   1f76a:	4650      	mov	r0, sl
   1f76c:	4659      	mov	r1, fp
   1f76e:	4652      	mov	r2, sl
   1f770:	465b      	mov	r3, fp
   1f772:	f7f3 ff43 	bl	135fc <__aeabi_ddiv>
   1f776:	2c02      	cmp	r4, #2
   1f778:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1f77c:	d10e      	bne.n	1f79c <sqrt+0x94>
   1f77e:	f000 f953 	bl	1fa28 <__errno>
   1f782:	2321      	movs	r3, #33	; 0x21
   1f784:	6003      	str	r3, [r0, #0]
   1f786:	9b08      	ldr	r3, [sp, #32]
   1f788:	b973      	cbnz	r3, 1f7a8 <sqrt+0xa0>
   1f78a:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
   1f78e:	4640      	mov	r0, r8
   1f790:	4649      	mov	r1, r9
   1f792:	b00a      	add	sp, #40	; 0x28
   1f794:	e8bd 8fd0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, sl, fp, pc}
   1f798:	e9cd ab06 	strd	sl, fp, [sp, #24]
   1f79c:	4668      	mov	r0, sp
   1f79e:	f000 f92f 	bl	1fa00 <matherr>
   1f7a2:	2800      	cmp	r0, #0
   1f7a4:	d1ef      	bne.n	1f786 <sqrt+0x7e>
   1f7a6:	e7ea      	b.n	1f77e <sqrt+0x76>
   1f7a8:	f000 f93e 	bl	1fa28 <__errno>
   1f7ac:	9b08      	ldr	r3, [sp, #32]
   1f7ae:	6003      	str	r3, [r0, #0]
   1f7b0:	e7eb      	b.n	1f78a <sqrt+0x82>
   1f7b2:	bf00      	nop

0001f7b4 <__ieee754_sqrt>:
   1f7b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f7b8:	2400      	movs	r4, #0
   1f7ba:	4625      	mov	r5, r4
   1f7bc:	f6c7 74f0 	movt	r4, #32752	; 0x7ff0
   1f7c0:	f6c7 75f0 	movt	r5, #32752	; 0x7ff0
   1f7c4:	400c      	ands	r4, r1
   1f7c6:	42ac      	cmp	r4, r5
   1f7c8:	4606      	mov	r6, r0
   1f7ca:	460f      	mov	r7, r1
   1f7cc:	4689      	mov	r9, r1
   1f7ce:	460b      	mov	r3, r1
   1f7d0:	4602      	mov	r2, r0
   1f7d2:	f000 80ab 	beq.w	1f92c <__ieee754_sqrt+0x178>
   1f7d6:	2900      	cmp	r1, #0
   1f7d8:	dd7f      	ble.n	1f8da <__ieee754_sqrt+0x126>
   1f7da:	1509      	asrs	r1, r1, #20
   1f7dc:	f000 8088 	beq.w	1f8f0 <__ieee754_sqrt+0x13c>
   1f7e0:	f5a1 7c7e 	sub.w	ip, r1, #1016	; 0x3f8
   1f7e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1f7e8:	07c9      	lsls	r1, r1, #31
   1f7ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
   1f7ee:	f1ac 0c07 	sub.w	ip, ip, #7
   1f7f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1f7f6:	d562      	bpl.n	1f8be <__ieee754_sqrt+0x10a>
   1f7f8:	0fd1      	lsrs	r1, r2, #31
   1f7fa:	2700      	movs	r7, #0
   1f7fc:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   1f800:	ea4f 0c6c 	mov.w	ip, ip, asr #1
   1f804:	0052      	lsls	r2, r2, #1
   1f806:	2416      	movs	r4, #22
   1f808:	4638      	mov	r0, r7
   1f80a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   1f80e:	1845      	adds	r5, r0, r1
   1f810:	0fd6      	lsrs	r6, r2, #31
   1f812:	429d      	cmp	r5, r3
   1f814:	ea4f 0242 	mov.w	r2, r2, lsl #1
   1f818:	bfde      	ittt	le
   1f81a:	ebc5 0303 	rsble	r3, r5, r3
   1f81e:	1868      	addle	r0, r5, r1
   1f820:	187f      	addle	r7, r7, r1
   1f822:	0849      	lsrs	r1, r1, #1
   1f824:	3c01      	subs	r4, #1
   1f826:	eb06 0343 	add.w	r3, r6, r3, lsl #1
   1f82a:	d1f0      	bne.n	1f80e <__ieee754_sqrt+0x5a>
   1f82c:	2620      	movs	r6, #32
   1f82e:	46a0      	mov	r8, r4
   1f830:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   1f834:	4298      	cmp	r0, r3
   1f836:	eb01 0508 	add.w	r5, r1, r8
   1f83a:	db0e      	blt.n	1f85a <__ieee754_sqrt+0xa6>
   1f83c:	4283      	cmp	r3, r0
   1f83e:	bf14      	ite	ne
   1f840:	f04f 0900 	movne.w	r9, #0
   1f844:	f04f 0901 	moveq.w	r9, #1
   1f848:	4295      	cmp	r5, r2
   1f84a:	bf8c      	ite	hi
   1f84c:	f04f 0900 	movhi.w	r9, #0
   1f850:	f009 0901 	andls.w	r9, r9, #1
   1f854:	f1b9 0f00 	cmp.w	r9, #0
   1f858:	d00e      	beq.n	1f878 <__ieee754_sqrt+0xc4>
   1f85a:	f005 4900 	and.w	r9, r5, #2147483648	; 0x80000000
   1f85e:	eb05 0801 	add.w	r8, r5, r1
   1f862:	f1b9 4f00 	cmp.w	r9, #2147483648	; 0x80000000
   1f866:	d023      	beq.n	1f8b0 <__ieee754_sqrt+0xfc>
   1f868:	4681      	mov	r9, r0
   1f86a:	1a1b      	subs	r3, r3, r0
   1f86c:	4295      	cmp	r5, r2
   1f86e:	bf88      	it	hi
   1f870:	3b01      	subhi	r3, #1
   1f872:	1b52      	subs	r2, r2, r5
   1f874:	1864      	adds	r4, r4, r1
   1f876:	4648      	mov	r0, r9
   1f878:	0fd5      	lsrs	r5, r2, #31
   1f87a:	0849      	lsrs	r1, r1, #1
   1f87c:	0052      	lsls	r2, r2, #1
   1f87e:	3e01      	subs	r6, #1
   1f880:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   1f884:	d1d6      	bne.n	1f834 <__ieee754_sqrt+0x80>
   1f886:	4313      	orrs	r3, r2
   1f888:	d11e      	bne.n	1f8c8 <__ieee754_sqrt+0x114>
   1f88a:	0864      	lsrs	r4, r4, #1
   1f88c:	107b      	asrs	r3, r7, #1
   1f88e:	07fa      	lsls	r2, r7, #31
   1f890:	f103 537e 	add.w	r3, r3, #1065353216	; 0x3f800000
   1f894:	bf48      	it	mi
   1f896:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
   1f89a:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
   1f89e:	ea4f 5c0c 	mov.w	ip, ip, lsl #20
   1f8a2:	eb0c 0703 	add.w	r7, ip, r3
   1f8a6:	4626      	mov	r6, r4
   1f8a8:	4630      	mov	r0, r6
   1f8aa:	4639      	mov	r1, r7
   1f8ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1f8b0:	f1b8 0f00 	cmp.w	r8, #0
   1f8b4:	bfa8      	it	ge
   1f8b6:	f100 0901 	addge.w	r9, r0, #1
   1f8ba:	dad6      	bge.n	1f86a <__ieee754_sqrt+0xb6>
   1f8bc:	e7d4      	b.n	1f868 <__ieee754_sqrt+0xb4>
   1f8be:	0fd1      	lsrs	r1, r2, #31
   1f8c0:	0052      	lsls	r2, r2, #1
   1f8c2:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   1f8c6:	e797      	b.n	1f7f8 <__ieee754_sqrt+0x44>
   1f8c8:	1c61      	adds	r1, r4, #1
   1f8ca:	bf1c      	itt	ne
   1f8cc:	f004 0301 	andne.w	r3, r4, #1
   1f8d0:	191c      	addne	r4, r3, r4
   1f8d2:	d1da      	bne.n	1f88a <__ieee754_sqrt+0xd6>
   1f8d4:	3701      	adds	r7, #1
   1f8d6:	4634      	mov	r4, r6
   1f8d8:	e7d8      	b.n	1f88c <__ieee754_sqrt+0xd8>
   1f8da:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
   1f8de:	4304      	orrs	r4, r0
   1f8e0:	d0e2      	beq.n	1f8a8 <__ieee754_sqrt+0xf4>
   1f8e2:	2900      	cmp	r1, #0
   1f8e4:	d136      	bne.n	1f954 <__ieee754_sqrt+0x1a0>
   1f8e6:	0ad3      	lsrs	r3, r2, #11
   1f8e8:	3915      	subs	r1, #21
   1f8ea:	0552      	lsls	r2, r2, #21
   1f8ec:	2b00      	cmp	r3, #0
   1f8ee:	d0fa      	beq.n	1f8e6 <__ieee754_sqrt+0x132>
   1f8f0:	f413 1080 	ands.w	r0, r3, #1048576	; 0x100000
   1f8f4:	d12a      	bne.n	1f94c <__ieee754_sqrt+0x198>
   1f8f6:	005b      	lsls	r3, r3, #1
   1f8f8:	3001      	adds	r0, #1
   1f8fa:	02dc      	lsls	r4, r3, #11
   1f8fc:	d5fb      	bpl.n	1f8f6 <__ieee754_sqrt+0x142>
   1f8fe:	f1c0 0501 	rsb	r5, r0, #1
   1f902:	f1c0 0420 	rsb	r4, r0, #32
   1f906:	fa22 f404 	lsr.w	r4, r2, r4
   1f90a:	1949      	adds	r1, r1, r5
   1f90c:	4323      	orrs	r3, r4
   1f90e:	f5a1 7c7e 	sub.w	ip, r1, #1016	; 0x3f8
   1f912:	4082      	lsls	r2, r0
   1f914:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1f918:	07c9      	lsls	r1, r1, #31
   1f91a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
   1f91e:	f1ac 0c07 	sub.w	ip, ip, #7
   1f922:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1f926:	f53f af67 	bmi.w	1f7f8 <__ieee754_sqrt+0x44>
   1f92a:	e7c8      	b.n	1f8be <__ieee754_sqrt+0x10a>
   1f92c:	4602      	mov	r2, r0
   1f92e:	460b      	mov	r3, r1
   1f930:	f7f3 fd3a 	bl	133a8 <__aeabi_dmul>
   1f934:	4602      	mov	r2, r0
   1f936:	460b      	mov	r3, r1
   1f938:	4630      	mov	r0, r6
   1f93a:	4639      	mov	r1, r7
   1f93c:	f7f3 fb82 	bl	13044 <__adddf3>
   1f940:	4606      	mov	r6, r0
   1f942:	460f      	mov	r7, r1
   1f944:	4630      	mov	r0, r6
   1f946:	4639      	mov	r1, r7
   1f948:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1f94c:	2420      	movs	r4, #32
   1f94e:	2501      	movs	r5, #1
   1f950:	2000      	movs	r0, #0
   1f952:	e7d8      	b.n	1f906 <__ieee754_sqrt+0x152>
   1f954:	4602      	mov	r2, r0
   1f956:	460b      	mov	r3, r1
   1f958:	f7f3 fb72 	bl	13040 <__aeabi_dsub>
   1f95c:	4602      	mov	r2, r0
   1f95e:	460b      	mov	r3, r1
   1f960:	f7f3 fe4c 	bl	135fc <__aeabi_ddiv>
   1f964:	4606      	mov	r6, r0
   1f966:	460f      	mov	r7, r1
   1f968:	e79e      	b.n	1f8a8 <__ieee754_sqrt+0xf4>
   1f96a:	bf00      	nop

0001f96c <__fpclassifyd>:
   1f96c:	460b      	mov	r3, r1
   1f96e:	ea50 0103 	orrs.w	r1, r0, r3
   1f972:	b410      	push	{r4}
   1f974:	d102      	bne.n	1f97c <__fpclassifyd+0x10>
   1f976:	2002      	movs	r0, #2
   1f978:	bc10      	pop	{r4}
   1f97a:	4770      	bx	lr
   1f97c:	f1d0 0201 	rsbs	r2, r0, #1
   1f980:	bf38      	it	cc
   1f982:	2200      	movcc	r2, #0
   1f984:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1f988:	bf14      	ite	ne
   1f98a:	2100      	movne	r1, #0
   1f98c:	f002 0101 	andeq.w	r1, r2, #1
   1f990:	2900      	cmp	r1, #0
   1f992:	d1f0      	bne.n	1f976 <__fpclassifyd+0xa>
   1f994:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1f998:	f5a3 1080 	sub.w	r0, r3, #1048576	; 0x100000
   1f99c:	f6c7 71df 	movt	r1, #32735	; 0x7fdf
   1f9a0:	f103 44fe 	add.w	r4, r3, #2130706432	; 0x7f000000
   1f9a4:	4288      	cmp	r0, r1
   1f9a6:	f504 0470 	add.w	r4, r4, #15728640	; 0xf00000
   1f9aa:	bf8c      	ite	hi
   1f9ac:	2000      	movhi	r0, #0
   1f9ae:	2001      	movls	r0, #1
   1f9b0:	428c      	cmp	r4, r1
   1f9b2:	bf8c      	ite	hi
   1f9b4:	4601      	movhi	r1, r0
   1f9b6:	f040 0101 	orrls.w	r1, r0, #1
   1f9ba:	b109      	cbz	r1, 1f9c0 <__fpclassifyd+0x54>
   1f9bc:	2004      	movs	r0, #4
   1f9be:	e7db      	b.n	1f978 <__fpclassifyd+0xc>
   1f9c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1f9c4:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   1f9c8:	bf2c      	ite	cs
   1f9ca:	2000      	movcs	r0, #0
   1f9cc:	2001      	movcc	r0, #1
   1f9ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1f9d2:	bf2c      	ite	cs
   1f9d4:	4601      	movcs	r1, r0
   1f9d6:	f040 0101 	orrcc.w	r1, r0, #1
   1f9da:	b109      	cbz	r1, 1f9e0 <__fpclassifyd+0x74>
   1f9dc:	2003      	movs	r0, #3
   1f9de:	e7cb      	b.n	1f978 <__fpclassifyd+0xc>
   1f9e0:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
   1f9e4:	f6c7 71f0 	movt	r1, #32752	; 0x7ff0
   1f9e8:	bf14      	ite	ne
   1f9ea:	2000      	movne	r0, #0
   1f9ec:	2001      	moveq	r0, #1
   1f9ee:	428b      	cmp	r3, r1
   1f9f0:	bf14      	ite	ne
   1f9f2:	4603      	movne	r3, r0
   1f9f4:	f040 0301 	orreq.w	r3, r0, #1
   1f9f8:	ea02 0003 	and.w	r0, r2, r3
   1f9fc:	e7bc      	b.n	1f978 <__fpclassifyd+0xc>
   1f9fe:	bf00      	nop

0001fa00 <matherr>:
   1fa00:	2000      	movs	r0, #0
   1fa02:	4770      	bx	lr

0001fa04 <abort>:
   1fa04:	b508      	push	{r3, lr}
   1fa06:	2006      	movs	r0, #6
   1fa08:	f001 fa5e 	bl	20ec8 <raise>
   1fa0c:	2001      	movs	r0, #1
   1fa0e:	f7e6 fbcb 	bl	61a8 <_exit>
   1fa12:	bf00      	nop

0001fa14 <__cxa_atexit>:
   1fa14:	b430      	push	{r4, r5}
   1fa16:	4605      	mov	r5, r0
   1fa18:	460c      	mov	r4, r1
   1fa1a:	4613      	mov	r3, r2
   1fa1c:	2002      	movs	r0, #2
   1fa1e:	4629      	mov	r1, r5
   1fa20:	4622      	mov	r2, r4
   1fa22:	bc30      	pop	{r4, r5}
   1fa24:	f003 b91a 	b.w	22c5c <__register_exitproc>

0001fa28 <__errno>:
   1fa28:	f240 0328 	movw	r3, #40	; 0x28
   1fa2c:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1fa30:	6818      	ldr	r0, [r3, #0]
   1fa32:	4770      	bx	lr

0001fa34 <_fputc_r>:
   1fa34:	b510      	push	{r4, lr}
   1fa36:	4604      	mov	r4, r0
   1fa38:	b082      	sub	sp, #8
   1fa3a:	b108      	cbz	r0, 1fa40 <_fputc_r+0xc>
   1fa3c:	6983      	ldr	r3, [r0, #24]
   1fa3e:	b1e3      	cbz	r3, 1fa7a <_fputc_r+0x46>
   1fa40:	f24d 1308 	movw	r3, #53512	; 0xd108
   1fa44:	f2c0 0302 	movt	r3, #2
   1fa48:	429a      	cmp	r2, r3
   1fa4a:	bf08      	it	eq
   1fa4c:	6862      	ldreq	r2, [r4, #4]
   1fa4e:	d00e      	beq.n	1fa6e <_fputc_r+0x3a>
   1fa50:	f24d 03e8 	movw	r3, #53480	; 0xd0e8
   1fa54:	f2c0 0302 	movt	r3, #2
   1fa58:	429a      	cmp	r2, r3
   1fa5a:	bf08      	it	eq
   1fa5c:	68a2      	ldreq	r2, [r4, #8]
   1fa5e:	d006      	beq.n	1fa6e <_fputc_r+0x3a>
   1fa60:	f24d 03c8 	movw	r3, #53448	; 0xd0c8
   1fa64:	f2c0 0302 	movt	r3, #2
   1fa68:	429a      	cmp	r2, r3
   1fa6a:	bf08      	it	eq
   1fa6c:	68e2      	ldreq	r2, [r4, #12]
   1fa6e:	4620      	mov	r0, r4
   1fa70:	b002      	add	sp, #8
   1fa72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1fa76:	f000 befb 	b.w	20870 <_putc_r>
   1fa7a:	9101      	str	r1, [sp, #4]
   1fa7c:	9200      	str	r2, [sp, #0]
   1fa7e:	f004 fab5 	bl	23fec <__sinit>
   1fa82:	9a00      	ldr	r2, [sp, #0]
   1fa84:	9901      	ldr	r1, [sp, #4]
   1fa86:	e7db      	b.n	1fa40 <_fputc_r+0xc>

0001fa88 <fputc>:
   1fa88:	b570      	push	{r4, r5, r6, lr}
   1fa8a:	f240 0528 	movw	r5, #40	; 0x28
   1fa8e:	f2c1 0500 	movt	r5, #4096	; 0x1000
   1fa92:	4606      	mov	r6, r0
   1fa94:	460c      	mov	r4, r1
   1fa96:	6828      	ldr	r0, [r5, #0]
   1fa98:	b108      	cbz	r0, 1fa9e <fputc+0x16>
   1fa9a:	6983      	ldr	r3, [r0, #24]
   1fa9c:	b1e3      	cbz	r3, 1fad8 <fputc+0x50>
   1fa9e:	f24d 1308 	movw	r3, #53512	; 0xd108
   1faa2:	f2c0 0302 	movt	r3, #2
   1faa6:	429c      	cmp	r4, r3
   1faa8:	bf08      	it	eq
   1faaa:	6844      	ldreq	r4, [r0, #4]
   1faac:	d00e      	beq.n	1facc <fputc+0x44>
   1faae:	f24d 03e8 	movw	r3, #53480	; 0xd0e8
   1fab2:	f2c0 0302 	movt	r3, #2
   1fab6:	429c      	cmp	r4, r3
   1fab8:	bf08      	it	eq
   1faba:	6884      	ldreq	r4, [r0, #8]
   1fabc:	d006      	beq.n	1facc <fputc+0x44>
   1fabe:	f24d 03c8 	movw	r3, #53448	; 0xd0c8
   1fac2:	f2c0 0302 	movt	r3, #2
   1fac6:	429c      	cmp	r4, r3
   1fac8:	bf08      	it	eq
   1faca:	68c4      	ldreq	r4, [r0, #12]
   1facc:	4631      	mov	r1, r6
   1face:	4622      	mov	r2, r4
   1fad0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1fad4:	f000 becc 	b.w	20870 <_putc_r>
   1fad8:	f004 fa88 	bl	23fec <__sinit>
   1fadc:	6828      	ldr	r0, [r5, #0]
   1fade:	e7de      	b.n	1fa9e <fputc+0x16>

0001fae0 <_fputs_r>:
   1fae0:	b530      	push	{r4, r5, lr}
   1fae2:	b087      	sub	sp, #28
   1fae4:	4604      	mov	r4, r0
   1fae6:	4608      	mov	r0, r1
   1fae8:	4615      	mov	r5, r2
   1faea:	9104      	str	r1, [sp, #16]
   1faec:	f001 fc56 	bl	2139c <strlen>
   1faf0:	ab04      	add	r3, sp, #16
   1faf2:	9301      	str	r3, [sp, #4]
   1faf4:	2301      	movs	r3, #1
   1faf6:	9302      	str	r3, [sp, #8]
   1faf8:	9003      	str	r0, [sp, #12]
   1fafa:	9005      	str	r0, [sp, #20]
   1fafc:	b114      	cbz	r4, 1fb04 <_fputs_r+0x24>
   1fafe:	69a3      	ldr	r3, [r4, #24]
   1fb00:	2b00      	cmp	r3, #0
   1fb02:	d028      	beq.n	1fb56 <_fputs_r+0x76>
   1fb04:	f24d 1308 	movw	r3, #53512	; 0xd108
   1fb08:	f2c0 0302 	movt	r3, #2
   1fb0c:	429d      	cmp	r5, r3
   1fb0e:	bf08      	it	eq
   1fb10:	6865      	ldreq	r5, [r4, #4]
   1fb12:	d00e      	beq.n	1fb32 <_fputs_r+0x52>
   1fb14:	f24d 03e8 	movw	r3, #53480	; 0xd0e8
   1fb18:	f2c0 0302 	movt	r3, #2
   1fb1c:	429d      	cmp	r5, r3
   1fb1e:	bf08      	it	eq
   1fb20:	68a5      	ldreq	r5, [r4, #8]
   1fb22:	d006      	beq.n	1fb32 <_fputs_r+0x52>
   1fb24:	f24d 03c8 	movw	r3, #53448	; 0xd0c8
   1fb28:	f2c0 0302 	movt	r3, #2
   1fb2c:	429d      	cmp	r5, r3
   1fb2e:	bf08      	it	eq
   1fb30:	68e5      	ldreq	r5, [r4, #12]
   1fb32:	89ab      	ldrh	r3, [r5, #12]
   1fb34:	4620      	mov	r0, r4
   1fb36:	4629      	mov	r1, r5
   1fb38:	049a      	lsls	r2, r3, #18
   1fb3a:	bf5f      	itttt	pl
   1fb3c:	f443 5300 	orrpl.w	r3, r3, #8192	; 0x2000
   1fb40:	81ab      	strhpl	r3, [r5, #12]
   1fb42:	6e6a      	ldrpl	r2, [r5, #100]	; 0x64
   1fb44:	f422 5300 	bicpl.w	r3, r2, #8192	; 0x2000
   1fb48:	aa01      	add	r2, sp, #4
   1fb4a:	bf58      	it	pl
   1fb4c:	666b      	strpl	r3, [r5, #100]	; 0x64
   1fb4e:	f000 f811 	bl	1fb74 <__sfvwrite_r>
   1fb52:	b007      	add	sp, #28
   1fb54:	bd30      	pop	{r4, r5, pc}
   1fb56:	4620      	mov	r0, r4
   1fb58:	f004 fa48 	bl	23fec <__sinit>
   1fb5c:	e7d2      	b.n	1fb04 <_fputs_r+0x24>
   1fb5e:	bf00      	nop

0001fb60 <fputs>:
   1fb60:	f240 0328 	movw	r3, #40	; 0x28
   1fb64:	460a      	mov	r2, r1
   1fb66:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1fb6a:	4601      	mov	r1, r0
   1fb6c:	6818      	ldr	r0, [r3, #0]
   1fb6e:	f7ff bfb7 	b.w	1fae0 <_fputs_r>
   1fb72:	bf00      	nop

0001fb74 <__sfvwrite_r>:
   1fb74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fb78:	b085      	sub	sp, #20
   1fb7a:	4690      	mov	r8, r2
   1fb7c:	460c      	mov	r4, r1
   1fb7e:	9001      	str	r0, [sp, #4]
   1fb80:	6890      	ldr	r0, [r2, #8]
   1fb82:	2800      	cmp	r0, #0
   1fb84:	d04b      	beq.n	1fc1e <__sfvwrite_r+0xaa>
   1fb86:	898b      	ldrh	r3, [r1, #12]
   1fb88:	0718      	lsls	r0, r3, #28
   1fb8a:	d569      	bpl.n	1fc60 <__sfvwrite_r+0xec>
   1fb8c:	690a      	ldr	r2, [r1, #16]
   1fb8e:	2a00      	cmp	r2, #0
   1fb90:	d066      	beq.n	1fc60 <__sfvwrite_r+0xec>
   1fb92:	f013 0b02 	ands.w	fp, r3, #2
   1fb96:	f8d8 5000 	ldr.w	r5, [r8]
   1fb9a:	bf1c      	itt	ne
   1fb9c:	f04f 0900 	movne.w	r9, #0
   1fba0:	464f      	movne	r7, r9
   1fba2:	d143      	bne.n	1fc2c <__sfvwrite_r+0xb8>
   1fba4:	f013 0901 	ands.w	r9, r3, #1
   1fba8:	bf1e      	ittt	ne
   1fbaa:	46dc      	movne	ip, fp
   1fbac:	46da      	movne	sl, fp
   1fbae:	465f      	movne	r7, fp
   1fbb0:	f000 80b3 	beq.w	1fd1a <__sfvwrite_r+0x1a6>
   1fbb4:	2f00      	cmp	r7, #0
   1fbb6:	d063      	beq.n	1fc80 <__sfvwrite_r+0x10c>
   1fbb8:	f1bc 0f00 	cmp.w	ip, #0
   1fbbc:	f000 8081 	beq.w	1fcc2 <__sfvwrite_r+0x14e>
   1fbc0:	6922      	ldr	r2, [r4, #16]
   1fbc2:	45bb      	cmp	fp, r7
   1fbc4:	bf34      	ite	cc
   1fbc6:	46d9      	movcc	r9, fp
   1fbc8:	46b9      	movcs	r9, r7
   1fbca:	6820      	ldr	r0, [r4, #0]
   1fbcc:	6963      	ldr	r3, [r4, #20]
   1fbce:	68a6      	ldr	r6, [r4, #8]
   1fbd0:	4290      	cmp	r0, r2
   1fbd2:	bf94      	ite	ls
   1fbd4:	2200      	movls	r2, #0
   1fbd6:	2201      	movhi	r2, #1
   1fbd8:	199e      	adds	r6, r3, r6
   1fbda:	45b1      	cmp	r9, r6
   1fbdc:	bfd4      	ite	le
   1fbde:	2200      	movle	r2, #0
   1fbe0:	f002 0201 	andgt.w	r2, r2, #1
   1fbe4:	2a00      	cmp	r2, #0
   1fbe6:	d17f      	bne.n	1fce8 <__sfvwrite_r+0x174>
   1fbe8:	4599      	cmp	r9, r3
   1fbea:	db50      	blt.n	1fc8e <__sfvwrite_r+0x11a>
   1fbec:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1fbee:	4652      	mov	r2, sl
   1fbf0:	6a21      	ldr	r1, [r4, #32]
   1fbf2:	9801      	ldr	r0, [sp, #4]
   1fbf4:	f8cd c000 	str.w	ip, [sp]
   1fbf8:	47b0      	blx	r6
   1fbfa:	f8dd c000 	ldr.w	ip, [sp]
   1fbfe:	1e06      	subs	r6, r0, #0
   1fc00:	f340 8084 	ble.w	1fd0c <__sfvwrite_r+0x198>
   1fc04:	ebbb 0b06 	subs.w	fp, fp, r6
   1fc08:	d054      	beq.n	1fcb4 <__sfvwrite_r+0x140>
   1fc0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1fc0e:	44b2      	add	sl, r6
   1fc10:	1bbf      	subs	r7, r7, r6
   1fc12:	1b9e      	subs	r6, r3, r6
   1fc14:	f8c8 6008 	str.w	r6, [r8, #8]
   1fc18:	2e00      	cmp	r6, #0
   1fc1a:	d1cb      	bne.n	1fbb4 <__sfvwrite_r+0x40>
   1fc1c:	4630      	mov	r0, r6
   1fc1e:	b005      	add	sp, #20
   1fc20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fc24:	f8d5 9000 	ldr.w	r9, [r5]
   1fc28:	686f      	ldr	r7, [r5, #4]
   1fc2a:	3508      	adds	r5, #8
   1fc2c:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
   1fc30:	bf34      	ite	cc
   1fc32:	463b      	movcc	r3, r7
   1fc34:	f44f 6380 	movcs.w	r3, #1024	; 0x400
   1fc38:	464a      	mov	r2, r9
   1fc3a:	9801      	ldr	r0, [sp, #4]
   1fc3c:	2f00      	cmp	r7, #0
   1fc3e:	d0f1      	beq.n	1fc24 <__sfvwrite_r+0xb0>
   1fc40:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1fc42:	6a21      	ldr	r1, [r4, #32]
   1fc44:	47b0      	blx	r6
   1fc46:	2800      	cmp	r0, #0
   1fc48:	4481      	add	r9, r0
   1fc4a:	ebc0 0707 	rsb	r7, r0, r7
   1fc4e:	dd5d      	ble.n	1fd0c <__sfvwrite_r+0x198>
   1fc50:	f8d8 6008 	ldr.w	r6, [r8, #8]
   1fc54:	1a30      	subs	r0, r6, r0
   1fc56:	f8c8 0008 	str.w	r0, [r8, #8]
   1fc5a:	2800      	cmp	r0, #0
   1fc5c:	d1e6      	bne.n	1fc2c <__sfvwrite_r+0xb8>
   1fc5e:	e7de      	b.n	1fc1e <__sfvwrite_r+0xaa>
   1fc60:	9801      	ldr	r0, [sp, #4]
   1fc62:	4621      	mov	r1, r4
   1fc64:	f002 ff7e 	bl	22b64 <__swsetup_r>
   1fc68:	89a3      	ldrh	r3, [r4, #12]
   1fc6a:	2800      	cmp	r0, #0
   1fc6c:	d091      	beq.n	1fb92 <__sfvwrite_r+0x1e>
   1fc6e:	9901      	ldr	r1, [sp, #4]
   1fc70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1fc74:	f04f 30ff 	mov.w	r0, #4294967295
   1fc78:	81a3      	strh	r3, [r4, #12]
   1fc7a:	2309      	movs	r3, #9
   1fc7c:	600b      	str	r3, [r1, #0]
   1fc7e:	e7ce      	b.n	1fc1e <__sfvwrite_r+0xaa>
   1fc80:	f8d5 a000 	ldr.w	sl, [r5]
   1fc84:	f04f 0c00 	mov.w	ip, #0
   1fc88:	686f      	ldr	r7, [r5, #4]
   1fc8a:	3508      	adds	r5, #8
   1fc8c:	e792      	b.n	1fbb4 <__sfvwrite_r+0x40>
   1fc8e:	464a      	mov	r2, r9
   1fc90:	4651      	mov	r1, sl
   1fc92:	464e      	mov	r6, r9
   1fc94:	f8cd c000 	str.w	ip, [sp]
   1fc98:	f000 fd42 	bl	20720 <memmove>
   1fc9c:	68a2      	ldr	r2, [r4, #8]
   1fc9e:	6823      	ldr	r3, [r4, #0]
   1fca0:	ebbb 0b06 	subs.w	fp, fp, r6
   1fca4:	ebc9 0202 	rsb	r2, r9, r2
   1fca8:	f8dd c000 	ldr.w	ip, [sp]
   1fcac:	444b      	add	r3, r9
   1fcae:	60a2      	str	r2, [r4, #8]
   1fcb0:	6023      	str	r3, [r4, #0]
   1fcb2:	d1aa      	bne.n	1fc0a <__sfvwrite_r+0x96>
   1fcb4:	9801      	ldr	r0, [sp, #4]
   1fcb6:	4621      	mov	r1, r4
   1fcb8:	f004 f856 	bl	23d68 <_fflush_r>
   1fcbc:	bb30      	cbnz	r0, 1fd0c <__sfvwrite_r+0x198>
   1fcbe:	46dc      	mov	ip, fp
   1fcc0:	e7a3      	b.n	1fc0a <__sfvwrite_r+0x96>
   1fcc2:	4650      	mov	r0, sl
   1fcc4:	210a      	movs	r1, #10
   1fcc6:	463a      	mov	r2, r7
   1fcc8:	f107 0b01 	add.w	fp, r7, #1
   1fccc:	f000 fc3e 	bl	2054c <memchr>
   1fcd0:	f04f 0c01 	mov.w	ip, #1
   1fcd4:	2800      	cmp	r0, #0
   1fcd6:	f43f af73 	beq.w	1fbc0 <__sfvwrite_r+0x4c>
   1fcda:	f100 0b01 	add.w	fp, r0, #1
   1fcde:	f04f 0c01 	mov.w	ip, #1
   1fce2:	ebca 0b0b 	rsb	fp, sl, fp
   1fce6:	e76b      	b.n	1fbc0 <__sfvwrite_r+0x4c>
   1fce8:	4651      	mov	r1, sl
   1fcea:	4632      	mov	r2, r6
   1fcec:	f8cd c000 	str.w	ip, [sp]
   1fcf0:	f000 fd16 	bl	20720 <memmove>
   1fcf4:	6823      	ldr	r3, [r4, #0]
   1fcf6:	4621      	mov	r1, r4
   1fcf8:	9801      	ldr	r0, [sp, #4]
   1fcfa:	199b      	adds	r3, r3, r6
   1fcfc:	6023      	str	r3, [r4, #0]
   1fcfe:	f004 f833 	bl	23d68 <_fflush_r>
   1fd02:	f8dd c000 	ldr.w	ip, [sp]
   1fd06:	2800      	cmp	r0, #0
   1fd08:	f43f af7c 	beq.w	1fc04 <__sfvwrite_r+0x90>
   1fd0c:	89a3      	ldrh	r3, [r4, #12]
   1fd0e:	f04f 30ff 	mov.w	r0, #4294967295
   1fd12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1fd16:	81a3      	strh	r3, [r4, #12]
   1fd18:	e781      	b.n	1fc1e <__sfvwrite_r+0xaa>
   1fd1a:	464e      	mov	r6, r9
   1fd1c:	b326      	cbz	r6, 1fd68 <__sfvwrite_r+0x1f4>
   1fd1e:	059a      	lsls	r2, r3, #22
   1fd20:	68a7      	ldr	r7, [r4, #8]
   1fd22:	d526      	bpl.n	1fd72 <__sfvwrite_r+0x1fe>
   1fd24:	42be      	cmp	r6, r7
   1fd26:	46bb      	mov	fp, r7
   1fd28:	d245      	bcs.n	1fdb6 <__sfvwrite_r+0x242>
   1fd2a:	6820      	ldr	r0, [r4, #0]
   1fd2c:	4633      	mov	r3, r6
   1fd2e:	46b3      	mov	fp, r6
   1fd30:	46b2      	mov	sl, r6
   1fd32:	4637      	mov	r7, r6
   1fd34:	4649      	mov	r1, r9
   1fd36:	465a      	mov	r2, fp
   1fd38:	9300      	str	r3, [sp, #0]
   1fd3a:	f000 fcf1 	bl	20720 <memmove>
   1fd3e:	9b00      	ldr	r3, [sp, #0]
   1fd40:	68a1      	ldr	r1, [r4, #8]
   1fd42:	6822      	ldr	r2, [r4, #0]
   1fd44:	1acb      	subs	r3, r1, r3
   1fd46:	60a3      	str	r3, [r4, #8]
   1fd48:	eb02 030b 	add.w	r3, r2, fp
   1fd4c:	6023      	str	r3, [r4, #0]
   1fd4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1fd52:	1bdf      	subs	r7, r3, r7
   1fd54:	f8c8 7008 	str.w	r7, [r8, #8]
   1fd58:	2f00      	cmp	r7, #0
   1fd5a:	d02a      	beq.n	1fdb2 <__sfvwrite_r+0x23e>
   1fd5c:	ebca 0606 	rsb	r6, sl, r6
   1fd60:	44d1      	add	r9, sl
   1fd62:	89a3      	ldrh	r3, [r4, #12]
   1fd64:	2e00      	cmp	r6, #0
   1fd66:	d1da      	bne.n	1fd1e <__sfvwrite_r+0x1aa>
   1fd68:	f8d5 9000 	ldr.w	r9, [r5]
   1fd6c:	686e      	ldr	r6, [r5, #4]
   1fd6e:	3508      	adds	r5, #8
   1fd70:	e7d4      	b.n	1fd1c <__sfvwrite_r+0x1a8>
   1fd72:	6923      	ldr	r3, [r4, #16]
   1fd74:	46ba      	mov	sl, r7
   1fd76:	6820      	ldr	r0, [r4, #0]
   1fd78:	4298      	cmp	r0, r3
   1fd7a:	bf94      	ite	ls
   1fd7c:	2300      	movls	r3, #0
   1fd7e:	2301      	movhi	r3, #1
   1fd80:	42b7      	cmp	r7, r6
   1fd82:	bf2c      	ite	cs
   1fd84:	2300      	movcs	r3, #0
   1fd86:	f003 0301 	andcc.w	r3, r3, #1
   1fd8a:	2b00      	cmp	r3, #0
   1fd8c:	d128      	bne.n	1fde0 <__sfvwrite_r+0x26c>
   1fd8e:	6963      	ldr	r3, [r4, #20]
   1fd90:	429e      	cmp	r6, r3
   1fd92:	d318      	bcc.n	1fdc6 <__sfvwrite_r+0x252>
   1fd94:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   1fd96:	464a      	mov	r2, r9
   1fd98:	9801      	ldr	r0, [sp, #4]
   1fd9a:	6a21      	ldr	r1, [r4, #32]
   1fd9c:	47b8      	blx	r7
   1fd9e:	1e07      	subs	r7, r0, #0
   1fda0:	ddb4      	ble.n	1fd0c <__sfvwrite_r+0x198>
   1fda2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1fda6:	46ba      	mov	sl, r7
   1fda8:	1bdf      	subs	r7, r3, r7
   1fdaa:	f8c8 7008 	str.w	r7, [r8, #8]
   1fdae:	2f00      	cmp	r7, #0
   1fdb0:	d1d4      	bne.n	1fd5c <__sfvwrite_r+0x1e8>
   1fdb2:	4638      	mov	r0, r7
   1fdb4:	e733      	b.n	1fc1e <__sfvwrite_r+0xaa>
   1fdb6:	f413 6f90 	tst.w	r3, #1152	; 0x480
   1fdba:	d11f      	bne.n	1fdfc <__sfvwrite_r+0x288>
   1fdbc:	463b      	mov	r3, r7
   1fdbe:	6820      	ldr	r0, [r4, #0]
   1fdc0:	46b2      	mov	sl, r6
   1fdc2:	4637      	mov	r7, r6
   1fdc4:	e7b6      	b.n	1fd34 <__sfvwrite_r+0x1c0>
   1fdc6:	4632      	mov	r2, r6
   1fdc8:	4649      	mov	r1, r9
   1fdca:	f000 fca9 	bl	20720 <memmove>
   1fdce:	68a2      	ldr	r2, [r4, #8]
   1fdd0:	6823      	ldr	r3, [r4, #0]
   1fdd2:	4637      	mov	r7, r6
   1fdd4:	1b92      	subs	r2, r2, r6
   1fdd6:	46b2      	mov	sl, r6
   1fdd8:	199b      	adds	r3, r3, r6
   1fdda:	60a2      	str	r2, [r4, #8]
   1fddc:	6023      	str	r3, [r4, #0]
   1fdde:	e7b6      	b.n	1fd4e <__sfvwrite_r+0x1da>
   1fde0:	4649      	mov	r1, r9
   1fde2:	463a      	mov	r2, r7
   1fde4:	f000 fc9c 	bl	20720 <memmove>
   1fde8:	6823      	ldr	r3, [r4, #0]
   1fdea:	9801      	ldr	r0, [sp, #4]
   1fdec:	4621      	mov	r1, r4
   1fdee:	19db      	adds	r3, r3, r7
   1fdf0:	6023      	str	r3, [r4, #0]
   1fdf2:	f003 ffb9 	bl	23d68 <_fflush_r>
   1fdf6:	2800      	cmp	r0, #0
   1fdf8:	d0a9      	beq.n	1fd4e <__sfvwrite_r+0x1da>
   1fdfa:	e787      	b.n	1fd0c <__sfvwrite_r+0x198>
   1fdfc:	6962      	ldr	r2, [r4, #20]
   1fdfe:	6921      	ldr	r1, [r4, #16]
   1fe00:	6820      	ldr	r0, [r4, #0]
   1fe02:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
   1fe06:	1a40      	subs	r0, r0, r1
   1fe08:	9002      	str	r0, [sp, #8]
   1fe0a:	eb0c 7cdc 	add.w	ip, ip, ip, lsr #31
   1fe0e:	3001      	adds	r0, #1
   1fe10:	1980      	adds	r0, r0, r6
   1fe12:	ea4f 0c6c 	mov.w	ip, ip, asr #1
   1fe16:	4584      	cmp	ip, r0
   1fe18:	4662      	mov	r2, ip
   1fe1a:	bf3c      	itt	cc
   1fe1c:	4684      	movcc	ip, r0
   1fe1e:	4602      	movcc	r2, r0
   1fe20:	055b      	lsls	r3, r3, #21
   1fe22:	9801      	ldr	r0, [sp, #4]
   1fe24:	d527      	bpl.n	1fe76 <__sfvwrite_r+0x302>
   1fe26:	4611      	mov	r1, r2
   1fe28:	f8cd c000 	str.w	ip, [sp]
   1fe2c:	f000 f8ce 	bl	1ffcc <_malloc_r>
   1fe30:	f8dd c000 	ldr.w	ip, [sp]
   1fe34:	9003      	str	r0, [sp, #12]
   1fe36:	2800      	cmp	r0, #0
   1fe38:	d02e      	beq.n	1fe98 <__sfvwrite_r+0x324>
   1fe3a:	6921      	ldr	r1, [r4, #16]
   1fe3c:	9a02      	ldr	r2, [sp, #8]
   1fe3e:	f8cd c000 	str.w	ip, [sp]
   1fe42:	f000 fbf5 	bl	20630 <memcpy>
   1fe46:	89a3      	ldrh	r3, [r4, #12]
   1fe48:	f8dd c000 	ldr.w	ip, [sp]
   1fe4c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   1fe50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1fe54:	81a3      	strh	r3, [r4, #12]
   1fe56:	9902      	ldr	r1, [sp, #8]
   1fe58:	4633      	mov	r3, r6
   1fe5a:	9a03      	ldr	r2, [sp, #12]
   1fe5c:	46b3      	mov	fp, r6
   1fe5e:	46b2      	mov	sl, r6
   1fe60:	4637      	mov	r7, r6
   1fe62:	1850      	adds	r0, r2, r1
   1fe64:	ebc1 020c 	rsb	r2, r1, ip
   1fe68:	9903      	ldr	r1, [sp, #12]
   1fe6a:	6020      	str	r0, [r4, #0]
   1fe6c:	f8c4 c014 	str.w	ip, [r4, #20]
   1fe70:	6121      	str	r1, [r4, #16]
   1fe72:	60a2      	str	r2, [r4, #8]
   1fe74:	e75e      	b.n	1fd34 <__sfvwrite_r+0x1c0>
   1fe76:	f8cd c000 	str.w	ip, [sp]
   1fe7a:	f000 fd9f 	bl	209bc <_realloc_r>
   1fe7e:	f8dd c000 	ldr.w	ip, [sp]
   1fe82:	9003      	str	r0, [sp, #12]
   1fe84:	2800      	cmp	r0, #0
   1fe86:	d1e6      	bne.n	1fe56 <__sfvwrite_r+0x2e2>
   1fe88:	6921      	ldr	r1, [r4, #16]
   1fe8a:	9801      	ldr	r0, [sp, #4]
   1fe8c:	f004 f99a 	bl	241c4 <_free_r>
   1fe90:	9901      	ldr	r1, [sp, #4]
   1fe92:	230c      	movs	r3, #12
   1fe94:	600b      	str	r3, [r1, #0]
   1fe96:	e739      	b.n	1fd0c <__sfvwrite_r+0x198>
   1fe98:	9a01      	ldr	r2, [sp, #4]
   1fe9a:	230c      	movs	r3, #12
   1fe9c:	6013      	str	r3, [r2, #0]
   1fe9e:	e735      	b.n	1fd0c <__sfvwrite_r+0x198>

0001fea0 <_fwrite_r>:
   1fea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fea4:	b086      	sub	sp, #24
   1fea6:	fb02 f603 	mul.w	r6, r2, r3
   1feaa:	461d      	mov	r5, r3
   1feac:	4614      	mov	r4, r2
   1feae:	ab04      	add	r3, sp, #16
   1feb0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   1feb2:	4680      	mov	r8, r0
   1feb4:	9301      	str	r3, [sp, #4]
   1feb6:	2301      	movs	r3, #1
   1feb8:	9104      	str	r1, [sp, #16]
   1feba:	9302      	str	r3, [sp, #8]
   1febc:	9605      	str	r6, [sp, #20]
   1febe:	9603      	str	r6, [sp, #12]
   1fec0:	b110      	cbz	r0, 1fec8 <_fwrite_r+0x28>
   1fec2:	6983      	ldr	r3, [r0, #24]
   1fec4:	2b00      	cmp	r3, #0
   1fec6:	d034      	beq.n	1ff32 <_fwrite_r+0x92>
   1fec8:	f24d 1308 	movw	r3, #53512	; 0xd108
   1fecc:	f2c0 0302 	movt	r3, #2
   1fed0:	429f      	cmp	r7, r3
   1fed2:	bf08      	it	eq
   1fed4:	f8d8 7004 	ldreq.w	r7, [r8, #4]
   1fed8:	d010      	beq.n	1fefc <_fwrite_r+0x5c>
   1feda:	f24d 03e8 	movw	r3, #53480	; 0xd0e8
   1fede:	f2c0 0302 	movt	r3, #2
   1fee2:	429f      	cmp	r7, r3
   1fee4:	bf08      	it	eq
   1fee6:	f8d8 7008 	ldreq.w	r7, [r8, #8]
   1feea:	d007      	beq.n	1fefc <_fwrite_r+0x5c>
   1feec:	f24d 03c8 	movw	r3, #53448	; 0xd0c8
   1fef0:	f2c0 0302 	movt	r3, #2
   1fef4:	429f      	cmp	r7, r3
   1fef6:	bf08      	it	eq
   1fef8:	f8d8 700c 	ldreq.w	r7, [r8, #12]
   1fefc:	89bb      	ldrh	r3, [r7, #12]
   1fefe:	4640      	mov	r0, r8
   1ff00:	4639      	mov	r1, r7
   1ff02:	049a      	lsls	r2, r3, #18
   1ff04:	bf5f      	itttt	pl
   1ff06:	f443 5300 	orrpl.w	r3, r3, #8192	; 0x2000
   1ff0a:	81bb      	strhpl	r3, [r7, #12]
   1ff0c:	6e7a      	ldrpl	r2, [r7, #100]	; 0x64
   1ff0e:	f422 5300 	bicpl.w	r3, r2, #8192	; 0x2000
   1ff12:	aa01      	add	r2, sp, #4
   1ff14:	bf58      	it	pl
   1ff16:	667b      	strpl	r3, [r7, #100]	; 0x64
   1ff18:	f7ff fe2c 	bl	1fb74 <__sfvwrite_r>
   1ff1c:	b128      	cbz	r0, 1ff2a <_fwrite_r+0x8a>
   1ff1e:	9803      	ldr	r0, [sp, #12]
   1ff20:	4621      	mov	r1, r4
   1ff22:	1a30      	subs	r0, r6, r0
   1ff24:	f7f4 fb74 	bl	14610 <__aeabi_uidiv>
   1ff28:	4605      	mov	r5, r0
   1ff2a:	4628      	mov	r0, r5
   1ff2c:	b006      	add	sp, #24
   1ff2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ff32:	f004 f85b 	bl	23fec <__sinit>
   1ff36:	e7c7      	b.n	1fec8 <_fwrite_r+0x28>

0001ff38 <fwrite>:
   1ff38:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ff3a:	f240 0428 	movw	r4, #40	; 0x28
   1ff3e:	b083      	sub	sp, #12
   1ff40:	f2c1 0400 	movt	r4, #4096	; 0x1000
   1ff44:	4607      	mov	r7, r0
   1ff46:	460e      	mov	r6, r1
   1ff48:	4615      	mov	r5, r2
   1ff4a:	9300      	str	r3, [sp, #0]
   1ff4c:	6820      	ldr	r0, [r4, #0]
   1ff4e:	4639      	mov	r1, r7
   1ff50:	4632      	mov	r2, r6
   1ff52:	462b      	mov	r3, r5
   1ff54:	f7ff ffa4 	bl	1fea0 <_fwrite_r>
   1ff58:	b003      	add	sp, #12
   1ff5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001ff5c <__libc_init_array>:
   1ff5c:	b570      	push	{r4, r5, r6, lr}
   1ff5e:	f24d 36c4 	movw	r6, #54212	; 0xd3c4
   1ff62:	f24d 35c4 	movw	r5, #54212	; 0xd3c4
   1ff66:	f2c0 0602 	movt	r6, #2
   1ff6a:	f2c0 0502 	movt	r5, #2
   1ff6e:	1b76      	subs	r6, r6, r5
   1ff70:	10b6      	asrs	r6, r6, #2
   1ff72:	d006      	beq.n	1ff82 <__libc_init_array+0x26>
   1ff74:	2400      	movs	r4, #0
   1ff76:	f855 3b04 	ldr.w	r3, [r5], #4
   1ff7a:	3401      	adds	r4, #1
   1ff7c:	4798      	blx	r3
   1ff7e:	42a6      	cmp	r6, r4
   1ff80:	d1f9      	bne.n	1ff76 <__libc_init_array+0x1a>
   1ff82:	f24d 4648 	movw	r6, #54344	; 0xd448
   1ff86:	f24d 35c4 	movw	r5, #54212	; 0xd3c4
   1ff8a:	f2c0 0602 	movt	r6, #2
   1ff8e:	f2c0 0502 	movt	r5, #2
   1ff92:	1b76      	subs	r6, r6, r5
   1ff94:	f00d fa10 	bl	2d3b8 <_init>
   1ff98:	10b6      	asrs	r6, r6, #2
   1ff9a:	d006      	beq.n	1ffaa <__libc_init_array+0x4e>
   1ff9c:	2400      	movs	r4, #0
   1ff9e:	f855 3b04 	ldr.w	r3, [r5], #4
   1ffa2:	3401      	adds	r4, #1
   1ffa4:	4798      	blx	r3
   1ffa6:	42a6      	cmp	r6, r4
   1ffa8:	d1f9      	bne.n	1ff9e <__libc_init_array+0x42>
   1ffaa:	bd70      	pop	{r4, r5, r6, pc}

0001ffac <malloc>:
   1ffac:	f240 0328 	movw	r3, #40	; 0x28
   1ffb0:	4601      	mov	r1, r0
   1ffb2:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1ffb6:	6818      	ldr	r0, [r3, #0]
   1ffb8:	f000 b808 	b.w	1ffcc <_malloc_r>

0001ffbc <free>:
   1ffbc:	f240 0328 	movw	r3, #40	; 0x28
   1ffc0:	4601      	mov	r1, r0
   1ffc2:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1ffc6:	6818      	ldr	r0, [r3, #0]
   1ffc8:	f004 b8fc 	b.w	241c4 <_free_r>

0001ffcc <_malloc_r>:
   1ffcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ffd0:	f101 040b 	add.w	r4, r1, #11
   1ffd4:	2c16      	cmp	r4, #22
   1ffd6:	b083      	sub	sp, #12
   1ffd8:	4606      	mov	r6, r0
   1ffda:	d930      	bls.n	2003e <_malloc_r+0x72>
   1ffdc:	f024 0407 	bic.w	r4, r4, #7
   1ffe0:	0fe3      	lsrs	r3, r4, #31
   1ffe2:	428c      	cmp	r4, r1
   1ffe4:	bf2c      	ite	cs
   1ffe6:	4619      	movcs	r1, r3
   1ffe8:	f043 0101 	orrcc.w	r1, r3, #1
   1ffec:	2900      	cmp	r1, #0
   1ffee:	d12f      	bne.n	20050 <_malloc_r+0x84>
   1fff0:	4630      	mov	r0, r6
   1fff2:	f000 fc39 	bl	20868 <__malloc_lock>
   1fff6:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
   1fffa:	d22d      	bcs.n	20058 <_malloc_r+0x8c>
   1fffc:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
   20000:	f240 151c 	movw	r5, #284	; 0x11c
   20004:	f2c1 0500 	movt	r5, #4096	; 0x1000
   20008:	eb05 02ce 	add.w	r2, r5, lr, lsl #3
   2000c:	68d3      	ldr	r3, [r2, #12]
   2000e:	4293      	cmp	r3, r2
   20010:	f000 8223 	beq.w	2045a <_malloc_r+0x48e>
   20014:	685c      	ldr	r4, [r3, #4]
   20016:	f103 0708 	add.w	r7, r3, #8
   2001a:	68da      	ldr	r2, [r3, #12]
   2001c:	4630      	mov	r0, r6
   2001e:	f024 0403 	bic.w	r4, r4, #3
   20022:	6899      	ldr	r1, [r3, #8]
   20024:	191b      	adds	r3, r3, r4
   20026:	685c      	ldr	r4, [r3, #4]
   20028:	60ca      	str	r2, [r1, #12]
   2002a:	f044 0401 	orr.w	r4, r4, #1
   2002e:	6091      	str	r1, [r2, #8]
   20030:	605c      	str	r4, [r3, #4]
   20032:	f000 fc1b 	bl	2086c <__malloc_unlock>
   20036:	4638      	mov	r0, r7
   20038:	b003      	add	sp, #12
   2003a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2003e:	2300      	movs	r3, #0
   20040:	2410      	movs	r4, #16
   20042:	428c      	cmp	r4, r1
   20044:	bf2c      	ite	cs
   20046:	4619      	movcs	r1, r3
   20048:	f043 0101 	orrcc.w	r1, r3, #1
   2004c:	2900      	cmp	r1, #0
   2004e:	d0cf      	beq.n	1fff0 <_malloc_r+0x24>
   20050:	230c      	movs	r3, #12
   20052:	2700      	movs	r7, #0
   20054:	6033      	str	r3, [r6, #0]
   20056:	e7ee      	b.n	20036 <_malloc_r+0x6a>
   20058:	ea5f 2e54 	movs.w	lr, r4, lsr #9
   2005c:	bf04      	itt	eq
   2005e:	ea4f 0ed4 	moveq.w	lr, r4, lsr #3
   20062:	ea4f 01ce 	moveq.w	r1, lr, lsl #3
   20066:	f040 808c 	bne.w	20182 <_malloc_r+0x1b6>
   2006a:	f240 151c 	movw	r5, #284	; 0x11c
   2006e:	f2c1 0500 	movt	r5, #4096	; 0x1000
   20072:	1869      	adds	r1, r5, r1
   20074:	68cf      	ldr	r7, [r1, #12]
   20076:	42b9      	cmp	r1, r7
   20078:	d106      	bne.n	20088 <_malloc_r+0xbc>
   2007a:	e00d      	b.n	20098 <_malloc_r+0xcc>
   2007c:	2a00      	cmp	r2, #0
   2007e:	f280 8181 	bge.w	20384 <_malloc_r+0x3b8>
   20082:	68ff      	ldr	r7, [r7, #12]
   20084:	42b9      	cmp	r1, r7
   20086:	d007      	beq.n	20098 <_malloc_r+0xcc>
   20088:	687b      	ldr	r3, [r7, #4]
   2008a:	f023 0303 	bic.w	r3, r3, #3
   2008e:	1b1a      	subs	r2, r3, r4
   20090:	2a0f      	cmp	r2, #15
   20092:	ddf3      	ble.n	2007c <_malloc_r+0xb0>
   20094:	f10e 3eff 	add.w	lr, lr, #4294967295
   20098:	f10e 0e01 	add.w	lr, lr, #1
   2009c:	f240 101c 	movw	r0, #284	; 0x11c
   200a0:	692f      	ldr	r7, [r5, #16]
   200a2:	f2c1 0000 	movt	r0, #4096	; 0x1000
   200a6:	f100 0208 	add.w	r2, r0, #8
   200aa:	4297      	cmp	r7, r2
   200ac:	bf08      	it	eq
   200ae:	6843      	ldreq	r3, [r0, #4]
   200b0:	d026      	beq.n	20100 <_malloc_r+0x134>
   200b2:	687b      	ldr	r3, [r7, #4]
   200b4:	f023 0c03 	bic.w	ip, r3, #3
   200b8:	ebc4 030c 	rsb	r3, r4, ip
   200bc:	2b0f      	cmp	r3, #15
   200be:	f300 819c 	bgt.w	203fa <_malloc_r+0x42e>
   200c2:	2b00      	cmp	r3, #0
   200c4:	6142      	str	r2, [r0, #20]
   200c6:	6102      	str	r2, [r0, #16]
   200c8:	f280 8095 	bge.w	201f6 <_malloc_r+0x22a>
   200cc:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
   200d0:	f080 8173 	bcs.w	203ba <_malloc_r+0x3ee>
   200d4:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
   200d8:	f04f 0801 	mov.w	r8, #1
   200dc:	6843      	ldr	r3, [r0, #4]
   200de:	eb00 01cc 	add.w	r1, r0, ip, lsl #3
   200e2:	ea4f 0cac 	mov.w	ip, ip, asr #2
   200e6:	fa08 f80c 	lsl.w	r8, r8, ip
   200ea:	60f9      	str	r1, [r7, #12]
   200ec:	f8d1 c008 	ldr.w	ip, [r1, #8]
   200f0:	ea48 0303 	orr.w	r3, r8, r3
   200f4:	6043      	str	r3, [r0, #4]
   200f6:	f8c7 c008 	str.w	ip, [r7, #8]
   200fa:	f8cc 700c 	str.w	r7, [ip, #12]
   200fe:	608f      	str	r7, [r1, #8]
   20100:	2701      	movs	r7, #1
   20102:	ea4f 01ae 	mov.w	r1, lr, asr #2
   20106:	fa07 f701 	lsl.w	r7, r7, r1
   2010a:	429f      	cmp	r7, r3
   2010c:	d87e      	bhi.n	2020c <_malloc_r+0x240>
   2010e:	423b      	tst	r3, r7
   20110:	d106      	bne.n	20120 <_malloc_r+0x154>
   20112:	f02e 0e03 	bic.w	lr, lr, #3
   20116:	007f      	lsls	r7, r7, #1
   20118:	f10e 0e04 	add.w	lr, lr, #4
   2011c:	423b      	tst	r3, r7
   2011e:	d0fa      	beq.n	20116 <_malloc_r+0x14a>
   20120:	eb05 09ce 	add.w	r9, r5, lr, lsl #3
   20124:	46f0      	mov	r8, lr
   20126:	46cc      	mov	ip, r9
   20128:	f8dc 000c 	ldr.w	r0, [ip, #12]
   2012c:	4584      	cmp	ip, r0
   2012e:	d107      	bne.n	20140 <_malloc_r+0x174>
   20130:	e174      	b.n	2041c <_malloc_r+0x450>
   20132:	2b00      	cmp	r3, #0
   20134:	f280 819b 	bge.w	2046e <_malloc_r+0x4a2>
   20138:	68c0      	ldr	r0, [r0, #12]
   2013a:	4584      	cmp	ip, r0
   2013c:	f000 816e 	beq.w	2041c <_malloc_r+0x450>
   20140:	6841      	ldr	r1, [r0, #4]
   20142:	f021 0103 	bic.w	r1, r1, #3
   20146:	1b0b      	subs	r3, r1, r4
   20148:	2b0f      	cmp	r3, #15
   2014a:	ddf2      	ble.n	20132 <_malloc_r+0x166>
   2014c:	4607      	mov	r7, r0
   2014e:	1901      	adds	r1, r0, r4
   20150:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   20154:	f044 0801 	orr.w	r8, r4, #1
   20158:	f857 4f08 	ldr.w	r4, [r7, #8]!
   2015c:	f043 0c01 	orr.w	ip, r3, #1
   20160:	f8c0 8004 	str.w	r8, [r0, #4]
   20164:	4630      	mov	r0, r6
   20166:	f8c1 c004 	str.w	ip, [r1, #4]
   2016a:	f8c4 e00c 	str.w	lr, [r4, #12]
   2016e:	f8ce 4008 	str.w	r4, [lr, #8]
   20172:	6169      	str	r1, [r5, #20]
   20174:	6129      	str	r1, [r5, #16]
   20176:	60ca      	str	r2, [r1, #12]
   20178:	608a      	str	r2, [r1, #8]
   2017a:	50cb      	str	r3, [r1, r3]
   2017c:	f000 fb76 	bl	2086c <__malloc_unlock>
   20180:	e759      	b.n	20036 <_malloc_r+0x6a>
   20182:	f1be 0f04 	cmp.w	lr, #4
   20186:	bf9e      	ittt	ls
   20188:	ea4f 1e94 	movls.w	lr, r4, lsr #6
   2018c:	f10e 0e38 	addls.w	lr, lr, #56	; 0x38
   20190:	ea4f 01ce 	movls.w	r1, lr, lsl #3
   20194:	f67f af69 	bls.w	2006a <_malloc_r+0x9e>
   20198:	f1be 0f14 	cmp.w	lr, #20
   2019c:	bf9c      	itt	ls
   2019e:	f10e 0e5b 	addls.w	lr, lr, #91	; 0x5b
   201a2:	ea4f 01ce 	movls.w	r1, lr, lsl #3
   201a6:	f67f af60 	bls.w	2006a <_malloc_r+0x9e>
   201aa:	f1be 0f54 	cmp.w	lr, #84	; 0x54
   201ae:	bf9e      	ittt	ls
   201b0:	ea4f 3e14 	movls.w	lr, r4, lsr #12
   201b4:	f10e 0e6e 	addls.w	lr, lr, #110	; 0x6e
   201b8:	ea4f 01ce 	movls.w	r1, lr, lsl #3
   201bc:	f67f af55 	bls.w	2006a <_malloc_r+0x9e>
   201c0:	f5be 7faa 	cmp.w	lr, #340	; 0x154
   201c4:	bf9e      	ittt	ls
   201c6:	ea4f 3ed4 	movls.w	lr, r4, lsr #15
   201ca:	f10e 0e77 	addls.w	lr, lr, #119	; 0x77
   201ce:	ea4f 01ce 	movls.w	r1, lr, lsl #3
   201d2:	f67f af4a 	bls.w	2006a <_malloc_r+0x9e>
   201d6:	f240 5354 	movw	r3, #1364	; 0x554
   201da:	459e      	cmp	lr, r3
   201dc:	bf95      	itete	ls
   201de:	ea4f 4e94 	movls.w	lr, r4, lsr #18
   201e2:	f44f 717c 	movhi.w	r1, #1008	; 0x3f0
   201e6:	f10e 0e7c 	addls.w	lr, lr, #124	; 0x7c
   201ea:	f04f 0e7e 	movhi.w	lr, #126	; 0x7e
   201ee:	bf98      	it	ls
   201f0:	ea4f 01ce 	movls.w	r1, lr, lsl #3
   201f4:	e739      	b.n	2006a <_malloc_r+0x9e>
   201f6:	eb07 030c 	add.w	r3, r7, ip
   201fa:	4630      	mov	r0, r6
   201fc:	3708      	adds	r7, #8
   201fe:	685a      	ldr	r2, [r3, #4]
   20200:	f042 0201 	orr.w	r2, r2, #1
   20204:	605a      	str	r2, [r3, #4]
   20206:	f000 fb31 	bl	2086c <__malloc_unlock>
   2020a:	e714      	b.n	20036 <_malloc_r+0x6a>
   2020c:	68af      	ldr	r7, [r5, #8]
   2020e:	f240 131c 	movw	r3, #284	; 0x11c
   20212:	f2c1 0300 	movt	r3, #4096	; 0x1000
   20216:	687a      	ldr	r2, [r7, #4]
   20218:	f022 0803 	bic.w	r8, r2, #3
   2021c:	4544      	cmp	r4, r8
   2021e:	ebc4 0208 	rsb	r2, r4, r8
   20222:	bf94      	ite	ls
   20224:	2100      	movls	r1, #0
   20226:	2101      	movhi	r1, #1
   20228:	2a0f      	cmp	r2, #15
   2022a:	bfd8      	it	le
   2022c:	f041 0101 	orrle.w	r1, r1, #1
   20230:	2900      	cmp	r1, #0
   20232:	f000 80b5 	beq.w	203a0 <_malloc_r+0x3d4>
   20236:	f242 3a90 	movw	sl, #9104	; 0x2390
   2023a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
   2023e:	f2c1 0a00 	movt	sl, #4096	; 0x1000
   20242:	3201      	adds	r2, #1
   20244:	f8da 3000 	ldr.w	r3, [sl]
   20248:	4423      	add	r3, r4
   2024a:	bf08      	it	eq
   2024c:	f103 0b10 	addeq.w	fp, r3, #16
   20250:	d006      	beq.n	20260 <_malloc_r+0x294>
   20252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   20256:	330f      	adds	r3, #15
   20258:	f423 637e 	bic.w	r3, r3, #4064	; 0xfe0
   2025c:	f023 0b1f 	bic.w	fp, r3, #31
   20260:	4630      	mov	r0, r6
   20262:	4659      	mov	r1, fp
   20264:	f000 fd96 	bl	20d94 <_sbrk_r>
   20268:	1c42      	adds	r2, r0, #1
   2026a:	4681      	mov	r9, r0
   2026c:	f000 8131 	beq.w	204d2 <_malloc_r+0x506>
   20270:	eb07 0308 	add.w	r3, r7, r8
   20274:	4283      	cmp	r3, r0
   20276:	f200 8106 	bhi.w	20486 <_malloc_r+0x4ba>
   2027a:	f8da 2004 	ldr.w	r2, [sl, #4]
   2027e:	454b      	cmp	r3, r9
   20280:	445a      	add	r2, fp
   20282:	f8ca 2004 	str.w	r2, [sl, #4]
   20286:	f000 8131 	beq.w	204ec <_malloc_r+0x520>
   2028a:	f8d5 0408 	ldr.w	r0, [r5, #1032]	; 0x408
   2028e:	f240 111c 	movw	r1, #284	; 0x11c
   20292:	f2c1 0100 	movt	r1, #4096	; 0x1000
   20296:	3001      	adds	r0, #1
   20298:	4630      	mov	r0, r6
   2029a:	bf17      	itett	ne
   2029c:	ebc3 0309 	rsbne	r3, r3, r9
   202a0:	f8c1 9408 	streq.w	r9, [r1, #1032]	; 0x408
   202a4:	18d2      	addne	r2, r2, r3
   202a6:	f8ca 2004 	strne.w	r2, [sl, #4]
   202aa:	f019 0307 	ands.w	r3, r9, #7
   202ae:	bf1f      	itttt	ne
   202b0:	f1c3 0208 	rsbne	r2, r3, #8
   202b4:	f5c3 5380 	rsbne	r3, r3, #4096	; 0x1000
   202b8:	4491      	addne	r9, r2
   202ba:	f103 0208 	addne.w	r2, r3, #8
   202be:	eb09 030b 	add.w	r3, r9, fp
   202c2:	bf08      	it	eq
   202c4:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
   202c8:	051b      	lsls	r3, r3, #20
   202ca:	0d1b      	lsrs	r3, r3, #20
   202cc:	ebc3 0b02 	rsb	fp, r3, r2
   202d0:	4659      	mov	r1, fp
   202d2:	f000 fd5f 	bl	20d94 <_sbrk_r>
   202d6:	1c43      	adds	r3, r0, #1
   202d8:	f000 811d 	beq.w	20516 <_malloc_r+0x54a>
   202dc:	ebc9 0100 	rsb	r1, r9, r0
   202e0:	4459      	add	r1, fp
   202e2:	f041 0101 	orr.w	r1, r1, #1
   202e6:	f8da 2004 	ldr.w	r2, [sl, #4]
   202ea:	42af      	cmp	r7, r5
   202ec:	f242 3390 	movw	r3, #9104	; 0x2390
   202f0:	f8c5 9008 	str.w	r9, [r5, #8]
   202f4:	445a      	add	r2, fp
   202f6:	f2c1 0300 	movt	r3, #4096	; 0x1000
   202fa:	f8c9 1004 	str.w	r1, [r9, #4]
   202fe:	f8ca 2004 	str.w	r2, [sl, #4]
   20302:	d019      	beq.n	20338 <_malloc_r+0x36c>
   20304:	f1b8 0f0f 	cmp.w	r8, #15
   20308:	f240 80dd 	bls.w	204c6 <_malloc_r+0x4fa>
   2030c:	f1a8 010c 	sub.w	r1, r8, #12
   20310:	f8d7 c004 	ldr.w	ip, [r7, #4]
   20314:	f021 0107 	bic.w	r1, r1, #7
   20318:	f04f 0e05 	mov.w	lr, #5
   2031c:	1878      	adds	r0, r7, r1
   2031e:	290f      	cmp	r1, #15
   20320:	f00c 0c01 	and.w	ip, ip, #1
   20324:	ea41 0c0c 	orr.w	ip, r1, ip
   20328:	f8c7 c004 	str.w	ip, [r7, #4]
   2032c:	f8c0 e004 	str.w	lr, [r0, #4]
   20330:	f8c0 e008 	str.w	lr, [r0, #8]
   20334:	f200 80e6 	bhi.w	20504 <_malloc_r+0x538>
   20338:	f242 3390 	movw	r3, #9104	; 0x2390
   2033c:	f8da 102c 	ldr.w	r1, [sl, #44]	; 0x2c
   20340:	f2c1 0300 	movt	r3, #4096	; 0x1000
   20344:	68af      	ldr	r7, [r5, #8]
   20346:	428a      	cmp	r2, r1
   20348:	f8da 1030 	ldr.w	r1, [sl, #48]	; 0x30
   2034c:	bf88      	it	hi
   2034e:	62da      	strhi	r2, [r3, #44]	; 0x2c
   20350:	f242 3390 	movw	r3, #9104	; 0x2390
   20354:	f2c1 0300 	movt	r3, #4096	; 0x1000
   20358:	428a      	cmp	r2, r1
   2035a:	bf88      	it	hi
   2035c:	631a      	strhi	r2, [r3, #48]	; 0x30
   2035e:	687b      	ldr	r3, [r7, #4]
   20360:	f023 0303 	bic.w	r3, r3, #3
   20364:	429c      	cmp	r4, r3
   20366:	ebc4 0203 	rsb	r2, r4, r3
   2036a:	bf94      	ite	ls
   2036c:	2300      	movls	r3, #0
   2036e:	2301      	movhi	r3, #1
   20370:	2a0f      	cmp	r2, #15
   20372:	bfd8      	it	le
   20374:	f043 0301 	orrle.w	r3, r3, #1
   20378:	b193      	cbz	r3, 203a0 <_malloc_r+0x3d4>
   2037a:	4630      	mov	r0, r6
   2037c:	2700      	movs	r7, #0
   2037e:	f000 fa75 	bl	2086c <__malloc_unlock>
   20382:	e658      	b.n	20036 <_malloc_r+0x6a>
   20384:	18fb      	adds	r3, r7, r3
   20386:	68fa      	ldr	r2, [r7, #12]
   20388:	68b9      	ldr	r1, [r7, #8]
   2038a:	4630      	mov	r0, r6
   2038c:	685c      	ldr	r4, [r3, #4]
   2038e:	3708      	adds	r7, #8
   20390:	60ca      	str	r2, [r1, #12]
   20392:	f044 0401 	orr.w	r4, r4, #1
   20396:	6091      	str	r1, [r2, #8]
   20398:	605c      	str	r4, [r3, #4]
   2039a:	f000 fa67 	bl	2086c <__malloc_unlock>
   2039e:	e64a      	b.n	20036 <_malloc_r+0x6a>
   203a0:	193b      	adds	r3, r7, r4
   203a2:	f042 0201 	orr.w	r2, r2, #1
   203a6:	f044 0401 	orr.w	r4, r4, #1
   203aa:	4630      	mov	r0, r6
   203ac:	607c      	str	r4, [r7, #4]
   203ae:	3708      	adds	r7, #8
   203b0:	605a      	str	r2, [r3, #4]
   203b2:	60ab      	str	r3, [r5, #8]
   203b4:	f000 fa5a 	bl	2086c <__malloc_unlock>
   203b8:	e63d      	b.n	20036 <_malloc_r+0x6a>
   203ba:	ea4f 235c 	mov.w	r3, ip, lsr #9
   203be:	2b04      	cmp	r3, #4
   203c0:	d95c      	bls.n	2047c <_malloc_r+0x4b0>
   203c2:	2b14      	cmp	r3, #20
   203c4:	d878      	bhi.n	204b8 <_malloc_r+0x4ec>
   203c6:	335b      	adds	r3, #91	; 0x5b
   203c8:	00d8      	lsls	r0, r3, #3
   203ca:	1828      	adds	r0, r5, r0
   203cc:	f240 181c 	movw	r8, #284	; 0x11c
   203d0:	f2c1 0800 	movt	r8, #4096	; 0x1000
   203d4:	6881      	ldr	r1, [r0, #8]
   203d6:	4281      	cmp	r1, r0
   203d8:	d103      	bne.n	203e2 <_malloc_r+0x416>
   203da:	e060      	b.n	2049e <_malloc_r+0x4d2>
   203dc:	6889      	ldr	r1, [r1, #8]
   203de:	4288      	cmp	r0, r1
   203e0:	d004      	beq.n	203ec <_malloc_r+0x420>
   203e2:	684b      	ldr	r3, [r1, #4]
   203e4:	f023 0303 	bic.w	r3, r3, #3
   203e8:	459c      	cmp	ip, r3
   203ea:	d3f7      	bcc.n	203dc <_malloc_r+0x410>
   203ec:	68c8      	ldr	r0, [r1, #12]
   203ee:	686b      	ldr	r3, [r5, #4]
   203f0:	60f8      	str	r0, [r7, #12]
   203f2:	60b9      	str	r1, [r7, #8]
   203f4:	60cf      	str	r7, [r1, #12]
   203f6:	6087      	str	r7, [r0, #8]
   203f8:	e682      	b.n	20100 <_malloc_r+0x134>
   203fa:	1939      	adds	r1, r7, r4
   203fc:	f043 0501 	orr.w	r5, r3, #1
   20400:	6141      	str	r1, [r0, #20]
   20402:	f044 0401 	orr.w	r4, r4, #1
   20406:	6101      	str	r1, [r0, #16]
   20408:	4630      	mov	r0, r6
   2040a:	607c      	str	r4, [r7, #4]
   2040c:	3708      	adds	r7, #8
   2040e:	60ca      	str	r2, [r1, #12]
   20410:	608a      	str	r2, [r1, #8]
   20412:	604d      	str	r5, [r1, #4]
   20414:	50cb      	str	r3, [r1, r3]
   20416:	f000 fa29 	bl	2086c <__malloc_unlock>
   2041a:	e60c      	b.n	20036 <_malloc_r+0x6a>
   2041c:	f108 0801 	add.w	r8, r8, #1
   20420:	f10c 0c08 	add.w	ip, ip, #8
   20424:	f018 0f03 	tst.w	r8, #3
   20428:	f47f ae7e 	bne.w	20128 <_malloc_r+0x15c>
   2042c:	464b      	mov	r3, r9
   2042e:	f01e 0f03 	tst.w	lr, #3
   20432:	f1a3 0108 	sub.w	r1, r3, #8
   20436:	f10e 3eff 	add.w	lr, lr, #4294967295
   2043a:	d079      	beq.n	20530 <_malloc_r+0x564>
   2043c:	681b      	ldr	r3, [r3, #0]
   2043e:	428b      	cmp	r3, r1
   20440:	d0f5      	beq.n	2042e <_malloc_r+0x462>
   20442:	686b      	ldr	r3, [r5, #4]
   20444:	007f      	lsls	r7, r7, #1
   20446:	429f      	cmp	r7, r3
   20448:	f63f aee0 	bhi.w	2020c <_malloc_r+0x240>
   2044c:	2f00      	cmp	r7, #0
   2044e:	f43f aedd 	beq.w	2020c <_malloc_r+0x240>
   20452:	421f      	tst	r7, r3
   20454:	d071      	beq.n	2053a <_malloc_r+0x56e>
   20456:	46c6      	mov	lr, r8
   20458:	e662      	b.n	20120 <_malloc_r+0x154>
   2045a:	f103 0208 	add.w	r2, r3, #8
   2045e:	695b      	ldr	r3, [r3, #20]
   20460:	429a      	cmp	r2, r3
   20462:	bf08      	it	eq
   20464:	f10e 0e02 	addeq.w	lr, lr, #2
   20468:	f43f ae18 	beq.w	2009c <_malloc_r+0xd0>
   2046c:	e5d2      	b.n	20014 <_malloc_r+0x48>
   2046e:	4607      	mov	r7, r0
   20470:	1843      	adds	r3, r0, r1
   20472:	68c2      	ldr	r2, [r0, #12]
   20474:	4630      	mov	r0, r6
   20476:	f857 1f08 	ldr.w	r1, [r7, #8]!
   2047a:	e5d4      	b.n	20026 <_malloc_r+0x5a>
   2047c:	ea4f 139c 	mov.w	r3, ip, lsr #6
   20480:	3338      	adds	r3, #56	; 0x38
   20482:	00d8      	lsls	r0, r3, #3
   20484:	e7a1      	b.n	203ca <_malloc_r+0x3fe>
   20486:	42af      	cmp	r7, r5
   20488:	f240 121c 	movw	r2, #284	; 0x11c
   2048c:	f2c1 0200 	movt	r2, #4096	; 0x1000
   20490:	f43f aef3 	beq.w	2027a <_malloc_r+0x2ae>
   20494:	6897      	ldr	r7, [r2, #8]
   20496:	687b      	ldr	r3, [r7, #4]
   20498:	f023 0303 	bic.w	r3, r3, #3
   2049c:	e762      	b.n	20364 <_malloc_r+0x398>
   2049e:	f04f 0901 	mov.w	r9, #1
   204a2:	f8d8 c004 	ldr.w	ip, [r8, #4]
   204a6:	109b      	asrs	r3, r3, #2
   204a8:	4608      	mov	r0, r1
   204aa:	fa09 f303 	lsl.w	r3, r9, r3
   204ae:	ea43 030c 	orr.w	r3, r3, ip
   204b2:	f8c8 3004 	str.w	r3, [r8, #4]
   204b6:	e79b      	b.n	203f0 <_malloc_r+0x424>
   204b8:	2b54      	cmp	r3, #84	; 0x54
   204ba:	d80f      	bhi.n	204dc <_malloc_r+0x510>
   204bc:	ea4f 331c 	mov.w	r3, ip, lsr #12
   204c0:	336e      	adds	r3, #110	; 0x6e
   204c2:	00d8      	lsls	r0, r3, #3
   204c4:	e781      	b.n	203ca <_malloc_r+0x3fe>
   204c6:	2301      	movs	r3, #1
   204c8:	464f      	mov	r7, r9
   204ca:	f8c9 3004 	str.w	r3, [r9, #4]
   204ce:	2300      	movs	r3, #0
   204d0:	e748      	b.n	20364 <_malloc_r+0x398>
   204d2:	68af      	ldr	r7, [r5, #8]
   204d4:	687b      	ldr	r3, [r7, #4]
   204d6:	f023 0303 	bic.w	r3, r3, #3
   204da:	e743      	b.n	20364 <_malloc_r+0x398>
   204dc:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   204e0:	d81d      	bhi.n	2051e <_malloc_r+0x552>
   204e2:	ea4f 33dc 	mov.w	r3, ip, lsr #15
   204e6:	3377      	adds	r3, #119	; 0x77
   204e8:	00d8      	lsls	r0, r3, #3
   204ea:	e76e      	b.n	203ca <_malloc_r+0x3fe>
   204ec:	0519      	lsls	r1, r3, #20
   204ee:	0d09      	lsrs	r1, r1, #20
   204f0:	2900      	cmp	r1, #0
   204f2:	f47f aeca 	bne.w	2028a <_malloc_r+0x2be>
   204f6:	68ab      	ldr	r3, [r5, #8]
   204f8:	eb0b 0108 	add.w	r1, fp, r8
   204fc:	f041 0101 	orr.w	r1, r1, #1
   20500:	6059      	str	r1, [r3, #4]
   20502:	e719      	b.n	20338 <_malloc_r+0x36c>
   20504:	4630      	mov	r0, r6
   20506:	f107 0108 	add.w	r1, r7, #8
   2050a:	9301      	str	r3, [sp, #4]
   2050c:	f003 fe5a 	bl	241c4 <_free_r>
   20510:	9b01      	ldr	r3, [sp, #4]
   20512:	685a      	ldr	r2, [r3, #4]
   20514:	e710      	b.n	20338 <_malloc_r+0x36c>
   20516:	2101      	movs	r1, #1
   20518:	f04f 0b00 	mov.w	fp, #0
   2051c:	e6e3      	b.n	202e6 <_malloc_r+0x31a>
   2051e:	f240 5154 	movw	r1, #1364	; 0x554
   20522:	428b      	cmp	r3, r1
   20524:	d80d      	bhi.n	20542 <_malloc_r+0x576>
   20526:	ea4f 439c 	mov.w	r3, ip, lsr #18
   2052a:	337c      	adds	r3, #124	; 0x7c
   2052c:	00d8      	lsls	r0, r3, #3
   2052e:	e74c      	b.n	203ca <_malloc_r+0x3fe>
   20530:	686b      	ldr	r3, [r5, #4]
   20532:	ea23 0307 	bic.w	r3, r3, r7
   20536:	606b      	str	r3, [r5, #4]
   20538:	e784      	b.n	20444 <_malloc_r+0x478>
   2053a:	007f      	lsls	r7, r7, #1
   2053c:	f108 0804 	add.w	r8, r8, #4
   20540:	e787      	b.n	20452 <_malloc_r+0x486>
   20542:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
   20546:	237e      	movs	r3, #126	; 0x7e
   20548:	e73f      	b.n	203ca <_malloc_r+0x3fe>
   2054a:	bf00      	nop

0002054c <memchr>:
   2054c:	0783      	lsls	r3, r0, #30
   2054e:	b2c9      	uxtb	r1, r1
   20550:	b470      	push	{r4, r5, r6}
   20552:	d012      	beq.n	2057a <memchr+0x2e>
   20554:	2a00      	cmp	r2, #0
   20556:	d03b      	beq.n	205d0 <memchr+0x84>
   20558:	7803      	ldrb	r3, [r0, #0]
   2055a:	428b      	cmp	r3, r1
   2055c:	d025      	beq.n	205aa <memchr+0x5e>
   2055e:	4603      	mov	r3, r0
   20560:	3a01      	subs	r2, #1
   20562:	e006      	b.n	20572 <memchr+0x26>
   20564:	f112 32ff 	adds.w	r2, r2, #4294967295
   20568:	d31e      	bcc.n	205a8 <memchr+0x5c>
   2056a:	f813 4f01 	ldrb.w	r4, [r3, #1]!
   2056e:	428c      	cmp	r4, r1
   20570:	d01b      	beq.n	205aa <memchr+0x5e>
   20572:	3001      	adds	r0, #1
   20574:	f010 0f03 	tst.w	r0, #3
   20578:	d1f4      	bne.n	20564 <memchr+0x18>
   2057a:	2a03      	cmp	r2, #3
   2057c:	bf84      	itt	hi
   2057e:	ea41 2601 	orrhi.w	r6, r1, r1, lsl #8
   20582:	ea46 4606 	orrhi.w	r6, r6, r6, lsl #16
   20586:	d812      	bhi.n	205ae <memchr+0x62>
   20588:	2a00      	cmp	r2, #0
   2058a:	d021      	beq.n	205d0 <memchr+0x84>
   2058c:	7803      	ldrb	r3, [r0, #0]
   2058e:	428b      	cmp	r3, r1
   20590:	d00b      	beq.n	205aa <memchr+0x5e>
   20592:	1c43      	adds	r3, r0, #1
   20594:	1882      	adds	r2, r0, r2
   20596:	e003      	b.n	205a0 <memchr+0x54>
   20598:	f813 4b01 	ldrb.w	r4, [r3], #1
   2059c:	428c      	cmp	r4, r1
   2059e:	d004      	beq.n	205aa <memchr+0x5e>
   205a0:	4293      	cmp	r3, r2
   205a2:	f100 0001 	add.w	r0, r0, #1
   205a6:	d1f7      	bne.n	20598 <memchr+0x4c>
   205a8:	2000      	movs	r0, #0
   205aa:	bc70      	pop	{r4, r5, r6}
   205ac:	4770      	bx	lr
   205ae:	4604      	mov	r4, r0
   205b0:	3004      	adds	r0, #4
   205b2:	6823      	ldr	r3, [r4, #0]
   205b4:	4073      	eors	r3, r6
   205b6:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
   205ba:	ea25 0303 	bic.w	r3, r5, r3
   205be:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   205c2:	d103      	bne.n	205cc <memchr+0x80>
   205c4:	3a04      	subs	r2, #4
   205c6:	2a03      	cmp	r2, #3
   205c8:	d8f1      	bhi.n	205ae <memchr+0x62>
   205ca:	e7dd      	b.n	20588 <memchr+0x3c>
   205cc:	4620      	mov	r0, r4
   205ce:	e7db      	b.n	20588 <memchr+0x3c>
   205d0:	4610      	mov	r0, r2
   205d2:	e7ea      	b.n	205aa <memchr+0x5e>

000205d4 <memcmp>:
   205d4:	2a03      	cmp	r2, #3
   205d6:	b470      	push	{r4, r5, r6}
   205d8:	d924      	bls.n	20624 <memcmp+0x50>
   205da:	ea41 0500 	orr.w	r5, r1, r0
   205de:	4603      	mov	r3, r0
   205e0:	07ad      	lsls	r5, r5, #30
   205e2:	460c      	mov	r4, r1
   205e4:	d011      	beq.n	2060a <memcmp+0x36>
   205e6:	7805      	ldrb	r5, [r0, #0]
   205e8:	1c43      	adds	r3, r0, #1
   205ea:	780c      	ldrb	r4, [r1, #0]
   205ec:	1882      	adds	r2, r0, r2
   205ee:	42a5      	cmp	r5, r4
   205f0:	d006      	beq.n	20600 <memcmp+0x2c>
   205f2:	e01b      	b.n	2062c <memcmp+0x58>
   205f4:	f813 5b01 	ldrb.w	r5, [r3], #1
   205f8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   205fc:	42a5      	cmp	r5, r4
   205fe:	d115      	bne.n	2062c <memcmp+0x58>
   20600:	4293      	cmp	r3, r2
   20602:	d1f7      	bne.n	205f4 <memcmp+0x20>
   20604:	2000      	movs	r0, #0
   20606:	bc70      	pop	{r4, r5, r6}
   20608:	4770      	bx	lr
   2060a:	4621      	mov	r1, r4
   2060c:	4618      	mov	r0, r3
   2060e:	3404      	adds	r4, #4
   20610:	3304      	adds	r3, #4
   20612:	6806      	ldr	r6, [r0, #0]
   20614:	680d      	ldr	r5, [r1, #0]
   20616:	42ae      	cmp	r6, r5
   20618:	d104      	bne.n	20624 <memcmp+0x50>
   2061a:	3a04      	subs	r2, #4
   2061c:	2a03      	cmp	r2, #3
   2061e:	d8f4      	bhi.n	2060a <memcmp+0x36>
   20620:	4621      	mov	r1, r4
   20622:	4618      	mov	r0, r3
   20624:	2a00      	cmp	r2, #0
   20626:	d1de      	bne.n	205e6 <memcmp+0x12>
   20628:	4610      	mov	r0, r2
   2062a:	e7ec      	b.n	20606 <memcmp+0x32>
   2062c:	1b28      	subs	r0, r5, r4
   2062e:	e7ea      	b.n	20606 <memcmp+0x32>

00020630 <memcpy>:
   20630:	2a03      	cmp	r2, #3
   20632:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
   20636:	d809      	bhi.n	2064c <memcpy+0x1c>
   20638:	b12a      	cbz	r2, 20646 <memcpy+0x16>
   2063a:	2300      	movs	r3, #0
   2063c:	5ccc      	ldrb	r4, [r1, r3]
   2063e:	54c4      	strb	r4, [r0, r3]
   20640:	3301      	adds	r3, #1
   20642:	4293      	cmp	r3, r2
   20644:	d1fa      	bne.n	2063c <memcpy+0xc>
   20646:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
   2064a:	4770      	bx	lr
   2064c:	0785      	lsls	r5, r0, #30
   2064e:	4402      	add	r2, r0
   20650:	4603      	mov	r3, r0
   20652:	d005      	beq.n	20660 <memcpy+0x30>
   20654:	f811 4b01 	ldrb.w	r4, [r1], #1
   20658:	f803 4b01 	strb.w	r4, [r3], #1
   2065c:	079c      	lsls	r4, r3, #30
   2065e:	d1f9      	bne.n	20654 <memcpy+0x24>
   20660:	f011 0503 	ands.w	r5, r1, #3
   20664:	d042      	beq.n	206ec <memcpy+0xbc>
   20666:	1ad4      	subs	r4, r2, r3
   20668:	426e      	negs	r6, r5
   2066a:	2c03      	cmp	r4, #3
   2066c:	598f      	ldr	r7, [r1, r6]
   2066e:	dd12      	ble.n	20696 <memcpy+0x66>
   20670:	f1c5 0c04 	rsb	ip, r5, #4
   20674:	00ed      	lsls	r5, r5, #3
   20676:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   2067a:	3104      	adds	r1, #4
   2067c:	fa27 f805 	lsr.w	r8, r7, r5
   20680:	598c      	ldr	r4, [r1, r6]
   20682:	4627      	mov	r7, r4
   20684:	fa04 f40c 	lsl.w	r4, r4, ip
   20688:	ea44 0408 	orr.w	r4, r4, r8
   2068c:	f843 4b04 	str.w	r4, [r3], #4
   20690:	1ad4      	subs	r4, r2, r3
   20692:	2c03      	cmp	r4, #3
   20694:	dcf1      	bgt.n	2067a <memcpy+0x4a>
   20696:	429a      	cmp	r2, r3
   20698:	d9d5      	bls.n	20646 <memcpy+0x16>
   2069a:	2200      	movs	r2, #0
   2069c:	5c8d      	ldrb	r5, [r1, r2]
   2069e:	549d      	strb	r5, [r3, r2]
   206a0:	3201      	adds	r2, #1
   206a2:	42a2      	cmp	r2, r4
   206a4:	d1fa      	bne.n	2069c <memcpy+0x6c>
   206a6:	e7ce      	b.n	20646 <memcpy+0x16>
   206a8:	680c      	ldr	r4, [r1, #0]
   206aa:	601c      	str	r4, [r3, #0]
   206ac:	684c      	ldr	r4, [r1, #4]
   206ae:	605c      	str	r4, [r3, #4]
   206b0:	688c      	ldr	r4, [r1, #8]
   206b2:	609c      	str	r4, [r3, #8]
   206b4:	68cc      	ldr	r4, [r1, #12]
   206b6:	60dc      	str	r4, [r3, #12]
   206b8:	690c      	ldr	r4, [r1, #16]
   206ba:	611c      	str	r4, [r3, #16]
   206bc:	694c      	ldr	r4, [r1, #20]
   206be:	615c      	str	r4, [r3, #20]
   206c0:	698c      	ldr	r4, [r1, #24]
   206c2:	619c      	str	r4, [r3, #24]
   206c4:	69cc      	ldr	r4, [r1, #28]
   206c6:	61dc      	str	r4, [r3, #28]
   206c8:	6a0c      	ldr	r4, [r1, #32]
   206ca:	621c      	str	r4, [r3, #32]
   206cc:	6a4c      	ldr	r4, [r1, #36]	; 0x24
   206ce:	625c      	str	r4, [r3, #36]	; 0x24
   206d0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
   206d2:	629c      	str	r4, [r3, #40]	; 0x28
   206d4:	6acc      	ldr	r4, [r1, #44]	; 0x2c
   206d6:	62dc      	str	r4, [r3, #44]	; 0x2c
   206d8:	6b0c      	ldr	r4, [r1, #48]	; 0x30
   206da:	631c      	str	r4, [r3, #48]	; 0x30
   206dc:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   206de:	635c      	str	r4, [r3, #52]	; 0x34
   206e0:	6b8c      	ldr	r4, [r1, #56]	; 0x38
   206e2:	639c      	str	r4, [r3, #56]	; 0x38
   206e4:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
   206e6:	3140      	adds	r1, #64	; 0x40
   206e8:	63dc      	str	r4, [r3, #60]	; 0x3c
   206ea:	3340      	adds	r3, #64	; 0x40
   206ec:	1ad4      	subs	r4, r2, r3
   206ee:	2c3f      	cmp	r4, #63	; 0x3f
   206f0:	dcda      	bgt.n	206a8 <memcpy+0x78>
   206f2:	e00a      	b.n	2070a <memcpy+0xda>
   206f4:	680c      	ldr	r4, [r1, #0]
   206f6:	601c      	str	r4, [r3, #0]
   206f8:	684c      	ldr	r4, [r1, #4]
   206fa:	605c      	str	r4, [r3, #4]
   206fc:	688c      	ldr	r4, [r1, #8]
   206fe:	609c      	str	r4, [r3, #8]
   20700:	68cc      	ldr	r4, [r1, #12]
   20702:	3110      	adds	r1, #16
   20704:	60dc      	str	r4, [r3, #12]
   20706:	3310      	adds	r3, #16
   20708:	1ad4      	subs	r4, r2, r3
   2070a:	2c0f      	cmp	r4, #15
   2070c:	dcf2      	bgt.n	206f4 <memcpy+0xc4>
   2070e:	e004      	b.n	2071a <memcpy+0xea>
   20710:	f851 4b04 	ldr.w	r4, [r1], #4
   20714:	f843 4b04 	str.w	r4, [r3], #4
   20718:	1ad4      	subs	r4, r2, r3
   2071a:	2c03      	cmp	r4, #3
   2071c:	dcf8      	bgt.n	20710 <memcpy+0xe0>
   2071e:	e7ba      	b.n	20696 <memcpy+0x66>

00020720 <memmove>:
   20720:	4288      	cmp	r0, r1
   20722:	b4f0      	push	{r4, r5, r6, r7}
   20724:	d912      	bls.n	2074c <memmove+0x2c>
   20726:	188d      	adds	r5, r1, r2
   20728:	42a8      	cmp	r0, r5
   2072a:	d20f      	bcs.n	2074c <memmove+0x2c>
   2072c:	b162      	cbz	r2, 20748 <memmove+0x28>
   2072e:	4613      	mov	r3, r2
   20730:	1882      	adds	r2, r0, r2
   20732:	4259      	negs	r1, r3
   20734:	186d      	adds	r5, r5, r1
   20736:	1852      	adds	r2, r2, r1
   20738:	18ec      	adds	r4, r5, r3
   2073a:	18d1      	adds	r1, r2, r3
   2073c:	3b01      	subs	r3, #1
   2073e:	f814 4c01 	ldrb.w	r4, [r4, #-1]
   20742:	f801 4c01 	strb.w	r4, [r1, #-1]
   20746:	d1f7      	bne.n	20738 <memmove+0x18>
   20748:	bcf0      	pop	{r4, r5, r6, r7}
   2074a:	4770      	bx	lr
   2074c:	2a0f      	cmp	r2, #15
   2074e:	bf98      	it	ls
   20750:	4603      	movls	r3, r0
   20752:	d937      	bls.n	207c4 <memmove+0xa4>
   20754:	ea40 0301 	orr.w	r3, r0, r1
   20758:	079b      	lsls	r3, r3, #30
   2075a:	d13d      	bne.n	207d8 <memmove+0xb8>
   2075c:	f1a2 0710 	sub.w	r7, r2, #16
   20760:	f101 0610 	add.w	r6, r1, #16
   20764:	460b      	mov	r3, r1
   20766:	4604      	mov	r4, r0
   20768:	093f      	lsrs	r7, r7, #4
   2076a:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   2076e:	681d      	ldr	r5, [r3, #0]
   20770:	6025      	str	r5, [r4, #0]
   20772:	685d      	ldr	r5, [r3, #4]
   20774:	6065      	str	r5, [r4, #4]
   20776:	689d      	ldr	r5, [r3, #8]
   20778:	60a5      	str	r5, [r4, #8]
   2077a:	68dd      	ldr	r5, [r3, #12]
   2077c:	3310      	adds	r3, #16
   2077e:	60e5      	str	r5, [r4, #12]
   20780:	3410      	adds	r4, #16
   20782:	429e      	cmp	r6, r3
   20784:	d1f3      	bne.n	2076e <memmove+0x4e>
   20786:	1c7c      	adds	r4, r7, #1
   20788:	f002 020f 	and.w	r2, r2, #15
   2078c:	0124      	lsls	r4, r4, #4
   2078e:	2a03      	cmp	r2, #3
   20790:	eb00 0304 	add.w	r3, r0, r4
   20794:	4421      	add	r1, r4
   20796:	d915      	bls.n	207c4 <memmove+0xa4>
   20798:	f1a2 0c04 	sub.w	ip, r2, #4
   2079c:	460d      	mov	r5, r1
   2079e:	461c      	mov	r4, r3
   207a0:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
   207a4:	eb03 078c 	add.w	r7, r3, ip, lsl #2
   207a8:	3704      	adds	r7, #4
   207aa:	f855 6b04 	ldr.w	r6, [r5], #4
   207ae:	f844 6b04 	str.w	r6, [r4], #4
   207b2:	42bc      	cmp	r4, r7
   207b4:	d1f9      	bne.n	207aa <memmove+0x8a>
   207b6:	f10c 0401 	add.w	r4, ip, #1
   207ba:	f002 0203 	and.w	r2, r2, #3
   207be:	00a4      	lsls	r4, r4, #2
   207c0:	1909      	adds	r1, r1, r4
   207c2:	191b      	adds	r3, r3, r4
   207c4:	2a00      	cmp	r2, #0
   207c6:	d0bf      	beq.n	20748 <memmove+0x28>
   207c8:	188a      	adds	r2, r1, r2
   207ca:	f811 4b01 	ldrb.w	r4, [r1], #1
   207ce:	4291      	cmp	r1, r2
   207d0:	f803 4b01 	strb.w	r4, [r3], #1
   207d4:	d1f9      	bne.n	207ca <memmove+0xaa>
   207d6:	e7b7      	b.n	20748 <memmove+0x28>
   207d8:	4603      	mov	r3, r0
   207da:	e7f5      	b.n	207c8 <memmove+0xa8>

000207dc <memset>:
   207dc:	2a03      	cmp	r2, #3
   207de:	b2c9      	uxtb	r1, r1
   207e0:	b470      	push	{r4, r5, r6}
   207e2:	d807      	bhi.n	207f4 <memset+0x18>
   207e4:	b122      	cbz	r2, 207f0 <memset+0x14>
   207e6:	2300      	movs	r3, #0
   207e8:	54c1      	strb	r1, [r0, r3]
   207ea:	3301      	adds	r3, #1
   207ec:	4293      	cmp	r3, r2
   207ee:	d1fb      	bne.n	207e8 <memset+0xc>
   207f0:	bc70      	pop	{r4, r5, r6}
   207f2:	4770      	bx	lr
   207f4:	0785      	lsls	r5, r0, #30
   207f6:	4402      	add	r2, r0
   207f8:	4603      	mov	r3, r0
   207fa:	d003      	beq.n	20804 <memset+0x28>
   207fc:	f803 1b01 	strb.w	r1, [r3], #1
   20800:	079c      	lsls	r4, r3, #30
   20802:	d1fb      	bne.n	207fc <memset+0x20>
   20804:	020c      	lsls	r4, r1, #8
   20806:	1ad5      	subs	r5, r2, r3
   20808:	1864      	adds	r4, r4, r1
   2080a:	0426      	lsls	r6, r4, #16
   2080c:	2d3f      	cmp	r5, #63	; 0x3f
   2080e:	4434      	add	r4, r6
   20810:	dd1a      	ble.n	20848 <memset+0x6c>
   20812:	601c      	str	r4, [r3, #0]
   20814:	605c      	str	r4, [r3, #4]
   20816:	609c      	str	r4, [r3, #8]
   20818:	60dc      	str	r4, [r3, #12]
   2081a:	611c      	str	r4, [r3, #16]
   2081c:	615c      	str	r4, [r3, #20]
   2081e:	619c      	str	r4, [r3, #24]
   20820:	61dc      	str	r4, [r3, #28]
   20822:	621c      	str	r4, [r3, #32]
   20824:	625c      	str	r4, [r3, #36]	; 0x24
   20826:	629c      	str	r4, [r3, #40]	; 0x28
   20828:	62dc      	str	r4, [r3, #44]	; 0x2c
   2082a:	631c      	str	r4, [r3, #48]	; 0x30
   2082c:	635c      	str	r4, [r3, #52]	; 0x34
   2082e:	639c      	str	r4, [r3, #56]	; 0x38
   20830:	63dc      	str	r4, [r3, #60]	; 0x3c
   20832:	3340      	adds	r3, #64	; 0x40
   20834:	1ad5      	subs	r5, r2, r3
   20836:	2d3f      	cmp	r5, #63	; 0x3f
   20838:	dceb      	bgt.n	20812 <memset+0x36>
   2083a:	e005      	b.n	20848 <memset+0x6c>
   2083c:	601c      	str	r4, [r3, #0]
   2083e:	605c      	str	r4, [r3, #4]
   20840:	609c      	str	r4, [r3, #8]
   20842:	60dc      	str	r4, [r3, #12]
   20844:	3310      	adds	r3, #16
   20846:	1ad5      	subs	r5, r2, r3
   20848:	2d0f      	cmp	r5, #15
   2084a:	dcf7      	bgt.n	2083c <memset+0x60>
   2084c:	e002      	b.n	20854 <memset+0x78>
   2084e:	f843 4b04 	str.w	r4, [r3], #4
   20852:	1ad5      	subs	r5, r2, r3
   20854:	2d03      	cmp	r5, #3
   20856:	dcfa      	bgt.n	2084e <memset+0x72>
   20858:	4293      	cmp	r3, r2
   2085a:	d2c9      	bcs.n	207f0 <memset+0x14>
   2085c:	f803 1b01 	strb.w	r1, [r3], #1
   20860:	4293      	cmp	r3, r2
   20862:	d1fb      	bne.n	2085c <memset+0x80>
   20864:	e7c4      	b.n	207f0 <memset+0x14>
   20866:	bf00      	nop

00020868 <__malloc_lock>:
   20868:	4770      	bx	lr
   2086a:	bf00      	nop

0002086c <__malloc_unlock>:
   2086c:	4770      	bx	lr
   2086e:	bf00      	nop

00020870 <_putc_r>:
   20870:	b570      	push	{r4, r5, r6, lr}
   20872:	460d      	mov	r5, r1
   20874:	4614      	mov	r4, r2
   20876:	4606      	mov	r6, r0
   20878:	b110      	cbz	r0, 20880 <_putc_r+0x10>
   2087a:	6983      	ldr	r3, [r0, #24]
   2087c:	2b00      	cmp	r3, #0
   2087e:	d02f      	beq.n	208e0 <_putc_r+0x70>
   20880:	f24d 1308 	movw	r3, #53512	; 0xd108
   20884:	f2c0 0302 	movt	r3, #2
   20888:	429c      	cmp	r4, r3
   2088a:	bf08      	it	eq
   2088c:	6874      	ldreq	r4, [r6, #4]
   2088e:	d00e      	beq.n	208ae <_putc_r+0x3e>
   20890:	f24d 03e8 	movw	r3, #53480	; 0xd0e8
   20894:	f2c0 0302 	movt	r3, #2
   20898:	429c      	cmp	r4, r3
   2089a:	bf08      	it	eq
   2089c:	68b4      	ldreq	r4, [r6, #8]
   2089e:	d006      	beq.n	208ae <_putc_r+0x3e>
   208a0:	f24d 03c8 	movw	r3, #53448	; 0xd0c8
   208a4:	f2c0 0302 	movt	r3, #2
   208a8:	429c      	cmp	r4, r3
   208aa:	bf08      	it	eq
   208ac:	68f4      	ldreq	r4, [r6, #12]
   208ae:	68a3      	ldr	r3, [r4, #8]
   208b0:	3b01      	subs	r3, #1
   208b2:	60a3      	str	r3, [r4, #8]
   208b4:	2b00      	cmp	r3, #0
   208b6:	db06      	blt.n	208c6 <_putc_r+0x56>
   208b8:	6823      	ldr	r3, [r4, #0]
   208ba:	701d      	strb	r5, [r3, #0]
   208bc:	6823      	ldr	r3, [r4, #0]
   208be:	f813 0b01 	ldrb.w	r0, [r3], #1
   208c2:	6023      	str	r3, [r4, #0]
   208c4:	bd70      	pop	{r4, r5, r6, pc}
   208c6:	69a2      	ldr	r2, [r4, #24]
   208c8:	4293      	cmp	r3, r2
   208ca:	db0c      	blt.n	208e6 <_putc_r+0x76>
   208cc:	6823      	ldr	r3, [r4, #0]
   208ce:	701d      	strb	r5, [r3, #0]
   208d0:	6823      	ldr	r3, [r4, #0]
   208d2:	7819      	ldrb	r1, [r3, #0]
   208d4:	290a      	cmp	r1, #10
   208d6:	d00d      	beq.n	208f4 <_putc_r+0x84>
   208d8:	3301      	adds	r3, #1
   208da:	4608      	mov	r0, r1
   208dc:	6023      	str	r3, [r4, #0]
   208de:	bd70      	pop	{r4, r5, r6, pc}
   208e0:	f003 fb84 	bl	23fec <__sinit>
   208e4:	e7cc      	b.n	20880 <_putc_r+0x10>
   208e6:	4630      	mov	r0, r6
   208e8:	4629      	mov	r1, r5
   208ea:	4622      	mov	r2, r4
   208ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   208f0:	f002 b8a4 	b.w	22a3c <__swbuf_r>
   208f4:	4630      	mov	r0, r6
   208f6:	4622      	mov	r2, r4
   208f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   208fc:	f002 b89e 	b.w	22a3c <__swbuf_r>

00020900 <putc>:
   20900:	b570      	push	{r4, r5, r6, lr}
   20902:	f240 0528 	movw	r5, #40	; 0x28
   20906:	f2c1 0500 	movt	r5, #4096	; 0x1000
   2090a:	4606      	mov	r6, r0
   2090c:	460c      	mov	r4, r1
   2090e:	6828      	ldr	r0, [r5, #0]
   20910:	b110      	cbz	r0, 20918 <putc+0x18>
   20912:	6983      	ldr	r3, [r0, #24]
   20914:	2b00      	cmp	r3, #0
   20916:	d02c      	beq.n	20972 <putc+0x72>
   20918:	f24d 1308 	movw	r3, #53512	; 0xd108
   2091c:	f2c0 0302 	movt	r3, #2
   20920:	429c      	cmp	r4, r3
   20922:	d02e      	beq.n	20982 <putc+0x82>
   20924:	f24d 03e8 	movw	r3, #53480	; 0xd0e8
   20928:	f2c0 0302 	movt	r3, #2
   2092c:	429c      	cmp	r4, r3
   2092e:	d032      	beq.n	20996 <putc+0x96>
   20930:	f24d 03c8 	movw	r3, #53448	; 0xd0c8
   20934:	f2c0 0302 	movt	r3, #2
   20938:	429c      	cmp	r4, r3
   2093a:	bf04      	itt	eq
   2093c:	682b      	ldreq	r3, [r5, #0]
   2093e:	68dc      	ldreq	r4, [r3, #12]
   20940:	68a3      	ldr	r3, [r4, #8]
   20942:	3b01      	subs	r3, #1
   20944:	60a3      	str	r3, [r4, #8]
   20946:	2b00      	cmp	r3, #0
   20948:	db06      	blt.n	20958 <putc+0x58>
   2094a:	6823      	ldr	r3, [r4, #0]
   2094c:	701e      	strb	r6, [r3, #0]
   2094e:	6823      	ldr	r3, [r4, #0]
   20950:	f813 0b01 	ldrb.w	r0, [r3], #1
   20954:	6023      	str	r3, [r4, #0]
   20956:	bd70      	pop	{r4, r5, r6, pc}
   20958:	69a2      	ldr	r2, [r4, #24]
   2095a:	4293      	cmp	r3, r2
   2095c:	db14      	blt.n	20988 <putc+0x88>
   2095e:	6823      	ldr	r3, [r4, #0]
   20960:	701e      	strb	r6, [r3, #0]
   20962:	6823      	ldr	r3, [r4, #0]
   20964:	7819      	ldrb	r1, [r3, #0]
   20966:	290a      	cmp	r1, #10
   20968:	d018      	beq.n	2099c <putc+0x9c>
   2096a:	3301      	adds	r3, #1
   2096c:	4608      	mov	r0, r1
   2096e:	6023      	str	r3, [r4, #0]
   20970:	bd70      	pop	{r4, r5, r6, pc}
   20972:	f003 fb3b 	bl	23fec <__sinit>
   20976:	f24d 1308 	movw	r3, #53512	; 0xd108
   2097a:	f2c0 0302 	movt	r3, #2
   2097e:	429c      	cmp	r4, r3
   20980:	d1d0      	bne.n	20924 <putc+0x24>
   20982:	682b      	ldr	r3, [r5, #0]
   20984:	685c      	ldr	r4, [r3, #4]
   20986:	e7db      	b.n	20940 <putc+0x40>
   20988:	6828      	ldr	r0, [r5, #0]
   2098a:	4631      	mov	r1, r6
   2098c:	4622      	mov	r2, r4
   2098e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   20992:	f002 b853 	b.w	22a3c <__swbuf_r>
   20996:	682b      	ldr	r3, [r5, #0]
   20998:	689c      	ldr	r4, [r3, #8]
   2099a:	e7d1      	b.n	20940 <putc+0x40>
   2099c:	6828      	ldr	r0, [r5, #0]
   2099e:	4622      	mov	r2, r4
   209a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   209a4:	f002 b84a 	b.w	22a3c <__swbuf_r>

000209a8 <realloc>:
   209a8:	f240 0328 	movw	r3, #40	; 0x28
   209ac:	460a      	mov	r2, r1
   209ae:	f2c1 0300 	movt	r3, #4096	; 0x1000
   209b2:	4601      	mov	r1, r0
   209b4:	6818      	ldr	r0, [r3, #0]
   209b6:	f000 b801 	b.w	209bc <_realloc_r>
   209ba:	bf00      	nop

000209bc <_realloc_r>:
   209bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   209c0:	460c      	mov	r4, r1
   209c2:	b083      	sub	sp, #12
   209c4:	4607      	mov	r7, r0
   209c6:	4690      	mov	r8, r2
   209c8:	2900      	cmp	r1, #0
   209ca:	f000 8120 	beq.w	20c0e <_realloc_r+0x252>
   209ce:	f108 050b 	add.w	r5, r8, #11
   209d2:	f7ff ff49 	bl	20868 <__malloc_lock>
   209d6:	2d16      	cmp	r5, #22
   209d8:	f854 1c04 	ldr.w	r1, [r4, #-4]
   209dc:	f200 8093 	bhi.w	20b06 <_realloc_r+0x14a>
   209e0:	2210      	movs	r2, #16
   209e2:	2600      	movs	r6, #0
   209e4:	4615      	mov	r5, r2
   209e6:	4545      	cmp	r5, r8
   209e8:	bf38      	it	cc
   209ea:	f046 0601 	orrcc.w	r6, r6, #1
   209ee:	2e00      	cmp	r6, #0
   209f0:	f040 8113 	bne.w	20c1a <_realloc_r+0x25e>
   209f4:	f021 0a03 	bic.w	sl, r1, #3
   209f8:	f1a4 0b08 	sub.w	fp, r4, #8
   209fc:	4592      	cmp	sl, r2
   209fe:	bfa8      	it	ge
   20a00:	4656      	movge	r6, sl
   20a02:	da6a      	bge.n	20ada <_realloc_r+0x11e>
   20a04:	f240 191c 	movw	r9, #284	; 0x11c
   20a08:	eb0b 000a 	add.w	r0, fp, sl
   20a0c:	f2c1 0900 	movt	r9, #4096	; 0x1000
   20a10:	f8d9 c008 	ldr.w	ip, [r9, #8]
   20a14:	4584      	cmp	ip, r0
   20a16:	f000 8105 	beq.w	20c24 <_realloc_r+0x268>
   20a1a:	6843      	ldr	r3, [r0, #4]
   20a1c:	f023 0e01 	bic.w	lr, r3, #1
   20a20:	4486      	add	lr, r0
   20a22:	f8de e004 	ldr.w	lr, [lr, #4]
   20a26:	f01e 0f01 	tst.w	lr, #1
   20a2a:	bf1c      	itt	ne
   20a2c:	46b6      	movne	lr, r6
   20a2e:	4630      	movne	r0, r6
   20a30:	d06e      	beq.n	20b10 <_realloc_r+0x154>
   20a32:	07cb      	lsls	r3, r1, #31
   20a34:	f100 808c 	bmi.w	20b50 <_realloc_r+0x194>
   20a38:	f854 3c08 	ldr.w	r3, [r4, #-8]
   20a3c:	ebc3 030b 	rsb	r3, r3, fp
   20a40:	6859      	ldr	r1, [r3, #4]
   20a42:	f021 0103 	bic.w	r1, r1, #3
   20a46:	2800      	cmp	r0, #0
   20a48:	f000 80aa 	beq.w	20ba0 <_realloc_r+0x1e4>
   20a4c:	4560      	cmp	r0, ip
   20a4e:	eb01 0c0a 	add.w	ip, r1, sl
   20a52:	f000 813b 	beq.w	20ccc <_realloc_r+0x310>
   20a56:	eb0e 060c 	add.w	r6, lr, ip
   20a5a:	42b2      	cmp	r2, r6
   20a5c:	f300 80a2 	bgt.w	20ba4 <_realloc_r+0x1e8>
   20a60:	68c1      	ldr	r1, [r0, #12]
   20a62:	469e      	mov	lr, r3
   20a64:	6880      	ldr	r0, [r0, #8]
   20a66:	f1aa 0204 	sub.w	r2, sl, #4
   20a6a:	2a24      	cmp	r2, #36	; 0x24
   20a6c:	60c1      	str	r1, [r0, #12]
   20a6e:	6088      	str	r0, [r1, #8]
   20a70:	68d9      	ldr	r1, [r3, #12]
   20a72:	f85e 0f08 	ldr.w	r0, [lr, #8]!
   20a76:	60c1      	str	r1, [r0, #12]
   20a78:	6088      	str	r0, [r1, #8]
   20a7a:	f200 8179 	bhi.w	20d70 <_realloc_r+0x3b4>
   20a7e:	2a13      	cmp	r2, #19
   20a80:	bf9c      	itt	ls
   20a82:	4672      	movls	r2, lr
   20a84:	4621      	movls	r1, r4
   20a86:	d91f      	bls.n	20ac8 <_realloc_r+0x10c>
   20a88:	6821      	ldr	r1, [r4, #0]
   20a8a:	2a1b      	cmp	r2, #27
   20a8c:	bf98      	it	ls
   20a8e:	f103 0210 	addls.w	r2, r3, #16
   20a92:	6099      	str	r1, [r3, #8]
   20a94:	6861      	ldr	r1, [r4, #4]
   20a96:	60d9      	str	r1, [r3, #12]
   20a98:	bf98      	it	ls
   20a9a:	f104 0108 	addls.w	r1, r4, #8
   20a9e:	d913      	bls.n	20ac8 <_realloc_r+0x10c>
   20aa0:	68a1      	ldr	r1, [r4, #8]
   20aa2:	2a24      	cmp	r2, #36	; 0x24
   20aa4:	bf14      	ite	ne
   20aa6:	f103 0218 	addne.w	r2, r3, #24
   20aaa:	f103 0220 	addeq.w	r2, r3, #32
   20aae:	6119      	str	r1, [r3, #16]
   20ab0:	68e1      	ldr	r1, [r4, #12]
   20ab2:	6159      	str	r1, [r3, #20]
   20ab4:	bf11      	iteee	ne
   20ab6:	f104 0110 	addne.w	r1, r4, #16
   20aba:	6920      	ldreq	r0, [r4, #16]
   20abc:	f104 0118 	addeq.w	r1, r4, #24
   20ac0:	6198      	streq	r0, [r3, #24]
   20ac2:	bf04      	itt	eq
   20ac4:	6960      	ldreq	r0, [r4, #20]
   20ac6:	61d8      	streq	r0, [r3, #28]
   20ac8:	6808      	ldr	r0, [r1, #0]
   20aca:	4674      	mov	r4, lr
   20acc:	6010      	str	r0, [r2, #0]
   20ace:	469b      	mov	fp, r3
   20ad0:	6848      	ldr	r0, [r1, #4]
   20ad2:	6050      	str	r0, [r2, #4]
   20ad4:	6889      	ldr	r1, [r1, #8]
   20ad6:	6091      	str	r1, [r2, #8]
   20ad8:	6859      	ldr	r1, [r3, #4]
   20ada:	1b72      	subs	r2, r6, r5
   20adc:	2a0f      	cmp	r2, #15
   20ade:	d822      	bhi.n	20b26 <_realloc_r+0x16a>
   20ae0:	eb0b 0306 	add.w	r3, fp, r6
   20ae4:	f001 0101 	and.w	r1, r1, #1
   20ae8:	430e      	orrs	r6, r1
   20aea:	f8cb 6004 	str.w	r6, [fp, #4]
   20aee:	685a      	ldr	r2, [r3, #4]
   20af0:	f042 0201 	orr.w	r2, r2, #1
   20af4:	605a      	str	r2, [r3, #4]
   20af6:	4638      	mov	r0, r7
   20af8:	46a0      	mov	r8, r4
   20afa:	f7ff feb7 	bl	2086c <__malloc_unlock>
   20afe:	4640      	mov	r0, r8
   20b00:	b003      	add	sp, #12
   20b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20b06:	f025 0507 	bic.w	r5, r5, #7
   20b0a:	462a      	mov	r2, r5
   20b0c:	0fee      	lsrs	r6, r5, #31
   20b0e:	e76a      	b.n	209e6 <_realloc_r+0x2a>
   20b10:	f023 0e03 	bic.w	lr, r3, #3
   20b14:	eb0e 060a 	add.w	r6, lr, sl
   20b18:	42b2      	cmp	r2, r6
   20b1a:	dc8a      	bgt.n	20a32 <_realloc_r+0x76>
   20b1c:	68c3      	ldr	r3, [r0, #12]
   20b1e:	6882      	ldr	r2, [r0, #8]
   20b20:	60d3      	str	r3, [r2, #12]
   20b22:	609a      	str	r2, [r3, #8]
   20b24:	e7d9      	b.n	20ada <_realloc_r+0x11e>
   20b26:	eb0b 0605 	add.w	r6, fp, r5
   20b2a:	f001 0101 	and.w	r1, r1, #1
   20b2e:	18b3      	adds	r3, r6, r2
   20b30:	430d      	orrs	r5, r1
   20b32:	f042 0201 	orr.w	r2, r2, #1
   20b36:	f8cb 5004 	str.w	r5, [fp, #4]
   20b3a:	6072      	str	r2, [r6, #4]
   20b3c:	4638      	mov	r0, r7
   20b3e:	685a      	ldr	r2, [r3, #4]
   20b40:	f106 0108 	add.w	r1, r6, #8
   20b44:	f042 0201 	orr.w	r2, r2, #1
   20b48:	605a      	str	r2, [r3, #4]
   20b4a:	f003 fb3b 	bl	241c4 <_free_r>
   20b4e:	e7d2      	b.n	20af6 <_realloc_r+0x13a>
   20b50:	4641      	mov	r1, r8
   20b52:	4638      	mov	r0, r7
   20b54:	f7ff fa3a 	bl	1ffcc <_malloc_r>
   20b58:	4680      	mov	r8, r0
   20b5a:	b1e8      	cbz	r0, 20b98 <_realloc_r+0x1dc>
   20b5c:	f854 1c04 	ldr.w	r1, [r4, #-4]
   20b60:	f1a0 0208 	sub.w	r2, r0, #8
   20b64:	f021 0301 	bic.w	r3, r1, #1
   20b68:	445b      	add	r3, fp
   20b6a:	429a      	cmp	r2, r3
   20b6c:	f000 80fa 	beq.w	20d64 <_realloc_r+0x3a8>
   20b70:	f1aa 0204 	sub.w	r2, sl, #4
   20b74:	2a24      	cmp	r2, #36	; 0x24
   20b76:	f200 80a5 	bhi.w	20cc4 <_realloc_r+0x308>
   20b7a:	2a13      	cmp	r2, #19
   20b7c:	bf9c      	itt	ls
   20b7e:	4603      	movls	r3, r0
   20b80:	4622      	movls	r2, r4
   20b82:	d870      	bhi.n	20c66 <_realloc_r+0x2aa>
   20b84:	6811      	ldr	r1, [r2, #0]
   20b86:	6019      	str	r1, [r3, #0]
   20b88:	6851      	ldr	r1, [r2, #4]
   20b8a:	6059      	str	r1, [r3, #4]
   20b8c:	6892      	ldr	r2, [r2, #8]
   20b8e:	609a      	str	r2, [r3, #8]
   20b90:	4638      	mov	r0, r7
   20b92:	4621      	mov	r1, r4
   20b94:	f003 fb16 	bl	241c4 <_free_r>
   20b98:	4638      	mov	r0, r7
   20b9a:	f7ff fe67 	bl	2086c <__malloc_unlock>
   20b9e:	e7ae      	b.n	20afe <_realloc_r+0x142>
   20ba0:	eb01 0c0a 	add.w	ip, r1, sl
   20ba4:	4562      	cmp	r2, ip
   20ba6:	dcd3      	bgt.n	20b50 <_realloc_r+0x194>
   20ba8:	461e      	mov	r6, r3
   20baa:	68d9      	ldr	r1, [r3, #12]
   20bac:	f1aa 0204 	sub.w	r2, sl, #4
   20bb0:	f856 0f08 	ldr.w	r0, [r6, #8]!
   20bb4:	2a24      	cmp	r2, #36	; 0x24
   20bb6:	60c1      	str	r1, [r0, #12]
   20bb8:	6088      	str	r0, [r1, #8]
   20bba:	d875      	bhi.n	20ca8 <_realloc_r+0x2ec>
   20bbc:	2a13      	cmp	r2, #19
   20bbe:	bf9c      	itt	ls
   20bc0:	4632      	movls	r2, r6
   20bc2:	4621      	movls	r1, r4
   20bc4:	d91f      	bls.n	20c06 <_realloc_r+0x24a>
   20bc6:	6821      	ldr	r1, [r4, #0]
   20bc8:	2a1b      	cmp	r2, #27
   20bca:	bf98      	it	ls
   20bcc:	f103 0210 	addls.w	r2, r3, #16
   20bd0:	6099      	str	r1, [r3, #8]
   20bd2:	6861      	ldr	r1, [r4, #4]
   20bd4:	60d9      	str	r1, [r3, #12]
   20bd6:	bf98      	it	ls
   20bd8:	f104 0108 	addls.w	r1, r4, #8
   20bdc:	d913      	bls.n	20c06 <_realloc_r+0x24a>
   20bde:	68a1      	ldr	r1, [r4, #8]
   20be0:	2a24      	cmp	r2, #36	; 0x24
   20be2:	bf14      	ite	ne
   20be4:	f103 0218 	addne.w	r2, r3, #24
   20be8:	f103 0220 	addeq.w	r2, r3, #32
   20bec:	6119      	str	r1, [r3, #16]
   20bee:	68e1      	ldr	r1, [r4, #12]
   20bf0:	6159      	str	r1, [r3, #20]
   20bf2:	bf11      	iteee	ne
   20bf4:	f104 0110 	addne.w	r1, r4, #16
   20bf8:	6920      	ldreq	r0, [r4, #16]
   20bfa:	f104 0118 	addeq.w	r1, r4, #24
   20bfe:	6198      	streq	r0, [r3, #24]
   20c00:	bf04      	itt	eq
   20c02:	6960      	ldreq	r0, [r4, #20]
   20c04:	61d8      	streq	r0, [r3, #28]
   20c06:	4634      	mov	r4, r6
   20c08:	6808      	ldr	r0, [r1, #0]
   20c0a:	4666      	mov	r6, ip
   20c0c:	e75e      	b.n	20acc <_realloc_r+0x110>
   20c0e:	4611      	mov	r1, r2
   20c10:	b003      	add	sp, #12
   20c12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20c16:	f7ff b9d9 	b.w	1ffcc <_malloc_r>
   20c1a:	230c      	movs	r3, #12
   20c1c:	f04f 0800 	mov.w	r8, #0
   20c20:	603b      	str	r3, [r7, #0]
   20c22:	e76c      	b.n	20afe <_realloc_r+0x142>
   20c24:	f8dc 6004 	ldr.w	r6, [ip, #4]
   20c28:	f105 0310 	add.w	r3, r5, #16
   20c2c:	f026 0e03 	bic.w	lr, r6, #3
   20c30:	eb0e 000a 	add.w	r0, lr, sl
   20c34:	4298      	cmp	r0, r3
   20c36:	bfb8      	it	lt
   20c38:	4660      	movlt	r0, ip
   20c3a:	f6ff aefa 	blt.w	20a32 <_realloc_r+0x76>
   20c3e:	eb0b 0305 	add.w	r3, fp, r5
   20c42:	1b42      	subs	r2, r0, r5
   20c44:	f042 0201 	orr.w	r2, r2, #1
   20c48:	f8c9 3008 	str.w	r3, [r9, #8]
   20c4c:	605a      	str	r2, [r3, #4]
   20c4e:	4638      	mov	r0, r7
   20c50:	f854 2c04 	ldr.w	r2, [r4, #-4]
   20c54:	46a0      	mov	r8, r4
   20c56:	f002 0301 	and.w	r3, r2, #1
   20c5a:	431d      	orrs	r5, r3
   20c5c:	f844 5c04 	str.w	r5, [r4, #-4]
   20c60:	f7ff fe04 	bl	2086c <__malloc_unlock>
   20c64:	e74b      	b.n	20afe <_realloc_r+0x142>
   20c66:	6823      	ldr	r3, [r4, #0]
   20c68:	2a1b      	cmp	r2, #27
   20c6a:	bf98      	it	ls
   20c6c:	f104 0208 	addls.w	r2, r4, #8
   20c70:	6003      	str	r3, [r0, #0]
   20c72:	6863      	ldr	r3, [r4, #4]
   20c74:	6043      	str	r3, [r0, #4]
   20c76:	bf98      	it	ls
   20c78:	f100 0308 	addls.w	r3, r0, #8
   20c7c:	d982      	bls.n	20b84 <_realloc_r+0x1c8>
   20c7e:	68a3      	ldr	r3, [r4, #8]
   20c80:	2a24      	cmp	r2, #36	; 0x24
   20c82:	bf14      	ite	ne
   20c84:	f104 0210 	addne.w	r2, r4, #16
   20c88:	f104 0218 	addeq.w	r2, r4, #24
   20c8c:	6083      	str	r3, [r0, #8]
   20c8e:	68e3      	ldr	r3, [r4, #12]
   20c90:	60c3      	str	r3, [r0, #12]
   20c92:	bf11      	iteee	ne
   20c94:	f100 0310 	addne.w	r3, r0, #16
   20c98:	6921      	ldreq	r1, [r4, #16]
   20c9a:	f100 0318 	addeq.w	r3, r0, #24
   20c9e:	6101      	streq	r1, [r0, #16]
   20ca0:	bf04      	itt	eq
   20ca2:	6961      	ldreq	r1, [r4, #20]
   20ca4:	6141      	streq	r1, [r0, #20]
   20ca6:	e76d      	b.n	20b84 <_realloc_r+0x1c8>
   20ca8:	4621      	mov	r1, r4
   20caa:	4630      	mov	r0, r6
   20cac:	e88d 1008 	stmia.w	sp, {r3, ip}
   20cb0:	f7ff fd36 	bl	20720 <memmove>
   20cb4:	9b00      	ldr	r3, [sp, #0]
   20cb6:	4634      	mov	r4, r6
   20cb8:	f8dd c004 	ldr.w	ip, [sp, #4]
   20cbc:	469b      	mov	fp, r3
   20cbe:	4666      	mov	r6, ip
   20cc0:	6859      	ldr	r1, [r3, #4]
   20cc2:	e70a      	b.n	20ada <_realloc_r+0x11e>
   20cc4:	4621      	mov	r1, r4
   20cc6:	f7ff fd2b 	bl	20720 <memmove>
   20cca:	e761      	b.n	20b90 <_realloc_r+0x1d4>
   20ccc:	f105 0110 	add.w	r1, r5, #16
   20cd0:	eb0e 060c 	add.w	r6, lr, ip
   20cd4:	428e      	cmp	r6, r1
   20cd6:	f6ff af65 	blt.w	20ba4 <_realloc_r+0x1e8>
   20cda:	4698      	mov	r8, r3
   20cdc:	68d9      	ldr	r1, [r3, #12]
   20cde:	f1aa 0204 	sub.w	r2, sl, #4
   20ce2:	f858 0f08 	ldr.w	r0, [r8, #8]!
   20ce6:	2a24      	cmp	r2, #36	; 0x24
   20ce8:	60c1      	str	r1, [r0, #12]
   20cea:	6088      	str	r0, [r1, #8]
   20cec:	d84a      	bhi.n	20d84 <_realloc_r+0x3c8>
   20cee:	2a13      	cmp	r2, #19
   20cf0:	bf9c      	itt	ls
   20cf2:	4642      	movls	r2, r8
   20cf4:	4621      	movls	r1, r4
   20cf6:	d91f      	bls.n	20d38 <_realloc_r+0x37c>
   20cf8:	6821      	ldr	r1, [r4, #0]
   20cfa:	2a1b      	cmp	r2, #27
   20cfc:	bf98      	it	ls
   20cfe:	f103 0210 	addls.w	r2, r3, #16
   20d02:	6099      	str	r1, [r3, #8]
   20d04:	6861      	ldr	r1, [r4, #4]
   20d06:	60d9      	str	r1, [r3, #12]
   20d08:	bf98      	it	ls
   20d0a:	f104 0108 	addls.w	r1, r4, #8
   20d0e:	d913      	bls.n	20d38 <_realloc_r+0x37c>
   20d10:	68a1      	ldr	r1, [r4, #8]
   20d12:	2a24      	cmp	r2, #36	; 0x24
   20d14:	bf14      	ite	ne
   20d16:	f103 0218 	addne.w	r2, r3, #24
   20d1a:	f103 0220 	addeq.w	r2, r3, #32
   20d1e:	6119      	str	r1, [r3, #16]
   20d20:	68e1      	ldr	r1, [r4, #12]
   20d22:	6159      	str	r1, [r3, #20]
   20d24:	bf11      	iteee	ne
   20d26:	f104 0110 	addne.w	r1, r4, #16
   20d2a:	6920      	ldreq	r0, [r4, #16]
   20d2c:	f104 0118 	addeq.w	r1, r4, #24
   20d30:	6198      	streq	r0, [r3, #24]
   20d32:	bf04      	itt	eq
   20d34:	6960      	ldreq	r0, [r4, #20]
   20d36:	61d8      	streq	r0, [r3, #28]
   20d38:	6808      	ldr	r0, [r1, #0]
   20d3a:	6010      	str	r0, [r2, #0]
   20d3c:	6848      	ldr	r0, [r1, #4]
   20d3e:	6050      	str	r0, [r2, #4]
   20d40:	6889      	ldr	r1, [r1, #8]
   20d42:	6091      	str	r1, [r2, #8]
   20d44:	195a      	adds	r2, r3, r5
   20d46:	1b71      	subs	r1, r6, r5
   20d48:	f041 0101 	orr.w	r1, r1, #1
   20d4c:	f8c9 2008 	str.w	r2, [r9, #8]
   20d50:	6051      	str	r1, [r2, #4]
   20d52:	4638      	mov	r0, r7
   20d54:	6859      	ldr	r1, [r3, #4]
   20d56:	f001 0201 	and.w	r2, r1, #1
   20d5a:	4315      	orrs	r5, r2
   20d5c:	605d      	str	r5, [r3, #4]
   20d5e:	f7ff fd85 	bl	2086c <__malloc_unlock>
   20d62:	e6cc      	b.n	20afe <_realloc_r+0x142>
   20d64:	f850 6c04 	ldr.w	r6, [r0, #-4]
   20d68:	f026 0603 	bic.w	r6, r6, #3
   20d6c:	4456      	add	r6, sl
   20d6e:	e6b4      	b.n	20ada <_realloc_r+0x11e>
   20d70:	4621      	mov	r1, r4
   20d72:	4670      	mov	r0, lr
   20d74:	9300      	str	r3, [sp, #0]
   20d76:	4674      	mov	r4, lr
   20d78:	f7ff fcd2 	bl	20720 <memmove>
   20d7c:	9b00      	ldr	r3, [sp, #0]
   20d7e:	469b      	mov	fp, r3
   20d80:	6859      	ldr	r1, [r3, #4]
   20d82:	e6aa      	b.n	20ada <_realloc_r+0x11e>
   20d84:	4640      	mov	r0, r8
   20d86:	4621      	mov	r1, r4
   20d88:	9300      	str	r3, [sp, #0]
   20d8a:	f7ff fcc9 	bl	20720 <memmove>
   20d8e:	9b00      	ldr	r3, [sp, #0]
   20d90:	e7d8      	b.n	20d44 <_realloc_r+0x388>
   20d92:	bf00      	nop

00020d94 <_sbrk_r>:
   20d94:	b538      	push	{r3, r4, r5, lr}
   20d96:	f642 54c8 	movw	r4, #11720	; 0x2dc8
   20d9a:	f2c1 0400 	movt	r4, #4096	; 0x1000
   20d9e:	4605      	mov	r5, r0
   20da0:	4608      	mov	r0, r1
   20da2:	2300      	movs	r3, #0
   20da4:	6023      	str	r3, [r4, #0]
   20da6:	f7e5 fa11 	bl	61cc <_sbrk>
   20daa:	1c43      	adds	r3, r0, #1
   20dac:	d000      	beq.n	20db0 <_sbrk_r+0x1c>
   20dae:	bd38      	pop	{r3, r4, r5, pc}
   20db0:	6823      	ldr	r3, [r4, #0]
   20db2:	2b00      	cmp	r3, #0
   20db4:	d0fb      	beq.n	20dae <_sbrk_r+0x1a>
   20db6:	602b      	str	r3, [r5, #0]
   20db8:	bd38      	pop	{r3, r4, r5, pc}
   20dba:	bf00      	nop

00020dbc <_init_signal_r>:
   20dbc:	b538      	push	{r3, r4, r5, lr}
   20dbe:	4604      	mov	r4, r0
   20dc0:	6c45      	ldr	r5, [r0, #68]	; 0x44
   20dc2:	b10d      	cbz	r5, 20dc8 <_init_signal_r+0xc>
   20dc4:	2000      	movs	r0, #0
   20dc6:	bd38      	pop	{r3, r4, r5, pc}
   20dc8:	2180      	movs	r1, #128	; 0x80
   20dca:	f7ff f8ff 	bl	1ffcc <_malloc_r>
   20dce:	6460      	str	r0, [r4, #68]	; 0x44
   20dd0:	b140      	cbz	r0, 20de4 <_init_signal_r+0x28>
   20dd2:	462b      	mov	r3, r5
   20dd4:	e000      	b.n	20dd8 <_init_signal_r+0x1c>
   20dd6:	6c60      	ldr	r0, [r4, #68]	; 0x44
   20dd8:	5143      	str	r3, [r0, r5]
   20dda:	3504      	adds	r5, #4
   20ddc:	2d80      	cmp	r5, #128	; 0x80
   20dde:	d1fa      	bne.n	20dd6 <_init_signal_r+0x1a>
   20de0:	2000      	movs	r0, #0
   20de2:	bd38      	pop	{r3, r4, r5, pc}
   20de4:	f04f 30ff 	mov.w	r0, #4294967295
   20de8:	bd38      	pop	{r3, r4, r5, pc}
   20dea:	bf00      	nop

00020dec <_signal_r>:
   20dec:	291f      	cmp	r1, #31
   20dee:	b510      	push	{r4, lr}
   20df0:	4604      	mov	r4, r0
   20df2:	b082      	sub	sp, #8
   20df4:	d807      	bhi.n	20e06 <_signal_r+0x1a>
   20df6:	6c43      	ldr	r3, [r0, #68]	; 0x44
   20df8:	b153      	cbz	r3, 20e10 <_signal_r+0x24>
   20dfa:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   20dfe:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
   20e02:	b002      	add	sp, #8
   20e04:	bd10      	pop	{r4, pc}
   20e06:	2316      	movs	r3, #22
   20e08:	f04f 30ff 	mov.w	r0, #4294967295
   20e0c:	6023      	str	r3, [r4, #0]
   20e0e:	e7f8      	b.n	20e02 <_signal_r+0x16>
   20e10:	9101      	str	r1, [sp, #4]
   20e12:	9200      	str	r2, [sp, #0]
   20e14:	f7ff ffd2 	bl	20dbc <_init_signal_r>
   20e18:	9901      	ldr	r1, [sp, #4]
   20e1a:	9a00      	ldr	r2, [sp, #0]
   20e1c:	b908      	cbnz	r0, 20e22 <_signal_r+0x36>
   20e1e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   20e20:	e7eb      	b.n	20dfa <_signal_r+0xe>
   20e22:	f04f 30ff 	mov.w	r0, #4294967295
   20e26:	e7ec      	b.n	20e02 <_signal_r+0x16>

00020e28 <_raise_r>:
   20e28:	291f      	cmp	r1, #31
   20e2a:	b538      	push	{r3, r4, r5, lr}
   20e2c:	460c      	mov	r4, r1
   20e2e:	4605      	mov	r5, r0
   20e30:	d81f      	bhi.n	20e72 <_raise_r+0x4a>
   20e32:	6c42      	ldr	r2, [r0, #68]	; 0x44
   20e34:	b19a      	cbz	r2, 20e5e <_raise_r+0x36>
   20e36:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   20e3a:	b183      	cbz	r3, 20e5e <_raise_r+0x36>
   20e3c:	2b01      	cmp	r3, #1
   20e3e:	d00c      	beq.n	20e5a <_raise_r+0x32>
   20e40:	1c58      	adds	r0, r3, #1
   20e42:	d006      	beq.n	20e52 <_raise_r+0x2a>
   20e44:	2500      	movs	r5, #0
   20e46:	4608      	mov	r0, r1
   20e48:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   20e4c:	4798      	blx	r3
   20e4e:	4628      	mov	r0, r5
   20e50:	bd38      	pop	{r3, r4, r5, pc}
   20e52:	2316      	movs	r3, #22
   20e54:	2001      	movs	r0, #1
   20e56:	602b      	str	r3, [r5, #0]
   20e58:	bd38      	pop	{r3, r4, r5, pc}
   20e5a:	2000      	movs	r0, #0
   20e5c:	bd38      	pop	{r3, r4, r5, pc}
   20e5e:	4628      	mov	r0, r5
   20e60:	f000 f868 	bl	20f34 <_getpid_r>
   20e64:	4622      	mov	r2, r4
   20e66:	4601      	mov	r1, r0
   20e68:	4628      	mov	r0, r5
   20e6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   20e6e:	f000 b84d 	b.w	20f0c <_kill_r>
   20e72:	2316      	movs	r3, #22
   20e74:	f04f 30ff 	mov.w	r0, #4294967295
   20e78:	602b      	str	r3, [r5, #0]
   20e7a:	bd38      	pop	{r3, r4, r5, pc}

00020e7c <__sigtramp_r>:
   20e7c:	291f      	cmp	r1, #31
   20e7e:	b510      	push	{r4, lr}
   20e80:	4604      	mov	r4, r0
   20e82:	b082      	sub	sp, #8
   20e84:	d81c      	bhi.n	20ec0 <__sigtramp_r+0x44>
   20e86:	6c43      	ldr	r3, [r0, #68]	; 0x44
   20e88:	b19b      	cbz	r3, 20eb2 <__sigtramp_r+0x36>
   20e8a:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   20e8e:	2001      	movs	r0, #1
   20e90:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   20e94:	b14a      	cbz	r2, 20eaa <__sigtramp_r+0x2e>
   20e96:	1c50      	adds	r0, r2, #1
   20e98:	d009      	beq.n	20eae <__sigtramp_r+0x32>
   20e9a:	2003      	movs	r0, #3
   20e9c:	2a01      	cmp	r2, #1
   20e9e:	d004      	beq.n	20eaa <__sigtramp_r+0x2e>
   20ea0:	2400      	movs	r4, #0
   20ea2:	4608      	mov	r0, r1
   20ea4:	601c      	str	r4, [r3, #0]
   20ea6:	4790      	blx	r2
   20ea8:	4620      	mov	r0, r4
   20eaa:	b002      	add	sp, #8
   20eac:	bd10      	pop	{r4, pc}
   20eae:	2002      	movs	r0, #2
   20eb0:	e7fb      	b.n	20eaa <__sigtramp_r+0x2e>
   20eb2:	9101      	str	r1, [sp, #4]
   20eb4:	f7ff ff82 	bl	20dbc <_init_signal_r>
   20eb8:	9901      	ldr	r1, [sp, #4]
   20eba:	b908      	cbnz	r0, 20ec0 <__sigtramp_r+0x44>
   20ebc:	6c63      	ldr	r3, [r4, #68]	; 0x44
   20ebe:	e7e4      	b.n	20e8a <__sigtramp_r+0xe>
   20ec0:	f04f 30ff 	mov.w	r0, #4294967295
   20ec4:	e7f1      	b.n	20eaa <__sigtramp_r+0x2e>
   20ec6:	bf00      	nop

00020ec8 <raise>:
   20ec8:	f240 0328 	movw	r3, #40	; 0x28
   20ecc:	4601      	mov	r1, r0
   20ece:	f2c1 0300 	movt	r3, #4096	; 0x1000
   20ed2:	6818      	ldr	r0, [r3, #0]
   20ed4:	f7ff bfa8 	b.w	20e28 <_raise_r>

00020ed8 <signal>:
   20ed8:	f240 0328 	movw	r3, #40	; 0x28
   20edc:	460a      	mov	r2, r1
   20ede:	f2c1 0300 	movt	r3, #4096	; 0x1000
   20ee2:	4601      	mov	r1, r0
   20ee4:	6818      	ldr	r0, [r3, #0]
   20ee6:	f7ff bf81 	b.w	20dec <_signal_r>
   20eea:	bf00      	nop

00020eec <_init_signal>:
   20eec:	f240 0328 	movw	r3, #40	; 0x28
   20ef0:	f2c1 0300 	movt	r3, #4096	; 0x1000
   20ef4:	6818      	ldr	r0, [r3, #0]
   20ef6:	f7ff bf61 	b.w	20dbc <_init_signal_r>
   20efa:	bf00      	nop

00020efc <__sigtramp>:
   20efc:	f240 0328 	movw	r3, #40	; 0x28
   20f00:	4601      	mov	r1, r0
   20f02:	f2c1 0300 	movt	r3, #4096	; 0x1000
   20f06:	6818      	ldr	r0, [r3, #0]
   20f08:	f7ff bfb8 	b.w	20e7c <__sigtramp_r>

00020f0c <_kill_r>:
   20f0c:	b538      	push	{r3, r4, r5, lr}
   20f0e:	f642 54c8 	movw	r4, #11720	; 0x2dc8
   20f12:	f2c1 0400 	movt	r4, #4096	; 0x1000
   20f16:	4605      	mov	r5, r0
   20f18:	4608      	mov	r0, r1
   20f1a:	4611      	mov	r1, r2
   20f1c:	2300      	movs	r3, #0
   20f1e:	6023      	str	r3, [r4, #0]
   20f20:	f7e5 f938 	bl	6194 <_kill>
   20f24:	1c43      	adds	r3, r0, #1
   20f26:	d000      	beq.n	20f2a <_kill_r+0x1e>
   20f28:	bd38      	pop	{r3, r4, r5, pc}
   20f2a:	6823      	ldr	r3, [r4, #0]
   20f2c:	2b00      	cmp	r3, #0
   20f2e:	d0fb      	beq.n	20f28 <_kill_r+0x1c>
   20f30:	602b      	str	r3, [r5, #0]
   20f32:	bd38      	pop	{r3, r4, r5, pc}

00020f34 <_getpid_r>:
   20f34:	f7e5 b942 	b.w	61bc <_getpid>

00020f38 <_sprintf_r>:
   20f38:	b40c      	push	{r2, r3}
   20f3a:	f44f 7302 	mov.w	r3, #520	; 0x208
   20f3e:	b570      	push	{r4, r5, r6, lr}
   20f40:	b09c      	sub	sp, #112	; 0x70
   20f42:	ac20      	add	r4, sp, #128	; 0x80
   20f44:	460e      	mov	r6, r1
   20f46:	f8ad 3010 	strh.w	r3, [sp, #16]
   20f4a:	a901      	add	r1, sp, #4
   20f4c:	f854 2b04 	ldr.w	r2, [r4], #4
   20f50:	f04f 33ff 	mov.w	r3, #4294967295
   20f54:	f8ad 3012 	strh.w	r3, [sp, #18]
   20f58:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   20f5c:	4623      	mov	r3, r4
   20f5e:	9601      	str	r6, [sp, #4]
   20f60:	9605      	str	r6, [sp, #20]
   20f62:	9503      	str	r5, [sp, #12]
   20f64:	9506      	str	r5, [sp, #24]
   20f66:	941b      	str	r4, [sp, #108]	; 0x6c
   20f68:	f000 faea 	bl	21540 <_svfprintf_r>
   20f6c:	9b01      	ldr	r3, [sp, #4]
   20f6e:	2200      	movs	r2, #0
   20f70:	701a      	strb	r2, [r3, #0]
   20f72:	b01c      	add	sp, #112	; 0x70
   20f74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   20f78:	b002      	add	sp, #8
   20f7a:	4770      	bx	lr

00020f7c <sprintf>:
   20f7c:	b40e      	push	{r1, r2, r3}
   20f7e:	f240 0328 	movw	r3, #40	; 0x28
   20f82:	b5f0      	push	{r4, r5, r6, r7, lr}
   20f84:	b09c      	sub	sp, #112	; 0x70
   20f86:	ac21      	add	r4, sp, #132	; 0x84
   20f88:	f2c1 0300 	movt	r3, #4096	; 0x1000
   20f8c:	4606      	mov	r6, r0
   20f8e:	a901      	add	r1, sp, #4
   20f90:	f854 2b04 	ldr.w	r2, [r4], #4
   20f94:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   20f98:	6818      	ldr	r0, [r3, #0]
   20f9a:	f44f 7702 	mov.w	r7, #520	; 0x208
   20f9e:	4623      	mov	r3, r4
   20fa0:	9601      	str	r6, [sp, #4]
   20fa2:	9605      	str	r6, [sp, #20]
   20fa4:	f04f 36ff 	mov.w	r6, #4294967295
   20fa8:	f8ad 7010 	strh.w	r7, [sp, #16]
   20fac:	f8ad 6012 	strh.w	r6, [sp, #18]
   20fb0:	9503      	str	r5, [sp, #12]
   20fb2:	9506      	str	r5, [sp, #24]
   20fb4:	941b      	str	r4, [sp, #108]	; 0x6c
   20fb6:	f000 fac3 	bl	21540 <_svfprintf_r>
   20fba:	9b01      	ldr	r3, [sp, #4]
   20fbc:	2200      	movs	r2, #0
   20fbe:	701a      	strb	r2, [r3, #0]
   20fc0:	b01c      	add	sp, #112	; 0x70
   20fc2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   20fc6:	b003      	add	sp, #12
   20fc8:	4770      	bx	lr
   20fca:	bf00      	nop

00020fcc <strcasecmp>:
   20fcc:	f240 532c 	movw	r3, #1324	; 0x52c
   20fd0:	f2c1 0300 	movt	r3, #4096	; 0x1000
   20fd4:	b470      	push	{r4, r5, r6}
   20fd6:	681d      	ldr	r5, [r3, #0]
   20fd8:	f810 3b01 	ldrb.w	r3, [r0], #1
   20fdc:	18ec      	adds	r4, r5, r3
   20fde:	461a      	mov	r2, r3
   20fe0:	7864      	ldrb	r4, [r4, #1]
   20fe2:	f004 0403 	and.w	r4, r4, #3
   20fe6:	2c01      	cmp	r4, #1
   20fe8:	f811 4b01 	ldrb.w	r4, [r1], #1
   20fec:	bf08      	it	eq
   20fee:	f103 0220 	addeq.w	r2, r3, #32
   20ff2:	192e      	adds	r6, r5, r4
   20ff4:	4623      	mov	r3, r4
   20ff6:	7876      	ldrb	r6, [r6, #1]
   20ff8:	f006 0603 	and.w	r6, r6, #3
   20ffc:	2e01      	cmp	r6, #1
   20ffe:	bf08      	it	eq
   21000:	f104 0320 	addeq.w	r3, r4, #32
   21004:	1ad2      	subs	r2, r2, r3
   21006:	d101      	bne.n	2100c <strcasecmp+0x40>
   21008:	2b00      	cmp	r3, #0
   2100a:	d1e5      	bne.n	20fd8 <strcasecmp+0xc>
   2100c:	4610      	mov	r0, r2
   2100e:	bc70      	pop	{r4, r5, r6}
   21010:	4770      	bx	lr
   21012:	bf00      	nop

00021014 <strchr>:
   21014:	b2c9      	uxtb	r1, r1
   21016:	b4f0      	push	{r4, r5, r6, r7}
   21018:	2900      	cmp	r1, #0
   2101a:	d046      	beq.n	210aa <strchr+0x96>
   2101c:	0782      	lsls	r2, r0, #30
   2101e:	d010      	beq.n	21042 <strchr+0x2e>
   21020:	7803      	ldrb	r3, [r0, #0]
   21022:	2b00      	cmp	r3, #0
   21024:	d06c      	beq.n	21100 <strchr+0xec>
   21026:	4299      	cmp	r1, r3
   21028:	bf18      	it	ne
   2102a:	4602      	movne	r2, r0
   2102c:	d106      	bne.n	2103c <strchr+0x28>
   2102e:	e03a      	b.n	210a6 <strchr+0x92>
   21030:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   21034:	2b00      	cmp	r3, #0
   21036:	d063      	beq.n	21100 <strchr+0xec>
   21038:	4299      	cmp	r1, r3
   2103a:	d034      	beq.n	210a6 <strchr+0x92>
   2103c:	3001      	adds	r0, #1
   2103e:	0783      	lsls	r3, r0, #30
   21040:	d1f6      	bne.n	21030 <strchr+0x1c>
   21042:	6803      	ldr	r3, [r0, #0]
   21044:	ea41 2701 	orr.w	r7, r1, r1, lsl #8
   21048:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   2104c:	ea47 4707 	orr.w	r7, r7, r7, lsl #16
   21050:	ea22 0203 	bic.w	r2, r2, r3
   21054:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   21058:	d11c      	bne.n	21094 <strchr+0x80>
   2105a:	407b      	eors	r3, r7
   2105c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   21060:	ea22 0303 	bic.w	r3, r2, r3
   21064:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   21068:	d114      	bne.n	21094 <strchr+0x80>
   2106a:	4604      	mov	r4, r0
   2106c:	e002      	b.n	21074 <strchr+0x60>
   2106e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   21072:	d10f      	bne.n	21094 <strchr+0x80>
   21074:	f854 3f04 	ldr.w	r3, [r4, #4]!
   21078:	3004      	adds	r0, #4
   2107a:	f1a3 3601 	sub.w	r6, r3, #16843009	; 0x1010101
   2107e:	ea87 0203 	eor.w	r2, r7, r3
   21082:	ea26 0303 	bic.w	r3, r6, r3
   21086:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   2108a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   2108e:	ea25 0202 	bic.w	r2, r5, r2
   21092:	d0ec      	beq.n	2106e <strchr+0x5a>
   21094:	7803      	ldrb	r3, [r0, #0]
   21096:	b923      	cbnz	r3, 210a2 <strchr+0x8e>
   21098:	e032      	b.n	21100 <strchr+0xec>
   2109a:	7843      	ldrb	r3, [r0, #1]
   2109c:	3001      	adds	r0, #1
   2109e:	2b00      	cmp	r3, #0
   210a0:	d02e      	beq.n	21100 <strchr+0xec>
   210a2:	4299      	cmp	r1, r3
   210a4:	d1f9      	bne.n	2109a <strchr+0x86>
   210a6:	bcf0      	pop	{r4, r5, r6, r7}
   210a8:	4770      	bx	lr
   210aa:	0783      	lsls	r3, r0, #30
   210ac:	d00a      	beq.n	210c4 <strchr+0xb0>
   210ae:	7803      	ldrb	r3, [r0, #0]
   210b0:	4602      	mov	r2, r0
   210b2:	b923      	cbnz	r3, 210be <strchr+0xaa>
   210b4:	e7f7      	b.n	210a6 <strchr+0x92>
   210b6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   210ba:	2b00      	cmp	r3, #0
   210bc:	d0f3      	beq.n	210a6 <strchr+0x92>
   210be:	3001      	adds	r0, #1
   210c0:	0781      	lsls	r1, r0, #30
   210c2:	d1f8      	bne.n	210b6 <strchr+0xa2>
   210c4:	6803      	ldr	r3, [r0, #0]
   210c6:	4602      	mov	r2, r0
   210c8:	f1a3 3101 	sub.w	r1, r3, #16843009	; 0x1010101
   210cc:	ea21 0303 	bic.w	r3, r1, r3
   210d0:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   210d4:	d10a      	bne.n	210ec <strchr+0xd8>
   210d6:	4601      	mov	r1, r0
   210d8:	f851 3f04 	ldr.w	r3, [r1, #4]!
   210dc:	3204      	adds	r2, #4
   210de:	f1a3 3001 	sub.w	r0, r3, #16843009	; 0x1010101
   210e2:	ea20 0303 	bic.w	r3, r0, r3
   210e6:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   210ea:	d0f5      	beq.n	210d8 <strchr+0xc4>
   210ec:	7813      	ldrb	r3, [r2, #0]
   210ee:	4610      	mov	r0, r2
   210f0:	2b00      	cmp	r3, #0
   210f2:	d0d8      	beq.n	210a6 <strchr+0x92>
   210f4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   210f8:	3001      	adds	r0, #1
   210fa:	2b00      	cmp	r3, #0
   210fc:	d1fa      	bne.n	210f4 <strchr+0xe0>
   210fe:	e7d2      	b.n	210a6 <strchr+0x92>
   21100:	4618      	mov	r0, r3
   21102:	e7d0      	b.n	210a6 <strchr+0x92>

00021104 <strcmp>:
   21104:	ea80 0201 	eor.w	r2, r0, r1
   21108:	f012 0f03 	tst.w	r2, #3
   2110c:	f040 803a 	bne.w	21184 <strcmp_unaligned>
   21110:	f010 0203 	ands.w	r2, r0, #3
   21114:	f020 0003 	bic.w	r0, r0, #3
   21118:	f021 0103 	bic.w	r1, r1, #3
   2111c:	f850 cb04 	ldr.w	ip, [r0], #4
   21120:	bf08      	it	eq
   21122:	f851 3b04 	ldreq.w	r3, [r1], #4
   21126:	d00d      	beq.n	21144 <strcmp+0x40>
   21128:	f082 0203 	eor.w	r2, r2, #3
   2112c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   21130:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
   21134:	fa23 f202 	lsr.w	r2, r3, r2
   21138:	f851 3b04 	ldr.w	r3, [r1], #4
   2113c:	ea4c 0c02 	orr.w	ip, ip, r2
   21140:	ea43 0302 	orr.w	r3, r3, r2
   21144:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
   21148:	459c      	cmp	ip, r3
   2114a:	bf01      	itttt	eq
   2114c:	ea22 020c 	biceq.w	r2, r2, ip
   21150:	f012 3f80 	tsteq.w	r2, #2155905152	; 0x80808080
   21154:	f850 cb04 	ldreq.w	ip, [r0], #4
   21158:	f851 3b04 	ldreq.w	r3, [r1], #4
   2115c:	d0f2      	beq.n	21144 <strcmp+0x40>
   2115e:	ea4f 600c 	mov.w	r0, ip, lsl #24
   21162:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
   21166:	2801      	cmp	r0, #1
   21168:	bf28      	it	cs
   2116a:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
   2116e:	bf08      	it	eq
   21170:	0a1b      	lsreq	r3, r3, #8
   21172:	d0f4      	beq.n	2115e <strcmp+0x5a>
   21174:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   21178:	ea4f 6010 	mov.w	r0, r0, lsr #24
   2117c:	eba0 0003 	sub.w	r0, r0, r3
   21180:	4770      	bx	lr
   21182:	bf00      	nop

00021184 <strcmp_unaligned>:
   21184:	f010 0f03 	tst.w	r0, #3
   21188:	d00a      	beq.n	211a0 <strcmp_unaligned+0x1c>
   2118a:	f810 2b01 	ldrb.w	r2, [r0], #1
   2118e:	f811 3b01 	ldrb.w	r3, [r1], #1
   21192:	2a01      	cmp	r2, #1
   21194:	bf28      	it	cs
   21196:	429a      	cmpcs	r2, r3
   21198:	d0f4      	beq.n	21184 <strcmp_unaligned>
   2119a:	eba2 0003 	sub.w	r0, r2, r3
   2119e:	4770      	bx	lr
   211a0:	f84d 5d04 	str.w	r5, [sp, #-4]!
   211a4:	f84d 4d04 	str.w	r4, [sp, #-4]!
   211a8:	f04f 0201 	mov.w	r2, #1
   211ac:	ea42 2202 	orr.w	r2, r2, r2, lsl #8
   211b0:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
   211b4:	f001 0c03 	and.w	ip, r1, #3
   211b8:	f021 0103 	bic.w	r1, r1, #3
   211bc:	f850 4b04 	ldr.w	r4, [r0], #4
   211c0:	f851 5b04 	ldr.w	r5, [r1], #4
   211c4:	f1bc 0f02 	cmp.w	ip, #2
   211c8:	d026      	beq.n	21218 <strcmp_unaligned+0x94>
   211ca:	d84b      	bhi.n	21264 <strcmp_unaligned+0xe0>
   211cc:	f024 4c7f 	bic.w	ip, r4, #4278190080	; 0xff000000
   211d0:	ebbc 2f15 	cmp.w	ip, r5, lsr #8
   211d4:	eba4 0302 	sub.w	r3, r4, r2
   211d8:	ea23 0304 	bic.w	r3, r3, r4
   211dc:	d10d      	bne.n	211fa <strcmp_unaligned+0x76>
   211de:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
   211e2:	bf08      	it	eq
   211e4:	f851 5b04 	ldreq.w	r5, [r1], #4
   211e8:	d10a      	bne.n	21200 <strcmp_unaligned+0x7c>
   211ea:	ea8c 0c04 	eor.w	ip, ip, r4
   211ee:	ebbc 6f05 	cmp.w	ip, r5, lsl #24
   211f2:	d10c      	bne.n	2120e <strcmp_unaligned+0x8a>
   211f4:	f850 4b04 	ldr.w	r4, [r0], #4
   211f8:	e7e8      	b.n	211cc <strcmp_unaligned+0x48>
   211fa:	ea4f 2515 	mov.w	r5, r5, lsr #8
   211fe:	e05c      	b.n	212ba <strcmp_unaligned+0x136>
   21200:	f033 437f 	bics.w	r3, r3, #4278190080	; 0xff000000
   21204:	d152      	bne.n	212ac <strcmp_unaligned+0x128>
   21206:	780d      	ldrb	r5, [r1, #0]
   21208:	ea4f 6c14 	mov.w	ip, r4, lsr #24
   2120c:	e055      	b.n	212ba <strcmp_unaligned+0x136>
   2120e:	ea4f 6c14 	mov.w	ip, r4, lsr #24
   21212:	f005 05ff 	and.w	r5, r5, #255	; 0xff
   21216:	e050      	b.n	212ba <strcmp_unaligned+0x136>
   21218:	ea4f 4c04 	mov.w	ip, r4, lsl #16
   2121c:	eba4 0302 	sub.w	r3, r4, r2
   21220:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   21224:	ea23 0304 	bic.w	r3, r3, r4
   21228:	ebbc 4f15 	cmp.w	ip, r5, lsr #16
   2122c:	d117      	bne.n	2125e <strcmp_unaligned+0xda>
   2122e:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
   21232:	bf08      	it	eq
   21234:	f851 5b04 	ldreq.w	r5, [r1], #4
   21238:	d107      	bne.n	2124a <strcmp_unaligned+0xc6>
   2123a:	ea8c 0c04 	eor.w	ip, ip, r4
   2123e:	ebbc 4f05 	cmp.w	ip, r5, lsl #16
   21242:	d108      	bne.n	21256 <strcmp_unaligned+0xd2>
   21244:	f850 4b04 	ldr.w	r4, [r0], #4
   21248:	e7e6      	b.n	21218 <strcmp_unaligned+0x94>
   2124a:	041b      	lsls	r3, r3, #16
   2124c:	d12e      	bne.n	212ac <strcmp_unaligned+0x128>
   2124e:	880d      	ldrh	r5, [r1, #0]
   21250:	ea4f 4c14 	mov.w	ip, r4, lsr #16
   21254:	e031      	b.n	212ba <strcmp_unaligned+0x136>
   21256:	ea4f 4505 	mov.w	r5, r5, lsl #16
   2125a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
   2125e:	ea4f 4515 	mov.w	r5, r5, lsr #16
   21262:	e02a      	b.n	212ba <strcmp_unaligned+0x136>
   21264:	f004 0cff 	and.w	ip, r4, #255	; 0xff
   21268:	ebbc 6f15 	cmp.w	ip, r5, lsr #24
   2126c:	eba4 0302 	sub.w	r3, r4, r2
   21270:	ea23 0304 	bic.w	r3, r3, r4
   21274:	d10d      	bne.n	21292 <strcmp_unaligned+0x10e>
   21276:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
   2127a:	bf08      	it	eq
   2127c:	f851 5b04 	ldreq.w	r5, [r1], #4
   21280:	d10a      	bne.n	21298 <strcmp_unaligned+0x114>
   21282:	ea8c 0c04 	eor.w	ip, ip, r4
   21286:	ebbc 2f05 	cmp.w	ip, r5, lsl #8
   2128a:	d10a      	bne.n	212a2 <strcmp_unaligned+0x11e>
   2128c:	f850 4b04 	ldr.w	r4, [r0], #4
   21290:	e7e8      	b.n	21264 <strcmp_unaligned+0xe0>
   21292:	ea4f 6515 	mov.w	r5, r5, lsr #24
   21296:	e010      	b.n	212ba <strcmp_unaligned+0x136>
   21298:	f014 0fff 	tst.w	r4, #255	; 0xff
   2129c:	d006      	beq.n	212ac <strcmp_unaligned+0x128>
   2129e:	f851 5b04 	ldr.w	r5, [r1], #4
   212a2:	ea4f 2c14 	mov.w	ip, r4, lsr #8
   212a6:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
   212aa:	e006      	b.n	212ba <strcmp_unaligned+0x136>
   212ac:	f04f 0000 	mov.w	r0, #0
   212b0:	f85d 4b04 	ldr.w	r4, [sp], #4
   212b4:	f85d 5b04 	ldr.w	r5, [sp], #4
   212b8:	4770      	bx	lr
   212ba:	f00c 02ff 	and.w	r2, ip, #255	; 0xff
   212be:	f005 00ff 	and.w	r0, r5, #255	; 0xff
   212c2:	2801      	cmp	r0, #1
   212c4:	bf28      	it	cs
   212c6:	4290      	cmpcs	r0, r2
   212c8:	bf04      	itt	eq
   212ca:	ea4f 2c1c 	moveq.w	ip, ip, lsr #8
   212ce:	0a2d      	lsreq	r5, r5, #8
   212d0:	d0f3      	beq.n	212ba <strcmp_unaligned+0x136>
   212d2:	eba2 0000 	sub.w	r0, r2, r0
   212d6:	f85d 4b04 	ldr.w	r4, [sp], #4
   212da:	f85d 5b04 	ldr.w	r5, [sp], #4
   212de:	4770      	bx	lr

000212e0 <strcpy>:
   212e0:	ea80 0201 	eor.w	r2, r0, r1
   212e4:	4684      	mov	ip, r0
   212e6:	f012 0f03 	tst.w	r2, #3
   212ea:	d14f      	bne.n	2138c <strcpy+0xac>
   212ec:	f011 0f03 	tst.w	r1, #3
   212f0:	d132      	bne.n	21358 <strcpy+0x78>
   212f2:	f84d 4d04 	str.w	r4, [sp, #-4]!
   212f6:	f011 0f04 	tst.w	r1, #4
   212fa:	f851 3b04 	ldr.w	r3, [r1], #4
   212fe:	d00b      	beq.n	21318 <strcpy+0x38>
   21300:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   21304:	439a      	bics	r2, r3
   21306:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2130a:	bf04      	itt	eq
   2130c:	f84c 3b04 	streq.w	r3, [ip], #4
   21310:	f851 3b04 	ldreq.w	r3, [r1], #4
   21314:	d116      	bne.n	21344 <strcpy+0x64>
   21316:	bf00      	nop
   21318:	f851 4b04 	ldr.w	r4, [r1], #4
   2131c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   21320:	439a      	bics	r2, r3
   21322:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   21326:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   2132a:	d10b      	bne.n	21344 <strcpy+0x64>
   2132c:	f84c 3b04 	str.w	r3, [ip], #4
   21330:	43a2      	bics	r2, r4
   21332:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   21336:	bf04      	itt	eq
   21338:	f851 3b04 	ldreq.w	r3, [r1], #4
   2133c:	f84c 4b04 	streq.w	r4, [ip], #4
   21340:	d0ea      	beq.n	21318 <strcpy+0x38>
   21342:	4623      	mov	r3, r4
   21344:	f80c 3b01 	strb.w	r3, [ip], #1
   21348:	f013 0fff 	tst.w	r3, #255	; 0xff
   2134c:	ea4f 2333 	mov.w	r3, r3, ror #8
   21350:	d1f8      	bne.n	21344 <strcpy+0x64>
   21352:	f85d 4b04 	ldr.w	r4, [sp], #4
   21356:	4770      	bx	lr
   21358:	f011 0f01 	tst.w	r1, #1
   2135c:	d006      	beq.n	2136c <strcpy+0x8c>
   2135e:	f811 2b01 	ldrb.w	r2, [r1], #1
   21362:	f80c 2b01 	strb.w	r2, [ip], #1
   21366:	2a00      	cmp	r2, #0
   21368:	bf08      	it	eq
   2136a:	4770      	bxeq	lr
   2136c:	f011 0f02 	tst.w	r1, #2
   21370:	d0bf      	beq.n	212f2 <strcpy+0x12>
   21372:	f831 2b02 	ldrh.w	r2, [r1], #2
   21376:	f012 0fff 	tst.w	r2, #255	; 0xff
   2137a:	bf16      	itet	ne
   2137c:	f82c 2b02 	strhne.w	r2, [ip], #2
   21380:	f88c 2000 	strbeq.w	r2, [ip]
   21384:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   21388:	d1b3      	bne.n	212f2 <strcpy+0x12>
   2138a:	4770      	bx	lr
   2138c:	f811 2b01 	ldrb.w	r2, [r1], #1
   21390:	f80c 2b01 	strb.w	r2, [ip], #1
   21394:	2a00      	cmp	r2, #0
   21396:	d1f9      	bne.n	2138c <strcpy+0xac>
   21398:	4770      	bx	lr
   2139a:	bf00      	nop

0002139c <strlen>:
   2139c:	f020 0103 	bic.w	r1, r0, #3
   213a0:	f010 0003 	ands.w	r0, r0, #3
   213a4:	f1c0 0000 	rsb	r0, r0, #0
   213a8:	f851 3b04 	ldr.w	r3, [r1], #4
   213ac:	f100 0c04 	add.w	ip, r0, #4
   213b0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   213b4:	f06f 0200 	mvn.w	r2, #0
   213b8:	bf1c      	itt	ne
   213ba:	fa22 f20c 	lsrne.w	r2, r2, ip
   213be:	4313      	orrne	r3, r2
   213c0:	f04f 0c01 	mov.w	ip, #1
   213c4:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   213c8:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   213cc:	eba3 020c 	sub.w	r2, r3, ip
   213d0:	ea22 0203 	bic.w	r2, r2, r3
   213d4:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   213d8:	bf04      	itt	eq
   213da:	f851 3b04 	ldreq.w	r3, [r1], #4
   213de:	3004      	addeq	r0, #4
   213e0:	d0f4      	beq.n	213cc <strlen+0x30>
   213e2:	f013 0fff 	tst.w	r3, #255	; 0xff
   213e6:	bf1f      	itttt	ne
   213e8:	3001      	addne	r0, #1
   213ea:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   213ee:	3001      	addne	r0, #1
   213f0:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   213f4:	bf18      	it	ne
   213f6:	3001      	addne	r0, #1
   213f8:	4770      	bx	lr
   213fa:	bf00      	nop

000213fc <strncmp>:
   213fc:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
   21400:	2a00      	cmp	r2, #0
   21402:	d044      	beq.n	2148e <strncmp+0x92>
   21404:	ea41 0300 	orr.w	r3, r1, r0
   21408:	f013 0303 	ands.w	r3, r3, #3
   2140c:	d12c      	bne.n	21468 <strncmp+0x6c>
   2140e:	2a03      	cmp	r2, #3
   21410:	d92a      	bls.n	21468 <strncmp+0x6c>
   21412:	6804      	ldr	r4, [r0, #0]
   21414:	680d      	ldr	r5, [r1, #0]
   21416:	42ac      	cmp	r4, r5
   21418:	d126      	bne.n	21468 <strncmp+0x6c>
   2141a:	3a04      	subs	r2, #4
   2141c:	d037      	beq.n	2148e <strncmp+0x92>
   2141e:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
   21422:	ea25 0404 	bic.w	r4, r5, r4
   21426:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   2142a:	bf04      	itt	eq
   2142c:	460c      	moveq	r4, r1
   2142e:	4605      	moveq	r5, r0
   21430:	d011      	beq.n	21456 <strncmp+0x5a>
   21432:	e034      	b.n	2149e <strncmp+0xa2>
   21434:	f850 3f04 	ldr.w	r3, [r0, #4]!
   21438:	4635      	mov	r5, r6
   2143a:	f851 cf04 	ldr.w	ip, [r1, #4]!
   2143e:	463c      	mov	r4, r7
   21440:	f1a3 3801 	sub.w	r8, r3, #16843009	; 0x1010101
   21444:	4563      	cmp	r3, ip
   21446:	ea28 0803 	bic.w	r8, r8, r3
   2144a:	d109      	bne.n	21460 <strncmp+0x64>
   2144c:	3a04      	subs	r2, #4
   2144e:	d01e      	beq.n	2148e <strncmp+0x92>
   21450:	f018 3f80 	tst.w	r8, #2155905152	; 0x80808080
   21454:	d119      	bne.n	2148a <strncmp+0x8e>
   21456:	1d2e      	adds	r6, r5, #4
   21458:	1d27      	adds	r7, r4, #4
   2145a:	2a03      	cmp	r2, #3
   2145c:	d8ea      	bhi.n	21434 <strncmp+0x38>
   2145e:	b1d2      	cbz	r2, 21496 <strncmp+0x9a>
   21460:	3a01      	subs	r2, #1
   21462:	4639      	mov	r1, r7
   21464:	4630      	mov	r0, r6
   21466:	e000      	b.n	2146a <strncmp+0x6e>
   21468:	3a01      	subs	r2, #1
   2146a:	7803      	ldrb	r3, [r0, #0]
   2146c:	780c      	ldrb	r4, [r1, #0]
   2146e:	42a3      	cmp	r3, r4
   21470:	d113      	bne.n	2149a <strncmp+0x9e>
   21472:	b162      	cbz	r2, 2148e <strncmp+0x92>
   21474:	b19b      	cbz	r3, 2149e <strncmp+0xa2>
   21476:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2147a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2147e:	42a3      	cmp	r3, r4
   21480:	d10b      	bne.n	2149a <strncmp+0x9e>
   21482:	2a01      	cmp	r2, #1
   21484:	f102 32ff 	add.w	r2, r2, #4294967295
   21488:	d1f4      	bne.n	21474 <strncmp+0x78>
   2148a:	2000      	movs	r0, #0
   2148c:	e000      	b.n	21490 <strncmp+0x94>
   2148e:	4610      	mov	r0, r2
   21490:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
   21494:	4770      	bx	lr
   21496:	792b      	ldrb	r3, [r5, #4]
   21498:	7924      	ldrb	r4, [r4, #4]
   2149a:	1b18      	subs	r0, r3, r4
   2149c:	e7f8      	b.n	21490 <strncmp+0x94>
   2149e:	4618      	mov	r0, r3
   214a0:	e7f6      	b.n	21490 <strncmp+0x94>
   214a2:	bf00      	nop

000214a4 <strncpy>:
   214a4:	ea41 0300 	orr.w	r3, r1, r0
   214a8:	f013 0f03 	tst.w	r3, #3
   214ac:	4603      	mov	r3, r0
   214ae:	b470      	push	{r4, r5, r6}
   214b0:	bf14      	ite	ne
   214b2:	2400      	movne	r4, #0
   214b4:	2401      	moveq	r4, #1
   214b6:	2a03      	cmp	r2, #3
   214b8:	bf94      	ite	ls
   214ba:	2400      	movls	r4, #0
   214bc:	f004 0401 	andhi.w	r4, r4, #1
   214c0:	460d      	mov	r5, r1
   214c2:	b9c4      	cbnz	r4, 214f6 <strncpy+0x52>
   214c4:	b1aa      	cbz	r2, 214f2 <strncpy+0x4e>
   214c6:	780c      	ldrb	r4, [r1, #0]
   214c8:	3a01      	subs	r2, #1
   214ca:	f803 4b01 	strb.w	r4, [r3], #1
   214ce:	b14c      	cbz	r4, 214e4 <strncpy+0x40>
   214d0:	461c      	mov	r4, r3
   214d2:	b172      	cbz	r2, 214f2 <strncpy+0x4e>
   214d4:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   214d8:	3a01      	subs	r2, #1
   214da:	f804 6b01 	strb.w	r6, [r4], #1
   214de:	4623      	mov	r3, r4
   214e0:	2e00      	cmp	r6, #0
   214e2:	d1f6      	bne.n	214d2 <strncpy+0x2e>
   214e4:	b12a      	cbz	r2, 214f2 <strncpy+0x4e>
   214e6:	189a      	adds	r2, r3, r2
   214e8:	2100      	movs	r1, #0
   214ea:	f803 1b01 	strb.w	r1, [r3], #1
   214ee:	4293      	cmp	r3, r2
   214f0:	d1fb      	bne.n	214ea <strncpy+0x46>
   214f2:	bc70      	pop	{r4, r5, r6}
   214f4:	4770      	bx	lr
   214f6:	4629      	mov	r1, r5
   214f8:	f855 4b04 	ldr.w	r4, [r5], #4
   214fc:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
   21500:	ea26 0604 	bic.w	r6, r6, r4
   21504:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   21508:	d1dc      	bne.n	214c4 <strncpy+0x20>
   2150a:	3a04      	subs	r2, #4
   2150c:	f843 4b04 	str.w	r4, [r3], #4
   21510:	2a03      	cmp	r2, #3
   21512:	d8f0      	bhi.n	214f6 <strncpy+0x52>
   21514:	4629      	mov	r1, r5
   21516:	e7d5      	b.n	214c4 <strncpy+0x20>

00021518 <strrchr>:
   21518:	b538      	push	{r3, r4, r5, lr}
   2151a:	4603      	mov	r3, r0
   2151c:	460c      	mov	r4, r1
   2151e:	b159      	cbz	r1, 21538 <strrchr+0x20>
   21520:	2500      	movs	r5, #0
   21522:	e001      	b.n	21528 <strrchr+0x10>
   21524:	1c43      	adds	r3, r0, #1
   21526:	4605      	mov	r5, r0
   21528:	4618      	mov	r0, r3
   2152a:	4621      	mov	r1, r4
   2152c:	f7ff fd72 	bl	21014 <strchr>
   21530:	2800      	cmp	r0, #0
   21532:	d1f7      	bne.n	21524 <strrchr+0xc>
   21534:	4628      	mov	r0, r5
   21536:	bd38      	pop	{r3, r4, r5, pc}
   21538:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2153c:	f7ff bd6a 	b.w	21014 <strchr>

00021540 <_svfprintf_r>:
   21540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21544:	b0c9      	sub	sp, #292	; 0x124
   21546:	468b      	mov	fp, r1
   21548:	4692      	mov	sl, r2
   2154a:	9311      	str	r3, [sp, #68]	; 0x44
   2154c:	9010      	str	r0, [sp, #64]	; 0x40
   2154e:	f002 ff91 	bl	24474 <_localeconv_r>
   21552:	2300      	movs	r3, #0
   21554:	2200      	movs	r2, #0
   21556:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
   2155a:	6800      	ldr	r0, [r0, #0]
   2155c:	901b      	str	r0, [sp, #108]	; 0x6c
   2155e:	f7ff ff1d 	bl	2139c <strlen>
   21562:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   21566:	061b      	lsls	r3, r3, #24
   21568:	901c      	str	r0, [sp, #112]	; 0x70
   2156a:	d504      	bpl.n	21576 <_svfprintf_r+0x36>
   2156c:	f8db 3010 	ldr.w	r3, [fp, #16]
   21570:	2b00      	cmp	r3, #0
   21572:	f001 80e8 	beq.w	22746 <_svfprintf_r+0x1206>
   21576:	a93d      	add	r1, sp, #244	; 0xf4
   21578:	f246 6267 	movw	r2, #26215	; 0x6667
   2157c:	9109      	str	r1, [sp, #36]	; 0x24
   2157e:	f2c6 6266 	movt	r2, #26214	; 0x6666
   21582:	921d      	str	r2, [sp, #116]	; 0x74
   21584:	f10d 01f3 	add.w	r1, sp, #243	; 0xf3
   21588:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2158a:	f64c 707c 	movw	r0, #53116	; 0xcf7c
   2158e:	2300      	movs	r3, #0
   21590:	ae23      	add	r6, sp, #140	; 0x8c
   21592:	f2c0 0002 	movt	r0, #2
   21596:	1a52      	subs	r2, r2, r1
   21598:	9312      	str	r3, [sp, #72]	; 0x48
   2159a:	9108      	str	r1, [sp, #32]
   2159c:	9319      	str	r3, [sp, #100]	; 0x64
   2159e:	9320      	str	r3, [sp, #128]	; 0x80
   215a0:	930d      	str	r3, [sp, #52]	; 0x34
   215a2:	9018      	str	r0, [sp, #96]	; 0x60
   215a4:	9221      	str	r2, [sp, #132]	; 0x84
   215a6:	963d      	str	r6, [sp, #244]	; 0xf4
   215a8:	933f      	str	r3, [sp, #252]	; 0xfc
   215aa:	933e      	str	r3, [sp, #248]	; 0xf8
   215ac:	f89a 3000 	ldrb.w	r3, [sl]
   215b0:	f1b3 0225 	subs.w	r2, r3, #37	; 0x25
   215b4:	bf18      	it	ne
   215b6:	2201      	movne	r2, #1
   215b8:	2b00      	cmp	r3, #0
   215ba:	bf0c      	ite	eq
   215bc:	2300      	moveq	r3, #0
   215be:	f002 0301 	andne.w	r3, r2, #1
   215c2:	2b00      	cmp	r3, #0
   215c4:	f000 80bd 	beq.w	21742 <_svfprintf_r+0x202>
   215c8:	4652      	mov	r2, sl
   215ca:	4657      	mov	r7, sl
   215cc:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   215d0:	3701      	adds	r7, #1
   215d2:	1c19      	adds	r1, r3, #0
   215d4:	bf18      	it	ne
   215d6:	2101      	movne	r1, #1
   215d8:	2b25      	cmp	r3, #37	; 0x25
   215da:	bf0c      	ite	eq
   215dc:	2300      	moveq	r3, #0
   215de:	f001 0301 	andne.w	r3, r1, #1
   215e2:	2b00      	cmp	r3, #0
   215e4:	d1f2      	bne.n	215cc <_svfprintf_r+0x8c>
   215e6:	ebb7 080a 	subs.w	r8, r7, sl
   215ea:	d010      	beq.n	2160e <_svfprintf_r+0xce>
   215ec:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   215ee:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   215f0:	3401      	adds	r4, #1
   215f2:	f8c6 a000 	str.w	sl, [r6]
   215f6:	2c07      	cmp	r4, #7
   215f8:	f8c6 8004 	str.w	r8, [r6, #4]
   215fc:	4445      	add	r5, r8
   215fe:	943e      	str	r4, [sp, #248]	; 0xf8
   21600:	953f      	str	r5, [sp, #252]	; 0xfc
   21602:	f300 8082 	bgt.w	2170a <_svfprintf_r+0x1ca>
   21606:	3608      	adds	r6, #8
   21608:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2160a:	4443      	add	r3, r8
   2160c:	930d      	str	r3, [sp, #52]	; 0x34
   2160e:	783b      	ldrb	r3, [r7, #0]
   21610:	2b00      	cmp	r3, #0
   21612:	f000 8082 	beq.w	2171a <_svfprintf_r+0x1da>
   21616:	2300      	movs	r3, #0
   21618:	f107 0a01 	add.w	sl, r7, #1
   2161c:	930c      	str	r3, [sp, #48]	; 0x30
   2161e:	2520      	movs	r5, #32
   21620:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
   21624:	212b      	movs	r1, #43	; 0x2b
   21626:	787b      	ldrb	r3, [r7, #1]
   21628:	f04f 37ff 	mov.w	r7, #4294967295
   2162c:	2000      	movs	r0, #0
   2162e:	900a      	str	r0, [sp, #40]	; 0x28
   21630:	f10a 0a01 	add.w	sl, sl, #1
   21634:	f1a3 0220 	sub.w	r2, r3, #32
   21638:	2a58      	cmp	r2, #88	; 0x58
   2163a:	f200 8270 	bhi.w	21b1e <_svfprintf_r+0x5de>
   2163e:	e8df f012 	tbh	[pc, r2, lsl #1]
   21642:	0281      	.short	0x0281
   21644:	026e026e 	.word	0x026e026e
   21648:	026e028b 	.word	0x026e028b
   2164c:	026e026e 	.word	0x026e026e
   21650:	026e026e 	.word	0x026e026e
   21654:	0292026e 	.word	0x0292026e
   21658:	026e0082 	.word	0x026e0082
   2165c:	0087005d 	.word	0x0087005d
   21660:	00a3026e 	.word	0x00a3026e
   21664:	00aa00aa 	.word	0x00aa00aa
   21668:	00aa00aa 	.word	0x00aa00aa
   2166c:	00aa00aa 	.word	0x00aa00aa
   21670:	00aa00aa 	.word	0x00aa00aa
   21674:	026e00aa 	.word	0x026e00aa
   21678:	026e026e 	.word	0x026e026e
   2167c:	026e026e 	.word	0x026e026e
   21680:	026e026e 	.word	0x026e026e
   21684:	026e026e 	.word	0x026e026e
   21688:	00bd026e 	.word	0x00bd026e
   2168c:	026e016f 	.word	0x026e016f
   21690:	026e016f 	.word	0x026e016f
   21694:	026e026e 	.word	0x026e026e
   21698:	01ab026e 	.word	0x01ab026e
   2169c:	026e026e 	.word	0x026e026e
   216a0:	026e01b2 	.word	0x026e01b2
   216a4:	026e026e 	.word	0x026e026e
   216a8:	026e026e 	.word	0x026e026e
   216ac:	026e01cf 	.word	0x026e01cf
   216b0:	01dc026e 	.word	0x01dc026e
   216b4:	026e026e 	.word	0x026e026e
   216b8:	026e026e 	.word	0x026e026e
   216bc:	026e026e 	.word	0x026e026e
   216c0:	026e026e 	.word	0x026e026e
   216c4:	026e026e 	.word	0x026e026e
   216c8:	02b702d0 	.word	0x02b702d0
   216cc:	016f016f 	.word	0x016f016f
   216d0:	02c9016f 	.word	0x02c9016f
   216d4:	026e02b7 	.word	0x026e02b7
   216d8:	023a026e 	.word	0x023a026e
   216dc:	024c026e 	.word	0x024c026e
   216e0:	02e00259 	.word	0x02e00259
   216e4:	026e0204 	.word	0x026e0204
   216e8:	026e020b 	.word	0x026e020b
   216ec:	026e029e 	.word	0x026e029e
   216f0:	02fc026e 	.word	0x02fc026e
   216f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   216f6:	9211      	str	r2, [sp, #68]	; 0x44
   216f8:	425b      	negs	r3, r3
   216fa:	930c      	str	r3, [sp, #48]	; 0x30
   216fc:	980a      	ldr	r0, [sp, #40]	; 0x28
   216fe:	f040 0004 	orr.w	r0, r0, #4
   21702:	900a      	str	r0, [sp, #40]	; 0x28
   21704:	f89a 3000 	ldrb.w	r3, [sl]
   21708:	e792      	b.n	21630 <_svfprintf_r+0xf0>
   2170a:	9810      	ldr	r0, [sp, #64]	; 0x40
   2170c:	4659      	mov	r1, fp
   2170e:	aa3d      	add	r2, sp, #244	; 0xf4
   21710:	f003 fc04 	bl	24f1c <__ssprint_r>
   21714:	b940      	cbnz	r0, 21728 <_svfprintf_r+0x1e8>
   21716:	ae23      	add	r6, sp, #140	; 0x8c
   21718:	e776      	b.n	21608 <_svfprintf_r+0xc8>
   2171a:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
   2171c:	b123      	cbz	r3, 21728 <_svfprintf_r+0x1e8>
   2171e:	9810      	ldr	r0, [sp, #64]	; 0x40
   21720:	4659      	mov	r1, fp
   21722:	aa3d      	add	r2, sp, #244	; 0xf4
   21724:	f003 fbfa 	bl	24f1c <__ssprint_r>
   21728:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   2172c:	f013 0f40 	tst.w	r3, #64	; 0x40
   21730:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   21732:	bf18      	it	ne
   21734:	f04f 33ff 	movne.w	r3, #4294967295
   21738:	930d      	str	r3, [sp, #52]	; 0x34
   2173a:	980d      	ldr	r0, [sp, #52]	; 0x34
   2173c:	b049      	add	sp, #292	; 0x124
   2173e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21742:	4657      	mov	r7, sl
   21744:	e763      	b.n	2160e <_svfprintf_r+0xce>
   21746:	f88d 111f 	strb.w	r1, [sp, #287]	; 0x11f
   2174a:	f89a 3000 	ldrb.w	r3, [sl]
   2174e:	e76f      	b.n	21630 <_svfprintf_r+0xf0>
   21750:	4650      	mov	r0, sl
   21752:	f810 3b01 	ldrb.w	r3, [r0], #1
   21756:	2b2a      	cmp	r3, #42	; 0x2a
   21758:	f001 812c 	beq.w	229b4 <_svfprintf_r+0x1474>
   2175c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   21760:	2700      	movs	r7, #0
   21762:	2a09      	cmp	r2, #9
   21764:	4682      	mov	sl, r0
   21766:	f63f af65 	bhi.w	21634 <_svfprintf_r+0xf4>
   2176a:	2700      	movs	r7, #0
   2176c:	f810 3b01 	ldrb.w	r3, [r0], #1
   21770:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   21774:	eb02 0747 	add.w	r7, r2, r7, lsl #1
   21778:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   2177c:	2a09      	cmp	r2, #9
   2177e:	4682      	mov	sl, r0
   21780:	d9f4      	bls.n	2176c <_svfprintf_r+0x22c>
   21782:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   21786:	e755      	b.n	21634 <_svfprintf_r+0xf4>
   21788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2178a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2178e:	930a      	str	r3, [sp, #40]	; 0x28
   21790:	f89a 3000 	ldrb.w	r3, [sl]
   21794:	e74c      	b.n	21630 <_svfprintf_r+0xf0>
   21796:	4650      	mov	r0, sl
   21798:	2200      	movs	r2, #0
   2179a:	46b4      	mov	ip, r6
   2179c:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   217a0:	f810 3b01 	ldrb.w	r3, [r0], #1
   217a4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   217a8:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
   217ac:	4682      	mov	sl, r0
   217ae:	2c09      	cmp	r4, #9
   217b0:	eb06 0242 	add.w	r2, r6, r2, lsl #1
   217b4:	d9f2      	bls.n	2179c <_svfprintf_r+0x25c>
   217b6:	4666      	mov	r6, ip
   217b8:	920c      	str	r2, [sp, #48]	; 0x30
   217ba:	e73b      	b.n	21634 <_svfprintf_r+0xf4>
   217bc:	980a      	ldr	r0, [sp, #40]	; 0x28
   217be:	9317      	str	r3, [sp, #92]	; 0x5c
   217c0:	f040 0010 	orr.w	r0, r0, #16
   217c4:	900a      	str	r0, [sp, #40]	; 0x28
   217c6:	990a      	ldr	r1, [sp, #40]	; 0x28
   217c8:	068c      	lsls	r4, r1, #26
   217ca:	f140 81f6 	bpl.w	21bba <_svfprintf_r+0x67a>
   217ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
   217d0:	1dd3      	adds	r3, r2, #7
   217d2:	f023 0307 	bic.w	r3, r3, #7
   217d6:	f103 0008 	add.w	r0, r3, #8
   217da:	9011      	str	r0, [sp, #68]	; 0x44
   217dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   217e0:	4614      	mov	r4, r2
   217e2:	461d      	mov	r5, r3
   217e4:	2a00      	cmp	r2, #0
   217e6:	f173 0000 	sbcs.w	r0, r3, #0
   217ea:	f2c0 85d9 	blt.w	223a0 <_svfprintf_r+0xe60>
   217ee:	ea54 0105 	orrs.w	r1, r4, r5
   217f2:	f04f 0201 	mov.w	r2, #1
   217f6:	bf0c      	ite	eq
   217f8:	2300      	moveq	r3, #0
   217fa:	2301      	movne	r3, #1
   217fc:	2f00      	cmp	r7, #0
   217fe:	bfa2      	ittt	ge
   21800:	980a      	ldrge	r0, [sp, #40]	; 0x28
   21802:	f020 0080 	bicge.w	r0, r0, #128	; 0x80
   21806:	900a      	strge	r0, [sp, #40]	; 0x28
   21808:	2f00      	cmp	r7, #0
   2180a:	bf18      	it	ne
   2180c:	f043 0301 	orrne.w	r3, r3, #1
   21810:	2b00      	cmp	r3, #0
   21812:	f000 835f 	beq.w	21ed4 <_svfprintf_r+0x994>
   21816:	2a01      	cmp	r2, #1
   21818:	f000 84c3 	beq.w	221a2 <_svfprintf_r+0xc62>
   2181c:	2a02      	cmp	r2, #2
   2181e:	bf1c      	itt	ne
   21820:	aa3d      	addne	r2, sp, #244	; 0xf4
   21822:	46b4      	movne	ip, r6
   21824:	d102      	bne.n	2182c <_svfprintf_r+0x2ec>
   21826:	f000 bca0 	b.w	2216a <_svfprintf_r+0xc2a>
   2182a:	4632      	mov	r2, r6
   2182c:	08e3      	lsrs	r3, r4, #3
   2182e:	08e8      	lsrs	r0, r5, #3
   21830:	ea43 7345 	orr.w	r3, r3, r5, lsl #29
   21834:	f004 0107 	and.w	r1, r4, #7
   21838:	4605      	mov	r5, r0
   2183a:	461c      	mov	r4, r3
   2183c:	1e56      	subs	r6, r2, #1
   2183e:	f101 0330 	add.w	r3, r1, #48	; 0x30
   21842:	ea54 0105 	orrs.w	r1, r4, r5
   21846:	f802 3c01 	strb.w	r3, [r2, #-1]
   2184a:	d1ee      	bne.n	2182a <_svfprintf_r+0x2ea>
   2184c:	980a      	ldr	r0, [sp, #40]	; 0x28
   2184e:	9613      	str	r6, [sp, #76]	; 0x4c
   21850:	4666      	mov	r6, ip
   21852:	07c0      	lsls	r0, r0, #31
   21854:	f140 8438 	bpl.w	220c8 <_svfprintf_r+0xb88>
   21858:	2b30      	cmp	r3, #48	; 0x30
   2185a:	f000 8435 	beq.w	220c8 <_svfprintf_r+0xb88>
   2185e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21860:	1e91      	subs	r1, r2, #2
   21862:	9113      	str	r1, [sp, #76]	; 0x4c
   21864:	1a5b      	subs	r3, r3, r1
   21866:	930e      	str	r3, [sp, #56]	; 0x38
   21868:	2330      	movs	r3, #48	; 0x30
   2186a:	f802 3c02 	strb.w	r3, [r2, #-2]
   2186e:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
   21872:	2200      	movs	r2, #0
   21874:	990e      	ldr	r1, [sp, #56]	; 0x38
   21876:	9714      	str	r7, [sp, #80]	; 0x50
   21878:	42b9      	cmp	r1, r7
   2187a:	bfb8      	it	lt
   2187c:	4639      	movlt	r1, r7
   2187e:	921a      	str	r2, [sp, #104]	; 0x68
   21880:	910b      	str	r1, [sp, #44]	; 0x2c
   21882:	b113      	cbz	r3, 2188a <_svfprintf_r+0x34a>
   21884:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   21886:	3201      	adds	r2, #1
   21888:	920b      	str	r2, [sp, #44]	; 0x2c
   2188a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2188c:	f013 0302 	ands.w	r3, r3, #2
   21890:	9315      	str	r3, [sp, #84]	; 0x54
   21892:	d002      	beq.n	2189a <_svfprintf_r+0x35a>
   21894:	980b      	ldr	r0, [sp, #44]	; 0x2c
   21896:	3002      	adds	r0, #2
   21898:	900b      	str	r0, [sp, #44]	; 0x2c
   2189a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2189c:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   218a0:	9316      	str	r3, [sp, #88]	; 0x58
   218a2:	f040 81e2 	bne.w	21c6a <_svfprintf_r+0x72a>
   218a6:	980c      	ldr	r0, [sp, #48]	; 0x30
   218a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   218aa:	1a47      	subs	r7, r0, r1
   218ac:	2f00      	cmp	r7, #0
   218ae:	f340 81dc 	ble.w	21c6a <_svfprintf_r+0x72a>
   218b2:	2f10      	cmp	r7, #16
   218b4:	f64c 7850 	movw	r8, #53072	; 0xcf50
   218b8:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   218ba:	f2c0 0802 	movt	r8, #2
   218be:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   218c0:	dd22      	ble.n	21908 <_svfprintf_r+0x3c8>
   218c2:	4623      	mov	r3, r4
   218c4:	f04f 0910 	mov.w	r9, #16
   218c8:	4644      	mov	r4, r8
   218ca:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   218ce:	e002      	b.n	218d6 <_svfprintf_r+0x396>
   218d0:	3f10      	subs	r7, #16
   218d2:	2f10      	cmp	r7, #16
   218d4:	dd16      	ble.n	21904 <_svfprintf_r+0x3c4>
   218d6:	3301      	adds	r3, #1
   218d8:	e886 0210 	stmia.w	r6, {r4, r9}
   218dc:	3510      	adds	r5, #16
   218de:	3608      	adds	r6, #8
   218e0:	2b07      	cmp	r3, #7
   218e2:	933e      	str	r3, [sp, #248]	; 0xf8
   218e4:	953f      	str	r5, [sp, #252]	; 0xfc
   218e6:	ddf3      	ble.n	218d0 <_svfprintf_r+0x390>
   218e8:	4640      	mov	r0, r8
   218ea:	4659      	mov	r1, fp
   218ec:	aa3d      	add	r2, sp, #244	; 0xf4
   218ee:	ae23      	add	r6, sp, #140	; 0x8c
   218f0:	f003 fb14 	bl	24f1c <__ssprint_r>
   218f4:	2800      	cmp	r0, #0
   218f6:	f47f af17 	bne.w	21728 <_svfprintf_r+0x1e8>
   218fa:	3f10      	subs	r7, #16
   218fc:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   218fe:	2f10      	cmp	r7, #16
   21900:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
   21902:	dce8      	bgt.n	218d6 <_svfprintf_r+0x396>
   21904:	46a0      	mov	r8, r4
   21906:	461c      	mov	r4, r3
   21908:	3401      	adds	r4, #1
   2190a:	f8c6 8000 	str.w	r8, [r6]
   2190e:	2c07      	cmp	r4, #7
   21910:	6077      	str	r7, [r6, #4]
   21912:	443d      	add	r5, r7
   21914:	943e      	str	r4, [sp, #248]	; 0xf8
   21916:	953f      	str	r5, [sp, #252]	; 0xfc
   21918:	f300 8456 	bgt.w	221c8 <_svfprintf_r+0xc88>
   2191c:	3608      	adds	r6, #8
   2191e:	e1a5      	b.n	21c6c <_svfprintf_r+0x72c>
   21920:	9811      	ldr	r0, [sp, #68]	; 0x44
   21922:	9317      	str	r3, [sp, #92]	; 0x5c
   21924:	1dc3      	adds	r3, r0, #7
   21926:	f023 0307 	bic.w	r3, r3, #7
   2192a:	f103 0108 	add.w	r1, r3, #8
   2192e:	9111      	str	r1, [sp, #68]	; 0x44
   21930:	f8d3 8000 	ldr.w	r8, [r3]
   21934:	685d      	ldr	r5, [r3, #4]
   21936:	4640      	mov	r0, r8
   21938:	4642      	mov	r2, r8
   2193a:	4629      	mov	r1, r5
   2193c:	462b      	mov	r3, r5
   2193e:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
   21942:	f7fe f813 	bl	1f96c <__fpclassifyd>
   21946:	2801      	cmp	r0, #1
   21948:	4640      	mov	r0, r8
   2194a:	f040 8537 	bne.w	223bc <_svfprintf_r+0xe7c>
   2194e:	2300      	movs	r3, #0
   21950:	2200      	movs	r2, #0
   21952:	4629      	mov	r1, r5
   21954:	f004 f9ec 	bl	25d30 <__aeabi_dcmplt>
   21958:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
   2195c:	b110      	cbz	r0, 21964 <_svfprintf_r+0x424>
   2195e:	232d      	movs	r3, #45	; 0x2d
   21960:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
   21964:	2003      	movs	r0, #3
   21966:	f64c 7174 	movw	r1, #53108	; 0xcf74
   2196a:	f64c 7270 	movw	r2, #53104	; 0xcf70
   2196e:	900b      	str	r0, [sp, #44]	; 0x2c
   21970:	2000      	movs	r0, #0
   21972:	9014      	str	r0, [sp, #80]	; 0x50
   21974:	9817      	ldr	r0, [sp, #92]	; 0x5c
   21976:	f2c0 0202 	movt	r2, #2
   2197a:	f2c0 0102 	movt	r1, #2
   2197e:	2847      	cmp	r0, #71	; 0x47
   21980:	bfd8      	it	le
   21982:	4611      	movle	r1, r2
   21984:	9113      	str	r1, [sp, #76]	; 0x4c
   21986:	990a      	ldr	r1, [sp, #40]	; 0x28
   21988:	2203      	movs	r2, #3
   2198a:	2000      	movs	r0, #0
   2198c:	920e      	str	r2, [sp, #56]	; 0x38
   2198e:	f021 0180 	bic.w	r1, r1, #128	; 0x80
   21992:	901a      	str	r0, [sp, #104]	; 0x68
   21994:	910a      	str	r1, [sp, #40]	; 0x28
   21996:	e774      	b.n	21882 <_svfprintf_r+0x342>
   21998:	980a      	ldr	r0, [sp, #40]	; 0x28
   2199a:	f040 0008 	orr.w	r0, r0, #8
   2199e:	900a      	str	r0, [sp, #40]	; 0x28
   219a0:	f89a 3000 	ldrb.w	r3, [sl]
   219a4:	e644      	b.n	21630 <_svfprintf_r+0xf0>
   219a6:	990a      	ldr	r1, [sp, #40]	; 0x28
   219a8:	9317      	str	r3, [sp, #92]	; 0x5c
   219aa:	f041 0110 	orr.w	r1, r1, #16
   219ae:	910a      	str	r1, [sp, #40]	; 0x28
   219b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   219b2:	f013 0220 	ands.w	r2, r3, #32
   219b6:	f000 80a3 	beq.w	21b00 <_svfprintf_r+0x5c0>
   219ba:	9811      	ldr	r0, [sp, #68]	; 0x44
   219bc:	2200      	movs	r2, #0
   219be:	1dc3      	adds	r3, r0, #7
   219c0:	f023 0307 	bic.w	r3, r3, #7
   219c4:	f103 0108 	add.w	r1, r3, #8
   219c8:	9111      	str	r1, [sp, #68]	; 0x44
   219ca:	e9d3 4500 	ldrd	r4, r5, [r3]
   219ce:	ea54 0305 	orrs.w	r3, r4, r5
   219d2:	bf0c      	ite	eq
   219d4:	2300      	moveq	r3, #0
   219d6:	2301      	movne	r3, #1
   219d8:	2100      	movs	r1, #0
   219da:	f88d 111f 	strb.w	r1, [sp, #287]	; 0x11f
   219de:	e70d      	b.n	217fc <_svfprintf_r+0x2bc>
   219e0:	990a      	ldr	r1, [sp, #40]	; 0x28
   219e2:	9317      	str	r3, [sp, #92]	; 0x5c
   219e4:	f041 0110 	orr.w	r1, r1, #16
   219e8:	910a      	str	r1, [sp, #40]	; 0x28
   219ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   219ec:	0690      	lsls	r0, r2, #26
   219ee:	f140 80cb 	bpl.w	21b88 <_svfprintf_r+0x648>
   219f2:	9811      	ldr	r0, [sp, #68]	; 0x44
   219f4:	2201      	movs	r2, #1
   219f6:	1dc3      	adds	r3, r0, #7
   219f8:	e7e2      	b.n	219c0 <_svfprintf_r+0x480>
   219fa:	980a      	ldr	r0, [sp, #40]	; 0x28
   219fc:	9317      	str	r3, [sp, #92]	; 0x5c
   219fe:	f64c 7380 	movw	r3, #53120	; 0xcf80
   21a02:	f2c0 0302 	movt	r3, #2
   21a06:	9319      	str	r3, [sp, #100]	; 0x64
   21a08:	0683      	lsls	r3, r0, #26
   21a0a:	f140 8120 	bpl.w	21c4e <_svfprintf_r+0x70e>
   21a0e:	9911      	ldr	r1, [sp, #68]	; 0x44
   21a10:	1dcb      	adds	r3, r1, #7
   21a12:	f023 0307 	bic.w	r3, r3, #7
   21a16:	f103 0208 	add.w	r2, r3, #8
   21a1a:	9211      	str	r2, [sp, #68]	; 0x44
   21a1c:	e9d3 4500 	ldrd	r4, r5, [r3]
   21a20:	ea54 0105 	orrs.w	r1, r4, r5
   21a24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   21a26:	bf0c      	ite	eq
   21a28:	2300      	moveq	r3, #0
   21a2a:	2301      	movne	r3, #1
   21a2c:	421a      	tst	r2, r3
   21a2e:	f000 8400 	beq.w	22232 <_svfprintf_r+0xcf2>
   21a32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   21a34:	f042 0202 	orr.w	r2, r2, #2
   21a38:	920a      	str	r2, [sp, #40]	; 0x28
   21a3a:	2202      	movs	r2, #2
   21a3c:	f88d 311d 	strb.w	r3, [sp, #285]	; 0x11d
   21a40:	2330      	movs	r3, #48	; 0x30
   21a42:	f88d 311c 	strb.w	r3, [sp, #284]	; 0x11c
   21a46:	2301      	movs	r3, #1
   21a48:	e7c6      	b.n	219d8 <_svfprintf_r+0x498>
   21a4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   21a4c:	f042 0220 	orr.w	r2, r2, #32
   21a50:	920a      	str	r2, [sp, #40]	; 0x28
   21a52:	f89a 3000 	ldrb.w	r3, [sl]
   21a56:	e5eb      	b.n	21630 <_svfprintf_r+0xf0>
   21a58:	9911      	ldr	r1, [sp, #68]	; 0x44
   21a5a:	2400      	movs	r4, #0
   21a5c:	f88d 411f 	strb.w	r4, [sp, #287]	; 0x11f
   21a60:	9a11      	ldr	r2, [sp, #68]	; 0x44
   21a62:	6809      	ldr	r1, [r1, #0]
   21a64:	9317      	str	r3, [sp, #92]	; 0x5c
   21a66:	1d15      	adds	r5, r2, #4
   21a68:	9113      	str	r1, [sp, #76]	; 0x4c
   21a6a:	2900      	cmp	r1, #0
   21a6c:	f000 8702 	beq.w	22874 <_svfprintf_r+0x1334>
   21a70:	2f00      	cmp	r7, #0
   21a72:	9813      	ldr	r0, [sp, #76]	; 0x4c
   21a74:	f2c0 86be 	blt.w	227f4 <_svfprintf_r+0x12b4>
   21a78:	4621      	mov	r1, r4
   21a7a:	463a      	mov	r2, r7
   21a7c:	f7fe fd66 	bl	2054c <memchr>
   21a80:	2800      	cmp	r0, #0
   21a82:	f000 872d 	beq.w	228e0 <_svfprintf_r+0x13a0>
   21a86:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   21a88:	9414      	str	r4, [sp, #80]	; 0x50
   21a8a:	1a80      	subs	r0, r0, r2
   21a8c:	900e      	str	r0, [sp, #56]	; 0x38
   21a8e:	42b8      	cmp	r0, r7
   21a90:	941a      	str	r4, [sp, #104]	; 0x68
   21a92:	bfc5      	ittet	gt
   21a94:	ea27 73e7 	bicgt.w	r3, r7, r7, asr #31
   21a98:	9511      	strgt	r5, [sp, #68]	; 0x44
   21a9a:	9b0e      	ldrle	r3, [sp, #56]	; 0x38
   21a9c:	930b      	strgt	r3, [sp, #44]	; 0x2c
   21a9e:	bfd5      	itete	le
   21aa0:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
   21aa4:	f89d 311f 	ldrbgt.w	r3, [sp, #287]	; 0x11f
   21aa8:	930b      	strle	r3, [sp, #44]	; 0x2c
   21aaa:	970e      	strgt	r7, [sp, #56]	; 0x38
   21aac:	bfdc      	itt	le
   21aae:	f89d 311f 	ldrble.w	r3, [sp, #287]	; 0x11f
   21ab2:	9511      	strle	r5, [sp, #68]	; 0x44
   21ab4:	e6e5      	b.n	21882 <_svfprintf_r+0x342>
   21ab6:	f89a 3000 	ldrb.w	r3, [sl]
   21aba:	4652      	mov	r2, sl
   21abc:	2b6c      	cmp	r3, #108	; 0x6c
   21abe:	bf05      	ittet	eq
   21ac0:	f10a 0a01 	addeq.w	sl, sl, #1
   21ac4:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   21ac6:	980a      	ldrne	r0, [sp, #40]	; 0x28
   21ac8:	f043 0320 	orreq.w	r3, r3, #32
   21acc:	bf15      	itete	ne
   21ace:	f040 0010 	orrne.w	r0, r0, #16
   21ad2:	930a      	streq	r3, [sp, #40]	; 0x28
   21ad4:	900a      	strne	r0, [sp, #40]	; 0x28
   21ad6:	7853      	ldrbeq	r3, [r2, #1]
   21ad8:	e5aa      	b.n	21630 <_svfprintf_r+0xf0>
   21ada:	980a      	ldr	r0, [sp, #40]	; 0x28
   21adc:	0682      	lsls	r2, r0, #26
   21ade:	f140 849e 	bpl.w	2241e <_svfprintf_r+0xede>
   21ae2:	9911      	ldr	r1, [sp, #68]	; 0x44
   21ae4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   21ae6:	680b      	ldr	r3, [r1, #0]
   21ae8:	3104      	adds	r1, #4
   21aea:	9111      	str	r1, [sp, #68]	; 0x44
   21aec:	17d1      	asrs	r1, r2, #31
   21aee:	601a      	str	r2, [r3, #0]
   21af0:	6059      	str	r1, [r3, #4]
   21af2:	e55b      	b.n	215ac <_svfprintf_r+0x6c>
   21af4:	9317      	str	r3, [sp, #92]	; 0x5c
   21af6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21af8:	f013 0220 	ands.w	r2, r3, #32
   21afc:	f47f af5d 	bne.w	219ba <_svfprintf_r+0x47a>
   21b00:	980a      	ldr	r0, [sp, #40]	; 0x28
   21b02:	f010 0310 	ands.w	r3, r0, #16
   21b06:	f000 8495 	beq.w	22434 <_svfprintf_r+0xef4>
   21b0a:	9911      	ldr	r1, [sp, #68]	; 0x44
   21b0c:	680b      	ldr	r3, [r1, #0]
   21b0e:	3104      	adds	r1, #4
   21b10:	9111      	str	r1, [sp, #68]	; 0x44
   21b12:	461c      	mov	r4, r3
   21b14:	3300      	adds	r3, #0
   21b16:	bf18      	it	ne
   21b18:	2301      	movne	r3, #1
   21b1a:	2500      	movs	r5, #0
   21b1c:	e75c      	b.n	219d8 <_svfprintf_r+0x498>
   21b1e:	9317      	str	r3, [sp, #92]	; 0x5c
   21b20:	2b00      	cmp	r3, #0
   21b22:	f43f adfa 	beq.w	2171a <_svfprintf_r+0x1da>
   21b26:	9817      	ldr	r0, [sp, #92]	; 0x5c
   21b28:	2301      	movs	r3, #1
   21b2a:	a933      	add	r1, sp, #204	; 0xcc
   21b2c:	930b      	str	r3, [sp, #44]	; 0x2c
   21b2e:	930e      	str	r3, [sp, #56]	; 0x38
   21b30:	2300      	movs	r3, #0
   21b32:	f88d 00cc 	strb.w	r0, [sp, #204]	; 0xcc
   21b36:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
   21b3a:	9113      	str	r1, [sp, #76]	; 0x4c
   21b3c:	2300      	movs	r3, #0
   21b3e:	9314      	str	r3, [sp, #80]	; 0x50
   21b40:	931a      	str	r3, [sp, #104]	; 0x68
   21b42:	e6a2      	b.n	2188a <_svfprintf_r+0x34a>
   21b44:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
   21b48:	2b00      	cmp	r3, #0
   21b4a:	f040 8456 	bne.w	223fa <_svfprintf_r+0xeba>
   21b4e:	f88d 511f 	strb.w	r5, [sp, #287]	; 0x11f
   21b52:	f89a 3000 	ldrb.w	r3, [sl]
   21b56:	e56b      	b.n	21630 <_svfprintf_r+0xf0>
   21b58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   21b5a:	f042 0201 	orr.w	r2, r2, #1
   21b5e:	920a      	str	r2, [sp, #40]	; 0x28
   21b60:	f89a 3000 	ldrb.w	r3, [sl]
   21b64:	e564      	b.n	21630 <_svfprintf_r+0xf0>
   21b66:	9b11      	ldr	r3, [sp, #68]	; 0x44
   21b68:	9811      	ldr	r0, [sp, #68]	; 0x44
   21b6a:	681b      	ldr	r3, [r3, #0]
   21b6c:	1d02      	adds	r2, r0, #4
   21b6e:	2b00      	cmp	r3, #0
   21b70:	930c      	str	r3, [sp, #48]	; 0x30
   21b72:	f6ff adbf 	blt.w	216f4 <_svfprintf_r+0x1b4>
   21b76:	f89a 3000 	ldrb.w	r3, [sl]
   21b7a:	9211      	str	r2, [sp, #68]	; 0x44
   21b7c:	e558      	b.n	21630 <_svfprintf_r+0xf0>
   21b7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   21b80:	9317      	str	r3, [sp, #92]	; 0x5c
   21b82:	0690      	lsls	r0, r2, #26
   21b84:	f53f af35 	bmi.w	219f2 <_svfprintf_r+0x4b2>
   21b88:	980a      	ldr	r0, [sp, #40]	; 0x28
   21b8a:	06c1      	lsls	r1, r0, #27
   21b8c:	f100 8354 	bmi.w	22238 <_svfprintf_r+0xcf8>
   21b90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   21b92:	0652      	lsls	r2, r2, #25
   21b94:	f140 8350 	bpl.w	22238 <_svfprintf_r+0xcf8>
   21b98:	9b11      	ldr	r3, [sp, #68]	; 0x44
   21b9a:	2500      	movs	r5, #0
   21b9c:	2201      	movs	r2, #1
   21b9e:	881c      	ldrh	r4, [r3, #0]
   21ba0:	3304      	adds	r3, #4
   21ba2:	9311      	str	r3, [sp, #68]	; 0x44
   21ba4:	ea54 0005 	orrs.w	r0, r4, r5
   21ba8:	bf0c      	ite	eq
   21baa:	2300      	moveq	r3, #0
   21bac:	2301      	movne	r3, #1
   21bae:	e713      	b.n	219d8 <_svfprintf_r+0x498>
   21bb0:	990a      	ldr	r1, [sp, #40]	; 0x28
   21bb2:	9317      	str	r3, [sp, #92]	; 0x5c
   21bb4:	068c      	lsls	r4, r1, #26
   21bb6:	f53f ae0a 	bmi.w	217ce <_svfprintf_r+0x28e>
   21bba:	990a      	ldr	r1, [sp, #40]	; 0x28
   21bbc:	06c8      	lsls	r0, r1, #27
   21bbe:	f140 844b 	bpl.w	22458 <_svfprintf_r+0xf18>
   21bc2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   21bc4:	6813      	ldr	r3, [r2, #0]
   21bc6:	3204      	adds	r2, #4
   21bc8:	9211      	str	r2, [sp, #68]	; 0x44
   21bca:	461c      	mov	r4, r3
   21bcc:	461a      	mov	r2, r3
   21bce:	17dd      	asrs	r5, r3, #31
   21bd0:	462b      	mov	r3, r5
   21bd2:	e607      	b.n	217e4 <_svfprintf_r+0x2a4>
   21bd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   21bd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   21bda:	920a      	str	r2, [sp, #40]	; 0x28
   21bdc:	f89a 3000 	ldrb.w	r3, [sl]
   21be0:	e526      	b.n	21630 <_svfprintf_r+0xf0>
   21be2:	9317      	str	r3, [sp, #92]	; 0x5c
   21be4:	2001      	movs	r0, #1
   21be6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   21be8:	900b      	str	r0, [sp, #44]	; 0x2c
   21bea:	1d19      	adds	r1, r3, #4
   21bec:	900e      	str	r0, [sp, #56]	; 0x38
   21bee:	681a      	ldr	r2, [r3, #0]
   21bf0:	2300      	movs	r3, #0
   21bf2:	9111      	str	r1, [sp, #68]	; 0x44
   21bf4:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
   21bf8:	ab33      	add	r3, sp, #204	; 0xcc
   21bfa:	f88d 20cc 	strb.w	r2, [sp, #204]	; 0xcc
   21bfe:	9313      	str	r3, [sp, #76]	; 0x4c
   21c00:	e79c      	b.n	21b3c <_svfprintf_r+0x5fc>
   21c02:	9b11      	ldr	r3, [sp, #68]	; 0x44
   21c04:	2500      	movs	r5, #0
   21c06:	9811      	ldr	r0, [sp, #68]	; 0x44
   21c08:	2178      	movs	r1, #120	; 0x78
   21c0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   21c0c:	681b      	ldr	r3, [r3, #0]
   21c0e:	3004      	adds	r0, #4
   21c10:	f042 0202 	orr.w	r2, r2, #2
   21c14:	9011      	str	r0, [sp, #68]	; 0x44
   21c16:	920a      	str	r2, [sp, #40]	; 0x28
   21c18:	461c      	mov	r4, r3
   21c1a:	2230      	movs	r2, #48	; 0x30
   21c1c:	f64c 7094 	movw	r0, #53140	; 0xcf94
   21c20:	1b5b      	subs	r3, r3, r5
   21c22:	f88d 211c 	strb.w	r2, [sp, #284]	; 0x11c
   21c26:	bf18      	it	ne
   21c28:	2301      	movne	r3, #1
   21c2a:	f2c0 0002 	movt	r0, #2
   21c2e:	f88d 111d 	strb.w	r1, [sp, #285]	; 0x11d
   21c32:	2202      	movs	r2, #2
   21c34:	9019      	str	r0, [sp, #100]	; 0x64
   21c36:	9117      	str	r1, [sp, #92]	; 0x5c
   21c38:	e6ce      	b.n	219d8 <_svfprintf_r+0x498>
   21c3a:	980a      	ldr	r0, [sp, #40]	; 0x28
   21c3c:	f64c 7294 	movw	r2, #53140	; 0xcf94
   21c40:	9317      	str	r3, [sp, #92]	; 0x5c
   21c42:	f2c0 0202 	movt	r2, #2
   21c46:	0683      	lsls	r3, r0, #26
   21c48:	9219      	str	r2, [sp, #100]	; 0x64
   21c4a:	f53f aee0 	bmi.w	21a0e <_svfprintf_r+0x4ce>
   21c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21c50:	06dd      	lsls	r5, r3, #27
   21c52:	f100 82fd 	bmi.w	22250 <_svfprintf_r+0xd10>
   21c56:	990a      	ldr	r1, [sp, #40]	; 0x28
   21c58:	064c      	lsls	r4, r1, #25
   21c5a:	f140 82f9 	bpl.w	22250 <_svfprintf_r+0xd10>
   21c5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   21c60:	2500      	movs	r5, #0
   21c62:	8814      	ldrh	r4, [r2, #0]
   21c64:	3204      	adds	r2, #4
   21c66:	9211      	str	r2, [sp, #68]	; 0x44
   21c68:	e6da      	b.n	21a20 <_svfprintf_r+0x4e0>
   21c6a:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   21c6c:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
   21c70:	b16b      	cbz	r3, 21c8e <_svfprintf_r+0x74e>
   21c72:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   21c74:	ab47      	add	r3, sp, #284	; 0x11c
   21c76:	3303      	adds	r3, #3
   21c78:	6033      	str	r3, [r6, #0]
   21c7a:	3401      	adds	r4, #1
   21c7c:	2301      	movs	r3, #1
   21c7e:	2c07      	cmp	r4, #7
   21c80:	6073      	str	r3, [r6, #4]
   21c82:	441d      	add	r5, r3
   21c84:	943e      	str	r4, [sp, #248]	; 0xf8
   21c86:	953f      	str	r5, [sp, #252]	; 0xfc
   21c88:	f300 81ef 	bgt.w	2206a <_svfprintf_r+0xb2a>
   21c8c:	3608      	adds	r6, #8
   21c8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   21c90:	b163      	cbz	r3, 21cac <_svfprintf_r+0x76c>
   21c92:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   21c94:	ab47      	add	r3, sp, #284	; 0x11c
   21c96:	6033      	str	r3, [r6, #0]
   21c98:	2302      	movs	r3, #2
   21c9a:	3401      	adds	r4, #1
   21c9c:	6073      	str	r3, [r6, #4]
   21c9e:	2c07      	cmp	r4, #7
   21ca0:	441d      	add	r5, r3
   21ca2:	943e      	str	r4, [sp, #248]	; 0xf8
   21ca4:	953f      	str	r5, [sp, #252]	; 0xfc
   21ca6:	f300 81eb 	bgt.w	22080 <_svfprintf_r+0xb40>
   21caa:	3608      	adds	r6, #8
   21cac:	9b16      	ldr	r3, [sp, #88]	; 0x58
   21cae:	2b80      	cmp	r3, #128	; 0x80
   21cb0:	f000 8124 	beq.w	21efc <_svfprintf_r+0x9bc>
   21cb4:	9814      	ldr	r0, [sp, #80]	; 0x50
   21cb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21cb8:	1ac7      	subs	r7, r0, r3
   21cba:	2f00      	cmp	r7, #0
   21cbc:	dd35      	ble.n	21d2a <_svfprintf_r+0x7ea>
   21cbe:	2f10      	cmp	r7, #16
   21cc0:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   21cc2:	bfd8      	it	le
   21cc4:	f8df 8a38 	ldrle.w	r8, [pc, #2616]	; 22700 <_svfprintf_r+0x11c0>
   21cc8:	dd24      	ble.n	21d14 <_svfprintf_r+0x7d4>
   21cca:	f8df 8a34 	ldr.w	r8, [pc, #2612]	; 22700 <_svfprintf_r+0x11c0>
   21cce:	4623      	mov	r3, r4
   21cd0:	f04f 0910 	mov.w	r9, #16
   21cd4:	4644      	mov	r4, r8
   21cd6:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   21cda:	e002      	b.n	21ce2 <_svfprintf_r+0x7a2>
   21cdc:	3f10      	subs	r7, #16
   21cde:	2f10      	cmp	r7, #16
   21ce0:	dd16      	ble.n	21d10 <_svfprintf_r+0x7d0>
   21ce2:	3301      	adds	r3, #1
   21ce4:	e886 0210 	stmia.w	r6, {r4, r9}
   21ce8:	3510      	adds	r5, #16
   21cea:	3608      	adds	r6, #8
   21cec:	2b07      	cmp	r3, #7
   21cee:	933e      	str	r3, [sp, #248]	; 0xf8
   21cf0:	953f      	str	r5, [sp, #252]	; 0xfc
   21cf2:	ddf3      	ble.n	21cdc <_svfprintf_r+0x79c>
   21cf4:	4640      	mov	r0, r8
   21cf6:	4659      	mov	r1, fp
   21cf8:	aa3d      	add	r2, sp, #244	; 0xf4
   21cfa:	ae23      	add	r6, sp, #140	; 0x8c
   21cfc:	f003 f90e 	bl	24f1c <__ssprint_r>
   21d00:	2800      	cmp	r0, #0
   21d02:	f47f ad11 	bne.w	21728 <_svfprintf_r+0x1e8>
   21d06:	3f10      	subs	r7, #16
   21d08:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   21d0a:	2f10      	cmp	r7, #16
   21d0c:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
   21d0e:	dce8      	bgt.n	21ce2 <_svfprintf_r+0x7a2>
   21d10:	46a0      	mov	r8, r4
   21d12:	461c      	mov	r4, r3
   21d14:	3401      	adds	r4, #1
   21d16:	f8c6 8000 	str.w	r8, [r6]
   21d1a:	2c07      	cmp	r4, #7
   21d1c:	6077      	str	r7, [r6, #4]
   21d1e:	443d      	add	r5, r7
   21d20:	943e      	str	r4, [sp, #248]	; 0xf8
   21d22:	953f      	str	r5, [sp, #252]	; 0xfc
   21d24:	f300 8196 	bgt.w	22054 <_svfprintf_r+0xb14>
   21d28:	3608      	adds	r6, #8
   21d2a:	990a      	ldr	r1, [sp, #40]	; 0x28
   21d2c:	05ca      	lsls	r2, r1, #23
   21d2e:	d475      	bmi.n	21e1c <_svfprintf_r+0x8dc>
   21d30:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   21d32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21d34:	3401      	adds	r4, #1
   21d36:	9813      	ldr	r0, [sp, #76]	; 0x4c
   21d38:	2c07      	cmp	r4, #7
   21d3a:	441d      	add	r5, r3
   21d3c:	e886 0009 	stmia.w	r6, {r0, r3}
   21d40:	953f      	str	r5, [sp, #252]	; 0xfc
   21d42:	943e      	str	r4, [sp, #248]	; 0xf8
   21d44:	dc5f      	bgt.n	21e06 <_svfprintf_r+0x8c6>
   21d46:	3608      	adds	r6, #8
   21d48:	990a      	ldr	r1, [sp, #40]	; 0x28
   21d4a:	074b      	lsls	r3, r1, #29
   21d4c:	d540      	bpl.n	21dd0 <_svfprintf_r+0x890>
   21d4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   21d50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   21d52:	1ad7      	subs	r7, r2, r3
   21d54:	2f00      	cmp	r7, #0
   21d56:	dd3b      	ble.n	21dd0 <_svfprintf_r+0x890>
   21d58:	2f10      	cmp	r7, #16
   21d5a:	f64c 7850 	movw	r8, #53072	; 0xcf50
   21d5e:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   21d60:	f2c0 0802 	movt	r8, #2
   21d64:	dd22      	ble.n	21dac <_svfprintf_r+0x86c>
   21d66:	4623      	mov	r3, r4
   21d68:	f04f 0910 	mov.w	r9, #16
   21d6c:	4644      	mov	r4, r8
   21d6e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   21d72:	e002      	b.n	21d7a <_svfprintf_r+0x83a>
   21d74:	3f10      	subs	r7, #16
   21d76:	2f10      	cmp	r7, #16
   21d78:	dd16      	ble.n	21da8 <_svfprintf_r+0x868>
   21d7a:	3301      	adds	r3, #1
   21d7c:	e886 0210 	stmia.w	r6, {r4, r9}
   21d80:	3510      	adds	r5, #16
   21d82:	3608      	adds	r6, #8
   21d84:	2b07      	cmp	r3, #7
   21d86:	933e      	str	r3, [sp, #248]	; 0xf8
   21d88:	953f      	str	r5, [sp, #252]	; 0xfc
   21d8a:	ddf3      	ble.n	21d74 <_svfprintf_r+0x834>
   21d8c:	4640      	mov	r0, r8
   21d8e:	4659      	mov	r1, fp
   21d90:	aa3d      	add	r2, sp, #244	; 0xf4
   21d92:	ae23      	add	r6, sp, #140	; 0x8c
   21d94:	f003 f8c2 	bl	24f1c <__ssprint_r>
   21d98:	2800      	cmp	r0, #0
   21d9a:	f47f acc5 	bne.w	21728 <_svfprintf_r+0x1e8>
   21d9e:	3f10      	subs	r7, #16
   21da0:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   21da2:	2f10      	cmp	r7, #16
   21da4:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
   21da6:	dce8      	bgt.n	21d7a <_svfprintf_r+0x83a>
   21da8:	46a0      	mov	r8, r4
   21daa:	461c      	mov	r4, r3
   21dac:	3401      	adds	r4, #1
   21dae:	f8c6 8000 	str.w	r8, [r6]
   21db2:	2c07      	cmp	r4, #7
   21db4:	6077      	str	r7, [r6, #4]
   21db6:	443d      	add	r5, r7
   21db8:	943e      	str	r4, [sp, #248]	; 0xf8
   21dba:	953f      	str	r5, [sp, #252]	; 0xfc
   21dbc:	dd08      	ble.n	21dd0 <_svfprintf_r+0x890>
   21dbe:	9810      	ldr	r0, [sp, #64]	; 0x40
   21dc0:	4659      	mov	r1, fp
   21dc2:	aa3d      	add	r2, sp, #244	; 0xf4
   21dc4:	f003 f8aa 	bl	24f1c <__ssprint_r>
   21dc8:	2800      	cmp	r0, #0
   21dca:	f47f acad 	bne.w	21728 <_svfprintf_r+0x1e8>
   21dce:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   21dd0:	980d      	ldr	r0, [sp, #52]	; 0x34
   21dd2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   21dd4:	990c      	ldr	r1, [sp, #48]	; 0x30
   21dd6:	428a      	cmp	r2, r1
   21dd8:	bfac      	ite	ge
   21dda:	1880      	addge	r0, r0, r2
   21ddc:	1840      	addlt	r0, r0, r1
   21dde:	900d      	str	r0, [sp, #52]	; 0x34
   21de0:	2d00      	cmp	r5, #0
   21de2:	f040 8129 	bne.w	22038 <_svfprintf_r+0xaf8>
   21de6:	2300      	movs	r3, #0
   21de8:	ae23      	add	r6, sp, #140	; 0x8c
   21dea:	933e      	str	r3, [sp, #248]	; 0xf8
   21dec:	f7ff bbde 	b.w	215ac <_svfprintf_r+0x6c>
   21df0:	46a0      	mov	r8, r4
   21df2:	461c      	mov	r4, r3
   21df4:	3401      	adds	r4, #1
   21df6:	f8c6 8000 	str.w	r8, [r6]
   21dfa:	2c07      	cmp	r4, #7
   21dfc:	6077      	str	r7, [r6, #4]
   21dfe:	443d      	add	r5, r7
   21e00:	943e      	str	r4, [sp, #248]	; 0xf8
   21e02:	953f      	str	r5, [sp, #252]	; 0xfc
   21e04:	dd9f      	ble.n	21d46 <_svfprintf_r+0x806>
   21e06:	9810      	ldr	r0, [sp, #64]	; 0x40
   21e08:	4659      	mov	r1, fp
   21e0a:	aa3d      	add	r2, sp, #244	; 0xf4
   21e0c:	f003 f886 	bl	24f1c <__ssprint_r>
   21e10:	2800      	cmp	r0, #0
   21e12:	f47f ac89 	bne.w	21728 <_svfprintf_r+0x1e8>
   21e16:	ae23      	add	r6, sp, #140	; 0x8c
   21e18:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   21e1a:	e795      	b.n	21d48 <_svfprintf_r+0x808>
   21e1c:	9917      	ldr	r1, [sp, #92]	; 0x5c
   21e1e:	2965      	cmp	r1, #101	; 0x65
   21e20:	f340 80a9 	ble.w	21f76 <_svfprintf_r+0xa36>
   21e24:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
   21e28:	2200      	movs	r2, #0
   21e2a:	2300      	movs	r3, #0
   21e2c:	f003 ff76 	bl	25d1c <__aeabi_dcmpeq>
   21e30:	2800      	cmp	r0, #0
   21e32:	f000 814f 	beq.w	220d4 <_svfprintf_r+0xb94>
   21e36:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   21e38:	f64c 73b0 	movw	r3, #53168	; 0xcfb0
   21e3c:	f2c0 0302 	movt	r3, #2
   21e40:	6033      	str	r3, [r6, #0]
   21e42:	3401      	adds	r4, #1
   21e44:	2301      	movs	r3, #1
   21e46:	2c07      	cmp	r4, #7
   21e48:	6073      	str	r3, [r6, #4]
   21e4a:	441d      	add	r5, r3
   21e4c:	943e      	str	r4, [sp, #248]	; 0xf8
   21e4e:	953f      	str	r5, [sp, #252]	; 0xfc
   21e50:	f300 8310 	bgt.w	22474 <_svfprintf_r+0xf34>
   21e54:	3608      	adds	r6, #8
   21e56:	9b44      	ldr	r3, [sp, #272]	; 0x110
   21e58:	9a12      	ldr	r2, [sp, #72]	; 0x48
   21e5a:	429a      	cmp	r2, r3
   21e5c:	dc03      	bgt.n	21e66 <_svfprintf_r+0x926>
   21e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21e60:	07db      	lsls	r3, r3, #31
   21e62:	f57f af71 	bpl.w	21d48 <_svfprintf_r+0x808>
   21e66:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   21e68:	981c      	ldr	r0, [sp, #112]	; 0x70
   21e6a:	3401      	adds	r4, #1
   21e6c:	991b      	ldr	r1, [sp, #108]	; 0x6c
   21e6e:	2c07      	cmp	r4, #7
   21e70:	4405      	add	r5, r0
   21e72:	6070      	str	r0, [r6, #4]
   21e74:	6031      	str	r1, [r6, #0]
   21e76:	953f      	str	r5, [sp, #252]	; 0xfc
   21e78:	943e      	str	r4, [sp, #248]	; 0xf8
   21e7a:	f300 8458 	bgt.w	2272e <_svfprintf_r+0x11ee>
   21e7e:	3608      	adds	r6, #8
   21e80:	9a12      	ldr	r2, [sp, #72]	; 0x48
   21e82:	1e57      	subs	r7, r2, #1
   21e84:	2f00      	cmp	r7, #0
   21e86:	f77f af5f 	ble.w	21d48 <_svfprintf_r+0x808>
   21e8a:	2f10      	cmp	r7, #16
   21e8c:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   21e8e:	f340 8564 	ble.w	2295a <_svfprintf_r+0x141a>
   21e92:	f8df 886c 	ldr.w	r8, [pc, #2156]	; 22700 <_svfprintf_r+0x11c0>
   21e96:	4623      	mov	r3, r4
   21e98:	f04f 0910 	mov.w	r9, #16
   21e9c:	4644      	mov	r4, r8
   21e9e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   21ea2:	e002      	b.n	21eaa <_svfprintf_r+0x96a>
   21ea4:	3f10      	subs	r7, #16
   21ea6:	2f10      	cmp	r7, #16
   21ea8:	dda2      	ble.n	21df0 <_svfprintf_r+0x8b0>
   21eaa:	3301      	adds	r3, #1
   21eac:	e886 0210 	stmia.w	r6, {r4, r9}
   21eb0:	3510      	adds	r5, #16
   21eb2:	3608      	adds	r6, #8
   21eb4:	2b07      	cmp	r3, #7
   21eb6:	933e      	str	r3, [sp, #248]	; 0xf8
   21eb8:	953f      	str	r5, [sp, #252]	; 0xfc
   21eba:	ddf3      	ble.n	21ea4 <_svfprintf_r+0x964>
   21ebc:	4640      	mov	r0, r8
   21ebe:	4659      	mov	r1, fp
   21ec0:	aa3d      	add	r2, sp, #244	; 0xf4
   21ec2:	ae23      	add	r6, sp, #140	; 0x8c
   21ec4:	f003 f82a 	bl	24f1c <__ssprint_r>
   21ec8:	2800      	cmp	r0, #0
   21eca:	f47f ac2d 	bne.w	21728 <_svfprintf_r+0x1e8>
   21ece:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   21ed0:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
   21ed2:	e7e7      	b.n	21ea4 <_svfprintf_r+0x964>
   21ed4:	2a00      	cmp	r2, #0
   21ed6:	f040 80b9 	bne.w	2204c <_svfprintf_r+0xb0c>
   21eda:	980a      	ldr	r0, [sp, #40]	; 0x28
   21edc:	07c1      	lsls	r1, r0, #31
   21ede:	bf5e      	ittt	pl
   21ee0:	920e      	strpl	r2, [sp, #56]	; 0x38
   21ee2:	a83d      	addpl	r0, sp, #244	; 0xf4
   21ee4:	9013      	strpl	r0, [sp, #76]	; 0x4c
   21ee6:	f57f acc2 	bpl.w	2186e <_svfprintf_r+0x32e>
   21eea:	9921      	ldr	r1, [sp, #132]	; 0x84
   21eec:	2330      	movs	r3, #48	; 0x30
   21eee:	f10d 02f3 	add.w	r2, sp, #243	; 0xf3
   21ef2:	f88d 30f3 	strb.w	r3, [sp, #243]	; 0xf3
   21ef6:	9213      	str	r2, [sp, #76]	; 0x4c
   21ef8:	910e      	str	r1, [sp, #56]	; 0x38
   21efa:	e4b8      	b.n	2186e <_svfprintf_r+0x32e>
   21efc:	980c      	ldr	r0, [sp, #48]	; 0x30
   21efe:	990b      	ldr	r1, [sp, #44]	; 0x2c
   21f00:	1a47      	subs	r7, r0, r1
   21f02:	2f00      	cmp	r7, #0
   21f04:	f77f aed6 	ble.w	21cb4 <_svfprintf_r+0x774>
   21f08:	2f10      	cmp	r7, #16
   21f0a:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   21f0c:	bfd8      	it	le
   21f0e:	f8df 87f0 	ldrle.w	r8, [pc, #2032]	; 22700 <_svfprintf_r+0x11c0>
   21f12:	dd24      	ble.n	21f5e <_svfprintf_r+0xa1e>
   21f14:	f8df 87e8 	ldr.w	r8, [pc, #2024]	; 22700 <_svfprintf_r+0x11c0>
   21f18:	4623      	mov	r3, r4
   21f1a:	f04f 0910 	mov.w	r9, #16
   21f1e:	4644      	mov	r4, r8
   21f20:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   21f24:	e002      	b.n	21f2c <_svfprintf_r+0x9ec>
   21f26:	3f10      	subs	r7, #16
   21f28:	2f10      	cmp	r7, #16
   21f2a:	dd16      	ble.n	21f5a <_svfprintf_r+0xa1a>
   21f2c:	3301      	adds	r3, #1
   21f2e:	e886 0210 	stmia.w	r6, {r4, r9}
   21f32:	3510      	adds	r5, #16
   21f34:	3608      	adds	r6, #8
   21f36:	2b07      	cmp	r3, #7
   21f38:	933e      	str	r3, [sp, #248]	; 0xf8
   21f3a:	953f      	str	r5, [sp, #252]	; 0xfc
   21f3c:	ddf3      	ble.n	21f26 <_svfprintf_r+0x9e6>
   21f3e:	4640      	mov	r0, r8
   21f40:	4659      	mov	r1, fp
   21f42:	aa3d      	add	r2, sp, #244	; 0xf4
   21f44:	ae23      	add	r6, sp, #140	; 0x8c
   21f46:	f002 ffe9 	bl	24f1c <__ssprint_r>
   21f4a:	2800      	cmp	r0, #0
   21f4c:	f47f abec 	bne.w	21728 <_svfprintf_r+0x1e8>
   21f50:	3f10      	subs	r7, #16
   21f52:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   21f54:	2f10      	cmp	r7, #16
   21f56:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
   21f58:	dce8      	bgt.n	21f2c <_svfprintf_r+0x9ec>
   21f5a:	46a0      	mov	r8, r4
   21f5c:	461c      	mov	r4, r3
   21f5e:	3401      	adds	r4, #1
   21f60:	f8c6 8000 	str.w	r8, [r6]
   21f64:	2c07      	cmp	r4, #7
   21f66:	6077      	str	r7, [r6, #4]
   21f68:	443d      	add	r5, r7
   21f6a:	943e      	str	r4, [sp, #248]	; 0xf8
   21f6c:	953f      	str	r5, [sp, #252]	; 0xfc
   21f6e:	f300 820c 	bgt.w	2238a <_svfprintf_r+0xe4a>
   21f72:	3608      	adds	r6, #8
   21f74:	e69e      	b.n	21cb4 <_svfprintf_r+0x774>
   21f76:	9b12      	ldr	r3, [sp, #72]	; 0x48
   21f78:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   21f7a:	2b01      	cmp	r3, #1
   21f7c:	f340 81d2 	ble.w	22324 <_svfprintf_r+0xde4>
   21f80:	3401      	adds	r4, #1
   21f82:	9913      	ldr	r1, [sp, #76]	; 0x4c
   21f84:	3501      	adds	r5, #1
   21f86:	2301      	movs	r3, #1
   21f88:	2c07      	cmp	r4, #7
   21f8a:	e886 000a 	stmia.w	r6, {r1, r3}
   21f8e:	953f      	str	r5, [sp, #252]	; 0xfc
   21f90:	943e      	str	r4, [sp, #248]	; 0xf8
   21f92:	f300 81e2 	bgt.w	2235a <_svfprintf_r+0xe1a>
   21f96:	3608      	adds	r6, #8
   21f98:	3401      	adds	r4, #1
   21f9a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   21f9c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   21f9e:	2c07      	cmp	r4, #7
   21fa0:	441d      	add	r5, r3
   21fa2:	e886 000c 	stmia.w	r6, {r2, r3}
   21fa6:	943e      	str	r4, [sp, #248]	; 0xf8
   21fa8:	953f      	str	r5, [sp, #252]	; 0xfc
   21faa:	f300 81e2 	bgt.w	22372 <_svfprintf_r+0xe32>
   21fae:	3608      	adds	r6, #8
   21fb0:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
   21fb4:	2200      	movs	r2, #0
   21fb6:	2300      	movs	r3, #0
   21fb8:	f003 feb0 	bl	25d1c <__aeabi_dcmpeq>
   21fbc:	2800      	cmp	r0, #0
   21fbe:	f040 810e 	bne.w	221de <_svfprintf_r+0xc9e>
   21fc2:	9812      	ldr	r0, [sp, #72]	; 0x48
   21fc4:	3401      	adds	r4, #1
   21fc6:	9913      	ldr	r1, [sp, #76]	; 0x4c
   21fc8:	1e43      	subs	r3, r0, #1
   21fca:	6073      	str	r3, [r6, #4]
   21fcc:	461a      	mov	r2, r3
   21fce:	1c4b      	adds	r3, r1, #1
   21fd0:	2c07      	cmp	r4, #7
   21fd2:	6033      	str	r3, [r6, #0]
   21fd4:	4415      	add	r5, r2
   21fd6:	943e      	str	r4, [sp, #248]	; 0xf8
   21fd8:	953f      	str	r5, [sp, #252]	; 0xfc
   21fda:	dc21      	bgt.n	22020 <_svfprintf_r+0xae0>
   21fdc:	3608      	adds	r6, #8
   21fde:	3401      	adds	r4, #1
   21fe0:	9820      	ldr	r0, [sp, #128]	; 0x80
   21fe2:	2c07      	cmp	r4, #7
   21fe4:	ab40      	add	r3, sp, #256	; 0x100
   21fe6:	4405      	add	r5, r0
   21fe8:	6033      	str	r3, [r6, #0]
   21fea:	6070      	str	r0, [r6, #4]
   21fec:	953f      	str	r5, [sp, #252]	; 0xfc
   21fee:	943e      	str	r4, [sp, #248]	; 0xf8
   21ff0:	f77f aea9 	ble.w	21d46 <_svfprintf_r+0x806>
   21ff4:	9810      	ldr	r0, [sp, #64]	; 0x40
   21ff6:	4659      	mov	r1, fp
   21ff8:	aa3d      	add	r2, sp, #244	; 0xf4
   21ffa:	f002 ff8f 	bl	24f1c <__ssprint_r>
   21ffe:	2800      	cmp	r0, #0
   22000:	f47f ab92 	bne.w	21728 <_svfprintf_r+0x1e8>
   22004:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   22006:	ae23      	add	r6, sp, #140	; 0x8c
   22008:	e69e      	b.n	21d48 <_svfprintf_r+0x808>
   2200a:	46a0      	mov	r8, r4
   2200c:	461c      	mov	r4, r3
   2200e:	3401      	adds	r4, #1
   22010:	f8c6 8000 	str.w	r8, [r6]
   22014:	2c07      	cmp	r4, #7
   22016:	6077      	str	r7, [r6, #4]
   22018:	443d      	add	r5, r7
   2201a:	943e      	str	r4, [sp, #248]	; 0xf8
   2201c:	953f      	str	r5, [sp, #252]	; 0xfc
   2201e:	dddd      	ble.n	21fdc <_svfprintf_r+0xa9c>
   22020:	9810      	ldr	r0, [sp, #64]	; 0x40
   22022:	4659      	mov	r1, fp
   22024:	aa3d      	add	r2, sp, #244	; 0xf4
   22026:	f002 ff79 	bl	24f1c <__ssprint_r>
   2202a:	2800      	cmp	r0, #0
   2202c:	f47f ab7c 	bne.w	21728 <_svfprintf_r+0x1e8>
   22030:	ae23      	add	r6, sp, #140	; 0x8c
   22032:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   22034:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   22036:	e7d2      	b.n	21fde <_svfprintf_r+0xa9e>
   22038:	9810      	ldr	r0, [sp, #64]	; 0x40
   2203a:	4659      	mov	r1, fp
   2203c:	aa3d      	add	r2, sp, #244	; 0xf4
   2203e:	f002 ff6d 	bl	24f1c <__ssprint_r>
   22042:	2800      	cmp	r0, #0
   22044:	f43f aecf 	beq.w	21de6 <_svfprintf_r+0x8a6>
   22048:	f7ff bb6e 	b.w	21728 <_svfprintf_r+0x1e8>
   2204c:	930e      	str	r3, [sp, #56]	; 0x38
   2204e:	ab3d      	add	r3, sp, #244	; 0xf4
   22050:	9313      	str	r3, [sp, #76]	; 0x4c
   22052:	e40c      	b.n	2186e <_svfprintf_r+0x32e>
   22054:	9810      	ldr	r0, [sp, #64]	; 0x40
   22056:	4659      	mov	r1, fp
   22058:	aa3d      	add	r2, sp, #244	; 0xf4
   2205a:	f002 ff5f 	bl	24f1c <__ssprint_r>
   2205e:	2800      	cmp	r0, #0
   22060:	f47f ab62 	bne.w	21728 <_svfprintf_r+0x1e8>
   22064:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   22066:	ae23      	add	r6, sp, #140	; 0x8c
   22068:	e65f      	b.n	21d2a <_svfprintf_r+0x7ea>
   2206a:	9810      	ldr	r0, [sp, #64]	; 0x40
   2206c:	4659      	mov	r1, fp
   2206e:	aa3d      	add	r2, sp, #244	; 0xf4
   22070:	f002 ff54 	bl	24f1c <__ssprint_r>
   22074:	2800      	cmp	r0, #0
   22076:	f47f ab57 	bne.w	21728 <_svfprintf_r+0x1e8>
   2207a:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   2207c:	ae23      	add	r6, sp, #140	; 0x8c
   2207e:	e606      	b.n	21c8e <_svfprintf_r+0x74e>
   22080:	9810      	ldr	r0, [sp, #64]	; 0x40
   22082:	4659      	mov	r1, fp
   22084:	aa3d      	add	r2, sp, #244	; 0xf4
   22086:	f002 ff49 	bl	24f1c <__ssprint_r>
   2208a:	2800      	cmp	r0, #0
   2208c:	f47f ab4c 	bne.w	21728 <_svfprintf_r+0x1e8>
   22090:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   22092:	ae23      	add	r6, sp, #140	; 0x8c
   22094:	e60a      	b.n	21cac <_svfprintf_r+0x76c>
   22096:	4620      	mov	r0, r4
   22098:	4629      	mov	r1, r5
   2209a:	220a      	movs	r2, #10
   2209c:	2300      	movs	r3, #0
   2209e:	f7f1 ff1f 	bl	13ee0 <__aeabi_uldivmod>
   220a2:	4646      	mov	r6, r8
   220a4:	4620      	mov	r0, r4
   220a6:	4629      	mov	r1, r5
   220a8:	2300      	movs	r3, #0
   220aa:	f108 38ff 	add.w	r8, r8, #4294967295
   220ae:	f102 0430 	add.w	r4, r2, #48	; 0x30
   220b2:	220a      	movs	r2, #10
   220b4:	7034      	strb	r4, [r6, #0]
   220b6:	f7f1 ff13 	bl	13ee0 <__aeabi_uldivmod>
   220ba:	4604      	mov	r4, r0
   220bc:	460d      	mov	r5, r1
   220be:	ea54 0305 	orrs.w	r3, r4, r5
   220c2:	d1e8      	bne.n	22096 <_svfprintf_r+0xb56>
   220c4:	9613      	str	r6, [sp, #76]	; 0x4c
   220c6:	464e      	mov	r6, r9
   220c8:	9809      	ldr	r0, [sp, #36]	; 0x24
   220ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   220cc:	1ac3      	subs	r3, r0, r3
   220ce:	930e      	str	r3, [sp, #56]	; 0x38
   220d0:	f7ff bbcd 	b.w	2186e <_svfprintf_r+0x32e>
   220d4:	9f44      	ldr	r7, [sp, #272]	; 0x110
   220d6:	2f00      	cmp	r7, #0
   220d8:	f340 81d7 	ble.w	2248a <_svfprintf_r+0xf4a>
   220dc:	9f12      	ldr	r7, [sp, #72]	; 0x48
   220de:	991a      	ldr	r1, [sp, #104]	; 0x68
   220e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   220e2:	428f      	cmp	r7, r1
   220e4:	bfa8      	it	ge
   220e6:	460f      	movge	r7, r1
   220e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   220ea:	2f00      	cmp	r7, #0
   220ec:	441a      	add	r2, r3
   220ee:	920e      	str	r2, [sp, #56]	; 0x38
   220f0:	dd0b      	ble.n	2210a <_svfprintf_r+0xbca>
   220f2:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   220f4:	19ed      	adds	r5, r5, r7
   220f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   220f8:	3401      	adds	r4, #1
   220fa:	6077      	str	r7, [r6, #4]
   220fc:	2c07      	cmp	r4, #7
   220fe:	6033      	str	r3, [r6, #0]
   22100:	953f      	str	r5, [sp, #252]	; 0xfc
   22102:	943e      	str	r4, [sp, #248]	; 0xf8
   22104:	f300 8384 	bgt.w	22810 <_svfprintf_r+0x12d0>
   22108:	3608      	adds	r6, #8
   2210a:	981a      	ldr	r0, [sp, #104]	; 0x68
   2210c:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
   22110:	1bc7      	subs	r7, r0, r7
   22112:	2f00      	cmp	r7, #0
   22114:	f340 80ae 	ble.w	22274 <_svfprintf_r+0xd34>
   22118:	2f10      	cmp	r7, #16
   2211a:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   2211c:	bfd8      	it	le
   2211e:	f8df 85e0 	ldrle.w	r8, [pc, #1504]	; 22700 <_svfprintf_r+0x11c0>
   22122:	f340 8170 	ble.w	22406 <_svfprintf_r+0xec6>
   22126:	f8df 85d8 	ldr.w	r8, [pc, #1496]	; 22700 <_svfprintf_r+0x11c0>
   2212a:	4623      	mov	r3, r4
   2212c:	f04f 0910 	mov.w	r9, #16
   22130:	4644      	mov	r4, r8
   22132:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   22136:	e003      	b.n	22140 <_svfprintf_r+0xc00>
   22138:	3f10      	subs	r7, #16
   2213a:	2f10      	cmp	r7, #16
   2213c:	f340 8161 	ble.w	22402 <_svfprintf_r+0xec2>
   22140:	3301      	adds	r3, #1
   22142:	e886 0210 	stmia.w	r6, {r4, r9}
   22146:	3510      	adds	r5, #16
   22148:	3608      	adds	r6, #8
   2214a:	2b07      	cmp	r3, #7
   2214c:	933e      	str	r3, [sp, #248]	; 0xf8
   2214e:	953f      	str	r5, [sp, #252]	; 0xfc
   22150:	ddf2      	ble.n	22138 <_svfprintf_r+0xbf8>
   22152:	4640      	mov	r0, r8
   22154:	4659      	mov	r1, fp
   22156:	aa3d      	add	r2, sp, #244	; 0xf4
   22158:	ae23      	add	r6, sp, #140	; 0x8c
   2215a:	f002 fedf 	bl	24f1c <__ssprint_r>
   2215e:	2800      	cmp	r0, #0
   22160:	f47f aae2 	bne.w	21728 <_svfprintf_r+0x1e8>
   22164:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   22166:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
   22168:	e7e6      	b.n	22138 <_svfprintf_r+0xbf8>
   2216a:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
   2216e:	f10d 02f3 	add.w	r2, sp, #243	; 0xf3
   22172:	46b4      	mov	ip, r6
   22174:	f004 010f 	and.w	r1, r4, #15
   22178:	0923      	lsrs	r3, r4, #4
   2217a:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   2217e:	092e      	lsrs	r6, r5, #4
   22180:	f818 0001 	ldrb.w	r0, [r8, r1]
   22184:	461c      	mov	r4, r3
   22186:	4635      	mov	r5, r6
   22188:	4611      	mov	r1, r2
   2218a:	3a01      	subs	r2, #1
   2218c:	ea54 0305 	orrs.w	r3, r4, r5
   22190:	7008      	strb	r0, [r1, #0]
   22192:	d1ef      	bne.n	22174 <_svfprintf_r+0xc34>
   22194:	9b09      	ldr	r3, [sp, #36]	; 0x24
   22196:	4666      	mov	r6, ip
   22198:	9113      	str	r1, [sp, #76]	; 0x4c
   2219a:	1a5b      	subs	r3, r3, r1
   2219c:	930e      	str	r3, [sp, #56]	; 0x38
   2219e:	f7ff bb66 	b.w	2186e <_svfprintf_r+0x32e>
   221a2:	2c0a      	cmp	r4, #10
   221a4:	f175 0000 	sbcs.w	r0, r5, #0
   221a8:	bf24      	itt	cs
   221aa:	f10d 08f3 	addcs.w	r8, sp, #243	; 0xf3
   221ae:	46b1      	movcs	r9, r6
   221b0:	f4bf af71 	bcs.w	22096 <_svfprintf_r+0xb56>
   221b4:	9921      	ldr	r1, [sp, #132]	; 0x84
   221b6:	3430      	adds	r4, #48	; 0x30
   221b8:	f10d 02f3 	add.w	r2, sp, #243	; 0xf3
   221bc:	f88d 40f3 	strb.w	r4, [sp, #243]	; 0xf3
   221c0:	9213      	str	r2, [sp, #76]	; 0x4c
   221c2:	910e      	str	r1, [sp, #56]	; 0x38
   221c4:	f7ff bb53 	b.w	2186e <_svfprintf_r+0x32e>
   221c8:	9810      	ldr	r0, [sp, #64]	; 0x40
   221ca:	4659      	mov	r1, fp
   221cc:	aa3d      	add	r2, sp, #244	; 0xf4
   221ce:	f002 fea5 	bl	24f1c <__ssprint_r>
   221d2:	2800      	cmp	r0, #0
   221d4:	f47f aaa8 	bne.w	21728 <_svfprintf_r+0x1e8>
   221d8:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   221da:	ae23      	add	r6, sp, #140	; 0x8c
   221dc:	e546      	b.n	21c6c <_svfprintf_r+0x72c>
   221de:	9a12      	ldr	r2, [sp, #72]	; 0x48
   221e0:	1e57      	subs	r7, r2, #1
   221e2:	2f00      	cmp	r7, #0
   221e4:	f77f aefb 	ble.w	21fde <_svfprintf_r+0xa9e>
   221e8:	2f10      	cmp	r7, #16
   221ea:	f8df 8514 	ldr.w	r8, [pc, #1300]	; 22700 <_svfprintf_r+0x11c0>
   221ee:	f77f af0e 	ble.w	2200e <_svfprintf_r+0xace>
   221f2:	4623      	mov	r3, r4
   221f4:	f04f 0910 	mov.w	r9, #16
   221f8:	4644      	mov	r4, r8
   221fa:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   221fe:	e003      	b.n	22208 <_svfprintf_r+0xcc8>
   22200:	3f10      	subs	r7, #16
   22202:	2f10      	cmp	r7, #16
   22204:	f77f af01 	ble.w	2200a <_svfprintf_r+0xaca>
   22208:	3301      	adds	r3, #1
   2220a:	e886 0210 	stmia.w	r6, {r4, r9}
   2220e:	3510      	adds	r5, #16
   22210:	3608      	adds	r6, #8
   22212:	2b07      	cmp	r3, #7
   22214:	933e      	str	r3, [sp, #248]	; 0xf8
   22216:	953f      	str	r5, [sp, #252]	; 0xfc
   22218:	ddf2      	ble.n	22200 <_svfprintf_r+0xcc0>
   2221a:	4640      	mov	r0, r8
   2221c:	4659      	mov	r1, fp
   2221e:	aa3d      	add	r2, sp, #244	; 0xf4
   22220:	ae23      	add	r6, sp, #140	; 0x8c
   22222:	f002 fe7b 	bl	24f1c <__ssprint_r>
   22226:	2800      	cmp	r0, #0
   22228:	f47f aa7e 	bne.w	21728 <_svfprintf_r+0x1e8>
   2222c:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   2222e:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
   22230:	e7e6      	b.n	22200 <_svfprintf_r+0xcc0>
   22232:	2202      	movs	r2, #2
   22234:	f7ff bbd0 	b.w	219d8 <_svfprintf_r+0x498>
   22238:	9911      	ldr	r1, [sp, #68]	; 0x44
   2223a:	2201      	movs	r2, #1
   2223c:	680b      	ldr	r3, [r1, #0]
   2223e:	3104      	adds	r1, #4
   22240:	9111      	str	r1, [sp, #68]	; 0x44
   22242:	461c      	mov	r4, r3
   22244:	3300      	adds	r3, #0
   22246:	bf18      	it	ne
   22248:	2301      	movne	r3, #1
   2224a:	2500      	movs	r5, #0
   2224c:	f7ff bbc4 	b.w	219d8 <_svfprintf_r+0x498>
   22250:	9811      	ldr	r0, [sp, #68]	; 0x44
   22252:	2500      	movs	r5, #0
   22254:	6803      	ldr	r3, [r0, #0]
   22256:	3004      	adds	r0, #4
   22258:	9011      	str	r0, [sp, #68]	; 0x44
   2225a:	461c      	mov	r4, r3
   2225c:	f7ff bbe0 	b.w	21a20 <_svfprintf_r+0x4e0>
   22260:	9810      	ldr	r0, [sp, #64]	; 0x40
   22262:	4659      	mov	r1, fp
   22264:	aa3d      	add	r2, sp, #244	; 0xf4
   22266:	f002 fe59 	bl	24f1c <__ssprint_r>
   2226a:	2800      	cmp	r0, #0
   2226c:	f47f aa5c 	bne.w	21728 <_svfprintf_r+0x1e8>
   22270:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   22272:	ae23      	add	r6, sp, #140	; 0x8c
   22274:	9b44      	ldr	r3, [sp, #272]	; 0x110
   22276:	9912      	ldr	r1, [sp, #72]	; 0x48
   22278:	4299      	cmp	r1, r3
   2227a:	dc45      	bgt.n	22308 <_svfprintf_r+0xdc8>
   2227c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2227e:	07d1      	lsls	r1, r2, #31
   22280:	d442      	bmi.n	22308 <_svfprintf_r+0xdc8>
   22282:	9813      	ldr	r0, [sp, #76]	; 0x4c
   22284:	991a      	ldr	r1, [sp, #104]	; 0x68
   22286:	1842      	adds	r2, r0, r1
   22288:	9812      	ldr	r0, [sp, #72]	; 0x48
   2228a:	990e      	ldr	r1, [sp, #56]	; 0x38
   2228c:	1ac3      	subs	r3, r0, r3
   2228e:	1a8f      	subs	r7, r1, r2
   22290:	42bb      	cmp	r3, r7
   22292:	bfb8      	it	lt
   22294:	461f      	movlt	r7, r3
   22296:	2f00      	cmp	r7, #0
   22298:	dd0a      	ble.n	222b0 <_svfprintf_r+0xd70>
   2229a:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   2229c:	19ed      	adds	r5, r5, r7
   2229e:	6032      	str	r2, [r6, #0]
   222a0:	3401      	adds	r4, #1
   222a2:	6077      	str	r7, [r6, #4]
   222a4:	2c07      	cmp	r4, #7
   222a6:	953f      	str	r5, [sp, #252]	; 0xfc
   222a8:	943e      	str	r4, [sp, #248]	; 0xf8
   222aa:	f300 82d5 	bgt.w	22858 <_svfprintf_r+0x1318>
   222ae:	3608      	adds	r6, #8
   222b0:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
   222b4:	1bdf      	subs	r7, r3, r7
   222b6:	2f00      	cmp	r7, #0
   222b8:	f77f ad46 	ble.w	21d48 <_svfprintf_r+0x808>
   222bc:	2f10      	cmp	r7, #16
   222be:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   222c0:	f340 834b 	ble.w	2295a <_svfprintf_r+0x141a>
   222c4:	f8df 8438 	ldr.w	r8, [pc, #1080]	; 22700 <_svfprintf_r+0x11c0>
   222c8:	4623      	mov	r3, r4
   222ca:	f04f 0910 	mov.w	r9, #16
   222ce:	4644      	mov	r4, r8
   222d0:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   222d4:	e003      	b.n	222de <_svfprintf_r+0xd9e>
   222d6:	3f10      	subs	r7, #16
   222d8:	2f10      	cmp	r7, #16
   222da:	f77f ad89 	ble.w	21df0 <_svfprintf_r+0x8b0>
   222de:	3301      	adds	r3, #1
   222e0:	e886 0210 	stmia.w	r6, {r4, r9}
   222e4:	3510      	adds	r5, #16
   222e6:	3608      	adds	r6, #8
   222e8:	2b07      	cmp	r3, #7
   222ea:	933e      	str	r3, [sp, #248]	; 0xf8
   222ec:	953f      	str	r5, [sp, #252]	; 0xfc
   222ee:	ddf2      	ble.n	222d6 <_svfprintf_r+0xd96>
   222f0:	4640      	mov	r0, r8
   222f2:	4659      	mov	r1, fp
   222f4:	aa3d      	add	r2, sp, #244	; 0xf4
   222f6:	ae23      	add	r6, sp, #140	; 0x8c
   222f8:	f002 fe10 	bl	24f1c <__ssprint_r>
   222fc:	2800      	cmp	r0, #0
   222fe:	f47f aa13 	bne.w	21728 <_svfprintf_r+0x1e8>
   22302:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   22304:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
   22306:	e7e6      	b.n	222d6 <_svfprintf_r+0xd96>
   22308:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   2230a:	981c      	ldr	r0, [sp, #112]	; 0x70
   2230c:	3401      	adds	r4, #1
   2230e:	991b      	ldr	r1, [sp, #108]	; 0x6c
   22310:	2c07      	cmp	r4, #7
   22312:	4405      	add	r5, r0
   22314:	6070      	str	r0, [r6, #4]
   22316:	6031      	str	r1, [r6, #0]
   22318:	953f      	str	r5, [sp, #252]	; 0xfc
   2231a:	943e      	str	r4, [sp, #248]	; 0xf8
   2231c:	f300 8290 	bgt.w	22840 <_svfprintf_r+0x1300>
   22320:	3608      	adds	r6, #8
   22322:	e7ae      	b.n	22282 <_svfprintf_r+0xd42>
   22324:	980a      	ldr	r0, [sp, #40]	; 0x28
   22326:	07c2      	lsls	r2, r0, #31
   22328:	f53f ae2a 	bmi.w	21f80 <_svfprintf_r+0xa40>
   2232c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2232e:	3401      	adds	r4, #1
   22330:	3501      	adds	r5, #1
   22332:	6033      	str	r3, [r6, #0]
   22334:	2301      	movs	r3, #1
   22336:	2c07      	cmp	r4, #7
   22338:	6073      	str	r3, [r6, #4]
   2233a:	953f      	str	r5, [sp, #252]	; 0xfc
   2233c:	943e      	str	r4, [sp, #248]	; 0xf8
   2233e:	f77f ae4d 	ble.w	21fdc <_svfprintf_r+0xa9c>
   22342:	9810      	ldr	r0, [sp, #64]	; 0x40
   22344:	4659      	mov	r1, fp
   22346:	aa3d      	add	r2, sp, #244	; 0xf4
   22348:	f002 fde8 	bl	24f1c <__ssprint_r>
   2234c:	2800      	cmp	r0, #0
   2234e:	f47f a9eb 	bne.w	21728 <_svfprintf_r+0x1e8>
   22352:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   22354:	ae23      	add	r6, sp, #140	; 0x8c
   22356:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   22358:	e641      	b.n	21fde <_svfprintf_r+0xa9e>
   2235a:	9810      	ldr	r0, [sp, #64]	; 0x40
   2235c:	4659      	mov	r1, fp
   2235e:	aa3d      	add	r2, sp, #244	; 0xf4
   22360:	f002 fddc 	bl	24f1c <__ssprint_r>
   22364:	2800      	cmp	r0, #0
   22366:	f47f a9df 	bne.w	21728 <_svfprintf_r+0x1e8>
   2236a:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   2236c:	ae23      	add	r6, sp, #140	; 0x8c
   2236e:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   22370:	e612      	b.n	21f98 <_svfprintf_r+0xa58>
   22372:	9810      	ldr	r0, [sp, #64]	; 0x40
   22374:	4659      	mov	r1, fp
   22376:	aa3d      	add	r2, sp, #244	; 0xf4
   22378:	f002 fdd0 	bl	24f1c <__ssprint_r>
   2237c:	2800      	cmp	r0, #0
   2237e:	f47f a9d3 	bne.w	21728 <_svfprintf_r+0x1e8>
   22382:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   22384:	ae23      	add	r6, sp, #140	; 0x8c
   22386:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   22388:	e612      	b.n	21fb0 <_svfprintf_r+0xa70>
   2238a:	9810      	ldr	r0, [sp, #64]	; 0x40
   2238c:	4659      	mov	r1, fp
   2238e:	aa3d      	add	r2, sp, #244	; 0xf4
   22390:	f002 fdc4 	bl	24f1c <__ssprint_r>
   22394:	2800      	cmp	r0, #0
   22396:	f47f a9c7 	bne.w	21728 <_svfprintf_r+0x1e8>
   2239a:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   2239c:	ae23      	add	r6, sp, #140	; 0x8c
   2239e:	e489      	b.n	21cb4 <_svfprintf_r+0x774>
   223a0:	4264      	negs	r4, r4
   223a2:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   223a6:	232d      	movs	r3, #45	; 0x2d
   223a8:	ea54 0205 	orrs.w	r2, r4, r5
   223ac:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
   223b0:	bf0c      	ite	eq
   223b2:	2300      	moveq	r3, #0
   223b4:	2301      	movne	r3, #1
   223b6:	2201      	movs	r2, #1
   223b8:	f7ff ba20 	b.w	217fc <_svfprintf_r+0x2bc>
   223bc:	4629      	mov	r1, r5
   223be:	f7fd fad5 	bl	1f96c <__fpclassifyd>
   223c2:	2800      	cmp	r0, #0
   223c4:	f040 80ba 	bne.w	2253c <_svfprintf_r+0xffc>
   223c8:	9014      	str	r0, [sp, #80]	; 0x50
   223ca:	f64c 7378 	movw	r3, #53112	; 0xcf78
   223ce:	9817      	ldr	r0, [sp, #92]	; 0x5c
   223d0:	f2c0 0302 	movt	r3, #2
   223d4:	9a18      	ldr	r2, [sp, #96]	; 0x60
   223d6:	2103      	movs	r1, #3
   223d8:	910b      	str	r1, [sp, #44]	; 0x2c
   223da:	2847      	cmp	r0, #71	; 0x47
   223dc:	bfd8      	it	le
   223de:	461a      	movle	r2, r3
   223e0:	9814      	ldr	r0, [sp, #80]	; 0x50
   223e2:	990a      	ldr	r1, [sp, #40]	; 0x28
   223e4:	9213      	str	r2, [sp, #76]	; 0x4c
   223e6:	2203      	movs	r2, #3
   223e8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
   223ec:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
   223f0:	910a      	str	r1, [sp, #40]	; 0x28
   223f2:	920e      	str	r2, [sp, #56]	; 0x38
   223f4:	901a      	str	r0, [sp, #104]	; 0x68
   223f6:	f7ff ba44 	b.w	21882 <_svfprintf_r+0x342>
   223fa:	f89a 3000 	ldrb.w	r3, [sl]
   223fe:	f7ff b917 	b.w	21630 <_svfprintf_r+0xf0>
   22402:	46a0      	mov	r8, r4
   22404:	461c      	mov	r4, r3
   22406:	3401      	adds	r4, #1
   22408:	f8c6 8000 	str.w	r8, [r6]
   2240c:	2c07      	cmp	r4, #7
   2240e:	6077      	str	r7, [r6, #4]
   22410:	443d      	add	r5, r7
   22412:	943e      	str	r4, [sp, #248]	; 0xf8
   22414:	953f      	str	r5, [sp, #252]	; 0xfc
   22416:	f73f af23 	bgt.w	22260 <_svfprintf_r+0xd20>
   2241a:	3608      	adds	r6, #8
   2241c:	e72a      	b.n	22274 <_svfprintf_r+0xd34>
   2241e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   22420:	06d3      	lsls	r3, r2, #27
   22422:	d57f      	bpl.n	22524 <_svfprintf_r+0xfe4>
   22424:	9811      	ldr	r0, [sp, #68]	; 0x44
   22426:	990d      	ldr	r1, [sp, #52]	; 0x34
   22428:	6803      	ldr	r3, [r0, #0]
   2242a:	3004      	adds	r0, #4
   2242c:	9011      	str	r0, [sp, #68]	; 0x44
   2242e:	6019      	str	r1, [r3, #0]
   22430:	f7ff b8bc 	b.w	215ac <_svfprintf_r+0x6c>
   22434:	980a      	ldr	r0, [sp, #40]	; 0x28
   22436:	f010 0240 	ands.w	r2, r0, #64	; 0x40
   2243a:	f000 8163 	beq.w	22704 <_svfprintf_r+0x11c4>
   2243e:	9911      	ldr	r1, [sp, #68]	; 0x44
   22440:	2500      	movs	r5, #0
   22442:	461a      	mov	r2, r3
   22444:	880c      	ldrh	r4, [r1, #0]
   22446:	3104      	adds	r1, #4
   22448:	9111      	str	r1, [sp, #68]	; 0x44
   2244a:	ea54 0305 	orrs.w	r3, r4, r5
   2244e:	bf0c      	ite	eq
   22450:	2300      	moveq	r3, #0
   22452:	2301      	movne	r3, #1
   22454:	f7ff bac0 	b.w	219d8 <_svfprintf_r+0x498>
   22458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2245a:	0659      	lsls	r1, r3, #25
   2245c:	f140 815d 	bpl.w	2271a <_svfprintf_r+0x11da>
   22460:	9811      	ldr	r0, [sp, #68]	; 0x44
   22462:	f9b0 4000 	ldrsh.w	r4, [r0]
   22466:	3004      	adds	r0, #4
   22468:	9011      	str	r0, [sp, #68]	; 0x44
   2246a:	4622      	mov	r2, r4
   2246c:	17e5      	asrs	r5, r4, #31
   2246e:	462b      	mov	r3, r5
   22470:	f7ff b9b8 	b.w	217e4 <_svfprintf_r+0x2a4>
   22474:	9810      	ldr	r0, [sp, #64]	; 0x40
   22476:	4659      	mov	r1, fp
   22478:	aa3d      	add	r2, sp, #244	; 0xf4
   2247a:	f002 fd4f 	bl	24f1c <__ssprint_r>
   2247e:	2800      	cmp	r0, #0
   22480:	f47f a952 	bne.w	21728 <_svfprintf_r+0x1e8>
   22484:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   22486:	ae23      	add	r6, sp, #140	; 0x8c
   22488:	e4e5      	b.n	21e56 <_svfprintf_r+0x916>
   2248a:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   2248c:	f64c 73b0 	movw	r3, #53168	; 0xcfb0
   22490:	f2c0 0302 	movt	r3, #2
   22494:	6033      	str	r3, [r6, #0]
   22496:	3401      	adds	r4, #1
   22498:	2301      	movs	r3, #1
   2249a:	2c07      	cmp	r4, #7
   2249c:	6073      	str	r3, [r6, #4]
   2249e:	441d      	add	r5, r3
   224a0:	943e      	str	r4, [sp, #248]	; 0xf8
   224a2:	953f      	str	r5, [sp, #252]	; 0xfc
   224a4:	f300 8167 	bgt.w	22776 <_svfprintf_r+0x1236>
   224a8:	3608      	adds	r6, #8
   224aa:	b92f      	cbnz	r7, 224b8 <_svfprintf_r+0xf78>
   224ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
   224ae:	b91b      	cbnz	r3, 224b8 <_svfprintf_r+0xf78>
   224b0:	980a      	ldr	r0, [sp, #40]	; 0x28
   224b2:	07c0      	lsls	r0, r0, #31
   224b4:	f57f ac48 	bpl.w	21d48 <_svfprintf_r+0x808>
   224b8:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   224ba:	991c      	ldr	r1, [sp, #112]	; 0x70
   224bc:	3401      	adds	r4, #1
   224be:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   224c0:	2c07      	cmp	r4, #7
   224c2:	440d      	add	r5, r1
   224c4:	6071      	str	r1, [r6, #4]
   224c6:	6032      	str	r2, [r6, #0]
   224c8:	953f      	str	r5, [sp, #252]	; 0xfc
   224ca:	943e      	str	r4, [sp, #248]	; 0xf8
   224cc:	f300 8215 	bgt.w	228fa <_svfprintf_r+0x13ba>
   224d0:	3608      	adds	r6, #8
   224d2:	427f      	negs	r7, r7
   224d4:	2f00      	cmp	r7, #0
   224d6:	f340 8180 	ble.w	227da <_svfprintf_r+0x129a>
   224da:	2f10      	cmp	r7, #16
   224dc:	f8df 8220 	ldr.w	r8, [pc, #544]	; 22700 <_svfprintf_r+0x11c0>
   224e0:	f340 81a3 	ble.w	2282a <_svfprintf_r+0x12ea>
   224e4:	4623      	mov	r3, r4
   224e6:	f04f 0910 	mov.w	r9, #16
   224ea:	4644      	mov	r4, r8
   224ec:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   224f0:	e003      	b.n	224fa <_svfprintf_r+0xfba>
   224f2:	3f10      	subs	r7, #16
   224f4:	2f10      	cmp	r7, #16
   224f6:	f340 8196 	ble.w	22826 <_svfprintf_r+0x12e6>
   224fa:	3301      	adds	r3, #1
   224fc:	e886 0210 	stmia.w	r6, {r4, r9}
   22500:	3510      	adds	r5, #16
   22502:	3608      	adds	r6, #8
   22504:	2b07      	cmp	r3, #7
   22506:	933e      	str	r3, [sp, #248]	; 0xf8
   22508:	953f      	str	r5, [sp, #252]	; 0xfc
   2250a:	ddf2      	ble.n	224f2 <_svfprintf_r+0xfb2>
   2250c:	4640      	mov	r0, r8
   2250e:	4659      	mov	r1, fp
   22510:	aa3d      	add	r2, sp, #244	; 0xf4
   22512:	ae23      	add	r6, sp, #140	; 0x8c
   22514:	f002 fd02 	bl	24f1c <__ssprint_r>
   22518:	2800      	cmp	r0, #0
   2251a:	f47f a905 	bne.w	21728 <_svfprintf_r+0x1e8>
   2251e:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   22520:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
   22522:	e7e6      	b.n	224f2 <_svfprintf_r+0xfb2>
   22524:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   22526:	0657      	lsls	r7, r2, #25
   22528:	f140 811d 	bpl.w	22766 <_svfprintf_r+0x1226>
   2252c:	9811      	ldr	r0, [sp, #68]	; 0x44
   2252e:	990d      	ldr	r1, [sp, #52]	; 0x34
   22530:	6803      	ldr	r3, [r0, #0]
   22532:	3004      	adds	r0, #4
   22534:	9011      	str	r0, [sp, #68]	; 0x44
   22536:	8019      	strh	r1, [r3, #0]
   22538:	f7ff b838 	b.w	215ac <_svfprintf_r+0x6c>
   2253c:	1c7a      	adds	r2, r7, #1
   2253e:	f000 8126 	beq.w	2278e <_svfprintf_r+0x124e>
   22542:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   22544:	f1a2 0c67 	sub.w	ip, r2, #103	; 0x67
   22548:	f1dc 0300 	rsbs	r3, ip, #0
   2254c:	eb43 030c 	adc.w	r3, r3, ip
   22550:	2a47      	cmp	r2, #71	; 0x47
   22552:	bf08      	it	eq
   22554:	f043 0301 	orreq.w	r3, r3, #1
   22558:	2b00      	cmp	r3, #0
   2255a:	f000 81cc 	beq.w	228f6 <_svfprintf_r+0x13b6>
   2255e:	2f00      	cmp	r7, #0
   22560:	f000 81e9 	beq.w	22936 <_svfprintf_r+0x13f6>
   22564:	2301      	movs	r3, #1
   22566:	930b      	str	r3, [sp, #44]	; 0x2c
   22568:	980a      	ldr	r0, [sp, #40]	; 0x28
   2256a:	2d00      	cmp	r5, #0
   2256c:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   22570:	900a      	str	r0, [sp, #40]	; 0x28
   22572:	f2c0 81cf 	blt.w	22914 <_svfprintf_r+0x13d4>
   22576:	2200      	movs	r2, #0
   22578:	9214      	str	r2, [sp, #80]	; 0x50
   2257a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   2257c:	46b9      	mov	r9, r7
   2257e:	9817      	ldr	r0, [sp, #92]	; 0x5c
   22580:	f1a3 0e66 	sub.w	lr, r3, #102	; 0x66
   22584:	f1de 0300 	rsbs	r3, lr, #0
   22588:	eb43 030e 	adc.w	r3, r3, lr
   2258c:	9315      	str	r3, [sp, #84]	; 0x54
   2258e:	469c      	mov	ip, r3
   22590:	2303      	movs	r3, #3
   22592:	2846      	cmp	r0, #70	; 0x46
   22594:	bf08      	it	eq
   22596:	f04c 0c01 	orreq.w	ip, ip, #1
   2259a:	f1bc 0f00 	cmp.w	ip, #0
   2259e:	d10e      	bne.n	225be <_svfprintf_r+0x107e>
   225a0:	f1a0 0465 	sub.w	r4, r0, #101	; 0x65
   225a4:	4263      	negs	r3, r4
   225a6:	eb43 0304 	adc.w	r3, r3, r4
   225aa:	2845      	cmp	r0, #69	; 0x45
   225ac:	bf08      	it	eq
   225ae:	f043 0301 	orreq.w	r3, r3, #1
   225b2:	2b00      	cmp	r3, #0
   225b4:	f000 81b3 	beq.w	2291e <_svfprintf_r+0x13de>
   225b8:	f107 0901 	add.w	r9, r7, #1
   225bc:	2302      	movs	r3, #2
   225be:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
   225c2:	a944      	add	r1, sp, #272	; 0x110
   225c4:	950f      	str	r5, [sp, #60]	; 0x3c
   225c6:	9300      	str	r3, [sp, #0]
   225c8:	9810      	ldr	r0, [sp, #64]	; 0x40
   225ca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   225ce:	9102      	str	r1, [sp, #8]
   225d0:	a945      	add	r1, sp, #276	; 0x114
   225d2:	f8cd c01c 	str.w	ip, [sp, #28]
   225d6:	9103      	str	r1, [sp, #12]
   225d8:	a946      	add	r1, sp, #280	; 0x118
   225da:	f8cd 9004 	str.w	r9, [sp, #4]
   225de:	9104      	str	r1, [sp, #16]
   225e0:	f000 fc4e 	bl	22e80 <_dtoa_r>
   225e4:	f8dd c01c 	ldr.w	ip, [sp, #28]
   225e8:	9013      	str	r0, [sp, #76]	; 0x4c
   225ea:	9817      	ldr	r0, [sp, #92]	; 0x5c
   225ec:	f1b0 0367 	subs.w	r3, r0, #103	; 0x67
   225f0:	bf18      	it	ne
   225f2:	2301      	movne	r3, #1
   225f4:	2847      	cmp	r0, #71	; 0x47
   225f6:	bf0c      	ite	eq
   225f8:	2300      	moveq	r3, #0
   225fa:	f003 0301 	andne.w	r3, r3, #1
   225fe:	b923      	cbnz	r3, 2260a <_svfprintf_r+0x10ca>
   22600:	990a      	ldr	r1, [sp, #40]	; 0x28
   22602:	07c9      	lsls	r1, r1, #31
   22604:	bf58      	it	pl
   22606:	9c46      	ldrpl	r4, [sp, #280]	; 0x118
   22608:	d515      	bpl.n	22636 <_svfprintf_r+0x10f6>
   2260a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2260c:	eb02 0409 	add.w	r4, r2, r9
   22610:	f1bc 0f00 	cmp.w	ip, #0
   22614:	d005      	beq.n	22622 <_svfprintf_r+0x10e2>
   22616:	7813      	ldrb	r3, [r2, #0]
   22618:	2b30      	cmp	r3, #48	; 0x30
   2261a:	f000 80c6 	beq.w	227aa <_svfprintf_r+0x126a>
   2261e:	9b44      	ldr	r3, [sp, #272]	; 0x110
   22620:	18e4      	adds	r4, r4, r3
   22622:	4640      	mov	r0, r8
   22624:	2200      	movs	r2, #0
   22626:	2300      	movs	r3, #0
   22628:	4629      	mov	r1, r5
   2262a:	f003 fb77 	bl	25d1c <__aeabi_dcmpeq>
   2262e:	2800      	cmp	r0, #0
   22630:	f000 8149 	beq.w	228c6 <_svfprintf_r+0x1386>
   22634:	9446      	str	r4, [sp, #280]	; 0x118
   22636:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   22638:	980b      	ldr	r0, [sp, #44]	; 0x2c
   2263a:	1ae4      	subs	r4, r4, r3
   2263c:	9412      	str	r4, [sp, #72]	; 0x48
   2263e:	2800      	cmp	r0, #0
   22640:	f000 8127 	beq.w	22892 <_svfprintf_r+0x1352>
   22644:	9944      	ldr	r1, [sp, #272]	; 0x110
   22646:	1cca      	adds	r2, r1, #3
   22648:	db02      	blt.n	22650 <_svfprintf_r+0x1110>
   2264a:	428f      	cmp	r7, r1
   2264c:	f280 8128 	bge.w	228a0 <_svfprintf_r+0x1360>
   22650:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   22652:	3a02      	subs	r2, #2
   22654:	9217      	str	r2, [sp, #92]	; 0x5c
   22656:	3901      	subs	r1, #1
   22658:	9817      	ldr	r0, [sp, #92]	; 0x5c
   2265a:	2900      	cmp	r1, #0
   2265c:	9144      	str	r1, [sp, #272]	; 0x110
   2265e:	f88d 0100 	strb.w	r0, [sp, #256]	; 0x100
   22662:	f2c0 81a2 	blt.w	229aa <_svfprintf_r+0x146a>
   22666:	232b      	movs	r3, #43	; 0x2b
   22668:	f88d 3101 	strb.w	r3, [sp, #257]	; 0x101
   2266c:	2909      	cmp	r1, #9
   2266e:	f340 8159 	ble.w	22924 <_svfprintf_r+0x13e4>
   22672:	ad43      	add	r5, sp, #268	; 0x10c
   22674:	9f1d      	ldr	r7, [sp, #116]	; 0x74
   22676:	3503      	adds	r5, #3
   22678:	4628      	mov	r0, r5
   2267a:	fb87 3201 	smull	r3, r2, r7, r1
   2267e:	17cb      	asrs	r3, r1, #31
   22680:	4604      	mov	r4, r0
   22682:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
   22686:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   2268a:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
   2268e:	4619      	mov	r1, r3
   22690:	3230      	adds	r2, #48	; 0x30
   22692:	2b09      	cmp	r3, #9
   22694:	f800 2d01 	strb.w	r2, [r0, #-1]!
   22698:	dcef      	bgt.n	2267a <_svfprintf_r+0x113a>
   2269a:	4622      	mov	r2, r4
   2269c:	f103 0130 	add.w	r1, r3, #48	; 0x30
   226a0:	f802 1d02 	strb.w	r1, [r2, #-2]!
   226a4:	4295      	cmp	r5, r2
   226a6:	bf98      	it	ls
   226a8:	f50d 7181 	addls.w	r1, sp, #258	; 0x102
   226ac:	d90b      	bls.n	226c6 <_svfprintf_r+0x1186>
   226ae:	f50d 7381 	add.w	r3, sp, #258	; 0x102
   226b2:	f50d 7087 	add.w	r0, sp, #270	; 0x10e
   226b6:	e001      	b.n	226bc <_svfprintf_r+0x117c>
   226b8:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   226bc:	4282      	cmp	r2, r0
   226be:	f803 1b01 	strb.w	r1, [r3], #1
   226c2:	4619      	mov	r1, r3
   226c4:	d1f8      	bne.n	226b8 <_svfprintf_r+0x1178>
   226c6:	9812      	ldr	r0, [sp, #72]	; 0x48
   226c8:	ab40      	add	r3, sp, #256	; 0x100
   226ca:	1acb      	subs	r3, r1, r3
   226cc:	9320      	str	r3, [sp, #128]	; 0x80
   226ce:	2801      	cmp	r0, #1
   226d0:	4403      	add	r3, r0
   226d2:	930e      	str	r3, [sp, #56]	; 0x38
   226d4:	f340 815e 	ble.w	22994 <_svfprintf_r+0x1454>
   226d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   226da:	2000      	movs	r0, #0
   226dc:	901a      	str	r0, [sp, #104]	; 0x68
   226de:	3301      	adds	r3, #1
   226e0:	930e      	str	r3, [sp, #56]	; 0x38
   226e2:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   226e6:	910b      	str	r1, [sp, #44]	; 0x2c
   226e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   226ea:	2b00      	cmp	r3, #0
   226ec:	f000 80e7 	beq.w	228be <_svfprintf_r+0x137e>
   226f0:	2300      	movs	r3, #0
   226f2:	9314      	str	r3, [sp, #80]	; 0x50
   226f4:	232d      	movs	r3, #45	; 0x2d
   226f6:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
   226fa:	f7ff b8c3 	b.w	21884 <_svfprintf_r+0x344>
   226fe:	bf00      	nop
   22700:	0002cf60 	.word	0x0002cf60
   22704:	9811      	ldr	r0, [sp, #68]	; 0x44
   22706:	6803      	ldr	r3, [r0, #0]
   22708:	3004      	adds	r0, #4
   2270a:	9011      	str	r0, [sp, #68]	; 0x44
   2270c:	461c      	mov	r4, r3
   2270e:	3300      	adds	r3, #0
   22710:	bf18      	it	ne
   22712:	2301      	movne	r3, #1
   22714:	2500      	movs	r5, #0
   22716:	f7ff b95f 	b.w	219d8 <_svfprintf_r+0x498>
   2271a:	9911      	ldr	r1, [sp, #68]	; 0x44
   2271c:	680b      	ldr	r3, [r1, #0]
   2271e:	3104      	adds	r1, #4
   22720:	9111      	str	r1, [sp, #68]	; 0x44
   22722:	461c      	mov	r4, r3
   22724:	461a      	mov	r2, r3
   22726:	17dd      	asrs	r5, r3, #31
   22728:	462b      	mov	r3, r5
   2272a:	f7ff b85b 	b.w	217e4 <_svfprintf_r+0x2a4>
   2272e:	9810      	ldr	r0, [sp, #64]	; 0x40
   22730:	4659      	mov	r1, fp
   22732:	aa3d      	add	r2, sp, #244	; 0xf4
   22734:	f002 fbf2 	bl	24f1c <__ssprint_r>
   22738:	2800      	cmp	r0, #0
   2273a:	f47e aff5 	bne.w	21728 <_svfprintf_r+0x1e8>
   2273e:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   22740:	ae23      	add	r6, sp, #140	; 0x8c
   22742:	f7ff bb9d 	b.w	21e80 <_svfprintf_r+0x940>
   22746:	9810      	ldr	r0, [sp, #64]	; 0x40
   22748:	2140      	movs	r1, #64	; 0x40
   2274a:	f7fd fc3f 	bl	1ffcc <_malloc_r>
   2274e:	f8cb 0000 	str.w	r0, [fp]
   22752:	f8cb 0010 	str.w	r0, [fp, #16]
   22756:	2800      	cmp	r0, #0
   22758:	f000 8150 	beq.w	229fc <_svfprintf_r+0x14bc>
   2275c:	2340      	movs	r3, #64	; 0x40
   2275e:	f8cb 3014 	str.w	r3, [fp, #20]
   22762:	f7fe bf08 	b.w	21576 <_svfprintf_r+0x36>
   22766:	9a11      	ldr	r2, [sp, #68]	; 0x44
   22768:	980d      	ldr	r0, [sp, #52]	; 0x34
   2276a:	6813      	ldr	r3, [r2, #0]
   2276c:	3204      	adds	r2, #4
   2276e:	9211      	str	r2, [sp, #68]	; 0x44
   22770:	6018      	str	r0, [r3, #0]
   22772:	f7fe bf1b 	b.w	215ac <_svfprintf_r+0x6c>
   22776:	9810      	ldr	r0, [sp, #64]	; 0x40
   22778:	4659      	mov	r1, fp
   2277a:	aa3d      	add	r2, sp, #244	; 0xf4
   2277c:	f002 fbce 	bl	24f1c <__ssprint_r>
   22780:	2800      	cmp	r0, #0
   22782:	f47e afd1 	bne.w	21728 <_svfprintf_r+0x1e8>
   22786:	9f44      	ldr	r7, [sp, #272]	; 0x110
   22788:	ae23      	add	r6, sp, #140	; 0x8c
   2278a:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   2278c:	e68d      	b.n	224aa <_svfprintf_r+0xf6a>
   2278e:	9917      	ldr	r1, [sp, #92]	; 0x5c
   22790:	f1a1 0967 	sub.w	r9, r1, #103	; 0x67
   22794:	f1d9 0300 	rsbs	r3, r9, #0
   22798:	eb43 0309 	adc.w	r3, r3, r9
   2279c:	2706      	movs	r7, #6
   2279e:	2947      	cmp	r1, #71	; 0x47
   227a0:	bf08      	it	eq
   227a2:	f043 0301 	orreq.w	r3, r3, #1
   227a6:	930b      	str	r3, [sp, #44]	; 0x2c
   227a8:	e6de      	b.n	22568 <_svfprintf_r+0x1028>
   227aa:	4640      	mov	r0, r8
   227ac:	2200      	movs	r2, #0
   227ae:	2300      	movs	r3, #0
   227b0:	4629      	mov	r1, r5
   227b2:	f003 fab3 	bl	25d1c <__aeabi_dcmpeq>
   227b6:	2800      	cmp	r0, #0
   227b8:	f47f af31 	bne.w	2261e <_svfprintf_r+0x10de>
   227bc:	f1c9 0301 	rsb	r3, r9, #1
   227c0:	9344      	str	r3, [sp, #272]	; 0x110
   227c2:	e72d      	b.n	22620 <_svfprintf_r+0x10e0>
   227c4:	9810      	ldr	r0, [sp, #64]	; 0x40
   227c6:	4659      	mov	r1, fp
   227c8:	aa3d      	add	r2, sp, #244	; 0xf4
   227ca:	f002 fba7 	bl	24f1c <__ssprint_r>
   227ce:	2800      	cmp	r0, #0
   227d0:	f47e afaa 	bne.w	21728 <_svfprintf_r+0x1e8>
   227d4:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   227d6:	ae23      	add	r6, sp, #140	; 0x8c
   227d8:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   227da:	3401      	adds	r4, #1
   227dc:	9812      	ldr	r0, [sp, #72]	; 0x48
   227de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   227e0:	2c07      	cmp	r4, #7
   227e2:	4405      	add	r5, r0
   227e4:	6070      	str	r0, [r6, #4]
   227e6:	6033      	str	r3, [r6, #0]
   227e8:	943e      	str	r4, [sp, #248]	; 0xf8
   227ea:	953f      	str	r5, [sp, #252]	; 0xfc
   227ec:	f77f aaab 	ble.w	21d46 <_svfprintf_r+0x806>
   227f0:	f7ff bb09 	b.w	21e06 <_svfprintf_r+0x8c6>
   227f4:	9414      	str	r4, [sp, #80]	; 0x50
   227f6:	f7fe fdd1 	bl	2139c <strlen>
   227fa:	9c14      	ldr	r4, [sp, #80]	; 0x50
   227fc:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
   22800:	9511      	str	r5, [sp, #68]	; 0x44
   22802:	941a      	str	r4, [sp, #104]	; 0x68
   22804:	900e      	str	r0, [sp, #56]	; 0x38
   22806:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   2280a:	900b      	str	r0, [sp, #44]	; 0x2c
   2280c:	f7ff b839 	b.w	21882 <_svfprintf_r+0x342>
   22810:	9810      	ldr	r0, [sp, #64]	; 0x40
   22812:	4659      	mov	r1, fp
   22814:	aa3d      	add	r2, sp, #244	; 0xf4
   22816:	f002 fb81 	bl	24f1c <__ssprint_r>
   2281a:	2800      	cmp	r0, #0
   2281c:	f47e af84 	bne.w	21728 <_svfprintf_r+0x1e8>
   22820:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   22822:	ae23      	add	r6, sp, #140	; 0x8c
   22824:	e471      	b.n	2210a <_svfprintf_r+0xbca>
   22826:	46a0      	mov	r8, r4
   22828:	461c      	mov	r4, r3
   2282a:	3401      	adds	r4, #1
   2282c:	f8c6 8000 	str.w	r8, [r6]
   22830:	2c07      	cmp	r4, #7
   22832:	6077      	str	r7, [r6, #4]
   22834:	443d      	add	r5, r7
   22836:	943e      	str	r4, [sp, #248]	; 0xf8
   22838:	953f      	str	r5, [sp, #252]	; 0xfc
   2283a:	dcc3      	bgt.n	227c4 <_svfprintf_r+0x1284>
   2283c:	3608      	adds	r6, #8
   2283e:	e7cc      	b.n	227da <_svfprintf_r+0x129a>
   22840:	9810      	ldr	r0, [sp, #64]	; 0x40
   22842:	4659      	mov	r1, fp
   22844:	aa3d      	add	r2, sp, #244	; 0xf4
   22846:	f002 fb69 	bl	24f1c <__ssprint_r>
   2284a:	2800      	cmp	r0, #0
   2284c:	f47e af6c 	bne.w	21728 <_svfprintf_r+0x1e8>
   22850:	9b44      	ldr	r3, [sp, #272]	; 0x110
   22852:	ae23      	add	r6, sp, #140	; 0x8c
   22854:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   22856:	e514      	b.n	22282 <_svfprintf_r+0xd42>
   22858:	9810      	ldr	r0, [sp, #64]	; 0x40
   2285a:	4659      	mov	r1, fp
   2285c:	aa3d      	add	r2, sp, #244	; 0xf4
   2285e:	f002 fb5d 	bl	24f1c <__ssprint_r>
   22862:	2800      	cmp	r0, #0
   22864:	f47e af60 	bne.w	21728 <_svfprintf_r+0x1e8>
   22868:	9b44      	ldr	r3, [sp, #272]	; 0x110
   2286a:	ae23      	add	r6, sp, #140	; 0x8c
   2286c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2286e:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   22870:	1ad3      	subs	r3, r2, r3
   22872:	e51d      	b.n	222b0 <_svfprintf_r+0xd70>
   22874:	2f06      	cmp	r7, #6
   22876:	bf28      	it	cs
   22878:	2706      	movcs	r7, #6
   2287a:	f64c 73a8 	movw	r3, #53160	; 0xcfa8
   2287e:	ea27 70e7 	bic.w	r0, r7, r7, asr #31
   22882:	f2c0 0302 	movt	r3, #2
   22886:	970e      	str	r7, [sp, #56]	; 0x38
   22888:	900b      	str	r0, [sp, #44]	; 0x2c
   2288a:	9511      	str	r5, [sp, #68]	; 0x44
   2288c:	9313      	str	r3, [sp, #76]	; 0x4c
   2288e:	f7ff b955 	b.w	21b3c <_svfprintf_r+0x5fc>
   22892:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   22894:	2b65      	cmp	r3, #101	; 0x65
   22896:	dd64      	ble.n	22962 <_svfprintf_r+0x1422>
   22898:	9a15      	ldr	r2, [sp, #84]	; 0x54
   2289a:	9944      	ldr	r1, [sp, #272]	; 0x110
   2289c:	2a00      	cmp	r2, #0
   2289e:	d162      	bne.n	22966 <_svfprintf_r+0x1426>
   228a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
   228a2:	428a      	cmp	r2, r1
   228a4:	dc4a      	bgt.n	2293c <_svfprintf_r+0x13fc>
   228a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   228a8:	07d8      	lsls	r0, r3, #31
   228aa:	d56b      	bpl.n	22984 <_svfprintf_r+0x1444>
   228ac:	1c4b      	adds	r3, r1, #1
   228ae:	2067      	movs	r0, #103	; 0x67
   228b0:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
   228b4:	930e      	str	r3, [sp, #56]	; 0x38
   228b6:	9017      	str	r0, [sp, #92]	; 0x5c
   228b8:	920b      	str	r2, [sp, #44]	; 0x2c
   228ba:	911a      	str	r1, [sp, #104]	; 0x68
   228bc:	e714      	b.n	226e8 <_svfprintf_r+0x11a8>
   228be:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
   228c2:	f7fe bfde 	b.w	21882 <_svfprintf_r+0x342>
   228c6:	9b46      	ldr	r3, [sp, #280]	; 0x118
   228c8:	429c      	cmp	r4, r3
   228ca:	bf98      	it	ls
   228cc:	461c      	movls	r4, r3
   228ce:	f67f aeb2 	bls.w	22636 <_svfprintf_r+0x10f6>
   228d2:	2230      	movs	r2, #48	; 0x30
   228d4:	f803 2b01 	strb.w	r2, [r3], #1
   228d8:	42a3      	cmp	r3, r4
   228da:	9346      	str	r3, [sp, #280]	; 0x118
   228dc:	d1fa      	bne.n	228d4 <_svfprintf_r+0x1394>
   228de:	e6aa      	b.n	22636 <_svfprintf_r+0x10f6>
   228e0:	ea27 71e7 	bic.w	r1, r7, r7, asr #31
   228e4:	9014      	str	r0, [sp, #80]	; 0x50
   228e6:	910b      	str	r1, [sp, #44]	; 0x2c
   228e8:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
   228ec:	9511      	str	r5, [sp, #68]	; 0x44
   228ee:	970e      	str	r7, [sp, #56]	; 0x38
   228f0:	901a      	str	r0, [sp, #104]	; 0x68
   228f2:	f7fe bfc6 	b.w	21882 <_svfprintf_r+0x342>
   228f6:	930b      	str	r3, [sp, #44]	; 0x2c
   228f8:	e636      	b.n	22568 <_svfprintf_r+0x1028>
   228fa:	9810      	ldr	r0, [sp, #64]	; 0x40
   228fc:	4659      	mov	r1, fp
   228fe:	aa3d      	add	r2, sp, #244	; 0xf4
   22900:	f002 fb0c 	bl	24f1c <__ssprint_r>
   22904:	2800      	cmp	r0, #0
   22906:	f47e af0f 	bne.w	21728 <_svfprintf_r+0x1e8>
   2290a:	9f44      	ldr	r7, [sp, #272]	; 0x110
   2290c:	ae23      	add	r6, sp, #140	; 0x8c
   2290e:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   22910:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   22912:	e5de      	b.n	224d2 <_svfprintf_r+0xf92>
   22914:	212d      	movs	r1, #45	; 0x2d
   22916:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
   2291a:	9114      	str	r1, [sp, #80]	; 0x50
   2291c:	e62d      	b.n	2257a <_svfprintf_r+0x103a>
   2291e:	46b9      	mov	r9, r7
   22920:	2302      	movs	r3, #2
   22922:	e64c      	b.n	225be <_svfprintf_r+0x107e>
   22924:	f101 0230 	add.w	r2, r1, #48	; 0x30
   22928:	2330      	movs	r3, #48	; 0x30
   2292a:	a941      	add	r1, sp, #260	; 0x104
   2292c:	f88d 3102 	strb.w	r3, [sp, #258]	; 0x102
   22930:	f88d 2103 	strb.w	r2, [sp, #259]	; 0x103
   22934:	e6c7      	b.n	226c6 <_svfprintf_r+0x1186>
   22936:	2701      	movs	r7, #1
   22938:	970b      	str	r7, [sp, #44]	; 0x2c
   2293a:	e615      	b.n	22568 <_svfprintf_r+0x1028>
   2293c:	2900      	cmp	r1, #0
   2293e:	9812      	ldr	r0, [sp, #72]	; 0x48
   22940:	bfd4      	ite	le
   22942:	f1c1 0302 	rsble	r3, r1, #2
   22946:	2301      	movgt	r3, #1
   22948:	181b      	adds	r3, r3, r0
   2294a:	2267      	movs	r2, #103	; 0x67
   2294c:	930e      	str	r3, [sp, #56]	; 0x38
   2294e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   22952:	9217      	str	r2, [sp, #92]	; 0x5c
   22954:	930b      	str	r3, [sp, #44]	; 0x2c
   22956:	911a      	str	r1, [sp, #104]	; 0x68
   22958:	e6c6      	b.n	226e8 <_svfprintf_r+0x11a8>
   2295a:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 22a1c <_svfprintf_r+0x14dc>
   2295e:	f7ff ba49 	b.w	21df4 <_svfprintf_r+0x8b4>
   22962:	9944      	ldr	r1, [sp, #272]	; 0x110
   22964:	e677      	b.n	22656 <_svfprintf_r+0x1116>
   22966:	2900      	cmp	r1, #0
   22968:	dd3b      	ble.n	229e2 <_svfprintf_r+0x14a2>
   2296a:	2f00      	cmp	r7, #0
   2296c:	d12f      	bne.n	229ce <_svfprintf_r+0x148e>
   2296e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   22970:	07db      	lsls	r3, r3, #31
   22972:	d42c      	bmi.n	229ce <_svfprintf_r+0x148e>
   22974:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
   22978:	2266      	movs	r2, #102	; 0x66
   2297a:	900b      	str	r0, [sp, #44]	; 0x2c
   2297c:	910e      	str	r1, [sp, #56]	; 0x38
   2297e:	9217      	str	r2, [sp, #92]	; 0x5c
   22980:	911a      	str	r1, [sp, #104]	; 0x68
   22982:	e6b1      	b.n	226e8 <_svfprintf_r+0x11a8>
   22984:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
   22988:	2267      	movs	r2, #103	; 0x67
   2298a:	900b      	str	r0, [sp, #44]	; 0x2c
   2298c:	910e      	str	r1, [sp, #56]	; 0x38
   2298e:	9217      	str	r2, [sp, #92]	; 0x5c
   22990:	911a      	str	r1, [sp, #104]	; 0x68
   22992:	e6a9      	b.n	226e8 <_svfprintf_r+0x11a8>
   22994:	990a      	ldr	r1, [sp, #40]	; 0x28
   22996:	f011 0301 	ands.w	r3, r1, #1
   2299a:	f47f ae9d 	bne.w	226d8 <_svfprintf_r+0x1198>
   2299e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   229a0:	931a      	str	r3, [sp, #104]	; 0x68
   229a2:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   229a6:	920b      	str	r2, [sp, #44]	; 0x2c
   229a8:	e69e      	b.n	226e8 <_svfprintf_r+0x11a8>
   229aa:	232d      	movs	r3, #45	; 0x2d
   229ac:	4249      	negs	r1, r1
   229ae:	f88d 3101 	strb.w	r3, [sp, #257]	; 0x101
   229b2:	e65b      	b.n	2266c <_svfprintf_r+0x112c>
   229b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   229b6:	f89a 3001 	ldrb.w	r3, [sl, #1]
   229ba:	4682      	mov	sl, r0
   229bc:	6817      	ldr	r7, [r2, #0]
   229be:	3204      	adds	r2, #4
   229c0:	9211      	str	r2, [sp, #68]	; 0x44
   229c2:	2f00      	cmp	r7, #0
   229c4:	bfb8      	it	lt
   229c6:	f04f 37ff 	movlt.w	r7, #4294967295
   229ca:	f7fe be31 	b.w	21630 <_svfprintf_r+0xf0>
   229ce:	3701      	adds	r7, #1
   229d0:	2366      	movs	r3, #102	; 0x66
   229d2:	19cf      	adds	r7, r1, r7
   229d4:	9317      	str	r3, [sp, #92]	; 0x5c
   229d6:	ea27 70e7 	bic.w	r0, r7, r7, asr #31
   229da:	970e      	str	r7, [sp, #56]	; 0x38
   229dc:	900b      	str	r0, [sp, #44]	; 0x2c
   229de:	911a      	str	r1, [sp, #104]	; 0x68
   229e0:	e682      	b.n	226e8 <_svfprintf_r+0x11a8>
   229e2:	b917      	cbnz	r7, 229ea <_svfprintf_r+0x14aa>
   229e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   229e6:	07d5      	lsls	r5, r2, #31
   229e8:	d510      	bpl.n	22a0c <_svfprintf_r+0x14cc>
   229ea:	3702      	adds	r7, #2
   229ec:	2366      	movs	r3, #102	; 0x66
   229ee:	ea27 70e7 	bic.w	r0, r7, r7, asr #31
   229f2:	970e      	str	r7, [sp, #56]	; 0x38
   229f4:	9317      	str	r3, [sp, #92]	; 0x5c
   229f6:	900b      	str	r0, [sp, #44]	; 0x2c
   229f8:	911a      	str	r1, [sp, #104]	; 0x68
   229fa:	e675      	b.n	226e8 <_svfprintf_r+0x11a8>
   229fc:	9810      	ldr	r0, [sp, #64]	; 0x40
   229fe:	f04f 33ff 	mov.w	r3, #4294967295
   22a02:	930d      	str	r3, [sp, #52]	; 0x34
   22a04:	230c      	movs	r3, #12
   22a06:	6003      	str	r3, [r0, #0]
   22a08:	f7fe be97 	b.w	2173a <_svfprintf_r+0x1fa>
   22a0c:	2001      	movs	r0, #1
   22a0e:	2266      	movs	r2, #102	; 0x66
   22a10:	900b      	str	r0, [sp, #44]	; 0x2c
   22a12:	9217      	str	r2, [sp, #92]	; 0x5c
   22a14:	900e      	str	r0, [sp, #56]	; 0x38
   22a16:	911a      	str	r1, [sp, #104]	; 0x68
   22a18:	e666      	b.n	226e8 <_svfprintf_r+0x11a8>
   22a1a:	bf00      	nop
   22a1c:	0002cf60 	.word	0x0002cf60

00022a20 <write>:
   22a20:	b430      	push	{r4, r5}
   22a22:	f240 0428 	movw	r4, #40	; 0x28
   22a26:	f2c1 0400 	movt	r4, #4096	; 0x1000
   22a2a:	460d      	mov	r5, r1
   22a2c:	4613      	mov	r3, r2
   22a2e:	4601      	mov	r1, r0
   22a30:	462a      	mov	r2, r5
   22a32:	6820      	ldr	r0, [r4, #0]
   22a34:	bc30      	pop	{r4, r5}
   22a36:	f000 b87f 	b.w	22b38 <_write_r>
   22a3a:	bf00      	nop

00022a3c <__swbuf_r>:
   22a3c:	b570      	push	{r4, r5, r6, lr}
   22a3e:	460c      	mov	r4, r1
   22a40:	4615      	mov	r5, r2
   22a42:	4606      	mov	r6, r0
   22a44:	b110      	cbz	r0, 22a4c <__swbuf_r+0x10>
   22a46:	6983      	ldr	r3, [r0, #24]
   22a48:	2b00      	cmp	r3, #0
   22a4a:	d05b      	beq.n	22b04 <__swbuf_r+0xc8>
   22a4c:	f24d 1308 	movw	r3, #53512	; 0xd108
   22a50:	f2c0 0302 	movt	r3, #2
   22a54:	429d      	cmp	r5, r3
   22a56:	bf08      	it	eq
   22a58:	6875      	ldreq	r5, [r6, #4]
   22a5a:	d00e      	beq.n	22a7a <__swbuf_r+0x3e>
   22a5c:	f24d 03e8 	movw	r3, #53480	; 0xd0e8
   22a60:	f2c0 0302 	movt	r3, #2
   22a64:	429d      	cmp	r5, r3
   22a66:	bf08      	it	eq
   22a68:	68b5      	ldreq	r5, [r6, #8]
   22a6a:	d006      	beq.n	22a7a <__swbuf_r+0x3e>
   22a6c:	f24d 03c8 	movw	r3, #53448	; 0xd0c8
   22a70:	f2c0 0302 	movt	r3, #2
   22a74:	429d      	cmp	r5, r3
   22a76:	bf08      	it	eq
   22a78:	68f5      	ldreq	r5, [r6, #12]
   22a7a:	89aa      	ldrh	r2, [r5, #12]
   22a7c:	69a9      	ldr	r1, [r5, #24]
   22a7e:	b293      	uxth	r3, r2
   22a80:	60a9      	str	r1, [r5, #8]
   22a82:	0719      	lsls	r1, r3, #28
   22a84:	d52d      	bpl.n	22ae2 <__swbuf_r+0xa6>
   22a86:	6929      	ldr	r1, [r5, #16]
   22a88:	2900      	cmp	r1, #0
   22a8a:	d02a      	beq.n	22ae2 <__swbuf_r+0xa6>
   22a8c:	049b      	lsls	r3, r3, #18
   22a8e:	bf5e      	ittt	pl
   22a90:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
   22a94:	81aa      	strhpl	r2, [r5, #12]
   22a96:	6e6b      	ldrpl	r3, [r5, #100]	; 0x64
   22a98:	696a      	ldr	r2, [r5, #20]
   22a9a:	bf5c      	itt	pl
   22a9c:	f423 5300 	bicpl.w	r3, r3, #8192	; 0x2000
   22aa0:	666b      	strpl	r3, [r5, #100]	; 0x64
   22aa2:	682b      	ldr	r3, [r5, #0]
   22aa4:	1a59      	subs	r1, r3, r1
   22aa6:	4291      	cmp	r1, r2
   22aa8:	da24      	bge.n	22af4 <__swbuf_r+0xb8>
   22aaa:	3101      	adds	r1, #1
   22aac:	68aa      	ldr	r2, [r5, #8]
   22aae:	b2e4      	uxtb	r4, r4
   22ab0:	3a01      	subs	r2, #1
   22ab2:	60aa      	str	r2, [r5, #8]
   22ab4:	f803 4b01 	strb.w	r4, [r3], #1
   22ab8:	696a      	ldr	r2, [r5, #20]
   22aba:	602b      	str	r3, [r5, #0]
   22abc:	428a      	cmp	r2, r1
   22abe:	d006      	beq.n	22ace <__swbuf_r+0x92>
   22ac0:	89ab      	ldrh	r3, [r5, #12]
   22ac2:	2c0a      	cmp	r4, #10
   22ac4:	bf14      	ite	ne
   22ac6:	2300      	movne	r3, #0
   22ac8:	f003 0301 	andeq.w	r3, r3, #1
   22acc:	b13b      	cbz	r3, 22ade <__swbuf_r+0xa2>
   22ace:	4630      	mov	r0, r6
   22ad0:	4629      	mov	r1, r5
   22ad2:	f001 f949 	bl	23d68 <_fflush_r>
   22ad6:	2800      	cmp	r0, #0
   22ad8:	bf18      	it	ne
   22ada:	f04f 34ff 	movne.w	r4, #4294967295
   22ade:	4620      	mov	r0, r4
   22ae0:	bd70      	pop	{r4, r5, r6, pc}
   22ae2:	4630      	mov	r0, r6
   22ae4:	4629      	mov	r1, r5
   22ae6:	f000 f83d 	bl	22b64 <__swsetup_r>
   22aea:	b970      	cbnz	r0, 22b0a <__swbuf_r+0xce>
   22aec:	89aa      	ldrh	r2, [r5, #12]
   22aee:	6929      	ldr	r1, [r5, #16]
   22af0:	b293      	uxth	r3, r2
   22af2:	e7cb      	b.n	22a8c <__swbuf_r+0x50>
   22af4:	4630      	mov	r0, r6
   22af6:	4629      	mov	r1, r5
   22af8:	f001 f936 	bl	23d68 <_fflush_r>
   22afc:	b970      	cbnz	r0, 22b1c <__swbuf_r+0xe0>
   22afe:	682b      	ldr	r3, [r5, #0]
   22b00:	2101      	movs	r1, #1
   22b02:	e7d3      	b.n	22aac <__swbuf_r+0x70>
   22b04:	f001 fa72 	bl	23fec <__sinit>
   22b08:	e7a0      	b.n	22a4c <__swbuf_r+0x10>
   22b0a:	89ab      	ldrh	r3, [r5, #12]
   22b0c:	f04f 34ff 	mov.w	r4, #4294967295
   22b10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22b14:	81ab      	strh	r3, [r5, #12]
   22b16:	2309      	movs	r3, #9
   22b18:	6033      	str	r3, [r6, #0]
   22b1a:	e7e0      	b.n	22ade <__swbuf_r+0xa2>
   22b1c:	f04f 34ff 	mov.w	r4, #4294967295
   22b20:	e7dd      	b.n	22ade <__swbuf_r+0xa2>
   22b22:	bf00      	nop

00022b24 <__swbuf>:
   22b24:	f240 0328 	movw	r3, #40	; 0x28
   22b28:	460a      	mov	r2, r1
   22b2a:	f2c1 0300 	movt	r3, #4096	; 0x1000
   22b2e:	4601      	mov	r1, r0
   22b30:	6818      	ldr	r0, [r3, #0]
   22b32:	f7ff bf83 	b.w	22a3c <__swbuf_r>
   22b36:	bf00      	nop

00022b38 <_write_r>:
   22b38:	b538      	push	{r3, r4, r5, lr}
   22b3a:	f642 54c8 	movw	r4, #11720	; 0x2dc8
   22b3e:	f2c1 0400 	movt	r4, #4096	; 0x1000
   22b42:	4605      	mov	r5, r0
   22b44:	4608      	mov	r0, r1
   22b46:	4611      	mov	r1, r2
   22b48:	461a      	mov	r2, r3
   22b4a:	2300      	movs	r3, #0
   22b4c:	6023      	str	r3, [r4, #0]
   22b4e:	f7e3 fb85 	bl	625c <_write>
   22b52:	1c43      	adds	r3, r0, #1
   22b54:	d000      	beq.n	22b58 <_write_r+0x20>
   22b56:	bd38      	pop	{r3, r4, r5, pc}
   22b58:	6823      	ldr	r3, [r4, #0]
   22b5a:	2b00      	cmp	r3, #0
   22b5c:	d0fb      	beq.n	22b56 <_write_r+0x1e>
   22b5e:	602b      	str	r3, [r5, #0]
   22b60:	bd38      	pop	{r3, r4, r5, pc}
   22b62:	bf00      	nop

00022b64 <__swsetup_r>:
   22b64:	b570      	push	{r4, r5, r6, lr}
   22b66:	f240 0528 	movw	r5, #40	; 0x28
   22b6a:	f2c1 0500 	movt	r5, #4096	; 0x1000
   22b6e:	4606      	mov	r6, r0
   22b70:	460c      	mov	r4, r1
   22b72:	6828      	ldr	r0, [r5, #0]
   22b74:	b110      	cbz	r0, 22b7c <__swsetup_r+0x18>
   22b76:	6983      	ldr	r3, [r0, #24]
   22b78:	2b00      	cmp	r3, #0
   22b7a:	d051      	beq.n	22c20 <__swsetup_r+0xbc>
   22b7c:	f24d 1308 	movw	r3, #53512	; 0xd108
   22b80:	f2c0 0302 	movt	r3, #2
   22b84:	429c      	cmp	r4, r3
   22b86:	d053      	beq.n	22c30 <__swsetup_r+0xcc>
   22b88:	f24d 03e8 	movw	r3, #53480	; 0xd0e8
   22b8c:	f2c0 0302 	movt	r3, #2
   22b90:	429c      	cmp	r4, r3
   22b92:	d05c      	beq.n	22c4e <__swsetup_r+0xea>
   22b94:	f24d 03c8 	movw	r3, #53448	; 0xd0c8
   22b98:	f2c0 0302 	movt	r3, #2
   22b9c:	429c      	cmp	r4, r3
   22b9e:	bf04      	itt	eq
   22ba0:	682b      	ldreq	r3, [r5, #0]
   22ba2:	68dc      	ldreq	r4, [r3, #12]
   22ba4:	89a2      	ldrh	r2, [r4, #12]
   22ba6:	b293      	uxth	r3, r2
   22ba8:	0719      	lsls	r1, r3, #28
   22baa:	bf48      	it	mi
   22bac:	6921      	ldrmi	r1, [r4, #16]
   22bae:	d41d      	bmi.n	22bec <__swsetup_r+0x88>
   22bb0:	06d8      	lsls	r0, r3, #27
   22bb2:	d54f      	bpl.n	22c54 <__swsetup_r+0xf0>
   22bb4:	0759      	lsls	r1, r3, #29
   22bb6:	bf58      	it	pl
   22bb8:	6921      	ldrpl	r1, [r4, #16]
   22bba:	d513      	bpl.n	22be4 <__swsetup_r+0x80>
   22bbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
   22bbe:	b149      	cbz	r1, 22bd4 <__swsetup_r+0x70>
   22bc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
   22bc4:	4299      	cmp	r1, r3
   22bc6:	d003      	beq.n	22bd0 <__swsetup_r+0x6c>
   22bc8:	4630      	mov	r0, r6
   22bca:	f001 fafb 	bl	241c4 <_free_r>
   22bce:	89a2      	ldrh	r2, [r4, #12]
   22bd0:	2300      	movs	r3, #0
   22bd2:	6363      	str	r3, [r4, #52]	; 0x34
   22bd4:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   22bd8:	6921      	ldr	r1, [r4, #16]
   22bda:	2300      	movs	r3, #0
   22bdc:	6063      	str	r3, [r4, #4]
   22bde:	0412      	lsls	r2, r2, #16
   22be0:	6021      	str	r1, [r4, #0]
   22be2:	0c12      	lsrs	r2, r2, #16
   22be4:	f042 0308 	orr.w	r3, r2, #8
   22be8:	81a3      	strh	r3, [r4, #12]
   22bea:	b29b      	uxth	r3, r3
   22bec:	b319      	cbz	r1, 22c36 <__swsetup_r+0xd2>
   22bee:	f013 0201 	ands.w	r2, r3, #1
   22bf2:	d007      	beq.n	22c04 <__swsetup_r+0xa0>
   22bf4:	6963      	ldr	r3, [r4, #20]
   22bf6:	2200      	movs	r2, #0
   22bf8:	60a2      	str	r2, [r4, #8]
   22bfa:	425b      	negs	r3, r3
   22bfc:	61a3      	str	r3, [r4, #24]
   22bfe:	b139      	cbz	r1, 22c10 <__swsetup_r+0xac>
   22c00:	2000      	movs	r0, #0
   22c02:	bd70      	pop	{r4, r5, r6, pc}
   22c04:	079b      	lsls	r3, r3, #30
   22c06:	bf58      	it	pl
   22c08:	6962      	ldrpl	r2, [r4, #20]
   22c0a:	60a2      	str	r2, [r4, #8]
   22c0c:	2900      	cmp	r1, #0
   22c0e:	d1f7      	bne.n	22c00 <__swsetup_r+0x9c>
   22c10:	89a3      	ldrh	r3, [r4, #12]
   22c12:	f013 0f80 	tst.w	r3, #128	; 0x80
   22c16:	bf14      	ite	ne
   22c18:	f04f 30ff 	movne.w	r0, #4294967295
   22c1c:	2000      	moveq	r0, #0
   22c1e:	bd70      	pop	{r4, r5, r6, pc}
   22c20:	f001 f9e4 	bl	23fec <__sinit>
   22c24:	f24d 1308 	movw	r3, #53512	; 0xd108
   22c28:	f2c0 0302 	movt	r3, #2
   22c2c:	429c      	cmp	r4, r3
   22c2e:	d1ab      	bne.n	22b88 <__swsetup_r+0x24>
   22c30:	682b      	ldr	r3, [r5, #0]
   22c32:	685c      	ldr	r4, [r3, #4]
   22c34:	e7b6      	b.n	22ba4 <__swsetup_r+0x40>
   22c36:	f403 7220 	and.w	r2, r3, #640	; 0x280
   22c3a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   22c3e:	d0d6      	beq.n	22bee <__swsetup_r+0x8a>
   22c40:	4621      	mov	r1, r4
   22c42:	4630      	mov	r0, r6
   22c44:	f001 fc28 	bl	24498 <__smakebuf_r>
   22c48:	89a3      	ldrh	r3, [r4, #12]
   22c4a:	6921      	ldr	r1, [r4, #16]
   22c4c:	e7cf      	b.n	22bee <__swsetup_r+0x8a>
   22c4e:	682b      	ldr	r3, [r5, #0]
   22c50:	689c      	ldr	r4, [r3, #8]
   22c52:	e7a7      	b.n	22ba4 <__swsetup_r+0x40>
   22c54:	f04f 30ff 	mov.w	r0, #4294967295
   22c58:	bd70      	pop	{r4, r5, r6, pc}
   22c5a:	bf00      	nop

00022c5c <__register_exitproc>:
   22c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22c60:	f64c 7448 	movw	r4, #53064	; 0xcf48
   22c64:	f2c0 0402 	movt	r4, #2
   22c68:	b084      	sub	sp, #16
   22c6a:	4605      	mov	r5, r0
   22c6c:	6826      	ldr	r6, [r4, #0]
   22c6e:	6cb4      	ldr	r4, [r6, #72]	; 0x48
   22c70:	2c00      	cmp	r4, #0
   22c72:	d042      	beq.n	22cfa <__register_exitproc+0x9e>
   22c74:	6860      	ldr	r0, [r4, #4]
   22c76:	281f      	cmp	r0, #31
   22c78:	dd1a      	ble.n	22cb0 <__register_exitproc+0x54>
   22c7a:	f64f 70ad 	movw	r0, #65453	; 0xffad
   22c7e:	f2c0 0001 	movt	r0, #1
   22c82:	b920      	cbnz	r0, 22c8e <__register_exitproc+0x32>
   22c84:	f04f 30ff 	mov.w	r0, #4294967295
   22c88:	b004      	add	sp, #16
   22c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22c8e:	208c      	movs	r0, #140	; 0x8c
   22c90:	9103      	str	r1, [sp, #12]
   22c92:	9202      	str	r2, [sp, #8]
   22c94:	9301      	str	r3, [sp, #4]
   22c96:	f7fd f989 	bl	1ffac <malloc>
   22c9a:	9903      	ldr	r1, [sp, #12]
   22c9c:	9a02      	ldr	r2, [sp, #8]
   22c9e:	9b01      	ldr	r3, [sp, #4]
   22ca0:	4604      	mov	r4, r0
   22ca2:	2800      	cmp	r0, #0
   22ca4:	d0ee      	beq.n	22c84 <__register_exitproc+0x28>
   22ca6:	6cb0      	ldr	r0, [r6, #72]	; 0x48
   22ca8:	2700      	movs	r7, #0
   22caa:	e884 0081 	stmia.w	r4, {r0, r7}
   22cae:	64b4      	str	r4, [r6, #72]	; 0x48
   22cb0:	b1dd      	cbz	r5, 22cea <__register_exitproc+0x8e>
   22cb2:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   22cb6:	b320      	cbz	r0, 22d02 <__register_exitproc+0xa6>
   22cb8:	f8d0 8100 	ldr.w	r8, [r0, #256]	; 0x100
   22cbc:	6866      	ldr	r6, [r4, #4]
   22cbe:	2701      	movs	r7, #1
   22cc0:	2d02      	cmp	r5, #2
   22cc2:	f106 0c20 	add.w	ip, r6, #32
   22cc6:	fa07 f706 	lsl.w	r7, r7, r6
   22cca:	f840 2026 	str.w	r2, [r0, r6, lsl #2]
   22cce:	ea48 0207 	orr.w	r2, r8, r7
   22cd2:	f840 302c 	str.w	r3, [r0, ip, lsl #2]
   22cd6:	bf08      	it	eq
   22cd8:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   22cdc:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
   22ce0:	bf04      	itt	eq
   22ce2:	431f      	orreq	r7, r3
   22ce4:	f8c0 7104 	streq.w	r7, [r0, #260]	; 0x104
   22ce8:	e000      	b.n	22cec <__register_exitproc+0x90>
   22cea:	6866      	ldr	r6, [r4, #4]
   22cec:	1cb3      	adds	r3, r6, #2
   22cee:	2000      	movs	r0, #0
   22cf0:	3601      	adds	r6, #1
   22cf2:	6066      	str	r6, [r4, #4]
   22cf4:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
   22cf8:	e7c6      	b.n	22c88 <__register_exitproc+0x2c>
   22cfa:	f106 044c 	add.w	r4, r6, #76	; 0x4c
   22cfe:	64b4      	str	r4, [r6, #72]	; 0x48
   22d00:	e7b8      	b.n	22c74 <__register_exitproc+0x18>
   22d02:	f64f 70ad 	movw	r0, #65453	; 0xffad
   22d06:	f2c0 0001 	movt	r0, #1
   22d0a:	2800      	cmp	r0, #0
   22d0c:	d0ba      	beq.n	22c84 <__register_exitproc+0x28>
   22d0e:	f44f 7084 	mov.w	r0, #264	; 0x108
   22d12:	9103      	str	r1, [sp, #12]
   22d14:	9202      	str	r2, [sp, #8]
   22d16:	9301      	str	r3, [sp, #4]
   22d18:	f7fd f948 	bl	1ffac <malloc>
   22d1c:	9903      	ldr	r1, [sp, #12]
   22d1e:	9a02      	ldr	r2, [sp, #8]
   22d20:	9b01      	ldr	r3, [sp, #4]
   22d22:	2800      	cmp	r0, #0
   22d24:	d0ae      	beq.n	22c84 <__register_exitproc+0x28>
   22d26:	2600      	movs	r6, #0
   22d28:	f8c0 6100 	str.w	r6, [r0, #256]	; 0x100
   22d2c:	f8c0 6104 	str.w	r6, [r0, #260]	; 0x104
   22d30:	46b0      	mov	r8, r6
   22d32:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   22d36:	e7c1      	b.n	22cbc <__register_exitproc+0x60>

00022d38 <quorem>:
   22d38:	690a      	ldr	r2, [r1, #16]
   22d3a:	6903      	ldr	r3, [r0, #16]
   22d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22d40:	429a      	cmp	r2, r3
   22d42:	b083      	sub	sp, #12
   22d44:	4680      	mov	r8, r0
   22d46:	4689      	mov	r9, r1
   22d48:	9200      	str	r2, [sp, #0]
   22d4a:	f300 8096 	bgt.w	22e7a <quorem+0x142>
   22d4e:	3203      	adds	r2, #3
   22d50:	9b00      	ldr	r3, [sp, #0]
   22d52:	f101 0514 	add.w	r5, r1, #20
   22d56:	0092      	lsls	r2, r2, #2
   22d58:	1e5c      	subs	r4, r3, #1
   22d5a:	f100 0314 	add.w	r3, r0, #20
   22d5e:	9301      	str	r3, [sp, #4]
   22d60:	188b      	adds	r3, r1, r2
   22d62:	1882      	adds	r2, r0, r2
   22d64:	1d1f      	adds	r7, r3, #4
   22d66:	6859      	ldr	r1, [r3, #4]
   22d68:	6850      	ldr	r0, [r2, #4]
   22d6a:	3101      	adds	r1, #1
   22d6c:	f7f1 fc50 	bl	14610 <__aeabi_uidiv>
   22d70:	4606      	mov	r6, r0
   22d72:	2800      	cmp	r0, #0
   22d74:	d042      	beq.n	22dfc <quorem+0xc4>
   22d76:	2000      	movs	r0, #0
   22d78:	9a01      	ldr	r2, [sp, #4]
   22d7a:	462b      	mov	r3, r5
   22d7c:	4686      	mov	lr, r0
   22d7e:	f853 cb04 	ldr.w	ip, [r3], #4
   22d82:	6811      	ldr	r1, [r2, #0]
   22d84:	fa1f fb8c 	uxth.w	fp, ip
   22d88:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   22d8c:	fa1f fa81 	uxth.w	sl, r1
   22d90:	fb06 0b0b 	mla	fp, r6, fp, r0
   22d94:	44d6      	add	lr, sl
   22d96:	fb06 f00c 	mul.w	r0, r6, ip
   22d9a:	eb00 401b 	add.w	r0, r0, fp, lsr #16
   22d9e:	fa1f fb8b 	uxth.w	fp, fp
   22da2:	ebcb 0a0e 	rsb	sl, fp, lr
   22da6:	fa1f fe80 	uxth.w	lr, r0
   22daa:	0c00      	lsrs	r0, r0, #16
   22dac:	ebce 4e11 	rsb	lr, lr, r1, lsr #16
   22db0:	429f      	cmp	r7, r3
   22db2:	eb0e 4e2a 	add.w	lr, lr, sl, asr #16
   22db6:	fa1f fc8a 	uxth.w	ip, sl
   22dba:	ea4c 410e 	orr.w	r1, ip, lr, lsl #16
   22dbe:	ea4f 4e2e 	mov.w	lr, lr, asr #16
   22dc2:	f842 1b04 	str.w	r1, [r2], #4
   22dc6:	d2da      	bcs.n	22d7e <quorem+0x46>
   22dc8:	1d22      	adds	r2, r4, #4
   22dca:	eb08 0382 	add.w	r3, r8, r2, lsl #2
   22dce:	6859      	ldr	r1, [r3, #4]
   22dd0:	b9a1      	cbnz	r1, 22dfc <quorem+0xc4>
   22dd2:	9801      	ldr	r0, [sp, #4]
   22dd4:	4298      	cmp	r0, r3
   22dd6:	d20f      	bcs.n	22df8 <quorem+0xc0>
   22dd8:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
   22ddc:	b962      	cbnz	r2, 22df8 <quorem+0xc0>
   22dde:	9a00      	ldr	r2, [sp, #0]
   22de0:	1e91      	subs	r1, r2, #2
   22de2:	43c2      	mvns	r2, r0
   22de4:	18d2      	adds	r2, r2, r3
   22de6:	eba1 0192 	sub.w	r1, r1, r2, lsr #2
   22dea:	e002      	b.n	22df2 <quorem+0xba>
   22dec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   22df0:	b912      	cbnz	r2, 22df8 <quorem+0xc0>
   22df2:	3c01      	subs	r4, #1
   22df4:	428c      	cmp	r4, r1
   22df6:	d1f9      	bne.n	22dec <quorem+0xb4>
   22df8:	f8c8 4010 	str.w	r4, [r8, #16]
   22dfc:	4640      	mov	r0, r8
   22dfe:	4649      	mov	r1, r9
   22e00:	f001 fe3e 	bl	24a80 <__mcmp>
   22e04:	2800      	cmp	r0, #0
   22e06:	db34      	blt.n	22e72 <quorem+0x13a>
   22e08:	9b01      	ldr	r3, [sp, #4]
   22e0a:	3601      	adds	r6, #1
   22e0c:	f04f 0c00 	mov.w	ip, #0
   22e10:	f855 0b04 	ldr.w	r0, [r5], #4
   22e14:	6819      	ldr	r1, [r3, #0]
   22e16:	fa1f f980 	uxth.w	r9, r0
   22e1a:	0c00      	lsrs	r0, r0, #16
   22e1c:	b28a      	uxth	r2, r1
   22e1e:	ebc0 4111 	rsb	r1, r0, r1, lsr #16
   22e22:	ebc9 0202 	rsb	r2, r9, r2
   22e26:	42af      	cmp	r7, r5
   22e28:	4494      	add	ip, r2
   22e2a:	eb01 422c 	add.w	r2, r1, ip, asr #16
   22e2e:	fa1f fc8c 	uxth.w	ip, ip
   22e32:	ea4c 4102 	orr.w	r1, ip, r2, lsl #16
   22e36:	ea4f 4c22 	mov.w	ip, r2, asr #16
   22e3a:	f843 1b04 	str.w	r1, [r3], #4
   22e3e:	d2e7      	bcs.n	22e10 <quorem+0xd8>
   22e40:	1d22      	adds	r2, r4, #4
   22e42:	eb08 0382 	add.w	r3, r8, r2, lsl #2
   22e46:	6859      	ldr	r1, [r3, #4]
   22e48:	b999      	cbnz	r1, 22e72 <quorem+0x13a>
   22e4a:	9801      	ldr	r0, [sp, #4]
   22e4c:	4298      	cmp	r0, r3
   22e4e:	d20e      	bcs.n	22e6e <quorem+0x136>
   22e50:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
   22e54:	b95a      	cbnz	r2, 22e6e <quorem+0x136>
   22e56:	43c1      	mvns	r1, r0
   22e58:	18c9      	adds	r1, r1, r3
   22e5a:	f021 0103 	bic.w	r1, r1, #3
   22e5e:	1a59      	subs	r1, r3, r1
   22e60:	e002      	b.n	22e68 <quorem+0x130>
   22e62:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   22e66:	b912      	cbnz	r2, 22e6e <quorem+0x136>
   22e68:	3c01      	subs	r4, #1
   22e6a:	428b      	cmp	r3, r1
   22e6c:	d1f9      	bne.n	22e62 <quorem+0x12a>
   22e6e:	f8c8 4010 	str.w	r4, [r8, #16]
   22e72:	4630      	mov	r0, r6
   22e74:	b003      	add	sp, #12
   22e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22e7a:	2000      	movs	r0, #0
   22e7c:	e7fa      	b.n	22e74 <quorem+0x13c>
   22e7e:	bf00      	nop

00022e80 <_dtoa_r>:
   22e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22e84:	b09f      	sub	sp, #124	; 0x7c
   22e86:	6a45      	ldr	r5, [r0, #36]	; 0x24
   22e88:	4606      	mov	r6, r0
   22e8a:	4692      	mov	sl, r2
   22e8c:	469b      	mov	fp, r3
   22e8e:	9c2b      	ldr	r4, [sp, #172]	; 0xac
   22e90:	2d00      	cmp	r5, #0
   22e92:	f000 82e2 	beq.w	2345a <_dtoa_r+0x5da>
   22e96:	682b      	ldr	r3, [r5, #0]
   22e98:	b15b      	cbz	r3, 22eb2 <_dtoa_r+0x32>
   22e9a:	686a      	ldr	r2, [r5, #4]
   22e9c:	2501      	movs	r5, #1
   22e9e:	4619      	mov	r1, r3
   22ea0:	fa05 f502 	lsl.w	r5, r5, r2
   22ea4:	609d      	str	r5, [r3, #8]
   22ea6:	605a      	str	r2, [r3, #4]
   22ea8:	f001 fba0 	bl	245ec <_Bfree>
   22eac:	6a73      	ldr	r3, [r6, #36]	; 0x24
   22eae:	2200      	movs	r2, #0
   22eb0:	601a      	str	r2, [r3, #0]
   22eb2:	f1bb 0500 	subs.w	r5, fp, #0
   22eb6:	f2c0 80e8 	blt.w	2308a <_dtoa_r+0x20a>
   22eba:	2300      	movs	r3, #0
   22ebc:	6023      	str	r3, [r4, #0]
   22ebe:	2300      	movs	r3, #0
   22ec0:	461a      	mov	r2, r3
   22ec2:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
   22ec6:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
   22eca:	402b      	ands	r3, r5
   22ecc:	4293      	cmp	r3, r2
   22ece:	f000 80c7 	beq.w	23060 <_dtoa_r+0x1e0>
   22ed2:	2200      	movs	r2, #0
   22ed4:	2300      	movs	r3, #0
   22ed6:	4650      	mov	r0, sl
   22ed8:	4659      	mov	r1, fp
   22eda:	46d0      	mov	r8, sl
   22edc:	46d9      	mov	r9, fp
   22ede:	2401      	movs	r4, #1
   22ee0:	f002 ff1c 	bl	25d1c <__aeabi_dcmpeq>
   22ee4:	b988      	cbnz	r0, 22f0a <_dtoa_r+0x8a>
   22ee6:	f014 0fff 	tst.w	r4, #255	; 0xff
   22eea:	d112      	bne.n	22f12 <_dtoa_r+0x92>
   22eec:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
   22eee:	f64c 70b0 	movw	r0, #53168	; 0xcfb0
   22ef2:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   22ef4:	2301      	movs	r3, #1
   22ef6:	f2c0 0002 	movt	r0, #2
   22efa:	602b      	str	r3, [r5, #0]
   22efc:	b114      	cbz	r4, 22f04 <_dtoa_r+0x84>
   22efe:	4b80      	ldr	r3, [pc, #512]	; (23100 <_dtoa_r+0x280>)
   22f00:	1e58      	subs	r0, r3, #1
   22f02:	6023      	str	r3, [r4, #0]
   22f04:	b01f      	add	sp, #124	; 0x7c
   22f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22f0a:	2400      	movs	r4, #0
   22f0c:	f014 0fff 	tst.w	r4, #255	; 0xff
   22f10:	d0ec      	beq.n	22eec <_dtoa_r+0x6c>
   22f12:	4630      	mov	r0, r6
   22f14:	4642      	mov	r2, r8
   22f16:	464b      	mov	r3, r9
   22f18:	a91d      	add	r1, sp, #116	; 0x74
   22f1a:	9100      	str	r1, [sp, #0]
   22f1c:	a91c      	add	r1, sp, #112	; 0x70
   22f1e:	9101      	str	r1, [sp, #4]
   22f20:	f001 feb8 	bl	24c94 <__d2b>
   22f24:	f3c5 540a 	ubfx	r4, r5, #20, #11
   22f28:	900c      	str	r0, [sp, #48]	; 0x30
   22f2a:	2c00      	cmp	r4, #0
   22f2c:	f040 80c5 	bne.w	230ba <_dtoa_r+0x23a>
   22f30:	9f1c      	ldr	r7, [sp, #112]	; 0x70
   22f32:	f46f 6382 	mvn.w	r3, #1040	; 0x410
   22f36:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   22f38:	193c      	adds	r4, r7, r4
   22f3a:	429c      	cmp	r4, r3
   22f3c:	f2c0 82a7 	blt.w	2348e <_dtoa_r+0x60e>
   22f40:	f64f 430e 	movw	r3, #64526	; 0xfc0e
   22f44:	f504 6282 	add.w	r2, r4, #1040	; 0x410
   22f48:	f6cf 73ff 	movt	r3, #65535	; 0xffff
   22f4c:	3202      	adds	r2, #2
   22f4e:	1b1b      	subs	r3, r3, r4
   22f50:	fa2a f202 	lsr.w	r2, sl, r2
   22f54:	fa05 f303 	lsl.w	r3, r5, r3
   22f58:	ea43 0002 	orr.w	r0, r3, r2
   22f5c:	f7f0 f9ae 	bl	132bc <__aeabi_ui2d>
   22f60:	3c01      	subs	r4, #1
   22f62:	2501      	movs	r5, #1
   22f64:	9517      	str	r5, [sp, #92]	; 0x5c
   22f66:	460b      	mov	r3, r1
   22f68:	4602      	mov	r2, r0
   22f6a:	e9cd 2308 	strd	r2, r3, [sp, #32]
   22f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   22f70:	f1a3 73f8 	sub.w	r3, r3, #32505856	; 0x1f00000
   22f74:	9309      	str	r3, [sp, #36]	; 0x24
   22f76:	2300      	movs	r3, #0
   22f78:	2200      	movs	r2, #0
   22f7a:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
   22f7e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   22f82:	f7f0 f85d 	bl	13040 <__aeabi_dsub>
   22f86:	a358      	add	r3, pc, #352	; (adr r3, 230e8 <_dtoa_r+0x268>)
   22f88:	e9d3 2300 	ldrd	r2, r3, [r3]
   22f8c:	f7f0 fa0c 	bl	133a8 <__aeabi_dmul>
   22f90:	a357      	add	r3, pc, #348	; (adr r3, 230f0 <_dtoa_r+0x270>)
   22f92:	e9d3 2300 	ldrd	r2, r3, [r3]
   22f96:	f7f0 f855 	bl	13044 <__adddf3>
   22f9a:	4680      	mov	r8, r0
   22f9c:	4620      	mov	r0, r4
   22f9e:	4689      	mov	r9, r1
   22fa0:	f7f0 f99c 	bl	132dc <__aeabi_i2d>
   22fa4:	a354      	add	r3, pc, #336	; (adr r3, 230f8 <_dtoa_r+0x278>)
   22fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
   22faa:	f7f0 f9fd 	bl	133a8 <__aeabi_dmul>
   22fae:	4602      	mov	r2, r0
   22fb0:	460b      	mov	r3, r1
   22fb2:	4640      	mov	r0, r8
   22fb4:	4649      	mov	r1, r9
   22fb6:	f7f0 f845 	bl	13044 <__adddf3>
   22fba:	4680      	mov	r8, r0
   22fbc:	4689      	mov	r9, r1
   22fbe:	f002 fedf 	bl	25d80 <__aeabi_d2iz>
   22fc2:	4649      	mov	r1, r9
   22fc4:	2200      	movs	r2, #0
   22fc6:	2300      	movs	r3, #0
   22fc8:	9007      	str	r0, [sp, #28]
   22fca:	4640      	mov	r0, r8
   22fcc:	f002 feb0 	bl	25d30 <__aeabi_dcmplt>
   22fd0:	b150      	cbz	r0, 22fe8 <_dtoa_r+0x168>
   22fd2:	9807      	ldr	r0, [sp, #28]
   22fd4:	f7f0 f982 	bl	132dc <__aeabi_i2d>
   22fd8:	4642      	mov	r2, r8
   22fda:	464b      	mov	r3, r9
   22fdc:	f002 fe9e 	bl	25d1c <__aeabi_dcmpeq>
   22fe0:	b910      	cbnz	r0, 22fe8 <_dtoa_r+0x168>
   22fe2:	9d07      	ldr	r5, [sp, #28]
   22fe4:	3d01      	subs	r5, #1
   22fe6:	9507      	str	r5, [sp, #28]
   22fe8:	9d07      	ldr	r5, [sp, #28]
   22fea:	2d16      	cmp	r5, #22
   22fec:	f200 8165 	bhi.w	232ba <_dtoa_r+0x43a>
   22ff0:	f24d 1140 	movw	r1, #53568	; 0xd140
   22ff4:	4652      	mov	r2, sl
   22ff6:	f2c0 0102 	movt	r1, #2
   22ffa:	465b      	mov	r3, fp
   22ffc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   23000:	e9d1 0100 	ldrd	r0, r1, [r1]
   23004:	f002 feb2 	bl	25d6c <__aeabi_dcmpgt>
   23008:	2800      	cmp	r0, #0
   2300a:	f000 823d 	beq.w	23488 <_dtoa_r+0x608>
   2300e:	9d07      	ldr	r5, [sp, #28]
   23010:	3d01      	subs	r5, #1
   23012:	9507      	str	r5, [sp, #28]
   23014:	2500      	movs	r5, #0
   23016:	9515      	str	r5, [sp, #84]	; 0x54
   23018:	1b3c      	subs	r4, r7, r4
   2301a:	3c01      	subs	r4, #1
   2301c:	f100 822f 	bmi.w	2347e <_dtoa_r+0x5fe>
   23020:	2500      	movs	r5, #0
   23022:	940b      	str	r4, [sp, #44]	; 0x2c
   23024:	950e      	str	r5, [sp, #56]	; 0x38
   23026:	9c07      	ldr	r4, [sp, #28]
   23028:	2c00      	cmp	r4, #0
   2302a:	f2c0 821f 	blt.w	2346c <_dtoa_r+0x5ec>
   2302e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   23030:	9414      	str	r4, [sp, #80]	; 0x50
   23032:	192d      	adds	r5, r5, r4
   23034:	2400      	movs	r4, #0
   23036:	950b      	str	r5, [sp, #44]	; 0x2c
   23038:	9412      	str	r4, [sp, #72]	; 0x48
   2303a:	9d28      	ldr	r5, [sp, #160]	; 0xa0
   2303c:	2d09      	cmp	r5, #9
   2303e:	d861      	bhi.n	23104 <_dtoa_r+0x284>
   23040:	2d05      	cmp	r5, #5
   23042:	f340 868d 	ble.w	23d60 <_dtoa_r+0xee0>
   23046:	3d04      	subs	r5, #4
   23048:	9528      	str	r5, [sp, #160]	; 0xa0
   2304a:	2500      	movs	r5, #0
   2304c:	9c28      	ldr	r4, [sp, #160]	; 0xa0
   2304e:	1ea3      	subs	r3, r4, #2
   23050:	2b03      	cmp	r3, #3
   23052:	d859      	bhi.n	23108 <_dtoa_r+0x288>
   23054:	e8df f013 	tbh	[pc, r3, lsl #1]
   23058:	03a703bb 	.word	0x03a703bb
   2305c:	03b80264 	.word	0x03b80264
   23060:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   23062:	f24d 00c4 	movw	r0, #53444	; 0xd0c4
   23066:	f242 730f 	movw	r3, #9999	; 0x270f
   2306a:	f2c0 0002 	movt	r0, #2
   2306e:	6023      	str	r3, [r4, #0]
   23070:	f1ba 0f00 	cmp.w	sl, #0
   23074:	d00f      	beq.n	23096 <_dtoa_r+0x216>
   23076:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
   23078:	2d00      	cmp	r5, #0
   2307a:	f43f af43 	beq.w	22f04 <_dtoa_r+0x84>
   2307e:	78c3      	ldrb	r3, [r0, #3]
   23080:	b9c3      	cbnz	r3, 230b4 <_dtoa_r+0x234>
   23082:	1cc3      	adds	r3, r0, #3
   23084:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   23086:	6023      	str	r3, [r4, #0]
   23088:	e73c      	b.n	22f04 <_dtoa_r+0x84>
   2308a:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
   2308e:	2301      	movs	r3, #1
   23090:	46ab      	mov	fp, r5
   23092:	6023      	str	r3, [r4, #0]
   23094:	e713      	b.n	22ebe <_dtoa_r+0x3e>
   23096:	f24d 02b8 	movw	r2, #53432	; 0xd0b8
   2309a:	f24d 03c4 	movw	r3, #53444	; 0xd0c4
   2309e:	f3c5 0013 	ubfx	r0, r5, #0, #20
   230a2:	f2c0 0202 	movt	r2, #2
   230a6:	f2c0 0302 	movt	r3, #2
   230aa:	2800      	cmp	r0, #0
   230ac:	bf0c      	ite	eq
   230ae:	4610      	moveq	r0, r2
   230b0:	4618      	movne	r0, r3
   230b2:	e7e0      	b.n	23076 <_dtoa_r+0x1f6>
   230b4:	f100 0308 	add.w	r3, r0, #8
   230b8:	e7e4      	b.n	23084 <_dtoa_r+0x204>
   230ba:	4649      	mov	r1, r9
   230bc:	4640      	mov	r0, r8
   230be:	e9cd 0108 	strd	r0, r1, [sp, #32]
   230c2:	f5a4 747e 	sub.w	r4, r4, #1016	; 0x3f8
   230c6:	9909      	ldr	r1, [sp, #36]	; 0x24
   230c8:	2500      	movs	r5, #0
   230ca:	3c07      	subs	r4, #7
   230cc:	9f1c      	ldr	r7, [sp, #112]	; 0x70
   230ce:	f021 437f 	bic.w	r3, r1, #4278190080	; 0xff000000
   230d2:	9517      	str	r5, [sp, #92]	; 0x5c
   230d4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
   230d8:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
   230dc:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
   230e0:	9309      	str	r3, [sp, #36]	; 0x24
   230e2:	e748      	b.n	22f76 <_dtoa_r+0xf6>
   230e4:	f3af 8000 	nop.w
   230e8:	636f4361 	.word	0x636f4361
   230ec:	3fd287a7 	.word	0x3fd287a7
   230f0:	8b60c8b3 	.word	0x8b60c8b3
   230f4:	3fc68a28 	.word	0x3fc68a28
   230f8:	509f79fb 	.word	0x509f79fb
   230fc:	3fd34413 	.word	0x3fd34413
   23100:	0002cfb1 	.word	0x0002cfb1
   23104:	2400      	movs	r4, #0
   23106:	9428      	str	r4, [sp, #160]	; 0xa0
   23108:	6a74      	ldr	r4, [r6, #36]	; 0x24
   2310a:	2300      	movs	r3, #0
   2310c:	4619      	mov	r1, r3
   2310e:	4630      	mov	r0, r6
   23110:	f04f 35ff 	mov.w	r5, #4294967295
   23114:	9329      	str	r3, [sp, #164]	; 0xa4
   23116:	6063      	str	r3, [r4, #4]
   23118:	9510      	str	r5, [sp, #64]	; 0x40
   2311a:	950d      	str	r5, [sp, #52]	; 0x34
   2311c:	f001 fa30 	bl	24580 <_Balloc>
   23120:	6a73      	ldr	r3, [r6, #36]	; 0x24
   23122:	2501      	movs	r5, #1
   23124:	9513      	str	r5, [sp, #76]	; 0x4c
   23126:	6020      	str	r0, [r4, #0]
   23128:	681b      	ldr	r3, [r3, #0]
   2312a:	930f      	str	r3, [sp, #60]	; 0x3c
   2312c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   2312e:	9d07      	ldr	r5, [sp, #28]
   23130:	43dc      	mvns	r4, r3
   23132:	0fe4      	lsrs	r4, r4, #31
   23134:	2d0e      	cmp	r5, #14
   23136:	bfcc      	ite	gt
   23138:	2400      	movgt	r4, #0
   2313a:	f004 0401 	andle.w	r4, r4, #1
   2313e:	2c00      	cmp	r4, #0
   23140:	f000 80be 	beq.w	232c0 <_dtoa_r+0x440>
   23144:	9c29      	ldr	r4, [sp, #164]	; 0xa4
   23146:	f24d 1340 	movw	r3, #53568	; 0xd140
   2314a:	f2c0 0302 	movt	r3, #2
   2314e:	0fe5      	lsrs	r5, r4, #31
   23150:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   23152:	2c00      	cmp	r4, #0
   23154:	bfcc      	ite	gt
   23156:	2500      	movgt	r5, #0
   23158:	f005 0501 	andle.w	r5, r5, #1
   2315c:	9c07      	ldr	r4, [sp, #28]
   2315e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   23162:	e9d3 0100 	ldrd	r0, r1, [r3]
   23166:	e9cd 0104 	strd	r0, r1, [sp, #16]
   2316a:	2d00      	cmp	r5, #0
   2316c:	f040 81bc 	bne.w	234e8 <_dtoa_r+0x668>
   23170:	4602      	mov	r2, r0
   23172:	460b      	mov	r3, r1
   23174:	4650      	mov	r0, sl
   23176:	4659      	mov	r1, fp
   23178:	f7f0 fa40 	bl	135fc <__aeabi_ddiv>
   2317c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   2317e:	f002 fdff 	bl	25d80 <__aeabi_d2iz>
   23182:	4680      	mov	r8, r0
   23184:	f7f0 f8aa 	bl	132dc <__aeabi_i2d>
   23188:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   2318c:	f7f0 f90c 	bl	133a8 <__aeabi_dmul>
   23190:	460b      	mov	r3, r1
   23192:	4602      	mov	r2, r0
   23194:	4659      	mov	r1, fp
   23196:	4650      	mov	r0, sl
   23198:	f7ef ff52 	bl	13040 <__aeabi_dsub>
   2319c:	f108 0330 	add.w	r3, r8, #48	; 0x30
   231a0:	f804 3b01 	strb.w	r3, [r4], #1
   231a4:	46a1      	mov	r9, r4
   231a6:	9411      	str	r4, [sp, #68]	; 0x44
   231a8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   231aa:	2c01      	cmp	r4, #1
   231ac:	4682      	mov	sl, r0
   231ae:	468b      	mov	fp, r1
   231b0:	d04b      	beq.n	2324a <_dtoa_r+0x3ca>
   231b2:	2300      	movs	r3, #0
   231b4:	2200      	movs	r2, #0
   231b6:	f2c4 0324 	movt	r3, #16420	; 0x4024
   231ba:	2401      	movs	r4, #1
   231bc:	f7f0 f8f4 	bl	133a8 <__aeabi_dmul>
   231c0:	2200      	movs	r2, #0
   231c2:	2300      	movs	r3, #0
   231c4:	4682      	mov	sl, r0
   231c6:	468b      	mov	fp, r1
   231c8:	f002 fda8 	bl	25d1c <__aeabi_dcmpeq>
   231cc:	b100      	cbz	r0, 231d0 <_dtoa_r+0x350>
   231ce:	462c      	mov	r4, r5
   231d0:	f014 0fff 	tst.w	r4, #255	; 0xff
   231d4:	f000 812d 	beq.w	23432 <_dtoa_r+0x5b2>
   231d8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   231da:	980d      	ldr	r0, [sp, #52]	; 0x34
   231dc:	9c11      	ldr	r4, [sp, #68]	; 0x44
   231de:	182b      	adds	r3, r5, r0
   231e0:	960a      	str	r6, [sp, #40]	; 0x28
   231e2:	461f      	mov	r7, r3
   231e4:	e00d      	b.n	23202 <_dtoa_r+0x382>
   231e6:	f7f0 f8df 	bl	133a8 <__aeabi_dmul>
   231ea:	2200      	movs	r2, #0
   231ec:	2300      	movs	r3, #0
   231ee:	4682      	mov	sl, r0
   231f0:	468b      	mov	fp, r1
   231f2:	f002 fd93 	bl	25d1c <__aeabi_dcmpeq>
   231f6:	b100      	cbz	r0, 231fa <_dtoa_r+0x37a>
   231f8:	2600      	movs	r6, #0
   231fa:	f016 0fff 	tst.w	r6, #255	; 0xff
   231fe:	f000 84e9 	beq.w	23bd4 <_dtoa_r+0xd54>
   23202:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   23206:	4650      	mov	r0, sl
   23208:	4659      	mov	r1, fp
   2320a:	2601      	movs	r6, #1
   2320c:	f7f0 f9f6 	bl	135fc <__aeabi_ddiv>
   23210:	f002 fdb6 	bl	25d80 <__aeabi_d2iz>
   23214:	4680      	mov	r8, r0
   23216:	f7f0 f861 	bl	132dc <__aeabi_i2d>
   2321a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   2321e:	f108 0530 	add.w	r5, r8, #48	; 0x30
   23222:	f7f0 f8c1 	bl	133a8 <__aeabi_dmul>
   23226:	4602      	mov	r2, r0
   23228:	460b      	mov	r3, r1
   2322a:	4650      	mov	r0, sl
   2322c:	4659      	mov	r1, fp
   2322e:	f7ef ff07 	bl	13040 <__aeabi_dsub>
   23232:	2300      	movs	r3, #0
   23234:	f804 5b01 	strb.w	r5, [r4], #1
   23238:	2200      	movs	r2, #0
   2323a:	42bc      	cmp	r4, r7
   2323c:	f2c4 0324 	movt	r3, #16420	; 0x4024
   23240:	46a1      	mov	r9, r4
   23242:	4682      	mov	sl, r0
   23244:	468b      	mov	fp, r1
   23246:	d1ce      	bne.n	231e6 <_dtoa_r+0x366>
   23248:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   2324a:	4652      	mov	r2, sl
   2324c:	465b      	mov	r3, fp
   2324e:	4650      	mov	r0, sl
   23250:	4659      	mov	r1, fp
   23252:	f7ef fef7 	bl	13044 <__adddf3>
   23256:	4604      	mov	r4, r0
   23258:	460d      	mov	r5, r1
   2325a:	4622      	mov	r2, r4
   2325c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   23260:	462b      	mov	r3, r5
   23262:	f002 fd65 	bl	25d30 <__aeabi_dcmplt>
   23266:	b960      	cbnz	r0, 23282 <_dtoa_r+0x402>
   23268:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   2326c:	4622      	mov	r2, r4
   2326e:	462b      	mov	r3, r5
   23270:	f002 fd54 	bl	25d1c <__aeabi_dcmpeq>
   23274:	2800      	cmp	r0, #0
   23276:	f000 80dc 	beq.w	23432 <_dtoa_r+0x5b2>
   2327a:	f018 0f01 	tst.w	r8, #1
   2327e:	f000 80d8 	beq.w	23432 <_dtoa_r+0x5b2>
   23282:	9d07      	ldr	r5, [sp, #28]
   23284:	f819 4c01 	ldrb.w	r4, [r9, #-1]
   23288:	951a      	str	r5, [sp, #104]	; 0x68
   2328a:	464b      	mov	r3, r9
   2328c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   2328e:	e002      	b.n	23296 <_dtoa_r+0x416>
   23290:	f813 4c02 	ldrb.w	r4, [r3, #-2]
   23294:	3b01      	subs	r3, #1
   23296:	2c39      	cmp	r4, #57	; 0x39
   23298:	4699      	mov	r9, r3
   2329a:	f040 84d3 	bne.w	23c44 <_dtoa_r+0xdc4>
   2329e:	4293      	cmp	r3, r2
   232a0:	d1f6      	bne.n	23290 <_dtoa_r+0x410>
   232a2:	9d11      	ldr	r5, [sp, #68]	; 0x44
   232a4:	2330      	movs	r3, #48	; 0x30
   232a6:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   232a8:	f805 3c01 	strb.w	r3, [r5, #-1]
   232ac:	462b      	mov	r3, r5
   232ae:	3401      	adds	r4, #1
   232b0:	9407      	str	r4, [sp, #28]
   232b2:	2431      	movs	r4, #49	; 0x31
   232b4:	f803 4c01 	strb.w	r4, [r3, #-1]
   232b8:	e0bb      	b.n	23432 <_dtoa_r+0x5b2>
   232ba:	2501      	movs	r5, #1
   232bc:	9515      	str	r5, [sp, #84]	; 0x54
   232be:	e6ab      	b.n	23018 <_dtoa_r+0x198>
   232c0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   232c2:	2d00      	cmp	r5, #0
   232c4:	f040 80eb 	bne.w	2349e <_dtoa_r+0x61e>
   232c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   232ca:	9c12      	ldr	r4, [sp, #72]	; 0x48
   232cc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   232ce:	9308      	str	r3, [sp, #32]
   232d0:	2d00      	cmp	r5, #0
   232d2:	980b      	ldr	r0, [sp, #44]	; 0x2c
   232d4:	bfd4      	ite	le
   232d6:	2300      	movle	r3, #0
   232d8:	2301      	movgt	r3, #1
   232da:	2800      	cmp	r0, #0
   232dc:	bfd4      	ite	le
   232de:	2300      	movle	r3, #0
   232e0:	f003 0301 	andgt.w	r3, r3, #1
   232e4:	b14b      	cbz	r3, 232fa <_dtoa_r+0x47a>
   232e6:	4603      	mov	r3, r0
   232e8:	990e      	ldr	r1, [sp, #56]	; 0x38
   232ea:	42ab      	cmp	r3, r5
   232ec:	bfa8      	it	ge
   232ee:	462b      	movge	r3, r5
   232f0:	1aed      	subs	r5, r5, r3
   232f2:	1ac9      	subs	r1, r1, r3
   232f4:	1ac0      	subs	r0, r0, r3
   232f6:	910e      	str	r1, [sp, #56]	; 0x38
   232f8:	900b      	str	r0, [sp, #44]	; 0x2c
   232fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
   232fc:	2a00      	cmp	r2, #0
   232fe:	dd1a      	ble.n	23336 <_dtoa_r+0x4b6>
   23300:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   23302:	2b00      	cmp	r3, #0
   23304:	f000 8468 	beq.w	23bd8 <_dtoa_r+0xd58>
   23308:	2c00      	cmp	r4, #0
   2330a:	dd10      	ble.n	2332e <_dtoa_r+0x4ae>
   2330c:	9908      	ldr	r1, [sp, #32]
   2330e:	4622      	mov	r2, r4
   23310:	4630      	mov	r0, r6
   23312:	f001 fb07 	bl	24924 <__pow5mult>
   23316:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   23318:	9008      	str	r0, [sp, #32]
   2331a:	4630      	mov	r0, r6
   2331c:	9908      	ldr	r1, [sp, #32]
   2331e:	f001 fa63 	bl	247e8 <__multiply>
   23322:	990c      	ldr	r1, [sp, #48]	; 0x30
   23324:	4607      	mov	r7, r0
   23326:	4630      	mov	r0, r6
   23328:	f001 f960 	bl	245ec <_Bfree>
   2332c:	970c      	str	r7, [sp, #48]	; 0x30
   2332e:	9812      	ldr	r0, [sp, #72]	; 0x48
   23330:	1b02      	subs	r2, r0, r4
   23332:	f040 8474 	bne.w	23c1e <_dtoa_r+0xd9e>
   23336:	2101      	movs	r1, #1
   23338:	4630      	mov	r0, r6
   2333a:	f001 fa4b 	bl	247d4 <__i2b>
   2333e:	9914      	ldr	r1, [sp, #80]	; 0x50
   23340:	2900      	cmp	r1, #0
   23342:	4604      	mov	r4, r0
   23344:	dd05      	ble.n	23352 <_dtoa_r+0x4d2>
   23346:	4621      	mov	r1, r4
   23348:	4630      	mov	r0, r6
   2334a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   2334c:	f001 faea 	bl	24924 <__pow5mult>
   23350:	4604      	mov	r4, r0
   23352:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   23354:	2a01      	cmp	r2, #1
   23356:	f340 823d 	ble.w	237d4 <_dtoa_r+0x954>
   2335a:	2700      	movs	r7, #0
   2335c:	9914      	ldr	r1, [sp, #80]	; 0x50
   2335e:	2301      	movs	r3, #1
   23360:	2900      	cmp	r1, #0
   23362:	f040 83b6 	bne.w	23ad2 <_dtoa_r+0xc52>
   23366:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   23368:	189b      	adds	r3, r3, r2
   2336a:	f013 031f 	ands.w	r3, r3, #31
   2336e:	f000 82fb 	beq.w	23968 <_dtoa_r+0xae8>
   23372:	f1c3 0220 	rsb	r2, r3, #32
   23376:	2a04      	cmp	r2, #4
   23378:	f340 84ed 	ble.w	23d56 <_dtoa_r+0xed6>
   2337c:	f1c3 031c 	rsb	r3, r3, #28
   23380:	980e      	ldr	r0, [sp, #56]	; 0x38
   23382:	990b      	ldr	r1, [sp, #44]	; 0x2c
   23384:	18ed      	adds	r5, r5, r3
   23386:	18c0      	adds	r0, r0, r3
   23388:	900e      	str	r0, [sp, #56]	; 0x38
   2338a:	18c9      	adds	r1, r1, r3
   2338c:	910b      	str	r1, [sp, #44]	; 0x2c
   2338e:	990e      	ldr	r1, [sp, #56]	; 0x38
   23390:	2900      	cmp	r1, #0
   23392:	dd05      	ble.n	233a0 <_dtoa_r+0x520>
   23394:	4630      	mov	r0, r6
   23396:	990c      	ldr	r1, [sp, #48]	; 0x30
   23398:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2339a:	f001 fb13 	bl	249c4 <__lshift>
   2339e:	900c      	str	r0, [sp, #48]	; 0x30
   233a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   233a2:	2a00      	cmp	r2, #0
   233a4:	dd04      	ble.n	233b0 <_dtoa_r+0x530>
   233a6:	4621      	mov	r1, r4
   233a8:	4630      	mov	r0, r6
   233aa:	f001 fb0b 	bl	249c4 <__lshift>
   233ae:	4604      	mov	r4, r0
   233b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   233b2:	2b00      	cmp	r3, #0
   233b4:	f040 8396 	bne.w	23ae4 <_dtoa_r+0xc64>
   233b8:	9828      	ldr	r0, [sp, #160]	; 0xa0
   233ba:	990d      	ldr	r1, [sp, #52]	; 0x34
   233bc:	2802      	cmp	r0, #2
   233be:	bfd4      	ite	le
   233c0:	2300      	movle	r3, #0
   233c2:	2301      	movgt	r3, #1
   233c4:	2900      	cmp	r1, #0
   233c6:	bfcc      	ite	gt
   233c8:	2300      	movgt	r3, #0
   233ca:	f003 0301 	andle.w	r3, r3, #1
   233ce:	2b00      	cmp	r3, #0
   233d0:	f000 824d 	beq.w	2386e <_dtoa_r+0x9ee>
   233d4:	2900      	cmp	r1, #0
   233d6:	f040 809c 	bne.w	23512 <_dtoa_r+0x692>
   233da:	4621      	mov	r1, r4
   233dc:	2205      	movs	r2, #5
   233de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   233e0:	4630      	mov	r0, r6
   233e2:	f001 f91f 	bl	24624 <__multadd>
   233e6:	4604      	mov	r4, r0
   233e8:	980c      	ldr	r0, [sp, #48]	; 0x30
   233ea:	4621      	mov	r1, r4
   233ec:	f001 fb48 	bl	24a80 <__mcmp>
   233f0:	2800      	cmp	r0, #0
   233f2:	f340 808e 	ble.w	23512 <_dtoa_r+0x692>
   233f6:	9d07      	ldr	r5, [sp, #28]
   233f8:	2331      	movs	r3, #49	; 0x31
   233fa:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   233fe:	3501      	adds	r5, #1
   23400:	9507      	str	r5, [sp, #28]
   23402:	2500      	movs	r5, #0
   23404:	f809 3b01 	strb.w	r3, [r9], #1
   23408:	4621      	mov	r1, r4
   2340a:	4630      	mov	r0, r6
   2340c:	f001 f8ee 	bl	245ec <_Bfree>
   23410:	9c08      	ldr	r4, [sp, #32]
   23412:	b174      	cbz	r4, 23432 <_dtoa_r+0x5b2>
   23414:	1c2b      	adds	r3, r5, #0
   23416:	bf18      	it	ne
   23418:	2301      	movne	r3, #1
   2341a:	42a5      	cmp	r5, r4
   2341c:	bf0c      	ite	eq
   2341e:	2300      	moveq	r3, #0
   23420:	f003 0301 	andne.w	r3, r3, #1
   23424:	2b00      	cmp	r3, #0
   23426:	f040 829a 	bne.w	2395e <_dtoa_r+0xade>
   2342a:	4630      	mov	r0, r6
   2342c:	9908      	ldr	r1, [sp, #32]
   2342e:	f001 f8dd 	bl	245ec <_Bfree>
   23432:	4630      	mov	r0, r6
   23434:	990c      	ldr	r1, [sp, #48]	; 0x30
   23436:	f001 f8d9 	bl	245ec <_Bfree>
   2343a:	9d07      	ldr	r5, [sp, #28]
   2343c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   2343e:	2200      	movs	r2, #0
   23440:	1c6b      	adds	r3, r5, #1
   23442:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
   23444:	f889 2000 	strb.w	r2, [r9]
   23448:	980f      	ldr	r0, [sp, #60]	; 0x3c
   2344a:	6023      	str	r3, [r4, #0]
   2344c:	2d00      	cmp	r5, #0
   2344e:	f43f ad59 	beq.w	22f04 <_dtoa_r+0x84>
   23452:	f8c5 9000 	str.w	r9, [r5]
   23456:	980f      	ldr	r0, [sp, #60]	; 0x3c
   23458:	e554      	b.n	22f04 <_dtoa_r+0x84>
   2345a:	2010      	movs	r0, #16
   2345c:	f7fc fda6 	bl	1ffac <malloc>
   23460:	6270      	str	r0, [r6, #36]	; 0x24
   23462:	6045      	str	r5, [r0, #4]
   23464:	6085      	str	r5, [r0, #8]
   23466:	6005      	str	r5, [r0, #0]
   23468:	60c5      	str	r5, [r0, #12]
   2346a:	e522      	b.n	22eb2 <_dtoa_r+0x32>
   2346c:	9c07      	ldr	r4, [sp, #28]
   2346e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   23470:	1b2d      	subs	r5, r5, r4
   23472:	950e      	str	r5, [sp, #56]	; 0x38
   23474:	4265      	negs	r5, r4
   23476:	2400      	movs	r4, #0
   23478:	9512      	str	r5, [sp, #72]	; 0x48
   2347a:	9414      	str	r4, [sp, #80]	; 0x50
   2347c:	e5dd      	b.n	2303a <_dtoa_r+0x1ba>
   2347e:	4264      	negs	r4, r4
   23480:	940e      	str	r4, [sp, #56]	; 0x38
   23482:	2400      	movs	r4, #0
   23484:	940b      	str	r4, [sp, #44]	; 0x2c
   23486:	e5ce      	b.n	23026 <_dtoa_r+0x1a6>
   23488:	2500      	movs	r5, #0
   2348a:	9515      	str	r5, [sp, #84]	; 0x54
   2348c:	e5c4      	b.n	23018 <_dtoa_r+0x198>
   2348e:	f64f 32ee 	movw	r2, #64494	; 0xfbee
   23492:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   23496:	1b12      	subs	r2, r2, r4
   23498:	fa0a f002 	lsl.w	r0, sl, r2
   2349c:	e55e      	b.n	22f5c <_dtoa_r+0xdc>
   2349e:	9d28      	ldr	r5, [sp, #160]	; 0xa0
   234a0:	2d01      	cmp	r5, #1
   234a2:	f340 83c6 	ble.w	23c32 <_dtoa_r+0xdb2>
   234a6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   234a8:	1e6b      	subs	r3, r5, #1
   234aa:	9d12      	ldr	r5, [sp, #72]	; 0x48
   234ac:	429d      	cmp	r5, r3
   234ae:	bfaf      	iteee	ge
   234b0:	ebc3 0405 	rsbge	r4, r3, r5
   234b4:	9d12      	ldrlt	r5, [sp, #72]	; 0x48
   234b6:	9312      	strlt	r3, [sp, #72]	; 0x48
   234b8:	ebc5 0203 	rsblt	r2, r5, r3
   234bc:	bfbe      	ittt	lt
   234be:	9d14      	ldrlt	r5, [sp, #80]	; 0x50
   234c0:	18ad      	addlt	r5, r5, r2
   234c2:	9514      	strlt	r5, [sp, #80]	; 0x50
   234c4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   234c6:	2d00      	cmp	r5, #0
   234c8:	f2c0 83c6 	blt.w	23c58 <_dtoa_r+0xdd8>
   234cc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   234ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   234d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   234d2:	4630      	mov	r0, r6
   234d4:	2101      	movs	r1, #1
   234d6:	18d2      	adds	r2, r2, r3
   234d8:	920e      	str	r2, [sp, #56]	; 0x38
   234da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   234dc:	18d2      	adds	r2, r2, r3
   234de:	920b      	str	r2, [sp, #44]	; 0x2c
   234e0:	f001 f978 	bl	247d4 <__i2b>
   234e4:	9008      	str	r0, [sp, #32]
   234e6:	e6f3      	b.n	232d0 <_dtoa_r+0x450>
   234e8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   234ea:	2d00      	cmp	r5, #0
   234ec:	f040 839e 	bne.w	23c2c <_dtoa_r+0xdac>
   234f0:	2300      	movs	r3, #0
   234f2:	2200      	movs	r2, #0
   234f4:	f2c4 0314 	movt	r3, #16404	; 0x4014
   234f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   234fc:	f7ef ff54 	bl	133a8 <__aeabi_dmul>
   23500:	4652      	mov	r2, sl
   23502:	465b      	mov	r3, fp
   23504:	f002 fc28 	bl	25d58 <__aeabi_dcmpge>
   23508:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   2350a:	9408      	str	r4, [sp, #32]
   2350c:	2800      	cmp	r0, #0
   2350e:	f43f af72 	beq.w	233f6 <_dtoa_r+0x576>
   23512:	9d29      	ldr	r5, [sp, #164]	; 0xa4
   23514:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   23518:	43ed      	mvns	r5, r5
   2351a:	9507      	str	r5, [sp, #28]
   2351c:	2500      	movs	r5, #0
   2351e:	e773      	b.n	23408 <_dtoa_r+0x588>
   23520:	2401      	movs	r4, #1
   23522:	9413      	str	r4, [sp, #76]	; 0x4c
   23524:	9c29      	ldr	r4, [sp, #164]	; 0xa4
   23526:	2c00      	cmp	r4, #0
   23528:	f340 82fe 	ble.w	23b28 <_dtoa_r+0xca8>
   2352c:	4620      	mov	r0, r4
   2352e:	2c0e      	cmp	r4, #14
   23530:	bf8c      	ite	hi
   23532:	2500      	movhi	r5, #0
   23534:	f005 0501 	andls.w	r5, r5, #1
   23538:	9410      	str	r4, [sp, #64]	; 0x40
   2353a:	940d      	str	r4, [sp, #52]	; 0x34
   2353c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   2353e:	2300      	movs	r3, #0
   23540:	2817      	cmp	r0, #23
   23542:	6063      	str	r3, [r4, #4]
   23544:	d909      	bls.n	2355a <_dtoa_r+0x6da>
   23546:	2201      	movs	r2, #1
   23548:	2304      	movs	r3, #4
   2354a:	005b      	lsls	r3, r3, #1
   2354c:	4617      	mov	r7, r2
   2354e:	f103 0114 	add.w	r1, r3, #20
   23552:	3201      	adds	r2, #1
   23554:	4281      	cmp	r1, r0
   23556:	d9f8      	bls.n	2354a <_dtoa_r+0x6ca>
   23558:	6067      	str	r7, [r4, #4]
   2355a:	4630      	mov	r0, r6
   2355c:	6861      	ldr	r1, [r4, #4]
   2355e:	f001 f80f 	bl	24580 <_Balloc>
   23562:	6a73      	ldr	r3, [r6, #36]	; 0x24
   23564:	6020      	str	r0, [r4, #0]
   23566:	681b      	ldr	r3, [r3, #0]
   23568:	930f      	str	r3, [sp, #60]	; 0x3c
   2356a:	2d00      	cmp	r5, #0
   2356c:	f43f adde 	beq.w	2312c <_dtoa_r+0x2ac>
   23570:	9c07      	ldr	r4, [sp, #28]
   23572:	4652      	mov	r2, sl
   23574:	465b      	mov	r3, fp
   23576:	e9cd 2308 	strd	r2, r3, [sp, #32]
   2357a:	2c00      	cmp	r4, #0
   2357c:	f340 8213 	ble.w	239a6 <_dtoa_r+0xb26>
   23580:	f004 020f 	and.w	r2, r4, #15
   23584:	f24d 1340 	movw	r3, #53568	; 0xd140
   23588:	f2c0 0302 	movt	r3, #2
   2358c:	1124      	asrs	r4, r4, #4
   2358e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   23592:	2702      	movs	r7, #2
   23594:	06e1      	lsls	r1, r4, #27
   23596:	e9d3 8900 	ldrd	r8, r9, [r3]
   2359a:	d50e      	bpl.n	235ba <_dtoa_r+0x73a>
   2359c:	f24d 2330 	movw	r3, #53808	; 0xd230
   235a0:	4650      	mov	r0, sl
   235a2:	f2c0 0302 	movt	r3, #2
   235a6:	4659      	mov	r1, fp
   235a8:	f004 040f 	and.w	r4, r4, #15
   235ac:	2703      	movs	r7, #3
   235ae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   235b2:	f7f0 f823 	bl	135fc <__aeabi_ddiv>
   235b6:	4682      	mov	sl, r0
   235b8:	468b      	mov	fp, r1
   235ba:	b18c      	cbz	r4, 235e0 <_dtoa_r+0x760>
   235bc:	f24d 2530 	movw	r5, #53808	; 0xd230
   235c0:	f2c0 0502 	movt	r5, #2
   235c4:	07e2      	lsls	r2, r4, #31
   235c6:	4640      	mov	r0, r8
   235c8:	4649      	mov	r1, r9
   235ca:	d506      	bpl.n	235da <_dtoa_r+0x75a>
   235cc:	e9d5 2300 	ldrd	r2, r3, [r5]
   235d0:	3701      	adds	r7, #1
   235d2:	f7ef fee9 	bl	133a8 <__aeabi_dmul>
   235d6:	4680      	mov	r8, r0
   235d8:	4689      	mov	r9, r1
   235da:	3508      	adds	r5, #8
   235dc:	1064      	asrs	r4, r4, #1
   235de:	d1f1      	bne.n	235c4 <_dtoa_r+0x744>
   235e0:	4650      	mov	r0, sl
   235e2:	4659      	mov	r1, fp
   235e4:	4642      	mov	r2, r8
   235e6:	464b      	mov	r3, r9
   235e8:	f7f0 f808 	bl	135fc <__aeabi_ddiv>
   235ec:	4682      	mov	sl, r0
   235ee:	468b      	mov	fp, r1
   235f0:	9c15      	ldr	r4, [sp, #84]	; 0x54
   235f2:	2c00      	cmp	r4, #0
   235f4:	f000 8108 	beq.w	23808 <_dtoa_r+0x988>
   235f8:	2300      	movs	r3, #0
   235fa:	4650      	mov	r0, sl
   235fc:	4659      	mov	r1, fp
   235fe:	2200      	movs	r2, #0
   23600:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
   23604:	2401      	movs	r4, #1
   23606:	f002 fb93 	bl	25d30 <__aeabi_dcmplt>
   2360a:	b900      	cbnz	r0, 2360e <_dtoa_r+0x78e>
   2360c:	2400      	movs	r4, #0
   2360e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   23610:	2d00      	cmp	r5, #0
   23612:	bfd4      	ite	le
   23614:	2400      	movle	r4, #0
   23616:	f004 0401 	andgt.w	r4, r4, #1
   2361a:	2c00      	cmp	r4, #0
   2361c:	f000 80f4 	beq.w	23808 <_dtoa_r+0x988>
   23620:	9c10      	ldr	r4, [sp, #64]	; 0x40
   23622:	2c00      	cmp	r4, #0
   23624:	f340 81aa 	ble.w	2397c <_dtoa_r+0xafc>
   23628:	2300      	movs	r3, #0
   2362a:	2200      	movs	r2, #0
   2362c:	f2c4 0324 	movt	r3, #16420	; 0x4024
   23630:	4650      	mov	r0, sl
   23632:	4659      	mov	r1, fp
   23634:	f7ef feb8 	bl	133a8 <__aeabi_dmul>
   23638:	9d07      	ldr	r5, [sp, #28]
   2363a:	3d01      	subs	r5, #1
   2363c:	951a      	str	r5, [sp, #104]	; 0x68
   2363e:	4682      	mov	sl, r0
   23640:	1c78      	adds	r0, r7, #1
   23642:	468b      	mov	fp, r1
   23644:	f7ef fe4a 	bl	132dc <__aeabi_i2d>
   23648:	4602      	mov	r2, r0
   2364a:	460b      	mov	r3, r1
   2364c:	4650      	mov	r0, sl
   2364e:	4659      	mov	r1, fp
   23650:	f7ef feaa 	bl	133a8 <__aeabi_dmul>
   23654:	2300      	movs	r3, #0
   23656:	2200      	movs	r2, #0
   23658:	f2c4 031c 	movt	r3, #16412	; 0x401c
   2365c:	f7ef fcf2 	bl	13044 <__adddf3>
   23660:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   23664:	4680      	mov	r8, r0
   23666:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   2366a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   2366c:	2d00      	cmp	r5, #0
   2366e:	f000 81c6 	beq.w	239fe <_dtoa_r+0xb7e>
   23672:	f24d 1340 	movw	r3, #53568	; 0xd140
   23676:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   23678:	f2c0 0302 	movt	r3, #2
   2367c:	2100      	movs	r1, #0
   2367e:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
   23682:	2000      	movs	r0, #0
   23684:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
   23688:	f8cd c00c 	str.w	ip, [sp, #12]
   2368c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   23690:	9411      	str	r4, [sp, #68]	; 0x44
   23692:	f7ef ffb3 	bl	135fc <__aeabi_ddiv>
   23696:	464b      	mov	r3, r9
   23698:	4642      	mov	r2, r8
   2369a:	f7ef fcd1 	bl	13040 <__aeabi_dsub>
   2369e:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
   236a2:	4659      	mov	r1, fp
   236a4:	4650      	mov	r0, sl
   236a6:	f002 fb6b 	bl	25d80 <__aeabi_d2iz>
   236aa:	4604      	mov	r4, r0
   236ac:	f7ef fe16 	bl	132dc <__aeabi_i2d>
   236b0:	3430      	adds	r4, #48	; 0x30
   236b2:	b2e4      	uxtb	r4, r4
   236b4:	4602      	mov	r2, r0
   236b6:	460b      	mov	r3, r1
   236b8:	4650      	mov	r0, sl
   236ba:	4659      	mov	r1, fp
   236bc:	f7ef fcc0 	bl	13040 <__aeabi_dsub>
   236c0:	9d11      	ldr	r5, [sp, #68]	; 0x44
   236c2:	f805 4b01 	strb.w	r4, [r5], #1
   236c6:	46a9      	mov	r9, r5
   236c8:	9511      	str	r5, [sp, #68]	; 0x44
   236ca:	4682      	mov	sl, r0
   236cc:	468b      	mov	fp, r1
   236ce:	4652      	mov	r2, sl
   236d0:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
   236d4:	465b      	mov	r3, fp
   236d6:	f002 fb49 	bl	25d6c <__aeabi_dcmpgt>
   236da:	2800      	cmp	r0, #0
   236dc:	f040 832c 	bne.w	23d38 <_dtoa_r+0xeb8>
   236e0:	2100      	movs	r1, #0
   236e2:	4652      	mov	r2, sl
   236e4:	465b      	mov	r3, fp
   236e6:	2000      	movs	r0, #0
   236e8:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
   236ec:	f7ef fca8 	bl	13040 <__aeabi_dsub>
   236f0:	4602      	mov	r2, r0
   236f2:	460b      	mov	r3, r1
   236f4:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
   236f8:	f002 fb38 	bl	25d6c <__aeabi_dcmpgt>
   236fc:	f8dd c00c 	ldr.w	ip, [sp, #12]
   23700:	2800      	cmp	r0, #0
   23702:	f47f adc2 	bne.w	2328a <_dtoa_r+0x40a>
   23706:	f1bc 0f01 	cmp.w	ip, #1
   2370a:	f340 8137 	ble.w	2397c <_dtoa_r+0xafc>
   2370e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   23710:	961b      	str	r6, [sp, #108]	; 0x6c
   23712:	eb04 070c 	add.w	r7, r4, ip
   23716:	9d11      	ldr	r5, [sp, #68]	; 0x44
   23718:	9716      	str	r7, [sp, #88]	; 0x58
   2371a:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
   2371e:	e010      	b.n	23742 <_dtoa_r+0x8c2>
   23720:	2100      	movs	r1, #0
   23722:	2000      	movs	r0, #0
   23724:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
   23728:	f7ef fc8a 	bl	13040 <__aeabi_dsub>
   2372c:	4632      	mov	r2, r6
   2372e:	463b      	mov	r3, r7
   23730:	f002 fafe 	bl	25d30 <__aeabi_dcmplt>
   23734:	2800      	cmp	r0, #0
   23736:	f040 828c 	bne.w	23c52 <_dtoa_r+0xdd2>
   2373a:	9c16      	ldr	r4, [sp, #88]	; 0x58
   2373c:	42a5      	cmp	r5, r4
   2373e:	f000 811c 	beq.w	2397a <_dtoa_r+0xafa>
   23742:	2300      	movs	r3, #0
   23744:	2200      	movs	r2, #0
   23746:	f2c4 0324 	movt	r3, #16420	; 0x4024
   2374a:	4630      	mov	r0, r6
   2374c:	4639      	mov	r1, r7
   2374e:	f7ef fe2b 	bl	133a8 <__aeabi_dmul>
   23752:	2300      	movs	r3, #0
   23754:	2200      	movs	r2, #0
   23756:	f2c4 0324 	movt	r3, #16420	; 0x4024
   2375a:	4606      	mov	r6, r0
   2375c:	460f      	mov	r7, r1
   2375e:	4650      	mov	r0, sl
   23760:	4659      	mov	r1, fp
   23762:	f7ef fe21 	bl	133a8 <__aeabi_dmul>
   23766:	4689      	mov	r9, r1
   23768:	4680      	mov	r8, r0
   2376a:	f002 fb09 	bl	25d80 <__aeabi_d2iz>
   2376e:	4604      	mov	r4, r0
   23770:	f7ef fdb4 	bl	132dc <__aeabi_i2d>
   23774:	3430      	adds	r4, #48	; 0x30
   23776:	b2e4      	uxtb	r4, r4
   23778:	4602      	mov	r2, r0
   2377a:	460b      	mov	r3, r1
   2377c:	4640      	mov	r0, r8
   2377e:	4649      	mov	r1, r9
   23780:	f7ef fc5e 	bl	13040 <__aeabi_dsub>
   23784:	4632      	mov	r2, r6
   23786:	463b      	mov	r3, r7
   23788:	f805 4b01 	strb.w	r4, [r5], #1
   2378c:	46a9      	mov	r9, r5
   2378e:	4682      	mov	sl, r0
   23790:	468b      	mov	fp, r1
   23792:	f002 facd 	bl	25d30 <__aeabi_dcmplt>
   23796:	4652      	mov	r2, sl
   23798:	465b      	mov	r3, fp
   2379a:	2800      	cmp	r0, #0
   2379c:	d0c0      	beq.n	23720 <_dtoa_r+0x8a0>
   2379e:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   237a0:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
   237a2:	9407      	str	r4, [sp, #28]
   237a4:	e645      	b.n	23432 <_dtoa_r+0x5b2>
   237a6:	2400      	movs	r4, #0
   237a8:	9413      	str	r4, [sp, #76]	; 0x4c
   237aa:	9807      	ldr	r0, [sp, #28]
   237ac:	9c29      	ldr	r4, [sp, #164]	; 0xa4
   237ae:	1824      	adds	r4, r4, r0
   237b0:	9410      	str	r4, [sp, #64]	; 0x40
   237b2:	1c60      	adds	r0, r4, #1
   237b4:	2800      	cmp	r0, #0
   237b6:	f340 81ad 	ble.w	23b14 <_dtoa_r+0xc94>
   237ba:	280e      	cmp	r0, #14
   237bc:	bf8c      	ite	hi
   237be:	2500      	movhi	r5, #0
   237c0:	f005 0501 	andls.w	r5, r5, #1
   237c4:	900d      	str	r0, [sp, #52]	; 0x34
   237c6:	e6b9      	b.n	2353c <_dtoa_r+0x6bc>
   237c8:	2401      	movs	r4, #1
   237ca:	9413      	str	r4, [sp, #76]	; 0x4c
   237cc:	e7ed      	b.n	237aa <_dtoa_r+0x92a>
   237ce:	2400      	movs	r4, #0
   237d0:	9413      	str	r4, [sp, #76]	; 0x4c
   237d2:	e6a7      	b.n	23524 <_dtoa_r+0x6a4>
   237d4:	f1ba 0f00 	cmp.w	sl, #0
   237d8:	f47f adbf 	bne.w	2335a <_dtoa_r+0x4da>
   237dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
   237e0:	4657      	mov	r7, sl
   237e2:	2b00      	cmp	r3, #0
   237e4:	f47f adba 	bne.w	2335c <_dtoa_r+0x4dc>
   237e8:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
   237ec:	ea0b 0303 	and.w	r3, fp, r3
   237f0:	461f      	mov	r7, r3
   237f2:	2b00      	cmp	r3, #0
   237f4:	f43f adb2 	beq.w	2335c <_dtoa_r+0x4dc>
   237f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   237fa:	2701      	movs	r7, #1
   237fc:	980b      	ldr	r0, [sp, #44]	; 0x2c
   237fe:	3301      	adds	r3, #1
   23800:	930e      	str	r3, [sp, #56]	; 0x38
   23802:	3001      	adds	r0, #1
   23804:	900b      	str	r0, [sp, #44]	; 0x2c
   23806:	e5a9      	b.n	2335c <_dtoa_r+0x4dc>
   23808:	4638      	mov	r0, r7
   2380a:	f7ef fd67 	bl	132dc <__aeabi_i2d>
   2380e:	4652      	mov	r2, sl
   23810:	465b      	mov	r3, fp
   23812:	f7ef fdc9 	bl	133a8 <__aeabi_dmul>
   23816:	2300      	movs	r3, #0
   23818:	2200      	movs	r2, #0
   2381a:	f2c4 031c 	movt	r3, #16412	; 0x401c
   2381e:	f7ef fc11 	bl	13044 <__adddf3>
   23822:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   23824:	f1a1 7450 	sub.w	r4, r1, #54525952	; 0x3400000
   23828:	4680      	mov	r8, r0
   2382a:	46a1      	mov	r9, r4
   2382c:	2d00      	cmp	r5, #0
   2382e:	f040 80b5 	bne.w	2399c <_dtoa_r+0xb1c>
   23832:	2300      	movs	r3, #0
   23834:	2200      	movs	r2, #0
   23836:	f2c4 0314 	movt	r3, #16404	; 0x4014
   2383a:	4650      	mov	r0, sl
   2383c:	4659      	mov	r1, fp
   2383e:	f7ef fbff 	bl	13040 <__aeabi_dsub>
   23842:	4642      	mov	r2, r8
   23844:	4623      	mov	r3, r4
   23846:	4682      	mov	sl, r0
   23848:	468b      	mov	fp, r1
   2384a:	f002 fa8f 	bl	25d6c <__aeabi_dcmpgt>
   2384e:	2800      	cmp	r0, #0
   23850:	f040 813c 	bne.w	23acc <_dtoa_r+0xc4c>
   23854:	4642      	mov	r2, r8
   23856:	4650      	mov	r0, sl
   23858:	4659      	mov	r1, fp
   2385a:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   2385e:	f002 fa67 	bl	25d30 <__aeabi_dcmplt>
   23862:	2800      	cmp	r0, #0
   23864:	f000 808a 	beq.w	2397c <_dtoa_r+0xafc>
   23868:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   2386a:	9408      	str	r4, [sp, #32]
   2386c:	e651      	b.n	23512 <_dtoa_r+0x692>
   2386e:	9813      	ldr	r0, [sp, #76]	; 0x4c
   23870:	2800      	cmp	r0, #0
   23872:	f000 815e 	beq.w	23b32 <_dtoa_r+0xcb2>
   23876:	2d00      	cmp	r5, #0
   23878:	dd05      	ble.n	23886 <_dtoa_r+0xa06>
   2387a:	4630      	mov	r0, r6
   2387c:	9908      	ldr	r1, [sp, #32]
   2387e:	462a      	mov	r2, r5
   23880:	f001 f8a0 	bl	249c4 <__lshift>
   23884:	9008      	str	r0, [sp, #32]
   23886:	f8dd 8020 	ldr.w	r8, [sp, #32]
   2388a:	2f00      	cmp	r7, #0
   2388c:	f040 820b 	bne.w	23ca6 <_dtoa_r+0xe26>
   23890:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   23892:	2301      	movs	r3, #1
   23894:	940b      	str	r4, [sp, #44]	; 0x2c
   23896:	461f      	mov	r7, r3
   23898:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2389a:	ea0a 0003 	and.w	r0, sl, r3
   2389e:	950a      	str	r5, [sp, #40]	; 0x28
   238a0:	9d08      	ldr	r5, [sp, #32]
   238a2:	900e      	str	r0, [sp, #56]	; 0x38
   238a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   238a6:	4620      	mov	r0, r4
   238a8:	f7ff fa46 	bl	22d38 <quorem>
   238ac:	4629      	mov	r1, r5
   238ae:	f04f 0b01 	mov.w	fp, #1
   238b2:	9008      	str	r0, [sp, #32]
   238b4:	4620      	mov	r0, r4
   238b6:	f001 f8e3 	bl	24a80 <__mcmp>
   238ba:	4642      	mov	r2, r8
   238bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   238be:	4681      	mov	r9, r0
   238c0:	4630      	mov	r0, r6
   238c2:	f001 f8fd 	bl	24ac0 <__mdiff>
   238c6:	9a08      	ldr	r2, [sp, #32]
   238c8:	3230      	adds	r2, #48	; 0x30
   238ca:	920c      	str	r2, [sp, #48]	; 0x30
   238cc:	68c3      	ldr	r3, [r0, #12]
   238ce:	4682      	mov	sl, r0
   238d0:	2b00      	cmp	r3, #0
   238d2:	d03e      	beq.n	23952 <_dtoa_r+0xad2>
   238d4:	4630      	mov	r0, r6
   238d6:	4651      	mov	r1, sl
   238d8:	f000 fe88 	bl	245ec <_Bfree>
   238dc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   238de:	ea5b 0303 	orrs.w	r3, fp, r3
   238e2:	d103      	bne.n	238ec <_dtoa_r+0xa6c>
   238e4:	980e      	ldr	r0, [sp, #56]	; 0x38
   238e6:	2800      	cmp	r0, #0
   238e8:	f000 8219 	beq.w	23d1e <_dtoa_r+0xe9e>
   238ec:	f1b9 0f00 	cmp.w	r9, #0
   238f0:	f2c0 81b6 	blt.w	23c60 <_dtoa_r+0xde0>
   238f4:	9828      	ldr	r0, [sp, #160]	; 0xa0
   238f6:	ea59 0000 	orrs.w	r0, r9, r0
   238fa:	d103      	bne.n	23904 <_dtoa_r+0xa84>
   238fc:	990e      	ldr	r1, [sp, #56]	; 0x38
   238fe:	2900      	cmp	r1, #0
   23900:	f000 81ae 	beq.w	23c60 <_dtoa_r+0xde0>
   23904:	f1bb 0f00 	cmp.w	fp, #0
   23908:	f300 81f2 	bgt.w	23cf0 <_dtoa_r+0xe70>
   2390c:	980d      	ldr	r0, [sp, #52]	; 0x34
   2390e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   23910:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   23912:	4287      	cmp	r7, r0
   23914:	f803 2b01 	strb.w	r2, [r3], #1
   23918:	4699      	mov	r9, r3
   2391a:	930a      	str	r3, [sp, #40]	; 0x28
   2391c:	f000 81e2 	beq.w	23ce4 <_dtoa_r+0xe64>
   23920:	4621      	mov	r1, r4
   23922:	220a      	movs	r2, #10
   23924:	2300      	movs	r3, #0
   23926:	4630      	mov	r0, r6
   23928:	f000 fe7c 	bl	24624 <__multadd>
   2392c:	4545      	cmp	r5, r8
   2392e:	4604      	mov	r4, r0
   23930:	d02a      	beq.n	23988 <_dtoa_r+0xb08>
   23932:	4629      	mov	r1, r5
   23934:	220a      	movs	r2, #10
   23936:	2300      	movs	r3, #0
   23938:	4630      	mov	r0, r6
   2393a:	f000 fe73 	bl	24624 <__multadd>
   2393e:	4641      	mov	r1, r8
   23940:	220a      	movs	r2, #10
   23942:	2300      	movs	r3, #0
   23944:	3701      	adds	r7, #1
   23946:	4605      	mov	r5, r0
   23948:	4630      	mov	r0, r6
   2394a:	f000 fe6b 	bl	24624 <__multadd>
   2394e:	4680      	mov	r8, r0
   23950:	e7a8      	b.n	238a4 <_dtoa_r+0xa24>
   23952:	4620      	mov	r0, r4
   23954:	4651      	mov	r1, sl
   23956:	f001 f893 	bl	24a80 <__mcmp>
   2395a:	4683      	mov	fp, r0
   2395c:	e7ba      	b.n	238d4 <_dtoa_r+0xa54>
   2395e:	4630      	mov	r0, r6
   23960:	4629      	mov	r1, r5
   23962:	f000 fe43 	bl	245ec <_Bfree>
   23966:	e560      	b.n	2342a <_dtoa_r+0x5aa>
   23968:	231c      	movs	r3, #28
   2396a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2396c:	18ed      	adds	r5, r5, r3
   2396e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   23970:	18d2      	adds	r2, r2, r3
   23972:	920e      	str	r2, [sp, #56]	; 0x38
   23974:	18c0      	adds	r0, r0, r3
   23976:	900b      	str	r0, [sp, #44]	; 0x2c
   23978:	e509      	b.n	2338e <_dtoa_r+0x50e>
   2397a:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
   2397c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   23980:	4682      	mov	sl, r0
   23982:	468b      	mov	fp, r1
   23984:	f7ff bbd2 	b.w	2312c <_dtoa_r+0x2ac>
   23988:	4629      	mov	r1, r5
   2398a:	4630      	mov	r0, r6
   2398c:	220a      	movs	r2, #10
   2398e:	2300      	movs	r3, #0
   23990:	f000 fe48 	bl	24624 <__multadd>
   23994:	3701      	adds	r7, #1
   23996:	4605      	mov	r5, r0
   23998:	4680      	mov	r8, r0
   2399a:	e783      	b.n	238a4 <_dtoa_r+0xa24>
   2399c:	9c07      	ldr	r4, [sp, #28]
   2399e:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
   239a2:	941a      	str	r4, [sp, #104]	; 0x68
   239a4:	e661      	b.n	2366a <_dtoa_r+0x7ea>
   239a6:	9d07      	ldr	r5, [sp, #28]
   239a8:	426c      	negs	r4, r5
   239aa:	2c00      	cmp	r4, #0
   239ac:	f000 8110 	beq.w	23bd0 <_dtoa_r+0xd50>
   239b0:	f004 020f 	and.w	r2, r4, #15
   239b4:	f24d 1340 	movw	r3, #53568	; 0xd140
   239b8:	f2c0 0302 	movt	r3, #2
   239bc:	4650      	mov	r0, sl
   239be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   239c2:	4659      	mov	r1, fp
   239c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   239c8:	f7ef fcee 	bl	133a8 <__aeabi_dmul>
   239cc:	1124      	asrs	r4, r4, #4
   239ce:	4682      	mov	sl, r0
   239d0:	468b      	mov	fp, r1
   239d2:	f000 80fd 	beq.w	23bd0 <_dtoa_r+0xd50>
   239d6:	f24d 2530 	movw	r5, #53808	; 0xd230
   239da:	2702      	movs	r7, #2
   239dc:	f2c0 0502 	movt	r5, #2
   239e0:	07e3      	lsls	r3, r4, #31
   239e2:	4650      	mov	r0, sl
   239e4:	4659      	mov	r1, fp
   239e6:	d506      	bpl.n	239f6 <_dtoa_r+0xb76>
   239e8:	e9d5 2300 	ldrd	r2, r3, [r5]
   239ec:	3701      	adds	r7, #1
   239ee:	f7ef fcdb 	bl	133a8 <__aeabi_dmul>
   239f2:	4682      	mov	sl, r0
   239f4:	468b      	mov	fp, r1
   239f6:	3508      	adds	r5, #8
   239f8:	1064      	asrs	r4, r4, #1
   239fa:	d1f1      	bne.n	239e0 <_dtoa_r+0xb60>
   239fc:	e5f8      	b.n	235f0 <_dtoa_r+0x770>
   239fe:	f10c 35ff 	add.w	r5, ip, #4294967295
   23a02:	f24d 1140 	movw	r1, #53568	; 0xd140
   23a06:	f2c0 0102 	movt	r1, #2
   23a0a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   23a0c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   23a10:	464b      	mov	r3, r9
   23a12:	4642      	mov	r2, r8
   23a14:	f8cd c00c 	str.w	ip, [sp, #12]
   23a18:	e9d1 0100 	ldrd	r0, r1, [r1]
   23a1c:	9516      	str	r5, [sp, #88]	; 0x58
   23a1e:	9411      	str	r4, [sp, #68]	; 0x44
   23a20:	f7ef fcc2 	bl	133a8 <__aeabi_dmul>
   23a24:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
   23a28:	4659      	mov	r1, fp
   23a2a:	4650      	mov	r0, sl
   23a2c:	f002 f9a8 	bl	25d80 <__aeabi_d2iz>
   23a30:	4604      	mov	r4, r0
   23a32:	f7ef fc53 	bl	132dc <__aeabi_i2d>
   23a36:	460b      	mov	r3, r1
   23a38:	4602      	mov	r2, r0
   23a3a:	4659      	mov	r1, fp
   23a3c:	4650      	mov	r0, sl
   23a3e:	f7ef faff 	bl	13040 <__aeabi_dsub>
   23a42:	9d11      	ldr	r5, [sp, #68]	; 0x44
   23a44:	f104 0330 	add.w	r3, r4, #48	; 0x30
   23a48:	f805 3b01 	strb.w	r3, [r5], #1
   23a4c:	46a9      	mov	r9, r5
   23a4e:	f8dd c00c 	ldr.w	ip, [sp, #12]
   23a52:	9511      	str	r5, [sp, #68]	; 0x44
   23a54:	f1bc 0f01 	cmp.w	ip, #1
   23a58:	4682      	mov	sl, r0
   23a5a:	468b      	mov	fp, r1
   23a5c:	d021      	beq.n	23aa2 <_dtoa_r+0xc22>
   23a5e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   23a60:	1e6f      	subs	r7, r5, #1
   23a62:	462c      	mov	r4, r5
   23a64:	4467      	add	r7, ip
   23a66:	2300      	movs	r3, #0
   23a68:	2200      	movs	r2, #0
   23a6a:	f2c4 0324 	movt	r3, #16420	; 0x4024
   23a6e:	f7ef fc9b 	bl	133a8 <__aeabi_dmul>
   23a72:	4689      	mov	r9, r1
   23a74:	4680      	mov	r8, r0
   23a76:	f002 f983 	bl	25d80 <__aeabi_d2iz>
   23a7a:	4605      	mov	r5, r0
   23a7c:	f7ef fc2e 	bl	132dc <__aeabi_i2d>
   23a80:	3530      	adds	r5, #48	; 0x30
   23a82:	4602      	mov	r2, r0
   23a84:	460b      	mov	r3, r1
   23a86:	4640      	mov	r0, r8
   23a88:	4649      	mov	r1, r9
   23a8a:	f7ef fad9 	bl	13040 <__aeabi_dsub>
   23a8e:	f804 5f01 	strb.w	r5, [r4, #1]!
   23a92:	42bc      	cmp	r4, r7
   23a94:	d1e7      	bne.n	23a66 <_dtoa_r+0xbe6>
   23a96:	9c11      	ldr	r4, [sp, #68]	; 0x44
   23a98:	4682      	mov	sl, r0
   23a9a:	9d16      	ldr	r5, [sp, #88]	; 0x58
   23a9c:	468b      	mov	fp, r1
   23a9e:	eb04 0905 	add.w	r9, r4, r5
   23aa2:	2300      	movs	r3, #0
   23aa4:	2200      	movs	r2, #0
   23aa6:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
   23aaa:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
   23aae:	f7ef fac9 	bl	13044 <__adddf3>
   23ab2:	4602      	mov	r2, r0
   23ab4:	460b      	mov	r3, r1
   23ab6:	4650      	mov	r0, sl
   23ab8:	4659      	mov	r1, fp
   23aba:	f002 f957 	bl	25d6c <__aeabi_dcmpgt>
   23abe:	2800      	cmp	r0, #0
   23ac0:	f000 8092 	beq.w	23be8 <_dtoa_r+0xd68>
   23ac4:	f819 4c01 	ldrb.w	r4, [r9, #-1]
   23ac8:	f7ff bbdf 	b.w	2328a <_dtoa_r+0x40a>
   23acc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   23ace:	9408      	str	r4, [sp, #32]
   23ad0:	e491      	b.n	233f6 <_dtoa_r+0x576>
   23ad2:	6923      	ldr	r3, [r4, #16]
   23ad4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   23ad8:	6918      	ldr	r0, [r3, #16]
   23ada:	f000 fe2f 	bl	2473c <__hi0bits>
   23ade:	f1c0 0320 	rsb	r3, r0, #32
   23ae2:	e440      	b.n	23366 <_dtoa_r+0x4e6>
   23ae4:	980c      	ldr	r0, [sp, #48]	; 0x30
   23ae6:	4621      	mov	r1, r4
   23ae8:	f000 ffca 	bl	24a80 <__mcmp>
   23aec:	2800      	cmp	r0, #0
   23aee:	f6bf ac63 	bge.w	233b8 <_dtoa_r+0x538>
   23af2:	990c      	ldr	r1, [sp, #48]	; 0x30
   23af4:	4630      	mov	r0, r6
   23af6:	220a      	movs	r2, #10
   23af8:	2300      	movs	r3, #0
   23afa:	f000 fd93 	bl	24624 <__multadd>
   23afe:	9913      	ldr	r1, [sp, #76]	; 0x4c
   23b00:	900c      	str	r0, [sp, #48]	; 0x30
   23b02:	9807      	ldr	r0, [sp, #28]
   23b04:	3801      	subs	r0, #1
   23b06:	9007      	str	r0, [sp, #28]
   23b08:	2900      	cmp	r1, #0
   23b0a:	f040 8119 	bne.w	23d40 <_dtoa_r+0xec0>
   23b0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   23b10:	930d      	str	r3, [sp, #52]	; 0x34
   23b12:	e451      	b.n	233b8 <_dtoa_r+0x538>
   23b14:	280e      	cmp	r0, #14
   23b16:	900d      	str	r0, [sp, #52]	; 0x34
   23b18:	bf8c      	ite	hi
   23b1a:	2300      	movhi	r3, #0
   23b1c:	2301      	movls	r3, #1
   23b1e:	6a74      	ldr	r4, [r6, #36]	; 0x24
   23b20:	401d      	ands	r5, r3
   23b22:	2300      	movs	r3, #0
   23b24:	6063      	str	r3, [r4, #4]
   23b26:	e518      	b.n	2355a <_dtoa_r+0x6da>
   23b28:	2301      	movs	r3, #1
   23b2a:	9310      	str	r3, [sp, #64]	; 0x40
   23b2c:	930d      	str	r3, [sp, #52]	; 0x34
   23b2e:	9329      	str	r3, [sp, #164]	; 0xa4
   23b30:	e7f5      	b.n	23b1e <_dtoa_r+0xc9e>
   23b32:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   23b34:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   23b38:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   23b3c:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   23b40:	e002      	b.n	23b48 <_dtoa_r+0xcc8>
   23b42:	f000 fd6f 	bl	24624 <__multadd>
   23b46:	4680      	mov	r8, r0
   23b48:	4621      	mov	r1, r4
   23b4a:	4640      	mov	r0, r8
   23b4c:	f7ff f8f4 	bl	22d38 <quorem>
   23b50:	220a      	movs	r2, #10
   23b52:	2300      	movs	r3, #0
   23b54:	4641      	mov	r1, r8
   23b56:	f100 0730 	add.w	r7, r0, #48	; 0x30
   23b5a:	f809 7005 	strb.w	r7, [r9, r5]
   23b5e:	3501      	adds	r5, #1
   23b60:	4630      	mov	r0, r6
   23b62:	45aa      	cmp	sl, r5
   23b64:	dced      	bgt.n	23b42 <_dtoa_r+0xcc2>
   23b66:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   23b68:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   23b6c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
   23b70:	2d01      	cmp	r5, #1
   23b72:	bfac      	ite	ge
   23b74:	44a9      	addge	r9, r5
   23b76:	f109 0901 	addlt.w	r9, r9, #1
   23b7a:	461d      	mov	r5, r3
   23b7c:	2201      	movs	r2, #1
   23b7e:	990c      	ldr	r1, [sp, #48]	; 0x30
   23b80:	4630      	mov	r0, r6
   23b82:	f000 ff1f 	bl	249c4 <__lshift>
   23b86:	4621      	mov	r1, r4
   23b88:	900c      	str	r0, [sp, #48]	; 0x30
   23b8a:	f000 ff79 	bl	24a80 <__mcmp>
   23b8e:	2800      	cmp	r0, #0
   23b90:	dd14      	ble.n	23bbc <_dtoa_r+0xd3c>
   23b92:	f819 2c01 	ldrb.w	r2, [r9, #-1]
   23b96:	980f      	ldr	r0, [sp, #60]	; 0x3c
   23b98:	464b      	mov	r3, r9
   23b9a:	1c41      	adds	r1, r0, #1
   23b9c:	e002      	b.n	23ba4 <_dtoa_r+0xd24>
   23b9e:	f813 2c02 	ldrb.w	r2, [r3, #-2]
   23ba2:	3b01      	subs	r3, #1
   23ba4:	2a39      	cmp	r2, #57	; 0x39
   23ba6:	4699      	mov	r9, r3
   23ba8:	d178      	bne.n	23c9c <_dtoa_r+0xe1c>
   23baa:	428b      	cmp	r3, r1
   23bac:	d1f7      	bne.n	23b9e <_dtoa_r+0xd1e>
   23bae:	9807      	ldr	r0, [sp, #28]
   23bb0:	2331      	movs	r3, #49	; 0x31
   23bb2:	f801 3c01 	strb.w	r3, [r1, #-1]
   23bb6:	3001      	adds	r0, #1
   23bb8:	9007      	str	r0, [sp, #28]
   23bba:	e425      	b.n	23408 <_dtoa_r+0x588>
   23bbc:	d101      	bne.n	23bc2 <_dtoa_r+0xd42>
   23bbe:	07fb      	lsls	r3, r7, #31
   23bc0:	d4e7      	bmi.n	23b92 <_dtoa_r+0xd12>
   23bc2:	464b      	mov	r3, r9
   23bc4:	4699      	mov	r9, r3
   23bc6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   23bca:	2a30      	cmp	r2, #48	; 0x30
   23bcc:	d0fa      	beq.n	23bc4 <_dtoa_r+0xd44>
   23bce:	e41b      	b.n	23408 <_dtoa_r+0x588>
   23bd0:	2702      	movs	r7, #2
   23bd2:	e50d      	b.n	235f0 <_dtoa_r+0x770>
   23bd4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   23bd6:	e42c      	b.n	23432 <_dtoa_r+0x5b2>
   23bd8:	4630      	mov	r0, r6
   23bda:	990c      	ldr	r1, [sp, #48]	; 0x30
   23bdc:	9a12      	ldr	r2, [sp, #72]	; 0x48
   23bde:	f000 fea1 	bl	24924 <__pow5mult>
   23be2:	900c      	str	r0, [sp, #48]	; 0x30
   23be4:	f7ff bba7 	b.w	23336 <_dtoa_r+0x4b6>
   23be8:	2100      	movs	r1, #0
   23bea:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
   23bee:	2000      	movs	r0, #0
   23bf0:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
   23bf4:	f7ef fa24 	bl	13040 <__aeabi_dsub>
   23bf8:	4602      	mov	r2, r0
   23bfa:	460b      	mov	r3, r1
   23bfc:	4650      	mov	r0, sl
   23bfe:	4659      	mov	r1, fp
   23c00:	f002 f896 	bl	25d30 <__aeabi_dcmplt>
   23c04:	2800      	cmp	r0, #0
   23c06:	f43f aeb9 	beq.w	2397c <_dtoa_r+0xafc>
   23c0a:	464b      	mov	r3, r9
   23c0c:	4699      	mov	r9, r3
   23c0e:	3b01      	subs	r3, #1
   23c10:	f819 2c01 	ldrb.w	r2, [r9, #-1]
   23c14:	2a30      	cmp	r2, #48	; 0x30
   23c16:	d0f9      	beq.n	23c0c <_dtoa_r+0xd8c>
   23c18:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   23c1a:	9407      	str	r4, [sp, #28]
   23c1c:	e409      	b.n	23432 <_dtoa_r+0x5b2>
   23c1e:	4630      	mov	r0, r6
   23c20:	990c      	ldr	r1, [sp, #48]	; 0x30
   23c22:	f000 fe7f 	bl	24924 <__pow5mult>
   23c26:	900c      	str	r0, [sp, #48]	; 0x30
   23c28:	f7ff bb85 	b.w	23336 <_dtoa_r+0x4b6>
   23c2c:	2400      	movs	r4, #0
   23c2e:	9408      	str	r4, [sp, #32]
   23c30:	e46f      	b.n	23512 <_dtoa_r+0x692>
   23c32:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   23c34:	2c00      	cmp	r4, #0
   23c36:	d04e      	beq.n	23cd6 <_dtoa_r+0xe56>
   23c38:	f503 6386 	add.w	r3, r3, #1072	; 0x430
   23c3c:	9c12      	ldr	r4, [sp, #72]	; 0x48
   23c3e:	3303      	adds	r3, #3
   23c40:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   23c42:	e445      	b.n	234d0 <_dtoa_r+0x650>
   23c44:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   23c46:	3401      	adds	r4, #1
   23c48:	f803 4c01 	strb.w	r4, [r3, #-1]
   23c4c:	9507      	str	r5, [sp, #28]
   23c4e:	f7ff bbf0 	b.w	23432 <_dtoa_r+0x5b2>
   23c52:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
   23c54:	f7ff bb19 	b.w	2328a <_dtoa_r+0x40a>
   23c58:	980e      	ldr	r0, [sp, #56]	; 0x38
   23c5a:	2300      	movs	r3, #0
   23c5c:	1b45      	subs	r5, r0, r5
   23c5e:	e437      	b.n	234d0 <_dtoa_r+0x650>
   23c60:	f1bb 0f00 	cmp.w	fp, #0
   23c64:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   23c66:	940c      	str	r4, [sp, #48]	; 0x30
   23c68:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   23c6a:	dd0f      	ble.n	23c8c <_dtoa_r+0xe0c>
   23c6c:	2201      	movs	r2, #1
   23c6e:	990c      	ldr	r1, [sp, #48]	; 0x30
   23c70:	4630      	mov	r0, r6
   23c72:	f000 fea7 	bl	249c4 <__lshift>
   23c76:	4621      	mov	r1, r4
   23c78:	900c      	str	r0, [sp, #48]	; 0x30
   23c7a:	f000 ff01 	bl	24a80 <__mcmp>
   23c7e:	2800      	cmp	r0, #0
   23c80:	dd56      	ble.n	23d30 <_dtoa_r+0xeb0>
   23c82:	2f39      	cmp	r7, #57	; 0x39
   23c84:	d042      	beq.n	23d0c <_dtoa_r+0xe8c>
   23c86:	9b08      	ldr	r3, [sp, #32]
   23c88:	f103 0731 	add.w	r7, r3, #49	; 0x31
   23c8c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   23c90:	f8cd 8020 	str.w	r8, [sp, #32]
   23c94:	f809 7b01 	strb.w	r7, [r9], #1
   23c98:	f7ff bbb6 	b.w	23408 <_dtoa_r+0x588>
   23c9c:	3201      	adds	r2, #1
   23c9e:	f803 2c01 	strb.w	r2, [r3, #-1]
   23ca2:	f7ff bbb1 	b.w	23408 <_dtoa_r+0x588>
   23ca6:	9d08      	ldr	r5, [sp, #32]
   23ca8:	4630      	mov	r0, r6
   23caa:	6869      	ldr	r1, [r5, #4]
   23cac:	f000 fc68 	bl	24580 <_Balloc>
   23cb0:	9b08      	ldr	r3, [sp, #32]
   23cb2:	f103 010c 	add.w	r1, r3, #12
   23cb6:	4605      	mov	r5, r0
   23cb8:	9808      	ldr	r0, [sp, #32]
   23cba:	6902      	ldr	r2, [r0, #16]
   23cbc:	f105 000c 	add.w	r0, r5, #12
   23cc0:	3202      	adds	r2, #2
   23cc2:	0092      	lsls	r2, r2, #2
   23cc4:	f7fc fcb4 	bl	20630 <memcpy>
   23cc8:	4630      	mov	r0, r6
   23cca:	4629      	mov	r1, r5
   23ccc:	2201      	movs	r2, #1
   23cce:	f000 fe79 	bl	249c4 <__lshift>
   23cd2:	4680      	mov	r8, r0
   23cd4:	e5dc      	b.n	23890 <_dtoa_r+0xa10>
   23cd6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   23cd8:	9c12      	ldr	r4, [sp, #72]	; 0x48
   23cda:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   23cdc:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   23ce0:	f7ff bbf6 	b.w	234d0 <_dtoa_r+0x650>
   23ce4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   23ce6:	f8cd 8020 	str.w	r8, [sp, #32]
   23cea:	940c      	str	r4, [sp, #48]	; 0x30
   23cec:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   23cee:	e745      	b.n	23b7c <_dtoa_r+0xcfc>
   23cf0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   23cf2:	940c      	str	r4, [sp, #48]	; 0x30
   23cf4:	2f39      	cmp	r7, #57	; 0x39
   23cf6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   23cf8:	d008      	beq.n	23d0c <_dtoa_r+0xe8c>
   23cfa:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   23cfe:	3701      	adds	r7, #1
   23d00:	f8cd 8020 	str.w	r8, [sp, #32]
   23d04:	f809 7b01 	strb.w	r7, [r9], #1
   23d08:	f7ff bb7e 	b.w	23408 <_dtoa_r+0x588>
   23d0c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   23d10:	2339      	movs	r3, #57	; 0x39
   23d12:	f8cd 8020 	str.w	r8, [sp, #32]
   23d16:	461a      	mov	r2, r3
   23d18:	f809 3b01 	strb.w	r3, [r9], #1
   23d1c:	e73b      	b.n	23b96 <_dtoa_r+0xd16>
   23d1e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   23d20:	940c      	str	r4, [sp, #48]	; 0x30
   23d22:	2f39      	cmp	r7, #57	; 0x39
   23d24:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   23d26:	d0f1      	beq.n	23d0c <_dtoa_r+0xe8c>
   23d28:	f1b9 0f00 	cmp.w	r9, #0
   23d2c:	dcab      	bgt.n	23c86 <_dtoa_r+0xe06>
   23d2e:	e7ad      	b.n	23c8c <_dtoa_r+0xe0c>
   23d30:	d1ac      	bne.n	23c8c <_dtoa_r+0xe0c>
   23d32:	07fa      	lsls	r2, r7, #31
   23d34:	d5aa      	bpl.n	23c8c <_dtoa_r+0xe0c>
   23d36:	e7a4      	b.n	23c82 <_dtoa_r+0xe02>
   23d38:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   23d3a:	9507      	str	r5, [sp, #28]
   23d3c:	f7ff bb79 	b.w	23432 <_dtoa_r+0x5b2>
   23d40:	220a      	movs	r2, #10
   23d42:	4630      	mov	r0, r6
   23d44:	9908      	ldr	r1, [sp, #32]
   23d46:	2300      	movs	r3, #0
   23d48:	f000 fc6c 	bl	24624 <__multadd>
   23d4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   23d4e:	920d      	str	r2, [sp, #52]	; 0x34
   23d50:	9008      	str	r0, [sp, #32]
   23d52:	f7ff bb31 	b.w	233b8 <_dtoa_r+0x538>
   23d56:	f43f ab1a 	beq.w	2338e <_dtoa_r+0x50e>
   23d5a:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
   23d5e:	e604      	b.n	2396a <_dtoa_r+0xaea>
   23d60:	2501      	movs	r5, #1
   23d62:	f7ff b973 	b.w	2304c <_dtoa_r+0x1cc>
   23d66:	bf00      	nop

00023d68 <_fflush_r>:
   23d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23d6c:	460c      	mov	r4, r1
   23d6e:	690e      	ldr	r6, [r1, #16]
   23d70:	4680      	mov	r8, r0
   23d72:	2e00      	cmp	r6, #0
   23d74:	d049      	beq.n	23e0a <_fflush_r+0xa2>
   23d76:	b118      	cbz	r0, 23d80 <_fflush_r+0x18>
   23d78:	6983      	ldr	r3, [r0, #24]
   23d7a:	2b00      	cmp	r3, #0
   23d7c:	f000 8089 	beq.w	23e92 <_fflush_r+0x12a>
   23d80:	f24d 1308 	movw	r3, #53512	; 0xd108
   23d84:	f2c0 0302 	movt	r3, #2
   23d88:	429c      	cmp	r4, r3
   23d8a:	bf08      	it	eq
   23d8c:	f8d8 4004 	ldreq.w	r4, [r8, #4]
   23d90:	d010      	beq.n	23db4 <_fflush_r+0x4c>
   23d92:	f24d 03e8 	movw	r3, #53480	; 0xd0e8
   23d96:	f2c0 0302 	movt	r3, #2
   23d9a:	429c      	cmp	r4, r3
   23d9c:	bf08      	it	eq
   23d9e:	f8d8 4008 	ldreq.w	r4, [r8, #8]
   23da2:	d007      	beq.n	23db4 <_fflush_r+0x4c>
   23da4:	f24d 03c8 	movw	r3, #53448	; 0xd0c8
   23da8:	f2c0 0302 	movt	r3, #2
   23dac:	429c      	cmp	r4, r3
   23dae:	bf08      	it	eq
   23db0:	f8d8 400c 	ldreq.w	r4, [r8, #12]
   23db4:	89a6      	ldrh	r6, [r4, #12]
   23db6:	2e00      	cmp	r6, #0
   23db8:	d027      	beq.n	23e0a <_fflush_r+0xa2>
   23dba:	b233      	sxth	r3, r6
   23dbc:	f013 0008 	ands.w	r0, r3, #8
   23dc0:	d026      	beq.n	23e10 <_fflush_r+0xa8>
   23dc2:	6926      	ldr	r6, [r4, #16]
   23dc4:	b30e      	cbz	r6, 23e0a <_fflush_r+0xa2>
   23dc6:	079b      	lsls	r3, r3, #30
   23dc8:	6825      	ldr	r5, [r4, #0]
   23dca:	6026      	str	r6, [r4, #0]
   23dcc:	bf08      	it	eq
   23dce:	6963      	ldreq	r3, [r4, #20]
   23dd0:	ebc6 0505 	rsb	r5, r6, r5
   23dd4:	bf18      	it	ne
   23dd6:	2300      	movne	r3, #0
   23dd8:	2d00      	cmp	r5, #0
   23dda:	60a3      	str	r3, [r4, #8]
   23ddc:	dc02      	bgt.n	23de4 <_fflush_r+0x7c>
   23dde:	e097      	b.n	23f10 <_fflush_r+0x1a8>
   23de0:	2d00      	cmp	r5, #0
   23de2:	dd6f      	ble.n	23ec4 <_fflush_r+0x15c>
   23de4:	4632      	mov	r2, r6
   23de6:	462b      	mov	r3, r5
   23de8:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   23dea:	4640      	mov	r0, r8
   23dec:	6a21      	ldr	r1, [r4, #32]
   23dee:	47b8      	blx	r7
   23df0:	2800      	cmp	r0, #0
   23df2:	ebc0 0505 	rsb	r5, r0, r5
   23df6:	4406      	add	r6, r0
   23df8:	dcf2      	bgt.n	23de0 <_fflush_r+0x78>
   23dfa:	89a3      	ldrh	r3, [r4, #12]
   23dfc:	f04f 30ff 	mov.w	r0, #4294967295
   23e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   23e04:	81a3      	strh	r3, [r4, #12]
   23e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23e0a:	4630      	mov	r0, r6
   23e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23e10:	6862      	ldr	r2, [r4, #4]
   23e12:	f446 6300 	orr.w	r3, r6, #2048	; 0x800
   23e16:	81a3      	strh	r3, [r4, #12]
   23e18:	2a00      	cmp	r2, #0
   23e1a:	dd56      	ble.n	23eca <_fflush_r+0x162>
   23e1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   23e1e:	2e00      	cmp	r6, #0
   23e20:	d0f3      	beq.n	23e0a <_fflush_r+0xa2>
   23e22:	b29b      	uxth	r3, r3
   23e24:	2200      	movs	r2, #0
   23e26:	f413 5780 	ands.w	r7, r3, #4096	; 0x1000
   23e2a:	f8d8 5000 	ldr.w	r5, [r8]
   23e2e:	f8c8 2000 	str.w	r2, [r8]
   23e32:	bf18      	it	ne
   23e34:	6d62      	ldrne	r2, [r4, #84]	; 0x54
   23e36:	d02f      	beq.n	23e98 <_fflush_r+0x130>
   23e38:	0759      	lsls	r1, r3, #29
   23e3a:	d505      	bpl.n	23e48 <_fflush_r+0xe0>
   23e3c:	6861      	ldr	r1, [r4, #4]
   23e3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   23e40:	1a52      	subs	r2, r2, r1
   23e42:	b10b      	cbz	r3, 23e48 <_fflush_r+0xe0>
   23e44:	6c23      	ldr	r3, [r4, #64]	; 0x40
   23e46:	1ad2      	subs	r2, r2, r3
   23e48:	2300      	movs	r3, #0
   23e4a:	4640      	mov	r0, r8
   23e4c:	6a21      	ldr	r1, [r4, #32]
   23e4e:	47b0      	blx	r6
   23e50:	1c43      	adds	r3, r0, #1
   23e52:	d02c      	beq.n	23eae <_fflush_r+0x146>
   23e54:	89a3      	ldrh	r3, [r4, #12]
   23e56:	2100      	movs	r1, #0
   23e58:	6922      	ldr	r2, [r4, #16]
   23e5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   23e5e:	6061      	str	r1, [r4, #4]
   23e60:	041b      	lsls	r3, r3, #16
   23e62:	6022      	str	r2, [r4, #0]
   23e64:	0c1b      	lsrs	r3, r3, #16
   23e66:	81a3      	strh	r3, [r4, #12]
   23e68:	04d9      	lsls	r1, r3, #19
   23e6a:	d502      	bpl.n	23e72 <_fflush_r+0x10a>
   23e6c:	1c42      	adds	r2, r0, #1
   23e6e:	d031      	beq.n	23ed4 <_fflush_r+0x16c>
   23e70:	6560      	str	r0, [r4, #84]	; 0x54
   23e72:	6b61      	ldr	r1, [r4, #52]	; 0x34
   23e74:	f8c8 5000 	str.w	r5, [r8]
   23e78:	2900      	cmp	r1, #0
   23e7a:	d031      	beq.n	23ee0 <_fflush_r+0x178>
   23e7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
   23e80:	4299      	cmp	r1, r3
   23e82:	d002      	beq.n	23e8a <_fflush_r+0x122>
   23e84:	4640      	mov	r0, r8
   23e86:	f000 f99d 	bl	241c4 <_free_r>
   23e8a:	2000      	movs	r0, #0
   23e8c:	6360      	str	r0, [r4, #52]	; 0x34
   23e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23e92:	f000 f8ab 	bl	23fec <__sinit>
   23e96:	e773      	b.n	23d80 <_fflush_r+0x18>
   23e98:	463a      	mov	r2, r7
   23e9a:	2301      	movs	r3, #1
   23e9c:	4640      	mov	r0, r8
   23e9e:	6a21      	ldr	r1, [r4, #32]
   23ea0:	47b0      	blx	r6
   23ea2:	1c43      	adds	r3, r0, #1
   23ea4:	4602      	mov	r2, r0
   23ea6:	d01e      	beq.n	23ee6 <_fflush_r+0x17e>
   23ea8:	89a3      	ldrh	r3, [r4, #12]
   23eaa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   23eac:	e7c4      	b.n	23e38 <_fflush_r+0xd0>
   23eae:	f8d8 3000 	ldr.w	r3, [r8]
   23eb2:	2b1d      	cmp	r3, #29
   23eb4:	d8a1      	bhi.n	23dfa <_fflush_r+0x92>
   23eb6:	f44f 7201 	mov.w	r2, #516	; 0x204
   23eba:	f2c8 0200 	movt	r2, #32768	; 0x8000
   23ebe:	409a      	lsls	r2, r3
   23ec0:	d4c8      	bmi.n	23e54 <_fflush_r+0xec>
   23ec2:	e79a      	b.n	23dfa <_fflush_r+0x92>
   23ec4:	2000      	movs	r0, #0
   23ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23eca:	6c22      	ldr	r2, [r4, #64]	; 0x40
   23ecc:	2a00      	cmp	r2, #0
   23ece:	dca5      	bgt.n	23e1c <_fflush_r+0xb4>
   23ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23ed4:	f8d8 3000 	ldr.w	r3, [r8]
   23ed8:	2b00      	cmp	r3, #0
   23eda:	d1ca      	bne.n	23e72 <_fflush_r+0x10a>
   23edc:	6560      	str	r0, [r4, #84]	; 0x54
   23ede:	e7c8      	b.n	23e72 <_fflush_r+0x10a>
   23ee0:	4608      	mov	r0, r1
   23ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23ee6:	f8d8 3000 	ldr.w	r3, [r8]
   23eea:	2b00      	cmp	r3, #0
   23eec:	d0dc      	beq.n	23ea8 <_fflush_r+0x140>
   23eee:	f1a3 0c1d 	sub.w	ip, r3, #29
   23ef2:	f1dc 0100 	rsbs	r1, ip, #0
   23ef6:	eb41 010c 	adc.w	r1, r1, ip
   23efa:	2b16      	cmp	r3, #22
   23efc:	bf14      	ite	ne
   23efe:	460b      	movne	r3, r1
   23f00:	f041 0301 	orreq.w	r3, r1, #1
   23f04:	b133      	cbz	r3, 23f14 <_fflush_r+0x1ac>
   23f06:	f8c8 5000 	str.w	r5, [r8]
   23f0a:	4638      	mov	r0, r7
   23f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23f10:	2000      	movs	r0, #0
   23f12:	e7dd      	b.n	23ed0 <_fflush_r+0x168>
   23f14:	89a3      	ldrh	r3, [r4, #12]
   23f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   23f1a:	81a3      	strh	r3, [r4, #12]
   23f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023f20 <fflush>:
   23f20:	b138      	cbz	r0, 23f32 <fflush+0x12>
   23f22:	f240 0328 	movw	r3, #40	; 0x28
   23f26:	4601      	mov	r1, r0
   23f28:	f2c1 0300 	movt	r3, #4096	; 0x1000
   23f2c:	6818      	ldr	r0, [r3, #0]
   23f2e:	f7ff bf1b 	b.w	23d68 <_fflush_r>
   23f32:	f64c 7348 	movw	r3, #53064	; 0xcf48
   23f36:	f643 5169 	movw	r1, #15721	; 0x3d69
   23f3a:	f2c0 0302 	movt	r3, #2
   23f3e:	f2c0 0102 	movt	r1, #2
   23f42:	6818      	ldr	r0, [r3, #0]
   23f44:	f000 ba2c 	b.w	243a0 <_fwalk_reent>

00023f48 <__fp_lock>:
   23f48:	2000      	movs	r0, #0
   23f4a:	4770      	bx	lr

00023f4c <__fp_unlock>:
   23f4c:	2000      	movs	r0, #0
   23f4e:	4770      	bx	lr

00023f50 <_cleanup_r>:
   23f50:	f645 31b9 	movw	r1, #23481	; 0x5bb9
   23f54:	f2c0 0102 	movt	r1, #2
   23f58:	f000 b9fc 	b.w	24354 <_fwalk>

00023f5c <std.isra.0>:
   23f5c:	b510      	push	{r4, lr}
   23f5e:	4604      	mov	r4, r0
   23f60:	2300      	movs	r3, #0
   23f62:	305c      	adds	r0, #92	; 0x5c
   23f64:	81a1      	strh	r1, [r4, #12]
   23f66:	4619      	mov	r1, r3
   23f68:	81e2      	strh	r2, [r4, #14]
   23f6a:	2208      	movs	r2, #8
   23f6c:	6023      	str	r3, [r4, #0]
   23f6e:	6063      	str	r3, [r4, #4]
   23f70:	60a3      	str	r3, [r4, #8]
   23f72:	6663      	str	r3, [r4, #100]	; 0x64
   23f74:	6123      	str	r3, [r4, #16]
   23f76:	6163      	str	r3, [r4, #20]
   23f78:	61a3      	str	r3, [r4, #24]
   23f7a:	f7fc fc2f 	bl	207dc <memset>
   23f7e:	f644 6091 	movw	r0, #20113	; 0x4e91
   23f82:	f644 61b9 	movw	r1, #20153	; 0x4eb9
   23f86:	f644 62f1 	movw	r2, #20209	; 0x4ef1
   23f8a:	f644 7315 	movw	r3, #20245	; 0x4f15
   23f8e:	f2c0 0002 	movt	r0, #2
   23f92:	f2c0 0102 	movt	r1, #2
   23f96:	f2c0 0202 	movt	r2, #2
   23f9a:	f2c0 0302 	movt	r3, #2
   23f9e:	6224      	str	r4, [r4, #32]
   23fa0:	6260      	str	r0, [r4, #36]	; 0x24
   23fa2:	62a1      	str	r1, [r4, #40]	; 0x28
   23fa4:	62e2      	str	r2, [r4, #44]	; 0x2c
   23fa6:	6323      	str	r3, [r4, #48]	; 0x30
   23fa8:	bd10      	pop	{r4, pc}
   23faa:	bf00      	nop

00023fac <__sfmoreglue>:
   23fac:	b570      	push	{r4, r5, r6, lr}
   23fae:	2568      	movs	r5, #104	; 0x68
   23fb0:	460e      	mov	r6, r1
   23fb2:	fb05 f501 	mul.w	r5, r5, r1
   23fb6:	f105 010c 	add.w	r1, r5, #12
   23fba:	f7fc f807 	bl	1ffcc <_malloc_r>
   23fbe:	4604      	mov	r4, r0
   23fc0:	b148      	cbz	r0, 23fd6 <__sfmoreglue+0x2a>
   23fc2:	f100 030c 	add.w	r3, r0, #12
   23fc6:	2100      	movs	r1, #0
   23fc8:	6046      	str	r6, [r0, #4]
   23fca:	462a      	mov	r2, r5
   23fcc:	4618      	mov	r0, r3
   23fce:	6021      	str	r1, [r4, #0]
   23fd0:	60a3      	str	r3, [r4, #8]
   23fd2:	f7fc fc03 	bl	207dc <memset>
   23fd6:	4620      	mov	r0, r4
   23fd8:	bd70      	pop	{r4, r5, r6, pc}
   23fda:	bf00      	nop

00023fdc <_cleanup>:
   23fdc:	f64c 7348 	movw	r3, #53064	; 0xcf48
   23fe0:	f2c0 0302 	movt	r3, #2
   23fe4:	6818      	ldr	r0, [r3, #0]
   23fe6:	f7ff bfb3 	b.w	23f50 <_cleanup_r>
   23fea:	bf00      	nop

00023fec <__sinit>:
   23fec:	b570      	push	{r4, r5, r6, lr}
   23fee:	4604      	mov	r4, r0
   23ff0:	6986      	ldr	r6, [r0, #24]
   23ff2:	b106      	cbz	r6, 23ff6 <__sinit+0xa>
   23ff4:	bd70      	pop	{r4, r5, r6, pc}
   23ff6:	f643 7351 	movw	r3, #16209	; 0x3f51
   23ffa:	2501      	movs	r5, #1
   23ffc:	f2c0 0302 	movt	r3, #2
   24000:	6185      	str	r5, [r0, #24]
   24002:	6283      	str	r3, [r0, #40]	; 0x28
   24004:	f8c0 60d8 	str.w	r6, [r0, #216]	; 0xd8
   24008:	f8c0 60dc 	str.w	r6, [r0, #220]	; 0xdc
   2400c:	f8c0 60e0 	str.w	r6, [r0, #224]	; 0xe0
   24010:	f000 f81a 	bl	24048 <__sfp>
   24014:	6060      	str	r0, [r4, #4]
   24016:	4620      	mov	r0, r4
   24018:	f000 f816 	bl	24048 <__sfp>
   2401c:	60a0      	str	r0, [r4, #8]
   2401e:	4620      	mov	r0, r4
   24020:	f000 f812 	bl	24048 <__sfp>
   24024:	2104      	movs	r1, #4
   24026:	4632      	mov	r2, r6
   24028:	60e0      	str	r0, [r4, #12]
   2402a:	6860      	ldr	r0, [r4, #4]
   2402c:	f7ff ff96 	bl	23f5c <std.isra.0>
   24030:	68a0      	ldr	r0, [r4, #8]
   24032:	2109      	movs	r1, #9
   24034:	462a      	mov	r2, r5
   24036:	f7ff ff91 	bl	23f5c <std.isra.0>
   2403a:	68e0      	ldr	r0, [r4, #12]
   2403c:	2112      	movs	r1, #18
   2403e:	2202      	movs	r2, #2
   24040:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   24044:	f7ff bf8a 	b.w	23f5c <std.isra.0>

00024048 <__sfp>:
   24048:	f64c 7348 	movw	r3, #53064	; 0xcf48
   2404c:	f2c0 0302 	movt	r3, #2
   24050:	b570      	push	{r4, r5, r6, lr}
   24052:	4606      	mov	r6, r0
   24054:	681d      	ldr	r5, [r3, #0]
   24056:	69ab      	ldr	r3, [r5, #24]
   24058:	2b00      	cmp	r3, #0
   2405a:	d032      	beq.n	240c2 <__sfp+0x7a>
   2405c:	35d8      	adds	r5, #216	; 0xd8
   2405e:	686b      	ldr	r3, [r5, #4]
   24060:	68a9      	ldr	r1, [r5, #8]
   24062:	3b01      	subs	r3, #1
   24064:	d410      	bmi.n	24088 <__sfp+0x40>
   24066:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   2406a:	460c      	mov	r4, r1
   2406c:	b182      	cbz	r2, 24090 <__sfp+0x48>
   2406e:	f101 0068 	add.w	r0, r1, #104	; 0x68
   24072:	e002      	b.n	2407a <__sfp+0x32>
   24074:	f932 2c5c 	ldrsh.w	r2, [r2, #-92]
   24078:	b152      	cbz	r2, 24090 <__sfp+0x48>
   2407a:	3b01      	subs	r3, #1
   2407c:	3468      	adds	r4, #104	; 0x68
   2407e:	1c5a      	adds	r2, r3, #1
   24080:	ebc1 0204 	rsb	r2, r1, r4
   24084:	4402      	add	r2, r0
   24086:	d1f5      	bne.n	24074 <__sfp+0x2c>
   24088:	6828      	ldr	r0, [r5, #0]
   2408a:	b1f0      	cbz	r0, 240ca <__sfp+0x82>
   2408c:	4605      	mov	r5, r0
   2408e:	e7e6      	b.n	2405e <__sfp+0x16>
   24090:	2500      	movs	r5, #0
   24092:	f04f 33ff 	mov.w	r3, #4294967295
   24096:	6665      	str	r5, [r4, #100]	; 0x64
   24098:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   2409c:	81e3      	strh	r3, [r4, #14]
   2409e:	4629      	mov	r1, r5
   240a0:	2301      	movs	r3, #1
   240a2:	6025      	str	r5, [r4, #0]
   240a4:	81a3      	strh	r3, [r4, #12]
   240a6:	2208      	movs	r2, #8
   240a8:	60a5      	str	r5, [r4, #8]
   240aa:	6065      	str	r5, [r4, #4]
   240ac:	6125      	str	r5, [r4, #16]
   240ae:	6165      	str	r5, [r4, #20]
   240b0:	61a5      	str	r5, [r4, #24]
   240b2:	f7fc fb93 	bl	207dc <memset>
   240b6:	6365      	str	r5, [r4, #52]	; 0x34
   240b8:	63a5      	str	r5, [r4, #56]	; 0x38
   240ba:	64a5      	str	r5, [r4, #72]	; 0x48
   240bc:	64e5      	str	r5, [r4, #76]	; 0x4c
   240be:	4620      	mov	r0, r4
   240c0:	bd70      	pop	{r4, r5, r6, pc}
   240c2:	4628      	mov	r0, r5
   240c4:	f7ff ff92 	bl	23fec <__sinit>
   240c8:	e7c8      	b.n	2405c <__sfp+0x14>
   240ca:	4630      	mov	r0, r6
   240cc:	2104      	movs	r1, #4
   240ce:	f7ff ff6d 	bl	23fac <__sfmoreglue>
   240d2:	6028      	str	r0, [r5, #0]
   240d4:	2800      	cmp	r0, #0
   240d6:	d1d9      	bne.n	2408c <__sfp+0x44>
   240d8:	230c      	movs	r3, #12
   240da:	4604      	mov	r4, r0
   240dc:	6033      	str	r3, [r6, #0]
   240de:	e7ee      	b.n	240be <__sfp+0x76>

000240e0 <__sfp_lock_acquire>:
   240e0:	4770      	bx	lr
   240e2:	bf00      	nop

000240e4 <__sfp_lock_release>:
   240e4:	4770      	bx	lr
   240e6:	bf00      	nop

000240e8 <__sinit_lock_acquire>:
   240e8:	4770      	bx	lr
   240ea:	bf00      	nop

000240ec <__sinit_lock_release>:
   240ec:	4770      	bx	lr
   240ee:	bf00      	nop

000240f0 <__fp_lock_all>:
   240f0:	f240 0328 	movw	r3, #40	; 0x28
   240f4:	f643 7149 	movw	r1, #16201	; 0x3f49
   240f8:	f2c1 0300 	movt	r3, #4096	; 0x1000
   240fc:	f2c0 0102 	movt	r1, #2
   24100:	6818      	ldr	r0, [r3, #0]
   24102:	f000 b927 	b.w	24354 <_fwalk>
   24106:	bf00      	nop

00024108 <__fp_unlock_all>:
   24108:	f240 0328 	movw	r3, #40	; 0x28
   2410c:	f643 714d 	movw	r1, #16205	; 0x3f4d
   24110:	f2c1 0300 	movt	r3, #4096	; 0x1000
   24114:	f2c0 0102 	movt	r1, #2
   24118:	6818      	ldr	r0, [r3, #0]
   2411a:	f000 b91b 	b.w	24354 <_fwalk>
   2411e:	bf00      	nop

00024120 <_malloc_trim_r>:
   24120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24122:	f240 141c 	movw	r4, #284	; 0x11c
   24126:	f2c1 0400 	movt	r4, #4096	; 0x1000
   2412a:	460f      	mov	r7, r1
   2412c:	4605      	mov	r5, r0
   2412e:	f7fc fb9b 	bl	20868 <__malloc_lock>
   24132:	68a3      	ldr	r3, [r4, #8]
   24134:	4628      	mov	r0, r5
   24136:	685e      	ldr	r6, [r3, #4]
   24138:	f026 0603 	bic.w	r6, r6, #3
   2413c:	f506 637e 	add.w	r3, r6, #4064	; 0xfe0
   24140:	330f      	adds	r3, #15
   24142:	1bdf      	subs	r7, r3, r7
   24144:	0b3f      	lsrs	r7, r7, #12
   24146:	3f01      	subs	r7, #1
   24148:	033f      	lsls	r7, r7, #12
   2414a:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   2414e:	db07      	blt.n	24160 <_malloc_trim_r+0x40>
   24150:	2100      	movs	r1, #0
   24152:	f7fc fe1f 	bl	20d94 <_sbrk_r>
   24156:	68a3      	ldr	r3, [r4, #8]
   24158:	199b      	adds	r3, r3, r6
   2415a:	4298      	cmp	r0, r3
   2415c:	4628      	mov	r0, r5
   2415e:	d003      	beq.n	24168 <_malloc_trim_r+0x48>
   24160:	f7fc fb84 	bl	2086c <__malloc_unlock>
   24164:	2000      	movs	r0, #0
   24166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24168:	4279      	negs	r1, r7
   2416a:	f7fc fe13 	bl	20d94 <_sbrk_r>
   2416e:	3001      	adds	r0, #1
   24170:	d010      	beq.n	24194 <_malloc_trim_r+0x74>
   24172:	f242 3394 	movw	r3, #9108	; 0x2394
   24176:	68a1      	ldr	r1, [r4, #8]
   24178:	f2c1 0300 	movt	r3, #4096	; 0x1000
   2417c:	1bf6      	subs	r6, r6, r7
   2417e:	4628      	mov	r0, r5
   24180:	f046 0601 	orr.w	r6, r6, #1
   24184:	681a      	ldr	r2, [r3, #0]
   24186:	604e      	str	r6, [r1, #4]
   24188:	1bd7      	subs	r7, r2, r7
   2418a:	601f      	str	r7, [r3, #0]
   2418c:	f7fc fb6e 	bl	2086c <__malloc_unlock>
   24190:	2001      	movs	r0, #1
   24192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24194:	2100      	movs	r1, #0
   24196:	4628      	mov	r0, r5
   24198:	f7fc fdfc 	bl	20d94 <_sbrk_r>
   2419c:	68a3      	ldr	r3, [r4, #8]
   2419e:	1ac2      	subs	r2, r0, r3
   241a0:	2a0f      	cmp	r2, #15
   241a2:	dd0d      	ble.n	241c0 <_malloc_trim_r+0xa0>
   241a4:	f240 5424 	movw	r4, #1316	; 0x524
   241a8:	f242 3194 	movw	r1, #9108	; 0x2394
   241ac:	f2c1 0400 	movt	r4, #4096	; 0x1000
   241b0:	f2c1 0100 	movt	r1, #4096	; 0x1000
   241b4:	f042 0201 	orr.w	r2, r2, #1
   241b8:	605a      	str	r2, [r3, #4]
   241ba:	6823      	ldr	r3, [r4, #0]
   241bc:	1ac0      	subs	r0, r0, r3
   241be:	6008      	str	r0, [r1, #0]
   241c0:	4628      	mov	r0, r5
   241c2:	e7cd      	b.n	24160 <_malloc_trim_r+0x40>

000241c4 <_free_r>:
   241c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   241c6:	460d      	mov	r5, r1
   241c8:	4604      	mov	r4, r0
   241ca:	2900      	cmp	r1, #0
   241cc:	d075      	beq.n	242ba <_free_r+0xf6>
   241ce:	f7fc fb4b 	bl	20868 <__malloc_lock>
   241d2:	f855 6c04 	ldr.w	r6, [r5, #-4]
   241d6:	f240 101c 	movw	r0, #284	; 0x11c
   241da:	f1a5 0108 	sub.w	r1, r5, #8
   241de:	f2c1 0000 	movt	r0, #4096	; 0x1000
   241e2:	f026 0301 	bic.w	r3, r6, #1
   241e6:	18ca      	adds	r2, r1, r3
   241e8:	f8d0 c008 	ldr.w	ip, [r0, #8]
   241ec:	6857      	ldr	r7, [r2, #4]
   241ee:	4594      	cmp	ip, r2
   241f0:	f027 0703 	bic.w	r7, r7, #3
   241f4:	d07e      	beq.n	242f4 <_free_r+0x130>
   241f6:	f016 0601 	ands.w	r6, r6, #1
   241fa:	6057      	str	r7, [r2, #4]
   241fc:	d04d      	beq.n	2429a <_free_r+0xd6>
   241fe:	2600      	movs	r6, #0
   24200:	19d5      	adds	r5, r2, r7
   24202:	686d      	ldr	r5, [r5, #4]
   24204:	f015 0f01 	tst.w	r5, #1
   24208:	d106      	bne.n	24218 <_free_r+0x54>
   2420a:	19db      	adds	r3, r3, r7
   2420c:	6895      	ldr	r5, [r2, #8]
   2420e:	2e00      	cmp	r6, #0
   24210:	d064      	beq.n	242dc <_free_r+0x118>
   24212:	68d2      	ldr	r2, [r2, #12]
   24214:	60ea      	str	r2, [r5, #12]
   24216:	6095      	str	r5, [r2, #8]
   24218:	f043 0201 	orr.w	r2, r3, #1
   2421c:	50cb      	str	r3, [r1, r3]
   2421e:	604a      	str	r2, [r1, #4]
   24220:	2e00      	cmp	r6, #0
   24222:	d135      	bne.n	24290 <_free_r+0xcc>
   24224:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   24228:	d348      	bcc.n	242bc <_free_r+0xf8>
   2422a:	099e      	lsrs	r6, r3, #6
   2422c:	0a5a      	lsrs	r2, r3, #9
   2422e:	3638      	adds	r6, #56	; 0x38
   24230:	00f5      	lsls	r5, r6, #3
   24232:	2a04      	cmp	r2, #4
   24234:	d916      	bls.n	24264 <_free_r+0xa0>
   24236:	f102 065b 	add.w	r6, r2, #91	; 0x5b
   2423a:	00f5      	lsls	r5, r6, #3
   2423c:	2a14      	cmp	r2, #20
   2423e:	d911      	bls.n	24264 <_free_r+0xa0>
   24240:	0b1e      	lsrs	r6, r3, #12
   24242:	366e      	adds	r6, #110	; 0x6e
   24244:	00f5      	lsls	r5, r6, #3
   24246:	2a54      	cmp	r2, #84	; 0x54
   24248:	d90c      	bls.n	24264 <_free_r+0xa0>
   2424a:	0bde      	lsrs	r6, r3, #15
   2424c:	3677      	adds	r6, #119	; 0x77
   2424e:	00f5      	lsls	r5, r6, #3
   24250:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   24254:	d906      	bls.n	24264 <_free_r+0xa0>
   24256:	f240 5554 	movw	r5, #1364	; 0x554
   2425a:	42aa      	cmp	r2, r5
   2425c:	d874      	bhi.n	24348 <_free_r+0x184>
   2425e:	0c9e      	lsrs	r6, r3, #18
   24260:	367c      	adds	r6, #124	; 0x7c
   24262:	00f5      	lsls	r5, r6, #3
   24264:	1940      	adds	r0, r0, r5
   24266:	f240 151c 	movw	r5, #284	; 0x11c
   2426a:	f2c1 0500 	movt	r5, #4096	; 0x1000
   2426e:	6882      	ldr	r2, [r0, #8]
   24270:	4282      	cmp	r2, r0
   24272:	d103      	bne.n	2427c <_free_r+0xb8>
   24274:	e05f      	b.n	24336 <_free_r+0x172>
   24276:	6892      	ldr	r2, [r2, #8]
   24278:	4290      	cmp	r0, r2
   2427a:	d004      	beq.n	24286 <_free_r+0xc2>
   2427c:	6855      	ldr	r5, [r2, #4]
   2427e:	f025 0503 	bic.w	r5, r5, #3
   24282:	42ab      	cmp	r3, r5
   24284:	d3f7      	bcc.n	24276 <_free_r+0xb2>
   24286:	68d3      	ldr	r3, [r2, #12]
   24288:	60cb      	str	r3, [r1, #12]
   2428a:	608a      	str	r2, [r1, #8]
   2428c:	60d1      	str	r1, [r2, #12]
   2428e:	6099      	str	r1, [r3, #8]
   24290:	4620      	mov	r0, r4
   24292:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   24296:	f7fc bae9 	b.w	2086c <__malloc_unlock>
   2429a:	f855 5c08 	ldr.w	r5, [r5, #-8]
   2429e:	f100 0c08 	add.w	ip, r0, #8
   242a2:	1b49      	subs	r1, r1, r5
   242a4:	195b      	adds	r3, r3, r5
   242a6:	688d      	ldr	r5, [r1, #8]
   242a8:	4565      	cmp	r5, ip
   242aa:	d042      	beq.n	24332 <_free_r+0x16e>
   242ac:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   242b0:	f8c5 c00c 	str.w	ip, [r5, #12]
   242b4:	f8cc 5008 	str.w	r5, [ip, #8]
   242b8:	e7a2      	b.n	24200 <_free_r+0x3c>
   242ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   242bc:	08db      	lsrs	r3, r3, #3
   242be:	2501      	movs	r5, #1
   242c0:	6846      	ldr	r6, [r0, #4]
   242c2:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
   242c6:	109b      	asrs	r3, r3, #2
   242c8:	fa05 f303 	lsl.w	r3, r5, r3
   242cc:	60ca      	str	r2, [r1, #12]
   242ce:	6895      	ldr	r5, [r2, #8]
   242d0:	4333      	orrs	r3, r6
   242d2:	6043      	str	r3, [r0, #4]
   242d4:	608d      	str	r5, [r1, #8]
   242d6:	60e9      	str	r1, [r5, #12]
   242d8:	6091      	str	r1, [r2, #8]
   242da:	e7d9      	b.n	24290 <_free_r+0xcc>
   242dc:	4f1c      	ldr	r7, [pc, #112]	; (24350 <_free_r+0x18c>)
   242de:	42bd      	cmp	r5, r7
   242e0:	d197      	bne.n	24212 <_free_r+0x4e>
   242e2:	6141      	str	r1, [r0, #20]
   242e4:	f043 0201 	orr.w	r2, r3, #1
   242e8:	6101      	str	r1, [r0, #16]
   242ea:	60cd      	str	r5, [r1, #12]
   242ec:	608d      	str	r5, [r1, #8]
   242ee:	604a      	str	r2, [r1, #4]
   242f0:	50cb      	str	r3, [r1, r3]
   242f2:	e7cd      	b.n	24290 <_free_r+0xcc>
   242f4:	07f2      	lsls	r2, r6, #31
   242f6:	443b      	add	r3, r7
   242f8:	d407      	bmi.n	2430a <_free_r+0x146>
   242fa:	f855 2c08 	ldr.w	r2, [r5, #-8]
   242fe:	1a89      	subs	r1, r1, r2
   24300:	189b      	adds	r3, r3, r2
   24302:	688d      	ldr	r5, [r1, #8]
   24304:	68ca      	ldr	r2, [r1, #12]
   24306:	60ea      	str	r2, [r5, #12]
   24308:	6095      	str	r5, [r2, #8]
   2430a:	f240 5228 	movw	r2, #1320	; 0x528
   2430e:	f043 0501 	orr.w	r5, r3, #1
   24312:	f2c1 0200 	movt	r2, #4096	; 0x1000
   24316:	604d      	str	r5, [r1, #4]
   24318:	6081      	str	r1, [r0, #8]
   2431a:	6812      	ldr	r2, [r2, #0]
   2431c:	4293      	cmp	r3, r2
   2431e:	d3b7      	bcc.n	24290 <_free_r+0xcc>
   24320:	f242 3390 	movw	r3, #9104	; 0x2390
   24324:	4620      	mov	r0, r4
   24326:	f2c1 0300 	movt	r3, #4096	; 0x1000
   2432a:	6819      	ldr	r1, [r3, #0]
   2432c:	f7ff fef8 	bl	24120 <_malloc_trim_r>
   24330:	e7ae      	b.n	24290 <_free_r+0xcc>
   24332:	2601      	movs	r6, #1
   24334:	e764      	b.n	24200 <_free_r+0x3c>
   24336:	2701      	movs	r7, #1
   24338:	6868      	ldr	r0, [r5, #4]
   2433a:	10b6      	asrs	r6, r6, #2
   2433c:	4613      	mov	r3, r2
   2433e:	fa07 f606 	lsl.w	r6, r7, r6
   24342:	4330      	orrs	r0, r6
   24344:	6068      	str	r0, [r5, #4]
   24346:	e79f      	b.n	24288 <_free_r+0xc4>
   24348:	f44f 757c 	mov.w	r5, #1008	; 0x3f0
   2434c:	267e      	movs	r6, #126	; 0x7e
   2434e:	e789      	b.n	24264 <_free_r+0xa0>
   24350:	10000124 	.word	0x10000124

00024354 <_fwalk>:
   24354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24358:	4606      	mov	r6, r0
   2435a:	4688      	mov	r8, r1
   2435c:	f7ff fec0 	bl	240e0 <__sfp_lock_acquire>
   24360:	36d8      	adds	r6, #216	; 0xd8
   24362:	bf08      	it	eq
   24364:	4637      	moveq	r7, r6
   24366:	d015      	beq.n	24394 <_fwalk+0x40>
   24368:	2700      	movs	r7, #0
   2436a:	6875      	ldr	r5, [r6, #4]
   2436c:	68b4      	ldr	r4, [r6, #8]
   2436e:	3d01      	subs	r5, #1
   24370:	d40d      	bmi.n	2438e <_fwalk+0x3a>
   24372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   24376:	3d01      	subs	r5, #1
   24378:	b133      	cbz	r3, 24388 <_fwalk+0x34>
   2437a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   2437e:	4620      	mov	r0, r4
   24380:	3301      	adds	r3, #1
   24382:	d001      	beq.n	24388 <_fwalk+0x34>
   24384:	47c0      	blx	r8
   24386:	4307      	orrs	r7, r0
   24388:	3468      	adds	r4, #104	; 0x68
   2438a:	1c6b      	adds	r3, r5, #1
   2438c:	d1f1      	bne.n	24372 <_fwalk+0x1e>
   2438e:	6836      	ldr	r6, [r6, #0]
   24390:	2e00      	cmp	r6, #0
   24392:	d1ea      	bne.n	2436a <_fwalk+0x16>
   24394:	f7ff fea6 	bl	240e4 <__sfp_lock_release>
   24398:	4638      	mov	r0, r7
   2439a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2439e:	bf00      	nop

000243a0 <_fwalk_reent>:
   243a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   243a4:	4607      	mov	r7, r0
   243a6:	4689      	mov	r9, r1
   243a8:	f7ff fe9a 	bl	240e0 <__sfp_lock_acquire>
   243ac:	f117 06d8 	adds.w	r6, r7, #216	; 0xd8
   243b0:	bf08      	it	eq
   243b2:	46b0      	moveq	r8, r6
   243b4:	d018      	beq.n	243e8 <_fwalk_reent+0x48>
   243b6:	f04f 0800 	mov.w	r8, #0
   243ba:	6875      	ldr	r5, [r6, #4]
   243bc:	68b4      	ldr	r4, [r6, #8]
   243be:	3d01      	subs	r5, #1
   243c0:	d40f      	bmi.n	243e2 <_fwalk_reent+0x42>
   243c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   243c6:	3d01      	subs	r5, #1
   243c8:	b143      	cbz	r3, 243dc <_fwalk_reent+0x3c>
   243ca:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   243ce:	4621      	mov	r1, r4
   243d0:	4638      	mov	r0, r7
   243d2:	3301      	adds	r3, #1
   243d4:	d002      	beq.n	243dc <_fwalk_reent+0x3c>
   243d6:	47c8      	blx	r9
   243d8:	ea48 0800 	orr.w	r8, r8, r0
   243dc:	3468      	adds	r4, #104	; 0x68
   243de:	1c6a      	adds	r2, r5, #1
   243e0:	d1ef      	bne.n	243c2 <_fwalk_reent+0x22>
   243e2:	6836      	ldr	r6, [r6, #0]
   243e4:	2e00      	cmp	r6, #0
   243e6:	d1e8      	bne.n	243ba <_fwalk_reent+0x1a>
   243e8:	f7ff fe7c 	bl	240e4 <__sfp_lock_release>
   243ec:	4640      	mov	r0, r8
   243ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   243f2:	bf00      	nop

000243f4 <_setlocale_r>:
   243f4:	b510      	push	{r4, lr}
   243f6:	4614      	mov	r4, r2
   243f8:	b13a      	cbz	r2, 2440a <_setlocale_r+0x16>
   243fa:	f24d 1128 	movw	r1, #53544	; 0xd128
   243fe:	4610      	mov	r0, r2
   24400:	f2c0 0102 	movt	r1, #2
   24404:	f7fc fe7e 	bl	21104 <strcmp>
   24408:	b920      	cbnz	r0, 24414 <_setlocale_r+0x20>
   2440a:	f64c 704c 	movw	r0, #53068	; 0xcf4c
   2440e:	f2c0 0002 	movt	r0, #2
   24412:	bd10      	pop	{r4, pc}
   24414:	f64c 714c 	movw	r1, #53068	; 0xcf4c
   24418:	4620      	mov	r0, r4
   2441a:	f2c0 0102 	movt	r1, #2
   2441e:	f7fc fe71 	bl	21104 <strcmp>
   24422:	b920      	cbnz	r0, 2442e <_setlocale_r+0x3a>
   24424:	f64c 704c 	movw	r0, #53068	; 0xcf4c
   24428:	f2c0 0002 	movt	r0, #2
   2442c:	bd10      	pop	{r4, pc}
   2442e:	f64b 6100 	movw	r1, #48640	; 0xbe00
   24432:	4620      	mov	r0, r4
   24434:	f2c0 0102 	movt	r1, #2
   24438:	f7fc fe64 	bl	21104 <strcmp>
   2443c:	f64c 734c 	movw	r3, #53068	; 0xcf4c
   24440:	f2c0 0302 	movt	r3, #2
   24444:	2800      	cmp	r0, #0
   24446:	bf0c      	ite	eq
   24448:	4618      	moveq	r0, r3
   2444a:	2000      	movne	r0, #0
   2444c:	bd10      	pop	{r4, pc}
   2444e:	bf00      	nop

00024450 <__locale_charset>:
   24450:	f240 5030 	movw	r0, #1328	; 0x530
   24454:	f2c1 0000 	movt	r0, #4096	; 0x1000
   24458:	4770      	bx	lr
   2445a:	bf00      	nop

0002445c <__locale_mb_cur_max>:
   2445c:	f240 5330 	movw	r3, #1328	; 0x530
   24460:	f2c1 0300 	movt	r3, #4096	; 0x1000
   24464:	6a18      	ldr	r0, [r3, #32]
   24466:	4770      	bx	lr

00024468 <__locale_msgcharset>:
   24468:	4800      	ldr	r0, [pc, #0]	; (2446c <__locale_msgcharset+0x4>)
   2446a:	4770      	bx	lr
   2446c:	10000554 	.word	0x10000554

00024470 <__locale_cjk_lang>:
   24470:	2000      	movs	r0, #0
   24472:	4770      	bx	lr

00024474 <_localeconv_r>:
   24474:	4800      	ldr	r0, [pc, #0]	; (24478 <_localeconv_r+0x4>)
   24476:	4770      	bx	lr
   24478:	10000574 	.word	0x10000574

0002447c <setlocale>:
   2447c:	f240 0328 	movw	r3, #40	; 0x28
   24480:	460a      	mov	r2, r1
   24482:	f2c1 0300 	movt	r3, #4096	; 0x1000
   24486:	4601      	mov	r1, r0
   24488:	6818      	ldr	r0, [r3, #0]
   2448a:	f7ff bfb3 	b.w	243f4 <_setlocale_r>
   2448e:	bf00      	nop

00024490 <localeconv>:
   24490:	4800      	ldr	r0, [pc, #0]	; (24494 <localeconv+0x4>)
   24492:	4770      	bx	lr
   24494:	10000574 	.word	0x10000574

00024498 <__smakebuf_r>:
   24498:	898b      	ldrh	r3, [r1, #12]
   2449a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2449c:	460c      	mov	r4, r1
   2449e:	b29a      	uxth	r2, r3
   244a0:	b091      	sub	sp, #68	; 0x44
   244a2:	f012 0f02 	tst.w	r2, #2
   244a6:	4605      	mov	r5, r0
   244a8:	d13b      	bne.n	24522 <__smakebuf_r+0x8a>
   244aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   244ae:	2900      	cmp	r1, #0
   244b0:	db18      	blt.n	244e4 <__smakebuf_r+0x4c>
   244b2:	aa01      	add	r2, sp, #4
   244b4:	f001 fb88 	bl	25bc8 <_fstat_r>
   244b8:	2800      	cmp	r0, #0
   244ba:	db11      	blt.n	244e0 <__smakebuf_r+0x48>
   244bc:	9b02      	ldr	r3, [sp, #8]
   244be:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   244c2:	f5a3 5100 	sub.w	r1, r3, #8192	; 0x2000
   244c6:	424f      	negs	r7, r1
   244c8:	eb47 0701 	adc.w	r7, r7, r1
   244cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   244d0:	d03a      	beq.n	24548 <__smakebuf_r+0xb0>
   244d2:	89a3      	ldrh	r3, [r4, #12]
   244d4:	f44f 6680 	mov.w	r6, #1024	; 0x400
   244d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   244dc:	81a3      	strh	r3, [r4, #12]
   244de:	e00b      	b.n	244f8 <__smakebuf_r+0x60>
   244e0:	89a3      	ldrh	r3, [r4, #12]
   244e2:	b29a      	uxth	r2, r3
   244e4:	f012 0f80 	tst.w	r2, #128	; 0x80
   244e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   244ec:	bf14      	ite	ne
   244ee:	2640      	movne	r6, #64	; 0x40
   244f0:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   244f4:	2700      	movs	r7, #0
   244f6:	81a3      	strh	r3, [r4, #12]
   244f8:	4628      	mov	r0, r5
   244fa:	4631      	mov	r1, r6
   244fc:	f7fb fd66 	bl	1ffcc <_malloc_r>
   24500:	2800      	cmp	r0, #0
   24502:	d030      	beq.n	24566 <__smakebuf_r+0xce>
   24504:	89a2      	ldrh	r2, [r4, #12]
   24506:	f643 7351 	movw	r3, #16209	; 0x3f51
   2450a:	f2c0 0302 	movt	r3, #2
   2450e:	62ab      	str	r3, [r5, #40]	; 0x28
   24510:	f042 0380 	orr.w	r3, r2, #128	; 0x80
   24514:	6020      	str	r0, [r4, #0]
   24516:	81a3      	strh	r3, [r4, #12]
   24518:	6120      	str	r0, [r4, #16]
   2451a:	6166      	str	r6, [r4, #20]
   2451c:	b947      	cbnz	r7, 24530 <__smakebuf_r+0x98>
   2451e:	b011      	add	sp, #68	; 0x44
   24520:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24522:	f101 0347 	add.w	r3, r1, #71	; 0x47
   24526:	600b      	str	r3, [r1, #0]
   24528:	610b      	str	r3, [r1, #16]
   2452a:	2301      	movs	r3, #1
   2452c:	614b      	str	r3, [r1, #20]
   2452e:	e7f6      	b.n	2451e <__smakebuf_r+0x86>
   24530:	4628      	mov	r0, r5
   24532:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   24536:	f001 fb5b 	bl	25bf0 <_isatty_r>
   2453a:	2800      	cmp	r0, #0
   2453c:	d0ef      	beq.n	2451e <__smakebuf_r+0x86>
   2453e:	89a3      	ldrh	r3, [r4, #12]
   24540:	f043 0301 	orr.w	r3, r3, #1
   24544:	81a3      	strh	r3, [r4, #12]
   24546:	e7ea      	b.n	2451e <__smakebuf_r+0x86>
   24548:	f644 63f1 	movw	r3, #20209	; 0x4ef1
   2454c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   2454e:	f2c0 0302 	movt	r3, #2
   24552:	429a      	cmp	r2, r3
   24554:	d1bd      	bne.n	244d2 <__smakebuf_r+0x3a>
   24556:	89a2      	ldrh	r2, [r4, #12]
   24558:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2455c:	461e      	mov	r6, r3
   2455e:	6523      	str	r3, [r4, #80]	; 0x50
   24560:	4313      	orrs	r3, r2
   24562:	81a3      	strh	r3, [r4, #12]
   24564:	e7c8      	b.n	244f8 <__smakebuf_r+0x60>
   24566:	89a3      	ldrh	r3, [r4, #12]
   24568:	059a      	lsls	r2, r3, #22
   2456a:	d4d8      	bmi.n	2451e <__smakebuf_r+0x86>
   2456c:	f104 0247 	add.w	r2, r4, #71	; 0x47
   24570:	f043 0302 	orr.w	r3, r3, #2
   24574:	6022      	str	r2, [r4, #0]
   24576:	81a3      	strh	r3, [r4, #12]
   24578:	2301      	movs	r3, #1
   2457a:	6122      	str	r2, [r4, #16]
   2457c:	6163      	str	r3, [r4, #20]
   2457e:	e7ce      	b.n	2451e <__smakebuf_r+0x86>

00024580 <_Balloc>:
   24580:	b570      	push	{r4, r5, r6, lr}
   24582:	4606      	mov	r6, r0
   24584:	6a44      	ldr	r4, [r0, #36]	; 0x24
   24586:	460d      	mov	r5, r1
   24588:	b15c      	cbz	r4, 245a2 <_Balloc+0x22>
   2458a:	68e3      	ldr	r3, [r4, #12]
   2458c:	b19b      	cbz	r3, 245b6 <_Balloc+0x36>
   2458e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   24592:	b1e0      	cbz	r0, 245ce <_Balloc+0x4e>
   24594:	6802      	ldr	r2, [r0, #0]
   24596:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   2459a:	2300      	movs	r3, #0
   2459c:	6103      	str	r3, [r0, #16]
   2459e:	60c3      	str	r3, [r0, #12]
   245a0:	bd70      	pop	{r4, r5, r6, pc}
   245a2:	2010      	movs	r0, #16
   245a4:	f7fb fd02 	bl	1ffac <malloc>
   245a8:	2300      	movs	r3, #0
   245aa:	4604      	mov	r4, r0
   245ac:	6270      	str	r0, [r6, #36]	; 0x24
   245ae:	6043      	str	r3, [r0, #4]
   245b0:	6083      	str	r3, [r0, #8]
   245b2:	6003      	str	r3, [r0, #0]
   245b4:	60c3      	str	r3, [r0, #12]
   245b6:	4630      	mov	r0, r6
   245b8:	2104      	movs	r1, #4
   245ba:	2221      	movs	r2, #33	; 0x21
   245bc:	f001 fa5e 	bl	25a7c <_calloc_r>
   245c0:	6a73      	ldr	r3, [r6, #36]	; 0x24
   245c2:	60e0      	str	r0, [r4, #12]
   245c4:	68db      	ldr	r3, [r3, #12]
   245c6:	2b00      	cmp	r3, #0
   245c8:	d1e1      	bne.n	2458e <_Balloc+0xe>
   245ca:	4618      	mov	r0, r3
   245cc:	bd70      	pop	{r4, r5, r6, pc}
   245ce:	2401      	movs	r4, #1
   245d0:	4630      	mov	r0, r6
   245d2:	4621      	mov	r1, r4
   245d4:	fa04 f405 	lsl.w	r4, r4, r5
   245d8:	1d62      	adds	r2, r4, #5
   245da:	0092      	lsls	r2, r2, #2
   245dc:	f001 fa4e 	bl	25a7c <_calloc_r>
   245e0:	2800      	cmp	r0, #0
   245e2:	d0f3      	beq.n	245cc <_Balloc+0x4c>
   245e4:	6045      	str	r5, [r0, #4]
   245e6:	6084      	str	r4, [r0, #8]
   245e8:	e7d7      	b.n	2459a <_Balloc+0x1a>
   245ea:	bf00      	nop

000245ec <_Bfree>:
   245ec:	b530      	push	{r4, r5, lr}
   245ee:	4604      	mov	r4, r0
   245f0:	6a45      	ldr	r5, [r0, #36]	; 0x24
   245f2:	b083      	sub	sp, #12
   245f4:	b155      	cbz	r5, 2460c <_Bfree+0x20>
   245f6:	b139      	cbz	r1, 24608 <_Bfree+0x1c>
   245f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   245fa:	684a      	ldr	r2, [r1, #4]
   245fc:	68db      	ldr	r3, [r3, #12]
   245fe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   24602:	6008      	str	r0, [r1, #0]
   24604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   24608:	b003      	add	sp, #12
   2460a:	bd30      	pop	{r4, r5, pc}
   2460c:	2010      	movs	r0, #16
   2460e:	9101      	str	r1, [sp, #4]
   24610:	f7fb fccc 	bl	1ffac <malloc>
   24614:	9901      	ldr	r1, [sp, #4]
   24616:	6260      	str	r0, [r4, #36]	; 0x24
   24618:	6045      	str	r5, [r0, #4]
   2461a:	6085      	str	r5, [r0, #8]
   2461c:	6005      	str	r5, [r0, #0]
   2461e:	60c5      	str	r5, [r0, #12]
   24620:	e7e9      	b.n	245f6 <_Bfree+0xa>
   24622:	bf00      	nop

00024624 <__multadd>:
   24624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24628:	460c      	mov	r4, r1
   2462a:	4605      	mov	r5, r0
   2462c:	690e      	ldr	r6, [r1, #16]
   2462e:	f101 0014 	add.w	r0, r1, #20
   24632:	b082      	sub	sp, #8
   24634:	2100      	movs	r1, #0
   24636:	6807      	ldr	r7, [r0, #0]
   24638:	3101      	adds	r1, #1
   2463a:	fa1f fc87 	uxth.w	ip, r7
   2463e:	0c3f      	lsrs	r7, r7, #16
   24640:	fb02 330c 	mla	r3, r2, ip, r3
   24644:	fb02 f707 	mul.w	r7, r2, r7
   24648:	eb07 4713 	add.w	r7, r7, r3, lsr #16
   2464c:	fa1f fc83 	uxth.w	ip, r3
   24650:	0c3b      	lsrs	r3, r7, #16
   24652:	428e      	cmp	r6, r1
   24654:	ea4f 4807 	mov.w	r8, r7, lsl #16
   24658:	eb08 070c 	add.w	r7, r8, ip
   2465c:	f840 7b04 	str.w	r7, [r0], #4
   24660:	dce9      	bgt.n	24636 <__multadd+0x12>
   24662:	b13b      	cbz	r3, 24674 <__multadd+0x50>
   24664:	68a2      	ldr	r2, [r4, #8]
   24666:	4296      	cmp	r6, r2
   24668:	da08      	bge.n	2467c <__multadd+0x58>
   2466a:	eb04 0286 	add.w	r2, r4, r6, lsl #2
   2466e:	3601      	adds	r6, #1
   24670:	6126      	str	r6, [r4, #16]
   24672:	6153      	str	r3, [r2, #20]
   24674:	4620      	mov	r0, r4
   24676:	b002      	add	sp, #8
   24678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2467c:	6861      	ldr	r1, [r4, #4]
   2467e:	4628      	mov	r0, r5
   24680:	9301      	str	r3, [sp, #4]
   24682:	3101      	adds	r1, #1
   24684:	f7ff ff7c 	bl	24580 <_Balloc>
   24688:	6922      	ldr	r2, [r4, #16]
   2468a:	f104 010c 	add.w	r1, r4, #12
   2468e:	3202      	adds	r2, #2
   24690:	0092      	lsls	r2, r2, #2
   24692:	4607      	mov	r7, r0
   24694:	300c      	adds	r0, #12
   24696:	f7fb ffcb 	bl	20630 <memcpy>
   2469a:	4621      	mov	r1, r4
   2469c:	4628      	mov	r0, r5
   2469e:	463c      	mov	r4, r7
   246a0:	f7ff ffa4 	bl	245ec <_Bfree>
   246a4:	9b01      	ldr	r3, [sp, #4]
   246a6:	e7e0      	b.n	2466a <__multadd+0x46>

000246a8 <__s2b>:
   246a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   246ac:	f648 6439 	movw	r4, #36409	; 0x8e39
   246b0:	461e      	mov	r6, r3
   246b2:	f6c3 04e3 	movt	r4, #14563	; 0x38e3
   246b6:	3308      	adds	r3, #8
   246b8:	4688      	mov	r8, r1
   246ba:	4605      	mov	r5, r0
   246bc:	4617      	mov	r7, r2
   246be:	fb84 1403 	smull	r1, r4, r4, r3
   246c2:	17db      	asrs	r3, r3, #31
   246c4:	2100      	movs	r1, #0
   246c6:	ebc3 0364 	rsb	r3, r3, r4, asr #1
   246ca:	2b01      	cmp	r3, #1
   246cc:	dd05      	ble.n	246da <__s2b+0x32>
   246ce:	2201      	movs	r2, #1
   246d0:	2100      	movs	r1, #0
   246d2:	0052      	lsls	r2, r2, #1
   246d4:	3101      	adds	r1, #1
   246d6:	4293      	cmp	r3, r2
   246d8:	dcfb      	bgt.n	246d2 <__s2b+0x2a>
   246da:	4628      	mov	r0, r5
   246dc:	f7ff ff50 	bl	24580 <_Balloc>
   246e0:	9b08      	ldr	r3, [sp, #32]
   246e2:	6143      	str	r3, [r0, #20]
   246e4:	2301      	movs	r3, #1
   246e6:	2f09      	cmp	r7, #9
   246e8:	4601      	mov	r1, r0
   246ea:	6103      	str	r3, [r0, #16]
   246ec:	dd21      	ble.n	24732 <__s2b+0x8a>
   246ee:	f108 0909 	add.w	r9, r8, #9
   246f2:	2409      	movs	r4, #9
   246f4:	f818 3004 	ldrb.w	r3, [r8, r4]
   246f8:	220a      	movs	r2, #10
   246fa:	4628      	mov	r0, r5
   246fc:	3401      	adds	r4, #1
   246fe:	3b30      	subs	r3, #48	; 0x30
   24700:	f7ff ff90 	bl	24624 <__multadd>
   24704:	42bc      	cmp	r4, r7
   24706:	4601      	mov	r1, r0
   24708:	d1f4      	bne.n	246f4 <__s2b+0x4c>
   2470a:	eb09 0804 	add.w	r8, r9, r4
   2470e:	f1a8 0808 	sub.w	r8, r8, #8
   24712:	42a6      	cmp	r6, r4
   24714:	dd0a      	ble.n	2472c <__s2b+0x84>
   24716:	f818 3b01 	ldrb.w	r3, [r8], #1
   2471a:	220a      	movs	r2, #10
   2471c:	4628      	mov	r0, r5
   2471e:	3401      	adds	r4, #1
   24720:	3b30      	subs	r3, #48	; 0x30
   24722:	f7ff ff7f 	bl	24624 <__multadd>
   24726:	42b4      	cmp	r4, r6
   24728:	4601      	mov	r1, r0
   2472a:	d1f4      	bne.n	24716 <__s2b+0x6e>
   2472c:	4608      	mov	r0, r1
   2472e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   24732:	f108 080a 	add.w	r8, r8, #10
   24736:	2409      	movs	r4, #9
   24738:	e7eb      	b.n	24712 <__s2b+0x6a>
   2473a:	bf00      	nop

0002473c <__hi0bits>:
   2473c:	4603      	mov	r3, r0
   2473e:	2000      	movs	r0, #0
   24740:	0c1a      	lsrs	r2, r3, #16
   24742:	d101      	bne.n	24748 <__hi0bits+0xc>
   24744:	041b      	lsls	r3, r3, #16
   24746:	2010      	movs	r0, #16
   24748:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   2474c:	d101      	bne.n	24752 <__hi0bits+0x16>
   2474e:	3008      	adds	r0, #8
   24750:	021b      	lsls	r3, r3, #8
   24752:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   24756:	d101      	bne.n	2475c <__hi0bits+0x20>
   24758:	3004      	adds	r0, #4
   2475a:	011b      	lsls	r3, r3, #4
   2475c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   24760:	d101      	bne.n	24766 <__hi0bits+0x2a>
   24762:	3002      	adds	r0, #2
   24764:	009b      	lsls	r3, r3, #2
   24766:	2b00      	cmp	r3, #0
   24768:	db02      	blt.n	24770 <__hi0bits+0x34>
   2476a:	005b      	lsls	r3, r3, #1
   2476c:	d401      	bmi.n	24772 <__hi0bits+0x36>
   2476e:	2020      	movs	r0, #32
   24770:	4770      	bx	lr
   24772:	3001      	adds	r0, #1
   24774:	4770      	bx	lr
   24776:	bf00      	nop

00024778 <__lo0bits>:
   24778:	6803      	ldr	r3, [r0, #0]
   2477a:	4602      	mov	r2, r0
   2477c:	f013 0007 	ands.w	r0, r3, #7
   24780:	d007      	beq.n	24792 <__lo0bits+0x1a>
   24782:	07d9      	lsls	r1, r3, #31
   24784:	d41f      	bmi.n	247c6 <__lo0bits+0x4e>
   24786:	0798      	lsls	r0, r3, #30
   24788:	d41f      	bmi.n	247ca <__lo0bits+0x52>
   2478a:	089b      	lsrs	r3, r3, #2
   2478c:	2002      	movs	r0, #2
   2478e:	6013      	str	r3, [r2, #0]
   24790:	4770      	bx	lr
   24792:	b299      	uxth	r1, r3
   24794:	b909      	cbnz	r1, 2479a <__lo0bits+0x22>
   24796:	0c1b      	lsrs	r3, r3, #16
   24798:	2010      	movs	r0, #16
   2479a:	f013 0fff 	tst.w	r3, #255	; 0xff
   2479e:	d101      	bne.n	247a4 <__lo0bits+0x2c>
   247a0:	3008      	adds	r0, #8
   247a2:	0a1b      	lsrs	r3, r3, #8
   247a4:	0719      	lsls	r1, r3, #28
   247a6:	d101      	bne.n	247ac <__lo0bits+0x34>
   247a8:	3004      	adds	r0, #4
   247aa:	091b      	lsrs	r3, r3, #4
   247ac:	0799      	lsls	r1, r3, #30
   247ae:	d101      	bne.n	247b4 <__lo0bits+0x3c>
   247b0:	3002      	adds	r0, #2
   247b2:	089b      	lsrs	r3, r3, #2
   247b4:	07d9      	lsls	r1, r3, #31
   247b6:	d404      	bmi.n	247c2 <__lo0bits+0x4a>
   247b8:	085b      	lsrs	r3, r3, #1
   247ba:	d101      	bne.n	247c0 <__lo0bits+0x48>
   247bc:	2020      	movs	r0, #32
   247be:	4770      	bx	lr
   247c0:	3001      	adds	r0, #1
   247c2:	6013      	str	r3, [r2, #0]
   247c4:	4770      	bx	lr
   247c6:	2000      	movs	r0, #0
   247c8:	4770      	bx	lr
   247ca:	085b      	lsrs	r3, r3, #1
   247cc:	2001      	movs	r0, #1
   247ce:	6013      	str	r3, [r2, #0]
   247d0:	4770      	bx	lr
   247d2:	bf00      	nop

000247d4 <__i2b>:
   247d4:	b510      	push	{r4, lr}
   247d6:	460c      	mov	r4, r1
   247d8:	2101      	movs	r1, #1
   247da:	f7ff fed1 	bl	24580 <_Balloc>
   247de:	2201      	movs	r2, #1
   247e0:	6144      	str	r4, [r0, #20]
   247e2:	6102      	str	r2, [r0, #16]
   247e4:	bd10      	pop	{r4, pc}
   247e6:	bf00      	nop

000247e8 <__multiply>:
   247e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   247ec:	4692      	mov	sl, r2
   247ee:	690d      	ldr	r5, [r1, #16]
   247f0:	460c      	mov	r4, r1
   247f2:	6916      	ldr	r6, [r2, #16]
   247f4:	b087      	sub	sp, #28
   247f6:	42b5      	cmp	r5, r6
   247f8:	bfbf      	itttt	lt
   247fa:	4654      	movlt	r4, sl
   247fc:	462a      	movlt	r2, r5
   247fe:	4635      	movlt	r5, r6
   24800:	4616      	movlt	r6, r2
   24802:	68a3      	ldr	r3, [r4, #8]
   24804:	bfb8      	it	lt
   24806:	468a      	movlt	sl, r1
   24808:	eb05 0b06 	add.w	fp, r5, r6
   2480c:	6861      	ldr	r1, [r4, #4]
   2480e:	459b      	cmp	fp, r3
   24810:	bfc8      	it	gt
   24812:	3101      	addgt	r1, #1
   24814:	f7ff feb4 	bl	24580 <_Balloc>
   24818:	f10b 0104 	add.w	r1, fp, #4
   2481c:	9105      	str	r1, [sp, #20]
   2481e:	eb00 0381 	add.w	r3, r0, r1, lsl #2
   24822:	f100 0914 	add.w	r9, r0, #20
   24826:	3304      	adds	r3, #4
   24828:	9003      	str	r0, [sp, #12]
   2482a:	4599      	cmp	r9, r3
   2482c:	9304      	str	r3, [sp, #16]
   2482e:	d206      	bcs.n	2483e <__multiply+0x56>
   24830:	9904      	ldr	r1, [sp, #16]
   24832:	464b      	mov	r3, r9
   24834:	2200      	movs	r2, #0
   24836:	f843 2b04 	str.w	r2, [r3], #4
   2483a:	4299      	cmp	r1, r3
   2483c:	d8fb      	bhi.n	24836 <__multiply+0x4e>
   2483e:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
   24842:	f10a 0a14 	add.w	sl, sl, #20
   24846:	3614      	adds	r6, #20
   24848:	eb04 0585 	add.w	r5, r4, r5, lsl #2
   2484c:	3414      	adds	r4, #20
   2484e:	45b2      	cmp	sl, r6
   24850:	9601      	str	r6, [sp, #4]
   24852:	f105 0814 	add.w	r8, r5, #20
   24856:	9402      	str	r4, [sp, #8]
   24858:	d24a      	bcs.n	248f0 <__multiply+0x108>
   2485a:	f85a 5b04 	ldr.w	r5, [sl], #4
   2485e:	b2ac      	uxth	r4, r5
   24860:	b1ec      	cbz	r4, 2489e <__multiply+0xb6>
   24862:	9a02      	ldr	r2, [sp, #8]
   24864:	464b      	mov	r3, r9
   24866:	2500      	movs	r5, #0
   24868:	6818      	ldr	r0, [r3, #0]
   2486a:	461f      	mov	r7, r3
   2486c:	f852 1b04 	ldr.w	r1, [r2], #4
   24870:	b286      	uxth	r6, r0
   24872:	0c00      	lsrs	r0, r0, #16
   24874:	1976      	adds	r6, r6, r5
   24876:	fa1f fc81 	uxth.w	ip, r1
   2487a:	0c09      	lsrs	r1, r1, #16
   2487c:	fb04 660c 	mla	r6, r4, ip, r6
   24880:	fb04 0001 	mla	r0, r4, r1, r0
   24884:	eb00 4516 	add.w	r5, r0, r6, lsr #16
   24888:	b2b6      	uxth	r6, r6
   2488a:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
   2488e:	0c2d      	lsrs	r5, r5, #16
   24890:	4590      	cmp	r8, r2
   24892:	f843 6b04 	str.w	r6, [r3], #4
   24896:	d8e7      	bhi.n	24868 <__multiply+0x80>
   24898:	607d      	str	r5, [r7, #4]
   2489a:	f85a 5c04 	ldr.w	r5, [sl, #-4]
   2489e:	0c2d      	lsrs	r5, r5, #16
   248a0:	d021      	beq.n	248e6 <__multiply+0xfe>
   248a2:	f8d9 1000 	ldr.w	r1, [r9]
   248a6:	46cc      	mov	ip, r9
   248a8:	9b02      	ldr	r3, [sp, #8]
   248aa:	464e      	mov	r6, r9
   248ac:	4608      	mov	r0, r1
   248ae:	2700      	movs	r7, #0
   248b0:	e000      	b.n	248b4 <__multiply+0xcc>
   248b2:	4616      	mov	r6, r2
   248b4:	881c      	ldrh	r4, [r3, #0]
   248b6:	eb07 4710 	add.w	r7, r7, r0, lsr #16
   248ba:	4632      	mov	r2, r6
   248bc:	b289      	uxth	r1, r1
   248be:	fb05 7704 	mla	r7, r5, r4, r7
   248c2:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
   248c6:	f842 1b04 	str.w	r1, [r2], #4
   248ca:	f853 1b04 	ldr.w	r1, [r3], #4
   248ce:	f85c 0f04 	ldr.w	r0, [ip, #4]!
   248d2:	0c09      	lsrs	r1, r1, #16
   248d4:	b284      	uxth	r4, r0
   248d6:	fb05 4101 	mla	r1, r5, r1, r4
   248da:	eb01 4117 	add.w	r1, r1, r7, lsr #16
   248de:	0c0f      	lsrs	r7, r1, #16
   248e0:	4598      	cmp	r8, r3
   248e2:	d8e6      	bhi.n	248b2 <__multiply+0xca>
   248e4:	6071      	str	r1, [r6, #4]
   248e6:	9a01      	ldr	r2, [sp, #4]
   248e8:	f109 0904 	add.w	r9, r9, #4
   248ec:	4552      	cmp	r2, sl
   248ee:	d8b4      	bhi.n	2485a <__multiply+0x72>
   248f0:	f1bb 0f00 	cmp.w	fp, #0
   248f4:	dd0e      	ble.n	24914 <__multiply+0x12c>
   248f6:	9905      	ldr	r1, [sp, #20]
   248f8:	9a03      	ldr	r2, [sp, #12]
   248fa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   248fe:	b94b      	cbnz	r3, 24914 <__multiply+0x12c>
   24900:	9904      	ldr	r1, [sp, #16]
   24902:	465a      	mov	r2, fp
   24904:	1f0b      	subs	r3, r1, #4
   24906:	e002      	b.n	2490e <__multiply+0x126>
   24908:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   2490c:	b909      	cbnz	r1, 24912 <__multiply+0x12a>
   2490e:	3a01      	subs	r2, #1
   24910:	d1fa      	bne.n	24908 <__multiply+0x120>
   24912:	4693      	mov	fp, r2
   24914:	9a03      	ldr	r2, [sp, #12]
   24916:	4610      	mov	r0, r2
   24918:	f8c2 b010 	str.w	fp, [r2, #16]
   2491c:	b007      	add	sp, #28
   2491e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24922:	bf00      	nop

00024924 <__pow5mult>:
   24924:	f012 0303 	ands.w	r3, r2, #3
   24928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2492c:	4615      	mov	r5, r2
   2492e:	4604      	mov	r4, r0
   24930:	4688      	mov	r8, r1
   24932:	d127      	bne.n	24984 <__pow5mult+0x60>
   24934:	10ad      	asrs	r5, r5, #2
   24936:	d019      	beq.n	2496c <__pow5mult+0x48>
   24938:	6a66      	ldr	r6, [r4, #36]	; 0x24
   2493a:	2e00      	cmp	r6, #0
   2493c:	d02e      	beq.n	2499c <__pow5mult+0x78>
   2493e:	68b7      	ldr	r7, [r6, #8]
   24940:	b92f      	cbnz	r7, 2494e <__pow5mult+0x2a>
   24942:	e035      	b.n	249b0 <__pow5mult+0x8c>
   24944:	106d      	asrs	r5, r5, #1
   24946:	d011      	beq.n	2496c <__pow5mult+0x48>
   24948:	683e      	ldr	r6, [r7, #0]
   2494a:	b196      	cbz	r6, 24972 <__pow5mult+0x4e>
   2494c:	4637      	mov	r7, r6
   2494e:	07e8      	lsls	r0, r5, #31
   24950:	d5f8      	bpl.n	24944 <__pow5mult+0x20>
   24952:	4641      	mov	r1, r8
   24954:	463a      	mov	r2, r7
   24956:	4620      	mov	r0, r4
   24958:	f7ff ff46 	bl	247e8 <__multiply>
   2495c:	4641      	mov	r1, r8
   2495e:	4606      	mov	r6, r0
   24960:	4620      	mov	r0, r4
   24962:	f7ff fe43 	bl	245ec <_Bfree>
   24966:	106d      	asrs	r5, r5, #1
   24968:	46b0      	mov	r8, r6
   2496a:	d1ed      	bne.n	24948 <__pow5mult+0x24>
   2496c:	4640      	mov	r0, r8
   2496e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24972:	4639      	mov	r1, r7
   24974:	463a      	mov	r2, r7
   24976:	4620      	mov	r0, r4
   24978:	f7ff ff36 	bl	247e8 <__multiply>
   2497c:	6038      	str	r0, [r7, #0]
   2497e:	4607      	mov	r7, r0
   24980:	6006      	str	r6, [r0, #0]
   24982:	e7e4      	b.n	2494e <__pow5mult+0x2a>
   24984:	f24d 1230 	movw	r2, #53552	; 0xd130
   24988:	1e5e      	subs	r6, r3, #1
   2498a:	f2c0 0202 	movt	r2, #2
   2498e:	2300      	movs	r3, #0
   24990:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
   24994:	f7ff fe46 	bl	24624 <__multadd>
   24998:	4680      	mov	r8, r0
   2499a:	e7cb      	b.n	24934 <__pow5mult+0x10>
   2499c:	2010      	movs	r0, #16
   2499e:	f7fb fb05 	bl	1ffac <malloc>
   249a2:	2300      	movs	r3, #0
   249a4:	4606      	mov	r6, r0
   249a6:	6260      	str	r0, [r4, #36]	; 0x24
   249a8:	6043      	str	r3, [r0, #4]
   249aa:	6083      	str	r3, [r0, #8]
   249ac:	6003      	str	r3, [r0, #0]
   249ae:	60c3      	str	r3, [r0, #12]
   249b0:	4620      	mov	r0, r4
   249b2:	f240 2171 	movw	r1, #625	; 0x271
   249b6:	f7ff ff0d 	bl	247d4 <__i2b>
   249ba:	2300      	movs	r3, #0
   249bc:	60b0      	str	r0, [r6, #8]
   249be:	4607      	mov	r7, r0
   249c0:	6003      	str	r3, [r0, #0]
   249c2:	e7c4      	b.n	2494e <__pow5mult+0x2a>

000249c4 <__lshift>:
   249c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   249c8:	4690      	mov	r8, r2
   249ca:	690a      	ldr	r2, [r1, #16]
   249cc:	460c      	mov	r4, r1
   249ce:	ea4f 1668 	mov.w	r6, r8, asr #5
   249d2:	688b      	ldr	r3, [r1, #8]
   249d4:	eb06 0a02 	add.w	sl, r6, r2
   249d8:	4681      	mov	r9, r0
   249da:	f10a 0501 	add.w	r5, sl, #1
   249de:	6849      	ldr	r1, [r1, #4]
   249e0:	429d      	cmp	r5, r3
   249e2:	dd03      	ble.n	249ec <__lshift+0x28>
   249e4:	005b      	lsls	r3, r3, #1
   249e6:	3101      	adds	r1, #1
   249e8:	429d      	cmp	r5, r3
   249ea:	dcfb      	bgt.n	249e4 <__lshift+0x20>
   249ec:	4648      	mov	r0, r9
   249ee:	f7ff fdc7 	bl	24580 <_Balloc>
   249f2:	2e00      	cmp	r6, #0
   249f4:	4607      	mov	r7, r0
   249f6:	f100 0314 	add.w	r3, r0, #20
   249fa:	dd09      	ble.n	24a10 <__lshift+0x4c>
   249fc:	2200      	movs	r2, #0
   249fe:	4611      	mov	r1, r2
   24a00:	3201      	adds	r2, #1
   24a02:	f843 1b04 	str.w	r1, [r3], #4
   24a06:	42b2      	cmp	r2, r6
   24a08:	d1fa      	bne.n	24a00 <__lshift+0x3c>
   24a0a:	eb07 0382 	add.w	r3, r7, r2, lsl #2
   24a0e:	3314      	adds	r3, #20
   24a10:	6926      	ldr	r6, [r4, #16]
   24a12:	f104 0214 	add.w	r2, r4, #20
   24a16:	eb04 0686 	add.w	r6, r4, r6, lsl #2
   24a1a:	3614      	adds	r6, #20
   24a1c:	f018 081f 	ands.w	r8, r8, #31
   24a20:	d020      	beq.n	24a64 <__lshift+0xa0>
   24a22:	f1c8 0e20 	rsb	lr, r8, #32
   24a26:	2000      	movs	r0, #0
   24a28:	e000      	b.n	24a2c <__lshift+0x68>
   24a2a:	460b      	mov	r3, r1
   24a2c:	f8d2 c000 	ldr.w	ip, [r2]
   24a30:	4619      	mov	r1, r3
   24a32:	fa0c fc08 	lsl.w	ip, ip, r8
   24a36:	ea4c 0000 	orr.w	r0, ip, r0
   24a3a:	f841 0b04 	str.w	r0, [r1], #4
   24a3e:	f852 0b04 	ldr.w	r0, [r2], #4
   24a42:	4296      	cmp	r6, r2
   24a44:	fa20 f00e 	lsr.w	r0, r0, lr
   24a48:	d8ef      	bhi.n	24a2a <__lshift+0x66>
   24a4a:	6058      	str	r0, [r3, #4]
   24a4c:	b108      	cbz	r0, 24a52 <__lshift+0x8e>
   24a4e:	f10a 0502 	add.w	r5, sl, #2
   24a52:	4648      	mov	r0, r9
   24a54:	3d01      	subs	r5, #1
   24a56:	4621      	mov	r1, r4
   24a58:	613d      	str	r5, [r7, #16]
   24a5a:	f7ff fdc7 	bl	245ec <_Bfree>
   24a5e:	4638      	mov	r0, r7
   24a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24a64:	f852 1b04 	ldr.w	r1, [r2], #4
   24a68:	4296      	cmp	r6, r2
   24a6a:	f843 1b04 	str.w	r1, [r3], #4
   24a6e:	d9f0      	bls.n	24a52 <__lshift+0x8e>
   24a70:	f852 1b04 	ldr.w	r1, [r2], #4
   24a74:	4296      	cmp	r6, r2
   24a76:	f843 1b04 	str.w	r1, [r3], #4
   24a7a:	d8f3      	bhi.n	24a64 <__lshift+0xa0>
   24a7c:	e7e9      	b.n	24a52 <__lshift+0x8e>
   24a7e:	bf00      	nop

00024a80 <__mcmp>:
   24a80:	4603      	mov	r3, r0
   24a82:	690a      	ldr	r2, [r1, #16]
   24a84:	6900      	ldr	r0, [r0, #16]
   24a86:	b430      	push	{r4, r5}
   24a88:	1a80      	subs	r0, r0, r2
   24a8a:	d110      	bne.n	24aae <__mcmp+0x2e>
   24a8c:	3204      	adds	r2, #4
   24a8e:	f103 0514 	add.w	r5, r3, #20
   24a92:	0092      	lsls	r2, r2, #2
   24a94:	189b      	adds	r3, r3, r2
   24a96:	1889      	adds	r1, r1, r2
   24a98:	3304      	adds	r3, #4
   24a9a:	3104      	adds	r1, #4
   24a9c:	f853 4c04 	ldr.w	r4, [r3, #-4]
   24aa0:	3b04      	subs	r3, #4
   24aa2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   24aa6:	4294      	cmp	r4, r2
   24aa8:	d103      	bne.n	24ab2 <__mcmp+0x32>
   24aaa:	429d      	cmp	r5, r3
   24aac:	d3f6      	bcc.n	24a9c <__mcmp+0x1c>
   24aae:	bc30      	pop	{r4, r5}
   24ab0:	4770      	bx	lr
   24ab2:	bf38      	it	cc
   24ab4:	f04f 30ff 	movcc.w	r0, #4294967295
   24ab8:	d3f9      	bcc.n	24aae <__mcmp+0x2e>
   24aba:	2001      	movs	r0, #1
   24abc:	e7f7      	b.n	24aae <__mcmp+0x2e>
   24abe:	bf00      	nop

00024ac0 <__mdiff>:
   24ac0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24ac4:	460c      	mov	r4, r1
   24ac6:	4606      	mov	r6, r0
   24ac8:	4611      	mov	r1, r2
   24aca:	4620      	mov	r0, r4
   24acc:	4615      	mov	r5, r2
   24ace:	f7ff ffd7 	bl	24a80 <__mcmp>
   24ad2:	1e07      	subs	r7, r0, #0
   24ad4:	d05b      	beq.n	24b8e <__mdiff+0xce>
   24ad6:	db55      	blt.n	24b84 <__mdiff+0xc4>
   24ad8:	2700      	movs	r7, #0
   24ada:	4630      	mov	r0, r6
   24adc:	6861      	ldr	r1, [r4, #4]
   24ade:	f7ff fd4f 	bl	24580 <_Balloc>
   24ae2:	f8d4 8010 	ldr.w	r8, [r4, #16]
   24ae6:	692b      	ldr	r3, [r5, #16]
   24ae8:	f104 0c14 	add.w	ip, r4, #20
   24aec:	f105 0914 	add.w	r9, r5, #20
   24af0:	2600      	movs	r6, #0
   24af2:	eb04 0488 	add.w	r4, r4, r8, lsl #2
   24af6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   24afa:	3414      	adds	r4, #20
   24afc:	3514      	adds	r5, #20
   24afe:	f100 0a14 	add.w	sl, r0, #20
   24b02:	60c7      	str	r7, [r0, #12]
   24b04:	f85c 7b04 	ldr.w	r7, [ip], #4
   24b08:	4653      	mov	r3, sl
   24b0a:	f859 ab04 	ldr.w	sl, [r9], #4
   24b0e:	4662      	mov	r2, ip
   24b10:	b2b9      	uxth	r1, r7
   24b12:	1989      	adds	r1, r1, r6
   24b14:	fa1f fb8a 	uxth.w	fp, sl
   24b18:	ebcb 0101 	rsb	r1, fp, r1
   24b1c:	ea4f 461a 	mov.w	r6, sl, lsr #16
   24b20:	ebc6 4617 	rsb	r6, r6, r7, lsr #16
   24b24:	eb06 4621 	add.w	r6, r6, r1, asr #16
   24b28:	b289      	uxth	r1, r1
   24b2a:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
   24b2e:	1436      	asrs	r6, r6, #16
   24b30:	454d      	cmp	r5, r9
   24b32:	f843 1b04 	str.w	r1, [r3], #4
   24b36:	469a      	mov	sl, r3
   24b38:	d8e4      	bhi.n	24b04 <__mdiff+0x44>
   24b3a:	4564      	cmp	r4, ip
   24b3c:	461f      	mov	r7, r3
   24b3e:	d915      	bls.n	24b6c <__mdiff+0xac>
   24b40:	f852 5b04 	ldr.w	r5, [r2], #4
   24b44:	b2a9      	uxth	r1, r5
   24b46:	0c2d      	lsrs	r5, r5, #16
   24b48:	198e      	adds	r6, r1, r6
   24b4a:	eb05 4526 	add.w	r5, r5, r6, asr #16
   24b4e:	b2b6      	uxth	r6, r6
   24b50:	ea46 4105 	orr.w	r1, r6, r5, lsl #16
   24b54:	142e      	asrs	r6, r5, #16
   24b56:	4294      	cmp	r4, r2
   24b58:	f843 1b04 	str.w	r1, [r3], #4
   24b5c:	d8f0      	bhi.n	24b40 <__mdiff+0x80>
   24b5e:	ea6f 030c 	mvn.w	r3, ip
   24b62:	191b      	adds	r3, r3, r4
   24b64:	f023 0303 	bic.w	r3, r3, #3
   24b68:	3304      	adds	r3, #4
   24b6a:	18fb      	adds	r3, r7, r3
   24b6c:	b931      	cbnz	r1, 24b7c <__mdiff+0xbc>
   24b6e:	3b04      	subs	r3, #4
   24b70:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   24b74:	f108 38ff 	add.w	r8, r8, #4294967295
   24b78:	2a00      	cmp	r2, #0
   24b7a:	d0f9      	beq.n	24b70 <__mdiff+0xb0>
   24b7c:	f8c0 8010 	str.w	r8, [r0, #16]
   24b80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24b84:	4623      	mov	r3, r4
   24b86:	2701      	movs	r7, #1
   24b88:	462c      	mov	r4, r5
   24b8a:	461d      	mov	r5, r3
   24b8c:	e7a5      	b.n	24ada <__mdiff+0x1a>
   24b8e:	4630      	mov	r0, r6
   24b90:	4639      	mov	r1, r7
   24b92:	f7ff fcf5 	bl	24580 <_Balloc>
   24b96:	2301      	movs	r3, #1
   24b98:	6147      	str	r7, [r0, #20]
   24b9a:	6103      	str	r3, [r0, #16]
   24b9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00024ba0 <__ulp>:
   24ba0:	2300      	movs	r3, #0
   24ba2:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
   24ba6:	400b      	ands	r3, r1
   24ba8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
   24bac:	2b00      	cmp	r3, #0
   24bae:	dd02      	ble.n	24bb6 <__ulp+0x16>
   24bb0:	4619      	mov	r1, r3
   24bb2:	2000      	movs	r0, #0
   24bb4:	4770      	bx	lr
   24bb6:	425b      	negs	r3, r3
   24bb8:	2100      	movs	r1, #0
   24bba:	151b      	asrs	r3, r3, #20
   24bbc:	2b13      	cmp	r3, #19
   24bbe:	dd0b      	ble.n	24bd8 <__ulp+0x38>
   24bc0:	2b32      	cmp	r3, #50	; 0x32
   24bc2:	dd02      	ble.n	24bca <__ulp+0x2a>
   24bc4:	2301      	movs	r3, #1
   24bc6:	4618      	mov	r0, r3
   24bc8:	4770      	bx	lr
   24bca:	2201      	movs	r2, #1
   24bcc:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
   24bd0:	fa02 f303 	lsl.w	r3, r2, r3
   24bd4:	4618      	mov	r0, r3
   24bd6:	4770      	bx	lr
   24bd8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   24bdc:	2000      	movs	r0, #0
   24bde:	fa42 f103 	asr.w	r1, r2, r3
   24be2:	4770      	bx	lr

00024be4 <__b2d>:
   24be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24be8:	f100 0614 	add.w	r6, r0, #20
   24bec:	6904      	ldr	r4, [r0, #16]
   24bee:	460f      	mov	r7, r1
   24bf0:	3404      	adds	r4, #4
   24bf2:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
   24bf6:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   24bfa:	46a0      	mov	r8, r4
   24bfc:	4628      	mov	r0, r5
   24bfe:	f7ff fd9d 	bl	2473c <__hi0bits>
   24c02:	280a      	cmp	r0, #10
   24c04:	f1c0 0320 	rsb	r3, r0, #32
   24c08:	603b      	str	r3, [r7, #0]
   24c0a:	dc18      	bgt.n	24c3e <__b2d+0x5a>
   24c0c:	42a6      	cmp	r6, r4
   24c0e:	f1c0 010b 	rsb	r1, r0, #11
   24c12:	fa25 f701 	lsr.w	r7, r5, r1
   24c16:	bf38      	it	cc
   24c18:	f854 4c04 	ldrcc.w	r4, [r4, #-4]
   24c1c:	f047 577e 	orr.w	r7, r7, #1065353216	; 0x3f800000
   24c20:	f447 03e0 	orr.w	r3, r7, #7340032	; 0x700000
   24c24:	bf34      	ite	cc
   24c26:	fa24 f101 	lsrcc.w	r1, r4, r1
   24c2a:	2100      	movcs	r1, #0
   24c2c:	3015      	adds	r0, #21
   24c2e:	fa05 f500 	lsl.w	r5, r5, r0
   24c32:	ea41 0205 	orr.w	r2, r1, r5
   24c36:	4610      	mov	r0, r2
   24c38:	4619      	mov	r1, r3
   24c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24c3e:	2100      	movs	r1, #0
   24c40:	42a6      	cmp	r6, r4
   24c42:	d202      	bcs.n	24c4a <__b2d+0x66>
   24c44:	f858 1c04 	ldr.w	r1, [r8, #-4]
   24c48:	3c04      	subs	r4, #4
   24c4a:	f1b0 070b 	subs.w	r7, r0, #11
   24c4e:	bf02      	ittt	eq
   24c50:	f045 557e 	orreq.w	r5, r5, #1065353216	; 0x3f800000
   24c54:	460a      	moveq	r2, r1
   24c56:	f445 03e0 	orreq.w	r3, r5, #7340032	; 0x700000
   24c5a:	d0ec      	beq.n	24c36 <__b2d+0x52>
   24c5c:	42b4      	cmp	r4, r6
   24c5e:	fa05 f507 	lsl.w	r5, r5, r7
   24c62:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
   24c66:	f045 557e 	orr.w	r5, r5, #1065353216	; 0x3f800000
   24c6a:	bf88      	it	hi
   24c6c:	f854 4c04 	ldrhi.w	r4, [r4, #-4]
   24c70:	fa21 fc00 	lsr.w	ip, r1, r0
   24c74:	f445 05e0 	orr.w	r5, r5, #7340032	; 0x700000
   24c78:	fa01 f107 	lsl.w	r1, r1, r7
   24c7c:	ea45 030c 	orr.w	r3, r5, ip
   24c80:	bf8c      	ite	hi
   24c82:	fa24 f000 	lsrhi.w	r0, r4, r0
   24c86:	2000      	movls	r0, #0
   24c88:	ea40 0201 	orr.w	r2, r0, r1
   24c8c:	4619      	mov	r1, r3
   24c8e:	4610      	mov	r0, r2
   24c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00024c94 <__d2b>:
   24c94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24c98:	b083      	sub	sp, #12
   24c9a:	2101      	movs	r1, #1
   24c9c:	461d      	mov	r5, r3
   24c9e:	4614      	mov	r4, r2
   24ca0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   24ca2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   24ca4:	f7ff fc6c 	bl	24580 <_Balloc>
   24ca8:	f3c5 590a 	ubfx	r9, r5, #20, #11
   24cac:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
   24cb0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
   24cb4:	9301      	str	r3, [sp, #4]
   24cb6:	4680      	mov	r8, r0
   24cb8:	f1b9 0f00 	cmp.w	r9, #0
   24cbc:	d002      	beq.n	24cc4 <__d2b+0x30>
   24cbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   24cc2:	9301      	str	r3, [sp, #4]
   24cc4:	2c00      	cmp	r4, #0
   24cc6:	d026      	beq.n	24d16 <__d2b+0x82>
   24cc8:	a802      	add	r0, sp, #8
   24cca:	f840 4d08 	str.w	r4, [r0, #-8]!
   24cce:	4668      	mov	r0, sp
   24cd0:	f7ff fd52 	bl	24778 <__lo0bits>
   24cd4:	9b01      	ldr	r3, [sp, #4]
   24cd6:	2800      	cmp	r0, #0
   24cd8:	d135      	bne.n	24d46 <__d2b+0xb2>
   24cda:	9a00      	ldr	r2, [sp, #0]
   24cdc:	f8c8 2014 	str.w	r2, [r8, #20]
   24ce0:	2b00      	cmp	r3, #0
   24ce2:	bf0c      	ite	eq
   24ce4:	2401      	moveq	r4, #1
   24ce6:	2402      	movne	r4, #2
   24ce8:	f8c8 3018 	str.w	r3, [r8, #24]
   24cec:	f8c8 4010 	str.w	r4, [r8, #16]
   24cf0:	f1b9 0f00 	cmp.w	r9, #0
   24cf4:	d11d      	bne.n	24d32 <__d2b+0x9e>
   24cf6:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   24cfa:	f5a0 6086 	sub.w	r0, r0, #1072	; 0x430
   24cfe:	3802      	subs	r0, #2
   24d00:	6038      	str	r0, [r7, #0]
   24d02:	6918      	ldr	r0, [r3, #16]
   24d04:	0164      	lsls	r4, r4, #5
   24d06:	f7ff fd19 	bl	2473c <__hi0bits>
   24d0a:	1a24      	subs	r4, r4, r0
   24d0c:	6034      	str	r4, [r6, #0]
   24d0e:	4640      	mov	r0, r8
   24d10:	b003      	add	sp, #12
   24d12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   24d16:	a801      	add	r0, sp, #4
   24d18:	f7ff fd2e 	bl	24778 <__lo0bits>
   24d1c:	2301      	movs	r3, #1
   24d1e:	461c      	mov	r4, r3
   24d20:	f8c8 3010 	str.w	r3, [r8, #16]
   24d24:	9b01      	ldr	r3, [sp, #4]
   24d26:	f8c8 3014 	str.w	r3, [r8, #20]
   24d2a:	3020      	adds	r0, #32
   24d2c:	f1b9 0f00 	cmp.w	r9, #0
   24d30:	d0e1      	beq.n	24cf6 <__d2b+0x62>
   24d32:	f5a9 6986 	sub.w	r9, r9, #1072	; 0x430
   24d36:	f1c0 0335 	rsb	r3, r0, #53	; 0x35
   24d3a:	f1a9 0903 	sub.w	r9, r9, #3
   24d3e:	4448      	add	r0, r9
   24d40:	6038      	str	r0, [r7, #0]
   24d42:	6033      	str	r3, [r6, #0]
   24d44:	e7e3      	b.n	24d0e <__d2b+0x7a>
   24d46:	f1c0 0220 	rsb	r2, r0, #32
   24d4a:	9900      	ldr	r1, [sp, #0]
   24d4c:	fa03 f202 	lsl.w	r2, r3, r2
   24d50:	fa23 f300 	lsr.w	r3, r3, r0
   24d54:	430a      	orrs	r2, r1
   24d56:	9301      	str	r3, [sp, #4]
   24d58:	f8c8 2014 	str.w	r2, [r8, #20]
   24d5c:	e7c0      	b.n	24ce0 <__d2b+0x4c>
   24d5e:	bf00      	nop

00024d60 <__ratio>:
   24d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24d64:	b083      	sub	sp, #12
   24d66:	460c      	mov	r4, r1
   24d68:	4669      	mov	r1, sp
   24d6a:	4605      	mov	r5, r0
   24d6c:	f7ff ff3a 	bl	24be4 <__b2d>
   24d70:	4606      	mov	r6, r0
   24d72:	460f      	mov	r7, r1
   24d74:	4620      	mov	r0, r4
   24d76:	a901      	add	r1, sp, #4
   24d78:	f7ff ff34 	bl	24be4 <__b2d>
   24d7c:	460b      	mov	r3, r1
   24d7e:	4602      	mov	r2, r0
   24d80:	6929      	ldr	r1, [r5, #16]
   24d82:	6920      	ldr	r0, [r4, #16]
   24d84:	9c00      	ldr	r4, [sp, #0]
   24d86:	1a09      	subs	r1, r1, r0
   24d88:	9801      	ldr	r0, [sp, #4]
   24d8a:	0149      	lsls	r1, r1, #5
   24d8c:	1a20      	subs	r0, r4, r0
   24d8e:	1841      	adds	r1, r0, r1
   24d90:	2900      	cmp	r1, #0
   24d92:	bfdc      	itt	le
   24d94:	eba3 5101 	suble.w	r1, r3, r1, lsl #20
   24d98:	460b      	movle	r3, r1
   24d9a:	dd03      	ble.n	24da4 <__ratio+0x44>
   24d9c:	0509      	lsls	r1, r1, #20
   24d9e:	eb01 0907 	add.w	r9, r1, r7
   24da2:	464f      	mov	r7, r9
   24da4:	4630      	mov	r0, r6
   24da6:	4639      	mov	r1, r7
   24da8:	f7ee fc28 	bl	135fc <__aeabi_ddiv>
   24dac:	b003      	add	sp, #12
   24dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24db2:	bf00      	nop

00024db4 <_mprec_log10>:
   24db4:	2817      	cmp	r0, #23
   24db6:	b510      	push	{r4, lr}
   24db8:	4604      	mov	r4, r0
   24dba:	dd0c      	ble.n	24dd6 <_mprec_log10+0x22>
   24dbc:	2100      	movs	r1, #0
   24dbe:	2000      	movs	r0, #0
   24dc0:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
   24dc4:	2300      	movs	r3, #0
   24dc6:	2200      	movs	r2, #0
   24dc8:	f2c4 0324 	movt	r3, #16420	; 0x4024
   24dcc:	f7ee faec 	bl	133a8 <__aeabi_dmul>
   24dd0:	3c01      	subs	r4, #1
   24dd2:	d1f7      	bne.n	24dc4 <_mprec_log10+0x10>
   24dd4:	bd10      	pop	{r4, pc}
   24dd6:	f24d 1330 	movw	r3, #53552	; 0xd130
   24dda:	f2c0 0302 	movt	r3, #2
   24dde:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   24de2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
   24de6:	bd10      	pop	{r4, pc}

00024de8 <__copybits>:
   24de8:	b470      	push	{r4, r5, r6}
   24dea:	3901      	subs	r1, #1
   24dec:	6916      	ldr	r6, [r2, #16]
   24dee:	f102 0314 	add.w	r3, r2, #20
   24df2:	1149      	asrs	r1, r1, #5
   24df4:	3101      	adds	r1, #1
   24df6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   24dfa:	3614      	adds	r6, #20
   24dfc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   24e00:	42b3      	cmp	r3, r6
   24e02:	d20c      	bcs.n	24e1e <__copybits+0x36>
   24e04:	4604      	mov	r4, r0
   24e06:	f853 5b04 	ldr.w	r5, [r3], #4
   24e0a:	429e      	cmp	r6, r3
   24e0c:	f844 5b04 	str.w	r5, [r4], #4
   24e10:	d8f9      	bhi.n	24e06 <__copybits+0x1e>
   24e12:	1ab3      	subs	r3, r6, r2
   24e14:	3b15      	subs	r3, #21
   24e16:	f023 0303 	bic.w	r3, r3, #3
   24e1a:	3304      	adds	r3, #4
   24e1c:	18c0      	adds	r0, r0, r3
   24e1e:	4281      	cmp	r1, r0
   24e20:	d904      	bls.n	24e2c <__copybits+0x44>
   24e22:	2300      	movs	r3, #0
   24e24:	f840 3b04 	str.w	r3, [r0], #4
   24e28:	4281      	cmp	r1, r0
   24e2a:	d8fb      	bhi.n	24e24 <__copybits+0x3c>
   24e2c:	bc70      	pop	{r4, r5, r6}
   24e2e:	4770      	bx	lr

00024e30 <__any_on>:
   24e30:	6902      	ldr	r2, [r0, #16]
   24e32:	114b      	asrs	r3, r1, #5
   24e34:	b410      	push	{r4}
   24e36:	429a      	cmp	r2, r3
   24e38:	db01      	blt.n	24e3e <__any_on+0xe>
   24e3a:	461a      	mov	r2, r3
   24e3c:	dc18      	bgt.n	24e70 <__any_on+0x40>
   24e3e:	3204      	adds	r2, #4
   24e40:	f100 0114 	add.w	r1, r0, #20
   24e44:	eb00 0382 	add.w	r3, r0, r2, lsl #2
   24e48:	1d1c      	adds	r4, r3, #4
   24e4a:	42a1      	cmp	r1, r4
   24e4c:	d21d      	bcs.n	24e8a <__any_on+0x5a>
   24e4e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   24e52:	b952      	cbnz	r2, 24e6a <__any_on+0x3a>
   24e54:	1a59      	subs	r1, r3, r1
   24e56:	3103      	adds	r1, #3
   24e58:	f021 0103 	bic.w	r1, r1, #3
   24e5c:	1a59      	subs	r1, r3, r1
   24e5e:	428b      	cmp	r3, r1
   24e60:	d013      	beq.n	24e8a <__any_on+0x5a>
   24e62:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   24e66:	2a00      	cmp	r2, #0
   24e68:	d0f9      	beq.n	24e5e <__any_on+0x2e>
   24e6a:	2001      	movs	r0, #1
   24e6c:	bc10      	pop	{r4}
   24e6e:	4770      	bx	lr
   24e70:	f011 011f 	ands.w	r1, r1, #31
   24e74:	d0e3      	beq.n	24e3e <__any_on+0xe>
   24e76:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   24e7a:	695b      	ldr	r3, [r3, #20]
   24e7c:	fa23 f401 	lsr.w	r4, r3, r1
   24e80:	fa04 f101 	lsl.w	r1, r4, r1
   24e84:	4299      	cmp	r1, r3
   24e86:	d1f0      	bne.n	24e6a <__any_on+0x3a>
   24e88:	e7d9      	b.n	24e3e <__any_on+0xe>
   24e8a:	2000      	movs	r0, #0
   24e8c:	e7ee      	b.n	24e6c <__any_on+0x3c>
   24e8e:	bf00      	nop

00024e90 <__sread>:
   24e90:	b510      	push	{r4, lr}
   24e92:	460c      	mov	r4, r1
   24e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   24e98:	f000 fed4 	bl	25c44 <_read_r>
   24e9c:	2800      	cmp	r0, #0
   24e9e:	bfab      	itete	ge
   24ea0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   24ea2:	89a3      	ldrhlt	r3, [r4, #12]
   24ea4:	181b      	addge	r3, r3, r0
   24ea6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   24eaa:	bfac      	ite	ge
   24eac:	6563      	strge	r3, [r4, #84]	; 0x54
   24eae:	81a3      	strhlt	r3, [r4, #12]
   24eb0:	bd10      	pop	{r4, pc}
   24eb2:	bf00      	nop

00024eb4 <__seofread>:
   24eb4:	2000      	movs	r0, #0
   24eb6:	4770      	bx	lr

00024eb8 <__swrite>:
   24eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24ebc:	461d      	mov	r5, r3
   24ebe:	898b      	ldrh	r3, [r1, #12]
   24ec0:	4616      	mov	r6, r2
   24ec2:	460c      	mov	r4, r1
   24ec4:	4607      	mov	r7, r0
   24ec6:	05da      	lsls	r2, r3, #23
   24ec8:	d506      	bpl.n	24ed8 <__swrite+0x20>
   24eca:	2302      	movs	r3, #2
   24ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   24ed0:	2200      	movs	r2, #0
   24ed2:	f000 fea1 	bl	25c18 <_lseek_r>
   24ed6:	89a3      	ldrh	r3, [r4, #12]
   24ed8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   24edc:	4638      	mov	r0, r7
   24ede:	81a3      	strh	r3, [r4, #12]
   24ee0:	4632      	mov	r2, r6
   24ee2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   24ee6:	462b      	mov	r3, r5
   24ee8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   24eec:	f7fd be24 	b.w	22b38 <_write_r>

00024ef0 <__sseek>:
   24ef0:	b510      	push	{r4, lr}
   24ef2:	460c      	mov	r4, r1
   24ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   24ef8:	f000 fe8e 	bl	25c18 <_lseek_r>
   24efc:	89a3      	ldrh	r3, [r4, #12]
   24efe:	1c41      	adds	r1, r0, #1
   24f00:	bf15      	itete	ne
   24f02:	6560      	strne	r0, [r4, #84]	; 0x54
   24f04:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   24f08:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   24f0c:	81a3      	strheq	r3, [r4, #12]
   24f0e:	bf18      	it	ne
   24f10:	81a3      	strhne	r3, [r4, #12]
   24f12:	bd10      	pop	{r4, pc}

00024f14 <__sclose>:
   24f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   24f18:	f000 bde0 	b.w	25adc <_close_r>

00024f1c <__ssprint_r>:
   24f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24f20:	b085      	sub	sp, #20
   24f22:	6894      	ldr	r4, [r2, #8]
   24f24:	4691      	mov	r9, r2
   24f26:	9003      	str	r0, [sp, #12]
   24f28:	460d      	mov	r5, r1
   24f2a:	6817      	ldr	r7, [r2, #0]
   24f2c:	2c00      	cmp	r4, #0
   24f2e:	d07d      	beq.n	2502c <__ssprint_r+0x110>
   24f30:	f04f 0a00 	mov.w	sl, #0
   24f34:	6808      	ldr	r0, [r1, #0]
   24f36:	688b      	ldr	r3, [r1, #8]
   24f38:	4654      	mov	r4, sl
   24f3a:	2c00      	cmp	r4, #0
   24f3c:	d051      	beq.n	24fe2 <__ssprint_r+0xc6>
   24f3e:	429c      	cmp	r4, r3
   24f40:	461e      	mov	r6, r3
   24f42:	4698      	mov	r8, r3
   24f44:	bf3c      	itt	cc
   24f46:	4626      	movcc	r6, r4
   24f48:	46a0      	movcc	r8, r4
   24f4a:	d33a      	bcc.n	24fc2 <__ssprint_r+0xa6>
   24f4c:	f8b5 e00c 	ldrh.w	lr, [r5, #12]
   24f50:	f41e 6f90 	tst.w	lr, #1152	; 0x480
   24f54:	d035      	beq.n	24fc2 <__ssprint_r+0xa6>
   24f56:	696b      	ldr	r3, [r5, #20]
   24f58:	1c62      	adds	r2, r4, #1
   24f5a:	6929      	ldr	r1, [r5, #16]
   24f5c:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
   24f60:	1a43      	subs	r3, r0, r1
   24f62:	18d0      	adds	r0, r2, r3
   24f64:	eb0b 7bdb 	add.w	fp, fp, fp, lsr #31
   24f68:	ea4f 0b6b 	mov.w	fp, fp, asr #1
   24f6c:	4583      	cmp	fp, r0
   24f6e:	465a      	mov	r2, fp
   24f70:	bf3c      	itt	cc
   24f72:	4683      	movcc	fp, r0
   24f74:	4602      	movcc	r2, r0
   24f76:	f41e 6f80 	tst.w	lr, #1024	; 0x400
   24f7a:	9803      	ldr	r0, [sp, #12]
   24f7c:	d036      	beq.n	24fec <__ssprint_r+0xd0>
   24f7e:	4611      	mov	r1, r2
   24f80:	9301      	str	r3, [sp, #4]
   24f82:	f7fb f823 	bl	1ffcc <_malloc_r>
   24f86:	9b01      	ldr	r3, [sp, #4]
   24f88:	2800      	cmp	r0, #0
   24f8a:	d03a      	beq.n	25002 <__ssprint_r+0xe6>
   24f8c:	6929      	ldr	r1, [r5, #16]
   24f8e:	461a      	mov	r2, r3
   24f90:	9301      	str	r3, [sp, #4]
   24f92:	9002      	str	r0, [sp, #8]
   24f94:	f7fb fb4c 	bl	20630 <memcpy>
   24f98:	89aa      	ldrh	r2, [r5, #12]
   24f9a:	9b01      	ldr	r3, [sp, #4]
   24f9c:	f8dd c008 	ldr.w	ip, [sp, #8]
   24fa0:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   24fa4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   24fa8:	81aa      	strh	r2, [r5, #12]
   24faa:	4626      	mov	r6, r4
   24fac:	46a0      	mov	r8, r4
   24fae:	eb0c 0003 	add.w	r0, ip, r3
   24fb2:	f8c5 c010 	str.w	ip, [r5, #16]
   24fb6:	ebc3 030b 	rsb	r3, r3, fp
   24fba:	6028      	str	r0, [r5, #0]
   24fbc:	f8c5 b014 	str.w	fp, [r5, #20]
   24fc0:	60ab      	str	r3, [r5, #8]
   24fc2:	4642      	mov	r2, r8
   24fc4:	4651      	mov	r1, sl
   24fc6:	f7fb fbab 	bl	20720 <memmove>
   24fca:	f8d9 2008 	ldr.w	r2, [r9, #8]
   24fce:	68ab      	ldr	r3, [r5, #8]
   24fd0:	6828      	ldr	r0, [r5, #0]
   24fd2:	1b14      	subs	r4, r2, r4
   24fd4:	1b9b      	subs	r3, r3, r6
   24fd6:	60ab      	str	r3, [r5, #8]
   24fd8:	4440      	add	r0, r8
   24fda:	6028      	str	r0, [r5, #0]
   24fdc:	f8c9 4008 	str.w	r4, [r9, #8]
   24fe0:	b1f4      	cbz	r4, 25020 <__ssprint_r+0x104>
   24fe2:	f8d7 a000 	ldr.w	sl, [r7]
   24fe6:	687c      	ldr	r4, [r7, #4]
   24fe8:	3708      	adds	r7, #8
   24fea:	e7a6      	b.n	24f3a <__ssprint_r+0x1e>
   24fec:	9301      	str	r3, [sp, #4]
   24fee:	f7fb fce5 	bl	209bc <_realloc_r>
   24ff2:	9b01      	ldr	r3, [sp, #4]
   24ff4:	4684      	mov	ip, r0
   24ff6:	2800      	cmp	r0, #0
   24ff8:	d1d7      	bne.n	24faa <__ssprint_r+0x8e>
   24ffa:	9803      	ldr	r0, [sp, #12]
   24ffc:	6929      	ldr	r1, [r5, #16]
   24ffe:	f7ff f8e1 	bl	241c4 <_free_r>
   25002:	9a03      	ldr	r2, [sp, #12]
   25004:	230c      	movs	r3, #12
   25006:	f04f 30ff 	mov.w	r0, #4294967295
   2500a:	6013      	str	r3, [r2, #0]
   2500c:	2300      	movs	r3, #0
   2500e:	89aa      	ldrh	r2, [r5, #12]
   25010:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   25014:	81aa      	strh	r2, [r5, #12]
   25016:	f8c9 3008 	str.w	r3, [r9, #8]
   2501a:	f8c9 3004 	str.w	r3, [r9, #4]
   2501e:	e002      	b.n	25026 <__ssprint_r+0x10a>
   25020:	4620      	mov	r0, r4
   25022:	f8c9 4004 	str.w	r4, [r9, #4]
   25026:	b005      	add	sp, #20
   25028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2502c:	6054      	str	r4, [r2, #4]
   2502e:	4620      	mov	r0, r4
   25030:	e7f9      	b.n	25026 <__ssprint_r+0x10a>
   25032:	bf00      	nop

00025034 <_svfiprintf_r>:
   25034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25038:	b0ad      	sub	sp, #180	; 0xb4
   2503a:	4689      	mov	r9, r1
   2503c:	9307      	str	r3, [sp, #28]
   2503e:	898b      	ldrh	r3, [r1, #12]
   25040:	9002      	str	r0, [sp, #8]
   25042:	061b      	lsls	r3, r3, #24
   25044:	d503      	bpl.n	2504e <_svfiprintf_r+0x1a>
   25046:	690b      	ldr	r3, [r1, #16]
   25048:	2b00      	cmp	r3, #0
   2504a:	f000 84db 	beq.w	25a04 <_svfiprintf_r+0x9d0>
   2504e:	4615      	mov	r5, r2
   25050:	f10d 069f 	add.w	r6, sp, #159	; 0x9f
   25054:	f10d 0aa0 	add.w	sl, sp, #160	; 0xa0
   25058:	2300      	movs	r3, #0
   2505a:	9601      	str	r6, [sp, #4]
   2505c:	ac0e      	add	r4, sp, #56	; 0x38
   2505e:	ebc6 060a 	rsb	r6, r6, sl
   25062:	9308      	str	r3, [sp, #32]
   25064:	9305      	str	r3, [sp, #20]
   25066:	960d      	str	r6, [sp, #52]	; 0x34
   25068:	9428      	str	r4, [sp, #160]	; 0xa0
   2506a:	932a      	str	r3, [sp, #168]	; 0xa8
   2506c:	9329      	str	r3, [sp, #164]	; 0xa4
   2506e:	782b      	ldrb	r3, [r5, #0]
   25070:	f1b3 0225 	subs.w	r2, r3, #37	; 0x25
   25074:	bf18      	it	ne
   25076:	2201      	movne	r2, #1
   25078:	2b00      	cmp	r3, #0
   2507a:	bf0c      	ite	eq
   2507c:	2300      	moveq	r3, #0
   2507e:	f002 0301 	andne.w	r3, r2, #1
   25082:	2b00      	cmp	r3, #0
   25084:	f000 836d 	beq.w	25762 <_svfiprintf_r+0x72e>
   25088:	462a      	mov	r2, r5
   2508a:	462e      	mov	r6, r5
   2508c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   25090:	3601      	adds	r6, #1
   25092:	1c19      	adds	r1, r3, #0
   25094:	bf18      	it	ne
   25096:	2101      	movne	r1, #1
   25098:	2b25      	cmp	r3, #37	; 0x25
   2509a:	bf0c      	ite	eq
   2509c:	2300      	moveq	r3, #0
   2509e:	f001 0301 	andne.w	r3, r1, #1
   250a2:	2b00      	cmp	r3, #0
   250a4:	d1f2      	bne.n	2508c <_svfiprintf_r+0x58>
   250a6:	1b77      	subs	r7, r6, r5
   250a8:	d00e      	beq.n	250c8 <_svfiprintf_r+0x94>
   250aa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   250ac:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   250ae:	3301      	adds	r3, #1
   250b0:	e884 00a0 	stmia.w	r4, {r5, r7}
   250b4:	2b07      	cmp	r3, #7
   250b6:	443a      	add	r2, r7
   250b8:	9329      	str	r3, [sp, #164]	; 0xa4
   250ba:	922a      	str	r2, [sp, #168]	; 0xa8
   250bc:	f300 83ae 	bgt.w	2581c <_svfiprintf_r+0x7e8>
   250c0:	3408      	adds	r4, #8
   250c2:	9805      	ldr	r0, [sp, #20]
   250c4:	19c0      	adds	r0, r0, r7
   250c6:	9005      	str	r0, [sp, #20]
   250c8:	7833      	ldrb	r3, [r6, #0]
   250ca:	2b00      	cmp	r3, #0
   250cc:	f000 834b 	beq.w	25766 <_svfiprintf_r+0x732>
   250d0:	2200      	movs	r2, #0
   250d2:	7873      	ldrb	r3, [r6, #1]
   250d4:	1c75      	adds	r5, r6, #1
   250d6:	f04f 38ff 	mov.w	r8, #4294967295
   250da:	4693      	mov	fp, r2
   250dc:	2100      	movs	r1, #0
   250de:	9206      	str	r2, [sp, #24]
   250e0:	f88d 10af 	strb.w	r1, [sp, #175]	; 0xaf
   250e4:	3501      	adds	r5, #1
   250e6:	f1a3 0120 	sub.w	r1, r3, #32
   250ea:	2958      	cmp	r1, #88	; 0x58
   250ec:	f200 824d 	bhi.w	2558a <_svfiprintf_r+0x556>
   250f0:	e8df f011 	tbh	[pc, r1, lsl #1]
   250f4:	024b0190 	.word	0x024b0190
   250f8:	018c024b 	.word	0x018c024b
   250fc:	024b024b 	.word	0x024b024b
   25100:	024b024b 	.word	0x024b024b
   25104:	024b024b 	.word	0x024b024b
   25108:	01ab00ff 	.word	0x01ab00ff
   2510c:	010c024b 	.word	0x010c024b
   25110:	024b01ae 	.word	0x024b01ae
   25114:	019601a7 	.word	0x019601a7
   25118:	01960196 	.word	0x01960196
   2511c:	01960196 	.word	0x01960196
   25120:	01960196 	.word	0x01960196
   25124:	01960196 	.word	0x01960196
   25128:	024b024b 	.word	0x024b024b
   2512c:	024b024b 	.word	0x024b024b
   25130:	024b024b 	.word	0x024b024b
   25134:	024b024b 	.word	0x024b024b
   25138:	024b024b 	.word	0x024b024b
   2513c:	024b0059 	.word	0x024b0059
   25140:	024b024b 	.word	0x024b024b
   25144:	024b024b 	.word	0x024b024b
   25148:	024b024b 	.word	0x024b024b
   2514c:	024b024b 	.word	0x024b024b
   25150:	00f5024b 	.word	0x00f5024b
   25154:	024b024b 	.word	0x024b024b
   25158:	024b024b 	.word	0x024b024b
   2515c:	00be024b 	.word	0x00be024b
   25160:	024b024b 	.word	0x024b024b
   25164:	024b0165 	.word	0x024b0165
   25168:	024b024b 	.word	0x024b024b
   2516c:	024b024b 	.word	0x024b024b
   25170:	024b024b 	.word	0x024b024b
   25174:	024b024b 	.word	0x024b024b
   25178:	0110024b 	.word	0x0110024b
   2517c:	024b005b 	.word	0x024b005b
   25180:	024b024b 	.word	0x024b024b
   25184:	005b0219 	.word	0x005b0219
   25188:	024b024b 	.word	0x024b024b
   2518c:	024b020c 	.word	0x024b020c
   25190:	00f7021d 	.word	0x00f7021d
   25194:	01cd01d1 	.word	0x01cd01d1
   25198:	01e9024b 	.word	0x01e9024b
   2519c:	00c0024b 	.word	0x00c0024b
   251a0:	024b024b 	.word	0x024b024b
   251a4:	0232      	.short	0x0232
   251a6:	f04b 0b10 	orr.w	fp, fp, #16
   251aa:	f01b 0f20 	tst.w	fp, #32
   251ae:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
   251b2:	f000 837a 	beq.w	258aa <_svfiprintf_r+0x876>
   251b6:	9e07      	ldr	r6, [sp, #28]
   251b8:	1df3      	adds	r3, r6, #7
   251ba:	f023 0307 	bic.w	r3, r3, #7
   251be:	f103 0608 	add.w	r6, r3, #8
   251c2:	9607      	str	r6, [sp, #28]
   251c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   251c8:	4616      	mov	r6, r2
   251ca:	461f      	mov	r7, r3
   251cc:	2a00      	cmp	r2, #0
   251ce:	f173 0000 	sbcs.w	r0, r3, #0
   251d2:	f2c0 83c7 	blt.w	25964 <_svfiprintf_r+0x930>
   251d6:	ea56 0107 	orrs.w	r1, r6, r7
   251da:	f04f 0301 	mov.w	r3, #1
   251de:	bf0c      	ite	eq
   251e0:	2200      	moveq	r2, #0
   251e2:	2201      	movne	r2, #1
   251e4:	f1b8 0f00 	cmp.w	r8, #0
   251e8:	bfa8      	it	ge
   251ea:	f02b 0b80 	bicge.w	fp, fp, #128	; 0x80
   251ee:	f1b8 0f00 	cmp.w	r8, #0
   251f2:	bf18      	it	ne
   251f4:	f042 0201 	orrne.w	r2, r2, #1
   251f8:	2a00      	cmp	r2, #0
   251fa:	d05d      	beq.n	252b8 <_svfiprintf_r+0x284>
   251fc:	2b01      	cmp	r3, #1
   251fe:	f000 81d4 	beq.w	255aa <_svfiprintf_r+0x576>
   25202:	2b02      	cmp	r3, #2
   25204:	bf1c      	itt	ne
   25206:	4652      	movne	r2, sl
   25208:	46ac      	movne	ip, r5
   2520a:	d101      	bne.n	25210 <_svfiprintf_r+0x1dc>
   2520c:	e332      	b.n	25874 <_svfiprintf_r+0x840>
   2520e:	462a      	mov	r2, r5
   25210:	08f3      	lsrs	r3, r6, #3
   25212:	08f8      	lsrs	r0, r7, #3
   25214:	ea43 7347 	orr.w	r3, r3, r7, lsl #29
   25218:	f006 0107 	and.w	r1, r6, #7
   2521c:	4607      	mov	r7, r0
   2521e:	461e      	mov	r6, r3
   25220:	1e55      	subs	r5, r2, #1
   25222:	ea56 0007 	orrs.w	r0, r6, r7
   25226:	f101 0330 	add.w	r3, r1, #48	; 0x30
   2522a:	f802 3c01 	strb.w	r3, [r2, #-1]
   2522e:	d1ee      	bne.n	2520e <_svfiprintf_r+0x1da>
   25230:	f01b 0f01 	tst.w	fp, #1
   25234:	950a      	str	r5, [sp, #40]	; 0x28
   25236:	4665      	mov	r5, ip
   25238:	f000 81de 	beq.w	255f8 <_svfiprintf_r+0x5c4>
   2523c:	2b30      	cmp	r3, #48	; 0x30
   2523e:	f000 83f0 	beq.w	25a22 <_svfiprintf_r+0x9ee>
   25242:	1e93      	subs	r3, r2, #2
   25244:	930a      	str	r3, [sp, #40]	; 0x28
   25246:	ebc3 060a 	rsb	r6, r3, sl
   2524a:	2330      	movs	r3, #48	; 0x30
   2524c:	9604      	str	r6, [sp, #16]
   2524e:	f802 3c02 	strb.w	r3, [r2, #-2]
   25252:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   25256:	9e04      	ldr	r6, [sp, #16]
   25258:	9809      	ldr	r0, [sp, #36]	; 0x24
   2525a:	f89d 30af 	ldrb.w	r3, [sp, #175]	; 0xaf
   2525e:	4286      	cmp	r6, r0
   25260:	bfb8      	it	lt
   25262:	4606      	movlt	r6, r0
   25264:	9603      	str	r6, [sp, #12]
   25266:	2b00      	cmp	r3, #0
   25268:	d066      	beq.n	25338 <_svfiprintf_r+0x304>
   2526a:	3601      	adds	r6, #1
   2526c:	9603      	str	r6, [sp, #12]
   2526e:	e063      	b.n	25338 <_svfiprintf_r+0x304>
   25270:	f04b 0b10 	orr.w	fp, fp, #16
   25274:	f01b 0f20 	tst.w	fp, #32
   25278:	f000 833a 	beq.w	258f0 <_svfiprintf_r+0x8bc>
   2527c:	9e07      	ldr	r6, [sp, #28]
   2527e:	2301      	movs	r3, #1
   25280:	1df2      	adds	r2, r6, #7
   25282:	f022 0207 	bic.w	r2, r2, #7
   25286:	f102 0608 	add.w	r6, r2, #8
   2528a:	9607      	str	r6, [sp, #28]
   2528c:	e9d2 6700 	ldrd	r6, r7, [r2]
   25290:	ea56 0007 	orrs.w	r0, r6, r7
   25294:	bf0c      	ite	eq
   25296:	2200      	moveq	r2, #0
   25298:	2201      	movne	r2, #1
   2529a:	2100      	movs	r1, #0
   2529c:	f1b8 0f00 	cmp.w	r8, #0
   252a0:	bfa8      	it	ge
   252a2:	f02b 0b80 	bicge.w	fp, fp, #128	; 0x80
   252a6:	f1b8 0f00 	cmp.w	r8, #0
   252aa:	bf18      	it	ne
   252ac:	f042 0201 	orrne.w	r2, r2, #1
   252b0:	f88d 10af 	strb.w	r1, [sp, #175]	; 0xaf
   252b4:	2a00      	cmp	r2, #0
   252b6:	d1a1      	bne.n	251fc <_svfiprintf_r+0x1c8>
   252b8:	2b00      	cmp	r3, #0
   252ba:	f040 82ab 	bne.w	25814 <_svfiprintf_r+0x7e0>
   252be:	f01b 0f01 	tst.w	fp, #1
   252c2:	bf04      	itt	eq
   252c4:	9304      	streq	r3, [sp, #16]
   252c6:	f8cd a028 	streq.w	sl, [sp, #40]	; 0x28
   252ca:	d0c2      	beq.n	25252 <_svfiprintf_r+0x21e>
   252cc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   252ce:	2330      	movs	r3, #48	; 0x30
   252d0:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
   252d4:	f10d 039f 	add.w	r3, sp, #159	; 0x9f
   252d8:	930a      	str	r3, [sp, #40]	; 0x28
   252da:	9604      	str	r6, [sp, #16]
   252dc:	e7b9      	b.n	25252 <_svfiprintf_r+0x21e>
   252de:	f04b 0b10 	orr.w	fp, fp, #16
   252e2:	f01b 0320 	ands.w	r3, fp, #32
   252e6:	f000 82f1 	beq.w	258cc <_svfiprintf_r+0x898>
   252ea:	9e07      	ldr	r6, [sp, #28]
   252ec:	2300      	movs	r3, #0
   252ee:	1df2      	adds	r2, r6, #7
   252f0:	e7c7      	b.n	25282 <_svfiprintf_r+0x24e>
   252f2:	9e07      	ldr	r6, [sp, #28]
   252f4:	6836      	ldr	r6, [r6, #0]
   252f6:	9606      	str	r6, [sp, #24]
   252f8:	9e07      	ldr	r6, [sp, #28]
   252fa:	1d30      	adds	r0, r6, #4
   252fc:	9e06      	ldr	r6, [sp, #24]
   252fe:	2e00      	cmp	r6, #0
   25300:	f280 830c 	bge.w	2591c <_svfiprintf_r+0x8e8>
   25304:	9e06      	ldr	r6, [sp, #24]
   25306:	9007      	str	r0, [sp, #28]
   25308:	4276      	negs	r6, r6
   2530a:	9606      	str	r6, [sp, #24]
   2530c:	f04b 0b04 	orr.w	fp, fp, #4
   25310:	782b      	ldrb	r3, [r5, #0]
   25312:	e6e7      	b.n	250e4 <_svfiprintf_r+0xb0>
   25314:	9b07      	ldr	r3, [sp, #28]
   25316:	2601      	movs	r6, #1
   25318:	9603      	str	r6, [sp, #12]
   2531a:	2000      	movs	r0, #0
   2531c:	9e07      	ldr	r6, [sp, #28]
   2531e:	681b      	ldr	r3, [r3, #0]
   25320:	3604      	adds	r6, #4
   25322:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
   25326:	9607      	str	r6, [sp, #28]
   25328:	2601      	movs	r6, #1
   2532a:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   2532e:	9604      	str	r6, [sp, #16]
   25330:	ae1e      	add	r6, sp, #120	; 0x78
   25332:	960a      	str	r6, [sp, #40]	; 0x28
   25334:	2300      	movs	r3, #0
   25336:	9309      	str	r3, [sp, #36]	; 0x24
   25338:	f01b 0302 	ands.w	r3, fp, #2
   2533c:	930b      	str	r3, [sp, #44]	; 0x2c
   2533e:	d002      	beq.n	25346 <_svfiprintf_r+0x312>
   25340:	9e03      	ldr	r6, [sp, #12]
   25342:	3602      	adds	r6, #2
   25344:	9603      	str	r6, [sp, #12]
   25346:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
   2534a:	930c      	str	r3, [sp, #48]	; 0x30
   2534c:	f040 8159 	bne.w	25602 <_svfiprintf_r+0x5ce>
   25350:	9806      	ldr	r0, [sp, #24]
   25352:	9b03      	ldr	r3, [sp, #12]
   25354:	1ac6      	subs	r6, r0, r3
   25356:	2e00      	cmp	r6, #0
   25358:	f340 8153 	ble.w	25602 <_svfiprintf_r+0x5ce>
   2535c:	2e10      	cmp	r6, #16
   2535e:	f24d 2758 	movw	r7, #53848	; 0xd258
   25362:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   25364:	f2c0 0702 	movt	r7, #2
   25368:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   2536a:	bfc8      	it	gt
   2536c:	f04f 0810 	movgt.w	r8, #16
   25370:	dc03      	bgt.n	2537a <_svfiprintf_r+0x346>
   25372:	e019      	b.n	253a8 <_svfiprintf_r+0x374>
   25374:	3e10      	subs	r6, #16
   25376:	2e10      	cmp	r6, #16
   25378:	dd16      	ble.n	253a8 <_svfiprintf_r+0x374>
   2537a:	3301      	adds	r3, #1
   2537c:	3210      	adds	r2, #16
   2537e:	e884 0180 	stmia.w	r4, {r7, r8}
   25382:	3408      	adds	r4, #8
   25384:	2b07      	cmp	r3, #7
   25386:	9329      	str	r3, [sp, #164]	; 0xa4
   25388:	922a      	str	r2, [sp, #168]	; 0xa8
   2538a:	ddf3      	ble.n	25374 <_svfiprintf_r+0x340>
   2538c:	9802      	ldr	r0, [sp, #8]
   2538e:	4649      	mov	r1, r9
   25390:	4652      	mov	r2, sl
   25392:	ac0e      	add	r4, sp, #56	; 0x38
   25394:	f7ff fdc2 	bl	24f1c <__ssprint_r>
   25398:	2800      	cmp	r0, #0
   2539a:	f040 81eb 	bne.w	25774 <_svfiprintf_r+0x740>
   2539e:	3e10      	subs	r6, #16
   253a0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   253a2:	2e10      	cmp	r6, #16
   253a4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   253a6:	dce8      	bgt.n	2537a <_svfiprintf_r+0x346>
   253a8:	3301      	adds	r3, #1
   253aa:	1992      	adds	r2, r2, r6
   253ac:	2b07      	cmp	r3, #7
   253ae:	6027      	str	r7, [r4, #0]
   253b0:	6066      	str	r6, [r4, #4]
   253b2:	9329      	str	r3, [sp, #164]	; 0xa4
   253b4:	922a      	str	r2, [sp, #168]	; 0xa8
   253b6:	f300 82a5 	bgt.w	25904 <_svfiprintf_r+0x8d0>
   253ba:	3408      	adds	r4, #8
   253bc:	e123      	b.n	25606 <_svfiprintf_r+0x5d2>
   253be:	f01b 0f20 	tst.w	fp, #32
   253c2:	f64c 7680 	movw	r6, #53120	; 0xcf80
   253c6:	f2c0 0602 	movt	r6, #2
   253ca:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
   253ce:	9608      	str	r6, [sp, #32]
   253d0:	f000 80cd 	beq.w	2556e <_svfiprintf_r+0x53a>
   253d4:	9e07      	ldr	r6, [sp, #28]
   253d6:	1df2      	adds	r2, r6, #7
   253d8:	f022 0207 	bic.w	r2, r2, #7
   253dc:	f102 0608 	add.w	r6, r2, #8
   253e0:	9607      	str	r6, [sp, #28]
   253e2:	e9d2 6700 	ldrd	r6, r7, [r2]
   253e6:	ea56 0007 	orrs.w	r0, r6, r7
   253ea:	bf0c      	ite	eq
   253ec:	2200      	moveq	r2, #0
   253ee:	2201      	movne	r2, #1
   253f0:	ea1b 0f02 	tst.w	fp, r2
   253f4:	f000 8268 	beq.w	258c8 <_svfiprintf_r+0x894>
   253f8:	f88d 30ad 	strb.w	r3, [sp, #173]	; 0xad
   253fc:	f04b 0b02 	orr.w	fp, fp, #2
   25400:	2330      	movs	r3, #48	; 0x30
   25402:	2201      	movs	r2, #1
   25404:	f88d 30ac 	strb.w	r3, [sp, #172]	; 0xac
   25408:	2302      	movs	r3, #2
   2540a:	e746      	b.n	2529a <_svfiprintf_r+0x266>
   2540c:	f04b 0b01 	orr.w	fp, fp, #1
   25410:	782b      	ldrb	r3, [r5, #0]
   25412:	e667      	b.n	250e4 <_svfiprintf_r+0xb0>
   25414:	782b      	ldrb	r3, [r5, #0]
   25416:	2a00      	cmp	r2, #0
   25418:	f47f ae64 	bne.w	250e4 <_svfiprintf_r+0xb0>
   2541c:	2220      	movs	r2, #32
   2541e:	e661      	b.n	250e4 <_svfiprintf_r+0xb0>
   25420:	4628      	mov	r0, r5
   25422:	2100      	movs	r1, #0
   25424:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
   25428:	f810 3b01 	ldrb.w	r3, [r0], #1
   2542c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   25430:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   25434:	4605      	mov	r5, r0
   25436:	2e09      	cmp	r6, #9
   25438:	eb07 0141 	add.w	r1, r7, r1, lsl #1
   2543c:	d9f2      	bls.n	25424 <_svfiprintf_r+0x3f0>
   2543e:	9106      	str	r1, [sp, #24]
   25440:	e651      	b.n	250e6 <_svfiprintf_r+0xb2>
   25442:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   25446:	782b      	ldrb	r3, [r5, #0]
   25448:	e64c      	b.n	250e4 <_svfiprintf_r+0xb0>
   2544a:	782b      	ldrb	r3, [r5, #0]
   2544c:	222b      	movs	r2, #43	; 0x2b
   2544e:	e649      	b.n	250e4 <_svfiprintf_r+0xb0>
   25450:	4629      	mov	r1, r5
   25452:	f811 3b01 	ldrb.w	r3, [r1], #1
   25456:	2b2a      	cmp	r3, #42	; 0x2a
   25458:	f000 82fb 	beq.w	25a52 <_svfiprintf_r+0xa1e>
   2545c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   25460:	2809      	cmp	r0, #9
   25462:	bf84      	itt	hi
   25464:	460d      	movhi	r5, r1
   25466:	f04f 0800 	movhi.w	r8, #0
   2546a:	f63f ae3c 	bhi.w	250e6 <_svfiprintf_r+0xb2>
   2546e:	f04f 0800 	mov.w	r8, #0
   25472:	f811 3b01 	ldrb.w	r3, [r1], #1
   25476:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   2547a:	eb00 0848 	add.w	r8, r0, r8, lsl #1
   2547e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   25482:	2809      	cmp	r0, #9
   25484:	460d      	mov	r5, r1
   25486:	d9f4      	bls.n	25472 <_svfiprintf_r+0x43e>
   25488:	ea48 78e8 	orr.w	r8, r8, r8, asr #31
   2548c:	e62b      	b.n	250e6 <_svfiprintf_r+0xb2>
   2548e:	f04b 0b20 	orr.w	fp, fp, #32
   25492:	782b      	ldrb	r3, [r5, #0]
   25494:	e626      	b.n	250e4 <_svfiprintf_r+0xb0>
   25496:	9b07      	ldr	r3, [sp, #28]
   25498:	2700      	movs	r7, #0
   2549a:	f64c 7094 	movw	r0, #53140	; 0xcf94
   2549e:	f04b 0b02 	orr.w	fp, fp, #2
   254a2:	1d1e      	adds	r6, r3, #4
   254a4:	9607      	str	r6, [sp, #28]
   254a6:	681a      	ldr	r2, [r3, #0]
   254a8:	2330      	movs	r3, #48	; 0x30
   254aa:	f88d 30ac 	strb.w	r3, [sp, #172]	; 0xac
   254ae:	2378      	movs	r3, #120	; 0x78
   254b0:	4616      	mov	r6, r2
   254b2:	1bd2      	subs	r2, r2, r7
   254b4:	f88d 30ad 	strb.w	r3, [sp, #173]	; 0xad
   254b8:	bf18      	it	ne
   254ba:	2201      	movne	r2, #1
   254bc:	f2c0 0002 	movt	r0, #2
   254c0:	2302      	movs	r3, #2
   254c2:	9008      	str	r0, [sp, #32]
   254c4:	e6e9      	b.n	2529a <_svfiprintf_r+0x266>
   254c6:	9b07      	ldr	r3, [sp, #28]
   254c8:	2100      	movs	r1, #0
   254ca:	9e07      	ldr	r6, [sp, #28]
   254cc:	f88d 10af 	strb.w	r1, [sp, #175]	; 0xaf
   254d0:	681b      	ldr	r3, [r3, #0]
   254d2:	3604      	adds	r6, #4
   254d4:	9607      	str	r6, [sp, #28]
   254d6:	930a      	str	r3, [sp, #40]	; 0x28
   254d8:	2b00      	cmp	r3, #0
   254da:	f000 82a7 	beq.w	25a2c <_svfiprintf_r+0x9f8>
   254de:	f1b8 0f00 	cmp.w	r8, #0
   254e2:	980a      	ldr	r0, [sp, #40]	; 0x28
   254e4:	f2c0 8271 	blt.w	259ca <_svfiprintf_r+0x996>
   254e8:	2100      	movs	r1, #0
   254ea:	4642      	mov	r2, r8
   254ec:	f7fb f82e 	bl	2054c <memchr>
   254f0:	2800      	cmp	r0, #0
   254f2:	f000 82aa 	beq.w	25a4a <_svfiprintf_r+0xa16>
   254f6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   254f8:	1b80      	subs	r0, r0, r6
   254fa:	9004      	str	r0, [sp, #16]
   254fc:	4540      	cmp	r0, r8
   254fe:	f340 827e 	ble.w	259fe <_svfiprintf_r+0x9ca>
   25502:	2300      	movs	r3, #0
   25504:	f8cd 8010 	str.w	r8, [sp, #16]
   25508:	9309      	str	r3, [sp, #36]	; 0x24
   2550a:	e6a4      	b.n	25256 <_svfiprintf_r+0x222>
   2550c:	782b      	ldrb	r3, [r5, #0]
   2550e:	4629      	mov	r1, r5
   25510:	2b6c      	cmp	r3, #108	; 0x6c
   25512:	bf18      	it	ne
   25514:	f04b 0b10 	orrne.w	fp, fp, #16
   25518:	f47f ade4 	bne.w	250e4 <_svfiprintf_r+0xb0>
   2551c:	3501      	adds	r5, #1
   2551e:	f04b 0b20 	orr.w	fp, fp, #32
   25522:	784b      	ldrb	r3, [r1, #1]
   25524:	e5de      	b.n	250e4 <_svfiprintf_r+0xb0>
   25526:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   2552a:	782b      	ldrb	r3, [r5, #0]
   2552c:	e5da      	b.n	250e4 <_svfiprintf_r+0xb0>
   2552e:	f01b 0f20 	tst.w	fp, #32
   25532:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
   25536:	f040 823e 	bne.w	259b6 <_svfiprintf_r+0x982>
   2553a:	f01b 0f10 	tst.w	fp, #16
   2553e:	f040 824a 	bne.w	259d6 <_svfiprintf_r+0x9a2>
   25542:	f01b 0f40 	tst.w	fp, #64	; 0x40
   25546:	f000 8246 	beq.w	259d6 <_svfiprintf_r+0x9a2>
   2554a:	9e07      	ldr	r6, [sp, #28]
   2554c:	6833      	ldr	r3, [r6, #0]
   2554e:	3604      	adds	r6, #4
   25550:	9607      	str	r6, [sp, #28]
   25552:	9e05      	ldr	r6, [sp, #20]
   25554:	801e      	strh	r6, [r3, #0]
   25556:	e58a      	b.n	2506e <_svfiprintf_r+0x3a>
   25558:	f01b 0f20 	tst.w	fp, #32
   2555c:	f64c 7694 	movw	r6, #53140	; 0xcf94
   25560:	f2c0 0602 	movt	r6, #2
   25564:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
   25568:	9608      	str	r6, [sp, #32]
   2556a:	f47f af33 	bne.w	253d4 <_svfiprintf_r+0x3a0>
   2556e:	f01b 0f10 	tst.w	fp, #16
   25572:	f040 8204 	bne.w	2597e <_svfiprintf_r+0x94a>
   25576:	f01b 0f40 	tst.w	fp, #64	; 0x40
   2557a:	f000 8200 	beq.w	2597e <_svfiprintf_r+0x94a>
   2557e:	9807      	ldr	r0, [sp, #28]
   25580:	2700      	movs	r7, #0
   25582:	8806      	ldrh	r6, [r0, #0]
   25584:	3004      	adds	r0, #4
   25586:	9007      	str	r0, [sp, #28]
   25588:	e72d      	b.n	253e6 <_svfiprintf_r+0x3b2>
   2558a:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
   2558e:	2b00      	cmp	r3, #0
   25590:	f000 80e9 	beq.w	25766 <_svfiprintf_r+0x732>
   25594:	2601      	movs	r6, #1
   25596:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   2559a:	2000      	movs	r0, #0
   2559c:	ab1e      	add	r3, sp, #120	; 0x78
   2559e:	9603      	str	r6, [sp, #12]
   255a0:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
   255a4:	9604      	str	r6, [sp, #16]
   255a6:	930a      	str	r3, [sp, #40]	; 0x28
   255a8:	e6c4      	b.n	25334 <_svfiprintf_r+0x300>
   255aa:	2e0a      	cmp	r6, #10
   255ac:	f177 0000 	sbcs.w	r0, r7, #0
   255b0:	f0c0 81c2 	bcc.w	25938 <_svfiprintf_r+0x904>
   255b4:	f10d 039f 	add.w	r3, sp, #159	; 0x9f
   255b8:	9503      	str	r5, [sp, #12]
   255ba:	f8cd b010 	str.w	fp, [sp, #16]
   255be:	461d      	mov	r5, r3
   255c0:	46a3      	mov	fp, r4
   255c2:	4630      	mov	r0, r6
   255c4:	4639      	mov	r1, r7
   255c6:	220a      	movs	r2, #10
   255c8:	2300      	movs	r3, #0
   255ca:	f7ee fc89 	bl	13ee0 <__aeabi_uldivmod>
   255ce:	462c      	mov	r4, r5
   255d0:	4630      	mov	r0, r6
   255d2:	4639      	mov	r1, r7
   255d4:	2300      	movs	r3, #0
   255d6:	3d01      	subs	r5, #1
   255d8:	f102 0630 	add.w	r6, r2, #48	; 0x30
   255dc:	220a      	movs	r2, #10
   255de:	7026      	strb	r6, [r4, #0]
   255e0:	f7ee fc7e 	bl	13ee0 <__aeabi_uldivmod>
   255e4:	4606      	mov	r6, r0
   255e6:	460f      	mov	r7, r1
   255e8:	ea56 0007 	orrs.w	r0, r6, r7
   255ec:	d1e9      	bne.n	255c2 <_svfiprintf_r+0x58e>
   255ee:	940a      	str	r4, [sp, #40]	; 0x28
   255f0:	465c      	mov	r4, fp
   255f2:	9d03      	ldr	r5, [sp, #12]
   255f4:	f8dd b010 	ldr.w	fp, [sp, #16]
   255f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   255fa:	ebc3 030a 	rsb	r3, r3, sl
   255fe:	9304      	str	r3, [sp, #16]
   25600:	e627      	b.n	25252 <_svfiprintf_r+0x21e>
   25602:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   25604:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   25606:	f89d 10af 	ldrb.w	r1, [sp, #175]	; 0xaf
   2560a:	b161      	cbz	r1, 25626 <_svfiprintf_r+0x5f2>
   2560c:	3301      	adds	r3, #1
   2560e:	f10d 01af 	add.w	r1, sp, #175	; 0xaf
   25612:	6021      	str	r1, [r4, #0]
   25614:	2101      	movs	r1, #1
   25616:	2b07      	cmp	r3, #7
   25618:	440a      	add	r2, r1
   2561a:	6061      	str	r1, [r4, #4]
   2561c:	9329      	str	r3, [sp, #164]	; 0xa4
   2561e:	922a      	str	r2, [sp, #168]	; 0xa8
   25620:	f300 8110 	bgt.w	25844 <_svfiprintf_r+0x810>
   25624:	3408      	adds	r4, #8
   25626:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   25628:	b15e      	cbz	r6, 25642 <_svfiprintf_r+0x60e>
   2562a:	3301      	adds	r3, #1
   2562c:	a92b      	add	r1, sp, #172	; 0xac
   2562e:	6021      	str	r1, [r4, #0]
   25630:	2102      	movs	r1, #2
   25632:	2b07      	cmp	r3, #7
   25634:	440a      	add	r2, r1
   25636:	6061      	str	r1, [r4, #4]
   25638:	9329      	str	r3, [sp, #164]	; 0xa4
   2563a:	922a      	str	r2, [sp, #168]	; 0xa8
   2563c:	f300 810d 	bgt.w	2585a <_svfiprintf_r+0x826>
   25640:	3408      	adds	r4, #8
   25642:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   25644:	2e80      	cmp	r6, #128	; 0x80
   25646:	f000 80a2 	beq.w	2578e <_svfiprintf_r+0x75a>
   2564a:	9909      	ldr	r1, [sp, #36]	; 0x24
   2564c:	9804      	ldr	r0, [sp, #16]
   2564e:	1a0e      	subs	r6, r1, r0
   25650:	2e00      	cmp	r6, #0
   25652:	dd29      	ble.n	256a8 <_svfiprintf_r+0x674>
   25654:	2e10      	cmp	r6, #16
   25656:	4f86      	ldr	r7, [pc, #536]	; (25870 <_svfiprintf_r+0x83c>)
   25658:	bfc8      	it	gt
   2565a:	f04f 0810 	movgt.w	r8, #16
   2565e:	dc03      	bgt.n	25668 <_svfiprintf_r+0x634>
   25660:	e018      	b.n	25694 <_svfiprintf_r+0x660>
   25662:	3e10      	subs	r6, #16
   25664:	2e10      	cmp	r6, #16
   25666:	dd15      	ble.n	25694 <_svfiprintf_r+0x660>
   25668:	3301      	adds	r3, #1
   2566a:	3210      	adds	r2, #16
   2566c:	e884 0180 	stmia.w	r4, {r7, r8}
   25670:	3408      	adds	r4, #8
   25672:	2b07      	cmp	r3, #7
   25674:	9329      	str	r3, [sp, #164]	; 0xa4
   25676:	922a      	str	r2, [sp, #168]	; 0xa8
   25678:	ddf3      	ble.n	25662 <_svfiprintf_r+0x62e>
   2567a:	9802      	ldr	r0, [sp, #8]
   2567c:	4649      	mov	r1, r9
   2567e:	4652      	mov	r2, sl
   25680:	ac0e      	add	r4, sp, #56	; 0x38
   25682:	f7ff fc4b 	bl	24f1c <__ssprint_r>
   25686:	2800      	cmp	r0, #0
   25688:	d174      	bne.n	25774 <_svfiprintf_r+0x740>
   2568a:	3e10      	subs	r6, #16
   2568c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   2568e:	2e10      	cmp	r6, #16
   25690:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   25692:	dce9      	bgt.n	25668 <_svfiprintf_r+0x634>
   25694:	3301      	adds	r3, #1
   25696:	1992      	adds	r2, r2, r6
   25698:	2b07      	cmp	r3, #7
   2569a:	6027      	str	r7, [r4, #0]
   2569c:	6066      	str	r6, [r4, #4]
   2569e:	9329      	str	r3, [sp, #164]	; 0xa4
   256a0:	922a      	str	r2, [sp, #168]	; 0xa8
   256a2:	f300 80c4 	bgt.w	2582e <_svfiprintf_r+0x7fa>
   256a6:	3408      	adds	r4, #8
   256a8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   256aa:	3301      	adds	r3, #1
   256ac:	2b07      	cmp	r3, #7
   256ae:	9329      	str	r3, [sp, #164]	; 0xa4
   256b0:	bfd8      	it	le
   256b2:	f104 0108 	addle.w	r1, r4, #8
   256b6:	6026      	str	r6, [r4, #0]
   256b8:	9e04      	ldr	r6, [sp, #16]
   256ba:	4432      	add	r2, r6
   256bc:	922a      	str	r2, [sp, #168]	; 0xa8
   256be:	6066      	str	r6, [r4, #4]
   256c0:	f300 8096 	bgt.w	257f0 <_svfiprintf_r+0x7bc>
   256c4:	f01b 0f04 	tst.w	fp, #4
   256c8:	d031      	beq.n	2572e <_svfiprintf_r+0x6fa>
   256ca:	9806      	ldr	r0, [sp, #24]
   256cc:	9b03      	ldr	r3, [sp, #12]
   256ce:	1ac6      	subs	r6, r0, r3
   256d0:	2e00      	cmp	r6, #0
   256d2:	dd2c      	ble.n	2572e <_svfiprintf_r+0x6fa>
   256d4:	2e10      	cmp	r6, #16
   256d6:	f24d 2758 	movw	r7, #53848	; 0xd258
   256da:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   256dc:	f2c0 0702 	movt	r7, #2
   256e0:	dd1c      	ble.n	2571c <_svfiprintf_r+0x6e8>
   256e2:	2410      	movs	r4, #16
   256e4:	f8dd 8008 	ldr.w	r8, [sp, #8]
   256e8:	e002      	b.n	256f0 <_svfiprintf_r+0x6bc>
   256ea:	3e10      	subs	r6, #16
   256ec:	2e10      	cmp	r6, #16
   256ee:	dd15      	ble.n	2571c <_svfiprintf_r+0x6e8>
   256f0:	3301      	adds	r3, #1
   256f2:	3210      	adds	r2, #16
   256f4:	600f      	str	r7, [r1, #0]
   256f6:	604c      	str	r4, [r1, #4]
   256f8:	3108      	adds	r1, #8
   256fa:	2b07      	cmp	r3, #7
   256fc:	9329      	str	r3, [sp, #164]	; 0xa4
   256fe:	922a      	str	r2, [sp, #168]	; 0xa8
   25700:	ddf3      	ble.n	256ea <_svfiprintf_r+0x6b6>
   25702:	4649      	mov	r1, r9
   25704:	4640      	mov	r0, r8
   25706:	4652      	mov	r2, sl
   25708:	f7ff fc08 	bl	24f1c <__ssprint_r>
   2570c:	a90e      	add	r1, sp, #56	; 0x38
   2570e:	2800      	cmp	r0, #0
   25710:	d130      	bne.n	25774 <_svfiprintf_r+0x740>
   25712:	3e10      	subs	r6, #16
   25714:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   25716:	2e10      	cmp	r6, #16
   25718:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   2571a:	dce9      	bgt.n	256f0 <_svfiprintf_r+0x6bc>
   2571c:	3301      	adds	r3, #1
   2571e:	18b2      	adds	r2, r6, r2
   25720:	2b07      	cmp	r3, #7
   25722:	600f      	str	r7, [r1, #0]
   25724:	604e      	str	r6, [r1, #4]
   25726:	9329      	str	r3, [sp, #164]	; 0xa4
   25728:	922a      	str	r2, [sp, #168]	; 0xa8
   2572a:	f300 80fb 	bgt.w	25924 <_svfiprintf_r+0x8f0>
   2572e:	9e05      	ldr	r6, [sp, #20]
   25730:	9b03      	ldr	r3, [sp, #12]
   25732:	9806      	ldr	r0, [sp, #24]
   25734:	4283      	cmp	r3, r0
   25736:	bfac      	ite	ge
   25738:	18f6      	addge	r6, r6, r3
   2573a:	1836      	addlt	r6, r6, r0
   2573c:	9605      	str	r6, [sp, #20]
   2573e:	2a00      	cmp	r2, #0
   25740:	d160      	bne.n	25804 <_svfiprintf_r+0x7d0>
   25742:	782b      	ldrb	r3, [r5, #0]
   25744:	2600      	movs	r6, #0
   25746:	ac0e      	add	r4, sp, #56	; 0x38
   25748:	9629      	str	r6, [sp, #164]	; 0xa4
   2574a:	f1b3 0225 	subs.w	r2, r3, #37	; 0x25
   2574e:	bf18      	it	ne
   25750:	2201      	movne	r2, #1
   25752:	2b00      	cmp	r3, #0
   25754:	bf0c      	ite	eq
   25756:	2300      	moveq	r3, #0
   25758:	f002 0301 	andne.w	r3, r2, #1
   2575c:	2b00      	cmp	r3, #0
   2575e:	f47f ac93 	bne.w	25088 <_svfiprintf_r+0x54>
   25762:	462e      	mov	r6, r5
   25764:	e4b0      	b.n	250c8 <_svfiprintf_r+0x94>
   25766:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   25768:	b123      	cbz	r3, 25774 <_svfiprintf_r+0x740>
   2576a:	9802      	ldr	r0, [sp, #8]
   2576c:	4649      	mov	r1, r9
   2576e:	aa28      	add	r2, sp, #160	; 0xa0
   25770:	f7ff fbd4 	bl	24f1c <__ssprint_r>
   25774:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   25778:	9e05      	ldr	r6, [sp, #20]
   2577a:	f013 0f40 	tst.w	r3, #64	; 0x40
   2577e:	bf18      	it	ne
   25780:	f04f 36ff 	movne.w	r6, #4294967295
   25784:	9605      	str	r6, [sp, #20]
   25786:	9805      	ldr	r0, [sp, #20]
   25788:	b02d      	add	sp, #180	; 0xb4
   2578a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2578e:	9806      	ldr	r0, [sp, #24]
   25790:	9903      	ldr	r1, [sp, #12]
   25792:	1a46      	subs	r6, r0, r1
   25794:	2e00      	cmp	r6, #0
   25796:	f77f af58 	ble.w	2564a <_svfiprintf_r+0x616>
   2579a:	2e10      	cmp	r6, #16
   2579c:	4f34      	ldr	r7, [pc, #208]	; (25870 <_svfiprintf_r+0x83c>)
   2579e:	bfc8      	it	gt
   257a0:	f04f 0810 	movgt.w	r8, #16
   257a4:	dc03      	bgt.n	257ae <_svfiprintf_r+0x77a>
   257a6:	e018      	b.n	257da <_svfiprintf_r+0x7a6>
   257a8:	3e10      	subs	r6, #16
   257aa:	2e10      	cmp	r6, #16
   257ac:	dd15      	ble.n	257da <_svfiprintf_r+0x7a6>
   257ae:	3301      	adds	r3, #1
   257b0:	3210      	adds	r2, #16
   257b2:	e884 0180 	stmia.w	r4, {r7, r8}
   257b6:	3408      	adds	r4, #8
   257b8:	2b07      	cmp	r3, #7
   257ba:	9329      	str	r3, [sp, #164]	; 0xa4
   257bc:	922a      	str	r2, [sp, #168]	; 0xa8
   257be:	ddf3      	ble.n	257a8 <_svfiprintf_r+0x774>
   257c0:	9802      	ldr	r0, [sp, #8]
   257c2:	4649      	mov	r1, r9
   257c4:	4652      	mov	r2, sl
   257c6:	ac0e      	add	r4, sp, #56	; 0x38
   257c8:	f7ff fba8 	bl	24f1c <__ssprint_r>
   257cc:	2800      	cmp	r0, #0
   257ce:	d1d1      	bne.n	25774 <_svfiprintf_r+0x740>
   257d0:	3e10      	subs	r6, #16
   257d2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   257d4:	2e10      	cmp	r6, #16
   257d6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   257d8:	dce9      	bgt.n	257ae <_svfiprintf_r+0x77a>
   257da:	3301      	adds	r3, #1
   257dc:	1992      	adds	r2, r2, r6
   257de:	2b07      	cmp	r3, #7
   257e0:	6027      	str	r7, [r4, #0]
   257e2:	6066      	str	r6, [r4, #4]
   257e4:	9329      	str	r3, [sp, #164]	; 0xa4
   257e6:	922a      	str	r2, [sp, #168]	; 0xa8
   257e8:	f300 80fd 	bgt.w	259e6 <_svfiprintf_r+0x9b2>
   257ec:	3408      	adds	r4, #8
   257ee:	e72c      	b.n	2564a <_svfiprintf_r+0x616>
   257f0:	9802      	ldr	r0, [sp, #8]
   257f2:	4649      	mov	r1, r9
   257f4:	4652      	mov	r2, sl
   257f6:	f7ff fb91 	bl	24f1c <__ssprint_r>
   257fa:	2800      	cmp	r0, #0
   257fc:	d1ba      	bne.n	25774 <_svfiprintf_r+0x740>
   257fe:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   25800:	a90e      	add	r1, sp, #56	; 0x38
   25802:	e75f      	b.n	256c4 <_svfiprintf_r+0x690>
   25804:	9802      	ldr	r0, [sp, #8]
   25806:	4649      	mov	r1, r9
   25808:	4652      	mov	r2, sl
   2580a:	f7ff fb87 	bl	24f1c <__ssprint_r>
   2580e:	2800      	cmp	r0, #0
   25810:	d097      	beq.n	25742 <_svfiprintf_r+0x70e>
   25812:	e7af      	b.n	25774 <_svfiprintf_r+0x740>
   25814:	9204      	str	r2, [sp, #16]
   25816:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   2581a:	e51a      	b.n	25252 <_svfiprintf_r+0x21e>
   2581c:	9802      	ldr	r0, [sp, #8]
   2581e:	4649      	mov	r1, r9
   25820:	4652      	mov	r2, sl
   25822:	f7ff fb7b 	bl	24f1c <__ssprint_r>
   25826:	2800      	cmp	r0, #0
   25828:	d1a4      	bne.n	25774 <_svfiprintf_r+0x740>
   2582a:	ac0e      	add	r4, sp, #56	; 0x38
   2582c:	e449      	b.n	250c2 <_svfiprintf_r+0x8e>
   2582e:	9802      	ldr	r0, [sp, #8]
   25830:	4649      	mov	r1, r9
   25832:	4652      	mov	r2, sl
   25834:	f7ff fb72 	bl	24f1c <__ssprint_r>
   25838:	2800      	cmp	r0, #0
   2583a:	d19b      	bne.n	25774 <_svfiprintf_r+0x740>
   2583c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   2583e:	ac0e      	add	r4, sp, #56	; 0x38
   25840:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   25842:	e731      	b.n	256a8 <_svfiprintf_r+0x674>
   25844:	9802      	ldr	r0, [sp, #8]
   25846:	4649      	mov	r1, r9
   25848:	4652      	mov	r2, sl
   2584a:	f7ff fb67 	bl	24f1c <__ssprint_r>
   2584e:	2800      	cmp	r0, #0
   25850:	d190      	bne.n	25774 <_svfiprintf_r+0x740>
   25852:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   25854:	ac0e      	add	r4, sp, #56	; 0x38
   25856:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   25858:	e6e5      	b.n	25626 <_svfiprintf_r+0x5f2>
   2585a:	9802      	ldr	r0, [sp, #8]
   2585c:	4649      	mov	r1, r9
   2585e:	4652      	mov	r2, sl
   25860:	f7ff fb5c 	bl	24f1c <__ssprint_r>
   25864:	2800      	cmp	r0, #0
   25866:	d185      	bne.n	25774 <_svfiprintf_r+0x740>
   25868:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   2586a:	ac0e      	add	r4, sp, #56	; 0x38
   2586c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   2586e:	e6e8      	b.n	25642 <_svfiprintf_r+0x60e>
   25870:	0002d268 	.word	0x0002d268
   25874:	46ac      	mov	ip, r5
   25876:	f10d 019f 	add.w	r1, sp, #159	; 0x9f
   2587a:	4625      	mov	r5, r4
   2587c:	f006 020f 	and.w	r2, r6, #15
   25880:	0933      	lsrs	r3, r6, #4
   25882:	9e08      	ldr	r6, [sp, #32]
   25884:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   25888:	093c      	lsrs	r4, r7, #4
   2588a:	4627      	mov	r7, r4
   2588c:	5cb0      	ldrb	r0, [r6, r2]
   2588e:	460a      	mov	r2, r1
   25890:	461e      	mov	r6, r3
   25892:	3901      	subs	r1, #1
   25894:	7010      	strb	r0, [r2, #0]
   25896:	ea56 0007 	orrs.w	r0, r6, r7
   2589a:	d1ef      	bne.n	2587c <_svfiprintf_r+0x848>
   2589c:	462c      	mov	r4, r5
   2589e:	ebc2 030a 	rsb	r3, r2, sl
   258a2:	920a      	str	r2, [sp, #40]	; 0x28
   258a4:	4665      	mov	r5, ip
   258a6:	9304      	str	r3, [sp, #16]
   258a8:	e4d3      	b.n	25252 <_svfiprintf_r+0x21e>
   258aa:	f01b 0f10 	tst.w	fp, #16
   258ae:	d14c      	bne.n	2594a <_svfiprintf_r+0x916>
   258b0:	f01b 0f40 	tst.w	fp, #64	; 0x40
   258b4:	d049      	beq.n	2594a <_svfiprintf_r+0x916>
   258b6:	9807      	ldr	r0, [sp, #28]
   258b8:	f9b0 6000 	ldrsh.w	r6, [r0]
   258bc:	3004      	adds	r0, #4
   258be:	9007      	str	r0, [sp, #28]
   258c0:	4632      	mov	r2, r6
   258c2:	17f7      	asrs	r7, r6, #31
   258c4:	463b      	mov	r3, r7
   258c6:	e481      	b.n	251cc <_svfiprintf_r+0x198>
   258c8:	2302      	movs	r3, #2
   258ca:	e4e6      	b.n	2529a <_svfiprintf_r+0x266>
   258cc:	f01b 0210 	ands.w	r2, fp, #16
   258d0:	d167      	bne.n	259a2 <_svfiprintf_r+0x96e>
   258d2:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   258d6:	d064      	beq.n	259a2 <_svfiprintf_r+0x96e>
   258d8:	9807      	ldr	r0, [sp, #28]
   258da:	4613      	mov	r3, r2
   258dc:	8806      	ldrh	r6, [r0, #0]
   258de:	2700      	movs	r7, #0
   258e0:	3004      	adds	r0, #4
   258e2:	ea56 0107 	orrs.w	r1, r6, r7
   258e6:	9007      	str	r0, [sp, #28]
   258e8:	bf0c      	ite	eq
   258ea:	2200      	moveq	r2, #0
   258ec:	2201      	movne	r2, #1
   258ee:	e4d4      	b.n	2529a <_svfiprintf_r+0x266>
   258f0:	f01b 0f10 	tst.w	fp, #16
   258f4:	d14a      	bne.n	2598c <_svfiprintf_r+0x958>
   258f6:	f01b 0f40 	tst.w	fp, #64	; 0x40
   258fa:	d047      	beq.n	2598c <_svfiprintf_r+0x958>
   258fc:	9807      	ldr	r0, [sp, #28]
   258fe:	2301      	movs	r3, #1
   25900:	8806      	ldrh	r6, [r0, #0]
   25902:	e7ec      	b.n	258de <_svfiprintf_r+0x8aa>
   25904:	9802      	ldr	r0, [sp, #8]
   25906:	4649      	mov	r1, r9
   25908:	4652      	mov	r2, sl
   2590a:	f7ff fb07 	bl	24f1c <__ssprint_r>
   2590e:	2800      	cmp	r0, #0
   25910:	f47f af30 	bne.w	25774 <_svfiprintf_r+0x740>
   25914:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   25916:	ac0e      	add	r4, sp, #56	; 0x38
   25918:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   2591a:	e674      	b.n	25606 <_svfiprintf_r+0x5d2>
   2591c:	782b      	ldrb	r3, [r5, #0]
   2591e:	9007      	str	r0, [sp, #28]
   25920:	f7ff bbe0 	b.w	250e4 <_svfiprintf_r+0xb0>
   25924:	9802      	ldr	r0, [sp, #8]
   25926:	4649      	mov	r1, r9
   25928:	4652      	mov	r2, sl
   2592a:	f7ff faf7 	bl	24f1c <__ssprint_r>
   2592e:	2800      	cmp	r0, #0
   25930:	f47f af20 	bne.w	25774 <_svfiprintf_r+0x740>
   25934:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   25936:	e6fa      	b.n	2572e <_svfiprintf_r+0x6fa>
   25938:	990d      	ldr	r1, [sp, #52]	; 0x34
   2593a:	3630      	adds	r6, #48	; 0x30
   2593c:	f10d 039f 	add.w	r3, sp, #159	; 0x9f
   25940:	f88d 609f 	strb.w	r6, [sp, #159]	; 0x9f
   25944:	930a      	str	r3, [sp, #40]	; 0x28
   25946:	9104      	str	r1, [sp, #16]
   25948:	e483      	b.n	25252 <_svfiprintf_r+0x21e>
   2594a:	9e07      	ldr	r6, [sp, #28]
   2594c:	6833      	ldr	r3, [r6, #0]
   2594e:	3604      	adds	r6, #4
   25950:	9607      	str	r6, [sp, #28]
   25952:	461a      	mov	r2, r3
   25954:	461e      	mov	r6, r3
   25956:	17df      	asrs	r7, r3, #31
   25958:	463b      	mov	r3, r7
   2595a:	2a00      	cmp	r2, #0
   2595c:	f173 0000 	sbcs.w	r0, r3, #0
   25960:	f6bf ac39 	bge.w	251d6 <_svfiprintf_r+0x1a2>
   25964:	4276      	negs	r6, r6
   25966:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   2596a:	232d      	movs	r3, #45	; 0x2d
   2596c:	ea56 0207 	orrs.w	r2, r6, r7
   25970:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
   25974:	bf0c      	ite	eq
   25976:	2200      	moveq	r2, #0
   25978:	2201      	movne	r2, #1
   2597a:	2301      	movs	r3, #1
   2597c:	e432      	b.n	251e4 <_svfiprintf_r+0x1b0>
   2597e:	9e07      	ldr	r6, [sp, #28]
   25980:	2700      	movs	r7, #0
   25982:	6832      	ldr	r2, [r6, #0]
   25984:	3604      	adds	r6, #4
   25986:	9607      	str	r6, [sp, #28]
   25988:	4616      	mov	r6, r2
   2598a:	e52c      	b.n	253e6 <_svfiprintf_r+0x3b2>
   2598c:	9e07      	ldr	r6, [sp, #28]
   2598e:	2301      	movs	r3, #1
   25990:	6832      	ldr	r2, [r6, #0]
   25992:	3604      	adds	r6, #4
   25994:	9607      	str	r6, [sp, #28]
   25996:	4616      	mov	r6, r2
   25998:	3200      	adds	r2, #0
   2599a:	bf18      	it	ne
   2599c:	2201      	movne	r2, #1
   2599e:	2700      	movs	r7, #0
   259a0:	e47b      	b.n	2529a <_svfiprintf_r+0x266>
   259a2:	9e07      	ldr	r6, [sp, #28]
   259a4:	6832      	ldr	r2, [r6, #0]
   259a6:	3604      	adds	r6, #4
   259a8:	9607      	str	r6, [sp, #28]
   259aa:	4616      	mov	r6, r2
   259ac:	3200      	adds	r2, #0
   259ae:	bf18      	it	ne
   259b0:	2201      	movne	r2, #1
   259b2:	2700      	movs	r7, #0
   259b4:	e471      	b.n	2529a <_svfiprintf_r+0x266>
   259b6:	9e07      	ldr	r6, [sp, #28]
   259b8:	9a05      	ldr	r2, [sp, #20]
   259ba:	6833      	ldr	r3, [r6, #0]
   259bc:	3604      	adds	r6, #4
   259be:	17d1      	asrs	r1, r2, #31
   259c0:	9607      	str	r6, [sp, #28]
   259c2:	601a      	str	r2, [r3, #0]
   259c4:	6059      	str	r1, [r3, #4]
   259c6:	f7ff bb52 	b.w	2506e <_svfiprintf_r+0x3a>
   259ca:	2300      	movs	r3, #0
   259cc:	9309      	str	r3, [sp, #36]	; 0x24
   259ce:	f7fb fce5 	bl	2139c <strlen>
   259d2:	9004      	str	r0, [sp, #16]
   259d4:	e43f      	b.n	25256 <_svfiprintf_r+0x222>
   259d6:	9e07      	ldr	r6, [sp, #28]
   259d8:	6833      	ldr	r3, [r6, #0]
   259da:	3604      	adds	r6, #4
   259dc:	9607      	str	r6, [sp, #28]
   259de:	9e05      	ldr	r6, [sp, #20]
   259e0:	601e      	str	r6, [r3, #0]
   259e2:	f7ff bb44 	b.w	2506e <_svfiprintf_r+0x3a>
   259e6:	9802      	ldr	r0, [sp, #8]
   259e8:	4649      	mov	r1, r9
   259ea:	4652      	mov	r2, sl
   259ec:	f7ff fa96 	bl	24f1c <__ssprint_r>
   259f0:	2800      	cmp	r0, #0
   259f2:	f47f aebf 	bne.w	25774 <_svfiprintf_r+0x740>
   259f6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   259f8:	ac0e      	add	r4, sp, #56	; 0x38
   259fa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   259fc:	e625      	b.n	2564a <_svfiprintf_r+0x616>
   259fe:	2600      	movs	r6, #0
   25a00:	9609      	str	r6, [sp, #36]	; 0x24
   25a02:	e428      	b.n	25256 <_svfiprintf_r+0x222>
   25a04:	2140      	movs	r1, #64	; 0x40
   25a06:	9200      	str	r2, [sp, #0]
   25a08:	f7fa fae0 	bl	1ffcc <_malloc_r>
   25a0c:	9a00      	ldr	r2, [sp, #0]
   25a0e:	f8c9 0000 	str.w	r0, [r9]
   25a12:	f8c9 0010 	str.w	r0, [r9, #16]
   25a16:	b350      	cbz	r0, 25a6e <_svfiprintf_r+0xa3a>
   25a18:	2340      	movs	r3, #64	; 0x40
   25a1a:	f8c9 3014 	str.w	r3, [r9, #20]
   25a1e:	f7ff bb16 	b.w	2504e <_svfiprintf_r+0x1a>
   25a22:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   25a24:	ebc6 060a 	rsb	r6, r6, sl
   25a28:	9604      	str	r6, [sp, #16]
   25a2a:	e412      	b.n	25252 <_svfiprintf_r+0x21e>
   25a2c:	f1b8 0f06 	cmp.w	r8, #6
   25a30:	bf34      	ite	cc
   25a32:	4643      	movcc	r3, r8
   25a34:	2306      	movcs	r3, #6
   25a36:	f64c 76a8 	movw	r6, #53160	; 0xcfa8
   25a3a:	9304      	str	r3, [sp, #16]
   25a3c:	f2c0 0602 	movt	r6, #2
   25a40:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   25a44:	960a      	str	r6, [sp, #40]	; 0x28
   25a46:	9303      	str	r3, [sp, #12]
   25a48:	e474      	b.n	25334 <_svfiprintf_r+0x300>
   25a4a:	f8cd 8010 	str.w	r8, [sp, #16]
   25a4e:	9009      	str	r0, [sp, #36]	; 0x24
   25a50:	e401      	b.n	25256 <_svfiprintf_r+0x222>
   25a52:	9e07      	ldr	r6, [sp, #28]
   25a54:	786b      	ldrb	r3, [r5, #1]
   25a56:	460d      	mov	r5, r1
   25a58:	1d30      	adds	r0, r6, #4
   25a5a:	9007      	str	r0, [sp, #28]
   25a5c:	f8d6 8000 	ldr.w	r8, [r6]
   25a60:	f1b8 0f00 	cmp.w	r8, #0
   25a64:	bfb8      	it	lt
   25a66:	f04f 38ff 	movlt.w	r8, #4294967295
   25a6a:	f7ff bb3b 	b.w	250e4 <_svfiprintf_r+0xb0>
   25a6e:	f04f 36ff 	mov.w	r6, #4294967295
   25a72:	9605      	str	r6, [sp, #20]
   25a74:	9e02      	ldr	r6, [sp, #8]
   25a76:	230c      	movs	r3, #12
   25a78:	6033      	str	r3, [r6, #0]
   25a7a:	e684      	b.n	25786 <_svfiprintf_r+0x752>

00025a7c <_calloc_r>:
   25a7c:	b510      	push	{r4, lr}
   25a7e:	fb01 f102 	mul.w	r1, r1, r2
   25a82:	f7fa faa3 	bl	1ffcc <_malloc_r>
   25a86:	4604      	mov	r4, r0
   25a88:	b308      	cbz	r0, 25ace <_calloc_r+0x52>
   25a8a:	f850 2c04 	ldr.w	r2, [r0, #-4]
   25a8e:	f022 0203 	bic.w	r2, r2, #3
   25a92:	3a04      	subs	r2, #4
   25a94:	2a24      	cmp	r2, #36	; 0x24
   25a96:	d81c      	bhi.n	25ad2 <_calloc_r+0x56>
   25a98:	2a13      	cmp	r2, #19
   25a9a:	bf98      	it	ls
   25a9c:	4602      	movls	r2, r0
   25a9e:	d912      	bls.n	25ac6 <_calloc_r+0x4a>
   25aa0:	2300      	movs	r3, #0
   25aa2:	2a1b      	cmp	r2, #27
   25aa4:	6003      	str	r3, [r0, #0]
   25aa6:	bf98      	it	ls
   25aa8:	f100 0208 	addls.w	r2, r0, #8
   25aac:	6043      	str	r3, [r0, #4]
   25aae:	d90a      	bls.n	25ac6 <_calloc_r+0x4a>
   25ab0:	2a24      	cmp	r2, #36	; 0x24
   25ab2:	6083      	str	r3, [r0, #8]
   25ab4:	bf14      	ite	ne
   25ab6:	f100 0210 	addne.w	r2, r0, #16
   25aba:	f100 0218 	addeq.w	r2, r0, #24
   25abe:	60c3      	str	r3, [r0, #12]
   25ac0:	bf04      	itt	eq
   25ac2:	6103      	streq	r3, [r0, #16]
   25ac4:	6143      	streq	r3, [r0, #20]
   25ac6:	2300      	movs	r3, #0
   25ac8:	6013      	str	r3, [r2, #0]
   25aca:	6053      	str	r3, [r2, #4]
   25acc:	6093      	str	r3, [r2, #8]
   25ace:	4620      	mov	r0, r4
   25ad0:	bd10      	pop	{r4, pc}
   25ad2:	2100      	movs	r1, #0
   25ad4:	f7fa fe82 	bl	207dc <memset>
   25ad8:	4620      	mov	r0, r4
   25ada:	bd10      	pop	{r4, pc}

00025adc <_close_r>:
   25adc:	b538      	push	{r3, r4, r5, lr}
   25ade:	f642 54c8 	movw	r4, #11720	; 0x2dc8
   25ae2:	f2c1 0400 	movt	r4, #4096	; 0x1000
   25ae6:	4605      	mov	r5, r0
   25ae8:	4608      	mov	r0, r1
   25aea:	2300      	movs	r3, #0
   25aec:	6023      	str	r3, [r4, #0]
   25aee:	f7e0 fb97 	bl	6220 <_close>
   25af2:	1c43      	adds	r3, r0, #1
   25af4:	d000      	beq.n	25af8 <_close_r+0x1c>
   25af6:	bd38      	pop	{r3, r4, r5, pc}
   25af8:	6823      	ldr	r3, [r4, #0]
   25afa:	2b00      	cmp	r3, #0
   25afc:	d0fb      	beq.n	25af6 <_close_r+0x1a>
   25afe:	602b      	str	r3, [r5, #0]
   25b00:	bd38      	pop	{r3, r4, r5, pc}
   25b02:	bf00      	nop

00025b04 <_fclose_r>:
   25b04:	b570      	push	{r4, r5, r6, lr}
   25b06:	460c      	mov	r4, r1
   25b08:	4605      	mov	r5, r0
   25b0a:	460e      	mov	r6, r1
   25b0c:	2900      	cmp	r1, #0
   25b0e:	d047      	beq.n	25ba0 <_fclose_r+0x9c>
   25b10:	f7fe fae6 	bl	240e0 <__sfp_lock_acquire>
   25b14:	b115      	cbz	r5, 25b1c <_fclose_r+0x18>
   25b16:	69ab      	ldr	r3, [r5, #24]
   25b18:	2b00      	cmp	r3, #0
   25b1a:	d043      	beq.n	25ba4 <_fclose_r+0xa0>
   25b1c:	f24d 1308 	movw	r3, #53512	; 0xd108
   25b20:	f2c0 0302 	movt	r3, #2
   25b24:	429c      	cmp	r4, r3
   25b26:	bf08      	it	eq
   25b28:	686c      	ldreq	r4, [r5, #4]
   25b2a:	d00e      	beq.n	25b4a <_fclose_r+0x46>
   25b2c:	f24d 03e8 	movw	r3, #53480	; 0xd0e8
   25b30:	f2c0 0302 	movt	r3, #2
   25b34:	429c      	cmp	r4, r3
   25b36:	bf08      	it	eq
   25b38:	68ac      	ldreq	r4, [r5, #8]
   25b3a:	d006      	beq.n	25b4a <_fclose_r+0x46>
   25b3c:	f24d 03c8 	movw	r3, #53448	; 0xd0c8
   25b40:	f2c0 0302 	movt	r3, #2
   25b44:	429c      	cmp	r4, r3
   25b46:	bf08      	it	eq
   25b48:	68ec      	ldreq	r4, [r5, #12]
   25b4a:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   25b4e:	b32e      	cbz	r6, 25b9c <_fclose_r+0x98>
   25b50:	4628      	mov	r0, r5
   25b52:	4621      	mov	r1, r4
   25b54:	f7fe f908 	bl	23d68 <_fflush_r>
   25b58:	6b23      	ldr	r3, [r4, #48]	; 0x30
   25b5a:	4606      	mov	r6, r0
   25b5c:	b13b      	cbz	r3, 25b6e <_fclose_r+0x6a>
   25b5e:	4628      	mov	r0, r5
   25b60:	6a21      	ldr	r1, [r4, #32]
   25b62:	4798      	blx	r3
   25b64:	ea36 0620 	bics.w	r6, r6, r0, asr #32
   25b68:	bf28      	it	cs
   25b6a:	f04f 36ff 	movcs.w	r6, #4294967295
   25b6e:	89a3      	ldrh	r3, [r4, #12]
   25b70:	061b      	lsls	r3, r3, #24
   25b72:	d41b      	bmi.n	25bac <_fclose_r+0xa8>
   25b74:	6b61      	ldr	r1, [r4, #52]	; 0x34
   25b76:	b141      	cbz	r1, 25b8a <_fclose_r+0x86>
   25b78:	f104 0344 	add.w	r3, r4, #68	; 0x44
   25b7c:	4299      	cmp	r1, r3
   25b7e:	d002      	beq.n	25b86 <_fclose_r+0x82>
   25b80:	4628      	mov	r0, r5
   25b82:	f7fe fb1f 	bl	241c4 <_free_r>
   25b86:	2300      	movs	r3, #0
   25b88:	6363      	str	r3, [r4, #52]	; 0x34
   25b8a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   25b8c:	b121      	cbz	r1, 25b98 <_fclose_r+0x94>
   25b8e:	4628      	mov	r0, r5
   25b90:	f7fe fb18 	bl	241c4 <_free_r>
   25b94:	2300      	movs	r3, #0
   25b96:	64a3      	str	r3, [r4, #72]	; 0x48
   25b98:	2300      	movs	r3, #0
   25b9a:	81a3      	strh	r3, [r4, #12]
   25b9c:	f7fe faa2 	bl	240e4 <__sfp_lock_release>
   25ba0:	4630      	mov	r0, r6
   25ba2:	bd70      	pop	{r4, r5, r6, pc}
   25ba4:	4628      	mov	r0, r5
   25ba6:	f7fe fa21 	bl	23fec <__sinit>
   25baa:	e7b7      	b.n	25b1c <_fclose_r+0x18>
   25bac:	4628      	mov	r0, r5
   25bae:	6921      	ldr	r1, [r4, #16]
   25bb0:	f7fe fb08 	bl	241c4 <_free_r>
   25bb4:	e7de      	b.n	25b74 <_fclose_r+0x70>
   25bb6:	bf00      	nop

00025bb8 <fclose>:
   25bb8:	f240 0328 	movw	r3, #40	; 0x28
   25bbc:	4601      	mov	r1, r0
   25bbe:	f2c1 0300 	movt	r3, #4096	; 0x1000
   25bc2:	6818      	ldr	r0, [r3, #0]
   25bc4:	f7ff bf9e 	b.w	25b04 <_fclose_r>

00025bc8 <_fstat_r>:
   25bc8:	b538      	push	{r3, r4, r5, lr}
   25bca:	f642 54c8 	movw	r4, #11720	; 0x2dc8
   25bce:	f2c1 0400 	movt	r4, #4096	; 0x1000
   25bd2:	4605      	mov	r5, r0
   25bd4:	4608      	mov	r0, r1
   25bd6:	4611      	mov	r1, r2
   25bd8:	2300      	movs	r3, #0
   25bda:	6023      	str	r3, [r4, #0]
   25bdc:	f7e0 fb24 	bl	6228 <_fstat>
   25be0:	1c43      	adds	r3, r0, #1
   25be2:	d000      	beq.n	25be6 <_fstat_r+0x1e>
   25be4:	bd38      	pop	{r3, r4, r5, pc}
   25be6:	6823      	ldr	r3, [r4, #0]
   25be8:	2b00      	cmp	r3, #0
   25bea:	d0fb      	beq.n	25be4 <_fstat_r+0x1c>
   25bec:	602b      	str	r3, [r5, #0]
   25bee:	bd38      	pop	{r3, r4, r5, pc}

00025bf0 <_isatty_r>:
   25bf0:	b538      	push	{r3, r4, r5, lr}
   25bf2:	f642 54c8 	movw	r4, #11720	; 0x2dc8
   25bf6:	f2c1 0400 	movt	r4, #4096	; 0x1000
   25bfa:	4605      	mov	r5, r0
   25bfc:	4608      	mov	r0, r1
   25bfe:	2300      	movs	r3, #0
   25c00:	6023      	str	r3, [r4, #0]
   25c02:	f7e0 fb17 	bl	6234 <_isatty>
   25c06:	1c43      	adds	r3, r0, #1
   25c08:	d000      	beq.n	25c0c <_isatty_r+0x1c>
   25c0a:	bd38      	pop	{r3, r4, r5, pc}
   25c0c:	6823      	ldr	r3, [r4, #0]
   25c0e:	2b00      	cmp	r3, #0
   25c10:	d0fb      	beq.n	25c0a <_isatty_r+0x1a>
   25c12:	602b      	str	r3, [r5, #0]
   25c14:	bd38      	pop	{r3, r4, r5, pc}
   25c16:	bf00      	nop

00025c18 <_lseek_r>:
   25c18:	b538      	push	{r3, r4, r5, lr}
   25c1a:	f642 54c8 	movw	r4, #11720	; 0x2dc8
   25c1e:	f2c1 0400 	movt	r4, #4096	; 0x1000
   25c22:	4605      	mov	r5, r0
   25c24:	4608      	mov	r0, r1
   25c26:	4611      	mov	r1, r2
   25c28:	461a      	mov	r2, r3
   25c2a:	2300      	movs	r3, #0
   25c2c:	6023      	str	r3, [r4, #0]
   25c2e:	f7e0 fb05 	bl	623c <_lseek>
   25c32:	1c43      	adds	r3, r0, #1
   25c34:	d000      	beq.n	25c38 <_lseek_r+0x20>
   25c36:	bd38      	pop	{r3, r4, r5, pc}
   25c38:	6823      	ldr	r3, [r4, #0]
   25c3a:	2b00      	cmp	r3, #0
   25c3c:	d0fb      	beq.n	25c36 <_lseek_r+0x1e>
   25c3e:	602b      	str	r3, [r5, #0]
   25c40:	bd38      	pop	{r3, r4, r5, pc}
   25c42:	bf00      	nop

00025c44 <_read_r>:
   25c44:	b538      	push	{r3, r4, r5, lr}
   25c46:	f642 54c8 	movw	r4, #11720	; 0x2dc8
   25c4a:	f2c1 0400 	movt	r4, #4096	; 0x1000
   25c4e:	4605      	mov	r5, r0
   25c50:	4608      	mov	r0, r1
   25c52:	4611      	mov	r1, r2
   25c54:	461a      	mov	r2, r3
   25c56:	2300      	movs	r3, #0
   25c58:	6023      	str	r3, [r4, #0]
   25c5a:	f7e0 faf3 	bl	6244 <_read>
   25c5e:	1c43      	adds	r3, r0, #1
   25c60:	d000      	beq.n	25c64 <_read_r+0x20>
   25c62:	bd38      	pop	{r3, r4, r5, pc}
   25c64:	6823      	ldr	r3, [r4, #0]
   25c66:	2b00      	cmp	r3, #0
   25c68:	d0fb      	beq.n	25c62 <_read_r+0x1e>
   25c6a:	602b      	str	r3, [r5, #0]
   25c6c:	bd38      	pop	{r3, r4, r5, pc}
   25c6e:	bf00      	nop

00025c70 <__gedf2>:
   25c70:	f04f 3cff 	mov.w	ip, #4294967295
   25c74:	e006      	b.n	25c84 <__cmpdf2+0x4>
   25c76:	bf00      	nop

00025c78 <__ledf2>:
   25c78:	f04f 0c01 	mov.w	ip, #1
   25c7c:	e002      	b.n	25c84 <__cmpdf2+0x4>
   25c7e:	bf00      	nop

00025c80 <__cmpdf2>:
   25c80:	f04f 0c01 	mov.w	ip, #1
   25c84:	f84d cd04 	str.w	ip, [sp, #-4]!
   25c88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   25c8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   25c90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   25c94:	bf18      	it	ne
   25c96:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   25c9a:	d01b      	beq.n	25cd4 <__cmpdf2+0x54>
   25c9c:	b001      	add	sp, #4
   25c9e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   25ca2:	bf0c      	ite	eq
   25ca4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   25ca8:	ea91 0f03 	teqne	r1, r3
   25cac:	bf02      	ittt	eq
   25cae:	ea90 0f02 	teqeq	r0, r2
   25cb2:	2000      	moveq	r0, #0
   25cb4:	4770      	bxeq	lr
   25cb6:	f110 0f00 	cmn.w	r0, #0
   25cba:	ea91 0f03 	teq	r1, r3
   25cbe:	bf58      	it	pl
   25cc0:	4299      	cmppl	r1, r3
   25cc2:	bf08      	it	eq
   25cc4:	4290      	cmpeq	r0, r2
   25cc6:	bf2c      	ite	cs
   25cc8:	17d8      	asrcs	r0, r3, #31
   25cca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   25cce:	f040 0001 	orr.w	r0, r0, #1
   25cd2:	4770      	bx	lr
   25cd4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   25cd8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   25cdc:	d102      	bne.n	25ce4 <__cmpdf2+0x64>
   25cde:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   25ce2:	d107      	bne.n	25cf4 <__cmpdf2+0x74>
   25ce4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   25ce8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   25cec:	d1d6      	bne.n	25c9c <__cmpdf2+0x1c>
   25cee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   25cf2:	d0d3      	beq.n	25c9c <__cmpdf2+0x1c>
   25cf4:	f85d 0b04 	ldr.w	r0, [sp], #4
   25cf8:	4770      	bx	lr
   25cfa:	bf00      	nop

00025cfc <__aeabi_cdrcmple>:
   25cfc:	4684      	mov	ip, r0
   25cfe:	4610      	mov	r0, r2
   25d00:	4662      	mov	r2, ip
   25d02:	468c      	mov	ip, r1
   25d04:	4619      	mov	r1, r3
   25d06:	4663      	mov	r3, ip
   25d08:	e000      	b.n	25d0c <__aeabi_cdcmpeq>
   25d0a:	bf00      	nop

00025d0c <__aeabi_cdcmpeq>:
   25d0c:	b501      	push	{r0, lr}
   25d0e:	f7ff ffb7 	bl	25c80 <__cmpdf2>
   25d12:	2800      	cmp	r0, #0
   25d14:	bf48      	it	mi
   25d16:	f110 0f00 	cmnmi.w	r0, #0
   25d1a:	bd01      	pop	{r0, pc}

00025d1c <__aeabi_dcmpeq>:
   25d1c:	f84d ed08 	str.w	lr, [sp, #-8]!
   25d20:	f7ff fff4 	bl	25d0c <__aeabi_cdcmpeq>
   25d24:	bf0c      	ite	eq
   25d26:	2001      	moveq	r0, #1
   25d28:	2000      	movne	r0, #0
   25d2a:	f85d fb08 	ldr.w	pc, [sp], #8
   25d2e:	bf00      	nop

00025d30 <__aeabi_dcmplt>:
   25d30:	f84d ed08 	str.w	lr, [sp, #-8]!
   25d34:	f7ff ffea 	bl	25d0c <__aeabi_cdcmpeq>
   25d38:	bf34      	ite	cc
   25d3a:	2001      	movcc	r0, #1
   25d3c:	2000      	movcs	r0, #0
   25d3e:	f85d fb08 	ldr.w	pc, [sp], #8
   25d42:	bf00      	nop

00025d44 <__aeabi_dcmple>:
   25d44:	f84d ed08 	str.w	lr, [sp, #-8]!
   25d48:	f7ff ffe0 	bl	25d0c <__aeabi_cdcmpeq>
   25d4c:	bf94      	ite	ls
   25d4e:	2001      	movls	r0, #1
   25d50:	2000      	movhi	r0, #0
   25d52:	f85d fb08 	ldr.w	pc, [sp], #8
   25d56:	bf00      	nop

00025d58 <__aeabi_dcmpge>:
   25d58:	f84d ed08 	str.w	lr, [sp, #-8]!
   25d5c:	f7ff ffce 	bl	25cfc <__aeabi_cdrcmple>
   25d60:	bf94      	ite	ls
   25d62:	2001      	movls	r0, #1
   25d64:	2000      	movhi	r0, #0
   25d66:	f85d fb08 	ldr.w	pc, [sp], #8
   25d6a:	bf00      	nop

00025d6c <__aeabi_dcmpgt>:
   25d6c:	f84d ed08 	str.w	lr, [sp, #-8]!
   25d70:	f7ff ffc4 	bl	25cfc <__aeabi_cdrcmple>
   25d74:	bf34      	ite	cc
   25d76:	2001      	movcc	r0, #1
   25d78:	2000      	movcs	r0, #0
   25d7a:	f85d fb08 	ldr.w	pc, [sp], #8
   25d7e:	bf00      	nop

00025d80 <__aeabi_d2iz>:
   25d80:	ea4f 0241 	mov.w	r2, r1, lsl #1
   25d84:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   25d88:	d215      	bcs.n	25db6 <__aeabi_d2iz+0x36>
   25d8a:	d511      	bpl.n	25db0 <__aeabi_d2iz+0x30>
   25d8c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   25d90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   25d94:	d912      	bls.n	25dbc <__aeabi_d2iz+0x3c>
   25d96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   25d9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   25d9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   25da2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   25da6:	fa23 f002 	lsr.w	r0, r3, r2
   25daa:	bf18      	it	ne
   25dac:	4240      	negne	r0, r0
   25dae:	4770      	bx	lr
   25db0:	f04f 0000 	mov.w	r0, #0
   25db4:	4770      	bx	lr
   25db6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   25dba:	d105      	bne.n	25dc8 <__aeabi_d2iz+0x48>
   25dbc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   25dc0:	bf08      	it	eq
   25dc2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   25dc6:	4770      	bx	lr
   25dc8:	f04f 0000 	mov.w	r0, #0
   25dcc:	4770      	bx	lr
   25dce:	bf00      	nop

00025dd0 <_Unwind_decode_target2>:
   25dd0:	6803      	ldr	r3, [r0, #0]
   25dd2:	b103      	cbz	r3, 25dd6 <_Unwind_decode_target2+0x6>
   25dd4:	181b      	adds	r3, r3, r0
   25dd6:	4618      	mov	r0, r3
   25dd8:	4770      	bx	lr
   25dda:	bf00      	nop

00025ddc <selfrel_offset31>:
   25ddc:	6803      	ldr	r3, [r0, #0]
   25dde:	005a      	lsls	r2, r3, #1
   25de0:	bf4c      	ite	mi
   25de2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
   25de6:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
   25dea:	18c0      	adds	r0, r0, r3
   25dec:	4770      	bx	lr
   25dee:	bf00      	nop

00025df0 <search_EIT_table>:
   25df0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25df4:	4604      	mov	r4, r0
   25df6:	4691      	mov	r9, r2
   25df8:	460e      	mov	r6, r1
   25dfa:	b301      	cbz	r1, 25e3e <search_EIT_table+0x4e>
   25dfc:	f101 3bff 	add.w	fp, r1, #4294967295
   25e00:	2700      	movs	r7, #0
   25e02:	46da      	mov	sl, fp
   25e04:	eb07 010a 	add.w	r1, r7, sl
   25e08:	eb01 75d1 	add.w	r5, r1, r1, lsr #31
   25e0c:	106d      	asrs	r5, r5, #1
   25e0e:	eb04 06c5 	add.w	r6, r4, r5, lsl #3
   25e12:	4630      	mov	r0, r6
   25e14:	f7ff ffe2 	bl	25ddc <selfrel_offset31>
   25e18:	4680      	mov	r8, r0
   25e1a:	1c68      	adds	r0, r5, #1
   25e1c:	45ab      	cmp	fp, r5
   25e1e:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   25e22:	bf08      	it	eq
   25e24:	f04f 30ff 	moveq.w	r0, #4294967295
   25e28:	d002      	beq.n	25e30 <search_EIT_table+0x40>
   25e2a:	f7ff ffd7 	bl	25ddc <selfrel_offset31>
   25e2e:	3801      	subs	r0, #1
   25e30:	45c8      	cmp	r8, r9
   25e32:	d907      	bls.n	25e44 <search_EIT_table+0x54>
   25e34:	42bd      	cmp	r5, r7
   25e36:	f105 3aff 	add.w	sl, r5, #4294967295
   25e3a:	d1e3      	bne.n	25e04 <search_EIT_table+0x14>
   25e3c:	2600      	movs	r6, #0
   25e3e:	4630      	mov	r0, r6
   25e40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25e44:	4548      	cmp	r0, r9
   25e46:	f105 0701 	add.w	r7, r5, #1
   25e4a:	d3db      	bcc.n	25e04 <search_EIT_table+0x14>
   25e4c:	4630      	mov	r0, r6
   25e4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25e52:	bf00      	nop

00025e54 <get_eit_entry>:
   25e54:	f240 0300 	movw	r3, #0
   25e58:	f2c0 0300 	movt	r3, #0
   25e5c:	b530      	push	{r4, r5, lr}
   25e5e:	4604      	mov	r4, r0
   25e60:	b083      	sub	sp, #12
   25e62:	1e8d      	subs	r5, r1, #2
   25e64:	2b00      	cmp	r3, #0
   25e66:	d04f      	beq.n	25f08 <get_eit_entry+0xb4>
   25e68:	4628      	mov	r0, r5
   25e6a:	a901      	add	r1, sp, #4
   25e6c:	f3af 8000 	nop.w
   25e70:	4603      	mov	r3, r0
   25e72:	2800      	cmp	r0, #0
   25e74:	d022      	beq.n	25ebc <get_eit_entry+0x68>
   25e76:	462a      	mov	r2, r5
   25e78:	4618      	mov	r0, r3
   25e7a:	9901      	ldr	r1, [sp, #4]
   25e7c:	f7ff ffb8 	bl	25df0 <search_EIT_table>
   25e80:	4605      	mov	r5, r0
   25e82:	b1d8      	cbz	r0, 25ebc <get_eit_entry+0x68>
   25e84:	f7ff ffaa 	bl	25ddc <selfrel_offset31>
   25e88:	686b      	ldr	r3, [r5, #4]
   25e8a:	2b01      	cmp	r3, #1
   25e8c:	64a0      	str	r0, [r4, #72]	; 0x48
   25e8e:	d011      	beq.n	25eb4 <get_eit_entry+0x60>
   25e90:	1d28      	adds	r0, r5, #4
   25e92:	2b00      	cmp	r3, #0
   25e94:	db15      	blt.n	25ec2 <get_eit_entry+0x6e>
   25e96:	f7ff ffa1 	bl	25ddc <selfrel_offset31>
   25e9a:	2100      	movs	r1, #0
   25e9c:	6521      	str	r1, [r4, #80]	; 0x50
   25e9e:	64e0      	str	r0, [r4, #76]	; 0x4c
   25ea0:	6803      	ldr	r3, [r0, #0]
   25ea2:	2b00      	cmp	r3, #0
   25ea4:	db11      	blt.n	25eca <get_eit_entry+0x76>
   25ea6:	f7ff ff99 	bl	25ddc <selfrel_offset31>
   25eaa:	2300      	movs	r3, #0
   25eac:	6120      	str	r0, [r4, #16]
   25eae:	4618      	mov	r0, r3
   25eb0:	b003      	add	sp, #12
   25eb2:	bd30      	pop	{r4, r5, pc}
   25eb4:	2200      	movs	r2, #0
   25eb6:	2305      	movs	r3, #5
   25eb8:	6122      	str	r2, [r4, #16]
   25eba:	e7f8      	b.n	25eae <get_eit_entry+0x5a>
   25ebc:	6120      	str	r0, [r4, #16]
   25ebe:	2309      	movs	r3, #9
   25ec0:	e7f5      	b.n	25eae <get_eit_entry+0x5a>
   25ec2:	2301      	movs	r3, #1
   25ec4:	64e0      	str	r0, [r4, #76]	; 0x4c
   25ec6:	6523      	str	r3, [r4, #80]	; 0x50
   25ec8:	e7ea      	b.n	25ea0 <get_eit_entry+0x4c>
   25eca:	f3c3 6303 	ubfx	r3, r3, #24, #4
   25ece:	b13b      	cbz	r3, 25ee0 <get_eit_entry+0x8c>
   25ed0:	2b01      	cmp	r3, #1
   25ed2:	d00b      	beq.n	25eec <get_eit_entry+0x98>
   25ed4:	2b02      	cmp	r3, #2
   25ed6:	d010      	beq.n	25efa <get_eit_entry+0xa6>
   25ed8:	2000      	movs	r0, #0
   25eda:	2309      	movs	r3, #9
   25edc:	6120      	str	r0, [r4, #16]
   25ede:	e7e6      	b.n	25eae <get_eit_entry+0x5a>
   25ee0:	f246 4085 	movw	r0, #25733	; 0x6485
   25ee4:	f2c0 0002 	movt	r0, #2
   25ee8:	6120      	str	r0, [r4, #16]
   25eea:	e7e0      	b.n	25eae <get_eit_entry+0x5a>
   25eec:	f246 427d 	movw	r2, #25725	; 0x647d
   25ef0:	2300      	movs	r3, #0
   25ef2:	f2c0 0202 	movt	r2, #2
   25ef6:	6122      	str	r2, [r4, #16]
   25ef8:	e7d9      	b.n	25eae <get_eit_entry+0x5a>
   25efa:	f246 4175 	movw	r1, #25717	; 0x6475
   25efe:	2300      	movs	r3, #0
   25f00:	f2c0 0102 	movt	r1, #2
   25f04:	6121      	str	r1, [r4, #16]
   25f06:	e7d2      	b.n	25eae <get_eit_entry+0x5a>
   25f08:	f24d 6154 	movw	r1, #54868	; 0xd654
   25f0c:	f24d 436c 	movw	r3, #54380	; 0xd46c
   25f10:	f2c0 0302 	movt	r3, #2
   25f14:	f2c0 0102 	movt	r1, #2
   25f18:	1ac8      	subs	r0, r1, r3
   25f1a:	10c2      	asrs	r2, r0, #3
   25f1c:	9201      	str	r2, [sp, #4]
   25f1e:	e7aa      	b.n	25e76 <get_eit_entry+0x22>

00025f20 <restore_non_core_regs>:
   25f20:	6803      	ldr	r3, [r0, #0]
   25f22:	b510      	push	{r4, lr}
   25f24:	07da      	lsls	r2, r3, #31
   25f26:	4604      	mov	r4, r0
   25f28:	d405      	bmi.n	25f36 <restore_non_core_regs+0x16>
   25f2a:	3048      	adds	r0, #72	; 0x48
   25f2c:	0799      	lsls	r1, r3, #30
   25f2e:	d509      	bpl.n	25f44 <restore_non_core_regs+0x24>
   25f30:	f000 fd52 	bl	269d8 <__gnu_Unwind_Restore_VFP_D>
   25f34:	6823      	ldr	r3, [r4, #0]
   25f36:	075a      	lsls	r2, r3, #29
   25f38:	d509      	bpl.n	25f4e <restore_non_core_regs+0x2e>
   25f3a:	0718      	lsls	r0, r3, #28
   25f3c:	d50e      	bpl.n	25f5c <restore_non_core_regs+0x3c>
   25f3e:	06d9      	lsls	r1, r3, #27
   25f40:	d513      	bpl.n	25f6a <restore_non_core_regs+0x4a>
   25f42:	bd10      	pop	{r4, pc}
   25f44:	f000 fd40 	bl	269c8 <__gnu_Unwind_Restore_VFP>
   25f48:	6823      	ldr	r3, [r4, #0]
   25f4a:	075a      	lsls	r2, r3, #29
   25f4c:	d4f5      	bmi.n	25f3a <restore_non_core_regs+0x1a>
   25f4e:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   25f52:	f000 fd49 	bl	269e8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
   25f56:	6823      	ldr	r3, [r4, #0]
   25f58:	0718      	lsls	r0, r3, #28
   25f5a:	d4f0      	bmi.n	25f3e <restore_non_core_regs+0x1e>
   25f5c:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
   25f60:	f000 fd4a 	bl	269f8 <__gnu_Unwind_Restore_WMMXD>
   25f64:	6823      	ldr	r3, [r4, #0]
   25f66:	06d9      	lsls	r1, r3, #27
   25f68:	d4eb      	bmi.n	25f42 <restore_non_core_regs+0x22>
   25f6a:	f504 700c 	add.w	r0, r4, #560	; 0x230
   25f6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   25f72:	f000 bd85 	b.w	26a80 <__gnu_Unwind_Restore_WMMXC>
   25f76:	bf00      	nop

00025f78 <unwind_phase2_forced>:
   25f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25f7c:	f101 0e04 	add.w	lr, r1, #4
   25f80:	4605      	mov	r5, r0
   25f82:	4616      	mov	r6, r2
   25f84:	f5ad 6d90 	sub.w	sp, sp, #1152	; 0x480
   25f88:	f04f 0c00 	mov.w	ip, #0
   25f8c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   25f90:	b083      	sub	sp, #12
   25f92:	ac02      	add	r4, sp, #8
   25f94:	f8d5 a00c 	ldr.w	sl, [r5, #12]
   25f98:	1d27      	adds	r7, r4, #4
   25f9a:	f8d5 b018 	ldr.w	fp, [r5, #24]
   25f9e:	4566      	cmp	r6, ip
   25fa0:	bf14      	ite	ne
   25fa2:	260a      	movne	r6, #10
   25fa4:	2609      	moveq	r6, #9
   25fa6:	46e1      	mov	r9, ip
   25fa8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   25faa:	f50d 7812 	add.w	r8, sp, #584	; 0x248
   25fae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   25fb2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   25fb4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   25fb8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   25fba:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
   25fbe:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   25fc2:	4628      	mov	r0, r5
   25fc4:	6c21      	ldr	r1, [r4, #64]	; 0x40
   25fc6:	f8c4 c000 	str.w	ip, [r4]
   25fca:	f7ff ff43 	bl	25e54 <get_eit_entry>
   25fce:	4607      	mov	r7, r0
   25fd0:	b307      	cbz	r7, 26014 <unwind_phase2_forced+0x9c>
   25fd2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   25fd4:	f046 0610 	orr.w	r6, r6, #16
   25fd8:	4631      	mov	r1, r6
   25fda:	462a      	mov	r2, r5
   25fdc:	462b      	mov	r3, r5
   25fde:	6460      	str	r0, [r4, #68]	; 0x44
   25fe0:	2001      	movs	r0, #1
   25fe2:	e88d 0810 	stmia.w	sp, {r4, fp}
   25fe6:	47d0      	blx	sl
   25fe8:	2800      	cmp	r0, #0
   25fea:	d12e      	bne.n	2604a <unwind_phase2_forced+0xd2>
   25fec:	2f00      	cmp	r7, #0
   25fee:	d12d      	bne.n	2604c <unwind_phase2_forced+0xd4>
   25ff0:	4620      	mov	r0, r4
   25ff2:	4641      	mov	r1, r8
   25ff4:	f44f 7210 	mov.w	r2, #576	; 0x240
   25ff8:	f7fa fb1a 	bl	20630 <memcpy>
   25ffc:	f1b9 0f08 	cmp.w	r9, #8
   26000:	4604      	mov	r4, r0
   26002:	d129      	bne.n	26058 <unwind_phase2_forced+0xe0>
   26004:	4628      	mov	r0, r5
   26006:	6c21      	ldr	r1, [r4, #64]	; 0x40
   26008:	f7ff ff24 	bl	25e54 <get_eit_entry>
   2600c:	2609      	movs	r6, #9
   2600e:	4607      	mov	r7, r0
   26010:	2f00      	cmp	r7, #0
   26012:	d1de      	bne.n	25fd2 <unwind_phase2_forced+0x5a>
   26014:	6c23      	ldr	r3, [r4, #64]	; 0x40
   26016:	4621      	mov	r1, r4
   26018:	f44f 7210 	mov.w	r2, #576	; 0x240
   2601c:	4640      	mov	r0, r8
   2601e:	616b      	str	r3, [r5, #20]
   26020:	f7fa fb06 	bl	20630 <memcpy>
   26024:	692b      	ldr	r3, [r5, #16]
   26026:	4629      	mov	r1, r5
   26028:	4680      	mov	r8, r0
   2602a:	4630      	mov	r0, r6
   2602c:	4642      	mov	r2, r8
   2602e:	4798      	blx	r3
   26030:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
   26034:	4631      	mov	r1, r6
   26036:	462a      	mov	r2, r5
   26038:	6463      	str	r3, [r4, #68]	; 0x44
   2603a:	462b      	mov	r3, r5
   2603c:	e88d 0810 	stmia.w	sp, {r4, fp}
   26040:	4681      	mov	r9, r0
   26042:	2001      	movs	r0, #1
   26044:	47d0      	blx	sl
   26046:	2800      	cmp	r0, #0
   26048:	d0d0      	beq.n	25fec <unwind_phase2_forced+0x74>
   2604a:	2709      	movs	r7, #9
   2604c:	4638      	mov	r0, r7
   2604e:	b023      	add	sp, #140	; 0x8c
   26050:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
   26054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26058:	f1b9 0f07 	cmp.w	r9, #7
   2605c:	d1f5      	bne.n	2604a <unwind_phase2_forced+0xd2>
   2605e:	3004      	adds	r0, #4
   26060:	f000 fca6 	bl	269b0 <__restore_core_regs>

00026064 <unwind_phase2>:
   26064:	b570      	push	{r4, r5, r6, lr}
   26066:	4604      	mov	r4, r0
   26068:	460d      	mov	r5, r1
   2606a:	4620      	mov	r0, r4
   2606c:	6c29      	ldr	r1, [r5, #64]	; 0x40
   2606e:	f7ff fef1 	bl	25e54 <get_eit_entry>
   26072:	b950      	cbnz	r0, 2608a <unwind_phase2+0x26>
   26074:	6c2e      	ldr	r6, [r5, #64]	; 0x40
   26076:	2001      	movs	r0, #1
   26078:	6923      	ldr	r3, [r4, #16]
   2607a:	4621      	mov	r1, r4
   2607c:	462a      	mov	r2, r5
   2607e:	6166      	str	r6, [r4, #20]
   26080:	4798      	blx	r3
   26082:	2808      	cmp	r0, #8
   26084:	d0f1      	beq.n	2606a <unwind_phase2+0x6>
   26086:	2807      	cmp	r0, #7
   26088:	d001      	beq.n	2608e <unwind_phase2+0x2a>
   2608a:	f7f9 fcbb 	bl	1fa04 <abort>
   2608e:	1d28      	adds	r0, r5, #4
   26090:	f000 fc8e 	bl	269b0 <__restore_core_regs>

00026094 <_Unwind_VRS_Get>:
   26094:	b959      	cbnz	r1, 260ae <_Unwind_VRS_Get+0x1a>
   26096:	2a0f      	cmp	r2, #15
   26098:	bf94      	ite	ls
   2609a:	2100      	movls	r1, #0
   2609c:	2101      	movhi	r1, #1
   2609e:	2b00      	cmp	r3, #0
   260a0:	bf0c      	ite	eq
   260a2:	460b      	moveq	r3, r1
   260a4:	f041 0301 	orrne.w	r3, r1, #1
   260a8:	b133      	cbz	r3, 260b8 <_Unwind_VRS_Get+0x24>
   260aa:	2002      	movs	r0, #2
   260ac:	4770      	bx	lr
   260ae:	2904      	cmp	r1, #4
   260b0:	bf8c      	ite	hi
   260b2:	2002      	movhi	r0, #2
   260b4:	2001      	movls	r0, #1
   260b6:	4770      	bx	lr
   260b8:	eb00 0182 	add.w	r1, r0, r2, lsl #2
   260bc:	4618      	mov	r0, r3
   260be:	9b00      	ldr	r3, [sp, #0]
   260c0:	684a      	ldr	r2, [r1, #4]
   260c2:	601a      	str	r2, [r3, #0]
   260c4:	4770      	bx	lr
   260c6:	bf00      	nop

000260c8 <_Unwind_GetGR>:
   260c8:	b510      	push	{r4, lr}
   260ca:	460a      	mov	r2, r1
   260cc:	b084      	sub	sp, #16
   260ce:	2100      	movs	r1, #0
   260d0:	460b      	mov	r3, r1
   260d2:	ac03      	add	r4, sp, #12
   260d4:	9400      	str	r4, [sp, #0]
   260d6:	f7ff ffdd 	bl	26094 <_Unwind_VRS_Get>
   260da:	9803      	ldr	r0, [sp, #12]
   260dc:	b004      	add	sp, #16
   260de:	bd10      	pop	{r4, pc}

000260e0 <_Unwind_VRS_Set>:
   260e0:	b959      	cbnz	r1, 260fa <_Unwind_VRS_Set+0x1a>
   260e2:	2a0f      	cmp	r2, #15
   260e4:	bf94      	ite	ls
   260e6:	2100      	movls	r1, #0
   260e8:	2101      	movhi	r1, #1
   260ea:	2b00      	cmp	r3, #0
   260ec:	bf0c      	ite	eq
   260ee:	460b      	moveq	r3, r1
   260f0:	f041 0301 	orrne.w	r3, r1, #1
   260f4:	b133      	cbz	r3, 26104 <_Unwind_VRS_Set+0x24>
   260f6:	2002      	movs	r0, #2
   260f8:	4770      	bx	lr
   260fa:	2904      	cmp	r1, #4
   260fc:	bf8c      	ite	hi
   260fe:	2002      	movhi	r0, #2
   26100:	2001      	movls	r0, #1
   26102:	4770      	bx	lr
   26104:	9900      	ldr	r1, [sp, #0]
   26106:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   2610a:	4618      	mov	r0, r3
   2610c:	6809      	ldr	r1, [r1, #0]
   2610e:	6051      	str	r1, [r2, #4]
   26110:	4770      	bx	lr
   26112:	bf00      	nop

00026114 <_Unwind_SetGR>:
   26114:	b530      	push	{r4, r5, lr}
   26116:	b085      	sub	sp, #20
   26118:	ac04      	add	r4, sp, #16
   2611a:	460d      	mov	r5, r1
   2611c:	2100      	movs	r1, #0
   2611e:	f844 2d04 	str.w	r2, [r4, #-4]!
   26122:	460b      	mov	r3, r1
   26124:	462a      	mov	r2, r5
   26126:	9400      	str	r4, [sp, #0]
   26128:	f7ff ffda 	bl	260e0 <_Unwind_VRS_Set>
   2612c:	b005      	add	sp, #20
   2612e:	bd30      	pop	{r4, r5, pc}

00026130 <__gnu_unwind_pr_common>:
   26130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26134:	461e      	mov	r6, r3
   26136:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
   26138:	4617      	mov	r7, r2
   2613a:	b08b      	sub	sp, #44	; 0x2c
   2613c:	460c      	mov	r4, r1
   2613e:	f000 0803 	and.w	r8, r0, #3
   26142:	f000 0108 	and.w	r1, r0, #8
   26146:	f853 2b04 	ldr.w	r2, [r3], #4
   2614a:	9102      	str	r1, [sp, #8]
   2614c:	9307      	str	r3, [sp, #28]
   2614e:	2e00      	cmp	r6, #0
   26150:	f040 80f6 	bne.w	26340 <__gnu_unwind_pr_common+0x210>
   26154:	0210      	lsls	r0, r2, #8
   26156:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
   2615a:	2203      	movs	r2, #3
   2615c:	9006      	str	r0, [sp, #24]
   2615e:	f88d 2020 	strb.w	r2, [sp, #32]
   26162:	f1b8 0f02 	cmp.w	r8, #2
   26166:	6d20      	ldr	r0, [r4, #80]	; 0x50
   26168:	bf08      	it	eq
   2616a:	6ba3      	ldreq	r3, [r4, #56]	; 0x38
   2616c:	f010 0201 	ands.w	r2, r0, #1
   26170:	bf02      	ittt	eq
   26172:	f104 0158 	addeq.w	r1, r4, #88	; 0x58
   26176:	9201      	streq	r2, [sp, #4]
   26178:	9103      	streq	r1, [sp, #12]
   2617a:	f040 80ed 	bne.w	26358 <__gnu_unwind_pr_common+0x228>
   2617e:	f8d3 9000 	ldr.w	r9, [r3]
   26182:	f1b9 0f00 	cmp.w	r9, #0
   26186:	d031      	beq.n	261ec <__gnu_unwind_pr_common+0xbc>
   26188:	2e02      	cmp	r6, #2
   2618a:	f000 80d4 	beq.w	26336 <__gnu_unwind_pr_common+0x206>
   2618e:	f8b3 9000 	ldrh.w	r9, [r3]
   26192:	1d1d      	adds	r5, r3, #4
   26194:	f8b3 b002 	ldrh.w	fp, [r3, #2]
   26198:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   2619a:	210f      	movs	r1, #15
   2619c:	f02b 0a01 	bic.w	sl, fp, #1
   261a0:	4638      	mov	r0, r7
   261a2:	449a      	add	sl, r3
   261a4:	f7ff ff90 	bl	260c8 <_Unwind_GetGR>
   261a8:	4582      	cmp	sl, r0
   261aa:	d83c      	bhi.n	26226 <__gnu_unwind_pr_common+0xf6>
   261ac:	f029 0201 	bic.w	r2, r9, #1
   261b0:	f00b 0b01 	and.w	fp, fp, #1
   261b4:	4492      	add	sl, r2
   261b6:	f009 0101 	and.w	r1, r9, #1
   261ba:	4550      	cmp	r0, sl
   261bc:	ea41 094b 	orr.w	r9, r1, fp, lsl #1
   261c0:	bf2c      	ite	cs
   261c2:	2000      	movcs	r0, #0
   261c4:	2001      	movcc	r0, #1
   261c6:	f1b9 0f01 	cmp.w	r9, #1
   261ca:	d036      	beq.n	2623a <__gnu_unwind_pr_common+0x10a>
   261cc:	d254      	bcs.n	26278 <__gnu_unwind_pr_common+0x148>
   261ce:	f1b8 0f00 	cmp.w	r8, #0
   261d2:	bf0c      	ite	eq
   261d4:	2000      	moveq	r0, #0
   261d6:	f000 0001 	andne.w	r0, r0, #1
   261da:	2800      	cmp	r0, #0
   261dc:	f040 8122 	bne.w	26424 <__gnu_unwind_pr_common+0x2f4>
   261e0:	1d2b      	adds	r3, r5, #4
   261e2:	f8d3 9000 	ldr.w	r9, [r3]
   261e6:	f1b9 0f00 	cmp.w	r9, #0
   261ea:	d1cd      	bne.n	26188 <__gnu_unwind_pr_common+0x58>
   261ec:	4638      	mov	r0, r7
   261ee:	a906      	add	r1, sp, #24
   261f0:	f000 fcde 	bl	26bb0 <__gnu_unwind_execute>
   261f4:	2800      	cmp	r0, #0
   261f6:	d142      	bne.n	2627e <__gnu_unwind_pr_common+0x14e>
   261f8:	9a01      	ldr	r2, [sp, #4]
   261fa:	2308      	movs	r3, #8
   261fc:	2a00      	cmp	r2, #0
   261fe:	d03f      	beq.n	26280 <__gnu_unwind_pr_common+0x150>
   26200:	210f      	movs	r1, #15
   26202:	4638      	mov	r0, r7
   26204:	f7ff ff60 	bl	260c8 <_Unwind_GetGR>
   26208:	210e      	movs	r1, #14
   2620a:	4602      	mov	r2, r0
   2620c:	4638      	mov	r0, r7
   2620e:	f7ff ff81 	bl	26114 <_Unwind_SetGR>
   26212:	f644 124d 	movw	r2, #18765	; 0x494d
   26216:	4638      	mov	r0, r7
   26218:	210f      	movs	r1, #15
   2621a:	f2c0 0201 	movt	r2, #1
   2621e:	f7ff ff79 	bl	26114 <_Unwind_SetGR>
   26222:	2307      	movs	r3, #7
   26224:	e02c      	b.n	26280 <__gnu_unwind_pr_common+0x150>
   26226:	f00b 0b01 	and.w	fp, fp, #1
   2622a:	f009 0101 	and.w	r1, r9, #1
   2622e:	2000      	movs	r0, #0
   26230:	ea41 094b 	orr.w	r9, r1, fp, lsl #1
   26234:	f1b9 0f01 	cmp.w	r9, #1
   26238:	d1c8      	bne.n	261cc <__gnu_unwind_pr_common+0x9c>
   2623a:	f1b8 0f00 	cmp.w	r8, #0
   2623e:	f040 80a7 	bne.w	26390 <__gnu_unwind_pr_common+0x260>
   26242:	b1b0      	cbz	r0, 26272 <__gnu_unwind_pr_common+0x142>
   26244:	686b      	ldr	r3, [r5, #4]
   26246:	f8d5 9000 	ldr.w	r9, [r5]
   2624a:	1c99      	adds	r1, r3, #2
   2624c:	d017      	beq.n	2627e <__gnu_unwind_pr_common+0x14e>
   2624e:	9803      	ldr	r0, [sp, #12]
   26250:	3301      	adds	r3, #1
   26252:	9009      	str	r0, [sp, #36]	; 0x24
   26254:	f000 80b8 	beq.w	263c8 <__gnu_unwind_pr_common+0x298>
   26258:	1d28      	adds	r0, r5, #4
   2625a:	f7ff fdb9 	bl	25dd0 <_Unwind_decode_target2>
   2625e:	ea4f 72d9 	mov.w	r2, r9, lsr #31
   26262:	ab09      	add	r3, sp, #36	; 0x24
   26264:	4601      	mov	r1, r0
   26266:	4620      	mov	r0, r4
   26268:	f7ee fc4a 	bl	14b00 <__cxa_type_match>
   2626c:	2800      	cmp	r0, #0
   2626e:	f040 80f1 	bne.w	26454 <__gnu_unwind_pr_common+0x324>
   26272:	f105 0308 	add.w	r3, r5, #8
   26276:	e782      	b.n	2617e <__gnu_unwind_pr_common+0x4e>
   26278:	f1b9 0f02 	cmp.w	r9, #2
   2627c:	d004      	beq.n	26288 <__gnu_unwind_pr_common+0x158>
   2627e:	2309      	movs	r3, #9
   26280:	4618      	mov	r0, r3
   26282:	b00b      	add	sp, #44	; 0x2c
   26284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26288:	682b      	ldr	r3, [r5, #0]
   2628a:	f023 4a00 	bic.w	sl, r3, #2147483648	; 0x80000000
   2628e:	f1b8 0f00 	cmp.w	r8, #0
   26292:	d164      	bne.n	2635e <__gnu_unwind_pr_common+0x22e>
   26294:	2800      	cmp	r0, #0
   26296:	d047      	beq.n	26328 <__gnu_unwind_pr_common+0x1f8>
   26298:	9802      	ldr	r0, [sp, #8]
   2629a:	f1d0 0101 	rsbs	r1, r0, #1
   2629e:	bf38      	it	cc
   262a0:	2100      	movcc	r1, #0
   262a2:	f1ba 0f00 	cmp.w	sl, #0
   262a6:	bf08      	it	eq
   262a8:	f041 0101 	orreq.w	r1, r1, #1
   262ac:	2900      	cmp	r1, #0
   262ae:	d03b      	beq.n	26328 <__gnu_unwind_pr_common+0x1f8>
   262b0:	f1ba 0f00 	cmp.w	sl, #0
   262b4:	f000 80ac 	beq.w	26410 <__gnu_unwind_pr_common+0x2e0>
   262b8:	f01a 0f01 	tst.w	sl, #1
   262bc:	f105 0b04 	add.w	fp, r5, #4
   262c0:	46c1      	mov	r9, r8
   262c2:	f000 808d 	beq.w	263e0 <__gnu_unwind_pr_common+0x2b0>
   262c6:	9605      	str	r6, [sp, #20]
   262c8:	462e      	mov	r6, r5
   262ca:	f8cd 8010 	str.w	r8, [sp, #16]
   262ce:	9d03      	ldr	r5, [sp, #12]
   262d0:	e014      	b.n	262fc <__gnu_unwind_pr_common+0x1cc>
   262d2:	4553      	cmp	r3, sl
   262d4:	f10b 0b04 	add.w	fp, fp, #4
   262d8:	4658      	mov	r0, fp
   262da:	4699      	mov	r9, r3
   262dc:	f10b 0b04 	add.w	fp, fp, #4
   262e0:	f000 8095 	beq.w	2640e <__gnu_unwind_pr_common+0x2de>
   262e4:	9509      	str	r5, [sp, #36]	; 0x24
   262e6:	f7ff fd73 	bl	25dd0 <_Unwind_decode_target2>
   262ea:	4642      	mov	r2, r8
   262ec:	ab09      	add	r3, sp, #36	; 0x24
   262ee:	4601      	mov	r1, r0
   262f0:	4620      	mov	r0, r4
   262f2:	f7ee fc05 	bl	14b00 <__cxa_type_match>
   262f6:	b980      	cbnz	r0, 2631a <__gnu_unwind_pr_common+0x1ea>
   262f8:	f109 0901 	add.w	r9, r9, #1
   262fc:	4658      	mov	r0, fp
   262fe:	9509      	str	r5, [sp, #36]	; 0x24
   26300:	f7ff fd66 	bl	25dd0 <_Unwind_decode_target2>
   26304:	ab09      	add	r3, sp, #36	; 0x24
   26306:	2200      	movs	r2, #0
   26308:	4601      	mov	r1, r0
   2630a:	4620      	mov	r0, r4
   2630c:	f7ee fbf8 	bl	14b00 <__cxa_type_match>
   26310:	f109 0301 	add.w	r3, r9, #1
   26314:	4680      	mov	r8, r0
   26316:	2800      	cmp	r0, #0
   26318:	d0db      	beq.n	262d2 <__gnu_unwind_pr_common+0x1a2>
   2631a:	4635      	mov	r5, r6
   2631c:	f8dd 8010 	ldr.w	r8, [sp, #16]
   26320:	9e05      	ldr	r6, [sp, #20]
   26322:	45ca      	cmp	sl, r9
   26324:	d074      	beq.n	26410 <__gnu_unwind_pr_common+0x2e0>
   26326:	682b      	ldr	r3, [r5, #0]
   26328:	2b00      	cmp	r3, #0
   2632a:	db57      	blt.n	263dc <__gnu_unwind_pr_common+0x2ac>
   2632c:	f10a 0a01 	add.w	sl, sl, #1
   26330:	eb05 038a 	add.w	r3, r5, sl, lsl #2
   26334:	e723      	b.n	2617e <__gnu_unwind_pr_common+0x4e>
   26336:	f8d3 b004 	ldr.w	fp, [r3, #4]
   2633a:	f103 0508 	add.w	r5, r3, #8
   2633e:	e72b      	b.n	26198 <__gnu_unwind_pr_common+0x68>
   26340:	f3c2 4107 	ubfx	r1, r2, #16, #8
   26344:	0410      	lsls	r0, r2, #16
   26346:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
   2634a:	2202      	movs	r2, #2
   2634c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   26350:	9006      	str	r0, [sp, #24]
   26352:	f88d 2020 	strb.w	r2, [sp, #32]
   26356:	e704      	b.n	26162 <__gnu_unwind_pr_common+0x32>
   26358:	2100      	movs	r1, #0
   2635a:	9101      	str	r1, [sp, #4]
   2635c:	e746      	b.n	261ec <__gnu_unwind_pr_common+0xbc>
   2635e:	210d      	movs	r1, #13
   26360:	4638      	mov	r0, r7
   26362:	f8d4 9020 	ldr.w	r9, [r4, #32]
   26366:	f7ff feaf 	bl	260c8 <_Unwind_GetGR>
   2636a:	4581      	cmp	r9, r0
   2636c:	d1db      	bne.n	26326 <__gnu_unwind_pr_common+0x1f6>
   2636e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   26370:	429d      	cmp	r5, r3
   26372:	d1d8      	bne.n	26326 <__gnu_unwind_pr_common+0x1f6>
   26374:	2300      	movs	r3, #0
   26376:	1d28      	adds	r0, r5, #4
   26378:	2204      	movs	r2, #4
   2637a:	f8c4 a028 	str.w	sl, [r4, #40]	; 0x28
   2637e:	62e3      	str	r3, [r4, #44]	; 0x2c
   26380:	6322      	str	r2, [r4, #48]	; 0x30
   26382:	6360      	str	r0, [r4, #52]	; 0x34
   26384:	6829      	ldr	r1, [r5, #0]
   26386:	2900      	cmp	r1, #0
   26388:	db5f      	blt.n	2644a <__gnu_unwind_pr_common+0x31a>
   2638a:	2001      	movs	r0, #1
   2638c:	9001      	str	r0, [sp, #4]
   2638e:	e7cd      	b.n	2632c <__gnu_unwind_pr_common+0x1fc>
   26390:	210d      	movs	r1, #13
   26392:	4638      	mov	r0, r7
   26394:	f8d4 9020 	ldr.w	r9, [r4, #32]
   26398:	f7ff fe96 	bl	260c8 <_Unwind_GetGR>
   2639c:	4581      	cmp	r9, r0
   2639e:	f47f af68 	bne.w	26272 <__gnu_unwind_pr_common+0x142>
   263a2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   263a4:	4295      	cmp	r5, r2
   263a6:	f47f af64 	bne.w	26272 <__gnu_unwind_pr_common+0x142>
   263aa:	4628      	mov	r0, r5
   263ac:	f7ff fd16 	bl	25ddc <selfrel_offset31>
   263b0:	210f      	movs	r1, #15
   263b2:	4602      	mov	r2, r0
   263b4:	4638      	mov	r0, r7
   263b6:	f7ff fead 	bl	26114 <_Unwind_SetGR>
   263ba:	4638      	mov	r0, r7
   263bc:	2100      	movs	r1, #0
   263be:	4622      	mov	r2, r4
   263c0:	f7ff fea8 	bl	26114 <_Unwind_SetGR>
   263c4:	2307      	movs	r3, #7
   263c6:	e75b      	b.n	26280 <__gnu_unwind_pr_common+0x150>
   263c8:	4638      	mov	r0, r7
   263ca:	210d      	movs	r1, #13
   263cc:	f7ff fe7c 	bl	260c8 <_Unwind_GetGR>
   263d0:	6220      	str	r0, [r4, #32]
   263d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   263d4:	6263      	str	r3, [r4, #36]	; 0x24
   263d6:	62a5      	str	r5, [r4, #40]	; 0x28
   263d8:	2306      	movs	r3, #6
   263da:	e751      	b.n	26280 <__gnu_unwind_pr_common+0x150>
   263dc:	3504      	adds	r5, #4
   263de:	e7a5      	b.n	2632c <__gnu_unwind_pr_common+0x1fc>
   263e0:	9b03      	ldr	r3, [sp, #12]
   263e2:	4658      	mov	r0, fp
   263e4:	9309      	str	r3, [sp, #36]	; 0x24
   263e6:	f7ff fcf3 	bl	25dd0 <_Unwind_decode_target2>
   263ea:	4642      	mov	r2, r8
   263ec:	ab09      	add	r3, sp, #36	; 0x24
   263ee:	4601      	mov	r1, r0
   263f0:	4620      	mov	r0, r4
   263f2:	f7ee fb85 	bl	14b00 <__cxa_type_match>
   263f6:	2800      	cmp	r0, #0
   263f8:	d193      	bne.n	26322 <__gnu_unwind_pr_common+0x1f2>
   263fa:	9605      	str	r6, [sp, #20]
   263fc:	f10b 0b04 	add.w	fp, fp, #4
   26400:	462e      	mov	r6, r5
   26402:	f04f 0901 	mov.w	r9, #1
   26406:	f8cd 8010 	str.w	r8, [sp, #16]
   2640a:	9d03      	ldr	r5, [sp, #12]
   2640c:	e776      	b.n	262fc <__gnu_unwind_pr_common+0x1cc>
   2640e:	4635      	mov	r5, r6
   26410:	4638      	mov	r0, r7
   26412:	210d      	movs	r1, #13
   26414:	f7ff fe58 	bl	260c8 <_Unwind_GetGR>
   26418:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2641a:	62a5      	str	r5, [r4, #40]	; 0x28
   2641c:	2306      	movs	r3, #6
   2641e:	6262      	str	r2, [r4, #36]	; 0x24
   26420:	6220      	str	r0, [r4, #32]
   26422:	e72d      	b.n	26280 <__gnu_unwind_pr_common+0x150>
   26424:	4628      	mov	r0, r5
   26426:	3504      	adds	r5, #4
   26428:	f7ff fcd8 	bl	25ddc <selfrel_offset31>
   2642c:	63a5      	str	r5, [r4, #56]	; 0x38
   2642e:	4606      	mov	r6, r0
   26430:	4620      	mov	r0, r4
   26432:	f7ee fbc3 	bl	14bbc <__cxa_begin_cleanup>
   26436:	2800      	cmp	r0, #0
   26438:	f43f af21 	beq.w	2627e <__gnu_unwind_pr_common+0x14e>
   2643c:	4638      	mov	r0, r7
   2643e:	210f      	movs	r1, #15
   26440:	4632      	mov	r2, r6
   26442:	f7ff fe67 	bl	26114 <_Unwind_SetGR>
   26446:	2307      	movs	r3, #7
   26448:	e71a      	b.n	26280 <__gnu_unwind_pr_common+0x150>
   2644a:	f10a 0101 	add.w	r1, sl, #1
   2644e:	eb05 0081 	add.w	r0, r5, r1, lsl #2
   26452:	e7ab      	b.n	263ac <__gnu_unwind_pr_common+0x27c>
   26454:	4602      	mov	r2, r0
   26456:	210d      	movs	r1, #13
   26458:	4638      	mov	r0, r7
   2645a:	9200      	str	r2, [sp, #0]
   2645c:	f7ff fe34 	bl	260c8 <_Unwind_GetGR>
   26460:	9b00      	ldr	r3, [sp, #0]
   26462:	2b02      	cmp	r3, #2
   26464:	6220      	str	r0, [r4, #32]
   26466:	d1b4      	bne.n	263d2 <__gnu_unwind_pr_common+0x2a2>
   26468:	9809      	ldr	r0, [sp, #36]	; 0x24
   2646a:	4621      	mov	r1, r4
   2646c:	f841 0f2c 	str.w	r0, [r1, #44]!
   26470:	6261      	str	r1, [r4, #36]	; 0x24
   26472:	e7b0      	b.n	263d6 <__gnu_unwind_pr_common+0x2a6>

00026474 <__aeabi_unwind_cpp_pr2>:
   26474:	2302      	movs	r3, #2
   26476:	f7ff be5b 	b.w	26130 <__gnu_unwind_pr_common>
   2647a:	bf00      	nop

0002647c <__aeabi_unwind_cpp_pr1>:
   2647c:	2301      	movs	r3, #1
   2647e:	f7ff be57 	b.w	26130 <__gnu_unwind_pr_common>
   26482:	bf00      	nop

00026484 <__aeabi_unwind_cpp_pr0>:
   26484:	2300      	movs	r3, #0
   26486:	f7ff be53 	b.w	26130 <__gnu_unwind_pr_common>
   2648a:	bf00      	nop

0002648c <_Unwind_VRS_Pop>:
   2648c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26490:	4604      	mov	r4, r0
   26492:	b0e8      	sub	sp, #416	; 0x1a0
   26494:	2904      	cmp	r1, #4
   26496:	d807      	bhi.n	264a8 <_Unwind_VRS_Pop+0x1c>
   26498:	e8df f001 	tbb	[pc, r1]
   2649c:	0394963a 	.word	0x0394963a
   264a0:	0a          	.byte	0x0a
   264a1:	00          	.byte	0x00
   264a2:	2b03      	cmp	r3, #3
   264a4:	f000 815d 	beq.w	26762 <_Unwind_VRS_Pop+0x2d6>
   264a8:	2002      	movs	r0, #2
   264aa:	b068      	add	sp, #416	; 0x1a0
   264ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   264b0:	2a10      	cmp	r2, #16
   264b2:	bf94      	ite	ls
   264b4:	2100      	movls	r1, #0
   264b6:	2101      	movhi	r1, #1
   264b8:	2b00      	cmp	r3, #0
   264ba:	bf0c      	ite	eq
   264bc:	460b      	moveq	r3, r1
   264be:	f041 0301 	orrne.w	r3, r1, #1
   264c2:	2b00      	cmp	r3, #0
   264c4:	d1f0      	bne.n	264a8 <_Unwind_VRS_Pop+0x1c>
   264c6:	6823      	ldr	r3, [r4, #0]
   264c8:	06d9      	lsls	r1, r3, #27
   264ca:	f100 8186 	bmi.w	267da <_Unwind_VRS_Pop+0x34e>
   264ce:	a864      	add	r0, sp, #400	; 0x190
   264d0:	9201      	str	r2, [sp, #4]
   264d2:	f000 fadf 	bl	26a94 <__gnu_Unwind_Save_WMMXC>
   264d6:	9a01      	ldr	r2, [sp, #4]
   264d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   264da:	07d0      	lsls	r0, r2, #31
   264dc:	bf44      	itt	mi
   264de:	f853 0b04 	ldrmi.w	r0, [r3], #4
   264e2:	9064      	strmi	r0, [sp, #400]	; 0x190
   264e4:	0791      	lsls	r1, r2, #30
   264e6:	bf44      	itt	mi
   264e8:	f853 1b04 	ldrmi.w	r1, [r3], #4
   264ec:	9165      	strmi	r1, [sp, #404]	; 0x194
   264ee:	0750      	lsls	r0, r2, #29
   264f0:	a864      	add	r0, sp, #400	; 0x190
   264f2:	bf44      	itt	mi
   264f4:	f853 1b04 	ldrmi.w	r1, [r3], #4
   264f8:	9166      	strmi	r1, [sp, #408]	; 0x198
   264fa:	0711      	lsls	r1, r2, #28
   264fc:	bf48      	it	mi
   264fe:	f853 2b04 	ldrmi.w	r2, [r3], #4
   26502:	63a3      	str	r3, [r4, #56]	; 0x38
   26504:	bf48      	it	mi
   26506:	9267      	strmi	r2, [sp, #412]	; 0x19c
   26508:	f000 faba 	bl	26a80 <__gnu_Unwind_Restore_WMMXC>
   2650c:	2000      	movs	r0, #0
   2650e:	e7cc      	b.n	264aa <_Unwind_VRS_Pop+0x1e>
   26510:	2b00      	cmp	r3, #0
   26512:	d1c9      	bne.n	264a8 <_Unwind_VRS_Pop+0x1c>
   26514:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   26516:	07d0      	lsls	r0, r2, #31
   26518:	b291      	uxth	r1, r2
   2651a:	bf44      	itt	mi
   2651c:	f853 2b04 	ldrmi.w	r2, [r3], #4
   26520:	6062      	strmi	r2, [r4, #4]
   26522:	078a      	lsls	r2, r1, #30
   26524:	bf44      	itt	mi
   26526:	f853 2b04 	ldrmi.w	r2, [r3], #4
   2652a:	60a2      	strmi	r2, [r4, #8]
   2652c:	0748      	lsls	r0, r1, #29
   2652e:	bf44      	itt	mi
   26530:	f853 2b04 	ldrmi.w	r2, [r3], #4
   26534:	60e2      	strmi	r2, [r4, #12]
   26536:	070a      	lsls	r2, r1, #28
   26538:	bf44      	itt	mi
   2653a:	f853 2b04 	ldrmi.w	r2, [r3], #4
   2653e:	6122      	strmi	r2, [r4, #16]
   26540:	06c8      	lsls	r0, r1, #27
   26542:	bf44      	itt	mi
   26544:	f853 2b04 	ldrmi.w	r2, [r3], #4
   26548:	6162      	strmi	r2, [r4, #20]
   2654a:	068a      	lsls	r2, r1, #26
   2654c:	bf44      	itt	mi
   2654e:	f853 2b04 	ldrmi.w	r2, [r3], #4
   26552:	61a2      	strmi	r2, [r4, #24]
   26554:	0648      	lsls	r0, r1, #25
   26556:	bf44      	itt	mi
   26558:	f853 2b04 	ldrmi.w	r2, [r3], #4
   2655c:	61e2      	strmi	r2, [r4, #28]
   2655e:	060a      	lsls	r2, r1, #24
   26560:	bf44      	itt	mi
   26562:	f853 2b04 	ldrmi.w	r2, [r3], #4
   26566:	6222      	strmi	r2, [r4, #32]
   26568:	05c8      	lsls	r0, r1, #23
   2656a:	bf44      	itt	mi
   2656c:	f853 2b04 	ldrmi.w	r2, [r3], #4
   26570:	6262      	strmi	r2, [r4, #36]	; 0x24
   26572:	058a      	lsls	r2, r1, #22
   26574:	bf44      	itt	mi
   26576:	f853 2b04 	ldrmi.w	r2, [r3], #4
   2657a:	62a2      	strmi	r2, [r4, #40]	; 0x28
   2657c:	0548      	lsls	r0, r1, #21
   2657e:	bf44      	itt	mi
   26580:	f853 2b04 	ldrmi.w	r2, [r3], #4
   26584:	62e2      	strmi	r2, [r4, #44]	; 0x2c
   26586:	050a      	lsls	r2, r1, #20
   26588:	bf44      	itt	mi
   2658a:	f853 2b04 	ldrmi.w	r2, [r3], #4
   2658e:	6322      	strmi	r2, [r4, #48]	; 0x30
   26590:	04c8      	lsls	r0, r1, #19
   26592:	bf44      	itt	mi
   26594:	f853 2b04 	ldrmi.w	r2, [r3], #4
   26598:	6362      	strmi	r2, [r4, #52]	; 0x34
   2659a:	f411 5000 	ands.w	r0, r1, #8192	; 0x2000
   2659e:	bf1c      	itt	ne
   265a0:	f853 2b04 	ldrne.w	r2, [r3], #4
   265a4:	63a2      	strne	r2, [r4, #56]	; 0x38
   265a6:	044a      	lsls	r2, r1, #17
   265a8:	bf44      	itt	mi
   265aa:	f853 2b04 	ldrmi.w	r2, [r3], #4
   265ae:	63e2      	strmi	r2, [r4, #60]	; 0x3c
   265b0:	040a      	lsls	r2, r1, #16
   265b2:	bf44      	itt	mi
   265b4:	f853 2b04 	ldrmi.w	r2, [r3], #4
   265b8:	6422      	strmi	r2, [r4, #64]	; 0x40
   265ba:	2800      	cmp	r0, #0
   265bc:	f040 80cf 	bne.w	2675e <_Unwind_VRS_Pop+0x2d2>
   265c0:	63a3      	str	r3, [r4, #56]	; 0x38
   265c2:	e772      	b.n	264aa <_Unwind_VRS_Pop+0x1e>
   265c4:	2001      	movs	r0, #1
   265c6:	e770      	b.n	264aa <_Unwind_VRS_Pop+0x1e>
   265c8:	1f59      	subs	r1, r3, #5
   265ca:	bf18      	it	ne
   265cc:	2101      	movne	r1, #1
   265ce:	2b01      	cmp	r3, #1
   265d0:	bf0c      	ite	eq
   265d2:	2000      	moveq	r0, #0
   265d4:	f001 0001 	andne.w	r0, r1, #1
   265d8:	2800      	cmp	r0, #0
   265da:	f47f af65 	bne.w	264a8 <_Unwind_VRS_Pop+0x1c>
   265de:	0c15      	lsrs	r5, r2, #16
   265e0:	b296      	uxth	r6, r2
   265e2:	1972      	adds	r2, r6, r5
   265e4:	2b01      	cmp	r3, #1
   265e6:	bf14      	ite	ne
   265e8:	2020      	movne	r0, #32
   265ea:	2010      	moveq	r0, #16
   265ec:	4290      	cmp	r0, r2
   265ee:	f4ff af5b 	bcc.w	264a8 <_Unwind_VRS_Pop+0x1c>
   265f2:	f1a3 0c01 	sub.w	ip, r3, #1
   265f6:	f1dc 0700 	rsbs	r7, ip, #0
   265fa:	eb47 070c 	adc.w	r7, r7, ip
   265fe:	2d0f      	cmp	r5, #15
   26600:	bf94      	ite	ls
   26602:	2000      	movls	r0, #0
   26604:	2001      	movhi	r0, #1
   26606:	4238      	tst	r0, r7
   26608:	f47f af4e 	bne.w	264a8 <_Unwind_VRS_Pop+0x1c>
   2660c:	46b0      	mov	r8, r6
   2660e:	b928      	cbnz	r0, 2661c <_Unwind_VRS_Pop+0x190>
   26610:	2a10      	cmp	r2, #16
   26612:	bf98      	it	ls
   26614:	4680      	movls	r8, r0
   26616:	d90a      	bls.n	2662e <_Unwind_VRS_Pop+0x1a2>
   26618:	f1a2 0810 	sub.w	r8, r2, #16
   2661c:	f1b8 0f00 	cmp.w	r8, #0
   26620:	bf0c      	ite	eq
   26622:	2100      	moveq	r1, #0
   26624:	f001 0101 	andne.w	r1, r1, #1
   26628:	2900      	cmp	r1, #0
   2662a:	f47f af3d 	bne.w	264a8 <_Unwind_VRS_Pop+0x1c>
   2662e:	2d0f      	cmp	r5, #15
   26630:	d80f      	bhi.n	26652 <_Unwind_VRS_Pop+0x1c6>
   26632:	6822      	ldr	r2, [r4, #0]
   26634:	07d0      	lsls	r0, r2, #31
   26636:	d50c      	bpl.n	26652 <_Unwind_VRS_Pop+0x1c6>
   26638:	2b05      	cmp	r3, #5
   2663a:	f022 0101 	bic.w	r1, r2, #1
   2663e:	4620      	mov	r0, r4
   26640:	6021      	str	r1, [r4, #0]
   26642:	f000 8100 	beq.w	26846 <_Unwind_VRS_Pop+0x3ba>
   26646:	f022 0103 	bic.w	r1, r2, #3
   2664a:	f840 1b48 	str.w	r1, [r0], #72
   2664e:	f000 f9bf 	bl	269d0 <__gnu_Unwind_Save_VFP>
   26652:	f1b8 0f00 	cmp.w	r8, #0
   26656:	d003      	beq.n	26660 <_Unwind_VRS_Pop+0x1d4>
   26658:	6823      	ldr	r3, [r4, #0]
   2665a:	0759      	lsls	r1, r3, #29
   2665c:	f100 80cb 	bmi.w	267f6 <_Unwind_VRS_Pop+0x36a>
   26660:	2f00      	cmp	r7, #0
   26662:	f040 80e6 	bne.w	26832 <_Unwind_VRS_Pop+0x3a6>
   26666:	2d0f      	cmp	r5, #15
   26668:	f240 80c1 	bls.w	267ee <_Unwind_VRS_Pop+0x362>
   2666c:	f1b8 0f00 	cmp.w	r8, #0
   26670:	f040 80d9 	bne.w	26826 <_Unwind_VRS_Pop+0x39a>
   26674:	f8d4 a038 	ldr.w	sl, [r4, #56]	; 0x38
   26678:	2e00      	cmp	r6, #0
   2667a:	46d1      	mov	r9, sl
   2667c:	dd29      	ble.n	266d2 <_Unwind_VRS_Pop+0x246>
   2667e:	4650      	mov	r0, sl
   26680:	ea4f 0946 	mov.w	r9, r6, lsl #1
   26684:	ae02      	add	r6, sp, #8
   26686:	f109 33ff 	add.w	r3, r9, #4294967295
   2668a:	f850 cb04 	ldr.w	ip, [r0], #4
   2668e:	eb06 01c5 	add.w	r1, r6, r5, lsl #3
   26692:	f003 0201 	and.w	r2, r3, #1
   26696:	f1a9 0602 	sub.w	r6, r9, #2
   2669a:	f841 cb04 	str.w	ip, [r1], #4
   2669e:	b1b3      	cbz	r3, 266ce <_Unwind_VRS_Pop+0x242>
   266a0:	b132      	cbz	r2, 266b0 <_Unwind_VRS_Pop+0x224>
   266a2:	f850 2b04 	ldr.w	r2, [r0], #4
   266a6:	3e01      	subs	r6, #1
   266a8:	1c73      	adds	r3, r6, #1
   266aa:	f841 2b04 	str.w	r2, [r1], #4
   266ae:	d00e      	beq.n	266ce <_Unwind_VRS_Pop+0x242>
   266b0:	4602      	mov	r2, r0
   266b2:	460b      	mov	r3, r1
   266b4:	3e02      	subs	r6, #2
   266b6:	f852 cb04 	ldr.w	ip, [r2], #4
   266ba:	f843 cb04 	str.w	ip, [r3], #4
   266be:	f8d0 c004 	ldr.w	ip, [r0, #4]
   266c2:	1d10      	adds	r0, r2, #4
   266c4:	f8c1 c004 	str.w	ip, [r1, #4]
   266c8:	1d19      	adds	r1, r3, #4
   266ca:	1c72      	adds	r2, r6, #1
   266cc:	d1f0      	bne.n	266b0 <_Unwind_VRS_Pop+0x224>
   266ce:	eb0a 0989 	add.w	r9, sl, r9, lsl #2
   266d2:	f1b8 0f00 	cmp.w	r8, #0
   266d6:	d02f      	beq.n	26738 <_Unwind_VRS_Pop+0x2ac>
   266d8:	2d10      	cmp	r5, #16
   266da:	bf2c      	ite	cs
   266dc:	462e      	movcs	r6, r5
   266de:	2610      	movcc	r6, #16
   266e0:	4648      	mov	r0, r9
   266e2:	aa68      	add	r2, sp, #416	; 0x1a0
   266e4:	ea4f 0a48 	mov.w	sl, r8, lsl #1
   266e8:	eb02 01c6 	add.w	r1, r2, r6, lsl #3
   266ec:	f850 cb04 	ldr.w	ip, [r0], #4
   266f0:	f5a1 71c8 	sub.w	r1, r1, #400	; 0x190
   266f4:	f10a 33ff 	add.w	r3, sl, #4294967295
   266f8:	f003 0201 	and.w	r2, r3, #1
   266fc:	f1aa 0602 	sub.w	r6, sl, #2
   26700:	f841 cb04 	str.w	ip, [r1], #4
   26704:	b1b3      	cbz	r3, 26734 <_Unwind_VRS_Pop+0x2a8>
   26706:	b132      	cbz	r2, 26716 <_Unwind_VRS_Pop+0x28a>
   26708:	f850 3b04 	ldr.w	r3, [r0], #4
   2670c:	3e01      	subs	r6, #1
   2670e:	1c72      	adds	r2, r6, #1
   26710:	f841 3b04 	str.w	r3, [r1], #4
   26714:	d00e      	beq.n	26734 <_Unwind_VRS_Pop+0x2a8>
   26716:	4602      	mov	r2, r0
   26718:	460b      	mov	r3, r1
   2671a:	3e02      	subs	r6, #2
   2671c:	f852 cb04 	ldr.w	ip, [r2], #4
   26720:	f843 cb04 	str.w	ip, [r3], #4
   26724:	f8d0 c004 	ldr.w	ip, [r0, #4]
   26728:	1d10      	adds	r0, r2, #4
   2672a:	f8c1 c004 	str.w	ip, [r1, #4]
   2672e:	1d19      	adds	r1, r3, #4
   26730:	1c73      	adds	r3, r6, #1
   26732:	d1f0      	bne.n	26716 <_Unwind_VRS_Pop+0x28a>
   26734:	eb09 098a 	add.w	r9, r9, sl, lsl #2
   26738:	2f00      	cmp	r7, #0
   2673a:	d16c      	bne.n	26816 <_Unwind_VRS_Pop+0x38a>
   2673c:	2d0f      	cmp	r5, #15
   2673e:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
   26742:	d802      	bhi.n	2674a <_Unwind_VRS_Pop+0x2be>
   26744:	a802      	add	r0, sp, #8
   26746:	f000 f947 	bl	269d8 <__gnu_Unwind_Restore_VFP_D>
   2674a:	4640      	mov	r0, r8
   2674c:	f1b8 0f00 	cmp.w	r8, #0
   26750:	f43f aeab 	beq.w	264aa <_Unwind_VRS_Pop+0x1e>
   26754:	a824      	add	r0, sp, #144	; 0x90
   26756:	f000 f947 	bl	269e8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
   2675a:	2000      	movs	r0, #0
   2675c:	e6a5      	b.n	264aa <_Unwind_VRS_Pop+0x1e>
   2675e:	2000      	movs	r0, #0
   26760:	e6a3      	b.n	264aa <_Unwind_VRS_Pop+0x1e>
   26762:	0c16      	lsrs	r6, r2, #16
   26764:	b295      	uxth	r5, r2
   26766:	19a8      	adds	r0, r5, r6
   26768:	2810      	cmp	r0, #16
   2676a:	f63f ae9d 	bhi.w	264a8 <_Unwind_VRS_Pop+0x1c>
   2676e:	6823      	ldr	r3, [r4, #0]
   26770:	0719      	lsls	r1, r3, #28
   26772:	d448      	bmi.n	26806 <_Unwind_VRS_Pop+0x37a>
   26774:	a844      	add	r0, sp, #272	; 0x110
   26776:	f000 f961 	bl	26a3c <__gnu_Unwind_Save_WMMXD>
   2677a:	6ba7      	ldr	r7, [r4, #56]	; 0x38
   2677c:	ea4f 0e45 	mov.w	lr, r5, lsl #1
   26780:	463b      	mov	r3, r7
   26782:	b325      	cbz	r5, 267ce <_Unwind_VRS_Pop+0x342>
   26784:	ad44      	add	r5, sp, #272	; 0x110
   26786:	f853 1b04 	ldr.w	r1, [r3], #4
   2678a:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
   2678e:	f10e 32ff 	add.w	r2, lr, #4294967295
   26792:	f002 0501 	and.w	r5, r2, #1
   26796:	f1ae 0002 	sub.w	r0, lr, #2
   2679a:	f846 1b04 	str.w	r1, [r6], #4
   2679e:	b1a2      	cbz	r2, 267ca <_Unwind_VRS_Pop+0x33e>
   267a0:	b135      	cbz	r5, 267b0 <_Unwind_VRS_Pop+0x324>
   267a2:	f853 1b04 	ldr.w	r1, [r3], #4
   267a6:	3801      	subs	r0, #1
   267a8:	1c42      	adds	r2, r0, #1
   267aa:	f846 1b04 	str.w	r1, [r6], #4
   267ae:	d00c      	beq.n	267ca <_Unwind_VRS_Pop+0x33e>
   267b0:	4619      	mov	r1, r3
   267b2:	4632      	mov	r2, r6
   267b4:	3802      	subs	r0, #2
   267b6:	f851 5b04 	ldr.w	r5, [r1], #4
   267ba:	f842 5b04 	str.w	r5, [r2], #4
   267be:	685d      	ldr	r5, [r3, #4]
   267c0:	1d0b      	adds	r3, r1, #4
   267c2:	6075      	str	r5, [r6, #4]
   267c4:	1d16      	adds	r6, r2, #4
   267c6:	1c42      	adds	r2, r0, #1
   267c8:	d1f2      	bne.n	267b0 <_Unwind_VRS_Pop+0x324>
   267ca:	eb07 038e 	add.w	r3, r7, lr, lsl #2
   267ce:	a844      	add	r0, sp, #272	; 0x110
   267d0:	63a3      	str	r3, [r4, #56]	; 0x38
   267d2:	f000 f911 	bl	269f8 <__gnu_Unwind_Restore_WMMXD>
   267d6:	2000      	movs	r0, #0
   267d8:	e667      	b.n	264aa <_Unwind_VRS_Pop+0x1e>
   267da:	f023 0110 	bic.w	r1, r3, #16
   267de:	f504 700c 	add.w	r0, r4, #560	; 0x230
   267e2:	6021      	str	r1, [r4, #0]
   267e4:	9201      	str	r2, [sp, #4]
   267e6:	f000 f955 	bl	26a94 <__gnu_Unwind_Save_WMMXC>
   267ea:	9a01      	ldr	r2, [sp, #4]
   267ec:	e66f      	b.n	264ce <_Unwind_VRS_Pop+0x42>
   267ee:	a802      	add	r0, sp, #8
   267f0:	f000 f8f6 	bl	269e0 <__gnu_Unwind_Save_VFP_D>
   267f4:	e73a      	b.n	2666c <_Unwind_VRS_Pop+0x1e0>
   267f6:	4620      	mov	r0, r4
   267f8:	f023 0204 	bic.w	r2, r3, #4
   267fc:	f840 2bd0 	str.w	r2, [r0], #208
   26800:	f000 f8f6 	bl	269f0 <__gnu_Unwind_Save_VFP_D_16_to_31>
   26804:	e72c      	b.n	26660 <_Unwind_VRS_Pop+0x1d4>
   26806:	f023 0708 	bic.w	r7, r3, #8
   2680a:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
   2680e:	6027      	str	r7, [r4, #0]
   26810:	f000 f914 	bl	26a3c <__gnu_Unwind_Save_WMMXD>
   26814:	e7ae      	b.n	26774 <_Unwind_VRS_Pop+0x2e8>
   26816:	f109 0104 	add.w	r1, r9, #4
   2681a:	a802      	add	r0, sp, #8
   2681c:	63a1      	str	r1, [r4, #56]	; 0x38
   2681e:	f000 f8d3 	bl	269c8 <__gnu_Unwind_Restore_VFP>
   26822:	2000      	movs	r0, #0
   26824:	e641      	b.n	264aa <_Unwind_VRS_Pop+0x1e>
   26826:	a824      	add	r0, sp, #144	; 0x90
   26828:	f1c5 0610 	rsb	r6, r5, #16
   2682c:	f000 f8e0 	bl	269f0 <__gnu_Unwind_Save_VFP_D_16_to_31>
   26830:	e720      	b.n	26674 <_Unwind_VRS_Pop+0x1e8>
   26832:	a802      	add	r0, sp, #8
   26834:	f000 f8cc 	bl	269d0 <__gnu_Unwind_Save_VFP>
   26838:	f1b8 0f00 	cmp.w	r8, #0
   2683c:	f43f af1a 	beq.w	26674 <_Unwind_VRS_Pop+0x1e8>
   26840:	f1c5 0610 	rsb	r6, r5, #16
   26844:	e716      	b.n	26674 <_Unwind_VRS_Pop+0x1e8>
   26846:	f041 0302 	orr.w	r3, r1, #2
   2684a:	f840 3b48 	str.w	r3, [r0], #72
   2684e:	f000 f8c7 	bl	269e0 <__gnu_Unwind_Save_VFP_D>
   26852:	e6fe      	b.n	26652 <_Unwind_VRS_Pop+0x1c6>

00026854 <_Unwind_GetCFA>:
   26854:	6c40      	ldr	r0, [r0, #68]	; 0x44
   26856:	4770      	bx	lr

00026858 <__gnu_Unwind_RaiseException>:
   26858:	b5f0      	push	{r4, r5, r6, r7, lr}
   2685a:	4604      	mov	r4, r0
   2685c:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
   2685e:	1d0f      	adds	r7, r1, #4
   26860:	460d      	mov	r5, r1
   26862:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
   26866:	ae01      	add	r6, sp, #4
   26868:	6408      	str	r0, [r1, #64]	; 0x40
   2686a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   2686c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   2686e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   26870:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   26872:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   26874:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   26876:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   2687a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   2687e:	f04f 33ff 	mov.w	r3, #4294967295
   26882:	9300      	str	r3, [sp, #0]
   26884:	4620      	mov	r0, r4
   26886:	9910      	ldr	r1, [sp, #64]	; 0x40
   26888:	f7ff fae4 	bl	25e54 <get_eit_entry>
   2688c:	b958      	cbnz	r0, 268a6 <__gnu_Unwind_RaiseException+0x4e>
   2688e:	6926      	ldr	r6, [r4, #16]
   26890:	4621      	mov	r1, r4
   26892:	466a      	mov	r2, sp
   26894:	47b0      	blx	r6
   26896:	2808      	cmp	r0, #8
   26898:	4606      	mov	r6, r0
   2689a:	d0f3      	beq.n	26884 <__gnu_Unwind_RaiseException+0x2c>
   2689c:	4668      	mov	r0, sp
   2689e:	f7ff fb3f 	bl	25f20 <restore_non_core_regs>
   268a2:	2e06      	cmp	r6, #6
   268a4:	d003      	beq.n	268ae <__gnu_Unwind_RaiseException+0x56>
   268a6:	2009      	movs	r0, #9
   268a8:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
   268ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   268ae:	4620      	mov	r0, r4
   268b0:	4629      	mov	r1, r5
   268b2:	f7ff fbd7 	bl	26064 <unwind_phase2>
   268b6:	bf00      	nop

000268b8 <__gnu_Unwind_ForcedUnwind>:
   268b8:	b430      	push	{r4, r5}
   268ba:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   268bc:	60c1      	str	r1, [r0, #12]
   268be:	4619      	mov	r1, r3
   268c0:	6182      	str	r2, [r0, #24]
   268c2:	2200      	movs	r2, #0
   268c4:	641d      	str	r5, [r3, #64]	; 0x40
   268c6:	bc30      	pop	{r4, r5}
   268c8:	f7ff bb56 	b.w	25f78 <unwind_phase2_forced>

000268cc <__gnu_Unwind_Resume>:
   268cc:	6942      	ldr	r2, [r0, #20]
   268ce:	b538      	push	{r3, r4, r5, lr}
   268d0:	4604      	mov	r4, r0
   268d2:	68c3      	ldr	r3, [r0, #12]
   268d4:	460d      	mov	r5, r1
   268d6:	640a      	str	r2, [r1, #64]	; 0x40
   268d8:	b123      	cbz	r3, 268e4 <__gnu_Unwind_Resume+0x18>
   268da:	2201      	movs	r2, #1
   268dc:	f7ff fb4c 	bl	25f78 <unwind_phase2_forced>
   268e0:	f7f9 f890 	bl	1fa04 <abort>
   268e4:	6903      	ldr	r3, [r0, #16]
   268e6:	4621      	mov	r1, r4
   268e8:	2002      	movs	r0, #2
   268ea:	462a      	mov	r2, r5
   268ec:	4798      	blx	r3
   268ee:	2807      	cmp	r0, #7
   268f0:	d003      	beq.n	268fa <__gnu_Unwind_Resume+0x2e>
   268f2:	2808      	cmp	r0, #8
   268f4:	d004      	beq.n	26900 <__gnu_Unwind_Resume+0x34>
   268f6:	f7f9 f885 	bl	1fa04 <abort>
   268fa:	1d28      	adds	r0, r5, #4
   268fc:	f000 f858 	bl	269b0 <__restore_core_regs>
   26900:	4620      	mov	r0, r4
   26902:	4629      	mov	r1, r5
   26904:	f7ff fbae 	bl	26064 <unwind_phase2>

00026908 <__gnu_Unwind_Resume_or_Rethrow>:
   26908:	68c2      	ldr	r2, [r0, #12]
   2690a:	b410      	push	{r4}
   2690c:	b12a      	cbz	r2, 2691a <__gnu_Unwind_Resume_or_Rethrow+0x12>
   2690e:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
   26910:	2200      	movs	r2, #0
   26912:	640c      	str	r4, [r1, #64]	; 0x40
   26914:	bc10      	pop	{r4}
   26916:	f7ff bb2f 	b.w	25f78 <unwind_phase2_forced>
   2691a:	bc10      	pop	{r4}
   2691c:	f7ff bf9c 	b.w	26858 <__gnu_Unwind_RaiseException>

00026920 <_Unwind_Complete>:
   26920:	4770      	bx	lr
   26922:	bf00      	nop

00026924 <_Unwind_DeleteException>:
   26924:	b508      	push	{r3, lr}
   26926:	4601      	mov	r1, r0
   26928:	6883      	ldr	r3, [r0, #8]
   2692a:	b10b      	cbz	r3, 26930 <_Unwind_DeleteException+0xc>
   2692c:	2001      	movs	r0, #1
   2692e:	4798      	blx	r3
   26930:	bd08      	pop	{r3, pc}
   26932:	bf00      	nop

00026934 <__gnu_Unwind_Backtrace>:
   26934:	b5f0      	push	{r4, r5, r6, r7, lr}
   26936:	4605      	mov	r5, r0
   26938:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
   2693a:	1d17      	adds	r7, r2, #4
   2693c:	460c      	mov	r4, r1
   2693e:	f5ad 7d27 	sub.w	sp, sp, #668	; 0x29c
   26942:	ae01      	add	r6, sp, #4
   26944:	6410      	str	r0, [r2, #64]	; 0x40
   26946:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   26948:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   2694a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   2694c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   2694e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   26950:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   26952:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   26956:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   2695a:	f04f 33ff 	mov.w	r3, #4294967295
   2695e:	9300      	str	r3, [sp, #0]
   26960:	9910      	ldr	r1, [sp, #64]	; 0x40
   26962:	a890      	add	r0, sp, #576	; 0x240
   26964:	f7ff fa76 	bl	25e54 <get_eit_entry>
   26968:	aa90      	add	r2, sp, #576	; 0x240
   2696a:	210c      	movs	r1, #12
   2696c:	2800      	cmp	r0, #0
   2696e:	d11d      	bne.n	269ac <__gnu_Unwind_Backtrace+0x78>
   26970:	4668      	mov	r0, sp
   26972:	f7ff fbcf 	bl	26114 <_Unwind_SetGR>
   26976:	4621      	mov	r1, r4
   26978:	4668      	mov	r0, sp
   2697a:	47a8      	blx	r5
   2697c:	a990      	add	r1, sp, #576	; 0x240
   2697e:	466a      	mov	r2, sp
   26980:	b9a0      	cbnz	r0, 269ac <__gnu_Unwind_Backtrace+0x78>
   26982:	2008      	movs	r0, #8
   26984:	9b94      	ldr	r3, [sp, #592]	; 0x250
   26986:	4798      	blx	r3
   26988:	1f41      	subs	r1, r0, #5
   2698a:	4606      	mov	r6, r0
   2698c:	bf18      	it	ne
   2698e:	2101      	movne	r1, #1
   26990:	2809      	cmp	r0, #9
   26992:	bf0c      	ite	eq
   26994:	2100      	moveq	r1, #0
   26996:	f001 0101 	andne.w	r1, r1, #1
   2699a:	2900      	cmp	r1, #0
   2699c:	d1e0      	bne.n	26960 <__gnu_Unwind_Backtrace+0x2c>
   2699e:	4668      	mov	r0, sp
   269a0:	f7ff fabe 	bl	25f20 <restore_non_core_regs>
   269a4:	4630      	mov	r0, r6
   269a6:	f50d 7d27 	add.w	sp, sp, #668	; 0x29c
   269aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   269ac:	2609      	movs	r6, #9
   269ae:	e7f6      	b.n	2699e <__gnu_Unwind_Backtrace+0x6a>

000269b0 <__restore_core_regs>:
   269b0:	f100 0134 	add.w	r1, r0, #52	; 0x34
   269b4:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
   269b8:	469c      	mov	ip, r3
   269ba:	46a6      	mov	lr, r4
   269bc:	f84c 5d04 	str.w	r5, [ip, #-4]!
   269c0:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
   269c4:	46e5      	mov	sp, ip
   269c6:	bd00      	pop	{pc}

000269c8 <__gnu_Unwind_Restore_VFP>:
   269c8:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
   269cc:	4770      	bx	lr
   269ce:	bf00      	nop

000269d0 <__gnu_Unwind_Save_VFP>:
   269d0:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
   269d4:	4770      	bx	lr
   269d6:	bf00      	nop

000269d8 <__gnu_Unwind_Restore_VFP_D>:
   269d8:	ec90 0b20 	vldmia	r0, {d0-d15}
   269dc:	4770      	bx	lr
   269de:	bf00      	nop

000269e0 <__gnu_Unwind_Save_VFP_D>:
   269e0:	ec80 0b20 	vstmia	r0, {d0-d15}
   269e4:	4770      	bx	lr
   269e6:	bf00      	nop

000269e8 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
   269e8:	ecd0 0b20 	vldmia	r0, {d16-d31}
   269ec:	4770      	bx	lr
   269ee:	bf00      	nop

000269f0 <__gnu_Unwind_Save_VFP_D_16_to_31>:
   269f0:	ecc0 0b20 	vstmia	r0, {d16-d31}
   269f4:	4770      	bx	lr
   269f6:	bf00      	nop

000269f8 <__gnu_Unwind_Restore_WMMXD>:
   269f8:	ecf0 0102 	ldfe	f0, [r0], #8
   269fc:	ecf0 1102 	ldfe	f1, [r0], #8
   26a00:	ecf0 2102 	ldfe	f2, [r0], #8
   26a04:	ecf0 3102 	ldfe	f3, [r0], #8
   26a08:	ecf0 4102 	ldfe	f4, [r0], #8
   26a0c:	ecf0 5102 	ldfe	f5, [r0], #8
   26a10:	ecf0 6102 	ldfe	f6, [r0], #8
   26a14:	ecf0 7102 	ldfe	f7, [r0], #8
   26a18:	ecf0 8102 	ldfp	f0, [r0], #8
   26a1c:	ecf0 9102 	ldfp	f1, [r0], #8
   26a20:	ecf0 a102 	ldfp	f2, [r0], #8
   26a24:	ecf0 b102 	ldfp	f3, [r0], #8
   26a28:	ecf0 c102 	ldfp	f4, [r0], #8
   26a2c:	ecf0 d102 	ldfp	f5, [r0], #8
   26a30:	ecf0 e102 	ldfp	f6, [r0], #8
   26a34:	ecf0 f102 	ldfp	f7, [r0], #8
   26a38:	4770      	bx	lr
   26a3a:	bf00      	nop

00026a3c <__gnu_Unwind_Save_WMMXD>:
   26a3c:	ece0 0102 	stfe	f0, [r0], #8
   26a40:	ece0 1102 	stfe	f1, [r0], #8
   26a44:	ece0 2102 	stfe	f2, [r0], #8
   26a48:	ece0 3102 	stfe	f3, [r0], #8
   26a4c:	ece0 4102 	stfe	f4, [r0], #8
   26a50:	ece0 5102 	stfe	f5, [r0], #8
   26a54:	ece0 6102 	stfe	f6, [r0], #8
   26a58:	ece0 7102 	stfe	f7, [r0], #8
   26a5c:	ece0 8102 	stfp	f0, [r0], #8
   26a60:	ece0 9102 	stfp	f1, [r0], #8
   26a64:	ece0 a102 	stfp	f2, [r0], #8
   26a68:	ece0 b102 	stfp	f3, [r0], #8
   26a6c:	ece0 c102 	stfp	f4, [r0], #8
   26a70:	ece0 d102 	stfp	f5, [r0], #8
   26a74:	ece0 e102 	stfp	f6, [r0], #8
   26a78:	ece0 f102 	stfp	f7, [r0], #8
   26a7c:	4770      	bx	lr
   26a7e:	bf00      	nop

00026a80 <__gnu_Unwind_Restore_WMMXC>:
   26a80:	fcb0 8101 	ldc2	1, cr8, [r0], #4
   26a84:	fcb0 9101 	ldc2	1, cr9, [r0], #4
   26a88:	fcb0 a101 	ldc2	1, cr10, [r0], #4
   26a8c:	fcb0 b101 	ldc2	1, cr11, [r0], #4
   26a90:	4770      	bx	lr
   26a92:	bf00      	nop

00026a94 <__gnu_Unwind_Save_WMMXC>:
   26a94:	fca0 8101 	stc2	1, cr8, [r0], #4
   26a98:	fca0 9101 	stc2	1, cr9, [r0], #4
   26a9c:	fca0 a101 	stc2	1, cr10, [r0], #4
   26aa0:	fca0 b101 	stc2	1, cr11, [r0], #4
   26aa4:	4770      	bx	lr
   26aa6:	bf00      	nop

00026aa8 <_Unwind_RaiseException>:
   26aa8:	46ec      	mov	ip, sp
   26aaa:	b500      	push	{lr}
   26aac:	e92d 5000 	stmdb	sp!, {ip, lr}
   26ab0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   26ab4:	f04f 0300 	mov.w	r3, #0
   26ab8:	e92d 000c 	stmdb	sp!, {r2, r3}
   26abc:	a901      	add	r1, sp, #4
   26abe:	f7ff fecb 	bl	26858 <__gnu_Unwind_RaiseException>
   26ac2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   26ac6:	b012      	add	sp, #72	; 0x48
   26ac8:	4770      	bx	lr
   26aca:	bf00      	nop

00026acc <_Unwind_Resume>:
   26acc:	46ec      	mov	ip, sp
   26ace:	b500      	push	{lr}
   26ad0:	e92d 5000 	stmdb	sp!, {ip, lr}
   26ad4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   26ad8:	f04f 0300 	mov.w	r3, #0
   26adc:	e92d 000c 	stmdb	sp!, {r2, r3}
   26ae0:	a901      	add	r1, sp, #4
   26ae2:	f7ff fef3 	bl	268cc <__gnu_Unwind_Resume>
   26ae6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   26aea:	b012      	add	sp, #72	; 0x48
   26aec:	4770      	bx	lr
   26aee:	bf00      	nop

00026af0 <_Unwind_Resume_or_Rethrow>:
   26af0:	46ec      	mov	ip, sp
   26af2:	b500      	push	{lr}
   26af4:	e92d 5000 	stmdb	sp!, {ip, lr}
   26af8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   26afc:	f04f 0300 	mov.w	r3, #0
   26b00:	e92d 000c 	stmdb	sp!, {r2, r3}
   26b04:	a901      	add	r1, sp, #4
   26b06:	f7ff feff 	bl	26908 <__gnu_Unwind_Resume_or_Rethrow>
   26b0a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   26b0e:	b012      	add	sp, #72	; 0x48
   26b10:	4770      	bx	lr
   26b12:	bf00      	nop

00026b14 <_Unwind_ForcedUnwind>:
   26b14:	46ec      	mov	ip, sp
   26b16:	b500      	push	{lr}
   26b18:	e92d 5000 	stmdb	sp!, {ip, lr}
   26b1c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   26b20:	f04f 0300 	mov.w	r3, #0
   26b24:	e92d 000c 	stmdb	sp!, {r2, r3}
   26b28:	ab01      	add	r3, sp, #4
   26b2a:	f7ff fec5 	bl	268b8 <__gnu_Unwind_ForcedUnwind>
   26b2e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   26b32:	b012      	add	sp, #72	; 0x48
   26b34:	4770      	bx	lr
   26b36:	bf00      	nop

00026b38 <_Unwind_Backtrace>:
   26b38:	46ec      	mov	ip, sp
   26b3a:	b500      	push	{lr}
   26b3c:	e92d 5000 	stmdb	sp!, {ip, lr}
   26b40:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   26b44:	f04f 0300 	mov.w	r3, #0
   26b48:	e92d 000c 	stmdb	sp!, {r2, r3}
   26b4c:	aa01      	add	r2, sp, #4
   26b4e:	f7ff fef1 	bl	26934 <__gnu_Unwind_Backtrace>
   26b52:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   26b56:	b012      	add	sp, #72	; 0x48
   26b58:	4770      	bx	lr
   26b5a:	bf00      	nop

00026b5c <next_unwind_byte>:
   26b5c:	7a02      	ldrb	r2, [r0, #8]
   26b5e:	4603      	mov	r3, r0
   26b60:	b91a      	cbnz	r2, 26b6a <next_unwind_byte+0xe>
   26b62:	7a42      	ldrb	r2, [r0, #9]
   26b64:	b942      	cbnz	r2, 26b78 <next_unwind_byte+0x1c>
   26b66:	20b0      	movs	r0, #176	; 0xb0
   26b68:	4770      	bx	lr
   26b6a:	6800      	ldr	r0, [r0, #0]
   26b6c:	1e51      	subs	r1, r2, #1
   26b6e:	7219      	strb	r1, [r3, #8]
   26b70:	0202      	lsls	r2, r0, #8
   26b72:	0e00      	lsrs	r0, r0, #24
   26b74:	601a      	str	r2, [r3, #0]
   26b76:	4770      	bx	lr
   26b78:	6841      	ldr	r1, [r0, #4]
   26b7a:	1e50      	subs	r0, r2, #1
   26b7c:	7258      	strb	r0, [r3, #9]
   26b7e:	2203      	movs	r2, #3
   26b80:	f851 0b04 	ldr.w	r0, [r1], #4
   26b84:	721a      	strb	r2, [r3, #8]
   26b86:	6059      	str	r1, [r3, #4]
   26b88:	0202      	lsls	r2, r0, #8
   26b8a:	0e00      	lsrs	r0, r0, #24
   26b8c:	601a      	str	r2, [r3, #0]
   26b8e:	4770      	bx	lr

00026b90 <_Unwind_GetGR.constprop.0>:
   26b90:	b510      	push	{r4, lr}
   26b92:	2100      	movs	r1, #0
   26b94:	b084      	sub	sp, #16
   26b96:	220c      	movs	r2, #12
   26b98:	460b      	mov	r3, r1
   26b9a:	eb0d 0402 	add.w	r4, sp, r2
   26b9e:	9400      	str	r4, [sp, #0]
   26ba0:	f7ff fa78 	bl	26094 <_Unwind_VRS_Get>
   26ba4:	9803      	ldr	r0, [sp, #12]
   26ba6:	b004      	add	sp, #16
   26ba8:	bd10      	pop	{r4, pc}
   26baa:	bf00      	nop

00026bac <unwind_UCB_from_context>:
   26bac:	f7ff bff0 	b.w	26b90 <_Unwind_GetGR.constprop.0>

00026bb0 <__gnu_unwind_execute>:
   26bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26bb4:	4606      	mov	r6, r0
   26bb6:	b084      	sub	sp, #16
   26bb8:	460d      	mov	r5, r1
   26bba:	f04f 0900 	mov.w	r9, #0
   26bbe:	f44f 6a7f 	mov.w	sl, #4080	; 0xff0
   26bc2:	4628      	mov	r0, r5
   26bc4:	f7ff ffca 	bl	26b5c <next_unwind_byte>
   26bc8:	28b0      	cmp	r0, #176	; 0xb0
   26bca:	4604      	mov	r4, r0
   26bcc:	f000 80c7 	beq.w	26d5e <__gnu_unwind_execute+0x1ae>
   26bd0:	f010 0180 	ands.w	r1, r0, #128	; 0x80
   26bd4:	d021      	beq.n	26c1a <__gnu_unwind_execute+0x6a>
   26bd6:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   26bda:	2b80      	cmp	r3, #128	; 0x80
   26bdc:	f000 8083 	beq.w	26ce6 <__gnu_unwind_execute+0x136>
   26be0:	2b90      	cmp	r3, #144	; 0x90
   26be2:	d036      	beq.n	26c52 <__gnu_unwind_execute+0xa2>
   26be4:	2ba0      	cmp	r3, #160	; 0xa0
   26be6:	d051      	beq.n	26c8c <__gnu_unwind_execute+0xdc>
   26be8:	2bb0      	cmp	r3, #176	; 0xb0
   26bea:	d062      	beq.n	26cb2 <__gnu_unwind_execute+0x102>
   26bec:	2bc0      	cmp	r3, #192	; 0xc0
   26bee:	f000 8092 	beq.w	26d16 <__gnu_unwind_execute+0x166>
   26bf2:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
   26bf6:	29d0      	cmp	r1, #208	; 0xd0
   26bf8:	d10b      	bne.n	26c12 <__gnu_unwind_execute+0x62>
   26bfa:	f000 0407 	and.w	r4, r0, #7
   26bfe:	2101      	movs	r1, #1
   26c00:	1c62      	adds	r2, r4, #1
   26c02:	4630      	mov	r0, r6
   26c04:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   26c08:	2305      	movs	r3, #5
   26c0a:	f7ff fc3f 	bl	2648c <_Unwind_VRS_Pop>
   26c0e:	2800      	cmp	r0, #0
   26c10:	d0d7      	beq.n	26bc2 <__gnu_unwind_execute+0x12>
   26c12:	2009      	movs	r0, #9
   26c14:	b004      	add	sp, #16
   26c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26c1a:	0087      	lsls	r7, r0, #2
   26c1c:	220d      	movs	r2, #13
   26c1e:	460b      	mov	r3, r1
   26c20:	4630      	mov	r0, r6
   26c22:	fa5f f887 	uxtb.w	r8, r7
   26c26:	af03      	add	r7, sp, #12
   26c28:	9700      	str	r7, [sp, #0]
   26c2a:	f7ff fa33 	bl	26094 <_Unwind_VRS_Get>
   26c2e:	9b03      	ldr	r3, [sp, #12]
   26c30:	0664      	lsls	r4, r4, #25
   26c32:	f108 0804 	add.w	r8, r8, #4
   26c36:	4630      	mov	r0, r6
   26c38:	bf4c      	ite	mi
   26c3a:	ebc8 0303 	rsbmi	r3, r8, r3
   26c3e:	4443      	addpl	r3, r8
   26c40:	2100      	movs	r1, #0
   26c42:	9303      	str	r3, [sp, #12]
   26c44:	220d      	movs	r2, #13
   26c46:	460b      	mov	r3, r1
   26c48:	ac03      	add	r4, sp, #12
   26c4a:	9400      	str	r4, [sp, #0]
   26c4c:	f7ff fa48 	bl	260e0 <_Unwind_VRS_Set>
   26c50:	e7b7      	b.n	26bc2 <__gnu_unwind_execute+0x12>
   26c52:	f000 020f 	and.w	r2, r0, #15
   26c56:	f1a2 000d 	sub.w	r0, r2, #13
   26c5a:	4241      	negs	r1, r0
   26c5c:	eb41 0400 	adc.w	r4, r1, r0
   26c60:	2a0f      	cmp	r2, #15
   26c62:	bf08      	it	eq
   26c64:	f044 0401 	orreq.w	r4, r4, #1
   26c68:	2c00      	cmp	r4, #0
   26c6a:	d1d2      	bne.n	26c12 <__gnu_unwind_execute+0x62>
   26c6c:	4621      	mov	r1, r4
   26c6e:	4623      	mov	r3, r4
   26c70:	4630      	mov	r0, r6
   26c72:	af03      	add	r7, sp, #12
   26c74:	9700      	str	r7, [sp, #0]
   26c76:	f7ff fa0d 	bl	26094 <_Unwind_VRS_Get>
   26c7a:	4621      	mov	r1, r4
   26c7c:	4623      	mov	r3, r4
   26c7e:	4630      	mov	r0, r6
   26c80:	220d      	movs	r2, #13
   26c82:	ac03      	add	r4, sp, #12
   26c84:	9400      	str	r4, [sp, #0]
   26c86:	f7ff fa2b 	bl	260e0 <_Unwind_VRS_Set>
   26c8a:	e79a      	b.n	26bc2 <__gnu_unwind_execute+0x12>
   26c8c:	43c2      	mvns	r2, r0
   26c8e:	0701      	lsls	r1, r0, #28
   26c90:	f002 0c07 	and.w	ip, r2, #7
   26c94:	4630      	mov	r0, r6
   26c96:	fa4a f30c 	asr.w	r3, sl, ip
   26c9a:	f403 627f 	and.w	r2, r3, #4080	; 0xff0
   26c9e:	bf48      	it	mi
   26ca0:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
   26ca4:	2100      	movs	r1, #0
   26ca6:	460b      	mov	r3, r1
   26ca8:	f7ff fbf0 	bl	2648c <_Unwind_VRS_Pop>
   26cac:	2800      	cmp	r0, #0
   26cae:	d1b0      	bne.n	26c12 <__gnu_unwind_execute+0x62>
   26cb0:	e787      	b.n	26bc2 <__gnu_unwind_execute+0x12>
   26cb2:	28b1      	cmp	r0, #177	; 0xb1
   26cb4:	d077      	beq.n	26da6 <__gnu_unwind_execute+0x1f6>
   26cb6:	28b2      	cmp	r0, #178	; 0xb2
   26cb8:	f000 8088 	beq.w	26dcc <__gnu_unwind_execute+0x21c>
   26cbc:	28b3      	cmp	r0, #179	; 0xb3
   26cbe:	f000 80b4 	beq.w	26e2a <__gnu_unwind_execute+0x27a>
   26cc2:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
   26cc6:	29b4      	cmp	r1, #180	; 0xb4
   26cc8:	d05f      	beq.n	26d8a <__gnu_unwind_execute+0x1da>
   26cca:	f000 0e07 	and.w	lr, r0, #7
   26cce:	2101      	movs	r1, #1
   26cd0:	eb0e 0c01 	add.w	ip, lr, r1
   26cd4:	4630      	mov	r0, r6
   26cd6:	f44c 2200 	orr.w	r2, ip, #524288	; 0x80000
   26cda:	460b      	mov	r3, r1
   26cdc:	f7ff fbd6 	bl	2648c <_Unwind_VRS_Pop>
   26ce0:	2800      	cmp	r0, #0
   26ce2:	d196      	bne.n	26c12 <__gnu_unwind_execute+0x62>
   26ce4:	e76d      	b.n	26bc2 <__gnu_unwind_execute+0x12>
   26ce6:	4628      	mov	r0, r5
   26ce8:	0224      	lsls	r4, r4, #8
   26cea:	f7ff ff37 	bl	26b5c <next_unwind_byte>
   26cee:	4304      	orrs	r4, r0
   26cf0:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   26cf4:	d08d      	beq.n	26c12 <__gnu_unwind_execute+0x62>
   26cf6:	0522      	lsls	r2, r4, #20
   26cf8:	2100      	movs	r1, #0
   26cfa:	4630      	mov	r0, r6
   26cfc:	460b      	mov	r3, r1
   26cfe:	0c12      	lsrs	r2, r2, #16
   26d00:	0124      	lsls	r4, r4, #4
   26d02:	f7ff fbc3 	bl	2648c <_Unwind_VRS_Pop>
   26d06:	2800      	cmp	r0, #0
   26d08:	d183      	bne.n	26c12 <__gnu_unwind_execute+0x62>
   26d0a:	f414 4f00 	tst.w	r4, #32768	; 0x8000
   26d0e:	bf18      	it	ne
   26d10:	f04f 0901 	movne.w	r9, #1
   26d14:	e755      	b.n	26bc2 <__gnu_unwind_execute+0x12>
   26d16:	28c6      	cmp	r0, #198	; 0xc6
   26d18:	f000 809a 	beq.w	26e50 <__gnu_unwind_execute+0x2a0>
   26d1c:	28c7      	cmp	r0, #199	; 0xc7
   26d1e:	f000 80a1 	beq.w	26e64 <__gnu_unwind_execute+0x2b4>
   26d22:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
   26d26:	29c0      	cmp	r1, #192	; 0xc0
   26d28:	f000 80af 	beq.w	26e8a <__gnu_unwind_execute+0x2da>
   26d2c:	28c8      	cmp	r0, #200	; 0xc8
   26d2e:	f000 80ba 	beq.w	26ea6 <__gnu_unwind_execute+0x2f6>
   26d32:	28c9      	cmp	r0, #201	; 0xc9
   26d34:	f47f af6d 	bne.w	26c12 <__gnu_unwind_execute+0x62>
   26d38:	4628      	mov	r0, r5
   26d3a:	f7ff ff0f 	bl	26b5c <next_unwind_byte>
   26d3e:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
   26d42:	f000 030f 	and.w	r3, r0, #15
   26d46:	3301      	adds	r3, #1
   26d48:	4630      	mov	r0, r6
   26d4a:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
   26d4e:	2101      	movs	r1, #1
   26d50:	2305      	movs	r3, #5
   26d52:	f7ff fb9b 	bl	2648c <_Unwind_VRS_Pop>
   26d56:	2800      	cmp	r0, #0
   26d58:	f47f af5b 	bne.w	26c12 <__gnu_unwind_execute+0x62>
   26d5c:	e731      	b.n	26bc2 <__gnu_unwind_execute+0x12>
   26d5e:	2000      	movs	r0, #0
   26d60:	f1b9 0f00 	cmp.w	r9, #0
   26d64:	f47f af56 	bne.w	26c14 <__gnu_unwind_execute+0x64>
   26d68:	4649      	mov	r1, r9
   26d6a:	220e      	movs	r2, #14
   26d6c:	464b      	mov	r3, r9
   26d6e:	4630      	mov	r0, r6
   26d70:	ac03      	add	r4, sp, #12
   26d72:	9400      	str	r4, [sp, #0]
   26d74:	f7ff f98e 	bl	26094 <_Unwind_VRS_Get>
   26d78:	4630      	mov	r0, r6
   26d7a:	4649      	mov	r1, r9
   26d7c:	220f      	movs	r2, #15
   26d7e:	464b      	mov	r3, r9
   26d80:	9400      	str	r4, [sp, #0]
   26d82:	f7ff f9ad 	bl	260e0 <_Unwind_VRS_Set>
   26d86:	4648      	mov	r0, r9
   26d88:	e744      	b.n	26c14 <__gnu_unwind_execute+0x64>
   26d8a:	f000 0303 	and.w	r3, r0, #3
   26d8e:	2102      	movs	r1, #2
   26d90:	1c5a      	adds	r2, r3, #1
   26d92:	4630      	mov	r0, r6
   26d94:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
   26d98:	460b      	mov	r3, r1
   26d9a:	f7ff fb77 	bl	2648c <_Unwind_VRS_Pop>
   26d9e:	2800      	cmp	r0, #0
   26da0:	f47f af37 	bne.w	26c12 <__gnu_unwind_execute+0x62>
   26da4:	e70d      	b.n	26bc2 <__gnu_unwind_execute+0x12>
   26da6:	4628      	mov	r0, r5
   26da8:	f7ff fed8 	bl	26b5c <next_unwind_byte>
   26dac:	4602      	mov	r2, r0
   26dae:	2800      	cmp	r0, #0
   26db0:	f43f af2f 	beq.w	26c12 <__gnu_unwind_execute+0x62>
   26db4:	f010 01f0 	ands.w	r1, r0, #240	; 0xf0
   26db8:	f47f af2b 	bne.w	26c12 <__gnu_unwind_execute+0x62>
   26dbc:	4630      	mov	r0, r6
   26dbe:	460b      	mov	r3, r1
   26dc0:	f7ff fb64 	bl	2648c <_Unwind_VRS_Pop>
   26dc4:	2800      	cmp	r0, #0
   26dc6:	f47f af24 	bne.w	26c12 <__gnu_unwind_execute+0x62>
   26dca:	e6fa      	b.n	26bc2 <__gnu_unwind_execute+0x12>
   26dcc:	2100      	movs	r1, #0
   26dce:	220d      	movs	r2, #13
   26dd0:	460b      	mov	r3, r1
   26dd2:	4630      	mov	r0, r6
   26dd4:	af03      	add	r7, sp, #12
   26dd6:	9700      	str	r7, [sp, #0]
   26dd8:	f7ff f95c 	bl	26094 <_Unwind_VRS_Get>
   26ddc:	4628      	mov	r0, r5
   26dde:	f7ff febd 	bl	26b5c <next_unwind_byte>
   26de2:	2402      	movs	r4, #2
   26de4:	0602      	lsls	r2, r0, #24
   26de6:	d50d      	bpl.n	26e04 <__gnu_unwind_execute+0x254>
   26de8:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   26dec:	9b03      	ldr	r3, [sp, #12]
   26dee:	4628      	mov	r0, r5
   26df0:	fa02 fe04 	lsl.w	lr, r2, r4
   26df4:	3407      	adds	r4, #7
   26df6:	eb03 010e 	add.w	r1, r3, lr
   26dfa:	9103      	str	r1, [sp, #12]
   26dfc:	f7ff feae 	bl	26b5c <next_unwind_byte>
   26e00:	0603      	lsls	r3, r0, #24
   26e02:	d4f1      	bmi.n	26de8 <__gnu_unwind_execute+0x238>
   26e04:	9b03      	ldr	r3, [sp, #12]
   26e06:	f000 0e7f 	and.w	lr, r0, #127	; 0x7f
   26e0a:	2100      	movs	r1, #0
   26e0c:	4630      	mov	r0, r6
   26e0e:	f503 7c01 	add.w	ip, r3, #516	; 0x204
   26e12:	fa0e f704 	lsl.w	r7, lr, r4
   26e16:	220d      	movs	r2, #13
   26e18:	460b      	mov	r3, r1
   26e1a:	eb0c 0407 	add.w	r4, ip, r7
   26e1e:	af03      	add	r7, sp, #12
   26e20:	9403      	str	r4, [sp, #12]
   26e22:	9700      	str	r7, [sp, #0]
   26e24:	f7ff f95c 	bl	260e0 <_Unwind_VRS_Set>
   26e28:	e6cb      	b.n	26bc2 <__gnu_unwind_execute+0x12>
   26e2a:	4628      	mov	r0, r5
   26e2c:	f7ff fe96 	bl	26b5c <next_unwind_byte>
   26e30:	2101      	movs	r1, #1
   26e32:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
   26e36:	f000 000f 	and.w	r0, r0, #15
   26e3a:	1c43      	adds	r3, r0, #1
   26e3c:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
   26e40:	4630      	mov	r0, r6
   26e42:	460b      	mov	r3, r1
   26e44:	f7ff fb22 	bl	2648c <_Unwind_VRS_Pop>
   26e48:	2800      	cmp	r0, #0
   26e4a:	f47f aee2 	bne.w	26c12 <__gnu_unwind_execute+0x62>
   26e4e:	e6b8      	b.n	26bc2 <__gnu_unwind_execute+0x12>
   26e50:	4628      	mov	r0, r5
   26e52:	f7ff fe83 	bl	26b5c <next_unwind_byte>
   26e56:	2103      	movs	r1, #3
   26e58:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
   26e5c:	f000 000f 	and.w	r0, r0, #15
   26e60:	1c43      	adds	r3, r0, #1
   26e62:	e7eb      	b.n	26e3c <__gnu_unwind_execute+0x28c>
   26e64:	4628      	mov	r0, r5
   26e66:	f7ff fe79 	bl	26b5c <next_unwind_byte>
   26e6a:	4602      	mov	r2, r0
   26e6c:	2800      	cmp	r0, #0
   26e6e:	f43f aed0 	beq.w	26c12 <__gnu_unwind_execute+0x62>
   26e72:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   26e76:	f47f aecc 	bne.w	26c12 <__gnu_unwind_execute+0x62>
   26e7a:	4630      	mov	r0, r6
   26e7c:	2104      	movs	r1, #4
   26e7e:	f7ff fb05 	bl	2648c <_Unwind_VRS_Pop>
   26e82:	2800      	cmp	r0, #0
   26e84:	f47f aec5 	bne.w	26c12 <__gnu_unwind_execute+0x62>
   26e88:	e69b      	b.n	26bc2 <__gnu_unwind_execute+0x12>
   26e8a:	f000 030f 	and.w	r3, r0, #15
   26e8e:	2103      	movs	r1, #3
   26e90:	1c5a      	adds	r2, r3, #1
   26e92:	4630      	mov	r0, r6
   26e94:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
   26e98:	460b      	mov	r3, r1
   26e9a:	f7ff faf7 	bl	2648c <_Unwind_VRS_Pop>
   26e9e:	2800      	cmp	r0, #0
   26ea0:	f47f aeb7 	bne.w	26c12 <__gnu_unwind_execute+0x62>
   26ea4:	e68d      	b.n	26bc2 <__gnu_unwind_execute+0x12>
   26ea6:	4628      	mov	r0, r5
   26ea8:	f7ff fe58 	bl	26b5c <next_unwind_byte>
   26eac:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
   26eb0:	f000 030f 	and.w	r3, r0, #15
   26eb4:	3210      	adds	r2, #16
   26eb6:	e746      	b.n	26d46 <__gnu_unwind_execute+0x196>

00026eb8 <__gnu_unwind_frame>:
   26eb8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   26eba:	4608      	mov	r0, r1
   26ebc:	b530      	push	{r4, r5, lr}
   26ebe:	b085      	sub	sp, #20
   26ec0:	685a      	ldr	r2, [r3, #4]
   26ec2:	f103 0408 	add.w	r4, r3, #8
   26ec6:	2503      	movs	r5, #3
   26ec8:	f88d 500c 	strb.w	r5, [sp, #12]
   26ecc:	79db      	ldrb	r3, [r3, #7]
   26ece:	a901      	add	r1, sp, #4
   26ed0:	0212      	lsls	r2, r2, #8
   26ed2:	9402      	str	r4, [sp, #8]
   26ed4:	9201      	str	r2, [sp, #4]
   26ed6:	f88d 300d 	strb.w	r3, [sp, #13]
   26eda:	f7ff fe69 	bl	26bb0 <__gnu_unwind_execute>
   26ede:	b005      	add	sp, #20
   26ee0:	bd30      	pop	{r4, r5, pc}
   26ee2:	bf00      	nop

00026ee4 <_Unwind_GetRegionStart>:
   26ee4:	b508      	push	{r3, lr}
   26ee6:	f7ff fe61 	bl	26bac <unwind_UCB_from_context>
   26eea:	6c80      	ldr	r0, [r0, #72]	; 0x48
   26eec:	bd08      	pop	{r3, pc}
   26eee:	bf00      	nop

00026ef0 <_Unwind_GetLanguageSpecificData>:
   26ef0:	b508      	push	{r3, lr}
   26ef2:	f7ff fe5b 	bl	26bac <unwind_UCB_from_context>
   26ef6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   26ef8:	79c2      	ldrb	r2, [r0, #7]
   26efa:	eb00 0382 	add.w	r3, r0, r2, lsl #2
   26efe:	f103 0008 	add.w	r0, r3, #8
   26f02:	bd08      	pop	{r3, pc}

00026f04 <_Unwind_GetDataRelBase>:
   26f04:	b508      	push	{r3, lr}
   26f06:	f7f8 fd7d 	bl	1fa04 <abort>
   26f0a:	bf00      	nop

00026f0c <_Unwind_GetTextRelBase>:
   26f0c:	b508      	push	{r3, lr}
   26f0e:	f7f8 fd79 	bl	1fa04 <abort>
   26f12:	bf00      	nop
   26f14:	2f637273 	.word	0x2f637273
   26f18:	6867694d 	.word	0x6867694d
   26f1c:	6f427974 	.word	0x6f427974
   26f20:	2f647261 	.word	0x2f647261
   26f24:	68746f4d 	.word	0x68746f4d
   26f28:	6f627265 	.word	0x6f627265
   26f2c:	2f647261 	.word	0x2f647261
   26f30:	2f62696c 	.word	0x2f62696c
   26f34:	72756f73 	.word	0x72756f73
   26f38:	6c2f6563 	.word	0x6c2f6563
   26f3c:	37316370 	.word	0x37316370
   26f40:	615f7878 	.word	0x615f7878
   26f44:	632e6364 	.word	0x632e6364
   26f48:	00000000 	.word	0x00000000
   26f4c:	2f637273 	.word	0x2f637273
   26f50:	6867694d 	.word	0x6867694d
   26f54:	6f427974 	.word	0x6f427974
   26f58:	2f647261 	.word	0x2f647261
   26f5c:	68746f4d 	.word	0x68746f4d
   26f60:	6f627265 	.word	0x6f627265
   26f64:	2f647261 	.word	0x2f647261
   26f68:	2f62696c 	.word	0x2f62696c
   26f6c:	72756f73 	.word	0x72756f73
   26f70:	6c2f6563 	.word	0x6c2f6563
   26f74:	37316370 	.word	0x37316370
   26f78:	705f7878 	.word	0x705f7878
   26f7c:	632e6d77 	.word	0x632e6d77
   26f80:	00000000 	.word	0x00000000
   26f84:	2f637273 	.word	0x2f637273
   26f88:	6867694d 	.word	0x6867694d
   26f8c:	6f427974 	.word	0x6f427974
   26f90:	2f647261 	.word	0x2f647261
   26f94:	68746f4d 	.word	0x68746f4d
   26f98:	6f627265 	.word	0x6f627265
   26f9c:	2f647261 	.word	0x2f647261
   26fa0:	2f62696c 	.word	0x2f62696c
   26fa4:	72756f73 	.word	0x72756f73
   26fa8:	6c2f6563 	.word	0x6c2f6563
   26fac:	37316370 	.word	0x37316370
   26fb0:	725f7878 	.word	0x725f7878
   26fb4:	632e6374 	.word	0x632e6374
   26fb8:	00000000 	.word	0x00000000
   26fbc:	2f637273 	.word	0x2f637273
   26fc0:	6867694d 	.word	0x6867694d
   26fc4:	6f427974 	.word	0x6f427974
   26fc8:	2f647261 	.word	0x2f647261
   26fcc:	68746f4d 	.word	0x68746f4d
   26fd0:	6f627265 	.word	0x6f627265
   26fd4:	2f647261 	.word	0x2f647261
   26fd8:	2f62696c 	.word	0x2f62696c
   26fdc:	72756f73 	.word	0x72756f73
   26fe0:	6c2f6563 	.word	0x6c2f6563
   26fe4:	37316370 	.word	0x37316370
   26fe8:	735f7878 	.word	0x735f7878
   26fec:	632e6970 	.word	0x632e6970
   26ff0:	00000000 	.word	0x00000000
   26ff4:	2f637273 	.word	0x2f637273
   26ff8:	6867694d 	.word	0x6867694d
   26ffc:	6f427974 	.word	0x6f427974
   27000:	2f647261 	.word	0x2f647261
   27004:	68746f4d 	.word	0x68746f4d
   27008:	6f627265 	.word	0x6f627265
   2700c:	2f647261 	.word	0x2f647261
   27010:	2f62696c 	.word	0x2f62696c
   27014:	72756f73 	.word	0x72756f73
   27018:	6c2f6563 	.word	0x6c2f6563
   2701c:	37316370 	.word	0x37316370
   27020:	745f7878 	.word	0x745f7878
   27024:	72656d69 	.word	0x72656d69
   27028:	0000632e 	.word	0x0000632e
   2702c:	2f637273 	.word	0x2f637273
   27030:	6867694d 	.word	0x6867694d
   27034:	6f427974 	.word	0x6f427974
   27038:	2f647261 	.word	0x2f647261
   2703c:	68746f4d 	.word	0x68746f4d
   27040:	6f627265 	.word	0x6f627265
   27044:	2f647261 	.word	0x2f647261
   27048:	2f62696c 	.word	0x2f62696c
   2704c:	72756f73 	.word	0x72756f73
   27050:	6c2f6563 	.word	0x6c2f6563
   27054:	37316370 	.word	0x37316370
   27058:	755f7878 	.word	0x755f7878
   2705c:	2e747261 	.word	0x2e747261
   27060:	00000063 	.word	0x00000063
   27064:	2f637273 	.word	0x2f637273
   27068:	6867694d 	.word	0x6867694d
   2706c:	6f427974 	.word	0x6f427974
   27070:	2f647261 	.word	0x2f647261
   27074:	68746f4d 	.word	0x68746f4d
   27078:	6f627265 	.word	0x6f627265
   2707c:	2f647261 	.word	0x2f647261
   27080:	2f62696c 	.word	0x2f62696c
   27084:	72756f73 	.word	0x72756f73
   27088:	6c2f6563 	.word	0x6c2f6563
   2708c:	37316370 	.word	0x37316370
   27090:	775f7878 	.word	0x775f7878
   27094:	632e7464 	.word	0x632e7464
   27098:	00000000 	.word	0x00000000

0002709c <USB_ConfigDescriptor>:
   2709c:	00430209 80000102 00040932 02020100     ..C.....2.......
   270ac:	24055e00 05011000 01010124 02022404     .^.$....$....$..
   270bc:	00062405 81050701 02001003 00010409     .$..............
   270cc:	00000a02 0205075e 00004002 02820507     ....^....@......
   270dc:	00000040                                @...

000270e0 <USB_StringDescriptor>:
   270e0:	04090304 004e031c 00500058 00530020     ......N.X.P. .S.
   270f0:	004d0045 00430049 004e004f 00200044     E.M.I.C.O.N.D. .
   27100:	004e0324 00500058 004c0020 00430050     $.N.X.P. .L.P.C.
   27110:	00370031 00780078 00560020 004f0043     1.7.x.x. .V.C.O.
   27120:	0020004d 0044031a 004d0045 0030004f     M. ...D.E.M.O.0.
   27130:	00300030 00300030 00300030 030a0030     0.0.0.0.0.0.0...
   27140:	00430056 004d004f                       V.C.O.M.

00027148 <USB_DeviceDescriptor>:
   27148:	02000112 08000002 b40423c1 02010100     .........#......
   27158:	00000103                                ....

0002715c <USB_P_EP>:
   2715c:	000050f9 00006141 00006129 00000000     .P..Aa..)a......
	...
   2719c:	6978655f 61632074 64656c6c 74697720     _exit called wit
   271ac:	61702068 656d6172 20726574 000a6425     h parameter %d..
   271bc:	70616548 646e6120 61747320 63206b63     Heap and stack c
   271cc:	696c6c6f 6e6f6973 0000000a 0a7b7325     ollision....%s{.
   271dc:	00000000 00000062 464e495b 722d5d4f     ....b...[INFO]-r
   271ec:	74657365 676e6974 206f7420 746f6f62     esetting to boot
   271fc:	64616f6c 28207265 253a7325 000a2964     loader (%s:%d)..
   2720c:	2f637273 6867694d 6f427974 2f647261     src/MightyBoard/
   2721c:	68746f4d 6f627265 2f647261 6d6d6f63     Motherboard/comm
   2722c:	0000632e 464e495b 722d5d4f 74657365     .c..[INFO]-reset
   2723c:	20676e69 3a732528 0a296425 00000000     ing (%s:%d).....
   2724c:	464e495b 742d5d4f 73747365 6e757220     [INFO]-tests run
   2725c:	676e696e 73252820 2964253a 0000000a     ning (%s:%d)....
   2726c:	00000071 464e495b 712d5d4f 73252820     q...[INFO]-q (%s
   2727c:	2964253a 0000000a 464e495b 0d2d5d4f     :%d)....[INFO]-.
   2728c:	522d720a 74657365 6f622073 0d647261     .r-Resets board.
   2729c:	522d620a 74657365 6f742073 6f6f6220     .b-Resets to boo
   272ac:	616f6c74 0d726564 6c2d740a 74206465     tloader..t-led t
   272bc:	0d747365 2528200a 64253a73 00000a29     est.. (%s:%d)...
   272cc:	464e495b 432d5d4f 616d6d6f 6e20646e     [INFO]-Command n
   272dc:	6620746f 646e756f 6d632820 73253d64     ot found (cmd=%s
   272ec:	25282029 64253a73 00000a29 07050301     ) (%s:%d).......
   272fc:	12100e09 1c181614 0000001e 61732049     ............I sa
   2730c:	20612077 74696c67 69206863 796d206e     w a glitch in my
   2731c:	63204453 20647261 656c6966 6d6f532e     SD card file.Som
   2732c:	79616465 6c6c2749 20656220 72616d73     edayI'll be smar
   2733c:	6e652074 6867756f 72206f74 61747365     t enoughto resta
   2734c:	70207472 746e6972 2e676e69 00000000     rt printing.....
   2735c:	69742049 2064656d 2074756f 6c696877     I timed out whil
   2736c:	20202065 65747461 6974706d 7420676e     e   attempting t
   2737c:	6568206f 20207461 6520796d 75727478     o heat  my extru
   2738c:	2e726564 00000000 69742049 2064656d     der.....I timed 
   2739c:	2074756f 6c696877 20202065 65747461     out while   atte
   273ac:	6974706d 7420676e 6568206f 20207461     mpting to heat  
   273bc:	7020796d 6674616c 2e6d726f 00000000     my platform.....
   273cc:	01f4007b 000037e5 00001b94 00000000     {....7..........
	...
   273e4:	76287676 00000076 65766173 5f6f745f     vv(vv...save_to_
   273f4:	73616c66 25282068 64253a73 00000a29     flash (%s:%d)...
   27404:	2f637273 6867694d 6f427974 2f647261     src/MightyBoard/
   27414:	68746f4d 6f627265 2f647261 72706545     Motherboard/Eepr
   27424:	614d6d6f 63632e70 00000000 20656854     omMap.cc....The 
   27434:	6c706552 74616369 0000726f              Replicator..

00027440 <replicator_axis_lengths::axis_lengths>:
   27440:	000029bd 00001b36 0000ea60 0092e780     .)..6...`.......
   27450:	0092e780 00000000                       ........

00027458 <vtable for HeatingElement>:
	...
   27460:	0000a059 0000a085 00014889 00000000     Y........H......

00027470 <vtable for ExtruderHeatingElement>:
	...
   27478:	0000a065 0000a071 0000a181 00000000     e...q...........
   27488:	72747845 72656475 72616f42 723a3a64     ExtruderBoard::r
   27498:	74657365 28202928 253a7325 000a2964     eset() (%s:%d)..
   274a8:	2f637273 6867694d 6f427974 2f647261     src/MightyBoard/
   274b8:	68746f4d 6f627265 2f647261 72747845     Motherboard/Extr
   274c8:	72656475 72616f42 63632e64 00000000     uderBoard.cc....
   274d8:	47706552 69754220 0000646c 5f544457     RepG Build..WDT_
   274e8:	48515249 6c646e61 28207265 253a7325     IRQHandler (%s:%
   274f8:	000a2964 2f637273 6867694d 6f427974     d)..src/MightyBo
   27508:	2f647261 68746f4d 6f627265 2f647261     ard/Motherboard/
   27518:	6e69614d 0063632e 61636473 3a3a6472     Main.cc.sdcard::
   27528:	65736572 25282074 64253a73 00000a29     reset (%s:%d)...
   27538:	6c697475 3a797469 7365723a 28207465     utility::reset (
   27548:	253a7325 000a2964 6e616c70 3a72656e     %s:%d)..planner:
   27558:	696e693a 25282074 64253a73 00000a29     :init (%s:%d)...
   27568:	72706565 3a3a6d6f 74696e69 73252820     eeprom::init (%s
   27578:	2964253a 0000000a 70657473 73726570     :%d)....steppers
   27588:	65723a3a 20746573 3a732528 0a296425     ::reset (%s:%d).
   27598:	00000000 72616f62 65722e64 28746573     ....board.reset(
   275a8:	64726168 7365725f 20297465 3a732528     hard_reset) (%s:
   275b8:	0a296425 00000000 0a0d0a0d 0a0d0a0d     %d).............
   275c8:	2a2a0a0d 544f4f42 2a2a4445 73252820     ..**BOOTED** (%s
   275d8:	2964253a 0000000a 65736572 6f642074     :%d)....reset do
   275e8:	2820656e 253a7325 000a2964 70657473     ne (%s:%d)..step
   275f8:	20726570 74696e69 6e6f6420 25282065     per init done (%
   27608:	64253a73 00000a29 706f6f4c 73252820     s:%d)...Loop (%s
   27618:	2964253a 0000000a 0000002e 00000000     :%d)............

00027628 <vtable for TemperatureSensor>:
	...
   27630:	0000b6b1 0000b705 0000b6bd 00014889     .............H..
   27640:	53202f2f 70757465 4d575020 6d697420     // Setup PWM tim
   27650:	28207265 253a7325 000a2964 2f637273     er (%s:%d)..src/
   27660:	6867694d 6f427974 2f647261 68746f4d     MightyBoard/Moth
   27670:	6f627265 2f647261 68746f4d 6f627265     erboard/Motherbo
   27680:	2e647261 00006363                       ard.cc..

00027688 <vtable for BuildPlatformHeatingElement>:
	...
   27690:	0000b6c1 0000b6f1 0000b719 00000000     ................
   276a0:	2f637273 6867694d 6f427974 2f647261     src/MightyBoard/
   276b0:	68746f4d 6f627265 2f647261 6e616c50     Motherboard/Plan
   276c0:	2e72656e 00006363 0000002f 43204453     ner.cc../...SD C
   276d0:	20647261 6f6d6552 00646576              ard Removed.

000276dc <eeprom_offsets::DIGI_POT_SETTINGS>:
   276dc:	00000006                                ....

000276e0 <rate_table_slow>:
	...
   27720:	765f7a12 6f9b72e4 69936c82 642966cc     .z_v.r.o.l.i.f)d
   27730:	5f4661a8 5ad85d02 56ce58c7 531d54eb     .aF_.].Z.X.V.T.S
   27740:	4fb85161 4c984e20 49b44b1f 47064857     aQ.O N.L.K.IWH.G
   27750:	448845c1 42354359 4009411b 3e013f01     .E.DYC5B.A.@.?.>
   27760:	3c193d09 3a4d3b30 389d3972 370537ce     .=.<0;M:r9.8.7.7
   27770:	35833641 341534ca 32bb3366 31723215     A6.5.4.4f3.2.2r1
   27780:	303a30d4 2f102fa3 2df52e81 2ce62d6c     .0:0././...-l-.,
   27790:	2be42c64 2aed2b67 2a012a76 291e298e     d,.+g+.*v*.*.).)
   277a0:	284528b1 277527dc 26ad2710 25ed264c     .(E(.'u'.'.&L&.%
   277b0:	2534258f 248224da 23d6242b 23312383     .%4%.$.$+$.#.#1#
   277c0:	229222e1 21f82244 216321ad 20d3211b     ."."D".!.!c!.!. 
   277d0:	2048208d 1fc22005 1f401f81 1ec21f01     . H . ....@.....
   277e0:	1e481e85 1dd21e0c 1d5f1d98 1cef1d27     ..H......._.'...
   277f0:	1c831cb9 1c1a1c4e 1bb41be7 1b511b82     ....N.........Q.
   27800:	1af11b20 1a931ac1 1a371a65 19df1a0b      .......e.7.....
   27810:	198819b3 1934195e 18e1190a 189118b9     ....^.4.........
   27820:	1843186a 17f7181d 17ad17d2 17641788     j.C...........d.
   27830:	171d1740 16d816fa 169416b6 16521673     @...........s.R.
   27840:	16121632 15d315f2 159515b4 15581577     2...........w.X.
   27850:	151d153b 14e41500 14ab14c7 1474148f     ;.............t.
   27860:	143d1458 14081423 13d413ee 13a113bb     X.=.#...........
   27870:	136f1388 133e1356 130e1326 12df12f6     ..o.V.>.&.......
   27880:	12b112c8 1283129a 1257126d 122b1241     ........m.W.A.+.
   27890:	12001216 11d611eb 11ad11c1 11841199     ................
   278a0:	115c1170 11351149 110f1122 10e910fc     p.\.I.5.".......
   278b0:	10c410d6 109f10b2 107b108d 1058106a     ..........{.j.X.
   278c0:	10351047 10131024 0ff21002 0fd10fe1     G.5.$...........
   278d0:	0fb00fc0 0f900fa0 0f710f80 0f520f61     ..........q.a.R.
   278e0:	0f330f42 0f150f24 0ef70f06 0eda0ee9     B.3.$...........
   278f0:	0ebe0ecc 0ea10eaf 0e850e93 0e6a0e78     ............x.j.
   27900:	0e4f0e5c 0e340e42 0e1a0e27 0e000e0d     \.O.B.4.'.......
   27910:	0de70df3 0dce0dda 0db50dc1 0d9c0da9     ................
   27920:	0d840d90 0d6c0d78 0d550d61 0d3e0d49     ....x.l.a.U.I.>.
   27930:	0d270d32 0d100d1c 0cfa0d05 0ce40cef     2.'.............
   27940:	0ccf0cd9 0cb90cc4 0ca40caf 0c8f0c9a     ................
   27950:	0c7b0c85 0c670c71 0c530c5d 0c3f0c49     ..{.q.g.].S.I.?.
   27960:	0c2b0c35 0c180c22 0c050c0e 0bf20bfb     5.+."...........
   27970:	0be00be9 0bcd0bd6 0bbb0bc4 0ba90bb2     ................
   27980:	0b970ba0 0b860b8f 0b750b7d 0b630b6c     ........}.u.l.c.
   27990:	0b530b5b 0b420b4a 0b310b3a 0b210b29     [.S.J.B.:.1.).!.
   279a0:	0b110b19 0b010b09 0af10af9 0ae20ae9     ................
   279b0:	0ad20ada 0ac30aca 0ab40abb 0aa50aac     ................
   279c0:	0a960a9d 0a870a8f 0a790a80 0a6b0a72     ..........y.r.k.
   279d0:	0a5d0a64 0a4f0a56 0a410a48 0a330a3a     d.].V.O.H.A.:.3.
   279e0:	0a250a2c 0a180a1f 0a0b0a11 09fe0a04     ,.%.............
   279f0:	09f109f7 09e409ea 09d709dd 09ca09d1     ................
   27a00:	09be09c4 09b109b8 09a509ab 0999099f     ................
   27a10:	098d0993 09810987 0975097b 096a096f     ........{.u.o.j.
   27a20:	095e0964 09530958 0947094d 093c0942     d.^.X.S.M.G.B.<.
   27a30:	09310936 0926092b 091b0920 09100916     6.1.+.&. .......
   27a40:	0905090b 08fb0900 08f008f6 08e608eb     ................
   27a50:	08dc08e1 08d108d6 08c708cc 08bd08c2     ................
   27a60:	08b308b8 08a908ae 08a008a4 0896089b     ................
   27a70:	088c0891 08830887 0879087e 08700875     ........~.y.u.p.
   27a80:	0867086b 085d0862 08540859 084b0850     k.g.b.].Y.T.P.K.
   27a90:	08420847 0839083e 08300835 0828082c     G.B.>.9.5.0.,.(.
   27aa0:	081f0823 0816081b 080e0812 0805080a     #...............
   27ab0:	07fd0801 07f507f9 07ec07f1 07e407e8     ................
   27ac0:	07dc07e0 07d407d8 07cc07d0 07c407c8     ................
   27ad0:	07bc07c0 07b407b8 07ad07b1 07a507a9     ................
   27ae0:	079d07a1 0796079a 078e0792 0787078b     ................
   27af0:	077f0783 0778077c 07710774 076a076d     ....|.x.t.q.m.j.
   27b00:	07620766 075b075f 07540758 074d0751     f.b._.[.X.T.Q.M.
   27b10:	0746074a 073f0743 0738073c 07320735     J.F.C.?.<.8.5.2.
   27b20:	072b072e 07240728 071d0721 0717071a     ..+.(.$.!.......
   27b30:	07100714 070a070d 07030707 06fd0700     ................
   27b40:	06f706fa 06f006f3 06ea06ed 06e406e7     ................
   27b50:	06dd06e1 06d706da 06d106d4 06cb06ce     ................
   27b60:	06c506c8 06bf06c2 06b906bc 06b306b6     ................
   27b70:	06ad06b0 06a806aa 06a206a5 069c069f     ................
   27b80:	06960699 06910694 068b068e 06850688     ................
   27b90:	06800683 067a067d 06750678 066f0672     ....}.z.x.u.r.o.
   27ba0:	066a066d 06650667 065f0662 065a065d     m.j.g.e.b._.].Z.
   27bb0:	06550657 06500652 064a064d 06450648     W.U.R.P.M.J.H.E.
   27bc0:	06400643 063b063d 06360638 06310633     C.@.=.;.8.6.3.1.
   27bd0:	062c062e 06270629 06220624 061d061f     ..,.).'.$.".....
   27be0:	0618061b 06130616 060e0611 060a060c     ................
   27bf0:	06050607 06000602 05fb05fe 05f705f9     ................
   27c00:	05f205f4 05ed05f0 05e905eb 05e405e7     ................
   27c10:	05e005e2 05db05de 05d705d9 05d205d5     ................
   27c20:	05ce05d0 05c905cc 05c505c7 05c105c3     ................
   27c30:	05bc05bf 05b805ba 05b405b6 05b005b2     ................
   27c40:	05ab05ad 05a705a9 05a305a5 059f05a1     ................
   27c50:	059b059d 05970599 05930595 058e0591     ................
   27c60:	058a058c 05860588 05820584 057e0580     ..............~.
   27c70:	057b057c 05770579 05730575 056f0571     |.{.y.w.u.s.q.o.
   27c80:	056b056d 05670569 05630565 05600561     m.k.i.g.e.c.a.`.
   27c90:	055c055e 0558055a 05540556 05510552     ^.\.Z.X.V.T.R.Q.
   27ca0:	054d054f 0549054b 05460547 05420544     O.M.K.I.G.F.D.B.
   27cb0:	053e0540 053b053c 05370539 05340535     @.>.<.;.9.7.5.4.
   27cc0:	05300532 052d052e 0529052b 05260527     2.0...-.+.).'.&.
   27cd0:	05220524 051f0520 051b051d 05180519     $.". ...........
   27ce0:	05140516 05110513 050e050f 050a050c     ................
   27cf0:	05070509 05040505 05000502 04fd04ff     ................
   27d00:	04fa04fc 04f704f8 04f304f5 04f004f2     ................
   27d10:	04ed04ef 04ea04eb 04e704e8 04e404e5     ................
   27d20:	04e004e2 04dd04df 04da04dc 04d704d9     ................
   27d30:	04d404d6 04d104d3 04ce04d0 04cb04cd     ................
   27d40:	04c804c9 04c504c6 04c204c4 04bf04c1     ................
   27d50:	04bc04be 04b904bb 04b604b8 04b304b5     ................
   27d60:	04b004b2 04ae04af 04ab04ac 04a804a9     ................
   27d70:	04a504a6 04a204a4 049f04a1 049d049e     ................
   27d80:	049a049b 04970498 04940496 04920493     ................
   27d90:	048f0490 048c048e 0489048b 04870488     ................
   27da0:	04840485 04810483 047f0480 047c047d     ............}.|.
   27db0:	0479047b 04770478 04740476 04720473     {.y.x.w.v.t.s.r.
   27dc0:	046f0470 046d046e 046a046b 04670469     p.o.n.m.k.j.i.g.
   27dd0:	04650466 04620464 04600461 045d045f     f.e.d.b.a.`._.].
   27de0:	045b045c 0458045a 04560457 04530455     \.[.Z.X.W.V.U.S.
   27df0:	04510452 044f0450 044c044d 044a044b     R.Q.P.O.M.L.K.J.
   27e00:	04470448 04450446 04430444 04400441     H.G.F.E.D.C.A.@.
   27e10:	043e043f 043b043d 0439043a 04370438     ?.>.=.;.:.9.8.7.
   27e20:	04340436 04320433 04300431 042e042f     6.4.3.2.1.0./...
   27e30:	042b042c 0429042a 04270428 04240426     ,.+.*.).(.'.&.$.
   27e40:	04220423 04200421 041e041f 041c041d     #.".!. .........
   27e50:	0419041a 04170418 04150416 04130414     ................
   27e60:	04110412 040e0410 040c040d 040a040b     ................
   27e70:	04080409 04060407 04040405 04020403     ................
   27e80:	04000401 03fd03fe 03fb03fc 03f903fa     ................
   27e90:	03f703f8 03f503f6 03f303f4 03f103f2     ................
   27ea0:	03ef03f0 03ed03ee 03eb03ec 03e903ea     ................
   27eb0:	03e703e8 03e503e6 03e303e4 03e103e2     ................
   27ec0:	03df03e0 03dd03de 03db03dc 03d903da     ................
   27ed0:	03d703d8 03d503d6 03d303d4 03d203d2     ................
   27ee0:	03d003d1 03ce03cf 03cc03cd 03ca03cb     ................
   27ef0:	03c803c9 03c603c7 03c403c5 03c203c3     ................
   27f00:	03c103c2 03bf03c0 03bd03be 03bb03bc     ................
   27f10:	03b903ba 03b703b8 03b603b7 03b403b5     ................
   27f20:	03b203b3 03b003b1 03af03af 03ad03ae     ................
   27f30:	03ab03ac 03a903aa 03a703a8 03a603a7     ................
   27f40:	03a403a5 03a203a3 03a103a1 039f03a0     ................
   27f50:	039d039e 039b039c 039a039b 03980399     ................
   27f60:	03960397 03950395 03930394 03910392     ................
   27f70:	03900390 038e038f 038c038d 038b038b     ................
   27f80:	0389038a 03870388 03860387 03840385     ................
   27f90:	03820383 03810382 037f0380 037e037e     ............~.~.
   27fa0:	037c037d 037a037b 0379037a 03770378     }.|.{.z.z.y.x.w.
   27fb0:	03760377 03740375 03730373 03710372     w.v.u.t.s.s.r.q.
   27fc0:	03700370 036e036f 036c036d 036b036c     p.p.o.n.m.l.l.k.
   27fd0:	0369036a 03680369 03660367 03650366     j.i.i.h.g.f.f.e.
   27fe0:	03630364 03620363 03600361 035f0360     d.c.c.b.a.`.`._.
   27ff0:	035d035e 035c035d 035a035b 0359035a     ^.].].\.[.Z.Z.Y.
   28000:	03570358 03560357 03550355 03530354     X.W.W.V.U.U.T.S.
   28010:	03520352 03500351 034f034f 034d034e     R.R.Q.P.O.O.N.M.
   28020:	034c034d 034a034b 0349034a 03480348     M.L.K.J.J.I.H.H.
   28030:	03460347 03450346 03430344 03420343     G.F.F.E.D.C.C.B.
   28040:	03410341 033f0340 033e033f 033d033d     A.A.@.?.?.>.=.=.
   28050:	033b033c 033a033a 03380339 03370338     <.;.:.:.9.8.8.7.
   28060:	03360336 03340335 03330334 03320332     6.6.5.4.4.3.2.2.
   28070:	03300331 032f0330 032e032e 032c032d     1.0.0./.....-.,.
   28080:	032b032c 032a032a 03280329 03270328     ,.+.*.*.).(.(.'.
   28090:	03260326 03250325 03230324 03220323     &.&.%.%.$.#.#.".
   280a0:	03210321 031f0320 031e031f 031d031d     !.!. ...........
   280b0:	031c031c 031a031b 0319031a 03180318     ................
   280c0:	03170317 03150316 03140315 03130313     ................
   280d0:	03120312 03100311 030f0310 030e030e     ................
   280e0:	030d030d 030b030c 030a030b 0309030a     ................
   280f0:	03080308 03070307 03050306 03040305     ................
   28100:	03030304 03020302 03010301 02ff0300     ................
   28110:	02fe02ff 02fd02fe 02fc02fd 02fb02fb     ................
   28120:	02fa02fa 02f802f9 02f702f8 02f602f7     ................
   28130:	02f502f6 02f402f4 02f302f3 02f202f2     ................
   28140:	02f002f1 02ef02f0 02ee02ef 02ed02ee     ................
   28150:	02ec02ed 02eb02eb 02ea02ea 02e902e9     ................
   28160:	02e702e8 02e602e7 02e502e6 02e402e5     ................
   28170:	02e302e4 02e202e3 02e102e1 02e002e0     ................
   28180:	02df02df 02de02de 02dd02dd 02dc02dc     ................
   28190:	02da02db 02d902da 02d802d9 02d702d8     ................
   281a0:	02d602d7 02d502d6 02d402d5 02d302d4     ................
   281b0:	02d202d3 02d102d2 02d002d0 02cf02cf     ................
   281c0:	02ce02ce 02cd02cd 02cc02cc 02cb02cb     ................
   281d0:	02ca02ca 02c902c9 02c802c8 02c702c7     ................
   281e0:	02c602c6 02c502c5 02c402c4 02c302c3     ................
   281f0:	02c202c2 02c102c1 02c002c0 02bf02bf     ................
   28200:	02be02be 02bd02bd 02bc02bc 02bb02bb     ................
   28210:	02ba02ba 02b902b9 02b802b8 02b702b7     ................
   28220:	02b602b6 02b502b5 02b402b5 02b302b4     ................
   28230:	02b202b3 02b102b2 02b002b1 02af02b0     ................
   28240:	02ae02af 02ad02ae 02ac02ad 02ac02ac     ................
   28250:	02ab02ab 02aa02aa 02a902a9 02a802a8     ................
   28260:	02a702a7 02a602a6 02a502a6 02a402a5     ................
   28270:	02a302a4 02a202a3 02a102a2 02a002a1     ................
   28280:	02a002a0 029f029f 029e029e 029d029d     ................
   28290:	029c029c 029b029c 029a029b 0299029a     ................
   282a0:	02980299 02980298 02970297 02960296     ................
   282b0:	02950295 02940295 02930294 02920293     ................
   282c0:	02910292 02910291 02900290 028f028f     ................
   282d0:	028e028e 028d028e 028c028d 028b028c     ................
   282e0:	028b028b 028a028a 02890289 02880289     ................
   282f0:	02870288 02860287 02860286 02850285     ................
   28300:	02840284 02830284 02820283 02810282     ................
   28310:	02810281 02800280 027f027f 027e027f     ..............~.
   28320:	027d027e 027d027d 027c027c 027b027b     ~.}.}.}.|.|.{.{.
   28330:	027a027b 0279027a 02790279 02780278     {.z.z.y.y.y.x.x.
   28340:	02770277 02760277 02750276 02750275     w.w.w.v.v.u.u.u.
   28350:	02740274 02730273 02720273 02710272     t.t.s.s.s.r.r.q.
   28360:	02710271 02700270 026f026f 026e026f     q.q.p.p.o.o.o.n.
   28370:	026e026e 026d026d 026c026c 026b026c     n.n.m.m.l.l.l.k.
   28380:	026a026b 026a026a 02690269 02680269     k.j.j.j.i.i.i.h.
   28390:	02670268 02670267 02660266 02650265     h.g.g.g.f.f.e.e.
   283a0:	02640265 02640264 02630263 02620263     e.d.d.d.c.c.c.b.
   283b0:	02610262 02610261 02600260 025f0260     b.a.a.a.`.`.`._.
   283c0:	025e025f 025e025e 025d025d 025c025d     _.^.^.^.].].].\.
   283d0:	025c025c 025b025b 025a025a 0259025a     \.\.[.[.Z.Z.Z.Y.
   283e0:	02590259 02580258 02570258 02560257     Y.Y.X.X.X.W.W.V.
   283f0:	02560256 02550255 02540255 02540254     V.V.U.U.U.T.T.T.
   28400:	02530253 02520253 02510252 02510251     S.S.S.R.R.Q.Q.Q.
   28410:	02500250 024f0250 024f024f 024e024e     P.P.P.O.O.O.N.N.
   28420:	024d024e 024d024d 024c024c 024b024c     N.M.M.M.L.L.L.K.
   28430:	024b024b 024a024a 02490249 02480249     K.K.J.J.I.I.I.H.
   28440:	02480248 02470247 02460247 02460246     H.H.G.G.G.F.F.F.
   28450:	02450245 02440245 02440244 02430243     E.E.E.D.D.D.C.C.
   28460:	02420243 02420242 02410241 02400241     C.B.B.B.A.A.A.@.
   28470:	02400240 023f023f 023e023f 023e023e     @.@.?.?.?.>.>.>.
   28480:	023d023d 023c023d 023c023c 023b023b     =.=.=.<.<.<.;.;.
   28490:	023a023b 023a023a 02390239 02390239     ;.:.:.:.9.9.9.9.
   284a0:	02380238 02370238 02370237 02360236     8.8.8.7.7.7.6.6.
   284b0:	02350236 02350235 02340234 02330234     6.5.5.5.4.4.4.3.
   284c0:	02330233 02320232 02310232 02310231     3.3.2.2.2.1.1.1.
   284d0:	02300231 02300230 022f022f 022e022f     1.0.0.0./././...
   284e0:	022e022e 022d022d 022c022d 022c022c     ....-.-.-.,.,.,.
   284f0:	022b022c 022b022b 022a022a 0229022a     ,.+.+.+.*.*.*.).
   28500:	02290229 02280228 02280228 02270227     ).).(.(.(.(.'.'.
   28510:	02260227 02260226 02250225 02250225     '.&.&.&.%.%.%.%.
   28520:	02240224 02230224 02230223 02220222     $.$.$.#.#.#.".".
   28530:	02220222 02210221 02200221 02200220     ".".!.!.!. . . .
   28540:	021f021f 021f021f 021e021e 021d021e     ................
   28550:	021d021d 021c021d 021c021c 021b021b     ................
   28560:	021b021b 021a021a 0219021a 02190219     ................
   28570:	02180218 02180218 02170217 02160217     ................
   28580:	02160216 02150216 02150215 02140214     ................
   28590:	02140214 02130213 02130213 02120212     ................
   285a0:	02110212 02110211 02100211 02100210     ................
   285b0:	020f020f 020f020f 020e020e 020d020e     ................
   285c0:	020d020d 020c020d 020c020c 020b020c     ................
   285d0:	020b020b 020a020a 020a020a 02090209     ................
   285e0:	02090209 02080208 02070208 02070207     ................
   285f0:	02060207 02060206 02050206 02050205     ................
   28600:	02040205 02040204 02030203 02030203     ................
   28610:	02020202 02020202 02010201 02010201     ................
   28620:	02000200 02000200 01ff01ff 01fe01ff     ................
   28630:	01fe01fe 01fd01fe 01fd01fd 01fc01fd     ................
   28640:	01fc01fc 01fb01fc 01fb01fb 01fa01fb     ................
   28650:	01fa01fa 01f901fa 01f901f9 01f801f9     ................
   28660:	01f801f8 01f701f8 01f701f7 01f601f7     ................
   28670:	01f601f6 01f501f6 01f501f5 01f401f5     ................
   28680:	01f401f4 01f301f4 01f301f3 01f201f3     ................
   28690:	01f201f2 01f101f2 01f101f1 01f001f1     ................
   286a0:	01f001f0 01ef01f0 01ef01ef 01ee01ef     ................
   286b0:	01ee01ee 01ed01ee 01ed01ed 01ec01ed     ................
   286c0:	01ec01ec 01eb01ec 01eb01eb 01ea01eb     ................
   286d0:	01ea01ea 01e901ea 01e901e9 01e901e9     ................
   286e0:	01e801e8 01e801e8 01e701e7 01e701e7     ................
   286f0:	01e601e6 01e601e6 01e501e5 01e501e5     ................
   28700:	01e401e4 01e401e4 01e301e4 01e301e3     ................
   28710:	01e201e3 01e201e2 01e101e2 01e101e1     ................
   28720:	01e101e1 01e001e0 01e001e0 01df01df     ................
   28730:	01df01df 01de01de 01de01de 01dd01de     ................
   28740:	01dd01dd 01dc01dd 01dc01dc 01dc01dc     ................
   28750:	01db01db 01db01db 01da01da 01da01da     ................
   28760:	01d901d9 01d901d9 01d801d9 01d801d8     ................
   28770:	01d701d8 01d701d7 01d701d7 01d601d6     ................
   28780:	01d601d6 01d501d5 01d501d5 01d401d5     ................
   28790:	01d401d4 01d401d4 01d301d3 01d301d3     ................
   287a0:	01d201d2 01d201d2 01d101d2 01d101d1     ................
   287b0:	01d001d1 01d001d0 01d001d0 01cf01cf     ................
   287c0:	01cf01cf 01ce01cf 01ce01ce 01cd01ce     ................
   287d0:	01cd01cd 01cd01cd 01cc01cc 01cc01cc     ................
   287e0:	01cb01cc 01cb01cb 01cb01cb 01ca01ca     ................
   287f0:	01ca01ca 01c901c9 01c901c9 01c801c9     ................
   28800:	01c801c8 01c801c8 01c701c7 01c701c7     ................
   28810:	01c601c7 01c601c6 01c601c6 01c501c5     ................
   28820:	01c501c5 01c401c4 01c401c4 01c301c4     ................
   28830:	01c301c3 01c301c3 01c201c2 01c201c2     ................
   28840:	01c101c2 01c101c1 01c101c1 01c001c0     ................
   28850:	01c001c0 01bf01c0 01bf01bf 01bf01bf     ................
   28860:	01be01be 01be01be 01bd01be 01bd01bd     ................
   28870:	01bd01bd 01bc01bc 01bc01bc 01bb01bc     ................
   28880:	01bb01bb 01bb01bb 01ba01ba 01ba01ba     ................
   28890:	01ba01ba 01b901b9 01b901b9 01b801b9     ................
   288a0:	01b801b8 01b801b8 01b701b7 01b701b7     ................
   288b0:	01b601b7 01b601b6 01b601b6 01b501b5     ................
   288c0:	01b501b5 01b401b5 01b401b4 01b401b4     ................
   288d0:	01b301b4 01b301b3 01b301b3 01b201b2     ................
   288e0:	01b201b2 01b101b2 01b101b1 01b101b1     ................
   288f0:	01b001b1 01b001b0 01b001b0 01af01af     ................
   28900:	01af01af 01ae01af 01ae01ae 01ae01ae     ................
   28910:	01ad01ae 01ad01ad 01ad01ad 01ac01ac     ................
   28920:	01ac01ac 01ac01ac 01ab01ab 01ab01ab     ................
   28930:	01aa01ab 01aa01aa 01aa01aa 01a901aa     ................
   28940:	01a901a9 01a901a9 01a801a8 01a801a8     ................
   28950:	01a801a8 01a701a7 01a701a7 01a601a7     ................
   28960:	01a601a6 01a601a6 01a501a6 01a501a5     ................
   28970:	01a501a5 01a401a5 01a401a4 01a401a4     ................
   28980:	01a301a3 01a301a3 01a301a3 01a201a2     ................
   28990:	01a201a2 01a201a2 01a101a1 01a101a1     ................
   289a0:	01a001a1 01a001a0 01a001a0 019f01a0     ................
   289b0:	019f019f 019f019f 019e019f 019e019e     ................
   289c0:	019e019e 019d019e 019d019d 019d019d     ................
   289d0:	019c019d 019c019c 019c019c 019b019c     ................
   289e0:	019b019b 019b019b 019a019b 019a019a     ................
   289f0:	019a019a 0199019a 01990199 01990199     ................
   28a00:	01980198 01980198 01980198 01970197     ................
   28a10:	01970197 01970197 01960197 01960196     ................
   28a20:	01960196 01950196 01950195 01950195     ................
   28a30:	01940195 01940194 01940194 01930194     ................
   28a40:	01930193 01930193 01920193 01920192     ................
   28a50:	01920192 01910192 01910191 01910191     ................
   28a60:	01900191 01900190 01900190 01900190     ................
   28a70:	018f018f 018f018f 018f018f 018e018e     ................
   28a80:	018e018e 018e018e 018d018d 018d018d     ................
   28a90:	018d018d 018c018d 018c018c 018c018c     ................
   28aa0:	018b018c 018b018b 018b018b 018a018b     ................
   28ab0:	018a018a 018a018a 018a018a 01890189     ................
   28ac0:	01890189 01890189 01880188 01880188     ................
   28ad0:	01880188 01870188 01870187 01870187     ................
   28ae0:	01860187 01860186 01860186 01860186     ................
   28af0:	01850185 01850185 01850185 01840185     ................
   28b00:	01840184 01840184 01830184 01830183     ................
   28b10:	01830183 01830183 01820182 01820182     ................
   28b20:	01820182 01810182 01810181 01810181     ................
   28b30:	01800181 01800180 01800180 01800180     ................
   28b40:	017f017f 017f017f 017f017f 017e017f     ..............~.
   28b50:	017e017e 017e017e 017e017e 017d017d     ~.~.~.~.~.~.}.}.
   28b60:	017d017d 017d017d 017c017d 017c017c     }.}.}.}.}.|.|.|.
   28b70:	017c017c 017c017c 017b017b 017b017b     |.|.|.|.{.{.{.{.
   28b80:	017b017b 017a017b 017a017a 017a017a     {.{.{.z.z.z.z.z.
   28b90:	017a017a 01790179 01790179 01790179     z.z.y.y.y.y.y.y.
   28ba0:	01780179 01780178 01780178 01780178     y.x.x.x.x.x.x.x.
   28bb0:	01770177 01770177 01770177 01760177     w.w.w.w.w.w.w.v.
   28bc0:	01760176 01760176 01760176 01750175     v.v.v.v.v.v.u.u.
   28bd0:	01750175 01750175 01740175 01740174     u.u.u.u.u.t.t.t.
   28be0:	01740174 01740174 01730173 01730173     t.t.t.t.s.s.s.s.
   28bf0:	01730173 01730173 01720172 01720172     s.s.s.s.r.r.r.r.
   28c00:	01720172 01710172 01710171 01710171     r.r.r.q.q.q.q.q.
   28c10:	01710171 01700170 01700170 01700170     q.q.p.p.p.p.p.p.
   28c20:	01700170 016f016f 016f016f 016f016f     p.p.o.o.o.o.o.o.
   28c30:	016e016f 016e016e 016e016e 016e016e     o.n.n.n.n.n.n.n.
   28c40:	016d016d 016d016d 016d016d 016d016d     m.m.m.m.m.m.m.m.
   28c50:	016c016c 016c016c 016c016c 016c016c     l.l.l.l.l.l.l.l.
   28c60:	016b016b 016b016b 016b016b 016a016b     k.k.k.k.k.k.k.j.
   28c70:	016a016a 016a016a 016a016a 0169016a     j.j.j.j.j.j.j.i.
   28c80:	01690169 01690169 01690169 01680168     i.i.i.i.i.i.h.h.
   28c90:	01680168 01680168 01680168 01670167     h.h.h.h.h.h.g.g.
   28ca0:	01670167 01670167 01670167 01660166     g.g.g.g.g.g.f.f.
   28cb0:	01660166 01660166 01660166 01650165     f.f.f.f.f.f.e.e.
   28cc0:	01650165 01650165 01650165 01640164     e.e.e.e.e.e.d.d.
   28cd0:	01640164 01640164 01630164 01630163     d.d.d.d.d.c.c.c.
   28ce0:	01630163 01630163 01620163 01620162     c.c.c.c.c.b.b.b.
   28cf0:	01620162 01620162 01610162 01610161     b.b.b.b.b.a.a.a.
   28d00:	01610161 01610161 01600161 01600160     a.a.a.a.a.`.`.`.
   28d10:	01600160 01600160 015f0160 015f015f     `.`.`.`.`._._._.
   28d20:	015f015f 015f015f 015f015f 015e015e     _._._._._._.^.^.
   28d30:	015e015e 015e015e 015e015e 015d015d     ^.^.^.^.^.^.].].
   28d40:	015d015d 015d015d 015d015d 015c015c     ].].].].].].\.\.
   28d50:	015c015c 015c015c 015c015c 015b015b     \.\.\.\.\.\.[.[.
   28d60:	015b015b 015b015b 015b015b 015a015b     [.[.[.[.[.[.[.Z.
   28d70:	015a015a 015a015a 015a015a 0159015a     Z.Z.Z.Z.Z.Z.Z.Y.
   28d80:	01590159 01590159 01590159 01580159     Y.Y.Y.Y.Y.Y.Y.X.
   28d90:	01580158 01580158 01580158 01580158     X.X.X.X.X.X.X.X.
   28da0:	01570157 01570157 01570157 01570157     W.W.W.W.W.W.W.W.
   28db0:	01560156 01560156 01560156 01560156     V.V.V.V.V.V.V.V.
   28dc0:	01550156 01550155 01550155 01550155     V.U.U.U.U.U.U.U.
   28dd0:	01540155 01540154 01540154 01540154     U.T.T.T.T.T.T.T.
   28de0:	01540154 01530153 01530153 01530153     T.T.S.S.S.S.S.S.
   28df0:	01530153 01520153 01520152 01520152     S.S.S.R.R.R.R.R.
   28e00:	01520152 01510152 01510151 01510151     R.R.R.Q.Q.Q.Q.Q.
   28e10:	01510151 01510151 01500150 01500150     Q.Q.Q.Q.P.P.P.P.
   28e20:	01500150 01500150 014f0150 014f014f     P.P.P.P.P.O.O.O.
   28e30:	014f014f 014f014f 014f014f 014e014e     O.O.O.O.O.O.N.N.
   28e40:	014e014e 014e014e 014e014e 014d014e     N.N.N.N.N.N.N.M.
   28e50:	014d014d 014d014d 014d014d 014d014d     M.M.M.M.M.M.M.M.
   28e60:	014c014c 014c014c 014c014c 014c014c     L.L.L.L.L.L.L.L.
   28e70:	014b014c 014b014b 014b014b 014b014b     L.K.K.K.K.K.K.K.
   28e80:	014b014b 014a014a 014a014a 014a014a     K.K.J.J.J.J.J.J.
   28e90:	014a014a 0149014a 01490149 01490149     J.J.J.I.I.I.I.I.
   28ea0:	01490149 01490149 01480149 01480148     I.I.I.I.I.H.H.H.
   28eb0:	01480148 01480148 01480148 01470147     H.H.H.H.H.H.G.G.
   28ec0:	01470147 01470147 01470147 01460147     G.G.G.G.G.G.G.F.
   28ed0:	01460146 01460146 01460146 01460146     F.F.F.F.F.F.F.F.
   28ee0:	01450146 01450145 01450145 01450145     F.E.E.E.E.E.E.E.
   28ef0:	01450145 01440144 01440144 01440144     E.E.D.D.D.D.D.D.
   28f00:	01440144 01440144 01430143 01430143     D.D.D.D.C.C.C.C.
   28f10:	01430143 01430143 01420143 01420142     C.C.C.C.C.B.B.B.
   28f20:	01420142 01420142 01420142 01410142     B.B.B.B.B.B.B.A.
   28f30:	01410141 01410141 01410141 01410141     A.A.A.A.A.A.A.A.
   28f40:	01400141 01400140 01400140 01400140     A.@.@.@.@.@.@.@.
   28f50:	01400140 013f013f 013f013f 013f013f     @.@.?.?.?.?.?.?.
   28f60:	013f013f 013f013f 013e013e 013e013e     ?.?.?.?.>.>.>.>.
   28f70:	013e013e 013e013e 013e013e 013d013d     >.>.>.>.>.>.=.=.
   28f80:	013d013d 013d013d 013d013d 013d013d     =.=.=.=.=.=.=.=.
   28f90:	013c013c 013c013c 013c013c 013c013c     <.<.<.<.<.<.<.<.
   28fa0:	013c013c 013b013b 013b013b 013b013b     <.<.;.;.;.;.;.;.
   28fb0:	013b013b 013b013b 013a013a 013a013a     ;.;.;.;.:.:.:.:.
   28fc0:	013a013a 013a013a 013a013a 01390139     :.:.:.:.:.:.9.9.
   28fd0:	01390139 01390139 01390139 01390139     9.9.9.9.9.9.9.9.
   28fe0:	01380139 01380138 01380138 01380138     9.8.8.8.8.8.8.8.
   28ff0:	01380138 01370138 01370137 01370137     8.8.8.7.7.7.7.7.
   29000:	01370137 01370137 01360137 01360136     7.7.7.7.7.6.6.6.
   29010:	01360136 01360136 01360136 01360136     6.6.6.6.6.6.6.6.
   29020:	01350135 01350135 01350135 01350135     5.5.5.5.5.5.5.5.
   29030:	01350135 01340134 01340134 01340134     5.5.4.4.4.4.4.4.
   29040:	01340134 01340134 01330134 01330133     4.4.4.4.4.3.3.3.
   29050:	01330133 01330133 01330133 01320133     3.3.3.3.3.3.3.2.
   29060:	01320132 01320132 01320132 01320132     2.2.2.2.2.2.2.2.
   29070:	01320132 01310131 01310131 01310131     2.2.1.1.1.1.1.1.
   29080:	01310131 01310131 01300131 01300130     1.1.1.1.1.0.0.0.
   29090:	01300130 01300130 01300130 012f0130     0.0.0.0.0.0.0./.
   290a0:	012f012f 012f012f 012f012f 012f012f     /./././././././.
   290b0:	012f012f 012e012e 012e012e 012e012e     /./.............
   290c0:	012e012e 012e012e 012d012e 012d012d     ..........-.-.-.
   290d0:	012d012d 012d012d 012d012d 012d012d     -.-.-.-.-.-.-.-.
   290e0:	012c012c 012c012c 012c012c 012c012c     ,.,.,.,.,.,.,.,.
   290f0:	012c012c 012b012c 012b012b 012b012b     ,.,.,.+.+.+.+.+.
   29100:	012b012b 012b012b 012b012b 012a012b     +.+.+.+.+.+.+.*.
   29110:	012a012a 012a012a 012a012a 012a012a     *.*.*.*.*.*.*.*.
   29120:	012a012a 01290129 01290129 01290129     *.*.).).).).).).
   29130:	01290129 01290129 01280129 01280128     ).).).).).(.(.(.
   29140:	01280128 01280128 01280128 01280128     (.(.(.(.(.(.(.(.
   29150:	01270128 01270127 01270127 01270127     (.'.'.'.'.'.'.'.
   29160:	01270127 01270127 01260126 01260126     '.'.'.'.&.&.&.&.
   29170:	01260126 01260126 01260126 01260126     &.&.&.&.&.&.&.&.
   29180:	01250125 01250125 01250125 01250125     %.%.%.%.%.%.%.%.
   29190:	01250125 01240125 01240124 01240124     %.%.%.$.$.$.$.$.
   291a0:	01240124 01240124 01240124 01230124     $.$.$.$.$.$.$.#.
   291b0:	01230123 01230123 01230123 01230123     #.#.#.#.#.#.#.#.
   291c0:	01230123 01220123 01220122 01220122     #.#.#.".".".".".
   291d0:	01220122 01220122 01220122 01210122     ".".".".".".".!.
   291e0:	01210121 01210121 01210121 01210121     !.!.!.!.!.!.!.!.
   291f0:	01210121 01200121 01200120 01200120     !.!.!. . . . . .
   29200:	01200120 01200120 01200120 011f0120      . . . . . . ...
   29210:	011f011f 011f011f 011f011f 011f011f     ................
   29220:	011f011f 011e011f 011e011e 011e011e     ................
   29230:	011e011e 011e011e 011e011e 011d011e     ................
   29240:	011d011d 011d011d 011d011d 011d011d     ................
   29250:	011d011d 011c011d 011c011c 011c011c     ................
   29260:	011c011c 011c011c 011c011c 011c011c     ................
   29270:	011b011b 011b011b 011b011b 011b011b     ................
   29280:	011b011b 011b011b 011a011a 011a011a     ................
   29290:	011a011a 011a011a 011a011a 011a011a     ................
   292a0:	0119011a 01190119 01190119 01190119     ................
   292b0:	01190119 01190119 01190119 01180118     ................
   292c0:	01180118 01180118 01180118 01180118     ................
   292d0:	01180118 01170117 01170117 01170117     ................
   292e0:	01170117 01170117 01170117 01160117     ................
   292f0:	01160116 01160116 01160116 01160116     ................
   29300:	01160116 01160116 01150115 01150115     ................
   29310:	01150115 01150115 01150115 01150115     ................
   29320:	01140115 01140114 01140114 01140114     ................
   29330:	01140114 01140114 01140114 01130113     ................
   29340:	01130113 01130113 01130113 01130113     ................
   29350:	01130113 01120113 01120112 01120112     ................
   29360:	01120112 01120112 01120112 01120112     ................
   29370:	01110112 01110111 01110111 01110111     ................
   29380:	01110111 01110111 01110111 01100110     ................
   29390:	01100110 01100110 01100110 01100110     ................
   293a0:	01100110 01100110 010f010f 010f010f     ................
   293b0:	010f010f 010f010f 010f010f 010f010f     ................
   293c0:	010e010f 010e010e 010e010e 010e010e     ................
   293d0:	010e010e 010e010e 010e010e 010d010e     ................
   293e0:	010d010d 010d010d 010d010d 010d010d     ................
   293f0:	010d010d 010d010d 010c010d 010c010c     ................
   29400:	010c010c 010c010c 010c010c 010c010c     ................
   29410:	010c010c 010b010c 010b010b 010b010b     ................
   29420:	010b010b 010b010b 010b010b 010b010b     ................
   29430:	010a010b 010a010a 010a010a 010a010a     ................
   29440:	010a010a 010a010a 010a010a 0109010a     ................
   29450:	01090109 01090109 01090109 01090109     ................
   29460:	01090109 01090109 01080109 01080108     ................
   29470:	01080108 01080108 01080108 01080108     ................
   29480:	01080108 01080108 01070107 01070107     ................
   29490:	01070107 01070107 01070107 01070107     ................
   294a0:	01070107 01060106 01060106 01060106     ................
   294b0:	01060106 01060106 01060106 01060106     ................
   294c0:	01050106 01050105 01050105 01050105     ................
   294d0:	01050105 01050105 01050105 01040105     ................
   294e0:	01040104 01040104 01040104 01040104     ................
   294f0:	01040104 01040104 01040104 01030103     ................
   29500:	01030103 01030103 01030103 01030103     ................
   29510:	01030103 01030103 01020103 01020102     ................
   29520:	01020102 01020102 01020102 01020102     ................
   29530:	01020102 01020102 01010101 01010101     ................
   29540:	01010101 01010101 01010101 01010101     ................
   29550:	01010101 01000101 01000100 01000100     ................
   29560:	01000100 01000100 01000100 01000100     ................
   29570:	01000100 00ff00ff 00ff00ff 00ff00ff     ................
   29580:	00ff00ff 00ff00ff 00ff00ff 00ff00ff     ................
   29590:	00ff00ff 00fe00fe 00fe00fe 00fe00fe     ................
   295a0:	00fe00fe 00fe00fe 00fe00fe 00fe00fe     ................
   295b0:	00fd00fe 00fd00fd 00fd00fd 00fd00fd     ................
   295c0:	00fd00fd 00fd00fd 00fd00fd 00fd00fd     ................
   295d0:	00fc00fd 00fc00fc 00fc00fc 00fc00fc     ................
   295e0:	00fc00fc 00fc00fc 00fc00fc 00fc00fc     ................
   295f0:	00fb00fc 00fb00fb 00fb00fb 00fb00fb     ................
   29600:	00fb00fb 00fb00fb 00fb00fb 00fb00fb     ................
   29610:	00fa00fb 00fa00fa 00fa00fa 00fa00fa     ................
   29620:	00fa00fa 00fa00fa 00fa00fa 00fa00fa     ................
   29630:	00f900fa 00f900f9 00f900f9 00f900f9     ................
   29640:	00f900f9 00f900f9 00f900f9 00f900f9     ................
   29650:	00f800f9 00f800f8 00f800f8 00f800f8     ................
   29660:	00f800f8 00f800f8 00f800f8 00f800f8     ................
   29670:	00f700f8 00f700f7 00f700f7 00f700f7     ................
   29680:	00f700f7 00f700f7 00f700f7 00f700f7     ................
   29690:	00f600f7 00f600f6 00f600f6 00f600f6     ................
   296a0:	00f600f6 00f600f6 00f600f6 00f600f6     ................
   296b0:	00f600f6 00f500f5 00f500f5 00f500f5     ................
   296c0:	00f500f5 00f500f5 00f500f5 00f500f5     ................
   296d0:	00f500f5 00f400f4 00f400f4 00f400f4     ................
   296e0:	00f400f4 00f400f4 00f400f4 00f400f4     ................
   296f0:	00f400f4 00f300f4 00f300f3 00f300f3     ................
   29700:	00f300f3 00f300f3 00f300f3 00f300f3     ................
   29710:	00f300f3 00f300f3 00f200f2 00f200f2     ................
   29720:	00f200f2 00f200f2 00f200f2 00f200f2     ................
   29730:	00f200f2 00f200f2 00f100f2 00f100f1     ................
   29740:	00f100f1 00f100f1 00f100f1 00f100f1     ................
   29750:	00f100f1 00f100f1 00f100f1 00f000f1     ................
   29760:	00f000f0 00f000f0 00f000f0 00f000f0     ................
   29770:	00f000f0 00f000f0 00f000f0 00f000f0     ................
   29780:	00ef00ef 00ef00ef 00ef00ef 00ef00ef     ................
   29790:	00ef00ef 00ef00ef 00ef00ef 00ef00ef     ................
   297a0:	00ee00ef 00ee00ee 00ee00ee 00ee00ee     ................
   297b0:	00ee00ee 00ee00ee 00ee00ee 00ee00ee     ................
   297c0:	00ee00ee 00ed00ee 00ed00ed 00ed00ed     ................
   297d0:	00ed00ed 00ed00ed 00ed00ed 00ed00ed     ................
   297e0:	00ed00ed 00ed00ed 00ec00ed 00ec00ec     ................
   297f0:	00ec00ec 00ec00ec 00ec00ec 00ec00ec     ................
   29800:	00ec00ec 00ec00ec 00ec00ec 00eb00ec     ................
   29810:	00eb00eb 00eb00eb 00eb00eb 00eb00eb     ................
   29820:	00eb00eb 00eb00eb 00eb00eb 00eb00eb     ................
   29830:	00ea00eb 00ea00ea 00ea00ea 00ea00ea     ................
   29840:	00ea00ea 00ea00ea 00ea00ea 00ea00ea     ................
   29850:	00ea00ea 00e900ea 00e900e9 00e900e9     ................
   29860:	00e900e9 00e900e9 00e900e9 00e900e9     ................
   29870:	00e900e9 00e900e9 00e900e9 00e800e8     ................
   29880:	00e800e8 00e800e8 00e800e8 00e800e8     ................
   29890:	00e800e8 00e800e8 00e800e8 00e800e8     ................
   298a0:	00e700e7 00e700e7 00e700e7 00e700e7     ................
   298b0:	00e700e7 00e700e7 00e700e7 00e700e7     ................
   298c0:	00e700e7 00e600e7 00e600e6 00e600e6     ................
   298d0:	00e600e6 00e600e6 00e600e6 00e600e6     ................
   298e0:	00e600e6 00e600e6 00e600e6 00e500e5     ................
   298f0:	00e500e5 00e500e5 00e500e5 00e500e5     ................
   29900:	00e500e5 00e500e5 00e500e5 00e500e5     ................
   29910:	00e400e5 00e400e4 00e400e4 00e400e4     ................
   29920:	00e400e4 00e400e4 00e400e4 00e400e4     ................
   29930:	00e400e4 00e400e4 00e300e3 00e300e3     ................
   29940:	00e300e3 00e300e3 00e300e3 00e300e3     ................
   29950:	00e300e3 00e300e3 00e300e3 00e300e3     ................
   29960:	00e200e2 00e200e2 00e200e2 00e200e2     ................
   29970:	00e200e2 00e200e2 00e200e2 00e200e2     ................
   29980:	00e200e2 00e100e2 00e100e1 00e100e1     ................
   29990:	00e100e1 00e100e1 00e100e1 00e100e1     ................
   299a0:	00e100e1 00e100e1 00e100e1 00e000e1     ................
   299b0:	00e000e0 00e000e0 00e000e0 00e000e0     ................
   299c0:	00e000e0 00e000e0 00e000e0 00e000e0     ................
   299d0:	00e000e0 00df00e0 00df00df 00df00df     ................
   299e0:	00df00df 00df00df 00df00df 00df00df     ................
   299f0:	00df00df 00df00df 00df00df 00de00df     ................
   29a00:	00de00de 00de00de 00de00de 00de00de     ................
   29a10:	00de00de 00de00de 00de00de 00de00de     ................
   29a20:	00de00de 00dd00de 00dd00dd 00dd00dd     ................
   29a30:	00dd00dd 00dd00dd 00dd00dd 00dd00dd     ................
   29a40:	00dd00dd 00dd00dd 00dd00dd 00dd00dd     ................
   29a50:	00dc00dc 00dc00dc 00dc00dc 00dc00dc     ................
   29a60:	00dc00dc 00dc00dc 00dc00dc 00dc00dc     ................
   29a70:	00dc00dc 00dc00dc 00db00db 00db00db     ................
   29a80:	00db00db 00db00db 00db00db 00db00db     ................
   29a90:	00db00db 00db00db 00db00db 00db00db     ................
   29aa0:	00da00db 00da00da 00da00da 00da00da     ................
   29ab0:	00da00da 00da00da 00da00da 00da00da     ................
   29ac0:	00da00da 00da00da 00da00da 00d900d9     ................
   29ad0:	00d900d9 00d900d9 00d900d9 00d900d9     ................
   29ae0:	00d900d9 00d900d9 00d900d9 00d900d9     ................
   29af0:	00d900d9 00d800d9 00d800d8 00d800d8     ................
   29b00:	00d800d8 00d800d8 00d800d8 00d800d8     ................
   29b10:	00d800d8 00d800d8 00d800d8 00d800d8     ................
   29b20:	00d700d8 00d700d7 00d700d7 00d700d7     ................
   29b30:	00d700d7 00d700d7 00d700d7 00d700d7     ................
   29b40:	00d700d7 00d700d7 00d700d7 00d600d7     ................
   29b50:	00d600d6 00d600d6 00d600d6 00d600d6     ................
   29b60:	00d600d6 00d600d6 00d600d6 00d600d6     ................
   29b70:	00d600d6 00d600d6 00d500d5 00d500d5     ................
   29b80:	00d500d5 00d500d5 00d500d5 00d500d5     ................
   29b90:	00d500d5 00d500d5 00d500d5 00d500d5     ................
   29ba0:	00d500d5 00d400d4 00d400d4 00d400d4     ................
   29bb0:	00d400d4 00d400d4 00d400d4 00d400d4     ................
   29bc0:	00d400d4 00d400d4 00d400d4 00d400d4     ................
   29bd0:	00d300d4 00d300d3 00d300d3 00d300d3     ................
   29be0:	00d300d3 00d300d3 00d300d3 00d300d3     ................
   29bf0:	00d300d3 00d300d3 00d300d3 00d200d3     ................
   29c00:	00d200d2 00d200d2 00d200d2 00d200d2     ................
   29c10:	00d200d2 00d200d2 00d200d2 00d200d2     ................
   29c20:	00d200d2 00d200d2 00d200d2 00d100d1     ................
   29c30:	00d100d1 00d100d1 00d100d1 00d100d1     ................
   29c40:	00d100d1 00d100d1 00d100d1 00d100d1     ................
   29c50:	00d100d1 00d100d1 00d000d1 00d000d0     ................
   29c60:	00d000d0 00d000d0 00d000d0 00d000d0     ................
   29c70:	00d000d0 00d000d0 00d000d0 00d000d0     ................
   29c80:	00d000d0 00d000d0 00cf00cf 00cf00cf     ................
   29c90:	00cf00cf 00cf00cf 00cf00cf 00cf00cf     ................
   29ca0:	00cf00cf 00cf00cf 00cf00cf 00cf00cf     ................
   29cb0:	00cf00cf 00ce00cf 00ce00ce 00ce00ce     ................
   29cc0:	00ce00ce 00ce00ce 00ce00ce 00ce00ce     ................
   29cd0:	00ce00ce 00ce00ce 00ce00ce 00ce00ce     ................
   29ce0:	00ce00ce 00cd00ce 00cd00cd 00cd00cd     ................
   29cf0:	00cd00cd 00cd00cd 00cd00cd 00cd00cd     ................
   29d00:	00cd00cd 00cd00cd 00cd00cd 00cd00cd     ................
   29d10:	00cd00cd 00cc00cc 00cc00cc 00cc00cc     ................
   29d20:	00cc00cc 00cc00cc 00cc00cc 00cc00cc     ................
   29d30:	00cc00cc 00cc00cc 00cc00cc 00cc00cc     ................
   29d40:	00cc00cc 00cb00cc 00cb00cb 00cb00cb     ................
   29d50:	00cb00cb 00cb00cb 00cb00cb 00cb00cb     ................
   29d60:	00cb00cb 00cb00cb 00cb00cb 00cb00cb     ................
   29d70:	00cb00cb 00ca00cb 00ca00ca 00ca00ca     ................
   29d80:	00ca00ca 00ca00ca 00ca00ca 00ca00ca     ................
   29d90:	00ca00ca 00ca00ca 00ca00ca 00ca00ca     ................
   29da0:	00ca00ca 00c900ca 00c900c9 00c900c9     ................
   29db0:	00c900c9 00c900c9 00c900c9 00c900c9     ................
   29dc0:	00c900c9 00c900c9 00c900c9 00c900c9     ................
   29dd0:	00c900c9 00c900c9 00c800c8 00c800c8     ................
   29de0:	00c800c8 00c800c8 00c800c8 00c800c8     ................
   29df0:	00c800c8 00c800c8 00c800c8 00c800c8     ................
   29e00:	00c800c8 00c800c8 00c700c8 00c700c7     ................
   29e10:	00c700c7 00c700c7 00c700c7 00c700c7     ................
   29e20:	00c700c7 00c700c7 00c700c7 00c700c7     ................
   29e30:	00c700c7 00c700c7 00c700c7 00c600c6     ................
   29e40:	00c600c6 00c600c6 00c600c6 00c600c6     ................
   29e50:	00c600c6 00c600c6 00c600c6 00c600c6     ................
   29e60:	00c600c6 00c600c6 00c600c6 00c600c6     ................
   29e70:	00c500c5 00c500c5 00c500c5 00c500c5     ................
   29e80:	00c500c5 00c500c5 00c500c5 00c500c5     ................
   29e90:	00c500c5 00c500c5 00c500c5 00c500c5     ................
   29ea0:	00c500c5 00c400c4 00c400c4 00c400c4     ................
   29eb0:	00c400c4 00c400c4 00c400c4 00c400c4     ................
   29ec0:	00c400c4 00c400c4 00c400c4 00c400c4     ................
   29ed0:	00c400c4 00c400c4 00c300c3 00c300c3     ................
   29ee0:	00c300c3 00c300c3 00c300c3 00c300c3     ................
   29ef0:	00c300c3 00c300c3 00c300c3 00c300c3     ................
   29f00:	00c300c3 00c300c3 00c300c3 00c200c2     ................
   29f10:	00c200c2 00c200c2 00c200c2 00c200c2     ................
   29f20:	00c200c2 00c200c2 00c200c2 00c200c2     ................
   29f30:	00c200c2 00c200c2 00c200c2 00c200c2     ................
   29f40:	00c100c1 00c100c1 00c100c1 00c100c1     ................
   29f50:	00c100c1 00c100c1 00c100c1 00c100c1     ................
   29f60:	00c100c1 00c100c1 00c100c1 00c100c1     ................
   29f70:	00c100c1 00c000c1 00c000c0 00c000c0     ................
   29f80:	00c000c0 00c000c0 00c000c0 00c000c0     ................
   29f90:	00c000c0 00c000c0 00c000c0 00c000c0     ................
   29fa0:	00c000c0 00c000c0 00c000c0 00bf00bf     ................
   29fb0:	00bf00bf 00bf00bf 00bf00bf 00bf00bf     ................
   29fc0:	00bf00bf 00bf00bf 00bf00bf 00bf00bf     ................
   29fd0:	00bf00bf 00bf00bf 00bf00bf 00bf00bf     ................
   29fe0:	00bf00bf 00be00be 00be00be 00be00be     ................
   29ff0:	00be00be 00be00be 00be00be 00be00be     ................
   2a000:	00be00be 00be00be 00be00be 00be00be     ................
   2a010:	00be00be 00be00be 00be00be 00bd00bd     ................
   2a020:	00bd00bd 00bd00bd 00bd00bd 00bd00bd     ................
   2a030:	00bd00bd 00bd00bd 00bd00bd 00bd00bd     ................
   2a040:	00bd00bd 00bd00bd 00bd00bd 00bd00bd     ................
   2a050:	00bd00bd 00bc00bc 00bc00bc 00bc00bc     ................
   2a060:	00bc00bc 00bc00bc 00bc00bc 00bc00bc     ................
   2a070:	00bc00bc 00bc00bc 00bc00bc 00bc00bc     ................
   2a080:	00bc00bc 00bc00bc 00bc00bc 00bb00bb     ................
   2a090:	00bb00bb 00bb00bb 00bb00bb 00bb00bb     ................
   2a0a0:	00bb00bb 00bb00bb 00bb00bb 00bb00bb     ................
   2a0b0:	00bb00bb 00bb00bb 00bb00bb 00bb00bb     ................
   2a0c0:	00bb00bb 00ba00ba 00ba00ba 00ba00ba     ................
   2a0d0:	00ba00ba 00ba00ba 00ba00ba 00ba00ba     ................
   2a0e0:	00ba00ba 00ba00ba 00ba00ba 00ba00ba     ................
   2a0f0:	00ba00ba 00ba00ba 00ba00ba 00b900ba     ................
   2a100:	00b900b9 00b900b9 00b900b9 00b900b9     ................
   2a110:	00b900b9 00b900b9 00b900b9 00b900b9     ................
   2a120:	00b900b9 00b900b9 00b900b9 00b900b9     ................
   2a130:	00b900b9 00b900b9 00b800b9 00b800b8     ................
   2a140:	00b800b8 00b800b8 00b800b8 00b800b8     ................
   2a150:	00b800b8 00b800b8 00b800b8 00b800b8     ................
   2a160:	00b800b8 00b800b8 00b800b8 00b800b8     ................
   2a170:	00b800b8 00b700b7 00b700b7 00b700b7     ................
   2a180:	00b700b7 00b700b7 00b700b7 00b700b7     ................
   2a190:	00b700b7 00b700b7 00b700b7 00b700b7     ................
   2a1a0:	00b700b7 00b700b7 00b700b7 00b700b7     ................
   2a1b0:	00b600b6 00b600b6 00b600b6 00b600b6     ................
   2a1c0:	00b600b6 00b600b6 00b600b6 00b600b6     ................
   2a1d0:	00b600b6 00b600b6 00b600b6 00b600b6     ................
   2a1e0:	00b600b6 00b600b6 00b600b6 00b500b5     ................
   2a1f0:	00b500b5 00b500b5 00b500b5 00b500b5     ................
   2a200:	00b500b5 00b500b5 00b500b5 00b500b5     ................
   2a210:	00b500b5 00b500b5 00b500b5 00b500b5     ................
   2a220:	00b500b5 00b500b5 00b400b5 00b400b4     ................
   2a230:	00b400b4 00b400b4 00b400b4 00b400b4     ................
   2a240:	00b400b4 00b400b4 00b400b4 00b400b4     ................
   2a250:	00b400b4 00b400b4 00b400b4 00b400b4     ................
   2a260:	00b400b4 00b400b4 00b300b3 00b300b3     ................
   2a270:	00b300b3 00b300b3 00b300b3 00b300b3     ................
   2a280:	00b300b3 00b300b3 00b300b3 00b300b3     ................
   2a290:	00b300b3 00b300b3 00b300b3 00b300b3     ................
   2a2a0:	00b300b3 00b200b3 00b200b2 00b200b2     ................
   2a2b0:	00b200b2 00b200b2 00b200b2 00b200b2     ................
   2a2c0:	00b200b2 00b200b2 00b200b2 00b200b2     ................
   2a2d0:	00b200b2 00b200b2 00b200b2 00b200b2     ................
   2a2e0:	00b200b2 00b100b1 00b100b1 00b100b1     ................
   2a2f0:	00b100b1 00b100b1 00b100b1 00b100b1     ................
   2a300:	00b100b1 00b100b1 00b100b1 00b100b1     ................
   2a310:	00b100b1 00b100b1 00b100b1 00b100b1     ................
   2a320:	00b100b1 00b000b0 00b000b0 00b000b0     ................
   2a330:	00b000b0 00b000b0 00b000b0 00b000b0     ................
   2a340:	00b000b0 00b000b0 00b000b0 00b000b0     ................
   2a350:	00b000b0 00b000b0 00b000b0 00b000b0     ................
   2a360:	00b000b0 00af00b0 00af00af 00af00af     ................
   2a370:	00af00af 00af00af 00af00af 00af00af     ................
   2a380:	00af00af 00af00af 00af00af 00af00af     ................
   2a390:	00af00af 00af00af 00af00af 00af00af     ................
   2a3a0:	00af00af 00ae00af 00ae00ae 00ae00ae     ................
   2a3b0:	00ae00ae 00ae00ae 00ae00ae 00ae00ae     ................
   2a3c0:	00ae00ae 00ae00ae 00ae00ae 00ae00ae     ................
   2a3d0:	00ae00ae 00ae00ae 00ae00ae 00ae00ae     ................
   2a3e0:	00ae00ae 00ae00ae 00ad00ad 00ad00ad     ................
   2a3f0:	00ad00ad 00ad00ad 00ad00ad 00ad00ad     ................
   2a400:	00ad00ad 00ad00ad 00ad00ad 00ad00ad     ................
   2a410:	00ad00ad 00ad00ad 00ad00ad 00ad00ad     ................
   2a420:	00ad00ad 00ad00ad 00ad00ad 00ac00ac     ................
   2a430:	00ac00ac 00ac00ac 00ac00ac 00ac00ac     ................
   2a440:	00ac00ac 00ac00ac 00ac00ac 00ac00ac     ................
   2a450:	00ac00ac 00ac00ac 00ac00ac 00ac00ac     ................
   2a460:	00ac00ac 00ac00ac 00ac00ac 00ab00ac     ................
   2a470:	00ab00ab 00ab00ab 00ab00ab 00ab00ab     ................
   2a480:	00ab00ab 00ab00ab 00ab00ab 00ab00ab     ................
   2a490:	00ab00ab 00ab00ab 00ab00ab 00ab00ab     ................
   2a4a0:	00ab00ab 00ab00ab 00ab00ab 00ab00ab     ................
   2a4b0:	00ab00ab 00aa00aa 00aa00aa 00aa00aa     ................
   2a4c0:	00aa00aa 00aa00aa 00aa00aa 00aa00aa     ................
   2a4d0:	00aa00aa 00aa00aa 00aa00aa 00aa00aa     ................
   2a4e0:	00aa00aa 00aa00aa 00aa00aa 00aa00aa     ................
   2a4f0:	00aa00aa 00aa00aa 00a900a9 00a900a9     ................
   2a500:	00a900a9 00a900a9 00a900a9 00a900a9     ................
   2a510:	00a900a9 00a900a9 00a900a9 00a900a9     ................
   2a520:	00a900a9 00a900a9 00a900a9 00a900a9     ................
   2a530:	00a900a9 00a900a9 00a900a9 00a800a9     ................
   2a540:	00a800a8 00a800a8 00a800a8 00a800a8     ................
   2a550:	00a800a8 00a800a8 00a800a8 00a800a8     ................
   2a560:	00a800a8 00a800a8 00a800a8 00a800a8     ................
   2a570:	00a800a8 00a800a8 00a800a8 00a800a8     ................
   2a580:	00a800a8 00a700a8 00a700a7 00a700a7     ................
   2a590:	00a700a7 00a700a7 00a700a7 00a700a7     ................
   2a5a0:	00a700a7 00a700a7 00a700a7 00a700a7     ................
   2a5b0:	00a700a7 00a700a7 00a700a7 00a700a7     ................
   2a5c0:	00a700a7 00a700a7 00a700a7 00a600a7     ................
   2a5d0:	00a600a6 00a600a6 00a600a6 00a600a6     ................
   2a5e0:	00a600a6 00a600a6 00a600a6 00a600a6     ................
   2a5f0:	00a600a6 00a600a6 00a600a6 00a600a6     ................
   2a600:	00a600a6 00a600a6 00a600a6 00a600a6     ................
   2a610:	00a600a6 00a500a6 00a500a5 00a500a5     ................
   2a620:	00a500a5 00a500a5 00a500a5 00a500a5     ................
   2a630:	00a500a5 00a500a5 00a500a5 00a500a5     ................
   2a640:	00a500a5 00a500a5 00a500a5 00a500a5     ................
   2a650:	00a500a5 00a500a5 00a500a5 00a500a5     ................
   2a660:	00a400a4 00a400a4 00a400a4 00a400a4     ................
   2a670:	00a400a4 00a400a4 00a400a4 00a400a4     ................
   2a680:	00a400a4 00a400a4 00a400a4 00a400a4     ................
   2a690:	00a400a4 00a400a4 00a400a4 00a400a4     ................
   2a6a0:	00a400a4 00a400a4 00a300a4 00a300a3     ................
   2a6b0:	00a300a3 00a300a3 00a300a3 00a300a3     ................
   2a6c0:	00a300a3 00a300a3 00a300a3 00a300a3     ................
   2a6d0:	00a300a3 00a300a3 00a300a3 00a300a3     ................
   2a6e0:	00a300a3 00a300a3 00a300a3 00a300a3     ................
   2a6f0:	00a300a3 00a200a2 00a200a2 00a200a2     ................
   2a700:	00a200a2 00a200a2 00a200a2 00a200a2     ................
   2a710:	00a200a2 00a200a2 00a200a2 00a200a2     ................
   2a720:	00a200a2 00a200a2 00a200a2 00a200a2     ................
   2a730:	00a200a2 00a200a2 00a200a2 00a200a2     ................
   2a740:	00a100a1 00a100a1 00a100a1 00a100a1     ................
   2a750:	00a100a1 00a100a1 00a100a1 00a100a1     ................
   2a760:	00a100a1 00a100a1 00a100a1 00a100a1     ................
   2a770:	00a100a1 00a100a1 00a100a1 00a100a1     ................
   2a780:	00a100a1 00a100a1 00a100a1 00a000a1     ................
   2a790:	00a000a0 00a000a0 00a000a0 00a000a0     ................
   2a7a0:	00a000a0 00a000a0 00a000a0 00a000a0     ................
   2a7b0:	00a000a0 00a000a0 00a000a0 00a000a0     ................
   2a7c0:	00a000a0 00a000a0 00a000a0 00a000a0     ................
   2a7d0:	00a000a0 00a000a0 00a000a0 009f009f     ................
   2a7e0:	009f009f 009f009f 009f009f 009f009f     ................
   2a7f0:	009f009f 009f009f 009f009f 009f009f     ................
   2a800:	009f009f 009f009f 009f009f 009f009f     ................
   2a810:	009f009f 009f009f 009f009f 009f009f     ................
   2a820:	009f009f 009f009f 009f009f 009e009e     ................
   2a830:	009e009e 009e009e 009e009e 009e009e     ................
   2a840:	009e009e 009e009e 009e009e 009e009e     ................
   2a850:	009e009e 009e009e 009e009e 009e009e     ................
   2a860:	009e009e 009e009e 009e009e 009e009e     ................
   2a870:	009e009e 009e009e 009e009e 009d009d     ................
   2a880:	009d009d 009d009d 009d009d 009d009d     ................
   2a890:	009d009d 009d009d 009d009d 009d009d     ................
   2a8a0:	009d009d 009d009d 009d009d 009d009d     ................
   2a8b0:	009d009d 009d009d 009d009d 009d009d     ................
   2a8c0:	009d009d 009d009d 009d009d 009c009c     ................
   2a8d0:	009c009c 009c009c 009c009c 009c009c     ................
   2a8e0:	009c009c 009c009c 009c009c 009c009c     ................
   2a8f0:	009c009c 009c009c 009c009c 009c009c     ................
   2a900:	009c009c 009c009c 009c009c 009c009c     ................
   2a910:	009c009c 009c009c 009c009c 009b009c     ................
   2a920:	009b009b 009b009b 009b009b 009b009b     ................
   2a930:	009b009b 009b009b 009b009b 009b009b     ................
   2a940:	009b009b 009b009b 009b009b 009b009b     ................
   2a950:	009b009b 009b009b 009b009b 009b009b     ................
   2a960:	009b009b 009b009b 009b009b 009b009b     ................
   2a970:	009a009b 009a009a 009a009a 009a009a     ................
   2a980:	009a009a 009a009a 009a009a 009a009a     ................
   2a990:	009a009a 009a009a 009a009a 009a009a     ................
   2a9a0:	009a009a 009a009a 009a009a 009a009a     ................
   2a9b0:	009a009a 009a009a 009a009a 009a009a     ................
   2a9c0:	009a009a 0099009a 00990099 00990099     ................
   2a9d0:	00990099 00990099 00990099 00990099     ................
   2a9e0:	00990099 00990099 00990099 00990099     ................
   2a9f0:	00990099 00990099 00990099 00990099     ................
   2aa00:	00990099 00990099 00990099 00990099     ................
   2aa10:	00990099 00990099 00990099 00980098     ................
   2aa20:	00980098 00980098 00980098 00980098     ................
   2aa30:	00980098 00980098 00980098 00980098     ................
   2aa40:	00980098 00980098 00980098 00980098     ................
   2aa50:	00980098 00980098 00980098 00980098     ................
   2aa60:	00980098 00980098 00980098 00980098     ................
   2aa70:	00970098 00970097 00970097 00970097     ................
   2aa80:	00970097 00970097 00970097 00970097     ................
   2aa90:	00970097 00970097 00970097 00970097     ................
   2aaa0:	00970097 00970097 00970097 00970097     ................
   2aab0:	00970097 00970097 00970097 00970097     ................
   2aac0:	00970097 00970097 00960097 00960096     ................
   2aad0:	00960096 00960096 00960096 00960096     ................
   2aae0:	00960096 00960096 00960096 00960096     ................
   2aaf0:	00960096 00960096 00960096 00960096     ................
   2ab00:	00960096 00960096 00960096 00960096     ................
   2ab10:	00960096 00960096 00960096 00960096     ................
   2ab20:	00950096 00950095 00950095 00950095     ................
   2ab30:	00950095 00950095 00950095 00950095     ................
   2ab40:	00950095 00950095 00950095 00950095     ................
   2ab50:	00950095 00950095 00950095 00950095     ................
   2ab60:	00950095 00950095 00950095 00950095     ................
   2ab70:	00950095 00950095 00950095 00940095     ................
   2ab80:	00940094 00940094 00940094 00940094     ................
   2ab90:	00940094 00940094 00940094 00940094     ................
   2aba0:	00940094 00940094 00940094 00940094     ................
   2abb0:	00940094 00940094 00940094 00940094     ................
   2abc0:	00940094 00940094 00940094 00940094     ................
   2abd0:	00940094 00940094 00930093 00930093     ................
   2abe0:	00930093 00930093 00930093 00930093     ................
   2abf0:	00930093 00930093 00930093 00930093     ................
   2ac00:	00930093 00930093 00930093 00930093     ................
   2ac10:	00930093 00930093 00930093 00930093     ................
   2ac20:	00930093 00930093 00930093 00930093     ................
   2ac30:	00930093 00920092 00920092 00920092     ................
   2ac40:	00920092 00920092 00920092 00920092     ................
   2ac50:	00920092 00920092 00920092 00920092     ................
   2ac60:	00920092 00920092 00920092 00920092     ................
   2ac70:	00920092 00920092 00920092 00920092     ................
   2ac80:	00920092 00920092 00920092 00920092     ................
   2ac90:	00910092 00910091 00910091 00910091     ................
   2aca0:	00910091 00910091 00910091 00910091     ................
   2acb0:	00910091 00910091 00910091 00910091     ................
   2acc0:	00910091 00910091 00910091 00910091     ................
   2acd0:	00910091 00910091 00910091 00910091     ................
   2ace0:	00910091 00910091 00910091 00910091     ................
   2acf0:	00900091 00900090 00900090 00900090     ................
   2ad00:	00900090 00900090 00900090 00900090     ................
   2ad10:	00900090 00900090 00900090 00900090     ................
   2ad20:	00900090 00900090 00900090 00900090     ................
   2ad30:	00900090 00900090 00900090 00900090     ................
   2ad40:	00900090 00900090 00900090 00900090     ................
   2ad50:	008f0090 008f008f 008f008f 008f008f     ................
   2ad60:	008f008f 008f008f 008f008f 008f008f     ................
   2ad70:	008f008f 008f008f 008f008f 008f008f     ................
   2ad80:	008f008f 008f008f 008f008f 008f008f     ................
   2ad90:	008f008f 008f008f 008f008f 008f008f     ................
   2ada0:	008f008f 008f008f 008f008f 008f008f     ................
   2adb0:	008f008f 008e008e 008e008e 008e008e     ................
   2adc0:	008e008e 008e008e 008e008e 008e008e     ................
   2add0:	008e008e 008e008e 008e008e 008e008e     ................
   2ade0:	008e008e 008e008e 008e008e 008e008e     ................
   2adf0:	008e008e 008e008e 008e008e 008e008e     ................
   2ae00:	008e008e 008e008e 008e008e 008e008e     ................
   2ae10:	008e008e 008e008e 008d008d 008d008d     ................
   2ae20:	008d008d 008d008d 008d008d 008d008d     ................
   2ae30:	008d008d 008d008d 008d008d 008d008d     ................
   2ae40:	008d008d 008d008d 008d008d 008d008d     ................
   2ae50:	008d008d 008d008d 008d008d 008d008d     ................
   2ae60:	008d008d 008d008d 008d008d 008d008d     ................
   2ae70:	008d008d 008d008d 008d008d 008c008c     ................
   2ae80:	008c008c 008c008c 008c008c 008c008c     ................
   2ae90:	008c008c 008c008c 008c008c 008c008c     ................
   2aea0:	008c008c 008c008c 008c008c 008c008c     ................
   2aeb0:	008c008c 008c008c 008c008c 008c008c     ................
   2aec0:	008c008c 008c008c 008c008c 008c008c     ................
   2aed0:	008c008c 008c008c 008c008c 008c008c     ................
   2aee0:	008b008c 008b008b 008b008b 008b008b     ................
   2aef0:	008b008b 008b008b 008b008b 008b008b     ................
   2af00:	008b008b 008b008b 008b008b 008b008b     ................
   2af10:	008b008b 008b008b 008b008b 008b008b     ................
   2af20:	008b008b 008b008b 008b008b 008b008b     ................
   2af30:	008b008b 008b008b 008b008b 008b008b     ................
   2af40:	008b008b 008b008b 008a008b 008a008a     ................
   2af50:	008a008a 008a008a 008a008a 008a008a     ................
   2af60:	008a008a 008a008a 008a008a 008a008a     ................
   2af70:	008a008a 008a008a 008a008a 008a008a     ................
   2af80:	008a008a 008a008a 008a008a 008a008a     ................
   2af90:	008a008a 008a008a 008a008a 008a008a     ................
   2afa0:	008a008a 008a008a 008a008a 008a008a     ................
   2afb0:	0089008a 00890089 00890089 00890089     ................
   2afc0:	00890089 00890089 00890089 00890089     ................
   2afd0:	00890089 00890089 00890089 00890089     ................
   2afe0:	00890089 00890089 00890089 00890089     ................
   2aff0:	00890089 00890089 00890089 00890089     ................
   2b000:	00890089 00890089 00890089 00890089     ................
   2b010:	00890089 00890089 00890089 00880089     ................
   2b020:	00880088 00880088 00880088 00880088     ................
   2b030:	00880088 00880088 00880088 00880088     ................
   2b040:	00880088 00880088 00880088 00880088     ................
   2b050:	00880088 00880088 00880088 00880088     ................
   2b060:	00880088 00880088 00880088 00880088     ................
   2b070:	00880088 00880088 00880088 00880088     ................
   2b080:	00880088 00880088 00870088 00870087     ................
   2b090:	00870087 00870087 00870087 00870087     ................
   2b0a0:	00870087 00870087 00870087 00870087     ................
   2b0b0:	00870087 00870087 00870087 00870087     ................
   2b0c0:	00870087 00870087 00870087 00870087     ................
   2b0d0:	00870087 00870087 00870087 00870087     ................
   2b0e0:	00870087 00870087 00870087 00870087     ................
   2b0f0:	00870087 00860087 00860086 00860086     ................
   2b100:	00860086 00860086 00860086 00860086     ................
   2b110:	00860086 00860086 00860086 00860086     ................
   2b120:	00860086 00860086 00860086 00860086     ................
   2b130:	00860086 00860086 00860086 00860086     ................
   2b140:	00860086 00860086 00860086 00860086     ................
   2b150:	00860086 00860086 00860086 00860086     ................
   2b160:	00860086 00850086 00850085 00850085     ................
   2b170:	00850085 00850085 00850085 00850085     ................
   2b180:	00850085 00850085 00850085 00850085     ................
   2b190:	00850085 00850085 00850085 00850085     ................
   2b1a0:	00850085 00850085 00850085 00850085     ................
   2b1b0:	00850085 00850085 00850085 00850085     ................
   2b1c0:	00850085 00850085 00850085 00850085     ................
   2b1d0:	00850085 00850085 00840084 00840084     ................
   2b1e0:	00840084 00840084 00840084 00840084     ................
   2b1f0:	00840084 00840084 00840084 00840084     ................
   2b200:	00840084 00840084 00840084 00840084     ................
   2b210:	00840084 00840084 00840084 00840084     ................
   2b220:	00840084 00840084 00840084 00840084     ................
   2b230:	00840084 00840084 00840084 00840084     ................
   2b240:	00840084 00840084 00830084 00830083     ................
   2b250:	00830083 00830083 00830083 00830083     ................
   2b260:	00830083 00830083 00830083 00830083     ................
   2b270:	00830083 00830083 00830083 00830083     ................
   2b280:	00830083 00830083 00830083 00830083     ................
   2b290:	00830083 00830083 00830083 00830083     ................
   2b2a0:	00830083 00830083 00830083 00830083     ................
   2b2b0:	00830083 00830083 00830083 00820083     ................
   2b2c0:	00820082 00820082 00820082 00820082     ................
   2b2d0:	00820082 00820082 00820082 00820082     ................
   2b2e0:	00820082 00820082 00820082 00820082     ................
   2b2f0:	00820082 00820082 00820082 00820082     ................
   2b300:	00820082 00820082 00820082 00820082     ................
   2b310:	00820082 00820082 00820082 00820082     ................
   2b320:	00820082 00820082 00820082 00820082     ................
   2b330:	00820082 00810082 00810081 00810081     ................
   2b340:	00810081 00810081 00810081 00810081     ................
   2b350:	00810081 00810081 00810081 00810081     ................
   2b360:	00810081 00810081 00810081 00810081     ................
   2b370:	00810081 00810081 00810081 00810081     ................
   2b380:	00810081 00810081 00810081 00810081     ................
   2b390:	00810081 00810081 00810081 00810081     ................
   2b3a0:	00810081 00810081 00810081 00800081     ................
   2b3b0:	00800080 00800080 00800080 00800080     ................
   2b3c0:	00800080 00800080 00800080 00800080     ................
   2b3d0:	00800080 00800080 00800080 00800080     ................
   2b3e0:	00800080 00800080 00800080 00800080     ................
   2b3f0:	00800080 00800080 00800080 00800080     ................
   2b400:	00800080 00800080 00800080 00800080     ................
   2b410:	00800080 00800080 00800080 00800080     ................
   2b420:	00800080 00800080 007f007f 007f007f     ................
   2b430:	007f007f 007f007f 007f007f 007f007f     ................
   2b440:	007f007f 007f007f 007f007f 007f007f     ................
   2b450:	007f007f 007f007f 007f007f 007f007f     ................
   2b460:	007f007f 007f007f 007f007f 007f007f     ................
   2b470:	007f007f 007f007f 007f007f 007f007f     ................
   2b480:	007f007f 007f007f 007f007f 007f007f     ................
   2b490:	007f007f 007f007f 007f007f 007f007f     ................
   2b4a0:	007f007f 007e007e 007e007e 007e007e     ....~.~.~.~.~.~.
   2b4b0:	007e007e 007e007e 007e007e 007e007e     ~.~.~.~.~.~.~.~.
   2b4c0:	007e007e 007e007e 007e007e 007e007e     ~.~.~.~.~.~.~.~.
   2b4d0:	007e007e 007e007e 007e007e 007e007e     ~.~.~.~.~.~.~.~.
   2b4e0:	007e007e 007e007e 007e007e 007e007e     ~.~.~.~.~.~.~.~.
   2b4f0:	007e007e 007e007e 007e007e 007e007e     ~.~.~.~.~.~.~.~.
   2b500:	007e007e 007e007e 007e007e 007e007e     ~.~.~.~.~.~.~.~.
   2b510:	007e007e 007e007e 007e007e 007e007e     ~.~.~.~.~.~.~.~.
   2b520:	007d007e 007d007d 007d007d 007d007d     ~.}.}.}.}.}.}.}.
   2b530:	007d007d 007d007d 007d007d 007d007d     }.}.}.}.}.}.}.}.
   2b540:	007d007d 007d007d 007d007d 007d007d     }.}.}.}.}.}.}.}.
   2b550:	007d007d 007d007d 007d007d 007d007d     }.}.}.}.}.}.}.}.
   2b560:	007d007d 007d007d 007d007d 007d007d     }.}.}.}.}.}.}.}.
   2b570:	007d007d 007d007d 007d007d 007d007d     }.}.}.}.}.}.}.}.
   2b580:	007d007d 007d007d 007d007d 007d007d     }.}.}.}.}.}.}.}.
   2b590:	007d007d 007d007d 007d007d 007d007d     }.}.}.}.}.}.}.}.
   2b5a0:	007c007d 007c007c 007c007c 007c007c     }.|.|.|.|.|.|.|.
   2b5b0:	007c007c 007c007c 007c007c 007c007c     |.|.|.|.|.|.|.|.
   2b5c0:	007c007c 007c007c 007c007c 007c007c     |.|.|.|.|.|.|.|.
   2b5d0:	007c007c 007c007c 007c007c 007c007c     |.|.|.|.|.|.|.|.
   2b5e0:	007c007c 007c007c 007c007c 007c007c     |.|.|.|.|.|.|.|.
   2b5f0:	007c007c 007c007c 007c007c 007c007c     |.|.|.|.|.|.|.|.
   2b600:	007c007c 007c007c 007c007c 007c007c     |.|.|.|.|.|.|.|.
   2b610:	007c007c 007c007c 007c007c 007c007c     |.|.|.|.|.|.|.|.
   2b620:	007c007c 007b007b 007b007b 007b007b     |.|.{.{.{.{.{.{.
   2b630:	007b007b 007b007b 007b007b 007b007b     {.{.{.{.{.{.{.{.
   2b640:	007b007b 007b007b 007b007b 007b007b     {.{.{.{.{.{.{.{.
   2b650:	007b007b 007b007b 007b007b 007b007b     {.{.{.{.{.{.{.{.
   2b660:	007b007b 007b007b 007b007b 007b007b     {.{.{.{.{.{.{.{.
   2b670:	007b007b 007b007b 007b007b 007b007b     {.{.{.{.{.{.{.{.
   2b680:	007b007b 007b007b 007b007b 007b007b     {.{.{.{.{.{.{.{.
   2b690:	007b007b 007b007b 007b007b 007b007b     {.{.{.{.{.{.{.{.
   2b6a0:	007b007b 007b007b 007a007a 007a007a     {.{.{.{.z.z.z.z.
   2b6b0:	007a007a 007a007a 007a007a 007a007a     z.z.z.z.z.z.z.z.
   2b6c0:	007a007a 007a007a 007a007a 007a007a     z.z.z.z.z.z.z.z.
   2b6d0:	007a007a 007a007a 007a007a 007a007a     z.z.z.z.z.z.z.z.
   2b6e0:	73202f2f 64207465 20696769 73746f70     // set digi pots
   2b6f0:	206f7420 726f7473 64206465 75616665      to stored defau
   2b700:	7620746c 65756c61 25282073 64253a73     lt values (%s:%d
   2b710:	00000a29 2f637273 6867694d 6f427974     )...src/MightyBo
   2b720:	2f647261 68746f4d 6f627265 2f647261     ard/Motherboard/
   2b730:	70657453 73726570 0063632e 20646e65     Steppers.cc.end 
   2b740:	4920666f 5074696e 20736e69 3a732528     of InitPins (%s:
   2b750:	0a296425 00000000                       %d).....

0002b758 <rate_table_fast>:
   2b758:	797a7a7a 78797979 78787878 77777777     zzzyyyyxxxxxwwww
   2b768:	76767676 75757575 74747475 73737474     vvvvuuuuutttttss
   2b778:	72727373 71727272 71717171 70707070     ssrrrrrqqqqqpppp
   2b788:	6f6f6f70 6e6e6f6f 6d6e6e6e 6d6d6d6d     pooooonnnnnmmmmm
   2b798:	6c6c6c6d 6b6b6c6c 6a6b6b6b 6a6a6a6a     mlllllkkkkkjjjjj
   2b7a8:	6969696a 68696969 68686868 67676767     jiiiiiihhhhhgggg
   2b7b8:	66666767 66666666 65656565 64646565     ggffffffeeeeeedd
   2b7c8:	64646464 63636364 62636363 62626262     dddddccccccbbbbb
   2b7d8:	61616262 61616161 60606060 5f606060     bbaaaaaa```````_
   2b7e8:	5f5f5f5f 5e5e5f5f 5e5e5e5e 5d5d5d5e     ______^^^^^^^]]]
   2b7f8:	5d5d5d5d 5c5c5c5c 5c5c5c5c 5b5b5b5b     ]]]]\\\\\\\\[[[[
   2b808:	5a5b5b5b 5a5a5a5a 595a5a5a 59595959     [[[ZZZZZZZZYYYYY
   2b818:	58595959 58585858 57585858 57575757     YYYXXXXXXXXWWWWW
   2b828:	56575757 56565656 55565656 55555555     WWWVVVVVVVVUUUUU
   2b838:	55555555 54545454 54545454 53535354     UUUUTTTTTTTTTSSS
   2b848:	53535353 52525353 52525252 51525252     SSSSSSRRRRRRRRRQ
   2b858:	51515151 51515151 50505051 50505050     QQQQQQQQQPPPPPPP
   2b868:	4f505050 4f4f4f4f 4f4f4f4f 4e4e4e4f     PPPOOOOOOOOOONNN
   2b878:	4e4e4e4e 4d4e4e4e 4d4d4d4d 4d4d4d4d     NNNNNNNMMMMMMMMM
   2b888:	4c4c4c4d 4c4c4c4c 4c4c4c4c 4b4b4b4b     MLLLLLLLLLLLKKKK
   2b898:	4b4b4b4b 4a4b4b4b 4a4a4a4a 4a4a4a4a     KKKKKKKJJJJJJJJJ
   2b8a8:	494a4a4a 49494949 49494949 48494949     JJJIIIIIIIIIIIIH
   2b8b8:	48484848 48484848 47484848 47474747     HHHHHHHHHHHGGGGG
   2b8c8:	47474747 46474747 46464646 46464646     GGGGGGGFFFFFFFFF
   2b8d8:	46464646 45454545 45454545 45454545     FFFFEEEEEEEEEEEE
   2b8e8:	44444445 44444444 44444444 43434444     EDDDDDDDDDDDDDCC
   2b8f8:	43434343 43434343 43434343 42424242     CCCCCCCCCCCCBBBB
   2b908:	42424242 42424242 41424242 41414141     BBBBBBBBBBBAAAAA
   2b918:	41414141 41414141 40404041 40404040     AAAAAAAAA@@@@@@@
   2b928:	40404040 40404040 3f3f3f40 3f3f3f3f     @@@@@@@@@???????
   2b938:	3f3f3f3f 3f3f3f3f 3e3e3e3f 3e3e3e3e     ?????????>>>>>>>
   2b948:	3e3e3e3e 3e3e3e3e 3d3d3d3e 3d3d3d3d     >>>>>>>>>=======
   2b958:	3d3d3d3d 3d3d3d3d 3c3c3d3d 3c3c3c3c     ==========<<<<<<
   2b968:	3c3c3c3c 3c3c3c3c 3b3c3c3c 3b3b3b3b     <<<<<<<<<<<;;;;;
   2b978:	3b3b3b3b 3b3b3b3b 3b3b3b3b 3a3a3a3b     ;;;;;;;;;;;;;:::
   2b988:	3a3a3a3a 3a3a3a3a 3a3a3a3a 393a3a3a     :::::::::::::::9
   2b998:	39393939 39393939 39393939 39393939     9999999999999999
   2b9a8:	38393939 38383838 38383838 38383838     9998888888888888
   2b9b8:	38383838 37383838 37373737 37373737     8888888777777777
   2b9c8:	37373737 37373737 36373737 36363636     7777777777766666
   2b9d8:	36363636 36363636 36363636 36363636     6666666666666666
   2b9e8:	35353536 35353535 35353535 35353535     6555555555555555
   2b9f8:	35353535 34353535 34343434 34343434     5555555444444444
   2ba08:	34343434 34343434 34343434 33333434     4444444444444433
   2ba18:	33333333 33333333 33333333 33333333     3333333333333333
   2ba28:	33333333 32323333 32323232 32323232     3333332222222222
   2ba38:	32323232 32323232 32323232 31323232     2222222222222221
   2ba48:	31313131 31313131 31313131 31313131     1111111111111111
   2ba58:	31313131 31313131 30303031 30303030     1111111110000000
   2ba68:	30303030 30303030 30303030 30303030     0000000000000000
   2ba78:	30303030 2f2f2f2f 2f2f2f2f 2f2f2f2f     0000////////////
   2ba88:	2f2f2f2f 2f2f2f2f 2f2f2f2f 2f2f2f2f     ////////////////
   2ba98:	2e2e2e2f 2e2e2e2e 2e2e2e2e 2e2e2e2e     /...............
   2baa8:	2e2e2e2e 2e2e2e2e 2e2e2e2e 2d2d2e2e     ..............--
   2bab8:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   2bac8:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2c2c2c2d     -------------,,,
   2bad8:	2c2c2c2c 2c2c2c2c 2c2c2c2c 2c2c2c2c     ,,,,,,,,,,,,,,,,
   2bae8:	2c2c2c2c 2c2c2c2c 2c2c2c2c 2b2b2b2c     ,,,,,,,,,,,,,+++
   2baf8:	2b2b2b2b 2b2b2b2b 2b2b2b2b 2b2b2b2b     ++++++++++++++++
   2bb08:	2b2b2b2b 2b2b2b2b 2b2b2b2b 2a2b2b2b     +++++++++++++++*
   2bb18:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   2bb28:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   2bb38:	292a2a2a 29292929 29292929 29292929     ***)))))))))))))
   2bb48:	29292929 29292929 29292929 29292929     ))))))))))))))))
   2bb58:	29292929 29292929 28282828 28282828     ))))))))((((((((
   2bb68:	28282828 28282828 28282828 28282828     ((((((((((((((((
   2bb78:	28282828 28282828 28282828 27282828     ((((((((((((((('
   2bb88:	27272727 27272727 27272727 27272727     ''''''''''''''''
   2bb98:	27272727 27272727 27272727 27272727     ''''''''''''''''
   2bba8:	27272727 27272727 26262626 26262626     ''''''''&&&&&&&&
   2bbb8:	26262626 26262626 26262626 26262626     &&&&&&&&&&&&&&&&
   2bbc8:	26262626 26262626 26262626 26262626     &&&&&&&&&&&&&&&&
   2bbd8:	25262626 25252525 25252525 25252525     &&&%%%%%%%%%%%%%
   2bbe8:	25252525 25252525 25252525 25252525     %%%%%%%%%%%%%%%%
   2bbf8:	25252525 25252525 25252525 25252525     %%%%%%%%%%%%%%%%
   2bc08:	24242425 24242424 24242424 24242424     %$$$$$$$$$$$$$$$
   2bc18:	24242424 24242424 24242424 24242424     $$$$$$$$$$$$$$$$
   2bc28:	24242424 24242424 24242424 24242424     $$$$$$$$$$$$$$$$
   2bc38:	23232324 23232323 23232323 23232323     $###############
   2bc48:	23232323 23232323 23232323 23232323     ################
   2bc58:	23232323 23232323 23232323 23232323     ################
   2bc68:	23232323 22222222 22222222 22222222     ####""""""""""""
   2bc78:	22222222 22222222 22222222 22222222     """"""""""""""""
   2bc88:	22222222 22222222 22222222 22222222     """"""""""""""""
   2bc98:	22222222 22222222 21212222 21212121     """"""""""!!!!!!
   2bca8:	21212121 21212121 21212121 21212121     !!!!!!!!!!!!!!!!
   2bcb8:	21212121 21212121 21212121 21212121     !!!!!!!!!!!!!!!!
   2bcc8:	21212121 21212121 21212121 21212121     !!!!!!!!!!!!!!!!
   2bcd8:	21212121 20202020 20202020 20202020     !!!!            
   2bce8:	20202020 20202020 20202020 20202020                     
   2bcf8:	20202020 20202020 20202020 20202020                     
   2bd08:	20202020 20202020 20202020 20202020                     
   2bd18:	1f1f1f20 1f1f1f1f 1f1f1f1f 1f1f1f1f      ...............
   2bd28:	1f1f1f1f 1f1f1f1f 1f1f1f1f 1f1f1f1f     ................
   2bd38:	1f1f1f1f 1f1f1f1f 1f1f1f1f 1f1f1f1f     ................
   2bd48:	1f1f1f1f 1f1f1f1f 1f1f1f1f 1f1f1f1f     ................
   2bd58:	0000001e 74696e69 6c616e41 6950676f     ....initAnalogPi
   2bd68:	6970206e 64253a6e 73252820 2964253a     n pin:%d (%s:%d)
   2bd78:	0000000a 2f637273 6867694d 6f427974     ....src/MightyBo
   2bd88:	2f647261 72616873 412f6465 6f6c616e     ard/shared/Analo
   2bd98:	6e695067 0063632e 2d6e6970 253a3332     gPin.cc.pin-23:%
   2bda8:	25282064 64253a73 00000a29 72617453     d (%s:%d)...Star
   2bdb8:	64412074 73657264 78253a73 78654820     t Address:%x Hex
   2bdc8:	69727720 6e657474 2578303a 68632078      written:0x%x ch
   2bdd8:	77207261 74746972 253a6e65 00000a63     ar written:%c...
   2bde8:	74616548 3a3a7265 65736572 20292874     Heater::reset() 
   2bdf8:	3a732528 0a296425 00000000 2f637273     (%s:%d).....src/
   2be08:	6867694d 6f427974 2f647261 72616873     MightyBoard/shar
   2be18:	482f6465 65746165 63632e72 00000000     ed/Heater.cc....

0002be28 <vtable for Thermistor>:
	...
   2be30:	000121d5 000121e1 000121f5 00012531     .!...!...!..1%..

0002be40 <default_therm_table>:
   2be40:	012c005c 01220069 01180079 010e008c     \.,.i.".y.......
   2be50:	010400a2 00fa00bd 00f000de 00e60105     ................
   2be60:	00dc0134 00d2016d 00c801b2 00be0207     4...m...........
   2be70:	00b4026d 00aa02e8 00a0037b 0096042b     m.......{...+...
   2be80:	008c04f8 008205e3 007806eb 006e080a     ..........x...n.
   2be90:	00640935 005a0a61 00500b7f 00460c84     5.d.a.Z...P...F.
   2bea0:	003c0d65 00320e1e 00280eb0 001e0f1d     e.<...2...(.....
   2beb0:	00140f6c 000a0fa3 00000fc7 5f425355     l...........USB_
   2bec0:	74696e49 73252820 2964253a 0000000a     Init (%s:%d)....
   2bed0:	2f637273 6867694d 6f427974 2f647261     src/MightyBoard/
   2bee0:	72616873 552f6465 2e545241 00006363     shared/UART.cc..
   2bef0:	55203462 63204253 69666e6f 25282067     b4 USB config (%
   2bf00:	64253a73 00000a29 38347372 25282035     s:%d)...rs485 (%
   2bf10:	64253a73 00000a29 20646e65 54524155     s:%d)...end UART
   2bf20:	6e693a3a 735f7469 61697265 2528206c     ::init_serial (%
   2bf30:	64253a73 00000a29 2074756f 00006425     s:%d)...out %d..
   2bf40:	00642520 5f425355 6e6e6f43 28746365      %d.USB_Connect(
   2bf50:	45555254 25282029 64253a73 00000a29     TRUE) (%s:%d)...
   2bf60:	65746661 53552072 6f435f42 63656e6e     after USB_Connec
   2bf70:	52542874 20294555 3a732528 0a296425     t(TRUE) (%s:%d).
   2bf80:	00000000 74726155 69442030 6c626173     ....Uart0 Disabl
   2bf90:	28206465 253a7325 000a2964 74726155     ed (%s:%d)..Uart
   2bfa0:	6e452031 656c6261 25282064 64253a73     1 Enabled (%s:%d
   2bfb0:	00000a29 74726155 69442031 6c626173     )...Uart1 Disabl
   2bfc0:	28206465 253a7325 000a2964 20646e65     ed (%s:%d)..end 
   2bfd0:	54524155 6e653a3a 656c6261 73252820     UART::enable (%s
   2bfe0:	2964253a 0000000a 54524155 52495f31     :%d)....UART1_IR
   2bff0:	25282051 64253a73 00000a29 006e690a     Q (%s:%d)....in.
   2c000:	65727570 72697620 6c617574 74656d20     pure virtual met
   2c010:	20646f68 6c6c6163 000a6465              hod called..

0002c01c <typeinfo for __gnu_cxx::recursive_init_error>:
   2c01c:	0002c070 0002c028 0002ce18              p...(.......

0002c028 <typeinfo name for __gnu_cxx::recursive_init_error>:
   2c028:	5f5f394e 5f756e67 32787863 63657230     N9__gnu_cxx20rec
   2c038:	69737275 695f6576 5f74696e 6f727265     ursive_init_erro
   2c048:	00004572 00000000                       rE......

0002c050 <vtable for __gnu_cxx::recursive_init_error>:
   2c050:	00000000 0002c01c 00014acd 00014ae1     .........J...J..
   2c060:	0001eda1 00000000                       ........

0002c068 <vtable for __cxxabiv1::__si_class_type_info>:
   2c068:	00000000 0002c098 00014e8d 00014ea1     .........N...N..
   2c078:	00014fc5 00014fc9 0001f591 0001f4cd     .O...O..........
   2c088:	00014eb5 00014edd 00014f69 00000000     .N...N..iO......

0002c098 <typeinfo for __cxxabiv1::__si_class_type_info>:
   2c098:	0002c070 0002c0a4 0002cf10              p...........

0002c0a4 <typeinfo name for __cxxabiv1::__si_class_type_info>:
   2c0a4:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   2c0b4:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   2c0c4:	456f666e 00000000                       nfoE....

0002c0cc <typeinfo for std::type_info>:
   2c0cc:	0002cee8 0002c0d4                       ........

0002c0d4 <typeinfo name for std::type_info>:
   2c0d4:	74397453 5f657079 6f666e69 00000000     St9type_info....
   2c0e4:	00000000                                ....

0002c0e8 <vtable for std::type_info>:
   2c0e8:	00000000 0002c0cc 00014fb9 00014fd1     .........O...O..
   2c0f8:	00014fc5 00014fc9 00015021 00014fcd     .O...O..!P...O..
   2c108:	6d726574 74616e69 61632065 64656c6c     terminate called
   2c118:	63657220 69737275 796c6576 0000000a      recursively....
   2c128:	6d726574 74616e69 61632065 64656c6c     terminate called
   2c138:	74666120 74207265 776f7268 20676e69      after throwing 
   2c148:	69206e61 6174736e 2065636e 2720666f     an instance of '
   2c158:	00000000 00000a27 6d726574 74616e69     ....'...terminat
   2c168:	61632065 64656c6c 74697720 74756f68     e called without
   2c178:	206e6120 69746361 65206576 70656378      an active excep
   2c188:	6e6f6974 0000000a 68772020 29287461     tion....  what()
   2c198:	0020203a                                :  .

0002c19c <standard_subs>:
   2c19c:	00000074 0002c878 00000003 0002c878     t...x.......x...
   2c1ac:	00000003 00000000 00000000 00000061     ............a...
   2c1bc:	0002caf4 0000000e 0002caf4 0000000e     ................
   2c1cc:	0002cb04 00000009 00000062 0002cb10     ........b.......
   2c1dc:	00000011 0002cb10 00000011 0002cb24     ............$...
   2c1ec:	0000000c 00000073 0002cb34 0000000b     ....s...4.......
   2c1fc:	0002cb40 00000046 0002cb24 0000000c     @...F...$.......
   2c20c:	00000069 0002cb88 0000000c 0002cb98     i...............
   2c21c:	00000031 0002cbcc 0000000d 0000006f     1...........o...
   2c22c:	0002cbdc 0000000c 0002cbec 00000031     ............1...
   2c23c:	0002cc20 0000000d 00000064 0002cc30      .......d...0...
   2c24c:	0000000d 0002cc40 00000032 0002cc74     ....@...2...t...
   2c25c:	0000000e                                ....

0002c260 <cplus_demangle_builtin_types>:
   2c260:	0002c998 0000000b 0002c998 0000000b     ................
   2c270:	00000000 0002c9a4 00000004 0002c9ac     ................
   2c280:	00000007 00000007 0002c9b4 00000004     ................
   2c290:	0002c9bc 00000004 00000000 0002c9c4     ................
   2c2a0:	00000006 0002c9c4 00000006 00000008     ................
   2c2b0:	0002c9cc 0000000b 0002c9cc 0000000b     ................
   2c2c0:	00000008 0002c9d8 00000005 0002c9d8     ................
   2c2d0:	00000005 00000008 0002c9e0 0000000a     ................
   2c2e0:	0002c9e0 0000000a 00000008 0002c9ec     ................
   2c2f0:	0000000d 0002c9ec 0000000d 00000000     ................
   2c300:	0002c9fc 00000003 0002c9fc 00000003     ................
   2c310:	00000001 0002ca00 0000000c 0002ca10     ................
   2c320:	00000008 00000002 00000000 00000000     ................
	...
   2c33c:	0002ca1c 00000004 0002ca1c 00000004     ................
   2c34c:	00000003 0002ca24 0000000d 0002ca24     ....$.......$...
   2c35c:	0000000d 00000004 0002ca34 00000008     ........4.......
   2c36c:	0002ca34 00000008 00000000 0002ca40     4...........@...
   2c37c:	00000011 0002ca40 00000011 00000000     ....@...........
	...
   2c3c8:	0002ca54 00000005 0002ca54 00000005     T.......T.......
   2c3d8:	00000000 0002ca5c 0000000e 0002ca5c     ....\.......\...
   2c3e8:	0000000e 00000000 00000000 00000000     ................
	...
   2c404:	0002ca6c 00000004 0002ca6c 00000004     l.......l.......
   2c414:	00000009 0002ca74 00000007 0002c9b4     ....t...........
   2c424:	00000004 00000000 0002ca7c 00000009     ........|.......
   2c434:	0002ca1c 00000004 00000005 0002ca88     ................
   2c444:	00000012 0002ca88 00000012 00000006     ................
   2c454:	0002c954 00000003 0002c954 00000003     T.......T.......
   2c464:	00000000 0002ca9c 00000009 0002ca9c     ................
   2c474:	00000009 00000000 0002caa8 00000009     ................
   2c484:	0002caa8 00000009 00000000 0002cab4     ................
   2c494:	0000000a 0002cab4 0000000a 00000000     ................
   2c4a4:	0002cac0 00000004 0002cac0 00000004     ................
   2c4b4:	00000008 0002cac8 00000008 0002cac8     ................
   2c4c4:	00000008 00000000 0002cad4 00000008     ................
   2c4d4:	0002cad4 00000008 00000000 0002cae0     ................
   2c4e4:	00000011 0002cae0 00000011 00000000     ................

0002c4f4 <cplus_demangle_operators>:
   2c4f4:	0002cc84 0002cc88 00000002 00000002     ................
   2c504:	0002cc8c 0002cc90 00000001 00000002     ................
   2c514:	0002cc94 0002cc98 00000002 00000002     ................
   2c524:	0002cc9c 0002cca0 00000001 00000001     ................
   2c534:	0002cca4 0002cca0 00000001 00000002     ................
   2c544:	0002c880 0002cca8 00000002 00000002     ................
   2c554:	0002ccac 0002ccb0 00000001 00000002     ................
   2c564:	0002ccb4 0002ccb8 00000001 00000001     ................
   2c574:	0002ccbc 0002ccc0 00000002 00000002     ................
   2c584:	0002ccc4 0002ccc8 00000008 00000001     ................
   2c594:	0002ccd4 0002ccd8 00000001 00000001     ................
   2c5a4:	0002ccdc 0002cce0 00000006 00000001     ................
   2c5b4:	0002c884 00027620 00000001 00000002     .... v..........
   2c5c4:	0002cce8 000276c8 00000001 00000002     .....v..........
   2c5d4:	0002ccec 0002ccf0 00000002 00000002     ................
   2c5e4:	0002ccf4 0002ccf8 00000001 00000002     ................
   2c5f4:	0002ccfc 0002cd00 00000002 00000002     ................
   2c604:	0002cd04 0002cd08 00000002 00000002     ................
   2c614:	0002cd0c 0002cbc8 00000001 00000002     ................
   2c624:	0002c92c 0002c894 00000002 00000002     ,...............
   2c634:	0002cd10 0002cd14 00000003 00000002     ................
   2c644:	0002c9c8 0002cd18 00000002 00000002     ................
   2c654:	0002cd1c 0002cd20 00000002 00000002     .... ...........
   2c664:	0002cd24 0002cd28 00000001 00000002     $...(...........
   2c674:	0002cd2c 0002cd30 00000002 00000002     ,...0...........
   2c684:	0002cd34 0002cd38 00000002 00000002     4...8...........
   2c694:	0002cd3c 0002cd40 00000001 00000002     <...@...........
   2c6a4:	0002cd44 0002ccd8 00000001 00000002     D...............
   2c6b4:	0002cd48 0002cd4c 00000002 00000001     H...L...........
   2c6c4:	0002cd50 0002cd54 00000005 00000001     P...T...........
   2c6d4:	0002cd5c 0002cd60 00000002 00000002     \...`...........
   2c6e4:	0002ca98 0002cd40 00000001 00000001     ....@...........
   2c6f4:	0002cd64 0002cd68 00000001 00000001     d...h...........
   2c704:	0002cd6c 0002cd70 00000003 00000001     l...p...........
   2c714:	0002cd74 0002cd78 00000002 00000002     t...x...........
   2c724:	0002cd7c 0002cd80 00000002 00000002     |...............
   2c734:	0002743c 0002cd84 00000001 00000002     <t..............
   2c744:	0002cd88 0002cd8c 00000002 00000002     ................
   2c754:	0002cd90 0002cd94 00000001 00000002     ................
   2c764:	0002cd98 0002cd9c 00000003 00000002     ................
   2c774:	0002cda0 0002cda4 00000002 00000001     ................
   2c784:	0002cda8 0002cd94 00000001 00000001     ................
   2c794:	0002c888 0002cdac 00000002 00000002     ................
   2c7a4:	0002cdb0 0002cdb4 00000001 00000003     ................
   2c7b4:	0002cdb8 0002cdbc 00000002 00000002     ................
   2c7c4:	0002cdc0 0002cdc4 00000003 00000002     ................
   2c7d4:	0002cdc8 0002cdcc 00000001 00000002     ................
   2c7e4:	0002cdd0 0002cdd4 00000002 00000002     ................
   2c7f4:	0002c87c 0002cdd8 00000007 00000001     |...............
   2c804:	0002cde0 0002cdd8 00000007 00000001     ................
   2c814:	0002cde4 0002cde8 00000008 00000001     ................
   2c824:	0002cdf4 0002cde8 00000008 00000001     ................
	...
   2c844:	4f4c475f 5f4c4142 00000000 6f6e6128     _GLOBAL_....(ano
   2c854:	6f6d796e 6e207375 73656d61 65636170     nymous namespace
   2c864:	00000029 69727473 6c20676e 72657469     )...string liter
   2c874:	00006c61 00647473 00007473 00006c63     al..std.st..cl..
   2c884:	00007464 00007470 7272414a 00007961     dt..pt..JArray..
   2c894:	00005d5b 736e6f63 63757274 6e6f6974     []..construction
   2c8a4:	61747620 20656c62 20726f66 00000000      vtable for ....
   2c8b4:	65707974 6f666e69 6d616e20 6f662065     typeinfo name fo
   2c8c4:	00002072 2d6e6f6e 74726976 206c6175     r ..non-virtual 
   2c8d4:	6e756874 6f74206b 00000020 61766f63     thunk to ...cova
   2c8e4:	6e616972 65722074 6e727574 75687420     riant return thu
   2c8f4:	74206b6e 0000206f 72617567 61762064     nk to ..guard va
   2c904:	62616972 6620656c 0020726f 65666572     riable for .refe
   2c914:	636e6572 65742065 726f706d 20797261     rence temporary 
   2c924:	20726f66 00000000 00007869 00203a20     for ....ix.. : .
   2c934:	00006c75 00006c6c 006c6c75 736c6166     ul..ll..ull.fals
   2c944:	00000065 65757274 00000000 00646c25     e...true....%ld.
   2c954:	002e2e2e 626f6c67 63206c61 74736e6f     ....global const
   2c964:	74637572 2073726f 6579656b 6f742064     ructors keyed to
   2c974:	00000020 626f6c67 64206c61 72747365      ...global destr
   2c984:	6f746375 6b207372 64657965 206f7420     uctors keyed to 
   2c994:	00000000 6e676973 63206465 00726168     ....signed char.
   2c9a4:	6c6f6f62 00000000 6c6f6f62 006e6165     bool....boolean.
   2c9b4:	72616863 00000000 65747962 00000000     char....byte....
   2c9c4:	62756f64 0000656c 676e6f6c 756f6420     double..long dou
   2c9d4:	00656c62 616f6c66 00000074 6c665f5f     ble.float...__fl
   2c9e4:	3174616f 00003832 69736e75 64656e67     oat128..unsigned
   2c9f4:	61686320 00000072 00746e69 69736e75      char...int.unsi
   2ca04:	64656e67 746e6920 00000000 69736e75     gned int....unsi
   2ca14:	64656e67 00000000 676e6f6c 00000000     gned....long....
   2ca24:	69736e75 64656e67 6e6f6c20 00000067     unsigned long...
   2ca34:	6e695f5f 38323174 00000000 69736e75     __int128....unsi
   2ca44:	64656e67 695f5f20 3231746e 00000038     gned __int128...
   2ca54:	726f6873 00000074 69736e75 64656e67     short...unsigned
   2ca64:	6f687320 00007472 64696f76 00000000      short..void....
   2ca74:	61686377 00745f72 676e6f6c 6e6f6c20     wchar_t.long lon
   2ca84:	00000067 69736e75 64656e67 6e6f6c20     g...unsigned lon
   2ca94:	6f6c2067 0000676e 69636564 336c616d     g long..decimal3
   2caa4:	00000032 69636564 366c616d 00000034     2...decimal64...
   2cab4:	69636564 316c616d 00003832 666c6168     decimal128..half
   2cac4:	00000000 72616863 745f3631 00000000     ....char16_t....
   2cad4:	72616863 745f3233 00000000 6c636564     char32_t....decl
   2cae4:	65707974 6c756e28 7274706c 00000029     type(nullptr)...
   2caf4:	3a647473 6c6c613a 7461636f 0000726f     std::allocator..
   2cb04:	6f6c6c61 6f746163 00000072 3a647473     allocator...std:
   2cb14:	7361623a 735f6369 6e697274 00000067     :basic_string...
   2cb24:	69736162 74735f63 676e6972 00000000     basic_string....
   2cb34:	3a647473 7274733a 00676e69 3a647473     std::string.std:
   2cb44:	7361623a 735f6369 6e697274 68633c67     :basic_string<ch
   2cb54:	202c7261 3a647473 6168633a 72745f72     ar, std::char_tr
   2cb64:	73746961 6168633c 202c3e72 3a647473     aits<char>, std:
   2cb74:	6c6c613a 7461636f 633c726f 3e726168     :allocator<char>
   2cb84:	00003e20 3a647473 7473693a 6d616572      >..std::istream
   2cb94:	00000000 3a647473 7361623a 695f6369     ....std::basic_i
   2cba4:	65727473 633c6d61 2c726168 64747320     stream<char, std
   2cbb4:	68633a3a 745f7261 74696172 68633c73     ::char_traits<ch
   2cbc4:	203e7261 0000003e 69736162 73695f63     ar> >...basic_is
   2cbd4:	61657274 0000006d 3a647473 74736f3a     tream...std::ost
   2cbe4:	6d616572 00000000 3a647473 7361623a     ream....std::bas
   2cbf4:	6f5f6369 65727473 633c6d61 2c726168     ic_ostream<char,
   2cc04:	64747320 68633a3a 745f7261 74696172      std::char_trait
   2cc14:	68633c73 203e7261 0000003e 69736162     s<char> >...basi
   2cc24:	736f5f63 61657274 0000006d 3a647473     c_ostream...std:
   2cc34:	736f693a 61657274 0000006d 3a647473     :iostream...std:
   2cc44:	7361623a 695f6369 7274736f 3c6d6165     :basic_iostream<
   2cc54:	72616863 7473202c 633a3a64 5f726168     char, std::char_
   2cc64:	69617274 633c7374 3e726168 00003e20     traits<char> >..
   2cc74:	69736162 6f695f63 65727473 00006d61     basic_iostream..
   2cc84:	00004e61 00003d26 00005361 0000003d     aN..&=..aS..=...
   2cc94:	00006161 00002626 00006461 00000026     aa..&&..ad..&...
   2cca4:	00006e61 00002928 00006d63 0000002c     an..()..cm..,...
   2ccb4:	00006f63 0000007e 00005664 00003d2f     co..~...dV../=..
   2ccc4:	00006164 656c6564 5d5b6574 00000000     da..delete[]....
   2ccd4:	00006564 0000002a 00006c64 656c6564     de..*...dl..dele
   2cce4:	00006574 00007664 00004f65 00003d5e     te..dv..eO..^=..
   2ccf4:	00006f65 0000005e 00007165 00003d3d     eo..^...eq..==..
   2cd04:	00006567 00003d3e 00007467 0000536c     ge..>=..gt..lS..
   2cd14:	003d3c3c 00003d3c 0000736c 00003c3c     <<=.<=..ls..<<..
   2cd24:	0000746c 0000003c 0000496d 00003d2d     lt..<...mI..-=..
   2cd34:	00004c6d 00003d2a 0000696d 0000002d     mL..*=..mi..-...
   2cd44:	00006c6d 00006d6d 00002d2d 0000616e     ml..mm..--..na..
   2cd54:	5b77656e 0000005d 0000656e 00003d21     new[]...ne..!=..
   2cd64:	0000746e 00000021 0000776e 0077656e     nt..!...nw..new.
   2cd74:	0000526f 00003d7c 00006f6f 00007c7c     oR..|=..oo..||..
   2cd84:	0000007c 00004c70 00003d2b 00006c70     |...pL..+=..pl..
   2cd94:	0000002b 00006d70 002a3e2d 00007070     +...pm..->*.pp..
   2cda4:	00002b2b 00007370 00003e2d 00007571     ++..ps..->..qu..
   2cdb4:	0000003f 00004d72 00003d25 00005372     ?...rM..%=..rS..
   2cdc4:	003d3e3e 00006d72 00000025 00007372     >>=.rm..%...rs..
   2cdd4:	00003e3e 657a6973 0020666f 00007a73     >>..sizeof .sz..
   2cde4:	00007461 67696c61 20666f6e 00000000     at..alignof ....
   2cdf4:	00007a61                                az..

0002cdf8 <vtable for std::exception>:
   2cdf8:	00000000 0002ce18 0001ed89 0001edcd     ................
   2ce08:	0001eda1 00000000                       ........

0002ce10 <typeinfo for __cxxabiv1::__forced_unwind>:
   2ce10:	0002cee8 0002ceb0                       ........

0002ce18 <typeinfo for std::exception>:
   2ce18:	0002cee8 0002cea0                       ........

0002ce20 <typeinfo name for std::bad_exception>:
   2ce20:	33317453 5f646162 65637865 6f697470     St13bad_exceptio
   2ce30:	0000006e 3a647473 6378653a 69747065     n...std::excepti
   2ce40:	00006e6f 3a647473 6461623a 6378655f     on..std::bad_exc
   2ce50:	69747065 00006e6f                       eption..

0002ce58 <typeinfo name for __cxxabiv1::__foreign_exception>:
   2ce58:	5f30314e 7878635f 76696261 5f393131     N10__cxxabiv119_
   2ce68:	726f665f 6e676965 6378655f 69747065     _foreign_excepti
   2ce78:	00456e6f                                onE.

0002ce7c <typeinfo for __cxxabiv1::__foreign_exception>:
   2ce7c:	0002cee8 0002ce58 00000000              ....X.......

0002ce88 <vtable for std::bad_exception>:
   2ce88:	00000000 0002ced0 0001ed95 0001edb9     ................
   2ce98:	0001edad 00000000                       ........

0002cea0 <typeinfo name for std::exception>:
   2cea0:	65397453 70656378 6e6f6974 00000000     St9exception....

0002ceb0 <typeinfo name for __cxxabiv1::__forced_unwind>:
   2ceb0:	5f30314e 7878635f 76696261 5f353131     N10__cxxabiv115_
   2cec0:	726f665f 5f646563 69776e75 0045646e     _forced_unwindE.

0002ced0 <typeinfo for std::bad_exception>:
   2ced0:	0002c070 0002ce20 0002ce18 00000000     p... ...........

0002cee0 <vtable for __cxxabiv1::__class_type_info>:
   2cee0:	00000000 0002cf10 0001f52d 0001f541     ........-...A...
   2cef0:	00014fc5 00014fc9 0001f591 0001f4cd     .O...O..........
   2cf00:	0001f511 0001f555 0001f505 00000000     ....U...........

0002cf10 <typeinfo for __cxxabiv1::__class_type_info>:
   2cf10:	0002c070 0002cf1c 0002c0cc              p...........

0002cf1c <typeinfo name for __cxxabiv1::__class_type_info>:
   2cf1c:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   2cf2c:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   2cf3c:	00000045 74727173 00000000              E...sqrt....

0002cf48 <_global_impure_ptr>:
   2cf48:	1000002c 00000043                       ,...C...

0002cf50 <blanks.6603>:
   2cf50:	20202020 20202020 20202020 20202020                     

0002cf60 <zeroes.6604>:
   2cf60:	30303030 30303030 30303030 30303030     0000000000000000
   2cf70:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
   2cf80:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   2cf90:	00000000 33323130 37363534 62613938     ....0123456789ab
   2cfa0:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
   2cfb0:	00000030                                0...

0002cfb4 <_ctype_>:
   2cfb4:	20202000 20202020 28282020 20282828     .         ((((( 
   2cfc4:	20202020 20202020 20202020 20202020                     
   2cfd4:	10108820 10101010 10101010 10101010      ...............
   2cfe4:	04040410 04040404 10040404 10101010     ................
   2cff4:	41411010 41414141 01010101 01010101     ..AAAAAA........
   2d004:	01010101 01010101 01010101 10101010     ................
   2d014:	42421010 42424242 02020202 02020202     ..BBBBBB........
   2d024:	02020202 02020202 02020202 10101010     ................
   2d034:	00000020 00000000 00000000 00000000      ...............
	...
   2d0b8:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

0002d0c8 <__sf_fake_stderr>:
	...

0002d0e8 <__sf_fake_stdout>:
	...

0002d108 <__sf_fake_stdin>:
	...
   2d128:	49534f50 00000058                       POSIX...

0002d130 <p05.5129>:
   2d130:	00000005 00000019 0000007d 00000000     ........}.......

0002d140 <__mprec_tens>:
   2d140:	00000000 3ff00000 00000000 40240000     .......?......$@
   2d150:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   2d160:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   2d170:	00000000 412e8480 00000000 416312d0     .......A......cA
   2d180:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   2d190:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   2d1a0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   2d1b0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   2d1c0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   2d1d0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   2d1e0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   2d1f0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   2d200:	79d99db4 44ea7843                       ...yCx.D

0002d208 <__mprec_tinytens>:
   2d208:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   2d218:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   2d228:	64ac6f43 0ac80628                       Co.d(...

0002d230 <__mprec_bigtens>:
   2d230:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   2d240:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   2d250:	7f73bf3c 75154fdd                       <.s..O.u

0002d258 <blanks.6547>:
   2d258:	20202020 20202020 20202020 20202020                     

0002d268 <zeroes.6548>:
   2d268:	30303030 30303030 30303030 30303030     0000000000000000
   2d278:	8101b108 8400b0b0 00000000 7fff1e5d     ............]...
   2d288:	01b10884 00b0b0b0 011900ff 0806020c     ................
   2d298:	10040c01 000a1c05 7f000100 007d0000     ..............}.
	...
   2d2b0:	8101b108 8400b0b0 00000000 8101b108     ................
   2d2c0:	8400b0b0 00000000 7fff1e19 0004afb0     ................
   2d2d0:	011d00ff e4042414 042a0101 01b40170     .....$....*.p...
   2d2e0:	00029e6a 000402a6 00000100 00000000     j...............
   2d2f0:	8101b108 8400b0b0 00000000 7fff1de5     ................
   2d300:	00b108a9 011100ff 8c047a0a 01900101     .........z......
   2d310:	7f000008 00000000 00000000 7fff1dc5     ................
   2d320:	0001aab0 013500ff 00443825 04018000     ......5.%8D.....
   2d330:	8a0301ba 00002601 ba0401b6 01c40301     .....&..........
   2d340:	8a00002a 02a81802 0402ac00 00020000     *...............
   2d350:	00007d01 00000000 fffffac0 8101b108     .}..............
   2d360:	8400b0b0 00000000 7fff1d79 0012afb0     ........y.......
   2d370:	011500ff 06ce3e0b 07e00000 0107e404     .....>..........
   2d380:	00000001 00000000 8101b2a2 01afb0b0     ................
   2d390:	00000000 8101b108 8400b0b0 00000000     ................
   2d3a0:	8101b108 8400b0b0 00000000 8101b108     ................
   2d3b0:	8400b0b0 00000000                       ........

0002d3b8 <_init>:
   2d3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d3ba:	bf00      	nop
   2d3bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2d3be:	bc08      	pop	{r3}
   2d3c0:	469e      	mov	lr, r3
   2d3c2:	4770      	bx	lr

0002d3c4 <__init_array_start>:
   2d3c4:	00003161 	.word	0x00003161
   2d3c8:	00008201 	.word	0x00008201
   2d3cc:	000094e9 	.word	0x000094e9
   2d3d0:	00009781 	.word	0x00009781
   2d3d4:	00009911 	.word	0x00009911
   2d3d8:	00009fe1 	.word	0x00009fe1
   2d3dc:	0000a2e1 	.word	0x0000a2e1
   2d3e0:	0000b375 	.word	0x0000b375
   2d3e4:	0000b639 	.word	0x0000b639
   2d3e8:	0000c3e5 	.word	0x0000c3e5
   2d3ec:	0000c88d 	.word	0x0000c88d
   2d3f0:	0000da15 	.word	0x0000da15
   2d3f4:	0000dbd5 	.word	0x0000dbd5
   2d3f8:	0000dc39 	.word	0x0000dc39
   2d3fc:	0000e1a9 	.word	0x0000e1a9
   2d400:	0000e7b5 	.word	0x0000e7b5
   2d404:	0000eaf9 	.word	0x0000eaf9
   2d408:	00010bed 	.word	0x00010bed
   2d40c:	00010f99 	.word	0x00010f99
   2d410:	00011141 	.word	0x00011141
   2d414:	000112ad 	.word	0x000112ad
   2d418:	00011a51 	.word	0x00011a51
   2d41c:	00011ac9 	.word	0x00011ac9
   2d420:	00011b41 	.word	0x00011b41
   2d424:	00011bc5 	.word	0x00011bc5
   2d428:	00011c41 	.word	0x00011c41
   2d42c:	00011ca5 	.word	0x00011ca5
   2d430:	000120e5 	.word	0x000120e5
   2d434:	0001215d 	.word	0x0001215d
   2d438:	000126b9 	.word	0x000126b9
   2d43c:	0001271d 	.word	0x0001271d
   2d440:	0001286d 	.word	0x0001286d
   2d444:	00012f8d 	.word	0x00012f8d

0002d448 <_fini>:
   2d448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d44a:	bf00      	nop
   2d44c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2d44e:	bc08      	pop	{r3}
   2d450:	469e      	mov	lr, r3
   2d452:	4770      	bx	lr

0002d454 <__fini_array_start>:
   2d454:	00003135 	.word	0x00003135

0002d458 <__cs3_regions>:
   2d458:	00000000 	.word	0x00000000
   2d45c:	0002d658 	.word	0x0002d658
   2d460:	10000000 	.word	0x10000000
   2d464:	000005b0 	.word	0x000005b0
   2d468:	00002820 	.word	0x00002820
