
FLASH_RUN/project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0002949c  00003000  00003000  00003000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    000001e8  0002c49c  0002c49c  0002c49c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text.align   00000004  0002c684  0002c684  0002c684  2**0
                  ALLOC, CODE
  3 .data         000005b0  10000000  0002c688  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00003620  100005b0  0002cc38  000305b0  2**3
                  ALLOC
  5 .heap         00001000  10003bd0  10003bd0  000305b0  2**3
                  CONTENTS
  6 .stack        00000300  10005d00  10005d00  000315b0  2**3
                  CONTENTS
  7 .debug_aranges 00002518  00000000  00000000  000318b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0004df53  00000000  00000000  00033dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000c8c9  00000000  00000000  00081d1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000fa3a  00000000  00000000  0008e5e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00008da8  00000000  00000000  0009e020  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000feb3  00000000  00000000  000a6dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00017200  00000000  00000000  000b6c7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .ARM.attributes 00000027  00000000  00000000  000cde7b  2**0
                  CONTENTS, READONLY
 15 .debug_ranges 00002b90  00000000  00000000  000cdea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      00000030  00000000  00000000  000d0a38  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00003000 <__cs3_interrupt_vector>:
    3000:	00 60 00 10 cd 30 00 00 29 31 00 00 2b 31 00 00     .`...0..)1..+1..
    3010:	2d 31 00 00 2f 31 00 00 31 31 00 00 00 00 00 00     -1../1..11......
	...
    302c:	9d 31 00 00 9f 31 00 00 00 00 00 00 a1 31 00 00     .1...1.......1..
    303c:	a3 31 00 00 e5 ad 00 00 e9 b3 00 00 a5 31 00 00     .1...........1..
    304c:	e5 b9 00 00 89 bc 00 00 f9 60 00 00 89 1d 01 00     .........`......
    305c:	a5 31 00 00 a5 31 00 00 a5 31 00 00 a5 31 00 00     .1...1...1...1..
    306c:	a5 31 00 00 a5 31 00 00 a5 31 00 00 a5 31 00 00     .1...1...1...1..
    307c:	a5 31 00 00 a5 31 00 00 a5 31 00 00 a5 31 00 00     .1...1...1...1..
    308c:	a5 31 00 00 a5 31 00 00 a5 31 00 00 91 ff 00 00     .1...1...1......
    309c:	a5 31 00 00 f5 5a 00 00 a5 31 00 00 a5 31 00 00     .1...Z...1...1..
    30ac:	a5 31 00 00 a5 31 00 00 a5 31 00 00 a5 31 00 00     .1...1...1...1..
    30bc:	a5 31 00 00 a5 31 00 00 a5 31 00 00 5d 1f 01 00     .1...1...1..]...

000030cc <__cs3_reset>:
    .type   __cs3_reset_cortex_m, %function
__cs3_reset_cortex_m:
    .fnstart

/* delay at startup to let JTAG-connection catch-up */
 	LDR R0, =startup_delay
    30cc:	480d      	ldr	r0, [pc, #52]	; (3104 <__cs3_reset+0x38>)
	BLX R0
    30ce:	4780      	blx	r0

/* Copy the data segment initializers from flash to SRAM */
.extern _etext
.extern _sdata
.extern _edata
    ldr   r1, =_etext
    30d0:	490d      	ldr	r1, [pc, #52]	; (3108 <__cs3_reset+0x3c>)
    ldr   r2, =_sdata
    30d2:	4a0e      	ldr	r2, [pc, #56]	; (310c <__cs3_reset+0x40>)
    ldr   r3, =_edata
    30d4:	4b0e      	ldr	r3, [pc, #56]	; (3110 <__cs3_reset+0x44>)
1:  cmp   r2, r3
    30d6:	429a      	cmp	r2, r3
    ittt  lo
    30d8:	bf3e      	ittt	cc
    ldrlo r0, [r1], #4
    30da:	f851 0b04 	ldrcc.w	r0, [r1], #4
    strlo r0, [r2], #4
    30de:	f842 0b04 	strcc.w	r0, [r2], #4
    blo   1b
    30e2:	e7f8      	bcc.n	30d6 <__cs3_reset+0xa>

/* Zero fill the bss segment. */
.extern _sbss
.extern _ebss
    movs  r0, #0
    30e4:	2000      	movs	r0, #0
    ldr   r1, =_sbss
    30e6:	490b      	ldr	r1, [pc, #44]	; (3114 <__cs3_reset+0x48>)
    ldr   r2, =_ebss
    30e8:	4a0b      	ldr	r2, [pc, #44]	; (3118 <__cs3_reset+0x4c>)
2:  cmp   r1, r2
    30ea:	4291      	cmp	r1, r2
    itt   lo
    30ec:	bf3c      	itt	cc
    strlo r0, [r1], #4
    30ee:	f841 0b04 	strcc.w	r0, [r1], #4
    blo   2b
    30f2:	e7fa      	bcc.n	30ea <__cs3_reset+0x1e>

/* call __libc_init_array - needed for C++ support */
    LDR     R0, =__libc_init_array
    30f4:	4809      	ldr	r0, [pc, #36]	; (311c <__cs3_reset+0x50>)
    BLX     R0
    30f6:	4780      	blx	r0

/* call system init in NXP's Device CMSIS code */
    LDR     R0, =SystemInit
    30f8:	4809      	ldr	r0, [pc, #36]	; (3120 <__cs3_reset+0x54>)
    BLX     R0
    30fa:	4780      	blx	r0

/* call main() */
    LDR     R0,=main
    30fc:	4809      	ldr	r0, [pc, #36]	; (3124 <__cs3_reset+0x58>)
    BX      R0
    30fe:	4700      	bx	r0

    B .
    3100:	e7fe      	b.n	3100 <__cs3_reset+0x34>
    3102:	0000      	.short	0x0000
    .type   __cs3_reset_cortex_m, %function
__cs3_reset_cortex_m:
    .fnstart

/* delay at startup to let JTAG-connection catch-up */
 	LDR R0, =startup_delay
    3104:	00005c45 	.word	0x00005c45

/* Copy the data segment initializers from flash to SRAM */
.extern _etext
.extern _sdata
.extern _edata
    ldr   r1, =_etext
    3108:	0002c688 	.word	0x0002c688
    ldr   r2, =_sdata
    310c:	10000000 	.word	0x10000000
    ldr   r3, =_edata
    3110:	100005b0 	.word	0x100005b0

/* Zero fill the bss segment. */
.extern _sbss
.extern _ebss
    movs  r0, #0
    ldr   r1, =_sbss
    3114:	100005b0 	.word	0x100005b0
    ldr   r2, =_ebss
    3118:	10003bd0 	.word	0x10003bd0
    itt   lo
    strlo r0, [r1], #4
    blo   2b

/* call __libc_init_array - needed for C++ support */
    LDR     R0, =__libc_init_array
    311c:	0001ef95 	.word	0x0001ef95
    BLX     R0

/* call system init in NXP's Device CMSIS code */
    LDR     R0, =SystemInit
    3120:	00005d49 	.word	0x00005d49
    BLX     R0

/* call main() */
    LDR     R0,=main
    3124:	0000af15 	.word	0x0000af15

00003128 <NMI_Handler>:
/* Exception Handlers */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
    3128:	e7fe      	b.n	3128 <NMI_Handler>

0000312a <HardFault_Handler>:
    .size   NMI_Handler, . - NMI_Handler

    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
    312a:	e7fe      	b.n	312a <HardFault_Handler>

0000312c <MemManage_Handler>:
    .size   HardFault_Handler, . - HardFault_Handler

    .weak   MemManage_Handler
    .type   MemManage_Handler, %function
MemManage_Handler:
    B       .
    312c:	e7fe      	b.n	312c <MemManage_Handler>

0000312e <BusFault_Handler>:
    .size   MemManage_Handler, . - MemManage_Handler

    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
    312e:	e7fe      	b.n	312e <BusFault_Handler>

00003130 <UsageFault_Handler>:
    .size   BusFault_Handler, . - BusFault_Handler

    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
    3130:	e7fe      	b.n	3130 <UsageFault_Handler>
    3132:	bf00      	nop

00003134 <__do_global_dtors_aux>:
    3134:	b510      	push	{r4, lr}
    3136:	f240 54b0 	movw	r4, #1456	; 0x5b0
    313a:	f2c1 0400 	movt	r4, #4096	; 0x1000
    313e:	7823      	ldrb	r3, [r4, #0]
    3140:	b963      	cbnz	r3, 315c <__do_global_dtors_aux+0x28>
    3142:	f240 0000 	movw	r0, #0
    3146:	f2c0 0000 	movt	r0, #0
    314a:	b128      	cbz	r0, 3158 <__do_global_dtors_aux+0x24>
    314c:	f24c 30e8 	movw	r0, #50152	; 0xc3e8
    3150:	f2c0 0002 	movt	r0, #2
    3154:	f3af 8000 	nop.w
    3158:	2101      	movs	r1, #1
    315a:	7021      	strb	r1, [r4, #0]
    315c:	bd10      	pop	{r4, pc}
    315e:	bf00      	nop

00003160 <frame_dummy>:
    3160:	b508      	push	{r3, lr}
    3162:	f240 0300 	movw	r3, #0
    3166:	f2c0 0300 	movt	r3, #0
    316a:	b14b      	cbz	r3, 3180 <frame_dummy+0x20>
    316c:	f24c 30e8 	movw	r0, #50152	; 0xc3e8
    3170:	f240 51b4 	movw	r1, #1460	; 0x5b4
    3174:	f2c0 0002 	movt	r0, #2
    3178:	f2c1 0100 	movt	r1, #4096	; 0x1000
    317c:	f3af 8000 	nop.w
    3180:	f240 0000 	movw	r0, #0
    3184:	f2c1 0000 	movt	r0, #4096	; 0x1000
    3188:	6801      	ldr	r1, [r0, #0]
    318a:	b129      	cbz	r1, 3198 <frame_dummy+0x38>
    318c:	f240 0300 	movw	r3, #0
    3190:	f2c0 0300 	movt	r3, #0
    3194:	b103      	cbz	r3, 3198 <frame_dummy+0x38>
    3196:	4798      	blx	r3
    3198:	bd08      	pop	{r3, pc}
    319a:	bf00      	nop

0000319c <SVC_Handler>:
    .section ".text"

    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
    319c:	e7fe      	b.n	319c <SVC_Handler>

0000319e <DebugMon_Handler>:
    .size   SVC_Handler, . - SVC_Handler

    .weak   DebugMon_Handler
    .type   DebugMon_Handler, %function
DebugMon_Handler:
    B       .
    319e:	e7fe      	b.n	319e <DebugMon_Handler>

000031a0 <PendSV_Handler>:
    .size   DebugMon_Handler, . - DebugMon_Handler

    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
    31a0:	e7fe      	b.n	31a0 <PendSV_Handler>

000031a2 <SysTick_Handler>:
    .size   PendSV_Handler, . - PendSV_Handler

    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
    31a2:	e7fe      	b.n	31a2 <SysTick_Handler>

000031a4 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
    31a4:	e7fe      	b.n	31a4 <Default_Handler>
	...

000031a8 <ADC_Init>:
 * @param[in]	ADCx pointer to LPC_ADC_TypeDef, should be: LPC_ADC
 * @param[in]	rate ADC conversion rate, should be <=200KHz
 * @return 		None
 **********************************************************************/
void ADC_Init(LPC_ADC_TypeDef *ADCx, uint32_t rate)
{
    31a8:	b538      	push	{r3, r4, r5, lr}
    31aa:	4604      	mov	r4, r0
    31ac:	460d      	mov	r5, r1
	uint32_t temp, tmp;

	CHECK_PARAM(PARAM_ADCx(ADCx));
    31ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    31b2:	f2c4 0303 	movt	r3, #16387	; 0x4003
    31b6:	4298      	cmp	r0, r3
    31b8:	d007      	beq.n	31ca <ADC_Init+0x22>
    31ba:	f645 704c 	movw	r0, #24396	; 0x5f4c
    31be:	f2c0 0002 	movt	r0, #2
    31c2:	f04f 0142 	mov.w	r1, #66	; 0x42
    31c6:	f000 f9ab 	bl	3520 <check_failed>
	CHECK_PARAM(PARAM_ADC_RATE(rate));
    31ca:	f105 32ff 	add.w	r2, r5, #4294967295
    31ce:	f640 533f 	movw	r3, #3391	; 0xd3f
    31d2:	f2c0 0303 	movt	r3, #3
    31d6:	429a      	cmp	r2, r3
    31d8:	d907      	bls.n	31ea <ADC_Init+0x42>
    31da:	f645 704c 	movw	r0, #24396	; 0x5f4c
    31de:	f2c0 0002 	movt	r0, #2
    31e2:	f04f 0143 	mov.w	r1, #67	; 0x43
    31e6:	f000 f99b 	bl	3520 <check_failed>

	// Turn on power and clock
	CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCAD, ENABLE);
    31ea:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    31ee:	f04f 0101 	mov.w	r1, #1
    31f2:	f000 f921 	bl	3438 <CLKPWR_ConfigPPWR>

	ADCx->ADCR = 0;
    31f6:	f04f 0300 	mov.w	r3, #0
    31fa:	6023      	str	r3, [r4, #0]

	//Enable PDN bit
	tmp = ADC_CR_PDN;
	// Set clock frequency
	temp = CLKPWR_GetPCLK(CLKPWR_PCLKSEL_ADC);
    31fc:	f04f 0018 	mov.w	r0, #24
    3200:	f000 f904 	bl	340c <CLKPWR_GetPCLK>
	 * A/D converter, which should be less than or equal to 13MHz.
	 * A fully conversion requires 65 of these clocks.
	 * ADC clock = PCLK_ADC0 / (CLKDIV + 1);
	 * ADC rate = ADC clock / 65;
	 */
	temp = (temp /(rate * 65)) - 1;
    3204:	ea4f 1385 	mov.w	r3, r5, lsl #6
    3208:	195d      	adds	r5, r3, r5
    320a:	fbb0 f5f5 	udiv	r5, r0, r5
    320e:	f105 35ff 	add.w	r5, r5, #4294967295
	tmp |=  ADC_CR_CLKDIV(temp);
    3212:	ea4f 2505 	mov.w	r5, r5, lsl #8
    3216:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000

	ADCx->ADCR = tmp;
    321a:	6025      	str	r5, [r4, #0]
}
    321c:	bd38      	pop	{r3, r4, r5, pc}
    321e:	bf00      	nop

00003220 <ADC_StartCmd>:
*				- ADC_START_ON_MAT10
*				- ADC_START_ON_MAT11
* @return 		None
*********************************************************************/
void ADC_StartCmd(LPC_ADC_TypeDef *ADCx, uint8_t start_mode)
{
    3220:	b538      	push	{r3, r4, r5, lr}
    3222:	4604      	mov	r4, r0
    3224:	460d      	mov	r5, r1
	CHECK_PARAM(PARAM_ADCx(ADCx));
    3226:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    322a:	f2c4 0303 	movt	r3, #16387	; 0x4003
    322e:	4298      	cmp	r0, r3
    3230:	d007      	beq.n	3242 <ADC_StartCmd+0x22>
    3232:	f645 704c 	movw	r0, #24396	; 0x5f4c
    3236:	f2c0 0002 	movt	r0, #2
    323a:	f04f 018b 	mov.w	r1, #139	; 0x8b
    323e:	f000 f96f 	bl	3520 <check_failed>
	CHECK_PARAM(PARAM_ADC_START_OPT(start_mode));
    3242:	2d07      	cmp	r5, #7
    3244:	d907      	bls.n	3256 <ADC_StartCmd+0x36>
    3246:	f645 704c 	movw	r0, #24396	; 0x5f4c
    324a:	f2c0 0002 	movt	r0, #2
    324e:	f04f 018c 	mov.w	r1, #140	; 0x8c
    3252:	f000 f965 	bl	3520 <check_failed>

	ADCx->ADCR &= ~ADC_CR_START_MASK;
    3256:	6823      	ldr	r3, [r4, #0]
    3258:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
    325c:	6023      	str	r3, [r4, #0]
	ADCx->ADCR |=ADC_CR_START_MODE_SEL((uint32_t)start_mode);
    325e:	6823      	ldr	r3, [r4, #0]
    3260:	ea43 6505 	orr.w	r5, r3, r5, lsl #24
    3264:	6025      	str	r5, [r4, #0]
}
    3266:	bd38      	pop	{r3, r4, r5, pc}

00003268 <ADC_IntConfig>:
* 					- SET : enable ADC interrupt
* 					- RESET: disable ADC interrupt
* @return 		None
**********************************************************************/
void ADC_IntConfig (LPC_ADC_TypeDef *ADCx, ADC_TYPE_INT_OPT IntType, FunctionalState NewState)
{
    3268:	b570      	push	{r4, r5, r6, lr}
    326a:	4604      	mov	r4, r0
    326c:	460d      	mov	r5, r1
    326e:	4616      	mov	r6, r2
	CHECK_PARAM(PARAM_ADCx(ADCx));
    3270:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    3274:	f2c4 0303 	movt	r3, #16387	; 0x4003
    3278:	4298      	cmp	r0, r3
    327a:	d007      	beq.n	328c <ADC_IntConfig+0x24>
    327c:	f645 704c 	movw	r0, #24396	; 0x5f4c
    3280:	f2c0 0002 	movt	r0, #2
    3284:	f04f 01da 	mov.w	r1, #218	; 0xda
    3288:	f000 f94a 	bl	3520 <check_failed>
	CHECK_PARAM(PARAM_ADC_TYPE_INT_OPT(IntType));
    328c:	2d08      	cmp	r5, #8
    328e:	d907      	bls.n	32a0 <ADC_IntConfig+0x38>
    3290:	f645 704c 	movw	r0, #24396	; 0x5f4c
    3294:	f2c0 0002 	movt	r0, #2
    3298:	f04f 01db 	mov.w	r1, #219	; 0xdb
    329c:	f000 f940 	bl	3520 <check_failed>

	ADCx->ADINTEN &= ~ADC_INTEN_CH(IntType);
    32a0:	68e3      	ldr	r3, [r4, #12]
    32a2:	f04f 0201 	mov.w	r2, #1
    32a6:	fa02 f505 	lsl.w	r5, r2, r5
    32aa:	ea23 0305 	bic.w	r3, r3, r5
    32ae:	60e3      	str	r3, [r4, #12]
	if (NewState){
    32b0:	b116      	cbz	r6, 32b8 <ADC_IntConfig+0x50>
		ADCx->ADINTEN |= ADC_INTEN_CH(IntType);
    32b2:	68e3      	ldr	r3, [r4, #12]
    32b4:	431d      	orrs	r5, r3
    32b6:	60e5      	str	r5, [r4, #12]
    32b8:	bd70      	pop	{r4, r5, r6, pc}
    32ba:	bf00      	nop

000032bc <ADC_ChannelCmd>:
* @param[in]	NewState Enable or Disable
*
* @return 		None
**********************************************************************/
void ADC_ChannelCmd (LPC_ADC_TypeDef *ADCx, uint8_t Channel, FunctionalState NewState)
{
    32bc:	b570      	push	{r4, r5, r6, lr}
    32be:	4604      	mov	r4, r0
    32c0:	460e      	mov	r6, r1
    32c2:	4615      	mov	r5, r2
	CHECK_PARAM(PARAM_ADCx(ADCx));
    32c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    32c8:	f2c4 0303 	movt	r3, #16387	; 0x4003
    32cc:	4298      	cmp	r0, r3
    32ce:	d007      	beq.n	32e0 <ADC_ChannelCmd+0x24>
    32d0:	f645 704c 	movw	r0, #24396	; 0x5f4c
    32d4:	f2c0 0002 	movt	r0, #2
    32d8:	f04f 01ed 	mov.w	r1, #237	; 0xed
    32dc:	f000 f920 	bl	3520 <check_failed>
	CHECK_PARAM(PARAM_ADC_CHANNEL_SELECTION(Channel));

	if (NewState == ENABLE) {
    32e0:	2d01      	cmp	r5, #1
		ADCx->ADCR |= ADC_CR_CH_SEL(Channel);
    32e2:	6823      	ldr	r3, [r4, #0]
    32e4:	f04f 0201 	mov.w	r2, #1
    32e8:	fa02 f606 	lsl.w	r6, r2, r6
    32ec:	bf0c      	ite	eq
    32ee:	431e      	orreq	r6, r3
	} else {
		ADCx->ADCR &= ~ADC_CR_CH_SEL(Channel);
    32f0:	ea23 0606 	bicne.w	r6, r3, r6
    32f4:	6026      	str	r6, [r4, #0]
    32f6:	bd70      	pop	{r4, r5, r6, pc}

000032f8 <ADC_ChannelGetData>:
* @param[in]	ADCx pointer to LPC_ADC_TypeDef, should be: LPC_ADC
* @param[in]	channel: channel number, should be 0...7
* @return 		Data conversion
**********************************************************************/
uint16_t ADC_ChannelGetData(LPC_ADC_TypeDef *ADCx, uint8_t channel)
{
    32f8:	b538      	push	{r3, r4, r5, lr}
    32fa:	4604      	mov	r4, r0
    32fc:	460d      	mov	r5, r1
	uint32_t adc_value;

	CHECK_PARAM(PARAM_ADCx(ADCx));
    32fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    3302:	f2c4 0303 	movt	r3, #16387	; 0x4003
    3306:	4298      	cmp	r0, r3
    3308:	d007      	beq.n	331a <ADC_ChannelGetData+0x22>
    330a:	f645 704c 	movw	r0, #24396	; 0x5f4c
    330e:	f2c0 0002 	movt	r0, #2
    3312:	f240 1101 	movw	r1, #257	; 0x101
    3316:	f000 f903 	bl	3520 <check_failed>
	CHECK_PARAM(PARAM_ADC_CHANNEL_SELECTION(channel));

	adc_value = *(uint32_t *) ((&ADCx->ADDR0) + channel);
    331a:	f104 0410 	add.w	r4, r4, #16
	return ADC_DR_RESULT(adc_value);
    331e:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
}
    3322:	f3c0 100b 	ubfx	r0, r0, #4, #12
    3326:	bd38      	pop	{r3, r4, r5, pc}

00003328 <ADC_ChannelGetStatus>:
*              		 	0:Burst status
*               		1:Done 	status
* @return 		SET / RESET
**********************************************************************/
FlagStatus ADC_ChannelGetStatus(LPC_ADC_TypeDef *ADCx, uint8_t channel, uint32_t StatusType)
{
    3328:	b570      	push	{r4, r5, r6, lr}
    332a:	4605      	mov	r5, r0
    332c:	460e      	mov	r6, r1
    332e:	4614      	mov	r4, r2
	uint32_t temp;

	CHECK_PARAM(PARAM_ADCx(ADCx));
    3330:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    3334:	f2c4 0303 	movt	r3, #16387	; 0x4003
    3338:	4298      	cmp	r0, r3
    333a:	d007      	beq.n	334c <ADC_ChannelGetStatus+0x24>
    333c:	f645 704c 	movw	r0, #24396	; 0x5f4c
    3340:	f2c0 0002 	movt	r0, #2
    3344:	f240 1115 	movw	r1, #277	; 0x115
    3348:	f000 f8ea 	bl	3520 <check_failed>
	CHECK_PARAM(PARAM_ADC_CHANNEL_SELECTION(channel));
	CHECK_PARAM(PARAM_ADC_DATA_STATUS(StatusType));
    334c:	2c01      	cmp	r4, #1
    334e:	d907      	bls.n	3360 <ADC_ChannelGetStatus+0x38>
    3350:	f645 704c 	movw	r0, #24396	; 0x5f4c
    3354:	f2c0 0002 	movt	r0, #2
    3358:	f240 1117 	movw	r1, #279	; 0x117
    335c:	f000 f8e0 	bl	3520 <check_failed>

	temp =  *(uint32_t *) ((&ADCx->ADDR0) + channel);
    3360:	f105 0510 	add.w	r5, r5, #16
    3364:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
	if (StatusType) {
    3368:	b114      	cbz	r4, 3370 <ADC_ChannelGetStatus+0x48>
		temp &= ADC_DR_DONE_FLAG;
    336a:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    336e:	e001      	b.n	3374 <ADC_ChannelGetStatus+0x4c>
	}else{
		temp &= ADC_DR_OVERRUN_FLAG;
    3370:	f000 4080 	and.w	r0, r0, #1073741824	; 0x40000000
		return SET;
	} else {
		return RESET;
	}

}
    3374:	3000      	adds	r0, #0
    3376:	bf18      	it	ne
    3378:	2001      	movne	r0, #1
    337a:	bd70      	pop	{r4, r5, r6, pc}

0000337c <CLKPWR_SetPCLKDiv>:
 *				- CLKPWR_PCLKSEL_CCLK_DIV_2 : PCLK_peripheral = CCLK/2
 *
 * @return none
 **********************************************************************/
void CLKPWR_SetPCLKDiv (uint32_t ClkType, uint32_t DivVal)
{
    337c:	b410      	push	{r4}
	uint32_t bitpos;

	bitpos = (ClkType < 32) ? (ClkType) : (ClkType - 32);
    337e:	281f      	cmp	r0, #31
    3380:	d917      	bls.n	33b2 <CLKPWR_SetPCLKDiv+0x36>
	}
	/* PCLKSEL1 selected */
	else
	{
		/* Clear two bit at bit position */
		LPC_SC->PCLKSEL1 &= ~(CLKPWR_PCLKSEL_BITMASK(bitpos));
    3382:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3386:	f2c4 030f 	movt	r3, #16399	; 0x400f
    338a:	f8d3 41ac 	ldr.w	r4, [r3, #428]	; 0x1ac
 **********************************************************************/
void CLKPWR_SetPCLKDiv (uint32_t ClkType, uint32_t DivVal)
{
	uint32_t bitpos;

	bitpos = (ClkType < 32) ? (ClkType) : (ClkType - 32);
    338e:	f1a0 0020 	sub.w	r0, r0, #32
	}
	/* PCLKSEL1 selected */
	else
	{
		/* Clear two bit at bit position */
		LPC_SC->PCLKSEL1 &= ~(CLKPWR_PCLKSEL_BITMASK(bitpos));
    3392:	f04f 0203 	mov.w	r2, #3
    3396:	fa02 f200 	lsl.w	r2, r2, r0
    339a:	ea24 0202 	bic.w	r2, r4, r2
    339e:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

		/* Set two selected bit */
		LPC_SC->PCLKSEL1 |= (CLKPWR_PCLKSEL_SET(bitpos, DivVal));
    33a2:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    33a6:	fa01 f000 	lsl.w	r0, r1, r0
    33aa:	4310      	orrs	r0, r2
    33ac:	f8c3 01ac 	str.w	r0, [r3, #428]	; 0x1ac
    33b0:	e014      	b.n	33dc <CLKPWR_SetPCLKDiv+0x60>

	/* PCLKSEL0 selected */
	if (ClkType < 32)
	{
		/* Clear two bit at bit position */
		LPC_SC->PCLKSEL0 &= (~(CLKPWR_PCLKSEL_BITMASK(bitpos)));
    33b2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    33b6:	f2c4 030f 	movt	r3, #16399	; 0x400f
    33ba:	f8d3 41a8 	ldr.w	r4, [r3, #424]	; 0x1a8
    33be:	f04f 0203 	mov.w	r2, #3
    33c2:	fa02 f200 	lsl.w	r2, r2, r0
    33c6:	ea24 0202 	bic.w	r2, r4, r2
    33ca:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8

		/* Set two selected bit */
		LPC_SC->PCLKSEL0 |= (CLKPWR_PCLKSEL_SET(bitpos, DivVal));
    33ce:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
    33d2:	fa01 f100 	lsl.w	r1, r1, r0
    33d6:	4311      	orrs	r1, r2
    33d8:	f8c3 11a8 	str.w	r1, [r3, #424]	; 0x1a8
		LPC_SC->PCLKSEL1 &= ~(CLKPWR_PCLKSEL_BITMASK(bitpos));

		/* Set two selected bit */
		LPC_SC->PCLKSEL1 |= (CLKPWR_PCLKSEL_SET(bitpos, DivVal));
	}
}
    33dc:	bc10      	pop	{r4}
    33de:	4770      	bx	lr

000033e0 <CLKPWR_GetPCLKSEL>:
 **********************************************************************/
uint32_t CLKPWR_GetPCLKSEL (uint32_t ClkType)
{
	uint32_t bitpos, retval;

	if (ClkType < 32)
    33e0:	281f      	cmp	r0, #31
	{
		bitpos = ClkType;
		retval = LPC_SC->PCLKSEL0;
    33e2:	bf9d      	ittte	ls
    33e4:	f44f 4340 	movls.w	r3, #49152	; 0xc000
    33e8:	f2c4 030f 	movtls	r3, #16399	; 0x400f
    33ec:	f8d3 31a8 	ldrls.w	r3, [r3, #424]	; 0x1a8
	}
	else
	{
		bitpos = ClkType - 32;
    33f0:	3820      	subhi	r0, #32
		retval = LPC_SC->PCLKSEL1;
    33f2:	bf82      	ittt	hi
    33f4:	f44f 4340 	movhi.w	r3, #49152	; 0xc000
    33f8:	f2c4 030f 	movthi	r3, #16399	; 0x400f
    33fc:	f8d3 31ac 	ldrhi.w	r3, [r3, #428]	; 0x1ac
	}

	retval = CLKPWR_PCLKSEL_GET(bitpos, retval);
    3400:	fa23 f000 	lsr.w	r0, r3, r0
	return retval;
}
    3404:	f000 0003 	and.w	r0, r0, #3
    3408:	4770      	bx	lr
    340a:	bf00      	nop

0000340c <CLKPWR_GetPCLK>:
				- CLKPWR_PCLKSEL_MC 		: MC

 * @return		Value of Selected Peripheral Clock
 **********************************************************************/
uint32_t CLKPWR_GetPCLK (uint32_t ClkType)
{
    340c:	b510      	push	{r4, lr}
	uint32_t retval, div;

	retval = SystemCoreClock;
    340e:	f240 0314 	movw	r3, #20
    3412:	f2c1 0300 	movt	r3, #4096	; 0x1000
    3416:	681c      	ldr	r4, [r3, #0]
	div = CLKPWR_GetPCLKSEL(ClkType);
    3418:	f7ff ffe2 	bl	33e0 <CLKPWR_GetPCLKSEL>

	switch (div)
    341c:	2803      	cmp	r0, #3
    341e:	d808      	bhi.n	3432 <CLKPWR_GetPCLK+0x26>
    3420:	e8df f000 	tbb	[pc, r0]
    3424:	02070705 	.word	0x02070705
	case 2:
		div = 2;
		break;

	case 3:
		div = 8;
    3428:	f04f 0008 	mov.w	r0, #8
		break;
    342c:	e001      	b.n	3432 <CLKPWR_GetPCLK+0x26>
	div = CLKPWR_GetPCLKSEL(ClkType);

	switch (div)
	{
	case 0:
		div = 4;
    342e:	f04f 0004 	mov.w	r0, #4
		break;
	}
	retval /= div;

	return retval;
}
    3432:	fbb4 f0f0 	udiv	r0, r4, r0
    3436:	bd10      	pop	{r4, pc}

00003438 <CLKPWR_ConfigPPWR>:
 *
 * @return none
 **********************************************************************/
void CLKPWR_ConfigPPWR (uint32_t PPType, FunctionalState NewState)
{
	if (NewState == ENABLE)
    3438:	2901      	cmp	r1, #1
    343a:	d10e      	bne.n	345a <CLKPWR_ConfigPPWR+0x22>
	{
		LPC_SC->PCONP |= PPType & CLKPWR_PCONP_BITMASK;
    343c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    3440:	f2c4 020f 	movt	r2, #16399	; 0x400f
    3444:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
    3448:	f24f 73de 	movw	r3, #63454	; 0xf7de
    344c:	f6ce 73ef 	movt	r3, #61423	; 0xefef
    3450:	4003      	ands	r3, r0
    3452:	430b      	orrs	r3, r1
    3454:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
    3458:	4770      	bx	lr
	}
	else if (NewState == DISABLE)
    345a:	b971      	cbnz	r1, 347a <CLKPWR_ConfigPPWR+0x42>
	{
		LPC_SC->PCONP &= (~PPType) & CLKPWR_PCONP_BITMASK;
    345c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    3460:	f2c4 020f 	movt	r2, #16399	; 0x400f
    3464:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
    3468:	f24f 73de 	movw	r3, #63454	; 0xf7de
    346c:	f6ce 73ef 	movt	r3, #61423	; 0xefef
    3470:	400b      	ands	r3, r1
    3472:	ea23 0000 	bic.w	r0, r3, r0
    3476:	f8c2 00c4 	str.w	r0, [r2, #196]	; 0xc4
    347a:	4770      	bx	lr

0000347c <GPIO_GetPointer>:
 **********************************************************************/
static LPC_GPIO_TypeDef *GPIO_GetPointer(uint8_t portNum)
{
	LPC_GPIO_TypeDef *pGPIO = NULL;

	switch (portNum) {
    347c:	2804      	cmp	r0, #4
    347e:	d804      	bhi.n	348a <GPIO_GetPointer+0xe>
    3480:	e8df f000 	tbb	[pc, r0]
    3484:	100b061a 	.word	0x100b061a
    3488:	15          	.byte	0x15
    3489:	00          	.byte	0x00
 * @param[in]	portNum		Port Number value, should be in range from 0 to 4.
 * @return		Pointer to GPIO peripheral
 **********************************************************************/
static LPC_GPIO_TypeDef *GPIO_GetPointer(uint8_t portNum)
{
	LPC_GPIO_TypeDef *pGPIO = NULL;
    348a:	f04f 0000 	mov.w	r0, #0
    348e:	4770      	bx	lr
	switch (portNum) {
	case 0:
		pGPIO = LPC_GPIO0;
		break;
	case 1:
		pGPIO = LPC_GPIO1;
    3490:	f24c 0020 	movw	r0, #49184	; 0xc020
    3494:	f2c2 0009 	movt	r0, #8201	; 0x2009
		break;
    3498:	4770      	bx	lr
	case 2:
		pGPIO = LPC_GPIO2;
    349a:	f24c 0040 	movw	r0, #49216	; 0xc040
    349e:	f2c2 0009 	movt	r0, #8201	; 0x2009
		break;
    34a2:	4770      	bx	lr
	case 3:
		pGPIO = LPC_GPIO3;
    34a4:	f24c 0060 	movw	r0, #49248	; 0xc060
    34a8:	f2c2 0009 	movt	r0, #8201	; 0x2009
		break;
    34ac:	4770      	bx	lr
	case 4:
		pGPIO = LPC_GPIO4;
    34ae:	f24c 0080 	movw	r0, #49280	; 0xc080
    34b2:	f2c2 0009 	movt	r0, #8201	; 0x2009
		break;
    34b6:	4770      	bx	lr
{
	LPC_GPIO_TypeDef *pGPIO = NULL;

	switch (portNum) {
	case 0:
		pGPIO = LPC_GPIO0;
    34b8:	f44f 4040 	mov.w	r0, #49152	; 0xc000
    34bc:	f2c2 0009 	movt	r0, #8201	; 0x2009
	default:
		break;
	}

	return pGPIO;
}
    34c0:	4770      	bx	lr
    34c2:	bf00      	nop

000034c4 <GPIO_SetDir>:
 *
 * Note: All remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void GPIO_SetDir(uint8_t portNum, uint32_t bitValue, uint8_t dir)
{
    34c4:	b538      	push	{r3, r4, r5, lr}
    34c6:	460c      	mov	r4, r1
    34c8:	4615      	mov	r5, r2
//	xprintf("GPIO_SetDir" " (%s:%d)\n",_F_,_L_);
//	xprintf("%x %x %d" " (%s:%d)\n",&bitValue,bitValue,dir,_F_,_L_);

	LPC_GPIO_TypeDef *pGPIO = GPIO_GetPointer(portNum);
    34ca:	f7ff ffd7 	bl	347c <GPIO_GetPointer>

//	xprintf("%x %x %d" " (%s:%d)\n",(uint32_t)GPIO_GetPointer(portNum),(uint32_t)GPIO_GetPointer(portNum),dir,_F_,_L_);

	if (pGPIO != NULL) {
    34ce:	b140      	cbz	r0, 34e2 <GPIO_SetDir+0x1e>
		// Enable Output
		if (dir) {
    34d0:	b11d      	cbz	r5, 34da <GPIO_SetDir+0x16>
			pGPIO->FIODIR |= bitValue;
    34d2:	6802      	ldr	r2, [r0, #0]
    34d4:	4314      	orrs	r4, r2
    34d6:	6004      	str	r4, [r0, #0]
    34d8:	bd38      	pop	{r3, r4, r5, pc}
		}
		// Enable Input
		else {
			pGPIO->FIODIR &= ~bitValue;
    34da:	6802      	ldr	r2, [r0, #0]
    34dc:	ea22 0404 	bic.w	r4, r2, r4
    34e0:	6004      	str	r4, [r0, #0]
    34e2:	bd38      	pop	{r3, r4, r5, pc}

000034e4 <GPIO_SetValue>:
 * not effect.
 * - For all remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void GPIO_SetValue(uint8_t portNum, uint32_t bitValue)
{
    34e4:	b510      	push	{r4, lr}
    34e6:	460c      	mov	r4, r1
//	xprintf("GPIO_SetValue" " (%s:%d)\n",_F_,_L_);
//	xprintf("%x %x" " (%s:%d)\n",&bitValue,bitValue,_F_,_L_);

	LPC_GPIO_TypeDef *pGPIO = GPIO_GetPointer(portNum);
    34e8:	f7ff ffc8 	bl	347c <GPIO_GetPointer>
//	xprintf("%x %x" " (%s:%d)\n",(uint32_t)GPIO_GetPointer(portNum),(uint32_t)GPIO_GetPointer(portNum),_F_,_L_);

	if (pGPIO != NULL) {
    34ec:	b100      	cbz	r0, 34f0 <GPIO_SetValue+0xc>
		pGPIO->FIOSET = bitValue;
    34ee:	6184      	str	r4, [r0, #24]
    34f0:	bd10      	pop	{r4, pc}
    34f2:	bf00      	nop

000034f4 <GPIO_ClearValue>:
 * not effect.
 * - For all remaining bits that are not activated in bitValue (value '0')
 * will not be effected by this function.
 **********************************************************************/
void GPIO_ClearValue(uint8_t portNum, uint32_t bitValue)
{
    34f4:	b510      	push	{r4, lr}
    34f6:	460c      	mov	r4, r1
//	xprintf("GPIO_ClearValue" " (%s:%d)\n",_F_,_L_);
//	xprintf("%x %x" " (%s:%d)\n",&bitValue,bitValue,_F_,_L_);
	LPC_GPIO_TypeDef *pGPIO = GPIO_GetPointer(portNum);
    34f8:	f7ff ffc0 	bl	347c <GPIO_GetPointer>

	if (pGPIO != NULL) {
    34fc:	b100      	cbz	r0, 3500 <GPIO_ClearValue+0xc>
		pGPIO->FIOCLR = bitValue;
    34fe:	61c4      	str	r4, [r0, #28]
    3500:	bd10      	pop	{r4, pc}
    3502:	bf00      	nop

00003504 <GPIO_ReadValue>:
 *
 * Note: Return value contain state of each port pin (bit) on that GPIO regardless
 * its direction is input or output.
 **********************************************************************/
uint32_t GPIO_ReadValue(uint8_t portNum)
{
    3504:	b508      	push	{r3, lr}
	LPC_GPIO_TypeDef *pGPIO = GPIO_GetPointer(portNum);
    3506:	f7ff ffb9 	bl	347c <GPIO_GetPointer>

	if (pGPIO != NULL) {
    350a:	b108      	cbz	r0, 3510 <GPIO_ReadValue+0xc>
		return pGPIO->FIOPIN;
    350c:	6940      	ldr	r0, [r0, #20]
    350e:	bd08      	pop	{r3, pc}
	}

	return (0);
    3510:	f04f 0000 	mov.w	r0, #0
}
    3514:	bd08      	pop	{r3, pc}
    3516:	bf00      	nop

00003518 <FIO_ReadValue>:

/**
 * @brief The same with GPIO_ReadValue()
 */
uint32_t FIO_ReadValue(uint8_t portNum)
{
    3518:	b508      	push	{r3, lr}
	return (GPIO_ReadValue(portNum));
    351a:	f7ff fff3 	bl	3504 <GPIO_ReadValue>
}
    351e:	bd08      	pop	{r3, pc}

00003520 <check_failed>:
* @param[in]	file Pointer to the source file name
* @param[in]    line assert_param error line source number
* @return		None
*******************************************************************************/
void check_failed(uint8_t *file, uint32_t line)
{
    3520:	e7fe      	b.n	3520 <check_failed>
    3522:	bf00      	nop

00003524 <PINSEL_ConfigPin>:
 *                    that contains the configuration information for the
 *                    specified pin.
 * @return 		None
 **********************************************************************/
void PINSEL_ConfigPin(PINSEL_CFG_Type *PinCfg)
{
    3524:	b470      	push	{r4, r5, r6}
	set_PinFunc(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->Funcnum);
    3526:	7884      	ldrb	r4, [r0, #2]
 *
 * @return 		None
 **********************************************************************/
static void set_PinFunc ( uint8_t portnum, uint8_t pinnum, uint8_t funcnum)
{
	uint32_t pinnum_t = pinnum;
    3528:	7843      	ldrb	r3, [r0, #1]
	uint32_t pinselreg_idx = 2 * portnum;
    352a:	7802      	ldrb	r2, [r0, #0]
    352c:	ea4f 0242 	mov.w	r2, r2, lsl #1
	uint32_t *pPinCon = (uint32_t *)&LPC_PINCON->PINSEL0;

	if (pinnum_t >= 16) {
    3530:	2b0f      	cmp	r3, #15
		pinnum_t -= 16;
    3532:	bf84      	itt	hi
    3534:	3b10      	subhi	r3, #16
		pinselreg_idx++;
    3536:	3201      	addhi	r2, #1
	}
	*(uint32_t *)(pPinCon + pinselreg_idx) &= ~(0x03UL << (pinnum_t * 2));
    3538:	ea4f 0282 	mov.w	r2, r2, lsl #2
    353c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3540:	f502 3230 	add.w	r2, r2, #180224	; 0x2c000
    3544:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3548:	f04f 0103 	mov.w	r1, #3
    354c:	fa01 f103 	lsl.w	r1, r1, r3
    3550:	6815      	ldr	r5, [r2, #0]
    3552:	ea25 0101 	bic.w	r1, r5, r1
	*(uint32_t *)(pPinCon + pinselreg_idx) |= ((uint32_t)funcnum) << (pinnum_t * 2);
    3556:	fa04 f303 	lsl.w	r3, r4, r3
    355a:	430b      	orrs	r3, r1
    355c:	6013      	str	r3, [r2, #0]
 * @return 		None
 **********************************************************************/
void PINSEL_ConfigPin(PINSEL_CFG_Type *PinCfg)
{
	set_PinFunc(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->Funcnum);
	set_ResistorMode(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->Pinmode);
    355e:	78c5      	ldrb	r5, [r0, #3]

 * @return 		None
 **********************************************************************/
void set_ResistorMode ( uint8_t portnum, uint8_t pinnum, uint8_t modenum)
{
	uint32_t pinnum_t = pinnum;
    3560:	7842      	ldrb	r2, [r0, #1]
	uint32_t pinmodereg_idx = 2 * portnum;
    3562:	7803      	ldrb	r3, [r0, #0]
    3564:	ea4f 0343 	mov.w	r3, r3, lsl #1
	uint32_t *pPinCon = (uint32_t *)&LPC_PINCON->PINMODE0;

	if (pinnum_t >= 16) {
    3568:	2a0f      	cmp	r2, #15
		pinnum_t -= 16;
    356a:	bf84      	itt	hi
    356c:	3a10      	subhi	r2, #16
		pinmodereg_idx++ ;
    356e:	3301      	addhi	r3, #1
	}

	*(uint32_t *)(pPinCon + pinmodereg_idx) &= ~(0x03UL << (pinnum_t * 2));
    3570:	f24c 0140 	movw	r1, #49216	; 0xc040
    3574:	f2c4 0102 	movt	r1, #16386	; 0x4002
    3578:	ea4f 0242 	mov.w	r2, r2, lsl #1
    357c:	f04f 0403 	mov.w	r4, #3
    3580:	fa04 f402 	lsl.w	r4, r4, r2
    3584:	f851 6023 	ldr.w	r6, [r1, r3, lsl #2]
    3588:	ea26 0404 	bic.w	r4, r6, r4
	*(uint32_t *)(pPinCon + pinmodereg_idx) |= ((uint32_t)modenum) << (pinnum_t * 2);
    358c:	fa05 f202 	lsl.w	r2, r5, r2
    3590:	4322      	orrs	r2, r4
    3592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 **********************************************************************/
void PINSEL_ConfigPin(PINSEL_CFG_Type *PinCfg)
{
	set_PinFunc(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->Funcnum);
	set_ResistorMode(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->Pinmode);
	set_OpenDrainMode(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->OpenDrain);
    3596:	7802      	ldrb	r2, [r0, #0]
    3598:	7841      	ldrb	r1, [r0, #1]
 **********************************************************************/
void set_OpenDrainMode( uint8_t portnum, uint8_t pinnum, uint8_t modenum)
{
	uint32_t *pPinCon = (uint32_t *)&LPC_PINCON->PINMODE_OD0;

	if (modenum == PINSEL_PINMODE_OPENDRAIN){
    359a:	7903      	ldrb	r3, [r0, #4]
    359c:	2b01      	cmp	r3, #1
		*(uint32_t *)(pPinCon + portnum) |= (0x01UL << pinnum);
    359e:	f24c 0368 	movw	r3, #49256	; 0xc068
    35a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
    35a6:	f04f 0001 	mov.w	r0, #1
    35aa:	fa00 f101 	lsl.w	r1, r0, r1
    35ae:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    35b2:	bf0c      	ite	eq
    35b4:	4301      	orreq	r1, r0
	} else {
		*(uint32_t *)(pPinCon + portnum) &= ~(0x01UL << pinnum);
    35b6:	ea20 0101 	bicne.w	r1, r0, r1
    35ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
void PINSEL_ConfigPin(PINSEL_CFG_Type *PinCfg)
{
	set_PinFunc(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->Funcnum);
	set_ResistorMode(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->Pinmode);
	set_OpenDrainMode(PinCfg->Portnum, PinCfg->Pinnum, PinCfg->OpenDrain);
}
    35be:	bc70      	pop	{r4, r5, r6}
    35c0:	4770      	bx	lr
    35c2:	bf00      	nop

000035c4 <RTC_WriteGPREG>:
 * Note: These General purpose registers can be used to store important
 * information when the main power supply is off. The value in these
 * registers is not affected by chip reset.
 **********************************************************************/
void RTC_WriteGPREG (LPC_RTC_TypeDef *RTCx, uint8_t Channel, uint32_t Value)
{
    35c4:	b570      	push	{r4, r5, r6, lr}
    35c6:	4605      	mov	r5, r0
    35c8:	460c      	mov	r4, r1
    35ca:	4616      	mov	r6, r2
	uint32_t *preg;

	CHECK_PARAM(PARAM_RTCx(RTCx));
    35cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    35d0:	f2c4 0302 	movt	r3, #16386	; 0x4002
    35d4:	4298      	cmp	r0, r3
    35d6:	d007      	beq.n	35e8 <RTC_WriteGPREG+0x24>
    35d8:	f645 7084 	movw	r0, #24452	; 0x5f84
    35dc:	f2c0 0002 	movt	r0, #2
    35e0:	f240 21dd 	movw	r1, #733	; 0x2dd
    35e4:	f7ff ff9c 	bl	3520 <check_failed>
	CHECK_PARAM(PARAM_RTC_GPREG_CH(Channel));
    35e8:	2c04      	cmp	r4, #4
    35ea:	d907      	bls.n	35fc <RTC_WriteGPREG+0x38>
    35ec:	f645 7084 	movw	r0, #24452	; 0x5f84
    35f0:	f2c0 0002 	movt	r0, #2
    35f4:	f240 21de 	movw	r1, #734	; 0x2de
    35f8:	f7ff ff92 	bl	3520 <check_failed>

	preg = (uint32_t *)&RTCx->GPREG0;
    35fc:	f105 0544 	add.w	r5, r5, #68	; 0x44
	preg += Channel;
	*preg = Value;
    3600:	f845 6024 	str.w	r6, [r5, r4, lsl #2]
}
    3604:	bd70      	pop	{r4, r5, r6, pc}
    3606:	bf00      	nop

00003608 <SPI_SetClock>:
 * @param[in] 	SPIx	SPI peripheral definition, should be LPC_SPI
 * @param[in]	target_clock : clock of SPI (Hz)
 * @return 		None
 ***********************************************************************/
void SPI_SetClock (LPC_SPI_TypeDef *SPIx, uint32_t target_clock)
{
    3608:	b510      	push	{r4, lr}
    360a:	460c      	mov	r4, r1
	uint32_t spi_pclk;
	uint32_t prescale, temp;

	CHECK_PARAM(PARAM_SPIx(SPIx));
    360c:	f04f 0300 	mov.w	r3, #0
    3610:	f2c4 0302 	movt	r3, #16386	; 0x4002
    3614:	4298      	cmp	r0, r3
    3616:	d008      	beq.n	362a <__cs3_region_zero_size_ram+0xa>
    3618:	f645 70bc 	movw	r0, #24508	; 0x5fbc
    361c:	f2c0 0002 	movt	r0, #2
    3620:	f04f 0140 	mov.w	r1, #64	; 0x40
    3624:	f7ff ff7c 	bl	3520 <check_failed>
    3628:	bd10      	pop	{r4, pc}

	if (SPIx == LPC_SPI){
		spi_pclk =  CLKPWR_GetPCLK (CLKPWR_PCLKSEL_SPI);
    362a:	f04f 0010 	mov.w	r0, #16
    362e:	f7ff feed 	bl	340c <CLKPWR_GetPCLK>
 * @brief 		Setup clock rate for SPI device
 * @param[in] 	SPIx	SPI peripheral definition, should be LPC_SPI
 * @param[in]	target_clock : clock of SPI (Hz)
 * @return 		None
 ***********************************************************************/
void SPI_SetClock (LPC_SPI_TypeDef *SPIx, uint32_t target_clock)
    3632:	ea4f 0244 	mov.w	r2, r4, lsl #1
    3636:	ea4f 04c4 	mov.w	r4, r4, lsl #3
		spi_pclk =  CLKPWR_GetPCLK (CLKPWR_PCLKSEL_SPI);
	} else {
		return;
	}

	prescale = 8;
    363a:	f04f 0308 	mov.w	r3, #8
	// Find closest clock to target clock
	while (1){
		temp = target_clock * prescale;
		if (temp >= spi_pclk){
    363e:	42a0      	cmp	r0, r4
    3640:	d904      	bls.n	364c <__cs3_region_zero_size_ram+0x2c>
			break;
		}
		prescale += 2;
    3642:	f103 0302 	add.w	r3, r3, #2
    3646:	18a4      	adds	r4, r4, r2
		if(prescale >= 254){
    3648:	2bfe      	cmp	r3, #254	; 0xfe
    364a:	d1f8      	bne.n	363e <__cs3_region_zero_size_ram+0x1e>
			break;
		}
	}

	// Write to register
	SPIx->SPCCR = SPI_SPCCR_COUNTER(prescale);
    364c:	b2db      	uxtb	r3, r3
    364e:	f04f 0200 	mov.w	r2, #0
    3652:	f2c4 0202 	movt	r2, #16386	; 0x4002
    3656:	60d3      	str	r3, [r2, #12]
    3658:	bd10      	pop	{r4, pc}
    365a:	bf00      	nop

0000365c <SPI_GetDataSize>:
 * @brief		Get data bit size per transfer
 * @param[in]	SPIx	SPI peripheral selected, should be LPC_SPI
 * @return 		number of bit per transfer, could be 8-16
 **********************************************************************/
uint8_t SPI_GetDataSize (LPC_SPI_TypeDef *SPIx)
{
    365c:	b510      	push	{r4, lr}
    365e:	4604      	mov	r4, r0
	CHECK_PARAM(PARAM_SPIx(SPIx));
    3660:	f04f 0300 	mov.w	r3, #0
    3664:	f2c4 0302 	movt	r3, #16386	; 0x4002
    3668:	4298      	cmp	r0, r3
    366a:	d007      	beq.n	367c <SPI_GetDataSize+0x20>
    366c:	f645 70bc 	movw	r0, #24508	; 0x5fbc
    3670:	f2c0 0002 	movt	r0, #2
    3674:	f04f 0171 	mov.w	r1, #113	; 0x71
    3678:	f7ff ff52 	bl	3520 <check_failed>
	return ((SPIx->SPCR)>>8 & 0xF);
    367c:	6820      	ldr	r0, [r4, #0]
}
    367e:	f3c0 2003 	ubfx	r0, r0, #8, #4
    3682:	bd10      	pop	{r4, pc}

00003684 <SPI_Init>:
*                    that contains the configuration information for the
*                    specified SPI peripheral.
 * @return 		None
 *********************************************************************/
void SPI_Init(LPC_SPI_TypeDef *SPIx, SPI_CFG_Type *SPI_ConfigStruct)
{
    3684:	b538      	push	{r3, r4, r5, lr}
    3686:	460c      	mov	r4, r1
	uint32_t tmp;

	CHECK_PARAM(PARAM_SPIx(SPIx));
    3688:	f04f 0300 	mov.w	r3, #0
    368c:	f2c4 0302 	movt	r3, #16386	; 0x4002
    3690:	4298      	cmp	r0, r3
    3692:	d008      	beq.n	36a6 <SPI_Init+0x22>
    3694:	f645 70bc 	movw	r0, #24508	; 0x5fbc
    3698:	f2c0 0002 	movt	r0, #2
    369c:	f04f 0182 	mov.w	r1, #130	; 0x82
    36a0:	f7ff ff3e 	bl	3520 <check_failed>
    36a4:	bd38      	pop	{r3, r4, r5, pc}

	if(SPIx == LPC_SPI){
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCSPI, ENABLE);
    36a6:	f44f 7080 	mov.w	r0, #256	; 0x100
    36aa:	f04f 0101 	mov.w	r1, #1
    36ae:	f7ff fec3 	bl	3438 <CLKPWR_ConfigPPWR>
	} else {
		return;
	}

	// Configure SPI, interrupt is disable as default
	tmp = ((SPI_ConfigStruct->CPHA) | (SPI_ConfigStruct->CPOL) \
    36b2:	68a2      	ldr	r2, [r4, #8]
    36b4:	6863      	ldr	r3, [r4, #4]
    36b6:	431a      	orrs	r2, r3
		| (SPI_ConfigStruct->DataOrder) | (SPI_ConfigStruct->Databit) \
    36b8:	6923      	ldr	r3, [r4, #16]
    36ba:	431a      	orrs	r2, r3
    36bc:	6823      	ldr	r3, [r4, #0]
    36be:	431a      	orrs	r2, r3
		| (SPI_ConfigStruct->Mode) | SPI_SPCR_BIT_EN) & SPI_SPCR_BITMASK;
    36c0:	68e3      	ldr	r3, [r4, #12]
    36c2:	431a      	orrs	r2, r3
    36c4:	f640 73f8 	movw	r3, #4088	; 0xff8
    36c8:	4013      	ands	r3, r2
	} else {
		return;
	}

	// Configure SPI, interrupt is disable as default
	tmp = ((SPI_ConfigStruct->CPHA) | (SPI_ConfigStruct->CPOL) \
    36ca:	f043 0304 	orr.w	r3, r3, #4
		| (SPI_ConfigStruct->DataOrder) | (SPI_ConfigStruct->Databit) \
		| (SPI_ConfigStruct->Mode) | SPI_SPCR_BIT_EN) & SPI_SPCR_BITMASK;
	// write back to SPI control register
	SPIx->SPCR = tmp;
    36ce:	f04f 0500 	mov.w	r5, #0
    36d2:	f2c4 0502 	movt	r5, #16386	; 0x4002
    36d6:	602b      	str	r3, [r5, #0]

	// Set clock rate for SPI peripheral
	SPI_SetClock(SPIx, SPI_ConfigStruct->ClockRate);
    36d8:	4628      	mov	r0, r5
    36da:	6961      	ldr	r1, [r4, #20]
    36dc:	f7ff ff94 	bl	3608 <SPI_SetClock>

	// If interrupt flag is set, Write '1' to Clear interrupt flag
	if (SPIx->SPINT & SPI_SPINT_INTFLAG){
    36e0:	69eb      	ldr	r3, [r5, #28]
    36e2:	f013 0f01 	tst.w	r3, #1
		SPIx->SPINT = SPI_SPINT_INTFLAG;
    36e6:	bf1f      	itttt	ne
    36e8:	2300      	movne	r3, #0
    36ea:	f2c4 0302 	movtne	r3, #16386	; 0x4002
    36ee:	2201      	movne	r2, #1
    36f0:	61da      	strne	r2, [r3, #28]
    36f2:	bd38      	pop	{r3, r4, r5, pc}

000036f4 <SPI_SendData>:
 * @param[in]	Data	Data to transmit (must be 16 or 8-bit long,
 * 						this depend on SPI data bit number configured)
 * @return 		none
 **********************************************************************/
void SPI_SendData(LPC_SPI_TypeDef* SPIx, uint16_t Data)
{
    36f4:	b538      	push	{r3, r4, r5, lr}
    36f6:	4604      	mov	r4, r0
    36f8:	460d      	mov	r5, r1
	CHECK_PARAM(PARAM_SPIx(SPIx));
    36fa:	f04f 0300 	mov.w	r3, #0
    36fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
    3702:	4298      	cmp	r0, r3
    3704:	d007      	beq.n	3716 <SPI_SendData+0x22>
    3706:	f645 70bc 	movw	r0, #24508	; 0x5fbc
    370a:	f2c0 0002 	movt	r0, #2
    370e:	f04f 01bc 	mov.w	r1, #188	; 0xbc
    3712:	f7ff ff05 	bl	3520 <check_failed>

	SPIx->SPDR = Data & SPI_SPDR_BITMASK;
    3716:	60a5      	str	r5, [r4, #8]
}
    3718:	bd38      	pop	{r3, r4, r5, pc}
    371a:	bf00      	nop

0000371c <SPI_ReceiveData>:
 * @brief		Receive a single data from SPIx peripheral
 * @param[in]	SPIx	SPI peripheral selected, should be LPC_SPI
 * @return 		Data received (16-bit long)
 **********************************************************************/
uint16_t SPI_ReceiveData(LPC_SPI_TypeDef* SPIx)
{
    371c:	b510      	push	{r4, lr}
    371e:	4604      	mov	r4, r0
	CHECK_PARAM(PARAM_SPIx(SPIx));
    3720:	f04f 0300 	mov.w	r3, #0
    3724:	f2c4 0302 	movt	r3, #16386	; 0x4002
    3728:	4298      	cmp	r0, r3
    372a:	d007      	beq.n	373c <SPI_ReceiveData+0x20>
    372c:	f645 70bc 	movw	r0, #24508	; 0x5fbc
    3730:	f2c0 0002 	movt	r0, #2
    3734:	f04f 01ca 	mov.w	r1, #202	; 0xca
    3738:	f7ff fef2 	bl	3520 <check_failed>

	return ((uint16_t) (SPIx->SPDR & SPI_SPDR_BITMASK));
    373c:	68a0      	ldr	r0, [r4, #8]
}
    373e:	b280      	uxth	r0, r0
    3740:	bd10      	pop	{r4, pc}
    3742:	bf00      	nop

00003744 <SPI_IntCmd>:
 * 				- ENALBE: Enable this SPI interrupt.
* 				- DISALBE: Disable this SPI interrupt.
 * @return 		None
 *********************************************************************/
void SPI_IntCmd(LPC_SPI_TypeDef *SPIx, FunctionalState NewState)
{
    3744:	b538      	push	{r3, r4, r5, lr}
    3746:	4604      	mov	r4, r0
    3748:	460d      	mov	r5, r1
	CHECK_PARAM(PARAM_SPIx(SPIx));
    374a:	f04f 0300 	mov.w	r3, #0
    374e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    3752:	4298      	cmp	r0, r3
    3754:	d007      	beq.n	3766 <SPI_IntCmd+0x22>
    3756:	f645 70bc 	movw	r0, #24508	; 0x5fbc
    375a:	f2c0 0002 	movt	r0, #2
    375e:	f44f 71ae 	mov.w	r1, #348	; 0x15c
    3762:	f7ff fedd 	bl	3520 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
    3766:	2d01      	cmp	r5, #1
    3768:	d907      	bls.n	377a <SPI_IntCmd+0x36>
    376a:	f645 70bc 	movw	r0, #24508	; 0x5fbc
    376e:	f2c0 0002 	movt	r0, #2
    3772:	f240 115d 	movw	r1, #349	; 0x15d
    3776:	f7ff fed3 	bl	3520 <check_failed>

	if (NewState == ENABLE)
    377a:	2d01      	cmp	r5, #1
	{
		SPIx->SPCR |= SPI_SPCR_SPIE;
    377c:	bf07      	ittee	eq
    377e:	6823      	ldreq	r3, [r4, #0]
    3780:	f043 0380 	orreq.w	r3, r3, #128	; 0x80
	}
	else
	{
		SPIx->SPCR &= (~SPI_SPCR_SPIE) & SPI_SPCR_BITMASK;
    3784:	6822      	ldrne	r2, [r4, #0]
    3786:	f640 737c 	movwne	r3, #3964	; 0xf7c
    378a:	bf18      	it	ne
    378c:	4013      	andne	r3, r2
    378e:	6023      	str	r3, [r4, #0]
    3790:	bd38      	pop	{r3, r4, r5, pc}
    3792:	bf00      	nop

00003794 <SPI_ReadWrite>:
 * 				Return (-1) if error.
 * Note: This function can be used in both master and slave mode.
 ***********************************************************************/
int32_t SPI_ReadWrite (LPC_SPI_TypeDef *SPIx, SPI_DATA_SETUP_Type *dataCfg, \
						SPI_TRANSFER_Type xfType)
{
    3794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3798:	b083      	sub	sp, #12
    379a:	4606      	mov	r6, r0
    379c:	460d      	mov	r5, r1
    379e:	9201      	str	r2, [sp, #4]
    uint32_t stat;
    uint32_t temp;
    uint8_t dataword;

	//read for empty buffer
	temp = SPIx->SPDR;
    37a0:	6883      	ldr	r3, [r0, #8]
	//dummy to clear status
	temp = SPIx->SPSR;
    37a2:	6843      	ldr	r3, [r0, #4]
	dataCfg->counter = 0;
    37a4:	f04f 0300 	mov.w	r3, #0
    37a8:	60cb      	str	r3, [r1, #12]
	dataCfg->status = 0;
    37aa:	610b      	str	r3, [r1, #16]

	if(SPI_GetDataSize (SPIx) == 8)
    37ac:	f7ff ff56 	bl	365c <SPI_GetDataSize>
		dataword = 0;
    37b0:	f1b0 0708 	subs.w	r7, r0, #8
    37b4:	bf18      	it	ne
    37b6:	2701      	movne	r7, #1
	else dataword = 1;
	if (xfType == SPI_TRANSFER_POLLING){
    37b8:	9b01      	ldr	r3, [sp, #4]
    37ba:	2b00      	cmp	r3, #0
    37bc:	d14f      	bne.n	385e <SPI_ReadWrite+0xca>

		if (dataword == 0){
    37be:	b927      	cbnz	r7, 37ca <SPI_ReadWrite+0x36>
			rdata8 = (uint8_t *)dataCfg->rx_data;
    37c0:	f8d5 b004 	ldr.w	fp, [r5, #4]
			wdata8 = (uint8_t *)dataCfg->tx_data;
    37c4:	f8d5 9000 	ldr.w	r9, [r5]
    37c8:	e041      	b.n	384e <SPI_ReadWrite+0xba>
		} else {
			rdata16 = (uint16_t *)dataCfg->rx_data;
    37ca:	f8d5 a004 	ldr.w	sl, [r5, #4]
			wdata16 = (uint16_t *)dataCfg->tx_data;
    37ce:	f8d5 8000 	ldr.w	r8, [r5]
    37d2:	e03c      	b.n	384e <SPI_ReadWrite+0xba>
		}

		while(dataCfg->counter < dataCfg->length)
		{
			// Write data to buffer
			if(dataCfg->tx_data == NULL){
    37d4:	682b      	ldr	r3, [r5, #0]
    37d6:	b963      	cbnz	r3, 37f2 <SPI_ReadWrite+0x5e>
				if (dataword == 0){
    37d8:	b92f      	cbnz	r7, 37e6 <SPI_ReadWrite+0x52>
					SPI_SendData(SPIx, 0xFF);
    37da:	4630      	mov	r0, r6
    37dc:	f04f 01ff 	mov.w	r1, #255	; 0xff
    37e0:	f7ff ff88 	bl	36f4 <SPI_SendData>
    37e4:	e011      	b.n	380a <SPI_ReadWrite+0x76>
				} else {
					SPI_SendData(SPIx, 0xFFFF);
    37e6:	4630      	mov	r0, r6
    37e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    37ec:	f7ff ff82 	bl	36f4 <SPI_SendData>
    37f0:	e00b      	b.n	380a <SPI_ReadWrite+0x76>
				}
			} else {
				if (dataword == 0){
    37f2:	b92f      	cbnz	r7, 3800 <SPI_ReadWrite+0x6c>
					SPI_SendData(SPIx, *wdata8);
    37f4:	4630      	mov	r0, r6
    37f6:	f819 1b01 	ldrb.w	r1, [r9], #1
    37fa:	f7ff ff7b 	bl	36f4 <SPI_SendData>
    37fe:	e004      	b.n	380a <SPI_ReadWrite+0x76>
					wdata8++;
				} else {
					SPI_SendData(SPIx, *wdata16);
    3800:	4630      	mov	r0, r6
    3802:	f838 1b02 	ldrh.w	r1, [r8], #2
    3806:	f7ff ff75 	bl	36f4 <SPI_SendData>
					wdata16++;
				}
			}
			// Wait for transfer complete
			while (!((stat = SPIx->SPSR) & SPI_SPSR_SPIF));
    380a:	6874      	ldr	r4, [r6, #4]
    380c:	f014 0f80 	tst.w	r4, #128	; 0x80
    3810:	d0fb      	beq.n	380a <SPI_ReadWrite+0x76>
			// Check for error
			if (stat & (SPI_SPSR_ABRT | SPI_SPSR_MODF | SPI_SPSR_ROVR | SPI_SPSR_WCOL)){
    3812:	f014 0f78 	tst.w	r4, #120	; 0x78
    3816:	d004      	beq.n	3822 <SPI_ReadWrite+0x8e>
				// save status
				dataCfg->status = stat | SPI_STAT_ERROR;
    3818:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    381c:	612c      	str	r4, [r5, #16]
				return (dataCfg->counter);
    381e:	68e8      	ldr	r0, [r5, #12]
    3820:	e04c      	b.n	38bc <SPI_ReadWrite+0x128>
			}
			// Read data from SPI dat
			temp = (uint32_t) SPI_ReceiveData(SPIx);
    3822:	4630      	mov	r0, r6
    3824:	f7ff ff7a 	bl	371c <SPI_ReceiveData>

			// Store data to destination
			if (dataCfg->rx_data != NULL)
    3828:	686b      	ldr	r3, [r5, #4]
    382a:	b133      	cbz	r3, 383a <SPI_ReadWrite+0xa6>
			{
				if (dataword == 0){
    382c:	b917      	cbnz	r7, 3834 <SPI_ReadWrite+0xa0>
					*(rdata8) = (uint8_t) temp;
    382e:	f80b 0b01 	strb.w	r0, [fp], #1
    3832:	e003      	b.n	383c <SPI_ReadWrite+0xa8>
					rdata8++;
				} else {
					*(rdata16) = (uint16_t) temp;
    3834:	f82a 0b02 	strh.w	r0, [sl], #2
    3838:	e005      	b.n	3846 <SPI_ReadWrite+0xb2>
					rdata16++;
				}
			}
			// Increase counter
			if (dataword == 0){
    383a:	b927      	cbnz	r7, 3846 <SPI_ReadWrite+0xb2>
				dataCfg->counter++;
    383c:	68eb      	ldr	r3, [r5, #12]
    383e:	f103 0301 	add.w	r3, r3, #1
    3842:	60eb      	str	r3, [r5, #12]
    3844:	e003      	b.n	384e <SPI_ReadWrite+0xba>
			} else {
				dataCfg->counter += 2;
    3846:	68eb      	ldr	r3, [r5, #12]
    3848:	f103 0302 	add.w	r3, r3, #2
    384c:	60eb      	str	r3, [r5, #12]
		} else {
			rdata16 = (uint16_t *)dataCfg->rx_data;
			wdata16 = (uint16_t *)dataCfg->tx_data;
		}

		while(dataCfg->counter < dataCfg->length)
    384e:	68e8      	ldr	r0, [r5, #12]
    3850:	68ab      	ldr	r3, [r5, #8]
    3852:	4298      	cmp	r0, r3
    3854:	d3be      	bcc.n	37d4 <SPI_ReadWrite+0x40>
			}
		}

		// Return length of actual data transferred
		// save status
		dataCfg->status = stat | SPI_STAT_DONE;
    3856:	f444 7480 	orr.w	r4, r4, #256	; 0x100
    385a:	612c      	str	r4, [r5, #16]
		return (dataCfg->counter);
    385c:	e02e      	b.n	38bc <SPI_ReadWrite+0x128>
	}
	// Interrupt mode
	else {

		// Check if interrupt flag is already set
		if(SPIx->SPINT & SPI_SPINT_INTFLAG){
    385e:	69f3      	ldr	r3, [r6, #28]
    3860:	f013 0f01 	tst.w	r3, #1
			SPIx->SPINT = SPI_SPINT_INTFLAG;
    3864:	bf1c      	itt	ne
    3866:	2301      	movne	r3, #1
    3868:	61f3      	strne	r3, [r6, #28]
		}
		if (dataCfg->counter < dataCfg->length){
    386a:	68ea      	ldr	r2, [r5, #12]
    386c:	68ab      	ldr	r3, [r5, #8]
    386e:	429a      	cmp	r2, r3
				}
			}
			SPI_IntCmd(SPIx, ENABLE);
		} else {
			// Save status
			dataCfg->status = SPI_STAT_DONE;
    3870:	bf22      	ittt	cs
    3872:	f44f 7380 	movcs.w	r3, #256	; 0x100
    3876:	612b      	strcs	r3, [r5, #16]
		}
		return (0);
    3878:	2000      	movcs	r0, #0

		// Check if interrupt flag is already set
		if(SPIx->SPINT & SPI_SPINT_INTFLAG){
			SPIx->SPINT = SPI_SPINT_INTFLAG;
		}
		if (dataCfg->counter < dataCfg->length){
    387a:	d21f      	bcs.n	38bc <SPI_ReadWrite+0x128>
			// Write data to buffer
			if(dataCfg->tx_data == NULL){
    387c:	682b      	ldr	r3, [r5, #0]
    387e:	b963      	cbnz	r3, 389a <SPI_ReadWrite+0x106>
				if (dataword == 0){
    3880:	b92f      	cbnz	r7, 388e <SPI_ReadWrite+0xfa>
					SPI_SendData(SPIx, 0xFF);
    3882:	4630      	mov	r0, r6
    3884:	f04f 01ff 	mov.w	r1, #255	; 0xff
    3888:	f7ff ff34 	bl	36f4 <SPI_SendData>
    388c:	e00f      	b.n	38ae <SPI_ReadWrite+0x11a>
				} else {
					SPI_SendData(SPIx, 0xFFFF);
    388e:	4630      	mov	r0, r6
    3890:	f64f 71ff 	movw	r1, #65535	; 0xffff
    3894:	f7ff ff2e 	bl	36f4 <SPI_SendData>
    3898:	e009      	b.n	38ae <SPI_ReadWrite+0x11a>
				}
			} else {
				if (dataword == 0){
    389a:	b927      	cbnz	r7, 38a6 <SPI_ReadWrite+0x112>
					SPI_SendData(SPIx, (*(uint8_t *)dataCfg->tx_data));
    389c:	4630      	mov	r0, r6
    389e:	7819      	ldrb	r1, [r3, #0]
    38a0:	f7ff ff28 	bl	36f4 <SPI_SendData>
    38a4:	e003      	b.n	38ae <SPI_ReadWrite+0x11a>
				} else {
					SPI_SendData(SPIx, (*(uint16_t *)dataCfg->tx_data));
    38a6:	4630      	mov	r0, r6
    38a8:	8819      	ldrh	r1, [r3, #0]
    38aa:	f7ff ff23 	bl	36f4 <SPI_SendData>
				}
			}
			SPI_IntCmd(SPIx, ENABLE);
    38ae:	4630      	mov	r0, r6
    38b0:	f04f 0101 	mov.w	r1, #1
    38b4:	f7ff ff46 	bl	3744 <SPI_IntCmd>
		} else {
			// Save status
			dataCfg->status = SPI_STAT_DONE;
		}
		return (0);
    38b8:	f04f 0000 	mov.w	r0, #0
	}
}
    38bc:	b003      	add	sp, #12
    38be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    38c2:	bf00      	nop

000038c4 <TIM_ClearIntPending>:
 * 				- TIM_CR0_INT: Interrupt for Capture channel 0
 * 				- TIM_CR1_INT: Interrupt for Capture channel 1
 * @return 		None
 **********************************************************************/
void TIM_ClearIntPending(LPC_TIM_TypeDef *TIMx, TIM_INT_TYPE IntFlag)
{
    38c4:	b538      	push	{r3, r4, r5, lr}
    38c6:	4604      	mov	r4, r0
    38c8:	460d      	mov	r5, r1
	CHECK_PARAM(PARAM_TIMx(TIMx));
    38ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    38ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
    38d2:	1ac3      	subs	r3, r0, r3
    38d4:	bf18      	it	ne
    38d6:	2301      	movne	r3, #1
    38d8:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
    38dc:	bf0c      	ite	eq
    38de:	2300      	moveq	r3, #0
    38e0:	f003 0301 	andne.w	r3, r3, #1
    38e4:	b1c3      	cbz	r3, 3918 <TIM_ClearIntPending+0x54>
    38e6:	f04f 0300 	mov.w	r3, #0
    38ea:	f2c4 0309 	movt	r3, #16393	; 0x4009
    38ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    38f2:	f2c4 0209 	movt	r2, #16393	; 0x4009
    38f6:	1a82      	subs	r2, r0, r2
    38f8:	bf18      	it	ne
    38fa:	2201      	movne	r2, #1
    38fc:	4298      	cmp	r0, r3
    38fe:	bf0c      	ite	eq
    3900:	2300      	moveq	r3, #0
    3902:	f002 0301 	andne.w	r3, r2, #1
    3906:	b13b      	cbz	r3, 3918 <TIM_ClearIntPending+0x54>
    3908:	f645 70f4 	movw	r0, #24564	; 0x5ff4
    390c:	f2c0 0002 	movt	r0, #2
    3910:	f04f 01dd 	mov.w	r1, #221	; 0xdd
    3914:	f7ff fe04 	bl	3520 <check_failed>
	CHECK_PARAM(PARAM_TIM_INT_TYPE(IntFlag));
    3918:	2d05      	cmp	r5, #5
    391a:	d907      	bls.n	392c <TIM_ClearIntPending+0x68>
    391c:	f645 70f4 	movw	r0, #24564	; 0x5ff4
    3920:	f2c0 0002 	movt	r0, #2
    3924:	f04f 01de 	mov.w	r1, #222	; 0xde
    3928:	f7ff fdfa 	bl	3520 <check_failed>
	TIMx->IR = TIM_IR_CLR(IntFlag);
    392c:	f04f 0301 	mov.w	r3, #1
    3930:	fa03 f505 	lsl.w	r5, r3, r5
    3934:	6025      	str	r5, [r4, #0]
}
    3936:	bd38      	pop	{r3, r4, r5, pc}

00003938 <TIM_Init>:
 * 				that contains the configuration information for the
 *                    specified Timer peripheral.
 * @return 		None
 **********************************************************************/
void TIM_Init(LPC_TIM_TypeDef *TIMx, TIM_MODE_OPT TimerCounterMode, void *TIM_ConfigStruct)
{
    3938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    393a:	4604      	mov	r4, r0
    393c:	460d      	mov	r5, r1
    393e:	4616      	mov	r6, r2
	TIM_TIMERCFG_Type *pTimeCfg;
	TIM_COUNTERCFG_Type *pCounterCfg;

	CHECK_PARAM(PARAM_TIMx(TIMx));
    3940:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    3944:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3948:	1ac3      	subs	r3, r0, r3
    394a:	bf18      	it	ne
    394c:	2301      	movne	r3, #1
    394e:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
    3952:	bf0c      	ite	eq
    3954:	2300      	moveq	r3, #0
    3956:	f003 0301 	andne.w	r3, r3, #1
    395a:	b1c3      	cbz	r3, 398e <TIM_Init+0x56>
    395c:	f04f 0300 	mov.w	r3, #0
    3960:	f2c4 0309 	movt	r3, #16393	; 0x4009
    3964:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3968:	f2c4 0209 	movt	r2, #16393	; 0x4009
    396c:	1a82      	subs	r2, r0, r2
    396e:	bf18      	it	ne
    3970:	2201      	movne	r2, #1
    3972:	4298      	cmp	r0, r3
    3974:	bf0c      	ite	eq
    3976:	2300      	moveq	r3, #0
    3978:	f002 0301 	andne.w	r3, r2, #1
    397c:	b13b      	cbz	r3, 398e <TIM_Init+0x56>
    397e:	f645 70f4 	movw	r0, #24564	; 0x5ff4
    3982:	f2c0 0002 	movt	r0, #2
    3986:	f240 112b 	movw	r1, #299	; 0x12b
    398a:	f7ff fdc9 	bl	3520 <check_failed>
	CHECK_PARAM(PARAM_TIM_MODE_OPT(TimerCounterMode));
    398e:	2d01      	cmp	r5, #1
    3990:	d907      	bls.n	39a2 <TIM_Init+0x6a>
    3992:	f645 70f4 	movw	r0, #24564	; 0x5ff4
    3996:	f2c0 0002 	movt	r0, #2
    399a:	f44f 7196 	mov.w	r1, #300	; 0x12c
    399e:	f7ff fdbf 	bl	3520 <check_failed>

	//set power

	if (TIMx== LPC_TIM0)
    39a2:	f1b4 2f40 	cmp.w	r4, #1073758208	; 0x40004000
    39a6:	d10c      	bne.n	39c2 <TIM_Init+0x8a>
	{
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCTIM0, ENABLE);
    39a8:	f04f 0002 	mov.w	r0, #2
    39ac:	f04f 0101 	mov.w	r1, #1
    39b0:	f7ff fd42 	bl	3438 <CLKPWR_ConfigPPWR>
		//PCLK_Timer0 = CCLK/4
		CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_TIMER0, CLKPWR_PCLKSEL_CCLK_DIV_4);
    39b4:	f04f 0002 	mov.w	r0, #2
    39b8:	f04f 0100 	mov.w	r1, #0
    39bc:	f7ff fcde 	bl	337c <CLKPWR_SetPCLKDiv>
    39c0:	e037      	b.n	3a32 <TIM_Init+0xfa>
	}
	else if (TIMx== LPC_TIM1)
    39c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    39c6:	f2c4 0300 	movt	r3, #16384	; 0x4000
    39ca:	429c      	cmp	r4, r3
    39cc:	d10c      	bne.n	39e8 <TIM_Init+0xb0>
	{
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCTIM1, ENABLE);
    39ce:	f04f 0004 	mov.w	r0, #4
    39d2:	f04f 0101 	mov.w	r1, #1
    39d6:	f7ff fd2f 	bl	3438 <CLKPWR_ConfigPPWR>
		//PCLK_Timer1 = CCLK/4
		CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_TIMER1, CLKPWR_PCLKSEL_CCLK_DIV_4);
    39da:	f04f 0004 	mov.w	r0, #4
    39de:	f04f 0100 	mov.w	r1, #0
    39e2:	f7ff fccb 	bl	337c <CLKPWR_SetPCLKDiv>
    39e6:	e024      	b.n	3a32 <TIM_Init+0xfa>

	}

	else if (TIMx== LPC_TIM2)
    39e8:	f04f 0300 	mov.w	r3, #0
    39ec:	f2c4 0309 	movt	r3, #16393	; 0x4009
    39f0:	429c      	cmp	r4, r3
    39f2:	d10c      	bne.n	3a0e <TIM_Init+0xd6>
	{
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCTIM2, ENABLE);
    39f4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    39f8:	f04f 0101 	mov.w	r1, #1
    39fc:	f7ff fd1c 	bl	3438 <CLKPWR_ConfigPPWR>
		//PCLK_Timer2= CCLK/4
		CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_TIMER2, CLKPWR_PCLKSEL_CCLK_DIV_4);
    3a00:	f04f 002c 	mov.w	r0, #44	; 0x2c
    3a04:	f04f 0100 	mov.w	r1, #0
    3a08:	f7ff fcb8 	bl	337c <CLKPWR_SetPCLKDiv>
    3a0c:	e011      	b.n	3a32 <TIM_Init+0xfa>
	}
	else if (TIMx== LPC_TIM3)
    3a0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    3a12:	f2c4 0309 	movt	r3, #16393	; 0x4009
    3a16:	429c      	cmp	r4, r3
    3a18:	d10b      	bne.n	3a32 <TIM_Init+0xfa>
	{
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCTIM3, ENABLE);
    3a1a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    3a1e:	f04f 0101 	mov.w	r1, #1
    3a22:	f7ff fd09 	bl	3438 <CLKPWR_ConfigPPWR>
		//PCLK_Timer3= CCLK/4
		CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_TIMER3, CLKPWR_PCLKSEL_CCLK_DIV_4);
    3a26:	f04f 002e 	mov.w	r0, #46	; 0x2e
    3a2a:	f04f 0100 	mov.w	r1, #0
    3a2e:	f7ff fca5 	bl	337c <CLKPWR_SetPCLKDiv>

	}

	TIMx->CCR &= ~TIM_CTCR_MODE_MASK;
    3a32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3a34:	f023 0303 	bic.w	r3, r3, #3
    3a38:	62a3      	str	r3, [r4, #40]	; 0x28
	TIMx->CCR |= TIM_TIMER_MODE;
    3a3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3a3c:	62a3      	str	r3, [r4, #40]	; 0x28

	TIMx->TC =0;
    3a3e:	f04f 0300 	mov.w	r3, #0
    3a42:	60a3      	str	r3, [r4, #8]
	TIMx->PC =0;
    3a44:	6123      	str	r3, [r4, #16]
	TIMx->PR =0;
    3a46:	60e3      	str	r3, [r4, #12]
	TIMx->TCR |= (1<<1); //Reset Counter
    3a48:	6863      	ldr	r3, [r4, #4]
    3a4a:	f043 0302 	orr.w	r3, r3, #2
    3a4e:	6063      	str	r3, [r4, #4]
	TIMx->TCR &= ~(1<<1); //release reset
    3a50:	6863      	ldr	r3, [r4, #4]
    3a52:	f023 0302 	bic.w	r3, r3, #2
    3a56:	6063      	str	r3, [r4, #4]
	if (TimerCounterMode == TIM_TIMER_MODE )
    3a58:	2d00      	cmp	r5, #0
    3a5a:	d132      	bne.n	3ac2 <TIM_Init+0x18a>
	{
		pTimeCfg = (TIM_TIMERCFG_Type *)TIM_ConfigStruct;
		if (pTimeCfg->PrescaleOption  == TIM_PRESCALE_TICKVAL)
    3a5c:	7833      	ldrb	r3, [r6, #0]
    3a5e:	b923      	cbnz	r3, 3a6a <TIM_Init+0x132>
		{
			TIMx->PR   = pTimeCfg->PrescaleValue -1  ;
    3a60:	6873      	ldr	r3, [r6, #4]
    3a62:	f103 33ff 	add.w	r3, r3, #4294967295
    3a66:	60e3      	str	r3, [r4, #12]
    3a68:	e036      	b.n	3ad8 <TIM_Init+0x1a0>
 **********************************************************************/
uint32_t converPtrToTimeNum (LPC_TIM_TypeDef *TIMx)
{
	uint32_t tnum = -1;

	if (TIMx == LPC_TIM0)
    3a6a:	f1b4 2f40 	cmp.w	r4, #1073758208	; 0x40004000
    3a6e:	d014      	beq.n	3a9a <TIM_Init+0x162>
	{
		tnum = 0;
	}
	else if (TIMx == LPC_TIM1)
    3a70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    3a74:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3a78:	429c      	cmp	r4, r3
    3a7a:	d031      	beq.n	3ae0 <TIM_Init+0x1a8>
	{
		tnum = 1;
	}
	else if (TIMx == LPC_TIM2)
    3a7c:	f04f 0300 	mov.w	r3, #0
    3a80:	f2c4 0309 	movt	r3, #16393	; 0x4009
    3a84:	429c      	cmp	r4, r3
    3a86:	d032      	beq.n	3aee <TIM_Init+0x1b6>
	{
		tnum = 2;
	}
	else if (TIMx == LPC_TIM3)
    3a88:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    3a8c:	f2c4 0309 	movt	r3, #16393	; 0x4009
    3a90:	429c      	cmp	r4, r3
		{
			TIMx->PR   = pTimeCfg->PrescaleValue -1  ;
		}
		else
		{
			TIMx->PR   = converUSecToVal (converPtrToTimeNum(TIMx),pTimeCfg->PrescaleValue)-1;
    3a92:	bf18      	it	ne
    3a94:	6875      	ldrne	r5, [r6, #4]
	}
	else if (TIMx == LPC_TIM2)
	{
		tnum = 2;
	}
	else if (TIMx == LPC_TIM3)
    3a96:	d106      	bne.n	3aa6 <TIM_Init+0x16e>
    3a98:	e030      	b.n	3afc <TIM_Init+0x1c4>
		{
			TIMx->PR   = pTimeCfg->PrescaleValue -1  ;
		}
		else
		{
			TIMx->PR   = converUSecToVal (converPtrToTimeNum(TIMx),pTimeCfg->PrescaleValue)-1;
    3a9a:	6875      	ldr	r5, [r6, #4]
{
	uint32_t clkdlycnt;
	switch (timernum)
	{
	case 0:
		clkdlycnt = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_TIMER0);
    3a9c:	f04f 0002 	mov.w	r0, #2
    3aa0:	f7ff fcb4 	bl	340c <CLKPWR_GetPCLK>
    3aa4:	4607      	mov	r7, r0
	uint64_t clkdlycnt;

	// Get Pclock of timer
	clkdlycnt = (uint64_t) getPClock(timernum);

	clkdlycnt = (clkdlycnt * usec) / 1000000;
    3aa6:	fba5 0107 	umull	r0, r1, r5, r7
    3aaa:	f244 2240 	movw	r2, #16960	; 0x4240
    3aae:	f2c0 020f 	movt	r2, #15
    3ab2:	f04f 0300 	mov.w	r3, #0
    3ab6:	f00f fa2f 	bl	12f18 <__aeabi_uldivmod>
		{
			TIMx->PR   = pTimeCfg->PrescaleValue -1  ;
		}
		else
		{
			TIMx->PR   = converUSecToVal (converPtrToTimeNum(TIMx),pTimeCfg->PrescaleValue)-1;
    3aba:	f100 30ff 	add.w	r0, r0, #4294967295
    3abe:	60e0      	str	r0, [r4, #12]
    3ac0:	e00a      	b.n	3ad8 <TIM_Init+0x1a0>
	}
	else
	{

		pCounterCfg = (TIM_COUNTERCFG_Type *)TIM_ConfigStruct;
		TIMx->CCR  &= ~TIM_CTCR_INPUT_MASK;
    3ac2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3ac4:	f023 030c 	bic.w	r3, r3, #12
    3ac8:	62a3      	str	r3, [r4, #40]	; 0x28
		if (pCounterCfg->CountInputSelect == TIM_COUNTER_INCAP1)
    3aca:	7873      	ldrb	r3, [r6, #1]
    3acc:	2b01      	cmp	r3, #1
			TIMx->CCR |= _BIT(2);
    3ace:	bf02      	ittt	eq
    3ad0:	6aa3      	ldreq	r3, [r4, #40]	; 0x28
    3ad2:	f043 0304 	orreq.w	r3, r3, #4
    3ad6:	62a3      	streq	r3, [r4, #40]	; 0x28
	}

	// Clear interrupt pending
	TIMx->IR = 0xFFFFFFFF;
    3ad8:	f04f 33ff 	mov.w	r3, #4294967295
    3adc:	6023      	str	r3, [r4, #0]

}
    3ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		{
			TIMx->PR   = pTimeCfg->PrescaleValue -1  ;
		}
		else
		{
			TIMx->PR   = converUSecToVal (converPtrToTimeNum(TIMx),pTimeCfg->PrescaleValue)-1;
    3ae0:	6875      	ldr	r5, [r6, #4]
	case 0:
		clkdlycnt = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_TIMER0);
		break;

	case 1:
		clkdlycnt = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_TIMER1);
    3ae2:	f04f 0004 	mov.w	r0, #4
    3ae6:	f7ff fc91 	bl	340c <CLKPWR_GetPCLK>
    3aea:	4607      	mov	r7, r0
    3aec:	e7db      	b.n	3aa6 <TIM_Init+0x16e>
		{
			TIMx->PR   = pTimeCfg->PrescaleValue -1  ;
		}
		else
		{
			TIMx->PR   = converUSecToVal (converPtrToTimeNum(TIMx),pTimeCfg->PrescaleValue)-1;
    3aee:	6875      	ldr	r5, [r6, #4]
	case 1:
		clkdlycnt = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_TIMER1);
		break;

	case 2:
		clkdlycnt = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_TIMER2);
    3af0:	f04f 002c 	mov.w	r0, #44	; 0x2c
    3af4:	f7ff fc8a 	bl	340c <CLKPWR_GetPCLK>
    3af8:	4607      	mov	r7, r0
    3afa:	e7d4      	b.n	3aa6 <TIM_Init+0x16e>
		{
			TIMx->PR   = pTimeCfg->PrescaleValue -1  ;
		}
		else
		{
			TIMx->PR   = converUSecToVal (converPtrToTimeNum(TIMx),pTimeCfg->PrescaleValue)-1;
    3afc:	6875      	ldr	r5, [r6, #4]
	case 2:
		clkdlycnt = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_TIMER2);
		break;

	case 3:
		clkdlycnt = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_TIMER3);
    3afe:	f04f 002e 	mov.w	r0, #46	; 0x2e
    3b02:	f7ff fc83 	bl	340c <CLKPWR_GetPCLK>
    3b06:	4607      	mov	r7, r0
    3b08:	e7cd      	b.n	3aa6 <TIM_Init+0x16e>
    3b0a:	bf00      	nop

00003b0c <TIM_Cmd>:
 * 				-	ENABLE  : set timer enable
 * 				-	DISABLE : disable timer
 * @return 		None
 **********************************************************************/
void TIM_Cmd(LPC_TIM_TypeDef *TIMx, FunctionalState NewState)
{
    3b0c:	b538      	push	{r3, r4, r5, lr}
    3b0e:	4604      	mov	r4, r0
    3b10:	460d      	mov	r5, r1
	CHECK_PARAM(PARAM_TIMx(TIMx));
    3b12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    3b16:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3b1a:	1ac3      	subs	r3, r0, r3
    3b1c:	bf18      	it	ne
    3b1e:	2301      	movne	r3, #1
    3b20:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
    3b24:	bf0c      	ite	eq
    3b26:	2300      	moveq	r3, #0
    3b28:	f003 0301 	andne.w	r3, r3, #1
    3b2c:	b1c3      	cbz	r3, 3b60 <TIM_Cmd+0x54>
    3b2e:	f04f 0300 	mov.w	r3, #0
    3b32:	f2c4 0309 	movt	r3, #16393	; 0x4009
    3b36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3b3a:	f2c4 0209 	movt	r2, #16393	; 0x4009
    3b3e:	1a82      	subs	r2, r0, r2
    3b40:	bf18      	it	ne
    3b42:	2201      	movne	r2, #1
    3b44:	4298      	cmp	r0, r3
    3b46:	bf0c      	ite	eq
    3b48:	2300      	moveq	r3, #0
    3b4a:	f002 0301 	andne.w	r3, r2, #1
    3b4e:	b13b      	cbz	r3, 3b60 <TIM_Cmd+0x54>
    3b50:	f645 70f4 	movw	r0, #24564	; 0x5ff4
    3b54:	f2c0 0002 	movt	r0, #2
    3b58:	f44f 71cd 	mov.w	r1, #410	; 0x19a
    3b5c:	f7ff fce0 	bl	3520 <check_failed>
	if (NewState == ENABLE)
    3b60:	2d01      	cmp	r5, #1
	{
		TIMx->TCR	|=  TIM_ENABLE;
    3b62:	6863      	ldr	r3, [r4, #4]
    3b64:	bf0c      	ite	eq
    3b66:	f043 0301 	orreq.w	r3, r3, #1
	}
	else
	{
		TIMx->TCR &= ~TIM_ENABLE;
    3b6a:	f023 0301 	bicne.w	r3, r3, #1
    3b6e:	6063      	str	r3, [r4, #4]
    3b70:	bd38      	pop	{r3, r4, r5, pc}
    3b72:	bf00      	nop

00003b74 <TIM_ConfigMatch>:
 *						 + 	 3: Toggle external output pin if match
 *					MatchValue: Set the value to be compared with TC value
 * @return 		None
 **********************************************************************/
void TIM_ConfigMatch(LPC_TIM_TypeDef *TIMx, TIM_MATCHCFG_Type *TIM_MatchConfigStruct)
{
    3b74:	b538      	push	{r3, r4, r5, lr}
    3b76:	4604      	mov	r4, r0
    3b78:	460d      	mov	r5, r1

	CHECK_PARAM(PARAM_TIMx(TIMx));
    3b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    3b7e:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3b82:	1ac3      	subs	r3, r0, r3
    3b84:	bf18      	it	ne
    3b86:	2301      	movne	r3, #1
    3b88:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
    3b8c:	bf0c      	ite	eq
    3b8e:	2300      	moveq	r3, #0
    3b90:	f003 0301 	andne.w	r3, r3, #1
    3b94:	b1c3      	cbz	r3, 3bc8 <TIM_ConfigMatch+0x54>
    3b96:	f04f 0300 	mov.w	r3, #0
    3b9a:	f2c4 0309 	movt	r3, #16393	; 0x4009
    3b9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3ba2:	f2c4 0209 	movt	r2, #16393	; 0x4009
    3ba6:	1a82      	subs	r2, r0, r2
    3ba8:	bf18      	it	ne
    3baa:	2201      	movne	r2, #1
    3bac:	4298      	cmp	r0, r3
    3bae:	bf0c      	ite	eq
    3bb0:	2300      	moveq	r3, #0
    3bb2:	f002 0301 	andne.w	r3, r2, #1
    3bb6:	b13b      	cbz	r3, 3bc8 <TIM_ConfigMatch+0x54>
    3bb8:	f645 70f4 	movw	r0, #24564	; 0x5ff4
    3bbc:	f2c0 0002 	movt	r0, #2
    3bc0:	f240 11d1 	movw	r1, #465	; 0x1d1
    3bc4:	f7ff fcac 	bl	3520 <check_failed>
	CHECK_PARAM(PARAM_TIM_EXTMATCH_OPT(TIM_MatchConfigStruct->ExtMatchOutputType));
    3bc8:	792b      	ldrb	r3, [r5, #4]
    3bca:	2b03      	cmp	r3, #3
    3bcc:	d907      	bls.n	3bde <TIM_ConfigMatch+0x6a>
    3bce:	f645 70f4 	movw	r0, #24564	; 0x5ff4
    3bd2:	f2c0 0002 	movt	r0, #2
    3bd6:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
    3bda:	f7ff fca1 	bl	3520 <check_failed>

	switch(TIM_MatchConfigStruct->MatchChannel)
    3bde:	782b      	ldrb	r3, [r5, #0]
    3be0:	2b03      	cmp	r3, #3
    3be2:	d80f      	bhi.n	3c04 <TIM_ConfigMatch+0x90>
    3be4:	e8df f003 	tbb	[pc, r3]
    3be8:	0b080502 	.word	0x0b080502
	{
	case 0:
		TIMx->MR0 = TIM_MatchConfigStruct->MatchValue;
    3bec:	68ab      	ldr	r3, [r5, #8]
    3bee:	61a3      	str	r3, [r4, #24]
		break;
    3bf0:	e009      	b.n	3c06 <TIM_ConfigMatch+0x92>
	case 1:
		TIMx->MR1 = TIM_MatchConfigStruct->MatchValue;
    3bf2:	68ab      	ldr	r3, [r5, #8]
    3bf4:	61e3      	str	r3, [r4, #28]
		break;
    3bf6:	e006      	b.n	3c06 <TIM_ConfigMatch+0x92>
	case 2:
		TIMx->MR2 = TIM_MatchConfigStruct->MatchValue;
    3bf8:	68ab      	ldr	r3, [r5, #8]
    3bfa:	6223      	str	r3, [r4, #32]
		break;
    3bfc:	e003      	b.n	3c06 <TIM_ConfigMatch+0x92>
	case 3:
		TIMx->MR3 = TIM_MatchConfigStruct->MatchValue;
    3bfe:	68ab      	ldr	r3, [r5, #8]
    3c00:	6263      	str	r3, [r4, #36]	; 0x24
		break;
    3c02:	e000      	b.n	3c06 <TIM_ConfigMatch+0x92>
    3c04:	e7fe      	b.n	3c04 <TIM_ConfigMatch+0x90>
		//Error match value
		//Error loop
		while(1);
	}
	//interrupt on MRn
	TIMx->MCR &=~TIM_MCR_CHANNEL_MASKBIT(TIM_MatchConfigStruct->MatchChannel);
    3c06:	6962      	ldr	r2, [r4, #20]
    3c08:	782b      	ldrb	r3, [r5, #0]
    3c0a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3c0e:	f04f 0107 	mov.w	r1, #7
    3c12:	fa01 f303 	lsl.w	r3, r1, r3
    3c16:	ea22 0303 	bic.w	r3, r2, r3
    3c1a:	6163      	str	r3, [r4, #20]

	if (TIM_MatchConfigStruct->IntOnMatch)
    3c1c:	786b      	ldrb	r3, [r5, #1]
    3c1e:	b14b      	cbz	r3, 3c34 <TIM_ConfigMatch+0xc0>
		TIMx->MCR |= TIM_INT_ON_MATCH(TIM_MatchConfigStruct->MatchChannel);
    3c20:	6962      	ldr	r2, [r4, #20]
    3c22:	782b      	ldrb	r3, [r5, #0]
    3c24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3c28:	f04f 0101 	mov.w	r1, #1
    3c2c:	fa01 f303 	lsl.w	r3, r1, r3
    3c30:	4313      	orrs	r3, r2
    3c32:	6163      	str	r3, [r4, #20]

	//reset on MRn
	if (TIM_MatchConfigStruct->ResetOnMatch)
    3c34:	78eb      	ldrb	r3, [r5, #3]
    3c36:	b15b      	cbz	r3, 3c50 <TIM_ConfigMatch+0xdc>
		TIMx->MCR |= TIM_RESET_ON_MATCH(TIM_MatchConfigStruct->MatchChannel);
    3c38:	6962      	ldr	r2, [r4, #20]
    3c3a:	782b      	ldrb	r3, [r5, #0]
    3c3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3c40:	f103 0301 	add.w	r3, r3, #1
    3c44:	f04f 0101 	mov.w	r1, #1
    3c48:	fa01 f303 	lsl.w	r3, r1, r3
    3c4c:	4313      	orrs	r3, r2
    3c4e:	6163      	str	r3, [r4, #20]

	//stop on MRn
	if (TIM_MatchConfigStruct->StopOnMatch)
    3c50:	78ab      	ldrb	r3, [r5, #2]
    3c52:	b15b      	cbz	r3, 3c6c <TIM_ConfigMatch+0xf8>
		TIMx->MCR |= TIM_STOP_ON_MATCH(TIM_MatchConfigStruct->MatchChannel);
    3c54:	6962      	ldr	r2, [r4, #20]
    3c56:	782b      	ldrb	r3, [r5, #0]
    3c58:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3c5c:	f103 0302 	add.w	r3, r3, #2
    3c60:	f04f 0101 	mov.w	r1, #1
    3c64:	fa01 f303 	lsl.w	r3, r1, r3
    3c68:	4313      	orrs	r3, r2
    3c6a:	6163      	str	r3, [r4, #20]

	// match output type

	TIMx->EMR 	&= ~TIM_EM_MASK(TIM_MatchConfigStruct->MatchChannel);
    3c6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3c6e:	782a      	ldrb	r2, [r5, #0]
    3c70:	ea4f 0242 	mov.w	r2, r2, lsl #1
    3c74:	f102 0204 	add.w	r2, r2, #4
    3c78:	f04f 0103 	mov.w	r1, #3
    3c7c:	fa01 f202 	lsl.w	r2, r1, r2
    3c80:	ea23 0302 	bic.w	r3, r3, r2
    3c84:	63e3      	str	r3, [r4, #60]	; 0x3c
	TIMx->EMR   |= TIM_EM_SET(TIM_MatchConfigStruct->MatchChannel,TIM_MatchConfigStruct->ExtMatchOutputType);
    3c86:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3c88:	7929      	ldrb	r1, [r5, #4]
    3c8a:	f001 0103 	and.w	r1, r1, #3
    3c8e:	782a      	ldrb	r2, [r5, #0]
    3c90:	ea4f 0242 	mov.w	r2, r2, lsl #1
    3c94:	f102 0204 	add.w	r2, r2, #4
    3c98:	fa01 f202 	lsl.w	r2, r1, r2
    3c9c:	4313      	orrs	r3, r2
    3c9e:	63e3      	str	r3, [r4, #60]	; 0x3c
}
    3ca0:	bd38      	pop	{r3, r4, r5, pc}
    3ca2:	bf00      	nop

00003ca4 <TIM_UpdateMatchValue>:
 * @param[in]	MatchChannel	Match channel, should be: 0..3
 * @param[in]	MatchValue		updated match value
 * @return 		None
 **********************************************************************/
void TIM_UpdateMatchValue(LPC_TIM_TypeDef *TIMx,uint8_t MatchChannel, uint32_t MatchValue)
{
    3ca4:	b570      	push	{r4, r5, r6, lr}
    3ca6:	4604      	mov	r4, r0
    3ca8:	460e      	mov	r6, r1
    3caa:	4615      	mov	r5, r2
	CHECK_PARAM(PARAM_TIMx(TIMx));
    3cac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    3cb0:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3cb4:	1ac3      	subs	r3, r0, r3
    3cb6:	bf18      	it	ne
    3cb8:	2301      	movne	r3, #1
    3cba:	f1b0 2f40 	cmp.w	r0, #1073758208	; 0x40004000
    3cbe:	bf0c      	ite	eq
    3cc0:	2300      	moveq	r3, #0
    3cc2:	f003 0301 	andne.w	r3, r3, #1
    3cc6:	b1c3      	cbz	r3, 3cfa <TIM_UpdateMatchValue+0x56>
    3cc8:	f04f 0300 	mov.w	r3, #0
    3ccc:	f2c4 0309 	movt	r3, #16393	; 0x4009
    3cd0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3cd4:	f2c4 0209 	movt	r2, #16393	; 0x4009
    3cd8:	1a82      	subs	r2, r0, r2
    3cda:	bf18      	it	ne
    3cdc:	2201      	movne	r2, #1
    3cde:	4298      	cmp	r0, r3
    3ce0:	bf0c      	ite	eq
    3ce2:	2300      	moveq	r3, #0
    3ce4:	f002 0301 	andne.w	r3, r2, #1
    3ce8:	b13b      	cbz	r3, 3cfa <TIM_UpdateMatchValue+0x56>
    3cea:	f645 70f4 	movw	r0, #24564	; 0x5ff4
    3cee:	f2c0 0002 	movt	r0, #2
    3cf2:	f240 2107 	movw	r1, #519	; 0x207
    3cf6:	f7ff fc13 	bl	3520 <check_failed>
	switch(MatchChannel)
    3cfa:	2e03      	cmp	r6, #3
    3cfc:	d80b      	bhi.n	3d16 <TIM_UpdateMatchValue+0x72>
    3cfe:	e8df f006 	tbb	[pc, r6]
    3d02:	0402      	.short	0x0402
    3d04:	0806      	.short	0x0806
	{
	case 0:
		TIMx->MR0 = MatchValue;
    3d06:	61a5      	str	r5, [r4, #24]
		break;
    3d08:	bd70      	pop	{r4, r5, r6, pc}
	case 1:
		TIMx->MR1 = MatchValue;
    3d0a:	61e5      	str	r5, [r4, #28]
		break;
    3d0c:	bd70      	pop	{r4, r5, r6, pc}
	case 2:
		TIMx->MR2 = MatchValue;
    3d0e:	6225      	str	r5, [r4, #32]
		break;
    3d10:	bd70      	pop	{r4, r5, r6, pc}
	case 3:
		TIMx->MR3 = MatchValue;
    3d12:	6265      	str	r5, [r4, #36]	; 0x24
		break;
    3d14:	bd70      	pop	{r4, r5, r6, pc}
    3d16:	e7fe      	b.n	3d16 <TIM_UpdateMatchValue+0x72>

00003d18 <UART_Init>:
*                    that contains the configuration information for the
*                    specified UART peripheral.
 * @return 		None
 *********************************************************************/
void UART_Init(LPC_UART_TypeDef *UARTx, UART_CFG_Type *UART_ConfigStruct)
{
    3d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3d1c:	b08d      	sub	sp, #52	; 0x34
    3d1e:	9006      	str	r0, [sp, #24]
    3d20:	910a      	str	r1, [sp, #40]	; 0x28
	uint32_t tmp;

	// For debug mode
	CHECK_PARAM(PARAM_UARTx(UARTx));
    3d22:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3d26:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3d2a:	f04f 0200 	mov.w	r2, #0
    3d2e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    3d32:	1a82      	subs	r2, r0, r2
    3d34:	bf18      	it	ne
    3d36:	2201      	movne	r2, #1
    3d38:	4298      	cmp	r0, r3
    3d3a:	bf0c      	ite	eq
    3d3c:	2300      	moveq	r3, #0
    3d3e:	f002 0301 	andne.w	r3, r2, #1
    3d42:	b1c3      	cbz	r3, 3d76 <UART_Init+0x5e>
    3d44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    3d48:	f2c4 0309 	movt	r3, #16393	; 0x4009
    3d4c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    3d50:	f2c4 0209 	movt	r2, #16393	; 0x4009
    3d54:	1a82      	subs	r2, r0, r2
    3d56:	bf18      	it	ne
    3d58:	2201      	movne	r2, #1
    3d5a:	4298      	cmp	r0, r3
    3d5c:	bf0c      	ite	eq
    3d5e:	2300      	moveq	r3, #0
    3d60:	f002 0301 	andne.w	r3, r2, #1
    3d64:	b13b      	cbz	r3, 3d76 <UART_Init+0x5e>
    3d66:	f246 002c 	movw	r0, #24620	; 0x602c
    3d6a:	f2c0 0002 	movt	r0, #2
    3d6e:	f04f 01ca 	mov.w	r1, #202	; 0xca
    3d72:	f7ff fbd5 	bl	3520 <check_failed>
	CHECK_PARAM(PARAM_UART_DATABIT(UART_ConfigStruct->Databits));
    3d76:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    3d78:	7963      	ldrb	r3, [r4, #5]
    3d7a:	2b03      	cmp	r3, #3
    3d7c:	d907      	bls.n	3d8e <UART_Init+0x76>
    3d7e:	f246 002c 	movw	r0, #24620	; 0x602c
    3d82:	f2c0 0002 	movt	r0, #2
    3d86:	f04f 01cb 	mov.w	r1, #203	; 0xcb
    3d8a:	f7ff fbc9 	bl	3520 <check_failed>
	CHECK_PARAM(PARAM_UART_STOPBIT(UART_ConfigStruct->Stopbits));
    3d8e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    3d90:	79a3      	ldrb	r3, [r4, #6]
    3d92:	2b01      	cmp	r3, #1
    3d94:	d907      	bls.n	3da6 <UART_Init+0x8e>
    3d96:	f246 002c 	movw	r0, #24620	; 0x602c
    3d9a:	f2c0 0002 	movt	r0, #2
    3d9e:	f04f 01cc 	mov.w	r1, #204	; 0xcc
    3da2:	f7ff fbbd 	bl	3520 <check_failed>
	CHECK_PARAM(PARAM_UART_PARITY(UART_ConfigStruct->Parity));
    3da6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    3da8:	7923      	ldrb	r3, [r4, #4]
    3daa:	2b04      	cmp	r3, #4
    3dac:	d907      	bls.n	3dbe <UART_Init+0xa6>
    3dae:	f246 002c 	movw	r0, #24620	; 0x602c
    3db2:	f2c0 0002 	movt	r0, #2
    3db6:	f04f 01cd 	mov.w	r1, #205	; 0xcd
    3dba:	f7ff fbb1 	bl	3520 <check_failed>

#ifdef _UART0
	if(UARTx == LPC_UART0)
    3dbe:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3dc2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3dc6:	9c06      	ldr	r4, [sp, #24]
    3dc8:	429c      	cmp	r4, r3
    3dca:	d106      	bne.n	3dda <UART_Init+0xc2>
	{
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART0, ENABLE);
    3dcc:	f04f 0008 	mov.w	r0, #8
    3dd0:	f04f 0101 	mov.w	r1, #1
    3dd4:	f7ff fb30 	bl	3438 <CLKPWR_ConfigPPWR>
    3dd8:	e01b      	b.n	3e12 <UART_Init+0xfa>
	}
#endif

#ifdef _UART1
	if(((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    3dda:	f04f 0300 	mov.w	r3, #0
    3dde:	f2c4 0301 	movt	r3, #16385	; 0x4001
    3de2:	9c06      	ldr	r4, [sp, #24]
    3de4:	429c      	cmp	r4, r3
    3de6:	d106      	bne.n	3df6 <UART_Init+0xde>
	{
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART1, ENABLE);
    3de8:	f04f 0010 	mov.w	r0, #16
    3dec:	f04f 0101 	mov.w	r1, #1
    3df0:	f7ff fb22 	bl	3438 <CLKPWR_ConfigPPWR>
    3df4:	e01b      	b.n	3e2e <UART_Init+0x116>
	}
#endif

#ifdef _UART2
	if(UARTx == LPC_UART2)
    3df6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    3dfa:	f2c4 0309 	movt	r3, #16393	; 0x4009
    3dfe:	9c06      	ldr	r4, [sp, #24]
    3e00:	429c      	cmp	r4, r3
    3e02:	d106      	bne.n	3e12 <UART_Init+0xfa>
	{
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART2, ENABLE);
    3e04:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    3e08:	f04f 0101 	mov.w	r1, #1
    3e0c:	f7ff fb14 	bl	3438 <CLKPWR_ConfigPPWR>
    3e10:	e046      	b.n	3ea0 <UART_Init+0x188>
	}
#endif

#ifdef _UART3
	if(UARTx == LPC_UART3)
    3e12:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3e16:	f2c4 0309 	movt	r3, #16393	; 0x4009
    3e1a:	9c06      	ldr	r4, [sp, #24]
    3e1c:	429c      	cmp	r4, r3
    3e1e:	d106      	bne.n	3e2e <UART_Init+0x116>
	{
		/* Set up clock and power for UART module */
		CLKPWR_ConfigPPWR (CLKPWR_PCONP_PCUART3, ENABLE);
    3e20:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    3e24:	f04f 0101 	mov.w	r1, #1
    3e28:	f7ff fb06 	bl	3438 <CLKPWR_ConfigPPWR>
    3e2c:	e038      	b.n	3ea0 <UART_Init+0x188>
	}
#endif

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    3e2e:	f04f 0300 	mov.w	r3, #0
    3e32:	f2c4 0301 	movt	r3, #16385	; 0x4001
    3e36:	9c06      	ldr	r4, [sp, #24]
    3e38:	429c      	cmp	r4, r3
    3e3a:	d131      	bne.n	3ea0 <UART_Init+0x188>
	{
		/* FIFOs are empty */
		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = ( UART_FCR_FIFO_EN \
    3e3c:	f04f 0300 	mov.w	r3, #0
    3e40:	f2c4 0301 	movt	r3, #16385	; 0x4001
    3e44:	f04f 0207 	mov.w	r2, #7
    3e48:	721a      	strb	r2, [r3, #8]
				| UART_FCR_RX_RS | UART_FCR_TX_RS);
		// Disable FIFO
		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = 0;
    3e4a:	f04f 0200 	mov.w	r2, #0
    3e4e:	721a      	strb	r2, [r3, #8]

		// Dummy reading
		while (((LPC_UART1_TypeDef *)UARTx)->LSR & UART_LSR_RDR)
    3e50:	7d1b      	ldrb	r3, [r3, #20]
    3e52:	f013 0f01 	tst.w	r3, #1
    3e56:	d007      	beq.n	3e68 <UART_Init+0x150>
		{
			tmp = ((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/RBR;
    3e58:	4613      	mov	r3, r2
    3e5a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    3e5e:	781a      	ldrb	r2, [r3, #0]
				| UART_FCR_RX_RS | UART_FCR_TX_RS);
		// Disable FIFO
		((LPC_UART1_TypeDef *)UARTx)->/*IIFCR.*/FCR = 0;

		// Dummy reading
		while (((LPC_UART1_TypeDef *)UARTx)->LSR & UART_LSR_RDR)
    3e60:	7d1a      	ldrb	r2, [r3, #20]
    3e62:	f012 0f01 	tst.w	r2, #1
    3e66:	d1fa      	bne.n	3e5e <UART_Init+0x146>
		{
			tmp = ((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/RBR;
		}

		((LPC_UART1_TypeDef *)UARTx)->TER = UART_TER_TXEN;
    3e68:	f04f 0380 	mov.w	r3, #128	; 0x80
    3e6c:	9c06      	ldr	r4, [sp, #24]
    3e6e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    3e72:	4622      	mov	r2, r4
		// Wait for current transmit complete
		while (!(((LPC_UART1_TypeDef *)UARTx)->LSR & UART_LSR_THRE));
    3e74:	7d13      	ldrb	r3, [r2, #20]
    3e76:	f013 0f20 	tst.w	r3, #32
    3e7a:	d0fb      	beq.n	3e74 <UART_Init+0x15c>
		// Disable Tx
		((LPC_UART1_TypeDef *)UARTx)->TER = 0;
    3e7c:	f04f 0300 	mov.w	r3, #0
    3e80:	9c06      	ldr	r4, [sp, #24]
    3e82:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

		// Disable interrupt
		((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/IER = 0;
    3e86:	6063      	str	r3, [r4, #4]
		// Set LCR to default state
		((LPC_UART1_TypeDef *)UARTx)->LCR = 0;
    3e88:	7323      	strb	r3, [r4, #12]
		// Set ACR to default state
		((LPC_UART1_TypeDef *)UARTx)->ACR = 0;
    3e8a:	6223      	str	r3, [r4, #32]
		// Set Modem Control to default state
		((LPC_UART1_TypeDef *)UARTx)->MCR = 0;
    3e8c:	7423      	strb	r3, [r4, #16]
		// Set RS485 control to default state
		((LPC_UART1_TypeDef *)UARTx)->RS485CTRL = 0;
    3e8e:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
		// Set RS485 delay timer to default state
		((LPC_UART1_TypeDef *)UARTx)->RS485DLY = 0;
    3e92:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
		// Set RS485 addr match to default state
		((LPC_UART1_TypeDef *)UARTx)->ADRMATCH = 0;
    3e96:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
		//Dummy Reading to Clear Status
		tmp = ((LPC_UART1_TypeDef *)UARTx)->MSR;
    3e9a:	7e23      	ldrb	r3, [r4, #24]
		tmp = ((LPC_UART1_TypeDef *)UARTx)->LSR;
    3e9c:	7d23      	ldrb	r3, [r4, #20]
    3e9e:	e023      	b.n	3ee8 <UART_Init+0x1d0>
	}
	else
	{
		/* FIFOs are empty */
		UARTx->/*IIFCR.*/FCR = ( UART_FCR_FIFO_EN | UART_FCR_RX_RS | UART_FCR_TX_RS);
    3ea0:	f04f 0307 	mov.w	r3, #7
    3ea4:	9c06      	ldr	r4, [sp, #24]
    3ea6:	7223      	strb	r3, [r4, #8]
		// Disable FIFO
		UARTx->/*IIFCR.*/FCR = 0;
    3ea8:	f04f 0300 	mov.w	r3, #0
    3eac:	7223      	strb	r3, [r4, #8]

		// Dummy reading
		while (UARTx->LSR & UART_LSR_RDR)
    3eae:	7d23      	ldrb	r3, [r4, #20]
    3eb0:	f013 0f01 	tst.w	r3, #1
    3eb4:	d005      	beq.n	3ec2 <UART_Init+0x1aa>
    3eb6:	4623      	mov	r3, r4
		{
			tmp = UARTx->/*RBTHDLR.*/RBR;
    3eb8:	781a      	ldrb	r2, [r3, #0]
		UARTx->/*IIFCR.*/FCR = ( UART_FCR_FIFO_EN | UART_FCR_RX_RS | UART_FCR_TX_RS);
		// Disable FIFO
		UARTx->/*IIFCR.*/FCR = 0;

		// Dummy reading
		while (UARTx->LSR & UART_LSR_RDR)
    3eba:	7d1a      	ldrb	r2, [r3, #20]
    3ebc:	f012 0f01 	tst.w	r2, #1
    3ec0:	d1fa      	bne.n	3eb8 <UART_Init+0x1a0>
		{
			tmp = UARTx->/*RBTHDLR.*/RBR;
		}

		UARTx->TER = UART_TER_TXEN;
    3ec2:	f04f 0380 	mov.w	r3, #128	; 0x80
    3ec6:	9c06      	ldr	r4, [sp, #24]
    3ec8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    3ecc:	4622      	mov	r2, r4
		// Wait for current transmit complete
		while (!(UARTx->LSR & UART_LSR_THRE));
    3ece:	7d13      	ldrb	r3, [r2, #20]
    3ed0:	f013 0f20 	tst.w	r3, #32
    3ed4:	d0fb      	beq.n	3ece <UART_Init+0x1b6>
		// Disable Tx
		UARTx->TER = 0;
    3ed6:	f04f 0300 	mov.w	r3, #0
    3eda:	9c06      	ldr	r4, [sp, #24]
    3edc:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30

		// Disable interrupt
		UARTx->/*DLIER.*/IER = 0;
    3ee0:	6063      	str	r3, [r4, #4]
		// Set LCR to default state
		UARTx->LCR = 0;
    3ee2:	7323      	strb	r3, [r4, #12]
		// Set ACR to default state
		UARTx->ACR = 0;
    3ee4:	6223      	str	r3, [r4, #32]
		// Dummy reading
		tmp = UARTx->LSR;
    3ee6:	7d23      	ldrb	r3, [r4, #20]
	}

	if (UARTx == LPC_UART3)
    3ee8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3eec:	f2c4 0309 	movt	r3, #16393	; 0x4009
    3ef0:	9c06      	ldr	r4, [sp, #24]
    3ef2:	429c      	cmp	r4, r3
    3ef4:	d10b      	bne.n	3f0e <UART_Init+0x1f6>
	{
		// Set IrDA to default state
		UARTx->ICR = 0;
    3ef6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3efa:	f2c4 0309 	movt	r3, #16393	; 0x4009
    3efe:	f04f 0200 	mov.w	r2, #0
    3f02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}

	// Set Line Control register ----------------------------

	uart_set_divisors(UARTx, (UART_ConfigStruct->Baud_rate));
    3f06:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    3f08:	f8d4 9000 	ldr.w	r9, [r4]
    3f0c:	e01c      	b.n	3f48 <UART_Init+0x230>
    3f0e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    3f10:	f8d4 9000 	ldr.w	r9, [r4]
	uint64_t best_divisor, divisor;
	uint32_t current_error, best_error;
	uint32_t recalcbaud;

	/* get UART block clock */
	if (UARTx == LPC_UART0)
    3f14:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3f18:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3f1c:	9c06      	ldr	r4, [sp, #24]
    3f1e:	429c      	cmp	r4, r3
    3f20:	d105      	bne.n	3f2e <UART_Init+0x216>
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART0);
    3f22:	f04f 0006 	mov.w	r0, #6
    3f26:	f7ff fa71 	bl	340c <CLKPWR_GetPCLK>
    3f2a:	900b      	str	r0, [sp, #44]	; 0x2c
    3f2c:	e025      	b.n	3f7a <UART_Init+0x262>
	}
	else if (UARTx == (LPC_UART_TypeDef *)LPC_UART1)
    3f2e:	f04f 0300 	mov.w	r3, #0
    3f32:	f2c4 0301 	movt	r3, #16385	; 0x4001
    3f36:	9c06      	ldr	r4, [sp, #24]
    3f38:	429c      	cmp	r4, r3
    3f3a:	d105      	bne.n	3f48 <UART_Init+0x230>
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART1);
    3f3c:	f04f 0008 	mov.w	r0, #8
    3f40:	f7ff fa64 	bl	340c <CLKPWR_GetPCLK>
    3f44:	900b      	str	r0, [sp, #44]	; 0x2c
    3f46:	e018      	b.n	3f7a <UART_Init+0x262>
	}
	else if (UARTx == LPC_UART2)
    3f48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    3f4c:	f2c4 0309 	movt	r3, #16393	; 0x4009
    3f50:	9c06      	ldr	r4, [sp, #24]
    3f52:	429c      	cmp	r4, r3
    3f54:	d105      	bne.n	3f62 <UART_Init+0x24a>
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART2);
    3f56:	f04f 0030 	mov.w	r0, #48	; 0x30
    3f5a:	f7ff fa57 	bl	340c <CLKPWR_GetPCLK>
    3f5e:	900b      	str	r0, [sp, #44]	; 0x2c
    3f60:	e00b      	b.n	3f7a <UART_Init+0x262>
	}
	else if (UARTx == LPC_UART3)
    3f62:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    3f66:	f2c4 0309 	movt	r3, #16393	; 0x4009
    3f6a:	9c06      	ldr	r4, [sp, #24]
    3f6c:	429c      	cmp	r4, r3
    3f6e:	d104      	bne.n	3f7a <UART_Init+0x262>
	{
		uClk = CLKPWR_GetPCLK (CLKPWR_PCLKSEL_UART3);
    3f70:	f04f 0032 	mov.w	r0, #50	; 0x32
    3f74:	f7ff fa4a 	bl	340c <CLKPWR_GetPCLK>
    3f78:	900b      	str	r0, [sp, #44]	; 0x2c
	best_divisor = 0;
	for (m = 1 ; m <= 15 ;m++)
	{
		for (d = 0 ; d < m ; d++)
		{
		  divisor = ((uint64_t)uClk<<28)*m/(baudrate*(m+d));
    3f7a:	f04f 0300 	mov.w	r3, #0
    3f7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3f80:	ea4f 1212 	mov.w	r2, r2, lsr #4
    3f84:	9209      	str	r2, [sp, #36]	; 0x24
    3f86:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    3f88:	ea4f 7404 	mov.w	r4, r4, lsl #28
    3f8c:	9408      	str	r4, [sp, #32]
    3f8e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    3f92:	e9cd 0100 	strd	r0, r1, [sp]
    3f96:	f8cd 901c 	str.w	r9, [sp, #28]
	* 0 < mulFracDiv <= 15, 0 <= dividerAddFracDiv <= 15 */
	best_error = 0xFFFFFFFF; /* Worst case */
	bestd = 0;
	bestm = 0;
	best_divisor = 0;
	for (m = 1 ; m <= 15 ;m++)
    3f9a:	f04f 0601 	mov.w	r6, #1
	* BaudRate= uClk * (mulFracDiv/(mulFracDiv+dividerAddFracDiv) / (16 * (DLL)
	* It involves floating point calculations. That's the reason the formulae are adjusted with
	* Multiply and divide method.*/
	/* The value of mulFracDiv and dividerAddFracDiv should comply to the following expressions:
	* 0 < mulFracDiv <= 15, 0 <= dividerAddFracDiv <= 15 */
	best_error = 0xFFFFFFFF; /* Worst case */
    3f9e:	f04f 3aff 	mov.w	sl, #4294967295
	bestd = 0;
	bestm = 0;
	best_divisor = 0;
    3fa2:	f04f 0000 	mov.w	r0, #0
    3fa6:	f04f 0100 	mov.w	r1, #0
    3faa:	e9cd 0102 	strd	r0, r1, [sp, #8]
	* Multiply and divide method.*/
	/* The value of mulFracDiv and dividerAddFracDiv should comply to the following expressions:
	* 0 < mulFracDiv <= 15, 0 <= dividerAddFracDiv <= 15 */
	best_error = 0xFFFFFFFF; /* Worst case */
	bestd = 0;
	bestm = 0;
    3fae:	9305      	str	r3, [sp, #20]
	* It involves floating point calculations. That's the reason the formulae are adjusted with
	* Multiply and divide method.*/
	/* The value of mulFracDiv and dividerAddFracDiv should comply to the following expressions:
	* 0 < mulFracDiv <= 15, 0 <= dividerAddFracDiv <= 15 */
	best_error = 0xFFFFFFFF; /* Worst case */
	bestd = 0;
    3fb0:	9304      	str	r3, [sp, #16]
		  if(current_error > ((uint32_t)1<<31)){
			current_error = -current_error;
			tmp++;
			}

		  if(tmp<1 || tmp>65536) /* Out of range */
    3fb2:	f64f 77ff 	movw	r7, #65535	; 0xffff
	best_divisor = 0;
	for (m = 1 ; m <= 15 ;m++)
	{
		for (d = 0 ; d < m ; d++)
		{
		  divisor = ((uint64_t)uClk<<28)*m/(baudrate*(m+d));
    3fb6:	4698      	mov	r8, r3
    3fb8:	e037      	b.n	402a <UART_Init+0x312>
	bestd = 0;
	bestm = 0;
	best_divisor = 0;
	for (m = 1 ; m <= 15 ;m++)
	{
		for (d = 0 ; d < m ; d++)
    3fba:	9c07      	ldr	r4, [sp, #28]
    3fbc:	f04f 0500 	mov.w	r5, #0
		  if( current_error < best_error){
			best_error = current_error;
			best_divisor = tmp;
			bestd = d;
			bestm = m;
			if(best_error == 0) break;
    3fc0:	46b3      	mov	fp, r6
	best_divisor = 0;
	for (m = 1 ; m <= 15 ;m++)
	{
		for (d = 0 ; d < m ; d++)
		{
		  divisor = ((uint64_t)uClk<<28)*m/(baudrate*(m+d));
    3fc2:	e9dd 0100 	ldrd	r0, r1, [sp]
    3fc6:	4622      	mov	r2, r4
    3fc8:	4643      	mov	r3, r8
    3fca:	f00e ffa5 	bl	12f18 <__aeabi_uldivmod>
		  current_error = divisor & 0xFFFFFFFF;
    3fce:	4602      	mov	r2, r0

		  tmp = divisor>>32;
    3fd0:	460b      	mov	r3, r1

		  /* Adjust error */
		  if(current_error > ((uint32_t)1<<31)){
    3fd2:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
			current_error = -current_error;
    3fd6:	bf84      	itt	hi
    3fd8:	4242      	neghi	r2, r0
			tmp++;
    3fda:	1c4b      	addhi	r3, r1, #1
			}

		  if(tmp<1 || tmp>65536) /* Out of range */
    3fdc:	f103 31ff 	add.w	r1, r3, #4294967295
    3fe0:	42b9      	cmp	r1, r7
    3fe2:	d80a      	bhi.n	3ffa <UART_Init+0x2e2>
		  continue;

		  if( current_error < best_error){
    3fe4:	4552      	cmp	r2, sl
    3fe6:	d208      	bcs.n	3ffa <UART_Init+0x2e2>
			best_error = current_error;
			best_divisor = tmp;
    3fe8:	9302      	str	r3, [sp, #8]
    3fea:	f04f 0100 	mov.w	r1, #0
    3fee:	9103      	str	r1, [sp, #12]
			bestd = d;
			bestm = m;
			if(best_error == 0) break;
    3ff0:	b31a      	cbz	r2, 403a <UART_Init+0x322>

		  if(tmp<1 || tmp>65536) /* Out of range */
		  continue;

		  if( current_error < best_error){
			best_error = current_error;
    3ff2:	4692      	mov	sl, r2
			best_divisor = tmp;
			bestd = d;
			bestm = m;
			if(best_error == 0) break;
    3ff4:	f8cd b014 	str.w	fp, [sp, #20]
    3ff8:	9504      	str	r5, [sp, #16]
	bestd = 0;
	bestm = 0;
	best_divisor = 0;
	for (m = 1 ; m <= 15 ;m++)
	{
		for (d = 0 ; d < m ; d++)
    3ffa:	f105 0501 	add.w	r5, r5, #1
    3ffe:	444c      	add	r4, r9
    4000:	42b5      	cmp	r5, r6
    4002:	d1de      	bne.n	3fc2 <UART_Init+0x2aa>
			bestm = m;
			if(best_error == 0) break;
			}
		} /* end of inner for loop */

		if (best_error == 0)
    4004:	f1ba 0f00 	cmp.w	sl, #0
    4008:	d012      	beq.n	4030 <UART_Init+0x318>
	* 0 < mulFracDiv <= 15, 0 <= dividerAddFracDiv <= 15 */
	best_error = 0xFFFFFFFF; /* Worst case */
	bestd = 0;
	bestm = 0;
	best_divisor = 0;
	for (m = 1 ; m <= 15 ;m++)
    400a:	f106 0601 	add.w	r6, r6, #1
    400e:	9c07      	ldr	r4, [sp, #28]
    4010:	444c      	add	r4, r9
    4012:	9407      	str	r4, [sp, #28]
    4014:	e9dd 0100 	ldrd	r0, r1, [sp]
    4018:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    401c:	1880      	adds	r0, r0, r2
    401e:	eb41 0103 	adc.w	r1, r1, r3
    4022:	e9cd 0100 	strd	r0, r1, [sp]
    4026:	2e10      	cmp	r6, #16
    4028:	d005      	beq.n	4036 <UART_Init+0x31e>
	{
		for (d = 0 ; d < m ; d++)
    402a:	2e00      	cmp	r6, #0
    402c:	d1c5      	bne.n	3fba <UART_Init+0x2a2>
    402e:	e7e9      	b.n	4004 <UART_Init+0x2ec>
			bestm = m;
			if(best_error == 0) break;
			}
		} /* end of inner for loop */

		if (best_error == 0)
    4030:	9e05      	ldr	r6, [sp, #20]
    4032:	9d04      	ldr	r5, [sp, #16]
    4034:	e001      	b.n	403a <UART_Init+0x322>
	* 0 < mulFracDiv <= 15, 0 <= dividerAddFracDiv <= 15 */
	best_error = 0xFFFFFFFF; /* Worst case */
	bestd = 0;
	bestm = 0;
	best_divisor = 0;
	for (m = 1 ; m <= 15 ;m++)
    4036:	9e05      	ldr	r6, [sp, #20]
    4038:	9d04      	ldr	r5, [sp, #16]

		if (best_error == 0)
		  break;
	} /* end of outer for loop  */

	if(best_divisor == 0) return ERROR; /* can not find best match */
    403a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    403e:	4301      	orrs	r1, r0
    4040:	d05a      	beq.n	40f8 <UART_Init+0x3e0>

	recalcbaud = (uClk>>4) * bestm/(best_divisor * (bestm + bestd));
    4042:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    4044:	ea4f 1014 	mov.w	r0, r4, lsr #4
    4048:	19a9      	adds	r1, r5, r6
    404a:	9c02      	ldr	r4, [sp, #8]
    404c:	fba1 2304 	umull	r2, r3, r1, r4
    4050:	9c03      	ldr	r4, [sp, #12]
    4052:	fb01 3304 	mla	r3, r1, r4, r3
    4056:	fb00 f006 	mul.w	r0, r0, r6
    405a:	f04f 0100 	mov.w	r1, #0
    405e:	f00e ff5b 	bl	12f18 <__aeabi_uldivmod>

	/* reuse best_error to evaluate baud error*/
	if(baudrate>recalcbaud) best_error = baudrate - recalcbaud;
    4062:	4548      	cmp	r0, r9
    4064:	bf34      	ite	cc
    4066:	ebc0 0009 	rsbcc	r0, r0, r9
	else best_error = recalcbaud -baudrate;
    406a:	ebc9 0000 	rsbcs	r0, r9, r0

	best_error = best_error * 100 / baudrate;
    406e:	f04f 0364 	mov.w	r3, #100	; 0x64
    4072:	fb03 f300 	mul.w	r3, r3, r0
    4076:	fbb3 f9f9 	udiv	r9, r3, r9

	if (best_error < UART_ACCEPTED_BAUDRATE_ERROR)
    407a:	f1b9 0f02 	cmp.w	r9, #2
    407e:	d83b      	bhi.n	40f8 <UART_Init+0x3e0>
		{
			if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    4080:	f04f 0300 	mov.w	r3, #0
    4084:	f2c4 0301 	movt	r3, #16385	; 0x4001
    4088:	9c06      	ldr	r4, [sp, #24]
    408a:	429c      	cmp	r4, r3
    408c:	d11b      	bne.n	40c6 <UART_Init+0x3ae>
			{
				((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
    408e:	f04f 0300 	mov.w	r3, #0
    4092:	f2c4 0301 	movt	r3, #16385	; 0x4001
    4096:	7b1a      	ldrb	r2, [r3, #12]
    4098:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    409c:	731a      	strb	r2, [r3, #12]
				((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
    409e:	9802      	ldr	r0, [sp, #8]
    40a0:	f3c0 2207 	ubfx	r2, r0, #8, #8
    40a4:	711a      	strb	r2, [r3, #4]
				((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
    40a6:	f89d 1008 	ldrb.w	r1, [sp, #8]
    40aa:	b2ca      	uxtb	r2, r1
    40ac:	701a      	strb	r2, [r3, #0]
				/* Then reset DLAB bit */
				((LPC_UART1_TypeDef *)UARTx)->LCR &= (~UART_LCR_DLAB_EN) & UART_LCR_BITMASK;
    40ae:	7b1a      	ldrb	r2, [r3, #12]
    40b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    40b4:	731a      	strb	r2, [r3, #12]
				((LPC_UART1_TypeDef *)UARTx)->FDR = (UART_FDR_MULVAL(bestm) \
    40b6:	ea4f 1206 	mov.w	r2, r6, lsl #4
    40ba:	b2d2      	uxtb	r2, r2
						| UART_FDR_DIVADDVAL(bestd)) & UART_FDR_BITMASK;
    40bc:	f005 050f 	and.w	r5, r5, #15
    40c0:	432a      	orrs	r2, r5
				((LPC_UART1_TypeDef *)UARTx)->LCR |= UART_LCR_DLAB_EN;
				((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
				((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
				/* Then reset DLAB bit */
				((LPC_UART1_TypeDef *)UARTx)->LCR &= (~UART_LCR_DLAB_EN) & UART_LCR_BITMASK;
				((LPC_UART1_TypeDef *)UARTx)->FDR = (UART_FDR_MULVAL(bestm) \
    40c2:	629a      	str	r2, [r3, #40]	; 0x28
    40c4:	e01f      	b.n	4106 <UART_Init+0x3ee>
						| UART_FDR_DIVADDVAL(bestd)) & UART_FDR_BITMASK;
			}
			else
			{
				UARTx->LCR |= UART_LCR_DLAB_EN;
    40c6:	9c06      	ldr	r4, [sp, #24]
    40c8:	7b23      	ldrb	r3, [r4, #12]
    40ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    40ce:	7323      	strb	r3, [r4, #12]
				UARTx->/*DLIER.*/DLM = UART_LOAD_DLM(best_divisor);
    40d0:	9802      	ldr	r0, [sp, #8]
    40d2:	f3c0 2307 	ubfx	r3, r0, #8, #8
    40d6:	7123      	strb	r3, [r4, #4]
				UARTx->/*RBTHDLR.*/DLL = UART_LOAD_DLL(best_divisor);
    40d8:	f89d 1008 	ldrb.w	r1, [sp, #8]
    40dc:	b2cb      	uxtb	r3, r1
    40de:	7023      	strb	r3, [r4, #0]
				/* Then reset DLAB bit */
				UARTx->LCR &= (~UART_LCR_DLAB_EN) & UART_LCR_BITMASK;
    40e0:	7b23      	ldrb	r3, [r4, #12]
    40e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    40e6:	7323      	strb	r3, [r4, #12]
				UARTx->FDR = (UART_FDR_MULVAL(bestm) \
    40e8:	f005 030f 	and.w	r3, r5, #15
    40ec:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
    40f0:	b2db      	uxtb	r3, r3
    40f2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    40f6:	e00e      	b.n	4116 <UART_Init+0x3fe>

	// Set Line Control register ----------------------------

	uart_set_divisors(UARTx, (UART_ConfigStruct->Baud_rate));

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    40f8:	f04f 0300 	mov.w	r3, #0
    40fc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    4100:	9c06      	ldr	r4, [sp, #24]
    4102:	429c      	cmp	r4, r3
    4104:	d107      	bne.n	4116 <UART_Init+0x3fe>
	{
		tmp = (((LPC_UART1_TypeDef *)UARTx)->LCR & (UART_LCR_DLAB_EN | UART_LCR_BREAK_EN)) \
    4106:	f04f 0300 	mov.w	r3, #0
    410a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    410e:	7b1b      	ldrb	r3, [r3, #12]
    4110:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    4114:	e003      	b.n	411e <UART_Init+0x406>
				& UART_LCR_BITMASK;
	}
	else
	{
		tmp = (UARTx->LCR & (UART_LCR_DLAB_EN | UART_LCR_BREAK_EN)) & UART_LCR_BITMASK;
    4116:	9c06      	ldr	r4, [sp, #24]
    4118:	7b23      	ldrb	r3, [r4, #12]
    411a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	}

	switch (UART_ConfigStruct->Databits){
    411e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    4120:	7962      	ldrb	r2, [r4, #5]
    4122:	2a01      	cmp	r2, #1
	case UART_DATABIT_5:
		tmp |= UART_LCR_WLEN5;
		break;
	case UART_DATABIT_6:
		tmp |= UART_LCR_WLEN6;
    4124:	bf08      	it	eq
    4126:	f043 0301 	orreq.w	r3, r3, #1
	else
	{
		tmp = (UARTx->LCR & (UART_LCR_DLAB_EN | UART_LCR_BREAK_EN)) & UART_LCR_BITMASK;
	}

	switch (UART_ConfigStruct->Databits){
    412a:	d007      	beq.n	413c <UART_Init+0x424>
    412c:	b132      	cbz	r2, 413c <UART_Init+0x424>
    412e:	2a02      	cmp	r2, #2
	case UART_DATABIT_7:
		tmp |= UART_LCR_WLEN7;
		break;
	case UART_DATABIT_8:
	default:
		tmp |= UART_LCR_WLEN8;
    4130:	bf18      	it	ne
    4132:	f043 0303 	orrne.w	r3, r3, #3
	else
	{
		tmp = (UARTx->LCR & (UART_LCR_DLAB_EN | UART_LCR_BREAK_EN)) & UART_LCR_BITMASK;
	}

	switch (UART_ConfigStruct->Databits){
    4136:	d101      	bne.n	413c <UART_Init+0x424>
		break;
	case UART_DATABIT_6:
		tmp |= UART_LCR_WLEN6;
		break;
	case UART_DATABIT_7:
		tmp |= UART_LCR_WLEN7;
    4138:	f043 0302 	orr.w	r3, r3, #2
	default:
		tmp |= UART_LCR_WLEN8;
		break;
	}

	if (UART_ConfigStruct->Parity == UART_PARITY_NONE)
    413c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    413e:	7922      	ldrb	r2, [r4, #4]
    4140:	b17a      	cbz	r2, 4162 <UART_Init+0x44a>
	{
		// Do nothing...
	}
	else
	{
		tmp |= UART_LCR_PARITY_EN;
    4142:	f043 0308 	orr.w	r3, r3, #8
		switch (UART_ConfigStruct->Parity)
    4146:	2a03      	cmp	r2, #3
		case UART_PARITY_EVEN:
			tmp |= UART_LCR_PARITY_EVEN;
			break;

		case UART_PARITY_SP_1:
			tmp |= UART_LCR_PARITY_F_1;
    4148:	bf08      	it	eq
    414a:	f043 0320 	orreq.w	r3, r3, #32
		// Do nothing...
	}
	else
	{
		tmp |= UART_LCR_PARITY_EN;
		switch (UART_ConfigStruct->Parity)
    414e:	d008      	beq.n	4162 <UART_Init+0x44a>
    4150:	2a04      	cmp	r2, #4
		case UART_PARITY_SP_1:
			tmp |= UART_LCR_PARITY_F_1;
			break;

		case UART_PARITY_SP_0:
			tmp |= UART_LCR_PARITY_F_0;
    4152:	bf08      	it	eq
    4154:	f043 0330 	orreq.w	r3, r3, #48	; 0x30
		// Do nothing...
	}
	else
	{
		tmp |= UART_LCR_PARITY_EN;
		switch (UART_ConfigStruct->Parity)
    4158:	d003      	beq.n	4162 <UART_Init+0x44a>
    415a:	2a02      	cmp	r2, #2
		case UART_PARITY_ODD:
			tmp |= UART_LCR_PARITY_ODD;
			break;

		case UART_PARITY_EVEN:
			tmp |= UART_LCR_PARITY_EVEN;
    415c:	bf08      	it	eq
    415e:	f043 0310 	orreq.w	r3, r3, #16
		default:
			break;
		}
	}

	switch (UART_ConfigStruct->Stopbits){
    4162:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    4164:	79a2      	ldrb	r2, [r4, #6]
    4166:	2a01      	cmp	r2, #1
	case UART_STOPBIT_2:
		tmp |= UART_LCR_STOPBIT_SEL;
    4168:	bf08      	it	eq
    416a:	f043 0304 	orreq.w	r3, r3, #4
		break;
	}


	// Write back to LCR, configure FIFO and Disable Tx
	if (((LPC_UART1_TypeDef *)UARTx) ==  LPC_UART1)
    416e:	f04f 0200 	mov.w	r2, #0
    4172:	f2c4 0201 	movt	r2, #16385	; 0x4001
    4176:	9c06      	ldr	r4, [sp, #24]
    4178:	4294      	cmp	r4, r2
	{
		((LPC_UART1_TypeDef *)UARTx)->LCR = (uint8_t)(tmp & UART_LCR_BITMASK);
    417a:	b2db      	uxtb	r3, r3
    417c:	bf03      	ittte	eq
    417e:	2200      	moveq	r2, #0
    4180:	f2c4 0201 	movteq	r2, #16385	; 0x4001
    4184:	7313      	strbeq	r3, [r2, #12]
	}
	else
	{
		UARTx->LCR = (uint8_t)(tmp & UART_LCR_BITMASK);
    4186:	9c06      	ldrne	r4, [sp, #24]
    4188:	bf18      	it	ne
    418a:	7323      	strbne	r3, [r4, #12]
	}
}
    418c:	b00d      	add	sp, #52	; 0x34
    418e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4192:	bf00      	nop

00004194 <UART_ConfigStructInit>:
*                    which will be initialized.
* @return		None
*******************************************************************************/
void UART_ConfigStructInit(UART_CFG_Type *UART_InitStruct)
{
	UART_InitStruct->Baud_rate = 9600;
    4194:	f44f 5316 	mov.w	r3, #9600	; 0x2580
    4198:	6003      	str	r3, [r0, #0]
	UART_InitStruct->Databits = UART_DATABIT_8;
    419a:	f04f 0303 	mov.w	r3, #3
    419e:	7143      	strb	r3, [r0, #5]
	UART_InitStruct->Parity = UART_PARITY_NONE;
    41a0:	f04f 0300 	mov.w	r3, #0
    41a4:	7103      	strb	r3, [r0, #4]
	UART_InitStruct->Stopbits = UART_STOPBIT_1;
    41a6:	7183      	strb	r3, [r0, #6]
}
    41a8:	4770      	bx	lr
    41aa:	bf00      	nop

000041ac <UART_SendByte>:
 * 				- LPC_UART3: UART3 peripheral
 * @param[in]	Data	Data to transmit (must be 8-bit long)
 * @return 		None
 **********************************************************************/
void UART_SendByte(LPC_UART_TypeDef* UARTx, uint8_t Data)
{
    41ac:	b538      	push	{r3, r4, r5, lr}
    41ae:	4604      	mov	r4, r0
    41b0:	460d      	mov	r5, r1
	CHECK_PARAM(PARAM_UARTx(UARTx));
    41b2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    41b6:	f2c4 0300 	movt	r3, #16384	; 0x4000
    41ba:	f04f 0200 	mov.w	r2, #0
    41be:	f2c4 0201 	movt	r2, #16385	; 0x4001
    41c2:	1a82      	subs	r2, r0, r2
    41c4:	bf18      	it	ne
    41c6:	2201      	movne	r2, #1
    41c8:	4298      	cmp	r0, r3
    41ca:	bf0c      	ite	eq
    41cc:	2300      	moveq	r3, #0
    41ce:	f002 0301 	andne.w	r3, r2, #1
    41d2:	b1c3      	cbz	r3, 4206 <UART_SendByte+0x5a>
    41d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    41d8:	f2c4 0309 	movt	r3, #16393	; 0x4009
    41dc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    41e0:	f2c4 0209 	movt	r2, #16393	; 0x4009
    41e4:	1a82      	subs	r2, r0, r2
    41e6:	bf18      	it	ne
    41e8:	2201      	movne	r2, #1
    41ea:	4298      	cmp	r0, r3
    41ec:	bf0c      	ite	eq
    41ee:	2300      	moveq	r3, #0
    41f0:	f002 0301 	andne.w	r3, r2, #1
    41f4:	b13b      	cbz	r3, 4206 <UART_SendByte+0x5a>
    41f6:	f246 002c 	movw	r0, #24620	; 0x602c
    41fa:	f2c0 0002 	movt	r0, #2
    41fe:	f44f 71ed 	mov.w	r1, #474	; 0x1da
    4202:	f7ff f98d 	bl	3520 <check_failed>

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    4206:	f04f 0300 	mov.w	r3, #0
    420a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    420e:	429c      	cmp	r4, r3
	{
		((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/THR = Data & UART_THR_MASKBIT;
    4210:	bf03      	ittte	eq
    4212:	2300      	moveq	r3, #0
    4214:	f2c4 0301 	movteq	r3, #16385	; 0x4001
    4218:	701d      	strbeq	r5, [r3, #0]
	}
	else
	{
		UARTx->/*RBTHDLR.*/THR = Data & UART_THR_MASKBIT;
    421a:	7025      	strbne	r5, [r4, #0]
    421c:	bd38      	pop	{r3, r4, r5, pc}
    421e:	bf00      	nop

00004220 <UART_ReceiveByte>:
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return 		Data received
 **********************************************************************/
uint8_t UART_ReceiveByte(LPC_UART_TypeDef* UARTx)
{
    4220:	b510      	push	{r4, lr}
    4222:	4604      	mov	r4, r0
	CHECK_PARAM(PARAM_UARTx(UARTx));
    4224:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    4228:	f2c4 0300 	movt	r3, #16384	; 0x4000
    422c:	f04f 0200 	mov.w	r2, #0
    4230:	f2c4 0201 	movt	r2, #16385	; 0x4001
    4234:	1a82      	subs	r2, r0, r2
    4236:	bf18      	it	ne
    4238:	2201      	movne	r2, #1
    423a:	4298      	cmp	r0, r3
    423c:	bf0c      	ite	eq
    423e:	2300      	moveq	r3, #0
    4240:	f002 0301 	andne.w	r3, r2, #1
    4244:	b1c3      	cbz	r3, 4278 <UART_ReceiveByte+0x58>
    4246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    424a:	f2c4 0309 	movt	r3, #16393	; 0x4009
    424e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    4252:	f2c4 0209 	movt	r2, #16393	; 0x4009
    4256:	1a82      	subs	r2, r0, r2
    4258:	bf18      	it	ne
    425a:	2201      	movne	r2, #1
    425c:	4298      	cmp	r0, r3
    425e:	bf0c      	ite	eq
    4260:	2300      	moveq	r3, #0
    4262:	f002 0301 	andne.w	r3, r2, #1
    4266:	b13b      	cbz	r3, 4278 <UART_ReceiveByte+0x58>
    4268:	f246 002c 	movw	r0, #24620	; 0x602c
    426c:	f2c0 0002 	movt	r0, #2
    4270:	f240 11f3 	movw	r1, #499	; 0x1f3
    4274:	f7ff f954 	bl	3520 <check_failed>

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    4278:	f04f 0300 	mov.w	r3, #0
    427c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    4280:	429c      	cmp	r4, r3
	{
		return (((LPC_UART1_TypeDef *)UARTx)->/*RBTHDLR.*/RBR & UART_RBR_MASKBIT);
    4282:	bf03      	ittte	eq
    4284:	2300      	moveq	r3, #0
    4286:	f2c4 0301 	movteq	r3, #16385	; 0x4001
    428a:	7818      	ldrbeq	r0, [r3, #0]
	}
	else
	{
		return (UARTx->/*RBTHDLR.*/RBR & UART_RBR_MASKBIT);
    428c:	7820      	ldrbne	r0, [r4, #0]
	}
}
    428e:	bd10      	pop	{r4, pc}

00004290 <UART_Send>:
 * Note: when using UART in BLOCKING mode, a time-out condition is used
 * via defined symbol UART_BLOCKING_TIMEOUT.
 **********************************************************************/
uint32_t UART_Send(LPC_UART_TypeDef *UARTx, uint8_t *txbuf,
		uint32_t buflen, TRANSFER_BLOCK_Type flag)
{
    4290:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4294:	4604      	mov	r4, r0
    4296:	4689      	mov	r9, r1
	uint8_t *pChar = txbuf;

	bToSend = buflen;

	// blocking mode
	if (flag == BLOCKING) {
    4298:	2b01      	cmp	r3, #1
    429a:	d159      	bne.n	4350 <UART_Send+0xc0>
    429c:	e023      	b.n	42e6 <UART_Send+0x56>
		bSent = 0;
		while (bToSend){
			timeOut = UART_BLOCKING_TIMEOUT;
			// Wait for THR empty with timeout
			while (!(UARTx->LSR & UART_LSR_THRE)) {
				if (timeOut == 0) break;
    429e:	2b00      	cmp	r3, #0
    42a0:	d05f      	beq.n	4362 <UART_Send+0xd2>
				timeOut--;
    42a2:	f103 33ff 	add.w	r3, r3, #4294967295
	if (flag == BLOCKING) {
		bSent = 0;
		while (bToSend){
			timeOut = UART_BLOCKING_TIMEOUT;
			// Wait for THR empty with timeout
			while (!(UARTx->LSR & UART_LSR_THRE)) {
    42a6:	7d22      	ldrb	r2, [r4, #20]
    42a8:	f012 0f20 	tst.w	r2, #32
    42ac:	d0f7      	beq.n	429e <UART_Send+0xe>
				if (timeOut == 0) break;
				timeOut--;
			}
			// Time out!
			if(timeOut == 0) break;
    42ae:	2b00      	cmp	r3, #0
    42b0:	d057      	beq.n	4362 <UART_Send+0xd2>
			fifo_cnt = UART_TX_FIFO_SIZE;
			while (fifo_cnt && bToSend){
    42b2:	2d00      	cmp	r5, #0
    42b4:	d055      	beq.n	4362 <UART_Send+0xd2>
    42b6:	46d0      	mov	r8, sl
    42b8:	46d9      	mov	r9, fp
				UART_SendByte(UARTx, (*pChar++));
    42ba:	f818 1b01 	ldrb.w	r1, [r8], #1
    42be:	46c2      	mov	sl, r8
    42c0:	4620      	mov	r0, r4
    42c2:	f7ff ff73 	bl	41ac <UART_SendByte>
				fifo_cnt--;
				bToSend--;
				bSent++;
    42c6:	f107 0701 	add.w	r7, r7, #1
				timeOut--;
			}
			// Time out!
			if(timeOut == 0) break;
			fifo_cnt = UART_TX_FIFO_SIZE;
			while (fifo_cnt && bToSend){
    42ca:	f1b9 0901 	subs.w	r9, r9, #1
    42ce:	bf0c      	ite	eq
    42d0:	2300      	moveq	r3, #0
    42d2:	2301      	movne	r3, #1
    42d4:	3d01      	subs	r5, #1
    42d6:	bf0c      	ite	eq
    42d8:	2300      	moveq	r3, #0
    42da:	f003 0301 	andne.w	r3, r3, #1
    42de:	2b00      	cmp	r3, #0
    42e0:	d1eb      	bne.n	42ba <UART_Send+0x2a>
	bToSend = buflen;

	// blocking mode
	if (flag == BLOCKING) {
		bSent = 0;
		while (bToSend){
    42e2:	b965      	cbnz	r5, 42fe <UART_Send+0x6e>
    42e4:	e03d      	b.n	4362 <UART_Send+0xd2>
    42e6:	f04f 0700 	mov.w	r7, #0
    42ea:	2a00      	cmp	r2, #0
    42ec:	d039      	beq.n	4362 <UART_Send+0xd2>
    42ee:	468a      	mov	sl, r1
    42f0:	4615      	mov	r5, r2
    42f2:	f04f 0700 	mov.w	r7, #0
			timeOut = UART_BLOCKING_TIMEOUT;
			// Wait for THR empty with timeout
			while (!(UARTx->LSR & UART_LSR_THRE)) {
    42f6:	f04f 36ff 	mov.w	r6, #4294967295
				timeOut--;
			}
			// Time out!
			if(timeOut == 0) break;
			fifo_cnt = UART_TX_FIFO_SIZE;
			while (fifo_cnt && bToSend){
    42fa:	f04f 0b10 	mov.w	fp, #16
	if (flag == BLOCKING) {
		bSent = 0;
		while (bToSend){
			timeOut = UART_BLOCKING_TIMEOUT;
			// Wait for THR empty with timeout
			while (!(UARTx->LSR & UART_LSR_THRE)) {
    42fe:	7d23      	ldrb	r3, [r4, #20]
    4300:	f013 0f20 	tst.w	r3, #32
    4304:	bf08      	it	eq
    4306:	4633      	moveq	r3, r6
    4308:	d0cb      	beq.n	42a2 <UART_Send+0x12>
    430a:	e7d2      	b.n	42b2 <UART_Send+0x22>
	}
	// None blocking mode
	else {
		bSent = 0;
		while (bToSend) {
			if (!(UARTx->LSR & UART_LSR_THRE)){
    430c:	7d23      	ldrb	r3, [r4, #20]
    430e:	f013 0f20 	tst.w	r3, #32
    4312:	d026      	beq.n	4362 <UART_Send+0xd2>
    4314:	4635      	mov	r5, r6
    4316:	e005      	b.n	4324 <UART_Send+0x94>
    4318:	4690      	mov	r8, r2
    431a:	f04f 0510 	mov.w	r5, #16
    431e:	f04f 0700 	mov.w	r7, #0
    4322:	462e      	mov	r6, r5
				break;
			}
			fifo_cnt = UART_TX_FIFO_SIZE;
			while (fifo_cnt && bToSend) {
				UART_SendByte(UARTx, (*pChar++));
    4324:	4620      	mov	r0, r4
    4326:	f819 1007 	ldrb.w	r1, [r9, r7]
    432a:	f7ff ff3f 	bl	41ac <UART_SendByte>
				bToSend--;
				fifo_cnt--;
				bSent++;
    432e:	f107 0701 	add.w	r7, r7, #1
		while (bToSend) {
			if (!(UARTx->LSR & UART_LSR_THRE)){
				break;
			}
			fifo_cnt = UART_TX_FIFO_SIZE;
			while (fifo_cnt && bToSend) {
    4332:	f1b8 0801 	subs.w	r8, r8, #1
    4336:	bf0c      	ite	eq
    4338:	2300      	moveq	r3, #0
    433a:	2301      	movne	r3, #1
    433c:	3d01      	subs	r5, #1
    433e:	bf0c      	ite	eq
    4340:	2200      	moveq	r2, #0
    4342:	f003 0201 	andne.w	r2, r3, #1
    4346:	2a00      	cmp	r2, #0
    4348:	d1ec      	bne.n	4324 <UART_Send+0x94>
		}
	}
	// None blocking mode
	else {
		bSent = 0;
		while (bToSend) {
    434a:	2b00      	cmp	r3, #0
    434c:	d1de      	bne.n	430c <UART_Send+0x7c>
    434e:	e008      	b.n	4362 <UART_Send+0xd2>
    4350:	f04f 0700 	mov.w	r7, #0
    4354:	b12a      	cbz	r2, 4362 <UART_Send+0xd2>
			if (!(UARTx->LSR & UART_LSR_THRE)){
    4356:	7d03      	ldrb	r3, [r0, #20]
    4358:	f013 0f20 	tst.w	r3, #32
    435c:	bf08      	it	eq
    435e:	2700      	moveq	r7, #0
    4360:	d1da      	bne.n	4318 <UART_Send+0x88>
				bSent++;
			}
		}
	}
	return bSent;
}
    4362:	4638      	mov	r0, r7
    4364:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00004368 <UART_Receive>:
 * Note: when using UART in BLOCKING mode, a time-out condition is used
 * via defined symbol UART_BLOCKING_TIMEOUT.
 **********************************************************************/
uint32_t UART_Receive(LPC_UART_TypeDef *UARTx, uint8_t *rxbuf, \
		uint32_t buflen, TRANSFER_BLOCK_Type flag)
{
    4368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    436c:	4604      	mov	r4, r0
    436e:	460f      	mov	r7, r1
    4370:	4616      	mov	r6, r2
	uint8_t *pChar = rxbuf;

	bToRecv = buflen;

	// Blocking mode
	if (flag == BLOCKING) {
    4372:	2b01      	cmp	r3, #1
    4374:	d00a      	beq.n	438c <UART_Receive+0x24>
		}
	}
	// None blocking mode
	else {
		bRecv = 0;
		while (bToRecv) {
    4376:	f04f 0500 	mov.w	r5, #0
    437a:	2a00      	cmp	r2, #0
    437c:	d035      	beq.n	43ea <UART_Receive+0x82>
			if (!(UARTx->LSR & UART_LSR_RDR)) {
    437e:	7d03      	ldrb	r3, [r0, #20]
    4380:	f013 0f01 	tst.w	r3, #1
    4384:	bf18      	it	ne
    4386:	2500      	movne	r5, #0
    4388:	d124      	bne.n	43d4 <UART_Receive+0x6c>
    438a:	e02c      	b.n	43e6 <UART_Receive+0x7e>
	bToRecv = buflen;

	// Blocking mode
	if (flag == BLOCKING) {
		bRecv = 0;
		while (bToRecv){
    438c:	f04f 0500 	mov.w	r5, #0
    4390:	b98a      	cbnz	r2, 43b6 <UART_Receive+0x4e>
    4392:	e02a      	b.n	43ea <UART_Receive+0x82>
			timeOut = UART_BLOCKING_TIMEOUT;
			while (!(UARTx->LSR & UART_LSR_RDR)){
				if (timeOut == 0) break;
    4394:	b34b      	cbz	r3, 43ea <UART_Receive+0x82>
				timeOut--;
    4396:	f103 33ff 	add.w	r3, r3, #4294967295
	// Blocking mode
	if (flag == BLOCKING) {
		bRecv = 0;
		while (bToRecv){
			timeOut = UART_BLOCKING_TIMEOUT;
			while (!(UARTx->LSR & UART_LSR_RDR)){
    439a:	7d22      	ldrb	r2, [r4, #20]
    439c:	f012 0f01 	tst.w	r2, #1
    43a0:	d0f8      	beq.n	4394 <UART_Receive+0x2c>
				if (timeOut == 0) break;
				timeOut--;
			}
			// Time out!
			if(timeOut == 0) break;
    43a2:	b313      	cbz	r3, 43ea <UART_Receive+0x82>
			// Get data from the buffer
			(*pChar++) = UART_ReceiveByte(UARTx);
    43a4:	4620      	mov	r0, r4
    43a6:	f7ff ff3b 	bl	4220 <UART_ReceiveByte>
    43aa:	5578      	strb	r0, [r7, r5]
			bToRecv--;
			bRecv++;
    43ac:	f105 0501 	add.w	r5, r5, #1
	bToRecv = buflen;

	// Blocking mode
	if (flag == BLOCKING) {
		bRecv = 0;
		while (bToRecv){
    43b0:	42b5      	cmp	r5, r6
    43b2:	d104      	bne.n	43be <UART_Receive+0x56>
    43b4:	e019      	b.n	43ea <UART_Receive+0x82>
    43b6:	f04f 0500 	mov.w	r5, #0
			timeOut = UART_BLOCKING_TIMEOUT;
			while (!(UARTx->LSR & UART_LSR_RDR)){
    43ba:	f04f 38ff 	mov.w	r8, #4294967295
    43be:	7d23      	ldrb	r3, [r4, #20]
    43c0:	f013 0f01 	tst.w	r3, #1
    43c4:	bf08      	it	eq
    43c6:	4643      	moveq	r3, r8
    43c8:	d0e5      	beq.n	4396 <UART_Receive+0x2e>
    43ca:	e7eb      	b.n	43a4 <UART_Receive+0x3c>
	}
	// None blocking mode
	else {
		bRecv = 0;
		while (bToRecv) {
			if (!(UARTx->LSR & UART_LSR_RDR)) {
    43cc:	7d23      	ldrb	r3, [r4, #20]
    43ce:	f013 0f01 	tst.w	r3, #1
    43d2:	d00a      	beq.n	43ea <UART_Receive+0x82>
				break;
			} else {
				(*pChar++) = UART_ReceiveByte(UARTx);
    43d4:	4620      	mov	r0, r4
    43d6:	f7ff ff23 	bl	4220 <UART_ReceiveByte>
    43da:	5578      	strb	r0, [r7, r5]
				bRecv++;
    43dc:	f105 0501 	add.w	r5, r5, #1
		}
	}
	// None blocking mode
	else {
		bRecv = 0;
		while (bToRecv) {
    43e0:	42b5      	cmp	r5, r6
    43e2:	d1f3      	bne.n	43cc <UART_Receive+0x64>
    43e4:	e001      	b.n	43ea <UART_Receive+0x82>
			if (!(UARTx->LSR & UART_LSR_RDR)) {
    43e6:	f04f 0500 	mov.w	r5, #0
				bToRecv--;
			}
		}
	}
	return bRecv;
}
    43ea:	4628      	mov	r0, r5
    43ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000043f0 <UART_IntConfig>:
 * 				- ENALBE: Enable this UART interrupt type.
* 				- DISALBE: Disable this UART interrupt type.
 * @return 		None
 *********************************************************************/
void UART_IntConfig(LPC_UART_TypeDef *UARTx, UART_INT_Type UARTIntCfg, FunctionalState NewState)
{
    43f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    43f2:	4604      	mov	r4, r0
    43f4:	460d      	mov	r5, r1
    43f6:	4616      	mov	r6, r2
	uint32_t tmp;

	CHECK_PARAM(PARAM_UARTx(UARTx));
    43f8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    43fc:	f2c4 0300 	movt	r3, #16384	; 0x4000
    4400:	f04f 0200 	mov.w	r2, #0
    4404:	f2c4 0201 	movt	r2, #16385	; 0x4001
    4408:	1a82      	subs	r2, r0, r2
    440a:	bf18      	it	ne
    440c:	2201      	movne	r2, #1
    440e:	4298      	cmp	r0, r3
    4410:	bf0c      	ite	eq
    4412:	2300      	moveq	r3, #0
    4414:	f002 0301 	andne.w	r3, r2, #1
    4418:	b1c3      	cbz	r3, 444c <UART_IntConfig+0x5c>
    441a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    441e:	f2c4 0309 	movt	r3, #16393	; 0x4009
    4422:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    4426:	f2c4 0209 	movt	r2, #16393	; 0x4009
    442a:	1a82      	subs	r2, r0, r2
    442c:	bf18      	it	ne
    442e:	2201      	movne	r2, #1
    4430:	4298      	cmp	r0, r3
    4432:	bf0c      	ite	eq
    4434:	2300      	moveq	r3, #0
    4436:	f002 0301 	andne.w	r3, r2, #1
    443a:	b13b      	cbz	r3, 444c <UART_IntConfig+0x5c>
    443c:	f246 002c 	movw	r0, #24620	; 0x602c
    4440:	f2c0 0002 	movt	r0, #2
    4444:	f44f 712b 	mov.w	r1, #684	; 0x2ac
    4448:	f7ff f86a 	bl	3520 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
    444c:	2e01      	cmp	r6, #1
    444e:	d907      	bls.n	4460 <UART_IntConfig+0x70>
    4450:	f246 002c 	movw	r0, #24620	; 0x602c
    4454:	f2c0 0002 	movt	r0, #2
    4458:	f240 21ad 	movw	r1, #685	; 0x2ad
    445c:	f7ff f860 	bl	3520 <check_failed>

	switch(UARTIntCfg){
    4460:	2d06      	cmp	r5, #6
    4462:	d819      	bhi.n	4498 <UART_IntConfig+0xa8>
    4464:	e8df f005 	tbb	[pc, r5]
    4468:	0a070416 	.word	0x0a070416
    446c:	100d      	.short	0x100d
    446e:	13          	.byte	0x13
    446f:	00          	.byte	0x00
		case UART_INTCFG_RBR:
			tmp = UART_IER_RBRINT_EN;
			break;
		case UART_INTCFG_THRE:
			tmp = UART_IER_THREINT_EN;
    4470:	f04f 0702 	mov.w	r7, #2
			break;
    4474:	e010      	b.n	4498 <UART_IntConfig+0xa8>
		case UART_INTCFG_RLS:
			tmp = UART_IER_RLSINT_EN;
    4476:	f04f 0704 	mov.w	r7, #4
			break;
    447a:	e00d      	b.n	4498 <UART_IntConfig+0xa8>
		case UART1_INTCFG_MS:
			tmp = UART1_IER_MSINT_EN;
    447c:	f04f 0708 	mov.w	r7, #8
			break;
    4480:	e00a      	b.n	4498 <UART_IntConfig+0xa8>
		case UART1_INTCFG_CTS:
			tmp = UART1_IER_CTSINT_EN;
    4482:	f04f 0780 	mov.w	r7, #128	; 0x80
			break;
    4486:	e007      	b.n	4498 <UART_IntConfig+0xa8>
		case UART_INTCFG_ABEO:
			tmp = UART_IER_ABEOINT_EN;
    4488:	f44f 7780 	mov.w	r7, #256	; 0x100
			break;
    448c:	e004      	b.n	4498 <UART_IntConfig+0xa8>
		case UART_INTCFG_ABTO:
			tmp = UART_IER_ABTOINT_EN;
    448e:	f44f 7700 	mov.w	r7, #512	; 0x200
			break;
    4492:	e001      	b.n	4498 <UART_IntConfig+0xa8>
	CHECK_PARAM(PARAM_UARTx(UARTx));
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));

	switch(UARTIntCfg){
		case UART_INTCFG_RBR:
			tmp = UART_IER_RBRINT_EN;
    4494:	f04f 0701 	mov.w	r7, #1
		case UART_INTCFG_ABTO:
			tmp = UART_IER_ABTOINT_EN;
			break;
	}

	if ((LPC_UART1_TypeDef *) UARTx == LPC_UART1)
    4498:	f04f 0300 	mov.w	r3, #0
    449c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    44a0:	429c      	cmp	r4, r3
    44a2:	d118      	bne.n	44d6 <UART_IntConfig+0xe6>
	{
		CHECK_PARAM((PARAM_UART_INTCFG(UARTIntCfg)) || (PARAM_UART1_INTCFG(UARTIntCfg)));
    44a4:	1f6b      	subs	r3, r5, #5
    44a6:	bf18      	it	ne
    44a8:	2301      	movne	r3, #1
    44aa:	2d02      	cmp	r5, #2
    44ac:	bf94      	ite	ls
    44ae:	2300      	movls	r3, #0
    44b0:	f003 0301 	andhi.w	r3, r3, #1
    44b4:	b313      	cbz	r3, 44fc <UART_IntConfig+0x10c>
    44b6:	2d06      	cmp	r5, #6
    44b8:	d020      	beq.n	44fc <UART_IntConfig+0x10c>
    44ba:	f1a5 0503 	sub.w	r5, r5, #3
    44be:	b2ed      	uxtb	r5, r5
    44c0:	2d01      	cmp	r5, #1
    44c2:	d91b      	bls.n	44fc <UART_IntConfig+0x10c>
    44c4:	f246 002c 	movw	r0, #24620	; 0x602c
    44c8:	f2c0 0002 	movt	r0, #2
    44cc:	f240 21c9 	movw	r1, #713	; 0x2c9
    44d0:	f7ff f826 	bl	3520 <check_failed>
    44d4:	e012      	b.n	44fc <UART_IntConfig+0x10c>
	}
	else
	{
		CHECK_PARAM(PARAM_UART_INTCFG(UARTIntCfg));
    44d6:	1f6b      	subs	r3, r5, #5
    44d8:	bf18      	it	ne
    44da:	2301      	movne	r3, #1
    44dc:	2d02      	cmp	r5, #2
    44de:	bf94      	ite	ls
    44e0:	2300      	movls	r3, #0
    44e2:	f003 0301 	andhi.w	r3, r3, #1
    44e6:	b14b      	cbz	r3, 44fc <UART_IntConfig+0x10c>
    44e8:	2d06      	cmp	r5, #6
    44ea:	d007      	beq.n	44fc <UART_IntConfig+0x10c>
    44ec:	f246 002c 	movw	r0, #24620	; 0x602c
    44f0:	f2c0 0002 	movt	r0, #2
    44f4:	f240 21cd 	movw	r1, #717	; 0x2cd
    44f8:	f7ff f812 	bl	3520 <check_failed>
	}

	if (NewState == ENABLE)
    44fc:	2e01      	cmp	r6, #1
    44fe:	d110      	bne.n	4522 <UART_IntConfig+0x132>
	{
		if ((LPC_UART1_TypeDef *) UARTx == LPC_UART1)
    4500:	f04f 0300 	mov.w	r3, #0
    4504:	f2c4 0301 	movt	r3, #16385	; 0x4001
    4508:	429c      	cmp	r4, r3
		{
			((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/IER |= tmp;
    450a:	bf01      	itttt	eq
    450c:	2300      	moveq	r3, #0
    450e:	f2c4 0301 	movteq	r3, #16385	; 0x4001
    4512:	685a      	ldreq	r2, [r3, #4]
    4514:	4317      	orreq	r7, r2
    4516:	bf0f      	iteee	eq
    4518:	605f      	streq	r7, [r3, #4]
		}
		else
		{
			UARTx->/*DLIER.*/IER |= tmp;
    451a:	6863      	ldrne	r3, [r4, #4]
    451c:	431f      	orrne	r7, r3
    451e:	6067      	strne	r7, [r4, #4]
    4520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	}
	else
	{
		if ((LPC_UART1_TypeDef *) UARTx == LPC_UART1)
    4522:	f04f 0300 	mov.w	r3, #0
    4526:	f2c4 0301 	movt	r3, #16385	; 0x4001
    452a:	429c      	cmp	r4, r3
    452c:	d10b      	bne.n	4546 <UART_IntConfig+0x156>
		{
			((LPC_UART1_TypeDef *)UARTx)->/*DLIER.*/IER &= (~tmp) & UART1_IER_BITMASK;
    452e:	f04f 0300 	mov.w	r3, #0
    4532:	f2c4 0301 	movt	r3, #16385	; 0x4001
    4536:	6859      	ldr	r1, [r3, #4]
    4538:	f240 328f 	movw	r2, #911	; 0x38f
    453c:	400a      	ands	r2, r1
    453e:	ea22 0707 	bic.w	r7, r2, r7
    4542:	605f      	str	r7, [r3, #4]
    4544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		else
		{
			UARTx->/*DLIER.*/IER &= (~tmp) & UART_IER_BITMASK;
    4546:	6862      	ldr	r2, [r4, #4]
    4548:	f240 3307 	movw	r3, #775	; 0x307
    454c:	4013      	ands	r3, r2
    454e:	ea23 0707 	bic.w	r7, r3, r7
    4552:	6067      	str	r7, [r4, #4]
    4554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4556:	bf00      	nop

00004558 <UART_GetLineStatus>:
 * 			Line Status register could not be correct. So this function used to
 * 			read Line status register in one time only, then the return value
 * 			used to check all flags.
 *********************************************************************/
uint8_t UART_GetLineStatus(LPC_UART_TypeDef* UARTx)
{
    4558:	b510      	push	{r4, lr}
    455a:	4604      	mov	r4, r0
	CHECK_PARAM(PARAM_UARTx(UARTx));
    455c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    4560:	f2c4 0300 	movt	r3, #16384	; 0x4000
    4564:	f04f 0200 	mov.w	r2, #0
    4568:	f2c4 0201 	movt	r2, #16385	; 0x4001
    456c:	1a82      	subs	r2, r0, r2
    456e:	bf18      	it	ne
    4570:	2201      	movne	r2, #1
    4572:	4298      	cmp	r0, r3
    4574:	bf0c      	ite	eq
    4576:	2300      	moveq	r3, #0
    4578:	f002 0301 	andne.w	r3, r2, #1
    457c:	b1c3      	cbz	r3, 45b0 <UART_GetLineStatus+0x58>
    457e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    4582:	f2c4 0309 	movt	r3, #16393	; 0x4009
    4586:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    458a:	f2c4 0209 	movt	r2, #16393	; 0x4009
    458e:	1a82      	subs	r2, r0, r2
    4590:	bf18      	it	ne
    4592:	2201      	movne	r2, #1
    4594:	4298      	cmp	r0, r3
    4596:	bf0c      	ite	eq
    4598:	2300      	moveq	r3, #0
    459a:	f002 0301 	andne.w	r3, r2, #1
    459e:	b13b      	cbz	r3, 45b0 <UART_GetLineStatus+0x58>
    45a0:	f246 002c 	movw	r0, #24620	; 0x602c
    45a4:	f2c0 0002 	movt	r0, #2
    45a8:	f240 21fb 	movw	r1, #763	; 0x2fb
    45ac:	f7fe ffb8 	bl	3520 <check_failed>

	if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    45b0:	f04f 0300 	mov.w	r3, #0
    45b4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    45b8:	429c      	cmp	r4, r3
	{
		return ((((LPC_UART1_TypeDef *)LPC_UART1)->LSR) & UART_LSR_BITMASK);
    45ba:	bf03      	ittte	eq
    45bc:	2300      	moveq	r3, #0
    45be:	f2c4 0301 	movteq	r3, #16385	; 0x4001
    45c2:	7d18      	ldrbeq	r0, [r3, #20]
	}
	else
	{
		return ((UARTx->LSR) & UART_LSR_BITMASK);
    45c4:	7d20      	ldrbne	r0, [r4, #20]
	}
}
    45c6:	bd10      	pop	{r4, pc}

000045c8 <UART_GetIntId>:
 * 				- LPC_UART2: UART2 peripheral
 * 				- LPC_UART3: UART3 peripheral
 * @return		Current value of UART UIIR register in UART peripheral.
 *********************************************************************/
uint32_t UART_GetIntId(LPC_UART_TypeDef* UARTx)
{
    45c8:	b510      	push	{r4, lr}
    45ca:	4604      	mov	r4, r0
	CHECK_PARAM(PARAM_UARTx(UARTx));
    45cc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    45d0:	f2c4 0300 	movt	r3, #16384	; 0x4000
    45d4:	f04f 0200 	mov.w	r2, #0
    45d8:	f2c4 0201 	movt	r2, #16385	; 0x4001
    45dc:	1a82      	subs	r2, r0, r2
    45de:	bf18      	it	ne
    45e0:	2201      	movne	r2, #1
    45e2:	4298      	cmp	r0, r3
    45e4:	bf0c      	ite	eq
    45e6:	2300      	moveq	r3, #0
    45e8:	f002 0301 	andne.w	r3, r2, #1
    45ec:	b1c3      	cbz	r3, 4620 <UART_GetIntId+0x58>
    45ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    45f2:	f2c4 0309 	movt	r3, #16393	; 0x4009
    45f6:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    45fa:	f2c4 0209 	movt	r2, #16393	; 0x4009
    45fe:	1a82      	subs	r2, r0, r2
    4600:	bf18      	it	ne
    4602:	2201      	movne	r2, #1
    4604:	4298      	cmp	r0, r3
    4606:	bf0c      	ite	eq
    4608:	2300      	moveq	r3, #0
    460a:	f002 0301 	andne.w	r3, r2, #1
    460e:	b13b      	cbz	r3, 4620 <UART_GetIntId+0x58>
    4610:	f246 002c 	movw	r0, #24620	; 0x602c
    4614:	f2c0 0002 	movt	r0, #2
    4618:	f240 3112 	movw	r1, #786	; 0x312
    461c:	f7fe ff80 	bl	3520 <check_failed>
	return (UARTx->IIR & 0x03CF);
    4620:	68a3      	ldr	r3, [r4, #8]
}
    4622:	f240 30cf 	movw	r0, #975	; 0x3cf
    4626:	4018      	ands	r0, r3
    4628:	bd10      	pop	{r4, pc}
    462a:	bf00      	nop

0000462c <UART_CheckBusy>:
 * 				- LPC_UART3: UART3 peripheral
 * @return		RESET if UART is not busy, otherwise return SET.
 **********************************************************************/
FlagStatus UART_CheckBusy(LPC_UART_TypeDef *UARTx)
{
	if (UARTx->LSR & UART_LSR_TEMT){
    462c:	7d03      	ldrb	r3, [r0, #20]
		return RESET;
    462e:	f013 0f40 	tst.w	r3, #64	; 0x40
	} else {
		return SET;
	}
}
    4632:	bf14      	ite	ne
    4634:	2000      	movne	r0, #0
    4636:	2001      	moveq	r0, #1
    4638:	4770      	bx	lr
    463a:	bf00      	nop

0000463c <UART_TxCmd>:
 * 				- ENABLE: Enable this function
				- DISABLE: Disable this function
 * @return none
 **********************************************************************/
void UART_TxCmd(LPC_UART_TypeDef *UARTx, FunctionalState NewState)
{
    463c:	b538      	push	{r3, r4, r5, lr}
    463e:	4604      	mov	r4, r0
    4640:	460d      	mov	r5, r1
	CHECK_PARAM(PARAM_UARTx(UARTx));
    4642:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    4646:	f2c4 0300 	movt	r3, #16384	; 0x4000
    464a:	f04f 0200 	mov.w	r2, #0
    464e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    4652:	1a82      	subs	r2, r0, r2
    4654:	bf18      	it	ne
    4656:	2201      	movne	r2, #1
    4658:	4298      	cmp	r0, r3
    465a:	bf0c      	ite	eq
    465c:	2300      	moveq	r3, #0
    465e:	f002 0301 	andne.w	r3, r2, #1
    4662:	b1c3      	cbz	r3, 4696 <UART_TxCmd+0x5a>
    4664:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    4668:	f2c4 0309 	movt	r3, #16393	; 0x4009
    466c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    4670:	f2c4 0209 	movt	r2, #16393	; 0x4009
    4674:	1a82      	subs	r2, r0, r2
    4676:	bf18      	it	ne
    4678:	2201      	movne	r2, #1
    467a:	4298      	cmp	r0, r3
    467c:	bf0c      	ite	eq
    467e:	2300      	moveq	r3, #0
    4680:	f002 0301 	andne.w	r3, r2, #1
    4684:	b13b      	cbz	r3, 4696 <UART_TxCmd+0x5a>
    4686:	f246 002c 	movw	r0, #24620	; 0x602c
    468a:	f2c0 0002 	movt	r0, #2
    468e:	f240 31eb 	movw	r1, #1003	; 0x3eb
    4692:	f7fe ff45 	bl	3520 <check_failed>
	CHECK_PARAM(PARAM_FUNCTIONALSTATE(NewState));
    4696:	2d01      	cmp	r5, #1
    4698:	d907      	bls.n	46aa <UART_TxCmd+0x6e>
    469a:	f246 002c 	movw	r0, #24620	; 0x602c
    469e:	f2c0 0002 	movt	r0, #2
    46a2:	f44f 717b 	mov.w	r1, #1004	; 0x3ec
    46a6:	f7fe ff3b 	bl	3520 <check_failed>

	if (NewState == ENABLE)
    46aa:	2d01      	cmp	r5, #1
    46ac:	d116      	bne.n	46dc <UART_TxCmd+0xa0>
	{
		if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    46ae:	f04f 0300 	mov.w	r3, #0
    46b2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    46b6:	429c      	cmp	r4, r3
		{
			((LPC_UART1_TypeDef *)UARTx)->TER |= UART_TER_TXEN;
    46b8:	bf01      	itttt	eq
    46ba:	2300      	moveq	r3, #0
    46bc:	f2c4 0301 	movteq	r3, #16385	; 0x4001
    46c0:	f893 2030 	ldrbeq.w	r2, [r3, #48]	; 0x30
    46c4:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    46c8:	bf0f      	iteee	eq
    46ca:	f883 2030 	strbeq.w	r2, [r3, #48]	; 0x30
		}
		else
		{
			UARTx->TER |= UART_TER_TXEN;
    46ce:	f894 3030 	ldrbne.w	r3, [r4, #48]	; 0x30
    46d2:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
    46d6:	f884 3030 	strbne.w	r3, [r4, #48]	; 0x30
    46da:	bd38      	pop	{r3, r4, r5, pc}
		}
	}
	else
	{
		if (((LPC_UART1_TypeDef *)UARTx) == LPC_UART1)
    46dc:	f04f 0300 	mov.w	r3, #0
    46e0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    46e4:	429c      	cmp	r4, r3
		{
			((LPC_UART1_TypeDef *)UARTx)->TER &= (~UART_TER_TXEN) & UART_TER_BITMASK;
    46e6:	bf01      	itttt	eq
    46e8:	2300      	moveq	r3, #0
    46ea:	f2c4 0301 	movteq	r3, #16385	; 0x4001
    46ee:	f893 2030 	ldrbeq.w	r2, [r3, #48]	; 0x30
    46f2:	2200      	moveq	r2, #0
    46f4:	bf0f      	iteee	eq
    46f6:	f883 2030 	strbeq.w	r2, [r3, #48]	; 0x30
		}
		else
		{
			UARTx->TER &= (~UART_TER_TXEN) & UART_TER_BITMASK;
    46fa:	f894 3030 	ldrbne.w	r3, [r4, #48]	; 0x30
    46fe:	2300      	movne	r3, #0
    4700:	f884 3030 	strbne.w	r3, [r4, #48]	; 0x30
    4704:	bd38      	pop	{r3, r4, r5, pc}
    4706:	bf00      	nop

00004708 <WDT_SetTimeOut>:
 * @param[in]	clk_source select Clock source for WDT device
 * @param[in]	timeout value of time-out for WDT (us)
 * @return		None
 *********************************************************************/
static uint8_t WDT_SetTimeOut (uint8_t clk_source, uint32_t timeout)
{
    4708:	b510      	push	{r4, lr}

	uint32_t pclk_wdt = 0;
	uint32_t tempval = 0;

	switch ((WDT_CLK_OPT) clk_source)
    470a:	b110      	cbz	r0, 4712 <WDT_SetTimeOut+0xa>
    470c:	2801      	cmp	r0, #1
    470e:	d15c      	bne.n	47ca <WDT_SetTimeOut+0xc2>
    4710:	e009      	b.n	4726 <WDT_SetTimeOut+0x1e>
    {
    case WDT_CLKSRC_IRC:
    	pclk_wdt = 4000000;
    	// Calculate TC in WDT
    	tempval  = (((pclk_wdt) / WDT_US_INDEX) * (timeout / 4));
    4712:	f021 0103 	bic.w	r1, r1, #3
    	// Check if it valid
    	if ((tempval >= WDT_TIMEOUT_MIN) && (tempval <= WDT_TIMEOUT_MAX))
    4716:	29fe      	cmp	r1, #254	; 0xfe
    4718:	d95a      	bls.n	47d0 <WDT_SetTimeOut+0xc8>
    	{
    		LPC_WDT->WDTC = tempval;
    471a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    471e:	6059      	str	r1, [r3, #4]
    		return	SUCCESS;
    4720:	f04f 0001 	mov.w	r0, #1
    4724:	bd10      	pop	{r4, pc}
    	break;

    case WDT_CLKSRC_PCLK:

    	// Get WDT clock with CCLK divider = 4
		pclk_wdt = SystemCoreClock / 4;
    4726:	f240 0314 	movw	r3, #20
    472a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    472e:	681b      	ldr	r3, [r3, #0]
		// Calculate TC in WDT
		tempval  = (((pclk_wdt) / WDT_US_INDEX) * (timeout / 4));
    4730:	ea4f 0191 	mov.w	r1, r1, lsr #2
    	break;

    case WDT_CLKSRC_PCLK:

    	// Get WDT clock with CCLK divider = 4
		pclk_wdt = SystemCoreClock / 4;
    4734:	ea4f 0493 	mov.w	r4, r3, lsr #2
		// Calculate TC in WDT
		tempval  = (((pclk_wdt) / WDT_US_INDEX) * (timeout / 4));
    4738:	f64d 6283 	movw	r2, #56963	; 0xde83
    473c:	f2c4 321b 	movt	r2, #17179	; 0x431b
    4740:	fba2 0404 	umull	r0, r4, r2, r4
    4744:	ea4f 4494 	mov.w	r4, r4, lsr #18
    4748:	fb04 f401 	mul.w	r4, r4, r1

		if ((tempval >= WDT_TIMEOUT_MIN) && (tempval <= WDT_TIMEOUT_MAX))
    474c:	2cfe      	cmp	r4, #254	; 0xfe
    474e:	d90a      	bls.n	4766 <WDT_SetTimeOut+0x5e>
		{
			CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_WDT, CLKPWR_PCLKSEL_CCLK_DIV_4);
    4750:	f04f 0000 	mov.w	r0, #0
    4754:	4601      	mov	r1, r0
    4756:	f7fe fe11 	bl	337c <CLKPWR_SetPCLKDiv>
			LPC_WDT->WDTC = (uint32_t) tempval;
    475a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    475e:	605c      	str	r4, [r3, #4]
			return SUCCESS;
    4760:	f04f 0001 	mov.w	r0, #1
    4764:	bd10      	pop	{r4, pc}
		}

		// Get WDT clock with CCLK divider = 2
		pclk_wdt = SystemCoreClock / 2;
    4766:	ea4f 0453 	mov.w	r4, r3, lsr #1
		// Calculate TC in WDT
		tempval  = (((pclk_wdt) / WDT_US_INDEX) * (timeout / 4));
    476a:	f64d 6283 	movw	r2, #56963	; 0xde83
    476e:	f2c4 321b 	movt	r2, #17179	; 0x431b
    4772:	fba2 0404 	umull	r0, r4, r2, r4
    4776:	ea4f 4494 	mov.w	r4, r4, lsr #18
    477a:	fb04 f401 	mul.w	r4, r4, r1

		if ((tempval >= WDT_TIMEOUT_MIN) && (tempval <= WDT_TIMEOUT_MAX))
    477e:	2cfe      	cmp	r4, #254	; 0xfe
    4780:	d90b      	bls.n	479a <WDT_SetTimeOut+0x92>
		{
			CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_WDT, CLKPWR_PCLKSEL_CCLK_DIV_2);
    4782:	f04f 0000 	mov.w	r0, #0
    4786:	f04f 0102 	mov.w	r1, #2
    478a:	f7fe fdf7 	bl	337c <CLKPWR_SetPCLKDiv>
			LPC_WDT->WDTC = (uint32_t) tempval;
    478e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4792:	605c      	str	r4, [r3, #4]
			return	SUCCESS;
    4794:	f04f 0001 	mov.w	r0, #1
    4798:	bd10      	pop	{r4, pc}
		}

		// Get WDT clock with CCLK divider = 1
		pclk_wdt = SystemCoreClock;
		// Calculate TC in WDT
		tempval  = (((pclk_wdt) / WDT_US_INDEX) * (timeout / 4));
    479a:	f64d 6483 	movw	r4, #56963	; 0xde83
    479e:	f2c4 341b 	movt	r4, #17179	; 0x431b
    47a2:	fba4 2403 	umull	r2, r4, r4, r3
    47a6:	ea4f 4494 	mov.w	r4, r4, lsr #18
    47aa:	fb04 f401 	mul.w	r4, r4, r1

		if ((tempval >= WDT_TIMEOUT_MIN) && (tempval <= WDT_TIMEOUT_MAX))
    47ae:	2cfe      	cmp	r4, #254	; 0xfe
    47b0:	d911      	bls.n	47d6 <WDT_SetTimeOut+0xce>
		{
			CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_WDT, CLKPWR_PCLKSEL_CCLK_DIV_1);
    47b2:	f04f 0000 	mov.w	r0, #0
    47b6:	f04f 0101 	mov.w	r1, #1
    47ba:	f7fe fddf 	bl	337c <CLKPWR_SetPCLKDiv>
			LPC_WDT->WDTC = (uint32_t) tempval;
    47be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    47c2:	605c      	str	r4, [r3, #4]
			return	SUCCESS;
    47c4:	f04f 0001 	mov.w	r0, #1
    47c8:	bd10      	pop	{r4, pc}
// Error parameter
		default:
			break;
}

	return ERROR;
    47ca:	f04f 0000 	mov.w	r0, #0
    47ce:	bd10      	pop	{r4, pc}
    47d0:	f04f 0000 	mov.w	r0, #0
    47d4:	bd10      	pop	{r4, pc}
    47d6:	f04f 0000 	mov.w	r0, #0
}
    47da:	bd10      	pop	{r4, pc}

000047dc <WDT_Init>:
* 				- WDT_MODE_INT_ONLY: Use WDT to generate interrupt only
* 				- WDT_MODE_RESET: Use WDT to generate interrupt and reset MCU
* @return 		None
 **********************************************************************/
void WDT_Init (WDT_CLK_OPT ClkSrc, WDT_MODE_OPT WDTMode)
{
    47dc:	b538      	push	{r3, r4, r5, lr}
    47de:	4605      	mov	r5, r0
    47e0:	460c      	mov	r4, r1
	CHECK_PARAM(PARAM_WDT_CLK_OPT(ClkSrc));
    47e2:	2802      	cmp	r0, #2
    47e4:	d907      	bls.n	47f6 <WDT_Init+0x1a>
    47e6:	f246 0064 	movw	r0, #24676	; 0x6064
    47ea:	f2c0 0002 	movt	r0, #2
    47ee:	f04f 01a6 	mov.w	r1, #166	; 0xa6
    47f2:	f7fe fe95 	bl	3520 <check_failed>
	CHECK_PARAM(PARAM_WDT_MODE_OPT(WDTMode));
    47f6:	2c01      	cmp	r4, #1
    47f8:	d907      	bls.n	480a <WDT_Init+0x2e>
    47fa:	f246 0064 	movw	r0, #24676	; 0x6064
    47fe:	f2c0 0002 	movt	r0, #2
    4802:	f04f 01a7 	mov.w	r1, #167	; 0xa7
    4806:	f7fe fe8b 	bl	3520 <check_failed>
	CLKPWR_SetPCLKDiv (CLKPWR_PCLKSEL_WDT, CLKPWR_PCLKSEL_CCLK_DIV_4);
    480a:	f04f 0000 	mov.w	r0, #0
    480e:	4601      	mov	r1, r0
    4810:	f7fe fdb4 	bl	337c <CLKPWR_SetPCLKDiv>

	//Set clock source
	LPC_WDT->WDCLKSEL &= ~WDT_WDCLKSEL_MASK;
    4814:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4818:	691a      	ldr	r2, [r3, #16]
    481a:	f022 0203 	bic.w	r2, r2, #3
    481e:	611a      	str	r2, [r3, #16]
	LPC_WDT->WDCLKSEL |= ClkSrc;
    4820:	691a      	ldr	r2, [r3, #16]
    4822:	4315      	orrs	r5, r2
    4824:	611d      	str	r5, [r3, #16]
	//Set WDT mode
	if (WDTMode == WDT_MODE_RESET){
    4826:	2c01      	cmp	r4, #1
		LPC_WDT->WDMOD |= WDT_WDMOD(WDTMode);
    4828:	bf02      	ittt	eq
    482a:	781a      	ldrbeq	r2, [r3, #0]
    482c:	f042 0202 	orreq.w	r2, r2, #2
    4830:	701a      	strbeq	r2, [r3, #0]
    4832:	bd38      	pop	{r3, r4, r5, pc}

00004834 <WDT_Feed>:
 *********************************************************************/
void WDT_Feed (void)
{
	// Disable irq interrupt
//	__disable_irq();
	LPC_WDT->WDFEED = 0xAA;
    4834:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4838:	f04f 02aa 	mov.w	r2, #170	; 0xaa
    483c:	721a      	strb	r2, [r3, #8]
	LPC_WDT->WDFEED = 0x55;
    483e:	f04f 0255 	mov.w	r2, #85	; 0x55
    4842:	721a      	strb	r2, [r3, #8]
	// Then enable irq interrupt
//	__enable_irq();
}
    4844:	4770      	bx	lr
    4846:	bf00      	nop

00004848 <WDT_Start>:
* @brief 		Start WDT activity with given timeout value
* @param[in]	TimeOut WDT reset after timeout if it is not feed
* @return 		None
 **********************************************************************/
void WDT_Start(uint32_t TimeOut)
{
    4848:	b510      	push	{r4, lr}
    484a:	4601      	mov	r1, r0
	uint32_t ClkSrc;

	ClkSrc = LPC_WDT->WDCLKSEL;
    484c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    4850:	6920      	ldr	r0, [r4, #16]
	ClkSrc &=WDT_WDCLKSEL_MASK;
	WDT_SetTimeOut(ClkSrc,TimeOut);
    4852:	f000 0003 	and.w	r0, r0, #3
    4856:	f7ff ff57 	bl	4708 <WDT_SetTimeOut>
	//enable watchdog
	LPC_WDT->WDMOD |= WDT_WDMOD_WDEN;
    485a:	7823      	ldrb	r3, [r4, #0]
    485c:	f043 0301 	orr.w	r3, r3, #1
    4860:	7023      	strb	r3, [r4, #0]
	WDT_Feed();
    4862:	f7ff ffe7 	bl	4834 <WDT_Feed>
}
    4866:	bd10      	pop	{r4, pc}

00004868 <CDC_SendEncapsulatedCommand>:
  Return Value: TRUE - Success, FALSE - Error
 *---------------------------------------------------------------------------*/
uint32_t CDC_SendEncapsulatedCommand (void) {

  return (TRUE);
}
    4868:	f04f 0001 	mov.w	r0, #1
    486c:	4770      	bx	lr
    486e:	bf00      	nop

00004870 <CDC_GetEncapsulatedResponse>:
 *---------------------------------------------------------------------------*/
uint32_t CDC_GetEncapsulatedResponse (void) {

  /* ... add code to handle request */
  return (TRUE);
}
    4870:	f04f 0001 	mov.w	r0, #1
    4874:	4770      	bx	lr
    4876:	bf00      	nop

00004878 <CDC_SetCommFeature>:
 *---------------------------------------------------------------------------*/
uint32_t CDC_SetCommFeature (unsigned short wFeatureSelector) {

  /* ... add code to handle request */
  return (TRUE);
}
    4878:	f04f 0001 	mov.w	r0, #1
    487c:	4770      	bx	lr
    487e:	bf00      	nop

00004880 <CDC_GetCommFeature>:
 *---------------------------------------------------------------------------*/
uint32_t CDC_GetCommFeature (unsigned short wFeatureSelector) {

  /* ... add code to handle request */
  return (TRUE);
}
    4880:	f04f 0001 	mov.w	r0, #1
    4884:	4770      	bx	lr
    4886:	bf00      	nop

00004888 <CDC_ClearCommFeature>:
 *---------------------------------------------------------------------------*/
uint32_t CDC_ClearCommFeature (unsigned short wFeatureSelector) {

  /* ... add code to handle request */
  return (TRUE);
}
    4888:	f04f 0001 	mov.w	r0, #1
    488c:	4770      	bx	lr
    488e:	bf00      	nop

00004890 <CDC_SetLineCoding>:
  Parameters:   none                    (global SetupPacket and EP0Buf)
  Return Value: TRUE - Success, FALSE - Error
 *---------------------------------------------------------------------------*/
uint32_t CDC_SetLineCoding (void) {

  CDC_LineCoding.dwDTERate   =   (EP0Buf[0] <<  0)
    4890:	f240 020c 	movw	r2, #12
    4894:	f2c1 0200 	movt	r2, #4096	; 0x1000
                               | (EP0Buf[1] <<  8)
    4898:	f243 3380 	movw	r3, #13184	; 0x3380
    489c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    48a0:	7858      	ldrb	r0, [r3, #1]
                               | (EP0Buf[2] << 16)
    48a2:	7899      	ldrb	r1, [r3, #2]
    48a4:	ea4f 4101 	mov.w	r1, r1, lsl #16
  Return Value: TRUE - Success, FALSE - Error
 *---------------------------------------------------------------------------*/
uint32_t CDC_SetLineCoding (void) {

  CDC_LineCoding.dwDTERate   =   (EP0Buf[0] <<  0)
                               | (EP0Buf[1] <<  8)
    48a8:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  Parameters:   none                    (global SetupPacket and EP0Buf)
  Return Value: TRUE - Success, FALSE - Error
 *---------------------------------------------------------------------------*/
uint32_t CDC_SetLineCoding (void) {

  CDC_LineCoding.dwDTERate   =   (EP0Buf[0] <<  0)
    48ac:	7818      	ldrb	r0, [r3, #0]
                               | (EP0Buf[1] <<  8)
                               | (EP0Buf[2] << 16)
    48ae:	4301      	orrs	r1, r0
                               | (EP0Buf[3] << 24);
    48b0:	78d8      	ldrb	r0, [r3, #3]
    48b2:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
  Parameters:   none                    (global SetupPacket and EP0Buf)
  Return Value: TRUE - Success, FALSE - Error
 *---------------------------------------------------------------------------*/
uint32_t CDC_SetLineCoding (void) {

  CDC_LineCoding.dwDTERate   =   (EP0Buf[0] <<  0)
    48b6:	6011      	str	r1, [r2, #0]
                               | (EP0Buf[1] <<  8)
                               | (EP0Buf[2] << 16)
                               | (EP0Buf[3] << 24);
  CDC_LineCoding.bCharFormat =  EP0Buf[4];
    48b8:	7919      	ldrb	r1, [r3, #4]
    48ba:	7111      	strb	r1, [r2, #4]
  CDC_LineCoding.bParityType =  EP0Buf[5];
    48bc:	7959      	ldrb	r1, [r3, #5]
    48be:	7151      	strb	r1, [r2, #5]
  CDC_LineCoding.bDataBits   =  EP0Buf[6];
    48c0:	799b      	ldrb	r3, [r3, #6]
    48c2:	7193      	strb	r3, [r2, #6]
                CDC_LineCoding.bParityType,
                CDC_LineCoding.bCharFormat);
#endif*/

  return (TRUE);
}
    48c4:	f04f 0001 	mov.w	r0, #1
    48c8:	4770      	bx	lr
    48ca:	bf00      	nop

000048cc <CDC_GetLineCoding>:
  Parameters:   None                         (global SetupPacket and EP0Buf)
  Return Value: TRUE - Success, FALSE - Error
 *---------------------------------------------------------------------------*/
uint32_t CDC_GetLineCoding (void) {

  EP0Buf[0] = (CDC_LineCoding.dwDTERate >>  0) & 0xFF;
    48cc:	f240 020c 	movw	r2, #12
    48d0:	f2c1 0200 	movt	r2, #4096	; 0x1000
    48d4:	6811      	ldr	r1, [r2, #0]
    48d6:	f243 3380 	movw	r3, #13184	; 0x3380
    48da:	f2c1 0300 	movt	r3, #4096	; 0x1000
    48de:	7019      	strb	r1, [r3, #0]
  EP0Buf[1] = (CDC_LineCoding.dwDTERate >>  8) & 0xFF;
    48e0:	ea4f 2011 	mov.w	r0, r1, lsr #8
    48e4:	7058      	strb	r0, [r3, #1]
  EP0Buf[2] = (CDC_LineCoding.dwDTERate >> 16) & 0xFF;
    48e6:	ea4f 4011 	mov.w	r0, r1, lsr #16
    48ea:	7098      	strb	r0, [r3, #2]
  EP0Buf[3] = (CDC_LineCoding.dwDTERate >> 24) & 0xFF;
    48ec:	ea4f 6111 	mov.w	r1, r1, lsr #24
    48f0:	70d9      	strb	r1, [r3, #3]
  EP0Buf[4] =  CDC_LineCoding.bCharFormat;
    48f2:	7911      	ldrb	r1, [r2, #4]
    48f4:	7119      	strb	r1, [r3, #4]
  EP0Buf[5] =  CDC_LineCoding.bParityType;
    48f6:	7951      	ldrb	r1, [r2, #5]
    48f8:	7159      	strb	r1, [r3, #5]
  EP0Buf[6] =  CDC_LineCoding.bDataBits;
    48fa:	7992      	ldrb	r2, [r2, #6]
    48fc:	719a      	strb	r2, [r3, #6]

  return (TRUE);
}
    48fe:	f04f 0001 	mov.w	r0, #1
    4902:	4770      	bx	lr

00004904 <CDC_SetControlLineState>:
 *---------------------------------------------------------------------------*/
uint32_t CDC_SetControlLineState (unsigned short wControlSignalBitmap) {

  /* ... add code to handle request */
  return (TRUE);
}
    4904:	f04f 0001 	mov.w	r0, #1
    4908:	4770      	bx	lr
    490a:	bf00      	nop

0000490c <CDC_SendBreak>:
 *---------------------------------------------------------------------------*/
uint32_t CDC_SendBreak (unsigned short wDurationOfBreak) {

  /* ... add code to handle request */
  return (TRUE);
}
    490c:	f04f 0001 	mov.w	r0, #1
    4910:	4770      	bx	lr
    4912:	bf00      	nop

00004914 <CDC_BulkIn>:
/*----------------------------------------------------------------------------
  CDC_BulkIn call on DataIn Request
  Parameters:   none
  Return Value: none
 *---------------------------------------------------------------------------*/
void CDC_BulkIn(void) {
    4914:	b500      	push	{lr}
    4916:	b083      	sub	sp, #12
  int numBytesRead, numBytesAvail;

  ser_AvailChar (&numBytesAvail);
    4918:	a801      	add	r0, sp, #4
    491a:	f000 f8d3 	bl	4ac4 <ser_AvailChar>

  // ... add code to check for overwrite

  numBytesRead = ser_Read ((char *)&BulkBufIn[0], &numBytesAvail);
    491e:	f243 10d4 	movw	r0, #12756	; 0x31d4
    4922:	f2c1 0000 	movt	r0, #4096	; 0x1000
    4926:	a901      	add	r1, sp, #4
    4928:	f000 f8ae 	bl	4a88 <ser_Read>

  // send over USB
  if (numBytesRead > 0) {
    492c:	1e02      	subs	r2, r0, #0
    492e:	dd08      	ble.n	4942 <CDC_BulkIn+0x2e>
	USB_WriteEP (CDC_DEP_IN, &BulkBufIn[0], numBytesRead);
    4930:	f04f 0082 	mov.w	r0, #130	; 0x82
    4934:	f243 11d4 	movw	r1, #12756	; 0x31d4
    4938:	f2c1 0100 	movt	r1, #4096	; 0x1000
    493c:	f001 f8a8 	bl	5a90 <USB_WriteEP>
    4940:	e006      	b.n	4950 <CDC_BulkIn+0x3c>
  }
  else {
    CDC_DepInEmpty = 1;
    4942:	f240 0308 	movw	r3, #8
    4946:	f2c1 0300 	movt	r3, #4096	; 0x1000
    494a:	f04f 0201 	mov.w	r2, #1
    494e:	801a      	strh	r2, [r3, #0]
  }
}
    4950:	b003      	add	sp, #12
    4952:	bd00      	pop	{pc}

00004954 <CDC_BulkOut>:

    \param [in]      IRQn  Number of the interrupt for set pending
 */
static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
    4954:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    4958:	f2ce 0300 	movt	r3, #57344	; 0xe000
    495c:	f04f 0204 	mov.w	r2, #4
    4960:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

  // store data in a buffer to transmit it over serial interface
//  CDC_WrOutBuf ((char *)&BulkBufOut[0], &numBytesRead);
	NVIC_SetPendingIRQ(CANActivity_IRQn); // Software interrupt

}
    4964:	4770      	bx	lr
    4966:	bf00      	nop

00004968 <CDC_GetSerialState>:
/*----------------------------------------------------------------------------
  Get the SERIAL_STATE as defined in usbcdc11.pdf, 6.3.5, Table 69.
  Parameters:   none
  Return Value: SerialState as defined in usbcdc11.pdf
 *---------------------------------------------------------------------------*/
unsigned short CDC_GetSerialState (void) {
    4968:	b500      	push	{lr}
    496a:	b083      	sub	sp, #12
  unsigned short temp;

  CDC_SerialState = 0;
    496c:	f240 53cc 	movw	r3, #1484	; 0x5cc
    4970:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4974:	f04f 0200 	mov.w	r2, #0
    4978:	801a      	strh	r2, [r3, #0]
  ser_LineState (&temp);
    497a:	f10d 0006 	add.w	r0, sp, #6
    497e:	f000 f8af 	bl	4ae0 <ser_LineState>

  if (temp & 0x8000)  CDC_SerialState |= CDC_SERIAL_STATE_RX_CARRIER;
    4982:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    4986:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    498a:	bf1f      	itttt	ne
    498c:	f240 52cc 	movwne	r2, #1484	; 0x5cc
    4990:	f2c1 0200 	movtne	r2, #4096	; 0x1000
    4994:	8811      	ldrhne	r1, [r2, #0]
    4996:	f041 0101 	orrne.w	r1, r1, #1
    499a:	bf18      	it	ne
    499c:	8011      	strhne	r1, [r2, #0]
  if (temp & 0x2000)  CDC_SerialState |= CDC_SERIAL_STATE_TX_CARRIER;
    499e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    49a2:	bf1f      	itttt	ne
    49a4:	f240 52cc 	movwne	r2, #1484	; 0x5cc
    49a8:	f2c1 0200 	movtne	r2, #4096	; 0x1000
    49ac:	8811      	ldrhne	r1, [r2, #0]
    49ae:	f041 0102 	orrne.w	r1, r1, #2
    49b2:	bf18      	it	ne
    49b4:	8011      	strhne	r1, [r2, #0]
  if (temp & 0x0010)  CDC_SerialState |= CDC_SERIAL_STATE_BREAK;
    49b6:	f013 0f10 	tst.w	r3, #16
    49ba:	bf1f      	itttt	ne
    49bc:	f240 52cc 	movwne	r2, #1484	; 0x5cc
    49c0:	f2c1 0200 	movtne	r2, #4096	; 0x1000
    49c4:	8811      	ldrhne	r1, [r2, #0]
    49c6:	f041 0104 	orrne.w	r1, r1, #4
    49ca:	bf18      	it	ne
    49cc:	8011      	strhne	r1, [r2, #0]
  if (temp & 0x4000)  CDC_SerialState |= CDC_SERIAL_STATE_RING;
    49ce:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    49d2:	bf1f      	itttt	ne
    49d4:	f240 52cc 	movwne	r2, #1484	; 0x5cc
    49d8:	f2c1 0200 	movtne	r2, #4096	; 0x1000
    49dc:	8811      	ldrhne	r1, [r2, #0]
    49de:	f041 0108 	orrne.w	r1, r1, #8
    49e2:	bf18      	it	ne
    49e4:	8011      	strhne	r1, [r2, #0]
  if (temp & 0x0008)  CDC_SerialState |= CDC_SERIAL_STATE_FRAMING;
    49e6:	f013 0f08 	tst.w	r3, #8
    49ea:	bf1f      	itttt	ne
    49ec:	f240 52cc 	movwne	r2, #1484	; 0x5cc
    49f0:	f2c1 0200 	movtne	r2, #4096	; 0x1000
    49f4:	8811      	ldrhne	r1, [r2, #0]
    49f6:	f041 0110 	orrne.w	r1, r1, #16
    49fa:	bf18      	it	ne
    49fc:	8011      	strhne	r1, [r2, #0]
  if (temp & 0x0004)  CDC_SerialState |= CDC_SERIAL_STATE_PARITY;
    49fe:	f013 0f04 	tst.w	r3, #4
    4a02:	bf1f      	itttt	ne
    4a04:	f240 52cc 	movwne	r2, #1484	; 0x5cc
    4a08:	f2c1 0200 	movtne	r2, #4096	; 0x1000
    4a0c:	8811      	ldrhne	r1, [r2, #0]
    4a0e:	f041 0120 	orrne.w	r1, r1, #32
    4a12:	bf18      	it	ne
    4a14:	8011      	strhne	r1, [r2, #0]
  if (temp & 0x0002)  CDC_SerialState |= CDC_SERIAL_STATE_OVERRUN;
    4a16:	f013 0f02 	tst.w	r3, #2
    4a1a:	bf1f      	itttt	ne
    4a1c:	f240 53cc 	movwne	r3, #1484	; 0x5cc
    4a20:	f2c1 0300 	movtne	r3, #4096	; 0x1000
    4a24:	881a      	ldrhne	r2, [r3, #0]
    4a26:	f042 0240 	orrne.w	r2, r2, #64	; 0x40
    4a2a:	bf18      	it	ne
    4a2c:	801a      	strhne	r2, [r3, #0]

  return (CDC_SerialState);
    4a2e:	f240 53cc 	movw	r3, #1484	; 0x5cc
    4a32:	f2c1 0300 	movt	r3, #4096	; 0x1000
}
    4a36:	8818      	ldrh	r0, [r3, #0]
    4a38:	b003      	add	sp, #12
    4a3a:	bd00      	pop	{pc}

00004a3c <CDC_NotificationIn>:


/*----------------------------------------------------------------------------
  Send the SERIAL_STATE notification as defined in usbcdc11.pdf, 6.3.5.
 *---------------------------------------------------------------------------*/
void CDC_NotificationIn (void) {
    4a3c:	b508      	push	{r3, lr}

  NotificationBuf[0] = 0xA1;                           // bmRequestType
    4a3e:	f243 11c8 	movw	r1, #12744	; 0x31c8
    4a42:	f2c1 0100 	movt	r1, #4096	; 0x1000
    4a46:	f04f 03a1 	mov.w	r3, #161	; 0xa1
    4a4a:	700b      	strb	r3, [r1, #0]
  NotificationBuf[1] = CDC_NOTIFICATION_SERIAL_STATE;  // bNotification (SERIAL_STATE)
    4a4c:	f04f 0320 	mov.w	r3, #32
    4a50:	704b      	strb	r3, [r1, #1]
  NotificationBuf[2] = 0x00;                           // wValue
    4a52:	f04f 0300 	mov.w	r3, #0
    4a56:	708b      	strb	r3, [r1, #2]
  NotificationBuf[3] = 0x00;
    4a58:	70cb      	strb	r3, [r1, #3]
  NotificationBuf[4] = 0x00;                           // wIndex (Interface #, LSB first)
    4a5a:	710b      	strb	r3, [r1, #4]
  NotificationBuf[5] = 0x00;
    4a5c:	714b      	strb	r3, [r1, #5]
  NotificationBuf[6] = 0x02;                           // wLength (Data length = 2 bytes, LSB first)
    4a5e:	f04f 0202 	mov.w	r2, #2
    4a62:	718a      	strb	r2, [r1, #6]
  NotificationBuf[7] = 0x00;
    4a64:	71cb      	strb	r3, [r1, #7]
  NotificationBuf[8] = (CDC_SerialState >>  0) & 0xFF; // UART State Bitmap (16bits, LSB first)
    4a66:	f240 53cc 	movw	r3, #1484	; 0x5cc
    4a6a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4a6e:	881b      	ldrh	r3, [r3, #0]
    4a70:	720b      	strb	r3, [r1, #8]
  NotificationBuf[9] = (CDC_SerialState >>  8) & 0xFF;
    4a72:	ea4f 2313 	mov.w	r3, r3, lsr #8
    4a76:	724b      	strb	r3, [r1, #9]

  USB_WriteEP (CDC_CEP_IN, &NotificationBuf[0], 10);   // send notification
    4a78:	f04f 0081 	mov.w	r0, #129	; 0x81
    4a7c:	f04f 020a 	mov.w	r2, #10
    4a80:	f001 f806 	bl	5a90 <USB_WriteEP>
}
    4a84:	bd08      	pop	{r3, pc}
    4a86:	bf00      	nop

00004a88 <ser_Read>:
*/

/*----------------------------------------------------------------------------
  read data from serial port
 *---------------------------------------------------------------------------*/
int ser_Read (char *buffer, const int *length) {
    4a88:	b430      	push	{r4, r5}
    4a8a:	4603      	mov	r3, r0
  int bytesToRead, bytesRead;

  /* Read *length bytes, block if *bytes are not avaialable	*/
  bytesToRead = *length;
    4a8c:	6808      	ldr	r0, [r1, #0]
  bytesToRead = (bytesToRead < (*length)) ? bytesToRead : (*length);
  bytesRead = bytesToRead;

  while (bytesToRead--) {
    4a8e:	b1a8      	cbz	r0, 4abc <ser_Read+0x34>
*/

/*----------------------------------------------------------------------------
  read data from serial port
 *---------------------------------------------------------------------------*/
int ser_Read (char *buffer, const int *length) {
    4a90:	181d      	adds	r5, r3, r0
  bytesToRead = *length;
  bytesToRead = (bytesToRead < (*length)) ? bytesToRead : (*length);
  bytesRead = bytesToRead;

  while (bytesToRead--) {
    while (SER_BUF_EMPTY(ser_in));                     // Block until data is available if none
    4a92:	f243 2264 	movw	r2, #12900	; 0x3264
    4a96:	f2c1 0200 	movt	r2, #4096	; 0x1000
    4a9a:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
    4a9e:	f8d2 4080 	ldr.w	r4, [r2, #128]	; 0x80
    4aa2:	42a1      	cmp	r1, r4
    4aa4:	d00c      	beq.n	4ac0 <ser_Read+0x38>
    *buffer++ = SER_BUF_RD(ser_in);
    4aa6:	f001 047f 	and.w	r4, r1, #127	; 0x7f
    4aaa:	5d14      	ldrb	r4, [r2, r4]
    4aac:	f803 4b01 	strb.w	r4, [r3], #1
    4ab0:	f101 0101 	add.w	r1, r1, #1
    4ab4:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
  /* Read *length bytes, block if *bytes are not avaialable	*/
  bytesToRead = *length;
  bytesToRead = (bytesToRead < (*length)) ? bytesToRead : (*length);
  bytesRead = bytesToRead;

  while (bytesToRead--) {
    4ab8:	42ab      	cmp	r3, r5
    4aba:	d1ee      	bne.n	4a9a <ser_Read+0x12>
    while (SER_BUF_EMPTY(ser_in));                     // Block until data is available if none
    *buffer++ = SER_BUF_RD(ser_in);
  }
  return (bytesRead);
}
    4abc:	bc30      	pop	{r4, r5}
    4abe:	4770      	bx	lr
    4ac0:	e7fe      	b.n	4ac0 <ser_Read+0x38>
    4ac2:	bf00      	nop

00004ac4 <ser_AvailChar>:
/*----------------------------------------------------------------------------
  check if character(s) are available at the serial interface
 *---------------------------------------------------------------------------*/
void ser_AvailChar (int *availChar) {

  *availChar = SER_BUF_COUNT(ser_in);
    4ac4:	f243 2364 	movw	r3, #12900	; 0x3264
    4ac8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4acc:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    4ad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    4ad4:	1ad3      	subs	r3, r2, r3
    4ad6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4ada:	6003      	str	r3, [r0, #0]

}
    4adc:	4770      	bx	lr
    4ade:	bf00      	nop

00004ae0 <ser_LineState>:
/*----------------------------------------------------------------------------
  read the line state of the serial port
 *---------------------------------------------------------------------------*/
void ser_LineState (unsigned short *lineState) {

  *lineState = ser_lineState;
    4ae0:	f243 23f0 	movw	r3, #13040	; 0x32f0
    4ae4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4ae8:	881a      	ldrh	r2, [r3, #0]
    4aea:	8002      	strh	r2, [r0, #0]
  ser_lineState = 0;
    4aec:	f04f 0200 	mov.w	r2, #0
    4af0:	801a      	strh	r2, [r3, #0]

}
    4af2:	4770      	bx	lr

00004af4 <USB_ResetCore>:
 *    Return Value:    None
 */

void USB_ResetCore (void) {

  USB_DeviceStatus  = USB_POWER;
    4af4:	f243 32b0 	movw	r2, #13232	; 0x33b0
    4af8:	f2c1 0200 	movt	r2, #4096	; 0x1000
    4afc:	f04f 0300 	mov.w	r3, #0
    4b00:	8013      	strh	r3, [r2, #0]
  USB_DeviceAddress = 0;
    4b02:	f243 328c 	movw	r2, #13196	; 0x338c
    4b06:	f2c1 0200 	movt	r2, #4096	; 0x1000
    4b0a:	7013      	strb	r3, [r2, #0]
  USB_Configuration = 0;
    4b0c:	f243 3298 	movw	r2, #13208	; 0x3398
    4b10:	f2c1 0200 	movt	r2, #4096	; 0x1000
    4b14:	7013      	strb	r3, [r2, #0]
  USB_EndPointMask  = 0x00010001;
    4b16:	f243 3288 	movw	r2, #13192	; 0x3388
    4b1a:	f2c1 0200 	movt	r2, #4096	; 0x1000
    4b1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
    4b22:	6011      	str	r1, [r2, #0]
  USB_EndPointHalt  = 0x00000000;
    4b24:	f243 3294 	movw	r2, #13204	; 0x3394
    4b28:	f2c1 0200 	movt	r2, #4096	; 0x1000
    4b2c:	6013      	str	r3, [r2, #0]
  USB_EndPointStall = 0x00000000;
    4b2e:	f243 3290 	movw	r2, #13200	; 0x3390
    4b32:	f2c1 0200 	movt	r2, #4096	; 0x1000
    4b36:	6013      	str	r3, [r2, #0]
}
    4b38:	4770      	bx	lr
    4b3a:	bf00      	nop

00004b3c <USB_SetupStage>:
 *  USB Request - Setup Stage
 *    Parameters:      None (global SetupPacket)
 *    Return Value:    None
 */

void USB_SetupStage (void) {
    4b3c:	b508      	push	{r3, lr}
  USB_ReadEP(0x00, (uint8_t *)&SetupPacket);
    4b3e:	f04f 0000 	mov.w	r0, #0
    4b42:	f243 319c 	movw	r1, #13212	; 0x339c
    4b46:	f2c1 0100 	movt	r1, #4096	; 0x1000
    4b4a:	f000 ff5d 	bl	5a08 <USB_ReadEP>
}
    4b4e:	bd08      	pop	{r3, pc}

00004b50 <USB_DataInStage>:
 *  USB Request - Data In Stage
 *    Parameters:      None (global EP0Data)
 *    Return Value:    None
 */

void USB_DataInStage (void) {
    4b50:	b510      	push	{r4, lr}
  uint32_t cnt;

  if (EP0Data.Count > USB_MAX_PACKET0) {
    4b52:	f243 33a8 	movw	r3, #13224	; 0x33a8
    4b56:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4b5a:	889a      	ldrh	r2, [r3, #4]
    cnt = USB_MAX_PACKET0;
  } else {
    cnt = EP0Data.Count;
  }
  cnt = USB_WriteEP(0x80, EP0Data.pData, cnt);
    4b5c:	461c      	mov	r4, r3
    4b5e:	f04f 0080 	mov.w	r0, #128	; 0x80
    4b62:	6819      	ldr	r1, [r3, #0]
    4b64:	2a08      	cmp	r2, #8
    4b66:	bf28      	it	cs
    4b68:	2208      	movcs	r2, #8
    4b6a:	f000 ff91 	bl	5a90 <USB_WriteEP>
  EP0Data.pData += cnt;
    4b6e:	6823      	ldr	r3, [r4, #0]
    4b70:	181b      	adds	r3, r3, r0
    4b72:	6023      	str	r3, [r4, #0]
  EP0Data.Count -= cnt;
    4b74:	88a3      	ldrh	r3, [r4, #4]
    4b76:	1a18      	subs	r0, r3, r0
    4b78:	80a0      	strh	r0, [r4, #4]
}
    4b7a:	bd10      	pop	{r4, pc}

00004b7c <USB_DataOutStage>:
 *  USB Request - Data Out Stage
 *    Parameters:      None (global EP0Data)
 *    Return Value:    None
 */

void USB_DataOutStage (void) {
    4b7c:	b510      	push	{r4, lr}
  uint32_t cnt;

  cnt = USB_ReadEP(0x00, EP0Data.pData);
    4b7e:	f243 34a8 	movw	r4, #13224	; 0x33a8
    4b82:	f2c1 0400 	movt	r4, #4096	; 0x1000
    4b86:	f04f 0000 	mov.w	r0, #0
    4b8a:	6821      	ldr	r1, [r4, #0]
    4b8c:	f000 ff3c 	bl	5a08 <USB_ReadEP>
  EP0Data.pData += cnt;
    4b90:	6823      	ldr	r3, [r4, #0]
    4b92:	181b      	adds	r3, r3, r0
    4b94:	6023      	str	r3, [r4, #0]
  EP0Data.Count -= cnt;
    4b96:	88a3      	ldrh	r3, [r4, #4]
    4b98:	1a18      	subs	r0, r3, r0
    4b9a:	80a0      	strh	r0, [r4, #4]
}
    4b9c:	bd10      	pop	{r4, pc}
    4b9e:	bf00      	nop

00004ba0 <USB_StatusInStage>:
 *  USB Request - Status In Stage
 *    Parameters:      None
 *    Return Value:    None
 */

void USB_StatusInStage (void) {
    4ba0:	b508      	push	{r3, lr}
  USB_WriteEP(0x80, NULL, 0);
    4ba2:	f04f 0080 	mov.w	r0, #128	; 0x80
    4ba6:	f04f 0100 	mov.w	r1, #0
    4baa:	460a      	mov	r2, r1
    4bac:	f000 ff70 	bl	5a90 <USB_WriteEP>
}
    4bb0:	bd08      	pop	{r3, pc}
    4bb2:	bf00      	nop

00004bb4 <USB_StatusOutStage>:
 *  USB Request - Status Out Stage
 *    Parameters:      None
 *    Return Value:    None
 */

void USB_StatusOutStage (void) {
    4bb4:	b508      	push	{r3, lr}
  USB_ReadEP(0x00, EP0Buf);
    4bb6:	f04f 0000 	mov.w	r0, #0
    4bba:	f243 3180 	movw	r1, #13184	; 0x3380
    4bbe:	f2c1 0100 	movt	r1, #4096	; 0x1000
    4bc2:	f000 ff21 	bl	5a08 <USB_ReadEP>
}
    4bc6:	bd08      	pop	{r3, pc}

00004bc8 <USB_EndPoint0>:
 *  USB Endpoint 0 Event Callback
 *    Parameters:      event
 *    Return Value:    none
 */

void USB_EndPoint0 (uint32_t event) {
    4bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4bcc:	b085      	sub	sp, #20

  switch (event) {
    4bce:	f100 30ff 	add.w	r0, r0, #4294967295
    4bd2:	2806      	cmp	r0, #6
    4bd4:	f200 8530 	bhi.w	5638 <USB_EndPoint0+0xa70>
    4bd8:	e8df f010 	tbh	[pc, r0, lsl #1]
    4bdc:	04a30007 	.word	0x04a30007
    4be0:	052e04fc 	.word	0x052e04fc
    4be4:	0519052e 	.word	0x0519052e
    4be8:	051e      	.short	0x051e
    case USB_EVT_SETUP:
      USB_SetupStage();
    4bea:	f7ff ffa7 	bl	4b3c <USB_SetupStage>
      USB_DirCtrlEP(SetupPacket.bmRequestType.BM.Dir);
    4bee:	f243 349c 	movw	r4, #13212	; 0x339c
    4bf2:	f2c1 0400 	movt	r4, #4096	; 0x1000
    4bf6:	7820      	ldrb	r0, [r4, #0]
    4bf8:	ea4f 10d0 	mov.w	r0, r0, lsr #7
    4bfc:	f000 feb8 	bl	5970 <USB_DirCtrlEP>
      EP0Data.Count = SetupPacket.wLength;     /* Number of bytes to transfer */
    4c00:	f243 33a8 	movw	r3, #13224	; 0x33a8
    4c04:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4c08:	88e2      	ldrh	r2, [r4, #6]
    4c0a:	809a      	strh	r2, [r3, #4]
      switch (SetupPacket.bmRequestType.BM.Type) {
    4c0c:	7823      	ldrb	r3, [r4, #0]
    4c0e:	f3c3 1341 	ubfx	r3, r3, #5, #2
    4c12:	b11b      	cbz	r3, 4c1c <USB_EndPoint0+0x54>
    4c14:	2b01      	cmp	r3, #1
    4c16:	f040 8478 	bne.w	550a <USB_EndPoint0+0x942>
    4c1a:	e3d5      	b.n	53c8 <USB_EndPoint0+0x800>

        case REQUEST_STANDARD:
          switch (SetupPacket.bRequest) {
    4c1c:	f243 339c 	movw	r3, #13212	; 0x339c
    4c20:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4c24:	785b      	ldrb	r3, [r3, #1]
    4c26:	2b0b      	cmp	r3, #11
    4c28:	f200 846f 	bhi.w	550a <USB_EndPoint0+0x942>
    4c2c:	e8df f013 	tbh	[pc, r3, lsl #1]
    4c30:	0082000c 	.word	0x0082000c
    4c34:	00e6046d 	.word	0x00e6046d
    4c38:	013f046d 	.word	0x013f046d
    4c3c:	01ce0157 	.word	0x01ce0157
    4c40:	01ef01da 	.word	0x01ef01da
    4c44:	030e02e2 	.word	0x030e02e2
#else  
__inline uint32_t USB_ReqGetStatus (void) {
#endif
  uint32_t n, m;

  switch (SetupPacket.bmRequestType.BM.Recipient) {
    4c48:	f243 339c 	movw	r3, #13212	; 0x339c
    4c4c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4c50:	781b      	ldrb	r3, [r3, #0]
    4c52:	f003 031f 	and.w	r3, r3, #31
    4c56:	2b01      	cmp	r3, #1
    4c58:	d00f      	beq.n	4c7a <USB_EndPoint0+0xb2>
    4c5a:	2b02      	cmp	r3, #2
    4c5c:	d030      	beq.n	4cc0 <USB_EndPoint0+0xf8>
    4c5e:	2b00      	cmp	r3, #0
    4c60:	f040 8453 	bne.w	550a <USB_EndPoint0+0x942>
    case REQUEST_TO_DEVICE:
      EP0Data.pData = (uint8_t *)&USB_DeviceStatus;
    4c64:	f243 33a8 	movw	r3, #13224	; 0x33a8
    4c68:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4c6c:	f243 32b0 	movw	r2, #13232	; 0x33b0
    4c70:	f2c1 0200 	movt	r2, #4096	; 0x1000
    4c74:	601a      	str	r2, [r3, #0]
    4c76:	f000 bcd4 	b.w	5622 <USB_EndPoint0+0xa5a>
      break;
    case REQUEST_TO_INTERFACE:
      if ((USB_Configuration != 0) && (SetupPacket.wIndex.WB.L < USB_NumInterfaces)) {
    4c7a:	f243 3398 	movw	r3, #13208	; 0x3398
    4c7e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4c82:	781b      	ldrb	r3, [r3, #0]
    4c84:	2b00      	cmp	r3, #0
    4c86:	f000 8440 	beq.w	550a <USB_EndPoint0+0x942>
    4c8a:	f243 329c 	movw	r2, #13212	; 0x339c
    4c8e:	f2c1 0200 	movt	r2, #4096	; 0x1000
    4c92:	f243 33a4 	movw	r3, #13220	; 0x33a4
    4c96:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4c9a:	7912      	ldrb	r2, [r2, #4]
    4c9c:	781b      	ldrb	r3, [r3, #0]
    4c9e:	429a      	cmp	r2, r3
    4ca0:	f080 8433 	bcs.w	550a <USB_EndPoint0+0x942>
        *((__packed uint16_t *)EP0Buf) = 0;
    4ca4:	f243 3380 	movw	r3, #13184	; 0x3380
    4ca8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4cac:	f04f 0200 	mov.w	r2, #0
    4cb0:	801a      	strh	r2, [r3, #0]
    	  *((uint16_t *)EP0Buf) = 0;
        EP0Data.pData = EP0Buf;
    4cb2:	f243 32a8 	movw	r2, #13224	; 0x33a8
    4cb6:	f2c1 0200 	movt	r2, #4096	; 0x1000
    4cba:	6013      	str	r3, [r2, #0]
    4cbc:	f000 bcb1 	b.w	5622 <USB_EndPoint0+0xa5a>
      } else {
        return (FALSE);
      }
      break;
    case REQUEST_TO_ENDPOINT:
      n = SetupPacket.wIndex.WB.L & 0x8F;
    4cc0:	f243 339c 	movw	r3, #13212	; 0x339c
    4cc4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4cc8:	791a      	ldrb	r2, [r3, #4]
    4cca:	f002 038f 	and.w	r3, r2, #143	; 0x8f
      m = (n & 0x80) ? ((1 << 16) << (n & 0x0F)) : (1 << n);
    4cce:	f012 0f80 	tst.w	r2, #128	; 0x80
    4cd2:	bf1d      	ittte	ne
    4cd4:	f003 020f 	andne.w	r2, r3, #15
    4cd8:	f44f 3180 	movne.w	r1, #65536	; 0x10000
    4cdc:	fa01 f202 	lslne.w	r2, r1, r2
    4ce0:	2201      	moveq	r2, #1
    4ce2:	bf08      	it	eq
    4ce4:	409a      	lsleq	r2, r3
      if (((USB_Configuration != 0) || ((n & 0x0F) == 0)) && (USB_EndPointMask & m)) {
    4ce6:	f243 3198 	movw	r1, #13208	; 0x3398
    4cea:	f2c1 0100 	movt	r1, #4096	; 0x1000
    4cee:	7809      	ldrb	r1, [r1, #0]
    4cf0:	b919      	cbnz	r1, 4cfa <USB_EndPoint0+0x132>
    4cf2:	f013 0f0f 	tst.w	r3, #15
    4cf6:	f040 8408 	bne.w	550a <USB_EndPoint0+0x942>
    4cfa:	f243 3388 	movw	r3, #13192	; 0x3388
    4cfe:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4d02:	681b      	ldr	r3, [r3, #0]
    4d04:	421a      	tst	r2, r3
    4d06:	f000 8400 	beq.w	550a <USB_EndPoint0+0x942>
        *((__packed uint16_t *)EP0Buf) = (USB_EndPointHalt & m) ? 1 : 0;
    4d0a:	f243 3380 	movw	r3, #13184	; 0x3380
    4d0e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4d12:	f243 3194 	movw	r1, #13204	; 0x3394
    4d16:	f2c1 0100 	movt	r1, #4096	; 0x1000
    4d1a:	6809      	ldr	r1, [r1, #0]
    4d1c:	420a      	tst	r2, r1
    4d1e:	bf0c      	ite	eq
    4d20:	2200      	moveq	r2, #0
    4d22:	2201      	movne	r2, #1
    4d24:	801a      	strh	r2, [r3, #0]
    	  *((uint16_t *)EP0Buf) = (USB_EndPointHalt & m) ? 1 : 0;
        EP0Data.pData = EP0Buf;
    4d26:	f243 32a8 	movw	r2, #13224	; 0x33a8
    4d2a:	f2c1 0200 	movt	r2, #4096	; 0x1000
    4d2e:	6013      	str	r3, [r2, #0]
    4d30:	f000 bc77 	b.w	5622 <USB_EndPoint0+0xa5a>
#else
__inline uint32_t USB_ReqSetClrFeature (uint32_t sc) {
#endif
  uint32_t n, m;

  switch (SetupPacket.bmRequestType.BM.Recipient) {
    4d34:	f243 339c 	movw	r3, #13212	; 0x339c
    4d38:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4d3c:	781b      	ldrb	r3, [r3, #0]
    4d3e:	f013 031f 	ands.w	r3, r3, #31
    4d42:	d003      	beq.n	4d4c <USB_EndPoint0+0x184>
    4d44:	2b02      	cmp	r3, #2
    4d46:	f040 83e0 	bne.w	550a <USB_EndPoint0+0x942>
    4d4a:	e015      	b.n	4d78 <USB_EndPoint0+0x1b0>
    case REQUEST_TO_DEVICE:
      if (SetupPacket.wValue.W == USB_FEATURE_REMOTE_WAKEUP) {
    4d4c:	f243 339c 	movw	r3, #13212	; 0x339c
    4d50:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4d54:	885b      	ldrh	r3, [r3, #2]
    4d56:	2b01      	cmp	r3, #1
    4d58:	f040 83d7 	bne.w	550a <USB_EndPoint0+0x942>
        if (sc) {
          USB_WakeUpCfg(TRUE);
          USB_DeviceStatus |=  USB_GETSTATUS_REMOTE_WAKEUP;
        } else {
          USB_WakeUpCfg(FALSE);
    4d5c:	f04f 0000 	mov.w	r0, #0
    4d60:	f000 fd3a 	bl	57d8 <USB_WakeUpCfg>
          USB_DeviceStatus &= ~USB_GETSTATUS_REMOTE_WAKEUP;
    4d64:	f243 33b0 	movw	r3, #13232	; 0x33b0
    4d68:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4d6c:	881a      	ldrh	r2, [r3, #0]
    4d6e:	f022 0202 	bic.w	r2, r2, #2
    4d72:	801a      	strh	r2, [r3, #0]
    4d74:	f000 bc58 	b.w	5628 <USB_EndPoint0+0xa60>
      }
      break;
    case REQUEST_TO_INTERFACE:
      return (FALSE);
    case REQUEST_TO_ENDPOINT:
      n = SetupPacket.wIndex.WB.L & 0x8F;
    4d78:	f243 339c 	movw	r3, #13212	; 0x339c
    4d7c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4d80:	791b      	ldrb	r3, [r3, #4]
    4d82:	f003 008f 	and.w	r0, r3, #143	; 0x8f
      m = (n & 0x80) ? ((1 << 16) << (n & 0x0F)) : (1 << n);
    4d86:	f013 0f80 	tst.w	r3, #128	; 0x80
    4d8a:	bf1d      	ittte	ne
    4d8c:	f000 030f 	andne.w	r3, r0, #15
    4d90:	f44f 3480 	movne.w	r4, #65536	; 0x10000
    4d94:	409c      	lslne	r4, r3
    4d96:	2401      	moveq	r4, #1
    4d98:	bf08      	it	eq
    4d9a:	4084      	lsleq	r4, r0
      if ((USB_Configuration != 0) && ((n & 0x0F) != 0) && (USB_EndPointMask & m)) {
    4d9c:	f243 3398 	movw	r3, #13208	; 0x3398
    4da0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4da4:	781b      	ldrb	r3, [r3, #0]
    4da6:	2b00      	cmp	r3, #0
    4da8:	f000 83af 	beq.w	550a <USB_EndPoint0+0x942>
    4dac:	f010 0f0f 	tst.w	r0, #15
    4db0:	f000 83ab 	beq.w	550a <USB_EndPoint0+0x942>
    4db4:	f243 3388 	movw	r3, #13192	; 0x3388
    4db8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4dbc:	681b      	ldr	r3, [r3, #0]
    4dbe:	421c      	tst	r4, r3
    4dc0:	f000 83a3 	beq.w	550a <USB_EndPoint0+0x942>
        if (SetupPacket.wValue.W == USB_FEATURE_ENDPOINT_STALL) {
    4dc4:	f243 339c 	movw	r3, #13212	; 0x339c
    4dc8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4dcc:	885b      	ldrh	r3, [r3, #2]
    4dce:	2b00      	cmp	r3, #0
    4dd0:	f040 839b 	bne.w	550a <USB_EndPoint0+0x942>
          if (sc) {
            USB_SetStallEP(n);
            USB_EndPointHalt |=  m;
          } else {
            if ((USB_EndPointStall & m) != 0) {
    4dd4:	f243 3390 	movw	r3, #13200	; 0x3390
    4dd8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4ddc:	681b      	ldr	r3, [r3, #0]
    4dde:	421c      	tst	r4, r3
    4de0:	f040 8422 	bne.w	5628 <USB_EndPoint0+0xa60>
              return (TRUE);
            }
            USB_ClrStallEP(n);
    4de4:	f000 fe02 	bl	59ec <USB_ClrStallEP>
              if (CSW.dSignature == MSC_CSW_Signature) {
                USB_WriteEP(MSC_EP_IN, (uint8_t *)&CSW, sizeof(CSW));
              }
            }
#endif
            USB_EndPointHalt &= ~m;
    4de8:	f243 3394 	movw	r3, #13204	; 0x3394
    4dec:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4df0:	681a      	ldr	r2, [r3, #0]
    4df2:	ea22 0404 	bic.w	r4, r2, r4
    4df6:	601c      	str	r4, [r3, #0]
    4df8:	f000 bc16 	b.w	5628 <USB_EndPoint0+0xa60>
#else
__inline uint32_t USB_ReqSetClrFeature (uint32_t sc) {
#endif
  uint32_t n, m;

  switch (SetupPacket.bmRequestType.BM.Recipient) {
    4dfc:	f243 339c 	movw	r3, #13212	; 0x339c
    4e00:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4e04:	781b      	ldrb	r3, [r3, #0]
    4e06:	f013 031f 	ands.w	r3, r3, #31
    4e0a:	d003      	beq.n	4e14 <USB_EndPoint0+0x24c>
    4e0c:	2b02      	cmp	r3, #2
    4e0e:	f040 837c 	bne.w	550a <USB_EndPoint0+0x942>
    4e12:	e014      	b.n	4e3e <USB_EndPoint0+0x276>
    case REQUEST_TO_DEVICE:
      if (SetupPacket.wValue.W == USB_FEATURE_REMOTE_WAKEUP) {
    4e14:	f243 339c 	movw	r3, #13212	; 0x339c
    4e18:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4e1c:	885b      	ldrh	r3, [r3, #2]
    4e1e:	2b01      	cmp	r3, #1
    4e20:	f040 8373 	bne.w	550a <USB_EndPoint0+0x942>
        if (sc) {
          USB_WakeUpCfg(TRUE);
    4e24:	f04f 0001 	mov.w	r0, #1
    4e28:	f000 fcd6 	bl	57d8 <USB_WakeUpCfg>
          USB_DeviceStatus |=  USB_GETSTATUS_REMOTE_WAKEUP;
    4e2c:	f243 33b0 	movw	r3, #13232	; 0x33b0
    4e30:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4e34:	881a      	ldrh	r2, [r3, #0]
    4e36:	f042 0202 	orr.w	r2, r2, #2
    4e3a:	801a      	strh	r2, [r3, #0]
    4e3c:	e3f7      	b.n	562e <USB_EndPoint0+0xa66>
      }
      break;
    case REQUEST_TO_INTERFACE:
      return (FALSE);
    case REQUEST_TO_ENDPOINT:
      n = SetupPacket.wIndex.WB.L & 0x8F;
    4e3e:	f243 339c 	movw	r3, #13212	; 0x339c
    4e42:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4e46:	791b      	ldrb	r3, [r3, #4]
    4e48:	f003 008f 	and.w	r0, r3, #143	; 0x8f
      m = (n & 0x80) ? ((1 << 16) << (n & 0x0F)) : (1 << n);
    4e4c:	f013 0f80 	tst.w	r3, #128	; 0x80
    4e50:	bf1d      	ittte	ne
    4e52:	f000 030f 	andne.w	r3, r0, #15
    4e56:	f44f 3480 	movne.w	r4, #65536	; 0x10000
    4e5a:	409c      	lslne	r4, r3
    4e5c:	2401      	moveq	r4, #1
    4e5e:	bf08      	it	eq
    4e60:	4084      	lsleq	r4, r0
      if ((USB_Configuration != 0) && ((n & 0x0F) != 0) && (USB_EndPointMask & m)) {
    4e62:	f243 3398 	movw	r3, #13208	; 0x3398
    4e66:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4e6a:	781b      	ldrb	r3, [r3, #0]
    4e6c:	2b00      	cmp	r3, #0
    4e6e:	f000 834c 	beq.w	550a <USB_EndPoint0+0x942>
    4e72:	f010 0f0f 	tst.w	r0, #15
    4e76:	f000 8348 	beq.w	550a <USB_EndPoint0+0x942>
    4e7a:	f243 3388 	movw	r3, #13192	; 0x3388
    4e7e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4e82:	681b      	ldr	r3, [r3, #0]
    4e84:	421c      	tst	r4, r3
    4e86:	f000 8340 	beq.w	550a <USB_EndPoint0+0x942>
        if (SetupPacket.wValue.W == USB_FEATURE_ENDPOINT_STALL) {
    4e8a:	f243 339c 	movw	r3, #13212	; 0x339c
    4e8e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4e92:	885b      	ldrh	r3, [r3, #2]
    4e94:	2b00      	cmp	r3, #0
    4e96:	f040 8338 	bne.w	550a <USB_EndPoint0+0x942>
          if (sc) {
            USB_SetStallEP(n);
    4e9a:	f000 fd97 	bl	59cc <USB_SetStallEP>
            USB_EndPointHalt |=  m;
    4e9e:	f243 3394 	movw	r3, #13204	; 0x3394
    4ea2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4ea6:	681a      	ldr	r2, [r3, #0]
    4ea8:	4314      	orrs	r4, r2
    4eaa:	601c      	str	r4, [r3, #0]
    4eac:	e3bf      	b.n	562e <USB_EndPoint0+0xa66>
#if defined (  __IAR_SYSTEMS_ICC__  )
inline uint32_t USB_ReqSetAddress (void) {
#else
__inline uint32_t USB_ReqSetAddress (void) {
#endif
  switch (SetupPacket.bmRequestType.BM.Recipient) {
    4eae:	f243 339c 	movw	r3, #13212	; 0x339c
    4eb2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4eb6:	781b      	ldrb	r3, [r3, #0]
    4eb8:	f013 0f1f 	tst.w	r3, #31
    4ebc:	f040 8325 	bne.w	550a <USB_EndPoint0+0x942>
    case REQUEST_TO_DEVICE:
      USB_DeviceAddress = 0x80 | SetupPacket.wValue.WB.L;
    4ec0:	f243 338c 	movw	r3, #13196	; 0x338c
    4ec4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4ec8:	f243 329c 	movw	r2, #13212	; 0x339c
    4ecc:	f2c1 0200 	movt	r2, #4096	; 0x1000
    4ed0:	7892      	ldrb	r2, [r2, #2]
    4ed2:	f062 027f 	orn	r2, r2, #127	; 0x7f
    4ed6:	701a      	strb	r2, [r3, #0]

            case USB_REQUEST_SET_ADDRESS:
              if (!USB_ReqSetAddress()) {
                goto stall_i;
              }
              USB_StatusInStage();
    4ed8:	f7ff fe62 	bl	4ba0 <USB_StatusInStage>
              break;
    4edc:	e3ac      	b.n	5638 <USB_EndPoint0+0xa70>
__inline uint32_t USB_ReqGetDescriptor (void) {
#endif
  uint8_t  *pD;
  uint32_t len, n;

  switch (SetupPacket.bmRequestType.BM.Recipient) {
    4ede:	f243 339c 	movw	r3, #13212	; 0x339c
    4ee2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4ee6:	781b      	ldrb	r3, [r3, #0]
    4ee8:	f013 0f1f 	tst.w	r3, #31
    4eec:	f040 830d 	bne.w	550a <USB_EndPoint0+0x942>
    case REQUEST_TO_DEVICE:
      switch (SetupPacket.wValue.WB.H) {
    4ef0:	f243 339c 	movw	r3, #13212	; 0x339c
    4ef4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4ef8:	78db      	ldrb	r3, [r3, #3]
    4efa:	2b02      	cmp	r3, #2
    4efc:	d011      	beq.n	4f22 <USB_EndPoint0+0x35a>
    4efe:	2b03      	cmp	r3, #3
    4f00:	d003      	beq.n	4f0a <USB_EndPoint0+0x342>
    4f02:	2b01      	cmp	r3, #1
    4f04:	f040 8301 	bne.w	550a <USB_EndPoint0+0x942>
    4f08:	e016      	b.n	4f38 <USB_EndPoint0+0x370>
          EP0Data.pData = pD;
          len = ((USB_CONFIGURATION_DESCRIPTOR *)pD)->wTotalLength;
          break;
        case USB_STRING_DESCRIPTOR_TYPE:
          pD = (uint8_t *)USB_StringDescriptor;
          for (n = 0; n != SetupPacket.wValue.WB.L; n++) {
    4f0a:	f243 339c 	movw	r3, #13212	; 0x339c
    4f0e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4f12:	7898      	ldrb	r0, [r3, #2]
    4f14:	2800      	cmp	r0, #0
    4f16:	d134      	bne.n	4f82 <USB_EndPoint0+0x3ba>
    4f18:	f246 03e0 	movw	r3, #24800	; 0x60e0
    4f1c:	f2c0 0302 	movt	r3, #2
    4f20:	e03c      	b.n	4f9c <USB_EndPoint0+0x3d4>
          EP0Data.pData = (uint8_t *)USB_DeviceDescriptor;
          len = USB_DEVICE_DESC_SIZE;
          break;
        case USB_CONFIGURATION_DESCRIPTOR_TYPE:
          pD = (uint8_t *)USB_ConfigDescriptor;
          for (n = 0; n != SetupPacket.wValue.WB.L; n++) {
    4f22:	f243 339c 	movw	r3, #13212	; 0x339c
    4f26:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4f2a:	7898      	ldrb	r0, [r3, #2]
    4f2c:	b980      	cbnz	r0, 4f50 <USB_EndPoint0+0x388>
    4f2e:	f246 039c 	movw	r3, #24732	; 0x609c
    4f32:	f2c0 0302 	movt	r3, #2
    4f36:	e019      	b.n	4f6c <USB_EndPoint0+0x3a4>

  switch (SetupPacket.bmRequestType.BM.Recipient) {
    case REQUEST_TO_DEVICE:
      switch (SetupPacket.wValue.WB.H) {
        case USB_DEVICE_DESCRIPTOR_TYPE:
          EP0Data.pData = (uint8_t *)USB_DeviceDescriptor;
    4f38:	f243 33a8 	movw	r3, #13224	; 0x33a8
    4f3c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4f40:	f246 1248 	movw	r2, #24904	; 0x6148
    4f44:	f2c0 0202 	movt	r2, #2
    4f48:	601a      	str	r2, [r3, #0]
          len = USB_DEVICE_DESC_SIZE;
    4f4a:	f04f 0312 	mov.w	r3, #18
    4f4e:	e02f      	b.n	4fb0 <USB_EndPoint0+0x3e8>
          break;
        case USB_CONFIGURATION_DESCRIPTOR_TYPE:
          pD = (uint8_t *)USB_ConfigDescriptor;
          for (n = 0; n != SetupPacket.wValue.WB.L; n++) {
    4f50:	f04f 0200 	mov.w	r2, #0
    4f54:	f246 039c 	movw	r3, #24732	; 0x609c
    4f58:	f2c0 0302 	movt	r3, #2
            if (((USB_CONFIGURATION_DESCRIPTOR *)pD)->bLength != 0) {
    4f5c:	7819      	ldrb	r1, [r3, #0]
    4f5e:	b109      	cbz	r1, 4f64 <USB_EndPoint0+0x39c>
              pD += ((USB_CONFIGURATION_DESCRIPTOR *)pD)->wTotalLength;
    4f60:	8859      	ldrh	r1, [r3, #2]
    4f62:	185b      	adds	r3, r3, r1
          EP0Data.pData = (uint8_t *)USB_DeviceDescriptor;
          len = USB_DEVICE_DESC_SIZE;
          break;
        case USB_CONFIGURATION_DESCRIPTOR_TYPE:
          pD = (uint8_t *)USB_ConfigDescriptor;
          for (n = 0; n != SetupPacket.wValue.WB.L; n++) {
    4f64:	f102 0201 	add.w	r2, r2, #1
    4f68:	4290      	cmp	r0, r2
    4f6a:	d1f7      	bne.n	4f5c <USB_EndPoint0+0x394>
            if (((USB_CONFIGURATION_DESCRIPTOR *)pD)->bLength != 0) {
              pD += ((USB_CONFIGURATION_DESCRIPTOR *)pD)->wTotalLength;
            }
          }
          if (((USB_CONFIGURATION_DESCRIPTOR *)pD)->bLength == 0) {
    4f6c:	781a      	ldrb	r2, [r3, #0]
    4f6e:	2a00      	cmp	r2, #0
    4f70:	f000 82cb 	beq.w	550a <USB_EndPoint0+0x942>
            return (FALSE);
          }
          EP0Data.pData = pD;
    4f74:	f243 32a8 	movw	r2, #13224	; 0x33a8
    4f78:	f2c1 0200 	movt	r2, #4096	; 0x1000
    4f7c:	6013      	str	r3, [r2, #0]
          len = ((USB_CONFIGURATION_DESCRIPTOR *)pD)->wTotalLength;
    4f7e:	885b      	ldrh	r3, [r3, #2]
    4f80:	e016      	b.n	4fb0 <USB_EndPoint0+0x3e8>
          break;
        case USB_STRING_DESCRIPTOR_TYPE:
          pD = (uint8_t *)USB_StringDescriptor;
          for (n = 0; n != SetupPacket.wValue.WB.L; n++) {
    4f82:	f04f 0200 	mov.w	r2, #0
    4f86:	f246 03e0 	movw	r3, #24800	; 0x60e0
    4f8a:	f2c0 0302 	movt	r3, #2
            if (((USB_STRING_DESCRIPTOR *)pD)->bLength != 0) {
    4f8e:	7819      	ldrb	r1, [r3, #0]
    4f90:	b101      	cbz	r1, 4f94 <USB_EndPoint0+0x3cc>
              pD += ((USB_STRING_DESCRIPTOR *)pD)->bLength;
    4f92:	185b      	adds	r3, r3, r1
          EP0Data.pData = pD;
          len = ((USB_CONFIGURATION_DESCRIPTOR *)pD)->wTotalLength;
          break;
        case USB_STRING_DESCRIPTOR_TYPE:
          pD = (uint8_t *)USB_StringDescriptor;
          for (n = 0; n != SetupPacket.wValue.WB.L; n++) {
    4f94:	f102 0201 	add.w	r2, r2, #1
    4f98:	4282      	cmp	r2, r0
    4f9a:	d1f8      	bne.n	4f8e <USB_EndPoint0+0x3c6>
            if (((USB_STRING_DESCRIPTOR *)pD)->bLength != 0) {
              pD += ((USB_STRING_DESCRIPTOR *)pD)->bLength;
            }
          }
          if (((USB_STRING_DESCRIPTOR *)pD)->bLength == 0) {
    4f9c:	781a      	ldrb	r2, [r3, #0]
    4f9e:	2a00      	cmp	r2, #0
    4fa0:	f000 82b3 	beq.w	550a <USB_EndPoint0+0x942>
            return (FALSE);
          }
          EP0Data.pData = pD;
    4fa4:	f243 32a8 	movw	r2, #13224	; 0x33a8
    4fa8:	f2c1 0200 	movt	r2, #4096	; 0x1000
    4fac:	6013      	str	r3, [r2, #0]
          len = ((USB_STRING_DESCRIPTOR *)EP0Data.pData)->bLength;
    4fae:	781b      	ldrb	r3, [r3, #0]
//      break;
    default:
      return (FALSE);
  }

  if (EP0Data.Count > len) {
    4fb0:	f243 32a8 	movw	r2, #13224	; 0x33a8
    4fb4:	f2c1 0200 	movt	r2, #4096	; 0x1000
    4fb8:	8892      	ldrh	r2, [r2, #4]
    4fba:	429a      	cmp	r2, r3
    4fbc:	f240 833a 	bls.w	5634 <USB_EndPoint0+0xa6c>
    EP0Data.Count = len;
    4fc0:	f243 32a8 	movw	r2, #13224	; 0x33a8
    4fc4:	f2c1 0200 	movt	r2, #4096	; 0x1000
    4fc8:	8093      	strh	r3, [r2, #4]
    4fca:	e333      	b.n	5634 <USB_EndPoint0+0xa6c>
              }
              USB_DataInStage();
              break;

            case USB_REQUEST_SET_DESCRIPTOR:
/*stall_o:*/  USB_SetStallEP(0x00);            /* not supported */
    4fcc:	f04f 0000 	mov.w	r0, #0
    4fd0:	f000 fcfc 	bl	59cc <USB_SetStallEP>
              EP0Data.Count = 0;
    4fd4:	f243 33a8 	movw	r3, #13224	; 0x33a8
    4fd8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4fdc:	f04f 0200 	mov.w	r2, #0
    4fe0:	809a      	strh	r2, [r3, #4]
              break;
    4fe2:	e329      	b.n	5638 <USB_EndPoint0+0xa70>
#if defined (  __IAR_SYSTEMS_ICC__  )
inline uint32_t USB_ReqGetConfiguration (void) {
#else
__inline uint32_t USB_ReqGetConfiguration (void) {
#endif
  switch (SetupPacket.bmRequestType.BM.Recipient) {
    4fe4:	f243 339c 	movw	r3, #13212	; 0x339c
    4fe8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4fec:	781b      	ldrb	r3, [r3, #0]
    4fee:	f013 0f1f 	tst.w	r3, #31
    4ff2:	f040 828a 	bne.w	550a <USB_EndPoint0+0x942>
    case REQUEST_TO_DEVICE:
      EP0Data.pData = &USB_Configuration;
    4ff6:	f243 33a8 	movw	r3, #13224	; 0x33a8
    4ffa:	f2c1 0300 	movt	r3, #4096	; 0x1000
    4ffe:	f243 3298 	movw	r2, #13208	; 0x3398
    5002:	f2c1 0200 	movt	r2, #4096	; 0x1000
    5006:	601a      	str	r2, [r3, #0]

            case USB_REQUEST_GET_CONFIGURATION:
              if (!USB_ReqGetConfiguration()) {
                goto stall_i;
              }
              USB_DataInStage();
    5008:	f7ff fda2 	bl	4b50 <USB_DataInStage>
              break;
    500c:	e314      	b.n	5638 <USB_EndPoint0+0xa70>
  USB_COMMON_DESCRIPTOR *pD;
  uint32_t alt = 0;
  uint32_t n, m;
  uint32_t tmp;

  switch (SetupPacket.bmRequestType.BM.Recipient) {
    500e:	f243 339c 	movw	r3, #13212	; 0x339c
    5012:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5016:	781b      	ldrb	r3, [r3, #0]
    5018:	f013 0f1f 	tst.w	r3, #31
    501c:	f040 8275 	bne.w	550a <USB_EndPoint0+0x942>
    case REQUEST_TO_DEVICE:

      if (SetupPacket.wValue.WB.L) {
    5020:	f243 339c 	movw	r3, #13212	; 0x339c
    5024:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5028:	789b      	ldrb	r3, [r3, #2]
    502a:	2b00      	cmp	r3, #0
    502c:	d17e      	bne.n	512c <USB_EndPoint0+0x564>
    502e:	e094      	b.n	515a <USB_EndPoint0+0x592>
        pD = (USB_COMMON_DESCRIPTOR *)USB_ConfigDescriptor;
        while (pD->bLength) {
          switch (pD->bDescriptorType) {
    5030:	7863      	ldrb	r3, [r4, #1]
    5032:	2b04      	cmp	r3, #4
    5034:	d059      	beq.n	50ea <USB_EndPoint0+0x522>
    5036:	2b05      	cmp	r3, #5
    5038:	d05a      	beq.n	50f0 <USB_EndPoint0+0x528>
    503a:	2b02      	cmp	r3, #2
    503c:	d173      	bne.n	5126 <USB_EndPoint0+0x55e>
            case USB_CONFIGURATION_DESCRIPTOR_TYPE:
              if (((USB_CONFIGURATION_DESCRIPTOR *)pD)->bConfigurationValue == SetupPacket.wValue.WB.L) {
    503e:	7962      	ldrb	r2, [r4, #5]
    5040:	f243 339c 	movw	r3, #13212	; 0x339c
    5044:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5048:	789b      	ldrb	r3, [r3, #2]
    504a:	4293      	cmp	r3, r2
                  USB_DeviceStatus &= ~USB_GETSTATUS_SELF_POWERED;
                }
              } else {
//                (uint8_t *)pD += ((USB_CONFIGURATION_DESCRIPTOR *)pD)->wTotalLength;
            	  tmp = (uint32_t)pD;
            	  tmp += ((USB_CONFIGURATION_DESCRIPTOR *)pD)->wTotalLength;
    504c:	bf1c      	itt	ne
    504e:	8863      	ldrhne	r3, [r4, #2]
    5050:	18e4      	addne	r4, r4, r3
      if (SetupPacket.wValue.WB.L) {
        pD = (USB_COMMON_DESCRIPTOR *)USB_ConfigDescriptor;
        while (pD->bLength) {
          switch (pD->bDescriptorType) {
            case USB_CONFIGURATION_DESCRIPTOR_TYPE:
              if (((USB_CONFIGURATION_DESCRIPTOR *)pD)->bConfigurationValue == SetupPacket.wValue.WB.L) {
    5052:	d17d      	bne.n	5150 <USB_EndPoint0+0x588>
                USB_Configuration = SetupPacket.wValue.WB.L;
    5054:	f243 3398 	movw	r3, #13208	; 0x3398
    5058:	f2c1 0300 	movt	r3, #4096	; 0x1000
    505c:	701a      	strb	r2, [r3, #0]
                USB_NumInterfaces = ((USB_CONFIGURATION_DESCRIPTOR *)pD)->bNumInterfaces;
    505e:	f243 33a4 	movw	r3, #13220	; 0x33a4
    5062:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5066:	7922      	ldrb	r2, [r4, #4]
    5068:	701a      	strb	r2, [r3, #0]
                for (n = 0; n < USB_IF_NUM; n++) {
                  USB_AltSetting[n] = 0;
    506a:	f243 337c 	movw	r3, #13180	; 0x337c
    506e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5072:	f04f 0200 	mov.w	r2, #0
    5076:	701a      	strb	r2, [r3, #0]
    5078:	705a      	strb	r2, [r3, #1]
    507a:	709a      	strb	r2, [r3, #2]
    507c:	70da      	strb	r2, [r3, #3]
    507e:	4645      	mov	r5, r8
                }
                for (n = 1; n < 16; n++) {
                  if (USB_EndPointMask & (1 << n)) {
    5080:	462f      	mov	r7, r5
    5082:	fa08 f205 	lsl.w	r2, r8, r5
    5086:	6833      	ldr	r3, [r6, #0]
    5088:	421a      	tst	r2, r3
    508a:	d002      	beq.n	5092 <USB_EndPoint0+0x4ca>
                    USB_DisableEP(n);
    508c:	4628      	mov	r0, r5
    508e:	f000 fc7f 	bl	5990 <USB_DisableEP>
                  }
                  if (USB_EndPointMask & ((1 << 16) << n)) {
    5092:	fa09 f707 	lsl.w	r7, r9, r7
    5096:	6833      	ldr	r3, [r6, #0]
    5098:	421f      	tst	r7, r3
    509a:	d003      	beq.n	50a4 <USB_EndPoint0+0x4dc>
                    USB_DisableEP(n | 0x80);
    509c:	f045 0080 	orr.w	r0, r5, #128	; 0x80
    50a0:	f000 fc76 	bl	5990 <USB_DisableEP>
                USB_Configuration = SetupPacket.wValue.WB.L;
                USB_NumInterfaces = ((USB_CONFIGURATION_DESCRIPTOR *)pD)->bNumInterfaces;
                for (n = 0; n < USB_IF_NUM; n++) {
                  USB_AltSetting[n] = 0;
                }
                for (n = 1; n < 16; n++) {
    50a4:	f105 0501 	add.w	r5, r5, #1
    50a8:	2d10      	cmp	r5, #16
    50aa:	d1e9      	bne.n	5080 <USB_EndPoint0+0x4b8>
                  }
                  if (USB_EndPointMask & ((1 << 16) << n)) {
                    USB_DisableEP(n | 0x80);
                  }
                }
                USB_EndPointMask = 0x00010001;
    50ac:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    50b0:	6033      	str	r3, [r6, #0]
                USB_EndPointHalt = 0x00000000;
    50b2:	f243 3394 	movw	r3, #13204	; 0x3394
    50b6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    50ba:	f04f 0200 	mov.w	r2, #0
    50be:	601a      	str	r2, [r3, #0]
                USB_EndPointStall= 0x00000000;
    50c0:	f243 3390 	movw	r3, #13200	; 0x3390
    50c4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    50c8:	601a      	str	r2, [r3, #0]
                USB_Configure(TRUE);
    50ca:	4640      	mov	r0, r8
    50cc:	f000 fbfc 	bl	58c8 <USB_Configure>
                if (((USB_CONFIGURATION_DESCRIPTOR *)pD)->bmAttributes & USB_CONFIG_POWERED_MASK) {
    50d0:	79e3      	ldrb	r3, [r4, #7]
    50d2:	f013 0f40 	tst.w	r3, #64	; 0x40
                  USB_DeviceStatus |=  USB_GETSTATUS_SELF_POWERED;
    50d6:	f8ba 3000 	ldrh.w	r3, [sl]
    50da:	bf14      	ite	ne
    50dc:	f043 0301 	orrne.w	r3, r3, #1
                } else {
                  USB_DeviceStatus &= ~USB_GETSTATUS_SELF_POWERED;
    50e0:	f023 0301 	biceq.w	r3, r3, #1
    50e4:	f8aa 3000 	strh.w	r3, [sl]
    50e8:	e01d      	b.n	5126 <USB_EndPoint0+0x55e>
            	  pD = (USB_COMMON_DESCRIPTOR *)tmp;
            	  continue;
              }
              break;
            case USB_INTERFACE_DESCRIPTOR_TYPE:
              alt = ((USB_INTERFACE_DESCRIPTOR *)pD)->bAlternateSetting;
    50ea:	f894 b003 	ldrb.w	fp, [r4, #3]
    50ee:	e01a      	b.n	5126 <USB_EndPoint0+0x55e>
              break;
            case USB_ENDPOINT_DESCRIPTOR_TYPE:
              if (alt == 0) {
    50f0:	f1bb 0f00 	cmp.w	fp, #0
    50f4:	d117      	bne.n	5126 <USB_EndPoint0+0x55e>
                n = ((USB_ENDPOINT_DESCRIPTOR *)pD)->bEndpointAddress & 0x8F;
    50f6:	78a3      	ldrb	r3, [r4, #2]
    50f8:	f003 058f 	and.w	r5, r3, #143	; 0x8f
                m = (n & 0x80) ? ((1 << 16) << (n & 0x0F)) : (1 << n);
    50fc:	f013 0f80 	tst.w	r3, #128	; 0x80
    5100:	bf1a      	itte	ne
    5102:	f005 030f 	andne.w	r3, r5, #15
    5106:	fa09 f303 	lslne.w	r3, r9, r3
    510a:	fa08 f305 	lsleq.w	r3, r8, r5
                USB_EndPointMask |= m;
    510e:	6832      	ldr	r2, [r6, #0]
    5110:	4313      	orrs	r3, r2
    5112:	6033      	str	r3, [r6, #0]
                USB_ConfigEP((USB_ENDPOINT_DESCRIPTOR *)pD);
    5114:	4620      	mov	r0, r4
    5116:	f000 fc01 	bl	591c <USB_ConfigEP>
                USB_EnableEP(n);
    511a:	4628      	mov	r0, r5
    511c:	f000 fc2a 	bl	5974 <USB_EnableEP>
                USB_ResetEP(n);
    5120:	4628      	mov	r0, r5
    5122:	f000 fc45 	bl	59b0 <USB_ResetEP>
              }
              break;
          }
//          (uint8_t *)pD += pD->bLength;
			tmp = (uint32_t)pD;
			tmp += pD->bLength;
    5126:	7823      	ldrb	r3, [r4, #0]
    5128:	18e4      	adds	r4, r4, r3
    512a:	e011      	b.n	5150 <USB_EndPoint0+0x588>
  uint32_t tmp;

  switch (SetupPacket.bmRequestType.BM.Recipient) {
    case REQUEST_TO_DEVICE:

      if (SetupPacket.wValue.WB.L) {
    512c:	f04f 0b00 	mov.w	fp, #0
    5130:	f246 049c 	movw	r4, #24732	; 0x609c
    5134:	f2c0 0402 	movt	r4, #2
              break;
            case USB_ENDPOINT_DESCRIPTOR_TYPE:
              if (alt == 0) {
                n = ((USB_ENDPOINT_DESCRIPTOR *)pD)->bEndpointAddress & 0x8F;
                m = (n & 0x80) ? ((1 << 16) << (n & 0x0F)) : (1 << n);
                USB_EndPointMask |= m;
    5138:	f243 3688 	movw	r6, #13192	; 0x3388
    513c:	f2c1 0600 	movt	r6, #4096	; 0x1000
              alt = ((USB_INTERFACE_DESCRIPTOR *)pD)->bAlternateSetting;
              break;
            case USB_ENDPOINT_DESCRIPTOR_TYPE:
              if (alt == 0) {
                n = ((USB_ENDPOINT_DESCRIPTOR *)pD)->bEndpointAddress & 0x8F;
                m = (n & 0x80) ? ((1 << 16) << (n & 0x0F)) : (1 << n);
    5140:	f04f 0801 	mov.w	r8, #1
    5144:	f44f 3980 	mov.w	r9, #65536	; 0x10000
                USB_EndPointStall= 0x00000000;
                USB_Configure(TRUE);
                if (((USB_CONFIGURATION_DESCRIPTOR *)pD)->bmAttributes & USB_CONFIG_POWERED_MASK) {
                  USB_DeviceStatus |=  USB_GETSTATUS_SELF_POWERED;
                } else {
                  USB_DeviceStatus &= ~USB_GETSTATUS_SELF_POWERED;
    5148:	f243 3ab0 	movw	sl, #13232	; 0x33b0
    514c:	f2c1 0a00 	movt	sl, #4096	; 0x1000
  switch (SetupPacket.bmRequestType.BM.Recipient) {
    case REQUEST_TO_DEVICE:

      if (SetupPacket.wValue.WB.L) {
        pD = (USB_COMMON_DESCRIPTOR *)USB_ConfigDescriptor;
        while (pD->bLength) {
    5150:	7823      	ldrb	r3, [r4, #0]
    5152:	2b00      	cmp	r3, #0
    5154:	f47f af6c 	bne.w	5030 <USB_EndPoint0+0x468>
    5158:	e03a      	b.n	51d0 <USB_EndPoint0+0x608>
			tmp += pD->bLength;
			pD = (USB_COMMON_DESCRIPTOR *)tmp;
        }
      }
      else {
        USB_Configuration = 0;
    515a:	f243 3398 	movw	r3, #13208	; 0x3398
    515e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5162:	f04f 0200 	mov.w	r2, #0
    5166:	701a      	strb	r2, [r3, #0]
        for (n = 1; n < 16; n++) {
    5168:	f04f 0401 	mov.w	r4, #1
          if (USB_EndPointMask & (1 << n)) {
    516c:	4627      	mov	r7, r4
    516e:	f243 3588 	movw	r5, #13192	; 0x3388
    5172:	f2c1 0500 	movt	r5, #4096	; 0x1000
            USB_DisableEP(n);
          }
          if (USB_EndPointMask & ((1 << 16) << n)) {
    5176:	f44f 3880 	mov.w	r8, #65536	; 0x10000
        }
      }
      else {
        USB_Configuration = 0;
        for (n = 1; n < 16; n++) {
          if (USB_EndPointMask & (1 << n)) {
    517a:	4626      	mov	r6, r4
    517c:	fa07 f204 	lsl.w	r2, r7, r4
    5180:	682b      	ldr	r3, [r5, #0]
    5182:	421a      	tst	r2, r3
    5184:	d002      	beq.n	518c <USB_EndPoint0+0x5c4>
            USB_DisableEP(n);
    5186:	4620      	mov	r0, r4
    5188:	f000 fc02 	bl	5990 <USB_DisableEP>
          }
          if (USB_EndPointMask & ((1 << 16) << n)) {
    518c:	fa08 f606 	lsl.w	r6, r8, r6
    5190:	682b      	ldr	r3, [r5, #0]
    5192:	421e      	tst	r6, r3
    5194:	d003      	beq.n	519e <USB_EndPoint0+0x5d6>
            USB_DisableEP(n | 0x80);
    5196:	f044 0080 	orr.w	r0, r4, #128	; 0x80
    519a:	f000 fbf9 	bl	5990 <USB_DisableEP>
			pD = (USB_COMMON_DESCRIPTOR *)tmp;
        }
      }
      else {
        USB_Configuration = 0;
        for (n = 1; n < 16; n++) {
    519e:	f104 0401 	add.w	r4, r4, #1
    51a2:	2c10      	cmp	r4, #16
    51a4:	d1e9      	bne.n	517a <USB_EndPoint0+0x5b2>
          }
          if (USB_EndPointMask & ((1 << 16) << n)) {
            USB_DisableEP(n | 0x80);
          }
        }
        USB_EndPointMask  = 0x00010001;
    51a6:	f243 3388 	movw	r3, #13192	; 0x3388
    51aa:	f2c1 0300 	movt	r3, #4096	; 0x1000
    51ae:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    51b2:	601a      	str	r2, [r3, #0]
        USB_EndPointHalt  = 0x00000000;
    51b4:	f243 3394 	movw	r3, #13204	; 0x3394
    51b8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    51bc:	f04f 0000 	mov.w	r0, #0
    51c0:	6018      	str	r0, [r3, #0]
        USB_EndPointStall = 0x00000000;
    51c2:	f243 3390 	movw	r3, #13200	; 0x3390
    51c6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    51ca:	6018      	str	r0, [r3, #0]
        USB_Configure(FALSE);
    51cc:	f000 fb7c 	bl	58c8 <USB_Configure>
      }

      if (USB_Configuration != SetupPacket.wValue.WB.L) {
    51d0:	f243 329c 	movw	r2, #13212	; 0x339c
    51d4:	f2c1 0200 	movt	r2, #4096	; 0x1000
    51d8:	f243 3398 	movw	r3, #13208	; 0x3398
    51dc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    51e0:	7892      	ldrb	r2, [r2, #2]
    51e2:	781b      	ldrb	r3, [r3, #0]
    51e4:	429a      	cmp	r2, r3
    51e6:	f040 8190 	bne.w	550a <USB_EndPoint0+0x942>

            case USB_REQUEST_SET_CONFIGURATION:
              if (!USB_ReqSetConfiguration()) {
                goto stall_i;
              }
              USB_StatusInStage();
    51ea:	f7ff fcd9 	bl	4ba0 <USB_StatusInStage>
#if USB_CONFIGURE_EVENT
              USB_Configure_Event();
    51ee:	f000 fd27 	bl	5c40 <USB_Configure_Event>
#endif
              break;
    51f2:	e221      	b.n	5638 <USB_EndPoint0+0xa70>
#if defined (  __IAR_SYSTEMS_ICC__  )
inline uint32_t USB_ReqGetInterface (void) {
#else
__inline uint32_t USB_ReqGetInterface (void) {
#endif
  switch (SetupPacket.bmRequestType.BM.Recipient) {
    51f4:	f243 339c 	movw	r3, #13212	; 0x339c
    51f8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    51fc:	781b      	ldrb	r3, [r3, #0]
    51fe:	f003 031f 	and.w	r3, r3, #31
    5202:	2b01      	cmp	r3, #1
    5204:	f040 8181 	bne.w	550a <USB_EndPoint0+0x942>
    case REQUEST_TO_INTERFACE:
      if ((USB_Configuration != 0) && (SetupPacket.wIndex.WB.L < USB_NumInterfaces)) {
    5208:	f243 3398 	movw	r3, #13208	; 0x3398
    520c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5210:	781b      	ldrb	r3, [r3, #0]
    5212:	2b00      	cmp	r3, #0
    5214:	f000 8179 	beq.w	550a <USB_EndPoint0+0x942>
    5218:	f243 339c 	movw	r3, #13212	; 0x339c
    521c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5220:	7919      	ldrb	r1, [r3, #4]
    5222:	f243 33a4 	movw	r3, #13220	; 0x33a4
    5226:	f2c1 0300 	movt	r3, #4096	; 0x1000
    522a:	781b      	ldrb	r3, [r3, #0]
    522c:	428b      	cmp	r3, r1
    522e:	f240 816c 	bls.w	550a <USB_EndPoint0+0x942>
        EP0Data.pData = USB_AltSetting + SetupPacket.wIndex.WB.L;
    5232:	f243 33a8 	movw	r3, #13224	; 0x33a8
    5236:	f2c1 0300 	movt	r3, #4096	; 0x1000
    523a:	f243 327c 	movw	r2, #13180	; 0x337c
    523e:	f2c1 0200 	movt	r2, #4096	; 0x1000
    5242:	188a      	adds	r2, r1, r2
    5244:	601a      	str	r2, [r3, #0]

            case USB_REQUEST_GET_INTERFACE:
              if (!USB_ReqGetInterface()) {
                goto stall_i;
              }
              USB_DataInStage();
    5246:	f7ff fc83 	bl	4b50 <USB_DataInStage>
              break;
    524a:	e1f5      	b.n	5638 <USB_EndPoint0+0xa70>
  uint32_t ifn = 0, alt = 0, old = 0, msk = 0;
  uint32_t n, m;
  uint32_t set;
  uint32_t tmp;

  switch (SetupPacket.bmRequestType.BM.Recipient) {
    524c:	f243 339c 	movw	r3, #13212	; 0x339c
    5250:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5254:	781b      	ldrb	r3, [r3, #0]
    5256:	f003 031f 	and.w	r3, r3, #31
    525a:	2b01      	cmp	r3, #1
			tmp += pD->bLength;
			pD = (USB_COMMON_DESCRIPTOR *)tmp;
      }
      break;
    default:
      return (FALSE);
    525c:	bf18      	it	ne
    525e:	2600      	movne	r6, #0
  uint32_t ifn = 0, alt = 0, old = 0, msk = 0;
  uint32_t n, m;
  uint32_t set;
  uint32_t tmp;

  switch (SetupPacket.bmRequestType.BM.Recipient) {
    5260:	f040 80ac 	bne.w	53bc <USB_EndPoint0+0x7f4>
    case REQUEST_TO_INTERFACE:
      if (USB_Configuration == 0) return (FALSE);
    5264:	f243 3398 	movw	r3, #13208	; 0x3398
    5268:	f2c1 0300 	movt	r3, #4096	; 0x1000
    526c:	781b      	ldrb	r3, [r3, #0]
    526e:	2b00      	cmp	r3, #0
    5270:	f000 814b 	beq.w	550a <USB_EndPoint0+0x942>
    5274:	f04f 0600 	mov.w	r6, #0
    5278:	46b2      	mov	sl, r6
    527a:	9601      	str	r6, [sp, #4]
    527c:	4637      	mov	r7, r6
    527e:	4635      	mov	r5, r6
    5280:	f246 049c 	movw	r4, #24732	; 0x609c
    5284:	f2c0 0402 	movt	r4, #2
            ifn = ((USB_INTERFACE_DESCRIPTOR *)pD)->bInterfaceNumber;
            alt = ((USB_INTERFACE_DESCRIPTOR *)pD)->bAlternateSetting;
            msk = 0;
            if ((ifn == SetupPacket.wIndex.WB.L) && (alt == SetupPacket.wValue.WB.L)) {
              set = TRUE;
              old = USB_AltSetting[ifn];
    5288:	f243 337c 	movw	r3, #13180	; 0x337c
    528c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5290:	9302      	str	r3, [sp, #8]
                USB_EnableEP(n);
                USB_ResetEP(n);
                msk |= m;
              }
              else if ((alt == old) && ((msk & m) == 0)) {
                USB_EndPointMask &= ~m;
    5292:	f243 3888 	movw	r8, #13192	; 0x3388
    5296:	f2c1 0800 	movt	r8, #4096	; 0x1000
                USB_EndPointHalt &= ~m;
    529a:	f243 3994 	movw	r9, #13204	; 0x3394
    529e:	f2c1 0900 	movt	r9, #4096	; 0x1000
    52a2:	e087      	b.n	53b4 <USB_EndPoint0+0x7ec>
    case REQUEST_TO_INTERFACE:
      if (USB_Configuration == 0) return (FALSE);
      set = FALSE;
      pD  = (USB_COMMON_DESCRIPTOR *)USB_ConfigDescriptor;
      while (pD->bLength) {
        switch (pD->bDescriptorType) {
    52a4:	7863      	ldrb	r3, [r4, #1]
    52a6:	2b04      	cmp	r3, #4
    52a8:	d00f      	beq.n	52ca <USB_EndPoint0+0x702>
    52aa:	2b05      	cmp	r3, #5
    52ac:	d02e      	beq.n	530c <USB_EndPoint0+0x744>
    52ae:	2b02      	cmp	r3, #2
    52b0:	d17e      	bne.n	53b0 <USB_EndPoint0+0x7e8>
          case USB_CONFIGURATION_DESCRIPTOR_TYPE:
            if (((USB_CONFIGURATION_DESCRIPTOR *)pD)->bConfigurationValue != USB_Configuration) {
    52b2:	f243 3398 	movw	r3, #13208	; 0x3398
    52b6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    52ba:	7962      	ldrb	r2, [r4, #5]
    52bc:	781b      	ldrb	r3, [r3, #0]
    52be:	429a      	cmp	r2, r3
//              (uint8_t *)pD += ((USB_CONFIGURATION_DESCRIPTOR *)pD)->wTotalLength;
            	tmp = (uint32_t)pD;
            	tmp += ((USB_CONFIGURATION_DESCRIPTOR *)pD)->wTotalLength;
    52c0:	bf1c      	itt	ne
    52c2:	8863      	ldrhne	r3, [r4, #2]
    52c4:	18e4      	addne	r4, r4, r3
      set = FALSE;
      pD  = (USB_COMMON_DESCRIPTOR *)USB_ConfigDescriptor;
      while (pD->bLength) {
        switch (pD->bDescriptorType) {
          case USB_CONFIGURATION_DESCRIPTOR_TYPE:
            if (((USB_CONFIGURATION_DESCRIPTOR *)pD)->bConfigurationValue != USB_Configuration) {
    52c6:	d175      	bne.n	53b4 <USB_EndPoint0+0x7ec>
    52c8:	e072      	b.n	53b0 <USB_EndPoint0+0x7e8>

              continue;
            }
            break;
          case USB_INTERFACE_DESCRIPTOR_TYPE:
            ifn = ((USB_INTERFACE_DESCRIPTOR *)pD)->bInterfaceNumber;
    52ca:	78a5      	ldrb	r5, [r4, #2]
            alt = ((USB_INTERFACE_DESCRIPTOR *)pD)->bAlternateSetting;
    52cc:	78e2      	ldrb	r2, [r4, #3]
    52ce:	4617      	mov	r7, r2
            msk = 0;
            if ((ifn == SetupPacket.wIndex.WB.L) && (alt == SetupPacket.wValue.WB.L)) {
    52d0:	f243 339c 	movw	r3, #13212	; 0x339c
    52d4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    52d8:	791b      	ldrb	r3, [r3, #4]
    52da:	429d      	cmp	r5, r3
            }
            break;
          case USB_INTERFACE_DESCRIPTOR_TYPE:
            ifn = ((USB_INTERFACE_DESCRIPTOR *)pD)->bInterfaceNumber;
            alt = ((USB_INTERFACE_DESCRIPTOR *)pD)->bAlternateSetting;
            msk = 0;
    52dc:	bf18      	it	ne
    52de:	f04f 0a00 	movne.w	sl, #0
            if ((ifn == SetupPacket.wIndex.WB.L) && (alt == SetupPacket.wValue.WB.L)) {
    52e2:	d165      	bne.n	53b0 <USB_EndPoint0+0x7e8>
    52e4:	f243 339c 	movw	r3, #13212	; 0x339c
    52e8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    52ec:	789b      	ldrb	r3, [r3, #2]
    52ee:	429a      	cmp	r2, r3
            }
            break;
          case USB_INTERFACE_DESCRIPTOR_TYPE:
            ifn = ((USB_INTERFACE_DESCRIPTOR *)pD)->bInterfaceNumber;
            alt = ((USB_INTERFACE_DESCRIPTOR *)pD)->bAlternateSetting;
            msk = 0;
    52f0:	bf18      	it	ne
    52f2:	f04f 0a00 	movne.w	sl, #0
            if ((ifn == SetupPacket.wIndex.WB.L) && (alt == SetupPacket.wValue.WB.L)) {
    52f6:	d15b      	bne.n	53b0 <USB_EndPoint0+0x7e8>
              set = TRUE;
              old = USB_AltSetting[ifn];
    52f8:	9b02      	ldr	r3, [sp, #8]
    52fa:	5d5b      	ldrb	r3, [r3, r5]
    52fc:	9301      	str	r3, [sp, #4]
              USB_AltSetting[ifn] = (uint8_t)alt;
    52fe:	9b02      	ldr	r3, [sp, #8]
    5300:	555a      	strb	r2, [r3, r5]
          case USB_INTERFACE_DESCRIPTOR_TYPE:
            ifn = ((USB_INTERFACE_DESCRIPTOR *)pD)->bInterfaceNumber;
            alt = ((USB_INTERFACE_DESCRIPTOR *)pD)->bAlternateSetting;
            msk = 0;
            if ((ifn == SetupPacket.wIndex.WB.L) && (alt == SetupPacket.wValue.WB.L)) {
              set = TRUE;
    5302:	f04f 0601 	mov.w	r6, #1
            }
            break;
          case USB_INTERFACE_DESCRIPTOR_TYPE:
            ifn = ((USB_INTERFACE_DESCRIPTOR *)pD)->bInterfaceNumber;
            alt = ((USB_INTERFACE_DESCRIPTOR *)pD)->bAlternateSetting;
            msk = 0;
    5306:	f04f 0a00 	mov.w	sl, #0
    530a:	e051      	b.n	53b0 <USB_EndPoint0+0x7e8>
              old = USB_AltSetting[ifn];
              USB_AltSetting[ifn] = (uint8_t)alt;
            }
            break;
          case USB_ENDPOINT_DESCRIPTOR_TYPE:
            if (ifn == SetupPacket.wIndex.WB.L) {
    530c:	f243 339c 	movw	r3, #13212	; 0x339c
    5310:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5314:	791b      	ldrb	r3, [r3, #4]
    5316:	42ab      	cmp	r3, r5
    5318:	d14a      	bne.n	53b0 <USB_EndPoint0+0x7e8>
              n = ((USB_ENDPOINT_DESCRIPTOR *)pD)->bEndpointAddress & 0x8F;
    531a:	78a3      	ldrb	r3, [r4, #2]
    531c:	f003 028f 	and.w	r2, r3, #143	; 0x8f
    5320:	9200      	str	r2, [sp, #0]
              m = (n & 0x80) ? ((1 << 16) << (n & 0x0F)) : (1 << n);
    5322:	f013 0f80 	tst.w	r3, #128	; 0x80
    5326:	bf19      	ittee	ne
    5328:	f002 030f 	andne.w	r3, r2, #15
    532c:	f44f 3b80 	movne.w	fp, #65536	; 0x10000
    5330:	f04f 0b01 	moveq.w	fp, #1
    5334:	9b00      	ldreq	r3, [sp, #0]
    5336:	fa0b fb03 	lsl.w	fp, fp, r3
              if (alt == SetupPacket.wValue.WB.L) {
    533a:	f243 339c 	movw	r3, #13212	; 0x339c
    533e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5342:	789b      	ldrb	r3, [r3, #2]
    5344:	9303      	str	r3, [sp, #12]
    5346:	42bb      	cmp	r3, r7
    5348:	d118      	bne.n	537c <USB_EndPoint0+0x7b4>
                USB_EndPointMask |=  m;
    534a:	f8d8 3000 	ldr.w	r3, [r8]
    534e:	ea4b 0303 	orr.w	r3, fp, r3
    5352:	f8c8 3000 	str.w	r3, [r8]
                USB_EndPointHalt &= ~m;
    5356:	f8d9 3000 	ldr.w	r3, [r9]
    535a:	ea23 030b 	bic.w	r3, r3, fp
    535e:	f8c9 3000 	str.w	r3, [r9]
                USB_ConfigEP((USB_ENDPOINT_DESCRIPTOR *)pD);
    5362:	4620      	mov	r0, r4
    5364:	f000 fada 	bl	591c <USB_ConfigEP>
                USB_EnableEP(n);
    5368:	9800      	ldr	r0, [sp, #0]
    536a:	f000 fb03 	bl	5974 <USB_EnableEP>
                USB_ResetEP(n);
    536e:	9800      	ldr	r0, [sp, #0]
    5370:	f000 fb1e 	bl	59b0 <USB_ResetEP>
                msk |= m;
    5374:	ea4a 0a0b 	orr.w	sl, sl, fp
    5378:	9f03      	ldr	r7, [sp, #12]
    537a:	e019      	b.n	53b0 <USB_EndPoint0+0x7e8>
              }
              else if ((alt == old) && ((msk & m) == 0)) {
    537c:	9a01      	ldr	r2, [sp, #4]
    537e:	4297      	cmp	r7, r2
    5380:	d116      	bne.n	53b0 <USB_EndPoint0+0x7e8>
    5382:	ea1b 0f0a 	tst.w	fp, sl
    5386:	d112      	bne.n	53ae <USB_EndPoint0+0x7e6>
                USB_EndPointMask &= ~m;
    5388:	ea6f 0b0b 	mvn.w	fp, fp
    538c:	f8d8 3000 	ldr.w	r3, [r8]
    5390:	ea0b 0303 	and.w	r3, fp, r3
    5394:	f8c8 3000 	str.w	r3, [r8]
                USB_EndPointHalt &= ~m;
    5398:	f8d9 3000 	ldr.w	r3, [r9]
    539c:	ea0b 0303 	and.w	r3, fp, r3
    53a0:	f8c9 3000 	str.w	r3, [r9]
                USB_DisableEP(n);
    53a4:	9800      	ldr	r0, [sp, #0]
    53a6:	f000 faf3 	bl	5990 <USB_DisableEP>
    53aa:	9701      	str	r7, [sp, #4]
    53ac:	e000      	b.n	53b0 <USB_EndPoint0+0x7e8>
                USB_ConfigEP((USB_ENDPOINT_DESCRIPTOR *)pD);
                USB_EnableEP(n);
                USB_ResetEP(n);
                msk |= m;
              }
              else if ((alt == old) && ((msk & m) == 0)) {
    53ae:	9701      	str	r7, [sp, #4]
            }
           break;
        }
//        (uint8_t *)pD += pD->bLength;
			tmp = (uint32_t)pD;
			tmp += pD->bLength;
    53b0:	7823      	ldrb	r3, [r4, #0]
    53b2:	18e4      	adds	r4, r4, r3
  switch (SetupPacket.bmRequestType.BM.Recipient) {
    case REQUEST_TO_INTERFACE:
      if (USB_Configuration == 0) return (FALSE);
      set = FALSE;
      pD  = (USB_COMMON_DESCRIPTOR *)USB_ConfigDescriptor;
      while (pD->bLength) {
    53b4:	7823      	ldrb	r3, [r4, #0]
    53b6:	2b00      	cmp	r3, #0
    53b8:	f47f af74 	bne.w	52a4 <USB_EndPoint0+0x6dc>
              }
              USB_DataInStage();
              break;

            case USB_REQUEST_SET_INTERFACE:
              if (!USB_ReqSetInterface()) {
    53bc:	2e00      	cmp	r6, #0
    53be:	f000 80a4 	beq.w	550a <USB_EndPoint0+0x942>
                goto stall_i;
              }
              USB_StatusInStage();
    53c2:	f7ff fbed 	bl	4ba0 <USB_StatusInStage>
#if USB_INTERFACE_EVENT
              USB_Interface_Event();
#endif
              break;
    53c6:	e137      	b.n	5638 <USB_EndPoint0+0xa70>
          }
          break;  /* end case REQUEST_STANDARD */

#if USB_CLASS
        case REQUEST_CLASS:
          switch (SetupPacket.bmRequestType.BM.Recipient) {
    53c8:	f243 339c 	movw	r3, #13212	; 0x339c
    53cc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    53d0:	781b      	ldrb	r3, [r3, #0]
    53d2:	f003 031f 	and.w	r3, r3, #31
    53d6:	2b01      	cmp	r3, #1
    53d8:	f040 8097 	bne.w	550a <USB_EndPoint0+0x942>
                    goto setup_class_ok;
                }
              }
#endif  /* USB_AUDIO */
#if USB_CDC
              if ((SetupPacket.wIndex.WB.L == USB_CDC_CIF_NUM)  ||       /* IF number correct? */
    53dc:	f243 339c 	movw	r3, #13212	; 0x339c
    53e0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    53e4:	791b      	ldrb	r3, [r3, #4]
    53e6:	2b01      	cmp	r3, #1
    53e8:	f200 808f 	bhi.w	550a <USB_EndPoint0+0x942>
                  (SetupPacket.wIndex.WB.L == USB_CDC_DIF_NUM)) {
                switch (SetupPacket.bRequest) {
    53ec:	f243 339c 	movw	r3, #13212	; 0x339c
    53f0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    53f4:	785b      	ldrb	r3, [r3, #1]
    53f6:	2b23      	cmp	r3, #35	; 0x23
    53f8:	f200 8087 	bhi.w	550a <USB_EndPoint0+0x942>
    53fc:	e8df f003 	tbb	[pc, r3]
    5400:	362c1c12 	.word	0x362c1c12
    5404:	8585854b 	.word	0x8585854b
    5408:	85858585 	.word	0x85858585
    540c:	85858585 	.word	0x85858585
    5410:	85858585 	.word	0x85858585
    5414:	85858585 	.word	0x85858585
    5418:	85858585 	.word	0x85858585
    541c:	85858585 	.word	0x85858585
    5420:	7a6f6056 	.word	0x7a6f6056
                  case CDC_SEND_ENCAPSULATED_COMMAND:
                    EP0Data.pData = EP0Buf;                              /* data to be received, see USB_EVT_OUT */
    5424:	f243 33a8 	movw	r3, #13224	; 0x33a8
    5428:	f2c1 0300 	movt	r3, #4096	; 0x1000
    542c:	f243 3280 	movw	r2, #13184	; 0x3380
    5430:	f2c1 0200 	movt	r2, #4096	; 0x1000
    5434:	601a      	str	r2, [r3, #0]
                    goto setup_class_ok;
    5436:	e0ff      	b.n	5638 <USB_EndPoint0+0xa70>
                  case CDC_GET_ENCAPSULATED_RESPONSE:
                    if (CDC_GetEncapsulatedResponse()) {
    5438:	f7ff fa1a 	bl	4870 <CDC_GetEncapsulatedResponse>
    543c:	2800      	cmp	r0, #0
    543e:	d064      	beq.n	550a <USB_EndPoint0+0x942>
                      EP0Data.pData = EP0Buf;                            /* point to data to be sent */
    5440:	f243 33a8 	movw	r3, #13224	; 0x33a8
    5444:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5448:	f243 3280 	movw	r2, #13184	; 0x3380
    544c:	f2c1 0200 	movt	r2, #4096	; 0x1000
    5450:	601a      	str	r2, [r3, #0]
                      USB_DataInStage();                                 /* send requested data */
    5452:	f7ff fb7d 	bl	4b50 <USB_DataInStage>
                      goto setup_class_ok;
    5456:	e0ef      	b.n	5638 <USB_EndPoint0+0xa70>
                    }
                    break;
                  case CDC_SET_COMM_FEATURE:
                    EP0Data.pData = EP0Buf;                              /* data to be received, see USB_EVT_OUT */
    5458:	f243 33a8 	movw	r3, #13224	; 0x33a8
    545c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5460:	f243 3280 	movw	r2, #13184	; 0x3380
    5464:	f2c1 0200 	movt	r2, #4096	; 0x1000
    5468:	601a      	str	r2, [r3, #0]
                    goto setup_class_ok;
    546a:	e0e5      	b.n	5638 <USB_EndPoint0+0xa70>
                  case CDC_GET_COMM_FEATURE:
                    if (CDC_GetCommFeature(SetupPacket.wValue.W)) {
    546c:	f243 339c 	movw	r3, #13212	; 0x339c
    5470:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5474:	8858      	ldrh	r0, [r3, #2]
    5476:	f7ff fa03 	bl	4880 <CDC_GetCommFeature>
    547a:	2800      	cmp	r0, #0
    547c:	d045      	beq.n	550a <USB_EndPoint0+0x942>
                      EP0Data.pData = EP0Buf;                            /* point to data to be sent */
    547e:	f243 33a8 	movw	r3, #13224	; 0x33a8
    5482:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5486:	f243 3280 	movw	r2, #13184	; 0x3380
    548a:	f2c1 0200 	movt	r2, #4096	; 0x1000
    548e:	601a      	str	r2, [r3, #0]
                      USB_DataInStage();                                 /* send requested data */
    5490:	f7ff fb5e 	bl	4b50 <USB_DataInStage>
                      goto setup_class_ok;
    5494:	e0d0      	b.n	5638 <USB_EndPoint0+0xa70>
                    }
                    break;
                  case CDC_CLEAR_COMM_FEATURE:
                    if (CDC_ClearCommFeature(SetupPacket.wValue.W)) {
    5496:	f243 339c 	movw	r3, #13212	; 0x339c
    549a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    549e:	8858      	ldrh	r0, [r3, #2]
    54a0:	f7ff f9f2 	bl	4888 <CDC_ClearCommFeature>
    54a4:	b388      	cbz	r0, 550a <USB_EndPoint0+0x942>
                      USB_StatusInStage();                               /* send Acknowledge */
    54a6:	f7ff fb7b 	bl	4ba0 <USB_StatusInStage>
                      goto setup_class_ok;
    54aa:	e0c5      	b.n	5638 <USB_EndPoint0+0xa70>
                    }
                    break;
                  case CDC_SET_LINE_CODING:
                    EP0Data.pData = EP0Buf;                              /* data to be received, see USB_EVT_OUT */
    54ac:	f243 33a8 	movw	r3, #13224	; 0x33a8
    54b0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    54b4:	f243 3280 	movw	r2, #13184	; 0x3380
    54b8:	f2c1 0200 	movt	r2, #4096	; 0x1000
    54bc:	601a      	str	r2, [r3, #0]
                    goto setup_class_ok;
    54be:	e0bb      	b.n	5638 <USB_EndPoint0+0xa70>
                  case CDC_GET_LINE_CODING:
                    if (CDC_GetLineCoding()) {
    54c0:	f7ff fa04 	bl	48cc <CDC_GetLineCoding>
    54c4:	b308      	cbz	r0, 550a <USB_EndPoint0+0x942>
                      EP0Data.pData = EP0Buf;                            /* point to data to be sent */
    54c6:	f243 33a8 	movw	r3, #13224	; 0x33a8
    54ca:	f2c1 0300 	movt	r3, #4096	; 0x1000
    54ce:	f243 3280 	movw	r2, #13184	; 0x3380
    54d2:	f2c1 0200 	movt	r2, #4096	; 0x1000
    54d6:	601a      	str	r2, [r3, #0]
                      USB_DataInStage();                                 /* send requested data */
    54d8:	f7ff fb3a 	bl	4b50 <USB_DataInStage>
                      goto setup_class_ok;
    54dc:	e0ac      	b.n	5638 <USB_EndPoint0+0xa70>
                    }
                    break;
                  case CDC_SET_CONTROL_LINE_STATE:
                    if (CDC_SetControlLineState(SetupPacket.wValue.W)) {
    54de:	f243 339c 	movw	r3, #13212	; 0x339c
    54e2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    54e6:	8858      	ldrh	r0, [r3, #2]
    54e8:	f7ff fa0c 	bl	4904 <CDC_SetControlLineState>
    54ec:	b168      	cbz	r0, 550a <USB_EndPoint0+0x942>
                      USB_StatusInStage();                               /* send Acknowledge */
    54ee:	f7ff fb57 	bl	4ba0 <USB_StatusInStage>
                      goto setup_class_ok;
    54f2:	e0a1      	b.n	5638 <USB_EndPoint0+0xa70>
                    }
                    break;
                  case CDC_SEND_BREAK:
                    if (CDC_SendBreak(SetupPacket.wValue.W)) {
    54f4:	f243 339c 	movw	r3, #13212	; 0x339c
    54f8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    54fc:	8858      	ldrh	r0, [r3, #2]
    54fe:	f7ff fa05 	bl	490c <CDC_SendBreak>
    5502:	b110      	cbz	r0, 550a <USB_EndPoint0+0x942>
                      USB_StatusInStage();                               /* send Acknowledge */
    5504:	f7ff fb4c 	bl	4ba0 <USB_StatusInStage>
                      goto setup_class_ok;
    5508:	e096      	b.n	5638 <USB_EndPoint0+0xa70>

          break;  /* end case REQUEST_VENDOR */
#endif  /* USB_VENDOR */

        default:
stall_i:  USB_SetStallEP(0x80);
    550a:	f04f 0080 	mov.w	r0, #128	; 0x80
    550e:	f000 fa5d 	bl	59cc <USB_SetStallEP>
          EP0Data.Count = 0;
    5512:	f243 33a8 	movw	r3, #13224	; 0x33a8
    5516:	f2c1 0300 	movt	r3, #4096	; 0x1000
    551a:	f04f 0200 	mov.w	r2, #0
    551e:	809a      	strh	r2, [r3, #4]
          break;
    5520:	e08a      	b.n	5638 <USB_EndPoint0+0xa70>
      }
      break;  /* end case USB_EVT_SETUP */

    case USB_EVT_OUT:
      if (SetupPacket.bmRequestType.BM.Dir == REQUEST_HOST_TO_DEVICE) {
    5522:	f243 339c 	movw	r3, #13212	; 0x339c
    5526:	f2c1 0300 	movt	r3, #4096	; 0x1000
    552a:	781b      	ldrb	r3, [r3, #0]
    552c:	f013 0f80 	tst.w	r3, #128	; 0x80
    5530:	d14d      	bne.n	55ce <USB_EndPoint0+0xa06>
        if (EP0Data.Count) {                                             /* still data to receive ? */
    5532:	f243 33a8 	movw	r3, #13224	; 0x33a8
    5536:	f2c1 0300 	movt	r3, #4096	; 0x1000
    553a:	889b      	ldrh	r3, [r3, #4]
    553c:	2b00      	cmp	r3, #0
    553e:	d07b      	beq.n	5638 <USB_EndPoint0+0xa70>
          USB_DataOutStage();                                            /* receive data */
    5540:	f7ff fb1c 	bl	4b7c <USB_DataOutStage>
          if (EP0Data.Count == 0) {                                      /* data complete ? */
    5544:	f243 33a8 	movw	r3, #13224	; 0x33a8
    5548:	f2c1 0300 	movt	r3, #4096	; 0x1000
    554c:	889b      	ldrh	r3, [r3, #4]
    554e:	2b00      	cmp	r3, #0
    5550:	d172      	bne.n	5638 <USB_EndPoint0+0xa70>
            switch (SetupPacket.bmRequestType.BM.Type) {
    5552:	f243 339c 	movw	r3, #13212	; 0x339c
    5556:	f2c1 0300 	movt	r3, #4096	; 0x1000
    555a:	781b      	ldrb	r3, [r3, #0]
    555c:	f3c3 1341 	ubfx	r3, r3, #5, #2
    5560:	2b01      	cmp	r3, #1
    5562:	d1d2      	bne.n	550a <USB_EndPoint0+0x942>
              case REQUEST_STANDARD:
                goto stall_i;                                            /* not supported */

#if (USB_CLASS)
              case REQUEST_CLASS:
                switch (SetupPacket.bmRequestType.BM.Recipient) {
    5564:	f243 339c 	movw	r3, #13212	; 0x339c
    5568:	f2c1 0300 	movt	r3, #4096	; 0x1000
    556c:	781b      	ldrb	r3, [r3, #0]
    556e:	f003 031f 	and.w	r3, r3, #31
    5572:	2b01      	cmp	r3, #1
    5574:	d1c9      	bne.n	550a <USB_EndPoint0+0x942>
                          break;
                      }
                    }
#endif  /* USB_AUDIO */
#if USB_CDC
                    if ((SetupPacket.wIndex.WB.L == USB_CDC_CIF_NUM)  || /* IF number correct? */
    5576:	f243 339c 	movw	r3, #13212	; 0x339c
    557a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    557e:	791b      	ldrb	r3, [r3, #4]
    5580:	2b01      	cmp	r3, #1
    5582:	d8c2      	bhi.n	550a <USB_EndPoint0+0x942>
                        (SetupPacket.wIndex.WB.L == USB_CDC_DIF_NUM)) {
                      switch (SetupPacket.bRequest) {
    5584:	f243 339c 	movw	r3, #13212	; 0x339c
    5588:	f2c1 0300 	movt	r3, #4096	; 0x1000
    558c:	785b      	ldrb	r3, [r3, #1]
    558e:	2b02      	cmp	r3, #2
    5590:	d00a      	beq.n	55a8 <USB_EndPoint0+0x9e0>
    5592:	2b20      	cmp	r3, #32
    5594:	d014      	beq.n	55c0 <USB_EndPoint0+0x9f8>
    5596:	2b00      	cmp	r3, #0
    5598:	d1b7      	bne.n	550a <USB_EndPoint0+0x942>
                        case CDC_SEND_ENCAPSULATED_COMMAND:
                          if (CDC_SendEncapsulatedCommand()) {
    559a:	f7ff f965 	bl	4868 <CDC_SendEncapsulatedCommand>
    559e:	2800      	cmp	r0, #0
    55a0:	d0b3      	beq.n	550a <USB_EndPoint0+0x942>
                            USB_StatusInStage();                         /* send Acknowledge */
    55a2:	f7ff fafd 	bl	4ba0 <USB_StatusInStage>
                            goto out_class_ok;
    55a6:	e047      	b.n	5638 <USB_EndPoint0+0xa70>
                          }
                          break;
                        case CDC_SET_COMM_FEATURE:
                          if (CDC_SetCommFeature(SetupPacket.wValue.W)) {
    55a8:	f243 339c 	movw	r3, #13212	; 0x339c
    55ac:	f2c1 0300 	movt	r3, #4096	; 0x1000
    55b0:	8858      	ldrh	r0, [r3, #2]
    55b2:	f7ff f961 	bl	4878 <CDC_SetCommFeature>
    55b6:	2800      	cmp	r0, #0
    55b8:	d0a7      	beq.n	550a <USB_EndPoint0+0x942>
                            USB_StatusInStage();                         /* send Acknowledge */
    55ba:	f7ff faf1 	bl	4ba0 <USB_StatusInStage>
                            goto out_class_ok;
    55be:	e03b      	b.n	5638 <USB_EndPoint0+0xa70>
                          }
                          break;
                        case CDC_SET_LINE_CODING:
                          if (CDC_SetLineCoding()) {
    55c0:	f7ff f966 	bl	4890 <CDC_SetLineCoding>
    55c4:	2800      	cmp	r0, #0
    55c6:	d0a0      	beq.n	550a <USB_EndPoint0+0x942>
                            USB_StatusInStage();                         /* send Acknowledge */
    55c8:	f7ff faea 	bl	4ba0 <USB_StatusInStage>
                            goto out_class_ok;
    55cc:	e034      	b.n	5638 <USB_EndPoint0+0xa70>
                goto stall_i;
            }
          }
        }
      } else {
        USB_StatusOutStage();                                            /* receive Acknowledge */
    55ce:	f7ff faf1 	bl	4bb4 <USB_StatusOutStage>
    55d2:	e031      	b.n	5638 <USB_EndPoint0+0xa70>
      }
      break;  /* end case USB_EVT_OUT */

    case USB_EVT_IN :
      if (SetupPacket.bmRequestType.BM.Dir == REQUEST_DEVICE_TO_HOST) {
    55d4:	f243 339c 	movw	r3, #13212	; 0x339c
    55d8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    55dc:	781b      	ldrb	r3, [r3, #0]
    55de:	f013 0f80 	tst.w	r3, #128	; 0x80
    55e2:	d002      	beq.n	55ea <USB_EndPoint0+0xa22>
        USB_DataInStage();                                               /* send data */
    55e4:	f7ff fab4 	bl	4b50 <USB_DataInStage>
    55e8:	e026      	b.n	5638 <USB_EndPoint0+0xa70>
      } else {
        if (USB_DeviceAddress & 0x80) {
    55ea:	f243 338c 	movw	r3, #13196	; 0x338c
    55ee:	f2c1 0300 	movt	r3, #4096	; 0x1000
    55f2:	781b      	ldrb	r3, [r3, #0]
    55f4:	f013 0f80 	tst.w	r3, #128	; 0x80
    55f8:	d01e      	beq.n	5638 <USB_EndPoint0+0xa70>
          USB_DeviceAddress &= 0x7F;
    55fa:	f003 007f 	and.w	r0, r3, #127	; 0x7f
    55fe:	f243 328c 	movw	r2, #13196	; 0x338c
    5602:	f2c1 0200 	movt	r2, #4096	; 0x1000
    5606:	7010      	strb	r0, [r2, #0]
          USB_SetAddress(USB_DeviceAddress);
    5608:	f000 f8e8 	bl	57dc <USB_SetAddress>
    560c:	e014      	b.n	5638 <USB_EndPoint0+0xa70>
        }
      }
      break;  /* end case USB_EVT_IN */

    case USB_EVT_OUT_STALL:
      USB_ClrStallEP(0x00);
    560e:	f04f 0000 	mov.w	r0, #0
    5612:	f000 f9eb 	bl	59ec <USB_ClrStallEP>
      break;
    5616:	e00f      	b.n	5638 <USB_EndPoint0+0xa70>

    case USB_EVT_IN_STALL:
      USB_ClrStallEP(0x80);
    5618:	f04f 0080 	mov.w	r0, #128	; 0x80
    561c:	f000 f9e6 	bl	59ec <USB_ClrStallEP>
      break;
    5620:	e00a      	b.n	5638 <USB_EndPoint0+0xa70>
          switch (SetupPacket.bRequest) {
            case USB_REQUEST_GET_STATUS:
              if (!USB_ReqGetStatus()) {
                goto stall_i;
              }
              USB_DataInStage();
    5622:	f7ff fa95 	bl	4b50 <USB_DataInStage>
              break;
    5626:	e007      	b.n	5638 <USB_EndPoint0+0xa70>

            case USB_REQUEST_CLEAR_FEATURE:
              if (!USB_ReqSetClrFeature(0)) {
                goto stall_i;
              }
              USB_StatusInStage();
    5628:	f7ff faba 	bl	4ba0 <USB_StatusInStage>
#if USB_FEATURE_EVENT
              USB_Feature_Event();
#endif
              break;
    562c:	e004      	b.n	5638 <USB_EndPoint0+0xa70>

            case USB_REQUEST_SET_FEATURE:
              if (!USB_ReqSetClrFeature(1)) {
                goto stall_i;
              }
              USB_StatusInStage();
    562e:	f7ff fab7 	bl	4ba0 <USB_StatusInStage>
#if USB_FEATURE_EVENT
              USB_Feature_Event();
#endif
              break;
    5632:	e001      	b.n	5638 <USB_EndPoint0+0xa70>

            case USB_REQUEST_GET_DESCRIPTOR:
              if (!USB_ReqGetDescriptor()) {
                goto stall_i;
              }
              USB_DataInStage();
    5634:	f7ff fa8c 	bl	4b50 <USB_DataInStage>
    case USB_EVT_IN_STALL:
      USB_ClrStallEP(0x80);
      break;

  }
}
    5638:	b005      	add	sp, #20
    563a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    563e:	bf00      	nop

00005640 <EPAdr>:
 *                       EPNum.0..3: Address
 *                       EPNum.7:    Dir
 *    Return Value:    Endpoint Physical Address
 */

uint32_t EPAdr (uint32_t EPNum) {
    5640:	4603      	mov	r3, r0
  uint32_t val;

  val = (EPNum & 0x0F) << 1;
    5642:	f000 000f 	and.w	r0, r0, #15
    5646:	ea4f 0040 	mov.w	r0, r0, lsl #1
  if (EPNum & 0x80) {
    564a:	f013 0f80 	tst.w	r3, #128	; 0x80
    val += 1;
    564e:	bf18      	it	ne
    5650:	3001      	addne	r0, #1
  }
  return (val);
}
    5652:	4770      	bx	lr

00005654 <WrCmd>:
 *    Return Value:    None
 */

void WrCmd (uint32_t cmd) {

  LPC_USB->USBDevIntClr = CCEMTY_INT;
    5654:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    5658:	f2c5 0300 	movt	r3, #20480	; 0x5000
    565c:	f04f 0210 	mov.w	r2, #16
    5660:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  LPC_USB->USBCmdCode = cmd;
    5664:	f8c3 0210 	str.w	r0, [r3, #528]	; 0x210
  while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0);
    5668:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    566c:	f2c5 0200 	movt	r2, #20480	; 0x5000
    5670:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    5674:	f013 0f10 	tst.w	r3, #16
    5678:	d0fa      	beq.n	5670 <WrCmd+0x1c>
}
    567a:	4770      	bx	lr

0000567c <WrCmdDat>:
 *    Return Value:    None
 */

void WrCmdDat (uint32_t cmd, uint32_t val) {

  LPC_USB->USBDevIntClr = CCEMTY_INT;
    567c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    5680:	f2c5 0300 	movt	r3, #20480	; 0x5000
    5684:	f04f 0210 	mov.w	r2, #16
    5688:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  LPC_USB->USBCmdCode = cmd;
    568c:	f8c3 0210 	str.w	r0, [r3, #528]	; 0x210
  while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0);
    5690:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    5694:	f2c5 0200 	movt	r2, #20480	; 0x5000
    5698:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    569c:	f013 0f10 	tst.w	r3, #16
    56a0:	d0fa      	beq.n	5698 <WrCmdDat+0x1c>
  LPC_USB->USBDevIntClr = CCEMTY_INT;
    56a2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    56a6:	f2c5 0300 	movt	r3, #20480	; 0x5000
    56aa:	f04f 0210 	mov.w	r2, #16
    56ae:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  LPC_USB->USBCmdCode = val;
    56b2:	f8c3 1210 	str.w	r1, [r3, #528]	; 0x210
  while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0);
    56b6:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    56ba:	f2c5 0200 	movt	r2, #20480	; 0x5000
    56be:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    56c2:	f013 0f10 	tst.w	r3, #16
    56c6:	d0fa      	beq.n	56be <WrCmdDat+0x42>
}
    56c8:	4770      	bx	lr
    56ca:	bf00      	nop

000056cc <WrCmdEP>:
 *    Parameters:      cmd:   Command
 *                     val:   Data
 *    Return Value:    None
 */

void WrCmdEP (uint32_t EPNum, uint32_t cmd){
    56cc:	b538      	push	{r3, r4, r5, lr}
    56ce:	460d      	mov	r5, r1

  LPC_USB->USBDevIntClr = CCEMTY_INT;
    56d0:	f44f 4440 	mov.w	r4, #49152	; 0xc000
    56d4:	f2c5 0400 	movt	r4, #20480	; 0x5000
    56d8:	f04f 0310 	mov.w	r3, #16
    56dc:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
  LPC_USB->USBCmdCode = CMD_SEL_EP(EPAdr(EPNum));
    56e0:	f7ff ffae 	bl	5640 <EPAdr>
    56e4:	ea4f 4300 	mov.w	r3, r0, lsl #16
    56e8:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    56ec:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0);
    56f0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    56f4:	f2c5 0200 	movt	r2, #20480	; 0x5000
    56f8:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    56fc:	f013 0f10 	tst.w	r3, #16
    5700:	d0fa      	beq.n	56f8 <WrCmdEP+0x2c>
  LPC_USB->USBDevIntClr = CCEMTY_INT;
    5702:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    5706:	f2c5 0300 	movt	r3, #20480	; 0x5000
    570a:	f04f 0210 	mov.w	r2, #16
    570e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  LPC_USB->USBCmdCode = cmd;
    5712:	f8c3 5210 	str.w	r5, [r3, #528]	; 0x210
  while ((LPC_USB->USBDevIntSt & CCEMTY_INT) == 0);
    5716:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    571a:	f2c5 0200 	movt	r2, #20480	; 0x5000
    571e:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    5722:	f013 0f10 	tst.w	r3, #16
    5726:	d0fa      	beq.n	571e <WrCmdEP+0x52>
}
    5728:	bd38      	pop	{r3, r4, r5, pc}
    572a:	bf00      	nop

0000572c <RdCmdDat>:
 *    Return Value:    Data Value
 */

uint32_t RdCmdDat (uint32_t cmd) {

  LPC_USB->USBDevIntClr = CCEMTY_INT | CDFULL_INT;
    572c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    5730:	f2c5 0300 	movt	r3, #20480	; 0x5000
    5734:	f04f 0230 	mov.w	r2, #48	; 0x30
    5738:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  LPC_USB->USBCmdCode = cmd;
    573c:	f8c3 0210 	str.w	r0, [r3, #528]	; 0x210
  while ((LPC_USB->USBDevIntSt & CDFULL_INT) == 0);
    5740:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    5744:	f2c5 0200 	movt	r2, #20480	; 0x5000
    5748:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    574c:	f013 0f20 	tst.w	r3, #32
    5750:	d0fa      	beq.n	5748 <RdCmdDat+0x1c>
  return (LPC_USB->USBCmdData);
    5752:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    5756:	f2c5 0300 	movt	r3, #20480	; 0x5000
    575a:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
}
    575e:	4770      	bx	lr

00005760 <USB_Connect>:
 *   Called by the User to Connect/Disconnect USB
 *    Parameters:      con:   Connect/Disconnect
 *    Return Value:    None
 */

void USB_Connect (uint32_t con) {
    5760:	b508      	push	{r3, lr}
  WrCmdDat(CMD_SET_DEV_STAT, DAT_WR_BYTE(con ? DEV_CON : 0));
    5762:	f44f 7180 	mov.w	r1, #256	; 0x100
    5766:	f2c0 0101 	movt	r1, #1
    576a:	2800      	cmp	r0, #0
    576c:	bf08      	it	eq
    576e:	f44f 7180 	moveq.w	r1, #256	; 0x100
    5772:	f44f 60a0 	mov.w	r0, #1280	; 0x500
    5776:	f2c0 00fe 	movt	r0, #254	; 0xfe
    577a:	f7ff ff7f 	bl	567c <WrCmdDat>
}
    577e:	bd08      	pop	{r3, pc}

00005780 <USB_Reset>:
void USB_Reset (void) {
#if USB_DMA
  uint32_t n;
#endif

  LPC_USB->USBEpInd = 0;
    5780:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    5784:	f2c5 0300 	movt	r3, #20480	; 0x5000
    5788:	f04f 0200 	mov.w	r2, #0
    578c:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
  LPC_USB->USBMaxPSize = USB_MAX_PACKET0;
    5790:	f04f 0208 	mov.w	r2, #8
    5794:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
  LPC_USB->USBEpInd = 1;
    5798:	f04f 0101 	mov.w	r1, #1
    579c:	f8c3 1248 	str.w	r1, [r3, #584]	; 0x248
  LPC_USB->USBMaxPSize = USB_MAX_PACKET0;
    57a0:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
  while ((LPC_USB->USBDevIntSt & EP_RLZED_INT) == 0);
    57a4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    57a8:	f2c5 0200 	movt	r2, #20480	; 0x5000
    57ac:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    57b0:	f413 7f80 	tst.w	r3, #256	; 0x100
    57b4:	d0fa      	beq.n	57ac <USB_Reset+0x2c>

  LPC_USB->USBEpIntClr  = 0xFFFFFFFF;
    57b6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    57ba:	f2c5 0300 	movt	r3, #20480	; 0x5000
    57be:	f04f 32ff 	mov.w	r2, #4294967295
    57c2:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  LPC_USB->USBEpIntEn   = 0xFFFFFFFF ^ USB_DMA_EP;
    57c6:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  LPC_USB->USBDevIntClr = 0xFFFFFFFF;
    57ca:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  LPC_USB->USBDevIntEn  = DEV_STAT_INT    | EP_SLOW_INT    |
    57ce:	f04f 020c 	mov.w	r2, #12
    57d2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  for (n = 0; n < USB_EP_NUM; n++) {
    udca[n] = 0;
    UDCA[n] = 0;
  }
#endif
}
    57d6:	4770      	bx	lr

000057d8 <USB_WakeUpCfg>:
 *    Return Value:    None
 */

void USB_WakeUpCfg (uint32_t cfg) {
  /* Not needed */
}
    57d8:	4770      	bx	lr
    57da:	bf00      	nop

000057dc <USB_SetAddress>:
 *  USB Set Address Function
 *    Parameters:      adr:   USB Address
 *    Return Value:    None
 */

void USB_SetAddress (uint32_t adr) {
    57dc:	b538      	push	{r3, r4, r5, lr}
  WrCmdDat(CMD_SET_ADDR, DAT_WR_BYTE(DEV_EN | adr)); /* Don't wait for next */
    57de:	f040 0580 	orr.w	r5, r0, #128	; 0x80
    57e2:	ea4f 4505 	mov.w	r5, r5, lsl #16
    57e6:	f445 7580 	orr.w	r5, r5, #256	; 0x100
    57ea:	f44f 64a0 	mov.w	r4, #1280	; 0x500
    57ee:	f2c0 04d0 	movt	r4, #208	; 0xd0
    57f2:	4620      	mov	r0, r4
    57f4:	4629      	mov	r1, r5
    57f6:	f7ff ff41 	bl	567c <WrCmdDat>
  WrCmdDat(CMD_SET_ADDR, DAT_WR_BYTE(DEV_EN | adr)); /*  Setup Status Phase */
    57fa:	4620      	mov	r0, r4
    57fc:	4629      	mov	r1, r5
    57fe:	f7ff ff3d 	bl	567c <WrCmdDat>
}
    5802:	bd38      	pop	{r3, r4, r5, pc}

00005804 <USB_Init>:
 *  USB Initialize Function
 *   Called by the User to initialize USB
 *    Return Value:    None
 */

void USB_Init (void) {
    5804:	b508      	push	{r3, lr}
//	UART_32_HEX((LPC_UART_TypeDef *)LPC_UART2, 0x01010101);

  LPC_PINCON->PINSEL1 &= ~((3<<26)|(3<<28));   /* P0.29 D+, P0.30 D- */
    5806:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    580a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    580e:	685a      	ldr	r2, [r3, #4]
    5810:	f022 5270 	bic.w	r2, r2, #1006632960	; 0x3c000000
    5814:	605a      	str	r2, [r3, #4]
  LPC_PINCON->PINSEL1 |=  ((1<<26)|(1<<28));   /* PINSEL1 26.27, 28.29  = 01 */
    5816:	685a      	ldr	r2, [r3, #4]
    5818:	f042 52a0 	orr.w	r2, r2, #335544320	; 0x14000000
    581c:	605a      	str	r2, [r3, #4]
//  UART_32_HEX((LPC_UART_TypeDef *)LPC_UART2, 0x02020202);

  LPC_PINCON->PINSEL3 &= ~((3<< 4)|(3<<28));   /* P1.18 GoodLink, P1.30 VBUS */
    581e:	68da      	ldr	r2, [r3, #12]
    5820:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
    5824:	f022 0230 	bic.w	r2, r2, #48	; 0x30
    5828:	60da      	str	r2, [r3, #12]
  LPC_PINCON->PINSEL3 |=  ((1<< 4)|(2<<28));   /* PINSEL3 4.5 = 01, 28.29 = 10 */
    582a:	68da      	ldr	r2, [r3, #12]
    582c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
    5830:	f042 0210 	orr.w	r2, r2, #16
    5834:	60da      	str	r2, [r3, #12]
//  UART_32_HEX((LPC_UART_TypeDef *)LPC_UART2, 0x03030303);

  LPC_PINCON->PINSEL4 &= ~((3<<18)        );   /* P2.9 SoftConnect */
    5836:	691a      	ldr	r2, [r3, #16]
    5838:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
    583c:	611a      	str	r2, [r3, #16]
  LPC_PINCON->PINSEL4 |=  ((1<<18)        );   /* PINSEL4 18.19 = 01 */
    583e:	691a      	ldr	r2, [r3, #16]
    5840:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
    5844:	611a      	str	r2, [r3, #16]
//  UART_32_HEX((LPC_UART_TypeDef *)LPC_UART2, 0x04040404);

  // P1.18 -> USB_UP_LED
  // P1.30 -> VBUS
  LPC_PINCON->PINSEL3 &= ~0x30000030;
    5846:	68da      	ldr	r2, [r3, #12]
    5848:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
    584c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
    5850:	60da      	str	r2, [r3, #12]
  LPC_PINCON->PINSEL3 |= 0x20000010;
    5852:	68da      	ldr	r2, [r3, #12]
    5854:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
    5858:	f042 0210 	orr.w	r2, r2, #16
    585c:	60da      	str	r2, [r3, #12]
//  UART_32_HEX((LPC_UART_TypeDef *)LPC_UART2, 0x05050505);

  LPC_SC->PCONP |= (1UL<<31);                /* USB PCLK -> enable USB Per.       */
    585e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    5862:	f2c4 030f 	movt	r3, #16399	; 0x400f
    5866:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
    586a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    586e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
//  UART_32_HEX((LPC_UART_TypeDef *)LPC_UART2, 0x06060606);

  LPC_USB->USBClkCtrl = 0x1A;                /* Dev, PortSel, AHB clock enable */
    5872:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    5876:	f2c5 0300 	movt	r3, #20480	; 0x5000
    587a:	f04f 021a 	mov.w	r2, #26
    587e:	f8c3 2ff4 	str.w	r2, [r3, #4084]	; 0xff4
//  UART_32_HEX((LPC_UART_TypeDef *)LPC_UART2, 0x07070707);
  while ((LPC_USB->USBClkSt & 0x1A) != 0x1A);
    5882:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    5886:	f2c5 0200 	movt	r2, #20480	; 0x5000
    588a:	f8d2 3ff8 	ldr.w	r3, [r2, #4088]	; 0xff8
    588e:	f003 031a 	and.w	r3, r3, #26
    5892:	2b1a      	cmp	r3, #26
    5894:	d1f9      	bne.n	588a <USB_Init+0x86>
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    5896:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    589a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    589e:	f04f 0220 	mov.w	r2, #32
    58a2:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    58a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    58aa:	601a      	str	r2, [r3, #0]
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    58ac:	f04f 0240 	mov.w	r2, #64	; 0x40
    58b0:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    58b4:	f04f 0204 	mov.w	r2, #4
    58b8:	605a      	str	r2, [r3, #4]
  NVIC_EnableIRQ(USB_IRQn);               /* enable USB interrupt */

  NVIC_SetPriority(CANActivity_IRQn, 8);
  NVIC_EnableIRQ(CANActivity_IRQn);

  USB_Reset();
    58ba:	f7ff ff61 	bl	5780 <USB_Reset>
  USB_SetAddress(0);
    58be:	f04f 0000 	mov.w	r0, #0
    58c2:	f7ff ff8b 	bl	57dc <USB_SetAddress>
}
    58c6:	bd08      	pop	{r3, pc}

000058c8 <USB_Configure>:
 *  USB Configure Function
 *    Parameters:      cfg:   Configure/Deconfigure
 *    Return Value:    None
 */

void USB_Configure (uint32_t cfg) {
    58c8:	b508      	push	{r3, lr}

  WrCmdDat(CMD_CFG_DEV, DAT_WR_BYTE(cfg ? CONF_DVICE : 0));
    58ca:	f44f 7180 	mov.w	r1, #256	; 0x100
    58ce:	f2c0 0101 	movt	r1, #1
    58d2:	2800      	cmp	r0, #0
    58d4:	bf08      	it	eq
    58d6:	f44f 7180 	moveq.w	r1, #256	; 0x100
    58da:	f44f 60a0 	mov.w	r0, #1280	; 0x500
    58de:	f2c0 00d8 	movt	r0, #216	; 0xd8
    58e2:	f7ff fecb 	bl	567c <WrCmdDat>

  LPC_USB->USBReEp = 0x00000003;
    58e6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    58ea:	f2c5 0300 	movt	r3, #20480	; 0x5000
    58ee:	f04f 0203 	mov.w	r2, #3
    58f2:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
  while ((LPC_USB->USBDevIntSt & EP_RLZED_INT) == 0);
    58f6:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    58fa:	f2c5 0200 	movt	r2, #20480	; 0x5000
    58fe:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    5902:	f413 7f80 	tst.w	r3, #256	; 0x100
    5906:	d0fa      	beq.n	58fe <USB_Configure+0x36>
  LPC_USB->USBDevIntClr = EP_RLZED_INT;
    5908:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    590c:	f2c5 0300 	movt	r3, #20480	; 0x5000
    5910:	f44f 7280 	mov.w	r2, #256	; 0x100
    5914:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
}
    5918:	bd08      	pop	{r3, pc}
    591a:	bf00      	nop

0000591c <USB_ConfigEP>:
 *  Configure USB Endpoint according to Descriptor
 *    Parameters:      pEPD:  Pointer to Endpoint Descriptor
 *    Return Value:    None
 */

void USB_ConfigEP (USB_ENDPOINT_DESCRIPTOR *pEPD) {
    591c:	b510      	push	{r4, lr}
    591e:	4604      	mov	r4, r0
  uint32_t num;

  num = EPAdr(pEPD->bEndpointAddress);
    5920:	7880      	ldrb	r0, [r0, #2]
    5922:	f7ff fe8d 	bl	5640 <EPAdr>
  LPC_USB->USBReEp |= (1 << num);
    5926:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    592a:	f2c5 0300 	movt	r3, #20480	; 0x5000
    592e:	f8d3 1244 	ldr.w	r1, [r3, #580]	; 0x244
    5932:	f04f 0201 	mov.w	r2, #1
    5936:	fa02 f200 	lsl.w	r2, r2, r0
    593a:	430a      	orrs	r2, r1
    593c:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
  LPC_USB->USBEpInd = num;
    5940:	f8c3 0248 	str.w	r0, [r3, #584]	; 0x248
  LPC_USB->USBMaxPSize = pEPD->wMaxPacketSize;
    5944:	88a2      	ldrh	r2, [r4, #4]
    5946:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
  while ((LPC_USB->USBDevIntSt & EP_RLZED_INT) == 0);
    594a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    594e:	f2c5 0200 	movt	r2, #20480	; 0x5000
    5952:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    5956:	f413 7f80 	tst.w	r3, #256	; 0x100
    595a:	d0fa      	beq.n	5952 <USB_ConfigEP+0x36>
  LPC_USB->USBDevIntClr = EP_RLZED_INT;
    595c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    5960:	f2c5 0300 	movt	r3, #20480	; 0x5000
    5964:	f44f 7280 	mov.w	r2, #256	; 0x100
    5968:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
}
    596c:	bd10      	pop	{r4, pc}
    596e:	bf00      	nop

00005970 <USB_DirCtrlEP>:
 *    Return Value:    None
 */

void USB_DirCtrlEP (uint32_t dir) {
  /* Not needed */
}
    5970:	4770      	bx	lr
    5972:	bf00      	nop

00005974 <USB_EnableEP>:
 *                       EPNum.0..3: Address
 *                       EPNum.7:    Dir
 *    Return Value:    None
 */

void USB_EnableEP (uint32_t EPNum) {
    5974:	b508      	push	{r3, lr}
  WrCmdDat(CMD_SET_EP_STAT(EPAdr(EPNum)), DAT_WR_BYTE(0));
    5976:	f7ff fe63 	bl	5640 <EPAdr>
    597a:	ea4f 4000 	mov.w	r0, r0, lsl #16
    597e:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
    5982:	f440 60a0 	orr.w	r0, r0, #1280	; 0x500
    5986:	f44f 7180 	mov.w	r1, #256	; 0x100
    598a:	f7ff fe77 	bl	567c <WrCmdDat>
}
    598e:	bd08      	pop	{r3, pc}

00005990 <USB_DisableEP>:
 *                       EPNum.0..3: Address
 *                       EPNum.7:    Dir
 *    Return Value:    None
 */

void USB_DisableEP (uint32_t EPNum) {
    5990:	b508      	push	{r3, lr}
  WrCmdDat(CMD_SET_EP_STAT(EPAdr(EPNum)), DAT_WR_BYTE(EP_STAT_DA));
    5992:	f7ff fe55 	bl	5640 <EPAdr>
    5996:	ea4f 4000 	mov.w	r0, r0, lsl #16
    599a:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
    599e:	f440 60a0 	orr.w	r0, r0, #1280	; 0x500
    59a2:	f44f 7180 	mov.w	r1, #256	; 0x100
    59a6:	f2c0 0120 	movt	r1, #32
    59aa:	f7ff fe67 	bl	567c <WrCmdDat>
}
    59ae:	bd08      	pop	{r3, pc}

000059b0 <USB_ResetEP>:
 *                       EPNum.0..3: Address
 *                       EPNum.7:    Dir
 *    Return Value:    None
 */

void USB_ResetEP (uint32_t EPNum) {
    59b0:	b508      	push	{r3, lr}
  WrCmdDat(CMD_SET_EP_STAT(EPAdr(EPNum)), DAT_WR_BYTE(0));
    59b2:	f7ff fe45 	bl	5640 <EPAdr>
    59b6:	ea4f 4000 	mov.w	r0, r0, lsl #16
    59ba:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
    59be:	f440 60a0 	orr.w	r0, r0, #1280	; 0x500
    59c2:	f44f 7180 	mov.w	r1, #256	; 0x100
    59c6:	f7ff fe59 	bl	567c <WrCmdDat>
}
    59ca:	bd08      	pop	{r3, pc}

000059cc <USB_SetStallEP>:
 *                       EPNum.0..3: Address
 *                       EPNum.7:    Dir
 *    Return Value:    None
 */

void USB_SetStallEP (uint32_t EPNum) {
    59cc:	b508      	push	{r3, lr}
  WrCmdDat(CMD_SET_EP_STAT(EPAdr(EPNum)), DAT_WR_BYTE(EP_STAT_ST));
    59ce:	f7ff fe37 	bl	5640 <EPAdr>
    59d2:	ea4f 4000 	mov.w	r0, r0, lsl #16
    59d6:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
    59da:	f440 60a0 	orr.w	r0, r0, #1280	; 0x500
    59de:	f44f 7180 	mov.w	r1, #256	; 0x100
    59e2:	f2c0 0101 	movt	r1, #1
    59e6:	f7ff fe49 	bl	567c <WrCmdDat>
}
    59ea:	bd08      	pop	{r3, pc}

000059ec <USB_ClrStallEP>:
 *                       EPNum.0..3: Address
 *                       EPNum.7:    Dir
 *    Return Value:    None
 */

void USB_ClrStallEP (uint32_t EPNum) {
    59ec:	b508      	push	{r3, lr}
  WrCmdDat(CMD_SET_EP_STAT(EPAdr(EPNum)), DAT_WR_BYTE(0));
    59ee:	f7ff fe27 	bl	5640 <EPAdr>
    59f2:	ea4f 4000 	mov.w	r0, r0, lsl #16
    59f6:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
    59fa:	f440 60a0 	orr.w	r0, r0, #1280	; 0x500
    59fe:	f44f 7180 	mov.w	r1, #256	; 0x100
    5a02:	f7ff fe3b 	bl	567c <WrCmdDat>
}
    5a06:	bd08      	pop	{r3, pc}

00005a08 <USB_ReadEP>:
 *                       EPNum.7:    Dir
 *                     pData: Pointer to Data Buffer
 *    Return Value:    Number of bytes read
 */

uint32_t USB_ReadEP (uint32_t EPNum, uint8_t *pData) {
    5a08:	b570      	push	{r4, r5, r6, lr}
  uint32_t cnt, n;

  LPC_USB->USBCtrl = ((EPNum & 0x0F) << 2) | CTRL_RD_EN;
    5a0a:	f000 020f 	and.w	r2, r0, #15
    5a0e:	ea4f 0282 	mov.w	r2, r2, lsl #2
    5a12:	f042 0201 	orr.w	r2, r2, #1
    5a16:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    5a1a:	f2c5 0300 	movt	r3, #20480	; 0x5000
    5a1e:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228

  do {
    cnt = LPC_USB->USBRxPLen;
    5a22:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    5a26:	f2c5 0300 	movt	r3, #20480	; 0x5000
    5a2a:	f8d3 4220 	ldr.w	r4, [r3, #544]	; 0x220
  } while ((cnt & PKT_RDY) == 0);
    5a2e:	f414 6f00 	tst.w	r4, #2048	; 0x800
    5a32:	d0fa      	beq.n	5a2a <USB_ReadEP+0x22>
  cnt &= PKT_LNGTH_MASK;
    5a34:	ea4f 5484 	mov.w	r4, r4, lsl #22
    5a38:	ea4f 5494 	mov.w	r4, r4, lsr #22

  for (n = 0; n < (cnt + 3) / 4; n++) {
    5a3c:	f104 0603 	add.w	r6, r4, #3
    5a40:	08b6      	lsrs	r6, r6, #2
    5a42:	d00d      	beq.n	5a60 <USB_ReadEP+0x58>
    5a44:	f04f 0300 	mov.w	r3, #0
    *((__packed uint32_t *)pData) = LPC_USB->USBRxData;
    5a48:	f44f 4540 	mov.w	r5, #49152	; 0xc000
    5a4c:	f2c5 0500 	movt	r5, #20480	; 0x5000
    5a50:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
    5a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  do {
    cnt = LPC_USB->USBRxPLen;
  } while ((cnt & PKT_RDY) == 0);
  cnt &= PKT_LNGTH_MASK;

  for (n = 0; n < (cnt + 3) / 4; n++) {
    5a58:	f103 0301 	add.w	r3, r3, #1
    5a5c:	42b3      	cmp	r3, r6
    5a5e:	d1f7      	bne.n	5a50 <USB_ReadEP+0x48>
    *((__packed uint32_t *)pData) = LPC_USB->USBRxData;
    pData += 4;
  }
  LPC_USB->USBCtrl = 0;
    5a60:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    5a64:	f2c5 0300 	movt	r3, #20480	; 0x5000
    5a68:	f04f 0200 	mov.w	r2, #0
    5a6c:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228

  if (((EP_MSK_ISO >> EPNum) & 1) == 0) {   /* Non-Isochronous Endpoint */
    5a70:	f241 2348 	movw	r3, #4680	; 0x1248
    5a74:	fa43 f300 	asr.w	r3, r3, r0
    5a78:	f013 0f01 	tst.w	r3, #1
    5a7c:	d105      	bne.n	5a8a <USB_ReadEP+0x82>
    WrCmdEP(EPNum, CMD_CLR_BUF);
    5a7e:	f44f 61a0 	mov.w	r1, #1280	; 0x500
    5a82:	f2c0 01f2 	movt	r1, #242	; 0xf2
    5a86:	f7ff fe21 	bl	56cc <WrCmdEP>
  }

  return (cnt);
}
    5a8a:	4620      	mov	r0, r4
    5a8c:	bd70      	pop	{r4, r5, r6, pc}
    5a8e:	bf00      	nop

00005a90 <USB_WriteEP>:
 *                     pData: Pointer to Data Buffer
 *                     cnt:   Number of bytes to write
 *    Return Value:    Number of bytes written
 */

uint32_t USB_WriteEP (uint32_t EPNum, uint8_t *pData, uint32_t cnt) {
    5a90:	b570      	push	{r4, r5, r6, lr}
    5a92:	4614      	mov	r4, r2
  uint32_t n;

  LPC_USB->USBCtrl = ((EPNum & 0x0F) << 2) | CTRL_WR_EN;
    5a94:	f000 020f 	and.w	r2, r0, #15
    5a98:	ea4f 0282 	mov.w	r2, r2, lsl #2
    5a9c:	f042 0202 	orr.w	r2, r2, #2
    5aa0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    5aa4:	f2c5 0300 	movt	r3, #20480	; 0x5000
    5aa8:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228

  LPC_USB->USBTxPLen = cnt;
    5aac:	f8c3 4224 	str.w	r4, [r3, #548]	; 0x224

  for (n = 0; n < (cnt + 3) / 4; n++) {
    5ab0:	f104 0603 	add.w	r6, r4, #3
    5ab4:	08b6      	lsrs	r6, r6, #2
    5ab6:	d00d      	beq.n	5ad4 <USB_WriteEP+0x44>
    5ab8:	f04f 0300 	mov.w	r3, #0
    LPC_USB->USBTxData = *((__packed uint32_t *)pData);
    5abc:	f44f 4540 	mov.w	r5, #49152	; 0xc000
    5ac0:	f2c5 0500 	movt	r5, #20480	; 0x5000
    5ac4:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    5ac8:	f8c5 221c 	str.w	r2, [r5, #540]	; 0x21c

  LPC_USB->USBCtrl = ((EPNum & 0x0F) << 2) | CTRL_WR_EN;

  LPC_USB->USBTxPLen = cnt;

  for (n = 0; n < (cnt + 3) / 4; n++) {
    5acc:	f103 0301 	add.w	r3, r3, #1
    5ad0:	42b3      	cmp	r3, r6
    5ad2:	d1f7      	bne.n	5ac4 <USB_WriteEP+0x34>
    LPC_USB->USBTxData = *((__packed uint32_t *)pData);
    pData += 4;
  }
  LPC_USB->USBCtrl = 0;
    5ad4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    5ad8:	f2c5 0300 	movt	r3, #20480	; 0x5000
    5adc:	f04f 0200 	mov.w	r2, #0
    5ae0:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
  WrCmdEP(EPNum, CMD_VALID_BUF);
    5ae4:	f44f 61a0 	mov.w	r1, #1280	; 0x500
    5ae8:	f2c0 01fa 	movt	r1, #250	; 0xfa
    5aec:	f7ff fdee 	bl	56cc <WrCmdEP>
  return (cnt);
}
    5af0:	4620      	mov	r0, r4
    5af2:	bd70      	pop	{r4, r5, r6, pc}

00005af4 <USB_IRQHandler>:

/*
 *  USB Interrupt Service Routine
 */

extern void USB_IRQHandler (void) {
    5af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
//	xprintf("USB_IRQ" " (%s:%d)\n",_F_,_L_);

  uint32_t disr, val, n, m;
  uint32_t episr, episrCur;

  disr = LPC_USB->USBDevIntSt;       /* Device Interrupt Status */
    5af8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    5afc:	f2c5 0300 	movt	r3, #20480	; 0x5000
    5b00:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200

  /* Device Status Interrupt (Reset, Connect change, Suspend/Resume) */
  if (disr & DEV_STAT_INT) {
    5b04:	f013 0f08 	tst.w	r3, #8
    5b08:	d01c      	beq.n	5b44 <USB_IRQHandler+0x50>
    LPC_USB->USBDevIntClr = DEV_STAT_INT;
    5b0a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    5b0e:	f2c5 0300 	movt	r3, #20480	; 0x5000
    5b12:	f04f 0208 	mov.w	r2, #8
    5b16:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    WrCmd(CMD_GET_DEV_STAT);
    5b1a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
    5b1e:	f2c0 00fe 	movt	r0, #254	; 0xfe
    5b22:	f7ff fd97 	bl	5654 <WrCmd>
    val = RdCmdDat(DAT_GET_DEV_STAT);       /* Device Status */
    5b26:	f44f 7000 	mov.w	r0, #512	; 0x200
    5b2a:	f2c0 00fe 	movt	r0, #254	; 0xfe
    5b2e:	f7ff fdfd 	bl	572c <RdCmdDat>
    if (val & DEV_RST) {                    /* Reset */
    5b32:	f010 0f10 	tst.w	r0, #16
    5b36:	d05d      	beq.n	5bf4 <USB_IRQHandler+0x100>
      USB_Reset();
    5b38:	f7ff fe22 	bl	5780 <USB_Reset>
#if   USB_RESET_EVENT
      USB_Reset_Event();
    5b3c:	f000 f87c 	bl	5c38 <USB_Reset_Event>
    5b40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    USB_Error_Event(val);
  }
#endif

  /* Endpoint's Slow Interrupt */
  if (disr & EP_SLOW_INT) {
    5b44:	f013 0f04 	tst.w	r3, #4
    5b48:	d054      	beq.n	5bf4 <USB_IRQHandler+0x100>
    episrCur = 0;
    episr    = LPC_USB->USBEpIntSt;
    5b4a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    5b4e:	f2c5 0300 	movt	r3, #20480	; 0x5000
    5b52:	f8d3 7230 	ldr.w	r7, [r3, #560]	; 0x230
    for (n = 0; n < USB_EP_NUM; n++) {      /* Check All Endpoints */
      if (episr == episrCur) break;         /* break if all EP interrupts handled */
    5b56:	2f00      	cmp	r7, #0
    5b58:	d044      	beq.n	5be4 <USB_IRQHandler+0xf0>
    5b5a:	f04f 0601 	mov.w	r6, #1
    5b5e:	f04f 0400 	mov.w	r4, #0
  }
#endif

  /* Endpoint's Slow Interrupt */
  if (disr & EP_SLOW_INT) {
    episrCur = 0;
    5b62:	46a0      	mov	r8, r4
      if (episr == episrCur) break;         /* break if all EP interrupts handled */
      if (episr & (1 << n)) {
        episrCur |= (1 << n);
        m = n >> 1;
  
        LPC_USB->USBEpIntClr = (1 << n);
    5b64:	f44f 4540 	mov.w	r5, #49152	; 0xc000
    5b68:	f2c5 0500 	movt	r5, #20480	; 0x5000
          }
          if (USB_P_EP[m]) {
            USB_P_EP[m](USB_EVT_OUT);
          }
        } else {                            /* IN Endpoint */
          if (USB_P_EP[m]) {
    5b6c:	f246 195c 	movw	r9, #24924	; 0x615c
    5b70:	f2c0 0902 	movt	r9, #2
    5b74:	e005      	b.n	5b82 <USB_IRQHandler+0x8e>
  /* Endpoint's Slow Interrupt */
  if (disr & EP_SLOW_INT) {
    episrCur = 0;
    episr    = LPC_USB->USBEpIntSt;
    for (n = 0; n < USB_EP_NUM; n++) {      /* Check All Endpoints */
      if (episr == episrCur) break;         /* break if all EP interrupts handled */
    5b76:	f104 0401 	add.w	r4, r4, #1
    5b7a:	f106 0601 	add.w	r6, r6, #1
    5b7e:	45b8      	cmp	r8, r7
    5b80:	d030      	beq.n	5be4 <USB_IRQHandler+0xf0>
    5b82:	4622      	mov	r2, r4
      if (episr & (1 << n)) {
    5b84:	f04f 0301 	mov.w	r3, #1
    5b88:	fa03 f304 	lsl.w	r3, r3, r4
    5b8c:	423b      	tst	r3, r7
    5b8e:	d027      	beq.n	5be0 <USB_IRQHandler+0xec>
        episrCur |= (1 << n);
    5b90:	ea48 0803 	orr.w	r8, r8, r3
        m = n >> 1;
    5b94:	ea4f 0154 	mov.w	r1, r4, lsr #1
  
        LPC_USB->USBEpIntClr = (1 << n);
    5b98:	f8c5 3238 	str.w	r3, [r5, #568]	; 0x238
        while ((LPC_USB->USBDevIntSt & CDFULL_INT) == 0);
    5b9c:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
    5ba0:	f013 0f20 	tst.w	r3, #32
    5ba4:	d0fa      	beq.n	5b9c <USB_IRQHandler+0xa8>
        val = LPC_USB->USBCmdData;
    5ba6:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
  
        if ((n & 1) == 0) {                 /* OUT Endpoint */
    5baa:	f012 0f01 	tst.w	r2, #1
    5bae:	d111      	bne.n	5bd4 <USB_IRQHandler+0xe0>
          if (n == 0) {                     /* Control OUT Endpoint */
    5bb0:	b94c      	cbnz	r4, 5bc6 <USB_IRQHandler+0xd2>
            if (val & EP_SEL_STP) {         /* Setup Packet */
    5bb2:	f013 0f04 	tst.w	r3, #4
    5bb6:	d006      	beq.n	5bc6 <USB_IRQHandler+0xd2>
              if (USB_P_EP[0]) {
    5bb8:	f8d9 3000 	ldr.w	r3, [r9]
    5bbc:	b11b      	cbz	r3, 5bc6 <USB_IRQHandler+0xd2>
                USB_P_EP[0](USB_EVT_SETUP);
    5bbe:	f04f 0001 	mov.w	r0, #1
    5bc2:	4798      	blx	r3
    5bc4:	e7d7      	b.n	5b76 <USB_IRQHandler+0x82>
                continue;
              }
            }
          }
          if (USB_P_EP[m]) {
    5bc6:	f859 3021 	ldr.w	r3, [r9, r1, lsl #2]
    5bca:	b14b      	cbz	r3, 5be0 <USB_IRQHandler+0xec>
            USB_P_EP[m](USB_EVT_OUT);
    5bcc:	f04f 0002 	mov.w	r0, #2
    5bd0:	4798      	blx	r3
    5bd2:	e005      	b.n	5be0 <USB_IRQHandler+0xec>
          }
        } else {                            /* IN Endpoint */
          if (USB_P_EP[m]) {
    5bd4:	f859 3021 	ldr.w	r3, [r9, r1, lsl #2]
    5bd8:	b113      	cbz	r3, 5be0 <USB_IRQHandler+0xec>
            USB_P_EP[m](USB_EVT_IN);
    5bda:	f04f 0003 	mov.w	r0, #3
    5bde:	4798      	blx	r3

  /* Endpoint's Slow Interrupt */
  if (disr & EP_SLOW_INT) {
    episrCur = 0;
    episr    = LPC_USB->USBEpIntSt;
    for (n = 0; n < USB_EP_NUM; n++) {      /* Check All Endpoints */
    5be0:	2e1f      	cmp	r6, #31
    5be2:	d9c8      	bls.n	5b76 <USB_IRQHandler+0x82>
            USB_P_EP[m](USB_EVT_IN);
          }
        }
      }
    }
    LPC_USB->USBDevIntClr = EP_SLOW_INT;
    5be4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    5be8:	f2c5 0300 	movt	r3, #20480	; 0x5000
    5bec:	f04f 0204 	mov.w	r2, #4
    5bf0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    5bf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00005bf8 <USB_EndPoint2>:
 *  USB Endpoint 2 Event Callback
 *   Called automatically on USB Endpoint 2 Event
 *    Parameter:       event
 */

void USB_EndPoint2 (uint32_t event) {
    5bf8:	b508      	push	{r3, lr}

  switch (event) {
    5bfa:	2802      	cmp	r0, #2
    5bfc:	d002      	beq.n	5c04 <USB_EndPoint2+0xc>
    5bfe:	2803      	cmp	r0, #3
    5c00:	d105      	bne.n	5c0e <USB_EndPoint2+0x16>
    5c02:	e002      	b.n	5c0a <USB_EndPoint2+0x12>
    case USB_EVT_OUT:
      CDC_BulkOut ();                /* data received from Host */
    5c04:	f7fe fea6 	bl	4954 <CDC_BulkOut>
      break;
    5c08:	bd08      	pop	{r3, pc}
    case USB_EVT_IN:
      CDC_BulkIn ();                 /* data expected from Host */
    5c0a:	f7fe fe83 	bl	4914 <CDC_BulkIn>
    5c0e:	bd08      	pop	{r3, pc}

00005c10 <USB_EndPoint1>:
 *  USB Endpoint 1 Event Callback
 *   Called automatically on USB Endpoint 1 Event
 *    Parameter:       event
 */

void USB_EndPoint1 (uint32_t event) {
    5c10:	b508      	push	{r3, lr}
  uint16_t temp;
  static uint16_t serialState;

  switch (event) {
    5c12:	2803      	cmp	r0, #3
    5c14:	d10f      	bne.n	5c36 <USB_EndPoint1+0x26>
    case USB_EVT_IN:
      temp = CDC_GetSerialState();
    5c16:	f7fe fea7 	bl	4968 <CDC_GetSerialState>
      if (serialState != temp) {
    5c1a:	f240 53ce 	movw	r3, #1486	; 0x5ce
    5c1e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5c22:	881b      	ldrh	r3, [r3, #0]
    5c24:	4283      	cmp	r3, r0
    5c26:	d006      	beq.n	5c36 <USB_EndPoint1+0x26>
         serialState = temp;
    5c28:	f240 53ce 	movw	r3, #1486	; 0x5ce
    5c2c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5c30:	8018      	strh	r0, [r3, #0]
         CDC_NotificationIn();            /* send SERIAL_STATE notification */
    5c32:	f7fe ff03 	bl	4a3c <CDC_NotificationIn>
    5c36:	bd08      	pop	{r3, pc}

00005c38 <USB_Reset_Event>:
 *  USB Reset Event Callback
 *   Called automatically on USB Reset Event
 */

#if USB_RESET_EVENT
void USB_Reset_Event (void) {
    5c38:	b508      	push	{r3, lr}
  USB_ResetCore();
    5c3a:	f7fe ff5b 	bl	4af4 <USB_ResetCore>
}
    5c3e:	bd08      	pop	{r3, pc}

00005c40 <USB_Configure_Event>:
void USB_Configure_Event (void) {

  if (USB_Configuration) {                  /* Check if USB is configured */
    /* add your code here */
  }
}
    5c40:	4770      	bx	lr
    5c42:	bf00      	nop

00005c44 <startup_delay>:

void startup_delay(void){
    5c44:	b082      	sub	sp, #8
	volatile unsigned long i;
	for (i = 0; i < 5; i++) { ; }
    5c46:	f04f 0300 	mov.w	r3, #0
    5c4a:	9301      	str	r3, [sp, #4]
    5c4c:	9b01      	ldr	r3, [sp, #4]
    5c4e:	2b04      	cmp	r3, #4
    5c50:	d806      	bhi.n	5c60 <startup_delay+0x1c>
    5c52:	9b01      	ldr	r3, [sp, #4]
    5c54:	f103 0301 	add.w	r3, r3, #1
    5c58:	9301      	str	r3, [sp, #4]
    5c5a:	9b01      	ldr	r3, [sp, #4]
    5c5c:	2b04      	cmp	r3, #4
    5c5e:	d9f8      	bls.n	5c52 <startup_delay+0xe>
}
    5c60:	b002      	add	sp, #8
    5c62:	4770      	bx	lr

00005c64 <_kill>:
int _kill(int pid, int sig)
{
//	xprintf("%s{\n",__func__);
	(void)pid;
	(void)sig; /* avoid warnings */
	errno = EINVAL;
    5c64:	f643 33c8 	movw	r3, #15304	; 0x3bc8
    5c68:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5c6c:	f04f 0216 	mov.w	r2, #22
    5c70:	601a      	str	r2, [r3, #0]
	return -1;
}
    5c72:	f04f 30ff 	mov.w	r0, #4294967295
    5c76:	4770      	bx	lr

00005c78 <_exit>:

void _exit(int status)
{
    5c78:	b508      	push	{r3, lr}
    5c7a:	4601      	mov	r1, r0
	xprintf("_exit called with parameter %d\n", status);
    5c7c:	f246 109c 	movw	r0, #24988	; 0x619c
    5c80:	f2c0 0002 	movt	r0, #2
    5c84:	f000 fc26 	bl	64d4 <xprintf>
    5c88:	e7fe      	b.n	5c88 <_exit+0x10>
    5c8a:	bf00      	nop

00005c8c <_getpid>:

int _getpid(void)
{
//	xprintf("%s{\n",__func__);
	return 1;
}
    5c8c:	f04f 0001 	mov.w	r0, #1
    5c90:	4770      	bx	lr
    5c92:	bf00      	nop

00005c94 <get_stack_top>:
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
    5c94:	f3ef 8008 	mrs	r0, MSP
char* get_stack_top(void)
{
//	xprintf("%s{\n",__func__);
	return (char*) __get_MSP();
	// return (char*) __get_PSP();
}
    5c98:	4770      	bx	lr
    5c9a:	bf00      	nop

00005c9c <_sbrk>:

caddr_t _sbrk(int incr)
{
    5c9c:	b538      	push	{r3, r4, r5, lr}
//	xprintf("%s{\n",__func__);
	char *prev_heap_end;
	if (heap_end == 0) {
    5c9e:	f240 53d0 	movw	r3, #1488	; 0x5d0
    5ca2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5ca6:	681b      	ldr	r3, [r3, #0]
    5ca8:	b943      	cbnz	r3, 5cbc <_sbrk+0x20>
		heap_end = &_end;
    5caa:	f240 53d0 	movw	r3, #1488	; 0x5d0
    5cae:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5cb2:	f643 32d0 	movw	r2, #15312	; 0x3bd0
    5cb6:	f2c1 0200 	movt	r2, #4096	; 0x1000
    5cba:	601a      	str	r2, [r3, #0]
	}
	prev_heap_end = heap_end;
    5cbc:	f240 53d0 	movw	r3, #1488	; 0x5d0
    5cc0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5cc4:	681c      	ldr	r4, [r3, #0]
#if 1
	if (heap_end + incr > get_stack_top()) {
    5cc6:	1825      	adds	r5, r4, r0
    5cc8:	f7ff ffe4 	bl	5c94 <get_stack_top>
    5ccc:	4285      	cmp	r5, r0
    5cce:	d907      	bls.n	5ce0 <_sbrk+0x44>
		xprintf("Heap and stack collision\n");
    5cd0:	f246 10bc 	movw	r0, #25020	; 0x61bc
    5cd4:	f2c0 0002 	movt	r0, #2
    5cd8:	f000 fbfc 	bl	64d4 <xprintf>
		abort();
    5cdc:	f018 feae 	bl	1ea3c <abort>
	}
#endif
	heap_end += incr;
    5ce0:	f240 53d0 	movw	r3, #1488	; 0x5d0
    5ce4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5ce8:	601d      	str	r5, [r3, #0]
	return (caddr_t) prev_heap_end;
}
    5cea:	4620      	mov	r0, r4
    5cec:	bd38      	pop	{r3, r4, r5, pc}
    5cee:	bf00      	nop

00005cf0 <_close>:
int _close(int file)
{
//	xprintf("%s{\n",__func__);
	(void)file; /* avoid warning */
	return -1;
}
    5cf0:	f04f 30ff 	mov.w	r0, #4294967295
    5cf4:	4770      	bx	lr
    5cf6:	bf00      	nop

00005cf8 <_fstat>:

int _fstat(int file, struct stat *st)
{
//	xprintf("%s{\n",__func__);
	(void)file; /* avoid warning */
	st->st_mode = S_IFCHR;
    5cf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    5cfc:	604b      	str	r3, [r1, #4]
	return 0;
}
    5cfe:	f04f 0000 	mov.w	r0, #0
    5d02:	4770      	bx	lr

00005d04 <_isatty>:
int _isatty(int file)
{
//	xprintf("%s{\n",__func__);
	(void)file; /* avoid warning */
	return 1;
}
    5d04:	f04f 0001 	mov.w	r0, #1
    5d08:	4770      	bx	lr
    5d0a:	bf00      	nop

00005d0c <_lseek>:
//	xprintf("%s{\n",__func__);
	(void)file; /* avoid warning */
	(void)ptr;  /* avoid warning */
	(void)dir;  /* avoid warning */
	return 0;
}
    5d0c:	f04f 0000 	mov.w	r0, #0
    5d10:	4770      	bx	lr
    5d12:	bf00      	nop

00005d14 <_read>:

int _read(int file, char *ptr, int len)
{
    5d14:	b508      	push	{r3, lr}
//	xprintf("len=%d,func=%s{\n",len,__func__);
//	printf("len=%d,ptr=%s,func=%s{\n",len,ptr,__func__);
//	switch (file) {
//		case STDIN_FILENO:
//			UART_Receive(LPC_UART0, ptr, len, BLOCKING);
			len = UART_Receive(LPC_UART0, ptr, 1, BLOCKING);
    5d16:	f44f 4040 	mov.w	r0, #49152	; 0xc000
    5d1a:	f2c4 0000 	movt	r0, #16384	; 0x4000
    5d1e:	f04f 0201 	mov.w	r2, #1
    5d22:	4613      	mov	r3, r2
    5d24:	f7fe fb20 	bl	4368 <UART_Receive>
			return -1;
	}
	return num;
#endif
//	return 0;
}
    5d28:	bd08      	pop	{r3, pc}
    5d2a:	bf00      	nop

00005d2c <_write>:

int _write(int file, char *ptr, int len)
{
    5d2c:	b570      	push	{r4, r5, r6, lr}
    5d2e:	460c      	mov	r4, r1
	int todo;
	(void)file; /* avoid warning */
	for (todo = 0; todo < len; todo++) {
    5d30:	1e16      	subs	r6, r2, #0
    5d32:	dd06      	ble.n	5d42 <_write+0x16>
	return num;
#endif
//	return 0;
}

int _write(int file, char *ptr, int len)
    5d34:	198d      	adds	r5, r1, r6
{
	int todo;
	(void)file; /* avoid warning */
	for (todo = 0; todo < len; todo++) {
		xputc(*ptr++);
    5d36:	f814 0b01 	ldrb.w	r0, [r4], #1
    5d3a:	f000 fb61 	bl	6400 <xputc>

int _write(int file, char *ptr, int len)
{
	int todo;
	(void)file; /* avoid warning */
	for (todo = 0; todo < len; todo++) {
    5d3e:	42ac      	cmp	r4, r5
    5d40:	d1f9      	bne.n	5d36 <_write+0xa>
		xputc(*ptr++);
	}
	return len;
}
    5d42:	4630      	mov	r0, r6
    5d44:	bd70      	pop	{r4, r5, r6, pc}
    5d46:	bf00      	nop

00005d48 <SystemInit>:
 *         Initialize the System.
 */
void SystemInit (void)
{
#if (CLOCK_SETUP)                       /* Clock Setup                        */
  LPC_SC->SCS       = SCS_Val; /* Main oscillator enable */
    5d48:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    5d4c:	f2c4 030f 	movt	r3, #16399	; 0x400f
    5d50:	f04f 0220 	mov.w	r2, #32
    5d54:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
  if (SCS_Val & (1 << 5)) {             /* If Main Oscillator is enabled      */
    while ((LPC_SC->SCS & (1<<6)) == 0);/* Wait for Oscillator to be ready    */
    5d58:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    5d5c:	f2c4 020f 	movt	r2, #16399	; 0x400f
    5d60:	f8d2 31a0 	ldr.w	r3, [r2, #416]	; 0x1a0
    5d64:	f013 0f40 	tst.w	r3, #64	; 0x40
    5d68:	d0fa      	beq.n	5d60 <SystemInit+0x18>
  }

  LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider -- PLL0 output is divided by 4 to produce the CPU clock */
    5d6a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    5d6e:	f2c4 030f 	movt	r3, #16399	; 0x400f
    5d72:	f04f 0202 	mov.w	r2, #2
    5d76:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

  LPC_SC->PCLKSEL0  = 0;     /* Peripheral Clock Selection -- none!         */
    5d7a:	f04f 0200 	mov.w	r2, #0
    5d7e:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  LPC_SC->PCLKSEL1  = 0;
    5d82:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

  LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source for PLL0 -- Selects the main oscillator as the PLL0 clock source */
    5d86:	f04f 0001 	mov.w	r0, #1
    5d8a:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c

#if (PLL0_SETUP)
  LPC_SC->PLL0CFG   = PLL0CFG_Val; /* configure PLL0 -- MSEL0 = 99; NSEL0 = 5, for 12MHz xtal: (24*10^6 * (99+1)) / (2 * 12*10^6) = 400 */
    5d8e:	f04f 0208 	mov.w	r2, #8
    5d92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  LPC_SC->PLL0FEED  = 0xAA;
    5d96:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    5d9a:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    5d9e:	f04f 0255 	mov.w	r2, #85	; 0x55
    5da2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  LPC_SC->PLL0CON   = 0x01;             /* PLL0 Enable                        */
    5da6:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
  LPC_SC->PLL0FEED  = 0xAA;
    5daa:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    5dae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  while (!(LPC_SC->PLL0STAT & (1<<26)));/* Wait for PLOCK0                    */
    5db2:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    5db6:	f2c4 020f 	movt	r2, #16399	; 0x400f
    5dba:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    5dbe:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
    5dc2:	d0fa      	beq.n	5dba <SystemInit+0x72>

  LPC_SC->PLL0CON   = 0x03;             /* PLL0 Enable & Connect              */
    5dc4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    5dc8:	f2c4 030f 	movt	r3, #16399	; 0x400f
    5dcc:	f04f 0203 	mov.w	r2, #3
    5dd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  LPC_SC->PLL0FEED  = 0xAA;
    5dd4:	f04f 02aa 	mov.w	r2, #170	; 0xaa
    5dd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  LPC_SC->PLL0FEED  = 0x55;
    5ddc:	f04f 0255 	mov.w	r2, #85	; 0x55
    5de0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  while (!(LPC_SC->PLL0STAT & ((1<<25) | (1<<24))));/* Wait for PLLC0_STAT & PLLE0_STAT */
    5de4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    5de8:	f2c4 020f 	movt	r2, #16399	; 0x400f
    5dec:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    5df0:	f013 7f40 	tst.w	r3, #50331648	; 0x3000000
    5df4:	d0fa      	beq.n	5dec <SystemInit+0xa4>
#endif

#if (PLL1_SETUP)
  LPC_SC->PLL1CFG   = PLL1CFG_Val; /* configure PLL1 -- MSEL1 = 3; PSEL1 = 1, for 12MHz xtal: (2 * 4 * 12*10^6) / 2 = 48MHz */
    5df6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    5dfa:	f2c4 030f 	movt	r3, #16399	; 0x400f
    5dfe:	f04f 0222 	mov.w	r2, #34	; 0x22
    5e02:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  LPC_SC->PLL0FEED  = 0xAA;
    5e06:	f04f 02aa 	mov.w	r2, #170	; 0xaa
    5e0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  LPC_SC->PLL1FEED  = 0xAA;
    5e0e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    5e12:	f04f 0155 	mov.w	r1, #85	; 0x55
    5e16:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

  LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
    5e1a:	f04f 0001 	mov.w	r0, #1
    5e1e:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
  LPC_SC->PLL1FEED  = 0xAA;
    5e22:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    5e26:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
  while (!(LPC_SC->PLL1STAT & (1<<10)));/* Wait for PLOCK1                    */
    5e2a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    5e2e:	f2c4 020f 	movt	r2, #16399	; 0x400f
    5e32:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    5e36:	f413 6f80 	tst.w	r3, #1024	; 0x400
    5e3a:	d0fa      	beq.n	5e32 <SystemInit+0xea>

  LPC_SC->PLL1CON   = 0x03;             /* PLL1 Enable & Connect              */
    5e3c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    5e40:	f2c4 030f 	movt	r3, #16399	; 0x400f
    5e44:	f04f 0203 	mov.w	r2, #3
    5e48:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  LPC_SC->PLL1FEED  = 0xAA;
    5e4c:	f04f 02aa 	mov.w	r2, #170	; 0xaa
    5e50:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  LPC_SC->PLL1FEED  = 0x55;
    5e54:	f04f 0255 	mov.w	r2, #85	; 0x55
    5e58:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  while (!(LPC_SC->PLL1STAT & ((1<< 9) | (1<< 8))));/* Wait for PLLC1_STAT & PLLE1_STAT */
    5e5c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
    5e60:	f2c4 020f 	movt	r2, #16399	; 0x400f
    5e64:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    5e68:	f413 7f40 	tst.w	r3, #768	; 0x300
    5e6c:	d0fa      	beq.n	5e64 <SystemInit+0x11c>
#else
  LPC_SC->USBCLKCFG = USBCLKCFG_Val;    /* Setup USB Clock Divider            */
#endif

  LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
    5e6e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    5e72:	f2c4 030f 	movt	r3, #16399	; 0x400f
    5e76:	f04f 0200 	mov.w	r2, #0
    5e7a:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  LPC_SC->PCLKSEL1  = PCLKSEL1_Val;
    5e7e:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
  LPC_SC->PCONP     = PCONP_Val;        /* Power Control for Peripherals      */
    5e82:	f248 71de 	movw	r1, #34782	; 0x87de
    5e86:	f2c0 4128 	movt	r1, #1064	; 0x428
    5e8a:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
  /* Use next 2 lines (and comment 3rd) to test on P1.27 the CPU clock signal. Should be 25MHz on pin because it's divided by 4 */
#if 0
  LPC_PINCON->PINSEL3 |= 1 << 22; /* Set P1_27 to 01 - CLKOUT */
  LPC_SC->CLKOUTCFG = CLKPWR_CLKOUTCFG_BITMASK & (CLKPWR_CLKOUTCFG_CLKOUTSEL_CPU | CLKPWR_CLKOUTCFG_CLKOUTDIV(3) | CLKPWR_CLKOUTCFG_CLKOUT_EN);
#endif
  LPC_SC->CLKOUTCFG = 0;    /* Clock Output Configuration -- disable */
    5e8e:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
#endif

#if (FLASH_SETUP == 1)                  /* Flash Accelerator Setup            */
  LPC_SC->FLASHCFG  = FLASHCFG_Val;
    5e92:	f245 023a 	movw	r2, #20538	; 0x503a
    5e96:	601a      	str	r2, [r3, #0]
#endif
}
    5e98:	4770      	bx	lr
    5e9a:	bf00      	nop

00005e9c <comm_init>:
		UARTPutChar(LPC_UART0, *s++);
	}
}
#endif

void comm_init(void){
    5e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5ea0:	b084      	sub	sp, #16

	UART_LINE_LEN=0;
    5ea2:	f240 53d4 	movw	r3, #1492	; 0x5d4
    5ea6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5eaa:	f04f 0400 	mov.w	r4, #0
    5eae:	601c      	str	r4, [r3, #0]
//	UART_FIFO_CFG_Type UARTFIFOConfigStruct;
	// Pin configuration for UART0
	PINSEL_CFG_Type PinCfg;

	//Initialize UART0 pin connect
	PinCfg.Funcnum = 1;
    5eb0:	f04f 0601 	mov.w	r6, #1
    5eb4:	f88d 6002 	strb.w	r6, [sp, #2]
	PinCfg.OpenDrain = 0;
    5eb8:	f88d 4004 	strb.w	r4, [sp, #4]
	PinCfg.Pinmode = 0;
    5ebc:	f88d 4003 	strb.w	r4, [sp, #3]
	PinCfg.Pinnum = 2;
    5ec0:	f04f 0802 	mov.w	r8, #2
    5ec4:	f88d 8001 	strb.w	r8, [sp, #1]
	PinCfg.Portnum = 0;
    5ec8:	ad04      	add	r5, sp, #16
    5eca:	f805 4d10 	strb.w	r4, [r5, #-16]!
	PINSEL_ConfigPin(&PinCfg);
    5ece:	4668      	mov	r0, sp
    5ed0:	f7fd fb28 	bl	3524 <PINSEL_ConfigPin>
	PinCfg.Pinnum = 3;
    5ed4:	f04f 0703 	mov.w	r7, #3
    5ed8:	f88d 7001 	strb.w	r7, [sp, #1]
	PINSEL_ConfigPin(&PinCfg);
    5edc:	4668      	mov	r0, sp
    5ede:	f7fd fb21 	bl	3524 <PINSEL_ConfigPin>

	UART_ConfigStructInit(&UARTConfigStruct);
    5ee2:	a802      	add	r0, sp, #8
    5ee4:	f7fe f956 	bl	4194 <UART_ConfigStructInit>
	 * Baudrate = 115200bps
	 * 8 data bit
	 * 1 Stop bit
	 * None parity
	 */
	UARTConfigStruct.Baud_rate = 512000;
    5ee8:	f44f 23fa 	mov.w	r3, #512000	; 0x7d000
    5eec:	9302      	str	r3, [sp, #8]
//	UARTConfigStruct.Baud_rate = 115200;
	UARTConfigStruct.Parity = UART_PARITY_NONE;
    5eee:	f88d 400c 	strb.w	r4, [sp, #12]
	UARTConfigStruct.Stopbits = UART_STOPBIT_1;
    5ef2:	f88d 400e 	strb.w	r4, [sp, #14]
	UARTConfigStruct.Databits = UART_DATABIT_8;
    5ef6:	f88d 700d 	strb.w	r7, [sp, #13]

	// Initialize UART0 peripheral with given to corresponding parameter
	UART_Init(LPC_UART0, &UARTConfigStruct);
    5efa:	f44f 4540 	mov.w	r5, #49152	; 0xc000
    5efe:	f2c4 0500 	movt	r5, #16384	; 0x4000
    5f02:	4628      	mov	r0, r5
    5f04:	a902      	add	r1, sp, #8
    5f06:	f7fd ff07 	bl	3d18 <UART_Init>

	// Enable UART Transmit
	UART_TxCmd(LPC_UART0, ENABLE);
    5f0a:	4628      	mov	r0, r5
    5f0c:	4631      	mov	r1, r6
    5f0e:	f7fe fb95 	bl	463c <UART_TxCmd>
#if 1
    /* Enable UART Rx interrupt */
	UART_IntConfig((LPC_UART_TypeDef *)LPC_UART0, UART_INTCFG_RBR, ENABLE);
    5f12:	4628      	mov	r0, r5
    5f14:	4621      	mov	r1, r4
    5f16:	4632      	mov	r2, r6
    5f18:	f7fe fa6a 	bl	43f0 <UART_IntConfig>
	/* Enable UART line status interrupt */
	UART_IntConfig((LPC_UART_TypeDef *)LPC_UART0, UART_INTCFG_RLS, ENABLE);
    5f1c:	4628      	mov	r0, r5
    5f1e:	4641      	mov	r1, r8
    5f20:	4632      	mov	r2, r6
    5f22:	f7fe fa65 	bl	43f0 <UART_IntConfig>
	/*
	 * Do not enable transmit interrupt here, since it is handled by
	 * UART_Send() function, just to reset Tx Interrupt state for the
	 * first time
	 */
	TxIntStat = RESET;
    5f26:	f643 33c4 	movw	r3, #15300	; 0x3bc4
    5f2a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5f2e:	701c      	strb	r4, [r3, #0]

	// Reset ring buf head and tail idx
	__BUF_RESET(rb.rx_head);
    5f30:	f243 33b4 	movw	r3, #13236	; 0x33b4
    5f34:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5f38:	609c      	str	r4, [r3, #8]
	__BUF_RESET(rb.rx_tail);
    5f3a:	60dc      	str	r4, [r3, #12]
	__BUF_RESET(rb.tx_head);
    5f3c:	601c      	str	r4, [r3, #0]
	__BUF_RESET(rb.tx_tail);
    5f3e:	605c      	str	r4, [r3, #4]
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    5f40:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    5f44:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5f48:	f04f 0250 	mov.w	r2, #80	; 0x50
    5f4c:	f883 2305 	strb.w	r2, [r3, #773]	; 0x305

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    5f50:	f04f 0220 	mov.w	r2, #32
    5f54:	601a      	str	r2, [r3, #0]
    /* preemption = 1, sub-priority = 1 */
    NVIC_SetPriority(UART0_IRQn, 10);
	/* Enable Interrupt for UART0 channel */
    NVIC_EnableIRQ(UART0_IRQn);
#endif
}
    5f56:	b004      	add	sp, #16
    5f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005f5c <UART_IntReceive>:
 * @brief 		UART receive function (ring buffer used)
 * @param[in]	None
 * @return 		None
 *********************************************************************/
void UART_IntReceive(void)
{
    5f5c:	b570      	push	{r4, r5, r6, lr}
    5f5e:	b082      	sub	sp, #8
	while(1){
		// Call UART read function in UART driver
		rLen = UART_Receive((LPC_UART_TypeDef *)LPC_UART0, &tmpc, 1, NONE_BLOCKING);
		// If data received
		if (rLen){
			UART_LINE[UART_LINE_LEN++]=tmpc;
    5f60:	f240 54d4 	movw	r4, #1492	; 0x5d4
    5f64:	f2c1 0400 	movt	r4, #4096	; 0x1000
    5f68:	f641 3508 	movw	r5, #6920	; 0x1b08
    5f6c:	f2c1 0500 	movt	r5, #4096	; 0x1000
			if((tmpc=='\r')||(tmpc=='\n')){
				LINE_READY = 1;
    5f70:	f240 56d8 	movw	r6, #1496	; 0x5d8
    5f74:	f2c1 0600 	movt	r6, #4096	; 0x1000
		GPIO_ClearValue(LED_3_PORT, LED_3_BIT);
	RX_TOG=!RX_TOG;
*/
	while(1){
		// Call UART read function in UART driver
		rLen = UART_Receive((LPC_UART_TypeDef *)LPC_UART0, &tmpc, 1, NONE_BLOCKING);
    5f78:	f44f 4040 	mov.w	r0, #49152	; 0xc000
    5f7c:	f2c4 0000 	movt	r0, #16384	; 0x4000
    5f80:	f10d 0107 	add.w	r1, sp, #7
    5f84:	f04f 0201 	mov.w	r2, #1
    5f88:	f04f 0300 	mov.w	r3, #0
    5f8c:	f7fe f9ec 	bl	4368 <UART_Receive>
		// If data received
		if (rLen){
    5f90:	2800      	cmp	r0, #0
    5f92:	d039      	beq.n	6008 <__cs3_region_size_ram+0x8>
			UART_LINE[UART_LINE_LEN++]=tmpc;
    5f94:	6823      	ldr	r3, [r4, #0]
    5f96:	f89d 2007 	ldrb.w	r2, [sp, #7]
    5f9a:	54ea      	strb	r2, [r5, r3]
    5f9c:	f103 0301 	add.w	r3, r3, #1
    5fa0:	6023      	str	r3, [r4, #0]
			if((tmpc=='\r')||(tmpc=='\n')){
    5fa2:	2a0a      	cmp	r2, #10
    5fa4:	bf14      	ite	ne
    5fa6:	2300      	movne	r3, #0
    5fa8:	2301      	moveq	r3, #1
    5faa:	2a0d      	cmp	r2, #13
    5fac:	bf08      	it	eq
    5fae:	f043 0301 	orreq.w	r3, r3, #1
    5fb2:	b14b      	cbz	r3, 5fc8 <UART_IntReceive+0x6c>
				LINE_READY = 1;
    5fb4:	f04f 0301 	mov.w	r3, #1
    5fb8:	6033      	str	r3, [r6, #0]
				UART_LINE[UART_LINE_LEN-1]='\0';
    5fba:	6821      	ldr	r1, [r4, #0]
    5fbc:	f101 31ff 	add.w	r1, r1, #4294967295
    5fc0:	f04f 0300 	mov.w	r3, #0
    5fc4:	546b      	strb	r3, [r5, r1]
				UART_LINE_LEN=0;
    5fc6:	6023      	str	r3, [r4, #0]
			}
			/* Check if buffer is more space
			 * If no more space, remaining character will be trimmed out
			 */
			if (!__BUF_IS_FULL(rb.rx_head,rb.rx_tail)){
    5fc8:	f243 33b4 	movw	r3, #13236	; 0x33b4
    5fcc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5fd0:	68d9      	ldr	r1, [r3, #12]
    5fd2:	689b      	ldr	r3, [r3, #8]
    5fd4:	f103 0301 	add.w	r3, r3, #1
    5fd8:	404b      	eors	r3, r1
    5fda:	ea4f 5383 	mov.w	r3, r3, lsl #22
    5fde:	ea4f 5393 	mov.w	r3, r3, lsr #22
    5fe2:	2b00      	cmp	r3, #0
    5fe4:	d0c8      	beq.n	5f78 <UART_IntReceive+0x1c>
				rb.rx[rb.rx_head] = tmpc;
    5fe6:	f243 33b4 	movw	r3, #13236	; 0x33b4
    5fea:	f2c1 0300 	movt	r3, #4096	; 0x1000
    5fee:	6899      	ldr	r1, [r3, #8]
    5ff0:	1859      	adds	r1, r3, r1
    5ff2:	f881 2410 	strb.w	r2, [r1, #1040]	; 0x410
				__BUF_INCR(rb.rx_head);
    5ff6:	689a      	ldr	r2, [r3, #8]
    5ff8:	f102 0201 	add.w	r2, r2, #1
    5ffc:	ea4f 5282 	mov.w	r2, r2, lsl #22
    6000:	ea4f 5292 	mov.w	r2, r2, lsr #22
    6004:	609a      	str	r2, [r3, #8]
    6006:	e7b7      	b.n	5f78 <UART_IntReceive+0x1c>
		// no more data
		else {
			break;
		}
	}
}
    6008:	b002      	add	sp, #8
    600a:	bd70      	pop	{r4, r5, r6, pc}

0000600c <UART_IntTransmit>:
 * @brief 		UART transmit function (ring buffer used)
 * @param[in]	None
 * @return 		None
 *********************************************************************/
void UART_IntTransmit(void)
{
    600c:	b570      	push	{r4, r5, r6, lr}
		GPIO_ClearValue(LED_2_PORT, LED_2_BIT);
	TX_TOG=!TX_TOG;
*/

    // Disable THRE interrupt
    UART_IntConfig((LPC_UART_TypeDef *)LPC_UART0, UART_INTCFG_THRE, DISABLE);
    600e:	f44f 4040 	mov.w	r0, #49152	; 0xc000
    6012:	f2c4 0000 	movt	r0, #16384	; 0x4000
    6016:	f04f 0101 	mov.w	r1, #1
    601a:	f04f 0200 	mov.w	r2, #0
    601e:	f7fe f9e7 	bl	43f0 <UART_IntConfig>

	/* Wait for FIFO buffer empty, transfer UART_TX_FIFO_SIZE bytes
	 * of data or break whenever ring buffers are empty */
	/* Wait until THR empty */
    while (UART_CheckBusy((LPC_UART_TypeDef *)LPC_UART0) == SET);
    6022:	f44f 4440 	mov.w	r4, #49152	; 0xc000
    6026:	f2c4 0400 	movt	r4, #16384	; 0x4000
    602a:	4620      	mov	r0, r4
    602c:	f7fe fafe 	bl	462c <UART_CheckBusy>
    6030:	2801      	cmp	r0, #1
    6032:	d0fa      	beq.n	602a <UART_IntTransmit+0x1e>

	while (!__BUF_IS_EMPTY(rb.tx_head,rb.tx_tail))
    6034:	f243 33b4 	movw	r3, #13236	; 0x33b4
    6038:	f2c1 0300 	movt	r3, #4096	; 0x1000
    603c:	681a      	ldr	r2, [r3, #0]
    603e:	685b      	ldr	r3, [r3, #4]
    6040:	4053      	eors	r3, r2
    6042:	ea4f 5383 	mov.w	r3, r3, lsl #22
    6046:	ea4f 5393 	mov.w	r3, r3, lsr #22
    604a:	b32b      	cbz	r3, 6098 <UART_IntTransmit+0x8c>
    {
        /* Move a piece of data into the transmit FIFO */
    	if (UART_Send((LPC_UART_TypeDef *)LPC_UART0, (uint8_t *)&rb.tx[rb.tx_tail], 1, NONE_BLOCKING)){
    604c:	f243 34b4 	movw	r4, #13236	; 0x33b4
    6050:	f2c1 0400 	movt	r4, #4096	; 0x1000
    6054:	f44f 4540 	mov.w	r5, #49152	; 0xc000
    6058:	f2c4 0500 	movt	r5, #16384	; 0x4000
    605c:	f04f 0601 	mov.w	r6, #1
    6060:	6861      	ldr	r1, [r4, #4]
    6062:	f101 0110 	add.w	r1, r1, #16
    6066:	4628      	mov	r0, r5
    6068:	1861      	adds	r1, r4, r1
    606a:	4632      	mov	r2, r6
    606c:	f04f 0300 	mov.w	r3, #0
    6070:	f7fe f90e 	bl	4290 <UART_Send>
    6074:	b180      	cbz	r0, 6098 <UART_IntTransmit+0x8c>
        /* Update transmit ring FIFO tail pointer */
        __BUF_INCR(rb.tx_tail);
    6076:	6863      	ldr	r3, [r4, #4]
    6078:	f103 0301 	add.w	r3, r3, #1
    607c:	ea4f 5383 	mov.w	r3, r3, lsl #22
    6080:	ea4f 5393 	mov.w	r3, r3, lsr #22
    6084:	6063      	str	r3, [r4, #4]
	/* Wait for FIFO buffer empty, transfer UART_TX_FIFO_SIZE bytes
	 * of data or break whenever ring buffers are empty */
	/* Wait until THR empty */
    while (UART_CheckBusy((LPC_UART_TypeDef *)LPC_UART0) == SET);

	while (!__BUF_IS_EMPTY(rb.tx_head,rb.tx_tail))
    6086:	6823      	ldr	r3, [r4, #0]
    6088:	6862      	ldr	r2, [r4, #4]
    608a:	4053      	eors	r3, r2
    608c:	ea4f 5383 	mov.w	r3, r3, lsl #22
    6090:	ea4f 5393 	mov.w	r3, r3, lsr #22
    6094:	2b00      	cmp	r3, #0
    6096:	d1e3      	bne.n	6060 <UART_IntTransmit+0x54>
    	}
    }

    /* If there is no more data to send, disable the transmit
       interrupt - else enable it or keep it enabled */
	if (__BUF_IS_EMPTY(rb.tx_head, rb.tx_tail)) {
    6098:	f243 33b4 	movw	r3, #13236	; 0x33b4
    609c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    60a0:	681a      	ldr	r2, [r3, #0]
    60a2:	685b      	ldr	r3, [r3, #4]
    60a4:	4053      	eors	r3, r2
    60a6:	ea4f 5383 	mov.w	r3, r3, lsl #22
    60aa:	ea4f 5393 	mov.w	r3, r3, lsr #22
    60ae:	b98b      	cbnz	r3, 60d4 <UART_IntTransmit+0xc8>
    	UART_IntConfig((LPC_UART_TypeDef *)LPC_UART0, UART_INTCFG_THRE, DISABLE);
    60b0:	f44f 4040 	mov.w	r0, #49152	; 0xc000
    60b4:	f2c4 0000 	movt	r0, #16384	; 0x4000
    60b8:	f04f 0101 	mov.w	r1, #1
    60bc:	f04f 0200 	mov.w	r2, #0
    60c0:	f7fe f996 	bl	43f0 <UART_IntConfig>
    	// Reset Tx Interrupt state
    	TxIntStat = RESET;
    60c4:	f643 33c4 	movw	r3, #15300	; 0x3bc4
    60c8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    60cc:	f04f 0200 	mov.w	r2, #0
    60d0:	701a      	strb	r2, [r3, #0]
    60d2:	bd70      	pop	{r4, r5, r6, pc}
    }
    else{
      	// Set Tx Interrupt state
		TxIntStat = SET;
    60d4:	f643 33c4 	movw	r3, #15300	; 0x3bc4
    60d8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    60dc:	f04f 0201 	mov.w	r2, #1
    60e0:	701a      	strb	r2, [r3, #0]
    	UART_IntConfig((LPC_UART_TypeDef *)LPC_UART0, UART_INTCFG_THRE, ENABLE);
    60e2:	f44f 4040 	mov.w	r0, #49152	; 0xc000
    60e6:	f2c4 0000 	movt	r0, #16384	; 0x4000
    60ea:	4611      	mov	r1, r2
    60ec:	f7fe f980 	bl	43f0 <UART_IntConfig>
    60f0:	bd70      	pop	{r4, r5, r6, pc}
    60f2:	bf00      	nop

000060f4 <UART_IntErr>:
 * @brief		UART Line Status Error
 * @param[in]	bLSErrType	UART Line Status Error Type
 * @return		None
 **********************************************************************/
void UART_IntErr(uint8_t bLSErrType)
{
    60f4:	e7fe      	b.n	60f4 <UART_IntErr>
    60f6:	bf00      	nop

000060f8 <UART0_IRQHandler>:
 * @brief		UART0 interrupt handler sub-routine
 * @param[in]	None
 * @return 		None
 **********************************************************************/
void UART0_IRQHandler(void)
{
    60f8:	b510      	push	{r4, lr}
	uint32_t intsrc, tmp, tmp1;

	/* Determine the interrupt source */
	intsrc = UART_GetIntId(LPC_UART0);
    60fa:	f44f 4040 	mov.w	r0, #49152	; 0xc000
    60fe:	f2c4 0000 	movt	r0, #16384	; 0x4000
    6102:	f7fe fa61 	bl	45c8 <UART_GetIntId>
	tmp = intsrc & UART_IIR_INTID_MASK;
    6106:	f000 040e 	and.w	r4, r0, #14


	// Receive Line Status
	if (tmp == UART_IIR_INTID_RLS){
    610a:	2c06      	cmp	r4, #6
    610c:	d10a      	bne.n	6124 <UART0_IRQHandler+0x2c>
		// Check line status
		tmp1 = UART_GetLineStatus(LPC_UART0);
    610e:	f44f 4040 	mov.w	r0, #49152	; 0xc000
    6112:	f2c4 0000 	movt	r0, #16384	; 0x4000
    6116:	f7fe fa1f 	bl	4558 <UART_GetLineStatus>
		// Mask out the Receive Ready and Transmit Holding empty status
		tmp1 &= (UART_LSR_OE | UART_LSR_PE | UART_LSR_FE \
				| UART_LSR_BI | UART_LSR_RXFE);
		// If any error exist
		if (tmp1) {
    611a:	f010 009e 	ands.w	r0, r0, #158	; 0x9e
    611e:	d010      	beq.n	6142 <UART0_IRQHandler+0x4a>
			UART_IntErr(tmp1);
    6120:	f7ff ffe8 	bl	60f4 <UART_IntErr>
		}
	}

	// Receive Data Available or Character time-out
	if ((tmp == UART_IIR_INTID_RDA) || (tmp == UART_IIR_INTID_CTI)){
    6124:	2c0c      	cmp	r4, #12
    6126:	bf14      	ite	ne
    6128:	2300      	movne	r3, #0
    612a:	2301      	moveq	r3, #1
    612c:	2c04      	cmp	r4, #4
    612e:	bf08      	it	eq
    6130:	f043 0301 	orreq.w	r3, r3, #1
    6134:	b10b      	cbz	r3, 613a <UART0_IRQHandler+0x42>
		UART_IntReceive();
    6136:	f7ff ff11 	bl	5f5c <UART_IntReceive>
	}

	// Transmit Holding Empty
	if (tmp == UART_IIR_INTID_THRE){
    613a:	2c02      	cmp	r4, #2
    613c:	d101      	bne.n	6142 <UART0_IRQHandler+0x4a>
		UART_IntTransmit();
    613e:	f7ff ff65 	bl	600c <UART_IntTransmit>
    6142:	bd10      	pop	{r4, pc}

00006144 <UARTSend>:
 * @param[out]	txbuf Pointer to Transmit buffer
 * @param[in]	buflen Length of Transmit buffer
 * @return 		Number of bytes actually sent to the ring buffer
 **********************************************************************/
uint32_t UARTSend(LPC_UART_TypeDef *UARTPort, uint8_t *txbuf, uint8_t buflen)
{
    6144:	b570      	push	{r4, r5, r6, lr}
    6146:	4606      	mov	r6, r0
    6148:	460d      	mov	r5, r1
    614a:	4614      	mov	r4, r2
    uint32_t bytes = 0;

	/* Temporarily lock out UART transmit interrupts during this
	   read so the UART transmit interrupt won't cause problems
	   with the index values */
    UART_IntConfig(UARTPort, UART_INTCFG_THRE, DISABLE);
    614c:	f04f 0101 	mov.w	r1, #1
    6150:	f04f 0200 	mov.w	r2, #0
    6154:	f7fe f94c 	bl	43f0 <UART_IntConfig>

	/* Loop until transmit run buffer is full or until n_bytes
	   expires */
	while ((buflen > 0) && (!__BUF_IS_FULL(rb.tx_head, rb.tx_tail)))
    6158:	2c00      	cmp	r4, #0
    615a:	d034      	beq.n	61c6 <UARTSend+0x82>
    615c:	f243 33b4 	movw	r3, #13236	; 0x33b4
    6160:	f2c1 0300 	movt	r3, #4096	; 0x1000
    6164:	685a      	ldr	r2, [r3, #4]
    6166:	681b      	ldr	r3, [r3, #0]
    6168:	f103 0301 	add.w	r3, r3, #1
    616c:	4053      	eors	r3, r2
    616e:	ea4f 5383 	mov.w	r3, r3, lsl #22
    6172:	ea4f 5393 	mov.w	r3, r3, lsr #22
    6176:	b34b      	cbz	r3, 61cc <UARTSend+0x88>
 * 				should be UART0
 * @param[out]	txbuf Pointer to Transmit buffer
 * @param[in]	buflen Length of Transmit buffer
 * @return 		Number of bytes actually sent to the ring buffer
 **********************************************************************/
uint32_t UARTSend(LPC_UART_TypeDef *UARTPort, uint8_t *txbuf, uint8_t buflen)
    6178:	f104 30ff 	add.w	r0, r4, #4294967295
    617c:	b2c0      	uxtb	r0, r0
    617e:	f100 0001 	add.w	r0, r0, #1
{
    uint8_t *data = (uint8_t *) txbuf;
    uint32_t bytes = 0;
    6182:	f04f 0400 	mov.w	r4, #0
	/* Loop until transmit run buffer is full or until n_bytes
	   expires */
	while ((buflen > 0) && (!__BUF_IS_FULL(rb.tx_head, rb.tx_tail)))
	{
		/* Write data from buffer into ring buffer */
		rb.tx[rb.tx_head] = *data;
    6186:	f243 33b4 	movw	r3, #13236	; 0x33b4
    618a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    618e:	681a      	ldr	r2, [r3, #0]
    6190:	5d29      	ldrb	r1, [r5, r4]
    6192:	189a      	adds	r2, r3, r2
    6194:	7411      	strb	r1, [r2, #16]
		data++;

		/* Increment head pointer */
		__BUF_INCR(rb.tx_head);
    6196:	681a      	ldr	r2, [r3, #0]
    6198:	f102 0201 	add.w	r2, r2, #1
    619c:	ea4f 5282 	mov.w	r2, r2, lsl #22
    61a0:	ea4f 5292 	mov.w	r2, r2, lsr #22
    61a4:	601a      	str	r2, [r3, #0]

		/* Increment data count and decrement buffer size count */
		bytes++;
    61a6:	f104 0401 	add.w	r4, r4, #1
	   with the index values */
    UART_IntConfig(UARTPort, UART_INTCFG_THRE, DISABLE);

	/* Loop until transmit run buffer is full or until n_bytes
	   expires */
	while ((buflen > 0) && (!__BUF_IS_FULL(rb.tx_head, rb.tx_tail)))
    61aa:	4284      	cmp	r4, r0
    61ac:	d010      	beq.n	61d0 <UARTSend+0x8c>
    61ae:	6859      	ldr	r1, [r3, #4]
    61b0:	681a      	ldr	r2, [r3, #0]
    61b2:	f102 0201 	add.w	r2, r2, #1
    61b6:	404a      	eors	r2, r1
    61b8:	ea4f 5282 	mov.w	r2, r2, lsl #22
    61bc:	ea4f 5292 	mov.w	r2, r2, lsr #22
    61c0:	2a00      	cmp	r2, #0
    61c2:	d1e4      	bne.n	618e <UARTSend+0x4a>
    61c4:	e004      	b.n	61d0 <UARTSend+0x8c>
 * @return 		Number of bytes actually sent to the ring buffer
 **********************************************************************/
uint32_t UARTSend(LPC_UART_TypeDef *UARTPort, uint8_t *txbuf, uint8_t buflen)
{
    uint8_t *data = (uint8_t *) txbuf;
    uint32_t bytes = 0;
    61c6:	f04f 0400 	mov.w	r4, #0
    61ca:	e001      	b.n	61d0 <UARTSend+0x8c>
    61cc:	f04f 0400 	mov.w	r4, #0
	 * Check if current Tx interrupt enable is reset,
	 * that means the Tx interrupt must be re-enabled
	 * due to call UART_IntTransmit() function to trigger
	 * this interrupt type
	 */
	if (TxIntStat == RESET) {
    61d0:	f643 33c4 	movw	r3, #15300	; 0x3bc4
    61d4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    61d8:	781b      	ldrb	r3, [r3, #0]
    61da:	b913      	cbnz	r3, 61e2 <UARTSend+0x9e>
		UART_IntTransmit();
    61dc:	f7ff ff16 	bl	600c <UART_IntTransmit>
    61e0:	e005      	b.n	61ee <UARTSend+0xaa>
	}
	/*
	 * Otherwise, re-enables Tx Interrupt
	 */
	else {
		UART_IntConfig(UARTPort, UART_INTCFG_THRE, ENABLE);
    61e2:	4630      	mov	r0, r6
    61e4:	f04f 0101 	mov.w	r1, #1
    61e8:	460a      	mov	r2, r1
    61ea:	f7fe f901 	bl	43f0 <UART_IntConfig>
	}

    return bytes;
}
    61ee:	4620      	mov	r0, r4
    61f0:	bd70      	pop	{r4, r5, r6, pc}
    61f2:	bf00      	nop

000061f4 <comm_put>:
	}
	return buffer;
}
#endif

void comm_put(uint8_t d){
    61f4:	b500      	push	{lr}
    61f6:	b083      	sub	sp, #12
    61f8:	a902      	add	r1, sp, #8
    61fa:	f801 0d01 	strb.w	r0, [r1, #-1]!
//	UART_Send(LPC_UART0, &d, 1, BLOCKING);//without interrupt
	UARTSend(LPC_UART0, &d, 1);//with interrupt
    61fe:	f44f 4040 	mov.w	r0, #49152	; 0xc000
    6202:	f2c4 0000 	movt	r0, #16384	; 0x4000
    6206:	f04f 0201 	mov.w	r2, #1
    620a:	f7ff ff9b 	bl	6144 <UARTSend>
////	serial_writechar(d);
}
    620e:	b003      	add	sp, #12
    6210:	bd00      	pop	{pc}
    6212:	bf00      	nop

00006214 <UARTReceive>:
 * @param[out]	rxbuf Pointer to Received buffer
 * @param[in]	buflen Length of Received buffer
 * @return 		Number of bytes actually read from the ring buffer
 **********************************************************************/
uint32_t UARTReceive(LPC_UART_TypeDef *UARTPort, uint8_t *rxbuf, uint8_t buflen)
{
    6214:	b570      	push	{r4, r5, r6, lr}
    6216:	4606      	mov	r6, r0
    6218:	460d      	mov	r5, r1
    621a:	4614      	mov	r4, r2
    uint32_t bytes = 0;

	/* Temporarily lock out UART receive interrupts during this
	   read so the UART receive interrupt won't cause problems
	   with the index values */
	UART_IntConfig(UARTPort, UART_INTCFG_RBR, DISABLE);
    621c:	f04f 0100 	mov.w	r1, #0
    6220:	460a      	mov	r2, r1
    6222:	f7fe f8e5 	bl	43f0 <UART_IntConfig>

	/* Loop until receive buffer ring is empty or
		until max_bytes expires */
	while ((buflen > 0) && (!(__BUF_IS_EMPTY(rb.rx_head, rb.rx_tail))))
    6226:	b38c      	cbz	r4, 628c <UARTReceive+0x78>
    6228:	f243 33b4 	movw	r3, #13236	; 0x33b4
    622c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    6230:	689a      	ldr	r2, [r3, #8]
    6232:	68db      	ldr	r3, [r3, #12]
    6234:	4053      	eors	r3, r2
    6236:	ea4f 5383 	mov.w	r3, r3, lsl #22
    623a:	ea4f 5393 	mov.w	r3, r3, lsr #22
    623e:	b343      	cbz	r3, 6292 <UARTReceive+0x7e>
 * 				should be UART0
 * @param[out]	rxbuf Pointer to Received buffer
 * @param[in]	buflen Length of Received buffer
 * @return 		Number of bytes actually read from the ring buffer
 **********************************************************************/
uint32_t UARTReceive(LPC_UART_TypeDef *UARTPort, uint8_t *rxbuf, uint8_t buflen)
    6240:	f104 31ff 	add.w	r1, r4, #4294967295
    6244:	b2c9      	uxtb	r1, r1
    6246:	f101 0101 	add.w	r1, r1, #1
{
    uint8_t *data = (uint8_t *) rxbuf;
    uint32_t bytes = 0;
    624a:	f04f 0400 	mov.w	r4, #0
	/* Loop until receive buffer ring is empty or
		until max_bytes expires */
	while ((buflen > 0) && (!(__BUF_IS_EMPTY(rb.rx_head, rb.rx_tail))))
	{
		/* Read data from ring buffer into user buffer */
		*data = rb.rx[rb.rx_tail];
    624e:	f243 33b4 	movw	r3, #13236	; 0x33b4
    6252:	f2c1 0300 	movt	r3, #4096	; 0x1000
    6256:	68da      	ldr	r2, [r3, #12]
    6258:	189a      	adds	r2, r3, r2
    625a:	f892 2410 	ldrb.w	r2, [r2, #1040]	; 0x410
    625e:	552a      	strb	r2, [r5, r4]
		data++;

		/* Update tail pointer */
		__BUF_INCR(rb.rx_tail);
    6260:	68da      	ldr	r2, [r3, #12]
    6262:	f102 0201 	add.w	r2, r2, #1
    6266:	ea4f 5282 	mov.w	r2, r2, lsl #22
    626a:	ea4f 5292 	mov.w	r2, r2, lsr #22
    626e:	60da      	str	r2, [r3, #12]

		/* Increment data count and decrement buffer size count */
		bytes++;
    6270:	f104 0401 	add.w	r4, r4, #1
	   with the index values */
	UART_IntConfig(UARTPort, UART_INTCFG_RBR, DISABLE);

	/* Loop until receive buffer ring is empty or
		until max_bytes expires */
	while ((buflen > 0) && (!(__BUF_IS_EMPTY(rb.rx_head, rb.rx_tail))))
    6274:	428c      	cmp	r4, r1
    6276:	d00e      	beq.n	6296 <UARTReceive+0x82>
    6278:	689a      	ldr	r2, [r3, #8]
    627a:	68d8      	ldr	r0, [r3, #12]
    627c:	4042      	eors	r2, r0
    627e:	ea4f 5282 	mov.w	r2, r2, lsl #22
    6282:	ea4f 5292 	mov.w	r2, r2, lsr #22
    6286:	2a00      	cmp	r2, #0
    6288:	d1e5      	bne.n	6256 <UARTReceive+0x42>
    628a:	e004      	b.n	6296 <UARTReceive+0x82>
 * @return 		Number of bytes actually read from the ring buffer
 **********************************************************************/
uint32_t UARTReceive(LPC_UART_TypeDef *UARTPort, uint8_t *rxbuf, uint8_t buflen)
{
    uint8_t *data = (uint8_t *) rxbuf;
    uint32_t bytes = 0;
    628c:	f04f 0400 	mov.w	r4, #0
    6290:	e001      	b.n	6296 <UARTReceive+0x82>
    6292:	f04f 0400 	mov.w	r4, #0
		bytes++;
		buflen--;
	}

	/* Re-enable UART interrupts */
	UART_IntConfig(UARTPort, UART_INTCFG_RBR, ENABLE);
    6296:	4630      	mov	r0, r6
    6298:	f04f 0100 	mov.w	r1, #0
    629c:	f04f 0201 	mov.w	r2, #1
    62a0:	f7fe f8a6 	bl	43f0 <UART_IntConfig>

    return bytes;
}
    62a4:	4620      	mov	r0, r4
    62a6:	bd70      	pop	{r4, r5, r6, pc}

000062a8 <comm_flush>:
	UART_LINE[0]='\0';
	return buffer;
#endif
}

void comm_flush(void){
    62a8:	b510      	push	{r4, lr}
    62aa:	b082      	sub	sp, #8
#if 1
	uint8_t buffer[1], len;
	while (UARTReceive(LPC_UART0, buffer, 1));
    62ac:	f44f 4440 	mov.w	r4, #49152	; 0xc000
    62b0:	f2c4 0400 	movt	r4, #16384	; 0x4000
    62b4:	4620      	mov	r0, r4
    62b6:	a901      	add	r1, sp, #4
    62b8:	f04f 0201 	mov.w	r2, #1
    62bc:	f7ff ffaa 	bl	6214 <UARTReceive>
    62c0:	2800      	cmp	r0, #0
    62c2:	d1f7      	bne.n	62b4 <comm_flush+0xc>
#endif
}
    62c4:	b002      	add	sp, #8
    62c6:	bd10      	pop	{r4, pc}

000062c8 <exec_cmd>:
UART_RING_BUFFER_T rb;

// Current Tx Interrupt enable state
__IO FlagStatus TxIntStat;

void exec_cmd(char *cmd){
    62c8:	b510      	push	{r4, lr}
    62ca:	4604      	mov	r4, r0
	comm_flush();
    62cc:	f7ff ffec 	bl	62a8 <comm_flush>
	if(stricmp(cmd,"b")==0){
    62d0:	4620      	mov	r0, r4
    62d2:	f246 11e0 	movw	r1, #25056	; 0x61e0
    62d6:	f2c0 0102 	movt	r1, #2
    62da:	f019 fe93 	bl	20004 <strcasecmp>
    62de:	bb50      	cbnz	r0, 6336 <exec_cmd+0x6e>
		xprintf(INFO "resetting to bootloader" " (%s:%d)\n",_F_,_L_);
    62e0:	f246 10e4 	movw	r0, #25060	; 0x61e4
    62e4:	f2c0 0002 	movt	r0, #2
    62e8:	4944      	ldr	r1, [pc, #272]	; (63fc <exec_cmd+0x134>)
    62ea:	f04f 0249 	mov.w	r2, #73	; 0x49
    62ee:	f000 f8f1 	bl	64d4 <xprintf>
		SCB->VTOR = (BOOTLOADER_START & 0x1FFFFF80);
    62f2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    62f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    62fa:	f04f 0200 	mov.w	r2, #0
    62fe:	609a      	str	r2, [r3, #8]
		RTC_WriteGPREG(LPC_RTC, 2, 0xbbbbbbbb);
    6300:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    6304:	f2c4 0002 	movt	r0, #16386	; 0x4002
    6308:	f04f 0102 	mov.w	r1, #2
    630c:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
    6310:	f7fd f958 	bl	35c4 <RTC_WriteGPREG>
		WDT_Init (WDT_CLKSRC_PCLK, WDT_MODE_RESET);
    6314:	f04f 0001 	mov.w	r0, #1
    6318:	4601      	mov	r1, r0
    631a:	f7fe fa5f 	bl	47dc <WDT_Init>
		WDT_Start(1);
    631e:	f04f 0001 	mov.w	r0, #1
    6322:	f7fe fa91 	bl	4848 <WDT_Start>
    6326:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    632a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    632e:	f04f 0201 	mov.w	r2, #1
    6332:	601a      	str	r2, [r3, #0]
    6334:	bd10      	pop	{r4, pc}
		NVIC_EnableIRQ(WDT_IRQn);
	}
	else if(stricmp(cmd,"r")==0){
    6336:	4620      	mov	r0, r4
    6338:	f64b 2128 	movw	r1, #47656	; 0xba28
    633c:	f2c0 0102 	movt	r1, #2
    6340:	f019 fe60 	bl	20004 <strcasecmp>
    6344:	b9c8      	cbnz	r0, 637a <exec_cmd+0xb2>
		xprintf(INFO "reseting" " (%s:%d)\n",_F_,_L_);
    6346:	f246 2030 	movw	r0, #25136	; 0x6230
    634a:	f2c0 0002 	movt	r0, #2
    634e:	492b      	ldr	r1, [pc, #172]	; (63fc <exec_cmd+0x134>)
    6350:	f04f 0251 	mov.w	r2, #81	; 0x51
    6354:	f000 f8be 	bl	64d4 <xprintf>
		WDT_Init(WDT_CLKSRC_PCLK, WDT_MODE_RESET);
    6358:	f04f 0001 	mov.w	r0, #1
    635c:	4601      	mov	r1, r0
    635e:	f7fe fa3d 	bl	47dc <WDT_Init>
		WDT_Start(1);
    6362:	f04f 0001 	mov.w	r0, #1
    6366:	f7fe fa6f 	bl	4848 <WDT_Start>
    636a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    636e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    6372:	f04f 0201 	mov.w	r2, #1
    6376:	601a      	str	r2, [r3, #0]
    6378:	e7fe      	b.n	6378 <exec_cmd+0xb0>
		NVIC_EnableIRQ(WDT_IRQn);
		while(1);//lockup, wdt will reset board
		//WDT_ClrTimeOutFlag();
	}
	else if(stricmp(cmd,"t")==0){
    637a:	4620      	mov	r0, r4
    637c:	f64b 210c 	movw	r1, #47628	; 0xba0c
    6380:	f2c0 0102 	movt	r1, #2
    6384:	f019 fe3e 	bl	20004 <strcasecmp>
    6388:	b948      	cbnz	r0, 639e <exec_cmd+0xd6>
		xprintf(INFO "tests running" " (%s:%d)\n",_F_,_L_);
    638a:	f246 204c 	movw	r0, #25164	; 0x624c
    638e:	f2c0 0002 	movt	r0, #2
    6392:	491a      	ldr	r1, [pc, #104]	; (63fc <exec_cmd+0x134>)
    6394:	f04f 0259 	mov.w	r2, #89	; 0x59
    6398:	f000 f89c 	bl	64d4 <xprintf>
    639c:	bd10      	pop	{r4, pc}
	}
	else if(stricmp(cmd,"q")==0){
    639e:	4620      	mov	r0, r4
    63a0:	f246 216c 	movw	r1, #25196	; 0x626c
    63a4:	f2c0 0102 	movt	r1, #2
    63a8:	f019 fe2c 	bl	20004 <strcasecmp>
    63ac:	b948      	cbnz	r0, 63c2 <exec_cmd+0xfa>
		xprintf(INFO "q" " (%s:%d)\n",_F_,_L_);
    63ae:	f246 2070 	movw	r0, #25200	; 0x6270
    63b2:	f2c0 0002 	movt	r0, #2
    63b6:	4911      	ldr	r1, [pc, #68]	; (63fc <exec_cmd+0x134>)
    63b8:	f04f 025c 	mov.w	r2, #92	; 0x5c
    63bc:	f000 f88a 	bl	64d4 <xprintf>
    63c0:	bd10      	pop	{r4, pc}
	}
	else if(stricmp(cmd,"")==0){
    63c2:	4620      	mov	r0, r4
    63c4:	f64a 71b4 	movw	r1, #44980	; 0xafb4
    63c8:	f2c0 0102 	movt	r1, #2
    63cc:	f019 fe1a 	bl	20004 <strcasecmp>
    63d0:	b948      	cbnz	r0, 63e6 <exec_cmd+0x11e>
		xprintf(INFO "\r\nr-Resets board\r\nb-Resets to bootloader\r\nt-led test\r\n" " (%s:%d)\n",_F_,_L_);
    63d2:	f246 2084 	movw	r0, #25220	; 0x6284
    63d6:	f2c0 0002 	movt	r0, #2
    63da:	4908      	ldr	r1, [pc, #32]	; (63fc <exec_cmd+0x134>)
    63dc:	f04f 025f 	mov.w	r2, #95	; 0x5f
    63e0:	f000 f878 	bl	64d4 <xprintf>
    63e4:	bd10      	pop	{r4, pc}
	}
	else{
		xprintf(INFO "Command not found (cmd=%s)" " (%s:%d)\n",cmd,_F_,_L_);
    63e6:	f246 20cc 	movw	r0, #25292	; 0x62cc
    63ea:	f2c0 0002 	movt	r0, #2
    63ee:	4621      	mov	r1, r4
    63f0:	4a02      	ldr	r2, [pc, #8]	; (63fc <exec_cmd+0x134>)
    63f2:	f04f 0362 	mov.w	r3, #98	; 0x62
    63f6:	f000 f86d 	bl	64d4 <xprintf>
    63fa:	bd10      	pop	{r4, pc}
    63fc:	00026228 	.word	0x00026228

00006400 <xputc>:
	return 1;
}


void xputc (char c)
{
    6400:	b510      	push	{r4, lr}
    6402:	4604      	mov	r4, r0
	if (c == '\n') comm_put('\r');
    6404:	280a      	cmp	r0, #10
    6406:	d103      	bne.n	6410 <xputc+0x10>
    6408:	f04f 000d 	mov.w	r0, #13
    640c:	f7ff fef2 	bl	61f4 <comm_put>
	comm_put(c);
    6410:	4620      	mov	r0, r4
    6412:	f7ff feef 	bl	61f4 <comm_put>
}
    6416:	bd10      	pop	{r4, pc}

00006418 <xputs>:


void xputs (const char* str)
{
    6418:	b510      	push	{r4, lr}
    641a:	4604      	mov	r4, r0
	while (*str)
    641c:	7800      	ldrb	r0, [r0, #0]
    641e:	b128      	cbz	r0, 642c <xputs+0x14>
		xputc(*str++);
    6420:	f7ff ffee 	bl	6400 <xputc>
}


void xputs (const char* str)
{
	while (*str)
    6424:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    6428:	2800      	cmp	r0, #0
    642a:	d1f9      	bne.n	6420 <xputs+0x8>
    642c:	bd10      	pop	{r4, pc}
    642e:	bf00      	nop

00006430 <xitoa>:
		xputc(*str++);
}


void xitoa (long val, int radix, int len)
{
    6430:	b5f0      	push	{r4, r5, r6, r7, lr}
    6432:	b087      	sub	sp, #28
	uint8_t c, r, sgn = 0, pad = ' ';
	uint8_t s[20], i = 0;
	uint32_t v;

	if (radix < 0) {
    6434:	1e0b      	subs	r3, r1, #0
}


void xitoa (long val, int radix, int len)
{
	uint8_t c, r, sgn = 0, pad = ' ';
    6436:	bfa8      	it	ge
    6438:	2500      	movge	r5, #0
	uint8_t s[20], i = 0;
	uint32_t v;

	if (radix < 0) {
    643a:	da06      	bge.n	644a <xitoa+0x1a>
		radix = -radix;
    643c:	f1c3 0300 	rsb	r3, r3, #0
		if (val < 0) {
    6440:	2800      	cmp	r0, #0
			val = -val;
    6442:	bfba      	itte	lt
    6444:	4240      	neglt	r0, r0
			sgn = '-';
    6446:	252d      	movlt	r5, #45	; 0x2d
}


void xitoa (long val, int radix, int len)
{
	uint8_t c, r, sgn = 0, pad = ' ';
    6448:	2500      	movge	r5, #0
			val = -val;
			sgn = '-';
		}
	}
	v = val;
	r = radix;
    644a:	b2db      	uxtb	r3, r3
	if (len < 0) {
    644c:	2a00      	cmp	r2, #0
		len = -len;
    644e:	bfba      	itte	lt
    6450:	4252      	neglt	r2, r2
		pad = '0';
    6452:	2130      	movlt	r1, #48	; 0x30
}


void xitoa (long val, int radix, int len)
{
	uint8_t c, r, sgn = 0, pad = ' ';
    6454:	2120      	movge	r1, #32
	r = radix;
	if (len < 0) {
		len = -len;
		pad = '0';
	}
	if (len > 20) return;
    6456:	2a14      	cmp	r2, #20
		if (val < 0) {
			val = -val;
			sgn = '-';
		}
	}
	v = val;
    6458:	bfd8      	it	le
    645a:	2700      	movle	r7, #0
	r = radix;
	if (len < 0) {
		len = -len;
		pad = '0';
	}
	if (len > 20) return;
    645c:	dd01      	ble.n	6462 <xitoa+0x32>
    645e:	e037      	b.n	64d0 <xitoa+0xa0>
	do {
		c = (uint8_t)(v % r);
		if (c >= 10) c += 7;
		c += '0';
		s[i++] = c;
    6460:	4627      	mov	r7, r4
		len = -len;
		pad = '0';
	}
	if (len > 20) return;
	do {
		c = (uint8_t)(v % r);
    6462:	fbb0 f6f3 	udiv	r6, r0, r3
    6466:	fb03 0616 	mls	r6, r3, r6, r0
    646a:	b2f6      	uxtb	r6, r6
		if (c >= 10) c += 7;
    646c:	2e09      	cmp	r6, #9
    646e:	bf84      	itt	hi
    6470:	3607      	addhi	r6, #7
    6472:	b2f6      	uxtbhi	r6, r6
		c += '0';
    6474:	f106 0630 	add.w	r6, r6, #48	; 0x30
		s[i++] = c;
    6478:	f10d 0e18 	add.w	lr, sp, #24
    647c:	eb0e 0407 	add.w	r4, lr, r7
    6480:	f804 6c14 	strb.w	r6, [r4, #-20]
    6484:	f107 0401 	add.w	r4, r7, #1
    6488:	b2e4      	uxtb	r4, r4
		v /= r;
    648a:	fbb0 f0f3 	udiv	r0, r0, r3
	} while (v);
    648e:	2800      	cmp	r0, #0
    6490:	d1e6      	bne.n	6460 <xitoa+0x30>
	if (sgn) s[i++] = sgn;
    6492:	b12d      	cbz	r5, 64a0 <xitoa+0x70>
    6494:	4474      	add	r4, lr
    6496:	f804 5c14 	strb.w	r5, [r4, #-20]
    649a:	f107 0402 	add.w	r4, r7, #2
    649e:	b2e4      	uxtb	r4, r4
	while (i < len)
    64a0:	4623      	mov	r3, r4
    64a2:	42a2      	cmp	r2, r4
    64a4:	dd09      	ble.n	64ba <xitoa+0x8a>
		s[i++] = pad;
    64a6:	a806      	add	r0, sp, #24
    64a8:	18c3      	adds	r3, r0, r3
    64aa:	f803 1c14 	strb.w	r1, [r3, #-20]
    64ae:	f104 0401 	add.w	r4, r4, #1
    64b2:	b2e4      	uxtb	r4, r4
		c += '0';
		s[i++] = c;
		v /= r;
	} while (v);
	if (sgn) s[i++] = sgn;
	while (i < len)
    64b4:	4623      	mov	r3, r4
    64b6:	42a2      	cmp	r2, r4
    64b8:	dcf5      	bgt.n	64a6 <xitoa+0x76>
		s[i++] = pad;
	do
		xputc(s[--i]);
    64ba:	f104 34ff 	add.w	r4, r4, #4294967295
    64be:	b2e4      	uxtb	r4, r4
    64c0:	aa06      	add	r2, sp, #24
    64c2:	1913      	adds	r3, r2, r4
    64c4:	f813 0c14 	ldrb.w	r0, [r3, #-20]
    64c8:	f7ff ff9a 	bl	6400 <xputc>
	while (i);
    64cc:	2c00      	cmp	r4, #0
    64ce:	d1f4      	bne.n	64ba <xitoa+0x8a>
}
    64d0:	b007      	add	sp, #28
    64d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000064d4 <xprintf>:


void xprintf (const char* str, ...)
{
    64d4:	b40f      	push	{r0, r1, r2, r3}
    64d6:	b5f0      	push	{r4, r5, r6, r7, lr}
    64d8:	b083      	sub	sp, #12
    64da:	ab08      	add	r3, sp, #32
    64dc:	f853 4b04 	ldr.w	r4, [r3], #4
	va_list arp;
	int d, r, w, s, l;


	va_start(arp, str);
    64e0:	9301      	str	r3, [sp, #4]
			continue;
		}
		if (d == 'u') r = 10;
		if (d == 'd') r = -10;
		if (d == 'X' || d == 'x') r = 16; // 'x' added by mthomas in increase compatibility
		if (d == 'b') r = 2;
    64e2:	f04f 0502 	mov.w	r5, #2
		}
		if (d == 'c') {
			xputc((char)va_arg(arp, int));
			continue;
		}
		if (d == 'u') r = 10;
    64e6:	f04f 060a 	mov.w	r6, #10
		if (d == 'd') r = -10;
    64ea:	f06f 0709 	mvn.w	r7, #9
	int d, r, w, s, l;


	va_start(arp, str);

	while ((d = *str++) != 0) {
    64ee:	e071      	b.n	65d4 <xprintf+0x100>
		if (d != '%') {
    64f0:	2825      	cmp	r0, #37	; 0x25
    64f2:	d004      	beq.n	64fe <xprintf+0x2a>
	int d, r, w, s, l;


	va_start(arp, str);

	while ((d = *str++) != 0) {
    64f4:	f104 0401 	add.w	r4, r4, #1
		if (d != '%') {
			xputc(d); continue;
    64f8:	f7ff ff82 	bl	6400 <xputc>
    64fc:	e06a      	b.n	65d4 <xprintf+0x100>
		}
		d = *str++; w = r = s = l = 0;
    64fe:	7860      	ldrb	r0, [r4, #1]
		if (d == '0') {
    6500:	2830      	cmp	r0, #48	; 0x30

	while ((d = *str++) != 0) {
		if (d != '%') {
			xputc(d); continue;
		}
		d = *str++; w = r = s = l = 0;
    6502:	bf19      	ittee	ne
    6504:	3402      	addne	r4, #2
    6506:	f04f 0c00 	movne.w	ip, #0
		if (d == '0') {
			d = *str++; s = 1;
    650a:	78a0      	ldrbeq	r0, [r4, #2]
    650c:	3403      	addeq	r4, #3
    650e:	bf08      	it	eq
    6510:	f04f 0c01 	moveq.w	ip, #1
		}
		while ((d >= '0')&&(d <= '9')) {
    6514:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    6518:	2b09      	cmp	r3, #9
    651a:	bf88      	it	hi
    651c:	2200      	movhi	r2, #0
    651e:	d811      	bhi.n	6544 <xprintf+0x70>
    6520:	4623      	mov	r3, r4
    6522:	f04f 0200 	mov.w	r2, #0
			w += w * 10 + (d - '0');
    6526:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    652a:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
    652e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    6532:	1812      	adds	r2, r2, r0
			d = *str++;
    6534:	f813 1b01 	ldrb.w	r1, [r3], #1
    6538:	4608      	mov	r0, r1
    653a:	461c      	mov	r4, r3
		}
		d = *str++; w = r = s = l = 0;
		if (d == '0') {
			d = *str++; s = 1;
		}
		while ((d >= '0')&&(d <= '9')) {
    653c:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
    6540:	2909      	cmp	r1, #9
    6542:	d9f0      	bls.n	6526 <xprintf+0x52>
			w += w * 10 + (d - '0');
			d = *str++;
		}
		if (s) w = -w;
    6544:	f1bc 0f00 	cmp.w	ip, #0
    6548:	d001      	beq.n	654e <xprintf+0x7a>
    654a:	f1c2 0200 	rsb	r2, r2, #0
		if (d == 'l') {
    654e:	286c      	cmp	r0, #108	; 0x6c
			l = 1;
			d = *str++;
    6550:	bf06      	itte	eq
    6552:	f814 0b01 	ldrbeq.w	r0, [r4], #1
			w += w * 10 + (d - '0');
			d = *str++;
		}
		if (s) w = -w;
		if (d == 'l') {
			l = 1;
    6556:	2301      	moveq	r3, #1

	while ((d = *str++) != 0) {
		if (d != '%') {
			xputc(d); continue;
		}
		d = *str++; w = r = s = l = 0;
    6558:	2300      	movne	r3, #0
		if (s) w = -w;
		if (d == 'l') {
			l = 1;
			d = *str++;
		}
		if (!d) break;
    655a:	2800      	cmp	r0, #0
    655c:	d03d      	beq.n	65da <xprintf+0x106>
		if (d == 's') {
    655e:	2873      	cmp	r0, #115	; 0x73
    6560:	d107      	bne.n	6572 <xprintf+0x9e>
			xputs(va_arg(arp, char*));
    6562:	9b01      	ldr	r3, [sp, #4]
    6564:	f103 0204 	add.w	r2, r3, #4
    6568:	9201      	str	r2, [sp, #4]
    656a:	6818      	ldr	r0, [r3, #0]
    656c:	f7ff ff54 	bl	6418 <xputs>
			continue;
    6570:	e030      	b.n	65d4 <xprintf+0x100>
		}
		if (d == 'c') {
    6572:	2863      	cmp	r0, #99	; 0x63
    6574:	d107      	bne.n	6586 <xprintf+0xb2>
			xputc((char)va_arg(arp, int));
    6576:	9b01      	ldr	r3, [sp, #4]
    6578:	f103 0204 	add.w	r2, r3, #4
    657c:	9201      	str	r2, [sp, #4]
    657e:	7818      	ldrb	r0, [r3, #0]
    6580:	f7ff ff3e 	bl	6400 <xputc>
			continue;
    6584:	e026      	b.n	65d4 <xprintf+0x100>
		}
		if (d == 'u') r = 10;
    6586:	2875      	cmp	r0, #117	; 0x75
    6588:	d00c      	beq.n	65a4 <xprintf+0xd0>
		if (d == 'd') r = -10;
    658a:	2864      	cmp	r0, #100	; 0x64
    658c:	d00e      	beq.n	65ac <xprintf+0xd8>
		if (d == 'X' || d == 'x') r = 16; // 'x' added by mthomas in increase compatibility
    658e:	2878      	cmp	r0, #120	; 0x78
    6590:	bf14      	ite	ne
    6592:	2100      	movne	r1, #0
    6594:	2101      	moveq	r1, #1
    6596:	2858      	cmp	r0, #88	; 0x58
    6598:	bf08      	it	eq
    659a:	f041 0101 	orreq.w	r1, r1, #1

	while ((d = *str++) != 0) {
		if (d != '%') {
			xputc(d); continue;
		}
		d = *str++; w = r = s = l = 0;
    659e:	ea4f 1101 	mov.w	r1, r1, lsl #4
    65a2:	e000      	b.n	65a6 <xprintf+0xd2>
		}
		if (d == 'c') {
			xputc((char)va_arg(arp, int));
			continue;
		}
		if (d == 'u') r = 10;
    65a4:	4631      	mov	r1, r6
		if (d == 'd') r = -10;
		if (d == 'X' || d == 'x') r = 16; // 'x' added by mthomas in increase compatibility
		if (d == 'b') r = 2;
    65a6:	2862      	cmp	r0, #98	; 0x62
    65a8:	d101      	bne.n	65ae <xprintf+0xda>
    65aa:	e002      	b.n	65b2 <xprintf+0xde>
		if (d == 'c') {
			xputc((char)va_arg(arp, int));
			continue;
		}
		if (d == 'u') r = 10;
		if (d == 'd') r = -10;
    65ac:	4639      	mov	r1, r7
		if (d == 'X' || d == 'x') r = 16; // 'x' added by mthomas in increase compatibility
		if (d == 'b') r = 2;
		if (!r) break;
    65ae:	b909      	cbnz	r1, 65b4 <xprintf+0xe0>
    65b0:	e013      	b.n	65da <xprintf+0x106>
			continue;
		}
		if (d == 'u') r = 10;
		if (d == 'd') r = -10;
		if (d == 'X' || d == 'x') r = 16; // 'x' added by mthomas in increase compatibility
		if (d == 'b') r = 2;
    65b2:	4629      	mov	r1, r5
		if (!r) break;
		if (l) {
    65b4:	b13b      	cbz	r3, 65c6 <xprintf+0xf2>
			xitoa((long)va_arg(arp, long), r, w);
    65b6:	9b01      	ldr	r3, [sp, #4]
    65b8:	f103 0004 	add.w	r0, r3, #4
    65bc:	9001      	str	r0, [sp, #4]
    65be:	6818      	ldr	r0, [r3, #0]
    65c0:	f7ff ff36 	bl	6430 <xitoa>
    65c4:	e006      	b.n	65d4 <xprintf+0x100>
		} else {
			if (r > 0)
				xitoa((unsigned long)va_arg(arp, int), r, w);
			else
				xitoa((long)va_arg(arp, int), r, w);
    65c6:	9b01      	ldr	r3, [sp, #4]
    65c8:	f103 0004 	add.w	r0, r3, #4
    65cc:	9001      	str	r0, [sp, #4]
    65ce:	6818      	ldr	r0, [r3, #0]
    65d0:	f7ff ff2e 	bl	6430 <xitoa>
	int d, r, w, s, l;


	va_start(arp, str);

	while ((d = *str++) != 0) {
    65d4:	7820      	ldrb	r0, [r4, #0]
    65d6:	2800      	cmp	r0, #0
    65d8:	d18a      	bne.n	64f0 <xprintf+0x1c>
				xitoa((long)va_arg(arp, int), r, w);
		}
	}

	va_end(arp);
}
    65da:	b003      	add	sp, #12
    65dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    65e0:	b004      	add	sp, #16
    65e2:	4770      	bx	lr

000065e4 <fat_get_next_cluster>:
 * \param[in] fs The filesystem for which to determine the next cluster.
 * \param[in] cluster_num The number of the cluster for which to determine its successor.
 * \returns The wanted cluster number, or 0 on error.
 */
cluster_t fat_get_next_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    65e4:	b500      	push	{lr}
    65e6:	b083      	sub	sp, #12
    if(!fs || cluster_num < 2)
    65e8:	2901      	cmp	r1, #1
    65ea:	bf8c      	ite	hi
    65ec:	2300      	movhi	r3, #0
    65ee:	2301      	movls	r3, #1
    65f0:	2800      	cmp	r0, #0
    65f2:	bf08      	it	eq
    65f4:	f043 0301 	orreq.w	r3, r3, #1
    65f8:	bb43      	cbnz	r3, 664c <fat_get_next_cluster+0x68>
    else
#endif
    {
        /* read appropriate fat entry */
        uint16_t fat_entry;
        if(!fs->partition->device_read(fs->header.fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    65fa:	6803      	ldr	r3, [r0, #0]
    65fc:	6880      	ldr	r0, [r0, #8]
    65fe:	681b      	ldr	r3, [r3, #0]
    6600:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    6604:	f10d 0106 	add.w	r1, sp, #6
    6608:	f04f 0202 	mov.w	r2, #2
    660c:	4798      	blx	r3
    660e:	b300      	cbz	r0, 6652 <fat_get_next_cluster+0x6e>
            return 0;

        /* determine next cluster from fat */
        cluster_num = ltoh16(fat_entry);
    6610:	f8bd 0006 	ldrh.w	r0, [sp, #6]
        
        if(cluster_num == FAT16_CLUSTER_FREE ||
           cluster_num == FAT16_CLUSTER_BAD ||
    6614:	f64f 73f7 	movw	r3, #65527	; 0xfff7
    6618:	4298      	cmp	r0, r3
    661a:	bf14      	ite	ne
    661c:	2300      	movne	r3, #0
    661e:	2301      	moveq	r3, #1
            return 0;

        /* determine next cluster from fat */
        cluster_num = ltoh16(fat_entry);
        
        if(cluster_num == FAT16_CLUSTER_FREE ||
    6620:	2800      	cmp	r0, #0
    6622:	bf08      	it	eq
    6624:	f043 0301 	orreq.w	r3, r3, #1
    6628:	b9b3      	cbnz	r3, 6658 <fat_get_next_cluster+0x74>
           cluster_num == FAT16_CLUSTER_BAD ||
           (cluster_num >= FAT16_CLUSTER_RESERVED_MIN && cluster_num <= FAT16_CLUSTER_RESERVED_MAX) ||
    662a:	f100 0210 	add.w	r2, r0, #16
    662e:	b292      	uxth	r2, r2
           (cluster_num >= FAT16_CLUSTER_LAST_MIN && cluster_num <= FAT16_CLUSTER_LAST_MAX))
    6630:	f64f 73f7 	movw	r3, #65527	; 0xfff7
    6634:	4298      	cmp	r0, r3
    6636:	bf94      	ite	ls
    6638:	2300      	movls	r3, #0
    663a:	2301      	movhi	r3, #1
        /* determine next cluster from fat */
        cluster_num = ltoh16(fat_entry);
        
        if(cluster_num == FAT16_CLUSTER_FREE ||
           cluster_num == FAT16_CLUSTER_BAD ||
           (cluster_num >= FAT16_CLUSTER_RESERVED_MIN && cluster_num <= FAT16_CLUSTER_RESERVED_MAX) ||
    663c:	2a06      	cmp	r2, #6
    663e:	bf98      	it	ls
    6640:	f043 0301 	orrls.w	r3, r3, #1
           (cluster_num >= FAT16_CLUSTER_LAST_MIN && cluster_num <= FAT16_CLUSTER_LAST_MAX))
            return 0;
    6644:	2b00      	cmp	r3, #0
    6646:	bf18      	it	ne
    6648:	2000      	movne	r0, #0
    664a:	e007      	b.n	665c <fat_get_next_cluster+0x78>
 * \returns The wanted cluster number, or 0 on error.
 */
cluster_t fat_get_next_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
        return 0;
    664c:	f04f 0000 	mov.w	r0, #0
    6650:	e004      	b.n	665c <fat_get_next_cluster+0x78>
#endif
    {
        /* read appropriate fat entry */
        uint16_t fat_entry;
        if(!fs->partition->device_read(fs->header.fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
            return 0;
    6652:	f04f 0000 	mov.w	r0, #0
    6656:	e001      	b.n	665c <fat_get_next_cluster+0x78>
        
        if(cluster_num == FAT16_CLUSTER_FREE ||
           cluster_num == FAT16_CLUSTER_BAD ||
           (cluster_num >= FAT16_CLUSTER_RESERVED_MIN && cluster_num <= FAT16_CLUSTER_RESERVED_MAX) ||
           (cluster_num >= FAT16_CLUSTER_LAST_MIN && cluster_num <= FAT16_CLUSTER_LAST_MAX))
            return 0;
    6658:	f04f 0000 	mov.w	r0, #0
    }

    return cluster_num;
}
    665c:	b003      	add	sp, #12
    665e:	bd00      	pop	{pc}

00006660 <fat_free_clusters>:
 * \param[in] cluster_num The starting cluster of the chain which to free.
 * \returns 0 on failure, 1 on success.
 * \see fat_terminate_clusters
 */
uint8_t fat_free_clusters(struct fat_fs_struct* fs, cluster_t cluster_num)
{
    6660:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6664:	b083      	sub	sp, #12
    6666:	460c      	mov	r4, r1
    if(!fs || cluster_num < 2)
    6668:	4605      	mov	r5, r0
    666a:	2901      	cmp	r1, #1
    666c:	bf8c      	ite	hi
    666e:	2300      	movhi	r3, #0
    6670:	2301      	movls	r3, #1
    6672:	2800      	cmp	r0, #0
    6674:	bf08      	it	eq
    6676:	f043 0301 	orreq.w	r3, r3, #1
    667a:	bb43      	cbnz	r3, 66ce <fat_free_clusters+0x6e>
        return 0;

    offset_t fat_offset = fs->header.fat_offset;
    667c:	f8d0 8008 	ldr.w	r8, [r0, #8]

            cluster_num = cluster_num_next;
        }
    }

    return 1;
    6680:	f04f 0001 	mov.w	r0, #1
    }
    else
#endif
    {
        uint16_t fat_entry;
        while(cluster_num)
    6684:	b371      	cbz	r1, 66e4 <fat_free_clusters+0x84>
               (cluster_num_next >= FAT16_CLUSTER_RESERVED_MIN &&
                cluster_num_next <= FAT16_CLUSTER_RESERVED_MAX
               )
              )
                return 0;
            if(cluster_num_next >= FAT16_CLUSTER_LAST_MIN && cluster_num_next <= FAT16_CLUSTER_LAST_MAX)
    6686:	f64f 77f7 	movw	r7, #65527	; 0xfff7
                cluster_num_next = 0;

            /* free cluster */
            fat_entry = HTOL16(FAT16_CLUSTER_FREE);
    668a:	f04f 0900 	mov.w	r9, #0
#endif
    {
        uint16_t fat_entry;
        while(cluster_num)
        {
            if(!fs->partition->device_read(fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    668e:	eb08 0644 	add.w	r6, r8, r4, lsl #1
    6692:	682b      	ldr	r3, [r5, #0]
    6694:	681b      	ldr	r3, [r3, #0]
    6696:	4630      	mov	r0, r6
    6698:	f10d 0106 	add.w	r1, sp, #6
    669c:	f04f 0202 	mov.w	r2, #2
    66a0:	4798      	blx	r3
    66a2:	b1b8      	cbz	r0, 66d4 <fat_free_clusters+0x74>
                return 0;

            /* get next cluster of current cluster before freeing current cluster */
            uint16_t cluster_num_next = ltoh16(fat_entry);
    66a4:	f8bd 4006 	ldrh.w	r4, [sp, #6]

            if(cluster_num_next == FAT16_CLUSTER_FREE)
    66a8:	b1bc      	cbz	r4, 66da <fat_free_clusters+0x7a>
                return 1;
            if(cluster_num_next == FAT16_CLUSTER_BAD ||
    66aa:	f104 0310 	add.w	r3, r4, #16
    66ae:	b29b      	uxth	r3, r3
    66b0:	2b07      	cmp	r3, #7
    66b2:	d915      	bls.n	66e0 <fat_free_clusters+0x80>
               (cluster_num_next >= FAT16_CLUSTER_RESERVED_MIN &&
                cluster_num_next <= FAT16_CLUSTER_RESERVED_MAX
               )
              )
                return 0;
            if(cluster_num_next >= FAT16_CLUSTER_LAST_MIN && cluster_num_next <= FAT16_CLUSTER_LAST_MAX)
    66b4:	42bc      	cmp	r4, r7
    66b6:	d818      	bhi.n	66ea <fat_free_clusters+0x8a>
                cluster_num_next = 0;

            /* free cluster */
            fat_entry = HTOL16(FAT16_CLUSTER_FREE);
    66b8:	f8ad 9006 	strh.w	r9, [sp, #6]
            fs->partition->device_write(fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry));
    66bc:	682b      	ldr	r3, [r5, #0]
    66be:	689b      	ldr	r3, [r3, #8]
    66c0:	4630      	mov	r0, r6
    66c2:	f10d 0106 	add.w	r1, sp, #6
    66c6:	f04f 0202 	mov.w	r2, #2
    66ca:	4798      	blx	r3
    66cc:	e7df      	b.n	668e <fat_free_clusters+0x2e>
 * \see fat_terminate_clusters
 */
uint8_t fat_free_clusters(struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
        return 0;
    66ce:	f04f 0000 	mov.w	r0, #0
    66d2:	e007      	b.n	66e4 <fat_free_clusters+0x84>
    {
        uint16_t fat_entry;
        while(cluster_num)
        {
            if(!fs->partition->device_read(fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
                return 0;
    66d4:	f04f 0000 	mov.w	r0, #0
    66d8:	e004      	b.n	66e4 <fat_free_clusters+0x84>

            /* get next cluster of current cluster before freeing current cluster */
            uint16_t cluster_num_next = ltoh16(fat_entry);

            if(cluster_num_next == FAT16_CLUSTER_FREE)
                return 1;
    66da:	f04f 0001 	mov.w	r0, #1
    66de:	e001      	b.n	66e4 <fat_free_clusters+0x84>
            if(cluster_num_next == FAT16_CLUSTER_BAD ||
               (cluster_num_next >= FAT16_CLUSTER_RESERVED_MIN &&
                cluster_num_next <= FAT16_CLUSTER_RESERVED_MAX
               )
              )
                return 0;
    66e0:	f04f 0000 	mov.w	r0, #0
            cluster_num = cluster_num_next;
        }
    }

    return 1;
}
    66e4:	b003      	add	sp, #12
    66e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                return 0;
            if(cluster_num_next >= FAT16_CLUSTER_LAST_MIN && cluster_num_next <= FAT16_CLUSTER_LAST_MAX)
                cluster_num_next = 0;

            /* free cluster */
            fat_entry = HTOL16(FAT16_CLUSTER_FREE);
    66ea:	a902      	add	r1, sp, #8
    66ec:	f04f 0300 	mov.w	r3, #0
    66f0:	f821 3d02 	strh.w	r3, [r1, #-2]!
            fs->partition->device_write(fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry));
    66f4:	682b      	ldr	r3, [r5, #0]
    66f6:	689b      	ldr	r3, [r3, #8]
    66f8:	4630      	mov	r0, r6
    66fa:	f04f 0202 	mov.w	r2, #2
    66fe:	4798      	blx	r3

            cluster_num = cluster_num_next;
        }
    }

    return 1;
    6700:	f04f 0001 	mov.w	r0, #1
    6704:	e7ee      	b.n	66e4 <fat_free_clusters+0x84>
    6706:	bf00      	nop

00006708 <fat_append_clusters>:
 * \param[in] cluster_num The cluster to which to append the new chain.
 * \param[in] count The number of clusters to allocate.
 * \returns 0 on failure, the number of the first new cluster on success.
 */
cluster_t fat_append_clusters(struct fat_fs_struct* fs, cluster_t cluster_num, cluster_t count)
{
    6708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    670c:	b087      	sub	sp, #28
    670e:	9103      	str	r1, [sp, #12]
    if(!fs)
    6710:	9002      	str	r0, [sp, #8]
        return 0;
    6712:	f04f 0700 	mov.w	r7, #0
 * \param[in] count The number of clusters to allocate.
 * \returns 0 on failure, the number of the first new cluster on success.
 */
cluster_t fat_append_clusters(struct fat_fs_struct* fs, cluster_t cluster_num, cluster_t count)
{
    if(!fs)
    6716:	2800      	cmp	r0, #0
    6718:	d06d      	beq.n	67f6 <fat_append_clusters+0xee>
        return 0;

    device_read_t device_read = fs->partition->device_read;
    671a:	6803      	ldr	r3, [r0, #0]
    671c:	6819      	ldr	r1, [r3, #0]
    671e:	9100      	str	r1, [sp, #0]
    device_write_t device_write = fs->partition->device_write;
    6720:	689b      	ldr	r3, [r3, #8]
    6722:	9301      	str	r3, [sp, #4]
    offset_t fat_offset = fs->header.fat_offset;
    6724:	f8d0 b008 	ldr.w	fp, [r0, #8]
    cluster_t count_left = count;
    cluster_t cluster_current = fs->cluster_free;
    6728:	8b84      	ldrh	r4, [r0, #28]

    if(is_fat32)
        cluster_count = fs->header.fat_size / sizeof(fat_entry32);
    else
#endif
        cluster_count = fs->header.fat_size / sizeof(fat_entry16);
    672a:	68c3      	ldr	r3, [r0, #12]
    672c:	f3c3 0a4f 	ubfx	sl, r3, #1, #16

    fs->cluster_free = 0;
    6730:	f04f 0300 	mov.w	r3, #0
    6734:	8383      	strh	r3, [r0, #28]
    cluster_t cluster_left;
    for(cluster_left = cluster_count; cluster_left > 0; --cluster_left, ++cluster_current)
    6736:	f1ba 0f00 	cmp.w	sl, #0
    673a:	d03f      	beq.n	67bc <fat_append_clusters+0xb4>
    673c:	4655      	mov	r5, sl
        return 0;

    device_read_t device_read = fs->partition->device_read;
    device_write_t device_write = fs->partition->device_write;
    offset_t fat_offset = fs->header.fat_offset;
    cluster_t count_left = count;
    673e:	4691      	mov	r9, r2
    cluster_t cluster_current = fs->cluster_free;
    cluster_t cluster_next = 0;
    6740:	f04f 0700 	mov.w	r7, #0
                return 0;
        }
        else
#endif
        {
            if(!device_read(fat_offset + cluster_current * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
    6744:	f04f 0802 	mov.w	r8, #2

    fs->cluster_free = 0;
    cluster_t cluster_left;
    for(cluster_left = cluster_count; cluster_left > 0; --cluster_left, ++cluster_current)
    {
        if(cluster_current < 2 || cluster_current >= cluster_count)
    6748:	4554      	cmp	r4, sl
    674a:	bf34      	ite	cc
    674c:	2300      	movcc	r3, #0
    674e:	2301      	movcs	r3, #1
    6750:	2c01      	cmp	r4, #1
    6752:	bf98      	it	ls
    6754:	f043 0301 	orrls.w	r3, r3, #1
            cluster_current = 2;
    6758:	2b00      	cmp	r3, #0
    675a:	bf18      	it	ne
    675c:	2402      	movne	r4, #2
                return 0;
        }
        else
#endif
        {
            if(!device_read(fat_offset + cluster_current * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
    675e:	eb0b 0644 	add.w	r6, fp, r4, lsl #1
    6762:	4630      	mov	r0, r6
    6764:	f10d 0116 	add.w	r1, sp, #22
    6768:	4642      	mov	r2, r8
    676a:	9b00      	ldr	r3, [sp, #0]
    676c:	4798      	blx	r3
    676e:	2800      	cmp	r0, #0
    6770:	d03f      	beq.n	67f2 <fat_append_clusters+0xea>
        }
        else
#endif
        {
            /* check if this is a free cluster */
            if(fat_entry16 != HTOL16(FAT16_CLUSTER_FREE))
    6772:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    6776:	b9c3      	cbnz	r3, 67aa <fat_append_clusters+0xa2>

            /* If we don't need this free cluster for the
             * current allocation, we keep it in mind for
             * the next time.
             */
            if(count_left == 0)
    6778:	f1b9 0f00 	cmp.w	r9, #0
    677c:	d102      	bne.n	6784 <fat_append_clusters+0x7c>
            {
                fs->cluster_free = cluster_current;
    677e:	9902      	ldr	r1, [sp, #8]
    6780:	838c      	strh	r4, [r1, #28]
    6782:	e021      	b.n	67c8 <fat_append_clusters+0xc0>
                break;
            }

            /* allocate cluster */
            if(cluster_next == 0)
                fat_entry16 = HTOL16(FAT16_CLUSTER_LAST_MAX);
    6784:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6788:	2f00      	cmp	r7, #0
    678a:	bf18      	it	ne
    678c:	463b      	movne	r3, r7
                fs->cluster_free = cluster_current;
                break;
            }

            /* allocate cluster */
            if(cluster_next == 0)
    678e:	f8ad 3016 	strh.w	r3, [sp, #22]
                fat_entry16 = HTOL16(FAT16_CLUSTER_LAST_MAX);
            else
                fat_entry16 = htol16((uint16_t) cluster_next);

            if(!device_write(fat_offset + cluster_current * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
    6792:	4630      	mov	r0, r6
    6794:	f10d 0116 	add.w	r1, sp, #22
    6798:	4642      	mov	r2, r8
    679a:	9b01      	ldr	r3, [sp, #4]
    679c:	4798      	blx	r3
    679e:	b308      	cbz	r0, 67e4 <fat_append_clusters+0xdc>
                break;
        }

        cluster_next = cluster_current;
        --count_left;
    67a0:	f109 39ff 	add.w	r9, r9, #4294967295
    67a4:	fa1f f989 	uxth.w	r9, r9
    67a8:	4627      	mov	r7, r4
#endif
        cluster_count = fs->header.fat_size / sizeof(fat_entry16);

    fs->cluster_free = 0;
    cluster_t cluster_left;
    for(cluster_left = cluster_count; cluster_left > 0; --cluster_left, ++cluster_current)
    67aa:	f105 35ff 	add.w	r5, r5, #4294967295
    67ae:	b2ad      	uxth	r5, r5
    67b0:	f104 0401 	add.w	r4, r4, #1
    67b4:	b2a4      	uxth	r4, r4
    67b6:	2d00      	cmp	r5, #0
    67b8:	d1c6      	bne.n	6748 <fat_append_clusters+0x40>
    67ba:	e002      	b.n	67c2 <fat_append_clusters+0xba>
        return 0;

    device_read_t device_read = fs->partition->device_read;
    device_write_t device_write = fs->partition->device_write;
    offset_t fat_offset = fs->header.fat_offset;
    cluster_t count_left = count;
    67bc:	4691      	mov	r9, r2
    cluster_t cluster_current = fs->cluster_free;
    cluster_t cluster_next = 0;
    67be:	f04f 0700 	mov.w	r7, #0
        --count_left;
    }

    do
    {
        if(count_left > 0)
    67c2:	f1b9 0f00 	cmp.w	r9, #0
    67c6:	d10d      	bne.n	67e4 <fat_append_clusters+0xdc>
            break;

        /* We allocated a new cluster chain. Now join
         * it with the existing one (if any).
         */
        if(cluster_num >= 2)
    67c8:	9903      	ldr	r1, [sp, #12]
    67ca:	2901      	cmp	r1, #1
    67cc:	d913      	bls.n	67f6 <fat_append_clusters+0xee>
                    break;
            }
            else
#endif
            {
                fat_entry16 = htol16((uint16_t) cluster_next);
    67ce:	a906      	add	r1, sp, #24
    67d0:	f821 7d02 	strh.w	r7, [r1, #-2]!

                if(!device_write(fat_offset + cluster_num * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
    67d4:	9b03      	ldr	r3, [sp, #12]
    67d6:	eb0b 0043 	add.w	r0, fp, r3, lsl #1
    67da:	f04f 0202 	mov.w	r2, #2
    67de:	9b01      	ldr	r3, [sp, #4]
    67e0:	4798      	blx	r3
    67e2:	b940      	cbnz	r0, 67f6 <fat_append_clusters+0xee>
    } while(0);

    /* No space left on device or writing error.
     * Free up all clusters already allocated.
     */
    fat_free_clusters(fs, cluster_next);
    67e4:	9802      	ldr	r0, [sp, #8]
    67e6:	4639      	mov	r1, r7
    67e8:	f7ff ff3a 	bl	6660 <fat_free_clusters>

    return 0;
    67ec:	f04f 0700 	mov.w	r7, #0
    67f0:	e001      	b.n	67f6 <fat_append_clusters+0xee>
        }
        else
#endif
        {
            if(!device_read(fat_offset + cluster_current * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
                return 0;
    67f2:	f04f 0700 	mov.w	r7, #0
     * Free up all clusters already allocated.
     */
    fat_free_clusters(fs, cluster_next);

    return 0;
}
    67f6:	4638      	mov	r0, r7
    67f8:	b007      	add	sp, #28
    67fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    67fe:	bf00      	nop

00006800 <fat_clear_cluster_callback>:
 * Callback function for clearing a cluster.
 */
uintptr_t fat_clear_cluster_callback(uint8_t* buffer, offset_t offset, void* p)
{
    return 16;
}
    6800:	f04f 0010 	mov.w	r0, #16
    6804:	4770      	bx	lr
    6806:	bf00      	nop

00006808 <fat_cluster_offset>:
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
    6808:	4603      	mov	r3, r0
    680a:	2901      	cmp	r1, #1
    680c:	bf8c      	ite	hi
    680e:	2200      	movhi	r2, #0
    6810:	2201      	movls	r2, #1
    6812:	2800      	cmp	r0, #0
    6814:	bf08      	it	eq
    6816:	f042 0201 	orreq.w	r2, r2, #1
    681a:	b932      	cbnz	r2, 682a <fat_cluster_offset+0x22>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    681c:	f1a1 0102 	sub.w	r1, r1, #2
    6820:	8a40      	ldrh	r0, [r0, #18]
    6822:	695b      	ldr	r3, [r3, #20]
    6824:	fb00 3001 	mla	r0, r0, r1, r3
    6828:	4770      	bx	lr
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
        return 0;
    682a:	f04f 0000 	mov.w	r0, #0

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
}
    682e:	4770      	bx	lr

00006830 <fat_calc_83_checksum>:
 * \param[in] file_name_83 The 11-byte file name buffer.
 * \returns The checksum of the given file name.
 */
uint8_t fat_calc_83_checksum(const uint8_t* file_name_83)
{
    uint8_t checksum = file_name_83[0];
    6830:	7803      	ldrb	r3, [r0, #0]
    6832:	f04f 020a 	mov.w	r2, #10
    uint8_t i;
    for(i = 1; i < 11; ++i)
        checksum = ((checksum >> 1) | (checksum << 7)) + file_name_83[i];
    6836:	ea4f 0153 	mov.w	r1, r3, lsr #1
    683a:	ea41 13c3 	orr.w	r3, r1, r3, lsl #7
    683e:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    6842:	185b      	adds	r3, r3, r1
    6844:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    6848:	f102 32ff 	add.w	r2, r2, #4294967295
    684c:	b2d2      	uxtb	r2, r2
 */
uint8_t fat_calc_83_checksum(const uint8_t* file_name_83)
{
    uint8_t checksum = file_name_83[0];
    uint8_t i;
    for(i = 1; i < 11; ++i)
    684e:	2a00      	cmp	r2, #0
    6850:	d1f1      	bne.n	6836 <fat_calc_83_checksum+0x6>
        checksum = ((checksum >> 1) | (checksum << 7)) + file_name_83[i];

    return checksum;
}
    6852:	4618      	mov	r0, r3
    6854:	4770      	bx	lr
    6856:	bf00      	nop

00006858 <fat_clear_cluster>:
 * \param[in] fs The filesystem on which to operate.
 * \param[in] cluster_num The cluster to clear.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_clear_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    6858:	b510      	push	{r4, lr}
    685a:	b086      	sub	sp, #24
    685c:	4604      	mov	r4, r0
    if(cluster_num < 2)
    685e:	2901      	cmp	r1, #1
        return 0;
    6860:	bf98      	it	ls
    6862:	2000      	movls	r0, #0
 * \param[in] cluster_num The cluster to clear.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_clear_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(cluster_num < 2)
    6864:	d911      	bls.n	688a <fat_clear_cluster+0x32>
        return 0;

    offset_t cluster_offset = fat_cluster_offset(fs, cluster_num);
    6866:	f7ff ffcf 	bl	6808 <fat_cluster_offset>

    uint8_t zero[16];
    memset(zero, 0, sizeof(zero));
    686a:	f04f 0300 	mov.w	r3, #0
    686e:	9302      	str	r3, [sp, #8]
    6870:	9303      	str	r3, [sp, #12]
    6872:	9304      	str	r3, [sp, #16]
    6874:	9305      	str	r3, [sp, #20]
    return fs->partition->device_write_interval(cluster_offset,
    6876:	6821      	ldr	r1, [r4, #0]
    6878:	8a62      	ldrh	r2, [r4, #18]
    687a:	9300      	str	r3, [sp, #0]
    687c:	68cc      	ldr	r4, [r1, #12]
    687e:	a902      	add	r1, sp, #8
    6880:	f646 0301 	movw	r3, #26625	; 0x6801
    6884:	f2c0 0300 	movt	r3, #0
    6888:	47a0      	blx	r4
                                                zero,
                                                fs->header.cluster_size,
                                                fat_clear_cluster_callback,
                                                0
                                               );
}
    688a:	b006      	add	sp, #24
    688c:	bd10      	pop	{r4, pc}
    688e:	bf00      	nop

00006890 <fat_dir_entry_read_callback>:
 * \param[in,out] p An argument structure controlling operation.
 * \returns 0 on failure or completion, 1 if reading has
 *          to be continued
 */
uint8_t fat_dir_entry_read_callback(uint8_t* buffer, offset_t offset, void* p)
{
    6890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6894:	b084      	sub	sp, #16
    6896:	4604      	mov	r4, r0
    6898:	460f      	mov	r7, r1
    689a:	4616      	mov	r6, r2
  struct fat_read_dir_callback_arg* arg = p;
    struct fat_dir_entry_struct* dir_entry = arg->dir_entry;
    689c:	6815      	ldr	r5, [r2, #0]

    arg->bytes_read += 32;
    689e:	6853      	ldr	r3, [r2, #4]
    68a0:	f103 0320 	add.w	r3, r3, #32
    68a4:	6053      	str	r3, [r2, #4]

    /* skip deleted or empty entries */
    if(buffer[0] == FAT_DIRENTRY_DELETED || !buffer[0])
    68a6:	7803      	ldrb	r3, [r0, #0]
    68a8:	f1d3 0201 	rsbs	r2, r3, #1
    68ac:	bf38      	it	cc
    68ae:	2200      	movcc	r2, #0
    68b0:	2be5      	cmp	r3, #229	; 0xe5
    68b2:	bf14      	ite	ne
    68b4:	4613      	movne	r3, r2
    68b6:	f042 0301 	orreq.w	r3, r2, #1
    68ba:	b12b      	cbz	r3, 68c8 <fat_dir_entry_read_callback+0x38>
    {
#if FAT_LFN_SUPPORT
        arg->checksum = 0;
    68bc:	f04f 0300 	mov.w	r3, #0
    68c0:	7233      	strb	r3, [r6, #8]
#endif
        return 1;
    68c2:	f04f 0001 	mov.w	r0, #1
    68c6:	e0b3      	b.n	6a30 <fat_dir_entry_read_callback+0x1a0>
        return 1;
#endif

    char* long_name = dir_entry->long_name;
#if FAT_LFN_SUPPORT
    if(buffer[11] == 0x0f)
    68c8:	7ac3      	ldrb	r3, [r0, #11]
    68ca:	2b0f      	cmp	r3, #15
    68cc:	d137      	bne.n	693e <fat_dir_entry_read_callback+0xae>
    {
        /* checksum validation */
        if(arg->checksum == 0 || arg->checksum != buffer[13])
    68ce:	7a33      	ldrb	r3, [r6, #8]
    68d0:	b113      	cbz	r3, 68d8 <fat_dir_entry_read_callback+0x48>
    68d2:	7b42      	ldrb	r2, [r0, #13]
    68d4:	429a      	cmp	r2, r3
    68d6:	d009      	beq.n	68ec <fat_dir_entry_read_callback+0x5c>
        {
            /* reset directory entry */
            memset(dir_entry, 0, sizeof(*dir_entry));
    68d8:	4628      	mov	r0, r5
    68da:	f04f 0100 	mov.w	r1, #0
    68de:	f04f 022c 	mov.w	r2, #44	; 0x2c
    68e2:	f018 ff97 	bl	1f814 <memset>

            arg->checksum = buffer[13];
    68e6:	7b63      	ldrb	r3, [r4, #13]
    68e8:	7233      	strb	r3, [r6, #8]
            dir_entry->entry_offset = offset;
    68ea:	62af      	str	r7, [r5, #40]	; 0x28

        /* lfn supports unicode, but we do not, for now.
         * So we assume pure ascii and read only every
         * second byte.
         */
        uint16_t char_offset = ((buffer[0] & 0x3f) - 1) * 13;
    68ec:	7823      	ldrb	r3, [r4, #0]
    68ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    68f2:	f103 33ff 	add.w	r3, r3, #4294967295
    68f6:	eb03 0743 	add.w	r7, r3, r3, lsl #1
    68fa:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    68fe:	b2bf      	uxth	r7, r7
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
    6900:	f246 26f8 	movw	r6, #25336	; 0x62f8
    6904:	f2c0 0602 	movt	r6, #2
    6908:	466b      	mov	r3, sp
    690a:	6830      	ldr	r0, [r6, #0]
    690c:	6871      	ldr	r1, [r6, #4]
    690e:	68b2      	ldr	r2, [r6, #8]
    6910:	c307      	stmia	r3!, {r0, r1, r2}
    6912:	7b32      	ldrb	r2, [r6, #12]
    6914:	701a      	strb	r2, [r3, #0]
        uint8_t i;
        for(i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
    6916:	2f1e      	cmp	r7, #30
            long_name[char_offset + i] = buffer[char_mapping[i]];

        return 1;
    6918:	bf88      	it	hi
    691a:	2001      	movhi	r0, #1
         * second byte.
         */
        uint16_t char_offset = ((buffer[0] & 0x3f) - 1) * 13;
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
        uint8_t i;
        for(i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
    691c:	f240 808b 	bls.w	6a36 <fat_dir_entry_read_callback+0x1a6>
    6920:	e086      	b.n	6a30 <fat_dir_entry_read_callback+0x1a0>
            long_name[char_offset + i] = buffer[char_mapping[i]];
    6922:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    6926:	5ca2      	ldrb	r2, [r4, r2]
    6928:	707a      	strb	r2, [r7, #1]
    692a:	f107 0701 	add.w	r7, r7, #1
         * second byte.
         */
        uint16_t char_offset = ((buffer[0] & 0x3f) - 1) * 13;
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
        uint8_t i;
        for(i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
    692e:	428b      	cmp	r3, r1
    6930:	d07c      	beq.n	6a2c <fat_dir_entry_read_callback+0x19c>
    6932:	19ea      	adds	r2, r5, r7
    6934:	2a1e      	cmp	r2, #30
    6936:	d9f4      	bls.n	6922 <fat_dir_entry_read_callback+0x92>
            long_name[char_offset + i] = buffer[char_mapping[i]];

        return 1;
    6938:	f04f 0001 	mov.w	r0, #1
    693c:	e078      	b.n	6a30 <fat_dir_entry_read_callback+0x1a0>
    else
#endif
    {
#if FAT_LFN_SUPPORT
        /* if we do not have a long name or the previous lfn does not match, take the 8.3 name */
        if(long_name[0] == '\0' || arg->checksum != fat_calc_83_checksum(buffer))
    693e:	782b      	ldrb	r3, [r5, #0]
    6940:	b123      	cbz	r3, 694c <fat_dir_entry_read_callback+0xbc>
    6942:	f7ff ff75 	bl	6830 <fat_calc_83_checksum>
    6946:	7a33      	ldrb	r3, [r6, #8]
    6948:	4283      	cmp	r3, r0
    694a:	d062      	beq.n	6a12 <fat_dir_entry_read_callback+0x182>
#endif
        {
            /* reset directory entry */
            memset(dir_entry, 0, sizeof(*dir_entry));
    694c:	4628      	mov	r0, r5
    694e:	f04f 0100 	mov.w	r1, #0
    6952:	f04f 022c 	mov.w	r2, #44	; 0x2c
    6956:	f018 ff5d 	bl	1f814 <memset>
            dir_entry->entry_offset = offset;
    695a:	62af      	str	r7, [r5, #40]	; 0x28

            uint8_t i;
            for(i = 0; i < 8; ++i)
            {
                if(buffer[i] == ' ')
    695c:	7822      	ldrb	r2, [r4, #0]
    695e:	2a20      	cmp	r2, #32
            /* reset directory entry */
            memset(dir_entry, 0, sizeof(*dir_entry));
            dir_entry->entry_offset = offset;

            uint8_t i;
            for(i = 0; i < 8; ++i)
    6960:	bf08      	it	eq
    6962:	2000      	moveq	r0, #0
            {
                if(buffer[i] == ' ')
    6964:	d020      	beq.n	69a8 <fat_dir_entry_read_callback+0x118>
 * \param[in] offset The absolute offset of the raw data.
 * \param[in,out] p An argument structure controlling operation.
 * \returns 0 on failure or completion, 1 if reading has
 *          to be continued
 */
uint8_t fat_dir_entry_read_callback(uint8_t* buffer, offset_t offset, void* p)
    6966:	f104 0101 	add.w	r1, r4, #1
            dir_entry->entry_offset = offset;

            uint8_t i;
            for(i = 0; i < 8; ++i)
            {
                if(buffer[i] == ' ')
    696a:	46a4      	mov	ip, r4
 * \param[in] offset The absolute offset of the raw data.
 * \param[in,out] p An argument structure controlling operation.
 * \returns 0 on failure or completion, 1 if reading has
 *          to be continued
 */
uint8_t fat_dir_entry_read_callback(uint8_t* buffer, offset_t offset, void* p)
    696c:	f04f 0301 	mov.w	r3, #1
            dir_entry->entry_offset = offset;

            uint8_t i;
            for(i = 0; i < 8; ++i)
            {
                if(buffer[i] == ' ')
    6970:	f04f 0000 	mov.w	r0, #0
    6974:	e008      	b.n	6988 <fat_dir_entry_read_callback+0xf8>
    6976:	468c      	mov	ip, r1
    6978:	f811 2b01 	ldrb.w	r2, [r1], #1
    697c:	f103 0701 	add.w	r7, r3, #1
    6980:	2a20      	cmp	r2, #32
    6982:	d011      	beq.n	69a8 <fat_dir_entry_read_callback+0x118>
    6984:	4618      	mov	r0, r3
    6986:	463b      	mov	r3, r7
                    break;
                long_name[i] = buffer[i];
    6988:	542a      	strb	r2, [r5, r0]
                /* Windows NT and later versions do not store lfn entries
                 * for 8.3 names which have a lowercase basename, extension
                 * or both when everything else is uppercase. They use two
                 * extra bits to signal a lowercase basename or extension.
                 */
                if((buffer[12] & 0x08) && buffer[i] >= 'A' && buffer[i] <= 'Z')
    698a:	7b27      	ldrb	r7, [r4, #12]
    698c:	f017 0f08 	tst.w	r7, #8
    6990:	d007      	beq.n	69a2 <fat_dir_entry_read_callback+0x112>
    6992:	f89c 7000 	ldrb.w	r7, [ip]
    6996:	2f40      	cmp	r7, #64	; 0x40
    6998:	d903      	bls.n	69a2 <fat_dir_entry_read_callback+0x112>
    699a:	2f5a      	cmp	r7, #90	; 0x5a
                    long_name[i] += 'a' - 'A';
    699c:	bf9c      	itt	ls
    699e:	3220      	addls	r2, #32
    69a0:	542a      	strbls	r2, [r5, r0]
            /* reset directory entry */
            memset(dir_entry, 0, sizeof(*dir_entry));
            dir_entry->entry_offset = offset;

            uint8_t i;
            for(i = 0; i < 8; ++i)
    69a2:	b2d8      	uxtb	r0, r3
    69a4:	2b08      	cmp	r3, #8
    69a6:	d1e6      	bne.n	6976 <fat_dir_entry_read_callback+0xe6>
                 * extra bits to signal a lowercase basename or extension.
                 */
                if((buffer[12] & 0x08) && buffer[i] >= 'A' && buffer[i] <= 'Z')
                    long_name[i] += 'a' - 'A';
            }
            if(long_name[0] == 0x05)
    69a8:	782b      	ldrb	r3, [r5, #0]
    69aa:	2b05      	cmp	r3, #5
                long_name[0] = (char) FAT_DIRENTRY_DELETED;
    69ac:	bf04      	itt	eq
    69ae:	23e5      	moveq	r3, #229	; 0xe5
    69b0:	702b      	strbeq	r3, [r5, #0]

            if(buffer[8] != ' ')
    69b2:	7a23      	ldrb	r3, [r4, #8]
    69b4:	2b20      	cmp	r3, #32
    69b6:	bf08      	it	eq
    69b8:	4603      	moveq	r3, r0
    69ba:	d027      	beq.n	6a0c <fat_dir_entry_read_callback+0x17c>
            {
                long_name[i++] = '.';
    69bc:	f04f 032e 	mov.w	r3, #46	; 0x2e
    69c0:	542b      	strb	r3, [r5, r0]
    69c2:	f100 0301 	add.w	r3, r0, #1
    69c6:	b2db      	uxtb	r3, r3

                uint8_t j = 8;
                for(; j < 11; ++j)
                {
                    if(buffer[j] == ' ')
    69c8:	7a22      	ldrb	r2, [r4, #8]
    69ca:	2a20      	cmp	r2, #32
    69cc:	d01e      	beq.n	6a0c <fat_dir_entry_read_callback+0x17c>
    69ce:	f104 0c08 	add.w	ip, r4, #8
 * \param[in] offset The absolute offset of the raw data.
 * \param[in,out] p An argument structure controlling operation.
 * \returns 0 on failure or completion, 1 if reading has
 *          to be continued
 */
uint8_t fat_dir_entry_read_callback(uint8_t* buffer, offset_t offset, void* p)
    69d2:	f104 0109 	add.w	r1, r4, #9
    69d6:	f100 0004 	add.w	r0, r0, #4
    69da:	b2c0      	uxtb	r0, r0
    69dc:	e004      	b.n	69e8 <fat_dir_entry_read_callback+0x158>
                long_name[i++] = '.';

                uint8_t j = 8;
                for(; j < 11; ++j)
                {
                    if(buffer[j] == ' ')
    69de:	468c      	mov	ip, r1
    69e0:	f811 2b01 	ldrb.w	r2, [r1], #1
    69e4:	2a20      	cmp	r2, #32
    69e6:	d011      	beq.n	6a0c <fat_dir_entry_read_callback+0x17c>
                        break;
                    long_name[i] = buffer[j];
    69e8:	54ea      	strb	r2, [r5, r3]

                    /* See above for the lowercase 8.3 name handling of
                     * Windows NT and later.
                     */
                    if((buffer[12] & 0x10) && buffer[j] >= 'A' && buffer[j] <= 'Z')
    69ea:	7b27      	ldrb	r7, [r4, #12]
    69ec:	f017 0f10 	tst.w	r7, #16
    69f0:	d007      	beq.n	6a02 <fat_dir_entry_read_callback+0x172>
    69f2:	f89c 7000 	ldrb.w	r7, [ip]
    69f6:	2f40      	cmp	r7, #64	; 0x40
    69f8:	d903      	bls.n	6a02 <fat_dir_entry_read_callback+0x172>
    69fa:	2f5a      	cmp	r7, #90	; 0x5a
                        long_name[i] += 'a' - 'A';
    69fc:	bf9c      	itt	ls
    69fe:	3220      	addls	r2, #32
    6a00:	54ea      	strbls	r2, [r5, r3]

                    ++i;
    6a02:	f103 0301 	add.w	r3, r3, #1
    6a06:	b2db      	uxtb	r3, r3
            if(buffer[8] != ' ')
            {
                long_name[i++] = '.';

                uint8_t j = 8;
                for(; j < 11; ++j)
    6a08:	4283      	cmp	r3, r0
    6a0a:	d1e8      	bne.n	69de <fat_dir_entry_read_callback+0x14e>

                    ++i;
                }
            } 

            long_name[i] = '\0';
    6a0c:	f04f 0200 	mov.w	r2, #0
    6a10:	54ea      	strb	r2, [r5, r3]
        }
        
        /* extract properties of file and store them within the structure */
        dir_entry->attributes = buffer[11];
    6a12:	7ae3      	ldrb	r3, [r4, #11]
    6a14:	f885 3020 	strb.w	r3, [r5, #32]
        dir_entry->cluster = ltoh16(*((uint16_t*) &buffer[26]));
    6a18:	8b63      	ldrh	r3, [r4, #26]
    6a1a:	846b      	strh	r3, [r5, #34]	; 0x22
#if FAT_FAT32_SUPPORT
        dir_entry->cluster |= ((cluster_t) ltoh16(*((uint16_t*) &buffer[20]))) << 16;
#endif
        dir_entry->file_size = ltoh32(*((uint32_t*) &buffer[28]));
    6a1c:	69e3      	ldr	r3, [r4, #28]
    6a1e:	626b      	str	r3, [r5, #36]	; 0x24
#if FAT_DATETIME_SUPPORT
        dir_entry->modification_time = ltoh16(*((uint16_t*) &buffer[22]));
        dir_entry->modification_date = ltoh16(*((uint16_t*) &buffer[24]));
#endif

        arg->finished = 1;
    6a20:	f04f 0301 	mov.w	r3, #1
    6a24:	7273      	strb	r3, [r6, #9]
        return 0;
    6a26:	f04f 0000 	mov.w	r0, #0
    6a2a:	e001      	b.n	6a30 <fat_dir_entry_read_callback+0x1a0>
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
        uint8_t i;
        for(i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
            long_name[char_offset + i] = buffer[char_mapping[i]];

        return 1;
    6a2c:	f04f 0001 	mov.w	r0, #1
#endif

        arg->finished = 1;
        return 0;
    }
}
    6a30:	b004      	add	sp, #16
    6a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
         */
        uint16_t char_offset = ((buffer[0] & 0x3f) - 1) * 13;
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
        uint8_t i;
        for(i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
            long_name[char_offset + i] = buffer[char_mapping[i]];
    6a36:	ab04      	add	r3, sp, #16
    6a38:	f813 2d10 	ldrb.w	r2, [r3, #-16]!
    6a3c:	5ca2      	ldrb	r2, [r4, r2]
    6a3e:	55ea      	strb	r2, [r5, r7]
 * \param[in] offset The absolute offset of the raw data.
 * \param[in,out] p An argument structure controlling operation.
 * \returns 0 on failure or completion, 1 if reading has
 *          to be continued
 */
uint8_t fat_dir_entry_read_callback(uint8_t* buffer, offset_t offset, void* p)
    6a40:	19ef      	adds	r7, r5, r7
    6a42:	a903      	add	r1, sp, #12
    6a44:	f1c5 0501 	rsb	r5, r5, #1
    6a48:	e773      	b.n	6932 <fat_dir_entry_read_callback+0xa2>
    6a4a:	bf00      	nop

00006a4c <fat_find_offset_for_dir_entry>:
 * \param[in] parent The directory in which to search.
 * \param[in] dir_entry The directory entry for which to search space.
 * \returns 0 on failure, a device offset on success.
 */
offset_t fat_find_offset_for_dir_entry(struct fat_fs_struct* fs, const struct fat_dir_struct* parent, const struct fat_dir_entry_struct* dir_entry)
{
    6a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6a50:	b085      	sub	sp, #20
    6a52:	460c      	mov	r4, r1
    if(!fs || !dir_entry)
    6a54:	4605      	mov	r5, r0
    6a56:	4613      	mov	r3, r2
    6a58:	f1d2 0201 	rsbs	r2, r2, #1
    6a5c:	bf38      	it	cc
    6a5e:	2200      	movcc	r2, #0
    6a60:	2800      	cmp	r0, #0
    6a62:	bf08      	it	eq
    6a64:	f042 0201 	orreq.w	r2, r2, #1
        return 0;
    6a68:	f04f 0900 	mov.w	r9, #0
 * \param[in] dir_entry The directory entry for which to search space.
 * \returns 0 on failure, a device offset on success.
 */
offset_t fat_find_offset_for_dir_entry(struct fat_fs_struct* fs, const struct fat_dir_struct* parent, const struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry)
    6a6c:	2a00      	cmp	r2, #0
    6a6e:	d173      	bne.n	6b58 <fat_find_offset_for_dir_entry+0x10c>
        return 0;

    /* search for a place where to write the directory entry to disk */
#if FAT_LFN_SUPPORT
    uint8_t free_dir_entries_needed = (strlen(dir_entry->long_name) + 12) / 13 + 1;
    6a70:	4618      	mov	r0, r3
    6a72:	f019 fcaf 	bl	203d4 <strlen>
    6a76:	f100 000c 	add.w	r0, r0, #12
    6a7a:	f64e 434f 	movw	r3, #60495	; 0xec4f
    6a7e:	f6c4 63c4 	movt	r3, #20164	; 0x4ec4
    6a82:	fba3 2300 	umull	r2, r3, r3, r0
    6a86:	ea4f 0393 	mov.w	r3, r3, lsr #2
    6a8a:	f103 0301 	add.w	r3, r3, #1
    6a8e:	b2db      	uxtb	r3, r3
    6a90:	9301      	str	r3, [sp, #4]
    uint8_t free_dir_entries_found = 0;
#endif
    cluster_t cluster_num = parent->dir_entry.cluster;
    6a92:	f8b4 8026 	ldrh.w	r8, [r4, #38]	; 0x26
    offset_t dir_entry_offset = 0;
    offset_t offset = 0;
    offset_t offset_to = 0;
    6a96:	f04f 0700 	mov.w	r7, #0
#if FAT_LFN_SUPPORT
    uint8_t free_dir_entries_needed = (strlen(dir_entry->long_name) + 12) / 13 + 1;
    uint8_t free_dir_entries_found = 0;
#endif
    cluster_t cluster_num = parent->dir_entry.cluster;
    offset_t dir_entry_offset = 0;
    6a9a:	46b9      	mov	r9, r7
    offset_t offset_to = 0;
#if FAT_FAT32_SUPPORT
    uint8_t is_fat32 = (fs->partition->type == PARTITION_TYPE_FAT32);
#endif

    if(cluster_num == 0)
    6a9c:	f1b8 0f00 	cmp.w	r8, #0
    6aa0:	d102      	bne.n	6aa8 <fat_find_offset_for_dir_entry+0x5c>
        else
#endif
        {
            /* we read/write from the root directory entry */
            offset = fs->header.root_dir_offset;
            offset_to = fs->header.cluster_zero_offset;
    6aa2:	696f      	ldr	r7, [r5, #20]
            dir_entry_offset = offset;
    6aa4:	f8d5 9018 	ldr.w	r9, [r5, #24]
        else
        {
            offset += 32;
            dir_entry_offset = offset;
#if FAT_LFN_SUPPORT
            free_dir_entries_found = 0;
    6aa8:	464c      	mov	r4, r9
    6aaa:	f04f 0600 	mov.w	r6, #0

            offset = fat_cluster_offset(fs, cluster_num);
            offset_to = offset + fs->header.cluster_size;
            dir_entry_offset = offset;
#if FAT_LFN_SUPPORT
            free_dir_entries_found = 0;
    6aae:	46b3      	mov	fp, r6
#endif
        }
        
        /* read next lfn or 8.3 entry */
        uint8_t first_char;
        if(!fs->partition->device_read(offset, &first_char, sizeof(first_char)))
    6ab0:	f04f 0a01 	mov.w	sl, #1
        }
    }
    
    while(1)
    {
        if(offset == offset_to)
    6ab4:	42bc      	cmp	r4, r7
    6ab6:	d128      	bne.n	6b0a <fat_find_offset_for_dir_entry+0xbe>
        {
            if(cluster_num == 0)
    6ab8:	f1b8 0f00 	cmp.w	r8, #0
    6abc:	d047      	beq.n	6b4e <fat_find_offset_for_dir_entry+0x102>
                /* We iterated through the whole root directory and
                 * could not find enough space for the directory entry.
                 */
                return 0;

            if(offset)
    6abe:	b1dc      	cbz	r4, 6af8 <fat_find_offset_for_dir_entry+0xac>
            {
                /* We reached a cluster boundary and have to
                 * switch to the next cluster.
                 */

                cluster_t cluster_next = fat_get_next_cluster(fs, cluster_num);
    6ac0:	4628      	mov	r0, r5
    6ac2:	4641      	mov	r1, r8
    6ac4:	f7ff fd8e 	bl	65e4 <fat_get_next_cluster>
                if(!cluster_next)
    6ac8:	b9a8      	cbnz	r0, 6af6 <fat_find_offset_for_dir_entry+0xaa>
                {
                    cluster_next = fat_append_clusters(fs, cluster_num, 1);
    6aca:	4628      	mov	r0, r5
    6acc:	4641      	mov	r1, r8
    6ace:	f04f 0201 	mov.w	r2, #1
    6ad2:	f7ff fe19 	bl	6708 <fat_append_clusters>
                    if(!cluster_next)
    6ad6:	4601      	mov	r1, r0
                        return 0;
    6ad8:	f04f 0900 	mov.w	r9, #0

                cluster_t cluster_next = fat_get_next_cluster(fs, cluster_num);
                if(!cluster_next)
                {
                    cluster_next = fat_append_clusters(fs, cluster_num, 1);
                    if(!cluster_next)
    6adc:	2800      	cmp	r0, #0
    6ade:	d03b      	beq.n	6b58 <fat_find_offset_for_dir_entry+0x10c>
                        return 0;

                    /* we appended a new cluster and know it is free */
                    dir_entry_offset = fs->header.cluster_zero_offset +
                                       (offset_t) (cluster_next - 2) * fs->header.cluster_size;
    6ae0:	f1a0 0202 	sub.w	r2, r0, #2
    6ae4:	f8b5 9012 	ldrh.w	r9, [r5, #18]
                    cluster_next = fat_append_clusters(fs, cluster_num, 1);
                    if(!cluster_next)
                        return 0;

                    /* we appended a new cluster and know it is free */
                    dir_entry_offset = fs->header.cluster_zero_offset +
    6ae8:	696b      	ldr	r3, [r5, #20]
    6aea:	fb09 3902 	mla	r9, r9, r2, r3
                                       (offset_t) (cluster_next - 2) * fs->header.cluster_size;

                    /* clear cluster to avoid garbage directory entries */
                    fat_clear_cluster(fs, cluster_next);
    6aee:	4628      	mov	r0, r5
    6af0:	f7ff feb2 	bl	6858 <fat_clear_cluster>

                    break;
    6af4:	e030      	b.n	6b58 <fat_find_offset_for_dir_entry+0x10c>
                }
                cluster_num = cluster_next;
    6af6:	4680      	mov	r8, r0
            }

            offset = fat_cluster_offset(fs, cluster_num);
    6af8:	4628      	mov	r0, r5
    6afa:	4641      	mov	r1, r8
    6afc:	f7ff fe84 	bl	6808 <fat_cluster_offset>
    6b00:	4604      	mov	r4, r0
            offset_to = offset + fs->header.cluster_size;
    6b02:	8a6f      	ldrh	r7, [r5, #18]
    6b04:	19c7      	adds	r7, r0, r7
            dir_entry_offset = offset;
    6b06:	4681      	mov	r9, r0
#if FAT_LFN_SUPPORT
            free_dir_entries_found = 0;
    6b08:	465e      	mov	r6, fp
#endif
        }
        
        /* read next lfn or 8.3 entry */
        uint8_t first_char;
        if(!fs->partition->device_read(offset, &first_char, sizeof(first_char)))
    6b0a:	682b      	ldr	r3, [r5, #0]
    6b0c:	681b      	ldr	r3, [r3, #0]
    6b0e:	4620      	mov	r0, r4
    6b10:	f10d 010f 	add.w	r1, sp, #15
    6b14:	4652      	mov	r2, sl
    6b16:	4798      	blx	r3
    6b18:	b1e0      	cbz	r0, 6b54 <fat_find_offset_for_dir_entry+0x108>
            return 0;

        /* check if we found a free directory entry */
        if(first_char == FAT_DIRENTRY_DELETED || !first_char)
    6b1a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6b1e:	f1d3 0201 	rsbs	r2, r3, #1
    6b22:	bf38      	it	cc
    6b24:	2200      	movcc	r2, #0
    6b26:	2be5      	cmp	r3, #229	; 0xe5
    6b28:	bf14      	ite	ne
    6b2a:	4613      	movne	r3, r2
    6b2c:	f042 0301 	orreq.w	r3, r2, #1
    6b30:	b143      	cbz	r3, 6b44 <fat_find_offset_for_dir_entry+0xf8>
        {
            /* check if we have the needed number of available entries */
#if FAT_LFN_SUPPORT
            ++free_dir_entries_found;
    6b32:	f106 0601 	add.w	r6, r6, #1
    6b36:	b2f6      	uxtb	r6, r6
            if(free_dir_entries_found >= free_dir_entries_needed)
    6b38:	9b01      	ldr	r3, [sp, #4]
    6b3a:	42b3      	cmp	r3, r6
    6b3c:	d90c      	bls.n	6b58 <fat_find_offset_for_dir_entry+0x10c>
#endif
                break;

            offset += 32;
    6b3e:	f104 0420 	add.w	r4, r4, #32
    6b42:	e7b7      	b.n	6ab4 <fat_find_offset_for_dir_entry+0x68>
        }
        else
        {
            offset += 32;
    6b44:	f104 0420 	add.w	r4, r4, #32
            dir_entry_offset = offset;
    6b48:	46a1      	mov	r9, r4
#if FAT_LFN_SUPPORT
            free_dir_entries_found = 0;
    6b4a:	465e      	mov	r6, fp
    6b4c:	e7b2      	b.n	6ab4 <fat_find_offset_for_dir_entry+0x68>
        {
            if(cluster_num == 0)
                /* We iterated through the whole root directory and
                 * could not find enough space for the directory entry.
                 */
                return 0;
    6b4e:	f04f 0900 	mov.w	r9, #0
    6b52:	e001      	b.n	6b58 <fat_find_offset_for_dir_entry+0x10c>
        }
        
        /* read next lfn or 8.3 entry */
        uint8_t first_char;
        if(!fs->partition->device_read(offset, &first_char, sizeof(first_char)))
            return 0;
    6b54:	f04f 0900 	mov.w	r9, #0
#endif
        }
    }

    return dir_entry_offset;
}
    6b58:	4648      	mov	r0, r9
    6b5a:	b005      	add	sp, #20
    6b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00006b60 <fat_write_dir_entry>:
 * \param[in] fs The filesystem on which to operate.
 * \param[in] dir_entry The directory entry to write.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_write_dir_entry(const struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
    6b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6b64:	b089      	sub	sp, #36	; 0x24
    if(!fs || !dir_entry)
    6b66:	460e      	mov	r6, r1
    6b68:	f1d1 0101 	rsbs	r1, r1, #1
    6b6c:	bf38      	it	cc
    6b6e:	2100      	movcc	r1, #0
    6b70:	2800      	cmp	r0, #0
    6b72:	bf08      	it	eq
    6b74:	f041 0101 	orreq.w	r1, r1, #1
    6b78:	2900      	cmp	r1, #0
    6b7a:	f040 80e4 	bne.w	6d46 <fat_write_dir_entry+0x1e6>
        fat_set_file_modification_date(dir_entry, year, month, day);
        fat_set_file_modification_time(dir_entry, hour, min, sec);
    }
#endif

    device_write_t device_write = fs->partition->device_write;
    6b7e:	6803      	ldr	r3, [r0, #0]
    6b80:	f8d3 a008 	ldr.w	sl, [r3, #8]
    offset_t offset = dir_entry->entry_offset;
    6b84:	6ab7      	ldr	r7, [r6, #40]	; 0x28
    const char* name = dir_entry->long_name;
    6b86:	4635      	mov	r5, r6
    uint8_t name_len = strlen(name);
    6b88:	4630      	mov	r0, r6
    6b8a:	f019 fc23 	bl	203d4 <strlen>
    6b8e:	b2c4      	uxtb	r4, r0
#if FAT_LFN_SUPPORT
    uint8_t lfn_entry_count = (name_len + 12) / 13;
    6b90:	f104 090c 	add.w	r9, r4, #12
    6b94:	f64e 434f 	movw	r3, #60495	; 0xec4f
    6b98:	f6c4 63c4 	movt	r3, #20164	; 0x4ec4
    6b9c:	fb83 0309 	smull	r0, r3, r3, r9
    6ba0:	ea4f 0993 	mov.w	r9, r3, lsr #2
    uint8_t buffer[32];

    /* write 8.3 entry */

    /* generate 8.3 file name */
    memset(&buffer[0], ' ', 11);
    6ba4:	4668      	mov	r0, sp
    6ba6:	f04f 0120 	mov.w	r1, #32
    6baa:	f04f 020b 	mov.w	r2, #11
    6bae:	f018 fe31 	bl	1f814 <memset>
    char* name_ext = strrchr(name, '.');
    6bb2:	4630      	mov	r0, r6
    6bb4:	f04f 012e 	mov.w	r1, #46	; 0x2e
    6bb8:	f019 fcca 	bl	20550 <strrchr>
    if(name_ext && *++name_ext)
    6bbc:	b190      	cbz	r0, 6be4 <fat_write_dir_entry+0x84>
    6bbe:	7843      	ldrb	r3, [r0, #1]
    6bc0:	b183      	cbz	r3, 6be4 <fat_write_dir_entry+0x84>
    6bc2:	f100 0801 	add.w	r8, r0, #1
    {
        uint8_t name_ext_len = strlen(name_ext);
    6bc6:	4640      	mov	r0, r8
    6bc8:	f019 fc04 	bl	203d4 <strlen>
    6bcc:	b2c2      	uxtb	r2, r0
        name_len -= name_ext_len + 1;
    6bce:	ea6f 0302 	mvn.w	r3, r2
    6bd2:	18e4      	adds	r4, r4, r3
    6bd4:	b2e4      	uxtb	r4, r4
            name_ext_len = 3;
#else
            return 0;
#endif
        
        memcpy(&buffer[8], name_ext, name_ext_len);
    6bd6:	a802      	add	r0, sp, #8
    6bd8:	4641      	mov	r1, r8
    6bda:	2a03      	cmp	r2, #3
    6bdc:	bf28      	it	cs
    6bde:	2203      	movcs	r2, #3
    6be0:	f018 fd42 	bl	1f668 <memcpy>
    }
    
    if(name_len <= 8)
    6be4:	2c08      	cmp	r4, #8
    6be6:	d810      	bhi.n	6c0a <fat_write_dir_entry+0xaa>
    {
        memcpy(buffer, name, name_len);
    6be8:	4668      	mov	r0, sp
    6bea:	4631      	mov	r1, r6
    6bec:	4622      	mov	r2, r4
    6bee:	f018 fd3b 	bl	1f668 <memcpy>
         *
         * Theoretically it would be possible to leave
         * the 8.3 entry alone if the basename and the
         * extension have no mixed capitalization.
         */
        if(name[0] == '.' &&
    6bf2:	7833      	ldrb	r3, [r6, #0]
    6bf4:	2b2e      	cmp	r3, #46	; 0x2e
    6bf6:	d11e      	bne.n	6c36 <fat_write_dir_entry+0xd6>
           ((name[1] == '.' && name[2] == '\0') ||
    6bf8:	7873      	ldrb	r3, [r6, #1]
         *
         * Theoretically it would be possible to leave
         * the 8.3 entry alone if the basename and the
         * extension have no mixed capitalization.
         */
        if(name[0] == '.' &&
    6bfa:	2b2e      	cmp	r3, #46	; 0x2e
           ((name[1] == '.' && name[2] == '\0') ||
    6bfc:	bf08      	it	eq
    6bfe:	78b3      	ldrbeq	r3, [r6, #2]
            name[1] == '\0')
          )
            lfn_entry_count = 0;
    6c00:	2b00      	cmp	r3, #0
    6c02:	bf08      	it	eq
    6c04:	f04f 0900 	moveq.w	r9, #0
    6c08:	e015      	b.n	6c36 <fat_write_dir_entry+0xd6>
#endif
    }
    else
    {
#if FAT_LFN_SUPPORT
        memcpy(buffer, name, 8);
    6c0a:	466b      	mov	r3, sp
    6c0c:	6828      	ldr	r0, [r5, #0]
    6c0e:	6869      	ldr	r1, [r5, #4]
    6c10:	c303      	stmia	r3!, {r0, r1}

        /* Minimize 8.3 name clashes by appending
         * the lower byte of the cluster number.
         */
        uint8_t num = dir_entry->cluster & 0xff;
    6c12:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22

        buffer[6] = (num < 0xa0) ? ('0' + (num >> 4)) : ('a' + (num >> 4));
    6c16:	2b9f      	cmp	r3, #159	; 0x9f
    6c18:	ea4f 1213 	mov.w	r2, r3, lsr #4
    6c1c:	bf94      	ite	ls
    6c1e:	3230      	addls	r2, #48	; 0x30
    6c20:	3261      	addhi	r2, #97	; 0x61
    6c22:	f88d 2006 	strb.w	r2, [sp, #6]
        num &= 0x0f;
    6c26:	f003 030f 	and.w	r3, r3, #15
        buffer[7] = (num < 0x0a) ? ('0' + num) : ('a' + num);
    6c2a:	2b09      	cmp	r3, #9
    6c2c:	bf94      	ite	ls
    6c2e:	3330      	addls	r3, #48	; 0x30
    6c30:	3361      	addhi	r3, #97	; 0x61
    6c32:	f88d 3007 	strb.w	r3, [sp, #7]
#else
        return 0;
#endif
    }
    if(buffer[0] == FAT_DIRENTRY_DELETED)
    6c36:	f89d 3000 	ldrb.w	r3, [sp]
    6c3a:	2be5      	cmp	r3, #229	; 0xe5
        buffer[0] = 0x05;
    6c3c:	bf04      	itt	eq
    6c3e:	2305      	moveq	r3, #5
    6c40:	f88d 3000 	strbeq.w	r3, [sp]

    /* fill directory entry buffer */
    memset(&buffer[11], 0, sizeof(buffer) - 11);
    6c44:	f10d 000b 	add.w	r0, sp, #11
    6c48:	f04f 0100 	mov.w	r1, #0
    6c4c:	f04f 0215 	mov.w	r2, #21
    6c50:	f018 fde0 	bl	1f814 <memset>
    buffer[0x0b] = dir_entry->attributes;
    6c54:	f896 3020 	ldrb.w	r3, [r6, #32]
    6c58:	f88d 300b 	strb.w	r3, [sp, #11]
    *((uint16_t*) &buffer[0x18]) = htol16(dir_entry->modification_date);
#endif
#if FAT_FAT32_SUPPORT
    *((uint16_t*) &buffer[0x14]) = htol16((uint16_t) (dir_entry->cluster >> 16));
#endif
    *((uint16_t*) &buffer[0x1a]) = htol16(dir_entry->cluster);
    6c5c:	8c72      	ldrh	r2, [r6, #34]	; 0x22
    6c5e:	f8ad 201a 	strh.w	r2, [sp, #26]
    *((uint32_t*) &buffer[0x1c]) = htol32(dir_entry->file_size);
    6c62:	6a73      	ldr	r3, [r6, #36]	; 0x24
    6c64:	9307      	str	r3, [sp, #28]

    /* write to disk */
#if FAT_LFN_SUPPORT
    if(!device_write(offset + (uint16_t) lfn_entry_count * 32, buffer, sizeof(buffer)))
    6c66:	ea4f 1049 	mov.w	r0, r9, lsl #5
    6c6a:	19c0      	adds	r0, r0, r7
    6c6c:	4669      	mov	r1, sp
    6c6e:	f04f 0220 	mov.w	r2, #32
    6c72:	47d0      	blx	sl
    6c74:	2800      	cmp	r0, #0
    6c76:	d069      	beq.n	6d4c <fat_write_dir_entry+0x1ec>
#endif
        return 0;
    
#if FAT_LFN_SUPPORT
    /* calculate checksum of 8.3 name */
    uint8_t checksum = fat_calc_83_checksum(buffer);
    6c78:	4668      	mov	r0, sp
    6c7a:	f7ff fdd9 	bl	6830 <fat_calc_83_checksum>
    6c7e:	4683      	mov	fp, r0
    
        offset += sizeof(buffer);
    }
#endif
    
    return 1;
    6c80:	f04f 0001 	mov.w	r0, #1
    /* calculate checksum of 8.3 name */
    uint8_t checksum = fat_calc_83_checksum(buffer);
    
    /* write lfn entries */
    uint8_t lfn_entry;
    for(lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
    6c84:	f1b9 0f00 	cmp.w	r9, #0
    6c88:	d062      	beq.n	6d50 <fat_write_dir_entry+0x1f0>
    6c8a:	464d      	mov	r5, r9
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
        uint8_t i = 1;
        while(i < 0x1f)
        {
            buffer[i++] = *long_name_curr;
            buffer[i++] = 0;
    6c8c:	f04f 0400 	mov.w	r4, #0

            switch(i)
            {
                case 0x0b:
                    i = 0x0e;
    6c90:	f04f 080e 	mov.w	r8, #14
    
    /* write lfn entries */
    uint8_t lfn_entry;
    for(lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
    {
        memset(buffer, 0xff, sizeof(buffer));
    6c94:	4668      	mov	r0, sp
    6c96:	f04f 01ff 	mov.w	r1, #255	; 0xff
    6c9a:	f04f 0220 	mov.w	r2, #32
    6c9e:	f018 fdb9 	bl	1f814 <memset>
        
        /* set file name */
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
    6ca2:	f105 33ff 	add.w	r3, r5, #4294967295
    6ca6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    6caa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
        uint8_t i = 1;
        while(i < 0x1f)
        {
            buffer[i++] = *long_name_curr;
    6cae:	5cf2      	ldrb	r2, [r6, r3]
    6cb0:	f88d 2001 	strb.w	r2, [sp, #1]
            buffer[i++] = 0;
    6cb4:	f88d 4002 	strb.w	r4, [sp, #2]
    for(lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
    {
        memset(buffer, 0xff, sizeof(buffer));
        
        /* set file name */
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
    6cb8:	18f3      	adds	r3, r6, r3
 *
 * \param[in] fs The filesystem on which to operate.
 * \param[in] dir_entry The directory entry to write.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_write_dir_entry(const struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
    6cba:	f103 32ff 	add.w	r2, r3, #4294967295
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
        uint8_t i = 1;
        while(i < 0x1f)
        {
            buffer[i++] = *long_name_curr;
            buffer[i++] = 0;
    6cbe:	f04f 0303 	mov.w	r3, #3
    6cc2:	e016      	b.n	6cf2 <fat_write_dir_entry+0x192>
        /* set file name */
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
        uint8_t i = 1;
        while(i < 0x1f)
        {
            buffer[i++] = *long_name_curr;
    6cc4:	7840      	ldrb	r0, [r0, #1]
    6cc6:	f10d 0e20 	add.w	lr, sp, #32
    6cca:	eb0e 0103 	add.w	r1, lr, r3
    6cce:	f801 0c20 	strb.w	r0, [r1, #-32]
    6cd2:	f103 0101 	add.w	r1, r3, #1
            buffer[i++] = 0;
    6cd6:	b2c9      	uxtb	r1, r1
    6cd8:	4471      	add	r1, lr
    6cda:	f801 4c20 	strb.w	r4, [r1, #-32]
    6cde:	f103 0302 	add.w	r3, r3, #2
    6ce2:	b2db      	uxtb	r3, r3

            switch(i)
    6ce4:	2b0b      	cmp	r3, #11
            {
                case 0x0b:
                    i = 0x0e;
    6ce6:	bf08      	it	eq
    6ce8:	4643      	moveq	r3, r8
        while(i < 0x1f)
        {
            buffer[i++] = *long_name_curr;
            buffer[i++] = 0;

            switch(i)
    6cea:	d002      	beq.n	6cf2 <fat_write_dir_entry+0x192>
            {
                case 0x0b:
                    i = 0x0e;
                    break;
                case 0x1a:
                    i = 0x1c;
    6cec:	2b1a      	cmp	r3, #26
    6cee:	bf08      	it	eq
    6cf0:	231c      	moveq	r3, #28
                    break;
    6cf2:	f102 0201 	add.w	r2, r2, #1
 *
 * \param[in] fs The filesystem on which to operate.
 * \param[in] dir_entry The directory entry to write.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_write_dir_entry(const struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
    6cf6:	4610      	mov	r0, r2
                case 0x1a:
                    i = 0x1c;
                    break;
            }

            if(!*long_name_curr++)
    6cf8:	7811      	ldrb	r1, [r2, #0]
    6cfa:	b109      	cbz	r1, 6d00 <fat_write_dir_entry+0x1a0>
        memset(buffer, 0xff, sizeof(buffer));
        
        /* set file name */
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
        uint8_t i = 1;
        while(i < 0x1f)
    6cfc:	2b1e      	cmp	r3, #30
    6cfe:	d9e1      	bls.n	6cc4 <fat_write_dir_entry+0x164>
            if(!*long_name_curr++)
                break;
        }
        
        /* set index of lfn entry */
        buffer[0x00] = lfn_entry;
    6d00:	f88d 5000 	strb.w	r5, [sp]
        if(lfn_entry == lfn_entry_count)
    6d04:	454d      	cmp	r5, r9
            buffer[0x00] |= FAT_DIRENTRY_LFNLAST;
    6d06:	bf04      	itt	eq
    6d08:	f049 0340 	orreq.w	r3, r9, #64	; 0x40
    6d0c:	f88d 3000 	strbeq.w	r3, [sp]

        /* mark as lfn entry */
        buffer[0x0b] = 0x0f;
    6d10:	f04f 030f 	mov.w	r3, #15
    6d14:	f88d 300b 	strb.w	r3, [sp, #11]

        /* set 8.3 checksum */
        buffer[0x0d] = checksum;
    6d18:	f88d b00d 	strb.w	fp, [sp, #13]

        /* clear reserved bytes */
        buffer[0x0c] = 0;
    6d1c:	f88d 400c 	strb.w	r4, [sp, #12]
        buffer[0x1a] = 0;
    6d20:	f88d 401a 	strb.w	r4, [sp, #26]
        buffer[0x1b] = 0;
    6d24:	f88d 401b 	strb.w	r4, [sp, #27]

        /* write entry */
        device_write(offset, buffer, sizeof(buffer));
    6d28:	4638      	mov	r0, r7
    6d2a:	4669      	mov	r1, sp
    6d2c:	f04f 0220 	mov.w	r2, #32
    6d30:	47d0      	blx	sl
    
        offset += sizeof(buffer);
    6d32:	f107 0720 	add.w	r7, r7, #32
    /* calculate checksum of 8.3 name */
    uint8_t checksum = fat_calc_83_checksum(buffer);
    
    /* write lfn entries */
    uint8_t lfn_entry;
    for(lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
    6d36:	f105 35ff 	add.w	r5, r5, #4294967295
    6d3a:	b2ed      	uxtb	r5, r5
    6d3c:	2d00      	cmp	r5, #0
    6d3e:	d1a9      	bne.n	6c94 <fat_write_dir_entry+0x134>
    
        offset += sizeof(buffer);
    }
#endif
    
    return 1;
    6d40:	f04f 0001 	mov.w	r0, #1
    6d44:	e004      	b.n	6d50 <fat_write_dir_entry+0x1f0>
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_write_dir_entry(const struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry)
        return 0;
    6d46:	f04f 0000 	mov.w	r0, #0
    6d4a:	e001      	b.n	6d50 <fat_write_dir_entry+0x1f0>
#if FAT_LFN_SUPPORT
    if(!device_write(offset + (uint16_t) lfn_entry_count * 32, buffer, sizeof(buffer)))
#else
    if(!device_write(offset, buffer, sizeof(buffer)))
#endif
        return 0;
    6d4c:	f04f 0000 	mov.w	r0, #0
        offset += sizeof(buffer);
    }
#endif
    
    return 1;
}
    6d50:	b009      	add	sp, #36	; 0x24
    6d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6d56:	bf00      	nop

00006d58 <fat_open>:
 * \param[in] partition Discriptor of partition on which the filesystem resides.
 * \returns 0 on error, a FAT filesystem descriptor on success.
 * \see fat_close
 */
struct fat_fs_struct* fat_open(struct partition_struct* partition)
{
    6d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6d5c:	b088      	sub	sp, #32
    if(!partition ||
    6d5e:	4604      	mov	r4, r0
    6d60:	2800      	cmp	r0, #0
    6d62:	f000 809f 	beq.w	6ea4 <fat_open+0x14c>
    6d66:	6883      	ldr	r3, [r0, #8]
    6d68:	2b00      	cmp	r3, #0
    6d6a:	f000 809e 	beq.w	6eaa <fat_open+0x152>
#if FAT_WRITE_SUPPORT
       !partition->device_write ||
    6d6e:	68c3      	ldr	r3, [r0, #12]
    6d70:	2b00      	cmp	r3, #0
    6d72:	f000 809d 	beq.w	6eb0 <fat_open+0x158>
#else
    struct fat_fs_struct* fs = fat_fs_handles;
    uint8_t i;
    for(i = 0; i < FAT_FS_COUNT; ++i)
    {
        if(!fs->partition)
    6d76:	f240 53dc 	movw	r3, #1500	; 0x5dc
    6d7a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    6d7e:	681b      	ldr	r3, [r3, #0]
    6d80:	2b00      	cmp	r3, #0
    6d82:	f040 8098 	bne.w	6eb6 <fat_open+0x15e>
#if USE_DYNAMIC_MEMORY
    struct fat_fs_struct* fs = malloc(sizeof(*fs));
    if(!fs)
        return 0;
#else
    struct fat_fs_struct* fs = fat_fs_handles;
    6d86:	f240 51dc 	movw	r1, #1500	; 0x5dc
    6d8a:	f2c1 0100 	movt	r1, #4096	; 0x1000
    }
    if(i >= FAT_FS_COUNT)
        return 0;
#endif

    memset(fs, 0, sizeof(*fs));
    6d8e:	f04f 0200 	mov.w	r2, #0
    6d92:	604a      	str	r2, [r1, #4]
    6d94:	f101 0308 	add.w	r3, r1, #8
    6d98:	f843 2b04 	str.w	r2, [r3], #4
    6d9c:	f843 2b04 	str.w	r2, [r3], #4
    6da0:	f843 2b04 	str.w	r2, [r3], #4
    6da4:	f843 2b04 	str.w	r2, [r3], #4
    6da8:	f843 2b04 	str.w	r2, [r3], #4
    6dac:	601a      	str	r2, [r3, #0]

    fs->partition = partition;
    6dae:	6008      	str	r0, [r1, #0]
#if FAT_FAT32_SUPPORT
    uint8_t buffer[37];
#else
    uint8_t buffer[25];
#endif
    offset_t partition_offset = (offset_t) partition->offset * 512;
    6db0:	6945      	ldr	r5, [r0, #20]
    6db2:	ea4f 2545 	mov.w	r5, r5, lsl #9
    if(!partition->device_read(partition_offset + 0x0b, buffer, sizeof(buffer)))
    6db6:	6803      	ldr	r3, [r0, #0]
    6db8:	f105 000b 	add.w	r0, r5, #11
    6dbc:	a901      	add	r1, sp, #4
    6dbe:	f04f 0219 	mov.w	r2, #25
    6dc2:	4798      	blx	r3
    6dc4:	2800      	cmp	r0, #0
    6dc6:	d065      	beq.n	6e94 <fat_open+0x13c>
        return 0;

    uint16_t bytes_per_sector = ltoh16(*((uint16_t*) &buffer[0x00]));
    6dc8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    uint16_t reserved_sectors = ltoh16(*((uint16_t*) &buffer[0x03]));
    6dcc:	f8bd c007 	ldrh.w	ip, [sp, #7]
    uint8_t sectors_per_cluster = buffer[0x02];
    6dd0:	f89d 7006 	ldrb.w	r7, [sp, #6]
    uint8_t fat_copies = buffer[0x05];
    6dd4:	f89d 8009 	ldrb.w	r8, [sp, #9]
    uint16_t max_root_entries = ltoh16(*((uint16_t*) &buffer[0x06]));
    6dd8:	f8bd 600a 	ldrh.w	r6, [sp, #10]
    uint16_t sector_count_16 = ltoh16(*((uint16_t*) &buffer[0x08]));
    6ddc:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    uint16_t sectors_per_fat = ltoh16(*((uint16_t*) &buffer[0x0b]));
    6de0:	f8bd 100f 	ldrh.w	r1, [sp, #15]
    uint32_t sector_count = ltoh32(*((uint32_t*) &buffer[0x15]));
    6de4:	f8dd 2019 	ldr.w	r2, [sp, #25]
#if FAT_FAT32_SUPPORT
    uint32_t sectors_per_fat32 = ltoh32(*((uint32_t*) &buffer[0x19]));
    uint32_t cluster_root_dir = ltoh32(*((uint32_t*) &buffer[0x21]));
#endif

    if(sector_count == 0)
    6de8:	b912      	cbnz	r2, 6df0 <fat_open+0x98>
    {
        if(sector_count_16 == 0)
    6dea:	2800      	cmp	r0, #0
    6dec:	d052      	beq.n	6e94 <fat_open+0x13c>
            /* illegal volume size */
            return 0;
        else
            sector_count = sector_count_16;
    6dee:	4602      	mov	r2, r0
        sectors_per_fat32 = sectors_per_fat;
    else if(sectors_per_fat32 == 0)
        /* this is neither FAT16 nor FAT32 */
        return 0;
#else
    if(sectors_per_fat == 0)
    6df0:	2900      	cmp	r1, #0
    6df2:	d04f      	beq.n	6e94 <fat_open+0x13c>
    uint32_t data_sector_count = sector_count
                                 - reserved_sectors
#if FAT_FAT32_SUPPORT
                                 - sectors_per_fat32 * fat_copies
#else
                                 - (uint32_t) sectors_per_fat * fat_copies
    6df4:	fb01 f108 	mul.w	r1, r1, r8
        return 0;
#endif

    /* determine the type of FAT we have here */
    uint32_t data_sector_count = sector_count
                                 - reserved_sectors
    6df8:	ebcc 0902 	rsb	r9, ip, r2
#if FAT_FAT32_SUPPORT
                                 - sectors_per_fat32 * fat_copies
#else
                                 - (uint32_t) sectors_per_fat * fat_copies
    6dfc:	ebc1 0909 	rsb	r9, r1, r9
#endif
                                 - ((max_root_entries * 32 + bytes_per_sector - 1) / bytes_per_sector);
    6e00:	ea4f 1046 	mov.w	r0, r6, lsl #5
    6e04:	18c0      	adds	r0, r0, r3
    6e06:	f100 30ff 	add.w	r0, r0, #4294967295
    6e0a:	fb90 f0f3 	sdiv	r0, r0, r3
        /* this is not a FAT16 */
        return 0;
#endif

    /* determine the type of FAT we have here */
    uint32_t data_sector_count = sector_count
    6e0e:	ebc0 0909 	rsb	r9, r0, r9
                                 - sectors_per_fat32 * fat_copies
#else
                                 - (uint32_t) sectors_per_fat * fat_copies
#endif
                                 - ((max_root_entries * 32 + bytes_per_sector - 1) / bytes_per_sector);
    uint32_t data_cluster_count = data_sector_count / sectors_per_cluster;
    6e12:	fbb9 f9f7 	udiv	r9, r9, r7
    if(data_cluster_count < 4085)
    6e16:	f640 70f4 	movw	r0, #4084	; 0xff4
    6e1a:	4581      	cmp	r9, r0
    6e1c:	d93a      	bls.n	6e94 <fat_open+0x13c>
        /* this is a FAT12, not supported */
        return 0;
    else if(data_cluster_count < 65525)
        /* this is a FAT16 */
        partition->type = PARTITION_TYPE_FAT16;
    6e1e:	f64f 70f4 	movw	r0, #65524	; 0xfff4
    6e22:	4581      	cmp	r9, r0
    6e24:	bf8c      	ite	hi
    6e26:	200b      	movhi	r0, #11
    6e28:	2006      	movls	r0, #6
                                 - ((max_root_entries * 32 + bytes_per_sector - 1) / bytes_per_sector);
    uint32_t data_cluster_count = data_sector_count / sectors_per_cluster;
    if(data_cluster_count < 4085)
        /* this is a FAT12, not supported */
        return 0;
    else if(data_cluster_count < 65525)
    6e2a:	7420      	strb	r0, [r4, #16]
    else
        /* this is a FAT32 */
        partition->type = PARTITION_TYPE_FAT32;

    /* fill header information */
    struct fat_header_struct* header = &fs->header;
    6e2c:	f240 58dc 	movw	r8, #1500	; 0x5dc
    6e30:	f2c1 0800 	movt	r8, #4096	; 0x1000
    memset(header, 0, sizeof(*header));
    6e34:	f04f 0a00 	mov.w	sl, #0
    6e38:	f108 000c 	add.w	r0, r8, #12
    6e3c:	f840 ab04 	str.w	sl, [r0], #4
    6e40:	f840 ab04 	str.w	sl, [r0], #4
    6e44:	f840 ab04 	str.w	sl, [r0], #4
    6e48:	f8c0 a000 	str.w	sl, [r0]
    
    header->size = (offset_t) sector_count * bytes_per_sector;
    6e4c:	fb03 f202 	mul.w	r2, r3, r2
    6e50:	f8c8 2004 	str.w	r2, [r8, #4]

    header->fat_offset = /* jump to partition */
                         partition_offset +
    6e54:	fb0c 5503 	mla	r5, ip, r3, r5
    struct fat_header_struct* header = &fs->header;
    memset(header, 0, sizeof(*header));
    
    header->size = (offset_t) sector_count * bytes_per_sector;

    header->fat_offset = /* jump to partition */
    6e58:	f8c8 5008 	str.w	r5, [r8, #8]
                         partition_offset +
                         /* jump to fat */
                         (offset_t) reserved_sectors * bytes_per_sector;
    header->fat_size = (data_cluster_count + 2) * (partition->type == PARTITION_TYPE_FAT16 ? 2 : 4);
    6e5c:	f109 0902 	add.w	r9, r9, #2
    6e60:	7c22      	ldrb	r2, [r4, #16]
    6e62:	2a06      	cmp	r2, #6
    6e64:	bf14      	ite	ne
    6e66:	2204      	movne	r2, #4
    6e68:	2202      	moveq	r2, #2
    6e6a:	4640      	mov	r0, r8
    6e6c:	fb09 f202 	mul.w	r2, r9, r2
    6e70:	f8c8 200c 	str.w	r2, [r8, #12]

    header->sector_size = bytes_per_sector;
    6e74:	f8a8 3010 	strh.w	r3, [r8, #16]
    header->cluster_size = (uint16_t) bytes_per_sector * sectors_per_cluster;
    6e78:	fb03 f707 	mul.w	r7, r3, r7
    6e7c:	f8a8 7012 	strh.w	r7, [r8, #18]
#if FAT_FAT32_SUPPORT
    if(partition->type == PARTITION_TYPE_FAT16)
#endif
    {
        header->root_dir_offset = /* jump to fats */
                                  header->fat_offset +
    6e80:	fb03 5301 	mla	r3, r3, r1, r5

#if FAT_FAT32_SUPPORT
    if(partition->type == PARTITION_TYPE_FAT16)
#endif
    {
        header->root_dir_offset = /* jump to fats */
    6e84:	f8c8 3018 	str.w	r3, [r8, #24]
                                  (offset_t) fat_copies * sectors_per_fat * bytes_per_sector;

        header->cluster_zero_offset = /* jump to root directory entries */
                                      header->root_dir_offset +
                                      /* skip root directory entries */
                                      (offset_t) max_root_entries * 32;
    6e88:	ea4f 1646 	mov.w	r6, r6, lsl #5
                                  header->fat_offset +
                                  /* jump to root directory entries */
                                  (offset_t) fat_copies * sectors_per_fat * bytes_per_sector;

        header->cluster_zero_offset = /* jump to root directory entries */
                                      header->root_dir_offset +
    6e8c:	199b      	adds	r3, r3, r6
        header->root_dir_offset = /* jump to fats */
                                  header->fat_offset +
                                  /* jump to root directory entries */
                                  (offset_t) fat_copies * sectors_per_fat * bytes_per_sector;

        header->cluster_zero_offset = /* jump to root directory entries */
    6e8e:	f8c8 3014 	str.w	r3, [r8, #20]
    6e92:	e012      	b.n	6eba <fat_open+0x162>
    if(!fat_read_header(fs))
    {
#if USE_DYNAMIC_MEMORY
        free(fs);
#else
        fs->partition = 0;
    6e94:	f240 53dc 	movw	r3, #1500	; 0x5dc
    6e98:	f2c1 0300 	movt	r3, #4096	; 0x1000
    6e9c:	f04f 0000 	mov.w	r0, #0
    6ea0:	6018      	str	r0, [r3, #0]
#endif
        return 0;
    6ea2:	e00a      	b.n	6eba <fat_open+0x162>
       !partition->device_write_interval
#else
       0
#endif
      )
        return 0;
    6ea4:	f04f 0000 	mov.w	r0, #0
    6ea8:	e007      	b.n	6eba <fat_open+0x162>
    6eaa:	f04f 0000 	mov.w	r0, #0
    6eae:	e004      	b.n	6eba <fat_open+0x162>
    6eb0:	f04f 0000 	mov.w	r0, #0
    6eb4:	e001      	b.n	6eba <fat_open+0x162>
            break;

        ++fs;
    }
    if(i >= FAT_FS_COUNT)
        return 0;
    6eb6:	f04f 0000 	mov.w	r0, #0
#endif
        return 0;
    }

    return fs;
}
    6eba:	b008      	add	sp, #32
    6ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00006ec0 <fat_close>:
 * \param[in] fs The filesystem to close.
 * \see fat_open
 */
void fat_close(struct fat_fs_struct* fs)
{
    if(!fs)
    6ec0:	b110      	cbz	r0, 6ec8 <fat_close+0x8>
        return;

#if USE_DYNAMIC_MEMORY
    free(fs);
#else
    fs->partition = 0;
    6ec2:	f04f 0200 	mov.w	r2, #0
    6ec6:	6002      	str	r2, [r0, #0]
    6ec8:	4770      	bx	lr
    6eca:	bf00      	nop

00006ecc <fat_open_file>:
 * \param[in] dir_entry The directory entry of the file to open.
 * \returns The file handle, or 0 on failure.
 * \see fat_close_file
 */
struct fat_file_struct* fat_open_file(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    6ecc:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
    if(!fs || !dir_entry || (dir_entry->attributes & FAT_ATTRIB_DIR))
    6ed0:	4680      	mov	r8, r0
    6ed2:	460d      	mov	r5, r1
    6ed4:	f1d1 0101 	rsbs	r1, r1, #1
    6ed8:	bf38      	it	cc
    6eda:	2100      	movcc	r1, #0
    6edc:	2800      	cmp	r0, #0
    6ede:	bf08      	it	eq
    6ee0:	f041 0101 	orreq.w	r1, r1, #1
        return 0;
    6ee4:	f04f 0000 	mov.w	r0, #0
 * \returns The file handle, or 0 on failure.
 * \see fat_close_file
 */
struct fat_file_struct* fat_open_file(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry || (dir_entry->attributes & FAT_ATTRIB_DIR))
    6ee8:	bb81      	cbnz	r1, 6f4c <fat_open_file+0x80>
    6eea:	f895 3020 	ldrb.w	r3, [r5, #32]
    6eee:	f013 0f10 	tst.w	r3, #16
        return 0;
    6ef2:	bf18      	it	ne
    6ef4:	2000      	movne	r0, #0
 * \returns The file handle, or 0 on failure.
 * \see fat_close_file
 */
struct fat_file_struct* fat_open_file(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry || (dir_entry->attributes & FAT_ATTRIB_DIR))
    6ef6:	d129      	bne.n	6f4c <fat_open_file+0x80>
#else
    struct fat_file_struct* fd = fat_file_handles;
    uint8_t i;
    for(i = 0; i < FAT_FILE_COUNT; ++i)
    {
        if(!fd->fs)
    6ef8:	f240 6364 	movw	r3, #1636	; 0x664
    6efc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    6f00:	681b      	ldr	r3, [r3, #0]
            break;

        ++fd;
    }
    if(i >= FAT_FILE_COUNT)
        return 0;
    6f02:	f04f 0000 	mov.w	r0, #0
#else
    struct fat_file_struct* fd = fat_file_handles;
    uint8_t i;
    for(i = 0; i < FAT_FILE_COUNT; ++i)
    {
        if(!fd->fs)
    6f06:	bb0b      	cbnz	r3, 6f4c <fat_open_file+0x80>
    }
    if(i >= FAT_FILE_COUNT)
        return 0;
#endif
    
    memcpy(&fd->dir_entry, dir_entry, sizeof(*dir_entry));
    6f08:	462c      	mov	r4, r5
    6f0a:	f8df c048 	ldr.w	ip, [pc, #72]	; 6f54 <fat_open_file+0x88>
    6f0e:	f105 0720 	add.w	r7, r5, #32
    6f12:	4666      	mov	r6, ip
    6f14:	6820      	ldr	r0, [r4, #0]
    6f16:	6861      	ldr	r1, [r4, #4]
    6f18:	68a2      	ldr	r2, [r4, #8]
    6f1a:	68e3      	ldr	r3, [r4, #12]
    6f1c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    6f1e:	f104 0410 	add.w	r4, r4, #16
    6f22:	46b4      	mov	ip, r6
    6f24:	42bc      	cmp	r4, r7
    6f26:	d1f4      	bne.n	6f12 <fat_open_file+0x46>
    6f28:	6820      	ldr	r0, [r4, #0]
    6f2a:	6861      	ldr	r1, [r4, #4]
    6f2c:	68a2      	ldr	r2, [r4, #8]
    6f2e:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
    fd->fs = fs;
    6f32:	f240 6064 	movw	r0, #1636	; 0x664
    6f36:	f2c1 0000 	movt	r0, #4096	; 0x1000
    6f3a:	f8c0 8000 	str.w	r8, [r0]
    fd->pos = 0;
    6f3e:	f04f 0300 	mov.w	r3, #0
    6f42:	6303      	str	r3, [r0, #48]	; 0x30
    fd->pos_cluster = dir_entry->cluster;
    6f44:	8c6d      	ldrh	r5, [r5, #34]	; 0x22
    6f46:	8685      	strh	r5, [r0, #52]	; 0x34
#ifdef FAT_DELAY_DIRENTRY_UPDATE
	fd->needs_write = 0;
    6f48:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
#endif

    return fd;
}
    6f4c:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
    6f50:	4770      	bx	lr
    6f52:	bf00      	nop
    6f54:	10000668 	.word	0x10000668

00006f58 <fat_close_file>:
 * \param[in] fd The file handle of the file to close.
 * \see fat_open_file
 */
void fat_close_file(struct fat_file_struct* fd)
{
    if(fd)
    6f58:	b110      	cbz	r0, 6f60 <fat_close_file+0x8>
#endif

#if USE_DYNAMIC_MEMORY
        free(fd);
#else
        fd->fs = 0;
    6f5a:	f04f 0200 	mov.w	r2, #0
    6f5e:	6002      	str	r2, [r0, #0]
    6f60:	4770      	bx	lr
    6f62:	bf00      	nop

00006f64 <fat_read_file>:
 * \param[in] buffer_len The amount of data to read.
 * \returns The number of bytes read, 0 on end of file, or -1 on failure.
 * \see fat_write_file
 */
intptr_t fat_read_file(struct fat_file_struct* fd, uint8_t* buffer, uintptr_t buffer_len)
{
    6f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6f68:	b083      	sub	sp, #12
    6f6a:	9201      	str	r2, [sp, #4]
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
    6f6c:	4605      	mov	r5, r0
    6f6e:	4689      	mov	r9, r1
    6f70:	f1d1 0101 	rsbs	r1, r1, #1
    6f74:	bf38      	it	cc
    6f76:	2100      	movcc	r1, #0
    6f78:	2800      	cmp	r0, #0
    6f7a:	bf08      	it	eq
    6f7c:	f041 0101 	orreq.w	r1, r1, #1
    6f80:	2900      	cmp	r1, #0
    6f82:	d15f      	bne.n	7044 <fat_read_file+0xe0>
    6f84:	2a00      	cmp	r2, #0
    6f86:	d060      	beq.n	704a <fat_read_file+0xe6>
        return -1;

    /* determine number of bytes to read */
    if(fd->pos + buffer_len > fd->dir_entry.file_size)
    6f88:	6b06      	ldr	r6, [r0, #48]	; 0x30
    6f8a:	6a83      	ldr	r3, [r0, #40]	; 0x28
    6f8c:	1992      	adds	r2, r2, r6
    6f8e:	429a      	cmp	r2, r3
    6f90:	d904      	bls.n	6f9c <fat_read_file+0x38>
        buffer_len = fd->dir_entry.file_size - fd->pos;
    if(buffer_len == 0)
    6f92:	1b9b      	subs	r3, r3, r6
    6f94:	9301      	str	r3, [sp, #4]
        return 0;
    6f96:	bf08      	it	eq
    6f98:	2000      	moveq	r0, #0
        return -1;

    /* determine number of bytes to read */
    if(fd->pos + buffer_len > fd->dir_entry.file_size)
        buffer_len = fd->dir_entry.file_size - fd->pos;
    if(buffer_len == 0)
    6f9a:	d05b      	beq.n	7054 <fat_read_file+0xf0>
        return 0;
    
    uint16_t cluster_size = fd->fs->header.cluster_size;
    6f9c:	682b      	ldr	r3, [r5, #0]
    6f9e:	f8b3 b012 	ldrh.w	fp, [r3, #18]
    cluster_t cluster_num = fd->pos_cluster;
    6fa2:	8eaf      	ldrh	r7, [r5, #52]	; 0x34
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));

    /* find cluster in which to start reading */
    if(!cluster_num)
    6fa4:	b9af      	cbnz	r7, 6fd2 <fat_read_file+0x6e>
    {
        cluster_num = fd->dir_entry.cluster;
    6fa6:	8cef      	ldrh	r7, [r5, #38]	; 0x26
        
        if(!cluster_num)
        {
            if(!fd->pos)
                return 0;
    6fa8:	2e00      	cmp	r6, #0
    6faa:	bf14      	ite	ne
    6fac:	f04f 30ff 	movne.w	r0, #4294967295
    6fb0:	2000      	moveq	r0, #0
    /* find cluster in which to start reading */
    if(!cluster_num)
    {
        cluster_num = fd->dir_entry.cluster;
        
        if(!cluster_num)
    6fb2:	2f00      	cmp	r7, #0
    6fb4:	d04e      	beq.n	7054 <fat_read_file+0xf0>
                return 0;
            else
                return -1;
        }

        if(fd->pos)
    6fb6:	4634      	mov	r4, r6
    6fb8:	b94e      	cbnz	r6, 6fce <fat_read_file+0x6a>
    6fba:	e00a      	b.n	6fd2 <fat_read_file+0x6e>
 * \param[out] buffer The buffer into which to write.
 * \param[in] buffer_len The amount of data to read.
 * \returns The number of bytes read, 0 on end of file, or -1 on failure.
 * \see fat_write_file
 */
intptr_t fat_read_file(struct fat_file_struct* fd, uint8_t* buffer, uintptr_t buffer_len)
    6fbc:	ebcb 0404 	rsb	r4, fp, r4
        {
            uint32_t pos = fd->pos;
            while(pos >= cluster_size)
            {
                pos -= cluster_size;
                cluster_num = fat_get_next_cluster(fd->fs, cluster_num);
    6fc0:	6828      	ldr	r0, [r5, #0]
    6fc2:	4639      	mov	r1, r7
    6fc4:	f7ff fb0e 	bl	65e4 <fat_get_next_cluster>
                if(!cluster_num)
    6fc8:	4607      	mov	r7, r0
    6fca:	2800      	cmp	r0, #0
    6fcc:	d040      	beq.n	7050 <fat_read_file+0xec>
        }

        if(fd->pos)
        {
            uint32_t pos = fd->pos;
            while(pos >= cluster_size)
    6fce:	455c      	cmp	r4, fp
    6fd0:	d2f4      	bcs.n	6fbc <fat_read_file+0x58>
        return 0;
    
    uint16_t cluster_size = fd->fs->header.cluster_size;
    cluster_t cluster_num = fd->pos_cluster;
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));
    6fd2:	f10b 38ff 	add.w	r8, fp, #4294967295
    6fd6:	ea08 0606 	and.w	r6, r8, r6
    6fda:	fa1f f886 	uxth.w	r8, r6
    6fde:	9e01      	ldr	r6, [sp, #4]
    
    /* read data */
    do
    {
        /* calculate data size to copy from cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
    6fe0:	f8d5 a000 	ldr.w	sl, [r5]
    6fe4:	4650      	mov	r0, sl
    6fe6:	4639      	mov	r1, r7
    6fe8:	f7ff fc0e 	bl	6808 <fat_cluster_offset>
    6fec:	4440      	add	r0, r8
        uint16_t copy_length = cluster_size - first_cluster_offset;
    6fee:	ebc8 040b 	rsb	r4, r8, fp
    6ff2:	b2a4      	uxth	r4, r4
        if(copy_length > buffer_left)
    6ff4:	42a6      	cmp	r6, r4
            copy_length = buffer_left;
    6ff6:	bf38      	it	cc
    6ff8:	b2b4      	uxthcc	r4, r6

        /* read data */
        if(!fd->fs->partition->device_read(cluster_offset, buffer, copy_length))
    6ffa:	f8da 3000 	ldr.w	r3, [sl]
    6ffe:	681b      	ldr	r3, [r3, #0]
    7000:	4649      	mov	r1, r9
    7002:	4622      	mov	r2, r4
    7004:	4798      	blx	r3
    7006:	b910      	cbnz	r0, 700e <fat_read_file+0xaa>
            return buffer_len - buffer_left;
    7008:	9901      	ldr	r1, [sp, #4]
    700a:	1b88      	subs	r0, r1, r6
    700c:	e022      	b.n	7054 <fat_read_file+0xf0>

        /* calculate new file position */
        buffer += copy_length;
    700e:	44a1      	add	r9, r4
        buffer_left -= copy_length;
    7010:	1b36      	subs	r6, r6, r4
        fd->pos += copy_length;
    7012:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    7014:	191b      	adds	r3, r3, r4
    7016:	632b      	str	r3, [r5, #48]	; 0x30

        if(first_cluster_offset + copy_length >= cluster_size)
    7018:	4444      	add	r4, r8
    701a:	455c      	cmp	r4, fp
    701c:	db0d      	blt.n	703a <fat_read_file+0xd6>
        {
            /* we are on a cluster boundary, so get the next cluster */
            if((cluster_num = fat_get_next_cluster(fd->fs, cluster_num)))
    701e:	6828      	ldr	r0, [r5, #0]
    7020:	4639      	mov	r1, r7
    7022:	f7ff fadf 	bl	65e4 <fat_get_next_cluster>
    7026:	4607      	mov	r7, r0
    7028:	b928      	cbnz	r0, 7036 <fat_read_file+0xd2>
            {
                first_cluster_offset = 0;
            }
            else
            {
                fd->pos_cluster = 0;
    702a:	f04f 0300 	mov.w	r3, #0
    702e:	86ab      	strh	r3, [r5, #52]	; 0x34
                return buffer_len - buffer_left;
    7030:	9901      	ldr	r1, [sp, #4]
    7032:	1b88      	subs	r0, r1, r6
    7034:	e00e      	b.n	7054 <fat_read_file+0xf0>
        if(first_cluster_offset + copy_length >= cluster_size)
        {
            /* we are on a cluster boundary, so get the next cluster */
            if((cluster_num = fat_get_next_cluster(fd->fs, cluster_num)))
            {
                first_cluster_offset = 0;
    7036:	f04f 0800 	mov.w	r8, #0
                fd->pos_cluster = 0;
                return buffer_len - buffer_left;
            }
        }

        fd->pos_cluster = cluster_num;
    703a:	86af      	strh	r7, [r5, #52]	; 0x34

    } while(buffer_left > 0); /* check if we are done */
    703c:	2e00      	cmp	r6, #0
    703e:	d1cf      	bne.n	6fe0 <fat_read_file+0x7c>

    return buffer_len;
    7040:	9801      	ldr	r0, [sp, #4]
    7042:	e007      	b.n	7054 <fat_read_file+0xf0>
 */
intptr_t fat_read_file(struct fat_file_struct* fd, uint8_t* buffer, uintptr_t buffer_len)
{
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
        return -1;
    7044:	f04f 30ff 	mov.w	r0, #4294967295
    7048:	e004      	b.n	7054 <fat_read_file+0xf0>
    704a:	f04f 30ff 	mov.w	r0, #4294967295
    704e:	e001      	b.n	7054 <fat_read_file+0xf0>
            while(pos >= cluster_size)
            {
                pos -= cluster_size;
                cluster_num = fat_get_next_cluster(fd->fs, cluster_num);
                if(!cluster_num)
                    return -1;
    7050:	f04f 30ff 	mov.w	r0, #4294967295
        fd->pos_cluster = cluster_num;

    } while(buffer_left > 0); /* check if we are done */

    return buffer_len;
}
    7054:	b003      	add	sp, #12
    7056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    705a:	bf00      	nop

0000705c <fat_write_file>:
 * \param[in] buffer_len The amount of data to write.
 * \returns The number of bytes written, 0 on disk full, or -1 on failure.
 * \see fat_read_file
 */
intptr_t fat_write_file(struct fat_file_struct* fd, const uint8_t* buffer, uintptr_t buffer_len)
{
    705c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7060:	b083      	sub	sp, #12
    7062:	9201      	str	r2, [sp, #4]
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
    7064:	4605      	mov	r5, r0
    7066:	468a      	mov	sl, r1
    7068:	f1d1 0101 	rsbs	r1, r1, #1
    706c:	bf38      	it	cc
    706e:	2100      	movcc	r1, #0
    7070:	2800      	cmp	r0, #0
    7072:	bf08      	it	eq
    7074:	f041 0101 	orreq.w	r1, r1, #1
    7078:	2900      	cmp	r1, #0
    707a:	f040 8091 	bne.w	71a0 <fat_write_file+0x144>
    707e:	2a00      	cmp	r2, #0
    7080:	f000 8091 	beq.w	71a6 <fat_write_file+0x14a>
        return -1;
    if(fd->pos > fd->dir_entry.file_size)
    7084:	6b06      	ldr	r6, [r0, #48]	; 0x30
    7086:	6a83      	ldr	r3, [r0, #40]	; 0x28
    7088:	429e      	cmp	r6, r3
        return -1;
    708a:	bf88      	it	hi
    708c:	f04f 30ff 	movhi.w	r0, #4294967295
intptr_t fat_write_file(struct fat_file_struct* fd, const uint8_t* buffer, uintptr_t buffer_len)
{
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
        return -1;
    if(fd->pos > fd->dir_entry.file_size)
    7090:	f200 8094 	bhi.w	71bc <fat_write_file+0x160>
        return -1;

    uint16_t cluster_size = fd->fs->header.cluster_size;
    7094:	6800      	ldr	r0, [r0, #0]
    7096:	f8b0 b012 	ldrh.w	fp, [r0, #18]
    cluster_t cluster_num = fd->pos_cluster;
    709a:	8eaf      	ldrh	r7, [r5, #52]	; 0x34
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));

    /* find cluster in which to start writing */
    if(!cluster_num)
    709c:	2f00      	cmp	r7, #0
    709e:	d12d      	bne.n	70fc <fat_write_file+0xa0>
    {
        cluster_num = fd->dir_entry.cluster;
    70a0:	8cef      	ldrh	r7, [r5, #38]	; 0x26
        
        if(!cluster_num)
    70a2:	b957      	cbnz	r7, 70ba <fat_write_file+0x5e>
        {
            if(!fd->pos)
    70a4:	2e00      	cmp	r6, #0
    70a6:	f040 8081 	bne.w	71ac <fat_write_file+0x150>
            {
                /* empty file */
                fd->dir_entry.cluster = cluster_num = fat_append_clusters(fd->fs, 0, 1);
    70aa:	f04f 0201 	mov.w	r2, #1
    70ae:	f7ff fb2b 	bl	6708 <fat_append_clusters>
    70b2:	4607      	mov	r7, r0
    70b4:	84e8      	strh	r0, [r5, #38]	; 0x26
                if(!cluster_num)
    70b6:	2800      	cmp	r0, #0
    70b8:	d07b      	beq.n	71b2 <fat_write_file+0x156>
            {
                return -1;
            }
        }

        if(fd->pos)
    70ba:	6b2c      	ldr	r4, [r5, #48]	; 0x30
            {
                pos -= cluster_size;
                cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
                if(!cluster_num_next && pos == 0)
                    /* the file exactly ends on a cluster boundary, and we append to it */
                    cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
    70bc:	f04f 0801 	mov.w	r8, #1
            {
                return -1;
            }
        }

        if(fd->pos)
    70c0:	b9d4      	cbnz	r4, 70f8 <fat_write_file+0x9c>
    70c2:	e01b      	b.n	70fc <fat_write_file+0xa0>
 * \param[in] buffer The buffer from which to read the data to be written.
 * \param[in] buffer_len The amount of data to write.
 * \returns The number of bytes written, 0 on disk full, or -1 on failure.
 * \see fat_read_file
 */
intptr_t fat_write_file(struct fat_file_struct* fd, const uint8_t* buffer, uintptr_t buffer_len)
    70c4:	ebcb 0404 	rsb	r4, fp, r4
            uint32_t pos = fd->pos;
            cluster_t cluster_num_next;
            while(pos >= cluster_size)
            {
                pos -= cluster_size;
                cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    70c8:	6828      	ldr	r0, [r5, #0]
    70ca:	4639      	mov	r1, r7
    70cc:	f7ff fa8a 	bl	65e4 <fat_get_next_cluster>
                if(!cluster_num_next && pos == 0)
    70d0:	4603      	mov	r3, r0
    70d2:	f1d4 0201 	rsbs	r2, r4, #1
    70d6:	bf38      	it	cc
    70d8:	2200      	movcc	r2, #0
    70da:	2800      	cmp	r0, #0
    70dc:	bf14      	ite	ne
    70de:	2200      	movne	r2, #0
    70e0:	f002 0201 	andeq.w	r2, r2, #1
    70e4:	b12a      	cbz	r2, 70f2 <fat_write_file+0x96>
                    /* the file exactly ends on a cluster boundary, and we append to it */
                    cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
    70e6:	6828      	ldr	r0, [r5, #0]
    70e8:	4639      	mov	r1, r7
    70ea:	4642      	mov	r2, r8
    70ec:	f7ff fb0c 	bl	6708 <fat_append_clusters>
    70f0:	4603      	mov	r3, r0
                if(!cluster_num_next)
    70f2:	2b00      	cmp	r3, #0
    70f4:	d060      	beq.n	71b8 <fat_write_file+0x15c>
                    return -1;

                cluster_num = cluster_num_next;
    70f6:	461f      	mov	r7, r3

        if(fd->pos)
        {
            uint32_t pos = fd->pos;
            cluster_t cluster_num_next;
            while(pos >= cluster_size)
    70f8:	455c      	cmp	r4, fp
    70fa:	d2e3      	bcs.n	70c4 <fat_write_file+0x68>
        return -1;

    uint16_t cluster_size = fd->fs->header.cluster_size;
    cluster_t cluster_num = fd->pos_cluster;
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));
    70fc:	f10b 38ff 	add.w	r8, fp, #4294967295
    7100:	ea08 0806 	and.w	r8, r8, r6
    7104:	fa1f f888 	uxth.w	r8, r8
    7108:	9e01      	ldr	r6, [sp, #4]
        {
            /* we are on a cluster boundary, so get the next cluster */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
            if(!cluster_num_next && buffer_left > 0)
                /* we reached the last cluster, append a new one */
                cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
    710a:	46b9      	mov	r9, r7
    
    /* write data */
    do
    {
        /* calculate data size to write to cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
    710c:	682f      	ldr	r7, [r5, #0]
    710e:	4638      	mov	r0, r7
    7110:	4649      	mov	r1, r9
    7112:	f7ff fb79 	bl	6808 <fat_cluster_offset>
    7116:	4440      	add	r0, r8
        uint16_t write_length = cluster_size - first_cluster_offset;
    7118:	ebc8 040b 	rsb	r4, r8, fp
    711c:	b2a4      	uxth	r4, r4
        if(write_length > buffer_left)
    711e:	42a6      	cmp	r6, r4
            write_length = buffer_left;
    7120:	bf38      	it	cc
    7122:	b2b4      	uxthcc	r4, r6

        /* write data which fits into the current cluster */
        if(!fd->fs->partition->device_write(cluster_offset, buffer, write_length))
    7124:	683b      	ldr	r3, [r7, #0]
    7126:	689b      	ldr	r3, [r3, #8]
    7128:	4651      	mov	r1, sl
    712a:	4622      	mov	r2, r4
    712c:	4798      	blx	r3
    712e:	b330      	cbz	r0, 717e <fat_write_file+0x122>
            break;

        /* calculate new file position */
        buffer += write_length;
    7130:	44a2      	add	sl, r4
        buffer_left -= write_length;
    7132:	1b36      	subs	r6, r6, r4
        fd->pos += write_length;
    7134:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    7136:	191b      	adds	r3, r3, r4
    7138:	632b      	str	r3, [r5, #48]	; 0x30

        if(first_cluster_offset + write_length >= cluster_size)
    713a:	4444      	add	r4, r8
    713c:	455c      	cmp	r4, fp
    713e:	db1a      	blt.n	7176 <fat_write_file+0x11a>
        {
            /* we are on a cluster boundary, so get the next cluster */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    7140:	6828      	ldr	r0, [r5, #0]
    7142:	4649      	mov	r1, r9
    7144:	f7ff fa4e 	bl	65e4 <fat_get_next_cluster>
            if(!cluster_num_next && buffer_left > 0)
    7148:	4603      	mov	r3, r0
    714a:	1c32      	adds	r2, r6, #0
    714c:	bf18      	it	ne
    714e:	2201      	movne	r2, #1
    7150:	2800      	cmp	r0, #0
    7152:	bf14      	ite	ne
    7154:	2200      	movne	r2, #0
    7156:	f002 0201 	andeq.w	r2, r2, #1
    715a:	b132      	cbz	r2, 716a <fat_write_file+0x10e>
                /* we reached the last cluster, append a new one */
                cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
    715c:	6828      	ldr	r0, [r5, #0]
    715e:	4649      	mov	r1, r9
    7160:	f04f 0201 	mov.w	r2, #1
    7164:	f7ff fad0 	bl	6708 <fat_append_clusters>
    7168:	4603      	mov	r3, r0
            if(!cluster_num_next)
    716a:	b90b      	cbnz	r3, 7170 <fat_write_file+0x114>
            {
                fd->pos_cluster = 0;
    716c:	86ab      	strh	r3, [r5, #52]	; 0x34
                break;
    716e:	e006      	b.n	717e <fat_write_file+0x122>
            }

            cluster_num = cluster_num_next;
    7170:	4699      	mov	r9, r3
            first_cluster_offset = 0;
    7172:	f04f 0800 	mov.w	r8, #0
        }

        fd->pos_cluster = cluster_num;
    7176:	f8a5 9034 	strh.w	r9, [r5, #52]	; 0x34

    } while(buffer_left > 0); /* check if we are done */
    717a:	2e00      	cmp	r6, #0
    717c:	d1c6      	bne.n	710c <fat_write_file+0xb0>

    /* update directory entry */
    if(fd->pos > fd->dir_entry.file_size)
    717e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    7180:	6aac      	ldr	r4, [r5, #40]	; 0x28
    7182:	42a3      	cmp	r3, r4
    7184:	d909      	bls.n	719a <fat_write_file+0x13e>
		/* record the need to write */
		fd->needs_write = 1;
#endif

        /* update file size */
        fd->dir_entry.file_size = fd->pos;
    7186:	62ab      	str	r3, [r5, #40]	; 0x28

#if !FAT_DELAY_DIRENTRY_UPDATE
        /* write directory entry */
        if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
    7188:	4629      	mov	r1, r5
    718a:	f851 0b04 	ldr.w	r0, [r1], #4
    718e:	f7ff fce7 	bl	6b60 <fat_write_dir_entry>
    7192:	b910      	cbnz	r0, 719a <fat_write_file+0x13e>
        {
            /* We do not return an error here since we actually wrote
             * some data to disk. So we calculate the amount of data
             * we wrote to disk and which lies within the old file size.
             */
            buffer_left = fd->pos - size_old;
    7194:	6b2e      	ldr	r6, [r5, #48]	; 0x30
    7196:	1b36      	subs	r6, r6, r4
            fd->pos = size_old;
    7198:	632c      	str	r4, [r5, #48]	; 0x30
        }
#endif
    }

    return buffer_len - buffer_left;
    719a:	9b01      	ldr	r3, [sp, #4]
    719c:	1b98      	subs	r0, r3, r6
    719e:	e00d      	b.n	71bc <fat_write_file+0x160>
 */
intptr_t fat_write_file(struct fat_file_struct* fd, const uint8_t* buffer, uintptr_t buffer_len)
{
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
        return -1;
    71a0:	f04f 30ff 	mov.w	r0, #4294967295
    71a4:	e00a      	b.n	71bc <fat_write_file+0x160>
    71a6:	f04f 30ff 	mov.w	r0, #4294967295
    71aa:	e007      	b.n	71bc <fat_write_file+0x160>
                if(!cluster_num)
                    return -1;
            }
            else
            {
                return -1;
    71ac:	f04f 30ff 	mov.w	r0, #4294967295
    71b0:	e004      	b.n	71bc <fat_write_file+0x160>
            if(!fd->pos)
            {
                /* empty file */
                fd->dir_entry.cluster = cluster_num = fat_append_clusters(fd->fs, 0, 1);
                if(!cluster_num)
                    return -1;
    71b2:	f04f 30ff 	mov.w	r0, #4294967295
    71b6:	e001      	b.n	71bc <fat_write_file+0x160>
                cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
                if(!cluster_num_next && pos == 0)
                    /* the file exactly ends on a cluster boundary, and we append to it */
                    cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
                if(!cluster_num_next)
                    return -1;
    71b8:	f04f 30ff 	mov.w	r0, #4294967295
        }
#endif
    }

    return buffer_len - buffer_left;
}
    71bc:	b003      	add	sp, #12
    71be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    71c2:	bf00      	nop

000071c4 <fat_open_dir>:
 * \param[in] dir_entry The directory entry which stands for the directory to open.
 * \returns An opaque directory descriptor on success, 0 on failure.
 * \see fat_close_dir
 */
struct fat_dir_struct* fat_open_dir(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    71c4:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    if(!fs || !dir_entry || !(dir_entry->attributes & FAT_ATTRIB_DIR))
    71c8:	4684      	mov	ip, r0
    71ca:	460d      	mov	r5, r1
    71cc:	f1d1 0101 	rsbs	r1, r1, #1
    71d0:	bf38      	it	cc
    71d2:	2100      	movcc	r1, #0
    71d4:	2800      	cmp	r0, #0
    71d6:	bf08      	it	eq
    71d8:	f041 0101 	orreq.w	r1, r1, #1
        return 0;
    71dc:	f04f 0400 	mov.w	r4, #0
 * \returns An opaque directory descriptor on success, 0 on failure.
 * \see fat_close_dir
 */
struct fat_dir_struct* fat_open_dir(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry || !(dir_entry->attributes & FAT_ATTRIB_DIR))
    71e0:	2900      	cmp	r1, #0
    71e2:	d13e      	bne.n	7262 <fat_open_dir+0x9e>
    71e4:	f895 3020 	ldrb.w	r3, [r5, #32]
    71e8:	f013 0f10 	tst.w	r3, #16
        return 0;
    71ec:	bf08      	it	eq
    71ee:	2400      	moveq	r4, #0
 * \returns An opaque directory descriptor on success, 0 on failure.
 * \see fat_close_dir
 */
struct fat_dir_struct* fat_open_dir(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry || !(dir_entry->attributes & FAT_ATTRIB_DIR))
    71f0:	d037      	beq.n	7262 <fat_open_dir+0x9e>
#else
    struct fat_dir_struct* dd = fat_dir_handles;
    uint8_t i;
    for(i = 0; i < FAT_DIR_COUNT; ++i)
    {
        if(!dd->fs)
    71f2:	f240 53fc 	movw	r3, #1532	; 0x5fc
    71f6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    71fa:	681b      	ldr	r3, [r3, #0]
    71fc:	b13b      	cbz	r3, 720e <fat_open_dir+0x4a>
    71fe:	f240 53fc 	movw	r3, #1532	; 0x5fc
    7202:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            break;

        ++dd;
    7208:	4c18      	ldr	r4, [pc, #96]	; (726c <fat_open_dir+0xa8>)
#else
    struct fat_dir_struct* dd = fat_dir_handles;
    uint8_t i;
    for(i = 0; i < FAT_DIR_COUNT; ++i)
    {
        if(!dd->fs)
    720a:	bb43      	cbnz	r3, 725e <fat_open_dir+0x9a>
    720c:	e003      	b.n	7216 <fat_open_dir+0x52>
#if USE_DYNAMIC_MEMORY
    struct fat_dir_struct* dd = malloc(sizeof(*dd));
    if(!dd)
        return 0;
#else
    struct fat_dir_struct* dd = fat_dir_handles;
    720e:	f240 54fc 	movw	r4, #1532	; 0x5fc
    7212:	f2c1 0400 	movt	r4, #4096	; 0x1000
    }
    if(i >= FAT_DIR_COUNT)
        return 0;
#endif
    
    memcpy(&dd->dir_entry, dir_entry, sizeof(*dir_entry));
    7216:	46a8      	mov	r8, r5
    7218:	f104 0904 	add.w	r9, r4, #4
    721c:	f105 0720 	add.w	r7, r5, #32
    7220:	464e      	mov	r6, r9
    7222:	f8d8 0000 	ldr.w	r0, [r8]
    7226:	f8d8 1004 	ldr.w	r1, [r8, #4]
    722a:	f8d8 2008 	ldr.w	r2, [r8, #8]
    722e:	f8d8 300c 	ldr.w	r3, [r8, #12]
    7232:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    7234:	f108 0810 	add.w	r8, r8, #16
    7238:	46b1      	mov	r9, r6
    723a:	45b8      	cmp	r8, r7
    723c:	d1f0      	bne.n	7220 <fat_open_dir+0x5c>
    723e:	f8d8 0000 	ldr.w	r0, [r8]
    7242:	f8d8 1004 	ldr.w	r1, [r8, #4]
    7246:	f8d8 2008 	ldr.w	r2, [r8, #8]
    724a:	e8a9 0007 	stmia.w	r9!, {r0, r1, r2}
    dd->fs = fs;
    724e:	f8c4 c000 	str.w	ip, [r4]
    dd->entry_cluster = dir_entry->cluster;
    7252:	8c6d      	ldrh	r5, [r5, #34]	; 0x22
    7254:	8625      	strh	r5, [r4, #48]	; 0x30
    dd->entry_offset = 0;
    7256:	f04f 0300 	mov.w	r3, #0
    725a:	8663      	strh	r3, [r4, #50]	; 0x32

    return dd;
    725c:	e001      	b.n	7262 <fat_open_dir+0x9e>
            break;

        ++dd;
    }
    if(i >= FAT_DIR_COUNT)
        return 0;
    725e:	f04f 0400 	mov.w	r4, #0
    dd->fs = fs;
    dd->entry_cluster = dir_entry->cluster;
    dd->entry_offset = 0;

    return dd;
}
    7262:	4620      	mov	r0, r4
    7264:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    7268:	4770      	bx	lr
    726a:	bf00      	nop
    726c:	10000630 	.word	0x10000630

00007270 <fat_close_dir>:
 * \param[in] dd The directory descriptor to close.
 * \see fat_open_dir
 */
void fat_close_dir(struct fat_dir_struct* dd)
{
    if(dd)
    7270:	b110      	cbz	r0, 7278 <fat_close_dir+0x8>
#if USE_DYNAMIC_MEMORY
        free(dd);
#else
        dd->fs = 0;
    7272:	f04f 0200 	mov.w	r2, #0
    7276:	6002      	str	r2, [r0, #0]
    7278:	4770      	bx	lr
    727a:	bf00      	nop

0000727c <fat_reset_dir>:
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    if(!dd)
    727c:	b138      	cbz	r0, 728e <fat_reset_dir+0x12>
        return 0;

    dd->entry_cluster = dd->dir_entry.cluster;
    727e:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
    7280:	8602      	strh	r2, [r0, #48]	; 0x30
    dd->entry_offset = 0;
    7282:	f04f 0200 	mov.w	r2, #0
    7286:	8642      	strh	r2, [r0, #50]	; 0x32
    return 1;
    7288:	f04f 0001 	mov.w	r0, #1
    728c:	4770      	bx	lr
 * \see fat_read_dir
 */
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    if(!dd)
        return 0;
    728e:	f04f 0000 	mov.w	r0, #0

    dd->entry_cluster = dd->dir_entry.cluster;
    dd->entry_offset = 0;
    return 1;
}
    7292:	4770      	bx	lr

00007294 <fat_read_dir>:
 * \param[out] dir_entry Pointer to a buffer into which to write the directory entry information.
 * \returns 0 on failure, 1 on success.
 * \see fat_reset_dir
 */
uint8_t fat_read_dir(struct fat_dir_struct* dd, struct fat_dir_entry_struct* dir_entry)
{
    7294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7298:	b08f      	sub	sp, #60	; 0x3c
    if(!dd || !dir_entry)
    729a:	4683      	mov	fp, r0
    729c:	460f      	mov	r7, r1
    729e:	f1d1 0101 	rsbs	r1, r1, #1
    72a2:	bf38      	it	cc
    72a4:	2100      	movcc	r1, #0
    72a6:	2800      	cmp	r0, #0
    72a8:	bf08      	it	eq
    72aa:	f041 0101 	orreq.w	r1, r1, #1
    72ae:	2900      	cmp	r1, #0
    72b0:	d161      	bne.n	7376 <fat_read_dir+0xe2>
        return 0;

    /* get current position of directory handle */
    struct fat_fs_struct* fs = dd->fs;
    72b2:	6805      	ldr	r5, [r0, #0]
    const struct fat_header_struct* header = &fs->header;
    uint16_t cluster_size = header->cluster_size;
    72b4:	8a6e      	ldrh	r6, [r5, #18]
    cluster_t cluster_num = dd->entry_cluster;
    72b6:	f8b0 8030 	ldrh.w	r8, [r0, #48]	; 0x30
    uint16_t cluster_offset = dd->entry_offset;
    72ba:	8e44      	ldrh	r4, [r0, #50]	; 0x32
    struct fat_read_dir_callback_arg arg;

    if(cluster_offset >= cluster_size)
    72bc:	42a6      	cmp	r6, r4
    72be:	d804      	bhi.n	72ca <fat_read_dir+0x36>
        /* The latest call hit the border of the last cluster in
         * the chain, but it still returned a directory entry.
         * So we now reset the handle and signal the caller the
         * end of the listing.
         */
        fat_reset_dir(dd);
    72c0:	f7ff ffdc 	bl	727c <fat_reset_dir>
        return 0;
    72c4:	f04f 0000 	mov.w	r0, #0
    72c8:	e05a      	b.n	7380 <fat_read_dir+0xec>
    }

    /* reset callback arguments */
    memset(&arg, 0, sizeof(arg));
    72ca:	f04f 0100 	mov.w	r1, #0
    72ce:	910c      	str	r1, [sp, #48]	; 0x30
    72d0:	910d      	str	r1, [sp, #52]	; 0x34
    memset(dir_entry, 0, sizeof(*dir_entry));
    72d2:	4638      	mov	r0, r7
    72d4:	f04f 022c 	mov.w	r2, #44	; 0x2c
    72d8:	f018 fa9c 	bl	1f814 <memset>
    arg.dir_entry = dir_entry;
    72dc:	970b      	str	r7, [sp, #44]	; 0x2c

    /* check if we read from the root directory */
    if(cluster_num == 0)
    72de:	f1b8 0f00 	cmp.w	r8, #0
    72e2:	d139      	bne.n	7358 <fat_read_dir+0xc4>
#if FAT_FAT32_SUPPORT
        if(fs->partition->type == PARTITION_TYPE_FAT32)
            cluster_num = header->root_dir_cluster;
        else
#endif
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
    72e4:	696e      	ldr	r6, [r5, #20]
    72e6:	69ab      	ldr	r3, [r5, #24]
    72e8:	1af6      	subs	r6, r6, r3
    72ea:	b2b6      	uxth	r6, r6
    72ec:	e034      	b.n	7358 <fat_read_dir+0xc4>
    /* read entries */
    uint8_t buffer[32];
    while(!arg.finished)
    {
        /* read directory entries up to the cluster border */
        uint16_t cluster_left = cluster_size - cluster_offset;
    72ee:	ebc4 0906 	rsb	r9, r4, r6
    72f2:	fa1f f989 	uxth.w	r9, r9
        offset_t pos = cluster_offset;
        if(cluster_num == 0)
    72f6:	f1b8 0f00 	cmp.w	r8, #0
    72fa:	d102      	bne.n	7302 <fat_read_dir+0x6e>
            pos += header->root_dir_offset;
    72fc:	69a8      	ldr	r0, [r5, #24]
    72fe:	1820      	adds	r0, r4, r0
    7300:	e004      	b.n	730c <fat_read_dir+0x78>
        else
            pos += fat_cluster_offset(fs, cluster_num);
    7302:	4628      	mov	r0, r5
    7304:	4641      	mov	r1, r8
    7306:	f7ff fa7f 	bl	6808 <fat_cluster_offset>
    730a:	1900      	adds	r0, r0, r4

        arg.bytes_read = 0;
    730c:	f04f 0300 	mov.w	r3, #0
    7310:	930c      	str	r3, [sp, #48]	; 0x30
        if(!fs->partition->device_read_interval(pos,
    7312:	682b      	ldr	r3, [r5, #0]
    7314:	f8cd a000 	str.w	sl, [sp]
    7318:	aa0b      	add	r2, sp, #44	; 0x2c
    731a:	9201      	str	r2, [sp, #4]
    731c:	685f      	ldr	r7, [r3, #4]
    731e:	a903      	add	r1, sp, #12
    7320:	f04f 0220 	mov.w	r2, #32
    7324:	464b      	mov	r3, r9
    7326:	47b8      	blx	r7
    7328:	b340      	cbz	r0, 737c <fat_read_dir+0xe8>
                                                fat_dir_entry_read_callback,
                                                &arg)
          )
            return 0;

        cluster_offset += arg.bytes_read;
    732a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    732c:	18e4      	adds	r4, r4, r3
    732e:	b2a4      	uxth	r4, r4

        if(cluster_offset >= cluster_size)
    7330:	42a6      	cmp	r6, r4
    7332:	d815      	bhi.n	7360 <fat_read_dir+0xcc>
        {
            /* we reached the cluster border and switch to the next cluster */

            /* get number of next cluster */
            if((cluster_num = fat_get_next_cluster(fs, cluster_num)) != 0)
    7334:	4628      	mov	r0, r5
    7336:	4641      	mov	r1, r8
    7338:	f7ff f954 	bl	65e4 <fat_get_next_cluster>
    733c:	4680      	mov	r8, r0
    733e:	b940      	cbnz	r0, 7352 <fat_read_dir+0xbe>
                cluster_offset = 0;
                continue;
            }

            /* we are at the end of the cluster chain */
            if(!arg.finished)
    7340:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    7344:	b983      	cbnz	r3, 7368 <fat_read_dir+0xd4>
            {
                /* directory entry not found, reset directory handle */
                fat_reset_dir(dd);
    7346:	4658      	mov	r0, fp
    7348:	f7ff ff98 	bl	727c <fat_reset_dir>
                return 0;
    734c:	f04f 0000 	mov.w	r0, #0
    7350:	e016      	b.n	7380 <fat_read_dir+0xec>
            /* we reached the cluster border and switch to the next cluster */

            /* get number of next cluster */
            if((cluster_num = fat_get_next_cluster(fs, cluster_num)) != 0)
            {
                cluster_offset = 0;
    7352:	f04f 0400 	mov.w	r4, #0
    7356:	e003      	b.n	7360 <fat_read_dir+0xcc>
            pos += header->root_dir_offset;
        else
            pos += fat_cluster_offset(fs, cluster_num);

        arg.bytes_read = 0;
        if(!fs->partition->device_read_interval(pos,
    7358:	f646 0a91 	movw	sl, #26769	; 0x6891
    735c:	f2c0 0a00 	movt	sl, #0
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
    }

    /* read entries */
    uint8_t buffer[32];
    while(!arg.finished)
    7360:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    7364:	2b00      	cmp	r3, #0
    7366:	d0c2      	beq.n	72ee <fat_read_dir+0x5a>

            break;
        }
    }

    dd->entry_cluster = cluster_num;
    7368:	f8ab 8030 	strh.w	r8, [fp, #48]	; 0x30
    dd->entry_offset = cluster_offset;
    736c:	f8ab 4032 	strh.w	r4, [fp, #50]	; 0x32

    return arg.finished;
    7370:	f89d 0035 	ldrb.w	r0, [sp, #53]	; 0x35
    7374:	e004      	b.n	7380 <fat_read_dir+0xec>
 * \see fat_reset_dir
 */
uint8_t fat_read_dir(struct fat_dir_struct* dd, struct fat_dir_entry_struct* dir_entry)
{
    if(!dd || !dir_entry)
        return 0;
    7376:	f04f 0000 	mov.w	r0, #0
    737a:	e001      	b.n	7380 <fat_read_dir+0xec>
                                                sizeof(buffer),
                                                cluster_left,
                                                fat_dir_entry_read_callback,
                                                &arg)
          )
            return 0;
    737c:	f04f 0000 	mov.w	r0, #0

    dd->entry_cluster = cluster_num;
    dd->entry_offset = cluster_offset;

    return arg.finished;
}
    7380:	b00f      	add	sp, #60	; 0x3c
    7382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7386:	bf00      	nop

00007388 <fat_get_dir_entry_of_path>:
 * \param[out] dir_entry The directory entry to fill.
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_get_dir_entry_of_path(struct fat_fs_struct* fs, const char* path, struct fat_dir_entry_struct* dir_entry)
{
    7388:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    738c:	4614      	mov	r4, r2
    if(!fs || !path || path[0] == '\0' || !dir_entry)
    738e:	4682      	mov	sl, r0
    7390:	4688      	mov	r8, r1
    7392:	f1d1 0101 	rsbs	r1, r1, #1
    7396:	bf38      	it	cc
    7398:	2100      	movcc	r1, #0
    739a:	2800      	cmp	r0, #0
    739c:	bf08      	it	eq
    739e:	f041 0101 	orreq.w	r1, r1, #1
    73a2:	2900      	cmp	r1, #0
    73a4:	d16a      	bne.n	747c <fat_get_dir_entry_of_path+0xf4>
    73a6:	f898 3000 	ldrb.w	r3, [r8]
    73aa:	f1d2 0201 	rsbs	r2, r2, #1
    73ae:	bf38      	it	cc
    73b0:	2200      	movcc	r2, #0
    73b2:	2b00      	cmp	r3, #0
    73b4:	bf08      	it	eq
    73b6:	f042 0201 	orreq.w	r2, r2, #1
    73ba:	2a00      	cmp	r2, #0
    73bc:	d162      	bne.n	7484 <fat_get_dir_entry_of_path+0xfc>
        return 0;

    if(path[0] == '/')
    73be:	2b2f      	cmp	r3, #47	; 0x2f
        ++path;
    73c0:	bf08      	it	eq
    73c2:	f108 0801 	addeq.w	r8, r8, #1

    /* begin with the root directory */
    memset(dir_entry, 0, sizeof(*dir_entry));
    73c6:	4620      	mov	r0, r4
    73c8:	f04f 0100 	mov.w	r1, #0
    73cc:	f04f 022c 	mov.w	r2, #44	; 0x2c
    73d0:	f018 fa20 	bl	1f814 <memset>
    dir_entry->attributes = FAT_ATTRIB_DIR;
    73d4:	f04f 0310 	mov.w	r3, #16
    73d8:	f884 3020 	strb.w	r3, [r4, #32]

    while(1)
    {
        if(path[0] == '\0')
    73dc:	f898 3000 	ldrb.w	r3, [r8]
    73e0:	2b00      	cmp	r3, #0
    73e2:	d053      	beq.n	748c <fat_get_dir_entry_of_path+0x104>
        struct fat_dir_struct* dd = fat_open_dir(fs, dir_entry);
        if(!dd)
            break;

        /* extract the next hierarchy we will search for */
        const char* sub_path = strchr(path, '/');
    73e4:	f04f 0b2f 	mov.w	fp, #47	; 0x2f
    while(1)
    {
        if(path[0] == '\0')
            return 1;

        struct fat_dir_struct* dd = fat_open_dir(fs, dir_entry);
    73e8:	4650      	mov	r0, sl
    73ea:	4621      	mov	r1, r4
    73ec:	f7ff feea 	bl	71c4 <fat_open_dir>
        if(!dd)
    73f0:	4606      	mov	r6, r0
    73f2:	2800      	cmp	r0, #0
    73f4:	d04e      	beq.n	7494 <fat_get_dir_entry_of_path+0x10c>
            break;

        /* extract the next hierarchy we will search for */
        const char* sub_path = strchr(path, '/');
    73f6:	4640      	mov	r0, r8
    73f8:	4659      	mov	r1, fp
    73fa:	f018 fe27 	bl	2004c <strchr>
        uint8_t length_to_sep;
        if(sub_path)
    73fe:	b128      	cbz	r0, 740c <fat_get_dir_entry_of_path+0x84>
        {
            length_to_sep = sub_path - path;
    7400:	ebc8 0700 	rsb	r7, r8, r0
    7404:	b2ff      	uxtb	r7, r7
            ++sub_path;
    7406:	f100 0901 	add.w	r9, r0, #1
    740a:	e022      	b.n	7452 <fat_get_dir_entry_of_path+0xca>
        }
        else
        {
            length_to_sep = strlen(path);
    740c:	4640      	mov	r0, r8
    740e:	f018 ffe1 	bl	203d4 <strlen>
    7412:	b2c7      	uxtb	r7, r0
            sub_path = path + length_to_sep;
    7414:	eb08 0907 	add.w	r9, r8, r7
    7418:	e01b      	b.n	7452 <fat_get_dir_entry_of_path+0xca>
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    741a:	4620      	mov	r0, r4
    741c:	f018 ffda 	bl	203d4 <strlen>
    7420:	4605      	mov	r5, r0
    7422:	42b8      	cmp	r0, r7
    7424:	d115      	bne.n	7452 <fat_get_dir_entry_of_path+0xca>
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
    7426:	4640      	mov	r0, r8
    7428:	4621      	mov	r1, r4
    742a:	462a      	mov	r2, r5
    742c:	f019 f802 	bl	20434 <strncmp>
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    7430:	b978      	cbnz	r0, 7452 <fat_get_dir_entry_of_path+0xca>
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
                continue;

            fat_close_dir(dd);
    7432:	4630      	mov	r0, r6
    7434:	f7ff ff1c 	bl	7270 <fat_close_dir>
            dd = 0;

            if(path[length_to_sep] == '\0')
    7438:	f818 3005 	ldrb.w	r3, [r8, r5]
    743c:	2b00      	cmp	r3, #0
    743e:	d02d      	beq.n	749c <fat_get_dir_entry_of_path+0x114>
                /* we iterated through the whole path and have found the file */
                return 1;

            if(dir_entry->attributes & FAT_ATTRIB_DIR)
    7440:	f894 3020 	ldrb.w	r3, [r4, #32]
    7444:	f013 0f10 	tst.w	r3, #16
    7448:	d10a      	bne.n	7460 <fat_get_dir_entry_of_path+0xd8>
                path = sub_path;
                break;
            }

            /* a parent of the file exists, but not the file itself */
            return 0;
    744a:	f04f 0000 	mov.w	r0, #0
    744e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            length_to_sep = strlen(path);
            sub_path = path + length_to_sep;
        }
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
    7452:	4630      	mov	r0, r6
    7454:	4621      	mov	r1, r4
    7456:	f7ff ff1d 	bl	7294 <fat_read_dir>
    745a:	2800      	cmp	r0, #0
    745c:	d1dd      	bne.n	741a <fat_get_dir_entry_of_path+0x92>
    745e:	e002      	b.n	7466 <fat_get_dir_entry_of_path+0xde>
                return 1;

            if(dir_entry->attributes & FAT_ATTRIB_DIR)
            {
                /* we found a parent directory of the file we are searching for */
                path = sub_path;
    7460:	46c8      	mov	r8, r9
            if((strlen(dir_entry->long_name) != length_to_sep ||
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
                continue;

            fat_close_dir(dd);
            dd = 0;
    7462:	f04f 0600 	mov.w	r6, #0

            /* a parent of the file exists, but not the file itself */
            return 0;
        }

        fat_close_dir(dd);
    7466:	4630      	mov	r0, r6
    7468:	f7ff ff02 	bl	7270 <fat_close_dir>
    memset(dir_entry, 0, sizeof(*dir_entry));
    dir_entry->attributes = FAT_ATTRIB_DIR;

    while(1)
    {
        if(path[0] == '\0')
    746c:	f898 3000 	ldrb.w	r3, [r8]
    7470:	2b00      	cmp	r3, #0
    7472:	d1b9      	bne.n	73e8 <fat_get_dir_entry_of_path+0x60>
            return 1;
    7474:	f04f 0001 	mov.w	r0, #1
    7478:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 * \see fat_read_dir
 */
uint8_t fat_get_dir_entry_of_path(struct fat_fs_struct* fs, const char* path, struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !path || path[0] == '\0' || !dir_entry)
        return 0;
    747c:	f04f 0000 	mov.w	r0, #0
    7480:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7484:	f04f 0000 	mov.w	r0, #0
    7488:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dir_entry->attributes = FAT_ATTRIB_DIR;

    while(1)
    {
        if(path[0] == '\0')
            return 1;
    748c:	f04f 0001 	mov.w	r0, #1
    7490:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        }

        fat_close_dir(dd);
    }
    
    return 0;
    7494:	f04f 0000 	mov.w	r0, #0
    7498:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            fat_close_dir(dd);
            dd = 0;

            if(path[length_to_sep] == '\0')
                /* we iterated through the whole path and have found the file */
                return 1;
    749c:	f04f 0001 	mov.w	r0, #1

        fat_close_dir(dd);
    }
    
    return 0;
}
    74a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000074a4 <fat_create_file>:
 * \param[out] dir_entry The directory entry to fill for the new file.
 * \returns 0 on failure, 1 on success.
 * \see fat_delete_file
 */
uint8_t fat_create_file(struct fat_dir_struct* parent, const char* file, struct fat_dir_entry_struct* dir_entry)
{
    74a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    74a6:	4614      	mov	r4, r2
    if(!parent || !file || !file[0] || !dir_entry)
    74a8:	4606      	mov	r6, r0
    74aa:	460d      	mov	r5, r1
    74ac:	f1d1 0101 	rsbs	r1, r1, #1
    74b0:	bf38      	it	cc
    74b2:	2100      	movcc	r1, #0
    74b4:	2800      	cmp	r0, #0
    74b6:	bf08      	it	eq
    74b8:	f041 0101 	orreq.w	r1, r1, #1
    74bc:	2900      	cmp	r1, #0
    74be:	d138      	bne.n	7532 <fat_create_file+0x8e>
    74c0:	782a      	ldrb	r2, [r5, #0]
    74c2:	f1d4 0301 	rsbs	r3, r4, #1
    74c6:	bf38      	it	cc
    74c8:	2300      	movcc	r3, #0
    74ca:	2a00      	cmp	r2, #0
    74cc:	bf08      	it	eq
    74ce:	f043 0301 	orreq.w	r3, r3, #1
    74d2:	2b00      	cmp	r3, #0
    74d4:	d130      	bne.n	7538 <fat_create_file+0x94>
        return 0;

    /* check if the file already exists */
    while(1)
    {
        if(!fat_read_dir(parent, dir_entry))
    74d6:	4630      	mov	r0, r6
    74d8:	4621      	mov	r1, r4
    74da:	f7ff fedb 	bl	7294 <fat_read_dir>
    74de:	b158      	cbz	r0, 74f8 <fat_create_file+0x54>
            break;

        if(strcmp(file, dir_entry->long_name) == 0)
    74e0:	4628      	mov	r0, r5
    74e2:	4621      	mov	r1, r4
    74e4:	f018 fe2a 	bl	2013c <strcmp>
    74e8:	2800      	cmp	r0, #0
    74ea:	d1f4      	bne.n	74d6 <fat_create_file+0x32>
        {
            fat_reset_dir(parent);
    74ec:	4630      	mov	r0, r6
    74ee:	f7ff fec5 	bl	727c <fat_reset_dir>
            return 0;
    74f2:	f04f 0000 	mov.w	r0, #0
    74f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        }
    }

    struct fat_fs_struct* fs = parent->fs;
    74f8:	6837      	ldr	r7, [r6, #0]

    /* prepare directory entry with values already known */
    memset(dir_entry, 0, sizeof(*dir_entry));
    74fa:	4620      	mov	r0, r4
    74fc:	f04f 0100 	mov.w	r1, #0
    7500:	f04f 022c 	mov.w	r2, #44	; 0x2c
    7504:	f018 f986 	bl	1f814 <memset>
    strncpy(dir_entry->long_name, file, sizeof(dir_entry->long_name) - 1);
    7508:	4620      	mov	r0, r4
    750a:	4629      	mov	r1, r5
    750c:	f04f 021f 	mov.w	r2, #31
    7510:	f018 ffe4 	bl	204dc <strncpy>

    /* find place where to store directory entry */
    if(!(dir_entry->entry_offset = fat_find_offset_for_dir_entry(fs, parent, dir_entry)))
    7514:	4638      	mov	r0, r7
    7516:	4631      	mov	r1, r6
    7518:	4622      	mov	r2, r4
    751a:	f7ff fa97 	bl	6a4c <fat_find_offset_for_dir_entry>
    751e:	62a0      	str	r0, [r4, #40]	; 0x28
    7520:	b168      	cbz	r0, 753e <fat_create_file+0x9a>
        return 0;
    
    /* write directory entry to disk */
    if(!fat_write_dir_entry(fs, dir_entry))
    7522:	4638      	mov	r0, r7
    7524:	4621      	mov	r1, r4
    7526:	f7ff fb1b 	bl	6b60 <fat_write_dir_entry>
 * \see fat_delete_file
 */
uint8_t fat_create_file(struct fat_dir_struct* parent, const char* file, struct fat_dir_entry_struct* dir_entry)
{
    if(!parent || !file || !file[0] || !dir_entry)
        return 0;
    752a:	3000      	adds	r0, #0
    752c:	bf18      	it	ne
    752e:	2001      	movne	r0, #1
    7530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7532:	f04f 0000 	mov.w	r0, #0
    7536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7538:	f04f 0000 	mov.w	r0, #0
    753c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    memset(dir_entry, 0, sizeof(*dir_entry));
    strncpy(dir_entry->long_name, file, sizeof(dir_entry->long_name) - 1);

    /* find place where to store directory entry */
    if(!(dir_entry->entry_offset = fat_find_offset_for_dir_entry(fs, parent, dir_entry)))
        return 0;
    753e:	f04f 0000 	mov.w	r0, #0
    /* write directory entry to disk */
    if(!fat_write_dir_entry(fs, dir_entry))
        return 0;
    
    return 1;
}
    7542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007544 <fat_delete_file>:
 * \param[in] dir_entry The directory entry of the file to delete.
 * \returns 0 on failure, 1 on success.
 * \see fat_create_file
 */
uint8_t fat_delete_file(struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
    7544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7548:	b084      	sub	sp, #16
    if(!fs || !dir_entry)
    754a:	4605      	mov	r5, r0
    754c:	4688      	mov	r8, r1
    754e:	f1d1 0101 	rsbs	r1, r1, #1
    7552:	bf38      	it	cc
    7554:	2100      	movcc	r1, #0
    7556:	2800      	cmp	r0, #0
    7558:	bf08      	it	eq
    755a:	f041 0101 	orreq.w	r1, r1, #1
        return 0;
    755e:	f04f 0000 	mov.w	r0, #0
 * \returns 0 on failure, 1 on success.
 * \see fat_create_file
 */
uint8_t fat_delete_file(struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry)
    7562:	2900      	cmp	r1, #0
    7564:	d132      	bne.n	75cc <fat_delete_file+0x88>
        return 0;

    /* get offset of the file's directory entry */
    offset_t dir_entry_offset = dir_entry->entry_offset;
    7566:	f8d8 4028 	ldr.w	r4, [r8, #40]	; 0x28
    if(!dir_entry_offset)
        return 0;
    756a:	f04f 0000 	mov.w	r0, #0
    if(!fs || !dir_entry)
        return 0;

    /* get offset of the file's directory entry */
    offset_t dir_entry_offset = dir_entry->entry_offset;
    if(!dir_entry_offset)
    756e:	2c00      	cmp	r4, #0
    7570:	d02c      	beq.n	75cc <fat_delete_file+0x88>
#if FAT_LFN_SUPPORT
    uint8_t buffer[12];
    while(1)
    {
        /* read directory entry */
        if(!fs->partition->device_read(dir_entry_offset, buffer, sizeof(buffer)))
    7572:	f04f 060c 	mov.w	r6, #12
            return 0;
        
        /* mark the directory entry as deleted */
        buffer[0] = FAT_DIRENTRY_DELETED;
    7576:	f04f 07e5 	mov.w	r7, #229	; 0xe5
#if FAT_LFN_SUPPORT
    uint8_t buffer[12];
    while(1)
    {
        /* read directory entry */
        if(!fs->partition->device_read(dir_entry_offset, buffer, sizeof(buffer)))
    757a:	682b      	ldr	r3, [r5, #0]
    757c:	681b      	ldr	r3, [r3, #0]
    757e:	4620      	mov	r0, r4
    7580:	a901      	add	r1, sp, #4
    7582:	4632      	mov	r2, r6
    7584:	4798      	blx	r3
    7586:	b1e0      	cbz	r0, 75c2 <fat_delete_file+0x7e>
            return 0;
        
        /* mark the directory entry as deleted */
        buffer[0] = FAT_DIRENTRY_DELETED;
    7588:	f88d 7004 	strb.w	r7, [sp, #4]
        
        /* write back entry */
        if(!fs->partition->device_write(dir_entry_offset, buffer, sizeof(buffer)))
    758c:	682b      	ldr	r3, [r5, #0]
    758e:	689b      	ldr	r3, [r3, #8]
    7590:	4620      	mov	r0, r4
    7592:	a901      	add	r1, sp, #4
    7594:	4632      	mov	r2, r6
    7596:	4798      	blx	r3
    7598:	b1b0      	cbz	r0, 75c8 <fat_delete_file+0x84>
            return 0;

        /* check if we deleted the whole entry */
        if(buffer[11] != 0x0f)
    759a:	f89d 300f 	ldrb.w	r3, [sp, #15]
    759e:	2b0f      	cmp	r3, #15
    75a0:	d102      	bne.n	75a8 <fat_delete_file+0x64>
            break;

        dir_entry_offset += 32;
    75a2:	f104 0420 	add.w	r4, r4, #32
    }
    75a6:	e7e8      	b.n	757a <fat_delete_file+0x36>
#endif

    /* We deleted the directory entry. The next thing to do is
     * marking all occupied clusters as free.
     */
    return (dir_entry->cluster == 0 || fat_free_clusters(fs, dir_entry->cluster));
    75a8:	f8b8 1022 	ldrh.w	r1, [r8, #34]	; 0x22
    75ac:	f04f 0001 	mov.w	r0, #1
    75b0:	b129      	cbz	r1, 75be <fat_delete_file+0x7a>
    75b2:	4628      	mov	r0, r5
    75b4:	f7ff f854 	bl	6660 <fat_free_clusters>
    75b8:	3000      	adds	r0, #0
    75ba:	bf18      	it	ne
    75bc:	2001      	movne	r0, #1
    75be:	b2c0      	uxtb	r0, r0
    75c0:	e004      	b.n	75cc <fat_delete_file+0x88>
    uint8_t buffer[12];
    while(1)
    {
        /* read directory entry */
        if(!fs->partition->device_read(dir_entry_offset, buffer, sizeof(buffer)))
            return 0;
    75c2:	f04f 0000 	mov.w	r0, #0
    75c6:	e001      	b.n	75cc <fat_delete_file+0x88>
        /* mark the directory entry as deleted */
        buffer[0] = FAT_DIRENTRY_DELETED;
        
        /* write back entry */
        if(!fs->partition->device_write(dir_entry_offset, buffer, sizeof(buffer)))
            return 0;
    75c8:	f04f 0000 	mov.w	r0, #0

    /* We deleted the directory entry. The next thing to do is
     * marking all occupied clusters as free.
     */
    return (dir_entry->cluster == 0 || fat_free_clusters(fs, dir_entry->cluster));
}
    75cc:	b004      	add	sp, #16
    75ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    75d2:	bf00      	nop

000075d4 <fat_get_file_size>:
}
#endif

offset_t fat_get_file_size(const struct fat_file_struct* fd){
	return fd->dir_entry.file_size;
}
    75d4:	6a80      	ldr	r0, [r0, #40]	; 0x28
    75d6:	4770      	bx	lr

000075d8 <fat_get_fs_size>:
 * \param[in] fs The filesystem on which to operate.
 * \returns 0 on failure, the filesystem size in bytes otherwise.
 */
offset_t fat_get_fs_size(const struct fat_fs_struct* fs)
{
    if(!fs)
    75d8:	4603      	mov	r3, r0
    75da:	b140      	cbz	r0, 75ee <fat_get_fs_size+0x16>
#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
        return (offset_t) (fs->header.fat_size / 4 - 2) * fs->header.cluster_size;
    else
#endif
        return (offset_t) (fs->header.fat_size / 2 - 2) * fs->header.cluster_size;
    75dc:	68c0      	ldr	r0, [r0, #12]
    75de:	ea4f 0050 	mov.w	r0, r0, lsr #1
    75e2:	f1a0 0002 	sub.w	r0, r0, #2
    75e6:	8a5b      	ldrh	r3, [r3, #18]
    75e8:	fb03 f000 	mul.w	r0, r3, r0
    75ec:	4770      	bx	lr
 * \returns 0 on failure, the filesystem size in bytes otherwise.
 */
offset_t fat_get_fs_size(const struct fat_fs_struct* fs)
{
    if(!fs)
        return 0;
    75ee:	f04f 0000 	mov.w	r0, #0
    if(fs->partition->type == PARTITION_TYPE_FAT32)
        return (offset_t) (fs->header.fat_size / 4 - 2) * fs->header.cluster_size;
    else
#endif
        return (offset_t) (fs->header.fat_size / 2 - 2) * fs->header.cluster_size;
}
    75f2:	4770      	bx	lr

000075f4 <partition_open>:
 *                  as a single partition (e.g. for "super floppy" use).
 * \returns 0 on failure, a partition descriptor on success.
 * \see partition_close
 */
struct partition_struct* partition_open(device_read_t device_read, device_read_interval_t device_read_interval, device_write_t device_write, device_write_interval_t device_write_interval, int8_t index)
{
    75f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    75f8:	b084      	sub	sp, #16
    75fa:	4617      	mov	r7, r2
    75fc:	4698      	mov	r8, r3
    75fe:	f99d 4028 	ldrsb.w	r4, [sp, #40]	; 0x28
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index >= 4)
    7602:	4605      	mov	r5, r0
    7604:	460e      	mov	r6, r1
    7606:	f1d1 0101 	rsbs	r1, r1, #1
    760a:	bf38      	it	cc
    760c:	2100      	movcc	r1, #0
    760e:	2800      	cmp	r0, #0
    7610:	bf08      	it	eq
    7612:	f041 0101 	orreq.w	r1, r1, #1
        return 0;
    7616:	f04f 0000 	mov.w	r0, #0
struct partition_struct* partition_open(device_read_t device_read, device_read_interval_t device_read_interval, device_write_t device_write, device_write_interval_t device_write_interval, int8_t index)
{
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index >= 4)
    761a:	2900      	cmp	r1, #0
    761c:	d163      	bne.n	76e6 <partition_open+0xf2>
    761e:	2c03      	cmp	r4, #3
        return 0;
    7620:	bfc8      	it	gt
    7622:	2000      	movgt	r0, #0
struct partition_struct* partition_open(device_read_t device_read, device_read_interval_t device_read_interval, device_write_t device_write, device_write_interval_t device_write_interval, int8_t index)
{
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index >= 4)
    7624:	dc5f      	bgt.n	76e6 <partition_open+0xf2>
        return 0;

    if(index >= 0)
    7626:	2c00      	cmp	r4, #0
    7628:	db0f      	blt.n	764a <partition_open+0x56>
    {
        /* read specified partition table index */
        if(!device_read(0x01be + index * 0x10, buffer, sizeof(buffer)))
    762a:	ea4f 1004 	mov.w	r0, r4, lsl #4
    762e:	f500 70df 	add.w	r0, r0, #446	; 0x1be
    7632:	4669      	mov	r1, sp
    7634:	f04f 0210 	mov.w	r2, #16
    7638:	47a8      	blx	r5
    763a:	2800      	cmp	r0, #0
    763c:	d051      	beq.n	76e2 <partition_open+0xee>
            return 0;

        /* abort on empty partition entry */
        if(buffer[4] == 0x00)
    763e:	f89d 3004 	ldrb.w	r3, [sp, #4]
            return 0;
    7642:	f04f 0000 	mov.w	r0, #0
        /* read specified partition table index */
        if(!device_read(0x01be + index * 0x10, buffer, sizeof(buffer)))
            return 0;

        /* abort on empty partition entry */
        if(buffer[4] == 0x00)
    7646:	2b00      	cmp	r3, #0
    7648:	d04d      	beq.n	76e6 <partition_open+0xf2>
#else
    new_partition = partition_handles;
    uint8_t i;
    for(i = 0; i < PARTITION_COUNT; ++i)
    {
        if(new_partition->type == PARTITION_TYPE_FREE)
    764a:	f240 639c 	movw	r3, #1692	; 0x69c
    764e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7652:	7c1b      	ldrb	r3, [r3, #16]
            break;

        ++new_partition;
    }
    if(i >= PARTITION_COUNT)
        return 0;
    7654:	f04f 0000 	mov.w	r0, #0
#else
    new_partition = partition_handles;
    uint8_t i;
    for(i = 0; i < PARTITION_COUNT; ++i)
    {
        if(new_partition->type == PARTITION_TYPE_FREE)
    7658:	2b00      	cmp	r3, #0
    765a:	d144      	bne.n	76e6 <partition_open+0xf2>
#if USE_DYNAMIC_MEMORY
    new_partition = malloc(sizeof(*new_partition));
    if(!new_partition)
        return 0;
#else
    new_partition = partition_handles;
    765c:	f240 639c 	movw	r3, #1692	; 0x69c
    7660:	f2c1 0300 	movt	r3, #4096	; 0x1000
    }
    if(i >= PARTITION_COUNT)
        return 0;
#endif

    memset(new_partition, 0, sizeof(*new_partition));
    7664:	f04f 0100 	mov.w	r1, #0
    7668:	f103 020c 	add.w	r2, r3, #12
    766c:	f842 1b04 	str.w	r1, [r2], #4
    7670:	f842 1b04 	str.w	r1, [r2], #4
    7674:	f842 1b04 	str.w	r1, [r2], #4
    7678:	6011      	str	r1, [r2, #0]

    /* fill partition descriptor */
    new_partition->device_read = device_read;
    767a:	601d      	str	r5, [r3, #0]
    new_partition->device_read_interval = device_read_interval;
    767c:	605e      	str	r6, [r3, #4]
    new_partition->device_write = device_write;
    767e:	609f      	str	r7, [r3, #8]
    new_partition->device_write_interval = device_write_interval;
    7680:	f8c3 800c 	str.w	r8, [r3, #12]

    if(index >= 0)
    7684:	428c      	cmp	r4, r1
    7686:	db24      	blt.n	76d2 <partition_open+0xde>
    {
        new_partition->type = buffer[4];
    7688:	4618      	mov	r0, r3
    768a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    768e:	7403      	strb	r3, [r0, #16]
        new_partition->offset = ((uint32_t) buffer[8]) |
                                ((uint32_t) buffer[9] << 8) |
    7690:	f89d 2009 	ldrb.w	r2, [sp, #9]
                                ((uint32_t) buffer[10] << 16) |
    7694:	f89d 300a 	ldrb.w	r3, [sp, #10]
    7698:	ea4f 4303 	mov.w	r3, r3, lsl #16
    new_partition->device_write_interval = device_write_interval;

    if(index >= 0)
    {
        new_partition->type = buffer[4];
        new_partition->offset = ((uint32_t) buffer[8]) |
    769c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    76a0:	f89d 2008 	ldrb.w	r2, [sp, #8]
                                ((uint32_t) buffer[9] << 8) |
    76a4:	4313      	orrs	r3, r2
                                ((uint32_t) buffer[10] << 16) |
                                ((uint32_t) buffer[11] << 24);
    76a6:	f89d 200b 	ldrb.w	r2, [sp, #11]
    if(index >= 0)
    {
        new_partition->type = buffer[4];
        new_partition->offset = ((uint32_t) buffer[8]) |
                                ((uint32_t) buffer[9] << 8) |
                                ((uint32_t) buffer[10] << 16) |
    76aa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    new_partition->device_write_interval = device_write_interval;

    if(index >= 0)
    {
        new_partition->type = buffer[4];
        new_partition->offset = ((uint32_t) buffer[8]) |
    76ae:	6143      	str	r3, [r0, #20]
                                ((uint32_t) buffer[9] << 8) |
                                ((uint32_t) buffer[10] << 16) |
                                ((uint32_t) buffer[11] << 24);
        new_partition->length = ((uint32_t) buffer[12]) |
                                ((uint32_t) buffer[13] << 8) |
    76b0:	f89d 200d 	ldrb.w	r2, [sp, #13]
                                ((uint32_t) buffer[14] << 16) |
    76b4:	f89d 300e 	ldrb.w	r3, [sp, #14]
    76b8:	ea4f 4303 	mov.w	r3, r3, lsl #16
        new_partition->type = buffer[4];
        new_partition->offset = ((uint32_t) buffer[8]) |
                                ((uint32_t) buffer[9] << 8) |
                                ((uint32_t) buffer[10] << 16) |
                                ((uint32_t) buffer[11] << 24);
        new_partition->length = ((uint32_t) buffer[12]) |
    76bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    76c0:	f89d 200c 	ldrb.w	r2, [sp, #12]
                                ((uint32_t) buffer[13] << 8) |
    76c4:	4313      	orrs	r3, r2
                                ((uint32_t) buffer[14] << 16) |
                                ((uint32_t) buffer[15] << 24);
    76c6:	f89d 200f 	ldrb.w	r2, [sp, #15]
                                ((uint32_t) buffer[9] << 8) |
                                ((uint32_t) buffer[10] << 16) |
                                ((uint32_t) buffer[11] << 24);
        new_partition->length = ((uint32_t) buffer[12]) |
                                ((uint32_t) buffer[13] << 8) |
                                ((uint32_t) buffer[14] << 16) |
    76ca:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
        new_partition->type = buffer[4];
        new_partition->offset = ((uint32_t) buffer[8]) |
                                ((uint32_t) buffer[9] << 8) |
                                ((uint32_t) buffer[10] << 16) |
                                ((uint32_t) buffer[11] << 24);
        new_partition->length = ((uint32_t) buffer[12]) |
    76ce:	6183      	str	r3, [r0, #24]
    76d0:	e009      	b.n	76e6 <partition_open+0xf2>
                                ((uint32_t) buffer[14] << 16) |
                                ((uint32_t) buffer[15] << 24);
    }
    else
    {
        new_partition->type = 0xff;
    76d2:	f240 609c 	movw	r0, #1692	; 0x69c
    76d6:	f2c1 0000 	movt	r0, #4096	; 0x1000
    76da:	f04f 03ff 	mov.w	r3, #255	; 0xff
    76de:	7403      	strb	r3, [r0, #16]
    76e0:	e001      	b.n	76e6 <partition_open+0xf2>

    if(index >= 0)
    {
        /* read specified partition table index */
        if(!device_read(0x01be + index * 0x10, buffer, sizeof(buffer)))
            return 0;
    76e2:	f04f 0000 	mov.w	r0, #0
    {
        new_partition->type = 0xff;
    }

    return new_partition;
}
    76e6:	b004      	add	sp, #16
    76e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000076ec <partition_close>:
 * \returns 0 on failure, 1 on success.
 * \see partition_open
 */
uint8_t partition_close(struct partition_struct* partition)
{
    if(!partition)
    76ec:	b128      	cbz	r0, 76fa <partition_close+0xe>

    /* destroy partition descriptor */
#if USE_DYNAMIC_MEMORY
    free(partition);
#else
    partition->type = PARTITION_TYPE_FREE;
    76ee:	f04f 0200 	mov.w	r2, #0
    76f2:	7402      	strb	r2, [r0, #16]
#endif

    return 1;
    76f4:	f04f 0001 	mov.w	r0, #1
    76f8:	4770      	bx	lr
 * \see partition_open
 */
uint8_t partition_close(struct partition_struct* partition)
{
    if(!partition)
        return 0;
    76fa:	f04f 0000 	mov.w	r0, #0
#else
    partition->type = PARTITION_TYPE_FREE;
#endif

    return 1;
}
    76fe:	4770      	bx	lr

00007700 <sd_raw_send_byte>:
 *
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    7700:	b500      	push	{lr}
    7702:	b087      	sub	sp, #28
	uint8_t tx_buf[0];
	tx_buf[0] = b;
    7704:	f88d 0018 	strb.w	r0, [sp, #24]
    SPI_DATA_SETUP_Type  xferConfig;
	xferConfig.tx_data = tx_buf;
    7708:	ab06      	add	r3, sp, #24
    770a:	9301      	str	r3, [sp, #4]
    xferConfig.length = 1;
    770c:	f04f 0301 	mov.w	r3, #1
    7710:	9303      	str	r3, [sp, #12]
	SPI_ReadWrite((LPC_SPI_TypeDef *)LPC_SPI, &xferConfig, SPI_TRANSFER_POLLING);
    7712:	f04f 0000 	mov.w	r0, #0
    7716:	f2c4 0002 	movt	r0, #16386	; 0x4002
    771a:	a901      	add	r1, sp, #4
    771c:	f04f 0200 	mov.w	r2, #0
    7720:	f7fc f838 	bl	3794 <SPI_ReadWrite>
//    SPDR = b;
    /* wait for byte to be shifted out */
//    while(!(SPSR & (1 << SPIF)));
//    SPSR &= ~(1 << SPIF);
}
    7724:	b007      	add	sp, #28
    7726:	bd00      	pop	{pc}

00007728 <sd_raw_rec_byte>:
 *
 * \returns The byte which should be read.
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    7728:	b500      	push	{lr}
    772a:	b087      	sub	sp, #28
	uint8_t rx_buf[0];
    SPI_DATA_SETUP_Type  xferConfig;
	xferConfig.rx_data = rx_buf;
    772c:	ab06      	add	r3, sp, #24
    772e:	9302      	str	r3, [sp, #8]
    xferConfig.length = 1;
    7730:	f04f 0301 	mov.w	r3, #1
    7734:	9303      	str	r3, [sp, #12]
	SPI_ReadWrite((LPC_SPI_TypeDef *)LPC_SPI, &xferConfig, SPI_TRANSFER_POLLING);
    7736:	f04f 0000 	mov.w	r0, #0
    773a:	f2c4 0002 	movt	r0, #16386	; 0x4002
    773e:	a901      	add	r1, sp, #4
    7740:	f04f 0200 	mov.w	r2, #0
    7744:	f7fc f826 	bl	3794 <SPI_ReadWrite>
    /* send dummy data for receiving some */
//    SPDR = 0xff;
//    while(!(SPSR & (1 << SPIF)));
//    SPSR &= ~(1 << SPIF);
//    return SPDR;
}
    7748:	f89d 0018 	ldrb.w	r0, [sp, #24]
    774c:	b007      	add	sp, #28
    774e:	bd00      	pop	{pc}

00007750 <sd_raw_send_command>:
 * \param[in] command The command to send.
 * \param[in] arg The argument for command.
 * \returns The command answer.
 */
uint8_t sd_raw_send_command(uint8_t command, uint32_t arg)
{
    7750:	b538      	push	{r3, r4, r5, lr}
    7752:	4605      	mov	r5, r0
    7754:	460c      	mov	r4, r1
    uint8_t response;

    /* wait some clock cycles */
    sd_raw_rec_byte();
    7756:	f7ff ffe7 	bl	7728 <sd_raw_rec_byte>

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
    775a:	f045 0040 	orr.w	r0, r5, #64	; 0x40
    775e:	f7ff ffcf 	bl	7700 <sd_raw_send_byte>
    sd_raw_send_byte((arg >> 24) & 0xff);
    7762:	ea4f 6014 	mov.w	r0, r4, lsr #24
    7766:	f7ff ffcb 	bl	7700 <sd_raw_send_byte>
    sd_raw_send_byte((arg >> 16) & 0xff);
    776a:	f3c4 4007 	ubfx	r0, r4, #16, #8
    776e:	f7ff ffc7 	bl	7700 <sd_raw_send_byte>
    sd_raw_send_byte((arg >> 8) & 0xff);
    7772:	f3c4 2007 	ubfx	r0, r4, #8, #8
    7776:	f7ff ffc3 	bl	7700 <sd_raw_send_byte>
    sd_raw_send_byte((arg >> 0) & 0xff);
    777a:	b2e0      	uxtb	r0, r4
    777c:	f7ff ffc0 	bl	7700 <sd_raw_send_byte>
    switch(command)
    7780:	b115      	cbz	r5, 7788 <sd_raw_send_command+0x38>
    7782:	2d08      	cmp	r5, #8
    7784:	d10c      	bne.n	77a0 <sd_raw_send_command+0x50>
    7786:	e006      	b.n	7796 <sd_raw_send_command+0x46>
    {
        case CMD_GO_IDLE_STATE:
           sd_raw_send_byte(0x95);
    7788:	f04f 0095 	mov.w	r0, #149	; 0x95
    778c:	f7ff ffb8 	bl	7700 <sd_raw_send_byte>
 * \param[in] command The command to send.
 * \param[in] arg The argument for command.
 * \returns The command answer.
 */
uint8_t sd_raw_send_command(uint8_t command, uint32_t arg)
{
    7790:	f04f 040a 	mov.w	r4, #10
    7794:	e009      	b.n	77aa <sd_raw_send_command+0x5a>
    {
        case CMD_GO_IDLE_STATE:
           sd_raw_send_byte(0x95);
           break;
        case CMD_SEND_IF_COND:
           sd_raw_send_byte(0x87);
    7796:	f04f 0087 	mov.w	r0, #135	; 0x87
    779a:	f7ff ffb1 	bl	7700 <sd_raw_send_byte>
           break;
    779e:	e7f7      	b.n	7790 <sd_raw_send_command+0x40>
        default:
           sd_raw_send_byte(0xff);
    77a0:	f04f 00ff 	mov.w	r0, #255	; 0xff
    77a4:	f7ff ffac 	bl	7700 <sd_raw_send_byte>
           break;
    77a8:	e7f2      	b.n	7790 <sd_raw_send_command+0x40>
    
    /* receive response */
    uint8_t i;
    for(i = 0; i < 10; ++i)
    {
        response = sd_raw_rec_byte();
    77aa:	f7ff ffbd 	bl	7728 <sd_raw_rec_byte>
        if(response != 0xff)
    77ae:	28ff      	cmp	r0, #255	; 0xff
    77b0:	d104      	bne.n	77bc <sd_raw_send_command+0x6c>
    77b2:	f104 34ff 	add.w	r4, r4, #4294967295
    77b6:	b2e4      	uxtb	r4, r4
           break;
    }
    
    /* receive response */
    uint8_t i;
    for(i = 0; i < 10; ++i)
    77b8:	2c00      	cmp	r4, #0
    77ba:	d1f6      	bne.n	77aa <sd_raw_send_command+0x5a>
        if(response != 0xff)
            break;
    }

    return response;
}
    77bc:	bd38      	pop	{r3, r4, r5, pc}
    77be:	bf00      	nop

000077c0 <sd_raw_available>:
 * Checks wether a memory card is located in the slot.
 *
 * \returns 1 if the card is available, 0 if it is not.
 */
uint8_t sd_raw_available()
{
    77c0:	b508      	push	{r3, lr}
    return get_pin_available() == 0x00;
    77c2:	f04f 0001 	mov.w	r0, #1
    77c6:	f7fb fe9d 	bl	3504 <GPIO_ReadValue>
}
    77ca:	f04f 0001 	mov.w	r0, #1
    77ce:	bd08      	pop	{r3, pc}

000077d0 <sd_raw_locked>:
 * Checks wether the memory card is locked for write access.
 *
 * \returns 1 if the card is locked, 0 if it is not.
 */
uint8_t sd_raw_locked()
{
    77d0:	b508      	push	{r3, lr}
    return get_pin_locked() == 0x00;
    77d2:	f04f 0001 	mov.w	r0, #1
    77d6:	f7fb fe95 	bl	3504 <GPIO_ReadValue>
}
    77da:	f04f 0000 	mov.w	r0, #0
    77de:	bd08      	pop	{r3, pc}

000077e0 <sd_raw_sync>:
 *
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write
 */
uint8_t sd_raw_sync()
{
    77e0:	b508      	push	{r3, lr}
#if SD_RAW_WRITE_BUFFERING
    if(raw_block_written)
    77e2:	f240 63c0 	movw	r3, #1728	; 0x6c0
    77e6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    77ea:	781b      	ldrb	r3, [r3, #0]
    77ec:	b9ab      	cbnz	r3, 781a <sd_raw_sync+0x3a>
        return 1;
    if(!sd_raw_write(raw_block_address, raw_block, sizeof(raw_block)))
    77ee:	f240 63bc 	movw	r3, #1724	; 0x6bc
    77f2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    77f6:	6818      	ldr	r0, [r3, #0]
    77f8:	f240 61c4 	movw	r1, #1732	; 0x6c4
    77fc:	f2c1 0100 	movt	r1, #4096	; 0x1000
    7800:	f44f 7200 	mov.w	r2, #512	; 0x200
    7804:	f000 f9d0 	bl	7ba8 <sd_raw_write>
    7808:	b150      	cbz	r0, 7820 <sd_raw_sync+0x40>
        return 0;
    raw_block_written = 1;
    780a:	f240 63c0 	movw	r3, #1728	; 0x6c0
    780e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7812:	f04f 0001 	mov.w	r0, #1
    7816:	7018      	strb	r0, [r3, #0]
#endif
    return 1;
    7818:	bd08      	pop	{r3, pc}
 */
uint8_t sd_raw_sync()
{
#if SD_RAW_WRITE_BUFFERING
    if(raw_block_written)
        return 1;
    781a:	f04f 0001 	mov.w	r0, #1
    781e:	bd08      	pop	{r3, pc}
    if(!sd_raw_write(raw_block_address, raw_block, sizeof(raw_block)))
        return 0;
    7820:	f04f 0000 	mov.w	r0, #0
    raw_block_written = 1;
#endif
    return 1;
}
    7824:	bd08      	pop	{r3, pc}
    7826:	bf00      	nop

00007828 <sd_raw_read>:
 * \param[in] length The number of bytes to read.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_write_interval
 */
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    7828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    782c:	4605      	mov	r5, r0
    782e:	4608      	mov	r0, r1
    offset_t block_address;
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    7830:	4616      	mov	r6, r2
    7832:	2a00      	cmp	r2, #0
    7834:	d05f      	beq.n	78f6 <sd_raw_read+0xce>
        if(read_length > length)
            read_length = length;
        
#if !SD_RAW_SAVE_RAM
        /* check if the requested data is cached */
        if(block_address != raw_block_address)
    7836:	f240 67bc 	movw	r7, #1724	; 0x6bc
    783a:	f2c1 0700 	movt	r7, #4096	; 0x1000
        }
#if !SD_RAW_SAVE_RAM
        else
        {
            /* use cached data */
            memcpy(buffer, raw_block + block_offset, read_length);
    783e:	f240 69c4 	movw	r9, #1732	; 0x6c4
    7842:	f2c1 0900 	movt	r9, #4096	; 0x1000
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    {
        /* determine byte count to read at once */
        block_offset = offset & 0x01ff;
    7846:	ea4f 51c5 	mov.w	r1, r5, lsl #23
    784a:	ea4f 51d1 	mov.w	r1, r1, lsr #23
        block_address = offset - block_offset;
    784e:	ebc1 0805 	rsb	r8, r1, r5
        read_length = 512 - block_offset; /* read up to block border */
    7852:	f5c1 7400 	rsb	r4, r1, #512	; 0x200
    7856:	b2a4      	uxth	r4, r4
        if(read_length > length)
    7858:	42b4      	cmp	r4, r6
            read_length = length;
    785a:	bf88      	it	hi
    785c:	b2b4      	uxthhi	r4, r6
        
#if !SD_RAW_SAVE_RAM
        /* check if the requested data is cached */
        if(block_address != raw_block_address)
    785e:	683b      	ldr	r3, [r7, #0]
    7860:	4598      	cmp	r8, r3
    7862:	d03c      	beq.n	78de <sd_raw_read+0xb6>
#endif
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
    7864:	f7ff ffbc 	bl	77e0 <sd_raw_sync>
    7868:	2800      	cmp	r0, #0
    786a:	d048      	beq.n	78fe <sd_raw_read+0xd6>
                return 0;
#endif

            /* address card */
            select_card();
    786c:	f04f 0001 	mov.w	r0, #1
    7870:	f04f 0100 	mov.w	r1, #0
    7874:	4602      	mov	r2, r0
    7876:	f7fb fe25 	bl	34c4 <GPIO_SetDir>
    787a:	f04f 0001 	mov.w	r0, #1
    787e:	f7fb fe41 	bl	3504 <GPIO_ReadValue>
    7882:	f04f 0001 	mov.w	r0, #1
    7886:	f04f 0100 	mov.w	r1, #0
    788a:	f7fb fe2b 	bl	34e4 <GPIO_SetValue>

            /* send single block request */
#if SD_RAW_SDHC
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
#else
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, block_address))
    788e:	f04f 0011 	mov.w	r0, #17
    7892:	4641      	mov	r1, r8
    7894:	f7ff ff5c 	bl	7750 <sd_raw_send_command>
    7898:	b1a0      	cbz	r0, 78c4 <sd_raw_read+0x9c>
#endif
            {
                unselect_card();
    789a:	f04f 0001 	mov.w	r0, #1
    789e:	f04f 0100 	mov.w	r1, #0
    78a2:	4602      	mov	r2, r0
    78a4:	f7fb fe0e 	bl	34c4 <GPIO_SetDir>
    78a8:	f04f 0001 	mov.w	r0, #1
    78ac:	f7fb fe2a 	bl	3504 <GPIO_ReadValue>
    78b0:	f04f 0001 	mov.w	r0, #1
    78b4:	f04f 0100 	mov.w	r1, #0
    78b8:	f7fb fe14 	bl	34e4 <GPIO_SetValue>
                return 0;
    78bc:	f04f 0000 	mov.w	r0, #0
    78c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            }

            /* wait for data block (start byte 0xfe) */
            while(sd_raw_rec_byte() != 0xfe);
    78c4:	f7ff ff30 	bl	7728 <sd_raw_rec_byte>
    78c8:	28fe      	cmp	r0, #254	; 0xfe
    78ca:	d1fb      	bne.n	78c4 <sd_raw_read+0x9c>
                if(i >= block_offset && i < read_to)
                    *buffer++ = b;
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
    78cc:	f240 64c4 	movw	r4, #1732	; 0x6c4
    78d0:	f2c1 0400 	movt	r4, #4096	; 0x1000
            uint8_t i;
            for(i = 0; i < 512; ++i)
                *cache++ = sd_raw_rec_byte();
    78d4:	f7ff ff28 	bl	7728 <sd_raw_rec_byte>
    78d8:	f804 0b01 	strb.w	r0, [r4], #1
    78dc:	e7fa      	b.n	78d4 <sd_raw_read+0xac>
        }
#if !SD_RAW_SAVE_RAM
        else
        {
            /* use cached data */
            memcpy(buffer, raw_block + block_offset, read_length);
    78de:	4449      	add	r1, r9
    78e0:	4622      	mov	r2, r4
    78e2:	f017 fec1 	bl	1f668 <memcpy>
            buffer += read_length;
    78e6:	1900      	adds	r0, r0, r4
        }
#endif

        length -= read_length;
        offset += read_length;
    78e8:	192d      	adds	r5, r5, r4
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    offset_t block_address;
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    78ea:	1b36      	subs	r6, r6, r4
    78ec:	d1ab      	bne.n	7846 <sd_raw_read+0x1e>

        length -= read_length;
        offset += read_length;
    }

    return 1;
    78ee:	f04f 0001 	mov.w	r0, #1
    78f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    78f6:	f04f 0001 	mov.w	r0, #1
    78fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(block_address != raw_block_address)
#endif
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
                return 0;
    78fe:	f04f 0000 	mov.w	r0, #0
        length -= read_length;
        offset += read_length;
    }

    return 1;
}
    7902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7906:	bf00      	nop

00007908 <sd_raw_read_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_write
 */
uint8_t sd_raw_read_interval(offset_t offset, uint8_t* buffer, uintptr_t interval, uintptr_t length, sd_raw_read_interval_handler_t callback, void* p)
{
    7908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    790c:	4605      	mov	r5, r0
    790e:	461e      	mov	r6, r3
    7910:	f8dd 8020 	ldr.w	r8, [sp, #32]
    7914:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if(!buffer || interval == 0 || length < interval || !callback)
    7918:	460f      	mov	r7, r1
    791a:	4614      	mov	r4, r2
    791c:	f1d2 0201 	rsbs	r2, r2, #1
    7920:	bf38      	it	cc
    7922:	2200      	movcc	r2, #0
    7924:	2900      	cmp	r1, #0
    7926:	bf08      	it	eq
    7928:	f042 0201 	orreq.w	r2, r2, #1
    792c:	b9ea      	cbnz	r2, 796a <sd_raw_read_interval+0x62>
    792e:	f1d8 0301 	rsbs	r3, r8, #1
    7932:	bf38      	it	cc
    7934:	2300      	movcc	r3, #0
    7936:	42a6      	cmp	r6, r4
    7938:	bf38      	it	cc
    793a:	f043 0301 	orrcc.w	r3, r3, #1
    793e:	b9c3      	cbnz	r3, 7972 <sd_raw_read_interval+0x6a>
        return 0;

#if !SD_RAW_SAVE_RAM
    while(length >= interval)
    7940:	42b4      	cmp	r4, r6
    7942:	d81a      	bhi.n	797a <sd_raw_read_interval+0x72>
    {
        /* as reading is now buffered, we directly
         * hand over the request to sd_raw_read()
         */
        if(!sd_raw_read(offset, buffer, interval))
    7944:	4628      	mov	r0, r5
    7946:	4639      	mov	r1, r7
    7948:	4622      	mov	r2, r4
    794a:	f7ff ff6d 	bl	7828 <sd_raw_read>
    794e:	b1c0      	cbz	r0, 7982 <sd_raw_read_interval+0x7a>
            return 0;
        if(!callback(buffer, offset, p))
    7950:	4638      	mov	r0, r7
    7952:	4629      	mov	r1, r5
    7954:	464a      	mov	r2, r9
    7956:	47c0      	blx	r8
    7958:	b1b8      	cbz	r0, 798a <sd_raw_read_interval+0x82>
            break;
        offset += interval;
    795a:	192d      	adds	r5, r5, r4
        length -= interval;
    795c:	1b36      	subs	r6, r6, r4
{
    if(!buffer || interval == 0 || length < interval || !callback)
        return 0;

#if !SD_RAW_SAVE_RAM
    while(length >= interval)
    795e:	42b4      	cmp	r4, r6
    7960:	d9f0      	bls.n	7944 <sd_raw_read_interval+0x3c>
            break;
        offset += interval;
        length -= interval;
    }

    return 1;
    7962:	f04f 0001 	mov.w	r0, #1
    7966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_write
 */
uint8_t sd_raw_read_interval(offset_t offset, uint8_t* buffer, uintptr_t interval, uintptr_t length, sd_raw_read_interval_handler_t callback, void* p)
{
    if(!buffer || interval == 0 || length < interval || !callback)
        return 0;
    796a:	f04f 0000 	mov.w	r0, #0
    796e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7972:	f04f 0000 	mov.w	r0, #0
    7976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            break;
        offset += interval;
        length -= interval;
    }

    return 1;
    797a:	f04f 0001 	mov.w	r0, #1
    797e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    {
        /* as reading is now buffered, we directly
         * hand over the request to sd_raw_read()
         */
        if(!sd_raw_read(offset, buffer, interval))
            return 0;
    7982:	f04f 0000 	mov.w	r0, #0
    7986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            break;
        offset += interval;
        length -= interval;
    }

    return 1;
    798a:	f04f 0001 	mov.w	r0, #1
    /* let card some time to finish */
    sd_raw_rec_byte();

    return 1;
#endif
}
    798e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7992:	bf00      	nop

00007994 <sd_raw_init>:
 * Initializes memory card communication.
 *
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_init()
{
    7994:	b570      	push	{r4, r5, r6, lr}
    7996:	b086      	sub	sp, #24
    /* enable inputs for reading card status */
    configure_pin_available();
    7998:	f04f 0001 	mov.w	r0, #1
    799c:	f04f 0100 	mov.w	r1, #0
    79a0:	460a      	mov	r2, r1
    79a2:	f7fb fd8f 	bl	34c4 <GPIO_SetDir>
    configure_pin_locked();
    79a6:	f04f 0001 	mov.w	r0, #1
    79aa:	f04f 0100 	mov.w	r1, #0
    79ae:	460a      	mov	r2, r1
    79b0:	f7fb fd88 	bl	34c4 <GPIO_SetDir>

    /* enable outputs for MOSI, SCK, SS, input for MISO */
    configure_pin_mosi();
    79b4:	f04f 0001 	mov.w	r0, #1
    79b8:	f04f 0100 	mov.w	r1, #0
    79bc:	4602      	mov	r2, r0
    79be:	f7fb fd81 	bl	34c4 <GPIO_SetDir>
    configure_pin_sck();
    79c2:	f04f 0001 	mov.w	r0, #1
    79c6:	f04f 0100 	mov.w	r1, #0
    79ca:	4602      	mov	r2, r0
    79cc:	f7fb fd7a 	bl	34c4 <GPIO_SetDir>
    configure_pin_ss();
    79d0:	f04f 0001 	mov.w	r0, #1
    79d4:	f04f 0100 	mov.w	r1, #0
    79d8:	4602      	mov	r2, r0
    79da:	f7fb fd73 	bl	34c4 <GPIO_SetDir>
    configure_pin_miso();
    79de:	f04f 0001 	mov.w	r0, #1
    79e2:	f04f 0100 	mov.w	r1, #0
    79e6:	4602      	mov	r2, r0
    79e8:	f7fb fd6c 	bl	34c4 <GPIO_SetDir>

    unselect_card();
    79ec:	f04f 0001 	mov.w	r0, #1
    79f0:	f04f 0100 	mov.w	r1, #0
    79f4:	4602      	mov	r2, r0
    79f6:	f7fb fd65 	bl	34c4 <GPIO_SetDir>
    79fa:	f04f 0001 	mov.w	r0, #1
    79fe:	f7fb fd81 	bl	3504 <GPIO_ReadValue>
    7a02:	f04f 0001 	mov.w	r0, #1
    7a06:	f04f 0100 	mov.w	r1, #0
    7a0a:	f7fb fd6b 	bl	34e4 <GPIO_SetValue>

    SPI_CFG_Type spi_cfg;
    spi_cfg.Databit = SPI_DATABIT_8;
    7a0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
    7a12:	9300      	str	r3, [sp, #0]
    spi_cfg.CPHA = SPI_CPHA_FIRST;
    7a14:	f04f 0400 	mov.w	r4, #0
    7a18:	9401      	str	r4, [sp, #4]
    spi_cfg.CPOL = SPI_CPOL_HI;
    7a1a:	9402      	str	r4, [sp, #8]
    spi_cfg.Mode = SPI_MASTER_MODE;
    7a1c:	f04f 0320 	mov.w	r3, #32
    7a20:	9303      	str	r3, [sp, #12]
    spi_cfg.DataOrder = SPI_DATA_MSB_FIRST;
    7a22:	9404      	str	r4, [sp, #16]
    spi_cfg.ClockRate = 50000000/128;
    7a24:	f24f 53e1 	movw	r3, #62945	; 0xf5e1
    7a28:	f2c0 0305 	movt	r3, #5
    7a2c:	9305      	str	r3, [sp, #20]

    SPI_Init((LPC_SPI_TypeDef *)LPC_SPI, &spi_cfg);
    7a2e:	4620      	mov	r0, r4
    7a30:	f2c4 0002 	movt	r0, #16386	; 0x4002
    7a34:	4669      	mov	r1, sp
    7a36:	f7fb fe25 	bl	3684 <SPI_Init>
//           (1 << SPR1) | /* Clock Frequency: f_OSC / 128 */
//           (1 << SPR0);
//    SPSR &= ~(1 << SPI2X); /* No doubled clock frequency */

    /* initialization procedure */
    sd_raw_card_type = 0;
    7a3a:	f240 63b8 	movw	r3, #1720	; 0x6b8
    7a3e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7a42:	701c      	strb	r4, [r3, #0]
    
    if(!sd_raw_available())
    7a44:	f7ff febc 	bl	77c0 <sd_raw_available>
    7a48:	2800      	cmp	r0, #0
    7a4a:	f000 80a8 	beq.w	7b9e <sd_raw_init+0x20a>
    7a4e:	f04f 040a 	mov.w	r4, #10
    /* card needs 74 cycles minimum to start up */
    uint8_t i;
    for(i = 0; i < 10; ++i)
    {
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    7a52:	f7ff fe69 	bl	7728 <sd_raw_rec_byte>
    7a56:	f104 34ff 	add.w	r4, r4, #4294967295
    7a5a:	b2e4      	uxtb	r4, r4
    if(!sd_raw_available())
        return 0;

    /* card needs 74 cycles minimum to start up */
    uint8_t i;
    for(i = 0; i < 10; ++i)
    7a5c:	2c00      	cmp	r4, #0
    7a5e:	d1f8      	bne.n	7a52 <sd_raw_init+0xbe>
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    }

    /* address card */
    select_card();
    7a60:	f04f 0001 	mov.w	r0, #1
    7a64:	f04f 0100 	mov.w	r1, #0
    7a68:	4602      	mov	r2, r0
    7a6a:	f7fb fd2b 	bl	34c4 <GPIO_SetDir>
    7a6e:	f04f 0001 	mov.w	r0, #1
    7a72:	f7fb fd47 	bl	3504 <GPIO_ReadValue>
    7a76:	f04f 0001 	mov.w	r0, #1
    7a7a:	f04f 0100 	mov.w	r1, #0
    7a7e:	f7fb fd31 	bl	34e4 <GPIO_SetValue>

    /* reset card */
    uint8_t response;
    for(i = 0; ; ++i)
    {
        response = sd_raw_send_command(CMD_GO_IDLE_STATE, 0);
    7a82:	4620      	mov	r0, r4
    7a84:	4621      	mov	r1, r4
    7a86:	f7ff fe63 	bl	7750 <sd_raw_send_command>
        if(response == (1 << R1_IDLE_STATE))
    7a8a:	2801      	cmp	r0, #1
    7a8c:	d1f9      	bne.n	7a82 <sd_raw_init+0xee>
    }
    else
#endif
    {
        /* determine SD/MMC card type */
        sd_raw_send_command(CMD_APP, 0);
    7a8e:	f04f 0037 	mov.w	r0, #55	; 0x37
    7a92:	f04f 0100 	mov.w	r1, #0
    7a96:	f7ff fe5b 	bl	7750 <sd_raw_send_command>
        response = sd_raw_send_command(CMD_SD_SEND_OP_COND, 0);
    7a9a:	f04f 0029 	mov.w	r0, #41	; 0x29
    7a9e:	f04f 0100 	mov.w	r1, #0
    7aa2:	f7ff fe55 	bl	7750 <sd_raw_send_command>
        if((response & (1 << R1_ILL_COMMAND)) == 0)
    7aa6:	f010 0f04 	tst.w	r0, #4
        {
            /* card conforms to SD 1 card specification */
            sd_raw_card_type |= (1 << SD_RAW_SPEC_1);
    7aaa:	bf01      	itttt	eq
    7aac:	f240 63b8 	movweq	r3, #1720	; 0x6b8
    7ab0:	f2c1 0300 	movteq	r3, #4096	; 0x1000
    7ab4:	781a      	ldrbeq	r2, [r3, #0]
    7ab6:	f042 0201 	orreq.w	r2, r2, #1
    7aba:	bf08      	it	eq
    7abc:	701a      	strbeq	r2, [r3, #0]
    }

    /* wait for card to get ready */
    for(i = 0; ; ++i)
    {
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
    7abe:	f240 65b8 	movw	r5, #1720	; 0x6b8
    7ac2:	f2c1 0500 	movt	r5, #4096	; 0x1000
            uint32_t arg = 0;
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
                arg = 0x40000000;
#endif
            sd_raw_send_command(CMD_APP, 0);
    7ac6:	f04f 0637 	mov.w	r6, #55	; 0x37
    7aca:	f04f 0400 	mov.w	r4, #0
    }

    /* wait for card to get ready */
    for(i = 0; ; ++i)
    {
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
    7ace:	782b      	ldrb	r3, [r5, #0]
    7ad0:	f013 0f03 	tst.w	r3, #3
    7ad4:	d009      	beq.n	7aea <sd_raw_init+0x156>
            uint32_t arg = 0;
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
                arg = 0x40000000;
#endif
            sd_raw_send_command(CMD_APP, 0);
    7ad6:	4630      	mov	r0, r6
    7ad8:	4621      	mov	r1, r4
    7ada:	f7ff fe39 	bl	7750 <sd_raw_send_command>
            response = sd_raw_send_command(CMD_SD_SEND_OP_COND, arg);
    7ade:	f04f 0029 	mov.w	r0, #41	; 0x29
    7ae2:	4621      	mov	r1, r4
    7ae4:	f7ff fe34 	bl	7750 <sd_raw_send_command>
    7ae8:	e004      	b.n	7af4 <sd_raw_init+0x160>
        }
        else
        {
            response = sd_raw_send_command(CMD_SEND_OP_COND, 0);
    7aea:	f04f 0001 	mov.w	r0, #1
    7aee:	4621      	mov	r1, r4
    7af0:	f7ff fe2e 	bl	7750 <sd_raw_send_command>
        }

        if((response & (1 << R1_IDLE_STATE)) == 0)
    7af4:	f010 0f01 	tst.w	r0, #1
    7af8:	d1e9      	bne.n	7ace <sd_raw_init+0x13a>
        sd_raw_rec_byte();
    }
#endif

    /* set block size to 512 bytes */
    if(sd_raw_send_command(CMD_SET_BLOCKLEN, 512))
    7afa:	f04f 0010 	mov.w	r0, #16
    7afe:	f44f 7100 	mov.w	r1, #512	; 0x200
    7b02:	f7ff fe25 	bl	7750 <sd_raw_send_command>
    7b06:	b198      	cbz	r0, 7b30 <sd_raw_init+0x19c>
    {
        unselect_card();
    7b08:	f04f 0001 	mov.w	r0, #1
    7b0c:	f04f 0100 	mov.w	r1, #0
    7b10:	4602      	mov	r2, r0
    7b12:	f7fb fcd7 	bl	34c4 <GPIO_SetDir>
    7b16:	f04f 0001 	mov.w	r0, #1
    7b1a:	f7fb fcf3 	bl	3504 <GPIO_ReadValue>
    7b1e:	f04f 0001 	mov.w	r0, #1
    7b22:	f04f 0100 	mov.w	r1, #0
    7b26:	f7fb fcdd 	bl	34e4 <GPIO_SetValue>
        return 0;
    7b2a:	f04f 0000 	mov.w	r0, #0
    7b2e:	e038      	b.n	7ba2 <sd_raw_init+0x20e>
    }

    /* deaddress card */
    unselect_card();
    7b30:	f04f 0001 	mov.w	r0, #1
    7b34:	f04f 0100 	mov.w	r1, #0
    7b38:	4602      	mov	r2, r0
    7b3a:	f7fb fcc3 	bl	34c4 <GPIO_SetDir>
    7b3e:	f04f 0001 	mov.w	r0, #1
    7b42:	f7fb fcdf 	bl	3504 <GPIO_ReadValue>
    7b46:	f04f 0001 	mov.w	r0, #1
    7b4a:	f04f 0100 	mov.w	r1, #0
    7b4e:	f7fb fcc9 	bl	34e4 <GPIO_SetValue>

    /* switch to highest SPI frequency possible */
//    SPCR &= ~((1 << SPR1) | (1 << SPR0)); /* Clock Frequency: f_OSC / 4 */
//    SPSR |= (1 << SPI2X); /* Doubled Clock Frequency: f_OSC / 2 */
    SPI_SetClock ((LPC_SPI_TypeDef *)LPC_SPI, 50000000/4);
    7b52:	f04f 0000 	mov.w	r0, #0
    7b56:	f2c4 0002 	movt	r0, #16386	; 0x4002
    7b5a:	f64b 4120 	movw	r1, #48160	; 0xbc20
    7b5e:	f2c0 01be 	movt	r1, #190	; 0xbe
    7b62:	f7fb fd51 	bl	3608 <SPI_SetClock>

#if !SD_RAW_SAVE_RAM
    /* the first block is likely to be accessed first, so precache it here */
    raw_block_address = (offset_t) -1;
    7b66:	f240 63bc 	movw	r3, #1724	; 0x6bc
    7b6a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7b6e:	f04f 32ff 	mov.w	r2, #4294967295
    7b72:	601a      	str	r2, [r3, #0]
#if SD_RAW_WRITE_BUFFERING
    raw_block_written = 1;
    7b74:	f240 63c0 	movw	r3, #1728	; 0x6c0
    7b78:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7b7c:	f04f 0201 	mov.w	r2, #1
    7b80:	701a      	strb	r2, [r3, #0]
#endif
    if(!sd_raw_read(0, raw_block, sizeof(raw_block)))
    7b82:	f04f 0000 	mov.w	r0, #0
    7b86:	f240 61c4 	movw	r1, #1732	; 0x6c4
    7b8a:	f2c1 0100 	movt	r1, #4096	; 0x1000
    7b8e:	f44f 7200 	mov.w	r2, #512	; 0x200
    7b92:	f7ff fe49 	bl	7828 <sd_raw_read>

    /* initialization procedure */
    sd_raw_card_type = 0;
    
    if(!sd_raw_available())
        return 0;
    7b96:	3000      	adds	r0, #0
    7b98:	bf18      	it	ne
    7b9a:	2001      	movne	r0, #1
    7b9c:	e001      	b.n	7ba2 <sd_raw_init+0x20e>
    7b9e:	f04f 0000 	mov.w	r0, #0
    if(!sd_raw_read(0, raw_block, sizeof(raw_block)))
        return 0;
#endif

    return 1;
}
    7ba2:	b006      	add	sp, #24
    7ba4:	bd70      	pop	{r4, r5, r6, pc}
    7ba6:	bf00      	nop

00007ba8 <sd_raw_write>:
 * \param[in] length The number of bytes to write.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_read_interval
 */
uint8_t sd_raw_write(offset_t offset, const uint8_t* buffer, uintptr_t length)
{
    7ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7bac:	4606      	mov	r6, r0
    7bae:	4688      	mov	r8, r1
    7bb0:	4617      	mov	r7, r2
    if(sd_raw_locked())
    7bb2:	f7ff fe0d 	bl	77d0 <sd_raw_locked>
    7bb6:	2800      	cmp	r0, #0
    7bb8:	d07d      	beq.n	7cb6 <sd_raw_write+0x10e>
    7bba:	e082      	b.n	7cc2 <sd_raw_write+0x11a>
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    {
        /* determine byte count to write at once */
        block_offset = offset & 0x01ff;
    7bbc:	ea4f 54c6 	mov.w	r4, r6, lsl #23
    7bc0:	ea4f 54d4 	mov.w	r4, r4, lsr #23
        block_address = offset - block_offset;
    7bc4:	1b36      	subs	r6, r6, r4
        write_length = 512 - block_offset; /* write up to block border */
    7bc6:	f5c4 7500 	rsb	r5, r4, #512	; 0x200
    7bca:	b2ad      	uxth	r5, r5
        if(write_length > length)
    7bcc:	42af      	cmp	r7, r5
            write_length = length;
    7bce:	bf38      	it	cc
    7bd0:	b2bd      	uxthcc	r5, r7
        
        /* Merge the data to write with the content of the block.
         * Use the cached block if available.
         */
        if(block_address != raw_block_address)
    7bd2:	f240 63bc 	movw	r3, #1724	; 0x6bc
    7bd6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7bda:	681b      	ldr	r3, [r3, #0]
    7bdc:	429e      	cmp	r6, r3
    7bde:	d01d      	beq.n	7c1c <sd_raw_write+0x74>
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
    7be0:	f7ff fdfe 	bl	77e0 <sd_raw_sync>
    7be4:	2800      	cmp	r0, #0
    7be6:	d070      	beq.n	7cca <sd_raw_write+0x122>
                return 0;
#endif

            if(block_offset || write_length < 512)
    7be8:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    7bec:	bf2c      	ite	cs
    7bee:	2300      	movcs	r3, #0
    7bf0:	2301      	movcc	r3, #1
    7bf2:	2c00      	cmp	r4, #0
    7bf4:	bf18      	it	ne
    7bf6:	f043 0301 	orrne.w	r3, r3, #1
    7bfa:	b153      	cbz	r3, 7c12 <sd_raw_write+0x6a>
            {
                if(!sd_raw_read(block_address, raw_block, sizeof(raw_block)))
    7bfc:	4630      	mov	r0, r6
    7bfe:	f240 61c4 	movw	r1, #1732	; 0x6c4
    7c02:	f2c1 0100 	movt	r1, #4096	; 0x1000
    7c06:	f44f 7200 	mov.w	r2, #512	; 0x200
    7c0a:	f7ff fe0d 	bl	7828 <sd_raw_read>
    7c0e:	2800      	cmp	r0, #0
    7c10:	d05f      	beq.n	7cd2 <sd_raw_write+0x12a>
                    return 0;
            }
            raw_block_address = block_address;
    7c12:	f240 63bc 	movw	r3, #1724	; 0x6bc
    7c16:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7c1a:	601e      	str	r6, [r3, #0]
        }

        if(buffer != raw_block)
    7c1c:	f240 63c4 	movw	r3, #1732	; 0x6c4
    7c20:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7c24:	4598      	cmp	r8, r3
    7c26:	d00d      	beq.n	7c44 <sd_raw_write+0x9c>
        {
            memcpy(raw_block + block_offset, buffer, write_length);
    7c28:	1918      	adds	r0, r3, r4
    7c2a:	4641      	mov	r1, r8
    7c2c:	462a      	mov	r2, r5
    7c2e:	f017 fd1b 	bl	1f668 <memcpy>

#if SD_RAW_WRITE_BUFFERING
            raw_block_written = 0;
    7c32:	f240 63c0 	movw	r3, #1728	; 0x6c0
    7c36:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7c3a:	f04f 0200 	mov.w	r2, #0
    7c3e:	701a      	strb	r2, [r3, #0]

            if(length == write_length)
    7c40:	42af      	cmp	r7, r5
    7c42:	d04a      	beq.n	7cda <sd_raw_write+0x132>
                return 1;
#endif
        }

        /* address card */
        select_card();
    7c44:	f04f 0001 	mov.w	r0, #1
    7c48:	f04f 0100 	mov.w	r1, #0
    7c4c:	4602      	mov	r2, r0
    7c4e:	f7fb fc39 	bl	34c4 <GPIO_SetDir>
    7c52:	f04f 0001 	mov.w	r0, #1
    7c56:	f7fb fc55 	bl	3504 <GPIO_ReadValue>
    7c5a:	f04f 0001 	mov.w	r0, #1
    7c5e:	f04f 0100 	mov.w	r1, #0
    7c62:	f7fb fc3f 	bl	34e4 <GPIO_SetValue>

        /* send single block request */
#if SD_RAW_SDHC
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
#else
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, block_address))
    7c66:	f04f 0018 	mov.w	r0, #24
    7c6a:	4631      	mov	r1, r6
    7c6c:	f7ff fd70 	bl	7750 <sd_raw_send_command>
    7c70:	b1a0      	cbz	r0, 7c9c <sd_raw_write+0xf4>
#endif
        {
            unselect_card();
    7c72:	f04f 0001 	mov.w	r0, #1
    7c76:	f04f 0100 	mov.w	r1, #0
    7c7a:	4602      	mov	r2, r0
    7c7c:	f7fb fc22 	bl	34c4 <GPIO_SetDir>
    7c80:	f04f 0001 	mov.w	r0, #1
    7c84:	f7fb fc3e 	bl	3504 <GPIO_ReadValue>
    7c88:	f04f 0001 	mov.w	r0, #1
    7c8c:	f04f 0100 	mov.w	r1, #0
    7c90:	f7fb fc28 	bl	34e4 <GPIO_SetValue>
            return 0;
    7c94:	f04f 0000 	mov.w	r0, #0
    7c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }

        /* send start byte */
        sd_raw_send_byte(0xfe);
    7c9c:	f04f 00fe 	mov.w	r0, #254	; 0xfe
    7ca0:	f7ff fd2e 	bl	7700 <sd_raw_send_byte>

        /* write byte block */
        uint8_t* cache = raw_block;
    7ca4:	f240 64c4 	movw	r4, #1732	; 0x6c4
    7ca8:	f2c1 0400 	movt	r4, #4096	; 0x1000
        uint8_t i;
        for(i = 0; i < 512; ++i)
            sd_raw_send_byte(*cache++);
    7cac:	f814 0b01 	ldrb.w	r0, [r4], #1
    7cb0:	f7ff fd26 	bl	7700 <sd_raw_send_byte>
    7cb4:	e7fa      	b.n	7cac <sd_raw_write+0x104>
        return 0;

    offset_t block_address;
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    7cb6:	2f00      	cmp	r7, #0
    7cb8:	d180      	bne.n	7bbc <sd_raw_write+0x14>
#if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
#endif
    }

    return 1;
    7cba:	f04f 0001 	mov.w	r0, #1
    7cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_read_interval
 */
uint8_t sd_raw_write(offset_t offset, const uint8_t* buffer, uintptr_t length)
{
    if(sd_raw_locked())
        return 0;
    7cc2:	f04f 0000 	mov.w	r0, #0
    7cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
         */
        if(block_address != raw_block_address)
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
                return 0;
    7cca:	f04f 0000 	mov.w	r0, #0
    7cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#endif

            if(block_offset || write_length < 512)
            {
                if(!sd_raw_read(block_address, raw_block, sizeof(raw_block)))
                    return 0;
    7cd2:	f04f 0000 	mov.w	r0, #0
    7cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

#if SD_RAW_WRITE_BUFFERING
            raw_block_written = 0;

            if(length == write_length)
                return 1;
    7cda:	f04f 0001 	mov.w	r0, #1
        raw_block_written = 1;
#endif
    }

    return 1;
}
    7cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7ce2:	bf00      	nop

00007ce4 <sd_raw_write_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_read
 */
uint8_t sd_raw_write_interval(offset_t offset, uint8_t* buffer, uintptr_t length, sd_raw_write_interval_handler_t callback, void* p)
{
    7ce4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7ce8:	4605      	mov	r5, r0
    7cea:	4616      	mov	r6, r2
    7cec:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
#if SD_RAW_SAVE_RAM
    #error "SD_RAW_WRITE_SUPPORT is not supported together with SD_RAW_SAVE_RAM"
#endif

    if(!buffer || !callback)
    7cf0:	460f      	mov	r7, r1
    7cf2:	4699      	mov	r9, r3
    7cf4:	f1d3 0301 	rsbs	r3, r3, #1
    7cf8:	bf38      	it	cc
    7cfa:	2300      	movcc	r3, #0
    7cfc:	2900      	cmp	r1, #0
    7cfe:	bf08      	it	eq
    7d00:	f043 0301 	orreq.w	r3, r3, #1
    7d04:	bb43      	cbnz	r3, 7d58 <sd_raw_write_interval+0x74>
        return 0;

    uint8_t endless = (length == 0);
    7d06:	f1d2 0801 	rsbs	r8, r2, #1
    7d0a:	bf38      	it	cc
    7d0c:	f04f 0800 	movcc.w	r8, #0
    while(endless || length > 0)
    7d10:	46c2      	mov	sl, r8
    7d12:	2a00      	cmp	r2, #0
    7d14:	bf0c      	ite	eq
    7d16:	4643      	moveq	r3, r8
    7d18:	f048 0301 	orrne.w	r3, r8, #1
    7d1c:	b303      	cbz	r3, 7d60 <sd_raw_write_interval+0x7c>
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
    7d1e:	4638      	mov	r0, r7
    7d20:	4629      	mov	r1, r5
    7d22:	465a      	mov	r2, fp
    7d24:	47c8      	blx	r9
    7d26:	b284      	uxth	r4, r0
        if(!bytes_to_write)
    7d28:	b1f4      	cbz	r4, 7d68 <sd_raw_write_interval+0x84>
            break;
        if(!endless && bytes_to_write > length)
    7d2a:	f1b8 0f00 	cmp.w	r8, #0
    7d2e:	d101      	bne.n	7d34 <sd_raw_write_interval+0x50>
    7d30:	42b4      	cmp	r4, r6
    7d32:	d81d      	bhi.n	7d70 <sd_raw_write_interval+0x8c>
            return 0;

        /* as writing is always buffered, we directly
         * hand over the request to sd_raw_write()
         */
        if(!sd_raw_write(offset, buffer, bytes_to_write))
    7d34:	4628      	mov	r0, r5
    7d36:	4639      	mov	r1, r7
    7d38:	4622      	mov	r2, r4
    7d3a:	f7ff ff35 	bl	7ba8 <sd_raw_write>
    7d3e:	b1d8      	cbz	r0, 7d78 <sd_raw_write_interval+0x94>
            return 0;

        offset += bytes_to_write;
    7d40:	192d      	adds	r5, r5, r4

    if(!buffer || !callback)
        return 0;

    uint8_t endless = (length == 0);
    while(endless || length > 0)
    7d42:	1b36      	subs	r6, r6, r4
    7d44:	bf0c      	ite	eq
    7d46:	4653      	moveq	r3, sl
    7d48:	f04a 0301 	orrne.w	r3, sl, #1
    7d4c:	2b00      	cmp	r3, #0
    7d4e:	d1e6      	bne.n	7d1e <sd_raw_write_interval+0x3a>

        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
    7d50:	f04f 0001 	mov.w	r0, #1
    7d54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
#if SD_RAW_SAVE_RAM
    #error "SD_RAW_WRITE_SUPPORT is not supported together with SD_RAW_SAVE_RAM"
#endif

    if(!buffer || !callback)
        return 0;
    7d58:	f04f 0000 	mov.w	r0, #0
    7d5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
    7d60:	f04f 0001 	mov.w	r0, #1
    7d64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7d68:	f04f 0001 	mov.w	r0, #1
    7d6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
        if(!bytes_to_write)
            break;
        if(!endless && bytes_to_write > length)
            return 0;
    7d70:	f04f 0000 	mov.w	r0, #0
    7d74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

        /* as writing is always buffered, we directly
         * hand over the request to sd_raw_write()
         */
        if(!sd_raw_write(offset, buffer, bytes_to_write))
            return 0;
    7d78:	f04f 0000 	mov.w	r0, #0
        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
}
    7d7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00007d80 <_GLOBAL__sub_I_center_holding>:
}

void ButtonArray::clearButtonPress(){

		previousJ = 0x1F;
}
    7d80:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
    7d82:	f640 00c4 	movw	r0, #2244	; 0x8c4
    7d86:	f2c1 0000 	movt	r0, #4096	; 0x1000
    7d8a:	f04f 0100 	mov.w	r1, #0
    7d8e:	f008 ff93 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
    7d92:	f640 00c8 	movw	r0, #2248	; 0x8c8
    7d96:	f2c1 0000 	movt	r0, #4096	; 0x1000
    7d9a:	f04f 0101 	mov.w	r1, #1
    7d9e:	f008 ff8b 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
    7da2:	f640 00cc 	movw	r0, #2252	; 0x8cc
    7da6:	f2c1 0000 	movt	r0, #4096	; 0x1000
    7daa:	f04f 0102 	mov.w	r1, #2
    7dae:	f008 ff83 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
    7db2:	f640 00d0 	movw	r0, #2256	; 0x8d0
    7db6:	f2c1 0000 	movt	r0, #4096	; 0x1000
    7dba:	f04f 0103 	mov.w	r1, #3
    7dbe:	f008 ff7b 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
    7dc2:	f640 00d4 	movw	r0, #2260	; 0x8d4
    7dc6:	f2c1 0000 	movt	r0, #4096	; 0x1000
    7dca:	f04f 0104 	mov.w	r1, #4
    7dce:	f008 ff73 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
    7dd2:	f640 04d8 	movw	r4, #2264	; 0x8d8
    7dd6:	f2c1 0400 	movt	r4, #4096	; 0x1000
    7dda:	4620      	mov	r0, r4
    7ddc:	f04f 01ff 	mov.w	r1, #255	; 0xff
    7de0:	f008 ff6a 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
	};
	// currently not used:
	//const uint8_t getPinIndex() const { return pin_index; }
};

static const Pin NullPin(NullPort, 0);
    7de4:	f640 00dc 	movw	r0, #2268	; 0x8dc
    7de8:	f2c1 0000 	movt	r0, #4096	; 0x1000
    7dec:	4621      	mov	r1, r4
    7dee:	f04f 0200 	mov.w	r2, #0
    7df2:	f009 f973 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
    7df6:	bd10      	pop	{r4, pc}

00007df8 <command::getRemainingCapacity()>:
		return length;
	}

	/// Get the remaining capacity of this buffer
	inline const BufSizeType getRemainingCapacity() const {
		return size - length;
    7df8:	f641 1340 	movw	r3, #6464	; 0x1940
    7dfc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7e00:	885a      	ldrh	r2, [r3, #2]
    7e02:	8818      	ldrh	r0, [r3, #0]
    7e04:	1a80      	subs	r0, r0, r2
	uint16_t sz;
//	ATOMIC_BLOCK(ATOMIC_FORCEON) {
		sz = command_buffer.getRemainingCapacity();
//	}
	return sz;
}
    7e06:	b280      	uxth	r0, r0
    7e08:	4770      	bx	lr
    7e0a:	bf00      	nop

00007e0c <command::pause(bool)>:

void pause(bool pause) {
	paused = pause;
    7e0c:	f641 1368 	movw	r3, #6504	; 0x1968
    7e10:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7e14:	7018      	strb	r0, [r3, #0]
}
    7e16:	4770      	bx	lr

00007e18 <command::heatShutdown()>:
void heatShutdown(){
	heat_shutdown = true;
    7e18:	f641 133c 	movw	r3, #6460	; 0x193c
    7e1c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7e20:	f04f 0201 	mov.w	r2, #1
    7e24:	701a      	strb	r2, [r3, #0]
}
    7e26:	4770      	bx	lr

00007e28 <command::isPaused()>:

bool isPaused() {
	return paused;
    7e28:	f641 1368 	movw	r3, #6504	; 0x1968
    7e2c:	f2c1 0300 	movt	r3, #4096	; 0x1000
}
    7e30:	7818      	ldrb	r0, [r3, #0]
    7e32:	4770      	bx	lr

00007e34 <command::isEmpty()>:
	}

	/// Check if the buffer is empty
	inline const bool isEmpty() const {
		return length == 0;
    7e34:	f641 1340 	movw	r3, #6464	; 0x1940
    7e38:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7e3c:	8858      	ldrh	r0, [r3, #2]
    7e3e:	b280      	uxth	r0, r0

bool isEmpty() {
	return command_buffer.isEmpty();
}
    7e40:	f1d0 0001 	rsbs	r0, r0, #1
    7e44:	bf38      	it	cc
    7e46:	2000      	movcc	r0, #0
    7e48:	4770      	bx	lr
    7e4a:	bf00      	nop

00007e4c <command::push(unsigned char)>:

void push(uint8_t byte) {
    7e4c:	b410      	push	{r4}
		overflow = false;
		underflow = false;
	}
	/// Append a byte to the tail of the buffer
	inline void push(BufDataType b) {
		if (length < size) {
    7e4e:	f641 1340 	movw	r3, #6464	; 0x1940
    7e52:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7e56:	8859      	ldrh	r1, [r3, #2]
    7e58:	b289      	uxth	r1, r1
    7e5a:	881a      	ldrh	r2, [r3, #0]
    7e5c:	4291      	cmp	r1, r2
    7e5e:	d215      	bcs.n	7e8c <command::push(unsigned char)+0x40>
			operator[](length) = b;
    7e60:	f641 1340 	movw	r3, #6464	; 0x1940
    7e64:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7e68:	885c      	ldrh	r4, [r3, #2]
    7e6a:	b2a4      	uxth	r4, r4
	inline const bool isEmpty() const {
		return length == 0;
	}
	/// Read the buffer directly
	inline BufDataType& operator[](BufSizeType index) {
		const BufSizeType actual_index = (index + start) % size;
    7e6c:	8899      	ldrh	r1, [r3, #4]
    7e6e:	b289      	uxth	r1, r1
    7e70:	1861      	adds	r1, r4, r1
    7e72:	fb91 f4f2 	sdiv	r4, r1, r2
    7e76:	fb02 1214 	mls	r2, r2, r4, r1
		return data[actual_index];
    7e7a:	b292      	uxth	r2, r2
		underflow = false;
	}
	/// Append a byte to the tail of the buffer
	inline void push(BufDataType b) {
		if (length < size) {
			operator[](length) = b;
    7e7c:	6899      	ldr	r1, [r3, #8]
    7e7e:	5488      	strb	r0, [r1, r2]
			length++;
    7e80:	885a      	ldrh	r2, [r3, #2]
    7e82:	f102 0201 	add.w	r2, r2, #1
    7e86:	b292      	uxth	r2, r2
    7e88:	805a      	strh	r2, [r3, #2]
    7e8a:	e006      	b.n	7e9a <command::push(unsigned char)+0x4e>
		} else {
			overflow = true;
    7e8c:	f641 1340 	movw	r3, #6464	; 0x1940
    7e90:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7e94:	f04f 0201 	mov.w	r2, #1
    7e98:	731a      	strb	r2, [r3, #12]
	command_buffer.push(byte);
}
    7e9a:	bc10      	pop	{r4}
    7e9c:	4770      	bx	lr
    7e9e:	bf00      	nop

00007ea0 <command::pop8()>:

uint8_t pop8() {
    7ea0:	b430      	push	{r4, r5}
		return size - length;
	}

	/// Check if the buffer is empty
	inline const bool isEmpty() const {
		return length == 0;
    7ea2:	f641 1340 	movw	r3, #6464	; 0x1940
    7ea6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7eaa:	885b      	ldrh	r3, [r3, #2]
    7eac:	b29b      	uxth	r3, r3
			overflow = true;
		}
	}
	/// Pop a byte off the head of the buffer
	inline BufDataType pop() {
		if (isEmpty()) {
    7eae:	b94b      	cbnz	r3, 7ec4 <command::pop8()+0x24>
			underflow = true;
    7eb0:	f641 1340 	movw	r3, #6464	; 0x1940
    7eb4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7eb8:	f04f 0201 	mov.w	r2, #1
    7ebc:	735a      	strb	r2, [r3, #13]
			return BufDataType();
    7ebe:	f04f 0000 	mov.w	r0, #0
    7ec2:	e01c      	b.n	7efe <command::pop8()+0x5e>
	inline const bool isEmpty() const {
		return length == 0;
	}
	/// Read the buffer directly
	inline BufDataType& operator[](BufSizeType index) {
		const BufSizeType actual_index = (index + start) % size;
    7ec4:	f641 1340 	movw	r3, #6464	; 0x1940
    7ec8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7ecc:	8899      	ldrh	r1, [r3, #4]
    7ece:	b289      	uxth	r1, r1
    7ed0:	881a      	ldrh	r2, [r3, #0]
    7ed2:	fb91 f0f2 	sdiv	r0, r1, r2
    7ed6:	fb02 1110 	mls	r1, r2, r0, r1
		return data[actual_index];
    7eda:	b288      	uxth	r0, r1
    7edc:	689c      	ldr	r4, [r3, #8]
		if (isEmpty()) {
			underflow = true;
			return BufDataType();
		}
		const BufDataType& popped_byte = operator[](0);
		start = (start + 1) % size;
    7ede:	8899      	ldrh	r1, [r3, #4]
    7ee0:	b289      	uxth	r1, r1
    7ee2:	f101 0101 	add.w	r1, r1, #1
    7ee6:	fb91 f5f2 	sdiv	r5, r1, r2
    7eea:	fb02 1215 	mls	r2, r2, r5, r1
    7eee:	b292      	uxth	r2, r2
    7ef0:	809a      	strh	r2, [r3, #4]
		length--;
    7ef2:	885a      	ldrh	r2, [r3, #2]
    7ef4:	f102 32ff 	add.w	r2, r2, #4294967295
    7ef8:	b292      	uxth	r2, r2
    7efa:	805a      	strh	r2, [r3, #2]
		return popped_byte;
    7efc:	5c20      	ldrb	r0, [r4, r0]
//	sd_count ++;
	return command_buffer.pop();
}
    7efe:	bc30      	pop	{r4, r5}
    7f00:	4770      	bx	lr
    7f02:	bf00      	nop

00007f04 <command::pop16()>:

int16_t pop16() {
    7f04:	b470      	push	{r4, r5, r6}
		return size - length;
	}

	/// Check if the buffer is empty
	inline const bool isEmpty() const {
		return length == 0;
    7f06:	f641 1340 	movw	r3, #6464	; 0x1940
    7f0a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7f0e:	885b      	ldrh	r3, [r3, #2]
    7f10:	b29b      	uxth	r3, r3
			overflow = true;
		}
	}
	/// Pop a byte off the head of the buffer
	inline BufDataType pop() {
		if (isEmpty()) {
    7f12:	b94b      	cbnz	r3, 7f28 <command::pop16()+0x24>
			underflow = true;
    7f14:	f641 1340 	movw	r3, #6464	; 0x1940
    7f18:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7f1c:	f04f 0201 	mov.w	r2, #1
    7f20:	735a      	strb	r2, [r3, #13]
			return BufDataType();
    7f22:	f04f 0300 	mov.w	r3, #0
    7f26:	e01c      	b.n	7f62 <command::pop16()+0x5e>
	inline const bool isEmpty() const {
		return length == 0;
	}
	/// Read the buffer directly
	inline BufDataType& operator[](BufSizeType index) {
		const BufSizeType actual_index = (index + start) % size;
    7f28:	f641 1340 	movw	r3, #6464	; 0x1940
    7f2c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7f30:	8899      	ldrh	r1, [r3, #4]
    7f32:	b289      	uxth	r1, r1
    7f34:	881a      	ldrh	r2, [r3, #0]
    7f36:	fb91 f0f2 	sdiv	r0, r1, r2
    7f3a:	fb02 1110 	mls	r1, r2, r0, r1
		return data[actual_index];
    7f3e:	b288      	uxth	r0, r1
    7f40:	689c      	ldr	r4, [r3, #8]
		if (isEmpty()) {
			underflow = true;
			return BufDataType();
		}
		const BufDataType& popped_byte = operator[](0);
		start = (start + 1) % size;
    7f42:	8899      	ldrh	r1, [r3, #4]
    7f44:	b289      	uxth	r1, r1
    7f46:	f101 0101 	add.w	r1, r1, #1
    7f4a:	fb91 f5f2 	sdiv	r5, r1, r2
    7f4e:	fb02 1215 	mls	r2, r2, r5, r1
    7f52:	b292      	uxth	r2, r2
    7f54:	809a      	strh	r2, [r3, #4]
		length--;
    7f56:	885a      	ldrh	r2, [r3, #2]
    7f58:	f102 32ff 	add.w	r2, r2, #4294967295
    7f5c:	b292      	uxth	r2, r2
    7f5e:	805a      	strh	r2, [r3, #2]
		return popped_byte;
    7f60:	5c23      	ldrb	r3, [r4, r0]
		int16_t a;
		struct {
			uint8_t data[2];
		} b;
	} shared;
	shared.b.data[0] = command_buffer.pop();
    7f62:	f04f 0000 	mov.w	r0, #0
    7f66:	f363 0007 	bfi	r0, r3, #0, #8
		return size - length;
	}

	/// Check if the buffer is empty
	inline const bool isEmpty() const {
		return length == 0;
    7f6a:	f641 1340 	movw	r3, #6464	; 0x1940
    7f6e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7f72:	885b      	ldrh	r3, [r3, #2]
    7f74:	b29b      	uxth	r3, r3
			overflow = true;
		}
	}
	/// Pop a byte off the head of the buffer
	inline BufDataType pop() {
		if (isEmpty()) {
    7f76:	b94b      	cbnz	r3, 7f8c <command::pop16()+0x88>
			underflow = true;
    7f78:	f641 1340 	movw	r3, #6464	; 0x1940
    7f7c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7f80:	f04f 0201 	mov.w	r2, #1
    7f84:	735a      	strb	r2, [r3, #13]
			return BufDataType();
    7f86:	f04f 0300 	mov.w	r3, #0
    7f8a:	e01c      	b.n	7fc6 <command::pop16()+0xc2>
	inline const bool isEmpty() const {
		return length == 0;
	}
	/// Read the buffer directly
	inline BufDataType& operator[](BufSizeType index) {
		const BufSizeType actual_index = (index + start) % size;
    7f8c:	f641 1340 	movw	r3, #6464	; 0x1940
    7f90:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7f94:	8899      	ldrh	r1, [r3, #4]
    7f96:	b289      	uxth	r1, r1
    7f98:	881a      	ldrh	r2, [r3, #0]
    7f9a:	fb91 f4f2 	sdiv	r4, r1, r2
    7f9e:	fb02 1114 	mls	r1, r2, r4, r1
		return data[actual_index];
    7fa2:	b28c      	uxth	r4, r1
    7fa4:	689d      	ldr	r5, [r3, #8]
		if (isEmpty()) {
			underflow = true;
			return BufDataType();
		}
		const BufDataType& popped_byte = operator[](0);
		start = (start + 1) % size;
    7fa6:	8899      	ldrh	r1, [r3, #4]
    7fa8:	b289      	uxth	r1, r1
    7faa:	f101 0101 	add.w	r1, r1, #1
    7fae:	fb91 f6f2 	sdiv	r6, r1, r2
    7fb2:	fb02 1216 	mls	r2, r2, r6, r1
    7fb6:	b292      	uxth	r2, r2
    7fb8:	809a      	strh	r2, [r3, #4]
		length--;
    7fba:	885a      	ldrh	r2, [r3, #2]
    7fbc:	f102 32ff 	add.w	r2, r2, #4294967295
    7fc0:	b292      	uxth	r2, r2
    7fc2:	805a      	strh	r2, [r3, #2]
		return popped_byte;
    7fc4:	5d2b      	ldrb	r3, [r5, r4]
	shared.b.data[1] = command_buffer.pop();
    7fc6:	f363 200f 	bfi	r0, r3, #8, #8
//	sd_count+=2;
	return shared.a;
}
    7fca:	b200      	sxth	r0, r0
    7fcc:	bc70      	pop	{r4, r5, r6}
    7fce:	4770      	bx	lr

00007fd0 <command::pop32()>:

int32_t pop32() {
    7fd0:	b470      	push	{r4, r5, r6}
		return size - length;
	}

	/// Check if the buffer is empty
	inline const bool isEmpty() const {
		return length == 0;
    7fd2:	f641 1340 	movw	r3, #6464	; 0x1940
    7fd6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7fda:	885b      	ldrh	r3, [r3, #2]
    7fdc:	b29b      	uxth	r3, r3
			overflow = true;
		}
	}
	/// Pop a byte off the head of the buffer
	inline BufDataType pop() {
		if (isEmpty()) {
    7fde:	b94b      	cbnz	r3, 7ff4 <command::pop32()+0x24>
			underflow = true;
    7fe0:	f641 1340 	movw	r3, #6464	; 0x1940
    7fe4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7fe8:	f04f 0201 	mov.w	r2, #1
    7fec:	735a      	strb	r2, [r3, #13]
			return BufDataType();
    7fee:	f04f 0300 	mov.w	r3, #0
    7ff2:	e01c      	b.n	802e <command::pop32()+0x5e>
	inline const bool isEmpty() const {
		return length == 0;
	}
	/// Read the buffer directly
	inline BufDataType& operator[](BufSizeType index) {
		const BufSizeType actual_index = (index + start) % size;
    7ff4:	f641 1340 	movw	r3, #6464	; 0x1940
    7ff8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    7ffc:	8899      	ldrh	r1, [r3, #4]
    7ffe:	b289      	uxth	r1, r1
    8000:	881a      	ldrh	r2, [r3, #0]
    8002:	fb91 f0f2 	sdiv	r0, r1, r2
    8006:	fb02 1110 	mls	r1, r2, r0, r1
		return data[actual_index];
    800a:	b288      	uxth	r0, r1
    800c:	689c      	ldr	r4, [r3, #8]
		if (isEmpty()) {
			underflow = true;
			return BufDataType();
		}
		const BufDataType& popped_byte = operator[](0);
		start = (start + 1) % size;
    800e:	8899      	ldrh	r1, [r3, #4]
    8010:	b289      	uxth	r1, r1
    8012:	f101 0101 	add.w	r1, r1, #1
    8016:	fb91 f5f2 	sdiv	r5, r1, r2
    801a:	fb02 1215 	mls	r2, r2, r5, r1
    801e:	b292      	uxth	r2, r2
    8020:	809a      	strh	r2, [r3, #4]
		length--;
    8022:	885a      	ldrh	r2, [r3, #2]
    8024:	f102 32ff 	add.w	r2, r2, #4294967295
    8028:	b292      	uxth	r2, r2
    802a:	805a      	strh	r2, [r3, #2]
		return popped_byte;
    802c:	5c23      	ldrb	r3, [r4, r0]
		int32_t a;
		struct {
			uint8_t data[4];
		} b;
	} shared;
	shared.b.data[0] = command_buffer.pop();
    802e:	f04f 0000 	mov.w	r0, #0
    8032:	f363 0007 	bfi	r0, r3, #0, #8
		return size - length;
	}

	/// Check if the buffer is empty
	inline const bool isEmpty() const {
		return length == 0;
    8036:	f641 1340 	movw	r3, #6464	; 0x1940
    803a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    803e:	885b      	ldrh	r3, [r3, #2]
    8040:	b29b      	uxth	r3, r3
			overflow = true;
		}
	}
	/// Pop a byte off the head of the buffer
	inline BufDataType pop() {
		if (isEmpty()) {
    8042:	b94b      	cbnz	r3, 8058 <command::pop32()+0x88>
			underflow = true;
    8044:	f641 1340 	movw	r3, #6464	; 0x1940
    8048:	f2c1 0300 	movt	r3, #4096	; 0x1000
    804c:	f04f 0201 	mov.w	r2, #1
    8050:	735a      	strb	r2, [r3, #13]
			return BufDataType();
    8052:	f04f 0300 	mov.w	r3, #0
    8056:	e01c      	b.n	8092 <command::pop32()+0xc2>
	inline const bool isEmpty() const {
		return length == 0;
	}
	/// Read the buffer directly
	inline BufDataType& operator[](BufSizeType index) {
		const BufSizeType actual_index = (index + start) % size;
    8058:	f641 1340 	movw	r3, #6464	; 0x1940
    805c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8060:	8899      	ldrh	r1, [r3, #4]
    8062:	b289      	uxth	r1, r1
    8064:	881a      	ldrh	r2, [r3, #0]
    8066:	fb91 f4f2 	sdiv	r4, r1, r2
    806a:	fb02 1114 	mls	r1, r2, r4, r1
		return data[actual_index];
    806e:	b28c      	uxth	r4, r1
    8070:	689d      	ldr	r5, [r3, #8]
		if (isEmpty()) {
			underflow = true;
			return BufDataType();
		}
		const BufDataType& popped_byte = operator[](0);
		start = (start + 1) % size;
    8072:	8899      	ldrh	r1, [r3, #4]
    8074:	b289      	uxth	r1, r1
    8076:	f101 0101 	add.w	r1, r1, #1
    807a:	fb91 f6f2 	sdiv	r6, r1, r2
    807e:	fb02 1216 	mls	r2, r2, r6, r1
    8082:	b292      	uxth	r2, r2
    8084:	809a      	strh	r2, [r3, #4]
		length--;
    8086:	885a      	ldrh	r2, [r3, #2]
    8088:	f102 32ff 	add.w	r2, r2, #4294967295
    808c:	b292      	uxth	r2, r2
    808e:	805a      	strh	r2, [r3, #2]
		return popped_byte;
    8090:	5d2b      	ldrb	r3, [r5, r4]
	shared.b.data[1] = command_buffer.pop();
    8092:	f363 200f 	bfi	r0, r3, #8, #8
		return size - length;
	}

	/// Check if the buffer is empty
	inline const bool isEmpty() const {
		return length == 0;
    8096:	f641 1340 	movw	r3, #6464	; 0x1940
    809a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    809e:	885b      	ldrh	r3, [r3, #2]
    80a0:	b29b      	uxth	r3, r3
			overflow = true;
		}
	}
	/// Pop a byte off the head of the buffer
	inline BufDataType pop() {
		if (isEmpty()) {
    80a2:	b94b      	cbnz	r3, 80b8 <command::pop32()+0xe8>
			underflow = true;
    80a4:	f641 1340 	movw	r3, #6464	; 0x1940
    80a8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    80ac:	f04f 0201 	mov.w	r2, #1
    80b0:	735a      	strb	r2, [r3, #13]
			return BufDataType();
    80b2:	f04f 0300 	mov.w	r3, #0
    80b6:	e01c      	b.n	80f2 <command::pop32()+0x122>
	inline const bool isEmpty() const {
		return length == 0;
	}
	/// Read the buffer directly
	inline BufDataType& operator[](BufSizeType index) {
		const BufSizeType actual_index = (index + start) % size;
    80b8:	f641 1340 	movw	r3, #6464	; 0x1940
    80bc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    80c0:	8899      	ldrh	r1, [r3, #4]
    80c2:	b289      	uxth	r1, r1
    80c4:	881a      	ldrh	r2, [r3, #0]
    80c6:	fb91 f4f2 	sdiv	r4, r1, r2
    80ca:	fb02 1114 	mls	r1, r2, r4, r1
		return data[actual_index];
    80ce:	b28c      	uxth	r4, r1
    80d0:	689d      	ldr	r5, [r3, #8]
		if (isEmpty()) {
			underflow = true;
			return BufDataType();
		}
		const BufDataType& popped_byte = operator[](0);
		start = (start + 1) % size;
    80d2:	8899      	ldrh	r1, [r3, #4]
    80d4:	b289      	uxth	r1, r1
    80d6:	f101 0101 	add.w	r1, r1, #1
    80da:	fb91 f6f2 	sdiv	r6, r1, r2
    80de:	fb02 1216 	mls	r2, r2, r6, r1
    80e2:	b292      	uxth	r2, r2
    80e4:	809a      	strh	r2, [r3, #4]
		length--;
    80e6:	885a      	ldrh	r2, [r3, #2]
    80e8:	f102 32ff 	add.w	r2, r2, #4294967295
    80ec:	b292      	uxth	r2, r2
    80ee:	805a      	strh	r2, [r3, #2]
		return popped_byte;
    80f0:	5d2b      	ldrb	r3, [r5, r4]
	shared.b.data[2] = command_buffer.pop();
    80f2:	f363 4017 	bfi	r0, r3, #16, #8
		return size - length;
	}

	/// Check if the buffer is empty
	inline const bool isEmpty() const {
		return length == 0;
    80f6:	f641 1340 	movw	r3, #6464	; 0x1940
    80fa:	f2c1 0300 	movt	r3, #4096	; 0x1000
    80fe:	885b      	ldrh	r3, [r3, #2]
    8100:	b29b      	uxth	r3, r3
			overflow = true;
		}
	}
	/// Pop a byte off the head of the buffer
	inline BufDataType pop() {
		if (isEmpty()) {
    8102:	b94b      	cbnz	r3, 8118 <command::pop32()+0x148>
			underflow = true;
    8104:	f641 1340 	movw	r3, #6464	; 0x1940
    8108:	f2c1 0300 	movt	r3, #4096	; 0x1000
    810c:	f04f 0201 	mov.w	r2, #1
    8110:	735a      	strb	r2, [r3, #13]
			return BufDataType();
    8112:	f04f 0300 	mov.w	r3, #0
    8116:	e01c      	b.n	8152 <command::pop32()+0x182>
	inline const bool isEmpty() const {
		return length == 0;
	}
	/// Read the buffer directly
	inline BufDataType& operator[](BufSizeType index) {
		const BufSizeType actual_index = (index + start) % size;
    8118:	f641 1340 	movw	r3, #6464	; 0x1940
    811c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8120:	8899      	ldrh	r1, [r3, #4]
    8122:	b289      	uxth	r1, r1
    8124:	881a      	ldrh	r2, [r3, #0]
    8126:	fb91 f4f2 	sdiv	r4, r1, r2
    812a:	fb02 1114 	mls	r1, r2, r4, r1
		return data[actual_index];
    812e:	b28c      	uxth	r4, r1
    8130:	689d      	ldr	r5, [r3, #8]
		if (isEmpty()) {
			underflow = true;
			return BufDataType();
		}
		const BufDataType& popped_byte = operator[](0);
		start = (start + 1) % size;
    8132:	8899      	ldrh	r1, [r3, #4]
    8134:	b289      	uxth	r1, r1
    8136:	f101 0101 	add.w	r1, r1, #1
    813a:	fb91 f6f2 	sdiv	r6, r1, r2
    813e:	fb02 1216 	mls	r2, r2, r6, r1
    8142:	b292      	uxth	r2, r2
    8144:	809a      	strh	r2, [r3, #4]
		length--;
    8146:	885a      	ldrh	r2, [r3, #2]
    8148:	f102 32ff 	add.w	r2, r2, #4294967295
    814c:	b292      	uxth	r2, r2
    814e:	805a      	strh	r2, [r3, #2]
		return popped_byte;
    8150:	5d2b      	ldrb	r3, [r5, r4]
	shared.b.data[3] = command_buffer.pop();
    8152:	f363 601f 	bfi	r0, r3, #24, #8
//	sd_count+=4;
	return shared.a;
}
    8156:	bc70      	pop	{r4, r5, r6}
    8158:	4770      	bx	lr
    815a:	bf00      	nop

0000815c <command::handleMovementCommand(unsigned char const&)>:
	line_number = 0;
}


// Handle movement comands -- called from a few places
static void handleMovementCommand(const uint8_t &command) {
    815c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8160:	b08f      	sub	sp, #60	; 0x3c
    8162:	4604      	mov	r4, r0
	// if we're already moving, check to make sure the buffer isn't full
	if (/*mode == MOVING && */planner::isBufferFull()) {
    8164:	f004 fb3a 	bl	c7dc <planner::isBufferFull()>
    8168:	2800      	cmp	r0, #0
    816a:	f040 8085 	bne.w	8278 <command::handleMovementCommand(unsigned char const&)+0x11c>
		return; // we'll be back!
	}
	if (command == HOST_CMD_QUEUE_POINT_EXT) {
    816e:	7823      	ldrb	r3, [r4, #0]
    8170:	2b8b      	cmp	r3, #139	; 0x8b
    8172:	d13d      	bne.n	81f0 <command::handleMovementCommand(unsigned char const&)+0x94>
		length -= sz;
	}

	/// Get the length of the buffer
	inline const BufSizeType getLength() const {
		return length;
    8174:	f641 1340 	movw	r3, #6464	; 0x1940
    8178:	f2c1 0300 	movt	r3, #4096	; 0x1000
    817c:	885b      	ldrh	r3, [r3, #2]
    817e:	b29b      	uxth	r3, r3
		// check for completion
		if (command_buffer.getLength() >= 25) {
    8180:	2b18      	cmp	r3, #24
    8182:	d979      	bls.n	8278 <command::handleMovementCommand(unsigned char const&)+0x11c>
			Motherboard::getBoard().resetUserInputTimeout();
    8184:	f641 309c 	movw	r0, #7068	; 0x1b9c
    8188:	f2c1 0000 	movt	r0, #4096	; 0x1000
    818c:	f003 f91c 	bl	b3c8 <Motherboard::resetUserInputTimeout()>
			pop8(); // remove the command code
    8190:	f7ff fe86 	bl	7ea0 <command::pop8()>
			mode = MOVING;
    8194:	f640 03e6 	movw	r3, #2278	; 0x8e6
    8198:	f2c1 0300 	movt	r3, #4096	; 0x1000
    819c:	f04f 0201 	mov.w	r2, #1
    81a0:	701a      	strb	r2, [r3, #0]

			int32_t x = pop32();
    81a2:	f7ff ff15 	bl	7fd0 <command::pop32()>
    81a6:	4606      	mov	r6, r0
			int32_t y = pop32();
    81a8:	f7ff ff12 	bl	7fd0 <command::pop32()>
    81ac:	4607      	mov	r7, r0
			int32_t z = pop32();
    81ae:	f7ff ff0f 	bl	7fd0 <command::pop32()>
    81b2:	4680      	mov	r8, r0
			int32_t a = pop32();
    81b4:	f7ff ff0c 	bl	7fd0 <command::pop32()>
    81b8:	4605      	mov	r5, r0
			int32_t b = pop32();
    81ba:	f7ff ff09 	bl	7fd0 <command::pop32()>
    81be:	4604      	mov	r4, r0
			int32_t dda = pop32();
    81c0:	f7ff ff06 	bl	7fd0 <command::pop32()>
    81c4:	9003      	str	r0, [sp, #12]

			line_number++;
    81c6:	f641 1350 	movw	r3, #6480	; 0x1950
    81ca:	f2c1 0300 	movt	r3, #4096	; 0x1000
    81ce:	681a      	ldr	r2, [r3, #0]
    81d0:	f102 0201 	add.w	r2, r2, #1
    81d4:	601a      	str	r2, [r3, #0]
		
			planner::addMoveToBuffer(Point(x,y,z,a,b), dda);
    81d6:	9500      	str	r5, [sp, #0]
    81d8:	9401      	str	r4, [sp, #4]
    81da:	a804      	add	r0, sp, #16
    81dc:	4631      	mov	r1, r6
    81de:	463a      	mov	r2, r7
    81e0:	4643      	mov	r3, r8
    81e2:	f005 f97b 	bl	d4dc <Point::Point(long, long, long, long, long)>
    81e6:	a804      	add	r0, sp, #16
    81e8:	a903      	add	r1, sp, #12
    81ea:	f004 fe13 	bl	ce14 <planner::addMoveToBuffer(Point const&, long const&)>
    81ee:	e043      	b.n	8278 <command::handleMovementCommand(unsigned char const&)+0x11c>
		}
	}
	 else if (command == HOST_CMD_QUEUE_POINT_NEW) {
    81f0:	2b8e      	cmp	r3, #142	; 0x8e
    81f2:	d141      	bne.n	8278 <command::handleMovementCommand(unsigned char const&)+0x11c>
    81f4:	f641 1340 	movw	r3, #6464	; 0x1940
    81f8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    81fc:	885b      	ldrh	r3, [r3, #2]
    81fe:	b29b      	uxth	r3, r3
		// check for completion
		if (command_buffer.getLength() >= 26) {
    8200:	2b19      	cmp	r3, #25
    8202:	d939      	bls.n	8278 <command::handleMovementCommand(unsigned char const&)+0x11c>
			Motherboard::getBoard().resetUserInputTimeout();
    8204:	f641 309c 	movw	r0, #7068	; 0x1b9c
    8208:	f2c1 0000 	movt	r0, #4096	; 0x1000
    820c:	f003 f8dc 	bl	b3c8 <Motherboard::resetUserInputTimeout()>
			pop8(); // remove the command code
    8210:	f7ff fe46 	bl	7ea0 <command::pop8()>
			mode = MOVING;
    8214:	f640 03e6 	movw	r3, #2278	; 0x8e6
    8218:	f2c1 0300 	movt	r3, #4096	; 0x1000
    821c:	f04f 0201 	mov.w	r2, #1
    8220:	701a      	strb	r2, [r3, #0]
			
			int32_t x = pop32();
    8222:	f7ff fed5 	bl	7fd0 <command::pop32()>
    8226:	4606      	mov	r6, r0
			int32_t y = pop32();
    8228:	f7ff fed2 	bl	7fd0 <command::pop32()>
    822c:	4607      	mov	r7, r0
			int32_t z = pop32();
    822e:	f7ff fecf 	bl	7fd0 <command::pop32()>
    8232:	4680      	mov	r8, r0
			int32_t a = pop32();
    8234:	f7ff fecc 	bl	7fd0 <command::pop32()>
    8238:	4605      	mov	r5, r0
			int32_t b = pop32();
    823a:	f7ff fec9 	bl	7fd0 <command::pop32()>
    823e:	4604      	mov	r4, r0
			int32_t us = pop32();
    8240:	f7ff fec6 	bl	7fd0 <command::pop32()>
    8244:	9003      	str	r0, [sp, #12]
			int32_t relative = pop8();
    8246:	f7ff fe2b 	bl	7ea0 <command::pop8()>
    824a:	4681      	mov	r9, r0

			line_number++;
    824c:	f641 1350 	movw	r3, #6480	; 0x1950
    8250:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8254:	681a      	ldr	r2, [r3, #0]
    8256:	f102 0201 	add.w	r2, r2, #1
    825a:	601a      	str	r2, [r3, #0]
			
			planner::addMoveToBufferRelative(Point(x,y,z,a,b), us, relative);
    825c:	9500      	str	r5, [sp, #0]
    825e:	9401      	str	r4, [sp, #4]
    8260:	a809      	add	r0, sp, #36	; 0x24
    8262:	4631      	mov	r1, r6
    8264:	463a      	mov	r2, r7
    8266:	4643      	mov	r3, r8
    8268:	f005 f938 	bl	d4dc <Point::Point(long, long, long, long, long)>
    826c:	a809      	add	r0, sp, #36	; 0x24
    826e:	a903      	add	r1, sp, #12
    8270:	fa4f f289 	sxtb.w	r2, r9
    8274:	f004 fe16 	bl	cea4 <planner::addMoveToBufferRelative(Point const&, long const&, signed char)>
		}
	}
	
}
    8278:	b00f      	add	sp, #60	; 0x3c
    827a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    827e:	bf00      	nop

00008280 <command::reset()>:
	}

	/// Reset the buffer to its empty state.  All data in
	/// the buffer will be (effectively) lost.
	inline void reset() {
		length = 0;
    8280:	f641 1240 	movw	r2, #6464	; 0x1940
    8284:	f2c1 0200 	movt	r2, #4096	; 0x1000
    8288:	f04f 0100 	mov.w	r1, #0
    828c:	8051      	strh	r1, [r2, #2]
		start = 0;
    828e:	8091      	strh	r1, [r2, #4]
		overflow = false;
    8290:	7311      	strb	r1, [r2, #12]
		underflow = false;
    8292:	7351      	strb	r1, [r2, #13]

bool sdcard_reset = false;

void reset() {
	command_buffer.reset();
	line_number = 0;
    8294:	f641 1250 	movw	r2, #6480	; 0x1950
    8298:	f2c1 0200 	movt	r2, #4096	; 0x1000
    829c:	6011      	str	r1, [r2, #0]
	check_temp_state = false;
    829e:	f640 02e4 	movw	r2, #2276	; 0x8e4
    82a2:	f2c1 0200 	movt	r2, #4096	; 0x1000
    82a6:	7011      	strb	r1, [r2, #0]
	paused = false;
    82a8:	f641 1268 	movw	r2, #6504	; 0x1968
    82ac:	f2c1 0200 	movt	r2, #4096	; 0x1000
    82b0:	7011      	strb	r1, [r2, #0]
	sd_count = 0;
    82b2:	f640 02f8 	movw	r2, #2296	; 0x8f8
    82b6:	f2c1 0200 	movt	r2, #4096	; 0x1000
    82ba:	6011      	str	r1, [r2, #0]
	sdcard_reset = false;
    82bc:	f641 1254 	movw	r2, #6484	; 0x1954
    82c0:	f2c1 0200 	movt	r2, #4096	; 0x1000
    82c4:	7011      	strb	r1, [r2, #0]
	mode = READY;
    82c6:	f640 02e6 	movw	r2, #2278	; 0x8e6
    82ca:	f2c1 0200 	movt	r2, #4096	; 0x1000
    82ce:	7011      	strb	r1, [r2, #0]
}
    82d0:	4770      	bx	lr
    82d2:	bf00      	nop

000082d4 <command::getLineNumber()>:
bool isReady() {
    return (mode == READY);
}

uint32_t getLineNumber() {
	return line_number;	
    82d4:	f641 1350 	movw	r3, #6480	; 0x1950
    82d8:	f2c1 0300 	movt	r3, #4096	; 0x1000
}
    82dc:	6818      	ldr	r0, [r3, #0]
    82de:	4770      	bx	lr

000082e0 <command::clearLineNumber()>:

void clearLineNumber() {
	line_number = 0;
    82e0:	f641 1350 	movw	r3, #6480	; 0x1950
    82e4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    82e8:	f04f 0200 	mov.w	r2, #0
    82ec:	601a      	str	r2, [r3, #0]
}
    82ee:	4770      	bx	lr

000082f0 <command::processExtruderCommandPacket()>:
		}
	}
	
}

bool processExtruderCommandPacket() {
    82f0:	b538      	push	{r3, r4, r5, lr}
	Motherboard& board = Motherboard::getBoard();
        uint8_t	id = pop8();
    82f2:	f7ff fdd5 	bl	7ea0 <command::pop8()>
    82f6:	4605      	mov	r5, r0
		uint8_t command = pop8();
    82f8:	f7ff fdd2 	bl	7ea0 <command::pop8()>
    82fc:	4604      	mov	r4, r0
		uint8_t length = pop8();
    82fe:	f7ff fdcf 	bl	7ea0 <command::pop8()>

		switch (command) {
    8302:	f1a4 0403 	sub.w	r4, r4, #3
    8306:	2c1c      	cmp	r4, #28
    8308:	f200 80d1 	bhi.w	84ae <command::processExtruderCommandPacket()+0x1be>
    830c:	e8df f014 	tbh	[pc, r4, lsl #1]
    8310:	00a7001d 	.word	0x00a7001d
    8314:	00bb00ac 	.word	0x00bb00ac
    8318:	00b100c0 	.word	0x00b100c0
    831c:	009d00b6 	.word	0x009d00b6
    8320:	005600a2 	.word	0x005600a2
    8324:	00c50067 	.word	0x00c50067
    8328:	00cf00ca 	.word	0x00cf00ca
    832c:	00cf00cf 	.word	0x00cf00cf
    8330:	00cf00cf 	.word	0x00cf00cf
    8334:	00cf00cf 	.word	0x00cf00cf
    8338:	00cf004c 	.word	0x00cf004c
    833c:	00cf00cf 	.word	0x00cf00cf
    8340:	00cf00cf 	.word	0x00cf00cf
    8344:	00cf00cf 	.word	0x00cf00cf
    8348:	0074      	.short	0x0074
        static Motherboard motherboard;

public:
        /// Get the motherboard instance.
        static Motherboard& getBoard() { return motherboard; }
       ExtruderBoard& getExtruderBoard(uint8_t id) { if(id == 1){ return Extruder_Two;} else  { return Extruder_One;} }
    834a:	4b62      	ldr	r3, [pc, #392]	; (84d4 <command::processExtruderCommandPacket()+0x1e4>)
    834c:	f1a3 04e0 	sub.w	r4, r3, #224	; 0xe0
    8350:	2d01      	cmp	r5, #1
    8352:	bf08      	it	eq
    8354:	461c      	moveq	r4, r3
		case SLAVE_CMD_SET_TEMP:
			board.getExtruderBoard(id).getExtruderHeater().set_target_temperature(pop16());
    8356:	f7ff fdd5 	bl	7f04 <command::pop16()>
    835a:	4601      	mov	r1, r0
    835c:	f104 0028 	add.w	r0, r4, #40	; 0x28
    8360:	f008 f9b6 	bl	106d0 <Heater::set_target_temperature(int)>
			/// if platform is actively heating and extruder is not cooling down, pause extruder
			if(board.getPlatformHeater().isHeating() && !board.getPlatformHeater().isCooling() && !board.getExtruderBoard(id).getExtruderHeater().isCooling()){
    8364:	485c      	ldr	r0, [pc, #368]	; (84d8 <command::processExtruderCommandPacket()+0x1e8>)
    8366:	f008 fa45 	bl	107f4 <Heater::isHeating()>
    836a:	2800      	cmp	r0, #0
    836c:	f000 80a2 	beq.w	84b4 <command::processExtruderCommandPacket()+0x1c4>
    8370:	4859      	ldr	r0, [pc, #356]	; (84d8 <command::processExtruderCommandPacket()+0x1e8>)
    8372:	f008 fa53 	bl	1081c <Heater::isCooling()>
    8376:	2800      	cmp	r0, #0
    8378:	f040 809c 	bne.w	84b4 <command::processExtruderCommandPacket()+0x1c4>
    837c:	f104 0028 	add.w	r0, r4, #40	; 0x28
    8380:	f008 fa4c 	bl	1081c <Heater::isCooling()>
    8384:	2800      	cmp	r0, #0
    8386:	f040 8095 	bne.w	84b4 <command::processExtruderCommandPacket()+0x1c4>
				check_temp_state = true;
    838a:	f640 03e4 	movw	r3, #2276	; 0x8e4
    838e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8392:	f04f 0201 	mov.w	r2, #1
    8396:	701a      	strb	r2, [r3, #0]
				board.getExtruderBoard(id).getExtruderHeater().Pause(true);
    8398:	f104 0028 	add.w	r0, r4, #40	; 0x28
    839c:	4611      	mov	r1, r2
    839e:	f008 fa5b 	bl	10858 <Heater::Pause(bool)>
			}  /// else ensure extruder is not paused  
			else {
				board.getExtruderBoard(id).getExtruderHeater().Pause(false);
			}
			return true;
    83a2:	f04f 0001 	mov.w	r0, #1
    83a6:	bd38      	pop	{r3, r4, r5, pc}
		// can be removed in process via host query works OK
 		case SLAVE_CMD_PAUSE_UNPAUSE:
			host::pauseBuild(!command::isPaused());
    83a8:	f7ff fd3e 	bl	7e28 <command::isPaused()>
    83ac:	f080 0001 	eor.w	r0, r0, #1
    83b0:	b2c0      	uxtb	r0, r0
    83b2:	f001 fdc3 	bl	9f3c <host::pauseBuild(bool)>
			return true;
    83b6:	f04f 0001 	mov.w	r0, #1
    83ba:	bd38      	pop	{r3, r4, r5, pc}
    83bc:	4b45      	ldr	r3, [pc, #276]	; (84d4 <command::processExtruderCommandPacket()+0x1e4>)
    83be:	f1a3 02e0 	sub.w	r2, r3, #224	; 0xe0
    83c2:	2d01      	cmp	r5, #1
    83c4:	bf14      	ite	ne
    83c6:	4615      	movne	r5, r2
    83c8:	461d      	moveq	r5, r3
		case SLAVE_CMD_TOGGLE_FAN:
			board.getExtruderBoard(id).setFan((pop8() & 0x01) != 0);
    83ca:	f7ff fd69 	bl	7ea0 <command::pop8()>
    83ce:	f000 0101 	and.w	r1, r0, #1
    83d2:	4628      	mov	r0, r5
    83d4:	f001 fb54 	bl	9a80 <ExtruderBoard::setFan(unsigned char)>
			return true;
    83d8:	f04f 0001 	mov.w	r0, #1
    83dc:	bd38      	pop	{r3, r4, r5, pc}
		case SLAVE_CMD_TOGGLE_VALVE:
			board.setValve((pop8() & 0x01) != 0);
    83de:	f7ff fd5f 	bl	7ea0 <command::pop8()>
    83e2:	f000 0101 	and.w	r1, r0, #1
    83e6:	f641 309c 	movw	r0, #7068	; 0x1b9c
    83ea:	f2c1 0000 	movt	r0, #4096	; 0x1000
    83ee:	f003 fc95 	bl	bd1c <Motherboard::setValve(bool)>
			return true;
    83f2:	f04f 0001 	mov.w	r0, #1
    83f6:	bd38      	pop	{r3, r4, r5, pc}
		case SLAVE_CMD_SET_PLATFORM_TEMP:
			board.setUsingPlatform(true);
    83f8:	f641 349c 	movw	r4, #7068	; 0x1b9c
    83fc:	f2c1 0400 	movt	r4, #4096	; 0x1000
    8400:	4620      	mov	r0, r4
    8402:	f04f 0101 	mov.w	r1, #1
    8406:	f003 fc85 	bl	bd14 <Motherboard::setUsingPlatform(bool)>
			board.getPlatformHeater().set_target_temperature(pop16());
    840a:	f7ff fd7b 	bl	7f04 <command::pop16()>
    840e:	4601      	mov	r1, r0
    8410:	f504 7503 	add.w	r5, r4, #524	; 0x20c
    8414:	4628      	mov	r0, r5
    8416:	f008 f95b 	bl	106d0 <Heater::set_target_temperature(int)>
			// pause extruder heaters platform is heating up
			bool pause_state; /// avr-gcc doesn't allow cross-initializtion of variables within a switch statement
			pause_state = false;
			if(!board.getPlatformHeater().isCooling()){
    841a:	4628      	mov	r0, r5
    841c:	f008 f9fe 	bl	1081c <Heater::isCooling()>
		}
	}
	
}

bool processExtruderCommandPacket() {
    8420:	f080 0001 	eor.w	r0, r0, #1
    8424:	b2c5      	uxtb	r5, r0
			bool pause_state; /// avr-gcc doesn't allow cross-initializtion of variables within a switch statement
			pause_state = false;
			if(!board.getPlatformHeater().isCooling()){
				pause_state = true;
			}
			check_temp_state = pause_state;
    8426:	f640 03e4 	movw	r3, #2276	; 0x8e4
    842a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    842e:	701d      	strb	r5, [r3, #0]
			board.getExtruderBoard(0).getExtruderHeater().Pause(pause_state);
    8430:	f104 0050 	add.w	r0, r4, #80	; 0x50
    8434:	4629      	mov	r1, r5
    8436:	f008 fa0f 	bl	10858 <Heater::Pause(bool)>
			board.getExtruderBoard(1).getExtruderHeater().Pause(pause_state);
    843a:	f504 7098 	add.w	r0, r4, #304	; 0x130
    843e:	4629      	mov	r1, r5
    8440:	f008 fa0a 	bl	10858 <Heater::Pause(bool)>
			
			return true;
    8444:	f04f 0001 	mov.w	r0, #1
    8448:	bd38      	pop	{r3, r4, r5, pc}
        // not being used with 5D
		case SLAVE_CMD_TOGGLE_MOTOR_1:
			pop8();
    844a:	f7ff fd29 	bl	7ea0 <command::pop8()>
			return true;
    844e:	f04f 0001 	mov.w	r0, #1
    8452:	bd38      	pop	{r3, r4, r5, pc}
        // not being used with 5D
		case SLAVE_CMD_TOGGLE_MOTOR_2: 
			pop8();
    8454:	f7ff fd24 	bl	7ea0 <command::pop8()>
			return true;
    8458:	f04f 0001 	mov.w	r0, #1
    845c:	bd38      	pop	{r3, r4, r5, pc}
		case SLAVE_CMD_SET_MOTOR_1_PWM:
			pop8();
    845e:	f7ff fd1f 	bl	7ea0 <command::pop8()>
			return true;
    8462:	f04f 0001 	mov.w	r0, #1
    8466:	bd38      	pop	{r3, r4, r5, pc}
		case SLAVE_CMD_SET_MOTOR_2_PWM:
			pop8();
    8468:	f7ff fd1a 	bl	7ea0 <command::pop8()>
			return true;
    846c:	f04f 0001 	mov.w	r0, #1
    8470:	bd38      	pop	{r3, r4, r5, pc}
		case SLAVE_CMD_SET_MOTOR_1_DIR:
			pop8();
    8472:	f7ff fd15 	bl	7ea0 <command::pop8()>
			return true;
    8476:	f04f 0001 	mov.w	r0, #1
    847a:	bd38      	pop	{r3, r4, r5, pc}
		case SLAVE_CMD_SET_MOTOR_2_DIR:
			pop8();
    847c:	f7ff fd10 	bl	7ea0 <command::pop8()>
			return true;
    8480:	f04f 0001 	mov.w	r0, #1
    8484:	bd38      	pop	{r3, r4, r5, pc}
		case SLAVE_CMD_SET_MOTOR_1_RPM:
			pop32();
    8486:	f7ff fda3 	bl	7fd0 <command::pop32()>
			return true;
    848a:	f04f 0001 	mov.w	r0, #1
    848e:	bd38      	pop	{r3, r4, r5, pc}
		case SLAVE_CMD_SET_MOTOR_2_RPM:
			pop32();
    8490:	f7ff fd9e 	bl	7fd0 <command::pop32()>
			return true;
    8494:	f04f 0001 	mov.w	r0, #1
    8498:	bd38      	pop	{r3, r4, r5, pc}
		case SLAVE_CMD_SET_SERVO_1_POS:
			pop8();
    849a:	f7ff fd01 	bl	7ea0 <command::pop8()>
			return true;
    849e:	f04f 0001 	mov.w	r0, #1
    84a2:	bd38      	pop	{r3, r4, r5, pc}
		case SLAVE_CMD_SET_SERVO_2_POS:
			pop8();
    84a4:	f7ff fcfc 	bl	7ea0 <command::pop8()>
			return true;
    84a8:	f04f 0001 	mov.w	r0, #1
    84ac:	bd38      	pop	{r3, r4, r5, pc}
		}
	return false;
    84ae:	f04f 0000 	mov.w	r0, #0
}
    84b2:	bd38      	pop	{r3, r4, r5, pc}
    84b4:	4b07      	ldr	r3, [pc, #28]	; (84d4 <command::processExtruderCommandPacket()+0x1e4>)
    84b6:	f1a3 00e0 	sub.w	r0, r3, #224	; 0xe0
    84ba:	2d01      	cmp	r5, #1
    84bc:	bf08      	it	eq
    84be:	4618      	moveq	r0, r3
			if(board.getPlatformHeater().isHeating() && !board.getPlatformHeater().isCooling() && !board.getExtruderBoard(id).getExtruderHeater().isCooling()){
				check_temp_state = true;
				board.getExtruderBoard(id).getExtruderHeater().Pause(true);
			}  /// else ensure extruder is not paused  
			else {
				board.getExtruderBoard(id).getExtruderHeater().Pause(false);
    84c0:	f100 0028 	add.w	r0, r0, #40	; 0x28
    84c4:	f04f 0100 	mov.w	r1, #0
    84c8:	f008 f9c6 	bl	10858 <Heater::Pause(bool)>
			}
			return true;
    84cc:	f04f 0001 	mov.w	r0, #1
    84d0:	bd38      	pop	{r3, r4, r5, pc}
    84d2:	bf00      	nop
    84d4:	10001ca4 	.word	0x10001ca4
    84d8:	10001da8 	.word	0x10001da8

000084dc <command::runCommandSlice()>:
	return false;
}


// A fast slice for processing commands and refilling the stepper queue, etc.
void runCommandSlice() {
    84dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    84e0:	b096      	sub	sp, #88	; 0x58
    // get command from SD card if building from SD
	if (sdcard::isPlaying()) {
    84e2:	f005 fc97 	bl	de14 <sdcard::isPlaying()>
    84e6:	b9a0      	cbnz	r0, 8512 <command::runCommandSlice()+0x36>
    84e8:	e063      	b.n	85b2 <command::runCommandSlice()+0xd6>
	}
	/// Append a byte to the tail of the buffer
	inline void push(BufDataType b) {
		if (length < size) {
			operator[](length) = b;
    84ea:	8861      	ldrh	r1, [r4, #2]
    84ec:	b289      	uxth	r1, r1
	inline const bool isEmpty() const {
		return length == 0;
	}
	/// Read the buffer directly
	inline BufDataType& operator[](BufSizeType index) {
		const BufSizeType actual_index = (index + start) % size;
    84ee:	88a2      	ldrh	r2, [r4, #4]
    84f0:	b292      	uxth	r2, r2
    84f2:	188a      	adds	r2, r1, r2
    84f4:	fb92 f1f3 	sdiv	r1, r2, r3
    84f8:	fb03 2311 	mls	r3, r3, r1, r2
		return data[actual_index];
    84fc:	b29b      	uxth	r3, r3
		underflow = false;
	}
	/// Append a byte to the tail of the buffer
	inline void push(BufDataType b) {
		if (length < size) {
			operator[](length) = b;
    84fe:	68a2      	ldr	r2, [r4, #8]
    8500:	54d0      	strb	r0, [r2, r3]
			length++;
    8502:	8863      	ldrh	r3, [r4, #2]
    8504:	f103 0301 	add.w	r3, r3, #1
    8508:	b29b      	uxth	r3, r3
    850a:	8063      	strh	r3, [r4, #2]
    850c:	e00b      	b.n	8526 <command::runCommandSlice()+0x4a>
		} else {
			overflow = true;
    850e:	7326      	strb	r6, [r4, #12]
    8510:	e009      	b.n	8526 <command::runCommandSlice()+0x4a>
		return length;
	}

	/// Get the remaining capacity of this buffer
	inline const BufSizeType getRemainingCapacity() const {
		return size - length;
    8512:	f641 1440 	movw	r4, #6464	; 0x1940
    8516:	f2c1 0400 	movt	r4, #4096	; 0x1000
		while (command_buffer.getRemainingCapacity() > 0 && sdcard::playbackHasNext()) {
			sd_count++;
    851a:	f640 05f8 	movw	r5, #2296	; 0x8f8
    851e:	f2c1 0500 	movt	r5, #4096	; 0x1000
	inline void push(BufDataType b) {
		if (length < size) {
			operator[](length) = b;
			length++;
		} else {
			overflow = true;
    8522:	f04f 0601 	mov.w	r6, #1
		return length;
	}

	/// Get the remaining capacity of this buffer
	inline const BufSizeType getRemainingCapacity() const {
		return size - length;
    8526:	8863      	ldrh	r3, [r4, #2]
    8528:	b29b      	uxth	r3, r3

// A fast slice for processing commands and refilling the stepper queue, etc.
void runCommandSlice() {
    // get command from SD card if building from SD
	if (sdcard::isPlaying()) {
		while (command_buffer.getRemainingCapacity() > 0 && sdcard::playbackHasNext()) {
    852a:	8822      	ldrh	r2, [r4, #0]
    852c:	429a      	cmp	r2, r3
    852e:	f000 8588 	beq.w	9042 <command::runCommandSlice()+0xb66>
    8532:	f005 fceb 	bl	df0c <sdcard::playbackHasNext()>
    8536:	2800      	cmp	r0, #0
    8538:	f000 8583 	beq.w	9042 <command::runCommandSlice()+0xb66>
			sd_count++;
    853c:	682b      	ldr	r3, [r5, #0]
    853e:	f103 0301 	add.w	r3, r3, #1
    8542:	602b      	str	r3, [r5, #0]
			command_buffer.push(sdcard::playbackNext());
    8544:	f005 fce8 	bl	df18 <sdcard::playbackNext()>
		overflow = false;
		underflow = false;
	}
	/// Append a byte to the tail of the buffer
	inline void push(BufDataType b) {
		if (length < size) {
    8548:	8862      	ldrh	r2, [r4, #2]
    854a:	b292      	uxth	r2, r2
    854c:	8823      	ldrh	r3, [r4, #0]
    854e:	429a      	cmp	r2, r3
    8550:	d3cb      	bcc.n	84ea <command::runCommandSlice()+0xe>
    8552:	e7dc      	b.n	850e <command::runCommandSlice()+0x32>
		}
		if(!sdcard::playbackHasNext() && (sd_count < sdcard::getFileSize()) && !sdcard_reset){
    8554:	f005 fc2e 	bl	ddb4 <sdcard::getFileSize()>
    8558:	f640 03f8 	movw	r3, #2296	; 0x8f8
    855c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8560:	681b      	ldr	r3, [r3, #0]
    8562:	4298      	cmp	r0, r3
    8564:	f240 8572 	bls.w	904c <command::runCommandSlice()+0xb70>
    8568:	f641 1354 	movw	r3, #6484	; 0x1954
    856c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8570:	781b      	ldrb	r3, [r3, #0]
    8572:	2b00      	cmp	r3, #0
    8574:	f040 856a 	bne.w	904c <command::runCommandSlice()+0xb70>
			
//			Motherboard::getBoard().getInterfaceBoard().resetLCD();
			Motherboard::getBoard().errorResponse(STATICFAIL_MSG);
    8578:	f641 309c 	movw	r0, #7068	; 0x1b9c
    857c:	f2c1 0000 	movt	r0, #4096	; 0x1000
    8580:	f246 3108 	movw	r1, #25352	; 0x6308
    8584:	f2c0 0102 	movt	r1, #2
    8588:	f04f 0200 	mov.w	r2, #0
    858c:	f002 ffe0 	bl	b550 <Motherboard::errorResponse(char*, bool)>
			sdcard_reset = true;
    8590:	f641 1354 	movw	r3, #6484	; 0x1954
    8594:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8598:	f04f 0201 	mov.w	r2, #1
    859c:	701a      	strb	r2, [r3, #0]
    859e:	e008      	b.n	85b2 <command::runCommandSlice()+0xd6>
		return size - length;
	}

	/// Check if the buffer is empty
	inline const bool isEmpty() const {
		return length == 0;
    85a0:	f641 1340 	movw	r3, #6464	; 0x1940
    85a4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    85a8:	885b      	ldrh	r3, [r3, #2]
    85aa:	b29b      	uxth	r3, r3
			//sdcard::startPlayback(host::getBuildName());
			//uint32_t count;
			//while(count < sd_count){
			//	sdcard::playbackNext();
			//}
		}else if(!sdcard::playbackHasNext() && command_buffer.isEmpty()){
    85ac:	b90b      	cbnz	r3, 85b2 <command::runCommandSlice()+0xd6>
			sdcard::finishPlayback();
    85ae:	f005 fcbd 	bl	df2c <sdcard::finishPlayback()>
		}
	}
    // get command from onboard script if building from onboard
	if(utility::isPlaying()){		
    85b2:	f007 fc35 	bl	fe20 <utility::isPlaying()>
    85b6:	b9a0      	cbnz	r0, 85e2 <command::runCommandSlice()+0x106>
    85b8:	e035      	b.n	8626 <command::runCommandSlice()+0x14a>
		underflow = false;
	}
	/// Append a byte to the tail of the buffer
	inline void push(BufDataType b) {
		if (length < size) {
			operator[](length) = b;
    85ba:	8861      	ldrh	r1, [r4, #2]
    85bc:	b289      	uxth	r1, r1
	inline const bool isEmpty() const {
		return length == 0;
	}
	/// Read the buffer directly
	inline BufDataType& operator[](BufSizeType index) {
		const BufSizeType actual_index = (index + start) % size;
    85be:	88a2      	ldrh	r2, [r4, #4]
    85c0:	b292      	uxth	r2, r2
    85c2:	188a      	adds	r2, r1, r2
    85c4:	fb92 f1f3 	sdiv	r1, r2, r3
    85c8:	fb03 2311 	mls	r3, r3, r1, r2
		return data[actual_index];
    85cc:	b29b      	uxth	r3, r3
		underflow = false;
	}
	/// Append a byte to the tail of the buffer
	inline void push(BufDataType b) {
		if (length < size) {
			operator[](length) = b;
    85ce:	68a2      	ldr	r2, [r4, #8]
    85d0:	54d0      	strb	r0, [r2, r3]
			length++;
    85d2:	8863      	ldrh	r3, [r4, #2]
    85d4:	f103 0301 	add.w	r3, r3, #1
    85d8:	b29b      	uxth	r3, r3
    85da:	8063      	strh	r3, [r4, #2]
    85dc:	e007      	b.n	85ee <command::runCommandSlice()+0x112>
		} else {
			overflow = true;
    85de:	7325      	strb	r5, [r4, #12]
    85e0:	e005      	b.n	85ee <command::runCommandSlice()+0x112>
		return length;
	}

	/// Get the remaining capacity of this buffer
	inline const BufSizeType getRemainingCapacity() const {
		return size - length;
    85e2:	f641 1440 	movw	r4, #6464	; 0x1940
    85e6:	f2c1 0400 	movt	r4, #4096	; 0x1000
	inline void push(BufDataType b) {
		if (length < size) {
			operator[](length) = b;
			length++;
		} else {
			overflow = true;
    85ea:	f04f 0501 	mov.w	r5, #1
		return length;
	}

	/// Get the remaining capacity of this buffer
	inline const BufSizeType getRemainingCapacity() const {
		return size - length;
    85ee:	8863      	ldrh	r3, [r4, #2]
    85f0:	b29b      	uxth	r3, r3
		while (command_buffer.getRemainingCapacity() > 0 && utility::playbackHasNext()){
    85f2:	8822      	ldrh	r2, [r4, #0]
    85f4:	429a      	cmp	r2, r3
    85f6:	f000 8530 	beq.w	905a <command::runCommandSlice()+0xb7e>
    85fa:	f007 fc1f 	bl	fe3c <utility::playbackHasNext()>
    85fe:	2800      	cmp	r0, #0
    8600:	f000 852b 	beq.w	905a <command::runCommandSlice()+0xb7e>
			command_buffer.push(utility::playbackNext());
    8604:	f007 fc2a 	bl	fe5c <utility::playbackNext()>
		overflow = false;
		underflow = false;
	}
	/// Append a byte to the tail of the buffer
	inline void push(BufDataType b) {
		if (length < size) {
    8608:	8862      	ldrh	r2, [r4, #2]
    860a:	b292      	uxth	r2, r2
    860c:	8823      	ldrh	r3, [r4, #0]
    860e:	429a      	cmp	r2, r3
    8610:	d3d3      	bcc.n	85ba <command::runCommandSlice()+0xde>
    8612:	e7e4      	b.n	85de <command::runCommandSlice()+0x102>
		return size - length;
	}

	/// Check if the buffer is empty
	inline const bool isEmpty() const {
		return length == 0;
    8614:	f641 1340 	movw	r3, #6464	; 0x1940
    8618:	f2c1 0300 	movt	r3, #4096	; 0x1000
    861c:	885b      	ldrh	r3, [r3, #2]
    861e:	b29b      	uxth	r3, r3
		}
		if(!utility::playbackHasNext() && command_buffer.isEmpty()){
    8620:	b90b      	cbnz	r3, 8626 <command::runCommandSlice()+0x14a>
			utility::finishPlayback();
    8622:	f007 fc37 	bl	fe94 <utility::finishPlayback()>
	}
	
	// if printer is not waiting for tool or platform to heat, we need to make
	// sure the extruders are not in a paused state.  this is relevant when 
	// heating using the control panel in desktop software
	if(check_temp_state){
    8626:	f640 03e4 	movw	r3, #2276	; 0x8e4
    862a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    862e:	781b      	ldrb	r3, [r3, #0]
    8630:	b1b3      	cbz	r3, 8660 <command::runCommandSlice()+0x184>
		if (Motherboard::getBoard().getPlatformHeater().has_reached_target_temperature()){
    8632:	48b2      	ldr	r0, [pc, #712]	; (88fc <command::runCommandSlice()+0x420>)
    8634:	f008 f8aa 	bl	1078c <Heater::has_reached_target_temperature()>
    8638:	b190      	cbz	r0, 8660 <command::runCommandSlice()+0x184>
			// unpause extruder heaters in case they are paused
			Motherboard::getBoard().getExtruderBoard(0).getExtruderHeater().Pause(false);
    863a:	4cb1      	ldr	r4, [pc, #708]	; (8900 <command::runCommandSlice()+0x424>)
    863c:	4620      	mov	r0, r4
    863e:	f04f 0100 	mov.w	r1, #0
    8642:	f008 f909 	bl	10858 <Heater::Pause(bool)>
			Motherboard::getBoard().getExtruderBoard(1).getExtruderHeater().Pause(false);
    8646:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
    864a:	f04f 0100 	mov.w	r1, #0
    864e:	f008 f903 	bl	10858 <Heater::Pause(bool)>
			check_temp_state = false;
    8652:	f640 03e4 	movw	r3, #2276	; 0x8e4
    8656:	f2c1 0300 	movt	r3, #4096	; 0x1000
    865a:	f04f 0200 	mov.w	r2, #0
    865e:	701a      	strb	r2, [r3, #0]
		}
	}
	// don't execute commands if paused or shutdown because of heater failure
	if (paused || heat_shutdown) {	return; }
    8660:	f641 1368 	movw	r3, #6504	; 0x1968
    8664:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8668:	781b      	ldrb	r3, [r3, #0]
    866a:	2b00      	cmp	r3, #0
    866c:	f040 84fc 	bne.w	9068 <command::runCommandSlice()+0xb8c>
    8670:	f641 133c 	movw	r3, #6460	; 0x193c
    8674:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8678:	781b      	ldrb	r3, [r3, #0]
    867a:	2b00      	cmp	r3, #0
    867c:	f040 84f4 	bne.w	9068 <command::runCommandSlice()+0xb8c>
    
	if (mode == HOMING) {
    8680:	f640 03e6 	movw	r3, #2278	; 0x8e6
    8684:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8688:	781b      	ldrb	r3, [r3, #0]
    868a:	2b03      	cmp	r3, #3
    868c:	d11b      	bne.n	86c6 <command::runCommandSlice()+0x1ea>
		if (!steppers::isRunning()) {
    868e:	f005 ff4f 	bl	e530 <steppers::isRunning()>
    8692:	b938      	cbnz	r0, 86a4 <command::runCommandSlice()+0x1c8>
			mode = READY;
    8694:	f640 03e6 	movw	r3, #2278	; 0x8e6
    8698:	f2c1 0300 	movt	r3, #4096	; 0x1000
    869c:	f04f 0200 	mov.w	r2, #0
    86a0:	701a      	strb	r2, [r3, #0]
    86a2:	e060      	b.n	8766 <command::runCommandSlice()+0x28a>
		} else if (homing_timeout.hasElapsed()) {
    86a4:	f641 102c 	movw	r0, #6444	; 0x192c
    86a8:	f2c1 0000 	movt	r0, #4096	; 0x1000
    86ac:	f009 f8ca 	bl	11844 <Timeout::hasElapsed()>
    86b0:	b148      	cbz	r0, 86c6 <command::runCommandSlice()+0x1ea>
			planner::abort();
    86b2:	f004 fca9 	bl	d008 <planner::abort()>
			mode = READY;
    86b6:	f640 03e6 	movw	r3, #2278	; 0x8e6
    86ba:	f2c1 0300 	movt	r3, #4096	; 0x1000
    86be:	f04f 0200 	mov.w	r2, #0
    86c2:	701a      	strb	r2, [r3, #0]
    86c4:	e04f      	b.n	8766 <command::runCommandSlice()+0x28a>
		}
	}
	if (mode == MOVING) {
    86c6:	f640 03e6 	movw	r3, #2278	; 0x8e6
    86ca:	f2c1 0300 	movt	r3, #4096	; 0x1000
    86ce:	781b      	ldrb	r3, [r3, #0]
    86d0:	2b01      	cmp	r3, #1
    86d2:	d148      	bne.n	8766 <command::runCommandSlice()+0x28a>
//		xprintf("1");
//		xprintf("12" " (%s:%d)\n",_F_,_L_);
//		_delay_us(10000);
		if (!steppers::isRunning()) {
    86d4:	f005 ff2c 	bl	e530 <steppers::isRunning()>
    86d8:	b938      	cbnz	r0, 86ea <command::runCommandSlice()+0x20e>
//			xprintf("2");
//			xprintf("13" " (%s:%d)\n",_F_,_L_);
//			_delay_us(10000);
			mode = READY;
    86da:	f640 03e6 	movw	r3, #2278	; 0x8e6
    86de:	f2c1 0300 	movt	r3, #4096	; 0x1000
    86e2:	f04f 0200 	mov.w	r2, #0
    86e6:	701a      	strb	r2, [r3, #0]
    86e8:	e0a7      	b.n	883a <command::runCommandSlice()+0x35e>
		length -= sz;
	}

	/// Get the length of the buffer
	inline const BufSizeType getLength() const {
		return length;
    86ea:	f641 1340 	movw	r3, #6464	; 0x1940
    86ee:	f2c1 0300 	movt	r3, #4096	; 0x1000
    86f2:	885b      	ldrh	r3, [r3, #2]
    86f4:	b29b      	uxth	r3, r3
		} else {
//			xprintf("3");
//			xprintf("13" " (%s:%d)\n",_F_,_L_);
//			_delay_us(10000);
			if (command_buffer.getLength() > 0) {
    86f6:	2b00      	cmp	r3, #0
    86f8:	d035      	beq.n	8766 <command::runCommandSlice()+0x28a>
				Motherboard::getBoard().resetUserInputTimeout();
    86fa:	f641 309c 	movw	r0, #7068	; 0x1b9c
    86fe:	f2c1 0000 	movt	r0, #4096	; 0x1000
    8702:	f002 fe61 	bl	b3c8 <Motherboard::resetUserInputTimeout()>
	inline const bool isEmpty() const {
		return length == 0;
	}
	/// Read the buffer directly
	inline BufDataType& operator[](BufSizeType index) {
		const BufSizeType actual_index = (index + start) % size;
    8706:	f641 1340 	movw	r3, #6464	; 0x1940
    870a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    870e:	8899      	ldrh	r1, [r3, #4]
    8710:	b289      	uxth	r1, r1
    8712:	881a      	ldrh	r2, [r3, #0]
    8714:	fb91 f0f2 	sdiv	r0, r1, r2
    8718:	fb02 1210 	mls	r2, r2, r0, r1
		return data[actual_index];
    871c:	b292      	uxth	r2, r2
				uint8_t command = command_buffer[0];
    871e:	689b      	ldr	r3, [r3, #8]
    8720:	5c9b      	ldrb	r3, [r3, r2]
    8722:	f88d 301f 	strb.w	r3, [sp, #31]
				if (command == HOST_CMD_QUEUE_POINT_EXT || command == HOST_CMD_QUEUE_POINT_NEW) {
    8726:	2b8e      	cmp	r3, #142	; 0x8e
    8728:	bf14      	ite	ne
    872a:	2200      	movne	r2, #0
    872c:	2201      	moveq	r2, #1
    872e:	2b8b      	cmp	r3, #139	; 0x8b
    8730:	bf08      	it	eq
    8732:	f042 0201 	orreq.w	r2, r2, #1
    8736:	b142      	cbz	r2, 874a <command::runCommandSlice()+0x26e>
//					xprintf("command == HOST_CMD_QUEUE_POINT_EXT || command == HOST_CMD_QUEUE_POINT_NEW" " (%s:%d)\n",_F_,_L_);
					_delay_us(100);
    8738:	f04f 0064 	mov.w	r0, #100	; 0x64
    873c:	f000 fe78 	bl	9430 <_delay_us>
					handleMovementCommand(command);
    8740:	f10d 001f 	add.w	r0, sp, #31
    8744:	f7ff fd0a 	bl	815c <command::handleMovementCommand(unsigned char const&)>
    8748:	e00d      	b.n	8766 <command::runCommandSlice()+0x28a>
				}
				else if (command == HOST_CMD_ENABLE_AXES) {
    874a:	2b89      	cmp	r3, #137	; 0x89
    874c:	d10b      	bne.n	8766 <command::runCommandSlice()+0x28a>
		length -= sz;
	}

	/// Get the length of the buffer
	inline const BufSizeType getLength() const {
		return length;
    874e:	f641 1340 	movw	r3, #6464	; 0x1940
    8752:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8756:	885b      	ldrh	r3, [r3, #2]
    8758:	b29b      	uxth	r3, r3
					if (command_buffer.getLength() >= 2) {
    875a:	2b01      	cmp	r3, #1
    875c:	d903      	bls.n	8766 <command::runCommandSlice()+0x28a>
						pop8(); // remove the command code
    875e:	f7ff fb9f 	bl	7ea0 <command::pop8()>
						uint8_t axes = pop8();
    8762:	f7ff fb9d 	bl	7ea0 <command::pop8()>
						}
				}
			}
		}
	}
	if (mode == DELAY) {
    8766:	f640 03e6 	movw	r3, #2278	; 0x8e6
    876a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    876e:	781b      	ldrb	r3, [r3, #0]
    8770:	2b02      	cmp	r3, #2
    8772:	d10e      	bne.n	8792 <command::runCommandSlice()+0x2b6>
		// check timers
		if (delay_timeout.hasElapsed()) {
    8774:	f641 1058 	movw	r0, #6488	; 0x1958
    8778:	f2c1 0000 	movt	r0, #4096	; 0x1000
    877c:	f009 f862 	bl	11844 <Timeout::hasElapsed()>
    8780:	b138      	cbz	r0, 8792 <command::runCommandSlice()+0x2b6>
			mode = READY;
    8782:	f640 03e6 	movw	r3, #2278	; 0x8e6
    8786:	f2c1 0300 	movt	r3, #4096	; 0x1000
    878a:	f04f 0200 	mov.w	r2, #0
    878e:	701a      	strb	r2, [r3, #0]
    8790:	e08d      	b.n	88ae <command::runCommandSlice()+0x3d2>
		}
	}
	if (mode == WAIT_ON_TOOL) {
    8792:	f640 03e6 	movw	r3, #2278	; 0x8e6
    8796:	f2c1 0300 	movt	r3, #4096	; 0x1000
    879a:	781b      	ldrb	r3, [r3, #0]
    879c:	2b04      	cmp	r3, #4
    879e:	d14c      	bne.n	883a <command::runCommandSlice()+0x35e>
		if(tool_wait_timeout.hasElapsed()){
    87a0:	f641 1000 	movw	r0, #6400	; 0x1900
    87a4:	f2c1 0000 	movt	r0, #4096	; 0x1000
    87a8:	f009 f84c 	bl	11844 <Timeout::hasElapsed()>
    87ac:	b198      	cbz	r0, 87d6 <command::runCommandSlice()+0x2fa>
			Motherboard::getBoard().errorResponse("I timed out while   attempting to heat  my extruder."); 
    87ae:	f641 309c 	movw	r0, #7068	; 0x1b9c
    87b2:	f2c1 0000 	movt	r0, #4096	; 0x1000
    87b6:	f246 315c 	movw	r1, #25436	; 0x635c
    87ba:	f2c0 0102 	movt	r1, #2
    87be:	f04f 0200 	mov.w	r2, #0
    87c2:	f002 fec5 	bl	b550 <Motherboard::errorResponse(char*, bool)>
			mode = READY;		
    87c6:	f640 03e6 	movw	r3, #2278	; 0x8e6
    87ca:	f2c1 0300 	movt	r3, #4096	; 0x1000
    87ce:	f04f 0200 	mov.w	r2, #0
    87d2:	701a      	strb	r2, [r3, #0]
    87d4:	e06b      	b.n	88ae <command::runCommandSlice()+0x3d2>
    87d6:	f640 03e5 	movw	r3, #2277	; 0x8e5
    87da:	f2c1 0300 	movt	r3, #4096	; 0x1000
    87de:	7818      	ldrb	r0, [r3, #0]
    87e0:	4b48      	ldr	r3, [pc, #288]	; (8904 <command::runCommandSlice()+0x428>)
    87e2:	f1a3 02e0 	sub.w	r2, r3, #224	; 0xe0
    87e6:	2801      	cmp	r0, #1
    87e8:	bf14      	ite	ne
    87ea:	4610      	movne	r0, r2
    87ec:	4618      	moveq	r0, r3
		}
		else if(!Motherboard::getBoard().getExtruderBoard(currentToolIndex).getExtruderHeater().isHeating()){
    87ee:	f100 0028 	add.w	r0, r0, #40	; 0x28
    87f2:	f007 ffff 	bl	107f4 <Heater::isHeating()>
    87f6:	b938      	cbnz	r0, 8808 <command::runCommandSlice()+0x32c>
			mode = READY;
    87f8:	f640 03e6 	movw	r3, #2278	; 0x8e6
    87fc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8800:	f04f 0200 	mov.w	r2, #0
    8804:	701a      	strb	r2, [r3, #0]
    8806:	e052      	b.n	88ae <command::runCommandSlice()+0x3d2>
    8808:	f640 03e5 	movw	r3, #2277	; 0x8e5
    880c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8810:	7818      	ldrb	r0, [r3, #0]
    8812:	4b3c      	ldr	r3, [pc, #240]	; (8904 <command::runCommandSlice()+0x428>)
    8814:	f1a3 02e0 	sub.w	r2, r3, #224	; 0xe0
    8818:	2801      	cmp	r0, #1
    881a:	bf14      	ite	ne
    881c:	4610      	movne	r0, r2
    881e:	4618      	moveq	r0, r3
		}else if( Motherboard::getBoard().getExtruderBoard(currentToolIndex).getExtruderHeater().has_reached_target_temperature()){
    8820:	f100 0028 	add.w	r0, r0, #40	; 0x28
    8824:	f007 ffb2 	bl	1078c <Heater::has_reached_target_temperature()>
    8828:	b138      	cbz	r0, 883a <command::runCommandSlice()+0x35e>
            mode = READY;
    882a:	f640 03e6 	movw	r3, #2278	; 0x8e6
    882e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8832:	f04f 0200 	mov.w	r2, #0
    8836:	701a      	strb	r2, [r3, #0]
    8838:	e039      	b.n	88ae <command::runCommandSlice()+0x3d2>
		}
	}
	if (mode == WAIT_ON_PLATFORM) {
    883a:	f640 03e6 	movw	r3, #2278	; 0x8e6
    883e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8842:	781b      	ldrb	r3, [r3, #0]
    8844:	2b05      	cmp	r3, #5
    8846:	d132      	bne.n	88ae <command::runCommandSlice()+0x3d2>
		if(tool_wait_timeout.hasElapsed()){
    8848:	f641 1000 	movw	r0, #6400	; 0x1900
    884c:	f2c1 0000 	movt	r0, #4096	; 0x1000
    8850:	f008 fff8 	bl	11844 <Timeout::hasElapsed()>
    8854:	b198      	cbz	r0, 887e <command::runCommandSlice()+0x3a2>
			Motherboard::getBoard().errorResponse("I timed out while   attempting to heat  my platform."); 
    8856:	f641 309c 	movw	r0, #7068	; 0x1b9c
    885a:	f2c1 0000 	movt	r0, #4096	; 0x1000
    885e:	f246 3194 	movw	r1, #25492	; 0x6394
    8862:	f2c0 0102 	movt	r1, #2
    8866:	f04f 0200 	mov.w	r2, #0
    886a:	f002 fe71 	bl	b550 <Motherboard::errorResponse(char*, bool)>
			mode = READY;		
    886e:	f640 03e6 	movw	r3, #2278	; 0x8e6
    8872:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8876:	f04f 0200 	mov.w	r2, #0
    887a:	701a      	strb	r2, [r3, #0]
    887c:	e044      	b.n	8908 <command::runCommandSlice()+0x42c>
		} else if (!Motherboard::getBoard().getPlatformHeater().isHeating()){
    887e:	481f      	ldr	r0, [pc, #124]	; (88fc <command::runCommandSlice()+0x420>)
    8880:	f007 ffb8 	bl	107f4 <Heater::isHeating()>
    8884:	b938      	cbnz	r0, 8896 <command::runCommandSlice()+0x3ba>
			mode = READY;
    8886:	f640 03e6 	movw	r3, #2278	; 0x8e6
    888a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    888e:	f04f 0200 	mov.w	r2, #0
    8892:	701a      	strb	r2, [r3, #0]
    8894:	e038      	b.n	8908 <command::runCommandSlice()+0x42c>
		}
		else if(Motherboard::getBoard().getPlatformHeater().has_reached_target_temperature()){
    8896:	4819      	ldr	r0, [pc, #100]	; (88fc <command::runCommandSlice()+0x420>)
    8898:	f007 ff78 	bl	1078c <Heater::has_reached_target_temperature()>
    889c:	b138      	cbz	r0, 88ae <command::runCommandSlice()+0x3d2>
            mode = READY;
    889e:	f640 03e6 	movw	r3, #2278	; 0x8e6
    88a2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    88a6:	f04f 0200 	mov.w	r2, #0
    88aa:	701a      	strb	r2, [r3, #0]
    88ac:	e02c      	b.n	8908 <command::runCommandSlice()+0x42c>
		}
	}
	if (mode == WAIT_ON_BUTTON) {
    88ae:	f640 03e6 	movw	r3, #2278	; 0x8e6
    88b2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    88b6:	781b      	ldrb	r3, [r3, #0]
    88b8:	2b06      	cmp	r3, #6
    88ba:	d125      	bne.n	8908 <command::runCommandSlice()+0x42c>
		if (button_wait_timeout.hasElapsed()) {
    88bc:	f641 101c 	movw	r0, #6428	; 0x191c
    88c0:	f2c1 0000 	movt	r0, #4096	; 0x1000
    88c4:	f008 ffbe 	bl	11844 <Timeout::hasElapsed()>
    88c8:	b1f0      	cbz	r0, 8908 <command::runCommandSlice()+0x42c>
			if (button_timeout_behavior & (1 << BUTTON_TIMEOUT_ABORT)) {
    88ca:	f641 1369 	movw	r3, #6505	; 0x1969
    88ce:	f2c1 0300 	movt	r3, #4096	; 0x1000
    88d2:	781b      	ldrb	r3, [r3, #0]
    88d4:	f013 0f02 	tst.w	r3, #2
    88d8:	d008      	beq.n	88ec <command::runCommandSlice()+0x410>
				// Abort build!
				// We'll interpret this as a catastrophic situation
				// and do a full reset of the machine.
				Motherboard::getBoard().reset(false);
    88da:	f641 309c 	movw	r0, #7068	; 0x1b9c
    88de:	f2c1 0000 	movt	r0, #4096	; 0x1000
    88e2:	f04f 0100 	mov.w	r1, #0
    88e6:	f002 ff09 	bl	b6fc <Motherboard::reset(bool)>
    88ea:	e00d      	b.n	8908 <command::runCommandSlice()+0x42c>

			} else {
				mode = READY;
    88ec:	f640 03e6 	movw	r3, #2278	; 0x8e6
    88f0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    88f4:	f04f 0200 	mov.w	r2, #0
    88f8:	701a      	strb	r2, [r3, #0]
    88fa:	e00d      	b.n	8918 <command::runCommandSlice()+0x43c>
    88fc:	10001da8 	.word	0x10001da8
    8900:	10001bec 	.word	0x10001bec
    8904:	10001ca4 	.word	0x10001ca4
//				mode = READY;
//			}
		}
	}

	if (mode == READY) {
    8908:	f640 03e6 	movw	r3, #2278	; 0x8e6
    890c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8910:	781b      	ldrb	r3, [r3, #0]
    8912:	2b00      	cmp	r3, #0
    8914:	f040 8380 	bne.w	9018 <command::runCommandSlice()+0xb3c>
    8918:	f641 1340 	movw	r3, #6464	; 0x1940
    891c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8920:	885b      	ldrh	r3, [r3, #2]
    8922:	b29b      	uxth	r3, r3
//		xprintf("mode == READY" " (%s:%d)\n",_F_,_L_);
//		_delay_us(100);
		
		// process next command on the queue.
		if ((command_buffer.getLength() > 0)){
    8924:	2b00      	cmp	r3, #0
    8926:	f000 8377 	beq.w	9018 <command::runCommandSlice()+0xb3c>
			Motherboard::getBoard().resetUserInputTimeout();
    892a:	f641 309c 	movw	r0, #7068	; 0x1b9c
    892e:	f2c1 0000 	movt	r0, #4096	; 0x1000
    8932:	f002 fd49 	bl	b3c8 <Motherboard::resetUserInputTimeout()>
	inline const bool isEmpty() const {
		return length == 0;
	}
	/// Read the buffer directly
	inline BufDataType& operator[](BufSizeType index) {
		const BufSizeType actual_index = (index + start) % size;
    8936:	f641 1340 	movw	r3, #6464	; 0x1940
    893a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    893e:	8899      	ldrh	r1, [r3, #4]
    8940:	b289      	uxth	r1, r1
    8942:	881a      	ldrh	r2, [r3, #0]
		return data[actual_index];
    8944:	6898      	ldr	r0, [r3, #8]
	inline const bool isEmpty() const {
		return length == 0;
	}
	/// Read the buffer directly
	inline BufDataType& operator[](BufSizeType index) {
		const BufSizeType actual_index = (index + start) % size;
    8946:	fb91 f3f2 	sdiv	r3, r1, r2
    894a:	fb02 1313 	mls	r3, r2, r3, r1
		return data[actual_index];
    894e:	b29b      	uxth	r3, r3
			
			uint8_t command = command_buffer[0];
    8950:	5cc3      	ldrb	r3, [r0, r3]
    8952:	f88d 301f 	strb.w	r3, [sp, #31]

		if (command == HOST_CMD_QUEUE_POINT_EXT || command == HOST_CMD_QUEUE_POINT_NEW) {
    8956:	2b8e      	cmp	r3, #142	; 0x8e
    8958:	bf14      	ite	ne
    895a:	2100      	movne	r1, #0
    895c:	2101      	moveq	r1, #1
    895e:	2b8b      	cmp	r3, #139	; 0x8b
    8960:	bf08      	it	eq
    8962:	f041 0101 	orreq.w	r1, r1, #1
    8966:	b121      	cbz	r1, 8972 <command::runCommandSlice()+0x496>
					handleMovementCommand(command);
    8968:	f10d 001f 	add.w	r0, sp, #31
    896c:	f7ff fbf6 	bl	815c <command::handleMovementCommand(unsigned char const&)>
    8970:	e352      	b.n	9018 <command::runCommandSlice()+0xb3c>
			}  else if (command == HOST_CMD_CHANGE_TOOL) {
    8972:	2b86      	cmp	r3, #134	; 0x86
    8974:	d11c      	bne.n	89b0 <command::runCommandSlice()+0x4d4>
		length -= sz;
	}

	/// Get the length of the buffer
	inline const BufSizeType getLength() const {
		return length;
    8976:	f641 1340 	movw	r3, #6464	; 0x1940
    897a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    897e:	885b      	ldrh	r3, [r3, #2]
    8980:	b29b      	uxth	r3, r3
				if (command_buffer.getLength() >= 2) {
    8982:	2b01      	cmp	r3, #1
    8984:	f240 8348 	bls.w	9018 <command::runCommandSlice()+0xb3c>
					pop8(); // remove the command code
    8988:	f7ff fa8a 	bl	7ea0 <command::pop8()>
                    currentToolIndex = pop8();
    898c:	f7ff fa88 	bl	7ea0 <command::pop8()>
    8990:	f640 03e5 	movw	r3, #2277	; 0x8e5
    8994:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8998:	7018      	strb	r0, [r3, #0]
                    line_number++;
    899a:	f641 1350 	movw	r3, #6480	; 0x1950
    899e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    89a2:	681a      	ldr	r2, [r3, #0]
    89a4:	f102 0201 	add.w	r2, r2, #1
    89a8:	601a      	str	r2, [r3, #0]
                    
                    planner::changeToolIndex(currentToolIndex);
    89aa:	f004 fb1b 	bl	cfe4 <planner::changeToolIndex(unsigned char)>
    89ae:	e333      	b.n	9018 <command::runCommandSlice()+0xb3c>
				}
			} else if (command == HOST_CMD_ENABLE_AXES) {
    89b0:	2b89      	cmp	r3, #137	; 0x89
    89b2:	d127      	bne.n	8a04 <command::runCommandSlice()+0x528>
    89b4:	f641 1340 	movw	r3, #6464	; 0x1940
    89b8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    89bc:	885b      	ldrh	r3, [r3, #2]
    89be:	b29b      	uxth	r3, r3
				if (command_buffer.getLength() >= 2) {
    89c0:	2b01      	cmp	r3, #1
    89c2:	f240 8329 	bls.w	9018 <command::runCommandSlice()+0xb3c>
					pop8(); // remove the command code
    89c6:	f7ff fa6b 	bl	7ea0 <command::pop8()>
					uint8_t axes = pop8();
    89ca:	f7ff fa69 	bl	7ea0 <command::pop8()>
    89ce:	4605      	mov	r5, r0
					line_number++;
    89d0:	f641 1350 	movw	r3, #6480	; 0x1950
    89d4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    89d8:	681a      	ldr	r2, [r3, #0]
    89da:	f102 0201 	add.w	r2, r2, #1
    89de:	601a      	str	r2, [r3, #0]
					
					bool enable = (axes & 0x80) != 0;
    89e0:	f3c0 16c0 	ubfx	r6, r0, #7, #1
					for (int i = 0; i < STEPPER_COUNT; i++) {
    89e4:	f04f 0400 	mov.w	r4, #0
						if ((axes & _BV(i)) != 0) {
    89e8:	fa45 f304 	asr.w	r3, r5, r4
    89ec:	f013 0f01 	tst.w	r3, #1
    89f0:	d003      	beq.n	89fa <command::runCommandSlice()+0x51e>
							steppers::enableAxis(i, enable);
    89f2:	b2e0      	uxtb	r0, r4
    89f4:	4631      	mov	r1, r6
    89f6:	f006 fcb1 	bl	f35c <steppers::enableAxis(unsigned char, bool)>
					pop8(); // remove the command code
					uint8_t axes = pop8();
					line_number++;
					
					bool enable = (axes & 0x80) != 0;
					for (int i = 0; i < STEPPER_COUNT; i++) {
    89fa:	f104 0401 	add.w	r4, r4, #1
    89fe:	2c04      	cmp	r4, #4
    8a00:	d1f2      	bne.n	89e8 <command::runCommandSlice()+0x50c>
    8a02:	e309      	b.n	9018 <command::runCommandSlice()+0xb3c>
						if ((axes & _BV(i)) != 0) {
							steppers::enableAxis(i, enable);
						}
					}
				}
			} else if (command == HOST_CMD_SET_POSITION_EXT) {
    8a04:	2b8c      	cmp	r3, #140	; 0x8c
    8a06:	d12c      	bne.n	8a62 <command::runCommandSlice()+0x586>
    8a08:	f641 1340 	movw	r3, #6464	; 0x1940
    8a0c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8a10:	885b      	ldrh	r3, [r3, #2]
    8a12:	b29b      	uxth	r3, r3
				// check for completion
				if (command_buffer.getLength() >= 21) {
    8a14:	2b14      	cmp	r3, #20
    8a16:	f240 82ff 	bls.w	9018 <command::runCommandSlice()+0xb3c>
					pop8(); // remove the command code
    8a1a:	f7ff fa41 	bl	7ea0 <command::pop8()>
					int32_t x = pop32();
    8a1e:	f7ff fad7 	bl	7fd0 <command::pop32()>
    8a22:	4604      	mov	r4, r0
					int32_t y = pop32();
    8a24:	f7ff fad4 	bl	7fd0 <command::pop32()>
    8a28:	4606      	mov	r6, r0
					int32_t z = pop32();
    8a2a:	f7ff fad1 	bl	7fd0 <command::pop32()>
    8a2e:	4607      	mov	r7, r0
					int32_t a = pop32();
    8a30:	f7ff face 	bl	7fd0 <command::pop32()>
    8a34:	4605      	mov	r5, r0
					int32_t b = pop32();
    8a36:	f7ff facb 	bl	7fd0 <command::pop32()>
					line_number++;
    8a3a:	f641 1350 	movw	r3, #6480	; 0x1950
    8a3e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8a42:	681a      	ldr	r2, [r3, #0]
    8a44:	f102 0201 	add.w	r2, r2, #1
    8a48:	601a      	str	r2, [r3, #0]
					
					planner::definePosition(Point(x,y,z,a,b));
    8a4a:	9500      	str	r5, [sp, #0]
    8a4c:	9001      	str	r0, [sp, #4]
    8a4e:	a808      	add	r0, sp, #32
    8a50:	4621      	mov	r1, r4
    8a52:	4632      	mov	r2, r6
    8a54:	463b      	mov	r3, r7
    8a56:	f004 fd41 	bl	d4dc <Point::Point(long, long, long, long, long)>
    8a5a:	a808      	add	r0, sp, #32
    8a5c:	f004 fc6a 	bl	d334 <planner::definePosition(Point const&)>
    8a60:	e2da      	b.n	9018 <command::runCommandSlice()+0xb3c>
				}
			} else if (command == HOST_CMD_DELAY) {
    8a62:	2b85      	cmp	r3, #133	; 0x85
    8a64:	d126      	bne.n	8ab4 <command::runCommandSlice()+0x5d8>
    8a66:	f641 1340 	movw	r3, #6464	; 0x1940
    8a6a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8a6e:	885b      	ldrh	r3, [r3, #2]
    8a70:	b29b      	uxth	r3, r3
				if (command_buffer.getLength() >= 5) {
    8a72:	2b04      	cmp	r3, #4
    8a74:	f240 82d0 	bls.w	9018 <command::runCommandSlice()+0xb3c>
					mode = DELAY;
    8a78:	f640 03e6 	movw	r3, #2278	; 0x8e6
    8a7c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8a80:	f04f 0202 	mov.w	r2, #2
    8a84:	701a      	strb	r2, [r3, #0]
					pop8(); // remove the command code
    8a86:	f7ff fa0b 	bl	7ea0 <command::pop8()>
					// parameter is in milliseconds; timeouts need microseconds
					uint32_t microseconds = pop32() * 1000L;
    8a8a:	f7ff faa1 	bl	7fd0 <command::pop32()>
					line_number++;
    8a8e:	f641 1350 	movw	r3, #6480	; 0x1950
    8a92:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8a96:	681a      	ldr	r2, [r3, #0]
    8a98:	f102 0201 	add.w	r2, r2, #1
    8a9c:	601a      	str	r2, [r3, #0]
			} else if (command == HOST_CMD_DELAY) {
				if (command_buffer.getLength() >= 5) {
					mode = DELAY;
					pop8(); // remove the command code
					// parameter is in milliseconds; timeouts need microseconds
					uint32_t microseconds = pop32() * 1000L;
    8a9e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8aa2:	fb01 f100 	mul.w	r1, r1, r0
					line_number++;
					
					delay_timeout.start(microseconds);
    8aa6:	f641 1058 	movw	r0, #6488	; 0x1958
    8aaa:	f2c1 0000 	movt	r0, #4096	; 0x1000
    8aae:	f008 feb5 	bl	1181c <Timeout::start(unsigned long)>
    8ab2:	e2b1      	b.n	9018 <command::runCommandSlice()+0xb3c>
				}
			} else if (command == HOST_CMD_PAUSE_FOR_BUTTON) {
    8ab4:	2b94      	cmp	r3, #148	; 0x94
    8ab6:	d14f      	bne.n	8b58 <command::runCommandSlice()+0x67c>
    8ab8:	f641 1340 	movw	r3, #6464	; 0x1940
    8abc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8ac0:	885b      	ldrh	r3, [r3, #2]
    8ac2:	b29b      	uxth	r3, r3
				if (command_buffer.getLength() >= 5) {
    8ac4:	2b04      	cmp	r3, #4
    8ac6:	f240 82a7 	bls.w	9018 <command::runCommandSlice()+0xb3c>
					pop8(); // remove the command code
    8aca:	f7ff f9e9 	bl	7ea0 <command::pop8()>
					button_mask = pop8();
    8ace:	f7ff f9e7 	bl	7ea0 <command::pop8()>
    8ad2:	f641 1355 	movw	r3, #6485	; 0x1955
    8ad6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8ada:	7018      	strb	r0, [r3, #0]
					uint16_t timeout_seconds = pop16();
    8adc:	f7ff fa12 	bl	7f04 <command::pop16()>
    8ae0:	b284      	uxth	r4, r0
					button_timeout_behavior = pop8();
    8ae2:	f7ff f9dd 	bl	7ea0 <command::pop8()>
    8ae6:	f641 1369 	movw	r3, #6505	; 0x1969
    8aea:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8aee:	7018      	strb	r0, [r3, #0]
					line_number++;
    8af0:	f641 1350 	movw	r3, #6480	; 0x1950
    8af4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8af8:	681a      	ldr	r2, [r3, #0]
    8afa:	f102 0201 	add.w	r2, r2, #1
    8afe:	601a      	str	r2, [r3, #0]
					
					if (timeout_seconds != 0) {
    8b00:	b164      	cbz	r4, 8b1c <command::runCommandSlice()+0x640>
						button_wait_timeout.start(timeout_seconds * 1000L * 1000L);
    8b02:	f244 2140 	movw	r1, #16960	; 0x4240
    8b06:	f2c0 010f 	movt	r1, #15
    8b0a:	f641 101c 	movw	r0, #6428	; 0x191c
    8b0e:	f2c1 0000 	movt	r0, #4096	; 0x1000
    8b12:	fb01 f104 	mul.w	r1, r1, r4
    8b16:	f008 fe81 	bl	1181c <Timeout::start(unsigned long)>
    8b1a:	e00b      	b.n	8b34 <command::runCommandSlice()+0x658>
					} else {
						button_wait_timeout = Timeout();
    8b1c:	ac0d      	add	r4, sp, #52	; 0x34
    8b1e:	4620      	mov	r0, r4
    8b20:	f008 fe76 	bl	11810 <Timeout::Timeout()>
    8b24:	f641 151c 	movw	r5, #6428	; 0x191c
    8b28:	f2c1 0500 	movt	r5, #4096	; 0x1000
    8b2c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    8b30:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
					}
                    // set button wait via interface board
					Motherboard::getBoard().interfaceBlink(25,15);
    8b34:	f641 309c 	movw	r0, #7068	; 0x1b9c
    8b38:	f2c1 0000 	movt	r0, #4096	; 0x1000
    8b3c:	f04f 0119 	mov.w	r1, #25
    8b40:	f04f 020f 	mov.w	r2, #15
    8b44:	f002 fcd2 	bl	b4ec <Motherboard::interfaceBlink(int, int)>
//					InterfaceBoard& ib = Motherboard::getBoard().getInterfaceBoard();
//					ib.waitForButton(button_mask);
					mode = WAIT_ON_BUTTON;
    8b48:	f640 03e6 	movw	r3, #2278	; 0x8e6
    8b4c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8b50:	f04f 0206 	mov.w	r2, #6
    8b54:	701a      	strb	r2, [r3, #0]
    8b56:	e25f      	b.n	9018 <command::runCommandSlice()+0xb3c>
				}
			} else if (command == HOST_CMD_DISPLAY_MESSAGE) {
    8b58:	2b95      	cmp	r3, #149	; 0x95
    8b5a:	d11b      	bne.n	8b94 <command::runCommandSlice()+0x6b8>
    8b5c:	f641 1340 	movw	r3, #6464	; 0x1940
    8b60:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8b64:	885b      	ldrh	r3, [r3, #2]
    8b66:	b29b      	uxth	r3, r3
//				MessageScreen* scr = Motherboard::getBoard().getMessageScreen();
				if (command_buffer.getLength() >= 6) {
    8b68:	2b05      	cmp	r3, #5
    8b6a:	f240 8255 	bls.w	9018 <command::runCommandSlice()+0xb3c>
					pop8(); // remove the command code
    8b6e:	f7ff f997 	bl	7ea0 <command::pop8()>
					uint8_t options = pop8();
    8b72:	f7ff f995 	bl	7ea0 <command::pop8()>
					uint8_t xpos = pop8();
    8b76:	f7ff f993 	bl	7ea0 <command::pop8()>
					uint8_t ypos = pop8();
    8b7a:	f7ff f991 	bl	7ea0 <command::pop8()>
					uint8_t timeout_seconds = pop8();
    8b7e:	f7ff f98f 	bl	7ea0 <command::pop8()>
					line_number++;
    8b82:	f641 1350 	movw	r3, #6480	; 0x1950
    8b86:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8b8a:	681a      	ldr	r2, [r3, #0]
    8b8c:	f102 0201 	add.w	r2, r2, #1
    8b90:	601a      	str	r2, [r3, #0]
    8b92:	e241      	b.n	9018 <command::runCommandSlice()+0xb3c>
//							mode = WAIT_ON_BUTTON;
//						}
//					}
				}
					
			} else if (command == HOST_CMD_FIND_AXES_MINIMUM ||
    8b94:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    8b98:	b2c9      	uxtb	r1, r1
    8b9a:	2901      	cmp	r1, #1
    8b9c:	d839      	bhi.n	8c12 <command::runCommandSlice()+0x736>
    8b9e:	f641 1340 	movw	r3, #6464	; 0x1940
    8ba2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8ba6:	885b      	ldrh	r3, [r3, #2]
    8ba8:	b29b      	uxth	r3, r3
					command == HOST_CMD_FIND_AXES_MAXIMUM) {
				if (command_buffer.getLength() >= 8) {
    8baa:	2b07      	cmp	r3, #7
    8bac:	f240 8234 	bls.w	9018 <command::runCommandSlice()+0xb3c>
					pop8(); // remove the command
    8bb0:	f7ff f976 	bl	7ea0 <command::pop8()>
					uint8_t flags = pop8();
    8bb4:	f7ff f974 	bl	7ea0 <command::pop8()>
    8bb8:	4605      	mov	r5, r0
					uint32_t feedrate = pop32(); // feedrate in us per step
    8bba:	f7ff fa09 	bl	7fd0 <command::pop32()>
    8bbe:	4604      	mov	r4, r0
					uint16_t timeout_s = pop16();
    8bc0:	f7ff f9a0 	bl	7f04 <command::pop16()>
					line_number++;
    8bc4:	f641 1350 	movw	r3, #6480	; 0x1950
    8bc8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8bcc:	681a      	ldr	r2, [r3, #0]
    8bce:	f102 0201 	add.w	r2, r2, #1
    8bd2:	601a      	str	r2, [r3, #0]
					
					bool direction = command == HOST_CMD_FIND_AXES_MAXIMUM;
					mode = HOMING;
    8bd4:	f640 03e6 	movw	r3, #2278	; 0x8e6
    8bd8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8bdc:	f04f 0203 	mov.w	r2, #3
    8be0:	701a      	strb	r2, [r3, #0]
					homing_timeout.start(timeout_s * 1000L * 1000L);
    8be2:	b281      	uxth	r1, r0
    8be4:	f244 2340 	movw	r3, #16960	; 0x4240
    8be8:	f2c0 030f 	movt	r3, #15
    8bec:	f641 102c 	movw	r0, #6444	; 0x192c
    8bf0:	f2c1 0000 	movt	r0, #4096	; 0x1000
    8bf4:	fb03 f101 	mul.w	r1, r3, r1
    8bf8:	f008 fe10 	bl	1181c <Timeout::start(unsigned long)>
					steppers::startHoming(command==HOST_CMD_FIND_AXES_MAXIMUM,
							flags,
							feedrate);
    8bfc:	f89d 001f 	ldrb.w	r0, [sp, #31]
    8c00:	2884      	cmp	r0, #132	; 0x84
    8c02:	bf14      	ite	ne
    8c04:	2000      	movne	r0, #0
    8c06:	2001      	moveq	r0, #1
    8c08:	4629      	mov	r1, r5
    8c0a:	4622      	mov	r2, r4
    8c0c:	f006 fa98 	bl	f140 <steppers::startHoming(bool, unsigned char, unsigned long)>
    8c10:	e202      	b.n	9018 <command::runCommandSlice()+0xb3c>
				}
			} else if (command == HOST_CMD_WAIT_FOR_TOOL) {
    8c12:	2b87      	cmp	r3, #135	; 0x87
    8c14:	d132      	bne.n	8c7c <command::runCommandSlice()+0x7a0>
    8c16:	f641 1340 	movw	r3, #6464	; 0x1940
    8c1a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8c1e:	885b      	ldrh	r3, [r3, #2]
    8c20:	b29b      	uxth	r3, r3
				if (command_buffer.getLength() >= 6) {
    8c22:	2b05      	cmp	r3, #5
    8c24:	f240 81f8 	bls.w	9018 <command::runCommandSlice()+0xb3c>
					mode = WAIT_ON_TOOL;
    8c28:	f640 03e6 	movw	r3, #2278	; 0x8e6
    8c2c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8c30:	f04f 0204 	mov.w	r2, #4
    8c34:	701a      	strb	r2, [r3, #0]
					pop8();
    8c36:	f7ff f933 	bl	7ea0 <command::pop8()>
					currentToolIndex = pop8();
    8c3a:	f7ff f931 	bl	7ea0 <command::pop8()>
    8c3e:	f640 03e5 	movw	r3, #2277	; 0x8e5
    8c42:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8c46:	7018      	strb	r0, [r3, #0]
					uint16_t toolPingDelay = (uint16_t)pop16();
    8c48:	f7ff f95c 	bl	7f04 <command::pop16()>
					uint16_t toolTimeout = (uint16_t)pop16();
    8c4c:	f7ff f95a 	bl	7f04 <command::pop16()>
					line_number++;
    8c50:	f641 1350 	movw	r3, #6480	; 0x1950
    8c54:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8c58:	681a      	ldr	r2, [r3, #0]
    8c5a:	f102 0201 	add.w	r2, r2, #1
    8c5e:	601a      	str	r2, [r3, #0]
					
					// if we re-add handling of toolTimeout, we need to make sure
					// that values that overflow our counter will not be passed)
					tool_wait_timeout.start(toolTimeout*1000000L);
    8c60:	b281      	uxth	r1, r0
    8c62:	f244 2340 	movw	r3, #16960	; 0x4240
    8c66:	f2c0 030f 	movt	r3, #15
    8c6a:	f641 1000 	movw	r0, #6400	; 0x1900
    8c6e:	f2c1 0000 	movt	r0, #4096	; 0x1000
    8c72:	fb03 f101 	mul.w	r1, r3, r1
    8c76:	f008 fdd1 	bl	1181c <Timeout::start(unsigned long)>
    8c7a:	e1cd      	b.n	9018 <command::runCommandSlice()+0xb3c>
				}
			} else if (command == HOST_CMD_WAIT_FOR_PLATFORM) {
    8c7c:	2b8d      	cmp	r3, #141	; 0x8d
    8c7e:	d12d      	bne.n	8cdc <command::runCommandSlice()+0x800>
    8c80:	f641 1340 	movw	r3, #6464	; 0x1940
    8c84:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8c88:	885b      	ldrh	r3, [r3, #2]
    8c8a:	b29b      	uxth	r3, r3
        // FIXME: Almost equivalent to WAIT_FOR_TOOL
				if (command_buffer.getLength() >= 6) {
    8c8c:	2b05      	cmp	r3, #5
    8c8e:	f240 81c3 	bls.w	9018 <command::runCommandSlice()+0xb3c>
					mode = WAIT_ON_PLATFORM;
    8c92:	f640 03e6 	movw	r3, #2278	; 0x8e6
    8c96:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8c9a:	f04f 0205 	mov.w	r2, #5
    8c9e:	701a      	strb	r2, [r3, #0]
					pop8();
    8ca0:	f7ff f8fe 	bl	7ea0 <command::pop8()>
					uint8_t currentToolIndex = pop8();
    8ca4:	f7ff f8fc 	bl	7ea0 <command::pop8()>
					uint16_t toolPingDelay = (uint16_t)pop16();
    8ca8:	f7ff f92c 	bl	7f04 <command::pop16()>
					uint16_t toolTimeout = (uint16_t)pop16();
    8cac:	f7ff f92a 	bl	7f04 <command::pop16()>
					line_number++;
    8cb0:	f641 1350 	movw	r3, #6480	; 0x1950
    8cb4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8cb8:	681a      	ldr	r2, [r3, #0]
    8cba:	f102 0201 	add.w	r2, r2, #1
    8cbe:	601a      	str	r2, [r3, #0]
					
					// if we re-add handling of toolTimeout, we need to make sure
					// that values that overflow our counter will not be passed)
					tool_wait_timeout.start(toolTimeout*1000000L);
    8cc0:	b281      	uxth	r1, r0
    8cc2:	f244 2340 	movw	r3, #16960	; 0x4240
    8cc6:	f2c0 030f 	movt	r3, #15
    8cca:	f641 1000 	movw	r0, #6400	; 0x1900
    8cce:	f2c1 0000 	movt	r0, #4096	; 0x1000
    8cd2:	fb03 f101 	mul.w	r1, r3, r1
    8cd6:	f008 fda1 	bl	1181c <Timeout::start(unsigned long)>
    8cda:	e19d      	b.n	9018 <command::runCommandSlice()+0xb3c>
				}
			} else if (command == HOST_CMD_STORE_HOME_POSITION) {
    8cdc:	2b8f      	cmp	r3, #143	; 0x8f
    8cde:	d131      	bne.n	8d44 <command::runCommandSlice()+0x868>
    8ce0:	f641 1340 	movw	r3, #6464	; 0x1940
    8ce4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8ce8:	885b      	ldrh	r3, [r3, #2]
    8cea:	b29b      	uxth	r3, r3

				// check for completion
				if (command_buffer.getLength() >= 2) {
    8cec:	2b01      	cmp	r3, #1
    8cee:	f240 8193 	bls.w	9018 <command::runCommandSlice()+0xb3c>
					pop8();
    8cf2:	f7ff f8d5 	bl	7ea0 <command::pop8()>
					uint8_t axes = pop8();
    8cf6:	f7ff f8d3 	bl	7ea0 <command::pop8()>
    8cfa:	4606      	mov	r6, r0
					line_number++;
    8cfc:	f641 1350 	movw	r3, #6480	; 0x1950
    8d00:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8d04:	681a      	ldr	r2, [r3, #0]
    8d06:	f102 0201 	add.w	r2, r2, #1
    8d0a:	601a      	str	r2, [r3, #0]
    8d0c:	f04f 050e 	mov.w	r5, #14
    8d10:	f04f 0400 	mov.w	r4, #0
					
					// Go through each axis, and if that axis is specified, read it's value,
					// then record it to the eeprom.
					for (uint8_t i = 0; i < STEPPER_COUNT; i++) {
						if ( axes & (1 << i) ) {
    8d14:	fa46 f304 	asr.w	r3, r6, r4
    8d18:	f013 0f01 	tst.w	r3, #1
    8d1c:	d00a      	beq.n	8d34 <command::runCommandSlice()+0x858>
							eeprom::setEeprom32(eeprom_offsets::AXIS_HOME_POSITIONS_STEPS + (i*4), steppers::getPosition()[i]);
    8d1e:	a811      	add	r0, sp, #68	; 0x44
    8d20:	f005 fe52 	bl	e9c8 <steppers::getPosition()>
    8d24:	a811      	add	r0, sp, #68	; 0x44
    8d26:	4621      	mov	r1, r4
    8d28:	f004 fbe2 	bl	d4f0 <Point::operator[](unsigned int) const>
    8d2c:	6801      	ldr	r1, [r0, #0]
    8d2e:	4628      	mov	r0, r5
    8d30:	f007 fc0a 	bl	10548 <eeprom::setEeprom32(unsigned short, unsigned long)>
    8d34:	f104 0401 	add.w	r4, r4, #1
    8d38:	f105 0504 	add.w	r5, r5, #4
    8d3c:	b2ad      	uxth	r5, r5
					uint8_t axes = pop8();
					line_number++;
					
					// Go through each axis, and if that axis is specified, read it's value,
					// then record it to the eeprom.
					for (uint8_t i = 0; i < STEPPER_COUNT; i++) {
    8d3e:	2c04      	cmp	r4, #4
    8d40:	d1e8      	bne.n	8d14 <command::runCommandSlice()+0x838>
    8d42:	e169      	b.n	9018 <command::runCommandSlice()+0xb3c>
//							sei();
						}
						//eeprom::save_to_flash();
					}
				}
			} else if (command == HOST_CMD_RECALL_HOME_POSITION) {
    8d44:	2b90      	cmp	r3, #144	; 0x90
    8d46:	d137      	bne.n	8db8 <command::runCommandSlice()+0x8dc>
    8d48:	f641 1340 	movw	r3, #6464	; 0x1940
    8d4c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8d50:	885b      	ldrh	r3, [r3, #2]
    8d52:	b29b      	uxth	r3, r3
				// check for completion
				if (command_buffer.getLength() >= 2) {
    8d54:	2b01      	cmp	r3, #1
    8d56:	f240 815f 	bls.w	9018 <command::runCommandSlice()+0xb3c>
					pop8();
    8d5a:	f7ff f8a1 	bl	7ea0 <command::pop8()>
					uint8_t axes = pop8();
    8d5e:	f7ff f89f 	bl	7ea0 <command::pop8()>
    8d62:	4607      	mov	r7, r0
					line_number++;
    8d64:	f641 1350 	movw	r3, #6480	; 0x1950
    8d68:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8d6c:	681a      	ldr	r2, [r3, #0]
    8d6e:	f102 0201 	add.w	r2, r2, #1
    8d72:	601a      	str	r2, [r3, #0]

					Point newPoint = steppers::getPosition();
    8d74:	a802      	add	r0, sp, #8
    8d76:	f005 fe27 	bl	e9c8 <steppers::getPosition()>
    8d7a:	f04f 060e 	mov.w	r6, #14
    8d7e:	f04f 0400 	mov.w	r4, #0

					for (uint8_t i = 0; i < STEPPER_COUNT; i++) {
						if ( axes & (1 << i) ) {
							newPoint[i] = eeprom::getEeprom32(eeprom_offsets::AXIS_HOME_POSITIONS_STEPS + (i*4),0);
    8d82:	46a0      	mov	r8, r4
					line_number++;

					Point newPoint = steppers::getPosition();

					for (uint8_t i = 0; i < STEPPER_COUNT; i++) {
						if ( axes & (1 << i) ) {
    8d84:	fa47 f304 	asr.w	r3, r7, r4
    8d88:	f013 0f01 	tst.w	r3, #1
    8d8c:	d009      	beq.n	8da2 <command::runCommandSlice()+0x8c6>
							newPoint[i] = eeprom::getEeprom32(eeprom_offsets::AXIS_HOME_POSITIONS_STEPS + (i*4),0);
    8d8e:	a802      	add	r0, sp, #8
    8d90:	4621      	mov	r1, r4
    8d92:	f004 fbb1 	bl	d4f8 <Point::operator[](unsigned int)>
    8d96:	4605      	mov	r5, r0
    8d98:	4630      	mov	r0, r6
    8d9a:	4641      	mov	r1, r8
    8d9c:	f007 fbbe 	bl	1051c <eeprom::getEeprom32(unsigned short, unsigned long)>
    8da0:	6028      	str	r0, [r5, #0]
    8da2:	f104 0401 	add.w	r4, r4, #1
    8da6:	f106 0604 	add.w	r6, r6, #4
    8daa:	b2b6      	uxth	r6, r6
					uint8_t axes = pop8();
					line_number++;

					Point newPoint = steppers::getPosition();

					for (uint8_t i = 0; i < STEPPER_COUNT; i++) {
    8dac:	2c04      	cmp	r4, #4
    8dae:	d1e9      	bne.n	8d84 <command::runCommandSlice()+0x8a8>
//							eeprom_read_block(&(newPoint[i]), (void*) offset, 4);
//							sei();
						}
					}

					planner::definePosition(newPoint);
    8db0:	a802      	add	r0, sp, #8
    8db2:	f004 fabf 	bl	d334 <planner::definePosition(Point const&)>
    8db6:	e12f      	b.n	9018 <command::runCommandSlice()+0xb3c>
				}

			}else if (command == HOST_CMD_SET_POT_VALUE){
    8db8:	2b91      	cmp	r3, #145	; 0x91
    8dba:	d11c      	bne.n	8df6 <command::runCommandSlice()+0x91a>
    8dbc:	f641 1340 	movw	r3, #6464	; 0x1940
    8dc0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8dc4:	885b      	ldrh	r3, [r3, #2]
    8dc6:	b29b      	uxth	r3, r3
				if (command_buffer.getLength() >= 3) {
    8dc8:	2b02      	cmp	r3, #2
    8dca:	f240 8125 	bls.w	9018 <command::runCommandSlice()+0xb3c>
					pop8(); // remove the command code
    8dce:	f7ff f867 	bl	7ea0 <command::pop8()>
					uint8_t axis = pop8();
    8dd2:	f7ff f865 	bl	7ea0 <command::pop8()>
    8dd6:	4604      	mov	r4, r0
					uint8_t value = pop8();
    8dd8:	f7ff f862 	bl	7ea0 <command::pop8()>
    8ddc:	4601      	mov	r1, r0
					line_number++;
    8dde:	f641 1350 	movw	r3, #6480	; 0x1950
    8de2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8de6:	681a      	ldr	r2, [r3, #0]
    8de8:	f102 0201 	add.w	r2, r2, #1
    8dec:	601a      	str	r2, [r3, #0]
                    steppers::setAxisPotValue(axis, value);
    8dee:	4620      	mov	r0, r4
    8df0:	f006 fb08 	bl	f404 <steppers::setAxisPotValue(unsigned char, unsigned char)>
    8df4:	e110      	b.n	9018 <command::runCommandSlice()+0xb3c>
				}
			}else if (command == HOST_CMD_SET_RGB_LED){
    8df6:	2b92      	cmp	r3, #146	; 0x92
    8df8:	d129      	bne.n	8e4e <command::runCommandSlice()+0x972>
    8dfa:	f641 1340 	movw	r3, #6464	; 0x1940
    8dfe:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8e02:	885b      	ldrh	r3, [r3, #2]
    8e04:	b29b      	uxth	r3, r3
				if (command_buffer.getLength() >= 6) {
    8e06:	2b05      	cmp	r3, #5
    8e08:	f240 8106 	bls.w	9018 <command::runCommandSlice()+0xb3c>
					pop8(); // remove the command code
    8e0c:	f7ff f848 	bl	7ea0 <command::pop8()>

					uint8_t red = pop8();
    8e10:	f7ff f846 	bl	7ea0 <command::pop8()>
    8e14:	4604      	mov	r4, r0
					uint8_t green = pop8();
    8e16:	f7ff f843 	bl	7ea0 <command::pop8()>
    8e1a:	4606      	mov	r6, r0
					uint8_t blue = pop8();
    8e1c:	f7ff f840 	bl	7ea0 <command::pop8()>
    8e20:	4607      	mov	r7, r0
					uint8_t blink_rate = pop8();
    8e22:	f7ff f83d 	bl	7ea0 <command::pop8()>
    8e26:	4605      	mov	r5, r0

                    uint8_t effect = pop8();
    8e28:	f7ff f83a 	bl	7ea0 <command::pop8()>
                    line_number++;
    8e2c:	f641 1350 	movw	r3, #6480	; 0x1950
    8e30:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8e34:	681a      	ldr	r2, [r3, #0]
    8e36:	f102 0201 	add.w	r2, r2, #1
    8e3a:	601a      	str	r2, [r3, #0]
                    RGB_LED::setLEDBlink(blink_rate);
    8e3c:	4628      	mov	r0, r5
    8e3e:	f004 fe7f 	bl	db40 <RGB_LED::setLEDBlink(unsigned char)>
                    RGB_LED::setCustomColor(red, green, blue);
    8e42:	4620      	mov	r0, r4
    8e44:	4631      	mov	r1, r6
    8e46:	463a      	mov	r2, r7
    8e48:	f004 fdac 	bl	d9a4 <RGB_LED::setCustomColor(unsigned char, unsigned char, unsigned char)>
    8e4c:	e0e4      	b.n	9018 <command::runCommandSlice()+0xb3c>

				}
			}else if (command == HOST_CMD_SET_BEEP){
    8e4e:	2b93      	cmp	r3, #147	; 0x93
    8e50:	d11f      	bne.n	8e92 <command::runCommandSlice()+0x9b6>
    8e52:	f641 1340 	movw	r3, #6464	; 0x1940
    8e56:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8e5a:	885b      	ldrh	r3, [r3, #2]
    8e5c:	b29b      	uxth	r3, r3
				if (command_buffer.getLength() >= 6) {
    8e5e:	2b05      	cmp	r3, #5
    8e60:	f240 80da 	bls.w	9018 <command::runCommandSlice()+0xb3c>
					pop8(); // remove the command code
    8e64:	f7ff f81c 	bl	7ea0 <command::pop8()>
					uint16_t frequency= pop16();
    8e68:	f7ff f84c 	bl	7f04 <command::pop16()>
    8e6c:	4605      	mov	r5, r0
					uint16_t beep_length = pop16();
    8e6e:	f7ff f849 	bl	7f04 <command::pop16()>
    8e72:	4604      	mov	r4, r0
					uint8_t effect = pop8();
    8e74:	f7ff f814 	bl	7ea0 <command::pop8()>
					line_number++;
    8e78:	f641 1350 	movw	r3, #6480	; 0x1950
    8e7c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8e80:	681a      	ldr	r2, [r3, #0]
    8e82:	f102 0201 	add.w	r2, r2, #1
    8e86:	601a      	str	r2, [r3, #0]
                    Piezo::setTone(frequency, beep_length);
    8e88:	b2a8      	uxth	r0, r5
    8e8a:	b2a1      	uxth	r1, r4
    8e8c:	f003 f832 	bl	bef4 <Piezo::setTone(unsigned short, unsigned short)>
    8e90:	e0c2      	b.n	9018 <command::runCommandSlice()+0xb3c>

				}			
			}else if (command == HOST_CMD_TOOL_COMMAND) {
    8e92:	2b88      	cmp	r3, #136	; 0x88
    8e94:	d12a      	bne.n	8eec <command::runCommandSlice()+0xa10>
    8e96:	f641 1340 	movw	r3, #6464	; 0x1940
    8e9a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8e9e:	885b      	ldrh	r3, [r3, #2]
    8ea0:	b29b      	uxth	r3, r3
				if (command_buffer.getLength() >= 4) { // needs a payload
    8ea2:	2b03      	cmp	r3, #3
    8ea4:	f240 80b8 	bls.w	9018 <command::runCommandSlice()+0xb3c>
	inline const bool isEmpty() const {
		return length == 0;
	}
	/// Read the buffer directly
	inline BufDataType& operator[](BufSizeType index) {
		const BufSizeType actual_index = (index + start) % size;
    8ea8:	f641 1340 	movw	r3, #6464	; 0x1940
    8eac:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8eb0:	889c      	ldrh	r4, [r3, #4]
    8eb2:	b2a4      	uxth	r4, r4
		length -= sz;
	}

	/// Get the length of the buffer
	inline const BufSizeType getLength() const {
		return length;
    8eb4:	8859      	ldrh	r1, [r3, #2]
    8eb6:	b289      	uxth	r1, r1
	inline const bool isEmpty() const {
		return length == 0;
	}
	/// Read the buffer directly
	inline BufDataType& operator[](BufSizeType index) {
		const BufSizeType actual_index = (index + start) % size;
    8eb8:	f104 0303 	add.w	r3, r4, #3
    8ebc:	fb93 f4f2 	sdiv	r4, r3, r2
    8ec0:	fb02 3314 	mls	r3, r2, r4, r3
		return data[actual_index];
    8ec4:	b29b      	uxth	r3, r3
					uint8_t payload_length = command_buffer[3];
					if (command_buffer.getLength() >= 4+payload_length) {
    8ec6:	5cc3      	ldrb	r3, [r0, r3]
    8ec8:	f103 0304 	add.w	r3, r3, #4
    8ecc:	4299      	cmp	r1, r3
    8ece:	f2c0 80a3 	blt.w	9018 <command::runCommandSlice()+0xb3c>
							pop8(); // remove the command code
    8ed2:	f7fe ffe5 	bl	7ea0 <command::pop8()>
							line_number++;
    8ed6:	f641 1350 	movw	r3, #6480	; 0x1950
    8eda:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8ede:	681a      	ldr	r2, [r3, #0]
    8ee0:	f102 0201 	add.w	r2, r2, #1
    8ee4:	601a      	str	r2, [r3, #0]
							processExtruderCommandPacket();
    8ee6:	f7ff fa03 	bl	82f0 <command::processExtruderCommandPacket()>
    8eea:	e095      	b.n	9018 <command::runCommandSlice()+0xb3c>
				}
			}
			} else if (command == HOST_CMD_SET_BUILD_PERCENT){
    8eec:	2b96      	cmp	r3, #150	; 0x96
    8eee:	d117      	bne.n	8f20 <command::runCommandSlice()+0xa44>
		length -= sz;
	}

	/// Get the length of the buffer
	inline const BufSizeType getLength() const {
		return length;
    8ef0:	f641 1340 	movw	r3, #6464	; 0x1940
    8ef4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8ef8:	885b      	ldrh	r3, [r3, #2]
    8efa:	b29b      	uxth	r3, r3
				if (command_buffer.getLength() >= 3){
    8efc:	2b02      	cmp	r3, #2
    8efe:	f240 808b 	bls.w	9018 <command::runCommandSlice()+0xb3c>
					pop8(); // remove the command code
    8f02:	f7fe ffcd 	bl	7ea0 <command::pop8()>
					uint8_t percent = pop8();
    8f06:	f7fe ffcb 	bl	7ea0 <command::pop8()>
					uint8_t ignore = pop8(); // remove the reserved byte
    8f0a:	f7fe ffc9 	bl	7ea0 <command::pop8()>
					line_number++;
    8f0e:	f641 1350 	movw	r3, #6480	; 0x1950
    8f12:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8f16:	681a      	ldr	r2, [r3, #0]
    8f18:	f102 0201 	add.w	r2, r2, #1
    8f1c:	601a      	str	r2, [r3, #0]
    8f1e:	e07b      	b.n	9018 <command::runCommandSlice()+0xb3c>
//					interface::setBuildPercentage(percent);
				}
			} else if (command == HOST_CMD_QUEUE_SONG ) //queue a song for playing
    8f20:	2b97      	cmp	r3, #151	; 0x97
    8f22:	d123      	bne.n	8f6c <command::runCommandSlice()+0xa90>
    8f24:	f641 1340 	movw	r3, #6464	; 0x1940
    8f28:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8f2c:	885b      	ldrh	r3, [r3, #2]
    8f2e:	b29b      	uxth	r3, r3
 			{
				/// Error tone is 0,
				/// End tone is 1,
				/// all other tones user-defined (defaults to end-tone)
				if (command_buffer.getLength() >= 2){
    8f30:	2b01      	cmp	r3, #1
    8f32:	d971      	bls.n	9018 <command::runCommandSlice()+0xb3c>
					pop8(); // remove the command code
    8f34:	f7fe ffb4 	bl	7ea0 <command::pop8()>
					uint8_t songId = pop8();
    8f38:	f7fe ffb2 	bl	7ea0 <command::pop8()>
					line_number++;
    8f3c:	f641 1350 	movw	r3, #6480	; 0x1950
    8f40:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8f44:	681a      	ldr	r2, [r3, #0]
    8f46:	f102 0201 	add.w	r2, r2, #1
    8f4a:	601a      	str	r2, [r3, #0]
					if(songId == 0)
    8f4c:	b920      	cbnz	r0, 8f58 <command::runCommandSlice()+0xa7c>
						Piezo::errorTone(4);
    8f4e:	f04f 0004 	mov.w	r0, #4
    8f52:	f003 f833 	bl	bfbc <Piezo::errorTone(unsigned char)>
    8f56:	e05f      	b.n	9018 <command::runCommandSlice()+0xb3c>
					else if (songId == 1 )
    8f58:	2801      	cmp	r0, #1
    8f5a:	d102      	bne.n	8f62 <command::runCommandSlice()+0xa86>
						Piezo::doneTone();
    8f5c:	f003 f848 	bl	bff0 <Piezo::doneTone()>
    8f60:	e05a      	b.n	9018 <command::runCommandSlice()+0xb3c>
					else
						Piezo::errorTone(2);
    8f62:	f04f 0002 	mov.w	r0, #2
    8f66:	f003 f829 	bl	bfbc <Piezo::errorTone(unsigned char)>
    8f6a:	e055      	b.n	9018 <command::runCommandSlice()+0xb3c>
				}

			} else if ( command == HOST_CMD_RESET_TO_FACTORY) {
    8f6c:	2b98      	cmp	r3, #152	; 0x98
    8f6e:	d11e      	bne.n	8fae <command::runCommandSlice()+0xad2>
    8f70:	f641 1340 	movw	r3, #6464	; 0x1940
    8f74:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8f78:	885b      	ldrh	r3, [r3, #2]
    8f7a:	b29b      	uxth	r3, r3
				/// reset EEPROM settings to the factory value. Reboot bot.
				if (command_buffer.getLength() >= 2){
    8f7c:	2b01      	cmp	r3, #1
    8f7e:	d94b      	bls.n	9018 <command::runCommandSlice()+0xb3c>
				pop8(); // remove the command code
    8f80:	f7fe ff8e 	bl	7ea0 <command::pop8()>
				uint8_t options = pop8();
    8f84:	f7fe ff8c 	bl	7ea0 <command::pop8()>
				line_number++;
    8f88:	f641 1350 	movw	r3, #6480	; 0x1950
    8f8c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8f90:	681a      	ldr	r2, [r3, #0]
    8f92:	f102 0201 	add.w	r2, r2, #1
    8f96:	601a      	str	r2, [r3, #0]
				eeprom::factoryResetEEPROM();
    8f98:	f000 fc32 	bl	9800 <eeprom::factoryResetEEPROM()>
				Motherboard::getBoard().reset(false);
    8f9c:	f641 309c 	movw	r0, #7068	; 0x1b9c
    8fa0:	f2c1 0000 	movt	r0, #4096	; 0x1000
    8fa4:	f04f 0100 	mov.w	r1, #0
    8fa8:	f002 fba8 	bl	b6fc <Motherboard::reset(bool)>
    8fac:	e034      	b.n	9018 <command::runCommandSlice()+0xb3c>
				}
			} else if ( command == HOST_CMD_BUILD_START_NOTIFICATION) {
    8fae:	2b99      	cmp	r3, #153	; 0x99
    8fb0:	d11a      	bne.n	8fe8 <command::runCommandSlice()+0xb0c>
    8fb2:	f641 1340 	movw	r3, #6464	; 0x1940
    8fb6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8fba:	885b      	ldrh	r3, [r3, #2]
    8fbc:	b29b      	uxth	r3, r3
				if (command_buffer.getLength() >= 5){
    8fbe:	2b04      	cmp	r3, #4
    8fc0:	d92a      	bls.n	9018 <command::runCommandSlice()+0xb3c>
					pop8(); // remove the command code
    8fc2:	f7fe ff6d 	bl	7ea0 <command::pop8()>
					int buildSteps = pop32();
    8fc6:	f7ff f803 	bl	7fd0 <command::pop32()>
					line_number++;
    8fca:	f641 1350 	movw	r3, #6480	; 0x1950
    8fce:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8fd2:	681a      	ldr	r2, [r3, #0]
    8fd4:	f102 0201 	add.w	r2, r2, #1
    8fd8:	601a      	str	r2, [r3, #0]
					host::handleBuildStartNotification(command_buffer);		
    8fda:	f641 1040 	movw	r0, #6464	; 0x1940
    8fde:	f2c1 0000 	movt	r0, #4096	; 0x1000
    8fe2:	f000 ffe9 	bl	9fb8 <host::handleBuildStartNotification(CircularBufferTempl<unsigned char>&)>
    8fe6:	e017      	b.n	9018 <command::runCommandSlice()+0xb3c>
				}
			 } else if ( command == HOST_CMD_BUILD_END_NOTIFICATION) {
    8fe8:	2b9a      	cmp	r3, #154	; 0x9a
    8fea:	d115      	bne.n	9018 <command::runCommandSlice()+0xb3c>
    8fec:	f641 1340 	movw	r3, #6464	; 0x1940
    8ff0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    8ff4:	885b      	ldrh	r3, [r3, #2]
    8ff6:	b29b      	uxth	r3, r3
				if (command_buffer.getLength() >= 2){
    8ff8:	2b01      	cmp	r3, #1
    8ffa:	d90d      	bls.n	9018 <command::runCommandSlice()+0xb3c>
					pop8(); // remove the command code
    8ffc:	f7fe ff50 	bl	7ea0 <command::pop8()>
					uint8_t flags = pop8();
    9000:	f7fe ff4e 	bl	7ea0 <command::pop8()>
					line_number++;
    9004:	f641 1350 	movw	r3, #6480	; 0x1950
    9008:	f2c1 0300 	movt	r3, #4096	; 0x1000
    900c:	681a      	ldr	r2, [r3, #0]
    900e:	f102 0201 	add.w	r2, r2, #1
    9012:	601a      	str	r2, [r3, #0]
					host::handleBuildStopNotification(flags);
    9014:	f001 f8fc 	bl	a210 <host::handleBuildStopNotification(unsigned char)>
			}
		}
	}
	
	/// we're not handling overflows in the line counter.  Possibly implement this later.
	if(line_number > MAX_LINE_COUNT){
    9018:	f641 1350 	movw	r3, #6480	; 0x1950
    901c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9020:	f44f 424a 	mov.w	r2, #51712	; 0xca00
    9024:	f6c3 329a 	movt	r2, #15258	; 0x3b9a
    9028:	681b      	ldr	r3, [r3, #0]
    902a:	4293      	cmp	r3, r2
    902c:	d91c      	bls.n	9068 <command::runCommandSlice()+0xb8c>
		line_number = MAX_LINE_COUNT + 1;
    902e:	f641 1350 	movw	r3, #6480	; 0x1950
    9032:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9036:	f64c 2201 	movw	r2, #51713	; 0xca01
    903a:	f6c3 329a 	movt	r2, #15258	; 0x3b9a
    903e:	601a      	str	r2, [r3, #0]
    9040:	e012      	b.n	9068 <command::runCommandSlice()+0xb8c>
	if (sdcard::isPlaying()) {
		while (command_buffer.getRemainingCapacity() > 0 && sdcard::playbackHasNext()) {
			sd_count++;
			command_buffer.push(sdcard::playbackNext());
		}
		if(!sdcard::playbackHasNext() && (sd_count < sdcard::getFileSize()) && !sdcard_reset){
    9042:	f004 ff63 	bl	df0c <sdcard::playbackHasNext()>
    9046:	2800      	cmp	r0, #0
    9048:	f43f aa84 	beq.w	8554 <command::runCommandSlice()+0x78>
			//sdcard::startPlayback(host::getBuildName());
			//uint32_t count;
			//while(count < sd_count){
			//	sdcard::playbackNext();
			//}
		}else if(!sdcard::playbackHasNext() && command_buffer.isEmpty()){
    904c:	f004 ff5e 	bl	df0c <sdcard::playbackHasNext()>
    9050:	2800      	cmp	r0, #0
    9052:	f43f aaa5 	beq.w	85a0 <command::runCommandSlice()+0xc4>
    9056:	f7ff baac 	b.w	85b2 <command::runCommandSlice()+0xd6>
    // get command from onboard script if building from onboard
	if(utility::isPlaying()){		
		while (command_buffer.getRemainingCapacity() > 0 && utility::playbackHasNext()){
			command_buffer.push(utility::playbackNext());
		}
		if(!utility::playbackHasNext() && command_buffer.isEmpty()){
    905a:	f006 feef 	bl	fe3c <utility::playbackHasNext()>
    905e:	2800      	cmp	r0, #0
    9060:	f43f aad8 	beq.w	8614 <command::runCommandSlice()+0x138>
    9064:	f7ff badf 	b.w	8626 <command::runCommandSlice()+0x14a>
	
	/// we're not handling overflows in the line counter.  Possibly implement this later.
	if(line_number > MAX_LINE_COUNT){
		line_number = MAX_LINE_COUNT + 1;
	}
}
    9068:	b016      	add	sp, #88	; 0x58
    906a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    906e:	bf00      	nop

00009070 <_GLOBAL__sub_I__ZN7command11buffer_dataE>:
}
    9070:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
    9072:	f640 00e8 	movw	r0, #2280	; 0x8e8
    9076:	f2c1 0000 	movt	r0, #4096	; 0x1000
    907a:	f04f 0100 	mov.w	r1, #0
    907e:	f007 fe1b 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
    9082:	f640 00ec 	movw	r0, #2284	; 0x8ec
    9086:	f2c1 0000 	movt	r0, #4096	; 0x1000
    908a:	f04f 0101 	mov.w	r1, #1
    908e:	f007 fe13 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
    9092:	f640 00f0 	movw	r0, #2288	; 0x8f0
    9096:	f2c1 0000 	movt	r0, #4096	; 0x1000
    909a:	f04f 0102 	mov.w	r1, #2
    909e:	f007 fe0b 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
    90a2:	f640 00f4 	movw	r0, #2292	; 0x8f4
    90a6:	f2c1 0000 	movt	r0, #4096	; 0x1000
    90aa:	f04f 0103 	mov.w	r1, #3
    90ae:	f007 fe03 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
    90b2:	f640 00fc 	movw	r0, #2300	; 0x8fc
    90b6:	f2c1 0000 	movt	r0, #4096	; 0x1000
    90ba:	f04f 0104 	mov.w	r1, #4
    90be:	f007 fdfb 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
    90c2:	f641 1418 	movw	r4, #6424	; 0x1918
    90c6:	f2c1 0400 	movt	r4, #4096	; 0x1000
    90ca:	4620      	mov	r0, r4
    90cc:	f04f 01ff 	mov.w	r1, #255	; 0xff
    90d0:	f007 fdf2 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
    90d4:	f641 1010 	movw	r0, #6416	; 0x1910
    90d8:	f2c1 0000 	movt	r0, #4096	; 0x1000
    90dc:	4621      	mov	r1, r4
    90de:	f04f 0200 	mov.w	r2, #0
    90e2:	f007 fffb 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
	volatile bool overflow; /// Overflow indicator
	volatile bool underflow; /// Underflow indicator
public:
	CircularBufferTempl(BufSizeType size_in, BufDataType* data_in) :
		size(size_in), length(0), start(0), data(data_in), overflow(false),
				underflow(false) {
    90e6:	f641 1340 	movw	r3, #6464	; 0x1940
    90ea:	f2c1 0300 	movt	r3, #4096	; 0x1000
    90ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    90f2:	801a      	strh	r2, [r3, #0]
    90f4:	f04f 0200 	mov.w	r2, #0
    90f8:	4611      	mov	r1, r2
    90fa:	805a      	strh	r2, [r3, #2]
    90fc:	809a      	strh	r2, [r3, #4]
    90fe:	f640 1200 	movw	r2, #2304	; 0x900
    9102:	f2c1 0200 	movt	r2, #4096	; 0x1000
    9106:	609a      	str	r2, [r3, #8]
    9108:	7319      	strb	r1, [r3, #12]
    910a:	7359      	strb	r1, [r3, #13]
	WAIT_ON_TOOL,
	WAIT_ON_PLATFORM,
	WAIT_ON_BUTTON
} mode = READY;

Timeout delay_timeout;
    910c:	f641 1058 	movw	r0, #6488	; 0x1958
    9110:	f2c1 0000 	movt	r0, #4096	; 0x1000
    9114:	f008 fb7c 	bl	11810 <Timeout::Timeout()>
Timeout homing_timeout;
    9118:	f641 102c 	movw	r0, #6444	; 0x192c
    911c:	f2c1 0000 	movt	r0, #4096	; 0x1000
    9120:	f008 fb76 	bl	11810 <Timeout::Timeout()>
Timeout tool_wait_timeout;
    9124:	f641 1000 	movw	r0, #6400	; 0x1900
    9128:	f2c1 0000 	movt	r0, #4096	; 0x1000
    912c:	f008 fb70 	bl	11810 <Timeout::Timeout()>
Timeout button_wait_timeout;
    9130:	f641 101c 	movw	r0, #6428	; 0x191c
    9134:	f2c1 0000 	movt	r0, #4096	; 0x1000
    9138:	f008 fb6a 	bl	11810 <Timeout::Timeout()>
	/// we're not handling overflows in the line counter.  Possibly implement this later.
	if(line_number > MAX_LINE_COUNT){
		line_number = MAX_LINE_COUNT + 1;
	}
}
}
    913c:	bd10      	pop	{r4, pc}
    913e:	bf00      	nop

00009140 <Cutoff::disable()>:
{
	// cutoff test pin is an output and pulled down
//	CUTOFF_TEST.setValue(false);
//	CUTOFF_TEST.setDirection(true);
	
	cutoff_enabled = false;
    9140:	f04f 0300 	mov.w	r3, #0
    9144:	7003      	strb	r3, [r0, #0]
		resetCutoff();
	
	// set reset line to default value (low)
//	CUTOFF_RESET.setValue(false);
	
}
    9146:	4770      	bx	lr

00009148 <Cutoff::init()>:
#include "Pin.hh"
//#include "Piezo.hh"


void Cutoff::init()
{
    9148:	b510      	push	{r4, lr}
    914a:	4604      	mov	r4, r0
//	CUTOFF_SR_CHECK.setDirection(false);
 
	if (CUTOFF_PRESENT)
		enable();
	else
		disable();
    914c:	f7ff fff8 	bl	9140 <Cutoff::disable()>
		
	noiseCount = 0;
    9150:	f04f 0300 	mov.w	r3, #0
    9154:	7063      	strb	r3, [r4, #1]
	cutoffCount = 0;
    9156:	70a3      	strb	r3, [r4, #2]
	alarmRun = false;
    9158:	70e3      	strb	r3, [r4, #3]
}
    915a:	bd10      	pop	{r4, pc}

0000915c <_GLOBAL__sub_I__ZN6Cutoff4initEv>:
			noiseCount++;
			cutoffCount = 0;
//		}
		
		return true;
}
    915c:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
    915e:	f641 106c 	movw	r0, #6508	; 0x196c
    9162:	f2c1 0000 	movt	r0, #4096	; 0x1000
    9166:	f04f 0100 	mov.w	r1, #0
    916a:	f007 fda5 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
    916e:	f641 1070 	movw	r0, #6512	; 0x1970
    9172:	f2c1 0000 	movt	r0, #4096	; 0x1000
    9176:	f04f 0101 	mov.w	r1, #1
    917a:	f007 fd9d 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
    917e:	f641 1074 	movw	r0, #6516	; 0x1974
    9182:	f2c1 0000 	movt	r0, #4096	; 0x1000
    9186:	f04f 0102 	mov.w	r1, #2
    918a:	f007 fd95 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
    918e:	f641 1078 	movw	r0, #6520	; 0x1978
    9192:	f2c1 0000 	movt	r0, #4096	; 0x1000
    9196:	f04f 0103 	mov.w	r1, #3
    919a:	f007 fd8d 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
    919e:	f641 107c 	movw	r0, #6524	; 0x197c
    91a2:	f2c1 0000 	movt	r0, #4096	; 0x1000
    91a6:	f04f 0104 	mov.w	r1, #4
    91aa:	f007 fd85 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
    91ae:	f641 1480 	movw	r4, #6528	; 0x1980
    91b2:	f2c1 0400 	movt	r4, #4096	; 0x1000
    91b6:	4620      	mov	r0, r4
    91b8:	f04f 01ff 	mov.w	r1, #255	; 0xff
    91bc:	f007 fd7c 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
    91c0:	f641 1084 	movw	r0, #6532	; 0x1984
    91c4:	f2c1 0000 	movt	r0, #4096	; 0x1000
    91c8:	4621      	mov	r1, r4
    91ca:	f04f 0200 	mov.w	r2, #0
    91ce:	f007 ff85 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
    91d2:	bd10      	pop	{r4, pc}

000091d4 <processDebugPacket(InPacket const&, OutPacket&)>:

/// Identify a debug packet, and process it.  If the packet is a debug
/// packet, return true, indicating that no further processing should
/// be done.  Otherwise, processing of this packet should drop through
/// to the next processing level.
bool processDebugPacket(const InPacket& from_host, OutPacket& to_host) {
    91d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    91d6:	4604      	mov	r4, r0
    91d8:	460d      	mov	r5, r1
	void error(uint8_t error_code_in) {
		reset();
		error_code = error_code_in;
	}
public:
	uint8_t getLength() const { return length; }
    91da:	7803      	ldrb	r3, [r0, #0]
	if (from_host.getLength() == 0) {
    91dc:	2b00      	cmp	r3, #0
    91de:	d072      	beq.n	92c6 <processDebugPacket(InPacket const&, OutPacket&)+0xf2>
		return false;
	} // drop through on a nop packet
	uint8_t command = from_host.read8(0);
    91e0:	4607      	mov	r7, r0
    91e2:	f04f 0100 	mov.w	r1, #0
    91e6:	f007 fe5f 	bl	10ea8 <Packet::read8(unsigned char) const>

	if ((command & 0x70) == 0x70) {
    91ea:	f000 0370 	and.w	r3, r0, #112	; 0x70
    91ee:	2b70      	cmp	r3, #112	; 0x70
    91f0:	d16c      	bne.n	92cc <processDebugPacket(InPacket const&, OutPacket&)+0xf8>
		// This is a debug packet
		if (command == CommandCode::DEBUG_ECHO) {
    91f2:	2870      	cmp	r0, #112	; 0x70
    91f4:	d117      	bne.n	9226 <processDebugPacket(InPacket const&, OutPacket&)+0x52>
			// We start from 1 so we can skip the debug command byte.
			to_host.reset();
    91f6:	4628      	mov	r0, r5
    91f8:	f007 fe64 	bl	10ec4 <OutPacket::reset()>
    91fc:	7823      	ldrb	r3, [r4, #0]
			for (int i = 1; i < from_host.getLength(); i++) {
    91fe:	2b01      	cmp	r3, #1
    9200:	dd67      	ble.n	92d2 <processDebugPacket(InPacket const&, OutPacket&)+0xfe>
    9202:	f04f 0601 	mov.w	r6, #1
				to_host.append8(from_host.read8(i));
    9206:	4638      	mov	r0, r7
    9208:	b2f1      	uxtb	r1, r6
    920a:	f007 fe4d 	bl	10ea8 <Packet::read8(unsigned char) const>
    920e:	4601      	mov	r1, r0
    9210:	4628      	mov	r0, r5
    9212:	f007 fea1 	bl	10f58 <OutPacket::append8(unsigned char)>
	if ((command & 0x70) == 0x70) {
		// This is a debug packet
		if (command == CommandCode::DEBUG_ECHO) {
			// We start from 1 so we can skip the debug command byte.
			to_host.reset();
			for (int i = 1; i < from_host.getLength(); i++) {
    9216:	f106 0601 	add.w	r6, r6, #1
    921a:	7823      	ldrb	r3, [r4, #0]
    921c:	42b3      	cmp	r3, r6
    921e:	dcf2      	bgt.n	9206 <processDebugPacket(InPacket const&, OutPacket&)+0x32>
				to_host.append8(from_host.read8(i));
			}
			return true;
    9220:	f04f 0001 	mov.w	r0, #1
    9224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		} else if (command == CommandCode::DEBUG_GENERATE_BAD_PACKET) {
    9226:	2871      	cmp	r0, #113	; 0x71
    9228:	d056      	beq.n	92d8 <processDebugPacket(InPacket const&, OutPacket&)+0x104>
			// TODO
		} else if (command == CommandCode::DEBUG_SIMULATE_BAD_PACKET) {
    922a:	2872      	cmp	r0, #114	; 0x72
    922c:	d057      	beq.n	92de <processDebugPacket(InPacket const&, OutPacket&)+0x10a>
				for (int i = 0; i < in.getLength(); i++) {
					to_host.append8(in.read8(i));
				}
			}
			return true;
		} */else if (command == CommandCode::DEBUG_CLEAR_COMMAND_QUEUE) {
    922e:	2874      	cmp	r0, #116	; 0x74
    9230:	d109      	bne.n	9246 <processDebugPacket(InPacket const&, OutPacket&)+0x72>
			command::reset();
    9232:	f7ff f825 	bl	8280 <command::reset()>
			to_host.append8(RC_OK);
    9236:	4628      	mov	r0, r5
    9238:	f04f 0181 	mov.w	r1, #129	; 0x81
    923c:	f007 fe8c 	bl	10f58 <OutPacket::append8(unsigned char)>
			return true;
    9240:	f04f 0001 	mov.w	r0, #1
    9244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		} else if (command == CommandCode::DEBUG_SET_DEBUG_CODE ) {
    9246:	2876      	cmp	r0, #118	; 0x76
    9248:	d11a      	bne.n	9280 <processDebugPacket(InPacket const&, OutPacket&)+0xac>
			uint8_t debug_register = from_host.read8(1);
    924a:	4620      	mov	r0, r4
    924c:	f04f 0101 	mov.w	r1, #1
    9250:	f007 fe2a 	bl	10ea8 <Packet::read8(unsigned char) const>
    9254:	4606      	mov	r6, r0
			uint8_t value = from_host.read8(2);
    9256:	4620      	mov	r0, r4
    9258:	f04f 0102 	mov.w	r1, #2
    925c:	f007 fe24 	bl	10ea8 <Packet::read8(unsigned char) const>
    9260:	4601      	mov	r1, r0
			if (debug_register == 0) {
    9262:	b92e      	cbnz	r6, 9270 <processDebugPacket(InPacket const&, OutPacket&)+0x9c>
				Motherboard::getBoard().indicateError(value);
    9264:	f641 309c 	movw	r0, #7068	; 0x1b9c
    9268:	f2c1 0000 	movt	r0, #4096	; 0x1000
    926c:	f002 f904 	bl	b478 <Motherboard::indicateError(int)>
			}
			to_host.append8(RC_OK);
    9270:	4628      	mov	r0, r5
    9272:	f04f 0181 	mov.w	r1, #129	; 0x81
    9276:	f007 fe6f 	bl	10f58 <OutPacket::append8(unsigned char)>
				to_host.append8(Motherboard::getBoard().getCurrentError());
			} else {
				to_host.append8(0);
			}
		}
		return false;
    927a:	f04f 0000 	mov.w	r0, #0
    927e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uint8_t value = from_host.read8(2);
			if (debug_register == 0) {
				Motherboard::getBoard().indicateError(value);
			}
			to_host.append8(RC_OK);
		} else if (command == CommandCode::DEBUG_GET_DEBUG_CODE ) {
    9280:	2877      	cmp	r0, #119	; 0x77
    9282:	d12f      	bne.n	92e4 <processDebugPacket(InPacket const&, OutPacket&)+0x110>
			uint8_t debug_register = from_host.read8(1);
    9284:	4620      	mov	r0, r4
    9286:	f04f 0101 	mov.w	r1, #1
    928a:	f007 fe0d 	bl	10ea8 <Packet::read8(unsigned char) const>
    928e:	4604      	mov	r4, r0
			to_host.append8(RC_OK);
    9290:	4628      	mov	r0, r5
    9292:	f04f 0181 	mov.w	r1, #129	; 0x81
    9296:	f007 fe5f 	bl	10f58 <OutPacket::append8(unsigned char)>
			if (debug_register == 0) {
    929a:	b964      	cbnz	r4, 92b6 <processDebugPacket(InPacket const&, OutPacket&)+0xe2>
				to_host.append8(Motherboard::getBoard().getCurrentError());
    929c:	f641 309c 	movw	r0, #7068	; 0x1b9c
    92a0:	f2c1 0000 	movt	r0, #4096	; 0x1000
    92a4:	f002 fb98 	bl	b9d8 <Motherboard::getCurrentError()>
    92a8:	4601      	mov	r1, r0
    92aa:	4628      	mov	r0, r5
    92ac:	f007 fe54 	bl	10f58 <OutPacket::append8(unsigned char)>
			} else {
				to_host.append8(0);
			}
		}
		return false;
    92b0:	f04f 0000 	mov.w	r0, #0
    92b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uint8_t debug_register = from_host.read8(1);
			to_host.append8(RC_OK);
			if (debug_register == 0) {
				to_host.append8(Motherboard::getBoard().getCurrentError());
			} else {
				to_host.append8(0);
    92b6:	4628      	mov	r0, r5
    92b8:	f04f 0100 	mov.w	r1, #0
    92bc:	f007 fe4c 	bl	10f58 <OutPacket::append8(unsigned char)>
			}
		}
		return false;
    92c0:	f04f 0000 	mov.w	r0, #0
    92c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
/// packet, return true, indicating that no further processing should
/// be done.  Otherwise, processing of this packet should drop through
/// to the next processing level.
bool processDebugPacket(const InPacket& from_host, OutPacket& to_host) {
	if (from_host.getLength() == 0) {
		return false;
    92c6:	f04f 0000 	mov.w	r0, #0
    92ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}
		}
		return false;
	} else {
		// This is not a debug packet
		return false;
    92cc:	f04f 0000 	mov.w	r0, #0
    92d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			// We start from 1 so we can skip the debug command byte.
			to_host.reset();
			for (int i = 1; i < from_host.getLength(); i++) {
				to_host.append8(from_host.read8(i));
			}
			return true;
    92d2:	f04f 0001 	mov.w	r0, #1
    92d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				to_host.append8(Motherboard::getBoard().getCurrentError());
			} else {
				to_host.append8(0);
			}
		}
		return false;
    92d8:	f04f 0000 	mov.w	r0, #0
    92dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    92de:	f04f 0000 	mov.w	r0, #0
    92e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    92e4:	f04f 0000 	mov.w	r0, #0
	} else {
		// This is not a debug packet
		return false;
	}
}
    92e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    92ea:	bf00      	nop

000092ec <_GLOBAL__sub_I_debugSlaveOut>:
    92ec:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
    92ee:	f641 108c 	movw	r0, #6540	; 0x198c
    92f2:	f2c1 0000 	movt	r0, #4096	; 0x1000
    92f6:	f04f 0100 	mov.w	r1, #0
    92fa:	f007 fcdd 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
    92fe:	f641 1090 	movw	r0, #6544	; 0x1990
    9302:	f2c1 0000 	movt	r0, #4096	; 0x1000
    9306:	f04f 0101 	mov.w	r1, #1
    930a:	f007 fcd5 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
    930e:	f641 10c0 	movw	r0, #6592	; 0x19c0
    9312:	f2c1 0000 	movt	r0, #4096	; 0x1000
    9316:	f04f 0102 	mov.w	r1, #2
    931a:	f007 fccd 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
    931e:	f641 10bc 	movw	r0, #6588	; 0x19bc
    9322:	f2c1 0000 	movt	r0, #4096	; 0x1000
    9326:	f04f 0103 	mov.w	r1, #3
    932a:	f007 fcc5 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
    932e:	f641 10c4 	movw	r0, #6596	; 0x19c4
    9332:	f2c1 0000 	movt	r0, #4096	; 0x1000
    9336:	f04f 0104 	mov.w	r1, #4
    933a:	f007 fcbd 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
    933e:	f641 14c8 	movw	r4, #6600	; 0x19c8
    9342:	f2c1 0400 	movt	r4, #4096	; 0x1000
    9346:	4620      	mov	r0, r4
    9348:	f04f 01ff 	mov.w	r1, #255	; 0xff
    934c:	f007 fcb4 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
    9350:	f641 10cc 	movw	r0, #6604	; 0x19cc
    9354:	f2c1 0000 	movt	r0, #4096	; 0x1000
    9358:	4621      	mov	r1, r4
    935a:	f04f 0200 	mov.w	r2, #0
    935e:	f007 febd 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
	TIMEOUT = 5
};

}

OutPacket debugSlaveOut;
    9362:	f641 1094 	movw	r0, #6548	; 0x1994
    9366:	f2c1 0000 	movt	r0, #4096	; 0x1000
    936a:	f007 fdb5 	bl	10ed8 <OutPacket::OutPacket()>
		return false;
	} else {
		// This is not a debug packet
		return false;
	}
}
    936e:	bd10      	pop	{r4, pc}

00009370 <few_ticks>:
extern "C" {
#endif

void few_ticks()
{
	__ASM("nop");
    9370:	bf00      	nop
	__ASM("nop");
    9372:	bf00      	nop
	__ASM("nop");
    9374:	bf00      	nop
	__ASM("nop");
    9376:	bf00      	nop
	__ASM("nop");
    9378:	bf00      	nop
	__ASM("nop");
    937a:	bf00      	nop
	__ASM("nop");
    937c:	bf00      	nop
	__ASM("nop");
    937e:	bf00      	nop
	__ASM("nop");
    9380:	bf00      	nop
	__ASM("nop");
    9382:	bf00      	nop
	__ASM("nop");
    9384:	bf00      	nop
	__ASM("nop");
    9386:	bf00      	nop
	__ASM("nop");
    9388:	bf00      	nop
	__ASM("nop");
    938a:	bf00      	nop
	__ASM("nop");
    938c:	bf00      	nop
	__ASM("nop");
    938e:	bf00      	nop
	__ASM("nop");
    9390:	bf00      	nop
	__ASM("nop");
    9392:	bf00      	nop
	__ASM("nop");
    9394:	bf00      	nop
	__ASM("nop");
    9396:	bf00      	nop
	__ASM("nop");
    9398:	bf00      	nop
	__ASM("nop");
    939a:	bf00      	nop
	__ASM("nop");
    939c:	bf00      	nop
	__ASM("nop");
    939e:	bf00      	nop
	__ASM("nop");
    93a0:	bf00      	nop
	__ASM("nop");
    93a2:	bf00      	nop
	__ASM("nop");
    93a4:	bf00      	nop
	__ASM("nop");
    93a6:	bf00      	nop
	__ASM("nop");
    93a8:	bf00      	nop
	__ASM("nop");
    93aa:	bf00      	nop
	__ASM("nop");
    93ac:	bf00      	nop
	__ASM("nop");
    93ae:	bf00      	nop
	__ASM("nop");
    93b0:	bf00      	nop
	__ASM("nop");
    93b2:	bf00      	nop
	__ASM("nop");
    93b4:	bf00      	nop
	__ASM("nop");
    93b6:	bf00      	nop
	__ASM("nop");
    93b8:	bf00      	nop
	__ASM("nop");
    93ba:	bf00      	nop
	__ASM("nop");
    93bc:	bf00      	nop
	__ASM("nop");
    93be:	bf00      	nop
	__ASM("nop");
    93c0:	bf00      	nop
	__ASM("nop");
    93c2:	bf00      	nop
	__ASM("nop");
    93c4:	bf00      	nop
	__ASM("nop");
    93c6:	bf00      	nop
	__ASM("nop");
    93c8:	bf00      	nop
	__ASM("nop");
    93ca:	bf00      	nop
	__ASM("nop");
    93cc:	bf00      	nop
	__ASM("nop");
    93ce:	bf00      	nop
	__ASM("nop");
    93d0:	bf00      	nop
	__ASM("nop");
    93d2:	bf00      	nop
	__ASM("nop");
    93d4:	bf00      	nop
	__ASM("nop");
    93d6:	bf00      	nop
	__ASM("nop");
    93d8:	bf00      	nop
	__ASM("nop");
    93da:	bf00      	nop
	__ASM("nop");
    93dc:	bf00      	nop
	__ASM("nop");
    93de:	bf00      	nop
	__ASM("nop");
    93e0:	bf00      	nop
	__ASM("nop");
    93e2:	bf00      	nop
	__ASM("nop");
    93e4:	bf00      	nop
	__ASM("nop");
    93e6:	bf00      	nop
	__ASM("nop");
    93e8:	bf00      	nop
	__ASM("nop");
    93ea:	bf00      	nop
	__ASM("nop");
    93ec:	bf00      	nop
	__ASM("nop");
    93ee:	bf00      	nop
	__ASM("nop");
    93f0:	bf00      	nop
	__ASM("nop");
    93f2:	bf00      	nop
	__ASM("nop");
    93f4:	bf00      	nop
	__ASM("nop");
    93f6:	bf00      	nop
	__ASM("nop");
    93f8:	bf00      	nop
	__ASM("nop");
    93fa:	bf00      	nop
	__ASM("nop");
    93fc:	bf00      	nop
	__ASM("nop");
    93fe:	bf00      	nop
	__ASM("nop");
    9400:	bf00      	nop
	__ASM("nop");
    9402:	bf00      	nop
	__ASM("nop");
    9404:	bf00      	nop
	__ASM("nop");
    9406:	bf00      	nop
	__ASM("nop");
    9408:	bf00      	nop
	__ASM("nop");
    940a:	bf00      	nop
	__ASM("nop");
    940c:	bf00      	nop
	__ASM("nop");
    940e:	bf00      	nop
	__ASM("nop");
    9410:	bf00      	nop
	__ASM("nop");
    9412:	bf00      	nop
	__ASM("nop");
    9414:	bf00      	nop
	__ASM("nop");
    9416:	bf00      	nop
	__ASM("nop");
    9418:	bf00      	nop
	__ASM("nop");
    941a:	bf00      	nop
	__ASM("nop");
    941c:	bf00      	nop
	__ASM("nop");
    941e:	bf00      	nop
	__ASM("nop");
    9420:	bf00      	nop
	__ASM("nop");
    9422:	bf00      	nop
	__ASM("nop");
    9424:	bf00      	nop
	__ASM("nop");
    9426:	bf00      	nop
	__ASM("nop");
    9428:	bf00      	nop
	__ASM("nop");
    942a:	bf00      	nop
}
    942c:	4770      	bx	lr
    942e:	bf00      	nop

00009430 <_delay_us>:

void _delay_us(uint32_t time)
{
    9430:	b538      	push	{r3, r4, r5, lr}
	uint32_t i;
	for(i=0;i<time;i++)
    9432:	4605      	mov	r5, r0
    9434:	b138      	cbz	r0, 9446 <_delay_us+0x16>
    9436:	f04f 0400 	mov.w	r4, #0
		few_ticks();
    943a:	f7ff ff99 	bl	9370 <few_ticks>
}

void _delay_us(uint32_t time)
{
	uint32_t i;
	for(i=0;i<time;i++)
    943e:	f104 0401 	add.w	r4, r4, #1
    9442:	42ac      	cmp	r4, r5
    9444:	d1f9      	bne.n	943a <_delay_us+0xa>
    9446:	bd38      	pop	{r3, r4, r5, pc}

00009448 <eeprom::write_ff_to_ram()>:
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    9448:	b672      	cpsid	i
    944a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
    944e:	f2c1 0300 	movt	r3, #4096	; 0x1000

void write_ff_to_ram (void){
	uint32_t i;
	__disable_irq ();
	for (i = 0x00000000; i < eeprom_info::EEPROM_SIZE; i++,i++,i++,i++) {
		eeprom_address(EEPROM_START_ADDRESS + i, 0) = 0xffffffff;
    9452:	f04f 31ff 	mov.w	r1, #4294967295
#define THERM_BETA_DEFAULT_VALUE (4067)

void write_ff_to_ram (void){
	uint32_t i;
	__disable_irq ();
	for (i = 0x00000000; i < eeprom_info::EEPROM_SIZE; i++,i++,i++,i++) {
    9456:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
    945a:	f2c1 0200 	movt	r2, #4096	; 0x1000
		eeprom_address(EEPROM_START_ADDRESS + i, 0) = 0xffffffff;
    945e:	f843 1b04 	str.w	r1, [r3], #4
#define THERM_BETA_DEFAULT_VALUE (4067)

void write_ff_to_ram (void){
	uint32_t i;
	__disable_irq ();
	for (i = 0x00000000; i < eeprom_info::EEPROM_SIZE; i++,i++,i++,i++) {
    9462:	4293      	cmp	r3, r2
    9464:	d1fb      	bne.n	945e <eeprom::write_ff_to_ram()+0x16>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    9466:	b662      	cpsie	i
		eeprom_address(EEPROM_START_ADDRESS + i, 0) = 0xffffffff;
//		xprintf("%x %x" " (%s:%d)\n",EEPROM_START_ADDRESS + i,eeprom_address(EEPROM_START_ADDRESS + i, 0),_F_,_L_);
	}
	__enable_irq ();
};
    9468:	4770      	bx	lr
    946a:	bf00      	nop

0000946c <eeprom::read_all_from_flash()>:
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    946c:	b672      	cpsid	i
    946e:	f44f 5300 	mov.w	r3, #8192	; 0x2000

void read_all_from_flash (void){
    9472:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
    9476:	f502 42a0 	add.w	r2, r2, #20480	; 0x5000
	uint32_t i;
	__disable_irq ();
//		xprintf("%x %x" " (%s:%d)\n",EEPROM_START_ADDRESS+i,eeprom_address(EEPROM_START_ADDRESS+i, 0),_F_,_L_);
	for (i = 0x00000000; i < eeprom_info::EEPROM_SIZE; i++,i++,i++,i++) {
		eeprom_address(EEPROM_START_ADDRESS + i, 0) = eeprom_address(EEPROM_FLASH_AREA_START + i, 0);
    947a:	f853 1b04 	ldr.w	r1, [r3], #4
    947e:	6011      	str	r1, [r2, #0]

void read_all_from_flash (void){
	uint32_t i;
	__disable_irq ();
//		xprintf("%x %x" " (%s:%d)\n",EEPROM_START_ADDRESS+i,eeprom_address(EEPROM_START_ADDRESS+i, 0),_F_,_L_);
	for (i = 0x00000000; i < eeprom_info::EEPROM_SIZE; i++,i++,i++,i++) {
    9480:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
    9484:	d1f5      	bne.n	9472 <eeprom::read_all_from_flash()+0x6>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    9486:	b662      	cpsie	i
		eeprom_address(EEPROM_START_ADDRESS + i, 0) = eeprom_address(EEPROM_FLASH_AREA_START + i, 0);
//		xprintf("%x %x" " (%s:%d)\n",EEPROM_FLASH_AREA_START+i,eeprom_address(EEPROM_FLASH_AREA_START+i, 0),_F_,_L_);
	}
//		xprintf("%x %x" " (%s:%d)\n",EEPROM_START_ADDRESS+i,eeprom_address(EEPROM_START_ADDRESS+i, 0),_F_,_L_);
	__enable_irq ();
};
    9488:	4770      	bx	lr
    948a:	bf00      	nop

0000948c <eeprom::save_to_flash()>:

void save_to_flash (void) {
    948c:	b500      	push	{lr}
    948e:	b08d      	sub	sp, #52	; 0x34
	xprintf("save_to_flash" " (%s:%d)\n",_F_,_L_);
    9490:	f246 30ec 	movw	r0, #25580	; 0x63ec
    9494:	f2c0 0002 	movt	r0, #2
    9498:	4911      	ldr	r1, [pc, #68]	; (94e0 <eeprom::save_to_flash()+0x54>)
    949a:	f04f 024d 	mov.w	r2, #77	; 0x4d
    949e:	f7fd f819 	bl	64d4 <xprintf>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    94a2:	b672      	cpsid	i
    
    /**    Constructor for IAP
     *
     */

    IAP() : iap_entry( reinterpret_cast<IAP_call>(IAP_LOCATION) ), cclk_kHz( SystemCoreClock / 1000 ) {}
    94a4:	f641 73f1 	movw	r3, #8177	; 0x1ff1
    94a8:	f6c1 73ff 	movt	r3, #8191	; 0x1fff
    94ac:	9300      	str	r3, [sp, #0]
    94ae:	f240 0314 	movw	r3, #20
    94b2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    94b6:	681a      	ldr	r2, [r3, #0]
    94b8:	f644 53d3 	movw	r3, #19923	; 0x4dd3
    94bc:	f2c1 0362 	movt	r3, #4194	; 0x1062
    94c0:	fba3 1302 	umull	r1, r3, r3, r2
    94c4:	ea4f 1393 	mov.w	r3, r3, lsr #6
    94c8:	930b      	str	r3, [sp, #44]	; 0x2c
	__disable_irq ();
	IAP in_ap_prog;
	int error_code_ret = in_ap_prog.erase(USER_FLASH_AREA_START, USER_FLASH_AREA_START);
    94ca:	4668      	mov	r0, sp
    94cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    94d0:	460a      	mov	r2, r1
    94d2:	f006 fce7 	bl	fea4 <IAP::erase(int, int)>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    94d6:	b662      	cpsie	i
//	error_code_ret = in_ap_prog.write((char)0x10007000, (char)USER_FLASH_AREA_START, (int)USER_FLASH_AREA_SIZE );
	// read all variables back into Ram
	__enable_irq ();
	clearflashupdate();
    94d8:	f006 ff74 	bl	103c4 <eeprom::clearflashupdate()>
};
    94dc:	b00d      	add	sp, #52	; 0x34
    94de:	bd00      	pop	{pc}
    94e0:	00026420 	.word	0x00026420

000094e4 <eeprom::setDefaultCoolingFan(unsigned short)>:
*/
/**
 *
 * @param eeprom_base start of eeprom map of cooling settings
 */
void setDefaultCoolingFan(uint16_t eeprom_base){
    94e4:	b510      	push	{r4, lr}
    94e6:	4604      	mov	r4, r0

	uint8_t fan_settings[] = {1, DEFAULT_COOLING_FAN_SETPOINT_C};
	setEeprom8(eeprom_base + cooler_eeprom_offsets::ENABLE_OFFSET, fan_settings[0]);
    94e8:	f04f 0101 	mov.w	r1, #1
    94ec:	f006 ff94 	bl	10418 <eeprom::setEeprom8(unsigned short, unsigned char)>
	setEeprom8(eeprom_base + cooler_eeprom_offsets::ENABLE_OFFSET+1, fan_settings[1]);
    94f0:	f104 0001 	add.w	r0, r4, #1
    94f4:	b280      	uxth	r0, r0
    94f6:	f04f 0132 	mov.w	r1, #50	; 0x32
    94fa:	f006 ff8d 	bl	10418 <eeprom::setEeprom8(unsigned short, unsigned char)>
//    eeprom_write_block( fan_settings, (uint8_t*)(eeprom_base + cooler_eeprom_offsets::ENABLE_OFFSET),2);
}
    94fe:	bd10      	pop	{r4, pc}

00009500 <eeprom::setDefaultPID(unsigned short)>:
/**
 * Start of PID block of EEPROM. Can be extruder or HPB
 * @param eeprom_base
 */
void setDefaultPID(uint16_t eeprom_base)
{
    9500:	b510      	push	{r4, lr}
    9502:	4604      	mov	r4, r0
	setEeprom16(eeprom_base + pid_eeprom_offsets::P_TERM_OFFSET, DEFAULT_P_VALUE);
    9504:	f04f 0107 	mov.w	r1, #7
    9508:	f006 fffa 	bl	10500 <eeprom::setEeprom16(unsigned short, unsigned short)>
	setEeprom16(eeprom_base + pid_eeprom_offsets::I_TERM_OFFSET, DEFAULT_I_VALUE);
    950c:	f104 0002 	add.w	r0, r4, #2
    9510:	b280      	uxth	r0, r0
    9512:	f04f 0100 	mov.w	r1, #0
    9516:	f006 fff3 	bl	10500 <eeprom::setEeprom16(unsigned short, unsigned short)>
	setEeprom16(eeprom_base + pid_eeprom_offsets::D_TERM_OFFSET, DEFAULT_D_VALUE);
    951a:	f104 0004 	add.w	r0, r4, #4
    951e:	b280      	uxth	r0, r0
    9520:	f04f 0124 	mov.w	r1, #36	; 0x24
    9524:	f006 ffec 	bl	10500 <eeprom::setEeprom16(unsigned short, unsigned short)>
//	setEepromFixed16(( eeprom_base + pid_eeprom_offsets::P_TERM_OFFSET ), DEFAULT_P_VALUE);
//	setEepromFixed16(( eeprom_base + pid_eeprom_offsets::I_TERM_OFFSET ), DEFAULT_I_VALUE);
//	setEepromFixed16(( eeprom_base + pid_eeprom_offsets::D_TERM_OFFSET ), DEFAULT_D_VALUE);
}
    9528:	bd10      	pop	{r4, pc}
    952a:	bf00      	nop

0000952c <eeprom::setDefaultsExtruder(int, unsigned short)>:
 *
 * @param index
 * @param eeprom_base start of this extruder's data in the eeprom
 */
void setDefaultsExtruder(int index,uint16_t eeprom_base)
{
    952c:	b510      	push	{r4, lr}
    952e:	460c      	mov	r4, r1
	uint8_t featuresT0 = eeprom_info::HEATER_0_PRESENT | eeprom_info::HEATER_0_THERMISTOR | eeprom_info::HEATER_0_THERMOCOUPLE;
	uint8_t featuresT1 = eeprom_info::HEATER_1_PRESENT | eeprom_info::HEATER_1_THERMISTOR | eeprom_info::HEATER_1_THERMOCOUPLE;
	if( index == 0 ){
    9530:	b960      	cbnz	r0, 954c <eeprom::setDefaultsExtruder(int, unsigned short)+0x20>
		int slaveId = '12';
		setEeprom8(eeprom_base + toolhead_eeprom_offsets::FEATURES, featuresT0);
    9532:	4608      	mov	r0, r1
    9534:	f04f 0107 	mov.w	r1, #7
    9538:	f006 ff6e 	bl	10418 <eeprom::setEeprom8(unsigned short, unsigned char)>
		setEeprom8(eeprom_base + toolhead_eeprom_offsets::SLAVE_ID, slaveId);
    953c:	f104 0018 	add.w	r0, r4, #24
    9540:	b280      	uxth	r0, r0
    9542:	f04f 0132 	mov.w	r1, #50	; 0x32
    9546:	f006 ff67 	bl	10418 <eeprom::setEeprom8(unsigned short, unsigned char)>
    954a:	e00b      	b.n	9564 <eeprom::setDefaultsExtruder(int, unsigned short)+0x38>
//	    eeprom_write_byte( (uint8_t*)(eeprom_base + toolhead_eeprom_offsets::FEATURES),featuresT0);
//		eeprom_write_byte( (uint8_t*)eeprom_base +toolhead_eeprom_offsets::SLAVE_ID,slaveId);
	}
	else{
		int slaveId = '32';
		setEeprom8(eeprom_base + toolhead_eeprom_offsets::FEATURES, featuresT1);
    954c:	4608      	mov	r0, r1
    954e:	f04f 0138 	mov.w	r1, #56	; 0x38
    9552:	f006 ff61 	bl	10418 <eeprom::setEeprom8(unsigned short, unsigned char)>
		setEeprom8(eeprom_base + toolhead_eeprom_offsets::SLAVE_ID, slaveId);
    9556:	f104 0018 	add.w	r0, r4, #24
    955a:	b280      	uxth	r0, r0
    955c:	f04f 0132 	mov.w	r1, #50	; 0x32
    9560:	f006 ff5a 	bl	10418 <eeprom::setEeprom8(unsigned short, unsigned char)>
//		eeprom_write_byte( (uint8_t*)(eeprom_base + toolhead_eeprom_offsets::FEATURES),featuresT1);
//		eeprom_write_byte( (uint8_t*)eeprom_base +toolhead_eeprom_offsets::SLAVE_ID,slaveId);
	}
	setDefaultPID(eeprom_base + toolhead_eeprom_offsets::EXTRUDER_PID_BASE);
    9564:	f104 000a 	add.w	r0, r4, #10
    9568:	b280      	uxth	r0, r0
    956a:	f7ff ffc9 	bl	9500 <eeprom::setDefaultPID(unsigned short)>
    setDefaultPID(eeprom_base + toolhead_eeprom_offsets::HBP_PID_BASE);
    956e:	f104 0010 	add.w	r0, r4, #16
    9572:	b280      	uxth	r0, r0
    9574:	f7ff ffc4 	bl	9500 <eeprom::setDefaultPID(unsigned short)>
    setDefaultCoolingFan(eeprom_base + toolhead_eeprom_offsets::COOLING_FAN_SETTINGS);
    9578:	f104 001a 	add.w	r0, r4, #26
    957c:	b280      	uxth	r0, r0
    957e:	f7ff ffb1 	bl	94e4 <eeprom::setDefaultCoolingFan(unsigned short)>

    setEeprom16(eeprom_base + toolhead_eeprom_offsets::BACKOFF_FORWARD_TIME, 500);
    9582:	f104 0006 	add.w	r0, r4, #6
    9586:	b280      	uxth	r0, r0
    9588:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    958c:	f006 ffb8 	bl	10500 <eeprom::setEeprom16(unsigned short, unsigned short)>
    setEeprom16(eeprom_base + toolhead_eeprom_offsets::BACKOFF_STOP_TIME, 5);
    9590:	f104 0002 	add.w	r0, r4, #2
    9594:	b280      	uxth	r0, r0
    9596:	f04f 0105 	mov.w	r1, #5
    959a:	f006 ffb1 	bl	10500 <eeprom::setEeprom16(unsigned short, unsigned short)>
    setEeprom16(eeprom_base + toolhead_eeprom_offsets::BACKOFF_REVERSE_TIME, 500);
    959e:	f104 0004 	add.w	r0, r4, #4
    95a2:	b280      	uxth	r0, r0
    95a4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    95a8:	f006 ffaa 	bl	10500 <eeprom::setEeprom16(unsigned short, unsigned short)>
    setEeprom16(eeprom_base + toolhead_eeprom_offsets::BACKOFF_TRIGGER_TIME, 300);
    95ac:	f104 0008 	add.w	r0, r4, #8
    95b0:	b280      	uxth	r0, r0
    95b2:	f44f 7196 	mov.w	r1, #300	; 0x12c
    95b6:	f006 ffa3 	bl	10500 <eeprom::setEeprom16(unsigned short, unsigned short)>
//    eeprom_write_word((uint16_t*)(eeprom_base + toolhead_eeprom_offsets::BACKOFF_FORWARD_TIME),500);
//    eeprom_write_word((uint16_t*)(eeprom_base + toolhead_eeprom_offsets::BACKOFF_STOP_TIME),5);
//    eeprom_write_word((uint16_t*)(eeprom_base + toolhead_eeprom_offsets::BACKOFF_REVERSE_TIME),500);
//    eeprom_write_word((uint16_t*)(eeprom_base + toolhead_eeprom_offsets::BACKOFF_TRIGGER_TIME),300);
}
    95ba:	bd10      	pop	{r4, pc}

000095bc <eeprom::SetDefaultsThermal(unsigned short)>:
/**
 * Set thermal table offsets
 * @param eeprom_base
 */
void SetDefaultsThermal(uint16_t eeprom_base)
{
    95bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    95be:	4604      	mov	r4, r0
    setEeprom16(eeprom_base + therm_eeprom_offsets::THERM_R0_OFFSET, THERM_R0_DEFAULT_VALUE);
    95c0:	f248 61a0 	movw	r1, #34464	; 0x86a0
    95c4:	f006 ff9c 	bl	10500 <eeprom::setEeprom16(unsigned short, unsigned short)>
    setEeprom16(eeprom_base + therm_eeprom_offsets::THERM_T0_OFFSET, THERM_T0_DEFAULT_VALUE);
    95c8:	f104 0004 	add.w	r0, r4, #4
    95cc:	b280      	uxth	r0, r0
    95ce:	f04f 0119 	mov.w	r1, #25
    95d2:	f006 ff95 	bl	10500 <eeprom::setEeprom16(unsigned short, unsigned short)>
    setEeprom16(eeprom_base + therm_eeprom_offsets::THERM_BETA_OFFSET, THERM_BETA_DEFAULT_VALUE);
    95d6:	f104 0008 	add.w	r0, r4, #8
    95da:	b280      	uxth	r0, r0
    95dc:	f640 71e3 	movw	r1, #4067	; 0xfe3
    95e0:	f006 ff8e 	bl	10500 <eeprom::setEeprom16(unsigned short, unsigned short)>
    95e4:	f104 0410 	add.w	r4, r4, #16
    95e8:	b2a4      	uxth	r4, r4
    95ea:	f04f 0600 	mov.w	r6, #0
//	eeprom_write_dword( (uint32_t*)(eeprom_base + therm_eeprom_offsets::THERM_R0_OFFSET), THERM_R0_DEFAULT_VALUE);
//	eeprom_write_dword( (uint32_t*)(eeprom_base + therm_eeprom_offsets::THERM_T0_OFFSET), THERM_T0_DEFAULT_VALUE);
//	eeprom_write_dword( (uint32_t*)(eeprom_base + therm_eeprom_offsets::THERM_BETA_OFFSET), THERM_BETA_DEFAULT_VALUE);
	/// write the default thermal table.
	for(uint8_t i=0;i<NUMTEMPS;i++){
		setEeprom16(eeprom_base + therm_eeprom_offsets::THERM_DATA_OFFSET+i, default_therm_table[i].adc);
    95ee:	f64a 6780 	movw	r7, #44672	; 0xae80
    95f2:	f2c0 0702 	movt	r7, #2
    95f6:	19f5      	adds	r5, r6, r7
    95f8:	4620      	mov	r0, r4
    95fa:	5bb9      	ldrh	r1, [r7, r6]
    95fc:	f006 ff80 	bl	10500 <eeprom::setEeprom16(unsigned short, unsigned short)>
		setEeprom16(eeprom_base + therm_eeprom_offsets::THERM_DATA_OFFSET+i+2, default_therm_table[i].value);
    9600:	f104 0002 	add.w	r0, r4, #2
    9604:	b280      	uxth	r0, r0
    9606:	8869      	ldrh	r1, [r5, #2]
    9608:	f006 ff7a 	bl	10500 <eeprom::setEeprom16(unsigned short, unsigned short)>
    960c:	f106 0604 	add.w	r6, r6, #4
    9610:	f104 0401 	add.w	r4, r4, #1
    9614:	b2a4      	uxth	r4, r4
//	xprintf("%x %d" " (%s:%d)\n",EEPROM_START_ADDRESS + (eeprom_base + therm_eeprom_offsets::THERM_BETA_OFFSET)*4,eeprom_address(EEPROM_START_ADDRESS, eeprom_base + therm_eeprom_offsets::THERM_BETA_OFFSET),_F_,_L_);
//	eeprom_write_dword( (uint32_t*)(eeprom_base + therm_eeprom_offsets::THERM_R0_OFFSET), THERM_R0_DEFAULT_VALUE);
//	eeprom_write_dword( (uint32_t*)(eeprom_base + therm_eeprom_offsets::THERM_T0_OFFSET), THERM_T0_DEFAULT_VALUE);
//	eeprom_write_dword( (uint32_t*)(eeprom_base + therm_eeprom_offsets::THERM_BETA_OFFSET), THERM_BETA_DEFAULT_VALUE);
	/// write the default thermal table.
	for(uint8_t i=0;i<NUMTEMPS;i++){
    9616:	2e7c      	cmp	r6, #124	; 0x7c
    9618:	d1ed      	bne.n	95f6 <eeprom::SetDefaultsThermal(unsigned short)+0x3a>
//		xprintf("%x %d" " (%s:%d)\n",EEPROM_START_ADDRESS + (eeprom_base + therm_eeprom_offsets::THERM_DATA_OFFSET+i)*4,eeprom_address(EEPROM_START_ADDRESS, eeprom_base + therm_eeprom_offsets::THERM_DATA_OFFSET+i),_F_,_L_);
//		xprintf("%x %d" " (%s:%d)\n",EEPROM_START_ADDRESS + (eeprom_base + therm_eeprom_offsets::THERM_DATA_OFFSET+i+1)*4,eeprom_address(EEPROM_START_ADDRESS, eeprom_base + therm_eeprom_offsets::THERM_DATA_OFFSET+i+1),_F_,_L_);
	}
	//	eeprom_write_block( (const uint8_t*)default_therm_table,
//			(uint8_t*)(eeprom_base + therm_eeprom_offsets::THERM_DATA_OFFSET), sizeof(uint16_t)*2*NUMTEMPS);
}
    961a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000961c <eeprom::setDefaultLedEffects(unsigned short)>:
/**
 *
 * @param eeprom_base start of Led effects table
 */
void setDefaultLedEffects(uint16_t eeprom_base)
{
    961c:	b510      	push	{r4, lr}
    961e:	4604      	mov	r4, r0
	Color colors;

	// default color is white
	setEeprom8(eeprom_base + blink_eeprom_offsets::BASIC_COLOR_OFFSET, LED_DEFAULT_WHITE);
    9620:	f04f 0100 	mov.w	r1, #0
    9624:	f006 fef8 	bl	10418 <eeprom::setEeprom8(unsigned short, unsigned char)>
	setEeprom8(eeprom_base + blink_eeprom_offsets::LED_HEAT_OFFSET, 1);
    9628:	f104 0002 	add.w	r0, r4, #2
    962c:	b280      	uxth	r0, r0
    962e:	f04f 0101 	mov.w	r1, #1
    9632:	f006 fef1 	bl	10418 <eeprom::setEeprom8(unsigned short, unsigned char)>
//	eeprom_write_byte((uint8_t*)(eeprom_base + blink_eeprom_offsets::BASIC_COLOR_OFFSET), LED_DEFAULT_WHITE);
//	eeprom_write_byte((uint8_t*)(eeprom_base + blink_eeprom_offsets::LED_HEAT_OFFSET), 1);
    
	colors.red=0xFF; colors.green =colors.blue =0x00;
	setEeprom8(eeprom_base + blink_eeprom_offsets::CUSTOM_COLOR_OFFSET, colors.red);
    9636:	f104 0004 	add.w	r0, r4, #4
    963a:	b280      	uxth	r0, r0
    963c:	f04f 01ff 	mov.w	r1, #255	; 0xff
    9640:	f006 feea 	bl	10418 <eeprom::setEeprom8(unsigned short, unsigned char)>
	setEeprom8(eeprom_base + blink_eeprom_offsets::CUSTOM_COLOR_OFFSET+1, colors.green);
    9644:	f104 0005 	add.w	r0, r4, #5
    9648:	b280      	uxth	r0, r0
    964a:	f04f 0100 	mov.w	r1, #0
    964e:	f006 fee3 	bl	10418 <eeprom::setEeprom8(unsigned short, unsigned char)>
	setEeprom8(eeprom_base + blink_eeprom_offsets::CUSTOM_COLOR_OFFSET+2, colors.blue);
    9652:	f104 0006 	add.w	r0, r4, #6
    9656:	b280      	uxth	r0, r0
    9658:	f04f 0100 	mov.w	r1, #0
    965c:	f006 fedc 	bl	10418 <eeprom::setEeprom8(unsigned short, unsigned char)>

	//	eeprom_write_block((void*)&colors,(uint8_t*)(eeprom_base + blink_eeprom_offsets::CUSTOM_COLOR_OFFSET),sizeof(colors));
}
    9660:	bd10      	pop	{r4, pc}
    9662:	bf00      	nop

00009664 <eeprom::setCustomColor(unsigned char, unsigned char, unsigned char)>:
     * @param red value
     * @param green value
     * @param blue value
     */

void setCustomColor(uint8_t red, uint8_t green, uint8_t blue){
    9664:	b538      	push	{r3, r4, r5, lr}
    9666:	4603      	mov	r3, r0
    9668:	460d      	mov	r5, r1
    966a:	4614      	mov	r4, r2
	
//	eeprom_address(EEPROM_START_ADDRESS, eeprom_offsets::LED_STRIP_SETTINGS + blink_eeprom_offsets::BASIC_COLOR_OFFSET) = LED_DEFAULT_CUSTOM;
//	eeprom_write_byte((uint8_t*)(eeprom_offsets::LED_STRIP_SETTINGS + blink_eeprom_offsets::BASIC_COLOR_OFFSET), LED_DEFAULT_CUSTOM);
	
	colors.red=red; colors.green = green; colors.blue =blue;
	setEeprom8(eeprom_offsets::LED_STRIP_SETTINGS + blink_eeprom_offsets::CUSTOM_COLOR_OFFSET, colors.red);
    966c:	f44f 70a2 	mov.w	r0, #324	; 0x144
    9670:	4619      	mov	r1, r3
    9672:	f006 fed1 	bl	10418 <eeprom::setEeprom8(unsigned short, unsigned char)>
	setEeprom8(eeprom_offsets::LED_STRIP_SETTINGS + blink_eeprom_offsets::CUSTOM_COLOR_OFFSET+1, colors.green);
    9676:	f240 1045 	movw	r0, #325	; 0x145
    967a:	4629      	mov	r1, r5
    967c:	f006 fecc 	bl	10418 <eeprom::setEeprom8(unsigned short, unsigned char)>
	setEeprom8(eeprom_offsets::LED_STRIP_SETTINGS + blink_eeprom_offsets::CUSTOM_COLOR_OFFSET+2, colors.blue);
    9680:	f44f 70a3 	mov.w	r0, #326	; 0x146
    9684:	4621      	mov	r1, r4
    9686:	f006 fec7 	bl	10418 <eeprom::setEeprom8(unsigned short, unsigned char)>
	//	eeprom_write_block((void*)&colors,(uint8_t*)(eeprom_offsets::LED_STRIP_SETTINGS + blink_eeprom_offsets::CUSTOM_COLOR_OFFSET),sizeof(colors));
}
    968a:	bd38      	pop	{r3, r4, r5, pc}

0000968c <eeprom::eeprom_write_sound(Sound, unsigned short)>:
     *
     * @param sound desired
     * @param dest in eeprom
     */   
void eeprom_write_sound(Sound sound, uint16_t dest)
{
    968c:	b510      	push	{r4, lr}
    968e:	b082      	sub	sp, #8
    9690:	9001      	str	r0, [sp, #4]
    9692:	460c      	mov	r4, r1
	setEeprom16(dest,sound.freq);
    9694:	b281      	uxth	r1, r0
    9696:	4620      	mov	r0, r4
    9698:	f006 ff32 	bl	10500 <eeprom::setEeprom16(unsigned short, unsigned short)>
	setEeprom16(dest + 2, sound.durationMs);
    969c:	f104 0002 	add.w	r0, r4, #2
    96a0:	b280      	uxth	r0, r0
    96a2:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    96a6:	f006 ff2b 	bl	10500 <eeprom::setEeprom16(unsigned short, unsigned short)>
//	eeprom_write_word((uint16_t*)dest, 	sound.freq);
//	eeprom_write_word((uint16_t*)dest + 2, sound.durationMs);
}
    96aa:	b002      	add	sp, #8
    96ac:	bd10      	pop	{r4, pc}
    96ae:	bf00      	nop

000096b0 <eeprom::setDefaultBuzzEffects(unsigned short)>:
/**
 *
 * @param eeprom_base start of buzz effects table
 */
void setDefaultBuzzEffects(uint16_t eeprom_base)
{
    96b0:	b500      	push	{lr}
    96b2:	b083      	sub	sp, #12
    96b4:	4601      	mov	r1, r0
	Sound blare = {NOTE_B2, 500};
    96b6:	f246 33cc 	movw	r3, #25548	; 0x63cc
    96ba:	f2c0 0302 	movt	r3, #2
    96be:	6818      	ldr	r0, [r3, #0]
    96c0:	9001      	str	r0, [sp, #4]
	eeprom_write_sound(blare,eeprom_base + buzz_eeprom_offsets::BASIC_BUZZ_OFFSET);
    96c2:	9801      	ldr	r0, [sp, #4]
    96c4:	f7ff ffe2 	bl	968c <eeprom::eeprom_write_sound(Sound, unsigned short)>
}
    96c8:	b003      	add	sp, #12
    96ca:	bd00      	pop	{pc}

000096cc <eeprom::setDefaultsPreheat(unsigned short)>:
/**
 *
 * @param eeprom_base start of preheat settings table
 */
void setDefaultsPreheat(uint16_t eeprom_base)
{
    96cc:	b510      	push	{r4, lr}
    96ce:	4604      	mov	r4, r0
	setEeprom16(eeprom_base + preheat_eeprom_offsets::PREHEAT_RIGHT_OFFSET, 220);
    96d0:	f04f 01dc 	mov.w	r1, #220	; 0xdc
    96d4:	f006 ff14 	bl	10500 <eeprom::setEeprom16(unsigned short, unsigned short)>
	setEeprom16(eeprom_base + preheat_eeprom_offsets::PREHEAT_LEFT_OFFSET, 220);
    96d8:	f104 0002 	add.w	r0, r4, #2
    96dc:	b280      	uxth	r0, r0
    96de:	f04f 01dc 	mov.w	r1, #220	; 0xdc
    96e2:	f006 ff0d 	bl	10500 <eeprom::setEeprom16(unsigned short, unsigned short)>
	setEeprom16(eeprom_base + preheat_eeprom_offsets::PREHEAT_PLATFORM_OFFSET, 110);
    96e6:	f104 0004 	add.w	r0, r4, #4
    96ea:	b280      	uxth	r0, r0
    96ec:	f04f 016e 	mov.w	r1, #110	; 0x6e
    96f0:	f006 ff06 	bl	10500 <eeprom::setEeprom16(unsigned short, unsigned short)>
	setEeprom16(eeprom_base + preheat_eeprom_offsets::PREHEAT_ON_OFF_OFFSET, (1<<HEAT_MASK_RIGHT) + (1<<HEAT_MASK_PLATFORM));
    96f4:	f104 0006 	add.w	r0, r4, #6
    96f8:	b280      	uxth	r0, r0
    96fa:	f04f 0105 	mov.w	r1, #5
    96fe:	f006 feff 	bl	10500 <eeprom::setEeprom16(unsigned short, unsigned short)>
//    eeprom_write_word((uint16_t*)(eeprom_base + preheat_eeprom_offsets::PREHEAT_RIGHT_OFFSET), 220);
//    eeprom_write_word((uint16_t*)(eeprom_base + preheat_eeprom_offsets::PREHEAT_LEFT_OFFSET), 220);
//    eeprom_write_word((uint16_t*)(eeprom_base + preheat_eeprom_offsets::PREHEAT_PLATFORM_OFFSET), 110);
//    eeprom_write_byte((uint8_t*)(eeprom_base + preheat_eeprom_offsets::PREHEAT_ON_OFF_OFFSET), (1<<HEAT_MASK_RIGHT) + (1<<HEAT_MASK_PLATFORM));
}
    9702:	bd10      	pop	{r4, pc}

00009704 <eeprom::setDefaultsAcceleration()>:
/**
 *
 * break with the form here as eeprom_base is available in class and we
 * want to cleanly call this function externally
 */
void setDefaultsAcceleration(){
    9704:	b508      	push	{r3, lr}
//	xprintf("%x" " (%s:%d)\n",eeprom_address(EEPROM_START_ADDRESS, eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::ACTIVE_OFFSET),_F_,_L_);
//	xprintf("%x" " (%s:%d)\n",(EEPROM_START_ADDRESS + eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::ACTIVE_OFFSET),_F_,_L_);
//	_delay_us(10000);
	setEeprom8(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::ACTIVE_OFFSET, 0x01);
    9706:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    970a:	f04f 0101 	mov.w	r1, #1
    970e:	f006 fe83 	bl	10418 <eeprom::setEeprom8(unsigned short, unsigned char)>
	setEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::ACCELERATION_RATE_OFFSET, DEFAULT_ACCELERATION);
    9712:	f44f 70b8 	mov.w	r0, #368	; 0x170
    9716:	f640 31b8 	movw	r1, #3000	; 0xbb8
    971a:	f006 fef1 	bl	10500 <eeprom::setEeprom16(unsigned short, unsigned short)>
//    eeprom_write_byte((uint8_t*)(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::ACTIVE_OFFSET), 0x00);
//    eeprom_write_word((uint16_t*)(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::ACCELERATION_RATE_OFFSET), DEFAULT_ACCELERATION);
    
	setEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_RATES_OFFSET + 0, DEFAULT_X_ACCELERATION);
    971e:	f44f 70b9 	mov.w	r0, #370	; 0x172
    9722:	f640 31b8 	movw	r1, #3000	; 0xbb8
    9726:	f006 feeb 	bl	10500 <eeprom::setEeprom16(unsigned short, unsigned short)>
	setEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_RATES_OFFSET + 2, DEFAULT_Y_ACCELERATION);
    972a:	f44f 70ba 	mov.w	r0, #372	; 0x174
    972e:	f640 31b8 	movw	r1, #3000	; 0xbb8
    9732:	f006 fee5 	bl	10500 <eeprom::setEeprom16(unsigned short, unsigned short)>
	setEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_RATES_OFFSET + 4, DEFAULT_Z_ACCELERATION);
    9736:	f44f 70bb 	mov.w	r0, #374	; 0x176
    973a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    973e:	f006 fedf 	bl	10500 <eeprom::setEeprom16(unsigned short, unsigned short)>
	setEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_RATES_OFFSET + 6, DEFAULT_A_ACCELERATION);
    9742:	f44f 70bc 	mov.w	r0, #376	; 0x178
    9746:	f640 31b8 	movw	r1, #3000	; 0xbb8
    974a:	f006 fed9 	bl	10500 <eeprom::setEeprom16(unsigned short, unsigned short)>
	setEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_RATES_OFFSET + 8, DEFAULT_B_ACCELERATION);
    974e:	f44f 70bd 	mov.w	r0, #378	; 0x17a
    9752:	f640 31b8 	movw	r1, #3000	; 0xbb8
    9756:	f006 fed3 	bl	10500 <eeprom::setEeprom16(unsigned short, unsigned short)>
//	eeprom_write_word((uint16_t*)(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_RATES_OFFSET + 2), DEFAULT_Y_ACCELERATION);
//	eeprom_write_word((uint16_t*)(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_RATES_OFFSET + 4), DEFAULT_Z_ACCELERATION);
//	eeprom_write_word((uint16_t*)(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_RATES_OFFSET + 6), DEFAULT_A_ACCELERATION);
//	eeprom_write_word((uint16_t*)(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_RATES_OFFSET + 8), DEFAULT_B_ACCELERATION);

	setEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_JERK_OFFSET + 0, DEFAULT_MAX_XY_JERK);
    975a:	f44f 70be 	mov.w	r0, #380	; 0x17c
    975e:	f04f 0114 	mov.w	r1, #20
    9762:	f006 fecd 	bl	10500 <eeprom::setEeprom16(unsigned short, unsigned short)>
	setEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_JERK_OFFSET + 4, DEFAULT_MAX_Z_JERK);
    9766:	f44f 70c0 	mov.w	r0, #384	; 0x180
    976a:	f04f 0101 	mov.w	r1, #1
    976e:	f006 fec7 	bl	10500 <eeprom::setEeprom16(unsigned short, unsigned short)>
	setEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_JERK_OFFSET + 6, DEFAULT_MAX_A_JERK);
    9772:	f44f 70c1 	mov.w	r0, #386	; 0x182
    9776:	f04f 0102 	mov.w	r1, #2
    977a:	f006 fec1 	bl	10500 <eeprom::setEeprom16(unsigned short, unsigned short)>
	setEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_JERK_OFFSET + 8, DEFAULT_MAX_B_JERK);
    977e:	f44f 70c2 	mov.w	r0, #388	; 0x184
    9782:	f04f 0102 	mov.w	r1, #2
    9786:	f006 febb 	bl	10500 <eeprom::setEeprom16(unsigned short, unsigned short)>
//	setEepromFixed16((eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_JERK_OFFSET + 0), DEFAULT_MAX_XY_JERK);
//	setEepromFixed16((eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_JERK_OFFSET + 4), DEFAULT_MAX_Z_JERK);
//	setEepromFixed16((eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_JERK_OFFSET + 6), DEFAULT_MAX_A_JERK);
//	setEepromFixed16((eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_JERK_OFFSET + 8), DEFAULT_MAX_B_JERK);
	
	setEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::MINIMUM_SPEED, DEFAULT_MIN_SPEED);
    978a:	f44f 70c3 	mov.w	r0, #390	; 0x186
    978e:	f04f 010f 	mov.w	r1, #15
    9792:	f006 feb5 	bl	10500 <eeprom::setEeprom16(unsigned short, unsigned short)>
//	eeprom_write_word((uint16_t*)(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::MINIMUM_SPEED), DEFAULT_MIN_SPEED);
	
	setEeprom8(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::DEFAULTS_FLAG, _BV(ACCELERATION_INIT_BIT));
    9796:	f44f 70c4 	mov.w	r0, #392	; 0x188
    979a:	f04f 0180 	mov.w	r1, #128	; 0x80
    979e:	f006 fe3b 	bl	10418 <eeprom::setEeprom8(unsigned short, unsigned char)>
//	eeprom_write_byte((uint8_t*)(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::DEFAULTS_FLAG), _BV(ACCELERATION_INIT_BIT));
}
    97a2:	bd08      	pop	{r3, pc}

000097a4 <eeprom::isSingleTool()>:
	// update XY axis offsets to match tool head settins
	setDefaultAxisHomePositions();
}

    // check single / dual tool status
bool isSingleTool(){
    97a4:	b508      	push	{r3, lr}
	return (getEeprom8(eeprom_offsets::TOOL_COUNT, 1) == 1);
    97a6:	f04f 0042 	mov.w	r0, #66	; 0x42
    97aa:	f04f 0101 	mov.w	r1, #1
    97ae:	f006 fe11 	bl	103d4 <eeprom::getEeprom8(unsigned short, unsigned char)>
}
    97b2:	2801      	cmp	r0, #1
    97b4:	bf14      	ite	ne
    97b6:	2000      	movne	r0, #0
    97b8:	2001      	moveq	r0, #1
    97ba:	bd08      	pop	{r3, pc}

000097bc <eeprom::setDefaultAxisHomePositions()>:
}

/// Writes to EEPROM the default toolhead 'home' values to idicate toolhead offset
/// from idealized point-center of the toolhead
void setDefaultAxisHomePositions()
{
    97bc:	b530      	push	{r4, r5, lr}
    97be:	b087      	sub	sp, #28
	uint32_t homes[5] = {replicator_axis_offsets::DUAL_X_OFFSET_STEPS,replicator_axis_offsets::DUAL_Y_OFFSET_STEPS,0,0,0};
    97c0:	ac01      	add	r4, sp, #4
    97c2:	4d0e      	ldr	r5, [pc, #56]	; (97fc <eeprom::setDefaultAxisHomePositions()+0x40>)
    97c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    97c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    97c8:	682b      	ldr	r3, [r5, #0]
    97ca:	6023      	str	r3, [r4, #0]
	if(isSingleTool()){
    97cc:	f7ff ffea 	bl	97a4 <eeprom::isSingleTool()>
    97d0:	b128      	cbz	r0, 97de <eeprom::setDefaultAxisHomePositions()+0x22>
		homes[0] = replicator_axis_offsets::SINGLE_X_OFFSET_STEPS;
    97d2:	f243 73e5 	movw	r3, #14309	; 0x37e5
    97d6:	9301      	str	r3, [sp, #4]
		homes[1] = replicator_axis_offsets::SINGLE_Y_OFFSET_STEPS;
    97d8:	f641 237a 	movw	r3, #6778	; 0x1a7a
    97dc:	9302      	str	r3, [sp, #8]
    97de:	466d      	mov	r5, sp
}

/// Writes to EEPROM the default toolhead 'home' values to idicate toolhead offset
/// from idealized point-center of the toolhead
void setDefaultAxisHomePositions()
{
    97e0:	f04f 040e 	mov.w	r4, #14
		homes[0] = replicator_axis_offsets::SINGLE_X_OFFSET_STEPS;
		homes[1] = replicator_axis_offsets::SINGLE_Y_OFFSET_STEPS;
	}
	for (uint8_t i=0;i<5;i++){
//		xprintf("%x" " (%s:%d)\n",(EEPROM_START_ADDRESS + (eeprom_offsets::AXIS_HOME_POSITIONS_STEPS+i)*4),_F_,_L_);
		setEeprom32(eeprom_offsets::AXIS_HOME_POSITIONS_STEPS+(i*4), homes[i]);
    97e4:	4620      	mov	r0, r4
    97e6:	f855 1f04 	ldr.w	r1, [r5, #4]!
    97ea:	f006 fead 	bl	10548 <eeprom::setEeprom32(unsigned short, unsigned long)>
    97ee:	f104 0404 	add.w	r4, r4, #4
    97f2:	b2a4      	uxth	r4, r4
	uint32_t homes[5] = {replicator_axis_offsets::DUAL_X_OFFSET_STEPS,replicator_axis_offsets::DUAL_Y_OFFSET_STEPS,0,0,0};
	if(isSingleTool()){
		homes[0] = replicator_axis_offsets::SINGLE_X_OFFSET_STEPS;
		homes[1] = replicator_axis_offsets::SINGLE_Y_OFFSET_STEPS;
	}
	for (uint8_t i=0;i<5;i++){
    97f4:	2c22      	cmp	r4, #34	; 0x22
    97f6:	d1f5      	bne.n	97e4 <eeprom::setDefaultAxisHomePositions()+0x28>
//		xprintf("%x" " (%s:%d)\n",(EEPROM_START_ADDRESS + (eeprom_offsets::AXIS_HOME_POSITIONS_STEPS+i)*4),_F_,_L_);
		setEeprom32(eeprom_offsets::AXIS_HOME_POSITIONS_STEPS+(i*4), homes[i]);
	}
//	eeprom_write_block((uint8_t*)&(homes[0]),(uint8_t*)(eeprom_offsets::AXIS_HOME_POSITIONS_STEPS), 20 );
}
    97f8:	b007      	add	sp, #28
    97fa:	bd30      	pop	{r4, r5, pc}
    97fc:	000263d0 	.word	0x000263d0

00009800 <eeprom::factoryResetEEPROM()>:
    
/// Does a factory reset (resets all defaults except home/endstops, axis direction and tool count)
void factoryResetEEPROM() {
    9800:	b530      	push	{r4, r5, lr}
    9802:	b087      	sub	sp, #28
	// Default: enstops inverted, Z axis inverted
	uint8_t endstop_invert = 0b10011111; // all endstops inverted

	uint8_t home_direction = 0b11011; // X,Y Max, Z min  (AB max - to never halt on edge in stepper interface)

	uint8_t vRefBase[] = {118,118,40,118,118};  //(AB maxed out)
    9804:	f246 33cc 	movw	r3, #25548	; 0x63cc
    9808:	f2c0 0302 	movt	r3, #2
    980c:	f853 0f18 	ldr.w	r0, [r3, #24]!
    9810:	9004      	str	r0, [sp, #16]
    9812:	791b      	ldrb	r3, [r3, #4]
    9814:	f88d 3014 	strb.w	r3, [sp, #20]
	uint16_t vidPid[] = {0x23C1, 0xB404};		/// PID/VID for the MightyBoard!

	/// Write 'MainBoard' settings
	char machine_name_in[] = "The Replicator";
    9818:	f246 4330 	movw	r3, #25648	; 0x6430
    981c:	f2c0 0302 	movt	r3, #2
    9820:	466c      	mov	r4, sp
    9822:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    9824:	c407      	stmia	r4!, {r0, r1, r2}
    9826:	f824 3b02 	strh.w	r3, [r4], #2
    982a:	ea4f 4313 	mov.w	r3, r3, lsr #16
    982e:	7023      	strb	r3, [r4, #0]
    9830:	f10d 35ff 	add.w	r5, sp, #4294967295
    9834:	f04f 0422 	mov.w	r4, #34	; 0x22
	for (uint8_t i=0;i<16;i++){
		setEeprom8(eeprom_offsets::MACHINE_NAME+i, machine_name_in[i]);
    9838:	4620      	mov	r0, r4
    983a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
    983e:	f006 fdeb 	bl	10418 <eeprom::setEeprom8(unsigned short, unsigned char)>
    9842:	f104 0401 	add.w	r4, r4, #1
    9846:	b2a4      	uxth	r4, r4
	uint8_t vRefBase[] = {118,118,40,118,118};  //(AB maxed out)
	uint16_t vidPid[] = {0x23C1, 0xB404};		/// PID/VID for the MightyBoard!

	/// Write 'MainBoard' settings
	char machine_name_in[] = "The Replicator";
	for (uint8_t i=0;i<16;i++){
    9848:	2c32      	cmp	r4, #50	; 0x32
    984a:	d1f5      	bne.n	9838 <eeprom::factoryResetEEPROM()+0x38>
    984c:	f10d 050f 	add.w	r5, sp, #15
    9850:	f04f 0406 	mov.w	r4, #6
		setEeprom8(eeprom_offsets::MACHINE_NAME+i, machine_name_in[i]);
//		xprintf("%x %c" " (%s:%d)\n",EEPROM_START_ADDRESS + (eeprom_offsets::MACHINE_NAME+i)*4,eeprom_address(EEPROM_START_ADDRESS, eeprom_offsets::MACHINE_NAME+i),_F_,_L_);
	}
//	eeprom_write_block("The Replicator",(uint8_t*)eeprom_offsets::MACHINE_NAME,20); // name is null
	for (uint8_t i=0;i<5;i++){
		setEeprom8(eeprom_offsets::DIGI_POT_SETTINGS+i, vRefBase[i]);
    9854:	4620      	mov	r0, r4
    9856:	f815 1f01 	ldrb.w	r1, [r5, #1]!
    985a:	f006 fddd 	bl	10418 <eeprom::setEeprom8(unsigned short, unsigned char)>
    985e:	f104 0401 	add.w	r4, r4, #1
    9862:	b2a4      	uxth	r4, r4
	for (uint8_t i=0;i<16;i++){
		setEeprom8(eeprom_offsets::MACHINE_NAME+i, machine_name_in[i]);
//		xprintf("%x %c" " (%s:%d)\n",EEPROM_START_ADDRESS + (eeprom_offsets::MACHINE_NAME+i)*4,eeprom_address(EEPROM_START_ADDRESS, eeprom_offsets::MACHINE_NAME+i),_F_,_L_);
	}
//	eeprom_write_block("The Replicator",(uint8_t*)eeprom_offsets::MACHINE_NAME,20); // name is null
	for (uint8_t i=0;i<5;i++){
    9864:	2c0b      	cmp	r4, #11
    9866:	d1f5      	bne.n	9854 <eeprom::factoryResetEEPROM()+0x54>
		setEeprom8(eeprom_offsets::DIGI_POT_SETTINGS+i, vRefBase[i]);
//		xprintf("%x %c" " (%s:%d)\n",EEPROM_START_ADDRESS + (eeprom_offsets::DIGI_POT_SETTINGS+i)*4,eeprom_address(EEPROM_START_ADDRESS, eeprom_offsets::DIGI_POT_SETTINGS+i),_F_,_L_);
	}
//	eeprom_write_block(&(vRefBase[0]),(uint8_t*)(eeprom_offsets::DIGI_POT_SETTINGS), 5 );
	setEeprom8(eeprom_offsets::ENDSTOP_INVERSION, endstop_invert);
    9868:	f04f 0004 	mov.w	r0, #4
    986c:	f04f 019f 	mov.w	r1, #159	; 0x9f
    9870:	f006 fdd2 	bl	10418 <eeprom::setEeprom8(unsigned short, unsigned char)>
//	eeprom_write_byte((uint8_t*)eeprom_offsets::ENDSTOP_INVERSION, endstop_invert);
	setEeprom8(eeprom_offsets::AXIS_HOME_DIRECTION, home_direction);
    9874:	f04f 000c 	mov.w	r0, #12
    9878:	f04f 011b 	mov.w	r1, #27
    987c:	f006 fdcc 	bl	10418 <eeprom::setEeprom8(unsigned short, unsigned char)>
//	eeprom_write_byte((uint8_t*)eeprom_offsets::AXIS_HOME_DIRECTION, home_direction);
    

	setDefaultAxisHomePositions();
    9880:	f7ff ff9c 	bl	97bc <eeprom::setDefaultAxisHomePositions()>
    9884:	4d22      	ldr	r5, [pc, #136]	; (9910 <eeprom::factoryResetEEPROM()+0x110>)
    9886:	f44f 74c6 	mov.w	r4, #396	; 0x18c
    
    /// store the default axis lengths for the machine
    for (uint8_t i=0;i<5;i++){
    	setEeprom32(eeprom_offsets::AXIS_LENGTHS+(i*4), replicator_axis_lengths::axis_lengths[i]);
    988a:	4620      	mov	r0, r4
    988c:	f855 1f04 	ldr.w	r1, [r5, #4]!
    9890:	f006 fe5a 	bl	10548 <eeprom::setEeprom32(unsigned short, unsigned long)>
    9894:	f104 0404 	add.w	r4, r4, #4
    9898:	b2a4      	uxth	r4, r4
    

	setDefaultAxisHomePositions();
    
    /// store the default axis lengths for the machine
    for (uint8_t i=0;i<5;i++){
    989a:	f5b4 7fd0 	cmp.w	r4, #416	; 0x1a0
    989e:	d1f4      	bne.n	988a <eeprom::factoryResetEEPROM()+0x8a>
    	setEeprom32(eeprom_offsets::AXIS_LENGTHS+(i*4), replicator_axis_lengths::axis_lengths[i]);
    }
//    eeprom_write_block((uint8_t*)&(replicator_axis_lengths::axis_lengths[0]), (uint8_t*)(eeprom_offsets::AXIS_LENGTHS), 20);
    
    setDefaultsAcceleration();
    98a0:	f7ff ff30 	bl	9704 <eeprom::setDefaultsAcceleration()>
	
    setEeprom8(eeprom_offsets::FILAMENT_HELP_SETTINGS, 1);
    98a4:	f44f 70b0 	mov.w	r0, #352	; 0x160
    98a8:	f04f 0101 	mov.w	r1, #1
    98ac:	f006 fdb4 	bl	10418 <eeprom::setEeprom8(unsigned short, unsigned char)>
//	eeprom_write_byte((uint8_t*)eeprom_offsets::FILAMENT_HELP_SETTINGS, 1);

    /// Thermal table settings
    SetDefaultsThermal(eeprom_offsets::THERM_TABLE);
    98b0:	f04f 0074 	mov.w	r0, #116	; 0x74
    98b4:	f7ff fe82 	bl	95bc <eeprom::SetDefaultsThermal(unsigned short)>
    
    /// Preheat heater settings
    setDefaultsPreheat(eeprom_offsets::PREHEAT_SETTINGS);
    98b8:	f44f 70ac 	mov.w	r0, #344	; 0x158
    98bc:	f7ff ff06 	bl	96cc <eeprom::setDefaultsPreheat(unsigned short)>

    /// write MightyBoard VID/PID. Only after verification does production write
    /// a proper 'The Replicator' PID/VID to eeprom, and to the USB chip
    setEeprom16(eeprom_offsets::VID_PID_INFO, vidPid[0]);
    98c0:	f04f 0044 	mov.w	r0, #68	; 0x44
    98c4:	f242 31c1 	movw	r1, #9153	; 0x23c1
    98c8:	f006 fe1a 	bl	10500 <eeprom::setEeprom16(unsigned short, unsigned short)>
    setEeprom16(eeprom_offsets::VID_PID_INFO+2, vidPid[1]);
    98cc:	f04f 0046 	mov.w	r0, #70	; 0x46
    98d0:	f24b 4104 	movw	r1, #46084	; 0xb404
    98d4:	f006 fe14 	bl	10500 <eeprom::setEeprom16(unsigned short, unsigned short)>
//    eeprom_write_block(&(vidPid[0]),(uint8_t*)eeprom_offsets::VID_PID_INFO,4);

    /// Write 'extruder 0' settings
    setDefaultsExtruder(0,eeprom_offsets::T0_DATA_BASE);
    98d8:	f04f 0000 	mov.w	r0, #0
    98dc:	f44f 7180 	mov.w	r1, #256	; 0x100
    98e0:	f7ff fe24 	bl	952c <eeprom::setDefaultsExtruder(int, unsigned short)>

    /// Write 'extruder 1' stttings
    setDefaultsExtruder(1,eeprom_offsets::T1_DATA_BASE);
    98e4:	f04f 0001 	mov.w	r0, #1
    98e8:	f44f 718e 	mov.w	r1, #284	; 0x11c
    98ec:	f7ff fe1e 	bl	952c <eeprom::setDefaultsExtruder(int, unsigned short)>

    /// write blink and buzz defaults
    setDefaultLedEffects(eeprom_offsets::LED_STRIP_SETTINGS);
    98f0:	f44f 70a0 	mov.w	r0, #320	; 0x140
    98f4:	f7ff fe92 	bl	961c <eeprom::setDefaultLedEffects(unsigned short)>
    setDefaultBuzzEffects(eeprom_offsets::BUZZ_SETTINGS);
    98f8:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    98fc:	f7ff fed8 	bl	96b0 <eeprom::setDefaultBuzzEffects(unsigned short)>
    
    // startup script flag is cleared
    setEeprom8(eeprom_offsets::FIRST_BOOT_FLAG, 0);
    9900:	f44f 70ab 	mov.w	r0, #342	; 0x156
    9904:	f04f 0100 	mov.w	r1, #0
    9908:	f006 fd86 	bl	10418 <eeprom::setEeprom8(unsigned short, unsigned char)>
//    eeprom_write_byte((uint8_t*)eeprom_offsets::FIRST_BOOT_FLAG, 0);
}
    990c:	b007      	add	sp, #28
    990e:	bd30      	pop	{r4, r5, pc}
    9910:	0002643c 	.word	0x0002643c

00009914 <eeprom::storeToolheadToleranceDefaults()>:
    setEeprom8(eeprom_offsets::FILAMENT_HELP_SETTINGS, 1);
//   eeprom_write_byte((uint8_t*)eeprom_offsets::FILAMENT_HELP_SETTINGS, 1);
}

//
void storeToolheadToleranceDefaults(){
    9914:	b500      	push	{lr}
    9916:	b085      	sub	sp, #20
	// assume t0 to t1 distance is in specifications (0 steps tolerance error)
	uint32_t offsets[3] = {0,0,0};
    9918:	f04f 0100 	mov.w	r1, #0
    991c:	9101      	str	r1, [sp, #4]
    991e:	9102      	str	r1, [sp, #8]
    9920:	9103      	str	r1, [sp, #12]
	for (uint8_t i=0;i<3;i++){
		setEeprom32(eeprom_offsets::TOOLHEAD_OFFSET_SETTINGS+(i*4), offsets[i]);
    9922:	f44f 70b1 	mov.w	r0, #354	; 0x162
    9926:	f006 fe0f 	bl	10548 <eeprom::setEeprom32(unsigned short, unsigned long)>
    992a:	f44f 70b3 	mov.w	r0, #358	; 0x166
    992e:	9902      	ldr	r1, [sp, #8]
    9930:	f006 fe0a 	bl	10548 <eeprom::setEeprom32(unsigned short, unsigned long)>
    9934:	f44f 70b5 	mov.w	r0, #362	; 0x16a
    9938:	9903      	ldr	r1, [sp, #12]
    993a:	f006 fe05 	bl	10548 <eeprom::setEeprom32(unsigned short, unsigned long)>
//		xprintf("%x" " (%s:%d)\n",eeprom_address(EEPROM_START_ADDRESS, eeprom_offsets::TOOLHEAD_OFFSET_SETTINGS+(i*4)),_F_,_L_);
//		xprintf("%x" " (%s:%d)\n",(EEPROM_START_ADDRESS + eeprom_offsets::TOOLHEAD_OFFSET_SETTINGS+(i*4)),_F_,_L_);
	}
//	eeprom_write_block((uint8_t*)&(offsets[0]),(uint8_t*)(eeprom_offsets::TOOLHEAD_OFFSET_SETTINGS), 12 );
}
    993e:	b005      	add	sp, #20
    9940:	bd00      	pop	{pc}
    9942:	bf00      	nop

00009944 <eeprom::fullResetEEPROM()>:

/// Initialize entire eeprom map, including factor-set settings
void fullResetEEPROM() {
    9944:	b508      	push	{r3, lr}
	write_ff_to_ram();
    9946:	f7ff fd7f 	bl	9448 <eeprom::write_ff_to_ram()>
	// axis inversion settings
	uint8_t axis_invert = 0b10111; // invert XYBZ
	setEeprom8(eeprom_offsets::AXIS_INVERSION, axis_invert);
    994a:	f04f 0002 	mov.w	r0, #2
    994e:	f04f 0117 	mov.w	r1, #23
    9952:	f006 fd61 	bl	10418 <eeprom::setEeprom8(unsigned short, unsigned char)>
//	eeprom_write_byte((uint8_t*)eeprom_offsets::AXIS_INVERSION, axis_invert);
	
	// tool count settings
	setEeprom8(eeprom_offsets::TOOL_COUNT, 1);
    9956:	f04f 0042 	mov.w	r0, #66	; 0x42
    995a:	f04f 0101 	mov.w	r1, #1
    995e:	f006 fd5b 	bl	10418 <eeprom::setEeprom8(unsigned short, unsigned char)>
//	eeprom_write_byte((uint8_t*)eeprom_offsets::TOOL_COUNT, 1);
	
	// toolhead offset defaults
	storeToolheadToleranceDefaults();
    9962:	f7ff ffd7 	bl	9914 <eeprom::storeToolheadToleranceDefaults()>
	
	factoryResetEEPROM();
    9966:	f7ff ff4b 	bl	9800 <eeprom::factoryResetEEPROM()>
}
    996a:	bd08      	pop	{r3, pc}

0000996c <_GLOBAL__sub_I__ZN6eeprom15write_ff_to_ramEv>:

}
    996c:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
    996e:	f641 10d4 	movw	r0, #6612	; 0x19d4
    9972:	f2c1 0000 	movt	r0, #4096	; 0x1000
    9976:	f04f 0100 	mov.w	r1, #0
    997a:	f007 f99d 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
    997e:	f641 10d8 	movw	r0, #6616	; 0x19d8
    9982:	f2c1 0000 	movt	r0, #4096	; 0x1000
    9986:	f04f 0101 	mov.w	r1, #1
    998a:	f007 f995 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
    998e:	f641 10dc 	movw	r0, #6620	; 0x19dc
    9992:	f2c1 0000 	movt	r0, #4096	; 0x1000
    9996:	f04f 0102 	mov.w	r1, #2
    999a:	f007 f98d 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
    999e:	f641 10e0 	movw	r0, #6624	; 0x19e0
    99a2:	f2c1 0000 	movt	r0, #4096	; 0x1000
    99a6:	f04f 0103 	mov.w	r1, #3
    99aa:	f007 f985 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
    99ae:	f641 10e4 	movw	r0, #6628	; 0x19e4
    99b2:	f2c1 0000 	movt	r0, #4096	; 0x1000
    99b6:	f04f 0104 	mov.w	r1, #4
    99ba:	f007 f97d 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
    99be:	f641 14e8 	movw	r4, #6632	; 0x19e8
    99c2:	f2c1 0400 	movt	r4, #4096	; 0x1000
    99c6:	4620      	mov	r0, r4
    99c8:	f04f 01ff 	mov.w	r1, #255	; 0xff
    99cc:	f007 f974 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
    99d0:	f641 10ec 	movw	r0, #6636	; 0x19ec
    99d4:	f2c1 0000 	movt	r0, #4096	; 0x1000
    99d8:	4621      	mov	r1, r4
    99da:	f04f 0200 	mov.w	r2, #0
    99de:	f007 fb7d 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
    99e2:	bd10      	pop	{r4, pc}

000099e4 <HeatingElement::~HeatingElement()>:
/// The heating element interface is a standard interface used to communicate with
/// things that can control
/// \ingroup SoftwareLibraries
class HeatingElement {
public:
		virtual ~HeatingElement(){};
    99e4:	4b01      	ldr	r3, [pc, #4]	; (99ec <HeatingElement::~HeatingElement()+0x8>)
    99e6:	6003      	str	r3, [r0, #0]
    99e8:	4770      	bx	lr
    99ea:	bf00      	nop
    99ec:	00026460 	.word	0x00026460

000099f0 <ExtruderHeatingElement::~ExtruderHeatingElement()>:
    99f0:	4b01      	ldr	r3, [pc, #4]	; (99f8 <ExtruderHeatingElement::~ExtruderHeatingElement()+0x8>)
    99f2:	6003      	str	r3, [r0, #0]
#include "CoolingFan.hh"
//#include "MotorController.hh"

/// Extruder heating element on v34 Extruder controller
/// \ingroup ECv34
class ExtruderHeatingElement : public HeatingElement {
    99f4:	4770      	bx	lr
    99f6:	bf00      	nop
    99f8:	00026460 	.word	0x00026460

000099fc <ExtruderHeatingElement::~ExtruderHeatingElement()>:
    99fc:	b510      	push	{r4, lr}
    99fe:	4604      	mov	r4, r0
    9a00:	4b02      	ldr	r3, [pc, #8]	; (9a0c <ExtruderHeatingElement::~ExtruderHeatingElement()+0x10>)
    9a02:	6003      	str	r3, [r0, #0]
    9a04:	f009 ff68 	bl	138d8 <operator delete(void*)>
    9a08:	4620      	mov	r0, r4
    9a0a:	bd10      	pop	{r4, pc}
    9a0c:	00026460 	.word	0x00026460

00009a10 <HeatingElement::~HeatingElement()>:
    9a10:	b510      	push	{r4, lr}
    9a12:	4604      	mov	r4, r0
    9a14:	4b02      	ldr	r3, [pc, #8]	; (9a20 <HeatingElement::~HeatingElement()+0x10>)
    9a16:	6003      	str	r3, [r0, #0]
    9a18:	f009 ff5e 	bl	138d8 <operator delete(void*)>
    9a1c:	4620      	mov	r0, r4
    9a1e:	bd10      	pop	{r4, pc}
    9a20:	00026460 	.word	0x00026460

00009a24 <ExtruderBoard::reset()>:
			eeprom_base(eeprom_base)
{
}


void ExtruderBoard::reset() {
    9a24:	b510      	push	{r4, lr}
    9a26:	4604      	mov	r4, r0
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    9a28:	f890 30b5 	ldrb.w	r3, [r0, #181]	; 0xb5
    9a2c:	b94b      	cbnz	r3, 9a42 <ExtruderBoard::reset()+0x1e>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    9a2e:	f890 30b6 	ldrb.w	r3, [r0, #182]	; 0xb6
    9a32:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    9a36:	f04f 0101 	mov.w	r1, #1
    9a3a:	fa01 f103 	lsl.w	r1, r1, r3
    9a3e:	f7f9 fd59 	bl	34f4 <GPIO_ClearValue>


	// Set the output mode for the mosfets.  
	Heater_Pin.setValue(false);
	Heater_Pin.setDirection(true);
    9a42:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    9a46:	f04f 0101 	mov.w	r1, #1
    9a4a:	f007 fb67 	bl	1111c <Pin::setDirection(bool) const>

	extruder_heater.reset();
    9a4e:	f104 0028 	add.w	r0, r4, #40	; 0x28
    9a52:	f006 fd93 	bl	1057c <Heater::reset()>
//	extruder_thermocouple.init();
	extruder_thermistor.init();
    9a56:	4620      	mov	r0, r4
    9a58:	f007 fc0a 	bl	11270 <Thermistor::init()>
	coolingFan.reset();
    9a5c:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    9a60:	f006 fb7a 	bl	10158 <CoolingFan::reset()>

}
    9a64:	bd10      	pop	{r4, pc}
    9a66:	bf00      	nop

00009a68 <ExtruderBoard::runExtruderSlice()>:

void ExtruderBoard::runExtruderSlice() {
    9a68:	b510      	push	{r4, lr}
    9a6a:	4604      	mov	r4, r0

        extruder_heater.manage_temperature();
    9a6c:	f100 0028 	add.w	r0, r0, #40	; 0x28
    9a70:	f006 ff3c 	bl	108ec <Heater::manage_temperature()>
        coolingFan.manageCoolingFan();
    9a74:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    9a78:	f006 fb30 	bl	100dc <CoolingFan::manageCoolingFan()>

}
    9a7c:	bd10      	pop	{r4, pc}
    9a7e:	bf00      	nop

00009a80 <ExtruderBoard::setFan(unsigned char)>:

void ExtruderBoard::setFan(uint8_t on)
{
    9a80:	b508      	push	{r3, lr}
	if(on)
    9a82:	b121      	cbz	r1, 9a8e <ExtruderBoard::setFan(unsigned char)+0xe>
		coolingFan.enable();
    9a84:	f100 00bc 	add.w	r0, r0, #188	; 0xbc
    9a88:	f006 fb0c 	bl	100a4 <CoolingFan::enable()>
    9a8c:	bd08      	pop	{r3, pc}
	else
		coolingFan.disable();
    9a8e:	f100 00bc 	add.w	r0, r0, #188	; 0xbc
    9a92:	f006 fb59 	bl	10148 <CoolingFan::disable()>
    9a96:	bd08      	pop	{r3, pc}

00009a98 <pwmEx2_On(bool)>:
}

// Turn on/off PWM for Extruder Two (OC1A)
void pwmEx2_On(bool on) {
    9a98:	b508      	push	{r3, lr}
	if (on) {
    9a9a:	b188      	cbz	r0, 9ac0 <pwmEx2_On(bool)+0x28>
		TIM_Cmd(LPC_TIM1,ENABLE);
    9a9c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    9aa0:	f2c4 0000 	movt	r0, #16384	; 0x4000
    9aa4:	f04f 0101 	mov.w	r1, #1
    9aa8:	f7fa f830 	bl	3b0c <TIM_Cmd>
		xprintf("TIM_Cmd(LPC_TIM1,ENABLE)" " (%s:%d)\n",_F_,_L_);
    9aac:	f246 4088 	movw	r0, #25736	; 0x6488
    9ab0:	f2c0 0002 	movt	r0, #2
    9ab4:	490b      	ldr	r1, [pc, #44]	; (9ae4 <pwmEx2_On(bool)+0x4c>)
    9ab6:	f04f 0255 	mov.w	r2, #85	; 0x55
    9aba:	f7fc fd0b 	bl	64d4 <xprintf>
    9abe:	bd08      	pop	{r3, pc}
//		TCCR1A |= 0b10000000;
	} else {
		TIM_Cmd(LPC_TIM1,DISABLE);
    9ac0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    9ac4:	f2c4 0000 	movt	r0, #16384	; 0x4000
    9ac8:	f04f 0100 	mov.w	r1, #0
    9acc:	f7fa f81e 	bl	3b0c <TIM_Cmd>
		xprintf("TIM_Cmd(LPC_TIM1,DISABLE)" " (%s:%d)\n",_F_,_L_);
    9ad0:	f246 40dc 	movw	r0, #25820	; 0x64dc
    9ad4:	f2c0 0002 	movt	r0, #2
    9ad8:	4902      	ldr	r1, [pc, #8]	; (9ae4 <pwmEx2_On(bool)+0x4c>)
    9ada:	f04f 0259 	mov.w	r2, #89	; 0x59
    9ade:	f7fc fcf9 	bl	64d4 <xprintf>
    9ae2:	bd08      	pop	{r3, pc}
    9ae4:	000264c8 	.word	0x000264c8

00009ae8 <pwmEx1_On(bool)>:
//		TCCR1A &= 0b00111111;
	}
}

// Turn on/off PWM for Extruder One (OC4A)
void pwmEx1_On(bool on) {
    9ae8:	b508      	push	{r3, lr}
	if (on) {
    9aea:	b188      	cbz	r0, 9b10 <pwmEx1_On(bool)+0x28>
		TIM_Cmd(LPC_TIM2,ENABLE);
    9aec:	f04f 0000 	mov.w	r0, #0
    9af0:	f2c4 0009 	movt	r0, #16393	; 0x4009
    9af4:	f04f 0101 	mov.w	r1, #1
    9af8:	f7fa f808 	bl	3b0c <TIM_Cmd>
		xprintf("TIM_Cmd(LPC_TIM2,ENABLE)" " (%s:%d)\n",_F_,_L_);
    9afc:	f246 5000 	movw	r0, #25856	; 0x6500
    9b00:	f2c0 0002 	movt	r0, #2
    9b04:	490b      	ldr	r1, [pc, #44]	; (9b34 <pwmEx1_On(bool)+0x4c>)
    9b06:	f04f 0262 	mov.w	r2, #98	; 0x62
    9b0a:	f7fc fce3 	bl	64d4 <xprintf>
    9b0e:	bd08      	pop	{r3, pc}
//		TCCR4A |= 0b10000000;
	} else {
		TIM_Cmd(LPC_TIM2,DISABLE);
    9b10:	f04f 0000 	mov.w	r0, #0
    9b14:	f2c4 0009 	movt	r0, #16393	; 0x4009
    9b18:	f04f 0100 	mov.w	r1, #0
    9b1c:	f7f9 fff6 	bl	3b0c <TIM_Cmd>
		xprintf("TIM_Cmd(LPC_TIM2,DISABLE)" " (%s:%d)\n",_F_,_L_);
    9b20:	f246 5024 	movw	r0, #25892	; 0x6524
    9b24:	f2c0 0002 	movt	r0, #2
    9b28:	4902      	ldr	r1, [pc, #8]	; (9b34 <pwmEx1_On(bool)+0x4c>)
    9b2a:	f04f 0266 	mov.w	r2, #102	; 0x66
    9b2e:	f7fc fcd1 	bl	64d4 <xprintf>
    9b32:	bd08      	pop	{r3, pc}
    9b34:	000264c8 	.word	0x000264c8

00009b38 <ExtruderHeatingElement::setHeatingElement(unsigned char)>:
ExtruderHeatingElement::ExtruderHeatingElement(uint8_t id):
	heater_id(id)
{
}

void ExtruderHeatingElement::setHeatingElement(uint8_t value) {
    9b38:	b510      	push	{r4, lr}
    9b3a:	b084      	sub	sp, #16
    9b3c:	460c      	mov	r4, r1
	
	
//  	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
	   if(heater_id == 0)
    9b3e:	7903      	ldrb	r3, [r0, #4]
    9b40:	bb93      	cbnz	r3, 9ba8 <ExtruderHeatingElement::setHeatingElement(unsigned char)+0x70>
	   { 
     		if (value == 0 || value == 255) {
    9b42:	f101 33ff 	add.w	r3, r1, #4294967295
    9b46:	b2db      	uxtb	r3, r3
    9b48:	2bfd      	cmp	r3, #253	; 0xfd
    9b4a:	d928      	bls.n	9b9e <ExtruderHeatingElement::setHeatingElement(unsigned char)+0x66>
			pwmEx1_On(false);
    9b4c:	f04f 0000 	mov.w	r0, #0
    9b50:	f7ff ffca 	bl	9ae8 <pwmEx1_On(bool)>
			EX1_PWR.setValue(value == 255);
    9b54:	4668      	mov	r0, sp
    9b56:	f641 11f8 	movw	r1, #6648	; 0x19f8
    9b5a:	f2c1 0100 	movt	r1, #4096	; 0x1000
    9b5e:	f04f 0204 	mov.w	r2, #4
    9b62:	f007 fabb 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    9b66:	f89d 3001 	ldrb.w	r3, [sp, #1]
    9b6a:	2b00      	cmp	r3, #0
    9b6c:	d14f      	bne.n	9c0e <ExtruderHeatingElement::setHeatingElement(unsigned char)+0xd6>
		 	return;
		// uint8_t oldSREG = SREG;

//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
    9b6e:	2cff      	cmp	r4, #255	; 0xff
    9b70:	d10a      	bne.n	9b88 <ExtruderHeatingElement::setHeatingElement(unsigned char)+0x50>
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    9b72:	f89d 3002 	ldrb.w	r3, [sp, #2]
    9b76:	f89d 0000 	ldrb.w	r0, [sp]
    9b7a:	f04f 0101 	mov.w	r1, #1
    9b7e:	fa01 f103 	lsl.w	r1, r1, r3
    9b82:	f7f9 fcaf 	bl	34e4 <GPIO_SetValue>
    9b86:	e042      	b.n	9c0e <ExtruderHeatingElement::setHeatingElement(unsigned char)+0xd6>
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    9b88:	f89d 3002 	ldrb.w	r3, [sp, #2]
    9b8c:	f89d 0000 	ldrb.w	r0, [sp]
    9b90:	f04f 0101 	mov.w	r1, #1
    9b94:	fa01 f103 	lsl.w	r1, r1, r3
    9b98:	f7f9 fcac 	bl	34f4 <GPIO_ClearValue>
    9b9c:	e037      	b.n	9c0e <ExtruderHeatingElement::setHeatingElement(unsigned char)+0xd6>
			} else {
//				OCR4A = value;
				pwmEx1_On(true);
    9b9e:	f04f 0001 	mov.w	r0, #1
    9ba2:	f7ff ffa1 	bl	9ae8 <pwmEx1_On(bool)>
    9ba6:	e032      	b.n	9c0e <ExtruderHeatingElement::setHeatingElement(unsigned char)+0xd6>
				
				
			}
		}
		else if(heater_id == 1)
    9ba8:	2b01      	cmp	r3, #1
    9baa:	d130      	bne.n	9c0e <ExtruderHeatingElement::setHeatingElement(unsigned char)+0xd6>
	   { 
     		if (value == 0 || value == 255) {
    9bac:	f101 33ff 	add.w	r3, r1, #4294967295
    9bb0:	b2db      	uxtb	r3, r3
    9bb2:	2bfd      	cmp	r3, #253	; 0xfd
    9bb4:	d927      	bls.n	9c06 <ExtruderHeatingElement::setHeatingElement(unsigned char)+0xce>
			pwmEx2_On(false);
    9bb6:	f04f 0000 	mov.w	r0, #0
    9bba:	f7ff ff6d 	bl	9a98 <pwmEx2_On(bool)>
			EX2_PWR.setValue(value == 255);
    9bbe:	a802      	add	r0, sp, #8
    9bc0:	f641 11f8 	movw	r1, #6648	; 0x19f8
    9bc4:	f2c1 0100 	movt	r1, #4096	; 0x1000
    9bc8:	f04f 0203 	mov.w	r2, #3
    9bcc:	f007 fa86 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    9bd0:	f89d 3009 	ldrb.w	r3, [sp, #9]
    9bd4:	b9db      	cbnz	r3, 9c0e <ExtruderHeatingElement::setHeatingElement(unsigned char)+0xd6>
		 	return;
		// uint8_t oldSREG = SREG;

//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
    9bd6:	2cff      	cmp	r4, #255	; 0xff
    9bd8:	d10a      	bne.n	9bf0 <ExtruderHeatingElement::setHeatingElement(unsigned char)+0xb8>
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    9bda:	f89d 300a 	ldrb.w	r3, [sp, #10]
    9bde:	f89d 0008 	ldrb.w	r0, [sp, #8]
    9be2:	f04f 0101 	mov.w	r1, #1
    9be6:	fa01 f103 	lsl.w	r1, r1, r3
    9bea:	f7f9 fc7b 	bl	34e4 <GPIO_SetValue>
    9bee:	e00e      	b.n	9c0e <ExtruderHeatingElement::setHeatingElement(unsigned char)+0xd6>
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    9bf0:	f89d 300a 	ldrb.w	r3, [sp, #10]
    9bf4:	f89d 0008 	ldrb.w	r0, [sp, #8]
    9bf8:	f04f 0101 	mov.w	r1, #1
    9bfc:	fa01 f103 	lsl.w	r1, r1, r3
    9c00:	f7f9 fc78 	bl	34f4 <GPIO_ClearValue>
    9c04:	e003      	b.n	9c0e <ExtruderHeatingElement::setHeatingElement(unsigned char)+0xd6>
			
			} else {
//				OCR1A = value;
				pwmEx2_On(true);
    9c06:	f04f 0001 	mov.w	r0, #1
    9c0a:	f7ff ff45 	bl	9a98 <pwmEx2_On(bool)>
			}
		}
//	}
}
    9c0e:	b004      	add	sp, #16
    9c10:	bd10      	pop	{r4, pc}
    9c12:	bf00      	nop

00009c14 <ExtruderHeatingElement::ExtruderHeatingElement(unsigned char)>:
//		TCCR4A &= 0b00111111;
	} 
}

ExtruderHeatingElement::ExtruderHeatingElement(uint8_t id):
	heater_id(id)
    9c14:	4a01      	ldr	r2, [pc, #4]	; (9c1c <ExtruderHeatingElement::ExtruderHeatingElement(unsigned char)+0x8>)
    9c16:	6002      	str	r2, [r0, #0]
    9c18:	7101      	strb	r1, [r0, #4]
{
}
    9c1a:	4770      	bx	lr
    9c1c:	00026478 	.word	0x00026478

00009c20 <ExtruderBoard::ExtruderBoard(unsigned char, Pin, Pin, Pin, unsigned short)>:
}


//ExtruderBoard ExtruderBoard::extruder_board;

ExtruderBoard::ExtruderBoard(uint8_t slave_id_in, Pin HeaterPin_In, Pin FanPin_In,
    9c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9c24:	b082      	sub	sp, #8
    9c26:	4604      	mov	r4, r0
    9c28:	460f      	mov	r7, r1
    9c2a:	4691      	mov	r9, r2
    9c2c:	469a      	mov	sl, r3
    9c2e:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
     		extruder_heater(extruder_thermistor,extruder_element,SAMPLE_INTERVAL_MICROS_THERMOCOUPLE,
        		  (eeprom_base+ toolhead_eeprom_offsets::EXTRUDER_PID_BASE), true ),
      		coolingFan(extruder_heater, (eeprom_base + toolhead_eeprom_offsets::COOLING_FAN_SETTINGS), FanPin_In),
      		slave_id(slave_id_in),
      		Heater_Pin(HeaterPin_In),
			eeprom_base(eeprom_base)
    9c32:	f04f 0200 	mov.w	r2, #0
    9c36:	f007 fb2d 	bl	11294 <Thermistor::Thermistor(unsigned char, unsigned char)>
    9c3a:	f104 0620 	add.w	r6, r4, #32
    9c3e:	4630      	mov	r0, r6
    9c40:	4639      	mov	r1, r7
    9c42:	f7ff ffe7 	bl	9c14 <ExtruderHeatingElement::ExtruderHeatingElement(unsigned char)>
    9c46:	f104 0828 	add.w	r8, r4, #40	; 0x28
    9c4a:	f105 030a 	add.w	r3, r5, #10
    9c4e:	b29b      	uxth	r3, r3
    9c50:	9300      	str	r3, [sp, #0]
    9c52:	f04f 0301 	mov.w	r3, #1
    9c56:	9301      	str	r3, [sp, #4]
    9c58:	4640      	mov	r0, r8
    9c5a:	4621      	mov	r1, r4
    9c5c:	4632      	mov	r2, r6
    9c5e:	f24a 1320 	movw	r3, #41248	; 0xa120
    9c62:	f2c0 0307 	movt	r3, #7
    9c66:	f006 fd0d 	bl	10684 <Heater::Heater(TemperatureSensor&, HeatingElement&, unsigned long, unsigned short, bool)>
    9c6a:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    9c6e:	4649      	mov	r1, r9
    9c70:	f007 fa46 	bl	11100 <Pin::Pin(Pin const&)>
    9c74:	f884 70b9 	strb.w	r7, [r4, #185]	; 0xb9
    9c78:	f105 021a 	add.w	r2, r5, #26
    9c7c:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    9c80:	4641      	mov	r1, r8
    9c82:	b292      	uxth	r2, r2
    9c84:	4653      	mov	r3, sl
    9c86:	f006 fa97 	bl	101b8 <CoolingFan::CoolingFan(Heater&, unsigned short, Pin const&)>
    9c8a:	f884 50dc 	strb.w	r5, [r4, #220]	; 0xdc
{
}
    9c8e:	4620      	mov	r0, r4
    9c90:	b002      	add	sp, #8
    9c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9c96:	bf00      	nop

00009c98 <_GLOBAL__sub_I__ZN13ExtruderBoardC2Eh3PinS0_S0_t>:
//				OCR1A = value;
				pwmEx2_On(true);
			}
		}
//	}
}
    9c98:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
    9c9a:	f641 10f4 	movw	r0, #6644	; 0x19f4
    9c9e:	f2c1 0000 	movt	r0, #4096	; 0x1000
    9ca2:	f04f 0100 	mov.w	r1, #0
    9ca6:	f007 f807 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
    9caa:	f641 10fc 	movw	r0, #6652	; 0x19fc
    9cae:	f2c1 0000 	movt	r0, #4096	; 0x1000
    9cb2:	f04f 0101 	mov.w	r1, #1
    9cb6:	f006 ffff 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
    9cba:	f641 10f8 	movw	r0, #6648	; 0x19f8
    9cbe:	f2c1 0000 	movt	r0, #4096	; 0x1000
    9cc2:	f04f 0102 	mov.w	r1, #2
    9cc6:	f006 fff7 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
    9cca:	f641 2004 	movw	r0, #6660	; 0x1a04
    9cce:	f2c1 0000 	movt	r0, #4096	; 0x1000
    9cd2:	f04f 0103 	mov.w	r1, #3
    9cd6:	f006 ffef 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
    9cda:	f641 2000 	movw	r0, #6656	; 0x1a00
    9cde:	f2c1 0000 	movt	r0, #4096	; 0x1000
    9ce2:	f04f 0104 	mov.w	r1, #4
    9ce6:	f006 ffe7 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
    9cea:	f641 2408 	movw	r4, #6664	; 0x1a08
    9cee:	f2c1 0400 	movt	r4, #4096	; 0x1000
    9cf2:	4620      	mov	r0, r4
    9cf4:	f04f 01ff 	mov.w	r1, #255	; 0xff
    9cf8:	f006 ffde 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
	};
	// currently not used:
	//const uint8_t getPinIndex() const { return pin_index; }
};

static const Pin NullPin(NullPort, 0);
    9cfc:	f641 200c 	movw	r0, #6668	; 0x1a0c
    9d00:	f2c1 0000 	movt	r0, #4096	; 0x1000
    9d04:	4621      	mov	r1, r4
    9d06:	f04f 0200 	mov.w	r2, #0
    9d0a:	f007 f9e7 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
    9d0e:	bd10      	pop	{r4, pc}

00009d10 <host::processCommandPacket(InPacket const&, OutPacket&)>:
/** Identify a command packet, and process it.  If the packet is a command
 * packet, return true, indicating that the packet has been queued and no
 * other processing needs to be done. Otherwise, processing of this packet
 * should drop through to the next processing level.
 */
bool processCommandPacket(const InPacket& from_host, OutPacket& to_host) {
    9d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9d12:	4604      	mov	r4, r0
    9d14:	460d      	mov	r5, r1
    9d16:	7803      	ldrb	r3, [r0, #0]
	if (from_host.getLength() >= 1) {
    9d18:	2b00      	cmp	r3, #0
    9d1a:	d042      	beq.n	9da2 <host::processCommandPacket(InPacket const&, OutPacket&)+0x92>
		uint8_t command = from_host.read8(0);
    9d1c:	4606      	mov	r6, r0
    9d1e:	f04f 0100 	mov.w	r1, #0
    9d22:	f007 f8c1 	bl	10ea8 <Packet::read8(unsigned char) const>
		if ((command & 0x80) != 0) {
    9d26:	f010 0f80 	tst.w	r0, #128	; 0x80
    9d2a:	d03d      	beq.n	9da8 <host::processCommandPacket(InPacket const&, OutPacket&)+0x98>
			// If we're capturing a file to an SD card, we send it to the sdcard module
			// for processing.
			if (sdcard::isCapturing()) {
    9d2c:	f004 f878 	bl	de20 <sdcard::isCapturing()>
    9d30:	b150      	cbz	r0, 9d48 <host::processCommandPacket(InPacket const&, OutPacket&)+0x38>
				sdcard::capturePacket(from_host);
    9d32:	4620      	mov	r0, r4
    9d34:	f004 f87a 	bl	de2c <sdcard::capturePacket(Packet const&)>
				to_host.append8(RC_OK);
    9d38:	4628      	mov	r0, r5
    9d3a:	f04f 0181 	mov.w	r1, #129	; 0x81
    9d3e:	f007 f90b 	bl	10f58 <OutPacket::append8(unsigned char)>
				return true;
    9d42:	f04f 0001 	mov.w	r0, #1
    9d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}
			if(sdcard::isPlaying() || utility::isPlaying()){
    9d48:	f004 f864 	bl	de14 <sdcard::isPlaying()>
    9d4c:	b918      	cbnz	r0, 9d56 <host::processCommandPacket(InPacket const&, OutPacket&)+0x46>
    9d4e:	f006 f867 	bl	fe20 <utility::isPlaying()>
    9d52:	2800      	cmp	r0, #0
    9d54:	d02b      	beq.n	9dae <host::processCommandPacket(InPacket const&, OutPacket&)+0x9e>
				// ignore action commands if SD card build is playing
				// or if ONBOARD script is playing
				to_host.append8(RC_BOT_BUILDING);
    9d56:	4628      	mov	r0, r5
    9d58:	f04f 018a 	mov.w	r1, #138	; 0x8a
    9d5c:	f007 f8fc 	bl	10f58 <OutPacket::append8(unsigned char)>
				return true;
    9d60:	f04f 0001 	mov.w	r0, #1
    9d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			// Turn off interrupts while querying or manipulating the queue!
//			ATOMIC_BLOCK(ATOMIC_FORCEON) {
				const uint8_t command_length = from_host.getLength();
				if (command::getRemainingCapacity() >= command_length) {
					// Append command to buffer
					for (int i = 0; i < command_length; i++) {
    9d66:	4627      	mov	r7, r4
    9d68:	b15c      	cbz	r4, 9d82 <host::processCommandPacket(InPacket const&, OutPacket&)+0x72>
    9d6a:	f04f 0400 	mov.w	r4, #0
						command::push(from_host.read8(i));
    9d6e:	4630      	mov	r0, r6
    9d70:	b2e1      	uxtb	r1, r4
    9d72:	f007 f899 	bl	10ea8 <Packet::read8(unsigned char) const>
    9d76:	f7fe f869 	bl	7e4c <command::push(unsigned char)>
			// Turn off interrupts while querying or manipulating the queue!
//			ATOMIC_BLOCK(ATOMIC_FORCEON) {
				const uint8_t command_length = from_host.getLength();
				if (command::getRemainingCapacity() >= command_length) {
					// Append command to buffer
					for (int i = 0; i < command_length; i++) {
    9d7a:	f104 0401 	add.w	r4, r4, #1
    9d7e:	42bc      	cmp	r4, r7
    9d80:	dbf5      	blt.n	9d6e <host::processCommandPacket(InPacket const&, OutPacket&)+0x5e>
						command::push(from_host.read8(i));
					}
					to_host.append8(RC_OK);
    9d82:	4628      	mov	r0, r5
    9d84:	f04f 0181 	mov.w	r1, #129	; 0x81
    9d88:	f007 f8e6 	bl	10f58 <OutPacket::append8(unsigned char)>
				} else {
					to_host.append8(RC_BUFFER_OVERFLOW);
				}
//			}
			return true;
    9d8c:	f04f 0001 	mov.w	r0, #1
    9d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					for (int i = 0; i < command_length; i++) {
						command::push(from_host.read8(i));
					}
					to_host.append8(RC_OK);
				} else {
					to_host.append8(RC_BUFFER_OVERFLOW);
    9d92:	4628      	mov	r0, r5
    9d94:	f04f 0182 	mov.w	r1, #130	; 0x82
    9d98:	f007 f8de 	bl	10f58 <OutPacket::append8(unsigned char)>
				}
//			}
			return true;
    9d9c:	f04f 0001 	mov.w	r0, #1
    9da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	}
	return false;
    9da2:	f04f 0000 	mov.w	r0, #0
    9da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9da8:	f04f 0000 	mov.w	r0, #0
}
    9dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9dae:	7824      	ldrb	r4, [r4, #0]
			
			// Queue command, if there's room.
			// Turn off interrupts while querying or manipulating the queue!
//			ATOMIC_BLOCK(ATOMIC_FORCEON) {
				const uint8_t command_length = from_host.getLength();
				if (command::getRemainingCapacity() >= command_length) {
    9db0:	f7fe f822 	bl	7df8 <command::getRemainingCapacity()>
    9db4:	42a0      	cmp	r0, r4
    9db6:	d2d6      	bcs.n	9d66 <host::processCommandPacket(InPacket const&, OutPacket&)+0x56>
    9db8:	e7eb      	b.n	9d92 <host::processCommandPacket(InPacket const&, OutPacket&)+0x82>
    9dba:	bf00      	nop

00009dbc <host::heatShutdown()>:
	return false;
}

    // alert the host that the bot has had a heat failure
void heatShutdown(){
	currentState = HOST_STATE_HEAT_SHUTDOWN;
    9dbc:	f641 2368 	movw	r3, #6760	; 0x1a68
    9dc0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9dc4:	f04f 0206 	mov.w	r2, #6
    9dc8:	701a      	strb	r2, [r3, #0]
	cancelBuild = true;
    9dca:	f641 2394 	movw	r3, #6804	; 0x1a94
    9dce:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9dd2:	f04f 0201 	mov.w	r2, #1
    9dd6:	701a      	strb	r2, [r3, #0]
}
    9dd8:	4770      	bx	lr
    9dda:	bf00      	nop

00009ddc <host::handleNextFilename(InPacket const&, OutPacket&)>:
	uint8_t response = startBuildFromSD();
	to_host.append8(response);
}

    // retrive SD file names
inline void handleNextFilename(const InPacket& from_host, OutPacket& to_host) {
    9ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9de0:	af00      	add	r7, sp, #0
    9de2:	4604      	mov	r4, r0
    9de4:	460d      	mov	r5, r1
		e = sdcard::directoryNextEntry(fnbuf,MAX_FILE_LEN);
		if (fnbuf[0] == '\0') break;
	} while (e == sdcard::SD_SUCCESS && fnbuf[0] == '.');
	to_host.append8(e);
	uint8_t idx;
	for (idx = 0; (idx < MAX_FILE_LEN) && (fnbuf[idx] != 0); idx++) {
    9de6:	46e8      	mov	r8, sp
	to_host.append8(response);
}

    // retrive SD file names
inline void handleNextFilename(const InPacket& from_host, OutPacket& to_host) {
	to_host.append8(RC_OK);
    9de8:	4608      	mov	r0, r1
    9dea:	f04f 0181 	mov.w	r1, #129	; 0x81
    9dee:	f007 f8b3 	bl	10f58 <OutPacket::append8(unsigned char)>
	uint8_t resetFlag = from_host.read8(1);
    9df2:	4620      	mov	r0, r4
    9df4:	f04f 0101 	mov.w	r1, #1
    9df8:	f007 f856 	bl	10ea8 <Packet::read8(unsigned char) const>
	if (resetFlag != 0) {
    9dfc:	b160      	cbz	r0, 9e18 <host::handleNextFilename(InPacket const&, OutPacket&)+0x3c>
		sdcard::SdErrorCode e = sdcard::directoryReset();
    9dfe:	f004 f999 	bl	e134 <sdcard::directoryReset()>
		if (e != sdcard::SD_SUCCESS) {
    9e02:	4601      	mov	r1, r0
    9e04:	b140      	cbz	r0, 9e18 <host::handleNextFilename(InPacket const&, OutPacket&)+0x3c>
			to_host.append8(e);
    9e06:	4628      	mov	r0, r5
    9e08:	f007 f8a6 	bl	10f58 <OutPacket::append8(unsigned char)>
			to_host.append8(0);
    9e0c:	4628      	mov	r0, r5
    9e0e:	f04f 0100 	mov.w	r1, #0
    9e12:	f007 f8a1 	bl	10f58 <OutPacket::append8(unsigned char)>
    9e16:	e027      	b.n	9e68 <host::handleNextFilename(InPacket const&, OutPacket&)+0x8c>
			return;
		}
	}
	int MAX_FILE_LEN = MAX_PACKET_PAYLOAD-1;
	char fnbuf[MAX_FILE_LEN];
    9e18:	b08a      	sub	sp, #40	; 0x28
    9e1a:	466c      	mov	r4, sp
	sdcard::SdErrorCode e;
	// Ignore dot-files
	do {
		e = sdcard::directoryNextEntry(fnbuf,MAX_FILE_LEN);
    9e1c:	f04f 061f 	mov.w	r6, #31
    9e20:	f04f 0900 	mov.w	r9, #0
    9e24:	4620      	mov	r0, r4
    9e26:	4631      	mov	r1, r6
    9e28:	464a      	mov	r2, r9
    9e2a:	f003 ff51 	bl	dcd0 <sdcard::directoryNextEntry(char*, unsigned char, unsigned char*)>
    9e2e:	4601      	mov	r1, r0
		if (fnbuf[0] == '\0') break;
    9e30:	7823      	ldrb	r3, [r4, #0]
    9e32:	b113      	cbz	r3, 9e3a <host::handleNextFilename(InPacket const&, OutPacket&)+0x5e>
	}
	int MAX_FILE_LEN = MAX_PACKET_PAYLOAD-1;
	char fnbuf[MAX_FILE_LEN];
	sdcard::SdErrorCode e;
	// Ignore dot-files
	do {
    9e34:	b908      	cbnz	r0, 9e3a <host::handleNextFilename(InPacket const&, OutPacket&)+0x5e>
    9e36:	2b2e      	cmp	r3, #46	; 0x2e
    9e38:	d0f4      	beq.n	9e24 <host::handleNextFilename(InPacket const&, OutPacket&)+0x48>
		e = sdcard::directoryNextEntry(fnbuf,MAX_FILE_LEN);
		if (fnbuf[0] == '\0') break;
	} while (e == sdcard::SD_SUCCESS && fnbuf[0] == '.');
	to_host.append8(e);
    9e3a:	4628      	mov	r0, r5
    9e3c:	f007 f88c 	bl	10f58 <OutPacket::append8(unsigned char)>
	uint8_t idx;
	for (idx = 0; (idx < MAX_FILE_LEN) && (fnbuf[idx] != 0); idx++) {
    9e40:	f04f 0300 	mov.w	r3, #0
    9e44:	461e      	mov	r6, r3
    9e46:	5ce1      	ldrb	r1, [r4, r3]
    9e48:	b141      	cbz	r1, 9e5c <host::handleNextFilename(InPacket const&, OutPacket&)+0x80>
		to_host.append8(fnbuf[idx]);
    9e4a:	4628      	mov	r0, r5
    9e4c:	f007 f884 	bl	10f58 <OutPacket::append8(unsigned char)>
		e = sdcard::directoryNextEntry(fnbuf,MAX_FILE_LEN);
		if (fnbuf[0] == '\0') break;
	} while (e == sdcard::SD_SUCCESS && fnbuf[0] == '.');
	to_host.append8(e);
	uint8_t idx;
	for (idx = 0; (idx < MAX_FILE_LEN) && (fnbuf[idx] != 0); idx++) {
    9e50:	f106 0601 	add.w	r6, r6, #1
    9e54:	b2f6      	uxtb	r6, r6
    9e56:	4633      	mov	r3, r6
    9e58:	2e1e      	cmp	r6, #30
    9e5a:	ddf4      	ble.n	9e46 <host::handleNextFilename(InPacket const&, OutPacket&)+0x6a>
		to_host.append8(fnbuf[idx]);
	}
	to_host.append8(0);
    9e5c:	4628      	mov	r0, r5
    9e5e:	f04f 0100 	mov.w	r1, #0
    9e62:	f007 f879 	bl	10f58 <OutPacket::append8(unsigned char)>
    9e66:	46c5      	mov	sp, r8
}
    9e68:	46bd      	mov	sp, r7
    9e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9e6e:	bf00      	nop

00009e70 <host::handleReadEeprom(InPacket const&, OutPacket&)>:
		bool done = !steppers::isRunning() && command::isEmpty();
		to_host.append8(done?1:0);
//	}
}
    // read value from eeprom
inline void handleReadEeprom(const InPacket& from_host, OutPacket& to_host) {
    9e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9e74:	af00      	add	r7, sp, #0
    9e76:	4605      	mov	r5, r0
    9e78:	460e      	mov	r6, r1
//	xprintf("handleReadEeprom" " (%s:%d)\n",_F_,_L_);
    uint16_t offset = from_host.read16(1);
    9e7a:	f04f 0101 	mov.w	r1, #1
    9e7e:	f007 f817 	bl	10eb0 <Packet::read16(unsigned char) const>
    9e82:	4604      	mov	r4, r0
    uint8_t length = from_host.read8(3);
    9e84:	4628      	mov	r0, r5
    9e86:	f04f 0103 	mov.w	r1, #3
    9e8a:	f007 f80d 	bl	10ea8 <Packet::read8(unsigned char) const>
    9e8e:	4605      	mov	r5, r0
    uint8_t data[length];
    9e90:	4680      	mov	r8, r0
    9e92:	f100 030e 	add.w	r3, r0, #14
    9e96:	f023 0307 	bic.w	r3, r3, #7
    9e9a:	ebad 0d03 	sub.w	sp, sp, r3
//    eeprom_read_block(data, (const void*) offset, length);
    to_host.append8(RC_OK);
    9e9e:	4630      	mov	r0, r6
    9ea0:	f04f 0181 	mov.w	r1, #129	; 0x81
    9ea4:	f007 f858 	bl	10f58 <OutPacket::append8(unsigned char)>
    for (int i = 0; i < length; i++) {
    9ea8:	2d00      	cmp	r5, #0
    9eaa:	dd11      	ble.n	9ed0 <host::handleReadEeprom(InPacket const&, OutPacket&)+0x60>
    9eac:	f04f 0500 	mov.w	r5, #0
		to_host.append8(eeprom::getEeprom8(offset + i,0));
    9eb0:	46a9      	mov	r9, r5
    9eb2:	4620      	mov	r0, r4
    9eb4:	4649      	mov	r1, r9
    9eb6:	f006 fa8d 	bl	103d4 <eeprom::getEeprom8(unsigned short, unsigned char)>
    9eba:	4601      	mov	r1, r0
    9ebc:	4630      	mov	r0, r6
    9ebe:	f007 f84b 	bl	10f58 <OutPacket::append8(unsigned char)>
    uint16_t offset = from_host.read16(1);
    uint8_t length = from_host.read8(3);
    uint8_t data[length];
//    eeprom_read_block(data, (const void*) offset, length);
    to_host.append8(RC_OK);
    for (int i = 0; i < length; i++) {
    9ec2:	f105 0501 	add.w	r5, r5, #1
    9ec6:	f104 0401 	add.w	r4, r4, #1
    9eca:	b2a4      	uxth	r4, r4
    9ecc:	45a8      	cmp	r8, r5
    9ece:	dcf0      	bgt.n	9eb2 <host::handleReadEeprom(InPacket const&, OutPacket&)+0x42>
		to_host.append8(eeprom::getEeprom8(offset + i,0));
//		to_host.append8(data[i]);
    }
}
    9ed0:	46bd      	mov	sp, r7
    9ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9ed6:	bf00      	nop

00009ed8 <host::getHostState()>:
char* getBuildName() {
	return buildName;
}

HostState getHostState() {
	return currentState;
    9ed8:	f641 2368 	movw	r3, #6760	; 0x1a68
    9edc:	f2c1 0300 	movt	r3, #4096	; 0x1000
}
    9ee0:	7818      	ldrb	r0, [r3, #0]
    9ee2:	4770      	bx	lr

00009ee4 <host::startBuildFromSD()>:

sdcard::SdErrorCode startBuildFromSD() {
    9ee4:	b538      	push	{r3, r4, r5, lr}
	sdcard::SdErrorCode e;

	// Attempt to start build
	e = sdcard::startPlayback(buildName);
    9ee6:	f641 20e4 	movw	r0, #6884	; 0x1ae4
    9eea:	f2c1 0000 	movt	r0, #4096	; 0x1000
    9eee:	f004 f8af 	bl	e050 <sdcard::startPlayback(char*)>
	if (e != sdcard::SD_SUCCESS) {
    9ef2:	4604      	mov	r4, r0
    9ef4:	b9f0      	cbnz	r0, 9f34 <host::startBuildFromSD()+0x50>
		// TODO: report error
		return e;
	}
	
	// clear heater temps
	Motherboard::getBoard().getPlatformHeater().set_target_temperature(0);
    9ef6:	4d10      	ldr	r5, [pc, #64]	; (9f38 <host::startBuildFromSD()+0x54>)
    9ef8:	4628      	mov	r0, r5
    9efa:	f04f 0100 	mov.w	r1, #0
    9efe:	f006 fbe7 	bl	106d0 <Heater::set_target_temperature(int)>
	Motherboard::getBoard().getExtruderBoard(0).getExtruderHeater().set_target_temperature(0);
    9f02:	f5a5 70de 	sub.w	r0, r5, #444	; 0x1bc
    9f06:	f04f 0100 	mov.w	r1, #0
    9f0a:	f006 fbe1 	bl	106d0 <Heater::set_target_temperature(int)>
	Motherboard::getBoard().getExtruderBoard(1).getExtruderHeater().set_target_temperature(0);
    9f0e:	f1a5 00dc 	sub.w	r0, r5, #220	; 0xdc
    9f12:	f04f 0100 	mov.w	r1, #0
    9f16:	f006 fbdb 	bl	106d0 <Heater::set_target_temperature(int)>
	
	command::reset();
    9f1a:	f7fe f9b1 	bl	8280 <command::reset()>
	steppers::reset();
    9f1e:	f004 fca7 	bl	e870 <steppers::reset()>
	planner::abort();
    9f22:	f003 f871 	bl	d008 <planner::abort()>
	

	currentState = HOST_STATE_BUILDING_FROM_SD;
    9f26:	f641 2368 	movw	r3, #6760	; 0x1a68
    9f2a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9f2e:	f04f 0202 	mov.w	r2, #2
    9f32:	701a      	strb	r2, [r3, #0]

	return e;
}
    9f34:	4620      	mov	r0, r4
    9f36:	bd38      	pop	{r3, r4, r5, pc}
    9f38:	10001da8 	.word	0x10001da8

00009f3c <host::pauseBuild(bool)>:
	do_host_reset = true; // indicate reset after response has been sent
	buildState = BUILD_CANCELED;
}

/// update state variables if print is paused
void pauseBuild(bool pause){
    9f3c:	b510      	push	{r4, lr}
    9f3e:	4604      	mov	r4, r0
	
	/// don't update time or state if we are already in the desired state
	if (!(pause == command::isPaused())){
    9f40:	f7fd ff72 	bl	7e28 <command::isPaused()>
    9f44:	42a0      	cmp	r0, r4
    9f46:	d022      	beq.n	9f8e <host::pauseBuild(bool)+0x52>
		
		command::pause(pause);
    9f48:	4620      	mov	r0, r4
    9f4a:	f7fd ff5f 	bl	7e0c <command::pause(bool)>
		if(pause){
    9f4e:	b17c      	cbz	r4, 9f70 <host::pauseBuild(bool)+0x34>
			buildState = BUILD_PAUSED;
    9f50:	f641 23e0 	movw	r3, #6880	; 0x1ae0
    9f54:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9f58:	f04f 0203 	mov.w	r2, #3
    9f5c:	701a      	strb	r2, [r3, #0]
			print_time.pause(true);
    9f5e:	f641 209c 	movw	r0, #6812	; 0x1a9c
    9f62:	f2c1 0000 	movt	r0, #4096	; 0x1000
    9f66:	f04f 0101 	mov.w	r1, #1
    9f6a:	f007 fc8d 	bl	11888 <Timeout::pause(bool)>
    9f6e:	bd10      	pop	{r4, pc}
		}else{
			buildState = BUILD_RUNNING;
    9f70:	f641 23e0 	movw	r3, #6880	; 0x1ae0
    9f74:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9f78:	f04f 0201 	mov.w	r2, #1
    9f7c:	701a      	strb	r2, [r3, #0]
			print_time.pause(false);
    9f7e:	f641 209c 	movw	r0, #6812	; 0x1a9c
    9f82:	f2c1 0000 	movt	r0, #4096	; 0x1000
    9f86:	f04f 0100 	mov.w	r1, #0
    9f8a:	f007 fc7d 	bl	11888 <Timeout::pause(bool)>
    9f8e:	bd10      	pop	{r4, pc}

00009f90 <host::startPrintTime()>:
		}
	}
}

void startPrintTime(){
    9f90:	b508      	push	{r3, lr}
	print_time.start(ONE_HOUR);
    9f92:	f641 209c 	movw	r0, #6812	; 0x1a9c
    9f96:	f2c1 0000 	movt	r0, #4096	; 0x1000
    9f9a:	f44f 4124 	mov.w	r1, #41984	; 0xa400
    9f9e:	f2cd 6193 	movt	r1, #54931	; 0xd693
    9fa2:	f007 fc3b 	bl	1181c <Timeout::start(unsigned long)>
	print_time_hours = 0;
    9fa6:	f641 3304 	movw	r3, #6916	; 0x1b04
    9faa:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9fae:	f04f 0200 	mov.w	r2, #0
    9fb2:	701a      	strb	r2, [r3, #0]
}
    9fb4:	bd08      	pop	{r3, pc}
    9fb6:	bf00      	nop

00009fb8 <host::handleBuildStartNotification(CircularBufferTempl<unsigned char>&)>:
	to_host.append8(RC_OK);
	to_host.append8(0);
}

    //set build name and build state
void handleBuildStartNotification(CircularBuffer& buf) {
    9fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9fbc:	b088      	sub	sp, #32
	
	uint8_t idx = 0;
	char newName[MAX_FILE_LEN];
	switch (currentState){
    9fbe:	f641 2368 	movw	r3, #6760	; 0x1a68
    9fc2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    9fc6:	781b      	ldrb	r3, [r3, #0]
    9fc8:	2b05      	cmp	r3, #5
    9fca:	f200 8085 	bhi.w	a0d8 <host::handleBuildStartNotification(CircularBufferTempl<unsigned char>&)+0x120>
    9fce:	e8df f003 	tbb	[pc, r3]
    9fd2:	4e47      	.short	0x4e47
    9fd4:	4e838303 	.word	0x4e838303
    9fd8:	f04f 0300 	mov.w	r3, #0
		}
	}
	/// Pop a byte off the head of the buffer
	inline BufDataType pop() {
		if (isEmpty()) {
			underflow = true;
    9fdc:	f04f 0601 	mov.w	r6, #1
			return BufDataType();
    9fe0:	461d      	mov	r5, r3
		case HOST_STATE_BUILDING_FROM_SD:
			do {
				newName[idx++] = buf.pop();		
    9fe2:	461c      	mov	r4, r3
		return size - length;
	}

	/// Check if the buffer is empty
	inline const bool isEmpty() const {
		return length == 0;
    9fe4:	8842      	ldrh	r2, [r0, #2]
    9fe6:	b292      	uxth	r2, r2
			overflow = true;
		}
	}
	/// Pop a byte off the head of the buffer
	inline BufDataType pop() {
		if (isEmpty()) {
    9fe8:	b912      	cbnz	r2, 9ff0 <host::handleBuildStartNotification(CircularBufferTempl<unsigned char>&)+0x38>
			underflow = true;
    9fea:	7346      	strb	r6, [r0, #13]
			return BufDataType();
    9fec:	4629      	mov	r1, r5
    9fee:	e01a      	b.n	a026 <host::handleBuildStartNotification(CircularBufferTempl<unsigned char>&)+0x6e>
	inline const bool isEmpty() const {
		return length == 0;
	}
	/// Read the buffer directly
	inline BufDataType& operator[](BufSizeType index) {
		const BufSizeType actual_index = (index + start) % size;
    9ff0:	8881      	ldrh	r1, [r0, #4]
    9ff2:	b289      	uxth	r1, r1
    9ff4:	8802      	ldrh	r2, [r0, #0]
    9ff6:	fb91 f7f2 	sdiv	r7, r1, r2
    9ffa:	fb02 1117 	mls	r1, r2, r7, r1
		return data[actual_index];
    9ffe:	b28f      	uxth	r7, r1
    a000:	f8d0 e008 	ldr.w	lr, [r0, #8]
		if (isEmpty()) {
			underflow = true;
			return BufDataType();
		}
		const BufDataType& popped_byte = operator[](0);
		start = (start + 1) % size;
    a004:	8881      	ldrh	r1, [r0, #4]
    a006:	b289      	uxth	r1, r1
    a008:	f101 0101 	add.w	r1, r1, #1
    a00c:	fb91 fcf2 	sdiv	ip, r1, r2
    a010:	fb02 121c 	mls	r2, r2, ip, r1
    a014:	b292      	uxth	r2, r2
    a016:	8082      	strh	r2, [r0, #4]
		length--;
    a018:	8842      	ldrh	r2, [r0, #2]
    a01a:	f102 32ff 	add.w	r2, r2, #4294967295
    a01e:	b292      	uxth	r2, r2
    a020:	8042      	strh	r2, [r0, #2]
		return popped_byte;
    a022:	f81e 1007 	ldrb.w	r1, [lr, r7]
    a026:	af08      	add	r7, sp, #32
    a028:	193a      	adds	r2, r7, r4
    a02a:	f802 1c20 	strb.w	r1, [r2, #-32]
    a02e:	f103 0301 	add.w	r3, r3, #1
    a032:	b2db      	uxtb	r3, r3
			} while (newName[idx-1] != '\0');
    a034:	18fa      	adds	r2, r7, r3
	
	uint8_t idx = 0;
	char newName[MAX_FILE_LEN];
	switch (currentState){
		case HOST_STATE_BUILDING_FROM_SD:
			do {
    a036:	f812 2c21 	ldrb.w	r2, [r2, #-33]
    a03a:	2a00      	cmp	r2, #0
    a03c:	d1d1      	bne.n	9fe2 <host::handleBuildStartNotification(CircularBufferTempl<unsigned char>&)+0x2a>
				newName[idx++] = buf.pop();		
			} while (newName[idx-1] != '\0');
			if(strcmp(newName, "RepG Build"))
    a03e:	4668      	mov	r0, sp
    a040:	f246 5148 	movw	r1, #25928	; 0x6548
    a044:	f2c0 0102 	movt	r1, #2
    a048:	f016 f878 	bl	2013c <strcmp>
    a04c:	2800      	cmp	r0, #0
    a04e:	d043      	beq.n	a0d8 <host::handleBuildStartNotification(CircularBufferTempl<unsigned char>&)+0x120>
				strcpy(buildName, newName);
    a050:	f641 20e4 	movw	r0, #6884	; 0x1ae4
    a054:	f2c1 0000 	movt	r0, #4096	; 0x1000
    a058:	4669      	mov	r1, sp
    a05a:	f016 f95d 	bl	20318 <strcpy>
    a05e:	e03b      	b.n	a0d8 <host::handleBuildStartNotification(CircularBufferTempl<unsigned char>&)+0x120>
			break;
		case HOST_STATE_READY:
			currentState = HOST_STATE_BUILDING;
    a060:	f641 2368 	movw	r3, #6760	; 0x1a68
    a064:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a068:	f04f 0201 	mov.w	r2, #1
    a06c:	701a      	strb	r2, [r3, #0]
	}
	/// Pop a byte off the head of the buffer
	inline BufDataType pop() {
		if (isEmpty()) {
			underflow = true;
			return BufDataType();
    a06e:	f04f 0300 	mov.w	r3, #0
		}
	}
	/// Pop a byte off the head of the buffer
	inline BufDataType pop() {
		if (isEmpty()) {
			underflow = true;
    a072:	f04f 0701 	mov.w	r7, #1
			return BufDataType();
    a076:	461e      	mov	r6, r3
		case HOST_STATE_BUILDING_ONBOARD:
		case HOST_STATE_BUILDING:
			do {
				buildName[idx++] = buf.pop();		
    a078:	f641 21e4 	movw	r1, #6884	; 0x1ae4
    a07c:	f2c1 0100 	movt	r1, #4096	; 0x1000
    a080:	461c      	mov	r4, r3
		return size - length;
	}

	/// Check if the buffer is empty
	inline const bool isEmpty() const {
		return length == 0;
    a082:	8842      	ldrh	r2, [r0, #2]
    a084:	b292      	uxth	r2, r2
			overflow = true;
		}
	}
	/// Pop a byte off the head of the buffer
	inline BufDataType pop() {
		if (isEmpty()) {
    a086:	b912      	cbnz	r2, a08e <host::handleBuildStartNotification(CircularBufferTempl<unsigned char>&)+0xd6>
			underflow = true;
    a088:	7347      	strb	r7, [r0, #13]
			return BufDataType();
    a08a:	4632      	mov	r2, r6
    a08c:	e01b      	b.n	a0c6 <host::handleBuildStartNotification(CircularBufferTempl<unsigned char>&)+0x10e>
	inline const bool isEmpty() const {
		return length == 0;
	}
	/// Read the buffer directly
	inline BufDataType& operator[](BufSizeType index) {
		const BufSizeType actual_index = (index + start) % size;
    a08e:	8885      	ldrh	r5, [r0, #4]
    a090:	b2ad      	uxth	r5, r5
    a092:	8802      	ldrh	r2, [r0, #0]
    a094:	fb95 fef2 	sdiv	lr, r5, r2
    a098:	fb02 551e 	mls	r5, r2, lr, r5
		return data[actual_index];
    a09c:	fa1f fe85 	uxth.w	lr, r5
    a0a0:	f8d0 c008 	ldr.w	ip, [r0, #8]
		if (isEmpty()) {
			underflow = true;
			return BufDataType();
		}
		const BufDataType& popped_byte = operator[](0);
		start = (start + 1) % size;
    a0a4:	8885      	ldrh	r5, [r0, #4]
    a0a6:	b2ad      	uxth	r5, r5
    a0a8:	f105 0501 	add.w	r5, r5, #1
    a0ac:	fb95 f8f2 	sdiv	r8, r5, r2
    a0b0:	fb02 5218 	mls	r2, r2, r8, r5
    a0b4:	b292      	uxth	r2, r2
    a0b6:	8082      	strh	r2, [r0, #4]
		length--;
    a0b8:	8842      	ldrh	r2, [r0, #2]
    a0ba:	f102 32ff 	add.w	r2, r2, #4294967295
    a0be:	b292      	uxth	r2, r2
    a0c0:	8042      	strh	r2, [r0, #2]
		return popped_byte;
    a0c2:	f81c 200e 	ldrb.w	r2, [ip, lr]
    a0c6:	550a      	strb	r2, [r1, r4]
    a0c8:	f103 0301 	add.w	r3, r3, #1
    a0cc:	b2db      	uxtb	r3, r3
			} while (buildName[idx-1] != '\0');
    a0ce:	18ca      	adds	r2, r1, r3
			break;
		case HOST_STATE_READY:
			currentState = HOST_STATE_BUILDING;
		case HOST_STATE_BUILDING_ONBOARD:
		case HOST_STATE_BUILDING:
			do {
    a0d0:	f812 2c01 	ldrb.w	r2, [r2, #-1]
    a0d4:	2a00      	cmp	r2, #0
    a0d6:	d1d3      	bne.n	a080 <host::handleBuildStartNotification(CircularBufferTempl<unsigned char>&)+0xc8>
				buildName[idx++] = buf.pop();		
			} while (buildName[idx-1] != '\0');
			break;
	}
	startPrintTime();
    a0d8:	f7ff ff5a 	bl	9f90 <host::startPrintTime()>
	command::clearLineNumber();
    a0dc:	f7fe f900 	bl	82e0 <command::clearLineNumber()>
	buildState = BUILD_RUNNING;
    a0e0:	f641 23e0 	movw	r3, #6880	; 0x1ae0
    a0e4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a0e8:	f04f 0201 	mov.w	r2, #1
    a0ec:	701a      	strb	r2, [r3, #0]
}
    a0ee:	b008      	add	sp, #32
    a0f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a0f4 <host::managePrintTime()>:
	getPrintTime(last_print_hours, last_print_minutes);
	print_time = Timeout();
	print_time_hours = 0;
}

void managePrintTime(){
    a0f4:	b508      	push	{r3, lr}

	/// print time is precise to the host loop frequency 
	if (print_time.hasElapsed()){
    a0f6:	f641 209c 	movw	r0, #6812	; 0x1a9c
    a0fa:	f2c1 0000 	movt	r0, #4096	; 0x1000
    a0fe:	f007 fba1 	bl	11844 <Timeout::hasElapsed()>
    a102:	b188      	cbz	r0, a128 <host::managePrintTime()+0x34>
		print_time.start(ONE_HOUR);
    a104:	f641 209c 	movw	r0, #6812	; 0x1a9c
    a108:	f2c1 0000 	movt	r0, #4096	; 0x1000
    a10c:	f44f 4124 	mov.w	r1, #41984	; 0xa400
    a110:	f2cd 6193 	movt	r1, #54931	; 0xd693
    a114:	f007 fb82 	bl	1181c <Timeout::start(unsigned long)>
		print_time_hours++;
    a118:	f641 3304 	movw	r3, #6916	; 0x1b04
    a11c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a120:	781a      	ldrb	r2, [r3, #0]
    a122:	f102 0201 	add.w	r2, r2, #1
    a126:	701a      	strb	r2, [r3, #0]
    a128:	bd08      	pop	{r3, pc}
    a12a:	bf00      	nop

0000a12c <host::getPrintTime(unsigned char&, unsigned char&)>:
	}
}

/// returns time hours and minutes since the start of the print
void getPrintTime(uint8_t& hours, uint8_t& minutes){
    a12c:	b510      	push	{r4, lr}
    a12e:	460c      	mov	r4, r1
	
	hours = print_time_hours;
    a130:	f641 3304 	movw	r3, #6916	; 0x1b04
    a134:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a138:	781b      	ldrb	r3, [r3, #0]
    a13a:	7003      	strb	r3, [r0, #0]
	minutes = print_time.getCurrentElapsed() / 60000000;
    a13c:	f641 209c 	movw	r0, #6812	; 0x1a9c
    a140:	f2c1 0000 	movt	r0, #4096	; 0x1000
    a144:	f007 fbbc 	bl	118c0 <Timeout::getCurrentElapsed()>
    a148:	ea4f 2010 	mov.w	r0, r0, lsr #8
    a14c:	f245 43c7 	movw	r3, #21703	; 0x54c7
    a150:	f2c0 131e 	movt	r3, #286	; 0x11e
    a154:	fba3 2300 	umull	r2, r3, r3, r0
    a158:	ea4f 2393 	mov.w	r3, r3, lsr #10
    a15c:	7023      	strb	r3, [r4, #0]
	return;
}
    a15e:	bd10      	pop	{r4, pc}

0000a160 <host::stopPrintTime()>:
void startPrintTime(){
	print_time.start(ONE_HOUR);
	print_time_hours = 0;
}

void stopPrintTime(){
    a160:	b530      	push	{r4, r5, lr}
    a162:	b085      	sub	sp, #20
	
	getPrintTime(last_print_hours, last_print_minutes);
    a164:	f641 2074 	movw	r0, #6772	; 0x1a74
    a168:	f2c1 0000 	movt	r0, #4096	; 0x1000
    a16c:	f641 21d5 	movw	r1, #6869	; 0x1ad5
    a170:	f2c1 0100 	movt	r1, #4096	; 0x1000
    a174:	f7ff ffda 	bl	a12c <host::getPrintTime(unsigned char&, unsigned char&)>
	print_time = Timeout();
    a178:	4668      	mov	r0, sp
    a17a:	f007 fb49 	bl	11810 <Timeout::Timeout()>
    a17e:	f641 259c 	movw	r5, #6812	; 0x1a9c
    a182:	f2c1 0500 	movt	r5, #4096	; 0x1000
    a186:	e89d 000f 	ldmia.w	sp, {r0, r1, r2, r3}
    a18a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	print_time_hours = 0;
    a18e:	f641 3304 	movw	r3, #6916	; 0x1b04
    a192:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a196:	f04f 0200 	mov.w	r2, #0
    a19a:	701a      	strb	r2, [r3, #0]
}
    a19c:	b005      	add	sp, #20
    a19e:	bd30      	pop	{r4, r5, pc}

0000a1a0 <host::stopBuild()>:
	command::reset();
	planner::abort();
}

// Stop the current build, if any
void stopBuild() {
    a1a0:	b508      	push	{r3, lr}
    // if building from repG, try to send a cancel msg to repG before reseting 
	if(currentState == HOST_STATE_BUILDING)
    a1a2:	f641 2368 	movw	r3, #6760	; 0x1a68
    a1a6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a1aa:	781b      	ldrb	r3, [r3, #0]
    a1ac:	2b01      	cmp	r3, #1
    a1ae:	d117      	bne.n	a1e0 <host::stopBuild()+0x40>
	{	
		currentState = HOST_STATE_CANCEL_BUILD;
    a1b0:	f641 2368 	movw	r3, #6760	; 0x1a68
    a1b4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a1b8:	f04f 0204 	mov.w	r2, #4
    a1bc:	701a      	strb	r2, [r3, #0]
		cancel_timeout.start(1000000); //look for commands from repG for one second before resetting
    a1be:	f641 20c4 	movw	r0, #6852	; 0x1ac4
    a1c2:	f2c1 0000 	movt	r0, #4096	; 0x1000
    a1c6:	f244 2140 	movw	r1, #16960	; 0x4240
    a1ca:	f2c0 010f 	movt	r1, #15
    a1ce:	f007 fb25 	bl	1181c <Timeout::start(unsigned long)>
		cancelBuild = true;
    a1d2:	f641 2394 	movw	r3, #6804	; 0x1a94
    a1d6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a1da:	f04f 0201 	mov.w	r2, #1
    a1de:	701a      	strb	r2, [r3, #0]
	}
	last_print_line = command::getLineNumber();
    a1e0:	f7fe f878 	bl	82d4 <command::getLineNumber()>
    a1e4:	f641 236c 	movw	r3, #6764	; 0x1a6c
    a1e8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a1ec:	6018      	str	r0, [r3, #0]
	stopPrintTime();
    a1ee:	f7ff ffb7 	bl	a160 <host::stopPrintTime()>
	do_host_reset = true; // indicate reset after response has been sent
    a1f2:	f641 2380 	movw	r3, #6784	; 0x1a80
    a1f6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a1fa:	f04f 0201 	mov.w	r2, #1
    a1fe:	701a      	strb	r2, [r3, #0]
	buildState = BUILD_CANCELED;
    a200:	f641 23e0 	movw	r3, #6880	; 0x1ae0
    a204:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a208:	f04f 0204 	mov.w	r2, #4
    a20c:	701a      	strb	r2, [r3, #0]
}
    a20e:	bd08      	pop	{r3, pc}

0000a210 <host::handleBuildStopNotification(unsigned char)>:
	command::clearLineNumber();
	buildState = BUILD_RUNNING;
}

    // set build state to ready
void handleBuildStopNotification(uint8_t stopFlags) {
    a210:	b508      	push	{r3, lr}
	uint8_t flags = stopFlags;

	stopPrintTime();
    a212:	f7ff ffa5 	bl	a160 <host::stopPrintTime()>
	last_print_line = command::getLineNumber();
    a216:	f7fe f85d 	bl	82d4 <command::getLineNumber()>
    a21a:	f641 236c 	movw	r3, #6764	; 0x1a6c
    a21e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a222:	6018      	str	r0, [r3, #0]
	buildState = BUILD_FINISHED_NORMALLY;
    a224:	f641 23e0 	movw	r3, #6880	; 0x1ae0
    a228:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a22c:	f04f 0202 	mov.w	r2, #2
    a230:	701a      	strb	r2, [r3, #0]
	currentState = HOST_STATE_READY;
    a232:	f641 2368 	movw	r3, #6760	; 0x1a68
    a236:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a23a:	f04f 0200 	mov.w	r2, #0
    a23e:	701a      	strb	r2, [r3, #0]
}
    a240:	bd08      	pop	{r3, pc}
    a242:	bf00      	nop

0000a244 <host::processExtruderQueryPacket(InPacket const&, OutPacket&)>:
	minutes = print_time.getCurrentElapsed() / 60000000;
	return;
}

    // legacy tool / motherboard breakout of query commands
bool processExtruderQueryPacket(const InPacket& from_host, OutPacket& to_host) {
    a244:	b570      	push	{r4, r5, r6, lr}
    a246:	4604      	mov	r4, r0
    a248:	460d      	mov	r5, r1
    a24a:	7803      	ldrb	r3, [r0, #0]
	Motherboard& board = Motherboard::getBoard();
	if (from_host.getLength() >= 1) {
    a24c:	2b00      	cmp	r3, #0
    a24e:	f000 811c 	beq.w	a48a <host::processExtruderQueryPacket(InPacket const&, OutPacket&)+0x246>
			
        uint8_t	id = from_host.read8(1);
    a252:	f04f 0101 	mov.w	r1, #1
    a256:	f006 fe27 	bl	10ea8 <Packet::read8(unsigned char) const>
    a25a:	4606      	mov	r6, r0
		uint8_t command = from_host.read8(2);
    a25c:	4620      	mov	r0, r4
    a25e:	f04f 0102 	mov.w	r1, #2
    a262:	f006 fe21 	bl	10ea8 <Packet::read8(unsigned char) const>
		// All commands are query commands.	
		switch (command) {
    a266:	2825      	cmp	r0, #37	; 0x25
    a268:	f200 8112 	bhi.w	a490 <host::processExtruderQueryPacket(InPacket const&, OutPacket&)+0x24c>
    a26c:	e8df f010 	tbh	[pc, r0, lsl #1]
    a270:	01100026 	.word	0x01100026
    a274:	01100033 	.word	0x01100033
    a278:	01100110 	.word	0x01100110
    a27c:	01100110 	.word	0x01100110
    a280:	01100110 	.word	0x01100110
    a284:	01100110 	.word	0x01100110
    a288:	01100110 	.word	0x01100110
    a28c:	01100110 	.word	0x01100110
    a290:	01100110 	.word	0x01100110
    a294:	01100110 	.word	0x01100110
    a298:	01100110 	.word	0x01100110
    a29c:	01100049 	.word	0x01100049
    a2a0:	01100110 	.word	0x01100110
    a2a4:	01100110 	.word	0x01100110
    a2a8:	01100110 	.word	0x01100110
    a2ac:	0110005f 	.word	0x0110005f
    a2b0:	0084006e 	.word	0x0084006e
    a2b4:	00930110 	.word	0x00930110
    a2b8:	00d400a2 	.word	0x00d400a2
		case SLAVE_CMD_VERSION:
			to_host.append8(RC_OK);
    a2bc:	4628      	mov	r0, r5
    a2be:	f04f 0181 	mov.w	r1, #129	; 0x81
    a2c2:	f006 fe49 	bl	10f58 <OutPacket::append8(unsigned char)>
			to_host.append16(firmware_version);
    a2c6:	4628      	mov	r0, r5
    a2c8:	f240 212b 	movw	r1, #555	; 0x22b
    a2cc:	f006 fe48 	bl	10f60 <OutPacket::append16(unsigned short)>
			return true;
    a2d0:	f04f 0001 	mov.w	r0, #1
    a2d4:	bd70      	pop	{r4, r5, r6, pc}
		case SLAVE_CMD_GET_TEMP:
			to_host.append8(RC_OK);
    a2d6:	4628      	mov	r0, r5
    a2d8:	f04f 0181 	mov.w	r1, #129	; 0x81
    a2dc:	f006 fe3c 	bl	10f58 <OutPacket::append8(unsigned char)>
    a2e0:	4b7a      	ldr	r3, [pc, #488]	; (a4cc <host::processExtruderQueryPacket(InPacket const&, OutPacket&)+0x288>)
    a2e2:	f1a3 00e0 	sub.w	r0, r3, #224	; 0xe0
    a2e6:	2e01      	cmp	r6, #1
    a2e8:	bf08      	it	eq
    a2ea:	4618      	moveq	r0, r3
			to_host.append16(board.getExtruderBoard(id).getExtruderHeater().get_current_temperature());
    a2ec:	f100 0028 	add.w	r0, r0, #40	; 0x28
    a2f0:	f006 fa6a 	bl	107c8 <Heater::get_current_temperature()>
    a2f4:	b281      	uxth	r1, r0
    a2f6:	4628      	mov	r0, r5
    a2f8:	f006 fe32 	bl	10f60 <OutPacket::append16(unsigned short)>
			return true;
    a2fc:	f04f 0001 	mov.w	r0, #1
    a300:	bd70      	pop	{r4, r5, r6, pc}
		case SLAVE_CMD_IS_TOOL_READY:
			to_host.append8(RC_OK);
    a302:	4628      	mov	r0, r5
    a304:	f04f 0181 	mov.w	r1, #129	; 0x81
    a308:	f006 fe26 	bl	10f58 <OutPacket::append8(unsigned char)>
    a30c:	4b6f      	ldr	r3, [pc, #444]	; (a4cc <host::processExtruderQueryPacket(InPacket const&, OutPacket&)+0x288>)
    a30e:	f1a3 00e0 	sub.w	r0, r3, #224	; 0xe0
    a312:	2e01      	cmp	r6, #1
    a314:	bf08      	it	eq
    a316:	4618      	moveq	r0, r3
			to_host.append8(board.getExtruderBoard(id).getExtruderHeater().has_reached_target_temperature()?1:0);
    a318:	f100 0028 	add.w	r0, r0, #40	; 0x28
    a31c:	f006 fa36 	bl	1078c <Heater::has_reached_target_temperature()>
    a320:	4601      	mov	r1, r0
    a322:	4628      	mov	r0, r5
    a324:	f006 fe18 	bl	10f58 <OutPacket::append8(unsigned char)>
			return true;
    a328:	f04f 0001 	mov.w	r0, #1
    a32c:	bd70      	pop	{r4, r5, r6, pc}
		case SLAVE_CMD_GET_PLATFORM_TEMP:
			to_host.append8(RC_OK);
    a32e:	4628      	mov	r0, r5
    a330:	f04f 0181 	mov.w	r1, #129	; 0x81
    a334:	f006 fe10 	bl	10f58 <OutPacket::append8(unsigned char)>
			to_host.append16(board.getPlatformHeater().get_current_temperature());
    a338:	4865      	ldr	r0, [pc, #404]	; (a4d0 <host::processExtruderQueryPacket(InPacket const&, OutPacket&)+0x28c>)
    a33a:	f006 fa45 	bl	107c8 <Heater::get_current_temperature()>
    a33e:	b281      	uxth	r1, r0
    a340:	4628      	mov	r0, r5
    a342:	f006 fe0d 	bl	10f60 <OutPacket::append16(unsigned short)>
			return true;
    a346:	f04f 0001 	mov.w	r0, #1
    a34a:	bd70      	pop	{r4, r5, r6, pc}
		case SLAVE_CMD_GET_SP:
			to_host.append8(RC_OK);
    a34c:	4628      	mov	r0, r5
    a34e:	f04f 0181 	mov.w	r1, #129	; 0x81
    a352:	f006 fe01 	bl	10f58 <OutPacket::append8(unsigned char)>
    a356:	4b5d      	ldr	r3, [pc, #372]	; (a4cc <host::processExtruderQueryPacket(InPacket const&, OutPacket&)+0x288>)
    a358:	f1a3 00e0 	sub.w	r0, r3, #224	; 0xe0
    a35c:	2e01      	cmp	r6, #1
    a35e:	bf08      	it	eq
    a360:	4618      	moveq	r0, r3
			to_host.append16(board.getExtruderBoard(id).getExtruderHeater().get_set_temperature());
    a362:	f100 0028 	add.w	r0, r0, #40	; 0x28
    a366:	f006 fa2d 	bl	107c4 <Heater::get_set_temperature()>
    a36a:	b281      	uxth	r1, r0
    a36c:	4628      	mov	r0, r5
    a36e:	f006 fdf7 	bl	10f60 <OutPacket::append16(unsigned short)>
			return true;
    a372:	f04f 0001 	mov.w	r0, #1
    a376:	bd70      	pop	{r4, r5, r6, pc}
		case SLAVE_CMD_GET_PLATFORM_SP:
			to_host.append8(RC_OK);
    a378:	4628      	mov	r0, r5
    a37a:	f04f 0181 	mov.w	r1, #129	; 0x81
    a37e:	f006 fdeb 	bl	10f58 <OutPacket::append8(unsigned char)>
			to_host.append16(board.getPlatformHeater().get_set_temperature());
    a382:	4853      	ldr	r0, [pc, #332]	; (a4d0 <host::processExtruderQueryPacket(InPacket const&, OutPacket&)+0x28c>)
    a384:	f006 fa1e 	bl	107c4 <Heater::get_set_temperature()>
    a388:	b281      	uxth	r1, r0
    a38a:	4628      	mov	r0, r5
    a38c:	f006 fde8 	bl	10f60 <OutPacket::append16(unsigned short)>
			return true;
    a390:	f04f 0001 	mov.w	r0, #1
    a394:	bd70      	pop	{r4, r5, r6, pc}
		case SLAVE_CMD_IS_PLATFORM_READY:
			to_host.append8(RC_OK);
    a396:	4628      	mov	r0, r5
    a398:	f04f 0181 	mov.w	r1, #129	; 0x81
    a39c:	f006 fddc 	bl	10f58 <OutPacket::append8(unsigned char)>
			to_host.append8(board.getPlatformHeater().has_reached_target_temperature()?1:0);
    a3a0:	484b      	ldr	r0, [pc, #300]	; (a4d0 <host::processExtruderQueryPacket(InPacket const&, OutPacket&)+0x28c>)
    a3a2:	f006 f9f3 	bl	1078c <Heater::has_reached_target_temperature()>
    a3a6:	4601      	mov	r1, r0
    a3a8:	4628      	mov	r0, r5
    a3aa:	f006 fdd5 	bl	10f58 <OutPacket::append8(unsigned char)>
			return true;
    a3ae:	f04f 0001 	mov.w	r0, #1
    a3b2:	bd70      	pop	{r4, r5, r6, pc}
		case SLAVE_CMD_GET_TOOL_STATUS:
			to_host.append8(RC_OK);
    a3b4:	4628      	mov	r0, r5
    a3b6:	f04f 0181 	mov.w	r1, #129	; 0x81
    a3ba:	f006 fdcd 	bl	10f58 <OutPacket::append8(unsigned char)>
    a3be:	4b43      	ldr	r3, [pc, #268]	; (a4cc <host::processExtruderQueryPacket(InPacket const&, OutPacket&)+0x288>)
    a3c0:	f1a3 00e0 	sub.w	r0, r3, #224	; 0xe0
    a3c4:	2e01      	cmp	r6, #1
    a3c6:	bf08      	it	eq
    a3c8:	4618      	moveq	r0, r3
			to_host.append8((board.getExtruderBoard(id).getExtruderHeater().has_failed()?128:0)
    a3ca:	f100 0028 	add.w	r0, r0, #40	; 0x28
    a3ce:	f006 fb75 	bl	10abc <Heater::has_failed()>
							| (board.getPlatformHeater().has_failed()?64:0)
							| (board.getExtruderBoard(id).getExtruderHeater().GetFailMode())
							| (board.getExtruderBoard(id).getExtruderHeater().has_reached_target_temperature()?1:0));
    a3d2:	2800      	cmp	r0, #0
    a3d4:	bf14      	ite	ne
    a3d6:	2480      	movne	r4, #128	; 0x80
    a3d8:	2400      	moveq	r4, #0
			to_host.append8(board.getPlatformHeater().has_reached_target_temperature()?1:0);
			return true;
		case SLAVE_CMD_GET_TOOL_STATUS:
			to_host.append8(RC_OK);
			to_host.append8((board.getExtruderBoard(id).getExtruderHeater().has_failed()?128:0)
							| (board.getPlatformHeater().has_failed()?64:0)
    a3da:	483d      	ldr	r0, [pc, #244]	; (a4d0 <host::processExtruderQueryPacket(InPacket const&, OutPacket&)+0x28c>)
    a3dc:	f006 fb6e 	bl	10abc <Heater::has_failed()>
							| (board.getExtruderBoard(id).getExtruderHeater().GetFailMode())
							| (board.getExtruderBoard(id).getExtruderHeater().has_reached_target_temperature()?1:0));
    a3e0:	2800      	cmp	r0, #0
    a3e2:	bf14      	ite	ne
    a3e4:	2040      	movne	r0, #64	; 0x40
    a3e6:	2000      	moveq	r0, #0
    a3e8:	4304      	orrs	r4, r0
    a3ea:	2e01      	cmp	r6, #1
    a3ec:	d153      	bne.n	a496 <host::processExtruderQueryPacket(InPacket const&, OutPacket&)+0x252>
			return true;
		case SLAVE_CMD_GET_TOOL_STATUS:
			to_host.append8(RC_OK);
			to_host.append8((board.getExtruderBoard(id).getExtruderHeater().has_failed()?128:0)
							| (board.getPlatformHeater().has_failed()?64:0)
							| (board.getExtruderBoard(id).getExtruderHeater().GetFailMode())
    a3ee:	4e39      	ldr	r6, [pc, #228]	; (a4d4 <host::processExtruderQueryPacket(InPacket const&, OutPacket&)+0x290>)
    a3f0:	4630      	mov	r0, r6
    a3f2:	f006 fb67 	bl	10ac4 <Heater::GetFailMode()>
							| (board.getExtruderBoard(id).getExtruderHeater().has_reached_target_temperature()?1:0));
    a3f6:	4304      	orrs	r4, r0
    a3f8:	b2e4      	uxtb	r4, r4
    a3fa:	f1a6 0028 	sub.w	r0, r6, #40	; 0x28
    a3fe:	f100 0028 	add.w	r0, r0, #40	; 0x28
    a402:	f006 f9c3 	bl	1078c <Heater::has_reached_target_temperature()>
    a406:	ea40 0104 	orr.w	r1, r0, r4
    a40a:	4628      	mov	r0, r5
    a40c:	b2c9      	uxtb	r1, r1
    a40e:	f006 fda3 	bl	10f58 <OutPacket::append8(unsigned char)>
			return true;
    a412:	f04f 0001 	mov.w	r0, #1
    a416:	bd70      	pop	{r4, r5, r6, pc}
		case SLAVE_CMD_GET_PID_STATE:
			to_host.append8(RC_OK);
    a418:	4628      	mov	r0, r5
    a41a:	f04f 0181 	mov.w	r1, #129	; 0x81
    a41e:	f006 fd9b 	bl	10f58 <OutPacket::append8(unsigned char)>
    a422:	2e01      	cmp	r6, #1
    a424:	d140      	bne.n	a4a8 <host::processExtruderQueryPacket(InPacket const&, OutPacket&)+0x264>
			to_host.append16(board.getExtruderBoard(id).getExtruderHeater().getPIDErrorTerm());
    a426:	4c2b      	ldr	r4, [pc, #172]	; (a4d4 <host::processExtruderQueryPacket(InPacket const&, OutPacket&)+0x290>)
    a428:	4620      	mov	r0, r4
    a42a:	f006 f9d1 	bl	107d0 <Heater::getPIDErrorTerm()>
    a42e:	b281      	uxth	r1, r0
    a430:	4628      	mov	r0, r5
    a432:	f006 fd95 	bl	10f60 <OutPacket::append16(unsigned short)>
			to_host.append16(board.getExtruderBoard(id).getExtruderHeater().getPIDDeltaTerm());
    a436:	4620      	mov	r0, r4
    a438:	f006 f9d0 	bl	107dc <Heater::getPIDDeltaTerm()>
    a43c:	b281      	uxth	r1, r0
    a43e:	4628      	mov	r0, r5
    a440:	f006 fd8e 	bl	10f60 <OutPacket::append16(unsigned short)>
    a444:	f1a4 0028 	sub.w	r0, r4, #40	; 0x28
			to_host.append16(board.getExtruderBoard(id).getExtruderHeater().getPIDLastOutput());
    a448:	f100 0028 	add.w	r0, r0, #40	; 0x28
    a44c:	f006 f9cc 	bl	107e8 <Heater::getPIDLastOutput()>
    a450:	b281      	uxth	r1, r0
    a452:	4628      	mov	r0, r5
    a454:	f006 fd84 	bl	10f60 <OutPacket::append16(unsigned short)>
			to_host.append16(board.getPlatformHeater().getPIDErrorTerm());
    a458:	4c1d      	ldr	r4, [pc, #116]	; (a4d0 <host::processExtruderQueryPacket(InPacket const&, OutPacket&)+0x28c>)
    a45a:	4620      	mov	r0, r4
    a45c:	f006 f9b8 	bl	107d0 <Heater::getPIDErrorTerm()>
    a460:	b281      	uxth	r1, r0
    a462:	4628      	mov	r0, r5
    a464:	f006 fd7c 	bl	10f60 <OutPacket::append16(unsigned short)>
			to_host.append16(board.getPlatformHeater().getPIDDeltaTerm());
    a468:	4620      	mov	r0, r4
    a46a:	f006 f9b7 	bl	107dc <Heater::getPIDDeltaTerm()>
    a46e:	b281      	uxth	r1, r0
    a470:	4628      	mov	r0, r5
    a472:	f006 fd75 	bl	10f60 <OutPacket::append16(unsigned short)>
			to_host.append16(board.getPlatformHeater().getPIDLastOutput());
    a476:	4620      	mov	r0, r4
    a478:	f006 f9b6 	bl	107e8 <Heater::getPIDLastOutput()>
    a47c:	b281      	uxth	r1, r0
    a47e:	4628      	mov	r0, r5
    a480:	f006 fd6e 	bl	10f60 <OutPacket::append16(unsigned short)>
			return true;
    a484:	f04f 0001 	mov.w	r0, #1
    a488:	bd70      	pop	{r4, r5, r6, pc}
		}
	}
	return false;
    a48a:	f04f 0000 	mov.w	r0, #0
    a48e:	bd70      	pop	{r4, r5, r6, pc}
    a490:	f04f 0000 	mov.w	r0, #0
}
    a494:	bd70      	pop	{r4, r5, r6, pc}
			return true;
		case SLAVE_CMD_GET_TOOL_STATUS:
			to_host.append8(RC_OK);
			to_host.append8((board.getExtruderBoard(id).getExtruderHeater().has_failed()?128:0)
							| (board.getPlatformHeater().has_failed()?64:0)
							| (board.getExtruderBoard(id).getExtruderHeater().GetFailMode())
    a496:	4e10      	ldr	r6, [pc, #64]	; (a4d8 <host::processExtruderQueryPacket(InPacket const&, OutPacket&)+0x294>)
    a498:	4630      	mov	r0, r6
    a49a:	f006 fb13 	bl	10ac4 <Heater::GetFailMode()>
							| (board.getExtruderBoard(id).getExtruderHeater().has_reached_target_temperature()?1:0));
    a49e:	4304      	orrs	r4, r0
    a4a0:	b2e4      	uxtb	r4, r4
    a4a2:	f1a6 0028 	sub.w	r0, r6, #40	; 0x28
    a4a6:	e7aa      	b.n	a3fe <host::processExtruderQueryPacket(InPacket const&, OutPacket&)+0x1ba>
			return true;
		case SLAVE_CMD_GET_PID_STATE:
			to_host.append8(RC_OK);
			to_host.append16(board.getExtruderBoard(id).getExtruderHeater().getPIDErrorTerm());
    a4a8:	4c0b      	ldr	r4, [pc, #44]	; (a4d8 <host::processExtruderQueryPacket(InPacket const&, OutPacket&)+0x294>)
    a4aa:	4620      	mov	r0, r4
    a4ac:	f006 f990 	bl	107d0 <Heater::getPIDErrorTerm()>
    a4b0:	b281      	uxth	r1, r0
    a4b2:	4628      	mov	r0, r5
    a4b4:	f006 fd54 	bl	10f60 <OutPacket::append16(unsigned short)>
			to_host.append16(board.getExtruderBoard(id).getExtruderHeater().getPIDDeltaTerm());
    a4b8:	4620      	mov	r0, r4
    a4ba:	f006 f98f 	bl	107dc <Heater::getPIDDeltaTerm()>
    a4be:	b281      	uxth	r1, r0
    a4c0:	4628      	mov	r0, r5
    a4c2:	f006 fd4d 	bl	10f60 <OutPacket::append16(unsigned short)>
    a4c6:	f1a4 0028 	sub.w	r0, r4, #40	; 0x28
    a4ca:	e7bd      	b.n	a448 <host::processExtruderQueryPacket(InPacket const&, OutPacket&)+0x204>
    a4cc:	10001ca4 	.word	0x10001ca4
    a4d0:	10001da8 	.word	0x10001da8
    a4d4:	10001ccc 	.word	0x10001ccc
    a4d8:	10001bec 	.word	0x10001bec

0000a4dc <host::processQueryPacket(InPacket const&, OutPacket&)>:
	to_host.append8(RC_OK);
	to_host.append8(board.GetErrorStatus());
}

// query packets (non action, not queued)
bool processQueryPacket(const InPacket& from_host, OutPacket& to_host) {
    a4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a4e0:	b087      	sub	sp, #28
    a4e2:	4604      	mov	r4, r0
    a4e4:	460e      	mov	r6, r1
    a4e6:	7803      	ldrb	r3, [r0, #0]
	if (from_host.getLength() >= 1) {
    a4e8:	2b00      	cmp	r3, #0
    a4ea:	f000 8265 	beq.w	a9b8 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4dc>
		uint8_t command = from_host.read8(0);
    a4ee:	4607      	mov	r7, r0
    a4f0:	f04f 0100 	mov.w	r1, #0
    a4f4:	f006 fcd8 	bl	10ea8 <Packet::read8(unsigned char) const>
		if ((command & 0x80) == 0) {
    a4f8:	f010 0f80 	tst.w	r0, #128	; 0x80
				handleGetAdvancedVersion(from_host, to_host);
				return true;
			}
		}
	}
	return false;
    a4fc:	bf18      	it	ne
    a4fe:	2000      	movne	r0, #0

// query packets (non action, not queued)
bool processQueryPacket(const InPacket& from_host, OutPacket& to_host) {
	if (from_host.getLength() >= 1) {
		uint8_t command = from_host.read8(0);
		if ((command & 0x80) == 0) {
    a500:	f040 8262 	bne.w	a9c8 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ec>
			// Is query command.
			switch (command) {
    a504:	281b      	cmp	r0, #27
    a506:	f200 825a 	bhi.w	a9be <host::processQueryPacket(InPacket const&, OutPacket&)+0x4e2>
    a50a:	e8df f010 	tbh	[pc, r0, lsl #1]
    a50e:	001c      	.short	0x001c
    a510:	00850056 	.word	0x00850056
    a514:	0093005e 	.word	0x0093005e
    a518:	02580258 	.word	0x02580258
    a51c:	014b005e 	.word	0x014b005e
    a520:	015a0258 	.word	0x015a0258
    a524:	0174015f 	.word	0x0174015f
    a528:	00fd017b 	.word	0x00fd017b
    a52c:	011d010d 	.word	0x011d010d
    a530:	0144005e 	.word	0x0144005e
    a534:	003d0258 	.word	0x003d0258
    a538:	01c600bf 	.word	0x01c600bf
    a53c:	01f501e3 	.word	0x01f501e3
    a540:	02580258 	.word	0x02580258
    a544:	0234      	.short	0x0234
// Received driver version info, and request for fw version info.
// puts fw version into a reply packet, and send it back
inline void handleVersion(const InPacket& from_host, OutPacket& to_host) {

    // Case to give an error on Replicator G versions older than 0025. See footnote 1
    if(from_host.read16(1)  <=  25   ) {
    a546:	4620      	mov	r0, r4
    a548:	f04f 0101 	mov.w	r1, #1
    a54c:	f006 fcb0 	bl	10eb0 <Packet::read16(unsigned char) const>
    a550:	2819      	cmp	r0, #25
    a552:	d80c      	bhi.n	a56e <host::processQueryPacket(InPacket const&, OutPacket&)+0x92>
        to_host.append8(RC_OK);
    a554:	4630      	mov	r0, r6
    a556:	f04f 0181 	mov.w	r1, #129	; 0x81
    a55a:	f006 fcfd 	bl	10f58 <OutPacket::append8(unsigned char)>
        to_host.append16(0x0000);
    a55e:	4630      	mov	r0, r6
    a560:	f04f 0100 	mov.w	r1, #0
    a564:	f006 fcfc 	bl	10f60 <OutPacket::append16(unsigned short)>
		if ((command & 0x80) == 0) {
			// Is query command.
			switch (command) {
			case HOST_CMD_VERSION:
				handleVersion(from_host,to_host);
				return true;
    a568:	f04f 0001 	mov.w	r0, #1
    a56c:	e22c      	b.n	a9c8 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ec>
    if(from_host.read16(1)  <=  25   ) {
        to_host.append8(RC_OK);
        to_host.append16(0x0000);
    }
    else  {
        to_host.append8(RC_OK);
    a56e:	4630      	mov	r0, r6
    a570:	f04f 0181 	mov.w	r1, #129	; 0x81
    a574:	f006 fcf0 	bl	10f58 <OutPacket::append8(unsigned char)>
        to_host.append16(firmware_version);
    a578:	4630      	mov	r0, r6
    a57a:	f240 212b 	movw	r1, #555	; 0x22b
    a57e:	f006 fcef 	bl	10f60 <OutPacket::append16(unsigned short)>
		if ((command & 0x80) == 0) {
			// Is query command.
			switch (command) {
			case HOST_CMD_VERSION:
				handleVersion(from_host,to_host);
				return true;
    a582:	f04f 0001 	mov.w	r0, #1
    a586:	e21f      	b.n	a9c8 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ec>

}

    // return build name
inline void handleGetBuildName(const InPacket& from_host, OutPacket& to_host) {
	to_host.append8(RC_OK);
    a588:	4630      	mov	r0, r6
    a58a:	f04f 0181 	mov.w	r1, #129	; 0x81
    a58e:	f006 fce3 	bl	10f58 <OutPacket::append8(unsigned char)>
    a592:	f641 24e4 	movw	r4, #6884	; 0x1ae4
    a596:	f2c1 0400 	movt	r4, #4096	; 0x1000
	to_host.append8(RC_OK);
	to_host.append8(board.GetErrorStatus());
}

// query packets (non action, not queued)
bool processQueryPacket(const InPacket& from_host, OutPacket& to_host) {
    a59a:	f104 051f 	add.w	r5, r4, #31

    // return build name
inline void handleGetBuildName(const InPacket& from_host, OutPacket& to_host) {
	to_host.append8(RC_OK);
	for (uint8_t idx = 0; idx < MAX_FILE_LEN; idx++) {
	  to_host.append8(buildName[idx]);
    a59e:	4630      	mov	r0, r6
    a5a0:	7821      	ldrb	r1, [r4, #0]
    a5a2:	f006 fcd9 	bl	10f58 <OutPacket::append8(unsigned char)>
	  if (buildName[idx] == '\0') { break; }
    a5a6:	f814 3b01 	ldrb.w	r3, [r4], #1
    a5aa:	2b00      	cmp	r3, #0
    a5ac:	f000 820a 	beq.w	a9c4 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4e8>
}

    // return build name
inline void handleGetBuildName(const InPacket& from_host, OutPacket& to_host) {
	to_host.append8(RC_OK);
	for (uint8_t idx = 0; idx < MAX_FILE_LEN; idx++) {
    a5b0:	42ac      	cmp	r4, r5
    a5b2:	d1f4      	bne.n	a59e <host::processQueryPacket(InPacket const&, OutPacket&)+0xc2>
			case HOST_CMD_VERSION:
				handleVersion(from_host,to_host);
				return true;
			case HOST_CMD_GET_BUILD_NAME:
				handleGetBuildName(from_host,to_host);
				return true;
    a5b4:	f04f 0001 	mov.w	r0, #1
    a5b8:	e206      	b.n	a9c8 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ec>
			case HOST_CMD_INIT:
				// There's really nothing we want to do here; we don't want to
				// interrupt a running build, for example.
				to_host.append8(RC_OK);
    a5ba:	4630      	mov	r0, r6
    a5bc:	f04f 0181 	mov.w	r1, #129	; 0x81
    a5c0:	f006 fcca 	bl	10f58 <OutPacket::append8(unsigned char)>
				return true;
    a5c4:	f04f 0001 	mov.w	r0, #1
    a5c8:	e1fe      	b.n	a9c8 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ec>
			case HOST_CMD_CLEAR_BUFFER: // equivalent at current time
			case HOST_CMD_ABORT: // equivalent at current time
			case HOST_CMD_RESET:
				if (currentState == HOST_STATE_BUILDING
    a5ca:	f641 2368 	movw	r3, #6760	; 0x1a68
    a5ce:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a5d2:	781b      	ldrb	r3, [r3, #0]
    a5d4:	f103 32ff 	add.w	r2, r3, #4294967295
    a5d8:	b2d2      	uxtb	r2, r2
    a5da:	2b05      	cmp	r3, #5
    a5dc:	bf14      	ite	ne
    a5de:	2300      	movne	r3, #0
    a5e0:	2301      	moveq	r3, #1
    a5e2:	2a01      	cmp	r2, #1
    a5e4:	bf98      	it	ls
    a5e6:	f043 0301 	orrls.w	r3, r3, #1
    a5ea:	b13b      	cbz	r3, a5fc <host::processQueryPacket(InPacket const&, OutPacket&)+0x120>
						|| currentState == HOST_STATE_BUILDING_FROM_SD
						|| currentState == HOST_STATE_BUILDING_ONBOARD) {
					Motherboard::getBoard().indicateError(ERR_RESET_DURING_BUILD);
    a5ec:	f641 309c 	movw	r0, #7068	; 0x1b9c
    a5f0:	f2c1 0000 	movt	r0, #4096	; 0x1000
    a5f4:	f04f 0104 	mov.w	r1, #4
    a5f8:	f000 ff3e 	bl	b478 <Motherboard::indicateError(int)>
				}

				do_host_reset = true; // indicate reset after response has been sent
    a5fc:	f641 2380 	movw	r3, #6784	; 0x1a80
    a600:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a604:	f04f 0401 	mov.w	r4, #1
    a608:	701c      	strb	r4, [r3, #0]
				to_host.append8(RC_OK);
    a60a:	4630      	mov	r0, r6
    a60c:	f04f 0181 	mov.w	r1, #129	; 0x81
    a610:	f006 fca2 	bl	10f58 <OutPacket::append8(unsigned char)>
				return true;
    a614:	4620      	mov	r0, r4
    a616:	e1d7      	b.n	a9c8 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ec>
	  if (buildName[idx] == '\0') { break; }
	}
}

inline void handleGetBufferSize(const InPacket& from_host, OutPacket& to_host) {
	to_host.append8(RC_OK);
    a618:	4630      	mov	r0, r6
    a61a:	f04f 0181 	mov.w	r1, #129	; 0x81
    a61e:	f006 fc9b 	bl	10f58 <OutPacket::append8(unsigned char)>
	to_host.append32(command::getRemainingCapacity());
    a622:	f7fd fbe9 	bl	7df8 <command::getRemainingCapacity()>
    a626:	4601      	mov	r1, r0
    a628:	4630      	mov	r0, r6
    a62a:	f006 fca5 	bl	10f78 <OutPacket::append32(unsigned long)>
				do_host_reset = true; // indicate reset after response has been sent
				to_host.append8(RC_OK);
				return true;
			case HOST_CMD_GET_BUFFER_SIZE:
				handleGetBufferSize(from_host,to_host);
				return true;
    a62e:	f04f 0001 	mov.w	r0, #1
    a632:	e1c9      	b.n	a9c8 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ec>
	to_host.append32(command::getRemainingCapacity());
}

inline void handleGetPosition(const InPacket& from_host, OutPacket& to_host) {
//	ATOMIC_BLOCK(ATOMIC_FORCEON) {
		const Point p = planner::getPosition();
    a634:	4668      	mov	r0, sp
    a636:	f002 feb7 	bl	d3a8 <planner::getPosition()>
		to_host.append8(RC_OK);
    a63a:	4630      	mov	r0, r6
    a63c:	f04f 0181 	mov.w	r1, #129	; 0x81
    a640:	f006 fc8a 	bl	10f58 <OutPacket::append8(unsigned char)>
		to_host.append32(p[0]);
    a644:	4668      	mov	r0, sp
    a646:	f04f 0100 	mov.w	r1, #0
    a64a:	f002 ff51 	bl	d4f0 <Point::operator[](unsigned int) const>
    a64e:	6801      	ldr	r1, [r0, #0]
    a650:	4630      	mov	r0, r6
    a652:	f006 fc91 	bl	10f78 <OutPacket::append32(unsigned long)>
		to_host.append32(p[1]);
    a656:	4668      	mov	r0, sp
    a658:	f04f 0101 	mov.w	r1, #1
    a65c:	f002 ff48 	bl	d4f0 <Point::operator[](unsigned int) const>
    a660:	6801      	ldr	r1, [r0, #0]
    a662:	4630      	mov	r0, r6
    a664:	f006 fc88 	bl	10f78 <OutPacket::append32(unsigned long)>
		to_host.append32(p[2]);
    a668:	4668      	mov	r0, sp
    a66a:	f04f 0102 	mov.w	r1, #2
    a66e:	f002 ff3f 	bl	d4f0 <Point::operator[](unsigned int) const>
    a672:	6801      	ldr	r1, [r0, #0]
    a674:	4630      	mov	r0, r6
    a676:	f006 fc7f 	bl	10f78 <OutPacket::append32(unsigned long)>
		// From spec:
		// endstop status bits: (7-0) : | N/A | N/A | z max | z min | y max | y min | x max | x min |
		Motherboard& board = Motherboard::getBoard();
		uint8_t endstop_status = steppers::getEndstopStatus();
    a67a:	f004 fedf 	bl	f43c <steppers::getEndstopStatus()>
    a67e:	4601      	mov	r1, r0
		to_host.append8(endstop_status);
    a680:	4630      	mov	r0, r6
    a682:	f006 fc69 	bl	10f58 <OutPacket::append8(unsigned char)>
			case HOST_CMD_GET_BUFFER_SIZE:
				handleGetBufferSize(from_host,to_host);
				return true;
			case HOST_CMD_GET_POSITION:
				handleGetPosition(from_host,to_host);
				return true;
    a686:	f04f 0001 	mov.w	r0, #1
    a68a:	e19d      	b.n	a9c8 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ec>
//	}
}

inline void handleGetPositionExt(const InPacket& from_host, OutPacket& to_host) {
//	ATOMIC_BLOCK(ATOMIC_FORCEON) {
		const Point p = planner::getPosition();
    a68c:	4668      	mov	r0, sp
    a68e:	f002 fe8b 	bl	d3a8 <planner::getPosition()>
		to_host.append8(RC_OK);
    a692:	4630      	mov	r0, r6
    a694:	f04f 0181 	mov.w	r1, #129	; 0x81
    a698:	f006 fc5e 	bl	10f58 <OutPacket::append8(unsigned char)>
		to_host.append32(p[0]);
    a69c:	4668      	mov	r0, sp
    a69e:	f04f 0100 	mov.w	r1, #0
    a6a2:	f002 ff25 	bl	d4f0 <Point::operator[](unsigned int) const>
    a6a6:	6801      	ldr	r1, [r0, #0]
    a6a8:	4630      	mov	r0, r6
    a6aa:	f006 fc65 	bl	10f78 <OutPacket::append32(unsigned long)>
		to_host.append32(p[1]);
    a6ae:	4668      	mov	r0, sp
    a6b0:	f04f 0101 	mov.w	r1, #1
    a6b4:	f002 ff1c 	bl	d4f0 <Point::operator[](unsigned int) const>
    a6b8:	6801      	ldr	r1, [r0, #0]
    a6ba:	4630      	mov	r0, r6
    a6bc:	f006 fc5c 	bl	10f78 <OutPacket::append32(unsigned long)>
		to_host.append32(p[2]);
    a6c0:	4668      	mov	r0, sp
    a6c2:	f04f 0102 	mov.w	r1, #2
    a6c6:	f002 ff13 	bl	d4f0 <Point::operator[](unsigned int) const>
    a6ca:	6801      	ldr	r1, [r0, #0]
    a6cc:	4630      	mov	r0, r6
    a6ce:	f006 fc53 	bl	10f78 <OutPacket::append32(unsigned long)>
#if STEPPER_COUNT > 3
		to_host.append32(p[3]);
    a6d2:	4668      	mov	r0, sp
    a6d4:	f04f 0103 	mov.w	r1, #3
    a6d8:	f002 ff0a 	bl	d4f0 <Point::operator[](unsigned int) const>
    a6dc:	6801      	ldr	r1, [r0, #0]
    a6de:	4630      	mov	r0, r6
    a6e0:	f006 fc4a 	bl	10f78 <OutPacket::append32(unsigned long)>
		to_host.append32(p[4]);
    a6e4:	4668      	mov	r0, sp
    a6e6:	f04f 0104 	mov.w	r1, #4
    a6ea:	f002 ff01 	bl	d4f0 <Point::operator[](unsigned int) const>
    a6ee:	6801      	ldr	r1, [r0, #0]
    a6f0:	4630      	mov	r0, r6
    a6f2:	f006 fc41 	bl	10f78 <OutPacket::append32(unsigned long)>
		to_host.append32(0);
#endif
		// From spec:
		// endstop status bits: (15-0) : | b max | b min | a max | a min | z max | z min | y max | y min | x max | x min |
		Motherboard& board = Motherboard::getBoard();
		uint8_t endstop_status = steppers::getEndstopStatus();
    a6f6:	f004 fea1 	bl	f43c <steppers::getEndstopStatus()>
    a6fa:	4601      	mov	r1, r0
		
		to_host.append16((uint16_t)endstop_status);
    a6fc:	4630      	mov	r0, r6
    a6fe:	f006 fc2f 	bl	10f60 <OutPacket::append16(unsigned short)>
			case HOST_CMD_GET_POSITION:
				handleGetPosition(from_host,to_host);
				return true;
			case HOST_CMD_GET_POSITION_EXT:
				handleGetPositionExt(from_host,to_host);
				return true;
    a702:	f04f 0001 	mov.w	r0, #1
    a706:	e15f      	b.n	a9c8 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ec>
}

    // capture to SD
inline void handleCaptureToFile(const InPacket& from_host, OutPacket& to_host) {
	char *p = (char*)from_host.getData() + 1;
	to_host.append8(RC_OK);
    a708:	4630      	mov	r0, r6
    a70a:	f04f 0181 	mov.w	r1, #129	; 0x81
    a70e:	f006 fc23 	bl	10f58 <OutPacket::append8(unsigned char)>
	to_host.append8(sdcard::startCapture(p));
    a712:	f104 0003 	add.w	r0, r4, #3
    a716:	f003 fcd1 	bl	e0bc <sdcard::startCapture(char*)>
    a71a:	4601      	mov	r1, r0
    a71c:	4630      	mov	r0, r6
    a71e:	f006 fc1b 	bl	10f58 <OutPacket::append8(unsigned char)>
			case HOST_CMD_GET_POSITION_EXT:
				handleGetPositionExt(from_host,to_host);
				return true;
			case HOST_CMD_CAPTURE_TO_FILE:
				handleCaptureToFile(from_host,to_host);
				return true;
    a722:	f04f 0001 	mov.w	r0, #1
    a726:	e14f      	b.n	a9c8 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ec>
	to_host.append8(RC_OK);
	to_host.append8(sdcard::startCapture(p));
}
    // stop capture to SD
inline void handleEndCapture(const InPacket& from_host, OutPacket& to_host) {
	to_host.append8(RC_OK);
    a728:	4630      	mov	r0, r6
    a72a:	f04f 0181 	mov.w	r1, #129	; 0x81
    a72e:	f006 fc13 	bl	10f58 <OutPacket::append8(unsigned char)>
	to_host.append32(sdcard::finishCapture());
    a732:	f003 fb91 	bl	de58 <sdcard::finishCapture()>
    a736:	4601      	mov	r1, r0
    a738:	4630      	mov	r0, r6
    a73a:	f006 fc1d 	bl	10f78 <OutPacket::append32(unsigned long)>
	sdcard::reset();
    a73e:	f003 fc0f 	bl	df60 <sdcard::reset()>
			case HOST_CMD_CAPTURE_TO_FILE:
				handleCaptureToFile(from_host,to_host);
				return true;
			case HOST_CMD_END_CAPTURE:
				handleEndCapture(from_host,to_host);
				return true;
    a742:	f04f 0001 	mov.w	r0, #1
    a746:	e13f      	b.n	a9c8 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ec>
	sdcard::reset();
}

    // playback from SD
inline void handlePlayback(const InPacket& from_host, OutPacket& to_host) {
	to_host.append8(RC_OK);
    a748:	4630      	mov	r0, r6
    a74a:	f04f 0181 	mov.w	r1, #129	; 0x81
    a74e:	f006 fc03 	bl	10f58 <OutPacket::append8(unsigned char)>
    a752:	7823      	ldrb	r3, [r4, #0]
	for (int idx = 1; idx < from_host.getLength(); idx++) {
    a754:	2b01      	cmp	r3, #1
    a756:	dd0e      	ble.n	a776 <host::processQueryPacket(InPacket const&, OutPacket&)+0x29a>
    a758:	f8df 8278 	ldr.w	r8, [pc, #632]	; a9d4 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4f8>
    a75c:	f04f 0501 	mov.w	r5, #1
		buildName[idx-1] = from_host.read8(idx);
    a760:	4638      	mov	r0, r7
    a762:	b2e9      	uxtb	r1, r5
    a764:	f006 fba0 	bl	10ea8 <Packet::read8(unsigned char) const>
    a768:	f808 0f01 	strb.w	r0, [r8, #1]!
}

    // playback from SD
inline void handlePlayback(const InPacket& from_host, OutPacket& to_host) {
	to_host.append8(RC_OK);
	for (int idx = 1; idx < from_host.getLength(); idx++) {
    a76c:	f105 0501 	add.w	r5, r5, #1
    a770:	7823      	ldrb	r3, [r4, #0]
    a772:	429d      	cmp	r5, r3
    a774:	dbf4      	blt.n	a760 <host::processQueryPacket(InPacket const&, OutPacket&)+0x284>
		buildName[idx-1] = from_host.read8(idx);
	}
	buildName[MAX_FILE_LEN-1] = '\0';
    a776:	f641 23e4 	movw	r3, #6884	; 0x1ae4
    a77a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a77e:	f04f 0200 	mov.w	r2, #0
    a782:	779a      	strb	r2, [r3, #30]

	uint8_t response = startBuildFromSD();
    a784:	f7ff fbae 	bl	9ee4 <host::startBuildFromSD()>
    a788:	4601      	mov	r1, r0
	to_host.append8(response);
    a78a:	4630      	mov	r0, r6
    a78c:	f006 fbe4 	bl	10f58 <OutPacket::append8(unsigned char)>
			case HOST_CMD_END_CAPTURE:
				handleEndCapture(from_host,to_host);
				return true;
			case HOST_CMD_PLAYBACK_CAPTURE:
				handlePlayback(from_host,to_host);
				return true;
    a790:	f04f 0001 	mov.w	r0, #1
    a794:	e118      	b.n	a9c8 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ec>
			case HOST_CMD_NEXT_FILENAME:
				handleNextFilename(from_host,to_host);
    a796:	4620      	mov	r0, r4
    a798:	4631      	mov	r1, r6
    a79a:	f7ff fb1f 	bl	9ddc <host::handleNextFilename(InPacket const&, OutPacket&)>
				return true;
    a79e:	f04f 0001 	mov.w	r0, #1
    a7a2:	e111      	b.n	a9c8 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ec>
}

    // pause command response
inline void handlePause(const InPacket& from_host, OutPacket& to_host) {
	/// this command also calls the host::pauseBuild() command
	pauseBuild(!command::isPaused());
    a7a4:	f7fd fb40 	bl	7e28 <command::isPaused()>
    a7a8:	f080 0001 	eor.w	r0, r0, #1
    a7ac:	b2c0      	uxtb	r0, r0
    a7ae:	f7ff fbc5 	bl	9f3c <host::pauseBuild(bool)>
	to_host.append8(RC_OK);
    a7b2:	4630      	mov	r0, r6
    a7b4:	f04f 0181 	mov.w	r1, #129	; 0x81
    a7b8:	f006 fbce 	bl	10f58 <OutPacket::append8(unsigned char)>
			case HOST_CMD_NEXT_FILENAME:
				handleNextFilename(from_host,to_host);
				return true;
			case HOST_CMD_PAUSE:
				handlePause(from_host,to_host);
				return true;
    a7bc:	f04f 0001 	mov.w	r0, #1
    a7c0:	e102      	b.n	a9c8 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ec>
			case HOST_CMD_TOOL_QUERY:
				if(processExtruderQueryPacket(from_host,to_host)){
    a7c2:	4620      	mov	r0, r4
    a7c4:	4631      	mov	r1, r6
    a7c6:	f7ff fd3d 	bl	a244 <host::processExtruderQueryPacket(InPacket const&, OutPacket&)>
    a7ca:	e0fd      	b.n	a9c8 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ec>
	to_host.append8(RC_OK);
}

    // check if steppers are still executing a command
inline void handleIsFinished(const InPacket& from_host, OutPacket& to_host) {
	to_host.append8(RC_OK);
    a7cc:	4630      	mov	r0, r6
    a7ce:	f04f 0181 	mov.w	r1, #129	; 0x81
    a7d2:	f006 fbc1 	bl	10f58 <OutPacket::append8(unsigned char)>
//	ATOMIC_BLOCK(ATOMIC_FORCEON) {
		bool done = !steppers::isRunning() && command::isEmpty();
    a7d6:	f003 feab 	bl	e530 <steppers::isRunning()>
    a7da:	f04f 0100 	mov.w	r1, #0
    a7de:	b920      	cbnz	r0, a7ea <host::processQueryPacket(InPacket const&, OutPacket&)+0x30e>
    a7e0:	f7fd fb28 	bl	7e34 <command::isEmpty()>
    a7e4:	1c01      	adds	r1, r0, #0
    a7e6:	bf18      	it	ne
    a7e8:	2101      	movne	r1, #1
		to_host.append8(done?1:0);
    a7ea:	4630      	mov	r0, r6
    a7ec:	f006 fbb4 	bl	10f58 <OutPacket::append8(unsigned char)>
				if(processExtruderQueryPacket(from_host,to_host)){
					return true;}
				break;
			case HOST_CMD_IS_FINISHED:
				handleIsFinished(from_host,to_host);
				return true;
    a7f0:	f04f 0001 	mov.w	r0, #1
    a7f4:	e0e8      	b.n	a9c8 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ec>
			case HOST_CMD_READ_EEPROM:
				handleReadEeprom(from_host,to_host);
    a7f6:	4620      	mov	r0, r4
    a7f8:	4631      	mov	r1, r6
    a7fa:	f7ff fb39 	bl	9e70 <host::handleReadEeprom(InPacket const&, OutPacket&)>
				return true;
    a7fe:	f04f 0001 	mov.w	r0, #1
    a802:	e0e1      	b.n	a9c8 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ec>

/**
 * writes a chunk of data from a input packet to eeprom
 */
inline void handleWriteEeprom(const InPacket& from_host, OutPacket& to_host) {
	xprintf("handleWriteEeprom" " (%s:%d)\n",_F_,_L_);
    a804:	f246 5054 	movw	r0, #25940	; 0x6554
    a808:	f2c0 0002 	movt	r0, #2
    a80c:	4970      	ldr	r1, [pc, #448]	; (a9d0 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4f4>)
    a80e:	f44f 72db 	mov.w	r2, #438	; 0x1b6
    a812:	f7fb fe5f 	bl	64d4 <xprintf>
    uint16_t offset = from_host.read16(1);
    a816:	4620      	mov	r0, r4
    a818:	f04f 0101 	mov.w	r1, #1
    a81c:	f006 fb48 	bl	10eb0 <Packet::read16(unsigned char) const>
    a820:	4682      	mov	sl, r0
    uint8_t length = from_host.read8(3);
    a822:	4620      	mov	r0, r4
    a824:	f04f 0103 	mov.w	r1, #3
    a828:	f006 fb3e 	bl	10ea8 <Packet::read8(unsigned char) const>
//	xprintf("%x" " (%s:%d)\n",offset,_F_,_L_);
//	xprintf("%x" " (%s:%d)\n",length,_F_,_L_);
//    uint8_t data[length];
//    eeprom_read_block(data, (const void*) offset, length);
    for (int i = 0; i < length; i++) {
    a82c:	f1b0 0b00 	subs.w	fp, r0, #0
    a830:	dd27      	ble.n	a882 <host::processQueryPacket(InPacket const&, OutPacket&)+0x3a6>
	to_host.append8(RC_OK);
	to_host.append8(board.GetErrorStatus());
}

// query packets (non action, not queued)
bool processQueryPacket(const InPacket& from_host, OutPacket& to_host) {
    a832:	f10a 6580 	add.w	r5, sl, #67108864	; 0x4000000
    a836:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
    a83a:	ea4f 0585 	mov.w	r5, r5, lsl #2
    uint8_t length = from_host.read8(3);
//	xprintf("%x" " (%s:%d)\n",offset,_F_,_L_);
//	xprintf("%x" " (%s:%d)\n",length,_F_,_L_);
//    uint8_t data[length];
//    eeprom_read_block(data, (const void*) offset, length);
    for (int i = 0; i < length; i++) {
    a83e:	4654      	mov	r4, sl
	to_host.append8(RC_OK);
	to_host.append8(board.GetErrorStatus());
}

// query packets (non action, not queued)
bool processQueryPacket(const InPacket& from_host, OutPacket& to_host) {
    a840:	44da      	add	sl, fp
    a842:	f04f 0804 	mov.w	r8, #4
//	xprintf("%x" " (%s:%d)\n",length,_F_,_L_);
//    uint8_t data[length];
//    eeprom_read_block(data, (const void*) offset, length);
    for (int i = 0; i < length; i++) {
    	eeprom::setEeprom8(offset + i, from_host.read8(i + 4));
		xprintf("%x %x %c" "\n",EEPROM_START_ADDRESS + offset + i,eeprom_address(EEPROM_START_ADDRESS, offset + i),eeprom_address(EEPROM_START_ADDRESS, offset + i));
    a846:	f246 5994 	movw	r9, #26004	; 0x6594
    a84a:	f2c0 0902 	movt	r9, #2
//	xprintf("%x" " (%s:%d)\n",offset,_F_,_L_);
//	xprintf("%x" " (%s:%d)\n",length,_F_,_L_);
//    uint8_t data[length];
//    eeprom_read_block(data, (const void*) offset, length);
    for (int i = 0; i < length; i++) {
    	eeprom::setEeprom8(offset + i, from_host.read8(i + 4));
    a84e:	4638      	mov	r0, r7
    a850:	4641      	mov	r1, r8
    a852:	f006 fb29 	bl	10ea8 <Packet::read8(unsigned char) const>
    a856:	4601      	mov	r1, r0
    a858:	b2a0      	uxth	r0, r4
    a85a:	f005 fddd 	bl	10418 <eeprom::setEeprom8(unsigned short, unsigned char)>
		xprintf("%x %x %c" "\n",EEPROM_START_ADDRESS + offset + i,eeprom_address(EEPROM_START_ADDRESS, offset + i),eeprom_address(EEPROM_START_ADDRESS, offset + i));
    a85e:	682a      	ldr	r2, [r5, #0]
    a860:	f855 3b04 	ldr.w	r3, [r5], #4
	to_host.append8(RC_OK);
	to_host.append8(board.GetErrorStatus());
}

// query packets (non action, not queued)
bool processQueryPacket(const InPacket& from_host, OutPacket& to_host) {
    a864:	f104 5180 	add.w	r1, r4, #268435456	; 0x10000000
//	xprintf("%x" " (%s:%d)\n",length,_F_,_L_);
//    uint8_t data[length];
//    eeprom_read_block(data, (const void*) offset, length);
    for (int i = 0; i < length; i++) {
    	eeprom::setEeprom8(offset + i, from_host.read8(i + 4));
		xprintf("%x %x %c" "\n",EEPROM_START_ADDRESS + offset + i,eeprom_address(EEPROM_START_ADDRESS, offset + i),eeprom_address(EEPROM_START_ADDRESS, offset + i));
    a868:	4648      	mov	r0, r9
    a86a:	f501 41e0 	add.w	r1, r1, #28672	; 0x7000
    a86e:	f7fb fe31 	bl	64d4 <xprintf>
    a872:	f108 0801 	add.w	r8, r8, #1
    a876:	fa5f f888 	uxtb.w	r8, r8
    a87a:	f104 0401 	add.w	r4, r4, #1
    uint8_t length = from_host.read8(3);
//	xprintf("%x" " (%s:%d)\n",offset,_F_,_L_);
//	xprintf("%x" " (%s:%d)\n",length,_F_,_L_);
//    uint8_t data[length];
//    eeprom_read_block(data, (const void*) offset, length);
    for (int i = 0; i < length; i++) {
    a87e:	4554      	cmp	r4, sl
    a880:	d1e5      	bne.n	a84e <host::processQueryPacket(InPacket const&, OutPacket&)+0x372>
    }
//    ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
//    	eeprom::save_to_flash();
//		eeprom_write_block(data, (void*) offset, length);
//	}
    to_host.append8(RC_OK);
    a882:	4630      	mov	r0, r6
    a884:	f04f 0181 	mov.w	r1, #129	; 0x81
    a888:	f006 fb66 	bl	10f58 <OutPacket::append8(unsigned char)>
    to_host.append8(length);
    a88c:	4630      	mov	r0, r6
    a88e:	4659      	mov	r1, fp
    a890:	f006 fb62 	bl	10f58 <OutPacket::append8(unsigned char)>
			case HOST_CMD_READ_EEPROM:
				handleReadEeprom(from_host,to_host);
				return true;
			case HOST_CMD_WRITE_EEPROM:
				handleWriteEeprom(from_host,to_host);
				return true;
    a894:	f04f 0001 	mov.w	r0, #1
    a898:	e096      	b.n	a9c8 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ec>
	ES_COMMANDS = 1  // clean queue
};

    // stop steppers and command execution
inline void handleExtendedStop(const InPacket& from_host, OutPacket& to_host) {
	uint8_t flags = from_host.read8(1);
    a89a:	4620      	mov	r0, r4
    a89c:	f04f 0101 	mov.w	r1, #1
    a8a0:	f006 fb02 	bl	10ea8 <Packet::read8(unsigned char) const>
    a8a4:	4604      	mov	r4, r0
	if (flags & _BV(ES_STEPPERS)) {
    a8a6:	f010 0f01 	tst.w	r0, #1
    a8aa:	d001      	beq.n	a8b0 <host::processQueryPacket(InPacket const&, OutPacket&)+0x3d4>
		planner::abort();
    a8ac:	f002 fbac 	bl	d008 <planner::abort()>
	}
	if (flags & _BV(ES_COMMANDS)) {
    a8b0:	f014 0f02 	tst.w	r4, #2
    a8b4:	d001      	beq.n	a8ba <host::processQueryPacket(InPacket const&, OutPacket&)+0x3de>
		command::reset();
    a8b6:	f7fd fce3 	bl	8280 <command::reset()>
	}

	to_host.append8(RC_OK);
    a8ba:	4630      	mov	r0, r6
    a8bc:	f04f 0181 	mov.w	r1, #129	; 0x81
    a8c0:	f006 fb4a 	bl	10f58 <OutPacket::append8(unsigned char)>
	to_host.append8(0);
    a8c4:	4630      	mov	r0, r6
    a8c6:	f04f 0100 	mov.w	r1, #0
    a8ca:	f006 fb45 	bl	10f58 <OutPacket::append8(unsigned char)>
			case HOST_CMD_WRITE_EEPROM:
				handleWriteEeprom(from_host,to_host);
				return true;
			case HOST_CMD_EXTENDED_STOP:
				handleExtendedStop(from_host,to_host);
				return true;
    a8ce:	f04f 0001 	mov.w	r0, #1
    a8d2:	e079      	b.n	a9c8 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ec>
        to_host.append32(0);// open spot for filament detect info
}
/// get current print stats if printing, or last print stats if not printing
inline void handleGetBoardStatus(OutPacket& to_host) {
	Motherboard& board = Motherboard::getBoard();
	to_host.append8(RC_OK);
    a8d4:	4630      	mov	r0, r6
    a8d6:	f04f 0181 	mov.w	r1, #129	; 0x81
    a8da:	f006 fb3d 	bl	10f58 <OutPacket::append8(unsigned char)>
	to_host.append8(board.GetErrorStatus());
    a8de:	f641 309c 	movw	r0, #7068	; 0x1b9c
    a8e2:	f2c1 0000 	movt	r0, #4096	; 0x1000
    a8e6:	f000 fd6b 	bl	b3c0 <Motherboard::GetErrorStatus()>
    a8ea:	4601      	mov	r1, r0
    a8ec:	4630      	mov	r0, r6
    a8ee:	f006 fb33 	bl	10f58 <OutPacket::append8(unsigned char)>
			case HOST_CMD_EXTENDED_STOP:
				handleExtendedStop(from_host,to_host);
				return true;
			case HOST_CMD_BOARD_STATUS:
				handleGetBoardStatus(to_host);
				return true;
    a8f2:	f04f 0001 	mov.w	r0, #1
    a8f6:	e067      	b.n	a9c8 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ec>
	currentState = HOST_STATE_READY;
}

/// get current print stats if printing, or last print stats if not printing
inline void handleGetBuildStats(OutPacket& to_host) {
        to_host.append8(RC_OK);
    a8f8:	4630      	mov	r0, r6
    a8fa:	f04f 0181 	mov.w	r1, #129	; 0x81
    a8fe:	f006 fb2b 	bl	10f58 <OutPacket::append8(unsigned char)>
 
		uint8_t hours;
		uint8_t minutes;
		
		getPrintTime(hours, minutes);
    a902:	f10d 0016 	add.w	r0, sp, #22
    a906:	f10d 0117 	add.w	r1, sp, #23
    a90a:	f7ff fc0f 	bl	a12c <host::getPrintTime(unsigned char&, unsigned char&)>
		
        to_host.append8(buildState);
    a90e:	f641 24e0 	movw	r4, #6880	; 0x1ae0
    a912:	f2c1 0400 	movt	r4, #4096	; 0x1000
    a916:	4630      	mov	r0, r6
    a918:	7821      	ldrb	r1, [r4, #0]
    a91a:	f006 fb1d 	bl	10f58 <OutPacket::append8(unsigned char)>
        to_host.append8(hours);
    a91e:	4630      	mov	r0, r6
    a920:	f89d 1016 	ldrb.w	r1, [sp, #22]
    a924:	f006 fb18 	bl	10f58 <OutPacket::append8(unsigned char)>
        to_host.append8(minutes);
    a928:	4630      	mov	r0, r6
    a92a:	f89d 1017 	ldrb.w	r1, [sp, #23]
    a92e:	f006 fb13 	bl	10f58 <OutPacket::append8(unsigned char)>
        if((buildState == BUILD_RUNNING) || (buildState == BUILD_PAUSED)){
    a932:	7823      	ldrb	r3, [r4, #0]
    a934:	2b03      	cmp	r3, #3
    a936:	bf14      	ite	ne
    a938:	2200      	movne	r2, #0
    a93a:	2201      	moveq	r2, #1
    a93c:	2b01      	cmp	r3, #1
    a93e:	bf14      	ite	ne
    a940:	4613      	movne	r3, r2
    a942:	f042 0301 	orreq.w	r3, r2, #1
    a946:	b133      	cbz	r3, a956 <host::processQueryPacket(InPacket const&, OutPacket&)+0x47a>
			to_host.append32(command::getLineNumber());
    a948:	f7fd fcc4 	bl	82d4 <command::getLineNumber()>
    a94c:	4601      	mov	r1, r0
    a94e:	4630      	mov	r0, r6
    a950:	f006 fb12 	bl	10f78 <OutPacket::append32(unsigned long)>
    a954:	e007      	b.n	a966 <host::processQueryPacket(InPacket const&, OutPacket&)+0x48a>
		} else {
			to_host.append32(last_print_line);
    a956:	f641 236c 	movw	r3, #6764	; 0x1a6c
    a95a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a95e:	4630      	mov	r0, r6
    a960:	6819      	ldr	r1, [r3, #0]
    a962:	f006 fb09 	bl	10f78 <OutPacket::append32(unsigned long)>
		}
        to_host.append32(0);// open spot for filament detect info
    a966:	4630      	mov	r0, r6
    a968:	f04f 0100 	mov.w	r1, #0
    a96c:	f006 fb04 	bl	10f78 <OutPacket::append32(unsigned long)>
			case HOST_CMD_BOARD_STATUS:
				handleGetBoardStatus(to_host);
				return true;
			case HOST_CMD_GET_BUILD_STATS:
				handleGetBuildStats(to_host);
				return true;
    a970:	f04f 0001 	mov.w	r0, #1
    a974:	e028      	b.n	a9c8 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ec>
// Received driver version info, and request for fw version info.
// puts fw version into a reply packet, and send it back
inline void handleGetAdvancedVersion(const InPacket& from_host, OutPacket& to_host) {

	// we're not doing anything with the host version at the moment
	uint16_t host_version = from_host.read16(1);
    a976:	4620      	mov	r0, r4
    a978:	f04f 0101 	mov.w	r1, #1
    a97c:	f006 fa98 	bl	10eb0 <Packet::read16(unsigned char) const>
	
	to_host.append8(RC_OK);
    a980:	4630      	mov	r0, r6
    a982:	f04f 0181 	mov.w	r1, #129	; 0x81
    a986:	f006 fae7 	bl	10f58 <OutPacket::append8(unsigned char)>
	to_host.append16(firmware_version);
    a98a:	4630      	mov	r0, r6
    a98c:	f240 212b 	movw	r1, #555	; 0x22b
    a990:	f006 fae6 	bl	10f60 <OutPacket::append16(unsigned short)>
	to_host.append16(internal_version);
    a994:	4630      	mov	r0, r6
    a996:	f04f 0100 	mov.w	r1, #0
    a99a:	f006 fae1 	bl	10f60 <OutPacket::append16(unsigned short)>
	to_host.append16(0);
    a99e:	4630      	mov	r0, r6
    a9a0:	f04f 0100 	mov.w	r1, #0
    a9a4:	f006 fadc 	bl	10f60 <OutPacket::append16(unsigned short)>
	to_host.append16(0);
    a9a8:	4630      	mov	r0, r6
    a9aa:	f04f 0100 	mov.w	r1, #0
    a9ae:	f006 fad7 	bl	10f60 <OutPacket::append16(unsigned short)>
			case HOST_CMD_GET_BUILD_STATS:
				handleGetBuildStats(to_host);
				return true;
			case HOST_CMD_ADVANCED_VERSION:
				handleGetAdvancedVersion(from_host, to_host);
				return true;
    a9b2:	f04f 0001 	mov.w	r0, #1
    a9b6:	e007      	b.n	a9c8 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ec>
			}
		}
	}
	return false;
    a9b8:	f04f 0000 	mov.w	r0, #0
    a9bc:	e004      	b.n	a9c8 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ec>
    a9be:	f04f 0000 	mov.w	r0, #0
    a9c2:	e001      	b.n	a9c8 <host::processQueryPacket(InPacket const&, OutPacket&)+0x4ec>
			case HOST_CMD_VERSION:
				handleVersion(from_host,to_host);
				return true;
			case HOST_CMD_GET_BUILD_NAME:
				handleGetBuildName(from_host,to_host);
				return true;
    a9c4:	f04f 0001 	mov.w	r0, #1
				return true;
			}
		}
	}
	return false;
}
    a9c8:	b007      	add	sp, #28
    a9ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a9ce:	bf00      	nop
    a9d0:	0002658c 	.word	0x0002658c
    a9d4:	10001ae3 	.word	0x10001ae3

0000a9d8 <host::runHostSlice()>:

bool do_host_reset = false;
bool hard_reset = false;
bool cancelBuild = false;

void runHostSlice() {
    a9d8:	b530      	push	{r4, r5, lr}
    a9da:	b085      	sub	sp, #20
#endif

public:
    /// Get a reference to the host UART
    /// \return hostUART instance, which should act as a slave to a computer (or motherboard)
    static UART& getHostUART() {static UART hostUART(0,RS232); return hostUART; }
    a9dc:	f641 2314 	movw	r3, #6676	; 0x1a14
    a9e0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    a9e4:	681b      	ldr	r3, [r3, #0]
    a9e6:	f013 0f01 	tst.w	r3, #1
    a9ea:	d133      	bne.n	aa54 <host::runHostSlice()+0x7c>
    a9ec:	f641 2014 	movw	r0, #6676	; 0x1a14
    a9f0:	f2c1 0000 	movt	r0, #4096	; 0x1000
    a9f4:	f009 f864 	bl	13ac0 <__cxa_guard_acquire>
    a9f8:	b170      	cbz	r0, aa18 <host::runHostSlice()+0x40>
    a9fa:	f641 2018 	movw	r0, #6680	; 0x1a18
    a9fe:	f2c1 0000 	movt	r0, #4096	; 0x1000
    aa02:	f04f 0100 	mov.w	r1, #0
    aa06:	460a      	mov	r2, r1
    aa08:	f007 f80e 	bl	11a28 <UART::UART(unsigned char, communication_mode)>
    aa0c:	f641 2014 	movw	r0, #6676	; 0x1a14
    aa10:	f2c1 0000 	movt	r0, #4096	; 0x1000
    aa14:	f009 f872 	bl	13afc <__cxa_guard_release>
    aa18:	f641 2314 	movw	r3, #6676	; 0x1a14
    aa1c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    aa20:	681b      	ldr	r3, [r3, #0]
    aa22:	f013 0f01 	tst.w	r3, #1
    aa26:	d115      	bne.n	aa54 <host::runHostSlice()+0x7c>
    aa28:	f641 2014 	movw	r0, #6676	; 0x1a14
    aa2c:	f2c1 0000 	movt	r0, #4096	; 0x1000
    aa30:	f009 f846 	bl	13ac0 <__cxa_guard_acquire>
    aa34:	b170      	cbz	r0, aa54 <host::runHostSlice()+0x7c>
    aa36:	f641 2018 	movw	r0, #6680	; 0x1a18
    aa3a:	f2c1 0000 	movt	r0, #4096	; 0x1000
    aa3e:	f04f 0100 	mov.w	r1, #0
    aa42:	460a      	mov	r2, r1
    aa44:	f006 fff0 	bl	11a28 <UART::UART(unsigned char, communication_mode)>
    aa48:	f641 2014 	movw	r0, #6676	; 0x1a14
    aa4c:	f2c1 0000 	movt	r0, #4096	; 0x1000
    aa50:	f009 f854 	bl	13afc <__cxa_guard_release>
	bool isFinished() const {
		return state == PS_LAST;
	}

	bool isSending() const {
		return state != PS_START && state != PS_LAST;
    aa54:	f641 2318 	movw	r3, #6680	; 0x1a18
    aa58:	f2c1 0300 	movt	r3, #4096	; 0x1000
    aa5c:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
    aa60:	2b00      	cmp	r3, #0
    aa62:	f000 8156 	beq.w	ad12 <host::runHostSlice()+0x33a>
    aa66:	f641 2318 	movw	r3, #6680	; 0x1a18
    aa6a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    aa6e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
    aa72:	2b04      	cmp	r3, #4
    aa74:	f040 815f 	bne.w	ad36 <host::runHostSlice()+0x35e>
    aa78:	e14b      	b.n	ad12 <host::runHostSlice()+0x33a>
	if (out.isSending()) {
		// still sending; wait until send is complete before reading new host packets.
		return;
	}
    // soft reset the machine unless waiting to notify repG that a cancel has occured
	if (do_host_reset && (!cancelBuild || cancel_timeout.hasElapsed())){
    aa7a:	f641 2394 	movw	r3, #6804	; 0x1a94
    aa7e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    aa82:	781b      	ldrb	r3, [r3, #0]
    aa84:	b143      	cbz	r3, aa98 <host::runHostSlice()+0xc0>
    aa86:	f641 20c4 	movw	r0, #6852	; 0x1ac4
    aa8a:	f2c1 0000 	movt	r0, #4096	; 0x1000
    aa8e:	f006 fed9 	bl	11844 <Timeout::hasElapsed()>
    aa92:	2800      	cmp	r0, #0
    aa94:	f000 8145 	beq.w	ad22 <host::runHostSlice()+0x34a>


		
		if((buildState == BUILD_RUNNING) || (buildState == BUILD_PAUSED)){
    aa98:	f641 23e0 	movw	r3, #6880	; 0x1ae0
    aa9c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    aaa0:	781b      	ldrb	r3, [r3, #0]
    aaa2:	2b03      	cmp	r3, #3
    aaa4:	bf14      	ite	ne
    aaa6:	2200      	movne	r2, #0
    aaa8:	2201      	moveq	r2, #1
    aaaa:	2b01      	cmp	r3, #1
    aaac:	bf14      	ite	ne
    aaae:	4613      	movne	r3, r2
    aab0:	f042 0301 	orreq.w	r3, r2, #1
    aab4:	b10b      	cbz	r3, aaba <host::runHostSlice()+0xe2>
			stopBuild();
    aab6:	f7ff fb73 	bl	a1a0 <host::stopBuild()>
		}
		do_host_reset = false;
    aaba:	f641 2380 	movw	r3, #6784	; 0x1a80
    aabe:	f2c1 0300 	movt	r3, #4096	; 0x1000
    aac2:	f04f 0400 	mov.w	r4, #0
    aac6:	701c      	strb	r4, [r3, #0]

		// reset local board
		reset(hard_reset);
    aac8:	f641 25d4 	movw	r5, #6868	; 0x1ad4
    aacc:	f2c1 0500 	movt	r5, #4096	; 0x1000
    aad0:	7828      	ldrb	r0, [r5, #0]
    aad2:	f000 f9b5 	bl	ae40 <reset(bool)>
		
        // hard_reset can be called, but is not called by any
        // a hard reset calls the start up sound and resets heater errors
		hard_reset = false;
    aad6:	702c      	strb	r4, [r5, #0]
		packet_in_timeout.abort();
    aad8:	f641 20b0 	movw	r0, #6832	; 0x1ab0
    aadc:	f2c1 0000 	movt	r0, #4096	; 0x1000
    aae0:	f006 feca 	bl	11878 <Timeout::abort()>

		// Clear the machine and build names
		machineName[0] = 0;
    aae4:	f641 2384 	movw	r3, #6788	; 0x1a84
    aae8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    aaec:	701c      	strb	r4, [r3, #0]
		buildName[0] = 0;
    aaee:	f641 23e4 	movw	r3, #6884	; 0x1ae4
    aaf2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    aaf6:	701c      	strb	r4, [r3, #0]
		currentState = HOST_STATE_READY;
    aaf8:	f641 2368 	movw	r3, #6760	; 0x1a68
    aafc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ab00:	701c      	strb	r4, [r3, #0]
			
		return;
    ab02:	e118      	b.n	ad36 <host::runHostSlice()+0x35e>

	//process a byte for our packet.
	void processByte(uint8_t b);

	bool isFinished() const {
		return state == PS_LAST;
    ab04:	f641 2318 	movw	r3, #6680	; 0x1a18
    ab08:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ab0c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	}
    // new packet coming in
	if (in.isStarted() && !in.isFinished()) {
    ab10:	2b04      	cmp	r3, #4
    ab12:	d028      	beq.n	ab66 <host::runHostSlice()+0x18e>
		xprintf("in.isStarted() && !in.isFinished()" " (%s:%d)\n",_F_,_L_);
    ab14:	f246 50a0 	movw	r0, #26016	; 0x65a0
    ab18:	f2c0 0002 	movt	r0, #2
    ab1c:	4987      	ldr	r1, [pc, #540]	; (ad3c <host::runHostSlice()+0x364>)
    ab1e:	f04f 0285 	mov.w	r2, #133	; 0x85
    ab22:	f7fb fcd7 	bl	64d4 <xprintf>
        /// \return True if the timeout has elapsed.
	bool hasElapsed();

        ///
        /// \return True if the timeout is still running.
	bool isActive() const { return active; }
    ab26:	f641 23b0 	movw	r3, #6832	; 0x1ab0
    ab2a:	f2c1 0300 	movt	r3, #4096	; 0x1000
		if (!packet_in_timeout.isActive()) {
    ab2e:	781b      	ldrb	r3, [r3, #0]
    ab30:	b953      	cbnz	r3, ab48 <host::runHostSlice()+0x170>
			// initiate timeout
			packet_in_timeout.start(HOST_PACKET_TIMEOUT_MICROS);
    ab32:	f641 20b0 	movw	r0, #6832	; 0x1ab0
    ab36:	f2c1 0000 	movt	r0, #4096	; 0x1000
    ab3a:	f44f 6154 	mov.w	r1, #3392	; 0xd40
    ab3e:	f2c0 0103 	movt	r1, #3
    ab42:	f006 fe6b 	bl	1181c <Timeout::start(unsigned long)>
    ab46:	e00e      	b.n	ab66 <host::runHostSlice()+0x18e>
		} else if (packet_in_timeout.hasElapsed()) {
    ab48:	f641 20b0 	movw	r0, #6832	; 0x1ab0
    ab4c:	f2c1 0000 	movt	r0, #4096	; 0x1000
    ab50:	f006 fe78 	bl	11844 <Timeout::hasElapsed()>
    ab54:	b138      	cbz	r0, ab66 <host::runHostSlice()+0x18e>
	void appendByte(uint8_t data);
	/// Reset this packet to an empty state
	void reset();

	void error(uint8_t error_code_in) {
		reset();
    ab56:	4c7a      	ldr	r4, [pc, #488]	; (ad40 <host::runHostSlice()+0x368>)
    ab58:	4620      	mov	r0, r4
    ab5a:	f006 f943 	bl	10de4 <Packet::reset()>
		error_code = error_code_in;
    ab5e:	f04f 0304 	mov.w	r3, #4
    ab62:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	}
public:
	uint8_t getLength() const { return length; }

	bool hasError() const {
		return error_code != PacketError::NO_ERROR;
    ab66:	f641 2318 	movw	r3, #6680	; 0x1a18
    ab6a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ab6e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
			in.timeout();
		}

	}
	if (in.hasError()) {
    ab72:	b113      	cbz	r3, ab7a <host::runHostSlice()+0x1a2>
			default:
				out.append8(RC_PACKET_ERROR);
				break;
		}
		*/  	
		in.reset();
    ab74:	4872      	ldr	r0, [pc, #456]	; (ad40 <host::runHostSlice()+0x368>)
    ab76:	f006 f93f 	bl	10df8 <InPacket::reset()>

	//process a byte for our packet.
	void processByte(uint8_t b);

	bool isFinished() const {
		return state == PS_LAST;
    ab7a:	f641 2318 	movw	r3, #6680	; 0x1a18
    ab7e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ab82:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
		//UART::getHostUART().beginSend();
		//Motherboard::getBoard().indicateError(ERR_HOST_PACKET_MISC);
		
	}
	if (in.isFinished()) {
    ab86:	2b04      	cmp	r3, #4
    ab88:	f040 809d 	bne.w	acc6 <host::runHostSlice()+0x2ee>
//		xprintf("in.isFinished()" " (%s:%d)\n",_F_,_L_);
		DEBUG_PIN1.setValue(false);
    ab8c:	a803      	add	r0, sp, #12
    ab8e:	f04f 01ff 	mov.w	r1, #255	; 0xff
    ab92:	f006 f891 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
    ab96:	a801      	add	r0, sp, #4
    ab98:	a903      	add	r1, sp, #12
    ab9a:	f04f 02ff 	mov.w	r2, #255	; 0xff
    ab9e:	f006 fa9d 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    aba2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    aba6:	b94b      	cbnz	r3, abbc <host::runHostSlice()+0x1e4>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    aba8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    abac:	f89d 0004 	ldrb.w	r0, [sp, #4]
    abb0:	f04f 0101 	mov.w	r1, #1
    abb4:	fa01 f103 	lsl.w	r1, r1, r3
    abb8:	f7f8 fc9c 	bl	34f4 <GPIO_ClearValue>
		packet_in_timeout.abort();
    abbc:	f641 20b0 	movw	r0, #6832	; 0x1ab0
    abc0:	f2c1 0000 	movt	r0, #4096	; 0x1000
    abc4:	f006 fe58 	bl	11878 <Timeout::abort()>
		out.reset();
    abc8:	485e      	ldr	r0, [pc, #376]	; (ad44 <host::runHostSlice()+0x36c>)
    abca:	f006 f97b 	bl	10ec4 <OutPacket::reset()>
	  // do not respond to commands if the bot has had a heater failure
		if(currentState == HOST_STATE_HEAT_SHUTDOWN){
    abce:	f641 2368 	movw	r3, #6760	; 0x1a68
    abd2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    abd6:	781b      	ldrb	r3, [r3, #0]
    abd8:	2b06      	cmp	r3, #6
    abda:	d118      	bne.n	ac0e <host::runHostSlice()+0x236>
			if(cancelBuild){
    abdc:	f641 2394 	movw	r3, #6804	; 0x1a94
    abe0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    abe4:	781b      	ldrb	r3, [r3, #0]
    abe6:	b163      	cbz	r3, ac02 <host::runHostSlice()+0x22a>
				out.append8(RC_CANCEL_BUILD);
    abe8:	4856      	ldr	r0, [pc, #344]	; (ad44 <host::runHostSlice()+0x36c>)
    abea:	f04f 0189 	mov.w	r1, #137	; 0x89
    abee:	f006 f9b3 	bl	10f58 <OutPacket::append8(unsigned char)>
				cancelBuild= false;
    abf2:	f641 2394 	movw	r3, #6804	; 0x1a94
    abf6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    abfa:	f04f 0200 	mov.w	r2, #0
    abfe:	701a      	strb	r2, [r3, #0]
    ac00:	e03a      	b.n	ac78 <host::runHostSlice()+0x2a0>
			}else{
				out.append8(RC_BOT_OVERHEAT);
    ac02:	4850      	ldr	r0, [pc, #320]	; (ad44 <host::runHostSlice()+0x36c>)
    ac04:	f04f 018b 	mov.w	r1, #139	; 0x8b
    ac08:	f006 f9a6 	bl	10f58 <OutPacket::append8(unsigned char)>
    ac0c:	e034      	b.n	ac78 <host::runHostSlice()+0x2a0>
			}
		}else if(cancelBuild){
    ac0e:	f641 2394 	movw	r3, #6804	; 0x1a94
    ac12:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ac16:	781b      	ldrb	r3, [r3, #0]
    ac18:	b1a3      	cbz	r3, ac44 <host::runHostSlice()+0x26c>
			out.append8(RC_CANCEL_BUILD);
    ac1a:	484a      	ldr	r0, [pc, #296]	; (ad44 <host::runHostSlice()+0x36c>)
    ac1c:	f04f 0189 	mov.w	r1, #137	; 0x89
    ac20:	f006 f99a 	bl	10f58 <OutPacket::append8(unsigned char)>
			cancelBuild = false;
    ac24:	f641 2394 	movw	r3, #6804	; 0x1a94
    ac28:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ac2c:	f04f 0200 	mov.w	r2, #0
    ac30:	701a      	strb	r2, [r3, #0]
			Motherboard::getBoard().indicateError(6);
    ac32:	f641 309c 	movw	r0, #7068	; 0x1b9c
    ac36:	f2c1 0000 	movt	r0, #4096	; 0x1000
    ac3a:	f04f 0106 	mov.w	r1, #6
    ac3e:	f000 fc1b 	bl	b478 <Motherboard::indicateError(int)>
    ac42:	e019      	b.n	ac78 <host::runHostSlice()+0x2a0>
		} else
#if defined(HONOR_DEBUG_PACKETS) && (HONOR_DEBUG_PACKETS == 1)
		if (processDebugPacket(in, out)) {
    ac44:	493e      	ldr	r1, [pc, #248]	; (ad40 <host::runHostSlice()+0x368>)
    ac46:	4608      	mov	r0, r1
    ac48:	f101 0125 	add.w	r1, r1, #37	; 0x25
    ac4c:	f7fe fac2 	bl	91d4 <processDebugPacket(InPacket const&, OutPacket&)>
    ac50:	b990      	cbnz	r0, ac78 <host::runHostSlice()+0x2a0>
			// okay, processed
		} else
#endif
		if (processCommandPacket(in, out)) {
    ac52:	493b      	ldr	r1, [pc, #236]	; (ad40 <host::runHostSlice()+0x368>)
    ac54:	4608      	mov	r0, r1
    ac56:	f101 0125 	add.w	r1, r1, #37	; 0x25
    ac5a:	f7ff f859 	bl	9d10 <host::processCommandPacket(InPacket const&, OutPacket&)>
    ac5e:	b958      	cbnz	r0, ac78 <host::runHostSlice()+0x2a0>
			// okay, processed
		} else if (processQueryPacket(in, out)) {
    ac60:	4937      	ldr	r1, [pc, #220]	; (ad40 <host::runHostSlice()+0x368>)
    ac62:	4608      	mov	r0, r1
    ac64:	f101 0125 	add.w	r1, r1, #37	; 0x25
    ac68:	f7ff fc38 	bl	a4dc <host::processQueryPacket(InPacket const&, OutPacket&)>
    ac6c:	b920      	cbnz	r0, ac78 <host::runHostSlice()+0x2a0>
			// okay, processed
		} else {
			// Unrecognized command
			out.append8(RC_CMD_UNSUPPORTED);
    ac6e:	4835      	ldr	r0, [pc, #212]	; (ad44 <host::runHostSlice()+0x36c>)
    ac70:	f04f 0185 	mov.w	r1, #133	; 0x85
    ac74:	f006 f970 	bl	10f58 <OutPacket::append8(unsigned char)>
		}
		in.reset();
    ac78:	4831      	ldr	r0, [pc, #196]	; (ad40 <host::runHostSlice()+0x368>)
    ac7a:	f006 f8bd 	bl	10df8 <InPacket::reset()>
    ac7e:	f641 2314 	movw	r3, #6676	; 0x1a14
    ac82:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ac86:	681b      	ldr	r3, [r3, #0]
    ac88:	f013 0f01 	tst.w	r3, #1
    ac8c:	d115      	bne.n	acba <host::runHostSlice()+0x2e2>
    ac8e:	f641 2014 	movw	r0, #6676	; 0x1a14
    ac92:	f2c1 0000 	movt	r0, #4096	; 0x1000
    ac96:	f008 ff13 	bl	13ac0 <__cxa_guard_acquire>
    ac9a:	b170      	cbz	r0, acba <host::runHostSlice()+0x2e2>
    ac9c:	f641 2018 	movw	r0, #6680	; 0x1a18
    aca0:	f2c1 0000 	movt	r0, #4096	; 0x1000
    aca4:	f04f 0100 	mov.w	r1, #0
    aca8:	460a      	mov	r2, r1
    acaa:	f006 febd 	bl	11a28 <UART::UART(unsigned char, communication_mode)>
    acae:	f641 2014 	movw	r0, #6676	; 0x1a14
    acb2:	f2c1 0000 	movt	r0, #4096	; 0x1000
    acb6:	f008 ff21 	bl	13afc <__cxa_guard_release>
                UART::getHostUART().beginSend();
    acba:	f641 2018 	movw	r0, #6680	; 0x1a18
    acbe:	f2c1 0000 	movt	r0, #4096	; 0x1000
    acc2:	f006 fec5 	bl	11a50 <UART::beginSend()>
	}
    /// mark new state as ready if done building from SD
	if(currentState==HOST_STATE_BUILDING_FROM_SD)
    acc6:	f641 2368 	movw	r3, #6760	; 0x1a68
    acca:	f2c1 0300 	movt	r3, #4096	; 0x1000
    acce:	781b      	ldrb	r3, [r3, #0]
    acd0:	2b02      	cmp	r3, #2
    acd2:	d10a      	bne.n	acea <host::runHostSlice()+0x312>
	{
		if(!sdcard::isPlaying())
    acd4:	f003 f89e 	bl	de14 <sdcard::isPlaying()>
    acd8:	b938      	cbnz	r0, acea <host::runHostSlice()+0x312>
			currentState = HOST_STATE_READY;
    acda:	f641 2368 	movw	r3, #6760	; 0x1a68
    acde:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ace2:	f04f 0200 	mov.w	r2, #0
    ace6:	701a      	strb	r2, [r3, #0]
    ace8:	e010      	b.n	ad0c <host::runHostSlice()+0x334>
	}
    // mark new state as ready if done buiding onboard script
	if((currentState==HOST_STATE_BUILDING_ONBOARD))
    acea:	f641 2368 	movw	r3, #6760	; 0x1a68
    acee:	f2c1 0300 	movt	r3, #4096	; 0x1000
    acf2:	781b      	ldrb	r3, [r3, #0]
    acf4:	2b05      	cmp	r3, #5
    acf6:	d109      	bne.n	ad0c <host::runHostSlice()+0x334>
	{
		if(!utility::isPlaying()){
    acf8:	f005 f892 	bl	fe20 <utility::isPlaying()>
    acfc:	b930      	cbnz	r0, ad0c <host::runHostSlice()+0x334>
			currentState = HOST_STATE_READY;
    acfe:	f641 2368 	movw	r3, #6760	; 0x1a68
    ad02:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ad06:	f04f 0200 	mov.w	r2, #0
    ad0a:	701a      	strb	r2, [r3, #0]
		}
	}
	managePrintTime();
    ad0c:	f7ff f9f2 	bl	a0f4 <host::managePrintTime()>
    ad10:	e011      	b.n	ad36 <host::runHostSlice()+0x35e>
	if (out.isSending()) {
		// still sending; wait until send is complete before reading new host packets.
		return;
	}
    // soft reset the machine unless waiting to notify repG that a cancel has occured
	if (do_host_reset && (!cancelBuild || cancel_timeout.hasElapsed())){
    ad12:	f641 2380 	movw	r3, #6784	; 0x1a80
    ad16:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ad1a:	781b      	ldrb	r3, [r3, #0]
    ad1c:	2b00      	cmp	r3, #0
    ad1e:	f47f aeac 	bne.w	aa7a <host::runHostSlice()+0xa2>
	}

	bool isStarted() const {
		return state != PS_START;
    ad22:	f641 2318 	movw	r3, #6680	; 0x1a18
    ad26:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ad2a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
		currentState = HOST_STATE_READY;
			
		return;
	}
    // new packet coming in
	if (in.isStarted() && !in.isFinished()) {
    ad2e:	2b00      	cmp	r3, #0
    ad30:	f47f aee8 	bne.w	ab04 <host::runHostSlice()+0x12c>
    ad34:	e717      	b.n	ab66 <host::runHostSlice()+0x18e>
		if(!utility::isPlaying()){
			currentState = HOST_STATE_READY;
		}
	}
	managePrintTime();
}
    ad36:	b005      	add	sp, #20
    ad38:	bd30      	pop	{r4, r5, pc}
    ad3a:	bf00      	nop
    ad3c:	0002658c 	.word	0x0002658c
    ad40:	10001a1b 	.word	0x10001a1b
    ad44:	10001a40 	.word	0x10001a40

0000ad48 <_GLOBAL__sub_I__ZN4host17packet_in_timeoutE>:
		}
	}
	return false;
}

}
    ad48:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
    ad4a:	f641 2070 	movw	r0, #6768	; 0x1a70
    ad4e:	f2c1 0000 	movt	r0, #4096	; 0x1000
    ad52:	f04f 0100 	mov.w	r1, #0
    ad56:	f005 ffaf 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
    ad5a:	f641 2078 	movw	r0, #6776	; 0x1a78
    ad5e:	f2c1 0000 	movt	r0, #4096	; 0x1000
    ad62:	f04f 0101 	mov.w	r1, #1
    ad66:	f005 ffa7 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
    ad6a:	f641 207c 	movw	r0, #6780	; 0x1a7c
    ad6e:	f2c1 0000 	movt	r0, #4096	; 0x1000
    ad72:	f04f 0102 	mov.w	r1, #2
    ad76:	f005 ff9f 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
    ad7a:	f641 2098 	movw	r0, #6808	; 0x1a98
    ad7e:	f2c1 0000 	movt	r0, #4096	; 0x1000
    ad82:	f04f 0103 	mov.w	r1, #3
    ad86:	f005 ff97 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
    ad8a:	f641 20ac 	movw	r0, #6828	; 0x1aac
    ad8e:	f2c1 0000 	movt	r0, #4096	; 0x1000
    ad92:	f04f 0104 	mov.w	r1, #4
    ad96:	f005 ff8f 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
    ad9a:	f641 24c0 	movw	r4, #6848	; 0x1ac0
    ad9e:	f2c1 0400 	movt	r4, #4096	; 0x1000
    ada2:	4620      	mov	r0, r4
    ada4:	f04f 01ff 	mov.w	r1, #255	; 0xff
    ada8:	f005 ff86 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
	};
	// currently not used:
	//const uint8_t getPinIndex() const { return pin_index; }
};

static const Pin NullPin(NullPort, 0);
    adac:	f641 20d8 	movw	r0, #6872	; 0x1ad8
    adb0:	f2c1 0000 	movt	r0, #4096	; 0x1000
    adb4:	4621      	mov	r1, r4
    adb6:	f04f 0200 	mov.w	r2, #0
    adba:	f006 f98f 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
bool processCommandPacket(const InPacket& from_host, OutPacket& to_host);
bool processQueryPacket(const InPacket& from_host, OutPacket& to_host);
bool processExtruderQueryPacket(const InPacket& from_host, OutPacket& to_host);

// Timeout from time first bit recieved until we abort packet reception
Timeout packet_in_timeout;
    adbe:	f641 20b0 	movw	r0, #6832	; 0x1ab0
    adc2:	f2c1 0000 	movt	r0, #4096	; 0x1000
    adc6:	f006 fd23 	bl	11810 <Timeout::Timeout()>
Timeout cancel_timeout;
    adca:	f641 20c4 	movw	r0, #6852	; 0x1ac4
    adce:	f2c1 0000 	movt	r0, #4096	; 0x1000
    add2:	f006 fd1d 	bl	11810 <Timeout::Timeout()>

uint32_t last_print_line = 0;

/// counter for current print time
uint8_t print_time_hours = 0;
Timeout print_time;
    add6:	f641 209c 	movw	r0, #6812	; 0x1a9c
    adda:	f2c1 0000 	movt	r0, #4096	; 0x1000
    adde:	f006 fd17 	bl	11810 <Timeout::Timeout()>
		}
	}
	return false;
}

}
    ade2:	bd10      	pop	{r4, pc}

0000ade4 <WDT_IRQHandler>:
}

#define USER_FLASH_START 0x3000 // For USB bootloader
#define BOOTLOADER_START 0x0 // To enter bootloader

extern "C" void WDT_IRQHandler (void){
    ade4:	b538      	push	{r3, r4, r5, lr}

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    ade6:	f44f 4561 	mov.w	r5, #57600	; 0xe100
    adea:	f2ce 0500 	movt	r5, #57344	; 0xe000
    adee:	f04f 0401 	mov.w	r4, #1
    adf2:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
	NVIC_DisableIRQ(WDT_IRQn);
	xprintf("WDT_IRQHandler" " (%s:%d)\n",_F_,_L_);
    adf6:	f246 50cc 	movw	r0, #26060	; 0x65cc
    adfa:	f2c0 0002 	movt	r0, #2
    adfe:	490f      	ldr	r1, [pc, #60]	; (ae3c <WDT_IRQHandler+0x58>)
    ae00:	f04f 0234 	mov.w	r2, #52	; 0x34
    ae04:	f7fb fb66 	bl	64d4 <xprintf>
	SCB->VTOR = (BOOTLOADER_START & 0x1FFFFF80);
    ae08:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    ae0c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    ae10:	f04f 0200 	mov.w	r2, #0
    ae14:	609a      	str	r2, [r3, #8]
	RTC_WriteGPREG(LPC_RTC, 2, 0xbbbbbbbb);
    ae16:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    ae1a:	f2c4 0002 	movt	r0, #16386	; 0x4002
    ae1e:	f04f 0102 	mov.w	r1, #2
    ae22:	f04f 32bb 	mov.w	r2, #3149642683	; 0xbbbbbbbb
    ae26:	f7f8 fbcd 	bl	35c4 <RTC_WriteGPREG>
	WDT_Init (WDT_CLKSRC_PCLK, WDT_MODE_RESET);
    ae2a:	4620      	mov	r0, r4
    ae2c:	4621      	mov	r1, r4
    ae2e:	f7f9 fcd5 	bl	47dc <WDT_Init>
	WDT_Start(1);
    ae32:	4620      	mov	r0, r4
    ae34:	f7f9 fd08 	bl	4848 <WDT_Start>

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    ae38:	602c      	str	r4, [r5, #0]
    ae3a:	e7fe      	b.n	ae3a <WDT_IRQHandler+0x56>
    ae3c:	00026600 	.word	0x00026600

0000ae40 <reset(bool)>:
	NVIC_EnableIRQ(WDT_IRQn);
	while(1);
}

void reset(bool hard_reset) {
    ae40:	b538      	push	{r3, r4, r5, lr}
//		if(resetFlags & (1 << 2)){
//			brown_out = true;
//		}
		
        // clear watch dog timer and re-enable
		if(hard_reset)
    ae42:	4605      	mov	r5, r0
    ae44:	b1a0      	cbz	r0, ae70 <reset(bool)+0x30>
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    ae46:	f44f 4461 	mov.w	r4, #57600	; 0xe100
    ae4a:	f2ce 0400 	movt	r4, #57344	; 0xe000
    ae4e:	f04f 0100 	mov.w	r1, #0
    ae52:	f884 1300 	strb.w	r1, [r4, #768]	; 0x300
		{ 
            // ATODO: remove disable
			NVIC_SetPriority(WDT_IRQn, 0);
			WDT_Init (WDT_CLKSRC_PCLK, WDT_MODE_INT_ONLY);
    ae56:	f04f 0001 	mov.w	r0, #1
    ae5a:	f7f9 fcbf 	bl	47dc <WDT_Init>
			WDT_Start(8000000);
    ae5e:	f44f 5090 	mov.w	r0, #4608	; 0x1200
    ae62:	f2c0 007a 	movt	r0, #122	; 0x7a
    ae66:	f7f9 fcef 	bl	4848 <WDT_Start>

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    ae6a:	f04f 0301 	mov.w	r3, #1
    ae6e:	6023      	str	r3, [r4, #0]
//			wdt_enable(WDTO_8S); // 8 seconds is max timeout
		}
		
		// initialize major classes
		Motherboard& board = Motherboard::getBoard();
		sdcard::reset();
    ae70:	f003 f876 	bl	df60 <sdcard::reset()>
		xprintf("sdcard::reset" " (%s:%d)\n",_F_,_L_);
    ae74:	4c26      	ldr	r4, [pc, #152]	; (af10 <reset(bool)+0xd0>)
    ae76:	f246 6008 	movw	r0, #26120	; 0x6608
    ae7a:	f2c0 0002 	movt	r0, #2
    ae7e:	4621      	mov	r1, r4
    ae80:	f04f 0257 	mov.w	r2, #87	; 0x57
    ae84:	f7fb fb26 	bl	64d4 <xprintf>
		utility::reset();
    ae88:	f004 ffd0 	bl	fe2c <utility::reset()>
		xprintf("utility::reset" " (%s:%d)\n",_F_,_L_);
    ae8c:	f246 6020 	movw	r0, #26144	; 0x6620
    ae90:	f2c0 0002 	movt	r0, #2
    ae94:	4621      	mov	r1, r4
    ae96:	f04f 0259 	mov.w	r2, #89	; 0x59
    ae9a:	f7fb fb1b 	bl	64d4 <xprintf>
		planner::init();
    ae9e:	f002 f94d 	bl	d13c <planner::init()>
		xprintf("planner::init" " (%s:%d)\n",_F_,_L_);
    aea2:	f246 6038 	movw	r0, #26168	; 0x6638
    aea6:	f2c0 0002 	movt	r0, #2
    aeaa:	4621      	mov	r1, r4
    aeac:	f04f 025b 	mov.w	r2, #91	; 0x5b
    aeb0:	f7fb fb10 	bl	64d4 <xprintf>
		planner::abort();
    aeb4:	f002 f8a8 	bl	d008 <planner::abort()>
		command::reset();
    aeb8:	f7fd f9e2 	bl	8280 <command::reset()>
		eeprom::init();
    aebc:	f005 fad2 	bl	10464 <eeprom::init()>
		xprintf("eeprom::init" " (%s:%d)\n",_F_,_L_);
    aec0:	f246 6050 	movw	r0, #26192	; 0x6650
    aec4:	f2c0 0002 	movt	r0, #2
    aec8:	4621      	mov	r1, r4
    aeca:	f04f 025f 	mov.w	r2, #95	; 0x5f
    aece:	f7fb fb01 	bl	64d4 <xprintf>
		steppers::reset();
    aed2:	f003 fccd 	bl	e870 <steppers::reset()>
		xprintf("steppers::reset" " (%s:%d)\n",_F_,_L_);
    aed6:	f246 6068 	movw	r0, #26216	; 0x6668
    aeda:	f2c0 0002 	movt	r0, #2
    aede:	4621      	mov	r1, r4
    aee0:	f04f 0261 	mov.w	r2, #97	; 0x61
    aee4:	f7fb faf6 	bl	64d4 <xprintf>
		initThermistorTables();
    aee8:	f006 fc18 	bl	1171c <initThermistorTables()>
		board.reset(hard_reset);
    aeec:	f641 309c 	movw	r0, #7068	; 0x1b9c
    aef0:	f2c1 0000 	movt	r0, #4096	; 0x1000
    aef4:	4629      	mov	r1, r5
    aef6:	f000 fc01 	bl	b6fc <Motherboard::reset(bool)>
		xprintf("board.reset(hard_reset)" " (%s:%d)\n",_F_,_L_);
    aefa:	f246 6084 	movw	r0, #26244	; 0x6684
    aefe:	f2c0 0002 	movt	r0, #2
    af02:	4621      	mov	r1, r4
    af04:	f04f 0264 	mov.w	r2, #100	; 0x64
    af08:	f7fb fae4 	bl	64d4 <xprintf>
	//	{
	//		board.getInterfaceBoard().errorMessage("Brown-Out Reset     Occured", 27);
	//		board.startButtonWait();
	//	}	
//	}
}
    af0c:	bd38      	pop	{r3, r4, r5, pc}
    af0e:	bf00      	nop
    af10:	00026600 	.word	0x00026600

0000af14 <main>:
volatile uint32_t USER_MILLIS;

volatile char UART_LINE[50];
volatile uint32_t UART_LINE_LEN;

int main() {
    af14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
    af18:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    af1c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    af20:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
    af22:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
    af26:	4019      	ands	r1, r3
  reg_value  =  (reg_value                       |
                (0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
    af28:	f44f 6380 	mov.w	r3, #1024	; 0x400
    af2c:	f2c0 53fa 	movt	r3, #1530	; 0x5fa
    af30:	430b      	orrs	r3, r1
  SCB->AIRCR =  reg_value;
    af32:	60d3      	str	r3, [r2, #12]
	// assign ADC to group 4 sub-priority 1 = 17
	NVIC_SetPriorityGrouping(4);

//	SCB->VTOR = (USER_FLASH_START & 0x1FFFFF80);

	comm_init();
    af34:	f7fa ffb2 	bl	5e9c <comm_init>
	comm_flush();
    af38:	f7fb f9b6 	bl	62a8 <comm_flush>
	xprintf("\r\n\r\n\r\n\r\n\r\n**BOOTED**" " (%s:%d)\n",_F_,_L_);
    af3c:	4e32      	ldr	r6, [pc, #200]	; (b008 <main+0xf4>)
    af3e:	f246 60a8 	movw	r0, #26280	; 0x66a8
    af42:	f2c0 0002 	movt	r0, #2
    af46:	4631      	mov	r1, r6
    af48:	f04f 0293 	mov.w	r2, #147	; 0x93
    af4c:	f7fb fac2 	bl	64d4 <xprintf>
			_delay_us(10000);
//		}
	}

	Motherboard& board = Motherboard::getBoard();
	reset(true);
    af50:	f04f 0001 	mov.w	r0, #1
    af54:	f7ff ff74 	bl	ae40 <reset(bool)>
	xprintf("reset done" " (%s:%d)\n",_F_,_L_);
    af58:	f246 60c8 	movw	r0, #26312	; 0x66c8
    af5c:	f2c0 0002 	movt	r0, #2
    af60:	4631      	mov	r1, r6
    af62:	f04f 02ad 	mov.w	r2, #173	; 0xad
    af66:	f7fb fab5 	bl	64d4 <xprintf>
	steppers::init();
    af6a:	f003 fc85 	bl	e878 <steppers::init()>
	xprintf("stepper init done" " (%s:%d)\n",_F_,_L_);
    af6e:	f246 60dc 	movw	r0, #26332	; 0x66dc
    af72:	f2c0 0002 	movt	r0, #2
    af76:	4631      	mov	r1, r6
    af78:	f04f 02af 	mov.w	r2, #175	; 0xaf
    af7c:	f7fb faaa 	bl	64d4 <xprintf>
//	sei();
		xprintf("Loop" " (%s:%d)\n",_F_,_L_);
    af80:	f246 60f8 	movw	r0, #26360	; 0x66f8
    af84:	f2c0 0002 	movt	r0, #2
    af88:	4631      	mov	r1, r6
    af8a:	f04f 02b1 	mov.w	r2, #177	; 0xb1
    af8e:	f7fb faa1 	bl	64d4 <xprintf>
		// Host interaction thread.
		host::runHostSlice();
		// Command handling thread.
		command::runCommandSlice();
		// Motherboard slice
		board.runMotherboardSlice();
    af92:	f641 379c 	movw	r7, #7068	; 0x1b9c
    af96:	f2c1 0700 	movt	r7, #4096	; 0x1000
        // reset the watch dog timer
		WDT_Feed ();
		if(LINE_READY){
    af9a:	f240 56d8 	movw	r6, #1496	; 0x5d8
    af9e:	f2c1 0600 	movt	r6, #4096	; 0x1000
			exec_cmd(UART_LINE);
    afa2:	f641 3808 	movw	r8, #6920	; 0x1b08
    afa6:	f2c1 0800 	movt	r8, #4096	; 0x1000
	xprintf("stepper init done" " (%s:%d)\n",_F_,_L_);
//	sei();
		xprintf("Loop" " (%s:%d)\n",_F_,_L_);
	while (1) {
		// Host interaction thread.
		host::runHostSlice();
    afaa:	f7ff fd15 	bl	a9d8 <host::runHostSlice()>
		// Command handling thread.
		command::runCommandSlice();
    afae:	f7fd fa95 	bl	84dc <command::runCommandSlice()>
		// Motherboard slice
		board.runMotherboardSlice();
    afb2:	4638      	mov	r0, r7
    afb4:	f000 fad4 	bl	b560 <Motherboard::runMotherboardSlice()>
        // reset the watch dog timer
		WDT_Feed ();
    afb8:	f7f9 fc3c 	bl	4834 <WDT_Feed>
		if(LINE_READY){
    afbc:	6833      	ldr	r3, [r6, #0]
    afbe:	b12b      	cbz	r3, afcc <main+0xb8>
			exec_cmd(UART_LINE);
    afc0:	4640      	mov	r0, r8
    afc2:	f7fb f981 	bl	62c8 <exec_cmd>
			LINE_READY=0;
    afc6:	f04f 0300 	mov.w	r3, #0
    afca:	6033      	str	r3, [r6, #0]
		}
//		wdt_reset();
		uint32_t loop1;
		loop1++;
    afcc:	f104 0401 	add.w	r4, r4, #1
		if (loop1 > 5000){
    afd0:	f241 3388 	movw	r3, #5000	; 0x1388
    afd4:	429c      	cmp	r4, r3
    afd6:	d907      	bls.n	afe8 <main+0xd4>
			loop1=0;
			xprintf(".");
    afd8:	f246 7008 	movw	r0, #26376	; 0x6708
    afdc:	f2c0 0002 	movt	r0, #2
    afe0:	f7fb fa78 	bl	64d4 <xprintf>
		}
//		wdt_reset();
		uint32_t loop1;
		loop1++;
		if (loop1 > 5000){
			loop1=0;
    afe4:	f04f 0400 	mov.w	r4, #0
			xprintf(".");
		}
		// only update flash after a few reads have taken place - Limited Life!!!
		uint32_t loop2;
		if (eeprom::getflashupdate()){
    afe8:	f005 f9e6 	bl	103b8 <eeprom::getflashupdate()>
    afec:	b108      	cbz	r0, aff2 <main+0xde>
			loop2++;
    afee:	f105 0501 	add.w	r5, r5, #1
		}
		if (loop2 > 500000){
    aff2:	f24a 1320 	movw	r3, #41248	; 0xa120
    aff6:	f2c0 0307 	movt	r3, #7
    affa:	429d      	cmp	r5, r3
    affc:	d9d5      	bls.n	afaa <main+0x96>
			eeprom::save_to_flash();
    affe:	f7fe fa45 	bl	948c <eeprom::save_to_flash()>
			loop2=0;
    b002:	f04f 0500 	mov.w	r5, #0
    b006:	e7d0      	b.n	afaa <main+0x96>
    b008:	00026600 	.word	0x00026600

0000b00c <_GLOBAL__sub_I_WDT_IRQHandler>:
		}
	}
	return 0;
}
    b00c:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
    b00e:	f641 303c 	movw	r0, #6972	; 0x1b3c
    b012:	f2c1 0000 	movt	r0, #4096	; 0x1000
    b016:	f04f 0100 	mov.w	r1, #0
    b01a:	f005 fe4d 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
    b01e:	f641 3040 	movw	r0, #6976	; 0x1b40
    b022:	f2c1 0000 	movt	r0, #4096	; 0x1000
    b026:	f04f 0101 	mov.w	r1, #1
    b02a:	f005 fe45 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
    b02e:	f641 3044 	movw	r0, #6980	; 0x1b44
    b032:	f2c1 0000 	movt	r0, #4096	; 0x1000
    b036:	f04f 0102 	mov.w	r1, #2
    b03a:	f005 fe3d 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
    b03e:	f641 3048 	movw	r0, #6984	; 0x1b48
    b042:	f2c1 0000 	movt	r0, #4096	; 0x1000
    b046:	f04f 0103 	mov.w	r1, #3
    b04a:	f005 fe35 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
    b04e:	f641 304c 	movw	r0, #6988	; 0x1b4c
    b052:	f2c1 0000 	movt	r0, #4096	; 0x1000
    b056:	f04f 0104 	mov.w	r1, #4
    b05a:	f005 fe2d 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
    b05e:	f641 3450 	movw	r4, #6992	; 0x1b50
    b062:	f2c1 0400 	movt	r4, #4096	; 0x1000
    b066:	4620      	mov	r0, r4
    b068:	f04f 01ff 	mov.w	r1, #255	; 0xff
    b06c:	f005 fe24 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
    b070:	f641 3054 	movw	r0, #6996	; 0x1b54
    b074:	f2c1 0000 	movt	r0, #4096	; 0x1000
    b078:	4621      	mov	r1, r4
    b07a:	f04f 0200 	mov.w	r2, #0
    b07e:	f006 f82d 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
    b082:	bd10      	pop	{r4, pc}

0000b084 <TemperatureSensor::~TemperatureSensor()>:
protected:
        /// The last temperature reading from the sensor, in degrees Celcius, or
        /// #BAD_TEMPERATURE if the last reading is invalid.
	volatile uint16_t current_temp;
public:
	virtual ~TemperatureSensor(){};
    b084:	4b01      	ldr	r3, [pc, #4]	; (b08c <TemperatureSensor::~TemperatureSensor()+0x8>)
    b086:	6003      	str	r3, [r0, #0]
    b088:	4770      	bx	lr
    b08a:	bf00      	nop
    b08c:	00026718 	.word	0x00026718

0000b090 <TemperatureSensor::init()>:
	///         last read failed.
	int16_t getTemperature() const { return current_temp; }

	/// Initialize the temperature sensor hardware. Must be called before the temperature
	/// sensor can be used.
	virtual void init() {}
    b090:	4770      	bx	lr
    b092:	bf00      	nop

0000b094 <BuildPlatformHeatingElement::~BuildPlatformHeatingElement()>:
    b094:	4b01      	ldr	r3, [pc, #4]	; (b09c <BuildPlatformHeatingElement::~BuildPlatformHeatingElement()+0x8>)
    b096:	6003      	str	r3, [r0, #0]
};


/// Build platform heating element on v34 Extruder controller
/// \ingroup ECv34
class BuildPlatformHeatingElement : public HeatingElement {
    b098:	4770      	bx	lr
    b09a:	bf00      	nop
    b09c:	00026460 	.word	0x00026460

0000b0a0 <Motherboard::~Motherboard()>:
    b0a0:	4906      	ldr	r1, [pc, #24]	; (b0bc <Motherboard::~Motherboard()+0x1c>)
    b0a2:	f8c0 1208 	str.w	r1, [r0, #520]	; 0x208
protected:
        /// The last temperature reading from the sensor, in degrees Celcius, or
        /// #BAD_TEMPERATURE if the last reading is invalid.
	volatile uint16_t current_temp;
public:
	virtual ~TemperatureSensor(){};
    b0a6:	4a06      	ldr	r2, [pc, #24]	; (b0c0 <Motherboard::~Motherboard()+0x20>)
    b0a8:	f8c0 21e8 	str.w	r2, [r0, #488]	; 0x1e8
    b0ac:	f8c0 1128 	str.w	r1, [r0, #296]	; 0x128
    b0b0:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
    b0b4:	6481      	str	r1, [r0, #72]	; 0x48
    b0b6:	6282      	str	r2, [r0, #40]	; 0x28
};

/// Main class for Motherboard version 4.0+ (Gen4 electronics)
/// \ingroup HardwareLibraries
/// \ingroup MBv40
class Motherboard {
    b0b8:	4770      	bx	lr
    b0ba:	bf00      	nop
    b0bc:	00026460 	.word	0x00026460
    b0c0:	00026718 	.word	0x00026718

0000b0c4 <BuildPlatformHeatingElement::~BuildPlatformHeatingElement()>:
};


/// Build platform heating element on v34 Extruder controller
/// \ingroup ECv34
class BuildPlatformHeatingElement : public HeatingElement {
    b0c4:	b510      	push	{r4, lr}
    b0c6:	4604      	mov	r4, r0
    b0c8:	4b02      	ldr	r3, [pc, #8]	; (b0d4 <BuildPlatformHeatingElement::~BuildPlatformHeatingElement()+0x10>)
    b0ca:	6003      	str	r3, [r0, #0]
    b0cc:	f008 fc04 	bl	138d8 <operator delete(void*)>
    b0d0:	4620      	mov	r0, r4
    b0d2:	bd10      	pop	{r4, pc}
    b0d4:	00026460 	.word	0x00026460

0000b0d8 <TemperatureSensor::~TemperatureSensor()>:
    b0d8:	b510      	push	{r4, lr}
    b0da:	4604      	mov	r4, r0
    b0dc:	4b02      	ldr	r3, [pc, #8]	; (b0e8 <TemperatureSensor::~TemperatureSensor()+0x10>)
    b0de:	6003      	str	r3, [r0, #0]
    b0e0:	f008 fbfa 	bl	138d8 <operator delete(void*)>
    b0e4:	4620      	mov	r0, r4
    b0e6:	bd10      	pop	{r4, pc}
    b0e8:	00026718 	.word	0x00026718

0000b0ec <BuildPlatformHeatingElement::setHeatingElement(unsigned char)>:
		EXTRA_FET.setDirection(true);
		EXTRA_FET.setValue(on);
//	}
}

void BuildPlatformHeatingElement::setHeatingElement(uint8_t value) {
    b0ec:	b510      	push	{r4, lr}
    b0ee:	b084      	sub	sp, #16
    b0f0:	460c      	mov	r4, r1
	// This is a bit of a hack to get the temperatures right until we fix our
	// PWM'd PID implementation.  We reduce the MV to one bit, essentially.
	// It works relatively well.
//  	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		pwmHBP_On(false);
		HBP_HEAT.setValue(value != 0);
    b0f2:	a803      	add	r0, sp, #12
    b0f4:	f04f 01ff 	mov.w	r1, #255	; 0xff
    b0f8:	f005 fdde 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
    b0fc:	a801      	add	r0, sp, #4
    b0fe:	a903      	add	r1, sp, #12
    b100:	f04f 02ff 	mov.w	r2, #255	; 0xff
    b104:	f005 ffea 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    b108:	f89d 3005 	ldrb.w	r3, [sp, #5]
    b10c:	b9ab      	cbnz	r3, b13a <BuildPlatformHeatingElement::setHeatingElement(unsigned char)+0x4e>
		 	return;
		// uint8_t oldSREG = SREG;

//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
    b10e:	b154      	cbz	r4, b126 <BuildPlatformHeatingElement::setHeatingElement(unsigned char)+0x3a>
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    b110:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b114:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b118:	f04f 0101 	mov.w	r1, #1
    b11c:	fa01 f103 	lsl.w	r1, r1, r3
    b120:	f7f8 f9e0 	bl	34e4 <GPIO_SetValue>
    b124:	e009      	b.n	b13a <BuildPlatformHeatingElement::setHeatingElement(unsigned char)+0x4e>
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    b126:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b12a:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b12e:	f04f 0101 	mov.w	r1, #1
    b132:	fa01 f103 	lsl.w	r1, r1, r3
    b136:	f7f8 f9dd 	bl	34f4 <GPIO_ClearValue>
//	}
}
    b13a:	b004      	add	sp, #16
    b13c:	bd10      	pop	{r4, pc}
    b13e:	bf00      	nop

0000b140 <Motherboard::Motherboard()>:

/// Instantiate static motherboard instance
Motherboard Motherboard::motherboard;

/// Create motherboard object
Motherboard::Motherboard() :
    b140:	b570      	push	{r4, r5, r6, lr}
    b142:	b092      	sub	sp, #72	; 0x48
    b144:	4604      	mov	r4, r0
            platform_thermistor(PLATFORM_PIN,0),
            platform_heater(platform_thermistor,platform_element,SAMPLE_INTERVAL_MICROS_THERMISTOR,
            		eeprom_offsets::T0_DATA_BASE + toolhead_eeprom_offsets::HBP_PID_BASE, false), //TRICKY: HBP is only and anways on T0 for this machine
			using_platform(true),
			Extruder_One(0, EX1_PWR, EX1_FAN, THERMOCOUPLE_CS1,eeprom_offsets::T0_DATA_BASE),
			Extruder_Two(1, EX2_PWR, EX2_FAN, THERMOCOUPLE_CS2,eeprom_offsets::T1_DATA_BASE)
    b146:	f100 0004 	add.w	r0, r0, #4
    b14a:	f006 fb61 	bl	11810 <Timeout::Timeout()>
    b14e:	f104 0014 	add.w	r0, r4, #20
    b152:	f006 fb5d 	bl	11810 <Timeout::Timeout()>
    b156:	f641 3670 	movw	r6, #7024	; 0x1b70
    b15a:	f2c1 0600 	movt	r6, #4096	; 0x1000
    b15e:	a802      	add	r0, sp, #8
    b160:	4631      	mov	r1, r6
    b162:	f04f 0204 	mov.w	r2, #4
    b166:	f005 ffb9 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
    b16a:	a806      	add	r0, sp, #24
    b16c:	f04f 01ff 	mov.w	r1, #255	; 0xff
    b170:	f005 fda2 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
    b174:	a804      	add	r0, sp, #16
    b176:	a906      	add	r1, sp, #24
    b178:	f04f 02ff 	mov.w	r2, #255	; 0xff
    b17c:	f005 ffae 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
    b180:	a809      	add	r0, sp, #36	; 0x24
    b182:	f04f 01ff 	mov.w	r1, #255	; 0xff
    b186:	f005 fd97 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
    b18a:	ad07      	add	r5, sp, #28
    b18c:	4628      	mov	r0, r5
    b18e:	a909      	add	r1, sp, #36	; 0x24
    b190:	f04f 02ff 	mov.w	r2, #255	; 0xff
    b194:	f005 ffa2 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
    b198:	9500      	str	r5, [sp, #0]
    b19a:	f44f 7380 	mov.w	r3, #256	; 0x100
    b19e:	9301      	str	r3, [sp, #4]
    b1a0:	f104 0028 	add.w	r0, r4, #40	; 0x28
    b1a4:	f04f 0100 	mov.w	r1, #0
    b1a8:	aa02      	add	r2, sp, #8
    b1aa:	ab04      	add	r3, sp, #16
    b1ac:	f7fe fd38 	bl	9c20 <ExtruderBoard::ExtruderBoard(unsigned char, Pin, Pin, Pin, unsigned short)>
    b1b0:	a80a      	add	r0, sp, #40	; 0x28
    b1b2:	4631      	mov	r1, r6
    b1b4:	f04f 0203 	mov.w	r2, #3
    b1b8:	f005 ff90 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
    b1bc:	a80e      	add	r0, sp, #56	; 0x38
    b1be:	f04f 01ff 	mov.w	r1, #255	; 0xff
    b1c2:	f005 fd79 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
    b1c6:	a80c      	add	r0, sp, #48	; 0x30
    b1c8:	a90e      	add	r1, sp, #56	; 0x38
    b1ca:	f04f 02ff 	mov.w	r2, #255	; 0xff
    b1ce:	f005 ff85 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
    b1d2:	a811      	add	r0, sp, #68	; 0x44
    b1d4:	f04f 01ff 	mov.w	r1, #255	; 0xff
    b1d8:	f005 fd6e 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
    b1dc:	ad0f      	add	r5, sp, #60	; 0x3c
    b1de:	4628      	mov	r0, r5
    b1e0:	a911      	add	r1, sp, #68	; 0x44
    b1e2:	f04f 02ff 	mov.w	r2, #255	; 0xff
    b1e6:	f005 ff79 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
    b1ea:	9500      	str	r5, [sp, #0]
    b1ec:	f44f 738e 	mov.w	r3, #284	; 0x11c
    b1f0:	9301      	str	r3, [sp, #4]
    b1f2:	f504 7084 	add.w	r0, r4, #264	; 0x108
    b1f6:	f04f 0101 	mov.w	r1, #1
    b1fa:	aa0a      	add	r2, sp, #40	; 0x28
    b1fc:	ab0c      	add	r3, sp, #48	; 0x30
    b1fe:	f7fe fd0f 	bl	9c20 <ExtruderBoard::ExtruderBoard(unsigned char, Pin, Pin, Pin, unsigned short)>
    b202:	f504 75f4 	add.w	r5, r4, #488	; 0x1e8
    b206:	4628      	mov	r0, r5
    b208:	f04f 0118 	mov.w	r1, #24
    b20c:	f04f 0200 	mov.w	r2, #0
    b210:	f006 f840 	bl	11294 <Thermistor::Thermistor(unsigned char, unsigned char)>
    b214:	4b0c      	ldr	r3, [pc, #48]	; (b248 <Motherboard::Motherboard()+0x108>)
    b216:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
    b21a:	f44f 7388 	mov.w	r3, #272	; 0x110
    b21e:	9300      	str	r3, [sp, #0]
    b220:	f04f 0300 	mov.w	r3, #0
    b224:	9301      	str	r3, [sp, #4]
    b226:	f504 7003 	add.w	r0, r4, #524	; 0x20c
    b22a:	4629      	mov	r1, r5
    b22c:	f504 7202 	add.w	r2, r4, #520	; 0x208
    b230:	f24c 3350 	movw	r3, #50000	; 0xc350
    b234:	f005 fa26 	bl	10684 <Heater::Heater(TemperatureSensor&, HeatingElement&, unsigned long, unsigned short, bool)>
    b238:	f04f 0301 	mov.w	r3, #1
    b23c:	f884 3298 	strb.w	r3, [r4, #664]	; 0x298
{
}
    b240:	4620      	mov	r0, r4
    b242:	b012      	add	sp, #72	; 0x48
    b244:	bd70      	pop	{r4, r5, r6, pc}
    b246:	bf00      	nop
    b248:	00026730 	.word	0x00026730

0000b24c <Motherboard::initClocks()>:

void Motherboard::initClocks(){
    b24c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b250:	b091      	sub	sp, #68	; 0x44
	// Reset and configure timer 3, the microsecond and stepper // Steppers only now!
	// interrupt timer.

	TIM_TIMERCFG_Type TMR0_Cfg;
	TIM_MATCHCFG_Type TMR0_Match;
	TMR0_Cfg.PrescaleOption = TIM_PRESCALE_USVAL;
    b252:	f04f 0401 	mov.w	r4, #1
    b256:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
	TMR0_Cfg.PrescaleValue = 10;
    b25a:	f04f 030a 	mov.w	r3, #10
    b25e:	930b      	str	r3, [sp, #44]	; 0x2c
	TMR0_Match.MatchChannel = TIM_MR0_INT;
    b260:	f04f 0600 	mov.w	r6, #0
    b264:	f88d 6004 	strb.w	r6, [sp, #4]
	TMR0_Match.IntOnMatch = ENABLE;
    b268:	f88d 4005 	strb.w	r4, [sp, #5]
	TMR0_Match.ResetOnMatch = ENABLE;
    b26c:	f88d 4007 	strb.w	r4, [sp, #7]
	TMR0_Match.StopOnMatch = DISABLE;
    b270:	f88d 6006 	strb.w	r6, [sp, #6]
	TMR0_Match.ExtMatchOutputType = TIM_EXTMATCH_NOTHING;
    b274:	f88d 6008 	strb.w	r6, [sp, #8]
	// Set Match value, count value of 100 (10 * 10000uS = 100000us = 1s --> 10 Hz)
	TMR0_Match.MatchValue = INTERVAL_IN_MICROSECONDS; // 16 for 16mhz avr
    b278:	f04f 0880 	mov.w	r8, #128	; 0x80
    b27c:	f8cd 800c 	str.w	r8, [sp, #12]
	// Set configuration for Tim_config and Tim_MatchConfig
	TIM_Init(LPC_TIM0, TIM_TIMER_MODE, &TMR0_Cfg);
    b280:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    b284:	4631      	mov	r1, r6
    b286:	aa0a      	add	r2, sp, #40	; 0x28
    b288:	f7f8 fb56 	bl	3938 <TIM_Init>
	TIM_ConfigMatch(LPC_TIM0, &TMR0_Match);
    b28c:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    b290:	a901      	add	r1, sp, #4
    b292:	f7f8 fc6f 	bl	3b74 <TIM_ConfigMatch>
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    b296:	f44f 4761 	mov.w	r7, #57600	; 0xe100
    b29a:	f2ce 0700 	movt	r7, #57344	; 0xe000
    b29e:	f04f 0908 	mov.w	r9, #8
    b2a2:	f887 9301 	strb.w	r9, [r7, #769]	; 0x301
	// 0 top priority 32 lowest
	NVIC_SetPriority(TIMER0_IRQn, 1);
	TIM_Cmd(LPC_TIM0,ENABLE);
    b2a6:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    b2aa:	4621      	mov	r1, r4
    b2ac:	f7f8 fc2e 	bl	3b0c <TIM_Cmd>

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    b2b0:	f04f 0302 	mov.w	r3, #2
    b2b4:	603b      	str	r3, [r7, #0]
	// Prescaler: 1/64 (250 KHz)
	TIM_TIMERCFG_Type TMR3_Cfg;
	TIM_MATCHCFG_Type TMR3_Match;
	// On reset, Timer0/1 are enabled (PCTIM0/1 = 1), and Timer2/3 are disabled (PCTIM2/3 = 0).
	// Initialize timer 1, prescale count time of 100uS
	TMR3_Cfg.PrescaleOption = TIM_PRESCALE_USVAL;
    b2b6:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
	TMR3_Cfg.PrescaleValue = 1; // reset to 1 - 1uS
    b2ba:	940d      	str	r4, [sp, #52]	; 0x34
	TMR3_Match.MatchChannel = TIM_MR0_INT;
    b2bc:	f88d 6010 	strb.w	r6, [sp, #16]
	TMR3_Match.IntOnMatch = ENABLE;
    b2c0:	f88d 4011 	strb.w	r4, [sp, #17]
	TMR3_Match.ResetOnMatch = ENABLE;
    b2c4:	f88d 4013 	strb.w	r4, [sp, #19]
	TMR3_Match.StopOnMatch = DISABLE;
    b2c8:	f88d 6012 	strb.w	r6, [sp, #18]
	TMR3_Match.ExtMatchOutputType = TIM_EXTMATCH_NOTHING;
    b2cc:	f88d 6014 	strb.w	r6, [sp, #20]
	// Set Match value, count value of INTERVAL_IN_MICROSECONDS (64 * 1uS = 64us )
	TMR3_Match.MatchValue = INTERVAL_IN_MICROSECONDS;
    b2d0:	f8cd 8018 	str.w	r8, [sp, #24]
	// Set configuration for Tim_config and Tim_MatchConfig
	TIM_Init(LPC_TIM3, TIM_TIMER_MODE, &TMR3_Cfg);
    b2d4:	f44f 4580 	mov.w	r5, #16384	; 0x4000
    b2d8:	f2c4 0509 	movt	r5, #16393	; 0x4009
    b2dc:	4628      	mov	r0, r5
    b2de:	4631      	mov	r1, r6
    b2e0:	aa0c      	add	r2, sp, #48	; 0x30
    b2e2:	f7f8 fb29 	bl	3938 <TIM_Init>
	TIM_ConfigMatch(LPC_TIM3, &TMR3_Match);
    b2e6:	4628      	mov	r0, r5
    b2e8:	a904      	add	r1, sp, #16
    b2ea:	f7f8 fc43 	bl	3b74 <TIM_ConfigMatch>
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    b2ee:	f887 6304 	strb.w	r6, [r7, #772]	; 0x304
	NVIC_SetPriority(TIMER3_IRQn, 0);
	TIM_Cmd(LPC_TIM3,ENABLE);
    b2f2:	4628      	mov	r0, r5
    b2f4:	4621      	mov	r1, r4
    b2f6:	f7f8 fc09 	bl	3b0c <TIM_Cmd>

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    b2fa:	f04f 0310 	mov.w	r3, #16
    b2fe:	603b      	str	r3, [r7, #0]
	// Prescaler: 1/64 (250 KHz)
	TIM_TIMERCFG_Type TMR2_Cfg;
	TIM_MATCHCFG_Type TMR2_Match;
	// On reset, Timer0/1 are enabled (PCTIM0/1 = 1), and Timer2/3 are disabled (PCTIM2/3 = 0).
	// Initialize timer 1, prescale count time of 100uS
	TMR2_Cfg.PrescaleOption = TIM_PRESCALE_USVAL;
    b300:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
	TMR2_Cfg.PrescaleValue = 1; // reset to 1 - 1uS
    b304:	940f      	str	r4, [sp, #60]	; 0x3c
	// Use channel 1, MR1
	TMR2_Match.MatchChannel = TIM_MR0_INT;
    b306:	f88d 601c 	strb.w	r6, [sp, #28]
	// Enable interrupt when MR0 matches the value in TC register
	TMR2_Match.IntOnMatch = ENABLE;
    b30a:	f88d 401d 	strb.w	r4, [sp, #29]
	// Enable reset on MR0: TIMER will reset if MR0 matches it
	TMR2_Match.ResetOnMatch = ENABLE;
    b30e:	f88d 401f 	strb.w	r4, [sp, #31]
	// Don't stop on MR0 if MR0 matches it
	TMR2_Match.StopOnMatch = DISABLE;
    b312:	f88d 601e 	strb.w	r6, [sp, #30]
	// Do nothing for external output pin if match (see cmsis help, there are another options)
	TMR2_Match.ExtMatchOutputType = TIM_EXTMATCH_NOTHING;
    b316:	f88d 6020 	strb.w	r6, [sp, #32]
	// Set Match value, count value of INTERVAL_IN_MICROSECONDS (64 * 1uS = 64us )
	TMR2_Match.MatchValue = INTERVAL_IN_MICROSECONDS;// *10000;
    b31a:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
	// Set configuration for Tim_config and Tim_MatchConfig
	TIM_Init(LPC_TIM2, TIM_TIMER_MODE, &TMR2_Cfg);
    b31e:	4635      	mov	r5, r6
    b320:	f2c4 0509 	movt	r5, #16393	; 0x4009
    b324:	4628      	mov	r0, r5
    b326:	4631      	mov	r1, r6
    b328:	aa0e      	add	r2, sp, #56	; 0x38
    b32a:	f7f8 fb05 	bl	3938 <TIM_Init>
	TIM_ConfigMatch(LPC_TIM2, &TMR2_Match);
    b32e:	4628      	mov	r0, r5
    b330:	a907      	add	r1, sp, #28
    b332:	f7f8 fc1f 	bl	3b74 <TIM_ConfigMatch>
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    b336:	f04f 0320 	mov.w	r3, #32
    b33a:	f887 3303 	strb.w	r3, [r7, #771]	; 0x303
	NVIC_SetPriority(TIMER2_IRQn, 4);
	TIM_Cmd(LPC_TIM2,ENABLE);
    b33e:	4628      	mov	r0, r5
    b340:	4621      	mov	r1, r4
    b342:	f7f8 fbe3 	bl	3b0c <TIM_Cmd>

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    b346:	f8c7 9000 	str.w	r9, [r7]
//	TCCR4A = 0b00000001;
//	TCCR4B = 0b00001011; /// set to PWM mode
//	OCR4A = 0;
//	OCR4B = 0;
//	TIMSK4 = 0b00000000; // no interrupts needed
}
    b34a:	b011      	add	sp, #68	; 0x44
    b34c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000b350 <Motherboard::getCurrentMicros()>:
/// Get the number of microseconds that have passed since
/// the board was booted.
micros_t Motherboard::getCurrentMicros() {
	micros_t micros_snapshot;
//	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		micros_snapshot = micros;
    b350:	6800      	ldr	r0, [r0, #0]
//	}
	return micros_snapshot;
}
    b352:	4770      	bx	lr

0000b354 <Motherboard::doInterrupt()>:

/// Run the motherboard interrupt
void Motherboard::doInterrupt() {
    b354:	b508      	push	{r3, lr}
	//micros += INTERVAL_IN_MICROSECONDS;
	// Do not move steppers if the board is in a paused state
	if (command::isPaused()) return;
    b356:	f7fc fd67 	bl	7e28 <command::isPaused()>
    b35a:	b908      	cbnz	r0, b360 <Motherboard::doInterrupt()+0xc>
	steppers::doInterrupt();
    b35c:	f004 f8ae 	bl	f4bc <steppers::doInterrupt()>
    b360:	bd08      	pop	{r3, pc}
    b362:	bf00      	nop

0000b364 <Motherboard::heaterFail(HeaterFailMode)>:
}

bool connectionsErrorTriggered = false;

void Motherboard::heaterFail(HeaterFailMode mode){
    b364:	b510      	push	{r4, lr}
    b366:	4604      	mov	r4, r0

    // record heat fail mode
	heatFailMode = mode;
    b368:	f880 12a0 	strb.w	r1, [r0, #672]	; 0x2a0
    
	if(heatFailMode == HEATER_FAIL_NOT_PLUGGED_IN)
    b36c:	2902      	cmp	r1, #2
    b36e:	d119      	bne.n	b3a4 <Motherboard::heaterFail(HeaterFailMode)+0x40>
	{
		// if single tool, one heater is not plugged in on purpose
		// do not trigger a heatFail message unless both heaters are unplugged 
		if(!platform_heater.has_failed() && eeprom::isSingleTool() && 
    b370:	f500 7003 	add.w	r0, r0, #524	; 0x20c
    b374:	f005 fba2 	bl	10abc <Heater::has_failed()>
    b378:	b9c8      	cbnz	r0, b3ae <Motherboard::heaterFail(HeaterFailMode)+0x4a>
    b37a:	f7fe fa13 	bl	97a4 <eeprom::isSingleTool()>
    b37e:	b1b0      	cbz	r0, b3ae <Motherboard::heaterFail(HeaterFailMode)+0x4a>
			(!(Extruder_One.getExtruderHeater().has_failed() && Extruder_Two.getExtruderHeater().has_failed())))
    b380:	f104 0050 	add.w	r0, r4, #80	; 0x50
    b384:	f005 fb9a 	bl	10abc <Heater::has_failed()>
    
	if(heatFailMode == HEATER_FAIL_NOT_PLUGGED_IN)
	{
		// if single tool, one heater is not plugged in on purpose
		// do not trigger a heatFail message unless both heaters are unplugged 
		if(!platform_heater.has_failed() && eeprom::isSingleTool() && 
    b388:	b1c0      	cbz	r0, b3bc <Motherboard::heaterFail(HeaterFailMode)+0x58>
			(!(Extruder_One.getExtruderHeater().has_failed() && Extruder_Two.getExtruderHeater().has_failed())))
    b38a:	f504 7098 	add.w	r0, r4, #304	; 0x130
    b38e:	f005 fb95 	bl	10abc <Heater::has_failed()>
    b392:	b198      	cbz	r0, b3bc <Motherboard::heaterFail(HeaterFailMode)+0x58>
    b394:	e00b      	b.n	b3ae <Motherboard::heaterFail(HeaterFailMode)+0x4a>
				return;
        // only fire the heater not connected error once.  The user should be able to dismiss this one
		else if (connectionsErrorTriggered)
			return;
		else
			connectionsErrorTriggered =true;
    b396:	f641 337e 	movw	r3, #7038	; 0x1b7e
    b39a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b39e:	f04f 0201 	mov.w	r2, #1
    b3a2:	701a      	strb	r2, [r3, #0]
	}
    
    // flag heat shutdown response
	heatShutdown = true;
    b3a4:	f04f 0301 	mov.w	r3, #1
    b3a8:	f884 329d 	strb.w	r3, [r4, #669]	; 0x29d
    b3ac:	bd10      	pop	{r4, pc}
		// do not trigger a heatFail message unless both heaters are unplugged 
		if(!platform_heater.has_failed() && eeprom::isSingleTool() && 
			(!(Extruder_One.getExtruderHeater().has_failed() && Extruder_Two.getExtruderHeater().has_failed())))
				return;
        // only fire the heater not connected error once.  The user should be able to dismiss this one
		else if (connectionsErrorTriggered)
    b3ae:	f641 337e 	movw	r3, #7038	; 0x1b7e
    b3b2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b3b6:	781b      	ldrb	r3, [r3, #0]
    b3b8:	2b00      	cmp	r3, #0
    b3ba:	d0ec      	beq.n	b396 <Motherboard::heaterFail(HeaterFailMode)+0x32>
    b3bc:	bd10      	pop	{r4, pc}
    b3be:	bf00      	nop

0000b3c0 <Motherboard::GetErrorStatus()>:
}stagger = STAGGER_INTERFACE;

uint8_t Motherboard::GetErrorStatus(){

	return board_status;
}
    b3c0:	f890 02a1 	ldrb.w	r0, [r0, #673]	; 0x2a1
    b3c4:	4770      	bx	lr
    b3c6:	bf00      	nop

0000b3c8 <Motherboard::resetUserInputTimeout()>:
	

}

// reset user timeout to start from zero
void Motherboard::resetUserInputTimeout(){
    b3c8:	b508      	push	{r3, lr}
	user_input_timeout.start(USER_INPUT_TIMEOUT);
    b3ca:	f100 0014 	add.w	r0, r0, #20
    b3ce:	f44f 4152 	mov.w	r1, #53760	; 0xd200
    b3d2:	f6c6 3149 	movt	r1, #27465	; 0x6b49
    b3d6:	f006 fa21 	bl	1181c <Timeout::start(unsigned long)>
}
    b3da:	bd08      	pop	{r3, pc}

0000b3dc <Motherboard::UpdateMicros()>:
#define MICROS_INTERVAL INTERVAL_IN_MICROSECONDS
//#define MICROS_INTERVAL 128

void Motherboard::UpdateMicros(){
//	xprintf("%x" " (%s:%d)\n",micros,_F_,_L_);
	micros += MICROS_INTERVAL;//_IN_MICROSECONDS;
    b3dc:	6803      	ldr	r3, [r0, #0]
    b3de:	f103 0380 	add.w	r3, r3, #128	; 0x80
    b3e2:	6003      	str	r3, [r0, #0]
}
    b3e4:	4770      	bx	lr
    b3e6:	bf00      	nop

0000b3e8 <TIMER0_IRQHandler>:
volatile uint32_t loop2;
volatile uint32_t loop3;

/// Timer three comparator match interrupt
//ISR(TIMER3_COMPA_vect) {
extern "C" void TIMER0_IRQHandler (void){
    b3e8:	b510      	push	{r4, lr}
    b3ea:	b086      	sub	sp, #24
	DEBUG_LED1.setDirection(true);
    b3ec:	f641 346c 	movw	r4, #7020	; 0x1b6c
    b3f0:	f2c1 0400 	movt	r4, #4096	; 0x1000
    b3f4:	4668      	mov	r0, sp
    b3f6:	4621      	mov	r1, r4
    b3f8:	f04f 0212 	mov.w	r2, #18
    b3fc:	f005 fe6e 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
    b400:	4668      	mov	r0, sp
    b402:	f04f 0101 	mov.w	r1, #1
    b406:	f005 fe89 	bl	1111c <Pin::setDirection(bool) const>
	DEBUG_LED1.setValue(true);
    b40a:	a802      	add	r0, sp, #8
    b40c:	4621      	mov	r1, r4
    b40e:	f04f 0212 	mov.w	r2, #18
    b412:	f005 fe63 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    b416:	f89d 3009 	ldrb.w	r3, [sp, #9]
    b41a:	b94b      	cbnz	r3, b430 <TIMER0_IRQHandler+0x48>
//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    b41c:	f89d 300a 	ldrb.w	r3, [sp, #10]
    b420:	f89d 0008 	ldrb.w	r0, [sp, #8]
    b424:	f04f 0101 	mov.w	r1, #1
    b428:	fa01 f103 	lsl.w	r1, r1, r3
    b42c:	f7f8 f85a 	bl	34e4 <GPIO_SetValue>
//	xprintf("0" " (%s:%d)\n",_F_,_L_);
//	xprintf("TIMER0_IRQHandler" " (%s:%d)\n",_F_,_L_);
	TIM_ClearIntPending(LPC_TIM0, TIM_MR0_INT);
    b430:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    b434:	f04f 0100 	mov.w	r1, #0
    b438:	f7f8 fa44 	bl	38c4 <TIM_ClearIntPending>
	Motherboard::getBoard().doInterrupt();
    b43c:	f641 309c 	movw	r0, #7068	; 0x1b9c
    b440:	f2c1 0000 	movt	r0, #4096	; 0x1000
    b444:	f7ff ff86 	bl	b354 <Motherboard::doInterrupt()>
			loop0=0;
//			led_toggle0 = led_toggle0^1;
//			DEBUG_LED1.setValue(led_toggle0);
		}
	}
	DEBUG_LED1.setValue(false);
    b448:	a804      	add	r0, sp, #16
    b44a:	f641 316c 	movw	r1, #7020	; 0x1b6c
    b44e:	f2c1 0100 	movt	r1, #4096	; 0x1000
    b452:	f04f 0212 	mov.w	r2, #18
    b456:	f005 fe41 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    b45a:	f89d 3011 	ldrb.w	r3, [sp, #17]
    b45e:	b94b      	cbnz	r3, b474 <TIMER0_IRQHandler+0x8c>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    b460:	f89d 3012 	ldrb.w	r3, [sp, #18]
    b464:	f89d 0010 	ldrb.w	r0, [sp, #16]
    b468:	f04f 0101 	mov.w	r1, #1
    b46c:	fa01 f103 	lsl.w	r1, r1, r3
    b470:	f7f8 f840 	bl	34f4 <GPIO_ClearValue>
}
    b474:	b006      	add	sp, #24
    b476:	bd10      	pop	{r4, pc}

0000b478 <Motherboard::indicateError(int)>:
/// state trackers for blinking LEDS
int blink_state = BLINK_NONE;
int interface_blink_state = BLINK_NONE;

/// Write an error code to the debug pin.
void Motherboard::indicateError(int error_code) {
    b478:	b510      	push	{r4, lr}
    b47a:	b084      	sub	sp, #16
	if (error_code == 0) {
    b47c:	460c      	mov	r4, r1
    b47e:	b9f9      	cbnz	r1, b4c0 <Motherboard::indicateError(int)+0x48>
		blink_state = BLINK_NONE;
    b480:	f641 3360 	movw	r3, #7008	; 0x1b60
    b484:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b488:	f04f 0200 	mov.w	r2, #0
    b48c:	601a      	str	r2, [r3, #0]
		DEBUG_PIN.setValue(false);
    b48e:	a803      	add	r0, sp, #12
    b490:	f04f 01ff 	mov.w	r1, #255	; 0xff
    b494:	f005 fc10 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
    b498:	a801      	add	r0, sp, #4
    b49a:	a903      	add	r1, sp, #12
    b49c:	f04f 02ff 	mov.w	r2, #255	; 0xff
    b4a0:	f005 fe1c 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    b4a4:	f89d 3005 	ldrb.w	r3, [sp, #5]
    b4a8:	b9bb      	cbnz	r3, b4da <Motherboard::indicateError(int)+0x62>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    b4aa:	f89d 3006 	ldrb.w	r3, [sp, #6]
    b4ae:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b4b2:	f04f 0101 	mov.w	r1, #1
    b4b6:	fa01 f103 	lsl.w	r1, r1, r3
    b4ba:	f7f8 f81b 	bl	34f4 <GPIO_ClearValue>
    b4be:	e00c      	b.n	b4da <Motherboard::indicateError(int)+0x62>
	}
	else if (blink_count != error_code) {
    b4c0:	f641 6344 	movw	r3, #7748	; 0x1e44
    b4c4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b4c8:	781b      	ldrb	r3, [r3, #0]
    b4ca:	4299      	cmp	r1, r3
		blink_state = BLINK_OFF;
    b4cc:	bf1f      	itttt	ne
    b4ce:	f641 3360 	movwne	r3, #7008	; 0x1b60
    b4d2:	f2c1 0300 	movtne	r3, #4096	; 0x1000
    b4d6:	2202      	movne	r2, #2
    b4d8:	601a      	strne	r2, [r3, #0]
	}
	blink_count = error_code;
    b4da:	b2e4      	uxtb	r4, r4
    b4dc:	f641 6344 	movw	r3, #7748	; 0x1e44
    b4e0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b4e4:	701c      	strb	r4, [r3, #0]
}
    b4e6:	b004      	add	sp, #16
    b4e8:	bd10      	pop	{r4, pc}
    b4ea:	bf00      	nop

0000b4ec <Motherboard::interfaceBlink(int, int)>:

// set on / off period for blinking interface LEDs
// if both times are zero, LEDs are full on, if just on-time is zero, LEDs are full OFF
void Motherboard::interfaceBlink(int on_time, int off_time){
	
	if(off_time == 0){
    b4ec:	4613      	mov	r3, r2
    b4ee:	b92a      	cbnz	r2, b4fc <Motherboard::interfaceBlink(int, int)+0x10>
		interface_blink_state = BLINK_NONE;
    b4f0:	f641 3398 	movw	r3, #7064	; 0x1b98
    b4f4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b4f8:	601a      	str	r2, [r3, #0]
    b4fa:	4770      	bx	lr
//		interface::setLEDs(true);
	}else if(on_time == 0){
    b4fc:	b939      	cbnz	r1, b50e <Motherboard::interfaceBlink(int, int)+0x22>
		interface_blink_state = BLINK_NONE;
    b4fe:	f641 3398 	movw	r3, #7064	; 0x1b98
    b502:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b506:	f04f 0200 	mov.w	r2, #0
    b50a:	601a      	str	r2, [r3, #0]
    b50c:	4770      	bx	lr
//		interface::setLEDs(false);
	} else{
		interface_on_time = on_time;
    b50e:	f641 325c 	movw	r2, #7004	; 0x1b5c
    b512:	f2c1 0200 	movt	r2, #4096	; 0x1000
    b516:	7011      	strb	r1, [r2, #0]
		interface_off_time = off_time;
    b518:	f641 327c 	movw	r2, #7036	; 0x1b7c
    b51c:	f2c1 0200 	movt	r2, #4096	; 0x1000
    b520:	7013      	strb	r3, [r2, #0]
		interface_blink_state = BLINK_ON;
    b522:	f641 3398 	movw	r3, #7064	; 0x1b98
    b526:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b52a:	f04f 0201 	mov.w	r2, #1
    b52e:	601a      	str	r2, [r3, #0]
    b530:	4770      	bx	lr
    b532:	bf00      	nop

0000b534 <Motherboard::startButtonWait()>:
	heatShutdown = true;
}

// Motherboard class waits for a button press from the user
// used for firmware initiated error reporting
void Motherboard::startButtonWait(){
    b534:	b510      	push	{r4, lr}
    b536:	4604      	mov	r4, r0
    // blink the interface LEDs
	interfaceBlink(25,15);
    b538:	f04f 0119 	mov.w	r1, #25
    b53c:	f04f 020f 	mov.w	r2, #15
    b540:	f7ff ffd4 	bl	b4ec <Motherboard::interfaceBlink(int, int)>
    
//	interfaceBoard.waitForButton(0xFF);
	buttonWait = true;
    b544:	f04f 0301 	mov.w	r3, #1
    b548:	f884 329e 	strb.w	r3, [r4, #670]	; 0x29e

}
    b54c:	bd10      	pop	{r4, pc}
    b54e:	bf00      	nop

0000b550 <Motherboard::errorResponse(char*, bool)>:

// set an error message on the interface and wait for user button press
void Motherboard::errorResponse(char msg[], bool reset){
    b550:	b538      	push	{r3, r4, r5, lr}
    b552:	4604      	mov	r4, r0
    b554:	4615      	mov	r5, r2
//	interfaceBoard.errorMessage(msg);
	startButtonWait();
    b556:	f7ff ffed 	bl	b534 <Motherboard::startButtonWait()>
	reset_request = reset;
    b55a:	f884 529f 	strb.w	r5, [r4, #671]	; 0x29f
}
    b55e:	bd38      	pop	{r3, r4, r5, pc}

0000b560 <Motherboard::runMotherboardSlice()>:
}


bool triggered = false;
// main motherboard loop
void Motherboard::runMotherboardSlice() {
    b560:	b570      	push	{r4, r5, r6, lr}
    b562:	4604      	mov	r4, r0
//			interface_update_timeout.start(interfaceBoard.getUpdateRate());
//			stagger = STAGGER_MID;
//		}
//	}
			   
    if(isUsingPlatform()) {
    b564:	f890 3298 	ldrb.w	r3, [r0, #664]	; 0x298
    b568:	b11b      	cbz	r3, b572 <Motherboard::runMotherboardSlice()+0x12>
		// manage heating loops for the HBP
		platform_heater.manage_temperature();
    b56a:	f500 7003 	add.w	r0, r0, #524	; 0x20c
    b56e:	f005 f9bd 	bl	108ec <Heater::manage_temperature()>
		
//	}
	
	// if no user input for USER_INPUT_TIMEOUT, shutdown heaters and warn user
    // don't do this if a heat failure has occured ( in this case heaters are already shutdown and separate error messaging used)
    if(user_input_timeout.hasElapsed() && !heatShutdown && (host::getHostState() != host::HOST_STATE_BUILDING_FROM_SD) && (host::getHostState() != host::HOST_STATE_BUILDING)){
    b572:	f104 0514 	add.w	r5, r4, #20
    b576:	4628      	mov	r0, r5
    b578:	f006 f964 	bl	11844 <Timeout::hasElapsed()>
    b57c:	2800      	cmp	r0, #0
    b57e:	d044      	beq.n	b60a <Motherboard::runMotherboardSlice()+0xaa>
    b580:	f894 329d 	ldrb.w	r3, [r4, #669]	; 0x29d
    b584:	2b00      	cmp	r3, #0
    b586:	d140      	bne.n	b60a <Motherboard::runMotherboardSlice()+0xaa>
    b588:	f7fe fca6 	bl	9ed8 <host::getHostState()>
    b58c:	2802      	cmp	r0, #2
    b58e:	d03c      	beq.n	b60a <Motherboard::runMotherboardSlice()+0xaa>
    b590:	f7fe fca2 	bl	9ed8 <host::getHostState()>
    b594:	2801      	cmp	r0, #1
    b596:	d038      	beq.n	b60a <Motherboard::runMotherboardSlice()+0xaa>
        // clear timeout
		user_input_timeout.clear();
    b598:	4628      	mov	r0, r5
    b59a:	f006 f971 	bl	11880 <Timeout::clear()>
		
		board_status |= STATUS_HEAT_INACTIVE_SHUTDOWN;
    b59e:	f894 32a1 	ldrb.w	r3, [r4, #673]	; 0x2a1
    b5a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b5a6:	f884 32a1 	strb.w	r3, [r4, #673]	; 0x2a1
		
		// alert user if heaters are not already set to 0
		if((Extruder_One.getExtruderHeater().get_set_temperature() > 0) ||
    b5aa:	f104 0550 	add.w	r5, r4, #80	; 0x50
    b5ae:	4628      	mov	r0, r5
    b5b0:	f005 f908 	bl	107c4 <Heater::get_set_temperature()>
    b5b4:	2800      	cmp	r0, #0
    b5b6:	dc0b      	bgt.n	b5d0 <Motherboard::runMotherboardSlice()+0x70>
			(Extruder_Two.getExtruderHeater().get_set_temperature() > 0) ||
    b5b8:	f504 7098 	add.w	r0, r4, #304	; 0x130
    b5bc:	f005 f902 	bl	107c4 <Heater::get_set_temperature()>
		user_input_timeout.clear();
		
		board_status |= STATUS_HEAT_INACTIVE_SHUTDOWN;
		
		// alert user if heaters are not already set to 0
		if((Extruder_One.getExtruderHeater().get_set_temperature() > 0) ||
    b5c0:	2800      	cmp	r0, #0
    b5c2:	dc05      	bgt.n	b5d0 <Motherboard::runMotherboardSlice()+0x70>
			(Extruder_Two.getExtruderHeater().get_set_temperature() > 0) ||
			(platform_heater.get_set_temperature() > 0)){
    b5c4:	f504 7003 	add.w	r0, r4, #524	; 0x20c
    b5c8:	f005 f8fc 	bl	107c4 <Heater::get_set_temperature()>
		user_input_timeout.clear();
		
		board_status |= STATUS_HEAT_INACTIVE_SHUTDOWN;
		
		// alert user if heaters are not already set to 0
		if((Extruder_One.getExtruderHeater().get_set_temperature() > 0) ||
    b5cc:	2800      	cmp	r0, #0
    b5ce:	dd0b      	ble.n	b5e8 <Motherboard::runMotherboardSlice()+0x88>
			(Extruder_Two.getExtruderHeater().get_set_temperature() > 0) ||
			(platform_heater.get_set_temperature() > 0)){
//				interfaceBoard.errorMessage(HEATER_INACTIVITY_MSG);//37
				startButtonWait();
    b5d0:	4620      	mov	r0, r4
    b5d2:	f7ff ffaf 	bl	b534 <Motherboard::startButtonWait()>
                // turn LEDs blue
				RGB_LED::setColor(0,0,255, true);
    b5d6:	f04f 0000 	mov.w	r0, #0
    b5da:	4601      	mov	r1, r0
    b5dc:	f04f 02ff 	mov.w	r2, #255	; 0xff
    b5e0:	f04f 0301 	mov.w	r3, #1
    b5e4:	f002 f8ca 	bl	d77c <RGB_LED::setColor(unsigned char, unsigned char, unsigned char, bool)>
		}
        // set tempertures to 0
		Extruder_One.getExtruderHeater().set_target_temperature(0);
    b5e8:	4628      	mov	r0, r5
    b5ea:	f04f 0100 	mov.w	r1, #0
    b5ee:	f005 f86f 	bl	106d0 <Heater::set_target_temperature(int)>
		Extruder_Two.getExtruderHeater().set_target_temperature(0);
    b5f2:	f504 7098 	add.w	r0, r4, #304	; 0x130
    b5f6:	f04f 0100 	mov.w	r1, #0
    b5fa:	f005 f869 	bl	106d0 <Heater::set_target_temperature(int)>
		platform_heater.set_target_temperature(0);
    b5fe:	f504 7003 	add.w	r0, r4, #524	; 0x20c
    b602:	f04f 0100 	mov.w	r1, #0
    b606:	f005 f863 	bl	106d0 <Heater::set_target_temperature(int)>
	}
	
    // respond to heatshutdown.  response only needs to be called once
	if(heatShutdown && !triggered && !Piezo::isPlaying())
    b60a:	f894 329d 	ldrb.w	r3, [r4, #669]	; 0x29d
    b60e:	2b00      	cmp	r3, #0
    b610:	d048      	beq.n	b6a4 <Motherboard::runMotherboardSlice()+0x144>
    b612:	f641 338c 	movw	r3, #7052	; 0x1b8c
    b616:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b61a:	781b      	ldrb	r3, [r3, #0]
    b61c:	2b00      	cmp	r3, #0
    b61e:	d141      	bne.n	b6a4 <Motherboard::runMotherboardSlice()+0x144>
    b620:	f000 fc08 	bl	be34 <Piezo::isPlaying()>
    b624:	2800      	cmp	r0, #0
    b626:	d13d      	bne.n	b6a4 <Motherboard::runMotherboardSlice()+0x144>
	{
        triggered = true;
    b628:	f641 338c 	movw	r3, #7052	; 0x1b8c
    b62c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b630:	f04f 0201 	mov.w	r2, #1
    b634:	701a      	strb	r2, [r3, #0]
		// rgb led response
		interfaceBlink(10,10);
    b636:	4620      	mov	r0, r4
    b638:	f04f 010a 	mov.w	r1, #10
    b63c:	460a      	mov	r2, r1
    b63e:	f7ff ff55 	bl	b4ec <Motherboard::interfaceBlink(int, int)>
        // set all heater temperatures to zero
        Extruder_One.getExtruderHeater().set_target_temperature(0);
    b642:	f104 0050 	add.w	r0, r4, #80	; 0x50
    b646:	f04f 0100 	mov.w	r1, #0
    b64a:	f005 f841 	bl	106d0 <Heater::set_target_temperature(int)>
		Extruder_Two.getExtruderHeater().set_target_temperature(0);
    b64e:	f504 7098 	add.w	r0, r4, #304	; 0x130
    b652:	f04f 0100 	mov.w	r1, #0
    b656:	f005 f83b 	bl	106d0 <Heater::set_target_temperature(int)>
		platform_heater.set_target_temperature(0);
    b65a:	f504 7003 	add.w	r0, r4, #524	; 0x20c
    b65e:	f04f 0100 	mov.w	r1, #0
    b662:	f005 f835 	bl	106d0 <Heater::set_target_temperature(int)>
		/// error message
		switch (heatFailMode){
    b666:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
    b66a:	2b02      	cmp	r3, #2
    b66c:	d107      	bne.n	b67e <Motherboard::runMotherboardSlice()+0x11e>
			case HEATER_FAIL_DROPPING_TEMP:
//				interfaceBoard.errorMessage(HEATER_FAIL_DROPPING_TEMP_MSG);//,79);
				break;
			case HEATER_FAIL_NOT_PLUGGED_IN:
//				interfaceBoard.errorMessage(HEATER_FAIL_NOT_PLUGGED_IN_MSG);//,79);
                startButtonWait();
    b66e:	4620      	mov	r0, r4
    b670:	f7ff ff60 	bl	b534 <Motherboard::startButtonWait()>
                heatShutdown = false;
    b674:	f04f 0300 	mov.w	r3, #0
    b678:	f884 329d 	strb.w	r3, [r4, #669]	; 0x29d
                return;
    b67c:	bd70      	pop	{r4, r5, r6, pc}
		}
        // blink LEDS red
		RGB_LED::errorSequence();
    b67e:	f002 f869 	bl	d754 <RGB_LED::errorSequence()>
		// disable command processing and steppers
		host::heatShutdown();
    b682:	f7fe fb9b 	bl	9dbc <host::heatShutdown()>
		command::heatShutdown();
    b686:	f7fc fbc7 	bl	7e18 <command::heatShutdown()>
		planner::abort();
    b68a:	f001 fcbd 	bl	d008 <planner::abort()>
        for(int i = 0; i < STEPPER_COUNT; i++)
    b68e:	f04f 0500 	mov.w	r5, #0
			steppers::enableAxis(i, false);
    b692:	462e      	mov	r6, r5
    b694:	b2e8      	uxtb	r0, r5
    b696:	4631      	mov	r1, r6
    b698:	f003 fe60 	bl	f35c <steppers::enableAxis(unsigned char, bool)>
		RGB_LED::errorSequence();
		// disable command processing and steppers
		host::heatShutdown();
		command::heatShutdown();
		planner::abort();
        for(int i = 0; i < STEPPER_COUNT; i++)
    b69c:	f105 0501 	add.w	r5, r5, #1
    b6a0:	2d04      	cmp	r5, #4
    b6a2:	d1f7      	bne.n	b694 <Motherboard::runMotherboardSlice()+0x134>
			steppers::enableAxis(i, false);
	}
		       
	// Temperature monitoring thread
	// stagger mid accounts for the case when we've just run the interface update
	if(stagger == STAGGER_MID){
    b6a4:	f641 337d 	movw	r3, #7037	; 0x1b7d
    b6a8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b6ac:	781b      	ldrb	r3, [r3, #0]
    b6ae:	2b01      	cmp	r3, #1
    b6b0:	d107      	bne.n	b6c2 <Motherboard::runMotherboardSlice()+0x162>
		stagger = STAGGER_EX1;
    b6b2:	f641 337d 	movw	r3, #7037	; 0x1b7d
    b6b6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b6ba:	f04f 0203 	mov.w	r2, #3
    b6be:	701a      	strb	r2, [r3, #0]
    b6c0:	bd70      	pop	{r4, r5, r6, pc}
	}else if(stagger == STAGGER_EX1){
    b6c2:	2b03      	cmp	r3, #3
    b6c4:	d10b      	bne.n	b6de <Motherboard::runMotherboardSlice()+0x17e>
		Extruder_One.runExtruderSlice();
    b6c6:	f104 0028 	add.w	r0, r4, #40	; 0x28
    b6ca:	f7fe f9cd 	bl	9a68 <ExtruderBoard::runExtruderSlice()>
		stagger = STAGGER_EX2;
    b6ce:	f641 337d 	movw	r3, #7037	; 0x1b7d
    b6d2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b6d6:	f04f 0202 	mov.w	r2, #2
    b6da:	701a      	strb	r2, [r3, #0]
    b6dc:	bd70      	pop	{r4, r5, r6, pc}
	}else if (stagger == STAGGER_EX2){
    b6de:	2b02      	cmp	r3, #2
    b6e0:	d10a      	bne.n	b6f8 <Motherboard::runMotherboardSlice()+0x198>
		Extruder_Two.runExtruderSlice();
    b6e2:	f504 7084 	add.w	r0, r4, #264	; 0x108
    b6e6:	f7fe f9bf 	bl	9a68 <ExtruderBoard::runExtruderSlice()>
		stagger = STAGGER_INTERFACE;
    b6ea:	f641 337d 	movw	r3, #7037	; 0x1b7d
    b6ee:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b6f2:	f04f 0200 	mov.w	r2, #0
    b6f6:	701a      	strb	r2, [r3, #0]
    b6f8:	bd70      	pop	{r4, r5, r6, pc}
    b6fa:	bf00      	nop

0000b6fc <Motherboard::reset(bool)>:
//	TIMSK4 = 0b00000000; // no interrupts needed
}
/// Reset the motherboard to its initial state.
/// This only resets the board, and does not send a reset
/// to any attached toolheads.
void Motherboard::reset(bool hard_reset) {
    b6fc:	b570      	push	{r4, r5, r6, lr}
    b6fe:	b0a4      	sub	sp, #144	; 0x90
    b700:	4604      	mov	r4, r0
    b702:	460e      	mov	r6, r1
	indicateError(0); // turn on blinker
    b704:	f04f 0100 	mov.w	r1, #0
    b708:	f7ff feb6 	bl	b478 <Motherboard::indicateError(int)>

	// Init steppers
	uint8_t axis_invert = eeprom::getEeprom8(eeprom_offsets::AXIS_INVERSION, 0);
    b70c:	f04f 0002 	mov.w	r0, #2
    b710:	f04f 0100 	mov.w	r1, #0
    b714:	f004 fe5e 	bl	103d4 <eeprom::getEeprom8(unsigned short, unsigned char)>
    b718:	4605      	mov	r5, r0
    SoftI2cManager::getI2cManager().init();
    b71a:	f242 506c 	movw	r0, #9580	; 0x256c
    b71e:	f2c1 0000 	movt	r0, #4096	; 0x1000
    b722:	f002 fdd1 	bl	e2c8 <SoftI2cManager::init()>
	// coil to ensure that the Z stage does not shift.
	// Bit 7 of the AXIS_INVERSION eeprom setting
	// indicates whether or not to use z holding; 
	// the bit is active low. (0 means use z holding,
	// 1 means turn it off.)
	bool hold_z = (axis_invert & (1<<7)) == 0;
    b726:	ea6f 0005 	mvn.w	r0, r5
	steppers::setHoldZ(hold_z);
    b72a:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    b72e:	f003 f95f 	bl	e9f0 <steppers::setHoldZ(bool)>
    b732:	f641 2314 	movw	r3, #6676	; 0x1a14
    b736:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b73a:	681b      	ldr	r3, [r3, #0]
    b73c:	f013 0f01 	tst.w	r3, #1
    b740:	d115      	bne.n	b76e <Motherboard::reset(bool)+0x72>
    b742:	f641 2014 	movw	r0, #6676	; 0x1a14
    b746:	f2c1 0000 	movt	r0, #4096	; 0x1000
    b74a:	f008 f9b9 	bl	13ac0 <__cxa_guard_acquire>
    b74e:	b170      	cbz	r0, b76e <Motherboard::reset(bool)+0x72>
    b750:	f641 2018 	movw	r0, #6680	; 0x1a18
    b754:	f2c1 0000 	movt	r0, #4096	; 0x1000
    b758:	f04f 0100 	mov.w	r1, #0
    b75c:	460a      	mov	r2, r1
    b75e:	f006 f963 	bl	11a28 <UART::UART(unsigned char, communication_mode)>
    b762:	f641 2014 	movw	r0, #6676	; 0x1a14
    b766:	f2c1 0000 	movt	r0, #4096	; 0x1000
    b76a:	f008 f9c7 	bl	13afc <__cxa_guard_release>

	// Initialize the host and slave UARTs
	UART::getHostUART().enable(true);
    b76e:	f641 2018 	movw	r0, #6680	; 0x1a18
    b772:	f2c1 0000 	movt	r0, #4096	; 0x1000
    b776:	f04f 0101 	mov.w	r1, #1
    b77a:	f006 fa51 	bl	11c20 <UART::enable(bool)>
    b77e:	f641 2314 	movw	r3, #6676	; 0x1a14
    b782:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b786:	681b      	ldr	r3, [r3, #0]
    b788:	f013 0f01 	tst.w	r3, #1
    b78c:	d115      	bne.n	b7ba <Motherboard::reset(bool)+0xbe>
    b78e:	f641 2014 	movw	r0, #6676	; 0x1a14
    b792:	f2c1 0000 	movt	r0, #4096	; 0x1000
    b796:	f008 f993 	bl	13ac0 <__cxa_guard_acquire>
    b79a:	b170      	cbz	r0, b7ba <Motherboard::reset(bool)+0xbe>
    b79c:	f641 2018 	movw	r0, #6680	; 0x1a18
    b7a0:	f2c1 0000 	movt	r0, #4096	; 0x1000
    b7a4:	f04f 0100 	mov.w	r1, #0
    b7a8:	460a      	mov	r2, r1
    b7aa:	f006 f93d 	bl	11a28 <UART::UART(unsigned char, communication_mode)>
    b7ae:	f641 2014 	movw	r0, #6676	; 0x1a14
    b7b2:	f2c1 0000 	movt	r0, #4096	; 0x1000
    b7b6:	f008 f9a1 	bl	13afc <__cxa_guard_release>
	UART::getHostUART().in.reset();
    b7ba:	4886      	ldr	r0, [pc, #536]	; (b9d4 <Motherboard::reset(bool)+0x2d8>)
    b7bc:	f005 fb1c 	bl	10df8 <InPacket::reset()>
	
	micros = 0;
    b7c0:	f04f 0500 	mov.w	r5, #0
    b7c4:	6025      	str	r5, [r4, #0]
	
	initClocks();
    b7c6:	4620      	mov	r0, r4
    b7c8:	f7ff fd40 	bl	b24c <Motherboard::initClocks()>
    }*/
    
    
    
    // interface LEDs default to full ON
    interfaceBlink(0,0);
    b7cc:	4620      	mov	r0, r4
    b7ce:	4629      	mov	r1, r5
    b7d0:	462a      	mov	r2, r5
    b7d2:	f7ff fe8b 	bl	b4ec <Motherboard::interfaceBlink(int, int)>
    
    // only call the piezo buzzer on full reboot start up
    // do not clear heater fail messages, though the user should not be able to soft reboot from heater fail
    if(hard_reset)
    b7d6:	2e00      	cmp	r6, #0
    b7d8:	f000 80c2 	beq.w	b960 <Motherboard::reset(bool)+0x264>
	{
		// Configure the debug pins.
		DEBUG_LED1.setDirection(true);
    b7dc:	f641 356c 	movw	r5, #7020	; 0x1b6c
    b7e0:	f2c1 0500 	movt	r5, #4096	; 0x1000
    b7e4:	a801      	add	r0, sp, #4
    b7e6:	4629      	mov	r1, r5
    b7e8:	f04f 0212 	mov.w	r2, #18
    b7ec:	f005 fc76 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
    b7f0:	a801      	add	r0, sp, #4
    b7f2:	f04f 0101 	mov.w	r1, #1
    b7f6:	f005 fc91 	bl	1111c <Pin::setDirection(bool) const>
		DEBUG_LED2.setDirection(true);
    b7fa:	a803      	add	r0, sp, #12
    b7fc:	4629      	mov	r1, r5
    b7fe:	f04f 0214 	mov.w	r2, #20
    b802:	f005 fc6b 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
    b806:	a803      	add	r0, sp, #12
    b808:	f04f 0101 	mov.w	r1, #1
    b80c:	f005 fc86 	bl	1111c <Pin::setDirection(bool) const>
		DEBUG_LED3.setDirection(true);
    b810:	a805      	add	r0, sp, #20
    b812:	4629      	mov	r1, r5
    b814:	f04f 0215 	mov.w	r2, #21
    b818:	f005 fc60 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
    b81c:	a805      	add	r0, sp, #20
    b81e:	f04f 0101 	mov.w	r1, #1
    b822:	f005 fc7b 	bl	1111c <Pin::setDirection(bool) const>
		DEBUG_LED4.setDirection(true);
    b826:	a807      	add	r0, sp, #28
    b828:	4629      	mov	r1, r5
    b82a:	f04f 0217 	mov.w	r2, #23
    b82e:	f005 fc55 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
    b832:	a807      	add	r0, sp, #28
    b834:	f04f 0101 	mov.w	r1, #1
    b838:	f005 fc70 	bl	1111c <Pin::setDirection(bool) const>
		DEBUG_PIN.setDirection(true);
    b83c:	a80b      	add	r0, sp, #44	; 0x2c
    b83e:	f04f 01ff 	mov.w	r1, #255	; 0xff
    b842:	f005 fa39 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
    b846:	a809      	add	r0, sp, #36	; 0x24
    b848:	a90b      	add	r1, sp, #44	; 0x2c
    b84a:	f04f 02ff 	mov.w	r2, #255	; 0xff
    b84e:	f005 fc45 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
    b852:	a809      	add	r0, sp, #36	; 0x24
    b854:	f04f 0101 	mov.w	r1, #1
    b858:	f005 fc60 	bl	1111c <Pin::setDirection(bool) const>
		DEBUG_PIN1.setDirection(true);
    b85c:	a80e      	add	r0, sp, #56	; 0x38
    b85e:	f04f 01ff 	mov.w	r1, #255	; 0xff
    b862:	f005 fa29 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
    b866:	a80c      	add	r0, sp, #48	; 0x30
    b868:	a90e      	add	r1, sp, #56	; 0x38
    b86a:	f04f 02ff 	mov.w	r2, #255	; 0xff
    b86e:	f005 fc35 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
    b872:	a80c      	add	r0, sp, #48	; 0x30
    b874:	f04f 0101 	mov.w	r1, #1
    b878:	f005 fc50 	bl	1111c <Pin::setDirection(bool) const>
		DEBUG_PIN2.setDirection(true);
    b87c:	a811      	add	r0, sp, #68	; 0x44
    b87e:	f04f 01ff 	mov.w	r1, #255	; 0xff
    b882:	f005 fa19 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
    b886:	a80f      	add	r0, sp, #60	; 0x3c
    b888:	a911      	add	r1, sp, #68	; 0x44
    b88a:	f04f 02ff 	mov.w	r2, #255	; 0xff
    b88e:	f005 fc25 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
    b892:	a80f      	add	r0, sp, #60	; 0x3c
    b894:	f04f 0101 	mov.w	r1, #1
    b898:	f005 fc40 	bl	1111c <Pin::setDirection(bool) const>
		DEBUG_PIN3.setDirection(true);	
    b89c:	a814      	add	r0, sp, #80	; 0x50
    b89e:	f04f 01ff 	mov.w	r1, #255	; 0xff
    b8a2:	f005 fa09 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
    b8a6:	a812      	add	r0, sp, #72	; 0x48
    b8a8:	a914      	add	r1, sp, #80	; 0x50
    b8aa:	f04f 02ff 	mov.w	r2, #255	; 0xff
    b8ae:	f005 fc15 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
    b8b2:	a812      	add	r0, sp, #72	; 0x48
    b8b4:	f04f 0101 	mov.w	r1, #1
    b8b8:	f005 fc30 	bl	1111c <Pin::setDirection(bool) const>
		DEBUG_PIN4.setDirection(true);
    b8bc:	a817      	add	r0, sp, #92	; 0x5c
    b8be:	f04f 01ff 	mov.w	r1, #255	; 0xff
    b8c2:	f005 f9f9 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
    b8c6:	a815      	add	r0, sp, #84	; 0x54
    b8c8:	a917      	add	r1, sp, #92	; 0x5c
    b8ca:	f04f 02ff 	mov.w	r2, #255	; 0xff
    b8ce:	f005 fc05 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
    b8d2:	a815      	add	r0, sp, #84	; 0x54
    b8d4:	f04f 0101 	mov.w	r1, #1
    b8d8:	f005 fc20 	bl	1111c <Pin::setDirection(bool) const>
		DEBUG_PIN5.setDirection(true);
    b8dc:	a81a      	add	r0, sp, #104	; 0x68
    b8de:	f04f 01ff 	mov.w	r1, #255	; 0xff
    b8e2:	f005 f9e9 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
    b8e6:	a818      	add	r0, sp, #96	; 0x60
    b8e8:	a91a      	add	r1, sp, #104	; 0x68
    b8ea:	f04f 02ff 	mov.w	r2, #255	; 0xff
    b8ee:	f005 fbf5 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
    b8f2:	a818      	add	r0, sp, #96	; 0x60
    b8f4:	f04f 0101 	mov.w	r1, #1
    b8f8:	f005 fc10 	bl	1111c <Pin::setDirection(bool) const>
		DEBUG_PIN6.setDirection(true);
    b8fc:	a81d      	add	r0, sp, #116	; 0x74
    b8fe:	f04f 01ff 	mov.w	r1, #255	; 0xff
    b902:	f005 f9d9 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
    b906:	a81b      	add	r0, sp, #108	; 0x6c
    b908:	a91d      	add	r1, sp, #116	; 0x74
    b90a:	f04f 02ff 	mov.w	r2, #255	; 0xff
    b90e:	f005 fbe5 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
    b912:	a81b      	add	r0, sp, #108	; 0x6c
    b914:	f04f 0101 	mov.w	r1, #1
    b918:	f005 fc00 	bl	1111c <Pin::setDirection(bool) const>
		DEBUG_PIN7.setDirection(true);
    b91c:	a820      	add	r0, sp, #128	; 0x80
    b91e:	f04f 01ff 	mov.w	r1, #255	; 0xff
    b922:	f005 f9c9 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
    b926:	a81e      	add	r0, sp, #120	; 0x78
    b928:	a920      	add	r1, sp, #128	; 0x80
    b92a:	f04f 02ff 	mov.w	r2, #255	; 0xff
    b92e:	f005 fbd5 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
    b932:	a81e      	add	r0, sp, #120	; 0x78
    b934:	f04f 0101 	mov.w	r1, #1
    b938:	f005 fbf0 	bl	1111c <Pin::setDirection(bool) const>
		
		RGB_LED::init();
    b93c:	f002 f90a 	bl	db54 <RGB_LED::init()>
		
		Piezo::startUpTone();
    b940:	f000 fb94 	bl	c06c <Piezo::startUpTone()>
		
		heatShutdown = false;
    b944:	f04f 0500 	mov.w	r5, #0
    b948:	f884 529d 	strb.w	r5, [r4, #669]	; 0x29d
		heatFailMode = HEATER_FAIL_NONE;
    b94c:	f884 52a0 	strb.w	r5, [r4, #672]	; 0x2a0
		cutoff.init();
    b950:	f504 7026 	add.w	r0, r4, #664	; 0x298
    b954:	f100 0001 	add.w	r0, r0, #1
    b958:	f7fd fbf6 	bl	9148 <Cutoff::init()>
		
		board_status = STATUS_NONE;
    b95c:	f884 52a1 	strb.w	r5, [r4, #673]	; 0x2a1
   }
    
     // initialize the extruders
    Extruder_One.reset();
    b960:	f104 0028 	add.w	r0, r4, #40	; 0x28
    b964:	f7fe f85e 	bl	9a24 <ExtruderBoard::reset()>
    Extruder_Two.reset();
    b968:	f504 7084 	add.w	r0, r4, #264	; 0x108
    b96c:	f7fe f85a 	bl	9a24 <ExtruderBoard::reset()>
    
    HBP_HEAT.setDirection(true);
    b970:	a823      	add	r0, sp, #140	; 0x8c
    b972:	f04f 01ff 	mov.w	r1, #255	; 0xff
    b976:	f005 f99f 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
    b97a:	a821      	add	r0, sp, #132	; 0x84
    b97c:	a923      	add	r1, sp, #140	; 0x8c
    b97e:	f04f 02ff 	mov.w	r2, #255	; 0xff
    b982:	f005 fbab 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
    b986:	a821      	add	r0, sp, #132	; 0x84
    b988:	f04f 0101 	mov.w	r1, #1
    b98c:	f005 fbc6 	bl	1111c <Pin::setDirection(bool) const>
	platform_thermistor.init();
    b990:	f504 70f4 	add.w	r0, r4, #488	; 0x1e8
    b994:	f005 fc6c 	bl	11270 <Thermistor::init()>
	platform_heater.reset();
    b998:	f504 7503 	add.w	r5, r4, #524	; 0x20c
    b99c:	4628      	mov	r0, r5
    b99e:	f004 fded 	bl	1057c <Heater::reset()>
    
    Extruder_One.getExtruderHeater().set_target_temperature(0);
    b9a2:	f104 0050 	add.w	r0, r4, #80	; 0x50
    b9a6:	f04f 0100 	mov.w	r1, #0
    b9aa:	f004 fe91 	bl	106d0 <Heater::set_target_temperature(int)>
	Extruder_Two.getExtruderHeater().set_target_temperature(0);
    b9ae:	f504 7098 	add.w	r0, r4, #304	; 0x130
    b9b2:	f04f 0100 	mov.w	r1, #0
    b9b6:	f004 fe8b 	bl	106d0 <Heater::set_target_temperature(int)>
	platform_heater.set_target_temperature(0);	
    b9ba:	4628      	mov	r0, r5
    b9bc:	f04f 0100 	mov.w	r1, #0
    b9c0:	f004 fe86 	bl	106d0 <Heater::set_target_temperature(int)>
	
	RGB_LED::setDefaultColor(); 
    b9c4:	f001 fffc 	bl	d9c0 <RGB_LED::setDefaultColor()>
	buttonWait = false;
    b9c8:	f04f 0300 	mov.w	r3, #0
    b9cc:	f884 329e 	strb.w	r3, [r4, #670]	; 0x29e
//	DEBUG_LED1.setDirection(true);
//	DEBUG_LED2.setDirection(false);
//	DEBUG_LED3.setDirection(true);
//	DEBUG_LED4.setDirection(false);

}
    b9d0:	b024      	add	sp, #144	; 0x90
    b9d2:	bd70      	pop	{r4, r5, r6, pc}
    b9d4:	10001a1b 	.word	0x10001a1b

0000b9d8 <Motherboard::getCurrentError()>:

}

/// Get the current error code.
uint8_t Motherboard::getCurrentError() {
	return blink_count;
    b9d8:	f641 6344 	movw	r3, #7748	; 0x1e44
    b9dc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    b9e0:	7818      	ldrb	r0, [r3, #0]
}
    b9e2:	4770      	bx	lr

0000b9e4 <TIMER2_IRQHandler>:
uint16_t blink_overflow_counter = 0;

/// Timer 2 overflow interrupt

//ISR(TIMER2_COMPA_vect) {
extern "C" void TIMER2_IRQHandler (void){
    b9e4:	b510      	push	{r4, lr}
    b9e6:	b090      	sub	sp, #64	; 0x40
	DEBUG_LED2.setDirection(true);
    b9e8:	f641 346c 	movw	r4, #7020	; 0x1b6c
    b9ec:	f2c1 0400 	movt	r4, #4096	; 0x1000
    b9f0:	a801      	add	r0, sp, #4
    b9f2:	4621      	mov	r1, r4
    b9f4:	f04f 0214 	mov.w	r2, #20
    b9f8:	f005 fb70 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
    b9fc:	a801      	add	r0, sp, #4
    b9fe:	f04f 0101 	mov.w	r1, #1
    ba02:	f005 fb8b 	bl	1111c <Pin::setDirection(bool) const>
	DEBUG_LED2.setValue(true);
    ba06:	a803      	add	r0, sp, #12
    ba08:	4621      	mov	r1, r4
    ba0a:	f04f 0214 	mov.w	r2, #20
    ba0e:	f005 fb65 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    ba12:	f89d 300d 	ldrb.w	r3, [sp, #13]
    ba16:	b94b      	cbnz	r3, ba2c <TIMER2_IRQHandler+0x48>
//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    ba18:	f89d 300e 	ldrb.w	r3, [sp, #14]
    ba1c:	f89d 000c 	ldrb.w	r0, [sp, #12]
    ba20:	f04f 0101 	mov.w	r1, #1
    ba24:	fa01 f103 	lsl.w	r1, r1, r3
    ba28:	f7f7 fd5c 	bl	34e4 <GPIO_SetValue>
//	xprintf("2" " (%s:%d)\n",_F_,_L_);
//	xprintf("TIMER2_IRQHandler" " (%s:%d)\n",_F_,_L_);
	TIM_ClearIntPending(LPC_TIM2,TIM_MR0_INT);
    ba2c:	f04f 0000 	mov.w	r0, #0
    ba30:	f2c4 0009 	movt	r0, #16393	; 0x4009
    ba34:	f04f 0100 	mov.w	r1, #0
    ba38:	f7f7 ff44 	bl	38c4 <TIM_ClearIntPending>
	
	Motherboard::getBoard().UpdateMicros();
    ba3c:	f641 309c 	movw	r0, #7068	; 0x1b9c
    ba40:	f2c1 0000 	movt	r0, #4096	; 0x1000
    ba44:	f7ff fcca 	bl	b3dc <Motherboard::UpdateMicros()>
	DEBUG_LED2.setValue(false);
    ba48:	a805      	add	r0, sp, #20
    ba4a:	f641 316c 	movw	r1, #7020	; 0x1b6c
    ba4e:	f2c1 0100 	movt	r1, #4096	; 0x1000
    ba52:	f04f 0214 	mov.w	r2, #20
    ba56:	f005 fb41 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    ba5a:	f89d 3015 	ldrb.w	r3, [sp, #21]
    ba5e:	b94b      	cbnz	r3, ba74 <TIMER2_IRQHandler+0x90>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    ba60:	f89d 3016 	ldrb.w	r3, [sp, #22]
    ba64:	f89d 0014 	ldrb.w	r0, [sp, #20]
    ba68:	f04f 0101 	mov.w	r1, #1
    ba6c:	fa01 f103 	lsl.w	r1, r1, r3
    ba70:	f7f7 fd40 	bl	34f4 <GPIO_ClearValue>
	
	if(blink_overflow_counter++ <= 0x080)
    ba74:	f641 3364 	movw	r3, #7012	; 0x1b64
    ba78:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ba7c:	881a      	ldrh	r2, [r3, #0]
    ba7e:	f102 0101 	add.w	r1, r2, #1
    ba82:	8019      	strh	r1, [r3, #0]
    ba84:	2a80      	cmp	r2, #128	; 0x80
    ba86:	f240 80fc 	bls.w	bc82 <TIMER2_IRQHandler+0x29e>
			return;
	
	blink_overflow_counter = 0;
    ba8a:	f641 3364 	movw	r3, #7012	; 0x1b64
    ba8e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ba92:	f04f 0200 	mov.w	r2, #0
    ba96:	801a      	strh	r2, [r3, #0]
			
	/// Debug LEDS on Motherboard
	if (blink_ovfs_remaining > 0) {
    ba98:	f641 3394 	movw	r3, #7060	; 0x1b94
    ba9c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    baa0:	681a      	ldr	r2, [r3, #0]
    baa2:	2a00      	cmp	r2, #0
    baa4:	dd07      	ble.n	bab6 <TIMER2_IRQHandler+0xd2>
		blink_ovfs_remaining--;
    baa6:	f641 3394 	movw	r3, #7060	; 0x1b94
    baaa:	f2c1 0300 	movt	r3, #4096	; 0x1000
    baae:	f102 32ff 	add.w	r2, r2, #4294967295
    bab2:	601a      	str	r2, [r3, #0]
    bab4:	e0aa      	b.n	bc0c <TIMER2_IRQHandler+0x228>
	} else {
		if (blink_state == BLINK_ON) {
    bab6:	f641 3360 	movw	r3, #7008	; 0x1b60
    baba:	f2c1 0300 	movt	r3, #4096	; 0x1000
    babe:	681b      	ldr	r3, [r3, #0]
    bac0:	2b01      	cmp	r3, #1
    bac2:	d12f      	bne.n	bb24 <TIMER2_IRQHandler+0x140>
			blinked_so_far++;
    bac4:	f641 6340 	movw	r3, #7744	; 0x1e40
    bac8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bacc:	681a      	ldr	r2, [r3, #0]
    bace:	f102 0201 	add.w	r2, r2, #1
    bad2:	601a      	str	r2, [r3, #0]
			blink_state = BLINK_OFF;
    bad4:	f641 3360 	movw	r3, #7008	; 0x1b60
    bad8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    badc:	f04f 0202 	mov.w	r2, #2
    bae0:	601a      	str	r2, [r3, #0]
			blink_ovfs_remaining = OVFS_OFF;
    bae2:	f641 3394 	movw	r3, #7060	; 0x1b94
    bae6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    baea:	f04f 0212 	mov.w	r2, #18
    baee:	601a      	str	r2, [r3, #0]
			DEBUG_PIN.setValue(false);
    baf0:	a809      	add	r0, sp, #36	; 0x24
    baf2:	f04f 01ff 	mov.w	r1, #255	; 0xff
    baf6:	f005 f8df 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
    bafa:	a807      	add	r0, sp, #28
    bafc:	a909      	add	r1, sp, #36	; 0x24
    bafe:	f04f 02ff 	mov.w	r2, #255	; 0xff
    bb02:	f005 faeb 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    bb06:	f89d 301d 	ldrb.w	r3, [sp, #29]
    bb0a:	2b00      	cmp	r3, #0
    bb0c:	d17e      	bne.n	bc0c <TIMER2_IRQHandler+0x228>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    bb0e:	f89d 301e 	ldrb.w	r3, [sp, #30]
    bb12:	f89d 001c 	ldrb.w	r0, [sp, #28]
    bb16:	f04f 0101 	mov.w	r1, #1
    bb1a:	fa01 f103 	lsl.w	r1, r1, r3
    bb1e:	f7f7 fce9 	bl	34f4 <GPIO_ClearValue>
    bb22:	e073      	b.n	bc0c <TIMER2_IRQHandler+0x228>
		} else if (blink_state == BLINK_OFF) {
    bb24:	2b02      	cmp	r3, #2
    bb26:	d142      	bne.n	bbae <TIMER2_IRQHandler+0x1ca>
			if (blinked_so_far >= blink_count) {
    bb28:	f641 6344 	movw	r3, #7748	; 0x1e44
    bb2c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bb30:	781a      	ldrb	r2, [r3, #0]
    bb32:	f641 6340 	movw	r3, #7744	; 0x1e40
    bb36:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bb3a:	681b      	ldr	r3, [r3, #0]
    bb3c:	429a      	cmp	r2, r3
    bb3e:	dc0e      	bgt.n	bb5e <TIMER2_IRQHandler+0x17a>
				blink_state = BLINK_PAUSE;
    bb40:	f641 3360 	movw	r3, #7008	; 0x1b60
    bb44:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bb48:	f04f 0203 	mov.w	r2, #3
    bb4c:	601a      	str	r2, [r3, #0]
				blink_ovfs_remaining = OVFS_PAUSE;
    bb4e:	f641 3394 	movw	r3, #7060	; 0x1b94
    bb52:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bb56:	f04f 0250 	mov.w	r2, #80	; 0x50
    bb5a:	601a      	str	r2, [r3, #0]
    bb5c:	e056      	b.n	bc0c <TIMER2_IRQHandler+0x228>
			} else {
				blink_state = BLINK_ON;
    bb5e:	f641 3360 	movw	r3, #7008	; 0x1b60
    bb62:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bb66:	f04f 0201 	mov.w	r2, #1
    bb6a:	601a      	str	r2, [r3, #0]
				blink_ovfs_remaining = OVFS_ON;
    bb6c:	f641 3394 	movw	r3, #7060	; 0x1b94
    bb70:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bb74:	f04f 0212 	mov.w	r2, #18
    bb78:	601a      	str	r2, [r3, #0]
				DEBUG_PIN.setValue(true);
    bb7a:	a80c      	add	r0, sp, #48	; 0x30
    bb7c:	f04f 01ff 	mov.w	r1, #255	; 0xff
    bb80:	f005 f89a 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
    bb84:	a80a      	add	r0, sp, #40	; 0x28
    bb86:	a90c      	add	r1, sp, #48	; 0x30
    bb88:	f04f 02ff 	mov.w	r2, #255	; 0xff
    bb8c:	f005 faa6 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    bb90:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    bb94:	2b00      	cmp	r3, #0
    bb96:	d139      	bne.n	bc0c <TIMER2_IRQHandler+0x228>
//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    bb98:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
    bb9c:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
    bba0:	f04f 0101 	mov.w	r1, #1
    bba4:	fa01 f103 	lsl.w	r1, r1, r3
    bba8:	f7f7 fc9c 	bl	34e4 <GPIO_SetValue>
    bbac:	e02e      	b.n	bc0c <TIMER2_IRQHandler+0x228>
			}
		} else if (blink_state == BLINK_PAUSE) {
    bbae:	2b03      	cmp	r3, #3
    bbb0:	d12c      	bne.n	bc0c <TIMER2_IRQHandler+0x228>
			blinked_so_far = 0;
    bbb2:	f641 6340 	movw	r3, #7744	; 0x1e40
    bbb6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bbba:	f04f 0200 	mov.w	r2, #0
    bbbe:	601a      	str	r2, [r3, #0]
			blink_state = BLINK_ON;
    bbc0:	f641 3360 	movw	r3, #7008	; 0x1b60
    bbc4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bbc8:	f04f 0201 	mov.w	r2, #1
    bbcc:	601a      	str	r2, [r3, #0]
			blink_ovfs_remaining = OVFS_ON;
    bbce:	f641 3394 	movw	r3, #7060	; 0x1b94
    bbd2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bbd6:	f04f 0212 	mov.w	r2, #18
    bbda:	601a      	str	r2, [r3, #0]
			DEBUG_PIN.setValue(true);
    bbdc:	a80f      	add	r0, sp, #60	; 0x3c
    bbde:	f04f 01ff 	mov.w	r1, #255	; 0xff
    bbe2:	f005 f869 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
    bbe6:	a80d      	add	r0, sp, #52	; 0x34
    bbe8:	a90f      	add	r1, sp, #60	; 0x3c
    bbea:	f04f 02ff 	mov.w	r2, #255	; 0xff
    bbee:	f005 fa75 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    bbf2:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
    bbf6:	b94b      	cbnz	r3, bc0c <TIMER2_IRQHandler+0x228>
//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    bbf8:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
    bbfc:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
    bc00:	f04f 0101 	mov.w	r1, #1
    bc04:	fa01 f103 	lsl.w	r1, r1, r3
    bc08:	f7f7 fc6c 	bl	34e4 <GPIO_SetValue>
		}
	}
	/// Interface Board LEDs
	if( interface_ovfs_remaining > 0){
    bc0c:	f641 3380 	movw	r3, #7040	; 0x1b80
    bc10:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bc14:	681b      	ldr	r3, [r3, #0]
    bc16:	2b00      	cmp	r3, #0
    bc18:	dd07      	ble.n	bc2a <TIMER2_IRQHandler+0x246>
		interface_ovfs_remaining--;
    bc1a:	f641 3280 	movw	r2, #7040	; 0x1b80
    bc1e:	f2c1 0200 	movt	r2, #4096	; 0x1000
    bc22:	f103 33ff 	add.w	r3, r3, #4294967295
    bc26:	6013      	str	r3, [r2, #0]
    bc28:	e02b      	b.n	bc82 <TIMER2_IRQHandler+0x29e>
	} else {
		if (interface_blink_state == BLINK_ON) {
    bc2a:	f641 3398 	movw	r3, #7064	; 0x1b98
    bc2e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bc32:	681b      	ldr	r3, [r3, #0]
    bc34:	2b01      	cmp	r3, #1
    bc36:	d111      	bne.n	bc5c <TIMER2_IRQHandler+0x278>
			interface_blink_state = BLINK_OFF;
    bc38:	f641 3398 	movw	r3, #7064	; 0x1b98
    bc3c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bc40:	f04f 0202 	mov.w	r2, #2
    bc44:	601a      	str	r2, [r3, #0]
			interface_ovfs_remaining = interface_on_time;
    bc46:	f641 3380 	movw	r3, #7040	; 0x1b80
    bc4a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bc4e:	f641 325c 	movw	r2, #7004	; 0x1b5c
    bc52:	f2c1 0200 	movt	r2, #4096	; 0x1000
    bc56:	7812      	ldrb	r2, [r2, #0]
    bc58:	601a      	str	r2, [r3, #0]
    bc5a:	e012      	b.n	bc82 <TIMER2_IRQHandler+0x29e>
//			interface::setLEDs(true);
		} else if (interface_blink_state == BLINK_OFF) {
    bc5c:	2b02      	cmp	r3, #2
    bc5e:	d110      	bne.n	bc82 <TIMER2_IRQHandler+0x29e>
			interface_blink_state = BLINK_ON;
    bc60:	f641 3398 	movw	r3, #7064	; 0x1b98
    bc64:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bc68:	f04f 0201 	mov.w	r2, #1
    bc6c:	601a      	str	r2, [r3, #0]
			interface_ovfs_remaining = interface_off_time;
    bc6e:	f641 3380 	movw	r3, #7040	; 0x1b80
    bc72:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bc76:	f641 327c 	movw	r2, #7036	; 0x1b7c
    bc7a:	f2c1 0200 	movt	r2, #4096	; 0x1000
    bc7e:	7812      	ldrb	r2, [r2, #0]
    bc80:	601a      	str	r2, [r3, #0]
			loop2=0;
//			led_toggle2 = led_toggle2^1;
//			DEBUG_LED2.setValue(led_toggle2);
		}
	}
}
    bc82:	b010      	add	sp, #64	; 0x40
    bc84:	bd10      	pop	{r4, pc}
    bc86:	bf00      	nop

0000bc88 <TIMER3_IRQHandler>:

// piezo buzzer update
// this interrupt gets garbled with the much more rapid stepper interrupt
//ISR(TIMER0_COMPA_vect)
extern "C" void TIMER3_IRQHandler (void){
    bc88:	b510      	push	{r4, lr}
    bc8a:	b086      	sub	sp, #24
	DEBUG_LED3.setDirection(true);
    bc8c:	f641 346c 	movw	r4, #7020	; 0x1b6c
    bc90:	f2c1 0400 	movt	r4, #4096	; 0x1000
    bc94:	4668      	mov	r0, sp
    bc96:	4621      	mov	r1, r4
    bc98:	f04f 0215 	mov.w	r2, #21
    bc9c:	f005 fa1e 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
    bca0:	4668      	mov	r0, sp
    bca2:	f04f 0101 	mov.w	r1, #1
    bca6:	f005 fa39 	bl	1111c <Pin::setDirection(bool) const>
	DEBUG_LED3.setValue(true);
    bcaa:	a802      	add	r0, sp, #8
    bcac:	4621      	mov	r1, r4
    bcae:	f04f 0215 	mov.w	r2, #21
    bcb2:	f005 fa13 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    bcb6:	f89d 3009 	ldrb.w	r3, [sp, #9]
    bcba:	b94b      	cbnz	r3, bcd0 <TIMER3_IRQHandler+0x48>
//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    bcbc:	f89d 300a 	ldrb.w	r3, [sp, #10]
    bcc0:	f89d 0008 	ldrb.w	r0, [sp, #8]
    bcc4:	f04f 0101 	mov.w	r1, #1
    bcc8:	fa01 f103 	lsl.w	r1, r1, r3
    bccc:	f7f7 fc0a 	bl	34e4 <GPIO_SetValue>
//	xprintf("3" " (%s:%d)\n",_F_,_L_);
//	xprintf("TIMER3_IRQHandler" " (%s:%d)\n",_F_,_L_);
	TIM_ClearIntPending(LPC_TIM3,TIM_MR0_INT);
    bcd0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    bcd4:	f2c4 0009 	movt	r0, #16393	; 0x4009
    bcd8:	f04f 0100 	mov.w	r1, #0
    bcdc:	f7f7 fdf2 	bl	38c4 <TIM_ClearIntPending>
	Piezo::doInterrupt();
    bce0:	f000 f9e4 	bl	c0ac <Piezo::doInterrupt()>
			loop3=0;
//			led_toggle3 = led_toggle3^1;
//			DEBUG_LED3.setValue(led_toggle3);
		}
	}
	DEBUG_LED3.setValue(false);
    bce4:	a804      	add	r0, sp, #16
    bce6:	f641 316c 	movw	r1, #7020	; 0x1b6c
    bcea:	f2c1 0100 	movt	r1, #4096	; 0x1000
    bcee:	f04f 0215 	mov.w	r2, #21
    bcf2:	f005 f9f3 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    bcf6:	f89d 3011 	ldrb.w	r3, [sp, #17]
    bcfa:	b94b      	cbnz	r3, bd10 <TIMER3_IRQHandler+0x88>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    bcfc:	f89d 3012 	ldrb.w	r3, [sp, #18]
    bd00:	f89d 0010 	ldrb.w	r0, [sp, #16]
    bd04:	f04f 0101 	mov.w	r1, #1
    bd08:	fa01 f103 	lsl.w	r1, r1, r3
    bd0c:	f7f7 fbf2 	bl	34f4 <GPIO_ClearValue>
}
    bd10:	b006      	add	sp, #24
    bd12:	bd10      	pop	{r4, pc}

0000bd14 <Motherboard::setUsingPlatform(bool)>:
	}
}


void Motherboard::setUsingPlatform(bool is_using) {
  using_platform = is_using;
    bd14:	f880 1298 	strb.w	r1, [r0, #664]	; 0x298
}
    bd18:	4770      	bx	lr
    bd1a:	bf00      	nop

0000bd1c <Motherboard::setValve(bool)>:

void Motherboard::setValve(bool on) {
    bd1c:	b510      	push	{r4, lr}
    bd1e:	b086      	sub	sp, #24
    bd20:	460c      	mov	r4, r1
//  	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		setUsingPlatform(false);
    bd22:	f04f 0100 	mov.w	r1, #0
    bd26:	f7ff fff5 	bl	bd14 <Motherboard::setUsingPlatform(bool)>
		pwmHBP_On(false);
		EXTRA_FET.setDirection(true);
    bd2a:	a802      	add	r0, sp, #8
    bd2c:	f04f 01ff 	mov.w	r1, #255	; 0xff
    bd30:	f004 ffc2 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
    bd34:	4668      	mov	r0, sp
    bd36:	a902      	add	r1, sp, #8
    bd38:	f04f 02ff 	mov.w	r2, #255	; 0xff
    bd3c:	f005 f9ce 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
    bd40:	4668      	mov	r0, sp
    bd42:	f04f 0101 	mov.w	r1, #1
    bd46:	f005 f9e9 	bl	1111c <Pin::setDirection(bool) const>
		EXTRA_FET.setValue(on);
    bd4a:	a805      	add	r0, sp, #20
    bd4c:	f04f 01ff 	mov.w	r1, #255	; 0xff
    bd50:	f004 ffb2 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
    bd54:	a803      	add	r0, sp, #12
    bd56:	a905      	add	r1, sp, #20
    bd58:	f04f 02ff 	mov.w	r2, #255	; 0xff
    bd5c:	f005 f9be 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    bd60:	f89d 300d 	ldrb.w	r3, [sp, #13]
    bd64:	b9ab      	cbnz	r3, bd92 <Motherboard::setValve(bool)+0x76>
		 	return;
		// uint8_t oldSREG = SREG;

//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
    bd66:	b154      	cbz	r4, bd7e <Motherboard::setValve(bool)+0x62>
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    bd68:	f89d 300e 	ldrb.w	r3, [sp, #14]
    bd6c:	f89d 000c 	ldrb.w	r0, [sp, #12]
    bd70:	f04f 0101 	mov.w	r1, #1
    bd74:	fa01 f103 	lsl.w	r1, r1, r3
    bd78:	f7f7 fbb4 	bl	34e4 <GPIO_SetValue>
    bd7c:	e009      	b.n	bd92 <Motherboard::setValve(bool)+0x76>
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    bd7e:	f89d 300e 	ldrb.w	r3, [sp, #14]
    bd82:	f89d 000c 	ldrb.w	r0, [sp, #12]
    bd86:	f04f 0101 	mov.w	r1, #1
    bd8a:	fa01 f103 	lsl.w	r1, r1, r3
    bd8e:	f7f7 fbb1 	bl	34f4 <GPIO_ClearValue>
//	}
}
    bd92:	b006      	add	sp, #24
    bd94:	bd10      	pop	{r4, pc}
    bd96:	bf00      	nop

0000bd98 <_GLOBAL__sub_I__ZN11Motherboard11motherboardE>:
	// It works relatively well.
//  	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		pwmHBP_On(false);
		HBP_HEAT.setValue(value != 0);
//	}
}
    bd98:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
    bd9a:	f641 3068 	movw	r0, #7016	; 0x1b68
    bd9e:	f2c1 0000 	movt	r0, #4096	; 0x1000
    bda2:	f04f 0100 	mov.w	r1, #0
    bda6:	f004 ff87 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
    bdaa:	f641 306c 	movw	r0, #7020	; 0x1b6c
    bdae:	f2c1 0000 	movt	r0, #4096	; 0x1000
    bdb2:	f04f 0101 	mov.w	r1, #1
    bdb6:	f004 ff7f 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
    bdba:	f641 3070 	movw	r0, #7024	; 0x1b70
    bdbe:	f2c1 0000 	movt	r0, #4096	; 0x1000
    bdc2:	f04f 0102 	mov.w	r1, #2
    bdc6:	f004 ff77 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
    bdca:	f641 3074 	movw	r0, #7028	; 0x1b74
    bdce:	f2c1 0000 	movt	r0, #4096	; 0x1000
    bdd2:	f04f 0103 	mov.w	r1, #3
    bdd6:	f004 ff6f 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
    bdda:	f641 3078 	movw	r0, #7032	; 0x1b78
    bdde:	f2c1 0000 	movt	r0, #4096	; 0x1000
    bde2:	f04f 0104 	mov.w	r1, #4
    bde6:	f004 ff67 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
    bdea:	f641 3490 	movw	r4, #7056	; 0x1b90
    bdee:	f2c1 0400 	movt	r4, #4096	; 0x1000
    bdf2:	4620      	mov	r0, r4
    bdf4:	f04f 01ff 	mov.w	r1, #255	; 0xff
    bdf8:	f004 ff5e 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
	};
	// currently not used:
	//const uint8_t getPinIndex() const { return pin_index; }
};

static const Pin NullPin(NullPort, 0);
    bdfc:	f641 3084 	movw	r0, #7044	; 0x1b84
    be00:	f2c1 0000 	movt	r0, #4096	; 0x1000
    be04:	4621      	mov	r1, r4
    be06:	f04f 0200 	mov.w	r2, #0
    be0a:	f005 f967 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
	#include "comm.h"
#include "lpc17xx_clkpwr.h"
}

/// Instantiate static motherboard instance
Motherboard Motherboard::motherboard;
    be0e:	f641 349c 	movw	r4, #7068	; 0x1b9c
    be12:	f2c1 0400 	movt	r4, #4096	; 0x1000
    be16:	4620      	mov	r0, r4
    be18:	f7ff f992 	bl	b140 <Motherboard::Motherboard()>
    be1c:	4620      	mov	r0, r4
    be1e:	f24b 01a1 	movw	r1, #45217	; 0xb0a1
    be22:	f2c0 0100 	movt	r1, #0
    be26:	f240 0204 	movw	r2, #4
    be2a:	f2c1 0200 	movt	r2, #4096	; 0x1000
    be2e:	f007 fe41 	bl	13ab4 <__aeabi_atexit>
	// It works relatively well.
//  	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		pwmHBP_On(false);
		HBP_HEAT.setValue(value != 0);
//	}
}
    be32:	bd10      	pop	{r4, pc}

0000be34 <Piezo::isPlaying()>:
	 setTone(NOTE_0, 188);
	 setTone(NOTE_A7, 333);

 }
 bool isPlaying(){
	return playing;
    be34:	f641 63e8 	movw	r3, #7912	; 0x1ee8
    be38:	f2c1 0300 	movt	r3, #4096	; 0x1000
 }
    be3c:	7818      	ldrb	r0, [r3, #0]
    be3e:	4770      	bx	lr

0000be40 <Piezo::queueTone(unsigned short, unsigned short)>:
 }
 
 // allow queuing of tones so that multiple tones can be called sequentially
 // without waiting for each to finish
 void queueTone(uint16_t frequency, uint16_t duration)
 {
    be40:	b430      	push	{r4, r5}
		return length;
	}

	/// Get the remaining capacity of this buffer
	inline const BufSizeType getRemainingCapacity() const {
		return size - length;
    be42:	f641 63d4 	movw	r3, #7892	; 0x1ed4
    be46:	f2c1 0300 	movt	r3, #4096	; 0x1000
    be4a:	881a      	ldrh	r2, [r3, #0]
    be4c:	885b      	ldrh	r3, [r3, #2]
    be4e:	b29b      	uxth	r3, r3
	 if(frequencies.getRemainingCapacity() > 0 ) {
    be50:	429a      	cmp	r2, r3
    be52:	d04c      	beq.n	beee <Piezo::queueTone(unsigned short, unsigned short)+0xae>
		overflow = false;
		underflow = false;
	}
	/// Append a byte to the tail of the buffer
	inline void push(BufDataType b) {
		if (length < size) {
    be54:	f641 63d4 	movw	r3, #7892	; 0x1ed4
    be58:	f2c1 0300 	movt	r3, #4096	; 0x1000
    be5c:	885b      	ldrh	r3, [r3, #2]
    be5e:	b29b      	uxth	r3, r3
    be60:	429a      	cmp	r2, r3
    be62:	d916      	bls.n	be92 <Piezo::queueTone(unsigned short, unsigned short)+0x52>
			operator[](length) = b;
    be64:	f641 63d4 	movw	r3, #7892	; 0x1ed4
    be68:	f2c1 0300 	movt	r3, #4096	; 0x1000
    be6c:	885d      	ldrh	r5, [r3, #2]
    be6e:	b2ad      	uxth	r5, r5
	inline const bool isEmpty() const {
		return length == 0;
	}
	/// Read the buffer directly
	inline BufDataType& operator[](BufSizeType index) {
		const BufSizeType actual_index = (index + start) % size;
    be70:	889c      	ldrh	r4, [r3, #4]
    be72:	b2a4      	uxth	r4, r4
    be74:	192c      	adds	r4, r5, r4
    be76:	fb94 f5f2 	sdiv	r5, r4, r2
    be7a:	fb02 4215 	mls	r2, r2, r5, r4
		return data[actual_index];
    be7e:	b292      	uxth	r2, r2
		underflow = false;
	}
	/// Append a byte to the tail of the buffer
	inline void push(BufDataType b) {
		if (length < size) {
			operator[](length) = b;
    be80:	689d      	ldr	r5, [r3, #8]
    be82:	f825 0012 	strh.w	r0, [r5, r2, lsl #1]
			length++;
    be86:	885a      	ldrh	r2, [r3, #2]
    be88:	f102 0201 	add.w	r2, r2, #1
    be8c:	b292      	uxth	r2, r2
    be8e:	805a      	strh	r2, [r3, #2]
    be90:	e006      	b.n	bea0 <Piezo::queueTone(unsigned short, unsigned short)+0x60>
		} else {
			overflow = true;
    be92:	f641 63d4 	movw	r3, #7892	; 0x1ed4
    be96:	f2c1 0300 	movt	r3, #4096	; 0x1000
    be9a:	f04f 0201 	mov.w	r2, #1
    be9e:	731a      	strb	r2, [r3, #12]
		overflow = false;
		underflow = false;
	}
	/// Append a byte to the tail of the buffer
	inline void push(BufDataType b) {
		if (length < size) {
    bea0:	f641 6350 	movw	r3, #7760	; 0x1e50
    bea4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bea8:	8858      	ldrh	r0, [r3, #2]
    beaa:	b280      	uxth	r0, r0
    beac:	881a      	ldrh	r2, [r3, #0]
    beae:	4290      	cmp	r0, r2
    beb0:	d216      	bcs.n	bee0 <Piezo::queueTone(unsigned short, unsigned short)+0xa0>
			operator[](length) = b;
    beb2:	f641 6350 	movw	r3, #7760	; 0x1e50
    beb6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    beba:	885c      	ldrh	r4, [r3, #2]
    bebc:	b2a4      	uxth	r4, r4
	inline const bool isEmpty() const {
		return length == 0;
	}
	/// Read the buffer directly
	inline BufDataType& operator[](BufSizeType index) {
		const BufSizeType actual_index = (index + start) % size;
    bebe:	8898      	ldrh	r0, [r3, #4]
    bec0:	b280      	uxth	r0, r0
    bec2:	1820      	adds	r0, r4, r0
    bec4:	fb90 f4f2 	sdiv	r4, r0, r2
    bec8:	fb02 0214 	mls	r2, r2, r4, r0
		return data[actual_index];
    becc:	b292      	uxth	r2, r2
		underflow = false;
	}
	/// Append a byte to the tail of the buffer
	inline void push(BufDataType b) {
		if (length < size) {
			operator[](length) = b;
    bece:	689c      	ldr	r4, [r3, #8]
    bed0:	f824 1012 	strh.w	r1, [r4, r2, lsl #1]
			length++;
    bed4:	885a      	ldrh	r2, [r3, #2]
    bed6:	f102 0201 	add.w	r2, r2, #1
    beda:	b292      	uxth	r2, r2
    bedc:	805a      	strh	r2, [r3, #2]
    bede:	e006      	b.n	beee <Piezo::queueTone(unsigned short, unsigned short)+0xae>
		} else {
			overflow = true;
    bee0:	f641 6350 	movw	r3, #7760	; 0x1e50
    bee4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bee8:	f04f 0201 	mov.w	r2, #1
    beec:	731a      	strb	r2, [r3, #12]
		 frequencies.push(frequency);
		 durations.push(duration);
	 }
	 //FUTURE: set an error blink here.
 }
    beee:	bc30      	pop	{r4, r5}
    bef0:	4770      	bx	lr
    bef2:	bf00      	nop

0000bef4 <Piezo::setTone(unsigned short, unsigned short)>:
 
 // derived from arduino Tone library
 void setTone(uint16_t frequency, uint16_t duration)
{
    bef4:	b538      	push	{r3, r4, r5, lr}
    bef6:	4604      	mov	r4, r0
    bef8:	460d      	mov	r5, r1
	 /// if we are already playing, cache the next tone
	if( ToneOn ) {
    befa:	f641 6370 	movw	r3, #7792	; 0x1e70
    befe:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bf02:	781b      	ldrb	r3, [r3, #0]
    bf04:	b113      	cbz	r3, bf0c <Piezo::setTone(unsigned short, unsigned short)+0x18>
		queueTone(frequency,duration);
    bf06:	f7ff ff9b 	bl	be40 <Piezo::queueTone(unsigned short, unsigned short)>
		return;
    bf0a:	bd38      	pop	{r3, r4, r5, pc}
	}

    if(eeprom::getEeprom8(eeprom_offsets::BUZZ_SETTINGS + buzz_eeprom_offsets::BASIC_BUZZ_OFFSET,1) == 0)
    bf0c:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    bf10:	f04f 0101 	mov.w	r1, #1
    bf14:	f004 fa5e 	bl	103d4 <eeprom::getEeprom8(unsigned short, unsigned char)>
    bf18:	2800      	cmp	r0, #0
    bf1a:	d04e      	beq.n	bfba <Piezo::setTone(unsigned short, unsigned short)+0xc6>
        return;

	playing = true;
    bf1c:	f641 63e8 	movw	r3, #7912	; 0x1ee8
    bf20:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bf24:	f04f 0201 	mov.w	r2, #1
    bf28:	701a      	strb	r2, [r3, #0]
	ToneOn = true;
    bf2a:	f641 6370 	movw	r3, #7792	; 0x1e70
    bf2e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bf32:	701a      	strb	r2, [r3, #0]
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    bf34:	f641 63a4 	movw	r3, #7844	; 0x1ea4
    bf38:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bf3c:	785b      	ldrb	r3, [r3, #1]
    bf3e:	b95b      	cbnz	r3, bf58 <Piezo::setTone(unsigned short, unsigned short)+0x64>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    bf40:	f641 62a4 	movw	r2, #7844	; 0x1ea4
    bf44:	f2c1 0200 	movt	r2, #4096	; 0x1000
    bf48:	7893      	ldrb	r3, [r2, #2]
    bf4a:	7810      	ldrb	r0, [r2, #0]
    bf4c:	f04f 0101 	mov.w	r1, #1
    bf50:	fa01 f103 	lsl.w	r1, r1, r3
    bf54:	f7f7 face 	bl	34f4 <GPIO_ClearValue>
	BuzzPin.setValue(false);
    BuzzPin.setDirection(true);
    bf58:	f641 60a4 	movw	r0, #7844	; 0x1ea4
    bf5c:	f2c1 0000 	movt	r0, #4096	; 0x1000
    bf60:	f04f 0101 	mov.w	r1, #1
    bf64:	f005 f8da 	bl	1111c <Pin::setDirection(bool) const>
		
	// 8 MHZ base clock
	uint32_t fCPU = 8000000;
	// scan through prescalars to find the best fit
      uint32_t ocr = fCPU / frequency / 2 - 1;
      toggle_time = ocr;
    bf68:	f641 63ec 	movw	r3, #7916	; 0x1eec
    bf6c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    BuzzPin.setDirection(true);
		
	// 8 MHZ base clock
	uint32_t fCPU = 8000000;
	// scan through prescalars to find the best fit
      uint32_t ocr = fCPU / frequency / 2 - 1;
    bf70:	f44f 5290 	mov.w	r2, #4608	; 0x1200
    bf74:	f2c0 027a 	movt	r2, #122	; 0x7a
    bf78:	fbb2 f2f4 	udiv	r2, r2, r4
    bf7c:	ea4f 0252 	mov.w	r2, r2, lsr #1
    bf80:	f102 32ff 	add.w	r2, r2, #4294967295
      toggle_time = ocr;
    bf84:	601a      	str	r2, [r3, #0]
//      TCCR0B = 0b00001000 + prescalarbits; //set prescaler to desired value
      
//      OCR0A = ocr & 0xFF;
//      OCR0B = ocr & 0xFF; //set pwm frequency
//      TIMSK0 = 0b00000010; //turn compA interrupt on
      toggleCount = 2L * frequency * duration / 1000L;
    bf86:	f641 63a0 	movw	r3, #7840	; 0x1ea0
    bf8a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bf8e:	ea4f 0444 	mov.w	r4, r4, lsl #1
    bf92:	fb05 f504 	mul.w	r5, r5, r4
    bf96:	f644 52d3 	movw	r2, #19923	; 0x4dd3
    bf9a:	f2c1 0262 	movt	r2, #4194	; 0x1062
    bf9e:	fb82 1205 	smull	r1, r2, r2, r5
    bfa2:	ea4f 75e5 	mov.w	r5, r5, asr #31
    bfa6:	ebc5 15a2 	rsb	r5, r5, r2, asr #6
    bfaa:	601d      	str	r5, [r3, #0]
      lastMicros = 0;
    bfac:	f641 634c 	movw	r3, #7756	; 0x1e4c
    bfb0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    bfb4:	f04f 0200 	mov.w	r2, #0
    bfb8:	601a      	str	r2, [r3, #0]
    bfba:	bd38      	pop	{r3, r4, r5, pc}

0000bfbc <Piezo::errorTone(unsigned char)>:



 // call this sequence on error
 void errorTone(uint8_t iterations)
 {
    bfbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	 for(int i = 0; i < iterations; i++)
    bfc0:	4606      	mov	r6, r0
    bfc2:	b198      	cbz	r0, bfec <Piezo::errorTone(unsigned char)+0x30>
    bfc4:	f04f 0400 	mov.w	r4, #0
	 {
		setTone(NOTE_B4, 300);
    bfc8:	f44f 77f7 	mov.w	r7, #494	; 0x1ee
    bfcc:	f44f 7596 	mov.w	r5, #300	; 0x12c
		setTone(NOTE_A4, 300);
    bfd0:	f44f 78dc 	mov.w	r8, #440	; 0x1b8
 // call this sequence on error
 void errorTone(uint8_t iterations)
 {
	 for(int i = 0; i < iterations; i++)
	 {
		setTone(NOTE_B4, 300);
    bfd4:	4638      	mov	r0, r7
    bfd6:	4629      	mov	r1, r5
    bfd8:	f7ff ff8c 	bl	bef4 <Piezo::setTone(unsigned short, unsigned short)>
		setTone(NOTE_A4, 300);
    bfdc:	4640      	mov	r0, r8
    bfde:	4629      	mov	r1, r5
    bfe0:	f7ff ff88 	bl	bef4 <Piezo::setTone(unsigned short, unsigned short)>


 // call this sequence on error
 void errorTone(uint8_t iterations)
 {
	 for(int i = 0; i < iterations; i++)
    bfe4:	f104 0401 	add.w	r4, r4, #1
    bfe8:	42b4      	cmp	r4, r6
    bfea:	dbf3      	blt.n	bfd4 <Piezo::errorTone(unsigned char)+0x18>
    bfec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000bff0 <Piezo::doneTone()>:
	 setTone(NOTE_D8, 433);
 }

// call this sequence at the end of prints
 void doneTone( )// Ta-da!
 {
    bff0:	b508      	push	{r3, lr}

	 setTone(NOTE_A5, 188);
    bff2:	f44f 705c 	mov.w	r0, #880	; 0x370
    bff6:	f04f 01bc 	mov.w	r1, #188	; 0xbc
    bffa:	f7ff ff7b 	bl	bef4 <Piezo::setTone(unsigned short, unsigned short)>
	 setTone(NOTE_0, 188);
    bffe:	f04f 0000 	mov.w	r0, #0
    c002:	f04f 01bc 	mov.w	r1, #188	; 0xbc
    c006:	f7ff ff75 	bl	bef4 <Piezo::setTone(unsigned short, unsigned short)>
	 setTone(NOTE_A6, 188);
    c00a:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
    c00e:	f04f 01bc 	mov.w	r1, #188	; 0xbc
    c012:	f7ff ff6f 	bl	bef4 <Piezo::setTone(unsigned short, unsigned short)>
	 setTone(NOTE_0, 188);
    c016:	f04f 0000 	mov.w	r0, #0
    c01a:	f04f 01bc 	mov.w	r1, #188	; 0xbc
    c01e:	f7ff ff69 	bl	bef4 <Piezo::setTone(unsigned short, unsigned short)>
	 setTone(NOTE_B6, 188);
    c022:	f44f 60f7 	mov.w	r0, #1976	; 0x7b8
    c026:	f04f 01bc 	mov.w	r1, #188	; 0xbc
    c02a:	f7ff ff63 	bl	bef4 <Piezo::setTone(unsigned short, unsigned short)>
	 setTone(NOTE_0, 188);
    c02e:	f04f 0000 	mov.w	r0, #0
    c032:	f04f 01bc 	mov.w	r1, #188	; 0xbc
    c036:	f7ff ff5d 	bl	bef4 <Piezo::setTone(unsigned short, unsigned short)>
	 setTone(NOTE_C7, 188);
    c03a:	f640 002d 	movw	r0, #2093	; 0x82d
    c03e:	f04f 01bc 	mov.w	r1, #188	; 0xbc
    c042:	f7ff ff57 	bl	bef4 <Piezo::setTone(unsigned short, unsigned short)>
	 setTone(NOTE_CS7, 188);
    c046:	f640 00a9 	movw	r0, #2217	; 0x8a9
    c04a:	f04f 01bc 	mov.w	r1, #188	; 0xbc
    c04e:	f7ff ff51 	bl	bef4 <Piezo::setTone(unsigned short, unsigned short)>
	 setTone(NOTE_0, 188);
    c052:	f04f 0000 	mov.w	r0, #0
    c056:	f04f 01bc 	mov.w	r1, #188	; 0xbc
    c05a:	f7ff ff4b 	bl	bef4 <Piezo::setTone(unsigned short, unsigned short)>
	 setTone(NOTE_A7, 333);
    c05e:	f44f 605c 	mov.w	r0, #3520	; 0xdc0
    c062:	f240 114d 	movw	r1, #333	; 0x14d
    c066:	f7ff ff45 	bl	bef4 <Piezo::setTone(unsigned short, unsigned short)>

 }
    c06a:	bd08      	pop	{r3, pc}

0000c06c <Piezo::startUpTone()>:
CircularBuffer16 frequencies(TONE_QUEUE_SIZE, frequency_buf);
CircularBuffer16 durations(TONE_QUEUE_SIZE, duration_buf);
 
 // call this sequence on startup
 void startUpTone()
 {		
    c06c:	b508      	push	{r3, lr}
	 ///song 3
	 setTone(NOTE_A7, 288);
    c06e:	f44f 605c 	mov.w	r0, #3520	; 0xdc0
    c072:	f44f 7190 	mov.w	r1, #288	; 0x120
    c076:	f7ff ff3d 	bl	bef4 <Piezo::setTone(unsigned short, unsigned short)>
	 setTone(NOTE_0, 188);
    c07a:	f04f 0000 	mov.w	r0, #0
    c07e:	f04f 01bc 	mov.w	r1, #188	; 0xbc
    c082:	f7ff ff37 	bl	bef4 <Piezo::setTone(unsigned short, unsigned short)>
	 setTone(NOTE_CS8, 188);
    c086:	f241 1053 	movw	r0, #4435	; 0x1153
    c08a:	f04f 01bc 	mov.w	r1, #188	; 0xbc
    c08e:	f7ff ff31 	bl	bef4 <Piezo::setTone(unsigned short, unsigned short)>
	 setTone(NOTE_0, 188);
    c092:	f04f 0000 	mov.w	r0, #0
    c096:	f04f 01bc 	mov.w	r1, #188	; 0xbc
    c09a:	f7ff ff2b 	bl	bef4 <Piezo::setTone(unsigned short, unsigned short)>
	 setTone(NOTE_D8, 433);
    c09e:	f241 205b 	movw	r0, #4699	; 0x125b
    c0a2:	f240 11b1 	movw	r1, #433	; 0x1b1
    c0a6:	f7ff ff25 	bl	bef4 <Piezo::setTone(unsigned short, unsigned short)>
 }
    c0aa:	bd08      	pop	{r3, pc}

0000c0ac <Piezo::doInterrupt()>:
      toggleCount = 2L * frequency * duration / 1000L;
      lastMicros = 0;
}

void doInterrupt()
{			  
    c0ac:	b570      	push	{r4, r5, r6, lr}
	if (toggleCount != 0)
    c0ae:	f641 63a0 	movw	r3, #7840	; 0x1ea0
    c0b2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c0b6:	681b      	ldr	r3, [r3, #0]
    c0b8:	2b00      	cmp	r3, #0
    c0ba:	d037      	beq.n	c12c <Piezo::doInterrupt()+0x80>
  {
    // toggle the pin
    toggle = !toggle;
    c0bc:	f641 6368 	movw	r3, #7784	; 0x1e68
    c0c0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c0c4:	781a      	ldrb	r2, [r3, #0]
    c0c6:	f082 0201 	eor.w	r2, r2, #1
    c0ca:	701a      	strb	r2, [r3, #0]
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    c0cc:	f641 63a4 	movw	r3, #7844	; 0x1ea4
    c0d0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c0d4:	785b      	ldrb	r3, [r3, #1]
    c0d6:	b9cb      	cbnz	r3, c10c <Piezo::doInterrupt()+0x60>
		 	return;
		// uint8_t oldSREG = SREG;

//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
    c0d8:	b162      	cbz	r2, c0f4 <Piezo::doInterrupt()+0x48>
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    c0da:	f641 62a4 	movw	r2, #7844	; 0x1ea4
    c0de:	f2c1 0200 	movt	r2, #4096	; 0x1000
    c0e2:	7893      	ldrb	r3, [r2, #2]
    c0e4:	7810      	ldrb	r0, [r2, #0]
    c0e6:	f04f 0101 	mov.w	r1, #1
    c0ea:	fa01 f103 	lsl.w	r1, r1, r3
    c0ee:	f7f7 f9f9 	bl	34e4 <GPIO_SetValue>
    c0f2:	e00b      	b.n	c10c <Piezo::doInterrupt()+0x60>
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    c0f4:	f641 62a4 	movw	r2, #7844	; 0x1ea4
    c0f8:	f2c1 0200 	movt	r2, #4096	; 0x1000
    c0fc:	7893      	ldrb	r3, [r2, #2]
    c0fe:	7810      	ldrb	r0, [r2, #0]
    c100:	f04f 0101 	mov.w	r1, #1
    c104:	fa01 f103 	lsl.w	r1, r1, r3
    c108:	f7f7 f9f4 	bl	34f4 <GPIO_ClearValue>
    BuzzPin.setValue(toggle);

    if (toggleCount > 0)
    c10c:	f641 63a0 	movw	r3, #7840	; 0x1ea0
    c110:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c114:	681b      	ldr	r3, [r3, #0]
    c116:	2b00      	cmp	r3, #0
    c118:	f000 8091 	beq.w	c23e <Piezo::doInterrupt()+0x192>
      toggleCount--;
    c11c:	f641 62a0 	movw	r2, #7840	; 0x1ea0
    c120:	f2c1 0200 	movt	r2, #4096	; 0x1000
    c124:	f103 33ff 	add.w	r3, r3, #4294967295
    c128:	6013      	str	r3, [r2, #0]
    c12a:	bd70      	pop	{r4, r5, r6, pc}
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    c12c:	f641 63a4 	movw	r3, #7844	; 0x1ea4
    c130:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c134:	785b      	ldrb	r3, [r3, #1]
    c136:	b95b      	cbnz	r3, c150 <Piezo::doInterrupt()+0xa4>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    c138:	f641 62a4 	movw	r2, #7844	; 0x1ea4
    c13c:	f2c1 0200 	movt	r2, #4096	; 0x1000
    c140:	7893      	ldrb	r3, [r2, #2]
    c142:	7810      	ldrb	r0, [r2, #0]
    c144:	f04f 0101 	mov.w	r1, #1
    c148:	fa01 f103 	lsl.w	r1, r1, r3
    c14c:	f7f7 f9d2 	bl	34f4 <GPIO_ClearValue>
  {
//    TIMSK0 = 0;
//    OCR0B = 0;
//    OCR0A = 0;
    BuzzPin.setValue(false);  // keep pin low after stop
    ToneOn = false;
    c150:	f641 6370 	movw	r3, #7792	; 0x1e70
    c154:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c158:	f04f 0200 	mov.w	r2, #0
    c15c:	701a      	strb	r2, [r3, #0]
		return size - length;
	}

	/// Check if the buffer is empty
	inline const bool isEmpty() const {
		return length == 0;
    c15e:	f641 63d4 	movw	r3, #7892	; 0x1ed4
    c162:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c166:	885b      	ldrh	r3, [r3, #2]
    c168:	b29b      	uxth	r3, r3
    if(frequencies.isEmpty() == false)
    c16a:	2b00      	cmp	r3, #0
    c16c:	d060      	beq.n	c230 <Piezo::doInterrupt()+0x184>
    c16e:	f641 63d4 	movw	r3, #7892	; 0x1ed4
    c172:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c176:	885b      	ldrh	r3, [r3, #2]
    c178:	b29b      	uxth	r3, r3
			overflow = true;
		}
	}
	/// Pop a byte off the head of the buffer
	inline BufDataType pop() {
		if (isEmpty()) {
    c17a:	b94b      	cbnz	r3, c190 <Piezo::doInterrupt()+0xe4>
			underflow = true;
    c17c:	f641 63d4 	movw	r3, #7892	; 0x1ed4
    c180:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c184:	f04f 0201 	mov.w	r2, #1
    c188:	735a      	strb	r2, [r3, #13]
			return BufDataType();
    c18a:	f04f 0000 	mov.w	r0, #0
    c18e:	e01d      	b.n	c1cc <Piezo::doInterrupt()+0x120>
	inline const bool isEmpty() const {
		return length == 0;
	}
	/// Read the buffer directly
	inline BufDataType& operator[](BufSizeType index) {
		const BufSizeType actual_index = (index + start) % size;
    c190:	f641 63d4 	movw	r3, #7892	; 0x1ed4
    c194:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c198:	8899      	ldrh	r1, [r3, #4]
    c19a:	b289      	uxth	r1, r1
    c19c:	881a      	ldrh	r2, [r3, #0]
    c19e:	fb91 f4f2 	sdiv	r4, r1, r2
    c1a2:	fb02 1114 	mls	r1, r2, r4, r1
		return data[actual_index];
    c1a6:	b28c      	uxth	r4, r1
    c1a8:	6898      	ldr	r0, [r3, #8]
		if (isEmpty()) {
			underflow = true;
			return BufDataType();
		}
		const BufDataType& popped_byte = operator[](0);
		start = (start + 1) % size;
    c1aa:	8899      	ldrh	r1, [r3, #4]
    c1ac:	b289      	uxth	r1, r1
    c1ae:	f101 0101 	add.w	r1, r1, #1
    c1b2:	fb91 f5f2 	sdiv	r5, r1, r2
    c1b6:	fb02 1215 	mls	r2, r2, r5, r1
    c1ba:	b292      	uxth	r2, r2
    c1bc:	809a      	strh	r2, [r3, #4]
		length--;
    c1be:	885a      	ldrh	r2, [r3, #2]
    c1c0:	f102 32ff 	add.w	r2, r2, #4294967295
    c1c4:	b292      	uxth	r2, r2
    c1c6:	805a      	strh	r2, [r3, #2]
		return popped_byte;
    c1c8:	f830 0014 	ldrh.w	r0, [r0, r4, lsl #1]
		return size - length;
	}

	/// Check if the buffer is empty
	inline const bool isEmpty() const {
		return length == 0;
    c1cc:	f641 6350 	movw	r3, #7760	; 0x1e50
    c1d0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c1d4:	885b      	ldrh	r3, [r3, #2]
    c1d6:	b29b      	uxth	r3, r3
			overflow = true;
		}
	}
	/// Pop a byte off the head of the buffer
	inline BufDataType pop() {
		if (isEmpty()) {
    c1d8:	b94b      	cbnz	r3, c1ee <Piezo::doInterrupt()+0x142>
			underflow = true;
    c1da:	f641 6350 	movw	r3, #7760	; 0x1e50
    c1de:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c1e2:	f04f 0201 	mov.w	r2, #1
    c1e6:	735a      	strb	r2, [r3, #13]
			return BufDataType();
    c1e8:	f04f 0100 	mov.w	r1, #0
    c1ec:	e01d      	b.n	c22a <Piezo::doInterrupt()+0x17e>
	inline const bool isEmpty() const {
		return length == 0;
	}
	/// Read the buffer directly
	inline BufDataType& operator[](BufSizeType index) {
		const BufSizeType actual_index = (index + start) % size;
    c1ee:	f641 6350 	movw	r3, #7760	; 0x1e50
    c1f2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c1f6:	8899      	ldrh	r1, [r3, #4]
    c1f8:	b289      	uxth	r1, r1
    c1fa:	881a      	ldrh	r2, [r3, #0]
    c1fc:	fb91 f5f2 	sdiv	r5, r1, r2
    c200:	fb02 1115 	mls	r1, r2, r5, r1
		return data[actual_index];
    c204:	b28d      	uxth	r5, r1
    c206:	689c      	ldr	r4, [r3, #8]
		if (isEmpty()) {
			underflow = true;
			return BufDataType();
		}
		const BufDataType& popped_byte = operator[](0);
		start = (start + 1) % size;
    c208:	8899      	ldrh	r1, [r3, #4]
    c20a:	b289      	uxth	r1, r1
    c20c:	f101 0101 	add.w	r1, r1, #1
    c210:	fb91 f6f2 	sdiv	r6, r1, r2
    c214:	fb02 1216 	mls	r2, r2, r6, r1
    c218:	b292      	uxth	r2, r2
    c21a:	809a      	strh	r2, [r3, #4]
		length--;
    c21c:	885a      	ldrh	r2, [r3, #2]
    c21e:	f102 32ff 	add.w	r2, r2, #4294967295
    c222:	b292      	uxth	r2, r2
    c224:	805a      	strh	r2, [r3, #2]
		return popped_byte;
    c226:	f834 1015 	ldrh.w	r1, [r4, r5, lsl #1]
		setTone(frequencies.pop(), durations.pop());
    c22a:	f7ff fe63 	bl	bef4 <Piezo::setTone(unsigned short, unsigned short)>
    c22e:	bd70      	pop	{r4, r5, r6, pc}
	else
		playing = false;
    c230:	f641 63e8 	movw	r3, #7912	; 0x1ee8
    c234:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c238:	f04f 0200 	mov.w	r2, #0
    c23c:	701a      	strb	r2, [r3, #0]
    c23e:	bd70      	pop	{r4, r5, r6, pc}

0000c240 <_GLOBAL__sub_I__ZN5Piezo7BuzzPinE>:
   }
}
}
    c240:	b538      	push	{r3, r4, r5, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
    c242:	f641 6048 	movw	r0, #7752	; 0x1e48
    c246:	f2c1 0000 	movt	r0, #4096	; 0x1000
    c24a:	f04f 0100 	mov.w	r1, #0
    c24e:	f004 fd33 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
    c252:	f641 6060 	movw	r0, #7776	; 0x1e60
    c256:	f2c1 0000 	movt	r0, #4096	; 0x1000
    c25a:	f04f 0101 	mov.w	r1, #1
    c25e:	f004 fd2b 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
    c262:	f641 6464 	movw	r4, #7780	; 0x1e64
    c266:	f2c1 0400 	movt	r4, #4096	; 0x1000
    c26a:	4620      	mov	r0, r4
    c26c:	f04f 0102 	mov.w	r1, #2
    c270:	f004 fd22 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
    c274:	f641 6074 	movw	r0, #7796	; 0x1e74
    c278:	f2c1 0000 	movt	r0, #4096	; 0x1000
    c27c:	f04f 0103 	mov.w	r1, #3
    c280:	f004 fd1a 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
    c284:	f641 606c 	movw	r0, #7788	; 0x1e6c
    c288:	f2c1 0000 	movt	r0, #4096	; 0x1000
    c28c:	f04f 0104 	mov.w	r1, #4
    c290:	f004 fd12 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
    c294:	f641 65e4 	movw	r5, #7908	; 0x1ee4
    c298:	f2c1 0500 	movt	r5, #4096	; 0x1000
    c29c:	4628      	mov	r0, r5
    c29e:	f04f 01ff 	mov.w	r1, #255	; 0xff
    c2a2:	f004 fd09 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
	};
	// currently not used:
	//const uint8_t getPinIndex() const { return pin_index; }
};

static const Pin NullPin(NullPort, 0);
    c2a6:	f641 60f0 	movw	r0, #7920	; 0x1ef0
    c2aa:	f2c1 0000 	movt	r0, #4096	; 0x1000
    c2ae:	4629      	mov	r1, r5
    c2b0:	f04f 0200 	mov.w	r2, #0
    c2b4:	f004 ff12 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
#include "Eeprom.hh"
//#include <avr/eeprom.h>
 
 namespace Piezo{

Pin BuzzPin = BUZZER_PIN;
    c2b8:	f641 60a4 	movw	r0, #7844	; 0x1ea4
    c2bc:	f2c1 0000 	movt	r0, #4096	; 0x1000
    c2c0:	4621      	mov	r1, r4
    c2c2:	f04f 0205 	mov.w	r2, #5
    c2c6:	f004 ff09 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
Timeout piezoTimeout;
    c2ca:	f641 60f8 	movw	r0, #7928	; 0x1ef8
    c2ce:	f2c1 0000 	movt	r0, #4096	; 0x1000
    c2d2:	f005 fa9d 	bl	11810 <Timeout::Timeout()>
	volatile bool overflow; /// Overflow indicator
	volatile bool underflow; /// Underflow indicator
public:
	CircularBufferTempl(BufSizeType size_in, BufDataType* data_in) :
		size(size_in), length(0), start(0), data(data_in), overflow(false),
				underflow(false) {
    c2d6:	f641 63d4 	movw	r3, #7892	; 0x1ed4
    c2da:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c2de:	f04f 0414 	mov.w	r4, #20
    c2e2:	801c      	strh	r4, [r3, #0]
    c2e4:	f04f 0200 	mov.w	r2, #0
    c2e8:	4611      	mov	r1, r2
    c2ea:	805a      	strh	r2, [r3, #2]
    c2ec:	809a      	strh	r2, [r3, #4]
    c2ee:	f641 60ac 	movw	r0, #7852	; 0x1eac
    c2f2:	f2c1 0000 	movt	r0, #4096	; 0x1000
    c2f6:	6098      	str	r0, [r3, #8]
    c2f8:	731a      	strb	r2, [r3, #12]
    c2fa:	735a      	strb	r2, [r3, #13]
    c2fc:	f641 6350 	movw	r3, #7760	; 0x1e50
    c300:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c304:	801c      	strh	r4, [r3, #0]
    c306:	805a      	strh	r2, [r3, #2]
    c308:	809a      	strh	r2, [r3, #4]
    c30a:	f641 6278 	movw	r2, #7800	; 0x1e78
    c30e:	f2c1 0200 	movt	r2, #4096	; 0x1000
    c312:	609a      	str	r2, [r3, #8]
    c314:	7319      	strb	r1, [r3, #12]
    c316:	7359      	strb	r1, [r3, #13]
		setTone(frequencies.pop(), durations.pop());
	else
		playing = false;
   }
}
}
    c318:	bd38      	pop	{r3, r4, r5, pc}
    c31a:	bf00      	nop

0000c31c <planner::setMaxAxisJerk(float, unsigned char)>:
	void setAccelerationOn(bool on){
		accelerationON = on;
	}
	
	void setMaxAxisJerk(float jerk, uint8_t axis) {
		if (axis < STEPPER_COUNT)
    c31c:	2903      	cmp	r1, #3
			axes[axis].max_axis_jerk = jerk;
    c31e:	bf9f      	itttt	ls
    c320:	f242 4304 	movwls	r3, #9220	; 0x2404
    c324:	f2c1 0300 	movtls	r3, #4096	; 0x1000
    c328:	eb01 0181 	addls.w	r1, r1, r1, lsl #2
    c32c:	eb03 0381 	addls.w	r3, r3, r1, lsl #2
    c330:	bf98      	it	ls
    c332:	6118      	strls	r0, [r3, #16]
    c334:	4770      	bx	lr
    c336:	bf00      	nop

0000c338 <planner::setAxisMaxLength(long, unsigned char, bool)>:
	}
	
	void setAxisMaxLength(int32_t length, uint8_t axis, bool max){
		if (axis < STEPPER_COUNT){
    c338:	2903      	cmp	r1, #3
    c33a:	d813      	bhi.n	c364 <planner::setAxisMaxLength(long, unsigned char, bool)+0x2c>
			if (max){
    c33c:	b14a      	cbz	r2, c352 <planner::setAxisMaxLength(long, unsigned char, bool)+0x1a>
				axes[axis].max_length = length;
    c33e:	f242 4304 	movw	r3, #9220	; 0x2404
    c342:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c346:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    c34a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    c34e:	6058      	str	r0, [r3, #4]
    c350:	4770      	bx	lr
			} else {
				axes[axis].min_length = length;
    c352:	f242 4304 	movw	r3, #9220	; 0x2404
    c356:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c35a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    c35e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    c362:	6098      	str	r0, [r3, #8]
    c364:	4770      	bx	lr
    c366:	bf00      	nop

0000c368 <planner::setMaxXYJerk(float)>:
		}
	}
	
	
	void setMaxXYJerk(float jerk) {
		max_xy_jerk = jerk;
    c368:	f641 731c 	movw	r3, #7964	; 0x1f1c
    c36c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c370:	6018      	str	r0, [r3, #0]
	}
    c372:	4770      	bx	lr

0000c374 <planner::setAxisStepsPerMM(float, unsigned char)>:
	
	void setAxisStepsPerMM(float steps_per_mm, uint8_t axis) {
		if (axis < STEPPER_COUNT)
    c374:	2903      	cmp	r1, #3
			axes[axis].steps_per_mm = steps_per_mm;
    c376:	bf9f      	itttt	ls
    c378:	f242 4304 	movwls	r3, #9220	; 0x2404
    c37c:	f2c1 0300 	movtls	r3, #4096	; 0x1000
    c380:	eb01 0181 	addls.w	r1, r1, r1, lsl #2
    c384:	f843 0021 	strls.w	r0, [r3, r1, lsl #2]
    c388:	4770      	bx	lr
    c38a:	bf00      	nop

0000c38c <planner::setAcceleration(long)>:
	}

	void setAcceleration(int32_t new_acceleration) {
    c38c:	b510      	push	{r4, lr}
		default_acceleration = (float)new_acceleration;
    c38e:	f641 7428 	movw	r4, #7976	; 0x1f28
    c392:	f2c1 0400 	movt	r4, #4096	; 0x1000
    c396:	f006 fb5f 	bl	12a58 <__aeabi_i2f>
    c39a:	6020      	str	r0, [r4, #0]
	}
    c39c:	bd10      	pop	{r4, pc}
    c39e:	bf00      	nop

0000c3a0 <planner::setAxisAcceleration(long, unsigned char)>:
	
	// This is in steps/mm.
	void setAxisAcceleration(int32_t new_acceleration, uint8_t axis) {
    c3a0:	b570      	push	{r4, r5, r6, lr}
		if (axis < STEPPER_COUNT)
    c3a2:	2903      	cmp	r1, #3
    c3a4:	d810      	bhi.n	c3c8 <planner::setAxisAcceleration(long, unsigned char)+0x28>
			axes[axis].max_acceleration = (float)new_acceleration*axes[axis].steps_per_mm;
    c3a6:	f242 4604 	movw	r6, #9220	; 0x2404
    c3aa:	f2c1 0600 	movt	r6, #4096	; 0x1000
    c3ae:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    c3b2:	ea4f 0481 	mov.w	r4, r1, lsl #2
    c3b6:	1935      	adds	r5, r6, r4
    c3b8:	f006 fb4e 	bl	12a58 <__aeabi_i2f>
    c3bc:	5931      	ldr	r1, [r6, r4]
    c3be:	f006 fb9f 	bl	12b00 <__aeabi_fmul>
    c3c2:	f006 fd89 	bl	12ed8 <__aeabi_f2uiz>
    c3c6:	60e8      	str	r0, [r5, #12]
    c3c8:	bd70      	pop	{r4, r5, r6, pc}
    c3ca:	bf00      	nop

0000c3cc <planner::Block::calculate_trapezoid(float const&)>:
	}
#endif

	// Calculates trapezoid parameters so that the entry- and exit-speed is compensated by the provided factors.
	// calculate_trapezoid_for_block(block, block->entry_speed/block->nominal_speed, exit_factor_speed/block->nominal_speed);
	bool Block::calculate_trapezoid(const float &exit_factor_speed) {
    c3cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c3d0:	4604      	mov	r4, r0
    c3d2:	4689      	mov	r9, r1

		float entry_factor = entry_speed/nominal_speed;
    c3d4:	6a06      	ldr	r6, [r0, #32]
		float exit_factor = exit_factor_speed/nominal_speed;
		
		uint32_t local_initial_rate = ceil((float)nominal_rate*entry_factor); // (step/min)
    c3d6:	f8d0 8038 	ldr.w	r8, [r0, #56]	; 0x38
    c3da:	4640      	mov	r0, r8
    c3dc:	f006 fb38 	bl	12a50 <__aeabi_ui2f>
    c3e0:	4607      	mov	r7, r0

	// Calculates trapezoid parameters so that the entry- and exit-speed is compensated by the provided factors.
	// calculate_trapezoid_for_block(block, block->entry_speed/block->nominal_speed, exit_factor_speed/block->nominal_speed);
	bool Block::calculate_trapezoid(const float &exit_factor_speed) {

		float entry_factor = entry_speed/nominal_speed;
    c3e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    c3e4:	4631      	mov	r1, r6
    c3e6:	f006 fc3f 	bl	12c68 <__aeabi_fdiv>
    c3ea:	4601      	mov	r1, r0
		float exit_factor = exit_factor_speed/nominal_speed;
		
		uint32_t local_initial_rate = ceil((float)nominal_rate*entry_factor); // (step/min)
    c3ec:	4638      	mov	r0, r7
    c3ee:	f006 fb87 	bl	12b00 <__aeabi_fmul>
    c3f2:	f005 ffa1 	bl	12338 <__aeabi_f2d>
    c3f6:	f012 f90b 	bl	1e610 <ceil>
    c3fa:	f006 fa03 	bl	12804 <__aeabi_d2uiz>
    c3fe:	4605      	mov	r5, r0
	// Calculates trapezoid parameters so that the entry- and exit-speed is compensated by the provided factors.
	// calculate_trapezoid_for_block(block, block->entry_speed/block->nominal_speed, exit_factor_speed/block->nominal_speed);
	bool Block::calculate_trapezoid(const float &exit_factor_speed) {

		float entry_factor = entry_speed/nominal_speed;
		float exit_factor = exit_factor_speed/nominal_speed;
    c400:	f8d9 0000 	ldr.w	r0, [r9]
    c404:	4631      	mov	r1, r6
    c406:	f006 fc2f 	bl	12c68 <__aeabi_fdiv>
		
		uint32_t local_initial_rate = ceil((float)nominal_rate*entry_factor); // (step/min)
		uint32_t local_final_rate = ceil((float)nominal_rate*exit_factor); // (step/min)
    c40a:	4639      	mov	r1, r7
    c40c:	f006 fb78 	bl	12b00 <__aeabi_fmul>
    c410:	f005 ff92 	bl	12338 <__aeabi_f2d>
    c414:	f012 f8fc 	bl	1e610 <ceil>
    c418:	f006 f9f4 	bl	12804 <__aeabi_d2uiz>
		
		// Limit minimal step rate (Otherwise the timer will overflow.)
		if(local_initial_rate < 120)
			local_initial_rate = 120;
    c41c:	2d77      	cmp	r5, #119	; 0x77
    c41e:	bf98      	it	ls
    c420:	2578      	movls	r5, #120	; 0x78
		if(local_final_rate < 120)
			local_final_rate = 120;
    c422:	2877      	cmp	r0, #119	; 0x77
    c424:	bf98      	it	ls
    c426:	2078      	movls	r0, #120	; 0x78
		
		int32_t local_initial_rate_squared = (local_initial_rate * local_initial_rate);
    c428:	fb05 fc05 	mul.w	ip, r5, r5
		int32_t local_final_rate_squared   = (local_final_rate   * local_final_rate);
    c42c:	fb00 f700 	mul.w	r7, r0, r0
		int32_t nominal_rate_squared       = (nominal_rate       * nominal_rate);
		
		int32_t local_acceleration_doubled = acceleration_st<<(1); // == acceleration_st*2
    c430:	6c63      	ldr	r3, [r4, #68]	; 0x44

	// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
	// given acceleration:
	FORCE_INLINE int32_t estimate_acceleration_distance(const int32_t &initial_rate_squared, const int32_t &target_rate_squared, const int32_t &acceleration_doubled)
	{
		if (acceleration_doubled!=0) {
    c432:	0059      	lsls	r1, r3, #1
			return (target_rate_squared-initial_rate_squared)/acceleration_doubled;
		}
		else {
			return 0;  // acceleration was 0, set acceleration distance to 0
    c434:	bf04      	itt	eq
    c436:	2300      	moveq	r3, #0
    c438:	4698      	moveq	r8, r3

	// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
	// given acceleration:
	FORCE_INLINE int32_t estimate_acceleration_distance(const int32_t &initial_rate_squared, const int32_t &target_rate_squared, const int32_t &acceleration_doubled)
	{
		if (acceleration_doubled!=0) {
    c43a:	d00f      	beq.n	c45c <planner::Block::calculate_trapezoid(float const&)+0x90>
		if(local_final_rate < 120)
			local_final_rate = 120;
		
		int32_t local_initial_rate_squared = (local_initial_rate * local_initial_rate);
		int32_t local_final_rate_squared   = (local_final_rate   * local_final_rate);
		int32_t nominal_rate_squared       = (nominal_rate       * nominal_rate);
    c43c:	fb08 f808 	mul.w	r8, r8, r8
	// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
	// given acceleration:
	FORCE_INLINE int32_t estimate_acceleration_distance(const int32_t &initial_rate_squared, const int32_t &target_rate_squared, const int32_t &acceleration_doubled)
	{
		if (acceleration_doubled!=0) {
			return (target_rate_squared-initial_rate_squared)/acceleration_doubled;
    c440:	ebcc 0308 	rsb	r3, ip, r8
    c444:	fb93 f3f1 	sdiv	r3, r3, r1
		int32_t local_acceleration_doubled = acceleration_st<<(1); // == acceleration_st*2
		
		int32_t accelerate_steps =
			/*ceil*/(estimate_acceleration_distance(local_initial_rate_squared, nominal_rate_squared, local_acceleration_doubled));
		int32_t decelerate_steps =
			/*floor*/(estimate_acceleration_distance(nominal_rate_squared, local_final_rate_squared, -local_acceleration_doubled));
    c448:	f1c1 0200 	rsb	r2, r1, #0

	// Calculates the distance (not time) it takes to accelerate from initial_rate to target_rate using the 
	// given acceleration:
	FORCE_INLINE int32_t estimate_acceleration_distance(const int32_t &initial_rate_squared, const int32_t &target_rate_squared, const int32_t &acceleration_doubled)
	{
		if (acceleration_doubled!=0) {
    c44c:	b122      	cbz	r2, c458 <planner::Block::calculate_trapezoid(float const&)+0x8c>
			return (target_rate_squared-initial_rate_squared)/acceleration_doubled;
    c44e:	ebc8 0807 	rsb	r8, r8, r7
    c452:	fb98 f8f2 	sdiv	r8, r8, r2
    c456:	e001      	b.n	c45c <planner::Block::calculate_trapezoid(float const&)+0x90>
		}
		else {
			return 0;  // acceleration was 0, set acceleration distance to 0
    c458:	f04f 0800 	mov.w	r8, #0
			/*ceil*/(estimate_acceleration_distance(local_initial_rate_squared, nominal_rate_squared, local_acceleration_doubled));
		int32_t decelerate_steps =
			/*floor*/(estimate_acceleration_distance(nominal_rate_squared, local_final_rate_squared, -local_acceleration_doubled));

		// Calculate the size of Plateau of Nominal Rate.
		int32_t plateau_steps = step_event_count-accelerate_steps-decelerate_steps;
    c45c:	8aa6      	ldrh	r6, [r4, #20]
    c45e:	1af2      	subs	r2, r6, r3

		// Is the Plateau of Nominal Rate smaller than nothing? That means no cruising, and we will
		// have to use intersection_distance() to calculate when to abort acceleration and start braking
		// in order to reach the local_final_rate exactly at the end of this block.
		
		if (plateau_steps < 0) {
    c460:	ebb2 0808 	subs.w	r8, r2, r8
    c464:	d511      	bpl.n	c48a <planner::Block::calculate_trapezoid(float const&)+0xbe>
	// a total travel of distance. This can be used to compute the intersection point between acceleration and
	// deceleration in the cases where the trapezoid has no plateau (i.e. never reaches maximum speed)

	FORCE_INLINE int32_t intersection_distance(const int32_t &initial_rate_squared, const int32_t &final_rate_squared, const int32_t &acceleration_mangled, const int32_t &acceleration_quadrupled, const int32_t &distance) 
	{
		if (acceleration_quadrupled!=0) {
    c466:	004a      	lsls	r2, r1, #1
			return (acceleration_mangled*distance-initial_rate_squared+final_rate_squared)/acceleration_quadrupled;
    c468:	bf1f      	itttt	ne
    c46a:	fb06 f301 	mulne.w	r3, r6, r1
    c46e:	ebcc 0303 	rsbne	r3, ip, r3
    c472:	18fb      	addne	r3, r7, r3
    c474:	fb93 f3f2 	sdivne	r3, r3, r2
    c478:	bf14      	ite	ne
    c47a:	ea23 73e3 	bicne.w	r3, r3, r3, asr #31

template <typename T>
inline const T& min(const T& a, const T& b) { return (a)<(b)?(a):(b); }

template <typename T>
inline const T& max(const T& a, const T& b) { return (a)>(b)?(a):(b); }
    c47e:	2300      	moveq	r3, #0
	// deceleration in the cases where the trapezoid has no plateau (i.e. never reaches maximum speed)

	FORCE_INLINE int32_t intersection_distance(const int32_t &initial_rate_squared, const int32_t &final_rate_squared, const int32_t &acceleration_mangled, const int32_t &acceleration_quadrupled, const int32_t &distance) 
	{
		if (acceleration_quadrupled!=0) {
			return (acceleration_mangled*distance-initial_rate_squared+final_rate_squared)/acceleration_quadrupled;
    c480:	42b3      	cmp	r3, r6
    c482:	bfa8      	it	ge
    c484:	4633      	movge	r3, r6
			accelerate_steps = /*ceil*/(
				intersection_distance(local_initial_rate_squared, local_final_rate_squared, local_acceleration_doubled, local_acceleration_quadrupled, step_event_count));
			accelerate_steps = max(accelerate_steps, 0L); // Check limits due to numerical round-off
			
			accelerate_steps = min(accelerate_steps, (int32_t)step_event_count);
			plateau_steps = 0;
    c486:	f04f 0800 	mov.w	r8, #0

		}

		//bool successfully_replanned = true;
//		ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {  // Fill variables used by the stepper in a critical section
				accelerate_until = accelerate_steps;
    c48a:	b29b      	uxth	r3, r3
    c48c:	82e3      	strh	r3, [r4, #22]
				decelerate_after = accelerate_steps+plateau_steps;
    c48e:	4443      	add	r3, r8
    c490:	8323      	strh	r3, [r4, #24]
				initial_rate     = local_initial_rate;
    c492:	63e5      	str	r5, [r4, #60]	; 0x3c
				final_rate       = local_final_rate;
    c494:	6420      	str	r0, [r4, #64]	; 0x40
//		} // ISR state will be automatically restored here
		
	
		
		return true; //successfully_replanned;
	}
    c496:	f04f 0001 	mov.w	r0, #1
    c49a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c49e:	bf00      	nop

0000c4a0 <planner::planner_reverse_pass()>:
		}
	}

	// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
	// implements the reverse pass.
	void planner_reverse_pass() {
    c4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c4a4:	b083      	sub	sp, #12
		inline bool isFull() {
			return (getNextIndex(head) == tail);
		}
		
		inline BufSizeType getUsedCount() {
			return ((head-tail+size) & size_mask);
    c4a6:	f242 438c 	movw	r3, #9356	; 0x248c
    c4aa:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c4ae:	7818      	ldrb	r0, [r3, #0]
    c4b0:	785a      	ldrb	r2, [r3, #1]
    c4b2:	7899      	ldrb	r1, [r3, #2]
    c4b4:	1841      	adds	r1, r0, r1
    c4b6:	1a89      	subs	r1, r1, r2
    c4b8:	78da      	ldrb	r2, [r3, #3]
	}

	// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
	// implements the reverse pass.
	void planner_reverse_pass() {
		if (block_buffer.getUsedCount() > 1) {
    c4ba:	ea01 0302 	and.w	r3, r1, r2
    c4be:	2b01      	cmp	r3, #1
    c4c0:	d968      	bls.n	c594 <planner::planner_reverse_pass()+0xf4>
		
		inline BufDataType *getHead() {
			return &data[head];
		}
		inline BufSizeType getHeadIndex() {
			return head;
    c4c2:	f242 438c 	movw	r3, #9356	; 0x248c
    c4c6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c4ca:	781e      	ldrb	r6, [r3, #0]
		}
		
		inline BufDataType &operator[] (BufSizeType index) {
			 // adding size should make negative indexes < size work ok
			// int16_t offset = index < 0 ? index : ((index + size) & size_mask);
			return data[index];
    c4cc:	685b      	ldr	r3, [r3, #4]
    c4ce:	f04f 084c 	mov.w	r8, #76	; 0x4c
    c4d2:	fb08 3806 	mla	r8, r8, r6, r3
		inline BufSizeType getNextIndex(BufSizeType from) {
			return ((from + 1) & size_mask);
		}
		
		inline BufSizeType getPreviousIndex(BufSizeType from) {
			return (((from+size) - 1) & size_mask);
    c4d6:	f242 458c 	movw	r5, #9356	; 0x248c
    c4da:	f2c1 0500 	movt	r5, #4096	; 0x1000
		}
		
		inline BufDataType &operator[] (BufSizeType index) {
			 // adding size should make negative indexes < size work ok
			// int16_t offset = index < 0 ? index : ((index + size) & size_mask);
			return data[index];
    c4de:	f04f 094c 	mov.w	r9, #76	; 0x4c
    c4e2:	e000      	b.n	c4e6 <planner::planner_reverse_pass()+0x46>
			uint8_t block_index = block_buffer.getHeadIndex();
			Block *block[2] = { &block_buffer[block_index], NULL };
			do { 
				block_index = block_buffer.getPreviousIndex(block_index); 
				block[1] = block[0];
				block[0] = &block_buffer[block_index];
    c4e4:	46a0      	mov	r8, r4
		inline BufSizeType getNextIndex(BufSizeType from) {
			return ((from + 1) & size_mask);
		}
		
		inline BufSizeType getPreviousIndex(BufSizeType from) {
			return (((from+size) - 1) & size_mask);
    c4e6:	78ab      	ldrb	r3, [r5, #2]
    c4e8:	f103 33ff 	add.w	r3, r3, #4294967295
    c4ec:	18f6      	adds	r6, r6, r3
    c4ee:	78eb      	ldrb	r3, [r5, #3]
    c4f0:	401e      	ands	r6, r3
		}
		
		inline BufDataType &operator[] (BufSizeType index) {
			 // adding size should make negative indexes < size work ok
			// int16_t offset = index < 0 ? index : ((index + size) & size_mask);
			return data[index];
    c4f2:	686c      	ldr	r4, [r5, #4]
    c4f4:	fb09 4406 	mla	r4, r9, r6, r4

	}

	// The kernel called by planner_recalculate() when scanning the plan from last to first entry.
	inline void planner_reverse_pass_kernel(Block *current, Block *next) {
		if(!current) { return; }
    c4f8:	2c00      	cmp	r4, #0
    c4fa:	d048      	beq.n	c58e <planner::planner_reverse_pass()+0xee>

		// If entry speed is already at the maximum entry speed, no need to recheck. Block is cruising.
		// If not, block in state of acceleration or deceleration. Reset entry speed to maximum and
		// check for maximum allowable speed reductions to ensure maximum possible planned speed.
		// We cannot change the entry speed of a Busy block ... we've already entered...
		if (current->entry_speed != current->max_entry_speed && !current->flags & Block::Busy) {
    c4fc:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    c4fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
    c500:	4639      	mov	r1, r7
    c502:	f006 fc91 	bl	12e28 <__aeabi_fcmpeq>
    c506:	2800      	cmp	r0, #0
    c508:	d141      	bne.n	c58e <planner::planner_reverse_pass()+0xee>
    c50a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    c50e:	2b00      	cmp	r3, #0
    c510:	d13d      	bne.n	c58e <planner::planner_reverse_pass()+0xee>
			// If nominal length true, max junction speed is guaranteed to be reached. Only compute
			// for max allowable speed if block is decelerating and nominal length is false.
			if ((!(current->flags & Block::NominalLength)) && (current->max_entry_speed >= next->entry_speed)) {
    c512:	f8d8 8024 	ldr.w	r8, [r8, #36]	; 0x24
    c516:	4638      	mov	r0, r7
    c518:	4641      	mov	r1, r8
    c51a:	f006 fca3 	bl	12e64 <__aeabi_fcmpge>
    c51e:	2800      	cmp	r0, #0
    c520:	d02e      	beq.n	c580 <planner::planner_reverse_pass()+0xe0>
	
	// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
	// acceleration within the allotted distance.
	// Needs to be conbverted to fixed-point.
	FORCE_INLINE float max_allowable_speed(const float &acceleration, const float &target_velocity, const float &distance) {
		return sqrt((target_velocity*target_velocity)-(acceleration*2.0)*distance);
    c522:	4640      	mov	r0, r8
    c524:	4641      	mov	r1, r8
    c526:	f006 faeb 	bl	12b00 <__aeabi_fmul>
    c52a:	f005 ff05 	bl	12338 <__aeabi_f2d>
    c52e:	e9cd 0100 	strd	r0, r1, [sp]
		if (current->entry_speed != current->max_entry_speed && !current->flags & Block::Busy) {
			// If nominal length true, max junction speed is guaranteed to be reached. Only compute
			// for max allowable speed if block is decelerating and nominal length is false.
			if ((!(current->flags & Block::NominalLength)) && (current->max_entry_speed >= next->entry_speed)) {
				current->entry_speed = min( current->max_entry_speed,
					max_allowable_speed(-current->acceleration,next->entry_speed,current->millimeters));
    c532:	6b20      	ldr	r0, [r4, #48]	; 0x30
    c534:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
	
	// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
	// acceleration within the allotted distance.
	// Needs to be conbverted to fixed-point.
	FORCE_INLINE float max_allowable_speed(const float &acceleration, const float &target_velocity, const float &distance) {
		return sqrt((target_velocity*target_velocity)-(acceleration*2.0)*distance);
    c538:	f005 fefe 	bl	12338 <__aeabi_f2d>
    c53c:	4602      	mov	r2, r0
    c53e:	460b      	mov	r3, r1
    c540:	f005 fd9c 	bl	1207c <__adddf3>
    c544:	4682      	mov	sl, r0
    c546:	468b      	mov	fp, r1
    c548:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    c54a:	f005 fef5 	bl	12338 <__aeabi_f2d>
    c54e:	4602      	mov	r2, r0
    c550:	460b      	mov	r3, r1
    c552:	4650      	mov	r0, sl
    c554:	4659      	mov	r1, fp
    c556:	f005 ff43 	bl	123e0 <__aeabi_dmul>
    c55a:	4602      	mov	r2, r0
    c55c:	460b      	mov	r3, r1
    c55e:	e9dd 0100 	ldrd	r0, r1, [sp]
    c562:	f005 fd89 	bl	12078 <__aeabi_dsub>
    c566:	f012 f8eb 	bl	1e740 <sqrt>
    c56a:	f006 f96b 	bl	12844 <__aeabi_d2f>
    c56e:	4680      	mov	r8, r0
#ifdef max
#undef max
#endif

template <typename T>
inline const T& min(const T& a, const T& b) { return (a)<(b)?(a):(b); }
    c570:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    c572:	4639      	mov	r1, r7
    c574:	f006 fc80 	bl	12e78 <__aeabi_fcmpgt>
    c578:	b900      	cbnz	r0, c57c <planner::planner_reverse_pass()+0xdc>
    c57a:	4647      	mov	r7, r8
		if (current->entry_speed != current->max_entry_speed && !current->flags & Block::Busy) {
			// If nominal length true, max junction speed is guaranteed to be reached. Only compute
			// for max allowable speed if block is decelerating and nominal length is false.
			if ((!(current->flags & Block::NominalLength)) && (current->max_entry_speed >= next->entry_speed)) {
				current->entry_speed = min( current->max_entry_speed,
					max_allowable_speed(-current->acceleration,next->entry_speed,current->millimeters));
    c57c:	6267      	str	r7, [r4, #36]	; 0x24
    c57e:	e000      	b.n	c582 <planner::planner_reverse_pass()+0xe2>
			} else {
				current->entry_speed = current->max_entry_speed;
    c580:	6267      	str	r7, [r4, #36]	; 0x24
			}
			current->flags |= Block::Recalculate;
    c582:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    c586:	f043 0302 	orr.w	r3, r3, #2
    c58a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
		
		inline BufDataType *getTail() {
			return &data[tail];
		}
		inline BufSizeType getTailIndex() {
			return tail;
    c58e:	786b      	ldrb	r3, [r5, #1]
	// implements the reverse pass.
	void planner_reverse_pass() {
		if (block_buffer.getUsedCount() > 1) {
			uint8_t block_index = block_buffer.getHeadIndex();
			Block *block[2] = { &block_buffer[block_index], NULL };
			do { 
    c590:	429e      	cmp	r6, r3
    c592:	d1a7      	bne.n	c4e4 <planner::planner_reverse_pass()+0x44>
				block[1] = block[0];
				block[0] = &block_buffer[block_index];
				planner_reverse_pass_kernel(block[0], block[1]);
			} while (block_index != block_buffer.getTailIndex());
		}
	}
    c594:	b003      	add	sp, #12
    c596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c59a:	bf00      	nop

0000c59c <planner::planner_forward_pass()>:
		}
	}

	// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
	// implements the forward pass.
	void planner_forward_pass() {
    c59c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c5a0:	b085      	sub	sp, #20
		
		inline BufDataType *getTail() {
			return &data[tail];
		}
		inline BufSizeType getTailIndex() {
			return tail;
    c5a2:	f242 438c 	movw	r3, #9356	; 0x248c
    c5a6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c5aa:	785d      	ldrb	r5, [r3, #1]
		
		inline BufDataType *getHead() {
			return &data[head];
		}
		inline BufSizeType getHeadIndex() {
			return head;
    c5ac:	781b      	ldrb	r3, [r3, #0]
	// implements the forward pass.
	void planner_forward_pass() {
		uint8_t block_index = block_buffer.getTailIndex();
		Block *block[3] = { NULL, NULL, NULL };

		while(block_index != block_buffer.getHeadIndex()) {
    c5ae:	429d      	cmp	r5, r3
    c5b0:	f040 80a2 	bne.w	c6f8 <planner::planner_forward_pass()+0x15c>
    c5b4:	e0b2      	b.n	c71c <planner::planner_forward_pass()+0x180>
		}
		
		inline BufDataType &operator[] (BufSizeType index) {
			 // adding size should make negative indexes < size work ok
			// int16_t offset = index < 0 ? index : ((index + size) & size_mask);
			return data[index];
    c5b6:	6873      	ldr	r3, [r6, #4]
    c5b8:	fb0a 3905 	mla	r9, sl, r5, r3
		}
	}

	// The kernel called by planner_recalculate() when scanning the plan from first to last entry.
	inline void planner_forward_pass_kernel(Block *previous, Block *current, Block *next) {
		if(!previous) { return; }
    c5bc:	2c00      	cmp	r4, #0
    c5be:	d047      	beq.n	c650 <planner::planner_forward_pass()+0xb4>

		// If the previous block is an acceleration block, but it is not long enough to complete the
		// full speed change within the block, we need to adjust the entry speed accordingly. Entry
		// speeds have already been reset, maximized, and reverse planned by reverse planner.
		// If nominal length is true, max junction speed is guaranteed to be reached. No need to recheck.
		if (!(previous->flags & Block::NominalLength)) {
    c5c0:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    c5c4:	f013 0f04 	tst.w	r3, #4
    c5c8:	d142      	bne.n	c650 <planner::planner_forward_pass()+0xb4>
			if (previous->entry_speed <= current->entry_speed) {
    c5ca:	6a67      	ldr	r7, [r4, #36]	; 0x24
    c5cc:	4638      	mov	r0, r7
    c5ce:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
    c5d2:	f006 fc3d 	bl	12e50 <__aeabi_fcmple>
    c5d6:	2800      	cmp	r0, #0
    c5d8:	d03a      	beq.n	c650 <planner::planner_forward_pass()+0xb4>
	
	// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
	// acceleration within the allotted distance.
	// Needs to be conbverted to fixed-point.
	FORCE_INLINE float max_allowable_speed(const float &acceleration, const float &target_velocity, const float &distance) {
		return sqrt((target_velocity*target_velocity)-(acceleration*2.0)*distance);
    c5da:	4638      	mov	r0, r7
    c5dc:	4639      	mov	r1, r7
    c5de:	f006 fa8f 	bl	12b00 <__aeabi_fmul>
    c5e2:	f005 fea9 	bl	12338 <__aeabi_f2d>
    c5e6:	e9cd 0100 	strd	r0, r1, [sp]
		// speeds have already been reset, maximized, and reverse planned by reverse planner.
		// If nominal length is true, max junction speed is guaranteed to be reached. No need to recheck.
		if (!(previous->flags & Block::NominalLength)) {
			if (previous->entry_speed <= current->entry_speed) {
				float entry_speed = min( current->entry_speed,
					max_allowable_speed(-previous->acceleration,previous->entry_speed,previous->millimeters) );
    c5ea:	6b20      	ldr	r0, [r4, #48]	; 0x30
    c5ec:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
	
	// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
	// acceleration within the allotted distance.
	// Needs to be conbverted to fixed-point.
	FORCE_INLINE float max_allowable_speed(const float &acceleration, const float &target_velocity, const float &distance) {
		return sqrt((target_velocity*target_velocity)-(acceleration*2.0)*distance);
    c5f0:	f005 fea2 	bl	12338 <__aeabi_f2d>
    c5f4:	4602      	mov	r2, r0
    c5f6:	460b      	mov	r3, r1
    c5f8:	f005 fd40 	bl	1207c <__adddf3>
    c5fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
    c600:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    c602:	f005 fe99 	bl	12338 <__aeabi_f2d>
    c606:	4602      	mov	r2, r0
    c608:	460b      	mov	r3, r1
    c60a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c60e:	f005 fee7 	bl	123e0 <__aeabi_dmul>
    c612:	4602      	mov	r2, r0
    c614:	460b      	mov	r3, r1
    c616:	e9dd 0100 	ldrd	r0, r1, [sp]
    c61a:	f005 fd2d 	bl	12078 <__aeabi_dsub>
    c61e:	f012 f88f 	bl	1e740 <sqrt>
    c622:	f006 f90f 	bl	12844 <__aeabi_d2f>
    c626:	4607      	mov	r7, r0
#ifdef max
#undef max
#endif

template <typename T>
inline const T& min(const T& a, const T& b) { return (a)<(b)?(a):(b); }
    c628:	f8d8 4024 	ldr.w	r4, [r8, #36]	; 0x24
    c62c:	4621      	mov	r1, r4
    c62e:	f006 fc23 	bl	12e78 <__aeabi_fcmpgt>
    c632:	b100      	cbz	r0, c636 <planner::planner_forward_pass()+0x9a>
		// speeds have already been reset, maximized, and reverse planned by reverse planner.
		// If nominal length is true, max junction speed is guaranteed to be reached. No need to recheck.
		if (!(previous->flags & Block::NominalLength)) {
			if (previous->entry_speed <= current->entry_speed) {
				float entry_speed = min( current->entry_speed,
					max_allowable_speed(-previous->acceleration,previous->entry_speed,previous->millimeters) );
    c634:	4627      	mov	r7, r4

				// Check for junction speed change
				if (current->entry_speed != entry_speed) {
    c636:	4620      	mov	r0, r4
    c638:	4639      	mov	r1, r7
    c63a:	f006 fbf5 	bl	12e28 <__aeabi_fcmpeq>
    c63e:	b938      	cbnz	r0, c650 <planner::planner_forward_pass()+0xb4>
					current->entry_speed = entry_speed;
    c640:	f8c8 7024 	str.w	r7, [r8, #36]	; 0x24
					current->flags |= Block::Recalculate;
    c644:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
    c648:	f043 0302 	orr.w	r3, r3, #2
    c64c:	f888 3048 	strb.w	r3, [r8, #72]	; 0x48
		// speeds have already been reset, maximized, and reverse planned by reverse planner.
		// If nominal length is true, max junction speed is guaranteed to be reached. No need to recheck.
		if (!(previous->flags & Block::NominalLength)) {
			if (previous->entry_speed <= current->entry_speed) {
				float entry_speed = min( current->entry_speed,
					max_allowable_speed(-previous->acceleration,previous->entry_speed,previous->millimeters) );
    c650:	4644      	mov	r4, r8
		}
		
		inline BufDataType &operator[] (BufSizeType index) {
			 // adding size should make negative indexes < size work ok
			// int16_t offset = index < 0 ? index : ((index + size) & size_mask);
			return data[index];
    c652:	46c8      	mov	r8, r9
		inline BufSizeType getTailIndex() {
			return tail;
		}
		
		inline BufSizeType getNextIndex(BufSizeType from) {
			return ((from + 1) & size_mask);
    c654:	f105 0501 	add.w	r5, r5, #1
    c658:	78f3      	ldrb	r3, [r6, #3]
    c65a:	401d      	ands	r5, r3
		
		inline BufDataType *getHead() {
			return &data[head];
		}
		inline BufSizeType getHeadIndex() {
			return head;
    c65c:	7833      	ldrb	r3, [r6, #0]
	// implements the forward pass.
	void planner_forward_pass() {
		uint8_t block_index = block_buffer.getTailIndex();
		Block *block[3] = { NULL, NULL, NULL };

		while(block_index != block_buffer.getHeadIndex()) {
    c65e:	429d      	cmp	r5, r3
    c660:	d1a9      	bne.n	c5b6 <planner::planner_forward_pass()+0x1a>
		}
	}

	// The kernel called by planner_recalculate() when scanning the plan from first to last entry.
	inline void planner_forward_pass_kernel(Block *previous, Block *current, Block *next) {
		if(!previous) { return; }
    c662:	2c00      	cmp	r4, #0
    c664:	d05a      	beq.n	c71c <planner::planner_forward_pass()+0x180>

		// If the previous block is an acceleration block, but it is not long enough to complete the
		// full speed change within the block, we need to adjust the entry speed accordingly. Entry
		// speeds have already been reset, maximized, and reverse planned by reverse planner.
		// If nominal length is true, max junction speed is guaranteed to be reached. No need to recheck.
		if (!(previous->flags & Block::NominalLength)) {
    c666:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    c66a:	f013 0f04 	tst.w	r3, #4
    c66e:	d155      	bne.n	c71c <planner::planner_forward_pass()+0x180>
			if (previous->entry_speed <= current->entry_speed) {
    c670:	6a65      	ldr	r5, [r4, #36]	; 0x24
    c672:	4628      	mov	r0, r5
    c674:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
    c678:	f006 fbea 	bl	12e50 <__aeabi_fcmple>
    c67c:	2800      	cmp	r0, #0
    c67e:	d04d      	beq.n	c71c <planner::planner_forward_pass()+0x180>
	
	// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
	// acceleration within the allotted distance.
	// Needs to be conbverted to fixed-point.
	FORCE_INLINE float max_allowable_speed(const float &acceleration, const float &target_velocity, const float &distance) {
		return sqrt((target_velocity*target_velocity)-(acceleration*2.0)*distance);
    c680:	4628      	mov	r0, r5
    c682:	4629      	mov	r1, r5
    c684:	f006 fa3c 	bl	12b00 <__aeabi_fmul>
    c688:	f005 fe56 	bl	12338 <__aeabi_f2d>
    c68c:	4682      	mov	sl, r0
    c68e:	468b      	mov	fp, r1
		// speeds have already been reset, maximized, and reverse planned by reverse planner.
		// If nominal length is true, max junction speed is guaranteed to be reached. No need to recheck.
		if (!(previous->flags & Block::NominalLength)) {
			if (previous->entry_speed <= current->entry_speed) {
				float entry_speed = min( current->entry_speed,
					max_allowable_speed(-previous->acceleration,previous->entry_speed,previous->millimeters) );
    c690:	6b20      	ldr	r0, [r4, #48]	; 0x30
    c692:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
	
	// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
	// acceleration within the allotted distance.
	// Needs to be conbverted to fixed-point.
	FORCE_INLINE float max_allowable_speed(const float &acceleration, const float &target_velocity, const float &distance) {
		return sqrt((target_velocity*target_velocity)-(acceleration*2.0)*distance);
    c696:	f005 fe4f 	bl	12338 <__aeabi_f2d>
    c69a:	4602      	mov	r2, r0
    c69c:	460b      	mov	r3, r1
    c69e:	f005 fced 	bl	1207c <__adddf3>
    c6a2:	4606      	mov	r6, r0
    c6a4:	460f      	mov	r7, r1
    c6a6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    c6a8:	f005 fe46 	bl	12338 <__aeabi_f2d>
    c6ac:	4602      	mov	r2, r0
    c6ae:	460b      	mov	r3, r1
    c6b0:	4630      	mov	r0, r6
    c6b2:	4639      	mov	r1, r7
    c6b4:	f005 fe94 	bl	123e0 <__aeabi_dmul>
    c6b8:	4602      	mov	r2, r0
    c6ba:	460b      	mov	r3, r1
    c6bc:	4650      	mov	r0, sl
    c6be:	4659      	mov	r1, fp
    c6c0:	f005 fcda 	bl	12078 <__aeabi_dsub>
    c6c4:	f012 f83c 	bl	1e740 <sqrt>
    c6c8:	f006 f8bc 	bl	12844 <__aeabi_d2f>
    c6cc:	4605      	mov	r5, r0
#ifdef max
#undef max
#endif

template <typename T>
inline const T& min(const T& a, const T& b) { return (a)<(b)?(a):(b); }
    c6ce:	f8d8 4024 	ldr.w	r4, [r8, #36]	; 0x24
    c6d2:	4621      	mov	r1, r4
    c6d4:	f006 fbd0 	bl	12e78 <__aeabi_fcmpgt>
    c6d8:	b100      	cbz	r0, c6dc <planner::planner_forward_pass()+0x140>
		// speeds have already been reset, maximized, and reverse planned by reverse planner.
		// If nominal length is true, max junction speed is guaranteed to be reached. No need to recheck.
		if (!(previous->flags & Block::NominalLength)) {
			if (previous->entry_speed <= current->entry_speed) {
				float entry_speed = min( current->entry_speed,
					max_allowable_speed(-previous->acceleration,previous->entry_speed,previous->millimeters) );
    c6da:	4625      	mov	r5, r4

				// Check for junction speed change
				if (current->entry_speed != entry_speed) {
    c6dc:	4620      	mov	r0, r4
    c6de:	4629      	mov	r1, r5
    c6e0:	f006 fba2 	bl	12e28 <__aeabi_fcmpeq>
    c6e4:	b9d0      	cbnz	r0, c71c <planner::planner_forward_pass()+0x180>
					current->entry_speed = entry_speed;
    c6e6:	f8c8 5024 	str.w	r5, [r8, #36]	; 0x24
					current->flags |= Block::Recalculate;
    c6ea:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
    c6ee:	f043 0302 	orr.w	r3, r3, #2
    c6f2:	f888 3048 	strb.w	r3, [r8, #72]	; 0x48
    c6f6:	e011      	b.n	c71c <planner::planner_forward_pass()+0x180>
		}
		
		inline BufDataType &operator[] (BufSizeType index) {
			 // adding size should make negative indexes < size work ok
			// int16_t offset = index < 0 ? index : ((index + size) & size_mask);
			return data[index];
    c6f8:	f242 438c 	movw	r3, #9356	; 0x248c
    c6fc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c700:	685b      	ldr	r3, [r3, #4]
    c702:	f04f 084c 	mov.w	r8, #76	; 0x4c
    c706:	fb08 3805 	mla	r8, r8, r5, r3

	// planner_recalculate() needs to go over the current plan twice. Once in reverse and once forward. This 
	// implements the forward pass.
	void planner_forward_pass() {
		uint8_t block_index = block_buffer.getTailIndex();
		Block *block[3] = { NULL, NULL, NULL };
    c70a:	f04f 0400 	mov.w	r4, #0
		inline BufSizeType getTailIndex() {
			return tail;
		}
		
		inline BufSizeType getNextIndex(BufSizeType from) {
			return ((from + 1) & size_mask);
    c70e:	f242 468c 	movw	r6, #9356	; 0x248c
    c712:	f2c1 0600 	movt	r6, #4096	; 0x1000
		}
		
		inline BufDataType &operator[] (BufSizeType index) {
			 // adding size should make negative indexes < size work ok
			// int16_t offset = index < 0 ? index : ((index + size) & size_mask);
			return data[index];
    c716:	f04f 0a4c 	mov.w	sl, #76	; 0x4c
    c71a:	e79b      	b.n	c654 <planner::planner_forward_pass()+0xb8>
			block[2] = &block_buffer[block_index];
			planner_forward_pass_kernel(block[0],block[1],block[2]);
			block_index = block_buffer.getNextIndex(block_index);
		}
		planner_forward_pass_kernel(block[1], block[2], NULL);
	}
    c71c:	b005      	add	sp, #20
    c71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c722:	bf00      	nop

0000c724 <planner::planner_recalculate_trapezoids()>:

	// Recalculates the trapezoid speed profiles for all blocks in the plan according to the 
	// entry_factor for each junction. Must be called by planner_recalculate() after 
	// updating the blocks.
	// Returns true if planning succeded.
	bool planner_recalculate_trapezoids() {
    c724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		
		inline BufDataType *getTail() {
			return &data[tail];
		}
		inline BufSizeType getTailIndex() {
			return tail;
    c728:	f242 438c 	movw	r3, #9356	; 0x248c
    c72c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c730:	785e      	ldrb	r6, [r3, #1]
		
		inline BufDataType *getHead() {
			return &data[head];
		}
		inline BufSizeType getHeadIndex() {
			return head;
    c732:	781b      	ldrb	r3, [r3, #0]
	bool planner_recalculate_trapezoids() {
		int8_t block_index = block_buffer.getTailIndex();
		Block *current;
		Block *next = NULL;
		
		while(block_index != block_buffer.getHeadIndex()) {
    c734:	b272      	sxtb	r2, r6
    c736:	429a      	cmp	r2, r3
	// updating the blocks.
	// Returns true if planning succeded.
	bool planner_recalculate_trapezoids() {
		int8_t block_index = block_buffer.getTailIndex();
		Block *current;
		Block *next = NULL;
    c738:	bf08      	it	eq
    c73a:	2400      	moveq	r4, #0
		
		while(block_index != block_buffer.getHeadIndex()) {
    c73c:	d135      	bne.n	c7aa <planner::planner_recalculate_trapezoids()+0x86>
    c73e:	e025      	b.n	c78c <planner::planner_recalculate_trapezoids()+0x68>
			current = next;
			next = &block_buffer[block_index];
    c740:	b2f6      	uxtb	r6, r6
		}
		
		inline BufDataType &operator[] (BufSizeType index) {
			 // adding size should make negative indexes < size work ok
			// int16_t offset = index < 0 ? index : ((index + size) & size_mask);
			return data[index];
    c742:	686f      	ldr	r7, [r5, #4]
    c744:	fb08 7706 	mla	r7, r8, r6, r7
		Block *next = NULL;
		
		while(block_index != block_buffer.getHeadIndex()) {
			current = next;
			next = &block_buffer[block_index];
			if (current) {
    c748:	b1bc      	cbz	r4, c77a <planner::planner_recalculate_trapezoids()+0x56>
				// Recalculate if current block entry or exit junction speed has changed.
				if ((current->flags & Block::Recalculate) || (next->flags & Block::Recalculate) && !(current->flags & Block::Busy)) {
    c74a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    c74e:	f013 0f02 	tst.w	r3, #2
    c752:	d107      	bne.n	c764 <planner::planner_recalculate_trapezoids()+0x40>
    c754:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
    c758:	f012 0f02 	tst.w	r2, #2
    c75c:	d00d      	beq.n	c77a <planner::planner_recalculate_trapezoids()+0x56>
    c75e:	f013 0f01 	tst.w	r3, #1
    c762:	d10a      	bne.n	c77a <planner::planner_recalculate_trapezoids()+0x56>
					// NOTE: Entry and exit factors always > 0 by all previous logic operations.
					current->calculate_trapezoid(next->entry_speed);
    c764:	4620      	mov	r0, r4
    c766:	f107 0124 	add.w	r1, r7, #36	; 0x24
    c76a:	f7ff fe2f 	bl	c3cc <planner::Block::calculate_trapezoid(float const&)>
				
					// Reset current only to ensure next trapezoid is computed
					// Also make sure the PlannedToStop flag gets cleared, since we are planning to the next move
					current->flags &= ~Block::Recalculate;//(Block::Recalculate|Block::PlannedToStop);
    c76e:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    c772:	f023 0302 	bic.w	r3, r3, #2
    c776:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
		}
		
		inline BufDataType &operator[] (BufSizeType index) {
			 // adding size should make negative indexes < size work ok
			// int16_t offset = index < 0 ? index : ((index + size) & size_mask);
			return data[index];
    c77a:	463c      	mov	r4, r7
		inline BufSizeType getTailIndex() {
			return tail;
		}
		
		inline BufSizeType getNextIndex(BufSizeType from) {
			return ((from + 1) & size_mask);
    c77c:	f106 0601 	add.w	r6, r6, #1
    c780:	78eb      	ldrb	r3, [r5, #3]
    c782:	401e      	ands	r6, r3
		
		inline BufDataType *getHead() {
			return &data[head];
		}
		inline BufSizeType getHeadIndex() {
			return head;
    c784:	782b      	ldrb	r3, [r5, #0]
	bool planner_recalculate_trapezoids() {
		int8_t block_index = block_buffer.getTailIndex();
		Block *current;
		Block *next = NULL;
		
		while(block_index != block_buffer.getHeadIndex()) {
    c786:	b272      	sxtb	r2, r6
    c788:	429a      	cmp	r2, r3
    c78a:	d1d9      	bne.n	c740 <planner::planner_recalculate_trapezoids()+0x1c>
			}
			block_index = block_buffer.getNextIndex( block_index );
		}
		
		// Last/newest block in buffer. Exit speed is set with stop_speed. Always recalculated.
		next->calculate_trapezoid(next->stop_speed);
    c78c:	4620      	mov	r0, r4
    c78e:	f104 0134 	add.w	r1, r4, #52	; 0x34
    c792:	f7ff fe1b 	bl	c3cc <planner::Block::calculate_trapezoid(float const&)>
		next->flags &= ~Block::Recalculate;
    c796:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    c79a:	f023 0302 	bic.w	r3, r3, #2
    c79e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
		return true;
	}
    c7a2:	f04f 0001 	mov.w	r0, #1
    c7a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		Block *current;
		Block *next = NULL;
		
		while(block_index != block_buffer.getHeadIndex()) {
			current = next;
			next = &block_buffer[block_index];
    c7aa:	b2f6      	uxtb	r6, r6
		}
		
		inline BufDataType &operator[] (BufSizeType index) {
			 // adding size should make negative indexes < size work ok
			// int16_t offset = index < 0 ? index : ((index + size) & size_mask);
			return data[index];
    c7ac:	f242 438c 	movw	r3, #9356	; 0x248c
    c7b0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c7b4:	685b      	ldr	r3, [r3, #4]
    c7b6:	f04f 044c 	mov.w	r4, #76	; 0x4c
    c7ba:	fb04 3406 	mla	r4, r4, r6, r3
		inline BufSizeType getTailIndex() {
			return tail;
		}
		
		inline BufSizeType getNextIndex(BufSizeType from) {
			return ((from + 1) & size_mask);
    c7be:	f242 458c 	movw	r5, #9356	; 0x248c
    c7c2:	f2c1 0500 	movt	r5, #4096	; 0x1000
		}
		
		inline BufDataType &operator[] (BufSizeType index) {
			 // adding size should make negative indexes < size work ok
			// int16_t offset = index < 0 ? index : ((index + size) & size_mask);
			return data[index];
    c7c6:	f04f 084c 	mov.w	r8, #76	; 0x4c
    c7ca:	e7d7      	b.n	c77c <planner::planner_recalculate_trapezoids()+0x58>

0000c7cc <planner::planner_recalculate()>:
	//      with no updated junction speeds will not be recalculated and assumed ok as is.
	//
	// All planner computations are performed with doubles (float on Arduinos) to minimize numerical round-
	// off errors. Only when planned values are converted to stepper rate parameters, these are integers.

	void planner_recalculate() {   
    c7cc:	b508      	push	{r3, lr}
			planner_reverse_pass();
    c7ce:	f7ff fe67 	bl	c4a0 <planner::planner_reverse_pass()>
			planner_forward_pass();
    c7d2:	f7ff fee3 	bl	c59c <planner::planner_forward_pass()>
			planner_recalculate_trapezoids();
    c7d6:	f7ff ffa5 	bl	c724 <planner::planner_recalculate_trapezoids()>

	}
    c7da:	bd08      	pop	{r3, pc}

0000c7dc <planner::isBufferFull()>:
		inline bool isEmpty() {
			return head == tail;
		}
		
		inline bool isFull() {
			return (getNextIndex(head) == tail);
    c7dc:	f242 438c 	movw	r3, #9356	; 0x248c
    c7e0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c7e4:	7818      	ldrb	r0, [r3, #0]
    c7e6:	785a      	ldrb	r2, [r3, #1]
		inline BufSizeType getTailIndex() {
			return tail;
		}
		
		inline BufSizeType getNextIndex(BufSizeType from) {
			return ((from + 1) & size_mask);
    c7e8:	f100 0001 	add.w	r0, r0, #1
    c7ec:	78db      	ldrb	r3, [r3, #3]
		inline bool isEmpty() {
			return head == tail;
		}
		
		inline bool isFull() {
			return (getNextIndex(head) == tail);
    c7ee:	4018      	ands	r0, r3
		return true;
	}

	bool isBufferFull() {
		return block_buffer.isFull();//planner_buffer.isFull(); 
	}
    c7f0:	4290      	cmp	r0, r2
    c7f2:	bf14      	ite	ne
    c7f4:	2000      	movne	r0, #0
    c7f6:	2001      	moveq	r0, #1
    c7f8:	4770      	bx	lr
    c7fa:	bf00      	nop

0000c7fc <planner::isBufferEmpty()>:
		inline void bumpTail() {
			tail = getNextIndex(tail);
		}
		
		inline bool isEmpty() {
			return head == tail;
    c7fc:	f242 438c 	movw	r3, #9356	; 0x248c
    c800:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c804:	7818      	ldrb	r0, [r3, #0]
    c806:	785b      	ldrb	r3, [r3, #1]
	
	// Are we completely out of upcoming moves?
	bool isBufferEmpty() {
		bool is_buffer_empty = block_buffer.isEmpty();// && planner_buffer.isEmpty();
		return is_buffer_empty;
	}
    c808:	4298      	cmp	r0, r3
    c80a:	bf14      	ite	ne
    c80c:	2000      	movne	r0, #0
    c80e:	2001      	moveq	r0, #1
    c810:	4770      	bx	lr
    c812:	bf00      	nop

0000c814 <planner::isReady()>:
	
	// Is the move in the buffer ready to use?
	bool isReady() {
		return !(force_replan_from_stopped || block_buffer.isEmpty());
    c814:	f242 4394 	movw	r3, #9364	; 0x2494
    c818:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c81c:	781b      	ldrb	r3, [r3, #0]
    c81e:	b94b      	cbnz	r3, c834 <planner::isReady()+0x20>
		inline void bumpTail() {
			tail = getNextIndex(tail);
		}
		
		inline bool isEmpty() {
			return head == tail;
    c820:	f242 438c 	movw	r3, #9356	; 0x248c
    c824:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c828:	7818      	ldrb	r0, [r3, #0]
    c82a:	785b      	ldrb	r3, [r3, #1]
		bool is_buffer_empty = block_buffer.isEmpty();// && planner_buffer.isEmpty();
		return is_buffer_empty;
	}
	
	// Is the move in the buffer ready to use?
	bool isReady() {
    c82c:	1ac0      	subs	r0, r0, r3
    c82e:	bf18      	it	ne
    c830:	2001      	movne	r0, #1
    c832:	4770      	bx	lr
		return !(force_replan_from_stopped || block_buffer.isEmpty());
    c834:	f04f 0000 	mov.w	r0, #0
	}
    c838:	4770      	bx	lr
    c83a:	bf00      	nop

0000c83c <planner::getNextBlock()>:
		inline BufSizeType getHeadIndex() {
			return head;
		}
		
		inline BufDataType *getTail() {
			return &data[tail];
    c83c:	f242 438c 	movw	r3, #9356	; 0x248c
    c840:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c844:	785a      	ldrb	r2, [r3, #1]
    c846:	685b      	ldr	r3, [r3, #4]
	}
	
	Block *getNextBlock() {
		Block *block = block_buffer.getTail();
		return block;
	}
    c848:	f04f 004c 	mov.w	r0, #76	; 0x4c
    c84c:	fb00 3002 	mla	r0, r0, r2, r3
    c850:	4770      	bx	lr
    c852:	bf00      	nop

0000c854 <planner::doneWithNextBlock()>:
		}

		// bump the tail. cannot return anything useful, so it doesn't
		// WARNING: no sanity checks!
		inline void bumpTail() {
			tail = getNextIndex(tail);
    c854:	f242 438c 	movw	r3, #9356	; 0x248c
    c858:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c85c:	785a      	ldrb	r2, [r3, #1]
		inline BufSizeType getTailIndex() {
			return tail;
		}
		
		inline BufSizeType getNextIndex(BufSizeType from) {
			return ((from + 1) & size_mask);
    c85e:	f102 0201 	add.w	r2, r2, #1
    c862:	78d9      	ldrb	r1, [r3, #3]
    c864:	400a      	ands	r2, r1
		}

		// bump the tail. cannot return anything useful, so it doesn't
		// WARNING: no sanity checks!
		inline void bumpTail() {
			tail = getNextIndex(tail);
    c866:	705a      	strb	r2, [r3, #1]
		return block;
	}
	
	void doneWithNextBlock() {
		block_buffer.bumpTail();
	}
    c868:	4770      	bx	lr
    c86a:	bf00      	nop

0000c86c <planner::planNextMove(Point&, long, Point const&)>:
	}


	///
	bool planNextMove(Point& target, const int32_t us_per_step_in, const Point& steps)
	{
    c86c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c870:	b08f      	sub	sp, #60	; 0x3c
    c872:	4605      	mov	r5, r0
    c874:	9100      	str	r1, [sp, #0]
    c876:	4614      	mov	r4, r2
				data[i] = BufDataType();
			}
		};
		
		inline BufDataType *getHead() {
			return &data[head];
    c878:	f242 438c 	movw	r3, #9356	; 0x248c
    c87c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c880:	781a      	ldrb	r2, [r3, #0]
    c882:	685b      	ldr	r3, [r3, #4]
    c884:	f04f 094c 	mov.w	r9, #76	; 0x4c
    c888:	fb09 3902 	mla	r9, r9, r2, r3
	///
	bool planNextMove(Point& target, const int32_t us_per_step_in, const Point& steps)
	{
		Block *block = block_buffer.getHead();
		// Mark block as not busy (Not executed by the stepper interrupt)
		block->flags = 0;
    c88c:	f04f 0600 	mov.w	r6, #0
    c890:	f889 6048 	strb.w	r6, [r9, #72]	; 0x48
		
		block->target = target;
    c894:	464f      	mov	r7, r9
    c896:	6800      	ldr	r0, [r0, #0]
    c898:	6869      	ldr	r1, [r5, #4]
    c89a:	68aa      	ldr	r2, [r5, #8]
    c89c:	68eb      	ldr	r3, [r5, #12]
    c89e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    c8a0:	6928      	ldr	r0, [r5, #16]
    c8a2:	6038      	str	r0, [r7, #0]
		float delta_mm[STEPPER_COUNT];
		float local_millimeters = 0.0;
		uint32_t local_step_event_count = 0;

		// intentionally unraveled loop
		int32_t abs_steps = abs(steps[X_AXIS]);
    c8a4:	4620      	mov	r0, r4
    c8a6:	4631      	mov	r1, r6
    c8a8:	f000 fe22 	bl	d4f0 <Point::operator[](unsigned int) const>

template <>
inline int abs(int x) { return __builtin_abs(x); }

template <>
inline long abs(long x) { return __builtin_labs(x); }
    c8ac:	6803      	ldr	r3, [r0, #0]
    c8ae:	ea83 78e3 	eor.w	r8, r3, r3, asr #31
    c8b2:	eba8 78e3 	sub.w	r8, r8, r3, asr #31
		uint32_t local_step_event_count = 0;

		// intentionally unraveled loop
		int32_t abs_steps = abs(steps[X_AXIS]);
		local_step_event_count = abs_steps;
		delta_mm[X_AXIS] = ((float)steps[X_AXIS])/axes[X_AXIS].steps_per_mm;
    c8b6:	4620      	mov	r0, r4
    c8b8:	4631      	mov	r1, r6
    c8ba:	f000 fe19 	bl	d4f0 <Point::operator[](unsigned int) const>
    c8be:	6800      	ldr	r0, [r0, #0]
    c8c0:	f006 f8ca 	bl	12a58 <__aeabi_i2f>
    c8c4:	f242 4604 	movw	r6, #9220	; 0x2404
    c8c8:	f2c1 0600 	movt	r6, #4096	; 0x1000
    c8cc:	6831      	ldr	r1, [r6, #0]
    c8ce:	f006 f9cb 	bl	12c68 <__aeabi_fdiv>
    c8d2:	4607      	mov	r7, r0
    c8d4:	9006      	str	r0, [sp, #24]

		abs_steps = abs(steps[Y_AXIS]);
    c8d6:	4620      	mov	r0, r4
    c8d8:	f04f 0101 	mov.w	r1, #1
    c8dc:	f000 fe08 	bl	d4f0 <Point::operator[](unsigned int) const>

template <>
inline int abs(int x) { return __builtin_abs(x); }

template <>
inline long abs(long x) { return __builtin_labs(x); }
    c8e0:	6803      	ldr	r3, [r0, #0]
    c8e2:	ea83 7be3 	eor.w	fp, r3, r3, asr #31
    c8e6:	ebab 7be3 	sub.w	fp, fp, r3, asr #31
		// intentionally unraveled loop
		int32_t abs_steps = abs(steps[X_AXIS]);
		local_step_event_count = abs_steps;
		delta_mm[X_AXIS] = ((float)steps[X_AXIS])/axes[X_AXIS].steps_per_mm;

		abs_steps = abs(steps[Y_AXIS]);
    c8ea:	45c3      	cmp	fp, r8
    c8ec:	bfb8      	it	lt
    c8ee:	46c3      	movlt	fp, r8
		local_step_event_count = max((int32_t)local_step_event_count, abs_steps);
		delta_mm[Y_AXIS] = ((float)steps[Y_AXIS])/axes[Y_AXIS].steps_per_mm;
    c8f0:	4620      	mov	r0, r4
    c8f2:	f04f 0101 	mov.w	r1, #1
    c8f6:	f000 fdfb 	bl	d4f0 <Point::operator[](unsigned int) const>
    c8fa:	6800      	ldr	r0, [r0, #0]
    c8fc:	f006 f8ac 	bl	12a58 <__aeabi_i2f>
    c900:	6971      	ldr	r1, [r6, #20]
    c902:	f006 f9b1 	bl	12c68 <__aeabi_fdiv>
    c906:	4680      	mov	r8, r0
    c908:	9007      	str	r0, [sp, #28]

		abs_steps = abs(steps[Z_AXIS]);
    c90a:	4620      	mov	r0, r4
    c90c:	f04f 0102 	mov.w	r1, #2
    c910:	f000 fdee 	bl	d4f0 <Point::operator[](unsigned int) const>

template <>
inline int abs(int x) { return __builtin_abs(x); }

template <>
inline long abs(long x) { return __builtin_labs(x); }
    c914:	6803      	ldr	r3, [r0, #0]
    c916:	ea83 7ae3 	eor.w	sl, r3, r3, asr #31
    c91a:	ebaa 7ae3 	sub.w	sl, sl, r3, asr #31

		abs_steps = abs(steps[Y_AXIS]);
		local_step_event_count = max((int32_t)local_step_event_count, abs_steps);
		delta_mm[Y_AXIS] = ((float)steps[Y_AXIS])/axes[Y_AXIS].steps_per_mm;

		abs_steps = abs(steps[Z_AXIS]);
    c91e:	45d3      	cmp	fp, sl
    c920:	bfa8      	it	ge
    c922:	46da      	movge	sl, fp
		local_step_event_count = max((int32_t)local_step_event_count, abs_steps);
		delta_mm[Z_AXIS] = ((float)steps[Z_AXIS])/axes[Z_AXIS].steps_per_mm;
    c924:	4620      	mov	r0, r4
    c926:	f04f 0102 	mov.w	r1, #2
    c92a:	f000 fde1 	bl	d4f0 <Point::operator[](unsigned int) const>
    c92e:	6800      	ldr	r0, [r0, #0]
    c930:	f006 f892 	bl	12a58 <__aeabi_i2f>
    c934:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    c936:	f006 f997 	bl	12c68 <__aeabi_fdiv>
    c93a:	4606      	mov	r6, r0
    c93c:	9008      	str	r0, [sp, #32]
		
		

		//local_step_event_cout is the max of x,y,z speeds)
		if (local_step_event_count > 0) {
    c93e:	f1ba 0f00 	cmp.w	sl, #0
    c942:	f000 8248 	beq.w	cdd6 <planner::planNextMove(Point&, long, Point const&)+0x56a>
			local_millimeters = sqrt(delta_mm[X_AXIS]*delta_mm[X_AXIS] + delta_mm[Y_AXIS]*delta_mm[Y_AXIS] + delta_mm[Z_AXIS]*delta_mm[Z_AXIS]);
    c946:	4638      	mov	r0, r7
    c948:	4639      	mov	r1, r7
    c94a:	f006 f8d9 	bl	12b00 <__aeabi_fmul>
    c94e:	4607      	mov	r7, r0
    c950:	4640      	mov	r0, r8
    c952:	4641      	mov	r1, r8
    c954:	f006 f8d4 	bl	12b00 <__aeabi_fmul>
    c958:	4601      	mov	r1, r0
    c95a:	4638      	mov	r0, r7
    c95c:	f005 ffc8 	bl	128f0 <__addsf3>
    c960:	4607      	mov	r7, r0
    c962:	4630      	mov	r0, r6
    c964:	4631      	mov	r1, r6
    c966:	f006 f8cb 	bl	12b00 <__aeabi_fmul>
    c96a:	4601      	mov	r1, r0
    c96c:	4638      	mov	r0, r7
    c96e:	f005 ffbf 	bl	128f0 <__addsf3>
    c972:	f005 fce1 	bl	12338 <__aeabi_f2d>
    c976:	f011 fee3 	bl	1e740 <sqrt>
    c97a:	f005 ff63 	bl	12844 <__aeabi_d2f>
    c97e:	9003      	str	r0, [sp, #12]
		}

		abs_steps = abs(steps[A_AXIS]);
    c980:	4620      	mov	r0, r4
    c982:	f04f 0103 	mov.w	r1, #3
    c986:	f000 fdb3 	bl	d4f0 <Point::operator[](unsigned int) const>

template <>
inline int abs(int x) { return __builtin_abs(x); }

template <>
inline long abs(long x) { return __builtin_labs(x); }
    c98a:	6803      	ldr	r3, [r0, #0]
    c98c:	2b00      	cmp	r3, #0
    c98e:	bfb8      	it	lt
    c990:	425b      	neglt	r3, r3
		if (local_step_event_count > 0) {
			local_millimeters = sqrt(delta_mm[X_AXIS]*delta_mm[X_AXIS] + delta_mm[Y_AXIS]*delta_mm[Y_AXIS] + delta_mm[Z_AXIS]*delta_mm[Z_AXIS]);
		}

		abs_steps = abs(steps[A_AXIS]);
		local_step_event_count = max((int32_t)local_step_event_count, abs_steps);
    c992:	4553      	cmp	r3, sl
    c994:	bfb8      	it	lt
    c996:	4653      	movlt	r3, sl
    c998:	9302      	str	r3, [sp, #8]
		delta_mm[A_AXIS] = ((float)steps[A_AXIS])/axes[A_AXIS].steps_per_mm;
    c99a:	4620      	mov	r0, r4
    c99c:	f04f 0103 	mov.w	r1, #3
    c9a0:	f000 fda6 	bl	d4f0 <Point::operator[](unsigned int) const>
    c9a4:	6800      	ldr	r0, [r0, #0]
    c9a6:	f006 f857 	bl	12a58 <__aeabi_i2f>
    c9aa:	f242 4304 	movw	r3, #9220	; 0x2404
    c9ae:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c9b2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    c9b4:	f006 f958 	bl	12c68 <__aeabi_fdiv>
    c9b8:	4606      	mov	r6, r0
    c9ba:	9009      	str	r0, [sp, #36]	; 0x24

		if (local_millimeters == 0.0) {
    c9bc:	9803      	ldr	r0, [sp, #12]
    c9be:	f04f 0100 	mov.w	r1, #0
    c9c2:	f006 fa31 	bl	12e28 <__aeabi_fcmpeq>
    c9c6:	b150      	cbz	r0, c9de <planner::planNextMove(Point&, long, Point const&)+0x172>
			local_millimeters = sqrt(delta_mm[X_AXIS]*delta_mm[X_AXIS] + delta_mm[Y_AXIS]*delta_mm[Y_AXIS] + delta_mm[Z_AXIS]*delta_mm[Z_AXIS]);
		}

		abs_steps = abs(steps[A_AXIS]);
		local_step_event_count = max((int32_t)local_step_event_count, abs_steps);
		delta_mm[A_AXIS] = ((float)steps[A_AXIS])/axes[A_AXIS].steps_per_mm;
    c9c8:	9603      	str	r6, [sp, #12]
#ifdef labs
#undef labs
#endif

template <typename T>
inline T abs(T x) { return (x)>0?(x):-(x); }
    c9ca:	9803      	ldr	r0, [sp, #12]
    c9cc:	f04f 0100 	mov.w	r1, #0
    c9d0:	f006 fa52 	bl	12e78 <__aeabi_fcmpgt>
    c9d4:	b918      	cbnz	r0, c9de <planner::planNextMove(Point&, long, Point const&)+0x172>
    c9d6:	9903      	ldr	r1, [sp, #12]
    c9d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    c9dc:	9303      	str	r3, [sp, #12]
			local_millimeters = abs(delta_mm[B_AXIS]);
		}
#endif

		//local_step_event_cout is the max of x,y,z,a,b speeds)
		if (local_step_event_count == 0)
    c9de:	9a02      	ldr	r2, [sp, #8]
			return false;
    c9e0:	f04f 0000 	mov.w	r0, #0
			local_millimeters = abs(delta_mm[B_AXIS]);
		}
#endif

		//local_step_event_cout is the max of x,y,z,a,b speeds)
		if (local_step_event_count == 0)
    c9e4:	2a00      	cmp	r2, #0
    c9e6:	f000 81f3 	beq.w	cdd0 <planner::planNextMove(Point&, long, Point const&)+0x564>
		// Mark block as not busy (Not executed by the stepper interrupt)
		block->flags = 0;
		
		block->target = target;
		
		uint32_t us_per_step = us_per_step_in;
    c9ea:	9f00      	ldr	r7, [sp, #0]

		//local_step_event_cout is the max of x,y,z,a,b speeds)
		if (local_step_event_count == 0)
			return false;

		if(!accelerationON){
    c9ec:	f240 0318 	movw	r3, #24
    c9f0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    c9f4:	781b      	ldrb	r3, [r3, #0]
    c9f6:	bb53      	cbnz	r3, ca4e <planner::planNextMove(Point&, long, Point const&)+0x1e2>
			block->target = target;
    c9f8:	464c      	mov	r4, r9
    c9fa:	6828      	ldr	r0, [r5, #0]
    c9fc:	6869      	ldr	r1, [r5, #4]
    c9fe:	68aa      	ldr	r2, [r5, #8]
    ca00:	68eb      	ldr	r3, [r5, #12]
    ca02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    ca04:	6928      	ldr	r0, [r5, #16]
    ca06:	6020      	str	r0, [r4, #0]
			block->nominal_rate = 1000000/us_per_step;
    ca08:	f244 2340 	movw	r3, #16960	; 0x4240
    ca0c:	f2c0 030f 	movt	r3, #15
    ca10:	fbb3 f3f7 	udiv	r3, r3, r7
    ca14:	f8c9 3038 	str.w	r3, [r9, #56]	; 0x38
			block->accelerate_until = 0;
    ca18:	f04f 0300 	mov.w	r3, #0
    ca1c:	f8a9 3016 	strh.w	r3, [r9, #22]
			block->step_event_count = local_step_event_count;
    ca20:	9d02      	ldr	r5, [sp, #8]
    ca22:	b2aa      	uxth	r2, r5
    ca24:	f8a9 2014 	strh.w	r2, [r9, #20]
			block->decelerate_after = local_step_event_count;
    ca28:	f8a9 2018 	strh.w	r2, [r9, #24]
			block->acceleration_rate = 0;
    ca2c:	f8c9 301c 	str.w	r3, [r9, #28]
		}
		
		// bump the head. cannot return anything useful, so it doesn't
		// WARNING: no sanity checks!
		inline void bumpHead() {
			head = getNextIndex(head);
    ca30:	f242 438c 	movw	r3, #9356	; 0x248c
    ca34:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ca38:	781a      	ldrb	r2, [r3, #0]
		inline BufSizeType getTailIndex() {
			return tail;
		}
		
		inline BufSizeType getNextIndex(BufSizeType from) {
			return ((from + 1) & size_mask);
    ca3a:	f102 0201 	add.w	r2, r2, #1
    ca3e:	78d9      	ldrb	r1, [r3, #3]
    ca40:	400a      	ands	r2, r1
		}
		
		// bump the head. cannot return anything useful, so it doesn't
		// WARNING: no sanity checks!
		inline void bumpHead() {
			head = getNextIndex(head);
    ca42:	701a      	strb	r2, [r3, #0]
			block->accelerate_until = 0;
			block->step_event_count = local_step_event_count;
			block->decelerate_after = local_step_event_count;
			block->acceleration_rate = 0;
			block_buffer.bumpHead();
			steppers::startRunning();
    ca44:	f002 fcec 	bl	f420 <steppers::startRunning()>
			return true; //acceleration was not on, just move value into queue and run it
    ca48:	f04f 0001 	mov.w	r0, #1
    ca4c:	e1c0      	b.n	cdd0 <planner::planNextMove(Point&, long, Point const&)+0x564>
		}

		// if printing from RepG, ensure moves take a minimum amount of time so that the serial transfer can keep up
		if(!sdcard::isPlaying() ){
    ca4e:	f001 f9e1 	bl	de14 <sdcard::isPlaying()>
    ca52:	b958      	cbnz	r0, ca6c <planner::planNextMove(Point&, long, Point const&)+0x200>
			if ((us_per_step * local_step_event_count) < MIN_MS_PER_SEGMENT) {
    ca54:	9900      	ldr	r1, [sp, #0]
    ca56:	9d02      	ldr	r5, [sp, #8]
    ca58:	fb01 f205 	mul.w	r2, r1, r5
    ca5c:	f242 730f 	movw	r3, #9999	; 0x270f
    ca60:	429a      	cmp	r2, r3
				us_per_step = MIN_MS_PER_SEGMENT / local_step_event_count;
    ca62:	bf9c      	itt	ls
    ca64:	f242 7710 	movwls	r7, #10000	; 0x2710
    ca68:	fbb7 f7f5 	udivls	r7, r7, r5
		*/


		float inverse_millimeters = 1.0/local_millimeters; // Inverse millimeters to remove multiple divides
		// Calculate 1 second/(seconds for this movement)
		float inverse_second = 1000000.0/(float)(us_per_step * local_step_event_count);
    ca6c:	9d02      	ldr	r5, [sp, #8]
    ca6e:	fb05 f007 	mul.w	r0, r5, r7
    ca72:	f005 ffed 	bl	12a50 <__aeabi_ui2f>
    ca76:	4601      	mov	r1, r0
    ca78:	f44f 5010 	mov.w	r0, #9216	; 0x2400
    ca7c:	f6c4 1074 	movt	r0, #18804	; 0x4974
    ca80:	f006 f8f2 	bl	12c68 <__aeabi_fdiv>
    ca84:	4606      	mov	r6, r0
		float steps_per_mm = (float)local_step_event_count * inverse_millimeters;
    ca86:	9802      	ldr	r0, [sp, #8]
    ca88:	f005 ffe2 	bl	12a50 <__aeabi_ui2f>
    ca8c:	9000      	str	r0, [sp, #0]
			}
		}
		*/


		float inverse_millimeters = 1.0/local_millimeters; // Inverse millimeters to remove multiple divides
    ca8e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    ca92:	9903      	ldr	r1, [sp, #12]
    ca94:	f006 f8e8 	bl	12c68 <__aeabi_fdiv>
    ca98:	4601      	mov	r1, r0
		// Calculate 1 second/(seconds for this movement)
		float inverse_second = 1000000.0/(float)(us_per_step * local_step_event_count);
		float steps_per_mm = (float)local_step_event_count * inverse_millimeters;
    ca9a:	9800      	ldr	r0, [sp, #0]
    ca9c:	f006 f830 	bl	12b00 <__aeabi_fmul>
    caa0:	9005      	str	r0, [sp, #20]

		// we are given microseconds/step, and we need steps/mm, and steps/second

		// Calculate speed in steps/sec
		uint32_t steps_per_second = 1000000/us_per_step;
		float mm_per_second = local_millimeters * inverse_second;
    caa2:	4630      	mov	r0, r6
    caa4:	9903      	ldr	r1, [sp, #12]
    caa6:	f006 f82b 	bl	12b00 <__aeabi_fmul>
    caaa:	9004      	str	r0, [sp, #16]
		float steps_per_mm = (float)local_step_event_count * inverse_millimeters;

		// we are given microseconds/step, and we need steps/mm, and steps/second

		// Calculate speed in steps/sec
		uint32_t steps_per_second = 1000000/us_per_step;
    caac:	f244 2340 	movw	r3, #16960	; 0x4240
    cab0:	f2c0 030f 	movt	r3, #15
    cab4:	fbb3 f7f7 	udiv	r7, r3, r7
		float mm_per_second = local_millimeters * inverse_second;

		// Calculate speed in mm/second for each axis. No divide by zero due to previous checks.
		float local_nominal_speed = mm_per_second; // (mm/sec) Always > 0
		block->nominal_rate = steps_per_second; // (step/sec) Always > 0
    cab8:	f8c9 7038 	str.w	r7, [r9, #56]	; 0x38
    cabc:	f04f 0500 	mov.w	r5, #0

		float current_speed[STEPPER_COUNT];
		for(int i=0; i < STEPPER_COUNT; i++) {
			current_speed[i] = delta_mm[i] * inverse_second;
    cac0:	f105 0218 	add.w	r2, r5, #24
    cac4:	4669      	mov	r1, sp
    cac6:	5850      	ldr	r0, [r2, r1]
    cac8:	4631      	mov	r1, r6
    caca:	f006 f819 	bl	12b00 <__aeabi_fmul>
    cace:	ab0a      	add	r3, sp, #40	; 0x28
    cad0:	5158      	str	r0, [r3, r5]
    cad2:	f105 0504 	add.w	r5, r5, #4
		// Calculate speed in mm/second for each axis. No divide by zero due to previous checks.
		float local_nominal_speed = mm_per_second; // (mm/sec) Always > 0
		block->nominal_rate = steps_per_second; // (step/sec) Always > 0

		float current_speed[STEPPER_COUNT];
		for(int i=0; i < STEPPER_COUNT; i++) {
    cad6:	2d10      	cmp	r5, #16
    cad8:	d1f2      	bne.n	cac0 <planner::planNextMove(Point&, long, Point const&)+0x254>
			current_speed[i] = delta_mm[i] * inverse_second;
		}

		// Compute and limit the acceleration rate for the trapezoid generator.
		uint32_t local_acceleration_st = ceil(default_acceleration * steps_per_mm); // convert to: acceleration steps/sec^2
    cada:	f641 7328 	movw	r3, #7976	; 0x1f28
    cade:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cae2:	9805      	ldr	r0, [sp, #20]
    cae4:	6819      	ldr	r1, [r3, #0]
    cae6:	f006 f80b 	bl	12b00 <__aeabi_fmul>
    caea:	f005 fc25 	bl	12338 <__aeabi_f2d>
    caee:	f011 fd8f 	bl	1e610 <ceil>
    caf2:	f005 fe87 	bl	12804 <__aeabi_d2uiz>
    caf6:	4682      	mov	sl, r0
    caf8:	f242 4704 	movw	r7, #9220	; 0x2404
    cafc:	f2c1 0700 	movt	r7, #4096	; 0x1000
		// Limit acceleration per axis
		for(int i=0; i < STEPPER_COUNT; i++) {
    cb00:	f04f 0600 	mov.w	r6, #0
    cb04:	46cb      	mov	fp, r9
    cb06:	46a1      	mov	r9, r4
			// warning: arithmetic overflow is easy here. Try to mitigate.
			float step_scale = (float)abs(steps[i]) / (float)local_step_event_count;
    cb08:	4648      	mov	r0, r9
    cb0a:	4631      	mov	r1, r6
    cb0c:	f000 fcf0 	bl	d4f0 <Point::operator[](unsigned int) const>
    cb10:	4604      	mov	r4, r0
			float axis_acceleration_st = (float)local_acceleration_st * step_scale;
			if((uint32_t)axis_acceleration_st > axes[i].max_acceleration)
    cb12:	68fd      	ldr	r5, [r7, #12]
		uint32_t local_acceleration_st = ceil(default_acceleration * steps_per_mm); // convert to: acceleration steps/sec^2
		// Limit acceleration per axis
		for(int i=0; i < STEPPER_COUNT; i++) {
			// warning: arithmetic overflow is easy here. Try to mitigate.
			float step_scale = (float)abs(steps[i]) / (float)local_step_event_count;
			float axis_acceleration_st = (float)local_acceleration_st * step_scale;
    cb14:	4650      	mov	r0, sl
    cb16:	f005 ff9b 	bl	12a50 <__aeabi_ui2f>
    cb1a:	4680      	mov	r8, r0

template <>
inline int abs(int x) { return __builtin_abs(x); }

template <>
inline long abs(long x) { return __builtin_labs(x); }
    cb1c:	6820      	ldr	r0, [r4, #0]
		// Compute and limit the acceleration rate for the trapezoid generator.
		uint32_t local_acceleration_st = ceil(default_acceleration * steps_per_mm); // convert to: acceleration steps/sec^2
		// Limit acceleration per axis
		for(int i=0; i < STEPPER_COUNT; i++) {
			// warning: arithmetic overflow is easy here. Try to mitigate.
			float step_scale = (float)abs(steps[i]) / (float)local_step_event_count;
    cb1e:	2800      	cmp	r0, #0
    cb20:	bfb8      	it	lt
    cb22:	4240      	neglt	r0, r0
    cb24:	f005 ff98 	bl	12a58 <__aeabi_i2f>
    cb28:	9900      	ldr	r1, [sp, #0]
    cb2a:	f006 f89d 	bl	12c68 <__aeabi_fdiv>
    cb2e:	4601      	mov	r1, r0
			float axis_acceleration_st = (float)local_acceleration_st * step_scale;
    cb30:	4640      	mov	r0, r8
    cb32:	f005 ffe5 	bl	12b00 <__aeabi_fmul>
			if((uint32_t)axis_acceleration_st > axes[i].max_acceleration)
    cb36:	f006 f9cf 	bl	12ed8 <__aeabi_f2uiz>
				local_acceleration_st = axes[i].max_acceleration;
    cb3a:	42a8      	cmp	r0, r5
    cb3c:	bf88      	it	hi
    cb3e:	46aa      	movhi	sl, r5
		}

		// Compute and limit the acceleration rate for the trapezoid generator.
		uint32_t local_acceleration_st = ceil(default_acceleration * steps_per_mm); // convert to: acceleration steps/sec^2
		// Limit acceleration per axis
		for(int i=0; i < STEPPER_COUNT; i++) {
    cb40:	f106 0601 	add.w	r6, r6, #1
    cb44:	f107 0714 	add.w	r7, r7, #20
    cb48:	2e04      	cmp	r6, #4
    cb4a:	d1dd      	bne.n	cb08 <planner::planNextMove(Point&, long, Point const&)+0x29c>
    cb4c:	46d9      	mov	r9, fp
			float step_scale = (float)abs(steps[i]) / (float)local_step_event_count;
			float axis_acceleration_st = (float)local_acceleration_st * step_scale;
			if((uint32_t)axis_acceleration_st > axes[i].max_acceleration)
				local_acceleration_st = axes[i].max_acceleration;
		}
		block->acceleration = local_acceleration_st / steps_per_mm;
    cb4e:	4650      	mov	r0, sl
    cb50:	f005 ff7e 	bl	12a50 <__aeabi_ui2f>
    cb54:	9905      	ldr	r1, [sp, #20]
    cb56:	f006 f887 	bl	12c68 <__aeabi_fdiv>
    cb5a:	f8cb 0030 	str.w	r0, [fp, #48]	; 0x30
		block->acceleration_rate = local_acceleration_st / ACCELERATION_TICKS_PER_SECOND;
    cb5e:	ea4f 029a 	mov.w	r2, sl, lsr #2
    cb62:	f647 4301 	movw	r3, #31745	; 0x7c01
    cb66:	f2c2 138e 	movt	r3, #8590	; 0x218e
    cb6a:	fba3 5302 	umull	r5, r3, r3, r2
    cb6e:	ea4f 2313 	mov.w	r3, r3, lsr #8
    cb72:	f8cb 301c 	str.w	r3, [fp, #28]
#ifdef max
#undef max
#endif

template <typename T>
inline const T& min(const T& a, const T& b) { return (a)<(b)?(a):(b); }
    cb76:	f641 730c 	movw	r3, #7948	; 0x1f0c
    cb7a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cb7e:	681d      	ldr	r5, [r3, #0]
    cb80:	9804      	ldr	r0, [sp, #16]
    cb82:	4629      	mov	r1, r5
    cb84:	f006 f978 	bl	12e78 <__aeabi_fcmpgt>
    cb88:	b900      	cbnz	r0, cb8c <planner::planNextMove(Point&, long, Point const&)+0x320>
    cb8a:	9d04      	ldr	r5, [sp, #16]
		inline void bumpTail() {
			tail = getNextIndex(tail);
		}
		
		inline bool isEmpty() {
			return head == tail;
    cb8c:	f242 438c 	movw	r3, #9356	; 0x248c
    cb90:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cb94:	781a      	ldrb	r2, [r3, #0]
    cb96:	785b      	ldrb	r3, [r3, #1]
		
		// Compute the speed trasitions, or "jerks"
		// The default value the junction speed is the minimum_planner_speed (or local_nominal_speed if it is less than the minimum_planner_speed)
		float vmax_junction = min(minimum_planner_speed, local_nominal_speed); 
		
		if ((!block_buffer.isEmpty()) && (previous_nominal_speed > 0.0)) {
    cb98:	429a      	cmp	r2, r3
    cb9a:	f000 809a 	beq.w	ccd2 <planner::planNextMove(Point&, long, Point const&)+0x466>
    cb9e:	f242 4388 	movw	r3, #9352	; 0x2488
    cba2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cba6:	6818      	ldr	r0, [r3, #0]
    cba8:	f04f 0100 	mov.w	r1, #0
    cbac:	f006 f964 	bl	12e78 <__aeabi_fcmpgt>
    cbb0:	2800      	cmp	r0, #0
    cbb2:	f000 808e 	beq.w	ccd2 <planner::planNextMove(Point&, long, Point const&)+0x466>
			   float jerk = sqrt(pow((current_speed[X_AXIS]-previous_speed[X_AXIS]), 2)+pow((current_speed[Y_AXIS]-previous_speed[Y_AXIS]), 2));
    cbb6:	f242 4498 	movw	r4, #9368	; 0x2498
    cbba:	f2c1 0400 	movt	r4, #4096	; 0x1000
    cbbe:	980a      	ldr	r0, [sp, #40]	; 0x28
    cbc0:	6821      	ldr	r1, [r4, #0]
    cbc2:	f005 fe93 	bl	128ec <__aeabi_fsub>
    cbc6:	f005 fbb7 	bl	12338 <__aeabi_f2d>
    cbca:	4602      	mov	r2, r0
    cbcc:	460b      	mov	r3, r1
    cbce:	f005 fc07 	bl	123e0 <__aeabi_dmul>
    cbd2:	4606      	mov	r6, r0
    cbd4:	460f      	mov	r7, r1
    cbd6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    cbd8:	6861      	ldr	r1, [r4, #4]
    cbda:	f005 fe87 	bl	128ec <__aeabi_fsub>
    cbde:	f005 fbab 	bl	12338 <__aeabi_f2d>
    cbe2:	4602      	mov	r2, r0
    cbe4:	460b      	mov	r3, r1
    cbe6:	f005 fbfb 	bl	123e0 <__aeabi_dmul>
    cbea:	4602      	mov	r2, r0
    cbec:	460b      	mov	r3, r1
    cbee:	4630      	mov	r0, r6
    cbf0:	4639      	mov	r1, r7
    cbf2:	f005 fa43 	bl	1207c <__adddf3>
    cbf6:	f011 fda3 	bl	1e740 <sqrt>
    cbfa:	f005 fe23 	bl	12844 <__aeabi_d2f>
    cbfe:	4606      	mov	r6, r0
			   if((previous_speed[X_AXIS] != 0.0) || (previous_speed[Y_AXIS] != 0.0)) {
    cc00:	6820      	ldr	r0, [r4, #0]
    cc02:	f04f 0100 	mov.w	r1, #0
    cc06:	f006 f90f 	bl	12e28 <__aeabi_fcmpeq>
    cc0a:	b130      	cbz	r0, cc1a <planner::planNextMove(Point&, long, Point const&)+0x3ae>
    cc0c:	6860      	ldr	r0, [r4, #4]
    cc0e:	f04f 0100 	mov.w	r1, #0
    cc12:	f006 f909 	bl	12e28 <__aeabi_fcmpeq>
    cc16:	b110      	cbz	r0, cc1e <planner::planNextMove(Point&, long, Point const&)+0x3b2>
    cc18:	e002      	b.n	cc20 <planner::planNextMove(Point&, long, Point const&)+0x3b4>
					   vmax_junction = local_nominal_speed;
    cc1a:	9d04      	ldr	r5, [sp, #16]
    cc1c:	e000      	b.n	cc20 <planner::planNextMove(Point&, long, Point const&)+0x3b4>
    cc1e:	9d04      	ldr	r5, [sp, #16]
			   }

			   if (jerk > max_xy_jerk) {
    cc20:	f641 731c 	movw	r3, #7964	; 0x1f1c
    cc24:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cc28:	681c      	ldr	r4, [r3, #0]
    cc2a:	4630      	mov	r0, r6
    cc2c:	4621      	mov	r1, r4
    cc2e:	f006 f923 	bl	12e78 <__aeabi_fcmpgt>
    cc32:	b140      	cbz	r0, cc46 <planner::planNextMove(Point&, long, Point const&)+0x3da>
					   vmax_junction *= (max_xy_jerk/jerk);
    cc34:	4620      	mov	r0, r4
    cc36:	4631      	mov	r1, r6
    cc38:	f006 f816 	bl	12c68 <__aeabi_fdiv>
    cc3c:	4601      	mov	r1, r0
    cc3e:	4628      	mov	r0, r5
    cc40:	f005 ff5e 	bl	12b00 <__aeabi_fmul>
    cc44:	4605      	mov	r5, r0
				   }
			   
			   for (int i_axis = Z_AXIS; i_axis < STEPPER_COUNT; i_axis++) {
					   jerk = abs(previous_speed[i_axis] - current_speed[i_axis]);
    cc46:	f242 4398 	movw	r3, #9368	; 0x2498
    cc4a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cc4e:	6898      	ldr	r0, [r3, #8]
    cc50:	990c      	ldr	r1, [sp, #48]	; 0x30
    cc52:	f005 fe4b 	bl	128ec <__aeabi_fsub>
    cc56:	4604      	mov	r4, r0
#ifdef labs
#undef labs
#endif

template <typename T>
inline T abs(T x) { return (x)>0?(x):-(x); }
    cc58:	f04f 0100 	mov.w	r1, #0
    cc5c:	f006 f90c 	bl	12e78 <__aeabi_fcmpgt>
    cc60:	b908      	cbnz	r0, cc66 <planner::planNextMove(Point&, long, Point const&)+0x3fa>
    cc62:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
					   vmax_junction *= (max_xy_jerk/jerk);
				   }
			   
			   for (int i_axis = Z_AXIS; i_axis < STEPPER_COUNT; i_axis++) {
					   jerk = abs(previous_speed[i_axis] - current_speed[i_axis]);
					   if (jerk > axes[i_axis].max_axis_jerk) {
    cc66:	f242 4304 	movw	r3, #9220	; 0x2404
    cc6a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cc6e:	6b9e      	ldr	r6, [r3, #56]	; 0x38
    cc70:	4630      	mov	r0, r6
    cc72:	4621      	mov	r1, r4
    cc74:	f006 f8e2 	bl	12e3c <__aeabi_fcmplt>
    cc78:	b140      	cbz	r0, cc8c <planner::planNextMove(Point&, long, Point const&)+0x420>
							   vmax_junction *= (axes[i_axis].max_axis_jerk/jerk);                               }
    cc7a:	4630      	mov	r0, r6
    cc7c:	4621      	mov	r1, r4
    cc7e:	f005 fff3 	bl	12c68 <__aeabi_fdiv>
    cc82:	4601      	mov	r1, r0
    cc84:	4628      	mov	r0, r5
    cc86:	f005 ff3b 	bl	12b00 <__aeabi_fmul>
    cc8a:	4605      	mov	r5, r0
			   if (jerk > max_xy_jerk) {
					   vmax_junction *= (max_xy_jerk/jerk);
				   }
			   
			   for (int i_axis = Z_AXIS; i_axis < STEPPER_COUNT; i_axis++) {
					   jerk = abs(previous_speed[i_axis] - current_speed[i_axis]);
    cc8c:	f242 4398 	movw	r3, #9368	; 0x2498
    cc90:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cc94:	68d8      	ldr	r0, [r3, #12]
    cc96:	990d      	ldr	r1, [sp, #52]	; 0x34
    cc98:	f005 fe28 	bl	128ec <__aeabi_fsub>
    cc9c:	4604      	mov	r4, r0
#ifdef labs
#undef labs
#endif

template <typename T>
inline T abs(T x) { return (x)>0?(x):-(x); }
    cc9e:	f04f 0100 	mov.w	r1, #0
    cca2:	f006 f8e9 	bl	12e78 <__aeabi_fcmpgt>
    cca6:	b908      	cbnz	r0, ccac <planner::planNextMove(Point&, long, Point const&)+0x440>
    cca8:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
					   vmax_junction *= (max_xy_jerk/jerk);
				   }
			   
			   for (int i_axis = Z_AXIS; i_axis < STEPPER_COUNT; i_axis++) {
					   jerk = abs(previous_speed[i_axis] - current_speed[i_axis]);
					   if (jerk > axes[i_axis].max_axis_jerk) {
    ccac:	f242 4304 	movw	r3, #9220	; 0x2404
    ccb0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ccb4:	6cde      	ldr	r6, [r3, #76]	; 0x4c
    ccb6:	4630      	mov	r0, r6
    ccb8:	4621      	mov	r1, r4
    ccba:	f006 f8bf 	bl	12e3c <__aeabi_fcmplt>
    ccbe:	b140      	cbz	r0, ccd2 <planner::planNextMove(Point&, long, Point const&)+0x466>
							   vmax_junction *= (axes[i_axis].max_axis_jerk/jerk);                               }
    ccc0:	4630      	mov	r0, r6
    ccc2:	4621      	mov	r1, r4
    ccc4:	f005 ffd0 	bl	12c68 <__aeabi_fdiv>
    ccc8:	4601      	mov	r1, r0
    ccca:	4628      	mov	r0, r5
    cccc:	f005 ff18 	bl	12b00 <__aeabi_fmul>
    ccd0:	4605      	mov	r5, r0
			   }
         } 

		
		/// set the max_entry_speed to the junction speed
		block->max_entry_speed = vmax_junction;
    ccd2:	f8c9 5028 	str.w	r5, [r9, #40]	; 0x28
	
	// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
	// acceleration within the allotted distance.
	// Needs to be conbverted to fixed-point.
	FORCE_INLINE float max_allowable_speed(const float &acceleration, const float &target_velocity, const float &distance) {
		return sqrt((target_velocity*target_velocity)-(acceleration*2.0)*distance);
    ccd6:	f641 730c 	movw	r3, #7948	; 0x1f0c
    ccda:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ccde:	6819      	ldr	r1, [r3, #0]
    cce0:	4608      	mov	r0, r1
    cce2:	f005 ff0d 	bl	12b00 <__aeabi_fmul>
    cce6:	f005 fb27 	bl	12338 <__aeabi_f2d>
    ccea:	e9cd 0100 	strd	r0, r1, [sp]
		/// set the max_entry_speed to the junction speed
		block->max_entry_speed = vmax_junction;
		
		// Initialize block entry speed. Compute based on deceleration to stop_speed.
		/// the entry speed may change in the look ahead planner
		float v_allowable = max_allowable_speed(-block->acceleration, minimum_planner_speed, local_millimeters);// stop_speed, local_millimeters);
    ccee:	f8d9 0030 	ldr.w	r0, [r9, #48]	; 0x30
    ccf2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
	
	// Calculates the maximum allowable speed at this point when you must be able to reach target_velocity using the 
	// acceleration within the allotted distance.
	// Needs to be conbverted to fixed-point.
	FORCE_INLINE float max_allowable_speed(const float &acceleration, const float &target_velocity, const float &distance) {
		return sqrt((target_velocity*target_velocity)-(acceleration*2.0)*distance);
    ccf6:	f005 fb1f 	bl	12338 <__aeabi_f2d>
    ccfa:	4602      	mov	r2, r0
    ccfc:	460b      	mov	r3, r1
    ccfe:	f005 f9bd 	bl	1207c <__adddf3>
    cd02:	4606      	mov	r6, r0
    cd04:	460f      	mov	r7, r1
    cd06:	9803      	ldr	r0, [sp, #12]
    cd08:	f005 fb16 	bl	12338 <__aeabi_f2d>
    cd0c:	4602      	mov	r2, r0
    cd0e:	460b      	mov	r3, r1
    cd10:	4630      	mov	r0, r6
    cd12:	4639      	mov	r1, r7
    cd14:	f005 fb64 	bl	123e0 <__aeabi_dmul>
    cd18:	4602      	mov	r2, r0
    cd1a:	460b      	mov	r3, r1
    cd1c:	e9dd 0100 	ldrd	r0, r1, [sp]
    cd20:	f005 f9aa 	bl	12078 <__aeabi_dsub>
    cd24:	f011 fd0c 	bl	1e740 <sqrt>
    cd28:	f005 fd8c 	bl	12844 <__aeabi_d2f>
    cd2c:	4604      	mov	r4, r0
#ifdef max
#undef max
#endif

template <typename T>
inline const T& min(const T& a, const T& b) { return (a)<(b)?(a):(b); }
    cd2e:	4628      	mov	r0, r5
    cd30:	4621      	mov	r1, r4
    cd32:	f006 f883 	bl	12e3c <__aeabi_fcmplt>
    cd36:	b900      	cbnz	r0, cd3a <planner::planNextMove(Point&, long, Point const&)+0x4ce>
    cd38:	4625      	mov	r5, r4
		block->max_entry_speed = vmax_junction;
		
		// Initialize block entry speed. Compute based on deceleration to stop_speed.
		/// the entry speed may change in the look ahead planner
		float v_allowable = max_allowable_speed(-block->acceleration, minimum_planner_speed, local_millimeters);// stop_speed, local_millimeters);
		block->entry_speed = min(vmax_junction, v_allowable);
    cd3a:	f8c9 5024 	str.w	r5, [r9, #36]	; 0x24
		// the current block and next block junction speeds are guaranteed to always be at their maximum
		// junction speeds in deceleration and acceleration, respectively. This is due to how the current
		// block nominal speed limits both the current and next maximum junction speeds. Hence, in both
		// the reverse and forward planners, the corresponding block junction speed will always be at the
		// the maximum junction speed and may always be ignored for any speed reduction checks.
		if (local_nominal_speed <= v_allowable)
    cd3e:	9804      	ldr	r0, [sp, #16]
    cd40:	4621      	mov	r1, r4
    cd42:	f006 f885 	bl	12e50 <__aeabi_fcmple>
    cd46:	b130      	cbz	r0, cd56 <planner::planNextMove(Point&, long, Point const&)+0x4ea>
			block->flags |= Block::NominalLength;
    cd48:	f899 3048 	ldrb.w	r3, [r9, #72]	; 0x48
    cd4c:	f043 0304 	orr.w	r3, r3, #4
    cd50:	f889 3048 	strb.w	r3, [r9, #72]	; 0x48
    cd54:	e005      	b.n	cd62 <planner::planNextMove(Point&, long, Point const&)+0x4f6>
		else
			block->flags &= ~Block::NominalLength;
    cd56:	f899 3048 	ldrb.w	r3, [r9, #72]	; 0x48
    cd5a:	f023 0304 	bic.w	r3, r3, #4
    cd5e:	f889 3048 	strb.w	r3, [r9, #72]	; 0x48
		block->flags |= Block::Recalculate; // Always calculate trapezoid for new block
    cd62:	f899 3048 	ldrb.w	r3, [r9, #72]	; 0x48
    cd66:	f043 0302 	orr.w	r3, r3, #2
    cd6a:	f889 3048 	strb.w	r3, [r9, #72]	; 0x48

		// Update previous path speed and nominal speed
		memcpy(previous_speed, current_speed, sizeof(previous_speed)); // previous_speed[] = current_speed[]
    cd6e:	f242 4498 	movw	r4, #9368	; 0x2498
    cd72:	f2c1 0400 	movt	r4, #4096	; 0x1000
    cd76:	ad0e      	add	r5, sp, #56	; 0x38
    cd78:	e915 000f 	ldmdb	r5, {r0, r1, r2, r3}
    cd7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		previous_nominal_speed = local_nominal_speed;
    cd80:	f242 4388 	movw	r3, #9352	; 0x2488
    cd84:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cd88:	9d04      	ldr	r5, [sp, #16]
    cd8a:	601d      	str	r5, [r3, #0]

		// move locals to the block
		block->millimeters = local_millimeters;
    cd8c:	9d03      	ldr	r5, [sp, #12]
    cd8e:	f8c9 502c 	str.w	r5, [r9, #44]	; 0x2c
		block->step_event_count = local_step_event_count;
    cd92:	9d02      	ldr	r5, [sp, #8]
    cd94:	f8a9 5014 	strh.w	r5, [r9, #20]
		block->nominal_speed = local_nominal_speed;
    cd98:	9d04      	ldr	r5, [sp, #16]
    cd9a:	f8c9 5020 	str.w	r5, [r9, #32]
		block->acceleration_st = local_acceleration_st;
    cd9e:	f8c9 a044 	str.w	sl, [r9, #68]	; 0x44
		block->stop_speed = minimum_planner_speed;
    cda2:	f641 730c 	movw	r3, #7948	; 0x1f0c
    cda6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cdaa:	681b      	ldr	r3, [r3, #0]
    cdac:	f8c9 3034 	str.w	r3, [r9, #52]	; 0x34
		}
		
		// bump the head. cannot return anything useful, so it doesn't
		// WARNING: no sanity checks!
		inline void bumpHead() {
			head = getNextIndex(head);
    cdb0:	f242 438c 	movw	r3, #9356	; 0x248c
    cdb4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cdb8:	781a      	ldrb	r2, [r3, #0]
		inline BufSizeType getTailIndex() {
			return tail;
		}
		
		inline BufSizeType getNextIndex(BufSizeType from) {
			return ((from + 1) & size_mask);
    cdba:	f102 0201 	add.w	r2, r2, #1
    cdbe:	78d9      	ldrb	r1, [r3, #3]
    cdc0:	400a      	ands	r2, r1
		}
		
		// bump the head. cannot return anything useful, so it doesn't
		// WARNING: no sanity checks!
		inline void bumpHead() {
			head = getNextIndex(head);
    cdc2:	701a      	strb	r2, [r3, #0]
		block->stop_speed = minimum_planner_speed;

		// Move buffer head
		block_buffer.bumpHead();

		planner_recalculate();
    cdc4:	f7ff fd02 	bl	c7cc <planner::planner_recalculate()>

		steppers::startRunning();
    cdc8:	f002 fb2a 	bl	f420 <steppers::startRunning()>

		return true;
    cdcc:	f04f 0001 	mov.w	r0, #1
	}
    cdd0:	b00f      	add	sp, #60	; 0x3c
    cdd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		//local_step_event_cout is the max of x,y,z speeds)
		if (local_step_event_count > 0) {
			local_millimeters = sqrt(delta_mm[X_AXIS]*delta_mm[X_AXIS] + delta_mm[Y_AXIS]*delta_mm[Y_AXIS] + delta_mm[Z_AXIS]*delta_mm[Z_AXIS]);
		}

		abs_steps = abs(steps[A_AXIS]);
    cdd6:	4620      	mov	r0, r4
    cdd8:	f04f 0103 	mov.w	r1, #3
    cddc:	f000 fb88 	bl	d4f0 <Point::operator[](unsigned int) const>

template <>
inline int abs(int x) { return __builtin_abs(x); }

template <>
inline long abs(long x) { return __builtin_labs(x); }
    cde0:	6803      	ldr	r3, [r0, #0]
    cde2:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
    cde6:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
		if (local_step_event_count > 0) {
			local_millimeters = sqrt(delta_mm[X_AXIS]*delta_mm[X_AXIS] + delta_mm[Y_AXIS]*delta_mm[Y_AXIS] + delta_mm[Z_AXIS]*delta_mm[Z_AXIS]);
		}

		abs_steps = abs(steps[A_AXIS]);
		local_step_event_count = max((int32_t)local_step_event_count, abs_steps);
    cdea:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    cdee:	9102      	str	r1, [sp, #8]
		delta_mm[A_AXIS] = ((float)steps[A_AXIS])/axes[A_AXIS].steps_per_mm;
    cdf0:	4620      	mov	r0, r4
    cdf2:	f04f 0103 	mov.w	r1, #3
    cdf6:	f000 fb7b 	bl	d4f0 <Point::operator[](unsigned int) const>
    cdfa:	6800      	ldr	r0, [r0, #0]
    cdfc:	f005 fe2c 	bl	12a58 <__aeabi_i2f>
    ce00:	f242 4304 	movw	r3, #9220	; 0x2404
    ce04:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ce08:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    ce0a:	f005 ff2d 	bl	12c68 <__aeabi_fdiv>
    ce0e:	9003      	str	r0, [sp, #12]
    ce10:	9009      	str	r0, [sp, #36]	; 0x24
    ce12:	e5da      	b.n	c9ca <planner::planNextMove(Point&, long, Point const&)+0x15e>

0000ce14 <planner::addMoveToBuffer(Point const&, long const&)>:
		position = target;
	}

	// Buffer the move. IOW, add a new block, and recalculate the acceleration accordingly
	void addMoveToBuffer(const Point& target, const int32_t &us_per_step)
	{
    ce14:	b570      	push	{r4, r5, r6, lr}
    ce16:	b090      	sub	sp, #64	; 0x40
    ce18:	4604      	mov	r4, r0
    ce1a:	460d      	mov	r5, r1
		Point offset_target;
    ce1c:	a806      	add	r0, sp, #24
    ce1e:	f000 fb5b 	bl	d4d8 <Point::Point()>
		offset_target = target + *tool_offsets;
    ce22:	f641 7308 	movw	r3, #7944	; 0x1f08
    ce26:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ce2a:	4668      	mov	r0, sp
    ce2c:	4621      	mov	r1, r4
    ce2e:	681a      	ldr	r2, [r3, #0]
    ce30:	f000 fb88 	bl	d544 <operator+(Point const&, Point const&)>
    ce34:	ae06      	add	r6, sp, #24
    ce36:	9800      	ldr	r0, [sp, #0]
    ce38:	9901      	ldr	r1, [sp, #4]
    ce3a:	9a02      	ldr	r2, [sp, #8]
    ce3c:	9b03      	ldr	r3, [sp, #12]
    ce3e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    ce40:	9804      	ldr	r0, [sp, #16]
    ce42:	6030      	str	r0, [r6, #0]
		
		/// Clip Z axis so that plate cannot attempt to move out of build area
		/// other axis clipping will be added in a future revision
		if(offset_target[Z_AXIS] > axes[Z_AXIS].max_length){
    ce44:	a806      	add	r0, sp, #24
    ce46:	f04f 0102 	mov.w	r1, #2
    ce4a:	f000 fb55 	bl	d4f8 <Point::operator[](unsigned int)>
    ce4e:	f242 4304 	movw	r3, #9220	; 0x2404
    ce52:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ce56:	6802      	ldr	r2, [r0, #0]
    ce58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ce5a:	429a      	cmp	r2, r3
    ce5c:	dd0a      	ble.n	ce74 <planner::addMoveToBuffer(Point const&, long const&)+0x60>
			offset_target[Z_AXIS] = axes[Z_AXIS].max_length;
    ce5e:	a806      	add	r0, sp, #24
    ce60:	f04f 0102 	mov.w	r1, #2
    ce64:	f000 fb48 	bl	d4f8 <Point::operator[](unsigned int)>
    ce68:	f242 4304 	movw	r3, #9220	; 0x2404
    ce6c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ce70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ce72:	6003      	str	r3, [r0, #0]
		}

			
		planNextMove(offset_target, us_per_step, offset_target - position);
    ce74:	682e      	ldr	r6, [r5, #0]
    ce76:	f242 4560 	movw	r5, #9312	; 0x2460
    ce7a:	f2c1 0500 	movt	r5, #4096	; 0x1000
    ce7e:	a80b      	add	r0, sp, #44	; 0x2c
    ce80:	a906      	add	r1, sp, #24
    ce82:	462a      	mov	r2, r5
    ce84:	f000 fb3c 	bl	d500 <operator-(Point const&, Point const&)>
    ce88:	a806      	add	r0, sp, #24
    ce8a:	4631      	mov	r1, r6
    ce8c:	aa0b      	add	r2, sp, #44	; 0x2c
    ce8e:	f7ff fced 	bl	c86c <planner::planNextMove(Point&, long, Point const&)>
		position = target;
    ce92:	6820      	ldr	r0, [r4, #0]
    ce94:	6861      	ldr	r1, [r4, #4]
    ce96:	68a2      	ldr	r2, [r4, #8]
    ce98:	68e3      	ldr	r3, [r4, #12]
    ce9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    ce9c:	6920      	ldr	r0, [r4, #16]
    ce9e:	6028      	str	r0, [r5, #0]

	}
    cea0:	b010      	add	sp, #64	; 0x40
    cea2:	bd70      	pop	{r4, r5, r6, pc}

0000cea4 <planner::addMoveToBufferRelative(Point const&, long const&, signed char)>:
	}

	/// Command calls this to add a move to the buffer,
	/// so that the planner will generate an acceleration trapezoid
	void addMoveToBufferRelative(const Point& move, const int32_t &ms, const int8_t relative)
	{
    cea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cea8:	b093      	sub	sp, #76	; 0x4c
    ceaa:	4607      	mov	r7, r0
    ceac:	9101      	str	r1, [sp, #4]
    ceae:	4691      	mov	r9, r2
		
		Point target;
    ceb0:	a808      	add	r0, sp, #32
    ceb2:	f000 fb11 	bl	d4d8 <Point::Point()>

		target = move + *tool_offsets;
    ceb6:	f641 7308 	movw	r3, #7944	; 0x1f08
    ceba:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cebe:	a802      	add	r0, sp, #8
    cec0:	4639      	mov	r1, r7
    cec2:	681a      	ldr	r2, [r3, #0]
    cec4:	f000 fb3e 	bl	d544 <operator+(Point const&, Point const&)>
    cec8:	ac08      	add	r4, sp, #32
    ceca:	9802      	ldr	r0, [sp, #8]
    cecc:	9903      	ldr	r1, [sp, #12]
    cece:	9a04      	ldr	r2, [sp, #16]
    ced0:	9b05      	ldr	r3, [sp, #20]
    ced2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    ced4:	9806      	ldr	r0, [sp, #24]
    ced6:	6020      	str	r0, [r4, #0]

		int32_t max_delta = 0;
		for (int i = 0; i < STEPPER_COUNT; i++) {
    ced8:	f04f 0400 	mov.w	r4, #0
		
		Point target;

		target = move + *tool_offsets;

		int32_t max_delta = 0;
    cedc:	4626      	mov	r6, r4
			int32_t delta = 0;
			if ((relative & (1 << i))) {
				target[i] = position[i] + move[i];
				delta = abs(move[i]);
			} else {
				target[i] = move[i] + (*tool_offsets)[i];
    cede:	f641 7a08 	movw	sl, #7944	; 0x1f08
    cee2:	f2c1 0a00 	movt	sl, #4096	; 0x1000
				delta = abs(target[i] - position[i]);
    cee6:	f242 4860 	movw	r8, #9312	; 0x2460
    ceea:	f2c1 0800 	movt	r8, #4096	; 0x1000
		target = move + *tool_offsets;

		int32_t max_delta = 0;
		for (int i = 0; i < STEPPER_COUNT; i++) {
			int32_t delta = 0;
			if ((relative & (1 << i))) {
    ceee:	fa49 f304 	asr.w	r3, r9, r4
    cef2:	f013 0f01 	tst.w	r3, #1
    cef6:	d01a      	beq.n	cf2e <planner::addMoveToBufferRelative(Point const&, long const&, signed char)+0x8a>
				target[i] = position[i] + move[i];
    cef8:	a808      	add	r0, sp, #32
    cefa:	4621      	mov	r1, r4
    cefc:	f000 fafc 	bl	d4f8 <Point::operator[](unsigned int)>
    cf00:	4683      	mov	fp, r0
    cf02:	4640      	mov	r0, r8
    cf04:	4621      	mov	r1, r4
    cf06:	f000 faf7 	bl	d4f8 <Point::operator[](unsigned int)>
    cf0a:	6805      	ldr	r5, [r0, #0]
    cf0c:	4638      	mov	r0, r7
    cf0e:	4621      	mov	r1, r4
    cf10:	f000 faee 	bl	d4f0 <Point::operator[](unsigned int) const>
    cf14:	6803      	ldr	r3, [r0, #0]
    cf16:	18ed      	adds	r5, r5, r3
    cf18:	f8cb 5000 	str.w	r5, [fp]
				delta = abs(move[i]);
    cf1c:	4638      	mov	r0, r7
    cf1e:	4621      	mov	r1, r4
    cf20:	f000 fae6 	bl	d4f0 <Point::operator[](unsigned int) const>

template <>
inline int abs(int x) { return __builtin_abs(x); }

template <>
inline long abs(long x) { return __builtin_labs(x); }
    cf24:	6805      	ldr	r5, [r0, #0]
    cf26:	2d00      	cmp	r5, #0
    cf28:	bfb8      	it	lt
    cf2a:	426d      	neglt	r5, r5
    cf2c:	e020      	b.n	cf70 <planner::addMoveToBufferRelative(Point const&, long const&, signed char)+0xcc>
			int32_t delta = 0;
			if ((relative & (1 << i))) {
				target[i] = position[i] + move[i];
				delta = abs(move[i]);
			} else {
				target[i] = move[i] + (*tool_offsets)[i];
    cf2e:	a808      	add	r0, sp, #32
    cf30:	4621      	mov	r1, r4
    cf32:	f000 fae1 	bl	d4f8 <Point::operator[](unsigned int)>
    cf36:	4683      	mov	fp, r0
    cf38:	4638      	mov	r0, r7
    cf3a:	4621      	mov	r1, r4
    cf3c:	f000 fad8 	bl	d4f0 <Point::operator[](unsigned int) const>
    cf40:	6805      	ldr	r5, [r0, #0]
    cf42:	f8da 0000 	ldr.w	r0, [sl]
    cf46:	4621      	mov	r1, r4
    cf48:	f000 fad6 	bl	d4f8 <Point::operator[](unsigned int)>
    cf4c:	6803      	ldr	r3, [r0, #0]
    cf4e:	18ed      	adds	r5, r5, r3
    cf50:	f8cb 5000 	str.w	r5, [fp]
				delta = abs(target[i] - position[i]);
    cf54:	a808      	add	r0, sp, #32
    cf56:	4621      	mov	r1, r4
    cf58:	f000 face 	bl	d4f8 <Point::operator[](unsigned int)>
    cf5c:	6805      	ldr	r5, [r0, #0]
    cf5e:	4640      	mov	r0, r8
    cf60:	4621      	mov	r1, r4
    cf62:	f000 fac9 	bl	d4f8 <Point::operator[](unsigned int)>
    cf66:	6803      	ldr	r3, [r0, #0]
    cf68:	1aed      	subs	r5, r5, r3

template <>
inline int abs(int x) { return __builtin_abs(x); }

template <>
inline long abs(long x) { return __builtin_labs(x); }
    cf6a:	2d00      	cmp	r5, #0
    cf6c:	bfb8      	it	lt
    cf6e:	426d      	neglt	r5, r5
    cf70:	42ae      	cmp	r6, r5
    cf72:	bfb8      	it	lt
    cf74:	462e      	movlt	r6, r5
		Point target;

		target = move + *tool_offsets;

		int32_t max_delta = 0;
		for (int i = 0; i < STEPPER_COUNT; i++) {
    cf76:	f104 0401 	add.w	r4, r4, #1
    cf7a:	2c04      	cmp	r4, #4
    cf7c:	d1b7      	bne.n	ceee <planner::addMoveToBufferRelative(Point const&, long const&, signed char)+0x4a>
			}
		}

		/// Clip Z axis so that plate cannot attempt to move out of build area
		/// other axis clipping will be added in a future revision
		if(target[Z_AXIS] > axes[Z_AXIS].max_length){
    cf7e:	a808      	add	r0, sp, #32
    cf80:	f04f 0102 	mov.w	r1, #2
    cf84:	f000 fab8 	bl	d4f8 <Point::operator[](unsigned int)>
    cf88:	f242 4304 	movw	r3, #9220	; 0x2404
    cf8c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cf90:	6802      	ldr	r2, [r0, #0]
    cf92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    cf94:	429a      	cmp	r2, r3
    cf96:	dd0a      	ble.n	cfae <planner::addMoveToBufferRelative(Point const&, long const&, signed char)+0x10a>
			target[Z_AXIS] = axes[Z_AXIS].max_length;
    cf98:	a808      	add	r0, sp, #32
    cf9a:	f04f 0102 	mov.w	r1, #2
    cf9e:	f000 faab 	bl	d4f8 <Point::operator[](unsigned int)>
    cfa2:	f242 4304 	movw	r3, #9220	; 0x2404
    cfa6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cfaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    cfac:	6003      	str	r3, [r0, #0]
		}

		planNextMove(target, ms/max_delta, target-position);
    cfae:	9a01      	ldr	r2, [sp, #4]
    cfb0:	6813      	ldr	r3, [r2, #0]
    cfb2:	fb93 f6f6 	sdiv	r6, r3, r6
    cfb6:	f242 4460 	movw	r4, #9312	; 0x2460
    cfba:	f2c1 0400 	movt	r4, #4096	; 0x1000
    cfbe:	a80d      	add	r0, sp, #52	; 0x34
    cfc0:	a908      	add	r1, sp, #32
    cfc2:	4622      	mov	r2, r4
    cfc4:	f000 fa9c 	bl	d500 <operator-(Point const&, Point const&)>
    cfc8:	a808      	add	r0, sp, #32
    cfca:	4631      	mov	r1, r6
    cfcc:	aa0d      	add	r2, sp, #52	; 0x34
    cfce:	f7ff fc4d 	bl	c86c <planner::planNextMove(Point&, long, Point const&)>
		position = target;
    cfd2:	ad08      	add	r5, sp, #32
    cfd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    cfd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    cfd8:	682b      	ldr	r3, [r5, #0]
    cfda:	6023      	str	r3, [r4, #0]
	}
    cfdc:	b013      	add	sp, #76	; 0x4c
    cfde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cfe2:	bf00      	nop

0000cfe4 <planner::changeToolIndex(unsigned char)>:
#endif
	}
	
	void changeToolIndex(uint8_t tool){
		if(tool == 1)
			tool_offsets = &tolerance_offset_T1;
    cfe4:	f242 32ec 	movw	r2, #9196	; 0x23ec
    cfe8:	f2c1 0200 	movt	r2, #4096	; 0x1000
    cfec:	f242 4374 	movw	r3, #9332	; 0x2474
    cff0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    cff4:	2801      	cmp	r0, #1
    cff6:	bf08      	it	eq
    cff8:	461a      	moveq	r2, r3
		previous_unit_vec[2]= 0.0;
#endif
	}
	
	void changeToolIndex(uint8_t tool){
		if(tool == 1)
    cffa:	f641 7308 	movw	r3, #7944	; 0x1f08
    cffe:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d002:	601a      	str	r2, [r3, #0]
			tool_offsets = &tolerance_offset_T1;
		else
			tool_offsets = &tolerance_offset_T0;
	}
    d004:	4770      	bx	lr
    d006:	bf00      	nop

0000d008 <planner::abort()>:
//		}
	}

	/// call when a move is starting or ending, or canceling a move
	/// clears planner buffer
	void abort() {
    d008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d00c:	b087      	sub	sp, #28
		steppers::abort();
    d00e:	f001 fc89 	bl	e924 <steppers::abort()>
		position = steppers::getPosition();
    d012:	4668      	mov	r0, sp
    d014:	f001 fcd8 	bl	e9c8 <steppers::getPosition()>
    d018:	f242 4460 	movw	r4, #9312	; 0x2460
    d01c:	f2c1 0400 	movt	r4, #4096	; 0x1000
    d020:	9800      	ldr	r0, [sp, #0]
    d022:	9901      	ldr	r1, [sp, #4]
    d024:	9a02      	ldr	r2, [sp, #8]
    d026:	9b03      	ldr	r3, [sp, #12]
    d028:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d02a:	9804      	ldr	r0, [sp, #16]
    d02c:	6020      	str	r0, [r4, #0]
    d02e:	f44f 76b1 	mov.w	r6, #354	; 0x162
	}
	
	inline void loadToleranceOffsets(){
		// get toolhead offsets
//		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
			for(int i = 0; i  < 3; i++){
    d032:	f04f 0400 	mov.w	r4, #0
				int32_t tolerance_err = (int32_t)(eeprom::getEeprom32(eeprom_offsets::TOOLHEAD_OFFSET_SETTINGS + i*4, 0)) / 10;
    d036:	46a1      	mov	r9, r4
				tolerance_offset_T0[i] = (tolerance_err/2);
    d038:	f242 38ec 	movw	r8, #9196	; 0x23ec
    d03c:	f2c1 0800 	movt	r8, #4096	; 0x1000
	
	inline void loadToleranceOffsets(){
		// get toolhead offsets
//		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
			for(int i = 0; i  < 3; i++){
				int32_t tolerance_err = (int32_t)(eeprom::getEeprom32(eeprom_offsets::TOOLHEAD_OFFSET_SETTINGS + i*4, 0)) / 10;
    d040:	f246 6767 	movw	r7, #26215	; 0x6667
    d044:	f2c6 6766 	movt	r7, #26214	; 0x6666
    d048:	4630      	mov	r0, r6
    d04a:	4649      	mov	r1, r9
    d04c:	f003 fa66 	bl	1051c <eeprom::getEeprom32(unsigned short, unsigned long)>
    d050:	4605      	mov	r5, r0
				tolerance_offset_T0[i] = (tolerance_err/2);
    d052:	4640      	mov	r0, r8
    d054:	4621      	mov	r1, r4
    d056:	f000 fa4f 	bl	d4f8 <Point::operator[](unsigned int)>
	
	inline void loadToleranceOffsets(){
		// get toolhead offsets
//		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
			for(int i = 0; i  < 3; i++){
				int32_t tolerance_err = (int32_t)(eeprom::getEeprom32(eeprom_offsets::TOOLHEAD_OFFSET_SETTINGS + i*4, 0)) / 10;
    d05a:	fb87 2305 	smull	r2, r3, r7, r5
    d05e:	ea4f 75e5 	mov.w	r5, r5, asr #31
    d062:	ebc5 05a3 	rsb	r5, r5, r3, asr #2
				tolerance_offset_T0[i] = (tolerance_err/2);
    d066:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
    d06a:	ea4f 0565 	mov.w	r5, r5, asr #1
    d06e:	6005      	str	r5, [r0, #0]
	}
	
	inline void loadToleranceOffsets(){
		// get toolhead offsets
//		ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
			for(int i = 0; i  < 3; i++){
    d070:	f104 0401 	add.w	r4, r4, #1
    d074:	f106 0604 	add.w	r6, r6, #4
    d078:	b2b6      	uxth	r6, r6
    d07a:	2c03      	cmp	r4, #3
    d07c:	d1e4      	bne.n	d048 <planner::abort()+0x40>
				tolerance_offset_T0[i] = (tolerance_err/2);
			}
			// For now, force Z offset to be zero as bad things can happen if it has a value AND there is no use case for it having a value on the replicator
			// extruder axes are 0 because offset concept does not apply
			for (int i = 2; i < STEPPER_COUNT; i++)
				tolerance_offset_T0[i] = 0;
    d07e:	f242 35ec 	movw	r5, #9196	; 0x23ec
    d082:	f2c1 0500 	movt	r5, #4096	; 0x1000
    d086:	4628      	mov	r0, r5
    d088:	f04f 0102 	mov.w	r1, #2
    d08c:	f000 fa34 	bl	d4f8 <Point::operator[](unsigned int)>
    d090:	f04f 0400 	mov.w	r4, #0
    d094:	6004      	str	r4, [r0, #0]
    d096:	4628      	mov	r0, r5
    d098:	f04f 0103 	mov.w	r1, #3
    d09c:	f000 fa2c 	bl	d4f8 <Point::operator[](unsigned int)>
    d0a0:	6004      	str	r4, [r0, #0]

			for(int i = 0; i < STEPPER_COUNT; i++)
				tolerance_offset_T1[i] = -1 * tolerance_offset_T0[i];
    d0a2:	f242 4674 	movw	r6, #9332	; 0x2474
    d0a6:	f2c1 0600 	movt	r6, #4096	; 0x1000
    d0aa:	462f      	mov	r7, r5
    d0ac:	4630      	mov	r0, r6
    d0ae:	4621      	mov	r1, r4
    d0b0:	f000 fa22 	bl	d4f8 <Point::operator[](unsigned int)>
    d0b4:	4605      	mov	r5, r0
    d0b6:	4638      	mov	r0, r7
    d0b8:	4621      	mov	r1, r4
    d0ba:	f000 fa1d 	bl	d4f8 <Point::operator[](unsigned int)>
    d0be:	6803      	ldr	r3, [r0, #0]
    d0c0:	f1c3 0300 	rsb	r3, r3, #0
    d0c4:	602b      	str	r3, [r5, #0]
			// For now, force Z offset to be zero as bad things can happen if it has a value AND there is no use case for it having a value on the replicator
			// extruder axes are 0 because offset concept does not apply
			for (int i = 2; i < STEPPER_COUNT; i++)
				tolerance_offset_T0[i] = 0;

			for(int i = 0; i < STEPPER_COUNT; i++)
    d0c6:	f104 0401 	add.w	r4, r4, #1
    d0ca:	2c04      	cmp	r4, #4
    d0cc:	d1ee      	bne.n	d0ac <planner::abort()+0xa4>
		position = steppers::getPosition();

		/// load toolhead offset values from EEPROM
		loadToleranceOffsets();
		/// tool 0 is default
		changeToolIndex(0);
    d0ce:	f04f 0000 	mov.w	r0, #0
    d0d2:	f7ff ff87 	bl	cfe4 <planner::changeToolIndex(unsigned char)>
		// reset speed
		for (int i = 0; i < STEPPER_COUNT; i++) {
			previous_speed[i] = 0.0;
    d0d6:	f242 4398 	movw	r3, #9368	; 0x2498
    d0da:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d0de:	f04f 0200 	mov.w	r2, #0
    d0e2:	601a      	str	r2, [r3, #0]
    d0e4:	605a      	str	r2, [r3, #4]
    d0e6:	609a      	str	r2, [r3, #8]
    d0e8:	60da      	str	r2, [r3, #12]
		}
		previous_nominal_speed = 0.0;
    d0ea:	f242 4388 	movw	r3, #9352	; 0x2488
    d0ee:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d0f2:	601a      	str	r2, [r3, #0]
		inline BufSizeType getUsedCount() {
			return ((head-tail+size) & size_mask);
		}
		
		inline void clear() {
			head = 0;
    d0f4:	f242 438c 	movw	r3, #9356	; 0x248c
    d0f8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d0fc:	f04f 0400 	mov.w	r4, #0
    d100:	701c      	strb	r4, [r3, #0]
			tail = 0;
    d102:	705c      	strb	r4, [r3, #1]
		}
		previous_nominal_speed = 0.0;
		
		block_buffer.clear();

		accelerationON = eeprom::getEeprom8(eeprom_offsets::ACCELERATION_SETTINGS, 1);
    d104:	f44f 70b7 	mov.w	r0, #366	; 0x16e
    d108:	f04f 0101 	mov.w	r1, #1
    d10c:	f003 f962 	bl	103d4 <eeprom::getEeprom8(unsigned short, unsigned char)>
    d110:	f240 0318 	movw	r3, #24
    d114:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d118:	1b00      	subs	r0, r0, r4
    d11a:	bf18      	it	ne
    d11c:	2001      	movne	r0, #1
    d11e:	7018      	strb	r0, [r3, #0]

		additional_ms_per_segment = 0;
    d120:	f641 7320 	movw	r3, #7968	; 0x1f20
    d124:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d128:	601c      	str	r4, [r3, #0]
		force_replan_from_stopped = false;
    d12a:	f242 4394 	movw	r3, #9364	; 0x2494
    d12e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d132:	701c      	strb	r4, [r3, #0]
#ifdef CENTREPEDAL
		previous_unit_vec[0]= 0.0;
		previous_unit_vec[1]= 0.0;
		previous_unit_vec[2]= 0.0;
#endif
	}
    d134:	b007      	add	sp, #28
    d136:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d13a:	bf00      	nop

0000d13c <planner::init()>:
	uint32_t additional_ms_per_segment;
	
	volatile bool force_replan_from_stopped;
	
	void init()
	{
    d13c:	b570      	push	{r4, r5, r6, lr}
		xprintf("planner::init" " (%s:%d)\n",_F_,_L_);
    d13e:	f246 6038 	movw	r0, #26168	; 0x6638
    d142:	f2c0 0002 	movt	r0, #2
    d146:	497a      	ldr	r1, [pc, #488]	; (d330 <planner::init()+0x1f4>)
    d148:	f44f 7286 	mov.w	r2, #268	; 0x10c
    d14c:	f7f9 f9c2 	bl	64d4 <xprintf>

		/// if eeprom has not been initialized. store default values
		if (eeprom::getEeprom32(eeprom_offsets::TOOLHEAD_OFFSET_SETTINGS, 0xFFFFFFFF) == 0xFFFFFFFF) {
    d150:	f44f 70b1 	mov.w	r0, #354	; 0x162
    d154:	f04f 31ff 	mov.w	r1, #4294967295
    d158:	f003 f9e0 	bl	1051c <eeprom::getEeprom32(unsigned short, unsigned long)>
    d15c:	f1b0 3fff 	cmp.w	r0, #4294967295
    d160:	d10a      	bne.n	d178 <planner::init()+0x3c>
			xprintf("planner::init" " (%s:%d)\n",_F_,_L_);
    d162:	f246 6038 	movw	r0, #26168	; 0x6638
    d166:	f2c0 0002 	movt	r0, #2
    d16a:	4971      	ldr	r1, [pc, #452]	; (d330 <planner::init()+0x1f4>)
    d16c:	f44f 7288 	mov.w	r2, #272	; 0x110
    d170:	f7f9 f9b0 	bl	64d4 <xprintf>
			eeprom::storeToolheadToleranceDefaults();
    d174:	f7fc fbce 	bl	9914 <eeprom::storeToolheadToleranceDefaults()>
		}
		xprintf("planner::init" " (%s:%d)\n",_F_,_L_);
    d178:	f246 6438 	movw	r4, #26168	; 0x6638
    d17c:	f2c0 0402 	movt	r4, #2
    d180:	4e6b      	ldr	r6, [pc, #428]	; (d330 <planner::init()+0x1f4>)
    d182:	4620      	mov	r0, r4
    d184:	4631      	mov	r1, r6
    d186:	f240 1213 	movw	r2, #275	; 0x113
    d18a:	f7f9 f9a3 	bl	64d4 <xprintf>
		
		setAxisStepsPerMM(XSTEPS_PER_MM,0);
    d18e:	f644 40cd 	movw	r0, #19661	; 0x4ccd
    d192:	f2c4 2080 	movt	r0, #17024	; 0x4280
    d196:	f04f 0100 	mov.w	r1, #0
    d19a:	f7ff f8eb 	bl	c374 <planner::setAxisStepsPerMM(float, unsigned char)>
		setAxisStepsPerMM(YSTEPS_PER_MM,1);               
    d19e:	f64b 0052 	movw	r0, #47186	; 0xb852
    d1a2:	f2c4 2037 	movt	r0, #16951	; 0x4237
    d1a6:	f04f 0101 	mov.w	r1, #1
    d1aa:	f7ff f8e3 	bl	c374 <planner::setAxisStepsPerMM(float, unsigned char)>
		setAxisStepsPerMM(ZSTEPS_PER_MM,2);
    d1ae:	f04f 0000 	mov.w	r0, #0
    d1b2:	f2c4 5020 	movt	r0, #17696	; 0x4520
    d1b6:	f04f 0102 	mov.w	r1, #2
    d1ba:	f7ff f8db 	bl	c374 <planner::setAxisStepsPerMM(float, unsigned char)>
		setAxisStepsPerMM(ASTEPS_PER_MM,3);
    d1be:	f643 65b8 	movw	r5, #16056	; 0x3eb8
    d1c2:	f2c4 35a5 	movt	r5, #17317	; 0x43a5
    d1c6:	4628      	mov	r0, r5
    d1c8:	f04f 0103 	mov.w	r1, #3
    d1cc:	f7ff f8d2 	bl	c374 <planner::setAxisStepsPerMM(float, unsigned char)>
		setAxisStepsPerMM(BSTEPS_PER_MM,4);
    d1d0:	4628      	mov	r0, r5
    d1d2:	f04f 0104 	mov.w	r1, #4
    d1d6:	f7ff f8cd 	bl	c374 <planner::setAxisStepsPerMM(float, unsigned char)>

		xprintf("planner::init" " (%s:%d)\n",_F_,_L_);
    d1da:	4620      	mov	r0, r4
    d1dc:	4631      	mov	r1, r6
    d1de:	f240 121b 	movw	r2, #283	; 0x11b
    d1e2:	f7f9 f977 	bl	64d4 <xprintf>
		// check that acceleration settings have been initialized 
		// if not, load defaults

		uint8_t accelerationStatus = eeprom::getEeprom8(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::DEFAULTS_FLAG, 0xFF);
    d1e6:	f44f 70c4 	mov.w	r0, #392	; 0x188
    d1ea:	f04f 01ff 	mov.w	r1, #255	; 0xff
    d1ee:	f003 f8f1 	bl	103d4 <eeprom::getEeprom8(unsigned short, unsigned char)>
		if(accelerationStatus !=  _BV(ACCELERATION_INIT_BIT)){
    d1f2:	2880      	cmp	r0, #128	; 0x80
    d1f4:	d007      	beq.n	d206 <planner::init()+0xca>
			xprintf("planner::init" " (%s:%d)\n",_F_,_L_);
    d1f6:	4620      	mov	r0, r4
    d1f8:	4631      	mov	r1, r6
    d1fa:	f240 1221 	movw	r2, #289	; 0x121
    d1fe:	f7f9 f969 	bl	64d4 <xprintf>
			eeprom::setDefaultsAcceleration();
    d202:	f7fc fa7f 	bl	9704 <eeprom::setDefaultsAcceleration()>
		}
		xprintf("planner::init" " (%s:%d)\n",_F_,_L_);
    d206:	f246 6038 	movw	r0, #26168	; 0x6638
    d20a:	f2c0 0002 	movt	r0, #2
    d20e:	4948      	ldr	r1, [pc, #288]	; (d330 <planner::init()+0x1f4>)
    d210:	f44f 7292 	mov.w	r2, #292	; 0x124
    d214:	f7f9 f95e 	bl	64d4 <xprintf>

		// Master acceleration
		setAcceleration((int32_t)eeprom::getEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::ACCELERATION_RATE_OFFSET, DEFAULT_ACCELERATION));
    d218:	f44f 70b8 	mov.w	r0, #368	; 0x170
    d21c:	f640 31b8 	movw	r1, #3000	; 0xbb8
    d220:	f003 f956 	bl	104d0 <eeprom::getEeprom16(unsigned short, unsigned short)>
    d224:	f7ff f8b2 	bl	c38c <planner::setAcceleration(long)>
		
		setAxisAcceleration((int32_t)eeprom::getEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_RATES_OFFSET+ 0, DEFAULT_X_ACCELERATION), 0);        
    d228:	f44f 70b9 	mov.w	r0, #370	; 0x172
    d22c:	f640 31b8 	movw	r1, #3000	; 0xbb8
    d230:	f003 f94e 	bl	104d0 <eeprom::getEeprom16(unsigned short, unsigned short)>
    d234:	f04f 0100 	mov.w	r1, #0
    d238:	f7ff f8b2 	bl	c3a0 <planner::setAxisAcceleration(long, unsigned char)>
		setAxisAcceleration((int32_t)eeprom::getEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_RATES_OFFSET+ 2, DEFAULT_Y_ACCELERATION), 1);
    d23c:	f44f 70ba 	mov.w	r0, #372	; 0x174
    d240:	f640 31b8 	movw	r1, #3000	; 0xbb8
    d244:	f003 f944 	bl	104d0 <eeprom::getEeprom16(unsigned short, unsigned short)>
    d248:	f04f 0101 	mov.w	r1, #1
    d24c:	f7ff f8a8 	bl	c3a0 <planner::setAxisAcceleration(long, unsigned char)>
		setAxisAcceleration((int32_t)eeprom::getEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_RATES_OFFSET+ 4, DEFAULT_Z_ACCELERATION), 2);
    d250:	f44f 70bb 	mov.w	r0, #374	; 0x176
    d254:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    d258:	f003 f93a 	bl	104d0 <eeprom::getEeprom16(unsigned short, unsigned short)>
    d25c:	f04f 0102 	mov.w	r1, #2
    d260:	f7ff f89e 	bl	c3a0 <planner::setAxisAcceleration(long, unsigned char)>
		setAxisAcceleration((int32_t)eeprom::getEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_RATES_OFFSET+ 6, DEFAULT_A_ACCELERATION), 3);
    d264:	f44f 70bc 	mov.w	r0, #376	; 0x178
    d268:	f640 31b8 	movw	r1, #3000	; 0xbb8
    d26c:	f003 f930 	bl	104d0 <eeprom::getEeprom16(unsigned short, unsigned short)>
    d270:	f04f 0103 	mov.w	r1, #3
    d274:	f7ff f894 	bl	c3a0 <planner::setAxisAcceleration(long, unsigned char)>
		setAxisAcceleration((int32_t)eeprom::getEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_RATES_OFFSET+ 8, DEFAULT_B_ACCELERATION), 4);
    d278:	f44f 70bd 	mov.w	r0, #378	; 0x17a
    d27c:	f640 31b8 	movw	r1, #3000	; 0xbb8
    d280:	f003 f926 	bl	104d0 <eeprom::getEeprom16(unsigned short, unsigned short)>
    d284:	f04f 0104 	mov.w	r1, #4
    d288:	f7ff f88a 	bl	c3a0 <planner::setAxisAcceleration(long, unsigned char)>

		setMaxXYJerk((float)eeprom::getEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_JERK_OFFSET, DEFAULT_MAX_XY_JERK));
    d28c:	f44f 70be 	mov.w	r0, #380	; 0x17c
    d290:	f04f 0114 	mov.w	r1, #20
    d294:	f003 f91c 	bl	104d0 <eeprom::getEeprom16(unsigned short, unsigned short)>
    d298:	f005 fbda 	bl	12a50 <__aeabi_ui2f>
    d29c:	f7ff f864 	bl	c368 <planner::setMaxXYJerk(float)>
		setMaxAxisJerk((float)eeprom::getEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_JERK_OFFSET + 4, DEFAULT_MAX_Z_JERK), 2);
    d2a0:	f44f 70c0 	mov.w	r0, #384	; 0x180
    d2a4:	f04f 0101 	mov.w	r1, #1
    d2a8:	f003 f912 	bl	104d0 <eeprom::getEeprom16(unsigned short, unsigned short)>
    d2ac:	f005 fbd0 	bl	12a50 <__aeabi_ui2f>
    d2b0:	f04f 0102 	mov.w	r1, #2
    d2b4:	f7ff f832 	bl	c31c <planner::setMaxAxisJerk(float, unsigned char)>
		setMaxAxisJerk((float)eeprom::getEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_JERK_OFFSET + 6, DEFAULT_MAX_A_JERK), 3);
    d2b8:	f44f 70c1 	mov.w	r0, #386	; 0x182
    d2bc:	f04f 0102 	mov.w	r1, #2
    d2c0:	f003 f906 	bl	104d0 <eeprom::getEeprom16(unsigned short, unsigned short)>
    d2c4:	f005 fbc4 	bl	12a50 <__aeabi_ui2f>
    d2c8:	f04f 0103 	mov.w	r1, #3
    d2cc:	f7ff f826 	bl	c31c <planner::setMaxAxisJerk(float, unsigned char)>
		setMaxAxisJerk((float)eeprom::getEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_JERK_OFFSET + 8, DEFAULT_MAX_B_JERK), 4);
    d2d0:	f44f 70c2 	mov.w	r0, #388	; 0x184
    d2d4:	f04f 0102 	mov.w	r1, #2
    d2d8:	f003 f8fa 	bl	104d0 <eeprom::getEeprom16(unsigned short, unsigned short)>
    d2dc:	f005 fbb8 	bl	12a50 <__aeabi_ui2f>
    d2e0:	f04f 0104 	mov.w	r1, #4
    d2e4:	f7ff f81a 	bl	c31c <planner::setMaxAxisJerk(float, unsigned char)>

		minimum_planner_speed = eeprom::getEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::MINIMUM_SPEED, DEFAULT_MIN_SPEED);
    d2e8:	f44f 70c3 	mov.w	r0, #390	; 0x186
    d2ec:	f04f 010f 	mov.w	r1, #15
    d2f0:	f003 f8ee 	bl	104d0 <eeprom::getEeprom16(unsigned short, unsigned short)>
    d2f4:	f641 740c 	movw	r4, #7948	; 0x1f0c
    d2f8:	f2c1 0400 	movt	r4, #4096	; 0x1000
    d2fc:	f005 fba8 	bl	12a50 <__aeabi_ui2f>
    d300:	6020      	str	r0, [r4, #0]
		
		// Z axis max and min
		setAxisMaxLength(eeprom::getEeprom32(eeprom_offsets::AXIS_LENGTHS + 4*2, replicator_axis_lengths::axis_lengths[2]), 2, true);
    d302:	f44f 70ca 	mov.w	r0, #404	; 0x194
    d306:	f64e 2160 	movw	r1, #60000	; 0xea60
    d30a:	f003 f907 	bl	1051c <eeprom::getEeprom32(unsigned short, unsigned long)>
    d30e:	f04f 0102 	mov.w	r1, #2
    d312:	f04f 0201 	mov.w	r2, #1
    d316:	f7ff f80f 	bl	c338 <planner::setAxisMaxLength(long, unsigned char, bool)>
		setAxisMaxLength(0, 2, false);
    d31a:	f04f 0000 	mov.w	r0, #0
    d31e:	f04f 0102 	mov.w	r1, #2
    d322:	4602      	mov	r2, r0
    d324:	f7ff f808 	bl	c338 <planner::setAxisMaxLength(long, unsigned char, bool)>

		abort();
    d328:	f7ff fe6e 	bl	d008 <planner::abort()>
#ifdef CENTREPEDAL
		previous_unit_vec[0]= 0.0;
		previous_unit_vec[1]= 0.0;
		previous_unit_vec[2]= 0.0;
#endif
	}
    d32c:	bd70      	pop	{r4, r5, r6, pc}
    d32e:	bf00      	nop
    d330:	0002675c 	.word	0x0002675c

0000d334 <planner::definePosition(Point const&)>:
		else
			tool_offsets = &tolerance_offset_T0;
	}

	void definePosition(const Point& new_position)
	{
    d334:	b570      	push	{r4, r5, r6, lr}
    d336:	4604      	mov	r4, r0
		position = new_position;
    d338:	f242 4660 	movw	r6, #9312	; 0x2460
    d33c:	f2c1 0600 	movt	r6, #4096	; 0x1000
    d340:	4635      	mov	r5, r6
    d342:	6800      	ldr	r0, [r0, #0]
    d344:	6861      	ldr	r1, [r4, #4]
    d346:	68a2      	ldr	r2, [r4, #8]
    d348:	68e3      	ldr	r3, [r4, #12]
    d34a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    d34c:	6920      	ldr	r0, [r4, #16]
    d34e:	6028      	str	r0, [r5, #0]
		
		/// Clip Z axis so that plate cannot attempt to move out of build area
		/// other axis clipping will be added in a future revision
		if(position[Z_AXIS] > axes[Z_AXIS].max_length){
    d350:	4630      	mov	r0, r6
    d352:	f04f 0102 	mov.w	r1, #2
    d356:	f000 f8cf 	bl	d4f8 <Point::operator[](unsigned int)>
    d35a:	f242 4304 	movw	r3, #9220	; 0x2404
    d35e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d362:	6802      	ldr	r2, [r0, #0]
    d364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    d366:	429a      	cmp	r2, r3
    d368:	dd0a      	ble.n	d380 <planner::definePosition(Point const&)+0x4c>
			position[Z_AXIS] = axes[Z_AXIS].max_length;
    d36a:	4630      	mov	r0, r6
    d36c:	f04f 0102 	mov.w	r1, #2
    d370:	f000 f8c2 	bl	d4f8 <Point::operator[](unsigned int)>
    d374:	f242 4304 	movw	r3, #9220	; 0x2404
    d378:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d37c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    d37e:	6003      	str	r3, [r0, #0]
		}
		
		steppers::definePosition(new_position);
    d380:	4620      	mov	r0, r4
    d382:	f001 fb0d 	bl	e9a0 <steppers::definePosition(Point const&)>
		
		// reset speed
		for (int i = 0; i < STEPPER_COUNT; i++) {
			previous_speed[i] = 0.0;
    d386:	f242 4398 	movw	r3, #9368	; 0x2498
    d38a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d38e:	f04f 0200 	mov.w	r2, #0
    d392:	601a      	str	r2, [r3, #0]
    d394:	605a      	str	r2, [r3, #4]
    d396:	609a      	str	r2, [r3, #8]
    d398:	60da      	str	r2, [r3, #12]
		}
		previous_nominal_speed = 0.0;
    d39a:	f242 4388 	movw	r3, #9352	; 0x2488
    d39e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d3a2:	601a      	str	r2, [r3, #0]
#ifdef CENTREPEDAL
		previous_unit_vec[0]= 0.0;
		previous_unit_vec[1]= 0.0;
		previous_unit_vec[2]= 0.0;
#endif
	}
    d3a4:	bd70      	pop	{r4, r5, r6, pc}
    d3a6:	bf00      	nop

0000d3a8 <planner::getPosition()>:

	const Point getPosition()
	{
    d3a8:	b430      	push	{r4, r5}
    d3aa:	4605      	mov	r5, r0
		return position;
    d3ac:	f242 4460 	movw	r4, #9312	; 0x2460
    d3b0:	f2c1 0400 	movt	r4, #4096	; 0x1000
    d3b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    d3b6:	6028      	str	r0, [r5, #0]
    d3b8:	6069      	str	r1, [r5, #4]
    d3ba:	60aa      	str	r2, [r5, #8]
    d3bc:	60eb      	str	r3, [r5, #12]
    d3be:	6820      	ldr	r0, [r4, #0]
    d3c0:	6128      	str	r0, [r5, #16]
	}
    d3c2:	4628      	mov	r0, r5
    d3c4:	bc30      	pop	{r4, r5}
    d3c6:	4770      	bx	lr

0000d3c8 <_GLOBAL__sub_I__ZN7planner4axesE>:
}
    d3c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    d3ca:	b095      	sub	sp, #84	; 0x54
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
    d3cc:	f641 7010 	movw	r0, #7952	; 0x1f10
    d3d0:	f2c1 0000 	movt	r0, #4096	; 0x1000
    d3d4:	f04f 0100 	mov.w	r1, #0
    d3d8:	f003 fc6e 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
    d3dc:	f641 7014 	movw	r0, #7956	; 0x1f14
    d3e0:	f2c1 0000 	movt	r0, #4096	; 0x1000
    d3e4:	f04f 0101 	mov.w	r1, #1
    d3e8:	f003 fc66 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
    d3ec:	f641 7018 	movw	r0, #7960	; 0x1f18
    d3f0:	f2c1 0000 	movt	r0, #4096	; 0x1000
    d3f4:	f04f 0102 	mov.w	r1, #2
    d3f8:	f003 fc5e 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
    d3fc:	f641 7024 	movw	r0, #7972	; 0x1f24
    d400:	f2c1 0000 	movt	r0, #4096	; 0x1000
    d404:	f04f 0103 	mov.w	r1, #3
    d408:	f003 fc56 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
    d40c:	f242 4000 	movw	r0, #9216	; 0x2400
    d410:	f2c1 0000 	movt	r0, #4096	; 0x1000
    d414:	f04f 0104 	mov.w	r1, #4
    d418:	f003 fc4e 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
    d41c:	f242 445c 	movw	r4, #9308	; 0x245c
    d420:	f2c1 0400 	movt	r4, #4096	; 0x1000
    d424:	4620      	mov	r0, r4
    d426:	f04f 01ff 	mov.w	r1, #255	; 0xff
    d42a:	f003 fc45 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
    d42e:	f242 4054 	movw	r0, #9300	; 0x2454
    d432:	f2c1 0000 	movt	r0, #4096	; 0x1000
    d436:	4621      	mov	r1, r4
    d438:	f04f 0200 	mov.w	r2, #0
    d43c:	f003 fe4e 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
	
	PlannerAxis axes[STEPPER_COUNT];
	
	float default_acceleration;
	float minimum_planner_speed;
	Point position; // the current position (planning-wise, not bot/stepper-wise) in steps
    d440:	f242 4060 	movw	r0, #9312	; 0x2460
    d444:	f2c1 0000 	movt	r0, #4096	; 0x1000
    d448:	f000 f846 	bl	d4d8 <Point::Point()>
    d44c:	f641 742c 	movw	r4, #7980	; 0x1f2c
    d450:	f2c1 0400 	movt	r4, #4096	; 0x1000

	const Point getPosition()
	{
		return position;
	}
}
    d454:	f504 6598 	add.w	r5, r4, #1216	; 0x4c0
		uint32_t initial_rate;                        // The jerk-adjusted step rate at start of block  
		uint32_t final_rate;                          // The minimal rate at exit
		uint32_t acceleration_st;                     // acceleration steps/sec^2
		uint8_t flags;
		
		Block() : target() {};
    d458:	4620      	mov	r0, r4
    d45a:	f000 f83d 	bl	d4d8 <Point::Point()>
    d45e:	f104 044c 	add.w	r4, r4, #76	; 0x4c
#endif
	float previous_nominal_speed; // Nominal speed of previous path line segment
	static float max_xy_jerk;
	
	/// List of accelerated moves to execute
	Block block_buffer_data[BLOCK_BUFFER_SIZE];
    d462:	42ac      	cmp	r4, r5
    d464:	d1f8      	bne.n	d458 <_GLOBAL__sub_I__ZN7planner4axesE+0x90>
		BufDataType* const data; /// Pointer to buffer data
	
	public:
		///@param buffer_in pre-allocaed data of <T>
		///@param size_in count in elements of buffer_in
		ReusingCircularBufferTempl(BufSizeType size_in, BufDataType* buffer_in) : head(0), tail(0), /*full(false),*/ size(size_in), size_mask(size_in-1), data(buffer_in) {
    d466:	f242 438c 	movw	r3, #9356	; 0x248c
    d46a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d46e:	f04f 0200 	mov.w	r2, #0
    d472:	701a      	strb	r2, [r3, #0]
    d474:	705a      	strb	r2, [r3, #1]
    d476:	f04f 0210 	mov.w	r2, #16
    d47a:	709a      	strb	r2, [r3, #2]
    d47c:	f04f 020f 	mov.w	r2, #15
    d480:	70da      	strb	r2, [r3, #3]
    d482:	f641 722c 	movw	r2, #7980	; 0x1f2c
    d486:	f2c1 0200 	movt	r2, #4096	; 0x1000
    d48a:	605a      	str	r2, [r3, #4]
			for (BufSizeType i = 0; i < size; i++) {
    d48c:	f04f 0400 	mov.w	r4, #0
				data[i] = BufDataType();
    d490:	461e      	mov	r6, r3
    d492:	f04f 074c 	mov.w	r7, #76	; 0x4c
    d496:	6875      	ldr	r5, [r6, #4]
    d498:	fb07 5504 	mla	r5, r7, r4, r5
    d49c:	a801      	add	r0, sp, #4
    d49e:	f000 f81b 	bl	d4d8 <Point::Point()>
    d4a2:	4628      	mov	r0, r5
    d4a4:	a901      	add	r1, sp, #4
    d4a6:	f04f 0249 	mov.w	r2, #73	; 0x49
    d4aa:	f012 f8dd 	bl	1f668 <memcpy>
	
	public:
		///@param buffer_in pre-allocaed data of <T>
		///@param size_in count in elements of buffer_in
		ReusingCircularBufferTempl(BufSizeType size_in, BufDataType* buffer_in) : head(0), tail(0), /*full(false),*/ size(size_in), size_mask(size_in-1), data(buffer_in) {
			for (BufSizeType i = 0; i < size; i++) {
    d4ae:	f104 0401 	add.w	r4, r4, #1
    d4b2:	b2e4      	uxtb	r4, r4
    d4b4:	78b3      	ldrb	r3, [r6, #2]
    d4b6:	42a3      	cmp	r3, r4
    d4b8:	d8ed      	bhi.n	d496 <_GLOBAL__sub_I__ZN7planner4axesE+0xce>
	Block block_buffer_data[BLOCK_BUFFER_SIZE];
	ReusingCircularBufferTempl<Block> block_buffer(BLOCK_BUFFER_SIZE, block_buffer_data);
	
	bool accelerationON = true;

	Point tolerance_offset_T0;
    d4ba:	f242 30ec 	movw	r0, #9196	; 0x23ec
    d4be:	f2c1 0000 	movt	r0, #4096	; 0x1000
    d4c2:	f000 f809 	bl	d4d8 <Point::Point()>
	Point tolerance_offset_T1;
    d4c6:	f242 4074 	movw	r0, #9332	; 0x2474
    d4ca:	f2c1 0000 	movt	r0, #4096	; 0x1000
    d4ce:	f000 f803 	bl	d4d8 <Point::Point()>

	const Point getPosition()
	{
		return position;
	}
}
    d4d2:	b015      	add	sp, #84	; 0x54
    d4d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d4d6:	bf00      	nop

0000d4d8 <Point::Point()>:
	// coordinates[0] = 0;
	// coordinates[1] = 0;
	// coordinates[2] = 0;
	// coordinates[3] = 0;
	// coordinates[4] = 0;
}
    d4d8:	4770      	bx	lr
    d4da:	bf00      	nop

0000d4dc <Point::Point(long, long, long, long, long)>:
// 	coordinates[4] = other.coordinates[4];
// #endif
// }


Point::Point(const int32_t x, const int32_t y, const int32_t z, const int32_t a, const int32_t b) {
    d4dc:	b410      	push	{r4}
	coordinates[0] = x;
    d4de:	6001      	str	r1, [r0, #0]
	coordinates[1] = y;
    d4e0:	6042      	str	r2, [r0, #4]
	coordinates[2] = z;
    d4e2:	6083      	str	r3, [r0, #8]
#if AXIS_COUNT > 3
	coordinates[3] = a;
    d4e4:	9b01      	ldr	r3, [sp, #4]
    d4e6:	60c3      	str	r3, [r0, #12]
	coordinates[4] = b;
    d4e8:	9b02      	ldr	r3, [sp, #8]
    d4ea:	6103      	str	r3, [r0, #16]
#endif
}
    d4ec:	bc10      	pop	{r4}
    d4ee:	4770      	bx	lr

0000d4f0 <Point::operator[](unsigned int) const>:
#endif
}

const int32_t& Point::operator[](const unsigned int index) const {
	return coordinates[index];
}
    d4f0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    d4f4:	4770      	bx	lr
    d4f6:	bf00      	nop

0000d4f8 <Point::operator[](unsigned int)>:

int32_t& Point::operator[](const unsigned int index) {
	return coordinates[index];
}
    d4f8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    d4fc:	4770      	bx	lr
    d4fe:	bf00      	nop

0000d500 <operator-(Point const&, Point const&)>:

/// Subtraction operator, for fast deltas
Point operator- (const Point &a, const Point &b) {
    d500:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d504:	b083      	sub	sp, #12
    d506:	4604      	mov	r4, r0
	Point c = Point(
		a.coordinates[0] - b.coordinates[0],
    d508:	f8d1 c000 	ldr.w	ip, [r1]
    d50c:	f8d2 e000 	ldr.w	lr, [r2]
		a.coordinates[1] - b.coordinates[1],
    d510:	684f      	ldr	r7, [r1, #4]
    d512:	6856      	ldr	r6, [r2, #4]
		a.coordinates[2] - b.coordinates[2],
    d514:	688d      	ldr	r5, [r1, #8]
    d516:	6893      	ldr	r3, [r2, #8]
#if AXIS_COUNT > 3
		a.coordinates[3] - b.coordinates[3],
    d518:	f8d1 900c 	ldr.w	r9, [r1, #12]
    d51c:	f8d2 800c 	ldr.w	r8, [r2, #12]
		a.coordinates[4] - b.coordinates[4]
#endif
	);
    d520:	ebc8 0809 	rsb	r8, r8, r9
    d524:	f8cd 8000 	str.w	r8, [sp]
		a.coordinates[0] - b.coordinates[0],
		a.coordinates[1] - b.coordinates[1],
		a.coordinates[2] - b.coordinates[2],
#if AXIS_COUNT > 3
		a.coordinates[3] - b.coordinates[3],
		a.coordinates[4] - b.coordinates[4]
    d528:	6909      	ldr	r1, [r1, #16]
    d52a:	6912      	ldr	r2, [r2, #16]
#endif
	);
    d52c:	1a8a      	subs	r2, r1, r2
    d52e:	9201      	str	r2, [sp, #4]
    d530:	ebce 010c 	rsb	r1, lr, ip
    d534:	1bba      	subs	r2, r7, r6
    d536:	1aeb      	subs	r3, r5, r3
    d538:	f7ff ffd0 	bl	d4dc <Point::Point(long, long, long, long, long)>
	return c;
}
    d53c:	4620      	mov	r0, r4
    d53e:	b003      	add	sp, #12
    d540:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000d544 <operator+(Point const&, Point const&)>:

/// Addition operator, for offsets
Point operator+ (const Point &a, const Point &b) {
    d544:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d548:	b083      	sub	sp, #12
    d54a:	4604      	mov	r4, r0
	Point c = Point(
		a.coordinates[0] + b.coordinates[0],
    d54c:	f8d1 c000 	ldr.w	ip, [r1]
    d550:	f8d2 e000 	ldr.w	lr, [r2]
		a.coordinates[1] + b.coordinates[1],
    d554:	684f      	ldr	r7, [r1, #4]
    d556:	6856      	ldr	r6, [r2, #4]
		a.coordinates[2] + b.coordinates[2],
    d558:	688d      	ldr	r5, [r1, #8]
    d55a:	6893      	ldr	r3, [r2, #8]
#if AXIS_COUNT > 3
		a.coordinates[3] + b.coordinates[3],
    d55c:	f8d1 900c 	ldr.w	r9, [r1, #12]
    d560:	f8d2 800c 	ldr.w	r8, [r2, #12]
		a.coordinates[4] + b.coordinates[4]
#endif
	);
    d564:	44c8      	add	r8, r9
    d566:	f8cd 8000 	str.w	r8, [sp]
		a.coordinates[0] + b.coordinates[0],
		a.coordinates[1] + b.coordinates[1],
		a.coordinates[2] + b.coordinates[2],
#if AXIS_COUNT > 3
		a.coordinates[3] + b.coordinates[3],
		a.coordinates[4] + b.coordinates[4]
    d56a:	6909      	ldr	r1, [r1, #16]
    d56c:	6912      	ldr	r2, [r2, #16]
#endif
	);
    d56e:	188a      	adds	r2, r1, r2
    d570:	9201      	str	r2, [sp, #4]
    d572:	eb0c 010e 	add.w	r1, ip, lr
    d576:	19ba      	adds	r2, r7, r6
    d578:	18eb      	adds	r3, r5, r3
    d57a:	f7ff ffaf 	bl	d4dc <Point::Point(long, long, long, long, long)>
	return c;
}
    d57e:	4620      	mov	r0, r4
    d580:	b003      	add	sp, #12
    d582:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d586:	bf00      	nop

0000d588 <_GLOBAL__sub_I__ZN5PointC2Ev>:
		::abs(coordinates[3]),
		::abs(coordinates[4])
#endif
	);
	return absPoint;
    d588:	b508      	push	{r3, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
    d58a:	f242 40a8 	movw	r0, #9384	; 0x24a8
    d58e:	f2c1 0000 	movt	r0, #4096	; 0x1000
    d592:	f04f 0100 	mov.w	r1, #0
    d596:	f003 fb8f 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
    d59a:	f242 40ac 	movw	r0, #9388	; 0x24ac
    d59e:	f2c1 0000 	movt	r0, #4096	; 0x1000
    d5a2:	f04f 0101 	mov.w	r1, #1
    d5a6:	f003 fb87 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
    d5aa:	f242 40b0 	movw	r0, #9392	; 0x24b0
    d5ae:	f2c1 0000 	movt	r0, #4096	; 0x1000
    d5b2:	f04f 0102 	mov.w	r1, #2
    d5b6:	f003 fb7f 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
    d5ba:	f242 40b4 	movw	r0, #9396	; 0x24b4
    d5be:	f2c1 0000 	movt	r0, #4096	; 0x1000
    d5c2:	f04f 0103 	mov.w	r1, #3
    d5c6:	f003 fb77 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
    d5ca:	f242 40b8 	movw	r0, #9400	; 0x24b8
    d5ce:	f2c1 0000 	movt	r0, #4096	; 0x1000
    d5d2:	f04f 0104 	mov.w	r1, #4
    d5d6:	f003 fb6f 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
    d5da:	f242 40bc 	movw	r0, #9404	; 0x24bc
    d5de:	f2c1 0000 	movt	r0, #4096	; 0x1000
    d5e2:	f04f 01ff 	mov.w	r1, #255	; 0xff
    d5e6:	f003 fb67 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
    d5ea:	bd08      	pop	{r3, pc}

0000d5ec <_GLOBAL__sub_I__ZN3PSUC2ERK3Pin>:
}

void PSU::turnOn(bool on) {
	// PSU pin is pulled low to turn on power supply
        psu_pin.setValue(!on);
}
    d5ec:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
    d5ee:	f242 40c0 	movw	r0, #9408	; 0x24c0
    d5f2:	f2c1 0000 	movt	r0, #4096	; 0x1000
    d5f6:	f04f 0100 	mov.w	r1, #0
    d5fa:	f003 fb5d 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
    d5fe:	f242 40c4 	movw	r0, #9412	; 0x24c4
    d602:	f2c1 0000 	movt	r0, #4096	; 0x1000
    d606:	f04f 0101 	mov.w	r1, #1
    d60a:	f003 fb55 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
    d60e:	f242 40c8 	movw	r0, #9416	; 0x24c8
    d612:	f2c1 0000 	movt	r0, #4096	; 0x1000
    d616:	f04f 0102 	mov.w	r1, #2
    d61a:	f003 fb4d 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
    d61e:	f242 40cc 	movw	r0, #9420	; 0x24cc
    d622:	f2c1 0000 	movt	r0, #4096	; 0x1000
    d626:	f04f 0103 	mov.w	r1, #3
    d62a:	f003 fb45 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
    d62e:	f242 40d0 	movw	r0, #9424	; 0x24d0
    d632:	f2c1 0000 	movt	r0, #4096	; 0x1000
    d636:	f04f 0104 	mov.w	r1, #4
    d63a:	f003 fb3d 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
    d63e:	f242 44d4 	movw	r4, #9428	; 0x24d4
    d642:	f2c1 0400 	movt	r4, #4096	; 0x1000
    d646:	4620      	mov	r0, r4
    d648:	f04f 01ff 	mov.w	r1, #255	; 0xff
    d64c:	f003 fb34 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
    d650:	f242 40d8 	movw	r0, #9432	; 0x24d8
    d654:	f2c1 0000 	movt	r0, #4096	; 0x1000
    d658:	4621      	mov	r1, r4
    d65a:	f04f 0200 	mov.w	r2, #0
    d65e:	f003 fd3d 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
    d662:	bd10      	pop	{r4, pc}

0000d664 <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)>:
  // channel : 1,2 select PWM channels, channel 3 does nothing
 // level : blink rate for channels 1,2,  channel 3 ignores this
 // LEDs:  {bits: XXBBGGRR : BLUE: 0b110000, Green:0b1100, RED:0b11} 
 //  		ones indicate on, zeros indicate off 
 void setBlinkRate(uint8_t Channel, uint8_t rate, uint8_t LEDs)
 {
    d664:	b510      	push	{r4, lr}
	 uint8_t data[4] = {0 , rate, LED_REG_SELECT, 0};
     uint8_t data1[2] = {LED_REG_SELECT, 0};
     uint8_t data2[2] = {0 , rate};
 	
 	// set pwm for select channel
 	if (Channel == LED_CHANNEL1){
    d666:	b950      	cbnz	r0, d67e <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)+0x1a>
 		data2[0] = LED_REG_PSC0;
 		// clear past select data and apply PWM0
 		data1[1] = (LEDSelect & ~LEDs) | (LED_BLINK_PWM0 & LEDs);
    d668:	f242 43f8 	movw	r3, #9464	; 0x24f8
    d66c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d670:	781c      	ldrb	r4, [r3, #0]
    d672:	ea24 0402 	bic.w	r4, r4, r2
    d676:	f022 0255 	bic.w	r2, r2, #85	; 0x55
    d67a:	4314      	orrs	r4, r2
    d67c:	e009      	b.n	d692 <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)+0x2e>
 	}
 	else if (Channel == LED_CHANNEL2){
    d67e:	2801      	cmp	r0, #1
    d680:	d114      	bne.n	d6ac <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)+0x48>
 		data2[0] = LED_REG_PSC1;
 		// clear past select data and apply PWM1
 		data1[1] = (LEDSelect & ~LEDs) | (LED_BLINK_PWM1 & LEDs);
    d682:	f242 43f8 	movw	r3, #9464	; 0x24f8
    d686:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d68a:	781c      	ldrb	r4, [r3, #0]
    d68c:	ea24 0402 	bic.w	r4, r4, r2
    d690:	4314      	orrs	r4, r2
 	}
 	else
 		return;
 	
//     uint8_t error = TWI_write_data(LEDAddress, data1, 2);
     _delay_us(1);
    d692:	f04f 0001 	mov.w	r0, #1
    d696:	f7fb fecb 	bl	9430 <_delay_us>
//     error = TWI_write_data(LEDAddress, data2, 2);
     _delay_us(1);
    d69a:	f04f 0001 	mov.w	r0, #1
    d69e:	f7fb fec7 	bl	9430 <_delay_us>
     
 	LEDSelect = data1[1];	
    d6a2:	f242 43f8 	movw	r3, #9464	; 0x24f8
    d6a6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d6aa:	701c      	strb	r4, [r3, #0]
    d6ac:	bd10      	pop	{r4, pc}
    d6ae:	bf00      	nop

0000d6b0 <RGB_LED::toggleLEDNoPWM(bool, unsigned char)>:
 //  		ones indicate on, zeros indicate off 
 void toggleLEDNoPWM(bool enable, uint8_t LEDs)
 {
 	uint8_t data[2] = {LED_REG_SELECT, 0};
 	
 	if(enable)
    d6b0:	b150      	cbz	r0, d6c8 <RGB_LED::toggleLEDNoPWM(bool, unsigned char)+0x18>
 	// clear past select data and turn LEDs full on
 		data[1] = (LEDSelect & ~LEDs) | (LED_ON & LEDs);
    d6b2:	f242 43f8 	movw	r3, #9464	; 0x24f8
    d6b6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d6ba:	781b      	ldrb	r3, [r3, #0]
    d6bc:	ea23 0301 	bic.w	r3, r3, r1
    d6c0:	f001 0155 	and.w	r1, r1, #85	; 0x55
    d6c4:	4319      	orrs	r1, r3
    d6c6:	e006      	b.n	d6d6 <RGB_LED::toggleLEDNoPWM(bool, unsigned char)+0x26>
 	else
 	// clear past select data and turn LEDs full off
 		data[1] = (LEDSelect & ~LEDs) | (LED_OFF & LEDs); 
    d6c8:	f242 43f8 	movw	r3, #9464	; 0x24f8
    d6cc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d6d0:	781b      	ldrb	r3, [r3, #0]
    d6d2:	ea23 0101 	bic.w	r1, r3, r1
 		
// 	uint8_t error = TWI_write_data(LEDAddress, data, 2);
 	
     LEDSelect = data[1];
    d6d6:	f242 43f8 	movw	r3, #9464	; 0x24f8
    d6da:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d6de:	7019      	strb	r1, [r3, #0]
 }
    d6e0:	4770      	bx	lr
    d6e2:	bf00      	nop

0000d6e4 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)>:
 // level : duty cycle (brightness) for channels 1,2,  
 //			for Channel 3, level is on if not zero
 // LEDs:  {bits: XXBBGGRR : BLUE: 0b110000, Red:0b1100, Green:0b11} 
 //  		ones indicate on, zeros indicate off 
 void setBrightness(uint8_t Channel, uint8_t level, uint8_t LEDs)
 {
    d6e4:	b510      	push	{r4, lr}
 	uint8_t data[4] = {LED_REG_SELECT, 0, 0 , level};
     uint8_t data1[2] = {LED_REG_SELECT, 0};
     uint8_t data2[2] = {0, level};

	// set pwm for select channel
 	if (Channel == LED_CHANNEL1){
    d6e6:	b950      	cbnz	r0, d6fe <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)+0x1a>
 		data2[0] = LED_REG_PWM0;
 		// clear past select data and apply PWM0
 		data1[1] = (LEDSelect & ~LEDs) | (LED_BLINK_PWM0 & LEDs);
    d6e8:	f242 43f8 	movw	r3, #9464	; 0x24f8
    d6ec:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d6f0:	781c      	ldrb	r4, [r3, #0]
    d6f2:	ea24 0402 	bic.w	r4, r4, r2
    d6f6:	f022 0255 	bic.w	r2, r2, #85	; 0x55
    d6fa:	4314      	orrs	r4, r2
    d6fc:	e011      	b.n	d722 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)+0x3e>
 	}
 	else if (Channel == LED_CHANNEL2){
    d6fe:	2801      	cmp	r0, #1
    d700:	d108      	bne.n	d714 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)+0x30>
 		data2[0] = LED_REG_PWM1;
 		// clear past select data and apply PWM1
 		data1[1] = (LEDSelect & ~LEDs) | (LED_BLINK_PWM1 & LEDs);
    d702:	f242 43f8 	movw	r3, #9464	; 0x24f8
    d706:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d70a:	781c      	ldrb	r4, [r3, #0]
    d70c:	ea24 0402 	bic.w	r4, r4, r2
    d710:	4314      	orrs	r4, r2
    d712:	e006      	b.n	d722 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)+0x3e>
 	}
 	else {
 		toggleLEDNoPWM((level != 0), LEDs);
    d714:	1c08      	adds	r0, r1, #0
    d716:	bf18      	it	ne
    d718:	2001      	movne	r0, #1
    d71a:	4611      	mov	r1, r2
    d71c:	f7ff ffc8 	bl	d6b0 <RGB_LED::toggleLEDNoPWM(bool, unsigned char)>
 		return;
    d720:	bd10      	pop	{r4, pc}
 	}
 	
// 	uint8_t error = TWI_write_data(LEDAddress, data1, 2);
     _delay_us(1);
    d722:	f04f 0001 	mov.w	r0, #1
    d726:	f7fb fe83 	bl	9430 <_delay_us>
//    error = TWI_write_data(LEDAddress, data2, 2);
     _delay_us(1);
    d72a:	f04f 0001 	mov.w	r0, #1
    d72e:	f7fb fe7f 	bl	9430 <_delay_us>
 	
     LEDSelect = data1[1];
    d732:	f242 43f8 	movw	r3, #9464	; 0x24f8
    d736:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d73a:	701c      	strb	r4, [r3, #0]
    d73c:	bd10      	pop	{r4, pc}
    d73e:	bf00      	nop

0000d740 <RGB_LED::clear()>:
 }
 
 void startupSequence(){
 }
     
 void clear(){
    d740:	b508      	push	{r3, lr}
	 
	 // clear LEDs 
    setBrightness(3, 0, LED_RED | LED_GREEN | LED_BLUE);
    d742:	f04f 0003 	mov.w	r0, #3
    d746:	f04f 0100 	mov.w	r1, #0
    d74a:	f04f 023f 	mov.w	r2, #63	; 0x3f
    d74e:	f7ff ffc9 	bl	d6e4 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)>
 }
    d752:	bd08      	pop	{r3, pc}

0000d754 <RGB_LED::errorSequence()>:
 
void errorSequence(){
    d754:	b508      	push	{r3, lr}
	
	clear();
    d756:	f7ff fff3 	bl	d740 <RGB_LED::clear()>
     
    // set blinking red lights
    setBrightness(1, 200, LED_RED);
    d75a:	f04f 0001 	mov.w	r0, #1
    d75e:	f04f 01c8 	mov.w	r1, #200	; 0xc8
    d762:	f04f 0203 	mov.w	r2, #3
    d766:	f7ff ffbd 	bl	d6e4 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)>
    setBlinkRate(1, 130, LED_RED);    
    d76a:	f04f 0001 	mov.w	r0, #1
    d76e:	f04f 0182 	mov.w	r1, #130	; 0x82
    d772:	f04f 0203 	mov.w	r2, #3
    d776:	f7ff ff75 	bl	d664 <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)>
}
    d77a:	bd08      	pop	{r3, pc}

0000d77c <RGB_LED::setColor(unsigned char, unsigned char, unsigned char, bool)>:
}

#define abs(X) ((X) < 0 ? -(X) : (X)) 

// wiggly: set a three value color using a 2 value driver (+ ON/OFF channel)
void setColor(uint8_t red, uint8_t green, uint8_t blue, bool clearOld){
    d77c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d780:	4604      	mov	r4, r0
    d782:	460f      	mov	r7, r1
    d784:	4616      	mov	r6, r2

	if(clearOld){
    d786:	b10b      	cbz	r3, d78c <RGB_LED::setColor(unsigned char, unsigned char, unsigned char, bool)+0x10>
		clear();}
    d788:	f7ff ffda 	bl	d740 <RGB_LED::clear()>
	int on, count;
	on = count = 0;
    uint8_t leds_on;
	
    // if any color is all on, set it to ON
    if (red == 255)
    d78c:	2cff      	cmp	r4, #255	; 0xff
        leds_on |= LED_RED;
    d78e:	bf08      	it	eq
    d790:	2503      	moveq	r5, #3
    if (green == 255)
    d792:	2fff      	cmp	r7, #255	; 0xff
        leds_on |= LED_GREEN;
    d794:	bf04      	itt	eq
    d796:	f045 050c 	orreq.w	r5, r5, #12
    d79a:	b2ed      	uxtbeq	r5, r5
    if(blue == 255)
    d79c:	2eff      	cmp	r6, #255	; 0xff
        leds_on |= LED_BLUE;
    d79e:	bf04      	itt	eq
    d7a0:	f045 0530 	orreq.w	r5, r5, #48	; 0x30
    d7a4:	b2ed      	uxtbeq	r5, r5
    
    setBrightness(3, 1, leds_on);
    d7a6:	f04f 0003 	mov.w	r0, #3
    d7aa:	f04f 0101 	mov.w	r1, #1
    d7ae:	462a      	mov	r2, r5
    d7b0:	f7ff ff98 	bl	d6e4 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)>
    
    // find number of distict color values
	if(!((red == 0) || (red == 255)))
    d7b4:	f104 32ff 	add.w	r2, r4, #4294967295
}

#define abs(X) ((X) < 0 ? -(X) : (X)) 

// wiggly: set a three value color using a 2 value driver (+ ON/OFF channel)
void setColor(uint8_t red, uint8_t green, uint8_t blue, bool clearOld){
    d7b8:	b2d2      	uxtb	r2, r2
    d7ba:	2afd      	cmp	r2, #253	; 0xfd
    d7bc:	bf8c      	ite	hi
    d7be:	2200      	movhi	r2, #0
    d7c0:	2201      	movls	r2, #1

	if(clearOld){
		clear();}
	
	int on, count;
	on = count = 0;
    d7c2:	4613      	mov	r3, r2
    
    // find number of distict color values
	if(!((red == 0) || (red == 255)))
	{	count++;}
		
	if(!((green == 0) || (green == 255)))
    d7c4:	f107 35ff 	add.w	r5, r7, #4294967295
    d7c8:	b2ed      	uxtb	r5, r5
    d7ca:	2dfd      	cmp	r5, #253	; 0xfd
	{	count++;}
    d7cc:	bf98      	it	ls
    d7ce:	1c53      	addls	r3, r2, #1
	
	if(!((blue == 0) || (blue == 255)))
    d7d0:	f106 38ff 	add.w	r8, r6, #4294967295
    d7d4:	fa5f f888 	uxtb.w	r8, r8
    d7d8:	f1b8 0ffd 	cmp.w	r8, #253	; 0xfd
	{	count++;}
    d7dc:	bf98      	it	ls
    d7de:	3301      	addls	r3, #1
    
	
	// we have two channels for brightness, if we have two settings
	// or less, just set the channels to the requested values
	int channel = 0;
	if(count < 3){
    d7e0:	2b02      	cmp	r3, #2
    d7e2:	dc44      	bgt.n	d86e <RGB_LED::setColor(unsigned char, unsigned char, unsigned char, bool)+0xf2>
	{	count++;}
    
	
	// we have two channels for brightness, if we have two settings
	// or less, just set the channels to the requested values
	int channel = 0;
    d7e4:	f04f 0900 	mov.w	r9, #0
	if(count < 3){
		if((red > 0) && (red < 255)){
    d7e8:	b19a      	cbz	r2, d812 <RGB_LED::setColor(unsigned char, unsigned char, unsigned char, bool)+0x96>
            setBlinkRate(channel, blinkRate, LED_RED);
    d7ea:	f242 43e4 	movw	r3, #9444	; 0x24e4
    d7ee:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d7f2:	f04f 0000 	mov.w	r0, #0
    d7f6:	7819      	ldrb	r1, [r3, #0]
    d7f8:	f04f 0203 	mov.w	r2, #3
    d7fc:	f7ff ff32 	bl	d664 <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)>
			setBrightness(channel++, red, LED_RED);
    d800:	f04f 0000 	mov.w	r0, #0
    d804:	4621      	mov	r1, r4
    d806:	f04f 0203 	mov.w	r2, #3
    d80a:	f7ff ff6b 	bl	d6e4 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)>
    d80e:	f04f 0901 	mov.w	r9, #1
        }
		if((green > 0) && (green < 255))
    d812:	2dfd      	cmp	r5, #253	; 0xfd
    d814:	d813      	bhi.n	d83e <RGB_LED::setColor(unsigned char, unsigned char, unsigned char, bool)+0xc2>
        {
            setBlinkRate(channel, blinkRate, LED_GREEN);
    d816:	fa5f f489 	uxtb.w	r4, r9
    d81a:	f242 43e4 	movw	r3, #9444	; 0x24e4
    d81e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d822:	4620      	mov	r0, r4
    d824:	7819      	ldrb	r1, [r3, #0]
    d826:	f04f 020c 	mov.w	r2, #12
    d82a:	f7ff ff1b 	bl	d664 <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)>
			setBrightness(channel++, green, LED_GREEN);
    d82e:	f109 0901 	add.w	r9, r9, #1
    d832:	4620      	mov	r0, r4
    d834:	4639      	mov	r1, r7
    d836:	f04f 020c 	mov.w	r2, #12
    d83a:	f7ff ff53 	bl	d6e4 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)>
        }
		if((blue > 0) && (blue < 255)){
    d83e:	f1b8 0ffd 	cmp.w	r8, #253	; 0xfd
    d842:	f200 80ac 	bhi.w	d99e <RGB_LED::setColor(unsigned char, unsigned char, unsigned char, bool)+0x222>
            setBlinkRate(channel, blinkRate, LED_BLUE);
    d846:	fa5f f989 	uxtb.w	r9, r9
    d84a:	f242 43e4 	movw	r3, #9444	; 0x24e4
    d84e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d852:	4648      	mov	r0, r9
    d854:	7819      	ldrb	r1, [r3, #0]
    d856:	f04f 0230 	mov.w	r2, #48	; 0x30
    d85a:	f7ff ff03 	bl	d664 <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)>
			setBrightness(channel++, blue, LED_BLUE);
    d85e:	4648      	mov	r0, r9
    d860:	4631      	mov	r1, r6
    d862:	f04f 0230 	mov.w	r2, #48	; 0x30
    d866:	f7ff ff3d 	bl	d6e4 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)>
    d86a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        }
	}
	// if three different values are requested, set the two closest
	// values to be equal and use the same channel 
	else {
		int distRB = abs(red - blue);
    d86e:	1ba2      	subs	r2, r4, r6
    d870:	2a00      	cmp	r2, #0
    d872:	bfb8      	it	lt
    d874:	4252      	neglt	r2, r2
		int distRG = abs(red - green);
    d876:	1be3      	subs	r3, r4, r7
    d878:	2b00      	cmp	r3, #0
    d87a:	bfb8      	it	lt
    d87c:	425b      	neglt	r3, r3
		int distBG = abs(blue - green);
    d87e:	1bf1      	subs	r1, r6, r7
    d880:	2900      	cmp	r1, #0
    d882:	bfb8      	it	lt
    d884:	4249      	neglt	r1, r1
		
		if(distRB < distRG){
    d886:	429a      	cmp	r2, r3
    d888:	da45      	bge.n	d916 <RGB_LED::setColor(unsigned char, unsigned char, unsigned char, bool)+0x19a>
			/// red and blue closest
			if(distRB < distBG){
    d88a:	428a      	cmp	r2, r1
    d88c:	da21      	bge.n	d8d2 <RGB_LED::setColor(unsigned char, unsigned char, unsigned char, bool)+0x156>
                setBlinkRate(0, blinkRate, LED_GREEN);
    d88e:	f242 45e4 	movw	r5, #9444	; 0x24e4
    d892:	f2c1 0500 	movt	r5, #4096	; 0x1000
    d896:	f04f 0000 	mov.w	r0, #0
    d89a:	7829      	ldrb	r1, [r5, #0]
    d89c:	f04f 020c 	mov.w	r2, #12
    d8a0:	f7ff fee0 	bl	d664 <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)>
				setBrightness(0, green, LED_GREEN);
    d8a4:	f04f 0000 	mov.w	r0, #0
    d8a8:	4639      	mov	r1, r7
    d8aa:	f04f 020c 	mov.w	r2, #12
    d8ae:	f7ff ff19 	bl	d6e4 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)>
				setBlinkRate(1, blinkRate, LED_RED | LED_BLUE);
    d8b2:	f04f 0001 	mov.w	r0, #1
    d8b6:	7829      	ldrb	r1, [r5, #0]
    d8b8:	f04f 0233 	mov.w	r2, #51	; 0x33
    d8bc:	f7ff fed2 	bl	d664 <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)>
				setBrightness(1, red, LED_RED | LED_BLUE);
    d8c0:	f04f 0001 	mov.w	r0, #1
    d8c4:	4621      	mov	r1, r4
    d8c6:	f04f 0233 	mov.w	r2, #51	; 0x33
    d8ca:	f7ff ff0b 	bl	d6e4 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)>
    d8ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			}
			/// blue and green closest
			else{
                setBlinkRate(0, blinkRate, LED_RED);
    d8d2:	f242 45e4 	movw	r5, #9444	; 0x24e4
    d8d6:	f2c1 0500 	movt	r5, #4096	; 0x1000
    d8da:	f04f 0000 	mov.w	r0, #0
    d8de:	7829      	ldrb	r1, [r5, #0]
    d8e0:	f04f 0203 	mov.w	r2, #3
    d8e4:	f7ff febe 	bl	d664 <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)>
				setBrightness(0, red, LED_RED);
    d8e8:	f04f 0000 	mov.w	r0, #0
    d8ec:	4621      	mov	r1, r4
    d8ee:	f04f 0203 	mov.w	r2, #3
    d8f2:	f7ff fef7 	bl	d6e4 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)>
				setBlinkRate(1, blinkRate, LED_GREEN |LED_BLUE);
    d8f6:	f04f 0001 	mov.w	r0, #1
    d8fa:	7829      	ldrb	r1, [r5, #0]
    d8fc:	f04f 023c 	mov.w	r2, #60	; 0x3c
    d900:	f7ff feb0 	bl	d664 <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)>
				setBrightness(1, green, LED_GREEN | LED_BLUE);
    d904:	f04f 0001 	mov.w	r0, #1
    d908:	4639      	mov	r1, r7
    d90a:	f04f 023c 	mov.w	r2, #60	; 0x3c
    d90e:	f7ff fee9 	bl	d6e4 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)>
    d912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			}
		}
		else{
			/// red and green closest
			if(distRG < distBG){
    d916:	428b      	cmp	r3, r1
    d918:	da21      	bge.n	d95e <RGB_LED::setColor(unsigned char, unsigned char, unsigned char, bool)+0x1e2>
                setBlinkRate(0, blinkRate, LED_BLUE);
    d91a:	f242 44e4 	movw	r4, #9444	; 0x24e4
    d91e:	f2c1 0400 	movt	r4, #4096	; 0x1000
    d922:	f04f 0000 	mov.w	r0, #0
    d926:	7821      	ldrb	r1, [r4, #0]
    d928:	f04f 0230 	mov.w	r2, #48	; 0x30
    d92c:	f7ff fe9a 	bl	d664 <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)>
				setBrightness(0, blue, LED_BLUE);
    d930:	f04f 0000 	mov.w	r0, #0
    d934:	4631      	mov	r1, r6
    d936:	f04f 0230 	mov.w	r2, #48	; 0x30
    d93a:	f7ff fed3 	bl	d6e4 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)>
				setBlinkRate(1, blinkRate, LED_GREEN | LED_RED);
    d93e:	f04f 0001 	mov.w	r0, #1
    d942:	7821      	ldrb	r1, [r4, #0]
    d944:	f04f 020f 	mov.w	r2, #15
    d948:	f7ff fe8c 	bl	d664 <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)>
				setBrightness(1, green, LED_GREEN | LED_RED);
    d94c:	f04f 0001 	mov.w	r0, #1
    d950:	4639      	mov	r1, r7
    d952:	f04f 020f 	mov.w	r2, #15
    d956:	f7ff fec5 	bl	d6e4 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)>
    d95a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			}
			/// blue and green closest
			else{
                setBlinkRate(0, blinkRate, LED_RED);
    d95e:	f242 45e4 	movw	r5, #9444	; 0x24e4
    d962:	f2c1 0500 	movt	r5, #4096	; 0x1000
    d966:	f04f 0000 	mov.w	r0, #0
    d96a:	7829      	ldrb	r1, [r5, #0]
    d96c:	f04f 0203 	mov.w	r2, #3
    d970:	f7ff fe78 	bl	d664 <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)>
				setBrightness(0, red, LED_RED);
    d974:	f04f 0000 	mov.w	r0, #0
    d978:	4621      	mov	r1, r4
    d97a:	f04f 0203 	mov.w	r2, #3
    d97e:	f7ff feb1 	bl	d6e4 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)>
				setBlinkRate(1, blinkRate, LED_GREEN |LED_BLUE);
    d982:	f04f 0001 	mov.w	r0, #1
    d986:	7829      	ldrb	r1, [r5, #0]
    d988:	f04f 023c 	mov.w	r2, #60	; 0x3c
    d98c:	f7ff fe6a 	bl	d664 <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)>
				setBrightness(1, green, LED_GREEN | LED_BLUE);
    d990:	f04f 0001 	mov.w	r0, #1
    d994:	4639      	mov	r1, r7
    d996:	f04f 023c 	mov.w	r2, #60	; 0x3c
    d99a:	f7ff fea3 	bl	d6e4 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)>
    d99e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d9a2:	bf00      	nop

0000d9a4 <RGB_LED::setCustomColor(unsigned char, unsigned char, unsigned char)>:
	blinkRate = rate;
	setDefaultColor();
}

    // set LED color and store to EEPROM "custom" color area
void setCustomColor(uint8_t red, uint8_t green, uint8_t blue){
    d9a4:	b570      	push	{r4, r5, r6, lr}
    d9a6:	4605      	mov	r5, r0
    d9a8:	460c      	mov	r4, r1
    d9aa:	4616      	mov	r6, r2
	eeprom::setCustomColor(red, green, blue);
    d9ac:	f7fb fe5a 	bl	9664 <eeprom::setCustomColor(unsigned char, unsigned char, unsigned char)>
	setColor(red, green, blue, true);
    d9b0:	4628      	mov	r0, r5
    d9b2:	4621      	mov	r1, r4
    d9b4:	4632      	mov	r2, r6
    d9b6:	f04f 0301 	mov.w	r3, #1
    d9ba:	f7ff fedf 	bl	d77c <RGB_LED::setColor(unsigned char, unsigned char, unsigned char, bool)>
}
    d9be:	bd70      	pop	{r4, r5, r6, pc}

0000d9c0 <RGB_LED::setDefaultColor()>:
    // set blinking red lights
    setBrightness(1, 200, LED_RED);
    setBlinkRate(1, 130, LED_RED);    
}

void setDefaultColor(){
    d9c0:	b510      	push	{r4, lr}
	
	clear();
    d9c2:	f7ff febd 	bl	d740 <RGB_LED::clear()>
		 
	 // set frequency to slowest and duty cyle to zero (off)
	 uint8_t LEDColor = eeprom::getEeprom8(eeprom_offsets::LED_STRIP_SETTINGS, 1);
    d9c6:	f44f 70a0 	mov.w	r0, #320	; 0x140
    d9ca:	f04f 0101 	mov.w	r1, #1
    d9ce:	f002 fd01 	bl	103d4 <eeprom::getEeprom8(unsigned short, unsigned char)>
    d9d2:	4604      	mov	r4, r0
	 uint32_t CustomColor = eeprom::getEeprom32(eeprom_offsets::LED_STRIP_SETTINGS + blink_eeprom_offsets::CUSTOM_COLOR_OFFSET, 0xFFFFFFFF);
    d9d4:	f44f 70a2 	mov.w	r0, #324	; 0x144
    d9d8:	f04f 31ff 	mov.w	r1, #4294967295
    d9dc:	f002 fd9e 	bl	1051c <eeprom::getEeprom32(unsigned short, unsigned long)>
    d9e0:	4602      	mov	r2, r0
	
	// blink rate has to be set first in order for color to register,
	// so set blink before each color
	 
	 switch(LEDColor){
    d9e2:	2c07      	cmp	r4, #7
    d9e4:	f200 80ab 	bhi.w	db3e <RGB_LED::setDefaultColor()+0x17e>
    d9e8:	e8df f004 	tbb	[pc, r4]
    d9ec:	77542c04 	.word	0x77542c04
    d9f0:	9f8b1840 	.word	0x9f8b1840
		 case LED_DEFAULT_WHITE:
			setBlinkRate(1, blinkRate, LED_RED | LED_GREEN | LED_BLUE);
    d9f4:	f242 43e4 	movw	r3, #9444	; 0x24e4
    d9f8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    d9fc:	f04f 0001 	mov.w	r0, #1
    da00:	7819      	ldrb	r1, [r3, #0]
    da02:	f04f 023f 	mov.w	r2, #63	; 0x3f
    da06:	f7ff fe2d 	bl	d664 <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)>
			setBrightness(1, 100, LED_RED | LED_GREEN | LED_BLUE);	
    da0a:	f04f 0001 	mov.w	r0, #1
    da0e:	f04f 0164 	mov.w	r1, #100	; 0x64
    da12:	f04f 023f 	mov.w	r2, #63	; 0x3f
    da16:	f7ff fe65 	bl	d6e4 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)>
			break;
    da1a:	bd10      	pop	{r4, pc}
		 case LED_DEFAULT_BLUE:
			setBlinkRate(1, blinkRate, LED_BLUE);
    da1c:	f242 43e4 	movw	r3, #9444	; 0x24e4
    da20:	f2c1 0300 	movt	r3, #4096	; 0x1000
    da24:	f04f 0001 	mov.w	r0, #1
    da28:	7819      	ldrb	r1, [r3, #0]
    da2a:	f04f 0230 	mov.w	r2, #48	; 0x30
    da2e:	f7ff fe19 	bl	d664 <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)>
			setBrightness(1, 100, LED_BLUE);
    da32:	f04f 0001 	mov.w	r0, #1
    da36:	f04f 0164 	mov.w	r1, #100	; 0x64
    da3a:	f04f 0230 	mov.w	r2, #48	; 0x30
    da3e:	f7ff fe51 	bl	d6e4 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)>
			break;
    da42:	bd10      	pop	{r4, pc}
		 case LED_DEFAULT_RED: 
		    setBlinkRate(1, blinkRate, LED_RED);
    da44:	f242 43e4 	movw	r3, #9444	; 0x24e4
    da48:	f2c1 0300 	movt	r3, #4096	; 0x1000
    da4c:	f04f 0001 	mov.w	r0, #1
    da50:	7819      	ldrb	r1, [r3, #0]
    da52:	f04f 0203 	mov.w	r2, #3
    da56:	f7ff fe05 	bl	d664 <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)>
			setBrightness(1, 100, LED_RED);
    da5a:	f04f 0001 	mov.w	r0, #1
    da5e:	f04f 0164 	mov.w	r1, #100	; 0x64
    da62:	f04f 0203 	mov.w	r2, #3
    da66:	f7ff fe3d 	bl	d6e4 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)>
			break;
    da6a:	bd10      	pop	{r4, pc}
		 case LED_DEFAULT_GREEN: 
			setBlinkRate(1, blinkRate, LED_GREEN);
    da6c:	f242 43e4 	movw	r3, #9444	; 0x24e4
    da70:	f2c1 0300 	movt	r3, #4096	; 0x1000
    da74:	f04f 0001 	mov.w	r0, #1
    da78:	7819      	ldrb	r1, [r3, #0]
    da7a:	f04f 020c 	mov.w	r2, #12
    da7e:	f7ff fdf1 	bl	d664 <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)>
			setBrightness(1, 100, LED_GREEN);
    da82:	f04f 0001 	mov.w	r0, #1
    da86:	f04f 0164 	mov.w	r1, #100	; 0x64
    da8a:	f04f 020c 	mov.w	r2, #12
    da8e:	f7ff fe29 	bl	d6e4 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)>
			break;
    da92:	bd10      	pop	{r4, pc}
		 case LED_DEFAULT_ORANGE:		
			setBlinkRate(1, blinkRate, LED_GREEN);
    da94:	f242 44e4 	movw	r4, #9444	; 0x24e4
    da98:	f2c1 0400 	movt	r4, #4096	; 0x1000
    da9c:	f04f 0001 	mov.w	r0, #1
    daa0:	7821      	ldrb	r1, [r4, #0]
    daa2:	f04f 020c 	mov.w	r2, #12
    daa6:	f7ff fddd 	bl	d664 <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)>
			setBrightness(1, 50, LED_GREEN);		
    daaa:	f04f 0001 	mov.w	r0, #1
    daae:	f04f 0132 	mov.w	r1, #50	; 0x32
    dab2:	f04f 020c 	mov.w	r2, #12
    dab6:	f7ff fe15 	bl	d6e4 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)>
			setBlinkRate(0, blinkRate, LED_RED);
    daba:	f04f 0000 	mov.w	r0, #0
    dabe:	7821      	ldrb	r1, [r4, #0]
    dac0:	f04f 0203 	mov.w	r2, #3
    dac4:	f7ff fdce 	bl	d664 <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)>
			setBrightness(0, 200, LED_RED);
    dac8:	f04f 0000 	mov.w	r0, #0
    dacc:	f04f 01c8 	mov.w	r1, #200	; 0xc8
    dad0:	f04f 0203 	mov.w	r2, #3
    dad4:	f7ff fe06 	bl	d6e4 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)>
			break;
    dad8:	bd10      	pop	{r4, pc}
		 case LED_DEFAULT_PINK:
			setBlinkRate(1, blinkRate, LED_BLUE| LED_RED);
    dada:	f242 43e4 	movw	r3, #9444	; 0x24e4
    dade:	f2c1 0300 	movt	r3, #4096	; 0x1000
    dae2:	f04f 0001 	mov.w	r0, #1
    dae6:	7819      	ldrb	r1, [r3, #0]
    dae8:	f04f 0233 	mov.w	r2, #51	; 0x33
    daec:	f7ff fdba 	bl	d664 <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)>
			setBrightness(1, 70, LED_BLUE| LED_RED);
    daf0:	f04f 0001 	mov.w	r0, #1
    daf4:	f04f 0146 	mov.w	r1, #70	; 0x46
    daf8:	f04f 0233 	mov.w	r2, #51	; 0x33
    dafc:	f7ff fdf2 	bl	d6e4 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)>
			break;
    db00:	bd10      	pop	{r4, pc}
		 case LED_DEFAULT_PURPLE:
			setBlinkRate(1, blinkRate, LED_BLUE | LED_RED);
    db02:	f242 43e4 	movw	r3, #9444	; 0x24e4
    db06:	f2c1 0300 	movt	r3, #4096	; 0x1000
    db0a:	f04f 0001 	mov.w	r0, #1
    db0e:	7819      	ldrb	r1, [r3, #0]
    db10:	f04f 0233 	mov.w	r2, #51	; 0x33
    db14:	f7ff fda6 	bl	d664 <RGB_LED::setBlinkRate(unsigned char, unsigned char, unsigned char)>
			setBrightness(1, 200, LED_BLUE | LED_RED);
    db18:	f04f 0001 	mov.w	r0, #1
    db1c:	f04f 01c8 	mov.w	r1, #200	; 0xc8
    db20:	f04f 0233 	mov.w	r2, #51	; 0x33
    db24:	f7ff fdde 	bl	d6e4 <RGB_LED::setBrightness(unsigned char, unsigned char, unsigned char)>
			break;
    db28:	bd10      	pop	{r4, pc}
		 case LED_DEFAULT_CUSTOM:
			setColor(CustomColor >> 24, CustomColor >> 16, CustomColor >> 8, true);
    db2a:	ea4f 6010 	mov.w	r0, r0, lsr #24
    db2e:	f3c2 4107 	ubfx	r1, r2, #16, #8
    db32:	f3c2 2207 	ubfx	r2, r2, #8, #8
    db36:	f04f 0301 	mov.w	r3, #1
    db3a:	f7ff fe1f 	bl	d77c <RGB_LED::setColor(unsigned char, unsigned char, unsigned char, bool)>
    db3e:	bd10      	pop	{r4, pc}

0000db40 <RGB_LED::setLEDBlink(unsigned char)>:
			break;
	 }
}

void setLEDBlink(uint8_t rate){
    db40:	b508      	push	{r3, lr}
		
	blinkRate = rate;
    db42:	f242 43e4 	movw	r3, #9444	; 0x24e4
    db46:	f2c1 0300 	movt	r3, #4096	; 0x1000
    db4a:	7018      	strb	r0, [r3, #0]
	setDefaultColor();
    db4c:	f7ff ff38 	bl	d9c0 <RGB_LED::setDefaultColor()>
}
    db50:	bd08      	pop	{r3, pc}
    db52:	bf00      	nop

0000db54 <RGB_LED::init()>:
namespace RGB_LED{
//	const static int LEDAddress = 0B11000100;
	uint8_t LEDSelect = 0;
	uint8_t blinkRate = 0;
 
void init(){
    db54:	b508      	push	{r3, lr}
	 
//	 TWI_init();
	 
	 setDefaultColor();
    db56:	f7ff ff33 	bl	d9c0 <RGB_LED::setDefaultColor()>
 }
    db5a:	bd08      	pop	{r3, pc}

0000db5c <_GLOBAL__sub_I__ZN7RGB_LED9LEDSelectE>:
		}
	}	
 
}
    
}
    db5c:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
    db5e:	f242 40e0 	movw	r0, #9440	; 0x24e0
    db62:	f2c1 0000 	movt	r0, #4096	; 0x1000
    db66:	f04f 0100 	mov.w	r1, #0
    db6a:	f003 f8a5 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
    db6e:	f242 40e8 	movw	r0, #9448	; 0x24e8
    db72:	f2c1 0000 	movt	r0, #4096	; 0x1000
    db76:	f04f 0101 	mov.w	r1, #1
    db7a:	f003 f89d 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
    db7e:	f242 40f0 	movw	r0, #9456	; 0x24f0
    db82:	f2c1 0000 	movt	r0, #4096	; 0x1000
    db86:	f04f 0102 	mov.w	r1, #2
    db8a:	f003 f895 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
    db8e:	f242 40ec 	movw	r0, #9452	; 0x24ec
    db92:	f2c1 0000 	movt	r0, #4096	; 0x1000
    db96:	f04f 0103 	mov.w	r1, #3
    db9a:	f003 f88d 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
    db9e:	f242 40f4 	movw	r0, #9460	; 0x24f4
    dba2:	f2c1 0000 	movt	r0, #4096	; 0x1000
    dba6:	f04f 0104 	mov.w	r1, #4
    dbaa:	f003 f885 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
    dbae:	f242 44fc 	movw	r4, #9468	; 0x24fc
    dbb2:	f2c1 0400 	movt	r4, #4096	; 0x1000
    dbb6:	4620      	mov	r0, r4
    dbb8:	f04f 01ff 	mov.w	r1, #255	; 0xff
    dbbc:	f003 f87c 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
    dbc0:	f242 5000 	movw	r0, #9472	; 0x2500
    dbc4:	f2c1 0000 	movt	r0, #4096	; 0x1000
    dbc8:	4621      	mov	r1, r4
    dbca:	f04f 0200 	mov.w	r2, #0
    dbce:	f003 fa85 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
    dbd2:	bd10      	pop	{r4, pc}

0000dbd4 <sdcard::openPartition()>:
struct fat_fs_struct* fs = 0;
struct fat_dir_struct* dd = 0;
struct fat_file_struct* file = 0;

bool openPartition()
{
    dbd4:	b500      	push	{lr}
    dbd6:	b083      	sub	sp, #12
  /* open first partition */
  partition = partition_open(sd_raw_read,
                             sd_raw_read_interval,
                             sd_raw_write,
                             sd_raw_write_interval,
                             0);
    dbd8:	f04f 0300 	mov.w	r3, #0
    dbdc:	9300      	str	r3, [sp, #0]
    dbde:	f647 0029 	movw	r0, #30761	; 0x7829
    dbe2:	f2c0 0000 	movt	r0, #0
    dbe6:	f647 1109 	movw	r1, #30985	; 0x7909
    dbea:	f2c0 0100 	movt	r1, #0
    dbee:	f647 32a9 	movw	r2, #31657	; 0x7ba9
    dbf2:	f2c0 0200 	movt	r2, #0
    dbf6:	f647 43e5 	movw	r3, #31973	; 0x7ce5
    dbfa:	f2c0 0300 	movt	r3, #0
    dbfe:	f7f9 fcf9 	bl	75f4 <partition_open>
    dc02:	f242 5328 	movw	r3, #9512	; 0x2528
    dc06:	f2c1 0300 	movt	r3, #4096	; 0x1000
    dc0a:	6018      	str	r0, [r3, #0]
                             
  if(!partition)
    dc0c:	b9c8      	cbnz	r0, dc42 <sdcard::openPartition()+0x6e>
    */
    partition = partition_open(sd_raw_read,
                               sd_raw_read_interval,
                               sd_raw_write,
                               sd_raw_write_interval,
                               -1);
    dc0e:	f04f 33ff 	mov.w	r3, #4294967295
    dc12:	9300      	str	r3, [sp, #0]
    dc14:	f647 0029 	movw	r0, #30761	; 0x7829
    dc18:	f2c0 0000 	movt	r0, #0
    dc1c:	f647 1109 	movw	r1, #30985	; 0x7909
    dc20:	f2c0 0100 	movt	r1, #0
    dc24:	f647 32a9 	movw	r2, #31657	; 0x7ba9
    dc28:	f2c0 0200 	movt	r2, #0
    dc2c:	f647 43e5 	movw	r3, #31973	; 0x7ce5
    dc30:	f2c0 0300 	movt	r3, #0
    dc34:	f7f9 fcde 	bl	75f4 <partition_open>
    dc38:	f242 5328 	movw	r3, #9512	; 0x2528
    dc3c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    dc40:	6018      	str	r0, [r3, #0]
struct partition_struct* partition = 0;
struct fat_fs_struct* fs = 0;
struct fat_dir_struct* dd = 0;
struct fat_file_struct* file = 0;

bool openPartition()
    dc42:	f242 5328 	movw	r3, #9512	; 0x2528
    dc46:	f2c1 0300 	movt	r3, #4096	; 0x1000
    dc4a:	6818      	ldr	r0, [r3, #0]
                               -1);
  }
  if(!partition)
    return false;
  return true;
}
    dc4c:	3000      	adds	r0, #0
    dc4e:	bf18      	it	ne
    dc50:	2001      	movne	r0, #1
    dc52:	b003      	add	sp, #12
    dc54:	bd00      	pop	{pc}
    dc56:	bf00      	nop

0000dc58 <sdcard::openFilesys()>:

bool openFilesys()
{
    dc58:	b508      	push	{r3, lr}
  /* open file system */
  fs = fat_open(partition);
    dc5a:	f242 5328 	movw	r3, #9512	; 0x2528
    dc5e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    dc62:	6818      	ldr	r0, [r3, #0]
    dc64:	f7f9 f878 	bl	6d58 <fat_open>
    dc68:	f242 5310 	movw	r3, #9488	; 0x2510
    dc6c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    dc70:	6018      	str	r0, [r3, #0]
  return fs != 0;
}
    dc72:	3000      	adds	r0, #0
    dc74:	bf18      	it	ne
    dc76:	2001      	movne	r0, #1
    dc78:	bd08      	pop	{r3, pc}
    dc7a:	bf00      	nop

0000dc7c <sdcard::openRoot()>:

bool openRoot()
{
    dc7c:	b510      	push	{r4, lr}
    dc7e:	b08c      	sub	sp, #48	; 0x30
  // Open root directory
  struct fat_dir_entry_struct rootdirectory;
  fat_get_dir_entry_of_path(fs, "/", &rootdirectory);
    dc80:	f242 5410 	movw	r4, #9488	; 0x2510
    dc84:	f2c1 0400 	movt	r4, #4096	; 0x1000
    dc88:	6820      	ldr	r0, [r4, #0]
    dc8a:	f246 7168 	movw	r1, #26472	; 0x6768
    dc8e:	f2c0 0102 	movt	r1, #2
    dc92:	aa01      	add	r2, sp, #4
    dc94:	f7f9 fb78 	bl	7388 <fat_get_dir_entry_of_path>
  dd = fat_open_dir(fs, &rootdirectory);
    dc98:	6820      	ldr	r0, [r4, #0]
    dc9a:	a901      	add	r1, sp, #4
    dc9c:	f7f9 fa92 	bl	71c4 <fat_open_dir>
    dca0:	f242 530c 	movw	r3, #9484	; 0x250c
    dca4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    dca8:	6018      	str	r0, [r3, #0]
  return dd != 0;
}
    dcaa:	3000      	adds	r0, #0
    dcac:	bf18      	it	ne
    dcae:	2001      	movne	r0, #1
    dcb0:	b00c      	add	sp, #48	; 0x30
    dcb2:	bd10      	pop	{r4, pc}

0000dcb4 <sdcard::checkVolumeSize()>:

bool checkVolumeSize(){
    dcb4:	b508      	push	{r3, lr}
#if SD_RAW_SDHC 
	return true;
#else
	return fat_get_fs_size(fs) < 2147483648; //2GB
    dcb6:	f242 5310 	movw	r3, #9488	; 0x2510
    dcba:	f2c1 0300 	movt	r3, #4096	; 0x1000
    dcbe:	6818      	ldr	r0, [r3, #0]
    dcc0:	f7f9 fc8a 	bl	75d8 <fat_get_fs_size>
#endif
}
    dcc4:	ea6f 0000 	mvn.w	r0, r0
    dcc8:	ea4f 70d0 	mov.w	r0, r0, lsr #31
    dccc:	bd08      	pop	{r3, pc}
    dcce:	bf00      	nop

0000dcd0 <sdcard::directoryNextEntry(char*, unsigned char, unsigned char*)>:
  }
  fat_reset_dir(dd);
  return SD_SUCCESS;
}

SdErrorCode directoryNextEntry(char* buffer, uint8_t bufsize, uint8_t * fileLength) {
    dcd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dcd4:	b08c      	sub	sp, #48	; 0x30
    dcd6:	4604      	mov	r4, r0
    dcd8:	4690      	mov	r8, r2
    dcda:	f04f 0605 	mov.w	r6, #5
	// of signalling we've gone through the directory, so we discard these
	// entries.  We have an upper limit on the number of entries to cycle
	// through, so we don't potentially lock up here.
	uint8_t tries = 5;
	while (tries) {
		if (fat_read_dir(dd, &entry)) {
    dcde:	f242 570c 	movw	r7, #9484	; 0x250c
    dce2:	f2c1 0700 	movt	r7, #4096	; 0x1000
			int i;
			for (i = 0; (i < bufsize-1) && entry.long_name[i] != 0; i++) {
    dce6:	f101 35ff 	add.w	r5, r1, #4294967295
	// of signalling we've gone through the directory, so we discard these
	// entries.  We have an upper limit on the number of entries to cycle
	// through, so we don't potentially lock up here.
	uint8_t tries = 5;
	while (tries) {
		if (fat_read_dir(dd, &entry)) {
    dcea:	6838      	ldr	r0, [r7, #0]
    dcec:	a901      	add	r1, sp, #4
    dcee:	f7f9 fad1 	bl	7294 <fat_read_dir>
    dcf2:	b1c0      	cbz	r0, dd26 <sdcard::directoryNextEntry(char*, unsigned char, unsigned char*)+0x56>
    dcf4:	f04f 0300 	mov.w	r3, #0
			int i;
			for (i = 0; (i < bufsize-1) && entry.long_name[i] != 0; i++) {
    dcf8:	42ab      	cmp	r3, r5
    dcfa:	da1c      	bge.n	dd36 <sdcard::directoryNextEntry(char*, unsigned char, unsigned char*)+0x66>
    dcfc:	aa01      	add	r2, sp, #4
    dcfe:	5c9a      	ldrb	r2, [r3, r2]
    dd00:	b1da      	cbz	r2, dd3a <sdcard::directoryNextEntry(char*, unsigned char, unsigned char*)+0x6a>
				buffer[i] = entry.long_name[i];
    dd02:	aa01      	add	r2, sp, #4
    dd04:	5cd2      	ldrb	r2, [r2, r3]
    dd06:	54e2      	strb	r2, [r4, r3]
	// through, so we don't potentially lock up here.
	uint8_t tries = 5;
	while (tries) {
		if (fat_read_dir(dd, &entry)) {
			int i;
			for (i = 0; (i < bufsize-1) && entry.long_name[i] != 0; i++) {
    dd08:	f103 0301 	add.w	r3, r3, #1
    dd0c:	e7f4      	b.n	dcf8 <sdcard::directoryNextEntry(char*, unsigned char, unsigned char*)+0x28>
				buffer[i] = entry.long_name[i];
			}
			buffer[i] = 0;
			if (i > 0) {
				if(fileLength != 0)
    dd0e:	f1b8 0f00 	cmp.w	r8, #0
    dd12:	d00b      	beq.n	dd2c <sdcard::directoryNextEntry(char*, unsigned char, unsigned char*)+0x5c>
					*fileLength = i;
    dd14:	f888 3000 	strb.w	r3, [r8]
    dd18:	e008      	b.n	dd2c <sdcard::directoryNextEntry(char*, unsigned char, unsigned char*)+0x5c>
    dd1a:	f106 36ff 	add.w	r6, r6, #4294967295
    dd1e:	b2f6      	uxtb	r6, r6
	// necessarily broken in of itself, but a null name is also our way
	// of signalling we've gone through the directory, so we discard these
	// entries.  We have an upper limit on the number of entries to cycle
	// through, so we don't potentially lock up here.
	uint8_t tries = 5;
	while (tries) {
    dd20:	2e00      	cmp	r6, #0
    dd22:	d1e2      	bne.n	dcea <sdcard::directoryNextEntry(char*, unsigned char, unsigned char*)+0x1a>
    dd24:	e002      	b.n	dd2c <sdcard::directoryNextEntry(char*, unsigned char, unsigned char*)+0x5c>
				break;
			} else {
				tries--;
			}
		} else {
			buffer[0] = 0;
    dd26:	f04f 0300 	mov.w	r3, #0
    dd2a:	7023      	strb	r3, [r4, #0]
			break;
		}
	}
	return SD_SUCCESS;
}
    dd2c:	f04f 0000 	mov.w	r0, #0
    dd30:	b00c      	add	sp, #48	; 0x30
    dd32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	// through, so we don't potentially lock up here.
	uint8_t tries = 5;
	while (tries) {
		if (fat_read_dir(dd, &entry)) {
			int i;
			for (i = 0; (i < bufsize-1) && entry.long_name[i] != 0; i++) {
    dd36:	461a      	mov	r2, r3
    dd38:	e000      	b.n	dd3c <sdcard::directoryNextEntry(char*, unsigned char, unsigned char*)+0x6c>
    dd3a:	461a      	mov	r2, r3
				buffer[i] = entry.long_name[i];
			}
			buffer[i] = 0;
    dd3c:	f04f 0100 	mov.w	r1, #0
    dd40:	54a1      	strb	r1, [r4, r2]
			if (i > 0) {
    dd42:	428a      	cmp	r2, r1
    dd44:	dde9      	ble.n	dd1a <sdcard::directoryNextEntry(char*, unsigned char, unsigned char*)+0x4a>
    dd46:	e7e2      	b.n	dd0e <sdcard::directoryNextEntry(char*, unsigned char, unsigned char*)+0x3e>

0000dd48 <sdcard::findFileInDir(char const*, fat_dir_entry_struct*)>:
	}
	return SD_SUCCESS;
}

bool findFileInDir(const char* name, struct fat_dir_entry_struct* dir_entry)
{
    dd48:	b570      	push	{r4, r5, r6, lr}
    dd4a:	4606      	mov	r6, r0
    dd4c:	460c      	mov	r4, r1
  while(fat_read_dir(dd, dir_entry))
    dd4e:	f242 550c 	movw	r5, #9484	; 0x250c
    dd52:	f2c1 0500 	movt	r5, #4096	; 0x1000
    dd56:	e00e      	b.n	dd76 <sdcard::findFileInDir(char const*, fat_dir_entry_struct*)+0x2e>
  {
    if(strcmp(dir_entry->long_name, name) == 0)
    dd58:	4620      	mov	r0, r4
    dd5a:	4631      	mov	r1, r6
    dd5c:	f012 f9ee 	bl	2013c <strcmp>
    dd60:	b948      	cbnz	r0, dd76 <sdcard::findFileInDir(char const*, fat_dir_entry_struct*)+0x2e>
    {
      fat_reset_dir(dd);
    dd62:	f242 530c 	movw	r3, #9484	; 0x250c
    dd66:	f2c1 0300 	movt	r3, #4096	; 0x1000
    dd6a:	6818      	ldr	r0, [r3, #0]
    dd6c:	f7f9 fa86 	bl	727c <fat_reset_dir>
      return true;
    dd70:	f04f 0001 	mov.w	r0, #1
    dd74:	bd70      	pop	{r4, r5, r6, pc}
	return SD_SUCCESS;
}

bool findFileInDir(const char* name, struct fat_dir_entry_struct* dir_entry)
{
  while(fat_read_dir(dd, dir_entry))
    dd76:	6828      	ldr	r0, [r5, #0]
    dd78:	4621      	mov	r1, r4
    dd7a:	f7f9 fa8b 	bl	7294 <fat_read_dir>
    dd7e:	2800      	cmp	r0, #0
    dd80:	d1ea      	bne.n	dd58 <sdcard::findFileInDir(char const*, fat_dir_entry_struct*)+0x10>
      fat_reset_dir(dd);
      return true;
    }
  }
  return false;
}
    dd82:	bd70      	pop	{r4, r5, r6, pc}

0000dd84 <sdcard::openFile(char const*, fat_file_struct**)>:

bool openFile(const char* name, struct fat_file_struct** file)
{
    dd84:	b510      	push	{r4, lr}
    dd86:	b08c      	sub	sp, #48	; 0x30
    dd88:	460c      	mov	r4, r1
  struct fat_dir_entry_struct fileEntry;
  if(!findFileInDir(name, &fileEntry))
    dd8a:	a901      	add	r1, sp, #4
    dd8c:	f7ff ffdc 	bl	dd48 <sdcard::findFileInDir(char const*, fat_dir_entry_struct*)>
    dd90:	b158      	cbz	r0, ddaa <sdcard::openFile(char const*, fat_file_struct**)+0x26>
  {
    return false;
  }

  *file = fat_open_file(fs, &fileEntry);
    dd92:	f242 5310 	movw	r3, #9488	; 0x2510
    dd96:	f2c1 0300 	movt	r3, #4096	; 0x1000
    dd9a:	6818      	ldr	r0, [r3, #0]
    dd9c:	a901      	add	r1, sp, #4
    dd9e:	f7f9 f895 	bl	6ecc <fat_open_file>
    dda2:	6020      	str	r0, [r4, #0]
  return true;
    dda4:	f04f 0001 	mov.w	r0, #1
    dda8:	e001      	b.n	ddae <sdcard::openFile(char const*, fat_file_struct**)+0x2a>
bool openFile(const char* name, struct fat_file_struct** file)
{
  struct fat_dir_entry_struct fileEntry;
  if(!findFileInDir(name, &fileEntry))
  {
    return false;
    ddaa:	f04f 0000 	mov.w	r0, #0
  }

  *file = fat_open_file(fs, &fileEntry);
  return true;
}
    ddae:	b00c      	add	sp, #48	; 0x30
    ddb0:	bd10      	pop	{r4, pc}
    ddb2:	bf00      	nop

0000ddb4 <sdcard::getFileSize()>:

uint32_t getFileSize(){
    ddb4:	b508      	push	{r3, lr}
	return fat_get_file_size(file);
    ddb6:	f242 532c 	movw	r3, #9516	; 0x252c
    ddba:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ddbe:	6818      	ldr	r0, [r3, #0]
    ddc0:	f7f9 fc08 	bl	75d4 <fat_get_file_size>
}
    ddc4:	bd08      	pop	{r3, pc}
    ddc6:	bf00      	nop

0000ddc8 <sdcard::deleteFile(char*)>:

bool deleteFile(char *name)
{
    ddc8:	b500      	push	{lr}
    ddca:	b08d      	sub	sp, #52	; 0x34
  struct fat_dir_entry_struct fileEntry;
  if(!findFileInDir(name, &fileEntry))
    ddcc:	a901      	add	r1, sp, #4
    ddce:	f7ff ffbb 	bl	dd48 <sdcard::findFileInDir(char const*, fat_dir_entry_struct*)>
    ddd2:	b150      	cbz	r0, ddea <sdcard::deleteFile(char*)+0x22>
  {
    return false;
  }
  fat_delete_file(fs, &fileEntry);
    ddd4:	f242 5310 	movw	r3, #9488	; 0x2510
    ddd8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    dddc:	6818      	ldr	r0, [r3, #0]
    ddde:	a901      	add	r1, sp, #4
    dde0:	f7f9 fbb0 	bl	7544 <fat_delete_file>
  return true;
    dde4:	f04f 0001 	mov.w	r0, #1
    dde8:	e001      	b.n	ddee <sdcard::deleteFile(char*)+0x26>
bool deleteFile(char *name)
{
  struct fat_dir_entry_struct fileEntry;
  if(!findFileInDir(name, &fileEntry))
  {
    return false;
    ddea:	f04f 0000 	mov.w	r0, #0
  }
  fat_delete_file(fs, &fileEntry);
  return true;
}
    ddee:	b00d      	add	sp, #52	; 0x34
    ddf0:	bd00      	pop	{pc}
    ddf2:	bf00      	nop

0000ddf4 <sdcard::createFile(char*)>:

bool createFile(char *name)
{
    ddf4:	b500      	push	{lr}
    ddf6:	b08d      	sub	sp, #52	; 0x34
    ddf8:	4601      	mov	r1, r0
  struct fat_dir_entry_struct fileEntry;
  return fat_create_file(dd, name, &fileEntry) != 0;
    ddfa:	f242 530c 	movw	r3, #9484	; 0x250c
    ddfe:	f2c1 0300 	movt	r3, #4096	; 0x1000
    de02:	6818      	ldr	r0, [r3, #0]
    de04:	aa01      	add	r2, sp, #4
    de06:	f7f9 fb4d 	bl	74a4 <fat_create_file>
}
    de0a:	3000      	adds	r0, #0
    de0c:	bf18      	it	ne
    de0e:	2001      	movne	r0, #1
    de10:	b00d      	add	sp, #52	; 0x34
    de12:	bd00      	pop	{pc}

0000de14 <sdcard::isPlaying()>:
bool capturing = false;
bool playing = false;
uint32_t capturedBytes = 0L;

bool isPlaying() {
	return playing;
    de14:	f242 5324 	movw	r3, #9508	; 0x2524
    de18:	f2c1 0300 	movt	r3, #4096	; 0x1000
}
    de1c:	7818      	ldrb	r0, [r3, #0]
    de1e:	4770      	bx	lr

0000de20 <sdcard::isCapturing()>:

bool isCapturing() {
	return capturing;
    de20:	f242 5344 	movw	r3, #9540	; 0x2544
    de24:	f2c1 0300 	movt	r3, #4096	; 0x1000
}
    de28:	7818      	ldrb	r0, [r3, #0]
    de2a:	4770      	bx	lr

0000de2c <sdcard::capturePacket(Packet const&)>:
  capturing = true;
  return SD_SUCCESS;
}

void capturePacket(const Packet& packet)
{
    de2c:	b510      	push	{r4, lr}
    de2e:	4604      	mov	r4, r0
	if (file == 0) return;
    de30:	f242 532c 	movw	r3, #9516	; 0x252c
    de34:	f2c1 0300 	movt	r3, #4096	; 0x1000
    de38:	6818      	ldr	r0, [r3, #0]
    de3a:	b160      	cbz	r0, de56 <sdcard::capturePacket(Packet const&)+0x2a>
	void error(uint8_t error_code_in) {
		reset();
		error_code = error_code_in;
	}
public:
	uint8_t getLength() const { return length; }
    de3c:	7822      	ldrb	r2, [r4, #0]
	// Casting away volatile is OK in this instance; we know where the
	// data is located and that fat_write_file isn't caching
	fat_write_file(file, (uint8_t*)packet.getData(), packet.getLength());
    de3e:	f104 0102 	add.w	r1, r4, #2
    de42:	f7f9 f90b 	bl	705c <fat_write_file>
    de46:	7821      	ldrb	r1, [r4, #0]
	capturedBytes += packet.getLength();
    de48:	f242 5348 	movw	r3, #9544	; 0x2548
    de4c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    de50:	681a      	ldr	r2, [r3, #0]
    de52:	188a      	adds	r2, r1, r2
    de54:	601a      	str	r2, [r3, #0]
    de56:	bd10      	pop	{r4, pc}

0000de58 <sdcard::finishCapture()>:
}


uint32_t finishCapture()
{
    de58:	b508      	push	{r3, lr}
  if (capturing) {
    de5a:	f242 5344 	movw	r3, #9540	; 0x2544
    de5e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    de62:	781b      	ldrb	r3, [r3, #0]
    de64:	b1ab      	cbz	r3, de92 <sdcard::finishCapture()+0x3a>
    if (file != 0) {
    de66:	f242 532c 	movw	r3, #9516	; 0x252c
    de6a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    de6e:	6818      	ldr	r0, [r3, #0]
    de70:	b118      	cbz	r0, de7a <sdcard::finishCapture()+0x22>
    	fat_close_file(file);
    de72:	f7f9 f871 	bl	6f58 <fat_close_file>
    	sd_raw_sync();
    de76:	f7f9 fcb3 	bl	77e0 <sd_raw_sync>
    }
    file = 0;
    de7a:	f242 532c 	movw	r3, #9516	; 0x252c
    de7e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    de82:	f04f 0200 	mov.w	r2, #0
    de86:	601a      	str	r2, [r3, #0]
    capturing = false;
    de88:	f242 5344 	movw	r3, #9540	; 0x2544
    de8c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    de90:	701a      	strb	r2, [r3, #0]
  }
  //reset();
  return capturedBytes;
    de92:	f242 5348 	movw	r3, #9544	; 0x2548
    de96:	f2c1 0300 	movt	r3, #4096	; 0x1000
}
    de9a:	6818      	ldr	r0, [r3, #0]
    de9c:	bd08      	pop	{r3, pc}
    de9e:	bf00      	nop

0000dea0 <sdcard::fetchNextByte()>:

uint8_t next_byte;
bool has_more;
bool retry;

void fetchNextByte() {
    dea0:	b508      	push	{r3, lr}
  if(sd_raw_available()){
    dea2:	f7f9 fc8d 	bl	77c0 <sd_raw_available>
    dea6:	b1b8      	cbz	r0, ded8 <sdcard::fetchNextByte()+0x38>
	int16_t read = fat_read_file(file, &next_byte, 1);
    dea8:	f242 532c 	movw	r3, #9516	; 0x252c
    deac:	f2c1 0300 	movt	r3, #4096	; 0x1000
    deb0:	6818      	ldr	r0, [r3, #0]
    deb2:	f242 5125 	movw	r1, #9509	; 0x2525
    deb6:	f2c1 0100 	movt	r1, #4096	; 0x1000
    deba:	f04f 0201 	mov.w	r2, #1
    debe:	f7f9 f851 	bl	6f64 <fat_read_file>
	//retry = read < 0;
	has_more = read > 0;
    dec2:	f242 533c 	movw	r3, #9532	; 0x253c
    dec6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    deca:	b200      	sxth	r0, r0
    decc:	2800      	cmp	r0, #0
    dece:	bfd4      	ite	le
    ded0:	2000      	movle	r0, #0
    ded2:	2001      	movgt	r0, #1
    ded4:	7018      	strb	r0, [r3, #0]
    ded6:	bd08      	pop	{r3, pc}
  }else{
	Motherboard::getBoard().errorResponse("SD Card Removed", true);
    ded8:	f641 309c 	movw	r0, #7068	; 0x1b9c
    dedc:	f2c1 0000 	movt	r0, #4096	; 0x1000
    dee0:	f246 716c 	movw	r1, #26476	; 0x676c
    dee4:	f2c0 0102 	movt	r1, #2
    dee8:	f04f 0201 	mov.w	r2, #1
    deec:	f7fd fb30 	bl	b550 <Motherboard::errorResponse(char*, bool)>
	has_more = 0;
    def0:	f242 533c 	movw	r3, #9532	; 0x253c
    def4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    def8:	f04f 0200 	mov.w	r2, #0
    defc:	701a      	strb	r2, [r3, #0]
	retry = 0;
    defe:	f242 5318 	movw	r3, #9496	; 0x2518
    df02:	f2c1 0300 	movt	r3, #4096	; 0x1000
    df06:	701a      	strb	r2, [r3, #0]
    df08:	bd08      	pop	{r3, pc}
    df0a:	bf00      	nop

0000df0c <sdcard::playbackHasNext()>:
bool playbackRetry() {
	return retry;
}

bool playbackHasNext() {
  return has_more;// || retry;
    df0c:	f242 533c 	movw	r3, #9532	; 0x253c
    df10:	f2c1 0300 	movt	r3, #4096	; 0x1000
}
    df14:	7818      	ldrb	r0, [r3, #0]
    df16:	4770      	bx	lr

0000df18 <sdcard::playbackNext()>:

uint8_t playbackNext() {
    df18:	b510      	push	{r4, lr}
  uint8_t rv = next_byte;
    df1a:	f242 5325 	movw	r3, #9509	; 0x2525
    df1e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    df22:	781c      	ldrb	r4, [r3, #0]
  fetchNextByte();
    df24:	f7ff ffbc 	bl	dea0 <sdcard::fetchNextByte()>
  return rv;
}
    df28:	4620      	mov	r0, r4
    df2a:	bd10      	pop	{r4, pc}

0000df2c <sdcard::finishPlayback()>:
void playbackRewind(uint8_t bytes) {
  int32_t offset = -((int32_t)bytes);
  fat_seek_file(file, &offset, FAT_SEEK_CUR);
}

void finishPlayback() {
    df2c:	b508      	push	{r3, lr}
  playing = false;
    df2e:	f242 5324 	movw	r3, #9508	; 0x2524
    df32:	f2c1 0300 	movt	r3, #4096	; 0x1000
    df36:	f04f 0200 	mov.w	r2, #0
    df3a:	701a      	strb	r2, [r3, #0]
  if (file != 0) {
    df3c:	f242 532c 	movw	r3, #9516	; 0x252c
    df40:	f2c1 0300 	movt	r3, #4096	; 0x1000
    df44:	6818      	ldr	r0, [r3, #0]
    df46:	b118      	cbz	r0, df50 <sdcard::finishPlayback()+0x24>
	  fat_close_file(file);
    df48:	f7f9 f806 	bl	6f58 <fat_close_file>
	  sd_raw_sync();
    df4c:	f7f9 fc48 	bl	77e0 <sd_raw_sync>
  }
  file = 0;
    df50:	f242 532c 	movw	r3, #9516	; 0x252c
    df54:	f2c1 0300 	movt	r3, #4096	; 0x1000
    df58:	f04f 0200 	mov.w	r2, #0
    df5c:	601a      	str	r2, [r3, #0]
}
    df5e:	bd08      	pop	{r3, pc}

0000df60 <sdcard::reset()>:


void reset() {
    df60:	b508      	push	{r3, lr}
	if (playing)
    df62:	f242 5324 	movw	r3, #9508	; 0x2524
    df66:	f2c1 0300 	movt	r3, #4096	; 0x1000
    df6a:	781b      	ldrb	r3, [r3, #0]
    df6c:	b10b      	cbz	r3, df72 <sdcard::reset()+0x12>
		finishPlayback();
    df6e:	f7ff ffdd 	bl	df2c <sdcard::finishPlayback()>
	if (capturing)
    df72:	f242 5344 	movw	r3, #9540	; 0x2544
    df76:	f2c1 0300 	movt	r3, #4096	; 0x1000
    df7a:	781b      	ldrb	r3, [r3, #0]
    df7c:	b10b      	cbz	r3, df82 <sdcard::reset()+0x22>
		finishCapture();
    df7e:	f7ff ff6b 	bl	de58 <sdcard::finishCapture()>
	if (dd != 0) {
    df82:	f242 530c 	movw	r3, #9484	; 0x250c
    df86:	f2c1 0300 	movt	r3, #4096	; 0x1000
    df8a:	6818      	ldr	r0, [r3, #0]
    df8c:	b140      	cbz	r0, dfa0 <sdcard::reset()+0x40>
		fat_close_dir(dd);
    df8e:	f7f9 f96f 	bl	7270 <fat_close_dir>
		dd = 0;
    df92:	f242 530c 	movw	r3, #9484	; 0x250c
    df96:	f2c1 0300 	movt	r3, #4096	; 0x1000
    df9a:	f04f 0200 	mov.w	r2, #0
    df9e:	601a      	str	r2, [r3, #0]
	}
	if (fs != 0) {
    dfa0:	f242 5310 	movw	r3, #9488	; 0x2510
    dfa4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    dfa8:	6818      	ldr	r0, [r3, #0]
    dfaa:	b140      	cbz	r0, dfbe <sdcard::reset()+0x5e>
		fat_close(fs);
    dfac:	f7f8 ff88 	bl	6ec0 <fat_close>
		fs = 0;
    dfb0:	f242 5310 	movw	r3, #9488	; 0x2510
    dfb4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    dfb8:	f04f 0200 	mov.w	r2, #0
    dfbc:	601a      	str	r2, [r3, #0]
	}
	if (partition != 0) {
    dfbe:	f242 5328 	movw	r3, #9512	; 0x2528
    dfc2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    dfc6:	6818      	ldr	r0, [r3, #0]
    dfc8:	b140      	cbz	r0, dfdc <sdcard::reset()+0x7c>
		partition_close(partition);
    dfca:	f7f9 fb8f 	bl	76ec <partition_close>
		partition = 0;
    dfce:	f242 5328 	movw	r3, #9512	; 0x2528
    dfd2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    dfd6:	f04f 0200 	mov.w	r2, #0
    dfda:	601a      	str	r2, [r3, #0]
    dfdc:	bd08      	pop	{r3, pc}
    dfde:	bf00      	nop

0000dfe0 <sdcard::initCard()>:
	return fat_get_fs_size(fs) < 2147483648; //2GB
#endif
}


SdErrorCode initCard() {
    dfe0:	b508      	push	{r3, lr}
	if (!sd_raw_init()) {;
    dfe2:	f7f9 fcd7 	bl	7994 <sd_raw_init>
    dfe6:	b960      	cbnz	r0, e002 <sdcard::initCard()+0x22>
		if (!sd_raw_available()) {
    dfe8:	f7f9 fbea 	bl	77c0 <sd_raw_available>
    dfec:	b920      	cbnz	r0, dff8 <sdcard::initCard()+0x18>
			reset();
    dfee:	f7ff ffb7 	bl	df60 <sdcard::reset()>
			return SD_ERR_NO_CARD_PRESENT;
    dff2:	f04f 0001 	mov.w	r0, #1
    dff6:	bd08      	pop	{r3, pc}
		} else {
			reset();
    dff8:	f7ff ffb2 	bl	df60 <sdcard::reset()>
			return SD_ERR_INIT_FAILED;
    dffc:	f04f 0002 	mov.w	r0, #2
    e000:	bd08      	pop	{r3, pc}
		}
	} else if (!openPartition()) {
    e002:	f7ff fde7 	bl	dbd4 <sdcard::openPartition()>
    e006:	b920      	cbnz	r0, e012 <sdcard::initCard()+0x32>
		reset();
    e008:	f7ff ffaa 	bl	df60 <sdcard::reset()>
		return SD_ERR_PARTITION_READ;
    e00c:	f04f 0003 	mov.w	r0, #3
    e010:	bd08      	pop	{r3, pc}
	} else if (!openFilesys()) {
    e012:	f7ff fe21 	bl	dc58 <sdcard::openFilesys()>
    e016:	b920      	cbnz	r0, e022 <sdcard::initCard()+0x42>
		reset();
    e018:	f7ff ffa2 	bl	df60 <sdcard::reset()>
		return SD_ERR_OPEN_FILESYSTEM;
    e01c:	f04f 0004 	mov.w	r0, #4
    e020:	bd08      	pop	{r3, pc}
	} else if (!openRoot()) {
    e022:	f7ff fe2b 	bl	dc7c <sdcard::openRoot()>
    e026:	b920      	cbnz	r0, e032 <sdcard::initCard()+0x52>
		reset();
    e028:	f7ff ff9a 	bl	df60 <sdcard::reset()>
		return SD_ERR_NO_ROOT;
    e02c:	f04f 0005 	mov.w	r0, #5
    e030:	bd08      	pop	{r3, pc}
	} else if (!checkVolumeSize()){
    e032:	f7ff fe3f 	bl	dcb4 <sdcard::checkVolumeSize()>
    e036:	b920      	cbnz	r0, e042 <sdcard::initCard()+0x62>
		reset();
    e038:	f7ff ff92 	bl	df60 <sdcard::reset()>
		return SD_ERR_VOLUME_TOO_BIG;
    e03c:	f04f 000a 	mov.w	r0, #10
    e040:	bd08      	pop	{r3, pc}
		
	/* we need to keep locked as the last check */
	} else if (sd_raw_locked()) {
    e042:	f7f9 fbc5 	bl	77d0 <sd_raw_locked>
		return SD_ERR_CARD_LOCKED;
    e046:	2800      	cmp	r0, #0
    e048:	bf14      	ite	ne
    e04a:	2006      	movne	r0, #6
    e04c:	2000      	moveq	r0, #0
	}
	return SD_SUCCESS;
}
    e04e:	bd08      	pop	{r3, pc}

0000e050 <sdcard::startPlayback(char*)>:
  uint8_t rv = next_byte;
  fetchNextByte();
  return rv;
}

SdErrorCode startPlayback(char* filename) {
    e050:	b510      	push	{r4, lr}
    e052:	4604      	mov	r4, r0
  reset();
    e054:	f7ff ff84 	bl	df60 <sdcard::reset()>
  SdErrorCode result = initCard();
    e058:	f7ff ffc2 	bl	dfe0 <sdcard::initCard()>
  /* for playback it's ok if the card is locked */
  if (result != SD_SUCCESS && result != SD_ERR_CARD_LOCKED) {
    e05c:	4603      	mov	r3, r0
    e05e:	1f82      	subs	r2, r0, #6
    e060:	bf18      	it	ne
    e062:	2201      	movne	r2, #1
    e064:	2800      	cmp	r0, #0
    e066:	bf0c      	ite	eq
    e068:	2200      	moveq	r2, #0
    e06a:	f002 0201 	andne.w	r2, r2, #1
    e06e:	bb1a      	cbnz	r2, e0b8 <sdcard::startPlayback(char*)+0x68>
    return result;
  }
  capturedBytes = 0L;
    e070:	f242 5348 	movw	r3, #9544	; 0x2548
    e074:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e078:	601a      	str	r2, [r3, #0]
  file = 0;
    e07a:	f242 512c 	movw	r1, #9516	; 0x252c
    e07e:	f2c1 0100 	movt	r1, #4096	; 0x1000
    e082:	600a      	str	r2, [r1, #0]
  if (!openFile(filename, &file) || file == 0) {
    e084:	4620      	mov	r0, r4
    e086:	f7ff fe7d 	bl	dd84 <sdcard::openFile(char const*, fat_file_struct**)>
    return SD_ERR_FILE_NOT_FOUND;
    e08a:	f04f 0307 	mov.w	r3, #7
  if (result != SD_SUCCESS && result != SD_ERR_CARD_LOCKED) {
    return result;
  }
  capturedBytes = 0L;
  file = 0;
  if (!openFile(filename, &file) || file == 0) {
    e08e:	b198      	cbz	r0, e0b8 <sdcard::startPlayback(char*)+0x68>
    e090:	f242 532c 	movw	r3, #9516	; 0x252c
    e094:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e098:	681b      	ldr	r3, [r3, #0]
    e09a:	b15b      	cbz	r3, e0b4 <sdcard::startPlayback(char*)+0x64>
    return SD_ERR_FILE_NOT_FOUND;
  }
  playing = true;
    e09c:	f242 5324 	movw	r3, #9508	; 0x2524
    e0a0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e0a4:	f04f 0201 	mov.w	r2, #1
    e0a8:	701a      	strb	r2, [r3, #0]
  fetchNextByte();
    e0aa:	f7ff fef9 	bl	dea0 <sdcard::fetchNextByte()>
  return SD_SUCCESS;
    e0ae:	f04f 0300 	mov.w	r3, #0
    e0b2:	e001      	b.n	e0b8 <sdcard::startPlayback(char*)+0x68>
    return result;
  }
  capturedBytes = 0L;
  file = 0;
  if (!openFile(filename, &file) || file == 0) {
    return SD_ERR_FILE_NOT_FOUND;
    e0b4:	f04f 0307 	mov.w	r3, #7
  }
  playing = true;
  fetchNextByte();
  return SD_SUCCESS;
}
    e0b8:	4618      	mov	r0, r3
    e0ba:	bd10      	pop	{r4, pc}

0000e0bc <sdcard::startCapture(char*)>:
bool isCapturing() {
	return capturing;
}

SdErrorCode startCapture(char* filename)
{
    e0bc:	b538      	push	{r3, r4, r5, lr}
    e0be:	4605      	mov	r5, r0
  reset();
    e0c0:	f7ff ff4e 	bl	df60 <sdcard::reset()>
  SdErrorCode result = initCard();
    e0c4:	f7ff ff8c 	bl	dfe0 <sdcard::initCard()>
  if (result != SD_SUCCESS) {
    e0c8:	4604      	mov	r4, r0
    e0ca:	bb80      	cbnz	r0, e12e <sdcard::startCapture(char*)+0x72>
    return result;
  }
  capturedBytes = 0L;
    e0cc:	f242 5348 	movw	r3, #9544	; 0x2548
    e0d0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e0d4:	f04f 0200 	mov.w	r2, #0
    e0d8:	601a      	str	r2, [r3, #0]
  file = 0;
    e0da:	f242 532c 	movw	r3, #9516	; 0x252c
    e0de:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e0e2:	601a      	str	r2, [r3, #0]
  // Always operate in truncation mode.
  deleteFile(filename);
    e0e4:	4628      	mov	r0, r5
    e0e6:	f7ff fe6f 	bl	ddc8 <sdcard::deleteFile(char*)>
  if (!createFile(filename)) {
    e0ea:	4628      	mov	r0, r5
    e0ec:	f7ff fe82 	bl	ddf4 <sdcard::createFile(char*)>
    e0f0:	b1a8      	cbz	r0, e11e <sdcard::startCapture(char*)+0x62>
    return SD_ERR_FILE_NOT_FOUND;
  }

  if (!openFile(filename,&file)) {
    e0f2:	4628      	mov	r0, r5
    e0f4:	f242 512c 	movw	r1, #9516	; 0x252c
    e0f8:	f2c1 0100 	movt	r1, #4096	; 0x1000
    e0fc:	f7ff fe42 	bl	dd84 <sdcard::openFile(char const*, fat_file_struct**)>
    e100:	b180      	cbz	r0, e124 <sdcard::startCapture(char*)+0x68>
    return SD_ERR_PARTITION_READ;
  }
  if (file == 0) {
    e102:	f242 532c 	movw	r3, #9516	; 0x252c
    e106:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e10a:	681b      	ldr	r3, [r3, #0]
    e10c:	b16b      	cbz	r3, e12a <sdcard::startCapture(char*)+0x6e>
    return SD_ERR_GENERIC;
  }

  capturing = true;
    e10e:	f242 5344 	movw	r3, #9540	; 0x2544
    e112:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e116:	f04f 0201 	mov.w	r2, #1
    e11a:	701a      	strb	r2, [r3, #0]
  return SD_SUCCESS;
    e11c:	e007      	b.n	e12e <sdcard::startCapture(char*)+0x72>
  capturedBytes = 0L;
  file = 0;
  // Always operate in truncation mode.
  deleteFile(filename);
  if (!createFile(filename)) {
    return SD_ERR_FILE_NOT_FOUND;
    e11e:	f04f 0407 	mov.w	r4, #7
    e122:	e004      	b.n	e12e <sdcard::startCapture(char*)+0x72>
  }

  if (!openFile(filename,&file)) {
    return SD_ERR_PARTITION_READ;
    e124:	f04f 0403 	mov.w	r4, #3
    e128:	e001      	b.n	e12e <sdcard::startCapture(char*)+0x72>
  }
  if (file == 0) {
    return SD_ERR_GENERIC;
    e12a:	f04f 0408 	mov.w	r4, #8
  }

  capturing = true;
  return SD_SUCCESS;
}
    e12e:	4620      	mov	r0, r4
    e130:	bd38      	pop	{r3, r4, r5, pc}
    e132:	bf00      	nop

0000e134 <sdcard::directoryReset()>:
		return SD_ERR_CARD_LOCKED;
	}
	return SD_SUCCESS;
}

SdErrorCode directoryReset() {
    e134:	b508      	push	{r3, lr}
  reset();
    e136:	f7ff ff13 	bl	df60 <sdcard::reset()>
  SdErrorCode rsp = initCard();
    e13a:	f7ff ff51 	bl	dfe0 <sdcard::initCard()>
  if (rsp != SD_SUCCESS && rsp != SD_ERR_CARD_LOCKED) {
    e13e:	4603      	mov	r3, r0
    e140:	1f82      	subs	r2, r0, #6
    e142:	bf18      	it	ne
    e144:	2201      	movne	r2, #1
    e146:	2800      	cmp	r0, #0
    e148:	bf0c      	ite	eq
    e14a:	2200      	moveq	r2, #0
    e14c:	f002 0201 	andne.w	r2, r2, #1
    e150:	b942      	cbnz	r2, e164 <sdcard::directoryReset()+0x30>
    return rsp;
  }
  fat_reset_dir(dd);
    e152:	f242 530c 	movw	r3, #9484	; 0x250c
    e156:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e15a:	6818      	ldr	r0, [r3, #0]
    e15c:	f7f9 f88e 	bl	727c <fat_reset_dir>
  return SD_SUCCESS;
    e160:	f04f 0300 	mov.w	r3, #0
}
    e164:	4618      	mov	r0, r3
    e166:	bd08      	pop	{r3, pc}

0000e168 <_GLOBAL__sub_I__ZN6sdcard9partitionE>:
		partition_close(partition);
		partition = 0;
	}
}

} // namespace sdcard
    e168:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
    e16a:	f242 5008 	movw	r0, #9480	; 0x2508
    e16e:	f2c1 0000 	movt	r0, #4096	; 0x1000
    e172:	f04f 0100 	mov.w	r1, #0
    e176:	f002 fd9f 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
    e17a:	f242 5014 	movw	r0, #9492	; 0x2514
    e17e:	f2c1 0000 	movt	r0, #4096	; 0x1000
    e182:	f04f 0101 	mov.w	r1, #1
    e186:	f002 fd97 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
    e18a:	f242 5020 	movw	r0, #9504	; 0x2520
    e18e:	f2c1 0000 	movt	r0, #4096	; 0x1000
    e192:	f04f 0102 	mov.w	r1, #2
    e196:	f002 fd8f 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
    e19a:	f242 501c 	movw	r0, #9500	; 0x251c
    e19e:	f2c1 0000 	movt	r0, #4096	; 0x1000
    e1a2:	f04f 0103 	mov.w	r1, #3
    e1a6:	f002 fd87 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
    e1aa:	f242 5040 	movw	r0, #9536	; 0x2540
    e1ae:	f2c1 0000 	movt	r0, #4096	; 0x1000
    e1b2:	f04f 0104 	mov.w	r1, #4
    e1b6:	f002 fd7f 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
    e1ba:	f242 5438 	movw	r4, #9528	; 0x2538
    e1be:	f2c1 0400 	movt	r4, #4096	; 0x1000
    e1c2:	4620      	mov	r0, r4
    e1c4:	f04f 01ff 	mov.w	r1, #255	; 0xff
    e1c8:	f002 fd76 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
    e1cc:	f242 5030 	movw	r0, #9520	; 0x2530
    e1d0:	f2c1 0000 	movt	r0, #4096	; 0x1000
    e1d4:	4621      	mov	r1, r4
    e1d6:	f04f 0200 	mov.w	r2, #0
    e1da:	f002 ff7f 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
    e1de:	bd10      	pop	{r4, pc}

0000e1e0 <SoftI2cManager::SoftI2cManager()>:

// initiate static i2cManager instance
SoftI2cManager SoftI2cManager::i2cManager;

// constructor
SoftI2cManager::SoftI2cManager():
    e1e0:	b570      	push	{r4, r5, r6, lr}
    e1e2:	b090      	sub	sp, #64	; 0x40
    e1e4:	4606      	mov	r6, r0
    e1e6:	4604      	mov	r4, r0
    e1e8:	f100 0514 	add.w	r5, r0, #20
    numPins(STEPPER_COUNT),
    sclPin(POTS_SCL)
    e1ec:	4620      	mov	r0, r4
    e1ee:	f002 ff63 	bl	110b8 <Pin::Pin()>
    e1f2:	f104 0405 	add.w	r4, r4, #5
    e1f6:	42ac      	cmp	r4, r5
    e1f8:	d1f8      	bne.n	e1ec <SoftI2cManager::SoftI2cManager()+0xc>
    e1fa:	4668      	mov	r0, sp
    e1fc:	f04f 01ff 	mov.w	r1, #255	; 0xff
    e200:	f002 fd5a 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
    e204:	f106 0414 	add.w	r4, r6, #20
    e208:	4620      	mov	r0, r4
    e20a:	4669      	mov	r1, sp
    e20c:	f04f 02ff 	mov.w	r2, #255	; 0xff
    e210:	f002 ff64 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
    e214:	f04f 0304 	mov.w	r3, #4
    e218:	7673      	strb	r3, [r6, #25]
{
    sdaPins[0] = X_POT_PIN;
    e21a:	a803      	add	r0, sp, #12
    e21c:	f04f 01ff 	mov.w	r1, #255	; 0xff
    e220:	f002 fd4a 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
    e224:	a801      	add	r0, sp, #4
    e226:	a903      	add	r1, sp, #12
    e228:	f04f 02ff 	mov.w	r2, #255	; 0xff
    e22c:	f002 ff56 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
    e230:	9801      	ldr	r0, [sp, #4]
    e232:	6030      	str	r0, [r6, #0]
    e234:	f89d 3008 	ldrb.w	r3, [sp, #8]
    e238:	7133      	strb	r3, [r6, #4]
    sdaPins[1] = Y_POT_PIN;
    e23a:	a806      	add	r0, sp, #24
    e23c:	f04f 01ff 	mov.w	r1, #255	; 0xff
    e240:	f002 fd3a 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
    e244:	a804      	add	r0, sp, #16
    e246:	a906      	add	r1, sp, #24
    e248:	f04f 02ff 	mov.w	r2, #255	; 0xff
    e24c:	f002 ff46 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
    e250:	9804      	ldr	r0, [sp, #16]
    e252:	f8c6 0005 	str.w	r0, [r6, #5]
    e256:	f89d 3014 	ldrb.w	r3, [sp, #20]
    e25a:	7273      	strb	r3, [r6, #9]
    sdaPins[2] = Z_POT_PIN;
    e25c:	a809      	add	r0, sp, #36	; 0x24
    e25e:	f04f 01ff 	mov.w	r1, #255	; 0xff
    e262:	f002 fd29 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
    e266:	a807      	add	r0, sp, #28
    e268:	a909      	add	r1, sp, #36	; 0x24
    e26a:	f04f 02ff 	mov.w	r2, #255	; 0xff
    e26e:	f002 ff35 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
    e272:	9807      	ldr	r0, [sp, #28]
    e274:	f8c6 000a 	str.w	r0, [r6, #10]
    e278:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e27c:	73b3      	strb	r3, [r6, #14]
    sdaPins[3] = A_POT_PIN;
    e27e:	a80c      	add	r0, sp, #48	; 0x30
    e280:	f04f 01ff 	mov.w	r1, #255	; 0xff
    e284:	f002 fd18 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
    e288:	a80a      	add	r0, sp, #40	; 0x28
    e28a:	a90c      	add	r1, sp, #48	; 0x30
    e28c:	f04f 02ff 	mov.w	r2, #255	; 0xff
    e290:	f002 ff24 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
    e294:	980a      	ldr	r0, [sp, #40]	; 0x28
    e296:	f8c6 000f 	str.w	r0, [r6, #15]
    e29a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    e29e:	74f3      	strb	r3, [r6, #19]
    sdaPins[4] = B_POT_PIN;
    e2a0:	a80f      	add	r0, sp, #60	; 0x3c
    e2a2:	f04f 01ff 	mov.w	r1, #255	; 0xff
    e2a6:	f002 fd07 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
    e2aa:	a80d      	add	r0, sp, #52	; 0x34
    e2ac:	a90f      	add	r1, sp, #60	; 0x3c
    e2ae:	f04f 02ff 	mov.w	r2, #255	; 0xff
    e2b2:	f002 ff13 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
    e2b6:	980d      	ldr	r0, [sp, #52]	; 0x34
    e2b8:	6170      	str	r0, [r6, #20]
    e2ba:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    e2be:	7633      	strb	r3, [r6, #24]
    
}
    e2c0:	4630      	mov	r0, r6
    e2c2:	b010      	add	sp, #64	; 0x40
    e2c4:	bd70      	pop	{r4, r5, r6, pc}
    e2c6:	bf00      	nop

0000e2c8 <SoftI2cManager::init()>:


// init pins and set bus high
void SoftI2cManager::init()
{
    e2c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e2cc:	4606      	mov	r6, r0
    for (uint8_t i = 0; i < numPins; i++)
    e2ce:	7e43      	ldrb	r3, [r0, #25]
    e2d0:	b1c3      	cbz	r3, e304 <SoftI2cManager::init()+0x3c>
    e2d2:	f04f 0400 	mov.w	r4, #0
    {
        sdaPins[i].setDirection(true);
    e2d6:	f04f 0801 	mov.w	r8, #1
    e2da:	eb04 0784 	add.w	r7, r4, r4, lsl #2
    e2de:	19f5      	adds	r5, r6, r7
    e2e0:	4628      	mov	r0, r5
    e2e2:	4641      	mov	r1, r8
    e2e4:	f002 ff1a 	bl	1111c <Pin::setDirection(bool) const>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    e2e8:	786b      	ldrb	r3, [r5, #1]
    e2ea:	b92b      	cbnz	r3, e2f8 <SoftI2cManager::init()+0x30>
//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    e2ec:	78a9      	ldrb	r1, [r5, #2]
    e2ee:	5df0      	ldrb	r0, [r6, r7]
    e2f0:	fa08 f101 	lsl.w	r1, r8, r1
    e2f4:	f7f5 f8f6 	bl	34e4 <GPIO_SetValue>


// init pins and set bus high
void SoftI2cManager::init()
{
    for (uint8_t i = 0; i < numPins; i++)
    e2f8:	f104 0401 	add.w	r4, r4, #1
    e2fc:	b2e4      	uxtb	r4, r4
    e2fe:	7e73      	ldrb	r3, [r6, #25]
    e300:	42a3      	cmp	r3, r4
    e302:	d8ea      	bhi.n	e2da <SoftI2cManager::init()+0x12>
    {
        sdaPins[i].setDirection(true);
        sdaPins[i].setValue(true);
    }
    sclPin.setDirection(true);
    e304:	f106 0014 	add.w	r0, r6, #20
    e308:	f04f 0101 	mov.w	r1, #1
    e30c:	f002 ff06 	bl	1111c <Pin::setDirection(bool) const>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    e310:	7d73      	ldrb	r3, [r6, #21]
    e312:	b93b      	cbnz	r3, e324 <SoftI2cManager::init()+0x5c>
//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    e314:	7db3      	ldrb	r3, [r6, #22]
    e316:	7d30      	ldrb	r0, [r6, #20]
    e318:	f04f 0101 	mov.w	r1, #1
    e31c:	fa01 f103 	lsl.w	r1, r1, r3
    e320:	f7f5 f8e0 	bl	34e4 <GPIO_SetValue>
    e324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e328 <SoftI2cManager::stop()>:
  return write(addressRW, sdaPin);
}
//------------------------------------------------------------------------------
// issue a stop condition
void SoftI2cManager::stop()
{
    e328:	b570      	push	{r4, r5, r6, lr}
    e32a:	4605      	mov	r5, r0
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    e32c:	7d43      	ldrb	r3, [r0, #21]
    e32e:	b93b      	cbnz	r3, e340 <SoftI2cManager::stop()+0x18>
//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    e330:	7d83      	ldrb	r3, [r0, #22]
    e332:	7d00      	ldrb	r0, [r0, #20]
    e334:	f04f 0101 	mov.w	r1, #1
    e338:	fa01 f103 	lsl.w	r1, r1, r3
    e33c:	f7f5 f8d2 	bl	34e4 <GPIO_SetValue>
//  _delay_us(I2C_DELAY_USEC);
   sclPin.setValue(true);  
//  _delay_us(I2C_DELAY_USEC);
    for(uint8_t i = 0; i < numPins; i++)
    e340:	7e6b      	ldrb	r3, [r5, #25]
    e342:	b1a3      	cbz	r3, e36e <SoftI2cManager::stop()+0x46>
    e344:	f04f 0400 	mov.w	r4, #0
    e348:	f04f 0601 	mov.w	r6, #1
        sdaPins[i].setValue(true);  
    e34c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    e350:	18ea      	adds	r2, r5, r3
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    e352:	7851      	ldrb	r1, [r2, #1]
    e354:	b929      	cbnz	r1, e362 <SoftI2cManager::stop()+0x3a>
//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    e356:	7891      	ldrb	r1, [r2, #2]
    e358:	5ce8      	ldrb	r0, [r5, r3]
    e35a:	fa06 f101 	lsl.w	r1, r6, r1
    e35e:	f7f5 f8c1 	bl	34e4 <GPIO_SetValue>
void SoftI2cManager::stop()
{
//  _delay_us(I2C_DELAY_USEC);
   sclPin.setValue(true);  
//  _delay_us(I2C_DELAY_USEC);
    for(uint8_t i = 0; i < numPins; i++)
    e362:	f104 0401 	add.w	r4, r4, #1
    e366:	b2e4      	uxtb	r4, r4
    e368:	7e6b      	ldrb	r3, [r5, #25]
    e36a:	42a3      	cmp	r3, r4
    e36c:	d8ee      	bhi.n	e34c <SoftI2cManager::stop()+0x24>
    e36e:	bd70      	pop	{r4, r5, r6, pc}

0000e370 <SoftI2cManager::write(unsigned char, Pin const&)>:
//  _delay_us(I2C_DELAY_USEC);
}
//------------------------------------------------------------------------------
// write byte and return true for Ack or false for Nak
bool SoftI2cManager::write(uint8_t b, const Pin &sdaPin)
{
    e370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e374:	4604      	mov	r4, r0
    e376:	4689      	mov	r9, r1
    e378:	4615      	mov	r5, r2
    e37a:	f04f 0708 	mov.w	r7, #8
  // write byte
  for (uint8_t m = 0X80; m != 0; m >>= 1) {
    e37e:	f04f 0680 	mov.w	r6, #128	; 0x80
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    e382:	f04f 0801 	mov.w	r8, #1
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    e386:	786b      	ldrb	r3, [r5, #1]
    e388:	b97b      	cbnz	r3, e3aa <SoftI2cManager::write(unsigned char, Pin const&)+0x3a>
		 	return;
		// uint8_t oldSREG = SREG;

//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
    e38a:	ea16 0f09 	tst.w	r6, r9
    e38e:	d006      	beq.n	e39e <SoftI2cManager::write(unsigned char, Pin const&)+0x2e>
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    e390:	78a9      	ldrb	r1, [r5, #2]
    e392:	7828      	ldrb	r0, [r5, #0]
    e394:	fa08 f101 	lsl.w	r1, r8, r1
    e398:	f7f5 f8a4 	bl	34e4 <GPIO_SetValue>
    e39c:	e005      	b.n	e3aa <SoftI2cManager::write(unsigned char, Pin const&)+0x3a>
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    e39e:	78a9      	ldrb	r1, [r5, #2]
    e3a0:	7828      	ldrb	r0, [r5, #0]
    e3a2:	fa08 f101 	lsl.w	r1, r8, r1
    e3a6:	f7f5 f8a5 	bl	34f4 <GPIO_ClearValue>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    e3aa:	7d63      	ldrb	r3, [r4, #21]
    e3ac:	b96b      	cbnz	r3, e3ca <SoftI2cManager::write(unsigned char, Pin const&)+0x5a>
//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    e3ae:	7da1      	ldrb	r1, [r4, #22]
    e3b0:	7d20      	ldrb	r0, [r4, #20]
    e3b2:	fa08 f101 	lsl.w	r1, r8, r1
    e3b6:	f7f5 f895 	bl	34e4 <GPIO_SetValue>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    e3ba:	7d63      	ldrb	r3, [r4, #21]
    e3bc:	b92b      	cbnz	r3, e3ca <SoftI2cManager::write(unsigned char, Pin const&)+0x5a>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    e3be:	7da1      	ldrb	r1, [r4, #22]
    e3c0:	7d20      	ldrb	r0, [r4, #20]
    e3c2:	fa08 f101 	lsl.w	r1, r8, r1
    e3c6:	f7f5 f895 	bl	34f4 <GPIO_ClearValue>
    e3ca:	ea4f 0656 	mov.w	r6, r6, lsr #1
    e3ce:	3f01      	subs	r7, #1
    e3d0:	d1d9      	bne.n	e386 <SoftI2cManager::write(unsigned char, Pin const&)+0x16>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    e3d2:	786b      	ldrb	r3, [r5, #1]
    e3d4:	b93b      	cbnz	r3, e3e6 <SoftI2cManager::write(unsigned char, Pin const&)+0x76>
//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    e3d6:	78ab      	ldrb	r3, [r5, #2]
    e3d8:	7828      	ldrb	r0, [r5, #0]
    e3da:	f04f 0101 	mov.w	r1, #1
    e3de:	fa01 f103 	lsl.w	r1, r1, r3
    e3e2:	f7f5 f87f 	bl	34e4 <GPIO_SetValue>
//    _delay_us(I2C_DELAY_USEC);
     sclPin.setValue(false);  
  }
  // get Ack or Nak
   sdaPin.setValue(true);  
   sdaPin.setDirection(false); 
    e3e6:	4628      	mov	r0, r5
    e3e8:	f04f 0100 	mov.w	r1, #0
    e3ec:	f002 fe96 	bl	1111c <Pin::setDirection(bool) const>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    e3f0:	7d63      	ldrb	r3, [r4, #21]
    e3f2:	b93b      	cbnz	r3, e404 <SoftI2cManager::write(unsigned char, Pin const&)+0x94>
//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    e3f4:	7da3      	ldrb	r3, [r4, #22]
    e3f6:	7d20      	ldrb	r0, [r4, #20]
    e3f8:	f04f 0101 	mov.w	r1, #1
    e3fc:	fa01 f103 	lsl.w	r1, r1, r3
    e400:	f7f5 f870 	bl	34e4 <GPIO_SetValue>
	Pin(const LPCPort& port_in, uint8_t pin_index_in);
	Pin(const Pin& other_pin);
	bool isNull() const;
	void setDirection(bool out) const;
	bool /*Pin::*/getValue() const {
		if (is_null)
    e404:	786b      	ldrb	r3, [r5, #1]
			return false; // null pin is always low ... ?
    e406:	f04f 0600 	mov.w	r6, #0
	Pin(const LPCPort& port_in, uint8_t pin_index_in);
	Pin(const Pin& other_pin);
	bool isNull() const;
	void setDirection(bool out) const;
	bool /*Pin::*/getValue() const {
		if (is_null)
    e40a:	b96b      	cbnz	r3, e428 <SoftI2cManager::write(unsigned char, Pin const&)+0xb8>
			return false; // null pin is always low ... ?
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
    e40c:	7828      	ldrb	r0, [r5, #0]
    e40e:	f7f5 f883 	bl	3518 <FIO_ReadValue>
    e412:	78ab      	ldrb	r3, [r5, #2]
    e414:	f04f 0201 	mov.w	r2, #1
    e418:	fa02 f303 	lsl.w	r3, r2, r3
    e41c:	4003      	ands	r3, r0
    e41e:	f013 0fff 	tst.w	r3, #255	; 0xff
    e422:	bf0c      	ite	eq
    e424:	2600      	moveq	r6, #0
    e426:	2601      	movne	r6, #1
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    e428:	7d63      	ldrb	r3, [r4, #21]
    e42a:	b93b      	cbnz	r3, e43c <SoftI2cManager::write(unsigned char, Pin const&)+0xcc>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    e42c:	7da3      	ldrb	r3, [r4, #22]
    e42e:	7d20      	ldrb	r0, [r4, #20]
    e430:	f04f 0101 	mov.w	r1, #1
    e434:	fa01 f103 	lsl.w	r1, r1, r3
    e438:	f7f5 f85c 	bl	34f4 <GPIO_ClearValue>
   sclPin.setValue(true);  
   b = sdaPin.getValue();
   sclPin.setValue(false); 
   sdaPin.setDirection(true);
    e43c:	4628      	mov	r0, r5
    e43e:	f04f 0101 	mov.w	r1, #1
    e442:	f002 fe6b 	bl	1111c <Pin::setDirection(bool) const>
   return b == 0;
}
    e446:	f086 0001 	eor.w	r0, r6, #1
    e44a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e44e:	bf00      	nop

0000e450 <SoftI2cManager::start(unsigned char, Pin const&)>:
  return start(addressRW, sdaPin);
}
//------------------------------------------------------------------------------
// issue a start condition for i2c address with read/write bit
uint8_t SoftI2cManager::start(uint8_t addressRW, const Pin &sdaPin)
{
    e450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e454:	4605      	mov	r5, r0
    e456:	460f      	mov	r7, r1
    e458:	4690      	mov	r8, r2
    for(uint8_t i = 0; i < numPins; i++)
    e45a:	7e43      	ldrb	r3, [r0, #25]
    e45c:	b1a3      	cbz	r3, e488 <SoftI2cManager::start(unsigned char, Pin const&)+0x38>
    e45e:	f04f 0400 	mov.w	r4, #0
    e462:	f04f 0601 	mov.w	r6, #1
        sdaPins[i].setValue(false);
    e466:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    e46a:	18ea      	adds	r2, r5, r3
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    e46c:	7851      	ldrb	r1, [r2, #1]
    e46e:	b929      	cbnz	r1, e47c <SoftI2cManager::start(unsigned char, Pin const&)+0x2c>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    e470:	7891      	ldrb	r1, [r2, #2]
    e472:	5ce8      	ldrb	r0, [r5, r3]
    e474:	fa06 f101 	lsl.w	r1, r6, r1
    e478:	f7f5 f83c 	bl	34f4 <GPIO_ClearValue>
}
//------------------------------------------------------------------------------
// issue a start condition for i2c address with read/write bit
uint8_t SoftI2cManager::start(uint8_t addressRW, const Pin &sdaPin)
{
    for(uint8_t i = 0; i < numPins; i++)
    e47c:	f104 0401 	add.w	r4, r4, #1
    e480:	b2e4      	uxtb	r4, r4
    e482:	7e6b      	ldrb	r3, [r5, #25]
    e484:	42a3      	cmp	r3, r4
    e486:	d8ee      	bhi.n	e466 <SoftI2cManager::start(unsigned char, Pin const&)+0x16>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    e488:	7d6b      	ldrb	r3, [r5, #21]
    e48a:	b93b      	cbnz	r3, e49c <SoftI2cManager::start(unsigned char, Pin const&)+0x4c>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    e48c:	7dab      	ldrb	r3, [r5, #22]
    e48e:	7d28      	ldrb	r0, [r5, #20]
    e490:	f04f 0101 	mov.w	r1, #1
    e494:	fa01 f103 	lsl.w	r1, r1, r3
    e498:	f7f5 f82c 	bl	34f4 <GPIO_ClearValue>
        sdaPins[i].setValue(false);
//  _delay_us(I2C_DELAY_USEC);
  sclPin.setValue(false);
  return write(addressRW, sdaPin);
    e49c:	4628      	mov	r0, r5
    e49e:	4639      	mov	r1, r7
    e4a0:	4642      	mov	r2, r8
    e4a2:	f7ff ff65 	bl	e370 <SoftI2cManager::write(unsigned char, Pin const&)>
}
    e4a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e4aa:	bf00      	nop

0000e4ac <_GLOBAL__sub_I__ZN14SoftI2cManager10i2cManagerE>:
   sclPin.setValue(true);  
   b = sdaPin.getValue();
   sclPin.setValue(false); 
   sdaPin.setDirection(true);
   return b == 0;
}
    e4ac:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
    e4ae:	f242 504c 	movw	r0, #9548	; 0x254c
    e4b2:	f2c1 0000 	movt	r0, #4096	; 0x1000
    e4b6:	f04f 0100 	mov.w	r1, #0
    e4ba:	f002 fbfd 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
    e4be:	f242 5050 	movw	r0, #9552	; 0x2550
    e4c2:	f2c1 0000 	movt	r0, #4096	; 0x1000
    e4c6:	f04f 0101 	mov.w	r1, #1
    e4ca:	f002 fbf5 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
    e4ce:	f242 5054 	movw	r0, #9556	; 0x2554
    e4d2:	f2c1 0000 	movt	r0, #4096	; 0x1000
    e4d6:	f04f 0102 	mov.w	r1, #2
    e4da:	f002 fbed 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
    e4de:	f242 5058 	movw	r0, #9560	; 0x2558
    e4e2:	f2c1 0000 	movt	r0, #4096	; 0x1000
    e4e6:	f04f 0103 	mov.w	r1, #3
    e4ea:	f002 fbe5 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
    e4ee:	f242 505c 	movw	r0, #9564	; 0x255c
    e4f2:	f2c1 0000 	movt	r0, #4096	; 0x1000
    e4f6:	f04f 0104 	mov.w	r1, #4
    e4fa:	f002 fbdd 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
    e4fe:	f242 5460 	movw	r4, #9568	; 0x2560
    e502:	f2c1 0400 	movt	r4, #4096	; 0x1000
    e506:	4620      	mov	r0, r4
    e508:	f04f 01ff 	mov.w	r1, #255	; 0xff
    e50c:	f002 fbd4 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
	};
	// currently not used:
	//const uint8_t getPinIndex() const { return pin_index; }
};

static const Pin NullPin(NullPort, 0);
    e510:	f242 5064 	movw	r0, #9572	; 0x2564
    e514:	f2c1 0000 	movt	r0, #4096	; 0x1000
    e518:	4621      	mov	r1, r4
    e51a:	f04f 0200 	mov.w	r2, #0
    e51e:	f002 fddd 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
extern "C" {
#include "comm.h"
}

// initiate static i2cManager instance
SoftI2cManager SoftI2cManager::i2cManager;
    e522:	f242 506c 	movw	r0, #9580	; 0x256c
    e526:	f2c1 0000 	movt	r0, #4096	; 0x1000
    e52a:	f7ff fe59 	bl	e1e0 <SoftI2cManager::SoftI2cManager()>
   sclPin.setValue(true);  
   b = sdaPin.getValue();
   sclPin.setValue(false); 
   sdaPin.setDirection(true);
   return b == 0;
}
    e52e:	bd10      	pop	{r4, pc}

0000e530 <steppers::isRunning()>:

bool holdZ = false;

planner::Block *current_block;

bool isRunning() {
    e530:	b508      	push	{r3, lr}
	return is_running || is_homing || !planner::isBufferEmpty();
    e532:	f242 6370 	movw	r3, #9840	; 0x2670
    e536:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e53a:	781b      	ldrb	r3, [r3, #0]
    e53c:	b95b      	cbnz	r3, e556 <steppers::isRunning()+0x26>
    e53e:	f242 6314 	movw	r3, #9748	; 0x2614
    e542:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e546:	781b      	ldrb	r3, [r3, #0]
    e548:	b943      	cbnz	r3, e55c <steppers::isRunning()+0x2c>
    e54a:	f7fe f957 	bl	c7fc <planner::isBufferEmpty()>

bool holdZ = false;

planner::Block *current_block;

bool isRunning() {
    e54e:	f080 0001 	eor.w	r0, r0, #1
    e552:	b2c0      	uxtb	r0, r0
    e554:	bd08      	pop	{r3, pc}
	return is_running || is_homing || !planner::isBufferEmpty();
    e556:	f04f 0001 	mov.w	r0, #1
    e55a:	bd08      	pop	{r3, pc}
    e55c:	f04f 0001 	mov.w	r0, #1
}
    e560:	bd08      	pop	{r3, pc}
    e562:	bf00      	nop

0000e564 <steppers::InitPins()>:

void InitPins(){
    e564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		
		// initialize stepper control pins
		GPIO_SetDir(X_STEP_PORT, X_DIR_BIT, true);
    e566:	f04f 0002 	mov.w	r0, #2
    e56a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    e56e:	f04f 0201 	mov.w	r2, #1
    e572:	f7f4 ffa7 	bl	34c4 <GPIO_SetDir>
		GPIO_SetDir(X_DIR_PORT, X_STEP_BIT, true);
    e576:	f04f 0002 	mov.w	r0, #2
    e57a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    e57e:	f04f 0201 	mov.w	r2, #1
    e582:	f7f4 ff9f 	bl	34c4 <GPIO_SetDir>
		GPIO_SetValue(X_ENABLE_PORT, X_ENABLE_BIT);
    e586:	f04f 0002 	mov.w	r0, #2
    e58a:	f44f 6100 	mov.w	r1, #2048	; 0x800
    e58e:	f7f4 ffa9 	bl	34e4 <GPIO_SetValue>
		GPIO_SetDir(X_ENABLE_PORT, X_ENABLE_BIT, true);
    e592:	f04f 0002 	mov.w	r0, #2
    e596:	f44f 6100 	mov.w	r1, #2048	; 0x800
    e59a:	f04f 0201 	mov.w	r2, #1
    e59e:	f7f4 ff91 	bl	34c4 <GPIO_SetDir>

		GPIO_SetDir(Y_STEP_PORT, Y_DIR_BIT, true);
    e5a2:	f04f 0001 	mov.w	r0, #1
    e5a6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    e5aa:	4602      	mov	r2, r0
    e5ac:	f7f4 ff8a 	bl	34c4 <GPIO_SetDir>
		GPIO_SetDir(Y_DIR_PORT, Y_STEP_BIT, true);
    e5b0:	f04f 0001 	mov.w	r0, #1
    e5b4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    e5b8:	4602      	mov	r2, r0
    e5ba:	f7f4 ff83 	bl	34c4 <GPIO_SetDir>
		GPIO_SetValue(Y_ENABLE_PORT, Y_ENABLE_BIT);
    e5be:	f04f 0000 	mov.w	r0, #0
    e5c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
    e5c6:	f7f4 ff8d 	bl	34e4 <GPIO_SetValue>
		GPIO_SetDir(Y_ENABLE_PORT, Y_ENABLE_BIT, true);
    e5ca:	f04f 0000 	mov.w	r0, #0
    e5ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
    e5d2:	f04f 0201 	mov.w	r2, #1
    e5d6:	f7f4 ff75 	bl	34c4 <GPIO_SetDir>

		GPIO_SetDir(Z_STEP_PORT, Z_DIR_BIT, true);
    e5da:	f04f 0001 	mov.w	r0, #1
    e5de:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    e5e2:	4602      	mov	r2, r0
    e5e4:	f7f4 ff6e 	bl	34c4 <GPIO_SetDir>
		GPIO_SetDir(Z_DIR_PORT, Z_STEP_BIT, true);
    e5e8:	f04f 0001 	mov.w	r0, #1
    e5ec:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    e5f0:	4602      	mov	r2, r0
    e5f2:	f7f4 ff67 	bl	34c4 <GPIO_SetDir>
		GPIO_SetValue(Z_ENABLE_PORT, Z_ENABLE_BIT);
    e5f6:	f04f 0001 	mov.w	r0, #1
    e5fa:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    e5fe:	f7f4 ff71 	bl	34e4 <GPIO_SetValue>
		GPIO_SetDir(Z_ENABLE_PORT, Z_ENABLE_BIT, true);
    e602:	f04f 0001 	mov.w	r0, #1
    e606:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    e60a:	4602      	mov	r2, r0
    e60c:	f7f4 ff5a 	bl	34c4 <GPIO_SetDir>
		_SET_DIRECTION(Z_STEP, true);
		_WRITE(Z_ENABLE, true);
		_SET_DIRECTION(Z_ENABLE, true);*/

#if STEPPER_COUNT > 3	
		GPIO_SetDir(A_STEP_PORT, A_DIR_BIT, true);
    e610:	f04f 0001 	mov.w	r0, #1
    e614:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    e618:	4602      	mov	r2, r0
    e61a:	f7f4 ff53 	bl	34c4 <GPIO_SetDir>
		GPIO_SetDir(A_DIR_PORT, A_STEP_BIT, true);
    e61e:	f04f 0001 	mov.w	r0, #1
    e622:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    e626:	4602      	mov	r2, r0
    e628:	f7f4 ff4c 	bl	34c4 <GPIO_SetDir>
		GPIO_SetValue(A_ENABLE_PORT, A_ENABLE_BIT);
    e62c:	f04f 0001 	mov.w	r0, #1
    e630:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    e634:	f7f4 ff56 	bl	34e4 <GPIO_SetValue>
		GPIO_SetDir(A_ENABLE_PORT, A_ENABLE_BIT, true);
    e638:	f04f 0001 	mov.w	r0, #1
    e63c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    e640:	4602      	mov	r2, r0
    e642:	f7f4 ff3f 	bl	34c4 <GPIO_SetDir>
		_WRITE(B_ENABLE, true);
		_SET_DIRECTION(B_ENABLE, true);*/
#endif	
		
		// get inversion characteristics
		uint8_t axes_invert = eeprom::getEeprom8(eeprom_offsets::AXIS_INVERSION, 0);
    e646:	f04f 0002 	mov.w	r0, #2
    e64a:	f04f 0100 	mov.w	r1, #0
    e64e:	f001 fec1 	bl	103d4 <eeprom::getEeprom8(unsigned short, unsigned char)>
    e652:	4604      	mov	r4, r0
		uint8_t endstops_invert = eeprom::getEeprom8(eeprom_offsets::ENDSTOP_INVERSION, 0);
    e654:	f04f 0004 	mov.w	r0, #4
    e658:	f04f 0100 	mov.w	r1, #0
    e65c:	f001 feba 	bl	103d4 <eeprom::getEeprom8(unsigned short, unsigned char)>
    e660:	f04f 0300 	mov.w	r3, #0
			
			bool endstops_present = (endstops_invert & (1<<7)) != 0;	
			
			// If endstops are not present, then we consider them inverted, since they will
			// always register as high (pulled up).
			invert_endstops[i] = !endstops_present || ((endstops_invert & (1<<i)) != 0);
    e664:	b247      	sxtb	r7, r0
    e666:	f04f 0e01 	mov.w	lr, #1
    e66a:	f242 56e8 	movw	r6, #9704	; 0x25e8
    e66e:	f2c1 0600 	movt	r6, #4096	; 0x1000
			invert_axis[i] = (axes_invert & (1<<i)) != 0;
    e672:	f242 651c 	movw	r5, #9756	; 0x261c
    e676:	f2c1 0500 	movt	r5, #4096	; 0x1000
			
			bool endstops_present = (endstops_invert & (1<<7)) != 0;	
			
			// If endstops are not present, then we consider them inverted, since they will
			// always register as high (pulled up).
			invert_endstops[i] = !endstops_present || ((endstops_invert & (1<<i)) != 0);
    e67a:	2f00      	cmp	r7, #0
    e67c:	bfba      	itte	lt
    e67e:	fa40 f103 	asrlt.w	r1, r0, r3

bool isRunning() {
	return is_running || is_homing || !planner::isBufferEmpty();
}

void InitPins(){
    e682:	f001 0101 	andlt.w	r1, r1, #1
			
			bool endstops_present = (endstops_invert & (1<<7)) != 0;	
			
			// If endstops are not present, then we consider them inverted, since they will
			// always register as high (pulled up).
			invert_endstops[i] = !endstops_present || ((endstops_invert & (1<<i)) != 0);
    e686:	4671      	movge	r1, lr
    e688:	5599      	strb	r1, [r3, r6]
			invert_axis[i] = (axes_invert & (1<<i)) != 0;
    e68a:	fa44 f203 	asr.w	r2, r4, r3
    e68e:	f002 0201 	and.w	r2, r2, #1
    e692:	555a      	strb	r2, [r3, r5]
    e694:	f103 0301 	add.w	r3, r3, #1
		
		// get inversion characteristics
		uint8_t axes_invert = eeprom::getEeprom8(eeprom_offsets::AXIS_INVERSION, 0);
		uint8_t endstops_invert = eeprom::getEeprom8(eeprom_offsets::ENDSTOP_INVERSION, 0);

		for (uint8_t i = 0; i < STEPPER_COUNT; i++){
    e698:	2b04      	cmp	r3, #4
    e69a:	d1ee      	bne.n	e67a <steppers::InitPins()+0x116>
					
		}
		
		// intialize endstop pins
		if ( X_MAX != NULL){
			GPIO_SetDir(X_MIN_PORT, X_MIN_BIT, false);
    e69c:	f04f 0000 	mov.w	r0, #0
    e6a0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    e6a4:	4602      	mov	r2, r0
    e6a6:	f7f4 ff0d 	bl	34c4 <GPIO_SetDir>
			_WRITE(X_MIN_PORT, X_MIN_BIT, invert_endstops[X_AXIS]);
    e6aa:	f242 53e8 	movw	r3, #9704	; 0x25e8
    e6ae:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e6b2:	781b      	ldrb	r3, [r3, #0]
    e6b4:	b133      	cbz	r3, e6c4 <steppers::InitPins()+0x160>
    e6b6:	f04f 0000 	mov.w	r0, #0
    e6ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    e6be:	f7f4 ff11 	bl	34e4 <GPIO_SetValue>
    e6c2:	e005      	b.n	e6d0 <steppers::InitPins()+0x16c>
    e6c4:	f04f 0000 	mov.w	r0, #0
    e6c8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    e6cc:	f7f4 ff12 	bl	34f4 <GPIO_ClearValue>
//			_SET_DIRECTION(X_MAX, false);
//			_WRITE(X_MAX, invert_endstops[X_AXIS]);
		}if ( X_MIN != NULL) {
			GPIO_SetDir(X_MAX_PORT, X_MAX_BIT, false);
    e6d0:	f04f 0000 	mov.w	r0, #0
    e6d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    e6d8:	4602      	mov	r2, r0
    e6da:	f7f4 fef3 	bl	34c4 <GPIO_SetDir>
			_WRITE(X_MAX_PORT, X_MAX_BIT, invert_endstops[X_AXIS]);
    e6de:	f242 53e8 	movw	r3, #9704	; 0x25e8
    e6e2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e6e6:	781b      	ldrb	r3, [r3, #0]
    e6e8:	b133      	cbz	r3, e6f8 <steppers::InitPins()+0x194>
    e6ea:	f04f 0000 	mov.w	r0, #0
    e6ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
    e6f2:	f7f4 fef7 	bl	34e4 <GPIO_SetValue>
    e6f6:	e005      	b.n	e704 <steppers::InitPins()+0x1a0>
    e6f8:	f04f 0000 	mov.w	r0, #0
    e6fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
    e700:	f7f4 fef8 	bl	34f4 <GPIO_ClearValue>
//			_SET_DIRECTION(X_MIN, false);
//			_WRITE(X_MIN, invert_endstops[X_AXIS]);
		}
		
		if ( Y_MAX != NULL){
			GPIO_SetDir(Y_MIN_PORT, Y_MIN_BIT, false);
    e704:	f04f 0001 	mov.w	r0, #1
    e708:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    e70c:	f04f 0200 	mov.w	r2, #0
    e710:	f7f4 fed8 	bl	34c4 <GPIO_SetDir>
			_WRITE(Y_MIN_PORT, Y_MIN_BIT, invert_endstops[X_AXIS]);
    e714:	f242 53e8 	movw	r3, #9704	; 0x25e8
    e718:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e71c:	781b      	ldrb	r3, [r3, #0]
    e71e:	b133      	cbz	r3, e72e <steppers::InitPins()+0x1ca>
    e720:	f04f 0001 	mov.w	r0, #1
    e724:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    e728:	f7f4 fedc 	bl	34e4 <GPIO_SetValue>
    e72c:	e005      	b.n	e73a <steppers::InitPins()+0x1d6>
    e72e:	f04f 0001 	mov.w	r0, #1
    e732:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    e736:	f7f4 fedd 	bl	34f4 <GPIO_ClearValue>
//			_SET_DIRECTION(Y_MAX, false);
//			_WRITE(Y_MAX, invert_endstops[Y_AXIS]);
		}if ( Y_MIN != NULL) {
			GPIO_SetDir(Y_MAX_PORT, Y_MAX_BIT, false);
    e73a:	f04f 0001 	mov.w	r0, #1
    e73e:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    e742:	f04f 0200 	mov.w	r2, #0
    e746:	f7f4 febd 	bl	34c4 <GPIO_SetDir>
			_WRITE(Y_MAX_PORT, Y_MAX_BIT, invert_endstops[X_AXIS]);
    e74a:	f242 53e8 	movw	r3, #9704	; 0x25e8
    e74e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e752:	781b      	ldrb	r3, [r3, #0]
    e754:	b133      	cbz	r3, e764 <steppers::InitPins()+0x200>
    e756:	f04f 0001 	mov.w	r0, #1
    e75a:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    e75e:	f7f4 fec1 	bl	34e4 <GPIO_SetValue>
    e762:	e005      	b.n	e770 <steppers::InitPins()+0x20c>
    e764:	f04f 0001 	mov.w	r0, #1
    e768:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    e76c:	f7f4 fec2 	bl	34f4 <GPIO_ClearValue>
//			_SET_DIRECTION(Y_MIN, false);
//			_WRITE(Y_MIN, invert_endstops[Y_AXIS]);
		}
		
		if ( Z_MAX != NULL){
			GPIO_SetDir(Z_MIN_PORT, Z_MIN_BIT, false);
    e770:	f04f 0001 	mov.w	r0, #1
    e774:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    e778:	f04f 0200 	mov.w	r2, #0
    e77c:	f7f4 fea2 	bl	34c4 <GPIO_SetDir>
			_WRITE(Z_MIN_PORT, Z_MIN_BIT, invert_endstops[X_AXIS]);
    e780:	f242 53e8 	movw	r3, #9704	; 0x25e8
    e784:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e788:	781b      	ldrb	r3, [r3, #0]
    e78a:	b133      	cbz	r3, e79a <steppers::InitPins()+0x236>
    e78c:	f04f 0001 	mov.w	r0, #1
    e790:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    e794:	f7f4 fea6 	bl	34e4 <GPIO_SetValue>
    e798:	e005      	b.n	e7a6 <steppers::InitPins()+0x242>
    e79a:	f04f 0001 	mov.w	r0, #1
    e79e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    e7a2:	f7f4 fea7 	bl	34f4 <GPIO_ClearValue>
//			_SET_DIRECTION(Z_MAX, false);
//			_WRITE(Z_MAX, invert_endstops[Z_AXIS]);
		}if ( Z_MIN != NULL) {
			GPIO_SetDir(Z_MAX_PORT, Z_MAX_BIT, false);
    e7a6:	f04f 0003 	mov.w	r0, #3
    e7aa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    e7ae:	f04f 0200 	mov.w	r2, #0
    e7b2:	f7f4 fe87 	bl	34c4 <GPIO_SetDir>
			_WRITE(Z_MAX_PORT, Z_MAX_BIT, invert_endstops[X_AXIS]);
    e7b6:	f242 53e8 	movw	r3, #9704	; 0x25e8
    e7ba:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e7be:	781b      	ldrb	r3, [r3, #0]
    e7c0:	b133      	cbz	r3, e7d0 <steppers::InitPins()+0x26c>
    e7c2:	f04f 0003 	mov.w	r0, #3
    e7c6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    e7ca:	f7f4 fe8b 	bl	34e4 <GPIO_SetValue>
    e7ce:	e005      	b.n	e7dc <steppers::InitPins()+0x278>
    e7d0:	f04f 0003 	mov.w	r0, #3
    e7d4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    e7d8:	f7f4 fe8c 	bl	34f4 <GPIO_ClearValue>
//			_WRITE(Z_MIN, invert_endstops[Z_AXIS]);
		}
		
		// there are no endstops for the extruder axes
		
		xprintf("// set digi pots to stored default values" " (%s:%d)\n",_F_,_L_);
    e7dc:	f24a 707c 	movw	r0, #42876	; 0xa77c
    e7e0:	f2c0 0002 	movt	r0, #2
    e7e4:	490f      	ldr	r1, [pc, #60]	; (e824 <steppers::InitPins()+0x2c0>)
    e7e6:	f04f 02e9 	mov.w	r2, #233	; 0xe9
    e7ea:	f7f7 fe73 	bl	64d4 <xprintf>
		// set digi pots to stored default values
		for(int i = 0; i < STEPPER_COUNT; i++){
    e7ee:	f04f 0400 	mov.w	r4, #0
			digi_pots[i].init(i);
    e7f2:	f242 55bc 	movw	r5, #9660	; 0x25bc
    e7f6:	f2c1 0500 	movt	r5, #4096	; 0x1000
    e7fa:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    e7fe:	eb05 0040 	add.w	r0, r5, r0, lsl #1
    e802:	b2e1      	uxtb	r1, r4
    e804:	f001 fd62 	bl	102cc <DigiPots::init(unsigned char)>
		
		// there are no endstops for the extruder axes
		
		xprintf("// set digi pots to stored default values" " (%s:%d)\n",_F_,_L_);
		// set digi pots to stored default values
		for(int i = 0; i < STEPPER_COUNT; i++){
    e808:	f104 0401 	add.w	r4, r4, #1
    e80c:	2c04      	cmp	r4, #4
    e80e:	d1f4      	bne.n	e7fa <steppers::InitPins()+0x296>
			digi_pots[i].init(i);
		}
		xprintf("end of InitPins" " (%s:%d)\n",_F_,_L_);
    e810:	f24a 70d8 	movw	r0, #42968	; 0xa7d8
    e814:	f2c0 0002 	movt	r0, #2
    e818:	4902      	ldr	r1, [pc, #8]	; (e824 <steppers::InitPins()+0x2c0>)
    e81a:	f04f 02ee 	mov.w	r2, #238	; 0xee
    e81e:	f7f7 fe59 	bl	64d4 <xprintf>
}
    e822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e824:	0002a7cc 	.word	0x0002a7cc

0000e828 <steppers::ResetCounters()>:

void ResetCounters() {
    e828:	b470      	push	{r4, r5, r6}
    e82a:	f04f 0300 	mov.w	r3, #0

	for(uint8_t i = 0; i < STEPPER_COUNT; i++){
		position[i] = 0;
    e82e:	f242 6500 	movw	r5, #9728	; 0x2600
    e832:	f2c1 0500 	movt	r5, #4096	; 0x1000
    e836:	461a      	mov	r2, r3
		counter[i] = 0;
    e838:	f242 54a4 	movw	r4, #9636	; 0x25a4
    e83c:	f2c1 0400 	movt	r4, #4096	; 0x1000
		delta[i] = 0;
    e840:	f242 6028 	movw	r0, #9768	; 0x2628
    e844:	f2c1 0000 	movt	r0, #4096	; 0x1000
		step_change[i] = 1;
    e848:	f242 6144 	movw	r1, #9796	; 0x2644
    e84c:	f2c1 0100 	movt	r1, #4096	; 0x1000
    e850:	f04f 0601 	mov.w	r6, #1
}

void ResetCounters() {

	for(uint8_t i = 0; i < STEPPER_COUNT; i++){
		position[i] = 0;
    e854:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
		counter[i] = 0;
    e858:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
		delta[i] = 0;
    e85c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		step_change[i] = 1;
    e860:	54ce      	strb	r6, [r1, r3]
    e862:	f103 0301 	add.w	r3, r3, #1
		xprintf("end of InitPins" " (%s:%d)\n",_F_,_L_);
}

void ResetCounters() {

	for(uint8_t i = 0; i < STEPPER_COUNT; i++){
    e866:	2b04      	cmp	r3, #4
    e868:	d1f4      	bne.n	e854 <steppers::ResetCounters()+0x2c>
#if defined(SINGLE_SWITCH_ENDSTOPS) && (SINGLE_SWITCH_ENDSTOPS == 1)
		endstop_play[i] = ENDSTOP_DEFAULT_PLAY;
		endstop_status[i] = ESS_UNKNOWN;
#endif //SINGLE_SWITCH_ENDSTOPS
	}
}
    e86a:	bc70      	pop	{r4, r5, r6}
    e86c:	4770      	bx	lr
    e86e:	bf00      	nop

0000e870 <steppers::reset()>:

void reset(){
    e870:	b508      	push	{r3, lr}

	InitPins();
    e872:	f7ff fe77 	bl	e564 <steppers::InitPins()>
}
    e876:	bd08      	pop	{r3, pc}

0000e878 <steppers::init()>:

//public:
void init() {
    e878:	b510      	push	{r4, lr}
	is_running = false;
    e87a:	f242 6370 	movw	r3, #9840	; 0x2670
    e87e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e882:	f04f 0400 	mov.w	r4, #0
    e886:	701c      	strb	r4, [r3, #0]
	is_homing = false;
    e888:	f242 6314 	movw	r3, #9748	; 0x2614
    e88c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e890:	701c      	strb	r4, [r3, #0]
	
	InitPins();
    e892:	f7ff fe67 	bl	e564 <steppers::InitPins()>
	
	ResetCounters();
    e896:	f7ff ffc7 	bl	e828 <steppers::ResetCounters()>

	timer_counter = 0;
    e89a:	f242 6310 	movw	r3, #9744	; 0x2610
    e89e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e8a2:	601c      	str	r4, [r3, #0]

	current_block = NULL;
    e8a4:	f242 6338 	movw	r3, #9784	; 0x2638
    e8a8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e8ac:	601c      	str	r4, [r3, #0]
    e8ae:	f242 6248 	movw	r2, #9800	; 0x2648
    e8b2:	f2c1 0200 	movt	r2, #4096	; 0x1000
    e8b6:	f102 0308 	add.w	r3, r2, #8

	InitPins();
}

//public:
void init() {
    e8ba:	f102 012c 	add.w	r1, r2, #44	; 0x2c
	timer_counter = 0;

	current_block = NULL;
	
	for (int i = 0; i < 3; i++) {
		feedrate_elements[i] = feedrate_element();
    e8be:	4622      	mov	r2, r4
		feedrate_elements[i].rate = 0;
    e8c0:	f843 2c08 	str.w	r2, [r3, #-8]
		feedrate_elements[i].target = 0;
    e8c4:	601a      	str	r2, [r3, #0]
		feedrate_elements[i].steps = 0;
    e8c6:	f843 2c04 	str.w	r2, [r3, #-4]
    e8ca:	f103 030c 	add.w	r3, r3, #12

	timer_counter = 0;

	current_block = NULL;
	
	for (int i = 0; i < 3; i++) {
    e8ce:	428b      	cmp	r3, r1
    e8d0:	d1f6      	bne.n	e8c0 <steppers::init()+0x48>
		feedrate_elements[i].rate = 0;
		feedrate_elements[i].target = 0;
		feedrate_elements[i].steps = 0;
	}
	
	feedrate_steps_remaining = 0;
    e8d2:	f242 623c 	movw	r2, #9788	; 0x263c
    e8d6:	f2c1 0200 	movt	r2, #4096	; 0x1000
    e8da:	f04f 0300 	mov.w	r3, #0
    e8de:	6013      	str	r3, [r2, #0]
	feedrate = 0;
    e8e0:	f242 626c 	movw	r2, #9836	; 0x266c
    e8e4:	f2c1 0200 	movt	r2, #4096	; 0x1000
    e8e8:	6013      	str	r3, [r2, #0]
	feedrate_inverted = 0;
    e8ea:	f242 6224 	movw	r2, #9764	; 0x2624
    e8ee:	f2c1 0200 	movt	r2, #4096	; 0x1000
    e8f2:	6013      	str	r3, [r2, #0]
	feedrate_dirty = 1;
    e8f4:	f242 6220 	movw	r2, #9760	; 0x2620
    e8f8:	f2c1 0200 	movt	r2, #4096	; 0x1000
    e8fc:	f04f 0101 	mov.w	r1, #1
    e900:	7011      	strb	r1, [r2, #0]
	acceleration_tick_counter = 0;
    e902:	f242 52ec 	movw	r2, #9708	; 0x25ec
    e906:	f2c1 0200 	movt	r2, #4096	; 0x1000
    e90a:	6013      	str	r3, [r2, #0]
	current_feedrate_index = 0;
    e90c:	f242 5298 	movw	r2, #9624	; 0x2598
    e910:	f2c1 0200 	movt	r2, #4096	; 0x1000
    e914:	7013      	strb	r3, [r2, #0]
	acceleration_on = true;
    e916:	f242 5390 	movw	r3, #9616	; 0x2590
    e91a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e91e:	7019      	strb	r1, [r3, #0]
}
    e920:	bd10      	pop	{r4, pc}
    e922:	bf00      	nop

0000e924 <steppers::abort()>:

void abort() {
    e924:	b508      	push	{r3, lr}
	is_running = false;
    e926:	f242 6370 	movw	r3, #9840	; 0x2670
    e92a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e92e:	f04f 0100 	mov.w	r1, #0
    e932:	7019      	strb	r1, [r3, #0]
	is_homing = false;
    e934:	f242 6314 	movw	r3, #9748	; 0x2614
    e938:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e93c:	7019      	strb	r1, [r3, #0]
	timer_counter = 0;
    e93e:	f242 6310 	movw	r3, #9744	; 0x2610
    e942:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e946:	6019      	str	r1, [r3, #0]
	current_block = NULL;
    e948:	f242 6338 	movw	r3, #9784	; 0x2638
    e94c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e950:	6019      	str	r1, [r3, #0]
	feedrate_steps_remaining = 0;
    e952:	f242 633c 	movw	r3, #9788	; 0x263c
    e956:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e95a:	6019      	str	r1, [r3, #0]
	feedrate = 0;
    e95c:	f242 636c 	movw	r3, #9836	; 0x266c
    e960:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e964:	6019      	str	r1, [r3, #0]
	feedrate_inverted = 0;
    e966:	f242 6324 	movw	r3, #9764	; 0x2624
    e96a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e96e:	6019      	str	r1, [r3, #0]
	feedrate_dirty = 1;
    e970:	f242 6320 	movw	r3, #9760	; 0x2620
    e974:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e978:	f04f 0201 	mov.w	r2, #1
    e97c:	701a      	strb	r2, [r3, #0]
	acceleration_tick_counter = 0;
    e97e:	f242 53ec 	movw	r3, #9708	; 0x25ec
    e982:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e986:	6019      	str	r1, [r3, #0]
	current_feedrate_index = 0;
    e988:	f242 5398 	movw	r3, #9624	; 0x2598
    e98c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e990:	7019      	strb	r1, [r3, #0]

	TIM_UpdateMatchValue(LPC_TIM0,TIM_MR0_INT, INTERVAL_IN_MICROSECONDS * 16);
    e992:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    e996:	f44f 6200 	mov.w	r2, #2048	; 0x800
    e99a:	f7f5 f983 	bl	3ca4 <TIM_UpdateMatchValue>
//	OCR3A = INTERVAL_IN_MICROSECONDS * 16;	// TODO: find value
}
    e99e:	bd08      	pop	{r3, pc}

0000e9a0 <steppers::definePosition(Point const&)>:

/// Define current position as given point
void definePosition(const Point& position_in) {
    e9a0:	b570      	push	{r4, r5, r6, lr}
    e9a2:	4606      	mov	r6, r0
	for (int i = 0; i < STEPPER_COUNT; i++) {
    e9a4:	f04f 0400 	mov.w	r4, #0
		position[i] = position_in[i];
    e9a8:	f242 6500 	movw	r5, #9728	; 0x2600
    e9ac:	f2c1 0500 	movt	r5, #4096	; 0x1000
    e9b0:	4630      	mov	r0, r6
    e9b2:	4621      	mov	r1, r4
    e9b4:	f7fe fd9c 	bl	d4f0 <Point::operator[](unsigned int) const>
    e9b8:	6803      	ldr	r3, [r0, #0]
    e9ba:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
//	OCR3A = INTERVAL_IN_MICROSECONDS * 16;	// TODO: find value
}

/// Define current position as given point
void definePosition(const Point& position_in) {
	for (int i = 0; i < STEPPER_COUNT; i++) {
    e9be:	f104 0401 	add.w	r4, r4, #1
    e9c2:	2c04      	cmp	r4, #4
    e9c4:	d1f4      	bne.n	e9b0 <steppers::definePosition(Point const&)+0x10>
		position[i] = position_in[i];
	}
}
    e9c6:	bd70      	pop	{r4, r5, r6, pc}

0000e9c8 <steppers::getPosition()>:

/// Get current position
const Point getPosition() {
    e9c8:	b570      	push	{r4, r5, r6, lr}
    e9ca:	b082      	sub	sp, #8
    e9cc:	4604      	mov	r4, r0
#if STEPPER_COUNT > 3
	return Point(position[0],position[1],position[2],position[3],position[4]);
    e9ce:	f242 6500 	movw	r5, #9728	; 0x2600
    e9d2:	f2c1 0500 	movt	r5, #4096	; 0x1000
    e9d6:	6829      	ldr	r1, [r5, #0]
    e9d8:	686a      	ldr	r2, [r5, #4]
    e9da:	68ab      	ldr	r3, [r5, #8]
    e9dc:	68ee      	ldr	r6, [r5, #12]
    e9de:	692d      	ldr	r5, [r5, #16]
    e9e0:	9600      	str	r6, [sp, #0]
    e9e2:	9501      	str	r5, [sp, #4]
    e9e4:	f7fe fd7a 	bl	d4dc <Point::Point(long, long, long, long, long)>
#else
	return Point(position[0],position[1],position[2]);
#endif
}
    e9e8:	4620      	mov	r0, r4
    e9ea:	b002      	add	sp, #8
    e9ec:	bd70      	pop	{r4, r5, r6, pc}
    e9ee:	bf00      	nop

0000e9f0 <steppers::setHoldZ(bool)>:

void setHoldZ(bool holdZ_in) {
	holdZ = holdZ_in;
    e9f0:	f242 53e4 	movw	r3, #9700	; 0x25e4
    e9f4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    e9f8:	7018      	strb	r0, [r3, #0]
}
    e9fa:	4770      	bx	lr

0000e9fc <steppers::setTarget(Point)>:
	}
	
	feedrate_dirty = 0;
}

void setTarget(Point target_in) {
    e9fc:	b084      	sub	sp, #16
    e9fe:	b538      	push	{r3, r4, r5, lr}
    ea00:	ac04      	add	r4, sp, #16
    ea02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	delta[X_AXIS] = target_in[X_AXIS] - position[X_AXIS];
    ea06:	4620      	mov	r0, r4
    ea08:	f04f 0100 	mov.w	r1, #0
    ea0c:	f7fe fd74 	bl	d4f8 <Point::operator[](unsigned int)>
    ea10:	f242 6500 	movw	r5, #9728	; 0x2600
    ea14:	f2c1 0500 	movt	r5, #4096	; 0x1000
    ea18:	682b      	ldr	r3, [r5, #0]
    ea1a:	6802      	ldr	r2, [r0, #0]
    ea1c:	1ad3      	subs	r3, r2, r3
    ea1e:	f242 6428 	movw	r4, #9768	; 0x2628
    ea22:	f2c1 0400 	movt	r4, #4096	; 0x1000
    ea26:	6023      	str	r3, [r4, #0]
	delta[Y_AXIS] = target_in[Y_AXIS] - position[Y_AXIS];
    ea28:	a804      	add	r0, sp, #16
    ea2a:	f04f 0101 	mov.w	r1, #1
    ea2e:	f7fe fd63 	bl	d4f8 <Point::operator[](unsigned int)>
    ea32:	686b      	ldr	r3, [r5, #4]
    ea34:	6802      	ldr	r2, [r0, #0]
    ea36:	1ad3      	subs	r3, r2, r3
    ea38:	6063      	str	r3, [r4, #4]
	delta[Z_AXIS] = target_in[Z_AXIS] - position[Z_AXIS];
    ea3a:	a804      	add	r0, sp, #16
    ea3c:	f04f 0102 	mov.w	r1, #2
    ea40:	f7fe fd5a 	bl	d4f8 <Point::operator[](unsigned int)>
    ea44:	68ab      	ldr	r3, [r5, #8]
    ea46:	6802      	ldr	r2, [r0, #0]
    ea48:	1ad3      	subs	r3, r2, r3
    ea4a:	60a3      	str	r3, [r4, #8]
	delta[A_AXIS] = target_in[A_AXIS] - position[A_AXIS];
    ea4c:	a804      	add	r0, sp, #16
    ea4e:	f04f 0103 	mov.w	r1, #3
    ea52:	f7fe fd51 	bl	d4f8 <Point::operator[](unsigned int)>
    ea56:	68eb      	ldr	r3, [r5, #12]
    ea58:	6802      	ldr	r2, [r0, #0]
    ea5a:	1ad3      	subs	r3, r2, r3
    ea5c:	60e3      	str	r3, [r4, #12]
	delta[B_AXIS] = target_in[B_AXIS] - position[B_AXIS];
    ea5e:	a804      	add	r0, sp, #16
    ea60:	f04f 0104 	mov.w	r1, #4
    ea64:	f7fe fd48 	bl	d4f8 <Point::operator[](unsigned int)>
    ea68:	692b      	ldr	r3, [r5, #16]
    ea6a:	6802      	ldr	r2, [r0, #0]
    ea6c:	1ad3      	subs	r3, r2, r3
    ea6e:	6123      	str	r3, [r4, #16]

	// The A3982 stepper driver chip has an inverted enable.
	if(delta[X_AXIS] != 0){
    ea70:	6823      	ldr	r3, [r4, #0]
    ea72:	2b00      	cmp	r3, #0
    ea74:	d048      	beq.n	eb08 <steppers::setTarget(Point)+0x10c>
		_WRITE(X_ENABLE_PORT, X_ENABLE_BIT, false);
    ea76:	f04f 0002 	mov.w	r0, #2
    ea7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
    ea7e:	f7f4 fd39 	bl	34f4 <GPIO_ClearValue>
//		_WRITE(X_ENABLE, false);
		if(delta[X_AXIS] < 0){
    ea82:	6823      	ldr	r3, [r4, #0]
    ea84:	2b00      	cmp	r3, #0
    ea86:	da12      	bge.n	eaae <steppers::setTarget(Point)+0xb2>
			delta[X_AXIS] = -delta[X_AXIS];
    ea88:	6822      	ldr	r2, [r4, #0]
    ea8a:	f1c2 0200 	rsb	r2, r2, #0
    ea8e:	6022      	str	r2, [r4, #0]
			direction[X_AXIS] = false;
    ea90:	f242 6340 	movw	r3, #9792	; 0x2640
    ea94:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ea98:	f04f 0200 	mov.w	r2, #0
    ea9c:	701a      	strb	r2, [r3, #0]
			step_change[X_AXIS] = -1;
    ea9e:	f242 6344 	movw	r3, #9796	; 0x2644
    eaa2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    eaa6:	f04f 02ff 	mov.w	r2, #255	; 0xff
    eaaa:	701a      	strb	r2, [r3, #0]
    eaac:	e00b      	b.n	eac6 <steppers::setTarget(Point)+0xca>
		}else{
			direction[X_AXIS] = true;
    eaae:	f242 6340 	movw	r3, #9792	; 0x2640
    eab2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    eab6:	f04f 0201 	mov.w	r2, #1
    eaba:	701a      	strb	r2, [r3, #0]
			step_change[X_AXIS] = 1;
    eabc:	f242 6344 	movw	r3, #9796	; 0x2644
    eac0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    eac4:	701a      	strb	r2, [r3, #0]
			}
		_WRITE(X_DIR_PORT, X_DIR_BIT, invert_axis[X_AXIS] ? !direction[X_AXIS] : direction[X_AXIS]);
    eac6:	f242 631c 	movw	r3, #9756	; 0x261c
    eaca:	f2c1 0300 	movt	r3, #4096	; 0x1000
    eace:	781b      	ldrb	r3, [r3, #0]
    ead0:	b13b      	cbz	r3, eae2 <steppers::setTarget(Point)+0xe6>
    ead2:	f242 6340 	movw	r3, #9792	; 0x2640
    ead6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    eada:	781b      	ldrb	r3, [r3, #0]
    eadc:	f083 0301 	eor.w	r3, r3, #1
    eae0:	e004      	b.n	eaec <steppers::setTarget(Point)+0xf0>
    eae2:	f242 6340 	movw	r3, #9792	; 0x2640
    eae6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    eaea:	781b      	ldrb	r3, [r3, #0]
    eaec:	b133      	cbz	r3, eafc <steppers::setTarget(Point)+0x100>
    eaee:	f04f 0002 	mov.w	r0, #2
    eaf2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    eaf6:	f7f4 fcf5 	bl	34e4 <GPIO_SetValue>
    eafa:	e005      	b.n	eb08 <steppers::setTarget(Point)+0x10c>
    eafc:	f04f 0002 	mov.w	r0, #2
    eb00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    eb04:	f7f4 fcf6 	bl	34f4 <GPIO_ClearValue>
//		_WRITE(X_DIR, invert_axis[X_AXIS] ? !direction[X_AXIS] : direction[X_AXIS]);
	}
	
	if(delta[Y_AXIS] != 0){
    eb08:	f242 6328 	movw	r3, #9768	; 0x2628
    eb0c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    eb10:	685b      	ldr	r3, [r3, #4]
    eb12:	2b00      	cmp	r3, #0
    eb14:	d050      	beq.n	ebb8 <steppers::setTarget(Point)+0x1bc>
		_WRITE(Y_ENABLE_PORT, Y_ENABLE_BIT, false);
    eb16:	f04f 0000 	mov.w	r0, #0
    eb1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
    eb1e:	f7f4 fce9 	bl	34f4 <GPIO_ClearValue>
//		_WRITE(Y_ENABLE, false);
		if(delta[Y_AXIS] < 0){
    eb22:	f242 6328 	movw	r3, #9768	; 0x2628
    eb26:	f2c1 0300 	movt	r3, #4096	; 0x1000
    eb2a:	685b      	ldr	r3, [r3, #4]
    eb2c:	2b00      	cmp	r3, #0
    eb2e:	da16      	bge.n	eb5e <steppers::setTarget(Point)+0x162>
			delta[Y_AXIS] = -delta[Y_AXIS];
    eb30:	f242 6328 	movw	r3, #9768	; 0x2628
    eb34:	f2c1 0300 	movt	r3, #4096	; 0x1000
    eb38:	685a      	ldr	r2, [r3, #4]
    eb3a:	f1c2 0200 	rsb	r2, r2, #0
    eb3e:	605a      	str	r2, [r3, #4]
			direction[Y_AXIS] = false;
    eb40:	f242 6340 	movw	r3, #9792	; 0x2640
    eb44:	f2c1 0300 	movt	r3, #4096	; 0x1000
    eb48:	f04f 0200 	mov.w	r2, #0
    eb4c:	705a      	strb	r2, [r3, #1]
			step_change[Y_AXIS] = -1;
    eb4e:	f242 6344 	movw	r3, #9796	; 0x2644
    eb52:	f2c1 0300 	movt	r3, #4096	; 0x1000
    eb56:	f04f 02ff 	mov.w	r2, #255	; 0xff
    eb5a:	705a      	strb	r2, [r3, #1]
    eb5c:	e00b      	b.n	eb76 <steppers::setTarget(Point)+0x17a>
		}else{
			direction[Y_AXIS] = true;
    eb5e:	f242 6340 	movw	r3, #9792	; 0x2640
    eb62:	f2c1 0300 	movt	r3, #4096	; 0x1000
    eb66:	f04f 0201 	mov.w	r2, #1
    eb6a:	705a      	strb	r2, [r3, #1]
			step_change[Y_AXIS] = 1;
    eb6c:	f242 6344 	movw	r3, #9796	; 0x2644
    eb70:	f2c1 0300 	movt	r3, #4096	; 0x1000
    eb74:	705a      	strb	r2, [r3, #1]
			}
		_WRITE(Y_DIR_PORT, Y_DIR_BIT, invert_axis[Y_AXIS] ? !direction[Y_AXIS] : direction[Y_AXIS]);
    eb76:	f242 631c 	movw	r3, #9756	; 0x261c
    eb7a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    eb7e:	785b      	ldrb	r3, [r3, #1]
    eb80:	b13b      	cbz	r3, eb92 <steppers::setTarget(Point)+0x196>
    eb82:	f242 6340 	movw	r3, #9792	; 0x2640
    eb86:	f2c1 0300 	movt	r3, #4096	; 0x1000
    eb8a:	785b      	ldrb	r3, [r3, #1]
    eb8c:	f083 0301 	eor.w	r3, r3, #1
    eb90:	e004      	b.n	eb9c <steppers::setTarget(Point)+0x1a0>
    eb92:	f242 6340 	movw	r3, #9792	; 0x2640
    eb96:	f2c1 0300 	movt	r3, #4096	; 0x1000
    eb9a:	785b      	ldrb	r3, [r3, #1]
    eb9c:	b133      	cbz	r3, ebac <steppers::setTarget(Point)+0x1b0>
    eb9e:	f04f 0001 	mov.w	r0, #1
    eba2:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    eba6:	f7f4 fc9d 	bl	34e4 <GPIO_SetValue>
    ebaa:	e005      	b.n	ebb8 <steppers::setTarget(Point)+0x1bc>
    ebac:	f04f 0001 	mov.w	r0, #1
    ebb0:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    ebb4:	f7f4 fc9e 	bl	34f4 <GPIO_ClearValue>
//		_WRITE(Y_DIR, invert_axis[Y_AXIS] ? !direction[Y_AXIS] : direction[Y_AXIS]);
	}
	
	if(delta[Z_AXIS] != 0){
    ebb8:	f242 6328 	movw	r3, #9768	; 0x2628
    ebbc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ebc0:	689b      	ldr	r3, [r3, #8]
    ebc2:	2b00      	cmp	r3, #0
    ebc4:	d050      	beq.n	ec68 <steppers::setTarget(Point)+0x26c>
		_WRITE(Z_ENABLE_PORT, Z_ENABLE_BIT, false);
    ebc6:	f04f 0001 	mov.w	r0, #1
    ebca:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    ebce:	f7f4 fc91 	bl	34f4 <GPIO_ClearValue>
//		_WRITE(Z_ENABLE, false);
		if(delta[Z_AXIS] < 0){
    ebd2:	f242 6328 	movw	r3, #9768	; 0x2628
    ebd6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ebda:	689b      	ldr	r3, [r3, #8]
    ebdc:	2b00      	cmp	r3, #0
    ebde:	da16      	bge.n	ec0e <steppers::setTarget(Point)+0x212>
			delta[Z_AXIS] = -delta[Z_AXIS];
    ebe0:	f242 6328 	movw	r3, #9768	; 0x2628
    ebe4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ebe8:	689a      	ldr	r2, [r3, #8]
    ebea:	f1c2 0200 	rsb	r2, r2, #0
    ebee:	609a      	str	r2, [r3, #8]
			direction[Z_AXIS] = false;
    ebf0:	f242 6340 	movw	r3, #9792	; 0x2640
    ebf4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ebf8:	f04f 0200 	mov.w	r2, #0
    ebfc:	709a      	strb	r2, [r3, #2]
			step_change[Z_AXIS] = -1;
    ebfe:	f242 6344 	movw	r3, #9796	; 0x2644
    ec02:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ec06:	f04f 02ff 	mov.w	r2, #255	; 0xff
    ec0a:	709a      	strb	r2, [r3, #2]
    ec0c:	e00b      	b.n	ec26 <steppers::setTarget(Point)+0x22a>
		}else{
			direction[Z_AXIS] = true;
    ec0e:	f242 6340 	movw	r3, #9792	; 0x2640
    ec12:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ec16:	f04f 0201 	mov.w	r2, #1
    ec1a:	709a      	strb	r2, [r3, #2]
			step_change[Z_AXIS] = 1;
    ec1c:	f242 6344 	movw	r3, #9796	; 0x2644
    ec20:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ec24:	709a      	strb	r2, [r3, #2]
			}
		_WRITE(Z_DIR_PORT, Z_DIR_BIT, invert_axis[Z_AXIS] ? !direction[Z_AXIS] : direction[Z_AXIS]);
    ec26:	f242 631c 	movw	r3, #9756	; 0x261c
    ec2a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ec2e:	789b      	ldrb	r3, [r3, #2]
    ec30:	b13b      	cbz	r3, ec42 <steppers::setTarget(Point)+0x246>
    ec32:	f242 6340 	movw	r3, #9792	; 0x2640
    ec36:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ec3a:	789b      	ldrb	r3, [r3, #2]
    ec3c:	f083 0301 	eor.w	r3, r3, #1
    ec40:	e004      	b.n	ec4c <steppers::setTarget(Point)+0x250>
    ec42:	f242 6340 	movw	r3, #9792	; 0x2640
    ec46:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ec4a:	789b      	ldrb	r3, [r3, #2]
    ec4c:	b133      	cbz	r3, ec5c <steppers::setTarget(Point)+0x260>
    ec4e:	f04f 0001 	mov.w	r0, #1
    ec52:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    ec56:	f7f4 fc45 	bl	34e4 <GPIO_SetValue>
    ec5a:	e005      	b.n	ec68 <steppers::setTarget(Point)+0x26c>
    ec5c:	f04f 0001 	mov.w	r0, #1
    ec60:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    ec64:	f7f4 fc46 	bl	34f4 <GPIO_ClearValue>
//		_WRITE(Z_DIR, invert_axis[Z_AXIS] ? !direction[Z_AXIS] : direction[Z_AXIS]);
	}
	

#if STEPPER_COUNT > 3
	if(delta[A_AXIS] != 0){
    ec68:	f242 6328 	movw	r3, #9768	; 0x2628
    ec6c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ec70:	68db      	ldr	r3, [r3, #12]
    ec72:	2b00      	cmp	r3, #0
    ec74:	d050      	beq.n	ed18 <steppers::setTarget(Point)+0x31c>
		_WRITE(A_ENABLE_PORT, A_ENABLE_BIT, false);
    ec76:	f04f 0001 	mov.w	r0, #1
    ec7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    ec7e:	f7f4 fc39 	bl	34f4 <GPIO_ClearValue>
//		_WRITE(A_ENABLE, false);
		if(delta[A_AXIS] < 0){
    ec82:	f242 6328 	movw	r3, #9768	; 0x2628
    ec86:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ec8a:	68db      	ldr	r3, [r3, #12]
    ec8c:	2b00      	cmp	r3, #0
    ec8e:	da16      	bge.n	ecbe <steppers::setTarget(Point)+0x2c2>
			delta[A_AXIS] = -delta[A_AXIS];
    ec90:	f242 6328 	movw	r3, #9768	; 0x2628
    ec94:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ec98:	68da      	ldr	r2, [r3, #12]
    ec9a:	f1c2 0200 	rsb	r2, r2, #0
    ec9e:	60da      	str	r2, [r3, #12]
			direction[A_AXIS] = false;
    eca0:	f242 6340 	movw	r3, #9792	; 0x2640
    eca4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    eca8:	f04f 0200 	mov.w	r2, #0
    ecac:	70da      	strb	r2, [r3, #3]
			step_change[A_AXIS] = -1;
    ecae:	f242 6344 	movw	r3, #9796	; 0x2644
    ecb2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ecb6:	f04f 02ff 	mov.w	r2, #255	; 0xff
    ecba:	70da      	strb	r2, [r3, #3]
    ecbc:	e00b      	b.n	ecd6 <steppers::setTarget(Point)+0x2da>
		}else{
			direction[A_AXIS] = true;
    ecbe:	f242 6340 	movw	r3, #9792	; 0x2640
    ecc2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ecc6:	f04f 0201 	mov.w	r2, #1
    ecca:	70da      	strb	r2, [r3, #3]
			step_change[A_AXIS] = 1;
    eccc:	f242 6344 	movw	r3, #9796	; 0x2644
    ecd0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ecd4:	70da      	strb	r2, [r3, #3]
			}
		_WRITE(A_DIR_PORT, A_DIR_BIT, invert_axis[A_AXIS] ? !direction[A_AXIS] : direction[A_AXIS]);
    ecd6:	f242 631c 	movw	r3, #9756	; 0x261c
    ecda:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ecde:	78db      	ldrb	r3, [r3, #3]
    ece0:	b13b      	cbz	r3, ecf2 <steppers::setTarget(Point)+0x2f6>
    ece2:	f242 6340 	movw	r3, #9792	; 0x2640
    ece6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ecea:	78db      	ldrb	r3, [r3, #3]
    ecec:	f083 0301 	eor.w	r3, r3, #1
    ecf0:	e004      	b.n	ecfc <steppers::setTarget(Point)+0x300>
    ecf2:	f242 6340 	movw	r3, #9792	; 0x2640
    ecf6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ecfa:	78db      	ldrb	r3, [r3, #3]
    ecfc:	b133      	cbz	r3, ed0c <steppers::setTarget(Point)+0x310>
    ecfe:	f04f 0001 	mov.w	r0, #1
    ed02:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    ed06:	f7f4 fbed 	bl	34e4 <GPIO_SetValue>
    ed0a:	e005      	b.n	ed18 <steppers::setTarget(Point)+0x31c>
    ed0c:	f04f 0001 	mov.w	r0, #1
    ed10:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    ed14:	f7f4 fbee 	bl	34f4 <GPIO_ClearValue>
		_WRITE(B_DIR_PORT, B_DIR_BIT, invert_axis[B_AXIS] ? !direction[B_AXIS] : direction[B_AXIS]);
//		_WRITE(B_DIR, invert_axis[B_AXIS] ? !direction[B_AXIS] : direction[B_AXIS]);
	}
#endif	

}
    ed18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ed1c:	b004      	add	sp, #16
    ed1e:	4770      	bx	lr

0000ed20 <steppers::getNextMove()>:


/// load up the next movement
/// WARNING: called from inside the ISR, so get out fast
bool getNextMove() {
    ed20:	b5f0      	push	{r4, r5, r6, r7, lr}
    ed22:	b08f      	sub	sp, #60	; 0x3c
	DEBUG_LED3.setValue(true);
    ed24:	a802      	add	r0, sp, #8
    ed26:	f242 51b4 	movw	r1, #9652	; 0x25b4
    ed2a:	f2c1 0100 	movt	r1, #4096	; 0x1000
    ed2e:	f04f 0215 	mov.w	r2, #21
    ed32:	f002 f9d3 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    ed36:	f89d 3009 	ldrb.w	r3, [sp, #9]
    ed3a:	b94b      	cbnz	r3, ed50 <steppers::getNextMove()+0x30>
//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    ed3c:	f89d 300a 	ldrb.w	r3, [sp, #10]
    ed40:	f89d 0008 	ldrb.w	r0, [sp, #8]
    ed44:	f04f 0101 	mov.w	r1, #1
    ed48:	fa01 f103 	lsl.w	r1, r1, r3
    ed4c:	f7f4 fbca 	bl	34e4 <GPIO_SetValue>
//	xprintf("getNextMove" " (%s:%d)\n",_F_,_L_);
	is_running = false; // this ensures that the interrupt does not .. interrupt us
    ed50:	f242 6370 	movw	r3, #9840	; 0x2670
    ed54:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ed58:	f04f 0200 	mov.w	r2, #0
    ed5c:	701a      	strb	r2, [r3, #0]

	if (current_block != NULL) {
    ed5e:	f242 6338 	movw	r3, #9784	; 0x2638
    ed62:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ed66:	681b      	ldr	r3, [r3, #0]
    ed68:	b173      	cbz	r3, ed88 <steppers::getNextMove()+0x68>
		current_block->flags &= ~planner::Block::Busy;
    ed6a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
    ed6e:	f022 0201 	bic.w	r2, r2, #1
    ed72:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		planner::doneWithNextBlock();
    ed76:	f7fd fd6d 	bl	c854 <planner::doneWithNextBlock()>
		current_block = NULL;
    ed7a:	f242 6338 	movw	r3, #9784	; 0x2638
    ed7e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ed82:	f04f 0200 	mov.w	r2, #0
    ed86:	601a      	str	r2, [r3, #0]
	}

	if (!planner::isReady()) {
    ed88:	f7fd fd44 	bl	c814 <planner::isReady()>
    ed8c:	b960      	cbnz	r0, eda8 <steppers::getNextMove()+0x88>
		is_running = !planner::isBufferEmpty();
    ed8e:	f7fd fd35 	bl	c7fc <planner::isBufferEmpty()>
    ed92:	f080 0001 	eor.w	r0, r0, #1
    ed96:	b2c0      	uxtb	r0, r0
    ed98:	f242 6370 	movw	r3, #9840	; 0x2670
    ed9c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    eda0:	7018      	strb	r0, [r3, #0]
		return false;
    eda2:	f04f 0000 	mov.w	r0, #0
    eda6:	e1c9      	b.n	f13c <steppers::getNextMove()+0x41c>
	}

	current_block = planner::getNextBlock();
    eda8:	f7fd fd48 	bl	c83c <planner::getNextBlock()>
    edac:	f242 6438 	movw	r4, #9784	; 0x2638
    edb0:	f2c1 0400 	movt	r4, #4096	; 0x1000
    edb4:	6020      	str	r0, [r4, #0]

	// Mark block as busy (being executed by the stepper interrupt)
	// Also mark it a locked
	current_block->flags |= planner::Block::Busy | planner::Block::Locked;
    edb6:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
    edba:	f043 0321 	orr.w	r3, r3, #33	; 0x21
    edbe:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48

	Point &target = current_block->target;

	int32_t max_delta = current_block->step_event_count;
    edc2:	8a85      	ldrh	r5, [r0, #20]
	
	setTarget(target);
    edc4:	6806      	ldr	r6, [r0, #0]
    edc6:	6841      	ldr	r1, [r0, #4]
    edc8:	6882      	ldr	r2, [r0, #8]
    edca:	68c3      	ldr	r3, [r0, #12]
    edcc:	6900      	ldr	r0, [r0, #16]
    edce:	9000      	str	r0, [sp, #0]
    edd0:	4630      	mov	r0, r6
    edd2:	f7ff fe13 	bl	e9fc <steppers::setTarget(Point)>
	
	current_feedrate_index = 0;
    edd6:	f242 5398 	movw	r3, #9624	; 0x2598
    edda:	f2c1 0300 	movt	r3, #4096	; 0x1000
    edde:	f04f 0200 	mov.w	r2, #0
    ede2:	701a      	strb	r2, [r3, #0]
	int feedrate_being_setup = 0;
	// setup acceleration
	feedrate = 0;
    ede4:	f242 636c 	movw	r3, #9836	; 0x266c
    ede8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    edec:	601a      	str	r2, [r3, #0]
	if (current_block->accelerate_until > 0) {
    edee:	6823      	ldr	r3, [r4, #0]
    edf0:	8ad9      	ldrh	r1, [r3, #22]
	int32_t max_delta = current_block->step_event_count;
	
	setTarget(target);
	
	current_feedrate_index = 0;
	int feedrate_being_setup = 0;
    edf2:	f04f 0400 	mov.w	r4, #0
	// setup acceleration
	feedrate = 0;
	if (current_block->accelerate_until > 0) {
    edf6:	b181      	cbz	r1, ee1a <steppers::getNextMove()+0xfa>

		feedrate = current_block->initial_rate;
    edf8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    edfa:	f242 626c 	movw	r2, #9836	; 0x266c
    edfe:	f2c1 0200 	movt	r2, #4096	; 0x1000
    ee02:	6010      	str	r0, [r2, #0]

		feedrate_elements[feedrate_being_setup].steps     = current_block->accelerate_until;
    ee04:	f242 6248 	movw	r2, #9800	; 0x2648
    ee08:	f2c1 0200 	movt	r2, #4096	; 0x1000
    ee0c:	6051      	str	r1, [r2, #4]
		feedrate_elements[feedrate_being_setup].rate      = current_block->acceleration_rate;
    ee0e:	69d9      	ldr	r1, [r3, #28]
    ee10:	6011      	str	r1, [r2, #0]
		feedrate_elements[feedrate_being_setup].target    = current_block->nominal_rate;
    ee12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    ee14:	6093      	str	r3, [r2, #8]
		feedrate_being_setup++;
    ee16:	f04f 0401 	mov.w	r4, #1

	}

	DEBUG_LED2.setValue(true);
    ee1a:	a804      	add	r0, sp, #16
    ee1c:	f242 51b4 	movw	r1, #9652	; 0x25b4
    ee20:	f2c1 0100 	movt	r1, #4096	; 0x1000
    ee24:	f04f 0214 	mov.w	r2, #20
    ee28:	f002 f958 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    ee2c:	f89d 3011 	ldrb.w	r3, [sp, #17]
    ee30:	b94b      	cbnz	r3, ee46 <steppers::getNextMove()+0x126>
//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    ee32:	f89d 3012 	ldrb.w	r3, [sp, #18]
    ee36:	f89d 0010 	ldrb.w	r0, [sp, #16]
    ee3a:	f04f 0101 	mov.w	r1, #1
    ee3e:	fa01 f103 	lsl.w	r1, r1, r3
    ee42:	f7f4 fb4f 	bl	34e4 <GPIO_SetValue>
	// setup plateau
	if (current_block->decelerate_after > current_block->accelerate_until) {
    ee46:	f242 6338 	movw	r3, #9784	; 0x2638
    ee4a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ee4e:	681b      	ldr	r3, [r3, #0]
    ee50:	8b18      	ldrh	r0, [r3, #24]
    ee52:	8ad9      	ldrh	r1, [r3, #22]
    ee54:	4288      	cmp	r0, r1
    ee56:	d918      	bls.n	ee8a <steppers::getNextMove()+0x16a>
		if (feedrate_being_setup == 0)
    ee58:	b92c      	cbnz	r4, ee66 <steppers::getNextMove()+0x146>
			feedrate = current_block->nominal_rate;
    ee5a:	6b9e      	ldr	r6, [r3, #56]	; 0x38
    ee5c:	f242 626c 	movw	r2, #9836	; 0x266c
    ee60:	f2c1 0200 	movt	r2, #4096	; 0x1000
    ee64:	6016      	str	r6, [r2, #0]
			
		feedrate_elements[feedrate_being_setup].steps     = current_block->decelerate_after - current_block->accelerate_until;
    ee66:	f242 6248 	movw	r2, #9800	; 0x2648
    ee6a:	f2c1 0200 	movt	r2, #4096	; 0x1000
    ee6e:	eb04 0744 	add.w	r7, r4, r4, lsl #1
    ee72:	ea4f 0787 	mov.w	r7, r7, lsl #2
    ee76:	19d6      	adds	r6, r2, r7
    ee78:	1a41      	subs	r1, r0, r1
    ee7a:	6071      	str	r1, [r6, #4]
		feedrate_elements[feedrate_being_setup].rate      = 0;
    ee7c:	f04f 0100 	mov.w	r1, #0
    ee80:	51d1      	str	r1, [r2, r7]
		feedrate_elements[feedrate_being_setup].target    = current_block->nominal_rate;
    ee82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    ee84:	60b3      	str	r3, [r6, #8]
		feedrate_being_setup++;
    ee86:	f104 0401 	add.w	r4, r4, #1
	}


	DEBUG_LED1.setValue(true);
    ee8a:	a806      	add	r0, sp, #24
    ee8c:	f242 51b4 	movw	r1, #9652	; 0x25b4
    ee90:	f2c1 0100 	movt	r1, #4096	; 0x1000
    ee94:	f04f 0212 	mov.w	r2, #18
    ee98:	f002 f920 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    ee9c:	f89d 3019 	ldrb.w	r3, [sp, #25]
    eea0:	b94b      	cbnz	r3, eeb6 <steppers::getNextMove()+0x196>
//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    eea2:	f89d 301a 	ldrb.w	r3, [sp, #26]
    eea6:	f89d 0018 	ldrb.w	r0, [sp, #24]
    eeaa:	f04f 0101 	mov.w	r1, #1
    eeae:	fa01 f103 	lsl.w	r1, r1, r3
    eeb2:	f7f4 fb17 	bl	34e4 <GPIO_SetValue>
	// setup deceleration
	if (current_block->decelerate_after < current_block->step_event_count) {
    eeb6:	f242 6338 	movw	r3, #9784	; 0x2638
    eeba:	f2c1 0300 	movt	r3, #4096	; 0x1000
    eebe:	681b      	ldr	r3, [r3, #0]
    eec0:	8b19      	ldrh	r1, [r3, #24]
    eec2:	8a9a      	ldrh	r2, [r3, #20]
    eec4:	4291      	cmp	r1, r2
    eec6:	d219      	bcs.n	eefc <steppers::getNextMove()+0x1dc>
		if (feedrate_being_setup == 0)
    eec8:	b92c      	cbnz	r4, eed6 <steppers::getNextMove()+0x1b6>
			feedrate = current_block->initial_rate;
    eeca:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    eecc:	f242 626c 	movw	r2, #9836	; 0x266c
    eed0:	f2c1 0200 	movt	r2, #4096	; 0x1000
    eed4:	6011      	str	r1, [r2, #0]
		// To prevent "falling off the end" we will say we have a "bazillion" steps left...
		feedrate_elements[feedrate_being_setup].steps     = INT16_MAX; //current_block->step_event_count - current_block->decelerate_after;
    eed6:	f242 6248 	movw	r2, #9800	; 0x2648
    eeda:	f2c1 0200 	movt	r2, #4096	; 0x1000
    eede:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    eee2:	ea4f 0484 	mov.w	r4, r4, lsl #2
    eee6:	1911      	adds	r1, r2, r4
    eee8:	f647 70ff 	movw	r0, #32767	; 0x7fff
    eeec:	6048      	str	r0, [r1, #4]
		feedrate_elements[feedrate_being_setup].rate      = -current_block->acceleration_rate;
    eeee:	69d8      	ldr	r0, [r3, #28]
    eef0:	f1c0 0000 	rsb	r0, r0, #0
    eef4:	5110      	str	r0, [r2, r4]
		feedrate_elements[feedrate_being_setup].target    = current_block->final_rate;
    eef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    eef8:	608b      	str	r3, [r1, #8]
    eefa:	e00c      	b.n	ef16 <steppers::getNextMove()+0x1f6>
	
	} else {
		// and in case there wasn't a deceleration phase, we'll do the same for whichever phase was last...
		feedrate_elements[feedrate_being_setup-1].steps     = INT16_MAX;
    eefc:	f242 6348 	movw	r3, #9800	; 0x2648
    ef00:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ef04:	f104 34ff 	add.w	r4, r4, #4294967295
    ef08:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    ef0c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    ef10:	f647 72ff 	movw	r2, #32767	; 0x7fff
    ef14:	605a      	str	r2, [r3, #4]
		// We don't setup anything else because we limit to the target speed anyway.
	}

	DEBUG_LED1.setValue(false);
    ef16:	a808      	add	r0, sp, #32
    ef18:	f242 51b4 	movw	r1, #9652	; 0x25b4
    ef1c:	f2c1 0100 	movt	r1, #4096	; 0x1000
    ef20:	f04f 0212 	mov.w	r2, #18
    ef24:	f002 f8da 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    ef28:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    ef2c:	b94b      	cbnz	r3, ef42 <steppers::getNextMove()+0x222>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    ef2e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    ef32:	f89d 0020 	ldrb.w	r0, [sp, #32]
    ef36:	f04f 0101 	mov.w	r1, #1
    ef3a:	fa01 f103 	lsl.w	r1, r1, r3
    ef3e:	f7f4 fad9 	bl	34f4 <GPIO_ClearValue>
	current_block->flags &= ~planner::Block::Locked;
    ef42:	f242 6338 	movw	r3, #9784	; 0x2638
    ef46:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ef4a:	681b      	ldr	r3, [r3, #0]
    ef4c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
    ef50:	f022 0220 	bic.w	r2, r2, #32
    ef54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	DEBUG_LED2.setValue(false);
    ef58:	a80a      	add	r0, sp, #40	; 0x28
    ef5a:	f242 51b4 	movw	r1, #9652	; 0x25b4
    ef5e:	f2c1 0100 	movt	r1, #4096	; 0x1000
    ef62:	f04f 0214 	mov.w	r2, #20
    ef66:	f002 f8b9 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    ef6a:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    ef6e:	b94b      	cbnz	r3, ef84 <steppers::getNextMove()+0x264>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    ef70:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
    ef74:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
    ef78:	f04f 0101 	mov.w	r1, #1
    ef7c:	fa01 f103 	lsl.w	r1, r1, r3
    ef80:	f7f4 fab8 	bl	34f4 <GPIO_ClearValue>

	if (feedrate == 0) {
    ef84:	f242 636c 	movw	r3, #9836	; 0x266c
    ef88:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ef8c:	681b      	ldr	r3, [r3, #0]
    ef8e:	b93b      	cbnz	r3, efa0 <steppers::getNextMove()+0x280>
		is_running = false;
    ef90:	f242 6370 	movw	r3, #9840	; 0x2670
    ef94:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ef98:	f04f 0000 	mov.w	r0, #0
    ef9c:	7018      	strb	r0, [r3, #0]
		return false;
    ef9e:	e0cd      	b.n	f13c <steppers::getNextMove()+0x41c>
void setHoldZ(bool holdZ_in) {
	holdZ = holdZ_in;
}

inline void prepareFeedrateIntervals() {
	if (current_feedrate_index > 2){
    efa0:	f242 5398 	movw	r3, #9624	; 0x2598
    efa4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    efa8:	781b      	ldrb	r3, [r3, #0]
    efaa:	2b02      	cmp	r3, #2
    efac:	d827      	bhi.n	effe <steppers::getNextMove()+0x2de>
		return;
	}

	feedrate_steps_remaining  = feedrate_elements[current_feedrate_index].steps;
    efae:	f242 5298 	movw	r2, #9624	; 0x2598
    efb2:	f2c1 0200 	movt	r2, #4096	; 0x1000
    efb6:	7811      	ldrb	r1, [r2, #0]
    efb8:	f242 6348 	movw	r3, #9800	; 0x2648
    efbc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    efc0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    efc4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    efc8:	6848      	ldr	r0, [r1, #4]
    efca:	f242 613c 	movw	r1, #9788	; 0x263c
    efce:	f2c1 0100 	movt	r1, #4096	; 0x1000
    efd2:	6008      	str	r0, [r1, #0]
	feedrate_changerate       = feedrate_elements[current_feedrate_index].rate;
    efd4:	7811      	ldrb	r1, [r2, #0]
    efd6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    efda:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
    efde:	f242 519c 	movw	r1, #9628	; 0x259c
    efe2:	f2c1 0100 	movt	r1, #4096	; 0x1000
    efe6:	6008      	str	r0, [r1, #0]
	feedrate_target           = feedrate_elements[current_feedrate_index].target;
    efe8:	7812      	ldrb	r2, [r2, #0]
    efea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    efee:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    eff2:	689a      	ldr	r2, [r3, #8]
    eff4:	f242 5394 	movw	r3, #9620	; 0x2594
    eff8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    effc:	601a      	str	r2, [r3, #0]
}

inline void recalcFeedrate() {
	
	if((feedrate > 32768)){
    effe:	f242 636c 	movw	r3, #9836	; 0x266c
    f002:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f006:	681b      	ldr	r3, [r3, #0]
    f008:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    f00c:	dd07      	ble.n	f01e <steppers::getNextMove()+0x2fe>
		feedrate_inverted = 30;
    f00e:	f242 6324 	movw	r3, #9764	; 0x2624
    f012:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f016:	f04f 021e 	mov.w	r2, #30
    f01a:	601a      	str	r2, [r3, #0]
    f01c:	e038      	b.n	f090 <steppers::getNextMove()+0x370>
	}
	else if(feedrate >= 8192)
    f01e:	f242 636c 	movw	r3, #9836	; 0x266c
    f022:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f026:	681b      	ldr	r3, [r3, #0]
    f028:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    f02c:	db13      	blt.n	f056 <steppers::getNextMove()+0x336>
		feedrate_inverted = rate_table_fast[(feedrate-8192) >> 4];
    f02e:	f242 636c 	movw	r3, #9836	; 0x266c
    f032:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f036:	681a      	ldr	r2, [r3, #0]
    f038:	f24a 73f4 	movw	r3, #42996	; 0xa7f4
    f03c:	f2c0 0302 	movt	r3, #2
    f040:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
    f044:	ea4f 1222 	mov.w	r2, r2, asr #4
    f048:	5c9a      	ldrb	r2, [r3, r2]
    f04a:	f242 6324 	movw	r3, #9764	; 0x2624
    f04e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f052:	601a      	str	r2, [r3, #0]
    f054:	e01c      	b.n	f090 <steppers::getNextMove()+0x370>
//		feedrate_inverted = (int32_t)pgm_read_byte(&rate_table_fast[(feedrate-8192) >> 4]);
	else {
		if(feedrate < 32) {feedrate = 32;}
    f056:	f242 636c 	movw	r3, #9836	; 0x266c
    f05a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f05e:	681b      	ldr	r3, [r3, #0]
    f060:	2b1f      	cmp	r3, #31
    f062:	bfdf      	itttt	le
    f064:	f242 636c 	movwle	r3, #9836	; 0x266c
    f068:	f2c1 0300 	movtle	r3, #4096	; 0x1000
    f06c:	2220      	movle	r2, #32
    f06e:	601a      	strle	r2, [r3, #0]
		feedrate_inverted = rate_table_slow[feedrate];
    f070:	f242 636c 	movw	r3, #9836	; 0x266c
    f074:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f078:	681a      	ldr	r2, [r3, #0]
    f07a:	f246 737c 	movw	r3, #26492	; 0x677c
    f07e:	f2c0 0302 	movt	r3, #2
    f082:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
    f086:	f242 6324 	movw	r3, #9764	; 0x2624
    f08a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f08e:	601a      	str	r2, [r3, #0]
//		feedrate_inverted = (int32_t)pgm_read_word(&rate_table_slow[feedrate]);
	}
	
	feedrate_dirty = 0;
    f090:	f242 6320 	movw	r3, #9760	; 0x2620
    f094:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f098:	f04f 0200 	mov.w	r2, #0
    f09c:	701a      	strb	r2, [r3, #0]
		return false;
	}

	prepareFeedrateIntervals();
	recalcFeedrate();
	acceleration_tick_counter = TICKS_PER_ACCELERATION;
    f09e:	f242 53ec 	movw	r3, #9708	; 0x25ec
    f0a2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f0a6:	f04f 0101 	mov.w	r1, #1
    f0aa:	6019      	str	r1, [r3, #0]

	timer_counter = 0;
    f0ac:	f242 6310 	movw	r3, #9744	; 0x2610
    f0b0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f0b4:	601a      	str	r2, [r3, #0]


	intervals = max_delta;
    f0b6:	f242 5388 	movw	r3, #9608	; 0x2588
    f0ba:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f0be:	601d      	str	r5, [r3, #0]
	intervals_remaining = intervals;
    f0c0:	6818      	ldr	r0, [r3, #0]
    f0c2:	f242 6218 	movw	r2, #9752	; 0x2618
    f0c6:	f2c1 0200 	movt	r2, #4096	; 0x1000
    f0ca:	6010      	str	r0, [r2, #0]
	const int32_t negative_half_interval = -(intervals>>1);
    f0cc:	681a      	ldr	r2, [r3, #0]
    f0ce:	fa42 f201 	asr.w	r2, r2, r1
    f0d2:	f1c2 0200 	rsb	r2, r2, #0
	counter[X_AXIS] = negative_half_interval;
    f0d6:	f242 53a4 	movw	r3, #9636	; 0x25a4
    f0da:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f0de:	601a      	str	r2, [r3, #0]
	counter[Y_AXIS] = negative_half_interval;
    f0e0:	605a      	str	r2, [r3, #4]
	counter[Z_AXIS] = negative_half_interval;
    f0e2:	609a      	str	r2, [r3, #8]
#if STEPPER_COUNT > 3
	counter[A_AXIS] = negative_half_interval;
    f0e4:	60da      	str	r2, [r3, #12]
#endif
#if STEPPER_COUNT > 4
	counter[B_AXIS] = negative_half_interval;
#endif
	is_running = true;
    f0e6:	f242 6370 	movw	r3, #9840	; 0x2670
    f0ea:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f0ee:	7019      	strb	r1, [r3, #0]
	
	if(delta[Z_AXIS] > ZSTEPS_PER_MM*10){
    f0f0:	f242 6328 	movw	r3, #9768	; 0x2628
    f0f4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f0f8:	689b      	ldr	r3, [r3, #8]
		TIM_UpdateMatchValue(LPC_TIM0,TIM_MR0_INT, HOMING_INTERVAL_IN_MICROSECONDS * 16);
//		OCR3A = HOMING_INTERVAL_IN_MICROSECONDS * 16;	//TODO find value for this
	} else {
		TIM_UpdateMatchValue(LPC_TIM0,TIM_MR0_INT, INTERVAL_IN_MICROSECONDS * 16);
    f0fa:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    f0fe:	f04f 0100 	mov.w	r1, #0
    f102:	f44f 6200 	mov.w	r2, #2048	; 0x800
    f106:	f7f4 fdcd 	bl	3ca4 <TIM_UpdateMatchValue>
//		OCR3A = INTERVAL_IN_MICROSECONDS * 16;	//TODO find value for this
	}

	DEBUG_LED3.setValue(false);
    f10a:	a80c      	add	r0, sp, #48	; 0x30
    f10c:	f242 51b4 	movw	r1, #9652	; 0x25b4
    f110:	f2c1 0100 	movt	r1, #4096	; 0x1000
    f114:	f04f 0215 	mov.w	r2, #21
    f118:	f001 ffe0 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    f11c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	return true;
    f120:	f04f 0001 	mov.w	r0, #1
    f124:	b953      	cbnz	r3, f13c <steppers::getNextMove()+0x41c>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    f126:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    f12a:	f04f 0401 	mov.w	r4, #1
    f12e:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    f132:	fa04 f101 	lsl.w	r1, r4, r1
    f136:	f7f4 f9dd 	bl	34f4 <GPIO_ClearValue>
    f13a:	4620      	mov	r0, r4
}
    f13c:	b00f      	add	sp, #60	; 0x3c
    f13e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000f140 <steppers::startHoming(bool, unsigned char, unsigned long)>:


/// Start homing
void startHoming(const bool maximums, const uint8_t axes_enabled, const uint32_t us_per_step) {
    f140:	b538      	push	{r3, r4, r5, lr}
    f142:	4605      	mov	r5, r0
    f144:	460c      	mov	r4, r1
	intervals_remaining = INT32_MAX;
    f146:	f242 6318 	movw	r3, #9752	; 0x2618
    f14a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f14e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    f152:	6019      	str	r1, [r3, #0]
	intervals = 1;
    f154:	f242 5388 	movw	r3, #9608	; 0x2588
    f158:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f15c:	f04f 0101 	mov.w	r1, #1
    f160:	6019      	str	r1, [r3, #0]
	feedrate_inverted = us_per_step;
    f162:	f242 6324 	movw	r3, #9764	; 0x2624
    f166:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f16a:	601a      	str	r2, [r3, #0]
	// ToDo: Return to using the interval if the us_per_step > INTERVAL_IN_MICROSECONDS
	const int32_t negative_half_interval = -1;
	TIM_UpdateMatchValue(LPC_TIM0,TIM_MR0_INT, HOMING_INTERVAL_IN_MICROSECONDS * 16);
    f16c:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    f170:	f04f 0100 	mov.w	r1, #0
    f174:	f44f 6200 	mov.w	r2, #2048	; 0x800
    f178:	f7f4 fd94 	bl	3ca4 <TIM_UpdateMatchValue>
//	OCR3A = HOMING_INTERVAL_IN_MICROSECONDS * 16;	//TODO find value for this
	
	
	for (int i = 0; i < STEPPER_COUNT; i++) {
		counter[i] = negative_half_interval;
    f17c:	f242 52a4 	movw	r2, #9636	; 0x25a4
    f180:	f2c1 0200 	movt	r2, #4096	; 0x1000
    f184:	f04f 30ff 	mov.w	r0, #4294967295
    f188:	6010      	str	r0, [r2, #0]
		delta[i] = 0;
    f18a:	f242 6328 	movw	r3, #9768	; 0x2628
    f18e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f192:	f04f 0100 	mov.w	r1, #0
    f196:	6019      	str	r1, [r3, #0]
	TIM_UpdateMatchValue(LPC_TIM0,TIM_MR0_INT, HOMING_INTERVAL_IN_MICROSECONDS * 16);
//	OCR3A = HOMING_INTERVAL_IN_MICROSECONDS * 16;	//TODO find value for this
	
	
	for (int i = 0; i < STEPPER_COUNT; i++) {
		counter[i] = negative_half_interval;
    f198:	6050      	str	r0, [r2, #4]
		delta[i] = 0;
    f19a:	6059      	str	r1, [r3, #4]
	TIM_UpdateMatchValue(LPC_TIM0,TIM_MR0_INT, HOMING_INTERVAL_IN_MICROSECONDS * 16);
//	OCR3A = HOMING_INTERVAL_IN_MICROSECONDS * 16;	//TODO find value for this
	
	
	for (int i = 0; i < STEPPER_COUNT; i++) {
		counter[i] = negative_half_interval;
    f19c:	6090      	str	r0, [r2, #8]
		delta[i] = 0;
    f19e:	6099      	str	r1, [r3, #8]
	TIM_UpdateMatchValue(LPC_TIM0,TIM_MR0_INT, HOMING_INTERVAL_IN_MICROSECONDS * 16);
//	OCR3A = HOMING_INTERVAL_IN_MICROSECONDS * 16;	//TODO find value for this
	
	
	for (int i = 0; i < STEPPER_COUNT; i++) {
		counter[i] = negative_half_interval;
    f1a0:	60d0      	str	r0, [r2, #12]
		delta[i] = 0;
    f1a2:	60d9      	str	r1, [r3, #12]
	}
	
	// The A3982 stepper driver chip has an inverted enable.
	if ((axes_enabled & (1<<X_AXIS)) != 0) {
    f1a4:	f014 0f01 	tst.w	r4, #1
    f1a8:	d03f      	beq.n	f22a <steppers::startHoming(bool, unsigned char, unsigned long)+0xea>
		direction[X_AXIS] = maximums;
    f1aa:	f242 6340 	movw	r3, #9792	; 0x2640
    f1ae:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f1b2:	701d      	strb	r5, [r3, #0]
		_WRITE(X_DIR_PORT, X_DIR_BIT, invert_axis[X_AXIS] ? !direction[X_AXIS] : direction[X_AXIS]);
    f1b4:	f242 631c 	movw	r3, #9756	; 0x261c
    f1b8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f1bc:	781b      	ldrb	r3, [r3, #0]
    f1be:	b13b      	cbz	r3, f1d0 <steppers::startHoming(bool, unsigned char, unsigned long)+0x90>
    f1c0:	f242 6340 	movw	r3, #9792	; 0x2640
    f1c4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f1c8:	781b      	ldrb	r3, [r3, #0]
    f1ca:	f083 0301 	eor.w	r3, r3, #1
    f1ce:	e004      	b.n	f1da <steppers::startHoming(bool, unsigned char, unsigned long)+0x9a>
    f1d0:	f242 6340 	movw	r3, #9792	; 0x2640
    f1d4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f1d8:	781b      	ldrb	r3, [r3, #0]
    f1da:	b133      	cbz	r3, f1ea <steppers::startHoming(bool, unsigned char, unsigned long)+0xaa>
    f1dc:	f04f 0002 	mov.w	r0, #2
    f1e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    f1e4:	f7f4 f97e 	bl	34e4 <GPIO_SetValue>
    f1e8:	e005      	b.n	f1f6 <steppers::startHoming(bool, unsigned char, unsigned long)+0xb6>
    f1ea:	f04f 0002 	mov.w	r0, #2
    f1ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    f1f2:	f7f4 f97f 	bl	34f4 <GPIO_ClearValue>
//		_WRITE(X_DIR, invert_axis[X_AXIS] ? !direction[X_AXIS] : direction[X_AXIS]);
		_WRITE(X_ENABLE_PORT, X_ENABLE_BIT, false);
    f1f6:	f04f 0002 	mov.w	r0, #2
    f1fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
    f1fe:	f7f4 f979 	bl	34f4 <GPIO_ClearValue>
//		_WRITE(X_ENABLE, false);
		delta[X_AXIS] = 1;
    f202:	f242 6328 	movw	r3, #9768	; 0x2628
    f206:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f20a:	f04f 0201 	mov.w	r2, #1
    f20e:	601a      	str	r2, [r3, #0]
		step_change[X_AXIS] = direction[X_AXIS] ? 1 : -1;
    f210:	f242 6340 	movw	r3, #9792	; 0x2640
    f214:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f218:	781b      	ldrb	r3, [r3, #0]
    f21a:	2b00      	cmp	r3, #0
    f21c:	bf08      	it	eq
    f21e:	22ff      	moveq	r2, #255	; 0xff
    f220:	f242 6344 	movw	r3, #9796	; 0x2644
    f224:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f228:	701a      	strb	r2, [r3, #0]
	}
	
	if ((axes_enabled & (1<<Y_AXIS)) != 0) {
    f22a:	f014 0f02 	tst.w	r4, #2
    f22e:	d03f      	beq.n	f2b0 <steppers::startHoming(bool, unsigned char, unsigned long)+0x170>
		direction[Y_AXIS] = maximums;
    f230:	f242 6340 	movw	r3, #9792	; 0x2640
    f234:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f238:	705d      	strb	r5, [r3, #1]
		_WRITE(Y_DIR_PORT, Y_DIR_BIT, invert_axis[Y_AXIS] ? !direction[Y_AXIS] : direction[Y_AXIS]);
    f23a:	f242 631c 	movw	r3, #9756	; 0x261c
    f23e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f242:	785b      	ldrb	r3, [r3, #1]
    f244:	b13b      	cbz	r3, f256 <steppers::startHoming(bool, unsigned char, unsigned long)+0x116>
    f246:	f242 6340 	movw	r3, #9792	; 0x2640
    f24a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f24e:	785b      	ldrb	r3, [r3, #1]
    f250:	f083 0301 	eor.w	r3, r3, #1
    f254:	e004      	b.n	f260 <steppers::startHoming(bool, unsigned char, unsigned long)+0x120>
    f256:	f242 6340 	movw	r3, #9792	; 0x2640
    f25a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f25e:	785b      	ldrb	r3, [r3, #1]
    f260:	b133      	cbz	r3, f270 <steppers::startHoming(bool, unsigned char, unsigned long)+0x130>
    f262:	f04f 0001 	mov.w	r0, #1
    f266:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    f26a:	f7f4 f93b 	bl	34e4 <GPIO_SetValue>
    f26e:	e005      	b.n	f27c <steppers::startHoming(bool, unsigned char, unsigned long)+0x13c>
    f270:	f04f 0001 	mov.w	r0, #1
    f274:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    f278:	f7f4 f93c 	bl	34f4 <GPIO_ClearValue>
//		_WRITE(Y_DIR, invert_axis[Y_AXIS] ? !direction[Y_AXIS] : direction[Y_AXIS]);
		_WRITE(Y_ENABLE_PORT, Y_ENABLE_BIT, false);
    f27c:	f04f 0000 	mov.w	r0, #0
    f280:	f44f 6180 	mov.w	r1, #1024	; 0x400
    f284:	f7f4 f936 	bl	34f4 <GPIO_ClearValue>
//		_WRITE(Y_ENABLE, false);
		delta[Y_AXIS] = 1;
    f288:	f242 6328 	movw	r3, #9768	; 0x2628
    f28c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f290:	f04f 0201 	mov.w	r2, #1
    f294:	605a      	str	r2, [r3, #4]
		step_change[Y_AXIS] = direction[Y_AXIS] ? 1 : -1;
    f296:	f242 6340 	movw	r3, #9792	; 0x2640
    f29a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f29e:	785b      	ldrb	r3, [r3, #1]
    f2a0:	2b00      	cmp	r3, #0
    f2a2:	bf08      	it	eq
    f2a4:	22ff      	moveq	r2, #255	; 0xff
    f2a6:	f242 6344 	movw	r3, #9796	; 0x2644
    f2aa:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f2ae:	705a      	strb	r2, [r3, #1]
	}
	
	if ((axes_enabled & (1<<Z_AXIS)) != 0) {
    f2b0:	f014 0f04 	tst.w	r4, #4
    f2b4:	d03f      	beq.n	f336 <steppers::startHoming(bool, unsigned char, unsigned long)+0x1f6>
		direction[Z_AXIS] = maximums;
    f2b6:	f242 6340 	movw	r3, #9792	; 0x2640
    f2ba:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f2be:	709d      	strb	r5, [r3, #2]
		_WRITE(Z_DIR_PORT, Z_DIR_BIT, invert_axis[Z_AXIS] ? !direction[Z_AXIS] : direction[Z_AXIS]);
    f2c0:	f242 631c 	movw	r3, #9756	; 0x261c
    f2c4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f2c8:	789b      	ldrb	r3, [r3, #2]
    f2ca:	b13b      	cbz	r3, f2dc <steppers::startHoming(bool, unsigned char, unsigned long)+0x19c>
    f2cc:	f242 6340 	movw	r3, #9792	; 0x2640
    f2d0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f2d4:	789b      	ldrb	r3, [r3, #2]
    f2d6:	f083 0301 	eor.w	r3, r3, #1
    f2da:	e004      	b.n	f2e6 <steppers::startHoming(bool, unsigned char, unsigned long)+0x1a6>
    f2dc:	f242 6340 	movw	r3, #9792	; 0x2640
    f2e0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f2e4:	789b      	ldrb	r3, [r3, #2]
    f2e6:	b133      	cbz	r3, f2f6 <steppers::startHoming(bool, unsigned char, unsigned long)+0x1b6>
    f2e8:	f04f 0001 	mov.w	r0, #1
    f2ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    f2f0:	f7f4 f8f8 	bl	34e4 <GPIO_SetValue>
    f2f4:	e005      	b.n	f302 <steppers::startHoming(bool, unsigned char, unsigned long)+0x1c2>
    f2f6:	f04f 0001 	mov.w	r0, #1
    f2fa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    f2fe:	f7f4 f8f9 	bl	34f4 <GPIO_ClearValue>
//		_WRITE(Z_DIR, invert_axis[Z_AXIS] ? !direction[Z_AXIS] : direction[Z_AXIS]);
		_WRITE(Z_ENABLE_PORT, Z_ENABLE_BIT, false);
    f302:	f04f 0001 	mov.w	r0, #1
    f306:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    f30a:	f7f4 f8f3 	bl	34f4 <GPIO_ClearValue>
//		_WRITE(Z_ENABLE, false);
		delta[Z_AXIS] = 1;
    f30e:	f242 6328 	movw	r3, #9768	; 0x2628
    f312:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f316:	f04f 0201 	mov.w	r2, #1
    f31a:	609a      	str	r2, [r3, #8]
		step_change[Z_AXIS] = direction[Z_AXIS] ? 1 : -1;
    f31c:	f242 6340 	movw	r3, #9792	; 0x2640
    f320:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f324:	789b      	ldrb	r3, [r3, #2]
    f326:	2b00      	cmp	r3, #0
    f328:	bf08      	it	eq
    f32a:	22ff      	moveq	r2, #255	; 0xff
    f32c:	f242 6344 	movw	r3, #9796	; 0x2644
    f330:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f334:	709a      	strb	r2, [r3, #2]
	}
	
	timer_counter = feedrate_inverted;
    f336:	f242 6324 	movw	r3, #9764	; 0x2624
    f33a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f33e:	681a      	ldr	r2, [r3, #0]
    f340:	f242 6310 	movw	r3, #9744	; 0x2610
    f344:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f348:	601a      	str	r2, [r3, #0]
	is_homing = true;
    f34a:	f242 6314 	movw	r3, #9748	; 0x2614
    f34e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f352:	f04f 0201 	mov.w	r2, #1
    f356:	701a      	strb	r2, [r3, #0]
}
    f358:	bd38      	pop	{r3, r4, r5, pc}
    f35a:	bf00      	nop

0000f35c <steppers::enableAxis(unsigned char, bool)>:

/// Enable/disable the given axis.
void enableAxis(uint8_t index, bool enable) {
    f35c:	b508      	push	{r3, lr}
	
	// The A3982 stepper driver chip has an inverted enable.
	switch(index){
    f35e:	2804      	cmp	r0, #4
    f360:	d84e      	bhi.n	f400 <steppers::enableAxis(unsigned char, bool)+0xa4>
    f362:	e8df f000 	tbb	[pc, r0]
    f366:	1203      	.short	0x1203
    f368:	3021      	.short	0x3021
    f36a:	3f          	.byte	0x3f
    f36b:	00          	.byte	0x00
		case X_AXIS: 
			_WRITE(X_ENABLE_PORT, X_ENABLE_BIT, !enable);
    f36c:	b931      	cbnz	r1, f37c <steppers::enableAxis(unsigned char, bool)+0x20>
    f36e:	f04f 0002 	mov.w	r0, #2
    f372:	f44f 6100 	mov.w	r1, #2048	; 0x800
    f376:	f7f4 f8b5 	bl	34e4 <GPIO_SetValue>
    f37a:	bd08      	pop	{r3, pc}
    f37c:	f04f 0002 	mov.w	r0, #2
    f380:	f44f 6100 	mov.w	r1, #2048	; 0x800
    f384:	f7f4 f8b6 	bl	34f4 <GPIO_ClearValue>
    f388:	bd08      	pop	{r3, pc}
//			_WRITE(X_ENABLE, !enable);
			break;
        case Y_AXIS: 
			_WRITE(Y_ENABLE_PORT, Y_ENABLE_BIT, !enable);
    f38a:	b931      	cbnz	r1, f39a <steppers::enableAxis(unsigned char, bool)+0x3e>
    f38c:	f04f 0000 	mov.w	r0, #0
    f390:	f44f 6180 	mov.w	r1, #1024	; 0x400
    f394:	f7f4 f8a6 	bl	34e4 <GPIO_SetValue>
    f398:	bd08      	pop	{r3, pc}
    f39a:	f04f 0000 	mov.w	r0, #0
    f39e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    f3a2:	f7f4 f8a7 	bl	34f4 <GPIO_ClearValue>
    f3a6:	bd08      	pop	{r3, pc}
//			_WRITE(Y_ENABLE, !enable);
			break;
		case Z_AXIS: 
			_WRITE(Z_ENABLE_PORT, Z_ENABLE_BIT, !enable);
    f3a8:	b931      	cbnz	r1, f3b8 <steppers::enableAxis(unsigned char, bool)+0x5c>
    f3aa:	f04f 0001 	mov.w	r0, #1
    f3ae:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    f3b2:	f7f4 f897 	bl	34e4 <GPIO_SetValue>
    f3b6:	bd08      	pop	{r3, pc}
    f3b8:	f04f 0001 	mov.w	r0, #1
    f3bc:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    f3c0:	f7f4 f898 	bl	34f4 <GPIO_ClearValue>
    f3c4:	bd08      	pop	{r3, pc}
//			_WRITE(Z_ENABLE, !enable);
			break;
		case A_AXIS: 
			_WRITE(A_ENABLE_PORT, A_ENABLE_BIT, !enable);
    f3c6:	b931      	cbnz	r1, f3d6 <steppers::enableAxis(unsigned char, bool)+0x7a>
    f3c8:	f04f 0001 	mov.w	r0, #1
    f3cc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    f3d0:	f7f4 f888 	bl	34e4 <GPIO_SetValue>
    f3d4:	bd08      	pop	{r3, pc}
    f3d6:	f04f 0001 	mov.w	r0, #1
    f3da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    f3de:	f7f4 f889 	bl	34f4 <GPIO_ClearValue>
    f3e2:	bd08      	pop	{r3, pc}
//			_WRITE(A_ENABLE, !enable);
			break;
		case B_AXIS: 
			_WRITE(B_ENABLE_PORT, B_ENABLE_BIT, !enable);
    f3e4:	b931      	cbnz	r1, f3f4 <steppers::enableAxis(unsigned char, bool)+0x98>
    f3e6:	f04f 0003 	mov.w	r0, #3
    f3ea:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    f3ee:	f7f4 f879 	bl	34e4 <GPIO_SetValue>
    f3f2:	bd08      	pop	{r3, pc}
    f3f4:	f04f 0003 	mov.w	r0, #3
    f3f8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
    f3fc:	f7f4 f87a 	bl	34f4 <GPIO_ClearValue>
    f400:	bd08      	pop	{r3, pc}
    f402:	bf00      	nop

0000f404 <steppers::setAxisPotValue(unsigned char, unsigned char)>:
			break;
	}
}

/// set digital potentiometer for stepper axis
void setAxisPotValue(uint8_t index, uint8_t value){
    f404:	b508      	push	{r3, lr}
		if (index < STEPPER_COUNT) {
    f406:	2803      	cmp	r0, #3
    f408:	d809      	bhi.n	f41e <steppers::setAxisPotValue(unsigned char, unsigned char)+0x1a>
			digi_pots[index].setPotValue(value);
    f40a:	f242 53bc 	movw	r3, #9660	; 0x25bc
    f40e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f412:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    f416:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    f41a:	f000 ff5d 	bl	102d8 <DigiPots::setPotValue(unsigned char)>
    f41e:	bd08      	pop	{r3, pc}

0000f420 <steppers::startRunning()>:
	}
}

void startRunning() {
	if (is_running)
    f420:	f242 6370 	movw	r3, #9840	; 0x2670
    f424:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f428:	781b      	ldrb	r3, [r3, #0]
    f42a:	b933      	cbnz	r3, f43a <steppers::startRunning()+0x1a>
		return;
	is_running = true;
    f42c:	f242 6370 	movw	r3, #9840	; 0x2670
    f430:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f434:	f04f 0201 	mov.w	r2, #1
    f438:	701a      	strb	r2, [r3, #0]
    f43a:	4770      	bx	lr

0000f43c <steppers::getEndstopStatus()>:
	acceleration_on = on;
}

/// returns a bit field indicating the endstop status as follows
/// (7-0) : | N/A | N/A | z max | z min | y max | y min | x max | x min |
uint8_t getEndstopStatus(){
    f43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	uint8_t status = 0;
	status |= (_READ(Z_MAX_PORT,Z_MAX_BIT)) ? 0x20 : 0;
    f43e:	f04f 0003 	mov.w	r0, #3
    f442:	f7f4 f869 	bl	3518 <FIO_ReadValue>
    f446:	f000 7000 	and.w	r0, r0, #33554432	; 0x2000000
    f44a:	2800      	cmp	r0, #0
    f44c:	bf14      	ite	ne
    f44e:	2420      	movne	r4, #32
    f450:	2400      	moveq	r4, #0
	status |= (_READ(Z_MIN_PORT,Z_MIN_BIT)) ? 0x10 : 0;
    f452:	f04f 0001 	mov.w	r0, #1
    f456:	f7f4 f85f 	bl	3518 <FIO_ReadValue>
    f45a:	f000 6700 	and.w	r7, r0, #134217728	; 0x8000000
    f45e:	2f00      	cmp	r7, #0
    f460:	bf14      	ite	ne
    f462:	2710      	movne	r7, #16
    f464:	2700      	moveq	r7, #0
    f466:	4327      	orrs	r7, r4
	status |= (_READ(Y_MAX_PORT,Y_MAX_BIT)) ? 0x08 : 0;
    f468:	f04f 0001 	mov.w	r0, #1
    f46c:	f7f4 f854 	bl	3518 <FIO_ReadValue>
    f470:	f400 0600 	and.w	r6, r0, #8388608	; 0x800000
    f474:	2e00      	cmp	r6, #0
    f476:	bf14      	ite	ne
    f478:	2608      	movne	r6, #8
    f47a:	2600      	moveq	r6, #0
    f47c:	433e      	orrs	r6, r7
	status |= (_READ(Y_MIN_PORT,Y_MIN_BIT)) ? 0x04 : 0;
    f47e:	f04f 0001 	mov.w	r0, #1
    f482:	f7f4 f849 	bl	3518 <FIO_ReadValue>
    f486:	f000 6500 	and.w	r5, r0, #134217728	; 0x8000000
    f48a:	2d00      	cmp	r5, #0
    f48c:	bf14      	ite	ne
    f48e:	2504      	movne	r5, #4
    f490:	2500      	moveq	r5, #0
    f492:	4335      	orrs	r5, r6
	status |= (_READ(X_MAX_PORT,X_MAX_BIT)) ? 0x02 : 0;
    f494:	f04f 0000 	mov.w	r0, #0
    f498:	f7f4 f83e 	bl	3518 <FIO_ReadValue>
    f49c:	f400 6400 	and.w	r4, r0, #2048	; 0x800
    f4a0:	2c00      	cmp	r4, #0
    f4a2:	bf14      	ite	ne
    f4a4:	2402      	movne	r4, #2
    f4a6:	2400      	moveq	r4, #0
    f4a8:	432c      	orrs	r4, r5
	status |= (_READ(X_MIN_PORT,X_MIN_BIT)) ? 0x01 : 0;
    f4aa:	f04f 0000 	mov.w	r0, #0
    f4ae:	f7f4 f833 	bl	3518 <FIO_ReadValue>
    f4b2:	f3c0 5080 	ubfx	r0, r0, #22, #1
	status |= (_READ(Y_MIN)) ? 0x04 : 0;
	status |= (_READ(X_MAX)) ? 0x02 : 0;
	status |= (_READ(X_MIN)) ? 0x01 : 0; 
	*/
	return status;
}
    f4b6:	4320      	orrs	r0, r4
    f4b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f4ba:	bf00      	nop

0000f4bc <steppers::doInterrupt()>:


bool doInterrupt() {
    f4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f4c0:	b089      	sub	sp, #36	; 0x24
	DEBUG_LED4.setDirection(true);
    f4c2:	f242 54b4 	movw	r4, #9652	; 0x25b4
    f4c6:	f2c1 0400 	movt	r4, #4096	; 0x1000
    f4ca:	a802      	add	r0, sp, #8
    f4cc:	4621      	mov	r1, r4
    f4ce:	f04f 0217 	mov.w	r2, #23
    f4d2:	f001 fe03 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
    f4d6:	a802      	add	r0, sp, #8
    f4d8:	f04f 0101 	mov.w	r1, #1
    f4dc:	f001 fe1e 	bl	1111c <Pin::setDirection(bool) const>
	DEBUG_LED4.setValue(true);
    f4e0:	a804      	add	r0, sp, #16
    f4e2:	4621      	mov	r1, r4
    f4e4:	f04f 0217 	mov.w	r2, #23
    f4e8:	f001 fdf8 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    f4ec:	f89d 3011 	ldrb.w	r3, [sp, #17]
    f4f0:	b94b      	cbnz	r3, f506 <steppers::doInterrupt()+0x4a>
//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
    f4f2:	f89d 3012 	ldrb.w	r3, [sp, #18]
    f4f6:	f89d 0010 	ldrb.w	r0, [sp, #16]
    f4fa:	f04f 0101 	mov.w	r1, #1
    f4fe:	fa01 f103 	lsl.w	r1, r1, r3
    f502:	f7f3 ffef 	bl	34e4 <GPIO_SetValue>
//	xprintf("%d" " (%s:%d)\n",Motherboard::getBoard().getCurrentMillis(),_F_,_L_);
	if (is_running) {
    f506:	f242 6370 	movw	r3, #9840	; 0x2670
    f50a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f50e:	781b      	ldrb	r3, [r3, #0]
    f510:	2b00      	cmp	r3, #0
    f512:	f000 825e 	beq.w	f9d2 <steppers::doInterrupt()+0x516>
		if (current_block == NULL) {
    f516:	f242 6338 	movw	r3, #9784	; 0x2638
    f51a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f51e:	681b      	ldr	r3, [r3, #0]
    f520:	b943      	cbnz	r3, f534 <steppers::doInterrupt()+0x78>
			bool got_a_move = getNextMove();
    f522:	f7ff fbfd 	bl	ed20 <steppers::getNextMove()>
			if (!got_a_move) {
    f526:	b928      	cbnz	r0, f534 <steppers::doInterrupt()+0x78>
				return is_running;
    f528:	f242 6370 	movw	r3, #9840	; 0x2670
    f52c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f530:	7818      	ldrb	r0, [r3, #0]
    f532:	e3dc      	b.n	fcee <steppers::doInterrupt()+0x832>
			}
		}
	
		timer_counter -= INTERVAL_IN_MICROSECONDS; //interval_microseconds;
    f534:	f242 6310 	movw	r3, #9744	; 0x2610
    f538:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f53c:	681a      	ldr	r2, [r3, #0]
    f53e:	f1a2 0280 	sub.w	r2, r2, #128	; 0x80
    f542:	601a      	str	r2, [r3, #0]

		if (timer_counter < 0) {
    f544:	681b      	ldr	r3, [r3, #0]
    f546:	2b00      	cmp	r3, #0
    f548:	f280 81f0 	bge.w	f92c <steppers::doInterrupt()+0x470>
			// if we are supposed to step too fast, we simulate double-size microsteps
			int8_t feedrate_multiplier = 1;
			timer_counter += feedrate_inverted;
    f54c:	f242 6310 	movw	r3, #9744	; 0x2610
    f550:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f554:	6819      	ldr	r1, [r3, #0]
    f556:	f242 6224 	movw	r2, #9764	; 0x2624
    f55a:	f2c1 0200 	movt	r2, #4096	; 0x1000
    f55e:	6812      	ldr	r2, [r2, #0]
    f560:	188a      	adds	r2, r1, r2
    f562:	601a      	str	r2, [r3, #0]
	
		timer_counter -= INTERVAL_IN_MICROSECONDS; //interval_microseconds;

		if (timer_counter < 0) {
			// if we are supposed to step too fast, we simulate double-size microsteps
			int8_t feedrate_multiplier = 1;
    f564:	f04f 0801 	mov.w	r8, #1
			timer_counter += feedrate_inverted;
			
			//if(acceleration_on){
				while (timer_counter < 0 && feedrate_multiplier < intervals_remaining) {
    f568:	461a      	mov	r2, r3
    f56a:	f242 6118 	movw	r1, #9752	; 0x2618
    f56e:	f2c1 0100 	movt	r1, #4096	; 0x1000
					feedrate_multiplier++;
					timer_counter += feedrate_inverted;
    f572:	f242 6424 	movw	r4, #9764	; 0x2624
    f576:	f2c1 0400 	movt	r4, #4096	; 0x1000
			// if we are supposed to step too fast, we simulate double-size microsteps
			int8_t feedrate_multiplier = 1;
			timer_counter += feedrate_inverted;
			
			//if(acceleration_on){
				while (timer_counter < 0 && feedrate_multiplier < intervals_remaining) {
    f57a:	6813      	ldr	r3, [r2, #0]
    f57c:	2b00      	cmp	r3, #0
    f57e:	f280 83b9 	bge.w	fcf4 <steppers::doInterrupt()+0x838>
    f582:	680b      	ldr	r3, [r1, #0]
    f584:	fa4f f088 	sxtb.w	r0, r8
    f588:	4298      	cmp	r0, r3
    f58a:	f280 83b3 	bge.w	fcf4 <steppers::doInterrupt()+0x838>
					feedrate_multiplier++;
    f58e:	f108 0801 	add.w	r8, r8, #1
    f592:	fa5f f888 	uxtb.w	r8, r8
					timer_counter += feedrate_inverted;
    f596:	6810      	ldr	r0, [r2, #0]
    f598:	6823      	ldr	r3, [r4, #0]
    f59a:	18c3      	adds	r3, r0, r3
    f59c:	6013      	str	r3, [r2, #0]
    f59e:	e7ec      	b.n	f57a <steppers::doInterrupt()+0xbe>
				axis_active[i] = IsActive(i);
			}
#else
			//TODO: Port this to handle max/min pins = NULL and non-inverted endstops ( see old stepper interface functions)
			//TODO: READ ENDSTOPS ALL AT ONCE
			axis_active[X_AXIS] = (delta[X_AXIS] != 0) && !(direction[X_AXIS] ? !_READ(X_MAX_PORT, X_MAX_BIT) : !_READ(X_MIN_PORT, X_MIN_BIT));
    f5a0:	f242 6340 	movw	r3, #9792	; 0x2640
    f5a4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f5a8:	781b      	ldrb	r3, [r3, #0]
    f5aa:	b14b      	cbz	r3, f5c0 <steppers::doInterrupt()+0x104>
    f5ac:	f04f 0000 	mov.w	r0, #0
    f5b0:	f7f3 ffb2 	bl	3518 <FIO_ReadValue>
    f5b4:	f400 6000 	and.w	r0, r0, #2048	; 0x800
    f5b8:	1c07      	adds	r7, r0, #0
    f5ba:	bf18      	it	ne
    f5bc:	2701      	movne	r7, #1
    f5be:	e008      	b.n	f5d2 <steppers::doInterrupt()+0x116>
    f5c0:	f04f 0000 	mov.w	r0, #0
    f5c4:	f7f3 ffa8 	bl	3518 <FIO_ReadValue>
    f5c8:	f400 0080 	and.w	r0, r0, #4194304	; 0x400000
    f5cc:	1c07      	adds	r7, r0, #0
    f5ce:	bf18      	it	ne
    f5d0:	2701      	movne	r7, #1
			axis_active[Y_AXIS] = (delta[Y_AXIS] != 0) && !(direction[Y_AXIS] ? !_READ(Y_MAX_PORT, Y_MAX_BIT) : !_READ(Y_MIN_PORT, Y_MIN_BIT));
    f5d2:	f242 6328 	movw	r3, #9768	; 0x2628
    f5d6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f5da:	685b      	ldr	r3, [r3, #4]
    f5dc:	b1db      	cbz	r3, f616 <steppers::doInterrupt()+0x15a>
    f5de:	f242 6340 	movw	r3, #9792	; 0x2640
    f5e2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f5e6:	785b      	ldrb	r3, [r3, #1]
    f5e8:	b153      	cbz	r3, f600 <steppers::doInterrupt()+0x144>
    f5ea:	f04f 0001 	mov.w	r0, #1
    f5ee:	f7f3 ff93 	bl	3518 <FIO_ReadValue>
    f5f2:	f400 0000 	and.w	r0, r0, #8388608	; 0x800000
    f5f6:	3000      	adds	r0, #0
    f5f8:	bf18      	it	ne
    f5fa:	2001      	movne	r0, #1
    f5fc:	9001      	str	r0, [sp, #4]
    f5fe:	e00d      	b.n	f61c <steppers::doInterrupt()+0x160>
    f600:	f04f 0001 	mov.w	r0, #1
    f604:	f7f3 ff88 	bl	3518 <FIO_ReadValue>
    f608:	f000 6000 	and.w	r0, r0, #134217728	; 0x8000000
    f60c:	3000      	adds	r0, #0
    f60e:	bf18      	it	ne
    f610:	2001      	movne	r0, #1
    f612:	9001      	str	r0, [sp, #4]
    f614:	e002      	b.n	f61c <steppers::doInterrupt()+0x160>
    f616:	f04f 0300 	mov.w	r3, #0
    f61a:	9301      	str	r3, [sp, #4]
			axis_active[Z_AXIS] = (delta[Z_AXIS] != 0) && !(direction[Z_AXIS] ? !_READ(Z_MAX_PORT, Z_MAX_BIT) : !_READ(Z_MIN_PORT, Z_MIN_BIT));
    f61c:	f242 6328 	movw	r3, #9768	; 0x2628
    f620:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f624:	689b      	ldr	r3, [r3, #8]
    f626:	f04f 0b00 	mov.w	fp, #0
    f62a:	b1e3      	cbz	r3, f666 <steppers::doInterrupt()+0x1aa>
    f62c:	f242 6340 	movw	r3, #9792	; 0x2640
    f630:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f634:	789b      	ldrb	r3, [r3, #2]
    f636:	b15b      	cbz	r3, f650 <steppers::doInterrupt()+0x194>
    f638:	f04f 0003 	mov.w	r0, #3
    f63c:	f7f3 ff6c 	bl	3518 <FIO_ReadValue>
    f640:	f000 7000 	and.w	r0, r0, #33554432	; 0x2000000
    f644:	f110 0b00 	adds.w	fp, r0, #0
    f648:	bf18      	it	ne
    f64a:	f04f 0b01 	movne.w	fp, #1
    f64e:	e00a      	b.n	f666 <steppers::doInterrupt()+0x1aa>
    f650:	f04f 0001 	mov.w	r0, #1
    f654:	f7f3 ff60 	bl	3518 <FIO_ReadValue>
    f658:	f000 6000 	and.w	r0, r0, #134217728	; 0x8000000
    f65c:	f110 0b00 	adds.w	fp, r0, #0
    f660:	bf18      	it	ne
    f662:	f04f 0b01 	movne.w	fp, #1
//			axis_active[X_AXIS] = (delta[X_AXIS] != 0) && !(direction[X_AXIS] ? !_READ(X_MAX) : !_READ(X_MIN));
//			axis_active[Y_AXIS] = (delta[Y_AXIS] != 0) && !(direction[Y_AXIS] ? !_READ(Y_MAX) : !_READ(Y_MIN));
//			axis_active[Z_AXIS] = (delta[Z_AXIS] != 0) && !(direction[Z_AXIS] ? !_READ(Z_MAX) : !_READ(Z_MIN));
#if STEPPER_COUNT > 3
			axis_active[A_AXIS] = (delta[A_AXIS] != 0);
    f666:	f242 6328 	movw	r3, #9768	; 0x2628
    f66a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f66e:	f8d3 a00c 	ldr.w	sl, [r3, #12]
#if STEPPER_COUNT > 4
			axis_active[B_AXIS] = (delta[B_AXIS] != 0); 
#endif
#endif

			for (uint8_t i = 0; i < feedrate_multiplier; i++){
    f672:	fa4f f888 	sxtb.w	r8, r8
    f676:	f1b8 0f00 	cmp.w	r8, #0
    f67a:	f340 80ae 	ble.w	f7da <steppers::doInterrupt()+0x31e>
    f67e:	f04f 0500 	mov.w	r5, #0
				if(axis_active[X_AXIS]){
					counter[X_AXIS] += delta[X_AXIS] ;
    f682:	f242 54a4 	movw	r4, #9636	; 0x25a4
    f686:	f2c1 0400 	movt	r4, #4096	; 0x1000
    f68a:	461e      	mov	r6, r3
					if (counter[X_AXIS]  >= 0) {
						_WRITE(X_STEP_PORT, X_STEP_BIT, true);
//						_WRITE(X_STEP, true);
						counter[X_AXIS]  -= intervals ;
    f68c:	f242 5988 	movw	r9, #9608	; 0x2588
    f690:	f2c1 0900 	movt	r9, #4096	; 0x1000
			axis_active[B_AXIS] = (delta[B_AXIS] != 0); 
#endif
#endif

			for (uint8_t i = 0; i < feedrate_multiplier; i++){
				if(axis_active[X_AXIS]){
    f694:	b327      	cbz	r7, f6e0 <steppers::doInterrupt()+0x224>
					counter[X_AXIS] += delta[X_AXIS] ;
    f696:	6822      	ldr	r2, [r4, #0]
    f698:	6833      	ldr	r3, [r6, #0]
    f69a:	18d3      	adds	r3, r2, r3
    f69c:	6023      	str	r3, [r4, #0]
					if (counter[X_AXIS]  >= 0) {
    f69e:	6823      	ldr	r3, [r4, #0]
    f6a0:	2b00      	cmp	r3, #0
    f6a2:	db1d      	blt.n	f6e0 <steppers::doInterrupt()+0x224>
						_WRITE(X_STEP_PORT, X_STEP_BIT, true);
    f6a4:	f04f 0002 	mov.w	r0, #2
    f6a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    f6ac:	f7f3 ff1a 	bl	34e4 <GPIO_SetValue>
//						_WRITE(X_STEP, true);
						counter[X_AXIS]  -= intervals ;
    f6b0:	6822      	ldr	r2, [r4, #0]
    f6b2:	f8d9 3000 	ldr.w	r3, [r9]
    f6b6:	1ad3      	subs	r3, r2, r3
    f6b8:	6023      	str	r3, [r4, #0]
						position[X_AXIS]  += step_change[X_AXIS] ;
    f6ba:	f242 6300 	movw	r3, #9728	; 0x2600
    f6be:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f6c2:	6819      	ldr	r1, [r3, #0]
    f6c4:	f242 6244 	movw	r2, #9796	; 0x2644
    f6c8:	f2c1 0200 	movt	r2, #4096	; 0x1000
    f6cc:	7812      	ldrb	r2, [r2, #0]
    f6ce:	b252      	sxtb	r2, r2
    f6d0:	188a      	adds	r2, r1, r2
    f6d2:	601a      	str	r2, [r3, #0]
						_WRITE(X_STEP_PORT, X_STEP_BIT, false);
    f6d4:	f04f 0002 	mov.w	r0, #2
    f6d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    f6dc:	f7f3 ff0a 	bl	34f4 <GPIO_ClearValue>
//						_WRITE(X_STEP, false);
					}
				}
				if(axis_active[Y_AXIS])	{
    f6e0:	9b01      	ldr	r3, [sp, #4]
    f6e2:	b323      	cbz	r3, f72e <steppers::doInterrupt()+0x272>
					counter[Y_AXIS] += delta[Y_AXIS] ;
    f6e4:	6862      	ldr	r2, [r4, #4]
    f6e6:	6873      	ldr	r3, [r6, #4]
    f6e8:	18d3      	adds	r3, r2, r3
    f6ea:	6063      	str	r3, [r4, #4]
					if (counter[Y_AXIS]  >= 0) {
    f6ec:	6863      	ldr	r3, [r4, #4]
    f6ee:	2b00      	cmp	r3, #0
    f6f0:	db1d      	blt.n	f72e <steppers::doInterrupt()+0x272>
						_WRITE(Y_STEP_PORT, Y_STEP_BIT, true);
    f6f2:	f04f 0001 	mov.w	r0, #1
    f6f6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    f6fa:	f7f3 fef3 	bl	34e4 <GPIO_SetValue>
//						_WRITE(Y_STEP, true);
						counter[Y_AXIS]  -= intervals ;
    f6fe:	6862      	ldr	r2, [r4, #4]
    f700:	f8d9 3000 	ldr.w	r3, [r9]
    f704:	1ad3      	subs	r3, r2, r3
    f706:	6063      	str	r3, [r4, #4]
						position[Y_AXIS]  += step_change[Y_AXIS] ;
    f708:	f242 6300 	movw	r3, #9728	; 0x2600
    f70c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f710:	6859      	ldr	r1, [r3, #4]
    f712:	f242 6244 	movw	r2, #9796	; 0x2644
    f716:	f2c1 0200 	movt	r2, #4096	; 0x1000
    f71a:	7852      	ldrb	r2, [r2, #1]
    f71c:	b252      	sxtb	r2, r2
    f71e:	188a      	adds	r2, r1, r2
    f720:	605a      	str	r2, [r3, #4]
						_WRITE(Y_STEP_PORT, Y_STEP_BIT, false);
    f722:	f04f 0001 	mov.w	r0, #1
    f726:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    f72a:	f7f3 fee3 	bl	34f4 <GPIO_ClearValue>
//						_WRITE(Y_STEP, false);
					}
				}
				if(axis_active[Z_AXIS])	{
    f72e:	f1bb 0f00 	cmp.w	fp, #0
    f732:	d024      	beq.n	f77e <steppers::doInterrupt()+0x2c2>
					counter[Z_AXIS] += delta[Z_AXIS] ;
    f734:	68a2      	ldr	r2, [r4, #8]
    f736:	68b3      	ldr	r3, [r6, #8]
    f738:	18d3      	adds	r3, r2, r3
    f73a:	60a3      	str	r3, [r4, #8]
					if (counter[Z_AXIS]  >= 0) {
    f73c:	68a3      	ldr	r3, [r4, #8]
    f73e:	2b00      	cmp	r3, #0
    f740:	db1d      	blt.n	f77e <steppers::doInterrupt()+0x2c2>
						_WRITE(Z_STEP_PORT, Z_STEP_BIT, true);
    f742:	f04f 0001 	mov.w	r0, #1
    f746:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    f74a:	f7f3 fecb 	bl	34e4 <GPIO_SetValue>
//						_WRITE(Z_STEP, true);
						counter[Z_AXIS]  -= intervals ;
    f74e:	68a2      	ldr	r2, [r4, #8]
    f750:	f8d9 3000 	ldr.w	r3, [r9]
    f754:	1ad3      	subs	r3, r2, r3
    f756:	60a3      	str	r3, [r4, #8]
						position[Z_AXIS]  += step_change[Z_AXIS] ;
    f758:	f242 6300 	movw	r3, #9728	; 0x2600
    f75c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f760:	6899      	ldr	r1, [r3, #8]
    f762:	f242 6244 	movw	r2, #9796	; 0x2644
    f766:	f2c1 0200 	movt	r2, #4096	; 0x1000
    f76a:	7892      	ldrb	r2, [r2, #2]
    f76c:	b252      	sxtb	r2, r2
    f76e:	188a      	adds	r2, r1, r2
    f770:	609a      	str	r2, [r3, #8]
						_WRITE(Z_STEP_PORT, Z_STEP_BIT, false);
    f772:	f04f 0001 	mov.w	r0, #1
    f776:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    f77a:	f7f3 febb 	bl	34f4 <GPIO_ClearValue>
//						_WRITE(Z_STEP, false);
					}
				}
	#if STEPPER_COUNT > 3
				if(axis_active[A_AXIS]){
    f77e:	f1ba 0f00 	cmp.w	sl, #0
    f782:	d024      	beq.n	f7ce <steppers::doInterrupt()+0x312>
					counter[A_AXIS] += delta[A_AXIS] ;
    f784:	68e2      	ldr	r2, [r4, #12]
    f786:	68f3      	ldr	r3, [r6, #12]
    f788:	18d3      	adds	r3, r2, r3
    f78a:	60e3      	str	r3, [r4, #12]
					if (counter[A_AXIS]  >= 0) {
    f78c:	68e3      	ldr	r3, [r4, #12]
    f78e:	2b00      	cmp	r3, #0
    f790:	db1d      	blt.n	f7ce <steppers::doInterrupt()+0x312>
						_WRITE(A_STEP_PORT, A_STEP_BIT, true);
    f792:	f04f 0001 	mov.w	r0, #1
    f796:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    f79a:	f7f3 fea3 	bl	34e4 <GPIO_SetValue>
//						_WRITE(A_STEP, true);
						counter[A_AXIS]  -= intervals ;
    f79e:	68e2      	ldr	r2, [r4, #12]
    f7a0:	f8d9 3000 	ldr.w	r3, [r9]
    f7a4:	1ad3      	subs	r3, r2, r3
    f7a6:	60e3      	str	r3, [r4, #12]
						position[A_AXIS]  += step_change[A_AXIS] ;
    f7a8:	f242 6300 	movw	r3, #9728	; 0x2600
    f7ac:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f7b0:	68d9      	ldr	r1, [r3, #12]
    f7b2:	f242 6244 	movw	r2, #9796	; 0x2644
    f7b6:	f2c1 0200 	movt	r2, #4096	; 0x1000
    f7ba:	78d2      	ldrb	r2, [r2, #3]
    f7bc:	b252      	sxtb	r2, r2
    f7be:	188a      	adds	r2, r1, r2
    f7c0:	60da      	str	r2, [r3, #12]
						_WRITE(A_STEP_PORT, A_STEP_BIT, false);
    f7c2:	f04f 0001 	mov.w	r0, #1
    f7c6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    f7ca:	f7f3 fe93 	bl	34f4 <GPIO_ClearValue>
#if STEPPER_COUNT > 4
			axis_active[B_AXIS] = (delta[B_AXIS] != 0); 
#endif
#endif

			for (uint8_t i = 0; i < feedrate_multiplier; i++){
    f7ce:	f105 0501 	add.w	r5, r5, #1
    f7d2:	b2ed      	uxtb	r5, r5
    f7d4:	4545      	cmp	r5, r8
    f7d6:	f6ff af5d 	blt.w	f694 <steppers::doInterrupt()+0x1d8>
					}
				}
	#endif

			}
			intervals_remaining -= feedrate_multiplier;
    f7da:	f242 6318 	movw	r3, #9752	; 0x2618
    f7de:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f7e2:	681a      	ldr	r2, [r3, #0]
    f7e4:	ebc8 0202 	rsb	r2, r8, r2
    f7e8:	601a      	str	r2, [r3, #0]

			if (intervals_remaining <= 0) { // should never need the < part, but just in case...
    f7ea:	681b      	ldr	r3, [r3, #0]
    f7ec:	2b00      	cmp	r3, #0
    f7ee:	dc08      	bgt.n	f802 <steppers::doInterrupt()+0x346>
				bool got_a_move = getNextMove();
    f7f0:	f7ff fa96 	bl	ed20 <steppers::getNextMove()>
				if (!got_a_move) {
    f7f4:	b928      	cbnz	r0, f802 <steppers::doInterrupt()+0x346>
					return is_running;
    f7f6:	f242 6370 	movw	r3, #9840	; 0x2670
    f7fa:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f7fe:	7818      	ldrb	r0, [r3, #0]
    f800:	e275      	b.n	fcee <steppers::doInterrupt()+0x832>
				}
			}

			if ((feedrate_steps_remaining-=feedrate_multiplier) <= 0) {
    f802:	f242 633c 	movw	r3, #9788	; 0x263c
    f806:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f80a:	681a      	ldr	r2, [r3, #0]
    f80c:	ebc8 0202 	rsb	r2, r8, r2
    f810:	601a      	str	r2, [r3, #0]
    f812:	2a00      	cmp	r2, #0
    f814:	dc33      	bgt.n	f87e <steppers::doInterrupt()+0x3c2>
				current_feedrate_index++;
    f816:	f242 5398 	movw	r3, #9624	; 0x2598
    f81a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f81e:	781a      	ldrb	r2, [r3, #0]
    f820:	f102 0201 	add.w	r2, r2, #1
    f824:	b2d2      	uxtb	r2, r2
    f826:	701a      	strb	r2, [r3, #0]
void setHoldZ(bool holdZ_in) {
	holdZ = holdZ_in;
}

inline void prepareFeedrateIntervals() {
	if (current_feedrate_index > 2){
    f828:	781b      	ldrb	r3, [r3, #0]
    f82a:	2b02      	cmp	r3, #2
    f82c:	d827      	bhi.n	f87e <steppers::doInterrupt()+0x3c2>
		return;
	}

	feedrate_steps_remaining  = feedrate_elements[current_feedrate_index].steps;
    f82e:	f242 5298 	movw	r2, #9624	; 0x2598
    f832:	f2c1 0200 	movt	r2, #4096	; 0x1000
    f836:	7811      	ldrb	r1, [r2, #0]
    f838:	f242 6348 	movw	r3, #9800	; 0x2648
    f83c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f840:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    f844:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    f848:	6848      	ldr	r0, [r1, #4]
    f84a:	f242 613c 	movw	r1, #9788	; 0x263c
    f84e:	f2c1 0100 	movt	r1, #4096	; 0x1000
    f852:	6008      	str	r0, [r1, #0]
	feedrate_changerate       = feedrate_elements[current_feedrate_index].rate;
    f854:	7811      	ldrb	r1, [r2, #0]
    f856:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    f85a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
    f85e:	f242 519c 	movw	r1, #9628	; 0x259c
    f862:	f2c1 0100 	movt	r1, #4096	; 0x1000
    f866:	6008      	str	r0, [r1, #0]
	feedrate_target           = feedrate_elements[current_feedrate_index].target;
    f868:	7812      	ldrb	r2, [r2, #0]
    f86a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    f86e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    f872:	689a      	ldr	r2, [r3, #8]
    f874:	f242 5394 	movw	r3, #9620	; 0x2594
    f878:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f87c:	601a      	str	r2, [r3, #0]
			if ((feedrate_steps_remaining-=feedrate_multiplier) <= 0) {
				current_feedrate_index++;
				prepareFeedrateIntervals();
			}

			if (feedrate_dirty) {
    f87e:	f242 6320 	movw	r3, #9760	; 0x2620
    f882:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f886:	781b      	ldrb	r3, [r3, #0]
    f888:	2b00      	cmp	r3, #0
    f88a:	d04f      	beq.n	f92c <steppers::doInterrupt()+0x470>
	feedrate_target           = feedrate_elements[current_feedrate_index].target;
}

inline void recalcFeedrate() {
	
	if((feedrate > 32768)){
    f88c:	f242 636c 	movw	r3, #9836	; 0x266c
    f890:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f894:	681b      	ldr	r3, [r3, #0]
    f896:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    f89a:	dd07      	ble.n	f8ac <steppers::doInterrupt()+0x3f0>
		feedrate_inverted = 30;
    f89c:	f242 6324 	movw	r3, #9764	; 0x2624
    f8a0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f8a4:	f04f 021e 	mov.w	r2, #30
    f8a8:	601a      	str	r2, [r3, #0]
    f8aa:	e038      	b.n	f91e <steppers::doInterrupt()+0x462>
	}
	else if(feedrate >= 8192)
    f8ac:	f242 636c 	movw	r3, #9836	; 0x266c
    f8b0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f8b4:	681b      	ldr	r3, [r3, #0]
    f8b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    f8ba:	db13      	blt.n	f8e4 <steppers::doInterrupt()+0x428>
		feedrate_inverted = rate_table_fast[(feedrate-8192) >> 4];
    f8bc:	f242 636c 	movw	r3, #9836	; 0x266c
    f8c0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f8c4:	681a      	ldr	r2, [r3, #0]
    f8c6:	f24a 73f4 	movw	r3, #42996	; 0xa7f4
    f8ca:	f2c0 0302 	movt	r3, #2
    f8ce:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
    f8d2:	ea4f 1222 	mov.w	r2, r2, asr #4
    f8d6:	5c9a      	ldrb	r2, [r3, r2]
    f8d8:	f242 6324 	movw	r3, #9764	; 0x2624
    f8dc:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f8e0:	601a      	str	r2, [r3, #0]
    f8e2:	e01c      	b.n	f91e <steppers::doInterrupt()+0x462>
//		feedrate_inverted = (int32_t)pgm_read_byte(&rate_table_fast[(feedrate-8192) >> 4]);
	else {
		if(feedrate < 32) {feedrate = 32;}
    f8e4:	f242 636c 	movw	r3, #9836	; 0x266c
    f8e8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f8ec:	681b      	ldr	r3, [r3, #0]
    f8ee:	2b1f      	cmp	r3, #31
    f8f0:	bfdf      	itttt	le
    f8f2:	f242 636c 	movwle	r3, #9836	; 0x266c
    f8f6:	f2c1 0300 	movtle	r3, #4096	; 0x1000
    f8fa:	2220      	movle	r2, #32
    f8fc:	601a      	strle	r2, [r3, #0]
		feedrate_inverted = rate_table_slow[feedrate];
    f8fe:	f242 636c 	movw	r3, #9836	; 0x266c
    f902:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f906:	681a      	ldr	r2, [r3, #0]
    f908:	f246 737c 	movw	r3, #26492	; 0x677c
    f90c:	f2c0 0302 	movt	r3, #2
    f910:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
    f914:	f242 6324 	movw	r3, #9764	; 0x2624
    f918:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f91c:	601a      	str	r2, [r3, #0]
//		feedrate_inverted = (int32_t)pgm_read_word(&rate_table_slow[feedrate]);
	}
	
	feedrate_dirty = 0;
    f91e:	f242 6320 	movw	r3, #9760	; 0x2620
    f922:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f926:	f04f 0200 	mov.w	r2, #0
    f92a:	701a      	strb	r2, [r3, #0]
			if (feedrate_dirty) {
				recalcFeedrate();
			}
		}

		if ((feedrate_changerate != 0)){
    f92c:	f242 539c 	movw	r3, #9628	; 0x259c
    f930:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f934:	681b      	ldr	r3, [r3, #0]
    f936:	2b00      	cmp	r3, #0
    f938:	d045      	beq.n	f9c6 <steppers::doInterrupt()+0x50a>
			 
			// Change our feedrate. 
			feedrate += feedrate_changerate;
    f93a:	f242 626c 	movw	r2, #9836	; 0x266c
    f93e:	f2c1 0200 	movt	r2, #4096	; 0x1000
    f942:	6810      	ldr	r0, [r2, #0]
    f944:	f242 539c 	movw	r3, #9628	; 0x259c
    f948:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f94c:	6819      	ldr	r1, [r3, #0]
    f94e:	1841      	adds	r1, r0, r1
    f950:	6011      	str	r1, [r2, #0]
			feedrate_dirty = 1;
    f952:	f242 6220 	movw	r2, #9760	; 0x2620
    f956:	f2c1 0200 	movt	r2, #4096	; 0x1000
    f95a:	f04f 0101 	mov.w	r1, #1
    f95e:	7011      	strb	r1, [r2, #0]

			if ((feedrate_changerate > 0 && feedrate > feedrate_target)
    f960:	681b      	ldr	r3, [r3, #0]
    f962:	2b00      	cmp	r3, #0
    f964:	dd0b      	ble.n	f97e <steppers::doInterrupt()+0x4c2>
    f966:	f242 636c 	movw	r3, #9836	; 0x266c
    f96a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f96e:	681a      	ldr	r2, [r3, #0]
    f970:	f242 5394 	movw	r3, #9620	; 0x2594
    f974:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f978:	681b      	ldr	r3, [r3, #0]
    f97a:	429a      	cmp	r2, r3
    f97c:	dc12      	bgt.n	f9a4 <steppers::doInterrupt()+0x4e8>
    f97e:	f242 539c 	movw	r3, #9628	; 0x259c
    f982:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f986:	681b      	ldr	r3, [r3, #0]
    f988:	2b00      	cmp	r3, #0
    f98a:	da1c      	bge.n	f9c6 <steppers::doInterrupt()+0x50a>
    f98c:	f242 636c 	movw	r3, #9836	; 0x266c
    f990:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f994:	681a      	ldr	r2, [r3, #0]
    f996:	f242 5394 	movw	r3, #9620	; 0x2594
    f99a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f99e:	681b      	ldr	r3, [r3, #0]
    f9a0:	429a      	cmp	r2, r3
    f9a2:	da10      	bge.n	f9c6 <steppers::doInterrupt()+0x50a>
			    || (feedrate_changerate < 0 && feedrate < feedrate_target)) {
				
				feedrate_changerate = 0;
    f9a4:	f242 539c 	movw	r3, #9628	; 0x259c
    f9a8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f9ac:	f04f 0200 	mov.w	r2, #0
    f9b0:	601a      	str	r2, [r3, #0]
				feedrate = feedrate_target;
    f9b2:	f242 5394 	movw	r3, #9620	; 0x2594
    f9b6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f9ba:	681a      	ldr	r2, [r3, #0]
    f9bc:	f242 636c 	movw	r3, #9836	; 0x266c
    f9c0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f9c4:	601a      	str	r2, [r3, #0]
			} 
		}
//		xprintf("return is_running" " (%s:%d)\n",_F_,_L_);
//		_delay_us(10000);
	
		return is_running;
    f9c6:	f242 6370 	movw	r3, #9840	; 0x2670
    f9ca:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f9ce:	7818      	ldrb	r0, [r3, #0]
    f9d0:	e18d      	b.n	fcee <steppers::doInterrupt()+0x832>
	} else if (is_homing) {
    f9d2:	f242 6314 	movw	r3, #9748	; 0x2614
    f9d6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f9da:	781b      	ldrb	r3, [r3, #0]
    f9dc:	2b00      	cmp	r3, #0
    f9de:	f000 816c 	beq.w	fcba <steppers::doInterrupt()+0x7fe>
		timer_counter -= HOMING_INTERVAL_IN_MICROSECONDS;//interval_microseconds;
    f9e2:	f242 6310 	movw	r3, #9744	; 0x2610
    f9e6:	f2c1 0300 	movt	r3, #4096	; 0x1000
    f9ea:	681a      	ldr	r2, [r3, #0]
    f9ec:	f1a2 0280 	sub.w	r2, r2, #128	; 0x80
    f9f0:	601a      	str	r2, [r3, #0]
		if (timer_counter <= 0) {
    f9f2:	681b      	ldr	r3, [r3, #0]
    f9f4:	2b00      	cmp	r3, #0
    f9f6:	f300 814c 	bgt.w	fc92 <steppers::doInterrupt()+0x7d6>
			is_homing = false;
    f9fa:	f242 6314 	movw	r3, #9748	; 0x2614
    f9fe:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fa02:	f04f 0200 	mov.w	r2, #0
    fa06:	701a      	strb	r2, [r3, #0]
			// if we are supposed to step too fast, we simulate double-size microsteps
			int8_t feedrate_multiplier = 1;
			while (timer_counter <= -feedrate_inverted) {
    fa08:	f242 6324 	movw	r3, #9764	; 0x2624
    fa0c:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fa10:	681a      	ldr	r2, [r3, #0]
    fa12:	f242 6310 	movw	r3, #9744	; 0x2610
    fa16:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fa1a:	681b      	ldr	r3, [r3, #0]
    fa1c:	f1c2 0200 	rsb	r2, r2, #0
    fa20:	429a      	cmp	r2, r3
    fa22:	da10      	bge.n	fa46 <steppers::doInterrupt()+0x58a>
	} else if (is_homing) {
		timer_counter -= HOMING_INTERVAL_IN_MICROSECONDS;//interval_microseconds;
		if (timer_counter <= 0) {
			is_homing = false;
			// if we are supposed to step too fast, we simulate double-size microsteps
			int8_t feedrate_multiplier = 1;
    fa24:	f04f 0601 	mov.w	r6, #1
			while (timer_counter <= -feedrate_inverted) {
				feedrate_multiplier++;
    fa28:	f04f 0700 	mov.w	r7, #0
				timer_counter += feedrate_inverted;
			}

			//TODO: Port endstop check to handle max/min pins = NULL and non-inverted endstops ( see old stepper interface functions)
			for (int8_t i = 0; i < feedrate_multiplier; i++){
				if (delta[X_AXIS] != 0){
    fa2c:	f242 6528 	movw	r5, #9768	; 0x2628
    fa30:	f2c1 0500 	movt	r5, #4096	; 0x1000
					counter[X_AXIS] += delta[X_AXIS];
    fa34:	f242 54a4 	movw	r4, #9636	; 0x25a4
    fa38:	f2c1 0400 	movt	r4, #4096	; 0x1000
					if (counter[X_AXIS] >= 0) {
						counter[X_AXIS] -= intervals;
    fa3c:	f242 5888 	movw	r8, #9608	; 0x2588
    fa40:	f2c1 0800 	movt	r8, #4096	; 0x1000
    fa44:	e01a      	b.n	fa7c <steppers::doInterrupt()+0x5c0>
	} else if (is_homing) {
		timer_counter -= HOMING_INTERVAL_IN_MICROSECONDS;//interval_microseconds;
		if (timer_counter <= 0) {
			is_homing = false;
			// if we are supposed to step too fast, we simulate double-size microsteps
			int8_t feedrate_multiplier = 1;
    fa46:	f04f 0601 	mov.w	r6, #1
			while (timer_counter <= -feedrate_inverted) {
				feedrate_multiplier++;
				timer_counter += feedrate_inverted;
    fa4a:	f242 6310 	movw	r3, #9744	; 0x2610
    fa4e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fa52:	f242 6224 	movw	r2, #9764	; 0x2624
    fa56:	f2c1 0200 	movt	r2, #4096	; 0x1000
		if (timer_counter <= 0) {
			is_homing = false;
			// if we are supposed to step too fast, we simulate double-size microsteps
			int8_t feedrate_multiplier = 1;
			while (timer_counter <= -feedrate_inverted) {
				feedrate_multiplier++;
    fa5a:	f106 0601 	add.w	r6, r6, #1
    fa5e:	b2f6      	uxtb	r6, r6
				timer_counter += feedrate_inverted;
    fa60:	6818      	ldr	r0, [r3, #0]
    fa62:	6811      	ldr	r1, [r2, #0]
    fa64:	1841      	adds	r1, r0, r1
    fa66:	6019      	str	r1, [r3, #0]
		timer_counter -= HOMING_INTERVAL_IN_MICROSECONDS;//interval_microseconds;
		if (timer_counter <= 0) {
			is_homing = false;
			// if we are supposed to step too fast, we simulate double-size microsteps
			int8_t feedrate_multiplier = 1;
			while (timer_counter <= -feedrate_inverted) {
    fa68:	6810      	ldr	r0, [r2, #0]
    fa6a:	6819      	ldr	r1, [r3, #0]
    fa6c:	f1c0 0000 	rsb	r0, r0, #0
    fa70:	4288      	cmp	r0, r1
    fa72:	daf2      	bge.n	fa5a <steppers::doInterrupt()+0x59e>
				feedrate_multiplier++;
				timer_counter += feedrate_inverted;
			}

			//TODO: Port endstop check to handle max/min pins = NULL and non-inverted endstops ( see old stepper interface functions)
			for (int8_t i = 0; i < feedrate_multiplier; i++){
    fa74:	b273      	sxtb	r3, r6
    fa76:	2b00      	cmp	r3, #0
    fa78:	dcd6      	bgt.n	fa28 <steppers::doInterrupt()+0x56c>
    fa7a:	e0f6      	b.n	fc6a <steppers::doInterrupt()+0x7ae>
				if (delta[X_AXIS] != 0){
    fa7c:	682b      	ldr	r3, [r5, #0]
    fa7e:	2b00      	cmp	r3, #0
    fa80:	d04d      	beq.n	fb1e <steppers::doInterrupt()+0x662>
					counter[X_AXIS] += delta[X_AXIS];
    fa82:	6822      	ldr	r2, [r4, #0]
    fa84:	682b      	ldr	r3, [r5, #0]
    fa86:	18d3      	adds	r3, r2, r3
    fa88:	6023      	str	r3, [r4, #0]
					if (counter[X_AXIS] >= 0) {
    fa8a:	6823      	ldr	r3, [r4, #0]
    fa8c:	2b00      	cmp	r3, #0
    fa8e:	db46      	blt.n	fb1e <steppers::doInterrupt()+0x662>
						counter[X_AXIS] -= intervals;
    fa90:	6822      	ldr	r2, [r4, #0]
    fa92:	f8d8 3000 	ldr.w	r3, [r8]
    fa96:	1ad3      	subs	r3, r2, r3
    fa98:	6023      	str	r3, [r4, #0]
						bool hit_endstop = direction[X_AXIS] ? !_READ(X_MAX_PORT, X_MAX_BIT) : !_READ(X_MIN_PORT, X_MIN_BIT);
    fa9a:	f242 6340 	movw	r3, #9792	; 0x2640
    fa9e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    faa2:	781b      	ldrb	r3, [r3, #0]
    faa4:	b14b      	cbz	r3, faba <steppers::doInterrupt()+0x5fe>
    faa6:	f04f 0000 	mov.w	r0, #0
    faaa:	f7f3 fd35 	bl	3518 <FIO_ReadValue>
    faae:	f410 6f00 	tst.w	r0, #2048	; 0x800
    fab2:	bf14      	ite	ne
    fab4:	2300      	movne	r3, #0
    fab6:	2301      	moveq	r3, #1
    fab8:	e008      	b.n	facc <steppers::doInterrupt()+0x610>
    faba:	f04f 0000 	mov.w	r0, #0
    fabe:	f7f3 fd2b 	bl	3518 <FIO_ReadValue>
    fac2:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
    fac6:	bf14      	ite	ne
    fac8:	2300      	movne	r3, #0
    faca:	2301      	moveq	r3, #1
//						bool hit_endstop = direction[X_AXIS] ? !_READ(X_MAX) : !_READ(X_MIN);
						if (!hit_endstop) {
    facc:	bb0b      	cbnz	r3, fb12 <steppers::doInterrupt()+0x656>
							_WRITE(X_STEP_PORT, X_STEP_BIT, true);
    face:	f04f 0002 	mov.w	r0, #2
    fad2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    fad6:	f7f3 fd05 	bl	34e4 <GPIO_SetValue>
//							_WRITE(X_STEP, true);
							is_homing |= true;
    fada:	f242 6314 	movw	r3, #9748	; 0x2614
    fade:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fae2:	781a      	ldrb	r2, [r3, #0]
    fae4:	f04f 0201 	mov.w	r2, #1
    fae8:	701a      	strb	r2, [r3, #0]
							position[X_AXIS] += step_change[X_AXIS];
    faea:	f242 6300 	movw	r3, #9728	; 0x2600
    faee:	f2c1 0300 	movt	r3, #4096	; 0x1000
    faf2:	6819      	ldr	r1, [r3, #0]
    faf4:	f242 6244 	movw	r2, #9796	; 0x2644
    faf8:	f2c1 0200 	movt	r2, #4096	; 0x1000
    fafc:	7812      	ldrb	r2, [r2, #0]
    fafe:	b252      	sxtb	r2, r2
    fb00:	188a      	adds	r2, r1, r2
    fb02:	601a      	str	r2, [r3, #0]
							_WRITE(X_STEP_PORT, X_STEP_BIT, false);
    fb04:	f04f 0002 	mov.w	r0, #2
    fb08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    fb0c:	f7f3 fcf2 	bl	34f4 <GPIO_ClearValue>
    fb10:	e005      	b.n	fb1e <steppers::doInterrupt()+0x662>
//							_WRITE(X_STEP, false);
						} else {
							is_homing |= false;
    fb12:	f242 6314 	movw	r3, #9748	; 0x2614
    fb16:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fb1a:	781a      	ldrb	r2, [r3, #0]
    fb1c:	701a      	strb	r2, [r3, #0]
						}
					}
				}
				
				if (delta[Y_AXIS] != 0){
    fb1e:	686b      	ldr	r3, [r5, #4]
    fb20:	2b00      	cmp	r3, #0
    fb22:	d04b      	beq.n	fbbc <steppers::doInterrupt()+0x700>
					counter[Y_AXIS] += delta[Y_AXIS];
    fb24:	6862      	ldr	r2, [r4, #4]
    fb26:	686b      	ldr	r3, [r5, #4]
    fb28:	18d3      	adds	r3, r2, r3
    fb2a:	6063      	str	r3, [r4, #4]
					if (counter[Y_AXIS] >= 0) {
    fb2c:	6863      	ldr	r3, [r4, #4]
    fb2e:	2b00      	cmp	r3, #0
    fb30:	db44      	blt.n	fbbc <steppers::doInterrupt()+0x700>
						counter[Y_AXIS] -= intervals;
    fb32:	6862      	ldr	r2, [r4, #4]
    fb34:	f8d8 3000 	ldr.w	r3, [r8]
    fb38:	1ad3      	subs	r3, r2, r3
    fb3a:	6063      	str	r3, [r4, #4]
						bool hit_endstop = direction[Y_AXIS] ? !_READ(Y_MAX_PORT, Y_MAX_BIT) : !_READ(Y_MIN_PORT, Y_MIN_BIT);
    fb3c:	f242 6340 	movw	r3, #9792	; 0x2640
    fb40:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fb44:	785b      	ldrb	r3, [r3, #1]
    fb46:	b14b      	cbz	r3, fb5c <steppers::doInterrupt()+0x6a0>
    fb48:	f04f 0001 	mov.w	r0, #1
    fb4c:	f7f3 fce4 	bl	3518 <FIO_ReadValue>
    fb50:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    fb54:	bf14      	ite	ne
    fb56:	2300      	movne	r3, #0
    fb58:	2301      	moveq	r3, #1
    fb5a:	e008      	b.n	fb6e <steppers::doInterrupt()+0x6b2>
    fb5c:	f04f 0001 	mov.w	r0, #1
    fb60:	f7f3 fcda 	bl	3518 <FIO_ReadValue>
    fb64:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
    fb68:	bf14      	ite	ne
    fb6a:	2300      	movne	r3, #0
    fb6c:	2301      	moveq	r3, #1
//						bool hit_endstop = direction[Y_AXIS] ? !_READ(Y_MAX) : !_READ(Y_MIN);
						if (!hit_endstop) {
    fb6e:	b9fb      	cbnz	r3, fbb0 <steppers::doInterrupt()+0x6f4>
							_WRITE(Y_STEP_PORT, Y_STEP_BIT, true);
    fb70:	f04f 0001 	mov.w	r0, #1
    fb74:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    fb78:	f7f3 fcb4 	bl	34e4 <GPIO_SetValue>
//							_WRITE(Y_STEP, true);
							is_homing |= true;
    fb7c:	f242 6314 	movw	r3, #9748	; 0x2614
    fb80:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fb84:	781a      	ldrb	r2, [r3, #0]
    fb86:	f04f 0001 	mov.w	r0, #1
    fb8a:	7018      	strb	r0, [r3, #0]
							position[Y_AXIS] += step_change[Y_AXIS];
    fb8c:	f242 6300 	movw	r3, #9728	; 0x2600
    fb90:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fb94:	6859      	ldr	r1, [r3, #4]
    fb96:	f242 6244 	movw	r2, #9796	; 0x2644
    fb9a:	f2c1 0200 	movt	r2, #4096	; 0x1000
    fb9e:	7852      	ldrb	r2, [r2, #1]
    fba0:	b252      	sxtb	r2, r2
    fba2:	188a      	adds	r2, r1, r2
    fba4:	605a      	str	r2, [r3, #4]
							_WRITE(Y_STEP_PORT, Y_STEP_BIT, false);
    fba6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    fbaa:	f7f3 fca3 	bl	34f4 <GPIO_ClearValue>
    fbae:	e005      	b.n	fbbc <steppers::doInterrupt()+0x700>
//							_WRITE(Y_STEP, false);
						} else {
							is_homing |= false;
    fbb0:	f242 6314 	movw	r3, #9748	; 0x2614
    fbb4:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fbb8:	781a      	ldrb	r2, [r3, #0]
    fbba:	701a      	strb	r2, [r3, #0]
						}
					}
				}
				
				if (delta[Z_AXIS] != 0){
    fbbc:	68ab      	ldr	r3, [r5, #8]
    fbbe:	2b00      	cmp	r3, #0
    fbc0:	d04b      	beq.n	fc5a <steppers::doInterrupt()+0x79e>
					counter[Z_AXIS] += delta[Z_AXIS];
    fbc2:	68a2      	ldr	r2, [r4, #8]
    fbc4:	68ab      	ldr	r3, [r5, #8]
    fbc6:	18d3      	adds	r3, r2, r3
    fbc8:	60a3      	str	r3, [r4, #8]
					if (counter[Z_AXIS] >= 0) {
    fbca:	68a3      	ldr	r3, [r4, #8]
    fbcc:	2b00      	cmp	r3, #0
    fbce:	db44      	blt.n	fc5a <steppers::doInterrupt()+0x79e>
						counter[Z_AXIS] -= intervals;
    fbd0:	68a2      	ldr	r2, [r4, #8]
    fbd2:	f8d8 3000 	ldr.w	r3, [r8]
    fbd6:	1ad3      	subs	r3, r2, r3
    fbd8:	60a3      	str	r3, [r4, #8]
						bool hit_endstop = direction[Z_AXIS] ? !_READ(Z_MAX_PORT, Z_MAX_BIT) : !_READ(Z_MIN_PORT, Z_MIN_BIT);
    fbda:	f242 6340 	movw	r3, #9792	; 0x2640
    fbde:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fbe2:	789b      	ldrb	r3, [r3, #2]
    fbe4:	b14b      	cbz	r3, fbfa <steppers::doInterrupt()+0x73e>
    fbe6:	f04f 0003 	mov.w	r0, #3
    fbea:	f7f3 fc95 	bl	3518 <FIO_ReadValue>
    fbee:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
    fbf2:	bf14      	ite	ne
    fbf4:	2300      	movne	r3, #0
    fbf6:	2301      	moveq	r3, #1
    fbf8:	e008      	b.n	fc0c <steppers::doInterrupt()+0x750>
    fbfa:	f04f 0001 	mov.w	r0, #1
    fbfe:	f7f3 fc8b 	bl	3518 <FIO_ReadValue>
    fc02:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
    fc06:	bf14      	ite	ne
    fc08:	2300      	movne	r3, #0
    fc0a:	2301      	moveq	r3, #1
//						bool hit_endstop = direction[Z_AXIS] ? !_READ(Z_MAX) : !_READ(Z_MIN);
						if (!hit_endstop) {
    fc0c:	b9fb      	cbnz	r3, fc4e <steppers::doInterrupt()+0x792>
							_WRITE(Z_STEP_PORT, Z_STEP_BIT, true);
    fc0e:	f04f 0001 	mov.w	r0, #1
    fc12:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    fc16:	f7f3 fc65 	bl	34e4 <GPIO_SetValue>
//							_WRITE(Z_STEP, true);
							is_homing |= true;
    fc1a:	f242 6314 	movw	r3, #9748	; 0x2614
    fc1e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fc22:	781a      	ldrb	r2, [r3, #0]
    fc24:	f04f 0001 	mov.w	r0, #1
    fc28:	7018      	strb	r0, [r3, #0]
							position[Z_AXIS] += step_change[Z_AXIS];
    fc2a:	f242 6300 	movw	r3, #9728	; 0x2600
    fc2e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fc32:	6899      	ldr	r1, [r3, #8]
    fc34:	f242 6244 	movw	r2, #9796	; 0x2644
    fc38:	f2c1 0200 	movt	r2, #4096	; 0x1000
    fc3c:	7892      	ldrb	r2, [r2, #2]
    fc3e:	b252      	sxtb	r2, r2
    fc40:	188a      	adds	r2, r1, r2
    fc42:	609a      	str	r2, [r3, #8]
							_WRITE(Z_STEP_PORT, Z_STEP_BIT, false);
    fc44:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    fc48:	f7f3 fc54 	bl	34f4 <GPIO_ClearValue>
    fc4c:	e005      	b.n	fc5a <steppers::doInterrupt()+0x79e>
//							_WRITE(Z_STEP, false);
						} else {
							is_homing |= false;
    fc4e:	f242 6314 	movw	r3, #9748	; 0x2614
    fc52:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fc56:	781a      	ldrb	r2, [r3, #0]
    fc58:	701a      	strb	r2, [r3, #0]
				feedrate_multiplier++;
				timer_counter += feedrate_inverted;
			}

			//TODO: Port endstop check to handle max/min pins = NULL and non-inverted endstops ( see old stepper interface functions)
			for (int8_t i = 0; i < feedrate_multiplier; i++){
    fc5a:	f107 0701 	add.w	r7, r7, #1
    fc5e:	b2ff      	uxtb	r7, r7
    fc60:	b272      	sxtb	r2, r6
    fc62:	b27b      	sxtb	r3, r7
    fc64:	429a      	cmp	r2, r3
    fc66:	f73f af09 	bgt.w	fa7c <steppers::doInterrupt()+0x5c0>
					}
				}
			}
			
			// if we're done, force a sync with the planner
			if (!is_homing)
    fc6a:	f242 6314 	movw	r3, #9748	; 0x2614
    fc6e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fc72:	781b      	ldrb	r3, [r3, #0]
    fc74:	b90b      	cbnz	r3, fc7a <steppers::doInterrupt()+0x7be>
				planner::abort();
    fc76:	f7fd f9c7 	bl	d008 <planner::abort()>

			timer_counter += feedrate_inverted;
    fc7a:	f242 6310 	movw	r3, #9744	; 0x2610
    fc7e:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fc82:	6819      	ldr	r1, [r3, #0]
    fc84:	f242 6224 	movw	r2, #9764	; 0x2624
    fc88:	f2c1 0200 	movt	r2, #4096	; 0x1000
    fc8c:	6812      	ldr	r2, [r2, #0]
    fc8e:	188a      	adds	r2, r1, r2
    fc90:	601a      	str	r2, [r3, #0]
		}
		xprintf("e");
    fc92:	f64b 1074 	movw	r0, #47476	; 0xb974
    fc96:	f2c0 0002 	movt	r0, #2
    fc9a:	f7f6 fc1b 	bl	64d4 <xprintf>
//		xprintf("end ??" " (%s:%d)\n",_F_,_L_);
//		_delay_us(10000);
		// if we're done, force a sync with the planner
		if (!is_homing)
    fc9e:	f242 6314 	movw	r3, #9748	; 0x2614
    fca2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fca6:	781b      	ldrb	r3, [r3, #0]
    fca8:	b90b      	cbnz	r3, fcae <steppers::doInterrupt()+0x7f2>
			planner::abort();
    fcaa:	f7fd f9ad 	bl	d008 <planner::abort()>
		return is_homing;
    fcae:	f242 6314 	movw	r3, #9748	; 0x2614
    fcb2:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fcb6:	7818      	ldrb	r0, [r3, #0]
    fcb8:	e019      	b.n	fcee <steppers::doInterrupt()+0x832>
	}
	DEBUG_LED4.setValue(false);
    fcba:	a806      	add	r0, sp, #24
    fcbc:	f242 51b4 	movw	r1, #9652	; 0x25b4
    fcc0:	f2c1 0100 	movt	r1, #4096	; 0x1000
    fcc4:	f04f 0217 	mov.w	r2, #23
    fcc8:	f001 fa08 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
    fccc:	f89d 3019 	ldrb.w	r3, [sp, #25]
//	xprintf("%d" " (%s:%d)\n",Motherboard::getBoard().getCurrentMillis(),_F_,_L_);
	return false;
    fcd0:	f04f 0000 	mov.w	r0, #0
    fcd4:	b95b      	cbnz	r3, fcee <steppers::doInterrupt()+0x832>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
    fcd6:	f89d 301a 	ldrb.w	r3, [sp, #26]
    fcda:	f89d 0018 	ldrb.w	r0, [sp, #24]
    fcde:	f04f 0101 	mov.w	r1, #1
    fce2:	fa01 f103 	lsl.w	r1, r1, r3
    fce6:	f7f3 fc05 	bl	34f4 <GPIO_ClearValue>
    fcea:	f04f 0000 	mov.w	r0, #0
}
    fcee:	b009      	add	sp, #36	; 0x24
    fcf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				axis_active[i] = IsActive(i);
			}
#else
			//TODO: Port this to handle max/min pins = NULL and non-inverted endstops ( see old stepper interface functions)
			//TODO: READ ENDSTOPS ALL AT ONCE
			axis_active[X_AXIS] = (delta[X_AXIS] != 0) && !(direction[X_AXIS] ? !_READ(X_MAX_PORT, X_MAX_BIT) : !_READ(X_MIN_PORT, X_MIN_BIT));
    fcf4:	f242 6328 	movw	r3, #9768	; 0x2628
    fcf8:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fcfc:	681b      	ldr	r3, [r3, #0]
    fcfe:	f04f 0700 	mov.w	r7, #0
    fd02:	2b00      	cmp	r3, #0
    fd04:	f43f ac65 	beq.w	f5d2 <steppers::doInterrupt()+0x116>
    fd08:	e44a      	b.n	f5a0 <steppers::doInterrupt()+0xe4>
    fd0a:	bf00      	nop

0000fd0c <_GLOBAL__sub_I__ZN8steppers9digi_potsE>:
	DEBUG_LED4.setValue(false);
//	xprintf("%d" " (%s:%d)\n",Motherboard::getBoard().getCurrentMillis(),_F_,_L_);
	return false;
}

}
    fd0c:	b530      	push	{r4, r5, lr}
    fd0e:	b08d      	sub	sp, #52	; 0x34
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
    fd10:	f242 50a0 	movw	r0, #9632	; 0x25a0
    fd14:	f2c1 0000 	movt	r0, #4096	; 0x1000
    fd18:	f04f 0100 	mov.w	r1, #0
    fd1c:	f000 ffcc 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
    fd20:	f242 50b4 	movw	r0, #9652	; 0x25b4
    fd24:	f2c1 0000 	movt	r0, #4096	; 0x1000
    fd28:	f04f 0101 	mov.w	r1, #1
    fd2c:	f000 ffc4 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
    fd30:	f242 50f0 	movw	r0, #9712	; 0x25f0
    fd34:	f2c1 0000 	movt	r0, #4096	; 0x1000
    fd38:	f04f 0102 	mov.w	r1, #2
    fd3c:	f000 ffbc 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
    fd40:	f242 50b8 	movw	r0, #9656	; 0x25b8
    fd44:	f2c1 0000 	movt	r0, #4096	; 0x1000
    fd48:	f04f 0103 	mov.w	r1, #3
    fd4c:	f000 ffb4 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
    fd50:	f242 50fc 	movw	r0, #9724	; 0x25fc
    fd54:	f2c1 0000 	movt	r0, #4096	; 0x1000
    fd58:	f04f 0104 	mov.w	r1, #4
    fd5c:	f000 ffac 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
    fd60:	f242 548c 	movw	r4, #9612	; 0x258c
    fd64:	f2c1 0400 	movt	r4, #4096	; 0x1000
    fd68:	4620      	mov	r0, r4
    fd6a:	f04f 01ff 	mov.w	r1, #255	; 0xff
    fd6e:	f000 ffa3 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
	};
	// currently not used:
	//const uint8_t getPinIndex() const { return pin_index; }
};

static const Pin NullPin(NullPort, 0);
    fd72:	f242 50f4 	movw	r0, #9716	; 0x25f4
    fd76:	f2c1 0000 	movt	r0, #4096	; 0x1000
    fd7a:	4621      	mov	r1, r4
    fd7c:	f04f 0200 	mov.w	r2, #0
    fd80:	f001 f9ac 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
#endif
#if STEPPER_COUNT > 4
        DigiPots(B_POT_PIN,
				eeprom_offsets::DIGI_POT_SETTINGS),
#endif
};
    fd84:	a809      	add	r0, sp, #36	; 0x24
    fd86:	f04f 01ff 	mov.w	r1, #255	; 0xff
    fd8a:	f000 ff95 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
    fd8e:	a80a      	add	r0, sp, #40	; 0x28
    fd90:	a909      	add	r1, sp, #36	; 0x24
    fd92:	f04f 02ff 	mov.w	r2, #255	; 0xff
    fd96:	f001 f9a1 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
    fd9a:	f242 55bc 	movw	r5, #9660	; 0x25bc
    fd9e:	f2c1 0500 	movt	r5, #4096	; 0x1000
    fda2:	f24a 74f2 	movw	r4, #42994	; 0xa7f2
    fda6:	f2c0 0402 	movt	r4, #2
    fdaa:	4628      	mov	r0, r5
    fdac:	a90a      	add	r1, sp, #40	; 0x28
    fdae:	4622      	mov	r2, r4
    fdb0:	f000 fa4c 	bl	1024c <DigiPots::DigiPots(Pin const&, unsigned short const&)>
    fdb4:	a806      	add	r0, sp, #24
    fdb6:	f04f 01ff 	mov.w	r1, #255	; 0xff
    fdba:	f000 ff7d 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
    fdbe:	a807      	add	r0, sp, #28
    fdc0:	a906      	add	r1, sp, #24
    fdc2:	f04f 02ff 	mov.w	r2, #255	; 0xff
    fdc6:	f001 f989 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
    fdca:	f105 000a 	add.w	r0, r5, #10
    fdce:	a907      	add	r1, sp, #28
    fdd0:	4622      	mov	r2, r4
    fdd2:	f000 fa3b 	bl	1024c <DigiPots::DigiPots(Pin const&, unsigned short const&)>
    fdd6:	a803      	add	r0, sp, #12
    fdd8:	f04f 01ff 	mov.w	r1, #255	; 0xff
    fddc:	f000 ff6c 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
    fde0:	a804      	add	r0, sp, #16
    fde2:	a903      	add	r1, sp, #12
    fde4:	f04f 02ff 	mov.w	r2, #255	; 0xff
    fde8:	f001 f978 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
    fdec:	f105 0014 	add.w	r0, r5, #20
    fdf0:	a904      	add	r1, sp, #16
    fdf2:	4622      	mov	r2, r4
    fdf4:	f000 fa2a 	bl	1024c <DigiPots::DigiPots(Pin const&, unsigned short const&)>
    fdf8:	4668      	mov	r0, sp
    fdfa:	f04f 01ff 	mov.w	r1, #255	; 0xff
    fdfe:	f000 ff5b 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
    fe02:	a801      	add	r0, sp, #4
    fe04:	4669      	mov	r1, sp
    fe06:	f04f 02ff 	mov.w	r2, #255	; 0xff
    fe0a:	f001 f967 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
    fe0e:	f105 001e 	add.w	r0, r5, #30
    fe12:	a901      	add	r1, sp, #4
    fe14:	4622      	mov	r2, r4
    fe16:	f000 fa19 	bl	1024c <DigiPots::DigiPots(Pin const&, unsigned short const&)>
	DEBUG_LED4.setValue(false);
//	xprintf("%d" " (%s:%d)\n",Motherboard::getBoard().getCurrentMillis(),_F_,_L_);
	return false;
}

}
    fe1a:	b00d      	add	sp, #52	; 0x34
    fe1c:	bd30      	pop	{r4, r5, pc}
    fe1e:	bf00      	nop

0000fe20 <utility::isPlaying()>:
	 uint8_t * buildFile;
	  
 /// returns true if script is running
 bool isPlaying(){
	 
	 return is_playing;		 
    fe20:	f242 637c 	movw	r3, #9852	; 0x267c
    fe24:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fe28:	7818      	ldrb	r0, [r3, #0]
 }
    fe2a:	4770      	bx	lr

0000fe2c <utility::reset()>:
 void reset(){
	 uint16_t build_index = 0;
	 uint16_t build_length = 0;
	 is_playing = false;
    fe2c:	f242 637c 	movw	r3, #9852	; 0x267c
    fe30:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fe34:	f04f 0200 	mov.w	r2, #0
    fe38:	701a      	strb	r2, [r3, #0]
 
 }
    fe3a:	4770      	bx	lr

0000fe3c <utility::playbackHasNext()>:
 
 /// returns true if more bytes are available in the script
 bool playbackHasNext(){
	return (build_index < build_length);
    fe3c:	f242 6278 	movw	r2, #9848	; 0x2678
    fe40:	f2c1 0200 	movt	r2, #4096	; 0x1000
    fe44:	f242 6380 	movw	r3, #9856	; 0x2680
    fe48:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fe4c:	6810      	ldr	r0, [r2, #0]
    fe4e:	681b      	ldr	r3, [r3, #0]
 }
    fe50:	4298      	cmp	r0, r3
    fe52:	bfac      	ite	ge
    fe54:	2000      	movge	r0, #0
    fe56:	2001      	movlt	r0, #1
    fe58:	4770      	bx	lr
    fe5a:	bf00      	nop

0000fe5c <utility::playbackNext()>:
 /// gets next byte in script
 uint8_t playbackNext(){
	 
	 uint8_t byte;
	 
	 if(build_index < build_length)
    fe5c:	f242 6378 	movw	r3, #9848	; 0x2678
    fe60:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fe64:	681a      	ldr	r2, [r3, #0]
    fe66:	f242 6380 	movw	r3, #9856	; 0x2680
    fe6a:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fe6e:	681b      	ldr	r3, [r3, #0]
    fe70:	429a      	cmp	r2, r3
	 {
		 byte = pgm_read_byte(buildFile + build_index++);
    fe72:	bfbf      	itttt	lt
    fe74:	f242 6374 	movwlt	r3, #9844	; 0x2674
    fe78:	f2c1 0300 	movtlt	r3, #4096	; 0x1000
    fe7c:	681b      	ldrlt	r3, [r3, #0]
    fe7e:	5c98      	ldrblt	r0, [r3, r2]
    fe80:	bfbf      	itttt	lt
    fe82:	f242 6378 	movwlt	r3, #9848	; 0x2678
    fe86:	f2c1 0300 	movtlt	r3, #4096	; 0x1000
    fe8a:	3201      	addlt	r2, #1
    fe8c:	601a      	strlt	r2, [r3, #0]
		return byte;
	}

	else 
		return 0;
    fe8e:	bfa8      	it	ge
    fe90:	2000      	movge	r0, #0
 }
    fe92:	4770      	bx	lr

0000fe94 <utility::finishPlayback()>:
	
 }
 
 /// updates state to finished playback
 void finishPlayback(){
	is_playing = false;
    fe94:	f242 637c 	movw	r3, #9852	; 0x267c
    fe98:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fe9c:	f04f 0200 	mov.w	r2, #0
    fea0:	701a      	strb	r2, [r3, #0]
	
 }
    fea2:	4770      	bx	lr

0000fea4 <IAP::erase(int, int)>:
 *  @param    start    a Start Sector Number
 *  @param    end      an End Sector Number (should be greater than or equal to start sector number).
 *  @return   error code: CMD_SUCCESS | BUSY | SECTOR_NOT_PREPARED_FOR_WRITE_OPERATION | INVALID_SECTOR
 */

int IAP::erase( int start, int end ) {
    fea4:	b510      	push	{r4, lr}
    fea6:	4604      	mov	r4, r0
    IAP_command[ 0 ]    = IAPCommand_Erase_sector;
    fea8:	f04f 0334 	mov.w	r3, #52	; 0x34
    feac:	6043      	str	r3, [r0, #4]
    IAP_command[ 1 ]    = (unsigned int)start;  //  Start Sector Number
    feae:	6081      	str	r1, [r0, #8]
    IAP_command[ 2 ]    = (unsigned int)end;    //  End Sector Number (should be greater than or equal to start sector number)
    feb0:	60c2      	str	r2, [r0, #12]
    IAP_command[ 3 ]    = cclk_kHz;             //  CPU Clock Frequency (CCLK) in kHz
    feb2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    feb4:	6103      	str	r3, [r0, #16]

    iap_entry( IAP_command, IAP_result );
    feb6:	6803      	ldr	r3, [r0, #0]
    feb8:	f100 0004 	add.w	r0, r0, #4
    febc:	f104 0118 	add.w	r1, r4, #24
    fec0:	4798      	blx	r3

    return ( (int)IAP_result[ 0 ] );
}
    fec2:	69a0      	ldr	r0, [r4, #24]
    fec4:	bd10      	pop	{r4, pc}
    fec6:	bf00      	nop

0000fec8 <initAnalogPin(unsigned char)>:
#else
    // We are using the AVcc as our reference.  There's a 100nF cap
    // to ground on the AREF pin.
//    const uint8_t ANALOG_REF = 0x01;

void initAnalogPin(uint8_t pin) {
    fec8:	b570      	push	{r4, r5, r6, lr}
    feca:	b082      	sub	sp, #8
    fecc:	4605      	mov	r5, r0
	xprintf("initAnalogPin" " (%s:%d)\n",_F_,_L_);
    fece:	f64a 50f8 	movw	r0, #44536	; 0xadf8
    fed2:	f2c0 0002 	movt	r0, #2
    fed6:	491d      	ldr	r1, [pc, #116]	; (ff4c <initAnalogPin(unsigned char)+0x84>)
    fed8:	f04f 0265 	mov.w	r2, #101	; 0x65
    fedc:	f7f6 fafa 	bl	64d4 <xprintf>
            // enable a2d conversions, interrupt on completion
//            ADCSRA |= _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) |
//                            _BV(ADEN) | _BV(ADIE);
	  PINSEL_CFG_Type PinCfg;

	  PinCfg.Funcnum = PINSEL_FUNC_1; /* ADC function */
    fee0:	f04f 0601 	mov.w	r6, #1
    fee4:	f88d 6002 	strb.w	r6, [sp, #2]
	  PinCfg.OpenDrain = PINSEL_PINMODE_NORMAL;
    fee8:	f04f 0400 	mov.w	r4, #0
    feec:	f88d 4004 	strb.w	r4, [sp, #4]
	  PinCfg.Pinmode = PINSEL_PINMODE_PULLUP;
    fef0:	f88d 4003 	strb.w	r4, [sp, #3]
	  PinCfg.Portnum = 0;
    fef4:	f88d 4000 	strb.w	r4, [sp]
	  PinCfg.Pinnum = pin;
    fef8:	f88d 5001 	strb.w	r5, [sp, #1]
	  PINSEL_ConfigPin(&PinCfg);
    fefc:	4668      	mov	r0, sp
    fefe:	f7f3 fb11 	bl	3524 <PINSEL_ConfigPin>
	  GPIO_SetDir(0, _BV(pin), 0);
    ff02:	4620      	mov	r0, r4
    ff04:	fa06 f105 	lsl.w	r1, r6, r5
    ff08:	4622      	mov	r2, r4
    ff0a:	f7f3 fadb 	bl	34c4 <GPIO_SetDir>

	  ADC_Init(LPC_ADC, 1000); /* ADC conversion rate = 200Khz */
    ff0e:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    ff12:	f2c4 0403 	movt	r4, #16387	; 0x4003
    ff16:	4620      	mov	r0, r4
    ff18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    ff1c:	f7f3 f944 	bl	31a8 <ADC_Init>
	  ADC_IntConfig(LPC_ADC,ADC_ADINTEN3,ENABLE);
    ff20:	4620      	mov	r0, r4
    ff22:	f04f 0103 	mov.w	r1, #3
    ff26:	4632      	mov	r2, r6
    ff28:	f7f3 f99e 	bl	3268 <ADC_IntConfig>
	  ADC_ChannelCmd(LPC_ADC,ADC_CHANNEL_3,ENABLE);
    ff2c:	4620      	mov	r0, r4
    ff2e:	f04f 0103 	mov.w	r1, #3
    ff32:	4632      	mov	r2, r6
    ff34:	f7f3 f9c2 	bl	32bc <ADC_ChannelCmd>
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
    ff38:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    ff3c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    ff40:	f04f 0288 	mov.w	r2, #136	; 0x88
    ff44:	f883 2316 	strb.w	r2, [r3, #790]	; 0x316
	  NVIC_SetPriority(ADC_IRQn, 17);
    }
    ff48:	b002      	add	sp, #8
    ff4a:	bd70      	pop	{r4, r5, r6, pc}
    ff4c:	0002ae27 	.word	0x0002ae27

0000ff50 <startAnalogRead(unsigned char, short volatile*, bool volatile*)>:

    bool startAnalogRead(uint8_t pin,
                         volatile int16_t* destination,
                         volatile bool* finished) {
    ff50:	b508      	push	{r3, lr}
            // We should not start a new read while an existing one is in progress.
//            if ((ADCSRA & _BV(ADSC)) != 0) {
//                    return false;
//            }
//            ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
                    adc_destination = destination;
    ff52:	f242 639c 	movw	r3, #9884	; 0x269c
    ff56:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ff5a:	6019      	str	r1, [r3, #0]
                    adc_finished = finished;
    ff5c:	f242 6384 	movw	r3, #9860	; 0x2684
    ff60:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ff64:	601a      	str	r2, [r3, #0]
                    *adc_finished = false;
    ff66:	f04f 0300 	mov.w	r3, #0
    ff6a:	7013      	strb	r3, [r2, #0]

                    // start the conversion.
//                    ADCSRA |= _BV(ADSC);
//            }
              // Start conversion
              ADC_StartCmd(LPC_ADC, ADC_START_NOW);
    ff6c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    ff70:	f2c4 0003 	movt	r0, #16387	; 0x4003
    ff74:	f04f 0101 	mov.w	r1, #1
    ff78:	f7f3 f952 	bl	3220 <ADC_StartCmd>

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
    ff7c:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    ff80:	f2ce 0300 	movt	r3, #57344	; 0xe000
    ff84:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    ff88:	601a      	str	r2, [r3, #0]
              NVIC_EnableIRQ(ADC_IRQn);
            // An interrupt will signal conversion completion.
            return true;
    }
    ff8a:	f04f 0001 	mov.w	r0, #1
    ff8e:	bd08      	pop	{r3, pc}

0000ff90 <ADC_IRQHandler>:

            // combine the two bytes
            *adc_destination = (high_byte << 8) | low_byte;
            *adc_finished = true;
    }*/
    extern "C" void ADC_IRQHandler(void){
    ff90:	b510      	push	{r4, lr}
//    	xprintf("A");
    	if (ADC_ChannelGetStatus(LPC_ADC,ADC_CHANNEL_3,ADC_DATA_DONE)){
    ff92:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    ff96:	f2c4 0003 	movt	r0, #16387	; 0x4003
    ff9a:	f04f 0103 	mov.w	r1, #3
    ff9e:	f04f 0201 	mov.w	r2, #1
    ffa2:	f7f3 f9c1 	bl	3328 <ADC_ChannelGetStatus>
    ffa6:	b1b0      	cbz	r0, ffd6 <ADC_IRQHandler+0x46>
    		*adc_destination = ADC_ChannelGetData(LPC_ADC,ADC_CHANNEL_3);
    ffa8:	f242 639c 	movw	r3, #9884	; 0x269c
    ffac:	f2c1 0300 	movt	r3, #4096	; 0x1000
    ffb0:	681c      	ldr	r4, [r3, #0]
    ffb2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    ffb6:	f2c4 0003 	movt	r0, #16387	; 0x4003
    ffba:	f04f 0103 	mov.w	r1, #3
    ffbe:	f7f3 f99b 	bl	32f8 <ADC_ChannelGetData>
    ffc2:	b280      	uxth	r0, r0
    ffc4:	8020      	strh	r0, [r4, #0]

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
    ffc6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    ffca:	f2ce 0300 	movt	r3, #57344	; 0xe000
    ffce:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    ffd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    		NVIC_DisableIRQ(ADC_IRQn);
    	}
    	if (ADC_ChannelGetStatus(LPC_ADC,ADC_CHANNEL_2,ADC_DATA_DONE)){
    ffd6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    ffda:	f2c4 0003 	movt	r0, #16387	; 0x4003
    ffde:	f04f 0102 	mov.w	r1, #2
    ffe2:	f04f 0201 	mov.w	r2, #1
    ffe6:	f7f3 f99f 	bl	3328 <ADC_ChannelGetStatus>
    ffea:	b1b0      	cbz	r0, 1001a <ADC_IRQHandler+0x8a>
    		*adc_destination = ADC_ChannelGetData(LPC_ADC,ADC_CHANNEL_2);
    ffec:	f242 639c 	movw	r3, #9884	; 0x269c
    fff0:	f2c1 0300 	movt	r3, #4096	; 0x1000
    fff4:	681c      	ldr	r4, [r3, #0]
    fff6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    fffa:	f2c4 0003 	movt	r0, #16387	; 0x4003
    fffe:	f04f 0102 	mov.w	r1, #2
   10002:	f7f3 f979 	bl	32f8 <ADC_ChannelGetData>
   10006:	b280      	uxth	r0, r0
   10008:	8020      	strh	r0, [r4, #0]
   1000a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
   1000e:	f2ce 0300 	movt	r3, #57344	; 0xe000
   10012:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   10016:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    		NVIC_DisableIRQ(ADC_IRQn);
    	}
    	*adc_finished = true;
   1001a:	f242 6384 	movw	r3, #9860	; 0x2684
   1001e:	f2c1 0300 	movt	r3, #4096	; 0x1000
   10022:	681b      	ldr	r3, [r3, #0]
   10024:	f04f 0201 	mov.w	r2, #1
   10028:	701a      	strb	r2, [r3, #0]
    }
   1002a:	bd10      	pop	{r4, pc}

0001002c <_GLOBAL__sub_I_adc_destination>:
   1002c:	b508      	push	{r3, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
   1002e:	f242 6088 	movw	r0, #9864	; 0x2688
   10032:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10036:	f04f 0100 	mov.w	r1, #0
   1003a:	f000 fe3d 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
   1003e:	f242 608c 	movw	r0, #9868	; 0x268c
   10042:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10046:	f04f 0101 	mov.w	r1, #1
   1004a:	f000 fe35 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
   1004e:	f242 6090 	movw	r0, #9872	; 0x2690
   10052:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10056:	f04f 0102 	mov.w	r1, #2
   1005a:	f000 fe2d 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
   1005e:	f242 6094 	movw	r0, #9876	; 0x2694
   10062:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10066:	f04f 0103 	mov.w	r1, #3
   1006a:	f000 fe25 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
   1006e:	f242 6098 	movw	r0, #9880	; 0x2698
   10072:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10076:	f04f 0104 	mov.w	r1, #4
   1007a:	f000 fe1d 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
   1007e:	f242 60a0 	movw	r0, #9888	; 0x26a0
   10082:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10086:	f04f 01ff 	mov.w	r1, #255	; 0xff
   1008a:	f000 fe15 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
   1008e:	bd08      	pop	{r3, pc}

00010090 <CoolingFan::setSetpoint(int)>:
	}
	fan_on = false;
}

void CoolingFan::setSetpoint(int temperature) {
	setPoint = temperature;
   10090:	60c1      	str	r1, [r0, #12]
	midSetPoint = temperature;
   10092:	6101      	str	r1, [r0, #16]
	lowSetPoint = temperature - 10;
   10094:	f1a1 030a 	sub.w	r3, r1, #10
   10098:	6143      	str	r3, [r0, #20]
	highSetPoint = temperature + 10;
   1009a:	f101 010a 	add.w	r1, r1, #10
   1009e:	6181      	str	r1, [r0, #24]
}
   100a0:	4770      	bx	lr
   100a2:	bf00      	nop

000100a4 <CoolingFan::enable()>:

void CoolingFan::enable() {
	enabled = true;
   100a4:	f04f 0301 	mov.w	r3, #1
   100a8:	7243      	strb	r3, [r0, #9]
}
   100aa:	4770      	bx	lr

000100ac <CoolingFan::enableFan()>:
			}
		}
	}
}

void CoolingFan::enableFan() {
   100ac:	b508      	push	{r3, lr}
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
   100ae:	7943      	ldrb	r3, [r0, #5]
   100b0:	b93b      	cbnz	r3, 100c2 <CoolingFan::enableFan()+0x16>
//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
   100b2:	7983      	ldrb	r3, [r0, #6]
   100b4:	7900      	ldrb	r0, [r0, #4]
   100b6:	f04f 0101 	mov.w	r1, #1
   100ba:	fa01 f103 	lsl.w	r1, r1, r3
   100be:	f7f3 fa11 	bl	34e4 <GPIO_SetValue>
   100c2:	bd08      	pop	{r3, pc}

000100c4 <CoolingFan::disableFan()>:
//#else
//	#warning cooling fan feature disabled
//#endif
}

void CoolingFan::disableFan() {
   100c4:	b508      	push	{r3, lr}
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
   100c6:	7943      	ldrb	r3, [r0, #5]
   100c8:	b93b      	cbnz	r3, 100da <CoolingFan::disableFan()+0x16>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
   100ca:	7983      	ldrb	r3, [r0, #6]
   100cc:	7900      	ldrb	r0, [r0, #4]
   100ce:	f04f 0101 	mov.w	r1, #1
   100d2:	fa01 f103 	lsl.w	r1, r1, r3
   100d6:	f7f3 fa0d 	bl	34f4 <GPIO_ClearValue>
   100da:	bd08      	pop	{r3, pc}

000100dc <CoolingFan::manageCoolingFan()>:
void CoolingFan::disable() {
	enabled = false;
	disableFan();
}

void CoolingFan::manageCoolingFan() {
   100dc:	b538      	push	{r3, r4, r5, lr}
   100de:	4604      	mov	r4, r0
	// TODO: only change the state if necessary
	if (enabled) {
   100e0:	7a43      	ldrb	r3, [r0, #9]
   100e2:	2b00      	cmp	r3, #0
   100e4:	d02f      	beq.n	10146 <CoolingFan::manageCoolingFan()+0x6a>
		int temp = heater.get_current_temperature();
   100e6:	6800      	ldr	r0, [r0, #0]
   100e8:	f000 fb6e 	bl	107c8 <Heater::get_current_temperature()>
   100ec:	4605      	mov	r5, r0
		
		if ((temp > setPoint) && (temp != DEFAULT_THERMOCOUPLE_VAL)){
   100ee:	68e2      	ldr	r2, [r4, #12]
   100f0:	f5b0 6380 	subs.w	r3, r0, #1024	; 0x400
   100f4:	bf18      	it	ne
   100f6:	2301      	movne	r3, #1
   100f8:	4282      	cmp	r2, r0
   100fa:	bfac      	ite	ge
   100fc:	2300      	movge	r3, #0
   100fe:	f003 0301 	andlt.w	r3, r3, #1
   10102:	b183      	cbz	r3, 10126 <CoolingFan::manageCoolingFan()+0x4a>
			enableFan();
   10104:	4620      	mov	r0, r4
   10106:	f7ff ffd1 	bl	100ac <CoolingFan::enableFan()>
			// hysteresis in fan on/off behavior
			if(!fan_on && temp < highSetPoint){
   1010a:	7f23      	ldrb	r3, [r4, #28]
   1010c:	b92b      	cbnz	r3, 1011a <CoolingFan::manageCoolingFan()+0x3e>
   1010e:	69a3      	ldr	r3, [r4, #24]
   10110:	429d      	cmp	r5, r3
   10112:	da02      	bge.n	1011a <CoolingFan::manageCoolingFan()+0x3e>
				setPoint = lowSetPoint;
   10114:	6963      	ldr	r3, [r4, #20]
   10116:	60e3      	str	r3, [r4, #12]
   10118:	bd38      	pop	{r3, r4, r5, pc}
			}
			else{
				fan_on = true;
   1011a:	f04f 0301 	mov.w	r3, #1
   1011e:	7723      	strb	r3, [r4, #28]
				setPoint = midSetPoint;
   10120:	6923      	ldr	r3, [r4, #16]
   10122:	60e3      	str	r3, [r4, #12]
   10124:	bd38      	pop	{r3, r4, r5, pc}
			}
			
		}
		else {
			disableFan();
   10126:	4620      	mov	r0, r4
   10128:	f7ff ffcc 	bl	100c4 <CoolingFan::disableFan()>
			// hysteresis in fan on/off behavior
			if(fan_on && temp > lowSetPoint){
   1012c:	7f23      	ldrb	r3, [r4, #28]
   1012e:	b12b      	cbz	r3, 1013c <CoolingFan::manageCoolingFan()+0x60>
   10130:	6963      	ldr	r3, [r4, #20]
   10132:	429d      	cmp	r5, r3
   10134:	dd02      	ble.n	1013c <CoolingFan::manageCoolingFan()+0x60>
				setPoint = highSetPoint;
   10136:	69a3      	ldr	r3, [r4, #24]
   10138:	60e3      	str	r3, [r4, #12]
   1013a:	bd38      	pop	{r3, r4, r5, pc}
			}
			else{
				fan_on = false;
   1013c:	f04f 0300 	mov.w	r3, #0
   10140:	7723      	strb	r3, [r4, #28]
				setPoint = midSetPoint;
   10142:	6923      	ldr	r3, [r4, #16]
   10144:	60e3      	str	r3, [r4, #12]
   10146:	bd38      	pop	{r3, r4, r5, pc}

00010148 <CoolingFan::disable()>:

void CoolingFan::enable() {
	enabled = true;
}

void CoolingFan::disable() {
   10148:	b508      	push	{r3, lr}
	enabled = false;
   1014a:	f04f 0200 	mov.w	r2, #0
   1014e:	7242      	strb	r2, [r0, #9]
	disableFan();
   10150:	f7ff ffb8 	bl	100c4 <CoolingFan::disableFan()>
}
   10154:	bd08      	pop	{r3, pc}
   10156:	bf00      	nop

00010158 <CoolingFan::reset()>:
        Fan_Pin(fan)
{
	reset();
}

void CoolingFan::reset() {
   10158:	b510      	push	{r4, lr}
   1015a:	4604      	mov	r4, r0
	uint16_t offset = eeprom_base + cooler_eeprom_offsets::SETPOINT_C_OFFSET;
   1015c:	8bc0      	ldrh	r0, [r0, #30]
   1015e:	f100 0001 	add.w	r0, r0, #1
	setSetpoint(eeprom::getEeprom8(offset, DEFAULT_COOLING_FAN_SETPOINT_C));
   10162:	b280      	uxth	r0, r0
   10164:	f04f 0132 	mov.w	r1, #50	; 0x32
   10168:	f000 f934 	bl	103d4 <eeprom::getEeprom8(unsigned short, unsigned char)>
   1016c:	4601      	mov	r1, r0
   1016e:	4620      	mov	r0, r4
   10170:	f7ff ff8e 	bl	10090 <CoolingFan::setSetpoint(int)>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
   10174:	7963      	ldrb	r3, [r4, #5]
   10176:	b93b      	cbnz	r3, 10188 <CoolingFan::reset()+0x30>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
   10178:	79a3      	ldrb	r3, [r4, #6]
   1017a:	7920      	ldrb	r0, [r4, #4]
   1017c:	f04f 0101 	mov.w	r1, #1
   10180:	fa01 f103 	lsl.w	r1, r1, r3
   10184:	f7f3 f9b6 	bl	34f4 <GPIO_ClearValue>

	Fan_Pin.setValue(false);
	Fan_Pin.setDirection(true);
   10188:	f104 0004 	add.w	r0, r4, #4
   1018c:	f04f 0101 	mov.w	r1, #1
   10190:	f000 ffc4 	bl	1111c <Pin::setDirection(bool) const>

	offset = eeprom_base + cooler_eeprom_offsets::ENABLE_OFFSET;
	if (eeprom::getEeprom8(offset ,DEFAULT_COOLING_FAN_ENABLE) == FAN_ENABLED) {
   10194:	8be0      	ldrh	r0, [r4, #30]
   10196:	f04f 0101 	mov.w	r1, #1
   1019a:	f000 f91b 	bl	103d4 <eeprom::getEeprom8(unsigned short, unsigned char)>
   1019e:	2801      	cmp	r0, #1
   101a0:	d103      	bne.n	101aa <CoolingFan::reset()+0x52>
		enable();
   101a2:	4620      	mov	r0, r4
   101a4:	f7ff ff7e 	bl	100a4 <CoolingFan::enable()>
   101a8:	e002      	b.n	101b0 <CoolingFan::reset()+0x58>
	}
	else {
		disable();
   101aa:	4620      	mov	r0, r4
   101ac:	f7ff ffcc 	bl	10148 <CoolingFan::disable()>
	}
	fan_on = false;
   101b0:	f04f 0300 	mov.w	r3, #0
   101b4:	7723      	strb	r3, [r4, #28]
}
   101b6:	bd10      	pop	{r4, pc}

000101b8 <CoolingFan::CoolingFan(Heater&, unsigned short, Pin const&)>:

// TODO: Come up with a unified strategy for these.
// EEPROM map


CoolingFan::CoolingFan(Heater& heater_in, uint16_t eeprom_base_in, const Pin &fan) :
   101b8:	b538      	push	{r3, r4, r5, lr}
   101ba:	4604      	mov	r4, r0
   101bc:	4615      	mov	r5, r2
        heater(heater_in),
        eeprom_base(eeprom_base_in),
        Fan_Pin(fan)
   101be:	f840 1b04 	str.w	r1, [r0], #4
   101c2:	4619      	mov	r1, r3
   101c4:	f000 ff9c 	bl	11100 <Pin::Pin(Pin const&)>
   101c8:	83e5      	strh	r5, [r4, #30]
{
	reset();
   101ca:	4620      	mov	r0, r4
   101cc:	f7ff ffc4 	bl	10158 <CoolingFan::reset()>
}
   101d0:	4620      	mov	r0, r4
   101d2:	bd38      	pop	{r3, r4, r5, pc}

000101d4 <_GLOBAL__sub_I__ZN10CoolingFanC2ER6HeatertRK3Pin>:
//#warning cooling fan feature disabled
	Fan_Pin.setValue(false);
//#else
//	#warning cooling fan feature disabled
//#endif
}
   101d4:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
   101d6:	f242 60a4 	movw	r0, #9892	; 0x26a4
   101da:	f2c1 0000 	movt	r0, #4096	; 0x1000
   101de:	f04f 0100 	mov.w	r1, #0
   101e2:	f000 fd69 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
   101e6:	f242 60a8 	movw	r0, #9896	; 0x26a8
   101ea:	f2c1 0000 	movt	r0, #4096	; 0x1000
   101ee:	f04f 0101 	mov.w	r1, #1
   101f2:	f000 fd61 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
   101f6:	f242 60ac 	movw	r0, #9900	; 0x26ac
   101fa:	f2c1 0000 	movt	r0, #4096	; 0x1000
   101fe:	f04f 0102 	mov.w	r1, #2
   10202:	f000 fd59 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
   10206:	f242 60b0 	movw	r0, #9904	; 0x26b0
   1020a:	f2c1 0000 	movt	r0, #4096	; 0x1000
   1020e:	f04f 0103 	mov.w	r1, #3
   10212:	f000 fd51 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
   10216:	f242 60b4 	movw	r0, #9908	; 0x26b4
   1021a:	f2c1 0000 	movt	r0, #4096	; 0x1000
   1021e:	f04f 0104 	mov.w	r1, #4
   10222:	f000 fd49 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
   10226:	f242 64b8 	movw	r4, #9912	; 0x26b8
   1022a:	f2c1 0400 	movt	r4, #4096	; 0x1000
   1022e:	4620      	mov	r0, r4
   10230:	f04f 01ff 	mov.w	r1, #255	; 0xff
   10234:	f000 fd40 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
	};
	// currently not used:
	//const uint8_t getPinIndex() const { return pin_index; }
};

static const Pin NullPin(NullPort, 0);
   10238:	f242 60bc 	movw	r0, #9916	; 0x26bc
   1023c:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10240:	4621      	mov	r1, r4
   10242:	f04f 0200 	mov.w	r2, #0
   10246:	f000 ff49 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
   1024a:	bd10      	pop	{r4, pc}

0001024c <DigiPots::DigiPots(Pin const&, unsigned short const&)>:
#include "EepromMap.hh"
#include "Configuration.hh"
#include "SoftI2cManager.hh"
#include "DigiPots.hh"

DigiPots::DigiPots(const Pin& pot,
   1024c:	b538      	push	{r3, r4, r5, lr}
   1024e:	4604      	mov	r4, r0
   10250:	4615      	mov	r5, r2
                                   const uint16_t &eeprom_base_in) :
    
    pot_pin(pot),
    eeprom_base(eeprom_base_in) {
   10252:	f000 ff55 	bl	11100 <Pin::Pin(Pin const&)>
   10256:	882d      	ldrh	r5, [r5, #0]
   10258:	80e5      	strh	r5, [r4, #6]
}
   1025a:	4620      	mov	r0, r4
   1025c:	bd38      	pop	{r3, r4, r5, pc}
   1025e:	bf00      	nop

00010260 <DigiPots::resetPots()>:
    resetPots();
 
}

void DigiPots::resetPots()
{
   10260:	b5f0      	push	{r4, r5, r6, r7, lr}
   10262:	b089      	sub	sp, #36	; 0x24
   10264:	4607      	mov	r7, r0

// R/W direction bit to OR with address for start or restart
#define I2C_READ 1
#define I2C_WRITE 0

class SoftI2cManager {
   10266:	ac01      	add	r4, sp, #4
   10268:	f242 556c 	movw	r5, #9580	; 0x256c
   1026c:	f2c1 0500 	movt	r5, #4096	; 0x1000
	eeprom_pot_offset = idx;
    resetPots();
 
}

void DigiPots::resetPots()
   10270:	ae06      	add	r6, sp, #24
   10272:	4620      	mov	r0, r4
   10274:	4629      	mov	r1, r5
   10276:	f000 ff43 	bl	11100 <Pin::Pin(Pin const&)>
   1027a:	f104 0405 	add.w	r4, r4, #5
   1027e:	f105 0505 	add.w	r5, r5, #5
   10282:	42b4      	cmp	r4, r6
   10284:	d1f5      	bne.n	10272 <DigiPots::resetPots()+0x12>
   10286:	4c10      	ldr	r4, [pc, #64]	; (102c8 <DigiPots::resetPots()+0x68>)
   10288:	a806      	add	r0, sp, #24
   1028a:	4621      	mov	r1, r4
   1028c:	f000 ff38 	bl	11100 <Pin::Pin(Pin const&)>
   10290:	7963      	ldrb	r3, [r4, #5]
   10292:	f88d 301d 	strb.w	r3, [sp, #29]
{
    SoftI2cManager i2cPots = SoftI2cManager::getI2cManager();
    i2cPots.start(0b01011110 | I2C_WRITE, pot_pin);
   10296:	a801      	add	r0, sp, #4
   10298:	f04f 015e 	mov.w	r1, #94	; 0x5e
   1029c:	463a      	mov	r2, r7
   1029e:	f7fe f8d7 	bl	e450 <SoftI2cManager::start(unsigned char, Pin const&)>
    i2cPots.write(eeprom::getEeprom8(eeprom_base + eeprom_pot_offset, 0), pot_pin);
   102a2:	8938      	ldrh	r0, [r7, #8]
   102a4:	88fb      	ldrh	r3, [r7, #6]
   102a6:	18c0      	adds	r0, r0, r3
   102a8:	b280      	uxth	r0, r0
   102aa:	f04f 0100 	mov.w	r1, #0
   102ae:	f000 f891 	bl	103d4 <eeprom::getEeprom8(unsigned short, unsigned char)>
   102b2:	4601      	mov	r1, r0
   102b4:	a801      	add	r0, sp, #4
   102b6:	463a      	mov	r2, r7
   102b8:	f7fe f85a 	bl	e370 <SoftI2cManager::write(unsigned char, Pin const&)>
    i2cPots.stop();
   102bc:	a801      	add	r0, sp, #4
   102be:	f7fe f833 	bl	e328 <SoftI2cManager::stop()>
}
   102c2:	b009      	add	sp, #36	; 0x24
   102c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   102c6:	bf00      	nop
   102c8:	10002580 	.word	0x10002580

000102cc <DigiPots::init(unsigned char)>:
    
    pot_pin(pot),
    eeprom_base(eeprom_base_in) {
}

void DigiPots::init(const uint8_t idx) {
   102cc:	b508      	push	{r3, lr}
	
	eeprom_pot_offset = idx;
   102ce:	8101      	strh	r1, [r0, #8]
    resetPots();
   102d0:	f7ff ffc6 	bl	10260 <DigiPots::resetPots()>
 
}
   102d4:	bd08      	pop	{r3, pc}
   102d6:	bf00      	nop

000102d8 <DigiPots::setPotValue(unsigned char)>:
    i2cPots.write(eeprom::getEeprom8(eeprom_base + eeprom_pot_offset, 0), pot_pin);
    i2cPots.stop();
}

void DigiPots::setPotValue(const uint8_t val)
{
   102d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   102dc:	b088      	sub	sp, #32
   102de:	4607      	mov	r7, r0
   102e0:	4688      	mov	r8, r1
   102e2:	ac01      	add	r4, sp, #4
   102e4:	f242 556c 	movw	r5, #9580	; 0x256c
   102e8:	f2c1 0500 	movt	r5, #4096	; 0x1000
    i2cPots.start(0b01011110 | I2C_WRITE, pot_pin);
    i2cPots.write(eeprom::getEeprom8(eeprom_base + eeprom_pot_offset, 0), pot_pin);
    i2cPots.stop();
}

void DigiPots::setPotValue(const uint8_t val)
   102ec:	ae06      	add	r6, sp, #24
   102ee:	4620      	mov	r0, r4
   102f0:	4629      	mov	r1, r5
   102f2:	f000 ff05 	bl	11100 <Pin::Pin(Pin const&)>
   102f6:	f104 0405 	add.w	r4, r4, #5
   102fa:	f105 0505 	add.w	r5, r5, #5
   102fe:	42b4      	cmp	r4, r6
   10300:	d1f5      	bne.n	102ee <DigiPots::setPotValue(unsigned char)+0x16>
   10302:	4c0e      	ldr	r4, [pc, #56]	; (1033c <DigiPots::setPotValue(unsigned char)+0x64>)
   10304:	a806      	add	r0, sp, #24
   10306:	4621      	mov	r1, r4
   10308:	f000 fefa 	bl	11100 <Pin::Pin(Pin const&)>
   1030c:	7963      	ldrb	r3, [r4, #5]
   1030e:	f88d 301d 	strb.w	r3, [sp, #29]
{
    SoftI2cManager i2cPots = SoftI2cManager::getI2cManager();
    i2cPots.start(0b01011110 | I2C_WRITE, pot_pin);
   10312:	a801      	add	r0, sp, #4
   10314:	f04f 015e 	mov.w	r1, #94	; 0x5e
   10318:	463a      	mov	r2, r7
   1031a:	f7fe f899 	bl	e450 <SoftI2cManager::start(unsigned char, Pin const&)>
    i2cPots.write(val > DIGI_POT_MAX ? DIGI_POT_MAX : val, pot_pin);
   1031e:	a801      	add	r0, sp, #4
   10320:	f1b8 0f76 	cmp.w	r8, #118	; 0x76
   10324:	bf34      	ite	cc
   10326:	4641      	movcc	r1, r8
   10328:	2176      	movcs	r1, #118	; 0x76
   1032a:	463a      	mov	r2, r7
   1032c:	f7fe f820 	bl	e370 <SoftI2cManager::write(unsigned char, Pin const&)>
    i2cPots.stop(); 
   10330:	a801      	add	r0, sp, #4
   10332:	f7fd fff9 	bl	e328 <SoftI2cManager::stop()>
}
   10336:	b008      	add	sp, #32
   10338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1033c:	10002580 	.word	0x10002580

00010340 <_GLOBAL__sub_I__ZN8DigiPotsC2ERK3PinRKt>:
   10340:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
   10342:	f242 60c4 	movw	r0, #9924	; 0x26c4
   10346:	f2c1 0000 	movt	r0, #4096	; 0x1000
   1034a:	f04f 0100 	mov.w	r1, #0
   1034e:	f000 fcb3 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
   10352:	f242 60c8 	movw	r0, #9928	; 0x26c8
   10356:	f2c1 0000 	movt	r0, #4096	; 0x1000
   1035a:	f04f 0101 	mov.w	r1, #1
   1035e:	f000 fcab 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
   10362:	f242 60cc 	movw	r0, #9932	; 0x26cc
   10366:	f2c1 0000 	movt	r0, #4096	; 0x1000
   1036a:	f04f 0102 	mov.w	r1, #2
   1036e:	f000 fca3 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
   10372:	f242 60d0 	movw	r0, #9936	; 0x26d0
   10376:	f2c1 0000 	movt	r0, #4096	; 0x1000
   1037a:	f04f 0103 	mov.w	r1, #3
   1037e:	f000 fc9b 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
   10382:	f242 60d4 	movw	r0, #9940	; 0x26d4
   10386:	f2c1 0000 	movt	r0, #4096	; 0x1000
   1038a:	f04f 0104 	mov.w	r1, #4
   1038e:	f000 fc93 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
   10392:	f242 64d8 	movw	r4, #9944	; 0x26d8
   10396:	f2c1 0400 	movt	r4, #4096	; 0x1000
   1039a:	4620      	mov	r0, r4
   1039c:	f04f 01ff 	mov.w	r1, #255	; 0xff
   103a0:	f000 fc8a 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
   103a4:	f242 60dc 	movw	r0, #9948	; 0x26dc
   103a8:	f2c1 0000 	movt	r0, #4096	; 0x1000
   103ac:	4621      	mov	r1, r4
   103ae:	f04f 0200 	mov.w	r2, #0
   103b2:	f000 fe93 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
   103b6:	bd10      	pop	{r4, pc}

000103b8 <eeprom::getflashupdate()>:
namespace eeprom {

volatile bool flash_updated;

bool getflashupdate(void){
	return flash_updated;
   103b8:	f242 63e4 	movw	r3, #9956	; 0x26e4
   103bc:	f2c1 0300 	movt	r3, #4096	; 0x1000
   103c0:	7818      	ldrb	r0, [r3, #0]
}
   103c2:	4770      	bx	lr

000103c4 <eeprom::clearflashupdate()>:

void clearflashupdate(void){
	flash_updated = false;
   103c4:	f242 63e4 	movw	r3, #9956	; 0x26e4
   103c8:	f2c1 0300 	movt	r3, #4096	; 0x1000
   103cc:	f04f 0200 	mov.w	r2, #0
   103d0:	701a      	strb	r2, [r3, #0]
}
   103d2:	4770      	bx	lr

000103d4 <eeprom::getEeprom8(unsigned short, unsigned char)>:
	//Update XHomeOffsets to update incorrect settings for single/dual machines
	setDefaultAxisHomePositions(); //:FAR:Q: do we need to do this here?
//	save_to_flash();
}

uint8_t getEeprom8(const uint16_t location, const uint8_t default_value) {
   103d4:	b538      	push	{r3, r4, r5, lr}
   103d6:	4604      	mov	r4, r0
   103d8:	460d      	mov	r5, r1
        uint8_t data;
        /// TODO: why not just use eeprom_read_byte?
		if (location < 0 || location >= eeprom_info::EEPROM_SIZE){
   103da:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   103de:	d30f      	bcc.n	10400 <eeprom::getEeprom8(unsigned short, unsigned char)+0x2c>
			xprintf("Start Address:%x Hex written:0x\%x char written:%c" "\n",EEPROM_START_ADDRESS + (location*4), (uint8_t)eeprom_address(EEPROM_START_ADDRESS, location), (uint8_t)eeprom_address(EEPROM_START_ADDRESS, location));
   103e0:	f100 6180 	add.w	r1, r0, #67108864	; 0x4000000
   103e4:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
   103e8:	ea4f 0181 	mov.w	r1, r1, lsl #2
   103ec:	680a      	ldr	r2, [r1, #0]
   103ee:	680b      	ldr	r3, [r1, #0]
   103f0:	f64a 6034 	movw	r0, #44596	; 0xae34
   103f4:	f2c0 0002 	movt	r0, #2
   103f8:	b2d2      	uxtb	r2, r2
   103fa:	b2db      	uxtb	r3, r3
   103fc:	f7f6 f86a 	bl	64d4 <xprintf>
		}
    	data = (uint8_t)eeprom_address(EEPROM_START_ADDRESS, location);
   10400:	f104 6480 	add.w	r4, r4, #67108864	; 0x4000000
   10404:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
   10408:	ea4f 0484 	mov.w	r4, r4, lsl #2
   1040c:	6820      	ldr	r0, [r4, #0]
   1040e:	b2c0      	uxtb	r0, r0
    	if (data == 0xff) data = default_value;
//        eeprom_read_block(&data,(const uint8_t*)location,1);
//        if (data == 0xff) data = default_value;
        return data;
}
   10410:	28ff      	cmp	r0, #255	; 0xff
   10412:	bf08      	it	eq
   10414:	4628      	moveq	r0, r5
   10416:	bd38      	pop	{r3, r4, r5, pc}

00010418 <eeprom::setEeprom8(unsigned short, unsigned char)>:

void setEeprom8(const uint16_t location, const uint8_t set_value) {
   10418:	b538      	push	{r3, r4, r5, lr}
   1041a:	4604      	mov	r4, r0
   1041c:	460d      	mov	r5, r1
        /// TODO: why not just use eeprom_read_byte?
		if (location < 0 || location >= eeprom_info::EEPROM_SIZE){
   1041e:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   10422:	d30f      	bcc.n	10444 <eeprom::setEeprom8(unsigned short, unsigned char)+0x2c>
			xprintf("Start Address:%x Hex written:0x\%x char written:%c" "\n",EEPROM_START_ADDRESS + (location*4), (uint8_t)eeprom_address(EEPROM_START_ADDRESS, location), (uint8_t)eeprom_address(EEPROM_START_ADDRESS, location));
   10424:	f100 6180 	add.w	r1, r0, #67108864	; 0x4000000
   10428:	f501 51e0 	add.w	r1, r1, #7168	; 0x1c00
   1042c:	ea4f 0181 	mov.w	r1, r1, lsl #2
   10430:	680a      	ldr	r2, [r1, #0]
   10432:	680b      	ldr	r3, [r1, #0]
   10434:	f64a 6034 	movw	r0, #44596	; 0xae34
   10438:	f2c0 0002 	movt	r0, #2
   1043c:	b2d2      	uxtb	r2, r2
   1043e:	b2db      	uxtb	r3, r3
   10440:	f7f6 f848 	bl	64d4 <xprintf>
		}
    	eeprom_address(EEPROM_START_ADDRESS, location) = set_value;
   10444:	f104 6480 	add.w	r4, r4, #67108864	; 0x4000000
   10448:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
   1044c:	ea4f 0484 	mov.w	r4, r4, lsl #2
   10450:	6025      	str	r5, [r4, #0]
    	flash_updated = true;
   10452:	f242 63e4 	movw	r3, #9956	; 0x26e4
   10456:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1045a:	f04f 0201 	mov.w	r2, #1
   1045e:	701a      	strb	r2, [r3, #0]
}
   10460:	bd38      	pop	{r3, r4, r5, pc}
   10462:	bf00      	nop

00010464 <eeprom::init()>:
/**
 * if the EEPROM is initalized and matches firmware version, exit
 * if the EEPROM is not initalized, write defaults, and set a new version
 * if the EEPROM is initalized but is not the current version, re-write the version number
 */
void init() {
   10464:	b510      	push	{r4, lr}
   10466:	b082      	sub	sp, #8
	read_all_from_flash();
   10468:	f7f9 f800 	bl	946c <eeprom::read_all_from_flash()>
	uint8_t prom_version[2];
	prom_version[0] = getEeprom8(eeprom_offsets::VERSION_LOW, 0);
   1046c:	f04f 0000 	mov.w	r0, #0
   10470:	4601      	mov	r1, r0
   10472:	f7ff ffaf 	bl	103d4 <eeprom::getEeprom8(unsigned short, unsigned char)>
   10476:	4604      	mov	r4, r0
	prom_version[1] = getEeprom8(eeprom_offsets::VERSION_HIGH, 0);
   10478:	f04f 0001 	mov.w	r0, #1
   1047c:	f04f 0100 	mov.w	r1, #0
   10480:	f7ff ffa8 	bl	103d4 <eeprom::getEeprom8(unsigned short, unsigned char)>
//	eeprom_read_block(prom_version,(const uint8_t*)eeprom_offsets::VERSION_LOW,2);
	if ((prom_version[1]*100+prom_version[0]) == firmware_version)
   10484:	f04f 0364 	mov.w	r3, #100	; 0x64
   10488:	fb03 4400 	mla	r4, r3, r0, r4
   1048c:	f240 232b 	movw	r3, #555	; 0x22b
   10490:	429c      	cmp	r4, r3
   10492:	d01a      	beq.n	104ca <eeprom::init()+0x66>
		return;

	/// if our eeprom is empty (version is still FF, ie unwritten)
	if (prom_version[1] == 0xff || prom_version[1] < 2) {
   10494:	f1a0 0002 	sub.w	r0, r0, #2
   10498:	b2c0      	uxtb	r0, r0
   1049a:	28fc      	cmp	r0, #252	; 0xfc
   1049c:	d901      	bls.n	104a2 <eeprom::init()+0x3e>
		fullResetEEPROM();
   1049e:	f7f9 fa51 	bl	9944 <eeprom::fullResetEEPROM()>
            //setDefaults();
	}

	//Update eeprom version # to match current firmware version
	prom_version[0] = firmware_version % 100;
   104a2:	f04f 0137 	mov.w	r1, #55	; 0x37
   104a6:	f88d 1004 	strb.w	r1, [sp, #4]
	prom_version[1] = firmware_version / 100;
   104aa:	f04f 0305 	mov.w	r3, #5
   104ae:	f88d 3005 	strb.w	r3, [sp, #5]
	for (uint8_t i=0; i<2;i++) {
		setEeprom8(eeprom_offsets::VERSION_LOW + i, prom_version[i]);
   104b2:	f04f 0000 	mov.w	r0, #0
   104b6:	f7ff ffaf 	bl	10418 <eeprom::setEeprom8(unsigned short, unsigned char)>
   104ba:	f04f 0001 	mov.w	r0, #1
   104be:	f89d 1005 	ldrb.w	r1, [sp, #5]
   104c2:	f7ff ffa9 	bl	10418 <eeprom::setEeprom8(unsigned short, unsigned char)>
	}
//	xprintf("%x" " (%s:%d)\n",eeprom_address(EEPROM_START_ADDRESS, eeprom_offsets::VERSION_LOW),_F_,_L_);
//	xprintf("%x" " (%s:%d)\n",eeprom_address(EEPROM_START_ADDRESS, eeprom_offsets::VERSION_HIGH),_F_,_L_);
//	eeprom_write_block(prom_version,(uint8_t*)eeprom_offsets::VERSION_LOW,2);
	//Update XHomeOffsets to update incorrect settings for single/dual machines
	setDefaultAxisHomePositions(); //:FAR:Q: do we need to do this here?
   104c6:	f7f9 f979 	bl	97bc <eeprom::setDefaultAxisHomePositions()>
//	save_to_flash();
}
   104ca:	b002      	add	sp, #8
   104cc:	bd10      	pop	{r4, pc}
   104ce:	bf00      	nop

000104d0 <eeprom::getEeprom16(unsigned short, unsigned short)>:
		}
    	eeprom_address(EEPROM_START_ADDRESS, location) = set_value;
    	flash_updated = true;
}

uint16_t getEeprom16(const uint16_t location, const uint16_t default_value) {
   104d0:	b570      	push	{r4, r5, r6, lr}
   104d2:	4605      	mov	r5, r0
   104d4:	460e      	mov	r6, r1
	uint16_t data =	getEeprom8(location, 0);
   104d6:	f04f 0100 	mov.w	r1, #0
   104da:	f7ff ff7b 	bl	103d4 <eeprom::getEeprom8(unsigned short, unsigned char)>
   104de:	4604      	mov	r4, r0
	data |= getEeprom8(location+1, 0)<<8;
   104e0:	f105 0001 	add.w	r0, r5, #1
   104e4:	b280      	uxth	r0, r0
   104e6:	f04f 0100 	mov.w	r1, #0
   104ea:	f7ff ff73 	bl	103d4 <eeprom::getEeprom8(unsigned short, unsigned char)>
   104ee:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
        /// TODO: why not just use eeprom_read_word?
    	if (data == 0xffff) data = default_value;
   104f2:	b280      	uxth	r0, r0
//        eeprom_read_block(&data,(const uint8_t*)location,2);
//        if (data == 0xffff) data = default_value;
//    	xprintf("getEeprom16" " (%s:%d)\n",_F_,_L_);
//    	xprintf("%x" " (%s:%d)\n",data,_F_,_L_);
        return data;
}
   104f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   104f8:	4298      	cmp	r0, r3
   104fa:	bf08      	it	eq
   104fc:	4630      	moveq	r0, r6
   104fe:	bd70      	pop	{r4, r5, r6, pc}

00010500 <eeprom::setEeprom16(unsigned short, unsigned short)>:

void setEeprom16(const uint16_t location, const uint16_t set_value) {
   10500:	b538      	push	{r3, r4, r5, lr}
   10502:	4605      	mov	r5, r0
   10504:	460c      	mov	r4, r1
	setEeprom8(location, set_value&0xff);
   10506:	b2c9      	uxtb	r1, r1
   10508:	f7ff ff86 	bl	10418 <eeprom::setEeprom8(unsigned short, unsigned char)>
	setEeprom8(location+1, set_value>>8);
   1050c:	f105 0001 	add.w	r0, r5, #1
   10510:	b280      	uxth	r0, r0
   10512:	ea4f 2114 	mov.w	r1, r4, lsr #8
   10516:	f7ff ff7f 	bl	10418 <eeprom::setEeprom8(unsigned short, unsigned char)>
}
   1051a:	bd38      	pop	{r3, r4, r5, pc}

0001051c <eeprom::getEeprom32(unsigned short, unsigned long)>:

uint32_t getEeprom32(const uint16_t location, const uint32_t default_value) {
   1051c:	b570      	push	{r4, r5, r6, lr}
   1051e:	4605      	mov	r5, r0
   10520:	460e      	mov	r6, r1
	uint32_t data =	getEeprom16(location, 0);
   10522:	f04f 0100 	mov.w	r1, #0
   10526:	f7ff ffd3 	bl	104d0 <eeprom::getEeprom16(unsigned short, unsigned short)>
   1052a:	4604      	mov	r4, r0
	data |= getEeprom8(location+2, 0)<<8;
   1052c:	f105 0002 	add.w	r0, r5, #2
   10530:	b280      	uxth	r0, r0
   10532:	f04f 0100 	mov.w	r1, #0
   10536:	f7ff ff4d 	bl	103d4 <eeprom::getEeprom8(unsigned short, unsigned char)>
   1053a:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
//	uint32_t data = eeprom_read_dword((const uint32_t*)location);
        if (data == 0xffffffff) return default_value;
//    	xprintf("getEeprom32" " (%s:%d)\n",_F_,_L_);
//    	xprintf("%x" " (%s:%d)\n",data,_F_,_L_);
        return data;
}
   1053e:	f1b0 3fff 	cmp.w	r0, #4294967295
   10542:	bf08      	it	eq
   10544:	4630      	moveq	r0, r6
   10546:	bd70      	pop	{r4, r5, r6, pc}

00010548 <eeprom::setEeprom32(unsigned short, unsigned long)>:

void setEeprom32(const uint16_t location, const uint32_t set_value) {
   10548:	b538      	push	{r3, r4, r5, lr}
   1054a:	4605      	mov	r5, r0
   1054c:	460c      	mov	r4, r1
	setEeprom16(location, (uint16_t)(set_value&0xffff));
   1054e:	b289      	uxth	r1, r1
   10550:	f7ff ffd6 	bl	10500 <eeprom::setEeprom16(unsigned short, unsigned short)>
	setEeprom16(location+2, (uint16_t)(set_value>>16));
   10554:	f105 0002 	add.w	r0, r5, #2
   10558:	b280      	uxth	r0, r0
   1055a:	ea4f 4114 	mov.w	r1, r4, lsr #16
   1055e:	f7ff ffcf 	bl	10500 <eeprom::setEeprom16(unsigned short, unsigned short)>
}
   10562:	bd38      	pop	{r3, r4, r5, pc}

00010564 <eeprom::getEepromFixed16(unsigned short, float)>:
	setEeprom16(location, (uint16_t)set_value&0xffff);
	setEeprom16(location+2, (uint16_t)set_value>>16);
}

/// Fetch a fixed 16 value from eeprom
float getEepromFixed16(const uint16_t location, const float default_value) {
   10564:	b508      	push	{r3, lr}
//        uint8_t data[2];
		uint16_t data = (uint8_t)eeprom_address(EEPROM_START_ADDRESS, location);
   10566:	f100 6380 	add.w	r3, r0, #67108864	; 0x4000000
   1056a:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
   1056e:	ea4f 0383 	mov.w	r3, r3, lsl #2
   10572:	6818      	ldr	r0, [r3, #0]
   10574:	b2c0      	uxtb	r0, r0
//        eeprom_read_block(data,(const uint8_t*)location,2);
//    	xprintf("getEepromFixed16" " (%s:%d)\n",_F_,_L_);
//    	xprintf("%x" " (%s:%d)\n",data[0],_F_,_L_);
//    	xprintf("%x" " (%s:%d)\n",data[1],_F_,_L_);
        if (data == 0xffff) return default_value;
        return ((float)data);
   10576:	f002 fa6b 	bl	12a50 <__aeabi_ui2f>
//        if (data[0] == 0xff && data[1] == 0xff) return default_value;
//        return ((float)data[0]) + ((float)data[1])/256.0;
}
   1057a:	bd08      	pop	{r3, pc}

0001057c <Heater::reset()>:
		heat_timing_check(timingCheckOn)
{
	reset();
}

void Heater::reset() {
   1057c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10580:	b088      	sub	sp, #32
   10582:	4604      	mov	r4, r0
	// TODO: Reset sensor, element here?

	current_temperature = 0;
   10584:	f04f 0300 	mov.w	r3, #0
   10588:	461e      	mov	r6, r3
   1058a:	8583      	strh	r3, [r0, #44]	; 0x2c
	startTemp = 0;
   1058c:	85c3      	strh	r3, [r0, #46]	; 0x2e

	fail_state = false;
   1058e:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
	fail_count = 0;
   10592:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
	fail_mode = HEATER_FAIL_NONE;
   10596:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
	value_fail_count = 0;
   1059a:	f880 3063 	strb.w	r3, [r0, #99]	; 0x63

	heatingUpTimer = Timeout();
   1059e:	4668      	mov	r0, sp
   105a0:	f001 f936 	bl	11810 <Timeout::Timeout()>
   105a4:	f104 0768 	add.w	r7, r4, #104	; 0x68
   105a8:	e89d 000f 	ldmia.w	sp, {r0, r1, r2, r3}
   105ac:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
	heatProgressTimer = Timeout();
   105b0:	ad04      	add	r5, sp, #16
   105b2:	4628      	mov	r0, r5
   105b4:	f001 f92c 	bl	11810 <Timeout::Timeout()>
   105b8:	f104 0778 	add.w	r7, r4, #120	; 0x78
   105bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   105c0:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
	progressChecked = false;
   105c4:	f884 6088 	strb.w	r6, [r4, #136]	; 0x88
	newTargetReached = false;
   105c8:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
//	reached_count = 0;
	is_paused = false;
   105cc:	f884 608a 	strb.w	r6, [r4, #138]	; 0x8a

	float p = eeprom::getEepromFixed16(eeprom_base+pid_eeprom_offsets::P_TERM_OFFSET,DEFAULT_P);
   105d0:	8e60      	ldrh	r0, [r4, #50]	; 0x32
   105d2:	f04f 0100 	mov.w	r1, #0
   105d6:	f2c4 01e0 	movt	r1, #16608	; 0x40e0
   105da:	f7ff ffc3 	bl	10564 <eeprom::getEepromFixed16(unsigned short, float)>
   105de:	4605      	mov	r5, r0
	float i = eeprom::getEepromFixed16(eeprom_base+pid_eeprom_offsets::I_TERM_OFFSET,DEFAULT_I);
   105e0:	8e60      	ldrh	r0, [r4, #50]	; 0x32
   105e2:	f100 0002 	add.w	r0, r0, #2
   105e6:	b280      	uxth	r0, r0
   105e8:	f246 6166 	movw	r1, #26214	; 0x6666
   105ec:	f6c3 61a6 	movt	r1, #16038	; 0x3ea6
   105f0:	f7ff ffb8 	bl	10564 <eeprom::getEepromFixed16(unsigned short, float)>
   105f4:	4607      	mov	r7, r0
	float d = eeprom::getEepromFixed16(eeprom_base+pid_eeprom_offsets::D_TERM_OFFSET,DEFAULT_D);
   105f6:	8e60      	ldrh	r0, [r4, #50]	; 0x32
   105f8:	f100 0004 	add.w	r0, r0, #4
   105fc:	b280      	uxth	r0, r0
   105fe:	f04f 0100 	mov.w	r1, #0
   10602:	f2c4 2110 	movt	r1, #16912	; 0x4210
   10606:	f7ff ffad 	bl	10564 <eeprom::getEepromFixed16(unsigned short, float)>
   1060a:	4680      	mov	r8, r0

	pid.reset();
   1060c:	f104 0634 	add.w	r6, r4, #52	; 0x34
   10610:	4630      	mov	r0, r6
   10612:	f000 fcd5 	bl	10fc0 <PID::reset()>
	if (p == 0 && i == 0 && d == 0) {
   10616:	4628      	mov	r0, r5
   10618:	f04f 0100 	mov.w	r1, #0
   1061c:	f002 fc04 	bl	12e28 <__aeabi_fcmpeq>
   10620:	b1b8      	cbz	r0, 10652 <Heater::reset()+0xd6>
   10622:	4638      	mov	r0, r7
   10624:	f04f 0100 	mov.w	r1, #0
   10628:	f002 fbfe 	bl	12e28 <__aeabi_fcmpeq>
   1062c:	b188      	cbz	r0, 10652 <Heater::reset()+0xd6>
   1062e:	4640      	mov	r0, r8
   10630:	f04f 0100 	mov.w	r1, #0
   10634:	f002 fbf8 	bl	12e28 <__aeabi_fcmpeq>
   10638:	b158      	cbz	r0, 10652 <Heater::reset()+0xd6>
		p = DEFAULT_P; i = DEFAULT_I; d = DEFAULT_D;
   1063a:	f04f 0800 	mov.w	r8, #0
   1063e:	f2c4 2810 	movt	r8, #16912	; 0x4210
   10642:	f246 6766 	movw	r7, #26214	; 0x6666
   10646:	f6c3 67a6 	movt	r7, #16038	; 0x3ea6
   1064a:	f04f 0500 	mov.w	r5, #0
   1064e:	f2c4 05e0 	movt	r5, #16608	; 0x40e0
    /// Initialize the PID module
    PID();

    /// Set the P term of the PID controller
    /// \param[in] p_gain_in New proportional gain term
    void setPGain(const float p_gain_in) { p_gain = p_gain_in; }
   10652:	6365      	str	r5, [r4, #52]	; 0x34

    /// Set the I term of the PID controller
    /// \param[in] i_gain_in New integration gain term
    void setIGain(const float i_gain_in) { i_gain = i_gain_in; }
   10654:	63a7      	str	r7, [r4, #56]	; 0x38

    /// Set the D term of the PID controller
    /// \param[in] d_gain_in New derivative gain term
    void setDGain(const float d_gain_in) { d_gain = d_gain_in; }
   10656:	f8c4 803c 	str.w	r8, [r4, #60]	; 0x3c
	}
	pid.setPGain(p);
	pid.setIGain(i);
	pid.setDGain(d);
	pid.setTarget(0);
   1065a:	4630      	mov	r0, r6
   1065c:	f04f 0100 	mov.w	r1, #0
   10660:	f000 fd16 	bl	11090 <PID::setTarget(int)>
	next_pid_timeout.start(UPDATE_INTERVAL_MICROS);
   10664:	f104 0008 	add.w	r0, r4, #8
   10668:	f24a 1120 	movw	r1, #41248	; 0xa120
   1066c:	f2c0 0107 	movt	r1, #7
   10670:	f001 f8d4 	bl	1181c <Timeout::start(unsigned long)>
	next_sense_timeout.start(sample_interval_micros);
   10674:	f104 0018 	add.w	r0, r4, #24
   10678:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   1067a:	f001 f8cf 	bl	1181c <Timeout::start(unsigned long)>

}
   1067e:	b008      	add	sp, #32
   10680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010684 <Heater::Heater(TemperatureSensor&, HeatingElement&, unsigned long, unsigned short, bool)>:


/// threshold above starting temperature we check for heating progres
const uint16_t HEAT_PROGRESS_THRESHOLD = 10;

Heater::Heater(TemperatureSensor& sensor_in,
   10684:	b538      	push	{r3, r4, r5, lr}
   10686:	4604      	mov	r4, r0
   10688:	461d      	mov	r5, r3
               uint16_t eeprom_base_in, bool timingCheckOn) :
		sensor(sensor_in),
		element(element_in),
		sample_interval_micros(sample_interval_micros_in),
		eeprom_base(eeprom_base_in),
		heat_timing_check(timingCheckOn)
   1068a:	6001      	str	r1, [r0, #0]
   1068c:	6042      	str	r2, [r0, #4]
   1068e:	f100 0008 	add.w	r0, r0, #8
   10692:	f001 f8bd 	bl	11810 <Timeout::Timeout()>
   10696:	f104 0018 	add.w	r0, r4, #24
   1069a:	f001 f8b9 	bl	11810 <Timeout::Timeout()>
   1069e:	62a5      	str	r5, [r4, #40]	; 0x28
   106a0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   106a4:	8663      	strh	r3, [r4, #50]	; 0x32
   106a6:	f104 0034 	add.w	r0, r4, #52	; 0x34
   106aa:	f000 fc95 	bl	10fd8 <PID::PID()>
   106ae:	f104 0068 	add.w	r0, r4, #104	; 0x68
   106b2:	f001 f8ad 	bl	11810 <Timeout::Timeout()>
   106b6:	f104 0078 	add.w	r0, r4, #120	; 0x78
   106ba:	f001 f8a9 	bl	11810 <Timeout::Timeout()>
   106be:	f89d 3014 	ldrb.w	r3, [sp, #20]
   106c2:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
{
	reset();
   106c6:	4620      	mov	r0, r4
   106c8:	f7ff ff58 	bl	1057c <Heater::reset()>
}
   106cc:	4620      	mov	r0, r4
   106ce:	bd38      	pop	{r3, r4, r5, pc}

000106d0 <Heater::set_target_temperature(int)>:
  'disable heaters'
 */
#define MAX_VALID_TEMP 280

void Heater::set_target_temperature(int temp)
{
   106d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   106d2:	b08d      	sub	sp, #52	; 0x34
   106d4:	4604      	mov	r4, r0
   106d6:	f5b1 7f8c 	cmp.w	r1, #280	; 0x118
   106da:	bfa8      	it	ge
   106dc:	f44f 718c 	movge.w	r1, #280	; 0x118
   106e0:	ea21 76e1 	bic.w	r6, r1, r1, asr #31
	}
	if(temp < 0){
		temp = 0;
	}
	
	newTargetReached = false;
   106e4:	f04f 0300 	mov.w	r3, #0
   106e8:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
	//reached_count = 0;
	
	if(heat_timing_check){
   106ec:	f890 3089 	ldrb.w	r3, [r0, #137]	; 0x89
   106f0:	2b00      	cmp	r3, #0
   106f2:	d039      	beq.n	10768 <Heater::set_target_temperature(int)+0x98>
		startTemp = current_temperature;	
   106f4:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   106f6:	b29b      	uxth	r3, r3
   106f8:	85c3      	strh	r3, [r0, #46]	; 0x2e
		progressChecked = false;
   106fa:	f04f 0300 	mov.w	r3, #0
   106fe:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
		value_fail_count = 0;
   10702:	f880 3063 	strb.w	r3, [r0, #99]	; 0x63
	
		// start a progress timer to verify we are getting temp change over time.
		if(temp > HEAT_FAIL_THRESHOLD){
   10706:	2e1e      	cmp	r6, #30
   10708:	dd1a      	ble.n	10740 <Heater::set_target_temperature(int)+0x70>
			// if the current temp is greater than a (low) threshold, don't check the heating up time, because
			// we've already done that to get to this temperature
			if((temp > startTemp + HEAT_PROGRESS_THRESHOLD) && (startTemp < HEAT_CHECKED_THRESHOLD))
   1070a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   1070c:	b29b      	uxth	r3, r3
   1070e:	f103 030a 	add.w	r3, r3, #10
   10712:	42b3      	cmp	r3, r6
   10714:	da2f      	bge.n	10776 <Heater::set_target_temperature(int)+0xa6>
   10716:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   10718:	b29b      	uxth	r3, r3
   1071a:	2b31      	cmp	r3, #49	; 0x31
   1071c:	d82b      	bhi.n	10776 <Heater::set_target_temperature(int)+0xa6>
			{	heatProgressTimer.start(HEAT_PROGRESS_TIME);}
   1071e:	f100 0078 	add.w	r0, r0, #120	; 0x78
   10722:	f44f 4195 	mov.w	r1, #19072	; 0x4a80
   10726:	f2c0 515d 	movt	r1, #1373	; 0x55d
   1072a:	f001 f877 	bl	1181c <Timeout::start(unsigned long)>
			else
			{	heatProgressTimer = Timeout(); }
				
			heatingUpTimer.start(HEAT_UP_TIME);
   1072e:	f104 0068 	add.w	r0, r4, #104	; 0x68
   10732:	f44f 4123 	mov.w	r1, #41728	; 0xa300
   10736:	f2c1 11e1 	movt	r1, #4577	; 0x11e1
   1073a:	f001 f86f 	bl	1181c <Timeout::start(unsigned long)>
   1073e:	e013      	b.n	10768 <Heater::set_target_temperature(int)+0x98>
		}
		else{
			heatingUpTimer = Timeout();
   10740:	ad04      	add	r5, sp, #16
   10742:	4628      	mov	r0, r5
   10744:	f001 f864 	bl	11810 <Timeout::Timeout()>
   10748:	f104 0768 	add.w	r7, r4, #104	; 0x68
   1074c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   10750:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
			heatProgressTimer = Timeout();
   10754:	ad08      	add	r5, sp, #32
   10756:	4628      	mov	r0, r5
   10758:	f001 f85a 	bl	11810 <Timeout::Timeout()>
   1075c:	f104 0778 	add.w	r7, r4, #120	; 0x78
   10760:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   10764:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
		}
	}
	pid.setTarget(temp);
   10768:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1076c:	4631      	mov	r1, r6
   1076e:	f000 fc8f 	bl	11090 <PID::setTarget(int)>
}
   10772:	b00d      	add	sp, #52	; 0x34
   10774:	bdf0      	pop	{r4, r5, r6, r7, pc}
			// if the current temp is greater than a (low) threshold, don't check the heating up time, because
			// we've already done that to get to this temperature
			if((temp > startTemp + HEAT_PROGRESS_THRESHOLD) && (startTemp < HEAT_CHECKED_THRESHOLD))
			{	heatProgressTimer.start(HEAT_PROGRESS_TIME);}
			else
			{	heatProgressTimer = Timeout(); }
   10776:	4668      	mov	r0, sp
   10778:	f001 f84a 	bl	11810 <Timeout::Timeout()>
   1077c:	f104 0778 	add.w	r7, r4, #120	; 0x78
   10780:	e89d 000f 	ldmia.w	sp, {r0, r1, r2, r3}
   10784:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   10788:	e7d1      	b.n	1072e <Heater::set_target_temperature(int)+0x5e>
   1078a:	bf00      	nop

0001078c <Heater::has_reached_target_temperature()>:

/// Returns true if the current PID temperature is within tolerance
/// of the expected current temperature.
bool Heater::has_reached_target_temperature()
{
	if(is_paused){
   1078c:	f890 308a 	ldrb.w	r3, [r0, #138]	; 0x8a
   10790:	b9ab      	cbnz	r3, 107be <Heater::has_reached_target_temperature()+0x32>
		return false;
	}
    // flag temperature reached so that PID variations don't trigger this
    // a second time
	if(!newTargetReached){
   10792:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
   10796:	b97b      	cbnz	r3, 107b8 <Heater::has_reached_target_temperature()+0x2c>
		if((current_temperature >= (pid.getTarget() - TARGET_HYSTERESIS)) &&
   10798:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
   1079a:	b289      	uxth	r1, r1
    /// \param[in] target New PID controller target
    void setTarget(const int target);

    /// Get the current PID target
    /// \return Current setpoint
    const int getTarget() const { return sp; }
   1079c:	6d83      	ldr	r3, [r0, #88]	; 0x58
   1079e:	f1a3 0202 	sub.w	r2, r3, #2
   107a2:	4291      	cmp	r1, r2
   107a4:	db08      	blt.n	107b8 <Heater::has_reached_target_temperature()+0x2c>
   107a6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   107a8:	b292      	uxth	r2, r2
   107aa:	f103 0302 	add.w	r3, r3, #2
   107ae:	429a      	cmp	r2, r3
			(current_temperature <= (pid.getTarget() + TARGET_HYSTERESIS)))
		{	
		//	reached_count++;
		//	if(reached_count >= TARGET_CHECK_COUNT){
				newTargetReached = true;
   107b0:	bfdc      	itt	le
   107b2:	2301      	movle	r3, #1
   107b4:	f880 3030 	strble.w	r3, [r0, #48]	; 0x30
		//		}
		}
	}
	return newTargetReached; 
   107b8:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
   107bc:	4770      	bx	lr
/// Returns true if the current PID temperature is within tolerance
/// of the expected current temperature.
bool Heater::has_reached_target_temperature()
{
	if(is_paused){
		return false;
   107be:	f04f 0000 	mov.w	r0, #0
				newTargetReached = true;
		//		}
		}
	}
	return newTargetReached; 
}
   107c2:	4770      	bx	lr

000107c4 <Heater::get_set_temperature()>:

int Heater::get_set_temperature() {
	return pid.getTarget();
}
   107c4:	6d80      	ldr	r0, [r0, #88]	; 0x58
   107c6:	4770      	bx	lr

000107c8 <Heater::get_current_temperature()>:

int Heater::get_current_temperature()
{
	return current_temperature;
   107c8:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
}
   107ca:	b280      	uxth	r0, r0
   107cc:	4770      	bx	lr
   107ce:	bf00      	nop

000107d0 <Heater::getPIDErrorTerm()>:

int Heater::getPIDErrorTerm() {
   107d0:	b508      	push	{r3, lr}
	return pid.getErrorTerm();
   107d2:	f100 0034 	add.w	r0, r0, #52	; 0x34
   107d6:	f000 fc65 	bl	110a4 <PID::getErrorTerm()>
}
   107da:	bd08      	pop	{r3, pc}

000107dc <Heater::getPIDDeltaTerm()>:

int Heater::getPIDDeltaTerm() {
   107dc:	b508      	push	{r3, lr}
	return pid.getDeltaTerm();
   107de:	f100 0034 	add.w	r0, r0, #52	; 0x34
   107e2:	f000 fc61 	bl	110a8 <PID::getDeltaTerm()>
}
   107e6:	bd08      	pop	{r3, pc}

000107e8 <Heater::getPIDLastOutput()>:

int Heater::getPIDLastOutput() {
   107e8:	b508      	push	{r3, lr}
	return pid.getLastOutput();
   107ea:	f100 0034 	add.w	r0, r0, #52	; 0x34
   107ee:	f000 fc61 	bl	110b4 <PID::getLastOutput()>
}
   107f2:	bd08      	pop	{r3, pc}

000107f4 <Heater::isHeating()>:

bool Heater::isHeating(){
   107f4:	b510      	push	{r4, lr}
   107f6:	4604      	mov	r4, r0
       return (pid.getTarget() > 0) && !has_reached_target_temperature() && !fail_state;
   107f8:	6d83      	ldr	r3, [r0, #88]	; 0x58
   107fa:	2b00      	cmp	r3, #0
   107fc:	dd07      	ble.n	1080e <Heater::isHeating()+0x1a>
   107fe:	f7ff ffc5 	bl	1078c <Heater::has_reached_target_temperature()>
   10802:	b938      	cbnz	r0, 10814 <Heater::isHeating()+0x20>

int Heater::getPIDLastOutput() {
	return pid.getLastOutput();
}

bool Heater::isHeating(){
   10804:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
   10808:	f080 0001 	eor.w	r0, r0, #1
   1080c:	bd10      	pop	{r4, pc}
       return (pid.getTarget() > 0) && !has_reached_target_temperature() && !fail_state;
   1080e:	f04f 0000 	mov.w	r0, #0
   10812:	bd10      	pop	{r4, pc}
   10814:	f04f 0000 	mov.w	r0, #0
}
   10818:	bd10      	pop	{r4, pc}
   1081a:	bf00      	nop

0001081c <Heater::isCooling()>:

bool Heater::isCooling(){
   1081c:	b538      	push	{r3, r4, r5, lr}
   1081e:	4604      	mov	r4, r0
	return (current_temperature > get_set_temperature()) && !has_reached_target_temperature() && !fail_state;
   10820:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   10822:	b2ad      	uxth	r5, r5
   10824:	f7ff ffce 	bl	107c4 <Heater::get_set_temperature()>
   10828:	4285      	cmp	r5, r0
   1082a:	dd08      	ble.n	1083e <Heater::isCooling()+0x22>
   1082c:	4620      	mov	r0, r4
   1082e:	f7ff ffad 	bl	1078c <Heater::has_reached_target_temperature()>
   10832:	b938      	cbnz	r0, 10844 <Heater::isCooling()+0x28>

bool Heater::isHeating(){
       return (pid.getTarget() > 0) && !has_reached_target_temperature() && !fail_state;
}

bool Heater::isCooling(){
   10834:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
   10838:	f080 0001 	eor.w	r0, r0, #1
   1083c:	bd38      	pop	{r3, r4, r5, pc}
	return (current_temperature > get_set_temperature()) && !has_reached_target_temperature() && !fail_state;
   1083e:	f04f 0000 	mov.w	r0, #0
   10842:	bd38      	pop	{r3, r4, r5, pc}
   10844:	f04f 0000 	mov.w	r0, #0
}
   10848:	bd38      	pop	{r3, r4, r5, pc}
   1084a:	bf00      	nop

0001084c <Heater::set_output(unsigned char)>:
		
	}
}

void Heater::set_output(uint8_t value)
{
   1084c:	b508      	push	{r3, lr}
	element.setHeatingElement(value);
   1084e:	6840      	ldr	r0, [r0, #4]
   10850:	6803      	ldr	r3, [r0, #0]
   10852:	689b      	ldr	r3, [r3, #8]
   10854:	4798      	blx	r3
}
   10856:	bd08      	pop	{r3, pc}

00010858 <Heater::Pause(bool)>:
}


// wait on heating the heater until told to continue
// @param on set pause to on or off
void Heater::Pause(bool on){	
   10858:	b570      	push	{r4, r5, r6, lr}
   1085a:	b088      	sub	sp, #32
   1085c:	4604      	mov	r4, r0
   1085e:	460d      	mov	r5, r1
	
	// don't pause / un-pause again
	if(is_paused == on)
   10860:	f890 308a 	ldrb.w	r3, [r0, #138]	; 0x8a
   10864:	428b      	cmp	r3, r1
   10866:	d02b      	beq.n	108c0 <Heater::Pause(bool)+0x68>
		return;
		
	// don't pause if heater is not on
	if (on && !isHeating())
   10868:	b119      	cbz	r1, 10872 <Heater::Pause(bool)+0x1a>
   1086a:	f7ff ffc3 	bl	107f4 <Heater::isHeating()>
   1086e:	b948      	cbnz	r0, 10884 <Heater::Pause(bool)+0x2c>
   10870:	e026      	b.n	108c0 <Heater::Pause(bool)+0x68>
		return;
	
	//set paused flag
	is_paused = on;
   10872:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
		// clear reached target temperature
		newTargetReached = false;
		
	}else{
		// restart heatup
		set_target_temperature(get_set_temperature());
   10876:	f7ff ffa5 	bl	107c4 <Heater::get_set_temperature()>
   1087a:	4601      	mov	r1, r0
   1087c:	4620      	mov	r0, r4
   1087e:	f7ff ff27 	bl	106d0 <Heater::set_target_temperature(int)>
   10882:	e01d      	b.n	108c0 <Heater::Pause(bool)+0x68>
	// don't pause if heater is not on
	if (on && !isHeating())
		return;
	
	//set paused flag
	is_paused = on;
   10884:	f884 508a 	strb.w	r5, [r4, #138]	; 0x8a
	
	if(is_paused){
		//set output to zero
		set_output(0);
   10888:	4620      	mov	r0, r4
   1088a:	f04f 0100 	mov.w	r1, #0
   1088e:	f7ff ffdd 	bl	1084c <Heater::set_output(unsigned char)>
		// clear heatup timers
		heatingUpTimer = Timeout();
   10892:	4668      	mov	r0, sp
   10894:	f000 ffbc 	bl	11810 <Timeout::Timeout()>
   10898:	f104 0668 	add.w	r6, r4, #104	; 0x68
   1089c:	e89d 000f 	ldmia.w	sp, {r0, r1, r2, r3}
   108a0:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		heatProgressTimer = Timeout();
   108a4:	ad04      	add	r5, sp, #16
   108a6:	4628      	mov	r0, r5
   108a8:	f000 ffb2 	bl	11810 <Timeout::Timeout()>
   108ac:	f104 0678 	add.w	r6, r4, #120	; 0x78
   108b0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   108b4:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		// clear reached target temperature
		newTargetReached = false;
   108b8:	f04f 0300 	mov.w	r3, #0
   108bc:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	}else{
		// restart heatup
		set_target_temperature(get_set_temperature());
		
	}
}
   108c0:	b008      	add	sp, #32
   108c2:	bd70      	pop	{r4, r5, r6, pc}

000108c4 <Heater::fail()>:
	element.setHeatingElement(value);
}

// mark as failed and report to motherboard for user messaging
void Heater::fail()
{
   108c4:	b510      	push	{r4, lr}
   108c6:	4604      	mov	r4, r0
	fail_state = true;
   108c8:	f04f 0301 	mov.w	r3, #1
   108cc:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
	set_output(0);
   108d0:	f04f 0100 	mov.w	r1, #0
   108d4:	f7ff ffba 	bl	1084c <Heater::set_output(unsigned char)>
	Motherboard::getBoard().heaterFail(fail_mode);
   108d8:	f641 309c 	movw	r0, #7068	; 0x1b9c
   108dc:	f2c1 0000 	movt	r0, #4096	; 0x1000
   108e0:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
   108e4:	f7fa fd3e 	bl	b364 <Motherboard::heaterFail(HeaterFailMode)>
}
   108e8:	bd10      	pop	{r4, pc}
   108ea:	bf00      	nop

000108ec <Heater::manage_temperature()>:
		int16_t delta = (target > temp) ? target - temp : temp - target;
        return delta;
}


void Heater::manage_temperature() {
   108ec:	b538      	push	{r3, r4, r5, lr}
   108ee:	4604      	mov	r4, r0
	

	if (next_sense_timeout.hasElapsed()) {
   108f0:	f100 0518 	add.w	r5, r0, #24
   108f4:	4628      	mov	r0, r5
   108f6:	f000 ffa5 	bl	11844 <Timeout::hasElapsed()>
   108fa:	2800      	cmp	r0, #0
   108fc:	f000 8092 	beq.w	10a24 <Heater::manage_temperature()+0x138>
		
		next_sense_timeout.start(sample_interval_micros);
   10900:	4628      	mov	r0, r5
   10902:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   10904:	f000 ff8a 	bl	1181c <Timeout::start(unsigned long)>
		switch (sensor.update()) {
   10908:	6820      	ldr	r0, [r4, #0]
   1090a:	6803      	ldr	r3, [r0, #0]
   1090c:	68db      	ldr	r3, [r3, #12]
   1090e:	4798      	blx	r3
   10910:	b128      	cbz	r0, 1091e <Heater::manage_temperature()+0x32>
   10912:	2802      	cmp	r0, #2
   10914:	d80f      	bhi.n	10936 <Heater::manage_temperature()+0x4a>
		case TemperatureSensor::SS_ADC_BUSY:
		case TemperatureSensor::SS_ADC_WAITING:
			// We're waiting for the ADC, so don't update the temperature yet.
			current_temperature = 2;
   10916:	f04f 0302 	mov.w	r3, #2
   1091a:	85a3      	strh	r3, [r4, #44]	; 0x2c
			return;
   1091c:	bd38      	pop	{r3, r4, r5, pc}
			break;
		case TemperatureSensor::SS_OK:
			// Result was ok, so reset the fail counter, and continue.
			fail_count = 0;
   1091e:	f04f 0300 	mov.w	r3, #0
   10922:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
			current_temperature = 3;
			return;
			break;
		}

		current_temperature = sensor.getTemperature();
   10926:	6823      	ldr	r3, [r4, #0]

	/// Get the last read temperature from the sensor. Note that you need to call
	/// update() at least once for this to return good data.
	/// \return The current temperature, in degrees Celcius, or #BAD_TEMPERATURE if the
	///         last read failed.
	int16_t getTemperature() const { return current_temp; }
   10928:	889b      	ldrh	r3, [r3, #4]
   1092a:	b29b      	uxth	r3, r3
   1092c:	85a3      	strh	r3, [r4, #44]	; 0x2c
		
		if (!is_paused){
   1092e:	f894 308a 	ldrb.w	r3, [r4, #138]	; 0x8a
   10932:	b1a3      	cbz	r3, 1095e <Heater::manage_temperature()+0x72>
   10934:	e076      	b.n	10a24 <Heater::manage_temperature()+0x138>
			fail_count = 0;
			break;
		case TemperatureSensor::SS_ERROR_UNPLUGGED:
		default:
			// If we get too many bad readings in a row, shut down the heater.
			fail_count++;
   10936:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1093a:	f103 0301 	add.w	r3, r3, #1
   1093e:	b2db      	uxtb	r3, r3
   10940:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62

			if (fail_count > SENSOR_MAX_BAD_READINGS) {
   10944:	2b05      	cmp	r3, #5
   10946:	d906      	bls.n	10956 <Heater::manage_temperature()+0x6a>
				fail_mode = HEATER_FAIL_NOT_PLUGGED_IN;
   10948:	f04f 0302 	mov.w	r3, #2
   1094c:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
				fail();
   10950:	4620      	mov	r0, r4
   10952:	f7ff ffb7 	bl	108c4 <Heater::fail()>
			}
			current_temperature = 3;
   10956:	f04f 0303 	mov.w	r3, #3
   1095a:	85a3      	strh	r3, [r4, #44]	; 0x2c
			return;
   1095c:	bd38      	pop	{r3, r4, r5, pc}
		}

		current_temperature = sensor.getTemperature();
		
		if (!is_paused){
			uint8_t old_value_count = value_fail_count;
   1095e:	f894 5063 	ldrb.w	r5, [r4, #99]	; 0x63
			// check that the the heater isn't reading above the maximum allowable temp
			if (current_temperature > HEATER_CUTOFF_TEMPERATURE) {
   10962:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   10964:	b29b      	uxth	r3, r3
   10966:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1096a:	d90e      	bls.n	1098a <Heater::manage_temperature()+0x9e>
				value_fail_count++;
   1096c:	f105 0301 	add.w	r3, r5, #1
   10970:	b2db      	uxtb	r3, r3
   10972:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63

				if (value_fail_count > SENSOR_MAX_BAD_READINGS) {
   10976:	2b05      	cmp	r3, #5
   10978:	d907      	bls.n	1098a <Heater::manage_temperature()+0x9e>
					fail_mode = HEATER_FAIL_SOFTWARE_CUTOFF;
   1097a:	f04f 0304 	mov.w	r3, #4
   1097e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
					fail();
   10982:	4620      	mov	r0, r4
   10984:	f7ff ff9e 	bl	108c4 <Heater::fail()>
					return;
   10988:	bd38      	pop	{r3, r4, r5, pc}
				}
			}
			// check that the heater is heating up after target is set
			if(!progressChecked){
   1098a:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   1098e:	bb0b      	cbnz	r3, 109d4 <Heater::manage_temperature()+0xe8>
				if(heatProgressTimer.hasElapsed()){ 
   10990:	f104 0078 	add.w	r0, r4, #120	; 0x78
   10994:	f000 ff56 	bl	11844 <Timeout::hasElapsed()>
   10998:	b1e0      	cbz	r0, 109d4 <Heater::manage_temperature()+0xe8>
					if(current_temperature < (startTemp + HEAT_PROGRESS_THRESHOLD )){
   1099a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   1099c:	b292      	uxth	r2, r2
   1099e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   109a0:	b29b      	uxth	r3, r3
   109a2:	f103 030a 	add.w	r3, r3, #10
   109a6:	429a      	cmp	r2, r3
							fail();
							return;
						}
					}
					else
						progressChecked = true;
   109a8:	bfa4      	itt	ge
   109aa:	2301      	movge	r3, #1
   109ac:	f884 3088 	strbge.w	r3, [r4, #136]	; 0x88
				}
			}
			// check that the heater is heating up after target is set
			if(!progressChecked){
				if(heatProgressTimer.hasElapsed()){ 
					if(current_temperature < (startTemp + HEAT_PROGRESS_THRESHOLD )){
   109b0:	da10      	bge.n	109d4 <Heater::manage_temperature()+0xe8>
						value_fail_count++;
   109b2:	f894 3063 	ldrb.w	r3, [r4, #99]	; 0x63
   109b6:	f103 0301 	add.w	r3, r3, #1
   109ba:	b2db      	uxtb	r3, r3
   109bc:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63

						if (value_fail_count > SENSOR_MAX_BAD_READINGS) {
   109c0:	2b05      	cmp	r3, #5
   109c2:	d907      	bls.n	109d4 <Heater::manage_temperature()+0xe8>
							fail_mode = HEATER_FAIL_NOT_HEATING;
   109c4:	f04f 0308 	mov.w	r3, #8
   109c8:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
							fail();
   109cc:	4620      	mov	r0, r4
   109ce:	f7ff ff79 	bl	108c4 <Heater::fail()>
							return;
   109d2:	bd38      	pop	{r3, r4, r5, pc}
					else
						progressChecked = true;
				}
			}
			// check that the heater temperature does not drop when still set to high temp
			if(heatingUpTimer.hasElapsed() && has_reached_target_temperature() && (current_temperature < (pid.getTarget() - HEAT_FAIL_THRESHOLD))){
   109d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
   109d8:	f000 ff34 	bl	11844 <Timeout::hasElapsed()>
   109dc:	b1d8      	cbz	r0, 10a16 <Heater::manage_temperature()+0x12a>
   109de:	4620      	mov	r0, r4
   109e0:	f7ff fed4 	bl	1078c <Heater::has_reached_target_temperature()>
   109e4:	b1b8      	cbz	r0, 10a16 <Heater::manage_temperature()+0x12a>
   109e6:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   109e8:	b292      	uxth	r2, r2
   109ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
   109ec:	f1a3 031e 	sub.w	r3, r3, #30
   109f0:	429a      	cmp	r2, r3
   109f2:	da10      	bge.n	10a16 <Heater::manage_temperature()+0x12a>
					value_fail_count++;
   109f4:	f894 3063 	ldrb.w	r3, [r4, #99]	; 0x63
   109f8:	f103 0301 	add.w	r3, r3, #1
   109fc:	b2db      	uxtb	r3, r3
   109fe:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63

					if (value_fail_count > SENSOR_MAX_BAD_READINGS) {
   10a02:	2b05      	cmp	r3, #5
   10a04:	d907      	bls.n	10a16 <Heater::manage_temperature()+0x12a>
						fail_mode = HEATER_FAIL_DROPPING_TEMP;
   10a06:	f04f 0310 	mov.w	r3, #16
   10a0a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
						fail();
   10a0e:	4620      	mov	r0, r4
   10a10:	f7ff ff58 	bl	108c4 <Heater::fail()>
						return;
   10a14:	bd38      	pop	{r3, r4, r5, pc}
					}
			}
			// if no bad heat reads have occured, clear the fail count
			// we don't want this to add up continually forever
			if(value_fail_count == old_value_count)
   10a16:	f894 3063 	ldrb.w	r3, [r4, #99]	; 0x63
   10a1a:	42ab      	cmp	r3, r5
				value_fail_count = 0;
   10a1c:	bf04      	itt	eq
   10a1e:	2300      	moveq	r3, #0
   10a20:	f884 3063 	strbeq.w	r3, [r4, #99]	; 0x63
		}
	}
	if (fail_state) {
   10a24:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   10a28:	2b00      	cmp	r3, #0
   10a2a:	d146      	bne.n	10aba <Heater::manage_temperature()+0x1ce>
		return;
	}
	if (next_pid_timeout.hasElapsed() && !is_paused) {
   10a2c:	f104 0508 	add.w	r5, r4, #8
   10a30:	4628      	mov	r0, r5
   10a32:	f000 ff07 	bl	11844 <Timeout::hasElapsed()>
   10a36:	2800      	cmp	r0, #0
   10a38:	d03f      	beq.n	10aba <Heater::manage_temperature()+0x1ce>
   10a3a:	f894 308a 	ldrb.w	r3, [r4, #138]	; 0x8a
   10a3e:	2b00      	cmp	r3, #0
   10a40:	d13b      	bne.n	10aba <Heater::manage_temperature()+0x1ce>
		
		next_pid_timeout.start(UPDATE_INTERVAL_MICROS);
   10a42:	4628      	mov	r0, r5
   10a44:	f24a 1120 	movw	r1, #41248	; 0xa120
   10a48:	f2c0 0107 	movt	r1, #7
   10a4c:	f000 fee6 	bl	1181c <Timeout::start(unsigned long)>

		int delta = pid.getTarget() - current_temperature;
   10a50:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   10a52:	b292      	uxth	r2, r2
   10a54:	6da3      	ldr	r3, [r4, #88]	; 0x58
   10a56:	1a9a      	subs	r2, r3, r2

		if( bypassing_PID && (delta < PID_BYPASS_DELTA) ) {
   10a58:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   10a5c:	b15b      	cbz	r3, 10a76 <Heater::manage_temperature()+0x18a>
   10a5e:	2a0e      	cmp	r2, #14
   10a60:	dc08      	bgt.n	10a74 <Heater::manage_temperature()+0x188>
			bypassing_PID = false;
   10a62:	f04f 0300 	mov.w	r3, #0
   10a66:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

			pid.reset_state();
   10a6a:	f104 0034 	add.w	r0, r4, #52	; 0x34
   10a6e:	f000 fa99 	bl	10fa4 <PID::reset_state()>
   10a72:	e006      	b.n	10a82 <Heater::manage_temperature()+0x196>
		}
		else if ( !bypassing_PID && (delta > PID_BYPASS_DELTA + 10) ) {
   10a74:	b943      	cbnz	r3, 10a88 <Heater::manage_temperature()+0x19c>
   10a76:	2a19      	cmp	r2, #25
			bypassing_PID = true;
   10a78:	bfc4      	itt	gt
   10a7a:	2301      	movgt	r3, #1
   10a7c:	f884 3060 	strbgt.w	r3, [r4, #96]	; 0x60
		if( bypassing_PID && (delta < PID_BYPASS_DELTA) ) {
			bypassing_PID = false;

			pid.reset_state();
		}
		else if ( !bypassing_PID && (delta > PID_BYPASS_DELTA + 10) ) {
   10a80:	dc02      	bgt.n	10a88 <Heater::manage_temperature()+0x19c>
			bypassing_PID = true;
		}

		if( bypassing_PID ) {
   10a82:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   10a86:	b12b      	cbz	r3, 10a94 <Heater::manage_temperature()+0x1a8>
			set_output(255);
   10a88:	4620      	mov	r0, r4
   10a8a:	f04f 01ff 	mov.w	r1, #255	; 0xff
   10a8e:	f7ff fedd 	bl	1084c <Heater::set_output(unsigned char)>
   10a92:	bd38      	pop	{r3, r4, r5, pc}
		}
		else {
			int mv = pid.calculate(current_temperature);
   10a94:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
   10a96:	f104 0034 	add.w	r0, r4, #52	; 0x34
   10a9a:	b289      	uxth	r1, r1
   10a9c:	f000 faa2 	bl	10fe4 <PID::calculate(int)>
			// but this works pretty well.
			mv += HEATER_OFFSET_ADJUSTMENT;
			// clamp value
			if (mv < 0) { mv = 0; }
			if (mv >255) { mv = 255; }
			if (pid.getTarget() == 0) { mv = 0; }
   10aa0:	6da3      	ldr	r3, [r4, #88]	; 0x58
   10aa2:	f04f 0100 	mov.w	r1, #0
   10aa6:	b123      	cbz	r3, 10ab2 <Heater::manage_temperature()+0x1c6>
   10aa8:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
   10aac:	29ff      	cmp	r1, #255	; 0xff
   10aae:	bfa8      	it	ge
   10ab0:	21ff      	movge	r1, #255	; 0xff
			set_output(mv);
   10ab2:	4620      	mov	r0, r4
   10ab4:	b2c9      	uxtb	r1, r1
   10ab6:	f7ff fec9 	bl	1084c <Heater::set_output(unsigned char)>
   10aba:	bd38      	pop	{r3, r4, r5, pc}

00010abc <Heater::has_failed()>:
}

bool Heater::has_failed()
{
	return fail_state;
}
   10abc:	f890 0061 	ldrb.w	r0, [r0, #97]	; 0x61
   10ac0:	4770      	bx	lr
   10ac2:	bf00      	nop

00010ac4 <Heater::GetFailMode()>:

uint8_t Heater::GetFailMode(){
	
	return fail_mode;
}
   10ac4:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
   10ac8:	4770      	bx	lr
   10aca:	bf00      	nop

00010acc <_GLOBAL__sub_I__ZN6HeaterC2ER17TemperatureSensorR14HeatingElementmtb>:
   10acc:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
   10ace:	f242 60e8 	movw	r0, #9960	; 0x26e8
   10ad2:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10ad6:	f04f 0100 	mov.w	r1, #0
   10ada:	f000 f8ed 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
   10ade:	f242 60ec 	movw	r0, #9964	; 0x26ec
   10ae2:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10ae6:	f04f 0101 	mov.w	r1, #1
   10aea:	f000 f8e5 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
   10aee:	f242 60f0 	movw	r0, #9968	; 0x26f0
   10af2:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10af6:	f04f 0102 	mov.w	r1, #2
   10afa:	f000 f8dd 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
   10afe:	f242 60f4 	movw	r0, #9972	; 0x26f4
   10b02:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10b06:	f04f 0103 	mov.w	r1, #3
   10b0a:	f000 f8d5 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
   10b0e:	f242 60f8 	movw	r0, #9976	; 0x26f8
   10b12:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10b16:	f04f 0104 	mov.w	r1, #4
   10b1a:	f000 f8cd 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
   10b1e:	f242 64fc 	movw	r4, #9980	; 0x26fc
   10b22:	f2c1 0400 	movt	r4, #4096	; 0x1000
   10b26:	4620      	mov	r0, r4
   10b28:	f04f 01ff 	mov.w	r1, #255	; 0xff
   10b2c:	f000 f8c4 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
   10b30:	f242 7000 	movw	r0, #9984	; 0x2700
   10b34:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10b38:	4621      	mov	r1, r4
   10b3a:	f04f 0200 	mov.w	r2, #0
   10b3e:	f000 facd 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
   10b42:	bd10      	pop	{r4, pc}

00010b44 <_GLOBAL__sub_I__ZN9interface3lcdE>:
void setLEDs(bool on){
	board->setLED(0,on);
	board->setLED(1,on);
}

}
   10b44:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
   10b46:	f242 7008 	movw	r0, #9992	; 0x2708
   10b4a:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10b4e:	f04f 0100 	mov.w	r1, #0
   10b52:	f000 f8b1 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
   10b56:	f242 700c 	movw	r0, #9996	; 0x270c
   10b5a:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10b5e:	f04f 0101 	mov.w	r1, #1
   10b62:	f000 f8a9 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
   10b66:	f242 7010 	movw	r0, #10000	; 0x2710
   10b6a:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10b6e:	f04f 0102 	mov.w	r1, #2
   10b72:	f000 f8a1 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
   10b76:	f242 7014 	movw	r0, #10004	; 0x2714
   10b7a:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10b7e:	f04f 0103 	mov.w	r1, #3
   10b82:	f000 f899 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
   10b86:	f242 7018 	movw	r0, #10008	; 0x2718
   10b8a:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10b8e:	f04f 0104 	mov.w	r1, #4
   10b92:	f000 f891 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
   10b96:	f242 7424 	movw	r4, #10020	; 0x2724
   10b9a:	f2c1 0400 	movt	r4, #4096	; 0x1000
   10b9e:	4620      	mov	r0, r4
   10ba0:	f04f 01ff 	mov.w	r1, #255	; 0xff
   10ba4:	f000 f888 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
   10ba8:	f242 701c 	movw	r0, #10012	; 0x271c
   10bac:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10bb0:	4621      	mov	r1, r4
   10bb2:	f04f 0200 	mov.w	r2, #0
   10bb6:	f000 fa91 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
   10bba:	bd10      	pop	{r4, pc}

00010bbc <_GLOBAL__sub_I_button_timeout>:

/// Check if the expected button push has been made. If waitForButton was
/// never called, always return true.
bool InterfaceBoard::buttonPushed() {
  return waitingMask == 0;
}
   10bbc:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
   10bbe:	f242 7028 	movw	r0, #10024	; 0x2728
   10bc2:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10bc6:	f04f 0100 	mov.w	r1, #0
   10bca:	f000 f875 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
   10bce:	f242 702c 	movw	r0, #10028	; 0x272c
   10bd2:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10bd6:	f04f 0101 	mov.w	r1, #1
   10bda:	f000 f86d 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
   10bde:	f242 7030 	movw	r0, #10032	; 0x2730
   10be2:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10be6:	f04f 0102 	mov.w	r1, #2
   10bea:	f000 f865 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
   10bee:	f242 7034 	movw	r0, #10036	; 0x2734
   10bf2:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10bf6:	f04f 0103 	mov.w	r1, #3
   10bfa:	f000 f85d 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
   10bfe:	f242 7038 	movw	r0, #10040	; 0x2738
   10c02:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10c06:	f04f 0104 	mov.w	r1, #4
   10c0a:	f000 f855 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
   10c0e:	f242 744c 	movw	r4, #10060	; 0x274c
   10c12:	f2c1 0400 	movt	r4, #4096	; 0x1000
   10c16:	4620      	mov	r0, r4
   10c18:	f04f 01ff 	mov.w	r1, #255	; 0xff
   10c1c:	f000 f84c 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
   10c20:	f242 7050 	movw	r0, #10064	; 0x2750
   10c24:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10c28:	4621      	mov	r1, r4
   10c2a:	f04f 0200 	mov.w	r2, #0
   10c2e:	f000 fa55 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
//#include "Command.hh"
#include "Motherboard.hh"

#if defined HAS_INTERFACE_BOARD

Timeout button_timeout;
   10c32:	f242 703c 	movw	r0, #10044	; 0x273c
   10c36:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10c3a:	f000 fde9 	bl	11810 <Timeout::Timeout()>

/// Check if the expected button push has been made. If waitForButton was
/// never called, always return true.
bool InterfaceBoard::buttonPushed() {
  return waitingMask == 0;
}
   10c3e:	bd10      	pop	{r4, pc}

00010c40 <_GLOBAL__sub_I__ZN19LiquidCrystalSerialC2E3PinS0_S0_>:
  
    _strobe_pin.setValue(true);
    _delay_us(1);
    _strobe_pin.setValue(false);
     
}
   10c40:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
   10c42:	f242 7058 	movw	r0, #10072	; 0x2758
   10c46:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10c4a:	f04f 0100 	mov.w	r1, #0
   10c4e:	f000 f833 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
   10c52:	f242 705c 	movw	r0, #10076	; 0x275c
   10c56:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10c5a:	f04f 0101 	mov.w	r1, #1
   10c5e:	f000 f82b 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
   10c62:	f242 7060 	movw	r0, #10080	; 0x2760
   10c66:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10c6a:	f04f 0102 	mov.w	r1, #2
   10c6e:	f000 f823 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
   10c72:	f242 7064 	movw	r0, #10084	; 0x2764
   10c76:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10c7a:	f04f 0103 	mov.w	r1, #3
   10c7e:	f000 f81b 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
   10c82:	f242 7068 	movw	r0, #10088	; 0x2768
   10c86:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10c8a:	f04f 0104 	mov.w	r1, #4
   10c8e:	f000 f813 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
   10c92:	f242 746c 	movw	r4, #10092	; 0x276c
   10c96:	f2c1 0400 	movt	r4, #4096	; 0x1000
   10c9a:	4620      	mov	r0, r4
   10c9c:	f04f 01ff 	mov.w	r1, #255	; 0xff
   10ca0:	f000 f80a 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
   10ca4:	f242 7070 	movw	r0, #10096	; 0x2770
   10ca8:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10cac:	4621      	mov	r1, r4
   10cae:	f04f 0200 	mov.w	r2, #0
   10cb2:	f000 fa13 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
   10cb6:	bd10      	pop	{r4, pc}

00010cb8 <LPCPort::LPCPort(unsigned char)>:

extern const LPCPort NullPort(NULL_PORT);
*/
LPCPort::LPCPort() : port_base(NULL_PORT) {};

LPCPort::LPCPort(uint8_t port_base_in) : port_base(port_base_in) {
   10cb8:	7001      	strb	r1, [r0, #0]
};
   10cba:	4770      	bx	lr

00010cbc <_GLOBAL__sub_I__ZN7LPCPortC2Ev>:
void LPCPort::setPinOff(uint8_t pin_index) const {
//	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
//		PORTx &= (uint8_t)pin_mask_inverted;
//	}
	GPIO_ClearValue(port_base, _BV(pin_index));
};
   10cbc:	b508      	push	{r3, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
   10cbe:	f242 7078 	movw	r0, #10104	; 0x2778
   10cc2:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10cc6:	f04f 0100 	mov.w	r1, #0
   10cca:	f7ff fff5 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
   10cce:	f242 707c 	movw	r0, #10108	; 0x277c
   10cd2:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10cd6:	f04f 0101 	mov.w	r1, #1
   10cda:	f7ff ffed 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
   10cde:	f242 7080 	movw	r0, #10112	; 0x2780
   10ce2:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10ce6:	f04f 0102 	mov.w	r1, #2
   10cea:	f7ff ffe5 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
   10cee:	f242 7084 	movw	r0, #10116	; 0x2784
   10cf2:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10cf6:	f04f 0103 	mov.w	r1, #3
   10cfa:	f7ff ffdd 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
   10cfe:	f242 7088 	movw	r0, #10120	; 0x2788
   10d02:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10d06:	f04f 0104 	mov.w	r1, #4
   10d0a:	f7ff ffd5 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
   10d0e:	f242 708c 	movw	r0, #10124	; 0x278c
   10d12:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10d16:	f04f 01ff 	mov.w	r1, #255	; 0xff
   10d1a:	f7ff ffcd 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
   10d1e:	bd08      	pop	{r3, pc}

00010d20 <_GLOBAL__sub_I_ready_fail>:
	if (e != sdcard::SD_SUCCESS) {
        interface::popScreen();
		Motherboard::getBoard().errorResponse(" SD card read error");
		return;
	}
}
   10d20:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
   10d22:	f242 7098 	movw	r0, #10136	; 0x2798
   10d26:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10d2a:	f04f 0100 	mov.w	r1, #0
   10d2e:	f7ff ffc3 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
   10d32:	f242 70a8 	movw	r0, #10152	; 0x27a8
   10d36:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10d3a:	f04f 0101 	mov.w	r1, #1
   10d3e:	f7ff ffbb 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
   10d42:	f242 709c 	movw	r0, #10140	; 0x279c
   10d46:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10d4a:	f04f 0102 	mov.w	r1, #2
   10d4e:	f7ff ffb3 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
   10d52:	f242 70ac 	movw	r0, #10156	; 0x27ac
   10d56:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10d5a:	f04f 0103 	mov.w	r1, #3
   10d5e:	f7ff ffab 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
   10d62:	f242 70a0 	movw	r0, #10144	; 0x27a0
   10d66:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10d6a:	f04f 0104 	mov.w	r1, #4
   10d6e:	f7ff ffa3 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
   10d72:	f242 74a4 	movw	r4, #10148	; 0x27a4
   10d76:	f2c1 0400 	movt	r4, #4096	; 0x1000
   10d7a:	4620      	mov	r0, r4
   10d7c:	f04f 01ff 	mov.w	r1, #255	; 0xff
   10d80:	f7ff ff9a 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
   10d84:	f242 7090 	movw	r0, #10128	; 0x2790
   10d88:	f2c1 0000 	movt	r0, #4096	; 0x1000
   10d8c:	4621      	mov	r1, r4
   10d8e:	f04f 0200 	mov.w	r2, #0
   10d92:	f000 f9a3 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
   10d96:	bd10      	pop	{r4, pc}

00010d98 <_crc_ibutton_update>:
    uint8_t
    _crc_ibutton_update(uint8_t crc, uint8_t data)
    {
	uint8_t i;

	crc = crc ^ data;
   10d98:	4048      	eors	r0, r1
   10d9a:	f04f 0308 	mov.w	r3, #8
	for (i = 0; i < 8; i++)
	{
	    if (crc & 0x01)
	        crc = (crc >> 1) ^ 0x8C;
   10d9e:	f06f 0273 	mvn.w	r2, #115	; 0x73
	uint8_t i;

	crc = crc ^ data;
	for (i = 0; i < 8; i++)
	{
	    if (crc & 0x01)
   10da2:	f010 0f01 	tst.w	r0, #1
	        crc = (crc >> 1) ^ 0x8C;
   10da6:	bf1a      	itte	ne
   10da8:	ea82 0060 	eorne.w	r0, r2, r0, asr #1
   10dac:	b2c0      	uxtbne	r0, r0
	    else
	        crc >>= 1;
   10dae:	0840      	lsreq	r0, r0, #1
   10db0:	f103 33ff 	add.w	r3, r3, #4294967295
   10db4:	b2db      	uxtb	r3, r3
    _crc_ibutton_update(uint8_t crc, uint8_t data)
    {
	uint8_t i;

	crc = crc ^ data;
	for (i = 0; i < 8; i++)
   10db6:	2b00      	cmp	r3, #0
   10db8:	d1f3      	bne.n	10da2 <_crc_ibutton_update+0xa>
	    else
	        crc >>= 1;
	}

	return crc;
    }
   10dba:	4770      	bx	lr

00010dbc <Packet::appendByte(unsigned char)>:
	#include "crc16.h"
#include "comm.h"
}

/// Append a byte and update the CRC
void Packet::appendByte(uint8_t data) {
   10dbc:	b538      	push	{r3, r4, r5, lr}
   10dbe:	4604      	mov	r4, r0
   10dc0:	460d      	mov	r5, r1
	if (length < MAX_PACKET_PAYLOAD) {
   10dc2:	7803      	ldrb	r3, [r0, #0]
   10dc4:	2b1f      	cmp	r3, #31
   10dc6:	d80b      	bhi.n	10de0 <Packet::appendByte(unsigned char)+0x24>
		crc = _crc_ibutton_update(crc, data);
   10dc8:	7840      	ldrb	r0, [r0, #1]
   10dca:	f7ff ffe5 	bl	10d98 <_crc_ibutton_update>
   10dce:	7060      	strb	r0, [r4, #1]
		payload[length] = data;
   10dd0:	7823      	ldrb	r3, [r4, #0]
   10dd2:	18e3      	adds	r3, r4, r3
   10dd4:	709d      	strb	r5, [r3, #2]
		length++;
   10dd6:	7823      	ldrb	r3, [r4, #0]
   10dd8:	f103 0301 	add.w	r3, r3, #1
   10ddc:	b2db      	uxtb	r3, r3
   10dde:	7023      	strb	r3, [r4, #0]
   10de0:	bd38      	pop	{r3, r4, r5, pc}
   10de2:	bf00      	nop

00010de4 <Packet::reset()>:
	}
}
/// Reset this packet to an empty state
void Packet::reset() {
	crc = 0;
   10de4:	f04f 0300 	mov.w	r3, #0
   10de8:	7043      	strb	r3, [r0, #1]
	length = 0;
   10dea:	7003      	strb	r3, [r0, #0]
#ifdef PARANOID
	for (uint8_t i = 0; i < MAX_PACKET_PAYLOAD; i++) {
		payload[i] = 0;
	}
#endif // PARANOID
	error_code = PacketError::NO_ERROR;
   10dec:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	state = PS_START;
   10df0:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
}
   10df4:	4770      	bx	lr
   10df6:	bf00      	nop

00010df8 <InPacket::reset()>:
InPacket::InPacket() {
	reset();
}

/// Reset the entire packet reception.
void InPacket::reset() {
   10df8:	b508      	push	{r3, lr}
	Packet::reset();
   10dfa:	f7ff fff3 	bl	10de4 <Packet::reset()>
}
   10dfe:	bd08      	pop	{r3, pc}

00010e00 <InPacket::InPacket()>:
#endif // PARANOID
	error_code = PacketError::NO_ERROR;
	state = PS_START;
}

InPacket::InPacket() {
   10e00:	b510      	push	{r4, lr}
   10e02:	4604      	mov	r4, r0
	reset();
   10e04:	f7ff fff8 	bl	10df8 <InPacket::reset()>
}
   10e08:	4620      	mov	r0, r4
   10e0a:	bd10      	pop	{r4, pc}

00010e0c <InPacket::processByte(unsigned char)>:
void InPacket::reset() {
	Packet::reset();
}

//process a byte for our packet.
void InPacket::processByte(uint8_t b) {
   10e0c:	b510      	push	{r4, lr}
   10e0e:	4604      	mov	r4, r0
	if (state == PS_START) {
   10e10:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
   10e14:	b96b      	cbnz	r3, 10e32 <InPacket::processByte(unsigned char)+0x26>
		if (b == START_BYTE) {
   10e16:	29d5      	cmp	r1, #213	; 0xd5
   10e18:	d104      	bne.n	10e24 <InPacket::processByte(unsigned char)+0x18>
			state = PS_LEN;
   10e1a:	f04f 0301 	mov.w	r3, #1
   10e1e:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
   10e22:	bd10      	pop	{r4, pc}
	void appendByte(uint8_t data);
	/// Reset this packet to an empty state
	void reset();

	void error(uint8_t error_code_in) {
		reset();
   10e24:	f7ff ffde 	bl	10de4 <Packet::reset()>
		error_code = error_code_in;
   10e28:	f04f 0301 	mov.w	r3, #1
   10e2c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   10e30:	bd10      	pop	{r4, pc}
		} else {
			error(PacketError::NOISE_BYTE);
		}
	} else if (state == PS_LEN) {
   10e32:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
   10e36:	2b01      	cmp	r3, #1
   10e38:	d113      	bne.n	10e62 <InPacket::processByte(unsigned char)+0x56>
		if (b <= MAX_PACKET_PAYLOAD) {
   10e3a:	2920      	cmp	r1, #32
   10e3c:	d80a      	bhi.n	10e54 <InPacket::processByte(unsigned char)+0x48>
			expected_length = b;
   10e3e:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
			state = (expected_length == 0) ? PS_CRC : PS_PAYLOAD;
   10e42:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   10e46:	2b00      	cmp	r3, #0
   10e48:	bf14      	ite	ne
   10e4a:	2302      	movne	r3, #2
   10e4c:	2303      	moveq	r3, #3
   10e4e:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
   10e52:	bd10      	pop	{r4, pc}
	void appendByte(uint8_t data);
	/// Reset this packet to an empty state
	void reset();

	void error(uint8_t error_code_in) {
		reset();
   10e54:	f7ff ffc6 	bl	10de4 <Packet::reset()>
		error_code = error_code_in;
   10e58:	f04f 0302 	mov.w	r3, #2
   10e5c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   10e60:	bd10      	pop	{r4, pc}
		} else {
			error(PacketError::EXCEEDED_MAX_LENGTH);
		}
	} else if (state == PS_PAYLOAD) {
   10e62:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
   10e66:	2b02      	cmp	r3, #2
   10e68:	d10b      	bne.n	10e82 <InPacket::processByte(unsigned char)+0x76>
		appendByte(b);
   10e6a:	f7ff ffa7 	bl	10dbc <Packet::appendByte(unsigned char)>
		if (length >= expected_length) {
   10e6e:	7822      	ldrb	r2, [r4, #0]
   10e70:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   10e74:	429a      	cmp	r2, r3
   10e76:	d316      	bcc.n	10ea6 <InPacket::processByte(unsigned char)+0x9a>
			state = PS_CRC;
   10e78:	f04f 0303 	mov.w	r3, #3
   10e7c:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
   10e80:	bd10      	pop	{r4, pc}
		}
	} else if (state == PS_CRC) {
   10e82:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
   10e86:	2b03      	cmp	r3, #3
   10e88:	d10d      	bne.n	10ea6 <InPacket::processByte(unsigned char)+0x9a>
		if (crc == b) {
   10e8a:	7843      	ldrb	r3, [r0, #1]
   10e8c:	4299      	cmp	r1, r3
   10e8e:	d104      	bne.n	10e9a <InPacket::processByte(unsigned char)+0x8e>
			state = PS_LAST;
   10e90:	f04f 0304 	mov.w	r3, #4
   10e94:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
   10e98:	bd10      	pop	{r4, pc}
	void appendByte(uint8_t data);
	/// Reset this packet to an empty state
	void reset();

	void error(uint8_t error_code_in) {
		reset();
   10e9a:	f7ff ffa3 	bl	10de4 <Packet::reset()>
		error_code = error_code_in;
   10e9e:	f04f 0303 	mov.w	r3, #3
   10ea2:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   10ea6:	bd10      	pop	{r4, pc}

00010ea8 <Packet::read8(unsigned char) const>:

}

// Reads an 8-bit byte from the specified index of the payload
uint8_t Packet::read8(uint8_t index) const {
	return payload[index];
   10ea8:	1841      	adds	r1, r0, r1
   10eaa:	7888      	ldrb	r0, [r1, #2]
}
   10eac:	4770      	bx	lr
   10eae:	bf00      	nop

00010eb0 <Packet::read16(unsigned char) const>:
uint16_t Packet::read16(uint8_t index) const {
	return payload[index] | (payload[index + 1] << 8);
   10eb0:	1843      	adds	r3, r0, r1
   10eb2:	789b      	ldrb	r3, [r3, #2]
   10eb4:	f101 0101 	add.w	r1, r1, #1
   10eb8:	1840      	adds	r0, r0, r1
   10eba:	7880      	ldrb	r0, [r0, #2]
}
   10ebc:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   10ec0:	4770      	bx	lr
   10ec2:	bf00      	nop

00010ec4 <OutPacket::reset()>:
OutPacket::OutPacket() {
	reset();
}

/// Reset the entire packet transmission.
void OutPacket::reset() {
   10ec4:	b510      	push	{r4, lr}
   10ec6:	4604      	mov	r4, r0
	Packet::reset();
   10ec8:	f7ff ff8c 	bl	10de4 <Packet::reset()>
	send_payload_index = 0;
   10ecc:	f04f 0300 	mov.w	r3, #0
   10ed0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
   10ed4:	bd10      	pop	{r4, pc}
   10ed6:	bf00      	nop

00010ed8 <OutPacket::OutPacket()>:
	shared.b.data[3] = payload[index+3];

	return shared.a;
}

OutPacket::OutPacket() {
   10ed8:	b510      	push	{r4, lr}
   10eda:	4604      	mov	r4, r0
	reset();
   10edc:	f7ff fff2 	bl	10ec4 <OutPacket::reset()>
}
   10ee0:	4620      	mov	r0, r4
   10ee2:	bd10      	pop	{r4, pc}

00010ee4 <OutPacket::getNextByteToSend()>:
void OutPacket::prepareForResend() {
	error_code = PacketError::NO_ERROR;
	state = PS_START;
	send_payload_index = 0;
}
uint8_t OutPacket::getNextByteToSend() {
   10ee4:	4603      	mov	r3, r0
	uint8_t next_byte = 0;
	if (state == PS_START) {
   10ee6:	f890 2023 	ldrb.w	r2, [r0, #35]	; 0x23
   10eea:	b932      	cbnz	r2, 10efa <OutPacket::getNextByteToSend()+0x16>
		next_byte = START_BYTE;
		state = PS_LEN;
   10eec:	f04f 0201 	mov.w	r2, #1
   10ef0:	f880 2023 	strb.w	r2, [r0, #35]	; 0x23
	send_payload_index = 0;
}
uint8_t OutPacket::getNextByteToSend() {
	uint8_t next_byte = 0;
	if (state == PS_START) {
		next_byte = START_BYTE;
   10ef4:	f04f 00d5 	mov.w	r0, #213	; 0xd5
   10ef8:	4770      	bx	lr
		state = PS_LEN;
	} else if (state == PS_LEN) {
   10efa:	f890 2023 	ldrb.w	r2, [r0, #35]	; 0x23
   10efe:	2a01      	cmp	r2, #1
   10f00:	d108      	bne.n	10f14 <OutPacket::getNextByteToSend()+0x30>
		next_byte = length;
   10f02:	7800      	ldrb	r0, [r0, #0]
		state = (length==0)?PS_CRC:PS_PAYLOAD;
   10f04:	781a      	ldrb	r2, [r3, #0]
   10f06:	2a00      	cmp	r2, #0
   10f08:	bf14      	ite	ne
   10f0a:	2202      	movne	r2, #2
   10f0c:	2203      	moveq	r2, #3
   10f0e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
   10f12:	4770      	bx	lr
	} else if (state == PS_PAYLOAD) {
   10f14:	f890 2023 	ldrb.w	r2, [r0, #35]	; 0x23
   10f18:	2a02      	cmp	r2, #2
   10f1a:	d110      	bne.n	10f3e <OutPacket::getNextByteToSend()+0x5a>
		next_byte= payload[send_payload_index++];
   10f1c:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   10f20:	1881      	adds	r1, r0, r2
   10f22:	7888      	ldrb	r0, [r1, #2]
   10f24:	f102 0201 	add.w	r2, r2, #1
   10f28:	b2d2      	uxtb	r2, r2
   10f2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		if (send_payload_index >= length) {
   10f2e:	7819      	ldrb	r1, [r3, #0]
   10f30:	428a      	cmp	r2, r1
   10f32:	d310      	bcc.n	10f56 <OutPacket::getNextByteToSend()+0x72>
			state = PS_CRC;
   10f34:	f04f 0203 	mov.w	r2, #3
   10f38:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
   10f3c:	4770      	bx	lr
		}
	} else if (state == PS_CRC) {
   10f3e:	f890 2023 	ldrb.w	r2, [r0, #35]	; 0x23
   10f42:	2a03      	cmp	r2, #3
	error_code = PacketError::NO_ERROR;
	state = PS_START;
	send_payload_index = 0;
}
uint8_t OutPacket::getNextByteToSend() {
	uint8_t next_byte = 0;
   10f44:	bf18      	it	ne
   10f46:	2000      	movne	r0, #0
	} else if (state == PS_PAYLOAD) {
		next_byte= payload[send_payload_index++];
		if (send_payload_index >= length) {
			state = PS_CRC;
		}
	} else if (state == PS_CRC) {
   10f48:	d105      	bne.n	10f56 <OutPacket::getNextByteToSend()+0x72>
		next_byte = crc;
   10f4a:	7858      	ldrb	r0, [r3, #1]
		state = PS_LAST;
   10f4c:	f04f 0204 	mov.w	r2, #4
   10f50:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
   10f54:	4770      	bx	lr
	}
	return next_byte;
}
   10f56:	4770      	bx	lr

00010f58 <OutPacket::append8(unsigned char)>:

// Add an 8-bit byte to the end of the payload
void OutPacket::append8(uint8_t value) {
   10f58:	b508      	push	{r3, lr}
	appendByte(value);
   10f5a:	f7ff ff2f 	bl	10dbc <Packet::appendByte(unsigned char)>
}
   10f5e:	bd08      	pop	{r3, pc}

00010f60 <OutPacket::append16(unsigned short)>:
void OutPacket::append16(uint16_t value) {
   10f60:	b538      	push	{r3, r4, r5, lr}
   10f62:	4605      	mov	r5, r0
   10f64:	460c      	mov	r4, r1
	appendByte(value&0xff);
   10f66:	b2c9      	uxtb	r1, r1
   10f68:	f7ff ff28 	bl	10dbc <Packet::appendByte(unsigned char)>
	appendByte((value>>8)&0xff);
   10f6c:	4628      	mov	r0, r5
   10f6e:	ea4f 2114 	mov.w	r1, r4, lsr #8
   10f72:	f7ff ff23 	bl	10dbc <Packet::appendByte(unsigned char)>
}
   10f76:	bd38      	pop	{r3, r4, r5, pc}

00010f78 <OutPacket::append32(unsigned long)>:
void OutPacket::append32(uint32_t value) {
   10f78:	b538      	push	{r3, r4, r5, lr}
   10f7a:	4605      	mov	r5, r0
   10f7c:	460c      	mov	r4, r1
	appendByte(value&0xff);
   10f7e:	b2c9      	uxtb	r1, r1
   10f80:	f7ff ff1c 	bl	10dbc <Packet::appendByte(unsigned char)>
	appendByte((value>>8)&0xff);
   10f84:	4628      	mov	r0, r5
   10f86:	f3c4 2107 	ubfx	r1, r4, #8, #8
   10f8a:	f7ff ff17 	bl	10dbc <Packet::appendByte(unsigned char)>
	appendByte((value>>16)&0xff);
   10f8e:	4628      	mov	r0, r5
   10f90:	f3c4 4107 	ubfx	r1, r4, #16, #8
   10f94:	f7ff ff12 	bl	10dbc <Packet::appendByte(unsigned char)>
	appendByte((value>>24)&0xff);
   10f98:	4628      	mov	r0, r5
   10f9a:	ea4f 6114 	mov.w	r1, r4, lsr #24
   10f9e:	f7ff ff0d 	bl	10dbc <Packet::appendByte(unsigned char)>
}
   10fa2:	bd38      	pop	{r3, r4, r5, pc}

00010fa4 <PID::reset_state()>:

	reset_state();
}

void PID::reset_state() {
	error_acc = 0;
   10fa4:	f04f 0300 	mov.w	r3, #0
   10fa8:	6203      	str	r3, [r0, #32]
	prev_error = 0;
   10faa:	61c3      	str	r3, [r0, #28]
	delta_idx = 0;

	for (delta_idx = 0; delta_idx < DELTA_SAMPLES; delta_idx++) {
		delta_history[delta_idx] = 0;
   10fac:	8183      	strh	r3, [r0, #12]
   10fae:	81c3      	strh	r3, [r0, #14]
   10fb0:	8203      	strh	r3, [r0, #16]
   10fb2:	8243      	strh	r3, [r0, #18]
	}
	delta_idx = 0;
   10fb4:	7603      	strb	r3, [r0, #24]
	delta_summation = 0;
   10fb6:	f04f 0200 	mov.w	r2, #0
   10fba:	6142      	str	r2, [r0, #20]

	last_output = 0;
   10fbc:	6283      	str	r3, [r0, #40]	; 0x28
}
   10fbe:	4770      	bx	lr

00010fc0 <PID::reset()>:

PID::PID() {
    reset();
}

void PID::reset() {
   10fc0:	b508      	push	{r3, lr}
	sp = 0;
   10fc2:	f04f 0200 	mov.w	r2, #0
   10fc6:	6242      	str	r2, [r0, #36]	; 0x24
	p_gain = i_gain = d_gain = 0;
   10fc8:	f04f 0200 	mov.w	r2, #0
   10fcc:	6082      	str	r2, [r0, #8]
   10fce:	6042      	str	r2, [r0, #4]
   10fd0:	6002      	str	r2, [r0, #0]

	reset_state();
   10fd2:	f7ff ffe7 	bl	10fa4 <PID::reset_state()>
}
   10fd6:	bd08      	pop	{r3, pc}

00010fd8 <PID::PID()>:
#define ERR_ACC_MIN -ERR_ACC_MAX

// scale the output term to account for our fixed-point bounds
#define OUTPUT_SCALE 2

PID::PID() {
   10fd8:	b510      	push	{r4, lr}
   10fda:	4604      	mov	r4, r0
    reset();
   10fdc:	f7ff fff0 	bl	10fc0 <PID::reset()>
}
   10fe0:	4620      	mov	r0, r4
   10fe2:	bd10      	pop	{r4, pc}

00010fe4 <PID::calculate(int)>:
// series of samples.  This helps us get a reasonable delta despite the discrete
// nature of the samples; on average we will get a delta of maybe 1/deg/second,
// which will give us a delta impulse for that one calculation round and then
// the D term will immediately disappear.  By averaging the last N deltas, we
// allow changes to be registered rather than get subsumed in the sampling noise.
int PID::calculate(const int pv) {
   10fe4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10fe8:	4604      	mov	r4, r0
	int e = sp - pv;
   10fea:	6a45      	ldr	r5, [r0, #36]	; 0x24
   10fec:	1a6d      	subs	r5, r5, r1
	error_acc += e;
   10fee:	6a03      	ldr	r3, [r0, #32]
   10ff0:	18eb      	adds	r3, r5, r3
   10ff2:	6203      	str	r3, [r0, #32]
	// Clamp the error accumulator at accepted values.
	// This will help control overcorrection for accumulated error during the run-up
	// and allow the I term to be integrated away more quickly as we approach the
	// setpoint.
	if (error_acc > ERR_ACC_MAX) {
   10ff4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
		error_acc = ERR_ACC_MAX;
   10ff8:	bfc4      	itt	gt
   10ffa:	f44f 7380 	movgt.w	r3, #256	; 0x100
   10ffe:	6203      	strgt	r3, [r0, #32]
	error_acc += e;
	// Clamp the error accumulator at accepted values.
	// This will help control overcorrection for accumulated error during the run-up
	// and allow the I term to be integrated away more quickly as we approach the
	// setpoint.
	if (error_acc > ERR_ACC_MAX) {
   11000:	dc05      	bgt.n	1100e <PID::calculate(int)+0x2a>
		error_acc = ERR_ACC_MAX;
	}
	if (error_acc < ERR_ACC_MIN) {
   11002:	f513 7f80 	cmn.w	r3, #256	; 0x100
		error_acc = ERR_ACC_MIN;
   11006:	bfbc      	itt	lt
   11008:	f06f 03ff 	mvnlt.w	r3, #255	; 0xff
   1100c:	6203      	strlt	r3, [r0, #32]
	}
	float p_term = (float)e * p_gain;
   1100e:	4628      	mov	r0, r5
   11010:	f001 fd22 	bl	12a58 <__aeabi_i2f>
   11014:	6821      	ldr	r1, [r4, #0]
   11016:	f001 fd73 	bl	12b00 <__aeabi_fmul>
   1101a:	4682      	mov	sl, r0
	float i_term = (float)error_acc * i_gain;
   1101c:	6a20      	ldr	r0, [r4, #32]
   1101e:	f001 fd1b 	bl	12a58 <__aeabi_i2f>
   11022:	6861      	ldr	r1, [r4, #4]
   11024:	f001 fd6c 	bl	12b00 <__aeabi_fmul>
   11028:	4683      	mov	fp, r0
	int delta = e - prev_error;
   1102a:	69e7      	ldr	r7, [r4, #28]
   1102c:	1bef      	subs	r7, r5, r7
	// Add to delta history
	delta_summation -= delta_history[delta_idx];
   1102e:	f894 8018 	ldrb.w	r8, [r4, #24]
   11032:	f108 0604 	add.w	r6, r8, #4
   11036:	eb04 0646 	add.w	r6, r4, r6, lsl #1
   1103a:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
   1103e:	f001 fd0b 	bl	12a58 <__aeabi_i2f>
   11042:	4601      	mov	r1, r0
   11044:	6960      	ldr	r0, [r4, #20]
   11046:	f001 fc51 	bl	128ec <__aeabi_fsub>
   1104a:	4681      	mov	r9, r0
	delta_history[delta_idx] = delta;
   1104c:	80b7      	strh	r7, [r6, #4]
	delta_summation += (float)delta;
   1104e:	4638      	mov	r0, r7
   11050:	f001 fd02 	bl	12a58 <__aeabi_i2f>
   11054:	4601      	mov	r1, r0
   11056:	4648      	mov	r0, r9
   11058:	f001 fc4a 	bl	128f0 <__addsf3>
   1105c:	6160      	str	r0, [r4, #20]
	delta_idx = (delta_idx+1) % DELTA_SAMPLES;
   1105e:	f108 0801 	add.w	r8, r8, #1
   11062:	f008 0803 	and.w	r8, r8, #3
   11066:	f884 8018 	strb.w	r8, [r4, #24]
	// Use the delta over the whole window
	float d_term = delta_summation * d_gain;
   1106a:	68a1      	ldr	r1, [r4, #8]
   1106c:	f001 fd48 	bl	12b00 <__aeabi_fmul>
   11070:	4606      	mov	r6, r0

	prev_error = e;
   11072:	61e5      	str	r5, [r4, #28]

	last_output = ((int)(p_term + i_term + d_term))*OUTPUT_SCALE;
   11074:	4650      	mov	r0, sl
   11076:	4659      	mov	r1, fp
   11078:	f001 fc3a 	bl	128f0 <__addsf3>
   1107c:	4631      	mov	r1, r6
   1107e:	f001 fc37 	bl	128f0 <__addsf3>
   11082:	f001 ff03 	bl	12e8c <__aeabi_f2iz>
   11086:	ea4f 0040 	mov.w	r0, r0, lsl #1
   1108a:	62a0      	str	r0, [r4, #40]	; 0x28

	return last_output;
}
   1108c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00011090 <PID::setTarget(int)>:

void PID::setTarget(const int target) {
   11090:	b538      	push	{r3, r4, r5, lr}
   11092:	4604      	mov	r4, r0
   11094:	460d      	mov	r5, r1
	if (sp != target) {
   11096:	6a43      	ldr	r3, [r0, #36]	; 0x24
   11098:	428b      	cmp	r3, r1
   1109a:	d002      	beq.n	110a2 <PID::setTarget(int)+0x12>
		reset_state();
   1109c:	f7ff ff82 	bl	10fa4 <PID::reset_state()>
		sp = target;
   110a0:	6265      	str	r5, [r4, #36]	; 0x24
   110a2:	bd38      	pop	{r3, r4, r5, pc}

000110a4 <PID::getErrorTerm()>:
	}
}

int PID::getErrorTerm() {
	return error_acc;
}
   110a4:	6a00      	ldr	r0, [r0, #32]
   110a6:	4770      	bx	lr

000110a8 <PID::getDeltaTerm()>:

int PID::getDeltaTerm() {
   110a8:	b508      	push	{r3, lr}
	return (int)delta_summation;
   110aa:	6940      	ldr	r0, [r0, #20]
   110ac:	f001 feee 	bl	12e8c <__aeabi_f2iz>
}
   110b0:	bd08      	pop	{r3, pc}
   110b2:	bf00      	nop

000110b4 <PID::getLastOutput()>:

int PID::getLastOutput() {
	return (int)last_output;
}
   110b4:	6a80      	ldr	r0, [r0, #40]	; 0x28
   110b6:	4770      	bx	lr

000110b8 <Pin::Pin()>:
#include "Pin.hh"

Pin::Pin() : port_base(NullPort.port_base), is_null(true), pin_index(0), pin_mask(0), pin_mask_inverted((uint8_t)~0) {}
   110b8:	f242 72c4 	movw	r2, #10180	; 0x27c4
   110bc:	f2c1 0200 	movt	r2, #4096	; 0x1000
   110c0:	7812      	ldrb	r2, [r2, #0]
   110c2:	7002      	strb	r2, [r0, #0]
   110c4:	f04f 0201 	mov.w	r2, #1
   110c8:	7042      	strb	r2, [r0, #1]
   110ca:	f04f 0200 	mov.w	r2, #0
   110ce:	7082      	strb	r2, [r0, #2]
   110d0:	70c2      	strb	r2, [r0, #3]
   110d2:	f04f 02ff 	mov.w	r2, #255	; 0xff
   110d6:	7102      	strb	r2, [r0, #4]
   110d8:	4770      	bx	lr
   110da:	bf00      	nop

000110dc <Pin::Pin(LPCPort const&, unsigned char)>:

Pin::Pin(const LPCPort& port_in, uint8_t pin_index_in) : port_base(port_in.port_base), is_null(port_base == NULL_PORT), pin_index(pin_index_in), pin_mask((uint8_t)_BV(pin_index_in)), pin_mask_inverted((uint8_t)~_BV(pin_index_in)) {}
   110dc:	7809      	ldrb	r1, [r1, #0]
   110de:	7001      	strb	r1, [r0, #0]
   110e0:	29ff      	cmp	r1, #255	; 0xff
   110e2:	bf14      	ite	ne
   110e4:	2100      	movne	r1, #0
   110e6:	2101      	moveq	r1, #1
   110e8:	7041      	strb	r1, [r0, #1]
   110ea:	7082      	strb	r2, [r0, #2]
   110ec:	f04f 0101 	mov.w	r1, #1
   110f0:	fa01 f202 	lsl.w	r2, r1, r2
   110f4:	b2d2      	uxtb	r2, r2
   110f6:	70c2      	strb	r2, [r0, #3]
   110f8:	ea6f 0202 	mvn.w	r2, r2
   110fc:	7102      	strb	r2, [r0, #4]
   110fe:	4770      	bx	lr

00011100 <Pin::Pin(Pin const&)>:

Pin::Pin(const Pin& other_pin) : port_base(other_pin.port_base), is_null(port_base == NULL_PORT), pin_index(other_pin.pin_index), pin_mask(other_pin.pin_mask), pin_mask_inverted(other_pin.pin_mask_inverted) {}
   11100:	780a      	ldrb	r2, [r1, #0]
   11102:	7002      	strb	r2, [r0, #0]
   11104:	2aff      	cmp	r2, #255	; 0xff
   11106:	bf14      	ite	ne
   11108:	2200      	movne	r2, #0
   1110a:	2201      	moveq	r2, #1
   1110c:	7042      	strb	r2, [r0, #1]
   1110e:	788a      	ldrb	r2, [r1, #2]
   11110:	7082      	strb	r2, [r0, #2]
   11112:	78ca      	ldrb	r2, [r1, #3]
   11114:	70c2      	strb	r2, [r0, #3]
   11116:	790a      	ldrb	r2, [r1, #4]
   11118:	7102      	strb	r2, [r0, #4]
   1111a:	4770      	bx	lr

0001111c <Pin::setDirection(bool) const>:

bool Pin::isNull() const { return is_null; }

void Pin::setDirection(bool out) const {
   1111c:	b530      	push	{r4, r5, lr}
   1111e:	b083      	sub	sp, #12
   11120:	4604      	mov	r4, r0
   11122:	460d      	mov	r5, r1
	 if (is_null)
   11124:	7843      	ldrb	r3, [r0, #1]
   11126:	b9c3      	cbnz	r3, 1115a <Pin::setDirection(bool) const+0x3e>
//		GPIO_SetDir(port_base, _BV(pin_index), 0);
//	}
//	xprintf("%x (%s:%d)\n",&GPIO_SetDir,_F_,_L_);

	PINSEL_CFG_Type PinCfg;
	PinCfg.Funcnum = PINSEL_FUNC_0;
   11128:	f88d 3002 	strb.w	r3, [sp, #2]
	PinCfg.OpenDrain = PINSEL_PINMODE_NORMAL;
   1112c:	f88d 3004 	strb.w	r3, [sp, #4]
	PinCfg.Pinmode = PINSEL_PINMODE_PULLUP;
   11130:	f88d 3003 	strb.w	r3, [sp, #3]
	PinCfg.Pinnum = pin_index;
   11134:	7883      	ldrb	r3, [r0, #2]
   11136:	f88d 3001 	strb.w	r3, [sp, #1]
	PinCfg.Portnum = port_base;
   1113a:	7803      	ldrb	r3, [r0, #0]
   1113c:	a802      	add	r0, sp, #8
   1113e:	f800 3d08 	strb.w	r3, [r0, #-8]!
	PINSEL_ConfigPin(&PinCfg);
   11142:	4668      	mov	r0, sp
   11144:	f7f2 f9ee 	bl	3524 <PINSEL_ConfigPin>

	GPIO_SetDir(port_base, _BV(pin_index), out);
   11148:	78a3      	ldrb	r3, [r4, #2]
   1114a:	7820      	ldrb	r0, [r4, #0]
   1114c:	f04f 0101 	mov.w	r1, #1
   11150:	fa01 f103 	lsl.w	r1, r1, r3
   11154:	462a      	mov	r2, r5
   11156:	f7f2 f9b5 	bl	34c4 <GPIO_SetDir>
//	SREG = oldSREG;
}
   1115a:	b003      	add	sp, #12
   1115c:	bd30      	pop	{r4, r5, pc}
   1115e:	bf00      	nop

00011160 <_GLOBAL__sub_I__ZN3PinC2Ev>:
   11160:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
   11162:	f242 70b0 	movw	r0, #10160	; 0x27b0
   11166:	f2c1 0000 	movt	r0, #4096	; 0x1000
   1116a:	f04f 0100 	mov.w	r1, #0
   1116e:	f7ff fda3 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
   11172:	f242 70b4 	movw	r0, #10164	; 0x27b4
   11176:	f2c1 0000 	movt	r0, #4096	; 0x1000
   1117a:	f04f 0101 	mov.w	r1, #1
   1117e:	f7ff fd9b 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
   11182:	f242 70b8 	movw	r0, #10168	; 0x27b8
   11186:	f2c1 0000 	movt	r0, #4096	; 0x1000
   1118a:	f04f 0102 	mov.w	r1, #2
   1118e:	f7ff fd93 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
   11192:	f242 70bc 	movw	r0, #10172	; 0x27bc
   11196:	f2c1 0000 	movt	r0, #4096	; 0x1000
   1119a:	f04f 0103 	mov.w	r1, #3
   1119e:	f7ff fd8b 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
   111a2:	f242 70c0 	movw	r0, #10176	; 0x27c0
   111a6:	f2c1 0000 	movt	r0, #4096	; 0x1000
   111aa:	f04f 0104 	mov.w	r1, #4
   111ae:	f7ff fd83 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
   111b2:	f242 74c4 	movw	r4, #10180	; 0x27c4
   111b6:	f2c1 0400 	movt	r4, #4096	; 0x1000
   111ba:	4620      	mov	r0, r4
   111bc:	f04f 01ff 	mov.w	r1, #255	; 0xff
   111c0:	f7ff fd7a 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
   111c4:	f242 70c8 	movw	r0, #10184	; 0x27c8
   111c8:	f2c1 0000 	movt	r0, #4096	; 0x1000
   111cc:	4621      	mov	r1, r4
   111ce:	f04f 0200 	mov.w	r2, #0
   111d2:	f7ff ff83 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
   111d6:	bd10      	pop	{r4, pc}

000111d8 <_GLOBAL__sub_I__ZN3PSUC2ERK3Pin>:
   111d8:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
   111da:	f242 70d0 	movw	r0, #10192	; 0x27d0
   111de:	f2c1 0000 	movt	r0, #4096	; 0x1000
   111e2:	f04f 0100 	mov.w	r1, #0
   111e6:	f7ff fd67 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
   111ea:	f242 70d4 	movw	r0, #10196	; 0x27d4
   111ee:	f2c1 0000 	movt	r0, #4096	; 0x1000
   111f2:	f04f 0101 	mov.w	r1, #1
   111f6:	f7ff fd5f 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
   111fa:	f242 70d8 	movw	r0, #10200	; 0x27d8
   111fe:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11202:	f04f 0102 	mov.w	r1, #2
   11206:	f7ff fd57 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
   1120a:	f242 70dc 	movw	r0, #10204	; 0x27dc
   1120e:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11212:	f04f 0103 	mov.w	r1, #3
   11216:	f7ff fd4f 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
   1121a:	f242 70e0 	movw	r0, #10208	; 0x27e0
   1121e:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11222:	f04f 0104 	mov.w	r1, #4
   11226:	f7ff fd47 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
   1122a:	f242 74e4 	movw	r4, #10212	; 0x27e4
   1122e:	f2c1 0400 	movt	r4, #4096	; 0x1000
   11232:	4620      	mov	r0, r4
   11234:	f04f 01ff 	mov.w	r1, #255	; 0xff
   11238:	f7ff fd3e 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
   1123c:	f242 70e8 	movw	r0, #10216	; 0x27e8
   11240:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11244:	4621      	mov	r1, r4
   11246:	f04f 0200 	mov.w	r2, #0
   1124a:	f7ff ff47 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
   1124e:	bd10      	pop	{r4, pc}

00011250 <Thermistor::~Thermistor()>:
protected:
        /// The last temperature reading from the sensor, in degrees Celcius, or
        /// #BAD_TEMPERATURE if the last reading is invalid.
	volatile uint16_t current_temp;
public:
	virtual ~TemperatureSensor(){};
   11250:	4b01      	ldr	r3, [pc, #4]	; (11258 <Thermistor::~Thermistor()+0x8>)
   11252:	6003      	str	r3, [r0, #0]
#define SAMPLE_COUNT 9

/// The thermistor module provides a driver to read the value of a thermistor connected
/// to an analog pin, and convert it to a corrected temperature in degress Celcius.
/// \ingroup SoftwareLibraries
class Thermistor : public TemperatureSensor {
   11254:	4770      	bx	lr
   11256:	bf00      	nop
   11258:	00026718 	.word	0x00026718

0001125c <Thermistor::~Thermistor()>:
   1125c:	b510      	push	{r4, lr}
   1125e:	4604      	mov	r4, r0
   11260:	4b02      	ldr	r3, [pc, #8]	; (1126c <Thermistor::~Thermistor()+0x10>)
   11262:	6003      	str	r3, [r0, #0]
   11264:	f002 fb38 	bl	138d8 <operator delete(void*)>
   11268:	4620      	mov	r0, r4
   1126a:	bd10      	pop	{r4, pc}
   1126c:	00026718 	.word	0x00026718

00011270 <Thermistor::init()>:
        for (int i = 0; i < SAMPLE_COUNT; i++) {
            sample_buffer[i] = 0;
        }
}

void Thermistor::init() {
   11270:	b508      	push	{r3, lr}
  current_temp = 0;
   11272:	f04f 0300 	mov.w	r3, #0
   11276:	8083      	strh	r3, [r0, #4]
  if (analog_pin==0)
   11278:	7983      	ldrb	r3, [r0, #6]
   1127a:	b91b      	cbnz	r3, 11284 <Thermistor::init()+0x14>
	  analog_pin_out = 26;
   1127c:	f04f 031a 	mov.w	r3, #26
   11280:	71c3      	strb	r3, [r0, #7]
   11282:	e003      	b.n	1128c <Thermistor::init()+0x1c>
  if (analog_pin==1)
   11284:	2b01      	cmp	r3, #1
	  analog_pin_out = 25;
   11286:	bf04      	itt	eq
   11288:	2319      	moveq	r3, #25
   1128a:	71c3      	strbeq	r3, [r0, #7]
	initAnalogPin(analog_pin_out);
   1128c:	79c0      	ldrb	r0, [r0, #7]
   1128e:	f7fe fe1b 	bl	fec8 <initAnalogPin(unsigned char)>
}
   11292:	bd08      	pop	{r3, pc}

00011294 <Thermistor::Thermistor(unsigned char, unsigned char)>:

Thermistor::Thermistor(uint8_t analog_pin_in, uint8_t table_index_in) :
    analog_pin(analog_pin_in),
    next_sample(0),
    raw_valid(false),
    table_index(table_index_in)
   11294:	4b09      	ldr	r3, [pc, #36]	; (112bc <Thermistor::Thermistor(unsigned char, unsigned char)+0x28>)
   11296:	6003      	str	r3, [r0, #0]
   11298:	7181      	strb	r1, [r0, #6]
   1129a:	f04f 0300 	mov.w	r3, #0
   1129e:	7283      	strb	r3, [r0, #10]
   112a0:	7783      	strb	r3, [r0, #30]
   112a2:	77c2      	strb	r2, [r0, #31]
        int16_t adc;
        int16_t celsius;
} __attribute__ ((packed));


Thermistor::Thermistor(uint8_t analog_pin_in, uint8_t table_index_in) :
   112a4:	f100 020a 	add.w	r2, r0, #10
   112a8:	f04f 0309 	mov.w	r3, #9
    next_sample(0),
    raw_valid(false),
    table_index(table_index_in)
{
        for (int i = 0; i < SAMPLE_COUNT; i++) {
            sample_buffer[i] = 0;
   112ac:	f04f 0100 	mov.w	r1, #0
   112b0:	f822 1f02 	strh.w	r1, [r2, #2]!
    analog_pin(analog_pin_in),
    next_sample(0),
    raw_valid(false),
    table_index(table_index_in)
{
        for (int i = 0; i < SAMPLE_COUNT; i++) {
   112b4:	3b01      	subs	r3, #1
   112b6:	d1fb      	bne.n	112b0 <Thermistor::Thermistor(unsigned char, unsigned char)+0x1c>
            sample_buffer[i] = 0;
        }
}
   112b8:	4770      	bx	lr
   112ba:	bf00      	nop
   112bc:	0002ae70 	.word	0x0002ae70

000112c0 <void std::__move_median_first<unsigned long*>(unsigned long*, unsigned long*, unsigned long*)>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  /// Swaps the median value of *__a, *__b and *__c to *__a
  template<typename _Iterator>
    void
    __move_median_first(_Iterator __a, _Iterator __b, _Iterator __c)
   112c0:	b430      	push	{r4, r5}
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<
	    typename iterator_traits<_Iterator>::value_type>)

      if (*__a < *__b)
   112c2:	6803      	ldr	r3, [r0, #0]
   112c4:	680c      	ldr	r4, [r1, #0]
   112c6:	42a3      	cmp	r3, r4
   112c8:	d20a      	bcs.n	112e0 <void std::__move_median_first<unsigned long*>(unsigned long*, unsigned long*, unsigned long*)+0x20>
	{
	  if (*__b < *__c)
   112ca:	6815      	ldr	r5, [r2, #0]
   112cc:	42ac      	cmp	r4, r5
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   112ce:	bf3c      	itt	cc
   112d0:	6004      	strcc	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   112d2:	600b      	strcc	r3, [r1, #0]
   112d4:	d30d      	bcc.n	112f2 <void std::__move_median_first<unsigned long*>(unsigned long*, unsigned long*, unsigned long*)+0x32>
	    std::iter_swap(__a, __b);
	  else if (*__a < *__c)
   112d6:	42ab      	cmp	r3, r5
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   112d8:	bf3c      	itt	cc
   112da:	6005      	strcc	r5, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   112dc:	6013      	strcc	r3, [r2, #0]
   112de:	e008      	b.n	112f2 <void std::__move_median_first<unsigned long*>(unsigned long*, unsigned long*, unsigned long*)+0x32>
	    std::iter_swap(__a, __c);
	}
      else if (*__a < *__c)
   112e0:	6815      	ldr	r5, [r2, #0]
   112e2:	42ab      	cmp	r3, r5
   112e4:	d305      	bcc.n	112f2 <void std::__move_median_first<unsigned long*>(unsigned long*, unsigned long*, unsigned long*)+0x32>
	return;
      else if (*__b < *__c)
   112e6:	42ac      	cmp	r4, r5
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   112e8:	bf39      	ittee	cc
   112ea:	6005      	strcc	r5, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   112ec:	6013      	strcc	r3, [r2, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   112ee:	6004      	strcs	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   112f0:	600b      	strcs	r3, [r1, #0]
	std::iter_swap(__a, __c);
      else
	std::iter_swap(__a, __b);
    }
   112f2:	bc30      	pop	{r4, r5}
   112f4:	4770      	bx	lr
   112f6:	bf00      	nop

000112f8 <unsigned long* std::__unguarded_partition<unsigned long*, unsigned long>(unsigned long*, unsigned long*, unsigned long const&)>:
    }

  /// This is a helper function...
  template<typename _RandomAccessIterator, typename _Tp>
    _RandomAccessIterator
    __unguarded_partition(_RandomAccessIterator __first,
   112f8:	b470      	push	{r4, r5, r6}
			  _RandomAccessIterator __last, const _Tp& __pivot)
    {
      while (true)
	{
	  while (*__first < __pivot)
   112fa:	6805      	ldr	r5, [r0, #0]
   112fc:	6814      	ldr	r4, [r2, #0]
   112fe:	42a5      	cmp	r5, r4
   11300:	d206      	bcs.n	11310 <unsigned long* std::__unguarded_partition<unsigned long*, unsigned long>(unsigned long*, unsigned long*, unsigned long const&)+0x18>
   11302:	4603      	mov	r3, r0
	    ++__first;
   11304:	f100 0004 	add.w	r0, r0, #4
    __unguarded_partition(_RandomAccessIterator __first,
			  _RandomAccessIterator __last, const _Tp& __pivot)
    {
      while (true)
	{
	  while (*__first < __pivot)
   11308:	f853 5f04 	ldr.w	r5, [r3, #4]!
   1130c:	42a5      	cmp	r5, r4
   1130e:	d3f9      	bcc.n	11304 <unsigned long* std::__unguarded_partition<unsigned long*, unsigned long>(unsigned long*, unsigned long*, unsigned long const&)+0xc>
	    ++__first;
	  --__last;
   11310:	f1a1 0304 	sub.w	r3, r1, #4
	  while (__pivot < *__last)
   11314:	f851 6c04 	ldr.w	r6, [r1, #-4]
   11318:	42a6      	cmp	r6, r4
    {
      while (true)
	{
	  while (*__first < __pivot)
	    ++__first;
	  --__last;
   1131a:	bf98      	it	ls
   1131c:	4619      	movls	r1, r3
	  while (__pivot < *__last)
   1131e:	d906      	bls.n	1132e <unsigned long* std::__unguarded_partition<unsigned long*, unsigned long>(unsigned long*, unsigned long*, unsigned long const&)+0x36>
    }

  /// This is a helper function...
  template<typename _RandomAccessIterator, typename _Tp>
    _RandomAccessIterator
    __unguarded_partition(_RandomAccessIterator __first,
   11320:	f1a3 0104 	sub.w	r1, r3, #4
      while (true)
	{
	  while (*__first < __pivot)
	    ++__first;
	  --__last;
	  while (__pivot < *__last)
   11324:	f853 6c04 	ldr.w	r6, [r3, #-4]
   11328:	460b      	mov	r3, r1
   1132a:	42a6      	cmp	r6, r4
   1132c:	d8f8      	bhi.n	11320 <unsigned long* std::__unguarded_partition<unsigned long*, unsigned long>(unsigned long*, unsigned long*, unsigned long const&)+0x28>
	    --__last;
	  if (!(__first < __last))
   1132e:	4281      	cmp	r1, r0
   11330:	d801      	bhi.n	11336 <unsigned long* std::__unguarded_partition<unsigned long*, unsigned long>(unsigned long*, unsigned long*, unsigned long const&)+0x3e>
	    return __first;
	  std::iter_swap(__first, __last);
	  ++__first;
	}
    }
   11332:	bc70      	pop	{r4, r5, r6}
   11334:	4770      	bx	lr
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   11336:	f840 6b04 	str.w	r6, [r0], #4
      __b = _GLIBCXX_MOVE(__tmp);
   1133a:	600d      	str	r5, [r1, #0]
  template<typename _RandomAccessIterator, typename _Tp>
    _RandomAccessIterator
    __unguarded_partition(_RandomAccessIterator __first,
			  _RandomAccessIterator __last, const _Tp& __pivot)
    {
      while (true)
   1133c:	e7dd      	b.n	112fa <unsigned long* std::__unguarded_partition<unsigned long*, unsigned long>(unsigned long*, unsigned long*, unsigned long const&)+0x2>
   1133e:	bf00      	nop

00011340 <void std::__unguarded_linear_insert<unsigned long*>(unsigned long*)>:
    }

  /// This is a helper function for the sort routine.
  template<typename _RandomAccessIterator>
    void
    __unguarded_linear_insert(_RandomAccessIterator __last)
   11340:	b410      	push	{r4}
    {
      typename iterator_traits<_RandomAccessIterator>::value_type
	__val = _GLIBCXX_MOVE(*__last);
   11342:	6804      	ldr	r4, [r0, #0]
      _RandomAccessIterator __next = __last;
      --__next;
      while (__val < *__next)
   11344:	f850 3c04 	ldr.w	r3, [r0, #-4]
   11348:	429c      	cmp	r4, r3
    __unguarded_linear_insert(_RandomAccessIterator __last)
    {
      typename iterator_traits<_RandomAccessIterator>::value_type
	__val = _GLIBCXX_MOVE(*__last);
      _RandomAccessIterator __next = __last;
      --__next;
   1134a:	bf38      	it	cc
   1134c:	1f02      	subcc	r2, r0, #4
      while (__val < *__next)
   1134e:	d301      	bcc.n	11354 <void std::__unguarded_linear_insert<unsigned long*>(unsigned long*)+0x14>
   11350:	e007      	b.n	11362 <void std::__unguarded_linear_insert<unsigned long*>(unsigned long*)+0x22>
   11352:	4608      	mov	r0, r1
   11354:	4611      	mov	r1, r2
	{
	  *__last = _GLIBCXX_MOVE(*__next);
   11356:	6003      	str	r3, [r0, #0]
    {
      typename iterator_traits<_RandomAccessIterator>::value_type
	__val = _GLIBCXX_MOVE(*__last);
      _RandomAccessIterator __next = __last;
      --__next;
      while (__val < *__next)
   11358:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   1135c:	429c      	cmp	r4, r3
   1135e:	d3f8      	bcc.n	11352 <void std::__unguarded_linear_insert<unsigned long*>(unsigned long*)+0x12>
   11360:	4608      	mov	r0, r1
	{
	  *__last = _GLIBCXX_MOVE(*__next);
	  __last = __next;
	  --__next;
	}
      *__last = _GLIBCXX_MOVE(__val);
   11362:	6004      	str	r4, [r0, #0]
    }
   11364:	bc10      	pop	{r4}
   11366:	4770      	bx	lr

00011368 <void std::__insertion_sort<unsigned long*>(unsigned long*, unsigned long*)>:
    }

  /// This is a helper function for the sort routine.
  template<typename _RandomAccessIterator>
    void
    __insertion_sort(_RandomAccessIterator __first,
   11368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1136c:	4605      	mov	r5, r0
   1136e:	4688      	mov	r8, r1
		     _RandomAccessIterator __last)
    {
      if (__first == __last)
   11370:	4288      	cmp	r0, r1
   11372:	d01b      	beq.n	113ac <void std::__insertion_sort<unsigned long*>(unsigned long*, unsigned long*)+0x44>
	return;

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
   11374:	f100 0404 	add.w	r4, r0, #4
   11378:	42a1      	cmp	r1, r4
   1137a:	d017      	beq.n	113ac <void std::__insertion_sort<unsigned long*>(unsigned long*, unsigned long*)+0x44>
   1137c:	f04f 0600 	mov.w	r6, #0
   11380:	4620      	mov	r0, r4
	{
	  if (*__i < *__first)
   11382:	f854 7b04 	ldr.w	r7, [r4], #4
   11386:	f106 0604 	add.w	r6, r6, #4
   1138a:	682b      	ldr	r3, [r5, #0]
   1138c:	429f      	cmp	r7, r3
   1138e:	d209      	bcs.n	113a4 <void std::__insertion_sort<unsigned long*>(unsigned long*, unsigned long*)+0x3c>
      template<typename _Tp>
        static _Tp*
        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   11390:	10b2      	asrs	r2, r6, #2
   11392:	d005      	beq.n	113a0 <void std::__insertion_sort<unsigned long*>(unsigned long*, unsigned long*)+0x38>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   11394:	ea4f 0282 	mov.w	r2, r2, lsl #2
   11398:	1aa0      	subs	r0, r4, r2
   1139a:	4629      	mov	r1, r5
   1139c:	f00e f9dc 	bl	1f758 <memmove>
	    {
	      typename iterator_traits<_RandomAccessIterator>::value_type
		__val = _GLIBCXX_MOVE(*__i);
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
	      *__first = _GLIBCXX_MOVE(__val);
   113a0:	602f      	str	r7, [r5, #0]
   113a2:	e001      	b.n	113a8 <void std::__insertion_sort<unsigned long*>(unsigned long*, unsigned long*)+0x40>
	    }
	  else
	    std::__unguarded_linear_insert(__i);
   113a4:	f7ff ffcc 	bl	11340 <void std::__unguarded_linear_insert<unsigned long*>(unsigned long*)>
		     _RandomAccessIterator __last)
    {
      if (__first == __last)
	return;

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
   113a8:	45a0      	cmp	r8, r4
   113aa:	d1e9      	bne.n	11380 <void std::__insertion_sort<unsigned long*>(unsigned long*, unsigned long*)+0x18>
   113ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000113b0 <void std::__final_insertion_sort<unsigned long*>(unsigned long*, unsigned long*)>:
  enum { _S_threshold = 16 };

  /// This is a helper function for the sort routine.
  template<typename _RandomAccessIterator>
    void
    __final_insertion_sort(_RandomAccessIterator __first,
   113b0:	b538      	push	{r3, r4, r5, lr}
   113b2:	460d      	mov	r5, r1
			   _RandomAccessIterator __last)
    {
      if (__last - __first > int(_S_threshold))
   113b4:	1a0b      	subs	r3, r1, r0
   113b6:	2b43      	cmp	r3, #67	; 0x43
   113b8:	dd0e      	ble.n	113d8 <void std::__final_insertion_sort<unsigned long*>(unsigned long*, unsigned long*)+0x28>
	{
	  std::__insertion_sort(__first, __first + int(_S_threshold));
   113ba:	f100 0440 	add.w	r4, r0, #64	; 0x40
   113be:	4621      	mov	r1, r4
   113c0:	f7ff ffd2 	bl	11368 <void std::__insertion_sort<unsigned long*>(unsigned long*, unsigned long*)>
			       _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
	_ValueType;

      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
   113c4:	42a5      	cmp	r5, r4
   113c6:	d009      	beq.n	113dc <void std::__final_insertion_sort<unsigned long*>(unsigned long*, unsigned long*)+0x2c>
	std::__unguarded_linear_insert(__i);
   113c8:	4620      	mov	r0, r4
   113ca:	f7ff ffb9 	bl	11340 <void std::__unguarded_linear_insert<unsigned long*>(unsigned long*)>
			       _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
	_ValueType;

      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
   113ce:	f104 0404 	add.w	r4, r4, #4
   113d2:	42a5      	cmp	r5, r4
   113d4:	d1f8      	bne.n	113c8 <void std::__final_insertion_sort<unsigned long*>(unsigned long*, unsigned long*)+0x18>
   113d6:	bd38      	pop	{r3, r4, r5, pc}
	{
	  std::__insertion_sort(__first, __first + int(_S_threshold));
	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last);
	}
      else
	std::__insertion_sort(__first, __last);
   113d8:	f7ff ffc6 	bl	11368 <void std::__insertion_sort<unsigned long*>(unsigned long*, unsigned long*)>
   113dc:	bd38      	pop	{r3, r4, r5, pc}
   113de:	bf00      	nop

000113e0 <void std::__push_heap<unsigned long*, int, unsigned long>(unsigned long*, int, int, unsigned long)>:
  // Heap-manipulation functions: push_heap, pop_heap, make_heap, sort_heap,
  // + is_heap and is_heap_until in C++0x.

  template<typename _RandomAccessIterator, typename _Distance, typename _Tp>
    void
    __push_heap(_RandomAccessIterator __first,
   113e0:	b430      	push	{r4, r5}
		_Distance __holeIndex, _Distance __topIndex, _Tp __value)
    {
      _Distance __parent = (__holeIndex - 1) / 2;
   113e2:	f101 34ff 	add.w	r4, r1, #4294967295
   113e6:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
   113ea:	ea4f 0464 	mov.w	r4, r4, asr #1
      while (__holeIndex > __topIndex && *(__first + __parent) < __value)
   113ee:	4291      	cmp	r1, r2
   113f0:	dd0d      	ble.n	1140e <void std::__push_heap<unsigned long*, int, unsigned long>(unsigned long*, int, int, unsigned long)+0x2e>
   113f2:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
   113f6:	429d      	cmp	r5, r3
   113f8:	d209      	bcs.n	1140e <void std::__push_heap<unsigned long*, int, unsigned long>(unsigned long*, int, int, unsigned long)+0x2e>
	{
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
   113fa:	f840 5021 	str.w	r5, [r0, r1, lsl #2]
	  __holeIndex = __parent;
	  __parent = (__holeIndex - 1) / 2;
   113fe:	f104 31ff 	add.w	r1, r4, #4294967295
   11402:	eb01 75d1 	add.w	r5, r1, r1, lsr #31
    {
      _Distance __parent = (__holeIndex - 1) / 2;
      while (__holeIndex > __topIndex && *(__first + __parent) < __value)
	{
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
	  __holeIndex = __parent;
   11406:	4621      	mov	r1, r4
	  __parent = (__holeIndex - 1) / 2;
   11408:	ea4f 0465 	mov.w	r4, r5, asr #1
   1140c:	e7ef      	b.n	113ee <void std::__push_heap<unsigned long*, int, unsigned long>(unsigned long*, int, int, unsigned long)+0xe>
	}
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
   1140e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
    }
   11412:	bc30      	pop	{r4, r5}
   11414:	4770      	bx	lr
   11416:	bf00      	nop

00011418 <void std::__adjust_heap<unsigned long*, int, unsigned long>(unsigned long*, int, int, unsigned long)>:
		       _DistanceType(0), _GLIBCXX_MOVE(__value), __comp);
    }

  template<typename _RandomAccessIterator, typename _Distance, typename _Tp>
    void
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
   11418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1141a:	460c      	mov	r4, r1
		  _Distance __len, _Tp __value)
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while (__secondChild < (__len - 1) / 2)
   1141c:	f102 3eff 	add.w	lr, r2, #4294967295
   11420:	eb0e 7ede 	add.w	lr, lr, lr, lsr #31
   11424:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   11428:	4571      	cmp	r1, lr
   1142a:	bfb8      	it	lt
   1142c:	460d      	movlt	r5, r1
   1142e:	db01      	blt.n	11434 <void std::__adjust_heap<unsigned long*, int, unsigned long>(unsigned long*, int, int, unsigned long)+0x1c>
   11430:	e014      	b.n	1145c <void std::__adjust_heap<unsigned long*, int, unsigned long>(unsigned long*, int, int, unsigned long)+0x44>
   11432:	460d      	mov	r5, r1
	{
	  __secondChild = 2 * (__secondChild + 1);
   11434:	f105 0101 	add.w	r1, r5, #1
   11438:	ea4f 0141 	mov.w	r1, r1, lsl #1
	  if (*(__first + __secondChild) < *(__first + (__secondChild - 1)))
   1143c:	f101 36ff 	add.w	r6, r1, #4294967295
   11440:	f850 7021 	ldr.w	r7, [r0, r1, lsl #2]
   11444:	f850 6026 	ldr.w	r6, [r0, r6, lsl #2]
   11448:	42b7      	cmp	r7, r6
	    __secondChild--;
   1144a:	bf38      	it	cc
   1144c:	f101 31ff 	addcc.w	r1, r1, #4294967295
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
   11450:	f850 6021 	ldr.w	r6, [r0, r1, lsl #2]
   11454:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
		  _Distance __len, _Tp __value)
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while (__secondChild < (__len - 1) / 2)
   11458:	4571      	cmp	r1, lr
   1145a:	dbea      	blt.n	11432 <void std::__adjust_heap<unsigned long*, int, unsigned long>(unsigned long*, int, int, unsigned long)+0x1a>
	  if (*(__first + __secondChild) < *(__first + (__secondChild - 1)))
	    __secondChild--;
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
	  __holeIndex = __secondChild;
	}
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
   1145c:	f012 0f01 	tst.w	r2, #1
   11460:	d10e      	bne.n	11480 <void std::__adjust_heap<unsigned long*, int, unsigned long>(unsigned long*, int, int, unsigned long)+0x68>
   11462:	f1a2 0202 	sub.w	r2, r2, #2
   11466:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   1146a:	ebb1 0f62 	cmp.w	r1, r2, asr #1
	{
	  __secondChild = 2 * (__secondChild + 1);
   1146e:	bf01      	itttt	eq
   11470:	004a      	lsleq	r2, r1, #1
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
   11472:	3201      	addeq	r2, #1
   11474:	f850 5022 	ldreq.w	r5, [r0, r2, lsl #2]
   11478:	f840 5021 	streq.w	r5, [r0, r1, lsl #2]
						     + (__secondChild - 1)));
	  __holeIndex = __secondChild - 1;
   1147c:	bf08      	it	eq
   1147e:	4611      	moveq	r1, r2
	}
      std::__push_heap(__first, __holeIndex, __topIndex,
   11480:	4622      	mov	r2, r4
   11482:	f7ff ffad 	bl	113e0 <void std::__push_heap<unsigned long*, int, unsigned long>(unsigned long*, int, int, unsigned long)>
		       _GLIBCXX_MOVE(__value));
    }
   11486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00011488 <void std::make_heap<unsigned long*>(unsigned long*, unsigned long*)>:
   *
   *  This operation makes the elements in [first,last) into a heap.
  */
  template<typename _RandomAccessIterator>
    void
    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
   11488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1148a:	4606      	mov	r6, r0
      __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept<
	    _RandomAccessIterator>)
      __glibcxx_function_requires(_LessThanComparableConcept<_ValueType>)
      __glibcxx_requires_valid_range(__first, __last);

      if (__last - __first < 2)
   1148c:	1a09      	subs	r1, r1, r0
   1148e:	2907      	cmp	r1, #7
   11490:	dd14      	ble.n	114bc <void std::make_heap<unsigned long*>(unsigned long*, unsigned long*)+0x34>
	return;

      const _DistanceType __len = __last - __first;
   11492:	ea4f 07a1 	mov.w	r7, r1, asr #2
      _DistanceType __parent = (__len - 2) / 2;
   11496:	f1a7 0402 	sub.w	r4, r7, #2
   1149a:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
   1149e:	ea4f 0464 	mov.w	r4, r4, asr #1
   *
   *  This operation makes the elements in [first,last) into a heap.
  */
  template<typename _RandomAccessIterator>
    void
    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
   114a2:	eb00 0584 	add.w	r5, r0, r4, lsl #2
      const _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2) / 2;
      while (true)
	{
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value));
   114a6:	4630      	mov	r0, r6
   114a8:	4621      	mov	r1, r4
   114aa:	463a      	mov	r2, r7
   114ac:	f855 3904 	ldr.w	r3, [r5], #-4
   114b0:	f7ff ffb2 	bl	11418 <void std::__adjust_heap<unsigned long*, int, unsigned long>(unsigned long*, int, int, unsigned long)>
	  if (__parent == 0)
   114b4:	b114      	cbz	r4, 114bc <void std::make_heap<unsigned long*>(unsigned long*, unsigned long*)+0x34>
	    return;
	  __parent--;
   114b6:	f104 34ff 	add.w	r4, r4, #4294967295
      if (__last - __first < 2)
	return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2) / 2;
      while (true)
   114ba:	e7f4      	b.n	114a6 <void std::make_heap<unsigned long*>(unsigned long*, unsigned long*)+0x1e>
   114bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   114be:	bf00      	nop

000114c0 <void std::__heap_select<unsigned long*>(unsigned long*, unsigned long*, unsigned long*)>:
    }

  /// This is a helper function for the sort routines.
  template<typename _RandomAccessIterator>
    void
    __heap_select(_RandomAccessIterator __first,
   114c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   114c4:	4605      	mov	r5, r0
   114c6:	460c      	mov	r4, r1
   114c8:	4616      	mov	r6, r2
		  _RandomAccessIterator __middle,
		  _RandomAccessIterator __last)
    {
      std::make_heap(__first, __middle);
   114ca:	f7ff ffdd 	bl	11488 <void std::make_heap<unsigned long*>(unsigned long*, unsigned long*)>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
   114ce:	42b4      	cmp	r4, r6
   114d0:	d213      	bcs.n	114fa <void std::__heap_select<unsigned long*>(unsigned long*, unsigned long*, unsigned long*)+0x3a>
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
	_DistanceType;

      _ValueType __value = _GLIBCXX_MOVE(*__result);
      *__result = _GLIBCXX_MOVE(*__first);
      std::__adjust_heap(__first, _DistanceType(0),
   114d2:	ebc5 0804 	rsb	r8, r5, r4
   114d6:	ea4f 08a8 	mov.w	r8, r8, asr #2
   114da:	f04f 0700 	mov.w	r7, #0
	if (*__i < *__first)
   114de:	f854 3b04 	ldr.w	r3, [r4], #4
   114e2:	682a      	ldr	r2, [r5, #0]
   114e4:	4293      	cmp	r3, r2
   114e6:	d206      	bcs.n	114f6 <void std::__heap_select<unsigned long*>(unsigned long*, unsigned long*, unsigned long*)+0x36>
	_ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
	_DistanceType;

      _ValueType __value = _GLIBCXX_MOVE(*__result);
      *__result = _GLIBCXX_MOVE(*__first);
   114e8:	f844 2c04 	str.w	r2, [r4, #-4]
      std::__adjust_heap(__first, _DistanceType(0),
   114ec:	4628      	mov	r0, r5
   114ee:	4639      	mov	r1, r7
   114f0:	4642      	mov	r2, r8
   114f2:	f7ff ff91 	bl	11418 <void std::__adjust_heap<unsigned long*, int, unsigned long>(unsigned long*, int, int, unsigned long)>
    __heap_select(_RandomAccessIterator __first,
		  _RandomAccessIterator __middle,
		  _RandomAccessIterator __last)
    {
      std::make_heap(__first, __middle);
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
   114f6:	42a6      	cmp	r6, r4
   114f8:	d8f1      	bhi.n	114de <void std::__heap_select<unsigned long*>(unsigned long*, unsigned long*, unsigned long*)+0x1e>
   114fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   114fe:	bf00      	nop

00011500 <void std::sort_heap<unsigned long*>(unsigned long*, unsigned long*)>:
   *
   *  This operation sorts the valid heap in the range [first,last).
  */
  template<typename _RandomAccessIterator>
    void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
   11500:	b570      	push	{r4, r5, r6, lr}
   11502:	4605      	mov	r5, r0
      __glibcxx_function_requires(_LessThanComparableConcept<
	    typename iterator_traits<_RandomAccessIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_heap(__first, __last);

      while (__last - __first > 1)
   11504:	1a0b      	subs	r3, r1, r0
   11506:	2b07      	cmp	r3, #7
   11508:	dd13      	ble.n	11532 <void std::sort_heap<unsigned long*>(unsigned long*, unsigned long*)+0x32>
   *
   *  This operation sorts the valid heap in the range [first,last).
  */
  template<typename _RandomAccessIterator>
    void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
   1150a:	4619      	mov	r1, r3
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
	_DistanceType;

      _ValueType __value = _GLIBCXX_MOVE(*__result);
      *__result = _GLIBCXX_MOVE(*__first);
      std::__adjust_heap(__first, _DistanceType(0),
   1150c:	f04f 0600 	mov.w	r6, #0
   *
   *  This operation sorts the valid heap in the range [first,last).
  */
  template<typename _RandomAccessIterator>
    void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
   11510:	186a      	adds	r2, r5, r1
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
	_ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
	_DistanceType;

      _ValueType __value = _GLIBCXX_MOVE(*__result);
   11512:	f852 3c04 	ldr.w	r3, [r2, #-4]
      *__result = _GLIBCXX_MOVE(*__first);
   11516:	6828      	ldr	r0, [r5, #0]
   11518:	f842 0c04 	str.w	r0, [r2, #-4]
   *
   *  This operation sorts the valid heap in the range [first,last).
  */
  template<typename _RandomAccessIterator>
    void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
   1151c:	f1a1 0404 	sub.w	r4, r1, #4
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
	_DistanceType;

      _ValueType __value = _GLIBCXX_MOVE(*__result);
      *__result = _GLIBCXX_MOVE(*__first);
      std::__adjust_heap(__first, _DistanceType(0),
   11520:	4628      	mov	r0, r5
   11522:	4631      	mov	r1, r6
   11524:	ea4f 02a4 	mov.w	r2, r4, asr #2
   11528:	f7ff ff76 	bl	11418 <void std::__adjust_heap<unsigned long*, int, unsigned long>(unsigned long*, int, int, unsigned long)>
   1152c:	4621      	mov	r1, r4
      __glibcxx_function_requires(_LessThanComparableConcept<
	    typename iterator_traits<_RandomAccessIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_heap(__first, __last);

      while (__last - __first > 1)
   1152e:	2c07      	cmp	r4, #7
   11530:	dcee      	bgt.n	11510 <void std::sort_heap<unsigned long*>(unsigned long*, unsigned long*)+0x10>
   11532:	bd70      	pop	{r4, r5, r6, pc}

00011534 <void std::__introsort_loop<unsigned long*, int>(unsigned long*, unsigned long*, int)>:
    }

  /// This is a helper function for the sort routine.
  template<typename _RandomAccessIterator, typename _Size>
    void
    __introsort_loop(_RandomAccessIterator __first,
   11534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11538:	4606      	mov	r6, r0
   1153a:	460c      	mov	r4, r1
   1153c:	4615      	mov	r5, r2
		     _RandomAccessIterator __last,
		     _Size __depth_limit)
    {
      while (__last - __first > int(_S_threshold))
   1153e:	4680      	mov	r8, r0
   11540:	1a0b      	subs	r3, r1, r0
   11542:	2b43      	cmp	r3, #67	; 0x43
   11544:	dd2f      	ble.n	115a6 <void std::__introsort_loop<unsigned long*, int>(unsigned long*, unsigned long*, int)+0x72>
	{
	  if (__depth_limit == 0)
   11546:	b97a      	cbnz	r2, 11568 <void std::__introsort_loop<unsigned long*, int>(unsigned long*, unsigned long*, int)+0x34>
   11548:	e001      	b.n	1154e <void std::__introsort_loop<unsigned long*, int>(unsigned long*, unsigned long*, int)+0x1a>
   1154a:	b95d      	cbnz	r5, 11564 <void std::__introsort_loop<unsigned long*, int>(unsigned long*, unsigned long*, int)+0x30>
    __unguarded_partition_pivot(_RandomAccessIterator __first,
				_RandomAccessIterator __last)
    {
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
      std::__move_median_first(__first, __mid, (__last - 1));
      return std::__unguarded_partition(__first + 1, __last, *__first);
   1154c:	463c      	mov	r4, r7
	    _RandomAccessIterator>)
      __glibcxx_function_requires(_LessThanComparableConcept<_ValueType>)
      __glibcxx_requires_valid_range(__first, __middle);
      __glibcxx_requires_valid_range(__middle, __last);

      std::__heap_select(__first, __middle, __last);
   1154e:	4630      	mov	r0, r6
   11550:	4621      	mov	r1, r4
   11552:	4622      	mov	r2, r4
   11554:	f7ff ffb4 	bl	114c0 <void std::__heap_select<unsigned long*>(unsigned long*, unsigned long*, unsigned long*)>
      std::sort_heap(__first, __middle);
   11558:	4630      	mov	r0, r6
   1155a:	4621      	mov	r1, r4
   1155c:	f7ff ffd0 	bl	11500 <void std::sort_heap<unsigned long*>(unsigned long*, unsigned long*)>
   11560:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __unguarded_partition_pivot(_RandomAccessIterator __first,
				_RandomAccessIterator __last)
    {
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
      std::__move_median_first(__first, __mid, (__last - 1));
      return std::__unguarded_partition(__first + 1, __last, *__first);
   11564:	463c      	mov	r4, r7
   11566:	e001      	b.n	1156c <void std::__introsort_loop<unsigned long*, int>(unsigned long*, unsigned long*, int)+0x38>
   11568:	f100 0904 	add.w	r9, r0, #4
	  if (__depth_limit == 0)
	    {
	      _GLIBCXX_STD_A::partial_sort(__first, __last, __last);
	      return;
	    }
	  --__depth_limit;
   1156c:	f105 35ff 	add.w	r5, r5, #4294967295
  template<typename _RandomAccessIterator>
    inline _RandomAccessIterator
    __unguarded_partition_pivot(_RandomAccessIterator __first,
				_RandomAccessIterator __last)
    {
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
   11570:	ea4f 03a3 	mov.w	r3, r3, asr #2
   11574:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   11578:	ea4f 0163 	mov.w	r1, r3, asr #1
      std::__move_median_first(__first, __mid, (__last - 1));
   1157c:	4630      	mov	r0, r6
   1157e:	eb06 0181 	add.w	r1, r6, r1, lsl #2
   11582:	f1a4 0204 	sub.w	r2, r4, #4
   11586:	f7ff fe9b 	bl	112c0 <void std::__move_median_first<unsigned long*>(unsigned long*, unsigned long*, unsigned long*)>
      return std::__unguarded_partition(__first + 1, __last, *__first);
   1158a:	4648      	mov	r0, r9
   1158c:	4621      	mov	r1, r4
   1158e:	4632      	mov	r2, r6
   11590:	f7ff feb2 	bl	112f8 <unsigned long* std::__unguarded_partition<unsigned long*, unsigned long>(unsigned long*, unsigned long*, unsigned long const&)>
   11594:	4607      	mov	r7, r0
	      return;
	    }
	  --__depth_limit;
	  _RandomAccessIterator __cut =
	    std::__unguarded_partition_pivot(__first, __last);
	  std::__introsort_loop(__cut, __last, __depth_limit);
   11596:	4621      	mov	r1, r4
   11598:	462a      	mov	r2, r5
   1159a:	f7ff ffcb 	bl	11534 <void std::__introsort_loop<unsigned long*, int>(unsigned long*, unsigned long*, int)>
    void
    __introsort_loop(_RandomAccessIterator __first,
		     _RandomAccessIterator __last,
		     _Size __depth_limit)
    {
      while (__last - __first > int(_S_threshold))
   1159e:	ebc8 0307 	rsb	r3, r8, r7
   115a2:	2b43      	cmp	r3, #67	; 0x43
   115a4:	dcd1      	bgt.n	1154a <void std::__introsort_loop<unsigned long*, int>(unsigned long*, unsigned long*, int)+0x16>
   115a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   115aa:	bf00      	nop

000115ac <Thermistor::update()>:
  if (analog_pin==1)
	  analog_pin_out = 25;
	initAnalogPin(analog_pin_out);
}

Thermistor::SensorState Thermistor::update() {
   115ac:	b530      	push	{r4, r5, lr}
   115ae:	b08b      	sub	sp, #44	; 0x2c
   115b0:	4604      	mov	r4, r0
//	xprintf("Thermistor::SensorState Thermistor::update() {" " (%s:%d)\n",_F_,_L_);
	int16_t temp;
	bool valid;

//	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		valid = raw_valid;
   115b2:	7a85      	ldrb	r5, [r0, #10]
		temp = raw_value;
   115b4:	8903      	ldrh	r3, [r0, #8]

		// Invalidate the result now that we have read it
		if (raw_valid) {
   115b6:	7a83      	ldrb	r3, [r0, #10]
   115b8:	b113      	cbz	r3, 115c0 <Thermistor::update()+0x14>
			raw_valid = false;
   115ba:	f04f 0300 	mov.w	r3, #0
   115be:	7283      	strb	r3, [r0, #10]
                }
//	}

	// initiate next read
	if (!startAnalogRead(analog_pin,&raw_value, &raw_valid)) return SS_ADC_BUSY;
   115c0:	79a0      	ldrb	r0, [r4, #6]
   115c2:	f104 0108 	add.w	r1, r4, #8
   115c6:	f104 020a 	add.w	r2, r4, #10
   115ca:	f7fe fcc1 	bl	ff50 <startAnalogRead(unsigned char, short volatile*, bool volatile*)>
   115ce:	2800      	cmp	r0, #0
   115d0:	d04a      	beq.n	11668 <Thermistor::update()+0xbc>

	// If we haven't gotten data yet, return.
	if (!valid) return SS_ADC_WAITING;
   115d2:	f04f 0002 	mov.w	r0, #2
   115d6:	2d00      	cmp	r5, #0
   115d8:	d048      	beq.n	1166c <Thermistor::update()+0xc0>
	// my filter
	uint32_t sort_table[SAMPLE_COUNT];
	static uint32_t adc_filtered = 0;
	static uint32_t adc_table_index = 0;
	static uint32_t adc_previous_samples[SAMPLE_COUNT];
	adc_previous_samples[adc_table_index]=raw_value;
   115da:	f642 0314 	movw	r3, #10260	; 0x2814
   115de:	f2c1 0300 	movt	r3, #4096	; 0x1000
   115e2:	6819      	ldr	r1, [r3, #0]
   115e4:	8920      	ldrh	r0, [r4, #8]
   115e6:	f242 72f0 	movw	r2, #10224	; 0x27f0
   115ea:	f2c1 0200 	movt	r2, #4096	; 0x1000
   115ee:	b200      	sxth	r0, r0
   115f0:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	adc_table_index++;
   115f4:	f101 0201 	add.w	r2, r1, #1
   115f8:	601a      	str	r2, [r3, #0]
	if (adc_table_index==SAMPLE_COUNT)
   115fa:	2a09      	cmp	r2, #9
		adc_table_index=0;
   115fc:	bf01      	itttt	eq
   115fe:	f642 0314 	movweq	r3, #10260	; 0x2814
   11602:	f2c1 0300 	movteq	r3, #4096	; 0x1000
   11606:	2200      	moveq	r2, #0
   11608:	601a      	streq	r2, [r3, #0]
  if (analog_pin==1)
	  analog_pin_out = 25;
	initAnalogPin(analog_pin_out);
}

Thermistor::SensorState Thermistor::update() {
   1160a:	f04f 0300 	mov.w	r3, #0
	adc_previous_samples[adc_table_index]=raw_value;
	adc_table_index++;
	if (adc_table_index==SAMPLE_COUNT)
		adc_table_index=0;
	for (uint8_t i=0;i<SAMPLE_COUNT;i++)
		sort_table[i]=adc_previous_samples[i];
   1160e:	f242 70f0 	movw	r0, #10224	; 0x27f0
   11612:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11616:	5819      	ldr	r1, [r3, r0]
   11618:	aa01      	add	r2, sp, #4
   1161a:	5099      	str	r1, [r3, r2]
   1161c:	f103 0304 	add.w	r3, r3, #4
	static uint32_t adc_previous_samples[SAMPLE_COUNT];
	adc_previous_samples[adc_table_index]=raw_value;
	adc_table_index++;
	if (adc_table_index==SAMPLE_COUNT)
		adc_table_index=0;
	for (uint8_t i=0;i<SAMPLE_COUNT;i++)
   11620:	2b24      	cmp	r3, #36	; 0x24
   11622:	d1f8      	bne.n	11616 <Thermistor::update()+0x6a>
      __glibcxx_function_requires(_LessThanComparableConcept<_ValueType>)
      __glibcxx_requires_valid_range(__first, __last);

      if (__first != __last)
	{
	  std::__introsort_loop(__first, __last,
   11624:	4610      	mov	r0, r2
   11626:	a90a      	add	r1, sp, #40	; 0x28
   11628:	f04f 0206 	mov.w	r2, #6
   1162c:	f7ff ff82 	bl	11534 <void std::__introsort_loop<unsigned long*, int>(unsigned long*, unsigned long*, int)>
				std::__lg(__last - __first) * 2);
	  std::__final_insertion_sort(__first, __last);
   11630:	a801      	add	r0, sp, #4
   11632:	a90a      	add	r1, sp, #40	; 0x28
   11634:	f7ff febc 	bl	113b0 <void std::__final_insertion_sort<unsigned long*>(unsigned long*, unsigned long*)>
		sort_table[i]=adc_previous_samples[i];
	std::sort(sort_table, sort_table+SAMPLE_COUNT);
	temp = sort_table[4];
   11638:	f8bd 0014 	ldrh.w	r0, [sp, #20]
//	temp = adc_filtered;

	// TODO: The raw_value appears to be 0 the first time this loop is run,
	//       which causes this failsafe to trigger unnecessarily. Disabling
	//       for now, since it doesn't work for ABP/HBP thermistors.
	if ((temp > ADC_RANGE - 2) || (temp < 2)) {
   1163c:	f1a0 0202 	sub.w	r2, r0, #2
   11640:	b292      	uxth	r2, r2
   11642:	f640 73fc 	movw	r3, #4092	; 0xffc
   11646:	429a      	cmp	r2, r3
                current_temp = BAD_TEMPERATURE;	// Set the temperature to 1024 as an error condition
   11648:	bf82      	ittt	hi
   1164a:	f44f 6380 	movhi.w	r3, #1024	; 0x400
   1164e:	80a3      	strhhi	r3, [r4, #4]
		return SS_ERROR_UNPLUGGED;
   11650:	2003      	movhi	r0, #3
//	temp = adc_filtered;

	// TODO: The raw_value appears to be 0 the first time this loop is run,
	//       which causes this failsafe to trigger unnecessarily. Disabling
	//       for now, since it doesn't work for ABP/HBP thermistors.
	if ((temp > ADC_RANGE - 2) || (temp < 2)) {
   11652:	d80b      	bhi.n	1166c <Thermistor::update()+0xc0>
	}

//	int16_t avg = cumulative / SAMPLE_COUNT;

	//current_temp = thermistorToCelsius(avg,table_index);
	current_temp = thermistorToCelsius(temp,table_index);
   11654:	b200      	sxth	r0, r0
   11656:	f994 101f 	ldrsb.w	r1, [r4, #31]
   1165a:	f000 f809 	bl	11670 <thermistorToCelsius(short, signed char)>
   1165e:	b280      	uxth	r0, r0
   11660:	80a0      	strh	r0, [r4, #4]
	return SS_OK;
   11662:	f04f 0000 	mov.w	r0, #0
   11666:	e001      	b.n	1166c <Thermistor::update()+0xc0>
			raw_valid = false;
                }
//	}

	// initiate next read
	if (!startAnalogRead(analog_pin,&raw_value, &raw_valid)) return SS_ADC_BUSY;
   11668:	f04f 0001 	mov.w	r0, #1
//	int16_t avg = cumulative / SAMPLE_COUNT;

	//current_temp = thermistorToCelsius(avg,table_index);
	current_temp = thermistorToCelsius(temp,table_index);
	return SS_OK;
}
   1166c:	b00b      	add	sp, #44	; 0x2c
   1166e:	bd30      	pop	{r4, r5, pc}

00011670 <thermistorToCelsius(short, signed char)>:
//		memcpy_P(&rv, (const void*)&(default_therm_table[entryIdx]), sizeof(Entry));
	}
	return rv;
}

int16_t thermistorToCelsius(int16_t reading, int8_t table_idx) {
   11670:	b4f0      	push	{r4, r5, r6, r7}
  int8_t bottom = 0;
  int8_t top = NUMTEMPS-1;
  int8_t mid = (bottom+top)/2;
   11672:	f04f 030f 	mov.w	r3, #15
	return rv;
}

int16_t thermistorToCelsius(int16_t reading, int8_t table_idx) {
  int8_t bottom = 0;
  int8_t top = NUMTEMPS-1;
   11676:	f04f 061e 	mov.w	r6, #30
	}
	return rv;
}

int16_t thermistorToCelsius(int16_t reading, int8_t table_idx) {
  int8_t bottom = 0;
   1167a:	f04f 0100 	mov.w	r1, #0
//		}
//		offset += sizeof(Entry) * entryIdx;				//TODO: Fix if if(0) changes
//		eeprom_read_block(&rv,(const void*)offset,sizeof(Entry)); //TODO: Fix if if(0) changes
	} else {
		// get from progmem
		rv.adc = default_therm_table[entryIdx].adc;
   1167e:	f64a 6580 	movw	r5, #44672	; 0xae80
   11682:	f2c0 0502 	movt	r5, #2
   11686:	b25a      	sxtb	r2, r3
  int8_t t;
  Entry e;
  while (mid > bottom) {
	  t = mid;
	  e = getEntry(mid,table_idx);
	  if (reading < e.adc) {
   11688:	f935 4022 	ldrsh.w	r4, [r5, r2, lsl #2]
   1168c:	4284      	cmp	r4, r0
		  top = mid;
		  mid = (bottom+top)/2;
   1168e:	bfc1      	itttt	gt
   11690:	b24c      	sxtbgt	r4, r1
   11692:	18a2      	addgt	r2, r4, r2
   11694:	eb02 72d2 	addgt.w	r2, r2, r2, lsr #31
   11698:	461e      	movgt	r6, r3
	  } else {
		  bottom = mid;
		  mid = (bottom+top)/2;
   1169a:	bfdf      	itttt	le
   1169c:	b271      	sxtble	r1, r6
   1169e:	188a      	addle	r2, r1, r2
   116a0:	eb02 72d2 	addle.w	r2, r2, r2, lsr #31
   116a4:	4619      	movle	r1, r3
   116a6:	f3c2 0347 	ubfx	r3, r2, #1, #8
  int8_t bottom = 0;
  int8_t top = NUMTEMPS-1;
  int8_t mid = (bottom+top)/2;
  int8_t t;
  Entry e;
  while (mid > bottom) {
   116aa:	b25c      	sxtb	r4, r3
   116ac:	b24a      	sxtb	r2, r1
   116ae:	4294      	cmp	r4, r2
   116b0:	dce9      	bgt.n	11686 <thermistorToCelsius(short, signed char)+0x16>
//		}
//		offset += sizeof(Entry) * entryIdx;				//TODO: Fix if if(0) changes
//		eeprom_read_block(&rv,(const void*)offset,sizeof(Entry)); //TODO: Fix if if(0) changes
	} else {
		// get from progmem
		rv.adc = default_therm_table[entryIdx].adc;
   116b2:	f64a 6380 	movw	r3, #44672	; 0xae80
   116b6:	f2c0 0302 	movt	r3, #2
   116ba:	f833 5022 	ldrh.w	r5, [r3, r2, lsl #2]
		rv.value = default_therm_table[entryIdx].value;
   116be:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   116c2:	8854      	ldrh	r4, [r2, #2]
//		}
//		offset += sizeof(Entry) * entryIdx;				//TODO: Fix if if(0) changes
//		eeprom_read_block(&rv,(const void*)offset,sizeof(Entry)); //TODO: Fix if if(0) changes
	} else {
		// get from progmem
		rv.adc = default_therm_table[entryIdx].adc;
   116c4:	b272      	sxtb	r2, r6
   116c6:	f833 7022 	ldrh.w	r7, [r3, r2, lsl #2]
		rv.value = default_therm_table[entryIdx].value;
   116ca:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   116ce:	885b      	ldrh	r3, [r3, #2]
		  mid = (bottom+top)/2;
	  }
  }
  Entry eb = getEntry(bottom,table_idx);
  Entry et = getEntry(top,table_idx);
  if (bottom == 0 && reading < eb.adc) {
   116d0:	b921      	cbnz	r1, 116dc <thermistorToCelsius(short, signed char)+0x6c>
   116d2:	b22a      	sxth	r2, r5
   116d4:	4290      	cmp	r0, r2
	  // out of scale; safety mode
	  return 255;
   116d6:	bfb8      	it	lt
   116d8:	20ff      	movlt	r0, #255	; 0xff
		  mid = (bottom+top)/2;
	  }
  }
  Entry eb = getEntry(bottom,table_idx);
  Entry et = getEntry(top,table_idx);
  if (bottom == 0 && reading < eb.adc) {
   116da:	db18      	blt.n	1170e <thermistorToCelsius(short, signed char)+0x9e>
	  // out of scale; safety mode
	  return 255;
  }
  if (top == NUMTEMPS-1 && reading > et.adc) {
   116dc:	b276      	sxtb	r6, r6
   116de:	2e1e      	cmp	r6, #30
   116e0:	d104      	bne.n	116ec <thermistorToCelsius(short, signed char)+0x7c>
   116e2:	b23a      	sxth	r2, r7
   116e4:	4290      	cmp	r0, r2
	  // out of scale; safety mode
	  return 255;
   116e6:	bfc8      	it	gt
   116e8:	20ff      	movgt	r0, #255	; 0xff
  Entry et = getEntry(top,table_idx);
  if (bottom == 0 && reading < eb.adc) {
	  // out of scale; safety mode
	  return 255;
  }
  if (top == NUMTEMPS-1 && reading > et.adc) {
   116ea:	dc10      	bgt.n	1170e <thermistorToCelsius(short, signed char)+0x9e>
	  // out of scale; safety mode
	  return 255;
  }

  int16_t celsius  = eb.value +
		  ((reading - eb.adc) * (et.value - eb.value)) / (et.adc - eb.adc);
   116ec:	b22d      	sxth	r5, r5
   116ee:	1b40      	subs	r0, r0, r5
   116f0:	b21b      	sxth	r3, r3
   116f2:	b222      	sxth	r2, r4
   116f4:	1a9b      	subs	r3, r3, r2
   116f6:	fb03 f000 	mul.w	r0, r3, r0
   116fa:	b23f      	sxth	r7, r7
   116fc:	1b7d      	subs	r5, r7, r5
   116fe:	fb90 f0f5 	sdiv	r0, r0, r5
   11702:	1900      	adds	r0, r0, r4
   11704:	b200      	sxth	r0, r0
   11706:	28ff      	cmp	r0, #255	; 0xff
   11708:	bfa8      	it	ge
   1170a:	20ff      	movge	r0, #255	; 0xff
   1170c:	b280      	uxth	r0, r0
  if (celsius > 255)
	  celsius = 255;
  return celsius;
}
   1170e:	b200      	sxth	r0, r0
   11710:	bcf0      	pop	{r4, r5, r6, r7}
   11712:	4770      	bx	lr

00011714 <isTableSet(unsigned short)>:
//	const void* offset = (const void*)off;
	uint8_t first_byte;
//	first_byte = (uint8_t)(eeprom_address(EEPROM_START_ADDRESS, off));
//	eeprom_read_block(&first_byte,offset,1);
	return first_byte != 0xff;
}
   11714:	f04f 0001 	mov.w	r0, #1
   11718:	4770      	bx	lr
   1171a:	bf00      	nop

0001171c <initThermistorTables()>:


void initThermistorTables() {
   1171c:	b508      	push	{r3, lr}
	has_table[0] = isTableSet(eeprom_offsets::THERM_TABLE + therm_eeprom_offsets::THERM_DATA_OFFSET);
   1171e:	f04f 0084 	mov.w	r0, #132	; 0x84
   11722:	f7ff fff7 	bl	11714 <isTableSet(unsigned short)>
   11726:	f642 031c 	movw	r3, #10268	; 0x281c
   1172a:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1172e:	7018      	strb	r0, [r3, #0]
	//has_table[1] = isTableSet(eeprom::THERM_TABLE_1 + eeprom::THERM_DATA_OFFSET);
}
   11730:	bd08      	pop	{r3, pc}
   11732:	bf00      	nop

00011734 <_GLOBAL__sub_I_default_therm_table>:
   11734:	b508      	push	{r3, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
   11736:	f642 0018 	movw	r0, #10264	; 0x2818
   1173a:	f2c1 0000 	movt	r0, #4096	; 0x1000
   1173e:	f04f 0100 	mov.w	r1, #0
   11742:	f7ff fab9 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
   11746:	f642 0020 	movw	r0, #10272	; 0x2820
   1174a:	f2c1 0000 	movt	r0, #4096	; 0x1000
   1174e:	f04f 0101 	mov.w	r1, #1
   11752:	f7ff fab1 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
   11756:	f642 0024 	movw	r0, #10276	; 0x2824
   1175a:	f2c1 0000 	movt	r0, #4096	; 0x1000
   1175e:	f04f 0102 	mov.w	r1, #2
   11762:	f7ff faa9 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
   11766:	f642 0028 	movw	r0, #10280	; 0x2828
   1176a:	f2c1 0000 	movt	r0, #4096	; 0x1000
   1176e:	f04f 0103 	mov.w	r1, #3
   11772:	f7ff faa1 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
   11776:	f642 002c 	movw	r0, #10284	; 0x282c
   1177a:	f2c1 0000 	movt	r0, #4096	; 0x1000
   1177e:	f04f 0104 	mov.w	r1, #4
   11782:	f7ff fa99 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
   11786:	f642 0030 	movw	r0, #10288	; 0x2830
   1178a:	f2c1 0000 	movt	r0, #4096	; 0x1000
   1178e:	f04f 01ff 	mov.w	r1, #255	; 0xff
   11792:	f7ff fa91 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
   11796:	bd08      	pop	{r3, pc}

00011798 <_GLOBAL__sub_I__ZN12ThermocoupleC2E3PinS0_S0_>:
	  return SS_ERROR_UNPLUGGED;
	}

	current_temp = raw;
	return SS_OK;
}
   11798:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
   1179a:	f642 0034 	movw	r0, #10292	; 0x2834
   1179e:	f2c1 0000 	movt	r0, #4096	; 0x1000
   117a2:	f04f 0100 	mov.w	r1, #0
   117a6:	f7ff fa87 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
   117aa:	f642 0038 	movw	r0, #10296	; 0x2838
   117ae:	f2c1 0000 	movt	r0, #4096	; 0x1000
   117b2:	f04f 0101 	mov.w	r1, #1
   117b6:	f7ff fa7f 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
   117ba:	f642 003c 	movw	r0, #10300	; 0x283c
   117be:	f2c1 0000 	movt	r0, #4096	; 0x1000
   117c2:	f04f 0102 	mov.w	r1, #2
   117c6:	f7ff fa77 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
   117ca:	f642 0040 	movw	r0, #10304	; 0x2840
   117ce:	f2c1 0000 	movt	r0, #4096	; 0x1000
   117d2:	f04f 0103 	mov.w	r1, #3
   117d6:	f7ff fa6f 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
   117da:	f642 0044 	movw	r0, #10308	; 0x2844
   117de:	f2c1 0000 	movt	r0, #4096	; 0x1000
   117e2:	f04f 0104 	mov.w	r1, #4
   117e6:	f7ff fa67 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
   117ea:	f642 0448 	movw	r4, #10312	; 0x2848
   117ee:	f2c1 0400 	movt	r4, #4096	; 0x1000
   117f2:	4620      	mov	r0, r4
   117f4:	f04f 01ff 	mov.w	r1, #255	; 0xff
   117f8:	f7ff fa5e 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
   117fc:	f642 004c 	movw	r0, #10316	; 0x284c
   11800:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11804:	4621      	mov	r1, r4
   11806:	f04f 0200 	mov.w	r2, #0
   1180a:	f7ff fc67 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
   1180e:	bd10      	pop	{r4, pc}

00011810 <Timeout::Timeout()>:
    #include "Motherboard.hh"

    inline micros_t getMicros() { return Motherboard::getBoard().getCurrentMicros(); }
#endif

Timeout::Timeout() : active(false), elapsed(false) {}
   11810:	f04f 0200 	mov.w	r2, #0
   11814:	7002      	strb	r2, [r0, #0]
   11816:	7042      	strb	r2, [r0, #1]
   11818:	4770      	bx	lr
   1181a:	bf00      	nop

0001181c <Timeout::start(unsigned long)>:

void Timeout::start(micros_t duration_micros_in) {
   1181c:	b570      	push	{r4, r5, r6, lr}
   1181e:	4604      	mov	r4, r0
   11820:	460e      	mov	r6, r1
	active = true;
   11822:	f04f 0301 	mov.w	r3, #1
   11826:	7003      	strb	r3, [r0, #0]
	is_paused = false;
   11828:	f04f 0500 	mov.w	r5, #0
   1182c:	7085      	strb	r5, [r0, #2]
	elapsed = false;
   1182e:	7045      	strb	r5, [r0, #1]

	inline micros_t getMicros() { return ExtruderBoard::getBoard().getCurrentMicros(); }
#else
    #include "Motherboard.hh"

    inline micros_t getMicros() { return Motherboard::getBoard().getCurrentMicros(); }
   11830:	f641 309c 	movw	r0, #7068	; 0x1b9c
   11834:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11838:	f7f9 fd8a 	bl	b350 <Motherboard::getCurrentMicros()>

void Timeout::start(micros_t duration_micros_in) {
	active = true;
	is_paused = false;
	elapsed = false;
    start_stamp_micros = getMicros();
   1183c:	6060      	str	r0, [r4, #4]
	duration_micros = duration_micros_in;
   1183e:	60a6      	str	r6, [r4, #8]
	pause_micros = 0;
   11840:	60e5      	str	r5, [r4, #12]
}
   11842:	bd70      	pop	{r4, r5, r6, pc}

00011844 <Timeout::hasElapsed()>:

bool Timeout::hasElapsed() {
   11844:	b510      	push	{r4, lr}
   11846:	4604      	mov	r4, r0
	if (active && !elapsed && !is_paused) {
   11848:	7803      	ldrb	r3, [r0, #0]
   1184a:	b193      	cbz	r3, 11872 <Timeout::hasElapsed()+0x2e>
   1184c:	7843      	ldrb	r3, [r0, #1]
   1184e:	b983      	cbnz	r3, 11872 <Timeout::hasElapsed()+0x2e>
   11850:	7883      	ldrb	r3, [r0, #2]
   11852:	b973      	cbnz	r3, 11872 <Timeout::hasElapsed()+0x2e>

	inline micros_t getMicros() { return ExtruderBoard::getBoard().getCurrentMicros(); }
#else
    #include "Motherboard.hh"

    inline micros_t getMicros() { return Motherboard::getBoard().getCurrentMicros(); }
   11854:	f641 309c 	movw	r0, #7068	; 0x1b9c
   11858:	f2c1 0000 	movt	r0, #4096	; 0x1000
   1185c:	f7f9 fd78 	bl	b350 <Motherboard::getCurrentMicros()>
	pause_micros = 0;
}

bool Timeout::hasElapsed() {
	if (active && !elapsed && !is_paused) {
                micros_t delta = getMicros() - start_stamp_micros;
   11860:	6863      	ldr	r3, [r4, #4]
   11862:	1ac3      	subs	r3, r0, r3
		if (delta >= duration_micros) {
   11864:	68a2      	ldr	r2, [r4, #8]
   11866:	4293      	cmp	r3, r2
			active = false;
   11868:	bf21      	itttt	cs
   1186a:	2300      	movcs	r3, #0
   1186c:	7023      	strbcs	r3, [r4, #0]
			elapsed = true;
   1186e:	2301      	movcs	r3, #1
   11870:	7063      	strbcs	r3, [r4, #1]
		}
	}
	return elapsed;
}
   11872:	7860      	ldrb	r0, [r4, #1]
   11874:	bd10      	pop	{r4, pc}
   11876:	bf00      	nop

00011878 <Timeout::abort()>:

void Timeout::abort() {
	active = false;
   11878:	f04f 0300 	mov.w	r3, #0
   1187c:	7003      	strb	r3, [r0, #0]
}
   1187e:	4770      	bx	lr

00011880 <Timeout::clear()>:
void Timeout::clear(){
	elapsed = false;
   11880:	f04f 0300 	mov.w	r3, #0
   11884:	7043      	strb	r3, [r0, #1]
}
   11886:	4770      	bx	lr

00011888 <Timeout::pause(bool)>:
void Timeout::pause(bool pause_in){
   11888:	b510      	push	{r4, lr}
   1188a:	4604      	mov	r4, r0

	/// don't update time or state if we are already in the desired state
	if (is_paused != pause_in){
   1188c:	7883      	ldrb	r3, [r0, #2]
   1188e:	428b      	cmp	r3, r1
   11890:	d014      	beq.n	118bc <Timeout::pause(bool)+0x34>
		
		is_paused = pause_in;
   11892:	7081      	strb	r1, [r0, #2]

		if(pause_in){
   11894:	b149      	cbz	r1, 118aa <Timeout::pause(bool)+0x22>

	inline micros_t getMicros() { return ExtruderBoard::getBoard().getCurrentMicros(); }
#else
    #include "Motherboard.hh"

    inline micros_t getMicros() { return Motherboard::getBoard().getCurrentMicros(); }
   11896:	f641 309c 	movw	r0, #7068	; 0x1b9c
   1189a:	f2c1 0000 	movt	r0, #4096	; 0x1000
   1189e:	f7f9 fd57 	bl	b350 <Motherboard::getCurrentMicros()>
	if (is_paused != pause_in){
		
		is_paused = pause_in;

		if(pause_in){
			pause_micros = getMicros() - start_stamp_micros;
   118a2:	6863      	ldr	r3, [r4, #4]
   118a4:	1ac3      	subs	r3, r0, r3
   118a6:	60e3      	str	r3, [r4, #12]
   118a8:	bd10      	pop	{r4, pc}

	inline micros_t getMicros() { return ExtruderBoard::getBoard().getCurrentMicros(); }
#else
    #include "Motherboard.hh"

    inline micros_t getMicros() { return Motherboard::getBoard().getCurrentMicros(); }
   118aa:	f641 309c 	movw	r0, #7068	; 0x1b9c
   118ae:	f2c1 0000 	movt	r0, #4096	; 0x1000
   118b2:	f7f9 fd4d 	bl	b350 <Motherboard::getCurrentMicros()>
		is_paused = pause_in;

		if(pause_in){
			pause_micros = getMicros() - start_stamp_micros;
		}else{
			start_stamp_micros = getMicros() - pause_micros;
   118b6:	68e3      	ldr	r3, [r4, #12]
   118b8:	1ac3      	subs	r3, r0, r3
   118ba:	6063      	str	r3, [r4, #4]
   118bc:	bd10      	pop	{r4, pc}
   118be:	bf00      	nop

000118c0 <Timeout::getCurrentElapsed()>:
		}
	}

}

micros_t Timeout::getCurrentElapsed(){
   118c0:	b510      	push	{r4, lr}
   118c2:	4604      	mov	r4, r0
	if(active){
   118c4:	7803      	ldrb	r3, [r0, #0]
   118c6:	b163      	cbz	r3, 118e2 <Timeout::getCurrentElapsed()+0x22>
		if(is_paused){
   118c8:	7883      	ldrb	r3, [r0, #2]
   118ca:	b10b      	cbz	r3, 118d0 <Timeout::getCurrentElapsed()+0x10>
			return pause_micros;
   118cc:	68c0      	ldr	r0, [r0, #12]
   118ce:	bd10      	pop	{r4, pc}

	inline micros_t getMicros() { return ExtruderBoard::getBoard().getCurrentMicros(); }
#else
    #include "Motherboard.hh"

    inline micros_t getMicros() { return Motherboard::getBoard().getCurrentMicros(); }
   118d0:	f641 309c 	movw	r0, #7068	; 0x1b9c
   118d4:	f2c1 0000 	movt	r0, #4096	; 0x1000
   118d8:	f7f9 fd3a 	bl	b350 <Motherboard::getCurrentMicros()>
micros_t Timeout::getCurrentElapsed(){
	if(active){
		if(is_paused){
			return pause_micros;
		}else{
			return getMicros() - start_stamp_micros;
   118dc:	6863      	ldr	r3, [r4, #4]
   118de:	1ac0      	subs	r0, r0, r3
   118e0:	bd10      	pop	{r4, pc}
		}
	}else{
		return 0;
   118e2:	f04f 0000 	mov.w	r0, #0
	}
}
   118e6:	bd10      	pop	{r4, pc}

000118e8 <_GLOBAL__sub_I__ZN7TimeoutC2Ev>:
   118e8:	b510      	push	{r4, lr}
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
   118ea:	f642 0054 	movw	r0, #10324	; 0x2854
   118ee:	f2c1 0000 	movt	r0, #4096	; 0x1000
   118f2:	f04f 0100 	mov.w	r1, #0
   118f6:	f7ff f9df 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
   118fa:	f642 0058 	movw	r0, #10328	; 0x2858
   118fe:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11902:	f04f 0101 	mov.w	r1, #1
   11906:	f7ff f9d7 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
   1190a:	f642 005c 	movw	r0, #10332	; 0x285c
   1190e:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11912:	f04f 0102 	mov.w	r1, #2
   11916:	f7ff f9cf 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
   1191a:	f642 0060 	movw	r0, #10336	; 0x2860
   1191e:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11922:	f04f 0103 	mov.w	r1, #3
   11926:	f7ff f9c7 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
   1192a:	f642 0064 	movw	r0, #10340	; 0x2864
   1192e:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11932:	f04f 0104 	mov.w	r1, #4
   11936:	f7ff f9bf 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
   1193a:	f642 0468 	movw	r4, #10344	; 0x2868
   1193e:	f2c1 0400 	movt	r4, #4096	; 0x1000
   11942:	4620      	mov	r0, r4
   11944:	f04f 01ff 	mov.w	r1, #255	; 0xff
   11948:	f7ff f9b6 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
   1194c:	f642 006c 	movw	r0, #10348	; 0x286c
   11950:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11954:	4621      	mov	r1, r4
   11956:	f04f 0200 	mov.w	r2, #0
   1195a:	f7ff fbbf 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
   1195e:	bd10      	pop	{r4, pc}

00011960 <UART::init_serial()>:
    #endif

#endif
*/

void UART::init_serial() {
   11960:	b570      	push	{r4, r5, r6, lr}
   11962:	b084      	sub	sp, #16
    if(index_ == RS232) {
   11964:	7843      	ldrb	r3, [r0, #1]
   11966:	b9ab      	cbnz	r3, 11994 <UART::init_serial()+0x34>
    	xprintf("USB_Init" " (%s:%d)\n",_F_,_L_);
   11968:	4c2e      	ldr	r4, [pc, #184]	; (11a24 <UART::init_serial()+0xc4>)
   1196a:	f64a 60fc 	movw	r0, #44796	; 0xaefc
   1196e:	f2c0 0002 	movt	r0, #2
   11972:	4621      	mov	r1, r4
   11974:	f04f 0295 	mov.w	r2, #149	; 0x95
   11978:	f7f4 fdac 	bl	64d4 <xprintf>
    	USB_Init();
   1197c:	f7f3 ff42 	bl	5804 <USB_Init>
    	xprintf("b4 USB config" " (%s:%d)\n",_F_,_L_);
   11980:	f64a 7030 	movw	r0, #44848	; 0xaf30
   11984:	f2c0 0002 	movt	r0, #2
   11988:	4621      	mov	r1, r4
   1198a:	f04f 0297 	mov.w	r2, #151	; 0x97
   1198e:	f7f4 fda1 	bl	64d4 <xprintf>
   11992:	e03b      	b.n	11a0c <UART::init_serial()+0xac>
 //   		xprintf("b4 USB config" " (%s:%d)\n",_F_,_L_);
 //   	}
    }
#if HAS_SLAVE_UART
    else {
    	xprintf("rs485" " (%s:%d)\n",_F_,_L_);
   11994:	f64a 7048 	movw	r0, #44872	; 0xaf48
   11998:	f2c0 0002 	movt	r0, #2
   1199c:	4921      	ldr	r1, [pc, #132]	; (11a24 <UART::init_serial()+0xc4>)
   1199e:	f04f 029e 	mov.w	r2, #158	; 0x9e
   119a2:	f7f4 fd97 	bl	64d4 <xprintf>
		// UART Configuration Structure
		UART_CFG_Type u_cfg;
		u_cfg.Baud_rate = 38400;
   119a6:	f44f 4316 	mov.w	r3, #38400	; 0x9600
   119aa:	9300      	str	r3, [sp, #0]
		u_cfg.Databits = UART_DATABIT_8;
   119ac:	f04f 0303 	mov.w	r3, #3
   119b0:	f88d 3005 	strb.w	r3, [sp, #5]
		u_cfg.Parity = UART_PARITY_NONE;
   119b4:	f04f 0400 	mov.w	r4, #0
   119b8:	f88d 4004 	strb.w	r4, [sp, #4]
		u_cfg.Stopbits = UART_STOPBIT_1;
   119bc:	f88d 4006 	strb.w	r4, [sp, #6]
		UART_Init((LPC_UART_TypeDef *)LPC_UART1, &u_cfg);
   119c0:	4620      	mov	r0, r4
   119c2:	f2c4 0001 	movt	r0, #16385	; 0x4001
   119c6:	4669      	mov	r1, sp
   119c8:	f7f2 f9a6 	bl	3d18 <UART_Init>
		// Initialize UART0 pin connect
		PINSEL_CFG_Type PinCfg;
		PinCfg.Funcnum = 1;
   119cc:	f04f 0601 	mov.w	r6, #1
   119d0:	f88d 600a 	strb.w	r6, [sp, #10]
		PinCfg.OpenDrain = 0;
   119d4:	f88d 400c 	strb.w	r4, [sp, #12]
		PinCfg.Pinmode = 0;
   119d8:	f88d 400b 	strb.w	r4, [sp, #11]
		PinCfg.Pinnum = 0;
   119dc:	f88d 4009 	strb.w	r4, [sp, #9]
		PinCfg.Portnum = 0;
   119e0:	ad04      	add	r5, sp, #16
   119e2:	f805 4d08 	strb.w	r4, [r5, #-8]!
		PINSEL_ConfigPin(&PinCfg);
   119e6:	4628      	mov	r0, r5
   119e8:	f7f1 fd9c 	bl	3524 <PINSEL_ConfigPin>
		PinCfg.Pinnum = 1;
   119ec:	f88d 6009 	strb.w	r6, [sp, #9]
		PINSEL_ConfigPin(&PinCfg);
   119f0:	4628      	mov	r0, r5
   119f2:	f7f1 fd97 	bl	3524 <PINSEL_ConfigPin>
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   119f6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
   119fa:	f2ce 0300 	movt	r3, #57344	; 0xe000
   119fe:	f04f 0248 	mov.w	r2, #72	; 0x48
   11a02:	f883 2306 	strb.w	r2, [r3, #774]	; 0x306

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   11a06:	f04f 0240 	mov.w	r2, #64	; 0x40
   11a0a:	601a      	str	r2, [r3, #0]
		NVIC_SetPriority(UART1_IRQn, 9);
		NVIC_EnableIRQ(UART1_IRQn);
    }
#endif
    xprintf("end UART::init_serial" " (%s:%d)\n",_F_,_L_);
   11a0c:	f64a 7058 	movw	r0, #44888	; 0xaf58
   11a10:	f2c0 0002 	movt	r0, #2
   11a14:	4903      	ldr	r1, [pc, #12]	; (11a24 <UART::init_serial()+0xc4>)
   11a16:	f04f 02b4 	mov.w	r2, #180	; 0xb4
   11a1a:	f7f4 fd5b 	bl	64d4 <xprintf>
}
   11a1e:	b004      	add	sp, #16
   11a20:	bd70      	pop	{r4, r5, r6, pc}
   11a22:	bf00      	nop
   11a24:	0002af27 	.word	0x0002af27

00011a28 <UART::UART(unsigned char, communication_mode)>:
// Transition to a transmitting state
inline void speak() {
    TX_Enable.setValue(true);
}

UART::UART(uint8_t index, communication_mode mode) :
   11a28:	b510      	push	{r4, lr}
   11a2a:	4604      	mov	r4, r0
    mode_(mode),
    index_(index),
    enabled_(false) {
   11a2c:	7002      	strb	r2, [r0, #0]
   11a2e:	7041      	strb	r1, [r0, #1]
   11a30:	f04f 0300 	mov.w	r3, #0
   11a34:	7083      	strb	r3, [r0, #2]
   11a36:	f100 0003 	add.w	r0, r0, #3
   11a3a:	f7ff f9e1 	bl	10e00 <InPacket::InPacket()>
   11a3e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   11a42:	f7ff fa49 	bl	10ed8 <OutPacket::OutPacket()>

        init_serial();
   11a46:	4620      	mov	r0, r4
   11a48:	f7ff ff8a 	bl	11960 <UART::init_serial()>

}
   11a4c:	4620      	mov	r0, r4
   11a4e:	bd10      	pop	{r4, pc}

00011a50 <UART::beginSend()>:

// Subsequent bytes will be triggered by the tx complete interrupt.
void UART::beginSend() {
   11a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
//	xprintf("beginSend()" " (%s:%d)\n",_F_,_L_);
	if (!enabled_) { return; }
   11a54:	7883      	ldrb	r3, [r0, #2]
   11a56:	2b00      	cmp	r3, #0
   11a58:	f000 80dc 	beq.w	11c14 <UART::beginSend()+0x1c4>
	if (index_ == RS232) {		//uart0 eg usb
   11a5c:	7843      	ldrb	r3, [r0, #1]
   11a5e:	2b00      	cmp	r3, #0
   11a60:	f040 8098 	bne.w	11b94 <UART::beginSend()+0x144>
   11a64:	f641 2314 	movw	r3, #6676	; 0x1a14
   11a68:	f2c1 0300 	movt	r3, #4096	; 0x1000
   11a6c:	681b      	ldr	r3, [r3, #0]
   11a6e:	f013 0f01 	tst.w	r3, #1
   11a72:	d115      	bne.n	11aa0 <UART::beginSend()+0x50>
   11a74:	f641 2014 	movw	r0, #6676	; 0x1a14
   11a78:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11a7c:	f002 f820 	bl	13ac0 <__cxa_guard_acquire>
   11a80:	b170      	cbz	r0, 11aa0 <UART::beginSend()+0x50>
   11a82:	f641 2018 	movw	r0, #6680	; 0x1a18
   11a86:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11a8a:	f04f 0100 	mov.w	r1, #0
   11a8e:	460a      	mov	r2, r1
   11a90:	f7ff ffca 	bl	11a28 <UART::UART(unsigned char, communication_mode)>
   11a94:	f641 2014 	movw	r0, #6676	; 0x1a14
   11a98:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11a9c:	f002 f82e 	bl	13afc <__cxa_guard_release>
		static unsigned char sendBuffer[64];
		sendBuffer[0] = UART::getHostUART().out.getNextByteToSend();
   11aa0:	485d      	ldr	r0, [pc, #372]	; (11c18 <UART::beginSend()+0x1c8>)
   11aa2:	f7ff fa1f 	bl	10ee4 <OutPacket::getNextByteToSend()>
   11aa6:	f642 03e0 	movw	r3, #10464	; 0x28e0
   11aaa:	f2c1 0300 	movt	r3, #4096	; 0x1000
   11aae:	7018      	strb	r0, [r3, #0]
   11ab0:	f641 2414 	movw	r4, #6676	; 0x1a14
   11ab4:	f2c1 0400 	movt	r4, #4096	; 0x1000
		while (UART::getHostUART().out.isSending()) {
			uint32_t i;
			for (i = 1; i < USB_CDC_BUFSIZE-1; i++){
				sendBuffer[i] = UART::getHostUART().out.getNextByteToSend();
   11ab8:	f8df 815c 	ldr.w	r8, [pc, #348]	; 11c18 <UART::beginSend()+0x1c8>
//	xprintf("beginSend()" " (%s:%d)\n",_F_,_L_);
	if (!enabled_) { return; }
	if (index_ == RS232) {		//uart0 eg usb
		static unsigned char sendBuffer[64];
		sendBuffer[0] = UART::getHostUART().out.getNextByteToSend();
		while (UART::getHostUART().out.isSending()) {
   11abc:	e03b      	b.n	11b36 <UART::beginSend()+0xe6>
   11abe:	6823      	ldr	r3, [r4, #0]
   11ac0:	f013 0f01 	tst.w	r3, #1
   11ac4:	d10c      	bne.n	11ae0 <UART::beginSend()+0x90>
   11ac6:	4620      	mov	r0, r4
   11ac8:	f001 fffa 	bl	13ac0 <__cxa_guard_acquire>
   11acc:	b140      	cbz	r0, 11ae0 <UART::beginSend()+0x90>
   11ace:	4630      	mov	r0, r6
   11ad0:	f04f 0100 	mov.w	r1, #0
   11ad4:	460a      	mov	r2, r1
   11ad6:	f7ff ffa7 	bl	11a28 <UART::UART(unsigned char, communication_mode)>
   11ada:	4620      	mov	r0, r4
   11adc:	f002 f80e 	bl	13afc <__cxa_guard_release>
			uint32_t i;
			for (i = 1; i < USB_CDC_BUFSIZE-1; i++){
				sendBuffer[i] = UART::getHostUART().out.getNextByteToSend();
   11ae0:	4640      	mov	r0, r8
   11ae2:	f7ff f9ff 	bl	10ee4 <OutPacket::getNextByteToSend()>
   11ae6:	f805 0f01 	strb.w	r0, [r5, #1]!
   11aea:	6823      	ldr	r3, [r4, #0]
   11aec:	f013 0f01 	tst.w	r3, #1
   11af0:	d10c      	bne.n	11b0c <UART::beginSend()+0xbc>
   11af2:	4620      	mov	r0, r4
   11af4:	f001 ffe4 	bl	13ac0 <__cxa_guard_acquire>
   11af8:	b140      	cbz	r0, 11b0c <UART::beginSend()+0xbc>
   11afa:	4630      	mov	r0, r6
   11afc:	f04f 0100 	mov.w	r1, #0
   11b00:	460a      	mov	r2, r1
   11b02:	f7ff ff91 	bl	11a28 <UART::UART(unsigned char, communication_mode)>
   11b06:	4620      	mov	r0, r4
   11b08:	f001 fff8 	bl	13afc <__cxa_guard_release>
	bool isFinished() const {
		return state == PS_LAST;
	}

	bool isSending() const {
		return state != PS_START && state != PS_LAST;
   11b0c:	f896 304b 	ldrb.w	r3, [r6, #75]	; 0x4b
   11b10:	b13b      	cbz	r3, 11b22 <UART::beginSend()+0xd2>
   11b12:	f896 304b 	ldrb.w	r3, [r6, #75]	; 0x4b
   11b16:	2b04      	cmp	r3, #4
   11b18:	d003      	beq.n	11b22 <UART::beginSend()+0xd2>
	if (index_ == RS232) {		//uart0 eg usb
		static unsigned char sendBuffer[64];
		sendBuffer[0] = UART::getHostUART().out.getNextByteToSend();
		while (UART::getHostUART().out.isSending()) {
			uint32_t i;
			for (i = 1; i < USB_CDC_BUFSIZE-1; i++){
   11b1a:	f107 0701 	add.w	r7, r7, #1
   11b1e:	2f3f      	cmp	r7, #63	; 0x3f
   11b20:	d1cd      	bne.n	11abe <UART::beginSend()+0x6e>
				sendBuffer[i] = UART::getHostUART().out.getNextByteToSend();
//				xprintf("%x %c\n",sendBuffer[i],sendBuffer[i]);
				if (!UART::getHostUART().out.isSending()) goto skip;
			}
			skip:
			USB_WriteEP (CDC_DEP_IN, (unsigned char *)&sendBuffer[0], i+1);
   11b22:	f04f 0082 	mov.w	r0, #130	; 0x82
   11b26:	f642 01e0 	movw	r1, #10464	; 0x28e0
   11b2a:	f2c1 0100 	movt	r1, #4096	; 0x1000
   11b2e:	f107 0201 	add.w	r2, r7, #1
   11b32:	f7f3 ffad 	bl	5a90 <USB_WriteEP>
   11b36:	6823      	ldr	r3, [r4, #0]
   11b38:	f013 0f01 	tst.w	r3, #1
   11b3c:	d10f      	bne.n	11b5e <UART::beginSend()+0x10e>
   11b3e:	4620      	mov	r0, r4
   11b40:	f001 ffbe 	bl	13ac0 <__cxa_guard_acquire>
   11b44:	b158      	cbz	r0, 11b5e <UART::beginSend()+0x10e>
   11b46:	f641 2018 	movw	r0, #6680	; 0x1a18
   11b4a:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11b4e:	f04f 0100 	mov.w	r1, #0
   11b52:	460a      	mov	r2, r1
   11b54:	f7ff ff68 	bl	11a28 <UART::UART(unsigned char, communication_mode)>
   11b58:	4620      	mov	r0, r4
   11b5a:	f001 ffcf 	bl	13afc <__cxa_guard_release>
   11b5e:	f641 2318 	movw	r3, #6680	; 0x1a18
   11b62:	f2c1 0300 	movt	r3, #4096	; 0x1000
   11b66:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
   11b6a:	2b00      	cmp	r3, #0
   11b6c:	d052      	beq.n	11c14 <UART::beginSend()+0x1c4>
   11b6e:	f641 2318 	movw	r3, #6680	; 0x1a18
   11b72:	f2c1 0300 	movt	r3, #4096	; 0x1000
   11b76:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
   11b7a:	2b04      	cmp	r3, #4
   11b7c:	d04a      	beq.n	11c14 <UART::beginSend()+0x1c4>
   11b7e:	f642 05e0 	movw	r5, #10464	; 0x28e0
   11b82:	f2c1 0500 	movt	r5, #4096	; 0x1000
   11b86:	f04f 0701 	mov.w	r7, #1
   11b8a:	f641 2618 	movw	r6, #6680	; 0x1a18
   11b8e:	f2c1 0600 	movt	r6, #4096	; 0x1000
   11b92:	e794      	b.n	11abe <UART::beginSend()+0x6e>
		}
	} else if (index_ == RS485) {
   11b94:	2b01      	cmp	r3, #1
   11b96:	d13d      	bne.n	11c14 <UART::beginSend()+0x1c4>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
   11b98:	f642 1368 	movw	r3, #10600	; 0x2968
   11b9c:	f2c1 0300 	movt	r3, #4096	; 0x1000
   11ba0:	785b      	ldrb	r3, [r3, #1]
   11ba2:	b95b      	cbnz	r3, 11bbc <UART::beginSend()+0x16c>
//		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
		// cli();
		if (on) {
//			PORTx |= pin_mask;
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
   11ba4:	f642 1268 	movw	r2, #10600	; 0x2968
   11ba8:	f2c1 0200 	movt	r2, #4096	; 0x1000
   11bac:	7893      	ldrb	r3, [r2, #2]
   11bae:	7810      	ldrb	r0, [r2, #0]
   11bb0:	f04f 0101 	mov.w	r1, #1
   11bb4:	fa01 f103 	lsl.w	r1, r1, r3
   11bb8:	f7f1 fc94 	bl	34e4 <GPIO_SetValue>
		speak();
		_delay_us(10);
   11bbc:	f04f 000a 	mov.w	r0, #10
   11bc0:	f7f7 fc36 	bl	9430 <_delay_us>
		loopback_bytes = 1;
   11bc4:	f642 1378 	movw	r3, #10616	; 0x2978
   11bc8:	f2c1 0300 	movt	r3, #4096	; 0x1000
   11bcc:	f04f 0201 	mov.w	r2, #1
   11bd0:	701a      	strb	r2, [r3, #0]
//    static UART& getHostUART() { return hostUART; }

#if HAS_SLAVE_UART
    /// Get a reference to the slave UART
    /// \return slaveUART instance, which should act as a master to one or more slave toolheads.
    static UART& getSlaveUART() {static UART slaveUART(1,RS485); return slaveUART; }
   11bd2:	f642 0374 	movw	r3, #10356	; 0x2874
   11bd6:	f2c1 0300 	movt	r3, #4096	; 0x1000
   11bda:	681b      	ldr	r3, [r3, #0]
   11bdc:	f013 0f01 	tst.w	r3, #1
   11be0:	d115      	bne.n	11c0e <UART::beginSend()+0x1be>
   11be2:	f642 0074 	movw	r0, #10356	; 0x2874
   11be6:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11bea:	f001 ff69 	bl	13ac0 <__cxa_guard_acquire>
   11bee:	b170      	cbz	r0, 11c0e <UART::beginSend()+0x1be>
   11bf0:	f642 0078 	movw	r0, #10360	; 0x2878
   11bf4:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11bf8:	f04f 0101 	mov.w	r1, #1
   11bfc:	460a      	mov	r2, r1
   11bfe:	f7ff ff13 	bl	11a28 <UART::UART(unsigned char, communication_mode)>
   11c02:	f642 0074 	movw	r0, #10356	; 0x2874
   11c06:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11c0a:	f001 ff77 	bl	13afc <__cxa_guard_release>
		uint8_t bytestosend = getSlaveUART().out.getNextByteToSend();
   11c0e:	4803      	ldr	r0, [pc, #12]	; (11c1c <UART::beginSend()+0x1cc>)
   11c10:	f7ff f968 	bl	10ee4 <OutPacket::getNextByteToSend()>
   11c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11c18:	10001a40 	.word	0x10001a40
   11c1c:	100028a0 	.word	0x100028a0

00011c20 <UART::enable(bool)>:
	}
}

void UART::enable(bool enabled) {
   11c20:	b570      	push	{r4, r5, r6, lr}
   11c22:	4604      	mov	r4, r0
   11c24:	460d      	mov	r5, r1
	xprintf("UART::enable" " (%s:%d)\n",_F_,_L_);
   11c26:	f24b 0004 	movw	r0, #45060	; 0xb004
   11c2a:	f2c0 0002 	movt	r0, #2
   11c2e:	4955      	ldr	r1, [pc, #340]	; (11d84 <UART::enable(bool)+0x164>)
   11c30:	f04f 02e5 	mov.w	r2, #229	; 0xe5
   11c34:	f7f4 fc4e 	bl	64d4 <xprintf>
	enabled_ = enabled;
   11c38:	70a5      	strb	r5, [r4, #2]
	if (index_ == 0) {
   11c3a:	7863      	ldrb	r3, [r4, #1]
   11c3c:	2b00      	cmp	r3, #0
   11c3e:	d139      	bne.n	11cb4 <UART::enable(bool)+0x94>
		if (enabled) {
   11c40:	b355      	cbz	r5, 11c98 <UART::enable(bool)+0x78>
			xprintf("USB_Connect(TRUE)" " (%s:%d)\n",_F_,_L_);
   11c42:	f64a 7078 	movw	r0, #44920	; 0xaf78
   11c46:	f2c0 0002 	movt	r0, #2
   11c4a:	494e      	ldr	r1, [pc, #312]	; (11d84 <UART::enable(bool)+0x164>)
   11c4c:	f04f 02e9 	mov.w	r2, #233	; 0xe9
   11c50:	f7f4 fc40 	bl	64d4 <xprintf>
			USB_Connect(TRUE);      // USB Connect
   11c54:	f04f 0001 	mov.w	r0, #1
   11c58:	f7f3 fd82 	bl	5760 <USB_Connect>
			while (!USB_Configuration){		// wait until USB is configured
   11c5c:	f243 3398 	movw	r3, #13208	; 0x3398
   11c60:	f2c1 0300 	movt	r3, #4096	; 0x1000
   11c64:	781b      	ldrb	r3, [r3, #0]
   11c66:	b96b      	cbnz	r3, 11c84 <UART::enable(bool)+0x64>
				_delay_us(100);
   11c68:	f04f 0664 	mov.w	r6, #100	; 0x64
	enabled_ = enabled;
	if (index_ == 0) {
		if (enabled) {
			xprintf("USB_Connect(TRUE)" " (%s:%d)\n",_F_,_L_);
			USB_Connect(TRUE);      // USB Connect
			while (!USB_Configuration){		// wait until USB is configured
   11c6c:	f243 3598 	movw	r5, #13208	; 0x3398
   11c70:	f2c1 0500 	movt	r5, #4096	; 0x1000
				_delay_us(100);
   11c74:	4630      	mov	r0, r6
   11c76:	f7f7 fbdb 	bl	9430 <_delay_us>
				WDT_Feed ();
   11c7a:	f7f2 fddb 	bl	4834 <WDT_Feed>
	enabled_ = enabled;
	if (index_ == 0) {
		if (enabled) {
			xprintf("USB_Connect(TRUE)" " (%s:%d)\n",_F_,_L_);
			USB_Connect(TRUE);      // USB Connect
			while (!USB_Configuration){		// wait until USB is configured
   11c7e:	782b      	ldrb	r3, [r5, #0]
   11c80:	2b00      	cmp	r3, #0
   11c82:	d0f7      	beq.n	11c74 <UART::enable(bool)+0x54>
				_delay_us(100);
				WDT_Feed ();
//				xprintf("enable !USB_Configuration" " (%s:%d)\n",_F_,_L_);
			}
			xprintf("after USB_Connect(TRUE)" " (%s:%d)\n",_F_,_L_);
   11c84:	f64a 7094 	movw	r0, #44948	; 0xaf94
   11c88:	f2c0 0002 	movt	r0, #2
   11c8c:	493d      	ldr	r1, [pc, #244]	; (11d84 <UART::enable(bool)+0x164>)
   11c8e:	f04f 02f0 	mov.w	r2, #240	; 0xf0
   11c92:	f7f4 fc1f 	bl	64d4 <xprintf>
   11c96:	e033      	b.n	11d00 <UART::enable(bool)+0xe0>
		}
		else {
			xprintf("Uart0 Disabled" " (%s:%d)\n",_F_,_L_);
   11c98:	f64a 70b8 	movw	r0, #44984	; 0xafb8
   11c9c:	f2c0 0002 	movt	r0, #2
   11ca0:	4938      	ldr	r1, [pc, #224]	; (11d84 <UART::enable(bool)+0x164>)
   11ca2:	f04f 02f3 	mov.w	r2, #243	; 0xf3
   11ca6:	f7f4 fc15 	bl	64d4 <xprintf>
			USB_Connect(FALSE);      // USB Disconnect
   11caa:	f04f 0000 	mov.w	r0, #0
   11cae:	f7f3 fd57 	bl	5760 <USB_Connect>
   11cb2:	e025      	b.n	11d00 <UART::enable(bool)+0xe0>
		}
	} else if (index_ == 1) {
   11cb4:	2b01      	cmp	r3, #1
   11cb6:	d123      	bne.n	11d00 <UART::enable(bool)+0xe0>
		if (enabled){
   11cb8:	b18d      	cbz	r5, 11cde <UART::enable(bool)+0xbe>
			xprintf("Uart1 Enabled" " (%s:%d)\n",_F_,_L_);
   11cba:	f64a 70d0 	movw	r0, #45008	; 0xafd0
   11cbe:	f2c0 0002 	movt	r0, #2
   11cc2:	4930      	ldr	r1, [pc, #192]	; (11d84 <UART::enable(bool)+0x164>)
   11cc4:	f04f 02f8 	mov.w	r2, #248	; 0xf8
   11cc8:	f7f4 fc04 	bl	64d4 <xprintf>
			UART_TxCmd((LPC_UART_TypeDef *)LPC_UART1, ENABLE);
   11ccc:	f04f 0000 	mov.w	r0, #0
   11cd0:	f2c4 0001 	movt	r0, #16385	; 0x4001
   11cd4:	f04f 0101 	mov.w	r1, #1
   11cd8:	f7f2 fcb0 	bl	463c <UART_TxCmd>
   11cdc:	e010      	b.n	11d00 <UART::enable(bool)+0xe0>
		}
		else {
			xprintf("Uart1 Disabled" " (%s:%d)\n",_F_,_L_);
   11cde:	f64a 70e8 	movw	r0, #45032	; 0xafe8
   11ce2:	f2c0 0002 	movt	r0, #2
   11ce6:	4927      	ldr	r1, [pc, #156]	; (11d84 <UART::enable(bool)+0x164>)
   11ce8:	f04f 02fc 	mov.w	r2, #252	; 0xfc
   11cec:	f7f4 fbf2 	bl	64d4 <xprintf>
			UART_TxCmd((LPC_UART_TypeDef *)LPC_UART1, DISABLE);
   11cf0:	f04f 0000 	mov.w	r0, #0
   11cf4:	f2c4 0001 	movt	r0, #16385	; 0x4001
   11cf8:	f04f 0100 	mov.w	r1, #0
   11cfc:	f7f2 fc9e 	bl	463c <UART_TxCmd>
		}
	}
        if (mode_ == RS485) {
   11d00:	7823      	ldrb	r3, [r4, #0]
   11d02:	2b01      	cmp	r3, #1
   11d04:	d133      	bne.n	11d6e <UART::enable(bool)+0x14e>
                // If this is an RS485 pin, set up the RX and TX enable control lines.
                TX_Enable.setDirection(true);
   11d06:	f642 1068 	movw	r0, #10600	; 0x2968
   11d0a:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11d0e:	f04f 0101 	mov.w	r1, #1
   11d12:	f7ff fa03 	bl	1111c <Pin::setDirection(bool) const>
                RX_Enable.setDirection(true);
   11d16:	f642 1470 	movw	r4, #10608	; 0x2970
   11d1a:	f2c1 0400 	movt	r4, #4096	; 0x1000
   11d1e:	4620      	mov	r0, r4
   11d20:	f04f 0101 	mov.w	r1, #1
   11d24:	f7ff f9fa 	bl	1111c <Pin::setDirection(bool) const>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
   11d28:	7863      	ldrb	r3, [r4, #1]
   11d2a:	b93b      	cbnz	r3, 11d3c <UART::enable(bool)+0x11c>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
   11d2c:	78a3      	ldrb	r3, [r4, #2]
   11d2e:	7820      	ldrb	r0, [r4, #0]
   11d30:	f04f 0101 	mov.w	r1, #1
   11d34:	fa01 f103 	lsl.w	r1, r1, r3
   11d38:	f7f1 fbdc 	bl	34f4 <GPIO_ClearValue>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
   11d3c:	f642 1368 	movw	r3, #10600	; 0x2968
   11d40:	f2c1 0300 	movt	r3, #4096	; 0x1000
   11d44:	785b      	ldrb	r3, [r3, #1]
   11d46:	b95b      	cbnz	r3, 11d60 <UART::enable(bool)+0x140>
//			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
			GPIO_SetValue(port_base, _BV(pin_index));
		} else {
//			PORTx &= pin_mask_inverted;
//			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
			GPIO_ClearValue(port_base, _BV(pin_index));
   11d48:	f642 1268 	movw	r2, #10600	; 0x2968
   11d4c:	f2c1 0200 	movt	r2, #4096	; 0x1000
   11d50:	7893      	ldrb	r3, [r2, #2]
   11d52:	7810      	ldrb	r0, [r2, #0]
   11d54:	f04f 0101 	mov.w	r1, #1
   11d58:	fa01 f103 	lsl.w	r1, r1, r3
   11d5c:	f7f1 fbca 	bl	34f4 <GPIO_ClearValue>
                RX_Enable.setValue(false);  // Active low
                listen();
                loopback_bytes = 0;
   11d60:	f642 1378 	movw	r3, #10616	; 0x2978
   11d64:	f2c1 0300 	movt	r3, #4096	; 0x1000
   11d68:	f04f 0200 	mov.w	r2, #0
   11d6c:	701a      	strb	r2, [r3, #0]
        }
	xprintf("end UART::enable" " (%s:%d)\n",_F_,_L_);
   11d6e:	f24b 0000 	movw	r0, #45056	; 0xb000
   11d72:	f2c0 0002 	movt	r0, #2
   11d76:	4903      	ldr	r1, [pc, #12]	; (11d84 <UART::enable(bool)+0x164>)
   11d78:	f44f 7284 	mov.w	r2, #264	; 0x108
   11d7c:	f7f4 fbaa 	bl	64d4 <xprintf>
}
   11d80:	bd70      	pop	{r4, r5, r6, pc}
   11d82:	bf00      	nop
   11d84:	0002af27 	.word	0x0002af27

00011d88 <UART1_IRQHandler>:

extern "C" void UART1_IRQHandler(void){
   11d88:	b510      	push	{r4, lr}
	xprintf("UART1_IRQ" " (%s:%d)\n",_F_,_L_);
   11d8a:	f24b 001c 	movw	r0, #45084	; 0xb01c
   11d8e:	f2c0 0002 	movt	r0, #2
   11d92:	496f      	ldr	r1, [pc, #444]	; (11f50 <UART1_IRQHandler+0x1c8>)
   11d94:	f44f 7286 	mov.w	r2, #268	; 0x10c
   11d98:	f7f4 fb9c 	bl	64d4 <xprintf>

	uint32_t intsrc, tmp, tmp1;
	// Determine the interrupt source
	intsrc = UART_GetIntId((LPC_UART_TypeDef *)LPC_UART1);
   11d9c:	f04f 0000 	mov.w	r0, #0
   11da0:	f2c4 0001 	movt	r0, #16385	; 0x4001
   11da4:	f7f2 fc10 	bl	45c8 <UART_GetIntId>
	tmp = intsrc & UART_IIR_INTID_MASK;
   11da8:	f000 040e 	and.w	r4, r0, #14
	// Receive Line Status
	if (tmp == UART_IIR_INTID_RLS){
   11dac:	2c06      	cmp	r4, #6
   11dae:	d106      	bne.n	11dbe <UART1_IRQHandler+0x36>
		// Check line status
		tmp1 = UART_GetLineStatus((LPC_UART_TypeDef *)LPC_UART1);
   11db0:	f04f 0000 	mov.w	r0, #0
   11db4:	f2c4 0001 	movt	r0, #16385	; 0x4001
   11db8:	f7f2 fbce 	bl	4558 <UART_GetLineStatus>
   11dbc:	bd10      	pop	{r4, pc}
		// if (tmp1) {
		//	UART_IntErr(tmp1);
		// }
	}
	// Receive Data Available or Character time-out
	if ((tmp == UART_IIR_INTID_RDA) || (tmp == UART_IIR_INTID_CTI)) {
   11dbe:	2c0c      	cmp	r4, #12
   11dc0:	bf14      	ite	ne
   11dc2:	2300      	movne	r3, #0
   11dc4:	2301      	moveq	r3, #1
   11dc6:	2c04      	cmp	r4, #4
   11dc8:	bf08      	it	eq
   11dca:	f043 0301 	orreq.w	r3, r3, #1
   11dce:	2b00      	cmp	r3, #0
   11dd0:	d042      	beq.n	11e58 <UART1_IRQHandler+0xd0>
		static uint8_t byte_in;
		byte_in = UART_ReceiveByte((LPC_UART_TypeDef *)LPC_UART1);
   11dd2:	f04f 0000 	mov.w	r0, #0
   11dd6:	f2c4 0001 	movt	r0, #16385	; 0x4001
   11dda:	f7f2 fa21 	bl	4220 <UART_ReceiveByte>
   11dde:	f642 1379 	movw	r3, #10617	; 0x2979
   11de2:	f2c1 0300 	movt	r3, #4096	; 0x1000
   11de6:	7018      	strb	r0, [r3, #0]
		if (loopback_bytes > 0) {
   11de8:	f642 1378 	movw	r3, #10616	; 0x2978
   11dec:	f2c1 0300 	movt	r3, #4096	; 0x1000
   11df0:	781b      	ldrb	r3, [r3, #0]
   11df2:	b14b      	cbz	r3, 11e08 <UART1_IRQHandler+0x80>
			loopback_bytes--;
   11df4:	f642 1378 	movw	r3, #10616	; 0x2978
   11df8:	f2c1 0300 	movt	r3, #4096	; 0x1000
   11dfc:	781a      	ldrb	r2, [r3, #0]
   11dfe:	f102 32ff 	add.w	r2, r2, #4294967295
   11e02:	b2d2      	uxtb	r2, r2
   11e04:	701a      	strb	r2, [r3, #0]
   11e06:	e027      	b.n	11e58 <UART1_IRQHandler+0xd0>
   11e08:	f642 0374 	movw	r3, #10356	; 0x2874
   11e0c:	f2c1 0300 	movt	r3, #4096	; 0x1000
   11e10:	681b      	ldr	r3, [r3, #0]
   11e12:	f013 0f01 	tst.w	r3, #1
   11e16:	d115      	bne.n	11e44 <UART1_IRQHandler+0xbc>
   11e18:	f642 0074 	movw	r0, #10356	; 0x2874
   11e1c:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11e20:	f001 fe4e 	bl	13ac0 <__cxa_guard_acquire>
   11e24:	b170      	cbz	r0, 11e44 <UART1_IRQHandler+0xbc>
   11e26:	f642 0078 	movw	r0, #10360	; 0x2878
   11e2a:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11e2e:	f04f 0101 	mov.w	r1, #1
   11e32:	460a      	mov	r2, r1
   11e34:	f7ff fdf8 	bl	11a28 <UART::UART(unsigned char, communication_mode)>
   11e38:	f642 0074 	movw	r0, #10356	; 0x2874
   11e3c:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11e40:	f001 fe5c 	bl	13afc <__cxa_guard_release>
		} else {
			UART::getSlaveUART().in.processByte( UART_ReceiveByte((LPC_UART_TypeDef *)LPC_UART1) );
   11e44:	f04f 0000 	mov.w	r0, #0
   11e48:	f2c4 0001 	movt	r0, #16385	; 0x4001
   11e4c:	f7f2 f9e8 	bl	4220 <UART_ReceiveByte>
   11e50:	4601      	mov	r1, r0
   11e52:	4840      	ldr	r0, [pc, #256]	; (11f54 <UART1_IRQHandler+0x1cc>)
   11e54:	f7fe ffda 	bl	10e0c <InPacket::processByte(unsigned char)>
		}
	}

	// Transmit Holding Empty
	if (tmp == UART_IIR_INTID_THRE){
   11e58:	2c02      	cmp	r4, #2
   11e5a:	d177      	bne.n	11f4c <UART1_IRQHandler+0x1c4>
   11e5c:	f642 0374 	movw	r3, #10356	; 0x2874
   11e60:	f2c1 0300 	movt	r3, #4096	; 0x1000
   11e64:	681b      	ldr	r3, [r3, #0]
   11e66:	f013 0f01 	tst.w	r3, #1
   11e6a:	d115      	bne.n	11e98 <UART1_IRQHandler+0x110>
   11e6c:	f642 0074 	movw	r0, #10356	; 0x2874
   11e70:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11e74:	f001 fe24 	bl	13ac0 <__cxa_guard_acquire>
   11e78:	b170      	cbz	r0, 11e98 <UART1_IRQHandler+0x110>
   11e7a:	f642 0078 	movw	r0, #10360	; 0x2878
   11e7e:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11e82:	f04f 0101 	mov.w	r1, #1
   11e86:	460a      	mov	r2, r1
   11e88:	f7ff fdce 	bl	11a28 <UART::UART(unsigned char, communication_mode)>
   11e8c:	f642 0074 	movw	r0, #10356	; 0x2874
   11e90:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11e94:	f001 fe32 	bl	13afc <__cxa_guard_release>
   11e98:	f642 0378 	movw	r3, #10360	; 0x2878
   11e9c:	f2c1 0300 	movt	r3, #4096	; 0x1000
   11ea0:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
   11ea4:	2b00      	cmp	r3, #0
   11ea6:	d046      	beq.n	11f36 <UART1_IRQHandler+0x1ae>
   11ea8:	f642 0378 	movw	r3, #10360	; 0x2878
   11eac:	f2c1 0300 	movt	r3, #4096	; 0x1000
   11eb0:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
   11eb4:	2b04      	cmp	r3, #4
   11eb6:	d03e      	beq.n	11f36 <UART1_IRQHandler+0x1ae>
		if (UART::getSlaveUART().out.isSending()) {
			loopback_bytes++;
   11eb8:	f642 1378 	movw	r3, #10616	; 0x2978
   11ebc:	f2c1 0300 	movt	r3, #4096	; 0x1000
   11ec0:	781a      	ldrb	r2, [r3, #0]
   11ec2:	f102 0201 	add.w	r2, r2, #1
   11ec6:	b2d2      	uxtb	r2, r2
   11ec8:	701a      	strb	r2, [r3, #0]
   11eca:	f642 0374 	movw	r3, #10356	; 0x2874
   11ece:	f2c1 0300 	movt	r3, #4096	; 0x1000
   11ed2:	681b      	ldr	r3, [r3, #0]
   11ed4:	f013 0f01 	tst.w	r3, #1
   11ed8:	d115      	bne.n	11f06 <UART1_IRQHandler+0x17e>
   11eda:	f642 0074 	movw	r0, #10356	; 0x2874
   11ede:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11ee2:	f001 fded 	bl	13ac0 <__cxa_guard_acquire>
   11ee6:	b170      	cbz	r0, 11f06 <UART1_IRQHandler+0x17e>
   11ee8:	f642 0078 	movw	r0, #10360	; 0x2878
   11eec:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11ef0:	f04f 0101 	mov.w	r1, #1
   11ef4:	460a      	mov	r2, r1
   11ef6:	f7ff fd97 	bl	11a28 <UART::UART(unsigned char, communication_mode)>
   11efa:	f642 0074 	movw	r0, #10356	; 0x2874
   11efe:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11f02:	f001 fdfb 	bl	13afc <__cxa_guard_release>
			UART_SendByte((LPC_UART_TypeDef *)LPC_UART1, UART::getSlaveUART().out.getNextByteToSend());  // NEED to choose which UART
   11f06:	4814      	ldr	r0, [pc, #80]	; (11f58 <UART1_IRQHandler+0x1d0>)
   11f08:	f7fe ffec 	bl	10ee4 <OutPacket::getNextByteToSend()>
   11f0c:	4601      	mov	r1, r0
   11f0e:	f04f 0000 	mov.w	r0, #0
   11f12:	f2c4 0001 	movt	r0, #16385	; 0x4001
   11f16:	f7f2 f949 	bl	41ac <UART_SendByte>
   11f1a:	bd10      	pop	{r4, pc}
   11f1c:	f642 1268 	movw	r2, #10600	; 0x2968
   11f20:	f2c1 0200 	movt	r2, #4096	; 0x1000
   11f24:	7893      	ldrb	r3, [r2, #2]
   11f26:	7810      	ldrb	r0, [r2, #0]
   11f28:	f04f 0101 	mov.w	r1, #1
   11f2c:	fa01 f103 	lsl.w	r1, r1, r3
   11f30:	f7f1 fae0 	bl	34f4 <GPIO_ClearValue>
   11f34:	bd10      	pop	{r4, pc}
		} else {
			_delay_us(10);
   11f36:	f04f 000a 	mov.w	r0, #10
   11f3a:	f7f7 fa79 	bl	9430 <_delay_us>
		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
//		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
	};

	void /*Pin::*/setValue(bool on) const {
		if (is_null)
   11f3e:	f642 1368 	movw	r3, #10600	; 0x2968
   11f42:	f2c1 0300 	movt	r3, #4096	; 0x1000
   11f46:	785b      	ldrb	r3, [r3, #1]
   11f48:	2b00      	cmp	r3, #0
   11f4a:	d0e7      	beq.n	11f1c <UART1_IRQHandler+0x194>
   11f4c:	bd10      	pop	{r4, pc}
   11f4e:	bf00      	nop
   11f50:	0002af27 	.word	0x0002af27
   11f54:	1000287b 	.word	0x1000287b
   11f58:	100028a0 	.word	0x100028a0

00011f5c <CANActivity_IRQHandler>:
	}
}

uint8_t BulkBufOut  [USB_CDC_BUFSIZE];

extern "C" void CANActivity_IRQHandler(void){
   11f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int numBytesRead = USB_ReadEP(CDC_DEP_OUT, &BulkBufOut[0]);
   11f60:	f04f 0002 	mov.w	r0, #2
   11f64:	f642 1128 	movw	r1, #10536	; 0x2928
   11f68:	f2c1 0100 	movt	r1, #4096	; 0x1000
   11f6c:	f7f3 fd4c 	bl	5a08 <USB_ReadEP>
//		xprintf("USB_in" " (%s:%d)\n",_F_,_L_);
	for (int i = 0; i < numBytesRead; i++){
   11f70:	2800      	cmp	r0, #0
   11f72:	dd23      	ble.n	11fbc <CANActivity_IRQHandler+0x60>
   11f74:	4e12      	ldr	r6, [pc, #72]	; (11fc0 <CANActivity_IRQHandler+0x64>)
	}
}

uint8_t BulkBufOut  [USB_CDC_BUFSIZE];

extern "C" void CANActivity_IRQHandler(void){
   11f76:	1835      	adds	r5, r6, r0
#endif

public:
    /// Get a reference to the host UART
    /// \return hostUART instance, which should act as a slave to a computer (or motherboard)
    static UART& getHostUART() {static UART hostUART(0,RS232); return hostUART; }
   11f78:	f641 2414 	movw	r4, #6676	; 0x1a14
   11f7c:	f2c1 0400 	movt	r4, #4096	; 0x1000
   11f80:	f641 2818 	movw	r8, #6680	; 0x1a18
   11f84:	f2c1 0800 	movt	r8, #4096	; 0x1000
	int numBytesRead = USB_ReadEP(CDC_DEP_OUT, &BulkBufOut[0]);
//		xprintf("USB_in" " (%s:%d)\n",_F_,_L_);
	for (int i = 0; i < numBytesRead; i++){
//		xprintf("%x %c\n",BulkBufOut[i],BulkBufOut[i]);
		UART::getHostUART().in.processByte( BulkBufOut[i] );
   11f88:	f108 0703 	add.w	r7, r8, #3
   11f8c:	6823      	ldr	r3, [r4, #0]
   11f8e:	f013 0f01 	tst.w	r3, #1
   11f92:	d10c      	bne.n	11fae <CANActivity_IRQHandler+0x52>
   11f94:	4620      	mov	r0, r4
   11f96:	f001 fd93 	bl	13ac0 <__cxa_guard_acquire>
   11f9a:	b140      	cbz	r0, 11fae <CANActivity_IRQHandler+0x52>
   11f9c:	4640      	mov	r0, r8
   11f9e:	f04f 0100 	mov.w	r1, #0
   11fa2:	460a      	mov	r2, r1
   11fa4:	f7ff fd40 	bl	11a28 <UART::UART(unsigned char, communication_mode)>
   11fa8:	4620      	mov	r0, r4
   11faa:	f001 fda7 	bl	13afc <__cxa_guard_release>
   11fae:	4638      	mov	r0, r7
   11fb0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
   11fb4:	f7fe ff2a 	bl	10e0c <InPacket::processByte(unsigned char)>
uint8_t BulkBufOut  [USB_CDC_BUFSIZE];

extern "C" void CANActivity_IRQHandler(void){
	int numBytesRead = USB_ReadEP(CDC_DEP_OUT, &BulkBufOut[0]);
//		xprintf("USB_in" " (%s:%d)\n",_F_,_L_);
	for (int i = 0; i < numBytesRead; i++){
   11fb8:	42ae      	cmp	r6, r5
   11fba:	d1e7      	bne.n	11f8c <CANActivity_IRQHandler+0x30>
   11fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11fc0:	10002927 	.word	0x10002927

00011fc4 <_GLOBAL__sub_I_loopback_bytes>:
void UART::reset() {
	if (mode_ == RS485) {
		loopback_bytes = 0;
		listen();
	}
}
   11fc4:	b530      	push	{r4, r5, lr}
   11fc6:	b083      	sub	sp, #12
	void setPinOn(uint8_t pin_index) const;
	void setPinOff(uint8_t pin_index) const;
};


const LPCPort Port0(0);
   11fc8:	f642 00d0 	movw	r0, #10448	; 0x28d0
   11fcc:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11fd0:	f04f 0100 	mov.w	r1, #0
   11fd4:	f7fe fe70 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port1(1);
   11fd8:	f642 00d4 	movw	r0, #10452	; 0x28d4
   11fdc:	f2c1 0000 	movt	r0, #4096	; 0x1000
   11fe0:	f04f 0101 	mov.w	r1, #1
   11fe4:	f7fe fe68 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port2(2);
   11fe8:	f642 04d8 	movw	r4, #10456	; 0x28d8
   11fec:	f2c1 0400 	movt	r4, #4096	; 0x1000
   11ff0:	4620      	mov	r0, r4
   11ff2:	f04f 0102 	mov.w	r1, #2
   11ff6:	f7fe fe5f 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port3(3);
   11ffa:	f642 00dc 	movw	r0, #10460	; 0x28dc
   11ffe:	f2c1 0000 	movt	r0, #4096	; 0x1000
   12002:	f04f 0103 	mov.w	r1, #3
   12006:	f7fe fe57 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
const LPCPort Port4(4);
   1200a:	f642 1020 	movw	r0, #10528	; 0x2920
   1200e:	f2c1 0000 	movt	r0, #4096	; 0x1000
   12012:	f04f 0104 	mov.w	r1, #4
   12016:	f7fe fe4f 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>

const LPCPort NullPort(0xff);
   1201a:	f642 1524 	movw	r5, #10532	; 0x2924
   1201e:	f2c1 0500 	movt	r5, #4096	; 0x1000
   12022:	4628      	mov	r0, r5
   12024:	f04f 01ff 	mov.w	r1, #255	; 0xff
   12028:	f7fe fe46 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
	};
	// currently not used:
	//const uint8_t getPinIndex() const { return pin_index; }
};

static const Pin NullPin(NullPort, 0);
   1202c:	f642 00c8 	movw	r0, #10440	; 0x28c8
   12030:	f2c1 0000 	movt	r0, #4096	; 0x1000
   12034:	4629      	mov	r1, r5
   12036:	f04f 0200 	mov.w	r2, #0
   1203a:	f7ff f84f 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
#if ASSERT_LINE_FIX
#include "ExtruderBoard.hh"
#endif

// Avoid repeatedly creating temp objects
const Pin TX_Enable = TX_ENABLE_PIN;
   1203e:	a801      	add	r0, sp, #4
   12040:	f04f 01ff 	mov.w	r1, #255	; 0xff
   12044:	f7fe fe38 	bl	10cb8 <LPCPort::LPCPort(unsigned char)>
   12048:	f642 1068 	movw	r0, #10600	; 0x2968
   1204c:	f2c1 0000 	movt	r0, #4096	; 0x1000
   12050:	a901      	add	r1, sp, #4
   12052:	f04f 02ff 	mov.w	r2, #255	; 0xff
   12056:	f7ff f841 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
const Pin RX_Enable = RX_ENABLE_PIN;
   1205a:	f642 1070 	movw	r0, #10608	; 0x2970
   1205e:	f2c1 0000 	movt	r0, #4096	; 0x1000
   12062:	4621      	mov	r1, r4
   12064:	f04f 0208 	mov.w	r2, #8
   12068:	f7ff f838 	bl	110dc <Pin::Pin(LPCPort const&, unsigned char)>
void UART::reset() {
	if (mode_ == RS485) {
		loopback_bytes = 0;
		listen();
	}
}
   1206c:	b003      	add	sp, #12
   1206e:	bd30      	pop	{r4, r5, pc}

00012070 <__aeabi_drsub>:
   12070:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   12074:	e002      	b.n	1207c <__adddf3>
   12076:	bf00      	nop

00012078 <__aeabi_dsub>:
   12078:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001207c <__adddf3>:
   1207c:	b530      	push	{r4, r5, lr}
   1207e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   12082:	ea4f 0543 	mov.w	r5, r3, lsl #1
   12086:	ea94 0f05 	teq	r4, r5
   1208a:	bf08      	it	eq
   1208c:	ea90 0f02 	teqeq	r0, r2
   12090:	bf1f      	itttt	ne
   12092:	ea54 0c00 	orrsne.w	ip, r4, r0
   12096:	ea55 0c02 	orrsne.w	ip, r5, r2
   1209a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1209e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   120a2:	f000 80e2 	beq.w	1226a <__adddf3+0x1ee>
   120a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   120aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   120ae:	bfb8      	it	lt
   120b0:	426d      	neglt	r5, r5
   120b2:	dd0c      	ble.n	120ce <__adddf3+0x52>
   120b4:	442c      	add	r4, r5
   120b6:	ea80 0202 	eor.w	r2, r0, r2
   120ba:	ea81 0303 	eor.w	r3, r1, r3
   120be:	ea82 0000 	eor.w	r0, r2, r0
   120c2:	ea83 0101 	eor.w	r1, r3, r1
   120c6:	ea80 0202 	eor.w	r2, r0, r2
   120ca:	ea81 0303 	eor.w	r3, r1, r3
   120ce:	2d36      	cmp	r5, #54	; 0x36
   120d0:	bf88      	it	hi
   120d2:	bd30      	pophi	{r4, r5, pc}
   120d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   120d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   120dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   120e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   120e4:	d002      	beq.n	120ec <__adddf3+0x70>
   120e6:	4240      	negs	r0, r0
   120e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   120ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   120f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   120f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   120f8:	d002      	beq.n	12100 <__adddf3+0x84>
   120fa:	4252      	negs	r2, r2
   120fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   12100:	ea94 0f05 	teq	r4, r5
   12104:	f000 80a7 	beq.w	12256 <__adddf3+0x1da>
   12108:	f1a4 0401 	sub.w	r4, r4, #1
   1210c:	f1d5 0e20 	rsbs	lr, r5, #32
   12110:	db0d      	blt.n	1212e <__adddf3+0xb2>
   12112:	fa02 fc0e 	lsl.w	ip, r2, lr
   12116:	fa22 f205 	lsr.w	r2, r2, r5
   1211a:	1880      	adds	r0, r0, r2
   1211c:	f141 0100 	adc.w	r1, r1, #0
   12120:	fa03 f20e 	lsl.w	r2, r3, lr
   12124:	1880      	adds	r0, r0, r2
   12126:	fa43 f305 	asr.w	r3, r3, r5
   1212a:	4159      	adcs	r1, r3
   1212c:	e00e      	b.n	1214c <__adddf3+0xd0>
   1212e:	f1a5 0520 	sub.w	r5, r5, #32
   12132:	f10e 0e20 	add.w	lr, lr, #32
   12136:	2a01      	cmp	r2, #1
   12138:	fa03 fc0e 	lsl.w	ip, r3, lr
   1213c:	bf28      	it	cs
   1213e:	f04c 0c02 	orrcs.w	ip, ip, #2
   12142:	fa43 f305 	asr.w	r3, r3, r5
   12146:	18c0      	adds	r0, r0, r3
   12148:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1214c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   12150:	d507      	bpl.n	12162 <__adddf3+0xe6>
   12152:	f04f 0e00 	mov.w	lr, #0
   12156:	f1dc 0c00 	rsbs	ip, ip, #0
   1215a:	eb7e 0000 	sbcs.w	r0, lr, r0
   1215e:	eb6e 0101 	sbc.w	r1, lr, r1
   12162:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   12166:	d31b      	bcc.n	121a0 <__adddf3+0x124>
   12168:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1216c:	d30c      	bcc.n	12188 <__adddf3+0x10c>
   1216e:	0849      	lsrs	r1, r1, #1
   12170:	ea5f 0030 	movs.w	r0, r0, rrx
   12174:	ea4f 0c3c 	mov.w	ip, ip, rrx
   12178:	f104 0401 	add.w	r4, r4, #1
   1217c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   12180:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   12184:	f080 809a 	bcs.w	122bc <__adddf3+0x240>
   12188:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1218c:	bf08      	it	eq
   1218e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   12192:	f150 0000 	adcs.w	r0, r0, #0
   12196:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1219a:	ea41 0105 	orr.w	r1, r1, r5
   1219e:	bd30      	pop	{r4, r5, pc}
   121a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   121a4:	4140      	adcs	r0, r0
   121a6:	eb41 0101 	adc.w	r1, r1, r1
   121aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   121ae:	f1a4 0401 	sub.w	r4, r4, #1
   121b2:	d1e9      	bne.n	12188 <__adddf3+0x10c>
   121b4:	f091 0f00 	teq	r1, #0
   121b8:	bf04      	itt	eq
   121ba:	4601      	moveq	r1, r0
   121bc:	2000      	moveq	r0, #0
   121be:	fab1 f381 	clz	r3, r1
   121c2:	bf08      	it	eq
   121c4:	3320      	addeq	r3, #32
   121c6:	f1a3 030b 	sub.w	r3, r3, #11
   121ca:	f1b3 0220 	subs.w	r2, r3, #32
   121ce:	da0c      	bge.n	121ea <__adddf3+0x16e>
   121d0:	320c      	adds	r2, #12
   121d2:	dd08      	ble.n	121e6 <__adddf3+0x16a>
   121d4:	f102 0c14 	add.w	ip, r2, #20
   121d8:	f1c2 020c 	rsb	r2, r2, #12
   121dc:	fa01 f00c 	lsl.w	r0, r1, ip
   121e0:	fa21 f102 	lsr.w	r1, r1, r2
   121e4:	e00c      	b.n	12200 <__adddf3+0x184>
   121e6:	f102 0214 	add.w	r2, r2, #20
   121ea:	bfd8      	it	le
   121ec:	f1c2 0c20 	rsble	ip, r2, #32
   121f0:	fa01 f102 	lsl.w	r1, r1, r2
   121f4:	fa20 fc0c 	lsr.w	ip, r0, ip
   121f8:	bfdc      	itt	le
   121fa:	ea41 010c 	orrle.w	r1, r1, ip
   121fe:	4090      	lslle	r0, r2
   12200:	1ae4      	subs	r4, r4, r3
   12202:	bfa2      	ittt	ge
   12204:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   12208:	4329      	orrge	r1, r5
   1220a:	bd30      	popge	{r4, r5, pc}
   1220c:	ea6f 0404 	mvn.w	r4, r4
   12210:	3c1f      	subs	r4, #31
   12212:	da1c      	bge.n	1224e <__adddf3+0x1d2>
   12214:	340c      	adds	r4, #12
   12216:	dc0e      	bgt.n	12236 <__adddf3+0x1ba>
   12218:	f104 0414 	add.w	r4, r4, #20
   1221c:	f1c4 0220 	rsb	r2, r4, #32
   12220:	fa20 f004 	lsr.w	r0, r0, r4
   12224:	fa01 f302 	lsl.w	r3, r1, r2
   12228:	ea40 0003 	orr.w	r0, r0, r3
   1222c:	fa21 f304 	lsr.w	r3, r1, r4
   12230:	ea45 0103 	orr.w	r1, r5, r3
   12234:	bd30      	pop	{r4, r5, pc}
   12236:	f1c4 040c 	rsb	r4, r4, #12
   1223a:	f1c4 0220 	rsb	r2, r4, #32
   1223e:	fa20 f002 	lsr.w	r0, r0, r2
   12242:	fa01 f304 	lsl.w	r3, r1, r4
   12246:	ea40 0003 	orr.w	r0, r0, r3
   1224a:	4629      	mov	r1, r5
   1224c:	bd30      	pop	{r4, r5, pc}
   1224e:	fa21 f004 	lsr.w	r0, r1, r4
   12252:	4629      	mov	r1, r5
   12254:	bd30      	pop	{r4, r5, pc}
   12256:	f094 0f00 	teq	r4, #0
   1225a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1225e:	bf06      	itte	eq
   12260:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   12264:	3401      	addeq	r4, #1
   12266:	3d01      	subne	r5, #1
   12268:	e74e      	b.n	12108 <__adddf3+0x8c>
   1226a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1226e:	bf18      	it	ne
   12270:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   12274:	d029      	beq.n	122ca <__adddf3+0x24e>
   12276:	ea94 0f05 	teq	r4, r5
   1227a:	bf08      	it	eq
   1227c:	ea90 0f02 	teqeq	r0, r2
   12280:	d005      	beq.n	1228e <__adddf3+0x212>
   12282:	ea54 0c00 	orrs.w	ip, r4, r0
   12286:	bf04      	itt	eq
   12288:	4619      	moveq	r1, r3
   1228a:	4610      	moveq	r0, r2
   1228c:	bd30      	pop	{r4, r5, pc}
   1228e:	ea91 0f03 	teq	r1, r3
   12292:	bf1e      	ittt	ne
   12294:	2100      	movne	r1, #0
   12296:	2000      	movne	r0, #0
   12298:	bd30      	popne	{r4, r5, pc}
   1229a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1229e:	d105      	bne.n	122ac <__adddf3+0x230>
   122a0:	0040      	lsls	r0, r0, #1
   122a2:	4149      	adcs	r1, r1
   122a4:	bf28      	it	cs
   122a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   122aa:	bd30      	pop	{r4, r5, pc}
   122ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   122b0:	bf3c      	itt	cc
   122b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   122b6:	bd30      	popcc	{r4, r5, pc}
   122b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   122bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   122c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   122c4:	f04f 0000 	mov.w	r0, #0
   122c8:	bd30      	pop	{r4, r5, pc}
   122ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   122ce:	bf1a      	itte	ne
   122d0:	4619      	movne	r1, r3
   122d2:	4610      	movne	r0, r2
   122d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   122d8:	bf1c      	itt	ne
   122da:	460b      	movne	r3, r1
   122dc:	4602      	movne	r2, r0
   122de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   122e2:	bf06      	itte	eq
   122e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   122e8:	ea91 0f03 	teqeq	r1, r3
   122ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   122f0:	bd30      	pop	{r4, r5, pc}
   122f2:	bf00      	nop

000122f4 <__aeabi_ui2d>:
   122f4:	f090 0f00 	teq	r0, #0
   122f8:	bf04      	itt	eq
   122fa:	2100      	moveq	r1, #0
   122fc:	4770      	bxeq	lr
   122fe:	b530      	push	{r4, r5, lr}
   12300:	f44f 6480 	mov.w	r4, #1024	; 0x400
   12304:	f104 0432 	add.w	r4, r4, #50	; 0x32
   12308:	f04f 0500 	mov.w	r5, #0
   1230c:	f04f 0100 	mov.w	r1, #0
   12310:	e750      	b.n	121b4 <__adddf3+0x138>
   12312:	bf00      	nop

00012314 <__aeabi_i2d>:
   12314:	f090 0f00 	teq	r0, #0
   12318:	bf04      	itt	eq
   1231a:	2100      	moveq	r1, #0
   1231c:	4770      	bxeq	lr
   1231e:	b530      	push	{r4, r5, lr}
   12320:	f44f 6480 	mov.w	r4, #1024	; 0x400
   12324:	f104 0432 	add.w	r4, r4, #50	; 0x32
   12328:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1232c:	bf48      	it	mi
   1232e:	4240      	negmi	r0, r0
   12330:	f04f 0100 	mov.w	r1, #0
   12334:	e73e      	b.n	121b4 <__adddf3+0x138>
   12336:	bf00      	nop

00012338 <__aeabi_f2d>:
   12338:	0042      	lsls	r2, r0, #1
   1233a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1233e:	ea4f 0131 	mov.w	r1, r1, rrx
   12342:	ea4f 7002 	mov.w	r0, r2, lsl #28
   12346:	bf1f      	itttt	ne
   12348:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1234c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   12350:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   12354:	4770      	bxne	lr
   12356:	f092 0f00 	teq	r2, #0
   1235a:	bf14      	ite	ne
   1235c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   12360:	4770      	bxeq	lr
   12362:	b530      	push	{r4, r5, lr}
   12364:	f44f 7460 	mov.w	r4, #896	; 0x380
   12368:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1236c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   12370:	e720      	b.n	121b4 <__adddf3+0x138>
   12372:	bf00      	nop

00012374 <__aeabi_ul2d>:
   12374:	ea50 0201 	orrs.w	r2, r0, r1
   12378:	bf08      	it	eq
   1237a:	4770      	bxeq	lr
   1237c:	b530      	push	{r4, r5, lr}
   1237e:	f04f 0500 	mov.w	r5, #0
   12382:	e00a      	b.n	1239a <__aeabi_l2d+0x16>

00012384 <__aeabi_l2d>:
   12384:	ea50 0201 	orrs.w	r2, r0, r1
   12388:	bf08      	it	eq
   1238a:	4770      	bxeq	lr
   1238c:	b530      	push	{r4, r5, lr}
   1238e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   12392:	d502      	bpl.n	1239a <__aeabi_l2d+0x16>
   12394:	4240      	negs	r0, r0
   12396:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1239a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1239e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   123a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   123a6:	f43f aedc 	beq.w	12162 <__adddf3+0xe6>
   123aa:	f04f 0203 	mov.w	r2, #3
   123ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   123b2:	bf18      	it	ne
   123b4:	3203      	addne	r2, #3
   123b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   123ba:	bf18      	it	ne
   123bc:	3203      	addne	r2, #3
   123be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   123c2:	f1c2 0320 	rsb	r3, r2, #32
   123c6:	fa00 fc03 	lsl.w	ip, r0, r3
   123ca:	fa20 f002 	lsr.w	r0, r0, r2
   123ce:	fa01 fe03 	lsl.w	lr, r1, r3
   123d2:	ea40 000e 	orr.w	r0, r0, lr
   123d6:	fa21 f102 	lsr.w	r1, r1, r2
   123da:	4414      	add	r4, r2
   123dc:	e6c1      	b.n	12162 <__adddf3+0xe6>
   123de:	bf00      	nop

000123e0 <__aeabi_dmul>:
   123e0:	b570      	push	{r4, r5, r6, lr}
   123e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   123e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   123ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   123ee:	bf1d      	ittte	ne
   123f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   123f4:	ea94 0f0c 	teqne	r4, ip
   123f8:	ea95 0f0c 	teqne	r5, ip
   123fc:	f000 f8de 	bleq	125bc <__aeabi_dmul+0x1dc>
   12400:	442c      	add	r4, r5
   12402:	ea81 0603 	eor.w	r6, r1, r3
   12406:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1240a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1240e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   12412:	bf18      	it	ne
   12414:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   12418:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1241c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   12420:	d038      	beq.n	12494 <__aeabi_dmul+0xb4>
   12422:	fba0 ce02 	umull	ip, lr, r0, r2
   12426:	f04f 0500 	mov.w	r5, #0
   1242a:	fbe1 e502 	umlal	lr, r5, r1, r2
   1242e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   12432:	fbe0 e503 	umlal	lr, r5, r0, r3
   12436:	f04f 0600 	mov.w	r6, #0
   1243a:	fbe1 5603 	umlal	r5, r6, r1, r3
   1243e:	f09c 0f00 	teq	ip, #0
   12442:	bf18      	it	ne
   12444:	f04e 0e01 	orrne.w	lr, lr, #1
   12448:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1244c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   12450:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   12454:	d204      	bcs.n	12460 <__aeabi_dmul+0x80>
   12456:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1245a:	416d      	adcs	r5, r5
   1245c:	eb46 0606 	adc.w	r6, r6, r6
   12460:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   12464:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   12468:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   1246c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   12470:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   12474:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   12478:	bf88      	it	hi
   1247a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1247e:	d81e      	bhi.n	124be <__aeabi_dmul+0xde>
   12480:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   12484:	bf08      	it	eq
   12486:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1248a:	f150 0000 	adcs.w	r0, r0, #0
   1248e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   12492:	bd70      	pop	{r4, r5, r6, pc}
   12494:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   12498:	ea46 0101 	orr.w	r1, r6, r1
   1249c:	ea40 0002 	orr.w	r0, r0, r2
   124a0:	ea81 0103 	eor.w	r1, r1, r3
   124a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   124a8:	bfc2      	ittt	gt
   124aa:	ebd4 050c 	rsbsgt	r5, r4, ip
   124ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   124b2:	bd70      	popgt	{r4, r5, r6, pc}
   124b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   124b8:	f04f 0e00 	mov.w	lr, #0
   124bc:	3c01      	subs	r4, #1
   124be:	f300 80ab 	bgt.w	12618 <__aeabi_dmul+0x238>
   124c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   124c6:	bfde      	ittt	le
   124c8:	2000      	movle	r0, #0
   124ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   124ce:	bd70      	pople	{r4, r5, r6, pc}
   124d0:	f1c4 0400 	rsb	r4, r4, #0
   124d4:	3c20      	subs	r4, #32
   124d6:	da35      	bge.n	12544 <__aeabi_dmul+0x164>
   124d8:	340c      	adds	r4, #12
   124da:	dc1b      	bgt.n	12514 <__aeabi_dmul+0x134>
   124dc:	f104 0414 	add.w	r4, r4, #20
   124e0:	f1c4 0520 	rsb	r5, r4, #32
   124e4:	fa00 f305 	lsl.w	r3, r0, r5
   124e8:	fa20 f004 	lsr.w	r0, r0, r4
   124ec:	fa01 f205 	lsl.w	r2, r1, r5
   124f0:	ea40 0002 	orr.w	r0, r0, r2
   124f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   124f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   124fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   12500:	fa21 f604 	lsr.w	r6, r1, r4
   12504:	eb42 0106 	adc.w	r1, r2, r6
   12508:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1250c:	bf08      	it	eq
   1250e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   12512:	bd70      	pop	{r4, r5, r6, pc}
   12514:	f1c4 040c 	rsb	r4, r4, #12
   12518:	f1c4 0520 	rsb	r5, r4, #32
   1251c:	fa00 f304 	lsl.w	r3, r0, r4
   12520:	fa20 f005 	lsr.w	r0, r0, r5
   12524:	fa01 f204 	lsl.w	r2, r1, r4
   12528:	ea40 0002 	orr.w	r0, r0, r2
   1252c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   12530:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   12534:	f141 0100 	adc.w	r1, r1, #0
   12538:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1253c:	bf08      	it	eq
   1253e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   12542:	bd70      	pop	{r4, r5, r6, pc}
   12544:	f1c4 0520 	rsb	r5, r4, #32
   12548:	fa00 f205 	lsl.w	r2, r0, r5
   1254c:	ea4e 0e02 	orr.w	lr, lr, r2
   12550:	fa20 f304 	lsr.w	r3, r0, r4
   12554:	fa01 f205 	lsl.w	r2, r1, r5
   12558:	ea43 0302 	orr.w	r3, r3, r2
   1255c:	fa21 f004 	lsr.w	r0, r1, r4
   12560:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   12564:	fa21 f204 	lsr.w	r2, r1, r4
   12568:	ea20 0002 	bic.w	r0, r0, r2
   1256c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   12570:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   12574:	bf08      	it	eq
   12576:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1257a:	bd70      	pop	{r4, r5, r6, pc}
   1257c:	f094 0f00 	teq	r4, #0
   12580:	d10f      	bne.n	125a2 <__aeabi_dmul+0x1c2>
   12582:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   12586:	0040      	lsls	r0, r0, #1
   12588:	eb41 0101 	adc.w	r1, r1, r1
   1258c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   12590:	bf08      	it	eq
   12592:	3c01      	subeq	r4, #1
   12594:	d0f7      	beq.n	12586 <__aeabi_dmul+0x1a6>
   12596:	ea41 0106 	orr.w	r1, r1, r6
   1259a:	f095 0f00 	teq	r5, #0
   1259e:	bf18      	it	ne
   125a0:	4770      	bxne	lr
   125a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   125a6:	0052      	lsls	r2, r2, #1
   125a8:	eb43 0303 	adc.w	r3, r3, r3
   125ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   125b0:	bf08      	it	eq
   125b2:	3d01      	subeq	r5, #1
   125b4:	d0f7      	beq.n	125a6 <__aeabi_dmul+0x1c6>
   125b6:	ea43 0306 	orr.w	r3, r3, r6
   125ba:	4770      	bx	lr
   125bc:	ea94 0f0c 	teq	r4, ip
   125c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   125c4:	bf18      	it	ne
   125c6:	ea95 0f0c 	teqne	r5, ip
   125ca:	d00c      	beq.n	125e6 <__aeabi_dmul+0x206>
   125cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   125d0:	bf18      	it	ne
   125d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   125d6:	d1d1      	bne.n	1257c <__aeabi_dmul+0x19c>
   125d8:	ea81 0103 	eor.w	r1, r1, r3
   125dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   125e0:	f04f 0000 	mov.w	r0, #0
   125e4:	bd70      	pop	{r4, r5, r6, pc}
   125e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   125ea:	bf06      	itte	eq
   125ec:	4610      	moveq	r0, r2
   125ee:	4619      	moveq	r1, r3
   125f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   125f4:	d019      	beq.n	1262a <__aeabi_dmul+0x24a>
   125f6:	ea94 0f0c 	teq	r4, ip
   125fa:	d102      	bne.n	12602 <__aeabi_dmul+0x222>
   125fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   12600:	d113      	bne.n	1262a <__aeabi_dmul+0x24a>
   12602:	ea95 0f0c 	teq	r5, ip
   12606:	d105      	bne.n	12614 <__aeabi_dmul+0x234>
   12608:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   1260c:	bf1c      	itt	ne
   1260e:	4610      	movne	r0, r2
   12610:	4619      	movne	r1, r3
   12612:	d10a      	bne.n	1262a <__aeabi_dmul+0x24a>
   12614:	ea81 0103 	eor.w	r1, r1, r3
   12618:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1261c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   12620:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   12624:	f04f 0000 	mov.w	r0, #0
   12628:	bd70      	pop	{r4, r5, r6, pc}
   1262a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1262e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   12632:	bd70      	pop	{r4, r5, r6, pc}

00012634 <__aeabi_ddiv>:
   12634:	b570      	push	{r4, r5, r6, lr}
   12636:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1263a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1263e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   12642:	bf1d      	ittte	ne
   12644:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   12648:	ea94 0f0c 	teqne	r4, ip
   1264c:	ea95 0f0c 	teqne	r5, ip
   12650:	f000 f8a7 	bleq	127a2 <__aeabi_ddiv+0x16e>
   12654:	eba4 0405 	sub.w	r4, r4, r5
   12658:	ea81 0e03 	eor.w	lr, r1, r3
   1265c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   12660:	ea4f 3101 	mov.w	r1, r1, lsl #12
   12664:	f000 8088 	beq.w	12778 <__aeabi_ddiv+0x144>
   12668:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1266c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   12670:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   12674:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   12678:	ea4f 2202 	mov.w	r2, r2, lsl #8
   1267c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   12680:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   12684:	ea4f 2600 	mov.w	r6, r0, lsl #8
   12688:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   1268c:	429d      	cmp	r5, r3
   1268e:	bf08      	it	eq
   12690:	4296      	cmpeq	r6, r2
   12692:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   12696:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1269a:	d202      	bcs.n	126a2 <__aeabi_ddiv+0x6e>
   1269c:	085b      	lsrs	r3, r3, #1
   1269e:	ea4f 0232 	mov.w	r2, r2, rrx
   126a2:	1ab6      	subs	r6, r6, r2
   126a4:	eb65 0503 	sbc.w	r5, r5, r3
   126a8:	085b      	lsrs	r3, r3, #1
   126aa:	ea4f 0232 	mov.w	r2, r2, rrx
   126ae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   126b2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   126b6:	ebb6 0e02 	subs.w	lr, r6, r2
   126ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   126be:	bf22      	ittt	cs
   126c0:	1ab6      	subcs	r6, r6, r2
   126c2:	4675      	movcs	r5, lr
   126c4:	ea40 000c 	orrcs.w	r0, r0, ip
   126c8:	085b      	lsrs	r3, r3, #1
   126ca:	ea4f 0232 	mov.w	r2, r2, rrx
   126ce:	ebb6 0e02 	subs.w	lr, r6, r2
   126d2:	eb75 0e03 	sbcs.w	lr, r5, r3
   126d6:	bf22      	ittt	cs
   126d8:	1ab6      	subcs	r6, r6, r2
   126da:	4675      	movcs	r5, lr
   126dc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   126e0:	085b      	lsrs	r3, r3, #1
   126e2:	ea4f 0232 	mov.w	r2, r2, rrx
   126e6:	ebb6 0e02 	subs.w	lr, r6, r2
   126ea:	eb75 0e03 	sbcs.w	lr, r5, r3
   126ee:	bf22      	ittt	cs
   126f0:	1ab6      	subcs	r6, r6, r2
   126f2:	4675      	movcs	r5, lr
   126f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   126f8:	085b      	lsrs	r3, r3, #1
   126fa:	ea4f 0232 	mov.w	r2, r2, rrx
   126fe:	ebb6 0e02 	subs.w	lr, r6, r2
   12702:	eb75 0e03 	sbcs.w	lr, r5, r3
   12706:	bf22      	ittt	cs
   12708:	1ab6      	subcs	r6, r6, r2
   1270a:	4675      	movcs	r5, lr
   1270c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   12710:	ea55 0e06 	orrs.w	lr, r5, r6
   12714:	d018      	beq.n	12748 <__aeabi_ddiv+0x114>
   12716:	ea4f 1505 	mov.w	r5, r5, lsl #4
   1271a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1271e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   12722:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   12726:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   1272a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1272e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   12732:	d1c0      	bne.n	126b6 <__aeabi_ddiv+0x82>
   12734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   12738:	d10b      	bne.n	12752 <__aeabi_ddiv+0x11e>
   1273a:	ea41 0100 	orr.w	r1, r1, r0
   1273e:	f04f 0000 	mov.w	r0, #0
   12742:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   12746:	e7b6      	b.n	126b6 <__aeabi_ddiv+0x82>
   12748:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1274c:	bf04      	itt	eq
   1274e:	4301      	orreq	r1, r0
   12750:	2000      	moveq	r0, #0
   12752:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   12756:	bf88      	it	hi
   12758:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1275c:	f63f aeaf 	bhi.w	124be <__aeabi_dmul+0xde>
   12760:	ebb5 0c03 	subs.w	ip, r5, r3
   12764:	bf04      	itt	eq
   12766:	ebb6 0c02 	subseq.w	ip, r6, r2
   1276a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1276e:	f150 0000 	adcs.w	r0, r0, #0
   12772:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   12776:	bd70      	pop	{r4, r5, r6, pc}
   12778:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   1277c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   12780:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   12784:	bfc2      	ittt	gt
   12786:	ebd4 050c 	rsbsgt	r5, r4, ip
   1278a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1278e:	bd70      	popgt	{r4, r5, r6, pc}
   12790:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   12794:	f04f 0e00 	mov.w	lr, #0
   12798:	3c01      	subs	r4, #1
   1279a:	e690      	b.n	124be <__aeabi_dmul+0xde>
   1279c:	ea45 0e06 	orr.w	lr, r5, r6
   127a0:	e68d      	b.n	124be <__aeabi_dmul+0xde>
   127a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   127a6:	ea94 0f0c 	teq	r4, ip
   127aa:	bf08      	it	eq
   127ac:	ea95 0f0c 	teqeq	r5, ip
   127b0:	f43f af3b 	beq.w	1262a <__aeabi_dmul+0x24a>
   127b4:	ea94 0f0c 	teq	r4, ip
   127b8:	d10a      	bne.n	127d0 <__aeabi_ddiv+0x19c>
   127ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   127be:	f47f af34 	bne.w	1262a <__aeabi_dmul+0x24a>
   127c2:	ea95 0f0c 	teq	r5, ip
   127c6:	f47f af25 	bne.w	12614 <__aeabi_dmul+0x234>
   127ca:	4610      	mov	r0, r2
   127cc:	4619      	mov	r1, r3
   127ce:	e72c      	b.n	1262a <__aeabi_dmul+0x24a>
   127d0:	ea95 0f0c 	teq	r5, ip
   127d4:	d106      	bne.n	127e4 <__aeabi_ddiv+0x1b0>
   127d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   127da:	f43f aefd 	beq.w	125d8 <__aeabi_dmul+0x1f8>
   127de:	4610      	mov	r0, r2
   127e0:	4619      	mov	r1, r3
   127e2:	e722      	b.n	1262a <__aeabi_dmul+0x24a>
   127e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   127e8:	bf18      	it	ne
   127ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   127ee:	f47f aec5 	bne.w	1257c <__aeabi_dmul+0x19c>
   127f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   127f6:	f47f af0d 	bne.w	12614 <__aeabi_dmul+0x234>
   127fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   127fe:	f47f aeeb 	bne.w	125d8 <__aeabi_dmul+0x1f8>
   12802:	e712      	b.n	1262a <__aeabi_dmul+0x24a>

00012804 <__aeabi_d2uiz>:
   12804:	004a      	lsls	r2, r1, #1
   12806:	d211      	bcs.n	1282c <__aeabi_d2uiz+0x28>
   12808:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1280c:	d211      	bcs.n	12832 <__aeabi_d2uiz+0x2e>
   1280e:	d50d      	bpl.n	1282c <__aeabi_d2uiz+0x28>
   12810:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   12814:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   12818:	d40e      	bmi.n	12838 <__aeabi_d2uiz+0x34>
   1281a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1281e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   12822:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   12826:	fa23 f002 	lsr.w	r0, r3, r2
   1282a:	4770      	bx	lr
   1282c:	f04f 0000 	mov.w	r0, #0
   12830:	4770      	bx	lr
   12832:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   12836:	d102      	bne.n	1283e <__aeabi_d2uiz+0x3a>
   12838:	f04f 30ff 	mov.w	r0, #4294967295
   1283c:	4770      	bx	lr
   1283e:	f04f 0000 	mov.w	r0, #0
   12842:	4770      	bx	lr

00012844 <__aeabi_d2f>:
   12844:	ea4f 0241 	mov.w	r2, r1, lsl #1
   12848:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   1284c:	bf24      	itt	cs
   1284e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   12852:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   12856:	d90d      	bls.n	12874 <__aeabi_d2f+0x30>
   12858:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1285c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   12860:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   12864:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   12868:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   1286c:	bf08      	it	eq
   1286e:	f020 0001 	biceq.w	r0, r0, #1
   12872:	4770      	bx	lr
   12874:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   12878:	d121      	bne.n	128be <__aeabi_d2f+0x7a>
   1287a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   1287e:	bfbc      	itt	lt
   12880:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   12884:	4770      	bxlt	lr
   12886:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1288a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   1288e:	f1c2 0218 	rsb	r2, r2, #24
   12892:	f1c2 0c20 	rsb	ip, r2, #32
   12896:	fa10 f30c 	lsls.w	r3, r0, ip
   1289a:	fa20 f002 	lsr.w	r0, r0, r2
   1289e:	bf18      	it	ne
   128a0:	f040 0001 	orrne.w	r0, r0, #1
   128a4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   128a8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   128ac:	fa03 fc0c 	lsl.w	ip, r3, ip
   128b0:	ea40 000c 	orr.w	r0, r0, ip
   128b4:	fa23 f302 	lsr.w	r3, r3, r2
   128b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   128bc:	e7cc      	b.n	12858 <__aeabi_d2f+0x14>
   128be:	ea7f 5362 	mvns.w	r3, r2, asr #21
   128c2:	d107      	bne.n	128d4 <__aeabi_d2f+0x90>
   128c4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   128c8:	bf1e      	ittt	ne
   128ca:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   128ce:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   128d2:	4770      	bxne	lr
   128d4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   128d8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   128dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   128e0:	4770      	bx	lr
   128e2:	bf00      	nop

000128e4 <__aeabi_frsub>:
   128e4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   128e8:	e002      	b.n	128f0 <__addsf3>
   128ea:	bf00      	nop

000128ec <__aeabi_fsub>:
   128ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000128f0 <__addsf3>:
   128f0:	0042      	lsls	r2, r0, #1
   128f2:	bf1f      	itttt	ne
   128f4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   128f8:	ea92 0f03 	teqne	r2, r3
   128fc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   12900:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   12904:	d06a      	beq.n	129dc <__addsf3+0xec>
   12906:	ea4f 6212 	mov.w	r2, r2, lsr #24
   1290a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   1290e:	bfc1      	itttt	gt
   12910:	18d2      	addgt	r2, r2, r3
   12912:	4041      	eorgt	r1, r0
   12914:	4048      	eorgt	r0, r1
   12916:	4041      	eorgt	r1, r0
   12918:	bfb8      	it	lt
   1291a:	425b      	neglt	r3, r3
   1291c:	2b19      	cmp	r3, #25
   1291e:	bf88      	it	hi
   12920:	4770      	bxhi	lr
   12922:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   12926:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1292a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1292e:	bf18      	it	ne
   12930:	4240      	negne	r0, r0
   12932:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   12936:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   1293a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1293e:	bf18      	it	ne
   12940:	4249      	negne	r1, r1
   12942:	ea92 0f03 	teq	r2, r3
   12946:	d03f      	beq.n	129c8 <__addsf3+0xd8>
   12948:	f1a2 0201 	sub.w	r2, r2, #1
   1294c:	fa41 fc03 	asr.w	ip, r1, r3
   12950:	eb10 000c 	adds.w	r0, r0, ip
   12954:	f1c3 0320 	rsb	r3, r3, #32
   12958:	fa01 f103 	lsl.w	r1, r1, r3
   1295c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   12960:	d502      	bpl.n	12968 <__addsf3+0x78>
   12962:	4249      	negs	r1, r1
   12964:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   12968:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1296c:	d313      	bcc.n	12996 <__addsf3+0xa6>
   1296e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   12972:	d306      	bcc.n	12982 <__addsf3+0x92>
   12974:	0840      	lsrs	r0, r0, #1
   12976:	ea4f 0131 	mov.w	r1, r1, rrx
   1297a:	f102 0201 	add.w	r2, r2, #1
   1297e:	2afe      	cmp	r2, #254	; 0xfe
   12980:	d251      	bcs.n	12a26 <__addsf3+0x136>
   12982:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   12986:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   1298a:	bf08      	it	eq
   1298c:	f020 0001 	biceq.w	r0, r0, #1
   12990:	ea40 0003 	orr.w	r0, r0, r3
   12994:	4770      	bx	lr
   12996:	0049      	lsls	r1, r1, #1
   12998:	eb40 0000 	adc.w	r0, r0, r0
   1299c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   129a0:	f1a2 0201 	sub.w	r2, r2, #1
   129a4:	d1ed      	bne.n	12982 <__addsf3+0x92>
   129a6:	fab0 fc80 	clz	ip, r0
   129aa:	f1ac 0c08 	sub.w	ip, ip, #8
   129ae:	ebb2 020c 	subs.w	r2, r2, ip
   129b2:	fa00 f00c 	lsl.w	r0, r0, ip
   129b6:	bfaa      	itet	ge
   129b8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   129bc:	4252      	neglt	r2, r2
   129be:	4318      	orrge	r0, r3
   129c0:	bfbc      	itt	lt
   129c2:	40d0      	lsrlt	r0, r2
   129c4:	4318      	orrlt	r0, r3
   129c6:	4770      	bx	lr
   129c8:	f092 0f00 	teq	r2, #0
   129cc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   129d0:	bf06      	itte	eq
   129d2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   129d6:	3201      	addeq	r2, #1
   129d8:	3b01      	subne	r3, #1
   129da:	e7b5      	b.n	12948 <__addsf3+0x58>
   129dc:	ea4f 0341 	mov.w	r3, r1, lsl #1
   129e0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   129e4:	bf18      	it	ne
   129e6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   129ea:	d021      	beq.n	12a30 <__addsf3+0x140>
   129ec:	ea92 0f03 	teq	r2, r3
   129f0:	d004      	beq.n	129fc <__addsf3+0x10c>
   129f2:	f092 0f00 	teq	r2, #0
   129f6:	bf08      	it	eq
   129f8:	4608      	moveq	r0, r1
   129fa:	4770      	bx	lr
   129fc:	ea90 0f01 	teq	r0, r1
   12a00:	bf1c      	itt	ne
   12a02:	2000      	movne	r0, #0
   12a04:	4770      	bxne	lr
   12a06:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   12a0a:	d104      	bne.n	12a16 <__addsf3+0x126>
   12a0c:	0040      	lsls	r0, r0, #1
   12a0e:	bf28      	it	cs
   12a10:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   12a14:	4770      	bx	lr
   12a16:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   12a1a:	bf3c      	itt	cc
   12a1c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   12a20:	4770      	bxcc	lr
   12a22:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   12a26:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   12a2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   12a2e:	4770      	bx	lr
   12a30:	ea7f 6222 	mvns.w	r2, r2, asr #24
   12a34:	bf16      	itet	ne
   12a36:	4608      	movne	r0, r1
   12a38:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   12a3c:	4601      	movne	r1, r0
   12a3e:	0242      	lsls	r2, r0, #9
   12a40:	bf06      	itte	eq
   12a42:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   12a46:	ea90 0f01 	teqeq	r0, r1
   12a4a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   12a4e:	4770      	bx	lr

00012a50 <__aeabi_ui2f>:
   12a50:	f04f 0300 	mov.w	r3, #0
   12a54:	e004      	b.n	12a60 <__aeabi_i2f+0x8>
   12a56:	bf00      	nop

00012a58 <__aeabi_i2f>:
   12a58:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   12a5c:	bf48      	it	mi
   12a5e:	4240      	negmi	r0, r0
   12a60:	ea5f 0c00 	movs.w	ip, r0
   12a64:	bf08      	it	eq
   12a66:	4770      	bxeq	lr
   12a68:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   12a6c:	4601      	mov	r1, r0
   12a6e:	f04f 0000 	mov.w	r0, #0
   12a72:	e01c      	b.n	12aae <__aeabi_l2f+0x2a>

00012a74 <__aeabi_ul2f>:
   12a74:	ea50 0201 	orrs.w	r2, r0, r1
   12a78:	bf08      	it	eq
   12a7a:	4770      	bxeq	lr
   12a7c:	f04f 0300 	mov.w	r3, #0
   12a80:	e00a      	b.n	12a98 <__aeabi_l2f+0x14>
   12a82:	bf00      	nop

00012a84 <__aeabi_l2f>:
   12a84:	ea50 0201 	orrs.w	r2, r0, r1
   12a88:	bf08      	it	eq
   12a8a:	4770      	bxeq	lr
   12a8c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   12a90:	d502      	bpl.n	12a98 <__aeabi_l2f+0x14>
   12a92:	4240      	negs	r0, r0
   12a94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   12a98:	ea5f 0c01 	movs.w	ip, r1
   12a9c:	bf02      	ittt	eq
   12a9e:	4684      	moveq	ip, r0
   12aa0:	4601      	moveq	r1, r0
   12aa2:	2000      	moveq	r0, #0
   12aa4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   12aa8:	bf08      	it	eq
   12aaa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   12aae:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   12ab2:	fabc f28c 	clz	r2, ip
   12ab6:	3a08      	subs	r2, #8
   12ab8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   12abc:	db10      	blt.n	12ae0 <__aeabi_l2f+0x5c>
   12abe:	fa01 fc02 	lsl.w	ip, r1, r2
   12ac2:	4463      	add	r3, ip
   12ac4:	fa00 fc02 	lsl.w	ip, r0, r2
   12ac8:	f1c2 0220 	rsb	r2, r2, #32
   12acc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   12ad0:	fa20 f202 	lsr.w	r2, r0, r2
   12ad4:	eb43 0002 	adc.w	r0, r3, r2
   12ad8:	bf08      	it	eq
   12ada:	f020 0001 	biceq.w	r0, r0, #1
   12ade:	4770      	bx	lr
   12ae0:	f102 0220 	add.w	r2, r2, #32
   12ae4:	fa01 fc02 	lsl.w	ip, r1, r2
   12ae8:	f1c2 0220 	rsb	r2, r2, #32
   12aec:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   12af0:	fa21 f202 	lsr.w	r2, r1, r2
   12af4:	eb43 0002 	adc.w	r0, r3, r2
   12af8:	bf08      	it	eq
   12afa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   12afe:	4770      	bx	lr

00012b00 <__aeabi_fmul>:
   12b00:	f04f 0cff 	mov.w	ip, #255	; 0xff
   12b04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   12b08:	bf1e      	ittt	ne
   12b0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   12b0e:	ea92 0f0c 	teqne	r2, ip
   12b12:	ea93 0f0c 	teqne	r3, ip
   12b16:	d06f      	beq.n	12bf8 <__aeabi_fmul+0xf8>
   12b18:	441a      	add	r2, r3
   12b1a:	ea80 0c01 	eor.w	ip, r0, r1
   12b1e:	0240      	lsls	r0, r0, #9
   12b20:	bf18      	it	ne
   12b22:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   12b26:	d01e      	beq.n	12b66 <__aeabi_fmul+0x66>
   12b28:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   12b2c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   12b30:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   12b34:	fba0 3101 	umull	r3, r1, r0, r1
   12b38:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   12b3c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   12b40:	bf3e      	ittt	cc
   12b42:	0049      	lslcc	r1, r1, #1
   12b44:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   12b48:	005b      	lslcc	r3, r3, #1
   12b4a:	ea40 0001 	orr.w	r0, r0, r1
   12b4e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   12b52:	2afd      	cmp	r2, #253	; 0xfd
   12b54:	d81d      	bhi.n	12b92 <__aeabi_fmul+0x92>
   12b56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   12b5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   12b5e:	bf08      	it	eq
   12b60:	f020 0001 	biceq.w	r0, r0, #1
   12b64:	4770      	bx	lr
   12b66:	f090 0f00 	teq	r0, #0
   12b6a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   12b6e:	bf08      	it	eq
   12b70:	0249      	lsleq	r1, r1, #9
   12b72:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   12b76:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   12b7a:	3a7f      	subs	r2, #127	; 0x7f
   12b7c:	bfc2      	ittt	gt
   12b7e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   12b82:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   12b86:	4770      	bxgt	lr
   12b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   12b8c:	f04f 0300 	mov.w	r3, #0
   12b90:	3a01      	subs	r2, #1
   12b92:	dc5d      	bgt.n	12c50 <__aeabi_fmul+0x150>
   12b94:	f112 0f19 	cmn.w	r2, #25
   12b98:	bfdc      	itt	le
   12b9a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   12b9e:	4770      	bxle	lr
   12ba0:	f1c2 0200 	rsb	r2, r2, #0
   12ba4:	0041      	lsls	r1, r0, #1
   12ba6:	fa21 f102 	lsr.w	r1, r1, r2
   12baa:	f1c2 0220 	rsb	r2, r2, #32
   12bae:	fa00 fc02 	lsl.w	ip, r0, r2
   12bb2:	ea5f 0031 	movs.w	r0, r1, rrx
   12bb6:	f140 0000 	adc.w	r0, r0, #0
   12bba:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   12bbe:	bf08      	it	eq
   12bc0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   12bc4:	4770      	bx	lr
   12bc6:	f092 0f00 	teq	r2, #0
   12bca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   12bce:	bf02      	ittt	eq
   12bd0:	0040      	lsleq	r0, r0, #1
   12bd2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   12bd6:	3a01      	subeq	r2, #1
   12bd8:	d0f9      	beq.n	12bce <__aeabi_fmul+0xce>
   12bda:	ea40 000c 	orr.w	r0, r0, ip
   12bde:	f093 0f00 	teq	r3, #0
   12be2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   12be6:	bf02      	ittt	eq
   12be8:	0049      	lsleq	r1, r1, #1
   12bea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   12bee:	3b01      	subeq	r3, #1
   12bf0:	d0f9      	beq.n	12be6 <__aeabi_fmul+0xe6>
   12bf2:	ea41 010c 	orr.w	r1, r1, ip
   12bf6:	e78f      	b.n	12b18 <__aeabi_fmul+0x18>
   12bf8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   12bfc:	ea92 0f0c 	teq	r2, ip
   12c00:	bf18      	it	ne
   12c02:	ea93 0f0c 	teqne	r3, ip
   12c06:	d00a      	beq.n	12c1e <__aeabi_fmul+0x11e>
   12c08:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   12c0c:	bf18      	it	ne
   12c0e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   12c12:	d1d8      	bne.n	12bc6 <__aeabi_fmul+0xc6>
   12c14:	ea80 0001 	eor.w	r0, r0, r1
   12c18:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   12c1c:	4770      	bx	lr
   12c1e:	f090 0f00 	teq	r0, #0
   12c22:	bf17      	itett	ne
   12c24:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   12c28:	4608      	moveq	r0, r1
   12c2a:	f091 0f00 	teqne	r1, #0
   12c2e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   12c32:	d014      	beq.n	12c5e <__aeabi_fmul+0x15e>
   12c34:	ea92 0f0c 	teq	r2, ip
   12c38:	d101      	bne.n	12c3e <__aeabi_fmul+0x13e>
   12c3a:	0242      	lsls	r2, r0, #9
   12c3c:	d10f      	bne.n	12c5e <__aeabi_fmul+0x15e>
   12c3e:	ea93 0f0c 	teq	r3, ip
   12c42:	d103      	bne.n	12c4c <__aeabi_fmul+0x14c>
   12c44:	024b      	lsls	r3, r1, #9
   12c46:	bf18      	it	ne
   12c48:	4608      	movne	r0, r1
   12c4a:	d108      	bne.n	12c5e <__aeabi_fmul+0x15e>
   12c4c:	ea80 0001 	eor.w	r0, r0, r1
   12c50:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   12c54:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   12c58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   12c5c:	4770      	bx	lr
   12c5e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   12c62:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   12c66:	4770      	bx	lr

00012c68 <__aeabi_fdiv>:
   12c68:	f04f 0cff 	mov.w	ip, #255	; 0xff
   12c6c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   12c70:	bf1e      	ittt	ne
   12c72:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   12c76:	ea92 0f0c 	teqne	r2, ip
   12c7a:	ea93 0f0c 	teqne	r3, ip
   12c7e:	d069      	beq.n	12d54 <__aeabi_fdiv+0xec>
   12c80:	eba2 0203 	sub.w	r2, r2, r3
   12c84:	ea80 0c01 	eor.w	ip, r0, r1
   12c88:	0249      	lsls	r1, r1, #9
   12c8a:	ea4f 2040 	mov.w	r0, r0, lsl #9
   12c8e:	d037      	beq.n	12d00 <__aeabi_fdiv+0x98>
   12c90:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   12c94:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   12c98:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   12c9c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   12ca0:	428b      	cmp	r3, r1
   12ca2:	bf38      	it	cc
   12ca4:	005b      	lslcc	r3, r3, #1
   12ca6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   12caa:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   12cae:	428b      	cmp	r3, r1
   12cb0:	bf24      	itt	cs
   12cb2:	1a5b      	subcs	r3, r3, r1
   12cb4:	ea40 000c 	orrcs.w	r0, r0, ip
   12cb8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   12cbc:	bf24      	itt	cs
   12cbe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   12cc2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   12cc6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   12cca:	bf24      	itt	cs
   12ccc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   12cd0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   12cd4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   12cd8:	bf24      	itt	cs
   12cda:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   12cde:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   12ce2:	011b      	lsls	r3, r3, #4
   12ce4:	bf18      	it	ne
   12ce6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   12cea:	d1e0      	bne.n	12cae <__aeabi_fdiv+0x46>
   12cec:	2afd      	cmp	r2, #253	; 0xfd
   12cee:	f63f af50 	bhi.w	12b92 <__aeabi_fmul+0x92>
   12cf2:	428b      	cmp	r3, r1
   12cf4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   12cf8:	bf08      	it	eq
   12cfa:	f020 0001 	biceq.w	r0, r0, #1
   12cfe:	4770      	bx	lr
   12d00:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   12d04:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   12d08:	327f      	adds	r2, #127	; 0x7f
   12d0a:	bfc2      	ittt	gt
   12d0c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   12d10:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   12d14:	4770      	bxgt	lr
   12d16:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   12d1a:	f04f 0300 	mov.w	r3, #0
   12d1e:	3a01      	subs	r2, #1
   12d20:	e737      	b.n	12b92 <__aeabi_fmul+0x92>
   12d22:	f092 0f00 	teq	r2, #0
   12d26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   12d2a:	bf02      	ittt	eq
   12d2c:	0040      	lsleq	r0, r0, #1
   12d2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   12d32:	3a01      	subeq	r2, #1
   12d34:	d0f9      	beq.n	12d2a <__aeabi_fdiv+0xc2>
   12d36:	ea40 000c 	orr.w	r0, r0, ip
   12d3a:	f093 0f00 	teq	r3, #0
   12d3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   12d42:	bf02      	ittt	eq
   12d44:	0049      	lsleq	r1, r1, #1
   12d46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   12d4a:	3b01      	subeq	r3, #1
   12d4c:	d0f9      	beq.n	12d42 <__aeabi_fdiv+0xda>
   12d4e:	ea41 010c 	orr.w	r1, r1, ip
   12d52:	e795      	b.n	12c80 <__aeabi_fdiv+0x18>
   12d54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   12d58:	ea92 0f0c 	teq	r2, ip
   12d5c:	d108      	bne.n	12d70 <__aeabi_fdiv+0x108>
   12d5e:	0242      	lsls	r2, r0, #9
   12d60:	f47f af7d 	bne.w	12c5e <__aeabi_fmul+0x15e>
   12d64:	ea93 0f0c 	teq	r3, ip
   12d68:	f47f af70 	bne.w	12c4c <__aeabi_fmul+0x14c>
   12d6c:	4608      	mov	r0, r1
   12d6e:	e776      	b.n	12c5e <__aeabi_fmul+0x15e>
   12d70:	ea93 0f0c 	teq	r3, ip
   12d74:	d104      	bne.n	12d80 <__aeabi_fdiv+0x118>
   12d76:	024b      	lsls	r3, r1, #9
   12d78:	f43f af4c 	beq.w	12c14 <__aeabi_fmul+0x114>
   12d7c:	4608      	mov	r0, r1
   12d7e:	e76e      	b.n	12c5e <__aeabi_fmul+0x15e>
   12d80:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   12d84:	bf18      	it	ne
   12d86:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   12d8a:	d1ca      	bne.n	12d22 <__aeabi_fdiv+0xba>
   12d8c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   12d90:	f47f af5c 	bne.w	12c4c <__aeabi_fmul+0x14c>
   12d94:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   12d98:	f47f af3c 	bne.w	12c14 <__aeabi_fmul+0x114>
   12d9c:	e75f      	b.n	12c5e <__aeabi_fmul+0x15e>
   12d9e:	bf00      	nop

00012da0 <__gesf2>:
   12da0:	f04f 3cff 	mov.w	ip, #4294967295
   12da4:	e006      	b.n	12db4 <__cmpsf2+0x4>
   12da6:	bf00      	nop

00012da8 <__lesf2>:
   12da8:	f04f 0c01 	mov.w	ip, #1
   12dac:	e002      	b.n	12db4 <__cmpsf2+0x4>
   12dae:	bf00      	nop

00012db0 <__cmpsf2>:
   12db0:	f04f 0c01 	mov.w	ip, #1
   12db4:	f84d cd04 	str.w	ip, [sp, #-4]!
   12db8:	ea4f 0240 	mov.w	r2, r0, lsl #1
   12dbc:	ea4f 0341 	mov.w	r3, r1, lsl #1
   12dc0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   12dc4:	bf18      	it	ne
   12dc6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   12dca:	d011      	beq.n	12df0 <__cmpsf2+0x40>
   12dcc:	b001      	add	sp, #4
   12dce:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   12dd2:	bf18      	it	ne
   12dd4:	ea90 0f01 	teqne	r0, r1
   12dd8:	bf58      	it	pl
   12dda:	ebb2 0003 	subspl.w	r0, r2, r3
   12dde:	bf88      	it	hi
   12de0:	17c8      	asrhi	r0, r1, #31
   12de2:	bf38      	it	cc
   12de4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   12de8:	bf18      	it	ne
   12dea:	f040 0001 	orrne.w	r0, r0, #1
   12dee:	4770      	bx	lr
   12df0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   12df4:	d102      	bne.n	12dfc <__cmpsf2+0x4c>
   12df6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   12dfa:	d105      	bne.n	12e08 <__cmpsf2+0x58>
   12dfc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   12e00:	d1e4      	bne.n	12dcc <__cmpsf2+0x1c>
   12e02:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   12e06:	d0e1      	beq.n	12dcc <__cmpsf2+0x1c>
   12e08:	f85d 0b04 	ldr.w	r0, [sp], #4
   12e0c:	4770      	bx	lr
   12e0e:	bf00      	nop

00012e10 <__aeabi_cfrcmple>:
   12e10:	4684      	mov	ip, r0
   12e12:	4608      	mov	r0, r1
   12e14:	4661      	mov	r1, ip
   12e16:	e7ff      	b.n	12e18 <__aeabi_cfcmpeq>

00012e18 <__aeabi_cfcmpeq>:
   12e18:	b50f      	push	{r0, r1, r2, r3, lr}
   12e1a:	f7ff ffc9 	bl	12db0 <__cmpsf2>
   12e1e:	2800      	cmp	r0, #0
   12e20:	bf48      	it	mi
   12e22:	f110 0f00 	cmnmi.w	r0, #0
   12e26:	bd0f      	pop	{r0, r1, r2, r3, pc}

00012e28 <__aeabi_fcmpeq>:
   12e28:	f84d ed08 	str.w	lr, [sp, #-8]!
   12e2c:	f7ff fff4 	bl	12e18 <__aeabi_cfcmpeq>
   12e30:	bf0c      	ite	eq
   12e32:	2001      	moveq	r0, #1
   12e34:	2000      	movne	r0, #0
   12e36:	f85d fb08 	ldr.w	pc, [sp], #8
   12e3a:	bf00      	nop

00012e3c <__aeabi_fcmplt>:
   12e3c:	f84d ed08 	str.w	lr, [sp, #-8]!
   12e40:	f7ff ffea 	bl	12e18 <__aeabi_cfcmpeq>
   12e44:	bf34      	ite	cc
   12e46:	2001      	movcc	r0, #1
   12e48:	2000      	movcs	r0, #0
   12e4a:	f85d fb08 	ldr.w	pc, [sp], #8
   12e4e:	bf00      	nop

00012e50 <__aeabi_fcmple>:
   12e50:	f84d ed08 	str.w	lr, [sp, #-8]!
   12e54:	f7ff ffe0 	bl	12e18 <__aeabi_cfcmpeq>
   12e58:	bf94      	ite	ls
   12e5a:	2001      	movls	r0, #1
   12e5c:	2000      	movhi	r0, #0
   12e5e:	f85d fb08 	ldr.w	pc, [sp], #8
   12e62:	bf00      	nop

00012e64 <__aeabi_fcmpge>:
   12e64:	f84d ed08 	str.w	lr, [sp, #-8]!
   12e68:	f7ff ffd2 	bl	12e10 <__aeabi_cfrcmple>
   12e6c:	bf94      	ite	ls
   12e6e:	2001      	movls	r0, #1
   12e70:	2000      	movhi	r0, #0
   12e72:	f85d fb08 	ldr.w	pc, [sp], #8
   12e76:	bf00      	nop

00012e78 <__aeabi_fcmpgt>:
   12e78:	f84d ed08 	str.w	lr, [sp, #-8]!
   12e7c:	f7ff ffc8 	bl	12e10 <__aeabi_cfrcmple>
   12e80:	bf34      	ite	cc
   12e82:	2001      	movcc	r0, #1
   12e84:	2000      	movcs	r0, #0
   12e86:	f85d fb08 	ldr.w	pc, [sp], #8
   12e8a:	bf00      	nop

00012e8c <__aeabi_f2iz>:
   12e8c:	ea4f 0240 	mov.w	r2, r0, lsl #1
   12e90:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   12e94:	d30f      	bcc.n	12eb6 <__aeabi_f2iz+0x2a>
   12e96:	f04f 039e 	mov.w	r3, #158	; 0x9e
   12e9a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   12e9e:	d90d      	bls.n	12ebc <__aeabi_f2iz+0x30>
   12ea0:	ea4f 2300 	mov.w	r3, r0, lsl #8
   12ea4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   12ea8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   12eac:	fa23 f002 	lsr.w	r0, r3, r2
   12eb0:	bf18      	it	ne
   12eb2:	4240      	negne	r0, r0
   12eb4:	4770      	bx	lr
   12eb6:	f04f 0000 	mov.w	r0, #0
   12eba:	4770      	bx	lr
   12ebc:	f112 0f61 	cmn.w	r2, #97	; 0x61
   12ec0:	d101      	bne.n	12ec6 <__aeabi_f2iz+0x3a>
   12ec2:	0242      	lsls	r2, r0, #9
   12ec4:	d105      	bne.n	12ed2 <__aeabi_f2iz+0x46>
   12ec6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   12eca:	bf08      	it	eq
   12ecc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   12ed0:	4770      	bx	lr
   12ed2:	f04f 0000 	mov.w	r0, #0
   12ed6:	4770      	bx	lr

00012ed8 <__aeabi_f2uiz>:
   12ed8:	0042      	lsls	r2, r0, #1
   12eda:	d20e      	bcs.n	12efa <__aeabi_f2uiz+0x22>
   12edc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   12ee0:	d30b      	bcc.n	12efa <__aeabi_f2uiz+0x22>
   12ee2:	f04f 039e 	mov.w	r3, #158	; 0x9e
   12ee6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   12eea:	d409      	bmi.n	12f00 <__aeabi_f2uiz+0x28>
   12eec:	ea4f 2300 	mov.w	r3, r0, lsl #8
   12ef0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   12ef4:	fa23 f002 	lsr.w	r0, r3, r2
   12ef8:	4770      	bx	lr
   12efa:	f04f 0000 	mov.w	r0, #0
   12efe:	4770      	bx	lr
   12f00:	f112 0f61 	cmn.w	r2, #97	; 0x61
   12f04:	d101      	bne.n	12f0a <__aeabi_f2uiz+0x32>
   12f06:	0242      	lsls	r2, r0, #9
   12f08:	d102      	bne.n	12f10 <__aeabi_f2uiz+0x38>
   12f0a:	f04f 30ff 	mov.w	r0, #4294967295
   12f0e:	4770      	bx	lr
   12f10:	f04f 0000 	mov.w	r0, #0
   12f14:	4770      	bx	lr
   12f16:	bf00      	nop

00012f18 <__aeabi_uldivmod>:
   12f18:	b94b      	cbnz	r3, 12f2e <__aeabi_uldivmod+0x16>
   12f1a:	b942      	cbnz	r2, 12f2e <__aeabi_uldivmod+0x16>
   12f1c:	2900      	cmp	r1, #0
   12f1e:	bf08      	it	eq
   12f20:	2800      	cmpeq	r0, #0
   12f22:	d002      	beq.n	12f2a <__aeabi_uldivmod+0x12>
   12f24:	f04f 31ff 	mov.w	r1, #4294967295
   12f28:	4608      	mov	r0, r1
   12f2a:	f000 b839 	b.w	12fa0 <__aeabi_idiv0>
   12f2e:	b082      	sub	sp, #8
   12f30:	46ec      	mov	ip, sp
   12f32:	e92d 5000 	stmdb	sp!, {ip, lr}
   12f36:	f000 f81d 	bl	12f74 <__gnu_uldivmod_helper>
   12f3a:	f8dd e004 	ldr.w	lr, [sp, #4]
   12f3e:	b002      	add	sp, #8
   12f40:	bc0c      	pop	{r2, r3}
   12f42:	4770      	bx	lr

00012f44 <__gnu_ldivmod_helper>:
   12f44:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   12f48:	461e      	mov	r6, r3
   12f4a:	4614      	mov	r4, r2
   12f4c:	4680      	mov	r8, r0
   12f4e:	4689      	mov	r9, r1
   12f50:	f000 f828 	bl	12fa4 <__divdi3>
   12f54:	fba4 2300 	umull	r2, r3, r4, r0
   12f58:	fb04 f401 	mul.w	r4, r4, r1
   12f5c:	fb00 4406 	mla	r4, r0, r6, r4
   12f60:	18e3      	adds	r3, r4, r3
   12f62:	9c06      	ldr	r4, [sp, #24]
   12f64:	ebb8 0202 	subs.w	r2, r8, r2
   12f68:	eb69 0303 	sbc.w	r3, r9, r3
   12f6c:	e9c4 2300 	strd	r2, r3, [r4]
   12f70:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

00012f74 <__gnu_uldivmod_helper>:
   12f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12f76:	4614      	mov	r4, r2
   12f78:	4606      	mov	r6, r0
   12f7a:	460f      	mov	r7, r1
   12f7c:	461d      	mov	r5, r3
   12f7e:	f000 f9c3 	bl	13308 <__udivdi3>
   12f82:	fb00 f505 	mul.w	r5, r0, r5
   12f86:	fba0 2304 	umull	r2, r3, r0, r4
   12f8a:	fb04 5401 	mla	r4, r4, r1, r5
   12f8e:	18e3      	adds	r3, r4, r3
   12f90:	9c06      	ldr	r4, [sp, #24]
   12f92:	1ab2      	subs	r2, r6, r2
   12f94:	eb67 0303 	sbc.w	r3, r7, r3
   12f98:	e9c4 2300 	strd	r2, r3, [r4]
   12f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12f9e:	bf00      	nop

00012fa0 <__aeabi_idiv0>:
   12fa0:	4770      	bx	lr
   12fa2:	bf00      	nop

00012fa4 <__divdi3>:
   12fa4:	2900      	cmp	r1, #0
   12fa6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12faa:	461c      	mov	r4, r3
   12fac:	b085      	sub	sp, #20
   12fae:	bfa8      	it	ge
   12fb0:	f04f 0800 	movge.w	r8, #0
   12fb4:	f2c0 80c9 	blt.w	1314a <__divdi3+0x1a6>
   12fb8:	2c00      	cmp	r4, #0
   12fba:	f2c0 80c0 	blt.w	1313e <__divdi3+0x19a>
   12fbe:	460f      	mov	r7, r1
   12fc0:	4694      	mov	ip, r2
   12fc2:	4614      	mov	r4, r2
   12fc4:	4605      	mov	r5, r0
   12fc6:	460e      	mov	r6, r1
   12fc8:	2b00      	cmp	r3, #0
   12fca:	d14b      	bne.n	13064 <__divdi3+0xc0>
   12fcc:	42ba      	cmp	r2, r7
   12fce:	d96a      	bls.n	130a6 <__divdi3+0x102>
   12fd0:	fab2 f382 	clz	r3, r2
   12fd4:	b153      	cbz	r3, 12fec <__divdi3+0x48>
   12fd6:	f1c3 0120 	rsb	r1, r3, #32
   12fda:	fa07 f603 	lsl.w	r6, r7, r3
   12fde:	fa20 f201 	lsr.w	r2, r0, r1
   12fe2:	fa0c f403 	lsl.w	r4, ip, r3
   12fe6:	4316      	orrs	r6, r2
   12fe8:	fa00 f503 	lsl.w	r5, r0, r3
   12fec:	ea4f 4914 	mov.w	r9, r4, lsr #16
   12ff0:	4630      	mov	r0, r6
   12ff2:	4649      	mov	r1, r9
   12ff4:	b2a7      	uxth	r7, r4
   12ff6:	f000 fb27 	bl	13648 <__aeabi_uidiv>
   12ffa:	4649      	mov	r1, r9
   12ffc:	4682      	mov	sl, r0
   12ffe:	4630      	mov	r0, r6
   13000:	f000 fc50 	bl	138a4 <__aeabi_uidivmod>
   13004:	0c28      	lsrs	r0, r5, #16
   13006:	fb07 f30a 	mul.w	r3, r7, sl
   1300a:	ea40 4b01 	orr.w	fp, r0, r1, lsl #16
   1300e:	455b      	cmp	r3, fp
   13010:	d90b      	bls.n	1302a <__divdi3+0x86>
   13012:	eb1b 0b04 	adds.w	fp, fp, r4
   13016:	f10a 32ff 	add.w	r2, sl, #4294967295
   1301a:	d205      	bcs.n	13028 <__divdi3+0x84>
   1301c:	455b      	cmp	r3, fp
   1301e:	bf84      	itt	hi
   13020:	f1aa 0a02 	subhi.w	sl, sl, #2
   13024:	44a3      	addhi	fp, r4
   13026:	d800      	bhi.n	1302a <__divdi3+0x86>
   13028:	4692      	mov	sl, r2
   1302a:	ebc3 0b0b 	rsb	fp, r3, fp
   1302e:	4649      	mov	r1, r9
   13030:	4658      	mov	r0, fp
   13032:	b2ad      	uxth	r5, r5
   13034:	f000 fb08 	bl	13648 <__aeabi_uidiv>
   13038:	4649      	mov	r1, r9
   1303a:	4606      	mov	r6, r0
   1303c:	4658      	mov	r0, fp
   1303e:	f000 fc31 	bl	138a4 <__aeabi_uidivmod>
   13042:	fb07 f706 	mul.w	r7, r7, r6
   13046:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   1304a:	42af      	cmp	r7, r5
   1304c:	d906      	bls.n	1305c <__divdi3+0xb8>
   1304e:	1e73      	subs	r3, r6, #1
   13050:	192d      	adds	r5, r5, r4
   13052:	d202      	bcs.n	1305a <__divdi3+0xb6>
   13054:	3e02      	subs	r6, #2
   13056:	42af      	cmp	r7, r5
   13058:	d800      	bhi.n	1305c <__divdi3+0xb8>
   1305a:	461e      	mov	r6, r3
   1305c:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
   13060:	2700      	movs	r7, #0
   13062:	e003      	b.n	1306c <__divdi3+0xc8>
   13064:	42bb      	cmp	r3, r7
   13066:	d90c      	bls.n	13082 <__divdi3+0xde>
   13068:	2700      	movs	r7, #0
   1306a:	463e      	mov	r6, r7
   1306c:	4630      	mov	r0, r6
   1306e:	4639      	mov	r1, r7
   13070:	f1b8 0f00 	cmp.w	r8, #0
   13074:	d002      	beq.n	1307c <__divdi3+0xd8>
   13076:	4240      	negs	r0, r0
   13078:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1307c:	b005      	add	sp, #20
   1307e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13082:	fab3 f483 	clz	r4, r3
   13086:	2c00      	cmp	r4, #0
   13088:	f040 80b2 	bne.w	131f0 <__divdi3+0x24c>
   1308c:	42bb      	cmp	r3, r7
   1308e:	bf2c      	ite	cs
   13090:	2700      	movcs	r7, #0
   13092:	2701      	movcc	r7, #1
   13094:	4282      	cmp	r2, r0
   13096:	bf98      	it	ls
   13098:	f047 0701 	orrls.w	r7, r7, #1
   1309c:	2f00      	cmp	r7, #0
   1309e:	d0e4      	beq.n	1306a <__divdi3+0xc6>
   130a0:	4627      	mov	r7, r4
   130a2:	2601      	movs	r6, #1
   130a4:	e7e2      	b.n	1306c <__divdi3+0xc8>
   130a6:	b922      	cbnz	r2, 130b2 <__divdi3+0x10e>
   130a8:	2001      	movs	r0, #1
   130aa:	4611      	mov	r1, r2
   130ac:	f000 facc 	bl	13648 <__aeabi_uidiv>
   130b0:	4604      	mov	r4, r0
   130b2:	fab4 f384 	clz	r3, r4
   130b6:	2b00      	cmp	r3, #0
   130b8:	d14d      	bne.n	13156 <__divdi3+0x1b2>
   130ba:	1b36      	subs	r6, r6, r4
   130bc:	ea4f 4914 	mov.w	r9, r4, lsr #16
   130c0:	2701      	movs	r7, #1
   130c2:	b2a3      	uxth	r3, r4
   130c4:	9302      	str	r3, [sp, #8]
   130c6:	4649      	mov	r1, r9
   130c8:	4630      	mov	r0, r6
   130ca:	f000 fabd 	bl	13648 <__aeabi_uidiv>
   130ce:	4649      	mov	r1, r9
   130d0:	4682      	mov	sl, r0
   130d2:	4630      	mov	r0, r6
   130d4:	f000 fbe6 	bl	138a4 <__aeabi_uidivmod>
   130d8:	9802      	ldr	r0, [sp, #8]
   130da:	0c2a      	lsrs	r2, r5, #16
   130dc:	fb00 f30a 	mul.w	r3, r0, sl
   130e0:	ea42 4b01 	orr.w	fp, r2, r1, lsl #16
   130e4:	455b      	cmp	r3, fp
   130e6:	d90c      	bls.n	13102 <__divdi3+0x15e>
   130e8:	eb1b 0b04 	adds.w	fp, fp, r4
   130ec:	f10a 32ff 	add.w	r2, sl, #4294967295
   130f0:	f080 80ff 	bcs.w	132f2 <__divdi3+0x34e>
   130f4:	455b      	cmp	r3, fp
   130f6:	bf84      	itt	hi
   130f8:	f1aa 0a02 	subhi.w	sl, sl, #2
   130fc:	44a3      	addhi	fp, r4
   130fe:	f240 80f8 	bls.w	132f2 <__divdi3+0x34e>
   13102:	ebc3 0b0b 	rsb	fp, r3, fp
   13106:	4649      	mov	r1, r9
   13108:	4658      	mov	r0, fp
   1310a:	f000 fa9d 	bl	13648 <__aeabi_uidiv>
   1310e:	4649      	mov	r1, r9
   13110:	4606      	mov	r6, r0
   13112:	4658      	mov	r0, fp
   13114:	f000 fbc6 	bl	138a4 <__aeabi_uidivmod>
   13118:	9b02      	ldr	r3, [sp, #8]
   1311a:	fa1f fc85 	uxth.w	ip, r5
   1311e:	fb03 f306 	mul.w	r3, r3, r6
   13122:	ea4c 4501 	orr.w	r5, ip, r1, lsl #16
   13126:	42ab      	cmp	r3, r5
   13128:	d906      	bls.n	13138 <__divdi3+0x194>
   1312a:	1e72      	subs	r2, r6, #1
   1312c:	192d      	adds	r5, r5, r4
   1312e:	d202      	bcs.n	13136 <__divdi3+0x192>
   13130:	3e02      	subs	r6, #2
   13132:	42ab      	cmp	r3, r5
   13134:	d800      	bhi.n	13138 <__divdi3+0x194>
   13136:	4616      	mov	r6, r2
   13138:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
   1313c:	e796      	b.n	1306c <__divdi3+0xc8>
   1313e:	4252      	negs	r2, r2
   13140:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   13144:	ea6f 0808 	mvn.w	r8, r8
   13148:	e739      	b.n	12fbe <__divdi3+0x1a>
   1314a:	4240      	negs	r0, r0
   1314c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   13150:	f04f 38ff 	mov.w	r8, #4294967295
   13154:	e730      	b.n	12fb8 <__divdi3+0x14>
   13156:	409c      	lsls	r4, r3
   13158:	f1c3 0120 	rsb	r1, r3, #32
   1315c:	fa26 f701 	lsr.w	r7, r6, r1
   13160:	fa06 fa03 	lsl.w	sl, r6, r3
   13164:	ea4f 4914 	mov.w	r9, r4, lsr #16
   13168:	fa25 f201 	lsr.w	r2, r5, r1
   1316c:	4638      	mov	r0, r7
   1316e:	4649      	mov	r1, r9
   13170:	ea42 0b0a 	orr.w	fp, r2, sl
   13174:	409d      	lsls	r5, r3
   13176:	f000 fa67 	bl	13648 <__aeabi_uidiv>
   1317a:	4649      	mov	r1, r9
   1317c:	b2a6      	uxth	r6, r4
   1317e:	4682      	mov	sl, r0
   13180:	4638      	mov	r0, r7
   13182:	f000 fb8f 	bl	138a4 <__aeabi_uidivmod>
   13186:	ea4f 471b 	mov.w	r7, fp, lsr #16
   1318a:	fb06 f30a 	mul.w	r3, r6, sl
   1318e:	9602      	str	r6, [sp, #8]
   13190:	ea47 4601 	orr.w	r6, r7, r1, lsl #16
   13194:	42b3      	cmp	r3, r6
   13196:	d90b      	bls.n	131b0 <__divdi3+0x20c>
   13198:	1936      	adds	r6, r6, r4
   1319a:	f10a 32ff 	add.w	r2, sl, #4294967295
   1319e:	f080 80b0 	bcs.w	13302 <__divdi3+0x35e>
   131a2:	42b3      	cmp	r3, r6
   131a4:	bf84      	itt	hi
   131a6:	f1aa 0a02 	subhi.w	sl, sl, #2
   131aa:	1936      	addhi	r6, r6, r4
   131ac:	f240 80a9 	bls.w	13302 <__divdi3+0x35e>
   131b0:	1af6      	subs	r6, r6, r3
   131b2:	4649      	mov	r1, r9
   131b4:	4630      	mov	r0, r6
   131b6:	f000 fa47 	bl	13648 <__aeabi_uidiv>
   131ba:	4649      	mov	r1, r9
   131bc:	4607      	mov	r7, r0
   131be:	4630      	mov	r0, r6
   131c0:	f000 fb70 	bl	138a4 <__aeabi_uidivmod>
   131c4:	9b02      	ldr	r3, [sp, #8]
   131c6:	fa1f f08b 	uxth.w	r0, fp
   131ca:	fb03 f307 	mul.w	r3, r3, r7
   131ce:	ea40 4601 	orr.w	r6, r0, r1, lsl #16
   131d2:	42b3      	cmp	r3, r6
   131d4:	d908      	bls.n	131e8 <__divdi3+0x244>
   131d6:	1e7a      	subs	r2, r7, #1
   131d8:	1936      	adds	r6, r6, r4
   131da:	f080 808c 	bcs.w	132f6 <__divdi3+0x352>
   131de:	42b3      	cmp	r3, r6
   131e0:	f240 8089 	bls.w	132f6 <__divdi3+0x352>
   131e4:	3f02      	subs	r7, #2
   131e6:	1936      	adds	r6, r6, r4
   131e8:	1af6      	subs	r6, r6, r3
   131ea:	ea47 470a 	orr.w	r7, r7, sl, lsl #16
   131ee:	e76a      	b.n	130c6 <__divdi3+0x122>
   131f0:	f1c4 0b20 	rsb	fp, r4, #32
   131f4:	fa03 f904 	lsl.w	r9, r3, r4
   131f8:	fa22 f30b 	lsr.w	r3, r2, fp
   131fc:	fa27 fa0b 	lsr.w	sl, r7, fp
   13200:	ea43 0909 	orr.w	r9, r3, r9
   13204:	fa20 f10b 	lsr.w	r1, r0, fp
   13208:	fa07 f604 	lsl.w	r6, r7, r4
   1320c:	4650      	mov	r0, sl
   1320e:	ea4f 4b19 	mov.w	fp, r9, lsr #16
   13212:	ea41 0706 	orr.w	r7, r1, r6
   13216:	4659      	mov	r1, fp
   13218:	fa02 fe04 	lsl.w	lr, r2, r4
   1321c:	9703      	str	r7, [sp, #12]
   1321e:	f8cd e008 	str.w	lr, [sp, #8]
   13222:	f000 fa11 	bl	13648 <__aeabi_uidiv>
   13226:	4659      	mov	r1, fp
   13228:	4607      	mov	r7, r0
   1322a:	4650      	mov	r0, sl
   1322c:	f000 fb3a 	bl	138a4 <__aeabi_uidivmod>
   13230:	9a03      	ldr	r2, [sp, #12]
   13232:	fa1f f389 	uxth.w	r3, r9
   13236:	0c16      	lsrs	r6, r2, #16
   13238:	fb03 f207 	mul.w	r2, r3, r7
   1323c:	ea46 4a01 	orr.w	sl, r6, r1, lsl #16
   13240:	4552      	cmp	r2, sl
   13242:	d907      	bls.n	13254 <__divdi3+0x2b0>
   13244:	1e79      	subs	r1, r7, #1
   13246:	eb1a 0a09 	adds.w	sl, sl, r9
   1324a:	d258      	bcs.n	132fe <__divdi3+0x35a>
   1324c:	4552      	cmp	r2, sl
   1324e:	d956      	bls.n	132fe <__divdi3+0x35a>
   13250:	3f02      	subs	r7, #2
   13252:	44ca      	add	sl, r9
   13254:	ebc2 0a0a 	rsb	sl, r2, sl
   13258:	4659      	mov	r1, fp
   1325a:	4650      	mov	r0, sl
   1325c:	9301      	str	r3, [sp, #4]
   1325e:	f000 f9f3 	bl	13648 <__aeabi_uidiv>
   13262:	4659      	mov	r1, fp
   13264:	4606      	mov	r6, r0
   13266:	4650      	mov	r0, sl
   13268:	f000 fb1c 	bl	138a4 <__aeabi_uidivmod>
   1326c:	9b01      	ldr	r3, [sp, #4]
   1326e:	9a03      	ldr	r2, [sp, #12]
   13270:	fb03 f306 	mul.w	r3, r3, r6
   13274:	b290      	uxth	r0, r2
   13276:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
   1327a:	4293      	cmp	r3, r2
   1327c:	d907      	bls.n	1328e <__divdi3+0x2ea>
   1327e:	1e71      	subs	r1, r6, #1
   13280:	eb12 0209 	adds.w	r2, r2, r9
   13284:	d239      	bcs.n	132fa <__divdi3+0x356>
   13286:	4293      	cmp	r3, r2
   13288:	d937      	bls.n	132fa <__divdi3+0x356>
   1328a:	3e02      	subs	r6, #2
   1328c:	444a      	add	r2, r9
   1328e:	9802      	ldr	r0, [sp, #8]
   13290:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
   13294:	1ad2      	subs	r2, r2, r3
   13296:	b2b3      	uxth	r3, r6
   13298:	0c37      	lsrs	r7, r6, #16
   1329a:	fa1f fe80 	uxth.w	lr, r0
   1329e:	ea4f 4c10 	mov.w	ip, r0, lsr #16
   132a2:	fb0e f903 	mul.w	r9, lr, r3
   132a6:	fb0e f007 	mul.w	r0, lr, r7
   132aa:	fb0c 0103 	mla	r1, ip, r3, r0
   132ae:	fb0c fe07 	mul.w	lr, ip, r7
   132b2:	eb01 4119 	add.w	r1, r1, r9, lsr #16
   132b6:	4288      	cmp	r0, r1
   132b8:	bf88      	it	hi
   132ba:	f50e 3e80 	addhi.w	lr, lr, #65536	; 0x10000
   132be:	eb0e 4c11 	add.w	ip, lr, r1, lsr #16
   132c2:	4562      	cmp	r2, ip
   132c4:	d312      	bcc.n	132ec <__divdi3+0x348>
   132c6:	ea4f 4101 	mov.w	r1, r1, lsl #16
   132ca:	fa1f f989 	uxth.w	r9, r9
   132ce:	bf14      	ite	ne
   132d0:	2700      	movne	r7, #0
   132d2:	2701      	moveq	r7, #1
   132d4:	fa05 f404 	lsl.w	r4, r5, r4
   132d8:	eb01 0209 	add.w	r2, r1, r9
   132dc:	4294      	cmp	r4, r2
   132de:	bf2c      	ite	cs
   132e0:	2700      	movcs	r7, #0
   132e2:	f007 0701 	andcc.w	r7, r7, #1
   132e6:	2f00      	cmp	r7, #0
   132e8:	f43f aec0 	beq.w	1306c <__divdi3+0xc8>
   132ec:	3e01      	subs	r6, #1
   132ee:	2700      	movs	r7, #0
   132f0:	e6bc      	b.n	1306c <__divdi3+0xc8>
   132f2:	4692      	mov	sl, r2
   132f4:	e705      	b.n	13102 <__divdi3+0x15e>
   132f6:	4617      	mov	r7, r2
   132f8:	e776      	b.n	131e8 <__divdi3+0x244>
   132fa:	460e      	mov	r6, r1
   132fc:	e7c7      	b.n	1328e <__divdi3+0x2ea>
   132fe:	460f      	mov	r7, r1
   13300:	e7a8      	b.n	13254 <__divdi3+0x2b0>
   13302:	4692      	mov	sl, r2
   13304:	e754      	b.n	131b0 <__divdi3+0x20c>
   13306:	bf00      	nop

00013308 <__udivdi3>:
   13308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1330c:	4605      	mov	r5, r0
   1330e:	b083      	sub	sp, #12
   13310:	460c      	mov	r4, r1
   13312:	4617      	mov	r7, r2
   13314:	4680      	mov	r8, r0
   13316:	468b      	mov	fp, r1
   13318:	2b00      	cmp	r3, #0
   1331a:	d152      	bne.n	133c2 <__udivdi3+0xba>
   1331c:	428a      	cmp	r2, r1
   1331e:	d964      	bls.n	133ea <__udivdi3+0xe2>
   13320:	fab2 f382 	clz	r3, r2
   13324:	b153      	cbz	r3, 1333c <__udivdi3+0x34>
   13326:	f1c3 0420 	rsb	r4, r3, #32
   1332a:	fa01 f103 	lsl.w	r1, r1, r3
   1332e:	fa20 f204 	lsr.w	r2, r0, r4
   13332:	409f      	lsls	r7, r3
   13334:	ea42 0b01 	orr.w	fp, r2, r1
   13338:	fa00 f803 	lsl.w	r8, r0, r3
   1333c:	0c3c      	lsrs	r4, r7, #16
   1333e:	4658      	mov	r0, fp
   13340:	4621      	mov	r1, r4
   13342:	b2be      	uxth	r6, r7
   13344:	f000 f980 	bl	13648 <__aeabi_uidiv>
   13348:	4621      	mov	r1, r4
   1334a:	4681      	mov	r9, r0
   1334c:	4658      	mov	r0, fp
   1334e:	f000 faa9 	bl	138a4 <__aeabi_uidivmod>
   13352:	ea4f 4018 	mov.w	r0, r8, lsr #16
   13356:	fb06 f309 	mul.w	r3, r6, r9
   1335a:	ea40 4a01 	orr.w	sl, r0, r1, lsl #16
   1335e:	4553      	cmp	r3, sl
   13360:	d90b      	bls.n	1337a <__udivdi3+0x72>
   13362:	eb1a 0a07 	adds.w	sl, sl, r7
   13366:	f109 32ff 	add.w	r2, r9, #4294967295
   1336a:	d205      	bcs.n	13378 <__udivdi3+0x70>
   1336c:	4553      	cmp	r3, sl
   1336e:	bf84      	itt	hi
   13370:	f1a9 0902 	subhi.w	r9, r9, #2
   13374:	44ba      	addhi	sl, r7
   13376:	d800      	bhi.n	1337a <__udivdi3+0x72>
   13378:	4691      	mov	r9, r2
   1337a:	ebc3 0a0a 	rsb	sl, r3, sl
   1337e:	4621      	mov	r1, r4
   13380:	4650      	mov	r0, sl
   13382:	f000 f961 	bl	13648 <__aeabi_uidiv>
   13386:	4621      	mov	r1, r4
   13388:	4605      	mov	r5, r0
   1338a:	4650      	mov	r0, sl
   1338c:	f000 fa8a 	bl	138a4 <__aeabi_uidivmod>
   13390:	fa1f f388 	uxth.w	r3, r8
   13394:	fb06 f605 	mul.w	r6, r6, r5
   13398:	ea43 4801 	orr.w	r8, r3, r1, lsl #16
   1339c:	4546      	cmp	r6, r8
   1339e:	d908      	bls.n	133b2 <__udivdi3+0xaa>
   133a0:	1e6b      	subs	r3, r5, #1
   133a2:	eb18 0807 	adds.w	r8, r8, r7
   133a6:	f080 812e 	bcs.w	13606 <__udivdi3+0x2fe>
   133aa:	3d02      	subs	r5, #2
   133ac:	4546      	cmp	r6, r8
   133ae:	f240 812a 	bls.w	13606 <__udivdi3+0x2fe>
   133b2:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
   133b6:	2600      	movs	r6, #0
   133b8:	4631      	mov	r1, r6
   133ba:	4628      	mov	r0, r5
   133bc:	b003      	add	sp, #12
   133be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133c2:	428b      	cmp	r3, r1
   133c4:	d85a      	bhi.n	1347c <__udivdi3+0x174>
   133c6:	fab3 f683 	clz	r6, r3
   133ca:	2e00      	cmp	r6, #0
   133cc:	d159      	bne.n	13482 <__udivdi3+0x17a>
   133ce:	428b      	cmp	r3, r1
   133d0:	bf2c      	ite	cs
   133d2:	2400      	movcs	r4, #0
   133d4:	2401      	movcc	r4, #1
   133d6:	4282      	cmp	r2, r0
   133d8:	bf8c      	ite	hi
   133da:	4625      	movhi	r5, r4
   133dc:	f044 0501 	orrls.w	r5, r4, #1
   133e0:	2d00      	cmp	r5, #0
   133e2:	f040 8116 	bne.w	13612 <__udivdi3+0x30a>
   133e6:	462e      	mov	r6, r5
   133e8:	e7e6      	b.n	133b8 <__udivdi3+0xb0>
   133ea:	b922      	cbnz	r2, 133f6 <__udivdi3+0xee>
   133ec:	2001      	movs	r0, #1
   133ee:	4611      	mov	r1, r2
   133f0:	f000 f92a 	bl	13648 <__aeabi_uidiv>
   133f4:	4607      	mov	r7, r0
   133f6:	fab7 f387 	clz	r3, r7
   133fa:	2b00      	cmp	r3, #0
   133fc:	f040 80bd 	bne.w	1357a <__udivdi3+0x272>
   13400:	1be4      	subs	r4, r4, r7
   13402:	ea4f 4b17 	mov.w	fp, r7, lsr #16
   13406:	fa1f f987 	uxth.w	r9, r7
   1340a:	2601      	movs	r6, #1
   1340c:	4659      	mov	r1, fp
   1340e:	4620      	mov	r0, r4
   13410:	f000 f91a 	bl	13648 <__aeabi_uidiv>
   13414:	4659      	mov	r1, fp
   13416:	4605      	mov	r5, r0
   13418:	4620      	mov	r0, r4
   1341a:	f000 fa43 	bl	138a4 <__aeabi_uidivmod>
   1341e:	ea4f 4018 	mov.w	r0, r8, lsr #16
   13422:	fb09 f305 	mul.w	r3, r9, r5
   13426:	ea40 4a01 	orr.w	sl, r0, r1, lsl #16
   1342a:	4553      	cmp	r3, sl
   1342c:	d907      	bls.n	1343e <__udivdi3+0x136>
   1342e:	1e6a      	subs	r2, r5, #1
   13430:	eb1a 0a07 	adds.w	sl, sl, r7
   13434:	d202      	bcs.n	1343c <__udivdi3+0x134>
   13436:	4553      	cmp	r3, sl
   13438:	f200 8101 	bhi.w	1363e <__udivdi3+0x336>
   1343c:	4615      	mov	r5, r2
   1343e:	ebc3 0a0a 	rsb	sl, r3, sl
   13442:	4659      	mov	r1, fp
   13444:	4650      	mov	r0, sl
   13446:	f000 f8ff 	bl	13648 <__aeabi_uidiv>
   1344a:	4659      	mov	r1, fp
   1344c:	4604      	mov	r4, r0
   1344e:	4650      	mov	r0, sl
   13450:	f000 fa28 	bl	138a4 <__aeabi_uidivmod>
   13454:	fa1f f388 	uxth.w	r3, r8
   13458:	fb09 f904 	mul.w	r9, r9, r4
   1345c:	ea43 4801 	orr.w	r8, r3, r1, lsl #16
   13460:	45c1      	cmp	r9, r8
   13462:	d908      	bls.n	13476 <__udivdi3+0x16e>
   13464:	1e63      	subs	r3, r4, #1
   13466:	eb18 0807 	adds.w	r8, r8, r7
   1346a:	f080 80ce 	bcs.w	1360a <__udivdi3+0x302>
   1346e:	3c02      	subs	r4, #2
   13470:	45c1      	cmp	r9, r8
   13472:	f240 80ca 	bls.w	1360a <__udivdi3+0x302>
   13476:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   1347a:	e79d      	b.n	133b8 <__udivdi3+0xb0>
   1347c:	2600      	movs	r6, #0
   1347e:	4635      	mov	r5, r6
   13480:	e79a      	b.n	133b8 <__udivdi3+0xb0>
   13482:	f1c6 0e20 	rsb	lr, r6, #32
   13486:	fa03 f706 	lsl.w	r7, r3, r6
   1348a:	fa22 fc0e 	lsr.w	ip, r2, lr
   1348e:	fa21 fb0e 	lsr.w	fp, r1, lr
   13492:	ea4c 0707 	orr.w	r7, ip, r7
   13496:	fa20 fa0e 	lsr.w	sl, r0, lr
   1349a:	fa01 f306 	lsl.w	r3, r1, r6
   1349e:	4658      	mov	r0, fp
   134a0:	ea4f 4817 	mov.w	r8, r7, lsr #16
   134a4:	ea4a 0103 	orr.w	r1, sl, r3
   134a8:	9101      	str	r1, [sp, #4]
   134aa:	4641      	mov	r1, r8
   134ac:	fa02 f406 	lsl.w	r4, r2, r6
   134b0:	9400      	str	r4, [sp, #0]
   134b2:	f000 f8c9 	bl	13648 <__aeabi_uidiv>
   134b6:	4641      	mov	r1, r8
   134b8:	b2bc      	uxth	r4, r7
   134ba:	4682      	mov	sl, r0
   134bc:	4658      	mov	r0, fp
   134be:	f000 f9f1 	bl	138a4 <__aeabi_uidivmod>
   134c2:	9801      	ldr	r0, [sp, #4]
   134c4:	fb04 f30a 	mul.w	r3, r4, sl
   134c8:	0c02      	lsrs	r2, r0, #16
   134ca:	ea42 4b01 	orr.w	fp, r2, r1, lsl #16
   134ce:	455b      	cmp	r3, fp
   134d0:	d906      	bls.n	134e0 <__udivdi3+0x1d8>
   134d2:	eb1b 0b07 	adds.w	fp, fp, r7
   134d6:	f10a 32ff 	add.w	r2, sl, #4294967295
   134da:	f0c0 80a4 	bcc.w	13626 <__udivdi3+0x31e>
   134de:	4692      	mov	sl, r2
   134e0:	ebc3 0b0b 	rsb	fp, r3, fp
   134e4:	4641      	mov	r1, r8
   134e6:	4658      	mov	r0, fp
   134e8:	f000 f8ae 	bl	13648 <__aeabi_uidiv>
   134ec:	4641      	mov	r1, r8
   134ee:	4681      	mov	r9, r0
   134f0:	4658      	mov	r0, fp
   134f2:	f000 f9d7 	bl	138a4 <__aeabi_uidivmod>
   134f6:	9801      	ldr	r0, [sp, #4]
   134f8:	fb04 f409 	mul.w	r4, r4, r9
   134fc:	b282      	uxth	r2, r0
   134fe:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
   13502:	429c      	cmp	r4, r3
   13504:	d905      	bls.n	13512 <__udivdi3+0x20a>
   13506:	19db      	adds	r3, r3, r7
   13508:	f109 32ff 	add.w	r2, r9, #4294967295
   1350c:	f0c0 8083 	bcc.w	13616 <__udivdi3+0x30e>
   13510:	4691      	mov	r9, r2
   13512:	9f00      	ldr	r7, [sp, #0]
   13514:	ea49 490a 	orr.w	r9, r9, sl, lsl #16
   13518:	1b1c      	subs	r4, r3, r4
   1351a:	fa1f f389 	uxth.w	r3, r9
   1351e:	fa1f fe87 	uxth.w	lr, r7
   13522:	0c3a      	lsrs	r2, r7, #16
   13524:	ea4f 4719 	mov.w	r7, r9, lsr #16
   13528:	fb0e fc03 	mul.w	ip, lr, r3
   1352c:	fb0e f007 	mul.w	r0, lr, r7
   13530:	fb02 0103 	mla	r1, r2, r3, r0
   13534:	fb02 fe07 	mul.w	lr, r2, r7
   13538:	eb01 411c 	add.w	r1, r1, ip, lsr #16
   1353c:	4288      	cmp	r0, r1
   1353e:	bf88      	it	hi
   13540:	f50e 3e80 	addhi.w	lr, lr, #65536	; 0x10000
   13544:	eb0e 4311 	add.w	r3, lr, r1, lsr #16
   13548:	429c      	cmp	r4, r3
   1354a:	d312      	bcc.n	13572 <__udivdi3+0x26a>
   1354c:	ea4f 4101 	mov.w	r1, r1, lsl #16
   13550:	fa1f f28c 	uxth.w	r2, ip
   13554:	fa05 f506 	lsl.w	r5, r5, r6
   13558:	bf14      	ite	ne
   1355a:	2000      	movne	r0, #0
   1355c:	2001      	moveq	r0, #1
   1355e:	188e      	adds	r6, r1, r2
   13560:	42b5      	cmp	r5, r6
   13562:	bf2c      	ite	cs
   13564:	2600      	movcs	r6, #0
   13566:	f000 0601 	andcc.w	r6, r0, #1
   1356a:	464d      	mov	r5, r9
   1356c:	2e00      	cmp	r6, #0
   1356e:	f43f af23 	beq.w	133b8 <__udivdi3+0xb0>
   13572:	f109 35ff 	add.w	r5, r9, #4294967295
   13576:	2600      	movs	r6, #0
   13578:	e71e      	b.n	133b8 <__udivdi3+0xb0>
   1357a:	409f      	lsls	r7, r3
   1357c:	f1c3 0120 	rsb	r1, r3, #32
   13580:	fa24 f901 	lsr.w	r9, r4, r1
   13584:	fa04 f203 	lsl.w	r2, r4, r3
   13588:	ea4f 4b17 	mov.w	fp, r7, lsr #16
   1358c:	fa25 f601 	lsr.w	r6, r5, r1
   13590:	4648      	mov	r0, r9
   13592:	4659      	mov	r1, fp
   13594:	ea46 0a02 	orr.w	sl, r6, r2
   13598:	fa05 f803 	lsl.w	r8, r5, r3
   1359c:	f000 f854 	bl	13648 <__aeabi_uidiv>
   135a0:	4659      	mov	r1, fp
   135a2:	ea4f 451a 	mov.w	r5, sl, lsr #16
   135a6:	4606      	mov	r6, r0
   135a8:	4648      	mov	r0, r9
   135aa:	f000 f97b 	bl	138a4 <__aeabi_uidivmod>
   135ae:	fa1f f987 	uxth.w	r9, r7
   135b2:	fb09 f306 	mul.w	r3, r9, r6
   135b6:	ea45 4401 	orr.w	r4, r5, r1, lsl #16
   135ba:	42a3      	cmp	r3, r4
   135bc:	d906      	bls.n	135cc <__udivdi3+0x2c4>
   135be:	1e72      	subs	r2, r6, #1
   135c0:	19e4      	adds	r4, r4, r7
   135c2:	d238      	bcs.n	13636 <__udivdi3+0x32e>
   135c4:	42a3      	cmp	r3, r4
   135c6:	d936      	bls.n	13636 <__udivdi3+0x32e>
   135c8:	3e02      	subs	r6, #2
   135ca:	19e4      	adds	r4, r4, r7
   135cc:	1ae4      	subs	r4, r4, r3
   135ce:	4659      	mov	r1, fp
   135d0:	4620      	mov	r0, r4
   135d2:	f000 f839 	bl	13648 <__aeabi_uidiv>
   135d6:	4659      	mov	r1, fp
   135d8:	4605      	mov	r5, r0
   135da:	4620      	mov	r0, r4
   135dc:	f000 f962 	bl	138a4 <__aeabi_uidivmod>
   135e0:	fa1f f48a 	uxth.w	r4, sl
   135e4:	fb09 f305 	mul.w	r3, r9, r5
   135e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   135ec:	42a3      	cmp	r3, r4
   135ee:	d906      	bls.n	135fe <__udivdi3+0x2f6>
   135f0:	1e6a      	subs	r2, r5, #1
   135f2:	19e4      	adds	r4, r4, r7
   135f4:	d221      	bcs.n	1363a <__udivdi3+0x332>
   135f6:	42a3      	cmp	r3, r4
   135f8:	d91f      	bls.n	1363a <__udivdi3+0x332>
   135fa:	3d02      	subs	r5, #2
   135fc:	19e4      	adds	r4, r4, r7
   135fe:	1ae4      	subs	r4, r4, r3
   13600:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
   13604:	e702      	b.n	1340c <__udivdi3+0x104>
   13606:	461d      	mov	r5, r3
   13608:	e6d3      	b.n	133b2 <__udivdi3+0xaa>
   1360a:	461c      	mov	r4, r3
   1360c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   13610:	e6d2      	b.n	133b8 <__udivdi3+0xb0>
   13612:	2501      	movs	r5, #1
   13614:	e6d0      	b.n	133b8 <__udivdi3+0xb0>
   13616:	429c      	cmp	r4, r3
   13618:	bf84      	itt	hi
   1361a:	f1a9 0902 	subhi.w	r9, r9, #2
   1361e:	19db      	addhi	r3, r3, r7
   13620:	f63f af77 	bhi.w	13512 <__udivdi3+0x20a>
   13624:	e774      	b.n	13510 <__udivdi3+0x208>
   13626:	455b      	cmp	r3, fp
   13628:	bf84      	itt	hi
   1362a:	f1aa 0a02 	subhi.w	sl, sl, #2
   1362e:	44bb      	addhi	fp, r7
   13630:	f63f af56 	bhi.w	134e0 <__udivdi3+0x1d8>
   13634:	e753      	b.n	134de <__udivdi3+0x1d6>
   13636:	4616      	mov	r6, r2
   13638:	e7c8      	b.n	135cc <__udivdi3+0x2c4>
   1363a:	4615      	mov	r5, r2
   1363c:	e7df      	b.n	135fe <__udivdi3+0x2f6>
   1363e:	3d02      	subs	r5, #2
   13640:	44ba      	add	sl, r7
   13642:	e6fc      	b.n	1343e <__udivdi3+0x136>
   13644:	0000      	movs	r0, r0
	...

00013648 <__aeabi_uidiv>:
   13648:	1e4a      	subs	r2, r1, #1
   1364a:	bf08      	it	eq
   1364c:	4770      	bxeq	lr
   1364e:	f0c0 8124 	bcc.w	1389a <__aeabi_uidiv+0x252>
   13652:	4288      	cmp	r0, r1
   13654:	f240 8116 	bls.w	13884 <__aeabi_uidiv+0x23c>
   13658:	4211      	tst	r1, r2
   1365a:	f000 8117 	beq.w	1388c <__aeabi_uidiv+0x244>
   1365e:	fab0 f380 	clz	r3, r0
   13662:	fab1 f281 	clz	r2, r1
   13666:	eba2 0303 	sub.w	r3, r2, r3
   1366a:	f1c3 031f 	rsb	r3, r3, #31
   1366e:	a204      	add	r2, pc, #16	; (adr r2, 13680 <__aeabi_uidiv+0x38>)
   13670:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   13674:	f04f 0200 	mov.w	r2, #0
   13678:	469f      	mov	pc, r3
   1367a:	bf00      	nop
   1367c:	f3af 8000 	nop.w
   13680:	ebb0 7fc1 	cmp.w	r0, r1, lsl #31
   13684:	bf00      	nop
   13686:	eb42 0202 	adc.w	r2, r2, r2
   1368a:	bf28      	it	cs
   1368c:	eba0 70c1 	subcs.w	r0, r0, r1, lsl #31
   13690:	ebb0 7f81 	cmp.w	r0, r1, lsl #30
   13694:	bf00      	nop
   13696:	eb42 0202 	adc.w	r2, r2, r2
   1369a:	bf28      	it	cs
   1369c:	eba0 7081 	subcs.w	r0, r0, r1, lsl #30
   136a0:	ebb0 7f41 	cmp.w	r0, r1, lsl #29
   136a4:	bf00      	nop
   136a6:	eb42 0202 	adc.w	r2, r2, r2
   136aa:	bf28      	it	cs
   136ac:	eba0 7041 	subcs.w	r0, r0, r1, lsl #29
   136b0:	ebb0 7f01 	cmp.w	r0, r1, lsl #28
   136b4:	bf00      	nop
   136b6:	eb42 0202 	adc.w	r2, r2, r2
   136ba:	bf28      	it	cs
   136bc:	eba0 7001 	subcs.w	r0, r0, r1, lsl #28
   136c0:	ebb0 6fc1 	cmp.w	r0, r1, lsl #27
   136c4:	bf00      	nop
   136c6:	eb42 0202 	adc.w	r2, r2, r2
   136ca:	bf28      	it	cs
   136cc:	eba0 60c1 	subcs.w	r0, r0, r1, lsl #27
   136d0:	ebb0 6f81 	cmp.w	r0, r1, lsl #26
   136d4:	bf00      	nop
   136d6:	eb42 0202 	adc.w	r2, r2, r2
   136da:	bf28      	it	cs
   136dc:	eba0 6081 	subcs.w	r0, r0, r1, lsl #26
   136e0:	ebb0 6f41 	cmp.w	r0, r1, lsl #25
   136e4:	bf00      	nop
   136e6:	eb42 0202 	adc.w	r2, r2, r2
   136ea:	bf28      	it	cs
   136ec:	eba0 6041 	subcs.w	r0, r0, r1, lsl #25
   136f0:	ebb0 6f01 	cmp.w	r0, r1, lsl #24
   136f4:	bf00      	nop
   136f6:	eb42 0202 	adc.w	r2, r2, r2
   136fa:	bf28      	it	cs
   136fc:	eba0 6001 	subcs.w	r0, r0, r1, lsl #24
   13700:	ebb0 5fc1 	cmp.w	r0, r1, lsl #23
   13704:	bf00      	nop
   13706:	eb42 0202 	adc.w	r2, r2, r2
   1370a:	bf28      	it	cs
   1370c:	eba0 50c1 	subcs.w	r0, r0, r1, lsl #23
   13710:	ebb0 5f81 	cmp.w	r0, r1, lsl #22
   13714:	bf00      	nop
   13716:	eb42 0202 	adc.w	r2, r2, r2
   1371a:	bf28      	it	cs
   1371c:	eba0 5081 	subcs.w	r0, r0, r1, lsl #22
   13720:	ebb0 5f41 	cmp.w	r0, r1, lsl #21
   13724:	bf00      	nop
   13726:	eb42 0202 	adc.w	r2, r2, r2
   1372a:	bf28      	it	cs
   1372c:	eba0 5041 	subcs.w	r0, r0, r1, lsl #21
   13730:	ebb0 5f01 	cmp.w	r0, r1, lsl #20
   13734:	bf00      	nop
   13736:	eb42 0202 	adc.w	r2, r2, r2
   1373a:	bf28      	it	cs
   1373c:	eba0 5001 	subcs.w	r0, r0, r1, lsl #20
   13740:	ebb0 4fc1 	cmp.w	r0, r1, lsl #19
   13744:	bf00      	nop
   13746:	eb42 0202 	adc.w	r2, r2, r2
   1374a:	bf28      	it	cs
   1374c:	eba0 40c1 	subcs.w	r0, r0, r1, lsl #19
   13750:	ebb0 4f81 	cmp.w	r0, r1, lsl #18
   13754:	bf00      	nop
   13756:	eb42 0202 	adc.w	r2, r2, r2
   1375a:	bf28      	it	cs
   1375c:	eba0 4081 	subcs.w	r0, r0, r1, lsl #18
   13760:	ebb0 4f41 	cmp.w	r0, r1, lsl #17
   13764:	bf00      	nop
   13766:	eb42 0202 	adc.w	r2, r2, r2
   1376a:	bf28      	it	cs
   1376c:	eba0 4041 	subcs.w	r0, r0, r1, lsl #17
   13770:	ebb0 4f01 	cmp.w	r0, r1, lsl #16
   13774:	bf00      	nop
   13776:	eb42 0202 	adc.w	r2, r2, r2
   1377a:	bf28      	it	cs
   1377c:	eba0 4001 	subcs.w	r0, r0, r1, lsl #16
   13780:	ebb0 3fc1 	cmp.w	r0, r1, lsl #15
   13784:	bf00      	nop
   13786:	eb42 0202 	adc.w	r2, r2, r2
   1378a:	bf28      	it	cs
   1378c:	eba0 30c1 	subcs.w	r0, r0, r1, lsl #15
   13790:	ebb0 3f81 	cmp.w	r0, r1, lsl #14
   13794:	bf00      	nop
   13796:	eb42 0202 	adc.w	r2, r2, r2
   1379a:	bf28      	it	cs
   1379c:	eba0 3081 	subcs.w	r0, r0, r1, lsl #14
   137a0:	ebb0 3f41 	cmp.w	r0, r1, lsl #13
   137a4:	bf00      	nop
   137a6:	eb42 0202 	adc.w	r2, r2, r2
   137aa:	bf28      	it	cs
   137ac:	eba0 3041 	subcs.w	r0, r0, r1, lsl #13
   137b0:	ebb0 3f01 	cmp.w	r0, r1, lsl #12
   137b4:	bf00      	nop
   137b6:	eb42 0202 	adc.w	r2, r2, r2
   137ba:	bf28      	it	cs
   137bc:	eba0 3001 	subcs.w	r0, r0, r1, lsl #12
   137c0:	ebb0 2fc1 	cmp.w	r0, r1, lsl #11
   137c4:	bf00      	nop
   137c6:	eb42 0202 	adc.w	r2, r2, r2
   137ca:	bf28      	it	cs
   137cc:	eba0 20c1 	subcs.w	r0, r0, r1, lsl #11
   137d0:	ebb0 2f81 	cmp.w	r0, r1, lsl #10
   137d4:	bf00      	nop
   137d6:	eb42 0202 	adc.w	r2, r2, r2
   137da:	bf28      	it	cs
   137dc:	eba0 2081 	subcs.w	r0, r0, r1, lsl #10
   137e0:	ebb0 2f41 	cmp.w	r0, r1, lsl #9
   137e4:	bf00      	nop
   137e6:	eb42 0202 	adc.w	r2, r2, r2
   137ea:	bf28      	it	cs
   137ec:	eba0 2041 	subcs.w	r0, r0, r1, lsl #9
   137f0:	ebb0 2f01 	cmp.w	r0, r1, lsl #8
   137f4:	bf00      	nop
   137f6:	eb42 0202 	adc.w	r2, r2, r2
   137fa:	bf28      	it	cs
   137fc:	eba0 2001 	subcs.w	r0, r0, r1, lsl #8
   13800:	ebb0 1fc1 	cmp.w	r0, r1, lsl #7
   13804:	bf00      	nop
   13806:	eb42 0202 	adc.w	r2, r2, r2
   1380a:	bf28      	it	cs
   1380c:	eba0 10c1 	subcs.w	r0, r0, r1, lsl #7
   13810:	ebb0 1f81 	cmp.w	r0, r1, lsl #6
   13814:	bf00      	nop
   13816:	eb42 0202 	adc.w	r2, r2, r2
   1381a:	bf28      	it	cs
   1381c:	eba0 1081 	subcs.w	r0, r0, r1, lsl #6
   13820:	ebb0 1f41 	cmp.w	r0, r1, lsl #5
   13824:	bf00      	nop
   13826:	eb42 0202 	adc.w	r2, r2, r2
   1382a:	bf28      	it	cs
   1382c:	eba0 1041 	subcs.w	r0, r0, r1, lsl #5
   13830:	ebb0 1f01 	cmp.w	r0, r1, lsl #4
   13834:	bf00      	nop
   13836:	eb42 0202 	adc.w	r2, r2, r2
   1383a:	bf28      	it	cs
   1383c:	eba0 1001 	subcs.w	r0, r0, r1, lsl #4
   13840:	ebb0 0fc1 	cmp.w	r0, r1, lsl #3
   13844:	bf00      	nop
   13846:	eb42 0202 	adc.w	r2, r2, r2
   1384a:	bf28      	it	cs
   1384c:	eba0 00c1 	subcs.w	r0, r0, r1, lsl #3
   13850:	ebb0 0f81 	cmp.w	r0, r1, lsl #2
   13854:	bf00      	nop
   13856:	eb42 0202 	adc.w	r2, r2, r2
   1385a:	bf28      	it	cs
   1385c:	eba0 0081 	subcs.w	r0, r0, r1, lsl #2
   13860:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
   13864:	bf00      	nop
   13866:	eb42 0202 	adc.w	r2, r2, r2
   1386a:	bf28      	it	cs
   1386c:	eba0 0041 	subcs.w	r0, r0, r1, lsl #1
   13870:	ebb0 0f01 	cmp.w	r0, r1
   13874:	bf00      	nop
   13876:	eb42 0202 	adc.w	r2, r2, r2
   1387a:	bf28      	it	cs
   1387c:	eba0 0001 	subcs.w	r0, r0, r1
   13880:	4610      	mov	r0, r2
   13882:	4770      	bx	lr
   13884:	bf0c      	ite	eq
   13886:	2001      	moveq	r0, #1
   13888:	2000      	movne	r0, #0
   1388a:	4770      	bx	lr
   1388c:	fab1 f281 	clz	r2, r1
   13890:	f1c2 021f 	rsb	r2, r2, #31
   13894:	fa20 f002 	lsr.w	r0, r0, r2
   13898:	4770      	bx	lr
   1389a:	b108      	cbz	r0, 138a0 <__aeabi_uidiv+0x258>
   1389c:	f04f 30ff 	mov.w	r0, #4294967295
   138a0:	f7ff bb7e 	b.w	12fa0 <__aeabi_idiv0>

000138a4 <__aeabi_uidivmod>:
   138a4:	2900      	cmp	r1, #0
   138a6:	d0f8      	beq.n	1389a <__aeabi_uidiv+0x252>
   138a8:	e92d 4003 	stmdb	sp!, {r0, r1, lr}
   138ac:	f7ff fecc 	bl	13648 <__aeabi_uidiv>
   138b0:	e8bd 4006 	ldmia.w	sp!, {r1, r2, lr}
   138b4:	fb02 f300 	mul.w	r3, r2, r0
   138b8:	eba1 0103 	sub.w	r1, r1, r3
   138bc:	4770      	bx	lr
   138be:	bf00      	nop

000138c0 <__cxa_pure_virtual>:
   138c0:	f24b 0130 	movw	r1, #45104	; 0xb030
   138c4:	221b      	movs	r2, #27
   138c6:	b508      	push	{r3, lr}
   138c8:	f2c0 0102 	movt	r1, #2
   138cc:	2002      	movs	r0, #2
   138ce:	f00e f8c3 	bl	21a58 <write>
   138d2:	f000 f819 	bl	13908 <std::terminate()>
   138d6:	bf00      	nop

000138d8 <operator delete(void*)>:
   138d8:	b108      	cbz	r0, 138de <operator delete(void*)+0x6>
   138da:	f00b bb8b 	b.w	1eff4 <free>
   138de:	4770      	bx	lr

000138e0 <__cxxabiv1::__terminate(void (*)())>:
   138e0:	b508      	push	{r3, lr}
   138e2:	4780      	blx	r0
   138e4:	f00b f8aa 	bl	1ea3c <abort>
   138e8:	f000 f9fe 	bl	13ce8 <__cxa_begin_catch>
   138ec:	f00b f8a6 	bl	1ea3c <abort>
   138f0:	460c      	mov	r4, r1
   138f2:	4605      	mov	r5, r0
   138f4:	f000 fa44 	bl	13d80 <__cxa_end_catch>
   138f8:	3401      	adds	r4, #1
   138fa:	d001      	beq.n	13900 <__cxxabiv1::__terminate(void (*)())+0x20>
   138fc:	f000 f916 	bl	13b2c <__cxa_end_cleanup>
   13900:	4628      	mov	r0, r5
   13902:	f000 f83f 	bl	13984 <__cxa_call_unexpected>
   13906:	bf00      	nop

00013908 <std::terminate()>:
   13908:	b508      	push	{r3, lr}
   1390a:	f240 031c 	movw	r3, #28
   1390e:	f2c1 0300 	movt	r3, #4096	; 0x1000
   13912:	6818      	ldr	r0, [r3, #0]
   13914:	f7ff ffe4 	bl	138e0 <__cxxabiv1::__terminate(void (*)())>

00013918 <__cxxabiv1::__unexpected(void (*)())>:
   13918:	b508      	push	{r3, lr}
   1391a:	4780      	blx	r0
   1391c:	f7ff fff4 	bl	13908 <std::terminate()>

00013920 <std::unexpected()>:
   13920:	f240 0020 	movw	r0, #32
   13924:	f2c1 0000 	movt	r0, #4096	; 0x1000
   13928:	b508      	push	{r3, lr}
   1392a:	6803      	ldr	r3, [r0, #0]
   1392c:	4798      	blx	r3
   1392e:	f7ff ffeb 	bl	13908 <std::terminate()>
   13932:	bf00      	nop

00013934 <__cxa_call_terminate>:
   13934:	b508      	push	{r3, lr}
   13936:	4604      	mov	r4, r0
   13938:	b120      	cbz	r0, 13944 <__cxa_call_terminate+0x10>
   1393a:	f000 f9d5 	bl	13ce8 <__cxa_begin_catch>
   1393e:	7823      	ldrb	r3, [r4, #0]
   13940:	2b47      	cmp	r3, #71	; 0x47
   13942:	d001      	beq.n	13948 <__cxa_call_terminate+0x14>
   13944:	f7ff ffe0 	bl	13908 <std::terminate()>
   13948:	7860      	ldrb	r0, [r4, #1]
   1394a:	284e      	cmp	r0, #78	; 0x4e
   1394c:	d1fa      	bne.n	13944 <__cxa_call_terminate+0x10>
   1394e:	78a1      	ldrb	r1, [r4, #2]
   13950:	2955      	cmp	r1, #85	; 0x55
   13952:	d1f7      	bne.n	13944 <__cxa_call_terminate+0x10>
   13954:	78e2      	ldrb	r2, [r4, #3]
   13956:	2a43      	cmp	r2, #67	; 0x43
   13958:	d1f4      	bne.n	13944 <__cxa_call_terminate+0x10>
   1395a:	f894 c004 	ldrb.w	ip, [r4, #4]
   1395e:	f1bc 0f43 	cmp.w	ip, #67	; 0x43
   13962:	d1ef      	bne.n	13944 <__cxa_call_terminate+0x10>
   13964:	f894 e005 	ldrb.w	lr, [r4, #5]
   13968:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
   1396c:	d1ea      	bne.n	13944 <__cxa_call_terminate+0x10>
   1396e:	79a3      	ldrb	r3, [r4, #6]
   13970:	2b2b      	cmp	r3, #43	; 0x2b
   13972:	d1e7      	bne.n	13944 <__cxa_call_terminate+0x10>
   13974:	79e0      	ldrb	r0, [r4, #7]
   13976:	2801      	cmp	r0, #1
   13978:	d8e4      	bhi.n	13944 <__cxa_call_terminate+0x10>
   1397a:	f854 0c14 	ldr.w	r0, [r4, #-20]
   1397e:	f7ff ffaf 	bl	138e0 <__cxxabiv1::__terminate(void (*)())>
   13982:	bf00      	nop

00013984 <__cxa_call_unexpected>:
   13984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13988:	b085      	sub	sp, #20
   1398a:	7803      	ldrb	r3, [r0, #0]
   1398c:	2b47      	cmp	r3, #71	; 0x47
   1398e:	d010      	beq.n	139b2 <__cxa_call_unexpected+0x2e>
   13990:	2400      	movs	r4, #0
   13992:	f04f 0801 	mov.w	r8, #1
   13996:	46a1      	mov	r9, r4
   13998:	4625      	mov	r5, r4
   1399a:	4626      	mov	r6, r4
   1399c:	4627      	mov	r7, r4
   1399e:	f000 f9a3 	bl	13ce8 <__cxa_begin_catch>
   139a2:	f1b8 0f00 	cmp.w	r8, #0
   139a6:	d001      	beq.n	139ac <__cxa_call_unexpected+0x28>
   139a8:	f7ff ffba 	bl	13920 <std::unexpected()>
   139ac:	4648      	mov	r0, r9
   139ae:	f7ff ffb3 	bl	13918 <__cxxabiv1::__unexpected(void (*)())>
   139b2:	7841      	ldrb	r1, [r0, #1]
   139b4:	294e      	cmp	r1, #78	; 0x4e
   139b6:	d1eb      	bne.n	13990 <__cxa_call_unexpected+0xc>
   139b8:	7882      	ldrb	r2, [r0, #2]
   139ba:	2a55      	cmp	r2, #85	; 0x55
   139bc:	d1e8      	bne.n	13990 <__cxa_call_unexpected+0xc>
   139be:	78c4      	ldrb	r4, [r0, #3]
   139c0:	2c43      	cmp	r4, #67	; 0x43
   139c2:	d1e5      	bne.n	13990 <__cxa_call_unexpected+0xc>
   139c4:	7905      	ldrb	r5, [r0, #4]
   139c6:	2d43      	cmp	r5, #67	; 0x43
   139c8:	d1e2      	bne.n	13990 <__cxa_call_unexpected+0xc>
   139ca:	7946      	ldrb	r6, [r0, #5]
   139cc:	2e2b      	cmp	r6, #43	; 0x2b
   139ce:	d1df      	bne.n	13990 <__cxa_call_unexpected+0xc>
   139d0:	7987      	ldrb	r7, [r0, #6]
   139d2:	2f2b      	cmp	r7, #43	; 0x2b
   139d4:	d1dc      	bne.n	13990 <__cxa_call_unexpected+0xc>
   139d6:	f890 8007 	ldrb.w	r8, [r0, #7]
   139da:	f1b8 0f01 	cmp.w	r8, #1
   139de:	d8d7      	bhi.n	13990 <__cxa_call_unexpected+0xc>
   139e0:	f850 9c18 	ldr.w	r9, [r0, #-24]
   139e4:	f04f 0800 	mov.w	r8, #0
   139e8:	f850 4c14 	ldr.w	r4, [r0, #-20]
   139ec:	6a87      	ldr	r7, [r0, #40]	; 0x28
   139ee:	6b06      	ldr	r6, [r0, #48]	; 0x30
   139f0:	6b45      	ldr	r5, [r0, #52]	; 0x34
   139f2:	e7d4      	b.n	1399e <__cxa_call_unexpected+0x1a>
   139f4:	f000 f978 	bl	13ce8 <__cxa_begin_catch>
   139f8:	f000 faee 	bl	13fd8 <__cxa_get_globals_fast>
   139fc:	6803      	ldr	r3, [r0, #0]
   139fe:	f893 9027 	ldrb.w	r9, [r3, #39]	; 0x27
   13a02:	f1b9 0f01 	cmp.w	r9, #1
   13a06:	d045      	beq.n	13a94 <__cxa_call_unexpected+0x110>
   13a08:	f103 0278 	add.w	r2, r3, #120	; 0x78
   13a0c:	f04f 0800 	mov.w	r8, #0
   13a10:	f026 0003 	bic.w	r0, r6, #3
   13a14:	f10d 0910 	add.w	r9, sp, #16
   13a18:	462e      	mov	r6, r5
   13a1a:	46c2      	mov	sl, r8
   13a1c:	f103 0b20 	add.w	fp, r3, #32
   13a20:	9001      	str	r0, [sp, #4]
   13a22:	f849 2d04 	str.w	r2, [r9, #-4]!
   13a26:	4557      	cmp	r7, sl
   13a28:	dd22      	ble.n	13a70 <__cxa_call_unexpected+0xec>
   13a2a:	6835      	ldr	r5, [r6, #0]
   13a2c:	b105      	cbz	r5, 13a30 <__cxa_call_unexpected+0xac>
   13a2e:	19ad      	adds	r5, r5, r6
   13a30:	4658      	mov	r0, fp
   13a32:	4629      	mov	r1, r5
   13a34:	2200      	movs	r2, #0
   13a36:	464b      	mov	r3, r9
   13a38:	f000 f87e 	bl	13b38 <__cxa_type_match>
   13a3c:	4602      	mov	r2, r0
   13a3e:	bb70      	cbnz	r0, 13a9e <__cxa_call_unexpected+0x11a>
   13a40:	f8d5 e000 	ldr.w	lr, [r5]
   13a44:	f64b 7100 	movw	r1, #48896	; 0xbf00
   13a48:	4628      	mov	r0, r5
   13a4a:	f2c0 0102 	movt	r1, #2
   13a4e:	2301      	movs	r3, #1
   13a50:	f8de 5010 	ldr.w	r5, [lr, #16]
   13a54:	47a8      	blx	r5
   13a56:	9b01      	ldr	r3, [sp, #4]
   13a58:	2800      	cmp	r0, #0
   13a5a:	bf18      	it	ne
   13a5c:	f04f 0801 	movne.w	r8, #1
   13a60:	f10a 0a01 	add.w	sl, sl, #1
   13a64:	18f6      	adds	r6, r6, r3
   13a66:	e7de      	b.n	13a26 <__cxa_call_unexpected+0xa2>
   13a68:	f000 f93e 	bl	13ce8 <__cxa_begin_catch>
   13a6c:	f7ff ff4c 	bl	13908 <std::terminate()>
   13a70:	f1b8 0f00 	cmp.w	r8, #0
   13a74:	d010      	beq.n	13a98 <__cxa_call_unexpected+0x114>
   13a76:	2004      	movs	r0, #4
   13a78:	4c0d      	ldr	r4, [pc, #52]	; (13ab0 <__cxa_call_unexpected+0x12c>)
   13a7a:	f000 f9cb 	bl	13e14 <__cxa_allocate_exception>
   13a7e:	f64b 7100 	movw	r1, #48896	; 0xbf00
   13a82:	f64d 52cd 	movw	r2, #56781	; 0xddcd
   13a86:	f2c0 0102 	movt	r1, #2
   13a8a:	f2c0 0201 	movt	r2, #1
   13a8e:	6004      	str	r4, [r0, #0]
   13a90:	f00a f9e8 	bl	1de64 <__cxa_throw>
   13a94:	681a      	ldr	r2, [r3, #0]
   13a96:	e7b9      	b.n	13a0c <__cxa_call_unexpected+0x88>
   13a98:	4620      	mov	r0, r4
   13a9a:	f7ff ff21 	bl	138e0 <__cxxabiv1::__terminate(void (*)())>
   13a9e:	f00a fa21 	bl	1dee4 <__cxa_rethrow>
   13aa2:	f000 f96d 	bl	13d80 <__cxa_end_catch>
   13aa6:	f000 f96b 	bl	13d80 <__cxa_end_catch>
   13aaa:	f000 f83f 	bl	13b2c <__cxa_end_cleanup>
   13aae:	bf00      	nop
   13ab0:	0002bec0 	.word	0x0002bec0

00013ab4 <__aeabi_atexit>:
   13ab4:	4603      	mov	r3, r0
   13ab6:	4608      	mov	r0, r1
   13ab8:	4619      	mov	r1, r3
   13aba:	f00a bfc7 	b.w	1ea4c <__cxa_atexit>
   13abe:	bf00      	nop

00013ac0 <__cxa_guard_acquire>:
   13ac0:	b508      	push	{r3, lr}
   13ac2:	6803      	ldr	r3, [r0, #0]
   13ac4:	07db      	lsls	r3, r3, #31
   13ac6:	d405      	bmi.n	13ad4 <__cxa_guard_acquire+0x14>
   13ac8:	7841      	ldrb	r1, [r0, #1]
   13aca:	b929      	cbnz	r1, 13ad8 <__cxa_guard_acquire+0x18>
   13acc:	2201      	movs	r2, #1
   13ace:	7042      	strb	r2, [r0, #1]
   13ad0:	4610      	mov	r0, r2
   13ad2:	bd08      	pop	{r3, pc}
   13ad4:	2000      	movs	r0, #0
   13ad6:	bd08      	pop	{r3, pc}
   13ad8:	2004      	movs	r0, #4
   13ada:	f000 f99b 	bl	13e14 <__cxa_allocate_exception>
   13ade:	4b06      	ldr	r3, [pc, #24]	; (13af8 <__cxa_guard_acquire+0x38>)
   13ae0:	f24b 014c 	movw	r1, #45132	; 0xb04c
   13ae4:	f643 3205 	movw	r2, #15109	; 0x3b05
   13ae8:	f2c0 0102 	movt	r1, #2
   13aec:	f2c0 0201 	movt	r2, #1
   13af0:	6003      	str	r3, [r0, #0]
   13af2:	f00a f9b7 	bl	1de64 <__cxa_throw>
   13af6:	bf00      	nop
   13af8:	0002b088 	.word	0x0002b088

00013afc <__cxa_guard_release>:
   13afc:	2301      	movs	r3, #1
   13afe:	6003      	str	r3, [r0, #0]
   13b00:	4770      	bx	lr
   13b02:	bf00      	nop

00013b04 <__gnu_cxx::recursive_init_error::~recursive_init_error()>:
   13b04:	4b03      	ldr	r3, [pc, #12]	; (13b14 <__gnu_cxx::recursive_init_error::~recursive_init_error()+0x10>)
   13b06:	b510      	push	{r4, lr}
   13b08:	4604      	mov	r4, r0
   13b0a:	6003      	str	r3, [r0, #0]
   13b0c:	f00a f958 	bl	1ddc0 <std::exception::~exception()>
   13b10:	4620      	mov	r0, r4
   13b12:	bd10      	pop	{r4, pc}
   13b14:	0002b088 	.word	0x0002b088

00013b18 <__gnu_cxx::recursive_init_error::~recursive_init_error()>:
   13b18:	b510      	push	{r4, lr}
   13b1a:	4604      	mov	r4, r0
   13b1c:	f7ff fff2 	bl	13b04 <__gnu_cxx::recursive_init_error::~recursive_init_error()>
   13b20:	4620      	mov	r0, r4
   13b22:	f7ff fed9 	bl	138d8 <operator delete(void*)>
   13b26:	4620      	mov	r0, r4
   13b28:	bd10      	pop	{r4, pc}
   13b2a:	bf00      	nop

00013b2c <__cxa_end_cleanup>:
   13b2c:	b41e      	push	{r1, r2, r3, r4}
   13b2e:	f000 f89d 	bl	13c6c <__gnu_end_cleanup>
   13b32:	bc1e      	pop	{r1, r2, r3, r4}
   13b34:	f011 ffe6 	bl	25b04 <_Unwind_Resume>

00013b38 <__cxa_type_match>:
   13b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13b3c:	461e      	mov	r6, r3
   13b3e:	7803      	ldrb	r3, [r0, #0]
   13b40:	b082      	sub	sp, #8
   13b42:	460f      	mov	r7, r1
   13b44:	2b47      	cmp	r3, #71	; 0x47
   13b46:	d020      	beq.n	13b8a <__cxa_type_match+0x52>
   13b48:	f64b 68ac 	movw	r8, #48812	; 0xbeac
   13b4c:	2400      	movs	r4, #0
   13b4e:	f2c0 0802 	movt	r8, #2
   13b52:	9401      	str	r4, [sp, #4]
   13b54:	f8d8 3000 	ldr.w	r3, [r8]
   13b58:	4640      	mov	r0, r8
   13b5a:	2401      	movs	r4, #1
   13b5c:	689d      	ldr	r5, [r3, #8]
   13b5e:	47a8      	blx	r5
   13b60:	b118      	cbz	r0, 13b6a <__cxa_type_match+0x32>
   13b62:	9901      	ldr	r1, [sp, #4]
   13b64:	2402      	movs	r4, #2
   13b66:	6808      	ldr	r0, [r1, #0]
   13b68:	9001      	str	r0, [sp, #4]
   13b6a:	683d      	ldr	r5, [r7, #0]
   13b6c:	4638      	mov	r0, r7
   13b6e:	4641      	mov	r1, r8
   13b70:	aa01      	add	r2, sp, #4
   13b72:	2301      	movs	r3, #1
   13b74:	692d      	ldr	r5, [r5, #16]
   13b76:	47a8      	blx	r5
   13b78:	b128      	cbz	r0, 13b86 <__cxa_type_match+0x4e>
   13b7a:	9a01      	ldr	r2, [sp, #4]
   13b7c:	6032      	str	r2, [r6, #0]
   13b7e:	4620      	mov	r0, r4
   13b80:	b002      	add	sp, #8
   13b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13b86:	4604      	mov	r4, r0
   13b88:	e7f9      	b.n	13b7e <__cxa_type_match+0x46>
   13b8a:	7841      	ldrb	r1, [r0, #1]
   13b8c:	294e      	cmp	r1, #78	; 0x4e
   13b8e:	d1db      	bne.n	13b48 <__cxa_type_match+0x10>
   13b90:	7882      	ldrb	r2, [r0, #2]
   13b92:	2a55      	cmp	r2, #85	; 0x55
   13b94:	d1d8      	bne.n	13b48 <__cxa_type_match+0x10>
   13b96:	78c4      	ldrb	r4, [r0, #3]
   13b98:	2c43      	cmp	r4, #67	; 0x43
   13b9a:	d1d5      	bne.n	13b48 <__cxa_type_match+0x10>
   13b9c:	7905      	ldrb	r5, [r0, #4]
   13b9e:	2d46      	cmp	r5, #70	; 0x46
   13ba0:	d015      	beq.n	13bce <__cxa_type_match+0x96>
   13ba2:	7903      	ldrb	r3, [r0, #4]
   13ba4:	2b43      	cmp	r3, #67	; 0x43
   13ba6:	d1cf      	bne.n	13b48 <__cxa_type_match+0x10>
   13ba8:	7941      	ldrb	r1, [r0, #5]
   13baa:	292b      	cmp	r1, #43	; 0x2b
   13bac:	d1cc      	bne.n	13b48 <__cxa_type_match+0x10>
   13bae:	7982      	ldrb	r2, [r0, #6]
   13bb0:	2a2b      	cmp	r2, #43	; 0x2b
   13bb2:	d1c9      	bne.n	13b48 <__cxa_type_match+0x10>
   13bb4:	79c4      	ldrb	r4, [r0, #7]
   13bb6:	2c01      	cmp	r4, #1
   13bb8:	d8c6      	bhi.n	13b48 <__cxa_type_match+0x10>
   13bba:	bf0b      	itete	eq
   13bbc:	f850 0c20 	ldreq.w	r0, [r0, #-32]
   13bc0:	f850 8c20 	ldrne.w	r8, [r0, #-32]
   13bc4:	f850 8c78 	ldreq.w	r8, [r0, #-120]
   13bc8:	3058      	addne	r0, #88	; 0x58
   13bca:	9001      	str	r0, [sp, #4]
   13bcc:	e7c2      	b.n	13b54 <__cxa_type_match+0x1c>
   13bce:	f890 c005 	ldrb.w	ip, [r0, #5]
   13bd2:	f1bc 0f4f 	cmp.w	ip, #79	; 0x4f
   13bd6:	d1e4      	bne.n	13ba2 <__cxa_type_match+0x6a>
   13bd8:	f890 e006 	ldrb.w	lr, [r0, #6]
   13bdc:	f1be 0f52 	cmp.w	lr, #82	; 0x52
   13be0:	d1df      	bne.n	13ba2 <__cxa_type_match+0x6a>
   13be2:	79c3      	ldrb	r3, [r0, #7]
   13be4:	2b00      	cmp	r3, #0
   13be6:	d1dc      	bne.n	13ba2 <__cxa_type_match+0x6a>
   13be8:	f64b 6840 	movw	r8, #48704	; 0xbe40
   13bec:	9301      	str	r3, [sp, #4]
   13bee:	f2c0 0802 	movt	r8, #2
   13bf2:	e7af      	b.n	13b54 <__cxa_type_match+0x1c>

00013bf4 <__cxa_begin_cleanup>:
   13bf4:	b510      	push	{r4, lr}
   13bf6:	4604      	mov	r4, r0
   13bf8:	f000 f9f4 	bl	13fe4 <__cxa_get_globals>
   13bfc:	f1a4 0220 	sub.w	r2, r4, #32
   13c00:	7823      	ldrb	r3, [r4, #0]
   13c02:	2b47      	cmp	r3, #71	; 0x47
   13c04:	d005      	beq.n	13c12 <__cxa_begin_cleanup+0x1e>
   13c06:	6881      	ldr	r1, [r0, #8]
   13c08:	2900      	cmp	r1, #0
   13c0a:	d12c      	bne.n	13c66 <__cxa_begin_cleanup+0x72>
   13c0c:	6082      	str	r2, [r0, #8]
   13c0e:	2001      	movs	r0, #1
   13c10:	bd10      	pop	{r4, pc}
   13c12:	7861      	ldrb	r1, [r4, #1]
   13c14:	294e      	cmp	r1, #78	; 0x4e
   13c16:	d1f6      	bne.n	13c06 <__cxa_begin_cleanup+0x12>
   13c18:	f894 c002 	ldrb.w	ip, [r4, #2]
   13c1c:	f1bc 0f55 	cmp.w	ip, #85	; 0x55
   13c20:	d1f1      	bne.n	13c06 <__cxa_begin_cleanup+0x12>
   13c22:	f894 e003 	ldrb.w	lr, [r4, #3]
   13c26:	f1be 0f43 	cmp.w	lr, #67	; 0x43
   13c2a:	d1ec      	bne.n	13c06 <__cxa_begin_cleanup+0x12>
   13c2c:	7923      	ldrb	r3, [r4, #4]
   13c2e:	2b43      	cmp	r3, #67	; 0x43
   13c30:	d1e9      	bne.n	13c06 <__cxa_begin_cleanup+0x12>
   13c32:	7961      	ldrb	r1, [r4, #5]
   13c34:	292b      	cmp	r1, #43	; 0x2b
   13c36:	d1e6      	bne.n	13c06 <__cxa_begin_cleanup+0x12>
   13c38:	f894 c006 	ldrb.w	ip, [r4, #6]
   13c3c:	f1bc 0f2b 	cmp.w	ip, #43	; 0x2b
   13c40:	d1e1      	bne.n	13c06 <__cxa_begin_cleanup+0x12>
   13c42:	f894 e007 	ldrb.w	lr, [r4, #7]
   13c46:	f1be 0f01 	cmp.w	lr, #1
   13c4a:	d8dc      	bhi.n	13c06 <__cxa_begin_cleanup+0x12>
   13c4c:	f854 1c04 	ldr.w	r1, [r4, #-4]
   13c50:	1c4b      	adds	r3, r1, #1
   13c52:	f844 3c04 	str.w	r3, [r4, #-4]
   13c56:	2b01      	cmp	r3, #1
   13c58:	d1d9      	bne.n	13c0e <__cxa_begin_cleanup+0x1a>
   13c5a:	6883      	ldr	r3, [r0, #8]
   13c5c:	f844 3c08 	str.w	r3, [r4, #-8]
   13c60:	6082      	str	r2, [r0, #8]
   13c62:	2001      	movs	r0, #1
   13c64:	bd10      	pop	{r4, pc}
   13c66:	f7ff fe4f 	bl	13908 <std::terminate()>
   13c6a:	bf00      	nop

00013c6c <__gnu_end_cleanup>:
   13c6c:	b508      	push	{r3, lr}
   13c6e:	f000 f9b9 	bl	13fe4 <__cxa_get_globals>
   13c72:	6883      	ldr	r3, [r0, #8]
   13c74:	2b00      	cmp	r3, #0
   13c76:	d034      	beq.n	13ce2 <__gnu_end_cleanup+0x76>
   13c78:	f893 2020 	ldrb.w	r2, [r3, #32]
   13c7c:	2a47      	cmp	r2, #71	; 0x47
   13c7e:	d004      	beq.n	13c8a <__gnu_end_cleanup+0x1e>
   13c80:	2100      	movs	r1, #0
   13c82:	6081      	str	r1, [r0, #8]
   13c84:	f103 0020 	add.w	r0, r3, #32
   13c88:	bd08      	pop	{r3, pc}
   13c8a:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
   13c8e:	294e      	cmp	r1, #78	; 0x4e
   13c90:	d1f6      	bne.n	13c80 <__gnu_end_cleanup+0x14>
   13c92:	f893 c022 	ldrb.w	ip, [r3, #34]	; 0x22
   13c96:	f1bc 0f55 	cmp.w	ip, #85	; 0x55
   13c9a:	d1f1      	bne.n	13c80 <__gnu_end_cleanup+0x14>
   13c9c:	f893 e023 	ldrb.w	lr, [r3, #35]	; 0x23
   13ca0:	f1be 0f43 	cmp.w	lr, #67	; 0x43
   13ca4:	d1ec      	bne.n	13c80 <__gnu_end_cleanup+0x14>
   13ca6:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   13caa:	2a43      	cmp	r2, #67	; 0x43
   13cac:	d1e8      	bne.n	13c80 <__gnu_end_cleanup+0x14>
   13cae:	f893 1025 	ldrb.w	r1, [r3, #37]	; 0x25
   13cb2:	292b      	cmp	r1, #43	; 0x2b
   13cb4:	d1e4      	bne.n	13c80 <__gnu_end_cleanup+0x14>
   13cb6:	f893 c026 	ldrb.w	ip, [r3, #38]	; 0x26
   13cba:	f1bc 0f2b 	cmp.w	ip, #43	; 0x2b
   13cbe:	d1df      	bne.n	13c80 <__gnu_end_cleanup+0x14>
   13cc0:	f893 e027 	ldrb.w	lr, [r3, #39]	; 0x27
   13cc4:	f1be 0f01 	cmp.w	lr, #1
   13cc8:	d8da      	bhi.n	13c80 <__gnu_end_cleanup+0x14>
   13cca:	69d9      	ldr	r1, [r3, #28]
   13ccc:	1e4a      	subs	r2, r1, #1
   13cce:	61da      	str	r2, [r3, #28]
   13cd0:	2a00      	cmp	r2, #0
   13cd2:	d1d7      	bne.n	13c84 <__gnu_end_cleanup+0x18>
   13cd4:	699a      	ldr	r2, [r3, #24]
   13cd6:	6082      	str	r2, [r0, #8]
   13cd8:	2000      	movs	r0, #0
   13cda:	6198      	str	r0, [r3, #24]
   13cdc:	f103 0020 	add.w	r0, r3, #32
   13ce0:	bd08      	pop	{r3, pc}
   13ce2:	f7ff fe11 	bl	13908 <std::terminate()>
   13ce6:	bf00      	nop

00013ce8 <__cxa_begin_catch>:
   13ce8:	b538      	push	{r3, r4, r5, lr}
   13cea:	4605      	mov	r5, r0
   13cec:	f000 f97a 	bl	13fe4 <__cxa_get_globals>
   13cf0:	f1a5 0320 	sub.w	r3, r5, #32
   13cf4:	782a      	ldrb	r2, [r5, #0]
   13cf6:	2a47      	cmp	r2, #71	; 0x47
   13cf8:	6804      	ldr	r4, [r0, #0]
   13cfa:	d004      	beq.n	13d06 <__cxa_begin_catch+0x1e>
   13cfc:	2c00      	cmp	r4, #0
   13cfe:	d137      	bne.n	13d70 <__cxa_begin_catch+0x88>
   13d00:	6003      	str	r3, [r0, #0]
   13d02:	4620      	mov	r0, r4
   13d04:	bd38      	pop	{r3, r4, r5, pc}
   13d06:	7869      	ldrb	r1, [r5, #1]
   13d08:	294e      	cmp	r1, #78	; 0x4e
   13d0a:	d1f7      	bne.n	13cfc <__cxa_begin_catch+0x14>
   13d0c:	f895 c002 	ldrb.w	ip, [r5, #2]
   13d10:	f1bc 0f55 	cmp.w	ip, #85	; 0x55
   13d14:	d1f2      	bne.n	13cfc <__cxa_begin_catch+0x14>
   13d16:	f895 e003 	ldrb.w	lr, [r5, #3]
   13d1a:	f1be 0f43 	cmp.w	lr, #67	; 0x43
   13d1e:	d1ed      	bne.n	13cfc <__cxa_begin_catch+0x14>
   13d20:	792a      	ldrb	r2, [r5, #4]
   13d22:	2a43      	cmp	r2, #67	; 0x43
   13d24:	d1ea      	bne.n	13cfc <__cxa_begin_catch+0x14>
   13d26:	7969      	ldrb	r1, [r5, #5]
   13d28:	292b      	cmp	r1, #43	; 0x2b
   13d2a:	d1e7      	bne.n	13cfc <__cxa_begin_catch+0x14>
   13d2c:	f895 c006 	ldrb.w	ip, [r5, #6]
   13d30:	f1bc 0f2b 	cmp.w	ip, #43	; 0x2b
   13d34:	d1e2      	bne.n	13cfc <__cxa_begin_catch+0x14>
   13d36:	f895 e007 	ldrb.w	lr, [r5, #7]
   13d3a:	f1be 0f01 	cmp.w	lr, #1
   13d3e:	d8dd      	bhi.n	13cfc <__cxa_begin_catch+0x14>
   13d40:	f855 1c0c 	ldr.w	r1, [r5, #-12]
   13d44:	2900      	cmp	r1, #0
   13d46:	db10      	blt.n	13d6a <__cxa_begin_catch+0x82>
   13d48:	3101      	adds	r1, #1
   13d4a:	6842      	ldr	r2, [r0, #4]
   13d4c:	f845 1c0c 	str.w	r1, [r5, #-12]
   13d50:	3a01      	subs	r2, #1
   13d52:	42a3      	cmp	r3, r4
   13d54:	6042      	str	r2, [r0, #4]
   13d56:	bf1c      	itt	ne
   13d58:	f845 4c10 	strne.w	r4, [r5, #-16]
   13d5c:	6003      	strne	r3, [r0, #0]
   13d5e:	4628      	mov	r0, r5
   13d60:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   13d62:	f011 fdf9 	bl	25958 <_Unwind_Complete>
   13d66:	4620      	mov	r0, r4
   13d68:	bd38      	pop	{r3, r4, r5, pc}
   13d6a:	f1c1 0101 	rsb	r1, r1, #1
   13d6e:	e7ec      	b.n	13d4a <__cxa_begin_catch+0x62>
   13d70:	f7ff fdca 	bl	13908 <std::terminate()>
   13d74:	3101      	adds	r1, #1
   13d76:	d001      	beq.n	13d7c <__cxa_begin_catch+0x94>
   13d78:	f7ff fed8 	bl	13b2c <__cxa_end_cleanup>
   13d7c:	f7ff fe02 	bl	13984 <__cxa_call_unexpected>

00013d80 <__cxa_end_catch>:
   13d80:	b508      	push	{r3, lr}
   13d82:	f000 f929 	bl	13fd8 <__cxa_get_globals_fast>
   13d86:	4603      	mov	r3, r0
   13d88:	6800      	ldr	r0, [r0, #0]
   13d8a:	2800      	cmp	r0, #0
   13d8c:	d041      	beq.n	13e12 <__cxa_end_catch+0x92>
   13d8e:	f890 2020 	ldrb.w	r2, [r0, #32]
   13d92:	2a47      	cmp	r2, #71	; 0x47
   13d94:	d006      	beq.n	13da4 <__cxa_end_catch+0x24>
   13d96:	2100      	movs	r1, #0
   13d98:	3020      	adds	r0, #32
   13d9a:	6019      	str	r1, [r3, #0]
   13d9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   13da0:	f011 bddc 	b.w	2595c <_Unwind_DeleteException>
   13da4:	f890 1021 	ldrb.w	r1, [r0, #33]	; 0x21
   13da8:	294e      	cmp	r1, #78	; 0x4e
   13daa:	d1f4      	bne.n	13d96 <__cxa_end_catch+0x16>
   13dac:	f890 c022 	ldrb.w	ip, [r0, #34]	; 0x22
   13db0:	f1bc 0f55 	cmp.w	ip, #85	; 0x55
   13db4:	d1ef      	bne.n	13d96 <__cxa_end_catch+0x16>
   13db6:	f890 e023 	ldrb.w	lr, [r0, #35]	; 0x23
   13dba:	f1be 0f43 	cmp.w	lr, #67	; 0x43
   13dbe:	d1ea      	bne.n	13d96 <__cxa_end_catch+0x16>
   13dc0:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   13dc4:	2a43      	cmp	r2, #67	; 0x43
   13dc6:	d1e6      	bne.n	13d96 <__cxa_end_catch+0x16>
   13dc8:	f890 1025 	ldrb.w	r1, [r0, #37]	; 0x25
   13dcc:	292b      	cmp	r1, #43	; 0x2b
   13dce:	d1e2      	bne.n	13d96 <__cxa_end_catch+0x16>
   13dd0:	f890 c026 	ldrb.w	ip, [r0, #38]	; 0x26
   13dd4:	f1bc 0f2b 	cmp.w	ip, #43	; 0x2b
   13dd8:	d1dd      	bne.n	13d96 <__cxa_end_catch+0x16>
   13dda:	f890 e027 	ldrb.w	lr, [r0, #39]	; 0x27
   13dde:	f1be 0f01 	cmp.w	lr, #1
   13de2:	d8d8      	bhi.n	13d96 <__cxa_end_catch+0x16>
   13de4:	6942      	ldr	r2, [r0, #20]
   13de6:	2a00      	cmp	r2, #0
   13de8:	db05      	blt.n	13df6 <__cxa_end_catch+0x76>
   13dea:	3a01      	subs	r2, #1
   13dec:	d008      	beq.n	13e00 <__cxa_end_catch+0x80>
   13dee:	1c53      	adds	r3, r2, #1
   13df0:	d00d      	beq.n	13e0e <__cxa_end_catch+0x8e>
   13df2:	6142      	str	r2, [r0, #20]
   13df4:	bd08      	pop	{r3, pc}
   13df6:	3201      	adds	r2, #1
   13df8:	d1fb      	bne.n	13df2 <__cxa_end_catch+0x72>
   13dfa:	6901      	ldr	r1, [r0, #16]
   13dfc:	6019      	str	r1, [r3, #0]
   13dfe:	e7f8      	b.n	13df2 <__cxa_end_catch+0x72>
   13e00:	6902      	ldr	r2, [r0, #16]
   13e02:	3020      	adds	r0, #32
   13e04:	601a      	str	r2, [r3, #0]
   13e06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   13e0a:	f011 bda7 	b.w	2595c <_Unwind_DeleteException>
   13e0e:	f7ff fd7b 	bl	13908 <std::terminate()>
   13e12:	bd08      	pop	{r3, pc}

00013e14 <__cxa_allocate_exception>:
   13e14:	b538      	push	{r3, r4, r5, lr}
   13e16:	f100 0580 	add.w	r5, r0, #128	; 0x80
   13e1a:	4628      	mov	r0, r5
   13e1c:	f00b f8e2 	bl	1efe4 <malloc>
   13e20:	4604      	mov	r4, r0
   13e22:	b168      	cbz	r0, 13e40 <__cxa_allocate_exception+0x2c>
   13e24:	f000 f8de 	bl	13fe4 <__cxa_get_globals>
   13e28:	2100      	movs	r1, #0
   13e2a:	2280      	movs	r2, #128	; 0x80
   13e2c:	4603      	mov	r3, r0
   13e2e:	4620      	mov	r0, r4
   13e30:	685d      	ldr	r5, [r3, #4]
   13e32:	3501      	adds	r5, #1
   13e34:	605d      	str	r5, [r3, #4]
   13e36:	f00b fced 	bl	1f814 <memset>
   13e3a:	f104 0080 	add.w	r0, r4, #128	; 0x80
   13e3e:	bd38      	pop	{r3, r4, r5, pc}
   13e40:	f642 137c 	movw	r3, #10620	; 0x297c
   13e44:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   13e48:	f2c1 0300 	movt	r3, #4096	; 0x1000
   13e4c:	681a      	ldr	r2, [r3, #0]
   13e4e:	d901      	bls.n	13e54 <__cxa_allocate_exception+0x40>
   13e50:	f7ff fd5a 	bl	13908 <std::terminate()>
   13e54:	f012 0101 	ands.w	r1, r2, #1
   13e58:	d006      	beq.n	13e68 <__cxa_allocate_exception+0x54>
   13e5a:	0794      	lsls	r4, r2, #30
   13e5c:	d510      	bpl.n	13e80 <__cxa_allocate_exception+0x6c>
   13e5e:	0750      	lsls	r0, r2, #29
   13e60:	d510      	bpl.n	13e84 <__cxa_allocate_exception+0x70>
   13e62:	0711      	lsls	r1, r2, #28
   13e64:	d4f4      	bmi.n	13e50 <__cxa_allocate_exception+0x3c>
   13e66:	2103      	movs	r1, #3
   13e68:	2501      	movs	r5, #1
   13e6a:	f642 1080 	movw	r0, #10624	; 0x2980
   13e6e:	024c      	lsls	r4, r1, #9
   13e70:	f2c1 0000 	movt	r0, #4096	; 0x1000
   13e74:	fa05 f101 	lsl.w	r1, r5, r1
   13e78:	1904      	adds	r4, r0, r4
   13e7a:	430a      	orrs	r2, r1
   13e7c:	601a      	str	r2, [r3, #0]
   13e7e:	e7d1      	b.n	13e24 <__cxa_allocate_exception+0x10>
   13e80:	2101      	movs	r1, #1
   13e82:	e7f1      	b.n	13e68 <__cxa_allocate_exception+0x54>
   13e84:	2102      	movs	r1, #2
   13e86:	e7ef      	b.n	13e68 <__cxa_allocate_exception+0x54>

00013e88 <__cxa_free_exception>:
   13e88:	f642 1380 	movw	r3, #10624	; 0x2980
   13e8c:	f2c1 0300 	movt	r3, #4096	; 0x1000
   13e90:	4298      	cmp	r0, r3
   13e92:	d313      	bcc.n	13ebc <__cxa_free_exception+0x34>
   13e94:	f503 6200 	add.w	r2, r3, #2048	; 0x800
   13e98:	4290      	cmp	r0, r2
   13e9a:	d20f      	bcs.n	13ebc <__cxa_free_exception+0x34>
   13e9c:	f642 1c7c 	movw	ip, #10620	; 0x297c
   13ea0:	1ac0      	subs	r0, r0, r3
   13ea2:	f2c1 0c00 	movt	ip, #4096	; 0x1000
   13ea6:	2301      	movs	r3, #1
   13ea8:	0a42      	lsrs	r2, r0, #9
   13eaa:	f8dc 1000 	ldr.w	r1, [ip]
   13eae:	fa03 f002 	lsl.w	r0, r3, r2
   13eb2:	ea21 0300 	bic.w	r3, r1, r0
   13eb6:	f8cc 3000 	str.w	r3, [ip]
   13eba:	4770      	bx	lr
   13ebc:	3880      	subs	r0, #128	; 0x80
   13ebe:	f00b b899 	b.w	1eff4 <free>
   13ec2:	bf00      	nop

00013ec4 <__cxxabiv1::__si_class_type_info::~__si_class_type_info()>:
   13ec4:	4b03      	ldr	r3, [pc, #12]	; (13ed4 <__cxxabiv1::__si_class_type_info::~__si_class_type_info()+0x10>)
   13ec6:	b510      	push	{r4, lr}
   13ec8:	4604      	mov	r4, r0
   13eca:	6003      	str	r3, [r0, #0]
   13ecc:	f00a fb4a 	bl	1e564 <__cxxabiv1::__class_type_info::~__class_type_info()>
   13ed0:	4620      	mov	r0, r4
   13ed2:	bd10      	pop	{r4, pc}
   13ed4:	0002b0a0 	.word	0x0002b0a0

00013ed8 <__cxxabiv1::__si_class_type_info::~__si_class_type_info()>:
   13ed8:	b510      	push	{r4, lr}
   13eda:	4604      	mov	r4, r0
   13edc:	f7ff fff2 	bl	13ec4 <__cxxabiv1::__si_class_type_info::~__si_class_type_info()>
   13ee0:	4620      	mov	r0, r4
   13ee2:	f7ff fcf9 	bl	138d8 <operator delete(void*)>
   13ee6:	4620      	mov	r0, r4
   13ee8:	bd10      	pop	{r4, pc}
   13eea:	bf00      	nop

00013eec <__cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>:
   13eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13eee:	4607      	mov	r7, r0
   13ef0:	460e      	mov	r6, r1
   13ef2:	4615      	mov	r5, r2
   13ef4:	461c      	mov	r4, r3
   13ef6:	f00a fb27 	bl	1e548 <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>
   13efa:	b108      	cbz	r0, 13f00 <__cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const+0x14>
   13efc:	2001      	movs	r0, #1
   13efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13f00:	68bf      	ldr	r7, [r7, #8]
   13f02:	4623      	mov	r3, r4
   13f04:	4631      	mov	r1, r6
   13f06:	462a      	mov	r2, r5
   13f08:	4638      	mov	r0, r7
   13f0a:	683c      	ldr	r4, [r7, #0]
   13f0c:	69a4      	ldr	r4, [r4, #24]
   13f0e:	47a0      	blx	r4
   13f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13f12:	bf00      	nop

00013f14 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const>:
   13f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f18:	b087      	sub	sp, #28
   13f1a:	4688      	mov	r8, r1
   13f1c:	4619      	mov	r1, r3
   13f1e:	461f      	mov	r7, r3
   13f20:	4681      	mov	r9, r0
   13f22:	4692      	mov	sl, r2
   13f24:	9d10      	ldr	r5, [sp, #64]	; 0x40
   13f26:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
   13f2a:	9e12      	ldr	r6, [sp, #72]	; 0x48
   13f2c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   13f2e:	f000 f875 	bl	1401c <std::type_info::operator==(std::type_info const&) const>
   13f32:	4603      	mov	r3, r0
   13f34:	b168      	cbz	r0, 13f52 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x3e>
   13f36:	f1b8 0f00 	cmp.w	r8, #0
   13f3a:	6025      	str	r5, [r4, #0]
   13f3c:	f884 a004 	strb.w	sl, [r4, #4]
   13f40:	db1a      	blt.n	13f78 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x64>
   13f42:	4445      	add	r5, r8
   13f44:	2000      	movs	r0, #0
   13f46:	42ae      	cmp	r6, r5
   13f48:	bf14      	ite	ne
   13f4a:	2601      	movne	r6, #1
   13f4c:	2606      	moveq	r6, #6
   13f4e:	71a6      	strb	r6, [r4, #6]
   13f50:	e00f      	b.n	13f72 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x5e>
   13f52:	42b5      	cmp	r5, r6
   13f54:	d017      	beq.n	13f86 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x72>
   13f56:	f8d9 e008 	ldr.w	lr, [r9, #8]
   13f5a:	463b      	mov	r3, r7
   13f5c:	4641      	mov	r1, r8
   13f5e:	4652      	mov	r2, sl
   13f60:	4670      	mov	r0, lr
   13f62:	f8de 7000 	ldr.w	r7, [lr]
   13f66:	9602      	str	r6, [sp, #8]
   13f68:	9403      	str	r4, [sp, #12]
   13f6a:	e88d 0820 	stmia.w	sp, {r5, fp}
   13f6e:	69fc      	ldr	r4, [r7, #28]
   13f70:	47a0      	blx	r4
   13f72:	b007      	add	sp, #28
   13f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f78:	2000      	movs	r0, #0
   13f7a:	f118 0f02 	cmn.w	r8, #2
   13f7e:	d1f8      	bne.n	13f72 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x5e>
   13f80:	2301      	movs	r3, #1
   13f82:	71a3      	strb	r3, [r4, #6]
   13f84:	e7f5      	b.n	13f72 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x5e>
   13f86:	4648      	mov	r0, r9
   13f88:	4659      	mov	r1, fp
   13f8a:	9305      	str	r3, [sp, #20]
   13f8c:	f000 f846 	bl	1401c <std::type_info::operator==(std::type_info const&) const>
   13f90:	9b05      	ldr	r3, [sp, #20]
   13f92:	2800      	cmp	r0, #0
   13f94:	d0df      	beq.n	13f56 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x42>
   13f96:	f884 a005 	strb.w	sl, [r4, #5]
   13f9a:	4618      	mov	r0, r3
   13f9c:	e7e9      	b.n	13f72 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x5e>
   13f9e:	bf00      	nop

00013fa0 <__cxxabiv1::__si_class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const>:
   13fa0:	b570      	push	{r4, r5, r6, lr}
   13fa2:	b084      	sub	sp, #16
   13fa4:	4605      	mov	r5, r0
   13fa6:	460e      	mov	r6, r1
   13fa8:	9c08      	ldr	r4, [sp, #32]
   13faa:	4294      	cmp	r4, r2
   13fac:	d008      	beq.n	13fc0 <__cxxabiv1::__si_class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const+0x20>
   13fae:	68ad      	ldr	r5, [r5, #8]
   13fb0:	4631      	mov	r1, r6
   13fb2:	4628      	mov	r0, r5
   13fb4:	682d      	ldr	r5, [r5, #0]
   13fb6:	9400      	str	r4, [sp, #0]
   13fb8:	6a2c      	ldr	r4, [r5, #32]
   13fba:	47a0      	blx	r4
   13fbc:	b004      	add	sp, #16
   13fbe:	bd70      	pop	{r4, r5, r6, pc}
   13fc0:	4619      	mov	r1, r3
   13fc2:	9203      	str	r2, [sp, #12]
   13fc4:	9302      	str	r3, [sp, #8]
   13fc6:	f000 f829 	bl	1401c <std::type_info::operator==(std::type_info const&) const>
   13fca:	9a03      	ldr	r2, [sp, #12]
   13fcc:	9b02      	ldr	r3, [sp, #8]
   13fce:	2800      	cmp	r0, #0
   13fd0:	d0ed      	beq.n	13fae <__cxxabiv1::__si_class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const+0xe>
   13fd2:	2006      	movs	r0, #6
   13fd4:	e7f2      	b.n	13fbc <__cxxabiv1::__si_class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const+0x1c>
   13fd6:	bf00      	nop

00013fd8 <__cxa_get_globals_fast>:
   13fd8:	f243 1080 	movw	r0, #12672	; 0x3180
   13fdc:	f2c1 0000 	movt	r0, #4096	; 0x1000
   13fe0:	4770      	bx	lr
   13fe2:	bf00      	nop

00013fe4 <__cxa_get_globals>:
   13fe4:	f243 1080 	movw	r0, #12672	; 0x3180
   13fe8:	f2c1 0000 	movt	r0, #4096	; 0x1000
   13fec:	4770      	bx	lr
   13fee:	bf00      	nop

00013ff0 <std::type_info::~type_info()>:
   13ff0:	4b01      	ldr	r3, [pc, #4]	; (13ff8 <std::type_info::~type_info()+0x8>)
   13ff2:	6003      	str	r3, [r0, #0]
   13ff4:	4770      	bx	lr
   13ff6:	bf00      	nop
   13ff8:	0002b120 	.word	0x0002b120

00013ffc <std::type_info::__is_pointer_p() const>:
   13ffc:	2000      	movs	r0, #0
   13ffe:	4770      	bx	lr

00014000 <std::type_info::__is_function_p() const>:
   14000:	2000      	movs	r0, #0
   14002:	4770      	bx	lr

00014004 <std::type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const>:
   14004:	2000      	movs	r0, #0
   14006:	4770      	bx	lr

00014008 <std::type_info::~type_info()>:
   14008:	4b03      	ldr	r3, [pc, #12]	; (14018 <std::type_info::~type_info()+0x10>)
   1400a:	b510      	push	{r4, lr}
   1400c:	4604      	mov	r4, r0
   1400e:	6003      	str	r3, [r0, #0]
   14010:	f7ff fc62 	bl	138d8 <operator delete(void*)>
   14014:	4620      	mov	r0, r4
   14016:	bd10      	pop	{r4, pc}
   14018:	0002b120 	.word	0x0002b120

0001401c <std::type_info::operator==(std::type_info const&) const>:
   1401c:	4281      	cmp	r1, r0
   1401e:	b508      	push	{r3, lr}
   14020:	d018      	beq.n	14054 <std::type_info::operator==(std::type_info const&) const+0x38>
   14022:	6840      	ldr	r0, [r0, #4]
   14024:	7803      	ldrb	r3, [r0, #0]
   14026:	2b2a      	cmp	r3, #42	; 0x2a
   14028:	d00d      	beq.n	14046 <std::type_info::operator==(std::type_info const&) const+0x2a>
   1402a:	6849      	ldr	r1, [r1, #4]
   1402c:	f891 c000 	ldrb.w	ip, [r1]
   14030:	f1bc 0f2a 	cmp.w	ip, #42	; 0x2a
   14034:	bf08      	it	eq
   14036:	3101      	addeq	r1, #1
   14038:	f00c f880 	bl	2013c <strcmp>
   1403c:	f1d0 0001 	rsbs	r0, r0, #1
   14040:	bf38      	it	cc
   14042:	2000      	movcc	r0, #0
   14044:	bd08      	pop	{r3, pc}
   14046:	7842      	ldrb	r2, [r0, #1]
   14048:	2a2a      	cmp	r2, #42	; 0x2a
   1404a:	d101      	bne.n	14050 <std::type_info::operator==(std::type_info const&) const+0x34>
   1404c:	2000      	movs	r0, #0
   1404e:	bd08      	pop	{r3, pc}
   14050:	3001      	adds	r0, #1
   14052:	e7ea      	b.n	1402a <std::type_info::operator==(std::type_info const&) const+0xe>
   14054:	2001      	movs	r0, #1
   14056:	bd08      	pop	{r3, pc}

00014058 <std::type_info::__do_catch(std::type_info const*, void**, unsigned int) const>:
   14058:	f7ff bfe0 	b.w	1401c <std::type_info::operator==(std::type_info const&) const>

0001405c <__gnu_cxx::__verbose_terminate_handler()>:
   1405c:	f243 138c 	movw	r3, #12684	; 0x318c
   14060:	f2c1 0300 	movt	r3, #4096	; 0x1000
   14064:	b570      	push	{r4, r5, r6, lr}
   14066:	b082      	sub	sp, #8
   14068:	781a      	ldrb	r2, [r3, #0]
   1406a:	2a00      	cmp	r2, #0
   1406c:	d13e      	bne.n	140ec <__gnu_cxx::__verbose_terminate_handler()+0x90>
   1406e:	2401      	movs	r4, #1
   14070:	701c      	strb	r4, [r3, #0]
   14072:	f00a fabd 	bl	1e5f0 <__cxa_current_exception_type>
   14076:	2800      	cmp	r0, #0
   14078:	d056      	beq.n	14128 <__gnu_cxx::__verbose_terminate_handler()+0xcc>
   1407a:	6845      	ldr	r5, [r0, #4]
   1407c:	ab02      	add	r3, sp, #8
   1407e:	f04f 36ff 	mov.w	r6, #4294967295
   14082:	7829      	ldrb	r1, [r5, #0]
   14084:	f843 6d04 	str.w	r6, [r3, #-4]!
   14088:	292a      	cmp	r1, #42	; 0x2a
   1408a:	bf08      	it	eq
   1408c:	192d      	addeq	r5, r5, r4
   1408e:	2100      	movs	r1, #0
   14090:	460a      	mov	r2, r1
   14092:	4628      	mov	r0, r5
   14094:	f009 fe18 	bl	1dcc8 <__cxa_demangle>
   14098:	f240 0428 	movw	r4, #40	; 0x28
   1409c:	f2c1 0400 	movt	r4, #4096	; 0x1000
   140a0:	2101      	movs	r1, #1
   140a2:	2230      	movs	r2, #48	; 0x30
   140a4:	6823      	ldr	r3, [r4, #0]
   140a6:	68db      	ldr	r3, [r3, #12]
   140a8:	4606      	mov	r6, r0
   140aa:	f24b 1058 	movw	r0, #45400	; 0xb158
   140ae:	f2c0 0002 	movt	r0, #2
   140b2:	f00a ff5d 	bl	1ef70 <fwrite>
   140b6:	9801      	ldr	r0, [sp, #4]
   140b8:	b190      	cbz	r0, 140e0 <__gnu_cxx::__verbose_terminate_handler()+0x84>
   140ba:	6822      	ldr	r2, [r4, #0]
   140bc:	4628      	mov	r0, r5
   140be:	68d1      	ldr	r1, [r2, #12]
   140c0:	f00a fd6a 	bl	1eb98 <fputs>
   140c4:	6823      	ldr	r3, [r4, #0]
   140c6:	f24b 108c 	movw	r0, #45452	; 0xb18c
   140ca:	f2c0 0002 	movt	r0, #2
   140ce:	2101      	movs	r1, #1
   140d0:	2202      	movs	r2, #2
   140d2:	68db      	ldr	r3, [r3, #12]
   140d4:	f00a ff4c 	bl	1ef70 <fwrite>
   140d8:	9801      	ldr	r0, [sp, #4]
   140da:	b1b8      	cbz	r0, 1410c <__gnu_cxx::__verbose_terminate_handler()+0xb0>
   140dc:	f009 ff02 	bl	1dee4 <__cxa_rethrow>
   140e0:	6825      	ldr	r5, [r4, #0]
   140e2:	4630      	mov	r0, r6
   140e4:	68e9      	ldr	r1, [r5, #12]
   140e6:	f00a fd57 	bl	1eb98 <fputs>
   140ea:	e7eb      	b.n	140c4 <__gnu_cxx::__verbose_terminate_handler()+0x68>
   140ec:	f240 0428 	movw	r4, #40	; 0x28
   140f0:	f24b 1038 	movw	r0, #45368	; 0xb138
   140f4:	f2c1 0400 	movt	r4, #4096	; 0x1000
   140f8:	2101      	movs	r1, #1
   140fa:	221d      	movs	r2, #29
   140fc:	f2c0 0002 	movt	r0, #2
   14100:	6823      	ldr	r3, [r4, #0]
   14102:	68db      	ldr	r3, [r3, #12]
   14104:	f00a ff34 	bl	1ef70 <fwrite>
   14108:	f00a fc98 	bl	1ea3c <abort>
   1410c:	4630      	mov	r0, r6
   1410e:	f00a ff71 	bl	1eff4 <free>
   14112:	f009 fee7 	bl	1dee4 <__cxa_rethrow>
   14116:	2901      	cmp	r1, #1
   14118:	460e      	mov	r6, r1
   1411a:	d016      	beq.n	1414a <__gnu_cxx::__verbose_terminate_handler()+0xee>
   1411c:	f7ff fde4 	bl	13ce8 <__cxa_begin_catch>
   14120:	f7ff fe2e 	bl	13d80 <__cxa_end_catch>
   14124:	f00a fc8a 	bl	1ea3c <abort>
   14128:	f240 0c28 	movw	ip, #40	; 0x28
   1412c:	4621      	mov	r1, r4
   1412e:	f2c1 0c00 	movt	ip, #4096	; 0x1000
   14132:	f24b 1090 	movw	r0, #45456	; 0xb190
   14136:	222d      	movs	r2, #45	; 0x2d
   14138:	f2c0 0002 	movt	r0, #2
   1413c:	f8dc 4000 	ldr.w	r4, [ip]
   14140:	68e3      	ldr	r3, [r4, #12]
   14142:	f00a ff15 	bl	1ef70 <fwrite>
   14146:	f00a fc79 	bl	1ea3c <abort>
   1414a:	f7ff fdcd 	bl	13ce8 <__cxa_begin_catch>
   1414e:	6805      	ldr	r5, [r0, #0]
   14150:	68a9      	ldr	r1, [r5, #8]
   14152:	4788      	blx	r1
   14154:	6823      	ldr	r3, [r4, #0]
   14156:	4631      	mov	r1, r6
   14158:	220b      	movs	r2, #11
   1415a:	68db      	ldr	r3, [r3, #12]
   1415c:	4605      	mov	r5, r0
   1415e:	f24b 10c0 	movw	r0, #45504	; 0xb1c0
   14162:	f2c0 0002 	movt	r0, #2
   14166:	f00a ff03 	bl	1ef70 <fwrite>
   1416a:	6826      	ldr	r6, [r4, #0]
   1416c:	4628      	mov	r0, r5
   1416e:	68f1      	ldr	r1, [r6, #12]
   14170:	f00a fd12 	bl	1eb98 <fputs>
   14174:	6822      	ldr	r2, [r4, #0]
   14176:	200a      	movs	r0, #10
   14178:	68d1      	ldr	r1, [r2, #12]
   1417a:	f00a fca1 	bl	1eac0 <fputc>
   1417e:	f7ff fdff 	bl	13d80 <__cxa_end_catch>
   14182:	e7cf      	b.n	14124 <__gnu_cxx::__verbose_terminate_handler()+0xc8>
   14184:	f7ff fdfc 	bl	13d80 <__cxa_end_catch>
   14188:	f7ff fcd0 	bl	13b2c <__cxa_end_cleanup>

0001418c <d_make_comp>:
   1418c:	b470      	push	{r4, r5, r6}
   1418e:	1e4c      	subs	r4, r1, #1
   14190:	2c41      	cmp	r4, #65	; 0x41
   14192:	d828      	bhi.n	141e6 <d_make_comp+0x5a>
   14194:	e8df f004 	tbb	[pc, r4]
   14198:	3a3a3a3a 	.word	0x3a3a3a3a
   1419c:	27272727 	.word	0x27272727
   141a0:	363a3636 	.word	0x363a3636
   141a4:	36363636 	.word	0x36363636
   141a8:	36363636 	.word	0x36363636
   141ac:	23232736 	.word	0x23232736
   141b0:	23232323 	.word	0x23232323
   141b4:	3636363a 	.word	0x3636363a
   141b8:	36273636 	.word	0x36273636
   141bc:	273a2123 	.word	0x273a2123
   141c0:	2723233a 	.word	0x2723233a
   141c4:	3a3a3627 	.word	0x3a3a3627
   141c8:	3a3a3a3a 	.word	0x3a3a3a3a
   141cc:	3a363a3a 	.word	0x3a363a3a
   141d0:	36362727 	.word	0x36362727
   141d4:	27272736 	.word	0x27272736
   141d8:	3a36      	.short	0x3a36
   141da:	2b00      	cmp	r3, #0
   141dc:	d025      	beq.n	1422a <d_make_comp+0x9e>
   141de:	6944      	ldr	r4, [r0, #20]
   141e0:	6985      	ldr	r5, [r0, #24]
   141e2:	42ac      	cmp	r4, r5
   141e4:	db02      	blt.n	141ec <d_make_comp+0x60>
   141e6:	2000      	movs	r0, #0
   141e8:	bc70      	pop	{r4, r5, r6}
   141ea:	4770      	bx	lr
   141ec:	eb04 0644 	add.w	r6, r4, r4, lsl #1
   141f0:	6905      	ldr	r5, [r0, #16]
   141f2:	3401      	adds	r4, #1
   141f4:	6144      	str	r4, [r0, #20]
   141f6:	00b4      	lsls	r4, r6, #2
   141f8:	1928      	adds	r0, r5, r4
   141fa:	bf1e      	ittt	ne
   141fc:	6042      	strne	r2, [r0, #4]
   141fe:	5529      	strbne	r1, [r5, r4]
   14200:	6083      	strne	r3, [r0, #8]
   14202:	e7f1      	b.n	141e8 <d_make_comp+0x5c>
   14204:	2a00      	cmp	r2, #0
   14206:	d1ea      	bne.n	141de <d_make_comp+0x52>
   14208:	4610      	mov	r0, r2
   1420a:	e7ed      	b.n	141e8 <d_make_comp+0x5c>
   1420c:	f1d2 0401 	rsbs	r4, r2, #1
   14210:	bf38      	it	cc
   14212:	2400      	movcc	r4, #0
   14214:	2b00      	cmp	r3, #0
   14216:	bf08      	it	eq
   14218:	f044 0401 	orreq.w	r4, r4, #1
   1421c:	2c00      	cmp	r4, #0
   1421e:	d1e2      	bne.n	141e6 <d_make_comp+0x5a>
   14220:	6944      	ldr	r4, [r0, #20]
   14222:	6985      	ldr	r5, [r0, #24]
   14224:	42ac      	cmp	r4, r5
   14226:	dade      	bge.n	141e6 <d_make_comp+0x5a>
   14228:	e7e0      	b.n	141ec <d_make_comp+0x60>
   1422a:	4618      	mov	r0, r3
   1422c:	e7dc      	b.n	141e8 <d_make_comp+0x5c>
   1422e:	bf00      	nop

00014230 <d_make_name>:
   14230:	b430      	push	{r4, r5}
   14232:	6943      	ldr	r3, [r0, #20]
   14234:	6984      	ldr	r4, [r0, #24]
   14236:	42a3      	cmp	r3, r4
   14238:	da11      	bge.n	1425e <d_make_name+0x2e>
   1423a:	6904      	ldr	r4, [r0, #16]
   1423c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   14240:	3301      	adds	r3, #1
   14242:	6143      	str	r3, [r0, #20]
   14244:	eb14 0085 	adds.w	r0, r4, r5, lsl #2
   14248:	bf14      	ite	ne
   1424a:	2300      	movne	r3, #0
   1424c:	2301      	moveq	r3, #1
   1424e:	2900      	cmp	r1, #0
   14250:	bf08      	it	eq
   14252:	f043 0301 	orreq.w	r3, r3, #1
   14256:	b953      	cbnz	r3, 1426e <d_make_name+0x3e>
   14258:	b962      	cbnz	r2, 14274 <d_make_name+0x44>
   1425a:	4610      	mov	r0, r2
   1425c:	e008      	b.n	14270 <d_make_name+0x40>
   1425e:	2301      	movs	r3, #1
   14260:	2000      	movs	r0, #0
   14262:	2900      	cmp	r1, #0
   14264:	bf08      	it	eq
   14266:	f043 0301 	orreq.w	r3, r3, #1
   1426a:	2b00      	cmp	r3, #0
   1426c:	d0f4      	beq.n	14258 <d_make_name+0x28>
   1426e:	2000      	movs	r0, #0
   14270:	bc30      	pop	{r4, r5}
   14272:	4770      	bx	lr
   14274:	7003      	strb	r3, [r0, #0]
   14276:	6041      	str	r1, [r0, #4]
   14278:	6082      	str	r2, [r0, #8]
   1427a:	e7f9      	b.n	14270 <d_make_name+0x40>

0001427c <d_number>:
   1427c:	68c2      	ldr	r2, [r0, #12]
   1427e:	b470      	push	{r4, r5, r6}
   14280:	2600      	movs	r6, #0
   14282:	7813      	ldrb	r3, [r2, #0]
   14284:	4605      	mov	r5, r0
   14286:	2b6e      	cmp	r3, #110	; 0x6e
   14288:	d01a      	beq.n	142c0 <d_number+0x44>
   1428a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   1428e:	b2c2      	uxtb	r2, r0
   14290:	2a09      	cmp	r2, #9
   14292:	d81a      	bhi.n	142ca <d_number+0x4e>
   14294:	68ea      	ldr	r2, [r5, #12]
   14296:	2000      	movs	r0, #0
   14298:	4611      	mov	r1, r2
   1429a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1429e:	3201      	adds	r2, #1
   142a0:	60ea      	str	r2, [r5, #12]
   142a2:	eb03 0c40 	add.w	ip, r3, r0, lsl #1
   142a6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   142aa:	f1ac 0030 	sub.w	r0, ip, #48	; 0x30
   142ae:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
   142b2:	b2e4      	uxtb	r4, r4
   142b4:	2c09      	cmp	r4, #9
   142b6:	d9f0      	bls.n	1429a <d_number+0x1e>
   142b8:	b106      	cbz	r6, 142bc <d_number+0x40>
   142ba:	4240      	negs	r0, r0
   142bc:	bc70      	pop	{r4, r5, r6}
   142be:	4770      	bx	lr
   142c0:	1c53      	adds	r3, r2, #1
   142c2:	2601      	movs	r6, #1
   142c4:	60c3      	str	r3, [r0, #12]
   142c6:	7853      	ldrb	r3, [r2, #1]
   142c8:	e7df      	b.n	1428a <d_number+0xe>
   142ca:	2000      	movs	r0, #0
   142cc:	e7f4      	b.n	142b8 <d_number+0x3c>
   142ce:	bf00      	nop

000142d0 <d_cv_qualifiers>:
   142d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   142d2:	4616      	mov	r6, r2
   142d4:	68c3      	ldr	r3, [r0, #12]
   142d6:	4604      	mov	r4, r0
   142d8:	460d      	mov	r5, r1
   142da:	781a      	ldrb	r2, [r3, #0]
   142dc:	e013      	b.n	14306 <d_cv_qualifiers+0x36>
   142de:	2a4b      	cmp	r2, #75	; 0x4b
   142e0:	d133      	bne.n	1434a <d_cv_qualifiers+0x7a>
   142e2:	60e7      	str	r7, [r4, #12]
   142e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   142e6:	2e00      	cmp	r6, #0
   142e8:	bf0c      	ite	eq
   142ea:	2119      	moveq	r1, #25
   142ec:	211c      	movne	r1, #28
   142ee:	1d9a      	adds	r2, r3, #6
   142f0:	6322      	str	r2, [r4, #48]	; 0x30
   142f2:	2200      	movs	r2, #0
   142f4:	4620      	mov	r0, r4
   142f6:	4613      	mov	r3, r2
   142f8:	f7ff ff48 	bl	1418c <d_make_comp>
   142fc:	6028      	str	r0, [r5, #0]
   142fe:	b318      	cbz	r0, 14348 <d_cv_qualifiers+0x78>
   14300:	68e3      	ldr	r3, [r4, #12]
   14302:	1d05      	adds	r5, r0, #4
   14304:	781a      	ldrb	r2, [r3, #0]
   14306:	f1a2 0c72 	sub.w	ip, r2, #114	; 0x72
   1430a:	f1a2 0056 	sub.w	r0, r2, #86	; 0x56
   1430e:	f1dc 0100 	rsbs	r1, ip, #0
   14312:	eb41 010c 	adc.w	r1, r1, ip
   14316:	4247      	negs	r7, r0
   14318:	eb47 0000 	adc.w	r0, r7, r0
   1431c:	ea50 0701 	orrs.w	r7, r0, r1
   14320:	f103 0701 	add.w	r7, r3, #1
   14324:	d0db      	beq.n	142de <d_cv_qualifiers+0xe>
   14326:	60e7      	str	r7, [r4, #12]
   14328:	b189      	cbz	r1, 1434e <d_cv_qualifiers+0x7e>
   1432a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1432c:	2200      	movs	r2, #0
   1432e:	2e00      	cmp	r6, #0
   14330:	bf0c      	ite	eq
   14332:	2117      	moveq	r1, #23
   14334:	211a      	movne	r1, #26
   14336:	4620      	mov	r0, r4
   14338:	3309      	adds	r3, #9
   1433a:	6323      	str	r3, [r4, #48]	; 0x30
   1433c:	4613      	mov	r3, r2
   1433e:	f7ff ff25 	bl	1418c <d_make_comp>
   14342:	6028      	str	r0, [r5, #0]
   14344:	2800      	cmp	r0, #0
   14346:	d1db      	bne.n	14300 <d_cv_qualifiers+0x30>
   14348:	4605      	mov	r5, r0
   1434a:	4628      	mov	r0, r5
   1434c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1434e:	2800      	cmp	r0, #0
   14350:	d0c8      	beq.n	142e4 <d_cv_qualifiers+0x14>
   14352:	6b20      	ldr	r0, [r4, #48]	; 0x30
   14354:	2e00      	cmp	r6, #0
   14356:	bf0c      	ite	eq
   14358:	2118      	moveq	r1, #24
   1435a:	211b      	movne	r1, #27
   1435c:	3009      	adds	r0, #9
   1435e:	6320      	str	r0, [r4, #48]	; 0x30
   14360:	e7c7      	b.n	142f2 <d_cv_qualifiers+0x22>
   14362:	bf00      	nop

00014364 <d_compact_number>:
   14364:	68c3      	ldr	r3, [r0, #12]
   14366:	b510      	push	{r4, lr}
   14368:	4604      	mov	r4, r0
   1436a:	781a      	ldrb	r2, [r3, #0]
   1436c:	2a5f      	cmp	r2, #95	; 0x5f
   1436e:	d00b      	beq.n	14388 <d_compact_number+0x24>
   14370:	2a6e      	cmp	r2, #110	; 0x6e
   14372:	d00d      	beq.n	14390 <d_compact_number+0x2c>
   14374:	f7ff ff82 	bl	1427c <d_number>
   14378:	68e3      	ldr	r3, [r4, #12]
   1437a:	781a      	ldrb	r2, [r3, #0]
   1437c:	3001      	adds	r0, #1
   1437e:	2a5f      	cmp	r2, #95	; 0x5f
   14380:	d003      	beq.n	1438a <d_compact_number+0x26>
   14382:	f04f 30ff 	mov.w	r0, #4294967295
   14386:	bd10      	pop	{r4, pc}
   14388:	2000      	movs	r0, #0
   1438a:	3301      	adds	r3, #1
   1438c:	60e3      	str	r3, [r4, #12]
   1438e:	bd10      	pop	{r4, pc}
   14390:	f04f 30ff 	mov.w	r0, #4294967295
   14394:	bd10      	pop	{r4, pc}
   14396:	bf00      	nop

00014398 <d_template_param>:
   14398:	b538      	push	{r3, r4, r5, lr}
   1439a:	4604      	mov	r4, r0
   1439c:	68c3      	ldr	r3, [r0, #12]
   1439e:	781a      	ldrb	r2, [r3, #0]
   143a0:	2a54      	cmp	r2, #84	; 0x54
   143a2:	d001      	beq.n	143a8 <d_template_param+0x10>
   143a4:	2000      	movs	r0, #0
   143a6:	bd38      	pop	{r3, r4, r5, pc}
   143a8:	3301      	adds	r3, #1
   143aa:	60c3      	str	r3, [r0, #12]
   143ac:	f7ff ffda 	bl	14364 <d_compact_number>
   143b0:	1e05      	subs	r5, r0, #0
   143b2:	dbf7      	blt.n	143a4 <d_template_param+0xc>
   143b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   143b6:	6963      	ldr	r3, [r4, #20]
   143b8:	69a2      	ldr	r2, [r4, #24]
   143ba:	1c41      	adds	r1, r0, #1
   143bc:	2000      	movs	r0, #0
   143be:	62a1      	str	r1, [r4, #40]	; 0x28
   143c0:	4293      	cmp	r3, r2
   143c2:	da0b      	bge.n	143dc <d_template_param+0x44>
   143c4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   143c8:	6922      	ldr	r2, [r4, #16]
   143ca:	3301      	adds	r3, #1
   143cc:	6163      	str	r3, [r4, #20]
   143ce:	008b      	lsls	r3, r1, #2
   143d0:	18d0      	adds	r0, r2, r3
   143d2:	d003      	beq.n	143dc <d_template_param+0x44>
   143d4:	2105      	movs	r1, #5
   143d6:	6045      	str	r5, [r0, #4]
   143d8:	54d1      	strb	r1, [r2, r3]
   143da:	bd38      	pop	{r3, r4, r5, pc}
   143dc:	bd38      	pop	{r3, r4, r5, pc}
   143de:	bf00      	nop

000143e0 <d_substitution>:
   143e0:	4603      	mov	r3, r0
   143e2:	68c0      	ldr	r0, [r0, #12]
   143e4:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
   143e8:	7802      	ldrb	r2, [r0, #0]
   143ea:	2a53      	cmp	r2, #83	; 0x53
   143ec:	d003      	beq.n	143f6 <d_substitution+0x16>
   143ee:	2000      	movs	r0, #0
   143f0:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
   143f4:	4770      	bx	lr
   143f6:	1c42      	adds	r2, r0, #1
   143f8:	60da      	str	r2, [r3, #12]
   143fa:	7842      	ldrb	r2, [r0, #1]
   143fc:	2a00      	cmp	r2, #0
   143fe:	d03f      	beq.n	14480 <d_substitution+0xa0>
   14400:	f1a2 0c5f 	sub.w	ip, r2, #95	; 0x5f
   14404:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   14408:	f1dc 0500 	rsbs	r5, ip, #0
   1440c:	eb45 050c 	adc.w	r5, r5, ip
   14410:	3002      	adds	r0, #2
   14412:	60d8      	str	r0, [r3, #12]
   14414:	b2e0      	uxtb	r0, r4
   14416:	2809      	cmp	r0, #9
   14418:	bf8c      	ite	hi
   1441a:	4628      	movhi	r0, r5
   1441c:	f045 0001 	orrls.w	r0, r5, #1
   14420:	2800      	cmp	r0, #0
   14422:	f000 808f 	beq.w	14544 <d_substitution+0x164>
   14426:	2000      	movs	r0, #0
   14428:	2a5f      	cmp	r2, #95	; 0x5f
   1442a:	d01f      	beq.n	1446c <d_substitution+0x8c>
   1442c:	2100      	movs	r1, #0
   1442e:	eb01 0cc1 	add.w	ip, r1, r1, lsl #3
   14432:	b2e4      	uxtb	r4, r4
   14434:	f1a2 0641 	sub.w	r6, r2, #65	; 0x41
   14438:	2c09      	cmp	r4, #9
   1443a:	eb02 008c 	add.w	r0, r2, ip, lsl #2
   1443e:	4602      	mov	r2, r0
   14440:	b2f6      	uxtb	r6, r6
   14442:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
   14446:	d903      	bls.n	14450 <d_substitution+0x70>
   14448:	2e19      	cmp	r6, #25
   1444a:	f1a2 0037 	sub.w	r0, r2, #55	; 0x37
   1444e:	d8ce      	bhi.n	143ee <d_substitution+0xe>
   14450:	4281      	cmp	r1, r0
   14452:	4601      	mov	r1, r0
   14454:	d8cb      	bhi.n	143ee <d_substitution+0xe>
   14456:	68da      	ldr	r2, [r3, #12]
   14458:	1c54      	adds	r4, r2, #1
   1445a:	7812      	ldrb	r2, [r2, #0]
   1445c:	b112      	cbz	r2, 14464 <d_substitution+0x84>
   1445e:	2a5f      	cmp	r2, #95	; 0x5f
   14460:	60dc      	str	r4, [r3, #12]
   14462:	d002      	beq.n	1446a <d_substitution+0x8a>
   14464:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   14468:	e7e1      	b.n	1442e <d_substitution+0x4e>
   1446a:	3001      	adds	r0, #1
   1446c:	6a19      	ldr	r1, [r3, #32]
   1446e:	4288      	cmp	r0, r1
   14470:	d2bd      	bcs.n	143ee <d_substitution+0xe>
   14472:	69d9      	ldr	r1, [r3, #28]
   14474:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   14476:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
   1447a:	3201      	adds	r2, #1
   1447c:	629a      	str	r2, [r3, #40]	; 0x28
   1447e:	e7b7      	b.n	143f0 <d_substitution+0x10>
   14480:	689f      	ldr	r7, [r3, #8]
   14482:	f3c7 07c0 	ubfx	r7, r7, #3, #1
   14486:	f087 0c01 	eor.w	ip, r7, #1
   1448a:	2900      	cmp	r1, #0
   1448c:	bf0c      	ite	eq
   1448e:	2000      	moveq	r0, #0
   14490:	f00c 0001 	andne.w	r0, ip, #1
   14494:	b9c0      	cbnz	r0, 144c8 <d_substitution+0xe8>
   14496:	2a74      	cmp	r2, #116	; 0x74
   14498:	f24b 11cc 	movw	r1, #45516	; 0xb1cc
   1449c:	f2c0 0102 	movt	r1, #2
   144a0:	bf1e      	ittt	ne
   144a2:	f101 06c4 	addne.w	r6, r1, #196	; 0xc4
   144a6:	460d      	movne	r5, r1
   144a8:	f101 041c 	addne.w	r4, r1, #28
   144ac:	d104      	bne.n	144b8 <d_substitution+0xd8>
   144ae:	e014      	b.n	144da <d_substitution+0xfa>
   144b0:	f810 cc1c 	ldrb.w	ip, [r0, #-28]
   144b4:	4594      	cmp	ip, r2
   144b6:	d010      	beq.n	144da <d_substitution+0xfa>
   144b8:	311c      	adds	r1, #28
   144ba:	42b1      	cmp	r1, r6
   144bc:	ebc5 0c01 	rsb	ip, r5, r1
   144c0:	eb0c 0004 	add.w	r0, ip, r4
   144c4:	d3f4      	bcc.n	144b0 <d_substitution+0xd0>
   144c6:	e792      	b.n	143ee <d_substitution+0xe>
   144c8:	68d8      	ldr	r0, [r3, #12]
   144ca:	7801      	ldrb	r1, [r0, #0]
   144cc:	3943      	subs	r1, #67	; 0x43
   144ce:	b2cf      	uxtb	r7, r1
   144d0:	2f01      	cmp	r7, #1
   144d2:	bf8c      	ite	hi
   144d4:	2700      	movhi	r7, #0
   144d6:	2701      	movls	r7, #1
   144d8:	e7dd      	b.n	14496 <d_substitution+0xb6>
   144da:	694d      	ldr	r5, [r1, #20]
   144dc:	695a      	ldr	r2, [r3, #20]
   144de:	6998      	ldr	r0, [r3, #24]
   144e0:	b1b5      	cbz	r5, 14510 <d_substitution+0x130>
   144e2:	2400      	movs	r4, #0
   144e4:	4282      	cmp	r2, r0
   144e6:	f8d1 8018 	ldr.w	r8, [r1, #24]
   144ea:	da10      	bge.n	1450e <d_substitution+0x12e>
   144ec:	eb02 0442 	add.w	r4, r2, r2, lsl #1
   144f0:	f8d3 c010 	ldr.w	ip, [r3, #16]
   144f4:	3201      	adds	r2, #1
   144f6:	615a      	str	r2, [r3, #20]
   144f8:	00a6      	lsls	r6, r4, #2
   144fa:	eb1c 0406 	adds.w	r4, ip, r6
   144fe:	d006      	beq.n	1450e <d_substitution+0x12e>
   14500:	6065      	str	r5, [r4, #4]
   14502:	2516      	movs	r5, #22
   14504:	f8c4 8008 	str.w	r8, [r4, #8]
   14508:	6998      	ldr	r0, [r3, #24]
   1450a:	f80c 5006 	strb.w	r5, [ip, r6]
   1450e:	62dc      	str	r4, [r3, #44]	; 0x2c
   14510:	b9af      	cbnz	r7, 1453e <d_substitution+0x15e>
   14512:	684d      	ldr	r5, [r1, #4]
   14514:	6889      	ldr	r1, [r1, #8]
   14516:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   14518:	4290      	cmp	r0, r2
   1451a:	440c      	add	r4, r1
   1451c:	631c      	str	r4, [r3, #48]	; 0x30
   1451e:	f77f af66 	ble.w	143ee <d_substitution+0xe>
   14522:	eb02 0042 	add.w	r0, r2, r2, lsl #1
   14526:	691c      	ldr	r4, [r3, #16]
   14528:	3201      	adds	r2, #1
   1452a:	615a      	str	r2, [r3, #20]
   1452c:	0083      	lsls	r3, r0, #2
   1452e:	18e0      	adds	r0, r4, r3
   14530:	f43f af5e 	beq.w	143f0 <d_substitution+0x10>
   14534:	2216      	movs	r2, #22
   14536:	6045      	str	r5, [r0, #4]
   14538:	54e2      	strb	r2, [r4, r3]
   1453a:	6081      	str	r1, [r0, #8]
   1453c:	e758      	b.n	143f0 <d_substitution+0x10>
   1453e:	68cd      	ldr	r5, [r1, #12]
   14540:	6909      	ldr	r1, [r1, #16]
   14542:	e7e8      	b.n	14516 <d_substitution+0x136>
   14544:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   14548:	b2ed      	uxtb	r5, r5
   1454a:	2d19      	cmp	r5, #25
   1454c:	d898      	bhi.n	14480 <d_substitution+0xa0>
   1454e:	4601      	mov	r1, r0
   14550:	e76d      	b.n	1442e <d_substitution+0x4e>
   14552:	bf00      	nop

00014554 <d_append_char>:
   14554:	b570      	push	{r4, r5, r6, lr}
   14556:	460d      	mov	r5, r1
   14558:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
   1455c:	4604      	mov	r4, r0
   1455e:	1c4b      	adds	r3, r1, #1
   14560:	29ff      	cmp	r1, #255	; 0xff
   14562:	d006      	beq.n	14572 <d_append_char+0x1e>
   14564:	1861      	adds	r1, r4, r1
   14566:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1456a:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
   1456e:	710d      	strb	r5, [r1, #4]
   14570:	bd70      	pop	{r4, r5, r6, pc}
   14572:	2600      	movs	r6, #0
   14574:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   14578:	f880 6103 	strb.w	r6, [r0, #259]	; 0x103
   1457c:	3004      	adds	r0, #4
   1457e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   14582:	4798      	blx	r3
   14584:	4631      	mov	r1, r6
   14586:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1458a:	1861      	adds	r1, r4, r1
   1458c:	2301      	movs	r3, #1
   1458e:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
   14592:	18c2      	adds	r2, r0, r3
   14594:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   14598:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1459c:	710d      	strb	r5, [r1, #4]
   1459e:	bd70      	pop	{r4, r5, r6, pc}

000145a0 <d_find_pack>:
   145a0:	b538      	push	{r3, r4, r5, lr}
   145a2:	460c      	mov	r4, r1
   145a4:	4605      	mov	r5, r0
   145a6:	2900      	cmp	r1, #0
   145a8:	d073      	beq.n	14692 <d_find_pack+0xf2>
   145aa:	7823      	ldrb	r3, [r4, #0]
   145ac:	2b41      	cmp	r3, #65	; 0x41
   145ae:	d822      	bhi.n	145f6 <d_find_pack+0x56>
   145b0:	e8df f003 	tbb	[pc, r3]
   145b4:	21212158 	.word	0x21212158
   145b8:	27582c21 	.word	0x27582c21
   145bc:	21212127 	.word	0x21212127
   145c0:	21212121 	.word	0x21212121
   145c4:	21212121 	.word	0x21212121
   145c8:	21582121 	.word	0x21582121
   145cc:	21212121 	.word	0x21212121
   145d0:	21212121 	.word	0x21212121
   145d4:	58212121 	.word	0x58212121
   145d8:	21212121 	.word	0x21212121
   145dc:	21212121 	.word	0x21212121
   145e0:	21212758 	.word	0x21212758
   145e4:	21212121 	.word	0x21212121
   145e8:	21212121 	.word	0x21212121
   145ec:	21215821 	.word	0x21215821
   145f0:	21582121 	.word	0x21582121
   145f4:	5821      	.short	0x5821
   145f6:	6861      	ldr	r1, [r4, #4]
   145f8:	4628      	mov	r0, r5
   145fa:	f7ff ffd1 	bl	145a0 <d_find_pack>
   145fe:	2800      	cmp	r0, #0
   14600:	d13a      	bne.n	14678 <d_find_pack+0xd8>
   14602:	68a4      	ldr	r4, [r4, #8]
   14604:	2c00      	cmp	r4, #0
   14606:	d1d0      	bne.n	145aa <d_find_pack+0xa>
   14608:	4620      	mov	r0, r4
   1460a:	bd38      	pop	{r3, r4, r5, pc}
   1460c:	f8d5 0114 	ldr.w	r0, [r5, #276]	; 0x114
   14610:	2800      	cmp	r0, #0
   14612:	d03a      	beq.n	1468a <d_find_pack+0xea>
   14614:	6840      	ldr	r0, [r0, #4]
   14616:	6862      	ldr	r2, [r4, #4]
   14618:	6883      	ldr	r3, [r0, #8]
   1461a:	b32b      	cbz	r3, 14668 <d_find_pack+0xc8>
   1461c:	f893 c000 	ldrb.w	ip, [r3]
   14620:	f1bc 0f2b 	cmp.w	ip, #43	; 0x2b
   14624:	d11e      	bne.n	14664 <d_find_pack+0xc4>
   14626:	2a00      	cmp	r2, #0
   14628:	dd35      	ble.n	14696 <d_find_pack+0xf6>
   1462a:	689b      	ldr	r3, [r3, #8]
   1462c:	3a01      	subs	r2, #1
   1462e:	f002 0001 	and.w	r0, r2, #1
   14632:	b1cb      	cbz	r3, 14668 <d_find_pack+0xc8>
   14634:	f893 c000 	ldrb.w	ip, [r3]
   14638:	f1bc 0f2b 	cmp.w	ip, #43	; 0x2b
   1463c:	d112      	bne.n	14664 <d_find_pack+0xc4>
   1463e:	b1e2      	cbz	r2, 1467a <d_find_pack+0xda>
   14640:	b120      	cbz	r0, 1464c <d_find_pack+0xac>
   14642:	689b      	ldr	r3, [r3, #8]
   14644:	3a01      	subs	r2, #1
   14646:	b953      	cbnz	r3, 1465e <d_find_pack+0xbe>
   14648:	e00e      	b.n	14668 <d_find_pack+0xc8>
   1464a:	b1b2      	cbz	r2, 1467a <d_find_pack+0xda>
   1464c:	689b      	ldr	r3, [r3, #8]
   1464e:	3a01      	subs	r2, #1
   14650:	b153      	cbz	r3, 14668 <d_find_pack+0xc8>
   14652:	7819      	ldrb	r1, [r3, #0]
   14654:	3a01      	subs	r2, #1
   14656:	292b      	cmp	r1, #43	; 0x2b
   14658:	d104      	bne.n	14664 <d_find_pack+0xc4>
   1465a:	689b      	ldr	r3, [r3, #8]
   1465c:	b123      	cbz	r3, 14668 <d_find_pack+0xc8>
   1465e:	7818      	ldrb	r0, [r3, #0]
   14660:	282b      	cmp	r0, #43	; 0x2b
   14662:	d0f2      	beq.n	1464a <d_find_pack+0xaa>
   14664:	2000      	movs	r0, #0
   14666:	bd38      	pop	{r3, r4, r5, pc}
   14668:	2101      	movs	r1, #1
   1466a:	2a00      	cmp	r2, #0
   1466c:	bf0c      	ite	eq
   1466e:	460a      	moveq	r2, r1
   14670:	f041 0201 	orrne.w	r2, r1, #1
   14674:	2000      	movs	r0, #0
   14676:	b102      	cbz	r2, 1467a <d_find_pack+0xda>
   14678:	bd38      	pop	{r3, r4, r5, pc}
   1467a:	6858      	ldr	r0, [r3, #4]
   1467c:	2800      	cmp	r0, #0
   1467e:	d0fb      	beq.n	14678 <d_find_pack+0xd8>
   14680:	7803      	ldrb	r3, [r0, #0]
   14682:	2b2b      	cmp	r3, #43	; 0x2b
   14684:	bf18      	it	ne
   14686:	2000      	movne	r0, #0
   14688:	bd38      	pop	{r3, r4, r5, pc}
   1468a:	2101      	movs	r1, #1
   1468c:	f8c5 111c 	str.w	r1, [r5, #284]	; 0x11c
   14690:	bd38      	pop	{r3, r4, r5, pc}
   14692:	4608      	mov	r0, r1
   14694:	bd38      	pop	{r3, r4, r5, pc}
   14696:	2100      	movs	r1, #0
   14698:	e7e7      	b.n	1466a <d_find_pack+0xca>
   1469a:	bf00      	nop

0001469c <d_source_name>:
   1469c:	b570      	push	{r4, r5, r6, lr}
   1469e:	4604      	mov	r4, r0
   146a0:	f7ff fdec 	bl	1427c <d_number>
   146a4:	1e06      	subs	r6, r0, #0
   146a6:	dd41      	ble.n	1472c <d_source_name+0x90>
   146a8:	6860      	ldr	r0, [r4, #4]
   146aa:	68e5      	ldr	r5, [r4, #12]
   146ac:	1b43      	subs	r3, r0, r5
   146ae:	2000      	movs	r0, #0
   146b0:	429e      	cmp	r6, r3
   146b2:	dc14      	bgt.n	146de <d_source_name+0x42>
   146b4:	68a2      	ldr	r2, [r4, #8]
   146b6:	19ab      	adds	r3, r5, r6
   146b8:	60e3      	str	r3, [r4, #12]
   146ba:	0750      	lsls	r0, r2, #29
   146bc:	d411      	bmi.n	146e2 <d_source_name+0x46>
   146be:	2e09      	cmp	r6, #9
   146c0:	dd08      	ble.n	146d4 <d_source_name+0x38>
   146c2:	f64b 0174 	movw	r1, #47220	; 0xb874
   146c6:	4628      	mov	r0, r5
   146c8:	f2c0 0102 	movt	r1, #2
   146cc:	2208      	movs	r2, #8
   146ce:	f00a ff9d 	bl	1f60c <memcmp>
   146d2:	b160      	cbz	r0, 146ee <d_source_name+0x52>
   146d4:	4620      	mov	r0, r4
   146d6:	4629      	mov	r1, r5
   146d8:	4632      	mov	r2, r6
   146da:	f7ff fda9 	bl	14230 <d_make_name>
   146de:	62e0      	str	r0, [r4, #44]	; 0x2c
   146e0:	bd70      	pop	{r4, r5, r6, pc}
   146e2:	5da9      	ldrb	r1, [r5, r6]
   146e4:	2924      	cmp	r1, #36	; 0x24
   146e6:	d1ea      	bne.n	146be <d_source_name+0x22>
   146e8:	3301      	adds	r3, #1
   146ea:	60e3      	str	r3, [r4, #12]
   146ec:	e7e7      	b.n	146be <d_source_name+0x22>
   146ee:	7a2b      	ldrb	r3, [r5, #8]
   146f0:	f1a3 022e 	sub.w	r2, r3, #46	; 0x2e
   146f4:	f1d2 0c00 	rsbs	ip, r2, #0
   146f8:	eb4c 0002 	adc.w	r0, ip, r2
   146fc:	2b5f      	cmp	r3, #95	; 0x5f
   146fe:	bf08      	it	eq
   14700:	f040 0001 	orreq.w	r0, r0, #1
   14704:	b178      	cbz	r0, 14726 <d_source_name+0x8a>
   14706:	7a69      	ldrb	r1, [r5, #9]
   14708:	294e      	cmp	r1, #78	; 0x4e
   1470a:	d1e3      	bne.n	146d4 <d_source_name+0x38>
   1470c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1470e:	f64b 0180 	movw	r1, #47232	; 0xb880
   14712:	4620      	mov	r0, r4
   14714:	f2c0 0102 	movt	r1, #2
   14718:	3316      	adds	r3, #22
   1471a:	2215      	movs	r2, #21
   1471c:	1b9e      	subs	r6, r3, r6
   1471e:	6326      	str	r6, [r4, #48]	; 0x30
   14720:	f7ff fd86 	bl	14230 <d_make_name>
   14724:	e7db      	b.n	146de <d_source_name+0x42>
   14726:	2b24      	cmp	r3, #36	; 0x24
   14728:	d1d4      	bne.n	146d4 <d_source_name+0x38>
   1472a:	e7ec      	b.n	14706 <d_source_name+0x6a>
   1472c:	2000      	movs	r0, #0
   1472e:	bd70      	pop	{r4, r5, r6, pc}

00014730 <d_call_offset>:
   14730:	b510      	push	{r4, lr}
   14732:	4604      	mov	r4, r0
   14734:	b921      	cbnz	r1, 14740 <d_call_offset+0x10>
   14736:	68c3      	ldr	r3, [r0, #12]
   14738:	7819      	ldrb	r1, [r3, #0]
   1473a:	b139      	cbz	r1, 1474c <d_call_offset+0x1c>
   1473c:	3301      	adds	r3, #1
   1473e:	60c3      	str	r3, [r0, #12]
   14740:	2968      	cmp	r1, #104	; 0x68
   14742:	d00e      	beq.n	14762 <d_call_offset+0x32>
   14744:	2976      	cmp	r1, #118	; 0x76
   14746:	d003      	beq.n	14750 <d_call_offset+0x20>
   14748:	2000      	movs	r0, #0
   1474a:	bd10      	pop	{r4, pc}
   1474c:	4608      	mov	r0, r1
   1474e:	bd10      	pop	{r4, pc}
   14750:	4620      	mov	r0, r4
   14752:	f7ff fd93 	bl	1427c <d_number>
   14756:	68e3      	ldr	r3, [r4, #12]
   14758:	781a      	ldrb	r2, [r3, #0]
   1475a:	2a5f      	cmp	r2, #95	; 0x5f
   1475c:	d00c      	beq.n	14778 <d_call_offset+0x48>
   1475e:	2000      	movs	r0, #0
   14760:	bd10      	pop	{r4, pc}
   14762:	4620      	mov	r0, r4
   14764:	f7ff fd8a 	bl	1427c <d_number>
   14768:	68e3      	ldr	r3, [r4, #12]
   1476a:	7818      	ldrb	r0, [r3, #0]
   1476c:	285f      	cmp	r0, #95	; 0x5f
   1476e:	d1eb      	bne.n	14748 <d_call_offset+0x18>
   14770:	3301      	adds	r3, #1
   14772:	2001      	movs	r0, #1
   14774:	60e3      	str	r3, [r4, #12]
   14776:	bd10      	pop	{r4, pc}
   14778:	1c59      	adds	r1, r3, #1
   1477a:	4620      	mov	r0, r4
   1477c:	60e1      	str	r1, [r4, #12]
   1477e:	f7ff fd7d 	bl	1427c <d_number>
   14782:	e7f1      	b.n	14768 <d_call_offset+0x38>

00014784 <d_add_substitution>:
   14784:	b430      	push	{r4, r5}
   14786:	4603      	mov	r3, r0
   14788:	b169      	cbz	r1, 147a6 <d_add_substitution+0x22>
   1478a:	6a02      	ldr	r2, [r0, #32]
   1478c:	6a40      	ldr	r0, [r0, #36]	; 0x24
   1478e:	4282      	cmp	r2, r0
   14790:	da07      	bge.n	147a2 <d_add_substitution+0x1e>
   14792:	69dd      	ldr	r5, [r3, #28]
   14794:	2001      	movs	r0, #1
   14796:	1c54      	adds	r4, r2, #1
   14798:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
   1479c:	621c      	str	r4, [r3, #32]
   1479e:	bc30      	pop	{r4, r5}
   147a0:	4770      	bx	lr
   147a2:	2000      	movs	r0, #0
   147a4:	e7fb      	b.n	1479e <d_add_substitution+0x1a>
   147a6:	4608      	mov	r0, r1
   147a8:	e7f9      	b.n	1479e <d_add_substitution+0x1a>
   147aa:	bf00      	nop

000147ac <d_growable_string_callback_adapter>:
   147ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   147ae:	4607      	mov	r7, r0
   147b0:	6850      	ldr	r0, [r2, #4]
   147b2:	b083      	sub	sp, #12
   147b4:	6896      	ldr	r6, [r2, #8]
   147b6:	4614      	mov	r4, r2
   147b8:	1c43      	adds	r3, r0, #1
   147ba:	460d      	mov	r5, r1
   147bc:	185b      	adds	r3, r3, r1
   147be:	42b3      	cmp	r3, r6
   147c0:	d814      	bhi.n	147ec <d_growable_string_callback_adapter+0x40>
   147c2:	68e6      	ldr	r6, [r4, #12]
   147c4:	b10e      	cbz	r6, 147ca <d_growable_string_callback_adapter+0x1e>
   147c6:	b003      	add	sp, #12
   147c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   147ca:	6863      	ldr	r3, [r4, #4]
   147cc:	462a      	mov	r2, r5
   147ce:	6820      	ldr	r0, [r4, #0]
   147d0:	4639      	mov	r1, r7
   147d2:	18c0      	adds	r0, r0, r3
   147d4:	f00a ff48 	bl	1f668 <memcpy>
   147d8:	e894 000c 	ldmia.w	r4, {r2, r3}
   147dc:	eb02 0c05 	add.w	ip, r2, r5
   147e0:	f80c 6003 	strb.w	r6, [ip, r3]
   147e4:	6860      	ldr	r0, [r4, #4]
   147e6:	1945      	adds	r5, r0, r5
   147e8:	6065      	str	r5, [r4, #4]
   147ea:	e7ec      	b.n	147c6 <d_growable_string_callback_adapter+0x1a>
   147ec:	68d2      	ldr	r2, [r2, #12]
   147ee:	2a00      	cmp	r2, #0
   147f0:	d1e9      	bne.n	147c6 <d_growable_string_callback_adapter+0x1a>
   147f2:	b916      	cbnz	r6, 147fa <d_growable_string_callback_adapter+0x4e>
   147f4:	2602      	movs	r6, #2
   147f6:	2b02      	cmp	r3, #2
   147f8:	d902      	bls.n	14800 <d_growable_string_callback_adapter+0x54>
   147fa:	0076      	lsls	r6, r6, #1
   147fc:	42b3      	cmp	r3, r6
   147fe:	d8fc      	bhi.n	147fa <d_growable_string_callback_adapter+0x4e>
   14800:	6820      	ldr	r0, [r4, #0]
   14802:	4631      	mov	r1, r6
   14804:	f00b f8ec 	bl	1f9e0 <realloc>
   14808:	4603      	mov	r3, r0
   1480a:	b110      	cbz	r0, 14812 <d_growable_string_callback_adapter+0x66>
   1480c:	6020      	str	r0, [r4, #0]
   1480e:	60a6      	str	r6, [r4, #8]
   14810:	e7d7      	b.n	147c2 <d_growable_string_callback_adapter+0x16>
   14812:	6820      	ldr	r0, [r4, #0]
   14814:	9301      	str	r3, [sp, #4]
   14816:	f00a fbed 	bl	1eff4 <free>
   1481a:	9b01      	ldr	r3, [sp, #4]
   1481c:	2101      	movs	r1, #1
   1481e:	60e1      	str	r1, [r4, #12]
   14820:	6023      	str	r3, [r4, #0]
   14822:	6063      	str	r3, [r4, #4]
   14824:	60a3      	str	r3, [r4, #8]
   14826:	e7ce      	b.n	147c6 <d_growable_string_callback_adapter+0x1a>

00014828 <d_type>:
   14828:	68c2      	ldr	r2, [r0, #12]
   1482a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1482c:	4604      	mov	r4, r0
   1482e:	7813      	ldrb	r3, [r2, #0]
   14830:	b083      	sub	sp, #12
   14832:	f1a3 0572 	sub.w	r5, r3, #114	; 0x72
   14836:	4268      	negs	r0, r5
   14838:	eb40 0105 	adc.w	r1, r0, r5
   1483c:	2b56      	cmp	r3, #86	; 0x56
   1483e:	bf08      	it	eq
   14840:	f041 0101 	orreq.w	r1, r1, #1
   14844:	2900      	cmp	r1, #0
   14846:	d154      	bne.n	148f2 <d_type+0xca>
   14848:	2b4b      	cmp	r3, #75	; 0x4b
   1484a:	d052      	beq.n	148f2 <d_type+0xca>
   1484c:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
   14850:	f1bc 0f4a 	cmp.w	ip, #74	; 0x4a
   14854:	f200 808b 	bhi.w	1496e <d_type+0x146>
   14858:	e8df f01c 	tbh	[pc, ip, lsl #1]
   1485c:	01160116 	.word	0x01160116
   14860:	01160116 	.word	0x01160116
   14864:	01160116 	.word	0x01160116
   14868:	01160116 	.word	0x01160116
   1486c:	01160116 	.word	0x01160116
   14870:	00890089 	.word	0x00890089
   14874:	00890089 	.word	0x00890089
   14878:	00890089 	.word	0x00890089
   1487c:	01b20089 	.word	0x01b20089
   14880:	01080089 	.word	0x01080089
   14884:	00890099 	.word	0x00890099
   14888:	008b020a 	.word	0x008b020a
   1488c:	00890089 	.word	0x00890089
   14890:	00890089 	.word	0x00890089
   14894:	01de0089 	.word	0x01de0089
   14898:	00600116 	.word	0x00600116
   1489c:	0089016e 	.word	0x0089016e
   148a0:	013c0160 	.word	0x013c0160
   148a4:	0192011c 	.word	0x0192011c
   148a8:	00890089 	.word	0x00890089
   148ac:	00890089 	.word	0x00890089
   148b0:	00890116 	.word	0x00890116
   148b4:	00890089 	.word	0x00890089
   148b8:	00890089 	.word	0x00890089
   148bc:	017c0089 	.word	0x017c0089
   148c0:	017c017c 	.word	0x017c017c
   148c4:	017c017c 	.word	0x017c017c
   148c8:	017c017c 	.word	0x017c017c
   148cc:	017c017c 	.word	0x017c017c
   148d0:	0089017c 	.word	0x0089017c
   148d4:	017c017c 	.word	0x017c017c
   148d8:	017c017c 	.word	0x017c017c
   148dc:	00890089 	.word	0x00890089
   148e0:	017c0089 	.word	0x017c0089
   148e4:	01a4017c 	.word	0x01a4017c
   148e8:	017c017c 	.word	0x017c017c
   148ec:	017c017c 	.word	0x017c017c
   148f0:	017c      	.short	0x017c
   148f2:	4620      	mov	r0, r4
   148f4:	4669      	mov	r1, sp
   148f6:	2200      	movs	r2, #0
   148f8:	f7ff fcea 	bl	142d0 <d_cv_qualifiers>
   148fc:	4605      	mov	r5, r0
   148fe:	b150      	cbz	r0, 14916 <d_type+0xee>
   14900:	4620      	mov	r0, r4
   14902:	f7ff ff91 	bl	14828 <d_type>
   14906:	6028      	str	r0, [r5, #0]
   14908:	b1d8      	cbz	r0, 14942 <d_type+0x11a>
   1490a:	4620      	mov	r0, r4
   1490c:	9900      	ldr	r1, [sp, #0]
   1490e:	f7ff ff39 	bl	14784 <d_add_substitution>
   14912:	b1b0      	cbz	r0, 14942 <d_type+0x11a>
   14914:	9d00      	ldr	r5, [sp, #0]
   14916:	4628      	mov	r0, r5
   14918:	b003      	add	sp, #12
   1491a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1491c:	1c55      	adds	r5, r2, #1
   1491e:	4620      	mov	r0, r4
   14920:	60e5      	str	r5, [r4, #12]
   14922:	f7ff ff81 	bl	14828 <d_type>
   14926:	2120      	movs	r1, #32
   14928:	2300      	movs	r3, #0
   1492a:	4602      	mov	r2, r0
   1492c:	4620      	mov	r0, r4
   1492e:	f7ff fc2d 	bl	1418c <d_make_comp>
   14932:	4605      	mov	r5, r0
   14934:	9000      	str	r0, [sp, #0]
   14936:	4620      	mov	r0, r4
   14938:	4629      	mov	r1, r5
   1493a:	f7ff ff23 	bl	14784 <d_add_substitution>
   1493e:	2800      	cmp	r0, #0
   14940:	d1e8      	bne.n	14914 <d_type+0xec>
   14942:	4605      	mov	r5, r0
   14944:	e7e7      	b.n	14916 <d_type+0xee>
   14946:	4620      	mov	r0, r4
   14948:	f001 fa2a 	bl	15da0 <d_expression>
   1494c:	213b      	movs	r1, #59	; 0x3b
   1494e:	2300      	movs	r3, #0
   14950:	4602      	mov	r2, r0
   14952:	4620      	mov	r0, r4
   14954:	f7ff fc1a 	bl	1418c <d_make_comp>
   14958:	4605      	mov	r5, r0
   1495a:	9000      	str	r0, [sp, #0]
   1495c:	2800      	cmp	r0, #0
   1495e:	d0da      	beq.n	14916 <d_type+0xee>
   14960:	68e2      	ldr	r2, [r4, #12]
   14962:	7813      	ldrb	r3, [r2, #0]
   14964:	b11b      	cbz	r3, 1496e <d_type+0x146>
   14966:	3201      	adds	r2, #1
   14968:	2b45      	cmp	r3, #69	; 0x45
   1496a:	60e2      	str	r2, [r4, #12]
   1496c:	d0d3      	beq.n	14916 <d_type+0xee>
   1496e:	2500      	movs	r5, #0
   14970:	e7d1      	b.n	14916 <d_type+0xee>
   14972:	1c55      	adds	r5, r2, #1
   14974:	4620      	mov	r0, r4
   14976:	60e5      	str	r5, [r4, #12]
   14978:	f7ff ff56 	bl	14828 <d_type>
   1497c:	2122      	movs	r1, #34	; 0x22
   1497e:	2300      	movs	r3, #0
   14980:	4602      	mov	r2, r0
   14982:	4620      	mov	r0, r4
   14984:	f7ff fc02 	bl	1418c <d_make_comp>
   14988:	4605      	mov	r5, r0
   1498a:	9000      	str	r0, [sp, #0]
   1498c:	e7d3      	b.n	14936 <d_type+0x10e>
   1498e:	1c50      	adds	r0, r2, #1
   14990:	60e0      	str	r0, [r4, #12]
   14992:	7855      	ldrb	r5, [r2, #1]
   14994:	2d00      	cmp	r5, #0
   14996:	d0be      	beq.n	14916 <d_type+0xee>
   14998:	3d46      	subs	r5, #70	; 0x46
   1499a:	1c91      	adds	r1, r2, #2
   1499c:	60e1      	str	r1, [r4, #12]
   1499e:	2d30      	cmp	r5, #48	; 0x30
   149a0:	d8e5      	bhi.n	1496e <d_type+0x146>
   149a2:	a301      	add	r3, pc, #4	; (adr r3, 149a8 <d_type+0x180>)
   149a4:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   149a8:	00014df5 	.word	0x00014df5
   149ac:	0001496f 	.word	0x0001496f
   149b0:	0001496f 	.word	0x0001496f
   149b4:	0001496f 	.word	0x0001496f
   149b8:	0001496f 	.word	0x0001496f
   149bc:	0001496f 	.word	0x0001496f
   149c0:	0001496f 	.word	0x0001496f
   149c4:	0001496f 	.word	0x0001496f
   149c8:	0001496f 	.word	0x0001496f
   149cc:	0001496f 	.word	0x0001496f
   149d0:	0001496f 	.word	0x0001496f
   149d4:	0001496f 	.word	0x0001496f
   149d8:	0001496f 	.word	0x0001496f
   149dc:	0001496f 	.word	0x0001496f
   149e0:	00014947 	.word	0x00014947
   149e4:	0001496f 	.word	0x0001496f
   149e8:	0001496f 	.word	0x0001496f
   149ec:	0001496f 	.word	0x0001496f
   149f0:	0001496f 	.word	0x0001496f
   149f4:	0001496f 	.word	0x0001496f
   149f8:	0001496f 	.word	0x0001496f
   149fc:	0001496f 	.word	0x0001496f
   14a00:	0001496f 	.word	0x0001496f
   14a04:	0001496f 	.word	0x0001496f
   14a08:	0001496f 	.word	0x0001496f
   14a0c:	0001496f 	.word	0x0001496f
   14a10:	0001496f 	.word	0x0001496f
   14a14:	0001496f 	.word	0x0001496f
   14a18:	0001496f 	.word	0x0001496f
   14a1c:	0001496f 	.word	0x0001496f
   14a20:	00014db5 	.word	0x00014db5
   14a24:	00014d8d 	.word	0x00014d8d
   14a28:	00014e7f 	.word	0x00014e7f
   14a2c:	0001496f 	.word	0x0001496f
   14a30:	00014e5b 	.word	0x00014e5b
   14a34:	00014d4f 	.word	0x00014d4f
   14a38:	0001496f 	.word	0x0001496f
   14a3c:	0001496f 	.word	0x0001496f
   14a40:	0001496f 	.word	0x0001496f
   14a44:	0001496f 	.word	0x0001496f
   14a48:	00014d27 	.word	0x00014d27
   14a4c:	0001496f 	.word	0x0001496f
   14a50:	00014d77 	.word	0x00014d77
   14a54:	0001496f 	.word	0x0001496f
   14a58:	0001496f 	.word	0x0001496f
   14a5c:	00014cf7 	.word	0x00014cf7
   14a60:	00014947 	.word	0x00014947
   14a64:	0001496f 	.word	0x0001496f
   14a68:	00014c9f 	.word	0x00014c9f
   14a6c:	3201      	adds	r2, #1
   14a6e:	4620      	mov	r0, r4
   14a70:	60e2      	str	r2, [r4, #12]
   14a72:	f7ff fed9 	bl	14828 <d_type>
   14a76:	2121      	movs	r1, #33	; 0x21
   14a78:	2300      	movs	r3, #0
   14a7a:	4602      	mov	r2, r0
   14a7c:	4620      	mov	r0, r4
   14a7e:	f7ff fb85 	bl	1418c <d_make_comp>
   14a82:	4605      	mov	r5, r0
   14a84:	9000      	str	r0, [sp, #0]
   14a86:	e756      	b.n	14936 <d_type+0x10e>
   14a88:	4620      	mov	r0, r4
   14a8a:	f000 fc95 	bl	153b8 <d_name>
   14a8e:	4605      	mov	r5, r0
   14a90:	9000      	str	r0, [sp, #0]
   14a92:	e750      	b.n	14936 <d_type+0x10e>
   14a94:	4620      	mov	r0, r4
   14a96:	f7ff fc7f 	bl	14398 <d_template_param>
   14a9a:	68e3      	ldr	r3, [r4, #12]
   14a9c:	9000      	str	r0, [sp, #0]
   14a9e:	4605      	mov	r5, r0
   14aa0:	f893 c000 	ldrb.w	ip, [r3]
   14aa4:	f1bc 0f49 	cmp.w	ip, #73	; 0x49
   14aa8:	f47f af45 	bne.w	14936 <d_type+0x10e>
   14aac:	4629      	mov	r1, r5
   14aae:	4620      	mov	r0, r4
   14ab0:	f7ff fe68 	bl	14784 <d_add_substitution>
   14ab4:	9d00      	ldr	r5, [sp, #0]
   14ab6:	2800      	cmp	r0, #0
   14ab8:	f43f af43 	beq.w	14942 <d_type+0x11a>
   14abc:	4620      	mov	r0, r4
   14abe:	f000 fc25 	bl	1530c <d_template_args>
   14ac2:	462a      	mov	r2, r5
   14ac4:	2104      	movs	r1, #4
   14ac6:	4603      	mov	r3, r0
   14ac8:	4620      	mov	r0, r4
   14aca:	f7ff fb5f 	bl	1418c <d_make_comp>
   14ace:	4605      	mov	r5, r0
   14ad0:	9000      	str	r0, [sp, #0]
   14ad2:	e730      	b.n	14936 <d_type+0x10e>
   14ad4:	7853      	ldrb	r3, [r2, #1]
   14ad6:	f1a3 055f 	sub.w	r5, r3, #95	; 0x5f
   14ada:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   14ade:	4268      	negs	r0, r5
   14ae0:	eb40 0105 	adc.w	r1, r0, r5
   14ae4:	fa5f fe82 	uxtb.w	lr, r2
   14ae8:	f1be 0f09 	cmp.w	lr, #9
   14aec:	bf8c      	ite	hi
   14aee:	460d      	movhi	r5, r1
   14af0:	f041 0501 	orrls.w	r5, r1, #1
   14af4:	4620      	mov	r0, r4
   14af6:	b935      	cbnz	r5, 14b06 <d_type+0x2de>
   14af8:	3b41      	subs	r3, #65	; 0x41
   14afa:	fa5f fc83 	uxtb.w	ip, r3
   14afe:	f1bc 0f19 	cmp.w	ip, #25
   14b02:	f200 81e2 	bhi.w	14eca <d_type+0x6a2>
   14b06:	2100      	movs	r1, #0
   14b08:	f7ff fc6a 	bl	143e0 <d_substitution>
   14b0c:	68e1      	ldr	r1, [r4, #12]
   14b0e:	9000      	str	r0, [sp, #0]
   14b10:	4605      	mov	r5, r0
   14b12:	780b      	ldrb	r3, [r1, #0]
   14b14:	2b49      	cmp	r3, #73	; 0x49
   14b16:	f47f aefe 	bne.w	14916 <d_type+0xee>
   14b1a:	e7cf      	b.n	14abc <d_type+0x294>
   14b1c:	1c51      	adds	r1, r2, #1
   14b1e:	4620      	mov	r0, r4
   14b20:	60e1      	str	r1, [r4, #12]
   14b22:	f7ff fe81 	bl	14828 <d_type>
   14b26:	211f      	movs	r1, #31
   14b28:	2300      	movs	r3, #0
   14b2a:	4602      	mov	r2, r0
   14b2c:	4620      	mov	r0, r4
   14b2e:	f7ff fb2d 	bl	1418c <d_make_comp>
   14b32:	4605      	mov	r5, r0
   14b34:	9000      	str	r0, [sp, #0]
   14b36:	e6fe      	b.n	14936 <d_type+0x10e>
   14b38:	1c53      	adds	r3, r2, #1
   14b3a:	4620      	mov	r0, r4
   14b3c:	60e3      	str	r3, [r4, #12]
   14b3e:	f7ff fe73 	bl	14828 <d_type>
   14b42:	211e      	movs	r1, #30
   14b44:	2300      	movs	r3, #0
   14b46:	4602      	mov	r2, r0
   14b48:	4620      	mov	r0, r4
   14b4a:	f7ff fb1f 	bl	1418c <d_make_comp>
   14b4e:	4605      	mov	r5, r0
   14b50:	9000      	str	r0, [sp, #0]
   14b52:	e6f0      	b.n	14936 <d_type+0x10e>
   14b54:	49a1      	ldr	r1, [pc, #644]	; (14ddc <d_type+0x5b4>)
   14b56:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   14b5a:	eb11 0383 	adds.w	r3, r1, r3, lsl #2
   14b5e:	f000 81c9 	beq.w	14ef4 <d_type+0x6cc>
   14b62:	6961      	ldr	r1, [r4, #20]
   14b64:	69a0      	ldr	r0, [r4, #24]
   14b66:	4281      	cmp	r1, r0
   14b68:	f2c0 819b 	blt.w	14ea2 <d_type+0x67a>
   14b6c:	2300      	movs	r3, #0
   14b6e:	461d      	mov	r5, r3
   14b70:	685b      	ldr	r3, [r3, #4]
   14b72:	6858      	ldr	r0, [r3, #4]
   14b74:	1c51      	adds	r1, r2, #1
   14b76:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14b78:	60e1      	str	r1, [r4, #12]
   14b7a:	181a      	adds	r2, r3, r0
   14b7c:	6322      	str	r2, [r4, #48]	; 0x30
   14b7e:	e6ca      	b.n	14916 <d_type+0xee>
   14b80:	1c53      	adds	r3, r2, #1
   14b82:	4620      	mov	r0, r4
   14b84:	60e3      	str	r3, [r4, #12]
   14b86:	f7ff fd89 	bl	1469c <d_source_name>
   14b8a:	9000      	str	r0, [sp, #0]
   14b8c:	4620      	mov	r0, r4
   14b8e:	f7ff fe4b 	bl	14828 <d_type>
   14b92:	211d      	movs	r1, #29
   14b94:	9b00      	ldr	r3, [sp, #0]
   14b96:	4602      	mov	r2, r0
   14b98:	4620      	mov	r0, r4
   14b9a:	f7ff faf7 	bl	1418c <d_make_comp>
   14b9e:	4605      	mov	r5, r0
   14ba0:	9000      	str	r0, [sp, #0]
   14ba2:	e6c8      	b.n	14936 <d_type+0x10e>
   14ba4:	1c55      	adds	r5, r2, #1
   14ba6:	4620      	mov	r0, r4
   14ba8:	60e5      	str	r5, [r4, #12]
   14baa:	f7ff fd77 	bl	1469c <d_source_name>
   14bae:	2124      	movs	r1, #36	; 0x24
   14bb0:	2300      	movs	r3, #0
   14bb2:	4602      	mov	r2, r0
   14bb4:	4620      	mov	r0, r4
   14bb6:	f7ff fae9 	bl	1418c <d_make_comp>
   14bba:	4605      	mov	r5, r0
   14bbc:	9000      	str	r0, [sp, #0]
   14bbe:	e6ba      	b.n	14936 <d_type+0x10e>
   14bc0:	1c51      	adds	r1, r2, #1
   14bc2:	60e1      	str	r1, [r4, #12]
   14bc4:	7853      	ldrb	r3, [r2, #1]
   14bc6:	2b5f      	cmp	r3, #95	; 0x5f
   14bc8:	f000 8197 	beq.w	14efa <d_type+0x6d2>
   14bcc:	3b30      	subs	r3, #48	; 0x30
   14bce:	b2dd      	uxtb	r5, r3
   14bd0:	2d09      	cmp	r5, #9
   14bd2:	f200 8186 	bhi.w	14ee2 <d_type+0x6ba>
   14bd6:	4608      	mov	r0, r1
   14bd8:	1c42      	adds	r2, r0, #1
   14bda:	60e2      	str	r2, [r4, #12]
   14bdc:	7845      	ldrb	r5, [r0, #1]
   14bde:	4610      	mov	r0, r2
   14be0:	3d30      	subs	r5, #48	; 0x30
   14be2:	b2eb      	uxtb	r3, r5
   14be4:	2b09      	cmp	r3, #9
   14be6:	d9f7      	bls.n	14bd8 <d_type+0x3b0>
   14be8:	4620      	mov	r0, r4
   14bea:	1a52      	subs	r2, r2, r1
   14bec:	f7ff fb20 	bl	14230 <d_make_name>
   14bf0:	4605      	mov	r5, r0
   14bf2:	b178      	cbz	r0, 14c14 <d_type+0x3ec>
   14bf4:	68e1      	ldr	r1, [r4, #12]
   14bf6:	780a      	ldrb	r2, [r1, #0]
   14bf8:	2a5f      	cmp	r2, #95	; 0x5f
   14bfa:	d149      	bne.n	14c90 <d_type+0x468>
   14bfc:	3101      	adds	r1, #1
   14bfe:	4620      	mov	r0, r4
   14c00:	60e1      	str	r1, [r4, #12]
   14c02:	f7ff fe11 	bl	14828 <d_type>
   14c06:	462a      	mov	r2, r5
   14c08:	2126      	movs	r1, #38	; 0x26
   14c0a:	4603      	mov	r3, r0
   14c0c:	4620      	mov	r0, r4
   14c0e:	f7ff fabd 	bl	1418c <d_make_comp>
   14c12:	4605      	mov	r5, r0
   14c14:	9500      	str	r5, [sp, #0]
   14c16:	e68e      	b.n	14936 <d_type+0x10e>
   14c18:	1c56      	adds	r6, r2, #1
   14c1a:	4620      	mov	r0, r4
   14c1c:	60e6      	str	r6, [r4, #12]
   14c1e:	ad01      	add	r5, sp, #4
   14c20:	f7ff fe02 	bl	14828 <d_type>
   14c24:	4629      	mov	r1, r5
   14c26:	2201      	movs	r2, #1
   14c28:	4606      	mov	r6, r0
   14c2a:	4620      	mov	r0, r4
   14c2c:	f7ff fb50 	bl	142d0 <d_cv_qualifiers>
   14c30:	4607      	mov	r7, r0
   14c32:	2800      	cmp	r0, #0
   14c34:	f000 8163 	beq.w	14efe <d_type+0x6d6>
   14c38:	4620      	mov	r0, r4
   14c3a:	f7ff fdf5 	bl	14828 <d_type>
   14c3e:	6038      	str	r0, [r7, #0]
   14c40:	2800      	cmp	r0, #0
   14c42:	f000 815c 	beq.w	14efe <d_type+0x6d6>
   14c46:	42af      	cmp	r7, r5
   14c48:	d009      	beq.n	14c5e <d_type+0x436>
   14c4a:	7800      	ldrb	r0, [r0, #0]
   14c4c:	2825      	cmp	r0, #37	; 0x25
   14c4e:	d006      	beq.n	14c5e <d_type+0x436>
   14c50:	4620      	mov	r0, r4
   14c52:	9901      	ldr	r1, [sp, #4]
   14c54:	f7ff fd96 	bl	14784 <d_add_substitution>
   14c58:	2800      	cmp	r0, #0
   14c5a:	f000 8150 	beq.w	14efe <d_type+0x6d6>
   14c5e:	4620      	mov	r0, r4
   14c60:	2127      	movs	r1, #39	; 0x27
   14c62:	4632      	mov	r2, r6
   14c64:	9b01      	ldr	r3, [sp, #4]
   14c66:	f7ff fa91 	bl	1418c <d_make_comp>
   14c6a:	4605      	mov	r5, r0
   14c6c:	9500      	str	r5, [sp, #0]
   14c6e:	e662      	b.n	14936 <d_type+0x10e>
   14c70:	1c53      	adds	r3, r2, #1
   14c72:	60e3      	str	r3, [r4, #12]
   14c74:	7850      	ldrb	r0, [r2, #1]
   14c76:	2859      	cmp	r0, #89	; 0x59
   14c78:	d101      	bne.n	14c7e <d_type+0x456>
   14c7a:	3202      	adds	r2, #2
   14c7c:	60e2      	str	r2, [r4, #12]
   14c7e:	2101      	movs	r1, #1
   14c80:	4620      	mov	r0, r4
   14c82:	f000 f9a3 	bl	14fcc <d_bare_function_type>
   14c86:	68e3      	ldr	r3, [r4, #12]
   14c88:	7819      	ldrb	r1, [r3, #0]
   14c8a:	2945      	cmp	r1, #69	; 0x45
   14c8c:	4605      	mov	r5, r0
   14c8e:	d002      	beq.n	14c96 <d_type+0x46e>
   14c90:	2500      	movs	r5, #0
   14c92:	9500      	str	r5, [sp, #0]
   14c94:	e64f      	b.n	14936 <d_type+0x10e>
   14c96:	1c58      	adds	r0, r3, #1
   14c98:	9500      	str	r5, [sp, #0]
   14c9a:	60e0      	str	r0, [r4, #12]
   14c9c:	e64b      	b.n	14936 <d_type+0x10e>
   14c9e:	7890      	ldrb	r0, [r2, #2]
   14ca0:	285f      	cmp	r0, #95	; 0x5f
   14ca2:	f000 8134 	beq.w	14f0e <d_type+0x6e6>
   14ca6:	6961      	ldr	r1, [r4, #20]
   14ca8:	69a5      	ldr	r5, [r4, #24]
   14caa:	42a9      	cmp	r1, r5
   14cac:	f6bf ae5f 	bge.w	1496e <d_type+0x146>
   14cb0:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   14cb4:	6922      	ldr	r2, [r4, #16]
   14cb6:	1c48      	adds	r0, r1, #1
   14cb8:	6160      	str	r0, [r4, #20]
   14cba:	009b      	lsls	r3, r3, #2
   14cbc:	18d5      	adds	r5, r2, r3
   14cbe:	f43f ae2a 	beq.w	14916 <d_type+0xee>
   14cc2:	213a      	movs	r1, #58	; 0x3a
   14cc4:	4620      	mov	r0, r4
   14cc6:	54d1      	strb	r1, [r2, r3]
   14cc8:	f7ff fad8 	bl	1427c <d_number>
   14ccc:	6068      	str	r0, [r5, #4]
   14cce:	68e3      	ldr	r3, [r4, #12]
   14cd0:	f893 e000 	ldrb.w	lr, [r3]
   14cd4:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
   14cd8:	f47f ae49 	bne.w	1496e <d_type+0x146>
   14cdc:	1c5a      	adds	r2, r3, #1
   14cde:	4620      	mov	r0, r4
   14ce0:	60e2      	str	r2, [r4, #12]
   14ce2:	f7ff fda1 	bl	14828 <d_type>
   14ce6:	462a      	mov	r2, r5
   14ce8:	2129      	movs	r1, #41	; 0x29
   14cea:	4603      	mov	r3, r0
   14cec:	4620      	mov	r0, r4
   14cee:	f7ff fa4d 	bl	1418c <d_make_comp>
   14cf2:	4605      	mov	r5, r0
   14cf4:	e60f      	b.n	14916 <d_type+0xee>
   14cf6:	6963      	ldr	r3, [r4, #20]
   14cf8:	69a1      	ldr	r1, [r4, #24]
   14cfa:	428b      	cmp	r3, r1
   14cfc:	f280 80e1 	bge.w	14ec2 <d_type+0x69a>
   14d00:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   14d04:	6921      	ldr	r1, [r4, #16]
   14d06:	3301      	adds	r3, #1
   14d08:	6163      	str	r3, [r4, #20]
   14d0a:	00ab      	lsls	r3, r5, #2
   14d0c:	18cd      	adds	r5, r1, r3
   14d0e:	f000 8108 	beq.w	14f22 <d_type+0x6fa>
   14d12:	4a33      	ldr	r2, [pc, #204]	; (14de0 <d_type+0x5b8>)
   14d14:	2023      	movs	r0, #35	; 0x23
   14d16:	54c8      	strb	r0, [r1, r3]
   14d18:	4613      	mov	r3, r2
   14d1a:	606a      	str	r2, [r5, #4]
   14d1c:	6b22      	ldr	r2, [r4, #48]	; 0x30
   14d1e:	685b      	ldr	r3, [r3, #4]
   14d20:	18d1      	adds	r1, r2, r3
   14d22:	6321      	str	r1, [r4, #48]	; 0x30
   14d24:	e5f7      	b.n	14916 <d_type+0xee>
   14d26:	6963      	ldr	r3, [r4, #20]
   14d28:	69a5      	ldr	r5, [r4, #24]
   14d2a:	42ab      	cmp	r3, r5
   14d2c:	f280 80c9 	bge.w	14ec2 <d_type+0x69a>
   14d30:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   14d34:	6921      	ldr	r1, [r4, #16]
   14d36:	1c5a      	adds	r2, r3, #1
   14d38:	6162      	str	r2, [r4, #20]
   14d3a:	0083      	lsls	r3, r0, #2
   14d3c:	18cd      	adds	r5, r1, r3
   14d3e:	f000 80f0 	beq.w	14f22 <d_type+0x6fa>
   14d42:	4a28      	ldr	r2, [pc, #160]	; (14de4 <d_type+0x5bc>)
   14d44:	2023      	movs	r0, #35	; 0x23
   14d46:	54c8      	strb	r0, [r1, r3]
   14d48:	4613      	mov	r3, r2
   14d4a:	606a      	str	r2, [r5, #4]
   14d4c:	e7e6      	b.n	14d1c <d_type+0x4f4>
   14d4e:	6963      	ldr	r3, [r4, #20]
   14d50:	69a1      	ldr	r1, [r4, #24]
   14d52:	428b      	cmp	r3, r1
   14d54:	f280 80b5 	bge.w	14ec2 <d_type+0x69a>
   14d58:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   14d5c:	6921      	ldr	r1, [r4, #16]
   14d5e:	3301      	adds	r3, #1
   14d60:	6163      	str	r3, [r4, #20]
   14d62:	00ab      	lsls	r3, r5, #2
   14d64:	18cd      	adds	r5, r1, r3
   14d66:	f000 80dc 	beq.w	14f22 <d_type+0x6fa>
   14d6a:	4a1f      	ldr	r2, [pc, #124]	; (14de8 <d_type+0x5c0>)
   14d6c:	2023      	movs	r0, #35	; 0x23
   14d6e:	54c8      	strb	r0, [r1, r3]
   14d70:	4613      	mov	r3, r2
   14d72:	606a      	str	r2, [r5, #4]
   14d74:	e7d2      	b.n	14d1c <d_type+0x4f4>
   14d76:	4620      	mov	r0, r4
   14d78:	f7ff fd56 	bl	14828 <d_type>
   14d7c:	2141      	movs	r1, #65	; 0x41
   14d7e:	2300      	movs	r3, #0
   14d80:	4602      	mov	r2, r0
   14d82:	4620      	mov	r0, r4
   14d84:	f7ff fa02 	bl	1418c <d_make_comp>
   14d88:	4605      	mov	r5, r0
   14d8a:	e5c4      	b.n	14916 <d_type+0xee>
   14d8c:	6963      	ldr	r3, [r4, #20]
   14d8e:	69a1      	ldr	r1, [r4, #24]
   14d90:	428b      	cmp	r3, r1
   14d92:	f280 8096 	bge.w	14ec2 <d_type+0x69a>
   14d96:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   14d9a:	6921      	ldr	r1, [r4, #16]
   14d9c:	3301      	adds	r3, #1
   14d9e:	6163      	str	r3, [r4, #20]
   14da0:	00ab      	lsls	r3, r5, #2
   14da2:	18cd      	adds	r5, r1, r3
   14da4:	f000 80bd 	beq.w	14f22 <d_type+0x6fa>
   14da8:	4a10      	ldr	r2, [pc, #64]	; (14dec <d_type+0x5c4>)
   14daa:	2023      	movs	r0, #35	; 0x23
   14dac:	54c8      	strb	r0, [r1, r3]
   14dae:	4613      	mov	r3, r2
   14db0:	606a      	str	r2, [r5, #4]
   14db2:	e7b3      	b.n	14d1c <d_type+0x4f4>
   14db4:	6963      	ldr	r3, [r4, #20]
   14db6:	69a1      	ldr	r1, [r4, #24]
   14db8:	428b      	cmp	r3, r1
   14dba:	f280 8082 	bge.w	14ec2 <d_type+0x69a>
   14dbe:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   14dc2:	6921      	ldr	r1, [r4, #16]
   14dc4:	3301      	adds	r3, #1
   14dc6:	6163      	str	r3, [r4, #20]
   14dc8:	00ab      	lsls	r3, r5, #2
   14dca:	18cd      	adds	r5, r1, r3
   14dcc:	f000 80a9 	beq.w	14f22 <d_type+0x6fa>
   14dd0:	4a07      	ldr	r2, [pc, #28]	; (14df0 <d_type+0x5c8>)
   14dd2:	2023      	movs	r0, #35	; 0x23
   14dd4:	54c8      	strb	r0, [r1, r3]
   14dd6:	4613      	mov	r3, r2
   14dd8:	606a      	str	r2, [r5, #4]
   14dda:	e79f      	b.n	14d1c <d_type+0x4f4>
   14ddc:	0002aafc 	.word	0x0002aafc
   14de0:	0002b4e8 	.word	0x0002b4e8
   14de4:	0002b510 	.word	0x0002b510
   14de8:	0002b4fc 	.word	0x0002b4fc
   14dec:	0002b4c0 	.word	0x0002b4c0
   14df0:	0002b4ac 	.word	0x0002b4ac
   14df4:	6963      	ldr	r3, [r4, #20]
   14df6:	2500      	movs	r5, #0
   14df8:	69a1      	ldr	r1, [r4, #24]
   14dfa:	428b      	cmp	r3, r1
   14dfc:	da06      	bge.n	14e0c <d_type+0x5e4>
   14dfe:	eb03 0e43 	add.w	lr, r3, r3, lsl #1
   14e02:	6925      	ldr	r5, [r4, #16]
   14e04:	3301      	adds	r3, #1
   14e06:	6163      	str	r3, [r4, #20]
   14e08:	eb05 058e 	add.w	r5, r5, lr, lsl #2
   14e0c:	9500      	str	r5, [sp, #0]
   14e0e:	2128      	movs	r1, #40	; 0x28
   14e10:	7029      	strb	r1, [r5, #0]
   14e12:	7890      	ldrb	r0, [r2, #2]
   14e14:	3830      	subs	r0, #48	; 0x30
   14e16:	b2c2      	uxtb	r2, r0
   14e18:	2a09      	cmp	r2, #9
   14e1a:	bf8c      	ite	hi
   14e1c:	2200      	movhi	r2, #0
   14e1e:	2201      	movls	r2, #1
   14e20:	812a      	strh	r2, [r5, #8]
   14e22:	2a00      	cmp	r2, #0
   14e24:	d16e      	bne.n	14f04 <d_type+0x6dc>
   14e26:	4620      	mov	r0, r4
   14e28:	f7ff fcfe 	bl	14828 <d_type>
   14e2c:	6068      	str	r0, [r5, #4]
   14e2e:	9d00      	ldr	r5, [sp, #0]
   14e30:	686d      	ldr	r5, [r5, #4]
   14e32:	2d00      	cmp	r5, #0
   14e34:	f43f ad6f 	beq.w	14916 <d_type+0xee>
   14e38:	4620      	mov	r0, r4
   14e3a:	f7ff fa1f 	bl	1427c <d_number>
   14e3e:	68e2      	ldr	r2, [r4, #12]
   14e40:	7813      	ldrb	r3, [r2, #0]
   14e42:	b13b      	cbz	r3, 14e54 <d_type+0x62c>
   14e44:	f1a3 0373 	sub.w	r3, r3, #115	; 0x73
   14e48:	3201      	adds	r2, #1
   14e4a:	f1d3 0c00 	rsbs	ip, r3, #0
   14e4e:	60e2      	str	r2, [r4, #12]
   14e50:	eb4c 0303 	adc.w	r3, ip, r3
   14e54:	9d00      	ldr	r5, [sp, #0]
   14e56:	816b      	strh	r3, [r5, #10]
   14e58:	e55d      	b.n	14916 <d_type+0xee>
   14e5a:	6963      	ldr	r3, [r4, #20]
   14e5c:	69a1      	ldr	r1, [r4, #24]
   14e5e:	428b      	cmp	r3, r1
   14e60:	da2f      	bge.n	14ec2 <d_type+0x69a>
   14e62:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   14e66:	6921      	ldr	r1, [r4, #16]
   14e68:	3301      	adds	r3, #1
   14e6a:	6163      	str	r3, [r4, #20]
   14e6c:	00ab      	lsls	r3, r5, #2
   14e6e:	18cd      	adds	r5, r1, r3
   14e70:	d057      	beq.n	14f22 <d_type+0x6fa>
   14e72:	4a2d      	ldr	r2, [pc, #180]	; (14f28 <d_type+0x700>)
   14e74:	2023      	movs	r0, #35	; 0x23
   14e76:	54c8      	strb	r0, [r1, r3]
   14e78:	4613      	mov	r3, r2
   14e7a:	606a      	str	r2, [r5, #4]
   14e7c:	e74e      	b.n	14d1c <d_type+0x4f4>
   14e7e:	6963      	ldr	r3, [r4, #20]
   14e80:	69a5      	ldr	r5, [r4, #24]
   14e82:	42ab      	cmp	r3, r5
   14e84:	da1d      	bge.n	14ec2 <d_type+0x69a>
   14e86:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   14e8a:	6921      	ldr	r1, [r4, #16]
   14e8c:	3301      	adds	r3, #1
   14e8e:	6163      	str	r3, [r4, #20]
   14e90:	0083      	lsls	r3, r0, #2
   14e92:	18cd      	adds	r5, r1, r3
   14e94:	d045      	beq.n	14f22 <d_type+0x6fa>
   14e96:	4a25      	ldr	r2, [pc, #148]	; (14f2c <d_type+0x704>)
   14e98:	2023      	movs	r0, #35	; 0x23
   14e9a:	54c8      	strb	r0, [r1, r3]
   14e9c:	4613      	mov	r3, r2
   14e9e:	606a      	str	r2, [r5, #4]
   14ea0:	e73c      	b.n	14d1c <d_type+0x4f4>
   14ea2:	eb01 0541 	add.w	r5, r1, r1, lsl #1
   14ea6:	6920      	ldr	r0, [r4, #16]
   14ea8:	3101      	adds	r1, #1
   14eaa:	6161      	str	r1, [r4, #20]
   14eac:	00a9      	lsls	r1, r5, #2
   14eae:	1845      	adds	r5, r0, r1
   14eb0:	bf08      	it	eq
   14eb2:	686b      	ldreq	r3, [r5, #4]
   14eb4:	f43f ae5d 	beq.w	14b72 <d_type+0x34a>
   14eb8:	606b      	str	r3, [r5, #4]
   14eba:	2623      	movs	r6, #35	; 0x23
   14ebc:	68e2      	ldr	r2, [r4, #12]
   14ebe:	5446      	strb	r6, [r0, r1]
   14ec0:	e657      	b.n	14b72 <d_type+0x34a>
   14ec2:	2300      	movs	r3, #0
   14ec4:	461d      	mov	r5, r3
   14ec6:	685b      	ldr	r3, [r3, #4]
   14ec8:	e728      	b.n	14d1c <d_type+0x4f4>
   14eca:	f000 fa75 	bl	153b8 <d_name>
   14ece:	4605      	mov	r5, r0
   14ed0:	9000      	str	r0, [sp, #0]
   14ed2:	2800      	cmp	r0, #0
   14ed4:	f43f ad2f 	beq.w	14936 <d_type+0x10e>
   14ed8:	7802      	ldrb	r2, [r0, #0]
   14eda:	2a16      	cmp	r2, #22
   14edc:	f47f ad2b 	bne.w	14936 <d_type+0x10e>
   14ee0:	e519      	b.n	14916 <d_type+0xee>
   14ee2:	4620      	mov	r0, r4
   14ee4:	f000 ff5c 	bl	15da0 <d_expression>
   14ee8:	4605      	mov	r5, r0
   14eea:	2800      	cmp	r0, #0
   14eec:	f47f ae82 	bne.w	14bf4 <d_type+0x3cc>
   14ef0:	9500      	str	r5, [sp, #0]
   14ef2:	e520      	b.n	14936 <d_type+0x10e>
   14ef4:	685b      	ldr	r3, [r3, #4]
   14ef6:	2500      	movs	r5, #0
   14ef8:	e63b      	b.n	14b72 <d_type+0x34a>
   14efa:	2500      	movs	r5, #0
   14efc:	e67e      	b.n	14bfc <d_type+0x3d4>
   14efe:	4605      	mov	r5, r0
   14f00:	9500      	str	r5, [sp, #0]
   14f02:	e518      	b.n	14936 <d_type+0x10e>
   14f04:	4620      	mov	r0, r4
   14f06:	f7ff f9b9 	bl	1427c <d_number>
   14f0a:	9d00      	ldr	r5, [sp, #0]
   14f0c:	e78b      	b.n	14e26 <d_type+0x5fe>
   14f0e:	1cd1      	adds	r1, r2, #3
   14f10:	4620      	mov	r0, r4
   14f12:	60e1      	str	r1, [r4, #12]
   14f14:	f000 ff44 	bl	15da0 <d_expression>
   14f18:	4605      	mov	r5, r0
   14f1a:	2800      	cmp	r0, #0
   14f1c:	f47f aed7 	bne.w	14cce <d_type+0x4a6>
   14f20:	e4f9      	b.n	14916 <d_type+0xee>
   14f22:	686b      	ldr	r3, [r5, #4]
   14f24:	e6fa      	b.n	14d1c <d_type+0x4f4>
   14f26:	bf00      	nop
   14f28:	0002b4d4 	.word	0x0002b4d4
   14f2c:	0002b498 	.word	0x0002b498

00014f30 <d_parmlist>:
   14f30:	68c3      	ldr	r3, [r0, #12]
   14f32:	b570      	push	{r4, r5, r6, lr}
   14f34:	b082      	sub	sp, #8
   14f36:	2500      	movs	r5, #0
   14f38:	4604      	mov	r4, r0
   14f3a:	9501      	str	r5, [sp, #4]
   14f3c:	781b      	ldrb	r3, [r3, #0]
   14f3e:	f1a3 0245 	sub.w	r2, r3, #69	; 0x45
   14f42:	4250      	negs	r0, r2
   14f44:	eb40 0002 	adc.w	r0, r0, r2
   14f48:	42ab      	cmp	r3, r5
   14f4a:	bf08      	it	eq
   14f4c:	f040 0001 	orreq.w	r0, r0, #1
   14f50:	bb08      	cbnz	r0, 14f96 <d_parmlist+0x66>
   14f52:	2b2e      	cmp	r3, #46	; 0x2e
   14f54:	bf18      	it	ne
   14f56:	ae01      	addne	r6, sp, #4
   14f58:	d113      	bne.n	14f82 <d_parmlist+0x52>
   14f5a:	e01d      	b.n	14f98 <d_parmlist+0x68>
   14f5c:	f7ff f916 	bl	1418c <d_make_comp>
   14f60:	6030      	str	r0, [r6, #0]
   14f62:	b1c8      	cbz	r0, 14f98 <d_parmlist+0x68>
   14f64:	68e2      	ldr	r2, [r4, #12]
   14f66:	f100 0608 	add.w	r6, r0, #8
   14f6a:	7813      	ldrb	r3, [r2, #0]
   14f6c:	f1d3 0101 	rsbs	r1, r3, #1
   14f70:	bf38      	it	cc
   14f72:	2100      	movcc	r1, #0
   14f74:	2b45      	cmp	r3, #69	; 0x45
   14f76:	bf08      	it	eq
   14f78:	f041 0101 	orreq.w	r1, r1, #1
   14f7c:	b971      	cbnz	r1, 14f9c <d_parmlist+0x6c>
   14f7e:	2b2e      	cmp	r3, #46	; 0x2e
   14f80:	d00c      	beq.n	14f9c <d_parmlist+0x6c>
   14f82:	4620      	mov	r0, r4
   14f84:	f7ff fc50 	bl	14828 <d_type>
   14f88:	212a      	movs	r1, #42	; 0x2a
   14f8a:	2300      	movs	r3, #0
   14f8c:	4605      	mov	r5, r0
   14f8e:	4620      	mov	r0, r4
   14f90:	462a      	mov	r2, r5
   14f92:	2d00      	cmp	r5, #0
   14f94:	d1e2      	bne.n	14f5c <d_parmlist+0x2c>
   14f96:	4628      	mov	r0, r5
   14f98:	b002      	add	sp, #8
   14f9a:	bd70      	pop	{r4, r5, r6, pc}
   14f9c:	9801      	ldr	r0, [sp, #4]
   14f9e:	2800      	cmp	r0, #0
   14fa0:	d0fa      	beq.n	14f98 <d_parmlist+0x68>
   14fa2:	6883      	ldr	r3, [r0, #8]
   14fa4:	2b00      	cmp	r3, #0
   14fa6:	d1f7      	bne.n	14f98 <d_parmlist+0x68>
   14fa8:	6842      	ldr	r2, [r0, #4]
   14faa:	f892 c000 	ldrb.w	ip, [r2]
   14fae:	f1bc 0f23 	cmp.w	ip, #35	; 0x23
   14fb2:	d1f1      	bne.n	14f98 <d_parmlist+0x68>
   14fb4:	6852      	ldr	r2, [r2, #4]
   14fb6:	f892 e010 	ldrb.w	lr, [r2, #16]
   14fba:	f1be 0f09 	cmp.w	lr, #9
   14fbe:	d1eb      	bne.n	14f98 <d_parmlist+0x68>
   14fc0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   14fc2:	6852      	ldr	r2, [r2, #4]
   14fc4:	1a89      	subs	r1, r1, r2
   14fc6:	6321      	str	r1, [r4, #48]	; 0x30
   14fc8:	6043      	str	r3, [r0, #4]
   14fca:	e7e5      	b.n	14f98 <d_parmlist+0x68>

00014fcc <d_bare_function_type>:
   14fcc:	68c2      	ldr	r2, [r0, #12]
   14fce:	b570      	push	{r4, r5, r6, lr}
   14fd0:	4604      	mov	r4, r0
   14fd2:	7813      	ldrb	r3, [r2, #0]
   14fd4:	2b4a      	cmp	r3, #74	; 0x4a
   14fd6:	d00d      	beq.n	14ff4 <d_bare_function_type+0x28>
   14fd8:	460d      	mov	r5, r1
   14fda:	b969      	cbnz	r1, 14ff8 <d_bare_function_type+0x2c>
   14fdc:	4620      	mov	r0, r4
   14fde:	f7ff ffa7 	bl	14f30 <d_parmlist>
   14fe2:	4603      	mov	r3, r0
   14fe4:	b178      	cbz	r0, 15006 <d_bare_function_type+0x3a>
   14fe6:	4620      	mov	r0, r4
   14fe8:	2125      	movs	r1, #37	; 0x25
   14fea:	462a      	mov	r2, r5
   14fec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   14ff0:	f7ff b8cc 	b.w	1418c <d_make_comp>
   14ff4:	3201      	adds	r2, #1
   14ff6:	60c2      	str	r2, [r0, #12]
   14ff8:	4620      	mov	r0, r4
   14ffa:	f7ff fc15 	bl	14828 <d_type>
   14ffe:	4605      	mov	r5, r0
   15000:	2800      	cmp	r0, #0
   15002:	d1eb      	bne.n	14fdc <d_bare_function_type+0x10>
   15004:	bd70      	pop	{r4, r5, r6, pc}
   15006:	bd70      	pop	{r4, r5, r6, pc}

00015008 <d_operator_name>:
   15008:	68c3      	ldr	r3, [r0, #12]
   1500a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1500e:	4604      	mov	r4, r0
   15010:	781e      	ldrb	r6, [r3, #0]
   15012:	46b4      	mov	ip, r6
   15014:	b17e      	cbz	r6, 15036 <d_operator_name+0x2e>
   15016:	1c5a      	adds	r2, r3, #1
   15018:	60c2      	str	r2, [r0, #12]
   1501a:	f893 c001 	ldrb.w	ip, [r3, #1]
   1501e:	f1bc 0f00 	cmp.w	ip, #0
   15022:	d001      	beq.n	15028 <d_operator_name+0x20>
   15024:	3302      	adds	r3, #2
   15026:	60c3      	str	r3, [r0, #12]
   15028:	2e76      	cmp	r6, #118	; 0x76
   1502a:	d122      	bne.n	15072 <d_operator_name+0x6a>
   1502c:	f1ac 0530 	sub.w	r5, ip, #48	; 0x30
   15030:	b2e8      	uxtb	r0, r5
   15032:	2809      	cmp	r0, #9
   15034:	d935      	bls.n	150a2 <d_operator_name+0x9a>
   15036:	4f32      	ldr	r7, [pc, #200]	; (15100 <d_operator_name+0xf8>)
   15038:	2034      	movs	r0, #52	; 0x34
   1503a:	2300      	movs	r3, #0
   1503c:	1ac2      	subs	r2, r0, r3
   1503e:	eb02 78d2 	add.w	r8, r2, r2, lsr #31
   15042:	eb03 0168 	add.w	r1, r3, r8, asr #1
   15046:	010d      	lsls	r5, r1, #4
   15048:	eb07 0805 	add.w	r8, r7, r5
   1504c:	597d      	ldr	r5, [r7, r5]
   1504e:	782a      	ldrb	r2, [r5, #0]
   15050:	4296      	cmp	r6, r2
   15052:	d007      	beq.n	15064 <d_operator_name+0x5c>
   15054:	42b2      	cmp	r2, r6
   15056:	d90a      	bls.n	1506e <d_operator_name+0x66>
   15058:	4608      	mov	r0, r1
   1505a:	4283      	cmp	r3, r0
   1505c:	d1ee      	bne.n	1503c <d_operator_name+0x34>
   1505e:	2000      	movs	r0, #0
   15060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15064:	786a      	ldrb	r2, [r5, #1]
   15066:	4594      	cmp	ip, r2
   15068:	d032      	beq.n	150d0 <d_operator_name+0xc8>
   1506a:	4562      	cmp	r2, ip
   1506c:	d8f4      	bhi.n	15058 <d_operator_name+0x50>
   1506e:	1c4b      	adds	r3, r1, #1
   15070:	e7f3      	b.n	1505a <d_operator_name+0x52>
   15072:	f1a6 0163 	sub.w	r1, r6, #99	; 0x63
   15076:	4248      	negs	r0, r1
   15078:	eb40 0201 	adc.w	r2, r0, r1
   1507c:	f1bc 0f76 	cmp.w	ip, #118	; 0x76
   15080:	bf14      	ite	ne
   15082:	2200      	movne	r2, #0
   15084:	f002 0201 	andeq.w	r2, r2, #1
   15088:	2a00      	cmp	r2, #0
   1508a:	d0d4      	beq.n	15036 <d_operator_name+0x2e>
   1508c:	4620      	mov	r0, r4
   1508e:	f7ff fbcb 	bl	14828 <d_type>
   15092:	212e      	movs	r1, #46	; 0x2e
   15094:	2300      	movs	r3, #0
   15096:	4602      	mov	r2, r0
   15098:	4620      	mov	r0, r4
   1509a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1509e:	f7ff b875 	b.w	1418c <d_make_comp>
   150a2:	4620      	mov	r0, r4
   150a4:	f7ff fafa 	bl	1469c <d_source_name>
   150a8:	6963      	ldr	r3, [r4, #20]
   150aa:	69a1      	ldr	r1, [r4, #24]
   150ac:	428b      	cmp	r3, r1
   150ae:	4602      	mov	r2, r0
   150b0:	dad5      	bge.n	1505e <d_operator_name+0x56>
   150b2:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   150b6:	6921      	ldr	r1, [r4, #16]
   150b8:	3301      	adds	r3, #1
   150ba:	6163      	str	r3, [r4, #20]
   150bc:	0083      	lsls	r3, r0, #2
   150be:	18c8      	adds	r0, r1, r3
   150c0:	d019      	beq.n	150f6 <d_operator_name+0xee>
   150c2:	b1d2      	cbz	r2, 150fa <d_operator_name+0xf2>
   150c4:	242d      	movs	r4, #45	; 0x2d
   150c6:	6045      	str	r5, [r0, #4]
   150c8:	54cc      	strb	r4, [r1, r3]
   150ca:	6082      	str	r2, [r0, #8]
   150cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   150d0:	6963      	ldr	r3, [r4, #20]
   150d2:	2000      	movs	r0, #0
   150d4:	69a1      	ldr	r1, [r4, #24]
   150d6:	428b      	cmp	r3, r1
   150d8:	da0d      	bge.n	150f6 <d_operator_name+0xee>
   150da:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   150de:	6922      	ldr	r2, [r4, #16]
   150e0:	3301      	adds	r3, #1
   150e2:	6163      	str	r3, [r4, #20]
   150e4:	0083      	lsls	r3, r0, #2
   150e6:	18d0      	adds	r0, r2, r3
   150e8:	d005      	beq.n	150f6 <d_operator_name+0xee>
   150ea:	212c      	movs	r1, #44	; 0x2c
   150ec:	f8c0 8004 	str.w	r8, [r0, #4]
   150f0:	54d1      	strb	r1, [r2, r3]
   150f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   150f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   150fa:	4610      	mov	r0, r2
   150fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15100:	0002b524 	.word	0x0002b524

00015104 <d_unqualified_name>:
   15104:	68c2      	ldr	r2, [r0, #12]
   15106:	b570      	push	{r4, r5, r6, lr}
   15108:	4605      	mov	r5, r0
   1510a:	7813      	ldrb	r3, [r2, #0]
   1510c:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
   15110:	fa5f f18c 	uxtb.w	r1, ip
   15114:	2909      	cmp	r1, #9
   15116:	d927      	bls.n	15168 <d_unqualified_name+0x64>
   15118:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   1511c:	fa5f f18c 	uxtb.w	r1, ip
   15120:	2919      	cmp	r1, #25
   15122:	d913      	bls.n	1514c <d_unqualified_name+0x48>
   15124:	f1a3 0143 	sub.w	r1, r3, #67	; 0x43
   15128:	fa5f fc81 	uxtb.w	ip, r1
   1512c:	f1bc 0f01 	cmp.w	ip, #1
   15130:	d958      	bls.n	151e4 <d_unqualified_name+0xe0>
   15132:	2b4c      	cmp	r3, #76	; 0x4c
   15134:	d01c      	beq.n	15170 <d_unqualified_name+0x6c>
   15136:	2b55      	cmp	r3, #85	; 0x55
   15138:	d106      	bne.n	15148 <d_unqualified_name+0x44>
   1513a:	7853      	ldrb	r3, [r2, #1]
   1513c:	2b6c      	cmp	r3, #108	; 0x6c
   1513e:	d07f      	beq.n	15240 <d_unqualified_name+0x13c>
   15140:	2b74      	cmp	r3, #116	; 0x74
   15142:	d028      	beq.n	15196 <d_unqualified_name+0x92>
   15144:	2000      	movs	r0, #0
   15146:	bd70      	pop	{r4, r5, r6, pc}
   15148:	2000      	movs	r0, #0
   1514a:	bd70      	pop	{r4, r5, r6, pc}
   1514c:	f7ff ff5c 	bl	15008 <d_operator_name>
   15150:	2800      	cmp	r0, #0
   15152:	d0f8      	beq.n	15146 <d_unqualified_name+0x42>
   15154:	7803      	ldrb	r3, [r0, #0]
   15156:	2b2c      	cmp	r3, #44	; 0x2c
   15158:	d1f5      	bne.n	15146 <d_unqualified_name+0x42>
   1515a:	6841      	ldr	r1, [r0, #4]
   1515c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
   1515e:	688b      	ldr	r3, [r1, #8]
   15160:	18d1      	adds	r1, r2, r3
   15162:	1dca      	adds	r2, r1, #7
   15164:	632a      	str	r2, [r5, #48]	; 0x30
   15166:	bd70      	pop	{r4, r5, r6, pc}
   15168:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1516c:	f7ff ba96 	b.w	1469c <d_source_name>
   15170:	1c54      	adds	r4, r2, #1
   15172:	60c4      	str	r4, [r0, #12]
   15174:	f7ff fa92 	bl	1469c <d_source_name>
   15178:	4604      	mov	r4, r0
   1517a:	2800      	cmp	r0, #0
   1517c:	d0e3      	beq.n	15146 <d_unqualified_name+0x42>
   1517e:	68eb      	ldr	r3, [r5, #12]
   15180:	7819      	ldrb	r1, [r3, #0]
   15182:	295f      	cmp	r1, #95	; 0x5f
   15184:	d1df      	bne.n	15146 <d_unqualified_name+0x42>
   15186:	3301      	adds	r3, #1
   15188:	4628      	mov	r0, r5
   1518a:	60eb      	str	r3, [r5, #12]
   1518c:	f7ff f876 	bl	1427c <d_number>
   15190:	ea24 70e0 	bic.w	r0, r4, r0, asr #31
   15194:	bd70      	pop	{r4, r5, r6, pc}
   15196:	1c53      	adds	r3, r2, #1
   15198:	60c3      	str	r3, [r0, #12]
   1519a:	f892 c001 	ldrb.w	ip, [r2, #1]
   1519e:	f1bc 0f74 	cmp.w	ip, #116	; 0x74
   151a2:	d1d1      	bne.n	15148 <d_unqualified_name+0x44>
   151a4:	3202      	adds	r2, #2
   151a6:	60c2      	str	r2, [r0, #12]
   151a8:	f7ff f8dc 	bl	14364 <d_compact_number>
   151ac:	2800      	cmp	r0, #0
   151ae:	dbcb      	blt.n	15148 <d_unqualified_name+0x44>
   151b0:	696b      	ldr	r3, [r5, #20]
   151b2:	69ac      	ldr	r4, [r5, #24]
   151b4:	42a3      	cmp	r3, r4
   151b6:	da13      	bge.n	151e0 <d_unqualified_name+0xdc>
   151b8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   151bc:	692a      	ldr	r2, [r5, #16]
   151be:	3301      	adds	r3, #1
   151c0:	616b      	str	r3, [r5, #20]
   151c2:	008b      	lsls	r3, r1, #2
   151c4:	18d4      	adds	r4, r2, r3
   151c6:	d002      	beq.n	151ce <d_unqualified_name+0xca>
   151c8:	6060      	str	r0, [r4, #4]
   151ca:	2040      	movs	r0, #64	; 0x40
   151cc:	54d0      	strb	r0, [r2, r3]
   151ce:	4628      	mov	r0, r5
   151d0:	4621      	mov	r1, r4
   151d2:	f7ff fad7 	bl	14784 <d_add_substitution>
   151d6:	2800      	cmp	r0, #0
   151d8:	bf14      	ite	ne
   151da:	4620      	movne	r0, r4
   151dc:	2000      	moveq	r0, #0
   151de:	bd70      	pop	{r4, r5, r6, pc}
   151e0:	2400      	movs	r4, #0
   151e2:	e7f4      	b.n	151ce <d_unqualified_name+0xca>
   151e4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   151e6:	b121      	cbz	r1, 151f2 <d_unqualified_name+0xee>
   151e8:	7808      	ldrb	r0, [r1, #0]
   151ea:	2800      	cmp	r0, #0
   151ec:	d054      	beq.n	15298 <d_unqualified_name+0x194>
   151ee:	2816      	cmp	r0, #22
   151f0:	d052      	beq.n	15298 <d_unqualified_name+0x194>
   151f2:	2b43      	cmp	r3, #67	; 0x43
   151f4:	d056      	beq.n	152a4 <d_unqualified_name+0x1a0>
   151f6:	2b44      	cmp	r3, #68	; 0x44
   151f8:	d1a6      	bne.n	15148 <d_unqualified_name+0x44>
   151fa:	7853      	ldrb	r3, [r2, #1]
   151fc:	2b31      	cmp	r3, #49	; 0x31
   151fe:	d07c      	beq.n	152fa <d_unqualified_name+0x1f6>
   15200:	2b32      	cmp	r3, #50	; 0x32
   15202:	d07c      	beq.n	152fe <d_unqualified_name+0x1fa>
   15204:	2b30      	cmp	r3, #48	; 0x30
   15206:	d19f      	bne.n	15148 <d_unqualified_name+0x44>
   15208:	2401      	movs	r4, #1
   1520a:	696b      	ldr	r3, [r5, #20]
   1520c:	3202      	adds	r2, #2
   1520e:	69a8      	ldr	r0, [r5, #24]
   15210:	60ea      	str	r2, [r5, #12]
   15212:	4283      	cmp	r3, r0
   15214:	da6b      	bge.n	152ee <d_unqualified_name+0x1ea>
   15216:	6928      	ldr	r0, [r5, #16]
   15218:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
   1521c:	3301      	adds	r3, #1
   1521e:	616b      	str	r3, [r5, #20]
   15220:	eb10 008c 	adds.w	r0, r0, ip, lsl #2
   15224:	bf14      	ite	ne
   15226:	2300      	movne	r3, #0
   15228:	2301      	moveq	r3, #1
   1522a:	2900      	cmp	r1, #0
   1522c:	bf08      	it	eq
   1522e:	f043 0301 	orreq.w	r3, r3, #1
   15232:	2b00      	cmp	r3, #0
   15234:	d188      	bne.n	15148 <d_unqualified_name+0x44>
   15236:	2208      	movs	r2, #8
   15238:	7104      	strb	r4, [r0, #4]
   1523a:	7002      	strb	r2, [r0, #0]
   1523c:	6081      	str	r1, [r0, #8]
   1523e:	bd70      	pop	{r4, r5, r6, pc}
   15240:	1c53      	adds	r3, r2, #1
   15242:	60c3      	str	r3, [r0, #12]
   15244:	7851      	ldrb	r1, [r2, #1]
   15246:	296c      	cmp	r1, #108	; 0x6c
   15248:	f47f af7e 	bne.w	15148 <d_unqualified_name+0x44>
   1524c:	1c96      	adds	r6, r2, #2
   1524e:	60c6      	str	r6, [r0, #12]
   15250:	f7ff fe6e 	bl	14f30 <d_parmlist>
   15254:	4606      	mov	r6, r0
   15256:	2800      	cmp	r0, #0
   15258:	f43f af75 	beq.w	15146 <d_unqualified_name+0x42>
   1525c:	68eb      	ldr	r3, [r5, #12]
   1525e:	7818      	ldrb	r0, [r3, #0]
   15260:	2845      	cmp	r0, #69	; 0x45
   15262:	f47f af71 	bne.w	15148 <d_unqualified_name+0x44>
   15266:	1c5a      	adds	r2, r3, #1
   15268:	4628      	mov	r0, r5
   1526a:	60ea      	str	r2, [r5, #12]
   1526c:	f7ff f87a 	bl	14364 <d_compact_number>
   15270:	2800      	cmp	r0, #0
   15272:	f6ff af69 	blt.w	15148 <d_unqualified_name+0x44>
   15276:	696b      	ldr	r3, [r5, #20]
   15278:	69ac      	ldr	r4, [r5, #24]
   1527a:	42a3      	cmp	r3, r4
   1527c:	dab0      	bge.n	151e0 <d_unqualified_name+0xdc>
   1527e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   15282:	692a      	ldr	r2, [r5, #16]
   15284:	3301      	adds	r3, #1
   15286:	616b      	str	r3, [r5, #20]
   15288:	008b      	lsls	r3, r1, #2
   1528a:	18d4      	adds	r4, r2, r3
   1528c:	d09f      	beq.n	151ce <d_unqualified_name+0xca>
   1528e:	213e      	movs	r1, #62	; 0x3e
   15290:	6066      	str	r6, [r4, #4]
   15292:	54d1      	strb	r1, [r2, r3]
   15294:	60a0      	str	r0, [r4, #8]
   15296:	e79a      	b.n	151ce <d_unqualified_name+0xca>
   15298:	688b      	ldr	r3, [r1, #8]
   1529a:	6b28      	ldr	r0, [r5, #48]	; 0x30
   1529c:	18c0      	adds	r0, r0, r3
   1529e:	6328      	str	r0, [r5, #48]	; 0x30
   152a0:	7813      	ldrb	r3, [r2, #0]
   152a2:	e7a6      	b.n	151f2 <d_unqualified_name+0xee>
   152a4:	7853      	ldrb	r3, [r2, #1]
   152a6:	2b32      	cmp	r3, #50	; 0x32
   152a8:	d02d      	beq.n	15306 <d_unqualified_name+0x202>
   152aa:	2b33      	cmp	r3, #51	; 0x33
   152ac:	d029      	beq.n	15302 <d_unqualified_name+0x1fe>
   152ae:	2b31      	cmp	r3, #49	; 0x31
   152b0:	f47f af4a 	bne.w	15148 <d_unqualified_name+0x44>
   152b4:	2401      	movs	r4, #1
   152b6:	696b      	ldr	r3, [r5, #20]
   152b8:	3202      	adds	r2, #2
   152ba:	69a8      	ldr	r0, [r5, #24]
   152bc:	60ea      	str	r2, [r5, #12]
   152be:	4283      	cmp	r3, r0
   152c0:	da18      	bge.n	152f4 <d_unqualified_name+0x1f0>
   152c2:	6928      	ldr	r0, [r5, #16]
   152c4:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
   152c8:	3301      	adds	r3, #1
   152ca:	616b      	str	r3, [r5, #20]
   152cc:	eb10 008c 	adds.w	r0, r0, ip, lsl #2
   152d0:	bf14      	ite	ne
   152d2:	2300      	movne	r3, #0
   152d4:	2301      	moveq	r3, #1
   152d6:	2900      	cmp	r1, #0
   152d8:	bf08      	it	eq
   152da:	f043 0301 	orreq.w	r3, r3, #1
   152de:	2b00      	cmp	r3, #0
   152e0:	f47f af32 	bne.w	15148 <d_unqualified_name+0x44>
   152e4:	2207      	movs	r2, #7
   152e6:	7104      	strb	r4, [r0, #4]
   152e8:	7002      	strb	r2, [r0, #0]
   152ea:	6081      	str	r1, [r0, #8]
   152ec:	bd70      	pop	{r4, r5, r6, pc}
   152ee:	2301      	movs	r3, #1
   152f0:	2000      	movs	r0, #0
   152f2:	e79a      	b.n	1522a <d_unqualified_name+0x126>
   152f4:	2301      	movs	r3, #1
   152f6:	2000      	movs	r0, #0
   152f8:	e7ed      	b.n	152d6 <d_unqualified_name+0x1d2>
   152fa:	2402      	movs	r4, #2
   152fc:	e785      	b.n	1520a <d_unqualified_name+0x106>
   152fe:	2403      	movs	r4, #3
   15300:	e783      	b.n	1520a <d_unqualified_name+0x106>
   15302:	2403      	movs	r4, #3
   15304:	e7d7      	b.n	152b6 <d_unqualified_name+0x1b2>
   15306:	2402      	movs	r4, #2
   15308:	e7d5      	b.n	152b6 <d_unqualified_name+0x1b2>
   1530a:	bf00      	nop

0001530c <d_template_args>:
   1530c:	68c3      	ldr	r3, [r0, #12]
   1530e:	b570      	push	{r4, r5, r6, lr}
   15310:	4604      	mov	r4, r0
   15312:	781a      	ldrb	r2, [r3, #0]
   15314:	b082      	sub	sp, #8
   15316:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   15318:	2a49      	cmp	r2, #73	; 0x49
   1531a:	d002      	beq.n	15322 <d_template_args+0x16>
   1531c:	2000      	movs	r0, #0
   1531e:	b002      	add	sp, #8
   15320:	bd70      	pop	{r4, r5, r6, pc}
   15322:	1c59      	adds	r1, r3, #1
   15324:	60c1      	str	r1, [r0, #12]
   15326:	785a      	ldrb	r2, [r3, #1]
   15328:	2a45      	cmp	r2, #69	; 0x45
   1532a:	d039      	beq.n	153a0 <d_template_args+0x94>
   1532c:	ad02      	add	r5, sp, #8
   1532e:	2000      	movs	r0, #0
   15330:	f845 0d04 	str.w	r0, [r5, #-4]!
   15334:	2a4c      	cmp	r2, #76	; 0x4c
   15336:	d02e      	beq.n	15396 <d_template_args+0x8a>
   15338:	2a58      	cmp	r2, #88	; 0x58
   1533a:	d01f      	beq.n	1537c <d_template_args+0x70>
   1533c:	2a49      	cmp	r2, #73	; 0x49
   1533e:	d018      	beq.n	15372 <d_template_args+0x66>
   15340:	4620      	mov	r0, r4
   15342:	f7ff fa71 	bl	14828 <d_type>
   15346:	4602      	mov	r2, r0
   15348:	2a00      	cmp	r2, #0
   1534a:	d033      	beq.n	153b4 <d_template_args+0xa8>
   1534c:	4620      	mov	r0, r4
   1534e:	212b      	movs	r1, #43	; 0x2b
   15350:	2300      	movs	r3, #0
   15352:	f7fe ff1b 	bl	1418c <d_make_comp>
   15356:	6028      	str	r0, [r5, #0]
   15358:	2800      	cmp	r0, #0
   1535a:	d0e0      	beq.n	1531e <d_template_args+0x12>
   1535c:	68e1      	ldr	r1, [r4, #12]
   1535e:	f100 0508 	add.w	r5, r0, #8
   15362:	780a      	ldrb	r2, [r1, #0]
   15364:	2a45      	cmp	r2, #69	; 0x45
   15366:	d1e5      	bne.n	15334 <d_template_args+0x28>
   15368:	1c48      	adds	r0, r1, #1
   1536a:	62e6      	str	r6, [r4, #44]	; 0x2c
   1536c:	60e0      	str	r0, [r4, #12]
   1536e:	9801      	ldr	r0, [sp, #4]
   15370:	e7d5      	b.n	1531e <d_template_args+0x12>
   15372:	4620      	mov	r0, r4
   15374:	f7ff ffca 	bl	1530c <d_template_args>
   15378:	4602      	mov	r2, r0
   1537a:	e7e5      	b.n	15348 <d_template_args+0x3c>
   1537c:	1c4a      	adds	r2, r1, #1
   1537e:	4620      	mov	r0, r4
   15380:	60e2      	str	r2, [r4, #12]
   15382:	f000 fd0d 	bl	15da0 <d_expression>
   15386:	68e3      	ldr	r3, [r4, #12]
   15388:	7819      	ldrb	r1, [r3, #0]
   1538a:	2945      	cmp	r1, #69	; 0x45
   1538c:	4602      	mov	r2, r0
   1538e:	d1c5      	bne.n	1531c <d_template_args+0x10>
   15390:	3301      	adds	r3, #1
   15392:	60e3      	str	r3, [r4, #12]
   15394:	e7d8      	b.n	15348 <d_template_args+0x3c>
   15396:	4620      	mov	r0, r4
   15398:	f000 fca4 	bl	15ce4 <d_expr_primary>
   1539c:	4602      	mov	r2, r0
   1539e:	e7d3      	b.n	15348 <d_template_args+0x3c>
   153a0:	2200      	movs	r2, #0
   153a2:	3302      	adds	r3, #2
   153a4:	212b      	movs	r1, #43	; 0x2b
   153a6:	60c3      	str	r3, [r0, #12]
   153a8:	4613      	mov	r3, r2
   153aa:	b002      	add	sp, #8
   153ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   153b0:	f7fe beec 	b.w	1418c <d_make_comp>
   153b4:	4610      	mov	r0, r2
   153b6:	e7b2      	b.n	1531e <d_template_args+0x12>

000153b8 <d_name>:
   153b8:	68c3      	ldr	r3, [r0, #12]
   153ba:	b5f0      	push	{r4, r5, r6, r7, lr}
   153bc:	4605      	mov	r5, r0
   153be:	781a      	ldrb	r2, [r3, #0]
   153c0:	b083      	sub	sp, #12
   153c2:	3a4c      	subs	r2, #76	; 0x4c
   153c4:	2a0e      	cmp	r2, #14
   153c6:	d828      	bhi.n	1541a <d_name+0x62>
   153c8:	e8df f002 	tbb	[pc, r2]
   153cc:	27362721 	.word	0x27362721
   153d0:	08272727 	.word	0x08272727
   153d4:	27272127 	.word	0x27272127
   153d8:	2727      	.short	0x2727
   153da:	89          	.byte	0x89
   153db:	00          	.byte	0x00
   153dc:	785e      	ldrb	r6, [r3, #1]
   153de:	2e74      	cmp	r6, #116	; 0x74
   153e0:	f000 8089 	beq.w	154f6 <d_name+0x13e>
   153e4:	2100      	movs	r1, #0
   153e6:	2401      	movs	r4, #1
   153e8:	f7fe fffa 	bl	143e0 <d_substitution>
   153ec:	4606      	mov	r6, r0
   153ee:	68e9      	ldr	r1, [r5, #12]
   153f0:	7808      	ldrb	r0, [r1, #0]
   153f2:	2849      	cmp	r0, #73	; 0x49
   153f4:	d10e      	bne.n	15414 <d_name+0x5c>
   153f6:	2c00      	cmp	r4, #0
   153f8:	f040 8096 	bne.w	15528 <d_name+0x170>
   153fc:	4628      	mov	r0, r5
   153fe:	4631      	mov	r1, r6
   15400:	f7ff f9c0 	bl	14784 <d_add_substitution>
   15404:	2800      	cmp	r0, #0
   15406:	f040 808f 	bne.w	15528 <d_name+0x170>
   1540a:	4626      	mov	r6, r4
   1540c:	e002      	b.n	15414 <d_name+0x5c>
   1540e:	f7ff fe79 	bl	15104 <d_unqualified_name>
   15412:	4606      	mov	r6, r0
   15414:	4630      	mov	r0, r6
   15416:	b003      	add	sp, #12
   15418:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1541a:	f7ff fe73 	bl	15104 <d_unqualified_name>
   1541e:	68eb      	ldr	r3, [r5, #12]
   15420:	781a      	ldrb	r2, [r3, #0]
   15422:	2a49      	cmp	r2, #73	; 0x49
   15424:	4606      	mov	r6, r0
   15426:	d1f5      	bne.n	15414 <d_name+0x5c>
   15428:	4628      	mov	r0, r5
   1542a:	4631      	mov	r1, r6
   1542c:	f7ff f9aa 	bl	14784 <d_add_substitution>
   15430:	2800      	cmp	r0, #0
   15432:	d179      	bne.n	15528 <d_name+0x170>
   15434:	4606      	mov	r6, r0
   15436:	e7ed      	b.n	15414 <d_name+0x5c>
   15438:	3301      	adds	r3, #1
   1543a:	a901      	add	r1, sp, #4
   1543c:	60c3      	str	r3, [r0, #12]
   1543e:	2201      	movs	r2, #1
   15440:	f7fe ff46 	bl	142d0 <d_cv_qualifiers>
   15444:	4606      	mov	r6, r0
   15446:	2800      	cmp	r0, #0
   15448:	d0e4      	beq.n	15414 <d_name+0x5c>
   1544a:	68eb      	ldr	r3, [r5, #12]
   1544c:	2700      	movs	r7, #0
   1544e:	781c      	ldrb	r4, [r3, #0]
   15450:	2c00      	cmp	r4, #0
   15452:	f000 80ca 	beq.w	155ea <d_name+0x232>
   15456:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
   1545a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   1545e:	b2d1      	uxtb	r1, r2
   15460:	fa5f fc8e 	uxtb.w	ip, lr
   15464:	2909      	cmp	r1, #9
   15466:	bf8c      	ite	hi
   15468:	2100      	movhi	r1, #0
   1546a:	2101      	movls	r1, #1
   1546c:	f1bc 0f19 	cmp.w	ip, #25
   15470:	bf8c      	ite	hi
   15472:	4608      	movhi	r0, r1
   15474:	f041 0001 	orrls.w	r0, r1, #1
   15478:	2800      	cmp	r0, #0
   1547a:	f040 8093 	bne.w	155a4 <d_name+0x1ec>
   1547e:	f1a4 0143 	sub.w	r1, r4, #67	; 0x43
   15482:	f1d1 0c00 	rsbs	ip, r1, #0
   15486:	eb4c 0001 	adc.w	r0, ip, r1
   1548a:	2c44      	cmp	r4, #68	; 0x44
   1548c:	bf08      	it	eq
   1548e:	f040 0001 	orreq.w	r0, r0, #1
   15492:	2800      	cmp	r0, #0
   15494:	f040 8086 	bne.w	155a4 <d_name+0x1ec>
   15498:	f1a4 0255 	sub.w	r2, r4, #85	; 0x55
   1549c:	f1d2 0e00 	rsbs	lr, r2, #0
   154a0:	eb4e 0202 	adc.w	r2, lr, r2
   154a4:	2c4c      	cmp	r4, #76	; 0x4c
   154a6:	bf08      	it	eq
   154a8:	f042 0201 	orreq.w	r2, r2, #1
   154ac:	2a00      	cmp	r2, #0
   154ae:	d179      	bne.n	155a4 <d_name+0x1ec>
   154b0:	2c53      	cmp	r4, #83	; 0x53
   154b2:	f000 809e 	beq.w	155f2 <d_name+0x23a>
   154b6:	2c49      	cmp	r4, #73	; 0x49
   154b8:	f000 8090 	beq.w	155dc <d_name+0x224>
   154bc:	2c54      	cmp	r4, #84	; 0x54
   154be:	f000 80ba 	beq.w	15636 <d_name+0x27e>
   154c2:	2c45      	cmp	r4, #69	; 0x45
   154c4:	f000 80ce 	beq.w	15664 <d_name+0x2ac>
   154c8:	2c4d      	cmp	r4, #77	; 0x4d
   154ca:	f040 808e 	bne.w	155ea <d_name+0x232>
   154ce:	2f00      	cmp	r7, #0
   154d0:	f000 808b 	beq.w	155ea <d_name+0x232>
   154d4:	1c58      	adds	r0, r3, #1
   154d6:	60e8      	str	r0, [r5, #12]
   154d8:	785c      	ldrb	r4, [r3, #1]
   154da:	4603      	mov	r3, r0
   154dc:	e7b8      	b.n	15450 <d_name+0x98>
   154de:	1c5c      	adds	r4, r3, #1
   154e0:	2100      	movs	r1, #0
   154e2:	60c4      	str	r4, [r0, #12]
   154e4:	f000 f8ce 	bl	15684 <d_encoding>
   154e8:	68eb      	ldr	r3, [r5, #12]
   154ea:	781e      	ldrb	r6, [r3, #0]
   154ec:	2e45      	cmp	r6, #69	; 0x45
   154ee:	4604      	mov	r4, r0
   154f0:	d025      	beq.n	1553e <d_name+0x186>
   154f2:	2600      	movs	r6, #0
   154f4:	e78e      	b.n	15414 <d_name+0x5c>
   154f6:	f64b 01a8 	movw	r1, #47272	; 0xb8a8
   154fa:	3302      	adds	r3, #2
   154fc:	2203      	movs	r2, #3
   154fe:	f2c0 0102 	movt	r1, #2
   15502:	60c3      	str	r3, [r0, #12]
   15504:	f7fe fe94 	bl	14230 <d_make_name>
   15508:	4604      	mov	r4, r0
   1550a:	4628      	mov	r0, r5
   1550c:	f7ff fdfa 	bl	15104 <d_unqualified_name>
   15510:	4622      	mov	r2, r4
   15512:	2101      	movs	r1, #1
   15514:	2400      	movs	r4, #0
   15516:	4603      	mov	r3, r0
   15518:	4628      	mov	r0, r5
   1551a:	f7fe fe37 	bl	1418c <d_make_comp>
   1551e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
   15520:	1cd1      	adds	r1, r2, #3
   15522:	6329      	str	r1, [r5, #48]	; 0x30
   15524:	4606      	mov	r6, r0
   15526:	e762      	b.n	153ee <d_name+0x36>
   15528:	4628      	mov	r0, r5
   1552a:	f7ff feef 	bl	1530c <d_template_args>
   1552e:	4632      	mov	r2, r6
   15530:	2104      	movs	r1, #4
   15532:	4603      	mov	r3, r0
   15534:	4628      	mov	r0, r5
   15536:	f7fe fe29 	bl	1418c <d_make_comp>
   1553a:	4606      	mov	r6, r0
   1553c:	e76a      	b.n	15414 <d_name+0x5c>
   1553e:	1c59      	adds	r1, r3, #1
   15540:	60e9      	str	r1, [r5, #12]
   15542:	785a      	ldrb	r2, [r3, #1]
   15544:	2a73      	cmp	r2, #115	; 0x73
   15546:	d05a      	beq.n	155fe <d_name+0x246>
   15548:	2a64      	cmp	r2, #100	; 0x64
   1554a:	bf18      	it	ne
   1554c:	f04f 37ff 	movne.w	r7, #4294967295
   15550:	d068      	beq.n	15624 <d_name+0x26c>
   15552:	4628      	mov	r0, r5
   15554:	f7ff ff30 	bl	153b8 <d_name>
   15558:	4606      	mov	r6, r0
   1555a:	b140      	cbz	r0, 1556e <d_name+0x1b6>
   1555c:	7803      	ldrb	r3, [r0, #0]
   1555e:	2b3e      	cmp	r3, #62	; 0x3e
   15560:	d005      	beq.n	1556e <d_name+0x1b6>
   15562:	2b40      	cmp	r3, #64	; 0x40
   15564:	d003      	beq.n	1556e <d_name+0x1b6>
   15566:	68eb      	ldr	r3, [r5, #12]
   15568:	7818      	ldrb	r0, [r3, #0]
   1556a:	285f      	cmp	r0, #95	; 0x5f
   1556c:	d068      	beq.n	15640 <d_name+0x288>
   1556e:	1c78      	adds	r0, r7, #1
   15570:	bf08      	it	eq
   15572:	4633      	moveq	r3, r6
   15574:	d00f      	beq.n	15596 <d_name+0x1de>
   15576:	696b      	ldr	r3, [r5, #20]
   15578:	69aa      	ldr	r2, [r5, #24]
   1557a:	4293      	cmp	r3, r2
   1557c:	da50      	bge.n	15620 <d_name+0x268>
   1557e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   15582:	6929      	ldr	r1, [r5, #16]
   15584:	3301      	adds	r3, #1
   15586:	616b      	str	r3, [r5, #20]
   15588:	0082      	lsls	r2, r0, #2
   1558a:	188b      	adds	r3, r1, r2
   1558c:	d003      	beq.n	15596 <d_name+0x1de>
   1558e:	203f      	movs	r0, #63	; 0x3f
   15590:	609f      	str	r7, [r3, #8]
   15592:	5488      	strb	r0, [r1, r2]
   15594:	605e      	str	r6, [r3, #4]
   15596:	4628      	mov	r0, r5
   15598:	2102      	movs	r1, #2
   1559a:	4622      	mov	r2, r4
   1559c:	f7fe fdf6 	bl	1418c <d_make_comp>
   155a0:	4606      	mov	r6, r0
   155a2:	e737      	b.n	15414 <d_name+0x5c>
   155a4:	4628      	mov	r0, r5
   155a6:	f7ff fdad 	bl	15104 <d_unqualified_name>
   155aa:	4603      	mov	r3, r0
   155ac:	b1a7      	cbz	r7, 155d8 <d_name+0x220>
   155ae:	2101      	movs	r1, #1
   155b0:	463a      	mov	r2, r7
   155b2:	4628      	mov	r0, r5
   155b4:	f7fe fdea 	bl	1418c <d_make_comp>
   155b8:	4607      	mov	r7, r0
   155ba:	2c53      	cmp	r4, #83	; 0x53
   155bc:	d009      	beq.n	155d2 <d_name+0x21a>
   155be:	68eb      	ldr	r3, [r5, #12]
   155c0:	781c      	ldrb	r4, [r3, #0]
   155c2:	2c45      	cmp	r4, #69	; 0x45
   155c4:	f43f af47 	beq.w	15456 <d_name+0x9e>
   155c8:	4628      	mov	r0, r5
   155ca:	4639      	mov	r1, r7
   155cc:	f7ff f8da 	bl	14784 <d_add_substitution>
   155d0:	b158      	cbz	r0, 155ea <d_name+0x232>
   155d2:	68eb      	ldr	r3, [r5, #12]
   155d4:	781c      	ldrb	r4, [r3, #0]
   155d6:	e73b      	b.n	15450 <d_name+0x98>
   155d8:	461f      	mov	r7, r3
   155da:	e7ee      	b.n	155ba <d_name+0x202>
   155dc:	b12f      	cbz	r7, 155ea <d_name+0x232>
   155de:	4628      	mov	r0, r5
   155e0:	f7ff fe94 	bl	1530c <d_template_args>
   155e4:	2104      	movs	r1, #4
   155e6:	4603      	mov	r3, r0
   155e8:	e7e2      	b.n	155b0 <d_name+0x1f8>
   155ea:	2700      	movs	r7, #0
   155ec:	6037      	str	r7, [r6, #0]
   155ee:	463e      	mov	r6, r7
   155f0:	e710      	b.n	15414 <d_name+0x5c>
   155f2:	4628      	mov	r0, r5
   155f4:	2101      	movs	r1, #1
   155f6:	f7fe fef3 	bl	143e0 <d_substitution>
   155fa:	4603      	mov	r3, r0
   155fc:	e7d6      	b.n	155ac <d_name+0x1f4>
   155fe:	1c9a      	adds	r2, r3, #2
   15600:	60ea      	str	r2, [r5, #12]
   15602:	f893 e002 	ldrb.w	lr, [r3, #2]
   15606:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
   1560a:	d022      	beq.n	15652 <d_name+0x29a>
   1560c:	f64b 0198 	movw	r1, #47256	; 0xb898
   15610:	220e      	movs	r2, #14
   15612:	f2c0 0102 	movt	r1, #2
   15616:	4628      	mov	r0, r5
   15618:	f7fe fe0a 	bl	14230 <d_make_name>
   1561c:	4603      	mov	r3, r0
   1561e:	e7ba      	b.n	15596 <d_name+0x1de>
   15620:	2300      	movs	r3, #0
   15622:	e7b8      	b.n	15596 <d_name+0x1de>
   15624:	1c9f      	adds	r7, r3, #2
   15626:	4628      	mov	r0, r5
   15628:	60ef      	str	r7, [r5, #12]
   1562a:	f7fe fe9b 	bl	14364 <d_compact_number>
   1562e:	1e07      	subs	r7, r0, #0
   15630:	da8f      	bge.n	15552 <d_name+0x19a>
   15632:	2600      	movs	r6, #0
   15634:	e6ee      	b.n	15414 <d_name+0x5c>
   15636:	4628      	mov	r0, r5
   15638:	f7fe feae 	bl	14398 <d_template_param>
   1563c:	4603      	mov	r3, r0
   1563e:	e7b5      	b.n	155ac <d_name+0x1f4>
   15640:	1c59      	adds	r1, r3, #1
   15642:	4628      	mov	r0, r5
   15644:	60e9      	str	r1, [r5, #12]
   15646:	f7fe fe19 	bl	1427c <d_number>
   1564a:	2800      	cmp	r0, #0
   1564c:	da8f      	bge.n	1556e <d_name+0x1b6>
   1564e:	2600      	movs	r6, #0
   15650:	e6e0      	b.n	15414 <d_name+0x5c>
   15652:	3303      	adds	r3, #3
   15654:	4628      	mov	r0, r5
   15656:	60eb      	str	r3, [r5, #12]
   15658:	f7fe fe10 	bl	1427c <d_number>
   1565c:	2800      	cmp	r0, #0
   1565e:	dad5      	bge.n	1560c <d_name+0x254>
   15660:	2600      	movs	r6, #0
   15662:	e6d7      	b.n	15414 <d_name+0x5c>
   15664:	6037      	str	r7, [r6, #0]
   15666:	2f00      	cmp	r7, #0
   15668:	d0c1      	beq.n	155ee <d_name+0x236>
   1566a:	68eb      	ldr	r3, [r5, #12]
   1566c:	f893 c000 	ldrb.w	ip, [r3]
   15670:	f1bc 0f45 	cmp.w	ip, #69	; 0x45
   15674:	bf18      	it	ne
   15676:	4616      	movne	r6, r2
   15678:	f47f aecc 	bne.w	15414 <d_name+0x5c>
   1567c:	3301      	adds	r3, #1
   1567e:	9e01      	ldr	r6, [sp, #4]
   15680:	60eb      	str	r3, [r5, #12]
   15682:	e6c7      	b.n	15414 <d_name+0x5c>

00015684 <d_encoding>:
   15684:	68c2      	ldr	r2, [r0, #12]
   15686:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1568a:	460e      	mov	r6, r1
   1568c:	f892 c000 	ldrb.w	ip, [r2]
   15690:	4604      	mov	r4, r0
   15692:	f1ac 0147 	sub.w	r1, ip, #71	; 0x47
   15696:	424b      	negs	r3, r1
   15698:	eb43 0501 	adc.w	r5, r3, r1
   1569c:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   156a0:	bf14      	ite	ne
   156a2:	462b      	movne	r3, r5
   156a4:	f045 0301 	orreq.w	r3, r5, #1
   156a8:	2b00      	cmp	r3, #0
   156aa:	d14f      	bne.n	1574c <d_encoding+0xc8>
   156ac:	f7ff fe84 	bl	153b8 <d_name>
   156b0:	3600      	adds	r6, #0
   156b2:	bf18      	it	ne
   156b4:	2601      	movne	r6, #1
   156b6:	2800      	cmp	r0, #0
   156b8:	bf0c      	ite	eq
   156ba:	2600      	moveq	r6, #0
   156bc:	f006 0601 	andne.w	r6, r6, #1
   156c0:	4605      	mov	r5, r0
   156c2:	2e00      	cmp	r6, #0
   156c4:	d121      	bne.n	1570a <d_encoding+0x86>
   156c6:	68e3      	ldr	r3, [r4, #12]
   156c8:	781b      	ldrb	r3, [r3, #0]
   156ca:	f1d3 0201 	rsbs	r2, r3, #1
   156ce:	bf38      	it	cc
   156d0:	2200      	movcc	r2, #0
   156d2:	2d00      	cmp	r5, #0
   156d4:	bf08      	it	eq
   156d6:	f042 0201 	orreq.w	r2, r2, #1
   156da:	2a00      	cmp	r2, #0
   156dc:	d133      	bne.n	15746 <d_encoding+0xc2>
   156de:	2b45      	cmp	r3, #69	; 0x45
   156e0:	d031      	beq.n	15746 <d_encoding+0xc2>
   156e2:	462b      	mov	r3, r5
   156e4:	781a      	ldrb	r2, [r3, #0]
   156e6:	2a04      	cmp	r2, #4
   156e8:	f000 811e 	beq.w	15928 <d_encoding+0x2a4>
   156ec:	f1a2 021a 	sub.w	r2, r2, #26
   156f0:	d239      	bcs.n	15766 <d_encoding+0xe2>
   156f2:	2100      	movs	r1, #0
   156f4:	4620      	mov	r0, r4
   156f6:	f7ff fc69 	bl	14fcc <d_bare_function_type>
   156fa:	2103      	movs	r1, #3
   156fc:	462a      	mov	r2, r5
   156fe:	4603      	mov	r3, r0
   15700:	4620      	mov	r0, r4
   15702:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15706:	f7fe bd41 	b.w	1418c <d_make_comp>
   1570a:	68a1      	ldr	r1, [r4, #8]
   1570c:	07cb      	lsls	r3, r1, #31
   1570e:	d4da      	bmi.n	156c6 <d_encoding+0x42>
   15710:	7803      	ldrb	r3, [r0, #0]
   15712:	f1a3 0e1a 	sub.w	lr, r3, #26
   15716:	fa5f f08e 	uxtb.w	r0, lr
   1571a:	2802      	cmp	r0, #2
   1571c:	d808      	bhi.n	15730 <d_encoding+0xac>
   1571e:	686d      	ldr	r5, [r5, #4]
   15720:	782b      	ldrb	r3, [r5, #0]
   15722:	f1a3 021a 	sub.w	r2, r3, #26
   15726:	fa5f fc82 	uxtb.w	ip, r2
   1572a:	f1bc 0f02 	cmp.w	ip, #2
   1572e:	d9f6      	bls.n	1571e <d_encoding+0x9a>
   15730:	2b02      	cmp	r3, #2
   15732:	d108      	bne.n	15746 <d_encoding+0xc2>
   15734:	68ab      	ldr	r3, [r5, #8]
   15736:	e000      	b.n	1573a <d_encoding+0xb6>
   15738:	685b      	ldr	r3, [r3, #4]
   1573a:	7818      	ldrb	r0, [r3, #0]
   1573c:	381a      	subs	r0, #26
   1573e:	b2c1      	uxtb	r1, r0
   15740:	2902      	cmp	r1, #2
   15742:	d9f9      	bls.n	15738 <d_encoding+0xb4>
   15744:	60ab      	str	r3, [r5, #8]
   15746:	4628      	mov	r0, r5
   15748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1574c:	6b01      	ldr	r1, [r0, #48]	; 0x30
   1574e:	f101 0514 	add.w	r5, r1, #20
   15752:	6305      	str	r5, [r0, #48]	; 0x30
   15754:	7813      	ldrb	r3, [r2, #0]
   15756:	2b54      	cmp	r3, #84	; 0x54
   15758:	d070      	beq.n	1583c <d_encoding+0x1b8>
   1575a:	2b47      	cmp	r3, #71	; 0x47
   1575c:	d00a      	beq.n	15774 <d_encoding+0xf0>
   1575e:	2500      	movs	r5, #0
   15760:	4628      	mov	r0, r5
   15762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15766:	2a02      	cmp	r2, #2
   15768:	d8c3      	bhi.n	156f2 <d_encoding+0x6e>
   1576a:	685b      	ldr	r3, [r3, #4]
   1576c:	2b00      	cmp	r3, #0
   1576e:	d1b9      	bne.n	156e4 <d_encoding+0x60>
   15770:	4619      	mov	r1, r3
   15772:	e7bf      	b.n	156f4 <d_encoding+0x70>
   15774:	1c53      	adds	r3, r2, #1
   15776:	60c3      	str	r3, [r0, #12]
   15778:	7855      	ldrb	r5, [r2, #1]
   1577a:	2d00      	cmp	r5, #0
   1577c:	d0e3      	beq.n	15746 <d_encoding+0xc2>
   1577e:	3202      	adds	r2, #2
   15780:	2d52      	cmp	r5, #82	; 0x52
   15782:	60c2      	str	r2, [r0, #12]
   15784:	f000 8202 	beq.w	15b8c <d_encoding+0x508>
   15788:	f240 8139 	bls.w	159fe <d_encoding+0x37a>
   1578c:	2d56      	cmp	r5, #86	; 0x56
   1578e:	f000 81f3 	beq.w	15b78 <d_encoding+0x4f4>
   15792:	2d72      	cmp	r5, #114	; 0x72
   15794:	d1e3      	bne.n	1575e <d_encoding+0xda>
   15796:	f7fe fd71 	bl	1427c <d_number>
   1579a:	2801      	cmp	r0, #1
   1579c:	dddf      	ble.n	1575e <d_encoding+0xda>
   1579e:	68e6      	ldr	r6, [r4, #12]
   157a0:	7833      	ldrb	r3, [r6, #0]
   157a2:	2b00      	cmp	r3, #0
   157a4:	d0db      	beq.n	1575e <d_encoding+0xda>
   157a6:	3601      	adds	r6, #1
   157a8:	2b5f      	cmp	r3, #95	; 0x5f
   157aa:	60e6      	str	r6, [r4, #12]
   157ac:	d1d7      	bne.n	1575e <d_encoding+0xda>
   157ae:	1e45      	subs	r5, r0, #1
   157b0:	f04f 0800 	mov.w	r8, #0
   157b4:	f04f 0939 	mov.w	r9, #57	; 0x39
   157b8:	7833      	ldrb	r3, [r6, #0]
   157ba:	2b00      	cmp	r3, #0
   157bc:	f000 8206 	beq.w	15bcc <d_encoding+0x548>
   157c0:	2b24      	cmp	r3, #36	; 0x24
   157c2:	f000 81c5 	beq.w	15b50 <d_encoding+0x4cc>
   157c6:	2700      	movs	r7, #0
   157c8:	07e8      	lsls	r0, r5, #31
   157ca:	4633      	mov	r3, r6
   157cc:	d405      	bmi.n	157da <d_encoding+0x156>
   157ce:	2701      	movs	r7, #1
   157d0:	42af      	cmp	r7, r5
   157d2:	db0b      	blt.n	157ec <d_encoding+0x168>
   157d4:	e00e      	b.n	157f4 <d_encoding+0x170>
   157d6:	2a24      	cmp	r2, #36	; 0x24
   157d8:	d00c      	beq.n	157f4 <d_encoding+0x170>
   157da:	3701      	adds	r7, #1
   157dc:	42af      	cmp	r7, r5
   157de:	da09      	bge.n	157f4 <d_encoding+0x170>
   157e0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   157e4:	b132      	cbz	r2, 157f4 <d_encoding+0x170>
   157e6:	2a24      	cmp	r2, #36	; 0x24
   157e8:	d004      	beq.n	157f4 <d_encoding+0x170>
   157ea:	3701      	adds	r7, #1
   157ec:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   157f0:	2a00      	cmp	r2, #0
   157f2:	d1f0      	bne.n	157d6 <d_encoding+0x152>
   157f4:	4631      	mov	r1, r6
   157f6:	4620      	mov	r0, r4
   157f8:	463a      	mov	r2, r7
   157fa:	f7fe fd19 	bl	14230 <d_make_name>
   157fe:	68e3      	ldr	r3, [r4, #12]
   15800:	19de      	adds	r6, r3, r7
   15802:	60e6      	str	r6, [r4, #12]
   15804:	4603      	mov	r3, r0
   15806:	2800      	cmp	r0, #0
   15808:	f000 81ca 	beq.w	15ba0 <d_encoding+0x51c>
   1580c:	1bed      	subs	r5, r5, r7
   1580e:	f1b8 0f00 	cmp.w	r8, #0
   15812:	f000 81af 	beq.w	15b74 <d_encoding+0x4f0>
   15816:	4642      	mov	r2, r8
   15818:	4620      	mov	r0, r4
   1581a:	2138      	movs	r1, #56	; 0x38
   1581c:	f7fe fcb6 	bl	1418c <d_make_comp>
   15820:	4680      	mov	r8, r0
   15822:	2800      	cmp	r0, #0
   15824:	f000 81bc 	beq.w	15ba0 <d_encoding+0x51c>
   15828:	2d00      	cmp	r5, #0
   1582a:	dcc5      	bgt.n	157b8 <d_encoding+0x134>
   1582c:	4620      	mov	r0, r4
   1582e:	2137      	movs	r1, #55	; 0x37
   15830:	4642      	mov	r2, r8
   15832:	2300      	movs	r3, #0
   15834:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15838:	f7fe bca8 	b.w	1418c <d_make_comp>
   1583c:	1c53      	adds	r3, r2, #1
   1583e:	60c3      	str	r3, [r0, #12]
   15840:	7855      	ldrb	r5, [r2, #1]
   15842:	2d00      	cmp	r5, #0
   15844:	f43f af7f 	beq.w	15746 <d_encoding+0xc2>
   15848:	3d43      	subs	r5, #67	; 0x43
   1584a:	3202      	adds	r2, #2
   1584c:	60c2      	str	r2, [r0, #12]
   1584e:	2d33      	cmp	r5, #51	; 0x33
   15850:	d885      	bhi.n	1575e <d_encoding+0xda>
   15852:	a301      	add	r3, pc, #4	; (adr r3, 15858 <d_encoding+0x1d4>)
   15854:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   15858:	00015b15 	.word	0x00015b15
   1585c:	0001575f 	.word	0x0001575f
   15860:	0001575f 	.word	0x0001575f
   15864:	00015b01 	.word	0x00015b01
   15868:	0001575f 	.word	0x0001575f
   1586c:	0001575f 	.word	0x0001575f
   15870:	00015aed 	.word	0x00015aed
   15874:	00015ad9 	.word	0x00015ad9
   15878:	0001575f 	.word	0x0001575f
   1587c:	0001575f 	.word	0x0001575f
   15880:	0001575f 	.word	0x0001575f
   15884:	0001575f 	.word	0x0001575f
   15888:	0001575f 	.word	0x0001575f
   1588c:	0001575f 	.word	0x0001575f
   15890:	0001575f 	.word	0x0001575f
   15894:	0001575f 	.word	0x0001575f
   15898:	00015ac5 	.word	0x00015ac5
   1589c:	00015aad 	.word	0x00015aad
   158a0:	0001575f 	.word	0x0001575f
   158a4:	00015a95 	.word	0x00015a95
   158a8:	0001575f 	.word	0x0001575f
   158ac:	0001575f 	.word	0x0001575f
   158b0:	0001575f 	.word	0x0001575f
   158b4:	0001575f 	.word	0x0001575f
   158b8:	0001575f 	.word	0x0001575f
   158bc:	0001575f 	.word	0x0001575f
   158c0:	0001575f 	.word	0x0001575f
   158c4:	0001575f 	.word	0x0001575f
   158c8:	0001575f 	.word	0x0001575f
   158cc:	0001575f 	.word	0x0001575f
   158d0:	0001575f 	.word	0x0001575f
   158d4:	0001575f 	.word	0x0001575f
   158d8:	00015a63 	.word	0x00015a63
   158dc:	0001575f 	.word	0x0001575f
   158e0:	0001575f 	.word	0x0001575f
   158e4:	0001575f 	.word	0x0001575f
   158e8:	0001575f 	.word	0x0001575f
   158ec:	00015a3f 	.word	0x00015a3f
   158f0:	0001575f 	.word	0x0001575f
   158f4:	0001575f 	.word	0x0001575f
   158f8:	0001575f 	.word	0x0001575f
   158fc:	0001575f 	.word	0x0001575f
   15900:	0001575f 	.word	0x0001575f
   15904:	0001575f 	.word	0x0001575f
   15908:	0001575f 	.word	0x0001575f
   1590c:	0001575f 	.word	0x0001575f
   15910:	0001575f 	.word	0x0001575f
   15914:	0001575f 	.word	0x0001575f
   15918:	0001575f 	.word	0x0001575f
   1591c:	0001575f 	.word	0x0001575f
   15920:	0001575f 	.word	0x0001575f
   15924:	00015a1b 	.word	0x00015a1b
   15928:	685b      	ldr	r3, [r3, #4]
   1592a:	2b00      	cmp	r3, #0
   1592c:	d065      	beq.n	159fa <d_encoding+0x376>
   1592e:	7819      	ldrb	r1, [r3, #0]
   15930:	1e48      	subs	r0, r1, #1
   15932:	282d      	cmp	r0, #45	; 0x2d
   15934:	d861      	bhi.n	159fa <d_encoding+0x376>
   15936:	a101      	add	r1, pc, #4	; (adr r1, 1593c <d_encoding+0x2b8>)
   15938:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
   1593c:	000159f5 	.word	0x000159f5
   15940:	000159f5 	.word	0x000159f5
   15944:	000159fb 	.word	0x000159fb
   15948:	000159fb 	.word	0x000159fb
   1594c:	000159fb 	.word	0x000159fb
   15950:	000159fb 	.word	0x000159fb
   15954:	000156f3 	.word	0x000156f3
   15958:	000156f3 	.word	0x000156f3
   1595c:	000159fb 	.word	0x000159fb
   15960:	000159fb 	.word	0x000159fb
   15964:	000159fb 	.word	0x000159fb
   15968:	000159fb 	.word	0x000159fb
   1596c:	000159fb 	.word	0x000159fb
   15970:	000159fb 	.word	0x000159fb
   15974:	000159fb 	.word	0x000159fb
   15978:	000159fb 	.word	0x000159fb
   1597c:	000159fb 	.word	0x000159fb
   15980:	000159fb 	.word	0x000159fb
   15984:	000159fb 	.word	0x000159fb
   15988:	000159fb 	.word	0x000159fb
   1598c:	000159fb 	.word	0x000159fb
   15990:	000159fb 	.word	0x000159fb
   15994:	000159fb 	.word	0x000159fb
   15998:	000159fb 	.word	0x000159fb
   1599c:	000159fb 	.word	0x000159fb
   159a0:	000159fb 	.word	0x000159fb
   159a4:	000159fb 	.word	0x000159fb
   159a8:	000159fb 	.word	0x000159fb
   159ac:	000159fb 	.word	0x000159fb
   159b0:	000159fb 	.word	0x000159fb
   159b4:	000159fb 	.word	0x000159fb
   159b8:	000159fb 	.word	0x000159fb
   159bc:	000159fb 	.word	0x000159fb
   159c0:	000159fb 	.word	0x000159fb
   159c4:	000159fb 	.word	0x000159fb
   159c8:	000159fb 	.word	0x000159fb
   159cc:	000159fb 	.word	0x000159fb
   159d0:	000159fb 	.word	0x000159fb
   159d4:	000159fb 	.word	0x000159fb
   159d8:	000159fb 	.word	0x000159fb
   159dc:	000159fb 	.word	0x000159fb
   159e0:	000159fb 	.word	0x000159fb
   159e4:	000159fb 	.word	0x000159fb
   159e8:	000159fb 	.word	0x000159fb
   159ec:	000159fb 	.word	0x000159fb
   159f0:	000156f3 	.word	0x000156f3
   159f4:	689b      	ldr	r3, [r3, #8]
   159f6:	2b00      	cmp	r3, #0
   159f8:	d199      	bne.n	1592e <d_encoding+0x2aa>
   159fa:	2101      	movs	r1, #1
   159fc:	e67a      	b.n	156f4 <d_encoding+0x70>
   159fe:	2d41      	cmp	r5, #65	; 0x41
   15a00:	f47f aead 	bne.w	1575e <d_encoding+0xda>
   15a04:	2100      	movs	r1, #0
   15a06:	f7ff fe3d 	bl	15684 <d_encoding>
   15a0a:	2115      	movs	r1, #21
   15a0c:	2300      	movs	r3, #0
   15a0e:	4602      	mov	r2, r0
   15a10:	4620      	mov	r0, r4
   15a12:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15a16:	f7fe bbb9 	b.w	1418c <d_make_comp>
   15a1a:	2176      	movs	r1, #118	; 0x76
   15a1c:	f7fe fe88 	bl	14730 <d_call_offset>
   15a20:	2800      	cmp	r0, #0
   15a22:	f000 80bd 	beq.w	15ba0 <d_encoding+0x51c>
   15a26:	2100      	movs	r1, #0
   15a28:	4620      	mov	r0, r4
   15a2a:	f7ff fe2b 	bl	15684 <d_encoding>
   15a2e:	2110      	movs	r1, #16
   15a30:	2300      	movs	r3, #0
   15a32:	4602      	mov	r2, r0
   15a34:	4620      	mov	r0, r4
   15a36:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15a3a:	f7fe bba7 	b.w	1418c <d_make_comp>
   15a3e:	2168      	movs	r1, #104	; 0x68
   15a40:	f7fe fe76 	bl	14730 <d_call_offset>
   15a44:	2800      	cmp	r0, #0
   15a46:	f000 80ab 	beq.w	15ba0 <d_encoding+0x51c>
   15a4a:	2100      	movs	r1, #0
   15a4c:	4620      	mov	r0, r4
   15a4e:	f7ff fe19 	bl	15684 <d_encoding>
   15a52:	210f      	movs	r1, #15
   15a54:	2300      	movs	r3, #0
   15a56:	4602      	mov	r2, r0
   15a58:	4620      	mov	r0, r4
   15a5a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15a5e:	f7fe bb95 	b.w	1418c <d_make_comp>
   15a62:	2100      	movs	r1, #0
   15a64:	f7fe fe64 	bl	14730 <d_call_offset>
   15a68:	2800      	cmp	r0, #0
   15a6a:	f000 8099 	beq.w	15ba0 <d_encoding+0x51c>
   15a6e:	4620      	mov	r0, r4
   15a70:	2100      	movs	r1, #0
   15a72:	f7fe fe5d 	bl	14730 <d_call_offset>
   15a76:	2800      	cmp	r0, #0
   15a78:	f000 8092 	beq.w	15ba0 <d_encoding+0x51c>
   15a7c:	2100      	movs	r1, #0
   15a7e:	4620      	mov	r0, r4
   15a80:	f7ff fe00 	bl	15684 <d_encoding>
   15a84:	2111      	movs	r1, #17
   15a86:	2300      	movs	r3, #0
   15a88:	4602      	mov	r2, r0
   15a8a:	4620      	mov	r0, r4
   15a8c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15a90:	f7fe bb7c 	b.w	1418c <d_make_comp>
   15a94:	310f      	adds	r1, #15
   15a96:	6301      	str	r1, [r0, #48]	; 0x30
   15a98:	f7fe fec6 	bl	14828 <d_type>
   15a9c:	2109      	movs	r1, #9
   15a9e:	2300      	movs	r3, #0
   15aa0:	4602      	mov	r2, r0
   15aa2:	4620      	mov	r0, r4
   15aa4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15aa8:	f7fe bb70 	b.w	1418c <d_make_comp>
   15aac:	310a      	adds	r1, #10
   15aae:	6301      	str	r1, [r0, #48]	; 0x30
   15ab0:	f7fe feba 	bl	14828 <d_type>
   15ab4:	210a      	movs	r1, #10
   15ab6:	2300      	movs	r3, #0
   15ab8:	4602      	mov	r2, r0
   15aba:	4620      	mov	r0, r4
   15abc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15ac0:	f7fe bb64 	b.w	1418c <d_make_comp>
   15ac4:	f7fe feb0 	bl	14828 <d_type>
   15ac8:	210d      	movs	r1, #13
   15aca:	2300      	movs	r3, #0
   15acc:	4602      	mov	r2, r0
   15ace:	4620      	mov	r0, r4
   15ad0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15ad4:	f7fe bb5a 	b.w	1418c <d_make_comp>
   15ad8:	f7fe fea6 	bl	14828 <d_type>
   15adc:	2112      	movs	r1, #18
   15ade:	2300      	movs	r3, #0
   15ae0:	4602      	mov	r2, r0
   15ae2:	4620      	mov	r0, r4
   15ae4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15ae8:	f7fe bb50 	b.w	1418c <d_make_comp>
   15aec:	f7fe fe9c 	bl	14828 <d_type>
   15af0:	210c      	movs	r1, #12
   15af2:	2300      	movs	r3, #0
   15af4:	4602      	mov	r2, r0
   15af6:	4620      	mov	r0, r4
   15af8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15afc:	f7fe bb46 	b.w	1418c <d_make_comp>
   15b00:	f7fe fe92 	bl	14828 <d_type>
   15b04:	210e      	movs	r1, #14
   15b06:	2300      	movs	r3, #0
   15b08:	4602      	mov	r2, r0
   15b0a:	4620      	mov	r0, r4
   15b0c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15b10:	f7fe bb3c 	b.w	1418c <d_make_comp>
   15b14:	f7fe fe88 	bl	14828 <d_type>
   15b18:	4606      	mov	r6, r0
   15b1a:	4620      	mov	r0, r4
   15b1c:	f7fe fbae 	bl	1427c <d_number>
   15b20:	2800      	cmp	r0, #0
   15b22:	f6ff ae1c 	blt.w	1575e <d_encoding+0xda>
   15b26:	68e3      	ldr	r3, [r4, #12]
   15b28:	7818      	ldrb	r0, [r3, #0]
   15b2a:	285f      	cmp	r0, #95	; 0x5f
   15b2c:	f47f ae17 	bne.w	1575e <d_encoding+0xda>
   15b30:	1c59      	adds	r1, r3, #1
   15b32:	4620      	mov	r0, r4
   15b34:	60e1      	str	r1, [r4, #12]
   15b36:	f7fe fe77 	bl	14828 <d_type>
   15b3a:	6b25      	ldr	r5, [r4, #48]	; 0x30
   15b3c:	210b      	movs	r1, #11
   15b3e:	4633      	mov	r3, r6
   15b40:	3505      	adds	r5, #5
   15b42:	6325      	str	r5, [r4, #48]	; 0x30
   15b44:	4602      	mov	r2, r0
   15b46:	4620      	mov	r0, r4
   15b48:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15b4c:	f7fe bb1e 	b.w	1418c <d_make_comp>
   15b50:	7873      	ldrb	r3, [r6, #1]
   15b52:	2b53      	cmp	r3, #83	; 0x53
   15b54:	d038      	beq.n	15bc8 <d_encoding+0x544>
   15b56:	2b5f      	cmp	r3, #95	; 0x5f
   15b58:	d034      	beq.n	15bc4 <d_encoding+0x540>
   15b5a:	2b24      	cmp	r3, #36	; 0x24
   15b5c:	f47f adff 	bne.w	1575e <d_encoding+0xda>
   15b60:	461e      	mov	r6, r3
   15b62:	6962      	ldr	r2, [r4, #20]
   15b64:	69a0      	ldr	r0, [r4, #24]
   15b66:	4282      	cmp	r2, r0
   15b68:	db1c      	blt.n	15ba4 <d_encoding+0x520>
   15b6a:	68e2      	ldr	r2, [r4, #12]
   15b6c:	2500      	movs	r5, #0
   15b6e:	1c91      	adds	r1, r2, #2
   15b70:	60e1      	str	r1, [r4, #12]
   15b72:	e5e8      	b.n	15746 <d_encoding+0xc2>
   15b74:	4698      	mov	r8, r3
   15b76:	e657      	b.n	15828 <d_encoding+0x1a4>
   15b78:	f7ff fc1e 	bl	153b8 <d_name>
   15b7c:	2113      	movs	r1, #19
   15b7e:	2300      	movs	r3, #0
   15b80:	4602      	mov	r2, r0
   15b82:	4620      	mov	r0, r4
   15b84:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15b88:	f7fe bb00 	b.w	1418c <d_make_comp>
   15b8c:	f7ff fc14 	bl	153b8 <d_name>
   15b90:	2114      	movs	r1, #20
   15b92:	2300      	movs	r3, #0
   15b94:	4602      	mov	r2, r0
   15b96:	4620      	mov	r0, r4
   15b98:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15b9c:	f7fe baf6 	b.w	1418c <d_make_comp>
   15ba0:	4605      	mov	r5, r0
   15ba2:	e5d0      	b.n	15746 <d_encoding+0xc2>
   15ba4:	6921      	ldr	r1, [r4, #16]
   15ba6:	eb02 0042 	add.w	r0, r2, r2, lsl #1
   15baa:	1c53      	adds	r3, r2, #1
   15bac:	6163      	str	r3, [r4, #20]
   15bae:	eb11 0380 	adds.w	r3, r1, r0, lsl #2
   15bb2:	d0da      	beq.n	15b6a <d_encoding+0x4e6>
   15bb4:	605e      	str	r6, [r3, #4]
   15bb6:	3d02      	subs	r5, #2
   15bb8:	68e6      	ldr	r6, [r4, #12]
   15bba:	f801 9020 	strb.w	r9, [r1, r0, lsl #2]
   15bbe:	3602      	adds	r6, #2
   15bc0:	60e6      	str	r6, [r4, #12]
   15bc2:	e624      	b.n	1580e <d_encoding+0x18a>
   15bc4:	262e      	movs	r6, #46	; 0x2e
   15bc6:	e7cc      	b.n	15b62 <d_encoding+0x4de>
   15bc8:	262f      	movs	r6, #47	; 0x2f
   15bca:	e7ca      	b.n	15b62 <d_encoding+0x4de>
   15bcc:	461d      	mov	r5, r3
   15bce:	e5ba      	b.n	15746 <d_encoding+0xc2>

00015bd0 <d_mangled_name>:
   15bd0:	68c2      	ldr	r2, [r0, #12]
   15bd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15bd4:	4604      	mov	r4, r0
   15bd6:	7813      	ldrb	r3, [r2, #0]
   15bd8:	460e      	mov	r6, r1
   15bda:	2b5f      	cmp	r3, #95	; 0x5f
   15bdc:	d07d      	beq.n	15cda <d_mangled_name+0x10a>
   15bde:	b909      	cbnz	r1, 15be4 <d_mangled_name+0x14>
   15be0:	2b5a      	cmp	r3, #90	; 0x5a
   15be2:	d002      	beq.n	15bea <d_mangled_name+0x1a>
   15be4:	2500      	movs	r5, #0
   15be6:	4628      	mov	r0, r5
   15be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15bea:	3201      	adds	r2, #1
   15bec:	4620      	mov	r0, r4
   15bee:	60e2      	str	r2, [r4, #12]
   15bf0:	4631      	mov	r1, r6
   15bf2:	f7ff fd47 	bl	15684 <d_encoding>
   15bf6:	4605      	mov	r5, r0
   15bf8:	2e00      	cmp	r6, #0
   15bfa:	d0f4      	beq.n	15be6 <d_mangled_name+0x16>
   15bfc:	68a3      	ldr	r3, [r4, #8]
   15bfe:	07db      	lsls	r3, r3, #31
   15c00:	d5f1      	bpl.n	15be6 <d_mangled_name+0x16>
   15c02:	68e1      	ldr	r1, [r4, #12]
   15c04:	780a      	ldrb	r2, [r1, #0]
   15c06:	2a2e      	cmp	r2, #46	; 0x2e
   15c08:	d1ed      	bne.n	15be6 <d_mangled_name+0x16>
   15c0a:	784b      	ldrb	r3, [r1, #1]
   15c0c:	f1a3 0e5f 	sub.w	lr, r3, #95	; 0x5f
   15c10:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   15c14:	f1de 0000 	rsbs	r0, lr, #0
   15c18:	eb40 0c0e 	adc.w	ip, r0, lr
   15c1c:	fa5f fe82 	uxtb.w	lr, r2
   15c20:	f1be 0f19 	cmp.w	lr, #25
   15c24:	bf8c      	ite	hi
   15c26:	4660      	movhi	r0, ip
   15c28:	f04c 0001 	orrls.w	r0, ip, #1
   15c2c:	2800      	cmp	r0, #0
   15c2e:	d12c      	bne.n	15c8a <d_mangled_name+0xba>
   15c30:	3b30      	subs	r3, #48	; 0x30
   15c32:	b2db      	uxtb	r3, r3
   15c34:	2b09      	cmp	r3, #9
   15c36:	d8d6      	bhi.n	15be6 <d_mangled_name+0x16>
   15c38:	780b      	ldrb	r3, [r1, #0]
   15c3a:	460a      	mov	r2, r1
   15c3c:	2b2e      	cmp	r3, #46	; 0x2e
   15c3e:	d117      	bne.n	15c70 <d_mangled_name+0xa0>
   15c40:	7850      	ldrb	r0, [r2, #1]
   15c42:	3830      	subs	r0, #48	; 0x30
   15c44:	b2c3      	uxtb	r3, r0
   15c46:	2b09      	cmp	r3, #9
   15c48:	d812      	bhi.n	15c70 <d_mangled_name+0xa0>
   15c4a:	7893      	ldrb	r3, [r2, #2]
   15c4c:	3202      	adds	r2, #2
   15c4e:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
   15c52:	fa5f f08c 	uxtb.w	r0, ip
   15c56:	2809      	cmp	r0, #9
   15c58:	d8f0      	bhi.n	15c3c <d_mangled_name+0x6c>
   15c5a:	4610      	mov	r0, r2
   15c5c:	3001      	adds	r0, #1
   15c5e:	4602      	mov	r2, r0
   15c60:	7803      	ldrb	r3, [r0, #0]
   15c62:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   15c66:	b2f6      	uxtb	r6, r6
   15c68:	2e09      	cmp	r6, #9
   15c6a:	d9f7      	bls.n	15c5c <d_mangled_name+0x8c>
   15c6c:	2b2e      	cmp	r3, #46	; 0x2e
   15c6e:	d0e7      	beq.n	15c40 <d_mangled_name+0x70>
   15c70:	60e2      	str	r2, [r4, #12]
   15c72:	4620      	mov	r0, r4
   15c74:	1a52      	subs	r2, r2, r1
   15c76:	f7fe fadb 	bl	14230 <d_make_name>
   15c7a:	462a      	mov	r2, r5
   15c7c:	2142      	movs	r1, #66	; 0x42
   15c7e:	4603      	mov	r3, r0
   15c80:	4620      	mov	r0, r4
   15c82:	f7fe fa83 	bl	1418c <d_make_comp>
   15c86:	4605      	mov	r5, r0
   15c88:	e7bb      	b.n	15c02 <d_mangled_name+0x32>
   15c8a:	788b      	ldrb	r3, [r1, #2]
   15c8c:	1c8a      	adds	r2, r1, #2
   15c8e:	f1a3 005f 	sub.w	r0, r3, #95	; 0x5f
   15c92:	f1a3 0661 	sub.w	r6, r3, #97	; 0x61
   15c96:	f1d0 0e00 	rsbs	lr, r0, #0
   15c9a:	eb4e 0000 	adc.w	r0, lr, r0
   15c9e:	b2f6      	uxtb	r6, r6
   15ca0:	2e19      	cmp	r6, #25
   15ca2:	bf98      	it	ls
   15ca4:	f040 0001 	orrls.w	r0, r0, #1
   15ca8:	2800      	cmp	r0, #0
   15caa:	d0c7      	beq.n	15c3c <d_mangled_name+0x6c>
   15cac:	4610      	mov	r0, r2
   15cae:	3001      	adds	r0, #1
   15cb0:	4602      	mov	r2, r0
   15cb2:	7803      	ldrb	r3, [r0, #0]
   15cb4:	f1a3 0661 	sub.w	r6, r3, #97	; 0x61
   15cb8:	f1a3 0e5f 	sub.w	lr, r3, #95	; 0x5f
   15cbc:	f1de 0700 	rsbs	r7, lr, #0
   15cc0:	eb47 070e 	adc.w	r7, r7, lr
   15cc4:	fa5f fc86 	uxtb.w	ip, r6
   15cc8:	f1bc 0f19 	cmp.w	ip, #25
   15ccc:	bf8c      	ite	hi
   15cce:	463e      	movhi	r6, r7
   15cd0:	f047 0601 	orrls.w	r6, r7, #1
   15cd4:	2e00      	cmp	r6, #0
   15cd6:	d1ea      	bne.n	15cae <d_mangled_name+0xde>
   15cd8:	e7b0      	b.n	15c3c <d_mangled_name+0x6c>
   15cda:	1c51      	adds	r1, r2, #1
   15cdc:	60c1      	str	r1, [r0, #12]
   15cde:	7853      	ldrb	r3, [r2, #1]
   15ce0:	460a      	mov	r2, r1
   15ce2:	e77d      	b.n	15be0 <d_mangled_name+0x10>

00015ce4 <d_expr_primary>:
   15ce4:	68c3      	ldr	r3, [r0, #12]
   15ce6:	b570      	push	{r4, r5, r6, lr}
   15ce8:	4604      	mov	r4, r0
   15cea:	781a      	ldrb	r2, [r3, #0]
   15cec:	2a4c      	cmp	r2, #76	; 0x4c
   15cee:	d001      	beq.n	15cf4 <d_expr_primary+0x10>
   15cf0:	2000      	movs	r0, #0
   15cf2:	bd70      	pop	{r4, r5, r6, pc}
   15cf4:	1c59      	adds	r1, r3, #1
   15cf6:	60c1      	str	r1, [r0, #12]
   15cf8:	f893 c001 	ldrb.w	ip, [r3, #1]
   15cfc:	f1ac 025f 	sub.w	r2, ip, #95	; 0x5f
   15d00:	f1d2 0e00 	rsbs	lr, r2, #0
   15d04:	eb4e 0102 	adc.w	r1, lr, r2
   15d08:	f1bc 0f5a 	cmp.w	ip, #90	; 0x5a
   15d0c:	bf14      	ite	ne
   15d0e:	460b      	movne	r3, r1
   15d10:	f041 0301 	orreq.w	r3, r1, #1
   15d14:	2b00      	cmp	r3, #0
   15d16:	d128      	bne.n	15d6a <d_expr_primary+0x86>
   15d18:	f7fe fd86 	bl	14828 <d_type>
   15d1c:	4605      	mov	r5, r0
   15d1e:	b318      	cbz	r0, 15d68 <d_expr_primary+0x84>
   15d20:	7806      	ldrb	r6, [r0, #0]
   15d22:	2e23      	cmp	r6, #35	; 0x23
   15d24:	d031      	beq.n	15d8a <d_expr_primary+0xa6>
   15d26:	68e1      	ldr	r1, [r4, #12]
   15d28:	2635      	movs	r6, #53	; 0x35
   15d2a:	7808      	ldrb	r0, [r1, #0]
   15d2c:	286e      	cmp	r0, #110	; 0x6e
   15d2e:	d026      	beq.n	15d7e <d_expr_primary+0x9a>
   15d30:	2845      	cmp	r0, #69	; 0x45
   15d32:	d033      	beq.n	15d9c <d_expr_primary+0xb8>
   15d34:	460b      	mov	r3, r1
   15d36:	460a      	mov	r2, r1
   15d38:	b908      	cbnz	r0, 15d3e <d_expr_primary+0x5a>
   15d3a:	e015      	b.n	15d68 <d_expr_primary+0x84>
   15d3c:	b1a0      	cbz	r0, 15d68 <d_expr_primary+0x84>
   15d3e:	3201      	adds	r2, #1
   15d40:	60e2      	str	r2, [r4, #12]
   15d42:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   15d46:	2845      	cmp	r0, #69	; 0x45
   15d48:	d1f8      	bne.n	15d3c <d_expr_primary+0x58>
   15d4a:	1a52      	subs	r2, r2, r1
   15d4c:	4620      	mov	r0, r4
   15d4e:	f7fe fa6f 	bl	14230 <d_make_name>
   15d52:	4631      	mov	r1, r6
   15d54:	462a      	mov	r2, r5
   15d56:	4603      	mov	r3, r0
   15d58:	4620      	mov	r0, r4
   15d5a:	f7fe fa17 	bl	1418c <d_make_comp>
   15d5e:	68e3      	ldr	r3, [r4, #12]
   15d60:	7819      	ldrb	r1, [r3, #0]
   15d62:	2945      	cmp	r1, #69	; 0x45
   15d64:	d008      	beq.n	15d78 <d_expr_primary+0x94>
   15d66:	2000      	movs	r0, #0
   15d68:	bd70      	pop	{r4, r5, r6, pc}
   15d6a:	2100      	movs	r1, #0
   15d6c:	f7ff ff30 	bl	15bd0 <d_mangled_name>
   15d70:	68e3      	ldr	r3, [r4, #12]
   15d72:	7819      	ldrb	r1, [r3, #0]
   15d74:	2945      	cmp	r1, #69	; 0x45
   15d76:	d1f6      	bne.n	15d66 <d_expr_primary+0x82>
   15d78:	1c5a      	adds	r2, r3, #1
   15d7a:	60e2      	str	r2, [r4, #12]
   15d7c:	bd70      	pop	{r4, r5, r6, pc}
   15d7e:	1c4b      	adds	r3, r1, #1
   15d80:	2636      	movs	r6, #54	; 0x36
   15d82:	60e3      	str	r3, [r4, #12]
   15d84:	7848      	ldrb	r0, [r1, #1]
   15d86:	4619      	mov	r1, r3
   15d88:	e7d2      	b.n	15d30 <d_expr_primary+0x4c>
   15d8a:	6843      	ldr	r3, [r0, #4]
   15d8c:	7c18      	ldrb	r0, [r3, #16]
   15d8e:	2800      	cmp	r0, #0
   15d90:	d0c9      	beq.n	15d26 <d_expr_primary+0x42>
   15d92:	6b22      	ldr	r2, [r4, #48]	; 0x30
   15d94:	6859      	ldr	r1, [r3, #4]
   15d96:	1a53      	subs	r3, r2, r1
   15d98:	6323      	str	r3, [r4, #48]	; 0x30
   15d9a:	e7c4      	b.n	15d26 <d_expr_primary+0x42>
   15d9c:	2200      	movs	r2, #0
   15d9e:	e7d5      	b.n	15d4c <d_expr_primary+0x68>

00015da0 <d_expression>:
   15da0:	68c2      	ldr	r2, [r0, #12]
   15da2:	b5f0      	push	{r4, r5, r6, r7, lr}
   15da4:	4604      	mov	r4, r0
   15da6:	7813      	ldrb	r3, [r2, #0]
   15da8:	b083      	sub	sp, #12
   15daa:	2b4c      	cmp	r3, #76	; 0x4c
   15dac:	d060      	beq.n	15e70 <d_expression+0xd0>
   15dae:	2b54      	cmp	r3, #84	; 0x54
   15db0:	d075      	beq.n	15e9e <d_expression+0xfe>
   15db2:	2b73      	cmp	r3, #115	; 0x73
   15db4:	d02b      	beq.n	15e0e <d_expression+0x6e>
   15db6:	2b66      	cmp	r3, #102	; 0x66
   15db8:	d012      	beq.n	15de0 <d_expression+0x40>
   15dba:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   15dbe:	fa5f fc8e 	uxtb.w	ip, lr
   15dc2:	f1bc 0f09 	cmp.w	ip, #9
   15dc6:	d84b      	bhi.n	15e60 <d_expression+0xc0>
   15dc8:	4620      	mov	r0, r4
   15dca:	f7ff f99b 	bl	15104 <d_unqualified_name>
   15dce:	4605      	mov	r5, r0
   15dd0:	b118      	cbz	r0, 15dda <d_expression+0x3a>
   15dd2:	68e0      	ldr	r0, [r4, #12]
   15dd4:	7801      	ldrb	r1, [r0, #0]
   15dd6:	2949      	cmp	r1, #73	; 0x49
   15dd8:	d066      	beq.n	15ea8 <d_expression+0x108>
   15dda:	4628      	mov	r0, r5
   15ddc:	b003      	add	sp, #12
   15dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15de0:	7855      	ldrb	r5, [r2, #1]
   15de2:	2d70      	cmp	r5, #112	; 0x70
   15de4:	f000 80db 	beq.w	15f9e <d_expression+0x1fe>
   15de8:	4620      	mov	r0, r4
   15dea:	f7ff f90d 	bl	15008 <d_operator_name>
   15dee:	4605      	mov	r5, r0
   15df0:	2800      	cmp	r0, #0
   15df2:	d0f2      	beq.n	15dda <d_expression+0x3a>
   15df4:	7806      	ldrb	r6, [r0, #0]
   15df6:	2e2c      	cmp	r6, #44	; 0x2c
   15df8:	d03f      	beq.n	15e7a <d_expression+0xda>
   15dfa:	2e2d      	cmp	r6, #45	; 0x2d
   15dfc:	d01a      	beq.n	15e34 <d_expression+0x94>
   15dfe:	2e2e      	cmp	r6, #46	; 0x2e
   15e00:	f000 80e6 	beq.w	15fd0 <d_expression+0x230>
   15e04:	2e2c      	cmp	r6, #44	; 0x2c
   15e06:	f000 80b1 	beq.w	15f6c <d_expression+0x1cc>
   15e0a:	2500      	movs	r5, #0
   15e0c:	e7e5      	b.n	15dda <d_expression+0x3a>
   15e0e:	7853      	ldrb	r3, [r2, #1]
   15e10:	2b72      	cmp	r3, #114	; 0x72
   15e12:	f000 80ae 	beq.w	15f72 <d_expression+0x1d2>
   15e16:	2b70      	cmp	r3, #112	; 0x70
   15e18:	d1e6      	bne.n	15de8 <d_expression+0x48>
   15e1a:	1c91      	adds	r1, r2, #2
   15e1c:	60c1      	str	r1, [r0, #12]
   15e1e:	f7ff ffbf 	bl	15da0 <d_expression>
   15e22:	2141      	movs	r1, #65	; 0x41
   15e24:	2300      	movs	r3, #0
   15e26:	4602      	mov	r2, r0
   15e28:	4620      	mov	r0, r4
   15e2a:	b003      	add	sp, #12
   15e2c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   15e30:	f7fe b9ac 	b.w	1418c <d_make_comp>
   15e34:	6843      	ldr	r3, [r0, #4]
   15e36:	2b02      	cmp	r3, #2
   15e38:	d062      	beq.n	15f00 <d_expression+0x160>
   15e3a:	2b03      	cmp	r3, #3
   15e3c:	d040      	beq.n	15ec0 <d_expression+0x120>
   15e3e:	2b01      	cmp	r3, #1
   15e40:	d1e3      	bne.n	15e0a <d_expression+0x6a>
   15e42:	2e2e      	cmp	r6, #46	; 0x2e
   15e44:	f000 80c4 	beq.w	15fd0 <d_expression+0x230>
   15e48:	4620      	mov	r0, r4
   15e4a:	f7ff ffa9 	bl	15da0 <d_expression>
   15e4e:	4603      	mov	r3, r0
   15e50:	4620      	mov	r0, r4
   15e52:	212f      	movs	r1, #47	; 0x2f
   15e54:	462a      	mov	r2, r5
   15e56:	b003      	add	sp, #12
   15e58:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   15e5c:	f7fe b996 	b.w	1418c <d_make_comp>
   15e60:	2b6f      	cmp	r3, #111	; 0x6f
   15e62:	d1c1      	bne.n	15de8 <d_expression+0x48>
   15e64:	7853      	ldrb	r3, [r2, #1]
   15e66:	2b6e      	cmp	r3, #110	; 0x6e
   15e68:	d1be      	bne.n	15de8 <d_expression+0x48>
   15e6a:	3202      	adds	r2, #2
   15e6c:	60c2      	str	r2, [r0, #12]
   15e6e:	e7ab      	b.n	15dc8 <d_expression+0x28>
   15e70:	b003      	add	sp, #12
   15e72:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   15e76:	f7ff bf35 	b.w	15ce4 <d_expr_primary>
   15e7a:	6847      	ldr	r7, [r0, #4]
   15e7c:	f64b 01ac 	movw	r1, #47276	; 0xb8ac
   15e80:	6b22      	ldr	r2, [r4, #48]	; 0x30
   15e82:	f2c0 0102 	movt	r1, #2
   15e86:	68bb      	ldr	r3, [r7, #8]
   15e88:	6838      	ldr	r0, [r7, #0]
   15e8a:	3b02      	subs	r3, #2
   15e8c:	18d3      	adds	r3, r2, r3
   15e8e:	6323      	str	r3, [r4, #48]	; 0x30
   15e90:	f00a f954 	bl	2013c <strcmp>
   15e94:	2800      	cmp	r0, #0
   15e96:	f000 80a7 	beq.w	15fe8 <d_expression+0x248>
   15e9a:	68fb      	ldr	r3, [r7, #12]
   15e9c:	e7cb      	b.n	15e36 <d_expression+0x96>
   15e9e:	b003      	add	sp, #12
   15ea0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   15ea4:	f7fe ba78 	b.w	14398 <d_template_param>
   15ea8:	4620      	mov	r0, r4
   15eaa:	f7ff fa2f 	bl	1530c <d_template_args>
   15eae:	2104      	movs	r1, #4
   15eb0:	462a      	mov	r2, r5
   15eb2:	4603      	mov	r3, r0
   15eb4:	4620      	mov	r0, r4
   15eb6:	b003      	add	sp, #12
   15eb8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   15ebc:	f7fe b966 	b.w	1418c <d_make_comp>
   15ec0:	4620      	mov	r0, r4
   15ec2:	f7ff ff6d 	bl	15da0 <d_expression>
   15ec6:	4606      	mov	r6, r0
   15ec8:	4620      	mov	r0, r4
   15eca:	f7ff ff69 	bl	15da0 <d_expression>
   15ece:	4607      	mov	r7, r0
   15ed0:	4620      	mov	r0, r4
   15ed2:	f7ff ff65 	bl	15da0 <d_expression>
   15ed6:	2134      	movs	r1, #52	; 0x34
   15ed8:	463a      	mov	r2, r7
   15eda:	4603      	mov	r3, r0
   15edc:	4620      	mov	r0, r4
   15ede:	f7fe f955 	bl	1418c <d_make_comp>
   15ee2:	2133      	movs	r1, #51	; 0x33
   15ee4:	4632      	mov	r2, r6
   15ee6:	4603      	mov	r3, r0
   15ee8:	4620      	mov	r0, r4
   15eea:	f7fe f94f 	bl	1418c <d_make_comp>
   15eee:	2132      	movs	r1, #50	; 0x32
   15ef0:	462a      	mov	r2, r5
   15ef2:	4603      	mov	r3, r0
   15ef4:	4620      	mov	r0, r4
   15ef6:	b003      	add	sp, #12
   15ef8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   15efc:	f7fe b946 	b.w	1418c <d_make_comp>
   15f00:	686e      	ldr	r6, [r5, #4]
   15f02:	4620      	mov	r0, r4
   15f04:	6837      	ldr	r7, [r6, #0]
   15f06:	f7ff ff4b 	bl	15da0 <d_expression>
   15f0a:	f64b 01b0 	movw	r1, #47280	; 0xb8b0
   15f0e:	f2c0 0102 	movt	r1, #2
   15f12:	4606      	mov	r6, r0
   15f14:	4638      	mov	r0, r7
   15f16:	f00a f911 	bl	2013c <strcmp>
   15f1a:	2800      	cmp	r0, #0
   15f1c:	d069      	beq.n	15ff2 <d_expression+0x252>
   15f1e:	f64b 01b4 	movw	r1, #47284	; 0xb8b4
   15f22:	4638      	mov	r0, r7
   15f24:	f2c0 0102 	movt	r1, #2
   15f28:	f00a f908 	bl	2013c <strcmp>
   15f2c:	b140      	cbz	r0, 15f40 <d_expression+0x1a0>
   15f2e:	f64b 01b8 	movw	r1, #47288	; 0xb8b8
   15f32:	4638      	mov	r0, r7
   15f34:	f2c0 0102 	movt	r1, #2
   15f38:	f00a f900 	bl	2013c <strcmp>
   15f3c:	2800      	cmp	r0, #0
   15f3e:	d16e      	bne.n	1601e <d_expression+0x27e>
   15f40:	4620      	mov	r0, r4
   15f42:	f7ff f8df 	bl	15104 <d_unqualified_name>
   15f46:	68e1      	ldr	r1, [r4, #12]
   15f48:	4603      	mov	r3, r0
   15f4a:	7808      	ldrb	r0, [r1, #0]
   15f4c:	2849      	cmp	r0, #73	; 0x49
   15f4e:	d06b      	beq.n	16028 <d_expression+0x288>
   15f50:	2131      	movs	r1, #49	; 0x31
   15f52:	4632      	mov	r2, r6
   15f54:	4620      	mov	r0, r4
   15f56:	f7fe f919 	bl	1418c <d_make_comp>
   15f5a:	2130      	movs	r1, #48	; 0x30
   15f5c:	462a      	mov	r2, r5
   15f5e:	4603      	mov	r3, r0
   15f60:	4620      	mov	r0, r4
   15f62:	b003      	add	sp, #12
   15f64:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   15f68:	f7fe b910 	b.w	1418c <d_make_comp>
   15f6c:	6847      	ldr	r7, [r0, #4]
   15f6e:	68fb      	ldr	r3, [r7, #12]
   15f70:	e761      	b.n	15e36 <d_expression+0x96>
   15f72:	3202      	adds	r2, #2
   15f74:	60c2      	str	r2, [r0, #12]
   15f76:	f7fe fc57 	bl	14828 <d_type>
   15f7a:	4605      	mov	r5, r0
   15f7c:	4620      	mov	r0, r4
   15f7e:	f7ff f8c1 	bl	15104 <d_unqualified_name>
   15f82:	4606      	mov	r6, r0
   15f84:	68e0      	ldr	r0, [r4, #12]
   15f86:	7803      	ldrb	r3, [r0, #0]
   15f88:	4620      	mov	r0, r4
   15f8a:	2b49      	cmp	r3, #73	; 0x49
   15f8c:	d036      	beq.n	15ffc <d_expression+0x25c>
   15f8e:	2101      	movs	r1, #1
   15f90:	462a      	mov	r2, r5
   15f92:	4633      	mov	r3, r6
   15f94:	b003      	add	sp, #12
   15f96:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   15f9a:	f7fe b8f7 	b.w	1418c <d_make_comp>
   15f9e:	1c93      	adds	r3, r2, #2
   15fa0:	60c3      	str	r3, [r0, #12]
   15fa2:	f7fe f9df 	bl	14364 <d_compact_number>
   15fa6:	2800      	cmp	r0, #0
   15fa8:	f6ff af2f 	blt.w	15e0a <d_expression+0x6a>
   15fac:	6963      	ldr	r3, [r4, #20]
   15fae:	69a2      	ldr	r2, [r4, #24]
   15fb0:	4293      	cmp	r3, r2
   15fb2:	f6bf af2a 	bge.w	15e0a <d_expression+0x6a>
   15fb6:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   15fba:	6922      	ldr	r2, [r4, #16]
   15fbc:	1c5d      	adds	r5, r3, #1
   15fbe:	6165      	str	r5, [r4, #20]
   15fc0:	008b      	lsls	r3, r1, #2
   15fc2:	18d5      	adds	r5, r2, r3
   15fc4:	f43f af09 	beq.w	15dda <d_expression+0x3a>
   15fc8:	6068      	str	r0, [r5, #4]
   15fca:	2006      	movs	r0, #6
   15fcc:	54d0      	strb	r0, [r2, r3]
   15fce:	e704      	b.n	15dda <d_expression+0x3a>
   15fd0:	68e3      	ldr	r3, [r4, #12]
   15fd2:	7819      	ldrb	r1, [r3, #0]
   15fd4:	295f      	cmp	r1, #95	; 0x5f
   15fd6:	f47f af37 	bne.w	15e48 <d_expression+0xa8>
   15fda:	1c5a      	adds	r2, r3, #1
   15fdc:	4620      	mov	r0, r4
   15fde:	60e2      	str	r2, [r4, #12]
   15fe0:	f000 f830 	bl	16044 <d_exprlist>
   15fe4:	4603      	mov	r3, r0
   15fe6:	e733      	b.n	15e50 <d_expression+0xb0>
   15fe8:	4620      	mov	r0, r4
   15fea:	f7fe fc1d 	bl	14828 <d_type>
   15fee:	4603      	mov	r3, r0
   15ff0:	e72e      	b.n	15e50 <d_expression+0xb0>
   15ff2:	4620      	mov	r0, r4
   15ff4:	f000 f826 	bl	16044 <d_exprlist>
   15ff8:	4603      	mov	r3, r0
   15ffa:	e7a9      	b.n	15f50 <d_expression+0x1b0>
   15ffc:	f7ff f986 	bl	1530c <d_template_args>
   16000:	2104      	movs	r1, #4
   16002:	4632      	mov	r2, r6
   16004:	4603      	mov	r3, r0
   16006:	4620      	mov	r0, r4
   16008:	f7fe f8c0 	bl	1418c <d_make_comp>
   1600c:	2101      	movs	r1, #1
   1600e:	462a      	mov	r2, r5
   16010:	4603      	mov	r3, r0
   16012:	4620      	mov	r0, r4
   16014:	b003      	add	sp, #12
   16016:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1601a:	f7fe b8b7 	b.w	1418c <d_make_comp>
   1601e:	4620      	mov	r0, r4
   16020:	f7ff febe 	bl	15da0 <d_expression>
   16024:	4603      	mov	r3, r0
   16026:	e793      	b.n	15f50 <d_expression+0x1b0>
   16028:	4620      	mov	r0, r4
   1602a:	9301      	str	r3, [sp, #4]
   1602c:	f7ff f96e 	bl	1530c <d_template_args>
   16030:	9b01      	ldr	r3, [sp, #4]
   16032:	2104      	movs	r1, #4
   16034:	461a      	mov	r2, r3
   16036:	4607      	mov	r7, r0
   16038:	4620      	mov	r0, r4
   1603a:	463b      	mov	r3, r7
   1603c:	f7fe f8a6 	bl	1418c <d_make_comp>
   16040:	4603      	mov	r3, r0
   16042:	e785      	b.n	15f50 <d_expression+0x1b0>

00016044 <d_exprlist>:
   16044:	68c3      	ldr	r3, [r0, #12]
   16046:	2200      	movs	r2, #0
   16048:	b570      	push	{r4, r5, r6, lr}
   1604a:	b082      	sub	sp, #8
   1604c:	7819      	ldrb	r1, [r3, #0]
   1604e:	4604      	mov	r4, r0
   16050:	9201      	str	r2, [sp, #4]
   16052:	2945      	cmp	r1, #69	; 0x45
   16054:	bf18      	it	ne
   16056:	ae01      	addne	r6, sp, #4
   16058:	d019      	beq.n	1608e <d_exprlist+0x4a>
   1605a:	4620      	mov	r0, r4
   1605c:	f7ff fea0 	bl	15da0 <d_expression>
   16060:	212a      	movs	r1, #42	; 0x2a
   16062:	2300      	movs	r3, #0
   16064:	4605      	mov	r5, r0
   16066:	4620      	mov	r0, r4
   16068:	462a      	mov	r2, r5
   1606a:	b175      	cbz	r5, 1608a <d_exprlist+0x46>
   1606c:	f7fe f88e 	bl	1418c <d_make_comp>
   16070:	6030      	str	r0, [r6, #0]
   16072:	b140      	cbz	r0, 16086 <d_exprlist+0x42>
   16074:	68e3      	ldr	r3, [r4, #12]
   16076:	f100 0608 	add.w	r6, r0, #8
   1607a:	781a      	ldrb	r2, [r3, #0]
   1607c:	2a45      	cmp	r2, #69	; 0x45
   1607e:	d1ec      	bne.n	1605a <d_exprlist+0x16>
   16080:	9801      	ldr	r0, [sp, #4]
   16082:	1c59      	adds	r1, r3, #1
   16084:	60e1      	str	r1, [r4, #12]
   16086:	b002      	add	sp, #8
   16088:	bd70      	pop	{r4, r5, r6, pc}
   1608a:	4628      	mov	r0, r5
   1608c:	e7fb      	b.n	16086 <d_exprlist+0x42>
   1608e:	3301      	adds	r3, #1
   16090:	212a      	movs	r1, #42	; 0x2a
   16092:	60c3      	str	r3, [r0, #12]
   16094:	4613      	mov	r3, r2
   16096:	b002      	add	sp, #8
   16098:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1609c:	f7fe b876 	b.w	1418c <d_make_comp>

000160a0 <d_append_string>:
   160a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   160a4:	4604      	mov	r4, r0
   160a6:	4608      	mov	r0, r1
   160a8:	460f      	mov	r7, r1
   160aa:	f00a f993 	bl	203d4 <strlen>
   160ae:	4680      	mov	r8, r0
   160b0:	2800      	cmp	r0, #0
   160b2:	d05b      	beq.n	1616c <d_append_string+0xcc>
   160b4:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   160b8:	3801      	subs	r0, #1
   160ba:	f04f 0900 	mov.w	r9, #0
   160be:	f104 0a04 	add.w	sl, r4, #4
   160c2:	29ff      	cmp	r1, #255	; 0xff
   160c4:	f000 0b01 	and.w	fp, r0, #1
   160c8:	783e      	ldrb	r6, [r7, #0]
   160ca:	d06f      	beq.n	161ac <d_append_string+0x10c>
   160cc:	460b      	mov	r3, r1
   160ce:	3101      	adds	r1, #1
   160d0:	2501      	movs	r5, #1
   160d2:	eb04 0e03 	add.w	lr, r4, r3
   160d6:	4545      	cmp	r5, r8
   160d8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   160dc:	f88e 6004 	strb.w	r6, [lr, #4]
   160e0:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   160e4:	d042      	beq.n	1616c <d_append_string+0xcc>
   160e6:	f1bb 0f00 	cmp.w	fp, #0
   160ea:	d029      	beq.n	16140 <d_append_string+0xa0>
   160ec:	29ff      	cmp	r1, #255	; 0xff
   160ee:	5d7e      	ldrb	r6, [r7, r5]
   160f0:	d06c      	beq.n	161cc <d_append_string+0x12c>
   160f2:	460b      	mov	r3, r1
   160f4:	3101      	adds	r1, #1
   160f6:	3501      	adds	r5, #1
   160f8:	eb04 0c03 	add.w	ip, r4, r3
   160fc:	4545      	cmp	r5, r8
   160fe:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16102:	f88c 6004 	strb.w	r6, [ip, #4]
   16106:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   1610a:	d119      	bne.n	16140 <d_append_string+0xa0>
   1610c:	e06e      	b.n	161ec <d_append_string+0x14c>
   1610e:	eb04 0c03 	add.w	ip, r4, r3
   16112:	3501      	adds	r5, #1
   16114:	1c51      	adds	r1, r2, #1
   16116:	2aff      	cmp	r2, #255	; 0xff
   16118:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1611c:	4613      	mov	r3, r2
   1611e:	f88c 6004 	strb.w	r6, [ip, #4]
   16122:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   16126:	5d7e      	ldrb	r6, [r7, r5]
   16128:	d022      	beq.n	16170 <d_append_string+0xd0>
   1612a:	3501      	adds	r5, #1
   1612c:	eb04 0e03 	add.w	lr, r4, r3
   16130:	4545      	cmp	r5, r8
   16132:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16136:	f88e 6004 	strb.w	r6, [lr, #4]
   1613a:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   1613e:	d033      	beq.n	161a8 <d_append_string+0x108>
   16140:	29ff      	cmp	r1, #255	; 0xff
   16142:	460b      	mov	r3, r1
   16144:	5d7e      	ldrb	r6, [r7, r5]
   16146:	f101 0201 	add.w	r2, r1, #1
   1614a:	d1e0      	bne.n	1610e <d_append_string+0x6e>
   1614c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   16150:	4650      	mov	r0, sl
   16152:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   16156:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   1615a:	4798      	blx	r3
   1615c:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   16160:	2201      	movs	r2, #1
   16162:	2300      	movs	r3, #0
   16164:	1881      	adds	r1, r0, r2
   16166:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
   1616a:	e7d0      	b.n	1610e <d_append_string+0x6e>
   1616c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16170:	4611      	mov	r1, r2
   16172:	4650      	mov	r0, sl
   16174:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   16178:	3501      	adds	r5, #1
   1617a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1617e:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   16182:	4798      	blx	r3
   16184:	2300      	movs	r3, #0
   16186:	2101      	movs	r1, #1
   16188:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1618c:	eb04 0e03 	add.w	lr, r4, r3
   16190:	4545      	cmp	r5, r8
   16192:	eb02 0001 	add.w	r0, r2, r1
   16196:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1619a:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1619e:	f88e 6004 	strb.w	r6, [lr, #4]
   161a2:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   161a6:	d1cb      	bne.n	16140 <d_append_string+0xa0>
   161a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   161ac:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   161b0:	4650      	mov	r0, sl
   161b2:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   161b6:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   161ba:	4798      	blx	r3
   161bc:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
   161c0:	2101      	movs	r1, #1
   161c2:	464b      	mov	r3, r9
   161c4:	186a      	adds	r2, r5, r1
   161c6:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   161ca:	e781      	b.n	160d0 <d_append_string+0x30>
   161cc:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   161d0:	4650      	mov	r0, sl
   161d2:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   161d6:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   161da:	4798      	blx	r3
   161dc:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   161e0:	4629      	mov	r1, r5
   161e2:	2300      	movs	r3, #0
   161e4:	1950      	adds	r0, r2, r5
   161e6:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   161ea:	e784      	b.n	160f6 <d_append_string+0x56>
   161ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000161f0 <d_print_comp>:
   161f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   161f4:	460d      	mov	r5, r1
   161f6:	b099      	sub	sp, #100	; 0x64
   161f8:	4604      	mov	r4, r0
   161fa:	2900      	cmp	r1, #0
   161fc:	f000 80f1 	beq.w	163e2 <d_print_comp+0x1f2>
   16200:	f8d0 011c 	ldr.w	r0, [r0, #284]	; 0x11c
   16204:	2800      	cmp	r0, #0
   16206:	f040 80e9 	bne.w	163dc <d_print_comp+0x1ec>
   1620a:	780b      	ldrb	r3, [r1, #0]
   1620c:	2b42      	cmp	r3, #66	; 0x42
   1620e:	f201 86c5 	bhi.w	17f9c <d_print_comp+0x1dac>
   16212:	a001      	add	r0, pc, #4	; (adr r0, 16218 <d_print_comp+0x28>)
   16214:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   16218:	00017ed7 	.word	0x00017ed7
   1621c:	00017c07 	.word	0x00017c07
   16220:	00017c07 	.word	0x00017c07
   16224:	00016325 	.word	0x00016325
   16228:	00017cd7 	.word	0x00017cd7
   1622c:	00017c5d 	.word	0x00017c5d
   16230:	00017d5d 	.word	0x00017d5d
   16234:	00017bfb 	.word	0x00017bfb
   16238:	00018719 	.word	0x00018719
   1623c:	000185eb 	.word	0x000185eb
   16240:	00017b1b 	.word	0x00017b1b
   16244:	00017aa3 	.word	0x00017aa3
   16248:	00017941 	.word	0x00017941
   1624c:	000178c5 	.word	0x000178c5
   16250:	00017719 	.word	0x00017719
   16254:	00017681 	.word	0x00017681
   16258:	00017187 	.word	0x00017187
   1625c:	0001710f 	.word	0x0001710f
   16260:	00016f7d 	.word	0x00016f7d
   16264:	00016ee1 	.word	0x00016ee1
   16268:	00017517 	.word	0x00017517
   1626c:	00017351 	.word	0x00017351
   16270:	0001758f 	.word	0x0001758f
   16274:	00016eb1 	.word	0x00016eb1
   16278:	00016eb1 	.word	0x00016eb1
   1627c:	00016eb1 	.word	0x00016eb1
   16280:	0001838d 	.word	0x0001838d
   16284:	0001838d 	.word	0x0001838d
   16288:	0001838d 	.word	0x0001838d
   1628c:	0001838d 	.word	0x0001838d
   16290:	0001838d 	.word	0x0001838d
   16294:	0001838d 	.word	0x0001838d
   16298:	0001838d 	.word	0x0001838d
   1629c:	0001838d 	.word	0x0001838d
   162a0:	0001838d 	.word	0x0001838d
   162a4:	000182cf 	.word	0x000182cf
   162a8:	000182c3 	.word	0x000182c3
   162ac:	00018245 	.word	0x00018245
   162b0:	000183fd 	.word	0x000183fd
   162b4:	000183c5 	.word	0x000183c5
   162b8:	00018507 	.word	0x00018507
   162bc:	000183c5 	.word	0x000183c5
   162c0:	00016e53 	.word	0x00016e53
   162c4:	00016e53 	.word	0x00016e53
   162c8:	00016cb9 	.word	0x00016cb9
   162cc:	00016abd 	.word	0x00016abd
   162d0:	00016bb5 	.word	0x00016bb5
   162d4:	00016a9f 	.word	0x00016a9f
   162d8:	00016a8d 	.word	0x00016a8d
   162dc:	00016a85 	.word	0x00016a85
   162e0:	00016a73 	.word	0x00016a73
   162e4:	00016a6b 	.word	0x00016a6b
   162e8:	00016a6b 	.word	0x00016a6b
   162ec:	000188c5 	.word	0x000188c5
   162f0:	000188c5 	.word	0x000188c5
   162f4:	0001874d 	.word	0x0001874d
   162f8:	0001766d 	.word	0x0001766d
   162fc:	0001764b 	.word	0x0001764b
   16300:	000180d9 	.word	0x000180d9
   16304:	00017fa7 	.word	0x00017fa7
   16308:	000181af 	.word	0x000181af
   1630c:	000169f3 	.word	0x000169f3
   16310:	0001680d 	.word	0x0001680d
   16314:	00017f9d 	.word	0x00017f9d
   16318:	000165cb 	.word	0x000165cb
   1631c:	000164eb 	.word	0x000164eb
   16320:	000163eb 	.word	0x000163eb
   16324:	f8d4 7118 	ldr.w	r7, [r4, #280]	; 0x118
   16328:	2300      	movs	r3, #0
   1632a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   1632e:	684e      	ldr	r6, [r1, #4]
   16330:	9701      	str	r7, [sp, #4]
   16332:	2e00      	cmp	r6, #0
   16334:	f005 80ed 	beq.w	1b512 <d_print_comp+0x5322>
   16338:	7832      	ldrb	r2, [r6, #0]
   1633a:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   1633e:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
   16342:	3a1a      	subs	r2, #26
   16344:	f848 3d48 	str.w	r3, [r8, #-72]!
   16348:	9607      	str	r6, [sp, #28]
   1634a:	b2d2      	uxtb	r2, r2
   1634c:	f8c4 8118 	str.w	r8, [r4, #280]	; 0x118
   16350:	2a02      	cmp	r2, #2
   16352:	9308      	str	r3, [sp, #32]
   16354:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   16358:	f205 83d2 	bhi.w	1bb00 <d_print_comp+0x5910>
   1635c:	6876      	ldr	r6, [r6, #4]
   1635e:	2e00      	cmp	r6, #0
   16360:	f005 80d7 	beq.w	1b512 <d_print_comp+0x5322>
   16364:	7831      	ldrb	r1, [r6, #0]
   16366:	aa18      	add	r2, sp, #96	; 0x60
   16368:	960b      	str	r6, [sp, #44]	; 0x2c
   1636a:	391a      	subs	r1, #26
   1636c:	f842 8d38 	str.w	r8, [r2, #-56]!
   16370:	930c      	str	r3, [sp, #48]	; 0x30
   16372:	b2c8      	uxtb	r0, r1
   16374:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
   16378:	2802      	cmp	r0, #2
   1637a:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
   1637e:	f205 850d 	bhi.w	1bd9c <d_print_comp+0x5bac>
   16382:	6876      	ldr	r6, [r6, #4]
   16384:	2e00      	cmp	r6, #0
   16386:	f005 80c4 	beq.w	1b512 <d_print_comp+0x5322>
   1638a:	7830      	ldrb	r0, [r6, #0]
   1638c:	a918      	add	r1, sp, #96	; 0x60
   1638e:	960f      	str	r6, [sp, #60]	; 0x3c
   16390:	381a      	subs	r0, #26
   16392:	f841 2d28 	str.w	r2, [r1, #-40]!
   16396:	9310      	str	r3, [sp, #64]	; 0x40
   16398:	b2c2      	uxtb	r2, r0
   1639a:	f8c4 1118 	str.w	r1, [r4, #280]	; 0x118
   1639e:	2a02      	cmp	r2, #2
   163a0:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
   163a4:	f205 84f7 	bhi.w	1bd96 <d_print_comp+0x5ba6>
   163a8:	6876      	ldr	r6, [r6, #4]
   163aa:	2e00      	cmp	r6, #0
   163ac:	f005 80b1 	beq.w	1b512 <d_print_comp+0x5322>
   163b0:	7830      	ldrb	r0, [r6, #0]
   163b2:	aa18      	add	r2, sp, #96	; 0x60
   163b4:	9314      	str	r3, [sp, #80]	; 0x50
   163b6:	381a      	subs	r0, #26
   163b8:	f842 1d18 	str.w	r1, [r2, #-24]!
   163bc:	9613      	str	r6, [sp, #76]	; 0x4c
   163be:	b2c3      	uxtb	r3, r0
   163c0:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
   163c4:	2b02      	cmp	r3, #2
   163c6:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
   163ca:	f205 84e1 	bhi.w	1bd90 <d_print_comp+0x5ba0>
   163ce:	6871      	ldr	r1, [r6, #4]
   163d0:	2900      	cmp	r1, #0
   163d2:	f005 809e 	beq.w	1b512 <d_print_comp+0x5322>
   163d6:	2201      	movs	r2, #1
   163d8:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
   163dc:	b019      	add	sp, #100	; 0x64
   163de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   163e2:	2301      	movs	r3, #1
   163e4:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   163e8:	e7f8      	b.n	163dc <d_print_comp+0x1ec>
   163ea:	6849      	ldr	r1, [r1, #4]
   163ec:	4620      	mov	r0, r4
   163ee:	f7ff feff 	bl	161f0 <d_print_comp>
   163f2:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   163f6:	29ff      	cmp	r1, #255	; 0xff
   163f8:	f004 81aa 	beq.w	1a750 <d_print_comp+0x4560>
   163fc:	1862      	adds	r2, r4, r1
   163fe:	3101      	adds	r1, #1
   16400:	2320      	movs	r3, #32
   16402:	29ff      	cmp	r1, #255	; 0xff
   16404:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16408:	7113      	strb	r3, [r2, #4]
   1640a:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1640e:	f004 818c 	beq.w	1a72a <d_print_comp+0x453a>
   16412:	eb04 0c01 	add.w	ip, r4, r1
   16416:	3101      	adds	r1, #1
   16418:	235b      	movs	r3, #91	; 0x5b
   1641a:	29ff      	cmp	r1, #255	; 0xff
   1641c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16420:	f88c 3004 	strb.w	r3, [ip, #4]
   16424:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   16428:	f004 81de 	beq.w	1a7e8 <d_print_comp+0x45f8>
   1642c:	eb04 0e01 	add.w	lr, r4, r1
   16430:	3101      	adds	r1, #1
   16432:	2363      	movs	r3, #99	; 0x63
   16434:	29ff      	cmp	r1, #255	; 0xff
   16436:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1643a:	f88e 3004 	strb.w	r3, [lr, #4]
   1643e:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   16442:	f004 81be 	beq.w	1a7c2 <d_print_comp+0x45d2>
   16446:	eb04 0c01 	add.w	ip, r4, r1
   1644a:	3101      	adds	r1, #1
   1644c:	236c      	movs	r3, #108	; 0x6c
   1644e:	29ff      	cmp	r1, #255	; 0xff
   16450:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16454:	f88c 3004 	strb.w	r3, [ip, #4]
   16458:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1645c:	f004 819e 	beq.w	1a79c <d_print_comp+0x45ac>
   16460:	eb04 0e01 	add.w	lr, r4, r1
   16464:	3101      	adds	r1, #1
   16466:	236f      	movs	r3, #111	; 0x6f
   16468:	29ff      	cmp	r1, #255	; 0xff
   1646a:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1646e:	f88e 3004 	strb.w	r3, [lr, #4]
   16472:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   16476:	f004 817e 	beq.w	1a776 <d_print_comp+0x4586>
   1647a:	eb04 0c01 	add.w	ip, r4, r1
   1647e:	3101      	adds	r1, #1
   16480:	236e      	movs	r3, #110	; 0x6e
   16482:	29ff      	cmp	r1, #255	; 0xff
   16484:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16488:	f88c 3004 	strb.w	r3, [ip, #4]
   1648c:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   16490:	f003 86ee 	beq.w	1a270 <d_print_comp+0x4080>
   16494:	eb04 0e01 	add.w	lr, r4, r1
   16498:	3101      	adds	r1, #1
   1649a:	2365      	movs	r3, #101	; 0x65
   1649c:	29ff      	cmp	r1, #255	; 0xff
   1649e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   164a2:	f88e 3004 	strb.w	r3, [lr, #4]
   164a6:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   164aa:	f002 8355 	beq.w	18b58 <d_print_comp+0x2968>
   164ae:	1c48      	adds	r0, r1, #1
   164b0:	eb04 0c01 	add.w	ip, r4, r1
   164b4:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   164b8:	2120      	movs	r1, #32
   164ba:	4620      	mov	r0, r4
   164bc:	f88c 1004 	strb.w	r1, [ip, #4]
   164c0:	f884 1108 	strb.w	r1, [r4, #264]	; 0x108
   164c4:	68a9      	ldr	r1, [r5, #8]
   164c6:	f7ff fe93 	bl	161f0 <d_print_comp>
   164ca:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   164ce:	1c4a      	adds	r2, r1, #1
   164d0:	29ff      	cmp	r1, #255	; 0xff
   164d2:	f004 8118 	beq.w	1a706 <d_print_comp+0x4516>
   164d6:	eb04 0e01 	add.w	lr, r4, r1
   164da:	205d      	movs	r0, #93	; 0x5d
   164dc:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   164e0:	f88e 0004 	strb.w	r0, [lr, #4]
   164e4:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   164e8:	e778      	b.n	163dc <d_print_comp+0x1ec>
   164ea:	4620      	mov	r0, r4
   164ec:	6849      	ldr	r1, [r1, #4]
   164ee:	f7fe f857 	bl	145a0 <d_find_pack>
   164f2:	2800      	cmp	r0, #0
   164f4:	f005 8262 	beq.w	1b9bc <d_print_comp+0x57cc>
   164f8:	7802      	ldrb	r2, [r0, #0]
   164fa:	2a2b      	cmp	r2, #43	; 0x2b
   164fc:	f47f af6e 	bne.w	163dc <d_print_comp+0x1ec>
   16500:	6841      	ldr	r1, [r0, #4]
   16502:	2900      	cmp	r1, #0
   16504:	f43f af6a 	beq.w	163dc <d_print_comp+0x1ec>
   16508:	2600      	movs	r6, #0
   1650a:	e007      	b.n	1651c <d_print_comp+0x32c>
   1650c:	f890 9000 	ldrb.w	r9, [r0]
   16510:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
   16514:	d106      	bne.n	16524 <d_print_comp+0x334>
   16516:	6843      	ldr	r3, [r0, #4]
   16518:	b123      	cbz	r3, 16524 <d_print_comp+0x334>
   1651a:	463e      	mov	r6, r7
   1651c:	6880      	ldr	r0, [r0, #8]
   1651e:	1c77      	adds	r7, r6, #1
   16520:	2800      	cmp	r0, #0
   16522:	d1f3      	bne.n	1650c <d_print_comp+0x31c>
   16524:	f8d5 8004 	ldr.w	r8, [r5, #4]
   16528:	f04f 0a00 	mov.w	sl, #0
   1652c:	4620      	mov	r0, r4
   1652e:	f8c4 a120 	str.w	sl, [r4, #288]	; 0x120
   16532:	4641      	mov	r1, r8
   16534:	1e7d      	subs	r5, r7, #1
   16536:	f7ff fe5b 	bl	161f0 <d_print_comp>
   1653a:	45b2      	cmp	sl, r6
   1653c:	f04f 0920 	mov.w	r9, #32
   16540:	f005 0b01 	and.w	fp, r5, #1
   16544:	f2c3 8027 	blt.w	19596 <d_print_comp+0x33a6>
   16548:	2501      	movs	r5, #1
   1654a:	42bd      	cmp	r5, r7
   1654c:	f43f af46 	beq.w	163dc <d_print_comp+0x1ec>
   16550:	f1bb 0f00 	cmp.w	fp, #0
   16554:	d00c      	beq.n	16570 <d_print_comp+0x380>
   16556:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
   1655a:	4620      	mov	r0, r4
   1655c:	4641      	mov	r1, r8
   1655e:	f7ff fe47 	bl	161f0 <d_print_comp>
   16562:	42b5      	cmp	r5, r6
   16564:	f2c3 809d 	blt.w	196a2 <d_print_comp+0x34b2>
   16568:	3501      	adds	r5, #1
   1656a:	42bd      	cmp	r5, r7
   1656c:	f43f af36 	beq.w	163dc <d_print_comp+0x1ec>
   16570:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
   16574:	4620      	mov	r0, r4
   16576:	4641      	mov	r1, r8
   16578:	f7ff fe3a 	bl	161f0 <d_print_comp>
   1657c:	42b5      	cmp	r5, r6
   1657e:	f2c2 8343 	blt.w	18c08 <d_print_comp+0x2a18>
   16582:	3501      	adds	r5, #1
   16584:	4620      	mov	r0, r4
   16586:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
   1658a:	4641      	mov	r1, r8
   1658c:	f7ff fe30 	bl	161f0 <d_print_comp>
   16590:	42b5      	cmp	r5, r6
   16592:	dae9      	bge.n	16568 <d_print_comp+0x378>
   16594:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   16598:	29ff      	cmp	r1, #255	; 0xff
   1659a:	f003 8070 	beq.w	1967e <d_print_comp+0x348e>
   1659e:	eb04 0e01 	add.w	lr, r4, r1
   165a2:	3101      	adds	r1, #1
   165a4:	202c      	movs	r0, #44	; 0x2c
   165a6:	29ff      	cmp	r1, #255	; 0xff
   165a8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   165ac:	f88e 0004 	strb.w	r0, [lr, #4]
   165b0:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   165b4:	f002 81c5 	beq.w	18942 <d_print_comp+0x2752>
   165b8:	1c4b      	adds	r3, r1, #1
   165ba:	1861      	adds	r1, r4, r1
   165bc:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   165c0:	f884 9108 	strb.w	r9, [r4, #264]	; 0x108
   165c4:	f881 9004 	strb.w	r9, [r1, #4]
   165c8:	e7ce      	b.n	16568 <d_print_comp+0x378>
   165ca:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   165ce:	29ff      	cmp	r1, #255	; 0xff
   165d0:	f004 81a1 	beq.w	1a916 <d_print_comp+0x4726>
   165d4:	1862      	adds	r2, r4, r1
   165d6:	3101      	adds	r1, #1
   165d8:	277b      	movs	r7, #123	; 0x7b
   165da:	29ff      	cmp	r1, #255	; 0xff
   165dc:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   165e0:	7117      	strb	r7, [r2, #4]
   165e2:	f884 7108 	strb.w	r7, [r4, #264]	; 0x108
   165e6:	f004 8183 	beq.w	1a8f0 <d_print_comp+0x4700>
   165ea:	eb04 0c01 	add.w	ip, r4, r1
   165ee:	3101      	adds	r1, #1
   165f0:	2075      	movs	r0, #117	; 0x75
   165f2:	29ff      	cmp	r1, #255	; 0xff
   165f4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   165f8:	f88c 0004 	strb.w	r0, [ip, #4]
   165fc:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   16600:	f004 8163 	beq.w	1a8ca <d_print_comp+0x46da>
   16604:	eb04 0e01 	add.w	lr, r4, r1
   16608:	3101      	adds	r1, #1
   1660a:	266e      	movs	r6, #110	; 0x6e
   1660c:	29ff      	cmp	r1, #255	; 0xff
   1660e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16612:	f88e 6004 	strb.w	r6, [lr, #4]
   16616:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   1661a:	f004 8144 	beq.w	1a8a6 <d_print_comp+0x46b6>
   1661e:	eb04 0c01 	add.w	ip, r4, r1
   16622:	3101      	adds	r1, #1
   16624:	206e      	movs	r0, #110	; 0x6e
   16626:	29ff      	cmp	r1, #255	; 0xff
   16628:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1662c:	f88c 0004 	strb.w	r0, [ip, #4]
   16630:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   16634:	f004 8124 	beq.w	1a880 <d_print_comp+0x4690>
   16638:	eb04 0e01 	add.w	lr, r4, r1
   1663c:	3101      	adds	r1, #1
   1663e:	2061      	movs	r0, #97	; 0x61
   16640:	29ff      	cmp	r1, #255	; 0xff
   16642:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16646:	f88e 0004 	strb.w	r0, [lr, #4]
   1664a:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1664e:	f004 8104 	beq.w	1a85a <d_print_comp+0x466a>
   16652:	eb04 0c01 	add.w	ip, r4, r1
   16656:	3101      	adds	r1, #1
   16658:	236d      	movs	r3, #109	; 0x6d
   1665a:	29ff      	cmp	r1, #255	; 0xff
   1665c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16660:	f88c 3004 	strb.w	r3, [ip, #4]
   16664:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   16668:	f004 80e4 	beq.w	1a834 <d_print_comp+0x4644>
   1666c:	eb04 0e01 	add.w	lr, r4, r1
   16670:	3101      	adds	r1, #1
   16672:	2065      	movs	r0, #101	; 0x65
   16674:	29ff      	cmp	r1, #255	; 0xff
   16676:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1667a:	f88e 0004 	strb.w	r0, [lr, #4]
   1667e:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   16682:	f004 80c4 	beq.w	1a80e <d_print_comp+0x461e>
   16686:	eb04 0c01 	add.w	ip, r4, r1
   1668a:	3101      	adds	r1, #1
   1668c:	2764      	movs	r7, #100	; 0x64
   1668e:	29ff      	cmp	r1, #255	; 0xff
   16690:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16694:	f88c 7004 	strb.w	r7, [ip, #4]
   16698:	f884 7108 	strb.w	r7, [r4, #264]	; 0x108
   1669c:	f003 844c 	beq.w	19f38 <d_print_comp+0x3d48>
   166a0:	eb04 0e01 	add.w	lr, r4, r1
   166a4:	3101      	adds	r1, #1
   166a6:	2020      	movs	r0, #32
   166a8:	29ff      	cmp	r1, #255	; 0xff
   166aa:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   166ae:	f88e 0004 	strb.w	r0, [lr, #4]
   166b2:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   166b6:	f003 842c 	beq.w	19f12 <d_print_comp+0x3d22>
   166ba:	eb04 0c01 	add.w	ip, r4, r1
   166be:	3101      	adds	r1, #1
   166c0:	2374      	movs	r3, #116	; 0x74
   166c2:	29ff      	cmp	r1, #255	; 0xff
   166c4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   166c8:	f88c 3004 	strb.w	r3, [ip, #4]
   166cc:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   166d0:	f003 840c 	beq.w	19eec <d_print_comp+0x3cfc>
   166d4:	eb04 0e01 	add.w	lr, r4, r1
   166d8:	3101      	adds	r1, #1
   166da:	2079      	movs	r0, #121	; 0x79
   166dc:	29ff      	cmp	r1, #255	; 0xff
   166de:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   166e2:	f88e 0004 	strb.w	r0, [lr, #4]
   166e6:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   166ea:	f003 83ec 	beq.w	19ec6 <d_print_comp+0x3cd6>
   166ee:	eb04 0c01 	add.w	ip, r4, r1
   166f2:	3101      	adds	r1, #1
   166f4:	2770      	movs	r7, #112	; 0x70
   166f6:	29ff      	cmp	r1, #255	; 0xff
   166f8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   166fc:	f88c 7004 	strb.w	r7, [ip, #4]
   16700:	f884 7108 	strb.w	r7, [r4, #264]	; 0x108
   16704:	f003 85c7 	beq.w	1a296 <d_print_comp+0x40a6>
   16708:	eb04 0e01 	add.w	lr, r4, r1
   1670c:	3101      	adds	r1, #1
   1670e:	2065      	movs	r0, #101	; 0x65
   16710:	29ff      	cmp	r1, #255	; 0xff
   16712:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16716:	f88e 0004 	strb.w	r0, [lr, #4]
   1671a:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1671e:	f002 822d 	beq.w	18b7c <d_print_comp+0x298c>
   16722:	1c4a      	adds	r2, r1, #1
   16724:	1861      	adds	r1, r4, r1
   16726:	2023      	movs	r0, #35	; 0x23
   16728:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1672c:	7108      	strb	r0, [r1, #4]
   1672e:	f64b 1180 	movw	r1, #47488	; 0xb980
   16732:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   16736:	f2c0 0102 	movt	r1, #2
   1673a:	686a      	ldr	r2, [r5, #4]
   1673c:	a806      	add	r0, sp, #24
   1673e:	3201      	adds	r2, #1
   16740:	f009 fc38 	bl	1ffb4 <sprintf>
   16744:	a806      	add	r0, sp, #24
   16746:	f009 fe45 	bl	203d4 <strlen>
   1674a:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1674e:	4607      	mov	r7, r0
   16750:	2800      	cmp	r0, #0
   16752:	f002 8310 	beq.w	18d76 <d_print_comp+0x2b86>
   16756:	29ff      	cmp	r1, #255	; 0xff
   16758:	f100 35ff 	add.w	r5, r0, #4294967295
   1675c:	f04f 0800 	mov.w	r8, #0
   16760:	f104 0a04 	add.w	sl, r4, #4
   16764:	f005 0901 	and.w	r9, r5, #1
   16768:	f89d 6018 	ldrb.w	r6, [sp, #24]
   1676c:	f004 859b 	beq.w	1b2a6 <d_print_comp+0x50b6>
   16770:	460b      	mov	r3, r1
   16772:	3101      	adds	r1, #1
   16774:	2501      	movs	r5, #1
   16776:	eb04 0e03 	add.w	lr, r4, r3
   1677a:	42bd      	cmp	r5, r7
   1677c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16780:	f88e 6004 	strb.w	r6, [lr, #4]
   16784:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   16788:	f002 82f5 	beq.w	18d76 <d_print_comp+0x2b86>
   1678c:	f1b9 0f00 	cmp.w	r9, #0
   16790:	d012      	beq.n	167b8 <d_print_comp+0x5c8>
   16792:	ae06      	add	r6, sp, #24
   16794:	29ff      	cmp	r1, #255	; 0xff
   16796:	5d76      	ldrb	r6, [r6, r5]
   16798:	f004 85fc 	beq.w	1b394 <d_print_comp+0x51a4>
   1679c:	460b      	mov	r3, r1
   1679e:	3101      	adds	r1, #1
   167a0:	3501      	adds	r5, #1
   167a2:	eb04 0c03 	add.w	ip, r4, r3
   167a6:	42bd      	cmp	r5, r7
   167a8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   167ac:	f88c 6004 	strb.w	r6, [ip, #4]
   167b0:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   167b4:	f002 82df 	beq.w	18d76 <d_print_comp+0x2b86>
   167b8:	ae06      	add	r6, sp, #24
   167ba:	29ff      	cmp	r1, #255	; 0xff
   167bc:	460b      	mov	r3, r1
   167be:	f101 0201 	add.w	r2, r1, #1
   167c2:	5d76      	ldrb	r6, [r6, r5]
   167c4:	f002 8346 	beq.w	18e54 <d_print_comp+0x2c64>
   167c8:	eb04 0e03 	add.w	lr, r4, r3
   167cc:	3501      	adds	r5, #1
   167ce:	1c51      	adds	r1, r2, #1
   167d0:	f10d 0c18 	add.w	ip, sp, #24
   167d4:	2aff      	cmp	r2, #255	; 0xff
   167d6:	f88e 6004 	strb.w	r6, [lr, #4]
   167da:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   167de:	4613      	mov	r3, r2
   167e0:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   167e4:	f81c 6005 	ldrb.w	r6, [ip, r5]
   167e8:	d1da      	bne.n	167a0 <d_print_comp+0x5b0>
   167ea:	4611      	mov	r1, r2
   167ec:	4650      	mov	r0, sl
   167ee:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   167f2:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   167f6:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
   167fa:	4798      	blx	r3
   167fc:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   16800:	2101      	movs	r1, #1
   16802:	2300      	movs	r3, #0
   16804:	1850      	adds	r0, r2, r1
   16806:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1680a:	e7c9      	b.n	167a0 <d_print_comp+0x5b0>
   1680c:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   16810:	29ff      	cmp	r1, #255	; 0xff
   16812:	f003 8215 	beq.w	19c40 <d_print_comp+0x3a50>
   16816:	1862      	adds	r2, r4, r1
   16818:	3101      	adds	r1, #1
   1681a:	277b      	movs	r7, #123	; 0x7b
   1681c:	29ff      	cmp	r1, #255	; 0xff
   1681e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16822:	7117      	strb	r7, [r2, #4]
   16824:	f884 7108 	strb.w	r7, [r4, #264]	; 0x108
   16828:	f003 81f7 	beq.w	19c1a <d_print_comp+0x3a2a>
   1682c:	eb04 0c01 	add.w	ip, r4, r1
   16830:	3101      	adds	r1, #1
   16832:	206c      	movs	r0, #108	; 0x6c
   16834:	29ff      	cmp	r1, #255	; 0xff
   16836:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1683a:	f88c 0004 	strb.w	r0, [ip, #4]
   1683e:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   16842:	f003 81d7 	beq.w	19bf4 <d_print_comp+0x3a04>
   16846:	eb04 0e01 	add.w	lr, r4, r1
   1684a:	3101      	adds	r1, #1
   1684c:	2361      	movs	r3, #97	; 0x61
   1684e:	29ff      	cmp	r1, #255	; 0xff
   16850:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16854:	f88e 3004 	strb.w	r3, [lr, #4]
   16858:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1685c:	f003 81b7 	beq.w	19bce <d_print_comp+0x39de>
   16860:	eb04 0c01 	add.w	ip, r4, r1
   16864:	3101      	adds	r1, #1
   16866:	206d      	movs	r0, #109	; 0x6d
   16868:	29ff      	cmp	r1, #255	; 0xff
   1686a:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1686e:	f88c 0004 	strb.w	r0, [ip, #4]
   16872:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   16876:	f003 8197 	beq.w	19ba8 <d_print_comp+0x39b8>
   1687a:	eb04 0e01 	add.w	lr, r4, r1
   1687e:	3101      	adds	r1, #1
   16880:	2762      	movs	r7, #98	; 0x62
   16882:	29ff      	cmp	r1, #255	; 0xff
   16884:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16888:	f88e 7004 	strb.w	r7, [lr, #4]
   1688c:	f884 7108 	strb.w	r7, [r4, #264]	; 0x108
   16890:	f003 8177 	beq.w	19b82 <d_print_comp+0x3992>
   16894:	eb04 0c01 	add.w	ip, r4, r1
   16898:	3101      	adds	r1, #1
   1689a:	2064      	movs	r0, #100	; 0x64
   1689c:	29ff      	cmp	r1, #255	; 0xff
   1689e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   168a2:	f88c 0004 	strb.w	r0, [ip, #4]
   168a6:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   168aa:	f003 8157 	beq.w	19b5c <d_print_comp+0x396c>
   168ae:	eb04 0e01 	add.w	lr, r4, r1
   168b2:	3101      	adds	r1, #1
   168b4:	2361      	movs	r3, #97	; 0x61
   168b6:	29ff      	cmp	r1, #255	; 0xff
   168b8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   168bc:	f88e 3004 	strb.w	r3, [lr, #4]
   168c0:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   168c4:	f002 80ef 	beq.w	18aa6 <d_print_comp+0x28b6>
   168c8:	1c48      	adds	r0, r1, #1
   168ca:	eb04 0c01 	add.w	ip, r4, r1
   168ce:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   168d2:	2128      	movs	r1, #40	; 0x28
   168d4:	4620      	mov	r0, r4
   168d6:	f88c 1004 	strb.w	r1, [ip, #4]
   168da:	f884 1108 	strb.w	r1, [r4, #264]	; 0x108
   168de:	6869      	ldr	r1, [r5, #4]
   168e0:	f7ff fc86 	bl	161f0 <d_print_comp>
   168e4:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   168e8:	29ff      	cmp	r1, #255	; 0xff
   168ea:	f004 8039 	beq.w	1a960 <d_print_comp+0x4770>
   168ee:	eb04 0e01 	add.w	lr, r4, r1
   168f2:	3101      	adds	r1, #1
   168f4:	2029      	movs	r0, #41	; 0x29
   168f6:	29ff      	cmp	r1, #255	; 0xff
   168f8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   168fc:	f88e 0004 	strb.w	r0, [lr, #4]
   16900:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   16904:	f002 802e 	beq.w	18964 <d_print_comp+0x2774>
   16908:	1c4a      	adds	r2, r1, #1
   1690a:	1861      	adds	r1, r4, r1
   1690c:	2023      	movs	r0, #35	; 0x23
   1690e:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   16912:	7108      	strb	r0, [r1, #4]
   16914:	f64b 1180 	movw	r1, #47488	; 0xb980
   16918:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1691c:	f2c0 0102 	movt	r1, #2
   16920:	68aa      	ldr	r2, [r5, #8]
   16922:	a806      	add	r0, sp, #24
   16924:	3201      	adds	r2, #1
   16926:	f009 fb45 	bl	1ffb4 <sprintf>
   1692a:	a806      	add	r0, sp, #24
   1692c:	f009 fd52 	bl	203d4 <strlen>
   16930:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   16934:	4607      	mov	r7, r0
   16936:	2800      	cmp	r0, #0
   16938:	f002 822a 	beq.w	18d90 <d_print_comp+0x2ba0>
   1693c:	29ff      	cmp	r1, #255	; 0xff
   1693e:	f100 35ff 	add.w	r5, r0, #4294967295
   16942:	f04f 0800 	mov.w	r8, #0
   16946:	f104 0a04 	add.w	sl, r4, #4
   1694a:	f005 0901 	and.w	r9, r5, #1
   1694e:	f89d 6018 	ldrb.w	r6, [sp, #24]
   16952:	f004 843f 	beq.w	1b1d4 <d_print_comp+0x4fe4>
   16956:	460b      	mov	r3, r1
   16958:	3101      	adds	r1, #1
   1695a:	2501      	movs	r5, #1
   1695c:	eb04 0e03 	add.w	lr, r4, r3
   16960:	42bd      	cmp	r5, r7
   16962:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16966:	f88e 6004 	strb.w	r6, [lr, #4]
   1696a:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   1696e:	f002 820f 	beq.w	18d90 <d_print_comp+0x2ba0>
   16972:	f1b9 0f00 	cmp.w	r9, #0
   16976:	d012      	beq.n	1699e <d_print_comp+0x7ae>
   16978:	ae06      	add	r6, sp, #24
   1697a:	29ff      	cmp	r1, #255	; 0xff
   1697c:	5d76      	ldrb	r6, [r6, r5]
   1697e:	f004 84d6 	beq.w	1b32e <d_print_comp+0x513e>
   16982:	460b      	mov	r3, r1
   16984:	3101      	adds	r1, #1
   16986:	3501      	adds	r5, #1
   16988:	eb04 0c03 	add.w	ip, r4, r3
   1698c:	42bd      	cmp	r5, r7
   1698e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16992:	f88c 6004 	strb.w	r6, [ip, #4]
   16996:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   1699a:	f002 81f9 	beq.w	18d90 <d_print_comp+0x2ba0>
   1699e:	ae06      	add	r6, sp, #24
   169a0:	29ff      	cmp	r1, #255	; 0xff
   169a2:	460b      	mov	r3, r1
   169a4:	f101 0201 	add.w	r2, r1, #1
   169a8:	5d76      	ldrb	r6, [r6, r5]
   169aa:	f002 8220 	beq.w	18dee <d_print_comp+0x2bfe>
   169ae:	eb04 0e03 	add.w	lr, r4, r3
   169b2:	3501      	adds	r5, #1
   169b4:	1c51      	adds	r1, r2, #1
   169b6:	f10d 0c18 	add.w	ip, sp, #24
   169ba:	2aff      	cmp	r2, #255	; 0xff
   169bc:	f88e 6004 	strb.w	r6, [lr, #4]
   169c0:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   169c4:	4613      	mov	r3, r2
   169c6:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   169ca:	f81c 6005 	ldrb.w	r6, [ip, r5]
   169ce:	d1da      	bne.n	16986 <d_print_comp+0x796>
   169d0:	4611      	mov	r1, r2
   169d2:	4650      	mov	r0, sl
   169d4:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   169d8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   169dc:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
   169e0:	4798      	blx	r3
   169e2:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   169e6:	2101      	movs	r1, #1
   169e8:	2300      	movs	r3, #0
   169ea:	1842      	adds	r2, r0, r1
   169ec:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   169f0:	e7c9      	b.n	16986 <d_print_comp+0x796>
   169f2:	4eb0      	ldr	r6, [pc, #704]	; (16cb4 <d_print_comp+0xac4>)
   169f4:	f04f 0a00 	mov.w	sl, #0
   169f8:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   169fc:	f104 0b04 	add.w	fp, r4, #4
   16a00:	f106 081c 	add.w	r8, r6, #28
   16a04:	46a9      	mov	r9, r5
   16a06:	e019      	b.n	16a3c <d_print_comp+0x84c>
   16a08:	eb04 0e03 	add.w	lr, r4, r3
   16a0c:	1c6e      	adds	r6, r5, #1
   16a0e:	1c51      	adds	r1, r2, #1
   16a10:	2aff      	cmp	r2, #255	; 0xff
   16a12:	4613      	mov	r3, r2
   16a14:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   16a18:	f88e 7004 	strb.w	r7, [lr, #4]
   16a1c:	f884 7108 	strb.w	r7, [r4, #264]	; 0x108
   16a20:	786d      	ldrb	r5, [r5, #1]
   16a22:	f002 8141 	beq.w	18ca8 <d_print_comp+0x2ab8>
   16a26:	eb04 0c03 	add.w	ip, r4, r3
   16a2a:	4546      	cmp	r6, r8
   16a2c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16a30:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
   16a34:	f88c 5004 	strb.w	r5, [ip, #4]
   16a38:	f002 83d9 	beq.w	191ee <d_print_comp+0x2ffe>
   16a3c:	1c75      	adds	r5, r6, #1
   16a3e:	29ff      	cmp	r1, #255	; 0xff
   16a40:	460b      	mov	r3, r1
   16a42:	7877      	ldrb	r7, [r6, #1]
   16a44:	f101 0201 	add.w	r2, r1, #1
   16a48:	d1de      	bne.n	16a08 <d_print_comp+0x818>
   16a4a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   16a4e:	4658      	mov	r0, fp
   16a50:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   16a54:	f884 a103 	strb.w	sl, [r4, #259]	; 0x103
   16a58:	4798      	blx	r3
   16a5a:	f8d4 6124 	ldr.w	r6, [r4, #292]	; 0x124
   16a5e:	2201      	movs	r2, #1
   16a60:	2300      	movs	r3, #0
   16a62:	18b1      	adds	r1, r6, r2
   16a64:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
   16a68:	e7ce      	b.n	16a08 <d_print_comp+0x818>
   16a6a:	2001      	movs	r0, #1
   16a6c:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
   16a70:	e4b4      	b.n	163dc <d_print_comp+0x1ec>
   16a72:	688b      	ldr	r3, [r1, #8]
   16a74:	7819      	ldrb	r1, [r3, #0]
   16a76:	2933      	cmp	r1, #51	; 0x33
   16a78:	f002 8466 	beq.w	19348 <d_print_comp+0x3158>
   16a7c:	2301      	movs	r3, #1
   16a7e:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   16a82:	e4ab      	b.n	163dc <d_print_comp+0x1ec>
   16a84:	2201      	movs	r2, #1
   16a86:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
   16a8a:	e4a7      	b.n	163dc <d_print_comp+0x1ec>
   16a8c:	688b      	ldr	r3, [r1, #8]
   16a8e:	7818      	ldrb	r0, [r3, #0]
   16a90:	2831      	cmp	r0, #49	; 0x31
   16a92:	f002 8480 	beq.w	19396 <d_print_comp+0x31a6>
   16a96:	2301      	movs	r3, #1
   16a98:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   16a9c:	e49e      	b.n	163dc <d_print_comp+0x1ec>
   16a9e:	6849      	ldr	r1, [r1, #4]
   16aa0:	f891 c000 	ldrb.w	ip, [r1]
   16aa4:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
   16aa8:	f002 8535 	beq.w	19516 <d_print_comp+0x3326>
   16aac:	4620      	mov	r0, r4
   16aae:	f006 ff1d 	bl	1d8ec <d_print_expr_op>
   16ab2:	4620      	mov	r0, r4
   16ab4:	68a9      	ldr	r1, [r5, #8]
   16ab6:	f006 ffbd 	bl	1da34 <d_print_subexpr>
   16aba:	e48f      	b.n	163dc <d_print_comp+0x1ec>
   16abc:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   16ac0:	29ff      	cmp	r1, #255	; 0xff
   16ac2:	f003 87f6 	beq.w	1aab2 <d_print_comp+0x48c2>
   16ac6:	eb04 0e01 	add.w	lr, r4, r1
   16aca:	3101      	adds	r1, #1
   16acc:	206f      	movs	r0, #111	; 0x6f
   16ace:	29ff      	cmp	r1, #255	; 0xff
   16ad0:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16ad4:	f88e 0004 	strb.w	r0, [lr, #4]
   16ad8:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   16adc:	f003 87d6 	beq.w	1aa8c <d_print_comp+0x489c>
   16ae0:	eb04 0c01 	add.w	ip, r4, r1
   16ae4:	3101      	adds	r1, #1
   16ae6:	2070      	movs	r0, #112	; 0x70
   16ae8:	29ff      	cmp	r1, #255	; 0xff
   16aea:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16aee:	f88c 0004 	strb.w	r0, [ip, #4]
   16af2:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   16af6:	f003 87b6 	beq.w	1aa66 <d_print_comp+0x4876>
   16afa:	eb04 0e01 	add.w	lr, r4, r1
   16afe:	3101      	adds	r1, #1
   16b00:	2065      	movs	r0, #101	; 0x65
   16b02:	29ff      	cmp	r1, #255	; 0xff
   16b04:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16b08:	f88e 0004 	strb.w	r0, [lr, #4]
   16b0c:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   16b10:	f003 8796 	beq.w	1aa40 <d_print_comp+0x4850>
   16b14:	eb04 0c01 	add.w	ip, r4, r1
   16b18:	3101      	adds	r1, #1
   16b1a:	2072      	movs	r0, #114	; 0x72
   16b1c:	29ff      	cmp	r1, #255	; 0xff
   16b1e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16b22:	f88c 0004 	strb.w	r0, [ip, #4]
   16b26:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   16b2a:	f003 8776 	beq.w	1aa1a <d_print_comp+0x482a>
   16b2e:	eb04 0e01 	add.w	lr, r4, r1
   16b32:	3101      	adds	r1, #1
   16b34:	2061      	movs	r0, #97	; 0x61
   16b36:	29ff      	cmp	r1, #255	; 0xff
   16b38:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16b3c:	f88e 0004 	strb.w	r0, [lr, #4]
   16b40:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   16b44:	f003 8756 	beq.w	1a9f4 <d_print_comp+0x4804>
   16b48:	eb04 0c01 	add.w	ip, r4, r1
   16b4c:	3101      	adds	r1, #1
   16b4e:	2074      	movs	r0, #116	; 0x74
   16b50:	29ff      	cmp	r1, #255	; 0xff
   16b52:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16b56:	f88c 0004 	strb.w	r0, [ip, #4]
   16b5a:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   16b5e:	f003 8736 	beq.w	1a9ce <d_print_comp+0x47de>
   16b62:	eb04 0e01 	add.w	lr, r4, r1
   16b66:	3101      	adds	r1, #1
   16b68:	206f      	movs	r0, #111	; 0x6f
   16b6a:	29ff      	cmp	r1, #255	; 0xff
   16b6c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16b70:	f88e 0004 	strb.w	r0, [lr, #4]
   16b74:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   16b78:	f003 8716 	beq.w	1a9a8 <d_print_comp+0x47b8>
   16b7c:	eb04 0c01 	add.w	ip, r4, r1
   16b80:	3101      	adds	r1, #1
   16b82:	2072      	movs	r0, #114	; 0x72
   16b84:	29ff      	cmp	r1, #255	; 0xff
   16b86:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16b8a:	f88c 0004 	strb.w	r0, [ip, #4]
   16b8e:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   16b92:	f001 87bd 	beq.w	18b10 <d_print_comp+0x2920>
   16b96:	1c48      	adds	r0, r1, #1
   16b98:	eb04 0e01 	add.w	lr, r4, r1
   16b9c:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   16ba0:	2120      	movs	r1, #32
   16ba2:	4620      	mov	r0, r4
   16ba4:	f88e 1004 	strb.w	r1, [lr, #4]
   16ba8:	f884 1108 	strb.w	r1, [r4, #264]	; 0x108
   16bac:	68a9      	ldr	r1, [r5, #8]
   16bae:	f7ff fb1f 	bl	161f0 <d_print_comp>
   16bb2:	e413      	b.n	163dc <d_print_comp+0x1ec>
   16bb4:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   16bb8:	29ff      	cmp	r1, #255	; 0xff
   16bba:	f004 8012 	beq.w	1abe2 <d_print_comp+0x49f2>
   16bbe:	eb04 0c01 	add.w	ip, r4, r1
   16bc2:	3101      	adds	r1, #1
   16bc4:	206f      	movs	r0, #111	; 0x6f
   16bc6:	29ff      	cmp	r1, #255	; 0xff
   16bc8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16bcc:	f88c 0004 	strb.w	r0, [ip, #4]
   16bd0:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   16bd4:	f003 87f2 	beq.w	1abbc <d_print_comp+0x49cc>
   16bd8:	eb04 0e01 	add.w	lr, r4, r1
   16bdc:	3101      	adds	r1, #1
   16bde:	2070      	movs	r0, #112	; 0x70
   16be0:	29ff      	cmp	r1, #255	; 0xff
   16be2:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16be6:	f88e 0004 	strb.w	r0, [lr, #4]
   16bea:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   16bee:	f003 87d2 	beq.w	1ab96 <d_print_comp+0x49a6>
   16bf2:	eb04 0c01 	add.w	ip, r4, r1
   16bf6:	3101      	adds	r1, #1
   16bf8:	2065      	movs	r0, #101	; 0x65
   16bfa:	29ff      	cmp	r1, #255	; 0xff
   16bfc:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16c00:	f88c 0004 	strb.w	r0, [ip, #4]
   16c04:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   16c08:	f003 87b2 	beq.w	1ab70 <d_print_comp+0x4980>
   16c0c:	eb04 0e01 	add.w	lr, r4, r1
   16c10:	3101      	adds	r1, #1
   16c12:	2072      	movs	r0, #114	; 0x72
   16c14:	29ff      	cmp	r1, #255	; 0xff
   16c16:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16c1a:	f88e 0004 	strb.w	r0, [lr, #4]
   16c1e:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   16c22:	f003 8792 	beq.w	1ab4a <d_print_comp+0x495a>
   16c26:	eb04 0c01 	add.w	ip, r4, r1
   16c2a:	3101      	adds	r1, #1
   16c2c:	2061      	movs	r0, #97	; 0x61
   16c2e:	29ff      	cmp	r1, #255	; 0xff
   16c30:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16c34:	f88c 0004 	strb.w	r0, [ip, #4]
   16c38:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   16c3c:	f003 8772 	beq.w	1ab24 <d_print_comp+0x4934>
   16c40:	eb04 0e01 	add.w	lr, r4, r1
   16c44:	3101      	adds	r1, #1
   16c46:	2074      	movs	r0, #116	; 0x74
   16c48:	29ff      	cmp	r1, #255	; 0xff
   16c4a:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16c4e:	f88e 0004 	strb.w	r0, [lr, #4]
   16c52:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   16c56:	f003 8752 	beq.w	1aafe <d_print_comp+0x490e>
   16c5a:	eb04 0c01 	add.w	ip, r4, r1
   16c5e:	3101      	adds	r1, #1
   16c60:	206f      	movs	r0, #111	; 0x6f
   16c62:	29ff      	cmp	r1, #255	; 0xff
   16c64:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16c68:	f88c 0004 	strb.w	r0, [ip, #4]
   16c6c:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   16c70:	f003 8732 	beq.w	1aad8 <d_print_comp+0x48e8>
   16c74:	eb04 0e01 	add.w	lr, r4, r1
   16c78:	3101      	adds	r1, #1
   16c7a:	2072      	movs	r0, #114	; 0x72
   16c7c:	29ff      	cmp	r1, #255	; 0xff
   16c7e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16c82:	f88e 0004 	strb.w	r0, [lr, #4]
   16c86:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   16c8a:	f001 8753 	beq.w	18b34 <d_print_comp+0x2944>
   16c8e:	1c4a      	adds	r2, r1, #1
   16c90:	1861      	adds	r1, r4, r1
   16c92:	2020      	movs	r0, #32
   16c94:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   16c98:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   16c9c:	7108      	strb	r0, [r1, #4]
   16c9e:	4620      	mov	r0, r4
   16ca0:	6869      	ldr	r1, [r5, #4]
   16ca2:	780a      	ldrb	r2, [r1, #0]
   16ca4:	2a04      	cmp	r2, #4
   16ca6:	f002 8371 	beq.w	1938c <d_print_comp+0x319c>
   16caa:	f7ff faa1 	bl	161f0 <d_print_comp>
   16cae:	f7ff bb95 	b.w	163dc <d_print_comp+0x1ec>
   16cb2:	bf00      	nop
   16cb4:	0002b9a7 	.word	0x0002b9a7
   16cb8:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   16cbc:	29ff      	cmp	r1, #255	; 0xff
   16cbe:	f003 87dc 	beq.w	1ac7a <d_print_comp+0x4a8a>
   16cc2:	eb04 0c01 	add.w	ip, r4, r1
   16cc6:	3101      	adds	r1, #1
   16cc8:	276f      	movs	r7, #111	; 0x6f
   16cca:	29ff      	cmp	r1, #255	; 0xff
   16ccc:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16cd0:	f88c 7004 	strb.w	r7, [ip, #4]
   16cd4:	f884 7108 	strb.w	r7, [r4, #264]	; 0x108
   16cd8:	f003 87bc 	beq.w	1ac54 <d_print_comp+0x4a64>
   16cdc:	eb04 0801 	add.w	r8, r4, r1
   16ce0:	3101      	adds	r1, #1
   16ce2:	2370      	movs	r3, #112	; 0x70
   16ce4:	29ff      	cmp	r1, #255	; 0xff
   16ce6:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16cea:	f888 3004 	strb.w	r3, [r8, #4]
   16cee:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   16cf2:	f003 879c 	beq.w	1ac2e <d_print_comp+0x4a3e>
   16cf6:	eb04 0c01 	add.w	ip, r4, r1
   16cfa:	3101      	adds	r1, #1
   16cfc:	2065      	movs	r0, #101	; 0x65
   16cfe:	29ff      	cmp	r1, #255	; 0xff
   16d00:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16d04:	f88c 0004 	strb.w	r0, [ip, #4]
   16d08:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   16d0c:	f003 877c 	beq.w	1ac08 <d_print_comp+0x4a18>
   16d10:	eb04 0801 	add.w	r8, r4, r1
   16d14:	3101      	adds	r1, #1
   16d16:	2772      	movs	r7, #114	; 0x72
   16d18:	29ff      	cmp	r1, #255	; 0xff
   16d1a:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16d1e:	f888 7004 	strb.w	r7, [r8, #4]
   16d22:	f884 7108 	strb.w	r7, [r4, #264]	; 0x108
   16d26:	f003 87ce 	beq.w	1acc6 <d_print_comp+0x4ad6>
   16d2a:	eb04 0c01 	add.w	ip, r4, r1
   16d2e:	3101      	adds	r1, #1
   16d30:	2061      	movs	r0, #97	; 0x61
   16d32:	29ff      	cmp	r1, #255	; 0xff
   16d34:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16d38:	f88c 0004 	strb.w	r0, [ip, #4]
   16d3c:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   16d40:	f003 87ae 	beq.w	1aca0 <d_print_comp+0x4ab0>
   16d44:	eb04 0801 	add.w	r8, r4, r1
   16d48:	3101      	adds	r1, #1
   16d4a:	2374      	movs	r3, #116	; 0x74
   16d4c:	29ff      	cmp	r1, #255	; 0xff
   16d4e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16d52:	f888 3004 	strb.w	r3, [r8, #4]
   16d56:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   16d5a:	f003 83ca 	beq.w	1a4f2 <d_print_comp+0x4302>
   16d5e:	eb04 0c01 	add.w	ip, r4, r1
   16d62:	3101      	adds	r1, #1
   16d64:	206f      	movs	r0, #111	; 0x6f
   16d66:	29ff      	cmp	r1, #255	; 0xff
   16d68:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16d6c:	f88c 0004 	strb.w	r0, [ip, #4]
   16d70:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   16d74:	f001 86a9 	beq.w	18aca <d_print_comp+0x28da>
   16d78:	1c4a      	adds	r2, r1, #1
   16d7a:	eb04 0801 	add.w	r8, r4, r1
   16d7e:	2372      	movs	r3, #114	; 0x72
   16d80:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   16d84:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   16d88:	f888 3004 	strb.w	r3, [r8, #4]
   16d8c:	686b      	ldr	r3, [r5, #4]
   16d8e:	685f      	ldr	r7, [r3, #4]
   16d90:	7838      	ldrb	r0, [r7, #0]
   16d92:	3861      	subs	r0, #97	; 0x61
   16d94:	b2c1      	uxtb	r1, r0
   16d96:	2919      	cmp	r1, #25
   16d98:	f242 82c5 	bls.w	19326 <d_print_comp+0x3136>
   16d9c:	f8d3 8008 	ldr.w	r8, [r3, #8]
   16da0:	f1b8 0f00 	cmp.w	r8, #0
   16da4:	f43f ab1a 	beq.w	163dc <d_print_comp+0x1ec>
   16da8:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   16dac:	f108 36ff 	add.w	r6, r8, #4294967295
   16db0:	f006 0b01 	and.w	fp, r6, #1
   16db4:	f04f 0900 	mov.w	r9, #0
   16db8:	29ff      	cmp	r1, #255	; 0xff
   16dba:	f104 0a04 	add.w	sl, r4, #4
   16dbe:	783e      	ldrb	r6, [r7, #0]
   16dc0:	f004 8219 	beq.w	1b1f6 <d_print_comp+0x5006>
   16dc4:	460b      	mov	r3, r1
   16dc6:	3101      	adds	r1, #1
   16dc8:	2501      	movs	r5, #1
   16dca:	18e0      	adds	r0, r4, r3
   16dcc:	45a8      	cmp	r8, r5
   16dce:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16dd2:	7106      	strb	r6, [r0, #4]
   16dd4:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   16dd8:	f43f ab00 	beq.w	163dc <d_print_comp+0x1ec>
   16ddc:	f1bb 0f00 	cmp.w	fp, #0
   16de0:	d011      	beq.n	16e06 <d_print_comp+0xc16>
   16de2:	29ff      	cmp	r1, #255	; 0xff
   16de4:	5d7e      	ldrb	r6, [r7, r5]
   16de6:	f004 8291 	beq.w	1b30c <d_print_comp+0x511c>
   16dea:	460b      	mov	r3, r1
   16dec:	3101      	adds	r1, #1
   16dee:	3501      	adds	r5, #1
   16df0:	eb04 0c03 	add.w	ip, r4, r3
   16df4:	45a8      	cmp	r8, r5
   16df6:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16dfa:	f88c 6004 	strb.w	r6, [ip, #4]
   16dfe:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   16e02:	f43f aaeb 	beq.w	163dc <d_print_comp+0x1ec>
   16e06:	29ff      	cmp	r1, #255	; 0xff
   16e08:	460b      	mov	r3, r1
   16e0a:	5d7e      	ldrb	r6, [r7, r5]
   16e0c:	f101 0201 	add.w	r2, r1, #1
   16e10:	f001 87dc 	beq.w	18dcc <d_print_comp+0x2bdc>
   16e14:	eb04 0c03 	add.w	ip, r4, r3
   16e18:	3501      	adds	r5, #1
   16e1a:	1c51      	adds	r1, r2, #1
   16e1c:	2aff      	cmp	r2, #255	; 0xff
   16e1e:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   16e22:	4613      	mov	r3, r2
   16e24:	f88c 6004 	strb.w	r6, [ip, #4]
   16e28:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   16e2c:	5d7e      	ldrb	r6, [r7, r5]
   16e2e:	d1de      	bne.n	16dee <d_print_comp+0xbfe>
   16e30:	4611      	mov	r1, r2
   16e32:	4650      	mov	r0, sl
   16e34:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   16e38:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   16e3c:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   16e40:	4798      	blx	r3
   16e42:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   16e46:	2101      	movs	r1, #1
   16e48:	2300      	movs	r3, #0
   16e4a:	1842      	adds	r2, r0, r1
   16e4c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   16e50:	e7cd      	b.n	16dee <d_print_comp+0xbfe>
   16e52:	6849      	ldr	r1, [r1, #4]
   16e54:	b111      	cbz	r1, 16e5c <d_print_comp+0xc6c>
   16e56:	4620      	mov	r0, r4
   16e58:	f7ff f9ca 	bl	161f0 <d_print_comp>
   16e5c:	68aa      	ldr	r2, [r5, #8]
   16e5e:	2a00      	cmp	r2, #0
   16e60:	f43f aabc 	beq.w	163dc <d_print_comp+0x1ec>
   16e64:	f8d4 6104 	ldr.w	r6, [r4, #260]	; 0x104
   16e68:	2efd      	cmp	r6, #253	; 0xfd
   16e6a:	bf98      	it	ls
   16e6c:	f8d4 8124 	ldrls.w	r8, [r4, #292]	; 0x124
   16e70:	f202 837c 	bhi.w	1956c <d_print_comp+0x337c>
   16e74:	eb04 0e06 	add.w	lr, r4, r6
   16e78:	2220      	movs	r2, #32
   16e7a:	212c      	movs	r1, #44	; 0x2c
   16e7c:	f884 2108 	strb.w	r2, [r4, #264]	; 0x108
   16e80:	f88e 1004 	strb.w	r1, [lr, #4]
   16e84:	1cb7      	adds	r7, r6, #2
   16e86:	f88e 2005 	strb.w	r2, [lr, #5]
   16e8a:	4620      	mov	r0, r4
   16e8c:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
   16e90:	68a9      	ldr	r1, [r5, #8]
   16e92:	f7ff f9ad 	bl	161f0 <d_print_comp>
   16e96:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   16e9a:	4580      	cmp	r8, r0
   16e9c:	f47f aa9e 	bne.w	163dc <d_print_comp+0x1ec>
   16ea0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   16ea4:	42bb      	cmp	r3, r7
   16ea6:	bf08      	it	eq
   16ea8:	f8c4 6104 	streq.w	r6, [r4, #260]	; 0x104
   16eac:	f7ff ba96 	b.w	163dc <d_print_comp+0x1ec>
   16eb0:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
   16eb4:	2900      	cmp	r1, #0
   16eb6:	f001 826b 	beq.w	18390 <d_print_comp+0x21a0>
   16eba:	460a      	mov	r2, r1
   16ebc:	6890      	ldr	r0, [r2, #8]
   16ebe:	b950      	cbnz	r0, 16ed6 <d_print_comp+0xce6>
   16ec0:	6850      	ldr	r0, [r2, #4]
   16ec2:	7800      	ldrb	r0, [r0, #0]
   16ec4:	f1a0 0617 	sub.w	r6, r0, #23
   16ec8:	b2f6      	uxtb	r6, r6
   16eca:	2e02      	cmp	r6, #2
   16ecc:	f201 8260 	bhi.w	18390 <d_print_comp+0x21a0>
   16ed0:	4283      	cmp	r3, r0
   16ed2:	f002 83bc 	beq.w	1964e <d_print_comp+0x345e>
   16ed6:	6812      	ldr	r2, [r2, #0]
   16ed8:	2a00      	cmp	r2, #0
   16eda:	d1ef      	bne.n	16ebc <d_print_comp+0xccc>
   16edc:	f001 ba58 	b.w	18390 <d_print_comp+0x21a0>
   16ee0:	f64b 182c 	movw	r8, #47404	; 0xb92c
   16ee4:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   16ee8:	f2c0 0802 	movt	r8, #2
   16eec:	f04f 0900 	mov.w	r9, #0
   16ef0:	4646      	mov	r6, r8
   16ef2:	29ff      	cmp	r1, #255	; 0xff
   16ef4:	f108 0813 	add.w	r8, r8, #19
   16ef8:	f104 0a04 	add.w	sl, r4, #4
   16efc:	f816 7b01 	ldrb.w	r7, [r6], #1
   16f00:	f003 802d 	beq.w	19f5e <d_print_comp+0x3d6e>
   16f04:	460b      	mov	r3, r1
   16f06:	3101      	adds	r1, #1
   16f08:	eb04 0c03 	add.w	ip, r4, r3
   16f0c:	f884 7108 	strb.w	r7, [r4, #264]	; 0x108
   16f10:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16f14:	f88c 7004 	strb.w	r7, [ip, #4]
   16f18:	462f      	mov	r7, r5
   16f1a:	e019      	b.n	16f50 <d_print_comp+0xd60>
   16f1c:	eb04 0c03 	add.w	ip, r4, r3
   16f20:	1c51      	adds	r1, r2, #1
   16f22:	2aff      	cmp	r2, #255	; 0xff
   16f24:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
   16f28:	f88c 5004 	strb.w	r5, [ip, #4]
   16f2c:	4613      	mov	r3, r2
   16f2e:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   16f32:	f816 5b01 	ldrb.w	r5, [r6], #1
   16f36:	f001 86a5 	beq.w	18c84 <d_print_comp+0x2a94>
   16f3a:	eb04 0e03 	add.w	lr, r4, r3
   16f3e:	4546      	cmp	r6, r8
   16f40:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16f44:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
   16f48:	f88e 5004 	strb.w	r5, [lr, #4]
   16f4c:	f002 80de 	beq.w	1910c <d_print_comp+0x2f1c>
   16f50:	1c4a      	adds	r2, r1, #1
   16f52:	29ff      	cmp	r1, #255	; 0xff
   16f54:	460b      	mov	r3, r1
   16f56:	f816 5b01 	ldrb.w	r5, [r6], #1
   16f5a:	d1df      	bne.n	16f1c <d_print_comp+0xd2c>
   16f5c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   16f60:	4650      	mov	r0, sl
   16f62:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   16f66:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   16f6a:	4798      	blx	r3
   16f6c:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
   16f70:	2201      	movs	r2, #1
   16f72:	2300      	movs	r3, #0
   16f74:	1888      	adds	r0, r1, r2
   16f76:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   16f7a:	e7cf      	b.n	16f1c <d_print_comp+0xd2c>
   16f7c:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   16f80:	29ff      	cmp	r1, #255	; 0xff
   16f82:	f003 87bb 	beq.w	1aefc <d_print_comp+0x4d0c>
   16f86:	1862      	adds	r2, r4, r1
   16f88:	3101      	adds	r1, #1
   16f8a:	206a      	movs	r0, #106	; 0x6a
   16f8c:	29ff      	cmp	r1, #255	; 0xff
   16f8e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16f92:	7110      	strb	r0, [r2, #4]
   16f94:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   16f98:	f003 879d 	beq.w	1aed6 <d_print_comp+0x4ce6>
   16f9c:	eb04 0c01 	add.w	ip, r4, r1
   16fa0:	3101      	adds	r1, #1
   16fa2:	2361      	movs	r3, #97	; 0x61
   16fa4:	29ff      	cmp	r1, #255	; 0xff
   16fa6:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16faa:	f88c 3004 	strb.w	r3, [ip, #4]
   16fae:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   16fb2:	f003 877d 	beq.w	1aeb0 <d_print_comp+0x4cc0>
   16fb6:	eb04 0e01 	add.w	lr, r4, r1
   16fba:	3101      	adds	r1, #1
   16fbc:	2376      	movs	r3, #118	; 0x76
   16fbe:	29ff      	cmp	r1, #255	; 0xff
   16fc0:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16fc4:	f88e 3004 	strb.w	r3, [lr, #4]
   16fc8:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   16fcc:	f003 875d 	beq.w	1ae8a <d_print_comp+0x4c9a>
   16fd0:	eb04 0c01 	add.w	ip, r4, r1
   16fd4:	3101      	adds	r1, #1
   16fd6:	2361      	movs	r3, #97	; 0x61
   16fd8:	29ff      	cmp	r1, #255	; 0xff
   16fda:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16fde:	f88c 3004 	strb.w	r3, [ip, #4]
   16fe2:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   16fe6:	f003 873d 	beq.w	1ae64 <d_print_comp+0x4c74>
   16fea:	eb04 0e01 	add.w	lr, r4, r1
   16fee:	3101      	adds	r1, #1
   16ff0:	2320      	movs	r3, #32
   16ff2:	29ff      	cmp	r1, #255	; 0xff
   16ff4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   16ff8:	f88e 3004 	strb.w	r3, [lr, #4]
   16ffc:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   17000:	f003 871d 	beq.w	1ae3e <d_print_comp+0x4c4e>
   17004:	eb04 0c01 	add.w	ip, r4, r1
   17008:	3101      	adds	r1, #1
   1700a:	2343      	movs	r3, #67	; 0x43
   1700c:	29ff      	cmp	r1, #255	; 0xff
   1700e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17012:	f88c 3004 	strb.w	r3, [ip, #4]
   17016:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1701a:	f003 86fd 	beq.w	1ae18 <d_print_comp+0x4c28>
   1701e:	eb04 0e01 	add.w	lr, r4, r1
   17022:	3101      	adds	r1, #1
   17024:	236c      	movs	r3, #108	; 0x6c
   17026:	29ff      	cmp	r1, #255	; 0xff
   17028:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1702c:	f88e 3004 	strb.w	r3, [lr, #4]
   17030:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   17034:	f003 86dd 	beq.w	1adf2 <d_print_comp+0x4c02>
   17038:	eb04 0c01 	add.w	ip, r4, r1
   1703c:	3101      	adds	r1, #1
   1703e:	2361      	movs	r3, #97	; 0x61
   17040:	29ff      	cmp	r1, #255	; 0xff
   17042:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17046:	f88c 3004 	strb.w	r3, [ip, #4]
   1704a:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1704e:	f003 86bd 	beq.w	1adcc <d_print_comp+0x4bdc>
   17052:	eb04 0e01 	add.w	lr, r4, r1
   17056:	3101      	adds	r1, #1
   17058:	2673      	movs	r6, #115	; 0x73
   1705a:	29ff      	cmp	r1, #255	; 0xff
   1705c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17060:	f88e 6004 	strb.w	r6, [lr, #4]
   17064:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   17068:	f003 869e 	beq.w	1ada8 <d_print_comp+0x4bb8>
   1706c:	eb04 0c01 	add.w	ip, r4, r1
   17070:	3101      	adds	r1, #1
   17072:	2373      	movs	r3, #115	; 0x73
   17074:	29ff      	cmp	r1, #255	; 0xff
   17076:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1707a:	f88c 3004 	strb.w	r3, [ip, #4]
   1707e:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   17082:	f003 867e 	beq.w	1ad82 <d_print_comp+0x4b92>
   17086:	eb04 0e01 	add.w	lr, r4, r1
   1708a:	3101      	adds	r1, #1
   1708c:	2020      	movs	r0, #32
   1708e:	29ff      	cmp	r1, #255	; 0xff
   17090:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17094:	f88e 0004 	strb.w	r0, [lr, #4]
   17098:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1709c:	f003 865e 	beq.w	1ad5c <d_print_comp+0x4b6c>
   170a0:	eb04 0c01 	add.w	ip, r4, r1
   170a4:	3101      	adds	r1, #1
   170a6:	2066      	movs	r0, #102	; 0x66
   170a8:	29ff      	cmp	r1, #255	; 0xff
   170aa:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   170ae:	f88c 0004 	strb.w	r0, [ip, #4]
   170b2:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   170b6:	f003 863e 	beq.w	1ad36 <d_print_comp+0x4b46>
   170ba:	eb04 0e01 	add.w	lr, r4, r1
   170be:	3101      	adds	r1, #1
   170c0:	206f      	movs	r0, #111	; 0x6f
   170c2:	29ff      	cmp	r1, #255	; 0xff
   170c4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   170c8:	f88e 0004 	strb.w	r0, [lr, #4]
   170cc:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   170d0:	f003 861e 	beq.w	1ad10 <d_print_comp+0x4b20>
   170d4:	eb04 0c01 	add.w	ip, r4, r1
   170d8:	3101      	adds	r1, #1
   170da:	2072      	movs	r0, #114	; 0x72
   170dc:	29ff      	cmp	r1, #255	; 0xff
   170de:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   170e2:	f88c 0004 	strb.w	r0, [ip, #4]
   170e6:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   170ea:	f001 8559 	beq.w	18ba0 <d_print_comp+0x29b0>
   170ee:	1c48      	adds	r0, r1, #1
   170f0:	eb04 0e01 	add.w	lr, r4, r1
   170f4:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   170f8:	2120      	movs	r1, #32
   170fa:	4620      	mov	r0, r4
   170fc:	f88e 1004 	strb.w	r1, [lr, #4]
   17100:	f884 1108 	strb.w	r1, [r4, #264]	; 0x108
   17104:	6869      	ldr	r1, [r5, #4]
   17106:	f7ff f873 	bl	161f0 <d_print_comp>
   1710a:	f7ff b967 	b.w	163dc <d_print_comp+0x1ec>
   1710e:	4e8f      	ldr	r6, [pc, #572]	; (1734c <d_print_comp+0x115c>)
   17110:	f04f 0a00 	mov.w	sl, #0
   17114:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   17118:	f104 0b04 	add.w	fp, r4, #4
   1711c:	f106 081a 	add.w	r8, r6, #26
   17120:	46a9      	mov	r9, r5
   17122:	e019      	b.n	17158 <d_print_comp+0xf68>
   17124:	eb04 0e03 	add.w	lr, r4, r3
   17128:	1c6e      	adds	r6, r5, #1
   1712a:	1c51      	adds	r1, r2, #1
   1712c:	2aff      	cmp	r2, #255	; 0xff
   1712e:	4613      	mov	r3, r2
   17130:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   17134:	f88e 7004 	strb.w	r7, [lr, #4]
   17138:	f884 7108 	strb.w	r7, [r4, #264]	; 0x108
   1713c:	786d      	ldrb	r5, [r5, #1]
   1713e:	f001 85fb 	beq.w	18d38 <d_print_comp+0x2b48>
   17142:	eb04 0e03 	add.w	lr, r4, r3
   17146:	4546      	cmp	r6, r8
   17148:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1714c:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
   17150:	f88e 5004 	strb.w	r5, [lr, #4]
   17154:	f001 87cc 	beq.w	190f0 <d_print_comp+0x2f00>
   17158:	1c75      	adds	r5, r6, #1
   1715a:	29ff      	cmp	r1, #255	; 0xff
   1715c:	460b      	mov	r3, r1
   1715e:	7877      	ldrb	r7, [r6, #1]
   17160:	f101 0201 	add.w	r2, r1, #1
   17164:	d1de      	bne.n	17124 <d_print_comp+0xf34>
   17166:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1716a:	4658      	mov	r0, fp
   1716c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   17170:	f884 a103 	strb.w	sl, [r4, #259]	; 0x103
   17174:	4798      	blx	r3
   17176:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1717a:	2201      	movs	r2, #1
   1717c:	2300      	movs	r3, #0
   1717e:	1886      	adds	r6, r0, r2
   17180:	f8c4 6124 	str.w	r6, [r4, #292]	; 0x124
   17184:	e7ce      	b.n	17124 <d_print_comp+0xf34>
   17186:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1718a:	29ff      	cmp	r1, #255	; 0xff
   1718c:	f003 87e6 	beq.w	1b15c <d_print_comp+0x4f6c>
   17190:	1862      	adds	r2, r4, r1
   17192:	3101      	adds	r1, #1
   17194:	2076      	movs	r0, #118	; 0x76
   17196:	29ff      	cmp	r1, #255	; 0xff
   17198:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1719c:	7110      	strb	r0, [r2, #4]
   1719e:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   171a2:	f003 87c8 	beq.w	1b136 <d_print_comp+0x4f46>
   171a6:	eb04 0e01 	add.w	lr, r4, r1
   171aa:	3101      	adds	r1, #1
   171ac:	2369      	movs	r3, #105	; 0x69
   171ae:	29ff      	cmp	r1, #255	; 0xff
   171b0:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   171b4:	f88e 3004 	strb.w	r3, [lr, #4]
   171b8:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   171bc:	f003 87a8 	beq.w	1b110 <d_print_comp+0x4f20>
   171c0:	eb04 0c01 	add.w	ip, r4, r1
   171c4:	3101      	adds	r1, #1
   171c6:	2372      	movs	r3, #114	; 0x72
   171c8:	29ff      	cmp	r1, #255	; 0xff
   171ca:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   171ce:	f88c 3004 	strb.w	r3, [ip, #4]
   171d2:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   171d6:	f003 8788 	beq.w	1b0ea <d_print_comp+0x4efa>
   171da:	eb04 0e01 	add.w	lr, r4, r1
   171de:	3101      	adds	r1, #1
   171e0:	2374      	movs	r3, #116	; 0x74
   171e2:	29ff      	cmp	r1, #255	; 0xff
   171e4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   171e8:	f88e 3004 	strb.w	r3, [lr, #4]
   171ec:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   171f0:	f003 8768 	beq.w	1b0c4 <d_print_comp+0x4ed4>
   171f4:	eb04 0c01 	add.w	ip, r4, r1
   171f8:	3101      	adds	r1, #1
   171fa:	2375      	movs	r3, #117	; 0x75
   171fc:	29ff      	cmp	r1, #255	; 0xff
   171fe:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17202:	f88c 3004 	strb.w	r3, [ip, #4]
   17206:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1720a:	f003 8748 	beq.w	1b09e <d_print_comp+0x4eae>
   1720e:	eb04 0e01 	add.w	lr, r4, r1
   17212:	3101      	adds	r1, #1
   17214:	2361      	movs	r3, #97	; 0x61
   17216:	29ff      	cmp	r1, #255	; 0xff
   17218:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1721c:	f88e 3004 	strb.w	r3, [lr, #4]
   17220:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   17224:	f003 8728 	beq.w	1b078 <d_print_comp+0x4e88>
   17228:	eb04 0c01 	add.w	ip, r4, r1
   1722c:	3101      	adds	r1, #1
   1722e:	236c      	movs	r3, #108	; 0x6c
   17230:	29ff      	cmp	r1, #255	; 0xff
   17232:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17236:	f88c 3004 	strb.w	r3, [ip, #4]
   1723a:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1723e:	f003 8708 	beq.w	1b052 <d_print_comp+0x4e62>
   17242:	eb04 0e01 	add.w	lr, r4, r1
   17246:	3101      	adds	r1, #1
   17248:	2320      	movs	r3, #32
   1724a:	29ff      	cmp	r1, #255	; 0xff
   1724c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17250:	f88e 3004 	strb.w	r3, [lr, #4]
   17254:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   17258:	f003 86e8 	beq.w	1b02c <d_print_comp+0x4e3c>
   1725c:	eb04 0c01 	add.w	ip, r4, r1
   17260:	3101      	adds	r1, #1
   17262:	2374      	movs	r3, #116	; 0x74
   17264:	29ff      	cmp	r1, #255	; 0xff
   17266:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1726a:	f88c 3004 	strb.w	r3, [ip, #4]
   1726e:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   17272:	f003 86c8 	beq.w	1b006 <d_print_comp+0x4e16>
   17276:	eb04 0e01 	add.w	lr, r4, r1
   1727a:	3101      	adds	r1, #1
   1727c:	2368      	movs	r3, #104	; 0x68
   1727e:	29ff      	cmp	r1, #255	; 0xff
   17280:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17284:	f88e 3004 	strb.w	r3, [lr, #4]
   17288:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1728c:	f003 86a8 	beq.w	1afe0 <d_print_comp+0x4df0>
   17290:	eb04 0c01 	add.w	ip, r4, r1
   17294:	3101      	adds	r1, #1
   17296:	2375      	movs	r3, #117	; 0x75
   17298:	29ff      	cmp	r1, #255	; 0xff
   1729a:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1729e:	f88c 3004 	strb.w	r3, [ip, #4]
   172a2:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   172a6:	f003 8688 	beq.w	1afba <d_print_comp+0x4dca>
   172aa:	eb04 0e01 	add.w	lr, r4, r1
   172ae:	3101      	adds	r1, #1
   172b0:	236e      	movs	r3, #110	; 0x6e
   172b2:	29ff      	cmp	r1, #255	; 0xff
   172b4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   172b8:	f88e 3004 	strb.w	r3, [lr, #4]
   172bc:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   172c0:	f003 8668 	beq.w	1af94 <d_print_comp+0x4da4>
   172c4:	eb04 0c01 	add.w	ip, r4, r1
   172c8:	3101      	adds	r1, #1
   172ca:	236b      	movs	r3, #107	; 0x6b
   172cc:	29ff      	cmp	r1, #255	; 0xff
   172ce:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   172d2:	f88c 3004 	strb.w	r3, [ip, #4]
   172d6:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   172da:	f003 8648 	beq.w	1af6e <d_print_comp+0x4d7e>
   172de:	eb04 0e01 	add.w	lr, r4, r1
   172e2:	3101      	adds	r1, #1
   172e4:	2320      	movs	r3, #32
   172e6:	29ff      	cmp	r1, #255	; 0xff
   172e8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   172ec:	f88e 3004 	strb.w	r3, [lr, #4]
   172f0:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   172f4:	f003 8628 	beq.w	1af48 <d_print_comp+0x4d58>
   172f8:	eb04 0c01 	add.w	ip, r4, r1
   172fc:	3101      	adds	r1, #1
   172fe:	2374      	movs	r3, #116	; 0x74
   17300:	29ff      	cmp	r1, #255	; 0xff
   17302:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17306:	f88c 3004 	strb.w	r3, [ip, #4]
   1730a:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1730e:	f003 8608 	beq.w	1af22 <d_print_comp+0x4d32>
   17312:	eb04 0e01 	add.w	lr, r4, r1
   17316:	3101      	adds	r1, #1
   17318:	236f      	movs	r3, #111	; 0x6f
   1731a:	29ff      	cmp	r1, #255	; 0xff
   1731c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17320:	f88e 3004 	strb.w	r3, [lr, #4]
   17324:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   17328:	f001 8376 	beq.w	18a18 <d_print_comp+0x2828>
   1732c:	1c48      	adds	r0, r1, #1
   1732e:	eb04 0c01 	add.w	ip, r4, r1
   17332:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   17336:	2120      	movs	r1, #32
   17338:	4620      	mov	r0, r4
   1733a:	f88c 1004 	strb.w	r1, [ip, #4]
   1733e:	f884 1108 	strb.w	r1, [r4, #264]	; 0x108
   17342:	6869      	ldr	r1, [r5, #4]
   17344:	f7fe ff54 	bl	161f0 <d_print_comp>
   17348:	f7ff b848 	b.w	163dc <d_print_comp+0x1ec>
   1734c:	0002b90f 	.word	0x0002b90f
   17350:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   17354:	29ff      	cmp	r1, #255	; 0xff
   17356:	f002 8213 	beq.w	19780 <d_print_comp+0x3590>
   1735a:	1862      	adds	r2, r4, r1
   1735c:	3101      	adds	r1, #1
   1735e:	2068      	movs	r0, #104	; 0x68
   17360:	29ff      	cmp	r1, #255	; 0xff
   17362:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17366:	7110      	strb	r0, [r2, #4]
   17368:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1736c:	f002 81bc 	beq.w	196e8 <d_print_comp+0x34f8>
   17370:	eb04 0c01 	add.w	ip, r4, r1
   17374:	3101      	adds	r1, #1
   17376:	2369      	movs	r3, #105	; 0x69
   17378:	29ff      	cmp	r1, #255	; 0xff
   1737a:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1737e:	f88c 3004 	strb.w	r3, [ip, #4]
   17382:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   17386:	f002 874e 	beq.w	1a226 <d_print_comp+0x4036>
   1738a:	eb04 0e01 	add.w	lr, r4, r1
   1738e:	3101      	adds	r1, #1
   17390:	2664      	movs	r6, #100	; 0x64
   17392:	29ff      	cmp	r1, #255	; 0xff
   17394:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17398:	f88e 6004 	strb.w	r6, [lr, #4]
   1739c:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   173a0:	f002 872f 	beq.w	1a202 <d_print_comp+0x4012>
   173a4:	eb04 0c01 	add.w	ip, r4, r1
   173a8:	3101      	adds	r1, #1
   173aa:	2364      	movs	r3, #100	; 0x64
   173ac:	29ff      	cmp	r1, #255	; 0xff
   173ae:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   173b2:	f88c 3004 	strb.w	r3, [ip, #4]
   173b6:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   173ba:	f002 870f 	beq.w	1a1dc <d_print_comp+0x3fec>
   173be:	eb04 0e01 	add.w	lr, r4, r1
   173c2:	3101      	adds	r1, #1
   173c4:	2065      	movs	r0, #101	; 0x65
   173c6:	29ff      	cmp	r1, #255	; 0xff
   173c8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   173cc:	f88e 0004 	strb.w	r0, [lr, #4]
   173d0:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   173d4:	f002 86ef 	beq.w	1a1b6 <d_print_comp+0x3fc6>
   173d8:	eb04 0c01 	add.w	ip, r4, r1
   173dc:	3101      	adds	r1, #1
   173de:	206e      	movs	r0, #110	; 0x6e
   173e0:	29ff      	cmp	r1, #255	; 0xff
   173e2:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   173e6:	f88c 0004 	strb.w	r0, [ip, #4]
   173ea:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   173ee:	f002 86cf 	beq.w	1a190 <d_print_comp+0x3fa0>
   173f2:	eb04 0e01 	add.w	lr, r4, r1
   173f6:	3101      	adds	r1, #1
   173f8:	2020      	movs	r0, #32
   173fa:	29ff      	cmp	r1, #255	; 0xff
   173fc:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17400:	f88e 0004 	strb.w	r0, [lr, #4]
   17404:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   17408:	f002 86af 	beq.w	1a16a <d_print_comp+0x3f7a>
   1740c:	eb04 0c01 	add.w	ip, r4, r1
   17410:	3101      	adds	r1, #1
   17412:	2061      	movs	r0, #97	; 0x61
   17414:	29ff      	cmp	r1, #255	; 0xff
   17416:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1741a:	f88c 0004 	strb.w	r0, [ip, #4]
   1741e:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   17422:	f002 868f 	beq.w	1a144 <d_print_comp+0x3f54>
   17426:	eb04 0e01 	add.w	lr, r4, r1
   1742a:	3101      	adds	r1, #1
   1742c:	206c      	movs	r0, #108	; 0x6c
   1742e:	29ff      	cmp	r1, #255	; 0xff
   17430:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17434:	f88e 0004 	strb.w	r0, [lr, #4]
   17438:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1743c:	f002 866f 	beq.w	1a11e <d_print_comp+0x3f2e>
   17440:	eb04 0c01 	add.w	ip, r4, r1
   17444:	3101      	adds	r1, #1
   17446:	2069      	movs	r0, #105	; 0x69
   17448:	29ff      	cmp	r1, #255	; 0xff
   1744a:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1744e:	f88c 0004 	strb.w	r0, [ip, #4]
   17452:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   17456:	f002 864f 	beq.w	1a0f8 <d_print_comp+0x3f08>
   1745a:	eb04 0e01 	add.w	lr, r4, r1
   1745e:	3101      	adds	r1, #1
   17460:	2061      	movs	r0, #97	; 0x61
   17462:	29ff      	cmp	r1, #255	; 0xff
   17464:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17468:	f88e 0004 	strb.w	r0, [lr, #4]
   1746c:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   17470:	f002 862f 	beq.w	1a0d2 <d_print_comp+0x3ee2>
   17474:	eb04 0c01 	add.w	ip, r4, r1
   17478:	3101      	adds	r1, #1
   1747a:	2073      	movs	r0, #115	; 0x73
   1747c:	29ff      	cmp	r1, #255	; 0xff
   1747e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17482:	f88c 0004 	strb.w	r0, [ip, #4]
   17486:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1748a:	f002 860f 	beq.w	1a0ac <d_print_comp+0x3ebc>
   1748e:	eb04 0e01 	add.w	lr, r4, r1
   17492:	3101      	adds	r1, #1
   17494:	2020      	movs	r0, #32
   17496:	29ff      	cmp	r1, #255	; 0xff
   17498:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1749c:	f88e 0004 	strb.w	r0, [lr, #4]
   174a0:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   174a4:	f002 85ef 	beq.w	1a086 <d_print_comp+0x3e96>
   174a8:	eb04 0c01 	add.w	ip, r4, r1
   174ac:	3101      	adds	r1, #1
   174ae:	2066      	movs	r0, #102	; 0x66
   174b0:	29ff      	cmp	r1, #255	; 0xff
   174b2:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   174b6:	f88c 0004 	strb.w	r0, [ip, #4]
   174ba:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   174be:	f002 83e5 	beq.w	19c8c <d_print_comp+0x3a9c>
   174c2:	eb04 0e01 	add.w	lr, r4, r1
   174c6:	3101      	adds	r1, #1
   174c8:	206f      	movs	r0, #111	; 0x6f
   174ca:	29ff      	cmp	r1, #255	; 0xff
   174cc:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   174d0:	f88e 0004 	strb.w	r0, [lr, #4]
   174d4:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   174d8:	f002 83c5 	beq.w	19c66 <d_print_comp+0x3a76>
   174dc:	eb04 0c01 	add.w	ip, r4, r1
   174e0:	3101      	adds	r1, #1
   174e2:	2072      	movs	r0, #114	; 0x72
   174e4:	29ff      	cmp	r1, #255	; 0xff
   174e6:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   174ea:	f88c 0004 	strb.w	r0, [ip, #4]
   174ee:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   174f2:	f001 82a3 	beq.w	18a3c <d_print_comp+0x284c>
   174f6:	1c48      	adds	r0, r1, #1
   174f8:	eb04 0e01 	add.w	lr, r4, r1
   174fc:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   17500:	2120      	movs	r1, #32
   17502:	4620      	mov	r0, r4
   17504:	f88e 1004 	strb.w	r1, [lr, #4]
   17508:	f884 1108 	strb.w	r1, [r4, #264]	; 0x108
   1750c:	6869      	ldr	r1, [r5, #4]
   1750e:	f7fe fe6f 	bl	161f0 <d_print_comp>
   17512:	f7fe bf63 	b.w	163dc <d_print_comp+0x1ec>
   17516:	4e7e      	ldr	r6, [pc, #504]	; (17710 <d_print_comp+0x1520>)
   17518:	f04f 0a00 	mov.w	sl, #0
   1751c:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   17520:	f104 0b04 	add.w	fp, r4, #4
   17524:	f106 0818 	add.w	r8, r6, #24
   17528:	46a9      	mov	r9, r5
   1752a:	e019      	b.n	17560 <d_print_comp+0x1370>
   1752c:	eb04 0e03 	add.w	lr, r4, r3
   17530:	1c6e      	adds	r6, r5, #1
   17532:	1c51      	adds	r1, r2, #1
   17534:	2aff      	cmp	r2, #255	; 0xff
   17536:	4613      	mov	r3, r2
   17538:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1753c:	f88e 7004 	strb.w	r7, [lr, #4]
   17540:	f884 7108 	strb.w	r7, [r4, #264]	; 0x108
   17544:	786d      	ldrb	r5, [r5, #1]
   17546:	f001 83c1 	beq.w	18ccc <d_print_comp+0x2adc>
   1754a:	eb04 0c03 	add.w	ip, r4, r3
   1754e:	4546      	cmp	r6, r8
   17550:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17554:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
   17558:	f88c 5004 	strb.w	r5, [ip, #4]
   1755c:	f001 864e 	beq.w	191fc <d_print_comp+0x300c>
   17560:	1c75      	adds	r5, r6, #1
   17562:	29ff      	cmp	r1, #255	; 0xff
   17564:	460b      	mov	r3, r1
   17566:	7877      	ldrb	r7, [r6, #1]
   17568:	f101 0201 	add.w	r2, r1, #1
   1756c:	d1de      	bne.n	1752c <d_print_comp+0x133c>
   1756e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   17572:	4658      	mov	r0, fp
   17574:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   17578:	f884 a103 	strb.w	sl, [r4, #259]	; 0x103
   1757c:	4798      	blx	r3
   1757e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   17582:	2201      	movs	r2, #1
   17584:	2300      	movs	r3, #0
   17586:	1886      	adds	r6, r0, r2
   17588:	f8c4 6124 	str.w	r6, [r4, #292]	; 0x124
   1758c:	e7ce      	b.n	1752c <d_print_comp+0x133c>
   1758e:	688f      	ldr	r7, [r1, #8]
   17590:	f8d1 8004 	ldr.w	r8, [r1, #4]
   17594:	2f00      	cmp	r7, #0
   17596:	f43e af21 	beq.w	163dc <d_print_comp+0x1ec>
   1759a:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1759e:	1e7d      	subs	r5, r7, #1
   175a0:	f04f 0900 	mov.w	r9, #0
   175a4:	f104 0a04 	add.w	sl, r4, #4
   175a8:	29ff      	cmp	r1, #255	; 0xff
   175aa:	f005 0b01 	and.w	fp, r5, #1
   175ae:	f898 6000 	ldrb.w	r6, [r8]
   175b2:	f003 8631 	beq.w	1b218 <d_print_comp+0x5028>
   175b6:	460b      	mov	r3, r1
   175b8:	3101      	adds	r1, #1
   175ba:	2501      	movs	r5, #1
   175bc:	18e0      	adds	r0, r4, r3
   175be:	42af      	cmp	r7, r5
   175c0:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   175c4:	7106      	strb	r6, [r0, #4]
   175c6:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   175ca:	f43e af07 	beq.w	163dc <d_print_comp+0x1ec>
   175ce:	f1bb 0f00 	cmp.w	fp, #0
   175d2:	d012      	beq.n	175fa <d_print_comp+0x140a>
   175d4:	29ff      	cmp	r1, #255	; 0xff
   175d6:	f818 6005 	ldrb.w	r6, [r8, r5]
   175da:	f003 86b9 	beq.w	1b350 <d_print_comp+0x5160>
   175de:	460b      	mov	r3, r1
   175e0:	3101      	adds	r1, #1
   175e2:	3501      	adds	r5, #1
   175e4:	eb04 0c03 	add.w	ip, r4, r3
   175e8:	42af      	cmp	r7, r5
   175ea:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   175ee:	f88c 6004 	strb.w	r6, [ip, #4]
   175f2:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   175f6:	f43e aef1 	beq.w	163dc <d_print_comp+0x1ec>
   175fa:	29ff      	cmp	r1, #255	; 0xff
   175fc:	460b      	mov	r3, r1
   175fe:	f818 6005 	ldrb.w	r6, [r8, r5]
   17602:	f101 0201 	add.w	r2, r1, #1
   17606:	f001 8414 	beq.w	18e32 <d_print_comp+0x2c42>
   1760a:	eb04 0c03 	add.w	ip, r4, r3
   1760e:	3501      	adds	r5, #1
   17610:	1c51      	adds	r1, r2, #1
   17612:	2aff      	cmp	r2, #255	; 0xff
   17614:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   17618:	4613      	mov	r3, r2
   1761a:	f88c 6004 	strb.w	r6, [ip, #4]
   1761e:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   17622:	f818 6005 	ldrb.w	r6, [r8, r5]
   17626:	d1dc      	bne.n	175e2 <d_print_comp+0x13f2>
   17628:	4611      	mov	r1, r2
   1762a:	4650      	mov	r0, sl
   1762c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   17630:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   17634:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   17638:	4798      	blx	r3
   1763a:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1763e:	2101      	movs	r1, #1
   17640:	2300      	movs	r3, #0
   17642:	1842      	adds	r2, r0, r1
   17644:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   17648:	e7cb      	b.n	175e2 <d_print_comp+0x13f2>
   1764a:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1764e:	792d      	ldrb	r5, [r5, #4]
   17650:	1c4b      	adds	r3, r1, #1
   17652:	29ff      	cmp	r1, #255	; 0xff
   17654:	f002 8691 	beq.w	1a37a <d_print_comp+0x418a>
   17658:	eb04 0c01 	add.w	ip, r4, r1
   1765c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   17660:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
   17664:	f88c 5004 	strb.w	r5, [ip, #4]
   17668:	f7fe beb8 	b.w	163dc <d_print_comp+0x1ec>
   1766c:	4620      	mov	r0, r4
   1766e:	6849      	ldr	r1, [r1, #4]
   17670:	f7fe fdbe 	bl	161f0 <d_print_comp>
   17674:	4620      	mov	r0, r4
   17676:	68a9      	ldr	r1, [r5, #8]
   17678:	f7fe fdba 	bl	161f0 <d_print_comp>
   1767c:	f7fe beae 	b.w	163dc <d_print_comp+0x1ec>
   17680:	4e24      	ldr	r6, [pc, #144]	; (17714 <d_print_comp+0x1524>)
   17682:	f04f 0a00 	mov.w	sl, #0
   17686:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1768a:	f104 0b04 	add.w	fp, r4, #4
   1768e:	f106 0815 	add.w	r8, r6, #21
   17692:	46a9      	mov	r9, r5
   17694:	e026      	b.n	176e4 <d_print_comp+0x14f4>
   17696:	eb04 0c01 	add.w	ip, r4, r1
   1769a:	1c51      	adds	r1, r2, #1
   1769c:	2aff      	cmp	r2, #255	; 0xff
   1769e:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   176a2:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   176a6:	f88c 6004 	strb.w	r6, [ip, #4]
   176aa:	786f      	ldrb	r7, [r5, #1]
   176ac:	f001 83f4 	beq.w	18e98 <d_print_comp+0x2ca8>
   176b0:	1cae      	adds	r6, r5, #2
   176b2:	eb04 0e02 	add.w	lr, r4, r2
   176b6:	29ff      	cmp	r1, #255	; 0xff
   176b8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   176bc:	f884 7108 	strb.w	r7, [r4, #264]	; 0x108
   176c0:	f88e 7004 	strb.w	r7, [lr, #4]
   176c4:	78ad      	ldrb	r5, [r5, #2]
   176c6:	f001 83d6 	beq.w	18e76 <d_print_comp+0x2c86>
   176ca:	460b      	mov	r3, r1
   176cc:	3101      	adds	r1, #1
   176ce:	eb04 0c03 	add.w	ip, r4, r3
   176d2:	4546      	cmp	r6, r8
   176d4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   176d8:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
   176dc:	f88c 5004 	strb.w	r5, [ip, #4]
   176e0:	f001 8698 	beq.w	19414 <d_print_comp+0x3224>
   176e4:	1c75      	adds	r5, r6, #1
   176e6:	1c4a      	adds	r2, r1, #1
   176e8:	29ff      	cmp	r1, #255	; 0xff
   176ea:	7876      	ldrb	r6, [r6, #1]
   176ec:	d1d3      	bne.n	17696 <d_print_comp+0x14a6>
   176ee:	4658      	mov	r0, fp
   176f0:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   176f4:	f884 a103 	strb.w	sl, [r4, #259]	; 0x103
   176f8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   176fc:	4798      	blx	r3
   176fe:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   17702:	2201      	movs	r2, #1
   17704:	2100      	movs	r1, #0
   17706:	1887      	adds	r7, r0, r2
   17708:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
   1770c:	e7c3      	b.n	17696 <d_print_comp+0x14a6>
   1770e:	bf00      	nop
   17710:	0002b93f 	.word	0x0002b93f
   17714:	0002b8f7 	.word	0x0002b8f7
   17718:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1771c:	29ff      	cmp	r1, #255	; 0xff
   1771e:	f002 815f 	beq.w	199e0 <d_print_comp+0x37f0>
   17722:	1862      	adds	r2, r4, r1
   17724:	3101      	adds	r1, #1
   17726:	2074      	movs	r0, #116	; 0x74
   17728:	29ff      	cmp	r1, #255	; 0xff
   1772a:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1772e:	7110      	strb	r0, [r2, #4]
   17730:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   17734:	f002 8141 	beq.w	199ba <d_print_comp+0x37ca>
   17738:	eb04 0e01 	add.w	lr, r4, r1
   1773c:	3101      	adds	r1, #1
   1773e:	2379      	movs	r3, #121	; 0x79
   17740:	29ff      	cmp	r1, #255	; 0xff
   17742:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17746:	f88e 3004 	strb.w	r3, [lr, #4]
   1774a:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1774e:	f002 8121 	beq.w	19994 <d_print_comp+0x37a4>
   17752:	eb04 0c01 	add.w	ip, r4, r1
   17756:	3101      	adds	r1, #1
   17758:	2370      	movs	r3, #112	; 0x70
   1775a:	29ff      	cmp	r1, #255	; 0xff
   1775c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17760:	f88c 3004 	strb.w	r3, [ip, #4]
   17764:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   17768:	f002 8101 	beq.w	1996e <d_print_comp+0x377e>
   1776c:	eb04 0e01 	add.w	lr, r4, r1
   17770:	3101      	adds	r1, #1
   17772:	2365      	movs	r3, #101	; 0x65
   17774:	29ff      	cmp	r1, #255	; 0xff
   17776:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1777a:	f88e 3004 	strb.w	r3, [lr, #4]
   1777e:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   17782:	f002 80e1 	beq.w	19948 <d_print_comp+0x3758>
   17786:	eb04 0c01 	add.w	ip, r4, r1
   1778a:	3101      	adds	r1, #1
   1778c:	2369      	movs	r3, #105	; 0x69
   1778e:	29ff      	cmp	r1, #255	; 0xff
   17790:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17794:	f88c 3004 	strb.w	r3, [ip, #4]
   17798:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1779c:	f002 80c1 	beq.w	19922 <d_print_comp+0x3732>
   177a0:	eb04 0e01 	add.w	lr, r4, r1
   177a4:	3101      	adds	r1, #1
   177a6:	236e      	movs	r3, #110	; 0x6e
   177a8:	29ff      	cmp	r1, #255	; 0xff
   177aa:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   177ae:	f88e 3004 	strb.w	r3, [lr, #4]
   177b2:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   177b6:	f002 80a1 	beq.w	198fc <d_print_comp+0x370c>
   177ba:	eb04 0c01 	add.w	ip, r4, r1
   177be:	3101      	adds	r1, #1
   177c0:	2366      	movs	r3, #102	; 0x66
   177c2:	29ff      	cmp	r1, #255	; 0xff
   177c4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   177c8:	f88c 3004 	strb.w	r3, [ip, #4]
   177cc:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   177d0:	f002 8081 	beq.w	198d6 <d_print_comp+0x36e6>
   177d4:	eb04 0e01 	add.w	lr, r4, r1
   177d8:	3101      	adds	r1, #1
   177da:	236f      	movs	r3, #111	; 0x6f
   177dc:	29ff      	cmp	r1, #255	; 0xff
   177de:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   177e2:	f88e 3004 	strb.w	r3, [lr, #4]
   177e6:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   177ea:	f002 8061 	beq.w	198b0 <d_print_comp+0x36c0>
   177ee:	eb04 0c01 	add.w	ip, r4, r1
   177f2:	3101      	adds	r1, #1
   177f4:	2320      	movs	r3, #32
   177f6:	29ff      	cmp	r1, #255	; 0xff
   177f8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   177fc:	f88c 3004 	strb.w	r3, [ip, #4]
   17800:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   17804:	f002 8041 	beq.w	1988a <d_print_comp+0x369a>
   17808:	eb04 0e01 	add.w	lr, r4, r1
   1780c:	3101      	adds	r1, #1
   1780e:	2366      	movs	r3, #102	; 0x66
   17810:	29ff      	cmp	r1, #255	; 0xff
   17812:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17816:	f88e 3004 	strb.w	r3, [lr, #4]
   1781a:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1781e:	f002 8021 	beq.w	19864 <d_print_comp+0x3674>
   17822:	eb04 0c01 	add.w	ip, r4, r1
   17826:	3101      	adds	r1, #1
   17828:	236e      	movs	r3, #110	; 0x6e
   1782a:	29ff      	cmp	r1, #255	; 0xff
   1782c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17830:	f88c 3004 	strb.w	r3, [ip, #4]
   17834:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   17838:	f002 8001 	beq.w	1983e <d_print_comp+0x364e>
   1783c:	eb04 0e01 	add.w	lr, r4, r1
   17840:	3101      	adds	r1, #1
   17842:	2320      	movs	r3, #32
   17844:	29ff      	cmp	r1, #255	; 0xff
   17846:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1784a:	f88e 3004 	strb.w	r3, [lr, #4]
   1784e:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   17852:	f001 87e1 	beq.w	19818 <d_print_comp+0x3628>
   17856:	eb04 0c01 	add.w	ip, r4, r1
   1785a:	3101      	adds	r1, #1
   1785c:	2366      	movs	r3, #102	; 0x66
   1785e:	29ff      	cmp	r1, #255	; 0xff
   17860:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17864:	f88c 3004 	strb.w	r3, [ip, #4]
   17868:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1786c:	f001 87c1 	beq.w	197f2 <d_print_comp+0x3602>
   17870:	eb04 0e01 	add.w	lr, r4, r1
   17874:	3101      	adds	r1, #1
   17876:	236f      	movs	r3, #111	; 0x6f
   17878:	29ff      	cmp	r1, #255	; 0xff
   1787a:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1787e:	f88e 3004 	strb.w	r3, [lr, #4]
   17882:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   17886:	f001 87a1 	beq.w	197cc <d_print_comp+0x35dc>
   1788a:	eb04 0c01 	add.w	ip, r4, r1
   1788e:	3101      	adds	r1, #1
   17890:	2372      	movs	r3, #114	; 0x72
   17892:	29ff      	cmp	r1, #255	; 0xff
   17894:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17898:	f88c 3004 	strb.w	r3, [ip, #4]
   1789c:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   178a0:	f001 8096 	beq.w	189d0 <d_print_comp+0x27e0>
   178a4:	1c48      	adds	r0, r1, #1
   178a6:	eb04 0e01 	add.w	lr, r4, r1
   178aa:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   178ae:	2120      	movs	r1, #32
   178b0:	4620      	mov	r0, r4
   178b2:	f88e 1004 	strb.w	r1, [lr, #4]
   178b6:	f884 1108 	strb.w	r1, [r4, #264]	; 0x108
   178ba:	6869      	ldr	r1, [r5, #4]
   178bc:	f7fe fc98 	bl	161f0 <d_print_comp>
   178c0:	f7fe bd8c 	b.w	163dc <d_print_comp+0x1ec>
   178c4:	f64b 06e4 	movw	r6, #47332	; 0xb8e4
   178c8:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   178cc:	f2c0 0602 	movt	r6, #2
   178d0:	f04f 0900 	mov.w	r9, #0
   178d4:	f106 0812 	add.w	r8, r6, #18
   178d8:	f104 0a04 	add.w	sl, r4, #4
   178dc:	462f      	mov	r7, r5
   178de:	e019      	b.n	17914 <d_print_comp+0x1724>
   178e0:	eb04 0c03 	add.w	ip, r4, r3
   178e4:	1c51      	adds	r1, r2, #1
   178e6:	2aff      	cmp	r2, #255	; 0xff
   178e8:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
   178ec:	f88c 5004 	strb.w	r5, [ip, #4]
   178f0:	4613      	mov	r3, r2
   178f2:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   178f6:	f816 5b01 	ldrb.w	r5, [r6], #1
   178fa:	f001 81f9 	beq.w	18cf0 <d_print_comp+0x2b00>
   178fe:	eb04 0c03 	add.w	ip, r4, r3
   17902:	4546      	cmp	r6, r8
   17904:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17908:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
   1790c:	f88c 5004 	strb.w	r5, [ip, #4]
   17910:	f001 82d4 	beq.w	18ebc <d_print_comp+0x2ccc>
   17914:	1c4a      	adds	r2, r1, #1
   17916:	29ff      	cmp	r1, #255	; 0xff
   17918:	460b      	mov	r3, r1
   1791a:	f816 5b01 	ldrb.w	r5, [r6], #1
   1791e:	d1df      	bne.n	178e0 <d_print_comp+0x16f0>
   17920:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   17924:	4650      	mov	r0, sl
   17926:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1792a:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   1792e:	4798      	blx	r3
   17930:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
   17934:	2201      	movs	r2, #1
   17936:	2300      	movs	r3, #0
   17938:	1888      	adds	r0, r1, r2
   1793a:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1793e:	e7cf      	b.n	178e0 <d_print_comp+0x16f0>
   17940:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   17944:	29ff      	cmp	r1, #255	; 0xff
   17946:	f002 85af 	beq.w	1a4a8 <d_print_comp+0x42b8>
   1794a:	eb04 0e01 	add.w	lr, r4, r1
   1794e:	3101      	adds	r1, #1
   17950:	2074      	movs	r0, #116	; 0x74
   17952:	29ff      	cmp	r1, #255	; 0xff
   17954:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17958:	f88e 0004 	strb.w	r0, [lr, #4]
   1795c:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   17960:	f002 858f 	beq.w	1a482 <d_print_comp+0x4292>
   17964:	eb04 0c01 	add.w	ip, r4, r1
   17968:	3101      	adds	r1, #1
   1796a:	2079      	movs	r0, #121	; 0x79
   1796c:	29ff      	cmp	r1, #255	; 0xff
   1796e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17972:	f88c 0004 	strb.w	r0, [ip, #4]
   17976:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1797a:	f002 856f 	beq.w	1a45c <d_print_comp+0x426c>
   1797e:	eb04 0e01 	add.w	lr, r4, r1
   17982:	3101      	adds	r1, #1
   17984:	2070      	movs	r0, #112	; 0x70
   17986:	29ff      	cmp	r1, #255	; 0xff
   17988:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1798c:	f88e 0004 	strb.w	r0, [lr, #4]
   17990:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   17994:	f002 854f 	beq.w	1a436 <d_print_comp+0x4246>
   17998:	eb04 0c01 	add.w	ip, r4, r1
   1799c:	3101      	adds	r1, #1
   1799e:	2065      	movs	r0, #101	; 0x65
   179a0:	29ff      	cmp	r1, #255	; 0xff
   179a2:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   179a6:	f88c 0004 	strb.w	r0, [ip, #4]
   179aa:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   179ae:	f002 852f 	beq.w	1a410 <d_print_comp+0x4220>
   179b2:	eb04 0e01 	add.w	lr, r4, r1
   179b6:	3101      	adds	r1, #1
   179b8:	2069      	movs	r0, #105	; 0x69
   179ba:	29ff      	cmp	r1, #255	; 0xff
   179bc:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   179c0:	f88e 0004 	strb.w	r0, [lr, #4]
   179c4:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   179c8:	f002 850f 	beq.w	1a3ea <d_print_comp+0x41fa>
   179cc:	eb04 0c01 	add.w	ip, r4, r1
   179d0:	3101      	adds	r1, #1
   179d2:	206e      	movs	r0, #110	; 0x6e
   179d4:	29ff      	cmp	r1, #255	; 0xff
   179d6:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   179da:	f88c 0004 	strb.w	r0, [ip, #4]
   179de:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   179e2:	f002 84ef 	beq.w	1a3c4 <d_print_comp+0x41d4>
   179e6:	eb04 0e01 	add.w	lr, r4, r1
   179ea:	3101      	adds	r1, #1
   179ec:	2066      	movs	r0, #102	; 0x66
   179ee:	29ff      	cmp	r1, #255	; 0xff
   179f0:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   179f4:	f88e 0004 	strb.w	r0, [lr, #4]
   179f8:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   179fc:	f002 84cf 	beq.w	1a39e <d_print_comp+0x41ae>
   17a00:	eb04 0c01 	add.w	ip, r4, r1
   17a04:	3101      	adds	r1, #1
   17a06:	206f      	movs	r0, #111	; 0x6f
   17a08:	29ff      	cmp	r1, #255	; 0xff
   17a0a:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17a0e:	f88c 0004 	strb.w	r0, [ip, #4]
   17a12:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   17a16:	f002 81ab 	beq.w	19d70 <d_print_comp+0x3b80>
   17a1a:	eb04 0e01 	add.w	lr, r4, r1
   17a1e:	3101      	adds	r1, #1
   17a20:	2020      	movs	r0, #32
   17a22:	29ff      	cmp	r1, #255	; 0xff
   17a24:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17a28:	f88e 0004 	strb.w	r0, [lr, #4]
   17a2c:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   17a30:	f002 818b 	beq.w	19d4a <d_print_comp+0x3b5a>
   17a34:	eb04 0c01 	add.w	ip, r4, r1
   17a38:	3101      	adds	r1, #1
   17a3a:	2066      	movs	r0, #102	; 0x66
   17a3c:	29ff      	cmp	r1, #255	; 0xff
   17a3e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17a42:	f88c 0004 	strb.w	r0, [ip, #4]
   17a46:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   17a4a:	f002 816b 	beq.w	19d24 <d_print_comp+0x3b34>
   17a4e:	eb04 0e01 	add.w	lr, r4, r1
   17a52:	3101      	adds	r1, #1
   17a54:	206f      	movs	r0, #111	; 0x6f
   17a56:	29ff      	cmp	r1, #255	; 0xff
   17a58:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17a5c:	f88e 0004 	strb.w	r0, [lr, #4]
   17a60:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   17a64:	f002 814b 	beq.w	19cfe <d_print_comp+0x3b0e>
   17a68:	eb04 0c01 	add.w	ip, r4, r1
   17a6c:	3101      	adds	r1, #1
   17a6e:	2072      	movs	r0, #114	; 0x72
   17a70:	29ff      	cmp	r1, #255	; 0xff
   17a72:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17a76:	f88c 0004 	strb.w	r0, [ip, #4]
   17a7a:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   17a7e:	f000 87ef 	beq.w	18a60 <d_print_comp+0x2870>
   17a82:	1c48      	adds	r0, r1, #1
   17a84:	eb04 0e01 	add.w	lr, r4, r1
   17a88:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   17a8c:	2120      	movs	r1, #32
   17a8e:	4620      	mov	r0, r4
   17a90:	f88e 1004 	strb.w	r1, [lr, #4]
   17a94:	f884 1108 	strb.w	r1, [r4, #264]	; 0x108
   17a98:	6869      	ldr	r1, [r5, #4]
   17a9a:	f7fe fba9 	bl	161f0 <d_print_comp>
   17a9e:	f7fe bc9d 	b.w	163dc <d_print_comp+0x1ec>
   17aa2:	4ead      	ldr	r6, [pc, #692]	; (17d58 <d_print_comp+0x1b68>)
   17aa4:	f04f 0a00 	mov.w	sl, #0
   17aa8:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   17aac:	f104 0b04 	add.w	fp, r4, #4
   17ab0:	f106 0818 	add.w	r8, r6, #24
   17ab4:	46a9      	mov	r9, r5
   17ab6:	e019      	b.n	17aec <d_print_comp+0x18fc>
   17ab8:	eb04 0e03 	add.w	lr, r4, r3
   17abc:	1c6e      	adds	r6, r5, #1
   17abe:	1c51      	adds	r1, r2, #1
   17ac0:	2aff      	cmp	r2, #255	; 0xff
   17ac2:	4613      	mov	r3, r2
   17ac4:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   17ac8:	f88e 7004 	strb.w	r7, [lr, #4]
   17acc:	f884 7108 	strb.w	r7, [r4, #264]	; 0x108
   17ad0:	786d      	ldrb	r5, [r5, #1]
   17ad2:	f001 811f 	beq.w	18d14 <d_print_comp+0x2b24>
   17ad6:	eb04 0e03 	add.w	lr, r4, r3
   17ada:	4546      	cmp	r6, r8
   17adc:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17ae0:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
   17ae4:	f88e 5004 	strb.w	r5, [lr, #4]
   17ae8:	f001 81ee 	beq.w	18ec8 <d_print_comp+0x2cd8>
   17aec:	1c75      	adds	r5, r6, #1
   17aee:	29ff      	cmp	r1, #255	; 0xff
   17af0:	460b      	mov	r3, r1
   17af2:	7877      	ldrb	r7, [r6, #1]
   17af4:	f101 0201 	add.w	r2, r1, #1
   17af8:	d1de      	bne.n	17ab8 <d_print_comp+0x18c8>
   17afa:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   17afe:	4658      	mov	r0, fp
   17b00:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   17b04:	f884 a103 	strb.w	sl, [r4, #259]	; 0x103
   17b08:	4798      	blx	r3
   17b0a:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   17b0e:	2201      	movs	r2, #1
   17b10:	2300      	movs	r3, #0
   17b12:	1886      	adds	r6, r0, r2
   17b14:	f8c4 6124 	str.w	r6, [r4, #292]	; 0x124
   17b18:	e7ce      	b.n	17ab8 <d_print_comp+0x18c8>
   17b1a:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   17b1e:	29ff      	cmp	r1, #255	; 0xff
   17b20:	f002 829e 	beq.w	1a060 <d_print_comp+0x3e70>
   17b24:	eb04 0e01 	add.w	lr, r4, r1
   17b28:	3101      	adds	r1, #1
   17b2a:	2056      	movs	r0, #86	; 0x56
   17b2c:	29ff      	cmp	r1, #255	; 0xff
   17b2e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17b32:	f88e 0004 	strb.w	r0, [lr, #4]
   17b36:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   17b3a:	f002 827e 	beq.w	1a03a <d_print_comp+0x3e4a>
   17b3e:	eb04 0c01 	add.w	ip, r4, r1
   17b42:	3101      	adds	r1, #1
   17b44:	2654      	movs	r6, #84	; 0x54
   17b46:	29ff      	cmp	r1, #255	; 0xff
   17b48:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17b4c:	f88c 6004 	strb.w	r6, [ip, #4]
   17b50:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   17b54:	f002 825f 	beq.w	1a016 <d_print_comp+0x3e26>
   17b58:	eb04 0e01 	add.w	lr, r4, r1
   17b5c:	3101      	adds	r1, #1
   17b5e:	2054      	movs	r0, #84	; 0x54
   17b60:	29ff      	cmp	r1, #255	; 0xff
   17b62:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17b66:	f88e 0004 	strb.w	r0, [lr, #4]
   17b6a:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   17b6e:	f002 823f 	beq.w	19ff0 <d_print_comp+0x3e00>
   17b72:	eb04 0c01 	add.w	ip, r4, r1
   17b76:	3101      	adds	r1, #1
   17b78:	2320      	movs	r3, #32
   17b7a:	29ff      	cmp	r1, #255	; 0xff
   17b7c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17b80:	f88c 3004 	strb.w	r3, [ip, #4]
   17b84:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   17b88:	f002 820d 	beq.w	19fa6 <d_print_comp+0x3db6>
   17b8c:	eb04 0e01 	add.w	lr, r4, r1
   17b90:	3101      	adds	r1, #1
   17b92:	2366      	movs	r3, #102	; 0x66
   17b94:	29ff      	cmp	r1, #255	; 0xff
   17b96:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17b9a:	f88e 3004 	strb.w	r3, [lr, #4]
   17b9e:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   17ba2:	f002 81ed 	beq.w	19f80 <d_print_comp+0x3d90>
   17ba6:	eb04 0c01 	add.w	ip, r4, r1
   17baa:	3101      	adds	r1, #1
   17bac:	236f      	movs	r3, #111	; 0x6f
   17bae:	29ff      	cmp	r1, #255	; 0xff
   17bb0:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17bb4:	f88c 3004 	strb.w	r3, [ip, #4]
   17bb8:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   17bbc:	f001 85f3 	beq.w	197a6 <d_print_comp+0x35b6>
   17bc0:	eb04 0e01 	add.w	lr, r4, r1
   17bc4:	3101      	adds	r1, #1
   17bc6:	2372      	movs	r3, #114	; 0x72
   17bc8:	29ff      	cmp	r1, #255	; 0xff
   17bca:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17bce:	f88e 3004 	strb.w	r3, [lr, #4]
   17bd2:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   17bd6:	f000 86e9 	beq.w	189ac <d_print_comp+0x27bc>
   17bda:	1c48      	adds	r0, r1, #1
   17bdc:	eb04 0c01 	add.w	ip, r4, r1
   17be0:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   17be4:	2120      	movs	r1, #32
   17be6:	4620      	mov	r0, r4
   17be8:	f88c 1004 	strb.w	r1, [ip, #4]
   17bec:	f884 1108 	strb.w	r1, [r4, #264]	; 0x108
   17bf0:	6869      	ldr	r1, [r5, #4]
   17bf2:	f7fe fafd 	bl	161f0 <d_print_comp>
   17bf6:	f7fe bbf1 	b.w	163dc <d_print_comp+0x1ec>
   17bfa:	4620      	mov	r0, r4
   17bfc:	6889      	ldr	r1, [r1, #8]
   17bfe:	f7fe faf7 	bl	161f0 <d_print_comp>
   17c02:	f7fe bbeb 	b.w	163dc <d_print_comp+0x1ec>
   17c06:	6849      	ldr	r1, [r1, #4]
   17c08:	4620      	mov	r0, r4
   17c0a:	f7fe faf1 	bl	161f0 <d_print_comp>
   17c0e:	6826      	ldr	r6, [r4, #0]
   17c10:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   17c14:	f016 0604 	ands.w	r6, r6, #4
   17c18:	f041 827e 	bne.w	19118 <d_print_comp+0x2f28>
   17c1c:	29ff      	cmp	r1, #255	; 0xff
   17c1e:	f003 8571 	beq.w	1b704 <d_print_comp+0x5514>
   17c22:	eb04 0e01 	add.w	lr, r4, r1
   17c26:	3101      	adds	r1, #1
   17c28:	203a      	movs	r0, #58	; 0x3a
   17c2a:	29ff      	cmp	r1, #255	; 0xff
   17c2c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17c30:	f88e 0004 	strb.w	r0, [lr, #4]
   17c34:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   17c38:	f000 87d5 	beq.w	18be6 <d_print_comp+0x29f6>
   17c3c:	1c4a      	adds	r2, r1, #1
   17c3e:	eb04 0c01 	add.w	ip, r4, r1
   17c42:	203a      	movs	r0, #58	; 0x3a
   17c44:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   17c48:	f88c 0004 	strb.w	r0, [ip, #4]
   17c4c:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   17c50:	4620      	mov	r0, r4
   17c52:	68a9      	ldr	r1, [r5, #8]
   17c54:	f7fe facc 	bl	161f0 <d_print_comp>
   17c58:	f7fe bbc0 	b.w	163dc <d_print_comp+0x1ec>
   17c5c:	f8d4 6114 	ldr.w	r6, [r4, #276]	; 0x114
   17c60:	2e00      	cmp	r6, #0
   17c62:	d033      	beq.n	17ccc <d_print_comp+0x1adc>
   17c64:	6873      	ldr	r3, [r6, #4]
   17c66:	684a      	ldr	r2, [r1, #4]
   17c68:	689b      	ldr	r3, [r3, #8]
   17c6a:	2b00      	cmp	r3, #0
   17c6c:	f001 83e5 	beq.w	1943a <d_print_comp+0x324a>
   17c70:	7818      	ldrb	r0, [r3, #0]
   17c72:	282b      	cmp	r0, #43	; 0x2b
   17c74:	d12a      	bne.n	17ccc <d_print_comp+0x1adc>
   17c76:	2a00      	cmp	r2, #0
   17c78:	f343 86d2 	ble.w	1ba20 <d_print_comp+0x5830>
   17c7c:	689b      	ldr	r3, [r3, #8]
   17c7e:	3a01      	subs	r2, #1
   17c80:	f002 0101 	and.w	r1, r2, #1
   17c84:	2b00      	cmp	r3, #0
   17c86:	f001 83d8 	beq.w	1943a <d_print_comp+0x324a>
   17c8a:	7818      	ldrb	r0, [r3, #0]
   17c8c:	282b      	cmp	r0, #43	; 0x2b
   17c8e:	d11d      	bne.n	17ccc <d_print_comp+0x1adc>
   17c90:	2a00      	cmp	r2, #0
   17c92:	f001 83db 	beq.w	1944c <d_print_comp+0x325c>
   17c96:	b139      	cbz	r1, 17ca8 <d_print_comp+0x1ab8>
   17c98:	689b      	ldr	r3, [r3, #8]
   17c9a:	3a01      	subs	r2, #1
   17c9c:	b99b      	cbnz	r3, 17cc6 <d_print_comp+0x1ad6>
   17c9e:	f001 bbcc 	b.w	1943a <d_print_comp+0x324a>
   17ca2:	2a00      	cmp	r2, #0
   17ca4:	f001 83d2 	beq.w	1944c <d_print_comp+0x325c>
   17ca8:	689b      	ldr	r3, [r3, #8]
   17caa:	3a01      	subs	r2, #1
   17cac:	2b00      	cmp	r3, #0
   17cae:	f001 83c4 	beq.w	1943a <d_print_comp+0x324a>
   17cb2:	f893 c000 	ldrb.w	ip, [r3]
   17cb6:	3a01      	subs	r2, #1
   17cb8:	f1bc 0f2b 	cmp.w	ip, #43	; 0x2b
   17cbc:	d106      	bne.n	17ccc <d_print_comp+0x1adc>
   17cbe:	689b      	ldr	r3, [r3, #8]
   17cc0:	2b00      	cmp	r3, #0
   17cc2:	f001 83ba 	beq.w	1943a <d_print_comp+0x324a>
   17cc6:	7819      	ldrb	r1, [r3, #0]
   17cc8:	292b      	cmp	r1, #43	; 0x2b
   17cca:	d0ea      	beq.n	17ca2 <d_print_comp+0x1ab2>
   17ccc:	2101      	movs	r1, #1
   17cce:	f8c4 111c 	str.w	r1, [r4, #284]	; 0x11c
   17cd2:	f7fe bb83 	b.w	163dc <d_print_comp+0x1ec>
   17cd6:	6820      	ldr	r0, [r4, #0]
   17cd8:	2600      	movs	r6, #0
   17cda:	f8d4 7118 	ldr.w	r7, [r4, #280]	; 0x118
   17cde:	0743      	lsls	r3, r0, #29
   17ce0:	f8c4 6118 	str.w	r6, [r4, #280]	; 0x118
   17ce4:	684e      	ldr	r6, [r1, #4]
   17ce6:	d505      	bpl.n	17cf4 <d_print_comp+0x1b04>
   17ce8:	7831      	ldrb	r1, [r6, #0]
   17cea:	b919      	cbnz	r1, 17cf4 <d_print_comp+0x1b04>
   17cec:	68b2      	ldr	r2, [r6, #8]
   17cee:	2a06      	cmp	r2, #6
   17cf0:	f003 854d 	beq.w	1b78e <d_print_comp+0x559e>
   17cf4:	4631      	mov	r1, r6
   17cf6:	4620      	mov	r0, r4
   17cf8:	f7fe fa7a 	bl	161f0 <d_print_comp>
   17cfc:	f894 2108 	ldrb.w	r2, [r4, #264]	; 0x108
   17d00:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   17d04:	2a3c      	cmp	r2, #60	; 0x3c
   17d06:	f003 83d1 	beq.w	1b4ac <d_print_comp+0x52bc>
   17d0a:	1c48      	adds	r0, r1, #1
   17d0c:	29ff      	cmp	r1, #255	; 0xff
   17d0e:	f003 824a 	beq.w	1b1a6 <d_print_comp+0x4fb6>
   17d12:	eb04 0e01 	add.w	lr, r4, r1
   17d16:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   17d1a:	213c      	movs	r1, #60	; 0x3c
   17d1c:	4620      	mov	r0, r4
   17d1e:	f88e 1004 	strb.w	r1, [lr, #4]
   17d22:	f884 1108 	strb.w	r1, [r4, #264]	; 0x108
   17d26:	68a9      	ldr	r1, [r5, #8]
   17d28:	f7fe fa62 	bl	161f0 <d_print_comp>
   17d2c:	f894 0108 	ldrb.w	r0, [r4, #264]	; 0x108
   17d30:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   17d34:	283e      	cmp	r0, #62	; 0x3e
   17d36:	f003 83aa 	beq.w	1b48e <d_print_comp+0x529e>
   17d3a:	1c4a      	adds	r2, r1, #1
   17d3c:	29ff      	cmp	r1, #255	; 0xff
   17d3e:	f003 8220 	beq.w	1b182 <d_print_comp+0x4f92>
   17d42:	1861      	adds	r1, r4, r1
   17d44:	203e      	movs	r0, #62	; 0x3e
   17d46:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   17d4a:	7108      	strb	r0, [r1, #4]
   17d4c:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   17d50:	f8c4 7118 	str.w	r7, [r4, #280]	; 0x118
   17d54:	f7fe bb42 	b.w	163dc <d_print_comp+0x1ec>
   17d58:	0002b8c7 	.word	0x0002b8c7
   17d5c:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   17d60:	29ff      	cmp	r1, #255	; 0xff
   17d62:	f002 82f7 	beq.w	1a354 <d_print_comp+0x4164>
   17d66:	eb04 0c01 	add.w	ip, r4, r1
   17d6a:	3101      	adds	r1, #1
   17d6c:	277b      	movs	r7, #123	; 0x7b
   17d6e:	29ff      	cmp	r1, #255	; 0xff
   17d70:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17d74:	f88c 7004 	strb.w	r7, [ip, #4]
   17d78:	f884 7108 	strb.w	r7, [r4, #264]	; 0x108
   17d7c:	f002 82d7 	beq.w	1a32e <d_print_comp+0x413e>
   17d80:	eb04 0e01 	add.w	lr, r4, r1
   17d84:	3101      	adds	r1, #1
   17d86:	2370      	movs	r3, #112	; 0x70
   17d88:	29ff      	cmp	r1, #255	; 0xff
   17d8a:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17d8e:	f88e 3004 	strb.w	r3, [lr, #4]
   17d92:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   17d96:	f002 82b7 	beq.w	1a308 <d_print_comp+0x4118>
   17d9a:	eb04 0c01 	add.w	ip, r4, r1
   17d9e:	3101      	adds	r1, #1
   17da0:	2061      	movs	r0, #97	; 0x61
   17da2:	29ff      	cmp	r1, #255	; 0xff
   17da4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17da8:	f88c 0004 	strb.w	r0, [ip, #4]
   17dac:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   17db0:	f002 8297 	beq.w	1a2e2 <d_print_comp+0x40f2>
   17db4:	eb04 0e01 	add.w	lr, r4, r1
   17db8:	3101      	adds	r1, #1
   17dba:	2772      	movs	r7, #114	; 0x72
   17dbc:	29ff      	cmp	r1, #255	; 0xff
   17dbe:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17dc2:	f88e 7004 	strb.w	r7, [lr, #4]
   17dc6:	f884 7108 	strb.w	r7, [r4, #264]	; 0x108
   17dca:	f002 8277 	beq.w	1a2bc <d_print_comp+0x40cc>
   17dce:	eb04 0c01 	add.w	ip, r4, r1
   17dd2:	3101      	adds	r1, #1
   17dd4:	206d      	movs	r0, #109	; 0x6d
   17dd6:	29ff      	cmp	r1, #255	; 0xff
   17dd8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17ddc:	f88c 0004 	strb.w	r0, [ip, #4]
   17de0:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   17de4:	f000 85d0 	beq.w	18988 <d_print_comp+0x2798>
   17de8:	1c4a      	adds	r2, r1, #1
   17dea:	1861      	adds	r1, r4, r1
   17dec:	2023      	movs	r0, #35	; 0x23
   17dee:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   17df2:	7108      	strb	r0, [r1, #4]
   17df4:	f64b 1180 	movw	r1, #47488	; 0xb980
   17df8:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   17dfc:	f2c0 0102 	movt	r1, #2
   17e00:	686a      	ldr	r2, [r5, #4]
   17e02:	a806      	add	r0, sp, #24
   17e04:	3201      	adds	r2, #1
   17e06:	f008 f8d5 	bl	1ffb4 <sprintf>
   17e0a:	a806      	add	r0, sp, #24
   17e0c:	f008 fae2 	bl	203d4 <strlen>
   17e10:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   17e14:	4607      	mov	r7, r0
   17e16:	2800      	cmp	r0, #0
   17e18:	f000 87a0 	beq.w	18d5c <d_print_comp+0x2b6c>
   17e1c:	29ff      	cmp	r1, #255	; 0xff
   17e1e:	f100 36ff 	add.w	r6, r0, #4294967295
   17e22:	f006 0901 	and.w	r9, r6, #1
   17e26:	f04f 0800 	mov.w	r8, #0
   17e2a:	f104 0a04 	add.w	sl, r4, #4
   17e2e:	f89d 6018 	ldrb.w	r6, [sp, #24]
   17e32:	f003 8202 	beq.w	1b23a <d_print_comp+0x504a>
   17e36:	460b      	mov	r3, r1
   17e38:	3101      	adds	r1, #1
   17e3a:	2501      	movs	r5, #1
   17e3c:	eb04 0e03 	add.w	lr, r4, r3
   17e40:	42bd      	cmp	r5, r7
   17e42:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17e46:	f88e 6004 	strb.w	r6, [lr, #4]
   17e4a:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   17e4e:	f000 8785 	beq.w	18d5c <d_print_comp+0x2b6c>
   17e52:	f1b9 0f00 	cmp.w	r9, #0
   17e56:	d012      	beq.n	17e7e <d_print_comp+0x1c8e>
   17e58:	ae06      	add	r6, sp, #24
   17e5a:	29ff      	cmp	r1, #255	; 0xff
   17e5c:	5d76      	ldrb	r6, [r6, r5]
   17e5e:	f003 8288 	beq.w	1b372 <d_print_comp+0x5182>
   17e62:	460b      	mov	r3, r1
   17e64:	3101      	adds	r1, #1
   17e66:	3501      	adds	r5, #1
   17e68:	eb04 0c03 	add.w	ip, r4, r3
   17e6c:	42bd      	cmp	r5, r7
   17e6e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17e72:	f88c 6004 	strb.w	r6, [ip, #4]
   17e76:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   17e7a:	f000 876f 	beq.w	18d5c <d_print_comp+0x2b6c>
   17e7e:	f10d 0e18 	add.w	lr, sp, #24
   17e82:	29ff      	cmp	r1, #255	; 0xff
   17e84:	460b      	mov	r3, r1
   17e86:	f101 0201 	add.w	r2, r1, #1
   17e8a:	f81e 6005 	ldrb.w	r6, [lr, r5]
   17e8e:	f000 878c 	beq.w	18daa <d_print_comp+0x2bba>
   17e92:	eb04 0e03 	add.w	lr, r4, r3
   17e96:	3501      	adds	r5, #1
   17e98:	1c51      	adds	r1, r2, #1
   17e9a:	f10d 0c18 	add.w	ip, sp, #24
   17e9e:	2aff      	cmp	r2, #255	; 0xff
   17ea0:	f88e 6004 	strb.w	r6, [lr, #4]
   17ea4:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   17ea8:	4613      	mov	r3, r2
   17eaa:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   17eae:	f81c 6005 	ldrb.w	r6, [ip, r5]
   17eb2:	d1d8      	bne.n	17e66 <d_print_comp+0x1c76>
   17eb4:	4611      	mov	r1, r2
   17eb6:	4650      	mov	r0, sl
   17eb8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   17ebc:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   17ec0:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
   17ec4:	4798      	blx	r3
   17ec6:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   17eca:	2101      	movs	r1, #1
   17ecc:	2300      	movs	r3, #0
   17ece:	1850      	adds	r0, r2, r1
   17ed0:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   17ed4:	e7c7      	b.n	17e66 <d_print_comp+0x1c76>
   17ed6:	6822      	ldr	r2, [r4, #0]
   17ed8:	f012 0904 	ands.w	r9, r2, #4
   17edc:	f041 8044 	bne.w	18f68 <d_print_comp+0x2d78>
   17ee0:	688f      	ldr	r7, [r1, #8]
   17ee2:	f8d1 8004 	ldr.w	r8, [r1, #4]
   17ee6:	2f00      	cmp	r7, #0
   17ee8:	f43e aa78 	beq.w	163dc <d_print_comp+0x1ec>
   17eec:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   17ef0:	1e7d      	subs	r5, r7, #1
   17ef2:	f104 0a04 	add.w	sl, r4, #4
   17ef6:	f005 0b01 	and.w	fp, r5, #1
   17efa:	29ff      	cmp	r1, #255	; 0xff
   17efc:	f898 6000 	ldrb.w	r6, [r8]
   17f00:	f003 845e 	beq.w	1b7c0 <d_print_comp+0x55d0>
   17f04:	460b      	mov	r3, r1
   17f06:	3101      	adds	r1, #1
   17f08:	2501      	movs	r5, #1
   17f0a:	eb04 0c03 	add.w	ip, r4, r3
   17f0e:	42af      	cmp	r7, r5
   17f10:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17f14:	f88c 6004 	strb.w	r6, [ip, #4]
   17f18:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   17f1c:	f43e aa5e 	beq.w	163dc <d_print_comp+0x1ec>
   17f20:	f1bb 0f00 	cmp.w	fp, #0
   17f24:	d012      	beq.n	17f4c <d_print_comp+0x1d5c>
   17f26:	29ff      	cmp	r1, #255	; 0xff
   17f28:	f818 6005 	ldrb.w	r6, [r8, r5]
   17f2c:	f003 848c 	beq.w	1b848 <d_print_comp+0x5658>
   17f30:	460b      	mov	r3, r1
   17f32:	3101      	adds	r1, #1
   17f34:	3501      	adds	r5, #1
   17f36:	eb04 0c03 	add.w	ip, r4, r3
   17f3a:	42af      	cmp	r7, r5
   17f3c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17f40:	f88c 6004 	strb.w	r6, [ip, #4]
   17f44:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   17f48:	f43e aa48 	beq.w	163dc <d_print_comp+0x1ec>
   17f4c:	29ff      	cmp	r1, #255	; 0xff
   17f4e:	460b      	mov	r3, r1
   17f50:	f818 6005 	ldrb.w	r6, [r8, r5]
   17f54:	f101 0201 	add.w	r2, r1, #1
   17f58:	f001 81d4 	beq.w	19304 <d_print_comp+0x3114>
   17f5c:	eb04 0c03 	add.w	ip, r4, r3
   17f60:	3501      	adds	r5, #1
   17f62:	1c51      	adds	r1, r2, #1
   17f64:	2aff      	cmp	r2, #255	; 0xff
   17f66:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   17f6a:	4613      	mov	r3, r2
   17f6c:	f88c 6004 	strb.w	r6, [ip, #4]
   17f70:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   17f74:	f818 6005 	ldrb.w	r6, [r8, r5]
   17f78:	d1dc      	bne.n	17f34 <d_print_comp+0x1d44>
   17f7a:	4611      	mov	r1, r2
   17f7c:	4650      	mov	r0, sl
   17f7e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   17f82:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   17f86:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   17f8a:	4798      	blx	r3
   17f8c:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   17f90:	2101      	movs	r1, #1
   17f92:	2300      	movs	r3, #0
   17f94:	1842      	adds	r2, r0, r1
   17f96:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   17f9a:	e7cb      	b.n	17f34 <d_print_comp+0x1d44>
   17f9c:	2201      	movs	r2, #1
   17f9e:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
   17fa2:	f7fe ba1b 	b.w	163dc <d_print_comp+0x1ec>
   17fa6:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   17faa:	29ff      	cmp	r1, #255	; 0xff
   17fac:	f001 85b0 	beq.w	19b10 <d_print_comp+0x3920>
   17fb0:	eb04 0e01 	add.w	lr, r4, r1
   17fb4:	3101      	adds	r1, #1
   17fb6:	2064      	movs	r0, #100	; 0x64
   17fb8:	29ff      	cmp	r1, #255	; 0xff
   17fba:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17fbe:	f88e 0004 	strb.w	r0, [lr, #4]
   17fc2:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   17fc6:	f001 8590 	beq.w	19aea <d_print_comp+0x38fa>
   17fca:	eb04 0c01 	add.w	ip, r4, r1
   17fce:	3101      	adds	r1, #1
   17fd0:	2065      	movs	r0, #101	; 0x65
   17fd2:	29ff      	cmp	r1, #255	; 0xff
   17fd4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17fd8:	f88c 0004 	strb.w	r0, [ip, #4]
   17fdc:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   17fe0:	f001 8570 	beq.w	19ac4 <d_print_comp+0x38d4>
   17fe4:	eb04 0e01 	add.w	lr, r4, r1
   17fe8:	3101      	adds	r1, #1
   17fea:	2063      	movs	r0, #99	; 0x63
   17fec:	29ff      	cmp	r1, #255	; 0xff
   17fee:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   17ff2:	f88e 0004 	strb.w	r0, [lr, #4]
   17ff6:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   17ffa:	f001 8550 	beq.w	19a9e <d_print_comp+0x38ae>
   17ffe:	eb04 0c01 	add.w	ip, r4, r1
   18002:	3101      	adds	r1, #1
   18004:	206c      	movs	r0, #108	; 0x6c
   18006:	29ff      	cmp	r1, #255	; 0xff
   18008:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1800c:	f88c 0004 	strb.w	r0, [ip, #4]
   18010:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   18014:	f001 8530 	beq.w	19a78 <d_print_comp+0x3888>
   18018:	eb04 0e01 	add.w	lr, r4, r1
   1801c:	3101      	adds	r1, #1
   1801e:	2074      	movs	r0, #116	; 0x74
   18020:	29ff      	cmp	r1, #255	; 0xff
   18022:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18026:	f88e 0004 	strb.w	r0, [lr, #4]
   1802a:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1802e:	f001 8510 	beq.w	19a52 <d_print_comp+0x3862>
   18032:	eb04 0c01 	add.w	ip, r4, r1
   18036:	3101      	adds	r1, #1
   18038:	2079      	movs	r0, #121	; 0x79
   1803a:	29ff      	cmp	r1, #255	; 0xff
   1803c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18040:	f88c 0004 	strb.w	r0, [ip, #4]
   18044:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   18048:	f001 84f0 	beq.w	19a2c <d_print_comp+0x383c>
   1804c:	eb04 0e01 	add.w	lr, r4, r1
   18050:	3101      	adds	r1, #1
   18052:	2070      	movs	r0, #112	; 0x70
   18054:	29ff      	cmp	r1, #255	; 0xff
   18056:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1805a:	f88e 0004 	strb.w	r0, [lr, #4]
   1805e:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   18062:	f001 84d0 	beq.w	19a06 <d_print_comp+0x3816>
   18066:	eb04 0c01 	add.w	ip, r4, r1
   1806a:	3101      	adds	r1, #1
   1806c:	2065      	movs	r0, #101	; 0x65
   1806e:	29ff      	cmp	r1, #255	; 0xff
   18070:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18074:	f88c 0004 	strb.w	r0, [ip, #4]
   18078:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1807c:	f001 855b 	beq.w	19b36 <d_print_comp+0x3946>
   18080:	eb04 0e01 	add.w	lr, r4, r1
   18084:	3101      	adds	r1, #1
   18086:	2020      	movs	r0, #32
   18088:	29ff      	cmp	r1, #255	; 0xff
   1808a:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1808e:	f88e 0004 	strb.w	r0, [lr, #4]
   18092:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   18096:	f000 84ad 	beq.w	189f4 <d_print_comp+0x2804>
   1809a:	1c48      	adds	r0, r1, #1
   1809c:	eb04 0c01 	add.w	ip, r4, r1
   180a0:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   180a4:	2128      	movs	r1, #40	; 0x28
   180a6:	4620      	mov	r0, r4
   180a8:	f88c 1004 	strb.w	r1, [ip, #4]
   180ac:	f884 1108 	strb.w	r1, [r4, #264]	; 0x108
   180b0:	6869      	ldr	r1, [r5, #4]
   180b2:	f7fe f89d 	bl	161f0 <d_print_comp>
   180b6:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   180ba:	1c4a      	adds	r2, r1, #1
   180bc:	29ff      	cmp	r1, #255	; 0xff
   180be:	f002 843d 	beq.w	1a93c <d_print_comp+0x474c>
   180c2:	eb04 0e01 	add.w	lr, r4, r1
   180c6:	2029      	movs	r0, #41	; 0x29
   180c8:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   180cc:	f88e 0004 	strb.w	r0, [lr, #4]
   180d0:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   180d4:	f7fe b982 	b.w	163dc <d_print_comp+0x1ec>
   180d8:	f64b 1180 	movw	r1, #47488	; 0xb980
   180dc:	686a      	ldr	r2, [r5, #4]
   180de:	f2c0 0102 	movt	r1, #2
   180e2:	a806      	add	r0, sp, #24
   180e4:	f007 ff66 	bl	1ffb4 <sprintf>
   180e8:	a806      	add	r0, sp, #24
   180ea:	f008 f973 	bl	203d4 <strlen>
   180ee:	4607      	mov	r7, r0
   180f0:	2800      	cmp	r0, #0
   180f2:	f43e a973 	beq.w	163dc <d_print_comp+0x1ec>
   180f6:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   180fa:	1e45      	subs	r5, r0, #1
   180fc:	f04f 0800 	mov.w	r8, #0
   18100:	f104 0a04 	add.w	sl, r4, #4
   18104:	29ff      	cmp	r1, #255	; 0xff
   18106:	f005 0901 	and.w	r9, r5, #1
   1810a:	f89d 6018 	ldrb.w	r6, [sp, #24]
   1810e:	f003 80db 	beq.w	1b2c8 <d_print_comp+0x50d8>
   18112:	460b      	mov	r3, r1
   18114:	3101      	adds	r1, #1
   18116:	2501      	movs	r5, #1
   18118:	eb04 0e03 	add.w	lr, r4, r3
   1811c:	42bd      	cmp	r5, r7
   1811e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18122:	f88e 6004 	strb.w	r6, [lr, #4]
   18126:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   1812a:	f43e a957 	beq.w	163dc <d_print_comp+0x1ec>
   1812e:	f1b9 0f00 	cmp.w	r9, #0
   18132:	d012      	beq.n	1815a <d_print_comp+0x1f6a>
   18134:	ae06      	add	r6, sp, #24
   18136:	29ff      	cmp	r1, #255	; 0xff
   18138:	5d76      	ldrb	r6, [r6, r5]
   1813a:	f003 80d6 	beq.w	1b2ea <d_print_comp+0x50fa>
   1813e:	460b      	mov	r3, r1
   18140:	3101      	adds	r1, #1
   18142:	3501      	adds	r5, #1
   18144:	eb04 0c03 	add.w	ip, r4, r3
   18148:	42bd      	cmp	r5, r7
   1814a:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1814e:	f88c 6004 	strb.w	r6, [ip, #4]
   18152:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   18156:	f43e a941 	beq.w	163dc <d_print_comp+0x1ec>
   1815a:	ae06      	add	r6, sp, #24
   1815c:	29ff      	cmp	r1, #255	; 0xff
   1815e:	460b      	mov	r3, r1
   18160:	f101 0201 	add.w	r2, r1, #1
   18164:	5d76      	ldrb	r6, [r6, r5]
   18166:	f000 8653 	beq.w	18e10 <d_print_comp+0x2c20>
   1816a:	eb04 0c03 	add.w	ip, r4, r3
   1816e:	3501      	adds	r5, #1
   18170:	1c51      	adds	r1, r2, #1
   18172:	f10d 0e18 	add.w	lr, sp, #24
   18176:	2aff      	cmp	r2, #255	; 0xff
   18178:	f88c 6004 	strb.w	r6, [ip, #4]
   1817c:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   18180:	4613      	mov	r3, r2
   18182:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   18186:	f81e 6005 	ldrb.w	r6, [lr, r5]
   1818a:	d1da      	bne.n	18142 <d_print_comp+0x1f52>
   1818c:	4611      	mov	r1, r2
   1818e:	4650      	mov	r0, sl
   18190:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   18194:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18198:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
   1819c:	4798      	blx	r3
   1819e:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   181a2:	2101      	movs	r1, #1
   181a4:	2300      	movs	r3, #0
   181a6:	1850      	adds	r0, r2, r1
   181a8:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   181ac:	e7c9      	b.n	18142 <d_print_comp+0x1f52>
   181ae:	f8df 8598 	ldr.w	r8, [pc, #1432]	; 18748 <d_print_comp+0x2558>
   181b2:	f04f 0a00 	mov.w	sl, #0
   181b6:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   181ba:	f104 0b04 	add.w	fp, r4, #4
   181be:	4646      	mov	r6, r8
   181c0:	29ff      	cmp	r1, #255	; 0xff
   181c2:	f816 7d1c 	ldrb.w	r7, [r6, #-28]!
   181c6:	f002 83de 	beq.w	1a986 <d_print_comp+0x4796>
   181ca:	460b      	mov	r3, r1
   181cc:	3101      	adds	r1, #1
   181ce:	eb04 0903 	add.w	r9, r4, r3
   181d2:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   181d6:	f884 7108 	strb.w	r7, [r4, #264]	; 0x108
   181da:	f889 7004 	strb.w	r7, [r9, #4]
   181de:	46a9      	mov	r9, r5
   181e0:	e019      	b.n	18216 <d_print_comp+0x2026>
   181e2:	eb04 0c03 	add.w	ip, r4, r3
   181e6:	1c6e      	adds	r6, r5, #1
   181e8:	1c51      	adds	r1, r2, #1
   181ea:	2aff      	cmp	r2, #255	; 0xff
   181ec:	4613      	mov	r3, r2
   181ee:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   181f2:	f88c 7004 	strb.w	r7, [ip, #4]
   181f6:	f884 7108 	strb.w	r7, [r4, #264]	; 0x108
   181fa:	786d      	ldrb	r5, [r5, #1]
   181fc:	f000 8530 	beq.w	18c60 <d_print_comp+0x2a70>
   18200:	eb04 0e03 	add.w	lr, r4, r3
   18204:	4546      	cmp	r6, r8
   18206:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1820a:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
   1820e:	f88e 5004 	strb.w	r5, [lr, #4]
   18212:	f000 8774 	beq.w	190fe <d_print_comp+0x2f0e>
   18216:	1c75      	adds	r5, r6, #1
   18218:	29ff      	cmp	r1, #255	; 0xff
   1821a:	460b      	mov	r3, r1
   1821c:	7877      	ldrb	r7, [r6, #1]
   1821e:	f101 0201 	add.w	r2, r1, #1
   18222:	d1de      	bne.n	181e2 <d_print_comp+0x1ff2>
   18224:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   18228:	4658      	mov	r0, fp
   1822a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1822e:	f884 a103 	strb.w	sl, [r4, #259]	; 0x103
   18232:	4798      	blx	r3
   18234:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   18238:	2201      	movs	r2, #1
   1823a:	2300      	movs	r3, #0
   1823c:	1886      	adds	r6, r0, r2
   1823e:	f8c4 6124 	str.w	r6, [r4, #292]	; 0x124
   18242:	e7ce      	b.n	181e2 <d_print_comp+0x1ff2>
   18244:	6822      	ldr	r2, [r4, #0]
   18246:	0690      	lsls	r0, r2, #26
   18248:	f101 80f0 	bmi.w	1942c <d_print_comp+0x323c>
   1824c:	6869      	ldr	r1, [r5, #4]
   1824e:	2900      	cmp	r1, #0
   18250:	f001 80e7 	beq.w	19422 <d_print_comp+0x3232>
   18254:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
   18258:	aa18      	add	r2, sp, #96	; 0x60
   1825a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1825e:	4620      	mov	r0, r4
   18260:	9507      	str	r5, [sp, #28]
   18262:	f842 1d48 	str.w	r1, [r2, #-72]!
   18266:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
   1826a:	2200      	movs	r2, #0
   1826c:	6869      	ldr	r1, [r5, #4]
   1826e:	9309      	str	r3, [sp, #36]	; 0x24
   18270:	9208      	str	r2, [sp, #32]
   18272:	f7fd ffbd 	bl	161f0 <d_print_comp>
   18276:	9b06      	ldr	r3, [sp, #24]
   18278:	9808      	ldr	r0, [sp, #32]
   1827a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   1827e:	2800      	cmp	r0, #0
   18280:	f47e a8ac 	bne.w	163dc <d_print_comp+0x1ec>
   18284:	6826      	ldr	r6, [r4, #0]
   18286:	f016 0620 	ands.w	r6, r6, #32
   1828a:	f47e a8a7 	bne.w	163dc <d_print_comp+0x1ec>
   1828e:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   18292:	29ff      	cmp	r1, #255	; 0xff
   18294:	f003 841b 	beq.w	1bace <d_print_comp+0x58de>
   18298:	eb04 0e01 	add.w	lr, r4, r1
   1829c:	2020      	movs	r0, #32
   1829e:	3101      	adds	r1, #1
   182a0:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   182a4:	f88e 0004 	strb.w	r0, [lr, #4]
   182a8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   182ac:	2e00      	cmp	r6, #0
   182ae:	f47e a895 	bne.w	163dc <d_print_comp+0x1ec>
   182b2:	4620      	mov	r0, r4
   182b4:	4629      	mov	r1, r5
   182b6:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
   182ba:	f005 f97b 	bl	1d5b4 <d_print_function_type>
   182be:	f7fe b88d 	b.w	163dc <d_print_comp+0x1ec>
   182c2:	4620      	mov	r0, r4
   182c4:	6849      	ldr	r1, [r1, #4]
   182c6:	f7fd ff93 	bl	161f0 <d_print_comp>
   182ca:	f7fe b887 	b.w	163dc <d_print_comp+0x1ec>
   182ce:	6827      	ldr	r7, [r4, #0]
   182d0:	f017 0904 	ands.w	r9, r7, #4
   182d4:	f040 8799 	bne.w	1920a <d_print_comp+0x301a>
   182d8:	6848      	ldr	r0, [r1, #4]
   182da:	e890 0180 	ldmia.w	r0, {r7, r8}
   182de:	f1b8 0f00 	cmp.w	r8, #0
   182e2:	f43e a87b 	beq.w	163dc <d_print_comp+0x1ec>
   182e6:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   182ea:	f108 35ff 	add.w	r5, r8, #4294967295
   182ee:	f104 0a04 	add.w	sl, r4, #4
   182f2:	f005 0b01 	and.w	fp, r5, #1
   182f6:	29ff      	cmp	r1, #255	; 0xff
   182f8:	783e      	ldrb	r6, [r7, #0]
   182fa:	f003 8272 	beq.w	1b7e2 <d_print_comp+0x55f2>
   182fe:	460b      	mov	r3, r1
   18300:	3101      	adds	r1, #1
   18302:	2501      	movs	r5, #1
   18304:	18e0      	adds	r0, r4, r3
   18306:	45a8      	cmp	r8, r5
   18308:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1830c:	7106      	strb	r6, [r0, #4]
   1830e:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   18312:	f43e a863 	beq.w	163dc <d_print_comp+0x1ec>
   18316:	f1bb 0f00 	cmp.w	fp, #0
   1831a:	d011      	beq.n	18340 <d_print_comp+0x2150>
   1831c:	29ff      	cmp	r1, #255	; 0xff
   1831e:	5d7e      	ldrb	r6, [r7, r5]
   18320:	f003 82a3 	beq.w	1b86a <d_print_comp+0x567a>
   18324:	460b      	mov	r3, r1
   18326:	3101      	adds	r1, #1
   18328:	3501      	adds	r5, #1
   1832a:	eb04 0c03 	add.w	ip, r4, r3
   1832e:	45a8      	cmp	r8, r5
   18330:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18334:	f88c 6004 	strb.w	r6, [ip, #4]
   18338:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   1833c:	f43e a84e 	beq.w	163dc <d_print_comp+0x1ec>
   18340:	29ff      	cmp	r1, #255	; 0xff
   18342:	460b      	mov	r3, r1
   18344:	5d7e      	ldrb	r6, [r7, r5]
   18346:	f101 0201 	add.w	r2, r1, #1
   1834a:	f000 87ca 	beq.w	192e2 <d_print_comp+0x30f2>
   1834e:	eb04 0c03 	add.w	ip, r4, r3
   18352:	3501      	adds	r5, #1
   18354:	1c51      	adds	r1, r2, #1
   18356:	2aff      	cmp	r2, #255	; 0xff
   18358:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1835c:	4613      	mov	r3, r2
   1835e:	f88c 6004 	strb.w	r6, [ip, #4]
   18362:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   18366:	5d7e      	ldrb	r6, [r7, r5]
   18368:	d1de      	bne.n	18328 <d_print_comp+0x2138>
   1836a:	4611      	mov	r1, r2
   1836c:	4650      	mov	r0, sl
   1836e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   18372:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18376:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   1837a:	4798      	blx	r3
   1837c:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   18380:	2101      	movs	r1, #1
   18382:	2300      	movs	r3, #0
   18384:	1842      	adds	r2, r0, r1
   18386:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1838a:	e7cd      	b.n	18328 <d_print_comp+0x2138>
   1838c:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
   18390:	aa18      	add	r2, sp, #96	; 0x60
   18392:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   18396:	4620      	mov	r0, r4
   18398:	9507      	str	r5, [sp, #28]
   1839a:	f842 1d48 	str.w	r1, [r2, #-72]!
   1839e:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
   183a2:	2200      	movs	r2, #0
   183a4:	6869      	ldr	r1, [r5, #4]
   183a6:	9208      	str	r2, [sp, #32]
   183a8:	9309      	str	r3, [sp, #36]	; 0x24
   183aa:	f7fd ff21 	bl	161f0 <d_print_comp>
   183ae:	9a08      	ldr	r2, [sp, #32]
   183b0:	b91a      	cbnz	r2, 183ba <d_print_comp+0x21ca>
   183b2:	4620      	mov	r0, r4
   183b4:	4629      	mov	r1, r5
   183b6:	f003 fd55 	bl	1be64 <d_print_mod>
   183ba:	9906      	ldr	r1, [sp, #24]
   183bc:	f8c4 1118 	str.w	r1, [r4, #280]	; 0x118
   183c0:	f7fe b80c 	b.w	163dc <d_print_comp+0x1ec>
   183c4:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
   183c8:	aa18      	add	r2, sp, #96	; 0x60
   183ca:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   183ce:	4620      	mov	r0, r4
   183d0:	9507      	str	r5, [sp, #28]
   183d2:	f842 1d48 	str.w	r1, [r2, #-72]!
   183d6:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
   183da:	2200      	movs	r2, #0
   183dc:	68a9      	ldr	r1, [r5, #8]
   183de:	9208      	str	r2, [sp, #32]
   183e0:	9309      	str	r3, [sp, #36]	; 0x24
   183e2:	f7fd ff05 	bl	161f0 <d_print_comp>
   183e6:	9808      	ldr	r0, [sp, #32]
   183e8:	b918      	cbnz	r0, 183f2 <d_print_comp+0x2202>
   183ea:	4620      	mov	r0, r4
   183ec:	4629      	mov	r1, r5
   183ee:	f003 fd39 	bl	1be64 <d_print_mod>
   183f2:	9806      	ldr	r0, [sp, #24]
   183f4:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
   183f8:	f7fd bff0 	b.w	163dc <d_print_comp+0x1ec>
   183fc:	f8d4 7118 	ldr.w	r7, [r4, #280]	; 0x118
   18400:	f10d 0b60 	add.w	fp, sp, #96	; 0x60
   18404:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   18408:	2200      	movs	r2, #0
   1840a:	9107      	str	r1, [sp, #28]
   1840c:	f84b 7d48 	str.w	r7, [fp, #-72]!
   18410:	46da      	mov	sl, fp
   18412:	9700      	str	r7, [sp, #0]
   18414:	9701      	str	r7, [sp, #4]
   18416:	f8c4 b118 	str.w	fp, [r4, #280]	; 0x118
   1841a:	9208      	str	r2, [sp, #32]
   1841c:	9309      	str	r3, [sp, #36]	; 0x24
   1841e:	2f00      	cmp	r7, #0
   18420:	f003 8341 	beq.w	1baa6 <d_print_comp+0x58b6>
   18424:	687a      	ldr	r2, [r7, #4]
   18426:	f04f 0801 	mov.w	r8, #1
   1842a:	7813      	ldrb	r3, [r2, #0]
   1842c:	3b17      	subs	r3, #23
   1842e:	b2d8      	uxtb	r0, r3
   18430:	2802      	cmp	r0, #2
   18432:	d828      	bhi.n	18486 <d_print_comp+0x2296>
   18434:	463e      	mov	r6, r7
   18436:	46a4      	mov	ip, r4
   18438:	4689      	mov	r9, r1
   1843a:	e005      	b.n	18448 <d_print_comp+0x2258>
   1843c:	6872      	ldr	r2, [r6, #4]
   1843e:	7813      	ldrb	r3, [r2, #0]
   18440:	3b17      	subs	r3, #23
   18442:	b2d8      	uxtb	r0, r3
   18444:	2802      	cmp	r0, #2
   18446:	d81c      	bhi.n	18482 <d_print_comp+0x2292>
   18448:	68b5      	ldr	r5, [r6, #8]
   1844a:	ea4f 1408 	mov.w	r4, r8, lsl #4
   1844e:	af18      	add	r7, sp, #96	; 0x60
   18450:	193f      	adds	r7, r7, r4
   18452:	b99d      	cbnz	r5, 1847c <d_print_comp+0x228c>
   18454:	f1b8 0f03 	cmp.w	r8, #3
   18458:	f1a7 0548 	sub.w	r5, r7, #72	; 0x48
   1845c:	f108 0801 	add.w	r8, r8, #1
   18460:	f202 86b3 	bhi.w	1b1ca <d_print_comp+0x4fda>
   18464:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   18468:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1846c:	f847 ac48 	str.w	sl, [r7, #-72]
   18470:	eb0b 0a04 	add.w	sl, fp, r4
   18474:	2401      	movs	r4, #1
   18476:	f8cc a118 	str.w	sl, [ip, #280]	; 0x118
   1847a:	60b4      	str	r4, [r6, #8]
   1847c:	6836      	ldr	r6, [r6, #0]
   1847e:	2e00      	cmp	r6, #0
   18480:	d1dc      	bne.n	1843c <d_print_comp+0x224c>
   18482:	4664      	mov	r4, ip
   18484:	464d      	mov	r5, r9
   18486:	68a9      	ldr	r1, [r5, #8]
   18488:	4620      	mov	r0, r4
   1848a:	f7fd feb1 	bl	161f0 <d_print_comp>
   1848e:	9f00      	ldr	r7, [sp, #0]
   18490:	9908      	ldr	r1, [sp, #32]
   18492:	f8c4 7118 	str.w	r7, [r4, #280]	; 0x118
   18496:	2900      	cmp	r1, #0
   18498:	f47d afa0 	bne.w	163dc <d_print_comp+0x1ec>
   1849c:	f1b8 0f01 	cmp.w	r8, #1
   184a0:	d02a      	beq.n	184f8 <d_print_comp+0x2308>
   184a2:	eb0b 1708 	add.w	r7, fp, r8, lsl #4
   184a6:	f108 36ff 	add.w	r6, r8, #4294967295
   184aa:	4620      	mov	r0, r4
   184ac:	f008 0801 	and.w	r8, r8, #1
   184b0:	f857 1c0c 	ldr.w	r1, [r7, #-12]
   184b4:	3f10      	subs	r7, #16
   184b6:	f003 fcd5 	bl	1be64 <d_print_mod>
   184ba:	2e01      	cmp	r6, #1
   184bc:	d019      	beq.n	184f2 <d_print_comp+0x2302>
   184be:	f1b8 0f00 	cmp.w	r8, #0
   184c2:	d008      	beq.n	184d6 <d_print_comp+0x22e6>
   184c4:	f857 1c0c 	ldr.w	r1, [r7, #-12]
   184c8:	4620      	mov	r0, r4
   184ca:	3e01      	subs	r6, #1
   184cc:	f003 fcca 	bl	1be64 <d_print_mod>
   184d0:	3f10      	subs	r7, #16
   184d2:	2e01      	cmp	r6, #1
   184d4:	d00d      	beq.n	184f2 <d_print_comp+0x2302>
   184d6:	f857 1c0c 	ldr.w	r1, [r7, #-12]
   184da:	4620      	mov	r0, r4
   184dc:	f003 fcc2 	bl	1be64 <d_print_mod>
   184e0:	3e02      	subs	r6, #2
   184e2:	f857 1c1c 	ldr.w	r1, [r7, #-28]
   184e6:	4620      	mov	r0, r4
   184e8:	f003 fcbc 	bl	1be64 <d_print_mod>
   184ec:	3f20      	subs	r7, #32
   184ee:	2e01      	cmp	r6, #1
   184f0:	d1f1      	bne.n	184d6 <d_print_comp+0x22e6>
   184f2:	f8d4 7118 	ldr.w	r7, [r4, #280]	; 0x118
   184f6:	9701      	str	r7, [sp, #4]
   184f8:	4620      	mov	r0, r4
   184fa:	4629      	mov	r1, r5
   184fc:	9a01      	ldr	r2, [sp, #4]
   184fe:	f004 ff6b 	bl	1d3d8 <d_print_array_type>
   18502:	f7fd bf6b 	b.w	163dc <d_print_comp+0x1ec>
   18506:	f9b1 300a 	ldrsh.w	r3, [r1, #10]
   1850a:	2b00      	cmp	r3, #0
   1850c:	f040 87b0 	bne.w	19470 <d_print_comp+0x3280>
   18510:	6869      	ldr	r1, [r5, #4]
   18512:	4b8c      	ldr	r3, [pc, #560]	; (18744 <d_print_comp+0x2554>)
   18514:	684a      	ldr	r2, [r1, #4]
   18516:	429a      	cmp	r2, r3
   18518:	bf08      	it	eq
   1851a:	f8d4 1104 	ldreq.w	r1, [r4, #260]	; 0x104
   1851e:	d011      	beq.n	18544 <d_print_comp+0x2354>
   18520:	4620      	mov	r0, r4
   18522:	f7fd fe65 	bl	161f0 <d_print_comp>
   18526:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1852a:	1c59      	adds	r1, r3, #1
   1852c:	2bff      	cmp	r3, #255	; 0xff
   1852e:	f002 879b 	beq.w	1b468 <d_print_comp+0x5278>
   18532:	eb04 0e03 	add.w	lr, r4, r3
   18536:	2020      	movs	r0, #32
   18538:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1853c:	f88e 0004 	strb.w	r0, [lr, #4]
   18540:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   18544:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
   18548:	2b00      	cmp	r3, #0
   1854a:	f000 85f2 	beq.w	19132 <d_print_comp+0x2f42>
   1854e:	29ff      	cmp	r1, #255	; 0xff
   18550:	f003 8063 	beq.w	1b61a <d_print_comp+0x542a>
   18554:	eb04 0c01 	add.w	ip, r4, r1
   18558:	3101      	adds	r1, #1
   1855a:	235f      	movs	r3, #95	; 0x5f
   1855c:	29ff      	cmp	r1, #255	; 0xff
   1855e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18562:	f88c 3004 	strb.w	r3, [ip, #4]
   18566:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1856a:	f003 8043 	beq.w	1b5f4 <d_print_comp+0x5404>
   1856e:	eb04 0c01 	add.w	ip, r4, r1
   18572:	3101      	adds	r1, #1
   18574:	2341      	movs	r3, #65	; 0x41
   18576:	29ff      	cmp	r1, #255	; 0xff
   18578:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1857c:	f88c 3004 	strb.w	r3, [ip, #4]
   18580:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   18584:	f003 8023 	beq.w	1b5ce <d_print_comp+0x53de>
   18588:	eb04 0c01 	add.w	ip, r4, r1
   1858c:	3101      	adds	r1, #1
   1858e:	2563      	movs	r5, #99	; 0x63
   18590:	29ff      	cmp	r1, #255	; 0xff
   18592:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18596:	f88c 5004 	strb.w	r5, [ip, #4]
   1859a:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
   1859e:	f003 8004 	beq.w	1b5aa <d_print_comp+0x53ba>
   185a2:	eb04 0c01 	add.w	ip, r4, r1
   185a6:	3101      	adds	r1, #1
   185a8:	2363      	movs	r3, #99	; 0x63
   185aa:	29ff      	cmp	r1, #255	; 0xff
   185ac:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   185b0:	f88c 3004 	strb.w	r3, [ip, #4]
   185b4:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   185b8:	f002 87e4 	beq.w	1b584 <d_print_comp+0x5394>
   185bc:	eb04 0c01 	add.w	ip, r4, r1
   185c0:	3101      	adds	r1, #1
   185c2:	2075      	movs	r0, #117	; 0x75
   185c4:	29ff      	cmp	r1, #255	; 0xff
   185c6:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   185ca:	f88c 0004 	strb.w	r0, [ip, #4]
   185ce:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   185d2:	f000 82f7 	beq.w	18bc4 <d_print_comp+0x29d4>
   185d6:	1c4a      	adds	r2, r1, #1
   185d8:	1861      	adds	r1, r4, r1
   185da:	206d      	movs	r0, #109	; 0x6d
   185dc:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   185e0:	7108      	strb	r0, [r1, #4]
   185e2:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   185e6:	f7fd bef9 	b.w	163dc <d_print_comp+0x1ec>
   185ea:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   185ee:	29ff      	cmp	r1, #255	; 0xff
   185f0:	f001 8456 	beq.w	19ea0 <d_print_comp+0x3cb0>
   185f4:	eb04 0c01 	add.w	ip, r4, r1
   185f8:	3101      	adds	r1, #1
   185fa:	2076      	movs	r0, #118	; 0x76
   185fc:	29ff      	cmp	r1, #255	; 0xff
   185fe:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18602:	f88c 0004 	strb.w	r0, [ip, #4]
   18606:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1860a:	f001 8436 	beq.w	19e7a <d_print_comp+0x3c8a>
   1860e:	eb04 0e01 	add.w	lr, r4, r1
   18612:	3101      	adds	r1, #1
   18614:	2074      	movs	r0, #116	; 0x74
   18616:	29ff      	cmp	r1, #255	; 0xff
   18618:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1861c:	f88e 0004 	strb.w	r0, [lr, #4]
   18620:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   18624:	f001 8416 	beq.w	19e54 <d_print_comp+0x3c64>
   18628:	eb04 0c01 	add.w	ip, r4, r1
   1862c:	3101      	adds	r1, #1
   1862e:	2061      	movs	r0, #97	; 0x61
   18630:	29ff      	cmp	r1, #255	; 0xff
   18632:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18636:	f88c 0004 	strb.w	r0, [ip, #4]
   1863a:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1863e:	f001 83f6 	beq.w	19e2e <d_print_comp+0x3c3e>
   18642:	eb04 0e01 	add.w	lr, r4, r1
   18646:	3101      	adds	r1, #1
   18648:	2062      	movs	r0, #98	; 0x62
   1864a:	29ff      	cmp	r1, #255	; 0xff
   1864c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18650:	f88e 0004 	strb.w	r0, [lr, #4]
   18654:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   18658:	f001 83d6 	beq.w	19e08 <d_print_comp+0x3c18>
   1865c:	eb04 0c01 	add.w	ip, r4, r1
   18660:	3101      	adds	r1, #1
   18662:	206c      	movs	r0, #108	; 0x6c
   18664:	29ff      	cmp	r1, #255	; 0xff
   18666:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1866a:	f88c 0004 	strb.w	r0, [ip, #4]
   1866e:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   18672:	f001 83b6 	beq.w	19de2 <d_print_comp+0x3bf2>
   18676:	eb04 0e01 	add.w	lr, r4, r1
   1867a:	3101      	adds	r1, #1
   1867c:	2065      	movs	r0, #101	; 0x65
   1867e:	29ff      	cmp	r1, #255	; 0xff
   18680:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18684:	f88e 0004 	strb.w	r0, [lr, #4]
   18688:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1868c:	f001 8396 	beq.w	19dbc <d_print_comp+0x3bcc>
   18690:	eb04 0c01 	add.w	ip, r4, r1
   18694:	3101      	adds	r1, #1
   18696:	2020      	movs	r0, #32
   18698:	29ff      	cmp	r1, #255	; 0xff
   1869a:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1869e:	f88c 0004 	strb.w	r0, [ip, #4]
   186a2:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   186a6:	f001 8376 	beq.w	19d96 <d_print_comp+0x3ba6>
   186aa:	eb04 0e01 	add.w	lr, r4, r1
   186ae:	3101      	adds	r1, #1
   186b0:	2066      	movs	r0, #102	; 0x66
   186b2:	29ff      	cmp	r1, #255	; 0xff
   186b4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   186b8:	f88e 0004 	strb.w	r0, [lr, #4]
   186bc:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   186c0:	f001 830a 	beq.w	19cd8 <d_print_comp+0x3ae8>
   186c4:	eb04 0c01 	add.w	ip, r4, r1
   186c8:	3101      	adds	r1, #1
   186ca:	206f      	movs	r0, #111	; 0x6f
   186cc:	29ff      	cmp	r1, #255	; 0xff
   186ce:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   186d2:	f88c 0004 	strb.w	r0, [ip, #4]
   186d6:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   186da:	f001 82ea 	beq.w	19cb2 <d_print_comp+0x3ac2>
   186de:	eb04 0e01 	add.w	lr, r4, r1
   186e2:	3101      	adds	r1, #1
   186e4:	2072      	movs	r0, #114	; 0x72
   186e6:	29ff      	cmp	r1, #255	; 0xff
   186e8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   186ec:	f88e 0004 	strb.w	r0, [lr, #4]
   186f0:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   186f4:	f000 81c6 	beq.w	18a84 <d_print_comp+0x2894>
   186f8:	1c48      	adds	r0, r1, #1
   186fa:	eb04 0c01 	add.w	ip, r4, r1
   186fe:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   18702:	2120      	movs	r1, #32
   18704:	4620      	mov	r0, r4
   18706:	f88c 1004 	strb.w	r1, [ip, #4]
   1870a:	f884 1108 	strb.w	r1, [r4, #264]	; 0x108
   1870e:	6869      	ldr	r1, [r5, #4]
   18710:	f7fd fd6e 	bl	161f0 <d_print_comp>
   18714:	f7fd be62 	b.w	163dc <d_print_comp+0x1ec>
   18718:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1871c:	1c48      	adds	r0, r1, #1
   1871e:	29ff      	cmp	r1, #255	; 0xff
   18720:	f001 86d5 	beq.w	1a4ce <d_print_comp+0x42de>
   18724:	eb04 0e01 	add.w	lr, r4, r1
   18728:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   1872c:	217e      	movs	r1, #126	; 0x7e
   1872e:	4620      	mov	r0, r4
   18730:	f88e 1004 	strb.w	r1, [lr, #4]
   18734:	f884 1108 	strb.w	r1, [r4, #264]	; 0x108
   18738:	68a9      	ldr	r1, [r5, #8]
   1873a:	f7fd fd59 	bl	161f0 <d_print_comp>
   1873e:	f7fd be4d 	b.w	163dc <d_print_comp+0x1ec>
   18742:	bf00      	nop
   18744:	0002b330 	.word	0x0002b330
   18748:	0002b9a4 	.word	0x0002b9a4
   1874c:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   18750:	29ff      	cmp	r1, #255	; 0xff
   18752:	f001 87c5 	beq.w	1a6e0 <d_print_comp+0x44f0>
   18756:	1862      	adds	r2, r4, r1
   18758:	3101      	adds	r1, #1
   1875a:	206a      	movs	r0, #106	; 0x6a
   1875c:	29ff      	cmp	r1, #255	; 0xff
   1875e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18762:	7110      	strb	r0, [r2, #4]
   18764:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   18768:	f001 87a7 	beq.w	1a6ba <d_print_comp+0x44ca>
   1876c:	eb04 0e01 	add.w	lr, r4, r1
   18770:	3101      	adds	r1, #1
   18772:	2361      	movs	r3, #97	; 0x61
   18774:	29ff      	cmp	r1, #255	; 0xff
   18776:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1877a:	f88e 3004 	strb.w	r3, [lr, #4]
   1877e:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   18782:	f001 8787 	beq.w	1a694 <d_print_comp+0x44a4>
   18786:	eb04 0c01 	add.w	ip, r4, r1
   1878a:	3101      	adds	r1, #1
   1878c:	2376      	movs	r3, #118	; 0x76
   1878e:	29ff      	cmp	r1, #255	; 0xff
   18790:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18794:	f88c 3004 	strb.w	r3, [ip, #4]
   18798:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1879c:	f001 8767 	beq.w	1a66e <d_print_comp+0x447e>
   187a0:	eb04 0e01 	add.w	lr, r4, r1
   187a4:	3101      	adds	r1, #1
   187a6:	2361      	movs	r3, #97	; 0x61
   187a8:	29ff      	cmp	r1, #255	; 0xff
   187aa:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   187ae:	f88e 3004 	strb.w	r3, [lr, #4]
   187b2:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   187b6:	f001 8747 	beq.w	1a648 <d_print_comp+0x4458>
   187ba:	eb04 0c01 	add.w	ip, r4, r1
   187be:	3101      	adds	r1, #1
   187c0:	2320      	movs	r3, #32
   187c2:	29ff      	cmp	r1, #255	; 0xff
   187c4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   187c8:	f88c 3004 	strb.w	r3, [ip, #4]
   187cc:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   187d0:	f001 8727 	beq.w	1a622 <d_print_comp+0x4432>
   187d4:	eb04 0e01 	add.w	lr, r4, r1
   187d8:	3101      	adds	r1, #1
   187da:	2372      	movs	r3, #114	; 0x72
   187dc:	29ff      	cmp	r1, #255	; 0xff
   187de:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   187e2:	f88e 3004 	strb.w	r3, [lr, #4]
   187e6:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   187ea:	f001 8707 	beq.w	1a5fc <d_print_comp+0x440c>
   187ee:	eb04 0c01 	add.w	ip, r4, r1
   187f2:	3101      	adds	r1, #1
   187f4:	2365      	movs	r3, #101	; 0x65
   187f6:	29ff      	cmp	r1, #255	; 0xff
   187f8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   187fc:	f88c 3004 	strb.w	r3, [ip, #4]
   18800:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   18804:	f001 86e7 	beq.w	1a5d6 <d_print_comp+0x43e6>
   18808:	eb04 0e01 	add.w	lr, r4, r1
   1880c:	3101      	adds	r1, #1
   1880e:	2373      	movs	r3, #115	; 0x73
   18810:	29ff      	cmp	r1, #255	; 0xff
   18812:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18816:	f88e 3004 	strb.w	r3, [lr, #4]
   1881a:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1881e:	f001 86c7 	beq.w	1a5b0 <d_print_comp+0x43c0>
   18822:	eb04 0c01 	add.w	ip, r4, r1
   18826:	3101      	adds	r1, #1
   18828:	236f      	movs	r3, #111	; 0x6f
   1882a:	29ff      	cmp	r1, #255	; 0xff
   1882c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18830:	f88c 3004 	strb.w	r3, [ip, #4]
   18834:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   18838:	f001 86a7 	beq.w	1a58a <d_print_comp+0x439a>
   1883c:	eb04 0e01 	add.w	lr, r4, r1
   18840:	3101      	adds	r1, #1
   18842:	2375      	movs	r3, #117	; 0x75
   18844:	29ff      	cmp	r1, #255	; 0xff
   18846:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1884a:	f88e 3004 	strb.w	r3, [lr, #4]
   1884e:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   18852:	f001 8687 	beq.w	1a564 <d_print_comp+0x4374>
   18856:	eb04 0c01 	add.w	ip, r4, r1
   1885a:	3101      	adds	r1, #1
   1885c:	2372      	movs	r3, #114	; 0x72
   1885e:	29ff      	cmp	r1, #255	; 0xff
   18860:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18864:	f88c 3004 	strb.w	r3, [ip, #4]
   18868:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1886c:	f001 8667 	beq.w	1a53e <d_print_comp+0x434e>
   18870:	eb04 0e01 	add.w	lr, r4, r1
   18874:	3101      	adds	r1, #1
   18876:	2363      	movs	r3, #99	; 0x63
   18878:	29ff      	cmp	r1, #255	; 0xff
   1887a:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1887e:	f88e 3004 	strb.w	r3, [lr, #4]
   18882:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   18886:	f001 8647 	beq.w	1a518 <d_print_comp+0x4328>
   1888a:	eb04 0c01 	add.w	ip, r4, r1
   1888e:	3101      	adds	r1, #1
   18890:	2365      	movs	r3, #101	; 0x65
   18892:	29ff      	cmp	r1, #255	; 0xff
   18894:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18898:	f88c 3004 	strb.w	r3, [ip, #4]
   1889c:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   188a0:	f000 8125 	beq.w	18aee <d_print_comp+0x28fe>
   188a4:	1c48      	adds	r0, r1, #1
   188a6:	eb04 0e01 	add.w	lr, r4, r1
   188aa:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   188ae:	2120      	movs	r1, #32
   188b0:	4620      	mov	r0, r4
   188b2:	f88e 1004 	strb.w	r1, [lr, #4]
   188b6:	f884 1108 	strb.w	r1, [r4, #264]	; 0x108
   188ba:	6869      	ldr	r1, [r5, #4]
   188bc:	f7fd fc98 	bl	161f0 <d_print_comp>
   188c0:	f7fd bd8c 	b.w	163dc <d_print_comp+0x1ec>
   188c4:	684a      	ldr	r2, [r1, #4]
   188c6:	2600      	movs	r6, #0
   188c8:	f892 e000 	ldrb.w	lr, [r2]
   188cc:	f1be 0f23 	cmp.w	lr, #35	; 0x23
   188d0:	d108      	bne.n	188e4 <d_print_comp+0x26f4>
   188d2:	6856      	ldr	r6, [r2, #4]
   188d4:	7c36      	ldrb	r6, [r6, #16]
   188d6:	b12e      	cbz	r6, 188e4 <d_print_comp+0x26f4>
   188d8:	2e06      	cmp	r6, #6
   188da:	f242 8589 	bls.w	1b3f0 <d_print_comp+0x5200>
   188de:	2e07      	cmp	r6, #7
   188e0:	f002 8569 	beq.w	1b3b6 <d_print_comp+0x51c6>
   188e4:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   188e8:	1c48      	adds	r0, r1, #1
   188ea:	29ff      	cmp	r1, #255	; 0xff
   188ec:	f002 84c9 	beq.w	1b282 <d_print_comp+0x5092>
   188f0:	eb04 0c01 	add.w	ip, r4, r1
   188f4:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   188f8:	2128      	movs	r1, #40	; 0x28
   188fa:	4620      	mov	r0, r4
   188fc:	f88c 1004 	strb.w	r1, [ip, #4]
   18900:	f884 1108 	strb.w	r1, [r4, #264]	; 0x108
   18904:	6869      	ldr	r1, [r5, #4]
   18906:	f7fd fc73 	bl	161f0 <d_print_comp>
   1890a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1890e:	1c59      	adds	r1, r3, #1
   18910:	2bff      	cmp	r3, #255	; 0xff
   18912:	f002 84a3 	beq.w	1b25c <d_print_comp+0x506c>
   18916:	eb04 0e03 	add.w	lr, r4, r3
   1891a:	2229      	movs	r2, #41	; 0x29
   1891c:	f884 2108 	strb.w	r2, [r4, #264]	; 0x108
   18920:	f88e 2004 	strb.w	r2, [lr, #4]
   18924:	7828      	ldrb	r0, [r5, #0]
   18926:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1892a:	2836      	cmp	r0, #54	; 0x36
   1892c:	f002 85f6 	beq.w	1b51c <d_print_comp+0x532c>
   18930:	2e08      	cmp	r6, #8
   18932:	f002 85ca 	beq.w	1b4ca <d_print_comp+0x52da>
   18936:	4620      	mov	r0, r4
   18938:	68a9      	ldr	r1, [r5, #8]
   1893a:	f7fd fc59 	bl	161f0 <d_print_comp>
   1893e:	f7fd bd4d 	b.w	163dc <d_print_comp+0x1ec>
   18942:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   18946:	1d20      	adds	r0, r4, #4
   18948:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1894c:	f884 a103 	strb.w	sl, [r4, #259]	; 0x103
   18950:	4798      	blx	r3
   18952:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   18956:	2301      	movs	r3, #1
   18958:	2100      	movs	r1, #0
   1895a:	18c2      	adds	r2, r0, r3
   1895c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   18960:	f7fd be2b 	b.w	165ba <d_print_comp+0x3ca>
   18964:	2600      	movs	r6, #0
   18966:	f8d4 710c 	ldr.w	r7, [r4, #268]	; 0x10c
   1896a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1896e:	1d20      	adds	r0, r4, #4
   18970:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   18974:	47b8      	blx	r7
   18976:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1897a:	2201      	movs	r2, #1
   1897c:	4631      	mov	r1, r6
   1897e:	189f      	adds	r7, r3, r2
   18980:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
   18984:	f7fd bfc1 	b.w	1690a <d_print_comp+0x71a>
   18988:	2600      	movs	r6, #0
   1898a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1898e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18992:	1d20      	adds	r0, r4, #4
   18994:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   18998:	4798      	blx	r3
   1899a:	f8d4 7124 	ldr.w	r7, [r4, #292]	; 0x124
   1899e:	2201      	movs	r2, #1
   189a0:	4631      	mov	r1, r6
   189a2:	18bb      	adds	r3, r7, r2
   189a4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   189a8:	f7ff ba1f 	b.w	17dea <d_print_comp+0x1bfa>
   189ac:	2600      	movs	r6, #0
   189ae:	1d20      	adds	r0, r4, #4
   189b0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   189b4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   189b8:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   189bc:	4798      	blx	r3
   189be:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   189c2:	2001      	movs	r0, #1
   189c4:	4631      	mov	r1, r6
   189c6:	181a      	adds	r2, r3, r0
   189c8:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   189cc:	f7ff b906 	b.w	17bdc <d_print_comp+0x19ec>
   189d0:	2600      	movs	r6, #0
   189d2:	1d20      	adds	r0, r4, #4
   189d4:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   189d8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   189dc:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   189e0:	4798      	blx	r3
   189e2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   189e6:	2001      	movs	r0, #1
   189e8:	4631      	mov	r1, r6
   189ea:	181a      	adds	r2, r3, r0
   189ec:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   189f0:	f7fe bf59 	b.w	178a6 <d_print_comp+0x16b6>
   189f4:	2600      	movs	r6, #0
   189f6:	1d20      	adds	r0, r4, #4
   189f8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   189fc:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18a00:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   18a04:	4798      	blx	r3
   18a06:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   18a0a:	2001      	movs	r0, #1
   18a0c:	4631      	mov	r1, r6
   18a0e:	1813      	adds	r3, r2, r0
   18a10:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18a14:	f7ff bb42 	b.w	1809c <d_print_comp+0x1eac>
   18a18:	2600      	movs	r6, #0
   18a1a:	1d20      	adds	r0, r4, #4
   18a1c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   18a20:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18a24:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   18a28:	4798      	blx	r3
   18a2a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18a2e:	2001      	movs	r0, #1
   18a30:	4631      	mov	r1, r6
   18a32:	181a      	adds	r2, r3, r0
   18a34:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   18a38:	f7fe bc79 	b.w	1732e <d_print_comp+0x113e>
   18a3c:	2600      	movs	r6, #0
   18a3e:	1d20      	adds	r0, r4, #4
   18a40:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   18a44:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18a48:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   18a4c:	4798      	blx	r3
   18a4e:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   18a52:	2001      	movs	r0, #1
   18a54:	4631      	mov	r1, r6
   18a56:	1813      	adds	r3, r2, r0
   18a58:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18a5c:	f7fe bd4c 	b.w	174f8 <d_print_comp+0x1308>
   18a60:	2600      	movs	r6, #0
   18a62:	1d20      	adds	r0, r4, #4
   18a64:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   18a68:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18a6c:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   18a70:	4798      	blx	r3
   18a72:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   18a76:	2001      	movs	r0, #1
   18a78:	4631      	mov	r1, r6
   18a7a:	1813      	adds	r3, r2, r0
   18a7c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18a80:	f7ff b800 	b.w	17a84 <d_print_comp+0x1894>
   18a84:	2600      	movs	r6, #0
   18a86:	1d20      	adds	r0, r4, #4
   18a88:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   18a8c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18a90:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   18a94:	4798      	blx	r3
   18a96:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   18a9a:	2001      	movs	r0, #1
   18a9c:	4631      	mov	r1, r6
   18a9e:	1813      	adds	r3, r2, r0
   18aa0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18aa4:	e629      	b.n	186fa <d_print_comp+0x250a>
   18aa6:	2600      	movs	r6, #0
   18aa8:	1d20      	adds	r0, r4, #4
   18aaa:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18aae:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   18ab2:	f8d4 710c 	ldr.w	r7, [r4, #268]	; 0x10c
   18ab6:	47b8      	blx	r7
   18ab8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18abc:	2001      	movs	r0, #1
   18abe:	4631      	mov	r1, r6
   18ac0:	181a      	adds	r2, r3, r0
   18ac2:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   18ac6:	f7fd bf00 	b.w	168ca <d_print_comp+0x6da>
   18aca:	2600      	movs	r6, #0
   18acc:	f8d4 710c 	ldr.w	r7, [r4, #268]	; 0x10c
   18ad0:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18ad4:	1d20      	adds	r0, r4, #4
   18ad6:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   18ada:	47b8      	blx	r7
   18adc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18ae0:	2201      	movs	r2, #1
   18ae2:	4631      	mov	r1, r6
   18ae4:	189f      	adds	r7, r3, r2
   18ae6:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
   18aea:	f7fe b946 	b.w	16d7a <d_print_comp+0xb8a>
   18aee:	2600      	movs	r6, #0
   18af0:	1d20      	adds	r0, r4, #4
   18af2:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   18af6:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18afa:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   18afe:	4798      	blx	r3
   18b00:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18b04:	2001      	movs	r0, #1
   18b06:	4631      	mov	r1, r6
   18b08:	181a      	adds	r2, r3, r0
   18b0a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   18b0e:	e6ca      	b.n	188a6 <d_print_comp+0x26b6>
   18b10:	2600      	movs	r6, #0
   18b12:	1d20      	adds	r0, r4, #4
   18b14:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   18b18:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18b1c:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   18b20:	4798      	blx	r3
   18b22:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   18b26:	2001      	movs	r0, #1
   18b28:	4631      	mov	r1, r6
   18b2a:	1813      	adds	r3, r2, r0
   18b2c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18b30:	f7fe b832 	b.w	16b98 <d_print_comp+0x9a8>
   18b34:	2600      	movs	r6, #0
   18b36:	1d20      	adds	r0, r4, #4
   18b38:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   18b3c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18b40:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   18b44:	4798      	blx	r3
   18b46:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18b4a:	2201      	movs	r2, #1
   18b4c:	4631      	mov	r1, r6
   18b4e:	1898      	adds	r0, r3, r2
   18b50:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   18b54:	f7fe b89c 	b.w	16c90 <d_print_comp+0xaa0>
   18b58:	2600      	movs	r6, #0
   18b5a:	1d20      	adds	r0, r4, #4
   18b5c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   18b60:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18b64:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   18b68:	4798      	blx	r3
   18b6a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18b6e:	2001      	movs	r0, #1
   18b70:	4631      	mov	r1, r6
   18b72:	181a      	adds	r2, r3, r0
   18b74:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   18b78:	f7fd bc9a 	b.w	164b0 <d_print_comp+0x2c0>
   18b7c:	2600      	movs	r6, #0
   18b7e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   18b82:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18b86:	1d20      	adds	r0, r4, #4
   18b88:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   18b8c:	4798      	blx	r3
   18b8e:	f8d4 7124 	ldr.w	r7, [r4, #292]	; 0x124
   18b92:	2201      	movs	r2, #1
   18b94:	4631      	mov	r1, r6
   18b96:	18bb      	adds	r3, r7, r2
   18b98:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18b9c:	f7fd bdc2 	b.w	16724 <d_print_comp+0x534>
   18ba0:	2600      	movs	r6, #0
   18ba2:	1d20      	adds	r0, r4, #4
   18ba4:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   18ba8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18bac:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   18bb0:	4798      	blx	r3
   18bb2:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   18bb6:	2001      	movs	r0, #1
   18bb8:	4631      	mov	r1, r6
   18bba:	1813      	adds	r3, r2, r0
   18bbc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   18bc0:	f7fe ba96 	b.w	170f0 <d_print_comp+0xf00>
   18bc4:	2500      	movs	r5, #0
   18bc6:	1d20      	adds	r0, r4, #4
   18bc8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   18bcc:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18bd0:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   18bd4:	4798      	blx	r3
   18bd6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18bda:	2201      	movs	r2, #1
   18bdc:	4629      	mov	r1, r5
   18bde:	1898      	adds	r0, r3, r2
   18be0:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   18be4:	e4f8      	b.n	185d8 <d_print_comp+0x23e8>
   18be6:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   18bea:	1d20      	adds	r0, r4, #4
   18bec:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18bf0:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   18bf4:	4798      	blx	r3
   18bf6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18bfa:	2201      	movs	r2, #1
   18bfc:	4631      	mov	r1, r6
   18bfe:	1898      	adds	r0, r3, r2
   18c00:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   18c04:	f7ff b81b 	b.w	17c3e <d_print_comp+0x1a4e>
   18c08:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   18c0c:	29ff      	cmp	r1, #255	; 0xff
   18c0e:	f000 8524 	beq.w	1965a <d_print_comp+0x346a>
   18c12:	eb04 0c01 	add.w	ip, r4, r1
   18c16:	3101      	adds	r1, #1
   18c18:	202c      	movs	r0, #44	; 0x2c
   18c1a:	29ff      	cmp	r1, #255	; 0xff
   18c1c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18c20:	f88c 0004 	strb.w	r0, [ip, #4]
   18c24:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   18c28:	d00a      	beq.n	18c40 <d_print_comp+0x2a50>
   18c2a:	1c4b      	adds	r3, r1, #1
   18c2c:	eb04 0e01 	add.w	lr, r4, r1
   18c30:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   18c34:	f884 9108 	strb.w	r9, [r4, #264]	; 0x108
   18c38:	f88e 9004 	strb.w	r9, [lr, #4]
   18c3c:	f7fd bca1 	b.w	16582 <d_print_comp+0x392>
   18c40:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   18c44:	1d20      	adds	r0, r4, #4
   18c46:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18c4a:	f884 a103 	strb.w	sl, [r4, #259]	; 0x103
   18c4e:	4798      	blx	r3
   18c50:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   18c54:	2301      	movs	r3, #1
   18c56:	2100      	movs	r1, #0
   18c58:	18c2      	adds	r2, r0, r3
   18c5a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   18c5e:	e7e5      	b.n	18c2c <d_print_comp+0x2a3c>
   18c60:	4611      	mov	r1, r2
   18c62:	4658      	mov	r0, fp
   18c64:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   18c68:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18c6c:	f884 a103 	strb.w	sl, [r4, #259]	; 0x103
   18c70:	4798      	blx	r3
   18c72:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   18c76:	2101      	movs	r1, #1
   18c78:	2300      	movs	r3, #0
   18c7a:	1850      	adds	r0, r2, r1
   18c7c:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   18c80:	f7ff babe 	b.w	18200 <d_print_comp+0x2010>
   18c84:	4611      	mov	r1, r2
   18c86:	4650      	mov	r0, sl
   18c88:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   18c8c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18c90:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   18c94:	4798      	blx	r3
   18c96:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   18c9a:	2101      	movs	r1, #1
   18c9c:	2300      	movs	r3, #0
   18c9e:	1842      	adds	r2, r0, r1
   18ca0:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   18ca4:	f7fe b949 	b.w	16f3a <d_print_comp+0xd4a>
   18ca8:	4611      	mov	r1, r2
   18caa:	4658      	mov	r0, fp
   18cac:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   18cb0:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18cb4:	f884 a103 	strb.w	sl, [r4, #259]	; 0x103
   18cb8:	4798      	blx	r3
   18cba:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   18cbe:	2101      	movs	r1, #1
   18cc0:	2300      	movs	r3, #0
   18cc2:	1850      	adds	r0, r2, r1
   18cc4:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   18cc8:	f7fd bead 	b.w	16a26 <d_print_comp+0x836>
   18ccc:	4611      	mov	r1, r2
   18cce:	4658      	mov	r0, fp
   18cd0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   18cd4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18cd8:	f884 a103 	strb.w	sl, [r4, #259]	; 0x103
   18cdc:	4798      	blx	r3
   18cde:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   18ce2:	2101      	movs	r1, #1
   18ce4:	2300      	movs	r3, #0
   18ce6:	1842      	adds	r2, r0, r1
   18ce8:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   18cec:	f7fe bc2d 	b.w	1754a <d_print_comp+0x135a>
   18cf0:	4611      	mov	r1, r2
   18cf2:	4650      	mov	r0, sl
   18cf4:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   18cf8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18cfc:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   18d00:	4798      	blx	r3
   18d02:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   18d06:	2101      	movs	r1, #1
   18d08:	2300      	movs	r3, #0
   18d0a:	1850      	adds	r0, r2, r1
   18d0c:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   18d10:	f7fe bdf5 	b.w	178fe <d_print_comp+0x170e>
   18d14:	4611      	mov	r1, r2
   18d16:	4658      	mov	r0, fp
   18d18:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   18d1c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18d20:	f884 a103 	strb.w	sl, [r4, #259]	; 0x103
   18d24:	4798      	blx	r3
   18d26:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   18d2a:	2101      	movs	r1, #1
   18d2c:	2300      	movs	r3, #0
   18d2e:	1850      	adds	r0, r2, r1
   18d30:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   18d34:	f7fe becf 	b.w	17ad6 <d_print_comp+0x18e6>
   18d38:	4611      	mov	r1, r2
   18d3a:	4658      	mov	r0, fp
   18d3c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   18d40:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18d44:	f884 a103 	strb.w	sl, [r4, #259]	; 0x103
   18d48:	4798      	blx	r3
   18d4a:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   18d4e:	2101      	movs	r1, #1
   18d50:	2300      	movs	r3, #0
   18d52:	1842      	adds	r2, r0, r1
   18d54:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   18d58:	f7fe b9f3 	b.w	17142 <d_print_comp+0xf52>
   18d5c:	1c4a      	adds	r2, r1, #1
   18d5e:	29ff      	cmp	r1, #255	; 0xff
   18d60:	f001 8274 	beq.w	1a24c <d_print_comp+0x405c>
   18d64:	1861      	adds	r1, r4, r1
   18d66:	207d      	movs	r0, #125	; 0x7d
   18d68:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   18d6c:	7108      	strb	r0, [r1, #4]
   18d6e:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   18d72:	f7fd bb33 	b.w	163dc <d_print_comp+0x1ec>
   18d76:	1c4a      	adds	r2, r1, #1
   18d78:	29ff      	cmp	r1, #255	; 0xff
   18d7a:	f001 87b7 	beq.w	1acec <d_print_comp+0x4afc>
   18d7e:	1861      	adds	r1, r4, r1
   18d80:	207d      	movs	r0, #125	; 0x7d
   18d82:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   18d86:	7108      	strb	r0, [r1, #4]
   18d88:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   18d8c:	f7fd bb26 	b.w	163dc <d_print_comp+0x1ec>
   18d90:	1c4a      	adds	r2, r1, #1
   18d92:	29ff      	cmp	r1, #255	; 0xff
   18d94:	f001 811a 	beq.w	19fcc <d_print_comp+0x3ddc>
   18d98:	1861      	adds	r1, r4, r1
   18d9a:	207d      	movs	r0, #125	; 0x7d
   18d9c:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   18da0:	7108      	strb	r0, [r1, #4]
   18da2:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   18da6:	f7fd bb19 	b.w	163dc <d_print_comp+0x1ec>
   18daa:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   18dae:	4650      	mov	r0, sl
   18db0:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18db4:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
   18db8:	4798      	blx	r3
   18dba:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
   18dbe:	2201      	movs	r2, #1
   18dc0:	2300      	movs	r3, #0
   18dc2:	1888      	adds	r0, r1, r2
   18dc4:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   18dc8:	f7ff b863 	b.w	17e92 <d_print_comp+0x1ca2>
   18dcc:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   18dd0:	4650      	mov	r0, sl
   18dd2:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18dd6:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   18dda:	4798      	blx	r3
   18ddc:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   18de0:	2201      	movs	r2, #1
   18de2:	2300      	movs	r3, #0
   18de4:	1881      	adds	r1, r0, r2
   18de6:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
   18dea:	f7fe b813 	b.w	16e14 <d_print_comp+0xc24>
   18dee:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   18df2:	4650      	mov	r0, sl
   18df4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18df8:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
   18dfc:	4798      	blx	r3
   18dfe:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
   18e02:	2201      	movs	r2, #1
   18e04:	2300      	movs	r3, #0
   18e06:	1888      	adds	r0, r1, r2
   18e08:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   18e0c:	f7fd bdcf 	b.w	169ae <d_print_comp+0x7be>
   18e10:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   18e14:	4650      	mov	r0, sl
   18e16:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18e1a:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
   18e1e:	4798      	blx	r3
   18e20:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
   18e24:	2201      	movs	r2, #1
   18e26:	2300      	movs	r3, #0
   18e28:	1888      	adds	r0, r1, r2
   18e2a:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   18e2e:	f7ff b99c 	b.w	1816a <d_print_comp+0x1f7a>
   18e32:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   18e36:	4650      	mov	r0, sl
   18e38:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18e3c:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   18e40:	4798      	blx	r3
   18e42:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
   18e46:	2201      	movs	r2, #1
   18e48:	2300      	movs	r3, #0
   18e4a:	1888      	adds	r0, r1, r2
   18e4c:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   18e50:	f7fe bbdb 	b.w	1760a <d_print_comp+0x141a>
   18e54:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   18e58:	4650      	mov	r0, sl
   18e5a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18e5e:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
   18e62:	4798      	blx	r3
   18e64:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
   18e68:	2201      	movs	r2, #1
   18e6a:	2300      	movs	r3, #0
   18e6c:	1888      	adds	r0, r1, r2
   18e6e:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   18e72:	f7fd bca9 	b.w	167c8 <d_print_comp+0x5d8>
   18e76:	4658      	mov	r0, fp
   18e78:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   18e7c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18e80:	f884 a103 	strb.w	sl, [r4, #259]	; 0x103
   18e84:	4798      	blx	r3
   18e86:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   18e8a:	2101      	movs	r1, #1
   18e8c:	2300      	movs	r3, #0
   18e8e:	1842      	adds	r2, r0, r1
   18e90:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   18e94:	f7fe bc1b 	b.w	176ce <d_print_comp+0x14de>
   18e98:	4611      	mov	r1, r2
   18e9a:	4658      	mov	r0, fp
   18e9c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18ea0:	f884 a103 	strb.w	sl, [r4, #259]	; 0x103
   18ea4:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   18ea8:	4798      	blx	r3
   18eaa:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   18eae:	2101      	movs	r1, #1
   18eb0:	2200      	movs	r2, #0
   18eb2:	1846      	adds	r6, r0, r1
   18eb4:	f8c4 6124 	str.w	r6, [r4, #292]	; 0x124
   18eb8:	f7fe bbfa 	b.w	176b0 <d_print_comp+0x14c0>
   18ebc:	4620      	mov	r0, r4
   18ebe:	6879      	ldr	r1, [r7, #4]
   18ec0:	f7fd f996 	bl	161f0 <d_print_comp>
   18ec4:	f7fd ba8a 	b.w	163dc <d_print_comp+0x1ec>
   18ec8:	f8d9 1004 	ldr.w	r1, [r9, #4]
   18ecc:	4620      	mov	r0, r4
   18ece:	f7fd f98f 	bl	161f0 <d_print_comp>
   18ed2:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   18ed6:	464d      	mov	r5, r9
   18ed8:	29ff      	cmp	r1, #255	; 0xff
   18eda:	f000 843e 	beq.w	1975a <d_print_comp+0x356a>
   18ede:	1862      	adds	r2, r4, r1
   18ee0:	3101      	adds	r1, #1
   18ee2:	202d      	movs	r0, #45	; 0x2d
   18ee4:	29ff      	cmp	r1, #255	; 0xff
   18ee6:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18eea:	7110      	strb	r0, [r2, #4]
   18eec:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   18ef0:	f000 8420 	beq.w	19734 <d_print_comp+0x3544>
   18ef4:	eb04 0c01 	add.w	ip, r4, r1
   18ef8:	3101      	adds	r1, #1
   18efa:	2369      	movs	r3, #105	; 0x69
   18efc:	29ff      	cmp	r1, #255	; 0xff
   18efe:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18f02:	f88c 3004 	strb.w	r3, [ip, #4]
   18f06:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   18f0a:	f000 8400 	beq.w	1970e <d_print_comp+0x351e>
   18f0e:	eb04 0e01 	add.w	lr, r4, r1
   18f12:	3101      	adds	r1, #1
   18f14:	236e      	movs	r3, #110	; 0x6e
   18f16:	29ff      	cmp	r1, #255	; 0xff
   18f18:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   18f1c:	f88e 3004 	strb.w	r3, [lr, #4]
   18f20:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   18f24:	d00f      	beq.n	18f46 <d_print_comp+0x2d56>
   18f26:	1c48      	adds	r0, r1, #1
   18f28:	eb04 0c01 	add.w	ip, r4, r1
   18f2c:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   18f30:	212d      	movs	r1, #45	; 0x2d
   18f32:	4620      	mov	r0, r4
   18f34:	f88c 1004 	strb.w	r1, [ip, #4]
   18f38:	f884 1108 	strb.w	r1, [r4, #264]	; 0x108
   18f3c:	68a9      	ldr	r1, [r5, #8]
   18f3e:	f7fd f957 	bl	161f0 <d_print_comp>
   18f42:	f7fd ba4b 	b.w	163dc <d_print_comp+0x1ec>
   18f46:	2600      	movs	r6, #0
   18f48:	1d20      	adds	r0, r4, #4
   18f4a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   18f4e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   18f52:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   18f56:	4798      	blx	r3
   18f58:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   18f5c:	2001      	movs	r0, #1
   18f5e:	4631      	mov	r1, r6
   18f60:	181a      	adds	r2, r3, r0
   18f62:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   18f66:	e7df      	b.n	18f28 <d_print_comp+0x2d38>
   18f68:	684e      	ldr	r6, [r1, #4]
   18f6a:	688f      	ldr	r7, [r1, #8]
   18f6c:	19f7      	adds	r7, r6, r7
   18f6e:	42be      	cmp	r6, r7
   18f70:	f4bd aa34 	bcs.w	163dc <d_print_comp+0x1ec>
   18f74:	f04f 0900 	mov.w	r9, #0
   18f78:	f104 0a04 	add.w	sl, r4, #4
   18f7c:	e00f      	b.n	18f9e <d_print_comp+0x2dae>
   18f7e:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   18f82:	1c4b      	adds	r3, r1, #1
   18f84:	29ff      	cmp	r1, #255	; 0xff
   18f86:	f000 80a3 	beq.w	190d0 <d_print_comp+0x2ee0>
   18f8a:	1861      	adds	r1, r4, r1
   18f8c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   18f90:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
   18f94:	710d      	strb	r5, [r1, #4]
   18f96:	3601      	adds	r6, #1
   18f98:	42b7      	cmp	r7, r6
   18f9a:	f67d aa1f 	bls.w	163dc <d_print_comp+0x1ec>
   18f9e:	1bba      	subs	r2, r7, r6
   18fa0:	7835      	ldrb	r5, [r6, #0]
   18fa2:	2a03      	cmp	r2, #3
   18fa4:	ddeb      	ble.n	18f7e <d_print_comp+0x2d8e>
   18fa6:	2d5f      	cmp	r5, #95	; 0x5f
   18fa8:	d1e9      	bne.n	18f7e <d_print_comp+0x2d8e>
   18faa:	7871      	ldrb	r1, [r6, #1]
   18fac:	295f      	cmp	r1, #95	; 0x5f
   18fae:	d1e6      	bne.n	18f7e <d_print_comp+0x2d8e>
   18fb0:	78b0      	ldrb	r0, [r6, #2]
   18fb2:	2855      	cmp	r0, #85	; 0x55
   18fb4:	d1e3      	bne.n	18f7e <d_print_comp+0x2d8e>
   18fb6:	f106 0803 	add.w	r8, r6, #3
   18fba:	4547      	cmp	r7, r8
   18fbc:	d9df      	bls.n	18f7e <d_print_comp+0x2d8e>
   18fbe:	78f3      	ldrb	r3, [r6, #3]
   18fc0:	ea6f 0108 	mvn.w	r1, r8
   18fc4:	187a      	adds	r2, r7, r1
   18fc6:	2000      	movs	r0, #0
   18fc8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   18fcc:	f002 0b01 	and.w	fp, r2, #1
   18fd0:	1d32      	adds	r2, r6, #4
   18fd2:	fa5f fc81 	uxtb.w	ip, r1
   18fd6:	f1bc 0f09 	cmp.w	ip, #9
   18fda:	f202 850e 	bhi.w	1b9fa <d_print_comp+0x580a>
   18fde:	460b      	mov	r3, r1
   18fe0:	42ba      	cmp	r2, r7
   18fe2:	4618      	mov	r0, r3
   18fe4:	d0cb      	beq.n	18f7e <d_print_comp+0x2d8e>
   18fe6:	f1bb 0f00 	cmp.w	fp, #0
   18fea:	d040      	beq.n	1906e <d_print_comp+0x2e7e>
   18fec:	4690      	mov	r8, r2
   18fee:	f812 3b01 	ldrb.w	r3, [r2], #1
   18ff2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   18ff6:	fa5f fc81 	uxtb.w	ip, r1
   18ffa:	f1bc 0f09 	cmp.w	ip, #9
   18ffe:	f242 850c 	bls.w	1ba1a <d_print_comp+0x582a>
   19002:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   19006:	fa5f f18c 	uxtb.w	r1, ip
   1900a:	2905      	cmp	r1, #5
   1900c:	f242 8572 	bls.w	1baf4 <d_print_comp+0x5904>
   19010:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   19014:	fa5f f18c 	uxtb.w	r1, ip
   19018:	2905      	cmp	r1, #5
   1901a:	d841      	bhi.n	190a0 <d_print_comp+0x2eb0>
   1901c:	3b57      	subs	r3, #87	; 0x57
   1901e:	42ba      	cmp	r2, r7
   19020:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   19024:	d123      	bne.n	1906e <d_print_comp+0x2e7e>
   19026:	e7aa      	b.n	18f7e <d_print_comp+0x2d8e>
   19028:	f1a3 0157 	sub.w	r1, r3, #87	; 0x57
   1902c:	4690      	mov	r8, r2
   1902e:	f812 3b01 	ldrb.w	r3, [r2], #1
   19032:	eb01 1000 	add.w	r0, r1, r0, lsl #4
   19036:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1903a:	fa5f fc81 	uxtb.w	ip, r1
   1903e:	f1bc 0f09 	cmp.w	ip, #9
   19042:	d910      	bls.n	19066 <d_print_comp+0x2e76>
   19044:	f1a3 0141 	sub.w	r1, r3, #65	; 0x41
   19048:	b2c9      	uxtb	r1, r1
   1904a:	2905      	cmp	r1, #5
   1904c:	bf98      	it	ls
   1904e:	f1a3 0137 	subls.w	r1, r3, #55	; 0x37
   19052:	d908      	bls.n	19066 <d_print_comp+0x2e76>
   19054:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
   19058:	fa5f fc81 	uxtb.w	ip, r1
   1905c:	f1bc 0f05 	cmp.w	ip, #5
   19060:	d81e      	bhi.n	190a0 <d_print_comp+0x2eb0>
   19062:	f1a3 0157 	sub.w	r1, r3, #87	; 0x57
   19066:	42ba      	cmp	r2, r7
   19068:	eb01 1000 	add.w	r0, r1, r0, lsl #4
   1906c:	d087      	beq.n	18f7e <d_print_comp+0x2d8e>
   1906e:	4690      	mov	r8, r2
   19070:	f812 3b01 	ldrb.w	r3, [r2], #1
   19074:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   19078:	fa5f fc81 	uxtb.w	ip, r1
   1907c:	f1bc 0f09 	cmp.w	ip, #9
   19080:	d9d4      	bls.n	1902c <d_print_comp+0x2e3c>
   19082:	f1a3 0141 	sub.w	r1, r3, #65	; 0x41
   19086:	b2c9      	uxtb	r1, r1
   19088:	2905      	cmp	r1, #5
   1908a:	bf98      	it	ls
   1908c:	f1a3 0137 	subls.w	r1, r3, #55	; 0x37
   19090:	d9cc      	bls.n	1902c <d_print_comp+0x2e3c>
   19092:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
   19096:	fa5f fc81 	uxtb.w	ip, r1
   1909a:	f1bc 0f05 	cmp.w	ip, #5
   1909e:	d9c3      	bls.n	19028 <d_print_comp+0x2e38>
   190a0:	4547      	cmp	r7, r8
   190a2:	f67f af6c 	bls.w	18f7e <d_print_comp+0x2d8e>
   190a6:	28ff      	cmp	r0, #255	; 0xff
   190a8:	f63f af69 	bhi.w	18f7e <d_print_comp+0x2d8e>
   190ac:	2b5f      	cmp	r3, #95	; 0x5f
   190ae:	f47f af66 	bne.w	18f7e <d_print_comp+0x2d8e>
   190b2:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   190b6:	4605      	mov	r5, r0
   190b8:	29ff      	cmp	r1, #255	; 0xff
   190ba:	f002 86b7 	beq.w	1be2c <d_print_comp+0x5c3c>
   190be:	1862      	adds	r2, r4, r1
   190c0:	1c48      	adds	r0, r1, #1
   190c2:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
   190c6:	4646      	mov	r6, r8
   190c8:	7115      	strb	r5, [r2, #4]
   190ca:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   190ce:	e762      	b.n	18f96 <d_print_comp+0x2da6>
   190d0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   190d4:	4650      	mov	r0, sl
   190d6:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   190da:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   190de:	4798      	blx	r3
   190e0:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   190e4:	2301      	movs	r3, #1
   190e6:	2100      	movs	r1, #0
   190e8:	18d0      	adds	r0, r2, r3
   190ea:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   190ee:	e74c      	b.n	18f8a <d_print_comp+0x2d9a>
   190f0:	4620      	mov	r0, r4
   190f2:	f8d9 1004 	ldr.w	r1, [r9, #4]
   190f6:	f7fd f87b 	bl	161f0 <d_print_comp>
   190fa:	f7fd b96f 	b.w	163dc <d_print_comp+0x1ec>
   190fe:	4620      	mov	r0, r4
   19100:	f8d9 1004 	ldr.w	r1, [r9, #4]
   19104:	f7fd f874 	bl	161f0 <d_print_comp>
   19108:	f7fd b968 	b.w	163dc <d_print_comp+0x1ec>
   1910c:	4620      	mov	r0, r4
   1910e:	6879      	ldr	r1, [r7, #4]
   19110:	f7fd f86e 	bl	161f0 <d_print_comp>
   19114:	f7fd b962 	b.w	163dc <d_print_comp+0x1ec>
   19118:	1c4a      	adds	r2, r1, #1
   1911a:	29ff      	cmp	r1, #255	; 0xff
   1911c:	f002 8315 	beq.w	1b74a <d_print_comp+0x555a>
   19120:	1861      	adds	r1, r4, r1
   19122:	202e      	movs	r0, #46	; 0x2e
   19124:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   19128:	7108      	strb	r0, [r1, #4]
   1912a:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1912e:	f7fe bd8f 	b.w	17c50 <d_print_comp+0x1a60>
   19132:	29ff      	cmp	r1, #255	; 0xff
   19134:	f002 82d4 	beq.w	1b6e0 <d_print_comp+0x54f0>
   19138:	eb04 0c01 	add.w	ip, r4, r1
   1913c:	3101      	adds	r1, #1
   1913e:	225f      	movs	r2, #95	; 0x5f
   19140:	29ff      	cmp	r1, #255	; 0xff
   19142:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   19146:	f88c 2004 	strb.w	r2, [ip, #4]
   1914a:	f884 2108 	strb.w	r2, [r4, #264]	; 0x108
   1914e:	f002 82b5 	beq.w	1b6bc <d_print_comp+0x54cc>
   19152:	eb04 0c01 	add.w	ip, r4, r1
   19156:	3101      	adds	r1, #1
   19158:	2046      	movs	r0, #70	; 0x46
   1915a:	29ff      	cmp	r1, #255	; 0xff
   1915c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   19160:	f88c 0004 	strb.w	r0, [ip, #4]
   19164:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   19168:	f002 8290 	beq.w	1b68c <d_print_comp+0x549c>
   1916c:	eb04 0c01 	add.w	ip, r4, r1
   19170:	3101      	adds	r1, #1
   19172:	2072      	movs	r0, #114	; 0x72
   19174:	29ff      	cmp	r1, #255	; 0xff
   19176:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1917a:	f88c 0004 	strb.w	r0, [ip, #4]
   1917e:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   19182:	f002 8270 	beq.w	1b666 <d_print_comp+0x5476>
   19186:	eb04 0c01 	add.w	ip, r4, r1
   1918a:	3101      	adds	r1, #1
   1918c:	2061      	movs	r0, #97	; 0x61
   1918e:	29ff      	cmp	r1, #255	; 0xff
   19190:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   19194:	f88c 0004 	strb.w	r0, [ip, #4]
   19198:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1919c:	f002 8250 	beq.w	1b640 <d_print_comp+0x5450>
   191a0:	eb04 0c01 	add.w	ip, r4, r1
   191a4:	3101      	adds	r1, #1
   191a6:	2063      	movs	r0, #99	; 0x63
   191a8:	29ff      	cmp	r1, #255	; 0xff
   191aa:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   191ae:	f88c 0004 	strb.w	r0, [ip, #4]
   191b2:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   191b6:	d009      	beq.n	191cc <d_print_comp+0x2fdc>
   191b8:	1c4a      	adds	r2, r1, #1
   191ba:	1861      	adds	r1, r4, r1
   191bc:	2074      	movs	r0, #116	; 0x74
   191be:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   191c2:	7108      	strb	r0, [r1, #4]
   191c4:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   191c8:	f7fd b908 	b.w	163dc <d_print_comp+0x1ec>
   191cc:	2500      	movs	r5, #0
   191ce:	1d20      	adds	r0, r4, #4
   191d0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   191d4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   191d8:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   191dc:	4798      	blx	r3
   191de:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   191e2:	2201      	movs	r2, #1
   191e4:	4629      	mov	r1, r5
   191e6:	1898      	adds	r0, r3, r2
   191e8:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   191ec:	e7e5      	b.n	191ba <d_print_comp+0x2fca>
   191ee:	4620      	mov	r0, r4
   191f0:	f8d9 1004 	ldr.w	r1, [r9, #4]
   191f4:	f7fc fffc 	bl	161f0 <d_print_comp>
   191f8:	f7fd b8f0 	b.w	163dc <d_print_comp+0x1ec>
   191fc:	4620      	mov	r0, r4
   191fe:	f8d9 1004 	ldr.w	r1, [r9, #4]
   19202:	f7fc fff5 	bl	161f0 <d_print_comp>
   19206:	f7fd b8e9 	b.w	163dc <d_print_comp+0x1ec>
   1920a:	684a      	ldr	r2, [r1, #4]
   1920c:	f8d2 800c 	ldr.w	r8, [r2, #12]
   19210:	6897      	ldr	r7, [r2, #8]
   19212:	f1b8 0f00 	cmp.w	r8, #0
   19216:	f43d a8e1 	beq.w	163dc <d_print_comp+0x1ec>
   1921a:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1921e:	f108 36ff 	add.w	r6, r8, #4294967295
   19222:	f006 0b01 	and.w	fp, r6, #1
   19226:	f04f 0900 	mov.w	r9, #0
   1922a:	29ff      	cmp	r1, #255	; 0xff
   1922c:	f104 0a04 	add.w	sl, r4, #4
   19230:	783e      	ldrb	r6, [r7, #0]
   19232:	f002 82e7 	beq.w	1b804 <d_print_comp+0x5614>
   19236:	460b      	mov	r3, r1
   19238:	3101      	adds	r1, #1
   1923a:	2501      	movs	r5, #1
   1923c:	18e0      	adds	r0, r4, r3
   1923e:	45a8      	cmp	r8, r5
   19240:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   19244:	7106      	strb	r6, [r0, #4]
   19246:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   1924a:	f43d a8c7 	beq.w	163dc <d_print_comp+0x1ec>
   1924e:	f1bb 0f00 	cmp.w	fp, #0
   19252:	d011      	beq.n	19278 <d_print_comp+0x3088>
   19254:	29ff      	cmp	r1, #255	; 0xff
   19256:	5d7e      	ldrb	r6, [r7, r5]
   19258:	f002 82e5 	beq.w	1b826 <d_print_comp+0x5636>
   1925c:	460b      	mov	r3, r1
   1925e:	3101      	adds	r1, #1
   19260:	3501      	adds	r5, #1
   19262:	eb04 0c03 	add.w	ip, r4, r3
   19266:	45a8      	cmp	r8, r5
   19268:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1926c:	f88c 6004 	strb.w	r6, [ip, #4]
   19270:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   19274:	f43d a8b2 	beq.w	163dc <d_print_comp+0x1ec>
   19278:	29ff      	cmp	r1, #255	; 0xff
   1927a:	460b      	mov	r3, r1
   1927c:	5d7e      	ldrb	r6, [r7, r5]
   1927e:	f101 0201 	add.w	r2, r1, #1
   19282:	d01e      	beq.n	192c2 <d_print_comp+0x30d2>
   19284:	eb04 0c03 	add.w	ip, r4, r3
   19288:	3501      	adds	r5, #1
   1928a:	1c51      	adds	r1, r2, #1
   1928c:	2aff      	cmp	r2, #255	; 0xff
   1928e:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   19292:	4613      	mov	r3, r2
   19294:	f88c 6004 	strb.w	r6, [ip, #4]
   19298:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   1929c:	5d7e      	ldrb	r6, [r7, r5]
   1929e:	d1df      	bne.n	19260 <d_print_comp+0x3070>
   192a0:	4611      	mov	r1, r2
   192a2:	4650      	mov	r0, sl
   192a4:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   192a8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   192ac:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   192b0:	4798      	blx	r3
   192b2:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   192b6:	2101      	movs	r1, #1
   192b8:	2300      	movs	r3, #0
   192ba:	1842      	adds	r2, r0, r1
   192bc:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   192c0:	e7ce      	b.n	19260 <d_print_comp+0x3070>
   192c2:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   192c6:	4650      	mov	r0, sl
   192c8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   192cc:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   192d0:	4798      	blx	r3
   192d2:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   192d6:	2201      	movs	r2, #1
   192d8:	2300      	movs	r3, #0
   192da:	1881      	adds	r1, r0, r2
   192dc:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
   192e0:	e7d0      	b.n	19284 <d_print_comp+0x3094>
   192e2:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   192e6:	4650      	mov	r0, sl
   192e8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   192ec:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   192f0:	4798      	blx	r3
   192f2:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   192f6:	2201      	movs	r2, #1
   192f8:	2300      	movs	r3, #0
   192fa:	1881      	adds	r1, r0, r2
   192fc:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
   19300:	f7ff b825 	b.w	1834e <d_print_comp+0x215e>
   19304:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19308:	4650      	mov	r0, sl
   1930a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1930e:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   19312:	4798      	blx	r3
   19314:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   19318:	2201      	movs	r2, #1
   1931a:	2300      	movs	r3, #0
   1931c:	1881      	adds	r1, r0, r2
   1931e:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
   19322:	f7fe be1b 	b.w	17f5c <d_print_comp+0x1d6c>
   19326:	2aff      	cmp	r2, #255	; 0xff
   19328:	f002 82b0 	beq.w	1b88c <d_print_comp+0x569c>
   1932c:	eb04 0c02 	add.w	ip, r4, r2
   19330:	2020      	movs	r0, #32
   19332:	3201      	adds	r2, #1
   19334:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   19338:	f88c 0004 	strb.w	r0, [ip, #4]
   1933c:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   19340:	686b      	ldr	r3, [r5, #4]
   19342:	685f      	ldr	r7, [r3, #4]
   19344:	f7fd bd2a 	b.w	16d9c <d_print_comp+0xbac>
   19348:	689a      	ldr	r2, [r3, #8]
   1934a:	7810      	ldrb	r0, [r2, #0]
   1934c:	2834      	cmp	r0, #52	; 0x34
   1934e:	f47d ab95 	bne.w	16a7c <d_print_comp+0x88c>
   19352:	6859      	ldr	r1, [r3, #4]
   19354:	4620      	mov	r0, r4
   19356:	f004 fb6d 	bl	1da34 <d_print_subexpr>
   1935a:	4620      	mov	r0, r4
   1935c:	6869      	ldr	r1, [r5, #4]
   1935e:	f004 fac5 	bl	1d8ec <d_print_expr_op>
   19362:	68a9      	ldr	r1, [r5, #8]
   19364:	4620      	mov	r0, r4
   19366:	688b      	ldr	r3, [r1, #8]
   19368:	6859      	ldr	r1, [r3, #4]
   1936a:	f004 fb63 	bl	1da34 <d_print_subexpr>
   1936e:	f64b 1160 	movw	r1, #47456	; 0xb960
   19372:	4620      	mov	r0, r4
   19374:	f2c0 0102 	movt	r1, #2
   19378:	f7fc fe92 	bl	160a0 <d_append_string>
   1937c:	68aa      	ldr	r2, [r5, #8]
   1937e:	4620      	mov	r0, r4
   19380:	6891      	ldr	r1, [r2, #8]
   19382:	6889      	ldr	r1, [r1, #8]
   19384:	f004 fb56 	bl	1da34 <d_print_subexpr>
   19388:	f7fd b828 	b.w	163dc <d_print_comp+0x1ec>
   1938c:	4629      	mov	r1, r5
   1938e:	f004 fa05 	bl	1d79c <d_print_cast.part.7>
   19392:	f7fd b823 	b.w	163dc <d_print_comp+0x1ec>
   19396:	684a      	ldr	r2, [r1, #4]
   19398:	7817      	ldrb	r7, [r2, #0]
   1939a:	2f2c      	cmp	r7, #44	; 0x2c
   1939c:	f002 81c4 	beq.w	1b728 <d_print_comp+0x5538>
   193a0:	6859      	ldr	r1, [r3, #4]
   193a2:	4620      	mov	r0, r4
   193a4:	f004 fb46 	bl	1da34 <d_print_subexpr>
   193a8:	f8d5 8004 	ldr.w	r8, [r5, #4]
   193ac:	f64b 115c 	movw	r1, #47452	; 0xb95c
   193b0:	f2c0 0102 	movt	r1, #2
   193b4:	f8d8 0004 	ldr.w	r0, [r8, #4]
   193b8:	6807      	ldr	r7, [r0, #0]
   193ba:	4638      	mov	r0, r7
   193bc:	f006 febe 	bl	2013c <strcmp>
   193c0:	4606      	mov	r6, r0
   193c2:	2800      	cmp	r0, #0
   193c4:	f002 80b9 	beq.w	1b53a <d_print_comp+0x534a>
   193c8:	f64b 01b0 	movw	r1, #47280	; 0xb8b0
   193cc:	4638      	mov	r0, r7
   193ce:	f2c0 0102 	movt	r1, #2
   193d2:	f006 feb3 	bl	2013c <strcmp>
   193d6:	2800      	cmp	r0, #0
   193d8:	f042 826a 	bne.w	1b8b0 <d_print_comp+0x56c0>
   193dc:	68aa      	ldr	r2, [r5, #8]
   193de:	4620      	mov	r0, r4
   193e0:	6891      	ldr	r1, [r2, #8]
   193e2:	f004 fb27 	bl	1da34 <d_print_subexpr>
   193e6:	686b      	ldr	r3, [r5, #4]
   193e8:	7819      	ldrb	r1, [r3, #0]
   193ea:	292c      	cmp	r1, #44	; 0x2c
   193ec:	f47c aff6 	bne.w	163dc <d_print_comp+0x1ec>
   193f0:	685b      	ldr	r3, [r3, #4]
   193f2:	6898      	ldr	r0, [r3, #8]
   193f4:	2801      	cmp	r0, #1
   193f6:	f47c aff1 	bne.w	163dc <d_print_comp+0x1ec>
   193fa:	685b      	ldr	r3, [r3, #4]
   193fc:	f893 c000 	ldrb.w	ip, [r3]
   19400:	f1bc 0f3e 	cmp.w	ip, #62	; 0x3e
   19404:	f47c afea 	bne.w	163dc <d_print_comp+0x1ec>
   19408:	4620      	mov	r0, r4
   1940a:	2129      	movs	r1, #41	; 0x29
   1940c:	f7fb f8a2 	bl	14554 <d_append_char>
   19410:	f7fc bfe4 	b.w	163dc <d_print_comp+0x1ec>
   19414:	4620      	mov	r0, r4
   19416:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1941a:	f7fc fee9 	bl	161f0 <d_print_comp>
   1941e:	f7fc bfdd 	b.w	163dc <d_print_comp+0x1ec>
   19422:	6826      	ldr	r6, [r4, #0]
   19424:	f006 0620 	and.w	r6, r6, #32
   19428:	f7fe bf40 	b.w	182ac <d_print_comp+0x20bc>
   1942c:	4620      	mov	r0, r4
   1942e:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
   19432:	f004 f8bf 	bl	1d5b4 <d_print_function_type>
   19436:	f7fe bf09 	b.w	1824c <d_print_comp+0x205c>
   1943a:	2101      	movs	r1, #1
   1943c:	2a00      	cmp	r2, #0
   1943e:	bf0c      	ite	eq
   19440:	460a      	moveq	r2, r1
   19442:	f041 0201 	orrne.w	r2, r1, #1
   19446:	2a00      	cmp	r2, #0
   19448:	f47e ac40 	bne.w	17ccc <d_print_comp+0x1adc>
   1944c:	6859      	ldr	r1, [r3, #4]
   1944e:	2900      	cmp	r1, #0
   19450:	f43e ac3c 	beq.w	17ccc <d_print_comp+0x1adc>
   19454:	780b      	ldrb	r3, [r1, #0]
   19456:	2b2b      	cmp	r3, #43	; 0x2b
   19458:	f000 80c8 	beq.w	195ec <d_print_comp+0x33fc>
   1945c:	6833      	ldr	r3, [r6, #0]
   1945e:	4620      	mov	r0, r4
   19460:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   19464:	f7fc fec4 	bl	161f0 <d_print_comp>
   19468:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
   1946c:	f7fc bfb6 	b.w	163dc <d_print_comp+0x1ec>
   19470:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   19474:	29ff      	cmp	r1, #255	; 0xff
   19476:	f002 8221 	beq.w	1b8bc <d_print_comp+0x56cc>
   1947a:	eb04 0c01 	add.w	ip, r4, r1
   1947e:	3101      	adds	r1, #1
   19480:	205f      	movs	r0, #95	; 0x5f
   19482:	29ff      	cmp	r1, #255	; 0xff
   19484:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   19488:	f88c 0004 	strb.w	r0, [ip, #4]
   1948c:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   19490:	f002 826f 	beq.w	1b972 <d_print_comp+0x5782>
   19494:	eb04 0c01 	add.w	ip, r4, r1
   19498:	3101      	adds	r1, #1
   1949a:	2053      	movs	r0, #83	; 0x53
   1949c:	29ff      	cmp	r1, #255	; 0xff
   1949e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   194a2:	f88c 0004 	strb.w	r0, [ip, #4]
   194a6:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   194aa:	f002 824f 	beq.w	1b94c <d_print_comp+0x575c>
   194ae:	eb04 0c01 	add.w	ip, r4, r1
   194b2:	3101      	adds	r1, #1
   194b4:	2061      	movs	r0, #97	; 0x61
   194b6:	29ff      	cmp	r1, #255	; 0xff
   194b8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   194bc:	f88c 0004 	strb.w	r0, [ip, #4]
   194c0:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   194c4:	f002 822f 	beq.w	1b926 <d_print_comp+0x5736>
   194c8:	eb04 0c01 	add.w	ip, r4, r1
   194cc:	3101      	adds	r1, #1
   194ce:	2074      	movs	r0, #116	; 0x74
   194d0:	29ff      	cmp	r1, #255	; 0xff
   194d2:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   194d6:	f88c 0004 	strb.w	r0, [ip, #4]
   194da:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   194de:	d009      	beq.n	194f4 <d_print_comp+0x3304>
   194e0:	1c4a      	adds	r2, r1, #1
   194e2:	1861      	adds	r1, r4, r1
   194e4:	2020      	movs	r0, #32
   194e6:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   194ea:	7108      	strb	r0, [r1, #4]
   194ec:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   194f0:	f7ff b80e 	b.w	18510 <d_print_comp+0x2320>
   194f4:	2600      	movs	r6, #0
   194f6:	1d20      	adds	r0, r4, #4
   194f8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   194fc:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19500:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   19504:	4798      	blx	r3
   19506:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1950a:	2201      	movs	r2, #1
   1950c:	4631      	mov	r1, r6
   1950e:	1898      	adds	r0, r3, r2
   19510:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   19514:	e7e5      	b.n	194e2 <d_print_comp+0x32f2>
   19516:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1951a:	29ff      	cmp	r1, #255	; 0xff
   1951c:	f002 81e1 	beq.w	1b8e2 <d_print_comp+0x56f2>
   19520:	eb04 0c01 	add.w	ip, r4, r1
   19524:	1c48      	adds	r0, r1, #1
   19526:	2228      	movs	r2, #40	; 0x28
   19528:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   1952c:	f884 2108 	strb.w	r2, [r4, #264]	; 0x108
   19530:	4620      	mov	r0, r4
   19532:	f88c 2004 	strb.w	r2, [ip, #4]
   19536:	686b      	ldr	r3, [r5, #4]
   19538:	6859      	ldr	r1, [r3, #4]
   1953a:	f891 e000 	ldrb.w	lr, [r1]
   1953e:	f1be 0f04 	cmp.w	lr, #4
   19542:	f002 80b6 	beq.w	1b6b2 <d_print_comp+0x54c2>
   19546:	f7fc fe53 	bl	161f0 <d_print_comp>
   1954a:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1954e:	29ff      	cmp	r1, #255	; 0xff
   19550:	f002 81d8 	beq.w	1b904 <d_print_comp+0x5714>
   19554:	eb04 0e01 	add.w	lr, r4, r1
   19558:	2229      	movs	r2, #41	; 0x29
   1955a:	3101      	adds	r1, #1
   1955c:	f884 2108 	strb.w	r2, [r4, #264]	; 0x108
   19560:	f88e 2004 	strb.w	r2, [lr, #4]
   19564:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   19568:	f7fd baa3 	b.w	16ab2 <d_print_comp+0x8c2>
   1956c:	eb04 0806 	add.w	r8, r4, r6
   19570:	2700      	movs	r7, #0
   19572:	4631      	mov	r1, r6
   19574:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19578:	f888 7004 	strb.w	r7, [r8, #4]
   1957c:	1d20      	adds	r0, r4, #4
   1957e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19582:	463e      	mov	r6, r7
   19584:	4798      	blx	r3
   19586:	f8d4 7124 	ldr.w	r7, [r4, #292]	; 0x124
   1958a:	f107 0801 	add.w	r8, r7, #1
   1958e:	f8c4 8124 	str.w	r8, [r4, #292]	; 0x124
   19592:	f7fd bc6f 	b.w	16e74 <d_print_comp+0xc84>
   19596:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1959a:	29ff      	cmp	r1, #255	; 0xff
   1959c:	f002 81fc 	beq.w	1b998 <d_print_comp+0x57a8>
   195a0:	eb04 0e01 	add.w	lr, r4, r1
   195a4:	3101      	adds	r1, #1
   195a6:	252c      	movs	r5, #44	; 0x2c
   195a8:	29ff      	cmp	r1, #255	; 0xff
   195aa:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   195ae:	f88e 5004 	strb.w	r5, [lr, #4]
   195b2:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
   195b6:	d009      	beq.n	195cc <d_print_comp+0x33dc>
   195b8:	1c4b      	adds	r3, r1, #1
   195ba:	1861      	adds	r1, r4, r1
   195bc:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   195c0:	f884 9108 	strb.w	r9, [r4, #264]	; 0x108
   195c4:	f881 9004 	strb.w	r9, [r1, #4]
   195c8:	f7fc bfbe 	b.w	16548 <d_print_comp+0x358>
   195cc:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   195d0:	1d20      	adds	r0, r4, #4
   195d2:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   195d6:	f884 a103 	strb.w	sl, [r4, #259]	; 0x103
   195da:	4798      	blx	r3
   195dc:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   195e0:	2301      	movs	r3, #1
   195e2:	4651      	mov	r1, sl
   195e4:	18d0      	adds	r0, r2, r3
   195e6:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   195ea:	e7e6      	b.n	195ba <d_print_comp+0x33ca>
   195ec:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   195f0:	2b00      	cmp	r3, #0
   195f2:	f342 80bc 	ble.w	1b76e <d_print_comp+0x557e>
   195f6:	6889      	ldr	r1, [r1, #8]
   195f8:	3b01      	subs	r3, #1
   195fa:	f003 0201 	and.w	r2, r3, #1
   195fe:	2900      	cmp	r1, #0
   19600:	f002 80b5 	beq.w	1b76e <d_print_comp+0x557e>
   19604:	f891 c000 	ldrb.w	ip, [r1]
   19608:	f1bc 0f2b 	cmp.w	ip, #43	; 0x2b
   1960c:	f47e ab5e 	bne.w	17ccc <d_print_comp+0x1adc>
   19610:	2b00      	cmp	r3, #0
   19612:	f002 80b6 	beq.w	1b782 <d_print_comp+0x5592>
   19616:	b13a      	cbz	r2, 19628 <d_print_comp+0x3438>
   19618:	6889      	ldr	r1, [r1, #8]
   1961a:	3b01      	subs	r3, #1
   1961c:	b991      	cbnz	r1, 19644 <d_print_comp+0x3454>
   1961e:	f002 b8a6 	b.w	1b76e <d_print_comp+0x557e>
   19622:	2b00      	cmp	r3, #0
   19624:	f002 80ad 	beq.w	1b782 <d_print_comp+0x5592>
   19628:	6889      	ldr	r1, [r1, #8]
   1962a:	3b01      	subs	r3, #1
   1962c:	2900      	cmp	r1, #0
   1962e:	f002 809e 	beq.w	1b76e <d_print_comp+0x557e>
   19632:	7808      	ldrb	r0, [r1, #0]
   19634:	3b01      	subs	r3, #1
   19636:	282b      	cmp	r0, #43	; 0x2b
   19638:	f47e ab48 	bne.w	17ccc <d_print_comp+0x1adc>
   1963c:	6889      	ldr	r1, [r1, #8]
   1963e:	2900      	cmp	r1, #0
   19640:	f002 8095 	beq.w	1b76e <d_print_comp+0x557e>
   19644:	780a      	ldrb	r2, [r1, #0]
   19646:	2a2b      	cmp	r2, #43	; 0x2b
   19648:	d0eb      	beq.n	19622 <d_print_comp+0x3432>
   1964a:	f7fe bb3f 	b.w	17ccc <d_print_comp+0x1adc>
   1964e:	4620      	mov	r0, r4
   19650:	6869      	ldr	r1, [r5, #4]
   19652:	f7fc fdcd 	bl	161f0 <d_print_comp>
   19656:	f7fc bec1 	b.w	163dc <d_print_comp+0x1ec>
   1965a:	1d20      	adds	r0, r4, #4
   1965c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19660:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19664:	f884 a103 	strb.w	sl, [r4, #259]	; 0x103
   19668:	4798      	blx	r3
   1966a:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1966e:	2101      	movs	r1, #1
   19670:	222c      	movs	r2, #44	; 0x2c
   19672:	1843      	adds	r3, r0, r1
   19674:	7122      	strb	r2, [r4, #4]
   19676:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1967a:	f7ff bad6 	b.w	18c2a <d_print_comp+0x2a3a>
   1967e:	1d20      	adds	r0, r4, #4
   19680:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19684:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19688:	f884 a103 	strb.w	sl, [r4, #259]	; 0x103
   1968c:	4798      	blx	r3
   1968e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19692:	2101      	movs	r1, #1
   19694:	222c      	movs	r2, #44	; 0x2c
   19696:	1858      	adds	r0, r3, r1
   19698:	7122      	strb	r2, [r4, #4]
   1969a:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1969e:	f7fc bf8b 	b.w	165b8 <d_print_comp+0x3c8>
   196a2:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   196a6:	29ff      	cmp	r1, #255	; 0xff
   196a8:	f002 8195 	beq.w	1b9d6 <d_print_comp+0x57e6>
   196ac:	eb04 0c01 	add.w	ip, r4, r1
   196b0:	3101      	adds	r1, #1
   196b2:	202c      	movs	r0, #44	; 0x2c
   196b4:	29ff      	cmp	r1, #255	; 0xff
   196b6:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   196ba:	f88c 0004 	strb.w	r0, [ip, #4]
   196be:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   196c2:	f47c af79 	bne.w	165b8 <d_print_comp+0x3c8>
   196c6:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   196ca:	1d20      	adds	r0, r4, #4
   196cc:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   196d0:	f884 a103 	strb.w	sl, [r4, #259]	; 0x103
   196d4:	4798      	blx	r3
   196d6:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   196da:	462b      	mov	r3, r5
   196dc:	2100      	movs	r1, #0
   196de:	1c42      	adds	r2, r0, #1
   196e0:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   196e4:	f7fc bf69 	b.w	165ba <d_print_comp+0x3ca>
   196e8:	2600      	movs	r6, #0
   196ea:	1d20      	adds	r0, r4, #4
   196ec:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   196f0:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   196f4:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   196f8:	4798      	blx	r3
   196fa:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   196fe:	2101      	movs	r1, #1
   19700:	2269      	movs	r2, #105	; 0x69
   19702:	1846      	adds	r6, r0, r1
   19704:	7122      	strb	r2, [r4, #4]
   19706:	f8c4 6124 	str.w	r6, [r4, #292]	; 0x124
   1970a:	f7fd be3e 	b.w	1738a <d_print_comp+0x119a>
   1970e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19712:	2000      	movs	r0, #0
   19714:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19718:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1971c:	1d20      	adds	r0, r4, #4
   1971e:	4798      	blx	r3
   19720:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19724:	2101      	movs	r1, #1
   19726:	226e      	movs	r2, #110	; 0x6e
   19728:	1858      	adds	r0, r3, r1
   1972a:	7122      	strb	r2, [r4, #4]
   1972c:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   19730:	f7ff bbf9 	b.w	18f26 <d_print_comp+0x2d36>
   19734:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19738:	2000      	movs	r0, #0
   1973a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1973e:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   19742:	1d20      	adds	r0, r4, #4
   19744:	4798      	blx	r3
   19746:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1974a:	2101      	movs	r1, #1
   1974c:	2269      	movs	r2, #105	; 0x69
   1974e:	1858      	adds	r0, r3, r1
   19750:	7122      	strb	r2, [r4, #4]
   19752:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   19756:	f7ff bbda 	b.w	18f0e <d_print_comp+0x2d1e>
   1975a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1975e:	2000      	movs	r0, #0
   19760:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19764:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   19768:	1d20      	adds	r0, r4, #4
   1976a:	4798      	blx	r3
   1976c:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   19770:	2101      	movs	r1, #1
   19772:	202d      	movs	r0, #45	; 0x2d
   19774:	1853      	adds	r3, r2, r1
   19776:	7120      	strb	r0, [r4, #4]
   19778:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1977c:	f7ff bbba 	b.w	18ef4 <d_print_comp+0x2d04>
   19780:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19784:	2000      	movs	r0, #0
   19786:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1978a:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1978e:	1d20      	adds	r0, r4, #4
   19790:	4798      	blx	r3
   19792:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   19796:	2101      	movs	r1, #1
   19798:	2068      	movs	r0, #104	; 0x68
   1979a:	1853      	adds	r3, r2, r1
   1979c:	7120      	strb	r0, [r4, #4]
   1979e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   197a2:	f7fd bde5 	b.w	17370 <d_print_comp+0x1180>
   197a6:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   197aa:	2000      	movs	r0, #0
   197ac:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   197b0:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   197b4:	1d20      	adds	r0, r4, #4
   197b6:	4798      	blx	r3
   197b8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   197bc:	2101      	movs	r1, #1
   197be:	2272      	movs	r2, #114	; 0x72
   197c0:	1858      	adds	r0, r3, r1
   197c2:	7122      	strb	r2, [r4, #4]
   197c4:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   197c8:	f7fe ba07 	b.w	17bda <d_print_comp+0x19ea>
   197cc:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   197d0:	2000      	movs	r0, #0
   197d2:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   197d6:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   197da:	1d20      	adds	r0, r4, #4
   197dc:	4798      	blx	r3
   197de:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   197e2:	2101      	movs	r1, #1
   197e4:	2272      	movs	r2, #114	; 0x72
   197e6:	1858      	adds	r0, r3, r1
   197e8:	7122      	strb	r2, [r4, #4]
   197ea:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   197ee:	f7fe b859 	b.w	178a4 <d_print_comp+0x16b4>
   197f2:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   197f6:	2000      	movs	r0, #0
   197f8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   197fc:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   19800:	1d20      	adds	r0, r4, #4
   19802:	4798      	blx	r3
   19804:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19808:	2101      	movs	r1, #1
   1980a:	226f      	movs	r2, #111	; 0x6f
   1980c:	1858      	adds	r0, r3, r1
   1980e:	7122      	strb	r2, [r4, #4]
   19810:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   19814:	f7fe b839 	b.w	1788a <d_print_comp+0x169a>
   19818:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1981c:	2000      	movs	r0, #0
   1981e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19822:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   19826:	1d20      	adds	r0, r4, #4
   19828:	4798      	blx	r3
   1982a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1982e:	2101      	movs	r1, #1
   19830:	2266      	movs	r2, #102	; 0x66
   19832:	1858      	adds	r0, r3, r1
   19834:	7122      	strb	r2, [r4, #4]
   19836:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1983a:	f7fe b819 	b.w	17870 <d_print_comp+0x1680>
   1983e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19842:	2000      	movs	r0, #0
   19844:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19848:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1984c:	1d20      	adds	r0, r4, #4
   1984e:	4798      	blx	r3
   19850:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19854:	2101      	movs	r1, #1
   19856:	2220      	movs	r2, #32
   19858:	1858      	adds	r0, r3, r1
   1985a:	7122      	strb	r2, [r4, #4]
   1985c:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   19860:	f7fd bff9 	b.w	17856 <d_print_comp+0x1666>
   19864:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19868:	2000      	movs	r0, #0
   1986a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1986e:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   19872:	1d20      	adds	r0, r4, #4
   19874:	4798      	blx	r3
   19876:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1987a:	2101      	movs	r1, #1
   1987c:	226e      	movs	r2, #110	; 0x6e
   1987e:	1858      	adds	r0, r3, r1
   19880:	7122      	strb	r2, [r4, #4]
   19882:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   19886:	f7fd bfd9 	b.w	1783c <d_print_comp+0x164c>
   1988a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1988e:	2000      	movs	r0, #0
   19890:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19894:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   19898:	1d20      	adds	r0, r4, #4
   1989a:	4798      	blx	r3
   1989c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   198a0:	2101      	movs	r1, #1
   198a2:	2266      	movs	r2, #102	; 0x66
   198a4:	1858      	adds	r0, r3, r1
   198a6:	7122      	strb	r2, [r4, #4]
   198a8:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   198ac:	f7fd bfb9 	b.w	17822 <d_print_comp+0x1632>
   198b0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   198b4:	2000      	movs	r0, #0
   198b6:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   198ba:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   198be:	1d20      	adds	r0, r4, #4
   198c0:	4798      	blx	r3
   198c2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   198c6:	2101      	movs	r1, #1
   198c8:	2220      	movs	r2, #32
   198ca:	1858      	adds	r0, r3, r1
   198cc:	7122      	strb	r2, [r4, #4]
   198ce:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   198d2:	f7fd bf99 	b.w	17808 <d_print_comp+0x1618>
   198d6:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   198da:	2000      	movs	r0, #0
   198dc:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   198e0:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   198e4:	1d20      	adds	r0, r4, #4
   198e6:	4798      	blx	r3
   198e8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   198ec:	2101      	movs	r1, #1
   198ee:	226f      	movs	r2, #111	; 0x6f
   198f0:	1858      	adds	r0, r3, r1
   198f2:	7122      	strb	r2, [r4, #4]
   198f4:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   198f8:	f7fd bf79 	b.w	177ee <d_print_comp+0x15fe>
   198fc:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19900:	2000      	movs	r0, #0
   19902:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19906:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1990a:	1d20      	adds	r0, r4, #4
   1990c:	4798      	blx	r3
   1990e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19912:	2101      	movs	r1, #1
   19914:	2266      	movs	r2, #102	; 0x66
   19916:	1858      	adds	r0, r3, r1
   19918:	7122      	strb	r2, [r4, #4]
   1991a:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1991e:	f7fd bf59 	b.w	177d4 <d_print_comp+0x15e4>
   19922:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19926:	2000      	movs	r0, #0
   19928:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1992c:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   19930:	1d20      	adds	r0, r4, #4
   19932:	4798      	blx	r3
   19934:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19938:	2101      	movs	r1, #1
   1993a:	226e      	movs	r2, #110	; 0x6e
   1993c:	1858      	adds	r0, r3, r1
   1993e:	7122      	strb	r2, [r4, #4]
   19940:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   19944:	f7fd bf39 	b.w	177ba <d_print_comp+0x15ca>
   19948:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1994c:	2000      	movs	r0, #0
   1994e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19952:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   19956:	1d20      	adds	r0, r4, #4
   19958:	4798      	blx	r3
   1995a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1995e:	2101      	movs	r1, #1
   19960:	2269      	movs	r2, #105	; 0x69
   19962:	1858      	adds	r0, r3, r1
   19964:	7122      	strb	r2, [r4, #4]
   19966:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1996a:	f7fd bf19 	b.w	177a0 <d_print_comp+0x15b0>
   1996e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19972:	2000      	movs	r0, #0
   19974:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19978:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1997c:	1d20      	adds	r0, r4, #4
   1997e:	4798      	blx	r3
   19980:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19984:	2101      	movs	r1, #1
   19986:	2265      	movs	r2, #101	; 0x65
   19988:	1858      	adds	r0, r3, r1
   1998a:	7122      	strb	r2, [r4, #4]
   1998c:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   19990:	f7fd bef9 	b.w	17786 <d_print_comp+0x1596>
   19994:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19998:	2000      	movs	r0, #0
   1999a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1999e:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   199a2:	1d20      	adds	r0, r4, #4
   199a4:	4798      	blx	r3
   199a6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   199aa:	2101      	movs	r1, #1
   199ac:	2270      	movs	r2, #112	; 0x70
   199ae:	1858      	adds	r0, r3, r1
   199b0:	7122      	strb	r2, [r4, #4]
   199b2:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   199b6:	f7fd bed9 	b.w	1776c <d_print_comp+0x157c>
   199ba:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   199be:	2000      	movs	r0, #0
   199c0:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   199c4:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   199c8:	1d20      	adds	r0, r4, #4
   199ca:	4798      	blx	r3
   199cc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   199d0:	2101      	movs	r1, #1
   199d2:	2279      	movs	r2, #121	; 0x79
   199d4:	1858      	adds	r0, r3, r1
   199d6:	7122      	strb	r2, [r4, #4]
   199d8:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   199dc:	f7fd beb9 	b.w	17752 <d_print_comp+0x1562>
   199e0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   199e4:	2000      	movs	r0, #0
   199e6:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   199ea:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   199ee:	1d20      	adds	r0, r4, #4
   199f0:	4798      	blx	r3
   199f2:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   199f6:	2101      	movs	r1, #1
   199f8:	2074      	movs	r0, #116	; 0x74
   199fa:	1853      	adds	r3, r2, r1
   199fc:	7120      	strb	r0, [r4, #4]
   199fe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19a02:	f7fd be99 	b.w	17738 <d_print_comp+0x1548>
   19a06:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19a0a:	2200      	movs	r2, #0
   19a0c:	1d20      	adds	r0, r4, #4
   19a0e:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   19a12:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19a16:	4798      	blx	r3
   19a18:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   19a1c:	2101      	movs	r1, #1
   19a1e:	2265      	movs	r2, #101	; 0x65
   19a20:	1843      	adds	r3, r0, r1
   19a22:	7122      	strb	r2, [r4, #4]
   19a24:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19a28:	f7fe bb2a 	b.w	18080 <d_print_comp+0x1e90>
   19a2c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19a30:	2200      	movs	r2, #0
   19a32:	1d20      	adds	r0, r4, #4
   19a34:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   19a38:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19a3c:	4798      	blx	r3
   19a3e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   19a42:	2101      	movs	r1, #1
   19a44:	2270      	movs	r2, #112	; 0x70
   19a46:	1843      	adds	r3, r0, r1
   19a48:	7122      	strb	r2, [r4, #4]
   19a4a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19a4e:	f7fe bb0a 	b.w	18066 <d_print_comp+0x1e76>
   19a52:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19a56:	2200      	movs	r2, #0
   19a58:	1d20      	adds	r0, r4, #4
   19a5a:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   19a5e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19a62:	4798      	blx	r3
   19a64:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   19a68:	2101      	movs	r1, #1
   19a6a:	2279      	movs	r2, #121	; 0x79
   19a6c:	1843      	adds	r3, r0, r1
   19a6e:	7122      	strb	r2, [r4, #4]
   19a70:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19a74:	f7fe baea 	b.w	1804c <d_print_comp+0x1e5c>
   19a78:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19a7c:	2200      	movs	r2, #0
   19a7e:	1d20      	adds	r0, r4, #4
   19a80:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   19a84:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19a88:	4798      	blx	r3
   19a8a:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   19a8e:	2101      	movs	r1, #1
   19a90:	2274      	movs	r2, #116	; 0x74
   19a92:	1843      	adds	r3, r0, r1
   19a94:	7122      	strb	r2, [r4, #4]
   19a96:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19a9a:	f7fe baca 	b.w	18032 <d_print_comp+0x1e42>
   19a9e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19aa2:	2200      	movs	r2, #0
   19aa4:	1d20      	adds	r0, r4, #4
   19aa6:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   19aaa:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19aae:	4798      	blx	r3
   19ab0:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   19ab4:	2101      	movs	r1, #1
   19ab6:	226c      	movs	r2, #108	; 0x6c
   19ab8:	1843      	adds	r3, r0, r1
   19aba:	7122      	strb	r2, [r4, #4]
   19abc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19ac0:	f7fe baaa 	b.w	18018 <d_print_comp+0x1e28>
   19ac4:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19ac8:	2200      	movs	r2, #0
   19aca:	1d20      	adds	r0, r4, #4
   19acc:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   19ad0:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19ad4:	4798      	blx	r3
   19ad6:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   19ada:	2101      	movs	r1, #1
   19adc:	2263      	movs	r2, #99	; 0x63
   19ade:	1843      	adds	r3, r0, r1
   19ae0:	7122      	strb	r2, [r4, #4]
   19ae2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19ae6:	f7fe ba8a 	b.w	17ffe <d_print_comp+0x1e0e>
   19aea:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19aee:	2200      	movs	r2, #0
   19af0:	1d20      	adds	r0, r4, #4
   19af2:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   19af6:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19afa:	4798      	blx	r3
   19afc:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   19b00:	2101      	movs	r1, #1
   19b02:	2265      	movs	r2, #101	; 0x65
   19b04:	1843      	adds	r3, r0, r1
   19b06:	7122      	strb	r2, [r4, #4]
   19b08:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19b0c:	f7fe ba6a 	b.w	17fe4 <d_print_comp+0x1df4>
   19b10:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19b14:	2200      	movs	r2, #0
   19b16:	1d20      	adds	r0, r4, #4
   19b18:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   19b1c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19b20:	4798      	blx	r3
   19b22:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   19b26:	2101      	movs	r1, #1
   19b28:	2264      	movs	r2, #100	; 0x64
   19b2a:	1843      	adds	r3, r0, r1
   19b2c:	7122      	strb	r2, [r4, #4]
   19b2e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19b32:	f7fe ba4a 	b.w	17fca <d_print_comp+0x1dda>
   19b36:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19b3a:	2200      	movs	r2, #0
   19b3c:	1d20      	adds	r0, r4, #4
   19b3e:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   19b42:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19b46:	4798      	blx	r3
   19b48:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   19b4c:	2101      	movs	r1, #1
   19b4e:	2220      	movs	r2, #32
   19b50:	1843      	adds	r3, r0, r1
   19b52:	7122      	strb	r2, [r4, #4]
   19b54:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19b58:	f7fe ba9f 	b.w	1809a <d_print_comp+0x1eaa>
   19b5c:	2700      	movs	r7, #0
   19b5e:	1d20      	adds	r0, r4, #4
   19b60:	f884 7103 	strb.w	r7, [r4, #259]	; 0x103
   19b64:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19b68:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19b6c:	4798      	blx	r3
   19b6e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   19b72:	2101      	movs	r1, #1
   19b74:	2261      	movs	r2, #97	; 0x61
   19b76:	1847      	adds	r7, r0, r1
   19b78:	7122      	strb	r2, [r4, #4]
   19b7a:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
   19b7e:	f7fc bea3 	b.w	168c8 <d_print_comp+0x6d8>
   19b82:	f8d4 710c 	ldr.w	r7, [r4, #268]	; 0x10c
   19b86:	2000      	movs	r0, #0
   19b88:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19b8c:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   19b90:	1d20      	adds	r0, r4, #4
   19b92:	47b8      	blx	r7
   19b94:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19b98:	2101      	movs	r1, #1
   19b9a:	2264      	movs	r2, #100	; 0x64
   19b9c:	185f      	adds	r7, r3, r1
   19b9e:	7122      	strb	r2, [r4, #4]
   19ba0:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
   19ba4:	f7fc be83 	b.w	168ae <d_print_comp+0x6be>
   19ba8:	2300      	movs	r3, #0
   19baa:	1d20      	adds	r0, r4, #4
   19bac:	f884 3103 	strb.w	r3, [r4, #259]	; 0x103
   19bb0:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19bb4:	f8d4 710c 	ldr.w	r7, [r4, #268]	; 0x10c
   19bb8:	47b8      	blx	r7
   19bba:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   19bbe:	2101      	movs	r1, #1
   19bc0:	2262      	movs	r2, #98	; 0x62
   19bc2:	1843      	adds	r3, r0, r1
   19bc4:	7122      	strb	r2, [r4, #4]
   19bc6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19bca:	f7fc be63 	b.w	16894 <d_print_comp+0x6a4>
   19bce:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19bd2:	2000      	movs	r0, #0
   19bd4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19bd8:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   19bdc:	1d20      	adds	r0, r4, #4
   19bde:	4798      	blx	r3
   19be0:	f8d4 7124 	ldr.w	r7, [r4, #292]	; 0x124
   19be4:	2101      	movs	r1, #1
   19be6:	226d      	movs	r2, #109	; 0x6d
   19be8:	187b      	adds	r3, r7, r1
   19bea:	7122      	strb	r2, [r4, #4]
   19bec:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19bf0:	f7fc be43 	b.w	1687a <d_print_comp+0x68a>
   19bf4:	2700      	movs	r7, #0
   19bf6:	1d20      	adds	r0, r4, #4
   19bf8:	f884 7103 	strb.w	r7, [r4, #259]	; 0x103
   19bfc:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19c00:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19c04:	4798      	blx	r3
   19c06:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   19c0a:	2101      	movs	r1, #1
   19c0c:	2261      	movs	r2, #97	; 0x61
   19c0e:	1847      	adds	r7, r0, r1
   19c10:	7122      	strb	r2, [r4, #4]
   19c12:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
   19c16:	f7fc be23 	b.w	16860 <d_print_comp+0x670>
   19c1a:	f8d4 710c 	ldr.w	r7, [r4, #268]	; 0x10c
   19c1e:	2000      	movs	r0, #0
   19c20:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19c24:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   19c28:	1d20      	adds	r0, r4, #4
   19c2a:	47b8      	blx	r7
   19c2c:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   19c30:	2101      	movs	r1, #1
   19c32:	236c      	movs	r3, #108	; 0x6c
   19c34:	1857      	adds	r7, r2, r1
   19c36:	7123      	strb	r3, [r4, #4]
   19c38:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
   19c3c:	f7fc be03 	b.w	16846 <d_print_comp+0x656>
   19c40:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19c44:	2200      	movs	r2, #0
   19c46:	1d20      	adds	r0, r4, #4
   19c48:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   19c4c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19c50:	4798      	blx	r3
   19c52:	f8d4 7124 	ldr.w	r7, [r4, #292]	; 0x124
   19c56:	2101      	movs	r1, #1
   19c58:	237b      	movs	r3, #123	; 0x7b
   19c5a:	1878      	adds	r0, r7, r1
   19c5c:	7123      	strb	r3, [r4, #4]
   19c5e:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   19c62:	f7fc bde3 	b.w	1682c <d_print_comp+0x63c>
   19c66:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19c6a:	2200      	movs	r2, #0
   19c6c:	1d20      	adds	r0, r4, #4
   19c6e:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   19c72:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19c76:	4798      	blx	r3
   19c78:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   19c7c:	2101      	movs	r1, #1
   19c7e:	2272      	movs	r2, #114	; 0x72
   19c80:	1843      	adds	r3, r0, r1
   19c82:	7122      	strb	r2, [r4, #4]
   19c84:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19c88:	f7fd bc35 	b.w	174f6 <d_print_comp+0x1306>
   19c8c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19c90:	2200      	movs	r2, #0
   19c92:	1d20      	adds	r0, r4, #4
   19c94:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   19c98:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19c9c:	4798      	blx	r3
   19c9e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   19ca2:	2101      	movs	r1, #1
   19ca4:	226f      	movs	r2, #111	; 0x6f
   19ca6:	1843      	adds	r3, r0, r1
   19ca8:	7122      	strb	r2, [r4, #4]
   19caa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19cae:	f7fd bc15 	b.w	174dc <d_print_comp+0x12ec>
   19cb2:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19cb6:	2200      	movs	r2, #0
   19cb8:	1d20      	adds	r0, r4, #4
   19cba:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   19cbe:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19cc2:	4798      	blx	r3
   19cc4:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   19cc8:	2101      	movs	r1, #1
   19cca:	2272      	movs	r2, #114	; 0x72
   19ccc:	1843      	adds	r3, r0, r1
   19cce:	7122      	strb	r2, [r4, #4]
   19cd0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19cd4:	f7fe bd10 	b.w	186f8 <d_print_comp+0x2508>
   19cd8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19cdc:	2200      	movs	r2, #0
   19cde:	1d20      	adds	r0, r4, #4
   19ce0:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   19ce4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19ce8:	4798      	blx	r3
   19cea:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   19cee:	2101      	movs	r1, #1
   19cf0:	226f      	movs	r2, #111	; 0x6f
   19cf2:	1843      	adds	r3, r0, r1
   19cf4:	7122      	strb	r2, [r4, #4]
   19cf6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19cfa:	f7fe bcf0 	b.w	186de <d_print_comp+0x24ee>
   19cfe:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19d02:	2200      	movs	r2, #0
   19d04:	1d20      	adds	r0, r4, #4
   19d06:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   19d0a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19d0e:	4798      	blx	r3
   19d10:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   19d14:	2101      	movs	r1, #1
   19d16:	2272      	movs	r2, #114	; 0x72
   19d18:	1843      	adds	r3, r0, r1
   19d1a:	7122      	strb	r2, [r4, #4]
   19d1c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19d20:	f7fd beaf 	b.w	17a82 <d_print_comp+0x1892>
   19d24:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19d28:	2200      	movs	r2, #0
   19d2a:	1d20      	adds	r0, r4, #4
   19d2c:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   19d30:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19d34:	4798      	blx	r3
   19d36:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   19d3a:	2101      	movs	r1, #1
   19d3c:	226f      	movs	r2, #111	; 0x6f
   19d3e:	1843      	adds	r3, r0, r1
   19d40:	7122      	strb	r2, [r4, #4]
   19d42:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19d46:	f7fd be8f 	b.w	17a68 <d_print_comp+0x1878>
   19d4a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19d4e:	2200      	movs	r2, #0
   19d50:	1d20      	adds	r0, r4, #4
   19d52:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   19d56:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19d5a:	4798      	blx	r3
   19d5c:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   19d60:	2101      	movs	r1, #1
   19d62:	2266      	movs	r2, #102	; 0x66
   19d64:	1843      	adds	r3, r0, r1
   19d66:	7122      	strb	r2, [r4, #4]
   19d68:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19d6c:	f7fd be6f 	b.w	17a4e <d_print_comp+0x185e>
   19d70:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19d74:	2200      	movs	r2, #0
   19d76:	1d20      	adds	r0, r4, #4
   19d78:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   19d7c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19d80:	4798      	blx	r3
   19d82:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   19d86:	2101      	movs	r1, #1
   19d88:	2220      	movs	r2, #32
   19d8a:	1843      	adds	r3, r0, r1
   19d8c:	7122      	strb	r2, [r4, #4]
   19d8e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19d92:	f7fd be4f 	b.w	17a34 <d_print_comp+0x1844>
   19d96:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19d9a:	2200      	movs	r2, #0
   19d9c:	1d20      	adds	r0, r4, #4
   19d9e:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   19da2:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19da6:	4798      	blx	r3
   19da8:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   19dac:	2101      	movs	r1, #1
   19dae:	2266      	movs	r2, #102	; 0x66
   19db0:	1843      	adds	r3, r0, r1
   19db2:	7122      	strb	r2, [r4, #4]
   19db4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19db8:	f7fe bc84 	b.w	186c4 <d_print_comp+0x24d4>
   19dbc:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19dc0:	2200      	movs	r2, #0
   19dc2:	1d20      	adds	r0, r4, #4
   19dc4:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   19dc8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19dcc:	4798      	blx	r3
   19dce:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   19dd2:	2101      	movs	r1, #1
   19dd4:	2220      	movs	r2, #32
   19dd6:	1843      	adds	r3, r0, r1
   19dd8:	7122      	strb	r2, [r4, #4]
   19dda:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19dde:	f7fe bc64 	b.w	186aa <d_print_comp+0x24ba>
   19de2:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19de6:	2200      	movs	r2, #0
   19de8:	1d20      	adds	r0, r4, #4
   19dea:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   19dee:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19df2:	4798      	blx	r3
   19df4:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   19df8:	2101      	movs	r1, #1
   19dfa:	2265      	movs	r2, #101	; 0x65
   19dfc:	1843      	adds	r3, r0, r1
   19dfe:	7122      	strb	r2, [r4, #4]
   19e00:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19e04:	f7fe bc44 	b.w	18690 <d_print_comp+0x24a0>
   19e08:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19e0c:	2200      	movs	r2, #0
   19e0e:	1d20      	adds	r0, r4, #4
   19e10:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   19e14:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19e18:	4798      	blx	r3
   19e1a:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   19e1e:	2101      	movs	r1, #1
   19e20:	226c      	movs	r2, #108	; 0x6c
   19e22:	1843      	adds	r3, r0, r1
   19e24:	7122      	strb	r2, [r4, #4]
   19e26:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19e2a:	f7fe bc24 	b.w	18676 <d_print_comp+0x2486>
   19e2e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19e32:	2200      	movs	r2, #0
   19e34:	1d20      	adds	r0, r4, #4
   19e36:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   19e3a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19e3e:	4798      	blx	r3
   19e40:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   19e44:	2101      	movs	r1, #1
   19e46:	2262      	movs	r2, #98	; 0x62
   19e48:	1843      	adds	r3, r0, r1
   19e4a:	7122      	strb	r2, [r4, #4]
   19e4c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19e50:	f7fe bc04 	b.w	1865c <d_print_comp+0x246c>
   19e54:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19e58:	2200      	movs	r2, #0
   19e5a:	1d20      	adds	r0, r4, #4
   19e5c:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   19e60:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19e64:	4798      	blx	r3
   19e66:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   19e6a:	2101      	movs	r1, #1
   19e6c:	2261      	movs	r2, #97	; 0x61
   19e6e:	1843      	adds	r3, r0, r1
   19e70:	7122      	strb	r2, [r4, #4]
   19e72:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19e76:	f7fe bbe4 	b.w	18642 <d_print_comp+0x2452>
   19e7a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19e7e:	2200      	movs	r2, #0
   19e80:	1d20      	adds	r0, r4, #4
   19e82:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   19e86:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19e8a:	4798      	blx	r3
   19e8c:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   19e90:	2101      	movs	r1, #1
   19e92:	2274      	movs	r2, #116	; 0x74
   19e94:	1843      	adds	r3, r0, r1
   19e96:	7122      	strb	r2, [r4, #4]
   19e98:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19e9c:	f7fe bbc4 	b.w	18628 <d_print_comp+0x2438>
   19ea0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19ea4:	2200      	movs	r2, #0
   19ea6:	1d20      	adds	r0, r4, #4
   19ea8:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   19eac:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19eb0:	4798      	blx	r3
   19eb2:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   19eb6:	2101      	movs	r1, #1
   19eb8:	2276      	movs	r2, #118	; 0x76
   19eba:	1843      	adds	r3, r0, r1
   19ebc:	7122      	strb	r2, [r4, #4]
   19ebe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19ec2:	f7fe bba4 	b.w	1860e <d_print_comp+0x241e>
   19ec6:	2300      	movs	r3, #0
   19ec8:	1d20      	adds	r0, r4, #4
   19eca:	f884 3103 	strb.w	r3, [r4, #259]	; 0x103
   19ece:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19ed2:	f8d4 710c 	ldr.w	r7, [r4, #268]	; 0x10c
   19ed6:	47b8      	blx	r7
   19ed8:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   19edc:	2101      	movs	r1, #1
   19ede:	2270      	movs	r2, #112	; 0x70
   19ee0:	1843      	adds	r3, r0, r1
   19ee2:	7122      	strb	r2, [r4, #4]
   19ee4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19ee8:	f7fc bc0e 	b.w	16708 <d_print_comp+0x518>
   19eec:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19ef0:	2000      	movs	r0, #0
   19ef2:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19ef6:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   19efa:	1d20      	adds	r0, r4, #4
   19efc:	4798      	blx	r3
   19efe:	f8d4 7124 	ldr.w	r7, [r4, #292]	; 0x124
   19f02:	2101      	movs	r1, #1
   19f04:	2279      	movs	r2, #121	; 0x79
   19f06:	187b      	adds	r3, r7, r1
   19f08:	7122      	strb	r2, [r4, #4]
   19f0a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19f0e:	f7fc bbee 	b.w	166ee <d_print_comp+0x4fe>
   19f12:	2700      	movs	r7, #0
   19f14:	1d20      	adds	r0, r4, #4
   19f16:	f884 7103 	strb.w	r7, [r4, #259]	; 0x103
   19f1a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19f1e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19f22:	4798      	blx	r3
   19f24:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   19f28:	2101      	movs	r1, #1
   19f2a:	2274      	movs	r2, #116	; 0x74
   19f2c:	1847      	adds	r7, r0, r1
   19f2e:	7122      	strb	r2, [r4, #4]
   19f30:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
   19f34:	f7fc bbce 	b.w	166d4 <d_print_comp+0x4e4>
   19f38:	f8d4 710c 	ldr.w	r7, [r4, #268]	; 0x10c
   19f3c:	2000      	movs	r0, #0
   19f3e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19f42:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   19f46:	1d20      	adds	r0, r4, #4
   19f48:	47b8      	blx	r7
   19f4a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19f4e:	2101      	movs	r1, #1
   19f50:	2220      	movs	r2, #32
   19f52:	185f      	adds	r7, r3, r1
   19f54:	7122      	strb	r2, [r4, #4]
   19f56:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
   19f5a:	f7fc bbae 	b.w	166ba <d_print_comp+0x4ca>
   19f5e:	4650      	mov	r0, sl
   19f60:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19f64:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19f68:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   19f6c:	4798      	blx	r3
   19f6e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   19f72:	2101      	movs	r1, #1
   19f74:	464b      	mov	r3, r9
   19f76:	1842      	adds	r2, r0, r1
   19f78:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   19f7c:	f7fc bfc4 	b.w	16f08 <d_print_comp+0xd18>
   19f80:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19f84:	2000      	movs	r0, #0
   19f86:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19f8a:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   19f8e:	1d20      	adds	r0, r4, #4
   19f90:	4798      	blx	r3
   19f92:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19f96:	2101      	movs	r1, #1
   19f98:	226f      	movs	r2, #111	; 0x6f
   19f9a:	1858      	adds	r0, r3, r1
   19f9c:	7122      	strb	r2, [r4, #4]
   19f9e:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   19fa2:	f7fd be0d 	b.w	17bc0 <d_print_comp+0x19d0>
   19fa6:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19faa:	2000      	movs	r0, #0
   19fac:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19fb0:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   19fb4:	1d20      	adds	r0, r4, #4
   19fb6:	4798      	blx	r3
   19fb8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19fbc:	2101      	movs	r1, #1
   19fbe:	2266      	movs	r2, #102	; 0x66
   19fc0:	1858      	adds	r0, r3, r1
   19fc2:	7122      	strb	r2, [r4, #4]
   19fc4:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   19fc8:	f7fd bded 	b.w	17ba6 <d_print_comp+0x19b6>
   19fcc:	2500      	movs	r5, #0
   19fce:	1d20      	adds	r0, r4, #4
   19fd0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19fd4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19fd8:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   19fdc:	4798      	blx	r3
   19fde:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19fe2:	2201      	movs	r2, #1
   19fe4:	4629      	mov	r1, r5
   19fe6:	1898      	adds	r0, r3, r2
   19fe8:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   19fec:	f7fe bed4 	b.w	18d98 <d_print_comp+0x2ba8>
   19ff0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   19ff4:	2000      	movs	r0, #0
   19ff6:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   19ffa:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   19ffe:	1d20      	adds	r0, r4, #4
   1a000:	4798      	blx	r3
   1a002:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a006:	2101      	movs	r1, #1
   1a008:	2220      	movs	r2, #32
   1a00a:	1858      	adds	r0, r3, r1
   1a00c:	7122      	strb	r2, [r4, #4]
   1a00e:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a012:	f7fd bdbb 	b.w	17b8c <d_print_comp+0x199c>
   1a016:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a01a:	2000      	movs	r0, #0
   1a01c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a020:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a024:	1d20      	adds	r0, r4, #4
   1a026:	4798      	blx	r3
   1a028:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1a02c:	2101      	movs	r1, #1
   1a02e:	7126      	strb	r6, [r4, #4]
   1a030:	1853      	adds	r3, r2, r1
   1a032:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a036:	f7fd bd9c 	b.w	17b72 <d_print_comp+0x1982>
   1a03a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a03e:	2200      	movs	r2, #0
   1a040:	1d20      	adds	r0, r4, #4
   1a042:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1a046:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a04a:	4798      	blx	r3
   1a04c:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1a050:	2101      	movs	r1, #1
   1a052:	2254      	movs	r2, #84	; 0x54
   1a054:	1843      	adds	r3, r0, r1
   1a056:	7122      	strb	r2, [r4, #4]
   1a058:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a05c:	f7fd bd7c 	b.w	17b58 <d_print_comp+0x1968>
   1a060:	f8d4 610c 	ldr.w	r6, [r4, #268]	; 0x10c
   1a064:	2000      	movs	r0, #0
   1a066:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a06a:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a06e:	1d20      	adds	r0, r4, #4
   1a070:	47b0      	blx	r6
   1a072:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a076:	2101      	movs	r1, #1
   1a078:	2256      	movs	r2, #86	; 0x56
   1a07a:	185e      	adds	r6, r3, r1
   1a07c:	7122      	strb	r2, [r4, #4]
   1a07e:	f8c4 6124 	str.w	r6, [r4, #292]	; 0x124
   1a082:	f7fd bd5c 	b.w	17b3e <d_print_comp+0x194e>
   1a086:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a08a:	2200      	movs	r2, #0
   1a08c:	1d20      	adds	r0, r4, #4
   1a08e:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1a092:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a096:	4798      	blx	r3
   1a098:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1a09c:	2101      	movs	r1, #1
   1a09e:	2266      	movs	r2, #102	; 0x66
   1a0a0:	1843      	adds	r3, r0, r1
   1a0a2:	7122      	strb	r2, [r4, #4]
   1a0a4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a0a8:	f7fd ba0b 	b.w	174c2 <d_print_comp+0x12d2>
   1a0ac:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a0b0:	2200      	movs	r2, #0
   1a0b2:	1d20      	adds	r0, r4, #4
   1a0b4:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1a0b8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a0bc:	4798      	blx	r3
   1a0be:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1a0c2:	2101      	movs	r1, #1
   1a0c4:	2220      	movs	r2, #32
   1a0c6:	1843      	adds	r3, r0, r1
   1a0c8:	7122      	strb	r2, [r4, #4]
   1a0ca:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a0ce:	f7fd b9eb 	b.w	174a8 <d_print_comp+0x12b8>
   1a0d2:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a0d6:	2200      	movs	r2, #0
   1a0d8:	1d20      	adds	r0, r4, #4
   1a0da:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1a0de:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a0e2:	4798      	blx	r3
   1a0e4:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1a0e8:	2101      	movs	r1, #1
   1a0ea:	2273      	movs	r2, #115	; 0x73
   1a0ec:	1843      	adds	r3, r0, r1
   1a0ee:	7122      	strb	r2, [r4, #4]
   1a0f0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a0f4:	f7fd b9cb 	b.w	1748e <d_print_comp+0x129e>
   1a0f8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a0fc:	2200      	movs	r2, #0
   1a0fe:	1d20      	adds	r0, r4, #4
   1a100:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1a104:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a108:	4798      	blx	r3
   1a10a:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1a10e:	2101      	movs	r1, #1
   1a110:	2261      	movs	r2, #97	; 0x61
   1a112:	1843      	adds	r3, r0, r1
   1a114:	7122      	strb	r2, [r4, #4]
   1a116:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a11a:	f7fd b9ab 	b.w	17474 <d_print_comp+0x1284>
   1a11e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a122:	2200      	movs	r2, #0
   1a124:	1d20      	adds	r0, r4, #4
   1a126:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1a12a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a12e:	4798      	blx	r3
   1a130:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1a134:	2101      	movs	r1, #1
   1a136:	2269      	movs	r2, #105	; 0x69
   1a138:	1843      	adds	r3, r0, r1
   1a13a:	7122      	strb	r2, [r4, #4]
   1a13c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a140:	f7fd b98b 	b.w	1745a <d_print_comp+0x126a>
   1a144:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a148:	2200      	movs	r2, #0
   1a14a:	1d20      	adds	r0, r4, #4
   1a14c:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1a150:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a154:	4798      	blx	r3
   1a156:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1a15a:	2101      	movs	r1, #1
   1a15c:	226c      	movs	r2, #108	; 0x6c
   1a15e:	1843      	adds	r3, r0, r1
   1a160:	7122      	strb	r2, [r4, #4]
   1a162:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a166:	f7fd b96b 	b.w	17440 <d_print_comp+0x1250>
   1a16a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a16e:	2200      	movs	r2, #0
   1a170:	1d20      	adds	r0, r4, #4
   1a172:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1a176:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a17a:	4798      	blx	r3
   1a17c:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1a180:	2101      	movs	r1, #1
   1a182:	2261      	movs	r2, #97	; 0x61
   1a184:	1843      	adds	r3, r0, r1
   1a186:	7122      	strb	r2, [r4, #4]
   1a188:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a18c:	f7fd b94b 	b.w	17426 <d_print_comp+0x1236>
   1a190:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a194:	2200      	movs	r2, #0
   1a196:	1d20      	adds	r0, r4, #4
   1a198:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1a19c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a1a0:	4798      	blx	r3
   1a1a2:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1a1a6:	2101      	movs	r1, #1
   1a1a8:	2220      	movs	r2, #32
   1a1aa:	1843      	adds	r3, r0, r1
   1a1ac:	7122      	strb	r2, [r4, #4]
   1a1ae:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a1b2:	f7fd b92b 	b.w	1740c <d_print_comp+0x121c>
   1a1b6:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a1ba:	2200      	movs	r2, #0
   1a1bc:	1d20      	adds	r0, r4, #4
   1a1be:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1a1c2:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a1c6:	4798      	blx	r3
   1a1c8:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1a1cc:	2101      	movs	r1, #1
   1a1ce:	226e      	movs	r2, #110	; 0x6e
   1a1d0:	1843      	adds	r3, r0, r1
   1a1d2:	7122      	strb	r2, [r4, #4]
   1a1d4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a1d8:	f7fd b90b 	b.w	173f2 <d_print_comp+0x1202>
   1a1dc:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a1e0:	2200      	movs	r2, #0
   1a1e2:	1d20      	adds	r0, r4, #4
   1a1e4:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1a1e8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a1ec:	4798      	blx	r3
   1a1ee:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1a1f2:	2101      	movs	r1, #1
   1a1f4:	2265      	movs	r2, #101	; 0x65
   1a1f6:	1843      	adds	r3, r0, r1
   1a1f8:	7122      	strb	r2, [r4, #4]
   1a1fa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a1fe:	f7fd b8eb 	b.w	173d8 <d_print_comp+0x11e8>
   1a202:	2200      	movs	r2, #0
   1a204:	1d20      	adds	r0, r4, #4
   1a206:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1a20a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a20e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a212:	4798      	blx	r3
   1a214:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1a218:	2101      	movs	r1, #1
   1a21a:	7126      	strb	r6, [r4, #4]
   1a21c:	1842      	adds	r2, r0, r1
   1a21e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a222:	f7fd b8cc 	b.w	173be <d_print_comp+0x11ce>
   1a226:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a22a:	2000      	movs	r0, #0
   1a22c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a230:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a234:	1d20      	adds	r0, r4, #4
   1a236:	4798      	blx	r3
   1a238:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a23c:	2101      	movs	r1, #1
   1a23e:	2264      	movs	r2, #100	; 0x64
   1a240:	1858      	adds	r0, r3, r1
   1a242:	7122      	strb	r2, [r4, #4]
   1a244:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a248:	f7fd b8ac 	b.w	173a4 <d_print_comp+0x11b4>
   1a24c:	2500      	movs	r5, #0
   1a24e:	1d20      	adds	r0, r4, #4
   1a250:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a254:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a258:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   1a25c:	4798      	blx	r3
   1a25e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a262:	2201      	movs	r2, #1
   1a264:	4629      	mov	r1, r5
   1a266:	1898      	adds	r0, r3, r2
   1a268:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a26c:	f7fe bd7a 	b.w	18d64 <d_print_comp+0x2b74>
   1a270:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a274:	2000      	movs	r0, #0
   1a276:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a27a:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a27e:	1d20      	adds	r0, r4, #4
   1a280:	4798      	blx	r3
   1a282:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a286:	2101      	movs	r1, #1
   1a288:	2265      	movs	r2, #101	; 0x65
   1a28a:	1858      	adds	r0, r3, r1
   1a28c:	7122      	strb	r2, [r4, #4]
   1a28e:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a292:	f7fc b90c 	b.w	164ae <d_print_comp+0x2be>
   1a296:	f8d4 710c 	ldr.w	r7, [r4, #268]	; 0x10c
   1a29a:	2000      	movs	r0, #0
   1a29c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a2a0:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a2a4:	1d20      	adds	r0, r4, #4
   1a2a6:	47b8      	blx	r7
   1a2a8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a2ac:	2101      	movs	r1, #1
   1a2ae:	2265      	movs	r2, #101	; 0x65
   1a2b0:	185f      	adds	r7, r3, r1
   1a2b2:	7122      	strb	r2, [r4, #4]
   1a2b4:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
   1a2b8:	f7fc ba33 	b.w	16722 <d_print_comp+0x532>
   1a2bc:	f8d4 710c 	ldr.w	r7, [r4, #268]	; 0x10c
   1a2c0:	2000      	movs	r0, #0
   1a2c2:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a2c6:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a2ca:	1d20      	adds	r0, r4, #4
   1a2cc:	47b8      	blx	r7
   1a2ce:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a2d2:	2101      	movs	r1, #1
   1a2d4:	226d      	movs	r2, #109	; 0x6d
   1a2d6:	185f      	adds	r7, r3, r1
   1a2d8:	7122      	strb	r2, [r4, #4]
   1a2da:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
   1a2de:	f7fd bd83 	b.w	17de8 <d_print_comp+0x1bf8>
   1a2e2:	2300      	movs	r3, #0
   1a2e4:	1d20      	adds	r0, r4, #4
   1a2e6:	f884 3103 	strb.w	r3, [r4, #259]	; 0x103
   1a2ea:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a2ee:	f8d4 710c 	ldr.w	r7, [r4, #268]	; 0x10c
   1a2f2:	47b8      	blx	r7
   1a2f4:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1a2f8:	2101      	movs	r1, #1
   1a2fa:	2272      	movs	r2, #114	; 0x72
   1a2fc:	1843      	adds	r3, r0, r1
   1a2fe:	7122      	strb	r2, [r4, #4]
   1a300:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a304:	f7fd bd63 	b.w	17dce <d_print_comp+0x1bde>
   1a308:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a30c:	2000      	movs	r0, #0
   1a30e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a312:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a316:	1d20      	adds	r0, r4, #4
   1a318:	4798      	blx	r3
   1a31a:	f8d4 7124 	ldr.w	r7, [r4, #292]	; 0x124
   1a31e:	2101      	movs	r1, #1
   1a320:	2261      	movs	r2, #97	; 0x61
   1a322:	187b      	adds	r3, r7, r1
   1a324:	7122      	strb	r2, [r4, #4]
   1a326:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a32a:	f7fd bd43 	b.w	17db4 <d_print_comp+0x1bc4>
   1a32e:	2700      	movs	r7, #0
   1a330:	1d20      	adds	r0, r4, #4
   1a332:	f884 7103 	strb.w	r7, [r4, #259]	; 0x103
   1a336:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a33a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a33e:	4798      	blx	r3
   1a340:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1a344:	2101      	movs	r1, #1
   1a346:	2270      	movs	r2, #112	; 0x70
   1a348:	1847      	adds	r7, r0, r1
   1a34a:	7122      	strb	r2, [r4, #4]
   1a34c:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
   1a350:	f7fd bd23 	b.w	17d9a <d_print_comp+0x1baa>
   1a354:	2000      	movs	r0, #0
   1a356:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a35a:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a35e:	1d20      	adds	r0, r4, #4
   1a360:	f8d4 710c 	ldr.w	r7, [r4, #268]	; 0x10c
   1a364:	47b8      	blx	r7
   1a366:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a36a:	2101      	movs	r1, #1
   1a36c:	227b      	movs	r2, #123	; 0x7b
   1a36e:	1858      	adds	r0, r3, r1
   1a370:	7122      	strb	r2, [r4, #4]
   1a372:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a376:	f7fd bd03 	b.w	17d80 <d_print_comp+0x1b90>
   1a37a:	2600      	movs	r6, #0
   1a37c:	1d20      	adds	r0, r4, #4
   1a37e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a382:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a386:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   1a38a:	4798      	blx	r3
   1a38c:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1a390:	2301      	movs	r3, #1
   1a392:	4631      	mov	r1, r6
   1a394:	18d0      	adds	r0, r2, r3
   1a396:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a39a:	f7fd b95d 	b.w	17658 <d_print_comp+0x1468>
   1a39e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a3a2:	2200      	movs	r2, #0
   1a3a4:	1d20      	adds	r0, r4, #4
   1a3a6:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1a3aa:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a3ae:	4798      	blx	r3
   1a3b0:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1a3b4:	2101      	movs	r1, #1
   1a3b6:	226f      	movs	r2, #111	; 0x6f
   1a3b8:	1843      	adds	r3, r0, r1
   1a3ba:	7122      	strb	r2, [r4, #4]
   1a3bc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a3c0:	f7fd bb2b 	b.w	17a1a <d_print_comp+0x182a>
   1a3c4:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a3c8:	2200      	movs	r2, #0
   1a3ca:	1d20      	adds	r0, r4, #4
   1a3cc:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1a3d0:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a3d4:	4798      	blx	r3
   1a3d6:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1a3da:	2101      	movs	r1, #1
   1a3dc:	2266      	movs	r2, #102	; 0x66
   1a3de:	1843      	adds	r3, r0, r1
   1a3e0:	7122      	strb	r2, [r4, #4]
   1a3e2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a3e6:	f7fd bb0b 	b.w	17a00 <d_print_comp+0x1810>
   1a3ea:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a3ee:	2200      	movs	r2, #0
   1a3f0:	1d20      	adds	r0, r4, #4
   1a3f2:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1a3f6:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a3fa:	4798      	blx	r3
   1a3fc:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1a400:	2101      	movs	r1, #1
   1a402:	226e      	movs	r2, #110	; 0x6e
   1a404:	1843      	adds	r3, r0, r1
   1a406:	7122      	strb	r2, [r4, #4]
   1a408:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a40c:	f7fd baeb 	b.w	179e6 <d_print_comp+0x17f6>
   1a410:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a414:	2200      	movs	r2, #0
   1a416:	1d20      	adds	r0, r4, #4
   1a418:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1a41c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a420:	4798      	blx	r3
   1a422:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1a426:	2101      	movs	r1, #1
   1a428:	2269      	movs	r2, #105	; 0x69
   1a42a:	1843      	adds	r3, r0, r1
   1a42c:	7122      	strb	r2, [r4, #4]
   1a42e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a432:	f7fd bacb 	b.w	179cc <d_print_comp+0x17dc>
   1a436:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a43a:	2200      	movs	r2, #0
   1a43c:	1d20      	adds	r0, r4, #4
   1a43e:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1a442:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a446:	4798      	blx	r3
   1a448:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1a44c:	2101      	movs	r1, #1
   1a44e:	2265      	movs	r2, #101	; 0x65
   1a450:	1843      	adds	r3, r0, r1
   1a452:	7122      	strb	r2, [r4, #4]
   1a454:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a458:	f7fd baab 	b.w	179b2 <d_print_comp+0x17c2>
   1a45c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a460:	2200      	movs	r2, #0
   1a462:	1d20      	adds	r0, r4, #4
   1a464:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1a468:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a46c:	4798      	blx	r3
   1a46e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1a472:	2101      	movs	r1, #1
   1a474:	2270      	movs	r2, #112	; 0x70
   1a476:	1843      	adds	r3, r0, r1
   1a478:	7122      	strb	r2, [r4, #4]
   1a47a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a47e:	f7fd ba8b 	b.w	17998 <d_print_comp+0x17a8>
   1a482:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a486:	2200      	movs	r2, #0
   1a488:	1d20      	adds	r0, r4, #4
   1a48a:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1a48e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a492:	4798      	blx	r3
   1a494:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1a498:	2101      	movs	r1, #1
   1a49a:	2279      	movs	r2, #121	; 0x79
   1a49c:	1843      	adds	r3, r0, r1
   1a49e:	7122      	strb	r2, [r4, #4]
   1a4a0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a4a4:	f7fd ba6b 	b.w	1797e <d_print_comp+0x178e>
   1a4a8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a4ac:	2200      	movs	r2, #0
   1a4ae:	1d20      	adds	r0, r4, #4
   1a4b0:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1a4b4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a4b8:	4798      	blx	r3
   1a4ba:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1a4be:	2101      	movs	r1, #1
   1a4c0:	2274      	movs	r2, #116	; 0x74
   1a4c2:	1843      	adds	r3, r0, r1
   1a4c4:	7122      	strb	r2, [r4, #4]
   1a4c6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a4ca:	f7fd ba4b 	b.w	17964 <d_print_comp+0x1774>
   1a4ce:	2600      	movs	r6, #0
   1a4d0:	1d20      	adds	r0, r4, #4
   1a4d2:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a4d6:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a4da:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   1a4de:	4798      	blx	r3
   1a4e0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a4e4:	2001      	movs	r0, #1
   1a4e6:	4631      	mov	r1, r6
   1a4e8:	181a      	adds	r2, r3, r0
   1a4ea:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1a4ee:	f7fe b919 	b.w	18724 <d_print_comp+0x2534>
   1a4f2:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a4f6:	2000      	movs	r0, #0
   1a4f8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a4fc:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a500:	1d20      	adds	r0, r4, #4
   1a502:	4798      	blx	r3
   1a504:	f8d4 7124 	ldr.w	r7, [r4, #292]	; 0x124
   1a508:	2101      	movs	r1, #1
   1a50a:	226f      	movs	r2, #111	; 0x6f
   1a50c:	187b      	adds	r3, r7, r1
   1a50e:	7122      	strb	r2, [r4, #4]
   1a510:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a514:	f7fc bc30 	b.w	16d78 <d_print_comp+0xb88>
   1a518:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a51c:	2000      	movs	r0, #0
   1a51e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a522:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a526:	1d20      	adds	r0, r4, #4
   1a528:	4798      	blx	r3
   1a52a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a52e:	2101      	movs	r1, #1
   1a530:	2265      	movs	r2, #101	; 0x65
   1a532:	1858      	adds	r0, r3, r1
   1a534:	7122      	strb	r2, [r4, #4]
   1a536:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a53a:	f7fe b9b3 	b.w	188a4 <d_print_comp+0x26b4>
   1a53e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a542:	2000      	movs	r0, #0
   1a544:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a548:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a54c:	1d20      	adds	r0, r4, #4
   1a54e:	4798      	blx	r3
   1a550:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a554:	2101      	movs	r1, #1
   1a556:	2263      	movs	r2, #99	; 0x63
   1a558:	1858      	adds	r0, r3, r1
   1a55a:	7122      	strb	r2, [r4, #4]
   1a55c:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a560:	f7fe b993 	b.w	1888a <d_print_comp+0x269a>
   1a564:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a568:	2000      	movs	r0, #0
   1a56a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a56e:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a572:	1d20      	adds	r0, r4, #4
   1a574:	4798      	blx	r3
   1a576:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a57a:	2101      	movs	r1, #1
   1a57c:	2272      	movs	r2, #114	; 0x72
   1a57e:	1858      	adds	r0, r3, r1
   1a580:	7122      	strb	r2, [r4, #4]
   1a582:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a586:	f7fe b973 	b.w	18870 <d_print_comp+0x2680>
   1a58a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a58e:	2000      	movs	r0, #0
   1a590:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a594:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a598:	1d20      	adds	r0, r4, #4
   1a59a:	4798      	blx	r3
   1a59c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a5a0:	2101      	movs	r1, #1
   1a5a2:	2275      	movs	r2, #117	; 0x75
   1a5a4:	1858      	adds	r0, r3, r1
   1a5a6:	7122      	strb	r2, [r4, #4]
   1a5a8:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a5ac:	f7fe b953 	b.w	18856 <d_print_comp+0x2666>
   1a5b0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a5b4:	2000      	movs	r0, #0
   1a5b6:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a5ba:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a5be:	1d20      	adds	r0, r4, #4
   1a5c0:	4798      	blx	r3
   1a5c2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a5c6:	2101      	movs	r1, #1
   1a5c8:	226f      	movs	r2, #111	; 0x6f
   1a5ca:	1858      	adds	r0, r3, r1
   1a5cc:	7122      	strb	r2, [r4, #4]
   1a5ce:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a5d2:	f7fe b933 	b.w	1883c <d_print_comp+0x264c>
   1a5d6:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a5da:	2000      	movs	r0, #0
   1a5dc:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a5e0:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a5e4:	1d20      	adds	r0, r4, #4
   1a5e6:	4798      	blx	r3
   1a5e8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a5ec:	2101      	movs	r1, #1
   1a5ee:	2273      	movs	r2, #115	; 0x73
   1a5f0:	1858      	adds	r0, r3, r1
   1a5f2:	7122      	strb	r2, [r4, #4]
   1a5f4:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a5f8:	f7fe b913 	b.w	18822 <d_print_comp+0x2632>
   1a5fc:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a600:	2000      	movs	r0, #0
   1a602:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a606:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a60a:	1d20      	adds	r0, r4, #4
   1a60c:	4798      	blx	r3
   1a60e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a612:	2101      	movs	r1, #1
   1a614:	2265      	movs	r2, #101	; 0x65
   1a616:	1858      	adds	r0, r3, r1
   1a618:	7122      	strb	r2, [r4, #4]
   1a61a:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a61e:	f7fe b8f3 	b.w	18808 <d_print_comp+0x2618>
   1a622:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a626:	2000      	movs	r0, #0
   1a628:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a62c:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a630:	1d20      	adds	r0, r4, #4
   1a632:	4798      	blx	r3
   1a634:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a638:	2101      	movs	r1, #1
   1a63a:	2272      	movs	r2, #114	; 0x72
   1a63c:	1858      	adds	r0, r3, r1
   1a63e:	7122      	strb	r2, [r4, #4]
   1a640:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a644:	f7fe b8d3 	b.w	187ee <d_print_comp+0x25fe>
   1a648:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a64c:	2000      	movs	r0, #0
   1a64e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a652:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a656:	1d20      	adds	r0, r4, #4
   1a658:	4798      	blx	r3
   1a65a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a65e:	2101      	movs	r1, #1
   1a660:	2220      	movs	r2, #32
   1a662:	1858      	adds	r0, r3, r1
   1a664:	7122      	strb	r2, [r4, #4]
   1a666:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a66a:	f7fe b8b3 	b.w	187d4 <d_print_comp+0x25e4>
   1a66e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a672:	2000      	movs	r0, #0
   1a674:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a678:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a67c:	1d20      	adds	r0, r4, #4
   1a67e:	4798      	blx	r3
   1a680:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a684:	2101      	movs	r1, #1
   1a686:	2261      	movs	r2, #97	; 0x61
   1a688:	1858      	adds	r0, r3, r1
   1a68a:	7122      	strb	r2, [r4, #4]
   1a68c:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a690:	f7fe b893 	b.w	187ba <d_print_comp+0x25ca>
   1a694:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a698:	2000      	movs	r0, #0
   1a69a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a69e:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a6a2:	1d20      	adds	r0, r4, #4
   1a6a4:	4798      	blx	r3
   1a6a6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a6aa:	2101      	movs	r1, #1
   1a6ac:	2276      	movs	r2, #118	; 0x76
   1a6ae:	1858      	adds	r0, r3, r1
   1a6b0:	7122      	strb	r2, [r4, #4]
   1a6b2:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a6b6:	f7fe b873 	b.w	187a0 <d_print_comp+0x25b0>
   1a6ba:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a6be:	2000      	movs	r0, #0
   1a6c0:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a6c4:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a6c8:	1d20      	adds	r0, r4, #4
   1a6ca:	4798      	blx	r3
   1a6cc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a6d0:	2101      	movs	r1, #1
   1a6d2:	2261      	movs	r2, #97	; 0x61
   1a6d4:	1858      	adds	r0, r3, r1
   1a6d6:	7122      	strb	r2, [r4, #4]
   1a6d8:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a6dc:	f7fe b853 	b.w	18786 <d_print_comp+0x2596>
   1a6e0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a6e4:	2000      	movs	r0, #0
   1a6e6:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a6ea:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a6ee:	1d20      	adds	r0, r4, #4
   1a6f0:	4798      	blx	r3
   1a6f2:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1a6f6:	2101      	movs	r1, #1
   1a6f8:	206a      	movs	r0, #106	; 0x6a
   1a6fa:	1853      	adds	r3, r2, r1
   1a6fc:	7120      	strb	r0, [r4, #4]
   1a6fe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a702:	f7fe b833 	b.w	1876c <d_print_comp+0x257c>
   1a706:	2500      	movs	r5, #0
   1a708:	1d20      	adds	r0, r4, #4
   1a70a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a70e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a712:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   1a716:	4798      	blx	r3
   1a718:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a71c:	2201      	movs	r2, #1
   1a71e:	4629      	mov	r1, r5
   1a720:	1898      	adds	r0, r3, r2
   1a722:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a726:	f7fb bed6 	b.w	164d6 <d_print_comp+0x2e6>
   1a72a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a72e:	2000      	movs	r0, #0
   1a730:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a734:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a738:	1d20      	adds	r0, r4, #4
   1a73a:	4798      	blx	r3
   1a73c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a740:	2101      	movs	r1, #1
   1a742:	225b      	movs	r2, #91	; 0x5b
   1a744:	1858      	adds	r0, r3, r1
   1a746:	7122      	strb	r2, [r4, #4]
   1a748:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a74c:	f7fb be6e 	b.w	1642c <d_print_comp+0x23c>
   1a750:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a754:	2000      	movs	r0, #0
   1a756:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a75a:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a75e:	1d20      	adds	r0, r4, #4
   1a760:	4798      	blx	r3
   1a762:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1a766:	2101      	movs	r1, #1
   1a768:	2320      	movs	r3, #32
   1a76a:	1850      	adds	r0, r2, r1
   1a76c:	7123      	strb	r3, [r4, #4]
   1a76e:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a772:	f7fb be4e 	b.w	16412 <d_print_comp+0x222>
   1a776:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a77a:	2000      	movs	r0, #0
   1a77c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a780:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a784:	1d20      	adds	r0, r4, #4
   1a786:	4798      	blx	r3
   1a788:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a78c:	2101      	movs	r1, #1
   1a78e:	226e      	movs	r2, #110	; 0x6e
   1a790:	1858      	adds	r0, r3, r1
   1a792:	7122      	strb	r2, [r4, #4]
   1a794:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a798:	f7fb be7c 	b.w	16494 <d_print_comp+0x2a4>
   1a79c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a7a0:	2000      	movs	r0, #0
   1a7a2:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a7a6:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a7aa:	1d20      	adds	r0, r4, #4
   1a7ac:	4798      	blx	r3
   1a7ae:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a7b2:	2101      	movs	r1, #1
   1a7b4:	226f      	movs	r2, #111	; 0x6f
   1a7b6:	1858      	adds	r0, r3, r1
   1a7b8:	7122      	strb	r2, [r4, #4]
   1a7ba:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a7be:	f7fb be5c 	b.w	1647a <d_print_comp+0x28a>
   1a7c2:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a7c6:	2000      	movs	r0, #0
   1a7c8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a7cc:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a7d0:	1d20      	adds	r0, r4, #4
   1a7d2:	4798      	blx	r3
   1a7d4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a7d8:	2101      	movs	r1, #1
   1a7da:	226c      	movs	r2, #108	; 0x6c
   1a7dc:	1858      	adds	r0, r3, r1
   1a7de:	7122      	strb	r2, [r4, #4]
   1a7e0:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a7e4:	f7fb be3c 	b.w	16460 <d_print_comp+0x270>
   1a7e8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a7ec:	2000      	movs	r0, #0
   1a7ee:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a7f2:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a7f6:	1d20      	adds	r0, r4, #4
   1a7f8:	4798      	blx	r3
   1a7fa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a7fe:	2101      	movs	r1, #1
   1a800:	2263      	movs	r2, #99	; 0x63
   1a802:	1858      	adds	r0, r3, r1
   1a804:	7122      	strb	r2, [r4, #4]
   1a806:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a80a:	f7fb be1c 	b.w	16446 <d_print_comp+0x256>
   1a80e:	2300      	movs	r3, #0
   1a810:	1d20      	adds	r0, r4, #4
   1a812:	f884 3103 	strb.w	r3, [r4, #259]	; 0x103
   1a816:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a81a:	f8d4 710c 	ldr.w	r7, [r4, #268]	; 0x10c
   1a81e:	47b8      	blx	r7
   1a820:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1a824:	2101      	movs	r1, #1
   1a826:	2264      	movs	r2, #100	; 0x64
   1a828:	1843      	adds	r3, r0, r1
   1a82a:	7122      	strb	r2, [r4, #4]
   1a82c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a830:	f7fb bf36 	b.w	166a0 <d_print_comp+0x4b0>
   1a834:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a838:	2000      	movs	r0, #0
   1a83a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a83e:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a842:	1d20      	adds	r0, r4, #4
   1a844:	4798      	blx	r3
   1a846:	f8d4 7124 	ldr.w	r7, [r4, #292]	; 0x124
   1a84a:	2101      	movs	r1, #1
   1a84c:	2265      	movs	r2, #101	; 0x65
   1a84e:	187b      	adds	r3, r7, r1
   1a850:	7122      	strb	r2, [r4, #4]
   1a852:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a856:	f7fb bf16 	b.w	16686 <d_print_comp+0x496>
   1a85a:	2700      	movs	r7, #0
   1a85c:	1d20      	adds	r0, r4, #4
   1a85e:	f884 7103 	strb.w	r7, [r4, #259]	; 0x103
   1a862:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a866:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a86a:	4798      	blx	r3
   1a86c:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1a870:	2101      	movs	r1, #1
   1a872:	226d      	movs	r2, #109	; 0x6d
   1a874:	1847      	adds	r7, r0, r1
   1a876:	7122      	strb	r2, [r4, #4]
   1a878:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
   1a87c:	f7fb bef6 	b.w	1666c <d_print_comp+0x47c>
   1a880:	f8d4 710c 	ldr.w	r7, [r4, #268]	; 0x10c
   1a884:	2000      	movs	r0, #0
   1a886:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a88a:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a88e:	1d20      	adds	r0, r4, #4
   1a890:	47b8      	blx	r7
   1a892:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1a896:	2101      	movs	r1, #1
   1a898:	2361      	movs	r3, #97	; 0x61
   1a89a:	1857      	adds	r7, r2, r1
   1a89c:	7123      	strb	r3, [r4, #4]
   1a89e:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
   1a8a2:	f7fb bed6 	b.w	16652 <d_print_comp+0x462>
   1a8a6:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a8aa:	2200      	movs	r2, #0
   1a8ac:	1d20      	adds	r0, r4, #4
   1a8ae:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1a8b2:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a8b6:	4798      	blx	r3
   1a8b8:	f8d4 7124 	ldr.w	r7, [r4, #292]	; 0x124
   1a8bc:	2101      	movs	r1, #1
   1a8be:	7126      	strb	r6, [r4, #4]
   1a8c0:	187b      	adds	r3, r7, r1
   1a8c2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a8c6:	f7fb beb7 	b.w	16638 <d_print_comp+0x448>
   1a8ca:	f8d4 710c 	ldr.w	r7, [r4, #268]	; 0x10c
   1a8ce:	2200      	movs	r2, #0
   1a8d0:	1d20      	adds	r0, r4, #4
   1a8d2:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1a8d6:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a8da:	47b8      	blx	r7
   1a8dc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a8e0:	2101      	movs	r1, #1
   1a8e2:	276e      	movs	r7, #110	; 0x6e
   1a8e4:	1858      	adds	r0, r3, r1
   1a8e6:	7127      	strb	r7, [r4, #4]
   1a8e8:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a8ec:	f7fb be97 	b.w	1661e <d_print_comp+0x42e>
   1a8f0:	f8d4 610c 	ldr.w	r6, [r4, #268]	; 0x10c
   1a8f4:	2200      	movs	r2, #0
   1a8f6:	1d20      	adds	r0, r4, #4
   1a8f8:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1a8fc:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a900:	2775      	movs	r7, #117	; 0x75
   1a902:	47b0      	blx	r6
   1a904:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a908:	2101      	movs	r1, #1
   1a90a:	7127      	strb	r7, [r4, #4]
   1a90c:	185e      	adds	r6, r3, r1
   1a90e:	f8c4 6124 	str.w	r6, [r4, #292]	; 0x124
   1a912:	f7fb be77 	b.w	16604 <d_print_comp+0x414>
   1a916:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a91a:	2200      	movs	r2, #0
   1a91c:	1d20      	adds	r0, r4, #4
   1a91e:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1a922:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a926:	4798      	blx	r3
   1a928:	f8d4 7124 	ldr.w	r7, [r4, #292]	; 0x124
   1a92c:	2101      	movs	r1, #1
   1a92e:	207b      	movs	r0, #123	; 0x7b
   1a930:	187b      	adds	r3, r7, r1
   1a932:	7120      	strb	r0, [r4, #4]
   1a934:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a938:	f7fb be57 	b.w	165ea <d_print_comp+0x3fa>
   1a93c:	2500      	movs	r5, #0
   1a93e:	1d20      	adds	r0, r4, #4
   1a940:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a944:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a948:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   1a94c:	4798      	blx	r3
   1a94e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a952:	2201      	movs	r2, #1
   1a954:	4629      	mov	r1, r5
   1a956:	1898      	adds	r0, r3, r2
   1a958:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a95c:	f7fd bbb1 	b.w	180c2 <d_print_comp+0x1ed2>
   1a960:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a964:	2000      	movs	r0, #0
   1a966:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a96a:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1a96e:	1d20      	adds	r0, r4, #4
   1a970:	4798      	blx	r3
   1a972:	f8d4 7124 	ldr.w	r7, [r4, #292]	; 0x124
   1a976:	2101      	movs	r1, #1
   1a978:	2229      	movs	r2, #41	; 0x29
   1a97a:	187b      	adds	r3, r7, r1
   1a97c:	7122      	strb	r2, [r4, #4]
   1a97e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a982:	f7fb bfc1 	b.w	16908 <d_print_comp+0x718>
   1a986:	4658      	mov	r0, fp
   1a988:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a98c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a990:	f884 a103 	strb.w	sl, [r4, #259]	; 0x103
   1a994:	4798      	blx	r3
   1a996:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1a99a:	2101      	movs	r1, #1
   1a99c:	4653      	mov	r3, sl
   1a99e:	1850      	adds	r0, r2, r1
   1a9a0:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1a9a4:	f7fd bc13 	b.w	181ce <d_print_comp+0x1fde>
   1a9a8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a9ac:	2200      	movs	r2, #0
   1a9ae:	1d20      	adds	r0, r4, #4
   1a9b0:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1a9b4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a9b8:	4798      	blx	r3
   1a9ba:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1a9be:	2101      	movs	r1, #1
   1a9c0:	2272      	movs	r2, #114	; 0x72
   1a9c2:	1843      	adds	r3, r0, r1
   1a9c4:	7122      	strb	r2, [r4, #4]
   1a9c6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a9ca:	f7fc b8e4 	b.w	16b96 <d_print_comp+0x9a6>
   1a9ce:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a9d2:	2200      	movs	r2, #0
   1a9d4:	1d20      	adds	r0, r4, #4
   1a9d6:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1a9da:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1a9de:	4798      	blx	r3
   1a9e0:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1a9e4:	2101      	movs	r1, #1
   1a9e6:	226f      	movs	r2, #111	; 0x6f
   1a9e8:	1843      	adds	r3, r0, r1
   1a9ea:	7122      	strb	r2, [r4, #4]
   1a9ec:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1a9f0:	f7fc b8c4 	b.w	16b7c <d_print_comp+0x98c>
   1a9f4:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1a9f8:	2200      	movs	r2, #0
   1a9fa:	1d20      	adds	r0, r4, #4
   1a9fc:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1aa00:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1aa04:	4798      	blx	r3
   1aa06:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1aa0a:	2101      	movs	r1, #1
   1aa0c:	2274      	movs	r2, #116	; 0x74
   1aa0e:	1843      	adds	r3, r0, r1
   1aa10:	7122      	strb	r2, [r4, #4]
   1aa12:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1aa16:	f7fc b8a4 	b.w	16b62 <d_print_comp+0x972>
   1aa1a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1aa1e:	2200      	movs	r2, #0
   1aa20:	1d20      	adds	r0, r4, #4
   1aa22:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1aa26:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1aa2a:	4798      	blx	r3
   1aa2c:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1aa30:	2101      	movs	r1, #1
   1aa32:	2261      	movs	r2, #97	; 0x61
   1aa34:	1843      	adds	r3, r0, r1
   1aa36:	7122      	strb	r2, [r4, #4]
   1aa38:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1aa3c:	f7fc b884 	b.w	16b48 <d_print_comp+0x958>
   1aa40:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1aa44:	2200      	movs	r2, #0
   1aa46:	1d20      	adds	r0, r4, #4
   1aa48:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1aa4c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1aa50:	4798      	blx	r3
   1aa52:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1aa56:	2101      	movs	r1, #1
   1aa58:	2272      	movs	r2, #114	; 0x72
   1aa5a:	1843      	adds	r3, r0, r1
   1aa5c:	7122      	strb	r2, [r4, #4]
   1aa5e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1aa62:	f7fc b864 	b.w	16b2e <d_print_comp+0x93e>
   1aa66:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1aa6a:	2200      	movs	r2, #0
   1aa6c:	1d20      	adds	r0, r4, #4
   1aa6e:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1aa72:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1aa76:	4798      	blx	r3
   1aa78:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1aa7c:	2101      	movs	r1, #1
   1aa7e:	2265      	movs	r2, #101	; 0x65
   1aa80:	1843      	adds	r3, r0, r1
   1aa82:	7122      	strb	r2, [r4, #4]
   1aa84:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1aa88:	f7fc b844 	b.w	16b14 <d_print_comp+0x924>
   1aa8c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1aa90:	2200      	movs	r2, #0
   1aa92:	1d20      	adds	r0, r4, #4
   1aa94:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1aa98:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1aa9c:	4798      	blx	r3
   1aa9e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1aaa2:	2101      	movs	r1, #1
   1aaa4:	2270      	movs	r2, #112	; 0x70
   1aaa6:	1843      	adds	r3, r0, r1
   1aaa8:	7122      	strb	r2, [r4, #4]
   1aaaa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1aaae:	f7fc b824 	b.w	16afa <d_print_comp+0x90a>
   1aab2:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1aab6:	2200      	movs	r2, #0
   1aab8:	1d20      	adds	r0, r4, #4
   1aaba:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1aabe:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1aac2:	4798      	blx	r3
   1aac4:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1aac8:	2101      	movs	r1, #1
   1aaca:	226f      	movs	r2, #111	; 0x6f
   1aacc:	1843      	adds	r3, r0, r1
   1aace:	7122      	strb	r2, [r4, #4]
   1aad0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1aad4:	f7fc b804 	b.w	16ae0 <d_print_comp+0x8f0>
   1aad8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1aadc:	2200      	movs	r2, #0
   1aade:	1d20      	adds	r0, r4, #4
   1aae0:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1aae4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1aae8:	4798      	blx	r3
   1aaea:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1aaee:	2101      	movs	r1, #1
   1aaf0:	2272      	movs	r2, #114	; 0x72
   1aaf2:	1843      	adds	r3, r0, r1
   1aaf4:	7122      	strb	r2, [r4, #4]
   1aaf6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1aafa:	f7fc b8c8 	b.w	16c8e <d_print_comp+0xa9e>
   1aafe:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ab02:	2200      	movs	r2, #0
   1ab04:	1d20      	adds	r0, r4, #4
   1ab06:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1ab0a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ab0e:	4798      	blx	r3
   1ab10:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1ab14:	2101      	movs	r1, #1
   1ab16:	226f      	movs	r2, #111	; 0x6f
   1ab18:	1843      	adds	r3, r0, r1
   1ab1a:	7122      	strb	r2, [r4, #4]
   1ab1c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1ab20:	f7fc b8a8 	b.w	16c74 <d_print_comp+0xa84>
   1ab24:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ab28:	2200      	movs	r2, #0
   1ab2a:	1d20      	adds	r0, r4, #4
   1ab2c:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1ab30:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ab34:	4798      	blx	r3
   1ab36:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1ab3a:	2101      	movs	r1, #1
   1ab3c:	2274      	movs	r2, #116	; 0x74
   1ab3e:	1843      	adds	r3, r0, r1
   1ab40:	7122      	strb	r2, [r4, #4]
   1ab42:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1ab46:	f7fc b888 	b.w	16c5a <d_print_comp+0xa6a>
   1ab4a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ab4e:	2200      	movs	r2, #0
   1ab50:	1d20      	adds	r0, r4, #4
   1ab52:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1ab56:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ab5a:	4798      	blx	r3
   1ab5c:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1ab60:	2101      	movs	r1, #1
   1ab62:	2261      	movs	r2, #97	; 0x61
   1ab64:	1843      	adds	r3, r0, r1
   1ab66:	7122      	strb	r2, [r4, #4]
   1ab68:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1ab6c:	f7fc b868 	b.w	16c40 <d_print_comp+0xa50>
   1ab70:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ab74:	2200      	movs	r2, #0
   1ab76:	1d20      	adds	r0, r4, #4
   1ab78:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1ab7c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ab80:	4798      	blx	r3
   1ab82:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1ab86:	2101      	movs	r1, #1
   1ab88:	2272      	movs	r2, #114	; 0x72
   1ab8a:	1843      	adds	r3, r0, r1
   1ab8c:	7122      	strb	r2, [r4, #4]
   1ab8e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1ab92:	f7fc b848 	b.w	16c26 <d_print_comp+0xa36>
   1ab96:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ab9a:	2200      	movs	r2, #0
   1ab9c:	1d20      	adds	r0, r4, #4
   1ab9e:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1aba2:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1aba6:	4798      	blx	r3
   1aba8:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1abac:	2101      	movs	r1, #1
   1abae:	2265      	movs	r2, #101	; 0x65
   1abb0:	1843      	adds	r3, r0, r1
   1abb2:	7122      	strb	r2, [r4, #4]
   1abb4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1abb8:	f7fc b828 	b.w	16c0c <d_print_comp+0xa1c>
   1abbc:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1abc0:	2200      	movs	r2, #0
   1abc2:	1d20      	adds	r0, r4, #4
   1abc4:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1abc8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1abcc:	4798      	blx	r3
   1abce:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1abd2:	2101      	movs	r1, #1
   1abd4:	2270      	movs	r2, #112	; 0x70
   1abd6:	1843      	adds	r3, r0, r1
   1abd8:	7122      	strb	r2, [r4, #4]
   1abda:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1abde:	f7fc b808 	b.w	16bf2 <d_print_comp+0xa02>
   1abe2:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1abe6:	2200      	movs	r2, #0
   1abe8:	1d20      	adds	r0, r4, #4
   1abea:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1abee:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1abf2:	4798      	blx	r3
   1abf4:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1abf8:	2101      	movs	r1, #1
   1abfa:	226f      	movs	r2, #111	; 0x6f
   1abfc:	1843      	adds	r3, r0, r1
   1abfe:	7122      	strb	r2, [r4, #4]
   1ac00:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1ac04:	f7fb bfe8 	b.w	16bd8 <d_print_comp+0x9e8>
   1ac08:	2300      	movs	r3, #0
   1ac0a:	1d20      	adds	r0, r4, #4
   1ac0c:	f884 3103 	strb.w	r3, [r4, #259]	; 0x103
   1ac10:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ac14:	f8d4 710c 	ldr.w	r7, [r4, #268]	; 0x10c
   1ac18:	47b8      	blx	r7
   1ac1a:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1ac1e:	2101      	movs	r1, #1
   1ac20:	2272      	movs	r2, #114	; 0x72
   1ac22:	1843      	adds	r3, r0, r1
   1ac24:	7122      	strb	r2, [r4, #4]
   1ac26:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1ac2a:	f7fc b87e 	b.w	16d2a <d_print_comp+0xb3a>
   1ac2e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ac32:	2000      	movs	r0, #0
   1ac34:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ac38:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1ac3c:	1d20      	adds	r0, r4, #4
   1ac3e:	4798      	blx	r3
   1ac40:	f8d4 7124 	ldr.w	r7, [r4, #292]	; 0x124
   1ac44:	2101      	movs	r1, #1
   1ac46:	2265      	movs	r2, #101	; 0x65
   1ac48:	187b      	adds	r3, r7, r1
   1ac4a:	7122      	strb	r2, [r4, #4]
   1ac4c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1ac50:	f7fc b85e 	b.w	16d10 <d_print_comp+0xb20>
   1ac54:	2700      	movs	r7, #0
   1ac56:	1d20      	adds	r0, r4, #4
   1ac58:	f884 7103 	strb.w	r7, [r4, #259]	; 0x103
   1ac5c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ac60:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ac64:	4798      	blx	r3
   1ac66:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1ac6a:	2101      	movs	r1, #1
   1ac6c:	2270      	movs	r2, #112	; 0x70
   1ac6e:	1847      	adds	r7, r0, r1
   1ac70:	7122      	strb	r2, [r4, #4]
   1ac72:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
   1ac76:	f7fc b83e 	b.w	16cf6 <d_print_comp+0xb06>
   1ac7a:	2000      	movs	r0, #0
   1ac7c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ac80:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1ac84:	1d20      	adds	r0, r4, #4
   1ac86:	f8d4 710c 	ldr.w	r7, [r4, #268]	; 0x10c
   1ac8a:	47b8      	blx	r7
   1ac8c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1ac90:	2101      	movs	r1, #1
   1ac92:	226f      	movs	r2, #111	; 0x6f
   1ac94:	1858      	adds	r0, r3, r1
   1ac96:	7122      	strb	r2, [r4, #4]
   1ac98:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1ac9c:	f7fc b81e 	b.w	16cdc <d_print_comp+0xaec>
   1aca0:	2700      	movs	r7, #0
   1aca2:	1d20      	adds	r0, r4, #4
   1aca4:	f884 7103 	strb.w	r7, [r4, #259]	; 0x103
   1aca8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1acac:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1acb0:	4798      	blx	r3
   1acb2:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1acb6:	2101      	movs	r1, #1
   1acb8:	2274      	movs	r2, #116	; 0x74
   1acba:	1847      	adds	r7, r0, r1
   1acbc:	7122      	strb	r2, [r4, #4]
   1acbe:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
   1acc2:	f7fc b84c 	b.w	16d5e <d_print_comp+0xb6e>
   1acc6:	f8d4 710c 	ldr.w	r7, [r4, #268]	; 0x10c
   1acca:	2000      	movs	r0, #0
   1accc:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1acd0:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1acd4:	1d20      	adds	r0, r4, #4
   1acd6:	47b8      	blx	r7
   1acd8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1acdc:	2101      	movs	r1, #1
   1acde:	2261      	movs	r2, #97	; 0x61
   1ace0:	185f      	adds	r7, r3, r1
   1ace2:	7122      	strb	r2, [r4, #4]
   1ace4:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
   1ace8:	f7fc b82c 	b.w	16d44 <d_print_comp+0xb54>
   1acec:	2500      	movs	r5, #0
   1acee:	1d20      	adds	r0, r4, #4
   1acf0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1acf4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1acf8:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   1acfc:	4798      	blx	r3
   1acfe:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1ad02:	2201      	movs	r2, #1
   1ad04:	4629      	mov	r1, r5
   1ad06:	1898      	adds	r0, r3, r2
   1ad08:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1ad0c:	f7fe b837 	b.w	18d7e <d_print_comp+0x2b8e>
   1ad10:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ad14:	2200      	movs	r2, #0
   1ad16:	1d20      	adds	r0, r4, #4
   1ad18:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1ad1c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ad20:	4798      	blx	r3
   1ad22:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1ad26:	2101      	movs	r1, #1
   1ad28:	2272      	movs	r2, #114	; 0x72
   1ad2a:	1843      	adds	r3, r0, r1
   1ad2c:	7122      	strb	r2, [r4, #4]
   1ad2e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1ad32:	f7fc b9dc 	b.w	170ee <d_print_comp+0xefe>
   1ad36:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ad3a:	2200      	movs	r2, #0
   1ad3c:	1d20      	adds	r0, r4, #4
   1ad3e:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1ad42:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ad46:	4798      	blx	r3
   1ad48:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1ad4c:	2101      	movs	r1, #1
   1ad4e:	226f      	movs	r2, #111	; 0x6f
   1ad50:	1843      	adds	r3, r0, r1
   1ad52:	7122      	strb	r2, [r4, #4]
   1ad54:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1ad58:	f7fc b9bc 	b.w	170d4 <d_print_comp+0xee4>
   1ad5c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ad60:	2200      	movs	r2, #0
   1ad62:	1d20      	adds	r0, r4, #4
   1ad64:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1ad68:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ad6c:	4798      	blx	r3
   1ad6e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1ad72:	2101      	movs	r1, #1
   1ad74:	2266      	movs	r2, #102	; 0x66
   1ad76:	1843      	adds	r3, r0, r1
   1ad78:	7122      	strb	r2, [r4, #4]
   1ad7a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1ad7e:	f7fc b99c 	b.w	170ba <d_print_comp+0xeca>
   1ad82:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ad86:	2200      	movs	r2, #0
   1ad88:	1d20      	adds	r0, r4, #4
   1ad8a:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1ad8e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ad92:	4798      	blx	r3
   1ad94:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1ad98:	2101      	movs	r1, #1
   1ad9a:	2220      	movs	r2, #32
   1ad9c:	1843      	adds	r3, r0, r1
   1ad9e:	7122      	strb	r2, [r4, #4]
   1ada0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1ada4:	f7fc b97c 	b.w	170a0 <d_print_comp+0xeb0>
   1ada8:	2200      	movs	r2, #0
   1adaa:	1d20      	adds	r0, r4, #4
   1adac:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1adb0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1adb4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1adb8:	4798      	blx	r3
   1adba:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1adbe:	2101      	movs	r1, #1
   1adc0:	7126      	strb	r6, [r4, #4]
   1adc2:	1842      	adds	r2, r0, r1
   1adc4:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1adc8:	f7fc b95d 	b.w	17086 <d_print_comp+0xe96>
   1adcc:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1add0:	2000      	movs	r0, #0
   1add2:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1add6:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1adda:	1d20      	adds	r0, r4, #4
   1addc:	4798      	blx	r3
   1adde:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1ade2:	2101      	movs	r1, #1
   1ade4:	2273      	movs	r2, #115	; 0x73
   1ade6:	1858      	adds	r0, r3, r1
   1ade8:	7122      	strb	r2, [r4, #4]
   1adea:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1adee:	f7fc b93d 	b.w	1706c <d_print_comp+0xe7c>
   1adf2:	2600      	movs	r6, #0
   1adf4:	1d20      	adds	r0, r4, #4
   1adf6:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   1adfa:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1adfe:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ae02:	4798      	blx	r3
   1ae04:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1ae08:	2101      	movs	r1, #1
   1ae0a:	2261      	movs	r2, #97	; 0x61
   1ae0c:	1846      	adds	r6, r0, r1
   1ae0e:	7122      	strb	r2, [r4, #4]
   1ae10:	f8c4 6124 	str.w	r6, [r4, #292]	; 0x124
   1ae14:	f7fc b91d 	b.w	17052 <d_print_comp+0xe62>
   1ae18:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ae1c:	2000      	movs	r0, #0
   1ae1e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ae22:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1ae26:	1d20      	adds	r0, r4, #4
   1ae28:	4798      	blx	r3
   1ae2a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1ae2e:	2101      	movs	r1, #1
   1ae30:	226c      	movs	r2, #108	; 0x6c
   1ae32:	1858      	adds	r0, r3, r1
   1ae34:	7122      	strb	r2, [r4, #4]
   1ae36:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1ae3a:	f7fc b8fd 	b.w	17038 <d_print_comp+0xe48>
   1ae3e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ae42:	2000      	movs	r0, #0
   1ae44:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ae48:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1ae4c:	1d20      	adds	r0, r4, #4
   1ae4e:	4798      	blx	r3
   1ae50:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1ae54:	2101      	movs	r1, #1
   1ae56:	2243      	movs	r2, #67	; 0x43
   1ae58:	1858      	adds	r0, r3, r1
   1ae5a:	7122      	strb	r2, [r4, #4]
   1ae5c:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1ae60:	f7fc b8dd 	b.w	1701e <d_print_comp+0xe2e>
   1ae64:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ae68:	2000      	movs	r0, #0
   1ae6a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ae6e:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1ae72:	1d20      	adds	r0, r4, #4
   1ae74:	4798      	blx	r3
   1ae76:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1ae7a:	2101      	movs	r1, #1
   1ae7c:	2220      	movs	r2, #32
   1ae7e:	1858      	adds	r0, r3, r1
   1ae80:	7122      	strb	r2, [r4, #4]
   1ae82:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1ae86:	f7fc b8bd 	b.w	17004 <d_print_comp+0xe14>
   1ae8a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ae8e:	2000      	movs	r0, #0
   1ae90:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ae94:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1ae98:	1d20      	adds	r0, r4, #4
   1ae9a:	4798      	blx	r3
   1ae9c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1aea0:	2101      	movs	r1, #1
   1aea2:	2261      	movs	r2, #97	; 0x61
   1aea4:	1858      	adds	r0, r3, r1
   1aea6:	7122      	strb	r2, [r4, #4]
   1aea8:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1aeac:	f7fc b89d 	b.w	16fea <d_print_comp+0xdfa>
   1aeb0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1aeb4:	2000      	movs	r0, #0
   1aeb6:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1aeba:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1aebe:	1d20      	adds	r0, r4, #4
   1aec0:	4798      	blx	r3
   1aec2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1aec6:	2101      	movs	r1, #1
   1aec8:	2276      	movs	r2, #118	; 0x76
   1aeca:	1858      	adds	r0, r3, r1
   1aecc:	7122      	strb	r2, [r4, #4]
   1aece:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1aed2:	f7fc b87d 	b.w	16fd0 <d_print_comp+0xde0>
   1aed6:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1aeda:	2000      	movs	r0, #0
   1aedc:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1aee0:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1aee4:	1d20      	adds	r0, r4, #4
   1aee6:	4798      	blx	r3
   1aee8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1aeec:	2101      	movs	r1, #1
   1aeee:	2261      	movs	r2, #97	; 0x61
   1aef0:	1858      	adds	r0, r3, r1
   1aef2:	7122      	strb	r2, [r4, #4]
   1aef4:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1aef8:	f7fc b85d 	b.w	16fb6 <d_print_comp+0xdc6>
   1aefc:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1af00:	2000      	movs	r0, #0
   1af02:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1af06:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1af0a:	1d20      	adds	r0, r4, #4
   1af0c:	4798      	blx	r3
   1af0e:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1af12:	2101      	movs	r1, #1
   1af14:	206a      	movs	r0, #106	; 0x6a
   1af16:	1853      	adds	r3, r2, r1
   1af18:	7120      	strb	r0, [r4, #4]
   1af1a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1af1e:	f7fc b83d 	b.w	16f9c <d_print_comp+0xdac>
   1af22:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1af26:	2000      	movs	r0, #0
   1af28:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1af2c:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1af30:	1d20      	adds	r0, r4, #4
   1af32:	4798      	blx	r3
   1af34:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1af38:	2101      	movs	r1, #1
   1af3a:	226f      	movs	r2, #111	; 0x6f
   1af3c:	1858      	adds	r0, r3, r1
   1af3e:	7122      	strb	r2, [r4, #4]
   1af40:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1af44:	f7fc b9f2 	b.w	1732c <d_print_comp+0x113c>
   1af48:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1af4c:	2000      	movs	r0, #0
   1af4e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1af52:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1af56:	1d20      	adds	r0, r4, #4
   1af58:	4798      	blx	r3
   1af5a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1af5e:	2101      	movs	r1, #1
   1af60:	2274      	movs	r2, #116	; 0x74
   1af62:	1858      	adds	r0, r3, r1
   1af64:	7122      	strb	r2, [r4, #4]
   1af66:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1af6a:	f7fc b9d2 	b.w	17312 <d_print_comp+0x1122>
   1af6e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1af72:	2000      	movs	r0, #0
   1af74:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1af78:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1af7c:	1d20      	adds	r0, r4, #4
   1af7e:	4798      	blx	r3
   1af80:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1af84:	2101      	movs	r1, #1
   1af86:	2220      	movs	r2, #32
   1af88:	1858      	adds	r0, r3, r1
   1af8a:	7122      	strb	r2, [r4, #4]
   1af8c:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1af90:	f7fc b9b2 	b.w	172f8 <d_print_comp+0x1108>
   1af94:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1af98:	2000      	movs	r0, #0
   1af9a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1af9e:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1afa2:	1d20      	adds	r0, r4, #4
   1afa4:	4798      	blx	r3
   1afa6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1afaa:	2101      	movs	r1, #1
   1afac:	226b      	movs	r2, #107	; 0x6b
   1afae:	1858      	adds	r0, r3, r1
   1afb0:	7122      	strb	r2, [r4, #4]
   1afb2:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1afb6:	f7fc b992 	b.w	172de <d_print_comp+0x10ee>
   1afba:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1afbe:	2000      	movs	r0, #0
   1afc0:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1afc4:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1afc8:	1d20      	adds	r0, r4, #4
   1afca:	4798      	blx	r3
   1afcc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1afd0:	2101      	movs	r1, #1
   1afd2:	226e      	movs	r2, #110	; 0x6e
   1afd4:	1858      	adds	r0, r3, r1
   1afd6:	7122      	strb	r2, [r4, #4]
   1afd8:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1afdc:	f7fc b972 	b.w	172c4 <d_print_comp+0x10d4>
   1afe0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1afe4:	2000      	movs	r0, #0
   1afe6:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1afea:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1afee:	1d20      	adds	r0, r4, #4
   1aff0:	4798      	blx	r3
   1aff2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1aff6:	2101      	movs	r1, #1
   1aff8:	2275      	movs	r2, #117	; 0x75
   1affa:	1858      	adds	r0, r3, r1
   1affc:	7122      	strb	r2, [r4, #4]
   1affe:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1b002:	f7fc b952 	b.w	172aa <d_print_comp+0x10ba>
   1b006:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b00a:	2000      	movs	r0, #0
   1b00c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b010:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1b014:	1d20      	adds	r0, r4, #4
   1b016:	4798      	blx	r3
   1b018:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b01c:	2101      	movs	r1, #1
   1b01e:	2268      	movs	r2, #104	; 0x68
   1b020:	1858      	adds	r0, r3, r1
   1b022:	7122      	strb	r2, [r4, #4]
   1b024:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1b028:	f7fc b932 	b.w	17290 <d_print_comp+0x10a0>
   1b02c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b030:	2000      	movs	r0, #0
   1b032:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b036:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1b03a:	1d20      	adds	r0, r4, #4
   1b03c:	4798      	blx	r3
   1b03e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b042:	2101      	movs	r1, #1
   1b044:	2274      	movs	r2, #116	; 0x74
   1b046:	1858      	adds	r0, r3, r1
   1b048:	7122      	strb	r2, [r4, #4]
   1b04a:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1b04e:	f7fc b912 	b.w	17276 <d_print_comp+0x1086>
   1b052:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b056:	2000      	movs	r0, #0
   1b058:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b05c:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1b060:	1d20      	adds	r0, r4, #4
   1b062:	4798      	blx	r3
   1b064:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b068:	2101      	movs	r1, #1
   1b06a:	2220      	movs	r2, #32
   1b06c:	1858      	adds	r0, r3, r1
   1b06e:	7122      	strb	r2, [r4, #4]
   1b070:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1b074:	f7fc b8f2 	b.w	1725c <d_print_comp+0x106c>
   1b078:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b07c:	2000      	movs	r0, #0
   1b07e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b082:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1b086:	1d20      	adds	r0, r4, #4
   1b088:	4798      	blx	r3
   1b08a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b08e:	2101      	movs	r1, #1
   1b090:	226c      	movs	r2, #108	; 0x6c
   1b092:	1858      	adds	r0, r3, r1
   1b094:	7122      	strb	r2, [r4, #4]
   1b096:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1b09a:	f7fc b8d2 	b.w	17242 <d_print_comp+0x1052>
   1b09e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b0a2:	2000      	movs	r0, #0
   1b0a4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b0a8:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1b0ac:	1d20      	adds	r0, r4, #4
   1b0ae:	4798      	blx	r3
   1b0b0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b0b4:	2101      	movs	r1, #1
   1b0b6:	2261      	movs	r2, #97	; 0x61
   1b0b8:	1858      	adds	r0, r3, r1
   1b0ba:	7122      	strb	r2, [r4, #4]
   1b0bc:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1b0c0:	f7fc b8b2 	b.w	17228 <d_print_comp+0x1038>
   1b0c4:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b0c8:	2000      	movs	r0, #0
   1b0ca:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b0ce:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1b0d2:	1d20      	adds	r0, r4, #4
   1b0d4:	4798      	blx	r3
   1b0d6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b0da:	2101      	movs	r1, #1
   1b0dc:	2275      	movs	r2, #117	; 0x75
   1b0de:	1858      	adds	r0, r3, r1
   1b0e0:	7122      	strb	r2, [r4, #4]
   1b0e2:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1b0e6:	f7fc b892 	b.w	1720e <d_print_comp+0x101e>
   1b0ea:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b0ee:	2000      	movs	r0, #0
   1b0f0:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b0f4:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1b0f8:	1d20      	adds	r0, r4, #4
   1b0fa:	4798      	blx	r3
   1b0fc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b100:	2101      	movs	r1, #1
   1b102:	2274      	movs	r2, #116	; 0x74
   1b104:	1858      	adds	r0, r3, r1
   1b106:	7122      	strb	r2, [r4, #4]
   1b108:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1b10c:	f7fc b872 	b.w	171f4 <d_print_comp+0x1004>
   1b110:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b114:	2000      	movs	r0, #0
   1b116:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b11a:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1b11e:	1d20      	adds	r0, r4, #4
   1b120:	4798      	blx	r3
   1b122:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b126:	2101      	movs	r1, #1
   1b128:	2272      	movs	r2, #114	; 0x72
   1b12a:	1858      	adds	r0, r3, r1
   1b12c:	7122      	strb	r2, [r4, #4]
   1b12e:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1b132:	f7fc b852 	b.w	171da <d_print_comp+0xfea>
   1b136:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b13a:	2000      	movs	r0, #0
   1b13c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b140:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1b144:	1d20      	adds	r0, r4, #4
   1b146:	4798      	blx	r3
   1b148:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b14c:	2101      	movs	r1, #1
   1b14e:	2269      	movs	r2, #105	; 0x69
   1b150:	1858      	adds	r0, r3, r1
   1b152:	7122      	strb	r2, [r4, #4]
   1b154:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1b158:	f7fc b832 	b.w	171c0 <d_print_comp+0xfd0>
   1b15c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b160:	2000      	movs	r0, #0
   1b162:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b166:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1b16a:	1d20      	adds	r0, r4, #4
   1b16c:	4798      	blx	r3
   1b16e:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1b172:	2101      	movs	r1, #1
   1b174:	2076      	movs	r0, #118	; 0x76
   1b176:	1853      	adds	r3, r2, r1
   1b178:	7120      	strb	r0, [r4, #4]
   1b17a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b17e:	f7fc b812 	b.w	171a6 <d_print_comp+0xfb6>
   1b182:	2500      	movs	r5, #0
   1b184:	1d20      	adds	r0, r4, #4
   1b186:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b18a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b18e:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   1b192:	4798      	blx	r3
   1b194:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b198:	2201      	movs	r2, #1
   1b19a:	4629      	mov	r1, r5
   1b19c:	1883      	adds	r3, r0, r2
   1b19e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b1a2:	f7fc bdce 	b.w	17d42 <d_print_comp+0x1b52>
   1b1a6:	2600      	movs	r6, #0
   1b1a8:	1d20      	adds	r0, r4, #4
   1b1aa:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b1ae:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b1b2:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   1b1b6:	4798      	blx	r3
   1b1b8:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1b1bc:	2001      	movs	r0, #1
   1b1be:	4631      	mov	r1, r6
   1b1c0:	1813      	adds	r3, r2, r0
   1b1c2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b1c6:	f7fc bda4 	b.w	17d12 <d_print_comp+0x1b22>
   1b1ca:	2101      	movs	r1, #1
   1b1cc:	f8cc 111c 	str.w	r1, [ip, #284]	; 0x11c
   1b1d0:	f7fb b904 	b.w	163dc <d_print_comp+0x1ec>
   1b1d4:	4650      	mov	r0, sl
   1b1d6:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b1da:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
   1b1de:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b1e2:	4798      	blx	r3
   1b1e4:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b1e8:	2101      	movs	r1, #1
   1b1ea:	4643      	mov	r3, r8
   1b1ec:	1845      	adds	r5, r0, r1
   1b1ee:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
   1b1f2:	f7fb bbb2 	b.w	1695a <d_print_comp+0x76a>
   1b1f6:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b1fa:	4650      	mov	r0, sl
   1b1fc:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b200:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   1b204:	4798      	blx	r3
   1b206:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1b20a:	2101      	movs	r1, #1
   1b20c:	464b      	mov	r3, r9
   1b20e:	1855      	adds	r5, r2, r1
   1b210:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
   1b214:	f7fb bdd8 	b.w	16dc8 <d_print_comp+0xbd8>
   1b218:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b21c:	4650      	mov	r0, sl
   1b21e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b222:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   1b226:	4798      	blx	r3
   1b228:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1b22c:	2101      	movs	r1, #1
   1b22e:	464b      	mov	r3, r9
   1b230:	1855      	adds	r5, r2, r1
   1b232:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
   1b236:	f7fc b9c0 	b.w	175ba <d_print_comp+0x13ca>
   1b23a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b23e:	4650      	mov	r0, sl
   1b240:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b244:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
   1b248:	4798      	blx	r3
   1b24a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1b24e:	2101      	movs	r1, #1
   1b250:	4643      	mov	r3, r8
   1b252:	1855      	adds	r5, r2, r1
   1b254:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
   1b258:	f7fc bdef 	b.w	17e3a <d_print_comp+0x1c4a>
   1b25c:	4619      	mov	r1, r3
   1b25e:	2700      	movs	r7, #0
   1b260:	1d20      	adds	r0, r4, #4
   1b262:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b266:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b26a:	f884 7103 	strb.w	r7, [r4, #259]	; 0x103
   1b26e:	4798      	blx	r3
   1b270:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1b274:	2101      	movs	r1, #1
   1b276:	463b      	mov	r3, r7
   1b278:	1850      	adds	r0, r2, r1
   1b27a:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1b27e:	f7fd bb4a 	b.w	18916 <d_print_comp+0x2726>
   1b282:	2700      	movs	r7, #0
   1b284:	1d20      	adds	r0, r4, #4
   1b286:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b28a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b28e:	f884 7103 	strb.w	r7, [r4, #259]	; 0x103
   1b292:	4798      	blx	r3
   1b294:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b298:	2001      	movs	r0, #1
   1b29a:	4639      	mov	r1, r7
   1b29c:	181a      	adds	r2, r3, r0
   1b29e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1b2a2:	f7fd bb25 	b.w	188f0 <d_print_comp+0x2700>
   1b2a6:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b2aa:	4650      	mov	r0, sl
   1b2ac:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b2b0:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
   1b2b4:	4798      	blx	r3
   1b2b6:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1b2ba:	2101      	movs	r1, #1
   1b2bc:	4643      	mov	r3, r8
   1b2be:	1855      	adds	r5, r2, r1
   1b2c0:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
   1b2c4:	f7fb ba56 	b.w	16774 <d_print_comp+0x584>
   1b2c8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b2cc:	4650      	mov	r0, sl
   1b2ce:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b2d2:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
   1b2d6:	4798      	blx	r3
   1b2d8:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1b2dc:	2101      	movs	r1, #1
   1b2de:	4643      	mov	r3, r8
   1b2e0:	1855      	adds	r5, r2, r1
   1b2e2:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
   1b2e6:	f7fc bf16 	b.w	18116 <d_print_comp+0x1f26>
   1b2ea:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b2ee:	4650      	mov	r0, sl
   1b2f0:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b2f4:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
   1b2f8:	4798      	blx	r3
   1b2fa:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1b2fe:	4629      	mov	r1, r5
   1b300:	2300      	movs	r3, #0
   1b302:	1950      	adds	r0, r2, r5
   1b304:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1b308:	f7fc bf1b 	b.w	18142 <d_print_comp+0x1f52>
   1b30c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b310:	4650      	mov	r0, sl
   1b312:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b316:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   1b31a:	4798      	blx	r3
   1b31c:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b320:	4629      	mov	r1, r5
   1b322:	2300      	movs	r3, #0
   1b324:	1942      	adds	r2, r0, r5
   1b326:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1b32a:	f7fb bd60 	b.w	16dee <d_print_comp+0xbfe>
   1b32e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b332:	4650      	mov	r0, sl
   1b334:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b338:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
   1b33c:	4798      	blx	r3
   1b33e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b342:	4629      	mov	r1, r5
   1b344:	2300      	movs	r3, #0
   1b346:	1942      	adds	r2, r0, r5
   1b348:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1b34c:	f7fb bb1b 	b.w	16986 <d_print_comp+0x796>
   1b350:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b354:	4650      	mov	r0, sl
   1b356:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b35a:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   1b35e:	4798      	blx	r3
   1b360:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b364:	4629      	mov	r1, r5
   1b366:	2300      	movs	r3, #0
   1b368:	1942      	adds	r2, r0, r5
   1b36a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1b36e:	f7fc b938 	b.w	175e2 <d_print_comp+0x13f2>
   1b372:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b376:	4650      	mov	r0, sl
   1b378:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b37c:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
   1b380:	4798      	blx	r3
   1b382:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1b386:	4629      	mov	r1, r5
   1b388:	2300      	movs	r3, #0
   1b38a:	1950      	adds	r0, r2, r5
   1b38c:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1b390:	f7fc bd69 	b.w	17e66 <d_print_comp+0x1c76>
   1b394:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b398:	4650      	mov	r0, sl
   1b39a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b39e:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
   1b3a2:	4798      	blx	r3
   1b3a4:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1b3a8:	4629      	mov	r1, r5
   1b3aa:	2300      	movs	r3, #0
   1b3ac:	1950      	adds	r0, r2, r5
   1b3ae:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1b3b2:	f7fb b9f5 	b.w	167a0 <d_print_comp+0x5b0>
   1b3b6:	688a      	ldr	r2, [r1, #8]
   1b3b8:	7810      	ldrb	r0, [r2, #0]
   1b3ba:	2800      	cmp	r0, #0
   1b3bc:	f47d aa92 	bne.w	188e4 <d_print_comp+0x26f4>
   1b3c0:	6891      	ldr	r1, [r2, #8]
   1b3c2:	2901      	cmp	r1, #1
   1b3c4:	f47d aa8e 	bne.w	188e4 <d_print_comp+0x26f4>
   1b3c8:	2b35      	cmp	r3, #53	; 0x35
   1b3ca:	f47d aa8b 	bne.w	188e4 <d_print_comp+0x26f4>
   1b3ce:	6853      	ldr	r3, [r2, #4]
   1b3d0:	781b      	ldrb	r3, [r3, #0]
   1b3d2:	2b30      	cmp	r3, #48	; 0x30
   1b3d4:	f000 853c 	beq.w	1be50 <d_print_comp+0x5c60>
   1b3d8:	2b31      	cmp	r3, #49	; 0x31
   1b3da:	f47d aa83 	bne.w	188e4 <d_print_comp+0x26f4>
   1b3de:	f64b 1178 	movw	r1, #47480	; 0xb978
   1b3e2:	4620      	mov	r0, r4
   1b3e4:	f2c0 0102 	movt	r1, #2
   1b3e8:	f7fa fe5a 	bl	160a0 <d_append_string>
   1b3ec:	f7fa bff6 	b.w	163dc <d_print_comp+0x1ec>
   1b3f0:	6889      	ldr	r1, [r1, #8]
   1b3f2:	780a      	ldrb	r2, [r1, #0]
   1b3f4:	2a00      	cmp	r2, #0
   1b3f6:	f47d aa75 	bne.w	188e4 <d_print_comp+0x26f4>
   1b3fa:	2b36      	cmp	r3, #54	; 0x36
   1b3fc:	f000 8510 	beq.w	1be20 <d_print_comp+0x5c30>
   1b400:	4620      	mov	r0, r4
   1b402:	68a9      	ldr	r1, [r5, #8]
   1b404:	3e02      	subs	r6, #2
   1b406:	f7fa fef3 	bl	161f0 <d_print_comp>
   1b40a:	2e04      	cmp	r6, #4
   1b40c:	f63a afe6 	bhi.w	163dc <d_print_comp+0x1ec>
   1b410:	e8df f006 	tbb	[pc, r6]
   1b414:	0c151e24 	.word	0x0c151e24
   1b418:	03          	.byte	0x03
   1b419:	00          	.byte	0x00
   1b41a:	f64b 116c 	movw	r1, #47468	; 0xb96c
   1b41e:	4620      	mov	r0, r4
   1b420:	f2c0 0102 	movt	r1, #2
   1b424:	f7fa fe3c 	bl	160a0 <d_append_string>
   1b428:	f7fa bfd8 	b.w	163dc <d_print_comp+0x1ec>
   1b42c:	f64b 1168 	movw	r1, #47464	; 0xb968
   1b430:	4620      	mov	r0, r4
   1b432:	f2c0 0102 	movt	r1, #2
   1b436:	f7fa fe33 	bl	160a0 <d_append_string>
   1b43a:	f7fa bfcf 	b.w	163dc <d_print_comp+0x1ec>
   1b43e:	f64b 1164 	movw	r1, #47460	; 0xb964
   1b442:	4620      	mov	r0, r4
   1b444:	f2c0 0102 	movt	r1, #2
   1b448:	f7fa fe2a 	bl	160a0 <d_append_string>
   1b44c:	f7fa bfc6 	b.w	163dc <d_print_comp+0x1ec>
   1b450:	4620      	mov	r0, r4
   1b452:	216c      	movs	r1, #108	; 0x6c
   1b454:	f7f9 f87e 	bl	14554 <d_append_char>
   1b458:	f7fa bfc0 	b.w	163dc <d_print_comp+0x1ec>
   1b45c:	4620      	mov	r0, r4
   1b45e:	2175      	movs	r1, #117	; 0x75
   1b460:	f7f9 f878 	bl	14554 <d_append_char>
   1b464:	f7fa bfba 	b.w	163dc <d_print_comp+0x1ec>
   1b468:	4619      	mov	r1, r3
   1b46a:	2600      	movs	r6, #0
   1b46c:	1d20      	adds	r0, r4, #4
   1b46e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b472:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b476:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   1b47a:	4798      	blx	r3
   1b47c:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1b480:	2101      	movs	r1, #1
   1b482:	4633      	mov	r3, r6
   1b484:	1850      	adds	r0, r2, r1
   1b486:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1b48a:	f7fd b852 	b.w	18532 <d_print_comp+0x2342>
   1b48e:	29ff      	cmp	r1, #255	; 0xff
   1b490:	f000 82d9 	beq.w	1ba46 <d_print_comp+0x5856>
   1b494:	eb04 0c01 	add.w	ip, r4, r1
   1b498:	2020      	movs	r0, #32
   1b49a:	3101      	adds	r1, #1
   1b49c:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1b4a0:	f88c 0004 	strb.w	r0, [ip, #4]
   1b4a4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1b4a8:	f7fc bc47 	b.w	17d3a <d_print_comp+0x1b4a>
   1b4ac:	29ff      	cmp	r1, #255	; 0xff
   1b4ae:	f000 82fe 	beq.w	1baae <d_print_comp+0x58be>
   1b4b2:	eb04 0c01 	add.w	ip, r4, r1
   1b4b6:	2220      	movs	r2, #32
   1b4b8:	3101      	adds	r1, #1
   1b4ba:	f884 2108 	strb.w	r2, [r4, #264]	; 0x108
   1b4be:	f88c 2004 	strb.w	r2, [ip, #4]
   1b4c2:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1b4c6:	f7fc bc20 	b.w	17d0a <d_print_comp+0x1b1a>
   1b4ca:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1b4ce:	29ff      	cmp	r1, #255	; 0xff
   1b4d0:	f000 82d9 	beq.w	1ba86 <d_print_comp+0x5896>
   1b4d4:	eb04 0e01 	add.w	lr, r4, r1
   1b4d8:	225b      	movs	r2, #91	; 0x5b
   1b4da:	3101      	adds	r1, #1
   1b4dc:	f884 2108 	strb.w	r2, [r4, #264]	; 0x108
   1b4e0:	f88e 2004 	strb.w	r2, [lr, #4]
   1b4e4:	4620      	mov	r0, r4
   1b4e6:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1b4ea:	68a9      	ldr	r1, [r5, #8]
   1b4ec:	f7fa fe80 	bl	161f0 <d_print_comp>
   1b4f0:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1b4f4:	29ff      	cmp	r1, #255	; 0xff
   1b4f6:	f000 82b6 	beq.w	1ba66 <d_print_comp+0x5876>
   1b4fa:	eb04 0c01 	add.w	ip, r4, r1
   1b4fe:	225d      	movs	r2, #93	; 0x5d
   1b500:	3101      	adds	r1, #1
   1b502:	f884 2108 	strb.w	r2, [r4, #264]	; 0x108
   1b506:	f88c 2004 	strb.w	r2, [ip, #4]
   1b50a:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1b50e:	f7fa bf65 	b.w	163dc <d_print_comp+0x1ec>
   1b512:	2101      	movs	r1, #1
   1b514:	f8c4 111c 	str.w	r1, [r4, #284]	; 0x11c
   1b518:	f7fa bf60 	b.w	163dc <d_print_comp+0x1ec>
   1b51c:	29ff      	cmp	r1, #255	; 0xff
   1b51e:	f000 8282 	beq.w	1ba26 <d_print_comp+0x5836>
   1b522:	eb04 0c01 	add.w	ip, r4, r1
   1b526:	222d      	movs	r2, #45	; 0x2d
   1b528:	3101      	adds	r1, #1
   1b52a:	f884 2108 	strb.w	r2, [r4, #264]	; 0x108
   1b52e:	f88c 2004 	strb.w	r2, [ip, #4]
   1b532:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1b536:	f7fd b9fb 	b.w	18930 <d_print_comp+0x2740>
   1b53a:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1b53e:	29ff      	cmp	r1, #255	; 0xff
   1b540:	f000 8440 	beq.w	1bdc4 <d_print_comp+0x5bd4>
   1b544:	eb04 0c01 	add.w	ip, r4, r1
   1b548:	205b      	movs	r0, #91	; 0x5b
   1b54a:	1c4b      	adds	r3, r1, #1
   1b54c:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1b550:	f88c 0004 	strb.w	r0, [ip, #4]
   1b554:	4620      	mov	r0, r4
   1b556:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1b55a:	68a9      	ldr	r1, [r5, #8]
   1b55c:	6889      	ldr	r1, [r1, #8]
   1b55e:	f7fa fe47 	bl	161f0 <d_print_comp>
   1b562:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1b566:	29ff      	cmp	r1, #255	; 0xff
   1b568:	f000 841b 	beq.w	1bda2 <d_print_comp+0x5bb2>
   1b56c:	eb04 0e01 	add.w	lr, r4, r1
   1b570:	205d      	movs	r0, #93	; 0x5d
   1b572:	3101      	adds	r1, #1
   1b574:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1b578:	f88e 0004 	strb.w	r0, [lr, #4]
   1b57c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1b580:	f7fd bf31 	b.w	193e6 <d_print_comp+0x31f6>
   1b584:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b588:	2200      	movs	r2, #0
   1b58a:	1d20      	adds	r0, r4, #4
   1b58c:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1b590:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b594:	4798      	blx	r3
   1b596:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b59a:	2101      	movs	r1, #1
   1b59c:	2275      	movs	r2, #117	; 0x75
   1b59e:	1843      	adds	r3, r0, r1
   1b5a0:	7122      	strb	r2, [r4, #4]
   1b5a2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b5a6:	f7fd b816 	b.w	185d6 <d_print_comp+0x23e6>
   1b5aa:	2200      	movs	r2, #0
   1b5ac:	1d20      	adds	r0, r4, #4
   1b5ae:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1b5b2:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b5b6:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b5ba:	4798      	blx	r3
   1b5bc:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b5c0:	2101      	movs	r1, #1
   1b5c2:	7125      	strb	r5, [r4, #4]
   1b5c4:	1842      	adds	r2, r0, r1
   1b5c6:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1b5ca:	f7fc bff7 	b.w	185bc <d_print_comp+0x23cc>
   1b5ce:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b5d2:	2000      	movs	r0, #0
   1b5d4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b5d8:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1b5dc:	1d20      	adds	r0, r4, #4
   1b5de:	4798      	blx	r3
   1b5e0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b5e4:	2101      	movs	r1, #1
   1b5e6:	2263      	movs	r2, #99	; 0x63
   1b5e8:	1858      	adds	r0, r3, r1
   1b5ea:	7122      	strb	r2, [r4, #4]
   1b5ec:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1b5f0:	f7fc bfd7 	b.w	185a2 <d_print_comp+0x23b2>
   1b5f4:	2500      	movs	r5, #0
   1b5f6:	1d20      	adds	r0, r4, #4
   1b5f8:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   1b5fc:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b600:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b604:	4798      	blx	r3
   1b606:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b60a:	2101      	movs	r1, #1
   1b60c:	2241      	movs	r2, #65	; 0x41
   1b60e:	1845      	adds	r5, r0, r1
   1b610:	7122      	strb	r2, [r4, #4]
   1b612:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
   1b616:	f7fc bfb7 	b.w	18588 <d_print_comp+0x2398>
   1b61a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b61e:	2000      	movs	r0, #0
   1b620:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b624:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1b628:	1d20      	adds	r0, r4, #4
   1b62a:	4798      	blx	r3
   1b62c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b630:	2101      	movs	r1, #1
   1b632:	225f      	movs	r2, #95	; 0x5f
   1b634:	1858      	adds	r0, r3, r1
   1b636:	7122      	strb	r2, [r4, #4]
   1b638:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1b63c:	f7fc bf97 	b.w	1856e <d_print_comp+0x237e>
   1b640:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b644:	2200      	movs	r2, #0
   1b646:	1d20      	adds	r0, r4, #4
   1b648:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1b64c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b650:	4798      	blx	r3
   1b652:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b656:	2101      	movs	r1, #1
   1b658:	2263      	movs	r2, #99	; 0x63
   1b65a:	1843      	adds	r3, r0, r1
   1b65c:	7122      	strb	r2, [r4, #4]
   1b65e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b662:	f7fd bda9 	b.w	191b8 <d_print_comp+0x2fc8>
   1b666:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b66a:	2200      	movs	r2, #0
   1b66c:	1d20      	adds	r0, r4, #4
   1b66e:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1b672:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b676:	4798      	blx	r3
   1b678:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b67c:	2101      	movs	r1, #1
   1b67e:	2261      	movs	r2, #97	; 0x61
   1b680:	1843      	adds	r3, r0, r1
   1b682:	7122      	strb	r2, [r4, #4]
   1b684:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b688:	f7fd bd8a 	b.w	191a0 <d_print_comp+0x2fb0>
   1b68c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b690:	2200      	movs	r2, #0
   1b692:	1d20      	adds	r0, r4, #4
   1b694:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1b698:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b69c:	4798      	blx	r3
   1b69e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b6a2:	2101      	movs	r1, #1
   1b6a4:	2272      	movs	r2, #114	; 0x72
   1b6a6:	1843      	adds	r3, r0, r1
   1b6a8:	7122      	strb	r2, [r4, #4]
   1b6aa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b6ae:	f7fd bd6a 	b.w	19186 <d_print_comp+0x2f96>
   1b6b2:	4619      	mov	r1, r3
   1b6b4:	f002 f872 	bl	1d79c <d_print_cast.part.7>
   1b6b8:	f7fd bf47 	b.w	1954a <d_print_comp+0x335a>
   1b6bc:	f884 3103 	strb.w	r3, [r4, #259]	; 0x103
   1b6c0:	1d20      	adds	r0, r4, #4
   1b6c2:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b6c6:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b6ca:	4798      	blx	r3
   1b6cc:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b6d0:	2101      	movs	r1, #1
   1b6d2:	2246      	movs	r2, #70	; 0x46
   1b6d4:	1843      	adds	r3, r0, r1
   1b6d6:	7122      	strb	r2, [r4, #4]
   1b6d8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b6dc:	f7fd bd46 	b.w	1916c <d_print_comp+0x2f7c>
   1b6e0:	f884 3103 	strb.w	r3, [r4, #259]	; 0x103
   1b6e4:	1d20      	adds	r0, r4, #4
   1b6e6:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b6ea:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b6ee:	4798      	blx	r3
   1b6f0:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1b6f4:	2101      	movs	r1, #1
   1b6f6:	205f      	movs	r0, #95	; 0x5f
   1b6f8:	1853      	adds	r3, r2, r1
   1b6fa:	7120      	strb	r0, [r4, #4]
   1b6fc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b700:	f7fd bd27 	b.w	19152 <d_print_comp+0x2f62>
   1b704:	1d20      	adds	r0, r4, #4
   1b706:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b70a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b70e:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   1b712:	4798      	blx	r3
   1b714:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b718:	2101      	movs	r1, #1
   1b71a:	223a      	movs	r2, #58	; 0x3a
   1b71c:	1843      	adds	r3, r0, r1
   1b71e:	7122      	strb	r2, [r4, #4]
   1b720:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b724:	f7fc ba8a 	b.w	17c3c <d_print_comp+0x1a4c>
   1b728:	6852      	ldr	r2, [r2, #4]
   1b72a:	6896      	ldr	r6, [r2, #8]
   1b72c:	2e01      	cmp	r6, #1
   1b72e:	f47d ae37 	bne.w	193a0 <d_print_comp+0x31b0>
   1b732:	6852      	ldr	r2, [r2, #4]
   1b734:	7811      	ldrb	r1, [r2, #0]
   1b736:	293e      	cmp	r1, #62	; 0x3e
   1b738:	f47d ae32 	bne.w	193a0 <d_print_comp+0x31b0>
   1b73c:	4620      	mov	r0, r4
   1b73e:	2128      	movs	r1, #40	; 0x28
   1b740:	f7f8 ff08 	bl	14554 <d_append_char>
   1b744:	68ab      	ldr	r3, [r5, #8]
   1b746:	f7fd be2b 	b.w	193a0 <d_print_comp+0x31b0>
   1b74a:	2600      	movs	r6, #0
   1b74c:	1d20      	adds	r0, r4, #4
   1b74e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b752:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b756:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   1b75a:	4798      	blx	r3
   1b75c:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b760:	2201      	movs	r2, #1
   1b762:	4631      	mov	r1, r6
   1b764:	1883      	adds	r3, r0, r2
   1b766:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b76a:	f7fd bcd9 	b.w	19120 <d_print_comp+0x2f30>
   1b76e:	1c1a      	adds	r2, r3, #0
   1b770:	bf18      	it	ne
   1b772:	2201      	movne	r2, #1
   1b774:	2900      	cmp	r1, #0
   1b776:	bf08      	it	eq
   1b778:	f042 0201 	orreq.w	r2, r2, #1
   1b77c:	2a00      	cmp	r2, #0
   1b77e:	f47c aaa5 	bne.w	17ccc <d_print_comp+0x1adc>
   1b782:	6849      	ldr	r1, [r1, #4]
   1b784:	2900      	cmp	r1, #0
   1b786:	f47d ae69 	bne.w	1945c <d_print_comp+0x326c>
   1b78a:	f7fc ba9f 	b.w	17ccc <d_print_comp+0x1adc>
   1b78e:	f64b 01bc 	movw	r1, #47292	; 0xb8bc
   1b792:	6870      	ldr	r0, [r6, #4]
   1b794:	f2c0 0102 	movt	r1, #2
   1b798:	f004 fe4c 	bl	20434 <strncmp>
   1b79c:	2800      	cmp	r0, #0
   1b79e:	f47c aaa9 	bne.w	17cf4 <d_print_comp+0x1b04>
   1b7a2:	68a9      	ldr	r1, [r5, #8]
   1b7a4:	4620      	mov	r0, r4
   1b7a6:	f7fa fd23 	bl	161f0 <d_print_comp>
   1b7aa:	f64b 01c4 	movw	r1, #47300	; 0xb8c4
   1b7ae:	4620      	mov	r0, r4
   1b7b0:	f2c0 0102 	movt	r1, #2
   1b7b4:	f7fa fc74 	bl	160a0 <d_append_string>
   1b7b8:	f8c4 7118 	str.w	r7, [r4, #280]	; 0x118
   1b7bc:	f7fa be0e 	b.w	163dc <d_print_comp+0x1ec>
   1b7c0:	4650      	mov	r0, sl
   1b7c2:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b7c6:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   1b7ca:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b7ce:	4798      	blx	r3
   1b7d0:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b7d4:	2101      	movs	r1, #1
   1b7d6:	464b      	mov	r3, r9
   1b7d8:	1845      	adds	r5, r0, r1
   1b7da:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
   1b7de:	f7fc bb93 	b.w	17f08 <d_print_comp+0x1d18>
   1b7e2:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b7e6:	4650      	mov	r0, sl
   1b7e8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b7ec:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   1b7f0:	4798      	blx	r3
   1b7f2:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1b7f6:	2101      	movs	r1, #1
   1b7f8:	464b      	mov	r3, r9
   1b7fa:	1855      	adds	r5, r2, r1
   1b7fc:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
   1b800:	f7fc bd7f 	b.w	18302 <d_print_comp+0x2112>
   1b804:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b808:	4650      	mov	r0, sl
   1b80a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b80e:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   1b812:	4798      	blx	r3
   1b814:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1b818:	2101      	movs	r1, #1
   1b81a:	464b      	mov	r3, r9
   1b81c:	1855      	adds	r5, r2, r1
   1b81e:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
   1b822:	f7fd bd0a 	b.w	1923a <d_print_comp+0x304a>
   1b826:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b82a:	4650      	mov	r0, sl
   1b82c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b830:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   1b834:	4798      	blx	r3
   1b836:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b83a:	4629      	mov	r1, r5
   1b83c:	2300      	movs	r3, #0
   1b83e:	1942      	adds	r2, r0, r5
   1b840:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1b844:	f7fd bd0c 	b.w	19260 <d_print_comp+0x3070>
   1b848:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b84c:	4650      	mov	r0, sl
   1b84e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b852:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   1b856:	4798      	blx	r3
   1b858:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b85c:	4629      	mov	r1, r5
   1b85e:	2300      	movs	r3, #0
   1b860:	1942      	adds	r2, r0, r5
   1b862:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1b866:	f7fc bb65 	b.w	17f34 <d_print_comp+0x1d44>
   1b86a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b86e:	4650      	mov	r0, sl
   1b870:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b874:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   1b878:	4798      	blx	r3
   1b87a:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b87e:	4629      	mov	r1, r5
   1b880:	2300      	movs	r3, #0
   1b882:	1942      	adds	r2, r0, r5
   1b884:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1b888:	f7fc bd4e 	b.w	18328 <d_print_comp+0x2138>
   1b88c:	4611      	mov	r1, r2
   1b88e:	2600      	movs	r6, #0
   1b890:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b894:	1d20      	adds	r0, r4, #4
   1b896:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   1b89a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b89e:	4798      	blx	r3
   1b8a0:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
   1b8a4:	4632      	mov	r2, r6
   1b8a6:	1c4f      	adds	r7, r1, #1
   1b8a8:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
   1b8ac:	f7fd bd3e 	b.w	1932c <d_print_comp+0x313c>
   1b8b0:	4620      	mov	r0, r4
   1b8b2:	4641      	mov	r1, r8
   1b8b4:	f002 f81a 	bl	1d8ec <d_print_expr_op>
   1b8b8:	f7fd bd90 	b.w	193dc <d_print_comp+0x31ec>
   1b8bc:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b8c0:	2200      	movs	r2, #0
   1b8c2:	1d20      	adds	r0, r4, #4
   1b8c4:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1b8c8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b8cc:	4798      	blx	r3
   1b8ce:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b8d2:	2101      	movs	r1, #1
   1b8d4:	225f      	movs	r2, #95	; 0x5f
   1b8d6:	1843      	adds	r3, r0, r1
   1b8d8:	7122      	strb	r2, [r4, #4]
   1b8da:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b8de:	f7fd bdd9 	b.w	19494 <d_print_comp+0x32a4>
   1b8e2:	2600      	movs	r6, #0
   1b8e4:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b8e8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b8ec:	1d20      	adds	r0, r4, #4
   1b8ee:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   1b8f2:	4798      	blx	r3
   1b8f4:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1b8f8:	4631      	mov	r1, r6
   1b8fa:	1c53      	adds	r3, r2, #1
   1b8fc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b900:	f7fd be0e 	b.w	19520 <d_print_comp+0x3330>
   1b904:	2600      	movs	r6, #0
   1b906:	1d20      	adds	r0, r4, #4
   1b908:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b90c:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   1b910:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b914:	4798      	blx	r3
   1b916:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b91a:	4631      	mov	r1, r6
   1b91c:	1c43      	adds	r3, r0, #1
   1b91e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b922:	f7fd be17 	b.w	19554 <d_print_comp+0x3364>
   1b926:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b92a:	2200      	movs	r2, #0
   1b92c:	1d20      	adds	r0, r4, #4
   1b92e:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1b932:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b936:	4798      	blx	r3
   1b938:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b93c:	2101      	movs	r1, #1
   1b93e:	2274      	movs	r2, #116	; 0x74
   1b940:	1843      	adds	r3, r0, r1
   1b942:	7122      	strb	r2, [r4, #4]
   1b944:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b948:	f7fd bdca 	b.w	194e0 <d_print_comp+0x32f0>
   1b94c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b950:	2200      	movs	r2, #0
   1b952:	1d20      	adds	r0, r4, #4
   1b954:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1b958:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b95c:	4798      	blx	r3
   1b95e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b962:	2101      	movs	r1, #1
   1b964:	2261      	movs	r2, #97	; 0x61
   1b966:	1843      	adds	r3, r0, r1
   1b968:	7122      	strb	r2, [r4, #4]
   1b96a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b96e:	f7fd bdab 	b.w	194c8 <d_print_comp+0x32d8>
   1b972:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b976:	2200      	movs	r2, #0
   1b978:	1d20      	adds	r0, r4, #4
   1b97a:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1b97e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b982:	4798      	blx	r3
   1b984:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1b988:	2101      	movs	r1, #1
   1b98a:	2253      	movs	r2, #83	; 0x53
   1b98c:	1843      	adds	r3, r0, r1
   1b98e:	7122      	strb	r2, [r4, #4]
   1b990:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1b994:	f7fd bd8b 	b.w	194ae <d_print_comp+0x32be>
   1b998:	1d20      	adds	r0, r4, #4
   1b99a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b99e:	f884 a103 	strb.w	sl, [r4, #259]	; 0x103
   1b9a2:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b9a6:	4798      	blx	r3
   1b9a8:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1b9ac:	2101      	movs	r1, #1
   1b9ae:	202c      	movs	r0, #44	; 0x2c
   1b9b0:	1855      	adds	r5, r2, r1
   1b9b2:	7120      	strb	r0, [r4, #4]
   1b9b4:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
   1b9b8:	f7fd bdfe 	b.w	195b8 <d_print_comp+0x33c8>
   1b9bc:	6869      	ldr	r1, [r5, #4]
   1b9be:	4620      	mov	r0, r4
   1b9c0:	f002 f838 	bl	1da34 <d_print_subexpr>
   1b9c4:	f64b 1184 	movw	r1, #47492	; 0xb984
   1b9c8:	4620      	mov	r0, r4
   1b9ca:	f2c0 0102 	movt	r1, #2
   1b9ce:	f7fa fb67 	bl	160a0 <d_append_string>
   1b9d2:	f7fa bd03 	b.w	163dc <d_print_comp+0x1ec>
   1b9d6:	1d20      	adds	r0, r4, #4
   1b9d8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1b9dc:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1b9e0:	f884 a103 	strb.w	sl, [r4, #259]	; 0x103
   1b9e4:	4798      	blx	r3
   1b9e6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1b9ea:	222c      	movs	r2, #44	; 0x2c
   1b9ec:	4629      	mov	r1, r5
   1b9ee:	1c58      	adds	r0, r3, #1
   1b9f0:	7122      	strb	r2, [r4, #4]
   1b9f2:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1b9f6:	f7fa bddf 	b.w	165b8 <d_print_comp+0x3c8>
   1b9fa:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   1b9fe:	fa5f f18c 	uxtb.w	r1, ip
   1ba02:	2905      	cmp	r1, #5
   1ba04:	d979      	bls.n	1bafa <d_print_comp+0x590a>
   1ba06:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   1ba0a:	fa5f f18c 	uxtb.w	r1, ip
   1ba0e:	2905      	cmp	r1, #5
   1ba10:	f63d ab46 	bhi.w	190a0 <d_print_comp+0x2eb0>
   1ba14:	3b57      	subs	r3, #87	; 0x57
   1ba16:	f7fd bae3 	b.w	18fe0 <d_print_comp+0x2df0>
   1ba1a:	460b      	mov	r3, r1
   1ba1c:	f7fd baff 	b.w	1901e <d_print_comp+0x2e2e>
   1ba20:	2100      	movs	r1, #0
   1ba22:	f7fd bd0b 	b.w	1943c <d_print_comp+0x324c>
   1ba26:	2700      	movs	r7, #0
   1ba28:	1d20      	adds	r0, r4, #4
   1ba2a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ba2e:	f884 7103 	strb.w	r7, [r4, #259]	; 0x103
   1ba32:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ba36:	4798      	blx	r3
   1ba38:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1ba3c:	4639      	mov	r1, r7
   1ba3e:	1c43      	adds	r3, r0, #1
   1ba40:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1ba44:	e56d      	b.n	1b522 <d_print_comp+0x5332>
   1ba46:	2500      	movs	r5, #0
   1ba48:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ba4c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ba50:	1d20      	adds	r0, r4, #4
   1ba52:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   1ba56:	4798      	blx	r3
   1ba58:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1ba5c:	4629      	mov	r1, r5
   1ba5e:	1c5a      	adds	r2, r3, #1
   1ba60:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1ba64:	e516      	b.n	1b494 <d_print_comp+0x52a4>
   1ba66:	2500      	movs	r5, #0
   1ba68:	1d20      	adds	r0, r4, #4
   1ba6a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ba6e:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   1ba72:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ba76:	4798      	blx	r3
   1ba78:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1ba7c:	4629      	mov	r1, r5
   1ba7e:	1c58      	adds	r0, r3, #1
   1ba80:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1ba84:	e539      	b.n	1b4fa <d_print_comp+0x530a>
   1ba86:	2600      	movs	r6, #0
   1ba88:	1d20      	adds	r0, r4, #4
   1ba8a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ba8e:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   1ba92:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ba96:	4798      	blx	r3
   1ba98:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1ba9c:	4631      	mov	r1, r6
   1ba9e:	1c58      	adds	r0, r3, #1
   1baa0:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1baa4:	e516      	b.n	1b4d4 <d_print_comp+0x52e4>
   1baa6:	f04f 0801 	mov.w	r8, #1
   1baaa:	f7fc bcec 	b.w	18486 <d_print_comp+0x2296>
   1baae:	2600      	movs	r6, #0
   1bab0:	1d20      	adds	r0, r4, #4
   1bab2:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1bab6:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   1baba:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1babe:	4798      	blx	r3
   1bac0:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1bac4:	4631      	mov	r1, r6
   1bac6:	1c43      	adds	r3, r0, #1
   1bac8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1bacc:	e4f1      	b.n	1b4b2 <d_print_comp+0x52c2>
   1bace:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   1bad2:	1d20      	adds	r0, r4, #4
   1bad4:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1bad8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1badc:	4798      	blx	r3
   1bade:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1bae2:	6820      	ldr	r0, [r4, #0]
   1bae4:	4631      	mov	r1, r6
   1bae6:	1c53      	adds	r3, r2, #1
   1bae8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1baec:	f000 0620 	and.w	r6, r0, #32
   1baf0:	f7fc bbd2 	b.w	18298 <d_print_comp+0x20a8>
   1baf4:	3b37      	subs	r3, #55	; 0x37
   1baf6:	f7fd ba92 	b.w	1901e <d_print_comp+0x2e2e>
   1bafa:	3b37      	subs	r3, #55	; 0x37
   1bafc:	f7fd ba70 	b.w	18fe0 <d_print_comp+0x2df0>
   1bb00:	f04f 0901 	mov.w	r9, #1
   1bb04:	7833      	ldrb	r3, [r6, #0]
   1bb06:	2b04      	cmp	r3, #4
   1bb08:	f000 810f 	beq.w	1bd2a <d_print_comp+0x5b3a>
   1bb0c:	2b02      	cmp	r3, #2
   1bb0e:	f040 808b 	bne.w	1bc28 <d_print_comp+0x5a38>
   1bb12:	68b7      	ldr	r7, [r6, #8]
   1bb14:	7839      	ldrb	r1, [r7, #0]
   1bb16:	9702      	str	r7, [sp, #8]
   1bb18:	293f      	cmp	r1, #63	; 0x3f
   1bb1a:	bf04      	itt	eq
   1bb1c:	687a      	ldreq	r2, [r7, #4]
   1bb1e:	9202      	streq	r2, [sp, #8]
   1bb20:	9f02      	ldr	r7, [sp, #8]
   1bb22:	783a      	ldrb	r2, [r7, #0]
   1bb24:	3a1a      	subs	r2, #26
   1bb26:	b2d0      	uxtb	r0, r2
   1bb28:	2802      	cmp	r0, #2
   1bb2a:	d87d      	bhi.n	1bc28 <d_print_comp+0x5a38>
   1bb2c:	f1b9 0f04 	cmp.w	r9, #4
   1bb30:	f000 8129 	beq.w	1bd86 <d_print_comp+0x5b96>
   1bb34:	f109 32ff 	add.w	r2, r9, #4294967295
   1bb38:	f019 0f01 	tst.w	r9, #1
   1bb3c:	9200      	str	r2, [sp, #0]
   1bb3e:	eb08 1a02 	add.w	sl, r8, r2, lsl #4
   1bb42:	d120      	bne.n	1bb86 <d_print_comp+0x5996>
   1bb44:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
   1bb48:	eb08 1709 	add.w	r7, r8, r9, lsl #4
   1bb4c:	f8c4 7118 	str.w	r7, [r4, #280]	; 0x118
   1bb50:	f10a 0b10 	add.w	fp, sl, #16
   1bb54:	9f02      	ldr	r7, [sp, #8]
   1bb56:	f109 0901 	add.w	r9, r9, #1
   1bb5a:	e88b 000f 	stmia.w	fp, {r0, r1, r2, r3}
   1bb5e:	2000      	movs	r0, #0
   1bb60:	f8ca a010 	str.w	sl, [sl, #16]
   1bb64:	f8ca 7004 	str.w	r7, [sl, #4]
   1bb68:	f8ca 0008 	str.w	r0, [sl, #8]
   1bb6c:	f8ca c00c 	str.w	ip, [sl, #12]
   1bb70:	687f      	ldr	r7, [r7, #4]
   1bb72:	783a      	ldrb	r2, [r7, #0]
   1bb74:	9702      	str	r7, [sp, #8]
   1bb76:	3a1a      	subs	r2, #26
   1bb78:	b2d1      	uxtb	r1, r2
   1bb7a:	2902      	cmp	r1, #2
   1bb7c:	d854      	bhi.n	1bc28 <d_print_comp+0x5a38>
   1bb7e:	46da      	mov	sl, fp
   1bb80:	f109 33ff 	add.w	r3, r9, #4294967295
   1bb84:	9300      	str	r3, [sp, #0]
   1bb86:	46e3      	mov	fp, ip
   1bb88:	9f02      	ldr	r7, [sp, #8]
   1bb8a:	9604      	str	r6, [sp, #16]
   1bb8c:	46a4      	mov	ip, r4
   1bb8e:	9505      	str	r5, [sp, #20]
   1bb90:	e01c      	b.n	1bbcc <d_print_comp+0x59dc>
   1bb92:	f1b9 0f04 	cmp.w	r9, #4
   1bb96:	f109 0901 	add.w	r9, r9, #1
   1bb9a:	f109 37ff 	add.w	r7, r9, #4294967295
   1bb9e:	9700      	str	r7, [sp, #0]
   1bba0:	f000 80f0 	beq.w	1bd84 <d_print_comp+0x5b94>
   1bba4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1bba8:	9f03      	ldr	r7, [sp, #12]
   1bbaa:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   1bbae:	2600      	movs	r6, #0
   1bbb0:	9b02      	ldr	r3, [sp, #8]
   1bbb2:	6065      	str	r5, [r4, #4]
   1bbb4:	60a6      	str	r6, [r4, #8]
   1bbb6:	6123      	str	r3, [r4, #16]
   1bbb8:	f8c4 b00c 	str.w	fp, [r4, #12]
   1bbbc:	f8cc 7118 	str.w	r7, [ip, #280]	; 0x118
   1bbc0:	686f      	ldr	r7, [r5, #4]
   1bbc2:	783d      	ldrb	r5, [r7, #0]
   1bbc4:	3d1a      	subs	r5, #26
   1bbc6:	b2ec      	uxtb	r4, r5
   1bbc8:	2c02      	cmp	r4, #2
   1bbca:	d82a      	bhi.n	1bc22 <d_print_comp+0x5a32>
   1bbcc:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
   1bbd0:	f10a 0410 	add.w	r4, sl, #16
   1bbd4:	9d00      	ldr	r5, [sp, #0]
   1bbd6:	f104 0610 	add.w	r6, r4, #16
   1bbda:	eb08 1505 	add.w	r5, r8, r5, lsl #4
   1bbde:	9500      	str	r5, [sp, #0]
   1bbe0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1bbe4:	eb08 1509 	add.w	r5, r8, r9, lsl #4
   1bbe8:	9a00      	ldr	r2, [sp, #0]
   1bbea:	f109 0901 	add.w	r9, r9, #1
   1bbee:	f8cc 5118 	str.w	r5, [ip, #280]	; 0x118
   1bbf2:	f109 35ff 	add.w	r5, r9, #4294967295
   1bbf6:	f8ca 7004 	str.w	r7, [sl, #4]
   1bbfa:	eb08 1109 	add.w	r1, r8, r9, lsl #4
   1bbfe:	f8ca 2010 	str.w	r2, [sl, #16]
   1bc02:	eb08 1005 	add.w	r0, r8, r5, lsl #4
   1bc06:	f8ca b00c 	str.w	fp, [sl, #12]
   1bc0a:	2500      	movs	r5, #0
   1bc0c:	f8ca 5008 	str.w	r5, [sl, #8]
   1bc10:	46b2      	mov	sl, r6
   1bc12:	687d      	ldr	r5, [r7, #4]
   1bc14:	9103      	str	r1, [sp, #12]
   1bc16:	9002      	str	r0, [sp, #8]
   1bc18:	782b      	ldrb	r3, [r5, #0]
   1bc1a:	3b1a      	subs	r3, #26
   1bc1c:	b2d9      	uxtb	r1, r3
   1bc1e:	2902      	cmp	r1, #2
   1bc20:	d9b7      	bls.n	1bb92 <d_print_comp+0x59a2>
   1bc22:	9e04      	ldr	r6, [sp, #16]
   1bc24:	4664      	mov	r4, ip
   1bc26:	9d05      	ldr	r5, [sp, #20]
   1bc28:	4620      	mov	r0, r4
   1bc2a:	68a9      	ldr	r1, [r5, #8]
   1bc2c:	f7fa fae0 	bl	161f0 <d_print_comp>
   1bc30:	7833      	ldrb	r3, [r6, #0]
   1bc32:	2b04      	cmp	r3, #4
   1bc34:	bf04      	itt	eq
   1bc36:	9b16      	ldreq	r3, [sp, #88]	; 0x58
   1bc38:	f8c4 3114 	streq.w	r3, [r4, #276]	; 0x114
   1bc3c:	f1b9 0f00 	cmp.w	r9, #0
   1bc40:	d01a      	beq.n	1bc78 <d_print_comp+0x5a88>
   1bc42:	eb08 1509 	add.w	r5, r8, r9, lsl #4
   1bc46:	f109 36ff 	add.w	r6, r9, #4294967295
   1bc4a:	2720      	movs	r7, #32
   1bc4c:	f104 0a04 	add.w	sl, r4, #4
   1bc50:	f855 8c08 	ldr.w	r8, [r5, #-8]
   1bc54:	f006 0b01 	and.w	fp, r6, #1
   1bc58:	f1b8 0f00 	cmp.w	r8, #0
   1bc5c:	d023      	beq.n	1bca6 <d_print_comp+0x5ab6>
   1bc5e:	3d10      	subs	r5, #16
   1bc60:	b156      	cbz	r6, 1bc78 <d_print_comp+0x5a88>
   1bc62:	f1bb 0f00 	cmp.w	fp, #0
   1bc66:	d00c      	beq.n	1bc82 <d_print_comp+0x5a92>
   1bc68:	f855 8c08 	ldr.w	r8, [r5, #-8]
   1bc6c:	3e01      	subs	r6, #1
   1bc6e:	f1b8 0f00 	cmp.w	r8, #0
   1bc72:	d039      	beq.n	1bce8 <d_print_comp+0x5af8>
   1bc74:	3d10      	subs	r5, #16
   1bc76:	b926      	cbnz	r6, 1bc82 <d_print_comp+0x5a92>
   1bc78:	9d01      	ldr	r5, [sp, #4]
   1bc7a:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
   1bc7e:	f7fa bbad 	b.w	163dc <d_print_comp+0x1ec>
   1bc82:	f855 9c08 	ldr.w	r9, [r5, #-8]
   1bc86:	f1a5 0810 	sub.w	r8, r5, #16
   1bc8a:	3e01      	subs	r6, #1
   1bc8c:	f1b9 0f00 	cmp.w	r9, #0
   1bc90:	d065      	beq.n	1bd5e <d_print_comp+0x5b6e>
   1bc92:	f858 5c08 	ldr.w	r5, [r8, #-8]
   1bc96:	3e01      	subs	r6, #1
   1bc98:	2d00      	cmp	r5, #0
   1bc9a:	d04d      	beq.n	1bd38 <d_print_comp+0x5b48>
   1bc9c:	f1a8 0510 	sub.w	r5, r8, #16
   1bca0:	2e00      	cmp	r6, #0
   1bca2:	d1ee      	bne.n	1bc82 <d_print_comp+0x5a92>
   1bca4:	e7e8      	b.n	1bc78 <d_print_comp+0x5a88>
   1bca6:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1bcaa:	29ff      	cmp	r1, #255	; 0xff
   1bcac:	d10d      	bne.n	1bcca <d_print_comp+0x5ada>
   1bcae:	4650      	mov	r0, sl
   1bcb0:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1bcb4:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
   1bcb8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1bcbc:	4798      	blx	r3
   1bcbe:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1bcc2:	4641      	mov	r1, r8
   1bcc4:	1c42      	adds	r2, r0, #1
   1bcc6:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1bcca:	eb04 0e01 	add.w	lr, r4, r1
   1bcce:	1c4b      	adds	r3, r1, #1
   1bcd0:	f884 7108 	strb.w	r7, [r4, #264]	; 0x108
   1bcd4:	4620      	mov	r0, r4
   1bcd6:	f88e 7004 	strb.w	r7, [lr, #4]
   1bcda:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1bcde:	f855 1c0c 	ldr.w	r1, [r5, #-12]
   1bce2:	f000 f8bf 	bl	1be64 <d_print_mod>
   1bce6:	e7ba      	b.n	1bc5e <d_print_comp+0x5a6e>
   1bce8:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1bcec:	29ff      	cmp	r1, #255	; 0xff
   1bcee:	d10d      	bne.n	1bd0c <d_print_comp+0x5b1c>
   1bcf0:	4650      	mov	r0, sl
   1bcf2:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1bcf6:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
   1bcfa:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1bcfe:	4798      	blx	r3
   1bd00:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1bd04:	4641      	mov	r1, r8
   1bd06:	1c42      	adds	r2, r0, #1
   1bd08:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1bd0c:	eb04 0c01 	add.w	ip, r4, r1
   1bd10:	f884 7108 	strb.w	r7, [r4, #264]	; 0x108
   1bd14:	3101      	adds	r1, #1
   1bd16:	4620      	mov	r0, r4
   1bd18:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1bd1c:	f88c 7004 	strb.w	r7, [ip, #4]
   1bd20:	f855 1c0c 	ldr.w	r1, [r5, #-12]
   1bd24:	f000 f89e 	bl	1be64 <d_print_mod>
   1bd28:	e7a4      	b.n	1bc74 <d_print_comp+0x5a84>
   1bd2a:	ab18      	add	r3, sp, #96	; 0x60
   1bd2c:	9617      	str	r6, [sp, #92]	; 0x5c
   1bd2e:	f843 cd08 	str.w	ip, [r3, #-8]!
   1bd32:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1bd36:	e777      	b.n	1bc28 <d_print_comp+0x5a38>
   1bd38:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1bd3c:	29ff      	cmp	r1, #255	; 0xff
   1bd3e:	d051      	beq.n	1bde4 <d_print_comp+0x5bf4>
   1bd40:	eb04 0e01 	add.w	lr, r4, r1
   1bd44:	1c4d      	adds	r5, r1, #1
   1bd46:	f884 7108 	strb.w	r7, [r4, #264]	; 0x108
   1bd4a:	4620      	mov	r0, r4
   1bd4c:	f88e 7004 	strb.w	r7, [lr, #4]
   1bd50:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
   1bd54:	f858 1c0c 	ldr.w	r1, [r8, #-12]
   1bd58:	f000 f884 	bl	1be64 <d_print_mod>
   1bd5c:	e79e      	b.n	1bc9c <d_print_comp+0x5aac>
   1bd5e:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1bd62:	29ff      	cmp	r1, #255	; 0xff
   1bd64:	d04d      	beq.n	1be02 <d_print_comp+0x5c12>
   1bd66:	eb04 0e01 	add.w	lr, r4, r1
   1bd6a:	1c4b      	adds	r3, r1, #1
   1bd6c:	4620      	mov	r0, r4
   1bd6e:	f855 1c0c 	ldr.w	r1, [r5, #-12]
   1bd72:	f88e 7004 	strb.w	r7, [lr, #4]
   1bd76:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1bd7a:	f884 7108 	strb.w	r7, [r4, #264]	; 0x108
   1bd7e:	f000 f871 	bl	1be64 <d_print_mod>
   1bd82:	e786      	b.n	1bc92 <d_print_comp+0x5aa2>
   1bd84:	4664      	mov	r4, ip
   1bd86:	2001      	movs	r0, #1
   1bd88:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
   1bd8c:	f7fa bb26 	b.w	163dc <d_print_comp+0x1ec>
   1bd90:	f04f 0904 	mov.w	r9, #4
   1bd94:	e6b6      	b.n	1bb04 <d_print_comp+0x5914>
   1bd96:	f04f 0903 	mov.w	r9, #3
   1bd9a:	e6b3      	b.n	1bb04 <d_print_comp+0x5914>
   1bd9c:	f04f 0902 	mov.w	r9, #2
   1bda0:	e6b0      	b.n	1bb04 <d_print_comp+0x5914>
   1bda2:	2600      	movs	r6, #0
   1bda4:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1bda8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1bdac:	1d20      	adds	r0, r4, #4
   1bdae:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   1bdb2:	4798      	blx	r3
   1bdb4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1bdb8:	4631      	mov	r1, r6
   1bdba:	1c5a      	adds	r2, r3, #1
   1bdbc:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1bdc0:	f7ff bbd4 	b.w	1b56c <d_print_comp+0x537c>
   1bdc4:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1bdc8:	1d20      	adds	r0, r4, #4
   1bdca:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1bdce:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1bdd2:	4798      	blx	r3
   1bdd4:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1bdd8:	4631      	mov	r1, r6
   1bdda:	1c53      	adds	r3, r2, #1
   1bddc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1bde0:	f7ff bbb0 	b.w	1b544 <d_print_comp+0x5354>
   1bde4:	4650      	mov	r0, sl
   1bde6:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1bdea:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   1bdee:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1bdf2:	4798      	blx	r3
   1bdf4:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1bdf8:	4629      	mov	r1, r5
   1bdfa:	1c42      	adds	r2, r0, #1
   1bdfc:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1be00:	e79e      	b.n	1bd40 <d_print_comp+0x5b50>
   1be02:	4650      	mov	r0, sl
   1be04:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1be08:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   1be0c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1be10:	4798      	blx	r3
   1be12:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1be16:	4649      	mov	r1, r9
   1be18:	1c50      	adds	r0, r2, #1
   1be1a:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1be1e:	e7a2      	b.n	1bd66 <d_print_comp+0x5b76>
   1be20:	4620      	mov	r0, r4
   1be22:	212d      	movs	r1, #45	; 0x2d
   1be24:	f7f8 fb96 	bl	14554 <d_append_char>
   1be28:	f7ff baea 	b.w	1b400 <d_print_comp+0x5210>
   1be2c:	f8d4 610c 	ldr.w	r6, [r4, #268]	; 0x10c
   1be30:	4650      	mov	r0, sl
   1be32:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   1be36:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1be3a:	47b0      	blx	r6
   1be3c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1be40:	2100      	movs	r1, #0
   1be42:	f8c4 9104 	str.w	r9, [r4, #260]	; 0x104
   1be46:	1c5e      	adds	r6, r3, #1
   1be48:	f8c4 6124 	str.w	r6, [r4, #292]	; 0x124
   1be4c:	f7fd b937 	b.w	190be <d_print_comp+0x2ece>
   1be50:	f64b 1170 	movw	r1, #47472	; 0xb970
   1be54:	4620      	mov	r0, r4
   1be56:	f2c0 0102 	movt	r1, #2
   1be5a:	f7fa f921 	bl	160a0 <d_append_string>
   1be5e:	f7fa babd 	b.w	163dc <d_print_comp+0x1ec>
   1be62:	bf00      	nop

0001be64 <d_print_mod>:
   1be64:	780a      	ldrb	r2, [r1, #0]
   1be66:	b570      	push	{r4, r5, r6, lr}
   1be68:	1ed3      	subs	r3, r2, #3
   1be6a:	460d      	mov	r5, r1
   1be6c:	4604      	mov	r4, r0
   1be6e:	2b26      	cmp	r3, #38	; 0x26
   1be70:	f200 80bf 	bhi.w	1bff2 <d_print_mod+0x18e>
   1be74:	e8df f013 	tbh	[pc, r3, lsl #1]
   1be78:	00bd01ab 	.word	0x00bd01ab
   1be7c:	00bd00bd 	.word	0x00bd00bd
   1be80:	00bd00bd 	.word	0x00bd00bd
   1be84:	00bd00bd 	.word	0x00bd00bd
   1be88:	00bd00bd 	.word	0x00bd00bd
   1be8c:	00bd00bd 	.word	0x00bd00bd
   1be90:	00bd00bd 	.word	0x00bd00bd
   1be94:	00bd00bd 	.word	0x00bd00bd
   1be98:	00bd00bd 	.word	0x00bd00bd
   1be9c:	00bd00bd 	.word	0x00bd00bd
   1bea0:	013500c1 	.word	0x013500c1
   1bea4:	00c101b0 	.word	0x00c101b0
   1bea8:	01b00135 	.word	0x01b00135
   1beac:	02f301ed 	.word	0x02f301ed
   1beb0:	02020338 	.word	0x02020338
   1beb4:	0282021b 	.word	0x0282021b
   1beb8:	00bd00bd 	.word	0x00bd00bd
   1bebc:	00bd00bd 	.word	0x00bd00bd
   1bec0:	00bd02f9 	.word	0x00bd02f9
   1bec4:	0027      	.short	0x0027
   1bec6:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
   1beca:	29ff      	cmp	r1, #255	; 0xff
   1becc:	f000 86d6 	beq.w	1cc7c <d_print_mod+0xe18>
   1bed0:	eb00 0c01 	add.w	ip, r0, r1
   1bed4:	3101      	adds	r1, #1
   1bed6:	2320      	movs	r3, #32
   1bed8:	29ff      	cmp	r1, #255	; 0xff
   1beda:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
   1bede:	f88c 3004 	strb.w	r3, [ip, #4]
   1bee2:	f880 3108 	strb.w	r3, [r0, #264]	; 0x108
   1bee6:	f000 8391 	beq.w	1c60c <d_print_mod+0x7a8>
   1beea:	eb04 0e01 	add.w	lr, r4, r1
   1beee:	3101      	adds	r1, #1
   1bef0:	265f      	movs	r6, #95	; 0x5f
   1bef2:	29ff      	cmp	r1, #255	; 0xff
   1bef4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1bef8:	f88e 6004 	strb.w	r6, [lr, #4]
   1befc:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   1bf00:	f000 845b 	beq.w	1c7ba <d_print_mod+0x956>
   1bf04:	eb04 0c01 	add.w	ip, r4, r1
   1bf08:	3101      	adds	r1, #1
   1bf0a:	205f      	movs	r0, #95	; 0x5f
   1bf0c:	29ff      	cmp	r1, #255	; 0xff
   1bf0e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1bf12:	f88c 0004 	strb.w	r0, [ip, #4]
   1bf16:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1bf1a:	f000 843b 	beq.w	1c794 <d_print_mod+0x930>
   1bf1e:	eb04 0e01 	add.w	lr, r4, r1
   1bf22:	3101      	adds	r1, #1
   1bf24:	2376      	movs	r3, #118	; 0x76
   1bf26:	29ff      	cmp	r1, #255	; 0xff
   1bf28:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1bf2c:	f88e 3004 	strb.w	r3, [lr, #4]
   1bf30:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1bf34:	f000 850b 	beq.w	1c94e <d_print_mod+0xaea>
   1bf38:	eb04 0c01 	add.w	ip, r4, r1
   1bf3c:	3101      	adds	r1, #1
   1bf3e:	2365      	movs	r3, #101	; 0x65
   1bf40:	29ff      	cmp	r1, #255	; 0xff
   1bf42:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1bf46:	f88c 3004 	strb.w	r3, [ip, #4]
   1bf4a:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1bf4e:	f000 84eb 	beq.w	1c928 <d_print_mod+0xac4>
   1bf52:	eb04 0e01 	add.w	lr, r4, r1
   1bf56:	3101      	adds	r1, #1
   1bf58:	2363      	movs	r3, #99	; 0x63
   1bf5a:	29ff      	cmp	r1, #255	; 0xff
   1bf5c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1bf60:	f88e 3004 	strb.w	r3, [lr, #4]
   1bf64:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1bf68:	f000 84cb 	beq.w	1c902 <d_print_mod+0xa9e>
   1bf6c:	eb04 0c01 	add.w	ip, r4, r1
   1bf70:	3101      	adds	r1, #1
   1bf72:	2374      	movs	r3, #116	; 0x74
   1bf74:	29ff      	cmp	r1, #255	; 0xff
   1bf76:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1bf7a:	f88c 3004 	strb.w	r3, [ip, #4]
   1bf7e:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1bf82:	f000 84ab 	beq.w	1c8dc <d_print_mod+0xa78>
   1bf86:	eb04 0e01 	add.w	lr, r4, r1
   1bf8a:	3101      	adds	r1, #1
   1bf8c:	236f      	movs	r3, #111	; 0x6f
   1bf8e:	29ff      	cmp	r1, #255	; 0xff
   1bf90:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1bf94:	f88e 3004 	strb.w	r3, [lr, #4]
   1bf98:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1bf9c:	f000 848b 	beq.w	1c8b6 <d_print_mod+0xa52>
   1bfa0:	eb04 0c01 	add.w	ip, r4, r1
   1bfa4:	3101      	adds	r1, #1
   1bfa6:	2372      	movs	r3, #114	; 0x72
   1bfa8:	29ff      	cmp	r1, #255	; 0xff
   1bfaa:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1bfae:	f88c 3004 	strb.w	r3, [ip, #4]
   1bfb2:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1bfb6:	f000 846c 	beq.w	1c892 <d_print_mod+0xa2e>
   1bfba:	1c4a      	adds	r2, r1, #1
   1bfbc:	1861      	adds	r1, r4, r1
   1bfbe:	2328      	movs	r3, #40	; 0x28
   1bfc0:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1bfc4:	4620      	mov	r0, r4
   1bfc6:	710b      	strb	r3, [r1, #4]
   1bfc8:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1bfcc:	6869      	ldr	r1, [r5, #4]
   1bfce:	f7fa f90f 	bl	161f0 <d_print_comp>
   1bfd2:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1bfd6:	1c4a      	adds	r2, r1, #1
   1bfd8:	29ff      	cmp	r1, #255	; 0xff
   1bfda:	f000 8604 	beq.w	1cbe6 <d_print_mod+0xd82>
   1bfde:	eb04 0e01 	add.w	lr, r4, r1
   1bfe2:	2029      	movs	r0, #41	; 0x29
   1bfe4:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1bfe8:	f88e 0004 	strb.w	r0, [lr, #4]
   1bfec:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1bff0:	bd70      	pop	{r4, r5, r6, pc}
   1bff2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1bff6:	f7fa b8fb 	b.w	161f0 <d_print_comp>
   1bffa:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
   1bffe:	29ff      	cmp	r1, #255	; 0xff
   1c000:	f000 8629 	beq.w	1cc56 <d_print_mod+0xdf2>
   1c004:	eb00 0c01 	add.w	ip, r0, r1
   1c008:	3101      	adds	r1, #1
   1c00a:	2320      	movs	r3, #32
   1c00c:	29ff      	cmp	r1, #255	; 0xff
   1c00e:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
   1c012:	f88c 3004 	strb.w	r3, [ip, #4]
   1c016:	f880 3108 	strb.w	r3, [r0, #264]	; 0x108
   1c01a:	f000 82e5 	beq.w	1c5e8 <d_print_mod+0x784>
   1c01e:	eb04 0c01 	add.w	ip, r4, r1
   1c022:	3101      	adds	r1, #1
   1c024:	2072      	movs	r0, #114	; 0x72
   1c026:	29ff      	cmp	r1, #255	; 0xff
   1c028:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1c02c:	f88c 0004 	strb.w	r0, [ip, #4]
   1c030:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1c034:	f000 84b1 	beq.w	1c99a <d_print_mod+0xb36>
   1c038:	eb04 0c01 	add.w	ip, r4, r1
   1c03c:	3101      	adds	r1, #1
   1c03e:	2065      	movs	r0, #101	; 0x65
   1c040:	29ff      	cmp	r1, #255	; 0xff
   1c042:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1c046:	f88c 0004 	strb.w	r0, [ip, #4]
   1c04a:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1c04e:	f000 8491 	beq.w	1c974 <d_print_mod+0xb10>
   1c052:	eb04 0c01 	add.w	ip, r4, r1
   1c056:	3101      	adds	r1, #1
   1c058:	2073      	movs	r0, #115	; 0x73
   1c05a:	29ff      	cmp	r1, #255	; 0xff
   1c05c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1c060:	f88c 0004 	strb.w	r0, [ip, #4]
   1c064:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1c068:	f000 8554 	beq.w	1cb14 <d_print_mod+0xcb0>
   1c06c:	eb04 0c01 	add.w	ip, r4, r1
   1c070:	3101      	adds	r1, #1
   1c072:	2074      	movs	r0, #116	; 0x74
   1c074:	29ff      	cmp	r1, #255	; 0xff
   1c076:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1c07a:	f88c 0004 	strb.w	r0, [ip, #4]
   1c07e:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1c082:	f000 8534 	beq.w	1caee <d_print_mod+0xc8a>
   1c086:	eb04 0c01 	add.w	ip, r4, r1
   1c08a:	3101      	adds	r1, #1
   1c08c:	2072      	movs	r0, #114	; 0x72
   1c08e:	29ff      	cmp	r1, #255	; 0xff
   1c090:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1c094:	f88c 0004 	strb.w	r0, [ip, #4]
   1c098:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1c09c:	f000 8514 	beq.w	1cac8 <d_print_mod+0xc64>
   1c0a0:	eb04 0c01 	add.w	ip, r4, r1
   1c0a4:	3101      	adds	r1, #1
   1c0a6:	2069      	movs	r0, #105	; 0x69
   1c0a8:	29ff      	cmp	r1, #255	; 0xff
   1c0aa:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1c0ae:	f88c 0004 	strb.w	r0, [ip, #4]
   1c0b2:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1c0b6:	f000 84f4 	beq.w	1caa2 <d_print_mod+0xc3e>
   1c0ba:	1862      	adds	r2, r4, r1
   1c0bc:	2363      	movs	r3, #99	; 0x63
   1c0be:	3101      	adds	r1, #1
   1c0c0:	29ff      	cmp	r1, #255	; 0xff
   1c0c2:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1c0c6:	7113      	strb	r3, [r2, #4]
   1c0c8:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1c0cc:	f000 8222 	beq.w	1c514 <d_print_mod+0x6b0>
   1c0d0:	1c4a      	adds	r2, r1, #1
   1c0d2:	1861      	adds	r1, r4, r1
   1c0d4:	2074      	movs	r0, #116	; 0x74
   1c0d6:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1c0da:	7108      	strb	r0, [r1, #4]
   1c0dc:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1c0e0:	bd70      	pop	{r4, r5, r6, pc}
   1c0e2:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
   1c0e6:	29ff      	cmp	r1, #255	; 0xff
   1c0e8:	f000 85a2 	beq.w	1cc30 <d_print_mod+0xdcc>
   1c0ec:	eb00 0c01 	add.w	ip, r0, r1
   1c0f0:	3101      	adds	r1, #1
   1c0f2:	2320      	movs	r3, #32
   1c0f4:	29ff      	cmp	r1, #255	; 0xff
   1c0f6:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
   1c0fa:	f88c 3004 	strb.w	r3, [ip, #4]
   1c0fe:	f880 3108 	strb.w	r3, [r0, #264]	; 0x108
   1c102:	f000 825f 	beq.w	1c5c4 <d_print_mod+0x760>
   1c106:	eb04 0c01 	add.w	ip, r4, r1
   1c10a:	3101      	adds	r1, #1
   1c10c:	2076      	movs	r0, #118	; 0x76
   1c10e:	29ff      	cmp	r1, #255	; 0xff
   1c110:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1c114:	f88c 0004 	strb.w	r0, [ip, #4]
   1c118:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1c11c:	f000 83a7 	beq.w	1c86e <d_print_mod+0xa0a>
   1c120:	eb04 0c01 	add.w	ip, r4, r1
   1c124:	3101      	adds	r1, #1
   1c126:	206f      	movs	r0, #111	; 0x6f
   1c128:	29ff      	cmp	r1, #255	; 0xff
   1c12a:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1c12e:	f88c 0004 	strb.w	r0, [ip, #4]
   1c132:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1c136:	f000 84a1 	beq.w	1ca7c <d_print_mod+0xc18>
   1c13a:	eb04 0c01 	add.w	ip, r4, r1
   1c13e:	3101      	adds	r1, #1
   1c140:	206c      	movs	r0, #108	; 0x6c
   1c142:	29ff      	cmp	r1, #255	; 0xff
   1c144:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1c148:	f88c 0004 	strb.w	r0, [ip, #4]
   1c14c:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1c150:	f000 8481 	beq.w	1ca56 <d_print_mod+0xbf2>
   1c154:	eb04 0c01 	add.w	ip, r4, r1
   1c158:	3101      	adds	r1, #1
   1c15a:	2061      	movs	r0, #97	; 0x61
   1c15c:	29ff      	cmp	r1, #255	; 0xff
   1c15e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1c162:	f88c 0004 	strb.w	r0, [ip, #4]
   1c166:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1c16a:	f000 8461 	beq.w	1ca30 <d_print_mod+0xbcc>
   1c16e:	eb04 0c01 	add.w	ip, r4, r1
   1c172:	3101      	adds	r1, #1
   1c174:	2074      	movs	r0, #116	; 0x74
   1c176:	29ff      	cmp	r1, #255	; 0xff
   1c178:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1c17c:	f88c 0004 	strb.w	r0, [ip, #4]
   1c180:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1c184:	f000 8441 	beq.w	1ca0a <d_print_mod+0xba6>
   1c188:	eb04 0c01 	add.w	ip, r4, r1
   1c18c:	3101      	adds	r1, #1
   1c18e:	2069      	movs	r0, #105	; 0x69
   1c190:	29ff      	cmp	r1, #255	; 0xff
   1c192:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1c196:	f88c 0004 	strb.w	r0, [ip, #4]
   1c19a:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1c19e:	f000 8421 	beq.w	1c9e4 <d_print_mod+0xb80>
   1c1a2:	eb04 0c01 	add.w	ip, r4, r1
   1c1a6:	3101      	adds	r1, #1
   1c1a8:	206c      	movs	r0, #108	; 0x6c
   1c1aa:	29ff      	cmp	r1, #255	; 0xff
   1c1ac:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1c1b0:	f88c 0004 	strb.w	r0, [ip, #4]
   1c1b4:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1c1b8:	f000 8402 	beq.w	1c9c0 <d_print_mod+0xb5c>
   1c1bc:	1c4a      	adds	r2, r1, #1
   1c1be:	1861      	adds	r1, r4, r1
   1c1c0:	2065      	movs	r0, #101	; 0x65
   1c1c2:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1c1c6:	7108      	strb	r0, [r1, #4]
   1c1c8:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1c1cc:	bd70      	pop	{r4, r5, r6, pc}
   1c1ce:	6849      	ldr	r1, [r1, #4]
   1c1d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1c1d4:	f7fa b80c 	b.w	161f0 <d_print_comp>
   1c1d8:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
   1c1dc:	29ff      	cmp	r1, #255	; 0xff
   1c1de:	f000 8514 	beq.w	1cc0a <d_print_mod+0xda6>
   1c1e2:	eb00 0c01 	add.w	ip, r0, r1
   1c1e6:	3101      	adds	r1, #1
   1c1e8:	2320      	movs	r3, #32
   1c1ea:	29ff      	cmp	r1, #255	; 0xff
   1c1ec:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
   1c1f0:	f88c 3004 	strb.w	r3, [ip, #4]
   1c1f4:	f880 3108 	strb.w	r3, [r0, #264]	; 0x108
   1c1f8:	f000 81d2 	beq.w	1c5a0 <d_print_mod+0x73c>
   1c1fc:	eb04 0c01 	add.w	ip, r4, r1
   1c200:	3101      	adds	r1, #1
   1c202:	2063      	movs	r0, #99	; 0x63
   1c204:	29ff      	cmp	r1, #255	; 0xff
   1c206:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1c20a:	f88c 0004 	strb.w	r0, [ip, #4]
   1c20e:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1c212:	f000 84b8 	beq.w	1cb86 <d_print_mod+0xd22>
   1c216:	eb04 0c01 	add.w	ip, r4, r1
   1c21a:	3101      	adds	r1, #1
   1c21c:	206f      	movs	r0, #111	; 0x6f
   1c21e:	29ff      	cmp	r1, #255	; 0xff
   1c220:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1c224:	f88c 0004 	strb.w	r0, [ip, #4]
   1c228:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1c22c:	f000 8498 	beq.w	1cb60 <d_print_mod+0xcfc>
   1c230:	eb04 0c01 	add.w	ip, r4, r1
   1c234:	3101      	adds	r1, #1
   1c236:	206e      	movs	r0, #110	; 0x6e
   1c238:	29ff      	cmp	r1, #255	; 0xff
   1c23a:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1c23e:	f88c 0004 	strb.w	r0, [ip, #4]
   1c242:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1c246:	f000 8478 	beq.w	1cb3a <d_print_mod+0xcd6>
   1c24a:	1862      	adds	r2, r4, r1
   1c24c:	2373      	movs	r3, #115	; 0x73
   1c24e:	3101      	adds	r1, #1
   1c250:	e736      	b.n	1c0c0 <d_print_mod+0x25c>
   1c252:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
   1c256:	29ff      	cmp	r1, #255	; 0xff
   1c258:	f000 855c 	beq.w	1cd14 <d_print_mod+0xeb0>
   1c25c:	1c48      	adds	r0, r1, #1
   1c25e:	eb04 0c01 	add.w	ip, r4, r1
   1c262:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   1c266:	2120      	movs	r1, #32
   1c268:	4620      	mov	r0, r4
   1c26a:	f88c 1004 	strb.w	r1, [ip, #4]
   1c26e:	f884 1108 	strb.w	r1, [r4, #264]	; 0x108
   1c272:	68a9      	ldr	r1, [r5, #8]
   1c274:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1c278:	f7f9 bfba 	b.w	161f0 <d_print_comp>
   1c27c:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
   1c280:	29ff      	cmp	r1, #255	; 0xff
   1c282:	f000 8534 	beq.w	1ccee <d_print_mod+0xe8a>
   1c286:	1842      	adds	r2, r0, r1
   1c288:	3101      	adds	r1, #1
   1c28a:	2326      	movs	r3, #38	; 0x26
   1c28c:	29ff      	cmp	r1, #255	; 0xff
   1c28e:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
   1c292:	7113      	strb	r3, [r2, #4]
   1c294:	f880 3108 	strb.w	r3, [r0, #264]	; 0x108
   1c298:	f000 812b 	beq.w	1c4f2 <d_print_mod+0x68e>
   1c29c:	1c4a      	adds	r2, r1, #1
   1c29e:	1861      	adds	r1, r4, r1
   1c2a0:	2026      	movs	r0, #38	; 0x26
   1c2a2:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1c2a6:	7108      	strb	r0, [r1, #4]
   1c2a8:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1c2ac:	bd70      	pop	{r4, r5, r6, pc}
   1c2ae:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
   1c2b2:	29ff      	cmp	r1, #255	; 0xff
   1c2b4:	f000 84f5 	beq.w	1cca2 <d_print_mod+0xe3e>
   1c2b8:	eb00 0c01 	add.w	ip, r0, r1
   1c2bc:	3101      	adds	r1, #1
   1c2be:	2363      	movs	r3, #99	; 0x63
   1c2c0:	29ff      	cmp	r1, #255	; 0xff
   1c2c2:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
   1c2c6:	f88c 3004 	strb.w	r3, [ip, #4]
   1c2ca:	f880 3108 	strb.w	r3, [r0, #264]	; 0x108
   1c2ce:	f000 8155 	beq.w	1c57c <d_print_mod+0x718>
   1c2d2:	eb04 0c01 	add.w	ip, r4, r1
   1c2d6:	3101      	adds	r1, #1
   1c2d8:	206f      	movs	r0, #111	; 0x6f
   1c2da:	29ff      	cmp	r1, #255	; 0xff
   1c2dc:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1c2e0:	f88c 0004 	strb.w	r0, [ip, #4]
   1c2e4:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1c2e8:	f000 82af 	beq.w	1c84a <d_print_mod+0x9e6>
   1c2ec:	eb04 0c01 	add.w	ip, r4, r1
   1c2f0:	3101      	adds	r1, #1
   1c2f2:	206d      	movs	r0, #109	; 0x6d
   1c2f4:	29ff      	cmp	r1, #255	; 0xff
   1c2f6:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1c2fa:	f88c 0004 	strb.w	r0, [ip, #4]
   1c2fe:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1c302:	f000 8290 	beq.w	1c826 <d_print_mod+0x9c2>
   1c306:	eb04 0c01 	add.w	ip, r4, r1
   1c30a:	3101      	adds	r1, #1
   1c30c:	2070      	movs	r0, #112	; 0x70
   1c30e:	29ff      	cmp	r1, #255	; 0xff
   1c310:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1c314:	f88c 0004 	strb.w	r0, [ip, #4]
   1c318:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1c31c:	f000 8271 	beq.w	1c802 <d_print_mod+0x99e>
   1c320:	eb04 0c01 	add.w	ip, r4, r1
   1c324:	3101      	adds	r1, #1
   1c326:	206c      	movs	r0, #108	; 0x6c
   1c328:	29ff      	cmp	r1, #255	; 0xff
   1c32a:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1c32e:	f88c 0004 	strb.w	r0, [ip, #4]
   1c332:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1c336:	f000 8252 	beq.w	1c7de <d_print_mod+0x97a>
   1c33a:	eb04 0c01 	add.w	ip, r4, r1
   1c33e:	3101      	adds	r1, #1
   1c340:	2065      	movs	r0, #101	; 0x65
   1c342:	29ff      	cmp	r1, #255	; 0xff
   1c344:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1c348:	f88c 0004 	strb.w	r0, [ip, #4]
   1c34c:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1c350:	f000 8102 	beq.w	1c558 <d_print_mod+0x6f4>
   1c354:	1862      	adds	r2, r4, r1
   1c356:	2378      	movs	r3, #120	; 0x78
   1c358:	3101      	adds	r1, #1
   1c35a:	29ff      	cmp	r1, #255	; 0xff
   1c35c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1c360:	7113      	strb	r3, [r2, #4]
   1c362:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1c366:	f000 80e6 	beq.w	1c536 <d_print_mod+0x6d2>
   1c36a:	1c4a      	adds	r2, r1, #1
   1c36c:	1861      	adds	r1, r4, r1
   1c36e:	2020      	movs	r0, #32
   1c370:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1c374:	7108      	strb	r0, [r1, #4]
   1c376:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1c37a:	bd70      	pop	{r4, r5, r6, pc}
   1c37c:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
   1c380:	29ff      	cmp	r1, #255	; 0xff
   1c382:	f000 84a1 	beq.w	1ccc8 <d_print_mod+0xe64>
   1c386:	eb00 0c01 	add.w	ip, r0, r1
   1c38a:	3101      	adds	r1, #1
   1c38c:	2369      	movs	r3, #105	; 0x69
   1c38e:	29ff      	cmp	r1, #255	; 0xff
   1c390:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
   1c394:	f88c 3004 	strb.w	r3, [ip, #4]
   1c398:	f880 3108 	strb.w	r3, [r0, #264]	; 0x108
   1c39c:	f000 81e8 	beq.w	1c770 <d_print_mod+0x90c>
   1c3a0:	eb04 0c01 	add.w	ip, r4, r1
   1c3a4:	3101      	adds	r1, #1
   1c3a6:	206d      	movs	r0, #109	; 0x6d
   1c3a8:	29ff      	cmp	r1, #255	; 0xff
   1c3aa:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1c3ae:	f88c 0004 	strb.w	r0, [ip, #4]
   1c3b2:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1c3b6:	f000 81c9 	beq.w	1c74c <d_print_mod+0x8e8>
   1c3ba:	eb04 0c01 	add.w	ip, r4, r1
   1c3be:	3101      	adds	r1, #1
   1c3c0:	2061      	movs	r0, #97	; 0x61
   1c3c2:	29ff      	cmp	r1, #255	; 0xff
   1c3c4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1c3c8:	f88c 0004 	strb.w	r0, [ip, #4]
   1c3cc:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1c3d0:	f000 81aa 	beq.w	1c728 <d_print_mod+0x8c4>
   1c3d4:	eb04 0c01 	add.w	ip, r4, r1
   1c3d8:	3101      	adds	r1, #1
   1c3da:	2067      	movs	r0, #103	; 0x67
   1c3dc:	29ff      	cmp	r1, #255	; 0xff
   1c3de:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1c3e2:	f88c 0004 	strb.w	r0, [ip, #4]
   1c3e6:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1c3ea:	f000 818b 	beq.w	1c704 <d_print_mod+0x8a0>
   1c3ee:	eb04 0c01 	add.w	ip, r4, r1
   1c3f2:	3101      	adds	r1, #1
   1c3f4:	2069      	movs	r0, #105	; 0x69
   1c3f6:	29ff      	cmp	r1, #255	; 0xff
   1c3f8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1c3fc:	f88c 0004 	strb.w	r0, [ip, #4]
   1c400:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1c404:	f000 816c 	beq.w	1c6e0 <d_print_mod+0x87c>
   1c408:	eb04 0c01 	add.w	ip, r4, r1
   1c40c:	3101      	adds	r1, #1
   1c40e:	206e      	movs	r0, #110	; 0x6e
   1c410:	29ff      	cmp	r1, #255	; 0xff
   1c412:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1c416:	f88c 0004 	strb.w	r0, [ip, #4]
   1c41a:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1c41e:	f000 814d 	beq.w	1c6bc <d_print_mod+0x858>
   1c422:	eb04 0c01 	add.w	ip, r4, r1
   1c426:	3101      	adds	r1, #1
   1c428:	2061      	movs	r0, #97	; 0x61
   1c42a:	29ff      	cmp	r1, #255	; 0xff
   1c42c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1c430:	f88c 0004 	strb.w	r0, [ip, #4]
   1c434:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1c438:	f000 812e 	beq.w	1c698 <d_print_mod+0x834>
   1c43c:	eb04 0c01 	add.w	ip, r4, r1
   1c440:	3101      	adds	r1, #1
   1c442:	2072      	movs	r0, #114	; 0x72
   1c444:	29ff      	cmp	r1, #255	; 0xff
   1c446:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1c44a:	f88c 0004 	strb.w	r0, [ip, #4]
   1c44e:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1c452:	f000 810f 	beq.w	1c674 <d_print_mod+0x810>
   1c456:	1862      	adds	r2, r4, r1
   1c458:	2379      	movs	r3, #121	; 0x79
   1c45a:	3101      	adds	r1, #1
   1c45c:	e77d      	b.n	1c35a <d_print_mod+0x4f6>
   1c45e:	6805      	ldr	r5, [r0, #0]
   1c460:	f015 0504 	ands.w	r5, r5, #4
   1c464:	f000 83a2 	beq.w	1cbac <d_print_mod+0xd48>
   1c468:	bd70      	pop	{r4, r5, r6, pc}
   1c46a:	f890 2108 	ldrb.w	r2, [r0, #264]	; 0x108
   1c46e:	2a28      	cmp	r2, #40	; 0x28
   1c470:	d00e      	beq.n	1c490 <d_print_mod+0x62c>
   1c472:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
   1c476:	1c4a      	adds	r2, r1, #1
   1c478:	29ff      	cmp	r1, #255	; 0xff
   1c47a:	f000 845d 	beq.w	1cd38 <d_print_mod+0xed4>
   1c47e:	eb04 0e01 	add.w	lr, r4, r1
   1c482:	2020      	movs	r0, #32
   1c484:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1c488:	f88e 0004 	strb.w	r0, [lr, #4]
   1c48c:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1c490:	6869      	ldr	r1, [r5, #4]
   1c492:	4620      	mov	r0, r4
   1c494:	f7f9 feac 	bl	161f0 <d_print_comp>
   1c498:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1c49c:	29ff      	cmp	r1, #255	; 0xff
   1c49e:	f000 8390 	beq.w	1cbc2 <d_print_mod+0xd5e>
   1c4a2:	eb04 0c01 	add.w	ip, r4, r1
   1c4a6:	3101      	adds	r1, #1
   1c4a8:	253a      	movs	r5, #58	; 0x3a
   1c4aa:	29ff      	cmp	r1, #255	; 0xff
   1c4ac:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1c4b0:	f88c 5004 	strb.w	r5, [ip, #4]
   1c4b4:	f884 5108 	strb.w	r5, [r4, #264]	; 0x108
   1c4b8:	f000 80cb 	beq.w	1c652 <d_print_mod+0x7ee>
   1c4bc:	eb04 0e01 	add.w	lr, r4, r1
   1c4c0:	3101      	adds	r1, #1
   1c4c2:	203a      	movs	r0, #58	; 0x3a
   1c4c4:	29ff      	cmp	r1, #255	; 0xff
   1c4c6:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1c4ca:	f88e 0004 	strb.w	r0, [lr, #4]
   1c4ce:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1c4d2:	f000 80ad 	beq.w	1c630 <d_print_mod+0x7cc>
   1c4d6:	1c4a      	adds	r2, r1, #1
   1c4d8:	1861      	adds	r1, r4, r1
   1c4da:	232a      	movs	r3, #42	; 0x2a
   1c4dc:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1c4e0:	710b      	strb	r3, [r1, #4]
   1c4e2:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1c4e6:	bd70      	pop	{r4, r5, r6, pc}
   1c4e8:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
   1c4ec:	29ff      	cmp	r1, #255	; 0xff
   1c4ee:	f47f aed5 	bne.w	1c29c <d_print_mod+0x438>
   1c4f2:	2500      	movs	r5, #0
   1c4f4:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c4f8:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
   1c4fc:	3004      	adds	r0, #4
   1c4fe:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c502:	4798      	blx	r3
   1c504:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1c508:	2201      	movs	r2, #1
   1c50a:	4629      	mov	r1, r5
   1c50c:	1898      	adds	r0, r3, r2
   1c50e:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1c512:	e6c4      	b.n	1c29e <d_print_mod+0x43a>
   1c514:	2500      	movs	r5, #0
   1c516:	1d20      	adds	r0, r4, #4
   1c518:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c51c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c520:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   1c524:	4798      	blx	r3
   1c526:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1c52a:	2201      	movs	r2, #1
   1c52c:	4629      	mov	r1, r5
   1c52e:	1883      	adds	r3, r0, r2
   1c530:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1c534:	e5cd      	b.n	1c0d2 <d_print_mod+0x26e>
   1c536:	2500      	movs	r5, #0
   1c538:	1d20      	adds	r0, r4, #4
   1c53a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c53e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c542:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   1c546:	4798      	blx	r3
   1c548:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1c54c:	2201      	movs	r2, #1
   1c54e:	4629      	mov	r1, r5
   1c550:	1883      	adds	r3, r0, r2
   1c552:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1c556:	e709      	b.n	1c36c <d_print_mod+0x508>
   1c558:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c55c:	2000      	movs	r0, #0
   1c55e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c562:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1c566:	1d20      	adds	r0, r4, #4
   1c568:	4798      	blx	r3
   1c56a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1c56e:	2101      	movs	r1, #1
   1c570:	2378      	movs	r3, #120	; 0x78
   1c572:	1850      	adds	r0, r2, r1
   1c574:	7123      	strb	r3, [r4, #4]
   1c576:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1c57a:	e6f6      	b.n	1c36a <d_print_mod+0x506>
   1c57c:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
   1c580:	2200      	movs	r2, #0
   1c582:	f880 2103 	strb.w	r2, [r0, #259]	; 0x103
   1c586:	3004      	adds	r0, #4
   1c588:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c58c:	4798      	blx	r3
   1c58e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1c592:	2101      	movs	r1, #1
   1c594:	226f      	movs	r2, #111	; 0x6f
   1c596:	1843      	adds	r3, r0, r1
   1c598:	7122      	strb	r2, [r4, #4]
   1c59a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1c59e:	e6a5      	b.n	1c2ec <d_print_mod+0x488>
   1c5a0:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
   1c5a4:	2200      	movs	r2, #0
   1c5a6:	f880 2103 	strb.w	r2, [r0, #259]	; 0x103
   1c5aa:	3004      	adds	r0, #4
   1c5ac:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c5b0:	4798      	blx	r3
   1c5b2:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1c5b6:	2101      	movs	r1, #1
   1c5b8:	2263      	movs	r2, #99	; 0x63
   1c5ba:	1843      	adds	r3, r0, r1
   1c5bc:	7122      	strb	r2, [r4, #4]
   1c5be:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1c5c2:	e628      	b.n	1c216 <d_print_mod+0x3b2>
   1c5c4:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
   1c5c8:	2200      	movs	r2, #0
   1c5ca:	f880 2103 	strb.w	r2, [r0, #259]	; 0x103
   1c5ce:	3004      	adds	r0, #4
   1c5d0:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c5d4:	4798      	blx	r3
   1c5d6:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1c5da:	2101      	movs	r1, #1
   1c5dc:	2276      	movs	r2, #118	; 0x76
   1c5de:	1843      	adds	r3, r0, r1
   1c5e0:	7122      	strb	r2, [r4, #4]
   1c5e2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1c5e6:	e59b      	b.n	1c120 <d_print_mod+0x2bc>
   1c5e8:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
   1c5ec:	2200      	movs	r2, #0
   1c5ee:	f880 2103 	strb.w	r2, [r0, #259]	; 0x103
   1c5f2:	3004      	adds	r0, #4
   1c5f4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c5f8:	4798      	blx	r3
   1c5fa:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1c5fe:	2101      	movs	r1, #1
   1c600:	2272      	movs	r2, #114	; 0x72
   1c602:	1843      	adds	r3, r0, r1
   1c604:	7122      	strb	r2, [r4, #4]
   1c606:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1c60a:	e515      	b.n	1c038 <d_print_mod+0x1d4>
   1c60c:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
   1c610:	2200      	movs	r2, #0
   1c612:	f880 2103 	strb.w	r2, [r0, #259]	; 0x103
   1c616:	3004      	adds	r0, #4
   1c618:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c61c:	4798      	blx	r3
   1c61e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1c622:	2101      	movs	r1, #1
   1c624:	225f      	movs	r2, #95	; 0x5f
   1c626:	1858      	adds	r0, r3, r1
   1c628:	7122      	strb	r2, [r4, #4]
   1c62a:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1c62e:	e469      	b.n	1bf04 <d_print_mod+0xa0>
   1c630:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c634:	1d20      	adds	r0, r4, #4
   1c636:	2500      	movs	r5, #0
   1c638:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   1c63c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c640:	4798      	blx	r3
   1c642:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1c646:	2201      	movs	r2, #1
   1c648:	4629      	mov	r1, r5
   1c64a:	1883      	adds	r3, r0, r2
   1c64c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1c650:	e742      	b.n	1c4d8 <d_print_mod+0x674>
   1c652:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c656:	2000      	movs	r0, #0
   1c658:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c65c:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1c660:	1d20      	adds	r0, r4, #4
   1c662:	4798      	blx	r3
   1c664:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1c668:	2101      	movs	r1, #1
   1c66a:	7125      	strb	r5, [r4, #4]
   1c66c:	1853      	adds	r3, r2, r1
   1c66e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1c672:	e730      	b.n	1c4d6 <d_print_mod+0x672>
   1c674:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c678:	2000      	movs	r0, #0
   1c67a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c67e:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1c682:	1d20      	adds	r0, r4, #4
   1c684:	4798      	blx	r3
   1c686:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1c68a:	2101      	movs	r1, #1
   1c68c:	2379      	movs	r3, #121	; 0x79
   1c68e:	1850      	adds	r0, r2, r1
   1c690:	7123      	strb	r3, [r4, #4]
   1c692:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1c696:	e668      	b.n	1c36a <d_print_mod+0x506>
   1c698:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c69c:	2200      	movs	r2, #0
   1c69e:	1d20      	adds	r0, r4, #4
   1c6a0:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1c6a4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c6a8:	4798      	blx	r3
   1c6aa:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1c6ae:	2101      	movs	r1, #1
   1c6b0:	2272      	movs	r2, #114	; 0x72
   1c6b2:	1843      	adds	r3, r0, r1
   1c6b4:	7122      	strb	r2, [r4, #4]
   1c6b6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1c6ba:	e6cc      	b.n	1c456 <d_print_mod+0x5f2>
   1c6bc:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c6c0:	2200      	movs	r2, #0
   1c6c2:	1d20      	adds	r0, r4, #4
   1c6c4:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1c6c8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c6cc:	4798      	blx	r3
   1c6ce:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1c6d2:	2101      	movs	r1, #1
   1c6d4:	2261      	movs	r2, #97	; 0x61
   1c6d6:	1843      	adds	r3, r0, r1
   1c6d8:	7122      	strb	r2, [r4, #4]
   1c6da:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1c6de:	e6ad      	b.n	1c43c <d_print_mod+0x5d8>
   1c6e0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c6e4:	2200      	movs	r2, #0
   1c6e6:	1d20      	adds	r0, r4, #4
   1c6e8:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1c6ec:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c6f0:	4798      	blx	r3
   1c6f2:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1c6f6:	2101      	movs	r1, #1
   1c6f8:	226e      	movs	r2, #110	; 0x6e
   1c6fa:	1843      	adds	r3, r0, r1
   1c6fc:	7122      	strb	r2, [r4, #4]
   1c6fe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1c702:	e68e      	b.n	1c422 <d_print_mod+0x5be>
   1c704:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c708:	2200      	movs	r2, #0
   1c70a:	1d20      	adds	r0, r4, #4
   1c70c:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1c710:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c714:	4798      	blx	r3
   1c716:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1c71a:	2101      	movs	r1, #1
   1c71c:	2269      	movs	r2, #105	; 0x69
   1c71e:	1843      	adds	r3, r0, r1
   1c720:	7122      	strb	r2, [r4, #4]
   1c722:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1c726:	e66f      	b.n	1c408 <d_print_mod+0x5a4>
   1c728:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c72c:	2200      	movs	r2, #0
   1c72e:	1d20      	adds	r0, r4, #4
   1c730:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1c734:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c738:	4798      	blx	r3
   1c73a:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1c73e:	2101      	movs	r1, #1
   1c740:	2267      	movs	r2, #103	; 0x67
   1c742:	1843      	adds	r3, r0, r1
   1c744:	7122      	strb	r2, [r4, #4]
   1c746:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1c74a:	e650      	b.n	1c3ee <d_print_mod+0x58a>
   1c74c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c750:	2200      	movs	r2, #0
   1c752:	1d20      	adds	r0, r4, #4
   1c754:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1c758:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c75c:	4798      	blx	r3
   1c75e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1c762:	2101      	movs	r1, #1
   1c764:	2261      	movs	r2, #97	; 0x61
   1c766:	1843      	adds	r3, r0, r1
   1c768:	7122      	strb	r2, [r4, #4]
   1c76a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1c76e:	e631      	b.n	1c3d4 <d_print_mod+0x570>
   1c770:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
   1c774:	2200      	movs	r2, #0
   1c776:	f880 2103 	strb.w	r2, [r0, #259]	; 0x103
   1c77a:	3004      	adds	r0, #4
   1c77c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c780:	4798      	blx	r3
   1c782:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1c786:	2101      	movs	r1, #1
   1c788:	226d      	movs	r2, #109	; 0x6d
   1c78a:	1843      	adds	r3, r0, r1
   1c78c:	7122      	strb	r2, [r4, #4]
   1c78e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1c792:	e612      	b.n	1c3ba <d_print_mod+0x556>
   1c794:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c798:	2000      	movs	r0, #0
   1c79a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c79e:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1c7a2:	1d20      	adds	r0, r4, #4
   1c7a4:	4798      	blx	r3
   1c7a6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1c7aa:	2101      	movs	r1, #1
   1c7ac:	2276      	movs	r2, #118	; 0x76
   1c7ae:	1858      	adds	r0, r3, r1
   1c7b0:	7122      	strb	r2, [r4, #4]
   1c7b2:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1c7b6:	f7ff bbbf 	b.w	1bf38 <d_print_mod+0xd4>
   1c7ba:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c7be:	2000      	movs	r0, #0
   1c7c0:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c7c4:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1c7c8:	1d20      	adds	r0, r4, #4
   1c7ca:	4798      	blx	r3
   1c7cc:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1c7d0:	2101      	movs	r1, #1
   1c7d2:	7126      	strb	r6, [r4, #4]
   1c7d4:	1853      	adds	r3, r2, r1
   1c7d6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1c7da:	f7ff bba0 	b.w	1bf1e <d_print_mod+0xba>
   1c7de:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c7e2:	2200      	movs	r2, #0
   1c7e4:	1d20      	adds	r0, r4, #4
   1c7e6:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1c7ea:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c7ee:	4798      	blx	r3
   1c7f0:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1c7f4:	2101      	movs	r1, #1
   1c7f6:	2265      	movs	r2, #101	; 0x65
   1c7f8:	1843      	adds	r3, r0, r1
   1c7fa:	7122      	strb	r2, [r4, #4]
   1c7fc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1c800:	e5a8      	b.n	1c354 <d_print_mod+0x4f0>
   1c802:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c806:	2200      	movs	r2, #0
   1c808:	1d20      	adds	r0, r4, #4
   1c80a:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1c80e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c812:	4798      	blx	r3
   1c814:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1c818:	2101      	movs	r1, #1
   1c81a:	226c      	movs	r2, #108	; 0x6c
   1c81c:	1843      	adds	r3, r0, r1
   1c81e:	7122      	strb	r2, [r4, #4]
   1c820:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1c824:	e589      	b.n	1c33a <d_print_mod+0x4d6>
   1c826:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c82a:	2200      	movs	r2, #0
   1c82c:	1d20      	adds	r0, r4, #4
   1c82e:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1c832:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c836:	4798      	blx	r3
   1c838:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1c83c:	2101      	movs	r1, #1
   1c83e:	2270      	movs	r2, #112	; 0x70
   1c840:	1843      	adds	r3, r0, r1
   1c842:	7122      	strb	r2, [r4, #4]
   1c844:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1c848:	e56a      	b.n	1c320 <d_print_mod+0x4bc>
   1c84a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c84e:	2200      	movs	r2, #0
   1c850:	1d20      	adds	r0, r4, #4
   1c852:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1c856:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c85a:	4798      	blx	r3
   1c85c:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1c860:	2101      	movs	r1, #1
   1c862:	226d      	movs	r2, #109	; 0x6d
   1c864:	1843      	adds	r3, r0, r1
   1c866:	7122      	strb	r2, [r4, #4]
   1c868:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1c86c:	e54b      	b.n	1c306 <d_print_mod+0x4a2>
   1c86e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c872:	2200      	movs	r2, #0
   1c874:	1d20      	adds	r0, r4, #4
   1c876:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1c87a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c87e:	4798      	blx	r3
   1c880:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1c884:	2101      	movs	r1, #1
   1c886:	226f      	movs	r2, #111	; 0x6f
   1c888:	1843      	adds	r3, r0, r1
   1c88a:	7122      	strb	r2, [r4, #4]
   1c88c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1c890:	e453      	b.n	1c13a <d_print_mod+0x2d6>
   1c892:	2600      	movs	r6, #0
   1c894:	1d20      	adds	r0, r4, #4
   1c896:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c89a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c89e:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   1c8a2:	4798      	blx	r3
   1c8a4:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1c8a8:	2201      	movs	r2, #1
   1c8aa:	4631      	mov	r1, r6
   1c8ac:	1883      	adds	r3, r0, r2
   1c8ae:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1c8b2:	f7ff bb83 	b.w	1bfbc <d_print_mod+0x158>
   1c8b6:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c8ba:	2000      	movs	r0, #0
   1c8bc:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c8c0:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1c8c4:	1d20      	adds	r0, r4, #4
   1c8c6:	4798      	blx	r3
   1c8c8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1c8cc:	2101      	movs	r1, #1
   1c8ce:	2272      	movs	r2, #114	; 0x72
   1c8d0:	1858      	adds	r0, r3, r1
   1c8d2:	7122      	strb	r2, [r4, #4]
   1c8d4:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1c8d8:	f7ff bb6f 	b.w	1bfba <d_print_mod+0x156>
   1c8dc:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c8e0:	2000      	movs	r0, #0
   1c8e2:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c8e6:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1c8ea:	1d20      	adds	r0, r4, #4
   1c8ec:	4798      	blx	r3
   1c8ee:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1c8f2:	2101      	movs	r1, #1
   1c8f4:	226f      	movs	r2, #111	; 0x6f
   1c8f6:	1858      	adds	r0, r3, r1
   1c8f8:	7122      	strb	r2, [r4, #4]
   1c8fa:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1c8fe:	f7ff bb4f 	b.w	1bfa0 <d_print_mod+0x13c>
   1c902:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c906:	2000      	movs	r0, #0
   1c908:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c90c:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1c910:	1d20      	adds	r0, r4, #4
   1c912:	4798      	blx	r3
   1c914:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1c918:	2101      	movs	r1, #1
   1c91a:	2274      	movs	r2, #116	; 0x74
   1c91c:	1858      	adds	r0, r3, r1
   1c91e:	7122      	strb	r2, [r4, #4]
   1c920:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1c924:	f7ff bb2f 	b.w	1bf86 <d_print_mod+0x122>
   1c928:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c92c:	2000      	movs	r0, #0
   1c92e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c932:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1c936:	1d20      	adds	r0, r4, #4
   1c938:	4798      	blx	r3
   1c93a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1c93e:	2101      	movs	r1, #1
   1c940:	2263      	movs	r2, #99	; 0x63
   1c942:	1858      	adds	r0, r3, r1
   1c944:	7122      	strb	r2, [r4, #4]
   1c946:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1c94a:	f7ff bb0f 	b.w	1bf6c <d_print_mod+0x108>
   1c94e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c952:	2000      	movs	r0, #0
   1c954:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c958:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1c95c:	1d20      	adds	r0, r4, #4
   1c95e:	4798      	blx	r3
   1c960:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1c964:	2101      	movs	r1, #1
   1c966:	2265      	movs	r2, #101	; 0x65
   1c968:	1858      	adds	r0, r3, r1
   1c96a:	7122      	strb	r2, [r4, #4]
   1c96c:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1c970:	f7ff baef 	b.w	1bf52 <d_print_mod+0xee>
   1c974:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c978:	2200      	movs	r2, #0
   1c97a:	1d20      	adds	r0, r4, #4
   1c97c:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1c980:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c984:	4798      	blx	r3
   1c986:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1c98a:	2101      	movs	r1, #1
   1c98c:	2273      	movs	r2, #115	; 0x73
   1c98e:	1843      	adds	r3, r0, r1
   1c990:	7122      	strb	r2, [r4, #4]
   1c992:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1c996:	f7ff bb69 	b.w	1c06c <d_print_mod+0x208>
   1c99a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c99e:	2200      	movs	r2, #0
   1c9a0:	1d20      	adds	r0, r4, #4
   1c9a2:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1c9a6:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c9aa:	4798      	blx	r3
   1c9ac:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1c9b0:	2101      	movs	r1, #1
   1c9b2:	2265      	movs	r2, #101	; 0x65
   1c9b4:	1843      	adds	r3, r0, r1
   1c9b6:	7122      	strb	r2, [r4, #4]
   1c9b8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1c9bc:	f7ff bb49 	b.w	1c052 <d_print_mod+0x1ee>
   1c9c0:	2500      	movs	r5, #0
   1c9c2:	1d20      	adds	r0, r4, #4
   1c9c4:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c9c8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c9cc:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   1c9d0:	4798      	blx	r3
   1c9d2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1c9d6:	2201      	movs	r2, #1
   1c9d8:	4629      	mov	r1, r5
   1c9da:	1898      	adds	r0, r3, r2
   1c9dc:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1c9e0:	f7ff bbed 	b.w	1c1be <d_print_mod+0x35a>
   1c9e4:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1c9e8:	2200      	movs	r2, #0
   1c9ea:	1d20      	adds	r0, r4, #4
   1c9ec:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1c9f0:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1c9f4:	4798      	blx	r3
   1c9f6:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1c9fa:	2101      	movs	r1, #1
   1c9fc:	226c      	movs	r2, #108	; 0x6c
   1c9fe:	1843      	adds	r3, r0, r1
   1ca00:	7122      	strb	r2, [r4, #4]
   1ca02:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1ca06:	f7ff bbd9 	b.w	1c1bc <d_print_mod+0x358>
   1ca0a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ca0e:	2200      	movs	r2, #0
   1ca10:	1d20      	adds	r0, r4, #4
   1ca12:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1ca16:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ca1a:	4798      	blx	r3
   1ca1c:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1ca20:	2101      	movs	r1, #1
   1ca22:	2269      	movs	r2, #105	; 0x69
   1ca24:	1843      	adds	r3, r0, r1
   1ca26:	7122      	strb	r2, [r4, #4]
   1ca28:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1ca2c:	f7ff bbb9 	b.w	1c1a2 <d_print_mod+0x33e>
   1ca30:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ca34:	2200      	movs	r2, #0
   1ca36:	1d20      	adds	r0, r4, #4
   1ca38:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1ca3c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ca40:	4798      	blx	r3
   1ca42:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1ca46:	2101      	movs	r1, #1
   1ca48:	2274      	movs	r2, #116	; 0x74
   1ca4a:	1843      	adds	r3, r0, r1
   1ca4c:	7122      	strb	r2, [r4, #4]
   1ca4e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1ca52:	f7ff bb99 	b.w	1c188 <d_print_mod+0x324>
   1ca56:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ca5a:	2200      	movs	r2, #0
   1ca5c:	1d20      	adds	r0, r4, #4
   1ca5e:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1ca62:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ca66:	4798      	blx	r3
   1ca68:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1ca6c:	2101      	movs	r1, #1
   1ca6e:	2261      	movs	r2, #97	; 0x61
   1ca70:	1843      	adds	r3, r0, r1
   1ca72:	7122      	strb	r2, [r4, #4]
   1ca74:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1ca78:	f7ff bb79 	b.w	1c16e <d_print_mod+0x30a>
   1ca7c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ca80:	2200      	movs	r2, #0
   1ca82:	1d20      	adds	r0, r4, #4
   1ca84:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1ca88:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ca8c:	4798      	blx	r3
   1ca8e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1ca92:	2101      	movs	r1, #1
   1ca94:	226c      	movs	r2, #108	; 0x6c
   1ca96:	1843      	adds	r3, r0, r1
   1ca98:	7122      	strb	r2, [r4, #4]
   1ca9a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1ca9e:	f7ff bb59 	b.w	1c154 <d_print_mod+0x2f0>
   1caa2:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1caa6:	2000      	movs	r0, #0
   1caa8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1caac:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1cab0:	1d20      	adds	r0, r4, #4
   1cab2:	4798      	blx	r3
   1cab4:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1cab8:	2101      	movs	r1, #1
   1caba:	2363      	movs	r3, #99	; 0x63
   1cabc:	1850      	adds	r0, r2, r1
   1cabe:	7123      	strb	r3, [r4, #4]
   1cac0:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1cac4:	f7ff bb04 	b.w	1c0d0 <d_print_mod+0x26c>
   1cac8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1cacc:	2200      	movs	r2, #0
   1cace:	1d20      	adds	r0, r4, #4
   1cad0:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1cad4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1cad8:	4798      	blx	r3
   1cada:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1cade:	2101      	movs	r1, #1
   1cae0:	2269      	movs	r2, #105	; 0x69
   1cae2:	1843      	adds	r3, r0, r1
   1cae4:	7122      	strb	r2, [r4, #4]
   1cae6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1caea:	f7ff bae6 	b.w	1c0ba <d_print_mod+0x256>
   1caee:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1caf2:	2200      	movs	r2, #0
   1caf4:	1d20      	adds	r0, r4, #4
   1caf6:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1cafa:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1cafe:	4798      	blx	r3
   1cb00:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1cb04:	2101      	movs	r1, #1
   1cb06:	2272      	movs	r2, #114	; 0x72
   1cb08:	1843      	adds	r3, r0, r1
   1cb0a:	7122      	strb	r2, [r4, #4]
   1cb0c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1cb10:	f7ff bac6 	b.w	1c0a0 <d_print_mod+0x23c>
   1cb14:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1cb18:	2200      	movs	r2, #0
   1cb1a:	1d20      	adds	r0, r4, #4
   1cb1c:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1cb20:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1cb24:	4798      	blx	r3
   1cb26:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1cb2a:	2101      	movs	r1, #1
   1cb2c:	2274      	movs	r2, #116	; 0x74
   1cb2e:	1843      	adds	r3, r0, r1
   1cb30:	7122      	strb	r2, [r4, #4]
   1cb32:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1cb36:	f7ff baa6 	b.w	1c086 <d_print_mod+0x222>
   1cb3a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1cb3e:	2000      	movs	r0, #0
   1cb40:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1cb44:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1cb48:	1d20      	adds	r0, r4, #4
   1cb4a:	4798      	blx	r3
   1cb4c:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1cb50:	2101      	movs	r1, #1
   1cb52:	2373      	movs	r3, #115	; 0x73
   1cb54:	1850      	adds	r0, r2, r1
   1cb56:	7123      	strb	r3, [r4, #4]
   1cb58:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1cb5c:	f7ff bab8 	b.w	1c0d0 <d_print_mod+0x26c>
   1cb60:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1cb64:	2200      	movs	r2, #0
   1cb66:	1d20      	adds	r0, r4, #4
   1cb68:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1cb6c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1cb70:	4798      	blx	r3
   1cb72:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1cb76:	2101      	movs	r1, #1
   1cb78:	226e      	movs	r2, #110	; 0x6e
   1cb7a:	1843      	adds	r3, r0, r1
   1cb7c:	7122      	strb	r2, [r4, #4]
   1cb7e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1cb82:	f7ff bb62 	b.w	1c24a <d_print_mod+0x3e6>
   1cb86:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1cb8a:	2200      	movs	r2, #0
   1cb8c:	1d20      	adds	r0, r4, #4
   1cb8e:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1cb92:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1cb96:	4798      	blx	r3
   1cb98:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1cb9c:	2101      	movs	r1, #1
   1cb9e:	226f      	movs	r2, #111	; 0x6f
   1cba0:	1843      	adds	r3, r0, r1
   1cba2:	7122      	strb	r2, [r4, #4]
   1cba4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1cba8:	f7ff bb42 	b.w	1c230 <d_print_mod+0x3cc>
   1cbac:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
   1cbb0:	29ff      	cmp	r1, #255	; 0xff
   1cbb2:	f47f ac90 	bne.w	1c4d6 <d_print_mod+0x672>
   1cbb6:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
   1cbba:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
   1cbbe:	3004      	adds	r0, #4
   1cbc0:	e53c      	b.n	1c63c <d_print_mod+0x7d8>
   1cbc2:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1cbc6:	2200      	movs	r2, #0
   1cbc8:	1d20      	adds	r0, r4, #4
   1cbca:	f884 2103 	strb.w	r2, [r4, #259]	; 0x103
   1cbce:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1cbd2:	4798      	blx	r3
   1cbd4:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1cbd8:	2101      	movs	r1, #1
   1cbda:	223a      	movs	r2, #58	; 0x3a
   1cbdc:	1843      	adds	r3, r0, r1
   1cbde:	7122      	strb	r2, [r4, #4]
   1cbe0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1cbe4:	e46a      	b.n	1c4bc <d_print_mod+0x658>
   1cbe6:	2500      	movs	r5, #0
   1cbe8:	1d20      	adds	r0, r4, #4
   1cbea:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1cbee:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1cbf2:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   1cbf6:	4798      	blx	r3
   1cbf8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1cbfc:	2201      	movs	r2, #1
   1cbfe:	4629      	mov	r1, r5
   1cc00:	1898      	adds	r0, r3, r2
   1cc02:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1cc06:	f7ff b9ea 	b.w	1bfde <d_print_mod+0x17a>
   1cc0a:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
   1cc0e:	2200      	movs	r2, #0
   1cc10:	f880 2103 	strb.w	r2, [r0, #259]	; 0x103
   1cc14:	3004      	adds	r0, #4
   1cc16:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1cc1a:	4798      	blx	r3
   1cc1c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1cc20:	2101      	movs	r1, #1
   1cc22:	2220      	movs	r2, #32
   1cc24:	1858      	adds	r0, r3, r1
   1cc26:	7122      	strb	r2, [r4, #4]
   1cc28:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1cc2c:	f7ff bae6 	b.w	1c1fc <d_print_mod+0x398>
   1cc30:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
   1cc34:	2200      	movs	r2, #0
   1cc36:	f880 2103 	strb.w	r2, [r0, #259]	; 0x103
   1cc3a:	3004      	adds	r0, #4
   1cc3c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1cc40:	4798      	blx	r3
   1cc42:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1cc46:	2101      	movs	r1, #1
   1cc48:	2220      	movs	r2, #32
   1cc4a:	1858      	adds	r0, r3, r1
   1cc4c:	7122      	strb	r2, [r4, #4]
   1cc4e:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1cc52:	f7ff ba58 	b.w	1c106 <d_print_mod+0x2a2>
   1cc56:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
   1cc5a:	2200      	movs	r2, #0
   1cc5c:	f880 2103 	strb.w	r2, [r0, #259]	; 0x103
   1cc60:	3004      	adds	r0, #4
   1cc62:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1cc66:	4798      	blx	r3
   1cc68:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1cc6c:	2101      	movs	r1, #1
   1cc6e:	2220      	movs	r2, #32
   1cc70:	1858      	adds	r0, r3, r1
   1cc72:	7122      	strb	r2, [r4, #4]
   1cc74:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1cc78:	f7ff b9d1 	b.w	1c01e <d_print_mod+0x1ba>
   1cc7c:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
   1cc80:	2600      	movs	r6, #0
   1cc82:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1cc86:	f880 6103 	strb.w	r6, [r0, #259]	; 0x103
   1cc8a:	3004      	adds	r0, #4
   1cc8c:	4798      	blx	r3
   1cc8e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1cc92:	2101      	movs	r1, #1
   1cc94:	2220      	movs	r2, #32
   1cc96:	1846      	adds	r6, r0, r1
   1cc98:	7122      	strb	r2, [r4, #4]
   1cc9a:	f8c4 6124 	str.w	r6, [r4, #292]	; 0x124
   1cc9e:	f7ff b924 	b.w	1beea <d_print_mod+0x86>
   1cca2:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
   1cca6:	2200      	movs	r2, #0
   1cca8:	f880 2103 	strb.w	r2, [r0, #259]	; 0x103
   1ccac:	3004      	adds	r0, #4
   1ccae:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ccb2:	4798      	blx	r3
   1ccb4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1ccb8:	2101      	movs	r1, #1
   1ccba:	2263      	movs	r2, #99	; 0x63
   1ccbc:	1858      	adds	r0, r3, r1
   1ccbe:	7122      	strb	r2, [r4, #4]
   1ccc0:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1ccc4:	f7ff bb05 	b.w	1c2d2 <d_print_mod+0x46e>
   1ccc8:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
   1cccc:	2200      	movs	r2, #0
   1ccce:	f880 2103 	strb.w	r2, [r0, #259]	; 0x103
   1ccd2:	3004      	adds	r0, #4
   1ccd4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ccd8:	4798      	blx	r3
   1ccda:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1ccde:	2101      	movs	r1, #1
   1cce0:	2269      	movs	r2, #105	; 0x69
   1cce2:	1858      	adds	r0, r3, r1
   1cce4:	7122      	strb	r2, [r4, #4]
   1cce6:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1ccea:	f7ff bb59 	b.w	1c3a0 <d_print_mod+0x53c>
   1ccee:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
   1ccf2:	2200      	movs	r2, #0
   1ccf4:	f880 2103 	strb.w	r2, [r0, #259]	; 0x103
   1ccf8:	3004      	adds	r0, #4
   1ccfa:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ccfe:	4798      	blx	r3
   1cd00:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1cd04:	2101      	movs	r1, #1
   1cd06:	2326      	movs	r3, #38	; 0x26
   1cd08:	1850      	adds	r0, r2, r1
   1cd0a:	7123      	strb	r3, [r4, #4]
   1cd0c:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1cd10:	f7ff bac4 	b.w	1c29c <d_print_mod+0x438>
   1cd14:	2600      	movs	r6, #0
   1cd16:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1cd1a:	f880 6103 	strb.w	r6, [r0, #259]	; 0x103
   1cd1e:	3004      	adds	r0, #4
   1cd20:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1cd24:	4798      	blx	r3
   1cd26:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1cd2a:	2001      	movs	r0, #1
   1cd2c:	4631      	mov	r1, r6
   1cd2e:	181a      	adds	r2, r3, r0
   1cd30:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1cd34:	f7ff ba93 	b.w	1c25e <d_print_mod+0x3fa>
   1cd38:	2600      	movs	r6, #0
   1cd3a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1cd3e:	f880 6103 	strb.w	r6, [r0, #259]	; 0x103
   1cd42:	3004      	adds	r0, #4
   1cd44:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1cd48:	4798      	blx	r3
   1cd4a:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1cd4e:	2201      	movs	r2, #1
   1cd50:	4631      	mov	r1, r6
   1cd52:	1883      	adds	r3, r0, r2
   1cd54:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1cd58:	f7ff bb91 	b.w	1c47e <d_print_mod+0x61a>

0001cd5c <d_print_mod_list>:
   1cd5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cd60:	460e      	mov	r6, r1
   1cd62:	b08b      	sub	sp, #44	; 0x2c
   1cd64:	4604      	mov	r4, r0
   1cd66:	4617      	mov	r7, r2
   1cd68:	b339      	cbz	r1, 1cdba <d_print_mod_list+0x5e>
   1cd6a:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
   1cd6e:	bb23      	cbnz	r3, 1cdba <d_print_mod_list+0x5e>
   1cd70:	f04f 0801 	mov.w	r8, #1
   1cd74:	e002      	b.n	1cd7c <d_print_mod_list+0x20>
   1cd76:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
   1cd7a:	b9f0      	cbnz	r0, 1cdba <d_print_mod_list+0x5e>
   1cd7c:	68b1      	ldr	r1, [r6, #8]
   1cd7e:	b9c9      	cbnz	r1, 1cdb4 <d_print_mod_list+0x58>
   1cd80:	6871      	ldr	r1, [r6, #4]
   1cd82:	b927      	cbnz	r7, 1cd8e <d_print_mod_list+0x32>
   1cd84:	780b      	ldrb	r3, [r1, #0]
   1cd86:	3b1a      	subs	r3, #26
   1cd88:	b2da      	uxtb	r2, r3
   1cd8a:	2a02      	cmp	r2, #2
   1cd8c:	d912      	bls.n	1cdb4 <d_print_mod_list+0x58>
   1cd8e:	780b      	ldrb	r3, [r1, #0]
   1cd90:	68f0      	ldr	r0, [r6, #12]
   1cd92:	2b25      	cmp	r3, #37	; 0x25
   1cd94:	f8c6 8008 	str.w	r8, [r6, #8]
   1cd98:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
   1cd9c:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
   1cda0:	d00e      	beq.n	1cdc0 <d_print_mod_list+0x64>
   1cda2:	2b26      	cmp	r3, #38	; 0x26
   1cda4:	d013      	beq.n	1cdce <d_print_mod_list+0x72>
   1cda6:	2b02      	cmp	r3, #2
   1cda8:	d018      	beq.n	1cddc <d_print_mod_list+0x80>
   1cdaa:	4620      	mov	r0, r4
   1cdac:	f7ff f85a 	bl	1be64 <d_print_mod>
   1cdb0:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
   1cdb4:	6836      	ldr	r6, [r6, #0]
   1cdb6:	2e00      	cmp	r6, #0
   1cdb8:	d1dd      	bne.n	1cd76 <d_print_mod_list+0x1a>
   1cdba:	b00b      	add	sp, #44	; 0x2c
   1cdbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cdc0:	4620      	mov	r0, r4
   1cdc2:	6832      	ldr	r2, [r6, #0]
   1cdc4:	f000 fbf6 	bl	1d5b4 <d_print_function_type>
   1cdc8:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
   1cdcc:	e7f5      	b.n	1cdba <d_print_mod_list+0x5e>
   1cdce:	4620      	mov	r0, r4
   1cdd0:	6832      	ldr	r2, [r6, #0]
   1cdd2:	f000 fb01 	bl	1d3d8 <d_print_array_type>
   1cdd6:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
   1cdda:	e7ee      	b.n	1cdba <d_print_mod_list+0x5e>
   1cddc:	f8d4 9118 	ldr.w	r9, [r4, #280]	; 0x118
   1cde0:	2700      	movs	r7, #0
   1cde2:	4620      	mov	r0, r4
   1cde4:	f8c4 7118 	str.w	r7, [r4, #280]	; 0x118
   1cde8:	6849      	ldr	r1, [r1, #4]
   1cdea:	f7f9 fa01 	bl	161f0 <d_print_comp>
   1cdee:	6822      	ldr	r2, [r4, #0]
   1cdf0:	f8c4 9118 	str.w	r9, [r4, #280]	; 0x118
   1cdf4:	f012 0804 	ands.w	r8, r2, #4
   1cdf8:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1cdfc:	d118      	bne.n	1ce30 <d_print_mod_list+0xd4>
   1cdfe:	29ff      	cmp	r1, #255	; 0xff
   1ce00:	d043      	beq.n	1ce8a <d_print_mod_list+0x12e>
   1ce02:	eb04 0c01 	add.w	ip, r4, r1
   1ce06:	3101      	adds	r1, #1
   1ce08:	233a      	movs	r3, #58	; 0x3a
   1ce0a:	29ff      	cmp	r1, #255	; 0xff
   1ce0c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1ce10:	f88c 3004 	strb.w	r3, [ip, #4]
   1ce14:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1ce18:	d027      	beq.n	1ce6a <d_print_mod_list+0x10e>
   1ce1a:	1c4a      	adds	r2, r1, #1
   1ce1c:	eb04 0e01 	add.w	lr, r4, r1
   1ce20:	203a      	movs	r0, #58	; 0x3a
   1ce22:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1ce26:	f88e 0004 	strb.w	r0, [lr, #4]
   1ce2a:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1ce2e:	e009      	b.n	1ce44 <d_print_mod_list+0xe8>
   1ce30:	1c4a      	adds	r2, r1, #1
   1ce32:	29ff      	cmp	r1, #255	; 0xff
   1ce34:	d03a      	beq.n	1ceac <d_print_mod_list+0x150>
   1ce36:	1861      	adds	r1, r4, r1
   1ce38:	202e      	movs	r0, #46	; 0x2e
   1ce3a:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1ce3e:	7108      	strb	r0, [r1, #4]
   1ce40:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1ce44:	6876      	ldr	r6, [r6, #4]
   1ce46:	68b6      	ldr	r6, [r6, #8]
   1ce48:	7833      	ldrb	r3, [r6, #0]
   1ce4a:	2b3f      	cmp	r3, #63	; 0x3f
   1ce4c:	d102      	bne.n	1ce54 <d_print_mod_list+0xf8>
   1ce4e:	e03d      	b.n	1cecc <d_print_mod_list+0x170>
   1ce50:	6876      	ldr	r6, [r6, #4]
   1ce52:	7833      	ldrb	r3, [r6, #0]
   1ce54:	3b1a      	subs	r3, #26
   1ce56:	b2da      	uxtb	r2, r3
   1ce58:	2a02      	cmp	r2, #2
   1ce5a:	d9f9      	bls.n	1ce50 <d_print_mod_list+0xf4>
   1ce5c:	4620      	mov	r0, r4
   1ce5e:	4631      	mov	r1, r6
   1ce60:	f7f9 f9c6 	bl	161f0 <d_print_comp>
   1ce64:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
   1ce68:	e7a7      	b.n	1cdba <d_print_mod_list+0x5e>
   1ce6a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ce6e:	1d20      	adds	r0, r4, #4
   1ce70:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ce74:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
   1ce78:	4798      	blx	r3
   1ce7a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1ce7e:	2201      	movs	r2, #1
   1ce80:	4641      	mov	r1, r8
   1ce82:	1898      	adds	r0, r3, r2
   1ce84:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1ce88:	e7c8      	b.n	1ce1c <d_print_mod_list+0xc0>
   1ce8a:	1d20      	adds	r0, r4, #4
   1ce8c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ce90:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ce94:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
   1ce98:	4798      	blx	r3
   1ce9a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1ce9e:	2101      	movs	r1, #1
   1cea0:	223a      	movs	r2, #58	; 0x3a
   1cea2:	1858      	adds	r0, r3, r1
   1cea4:	7122      	strb	r2, [r4, #4]
   1cea6:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1ceaa:	e7b6      	b.n	1ce1a <d_print_mod_list+0xbe>
   1ceac:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1ceb0:	1d20      	adds	r0, r4, #4
   1ceb2:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1ceb6:	f884 7103 	strb.w	r7, [r4, #259]	; 0x103
   1ceba:	4798      	blx	r3
   1cebc:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1cec0:	2201      	movs	r2, #1
   1cec2:	4639      	mov	r1, r7
   1cec4:	1883      	adds	r3, r0, r2
   1cec6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1ceca:	e7b4      	b.n	1ce36 <d_print_mod_list+0xda>
   1cecc:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1ced0:	29ff      	cmp	r1, #255	; 0xff
   1ced2:	f000 826e 	beq.w	1d3b2 <d_print_mod_list+0x656>
   1ced6:	eb04 0901 	add.w	r9, r4, r1
   1ceda:	3101      	adds	r1, #1
   1cedc:	237b      	movs	r3, #123	; 0x7b
   1cede:	29ff      	cmp	r1, #255	; 0xff
   1cee0:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1cee4:	f889 3004 	strb.w	r3, [r9, #4]
   1cee8:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1ceec:	f000 824f 	beq.w	1d38e <d_print_mod_list+0x632>
   1cef0:	eb04 0a01 	add.w	sl, r4, r1
   1cef4:	3101      	adds	r1, #1
   1cef6:	2364      	movs	r3, #100	; 0x64
   1cef8:	29ff      	cmp	r1, #255	; 0xff
   1cefa:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1cefe:	f88a 3004 	strb.w	r3, [sl, #4]
   1cf02:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1cf06:	f000 8230 	beq.w	1d36a <d_print_mod_list+0x60e>
   1cf0a:	eb04 0c01 	add.w	ip, r4, r1
   1cf0e:	3101      	adds	r1, #1
   1cf10:	2365      	movs	r3, #101	; 0x65
   1cf12:	29ff      	cmp	r1, #255	; 0xff
   1cf14:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1cf18:	f88c 3004 	strb.w	r3, [ip, #4]
   1cf1c:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1cf20:	f000 8211 	beq.w	1d346 <d_print_mod_list+0x5ea>
   1cf24:	eb04 0e01 	add.w	lr, r4, r1
   1cf28:	3101      	adds	r1, #1
   1cf2a:	2366      	movs	r3, #102	; 0x66
   1cf2c:	29ff      	cmp	r1, #255	; 0xff
   1cf2e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1cf32:	f88e 3004 	strb.w	r3, [lr, #4]
   1cf36:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1cf3a:	f000 81f2 	beq.w	1d322 <d_print_mod_list+0x5c6>
   1cf3e:	eb04 0901 	add.w	r9, r4, r1
   1cf42:	3101      	adds	r1, #1
   1cf44:	2361      	movs	r3, #97	; 0x61
   1cf46:	29ff      	cmp	r1, #255	; 0xff
   1cf48:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1cf4c:	f889 3004 	strb.w	r3, [r9, #4]
   1cf50:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1cf54:	f000 81d3 	beq.w	1d2fe <d_print_mod_list+0x5a2>
   1cf58:	eb04 0a01 	add.w	sl, r4, r1
   1cf5c:	3101      	adds	r1, #1
   1cf5e:	2375      	movs	r3, #117	; 0x75
   1cf60:	29ff      	cmp	r1, #255	; 0xff
   1cf62:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1cf66:	f88a 3004 	strb.w	r3, [sl, #4]
   1cf6a:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1cf6e:	f000 81b4 	beq.w	1d2da <d_print_mod_list+0x57e>
   1cf72:	eb04 0c01 	add.w	ip, r4, r1
   1cf76:	3101      	adds	r1, #1
   1cf78:	236c      	movs	r3, #108	; 0x6c
   1cf7a:	29ff      	cmp	r1, #255	; 0xff
   1cf7c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1cf80:	f88c 3004 	strb.w	r3, [ip, #4]
   1cf84:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1cf88:	f000 8195 	beq.w	1d2b6 <d_print_mod_list+0x55a>
   1cf8c:	eb04 0e01 	add.w	lr, r4, r1
   1cf90:	3101      	adds	r1, #1
   1cf92:	2374      	movs	r3, #116	; 0x74
   1cf94:	29ff      	cmp	r1, #255	; 0xff
   1cf96:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1cf9a:	f88e 3004 	strb.w	r3, [lr, #4]
   1cf9e:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1cfa2:	f000 8176 	beq.w	1d292 <d_print_mod_list+0x536>
   1cfa6:	eb04 0901 	add.w	r9, r4, r1
   1cfaa:	3101      	adds	r1, #1
   1cfac:	2320      	movs	r3, #32
   1cfae:	29ff      	cmp	r1, #255	; 0xff
   1cfb0:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1cfb4:	f889 3004 	strb.w	r3, [r9, #4]
   1cfb8:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1cfbc:	f000 8157 	beq.w	1d26e <d_print_mod_list+0x512>
   1cfc0:	eb04 0a01 	add.w	sl, r4, r1
   1cfc4:	3101      	adds	r1, #1
   1cfc6:	2361      	movs	r3, #97	; 0x61
   1cfc8:	29ff      	cmp	r1, #255	; 0xff
   1cfca:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1cfce:	f88a 3004 	strb.w	r3, [sl, #4]
   1cfd2:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1cfd6:	f000 8138 	beq.w	1d24a <d_print_mod_list+0x4ee>
   1cfda:	eb04 0c01 	add.w	ip, r4, r1
   1cfde:	3101      	adds	r1, #1
   1cfe0:	2372      	movs	r3, #114	; 0x72
   1cfe2:	29ff      	cmp	r1, #255	; 0xff
   1cfe4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1cfe8:	f88c 3004 	strb.w	r3, [ip, #4]
   1cfec:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1cff0:	f000 8119 	beq.w	1d226 <d_print_mod_list+0x4ca>
   1cff4:	eb04 0e01 	add.w	lr, r4, r1
   1cff8:	3101      	adds	r1, #1
   1cffa:	2367      	movs	r3, #103	; 0x67
   1cffc:	29ff      	cmp	r1, #255	; 0xff
   1cffe:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d002:	f88e 3004 	strb.w	r3, [lr, #4]
   1d006:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1d00a:	d06f      	beq.n	1d0ec <d_print_mod_list+0x390>
   1d00c:	1c4a      	adds	r2, r1, #1
   1d00e:	1861      	adds	r1, r4, r1
   1d010:	2023      	movs	r0, #35	; 0x23
   1d012:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1d016:	f10d 090c 	add.w	r9, sp, #12
   1d01a:	7108      	strb	r0, [r1, #4]
   1d01c:	f64b 1180 	movw	r1, #47488	; 0xb980
   1d020:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1d024:	f2c0 0102 	movt	r1, #2
   1d028:	68b2      	ldr	r2, [r6, #8]
   1d02a:	4648      	mov	r0, r9
   1d02c:	3201      	adds	r2, #1
   1d02e:	f002 ffc1 	bl	1ffb4 <sprintf>
   1d032:	4648      	mov	r0, r9
   1d034:	f003 f9ce 	bl	203d4 <strlen>
   1d038:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1d03c:	4682      	mov	sl, r0
   1d03e:	2800      	cmp	r0, #0
   1d040:	d065      	beq.n	1d10e <d_print_mod_list+0x3b2>
   1d042:	1e43      	subs	r3, r0, #1
   1d044:	1d22      	adds	r2, r4, #4
   1d046:	29ff      	cmp	r1, #255	; 0xff
   1d048:	f003 0701 	and.w	r7, r3, #1
   1d04c:	f04f 0b00 	mov.w	fp, #0
   1d050:	e88d 0084 	stmia.w	sp, {r2, r7}
   1d054:	f899 8000 	ldrb.w	r8, [r9]
   1d058:	f000 80d5 	beq.w	1d206 <d_print_mod_list+0x4aa>
   1d05c:	460b      	mov	r3, r1
   1d05e:	3101      	adds	r1, #1
   1d060:	2701      	movs	r7, #1
   1d062:	eb04 0c03 	add.w	ip, r4, r3
   1d066:	4557      	cmp	r7, sl
   1d068:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d06c:	f88c 8004 	strb.w	r8, [ip, #4]
   1d070:	f884 8108 	strb.w	r8, [r4, #264]	; 0x108
   1d074:	d04b      	beq.n	1d10e <d_print_mod_list+0x3b2>
   1d076:	9801      	ldr	r0, [sp, #4]
   1d078:	b188      	cbz	r0, 1d09e <d_print_mod_list+0x342>
   1d07a:	29ff      	cmp	r1, #255	; 0xff
   1d07c:	f819 8007 	ldrb.w	r8, [r9, r7]
   1d080:	f000 809f 	beq.w	1d1c2 <d_print_mod_list+0x466>
   1d084:	460b      	mov	r3, r1
   1d086:	3101      	adds	r1, #1
   1d088:	3701      	adds	r7, #1
   1d08a:	eb04 0e03 	add.w	lr, r4, r3
   1d08e:	4557      	cmp	r7, sl
   1d090:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d094:	f88e 8004 	strb.w	r8, [lr, #4]
   1d098:	f884 8108 	strb.w	r8, [r4, #264]	; 0x108
   1d09c:	d037      	beq.n	1d10e <d_print_mod_list+0x3b2>
   1d09e:	29ff      	cmp	r1, #255	; 0xff
   1d0a0:	460b      	mov	r3, r1
   1d0a2:	f819 8007 	ldrb.w	r8, [r9, r7]
   1d0a6:	f101 0201 	add.w	r2, r1, #1
   1d0aa:	d068      	beq.n	1d17e <d_print_mod_list+0x422>
   1d0ac:	eb04 0c03 	add.w	ip, r4, r3
   1d0b0:	3701      	adds	r7, #1
   1d0b2:	1c51      	adds	r1, r2, #1
   1d0b4:	2aff      	cmp	r2, #255	; 0xff
   1d0b6:	f88c 8004 	strb.w	r8, [ip, #4]
   1d0ba:	4613      	mov	r3, r2
   1d0bc:	f884 8108 	strb.w	r8, [r4, #264]	; 0x108
   1d0c0:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1d0c4:	f819 8007 	ldrb.w	r8, [r9, r7]
   1d0c8:	d1de      	bne.n	1d088 <d_print_mod_list+0x32c>
   1d0ca:	4611      	mov	r1, r2
   1d0cc:	9800      	ldr	r0, [sp, #0]
   1d0ce:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d0d2:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d0d6:	f884 b103 	strb.w	fp, [r4, #259]	; 0x103
   1d0da:	4798      	blx	r3
   1d0dc:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1d0e0:	2101      	movs	r1, #1
   1d0e2:	2300      	movs	r3, #0
   1d0e4:	1842      	adds	r2, r0, r1
   1d0e6:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1d0ea:	e7cd      	b.n	1d088 <d_print_mod_list+0x32c>
   1d0ec:	2700      	movs	r7, #0
   1d0ee:	1d20      	adds	r0, r4, #4
   1d0f0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d0f4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d0f8:	f884 7103 	strb.w	r7, [r4, #259]	; 0x103
   1d0fc:	4798      	blx	r3
   1d0fe:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1d102:	2201      	movs	r2, #1
   1d104:	4639      	mov	r1, r7
   1d106:	1883      	adds	r3, r0, r2
   1d108:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1d10c:	e77f      	b.n	1d00e <d_print_mod_list+0x2b2>
   1d10e:	29ff      	cmp	r1, #255	; 0xff
   1d110:	d067      	beq.n	1d1e2 <d_print_mod_list+0x486>
   1d112:	eb04 0c01 	add.w	ip, r4, r1
   1d116:	3101      	adds	r1, #1
   1d118:	237d      	movs	r3, #125	; 0x7d
   1d11a:	29ff      	cmp	r1, #255	; 0xff
   1d11c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d120:	f88c 3004 	strb.w	r3, [ip, #4]
   1d124:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1d128:	d039      	beq.n	1d19e <d_print_mod_list+0x442>
   1d12a:	eb04 0e01 	add.w	lr, r4, r1
   1d12e:	3101      	adds	r1, #1
   1d130:	233a      	movs	r3, #58	; 0x3a
   1d132:	29ff      	cmp	r1, #255	; 0xff
   1d134:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d138:	f88e 3004 	strb.w	r3, [lr, #4]
   1d13c:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1d140:	d00c      	beq.n	1d15c <d_print_mod_list+0x400>
   1d142:	1c4a      	adds	r2, r1, #1
   1d144:	eb04 0e01 	add.w	lr, r4, r1
   1d148:	203a      	movs	r0, #58	; 0x3a
   1d14a:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1d14e:	f88e 0004 	strb.w	r0, [lr, #4]
   1d152:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1d156:	6876      	ldr	r6, [r6, #4]
   1d158:	7833      	ldrb	r3, [r6, #0]
   1d15a:	e67b      	b.n	1ce54 <d_print_mod_list+0xf8>
   1d15c:	2700      	movs	r7, #0
   1d15e:	1d20      	adds	r0, r4, #4
   1d160:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d164:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d168:	f884 7103 	strb.w	r7, [r4, #259]	; 0x103
   1d16c:	4798      	blx	r3
   1d16e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1d172:	2201      	movs	r2, #1
   1d174:	4639      	mov	r1, r7
   1d176:	1898      	adds	r0, r3, r2
   1d178:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1d17c:	e7e2      	b.n	1d144 <d_print_mod_list+0x3e8>
   1d17e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d182:	9800      	ldr	r0, [sp, #0]
   1d184:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d188:	f884 b103 	strb.w	fp, [r4, #259]	; 0x103
   1d18c:	4798      	blx	r3
   1d18e:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
   1d192:	2201      	movs	r2, #1
   1d194:	2300      	movs	r3, #0
   1d196:	1888      	adds	r0, r1, r2
   1d198:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1d19c:	e786      	b.n	1d0ac <d_print_mod_list+0x350>
   1d19e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d1a2:	2000      	movs	r0, #0
   1d1a4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d1a8:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1d1ac:	1d20      	adds	r0, r4, #4
   1d1ae:	4798      	blx	r3
   1d1b0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1d1b4:	2101      	movs	r1, #1
   1d1b6:	223a      	movs	r2, #58	; 0x3a
   1d1b8:	1858      	adds	r0, r3, r1
   1d1ba:	7122      	strb	r2, [r4, #4]
   1d1bc:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1d1c0:	e7bf      	b.n	1d142 <d_print_mod_list+0x3e6>
   1d1c2:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d1c6:	9800      	ldr	r0, [sp, #0]
   1d1c8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d1cc:	f884 b103 	strb.w	fp, [r4, #259]	; 0x103
   1d1d0:	4798      	blx	r3
   1d1d2:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1d1d6:	4639      	mov	r1, r7
   1d1d8:	2300      	movs	r3, #0
   1d1da:	19c2      	adds	r2, r0, r7
   1d1dc:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1d1e0:	e752      	b.n	1d088 <d_print_mod_list+0x32c>
   1d1e2:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d1e6:	2000      	movs	r0, #0
   1d1e8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d1ec:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1d1f0:	1d20      	adds	r0, r4, #4
   1d1f2:	4798      	blx	r3
   1d1f4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1d1f8:	2101      	movs	r1, #1
   1d1fa:	227d      	movs	r2, #125	; 0x7d
   1d1fc:	1858      	adds	r0, r3, r1
   1d1fe:	7122      	strb	r2, [r4, #4]
   1d200:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1d204:	e791      	b.n	1d12a <d_print_mod_list+0x3ce>
   1d206:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d20a:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d20e:	f884 b103 	strb.w	fp, [r4, #259]	; 0x103
   1d212:	9800      	ldr	r0, [sp, #0]
   1d214:	4798      	blx	r3
   1d216:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1d21a:	2101      	movs	r1, #1
   1d21c:	465b      	mov	r3, fp
   1d21e:	1857      	adds	r7, r2, r1
   1d220:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
   1d224:	e71c      	b.n	1d060 <d_print_mod_list+0x304>
   1d226:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d22a:	2000      	movs	r0, #0
   1d22c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d230:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1d234:	1d20      	adds	r0, r4, #4
   1d236:	4798      	blx	r3
   1d238:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1d23c:	2101      	movs	r1, #1
   1d23e:	2267      	movs	r2, #103	; 0x67
   1d240:	1858      	adds	r0, r3, r1
   1d242:	7122      	strb	r2, [r4, #4]
   1d244:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1d248:	e6e0      	b.n	1d00c <d_print_mod_list+0x2b0>
   1d24a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d24e:	2000      	movs	r0, #0
   1d250:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d254:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1d258:	1d20      	adds	r0, r4, #4
   1d25a:	4798      	blx	r3
   1d25c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1d260:	2101      	movs	r1, #1
   1d262:	2272      	movs	r2, #114	; 0x72
   1d264:	1858      	adds	r0, r3, r1
   1d266:	7122      	strb	r2, [r4, #4]
   1d268:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1d26c:	e6c2      	b.n	1cff4 <d_print_mod_list+0x298>
   1d26e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d272:	2000      	movs	r0, #0
   1d274:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d278:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1d27c:	1d20      	adds	r0, r4, #4
   1d27e:	4798      	blx	r3
   1d280:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1d284:	2101      	movs	r1, #1
   1d286:	2261      	movs	r2, #97	; 0x61
   1d288:	1858      	adds	r0, r3, r1
   1d28a:	7122      	strb	r2, [r4, #4]
   1d28c:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1d290:	e6a3      	b.n	1cfda <d_print_mod_list+0x27e>
   1d292:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d296:	2000      	movs	r0, #0
   1d298:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d29c:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1d2a0:	1d20      	adds	r0, r4, #4
   1d2a2:	4798      	blx	r3
   1d2a4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1d2a8:	2101      	movs	r1, #1
   1d2aa:	2220      	movs	r2, #32
   1d2ac:	1858      	adds	r0, r3, r1
   1d2ae:	7122      	strb	r2, [r4, #4]
   1d2b0:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1d2b4:	e684      	b.n	1cfc0 <d_print_mod_list+0x264>
   1d2b6:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d2ba:	2000      	movs	r0, #0
   1d2bc:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d2c0:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1d2c4:	1d20      	adds	r0, r4, #4
   1d2c6:	4798      	blx	r3
   1d2c8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1d2cc:	2101      	movs	r1, #1
   1d2ce:	2274      	movs	r2, #116	; 0x74
   1d2d0:	1858      	adds	r0, r3, r1
   1d2d2:	7122      	strb	r2, [r4, #4]
   1d2d4:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1d2d8:	e665      	b.n	1cfa6 <d_print_mod_list+0x24a>
   1d2da:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d2de:	2000      	movs	r0, #0
   1d2e0:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d2e4:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1d2e8:	1d20      	adds	r0, r4, #4
   1d2ea:	4798      	blx	r3
   1d2ec:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1d2f0:	2101      	movs	r1, #1
   1d2f2:	226c      	movs	r2, #108	; 0x6c
   1d2f4:	1858      	adds	r0, r3, r1
   1d2f6:	7122      	strb	r2, [r4, #4]
   1d2f8:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1d2fc:	e646      	b.n	1cf8c <d_print_mod_list+0x230>
   1d2fe:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d302:	2000      	movs	r0, #0
   1d304:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d308:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1d30c:	1d20      	adds	r0, r4, #4
   1d30e:	4798      	blx	r3
   1d310:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1d314:	2101      	movs	r1, #1
   1d316:	2275      	movs	r2, #117	; 0x75
   1d318:	1858      	adds	r0, r3, r1
   1d31a:	7122      	strb	r2, [r4, #4]
   1d31c:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1d320:	e627      	b.n	1cf72 <d_print_mod_list+0x216>
   1d322:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d326:	2000      	movs	r0, #0
   1d328:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d32c:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1d330:	1d20      	adds	r0, r4, #4
   1d332:	4798      	blx	r3
   1d334:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1d338:	2101      	movs	r1, #1
   1d33a:	2261      	movs	r2, #97	; 0x61
   1d33c:	1858      	adds	r0, r3, r1
   1d33e:	7122      	strb	r2, [r4, #4]
   1d340:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1d344:	e608      	b.n	1cf58 <d_print_mod_list+0x1fc>
   1d346:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d34a:	2000      	movs	r0, #0
   1d34c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d350:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1d354:	1d20      	adds	r0, r4, #4
   1d356:	4798      	blx	r3
   1d358:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1d35c:	2101      	movs	r1, #1
   1d35e:	2266      	movs	r2, #102	; 0x66
   1d360:	1858      	adds	r0, r3, r1
   1d362:	7122      	strb	r2, [r4, #4]
   1d364:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1d368:	e5e9      	b.n	1cf3e <d_print_mod_list+0x1e2>
   1d36a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d36e:	2000      	movs	r0, #0
   1d370:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d374:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1d378:	1d20      	adds	r0, r4, #4
   1d37a:	4798      	blx	r3
   1d37c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1d380:	2101      	movs	r1, #1
   1d382:	2265      	movs	r2, #101	; 0x65
   1d384:	1858      	adds	r0, r3, r1
   1d386:	7122      	strb	r2, [r4, #4]
   1d388:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1d38c:	e5ca      	b.n	1cf24 <d_print_mod_list+0x1c8>
   1d38e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d392:	2000      	movs	r0, #0
   1d394:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d398:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1d39c:	1d20      	adds	r0, r4, #4
   1d39e:	4798      	blx	r3
   1d3a0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1d3a4:	2101      	movs	r1, #1
   1d3a6:	2264      	movs	r2, #100	; 0x64
   1d3a8:	1858      	adds	r0, r3, r1
   1d3aa:	7122      	strb	r2, [r4, #4]
   1d3ac:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1d3b0:	e5ab      	b.n	1cf0a <d_print_mod_list+0x1ae>
   1d3b2:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d3b6:	2000      	movs	r0, #0
   1d3b8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d3bc:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1d3c0:	1d20      	adds	r0, r4, #4
   1d3c2:	4798      	blx	r3
   1d3c4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1d3c8:	2101      	movs	r1, #1
   1d3ca:	227b      	movs	r2, #123	; 0x7b
   1d3cc:	1858      	adds	r0, r3, r1
   1d3ce:	7122      	strb	r2, [r4, #4]
   1d3d0:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1d3d4:	e58c      	b.n	1cef0 <d_print_mod_list+0x194>
   1d3d6:	bf00      	nop

0001d3d8 <d_print_array_type>:
   1d3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d3da:	4615      	mov	r5, r2
   1d3dc:	4604      	mov	r4, r0
   1d3de:	460e      	mov	r6, r1
   1d3e0:	b91a      	cbnz	r2, 1d3ea <d_print_array_type+0x12>
   1d3e2:	e0a6      	b.n	1d532 <d_print_array_type+0x15a>
   1d3e4:	6812      	ldr	r2, [r2, #0]
   1d3e6:	2a00      	cmp	r2, #0
   1d3e8:	d05f      	beq.n	1d4aa <d_print_array_type+0xd2>
   1d3ea:	6893      	ldr	r3, [r2, #8]
   1d3ec:	2b00      	cmp	r3, #0
   1d3ee:	d1f9      	bne.n	1d3e4 <d_print_array_type+0xc>
   1d3f0:	6851      	ldr	r1, [r2, #4]
   1d3f2:	7808      	ldrb	r0, [r1, #0]
   1d3f4:	2826      	cmp	r0, #38	; 0x26
   1d3f6:	f000 809f 	beq.w	1d538 <d_print_array_type+0x160>
   1d3fa:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1d3fe:	29ff      	cmp	r1, #255	; 0xff
   1d400:	f000 80a2 	beq.w	1d548 <d_print_array_type+0x170>
   1d404:	1862      	adds	r2, r4, r1
   1d406:	3101      	adds	r1, #1
   1d408:	2320      	movs	r3, #32
   1d40a:	29ff      	cmp	r1, #255	; 0xff
   1d40c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d410:	7113      	strb	r3, [r2, #4]
   1d412:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1d416:	d04f      	beq.n	1d4b8 <d_print_array_type+0xe0>
   1d418:	1c4a      	adds	r2, r1, #1
   1d41a:	eb04 0c01 	add.w	ip, r4, r1
   1d41e:	2328      	movs	r3, #40	; 0x28
   1d420:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1d424:	4629      	mov	r1, r5
   1d426:	f88c 3004 	strb.w	r3, [ip, #4]
   1d42a:	2200      	movs	r2, #0
   1d42c:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1d430:	4620      	mov	r0, r4
   1d432:	f7ff fc93 	bl	1cd5c <d_print_mod_list>
   1d436:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1d43a:	1c4b      	adds	r3, r1, #1
   1d43c:	29ff      	cmp	r1, #255	; 0xff
   1d43e:	f000 80a7 	beq.w	1d590 <d_print_array_type+0x1b8>
   1d442:	eb04 0e01 	add.w	lr, r4, r1
   1d446:	2229      	movs	r2, #41	; 0x29
   1d448:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1d44c:	f88e 2004 	strb.w	r2, [lr, #4]
   1d450:	f884 2108 	strb.w	r2, [r4, #264]	; 0x108
   1d454:	1c59      	adds	r1, r3, #1
   1d456:	2bff      	cmp	r3, #255	; 0xff
   1d458:	f000 8088 	beq.w	1d56c <d_print_array_type+0x194>
   1d45c:	eb04 0c03 	add.w	ip, r4, r3
   1d460:	2020      	movs	r0, #32
   1d462:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d466:	f88c 0004 	strb.w	r0, [ip, #4]
   1d46a:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1d46e:	1c4b      	adds	r3, r1, #1
   1d470:	29ff      	cmp	r1, #255	; 0xff
   1d472:	d04d      	beq.n	1d510 <d_print_array_type+0x138>
   1d474:	1861      	adds	r1, r4, r1
   1d476:	225b      	movs	r2, #91	; 0x5b
   1d478:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1d47c:	710a      	strb	r2, [r1, #4]
   1d47e:	f884 2108 	strb.w	r2, [r4, #264]	; 0x108
   1d482:	6871      	ldr	r1, [r6, #4]
   1d484:	b121      	cbz	r1, 1d490 <d_print_array_type+0xb8>
   1d486:	4620      	mov	r0, r4
   1d488:	f7f8 feb2 	bl	161f0 <d_print_comp>
   1d48c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1d490:	1c59      	adds	r1, r3, #1
   1d492:	2bff      	cmp	r3, #255	; 0xff
   1d494:	d021      	beq.n	1d4da <d_print_array_type+0x102>
   1d496:	eb04 0c03 	add.w	ip, r4, r3
   1d49a:	205d      	movs	r0, #93	; 0x5d
   1d49c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d4a0:	f88c 0004 	strb.w	r0, [ip, #4]
   1d4a4:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1d4a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d4aa:	4620      	mov	r0, r4
   1d4ac:	4629      	mov	r1, r5
   1d4ae:	f7ff fc55 	bl	1cd5c <d_print_mod_list>
   1d4b2:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1d4b6:	e7cd      	b.n	1d454 <d_print_array_type+0x7c>
   1d4b8:	2700      	movs	r7, #0
   1d4ba:	1d20      	adds	r0, r4, #4
   1d4bc:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d4c0:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d4c4:	f884 7103 	strb.w	r7, [r4, #259]	; 0x103
   1d4c8:	4798      	blx	r3
   1d4ca:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1d4ce:	2201      	movs	r2, #1
   1d4d0:	4639      	mov	r1, r7
   1d4d2:	1883      	adds	r3, r0, r2
   1d4d4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1d4d8:	e79f      	b.n	1d41a <d_print_array_type+0x42>
   1d4da:	4619      	mov	r1, r3
   1d4dc:	2500      	movs	r5, #0
   1d4de:	1d20      	adds	r0, r4, #4
   1d4e0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d4e4:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d4e8:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   1d4ec:	4798      	blx	r3
   1d4ee:	462b      	mov	r3, r5
   1d4f0:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1d4f4:	eb04 0c03 	add.w	ip, r4, r3
   1d4f8:	2101      	movs	r1, #1
   1d4fa:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d4fe:	1850      	adds	r0, r2, r1
   1d500:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1d504:	205d      	movs	r0, #93	; 0x5d
   1d506:	f88c 0004 	strb.w	r0, [ip, #4]
   1d50a:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1d50e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d510:	2500      	movs	r5, #0
   1d512:	1d20      	adds	r0, r4, #4
   1d514:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d518:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d51c:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   1d520:	4798      	blx	r3
   1d522:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1d526:	2301      	movs	r3, #1
   1d528:	4629      	mov	r1, r5
   1d52a:	18c2      	adds	r2, r0, r3
   1d52c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1d530:	e7a0      	b.n	1d474 <d_print_array_type+0x9c>
   1d532:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
   1d536:	e78d      	b.n	1d454 <d_print_array_type+0x7c>
   1d538:	4629      	mov	r1, r5
   1d53a:	4620      	mov	r0, r4
   1d53c:	2200      	movs	r2, #0
   1d53e:	f7ff fc0d 	bl	1cd5c <d_print_mod_list>
   1d542:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1d546:	e792      	b.n	1d46e <d_print_array_type+0x96>
   1d548:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d54c:	2000      	movs	r0, #0
   1d54e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d552:	f884 0103 	strb.w	r0, [r4, #259]	; 0x103
   1d556:	1d20      	adds	r0, r4, #4
   1d558:	4798      	blx	r3
   1d55a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1d55e:	2101      	movs	r1, #1
   1d560:	2320      	movs	r3, #32
   1d562:	1850      	adds	r0, r2, r1
   1d564:	7123      	strb	r3, [r4, #4]
   1d566:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1d56a:	e755      	b.n	1d418 <d_print_array_type+0x40>
   1d56c:	4619      	mov	r1, r3
   1d56e:	2500      	movs	r5, #0
   1d570:	1d20      	adds	r0, r4, #4
   1d572:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d576:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d57a:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   1d57e:	4798      	blx	r3
   1d580:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1d584:	2101      	movs	r1, #1
   1d586:	462b      	mov	r3, r5
   1d588:	1850      	adds	r0, r2, r1
   1d58a:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1d58e:	e765      	b.n	1d45c <d_print_array_type+0x84>
   1d590:	2500      	movs	r5, #0
   1d592:	1d20      	adds	r0, r4, #4
   1d594:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d598:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d59c:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   1d5a0:	4798      	blx	r3
   1d5a2:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1d5a6:	2301      	movs	r3, #1
   1d5a8:	4629      	mov	r1, r5
   1d5aa:	18c2      	adds	r2, r0, r3
   1d5ac:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1d5b0:	e747      	b.n	1d442 <d_print_array_type+0x6a>
   1d5b2:	bf00      	nop

0001d5b4 <d_print_function_type>:
   1d5b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d5b8:	4615      	mov	r5, r2
   1d5ba:	4604      	mov	r4, r0
   1d5bc:	460e      	mov	r6, r1
   1d5be:	2a00      	cmp	r2, #0
   1d5c0:	d05f      	beq.n	1d682 <d_print_function_type+0xce>
   1d5c2:	6893      	ldr	r3, [r2, #8]
   1d5c4:	2b00      	cmp	r3, #0
   1d5c6:	d15c      	bne.n	1d682 <d_print_function_type+0xce>
   1d5c8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1d5cc:	4613      	mov	r3, r2
   1d5ce:	f2ce 2030 	movt	r0, #57904	; 0xe230
   1d5d2:	f04f 77e0 	mov.w	r7, #29360128	; 0x1c00000
   1d5d6:	6859      	ldr	r1, [r3, #4]
   1d5d8:	780a      	ldrb	r2, [r1, #0]
   1d5da:	3a17      	subs	r2, #23
   1d5dc:	b2d1      	uxtb	r1, r2
   1d5de:	b252      	sxtb	r2, r2
   1d5e0:	2910      	cmp	r1, #16
   1d5e2:	d849      	bhi.n	1d678 <d_print_function_type+0xc4>
   1d5e4:	fa10 f102 	lsls.w	r1, r0, r2
   1d5e8:	d47c      	bmi.n	1d6e4 <d_print_function_type+0x130>
   1d5ea:	fa17 f202 	lsls.w	r2, r7, r2
   1d5ee:	d543      	bpl.n	1d678 <d_print_function_type+0xc4>
   1d5f0:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
   1d5f4:	2b28      	cmp	r3, #40	; 0x28
   1d5f6:	d001      	beq.n	1d5fc <d_print_function_type+0x48>
   1d5f8:	2b2a      	cmp	r3, #42	; 0x2a
   1d5fa:	d175      	bne.n	1d6e8 <d_print_function_type+0x134>
   1d5fc:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1d600:	1c4a      	adds	r2, r1, #1
   1d602:	29ff      	cmp	r1, #255	; 0xff
   1d604:	f000 8084 	beq.w	1d710 <d_print_function_type+0x15c>
   1d608:	eb04 0c01 	add.w	ip, r4, r1
   1d60c:	f04f 0800 	mov.w	r8, #0
   1d610:	2328      	movs	r3, #40	; 0x28
   1d612:	f8d4 7118 	ldr.w	r7, [r4, #280]	; 0x118
   1d616:	f88c 3004 	strb.w	r3, [ip, #4]
   1d61a:	4629      	mov	r1, r5
   1d61c:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1d620:	4620      	mov	r0, r4
   1d622:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1d626:	4642      	mov	r2, r8
   1d628:	f8c4 8118 	str.w	r8, [r4, #280]	; 0x118
   1d62c:	f7ff fb96 	bl	1cd5c <d_print_mod_list>
   1d630:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1d634:	1c59      	adds	r1, r3, #1
   1d636:	2bff      	cmp	r3, #255	; 0xff
   1d638:	f000 808d 	beq.w	1d756 <d_print_function_type+0x1a2>
   1d63c:	eb04 0e03 	add.w	lr, r4, r3
   1d640:	2229      	movs	r2, #41	; 0x29
   1d642:	f884 2108 	strb.w	r2, [r4, #264]	; 0x108
   1d646:	f88e 2004 	strb.w	r2, [lr, #4]
   1d64a:	1c4a      	adds	r2, r1, #1
   1d64c:	29ff      	cmp	r1, #255	; 0xff
   1d64e:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d652:	d124      	bne.n	1d69e <d_print_function_type+0xea>
   1d654:	f04f 0800 	mov.w	r8, #0
   1d658:	1d20      	adds	r0, r4, #4
   1d65a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d65e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d662:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
   1d666:	4798      	blx	r3
   1d668:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1d66c:	2201      	movs	r2, #1
   1d66e:	4641      	mov	r1, r8
   1d670:	1898      	adds	r0, r3, r2
   1d672:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1d676:	e012      	b.n	1d69e <d_print_function_type+0xea>
   1d678:	681b      	ldr	r3, [r3, #0]
   1d67a:	b113      	cbz	r3, 1d682 <d_print_function_type+0xce>
   1d67c:	689a      	ldr	r2, [r3, #8]
   1d67e:	2a00      	cmp	r2, #0
   1d680:	d0a9      	beq.n	1d5d6 <d_print_function_type+0x22>
   1d682:	2200      	movs	r2, #0
   1d684:	f8d4 7118 	ldr.w	r7, [r4, #280]	; 0x118
   1d688:	4629      	mov	r1, r5
   1d68a:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
   1d68e:	4620      	mov	r0, r4
   1d690:	f7ff fb64 	bl	1cd5c <d_print_mod_list>
   1d694:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1d698:	1c4a      	adds	r2, r1, #1
   1d69a:	29ff      	cmp	r1, #255	; 0xff
   1d69c:	d0da      	beq.n	1d654 <d_print_function_type+0xa0>
   1d69e:	1861      	adds	r1, r4, r1
   1d6a0:	2028      	movs	r0, #40	; 0x28
   1d6a2:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1d6a6:	7108      	strb	r0, [r1, #4]
   1d6a8:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1d6ac:	68b1      	ldr	r1, [r6, #8]
   1d6ae:	b121      	cbz	r1, 1d6ba <d_print_function_type+0x106>
   1d6b0:	4620      	mov	r0, r4
   1d6b2:	f7f8 fd9d 	bl	161f0 <d_print_comp>
   1d6b6:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
   1d6ba:	1c51      	adds	r1, r2, #1
   1d6bc:	2aff      	cmp	r2, #255	; 0xff
   1d6be:	d038      	beq.n	1d732 <d_print_function_type+0x17e>
   1d6c0:	eb04 0c02 	add.w	ip, r4, r2
   1d6c4:	2329      	movs	r3, #41	; 0x29
   1d6c6:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d6ca:	4620      	mov	r0, r4
   1d6cc:	f88c 3004 	strb.w	r3, [ip, #4]
   1d6d0:	4629      	mov	r1, r5
   1d6d2:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1d6d6:	2201      	movs	r2, #1
   1d6d8:	f7ff fb40 	bl	1cd5c <d_print_mod_list>
   1d6dc:	f8c4 7118 	str.w	r7, [r4, #280]	; 0x118
   1d6e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d6e4:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
   1d6e8:	2b20      	cmp	r3, #32
   1d6ea:	d087      	beq.n	1d5fc <d_print_function_type+0x48>
   1d6ec:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1d6f0:	1c59      	adds	r1, r3, #1
   1d6f2:	2bff      	cmp	r3, #255	; 0xff
   1d6f4:	d040      	beq.n	1d778 <d_print_function_type+0x1c4>
   1d6f6:	2020      	movs	r0, #32
   1d6f8:	eb04 0803 	add.w	r8, r4, r3
   1d6fc:	1c4a      	adds	r2, r1, #1
   1d6fe:	29ff      	cmp	r1, #255	; 0xff
   1d700:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d704:	f888 0004 	strb.w	r0, [r8, #4]
   1d708:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1d70c:	f47f af7c 	bne.w	1d608 <d_print_function_type+0x54>
   1d710:	2700      	movs	r7, #0
   1d712:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d716:	f884 7103 	strb.w	r7, [r4, #259]	; 0x103
   1d71a:	1d20      	adds	r0, r4, #4
   1d71c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d720:	4798      	blx	r3
   1d722:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1d726:	2201      	movs	r2, #1
   1d728:	4639      	mov	r1, r7
   1d72a:	189f      	adds	r7, r3, r2
   1d72c:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
   1d730:	e76a      	b.n	1d608 <d_print_function_type+0x54>
   1d732:	4611      	mov	r1, r2
   1d734:	2600      	movs	r6, #0
   1d736:	1d20      	adds	r0, r4, #4
   1d738:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d73c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d740:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   1d744:	4798      	blx	r3
   1d746:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1d74a:	2101      	movs	r1, #1
   1d74c:	4632      	mov	r2, r6
   1d74e:	1843      	adds	r3, r0, r1
   1d750:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1d754:	e7b4      	b.n	1d6c0 <d_print_function_type+0x10c>
   1d756:	4619      	mov	r1, r3
   1d758:	1d20      	adds	r0, r4, #4
   1d75a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d75e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d762:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
   1d766:	4798      	blx	r3
   1d768:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1d76c:	2101      	movs	r1, #1
   1d76e:	4643      	mov	r3, r8
   1d770:	1842      	adds	r2, r0, r1
   1d772:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1d776:	e761      	b.n	1d63c <d_print_function_type+0x88>
   1d778:	4619      	mov	r1, r3
   1d77a:	2700      	movs	r7, #0
   1d77c:	1d20      	adds	r0, r4, #4
   1d77e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d782:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d786:	f884 7103 	strb.w	r7, [r4, #259]	; 0x103
   1d78a:	4798      	blx	r3
   1d78c:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1d790:	2101      	movs	r1, #1
   1d792:	463b      	mov	r3, r7
   1d794:	1850      	adds	r0, r2, r1
   1d796:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1d79a:	e7ac      	b.n	1d6f6 <d_print_function_type+0x142>

0001d79c <d_print_cast.part.7>:
   1d79c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d79e:	b083      	sub	sp, #12
   1d7a0:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
   1d7a4:	ab02      	add	r3, sp, #8
   1d7a6:	2600      	movs	r6, #0
   1d7a8:	f8d0 7118 	ldr.w	r7, [r0, #280]	; 0x118
   1d7ac:	460d      	mov	r5, r1
   1d7ae:	f8c0 6118 	str.w	r6, [r0, #280]	; 0x118
   1d7b2:	f843 2d08 	str.w	r2, [r3, #-8]!
   1d7b6:	4604      	mov	r4, r0
   1d7b8:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   1d7bc:	6849      	ldr	r1, [r1, #4]
   1d7be:	9101      	str	r1, [sp, #4]
   1d7c0:	6849      	ldr	r1, [r1, #4]
   1d7c2:	f7f8 fd15 	bl	161f0 <d_print_comp>
   1d7c6:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
   1d7ca:	9a00      	ldr	r2, [sp, #0]
   1d7cc:	2b3c      	cmp	r3, #60	; 0x3c
   1d7ce:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
   1d7d2:	bf18      	it	ne
   1d7d4:	f8d4 1104 	ldrne.w	r1, [r4, #260]	; 0x104
   1d7d8:	d056      	beq.n	1d888 <d_print_cast.part.7+0xec>
   1d7da:	1c4b      	adds	r3, r1, #1
   1d7dc:	29ff      	cmp	r1, #255	; 0xff
   1d7de:	d022      	beq.n	1d826 <d_print_cast.part.7+0x8a>
   1d7e0:	eb04 0e01 	add.w	lr, r4, r1
   1d7e4:	203c      	movs	r0, #60	; 0x3c
   1d7e6:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1d7ea:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1d7ee:	f88e 0004 	strb.w	r0, [lr, #4]
   1d7f2:	4620      	mov	r0, r4
   1d7f4:	686a      	ldr	r2, [r5, #4]
   1d7f6:	6891      	ldr	r1, [r2, #8]
   1d7f8:	f7f8 fcfa 	bl	161f0 <d_print_comp>
   1d7fc:	f894 1108 	ldrb.w	r1, [r4, #264]	; 0x108
   1d800:	293e      	cmp	r1, #62	; 0x3e
   1d802:	bf18      	it	ne
   1d804:	f8d4 1104 	ldrne.w	r1, [r4, #260]	; 0x104
   1d808:	d02f      	beq.n	1d86a <d_print_cast.part.7+0xce>
   1d80a:	1c4a      	adds	r2, r1, #1
   1d80c:	29ff      	cmp	r1, #255	; 0xff
   1d80e:	d01b      	beq.n	1d848 <d_print_cast.part.7+0xac>
   1d810:	1861      	adds	r1, r4, r1
   1d812:	203e      	movs	r0, #62	; 0x3e
   1d814:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1d818:	7108      	strb	r0, [r1, #4]
   1d81a:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1d81e:	f8c4 7118 	str.w	r7, [r4, #280]	; 0x118
   1d822:	b003      	add	sp, #12
   1d824:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d826:	2600      	movs	r6, #0
   1d828:	1d20      	adds	r0, r4, #4
   1d82a:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d82e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d832:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   1d836:	4798      	blx	r3
   1d838:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1d83c:	2301      	movs	r3, #1
   1d83e:	4631      	mov	r1, r6
   1d840:	18c2      	adds	r2, r0, r3
   1d842:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1d846:	e7cb      	b.n	1d7e0 <d_print_cast.part.7+0x44>
   1d848:	2500      	movs	r5, #0
   1d84a:	1d20      	adds	r0, r4, #4
   1d84c:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d850:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d854:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   1d858:	4798      	blx	r3
   1d85a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1d85e:	2201      	movs	r2, #1
   1d860:	4629      	mov	r1, r5
   1d862:	1898      	adds	r0, r3, r2
   1d864:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1d868:	e7d2      	b.n	1d810 <d_print_cast.part.7+0x74>
   1d86a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1d86e:	1c59      	adds	r1, r3, #1
   1d870:	2bff      	cmp	r3, #255	; 0xff
   1d872:	d018      	beq.n	1d8a6 <d_print_cast.part.7+0x10a>
   1d874:	eb04 0c03 	add.w	ip, r4, r3
   1d878:	2220      	movs	r2, #32
   1d87a:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d87e:	f88c 2004 	strb.w	r2, [ip, #4]
   1d882:	f884 2108 	strb.w	r2, [r4, #264]	; 0x108
   1d886:	e7c0      	b.n	1d80a <d_print_cast.part.7+0x6e>
   1d888:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1d88c:	1c59      	adds	r1, r3, #1
   1d88e:	2bff      	cmp	r3, #255	; 0xff
   1d890:	d01b      	beq.n	1d8ca <d_print_cast.part.7+0x12e>
   1d892:	eb04 0c03 	add.w	ip, r4, r3
   1d896:	2020      	movs	r0, #32
   1d898:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d89c:	f88c 0004 	strb.w	r0, [ip, #4]
   1d8a0:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1d8a4:	e799      	b.n	1d7da <d_print_cast.part.7+0x3e>
   1d8a6:	4619      	mov	r1, r3
   1d8a8:	2500      	movs	r5, #0
   1d8aa:	1d20      	adds	r0, r4, #4
   1d8ac:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d8b0:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d8b4:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   1d8b8:	4798      	blx	r3
   1d8ba:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1d8be:	2101      	movs	r1, #1
   1d8c0:	462b      	mov	r3, r5
   1d8c2:	1842      	adds	r2, r0, r1
   1d8c4:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1d8c8:	e7d4      	b.n	1d874 <d_print_cast.part.7+0xd8>
   1d8ca:	4619      	mov	r1, r3
   1d8cc:	1d20      	adds	r0, r4, #4
   1d8ce:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d8d2:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d8d6:	f884 6103 	strb.w	r6, [r4, #259]	; 0x103
   1d8da:	4798      	blx	r3
   1d8dc:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1d8e0:	2101      	movs	r1, #1
   1d8e2:	4633      	mov	r3, r6
   1d8e4:	1850      	adds	r0, r2, r1
   1d8e6:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1d8ea:	e7d2      	b.n	1d892 <d_print_cast.part.7+0xf6>

0001d8ec <d_print_expr_op>:
   1d8ec:	780a      	ldrb	r2, [r1, #0]
   1d8ee:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d8f2:	2a2c      	cmp	r2, #44	; 0x2c
   1d8f4:	4604      	mov	r4, r0
   1d8f6:	d003      	beq.n	1d900 <d_print_expr_op+0x14>
   1d8f8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d8fc:	f7f8 bc78 	b.w	161f0 <d_print_comp>
   1d900:	684b      	ldr	r3, [r1, #4]
   1d902:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1d906:	685f      	ldr	r7, [r3, #4]
   1d908:	f1b8 0f00 	cmp.w	r8, #0
   1d90c:	d05a      	beq.n	1d9c4 <d_print_expr_op+0xd8>
   1d90e:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
   1d912:	f108 35ff 	add.w	r5, r8, #4294967295
   1d916:	f04f 0900 	mov.w	r9, #0
   1d91a:	f100 0a04 	add.w	sl, r0, #4
   1d91e:	29ff      	cmp	r1, #255	; 0xff
   1d920:	f005 0b01 	and.w	fp, r5, #1
   1d924:	783e      	ldrb	r6, [r7, #0]
   1d926:	d062      	beq.n	1d9ee <d_print_expr_op+0x102>
   1d928:	460b      	mov	r3, r1
   1d92a:	3101      	adds	r1, #1
   1d92c:	2501      	movs	r5, #1
   1d92e:	18e0      	adds	r0, r4, r3
   1d930:	45a8      	cmp	r8, r5
   1d932:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d936:	7106      	strb	r6, [r0, #4]
   1d938:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   1d93c:	d042      	beq.n	1d9c4 <d_print_expr_op+0xd8>
   1d93e:	f1bb 0f00 	cmp.w	fp, #0
   1d942:	d029      	beq.n	1d998 <d_print_expr_op+0xac>
   1d944:	29ff      	cmp	r1, #255	; 0xff
   1d946:	5d7e      	ldrb	r6, [r7, r5]
   1d948:	d061      	beq.n	1da0e <d_print_expr_op+0x122>
   1d94a:	460b      	mov	r3, r1
   1d94c:	3101      	adds	r1, #1
   1d94e:	3501      	adds	r5, #1
   1d950:	eb04 0c03 	add.w	ip, r4, r3
   1d954:	45a8      	cmp	r8, r5
   1d956:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d95a:	f88c 6004 	strb.w	r6, [ip, #4]
   1d95e:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   1d962:	d119      	bne.n	1d998 <d_print_expr_op+0xac>
   1d964:	e063      	b.n	1da2e <d_print_expr_op+0x142>
   1d966:	eb04 0c03 	add.w	ip, r4, r3
   1d96a:	3501      	adds	r5, #1
   1d96c:	1c51      	adds	r1, r2, #1
   1d96e:	2aff      	cmp	r2, #255	; 0xff
   1d970:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1d974:	4613      	mov	r3, r2
   1d976:	f88c 6004 	strb.w	r6, [ip, #4]
   1d97a:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   1d97e:	5d7e      	ldrb	r6, [r7, r5]
   1d980:	d022      	beq.n	1d9c8 <d_print_expr_op+0xdc>
   1d982:	3501      	adds	r5, #1
   1d984:	eb04 0c03 	add.w	ip, r4, r3
   1d988:	45a8      	cmp	r8, r5
   1d98a:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
   1d98e:	f88c 6004 	strb.w	r6, [ip, #4]
   1d992:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
   1d996:	d028      	beq.n	1d9ea <d_print_expr_op+0xfe>
   1d998:	29ff      	cmp	r1, #255	; 0xff
   1d99a:	460b      	mov	r3, r1
   1d99c:	5d7e      	ldrb	r6, [r7, r5]
   1d99e:	f101 0201 	add.w	r2, r1, #1
   1d9a2:	d1e0      	bne.n	1d966 <d_print_expr_op+0x7a>
   1d9a4:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d9a8:	4650      	mov	r0, sl
   1d9aa:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d9ae:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   1d9b2:	4798      	blx	r3
   1d9b4:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1d9b8:	2201      	movs	r2, #1
   1d9ba:	2300      	movs	r3, #0
   1d9bc:	1881      	adds	r1, r0, r2
   1d9be:	f8c4 1124 	str.w	r1, [r4, #292]	; 0x124
   1d9c2:	e7d0      	b.n	1d966 <d_print_expr_op+0x7a>
   1d9c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d9c8:	4611      	mov	r1, r2
   1d9ca:	4650      	mov	r0, sl
   1d9cc:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d9d0:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d9d4:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   1d9d8:	4798      	blx	r3
   1d9da:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1d9de:	2101      	movs	r1, #1
   1d9e0:	2300      	movs	r3, #0
   1d9e2:	1842      	adds	r2, r0, r1
   1d9e4:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1d9e8:	e7cb      	b.n	1d982 <d_print_expr_op+0x96>
   1d9ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d9ee:	f880 9103 	strb.w	r9, [r0, #259]	; 0x103
   1d9f2:	4650      	mov	r0, sl
   1d9f4:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1d9f8:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1d9fc:	4798      	blx	r3
   1d9fe:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
   1da02:	2101      	movs	r1, #1
   1da04:	464b      	mov	r3, r9
   1da06:	186a      	adds	r2, r5, r1
   1da08:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1da0c:	e78e      	b.n	1d92c <d_print_expr_op+0x40>
   1da0e:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1da12:	4650      	mov	r0, sl
   1da14:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1da18:	f884 9103 	strb.w	r9, [r4, #259]	; 0x103
   1da1c:	4798      	blx	r3
   1da1e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
   1da22:	4629      	mov	r1, r5
   1da24:	2300      	movs	r3, #0
   1da26:	1942      	adds	r2, r0, r5
   1da28:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1da2c:	e78f      	b.n	1d94e <d_print_expr_op+0x62>
   1da2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1da32:	bf00      	nop

0001da34 <d_print_subexpr>:
   1da34:	780b      	ldrb	r3, [r1, #0]
   1da36:	b570      	push	{r4, r5, r6, lr}
   1da38:	f1d3 0201 	rsbs	r2, r3, #1
   1da3c:	bf38      	it	cc
   1da3e:	2200      	movcc	r2, #0
   1da40:	460d      	mov	r5, r1
   1da42:	2b06      	cmp	r3, #6
   1da44:	bf14      	ite	ne
   1da46:	4613      	movne	r3, r2
   1da48:	f042 0301 	orreq.w	r3, r2, #1
   1da4c:	4604      	mov	r4, r0
   1da4e:	461e      	mov	r6, r3
   1da50:	b9f3      	cbnz	r3, 1da90 <d_print_subexpr+0x5c>
   1da52:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
   1da56:	1c4a      	adds	r2, r1, #1
   1da58:	29ff      	cmp	r1, #255	; 0xff
   1da5a:	d01d      	beq.n	1da98 <d_print_subexpr+0x64>
   1da5c:	1861      	adds	r1, r4, r1
   1da5e:	2328      	movs	r3, #40	; 0x28
   1da60:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1da64:	4620      	mov	r0, r4
   1da66:	710b      	strb	r3, [r1, #4]
   1da68:	4629      	mov	r1, r5
   1da6a:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
   1da6e:	f7f8 fbbf 	bl	161f0 <d_print_comp>
   1da72:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
   1da76:	1c4a      	adds	r2, r1, #1
   1da78:	29ff      	cmp	r1, #255	; 0xff
   1da7a:	d01d      	beq.n	1dab8 <d_print_subexpr+0x84>
   1da7c:	eb04 0c01 	add.w	ip, r4, r1
   1da80:	2029      	movs	r0, #41	; 0x29
   1da82:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   1da86:	f88c 0004 	strb.w	r0, [ip, #4]
   1da8a:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
   1da8e:	bd70      	pop	{r4, r5, r6, pc}
   1da90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1da94:	f7f8 bbac 	b.w	161f0 <d_print_comp>
   1da98:	f880 3103 	strb.w	r3, [r0, #259]	; 0x103
   1da9c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1daa0:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
   1daa4:	3004      	adds	r0, #4
   1daa6:	4798      	blx	r3
   1daa8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1daac:	2201      	movs	r2, #1
   1daae:	4631      	mov	r1, r6
   1dab0:	1898      	adds	r0, r3, r2
   1dab2:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1dab6:	e7d1      	b.n	1da5c <d_print_subexpr+0x28>
   1dab8:	2500      	movs	r5, #0
   1daba:	1d20      	adds	r0, r4, #4
   1dabc:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   1dac0:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   1dac4:	f884 5103 	strb.w	r5, [r4, #259]	; 0x103
   1dac8:	4798      	blx	r3
   1daca:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1dace:	2201      	movs	r2, #1
   1dad0:	4629      	mov	r1, r5
   1dad2:	1898      	adds	r0, r3, r2
   1dad4:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1dad8:	e7d0      	b.n	1da7c <d_print_subexpr+0x48>
   1dada:	bf00      	nop

0001dadc <d_demangle_callback.constprop.11>:
   1dadc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1dae0:	b0d8      	sub	sp, #352	; 0x160
   1dae2:	4680      	mov	r8, r0
   1dae4:	af00      	add	r7, sp, #0
   1dae6:	460d      	mov	r5, r1
   1dae8:	7803      	ldrb	r3, [r0, #0]
   1daea:	4614      	mov	r4, r2
   1daec:	2b5f      	cmp	r3, #95	; 0x5f
   1daee:	f000 80a0 	beq.w	1dc32 <d_demangle_callback.constprop.11+0x156>
   1daf2:	f64b 0174 	movw	r1, #47220	; 0xb874
   1daf6:	4640      	mov	r0, r8
   1daf8:	f2c0 0102 	movt	r1, #2
   1dafc:	2208      	movs	r2, #8
   1dafe:	f002 fc99 	bl	20434 <strncmp>
   1db02:	bb38      	cbnz	r0, 1db54 <d_demangle_callback.constprop.11+0x78>
   1db04:	f898 3008 	ldrb.w	r3, [r8, #8]
   1db08:	f1a3 012e 	sub.w	r1, r3, #46	; 0x2e
   1db0c:	424a      	negs	r2, r1
   1db0e:	eb42 0201 	adc.w	r2, r2, r1
   1db12:	2b5f      	cmp	r3, #95	; 0x5f
   1db14:	bf08      	it	eq
   1db16:	f042 0201 	orreq.w	r2, r2, #1
   1db1a:	b91a      	cbnz	r2, 1db24 <d_demangle_callback.constprop.11+0x48>
   1db1c:	2b24      	cmp	r3, #36	; 0x24
   1db1e:	bf18      	it	ne
   1db20:	4691      	movne	r9, r2
   1db22:	d119      	bne.n	1db58 <d_demangle_callback.constprop.11+0x7c>
   1db24:	f898 3009 	ldrb.w	r3, [r8, #9]
   1db28:	f1a3 0249 	sub.w	r2, r3, #73	; 0x49
   1db2c:	4250      	negs	r0, r2
   1db2e:	eb40 0202 	adc.w	r2, r0, r2
   1db32:	2b44      	cmp	r3, #68	; 0x44
   1db34:	bf14      	ite	ne
   1db36:	4616      	movne	r6, r2
   1db38:	f042 0601 	orreq.w	r6, r2, #1
   1db3c:	46b1      	mov	r9, r6
   1db3e:	b15e      	cbz	r6, 1db58 <d_demangle_callback.constprop.11+0x7c>
   1db40:	f898 100a 	ldrb.w	r1, [r8, #10]
   1db44:	2a00      	cmp	r2, #0
   1db46:	bf0c      	ite	eq
   1db48:	f04f 0903 	moveq.w	r9, #3
   1db4c:	f04f 0902 	movne.w	r9, #2
   1db50:	295f      	cmp	r1, #95	; 0x5f
   1db52:	d001      	beq.n	1db58 <d_demangle_callback.constprop.11+0x7c>
   1db54:	f04f 0900 	mov.w	r9, #0
   1db58:	4640      	mov	r0, r8
   1db5a:	f002 fc3b 	bl	203d4 <strlen>
   1db5e:	2100      	movs	r1, #0
   1db60:	f8c7 812c 	str.w	r8, [r7, #300]	; 0x12c
   1db64:	f8c7 8138 	str.w	r8, [r7, #312]	; 0x138
   1db68:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   1db6c:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
   1db70:	f8c7 1154 	str.w	r1, [r7, #340]	; 0x154
   1db74:	f8c7 1158 	str.w	r1, [r7, #344]	; 0x158
   1db78:	f8c7 115c 	str.w	r1, [r7, #348]	; 0x15c
   1db7c:	0043      	lsls	r3, r0, #1
   1db7e:	0082      	lsls	r2, r0, #2
   1db80:	18d6      	adds	r6, r2, r3
   1db82:	320e      	adds	r2, #14
   1db84:	f022 0c07 	bic.w	ip, r2, #7
   1db88:	2211      	movs	r2, #17
   1db8a:	00b6      	lsls	r6, r6, #2
   1db8c:	eb08 0e00 	add.w	lr, r8, r0
   1db90:	3608      	adds	r6, #8
   1db92:	f1b9 0f01 	cmp.w	r9, #1
   1db96:	ebad 0d06 	sub.w	sp, sp, r6
   1db9a:	f8c7 e130 	str.w	lr, [r7, #304]	; 0x130
   1db9e:	466e      	mov	r6, sp
   1dba0:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
   1dba4:	ebad 0d0c 	sub.w	sp, sp, ip
   1dba8:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   1dbac:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
   1dbb0:	f8c7 613c 	str.w	r6, [r7, #316]	; 0x13c
   1dbb4:	f8c7 d148 	str.w	sp, [r7, #328]	; 0x148
   1dbb8:	d043      	beq.n	1dc42 <d_demangle_callback.constprop.11+0x166>
   1dbba:	d24b      	bcs.n	1dc54 <d_demangle_callback.constprop.11+0x178>
   1dbbc:	f507 7096 	add.w	r0, r7, #300	; 0x12c
   1dbc0:	f7f6 fe32 	bl	14828 <d_type>
   1dbc4:	4680      	mov	r8, r0
   1dbc6:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
   1dbca:	7806      	ldrb	r6, [r0, #0]
   1dbcc:	2000      	movs	r0, #0
   1dbce:	bb5e      	cbnz	r6, 1dc28 <d_demangle_callback.constprop.11+0x14c>
   1dbd0:	4640      	mov	r0, r8
   1dbd2:	f1b8 0f00 	cmp.w	r8, #0
   1dbd6:	d027      	beq.n	1dc28 <d_demangle_callback.constprop.11+0x14c>
   1dbd8:	1d38      	adds	r0, r7, #4
   1dbda:	4641      	mov	r1, r8
   1dbdc:	2211      	movs	r2, #17
   1dbde:	f8c7 4114 	str.w	r4, [r7, #276]	; 0x114
   1dbe2:	607a      	str	r2, [r7, #4]
   1dbe4:	1d3c      	adds	r4, r7, #4
   1dbe6:	f8c7 6108 	str.w	r6, [r7, #264]	; 0x108
   1dbea:	f887 610c 	strb.w	r6, [r7, #268]	; 0x10c
   1dbee:	f8c7 6118 	str.w	r6, [r7, #280]	; 0x118
   1dbf2:	f8c7 611c 	str.w	r6, [r7, #284]	; 0x11c
   1dbf6:	f8c7 6128 	str.w	r6, [r7, #296]	; 0x128
   1dbfa:	f8c7 5110 	str.w	r5, [r7, #272]	; 0x110
   1dbfe:	f8c7 6120 	str.w	r6, [r7, #288]	; 0x120
   1dc02:	f7f8 faf5 	bl	161f0 <d_print_comp>
   1dc06:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   1dc0a:	f107 0008 	add.w	r0, r7, #8
   1dc0e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
   1dc12:	1864      	adds	r4, r4, r1
   1dc14:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
   1dc18:	7126      	strb	r6, [r4, #4]
   1dc1a:	4798      	blx	r3
   1dc1c:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
   1dc20:	f1d1 0001 	rsbs	r0, r1, #1
   1dc24:	bf38      	it	cc
   1dc26:	2000      	movcc	r0, #0
   1dc28:	f507 77b0 	add.w	r7, r7, #352	; 0x160
   1dc2c:	46bd      	mov	sp, r7
   1dc2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1dc32:	7840      	ldrb	r0, [r0, #1]
   1dc34:	285a      	cmp	r0, #90	; 0x5a
   1dc36:	bf08      	it	eq
   1dc38:	f04f 0901 	moveq.w	r9, #1
   1dc3c:	f47f af59 	bne.w	1daf2 <d_demangle_callback.constprop.11+0x16>
   1dc40:	e78a      	b.n	1db58 <d_demangle_callback.constprop.11+0x7c>
   1dc42:	f507 7096 	add.w	r0, r7, #300	; 0x12c
   1dc46:	4649      	mov	r1, r9
   1dc48:	f7f7 ffc2 	bl	15bd0 <d_mangled_name>
   1dc4c:	4680      	mov	r8, r0
   1dc4e:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
   1dc52:	e7ba      	b.n	1dbca <d_demangle_callback.constprop.11+0xee>
   1dc54:	f898 000b 	ldrb.w	r0, [r8, #11]
   1dc58:	f1b9 0f02 	cmp.w	r9, #2
   1dc5c:	bf14      	ite	ne
   1dc5e:	f04f 093d 	movne.w	r9, #61	; 0x3d
   1dc62:	f04f 093c 	moveq.w	r9, #60	; 0x3c
   1dc66:	f108 0a0b 	add.w	sl, r8, #11
   1dc6a:	f8c7 a138 	str.w	sl, [r7, #312]	; 0x138
   1dc6e:	285f      	cmp	r0, #95	; 0x5f
   1dc70:	d104      	bne.n	1dc7c <d_demangle_callback.constprop.11+0x1a0>
   1dc72:	f898 c00c 	ldrb.w	ip, [r8, #12]
   1dc76:	f1bc 0f5a 	cmp.w	ip, #90	; 0x5a
   1dc7a:	d019      	beq.n	1dcb0 <d_demangle_callback.constprop.11+0x1d4>
   1dc7c:	4650      	mov	r0, sl
   1dc7e:	f507 7696 	add.w	r6, r7, #300	; 0x12c
   1dc82:	f002 fba7 	bl	203d4 <strlen>
   1dc86:	4651      	mov	r1, sl
   1dc88:	4602      	mov	r2, r0
   1dc8a:	4630      	mov	r0, r6
   1dc8c:	f7f6 fad0 	bl	14230 <d_make_name>
   1dc90:	4602      	mov	r2, r0
   1dc92:	4649      	mov	r1, r9
   1dc94:	2300      	movs	r3, #0
   1dc96:	4630      	mov	r0, r6
   1dc98:	f7f6 fa78 	bl	1418c <d_make_comp>
   1dc9c:	f8d7 6138 	ldr.w	r6, [r7, #312]	; 0x138
   1dca0:	4680      	mov	r8, r0
   1dca2:	4630      	mov	r0, r6
   1dca4:	f002 fb96 	bl	203d4 <strlen>
   1dca8:	1830      	adds	r0, r6, r0
   1dcaa:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138
   1dcae:	e78c      	b.n	1dbca <d_demangle_callback.constprop.11+0xee>
   1dcb0:	f507 7696 	add.w	r6, r7, #300	; 0x12c
   1dcb4:	f108 030d 	add.w	r3, r8, #13
   1dcb8:	4630      	mov	r0, r6
   1dcba:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   1dcbe:	f7f7 fce1 	bl	15684 <d_encoding>
   1dcc2:	4602      	mov	r2, r0
   1dcc4:	e7e5      	b.n	1dc92 <d_demangle_callback.constprop.11+0x1b6>
   1dcc6:	bf00      	nop

0001dcc8 <__cxa_demangle>:
   1dcc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dccc:	460c      	mov	r4, r1
   1dcce:	b084      	sub	sp, #16
   1dcd0:	4615      	mov	r5, r2
   1dcd2:	461e      	mov	r6, r3
   1dcd4:	4607      	mov	r7, r0
   1dcd6:	2800      	cmp	r0, #0
   1dcd8:	d04b      	beq.n	1dd72 <__cxa_demangle+0xaa>
   1dcda:	1c0b      	adds	r3, r1, #0
   1dcdc:	bf18      	it	ne
   1dcde:	2301      	movne	r3, #1
   1dce0:	2a00      	cmp	r2, #0
   1dce2:	bf14      	ite	ne
   1dce4:	2300      	movne	r3, #0
   1dce6:	f003 0301 	andeq.w	r3, r3, #1
   1dcea:	b14b      	cbz	r3, 1dd00 <__cxa_demangle+0x38>
   1dcec:	2e00      	cmp	r6, #0
   1dcee:	d044      	beq.n	1dd7a <__cxa_demangle+0xb2>
   1dcf0:	2700      	movs	r7, #0
   1dcf2:	f06f 0302 	mvn.w	r3, #2
   1dcf6:	6033      	str	r3, [r6, #0]
   1dcf8:	4638      	mov	r0, r7
   1dcfa:	b004      	add	sp, #16
   1dcfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1dd00:	f244 71ad 	movw	r1, #18349	; 0x47ad
   1dd04:	466a      	mov	r2, sp
   1dd06:	f2c0 0101 	movt	r1, #1
   1dd0a:	9300      	str	r3, [sp, #0]
   1dd0c:	9301      	str	r3, [sp, #4]
   1dd0e:	9302      	str	r3, [sp, #8]
   1dd10:	9303      	str	r3, [sp, #12]
   1dd12:	f7ff fee3 	bl	1dadc <d_demangle_callback.constprop.11>
   1dd16:	4603      	mov	r3, r0
   1dd18:	b1e0      	cbz	r0, 1dd54 <__cxa_demangle+0x8c>
   1dd1a:	9b03      	ldr	r3, [sp, #12]
   1dd1c:	f8dd 8008 	ldr.w	r8, [sp, #8]
   1dd20:	b10b      	cbz	r3, 1dd26 <__cxa_demangle+0x5e>
   1dd22:	f04f 0801 	mov.w	r8, #1
   1dd26:	9f00      	ldr	r7, [sp, #0]
   1dd28:	b1c7      	cbz	r7, 1dd5c <__cxa_demangle+0x94>
   1dd2a:	2c00      	cmp	r4, #0
   1dd2c:	d02d      	beq.n	1dd8a <__cxa_demangle+0xc2>
   1dd2e:	4638      	mov	r0, r7
   1dd30:	f002 fb50 	bl	203d4 <strlen>
   1dd34:	6829      	ldr	r1, [r5, #0]
   1dd36:	4288      	cmp	r0, r1
   1dd38:	d221      	bcs.n	1dd7e <__cxa_demangle+0xb6>
   1dd3a:	4639      	mov	r1, r7
   1dd3c:	4620      	mov	r0, r4
   1dd3e:	f002 faeb 	bl	20318 <strcpy>
   1dd42:	4638      	mov	r0, r7
   1dd44:	f001 f956 	bl	1eff4 <free>
   1dd48:	4627      	mov	r7, r4
   1dd4a:	2e00      	cmp	r6, #0
   1dd4c:	d0d4      	beq.n	1dcf8 <__cxa_demangle+0x30>
   1dd4e:	2000      	movs	r0, #0
   1dd50:	6030      	str	r0, [r6, #0]
   1dd52:	e7d1      	b.n	1dcf8 <__cxa_demangle+0x30>
   1dd54:	9800      	ldr	r0, [sp, #0]
   1dd56:	4698      	mov	r8, r3
   1dd58:	f001 f94c 	bl	1eff4 <free>
   1dd5c:	b16e      	cbz	r6, 1dd7a <__cxa_demangle+0xb2>
   1dd5e:	2700      	movs	r7, #0
   1dd60:	f1b8 0f01 	cmp.w	r8, #1
   1dd64:	bf0c      	ite	eq
   1dd66:	f04f 33ff 	moveq.w	r3, #4294967295
   1dd6a:	f06f 0301 	mvnne.w	r3, #1
   1dd6e:	6033      	str	r3, [r6, #0]
   1dd70:	e7c2      	b.n	1dcf8 <__cxa_demangle+0x30>
   1dd72:	2b00      	cmp	r3, #0
   1dd74:	d1bd      	bne.n	1dcf2 <__cxa_demangle+0x2a>
   1dd76:	461f      	mov	r7, r3
   1dd78:	e7be      	b.n	1dcf8 <__cxa_demangle+0x30>
   1dd7a:	4637      	mov	r7, r6
   1dd7c:	e7bc      	b.n	1dcf8 <__cxa_demangle+0x30>
   1dd7e:	4620      	mov	r0, r4
   1dd80:	f001 f938 	bl	1eff4 <free>
   1dd84:	f8c5 8000 	str.w	r8, [r5]
   1dd88:	e7df      	b.n	1dd4a <__cxa_demangle+0x82>
   1dd8a:	2d00      	cmp	r5, #0
   1dd8c:	d0dd      	beq.n	1dd4a <__cxa_demangle+0x82>
   1dd8e:	f8c5 8000 	str.w	r8, [r5]
   1dd92:	e7da      	b.n	1dd4a <__cxa_demangle+0x82>

0001dd94 <__gcclibcxx_demangle_callback>:
   1dd94:	b508      	push	{r3, lr}
   1dd96:	f1d0 0301 	rsbs	r3, r0, #1
   1dd9a:	bf38      	it	cc
   1dd9c:	2300      	movcc	r3, #0
   1dd9e:	2900      	cmp	r1, #0
   1dda0:	bf08      	it	eq
   1dda2:	f043 0301 	orreq.w	r3, r3, #1
   1dda6:	b93b      	cbnz	r3, 1ddb8 <__gcclibcxx_demangle_callback+0x24>
   1dda8:	f7ff fe98 	bl	1dadc <d_demangle_callback.constprop.11>
   1ddac:	2800      	cmp	r0, #0
   1ddae:	bf14      	ite	ne
   1ddb0:	2000      	movne	r0, #0
   1ddb2:	f06f 0001 	mvneq.w	r0, #1
   1ddb6:	bd08      	pop	{r3, pc}
   1ddb8:	f06f 0002 	mvn.w	r0, #2
   1ddbc:	bd08      	pop	{r3, pc}
   1ddbe:	bf00      	nop

0001ddc0 <std::exception::~exception()>:
   1ddc0:	4b01      	ldr	r3, [pc, #4]	; (1ddc8 <std::exception::~exception()+0x8>)
   1ddc2:	6003      	str	r3, [r0, #0]
   1ddc4:	4770      	bx	lr
   1ddc6:	bf00      	nop
   1ddc8:	0002be30 	.word	0x0002be30

0001ddcc <std::bad_exception::~bad_exception()>:
   1ddcc:	4b01      	ldr	r3, [pc, #4]	; (1ddd4 <std::bad_exception::~bad_exception()+0x8>)
   1ddce:	6003      	str	r3, [r0, #0]
   1ddd0:	4770      	bx	lr
   1ddd2:	bf00      	nop
   1ddd4:	0002be30 	.word	0x0002be30

0001ddd8 <std::exception::what() const>:
   1ddd8:	f64b 6064 	movw	r0, #48740	; 0xbe64
   1dddc:	f2c0 0002 	movt	r0, #2
   1dde0:	4770      	bx	lr
   1dde2:	bf00      	nop

0001dde4 <std::bad_exception::what() const>:
   1dde4:	f64b 6074 	movw	r0, #48756	; 0xbe74
   1dde8:	f2c0 0002 	movt	r0, #2
   1ddec:	4770      	bx	lr
   1ddee:	bf00      	nop

0001ddf0 <std::bad_exception::~bad_exception()>:
   1ddf0:	4b03      	ldr	r3, [pc, #12]	; (1de00 <std::bad_exception::~bad_exception()+0x10>)
   1ddf2:	b510      	push	{r4, lr}
   1ddf4:	4604      	mov	r4, r0
   1ddf6:	6003      	str	r3, [r0, #0]
   1ddf8:	f7f5 fd6e 	bl	138d8 <operator delete(void*)>
   1ddfc:	4620      	mov	r0, r4
   1ddfe:	bd10      	pop	{r4, pc}
   1de00:	0002be30 	.word	0x0002be30

0001de04 <std::exception::~exception()>:
   1de04:	4b03      	ldr	r3, [pc, #12]	; (1de14 <std::exception::~exception()+0x10>)
   1de06:	b510      	push	{r4, lr}
   1de08:	4604      	mov	r4, r0
   1de0a:	6003      	str	r3, [r0, #0]
   1de0c:	f7f5 fd64 	bl	138d8 <operator delete(void*)>
   1de10:	4620      	mov	r0, r4
   1de12:	bd10      	pop	{r4, pc}
   1de14:	0002be30 	.word	0x0002be30

0001de18 <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)>:
   1de18:	2801      	cmp	r0, #1
   1de1a:	b510      	push	{r4, lr}
   1de1c:	d81d      	bhi.n	1de5a <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)+0x42>
   1de1e:	f04f 32ff 	mov.w	r2, #4294967295
   1de22:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
   1de26:	f3bf 8f5f 	dmb	sy
   1de2a:	e853 0f00 	ldrex	r0, [r3]
   1de2e:	4410      	add	r0, r2
   1de30:	e843 0400 	strex	r4, r0, [r3]
   1de34:	f094 0f00 	teq	r4, #0
   1de38:	d1f7      	bne.n	1de2a <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)+0x12>
   1de3a:	f3bf 8f5f 	dmb	sy
   1de3e:	b958      	cbnz	r0, 1de58 <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)+0x40>
   1de40:	f851 3c1c 	ldr.w	r3, [r1, #-28]
   1de44:	f101 0458 	add.w	r4, r1, #88	; 0x58
   1de48:	b10b      	cbz	r3, 1de4e <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)+0x36>
   1de4a:	4620      	mov	r0, r4
   1de4c:	4798      	blx	r3
   1de4e:	4620      	mov	r0, r4
   1de50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1de54:	f7f6 b818 	b.w	13e88 <__cxa_free_exception>
   1de58:	bd10      	pop	{r4, pc}
   1de5a:	f851 0c14 	ldr.w	r0, [r1, #-20]
   1de5e:	f7f5 fd3f 	bl	138e0 <__cxxabiv1::__terminate(void (*)())>
   1de62:	bf00      	nop

0001de64 <__cxa_throw>:
   1de64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1de66:	f240 0c1c 	movw	ip, #28
   1de6a:	f240 0e20 	movw	lr, #32
   1de6e:	f2c1 0c00 	movt	ip, #4096	; 0x1000
   1de72:	f2c1 0e00 	movt	lr, #4096	; 0x1000
   1de76:	4603      	mov	r3, r0
   1de78:	f1a0 0458 	sub.w	r4, r0, #88	; 0x58
   1de7c:	f8dc 0000 	ldr.w	r0, [ip]
   1de80:	f8de 7000 	ldr.w	r7, [lr]
   1de84:	f64d 6519 	movw	r5, #56857	; 0xde19
   1de88:	f843 1c78 	str.w	r1, [r3, #-120]
   1de8c:	2643      	movs	r6, #67	; 0x43
   1de8e:	212b      	movs	r1, #43	; 0x2b
   1de90:	f843 2c74 	str.w	r2, [r3, #-116]
   1de94:	f843 7c70 	str.w	r7, [r3, #-112]
   1de98:	2247      	movs	r2, #71	; 0x47
   1de9a:	f843 0c6c 	str.w	r0, [r3, #-108]
   1de9e:	2701      	movs	r7, #1
   1dea0:	f803 2c58 	strb.w	r2, [r3, #-88]
   1dea4:	2055      	movs	r0, #85	; 0x55
   1dea6:	f843 7c80 	str.w	r7, [r3, #-128]
   1deaa:	2200      	movs	r2, #0
   1deac:	f803 0c56 	strb.w	r0, [r3, #-86]
   1deb0:	f2c0 0501 	movt	r5, #1
   1deb4:	f803 6c55 	strb.w	r6, [r3, #-85]
   1deb8:	274e      	movs	r7, #78	; 0x4e
   1deba:	f803 6c54 	strb.w	r6, [r3, #-84]
   1debe:	4620      	mov	r0, r4
   1dec0:	f803 7c57 	strb.w	r7, [r3, #-87]
   1dec4:	f803 1c53 	strb.w	r1, [r3, #-83]
   1dec8:	f803 1c52 	strb.w	r1, [r3, #-82]
   1decc:	f803 2c51 	strb.w	r2, [r3, #-81]
   1ded0:	f843 5c50 	str.w	r5, [r3, #-80]
   1ded4:	f007 fe04 	bl	25ae0 <_Unwind_RaiseException>
   1ded8:	4620      	mov	r0, r4
   1deda:	f7f5 ff05 	bl	13ce8 <__cxa_begin_catch>
   1dede:	f7f5 fd13 	bl	13908 <std::terminate()>
   1dee2:	bf00      	nop

0001dee4 <__cxa_rethrow>:
   1dee4:	b510      	push	{r4, lr}
   1dee6:	f7f6 f87d 	bl	13fe4 <__cxa_get_globals>
   1deea:	6841      	ldr	r1, [r0, #4]
   1deec:	6804      	ldr	r4, [r0, #0]
   1deee:	1c4b      	adds	r3, r1, #1
   1def0:	6043      	str	r3, [r0, #4]
   1def2:	b164      	cbz	r4, 1df0e <__cxa_rethrow+0x2a>
   1def4:	f894 2020 	ldrb.w	r2, [r4, #32]
   1def8:	2a47      	cmp	r2, #71	; 0x47
   1defa:	d00a      	beq.n	1df12 <__cxa_rethrow+0x2e>
   1defc:	2100      	movs	r1, #0
   1defe:	6001      	str	r1, [r0, #0]
   1df00:	3420      	adds	r4, #32
   1df02:	4620      	mov	r0, r4
   1df04:	f007 fe10 	bl	25b28 <_Unwind_Resume_or_Rethrow>
   1df08:	4620      	mov	r0, r4
   1df0a:	f7f5 feed 	bl	13ce8 <__cxa_begin_catch>
   1df0e:	f7f5 fcfb 	bl	13908 <std::terminate()>
   1df12:	f894 c021 	ldrb.w	ip, [r4, #33]	; 0x21
   1df16:	f1bc 0f4e 	cmp.w	ip, #78	; 0x4e
   1df1a:	d1ef      	bne.n	1defc <__cxa_rethrow+0x18>
   1df1c:	f894 e022 	ldrb.w	lr, [r4, #34]	; 0x22
   1df20:	f1be 0f55 	cmp.w	lr, #85	; 0x55
   1df24:	d1ea      	bne.n	1defc <__cxa_rethrow+0x18>
   1df26:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1df2a:	2b43      	cmp	r3, #67	; 0x43
   1df2c:	d1e6      	bne.n	1defc <__cxa_rethrow+0x18>
   1df2e:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
   1df32:	2943      	cmp	r1, #67	; 0x43
   1df34:	d1e2      	bne.n	1defc <__cxa_rethrow+0x18>
   1df36:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   1df3a:	2a2b      	cmp	r2, #43	; 0x2b
   1df3c:	d1de      	bne.n	1defc <__cxa_rethrow+0x18>
   1df3e:	f894 c026 	ldrb.w	ip, [r4, #38]	; 0x26
   1df42:	f1bc 0f2b 	cmp.w	ip, #43	; 0x2b
   1df46:	d1d9      	bne.n	1defc <__cxa_rethrow+0x18>
   1df48:	f894 e027 	ldrb.w	lr, [r4, #39]	; 0x27
   1df4c:	f1be 0f01 	cmp.w	lr, #1
   1df50:	d8d4      	bhi.n	1defc <__cxa_rethrow+0x18>
   1df52:	6963      	ldr	r3, [r4, #20]
   1df54:	4258      	negs	r0, r3
   1df56:	6160      	str	r0, [r4, #20]
   1df58:	e7d2      	b.n	1df00 <__cxa_rethrow+0x1c>
   1df5a:	bf00      	nop

0001df5c <read_sleb128(unsigned char const*, long*)>:
   1df5c:	2300      	movs	r3, #0
   1df5e:	461a      	mov	r2, r3
   1df60:	b470      	push	{r4, r5, r6}
   1df62:	f810 4b01 	ldrb.w	r4, [r0], #1
   1df66:	f004 057f 	and.w	r5, r4, #127	; 0x7f
   1df6a:	4606      	mov	r6, r0
   1df6c:	fa05 f502 	lsl.w	r5, r5, r2
   1df70:	3207      	adds	r2, #7
   1df72:	f014 0f80 	tst.w	r4, #128	; 0x80
   1df76:	ea43 0305 	orr.w	r3, r3, r5
   1df7a:	d1f2      	bne.n	1df62 <read_sleb128(unsigned char const*, long*)+0x6>
   1df7c:	2a1f      	cmp	r2, #31
   1df7e:	d806      	bhi.n	1df8e <read_sleb128(unsigned char const*, long*)+0x32>
   1df80:	0660      	lsls	r0, r4, #25
   1df82:	bf42      	ittt	mi
   1df84:	f04f 30ff 	movmi.w	r0, #4294967295
   1df88:	fa00 f202 	lslmi.w	r2, r0, r2
   1df8c:	4313      	orrmi	r3, r2
   1df8e:	600b      	str	r3, [r1, #0]
   1df90:	4630      	mov	r0, r6
   1df92:	bc70      	pop	{r4, r5, r6}
   1df94:	4770      	bx	lr
   1df96:	bf00      	nop

0001df98 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>:
   1df98:	2850      	cmp	r0, #80	; 0x50
   1df9a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1df9c:	4604      	mov	r4, r0
   1df9e:	b085      	sub	sp, #20
   1dfa0:	460d      	mov	r5, r1
   1dfa2:	d044      	beq.n	1e02e <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x96>
   1dfa4:	f000 010f 	and.w	r1, r0, #15
   1dfa8:	290c      	cmp	r1, #12
   1dfaa:	d82a      	bhi.n	1e002 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x6a>
   1dfac:	e8df f001 	tbb	[pc, r1]
   1dfb0:	073b2b07 	.word	0x073b2b07
   1dfb4:	29292917 	.word	0x29292917
   1dfb8:	071b1f29 	.word	0x071b1f29
   1dfbc:	17          	.byte	0x17
   1dfbd:	00          	.byte	0x00
   1dfbe:	4610      	mov	r0, r2
   1dfc0:	f850 1b04 	ldr.w	r1, [r0], #4
   1dfc4:	b141      	cbz	r1, 1dfd8 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x40>
   1dfc6:	f004 0670 	and.w	r6, r4, #112	; 0x70
   1dfca:	2e10      	cmp	r6, #16
   1dfcc:	bf08      	it	eq
   1dfce:	4615      	moveq	r5, r2
   1dfd0:	0622      	lsls	r2, r4, #24
   1dfd2:	4429      	add	r1, r5
   1dfd4:	bf48      	it	mi
   1dfd6:	6809      	ldrmi	r1, [r1, #0]
   1dfd8:	6019      	str	r1, [r3, #0]
   1dfda:	b005      	add	sp, #20
   1dfdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1dfde:	4610      	mov	r0, r2
   1dfe0:	f850 1b08 	ldr.w	r1, [r0], #8
   1dfe4:	e7ee      	b.n	1dfc4 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x2c>
   1dfe6:	4610      	mov	r0, r2
   1dfe8:	f930 1b02 	ldrsh.w	r1, [r0], #2
   1dfec:	e7ea      	b.n	1dfc4 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x2c>
   1dfee:	4610      	mov	r0, r2
   1dff0:	a903      	add	r1, sp, #12
   1dff2:	9201      	str	r2, [sp, #4]
   1dff4:	9300      	str	r3, [sp, #0]
   1dff6:	f7ff ffb1 	bl	1df5c <read_sleb128(unsigned char const*, long*)>
   1dffa:	9903      	ldr	r1, [sp, #12]
   1dffc:	9a01      	ldr	r2, [sp, #4]
   1dffe:	9b00      	ldr	r3, [sp, #0]
   1e000:	e7e0      	b.n	1dfc4 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x2c>
   1e002:	f000 fd1b 	bl	1ea3c <abort>
   1e006:	2100      	movs	r1, #0
   1e008:	4610      	mov	r0, r2
   1e00a:	460e      	mov	r6, r1
   1e00c:	f810 7b01 	ldrb.w	r7, [r0], #1
   1e010:	f007 0c7f 	and.w	ip, r7, #127	; 0x7f
   1e014:	fa0c fc06 	lsl.w	ip, ip, r6
   1e018:	3607      	adds	r6, #7
   1e01a:	f017 0f80 	tst.w	r7, #128	; 0x80
   1e01e:	ea41 010c 	orr.w	r1, r1, ip
   1e022:	d1f3      	bne.n	1e00c <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x74>
   1e024:	e7ce      	b.n	1dfc4 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x2c>
   1e026:	4610      	mov	r0, r2
   1e028:	f830 1b02 	ldrh.w	r1, [r0], #2
   1e02c:	e7ca      	b.n	1dfc4 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x2c>
   1e02e:	3203      	adds	r2, #3
   1e030:	f022 0003 	bic.w	r0, r2, #3
   1e034:	f850 1b04 	ldr.w	r1, [r0], #4
   1e038:	e7ce      	b.n	1dfd8 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x40>
   1e03a:	bf00      	nop

0001e03c <base_of_encoded_value(unsigned char, _Unwind_Context*)>:
   1e03c:	28ff      	cmp	r0, #255	; 0xff
   1e03e:	b508      	push	{r3, lr}
   1e040:	d00d      	beq.n	1e05e <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x22>
   1e042:	f000 0370 	and.w	r3, r0, #112	; 0x70
   1e046:	2b20      	cmp	r3, #32
   1e048:	d019      	beq.n	1e07e <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x42>
   1e04a:	dd07      	ble.n	1e05c <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x20>
   1e04c:	2b40      	cmp	r3, #64	; 0x40
   1e04e:	d011      	beq.n	1e074 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x38>
   1e050:	2b50      	cmp	r3, #80	; 0x50
   1e052:	d004      	beq.n	1e05e <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x22>
   1e054:	2b30      	cmp	r3, #48	; 0x30
   1e056:	d008      	beq.n	1e06a <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x2e>
   1e058:	f000 fcf0 	bl	1ea3c <abort>
   1e05c:	b90b      	cbnz	r3, 1e062 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x26>
   1e05e:	2000      	movs	r0, #0
   1e060:	bd08      	pop	{r3, pc}
   1e062:	2b10      	cmp	r3, #16
   1e064:	d0fb      	beq.n	1e05e <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x22>
   1e066:	f000 fce9 	bl	1ea3c <abort>
   1e06a:	4608      	mov	r0, r1
   1e06c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1e070:	f007 bf64 	b.w	25f3c <_Unwind_GetDataRelBase>
   1e074:	4608      	mov	r0, r1
   1e076:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1e07a:	f007 bf4f 	b.w	25f1c <_Unwind_GetRegionStart>
   1e07e:	4608      	mov	r0, r1
   1e080:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1e084:	f007 bf5e 	b.w	25f44 <_Unwind_GetTextRelBase>

0001e088 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1>:
   1e088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e08a:	460d      	mov	r5, r1
   1e08c:	4614      	mov	r4, r2
   1e08e:	4607      	mov	r7, r0
   1e090:	b108      	cbz	r0, 1e096 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1+0xe>
   1e092:	f007 ff43 	bl	25f1c <_Unwind_GetRegionStart>
   1e096:	6020      	str	r0, [r4, #0]
   1e098:	f815 6b01 	ldrb.w	r6, [r5], #1
   1e09c:	2eff      	cmp	r6, #255	; 0xff
   1e09e:	bf08      	it	eq
   1e0a0:	6060      	streq	r0, [r4, #4]
   1e0a2:	d00a      	beq.n	1e0ba <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1+0x32>
   1e0a4:	4639      	mov	r1, r7
   1e0a6:	4630      	mov	r0, r6
   1e0a8:	f7ff ffc8 	bl	1e03c <base_of_encoded_value(unsigned char, _Unwind_Context*)>
   1e0ac:	462a      	mov	r2, r5
   1e0ae:	1d23      	adds	r3, r4, #4
   1e0b0:	4601      	mov	r1, r0
   1e0b2:	4630      	mov	r0, r6
   1e0b4:	f7ff ff70 	bl	1df98 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>
   1e0b8:	4605      	mov	r5, r0
   1e0ba:	f815 3b01 	ldrb.w	r3, [r5], #1
   1e0be:	2bff      	cmp	r3, #255	; 0xff
   1e0c0:	7523      	strb	r3, [r4, #20]
   1e0c2:	d025      	beq.n	1e110 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1+0x88>
   1e0c4:	2000      	movs	r0, #0
   1e0c6:	4602      	mov	r2, r0
   1e0c8:	462b      	mov	r3, r5
   1e0ca:	f813 1b01 	ldrb.w	r1, [r3], #1
   1e0ce:	f001 0c7f 	and.w	ip, r1, #127	; 0x7f
   1e0d2:	461d      	mov	r5, r3
   1e0d4:	fa0c f602 	lsl.w	r6, ip, r2
   1e0d8:	3207      	adds	r2, #7
   1e0da:	4330      	orrs	r0, r6
   1e0dc:	060e      	lsls	r6, r1, #24
   1e0de:	d4f3      	bmi.n	1e0c8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1+0x40>
   1e0e0:	1818      	adds	r0, r3, r0
   1e0e2:	60e0      	str	r0, [r4, #12]
   1e0e4:	2300      	movs	r3, #0
   1e0e6:	f815 1b01 	ldrb.w	r1, [r5], #1
   1e0ea:	461a      	mov	r2, r3
   1e0ec:	7561      	strb	r1, [r4, #21]
   1e0ee:	4628      	mov	r0, r5
   1e0f0:	f810 cb01 	ldrb.w	ip, [r0], #1
   1e0f4:	f00c 067f 	and.w	r6, ip, #127	; 0x7f
   1e0f8:	4605      	mov	r5, r0
   1e0fa:	fa06 f602 	lsl.w	r6, r6, r2
   1e0fe:	3207      	adds	r2, #7
   1e100:	ea5f 610c 	movs.w	r1, ip, lsl #24
   1e104:	ea43 0306 	orr.w	r3, r3, r6
   1e108:	d4f1      	bmi.n	1e0ee <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1+0x66>
   1e10a:	18c3      	adds	r3, r0, r3
   1e10c:	6123      	str	r3, [r4, #16]
   1e10e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e110:	2200      	movs	r2, #0
   1e112:	60e2      	str	r2, [r4, #12]
   1e114:	e7e6      	b.n	1e0e4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1+0x5c>
   1e116:	bf00      	nop

0001e118 <__gxx_personality_v0>:
   1e118:	f000 0303 	and.w	r3, r0, #3
   1e11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e120:	2400      	movs	r4, #0
   1e122:	b093      	sub	sp, #76	; 0x4c
   1e124:	2b01      	cmp	r3, #1
   1e126:	4688      	mov	r8, r1
   1e128:	4617      	mov	r7, r2
   1e12a:	940b      	str	r4, [sp, #44]	; 0x2c
   1e12c:	f000 809d 	beq.w	1e26a <__gxx_personality_v0+0x152>
   1e130:	2b02      	cmp	r3, #2
   1e132:	f000 808f 	beq.w	1e254 <__gxx_personality_v0+0x13c>
   1e136:	2b00      	cmp	r3, #0
   1e138:	f040 808a 	bne.w	1e250 <__gxx_personality_v0+0x138>
   1e13c:	f010 0108 	ands.w	r1, r0, #8
   1e140:	f040 80d4 	bne.w	1e2ec <__gxx_personality_v0+0x1d4>
   1e144:	ad12      	add	r5, sp, #72	; 0x48
   1e146:	4610      	mov	r0, r2
   1e148:	460b      	mov	r3, r1
   1e14a:	220c      	movs	r2, #12
   1e14c:	f845 8d10 	str.w	r8, [r5, #-16]!
   1e150:	f04f 0901 	mov.w	r9, #1
   1e154:	9500      	str	r5, [sp, #0]
   1e156:	f006 ffdf 	bl	25118 <_Unwind_VRS_Set>
   1e15a:	4638      	mov	r0, r7
   1e15c:	f007 fee4 	bl	25f28 <_Unwind_GetLanguageSpecificData>
   1e160:	4682      	mov	sl, r0
   1e162:	2800      	cmp	r0, #0
   1e164:	f000 8098 	beq.w	1e298 <__gxx_personality_v0+0x180>
   1e168:	aa05      	add	r2, sp, #20
   1e16a:	4601      	mov	r1, r0
   1e16c:	4638      	mov	r0, r7
   1e16e:	f7ff ff8b 	bl	1e088 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1>
   1e172:	4639      	mov	r1, r7
   1e174:	4604      	mov	r4, r0
   1e176:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
   1e17a:	f7ff ff5f 	bl	1e03c <base_of_encoded_value(unsigned char, _Unwind_Context*)>
   1e17e:	2100      	movs	r1, #0
   1e180:	460b      	mov	r3, r1
   1e182:	220f      	movs	r2, #15
   1e184:	9500      	str	r5, [sp, #0]
   1e186:	9007      	str	r0, [sp, #28]
   1e188:	4638      	mov	r0, r7
   1e18a:	f006 ff9f 	bl	250cc <_Unwind_VRS_Get>
   1e18e:	980e      	ldr	r0, [sp, #56]	; 0x38
   1e190:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e192:	f020 0601 	bic.w	r6, r0, #1
   1e196:	3e01      	subs	r6, #1
   1e198:	429c      	cmp	r4, r3
   1e19a:	d23c      	bcs.n	1e216 <__gxx_personality_v0+0xfe>
   1e19c:	f89d b029 	ldrb.w	fp, [sp, #41]	; 0x29
   1e1a0:	2100      	movs	r1, #0
   1e1a2:	4658      	mov	r0, fp
   1e1a4:	f7ff ff4a 	bl	1e03c <base_of_encoded_value(unsigned char, _Unwind_Context*)>
   1e1a8:	4622      	mov	r2, r4
   1e1aa:	ab0c      	add	r3, sp, #48	; 0x30
   1e1ac:	4601      	mov	r1, r0
   1e1ae:	4658      	mov	r0, fp
   1e1b0:	f7ff fef2 	bl	1df98 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>
   1e1b4:	f89d 4029 	ldrb.w	r4, [sp, #41]	; 0x29
   1e1b8:	2100      	movs	r1, #0
   1e1ba:	4683      	mov	fp, r0
   1e1bc:	4620      	mov	r0, r4
   1e1be:	f7ff ff3d 	bl	1e03c <base_of_encoded_value(unsigned char, _Unwind_Context*)>
   1e1c2:	465a      	mov	r2, fp
   1e1c4:	ab0d      	add	r3, sp, #52	; 0x34
   1e1c6:	4601      	mov	r1, r0
   1e1c8:	4620      	mov	r0, r4
   1e1ca:	f7ff fee5 	bl	1df98 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>
   1e1ce:	f89d 4029 	ldrb.w	r4, [sp, #41]	; 0x29
   1e1d2:	2100      	movs	r1, #0
   1e1d4:	4683      	mov	fp, r0
   1e1d6:	4620      	mov	r0, r4
   1e1d8:	f7ff ff30 	bl	1e03c <base_of_encoded_value(unsigned char, _Unwind_Context*)>
   1e1dc:	462b      	mov	r3, r5
   1e1de:	465a      	mov	r2, fp
   1e1e0:	4601      	mov	r1, r0
   1e1e2:	4620      	mov	r0, r4
   1e1e4:	f7ff fed8 	bl	1df98 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>
   1e1e8:	2100      	movs	r1, #0
   1e1ea:	460b      	mov	r3, r1
   1e1ec:	4604      	mov	r4, r0
   1e1ee:	f814 2b01 	ldrb.w	r2, [r4], #1
   1e1f2:	f002 0e7f 	and.w	lr, r2, #127	; 0x7f
   1e1f6:	fa0e fc03 	lsl.w	ip, lr, r3
   1e1fa:	3307      	adds	r3, #7
   1e1fc:	0612      	lsls	r2, r2, #24
   1e1fe:	ea41 010c 	orr.w	r1, r1, ip
   1e202:	d4f4      	bmi.n	1e1ee <__gxx_personality_v0+0xd6>
   1e204:	9b05      	ldr	r3, [sp, #20]
   1e206:	980c      	ldr	r0, [sp, #48]	; 0x30
   1e208:	18c3      	adds	r3, r0, r3
   1e20a:	429e      	cmp	r6, r3
   1e20c:	d277      	bcs.n	1e2fe <__gxx_personality_v0+0x1e6>
   1e20e:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1e210:	4623      	mov	r3, r4
   1e212:	429c      	cmp	r4, r3
   1e214:	d3c2      	bcc.n	1e19c <__gxx_personality_v0+0x84>
   1e216:	2400      	movs	r4, #0
   1e218:	2601      	movs	r6, #1
   1e21a:	46a3      	mov	fp, r4
   1e21c:	f019 0f01 	tst.w	r9, #1
   1e220:	d073      	beq.n	1e30a <__gxx_personality_v0+0x1f2>
   1e222:	2e02      	cmp	r6, #2
   1e224:	d038      	beq.n	1e298 <__gxx_personality_v0+0x180>
   1e226:	2100      	movs	r1, #0
   1e228:	220d      	movs	r2, #13
   1e22a:	4638      	mov	r0, r7
   1e22c:	460b      	mov	r3, r1
   1e22e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1e230:	9500      	str	r5, [sp, #0]
   1e232:	f006 ff4b 	bl	250cc <_Unwind_VRS_Get>
   1e236:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1e238:	2006      	movs	r0, #6
   1e23a:	f8c8 6024 	str.w	r6, [r8, #36]	; 0x24
   1e23e:	f8c8 4028 	str.w	r4, [r8, #40]	; 0x28
   1e242:	f8c8 2020 	str.w	r2, [r8, #32]
   1e246:	f8c8 a02c 	str.w	sl, [r8, #44]	; 0x2c
   1e24a:	f8c8 b030 	str.w	fp, [r8, #48]	; 0x30
   1e24e:	e009      	b.n	1e264 <__gxx_personality_v0+0x14c>
   1e250:	f000 fbf4 	bl	1ea3c <abort>
   1e254:	4608      	mov	r0, r1
   1e256:	4611      	mov	r1, r2
   1e258:	f007 fe4a 	bl	25ef0 <__gnu_unwind_frame>
   1e25c:	2800      	cmp	r0, #0
   1e25e:	bf0c      	ite	eq
   1e260:	2008      	moveq	r0, #8
   1e262:	2009      	movne	r0, #9
   1e264:	b013      	add	sp, #76	; 0x4c
   1e266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e26a:	f010 0608 	ands.w	r6, r0, #8
   1e26e:	bf18      	it	ne
   1e270:	ad0e      	addne	r5, sp, #56	; 0x38
   1e272:	d01a      	beq.n	1e2aa <__gxx_personality_v0+0x192>
   1e274:	2100      	movs	r1, #0
   1e276:	220c      	movs	r2, #12
   1e278:	460b      	mov	r3, r1
   1e27a:	4638      	mov	r0, r7
   1e27c:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
   1e280:	f046 0902 	orr.w	r9, r6, #2
   1e284:	9500      	str	r5, [sp, #0]
   1e286:	f006 ff47 	bl	25118 <_Unwind_VRS_Set>
   1e28a:	4638      	mov	r0, r7
   1e28c:	f007 fe4c 	bl	25f28 <_Unwind_GetLanguageSpecificData>
   1e290:	4682      	mov	sl, r0
   1e292:	2800      	cmp	r0, #0
   1e294:	f47f af68 	bne.w	1e168 <__gxx_personality_v0+0x50>
   1e298:	4640      	mov	r0, r8
   1e29a:	4639      	mov	r1, r7
   1e29c:	f007 fe28 	bl	25ef0 <__gnu_unwind_frame>
   1e2a0:	2800      	cmp	r0, #0
   1e2a2:	bf0c      	ite	eq
   1e2a4:	2008      	moveq	r0, #8
   1e2a6:	2009      	movne	r0, #9
   1e2a8:	e7dc      	b.n	1e264 <__gxx_personality_v0+0x14c>
   1e2aa:	4610      	mov	r0, r2
   1e2ac:	4633      	mov	r3, r6
   1e2ae:	220d      	movs	r2, #13
   1e2b0:	4631      	mov	r1, r6
   1e2b2:	f8d8 4020 	ldr.w	r4, [r8, #32]
   1e2b6:	ad0e      	add	r5, sp, #56	; 0x38
   1e2b8:	9500      	str	r5, [sp, #0]
   1e2ba:	f006 ff07 	bl	250cc <_Unwind_VRS_Get>
   1e2be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1e2c0:	429c      	cmp	r4, r3
   1e2c2:	d1d7      	bne.n	1e274 <__gxx_personality_v0+0x15c>
   1e2c4:	f108 0a28 	add.w	sl, r8, #40	; 0x28
   1e2c8:	4631      	mov	r1, r6
   1e2ca:	4633      	mov	r3, r6
   1e2cc:	4638      	mov	r0, r7
   1e2ce:	220c      	movs	r2, #12
   1e2d0:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
   1e2d4:	9500      	str	r5, [sp, #0]
   1e2d6:	f006 ff1f 	bl	25118 <_Unwind_VRS_Set>
   1e2da:	e89a 0c10 	ldmia.w	sl, {r4, sl, fp}
   1e2de:	2603      	movs	r6, #3
   1e2e0:	f1bb 0f00 	cmp.w	fp, #0
   1e2e4:	d14a      	bne.n	1e37c <__gxx_personality_v0+0x264>
   1e2e6:	4640      	mov	r0, r8
   1e2e8:	f7f5 fb24 	bl	13934 <__cxa_call_terminate>
   1e2ec:	4640      	mov	r0, r8
   1e2ee:	4611      	mov	r1, r2
   1e2f0:	f007 fdfe 	bl	25ef0 <__gnu_unwind_frame>
   1e2f4:	42a0      	cmp	r0, r4
   1e2f6:	bf0c      	ite	eq
   1e2f8:	2008      	moveq	r0, #8
   1e2fa:	2009      	movne	r0, #9
   1e2fc:	e7b2      	b.n	1e264 <__gxx_personality_v0+0x14c>
   1e2fe:	980d      	ldr	r0, [sp, #52]	; 0x34
   1e300:	181a      	adds	r2, r3, r0
   1e302:	4296      	cmp	r6, r2
   1e304:	d35a      	bcc.n	1e3bc <__gxx_personality_v0+0x2a4>
   1e306:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e308:	e746      	b.n	1e198 <__gxx_personality_v0+0x80>
   1e30a:	f019 0f08 	tst.w	r9, #8
   1e30e:	d033      	beq.n	1e378 <__gxx_personality_v0+0x260>
   1e310:	2e01      	cmp	r6, #1
   1e312:	f000 80f5 	beq.w	1e500 <__gxx_personality_v0+0x3e8>
   1e316:	2c00      	cmp	r4, #0
   1e318:	f2c0 80ee 	blt.w	1e4f8 <__gxx_personality_v0+0x3e0>
   1e31c:	2100      	movs	r1, #0
   1e31e:	4638      	mov	r0, r7
   1e320:	460a      	mov	r2, r1
   1e322:	460b      	mov	r3, r1
   1e324:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
   1e328:	9500      	str	r5, [sp, #0]
   1e32a:	f006 fef5 	bl	25118 <_Unwind_VRS_Set>
   1e32e:	2100      	movs	r1, #0
   1e330:	2201      	movs	r2, #1
   1e332:	460b      	mov	r3, r1
   1e334:	4638      	mov	r0, r7
   1e336:	940e      	str	r4, [sp, #56]	; 0x38
   1e338:	9500      	str	r5, [sp, #0]
   1e33a:	f006 feed 	bl	25118 <_Unwind_VRS_Set>
   1e33e:	2100      	movs	r1, #0
   1e340:	220f      	movs	r2, #15
   1e342:	460b      	mov	r3, r1
   1e344:	4638      	mov	r0, r7
   1e346:	9500      	str	r5, [sp, #0]
   1e348:	f006 fec0 	bl	250cc <_Unwind_VRS_Get>
   1e34c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1e34e:	2100      	movs	r1, #0
   1e350:	220f      	movs	r2, #15
   1e352:	4638      	mov	r0, r7
   1e354:	f003 0401 	and.w	r4, r3, #1
   1e358:	460b      	mov	r3, r1
   1e35a:	ea4b 0404 	orr.w	r4, fp, r4
   1e35e:	9500      	str	r5, [sp, #0]
   1e360:	940e      	str	r4, [sp, #56]	; 0x38
   1e362:	f006 fed9 	bl	25118 <_Unwind_VRS_Set>
   1e366:	2007      	movs	r0, #7
   1e368:	2e02      	cmp	r6, #2
   1e36a:	f47f af7b 	bne.w	1e264 <__gxx_personality_v0+0x14c>
   1e36e:	4640      	mov	r0, r8
   1e370:	f7f5 fc40 	bl	13bf4 <__cxa_begin_cleanup>
   1e374:	2007      	movs	r0, #7
   1e376:	e775      	b.n	1e264 <__gxx_personality_v0+0x14c>
   1e378:	2e01      	cmp	r6, #1
   1e37a:	d0b4      	beq.n	1e2e6 <__gxx_personality_v0+0x1ce>
   1e37c:	2c00      	cmp	r4, #0
   1e37e:	dacd      	bge.n	1e31c <__gxx_personality_v0+0x204>
   1e380:	4651      	mov	r1, sl
   1e382:	4638      	mov	r0, r7
   1e384:	aa05      	add	r2, sp, #20
   1e386:	f7ff fe7f 	bl	1e088 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info.constprop.1>
   1e38a:	9908      	ldr	r1, [sp, #32]
   1e38c:	43e3      	mvns	r3, r4
   1e38e:	eb01 0083 	add.w	r0, r1, r3, lsl #2
   1e392:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   1e396:	b133      	cbz	r3, 1e3a6 <__gxx_personality_v0+0x28e>
   1e398:	4602      	mov	r2, r0
   1e39a:	2300      	movs	r3, #0
   1e39c:	f852 1f04 	ldr.w	r1, [r2, #4]!
   1e3a0:	3301      	adds	r3, #1
   1e3a2:	2900      	cmp	r1, #0
   1e3a4:	d1fa      	bne.n	1e39c <__gxx_personality_v0+0x284>
   1e3a6:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
   1e3aa:	2204      	movs	r2, #4
   1e3ac:	2300      	movs	r3, #0
   1e3ae:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
   1e3b2:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
   1e3b6:	f8c8 0034 	str.w	r0, [r8, #52]	; 0x34
   1e3ba:	e7af      	b.n	1e31c <__gxx_personality_v0+0x204>
   1e3bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1e3be:	469b      	mov	fp, r3
   1e3c0:	b113      	cbz	r3, 1e3c8 <__gxx_personality_v0+0x2b0>
   1e3c2:	9a06      	ldr	r2, [sp, #24]
   1e3c4:	eb03 0b02 	add.w	fp, r3, r2
   1e3c8:	4608      	mov	r0, r1
   1e3ca:	b111      	cbz	r1, 1e3d2 <__gxx_personality_v0+0x2ba>
   1e3cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e3ce:	3901      	subs	r1, #1
   1e3d0:	1858      	adds	r0, r3, r1
   1e3d2:	f1bb 0f00 	cmp.w	fp, #0
   1e3d6:	f43f af5f 	beq.w	1e298 <__gxx_personality_v0+0x180>
   1e3da:	2800      	cmp	r0, #0
   1e3dc:	f000 8089 	beq.w	1e4f2 <__gxx_personality_v0+0x3da>
   1e3e0:	f019 0608 	ands.w	r6, r9, #8
   1e3e4:	9603      	str	r6, [sp, #12]
   1e3e6:	d07a      	beq.n	1e4de <__gxx_personality_v0+0x3c6>
   1e3e8:	2347      	movs	r3, #71	; 0x47
   1e3ea:	224e      	movs	r2, #78	; 0x4e
   1e3ec:	2455      	movs	r4, #85	; 0x55
   1e3ee:	f888 3000 	strb.w	r3, [r8]
   1e3f2:	f888 2001 	strb.w	r2, [r8, #1]
   1e3f6:	2643      	movs	r6, #67	; 0x43
   1e3f8:	f888 4002 	strb.w	r4, [r8, #2]
   1e3fc:	2146      	movs	r1, #70	; 0x46
   1e3fe:	234f      	movs	r3, #79	; 0x4f
   1e400:	2252      	movs	r2, #82	; 0x52
   1e402:	2400      	movs	r4, #0
   1e404:	f888 6003 	strb.w	r6, [r8, #3]
   1e408:	f888 1004 	strb.w	r1, [r8, #4]
   1e40c:	f888 3005 	strb.w	r3, [r8, #5]
   1e410:	f888 2006 	strb.w	r2, [r8, #6]
   1e414:	f888 4007 	strb.w	r4, [r8, #7]
   1e418:	46bc      	mov	ip, r7
   1e41a:	4647      	mov	r7, r8
   1e41c:	46e0      	mov	r8, ip
   1e41e:	2100      	movs	r1, #0
   1e420:	9102      	str	r1, [sp, #8]
   1e422:	a90f      	add	r1, sp, #60	; 0x3c
   1e424:	f7ff fd9a 	bl	1df5c <read_sleb128(unsigned char const*, long*)>
   1e428:	a910      	add	r1, sp, #64	; 0x40
   1e42a:	4606      	mov	r6, r0
   1e42c:	f7ff fd96 	bl	1df5c <read_sleb128(unsigned char const*, long*)>
   1e430:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   1e432:	2c00      	cmp	r4, #0
   1e434:	4623      	mov	r3, r4
   1e436:	d014      	beq.n	1e462 <__gxx_personality_v0+0x34a>
   1e438:	dd1e      	ble.n	1e478 <__gxx_personality_v0+0x360>
   1e43a:	9808      	ldr	r0, [sp, #32]
   1e43c:	eba0 0384 	sub.w	r3, r0, r4, lsl #2
   1e440:	6819      	ldr	r1, [r3, #0]
   1e442:	b1a9      	cbz	r1, 1e470 <__gxx_personality_v0+0x358>
   1e444:	18c9      	adds	r1, r1, r3
   1e446:	d013      	beq.n	1e470 <__gxx_personality_v0+0x358>
   1e448:	b16f      	cbz	r7, 1e466 <__gxx_personality_v0+0x34e>
   1e44a:	4638      	mov	r0, r7
   1e44c:	2200      	movs	r2, #0
   1e44e:	ab0b      	add	r3, sp, #44	; 0x2c
   1e450:	f7f5 fb72 	bl	13b38 <__cxa_type_match>
   1e454:	b138      	cbz	r0, 1e466 <__gxx_personality_v0+0x34e>
   1e456:	46c6      	mov	lr, r8
   1e458:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   1e45a:	46b8      	mov	r8, r7
   1e45c:	4677      	mov	r7, lr
   1e45e:	2603      	movs	r6, #3
   1e460:	e6dc      	b.n	1e21c <__gxx_personality_v0+0x104>
   1e462:	2301      	movs	r3, #1
   1e464:	9302      	str	r3, [sp, #8]
   1e466:	9c10      	ldr	r4, [sp, #64]	; 0x40
   1e468:	2c00      	cmp	r4, #0
   1e46a:	d029      	beq.n	1e4c0 <__gxx_personality_v0+0x3a8>
   1e46c:	1930      	adds	r0, r6, r4
   1e46e:	e7d8      	b.n	1e422 <__gxx_personality_v0+0x30a>
   1e470:	4646      	mov	r6, r8
   1e472:	46b8      	mov	r8, r7
   1e474:	4637      	mov	r7, r6
   1e476:	e7f2      	b.n	1e45e <__gxx_personality_v0+0x346>
   1e478:	b1bf      	cbz	r7, 1e4aa <__gxx_personality_v0+0x392>
   1e47a:	9a03      	ldr	r2, [sp, #12]
   1e47c:	b9aa      	cbnz	r2, 1e4aa <__gxx_personality_v0+0x392>
   1e47e:	9a08      	ldr	r2, [sp, #32]
   1e480:	43e1      	mvns	r1, r4
   1e482:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1e484:	eb02 0481 	add.w	r4, r2, r1, lsl #2
   1e488:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   1e48c:	9011      	str	r0, [sp, #68]	; 0x44
   1e48e:	b919      	cbnz	r1, 1e498 <__gxx_personality_v0+0x380>
   1e490:	e011      	b.n	1e4b6 <__gxx_personality_v0+0x39e>
   1e492:	f854 1f04 	ldr.w	r1, [r4, #4]!
   1e496:	b1e1      	cbz	r1, 1e4d2 <__gxx_personality_v0+0x3ba>
   1e498:	4638      	mov	r0, r7
   1e49a:	1861      	adds	r1, r4, r1
   1e49c:	2200      	movs	r2, #0
   1e49e:	ab11      	add	r3, sp, #68	; 0x44
   1e4a0:	f7f5 fb4a 	bl	13b38 <__cxa_type_match>
   1e4a4:	2800      	cmp	r0, #0
   1e4a6:	d0f4      	beq.n	1e492 <__gxx_personality_v0+0x37a>
   1e4a8:	e7dd      	b.n	1e466 <__gxx_personality_v0+0x34e>
   1e4aa:	9a08      	ldr	r2, [sp, #32]
   1e4ac:	43d9      	mvns	r1, r3
   1e4ae:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   1e4b2:	2800      	cmp	r0, #0
   1e4b4:	d1d7      	bne.n	1e466 <__gxx_personality_v0+0x34e>
   1e4b6:	46c4      	mov	ip, r8
   1e4b8:	461c      	mov	r4, r3
   1e4ba:	46b8      	mov	r8, r7
   1e4bc:	4667      	mov	r7, ip
   1e4be:	e7ce      	b.n	1e45e <__gxx_personality_v0+0x346>
   1e4c0:	9802      	ldr	r0, [sp, #8]
   1e4c2:	46c6      	mov	lr, r8
   1e4c4:	46b8      	mov	r8, r7
   1e4c6:	4677      	mov	r7, lr
   1e4c8:	2800      	cmp	r0, #0
   1e4ca:	f43f aee5 	beq.w	1e298 <__gxx_personality_v0+0x180>
   1e4ce:	2602      	movs	r6, #2
   1e4d0:	e6a4      	b.n	1e21c <__gxx_personality_v0+0x104>
   1e4d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1e4d4:	4644      	mov	r4, r8
   1e4d6:	46b8      	mov	r8, r7
   1e4d8:	4627      	mov	r7, r4
   1e4da:	461c      	mov	r4, r3
   1e4dc:	e7bf      	b.n	1e45e <__gxx_personality_v0+0x346>
   1e4de:	f898 6007 	ldrb.w	r6, [r8, #7]
   1e4e2:	2e01      	cmp	r6, #1
   1e4e4:	bf14      	ite	ne
   1e4e6:	f108 0658 	addne.w	r6, r8, #88	; 0x58
   1e4ea:	f858 6c20 	ldreq.w	r6, [r8, #-32]
   1e4ee:	960b      	str	r6, [sp, #44]	; 0x2c
   1e4f0:	e792      	b.n	1e418 <__gxx_personality_v0+0x300>
   1e4f2:	4604      	mov	r4, r0
   1e4f4:	2602      	movs	r6, #2
   1e4f6:	e691      	b.n	1e21c <__gxx_personality_v0+0x104>
   1e4f8:	f7f5 fa12 	bl	13920 <std::unexpected()>
   1e4fc:	f7f5 fbf4 	bl	13ce8 <__cxa_begin_catch>
   1e500:	f7f5 fa02 	bl	13908 <std::terminate()>

0001e504 <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const>:
   1e504:	b570      	push	{r4, r5, r6, lr}
   1e506:	4615      	mov	r5, r2
   1e508:	6806      	ldr	r6, [r0, #0]
   1e50a:	b084      	sub	sp, #16
   1e50c:	2400      	movs	r4, #0
   1e50e:	2210      	movs	r2, #16
   1e510:	466b      	mov	r3, sp
   1e512:	9202      	str	r2, [sp, #8]
   1e514:	9400      	str	r4, [sp, #0]
   1e516:	f88d 4004 	strb.w	r4, [sp, #4]
   1e51a:	9403      	str	r4, [sp, #12]
   1e51c:	69b6      	ldr	r6, [r6, #24]
   1e51e:	682a      	ldr	r2, [r5, #0]
   1e520:	47b0      	blx	r6
   1e522:	f89d 1004 	ldrb.w	r1, [sp, #4]
   1e526:	f001 0306 	and.w	r3, r1, #6
   1e52a:	2b06      	cmp	r3, #6
   1e52c:	bf18      	it	ne
   1e52e:	4620      	movne	r0, r4
   1e530:	d102      	bne.n	1e538 <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const+0x34>
   1e532:	9b00      	ldr	r3, [sp, #0]
   1e534:	2001      	movs	r0, #1
   1e536:	602b      	str	r3, [r5, #0]
   1e538:	b004      	add	sp, #16
   1e53a:	bd70      	pop	{r4, r5, r6, pc}

0001e53c <__cxxabiv1::__class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const>:
   1e53c:	9800      	ldr	r0, [sp, #0]
   1e53e:	4290      	cmp	r0, r2
   1e540:	bf14      	ite	ne
   1e542:	2001      	movne	r0, #1
   1e544:	2006      	moveq	r0, #6
   1e546:	4770      	bx	lr

0001e548 <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>:
   1e548:	b538      	push	{r3, r4, r5, lr}
   1e54a:	4614      	mov	r4, r2
   1e54c:	461d      	mov	r5, r3
   1e54e:	f7f5 fd65 	bl	1401c <std::type_info::operator==(std::type_info const&) const>
   1e552:	b128      	cbz	r0, 1e560 <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const+0x18>
   1e554:	2001      	movs	r0, #1
   1e556:	2108      	movs	r1, #8
   1e558:	2306      	movs	r3, #6
   1e55a:	602c      	str	r4, [r5, #0]
   1e55c:	60e9      	str	r1, [r5, #12]
   1e55e:	712b      	strb	r3, [r5, #4]
   1e560:	bd38      	pop	{r3, r4, r5, pc}
   1e562:	bf00      	nop

0001e564 <__cxxabiv1::__class_type_info::~__class_type_info()>:
   1e564:	4b03      	ldr	r3, [pc, #12]	; (1e574 <__cxxabiv1::__class_type_info::~__class_type_info()+0x10>)
   1e566:	b510      	push	{r4, lr}
   1e568:	4604      	mov	r4, r0
   1e56a:	6003      	str	r3, [r0, #0]
   1e56c:	f7f5 fd40 	bl	13ff0 <std::type_info::~type_info()>
   1e570:	4620      	mov	r0, r4
   1e572:	bd10      	pop	{r4, pc}
   1e574:	0002bf18 	.word	0x0002bf18

0001e578 <__cxxabiv1::__class_type_info::~__class_type_info()>:
   1e578:	b510      	push	{r4, lr}
   1e57a:	4604      	mov	r4, r0
   1e57c:	f7ff fff2 	bl	1e564 <__cxxabiv1::__class_type_info::~__class_type_info()>
   1e580:	4620      	mov	r0, r4
   1e582:	f7f5 f9a9 	bl	138d8 <operator delete(void*)>
   1e586:	4620      	mov	r0, r4
   1e588:	bd10      	pop	{r4, pc}
   1e58a:	bf00      	nop

0001e58c <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const>:
   1e58c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e58e:	b083      	sub	sp, #12
   1e590:	4616      	mov	r6, r2
   1e592:	4605      	mov	r5, r0
   1e594:	9c08      	ldr	r4, [sp, #32]
   1e596:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1e598:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   1e59a:	4294      	cmp	r4, r2
   1e59c:	d00b      	beq.n	1e5b6 <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x2a>
   1e59e:	4628      	mov	r0, r5
   1e5a0:	4619      	mov	r1, r3
   1e5a2:	f7f5 fd3b 	bl	1401c <std::type_info::operator==(std::type_info const&) const>
   1e5a6:	b118      	cbz	r0, 1e5b0 <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x24>
   1e5a8:	2301      	movs	r3, #1
   1e5aa:	603c      	str	r4, [r7, #0]
   1e5ac:	713e      	strb	r6, [r7, #4]
   1e5ae:	71bb      	strb	r3, [r7, #6]
   1e5b0:	2000      	movs	r0, #0
   1e5b2:	b003      	add	sp, #12
   1e5b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e5b6:	9909      	ldr	r1, [sp, #36]	; 0x24
   1e5b8:	9301      	str	r3, [sp, #4]
   1e5ba:	f7f5 fd2f 	bl	1401c <std::type_info::operator==(std::type_info const&) const>
   1e5be:	9b01      	ldr	r3, [sp, #4]
   1e5c0:	2800      	cmp	r0, #0
   1e5c2:	d0ec      	beq.n	1e59e <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x12>
   1e5c4:	717e      	strb	r6, [r7, #5]
   1e5c6:	e7f3      	b.n	1e5b0 <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x24>

0001e5c8 <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const>:
   1e5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e5ca:	4605      	mov	r5, r0
   1e5cc:	460c      	mov	r4, r1
   1e5ce:	4616      	mov	r6, r2
   1e5d0:	461f      	mov	r7, r3
   1e5d2:	f7f5 fd23 	bl	1401c <std::type_info::operator==(std::type_info const&) const>
   1e5d6:	b948      	cbnz	r0, 1e5ec <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const+0x24>
   1e5d8:	2f03      	cmp	r7, #3
   1e5da:	d900      	bls.n	1e5de <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const+0x16>
   1e5dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e5de:	6823      	ldr	r3, [r4, #0]
   1e5e0:	4620      	mov	r0, r4
   1e5e2:	4629      	mov	r1, r5
   1e5e4:	4632      	mov	r2, r6
   1e5e6:	695b      	ldr	r3, [r3, #20]
   1e5e8:	4798      	blx	r3
   1e5ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e5ec:	2001      	movs	r0, #1
   1e5ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e5f0 <__cxa_current_exception_type>:
   1e5f0:	b508      	push	{r3, lr}
   1e5f2:	f7f5 fcf7 	bl	13fe4 <__cxa_get_globals>
   1e5f6:	6800      	ldr	r0, [r0, #0]
   1e5f8:	b130      	cbz	r0, 1e608 <__cxa_current_exception_type+0x18>
   1e5fa:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   1e5fe:	2b01      	cmp	r3, #1
   1e600:	bf04      	itt	eq
   1e602:	6800      	ldreq	r0, [r0, #0]
   1e604:	3878      	subeq	r0, #120	; 0x78
   1e606:	6800      	ldr	r0, [r0, #0]
   1e608:	bd08      	pop	{r3, pc}
   1e60a:	bf00      	nop
   1e60c:	0000      	movs	r0, r0
	...

0001e610 <ceil>:
   1e610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e614:	f3c1 560a 	ubfx	r6, r1, #20, #11
   1e618:	f5a6 747e 	sub.w	r4, r6, #1016	; 0x3f8
   1e61c:	b083      	sub	sp, #12
   1e61e:	3c07      	subs	r4, #7
   1e620:	4680      	mov	r8, r0
   1e622:	2c13      	cmp	r4, #19
   1e624:	4689      	mov	r9, r1
   1e626:	4682      	mov	sl, r0
   1e628:	dc21      	bgt.n	1e66e <ceil+0x5e>
   1e62a:	2c00      	cmp	r4, #0
   1e62c:	db56      	blt.n	1e6dc <ceil+0xcc>
   1e62e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1e632:	f2c0 030f 	movt	r3, #15
   1e636:	fa43 f604 	asr.w	r6, r3, r4
   1e63a:	ea06 0501 	and.w	r5, r6, r1
   1e63e:	4305      	orrs	r5, r0
   1e640:	d010      	beq.n	1e664 <ceil+0x54>
   1e642:	a33d      	add	r3, pc, #244	; (adr r3, 1e738 <ceil+0x128>)
   1e644:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e648:	9101      	str	r1, [sp, #4]
   1e64a:	f7f3 fd17 	bl	1207c <__adddf3>
   1e64e:	2200      	movs	r2, #0
   1e650:	2300      	movs	r3, #0
   1e652:	f006 fba7 	bl	24da4 <__aeabi_dcmpgt>
   1e656:	f8dd c004 	ldr.w	ip, [sp, #4]
   1e65a:	2800      	cmp	r0, #0
   1e65c:	d15f      	bne.n	1e71e <ceil+0x10e>
   1e65e:	46cc      	mov	ip, r9
   1e660:	46e1      	mov	r9, ip
   1e662:	46d0      	mov	r8, sl
   1e664:	4640      	mov	r0, r8
   1e666:	4649      	mov	r1, r9
   1e668:	b003      	add	sp, #12
   1e66a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e66e:	2c33      	cmp	r4, #51	; 0x33
   1e670:	dd09      	ble.n	1e686 <ceil+0x76>
   1e672:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   1e676:	d1f5      	bne.n	1e664 <ceil+0x54>
   1e678:	4602      	mov	r2, r0
   1e67a:	460b      	mov	r3, r1
   1e67c:	f7f3 fcfe 	bl	1207c <__adddf3>
   1e680:	4680      	mov	r8, r0
   1e682:	4689      	mov	r9, r1
   1e684:	e7ee      	b.n	1e664 <ceil+0x54>
   1e686:	f5a6 6382 	sub.w	r3, r6, #1040	; 0x410
   1e68a:	f04f 32ff 	mov.w	r2, #4294967295
   1e68e:	3b03      	subs	r3, #3
   1e690:	fa22 f503 	lsr.w	r5, r2, r3
   1e694:	4205      	tst	r5, r0
   1e696:	d0e5      	beq.n	1e664 <ceil+0x54>
   1e698:	a327      	add	r3, pc, #156	; (adr r3, 1e738 <ceil+0x128>)
   1e69a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e69e:	9101      	str	r1, [sp, #4]
   1e6a0:	f7f3 fcec 	bl	1207c <__adddf3>
   1e6a4:	2200      	movs	r2, #0
   1e6a6:	2300      	movs	r3, #0
   1e6a8:	f006 fb7c 	bl	24da4 <__aeabi_dcmpgt>
   1e6ac:	f8dd c004 	ldr.w	ip, [sp, #4]
   1e6b0:	2800      	cmp	r0, #0
   1e6b2:	d0d4      	beq.n	1e65e <ceil+0x4e>
   1e6b4:	f1bc 0f00 	cmp.w	ip, #0
   1e6b8:	dd0d      	ble.n	1e6d6 <ceil+0xc6>
   1e6ba:	2c14      	cmp	r4, #20
   1e6bc:	d009      	beq.n	1e6d2 <ceil+0xc2>
   1e6be:	f5c6 6686 	rsb	r6, r6, #1072	; 0x430
   1e6c2:	f04f 0a01 	mov.w	sl, #1
   1e6c6:	3603      	adds	r6, #3
   1e6c8:	fa0a fa06 	lsl.w	sl, sl, r6
   1e6cc:	eb1a 0a08 	adds.w	sl, sl, r8
   1e6d0:	d301      	bcc.n	1e6d6 <ceil+0xc6>
   1e6d2:	f10c 0c01 	add.w	ip, ip, #1
   1e6d6:	ea2a 0a05 	bic.w	sl, sl, r5
   1e6da:	e7c1      	b.n	1e660 <ceil+0x50>
   1e6dc:	a316      	add	r3, pc, #88	; (adr r3, 1e738 <ceil+0x128>)
   1e6de:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e6e2:	f7f3 fccb 	bl	1207c <__adddf3>
   1e6e6:	2200      	movs	r2, #0
   1e6e8:	2300      	movs	r3, #0
   1e6ea:	f006 fb5b 	bl	24da4 <__aeabi_dcmpgt>
   1e6ee:	2800      	cmp	r0, #0
   1e6f0:	d0b5      	beq.n	1e65e <ceil+0x4e>
   1e6f2:	f1b9 0f00 	cmp.w	r9, #0
   1e6f6:	bfbc      	itt	lt
   1e6f8:	f04f 0a00 	movlt.w	sl, #0
   1e6fc:	f04f 4c00 	movlt.w	ip, #2147483648	; 0x80000000
   1e700:	dbae      	blt.n	1e660 <ceil+0x50>
   1e702:	ea48 0509 	orr.w	r5, r8, r9
   1e706:	f04f 0c00 	mov.w	ip, #0
   1e70a:	4565      	cmp	r5, ip
   1e70c:	f6c3 7cf0 	movt	ip, #16368	; 0x3ff0
   1e710:	bf0c      	ite	eq
   1e712:	46aa      	moveq	sl, r5
   1e714:	f04f 0a00 	movne.w	sl, #0
   1e718:	bf08      	it	eq
   1e71a:	46ac      	moveq	ip, r5
   1e71c:	e7a0      	b.n	1e660 <ceil+0x50>
   1e71e:	f1bc 0f00 	cmp.w	ip, #0
   1e722:	f04f 0a00 	mov.w	sl, #0
   1e726:	bfc2      	ittt	gt
   1e728:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
   1e72c:	fa43 f404 	asrgt.w	r4, r3, r4
   1e730:	44a4      	addgt	ip, r4
   1e732:	ea2c 0c06 	bic.w	ip, ip, r6
   1e736:	e793      	b.n	1e660 <ceil+0x50>
   1e738:	8800759c 	.word	0x8800759c
   1e73c:	7e37e43c 	.word	0x7e37e43c

0001e740 <sqrt>:
   1e740:	e92d 4fd0 	stmdb	sp!, {r4, r6, r7, r8, r9, sl, fp, lr}
   1e744:	b08a      	sub	sp, #40	; 0x28
   1e746:	4606      	mov	r6, r0
   1e748:	460f      	mov	r7, r1
   1e74a:	f000 f84f 	bl	1e7ec <__ieee754_sqrt>
   1e74e:	f240 0424 	movw	r4, #36	; 0x24
   1e752:	f2c1 0400 	movt	r4, #4096	; 0x1000
   1e756:	f994 3000 	ldrsb.w	r3, [r4]
   1e75a:	3301      	adds	r3, #1
   1e75c:	4680      	mov	r8, r0
   1e75e:	4689      	mov	r9, r1
   1e760:	d031      	beq.n	1e7c6 <sqrt+0x86>
   1e762:	4630      	mov	r0, r6
   1e764:	4639      	mov	r1, r7
   1e766:	f000 f91d 	bl	1e9a4 <__fpclassifyd>
   1e76a:	2800      	cmp	r0, #0
   1e76c:	d02b      	beq.n	1e7c6 <sqrt+0x86>
   1e76e:	f04f 0a00 	mov.w	sl, #0
   1e772:	f04f 0b00 	mov.w	fp, #0
   1e776:	4630      	mov	r0, r6
   1e778:	4639      	mov	r1, r7
   1e77a:	4652      	mov	r2, sl
   1e77c:	465b      	mov	r3, fp
   1e77e:	f006 faf3 	bl	24d68 <__aeabi_dcmplt>
   1e782:	b300      	cbz	r0, 1e7c6 <sqrt+0x86>
   1e784:	7824      	ldrb	r4, [r4, #0]
   1e786:	f64b 7370 	movw	r3, #49008	; 0xbf70
   1e78a:	f2c0 0302 	movt	r3, #2
   1e78e:	2201      	movs	r2, #1
   1e790:	e9cd 6704 	strd	r6, r7, [sp, #16]
   1e794:	e88d 000c 	stmia.w	sp, {r2, r3}
   1e798:	2300      	movs	r3, #0
   1e79a:	e9cd 6702 	strd	r6, r7, [sp, #8]
   1e79e:	9308      	str	r3, [sp, #32]
   1e7a0:	b1b4      	cbz	r4, 1e7d0 <sqrt+0x90>
   1e7a2:	4650      	mov	r0, sl
   1e7a4:	4659      	mov	r1, fp
   1e7a6:	4652      	mov	r2, sl
   1e7a8:	465b      	mov	r3, fp
   1e7aa:	f7f3 ff43 	bl	12634 <__aeabi_ddiv>
   1e7ae:	2c02      	cmp	r4, #2
   1e7b0:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1e7b4:	d10e      	bne.n	1e7d4 <sqrt+0x94>
   1e7b6:	f000 f953 	bl	1ea60 <__errno>
   1e7ba:	2321      	movs	r3, #33	; 0x21
   1e7bc:	6003      	str	r3, [r0, #0]
   1e7be:	9b08      	ldr	r3, [sp, #32]
   1e7c0:	b973      	cbnz	r3, 1e7e0 <sqrt+0xa0>
   1e7c2:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
   1e7c6:	4640      	mov	r0, r8
   1e7c8:	4649      	mov	r1, r9
   1e7ca:	b00a      	add	sp, #40	; 0x28
   1e7cc:	e8bd 8fd0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, sl, fp, pc}
   1e7d0:	e9cd ab06 	strd	sl, fp, [sp, #24]
   1e7d4:	4668      	mov	r0, sp
   1e7d6:	f000 f92f 	bl	1ea38 <matherr>
   1e7da:	2800      	cmp	r0, #0
   1e7dc:	d1ef      	bne.n	1e7be <sqrt+0x7e>
   1e7de:	e7ea      	b.n	1e7b6 <sqrt+0x76>
   1e7e0:	f000 f93e 	bl	1ea60 <__errno>
   1e7e4:	9b08      	ldr	r3, [sp, #32]
   1e7e6:	6003      	str	r3, [r0, #0]
   1e7e8:	e7eb      	b.n	1e7c2 <sqrt+0x82>
   1e7ea:	bf00      	nop

0001e7ec <__ieee754_sqrt>:
   1e7ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e7f0:	2400      	movs	r4, #0
   1e7f2:	4625      	mov	r5, r4
   1e7f4:	f6c7 74f0 	movt	r4, #32752	; 0x7ff0
   1e7f8:	f6c7 75f0 	movt	r5, #32752	; 0x7ff0
   1e7fc:	400c      	ands	r4, r1
   1e7fe:	42ac      	cmp	r4, r5
   1e800:	4606      	mov	r6, r0
   1e802:	460f      	mov	r7, r1
   1e804:	4689      	mov	r9, r1
   1e806:	460b      	mov	r3, r1
   1e808:	4602      	mov	r2, r0
   1e80a:	f000 80ab 	beq.w	1e964 <__ieee754_sqrt+0x178>
   1e80e:	2900      	cmp	r1, #0
   1e810:	dd7f      	ble.n	1e912 <__ieee754_sqrt+0x126>
   1e812:	1509      	asrs	r1, r1, #20
   1e814:	f000 8088 	beq.w	1e928 <__ieee754_sqrt+0x13c>
   1e818:	f5a1 7c7e 	sub.w	ip, r1, #1016	; 0x3f8
   1e81c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1e820:	07c9      	lsls	r1, r1, #31
   1e822:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
   1e826:	f1ac 0c07 	sub.w	ip, ip, #7
   1e82a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1e82e:	d562      	bpl.n	1e8f6 <__ieee754_sqrt+0x10a>
   1e830:	0fd1      	lsrs	r1, r2, #31
   1e832:	2700      	movs	r7, #0
   1e834:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   1e838:	ea4f 0c6c 	mov.w	ip, ip, asr #1
   1e83c:	0052      	lsls	r2, r2, #1
   1e83e:	2416      	movs	r4, #22
   1e840:	4638      	mov	r0, r7
   1e842:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   1e846:	1845      	adds	r5, r0, r1
   1e848:	0fd6      	lsrs	r6, r2, #31
   1e84a:	429d      	cmp	r5, r3
   1e84c:	ea4f 0242 	mov.w	r2, r2, lsl #1
   1e850:	bfde      	ittt	le
   1e852:	ebc5 0303 	rsble	r3, r5, r3
   1e856:	1868      	addle	r0, r5, r1
   1e858:	187f      	addle	r7, r7, r1
   1e85a:	0849      	lsrs	r1, r1, #1
   1e85c:	3c01      	subs	r4, #1
   1e85e:	eb06 0343 	add.w	r3, r6, r3, lsl #1
   1e862:	d1f0      	bne.n	1e846 <__ieee754_sqrt+0x5a>
   1e864:	2620      	movs	r6, #32
   1e866:	46a0      	mov	r8, r4
   1e868:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   1e86c:	4298      	cmp	r0, r3
   1e86e:	eb01 0508 	add.w	r5, r1, r8
   1e872:	db0e      	blt.n	1e892 <__ieee754_sqrt+0xa6>
   1e874:	4283      	cmp	r3, r0
   1e876:	bf14      	ite	ne
   1e878:	f04f 0900 	movne.w	r9, #0
   1e87c:	f04f 0901 	moveq.w	r9, #1
   1e880:	4295      	cmp	r5, r2
   1e882:	bf8c      	ite	hi
   1e884:	f04f 0900 	movhi.w	r9, #0
   1e888:	f009 0901 	andls.w	r9, r9, #1
   1e88c:	f1b9 0f00 	cmp.w	r9, #0
   1e890:	d00e      	beq.n	1e8b0 <__ieee754_sqrt+0xc4>
   1e892:	f005 4900 	and.w	r9, r5, #2147483648	; 0x80000000
   1e896:	eb05 0801 	add.w	r8, r5, r1
   1e89a:	f1b9 4f00 	cmp.w	r9, #2147483648	; 0x80000000
   1e89e:	d023      	beq.n	1e8e8 <__ieee754_sqrt+0xfc>
   1e8a0:	4681      	mov	r9, r0
   1e8a2:	1a1b      	subs	r3, r3, r0
   1e8a4:	4295      	cmp	r5, r2
   1e8a6:	bf88      	it	hi
   1e8a8:	3b01      	subhi	r3, #1
   1e8aa:	1b52      	subs	r2, r2, r5
   1e8ac:	1864      	adds	r4, r4, r1
   1e8ae:	4648      	mov	r0, r9
   1e8b0:	0fd5      	lsrs	r5, r2, #31
   1e8b2:	0849      	lsrs	r1, r1, #1
   1e8b4:	0052      	lsls	r2, r2, #1
   1e8b6:	3e01      	subs	r6, #1
   1e8b8:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   1e8bc:	d1d6      	bne.n	1e86c <__ieee754_sqrt+0x80>
   1e8be:	4313      	orrs	r3, r2
   1e8c0:	d11e      	bne.n	1e900 <__ieee754_sqrt+0x114>
   1e8c2:	0864      	lsrs	r4, r4, #1
   1e8c4:	107b      	asrs	r3, r7, #1
   1e8c6:	07fa      	lsls	r2, r7, #31
   1e8c8:	f103 537e 	add.w	r3, r3, #1065353216	; 0x3f800000
   1e8cc:	bf48      	it	mi
   1e8ce:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
   1e8d2:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
   1e8d6:	ea4f 5c0c 	mov.w	ip, ip, lsl #20
   1e8da:	eb0c 0703 	add.w	r7, ip, r3
   1e8de:	4626      	mov	r6, r4
   1e8e0:	4630      	mov	r0, r6
   1e8e2:	4639      	mov	r1, r7
   1e8e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e8e8:	f1b8 0f00 	cmp.w	r8, #0
   1e8ec:	bfa8      	it	ge
   1e8ee:	f100 0901 	addge.w	r9, r0, #1
   1e8f2:	dad6      	bge.n	1e8a2 <__ieee754_sqrt+0xb6>
   1e8f4:	e7d4      	b.n	1e8a0 <__ieee754_sqrt+0xb4>
   1e8f6:	0fd1      	lsrs	r1, r2, #31
   1e8f8:	0052      	lsls	r2, r2, #1
   1e8fa:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   1e8fe:	e797      	b.n	1e830 <__ieee754_sqrt+0x44>
   1e900:	1c61      	adds	r1, r4, #1
   1e902:	bf1c      	itt	ne
   1e904:	f004 0301 	andne.w	r3, r4, #1
   1e908:	191c      	addne	r4, r3, r4
   1e90a:	d1da      	bne.n	1e8c2 <__ieee754_sqrt+0xd6>
   1e90c:	3701      	adds	r7, #1
   1e90e:	4634      	mov	r4, r6
   1e910:	e7d8      	b.n	1e8c4 <__ieee754_sqrt+0xd8>
   1e912:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
   1e916:	4304      	orrs	r4, r0
   1e918:	d0e2      	beq.n	1e8e0 <__ieee754_sqrt+0xf4>
   1e91a:	2900      	cmp	r1, #0
   1e91c:	d136      	bne.n	1e98c <__ieee754_sqrt+0x1a0>
   1e91e:	0ad3      	lsrs	r3, r2, #11
   1e920:	3915      	subs	r1, #21
   1e922:	0552      	lsls	r2, r2, #21
   1e924:	2b00      	cmp	r3, #0
   1e926:	d0fa      	beq.n	1e91e <__ieee754_sqrt+0x132>
   1e928:	f413 1080 	ands.w	r0, r3, #1048576	; 0x100000
   1e92c:	d12a      	bne.n	1e984 <__ieee754_sqrt+0x198>
   1e92e:	005b      	lsls	r3, r3, #1
   1e930:	3001      	adds	r0, #1
   1e932:	02dc      	lsls	r4, r3, #11
   1e934:	d5fb      	bpl.n	1e92e <__ieee754_sqrt+0x142>
   1e936:	f1c0 0501 	rsb	r5, r0, #1
   1e93a:	f1c0 0420 	rsb	r4, r0, #32
   1e93e:	fa22 f404 	lsr.w	r4, r2, r4
   1e942:	1949      	adds	r1, r1, r5
   1e944:	4323      	orrs	r3, r4
   1e946:	f5a1 7c7e 	sub.w	ip, r1, #1016	; 0x3f8
   1e94a:	4082      	lsls	r2, r0
   1e94c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1e950:	07c9      	lsls	r1, r1, #31
   1e952:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
   1e956:	f1ac 0c07 	sub.w	ip, ip, #7
   1e95a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1e95e:	f53f af67 	bmi.w	1e830 <__ieee754_sqrt+0x44>
   1e962:	e7c8      	b.n	1e8f6 <__ieee754_sqrt+0x10a>
   1e964:	4602      	mov	r2, r0
   1e966:	460b      	mov	r3, r1
   1e968:	f7f3 fd3a 	bl	123e0 <__aeabi_dmul>
   1e96c:	4602      	mov	r2, r0
   1e96e:	460b      	mov	r3, r1
   1e970:	4630      	mov	r0, r6
   1e972:	4639      	mov	r1, r7
   1e974:	f7f3 fb82 	bl	1207c <__adddf3>
   1e978:	4606      	mov	r6, r0
   1e97a:	460f      	mov	r7, r1
   1e97c:	4630      	mov	r0, r6
   1e97e:	4639      	mov	r1, r7
   1e980:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e984:	2420      	movs	r4, #32
   1e986:	2501      	movs	r5, #1
   1e988:	2000      	movs	r0, #0
   1e98a:	e7d8      	b.n	1e93e <__ieee754_sqrt+0x152>
   1e98c:	4602      	mov	r2, r0
   1e98e:	460b      	mov	r3, r1
   1e990:	f7f3 fb72 	bl	12078 <__aeabi_dsub>
   1e994:	4602      	mov	r2, r0
   1e996:	460b      	mov	r3, r1
   1e998:	f7f3 fe4c 	bl	12634 <__aeabi_ddiv>
   1e99c:	4606      	mov	r6, r0
   1e99e:	460f      	mov	r7, r1
   1e9a0:	e79e      	b.n	1e8e0 <__ieee754_sqrt+0xf4>
   1e9a2:	bf00      	nop

0001e9a4 <__fpclassifyd>:
   1e9a4:	460b      	mov	r3, r1
   1e9a6:	ea50 0103 	orrs.w	r1, r0, r3
   1e9aa:	b410      	push	{r4}
   1e9ac:	d102      	bne.n	1e9b4 <__fpclassifyd+0x10>
   1e9ae:	2002      	movs	r0, #2
   1e9b0:	bc10      	pop	{r4}
   1e9b2:	4770      	bx	lr
   1e9b4:	f1d0 0201 	rsbs	r2, r0, #1
   1e9b8:	bf38      	it	cc
   1e9ba:	2200      	movcc	r2, #0
   1e9bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1e9c0:	bf14      	ite	ne
   1e9c2:	2100      	movne	r1, #0
   1e9c4:	f002 0101 	andeq.w	r1, r2, #1
   1e9c8:	2900      	cmp	r1, #0
   1e9ca:	d1f0      	bne.n	1e9ae <__fpclassifyd+0xa>
   1e9cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1e9d0:	f5a3 1080 	sub.w	r0, r3, #1048576	; 0x100000
   1e9d4:	f6c7 71df 	movt	r1, #32735	; 0x7fdf
   1e9d8:	f103 44fe 	add.w	r4, r3, #2130706432	; 0x7f000000
   1e9dc:	4288      	cmp	r0, r1
   1e9de:	f504 0470 	add.w	r4, r4, #15728640	; 0xf00000
   1e9e2:	bf8c      	ite	hi
   1e9e4:	2000      	movhi	r0, #0
   1e9e6:	2001      	movls	r0, #1
   1e9e8:	428c      	cmp	r4, r1
   1e9ea:	bf8c      	ite	hi
   1e9ec:	4601      	movhi	r1, r0
   1e9ee:	f040 0101 	orrls.w	r1, r0, #1
   1e9f2:	b109      	cbz	r1, 1e9f8 <__fpclassifyd+0x54>
   1e9f4:	2004      	movs	r0, #4
   1e9f6:	e7db      	b.n	1e9b0 <__fpclassifyd+0xc>
   1e9f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1e9fc:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   1ea00:	bf2c      	ite	cs
   1ea02:	2000      	movcs	r0, #0
   1ea04:	2001      	movcc	r0, #1
   1ea06:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1ea0a:	bf2c      	ite	cs
   1ea0c:	4601      	movcs	r1, r0
   1ea0e:	f040 0101 	orrcc.w	r1, r0, #1
   1ea12:	b109      	cbz	r1, 1ea18 <__fpclassifyd+0x74>
   1ea14:	2003      	movs	r0, #3
   1ea16:	e7cb      	b.n	1e9b0 <__fpclassifyd+0xc>
   1ea18:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
   1ea1c:	f6c7 71f0 	movt	r1, #32752	; 0x7ff0
   1ea20:	bf14      	ite	ne
   1ea22:	2000      	movne	r0, #0
   1ea24:	2001      	moveq	r0, #1
   1ea26:	428b      	cmp	r3, r1
   1ea28:	bf14      	ite	ne
   1ea2a:	4603      	movne	r3, r0
   1ea2c:	f040 0301 	orreq.w	r3, r0, #1
   1ea30:	ea02 0003 	and.w	r0, r2, r3
   1ea34:	e7bc      	b.n	1e9b0 <__fpclassifyd+0xc>
   1ea36:	bf00      	nop

0001ea38 <matherr>:
   1ea38:	2000      	movs	r0, #0
   1ea3a:	4770      	bx	lr

0001ea3c <abort>:
   1ea3c:	b508      	push	{r3, lr}
   1ea3e:	2006      	movs	r0, #6
   1ea40:	f001 fa5e 	bl	1ff00 <raise>
   1ea44:	2001      	movs	r0, #1
   1ea46:	f7e7 f917 	bl	5c78 <_exit>
   1ea4a:	bf00      	nop

0001ea4c <__cxa_atexit>:
   1ea4c:	b430      	push	{r4, r5}
   1ea4e:	4605      	mov	r5, r0
   1ea50:	460c      	mov	r4, r1
   1ea52:	4613      	mov	r3, r2
   1ea54:	2002      	movs	r0, #2
   1ea56:	4629      	mov	r1, r5
   1ea58:	4622      	mov	r2, r4
   1ea5a:	bc30      	pop	{r4, r5}
   1ea5c:	f003 b91a 	b.w	21c94 <__register_exitproc>

0001ea60 <__errno>:
   1ea60:	f240 0328 	movw	r3, #40	; 0x28
   1ea64:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1ea68:	6818      	ldr	r0, [r3, #0]
   1ea6a:	4770      	bx	lr

0001ea6c <_fputc_r>:
   1ea6c:	b510      	push	{r4, lr}
   1ea6e:	4604      	mov	r4, r0
   1ea70:	b082      	sub	sp, #8
   1ea72:	b108      	cbz	r0, 1ea78 <_fputc_r+0xc>
   1ea74:	6983      	ldr	r3, [r0, #24]
   1ea76:	b1e3      	cbz	r3, 1eab2 <_fputc_r+0x46>
   1ea78:	f24c 1338 	movw	r3, #49464	; 0xc138
   1ea7c:	f2c0 0302 	movt	r3, #2
   1ea80:	429a      	cmp	r2, r3
   1ea82:	bf08      	it	eq
   1ea84:	6862      	ldreq	r2, [r4, #4]
   1ea86:	d00e      	beq.n	1eaa6 <_fputc_r+0x3a>
   1ea88:	f24c 1318 	movw	r3, #49432	; 0xc118
   1ea8c:	f2c0 0302 	movt	r3, #2
   1ea90:	429a      	cmp	r2, r3
   1ea92:	bf08      	it	eq
   1ea94:	68a2      	ldreq	r2, [r4, #8]
   1ea96:	d006      	beq.n	1eaa6 <_fputc_r+0x3a>
   1ea98:	f24c 03f8 	movw	r3, #49400	; 0xc0f8
   1ea9c:	f2c0 0302 	movt	r3, #2
   1eaa0:	429a      	cmp	r2, r3
   1eaa2:	bf08      	it	eq
   1eaa4:	68e2      	ldreq	r2, [r4, #12]
   1eaa6:	4620      	mov	r0, r4
   1eaa8:	b002      	add	sp, #8
   1eaaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1eaae:	f000 befb 	b.w	1f8a8 <_putc_r>
   1eab2:	9101      	str	r1, [sp, #4]
   1eab4:	9200      	str	r2, [sp, #0]
   1eab6:	f004 fab5 	bl	23024 <__sinit>
   1eaba:	9a00      	ldr	r2, [sp, #0]
   1eabc:	9901      	ldr	r1, [sp, #4]
   1eabe:	e7db      	b.n	1ea78 <_fputc_r+0xc>

0001eac0 <fputc>:
   1eac0:	b570      	push	{r4, r5, r6, lr}
   1eac2:	f240 0528 	movw	r5, #40	; 0x28
   1eac6:	f2c1 0500 	movt	r5, #4096	; 0x1000
   1eaca:	4606      	mov	r6, r0
   1eacc:	460c      	mov	r4, r1
   1eace:	6828      	ldr	r0, [r5, #0]
   1ead0:	b108      	cbz	r0, 1ead6 <fputc+0x16>
   1ead2:	6983      	ldr	r3, [r0, #24]
   1ead4:	b1e3      	cbz	r3, 1eb10 <fputc+0x50>
   1ead6:	f24c 1338 	movw	r3, #49464	; 0xc138
   1eada:	f2c0 0302 	movt	r3, #2
   1eade:	429c      	cmp	r4, r3
   1eae0:	bf08      	it	eq
   1eae2:	6844      	ldreq	r4, [r0, #4]
   1eae4:	d00e      	beq.n	1eb04 <fputc+0x44>
   1eae6:	f24c 1318 	movw	r3, #49432	; 0xc118
   1eaea:	f2c0 0302 	movt	r3, #2
   1eaee:	429c      	cmp	r4, r3
   1eaf0:	bf08      	it	eq
   1eaf2:	6884      	ldreq	r4, [r0, #8]
   1eaf4:	d006      	beq.n	1eb04 <fputc+0x44>
   1eaf6:	f24c 03f8 	movw	r3, #49400	; 0xc0f8
   1eafa:	f2c0 0302 	movt	r3, #2
   1eafe:	429c      	cmp	r4, r3
   1eb00:	bf08      	it	eq
   1eb02:	68c4      	ldreq	r4, [r0, #12]
   1eb04:	4631      	mov	r1, r6
   1eb06:	4622      	mov	r2, r4
   1eb08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1eb0c:	f000 becc 	b.w	1f8a8 <_putc_r>
   1eb10:	f004 fa88 	bl	23024 <__sinit>
   1eb14:	6828      	ldr	r0, [r5, #0]
   1eb16:	e7de      	b.n	1ead6 <fputc+0x16>

0001eb18 <_fputs_r>:
   1eb18:	b530      	push	{r4, r5, lr}
   1eb1a:	b087      	sub	sp, #28
   1eb1c:	4604      	mov	r4, r0
   1eb1e:	4608      	mov	r0, r1
   1eb20:	4615      	mov	r5, r2
   1eb22:	9104      	str	r1, [sp, #16]
   1eb24:	f001 fc56 	bl	203d4 <strlen>
   1eb28:	ab04      	add	r3, sp, #16
   1eb2a:	9301      	str	r3, [sp, #4]
   1eb2c:	2301      	movs	r3, #1
   1eb2e:	9302      	str	r3, [sp, #8]
   1eb30:	9003      	str	r0, [sp, #12]
   1eb32:	9005      	str	r0, [sp, #20]
   1eb34:	b114      	cbz	r4, 1eb3c <_fputs_r+0x24>
   1eb36:	69a3      	ldr	r3, [r4, #24]
   1eb38:	2b00      	cmp	r3, #0
   1eb3a:	d028      	beq.n	1eb8e <_fputs_r+0x76>
   1eb3c:	f24c 1338 	movw	r3, #49464	; 0xc138
   1eb40:	f2c0 0302 	movt	r3, #2
   1eb44:	429d      	cmp	r5, r3
   1eb46:	bf08      	it	eq
   1eb48:	6865      	ldreq	r5, [r4, #4]
   1eb4a:	d00e      	beq.n	1eb6a <_fputs_r+0x52>
   1eb4c:	f24c 1318 	movw	r3, #49432	; 0xc118
   1eb50:	f2c0 0302 	movt	r3, #2
   1eb54:	429d      	cmp	r5, r3
   1eb56:	bf08      	it	eq
   1eb58:	68a5      	ldreq	r5, [r4, #8]
   1eb5a:	d006      	beq.n	1eb6a <_fputs_r+0x52>
   1eb5c:	f24c 03f8 	movw	r3, #49400	; 0xc0f8
   1eb60:	f2c0 0302 	movt	r3, #2
   1eb64:	429d      	cmp	r5, r3
   1eb66:	bf08      	it	eq
   1eb68:	68e5      	ldreq	r5, [r4, #12]
   1eb6a:	89ab      	ldrh	r3, [r5, #12]
   1eb6c:	4620      	mov	r0, r4
   1eb6e:	4629      	mov	r1, r5
   1eb70:	049a      	lsls	r2, r3, #18
   1eb72:	bf5f      	itttt	pl
   1eb74:	f443 5300 	orrpl.w	r3, r3, #8192	; 0x2000
   1eb78:	81ab      	strhpl	r3, [r5, #12]
   1eb7a:	6e6a      	ldrpl	r2, [r5, #100]	; 0x64
   1eb7c:	f422 5300 	bicpl.w	r3, r2, #8192	; 0x2000
   1eb80:	aa01      	add	r2, sp, #4
   1eb82:	bf58      	it	pl
   1eb84:	666b      	strpl	r3, [r5, #100]	; 0x64
   1eb86:	f000 f811 	bl	1ebac <__sfvwrite_r>
   1eb8a:	b007      	add	sp, #28
   1eb8c:	bd30      	pop	{r4, r5, pc}
   1eb8e:	4620      	mov	r0, r4
   1eb90:	f004 fa48 	bl	23024 <__sinit>
   1eb94:	e7d2      	b.n	1eb3c <_fputs_r+0x24>
   1eb96:	bf00      	nop

0001eb98 <fputs>:
   1eb98:	f240 0328 	movw	r3, #40	; 0x28
   1eb9c:	460a      	mov	r2, r1
   1eb9e:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1eba2:	4601      	mov	r1, r0
   1eba4:	6818      	ldr	r0, [r3, #0]
   1eba6:	f7ff bfb7 	b.w	1eb18 <_fputs_r>
   1ebaa:	bf00      	nop

0001ebac <__sfvwrite_r>:
   1ebac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ebb0:	b085      	sub	sp, #20
   1ebb2:	4690      	mov	r8, r2
   1ebb4:	460c      	mov	r4, r1
   1ebb6:	9001      	str	r0, [sp, #4]
   1ebb8:	6890      	ldr	r0, [r2, #8]
   1ebba:	2800      	cmp	r0, #0
   1ebbc:	d04b      	beq.n	1ec56 <__sfvwrite_r+0xaa>
   1ebbe:	898b      	ldrh	r3, [r1, #12]
   1ebc0:	0718      	lsls	r0, r3, #28
   1ebc2:	d569      	bpl.n	1ec98 <__sfvwrite_r+0xec>
   1ebc4:	690a      	ldr	r2, [r1, #16]
   1ebc6:	2a00      	cmp	r2, #0
   1ebc8:	d066      	beq.n	1ec98 <__sfvwrite_r+0xec>
   1ebca:	f013 0b02 	ands.w	fp, r3, #2
   1ebce:	f8d8 5000 	ldr.w	r5, [r8]
   1ebd2:	bf1c      	itt	ne
   1ebd4:	f04f 0900 	movne.w	r9, #0
   1ebd8:	464f      	movne	r7, r9
   1ebda:	d143      	bne.n	1ec64 <__sfvwrite_r+0xb8>
   1ebdc:	f013 0901 	ands.w	r9, r3, #1
   1ebe0:	bf1e      	ittt	ne
   1ebe2:	46dc      	movne	ip, fp
   1ebe4:	46da      	movne	sl, fp
   1ebe6:	465f      	movne	r7, fp
   1ebe8:	f000 80b3 	beq.w	1ed52 <__sfvwrite_r+0x1a6>
   1ebec:	2f00      	cmp	r7, #0
   1ebee:	d063      	beq.n	1ecb8 <__sfvwrite_r+0x10c>
   1ebf0:	f1bc 0f00 	cmp.w	ip, #0
   1ebf4:	f000 8081 	beq.w	1ecfa <__sfvwrite_r+0x14e>
   1ebf8:	6922      	ldr	r2, [r4, #16]
   1ebfa:	45bb      	cmp	fp, r7
   1ebfc:	bf34      	ite	cc
   1ebfe:	46d9      	movcc	r9, fp
   1ec00:	46b9      	movcs	r9, r7
   1ec02:	6820      	ldr	r0, [r4, #0]
   1ec04:	6963      	ldr	r3, [r4, #20]
   1ec06:	68a6      	ldr	r6, [r4, #8]
   1ec08:	4290      	cmp	r0, r2
   1ec0a:	bf94      	ite	ls
   1ec0c:	2200      	movls	r2, #0
   1ec0e:	2201      	movhi	r2, #1
   1ec10:	199e      	adds	r6, r3, r6
   1ec12:	45b1      	cmp	r9, r6
   1ec14:	bfd4      	ite	le
   1ec16:	2200      	movle	r2, #0
   1ec18:	f002 0201 	andgt.w	r2, r2, #1
   1ec1c:	2a00      	cmp	r2, #0
   1ec1e:	d17f      	bne.n	1ed20 <__sfvwrite_r+0x174>
   1ec20:	4599      	cmp	r9, r3
   1ec22:	db50      	blt.n	1ecc6 <__sfvwrite_r+0x11a>
   1ec24:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1ec26:	4652      	mov	r2, sl
   1ec28:	6a21      	ldr	r1, [r4, #32]
   1ec2a:	9801      	ldr	r0, [sp, #4]
   1ec2c:	f8cd c000 	str.w	ip, [sp]
   1ec30:	47b0      	blx	r6
   1ec32:	f8dd c000 	ldr.w	ip, [sp]
   1ec36:	1e06      	subs	r6, r0, #0
   1ec38:	f340 8084 	ble.w	1ed44 <__sfvwrite_r+0x198>
   1ec3c:	ebbb 0b06 	subs.w	fp, fp, r6
   1ec40:	d054      	beq.n	1ecec <__sfvwrite_r+0x140>
   1ec42:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1ec46:	44b2      	add	sl, r6
   1ec48:	1bbf      	subs	r7, r7, r6
   1ec4a:	1b9e      	subs	r6, r3, r6
   1ec4c:	f8c8 6008 	str.w	r6, [r8, #8]
   1ec50:	2e00      	cmp	r6, #0
   1ec52:	d1cb      	bne.n	1ebec <__sfvwrite_r+0x40>
   1ec54:	4630      	mov	r0, r6
   1ec56:	b005      	add	sp, #20
   1ec58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ec5c:	f8d5 9000 	ldr.w	r9, [r5]
   1ec60:	686f      	ldr	r7, [r5, #4]
   1ec62:	3508      	adds	r5, #8
   1ec64:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
   1ec68:	bf34      	ite	cc
   1ec6a:	463b      	movcc	r3, r7
   1ec6c:	f44f 6380 	movcs.w	r3, #1024	; 0x400
   1ec70:	464a      	mov	r2, r9
   1ec72:	9801      	ldr	r0, [sp, #4]
   1ec74:	2f00      	cmp	r7, #0
   1ec76:	d0f1      	beq.n	1ec5c <__sfvwrite_r+0xb0>
   1ec78:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1ec7a:	6a21      	ldr	r1, [r4, #32]
   1ec7c:	47b0      	blx	r6
   1ec7e:	2800      	cmp	r0, #0
   1ec80:	4481      	add	r9, r0
   1ec82:	ebc0 0707 	rsb	r7, r0, r7
   1ec86:	dd5d      	ble.n	1ed44 <__sfvwrite_r+0x198>
   1ec88:	f8d8 6008 	ldr.w	r6, [r8, #8]
   1ec8c:	1a30      	subs	r0, r6, r0
   1ec8e:	f8c8 0008 	str.w	r0, [r8, #8]
   1ec92:	2800      	cmp	r0, #0
   1ec94:	d1e6      	bne.n	1ec64 <__sfvwrite_r+0xb8>
   1ec96:	e7de      	b.n	1ec56 <__sfvwrite_r+0xaa>
   1ec98:	9801      	ldr	r0, [sp, #4]
   1ec9a:	4621      	mov	r1, r4
   1ec9c:	f002 ff7e 	bl	21b9c <__swsetup_r>
   1eca0:	89a3      	ldrh	r3, [r4, #12]
   1eca2:	2800      	cmp	r0, #0
   1eca4:	d091      	beq.n	1ebca <__sfvwrite_r+0x1e>
   1eca6:	9901      	ldr	r1, [sp, #4]
   1eca8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1ecac:	f04f 30ff 	mov.w	r0, #4294967295
   1ecb0:	81a3      	strh	r3, [r4, #12]
   1ecb2:	2309      	movs	r3, #9
   1ecb4:	600b      	str	r3, [r1, #0]
   1ecb6:	e7ce      	b.n	1ec56 <__sfvwrite_r+0xaa>
   1ecb8:	f8d5 a000 	ldr.w	sl, [r5]
   1ecbc:	f04f 0c00 	mov.w	ip, #0
   1ecc0:	686f      	ldr	r7, [r5, #4]
   1ecc2:	3508      	adds	r5, #8
   1ecc4:	e792      	b.n	1ebec <__sfvwrite_r+0x40>
   1ecc6:	464a      	mov	r2, r9
   1ecc8:	4651      	mov	r1, sl
   1ecca:	464e      	mov	r6, r9
   1eccc:	f8cd c000 	str.w	ip, [sp]
   1ecd0:	f000 fd42 	bl	1f758 <memmove>
   1ecd4:	68a2      	ldr	r2, [r4, #8]
   1ecd6:	6823      	ldr	r3, [r4, #0]
   1ecd8:	ebbb 0b06 	subs.w	fp, fp, r6
   1ecdc:	ebc9 0202 	rsb	r2, r9, r2
   1ece0:	f8dd c000 	ldr.w	ip, [sp]
   1ece4:	444b      	add	r3, r9
   1ece6:	60a2      	str	r2, [r4, #8]
   1ece8:	6023      	str	r3, [r4, #0]
   1ecea:	d1aa      	bne.n	1ec42 <__sfvwrite_r+0x96>
   1ecec:	9801      	ldr	r0, [sp, #4]
   1ecee:	4621      	mov	r1, r4
   1ecf0:	f004 f856 	bl	22da0 <_fflush_r>
   1ecf4:	bb30      	cbnz	r0, 1ed44 <__sfvwrite_r+0x198>
   1ecf6:	46dc      	mov	ip, fp
   1ecf8:	e7a3      	b.n	1ec42 <__sfvwrite_r+0x96>
   1ecfa:	4650      	mov	r0, sl
   1ecfc:	210a      	movs	r1, #10
   1ecfe:	463a      	mov	r2, r7
   1ed00:	f107 0b01 	add.w	fp, r7, #1
   1ed04:	f000 fc3e 	bl	1f584 <memchr>
   1ed08:	f04f 0c01 	mov.w	ip, #1
   1ed0c:	2800      	cmp	r0, #0
   1ed0e:	f43f af73 	beq.w	1ebf8 <__sfvwrite_r+0x4c>
   1ed12:	f100 0b01 	add.w	fp, r0, #1
   1ed16:	f04f 0c01 	mov.w	ip, #1
   1ed1a:	ebca 0b0b 	rsb	fp, sl, fp
   1ed1e:	e76b      	b.n	1ebf8 <__sfvwrite_r+0x4c>
   1ed20:	4651      	mov	r1, sl
   1ed22:	4632      	mov	r2, r6
   1ed24:	f8cd c000 	str.w	ip, [sp]
   1ed28:	f000 fd16 	bl	1f758 <memmove>
   1ed2c:	6823      	ldr	r3, [r4, #0]
   1ed2e:	4621      	mov	r1, r4
   1ed30:	9801      	ldr	r0, [sp, #4]
   1ed32:	199b      	adds	r3, r3, r6
   1ed34:	6023      	str	r3, [r4, #0]
   1ed36:	f004 f833 	bl	22da0 <_fflush_r>
   1ed3a:	f8dd c000 	ldr.w	ip, [sp]
   1ed3e:	2800      	cmp	r0, #0
   1ed40:	f43f af7c 	beq.w	1ec3c <__sfvwrite_r+0x90>
   1ed44:	89a3      	ldrh	r3, [r4, #12]
   1ed46:	f04f 30ff 	mov.w	r0, #4294967295
   1ed4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1ed4e:	81a3      	strh	r3, [r4, #12]
   1ed50:	e781      	b.n	1ec56 <__sfvwrite_r+0xaa>
   1ed52:	464e      	mov	r6, r9
   1ed54:	b326      	cbz	r6, 1eda0 <__sfvwrite_r+0x1f4>
   1ed56:	059a      	lsls	r2, r3, #22
   1ed58:	68a7      	ldr	r7, [r4, #8]
   1ed5a:	d526      	bpl.n	1edaa <__sfvwrite_r+0x1fe>
   1ed5c:	42be      	cmp	r6, r7
   1ed5e:	46bb      	mov	fp, r7
   1ed60:	d245      	bcs.n	1edee <__sfvwrite_r+0x242>
   1ed62:	6820      	ldr	r0, [r4, #0]
   1ed64:	4633      	mov	r3, r6
   1ed66:	46b3      	mov	fp, r6
   1ed68:	46b2      	mov	sl, r6
   1ed6a:	4637      	mov	r7, r6
   1ed6c:	4649      	mov	r1, r9
   1ed6e:	465a      	mov	r2, fp
   1ed70:	9300      	str	r3, [sp, #0]
   1ed72:	f000 fcf1 	bl	1f758 <memmove>
   1ed76:	9b00      	ldr	r3, [sp, #0]
   1ed78:	68a1      	ldr	r1, [r4, #8]
   1ed7a:	6822      	ldr	r2, [r4, #0]
   1ed7c:	1acb      	subs	r3, r1, r3
   1ed7e:	60a3      	str	r3, [r4, #8]
   1ed80:	eb02 030b 	add.w	r3, r2, fp
   1ed84:	6023      	str	r3, [r4, #0]
   1ed86:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1ed8a:	1bdf      	subs	r7, r3, r7
   1ed8c:	f8c8 7008 	str.w	r7, [r8, #8]
   1ed90:	2f00      	cmp	r7, #0
   1ed92:	d02a      	beq.n	1edea <__sfvwrite_r+0x23e>
   1ed94:	ebca 0606 	rsb	r6, sl, r6
   1ed98:	44d1      	add	r9, sl
   1ed9a:	89a3      	ldrh	r3, [r4, #12]
   1ed9c:	2e00      	cmp	r6, #0
   1ed9e:	d1da      	bne.n	1ed56 <__sfvwrite_r+0x1aa>
   1eda0:	f8d5 9000 	ldr.w	r9, [r5]
   1eda4:	686e      	ldr	r6, [r5, #4]
   1eda6:	3508      	adds	r5, #8
   1eda8:	e7d4      	b.n	1ed54 <__sfvwrite_r+0x1a8>
   1edaa:	6923      	ldr	r3, [r4, #16]
   1edac:	46ba      	mov	sl, r7
   1edae:	6820      	ldr	r0, [r4, #0]
   1edb0:	4298      	cmp	r0, r3
   1edb2:	bf94      	ite	ls
   1edb4:	2300      	movls	r3, #0
   1edb6:	2301      	movhi	r3, #1
   1edb8:	42b7      	cmp	r7, r6
   1edba:	bf2c      	ite	cs
   1edbc:	2300      	movcs	r3, #0
   1edbe:	f003 0301 	andcc.w	r3, r3, #1
   1edc2:	2b00      	cmp	r3, #0
   1edc4:	d128      	bne.n	1ee18 <__sfvwrite_r+0x26c>
   1edc6:	6963      	ldr	r3, [r4, #20]
   1edc8:	429e      	cmp	r6, r3
   1edca:	d318      	bcc.n	1edfe <__sfvwrite_r+0x252>
   1edcc:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   1edce:	464a      	mov	r2, r9
   1edd0:	9801      	ldr	r0, [sp, #4]
   1edd2:	6a21      	ldr	r1, [r4, #32]
   1edd4:	47b8      	blx	r7
   1edd6:	1e07      	subs	r7, r0, #0
   1edd8:	ddb4      	ble.n	1ed44 <__sfvwrite_r+0x198>
   1edda:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1edde:	46ba      	mov	sl, r7
   1ede0:	1bdf      	subs	r7, r3, r7
   1ede2:	f8c8 7008 	str.w	r7, [r8, #8]
   1ede6:	2f00      	cmp	r7, #0
   1ede8:	d1d4      	bne.n	1ed94 <__sfvwrite_r+0x1e8>
   1edea:	4638      	mov	r0, r7
   1edec:	e733      	b.n	1ec56 <__sfvwrite_r+0xaa>
   1edee:	f413 6f90 	tst.w	r3, #1152	; 0x480
   1edf2:	d11f      	bne.n	1ee34 <__sfvwrite_r+0x288>
   1edf4:	463b      	mov	r3, r7
   1edf6:	6820      	ldr	r0, [r4, #0]
   1edf8:	46b2      	mov	sl, r6
   1edfa:	4637      	mov	r7, r6
   1edfc:	e7b6      	b.n	1ed6c <__sfvwrite_r+0x1c0>
   1edfe:	4632      	mov	r2, r6
   1ee00:	4649      	mov	r1, r9
   1ee02:	f000 fca9 	bl	1f758 <memmove>
   1ee06:	68a2      	ldr	r2, [r4, #8]
   1ee08:	6823      	ldr	r3, [r4, #0]
   1ee0a:	4637      	mov	r7, r6
   1ee0c:	1b92      	subs	r2, r2, r6
   1ee0e:	46b2      	mov	sl, r6
   1ee10:	199b      	adds	r3, r3, r6
   1ee12:	60a2      	str	r2, [r4, #8]
   1ee14:	6023      	str	r3, [r4, #0]
   1ee16:	e7b6      	b.n	1ed86 <__sfvwrite_r+0x1da>
   1ee18:	4649      	mov	r1, r9
   1ee1a:	463a      	mov	r2, r7
   1ee1c:	f000 fc9c 	bl	1f758 <memmove>
   1ee20:	6823      	ldr	r3, [r4, #0]
   1ee22:	9801      	ldr	r0, [sp, #4]
   1ee24:	4621      	mov	r1, r4
   1ee26:	19db      	adds	r3, r3, r7
   1ee28:	6023      	str	r3, [r4, #0]
   1ee2a:	f003 ffb9 	bl	22da0 <_fflush_r>
   1ee2e:	2800      	cmp	r0, #0
   1ee30:	d0a9      	beq.n	1ed86 <__sfvwrite_r+0x1da>
   1ee32:	e787      	b.n	1ed44 <__sfvwrite_r+0x198>
   1ee34:	6962      	ldr	r2, [r4, #20]
   1ee36:	6921      	ldr	r1, [r4, #16]
   1ee38:	6820      	ldr	r0, [r4, #0]
   1ee3a:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
   1ee3e:	1a40      	subs	r0, r0, r1
   1ee40:	9002      	str	r0, [sp, #8]
   1ee42:	eb0c 7cdc 	add.w	ip, ip, ip, lsr #31
   1ee46:	3001      	adds	r0, #1
   1ee48:	1980      	adds	r0, r0, r6
   1ee4a:	ea4f 0c6c 	mov.w	ip, ip, asr #1
   1ee4e:	4584      	cmp	ip, r0
   1ee50:	4662      	mov	r2, ip
   1ee52:	bf3c      	itt	cc
   1ee54:	4684      	movcc	ip, r0
   1ee56:	4602      	movcc	r2, r0
   1ee58:	055b      	lsls	r3, r3, #21
   1ee5a:	9801      	ldr	r0, [sp, #4]
   1ee5c:	d527      	bpl.n	1eeae <__sfvwrite_r+0x302>
   1ee5e:	4611      	mov	r1, r2
   1ee60:	f8cd c000 	str.w	ip, [sp]
   1ee64:	f000 f8ce 	bl	1f004 <_malloc_r>
   1ee68:	f8dd c000 	ldr.w	ip, [sp]
   1ee6c:	9003      	str	r0, [sp, #12]
   1ee6e:	2800      	cmp	r0, #0
   1ee70:	d02e      	beq.n	1eed0 <__sfvwrite_r+0x324>
   1ee72:	6921      	ldr	r1, [r4, #16]
   1ee74:	9a02      	ldr	r2, [sp, #8]
   1ee76:	f8cd c000 	str.w	ip, [sp]
   1ee7a:	f000 fbf5 	bl	1f668 <memcpy>
   1ee7e:	89a3      	ldrh	r3, [r4, #12]
   1ee80:	f8dd c000 	ldr.w	ip, [sp]
   1ee84:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   1ee88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1ee8c:	81a3      	strh	r3, [r4, #12]
   1ee8e:	9902      	ldr	r1, [sp, #8]
   1ee90:	4633      	mov	r3, r6
   1ee92:	9a03      	ldr	r2, [sp, #12]
   1ee94:	46b3      	mov	fp, r6
   1ee96:	46b2      	mov	sl, r6
   1ee98:	4637      	mov	r7, r6
   1ee9a:	1850      	adds	r0, r2, r1
   1ee9c:	ebc1 020c 	rsb	r2, r1, ip
   1eea0:	9903      	ldr	r1, [sp, #12]
   1eea2:	6020      	str	r0, [r4, #0]
   1eea4:	f8c4 c014 	str.w	ip, [r4, #20]
   1eea8:	6121      	str	r1, [r4, #16]
   1eeaa:	60a2      	str	r2, [r4, #8]
   1eeac:	e75e      	b.n	1ed6c <__sfvwrite_r+0x1c0>
   1eeae:	f8cd c000 	str.w	ip, [sp]
   1eeb2:	f000 fd9f 	bl	1f9f4 <_realloc_r>
   1eeb6:	f8dd c000 	ldr.w	ip, [sp]
   1eeba:	9003      	str	r0, [sp, #12]
   1eebc:	2800      	cmp	r0, #0
   1eebe:	d1e6      	bne.n	1ee8e <__sfvwrite_r+0x2e2>
   1eec0:	6921      	ldr	r1, [r4, #16]
   1eec2:	9801      	ldr	r0, [sp, #4]
   1eec4:	f004 f99a 	bl	231fc <_free_r>
   1eec8:	9901      	ldr	r1, [sp, #4]
   1eeca:	230c      	movs	r3, #12
   1eecc:	600b      	str	r3, [r1, #0]
   1eece:	e739      	b.n	1ed44 <__sfvwrite_r+0x198>
   1eed0:	9a01      	ldr	r2, [sp, #4]
   1eed2:	230c      	movs	r3, #12
   1eed4:	6013      	str	r3, [r2, #0]
   1eed6:	e735      	b.n	1ed44 <__sfvwrite_r+0x198>

0001eed8 <_fwrite_r>:
   1eed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eedc:	b086      	sub	sp, #24
   1eede:	fb02 f603 	mul.w	r6, r2, r3
   1eee2:	461d      	mov	r5, r3
   1eee4:	4614      	mov	r4, r2
   1eee6:	ab04      	add	r3, sp, #16
   1eee8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   1eeea:	4680      	mov	r8, r0
   1eeec:	9301      	str	r3, [sp, #4]
   1eeee:	2301      	movs	r3, #1
   1eef0:	9104      	str	r1, [sp, #16]
   1eef2:	9302      	str	r3, [sp, #8]
   1eef4:	9605      	str	r6, [sp, #20]
   1eef6:	9603      	str	r6, [sp, #12]
   1eef8:	b110      	cbz	r0, 1ef00 <_fwrite_r+0x28>
   1eefa:	6983      	ldr	r3, [r0, #24]
   1eefc:	2b00      	cmp	r3, #0
   1eefe:	d034      	beq.n	1ef6a <_fwrite_r+0x92>
   1ef00:	f24c 1338 	movw	r3, #49464	; 0xc138
   1ef04:	f2c0 0302 	movt	r3, #2
   1ef08:	429f      	cmp	r7, r3
   1ef0a:	bf08      	it	eq
   1ef0c:	f8d8 7004 	ldreq.w	r7, [r8, #4]
   1ef10:	d010      	beq.n	1ef34 <_fwrite_r+0x5c>
   1ef12:	f24c 1318 	movw	r3, #49432	; 0xc118
   1ef16:	f2c0 0302 	movt	r3, #2
   1ef1a:	429f      	cmp	r7, r3
   1ef1c:	bf08      	it	eq
   1ef1e:	f8d8 7008 	ldreq.w	r7, [r8, #8]
   1ef22:	d007      	beq.n	1ef34 <_fwrite_r+0x5c>
   1ef24:	f24c 03f8 	movw	r3, #49400	; 0xc0f8
   1ef28:	f2c0 0302 	movt	r3, #2
   1ef2c:	429f      	cmp	r7, r3
   1ef2e:	bf08      	it	eq
   1ef30:	f8d8 700c 	ldreq.w	r7, [r8, #12]
   1ef34:	89bb      	ldrh	r3, [r7, #12]
   1ef36:	4640      	mov	r0, r8
   1ef38:	4639      	mov	r1, r7
   1ef3a:	049a      	lsls	r2, r3, #18
   1ef3c:	bf5f      	itttt	pl
   1ef3e:	f443 5300 	orrpl.w	r3, r3, #8192	; 0x2000
   1ef42:	81bb      	strhpl	r3, [r7, #12]
   1ef44:	6e7a      	ldrpl	r2, [r7, #100]	; 0x64
   1ef46:	f422 5300 	bicpl.w	r3, r2, #8192	; 0x2000
   1ef4a:	aa01      	add	r2, sp, #4
   1ef4c:	bf58      	it	pl
   1ef4e:	667b      	strpl	r3, [r7, #100]	; 0x64
   1ef50:	f7ff fe2c 	bl	1ebac <__sfvwrite_r>
   1ef54:	b128      	cbz	r0, 1ef62 <_fwrite_r+0x8a>
   1ef56:	9803      	ldr	r0, [sp, #12]
   1ef58:	4621      	mov	r1, r4
   1ef5a:	1a30      	subs	r0, r6, r0
   1ef5c:	f7f4 fb74 	bl	13648 <__aeabi_uidiv>
   1ef60:	4605      	mov	r5, r0
   1ef62:	4628      	mov	r0, r5
   1ef64:	b006      	add	sp, #24
   1ef66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ef6a:	f004 f85b 	bl	23024 <__sinit>
   1ef6e:	e7c7      	b.n	1ef00 <_fwrite_r+0x28>

0001ef70 <fwrite>:
   1ef70:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ef72:	f240 0428 	movw	r4, #40	; 0x28
   1ef76:	b083      	sub	sp, #12
   1ef78:	f2c1 0400 	movt	r4, #4096	; 0x1000
   1ef7c:	4607      	mov	r7, r0
   1ef7e:	460e      	mov	r6, r1
   1ef80:	4615      	mov	r5, r2
   1ef82:	9300      	str	r3, [sp, #0]
   1ef84:	6820      	ldr	r0, [r4, #0]
   1ef86:	4639      	mov	r1, r7
   1ef88:	4632      	mov	r2, r6
   1ef8a:	462b      	mov	r3, r5
   1ef8c:	f7ff ffa4 	bl	1eed8 <_fwrite_r>
   1ef90:	b003      	add	sp, #12
   1ef92:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001ef94 <__libc_init_array>:
   1ef94:	b570      	push	{r4, r5, r6, lr}
   1ef96:	f24c 36f4 	movw	r6, #50164	; 0xc3f4
   1ef9a:	f24c 35f4 	movw	r5, #50164	; 0xc3f4
   1ef9e:	f2c0 0602 	movt	r6, #2
   1efa2:	f2c0 0502 	movt	r5, #2
   1efa6:	1b76      	subs	r6, r6, r5
   1efa8:	10b6      	asrs	r6, r6, #2
   1efaa:	d006      	beq.n	1efba <__libc_init_array+0x26>
   1efac:	2400      	movs	r4, #0
   1efae:	f855 3b04 	ldr.w	r3, [r5], #4
   1efb2:	3401      	adds	r4, #1
   1efb4:	4798      	blx	r3
   1efb6:	42a6      	cmp	r6, r4
   1efb8:	d1f9      	bne.n	1efae <__libc_init_array+0x1a>
   1efba:	f24c 4678 	movw	r6, #50296	; 0xc478
   1efbe:	f24c 35f4 	movw	r5, #50164	; 0xc3f4
   1efc2:	f2c0 0602 	movt	r6, #2
   1efc6:	f2c0 0502 	movt	r5, #2
   1efca:	1b76      	subs	r6, r6, r5
   1efcc:	f00d fa0c 	bl	2c3e8 <_init>
   1efd0:	10b6      	asrs	r6, r6, #2
   1efd2:	d006      	beq.n	1efe2 <__libc_init_array+0x4e>
   1efd4:	2400      	movs	r4, #0
   1efd6:	f855 3b04 	ldr.w	r3, [r5], #4
   1efda:	3401      	adds	r4, #1
   1efdc:	4798      	blx	r3
   1efde:	42a6      	cmp	r6, r4
   1efe0:	d1f9      	bne.n	1efd6 <__libc_init_array+0x42>
   1efe2:	bd70      	pop	{r4, r5, r6, pc}

0001efe4 <malloc>:
   1efe4:	f240 0328 	movw	r3, #40	; 0x28
   1efe8:	4601      	mov	r1, r0
   1efea:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1efee:	6818      	ldr	r0, [r3, #0]
   1eff0:	f000 b808 	b.w	1f004 <_malloc_r>

0001eff4 <free>:
   1eff4:	f240 0328 	movw	r3, #40	; 0x28
   1eff8:	4601      	mov	r1, r0
   1effa:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1effe:	6818      	ldr	r0, [r3, #0]
   1f000:	f004 b8fc 	b.w	231fc <_free_r>

0001f004 <_malloc_r>:
   1f004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f008:	f101 040b 	add.w	r4, r1, #11
   1f00c:	2c16      	cmp	r4, #22
   1f00e:	b083      	sub	sp, #12
   1f010:	4606      	mov	r6, r0
   1f012:	d930      	bls.n	1f076 <_malloc_r+0x72>
   1f014:	f024 0407 	bic.w	r4, r4, #7
   1f018:	0fe3      	lsrs	r3, r4, #31
   1f01a:	428c      	cmp	r4, r1
   1f01c:	bf2c      	ite	cs
   1f01e:	4619      	movcs	r1, r3
   1f020:	f043 0101 	orrcc.w	r1, r3, #1
   1f024:	2900      	cmp	r1, #0
   1f026:	d12f      	bne.n	1f088 <_malloc_r+0x84>
   1f028:	4630      	mov	r0, r6
   1f02a:	f000 fc39 	bl	1f8a0 <__malloc_lock>
   1f02e:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
   1f032:	d22d      	bcs.n	1f090 <_malloc_r+0x8c>
   1f034:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
   1f038:	f240 151c 	movw	r5, #284	; 0x11c
   1f03c:	f2c1 0500 	movt	r5, #4096	; 0x1000
   1f040:	eb05 02ce 	add.w	r2, r5, lr, lsl #3
   1f044:	68d3      	ldr	r3, [r2, #12]
   1f046:	4293      	cmp	r3, r2
   1f048:	f000 8223 	beq.w	1f492 <_malloc_r+0x48e>
   1f04c:	685c      	ldr	r4, [r3, #4]
   1f04e:	f103 0708 	add.w	r7, r3, #8
   1f052:	68da      	ldr	r2, [r3, #12]
   1f054:	4630      	mov	r0, r6
   1f056:	f024 0403 	bic.w	r4, r4, #3
   1f05a:	6899      	ldr	r1, [r3, #8]
   1f05c:	191b      	adds	r3, r3, r4
   1f05e:	685c      	ldr	r4, [r3, #4]
   1f060:	60ca      	str	r2, [r1, #12]
   1f062:	f044 0401 	orr.w	r4, r4, #1
   1f066:	6091      	str	r1, [r2, #8]
   1f068:	605c      	str	r4, [r3, #4]
   1f06a:	f000 fc1b 	bl	1f8a4 <__malloc_unlock>
   1f06e:	4638      	mov	r0, r7
   1f070:	b003      	add	sp, #12
   1f072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f076:	2300      	movs	r3, #0
   1f078:	2410      	movs	r4, #16
   1f07a:	428c      	cmp	r4, r1
   1f07c:	bf2c      	ite	cs
   1f07e:	4619      	movcs	r1, r3
   1f080:	f043 0101 	orrcc.w	r1, r3, #1
   1f084:	2900      	cmp	r1, #0
   1f086:	d0cf      	beq.n	1f028 <_malloc_r+0x24>
   1f088:	230c      	movs	r3, #12
   1f08a:	2700      	movs	r7, #0
   1f08c:	6033      	str	r3, [r6, #0]
   1f08e:	e7ee      	b.n	1f06e <_malloc_r+0x6a>
   1f090:	ea5f 2e54 	movs.w	lr, r4, lsr #9
   1f094:	bf04      	itt	eq
   1f096:	ea4f 0ed4 	moveq.w	lr, r4, lsr #3
   1f09a:	ea4f 01ce 	moveq.w	r1, lr, lsl #3
   1f09e:	f040 808c 	bne.w	1f1ba <_malloc_r+0x1b6>
   1f0a2:	f240 151c 	movw	r5, #284	; 0x11c
   1f0a6:	f2c1 0500 	movt	r5, #4096	; 0x1000
   1f0aa:	1869      	adds	r1, r5, r1
   1f0ac:	68cf      	ldr	r7, [r1, #12]
   1f0ae:	42b9      	cmp	r1, r7
   1f0b0:	d106      	bne.n	1f0c0 <_malloc_r+0xbc>
   1f0b2:	e00d      	b.n	1f0d0 <_malloc_r+0xcc>
   1f0b4:	2a00      	cmp	r2, #0
   1f0b6:	f280 8181 	bge.w	1f3bc <_malloc_r+0x3b8>
   1f0ba:	68ff      	ldr	r7, [r7, #12]
   1f0bc:	42b9      	cmp	r1, r7
   1f0be:	d007      	beq.n	1f0d0 <_malloc_r+0xcc>
   1f0c0:	687b      	ldr	r3, [r7, #4]
   1f0c2:	f023 0303 	bic.w	r3, r3, #3
   1f0c6:	1b1a      	subs	r2, r3, r4
   1f0c8:	2a0f      	cmp	r2, #15
   1f0ca:	ddf3      	ble.n	1f0b4 <_malloc_r+0xb0>
   1f0cc:	f10e 3eff 	add.w	lr, lr, #4294967295
   1f0d0:	f10e 0e01 	add.w	lr, lr, #1
   1f0d4:	f240 101c 	movw	r0, #284	; 0x11c
   1f0d8:	692f      	ldr	r7, [r5, #16]
   1f0da:	f2c1 0000 	movt	r0, #4096	; 0x1000
   1f0de:	f100 0208 	add.w	r2, r0, #8
   1f0e2:	4297      	cmp	r7, r2
   1f0e4:	bf08      	it	eq
   1f0e6:	6843      	ldreq	r3, [r0, #4]
   1f0e8:	d026      	beq.n	1f138 <_malloc_r+0x134>
   1f0ea:	687b      	ldr	r3, [r7, #4]
   1f0ec:	f023 0c03 	bic.w	ip, r3, #3
   1f0f0:	ebc4 030c 	rsb	r3, r4, ip
   1f0f4:	2b0f      	cmp	r3, #15
   1f0f6:	f300 819c 	bgt.w	1f432 <_malloc_r+0x42e>
   1f0fa:	2b00      	cmp	r3, #0
   1f0fc:	6142      	str	r2, [r0, #20]
   1f0fe:	6102      	str	r2, [r0, #16]
   1f100:	f280 8095 	bge.w	1f22e <_malloc_r+0x22a>
   1f104:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
   1f108:	f080 8173 	bcs.w	1f3f2 <_malloc_r+0x3ee>
   1f10c:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
   1f110:	f04f 0801 	mov.w	r8, #1
   1f114:	6843      	ldr	r3, [r0, #4]
   1f116:	eb00 01cc 	add.w	r1, r0, ip, lsl #3
   1f11a:	ea4f 0cac 	mov.w	ip, ip, asr #2
   1f11e:	fa08 f80c 	lsl.w	r8, r8, ip
   1f122:	60f9      	str	r1, [r7, #12]
   1f124:	f8d1 c008 	ldr.w	ip, [r1, #8]
   1f128:	ea48 0303 	orr.w	r3, r8, r3
   1f12c:	6043      	str	r3, [r0, #4]
   1f12e:	f8c7 c008 	str.w	ip, [r7, #8]
   1f132:	f8cc 700c 	str.w	r7, [ip, #12]
   1f136:	608f      	str	r7, [r1, #8]
   1f138:	2701      	movs	r7, #1
   1f13a:	ea4f 01ae 	mov.w	r1, lr, asr #2
   1f13e:	fa07 f701 	lsl.w	r7, r7, r1
   1f142:	429f      	cmp	r7, r3
   1f144:	d87e      	bhi.n	1f244 <_malloc_r+0x240>
   1f146:	423b      	tst	r3, r7
   1f148:	d106      	bne.n	1f158 <_malloc_r+0x154>
   1f14a:	f02e 0e03 	bic.w	lr, lr, #3
   1f14e:	007f      	lsls	r7, r7, #1
   1f150:	f10e 0e04 	add.w	lr, lr, #4
   1f154:	423b      	tst	r3, r7
   1f156:	d0fa      	beq.n	1f14e <_malloc_r+0x14a>
   1f158:	eb05 09ce 	add.w	r9, r5, lr, lsl #3
   1f15c:	46f0      	mov	r8, lr
   1f15e:	46cc      	mov	ip, r9
   1f160:	f8dc 000c 	ldr.w	r0, [ip, #12]
   1f164:	4584      	cmp	ip, r0
   1f166:	d107      	bne.n	1f178 <_malloc_r+0x174>
   1f168:	e174      	b.n	1f454 <_malloc_r+0x450>
   1f16a:	2b00      	cmp	r3, #0
   1f16c:	f280 819b 	bge.w	1f4a6 <_malloc_r+0x4a2>
   1f170:	68c0      	ldr	r0, [r0, #12]
   1f172:	4584      	cmp	ip, r0
   1f174:	f000 816e 	beq.w	1f454 <_malloc_r+0x450>
   1f178:	6841      	ldr	r1, [r0, #4]
   1f17a:	f021 0103 	bic.w	r1, r1, #3
   1f17e:	1b0b      	subs	r3, r1, r4
   1f180:	2b0f      	cmp	r3, #15
   1f182:	ddf2      	ble.n	1f16a <_malloc_r+0x166>
   1f184:	4607      	mov	r7, r0
   1f186:	1901      	adds	r1, r0, r4
   1f188:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   1f18c:	f044 0801 	orr.w	r8, r4, #1
   1f190:	f857 4f08 	ldr.w	r4, [r7, #8]!
   1f194:	f043 0c01 	orr.w	ip, r3, #1
   1f198:	f8c0 8004 	str.w	r8, [r0, #4]
   1f19c:	4630      	mov	r0, r6
   1f19e:	f8c1 c004 	str.w	ip, [r1, #4]
   1f1a2:	f8c4 e00c 	str.w	lr, [r4, #12]
   1f1a6:	f8ce 4008 	str.w	r4, [lr, #8]
   1f1aa:	6169      	str	r1, [r5, #20]
   1f1ac:	6129      	str	r1, [r5, #16]
   1f1ae:	60ca      	str	r2, [r1, #12]
   1f1b0:	608a      	str	r2, [r1, #8]
   1f1b2:	50cb      	str	r3, [r1, r3]
   1f1b4:	f000 fb76 	bl	1f8a4 <__malloc_unlock>
   1f1b8:	e759      	b.n	1f06e <_malloc_r+0x6a>
   1f1ba:	f1be 0f04 	cmp.w	lr, #4
   1f1be:	bf9e      	ittt	ls
   1f1c0:	ea4f 1e94 	movls.w	lr, r4, lsr #6
   1f1c4:	f10e 0e38 	addls.w	lr, lr, #56	; 0x38
   1f1c8:	ea4f 01ce 	movls.w	r1, lr, lsl #3
   1f1cc:	f67f af69 	bls.w	1f0a2 <_malloc_r+0x9e>
   1f1d0:	f1be 0f14 	cmp.w	lr, #20
   1f1d4:	bf9c      	itt	ls
   1f1d6:	f10e 0e5b 	addls.w	lr, lr, #91	; 0x5b
   1f1da:	ea4f 01ce 	movls.w	r1, lr, lsl #3
   1f1de:	f67f af60 	bls.w	1f0a2 <_malloc_r+0x9e>
   1f1e2:	f1be 0f54 	cmp.w	lr, #84	; 0x54
   1f1e6:	bf9e      	ittt	ls
   1f1e8:	ea4f 3e14 	movls.w	lr, r4, lsr #12
   1f1ec:	f10e 0e6e 	addls.w	lr, lr, #110	; 0x6e
   1f1f0:	ea4f 01ce 	movls.w	r1, lr, lsl #3
   1f1f4:	f67f af55 	bls.w	1f0a2 <_malloc_r+0x9e>
   1f1f8:	f5be 7faa 	cmp.w	lr, #340	; 0x154
   1f1fc:	bf9e      	ittt	ls
   1f1fe:	ea4f 3ed4 	movls.w	lr, r4, lsr #15
   1f202:	f10e 0e77 	addls.w	lr, lr, #119	; 0x77
   1f206:	ea4f 01ce 	movls.w	r1, lr, lsl #3
   1f20a:	f67f af4a 	bls.w	1f0a2 <_malloc_r+0x9e>
   1f20e:	f240 5354 	movw	r3, #1364	; 0x554
   1f212:	459e      	cmp	lr, r3
   1f214:	bf95      	itete	ls
   1f216:	ea4f 4e94 	movls.w	lr, r4, lsr #18
   1f21a:	f44f 717c 	movhi.w	r1, #1008	; 0x3f0
   1f21e:	f10e 0e7c 	addls.w	lr, lr, #124	; 0x7c
   1f222:	f04f 0e7e 	movhi.w	lr, #126	; 0x7e
   1f226:	bf98      	it	ls
   1f228:	ea4f 01ce 	movls.w	r1, lr, lsl #3
   1f22c:	e739      	b.n	1f0a2 <_malloc_r+0x9e>
   1f22e:	eb07 030c 	add.w	r3, r7, ip
   1f232:	4630      	mov	r0, r6
   1f234:	3708      	adds	r7, #8
   1f236:	685a      	ldr	r2, [r3, #4]
   1f238:	f042 0201 	orr.w	r2, r2, #1
   1f23c:	605a      	str	r2, [r3, #4]
   1f23e:	f000 fb31 	bl	1f8a4 <__malloc_unlock>
   1f242:	e714      	b.n	1f06e <_malloc_r+0x6a>
   1f244:	68af      	ldr	r7, [r5, #8]
   1f246:	f240 131c 	movw	r3, #284	; 0x11c
   1f24a:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1f24e:	687a      	ldr	r2, [r7, #4]
   1f250:	f022 0803 	bic.w	r8, r2, #3
   1f254:	4544      	cmp	r4, r8
   1f256:	ebc4 0208 	rsb	r2, r4, r8
   1f25a:	bf94      	ite	ls
   1f25c:	2100      	movls	r1, #0
   1f25e:	2101      	movhi	r1, #1
   1f260:	2a0f      	cmp	r2, #15
   1f262:	bfd8      	it	le
   1f264:	f041 0101 	orrle.w	r1, r1, #1
   1f268:	2900      	cmp	r1, #0
   1f26a:	f000 80b5 	beq.w	1f3d8 <_malloc_r+0x3d4>
   1f26e:	f243 1a90 	movw	sl, #12688	; 0x3190
   1f272:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
   1f276:	f2c1 0a00 	movt	sl, #4096	; 0x1000
   1f27a:	3201      	adds	r2, #1
   1f27c:	f8da 3000 	ldr.w	r3, [sl]
   1f280:	4423      	add	r3, r4
   1f282:	bf08      	it	eq
   1f284:	f103 0b10 	addeq.w	fp, r3, #16
   1f288:	d006      	beq.n	1f298 <_malloc_r+0x294>
   1f28a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   1f28e:	330f      	adds	r3, #15
   1f290:	f423 637e 	bic.w	r3, r3, #4064	; 0xfe0
   1f294:	f023 0b1f 	bic.w	fp, r3, #31
   1f298:	4630      	mov	r0, r6
   1f29a:	4659      	mov	r1, fp
   1f29c:	f000 fd96 	bl	1fdcc <_sbrk_r>
   1f2a0:	1c42      	adds	r2, r0, #1
   1f2a2:	4681      	mov	r9, r0
   1f2a4:	f000 8131 	beq.w	1f50a <_malloc_r+0x506>
   1f2a8:	eb07 0308 	add.w	r3, r7, r8
   1f2ac:	4283      	cmp	r3, r0
   1f2ae:	f200 8106 	bhi.w	1f4be <_malloc_r+0x4ba>
   1f2b2:	f8da 2004 	ldr.w	r2, [sl, #4]
   1f2b6:	454b      	cmp	r3, r9
   1f2b8:	445a      	add	r2, fp
   1f2ba:	f8ca 2004 	str.w	r2, [sl, #4]
   1f2be:	f000 8131 	beq.w	1f524 <_malloc_r+0x520>
   1f2c2:	f8d5 0408 	ldr.w	r0, [r5, #1032]	; 0x408
   1f2c6:	f240 111c 	movw	r1, #284	; 0x11c
   1f2ca:	f2c1 0100 	movt	r1, #4096	; 0x1000
   1f2ce:	3001      	adds	r0, #1
   1f2d0:	4630      	mov	r0, r6
   1f2d2:	bf17      	itett	ne
   1f2d4:	ebc3 0309 	rsbne	r3, r3, r9
   1f2d8:	f8c1 9408 	streq.w	r9, [r1, #1032]	; 0x408
   1f2dc:	18d2      	addne	r2, r2, r3
   1f2de:	f8ca 2004 	strne.w	r2, [sl, #4]
   1f2e2:	f019 0307 	ands.w	r3, r9, #7
   1f2e6:	bf1f      	itttt	ne
   1f2e8:	f1c3 0208 	rsbne	r2, r3, #8
   1f2ec:	f5c3 5380 	rsbne	r3, r3, #4096	; 0x1000
   1f2f0:	4491      	addne	r9, r2
   1f2f2:	f103 0208 	addne.w	r2, r3, #8
   1f2f6:	eb09 030b 	add.w	r3, r9, fp
   1f2fa:	bf08      	it	eq
   1f2fc:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
   1f300:	051b      	lsls	r3, r3, #20
   1f302:	0d1b      	lsrs	r3, r3, #20
   1f304:	ebc3 0b02 	rsb	fp, r3, r2
   1f308:	4659      	mov	r1, fp
   1f30a:	f000 fd5f 	bl	1fdcc <_sbrk_r>
   1f30e:	1c43      	adds	r3, r0, #1
   1f310:	f000 811d 	beq.w	1f54e <_malloc_r+0x54a>
   1f314:	ebc9 0100 	rsb	r1, r9, r0
   1f318:	4459      	add	r1, fp
   1f31a:	f041 0101 	orr.w	r1, r1, #1
   1f31e:	f8da 2004 	ldr.w	r2, [sl, #4]
   1f322:	42af      	cmp	r7, r5
   1f324:	f243 1390 	movw	r3, #12688	; 0x3190
   1f328:	f8c5 9008 	str.w	r9, [r5, #8]
   1f32c:	445a      	add	r2, fp
   1f32e:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1f332:	f8c9 1004 	str.w	r1, [r9, #4]
   1f336:	f8ca 2004 	str.w	r2, [sl, #4]
   1f33a:	d019      	beq.n	1f370 <_malloc_r+0x36c>
   1f33c:	f1b8 0f0f 	cmp.w	r8, #15
   1f340:	f240 80dd 	bls.w	1f4fe <_malloc_r+0x4fa>
   1f344:	f1a8 010c 	sub.w	r1, r8, #12
   1f348:	f8d7 c004 	ldr.w	ip, [r7, #4]
   1f34c:	f021 0107 	bic.w	r1, r1, #7
   1f350:	f04f 0e05 	mov.w	lr, #5
   1f354:	1878      	adds	r0, r7, r1
   1f356:	290f      	cmp	r1, #15
   1f358:	f00c 0c01 	and.w	ip, ip, #1
   1f35c:	ea41 0c0c 	orr.w	ip, r1, ip
   1f360:	f8c7 c004 	str.w	ip, [r7, #4]
   1f364:	f8c0 e004 	str.w	lr, [r0, #4]
   1f368:	f8c0 e008 	str.w	lr, [r0, #8]
   1f36c:	f200 80e6 	bhi.w	1f53c <_malloc_r+0x538>
   1f370:	f243 1390 	movw	r3, #12688	; 0x3190
   1f374:	f8da 102c 	ldr.w	r1, [sl, #44]	; 0x2c
   1f378:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1f37c:	68af      	ldr	r7, [r5, #8]
   1f37e:	428a      	cmp	r2, r1
   1f380:	f8da 1030 	ldr.w	r1, [sl, #48]	; 0x30
   1f384:	bf88      	it	hi
   1f386:	62da      	strhi	r2, [r3, #44]	; 0x2c
   1f388:	f243 1390 	movw	r3, #12688	; 0x3190
   1f38c:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1f390:	428a      	cmp	r2, r1
   1f392:	bf88      	it	hi
   1f394:	631a      	strhi	r2, [r3, #48]	; 0x30
   1f396:	687b      	ldr	r3, [r7, #4]
   1f398:	f023 0303 	bic.w	r3, r3, #3
   1f39c:	429c      	cmp	r4, r3
   1f39e:	ebc4 0203 	rsb	r2, r4, r3
   1f3a2:	bf94      	ite	ls
   1f3a4:	2300      	movls	r3, #0
   1f3a6:	2301      	movhi	r3, #1
   1f3a8:	2a0f      	cmp	r2, #15
   1f3aa:	bfd8      	it	le
   1f3ac:	f043 0301 	orrle.w	r3, r3, #1
   1f3b0:	b193      	cbz	r3, 1f3d8 <_malloc_r+0x3d4>
   1f3b2:	4630      	mov	r0, r6
   1f3b4:	2700      	movs	r7, #0
   1f3b6:	f000 fa75 	bl	1f8a4 <__malloc_unlock>
   1f3ba:	e658      	b.n	1f06e <_malloc_r+0x6a>
   1f3bc:	18fb      	adds	r3, r7, r3
   1f3be:	68fa      	ldr	r2, [r7, #12]
   1f3c0:	68b9      	ldr	r1, [r7, #8]
   1f3c2:	4630      	mov	r0, r6
   1f3c4:	685c      	ldr	r4, [r3, #4]
   1f3c6:	3708      	adds	r7, #8
   1f3c8:	60ca      	str	r2, [r1, #12]
   1f3ca:	f044 0401 	orr.w	r4, r4, #1
   1f3ce:	6091      	str	r1, [r2, #8]
   1f3d0:	605c      	str	r4, [r3, #4]
   1f3d2:	f000 fa67 	bl	1f8a4 <__malloc_unlock>
   1f3d6:	e64a      	b.n	1f06e <_malloc_r+0x6a>
   1f3d8:	193b      	adds	r3, r7, r4
   1f3da:	f042 0201 	orr.w	r2, r2, #1
   1f3de:	f044 0401 	orr.w	r4, r4, #1
   1f3e2:	4630      	mov	r0, r6
   1f3e4:	607c      	str	r4, [r7, #4]
   1f3e6:	3708      	adds	r7, #8
   1f3e8:	605a      	str	r2, [r3, #4]
   1f3ea:	60ab      	str	r3, [r5, #8]
   1f3ec:	f000 fa5a 	bl	1f8a4 <__malloc_unlock>
   1f3f0:	e63d      	b.n	1f06e <_malloc_r+0x6a>
   1f3f2:	ea4f 235c 	mov.w	r3, ip, lsr #9
   1f3f6:	2b04      	cmp	r3, #4
   1f3f8:	d95c      	bls.n	1f4b4 <_malloc_r+0x4b0>
   1f3fa:	2b14      	cmp	r3, #20
   1f3fc:	d878      	bhi.n	1f4f0 <_malloc_r+0x4ec>
   1f3fe:	335b      	adds	r3, #91	; 0x5b
   1f400:	00d8      	lsls	r0, r3, #3
   1f402:	1828      	adds	r0, r5, r0
   1f404:	f240 181c 	movw	r8, #284	; 0x11c
   1f408:	f2c1 0800 	movt	r8, #4096	; 0x1000
   1f40c:	6881      	ldr	r1, [r0, #8]
   1f40e:	4281      	cmp	r1, r0
   1f410:	d103      	bne.n	1f41a <_malloc_r+0x416>
   1f412:	e060      	b.n	1f4d6 <_malloc_r+0x4d2>
   1f414:	6889      	ldr	r1, [r1, #8]
   1f416:	4288      	cmp	r0, r1
   1f418:	d004      	beq.n	1f424 <_malloc_r+0x420>
   1f41a:	684b      	ldr	r3, [r1, #4]
   1f41c:	f023 0303 	bic.w	r3, r3, #3
   1f420:	459c      	cmp	ip, r3
   1f422:	d3f7      	bcc.n	1f414 <_malloc_r+0x410>
   1f424:	68c8      	ldr	r0, [r1, #12]
   1f426:	686b      	ldr	r3, [r5, #4]
   1f428:	60f8      	str	r0, [r7, #12]
   1f42a:	60b9      	str	r1, [r7, #8]
   1f42c:	60cf      	str	r7, [r1, #12]
   1f42e:	6087      	str	r7, [r0, #8]
   1f430:	e682      	b.n	1f138 <_malloc_r+0x134>
   1f432:	1939      	adds	r1, r7, r4
   1f434:	f043 0501 	orr.w	r5, r3, #1
   1f438:	6141      	str	r1, [r0, #20]
   1f43a:	f044 0401 	orr.w	r4, r4, #1
   1f43e:	6101      	str	r1, [r0, #16]
   1f440:	4630      	mov	r0, r6
   1f442:	607c      	str	r4, [r7, #4]
   1f444:	3708      	adds	r7, #8
   1f446:	60ca      	str	r2, [r1, #12]
   1f448:	608a      	str	r2, [r1, #8]
   1f44a:	604d      	str	r5, [r1, #4]
   1f44c:	50cb      	str	r3, [r1, r3]
   1f44e:	f000 fa29 	bl	1f8a4 <__malloc_unlock>
   1f452:	e60c      	b.n	1f06e <_malloc_r+0x6a>
   1f454:	f108 0801 	add.w	r8, r8, #1
   1f458:	f10c 0c08 	add.w	ip, ip, #8
   1f45c:	f018 0f03 	tst.w	r8, #3
   1f460:	f47f ae7e 	bne.w	1f160 <_malloc_r+0x15c>
   1f464:	464b      	mov	r3, r9
   1f466:	f01e 0f03 	tst.w	lr, #3
   1f46a:	f1a3 0108 	sub.w	r1, r3, #8
   1f46e:	f10e 3eff 	add.w	lr, lr, #4294967295
   1f472:	d079      	beq.n	1f568 <_malloc_r+0x564>
   1f474:	681b      	ldr	r3, [r3, #0]
   1f476:	428b      	cmp	r3, r1
   1f478:	d0f5      	beq.n	1f466 <_malloc_r+0x462>
   1f47a:	686b      	ldr	r3, [r5, #4]
   1f47c:	007f      	lsls	r7, r7, #1
   1f47e:	429f      	cmp	r7, r3
   1f480:	f63f aee0 	bhi.w	1f244 <_malloc_r+0x240>
   1f484:	2f00      	cmp	r7, #0
   1f486:	f43f aedd 	beq.w	1f244 <_malloc_r+0x240>
   1f48a:	421f      	tst	r7, r3
   1f48c:	d071      	beq.n	1f572 <_malloc_r+0x56e>
   1f48e:	46c6      	mov	lr, r8
   1f490:	e662      	b.n	1f158 <_malloc_r+0x154>
   1f492:	f103 0208 	add.w	r2, r3, #8
   1f496:	695b      	ldr	r3, [r3, #20]
   1f498:	429a      	cmp	r2, r3
   1f49a:	bf08      	it	eq
   1f49c:	f10e 0e02 	addeq.w	lr, lr, #2
   1f4a0:	f43f ae18 	beq.w	1f0d4 <_malloc_r+0xd0>
   1f4a4:	e5d2      	b.n	1f04c <_malloc_r+0x48>
   1f4a6:	4607      	mov	r7, r0
   1f4a8:	1843      	adds	r3, r0, r1
   1f4aa:	68c2      	ldr	r2, [r0, #12]
   1f4ac:	4630      	mov	r0, r6
   1f4ae:	f857 1f08 	ldr.w	r1, [r7, #8]!
   1f4b2:	e5d4      	b.n	1f05e <_malloc_r+0x5a>
   1f4b4:	ea4f 139c 	mov.w	r3, ip, lsr #6
   1f4b8:	3338      	adds	r3, #56	; 0x38
   1f4ba:	00d8      	lsls	r0, r3, #3
   1f4bc:	e7a1      	b.n	1f402 <_malloc_r+0x3fe>
   1f4be:	42af      	cmp	r7, r5
   1f4c0:	f240 121c 	movw	r2, #284	; 0x11c
   1f4c4:	f2c1 0200 	movt	r2, #4096	; 0x1000
   1f4c8:	f43f aef3 	beq.w	1f2b2 <_malloc_r+0x2ae>
   1f4cc:	6897      	ldr	r7, [r2, #8]
   1f4ce:	687b      	ldr	r3, [r7, #4]
   1f4d0:	f023 0303 	bic.w	r3, r3, #3
   1f4d4:	e762      	b.n	1f39c <_malloc_r+0x398>
   1f4d6:	f04f 0901 	mov.w	r9, #1
   1f4da:	f8d8 c004 	ldr.w	ip, [r8, #4]
   1f4de:	109b      	asrs	r3, r3, #2
   1f4e0:	4608      	mov	r0, r1
   1f4e2:	fa09 f303 	lsl.w	r3, r9, r3
   1f4e6:	ea43 030c 	orr.w	r3, r3, ip
   1f4ea:	f8c8 3004 	str.w	r3, [r8, #4]
   1f4ee:	e79b      	b.n	1f428 <_malloc_r+0x424>
   1f4f0:	2b54      	cmp	r3, #84	; 0x54
   1f4f2:	d80f      	bhi.n	1f514 <_malloc_r+0x510>
   1f4f4:	ea4f 331c 	mov.w	r3, ip, lsr #12
   1f4f8:	336e      	adds	r3, #110	; 0x6e
   1f4fa:	00d8      	lsls	r0, r3, #3
   1f4fc:	e781      	b.n	1f402 <_malloc_r+0x3fe>
   1f4fe:	2301      	movs	r3, #1
   1f500:	464f      	mov	r7, r9
   1f502:	f8c9 3004 	str.w	r3, [r9, #4]
   1f506:	2300      	movs	r3, #0
   1f508:	e748      	b.n	1f39c <_malloc_r+0x398>
   1f50a:	68af      	ldr	r7, [r5, #8]
   1f50c:	687b      	ldr	r3, [r7, #4]
   1f50e:	f023 0303 	bic.w	r3, r3, #3
   1f512:	e743      	b.n	1f39c <_malloc_r+0x398>
   1f514:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   1f518:	d81d      	bhi.n	1f556 <_malloc_r+0x552>
   1f51a:	ea4f 33dc 	mov.w	r3, ip, lsr #15
   1f51e:	3377      	adds	r3, #119	; 0x77
   1f520:	00d8      	lsls	r0, r3, #3
   1f522:	e76e      	b.n	1f402 <_malloc_r+0x3fe>
   1f524:	0519      	lsls	r1, r3, #20
   1f526:	0d09      	lsrs	r1, r1, #20
   1f528:	2900      	cmp	r1, #0
   1f52a:	f47f aeca 	bne.w	1f2c2 <_malloc_r+0x2be>
   1f52e:	68ab      	ldr	r3, [r5, #8]
   1f530:	eb0b 0108 	add.w	r1, fp, r8
   1f534:	f041 0101 	orr.w	r1, r1, #1
   1f538:	6059      	str	r1, [r3, #4]
   1f53a:	e719      	b.n	1f370 <_malloc_r+0x36c>
   1f53c:	4630      	mov	r0, r6
   1f53e:	f107 0108 	add.w	r1, r7, #8
   1f542:	9301      	str	r3, [sp, #4]
   1f544:	f003 fe5a 	bl	231fc <_free_r>
   1f548:	9b01      	ldr	r3, [sp, #4]
   1f54a:	685a      	ldr	r2, [r3, #4]
   1f54c:	e710      	b.n	1f370 <_malloc_r+0x36c>
   1f54e:	2101      	movs	r1, #1
   1f550:	f04f 0b00 	mov.w	fp, #0
   1f554:	e6e3      	b.n	1f31e <_malloc_r+0x31a>
   1f556:	f240 5154 	movw	r1, #1364	; 0x554
   1f55a:	428b      	cmp	r3, r1
   1f55c:	d80d      	bhi.n	1f57a <_malloc_r+0x576>
   1f55e:	ea4f 439c 	mov.w	r3, ip, lsr #18
   1f562:	337c      	adds	r3, #124	; 0x7c
   1f564:	00d8      	lsls	r0, r3, #3
   1f566:	e74c      	b.n	1f402 <_malloc_r+0x3fe>
   1f568:	686b      	ldr	r3, [r5, #4]
   1f56a:	ea23 0307 	bic.w	r3, r3, r7
   1f56e:	606b      	str	r3, [r5, #4]
   1f570:	e784      	b.n	1f47c <_malloc_r+0x478>
   1f572:	007f      	lsls	r7, r7, #1
   1f574:	f108 0804 	add.w	r8, r8, #4
   1f578:	e787      	b.n	1f48a <_malloc_r+0x486>
   1f57a:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
   1f57e:	237e      	movs	r3, #126	; 0x7e
   1f580:	e73f      	b.n	1f402 <_malloc_r+0x3fe>
   1f582:	bf00      	nop

0001f584 <memchr>:
   1f584:	0783      	lsls	r3, r0, #30
   1f586:	b2c9      	uxtb	r1, r1
   1f588:	b470      	push	{r4, r5, r6}
   1f58a:	d012      	beq.n	1f5b2 <memchr+0x2e>
   1f58c:	2a00      	cmp	r2, #0
   1f58e:	d03b      	beq.n	1f608 <memchr+0x84>
   1f590:	7803      	ldrb	r3, [r0, #0]
   1f592:	428b      	cmp	r3, r1
   1f594:	d025      	beq.n	1f5e2 <memchr+0x5e>
   1f596:	4603      	mov	r3, r0
   1f598:	3a01      	subs	r2, #1
   1f59a:	e006      	b.n	1f5aa <memchr+0x26>
   1f59c:	f112 32ff 	adds.w	r2, r2, #4294967295
   1f5a0:	d31e      	bcc.n	1f5e0 <memchr+0x5c>
   1f5a2:	f813 4f01 	ldrb.w	r4, [r3, #1]!
   1f5a6:	428c      	cmp	r4, r1
   1f5a8:	d01b      	beq.n	1f5e2 <memchr+0x5e>
   1f5aa:	3001      	adds	r0, #1
   1f5ac:	f010 0f03 	tst.w	r0, #3
   1f5b0:	d1f4      	bne.n	1f59c <memchr+0x18>
   1f5b2:	2a03      	cmp	r2, #3
   1f5b4:	bf84      	itt	hi
   1f5b6:	ea41 2601 	orrhi.w	r6, r1, r1, lsl #8
   1f5ba:	ea46 4606 	orrhi.w	r6, r6, r6, lsl #16
   1f5be:	d812      	bhi.n	1f5e6 <memchr+0x62>
   1f5c0:	2a00      	cmp	r2, #0
   1f5c2:	d021      	beq.n	1f608 <memchr+0x84>
   1f5c4:	7803      	ldrb	r3, [r0, #0]
   1f5c6:	428b      	cmp	r3, r1
   1f5c8:	d00b      	beq.n	1f5e2 <memchr+0x5e>
   1f5ca:	1c43      	adds	r3, r0, #1
   1f5cc:	1882      	adds	r2, r0, r2
   1f5ce:	e003      	b.n	1f5d8 <memchr+0x54>
   1f5d0:	f813 4b01 	ldrb.w	r4, [r3], #1
   1f5d4:	428c      	cmp	r4, r1
   1f5d6:	d004      	beq.n	1f5e2 <memchr+0x5e>
   1f5d8:	4293      	cmp	r3, r2
   1f5da:	f100 0001 	add.w	r0, r0, #1
   1f5de:	d1f7      	bne.n	1f5d0 <memchr+0x4c>
   1f5e0:	2000      	movs	r0, #0
   1f5e2:	bc70      	pop	{r4, r5, r6}
   1f5e4:	4770      	bx	lr
   1f5e6:	4604      	mov	r4, r0
   1f5e8:	3004      	adds	r0, #4
   1f5ea:	6823      	ldr	r3, [r4, #0]
   1f5ec:	4073      	eors	r3, r6
   1f5ee:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
   1f5f2:	ea25 0303 	bic.w	r3, r5, r3
   1f5f6:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   1f5fa:	d103      	bne.n	1f604 <memchr+0x80>
   1f5fc:	3a04      	subs	r2, #4
   1f5fe:	2a03      	cmp	r2, #3
   1f600:	d8f1      	bhi.n	1f5e6 <memchr+0x62>
   1f602:	e7dd      	b.n	1f5c0 <memchr+0x3c>
   1f604:	4620      	mov	r0, r4
   1f606:	e7db      	b.n	1f5c0 <memchr+0x3c>
   1f608:	4610      	mov	r0, r2
   1f60a:	e7ea      	b.n	1f5e2 <memchr+0x5e>

0001f60c <memcmp>:
   1f60c:	2a03      	cmp	r2, #3
   1f60e:	b470      	push	{r4, r5, r6}
   1f610:	d924      	bls.n	1f65c <memcmp+0x50>
   1f612:	ea41 0500 	orr.w	r5, r1, r0
   1f616:	4603      	mov	r3, r0
   1f618:	07ad      	lsls	r5, r5, #30
   1f61a:	460c      	mov	r4, r1
   1f61c:	d011      	beq.n	1f642 <memcmp+0x36>
   1f61e:	7805      	ldrb	r5, [r0, #0]
   1f620:	1c43      	adds	r3, r0, #1
   1f622:	780c      	ldrb	r4, [r1, #0]
   1f624:	1882      	adds	r2, r0, r2
   1f626:	42a5      	cmp	r5, r4
   1f628:	d006      	beq.n	1f638 <memcmp+0x2c>
   1f62a:	e01b      	b.n	1f664 <memcmp+0x58>
   1f62c:	f813 5b01 	ldrb.w	r5, [r3], #1
   1f630:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1f634:	42a5      	cmp	r5, r4
   1f636:	d115      	bne.n	1f664 <memcmp+0x58>
   1f638:	4293      	cmp	r3, r2
   1f63a:	d1f7      	bne.n	1f62c <memcmp+0x20>
   1f63c:	2000      	movs	r0, #0
   1f63e:	bc70      	pop	{r4, r5, r6}
   1f640:	4770      	bx	lr
   1f642:	4621      	mov	r1, r4
   1f644:	4618      	mov	r0, r3
   1f646:	3404      	adds	r4, #4
   1f648:	3304      	adds	r3, #4
   1f64a:	6806      	ldr	r6, [r0, #0]
   1f64c:	680d      	ldr	r5, [r1, #0]
   1f64e:	42ae      	cmp	r6, r5
   1f650:	d104      	bne.n	1f65c <memcmp+0x50>
   1f652:	3a04      	subs	r2, #4
   1f654:	2a03      	cmp	r2, #3
   1f656:	d8f4      	bhi.n	1f642 <memcmp+0x36>
   1f658:	4621      	mov	r1, r4
   1f65a:	4618      	mov	r0, r3
   1f65c:	2a00      	cmp	r2, #0
   1f65e:	d1de      	bne.n	1f61e <memcmp+0x12>
   1f660:	4610      	mov	r0, r2
   1f662:	e7ec      	b.n	1f63e <memcmp+0x32>
   1f664:	1b28      	subs	r0, r5, r4
   1f666:	e7ea      	b.n	1f63e <memcmp+0x32>

0001f668 <memcpy>:
   1f668:	2a03      	cmp	r2, #3
   1f66a:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
   1f66e:	d809      	bhi.n	1f684 <memcpy+0x1c>
   1f670:	b12a      	cbz	r2, 1f67e <memcpy+0x16>
   1f672:	2300      	movs	r3, #0
   1f674:	5ccc      	ldrb	r4, [r1, r3]
   1f676:	54c4      	strb	r4, [r0, r3]
   1f678:	3301      	adds	r3, #1
   1f67a:	4293      	cmp	r3, r2
   1f67c:	d1fa      	bne.n	1f674 <memcpy+0xc>
   1f67e:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
   1f682:	4770      	bx	lr
   1f684:	0785      	lsls	r5, r0, #30
   1f686:	4402      	add	r2, r0
   1f688:	4603      	mov	r3, r0
   1f68a:	d005      	beq.n	1f698 <memcpy+0x30>
   1f68c:	f811 4b01 	ldrb.w	r4, [r1], #1
   1f690:	f803 4b01 	strb.w	r4, [r3], #1
   1f694:	079c      	lsls	r4, r3, #30
   1f696:	d1f9      	bne.n	1f68c <memcpy+0x24>
   1f698:	f011 0503 	ands.w	r5, r1, #3
   1f69c:	d042      	beq.n	1f724 <memcpy+0xbc>
   1f69e:	1ad4      	subs	r4, r2, r3
   1f6a0:	426e      	negs	r6, r5
   1f6a2:	2c03      	cmp	r4, #3
   1f6a4:	598f      	ldr	r7, [r1, r6]
   1f6a6:	dd12      	ble.n	1f6ce <memcpy+0x66>
   1f6a8:	f1c5 0c04 	rsb	ip, r5, #4
   1f6ac:	00ed      	lsls	r5, r5, #3
   1f6ae:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   1f6b2:	3104      	adds	r1, #4
   1f6b4:	fa27 f805 	lsr.w	r8, r7, r5
   1f6b8:	598c      	ldr	r4, [r1, r6]
   1f6ba:	4627      	mov	r7, r4
   1f6bc:	fa04 f40c 	lsl.w	r4, r4, ip
   1f6c0:	ea44 0408 	orr.w	r4, r4, r8
   1f6c4:	f843 4b04 	str.w	r4, [r3], #4
   1f6c8:	1ad4      	subs	r4, r2, r3
   1f6ca:	2c03      	cmp	r4, #3
   1f6cc:	dcf1      	bgt.n	1f6b2 <memcpy+0x4a>
   1f6ce:	429a      	cmp	r2, r3
   1f6d0:	d9d5      	bls.n	1f67e <memcpy+0x16>
   1f6d2:	2200      	movs	r2, #0
   1f6d4:	5c8d      	ldrb	r5, [r1, r2]
   1f6d6:	549d      	strb	r5, [r3, r2]
   1f6d8:	3201      	adds	r2, #1
   1f6da:	42a2      	cmp	r2, r4
   1f6dc:	d1fa      	bne.n	1f6d4 <memcpy+0x6c>
   1f6de:	e7ce      	b.n	1f67e <memcpy+0x16>
   1f6e0:	680c      	ldr	r4, [r1, #0]
   1f6e2:	601c      	str	r4, [r3, #0]
   1f6e4:	684c      	ldr	r4, [r1, #4]
   1f6e6:	605c      	str	r4, [r3, #4]
   1f6e8:	688c      	ldr	r4, [r1, #8]
   1f6ea:	609c      	str	r4, [r3, #8]
   1f6ec:	68cc      	ldr	r4, [r1, #12]
   1f6ee:	60dc      	str	r4, [r3, #12]
   1f6f0:	690c      	ldr	r4, [r1, #16]
   1f6f2:	611c      	str	r4, [r3, #16]
   1f6f4:	694c      	ldr	r4, [r1, #20]
   1f6f6:	615c      	str	r4, [r3, #20]
   1f6f8:	698c      	ldr	r4, [r1, #24]
   1f6fa:	619c      	str	r4, [r3, #24]
   1f6fc:	69cc      	ldr	r4, [r1, #28]
   1f6fe:	61dc      	str	r4, [r3, #28]
   1f700:	6a0c      	ldr	r4, [r1, #32]
   1f702:	621c      	str	r4, [r3, #32]
   1f704:	6a4c      	ldr	r4, [r1, #36]	; 0x24
   1f706:	625c      	str	r4, [r3, #36]	; 0x24
   1f708:	6a8c      	ldr	r4, [r1, #40]	; 0x28
   1f70a:	629c      	str	r4, [r3, #40]	; 0x28
   1f70c:	6acc      	ldr	r4, [r1, #44]	; 0x2c
   1f70e:	62dc      	str	r4, [r3, #44]	; 0x2c
   1f710:	6b0c      	ldr	r4, [r1, #48]	; 0x30
   1f712:	631c      	str	r4, [r3, #48]	; 0x30
   1f714:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   1f716:	635c      	str	r4, [r3, #52]	; 0x34
   1f718:	6b8c      	ldr	r4, [r1, #56]	; 0x38
   1f71a:	639c      	str	r4, [r3, #56]	; 0x38
   1f71c:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
   1f71e:	3140      	adds	r1, #64	; 0x40
   1f720:	63dc      	str	r4, [r3, #60]	; 0x3c
   1f722:	3340      	adds	r3, #64	; 0x40
   1f724:	1ad4      	subs	r4, r2, r3
   1f726:	2c3f      	cmp	r4, #63	; 0x3f
   1f728:	dcda      	bgt.n	1f6e0 <memcpy+0x78>
   1f72a:	e00a      	b.n	1f742 <memcpy+0xda>
   1f72c:	680c      	ldr	r4, [r1, #0]
   1f72e:	601c      	str	r4, [r3, #0]
   1f730:	684c      	ldr	r4, [r1, #4]
   1f732:	605c      	str	r4, [r3, #4]
   1f734:	688c      	ldr	r4, [r1, #8]
   1f736:	609c      	str	r4, [r3, #8]
   1f738:	68cc      	ldr	r4, [r1, #12]
   1f73a:	3110      	adds	r1, #16
   1f73c:	60dc      	str	r4, [r3, #12]
   1f73e:	3310      	adds	r3, #16
   1f740:	1ad4      	subs	r4, r2, r3
   1f742:	2c0f      	cmp	r4, #15
   1f744:	dcf2      	bgt.n	1f72c <memcpy+0xc4>
   1f746:	e004      	b.n	1f752 <memcpy+0xea>
   1f748:	f851 4b04 	ldr.w	r4, [r1], #4
   1f74c:	f843 4b04 	str.w	r4, [r3], #4
   1f750:	1ad4      	subs	r4, r2, r3
   1f752:	2c03      	cmp	r4, #3
   1f754:	dcf8      	bgt.n	1f748 <memcpy+0xe0>
   1f756:	e7ba      	b.n	1f6ce <memcpy+0x66>

0001f758 <memmove>:
   1f758:	4288      	cmp	r0, r1
   1f75a:	b4f0      	push	{r4, r5, r6, r7}
   1f75c:	d912      	bls.n	1f784 <memmove+0x2c>
   1f75e:	188d      	adds	r5, r1, r2
   1f760:	42a8      	cmp	r0, r5
   1f762:	d20f      	bcs.n	1f784 <memmove+0x2c>
   1f764:	b162      	cbz	r2, 1f780 <memmove+0x28>
   1f766:	4613      	mov	r3, r2
   1f768:	1882      	adds	r2, r0, r2
   1f76a:	4259      	negs	r1, r3
   1f76c:	186d      	adds	r5, r5, r1
   1f76e:	1852      	adds	r2, r2, r1
   1f770:	18ec      	adds	r4, r5, r3
   1f772:	18d1      	adds	r1, r2, r3
   1f774:	3b01      	subs	r3, #1
   1f776:	f814 4c01 	ldrb.w	r4, [r4, #-1]
   1f77a:	f801 4c01 	strb.w	r4, [r1, #-1]
   1f77e:	d1f7      	bne.n	1f770 <memmove+0x18>
   1f780:	bcf0      	pop	{r4, r5, r6, r7}
   1f782:	4770      	bx	lr
   1f784:	2a0f      	cmp	r2, #15
   1f786:	bf98      	it	ls
   1f788:	4603      	movls	r3, r0
   1f78a:	d937      	bls.n	1f7fc <memmove+0xa4>
   1f78c:	ea40 0301 	orr.w	r3, r0, r1
   1f790:	079b      	lsls	r3, r3, #30
   1f792:	d13d      	bne.n	1f810 <memmove+0xb8>
   1f794:	f1a2 0710 	sub.w	r7, r2, #16
   1f798:	f101 0610 	add.w	r6, r1, #16
   1f79c:	460b      	mov	r3, r1
   1f79e:	4604      	mov	r4, r0
   1f7a0:	093f      	lsrs	r7, r7, #4
   1f7a2:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   1f7a6:	681d      	ldr	r5, [r3, #0]
   1f7a8:	6025      	str	r5, [r4, #0]
   1f7aa:	685d      	ldr	r5, [r3, #4]
   1f7ac:	6065      	str	r5, [r4, #4]
   1f7ae:	689d      	ldr	r5, [r3, #8]
   1f7b0:	60a5      	str	r5, [r4, #8]
   1f7b2:	68dd      	ldr	r5, [r3, #12]
   1f7b4:	3310      	adds	r3, #16
   1f7b6:	60e5      	str	r5, [r4, #12]
   1f7b8:	3410      	adds	r4, #16
   1f7ba:	429e      	cmp	r6, r3
   1f7bc:	d1f3      	bne.n	1f7a6 <memmove+0x4e>
   1f7be:	1c7c      	adds	r4, r7, #1
   1f7c0:	f002 020f 	and.w	r2, r2, #15
   1f7c4:	0124      	lsls	r4, r4, #4
   1f7c6:	2a03      	cmp	r2, #3
   1f7c8:	eb00 0304 	add.w	r3, r0, r4
   1f7cc:	4421      	add	r1, r4
   1f7ce:	d915      	bls.n	1f7fc <memmove+0xa4>
   1f7d0:	f1a2 0c04 	sub.w	ip, r2, #4
   1f7d4:	460d      	mov	r5, r1
   1f7d6:	461c      	mov	r4, r3
   1f7d8:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
   1f7dc:	eb03 078c 	add.w	r7, r3, ip, lsl #2
   1f7e0:	3704      	adds	r7, #4
   1f7e2:	f855 6b04 	ldr.w	r6, [r5], #4
   1f7e6:	f844 6b04 	str.w	r6, [r4], #4
   1f7ea:	42bc      	cmp	r4, r7
   1f7ec:	d1f9      	bne.n	1f7e2 <memmove+0x8a>
   1f7ee:	f10c 0401 	add.w	r4, ip, #1
   1f7f2:	f002 0203 	and.w	r2, r2, #3
   1f7f6:	00a4      	lsls	r4, r4, #2
   1f7f8:	1909      	adds	r1, r1, r4
   1f7fa:	191b      	adds	r3, r3, r4
   1f7fc:	2a00      	cmp	r2, #0
   1f7fe:	d0bf      	beq.n	1f780 <memmove+0x28>
   1f800:	188a      	adds	r2, r1, r2
   1f802:	f811 4b01 	ldrb.w	r4, [r1], #1
   1f806:	4291      	cmp	r1, r2
   1f808:	f803 4b01 	strb.w	r4, [r3], #1
   1f80c:	d1f9      	bne.n	1f802 <memmove+0xaa>
   1f80e:	e7b7      	b.n	1f780 <memmove+0x28>
   1f810:	4603      	mov	r3, r0
   1f812:	e7f5      	b.n	1f800 <memmove+0xa8>

0001f814 <memset>:
   1f814:	2a03      	cmp	r2, #3
   1f816:	b2c9      	uxtb	r1, r1
   1f818:	b470      	push	{r4, r5, r6}
   1f81a:	d807      	bhi.n	1f82c <memset+0x18>
   1f81c:	b122      	cbz	r2, 1f828 <memset+0x14>
   1f81e:	2300      	movs	r3, #0
   1f820:	54c1      	strb	r1, [r0, r3]
   1f822:	3301      	adds	r3, #1
   1f824:	4293      	cmp	r3, r2
   1f826:	d1fb      	bne.n	1f820 <memset+0xc>
   1f828:	bc70      	pop	{r4, r5, r6}
   1f82a:	4770      	bx	lr
   1f82c:	0785      	lsls	r5, r0, #30
   1f82e:	4402      	add	r2, r0
   1f830:	4603      	mov	r3, r0
   1f832:	d003      	beq.n	1f83c <memset+0x28>
   1f834:	f803 1b01 	strb.w	r1, [r3], #1
   1f838:	079c      	lsls	r4, r3, #30
   1f83a:	d1fb      	bne.n	1f834 <memset+0x20>
   1f83c:	020c      	lsls	r4, r1, #8
   1f83e:	1ad5      	subs	r5, r2, r3
   1f840:	1864      	adds	r4, r4, r1
   1f842:	0426      	lsls	r6, r4, #16
   1f844:	2d3f      	cmp	r5, #63	; 0x3f
   1f846:	4434      	add	r4, r6
   1f848:	dd1a      	ble.n	1f880 <memset+0x6c>
   1f84a:	601c      	str	r4, [r3, #0]
   1f84c:	605c      	str	r4, [r3, #4]
   1f84e:	609c      	str	r4, [r3, #8]
   1f850:	60dc      	str	r4, [r3, #12]
   1f852:	611c      	str	r4, [r3, #16]
   1f854:	615c      	str	r4, [r3, #20]
   1f856:	619c      	str	r4, [r3, #24]
   1f858:	61dc      	str	r4, [r3, #28]
   1f85a:	621c      	str	r4, [r3, #32]
   1f85c:	625c      	str	r4, [r3, #36]	; 0x24
   1f85e:	629c      	str	r4, [r3, #40]	; 0x28
   1f860:	62dc      	str	r4, [r3, #44]	; 0x2c
   1f862:	631c      	str	r4, [r3, #48]	; 0x30
   1f864:	635c      	str	r4, [r3, #52]	; 0x34
   1f866:	639c      	str	r4, [r3, #56]	; 0x38
   1f868:	63dc      	str	r4, [r3, #60]	; 0x3c
   1f86a:	3340      	adds	r3, #64	; 0x40
   1f86c:	1ad5      	subs	r5, r2, r3
   1f86e:	2d3f      	cmp	r5, #63	; 0x3f
   1f870:	dceb      	bgt.n	1f84a <memset+0x36>
   1f872:	e005      	b.n	1f880 <memset+0x6c>
   1f874:	601c      	str	r4, [r3, #0]
   1f876:	605c      	str	r4, [r3, #4]
   1f878:	609c      	str	r4, [r3, #8]
   1f87a:	60dc      	str	r4, [r3, #12]
   1f87c:	3310      	adds	r3, #16
   1f87e:	1ad5      	subs	r5, r2, r3
   1f880:	2d0f      	cmp	r5, #15
   1f882:	dcf7      	bgt.n	1f874 <memset+0x60>
   1f884:	e002      	b.n	1f88c <memset+0x78>
   1f886:	f843 4b04 	str.w	r4, [r3], #4
   1f88a:	1ad5      	subs	r5, r2, r3
   1f88c:	2d03      	cmp	r5, #3
   1f88e:	dcfa      	bgt.n	1f886 <memset+0x72>
   1f890:	4293      	cmp	r3, r2
   1f892:	d2c9      	bcs.n	1f828 <memset+0x14>
   1f894:	f803 1b01 	strb.w	r1, [r3], #1
   1f898:	4293      	cmp	r3, r2
   1f89a:	d1fb      	bne.n	1f894 <memset+0x80>
   1f89c:	e7c4      	b.n	1f828 <memset+0x14>
   1f89e:	bf00      	nop

0001f8a0 <__malloc_lock>:
   1f8a0:	4770      	bx	lr
   1f8a2:	bf00      	nop

0001f8a4 <__malloc_unlock>:
   1f8a4:	4770      	bx	lr
   1f8a6:	bf00      	nop

0001f8a8 <_putc_r>:
   1f8a8:	b570      	push	{r4, r5, r6, lr}
   1f8aa:	460d      	mov	r5, r1
   1f8ac:	4614      	mov	r4, r2
   1f8ae:	4606      	mov	r6, r0
   1f8b0:	b110      	cbz	r0, 1f8b8 <_putc_r+0x10>
   1f8b2:	6983      	ldr	r3, [r0, #24]
   1f8b4:	2b00      	cmp	r3, #0
   1f8b6:	d02f      	beq.n	1f918 <_putc_r+0x70>
   1f8b8:	f24c 1338 	movw	r3, #49464	; 0xc138
   1f8bc:	f2c0 0302 	movt	r3, #2
   1f8c0:	429c      	cmp	r4, r3
   1f8c2:	bf08      	it	eq
   1f8c4:	6874      	ldreq	r4, [r6, #4]
   1f8c6:	d00e      	beq.n	1f8e6 <_putc_r+0x3e>
   1f8c8:	f24c 1318 	movw	r3, #49432	; 0xc118
   1f8cc:	f2c0 0302 	movt	r3, #2
   1f8d0:	429c      	cmp	r4, r3
   1f8d2:	bf08      	it	eq
   1f8d4:	68b4      	ldreq	r4, [r6, #8]
   1f8d6:	d006      	beq.n	1f8e6 <_putc_r+0x3e>
   1f8d8:	f24c 03f8 	movw	r3, #49400	; 0xc0f8
   1f8dc:	f2c0 0302 	movt	r3, #2
   1f8e0:	429c      	cmp	r4, r3
   1f8e2:	bf08      	it	eq
   1f8e4:	68f4      	ldreq	r4, [r6, #12]
   1f8e6:	68a3      	ldr	r3, [r4, #8]
   1f8e8:	3b01      	subs	r3, #1
   1f8ea:	60a3      	str	r3, [r4, #8]
   1f8ec:	2b00      	cmp	r3, #0
   1f8ee:	db06      	blt.n	1f8fe <_putc_r+0x56>
   1f8f0:	6823      	ldr	r3, [r4, #0]
   1f8f2:	701d      	strb	r5, [r3, #0]
   1f8f4:	6823      	ldr	r3, [r4, #0]
   1f8f6:	f813 0b01 	ldrb.w	r0, [r3], #1
   1f8fa:	6023      	str	r3, [r4, #0]
   1f8fc:	bd70      	pop	{r4, r5, r6, pc}
   1f8fe:	69a2      	ldr	r2, [r4, #24]
   1f900:	4293      	cmp	r3, r2
   1f902:	db0c      	blt.n	1f91e <_putc_r+0x76>
   1f904:	6823      	ldr	r3, [r4, #0]
   1f906:	701d      	strb	r5, [r3, #0]
   1f908:	6823      	ldr	r3, [r4, #0]
   1f90a:	7819      	ldrb	r1, [r3, #0]
   1f90c:	290a      	cmp	r1, #10
   1f90e:	d00d      	beq.n	1f92c <_putc_r+0x84>
   1f910:	3301      	adds	r3, #1
   1f912:	4608      	mov	r0, r1
   1f914:	6023      	str	r3, [r4, #0]
   1f916:	bd70      	pop	{r4, r5, r6, pc}
   1f918:	f003 fb84 	bl	23024 <__sinit>
   1f91c:	e7cc      	b.n	1f8b8 <_putc_r+0x10>
   1f91e:	4630      	mov	r0, r6
   1f920:	4629      	mov	r1, r5
   1f922:	4622      	mov	r2, r4
   1f924:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1f928:	f002 b8a4 	b.w	21a74 <__swbuf_r>
   1f92c:	4630      	mov	r0, r6
   1f92e:	4622      	mov	r2, r4
   1f930:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1f934:	f002 b89e 	b.w	21a74 <__swbuf_r>

0001f938 <putc>:
   1f938:	b570      	push	{r4, r5, r6, lr}
   1f93a:	f240 0528 	movw	r5, #40	; 0x28
   1f93e:	f2c1 0500 	movt	r5, #4096	; 0x1000
   1f942:	4606      	mov	r6, r0
   1f944:	460c      	mov	r4, r1
   1f946:	6828      	ldr	r0, [r5, #0]
   1f948:	b110      	cbz	r0, 1f950 <putc+0x18>
   1f94a:	6983      	ldr	r3, [r0, #24]
   1f94c:	2b00      	cmp	r3, #0
   1f94e:	d02c      	beq.n	1f9aa <putc+0x72>
   1f950:	f24c 1338 	movw	r3, #49464	; 0xc138
   1f954:	f2c0 0302 	movt	r3, #2
   1f958:	429c      	cmp	r4, r3
   1f95a:	d02e      	beq.n	1f9ba <putc+0x82>
   1f95c:	f24c 1318 	movw	r3, #49432	; 0xc118
   1f960:	f2c0 0302 	movt	r3, #2
   1f964:	429c      	cmp	r4, r3
   1f966:	d032      	beq.n	1f9ce <putc+0x96>
   1f968:	f24c 03f8 	movw	r3, #49400	; 0xc0f8
   1f96c:	f2c0 0302 	movt	r3, #2
   1f970:	429c      	cmp	r4, r3
   1f972:	bf04      	itt	eq
   1f974:	682b      	ldreq	r3, [r5, #0]
   1f976:	68dc      	ldreq	r4, [r3, #12]
   1f978:	68a3      	ldr	r3, [r4, #8]
   1f97a:	3b01      	subs	r3, #1
   1f97c:	60a3      	str	r3, [r4, #8]
   1f97e:	2b00      	cmp	r3, #0
   1f980:	db06      	blt.n	1f990 <putc+0x58>
   1f982:	6823      	ldr	r3, [r4, #0]
   1f984:	701e      	strb	r6, [r3, #0]
   1f986:	6823      	ldr	r3, [r4, #0]
   1f988:	f813 0b01 	ldrb.w	r0, [r3], #1
   1f98c:	6023      	str	r3, [r4, #0]
   1f98e:	bd70      	pop	{r4, r5, r6, pc}
   1f990:	69a2      	ldr	r2, [r4, #24]
   1f992:	4293      	cmp	r3, r2
   1f994:	db14      	blt.n	1f9c0 <putc+0x88>
   1f996:	6823      	ldr	r3, [r4, #0]
   1f998:	701e      	strb	r6, [r3, #0]
   1f99a:	6823      	ldr	r3, [r4, #0]
   1f99c:	7819      	ldrb	r1, [r3, #0]
   1f99e:	290a      	cmp	r1, #10
   1f9a0:	d018      	beq.n	1f9d4 <putc+0x9c>
   1f9a2:	3301      	adds	r3, #1
   1f9a4:	4608      	mov	r0, r1
   1f9a6:	6023      	str	r3, [r4, #0]
   1f9a8:	bd70      	pop	{r4, r5, r6, pc}
   1f9aa:	f003 fb3b 	bl	23024 <__sinit>
   1f9ae:	f24c 1338 	movw	r3, #49464	; 0xc138
   1f9b2:	f2c0 0302 	movt	r3, #2
   1f9b6:	429c      	cmp	r4, r3
   1f9b8:	d1d0      	bne.n	1f95c <putc+0x24>
   1f9ba:	682b      	ldr	r3, [r5, #0]
   1f9bc:	685c      	ldr	r4, [r3, #4]
   1f9be:	e7db      	b.n	1f978 <putc+0x40>
   1f9c0:	6828      	ldr	r0, [r5, #0]
   1f9c2:	4631      	mov	r1, r6
   1f9c4:	4622      	mov	r2, r4
   1f9c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1f9ca:	f002 b853 	b.w	21a74 <__swbuf_r>
   1f9ce:	682b      	ldr	r3, [r5, #0]
   1f9d0:	689c      	ldr	r4, [r3, #8]
   1f9d2:	e7d1      	b.n	1f978 <putc+0x40>
   1f9d4:	6828      	ldr	r0, [r5, #0]
   1f9d6:	4622      	mov	r2, r4
   1f9d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1f9dc:	f002 b84a 	b.w	21a74 <__swbuf_r>

0001f9e0 <realloc>:
   1f9e0:	f240 0328 	movw	r3, #40	; 0x28
   1f9e4:	460a      	mov	r2, r1
   1f9e6:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1f9ea:	4601      	mov	r1, r0
   1f9ec:	6818      	ldr	r0, [r3, #0]
   1f9ee:	f000 b801 	b.w	1f9f4 <_realloc_r>
   1f9f2:	bf00      	nop

0001f9f4 <_realloc_r>:
   1f9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f9f8:	460c      	mov	r4, r1
   1f9fa:	b083      	sub	sp, #12
   1f9fc:	4607      	mov	r7, r0
   1f9fe:	4690      	mov	r8, r2
   1fa00:	2900      	cmp	r1, #0
   1fa02:	f000 8120 	beq.w	1fc46 <_realloc_r+0x252>
   1fa06:	f108 050b 	add.w	r5, r8, #11
   1fa0a:	f7ff ff49 	bl	1f8a0 <__malloc_lock>
   1fa0e:	2d16      	cmp	r5, #22
   1fa10:	f854 1c04 	ldr.w	r1, [r4, #-4]
   1fa14:	f200 8093 	bhi.w	1fb3e <_realloc_r+0x14a>
   1fa18:	2210      	movs	r2, #16
   1fa1a:	2600      	movs	r6, #0
   1fa1c:	4615      	mov	r5, r2
   1fa1e:	4545      	cmp	r5, r8
   1fa20:	bf38      	it	cc
   1fa22:	f046 0601 	orrcc.w	r6, r6, #1
   1fa26:	2e00      	cmp	r6, #0
   1fa28:	f040 8113 	bne.w	1fc52 <_realloc_r+0x25e>
   1fa2c:	f021 0a03 	bic.w	sl, r1, #3
   1fa30:	f1a4 0b08 	sub.w	fp, r4, #8
   1fa34:	4592      	cmp	sl, r2
   1fa36:	bfa8      	it	ge
   1fa38:	4656      	movge	r6, sl
   1fa3a:	da6a      	bge.n	1fb12 <_realloc_r+0x11e>
   1fa3c:	f240 191c 	movw	r9, #284	; 0x11c
   1fa40:	eb0b 000a 	add.w	r0, fp, sl
   1fa44:	f2c1 0900 	movt	r9, #4096	; 0x1000
   1fa48:	f8d9 c008 	ldr.w	ip, [r9, #8]
   1fa4c:	4584      	cmp	ip, r0
   1fa4e:	f000 8105 	beq.w	1fc5c <_realloc_r+0x268>
   1fa52:	6843      	ldr	r3, [r0, #4]
   1fa54:	f023 0e01 	bic.w	lr, r3, #1
   1fa58:	4486      	add	lr, r0
   1fa5a:	f8de e004 	ldr.w	lr, [lr, #4]
   1fa5e:	f01e 0f01 	tst.w	lr, #1
   1fa62:	bf1c      	itt	ne
   1fa64:	46b6      	movne	lr, r6
   1fa66:	4630      	movne	r0, r6
   1fa68:	d06e      	beq.n	1fb48 <_realloc_r+0x154>
   1fa6a:	07cb      	lsls	r3, r1, #31
   1fa6c:	f100 808c 	bmi.w	1fb88 <_realloc_r+0x194>
   1fa70:	f854 3c08 	ldr.w	r3, [r4, #-8]
   1fa74:	ebc3 030b 	rsb	r3, r3, fp
   1fa78:	6859      	ldr	r1, [r3, #4]
   1fa7a:	f021 0103 	bic.w	r1, r1, #3
   1fa7e:	2800      	cmp	r0, #0
   1fa80:	f000 80aa 	beq.w	1fbd8 <_realloc_r+0x1e4>
   1fa84:	4560      	cmp	r0, ip
   1fa86:	eb01 0c0a 	add.w	ip, r1, sl
   1fa8a:	f000 813b 	beq.w	1fd04 <_realloc_r+0x310>
   1fa8e:	eb0e 060c 	add.w	r6, lr, ip
   1fa92:	42b2      	cmp	r2, r6
   1fa94:	f300 80a2 	bgt.w	1fbdc <_realloc_r+0x1e8>
   1fa98:	68c1      	ldr	r1, [r0, #12]
   1fa9a:	469e      	mov	lr, r3
   1fa9c:	6880      	ldr	r0, [r0, #8]
   1fa9e:	f1aa 0204 	sub.w	r2, sl, #4
   1faa2:	2a24      	cmp	r2, #36	; 0x24
   1faa4:	60c1      	str	r1, [r0, #12]
   1faa6:	6088      	str	r0, [r1, #8]
   1faa8:	68d9      	ldr	r1, [r3, #12]
   1faaa:	f85e 0f08 	ldr.w	r0, [lr, #8]!
   1faae:	60c1      	str	r1, [r0, #12]
   1fab0:	6088      	str	r0, [r1, #8]
   1fab2:	f200 8179 	bhi.w	1fda8 <_realloc_r+0x3b4>
   1fab6:	2a13      	cmp	r2, #19
   1fab8:	bf9c      	itt	ls
   1faba:	4672      	movls	r2, lr
   1fabc:	4621      	movls	r1, r4
   1fabe:	d91f      	bls.n	1fb00 <_realloc_r+0x10c>
   1fac0:	6821      	ldr	r1, [r4, #0]
   1fac2:	2a1b      	cmp	r2, #27
   1fac4:	bf98      	it	ls
   1fac6:	f103 0210 	addls.w	r2, r3, #16
   1faca:	6099      	str	r1, [r3, #8]
   1facc:	6861      	ldr	r1, [r4, #4]
   1face:	60d9      	str	r1, [r3, #12]
   1fad0:	bf98      	it	ls
   1fad2:	f104 0108 	addls.w	r1, r4, #8
   1fad6:	d913      	bls.n	1fb00 <_realloc_r+0x10c>
   1fad8:	68a1      	ldr	r1, [r4, #8]
   1fada:	2a24      	cmp	r2, #36	; 0x24
   1fadc:	bf14      	ite	ne
   1fade:	f103 0218 	addne.w	r2, r3, #24
   1fae2:	f103 0220 	addeq.w	r2, r3, #32
   1fae6:	6119      	str	r1, [r3, #16]
   1fae8:	68e1      	ldr	r1, [r4, #12]
   1faea:	6159      	str	r1, [r3, #20]
   1faec:	bf11      	iteee	ne
   1faee:	f104 0110 	addne.w	r1, r4, #16
   1faf2:	6920      	ldreq	r0, [r4, #16]
   1faf4:	f104 0118 	addeq.w	r1, r4, #24
   1faf8:	6198      	streq	r0, [r3, #24]
   1fafa:	bf04      	itt	eq
   1fafc:	6960      	ldreq	r0, [r4, #20]
   1fafe:	61d8      	streq	r0, [r3, #28]
   1fb00:	6808      	ldr	r0, [r1, #0]
   1fb02:	4674      	mov	r4, lr
   1fb04:	6010      	str	r0, [r2, #0]
   1fb06:	469b      	mov	fp, r3
   1fb08:	6848      	ldr	r0, [r1, #4]
   1fb0a:	6050      	str	r0, [r2, #4]
   1fb0c:	6889      	ldr	r1, [r1, #8]
   1fb0e:	6091      	str	r1, [r2, #8]
   1fb10:	6859      	ldr	r1, [r3, #4]
   1fb12:	1b72      	subs	r2, r6, r5
   1fb14:	2a0f      	cmp	r2, #15
   1fb16:	d822      	bhi.n	1fb5e <_realloc_r+0x16a>
   1fb18:	eb0b 0306 	add.w	r3, fp, r6
   1fb1c:	f001 0101 	and.w	r1, r1, #1
   1fb20:	430e      	orrs	r6, r1
   1fb22:	f8cb 6004 	str.w	r6, [fp, #4]
   1fb26:	685a      	ldr	r2, [r3, #4]
   1fb28:	f042 0201 	orr.w	r2, r2, #1
   1fb2c:	605a      	str	r2, [r3, #4]
   1fb2e:	4638      	mov	r0, r7
   1fb30:	46a0      	mov	r8, r4
   1fb32:	f7ff feb7 	bl	1f8a4 <__malloc_unlock>
   1fb36:	4640      	mov	r0, r8
   1fb38:	b003      	add	sp, #12
   1fb3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fb3e:	f025 0507 	bic.w	r5, r5, #7
   1fb42:	462a      	mov	r2, r5
   1fb44:	0fee      	lsrs	r6, r5, #31
   1fb46:	e76a      	b.n	1fa1e <_realloc_r+0x2a>
   1fb48:	f023 0e03 	bic.w	lr, r3, #3
   1fb4c:	eb0e 060a 	add.w	r6, lr, sl
   1fb50:	42b2      	cmp	r2, r6
   1fb52:	dc8a      	bgt.n	1fa6a <_realloc_r+0x76>
   1fb54:	68c3      	ldr	r3, [r0, #12]
   1fb56:	6882      	ldr	r2, [r0, #8]
   1fb58:	60d3      	str	r3, [r2, #12]
   1fb5a:	609a      	str	r2, [r3, #8]
   1fb5c:	e7d9      	b.n	1fb12 <_realloc_r+0x11e>
   1fb5e:	eb0b 0605 	add.w	r6, fp, r5
   1fb62:	f001 0101 	and.w	r1, r1, #1
   1fb66:	18b3      	adds	r3, r6, r2
   1fb68:	430d      	orrs	r5, r1
   1fb6a:	f042 0201 	orr.w	r2, r2, #1
   1fb6e:	f8cb 5004 	str.w	r5, [fp, #4]
   1fb72:	6072      	str	r2, [r6, #4]
   1fb74:	4638      	mov	r0, r7
   1fb76:	685a      	ldr	r2, [r3, #4]
   1fb78:	f106 0108 	add.w	r1, r6, #8
   1fb7c:	f042 0201 	orr.w	r2, r2, #1
   1fb80:	605a      	str	r2, [r3, #4]
   1fb82:	f003 fb3b 	bl	231fc <_free_r>
   1fb86:	e7d2      	b.n	1fb2e <_realloc_r+0x13a>
   1fb88:	4641      	mov	r1, r8
   1fb8a:	4638      	mov	r0, r7
   1fb8c:	f7ff fa3a 	bl	1f004 <_malloc_r>
   1fb90:	4680      	mov	r8, r0
   1fb92:	b1e8      	cbz	r0, 1fbd0 <_realloc_r+0x1dc>
   1fb94:	f854 1c04 	ldr.w	r1, [r4, #-4]
   1fb98:	f1a0 0208 	sub.w	r2, r0, #8
   1fb9c:	f021 0301 	bic.w	r3, r1, #1
   1fba0:	445b      	add	r3, fp
   1fba2:	429a      	cmp	r2, r3
   1fba4:	f000 80fa 	beq.w	1fd9c <_realloc_r+0x3a8>
   1fba8:	f1aa 0204 	sub.w	r2, sl, #4
   1fbac:	2a24      	cmp	r2, #36	; 0x24
   1fbae:	f200 80a5 	bhi.w	1fcfc <_realloc_r+0x308>
   1fbb2:	2a13      	cmp	r2, #19
   1fbb4:	bf9c      	itt	ls
   1fbb6:	4603      	movls	r3, r0
   1fbb8:	4622      	movls	r2, r4
   1fbba:	d870      	bhi.n	1fc9e <_realloc_r+0x2aa>
   1fbbc:	6811      	ldr	r1, [r2, #0]
   1fbbe:	6019      	str	r1, [r3, #0]
   1fbc0:	6851      	ldr	r1, [r2, #4]
   1fbc2:	6059      	str	r1, [r3, #4]
   1fbc4:	6892      	ldr	r2, [r2, #8]
   1fbc6:	609a      	str	r2, [r3, #8]
   1fbc8:	4638      	mov	r0, r7
   1fbca:	4621      	mov	r1, r4
   1fbcc:	f003 fb16 	bl	231fc <_free_r>
   1fbd0:	4638      	mov	r0, r7
   1fbd2:	f7ff fe67 	bl	1f8a4 <__malloc_unlock>
   1fbd6:	e7ae      	b.n	1fb36 <_realloc_r+0x142>
   1fbd8:	eb01 0c0a 	add.w	ip, r1, sl
   1fbdc:	4562      	cmp	r2, ip
   1fbde:	dcd3      	bgt.n	1fb88 <_realloc_r+0x194>
   1fbe0:	461e      	mov	r6, r3
   1fbe2:	68d9      	ldr	r1, [r3, #12]
   1fbe4:	f1aa 0204 	sub.w	r2, sl, #4
   1fbe8:	f856 0f08 	ldr.w	r0, [r6, #8]!
   1fbec:	2a24      	cmp	r2, #36	; 0x24
   1fbee:	60c1      	str	r1, [r0, #12]
   1fbf0:	6088      	str	r0, [r1, #8]
   1fbf2:	d875      	bhi.n	1fce0 <_realloc_r+0x2ec>
   1fbf4:	2a13      	cmp	r2, #19
   1fbf6:	bf9c      	itt	ls
   1fbf8:	4632      	movls	r2, r6
   1fbfa:	4621      	movls	r1, r4
   1fbfc:	d91f      	bls.n	1fc3e <_realloc_r+0x24a>
   1fbfe:	6821      	ldr	r1, [r4, #0]
   1fc00:	2a1b      	cmp	r2, #27
   1fc02:	bf98      	it	ls
   1fc04:	f103 0210 	addls.w	r2, r3, #16
   1fc08:	6099      	str	r1, [r3, #8]
   1fc0a:	6861      	ldr	r1, [r4, #4]
   1fc0c:	60d9      	str	r1, [r3, #12]
   1fc0e:	bf98      	it	ls
   1fc10:	f104 0108 	addls.w	r1, r4, #8
   1fc14:	d913      	bls.n	1fc3e <_realloc_r+0x24a>
   1fc16:	68a1      	ldr	r1, [r4, #8]
   1fc18:	2a24      	cmp	r2, #36	; 0x24
   1fc1a:	bf14      	ite	ne
   1fc1c:	f103 0218 	addne.w	r2, r3, #24
   1fc20:	f103 0220 	addeq.w	r2, r3, #32
   1fc24:	6119      	str	r1, [r3, #16]
   1fc26:	68e1      	ldr	r1, [r4, #12]
   1fc28:	6159      	str	r1, [r3, #20]
   1fc2a:	bf11      	iteee	ne
   1fc2c:	f104 0110 	addne.w	r1, r4, #16
   1fc30:	6920      	ldreq	r0, [r4, #16]
   1fc32:	f104 0118 	addeq.w	r1, r4, #24
   1fc36:	6198      	streq	r0, [r3, #24]
   1fc38:	bf04      	itt	eq
   1fc3a:	6960      	ldreq	r0, [r4, #20]
   1fc3c:	61d8      	streq	r0, [r3, #28]
   1fc3e:	4634      	mov	r4, r6
   1fc40:	6808      	ldr	r0, [r1, #0]
   1fc42:	4666      	mov	r6, ip
   1fc44:	e75e      	b.n	1fb04 <_realloc_r+0x110>
   1fc46:	4611      	mov	r1, r2
   1fc48:	b003      	add	sp, #12
   1fc4a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fc4e:	f7ff b9d9 	b.w	1f004 <_malloc_r>
   1fc52:	230c      	movs	r3, #12
   1fc54:	f04f 0800 	mov.w	r8, #0
   1fc58:	603b      	str	r3, [r7, #0]
   1fc5a:	e76c      	b.n	1fb36 <_realloc_r+0x142>
   1fc5c:	f8dc 6004 	ldr.w	r6, [ip, #4]
   1fc60:	f105 0310 	add.w	r3, r5, #16
   1fc64:	f026 0e03 	bic.w	lr, r6, #3
   1fc68:	eb0e 000a 	add.w	r0, lr, sl
   1fc6c:	4298      	cmp	r0, r3
   1fc6e:	bfb8      	it	lt
   1fc70:	4660      	movlt	r0, ip
   1fc72:	f6ff aefa 	blt.w	1fa6a <_realloc_r+0x76>
   1fc76:	eb0b 0305 	add.w	r3, fp, r5
   1fc7a:	1b42      	subs	r2, r0, r5
   1fc7c:	f042 0201 	orr.w	r2, r2, #1
   1fc80:	f8c9 3008 	str.w	r3, [r9, #8]
   1fc84:	605a      	str	r2, [r3, #4]
   1fc86:	4638      	mov	r0, r7
   1fc88:	f854 2c04 	ldr.w	r2, [r4, #-4]
   1fc8c:	46a0      	mov	r8, r4
   1fc8e:	f002 0301 	and.w	r3, r2, #1
   1fc92:	431d      	orrs	r5, r3
   1fc94:	f844 5c04 	str.w	r5, [r4, #-4]
   1fc98:	f7ff fe04 	bl	1f8a4 <__malloc_unlock>
   1fc9c:	e74b      	b.n	1fb36 <_realloc_r+0x142>
   1fc9e:	6823      	ldr	r3, [r4, #0]
   1fca0:	2a1b      	cmp	r2, #27
   1fca2:	bf98      	it	ls
   1fca4:	f104 0208 	addls.w	r2, r4, #8
   1fca8:	6003      	str	r3, [r0, #0]
   1fcaa:	6863      	ldr	r3, [r4, #4]
   1fcac:	6043      	str	r3, [r0, #4]
   1fcae:	bf98      	it	ls
   1fcb0:	f100 0308 	addls.w	r3, r0, #8
   1fcb4:	d982      	bls.n	1fbbc <_realloc_r+0x1c8>
   1fcb6:	68a3      	ldr	r3, [r4, #8]
   1fcb8:	2a24      	cmp	r2, #36	; 0x24
   1fcba:	bf14      	ite	ne
   1fcbc:	f104 0210 	addne.w	r2, r4, #16
   1fcc0:	f104 0218 	addeq.w	r2, r4, #24
   1fcc4:	6083      	str	r3, [r0, #8]
   1fcc6:	68e3      	ldr	r3, [r4, #12]
   1fcc8:	60c3      	str	r3, [r0, #12]
   1fcca:	bf11      	iteee	ne
   1fccc:	f100 0310 	addne.w	r3, r0, #16
   1fcd0:	6921      	ldreq	r1, [r4, #16]
   1fcd2:	f100 0318 	addeq.w	r3, r0, #24
   1fcd6:	6101      	streq	r1, [r0, #16]
   1fcd8:	bf04      	itt	eq
   1fcda:	6961      	ldreq	r1, [r4, #20]
   1fcdc:	6141      	streq	r1, [r0, #20]
   1fcde:	e76d      	b.n	1fbbc <_realloc_r+0x1c8>
   1fce0:	4621      	mov	r1, r4
   1fce2:	4630      	mov	r0, r6
   1fce4:	e88d 1008 	stmia.w	sp, {r3, ip}
   1fce8:	f7ff fd36 	bl	1f758 <memmove>
   1fcec:	9b00      	ldr	r3, [sp, #0]
   1fcee:	4634      	mov	r4, r6
   1fcf0:	f8dd c004 	ldr.w	ip, [sp, #4]
   1fcf4:	469b      	mov	fp, r3
   1fcf6:	4666      	mov	r6, ip
   1fcf8:	6859      	ldr	r1, [r3, #4]
   1fcfa:	e70a      	b.n	1fb12 <_realloc_r+0x11e>
   1fcfc:	4621      	mov	r1, r4
   1fcfe:	f7ff fd2b 	bl	1f758 <memmove>
   1fd02:	e761      	b.n	1fbc8 <_realloc_r+0x1d4>
   1fd04:	f105 0110 	add.w	r1, r5, #16
   1fd08:	eb0e 060c 	add.w	r6, lr, ip
   1fd0c:	428e      	cmp	r6, r1
   1fd0e:	f6ff af65 	blt.w	1fbdc <_realloc_r+0x1e8>
   1fd12:	4698      	mov	r8, r3
   1fd14:	68d9      	ldr	r1, [r3, #12]
   1fd16:	f1aa 0204 	sub.w	r2, sl, #4
   1fd1a:	f858 0f08 	ldr.w	r0, [r8, #8]!
   1fd1e:	2a24      	cmp	r2, #36	; 0x24
   1fd20:	60c1      	str	r1, [r0, #12]
   1fd22:	6088      	str	r0, [r1, #8]
   1fd24:	d84a      	bhi.n	1fdbc <_realloc_r+0x3c8>
   1fd26:	2a13      	cmp	r2, #19
   1fd28:	bf9c      	itt	ls
   1fd2a:	4642      	movls	r2, r8
   1fd2c:	4621      	movls	r1, r4
   1fd2e:	d91f      	bls.n	1fd70 <_realloc_r+0x37c>
   1fd30:	6821      	ldr	r1, [r4, #0]
   1fd32:	2a1b      	cmp	r2, #27
   1fd34:	bf98      	it	ls
   1fd36:	f103 0210 	addls.w	r2, r3, #16
   1fd3a:	6099      	str	r1, [r3, #8]
   1fd3c:	6861      	ldr	r1, [r4, #4]
   1fd3e:	60d9      	str	r1, [r3, #12]
   1fd40:	bf98      	it	ls
   1fd42:	f104 0108 	addls.w	r1, r4, #8
   1fd46:	d913      	bls.n	1fd70 <_realloc_r+0x37c>
   1fd48:	68a1      	ldr	r1, [r4, #8]
   1fd4a:	2a24      	cmp	r2, #36	; 0x24
   1fd4c:	bf14      	ite	ne
   1fd4e:	f103 0218 	addne.w	r2, r3, #24
   1fd52:	f103 0220 	addeq.w	r2, r3, #32
   1fd56:	6119      	str	r1, [r3, #16]
   1fd58:	68e1      	ldr	r1, [r4, #12]
   1fd5a:	6159      	str	r1, [r3, #20]
   1fd5c:	bf11      	iteee	ne
   1fd5e:	f104 0110 	addne.w	r1, r4, #16
   1fd62:	6920      	ldreq	r0, [r4, #16]
   1fd64:	f104 0118 	addeq.w	r1, r4, #24
   1fd68:	6198      	streq	r0, [r3, #24]
   1fd6a:	bf04      	itt	eq
   1fd6c:	6960      	ldreq	r0, [r4, #20]
   1fd6e:	61d8      	streq	r0, [r3, #28]
   1fd70:	6808      	ldr	r0, [r1, #0]
   1fd72:	6010      	str	r0, [r2, #0]
   1fd74:	6848      	ldr	r0, [r1, #4]
   1fd76:	6050      	str	r0, [r2, #4]
   1fd78:	6889      	ldr	r1, [r1, #8]
   1fd7a:	6091      	str	r1, [r2, #8]
   1fd7c:	195a      	adds	r2, r3, r5
   1fd7e:	1b71      	subs	r1, r6, r5
   1fd80:	f041 0101 	orr.w	r1, r1, #1
   1fd84:	f8c9 2008 	str.w	r2, [r9, #8]
   1fd88:	6051      	str	r1, [r2, #4]
   1fd8a:	4638      	mov	r0, r7
   1fd8c:	6859      	ldr	r1, [r3, #4]
   1fd8e:	f001 0201 	and.w	r2, r1, #1
   1fd92:	4315      	orrs	r5, r2
   1fd94:	605d      	str	r5, [r3, #4]
   1fd96:	f7ff fd85 	bl	1f8a4 <__malloc_unlock>
   1fd9a:	e6cc      	b.n	1fb36 <_realloc_r+0x142>
   1fd9c:	f850 6c04 	ldr.w	r6, [r0, #-4]
   1fda0:	f026 0603 	bic.w	r6, r6, #3
   1fda4:	4456      	add	r6, sl
   1fda6:	e6b4      	b.n	1fb12 <_realloc_r+0x11e>
   1fda8:	4621      	mov	r1, r4
   1fdaa:	4670      	mov	r0, lr
   1fdac:	9300      	str	r3, [sp, #0]
   1fdae:	4674      	mov	r4, lr
   1fdb0:	f7ff fcd2 	bl	1f758 <memmove>
   1fdb4:	9b00      	ldr	r3, [sp, #0]
   1fdb6:	469b      	mov	fp, r3
   1fdb8:	6859      	ldr	r1, [r3, #4]
   1fdba:	e6aa      	b.n	1fb12 <_realloc_r+0x11e>
   1fdbc:	4640      	mov	r0, r8
   1fdbe:	4621      	mov	r1, r4
   1fdc0:	9300      	str	r3, [sp, #0]
   1fdc2:	f7ff fcc9 	bl	1f758 <memmove>
   1fdc6:	9b00      	ldr	r3, [sp, #0]
   1fdc8:	e7d8      	b.n	1fd7c <_realloc_r+0x388>
   1fdca:	bf00      	nop

0001fdcc <_sbrk_r>:
   1fdcc:	b538      	push	{r3, r4, r5, lr}
   1fdce:	f643 34c8 	movw	r4, #15304	; 0x3bc8
   1fdd2:	f2c1 0400 	movt	r4, #4096	; 0x1000
   1fdd6:	4605      	mov	r5, r0
   1fdd8:	4608      	mov	r0, r1
   1fdda:	2300      	movs	r3, #0
   1fddc:	6023      	str	r3, [r4, #0]
   1fdde:	f7e5 ff5d 	bl	5c9c <_sbrk>
   1fde2:	1c43      	adds	r3, r0, #1
   1fde4:	d000      	beq.n	1fde8 <_sbrk_r+0x1c>
   1fde6:	bd38      	pop	{r3, r4, r5, pc}
   1fde8:	6823      	ldr	r3, [r4, #0]
   1fdea:	2b00      	cmp	r3, #0
   1fdec:	d0fb      	beq.n	1fde6 <_sbrk_r+0x1a>
   1fdee:	602b      	str	r3, [r5, #0]
   1fdf0:	bd38      	pop	{r3, r4, r5, pc}
   1fdf2:	bf00      	nop

0001fdf4 <_init_signal_r>:
   1fdf4:	b538      	push	{r3, r4, r5, lr}
   1fdf6:	4604      	mov	r4, r0
   1fdf8:	6c45      	ldr	r5, [r0, #68]	; 0x44
   1fdfa:	b10d      	cbz	r5, 1fe00 <_init_signal_r+0xc>
   1fdfc:	2000      	movs	r0, #0
   1fdfe:	bd38      	pop	{r3, r4, r5, pc}
   1fe00:	2180      	movs	r1, #128	; 0x80
   1fe02:	f7ff f8ff 	bl	1f004 <_malloc_r>
   1fe06:	6460      	str	r0, [r4, #68]	; 0x44
   1fe08:	b140      	cbz	r0, 1fe1c <_init_signal_r+0x28>
   1fe0a:	462b      	mov	r3, r5
   1fe0c:	e000      	b.n	1fe10 <_init_signal_r+0x1c>
   1fe0e:	6c60      	ldr	r0, [r4, #68]	; 0x44
   1fe10:	5143      	str	r3, [r0, r5]
   1fe12:	3504      	adds	r5, #4
   1fe14:	2d80      	cmp	r5, #128	; 0x80
   1fe16:	d1fa      	bne.n	1fe0e <_init_signal_r+0x1a>
   1fe18:	2000      	movs	r0, #0
   1fe1a:	bd38      	pop	{r3, r4, r5, pc}
   1fe1c:	f04f 30ff 	mov.w	r0, #4294967295
   1fe20:	bd38      	pop	{r3, r4, r5, pc}
   1fe22:	bf00      	nop

0001fe24 <_signal_r>:
   1fe24:	291f      	cmp	r1, #31
   1fe26:	b510      	push	{r4, lr}
   1fe28:	4604      	mov	r4, r0
   1fe2a:	b082      	sub	sp, #8
   1fe2c:	d807      	bhi.n	1fe3e <_signal_r+0x1a>
   1fe2e:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1fe30:	b153      	cbz	r3, 1fe48 <_signal_r+0x24>
   1fe32:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   1fe36:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
   1fe3a:	b002      	add	sp, #8
   1fe3c:	bd10      	pop	{r4, pc}
   1fe3e:	2316      	movs	r3, #22
   1fe40:	f04f 30ff 	mov.w	r0, #4294967295
   1fe44:	6023      	str	r3, [r4, #0]
   1fe46:	e7f8      	b.n	1fe3a <_signal_r+0x16>
   1fe48:	9101      	str	r1, [sp, #4]
   1fe4a:	9200      	str	r2, [sp, #0]
   1fe4c:	f7ff ffd2 	bl	1fdf4 <_init_signal_r>
   1fe50:	9901      	ldr	r1, [sp, #4]
   1fe52:	9a00      	ldr	r2, [sp, #0]
   1fe54:	b908      	cbnz	r0, 1fe5a <_signal_r+0x36>
   1fe56:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1fe58:	e7eb      	b.n	1fe32 <_signal_r+0xe>
   1fe5a:	f04f 30ff 	mov.w	r0, #4294967295
   1fe5e:	e7ec      	b.n	1fe3a <_signal_r+0x16>

0001fe60 <_raise_r>:
   1fe60:	291f      	cmp	r1, #31
   1fe62:	b538      	push	{r3, r4, r5, lr}
   1fe64:	460c      	mov	r4, r1
   1fe66:	4605      	mov	r5, r0
   1fe68:	d81f      	bhi.n	1feaa <_raise_r+0x4a>
   1fe6a:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1fe6c:	b19a      	cbz	r2, 1fe96 <_raise_r+0x36>
   1fe6e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   1fe72:	b183      	cbz	r3, 1fe96 <_raise_r+0x36>
   1fe74:	2b01      	cmp	r3, #1
   1fe76:	d00c      	beq.n	1fe92 <_raise_r+0x32>
   1fe78:	1c58      	adds	r0, r3, #1
   1fe7a:	d006      	beq.n	1fe8a <_raise_r+0x2a>
   1fe7c:	2500      	movs	r5, #0
   1fe7e:	4608      	mov	r0, r1
   1fe80:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   1fe84:	4798      	blx	r3
   1fe86:	4628      	mov	r0, r5
   1fe88:	bd38      	pop	{r3, r4, r5, pc}
   1fe8a:	2316      	movs	r3, #22
   1fe8c:	2001      	movs	r0, #1
   1fe8e:	602b      	str	r3, [r5, #0]
   1fe90:	bd38      	pop	{r3, r4, r5, pc}
   1fe92:	2000      	movs	r0, #0
   1fe94:	bd38      	pop	{r3, r4, r5, pc}
   1fe96:	4628      	mov	r0, r5
   1fe98:	f000 f868 	bl	1ff6c <_getpid_r>
   1fe9c:	4622      	mov	r2, r4
   1fe9e:	4601      	mov	r1, r0
   1fea0:	4628      	mov	r0, r5
   1fea2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1fea6:	f000 b84d 	b.w	1ff44 <_kill_r>
   1feaa:	2316      	movs	r3, #22
   1feac:	f04f 30ff 	mov.w	r0, #4294967295
   1feb0:	602b      	str	r3, [r5, #0]
   1feb2:	bd38      	pop	{r3, r4, r5, pc}

0001feb4 <__sigtramp_r>:
   1feb4:	291f      	cmp	r1, #31
   1feb6:	b510      	push	{r4, lr}
   1feb8:	4604      	mov	r4, r0
   1feba:	b082      	sub	sp, #8
   1febc:	d81c      	bhi.n	1fef8 <__sigtramp_r+0x44>
   1febe:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1fec0:	b19b      	cbz	r3, 1feea <__sigtramp_r+0x36>
   1fec2:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   1fec6:	2001      	movs	r0, #1
   1fec8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   1fecc:	b14a      	cbz	r2, 1fee2 <__sigtramp_r+0x2e>
   1fece:	1c50      	adds	r0, r2, #1
   1fed0:	d009      	beq.n	1fee6 <__sigtramp_r+0x32>
   1fed2:	2003      	movs	r0, #3
   1fed4:	2a01      	cmp	r2, #1
   1fed6:	d004      	beq.n	1fee2 <__sigtramp_r+0x2e>
   1fed8:	2400      	movs	r4, #0
   1feda:	4608      	mov	r0, r1
   1fedc:	601c      	str	r4, [r3, #0]
   1fede:	4790      	blx	r2
   1fee0:	4620      	mov	r0, r4
   1fee2:	b002      	add	sp, #8
   1fee4:	bd10      	pop	{r4, pc}
   1fee6:	2002      	movs	r0, #2
   1fee8:	e7fb      	b.n	1fee2 <__sigtramp_r+0x2e>
   1feea:	9101      	str	r1, [sp, #4]
   1feec:	f7ff ff82 	bl	1fdf4 <_init_signal_r>
   1fef0:	9901      	ldr	r1, [sp, #4]
   1fef2:	b908      	cbnz	r0, 1fef8 <__sigtramp_r+0x44>
   1fef4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1fef6:	e7e4      	b.n	1fec2 <__sigtramp_r+0xe>
   1fef8:	f04f 30ff 	mov.w	r0, #4294967295
   1fefc:	e7f1      	b.n	1fee2 <__sigtramp_r+0x2e>
   1fefe:	bf00      	nop

0001ff00 <raise>:
   1ff00:	f240 0328 	movw	r3, #40	; 0x28
   1ff04:	4601      	mov	r1, r0
   1ff06:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1ff0a:	6818      	ldr	r0, [r3, #0]
   1ff0c:	f7ff bfa8 	b.w	1fe60 <_raise_r>

0001ff10 <signal>:
   1ff10:	f240 0328 	movw	r3, #40	; 0x28
   1ff14:	460a      	mov	r2, r1
   1ff16:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1ff1a:	4601      	mov	r1, r0
   1ff1c:	6818      	ldr	r0, [r3, #0]
   1ff1e:	f7ff bf81 	b.w	1fe24 <_signal_r>
   1ff22:	bf00      	nop

0001ff24 <_init_signal>:
   1ff24:	f240 0328 	movw	r3, #40	; 0x28
   1ff28:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1ff2c:	6818      	ldr	r0, [r3, #0]
   1ff2e:	f7ff bf61 	b.w	1fdf4 <_init_signal_r>
   1ff32:	bf00      	nop

0001ff34 <__sigtramp>:
   1ff34:	f240 0328 	movw	r3, #40	; 0x28
   1ff38:	4601      	mov	r1, r0
   1ff3a:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1ff3e:	6818      	ldr	r0, [r3, #0]
   1ff40:	f7ff bfb8 	b.w	1feb4 <__sigtramp_r>

0001ff44 <_kill_r>:
   1ff44:	b538      	push	{r3, r4, r5, lr}
   1ff46:	f643 34c8 	movw	r4, #15304	; 0x3bc8
   1ff4a:	f2c1 0400 	movt	r4, #4096	; 0x1000
   1ff4e:	4605      	mov	r5, r0
   1ff50:	4608      	mov	r0, r1
   1ff52:	4611      	mov	r1, r2
   1ff54:	2300      	movs	r3, #0
   1ff56:	6023      	str	r3, [r4, #0]
   1ff58:	f7e5 fe84 	bl	5c64 <_kill>
   1ff5c:	1c43      	adds	r3, r0, #1
   1ff5e:	d000      	beq.n	1ff62 <_kill_r+0x1e>
   1ff60:	bd38      	pop	{r3, r4, r5, pc}
   1ff62:	6823      	ldr	r3, [r4, #0]
   1ff64:	2b00      	cmp	r3, #0
   1ff66:	d0fb      	beq.n	1ff60 <_kill_r+0x1c>
   1ff68:	602b      	str	r3, [r5, #0]
   1ff6a:	bd38      	pop	{r3, r4, r5, pc}

0001ff6c <_getpid_r>:
   1ff6c:	f7e5 be8e 	b.w	5c8c <_getpid>

0001ff70 <_sprintf_r>:
   1ff70:	b40c      	push	{r2, r3}
   1ff72:	f44f 7302 	mov.w	r3, #520	; 0x208
   1ff76:	b570      	push	{r4, r5, r6, lr}
   1ff78:	b09c      	sub	sp, #112	; 0x70
   1ff7a:	ac20      	add	r4, sp, #128	; 0x80
   1ff7c:	460e      	mov	r6, r1
   1ff7e:	f8ad 3010 	strh.w	r3, [sp, #16]
   1ff82:	a901      	add	r1, sp, #4
   1ff84:	f854 2b04 	ldr.w	r2, [r4], #4
   1ff88:	f04f 33ff 	mov.w	r3, #4294967295
   1ff8c:	f8ad 3012 	strh.w	r3, [sp, #18]
   1ff90:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   1ff94:	4623      	mov	r3, r4
   1ff96:	9601      	str	r6, [sp, #4]
   1ff98:	9605      	str	r6, [sp, #20]
   1ff9a:	9503      	str	r5, [sp, #12]
   1ff9c:	9506      	str	r5, [sp, #24]
   1ff9e:	941b      	str	r4, [sp, #108]	; 0x6c
   1ffa0:	f000 faea 	bl	20578 <_svfprintf_r>
   1ffa4:	9b01      	ldr	r3, [sp, #4]
   1ffa6:	2200      	movs	r2, #0
   1ffa8:	701a      	strb	r2, [r3, #0]
   1ffaa:	b01c      	add	sp, #112	; 0x70
   1ffac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1ffb0:	b002      	add	sp, #8
   1ffb2:	4770      	bx	lr

0001ffb4 <sprintf>:
   1ffb4:	b40e      	push	{r1, r2, r3}
   1ffb6:	f240 0328 	movw	r3, #40	; 0x28
   1ffba:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ffbc:	b09c      	sub	sp, #112	; 0x70
   1ffbe:	ac21      	add	r4, sp, #132	; 0x84
   1ffc0:	f2c1 0300 	movt	r3, #4096	; 0x1000
   1ffc4:	4606      	mov	r6, r0
   1ffc6:	a901      	add	r1, sp, #4
   1ffc8:	f854 2b04 	ldr.w	r2, [r4], #4
   1ffcc:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   1ffd0:	6818      	ldr	r0, [r3, #0]
   1ffd2:	f44f 7702 	mov.w	r7, #520	; 0x208
   1ffd6:	4623      	mov	r3, r4
   1ffd8:	9601      	str	r6, [sp, #4]
   1ffda:	9605      	str	r6, [sp, #20]
   1ffdc:	f04f 36ff 	mov.w	r6, #4294967295
   1ffe0:	f8ad 7010 	strh.w	r7, [sp, #16]
   1ffe4:	f8ad 6012 	strh.w	r6, [sp, #18]
   1ffe8:	9503      	str	r5, [sp, #12]
   1ffea:	9506      	str	r5, [sp, #24]
   1ffec:	941b      	str	r4, [sp, #108]	; 0x6c
   1ffee:	f000 fac3 	bl	20578 <_svfprintf_r>
   1fff2:	9b01      	ldr	r3, [sp, #4]
   1fff4:	2200      	movs	r2, #0
   1fff6:	701a      	strb	r2, [r3, #0]
   1fff8:	b01c      	add	sp, #112	; 0x70
   1fffa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1fffe:	b003      	add	sp, #12
   20000:	4770      	bx	lr
   20002:	bf00      	nop

00020004 <strcasecmp>:
   20004:	f240 532c 	movw	r3, #1324	; 0x52c
   20008:	f2c1 0300 	movt	r3, #4096	; 0x1000
   2000c:	b470      	push	{r4, r5, r6}
   2000e:	681d      	ldr	r5, [r3, #0]
   20010:	f810 3b01 	ldrb.w	r3, [r0], #1
   20014:	18ec      	adds	r4, r5, r3
   20016:	461a      	mov	r2, r3
   20018:	7864      	ldrb	r4, [r4, #1]
   2001a:	f004 0403 	and.w	r4, r4, #3
   2001e:	2c01      	cmp	r4, #1
   20020:	f811 4b01 	ldrb.w	r4, [r1], #1
   20024:	bf08      	it	eq
   20026:	f103 0220 	addeq.w	r2, r3, #32
   2002a:	192e      	adds	r6, r5, r4
   2002c:	4623      	mov	r3, r4
   2002e:	7876      	ldrb	r6, [r6, #1]
   20030:	f006 0603 	and.w	r6, r6, #3
   20034:	2e01      	cmp	r6, #1
   20036:	bf08      	it	eq
   20038:	f104 0320 	addeq.w	r3, r4, #32
   2003c:	1ad2      	subs	r2, r2, r3
   2003e:	d101      	bne.n	20044 <strcasecmp+0x40>
   20040:	2b00      	cmp	r3, #0
   20042:	d1e5      	bne.n	20010 <strcasecmp+0xc>
   20044:	4610      	mov	r0, r2
   20046:	bc70      	pop	{r4, r5, r6}
   20048:	4770      	bx	lr
   2004a:	bf00      	nop

0002004c <strchr>:
   2004c:	b2c9      	uxtb	r1, r1
   2004e:	b4f0      	push	{r4, r5, r6, r7}
   20050:	2900      	cmp	r1, #0
   20052:	d046      	beq.n	200e2 <strchr+0x96>
   20054:	0782      	lsls	r2, r0, #30
   20056:	d010      	beq.n	2007a <strchr+0x2e>
   20058:	7803      	ldrb	r3, [r0, #0]
   2005a:	2b00      	cmp	r3, #0
   2005c:	d06c      	beq.n	20138 <strchr+0xec>
   2005e:	4299      	cmp	r1, r3
   20060:	bf18      	it	ne
   20062:	4602      	movne	r2, r0
   20064:	d106      	bne.n	20074 <strchr+0x28>
   20066:	e03a      	b.n	200de <strchr+0x92>
   20068:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   2006c:	2b00      	cmp	r3, #0
   2006e:	d063      	beq.n	20138 <strchr+0xec>
   20070:	4299      	cmp	r1, r3
   20072:	d034      	beq.n	200de <strchr+0x92>
   20074:	3001      	adds	r0, #1
   20076:	0783      	lsls	r3, r0, #30
   20078:	d1f6      	bne.n	20068 <strchr+0x1c>
   2007a:	6803      	ldr	r3, [r0, #0]
   2007c:	ea41 2701 	orr.w	r7, r1, r1, lsl #8
   20080:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   20084:	ea47 4707 	orr.w	r7, r7, r7, lsl #16
   20088:	ea22 0203 	bic.w	r2, r2, r3
   2008c:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   20090:	d11c      	bne.n	200cc <strchr+0x80>
   20092:	407b      	eors	r3, r7
   20094:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   20098:	ea22 0303 	bic.w	r3, r2, r3
   2009c:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   200a0:	d114      	bne.n	200cc <strchr+0x80>
   200a2:	4604      	mov	r4, r0
   200a4:	e002      	b.n	200ac <strchr+0x60>
   200a6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   200aa:	d10f      	bne.n	200cc <strchr+0x80>
   200ac:	f854 3f04 	ldr.w	r3, [r4, #4]!
   200b0:	3004      	adds	r0, #4
   200b2:	f1a3 3601 	sub.w	r6, r3, #16843009	; 0x1010101
   200b6:	ea87 0203 	eor.w	r2, r7, r3
   200ba:	ea26 0303 	bic.w	r3, r6, r3
   200be:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   200c2:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   200c6:	ea25 0202 	bic.w	r2, r5, r2
   200ca:	d0ec      	beq.n	200a6 <strchr+0x5a>
   200cc:	7803      	ldrb	r3, [r0, #0]
   200ce:	b923      	cbnz	r3, 200da <strchr+0x8e>
   200d0:	e032      	b.n	20138 <strchr+0xec>
   200d2:	7843      	ldrb	r3, [r0, #1]
   200d4:	3001      	adds	r0, #1
   200d6:	2b00      	cmp	r3, #0
   200d8:	d02e      	beq.n	20138 <strchr+0xec>
   200da:	4299      	cmp	r1, r3
   200dc:	d1f9      	bne.n	200d2 <strchr+0x86>
   200de:	bcf0      	pop	{r4, r5, r6, r7}
   200e0:	4770      	bx	lr
   200e2:	0783      	lsls	r3, r0, #30
   200e4:	d00a      	beq.n	200fc <strchr+0xb0>
   200e6:	7803      	ldrb	r3, [r0, #0]
   200e8:	4602      	mov	r2, r0
   200ea:	b923      	cbnz	r3, 200f6 <strchr+0xaa>
   200ec:	e7f7      	b.n	200de <strchr+0x92>
   200ee:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   200f2:	2b00      	cmp	r3, #0
   200f4:	d0f3      	beq.n	200de <strchr+0x92>
   200f6:	3001      	adds	r0, #1
   200f8:	0781      	lsls	r1, r0, #30
   200fa:	d1f8      	bne.n	200ee <strchr+0xa2>
   200fc:	6803      	ldr	r3, [r0, #0]
   200fe:	4602      	mov	r2, r0
   20100:	f1a3 3101 	sub.w	r1, r3, #16843009	; 0x1010101
   20104:	ea21 0303 	bic.w	r3, r1, r3
   20108:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   2010c:	d10a      	bne.n	20124 <strchr+0xd8>
   2010e:	4601      	mov	r1, r0
   20110:	f851 3f04 	ldr.w	r3, [r1, #4]!
   20114:	3204      	adds	r2, #4
   20116:	f1a3 3001 	sub.w	r0, r3, #16843009	; 0x1010101
   2011a:	ea20 0303 	bic.w	r3, r0, r3
   2011e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   20122:	d0f5      	beq.n	20110 <strchr+0xc4>
   20124:	7813      	ldrb	r3, [r2, #0]
   20126:	4610      	mov	r0, r2
   20128:	2b00      	cmp	r3, #0
   2012a:	d0d8      	beq.n	200de <strchr+0x92>
   2012c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   20130:	3001      	adds	r0, #1
   20132:	2b00      	cmp	r3, #0
   20134:	d1fa      	bne.n	2012c <strchr+0xe0>
   20136:	e7d2      	b.n	200de <strchr+0x92>
   20138:	4618      	mov	r0, r3
   2013a:	e7d0      	b.n	200de <strchr+0x92>

0002013c <strcmp>:
   2013c:	ea80 0201 	eor.w	r2, r0, r1
   20140:	f012 0f03 	tst.w	r2, #3
   20144:	f040 803a 	bne.w	201bc <strcmp_unaligned>
   20148:	f010 0203 	ands.w	r2, r0, #3
   2014c:	f020 0003 	bic.w	r0, r0, #3
   20150:	f021 0103 	bic.w	r1, r1, #3
   20154:	f850 cb04 	ldr.w	ip, [r0], #4
   20158:	bf08      	it	eq
   2015a:	f851 3b04 	ldreq.w	r3, [r1], #4
   2015e:	d00d      	beq.n	2017c <strcmp+0x40>
   20160:	f082 0203 	eor.w	r2, r2, #3
   20164:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   20168:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
   2016c:	fa23 f202 	lsr.w	r2, r3, r2
   20170:	f851 3b04 	ldr.w	r3, [r1], #4
   20174:	ea4c 0c02 	orr.w	ip, ip, r2
   20178:	ea43 0302 	orr.w	r3, r3, r2
   2017c:	f1ac 3201 	sub.w	r2, ip, #16843009	; 0x1010101
   20180:	459c      	cmp	ip, r3
   20182:	bf01      	itttt	eq
   20184:	ea22 020c 	biceq.w	r2, r2, ip
   20188:	f012 3f80 	tsteq.w	r2, #2155905152	; 0x80808080
   2018c:	f850 cb04 	ldreq.w	ip, [r0], #4
   20190:	f851 3b04 	ldreq.w	r3, [r1], #4
   20194:	d0f2      	beq.n	2017c <strcmp+0x40>
   20196:	ea4f 600c 	mov.w	r0, ip, lsl #24
   2019a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
   2019e:	2801      	cmp	r0, #1
   201a0:	bf28      	it	cs
   201a2:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
   201a6:	bf08      	it	eq
   201a8:	0a1b      	lsreq	r3, r3, #8
   201aa:	d0f4      	beq.n	20196 <strcmp+0x5a>
   201ac:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   201b0:	ea4f 6010 	mov.w	r0, r0, lsr #24
   201b4:	eba0 0003 	sub.w	r0, r0, r3
   201b8:	4770      	bx	lr
   201ba:	bf00      	nop

000201bc <strcmp_unaligned>:
   201bc:	f010 0f03 	tst.w	r0, #3
   201c0:	d00a      	beq.n	201d8 <strcmp_unaligned+0x1c>
   201c2:	f810 2b01 	ldrb.w	r2, [r0], #1
   201c6:	f811 3b01 	ldrb.w	r3, [r1], #1
   201ca:	2a01      	cmp	r2, #1
   201cc:	bf28      	it	cs
   201ce:	429a      	cmpcs	r2, r3
   201d0:	d0f4      	beq.n	201bc <strcmp_unaligned>
   201d2:	eba2 0003 	sub.w	r0, r2, r3
   201d6:	4770      	bx	lr
   201d8:	f84d 5d04 	str.w	r5, [sp, #-4]!
   201dc:	f84d 4d04 	str.w	r4, [sp, #-4]!
   201e0:	f04f 0201 	mov.w	r2, #1
   201e4:	ea42 2202 	orr.w	r2, r2, r2, lsl #8
   201e8:	ea42 4202 	orr.w	r2, r2, r2, lsl #16
   201ec:	f001 0c03 	and.w	ip, r1, #3
   201f0:	f021 0103 	bic.w	r1, r1, #3
   201f4:	f850 4b04 	ldr.w	r4, [r0], #4
   201f8:	f851 5b04 	ldr.w	r5, [r1], #4
   201fc:	f1bc 0f02 	cmp.w	ip, #2
   20200:	d026      	beq.n	20250 <strcmp_unaligned+0x94>
   20202:	d84b      	bhi.n	2029c <strcmp_unaligned+0xe0>
   20204:	f024 4c7f 	bic.w	ip, r4, #4278190080	; 0xff000000
   20208:	ebbc 2f15 	cmp.w	ip, r5, lsr #8
   2020c:	eba4 0302 	sub.w	r3, r4, r2
   20210:	ea23 0304 	bic.w	r3, r3, r4
   20214:	d10d      	bne.n	20232 <strcmp_unaligned+0x76>
   20216:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
   2021a:	bf08      	it	eq
   2021c:	f851 5b04 	ldreq.w	r5, [r1], #4
   20220:	d10a      	bne.n	20238 <strcmp_unaligned+0x7c>
   20222:	ea8c 0c04 	eor.w	ip, ip, r4
   20226:	ebbc 6f05 	cmp.w	ip, r5, lsl #24
   2022a:	d10c      	bne.n	20246 <strcmp_unaligned+0x8a>
   2022c:	f850 4b04 	ldr.w	r4, [r0], #4
   20230:	e7e8      	b.n	20204 <strcmp_unaligned+0x48>
   20232:	ea4f 2515 	mov.w	r5, r5, lsr #8
   20236:	e05c      	b.n	202f2 <strcmp_unaligned+0x136>
   20238:	f033 437f 	bics.w	r3, r3, #4278190080	; 0xff000000
   2023c:	d152      	bne.n	202e4 <strcmp_unaligned+0x128>
   2023e:	780d      	ldrb	r5, [r1, #0]
   20240:	ea4f 6c14 	mov.w	ip, r4, lsr #24
   20244:	e055      	b.n	202f2 <strcmp_unaligned+0x136>
   20246:	ea4f 6c14 	mov.w	ip, r4, lsr #24
   2024a:	f005 05ff 	and.w	r5, r5, #255	; 0xff
   2024e:	e050      	b.n	202f2 <strcmp_unaligned+0x136>
   20250:	ea4f 4c04 	mov.w	ip, r4, lsl #16
   20254:	eba4 0302 	sub.w	r3, r4, r2
   20258:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   2025c:	ea23 0304 	bic.w	r3, r3, r4
   20260:	ebbc 4f15 	cmp.w	ip, r5, lsr #16
   20264:	d117      	bne.n	20296 <strcmp_unaligned+0xda>
   20266:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
   2026a:	bf08      	it	eq
   2026c:	f851 5b04 	ldreq.w	r5, [r1], #4
   20270:	d107      	bne.n	20282 <strcmp_unaligned+0xc6>
   20272:	ea8c 0c04 	eor.w	ip, ip, r4
   20276:	ebbc 4f05 	cmp.w	ip, r5, lsl #16
   2027a:	d108      	bne.n	2028e <strcmp_unaligned+0xd2>
   2027c:	f850 4b04 	ldr.w	r4, [r0], #4
   20280:	e7e6      	b.n	20250 <strcmp_unaligned+0x94>
   20282:	041b      	lsls	r3, r3, #16
   20284:	d12e      	bne.n	202e4 <strcmp_unaligned+0x128>
   20286:	880d      	ldrh	r5, [r1, #0]
   20288:	ea4f 4c14 	mov.w	ip, r4, lsr #16
   2028c:	e031      	b.n	202f2 <strcmp_unaligned+0x136>
   2028e:	ea4f 4505 	mov.w	r5, r5, lsl #16
   20292:	ea4f 4c14 	mov.w	ip, r4, lsr #16
   20296:	ea4f 4515 	mov.w	r5, r5, lsr #16
   2029a:	e02a      	b.n	202f2 <strcmp_unaligned+0x136>
   2029c:	f004 0cff 	and.w	ip, r4, #255	; 0xff
   202a0:	ebbc 6f15 	cmp.w	ip, r5, lsr #24
   202a4:	eba4 0302 	sub.w	r3, r4, r2
   202a8:	ea23 0304 	bic.w	r3, r3, r4
   202ac:	d10d      	bne.n	202ca <strcmp_unaligned+0x10e>
   202ae:	ea13 13c2 	ands.w	r3, r3, r2, lsl #7
   202b2:	bf08      	it	eq
   202b4:	f851 5b04 	ldreq.w	r5, [r1], #4
   202b8:	d10a      	bne.n	202d0 <strcmp_unaligned+0x114>
   202ba:	ea8c 0c04 	eor.w	ip, ip, r4
   202be:	ebbc 2f05 	cmp.w	ip, r5, lsl #8
   202c2:	d10a      	bne.n	202da <strcmp_unaligned+0x11e>
   202c4:	f850 4b04 	ldr.w	r4, [r0], #4
   202c8:	e7e8      	b.n	2029c <strcmp_unaligned+0xe0>
   202ca:	ea4f 6515 	mov.w	r5, r5, lsr #24
   202ce:	e010      	b.n	202f2 <strcmp_unaligned+0x136>
   202d0:	f014 0fff 	tst.w	r4, #255	; 0xff
   202d4:	d006      	beq.n	202e4 <strcmp_unaligned+0x128>
   202d6:	f851 5b04 	ldr.w	r5, [r1], #4
   202da:	ea4f 2c14 	mov.w	ip, r4, lsr #8
   202de:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
   202e2:	e006      	b.n	202f2 <strcmp_unaligned+0x136>
   202e4:	f04f 0000 	mov.w	r0, #0
   202e8:	f85d 4b04 	ldr.w	r4, [sp], #4
   202ec:	f85d 5b04 	ldr.w	r5, [sp], #4
   202f0:	4770      	bx	lr
   202f2:	f00c 02ff 	and.w	r2, ip, #255	; 0xff
   202f6:	f005 00ff 	and.w	r0, r5, #255	; 0xff
   202fa:	2801      	cmp	r0, #1
   202fc:	bf28      	it	cs
   202fe:	4290      	cmpcs	r0, r2
   20300:	bf04      	itt	eq
   20302:	ea4f 2c1c 	moveq.w	ip, ip, lsr #8
   20306:	0a2d      	lsreq	r5, r5, #8
   20308:	d0f3      	beq.n	202f2 <strcmp_unaligned+0x136>
   2030a:	eba2 0000 	sub.w	r0, r2, r0
   2030e:	f85d 4b04 	ldr.w	r4, [sp], #4
   20312:	f85d 5b04 	ldr.w	r5, [sp], #4
   20316:	4770      	bx	lr

00020318 <strcpy>:
   20318:	ea80 0201 	eor.w	r2, r0, r1
   2031c:	4684      	mov	ip, r0
   2031e:	f012 0f03 	tst.w	r2, #3
   20322:	d14f      	bne.n	203c4 <strcpy+0xac>
   20324:	f011 0f03 	tst.w	r1, #3
   20328:	d132      	bne.n	20390 <strcpy+0x78>
   2032a:	f84d 4d04 	str.w	r4, [sp, #-4]!
   2032e:	f011 0f04 	tst.w	r1, #4
   20332:	f851 3b04 	ldr.w	r3, [r1], #4
   20336:	d00b      	beq.n	20350 <strcpy+0x38>
   20338:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   2033c:	439a      	bics	r2, r3
   2033e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   20342:	bf04      	itt	eq
   20344:	f84c 3b04 	streq.w	r3, [ip], #4
   20348:	f851 3b04 	ldreq.w	r3, [r1], #4
   2034c:	d116      	bne.n	2037c <strcpy+0x64>
   2034e:	bf00      	nop
   20350:	f851 4b04 	ldr.w	r4, [r1], #4
   20354:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   20358:	439a      	bics	r2, r3
   2035a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2035e:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   20362:	d10b      	bne.n	2037c <strcpy+0x64>
   20364:	f84c 3b04 	str.w	r3, [ip], #4
   20368:	43a2      	bics	r2, r4
   2036a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2036e:	bf04      	itt	eq
   20370:	f851 3b04 	ldreq.w	r3, [r1], #4
   20374:	f84c 4b04 	streq.w	r4, [ip], #4
   20378:	d0ea      	beq.n	20350 <strcpy+0x38>
   2037a:	4623      	mov	r3, r4
   2037c:	f80c 3b01 	strb.w	r3, [ip], #1
   20380:	f013 0fff 	tst.w	r3, #255	; 0xff
   20384:	ea4f 2333 	mov.w	r3, r3, ror #8
   20388:	d1f8      	bne.n	2037c <strcpy+0x64>
   2038a:	f85d 4b04 	ldr.w	r4, [sp], #4
   2038e:	4770      	bx	lr
   20390:	f011 0f01 	tst.w	r1, #1
   20394:	d006      	beq.n	203a4 <strcpy+0x8c>
   20396:	f811 2b01 	ldrb.w	r2, [r1], #1
   2039a:	f80c 2b01 	strb.w	r2, [ip], #1
   2039e:	2a00      	cmp	r2, #0
   203a0:	bf08      	it	eq
   203a2:	4770      	bxeq	lr
   203a4:	f011 0f02 	tst.w	r1, #2
   203a8:	d0bf      	beq.n	2032a <strcpy+0x12>
   203aa:	f831 2b02 	ldrh.w	r2, [r1], #2
   203ae:	f012 0fff 	tst.w	r2, #255	; 0xff
   203b2:	bf16      	itet	ne
   203b4:	f82c 2b02 	strhne.w	r2, [ip], #2
   203b8:	f88c 2000 	strbeq.w	r2, [ip]
   203bc:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   203c0:	d1b3      	bne.n	2032a <strcpy+0x12>
   203c2:	4770      	bx	lr
   203c4:	f811 2b01 	ldrb.w	r2, [r1], #1
   203c8:	f80c 2b01 	strb.w	r2, [ip], #1
   203cc:	2a00      	cmp	r2, #0
   203ce:	d1f9      	bne.n	203c4 <strcpy+0xac>
   203d0:	4770      	bx	lr
   203d2:	bf00      	nop

000203d4 <strlen>:
   203d4:	f020 0103 	bic.w	r1, r0, #3
   203d8:	f010 0003 	ands.w	r0, r0, #3
   203dc:	f1c0 0000 	rsb	r0, r0, #0
   203e0:	f851 3b04 	ldr.w	r3, [r1], #4
   203e4:	f100 0c04 	add.w	ip, r0, #4
   203e8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   203ec:	f06f 0200 	mvn.w	r2, #0
   203f0:	bf1c      	itt	ne
   203f2:	fa22 f20c 	lsrne.w	r2, r2, ip
   203f6:	4313      	orrne	r3, r2
   203f8:	f04f 0c01 	mov.w	ip, #1
   203fc:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   20400:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   20404:	eba3 020c 	sub.w	r2, r3, ip
   20408:	ea22 0203 	bic.w	r2, r2, r3
   2040c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   20410:	bf04      	itt	eq
   20412:	f851 3b04 	ldreq.w	r3, [r1], #4
   20416:	3004      	addeq	r0, #4
   20418:	d0f4      	beq.n	20404 <strlen+0x30>
   2041a:	f013 0fff 	tst.w	r3, #255	; 0xff
   2041e:	bf1f      	itttt	ne
   20420:	3001      	addne	r0, #1
   20422:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   20426:	3001      	addne	r0, #1
   20428:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   2042c:	bf18      	it	ne
   2042e:	3001      	addne	r0, #1
   20430:	4770      	bx	lr
   20432:	bf00      	nop

00020434 <strncmp>:
   20434:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
   20438:	2a00      	cmp	r2, #0
   2043a:	d044      	beq.n	204c6 <strncmp+0x92>
   2043c:	ea41 0300 	orr.w	r3, r1, r0
   20440:	f013 0303 	ands.w	r3, r3, #3
   20444:	d12c      	bne.n	204a0 <strncmp+0x6c>
   20446:	2a03      	cmp	r2, #3
   20448:	d92a      	bls.n	204a0 <strncmp+0x6c>
   2044a:	6804      	ldr	r4, [r0, #0]
   2044c:	680d      	ldr	r5, [r1, #0]
   2044e:	42ac      	cmp	r4, r5
   20450:	d126      	bne.n	204a0 <strncmp+0x6c>
   20452:	3a04      	subs	r2, #4
   20454:	d037      	beq.n	204c6 <strncmp+0x92>
   20456:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
   2045a:	ea25 0404 	bic.w	r4, r5, r4
   2045e:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   20462:	bf04      	itt	eq
   20464:	460c      	moveq	r4, r1
   20466:	4605      	moveq	r5, r0
   20468:	d011      	beq.n	2048e <strncmp+0x5a>
   2046a:	e034      	b.n	204d6 <strncmp+0xa2>
   2046c:	f850 3f04 	ldr.w	r3, [r0, #4]!
   20470:	4635      	mov	r5, r6
   20472:	f851 cf04 	ldr.w	ip, [r1, #4]!
   20476:	463c      	mov	r4, r7
   20478:	f1a3 3801 	sub.w	r8, r3, #16843009	; 0x1010101
   2047c:	4563      	cmp	r3, ip
   2047e:	ea28 0803 	bic.w	r8, r8, r3
   20482:	d109      	bne.n	20498 <strncmp+0x64>
   20484:	3a04      	subs	r2, #4
   20486:	d01e      	beq.n	204c6 <strncmp+0x92>
   20488:	f018 3f80 	tst.w	r8, #2155905152	; 0x80808080
   2048c:	d119      	bne.n	204c2 <strncmp+0x8e>
   2048e:	1d2e      	adds	r6, r5, #4
   20490:	1d27      	adds	r7, r4, #4
   20492:	2a03      	cmp	r2, #3
   20494:	d8ea      	bhi.n	2046c <strncmp+0x38>
   20496:	b1d2      	cbz	r2, 204ce <strncmp+0x9a>
   20498:	3a01      	subs	r2, #1
   2049a:	4639      	mov	r1, r7
   2049c:	4630      	mov	r0, r6
   2049e:	e000      	b.n	204a2 <strncmp+0x6e>
   204a0:	3a01      	subs	r2, #1
   204a2:	7803      	ldrb	r3, [r0, #0]
   204a4:	780c      	ldrb	r4, [r1, #0]
   204a6:	42a3      	cmp	r3, r4
   204a8:	d113      	bne.n	204d2 <strncmp+0x9e>
   204aa:	b162      	cbz	r2, 204c6 <strncmp+0x92>
   204ac:	b19b      	cbz	r3, 204d6 <strncmp+0xa2>
   204ae:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   204b2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   204b6:	42a3      	cmp	r3, r4
   204b8:	d10b      	bne.n	204d2 <strncmp+0x9e>
   204ba:	2a01      	cmp	r2, #1
   204bc:	f102 32ff 	add.w	r2, r2, #4294967295
   204c0:	d1f4      	bne.n	204ac <strncmp+0x78>
   204c2:	2000      	movs	r0, #0
   204c4:	e000      	b.n	204c8 <strncmp+0x94>
   204c6:	4610      	mov	r0, r2
   204c8:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
   204cc:	4770      	bx	lr
   204ce:	792b      	ldrb	r3, [r5, #4]
   204d0:	7924      	ldrb	r4, [r4, #4]
   204d2:	1b18      	subs	r0, r3, r4
   204d4:	e7f8      	b.n	204c8 <strncmp+0x94>
   204d6:	4618      	mov	r0, r3
   204d8:	e7f6      	b.n	204c8 <strncmp+0x94>
   204da:	bf00      	nop

000204dc <strncpy>:
   204dc:	ea41 0300 	orr.w	r3, r1, r0
   204e0:	f013 0f03 	tst.w	r3, #3
   204e4:	4603      	mov	r3, r0
   204e6:	b470      	push	{r4, r5, r6}
   204e8:	bf14      	ite	ne
   204ea:	2400      	movne	r4, #0
   204ec:	2401      	moveq	r4, #1
   204ee:	2a03      	cmp	r2, #3
   204f0:	bf94      	ite	ls
   204f2:	2400      	movls	r4, #0
   204f4:	f004 0401 	andhi.w	r4, r4, #1
   204f8:	460d      	mov	r5, r1
   204fa:	b9c4      	cbnz	r4, 2052e <strncpy+0x52>
   204fc:	b1aa      	cbz	r2, 2052a <strncpy+0x4e>
   204fe:	780c      	ldrb	r4, [r1, #0]
   20500:	3a01      	subs	r2, #1
   20502:	f803 4b01 	strb.w	r4, [r3], #1
   20506:	b14c      	cbz	r4, 2051c <strncpy+0x40>
   20508:	461c      	mov	r4, r3
   2050a:	b172      	cbz	r2, 2052a <strncpy+0x4e>
   2050c:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   20510:	3a01      	subs	r2, #1
   20512:	f804 6b01 	strb.w	r6, [r4], #1
   20516:	4623      	mov	r3, r4
   20518:	2e00      	cmp	r6, #0
   2051a:	d1f6      	bne.n	2050a <strncpy+0x2e>
   2051c:	b12a      	cbz	r2, 2052a <strncpy+0x4e>
   2051e:	189a      	adds	r2, r3, r2
   20520:	2100      	movs	r1, #0
   20522:	f803 1b01 	strb.w	r1, [r3], #1
   20526:	4293      	cmp	r3, r2
   20528:	d1fb      	bne.n	20522 <strncpy+0x46>
   2052a:	bc70      	pop	{r4, r5, r6}
   2052c:	4770      	bx	lr
   2052e:	4629      	mov	r1, r5
   20530:	f855 4b04 	ldr.w	r4, [r5], #4
   20534:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
   20538:	ea26 0604 	bic.w	r6, r6, r4
   2053c:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   20540:	d1dc      	bne.n	204fc <strncpy+0x20>
   20542:	3a04      	subs	r2, #4
   20544:	f843 4b04 	str.w	r4, [r3], #4
   20548:	2a03      	cmp	r2, #3
   2054a:	d8f0      	bhi.n	2052e <strncpy+0x52>
   2054c:	4629      	mov	r1, r5
   2054e:	e7d5      	b.n	204fc <strncpy+0x20>

00020550 <strrchr>:
   20550:	b538      	push	{r3, r4, r5, lr}
   20552:	4603      	mov	r3, r0
   20554:	460c      	mov	r4, r1
   20556:	b159      	cbz	r1, 20570 <strrchr+0x20>
   20558:	2500      	movs	r5, #0
   2055a:	e001      	b.n	20560 <strrchr+0x10>
   2055c:	1c43      	adds	r3, r0, #1
   2055e:	4605      	mov	r5, r0
   20560:	4618      	mov	r0, r3
   20562:	4621      	mov	r1, r4
   20564:	f7ff fd72 	bl	2004c <strchr>
   20568:	2800      	cmp	r0, #0
   2056a:	d1f7      	bne.n	2055c <strrchr+0xc>
   2056c:	4628      	mov	r0, r5
   2056e:	bd38      	pop	{r3, r4, r5, pc}
   20570:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   20574:	f7ff bd6a 	b.w	2004c <strchr>

00020578 <_svfprintf_r>:
   20578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2057c:	b0c9      	sub	sp, #292	; 0x124
   2057e:	468b      	mov	fp, r1
   20580:	4692      	mov	sl, r2
   20582:	9311      	str	r3, [sp, #68]	; 0x44
   20584:	9010      	str	r0, [sp, #64]	; 0x40
   20586:	f002 ff91 	bl	234ac <_localeconv_r>
   2058a:	2300      	movs	r3, #0
   2058c:	2200      	movs	r2, #0
   2058e:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
   20592:	6800      	ldr	r0, [r0, #0]
   20594:	901b      	str	r0, [sp, #108]	; 0x6c
   20596:	f7ff ff1d 	bl	203d4 <strlen>
   2059a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   2059e:	061b      	lsls	r3, r3, #24
   205a0:	901c      	str	r0, [sp, #112]	; 0x70
   205a2:	d504      	bpl.n	205ae <_svfprintf_r+0x36>
   205a4:	f8db 3010 	ldr.w	r3, [fp, #16]
   205a8:	2b00      	cmp	r3, #0
   205aa:	f001 80e8 	beq.w	2177e <_svfprintf_r+0x1206>
   205ae:	a93d      	add	r1, sp, #244	; 0xf4
   205b0:	f246 6267 	movw	r2, #26215	; 0x6667
   205b4:	9109      	str	r1, [sp, #36]	; 0x24
   205b6:	f2c6 6266 	movt	r2, #26214	; 0x6666
   205ba:	921d      	str	r2, [sp, #116]	; 0x74
   205bc:	f10d 01f3 	add.w	r1, sp, #243	; 0xf3
   205c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   205c2:	f64b 70ac 	movw	r0, #49068	; 0xbfac
   205c6:	2300      	movs	r3, #0
   205c8:	ae23      	add	r6, sp, #140	; 0x8c
   205ca:	f2c0 0002 	movt	r0, #2
   205ce:	1a52      	subs	r2, r2, r1
   205d0:	9312      	str	r3, [sp, #72]	; 0x48
   205d2:	9108      	str	r1, [sp, #32]
   205d4:	9319      	str	r3, [sp, #100]	; 0x64
   205d6:	9320      	str	r3, [sp, #128]	; 0x80
   205d8:	930d      	str	r3, [sp, #52]	; 0x34
   205da:	9018      	str	r0, [sp, #96]	; 0x60
   205dc:	9221      	str	r2, [sp, #132]	; 0x84
   205de:	963d      	str	r6, [sp, #244]	; 0xf4
   205e0:	933f      	str	r3, [sp, #252]	; 0xfc
   205e2:	933e      	str	r3, [sp, #248]	; 0xf8
   205e4:	f89a 3000 	ldrb.w	r3, [sl]
   205e8:	f1b3 0225 	subs.w	r2, r3, #37	; 0x25
   205ec:	bf18      	it	ne
   205ee:	2201      	movne	r2, #1
   205f0:	2b00      	cmp	r3, #0
   205f2:	bf0c      	ite	eq
   205f4:	2300      	moveq	r3, #0
   205f6:	f002 0301 	andne.w	r3, r2, #1
   205fa:	2b00      	cmp	r3, #0
   205fc:	f000 80bd 	beq.w	2077a <_svfprintf_r+0x202>
   20600:	4652      	mov	r2, sl
   20602:	4657      	mov	r7, sl
   20604:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   20608:	3701      	adds	r7, #1
   2060a:	1c19      	adds	r1, r3, #0
   2060c:	bf18      	it	ne
   2060e:	2101      	movne	r1, #1
   20610:	2b25      	cmp	r3, #37	; 0x25
   20612:	bf0c      	ite	eq
   20614:	2300      	moveq	r3, #0
   20616:	f001 0301 	andne.w	r3, r1, #1
   2061a:	2b00      	cmp	r3, #0
   2061c:	d1f2      	bne.n	20604 <_svfprintf_r+0x8c>
   2061e:	ebb7 080a 	subs.w	r8, r7, sl
   20622:	d010      	beq.n	20646 <_svfprintf_r+0xce>
   20624:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   20626:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   20628:	3401      	adds	r4, #1
   2062a:	f8c6 a000 	str.w	sl, [r6]
   2062e:	2c07      	cmp	r4, #7
   20630:	f8c6 8004 	str.w	r8, [r6, #4]
   20634:	4445      	add	r5, r8
   20636:	943e      	str	r4, [sp, #248]	; 0xf8
   20638:	953f      	str	r5, [sp, #252]	; 0xfc
   2063a:	f300 8082 	bgt.w	20742 <_svfprintf_r+0x1ca>
   2063e:	3608      	adds	r6, #8
   20640:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20642:	4443      	add	r3, r8
   20644:	930d      	str	r3, [sp, #52]	; 0x34
   20646:	783b      	ldrb	r3, [r7, #0]
   20648:	2b00      	cmp	r3, #0
   2064a:	f000 8082 	beq.w	20752 <_svfprintf_r+0x1da>
   2064e:	2300      	movs	r3, #0
   20650:	f107 0a01 	add.w	sl, r7, #1
   20654:	930c      	str	r3, [sp, #48]	; 0x30
   20656:	2520      	movs	r5, #32
   20658:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
   2065c:	212b      	movs	r1, #43	; 0x2b
   2065e:	787b      	ldrb	r3, [r7, #1]
   20660:	f04f 37ff 	mov.w	r7, #4294967295
   20664:	2000      	movs	r0, #0
   20666:	900a      	str	r0, [sp, #40]	; 0x28
   20668:	f10a 0a01 	add.w	sl, sl, #1
   2066c:	f1a3 0220 	sub.w	r2, r3, #32
   20670:	2a58      	cmp	r2, #88	; 0x58
   20672:	f200 8270 	bhi.w	20b56 <_svfprintf_r+0x5de>
   20676:	e8df f012 	tbh	[pc, r2, lsl #1]
   2067a:	0281      	.short	0x0281
   2067c:	026e026e 	.word	0x026e026e
   20680:	026e028b 	.word	0x026e028b
   20684:	026e026e 	.word	0x026e026e
   20688:	026e026e 	.word	0x026e026e
   2068c:	0292026e 	.word	0x0292026e
   20690:	026e0082 	.word	0x026e0082
   20694:	0087005d 	.word	0x0087005d
   20698:	00a3026e 	.word	0x00a3026e
   2069c:	00aa00aa 	.word	0x00aa00aa
   206a0:	00aa00aa 	.word	0x00aa00aa
   206a4:	00aa00aa 	.word	0x00aa00aa
   206a8:	00aa00aa 	.word	0x00aa00aa
   206ac:	026e00aa 	.word	0x026e00aa
   206b0:	026e026e 	.word	0x026e026e
   206b4:	026e026e 	.word	0x026e026e
   206b8:	026e026e 	.word	0x026e026e
   206bc:	026e026e 	.word	0x026e026e
   206c0:	00bd026e 	.word	0x00bd026e
   206c4:	026e016f 	.word	0x026e016f
   206c8:	026e016f 	.word	0x026e016f
   206cc:	026e026e 	.word	0x026e026e
   206d0:	01ab026e 	.word	0x01ab026e
   206d4:	026e026e 	.word	0x026e026e
   206d8:	026e01b2 	.word	0x026e01b2
   206dc:	026e026e 	.word	0x026e026e
   206e0:	026e026e 	.word	0x026e026e
   206e4:	026e01cf 	.word	0x026e01cf
   206e8:	01dc026e 	.word	0x01dc026e
   206ec:	026e026e 	.word	0x026e026e
   206f0:	026e026e 	.word	0x026e026e
   206f4:	026e026e 	.word	0x026e026e
   206f8:	026e026e 	.word	0x026e026e
   206fc:	026e026e 	.word	0x026e026e
   20700:	02b702d0 	.word	0x02b702d0
   20704:	016f016f 	.word	0x016f016f
   20708:	02c9016f 	.word	0x02c9016f
   2070c:	026e02b7 	.word	0x026e02b7
   20710:	023a026e 	.word	0x023a026e
   20714:	024c026e 	.word	0x024c026e
   20718:	02e00259 	.word	0x02e00259
   2071c:	026e0204 	.word	0x026e0204
   20720:	026e020b 	.word	0x026e020b
   20724:	026e029e 	.word	0x026e029e
   20728:	02fc026e 	.word	0x02fc026e
   2072c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2072e:	9211      	str	r2, [sp, #68]	; 0x44
   20730:	425b      	negs	r3, r3
   20732:	930c      	str	r3, [sp, #48]	; 0x30
   20734:	980a      	ldr	r0, [sp, #40]	; 0x28
   20736:	f040 0004 	orr.w	r0, r0, #4
   2073a:	900a      	str	r0, [sp, #40]	; 0x28
   2073c:	f89a 3000 	ldrb.w	r3, [sl]
   20740:	e792      	b.n	20668 <_svfprintf_r+0xf0>
   20742:	9810      	ldr	r0, [sp, #64]	; 0x40
   20744:	4659      	mov	r1, fp
   20746:	aa3d      	add	r2, sp, #244	; 0xf4
   20748:	f003 fc04 	bl	23f54 <__ssprint_r>
   2074c:	b940      	cbnz	r0, 20760 <_svfprintf_r+0x1e8>
   2074e:	ae23      	add	r6, sp, #140	; 0x8c
   20750:	e776      	b.n	20640 <_svfprintf_r+0xc8>
   20752:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
   20754:	b123      	cbz	r3, 20760 <_svfprintf_r+0x1e8>
   20756:	9810      	ldr	r0, [sp, #64]	; 0x40
   20758:	4659      	mov	r1, fp
   2075a:	aa3d      	add	r2, sp, #244	; 0xf4
   2075c:	f003 fbfa 	bl	23f54 <__ssprint_r>
   20760:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   20764:	f013 0f40 	tst.w	r3, #64	; 0x40
   20768:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2076a:	bf18      	it	ne
   2076c:	f04f 33ff 	movne.w	r3, #4294967295
   20770:	930d      	str	r3, [sp, #52]	; 0x34
   20772:	980d      	ldr	r0, [sp, #52]	; 0x34
   20774:	b049      	add	sp, #292	; 0x124
   20776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2077a:	4657      	mov	r7, sl
   2077c:	e763      	b.n	20646 <_svfprintf_r+0xce>
   2077e:	f88d 111f 	strb.w	r1, [sp, #287]	; 0x11f
   20782:	f89a 3000 	ldrb.w	r3, [sl]
   20786:	e76f      	b.n	20668 <_svfprintf_r+0xf0>
   20788:	4650      	mov	r0, sl
   2078a:	f810 3b01 	ldrb.w	r3, [r0], #1
   2078e:	2b2a      	cmp	r3, #42	; 0x2a
   20790:	f001 812c 	beq.w	219ec <_svfprintf_r+0x1474>
   20794:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   20798:	2700      	movs	r7, #0
   2079a:	2a09      	cmp	r2, #9
   2079c:	4682      	mov	sl, r0
   2079e:	f63f af65 	bhi.w	2066c <_svfprintf_r+0xf4>
   207a2:	2700      	movs	r7, #0
   207a4:	f810 3b01 	ldrb.w	r3, [r0], #1
   207a8:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   207ac:	eb02 0747 	add.w	r7, r2, r7, lsl #1
   207b0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   207b4:	2a09      	cmp	r2, #9
   207b6:	4682      	mov	sl, r0
   207b8:	d9f4      	bls.n	207a4 <_svfprintf_r+0x22c>
   207ba:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   207be:	e755      	b.n	2066c <_svfprintf_r+0xf4>
   207c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   207c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   207c6:	930a      	str	r3, [sp, #40]	; 0x28
   207c8:	f89a 3000 	ldrb.w	r3, [sl]
   207cc:	e74c      	b.n	20668 <_svfprintf_r+0xf0>
   207ce:	4650      	mov	r0, sl
   207d0:	2200      	movs	r2, #0
   207d2:	46b4      	mov	ip, r6
   207d4:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   207d8:	f810 3b01 	ldrb.w	r3, [r0], #1
   207dc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   207e0:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
   207e4:	4682      	mov	sl, r0
   207e6:	2c09      	cmp	r4, #9
   207e8:	eb06 0242 	add.w	r2, r6, r2, lsl #1
   207ec:	d9f2      	bls.n	207d4 <_svfprintf_r+0x25c>
   207ee:	4666      	mov	r6, ip
   207f0:	920c      	str	r2, [sp, #48]	; 0x30
   207f2:	e73b      	b.n	2066c <_svfprintf_r+0xf4>
   207f4:	980a      	ldr	r0, [sp, #40]	; 0x28
   207f6:	9317      	str	r3, [sp, #92]	; 0x5c
   207f8:	f040 0010 	orr.w	r0, r0, #16
   207fc:	900a      	str	r0, [sp, #40]	; 0x28
   207fe:	990a      	ldr	r1, [sp, #40]	; 0x28
   20800:	068c      	lsls	r4, r1, #26
   20802:	f140 81f6 	bpl.w	20bf2 <_svfprintf_r+0x67a>
   20806:	9a11      	ldr	r2, [sp, #68]	; 0x44
   20808:	1dd3      	adds	r3, r2, #7
   2080a:	f023 0307 	bic.w	r3, r3, #7
   2080e:	f103 0008 	add.w	r0, r3, #8
   20812:	9011      	str	r0, [sp, #68]	; 0x44
   20814:	e9d3 2300 	ldrd	r2, r3, [r3]
   20818:	4614      	mov	r4, r2
   2081a:	461d      	mov	r5, r3
   2081c:	2a00      	cmp	r2, #0
   2081e:	f173 0000 	sbcs.w	r0, r3, #0
   20822:	f2c0 85d9 	blt.w	213d8 <_svfprintf_r+0xe60>
   20826:	ea54 0105 	orrs.w	r1, r4, r5
   2082a:	f04f 0201 	mov.w	r2, #1
   2082e:	bf0c      	ite	eq
   20830:	2300      	moveq	r3, #0
   20832:	2301      	movne	r3, #1
   20834:	2f00      	cmp	r7, #0
   20836:	bfa2      	ittt	ge
   20838:	980a      	ldrge	r0, [sp, #40]	; 0x28
   2083a:	f020 0080 	bicge.w	r0, r0, #128	; 0x80
   2083e:	900a      	strge	r0, [sp, #40]	; 0x28
   20840:	2f00      	cmp	r7, #0
   20842:	bf18      	it	ne
   20844:	f043 0301 	orrne.w	r3, r3, #1
   20848:	2b00      	cmp	r3, #0
   2084a:	f000 835f 	beq.w	20f0c <_svfprintf_r+0x994>
   2084e:	2a01      	cmp	r2, #1
   20850:	f000 84c3 	beq.w	211da <_svfprintf_r+0xc62>
   20854:	2a02      	cmp	r2, #2
   20856:	bf1c      	itt	ne
   20858:	aa3d      	addne	r2, sp, #244	; 0xf4
   2085a:	46b4      	movne	ip, r6
   2085c:	d102      	bne.n	20864 <_svfprintf_r+0x2ec>
   2085e:	f000 bca0 	b.w	211a2 <_svfprintf_r+0xc2a>
   20862:	4632      	mov	r2, r6
   20864:	08e3      	lsrs	r3, r4, #3
   20866:	08e8      	lsrs	r0, r5, #3
   20868:	ea43 7345 	orr.w	r3, r3, r5, lsl #29
   2086c:	f004 0107 	and.w	r1, r4, #7
   20870:	4605      	mov	r5, r0
   20872:	461c      	mov	r4, r3
   20874:	1e56      	subs	r6, r2, #1
   20876:	f101 0330 	add.w	r3, r1, #48	; 0x30
   2087a:	ea54 0105 	orrs.w	r1, r4, r5
   2087e:	f802 3c01 	strb.w	r3, [r2, #-1]
   20882:	d1ee      	bne.n	20862 <_svfprintf_r+0x2ea>
   20884:	980a      	ldr	r0, [sp, #40]	; 0x28
   20886:	9613      	str	r6, [sp, #76]	; 0x4c
   20888:	4666      	mov	r6, ip
   2088a:	07c0      	lsls	r0, r0, #31
   2088c:	f140 8438 	bpl.w	21100 <_svfprintf_r+0xb88>
   20890:	2b30      	cmp	r3, #48	; 0x30
   20892:	f000 8435 	beq.w	21100 <_svfprintf_r+0xb88>
   20896:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20898:	1e91      	subs	r1, r2, #2
   2089a:	9113      	str	r1, [sp, #76]	; 0x4c
   2089c:	1a5b      	subs	r3, r3, r1
   2089e:	930e      	str	r3, [sp, #56]	; 0x38
   208a0:	2330      	movs	r3, #48	; 0x30
   208a2:	f802 3c02 	strb.w	r3, [r2, #-2]
   208a6:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
   208aa:	2200      	movs	r2, #0
   208ac:	990e      	ldr	r1, [sp, #56]	; 0x38
   208ae:	9714      	str	r7, [sp, #80]	; 0x50
   208b0:	42b9      	cmp	r1, r7
   208b2:	bfb8      	it	lt
   208b4:	4639      	movlt	r1, r7
   208b6:	921a      	str	r2, [sp, #104]	; 0x68
   208b8:	910b      	str	r1, [sp, #44]	; 0x2c
   208ba:	b113      	cbz	r3, 208c2 <_svfprintf_r+0x34a>
   208bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   208be:	3201      	adds	r2, #1
   208c0:	920b      	str	r2, [sp, #44]	; 0x2c
   208c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   208c4:	f013 0302 	ands.w	r3, r3, #2
   208c8:	9315      	str	r3, [sp, #84]	; 0x54
   208ca:	d002      	beq.n	208d2 <_svfprintf_r+0x35a>
   208cc:	980b      	ldr	r0, [sp, #44]	; 0x2c
   208ce:	3002      	adds	r0, #2
   208d0:	900b      	str	r0, [sp, #44]	; 0x2c
   208d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   208d4:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   208d8:	9316      	str	r3, [sp, #88]	; 0x58
   208da:	f040 81e2 	bne.w	20ca2 <_svfprintf_r+0x72a>
   208de:	980c      	ldr	r0, [sp, #48]	; 0x30
   208e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   208e2:	1a47      	subs	r7, r0, r1
   208e4:	2f00      	cmp	r7, #0
   208e6:	f340 81dc 	ble.w	20ca2 <_svfprintf_r+0x72a>
   208ea:	2f10      	cmp	r7, #16
   208ec:	f64b 7880 	movw	r8, #49024	; 0xbf80
   208f0:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   208f2:	f2c0 0802 	movt	r8, #2
   208f6:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   208f8:	dd22      	ble.n	20940 <_svfprintf_r+0x3c8>
   208fa:	4623      	mov	r3, r4
   208fc:	f04f 0910 	mov.w	r9, #16
   20900:	4644      	mov	r4, r8
   20902:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   20906:	e002      	b.n	2090e <_svfprintf_r+0x396>
   20908:	3f10      	subs	r7, #16
   2090a:	2f10      	cmp	r7, #16
   2090c:	dd16      	ble.n	2093c <_svfprintf_r+0x3c4>
   2090e:	3301      	adds	r3, #1
   20910:	e886 0210 	stmia.w	r6, {r4, r9}
   20914:	3510      	adds	r5, #16
   20916:	3608      	adds	r6, #8
   20918:	2b07      	cmp	r3, #7
   2091a:	933e      	str	r3, [sp, #248]	; 0xf8
   2091c:	953f      	str	r5, [sp, #252]	; 0xfc
   2091e:	ddf3      	ble.n	20908 <_svfprintf_r+0x390>
   20920:	4640      	mov	r0, r8
   20922:	4659      	mov	r1, fp
   20924:	aa3d      	add	r2, sp, #244	; 0xf4
   20926:	ae23      	add	r6, sp, #140	; 0x8c
   20928:	f003 fb14 	bl	23f54 <__ssprint_r>
   2092c:	2800      	cmp	r0, #0
   2092e:	f47f af17 	bne.w	20760 <_svfprintf_r+0x1e8>
   20932:	3f10      	subs	r7, #16
   20934:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   20936:	2f10      	cmp	r7, #16
   20938:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
   2093a:	dce8      	bgt.n	2090e <_svfprintf_r+0x396>
   2093c:	46a0      	mov	r8, r4
   2093e:	461c      	mov	r4, r3
   20940:	3401      	adds	r4, #1
   20942:	f8c6 8000 	str.w	r8, [r6]
   20946:	2c07      	cmp	r4, #7
   20948:	6077      	str	r7, [r6, #4]
   2094a:	443d      	add	r5, r7
   2094c:	943e      	str	r4, [sp, #248]	; 0xf8
   2094e:	953f      	str	r5, [sp, #252]	; 0xfc
   20950:	f300 8456 	bgt.w	21200 <_svfprintf_r+0xc88>
   20954:	3608      	adds	r6, #8
   20956:	e1a5      	b.n	20ca4 <_svfprintf_r+0x72c>
   20958:	9811      	ldr	r0, [sp, #68]	; 0x44
   2095a:	9317      	str	r3, [sp, #92]	; 0x5c
   2095c:	1dc3      	adds	r3, r0, #7
   2095e:	f023 0307 	bic.w	r3, r3, #7
   20962:	f103 0108 	add.w	r1, r3, #8
   20966:	9111      	str	r1, [sp, #68]	; 0x44
   20968:	f8d3 8000 	ldr.w	r8, [r3]
   2096c:	685d      	ldr	r5, [r3, #4]
   2096e:	4640      	mov	r0, r8
   20970:	4642      	mov	r2, r8
   20972:	4629      	mov	r1, r5
   20974:	462b      	mov	r3, r5
   20976:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
   2097a:	f7fe f813 	bl	1e9a4 <__fpclassifyd>
   2097e:	2801      	cmp	r0, #1
   20980:	4640      	mov	r0, r8
   20982:	f040 8537 	bne.w	213f4 <_svfprintf_r+0xe7c>
   20986:	2300      	movs	r3, #0
   20988:	2200      	movs	r2, #0
   2098a:	4629      	mov	r1, r5
   2098c:	f004 f9ec 	bl	24d68 <__aeabi_dcmplt>
   20990:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
   20994:	b110      	cbz	r0, 2099c <_svfprintf_r+0x424>
   20996:	232d      	movs	r3, #45	; 0x2d
   20998:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
   2099c:	2003      	movs	r0, #3
   2099e:	f64b 71a4 	movw	r1, #49060	; 0xbfa4
   209a2:	f64b 72a0 	movw	r2, #49056	; 0xbfa0
   209a6:	900b      	str	r0, [sp, #44]	; 0x2c
   209a8:	2000      	movs	r0, #0
   209aa:	9014      	str	r0, [sp, #80]	; 0x50
   209ac:	9817      	ldr	r0, [sp, #92]	; 0x5c
   209ae:	f2c0 0202 	movt	r2, #2
   209b2:	f2c0 0102 	movt	r1, #2
   209b6:	2847      	cmp	r0, #71	; 0x47
   209b8:	bfd8      	it	le
   209ba:	4611      	movle	r1, r2
   209bc:	9113      	str	r1, [sp, #76]	; 0x4c
   209be:	990a      	ldr	r1, [sp, #40]	; 0x28
   209c0:	2203      	movs	r2, #3
   209c2:	2000      	movs	r0, #0
   209c4:	920e      	str	r2, [sp, #56]	; 0x38
   209c6:	f021 0180 	bic.w	r1, r1, #128	; 0x80
   209ca:	901a      	str	r0, [sp, #104]	; 0x68
   209cc:	910a      	str	r1, [sp, #40]	; 0x28
   209ce:	e774      	b.n	208ba <_svfprintf_r+0x342>
   209d0:	980a      	ldr	r0, [sp, #40]	; 0x28
   209d2:	f040 0008 	orr.w	r0, r0, #8
   209d6:	900a      	str	r0, [sp, #40]	; 0x28
   209d8:	f89a 3000 	ldrb.w	r3, [sl]
   209dc:	e644      	b.n	20668 <_svfprintf_r+0xf0>
   209de:	990a      	ldr	r1, [sp, #40]	; 0x28
   209e0:	9317      	str	r3, [sp, #92]	; 0x5c
   209e2:	f041 0110 	orr.w	r1, r1, #16
   209e6:	910a      	str	r1, [sp, #40]	; 0x28
   209e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   209ea:	f013 0220 	ands.w	r2, r3, #32
   209ee:	f000 80a3 	beq.w	20b38 <_svfprintf_r+0x5c0>
   209f2:	9811      	ldr	r0, [sp, #68]	; 0x44
   209f4:	2200      	movs	r2, #0
   209f6:	1dc3      	adds	r3, r0, #7
   209f8:	f023 0307 	bic.w	r3, r3, #7
   209fc:	f103 0108 	add.w	r1, r3, #8
   20a00:	9111      	str	r1, [sp, #68]	; 0x44
   20a02:	e9d3 4500 	ldrd	r4, r5, [r3]
   20a06:	ea54 0305 	orrs.w	r3, r4, r5
   20a0a:	bf0c      	ite	eq
   20a0c:	2300      	moveq	r3, #0
   20a0e:	2301      	movne	r3, #1
   20a10:	2100      	movs	r1, #0
   20a12:	f88d 111f 	strb.w	r1, [sp, #287]	; 0x11f
   20a16:	e70d      	b.n	20834 <_svfprintf_r+0x2bc>
   20a18:	990a      	ldr	r1, [sp, #40]	; 0x28
   20a1a:	9317      	str	r3, [sp, #92]	; 0x5c
   20a1c:	f041 0110 	orr.w	r1, r1, #16
   20a20:	910a      	str	r1, [sp, #40]	; 0x28
   20a22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   20a24:	0690      	lsls	r0, r2, #26
   20a26:	f140 80cb 	bpl.w	20bc0 <_svfprintf_r+0x648>
   20a2a:	9811      	ldr	r0, [sp, #68]	; 0x44
   20a2c:	2201      	movs	r2, #1
   20a2e:	1dc3      	adds	r3, r0, #7
   20a30:	e7e2      	b.n	209f8 <_svfprintf_r+0x480>
   20a32:	980a      	ldr	r0, [sp, #40]	; 0x28
   20a34:	9317      	str	r3, [sp, #92]	; 0x5c
   20a36:	f64b 73b0 	movw	r3, #49072	; 0xbfb0
   20a3a:	f2c0 0302 	movt	r3, #2
   20a3e:	9319      	str	r3, [sp, #100]	; 0x64
   20a40:	0683      	lsls	r3, r0, #26
   20a42:	f140 8120 	bpl.w	20c86 <_svfprintf_r+0x70e>
   20a46:	9911      	ldr	r1, [sp, #68]	; 0x44
   20a48:	1dcb      	adds	r3, r1, #7
   20a4a:	f023 0307 	bic.w	r3, r3, #7
   20a4e:	f103 0208 	add.w	r2, r3, #8
   20a52:	9211      	str	r2, [sp, #68]	; 0x44
   20a54:	e9d3 4500 	ldrd	r4, r5, [r3]
   20a58:	ea54 0105 	orrs.w	r1, r4, r5
   20a5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   20a5e:	bf0c      	ite	eq
   20a60:	2300      	moveq	r3, #0
   20a62:	2301      	movne	r3, #1
   20a64:	421a      	tst	r2, r3
   20a66:	f000 8400 	beq.w	2126a <_svfprintf_r+0xcf2>
   20a6a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   20a6c:	f042 0202 	orr.w	r2, r2, #2
   20a70:	920a      	str	r2, [sp, #40]	; 0x28
   20a72:	2202      	movs	r2, #2
   20a74:	f88d 311d 	strb.w	r3, [sp, #285]	; 0x11d
   20a78:	2330      	movs	r3, #48	; 0x30
   20a7a:	f88d 311c 	strb.w	r3, [sp, #284]	; 0x11c
   20a7e:	2301      	movs	r3, #1
   20a80:	e7c6      	b.n	20a10 <_svfprintf_r+0x498>
   20a82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   20a84:	f042 0220 	orr.w	r2, r2, #32
   20a88:	920a      	str	r2, [sp, #40]	; 0x28
   20a8a:	f89a 3000 	ldrb.w	r3, [sl]
   20a8e:	e5eb      	b.n	20668 <_svfprintf_r+0xf0>
   20a90:	9911      	ldr	r1, [sp, #68]	; 0x44
   20a92:	2400      	movs	r4, #0
   20a94:	f88d 411f 	strb.w	r4, [sp, #287]	; 0x11f
   20a98:	9a11      	ldr	r2, [sp, #68]	; 0x44
   20a9a:	6809      	ldr	r1, [r1, #0]
   20a9c:	9317      	str	r3, [sp, #92]	; 0x5c
   20a9e:	1d15      	adds	r5, r2, #4
   20aa0:	9113      	str	r1, [sp, #76]	; 0x4c
   20aa2:	2900      	cmp	r1, #0
   20aa4:	f000 8702 	beq.w	218ac <_svfprintf_r+0x1334>
   20aa8:	2f00      	cmp	r7, #0
   20aaa:	9813      	ldr	r0, [sp, #76]	; 0x4c
   20aac:	f2c0 86be 	blt.w	2182c <_svfprintf_r+0x12b4>
   20ab0:	4621      	mov	r1, r4
   20ab2:	463a      	mov	r2, r7
   20ab4:	f7fe fd66 	bl	1f584 <memchr>
   20ab8:	2800      	cmp	r0, #0
   20aba:	f000 872d 	beq.w	21918 <_svfprintf_r+0x13a0>
   20abe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   20ac0:	9414      	str	r4, [sp, #80]	; 0x50
   20ac2:	1a80      	subs	r0, r0, r2
   20ac4:	900e      	str	r0, [sp, #56]	; 0x38
   20ac6:	42b8      	cmp	r0, r7
   20ac8:	941a      	str	r4, [sp, #104]	; 0x68
   20aca:	bfc5      	ittet	gt
   20acc:	ea27 73e7 	bicgt.w	r3, r7, r7, asr #31
   20ad0:	9511      	strgt	r5, [sp, #68]	; 0x44
   20ad2:	9b0e      	ldrle	r3, [sp, #56]	; 0x38
   20ad4:	930b      	strgt	r3, [sp, #44]	; 0x2c
   20ad6:	bfd5      	itete	le
   20ad8:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
   20adc:	f89d 311f 	ldrbgt.w	r3, [sp, #287]	; 0x11f
   20ae0:	930b      	strle	r3, [sp, #44]	; 0x2c
   20ae2:	970e      	strgt	r7, [sp, #56]	; 0x38
   20ae4:	bfdc      	itt	le
   20ae6:	f89d 311f 	ldrble.w	r3, [sp, #287]	; 0x11f
   20aea:	9511      	strle	r5, [sp, #68]	; 0x44
   20aec:	e6e5      	b.n	208ba <_svfprintf_r+0x342>
   20aee:	f89a 3000 	ldrb.w	r3, [sl]
   20af2:	4652      	mov	r2, sl
   20af4:	2b6c      	cmp	r3, #108	; 0x6c
   20af6:	bf05      	ittet	eq
   20af8:	f10a 0a01 	addeq.w	sl, sl, #1
   20afc:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   20afe:	980a      	ldrne	r0, [sp, #40]	; 0x28
   20b00:	f043 0320 	orreq.w	r3, r3, #32
   20b04:	bf15      	itete	ne
   20b06:	f040 0010 	orrne.w	r0, r0, #16
   20b0a:	930a      	streq	r3, [sp, #40]	; 0x28
   20b0c:	900a      	strne	r0, [sp, #40]	; 0x28
   20b0e:	7853      	ldrbeq	r3, [r2, #1]
   20b10:	e5aa      	b.n	20668 <_svfprintf_r+0xf0>
   20b12:	980a      	ldr	r0, [sp, #40]	; 0x28
   20b14:	0682      	lsls	r2, r0, #26
   20b16:	f140 849e 	bpl.w	21456 <_svfprintf_r+0xede>
   20b1a:	9911      	ldr	r1, [sp, #68]	; 0x44
   20b1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   20b1e:	680b      	ldr	r3, [r1, #0]
   20b20:	3104      	adds	r1, #4
   20b22:	9111      	str	r1, [sp, #68]	; 0x44
   20b24:	17d1      	asrs	r1, r2, #31
   20b26:	601a      	str	r2, [r3, #0]
   20b28:	6059      	str	r1, [r3, #4]
   20b2a:	e55b      	b.n	205e4 <_svfprintf_r+0x6c>
   20b2c:	9317      	str	r3, [sp, #92]	; 0x5c
   20b2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20b30:	f013 0220 	ands.w	r2, r3, #32
   20b34:	f47f af5d 	bne.w	209f2 <_svfprintf_r+0x47a>
   20b38:	980a      	ldr	r0, [sp, #40]	; 0x28
   20b3a:	f010 0310 	ands.w	r3, r0, #16
   20b3e:	f000 8495 	beq.w	2146c <_svfprintf_r+0xef4>
   20b42:	9911      	ldr	r1, [sp, #68]	; 0x44
   20b44:	680b      	ldr	r3, [r1, #0]
   20b46:	3104      	adds	r1, #4
   20b48:	9111      	str	r1, [sp, #68]	; 0x44
   20b4a:	461c      	mov	r4, r3
   20b4c:	3300      	adds	r3, #0
   20b4e:	bf18      	it	ne
   20b50:	2301      	movne	r3, #1
   20b52:	2500      	movs	r5, #0
   20b54:	e75c      	b.n	20a10 <_svfprintf_r+0x498>
   20b56:	9317      	str	r3, [sp, #92]	; 0x5c
   20b58:	2b00      	cmp	r3, #0
   20b5a:	f43f adfa 	beq.w	20752 <_svfprintf_r+0x1da>
   20b5e:	9817      	ldr	r0, [sp, #92]	; 0x5c
   20b60:	2301      	movs	r3, #1
   20b62:	a933      	add	r1, sp, #204	; 0xcc
   20b64:	930b      	str	r3, [sp, #44]	; 0x2c
   20b66:	930e      	str	r3, [sp, #56]	; 0x38
   20b68:	2300      	movs	r3, #0
   20b6a:	f88d 00cc 	strb.w	r0, [sp, #204]	; 0xcc
   20b6e:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
   20b72:	9113      	str	r1, [sp, #76]	; 0x4c
   20b74:	2300      	movs	r3, #0
   20b76:	9314      	str	r3, [sp, #80]	; 0x50
   20b78:	931a      	str	r3, [sp, #104]	; 0x68
   20b7a:	e6a2      	b.n	208c2 <_svfprintf_r+0x34a>
   20b7c:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
   20b80:	2b00      	cmp	r3, #0
   20b82:	f040 8456 	bne.w	21432 <_svfprintf_r+0xeba>
   20b86:	f88d 511f 	strb.w	r5, [sp, #287]	; 0x11f
   20b8a:	f89a 3000 	ldrb.w	r3, [sl]
   20b8e:	e56b      	b.n	20668 <_svfprintf_r+0xf0>
   20b90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   20b92:	f042 0201 	orr.w	r2, r2, #1
   20b96:	920a      	str	r2, [sp, #40]	; 0x28
   20b98:	f89a 3000 	ldrb.w	r3, [sl]
   20b9c:	e564      	b.n	20668 <_svfprintf_r+0xf0>
   20b9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   20ba0:	9811      	ldr	r0, [sp, #68]	; 0x44
   20ba2:	681b      	ldr	r3, [r3, #0]
   20ba4:	1d02      	adds	r2, r0, #4
   20ba6:	2b00      	cmp	r3, #0
   20ba8:	930c      	str	r3, [sp, #48]	; 0x30
   20baa:	f6ff adbf 	blt.w	2072c <_svfprintf_r+0x1b4>
   20bae:	f89a 3000 	ldrb.w	r3, [sl]
   20bb2:	9211      	str	r2, [sp, #68]	; 0x44
   20bb4:	e558      	b.n	20668 <_svfprintf_r+0xf0>
   20bb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   20bb8:	9317      	str	r3, [sp, #92]	; 0x5c
   20bba:	0690      	lsls	r0, r2, #26
   20bbc:	f53f af35 	bmi.w	20a2a <_svfprintf_r+0x4b2>
   20bc0:	980a      	ldr	r0, [sp, #40]	; 0x28
   20bc2:	06c1      	lsls	r1, r0, #27
   20bc4:	f100 8354 	bmi.w	21270 <_svfprintf_r+0xcf8>
   20bc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   20bca:	0652      	lsls	r2, r2, #25
   20bcc:	f140 8350 	bpl.w	21270 <_svfprintf_r+0xcf8>
   20bd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   20bd2:	2500      	movs	r5, #0
   20bd4:	2201      	movs	r2, #1
   20bd6:	881c      	ldrh	r4, [r3, #0]
   20bd8:	3304      	adds	r3, #4
   20bda:	9311      	str	r3, [sp, #68]	; 0x44
   20bdc:	ea54 0005 	orrs.w	r0, r4, r5
   20be0:	bf0c      	ite	eq
   20be2:	2300      	moveq	r3, #0
   20be4:	2301      	movne	r3, #1
   20be6:	e713      	b.n	20a10 <_svfprintf_r+0x498>
   20be8:	990a      	ldr	r1, [sp, #40]	; 0x28
   20bea:	9317      	str	r3, [sp, #92]	; 0x5c
   20bec:	068c      	lsls	r4, r1, #26
   20bee:	f53f ae0a 	bmi.w	20806 <_svfprintf_r+0x28e>
   20bf2:	990a      	ldr	r1, [sp, #40]	; 0x28
   20bf4:	06c8      	lsls	r0, r1, #27
   20bf6:	f140 844b 	bpl.w	21490 <_svfprintf_r+0xf18>
   20bfa:	9a11      	ldr	r2, [sp, #68]	; 0x44
   20bfc:	6813      	ldr	r3, [r2, #0]
   20bfe:	3204      	adds	r2, #4
   20c00:	9211      	str	r2, [sp, #68]	; 0x44
   20c02:	461c      	mov	r4, r3
   20c04:	461a      	mov	r2, r3
   20c06:	17dd      	asrs	r5, r3, #31
   20c08:	462b      	mov	r3, r5
   20c0a:	e607      	b.n	2081c <_svfprintf_r+0x2a4>
   20c0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   20c0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   20c12:	920a      	str	r2, [sp, #40]	; 0x28
   20c14:	f89a 3000 	ldrb.w	r3, [sl]
   20c18:	e526      	b.n	20668 <_svfprintf_r+0xf0>
   20c1a:	9317      	str	r3, [sp, #92]	; 0x5c
   20c1c:	2001      	movs	r0, #1
   20c1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   20c20:	900b      	str	r0, [sp, #44]	; 0x2c
   20c22:	1d19      	adds	r1, r3, #4
   20c24:	900e      	str	r0, [sp, #56]	; 0x38
   20c26:	681a      	ldr	r2, [r3, #0]
   20c28:	2300      	movs	r3, #0
   20c2a:	9111      	str	r1, [sp, #68]	; 0x44
   20c2c:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
   20c30:	ab33      	add	r3, sp, #204	; 0xcc
   20c32:	f88d 20cc 	strb.w	r2, [sp, #204]	; 0xcc
   20c36:	9313      	str	r3, [sp, #76]	; 0x4c
   20c38:	e79c      	b.n	20b74 <_svfprintf_r+0x5fc>
   20c3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   20c3c:	2500      	movs	r5, #0
   20c3e:	9811      	ldr	r0, [sp, #68]	; 0x44
   20c40:	2178      	movs	r1, #120	; 0x78
   20c42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   20c44:	681b      	ldr	r3, [r3, #0]
   20c46:	3004      	adds	r0, #4
   20c48:	f042 0202 	orr.w	r2, r2, #2
   20c4c:	9011      	str	r0, [sp, #68]	; 0x44
   20c4e:	920a      	str	r2, [sp, #40]	; 0x28
   20c50:	461c      	mov	r4, r3
   20c52:	2230      	movs	r2, #48	; 0x30
   20c54:	f64b 70c4 	movw	r0, #49092	; 0xbfc4
   20c58:	1b5b      	subs	r3, r3, r5
   20c5a:	f88d 211c 	strb.w	r2, [sp, #284]	; 0x11c
   20c5e:	bf18      	it	ne
   20c60:	2301      	movne	r3, #1
   20c62:	f2c0 0002 	movt	r0, #2
   20c66:	f88d 111d 	strb.w	r1, [sp, #285]	; 0x11d
   20c6a:	2202      	movs	r2, #2
   20c6c:	9019      	str	r0, [sp, #100]	; 0x64
   20c6e:	9117      	str	r1, [sp, #92]	; 0x5c
   20c70:	e6ce      	b.n	20a10 <_svfprintf_r+0x498>
   20c72:	980a      	ldr	r0, [sp, #40]	; 0x28
   20c74:	f64b 72c4 	movw	r2, #49092	; 0xbfc4
   20c78:	9317      	str	r3, [sp, #92]	; 0x5c
   20c7a:	f2c0 0202 	movt	r2, #2
   20c7e:	0683      	lsls	r3, r0, #26
   20c80:	9219      	str	r2, [sp, #100]	; 0x64
   20c82:	f53f aee0 	bmi.w	20a46 <_svfprintf_r+0x4ce>
   20c86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20c88:	06dd      	lsls	r5, r3, #27
   20c8a:	f100 82fd 	bmi.w	21288 <_svfprintf_r+0xd10>
   20c8e:	990a      	ldr	r1, [sp, #40]	; 0x28
   20c90:	064c      	lsls	r4, r1, #25
   20c92:	f140 82f9 	bpl.w	21288 <_svfprintf_r+0xd10>
   20c96:	9a11      	ldr	r2, [sp, #68]	; 0x44
   20c98:	2500      	movs	r5, #0
   20c9a:	8814      	ldrh	r4, [r2, #0]
   20c9c:	3204      	adds	r2, #4
   20c9e:	9211      	str	r2, [sp, #68]	; 0x44
   20ca0:	e6da      	b.n	20a58 <_svfprintf_r+0x4e0>
   20ca2:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   20ca4:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
   20ca8:	b16b      	cbz	r3, 20cc6 <_svfprintf_r+0x74e>
   20caa:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   20cac:	ab47      	add	r3, sp, #284	; 0x11c
   20cae:	3303      	adds	r3, #3
   20cb0:	6033      	str	r3, [r6, #0]
   20cb2:	3401      	adds	r4, #1
   20cb4:	2301      	movs	r3, #1
   20cb6:	2c07      	cmp	r4, #7
   20cb8:	6073      	str	r3, [r6, #4]
   20cba:	441d      	add	r5, r3
   20cbc:	943e      	str	r4, [sp, #248]	; 0xf8
   20cbe:	953f      	str	r5, [sp, #252]	; 0xfc
   20cc0:	f300 81ef 	bgt.w	210a2 <_svfprintf_r+0xb2a>
   20cc4:	3608      	adds	r6, #8
   20cc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   20cc8:	b163      	cbz	r3, 20ce4 <_svfprintf_r+0x76c>
   20cca:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   20ccc:	ab47      	add	r3, sp, #284	; 0x11c
   20cce:	6033      	str	r3, [r6, #0]
   20cd0:	2302      	movs	r3, #2
   20cd2:	3401      	adds	r4, #1
   20cd4:	6073      	str	r3, [r6, #4]
   20cd6:	2c07      	cmp	r4, #7
   20cd8:	441d      	add	r5, r3
   20cda:	943e      	str	r4, [sp, #248]	; 0xf8
   20cdc:	953f      	str	r5, [sp, #252]	; 0xfc
   20cde:	f300 81eb 	bgt.w	210b8 <_svfprintf_r+0xb40>
   20ce2:	3608      	adds	r6, #8
   20ce4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   20ce6:	2b80      	cmp	r3, #128	; 0x80
   20ce8:	f000 8124 	beq.w	20f34 <_svfprintf_r+0x9bc>
   20cec:	9814      	ldr	r0, [sp, #80]	; 0x50
   20cee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20cf0:	1ac7      	subs	r7, r0, r3
   20cf2:	2f00      	cmp	r7, #0
   20cf4:	dd35      	ble.n	20d62 <_svfprintf_r+0x7ea>
   20cf6:	2f10      	cmp	r7, #16
   20cf8:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   20cfa:	bfd8      	it	le
   20cfc:	f8df 8a38 	ldrle.w	r8, [pc, #2616]	; 21738 <_svfprintf_r+0x11c0>
   20d00:	dd24      	ble.n	20d4c <_svfprintf_r+0x7d4>
   20d02:	f8df 8a34 	ldr.w	r8, [pc, #2612]	; 21738 <_svfprintf_r+0x11c0>
   20d06:	4623      	mov	r3, r4
   20d08:	f04f 0910 	mov.w	r9, #16
   20d0c:	4644      	mov	r4, r8
   20d0e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   20d12:	e002      	b.n	20d1a <_svfprintf_r+0x7a2>
   20d14:	3f10      	subs	r7, #16
   20d16:	2f10      	cmp	r7, #16
   20d18:	dd16      	ble.n	20d48 <_svfprintf_r+0x7d0>
   20d1a:	3301      	adds	r3, #1
   20d1c:	e886 0210 	stmia.w	r6, {r4, r9}
   20d20:	3510      	adds	r5, #16
   20d22:	3608      	adds	r6, #8
   20d24:	2b07      	cmp	r3, #7
   20d26:	933e      	str	r3, [sp, #248]	; 0xf8
   20d28:	953f      	str	r5, [sp, #252]	; 0xfc
   20d2a:	ddf3      	ble.n	20d14 <_svfprintf_r+0x79c>
   20d2c:	4640      	mov	r0, r8
   20d2e:	4659      	mov	r1, fp
   20d30:	aa3d      	add	r2, sp, #244	; 0xf4
   20d32:	ae23      	add	r6, sp, #140	; 0x8c
   20d34:	f003 f90e 	bl	23f54 <__ssprint_r>
   20d38:	2800      	cmp	r0, #0
   20d3a:	f47f ad11 	bne.w	20760 <_svfprintf_r+0x1e8>
   20d3e:	3f10      	subs	r7, #16
   20d40:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   20d42:	2f10      	cmp	r7, #16
   20d44:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
   20d46:	dce8      	bgt.n	20d1a <_svfprintf_r+0x7a2>
   20d48:	46a0      	mov	r8, r4
   20d4a:	461c      	mov	r4, r3
   20d4c:	3401      	adds	r4, #1
   20d4e:	f8c6 8000 	str.w	r8, [r6]
   20d52:	2c07      	cmp	r4, #7
   20d54:	6077      	str	r7, [r6, #4]
   20d56:	443d      	add	r5, r7
   20d58:	943e      	str	r4, [sp, #248]	; 0xf8
   20d5a:	953f      	str	r5, [sp, #252]	; 0xfc
   20d5c:	f300 8196 	bgt.w	2108c <_svfprintf_r+0xb14>
   20d60:	3608      	adds	r6, #8
   20d62:	990a      	ldr	r1, [sp, #40]	; 0x28
   20d64:	05ca      	lsls	r2, r1, #23
   20d66:	d475      	bmi.n	20e54 <_svfprintf_r+0x8dc>
   20d68:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   20d6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20d6c:	3401      	adds	r4, #1
   20d6e:	9813      	ldr	r0, [sp, #76]	; 0x4c
   20d70:	2c07      	cmp	r4, #7
   20d72:	441d      	add	r5, r3
   20d74:	e886 0009 	stmia.w	r6, {r0, r3}
   20d78:	953f      	str	r5, [sp, #252]	; 0xfc
   20d7a:	943e      	str	r4, [sp, #248]	; 0xf8
   20d7c:	dc5f      	bgt.n	20e3e <_svfprintf_r+0x8c6>
   20d7e:	3608      	adds	r6, #8
   20d80:	990a      	ldr	r1, [sp, #40]	; 0x28
   20d82:	074b      	lsls	r3, r1, #29
   20d84:	d540      	bpl.n	20e08 <_svfprintf_r+0x890>
   20d86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   20d88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   20d8a:	1ad7      	subs	r7, r2, r3
   20d8c:	2f00      	cmp	r7, #0
   20d8e:	dd3b      	ble.n	20e08 <_svfprintf_r+0x890>
   20d90:	2f10      	cmp	r7, #16
   20d92:	f64b 7880 	movw	r8, #49024	; 0xbf80
   20d96:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   20d98:	f2c0 0802 	movt	r8, #2
   20d9c:	dd22      	ble.n	20de4 <_svfprintf_r+0x86c>
   20d9e:	4623      	mov	r3, r4
   20da0:	f04f 0910 	mov.w	r9, #16
   20da4:	4644      	mov	r4, r8
   20da6:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   20daa:	e002      	b.n	20db2 <_svfprintf_r+0x83a>
   20dac:	3f10      	subs	r7, #16
   20dae:	2f10      	cmp	r7, #16
   20db0:	dd16      	ble.n	20de0 <_svfprintf_r+0x868>
   20db2:	3301      	adds	r3, #1
   20db4:	e886 0210 	stmia.w	r6, {r4, r9}
   20db8:	3510      	adds	r5, #16
   20dba:	3608      	adds	r6, #8
   20dbc:	2b07      	cmp	r3, #7
   20dbe:	933e      	str	r3, [sp, #248]	; 0xf8
   20dc0:	953f      	str	r5, [sp, #252]	; 0xfc
   20dc2:	ddf3      	ble.n	20dac <_svfprintf_r+0x834>
   20dc4:	4640      	mov	r0, r8
   20dc6:	4659      	mov	r1, fp
   20dc8:	aa3d      	add	r2, sp, #244	; 0xf4
   20dca:	ae23      	add	r6, sp, #140	; 0x8c
   20dcc:	f003 f8c2 	bl	23f54 <__ssprint_r>
   20dd0:	2800      	cmp	r0, #0
   20dd2:	f47f acc5 	bne.w	20760 <_svfprintf_r+0x1e8>
   20dd6:	3f10      	subs	r7, #16
   20dd8:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   20dda:	2f10      	cmp	r7, #16
   20ddc:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
   20dde:	dce8      	bgt.n	20db2 <_svfprintf_r+0x83a>
   20de0:	46a0      	mov	r8, r4
   20de2:	461c      	mov	r4, r3
   20de4:	3401      	adds	r4, #1
   20de6:	f8c6 8000 	str.w	r8, [r6]
   20dea:	2c07      	cmp	r4, #7
   20dec:	6077      	str	r7, [r6, #4]
   20dee:	443d      	add	r5, r7
   20df0:	943e      	str	r4, [sp, #248]	; 0xf8
   20df2:	953f      	str	r5, [sp, #252]	; 0xfc
   20df4:	dd08      	ble.n	20e08 <_svfprintf_r+0x890>
   20df6:	9810      	ldr	r0, [sp, #64]	; 0x40
   20df8:	4659      	mov	r1, fp
   20dfa:	aa3d      	add	r2, sp, #244	; 0xf4
   20dfc:	f003 f8aa 	bl	23f54 <__ssprint_r>
   20e00:	2800      	cmp	r0, #0
   20e02:	f47f acad 	bne.w	20760 <_svfprintf_r+0x1e8>
   20e06:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   20e08:	980d      	ldr	r0, [sp, #52]	; 0x34
   20e0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   20e0c:	990c      	ldr	r1, [sp, #48]	; 0x30
   20e0e:	428a      	cmp	r2, r1
   20e10:	bfac      	ite	ge
   20e12:	1880      	addge	r0, r0, r2
   20e14:	1840      	addlt	r0, r0, r1
   20e16:	900d      	str	r0, [sp, #52]	; 0x34
   20e18:	2d00      	cmp	r5, #0
   20e1a:	f040 8129 	bne.w	21070 <_svfprintf_r+0xaf8>
   20e1e:	2300      	movs	r3, #0
   20e20:	ae23      	add	r6, sp, #140	; 0x8c
   20e22:	933e      	str	r3, [sp, #248]	; 0xf8
   20e24:	f7ff bbde 	b.w	205e4 <_svfprintf_r+0x6c>
   20e28:	46a0      	mov	r8, r4
   20e2a:	461c      	mov	r4, r3
   20e2c:	3401      	adds	r4, #1
   20e2e:	f8c6 8000 	str.w	r8, [r6]
   20e32:	2c07      	cmp	r4, #7
   20e34:	6077      	str	r7, [r6, #4]
   20e36:	443d      	add	r5, r7
   20e38:	943e      	str	r4, [sp, #248]	; 0xf8
   20e3a:	953f      	str	r5, [sp, #252]	; 0xfc
   20e3c:	dd9f      	ble.n	20d7e <_svfprintf_r+0x806>
   20e3e:	9810      	ldr	r0, [sp, #64]	; 0x40
   20e40:	4659      	mov	r1, fp
   20e42:	aa3d      	add	r2, sp, #244	; 0xf4
   20e44:	f003 f886 	bl	23f54 <__ssprint_r>
   20e48:	2800      	cmp	r0, #0
   20e4a:	f47f ac89 	bne.w	20760 <_svfprintf_r+0x1e8>
   20e4e:	ae23      	add	r6, sp, #140	; 0x8c
   20e50:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   20e52:	e795      	b.n	20d80 <_svfprintf_r+0x808>
   20e54:	9917      	ldr	r1, [sp, #92]	; 0x5c
   20e56:	2965      	cmp	r1, #101	; 0x65
   20e58:	f340 80a9 	ble.w	20fae <_svfprintf_r+0xa36>
   20e5c:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
   20e60:	2200      	movs	r2, #0
   20e62:	2300      	movs	r3, #0
   20e64:	f003 ff76 	bl	24d54 <__aeabi_dcmpeq>
   20e68:	2800      	cmp	r0, #0
   20e6a:	f000 814f 	beq.w	2110c <_svfprintf_r+0xb94>
   20e6e:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   20e70:	f64b 73e0 	movw	r3, #49120	; 0xbfe0
   20e74:	f2c0 0302 	movt	r3, #2
   20e78:	6033      	str	r3, [r6, #0]
   20e7a:	3401      	adds	r4, #1
   20e7c:	2301      	movs	r3, #1
   20e7e:	2c07      	cmp	r4, #7
   20e80:	6073      	str	r3, [r6, #4]
   20e82:	441d      	add	r5, r3
   20e84:	943e      	str	r4, [sp, #248]	; 0xf8
   20e86:	953f      	str	r5, [sp, #252]	; 0xfc
   20e88:	f300 8310 	bgt.w	214ac <_svfprintf_r+0xf34>
   20e8c:	3608      	adds	r6, #8
   20e8e:	9b44      	ldr	r3, [sp, #272]	; 0x110
   20e90:	9a12      	ldr	r2, [sp, #72]	; 0x48
   20e92:	429a      	cmp	r2, r3
   20e94:	dc03      	bgt.n	20e9e <_svfprintf_r+0x926>
   20e96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20e98:	07db      	lsls	r3, r3, #31
   20e9a:	f57f af71 	bpl.w	20d80 <_svfprintf_r+0x808>
   20e9e:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   20ea0:	981c      	ldr	r0, [sp, #112]	; 0x70
   20ea2:	3401      	adds	r4, #1
   20ea4:	991b      	ldr	r1, [sp, #108]	; 0x6c
   20ea6:	2c07      	cmp	r4, #7
   20ea8:	4405      	add	r5, r0
   20eaa:	6070      	str	r0, [r6, #4]
   20eac:	6031      	str	r1, [r6, #0]
   20eae:	953f      	str	r5, [sp, #252]	; 0xfc
   20eb0:	943e      	str	r4, [sp, #248]	; 0xf8
   20eb2:	f300 8458 	bgt.w	21766 <_svfprintf_r+0x11ee>
   20eb6:	3608      	adds	r6, #8
   20eb8:	9a12      	ldr	r2, [sp, #72]	; 0x48
   20eba:	1e57      	subs	r7, r2, #1
   20ebc:	2f00      	cmp	r7, #0
   20ebe:	f77f af5f 	ble.w	20d80 <_svfprintf_r+0x808>
   20ec2:	2f10      	cmp	r7, #16
   20ec4:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   20ec6:	f340 8564 	ble.w	21992 <_svfprintf_r+0x141a>
   20eca:	f8df 886c 	ldr.w	r8, [pc, #2156]	; 21738 <_svfprintf_r+0x11c0>
   20ece:	4623      	mov	r3, r4
   20ed0:	f04f 0910 	mov.w	r9, #16
   20ed4:	4644      	mov	r4, r8
   20ed6:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   20eda:	e002      	b.n	20ee2 <_svfprintf_r+0x96a>
   20edc:	3f10      	subs	r7, #16
   20ede:	2f10      	cmp	r7, #16
   20ee0:	dda2      	ble.n	20e28 <_svfprintf_r+0x8b0>
   20ee2:	3301      	adds	r3, #1
   20ee4:	e886 0210 	stmia.w	r6, {r4, r9}
   20ee8:	3510      	adds	r5, #16
   20eea:	3608      	adds	r6, #8
   20eec:	2b07      	cmp	r3, #7
   20eee:	933e      	str	r3, [sp, #248]	; 0xf8
   20ef0:	953f      	str	r5, [sp, #252]	; 0xfc
   20ef2:	ddf3      	ble.n	20edc <_svfprintf_r+0x964>
   20ef4:	4640      	mov	r0, r8
   20ef6:	4659      	mov	r1, fp
   20ef8:	aa3d      	add	r2, sp, #244	; 0xf4
   20efa:	ae23      	add	r6, sp, #140	; 0x8c
   20efc:	f003 f82a 	bl	23f54 <__ssprint_r>
   20f00:	2800      	cmp	r0, #0
   20f02:	f47f ac2d 	bne.w	20760 <_svfprintf_r+0x1e8>
   20f06:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   20f08:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
   20f0a:	e7e7      	b.n	20edc <_svfprintf_r+0x964>
   20f0c:	2a00      	cmp	r2, #0
   20f0e:	f040 80b9 	bne.w	21084 <_svfprintf_r+0xb0c>
   20f12:	980a      	ldr	r0, [sp, #40]	; 0x28
   20f14:	07c1      	lsls	r1, r0, #31
   20f16:	bf5e      	ittt	pl
   20f18:	920e      	strpl	r2, [sp, #56]	; 0x38
   20f1a:	a83d      	addpl	r0, sp, #244	; 0xf4
   20f1c:	9013      	strpl	r0, [sp, #76]	; 0x4c
   20f1e:	f57f acc2 	bpl.w	208a6 <_svfprintf_r+0x32e>
   20f22:	9921      	ldr	r1, [sp, #132]	; 0x84
   20f24:	2330      	movs	r3, #48	; 0x30
   20f26:	f10d 02f3 	add.w	r2, sp, #243	; 0xf3
   20f2a:	f88d 30f3 	strb.w	r3, [sp, #243]	; 0xf3
   20f2e:	9213      	str	r2, [sp, #76]	; 0x4c
   20f30:	910e      	str	r1, [sp, #56]	; 0x38
   20f32:	e4b8      	b.n	208a6 <_svfprintf_r+0x32e>
   20f34:	980c      	ldr	r0, [sp, #48]	; 0x30
   20f36:	990b      	ldr	r1, [sp, #44]	; 0x2c
   20f38:	1a47      	subs	r7, r0, r1
   20f3a:	2f00      	cmp	r7, #0
   20f3c:	f77f aed6 	ble.w	20cec <_svfprintf_r+0x774>
   20f40:	2f10      	cmp	r7, #16
   20f42:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   20f44:	bfd8      	it	le
   20f46:	f8df 87f0 	ldrle.w	r8, [pc, #2032]	; 21738 <_svfprintf_r+0x11c0>
   20f4a:	dd24      	ble.n	20f96 <_svfprintf_r+0xa1e>
   20f4c:	f8df 87e8 	ldr.w	r8, [pc, #2024]	; 21738 <_svfprintf_r+0x11c0>
   20f50:	4623      	mov	r3, r4
   20f52:	f04f 0910 	mov.w	r9, #16
   20f56:	4644      	mov	r4, r8
   20f58:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   20f5c:	e002      	b.n	20f64 <_svfprintf_r+0x9ec>
   20f5e:	3f10      	subs	r7, #16
   20f60:	2f10      	cmp	r7, #16
   20f62:	dd16      	ble.n	20f92 <_svfprintf_r+0xa1a>
   20f64:	3301      	adds	r3, #1
   20f66:	e886 0210 	stmia.w	r6, {r4, r9}
   20f6a:	3510      	adds	r5, #16
   20f6c:	3608      	adds	r6, #8
   20f6e:	2b07      	cmp	r3, #7
   20f70:	933e      	str	r3, [sp, #248]	; 0xf8
   20f72:	953f      	str	r5, [sp, #252]	; 0xfc
   20f74:	ddf3      	ble.n	20f5e <_svfprintf_r+0x9e6>
   20f76:	4640      	mov	r0, r8
   20f78:	4659      	mov	r1, fp
   20f7a:	aa3d      	add	r2, sp, #244	; 0xf4
   20f7c:	ae23      	add	r6, sp, #140	; 0x8c
   20f7e:	f002 ffe9 	bl	23f54 <__ssprint_r>
   20f82:	2800      	cmp	r0, #0
   20f84:	f47f abec 	bne.w	20760 <_svfprintf_r+0x1e8>
   20f88:	3f10      	subs	r7, #16
   20f8a:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   20f8c:	2f10      	cmp	r7, #16
   20f8e:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
   20f90:	dce8      	bgt.n	20f64 <_svfprintf_r+0x9ec>
   20f92:	46a0      	mov	r8, r4
   20f94:	461c      	mov	r4, r3
   20f96:	3401      	adds	r4, #1
   20f98:	f8c6 8000 	str.w	r8, [r6]
   20f9c:	2c07      	cmp	r4, #7
   20f9e:	6077      	str	r7, [r6, #4]
   20fa0:	443d      	add	r5, r7
   20fa2:	943e      	str	r4, [sp, #248]	; 0xf8
   20fa4:	953f      	str	r5, [sp, #252]	; 0xfc
   20fa6:	f300 820c 	bgt.w	213c2 <_svfprintf_r+0xe4a>
   20faa:	3608      	adds	r6, #8
   20fac:	e69e      	b.n	20cec <_svfprintf_r+0x774>
   20fae:	9b12      	ldr	r3, [sp, #72]	; 0x48
   20fb0:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   20fb2:	2b01      	cmp	r3, #1
   20fb4:	f340 81d2 	ble.w	2135c <_svfprintf_r+0xde4>
   20fb8:	3401      	adds	r4, #1
   20fba:	9913      	ldr	r1, [sp, #76]	; 0x4c
   20fbc:	3501      	adds	r5, #1
   20fbe:	2301      	movs	r3, #1
   20fc0:	2c07      	cmp	r4, #7
   20fc2:	e886 000a 	stmia.w	r6, {r1, r3}
   20fc6:	953f      	str	r5, [sp, #252]	; 0xfc
   20fc8:	943e      	str	r4, [sp, #248]	; 0xf8
   20fca:	f300 81e2 	bgt.w	21392 <_svfprintf_r+0xe1a>
   20fce:	3608      	adds	r6, #8
   20fd0:	3401      	adds	r4, #1
   20fd2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   20fd4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   20fd6:	2c07      	cmp	r4, #7
   20fd8:	441d      	add	r5, r3
   20fda:	e886 000c 	stmia.w	r6, {r2, r3}
   20fde:	943e      	str	r4, [sp, #248]	; 0xf8
   20fe0:	953f      	str	r5, [sp, #252]	; 0xfc
   20fe2:	f300 81e2 	bgt.w	213aa <_svfprintf_r+0xe32>
   20fe6:	3608      	adds	r6, #8
   20fe8:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
   20fec:	2200      	movs	r2, #0
   20fee:	2300      	movs	r3, #0
   20ff0:	f003 feb0 	bl	24d54 <__aeabi_dcmpeq>
   20ff4:	2800      	cmp	r0, #0
   20ff6:	f040 810e 	bne.w	21216 <_svfprintf_r+0xc9e>
   20ffa:	9812      	ldr	r0, [sp, #72]	; 0x48
   20ffc:	3401      	adds	r4, #1
   20ffe:	9913      	ldr	r1, [sp, #76]	; 0x4c
   21000:	1e43      	subs	r3, r0, #1
   21002:	6073      	str	r3, [r6, #4]
   21004:	461a      	mov	r2, r3
   21006:	1c4b      	adds	r3, r1, #1
   21008:	2c07      	cmp	r4, #7
   2100a:	6033      	str	r3, [r6, #0]
   2100c:	4415      	add	r5, r2
   2100e:	943e      	str	r4, [sp, #248]	; 0xf8
   21010:	953f      	str	r5, [sp, #252]	; 0xfc
   21012:	dc21      	bgt.n	21058 <_svfprintf_r+0xae0>
   21014:	3608      	adds	r6, #8
   21016:	3401      	adds	r4, #1
   21018:	9820      	ldr	r0, [sp, #128]	; 0x80
   2101a:	2c07      	cmp	r4, #7
   2101c:	ab40      	add	r3, sp, #256	; 0x100
   2101e:	4405      	add	r5, r0
   21020:	6033      	str	r3, [r6, #0]
   21022:	6070      	str	r0, [r6, #4]
   21024:	953f      	str	r5, [sp, #252]	; 0xfc
   21026:	943e      	str	r4, [sp, #248]	; 0xf8
   21028:	f77f aea9 	ble.w	20d7e <_svfprintf_r+0x806>
   2102c:	9810      	ldr	r0, [sp, #64]	; 0x40
   2102e:	4659      	mov	r1, fp
   21030:	aa3d      	add	r2, sp, #244	; 0xf4
   21032:	f002 ff8f 	bl	23f54 <__ssprint_r>
   21036:	2800      	cmp	r0, #0
   21038:	f47f ab92 	bne.w	20760 <_svfprintf_r+0x1e8>
   2103c:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   2103e:	ae23      	add	r6, sp, #140	; 0x8c
   21040:	e69e      	b.n	20d80 <_svfprintf_r+0x808>
   21042:	46a0      	mov	r8, r4
   21044:	461c      	mov	r4, r3
   21046:	3401      	adds	r4, #1
   21048:	f8c6 8000 	str.w	r8, [r6]
   2104c:	2c07      	cmp	r4, #7
   2104e:	6077      	str	r7, [r6, #4]
   21050:	443d      	add	r5, r7
   21052:	943e      	str	r4, [sp, #248]	; 0xf8
   21054:	953f      	str	r5, [sp, #252]	; 0xfc
   21056:	dddd      	ble.n	21014 <_svfprintf_r+0xa9c>
   21058:	9810      	ldr	r0, [sp, #64]	; 0x40
   2105a:	4659      	mov	r1, fp
   2105c:	aa3d      	add	r2, sp, #244	; 0xf4
   2105e:	f002 ff79 	bl	23f54 <__ssprint_r>
   21062:	2800      	cmp	r0, #0
   21064:	f47f ab7c 	bne.w	20760 <_svfprintf_r+0x1e8>
   21068:	ae23      	add	r6, sp, #140	; 0x8c
   2106a:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   2106c:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   2106e:	e7d2      	b.n	21016 <_svfprintf_r+0xa9e>
   21070:	9810      	ldr	r0, [sp, #64]	; 0x40
   21072:	4659      	mov	r1, fp
   21074:	aa3d      	add	r2, sp, #244	; 0xf4
   21076:	f002 ff6d 	bl	23f54 <__ssprint_r>
   2107a:	2800      	cmp	r0, #0
   2107c:	f43f aecf 	beq.w	20e1e <_svfprintf_r+0x8a6>
   21080:	f7ff bb6e 	b.w	20760 <_svfprintf_r+0x1e8>
   21084:	930e      	str	r3, [sp, #56]	; 0x38
   21086:	ab3d      	add	r3, sp, #244	; 0xf4
   21088:	9313      	str	r3, [sp, #76]	; 0x4c
   2108a:	e40c      	b.n	208a6 <_svfprintf_r+0x32e>
   2108c:	9810      	ldr	r0, [sp, #64]	; 0x40
   2108e:	4659      	mov	r1, fp
   21090:	aa3d      	add	r2, sp, #244	; 0xf4
   21092:	f002 ff5f 	bl	23f54 <__ssprint_r>
   21096:	2800      	cmp	r0, #0
   21098:	f47f ab62 	bne.w	20760 <_svfprintf_r+0x1e8>
   2109c:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   2109e:	ae23      	add	r6, sp, #140	; 0x8c
   210a0:	e65f      	b.n	20d62 <_svfprintf_r+0x7ea>
   210a2:	9810      	ldr	r0, [sp, #64]	; 0x40
   210a4:	4659      	mov	r1, fp
   210a6:	aa3d      	add	r2, sp, #244	; 0xf4
   210a8:	f002 ff54 	bl	23f54 <__ssprint_r>
   210ac:	2800      	cmp	r0, #0
   210ae:	f47f ab57 	bne.w	20760 <_svfprintf_r+0x1e8>
   210b2:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   210b4:	ae23      	add	r6, sp, #140	; 0x8c
   210b6:	e606      	b.n	20cc6 <_svfprintf_r+0x74e>
   210b8:	9810      	ldr	r0, [sp, #64]	; 0x40
   210ba:	4659      	mov	r1, fp
   210bc:	aa3d      	add	r2, sp, #244	; 0xf4
   210be:	f002 ff49 	bl	23f54 <__ssprint_r>
   210c2:	2800      	cmp	r0, #0
   210c4:	f47f ab4c 	bne.w	20760 <_svfprintf_r+0x1e8>
   210c8:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   210ca:	ae23      	add	r6, sp, #140	; 0x8c
   210cc:	e60a      	b.n	20ce4 <_svfprintf_r+0x76c>
   210ce:	4620      	mov	r0, r4
   210d0:	4629      	mov	r1, r5
   210d2:	220a      	movs	r2, #10
   210d4:	2300      	movs	r3, #0
   210d6:	f7f1 ff1f 	bl	12f18 <__aeabi_uldivmod>
   210da:	4646      	mov	r6, r8
   210dc:	4620      	mov	r0, r4
   210de:	4629      	mov	r1, r5
   210e0:	2300      	movs	r3, #0
   210e2:	f108 38ff 	add.w	r8, r8, #4294967295
   210e6:	f102 0430 	add.w	r4, r2, #48	; 0x30
   210ea:	220a      	movs	r2, #10
   210ec:	7034      	strb	r4, [r6, #0]
   210ee:	f7f1 ff13 	bl	12f18 <__aeabi_uldivmod>
   210f2:	4604      	mov	r4, r0
   210f4:	460d      	mov	r5, r1
   210f6:	ea54 0305 	orrs.w	r3, r4, r5
   210fa:	d1e8      	bne.n	210ce <_svfprintf_r+0xb56>
   210fc:	9613      	str	r6, [sp, #76]	; 0x4c
   210fe:	464e      	mov	r6, r9
   21100:	9809      	ldr	r0, [sp, #36]	; 0x24
   21102:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   21104:	1ac3      	subs	r3, r0, r3
   21106:	930e      	str	r3, [sp, #56]	; 0x38
   21108:	f7ff bbcd 	b.w	208a6 <_svfprintf_r+0x32e>
   2110c:	9f44      	ldr	r7, [sp, #272]	; 0x110
   2110e:	2f00      	cmp	r7, #0
   21110:	f340 81d7 	ble.w	214c2 <_svfprintf_r+0xf4a>
   21114:	9f12      	ldr	r7, [sp, #72]	; 0x48
   21116:	991a      	ldr	r1, [sp, #104]	; 0x68
   21118:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2111a:	428f      	cmp	r7, r1
   2111c:	bfa8      	it	ge
   2111e:	460f      	movge	r7, r1
   21120:	9b12      	ldr	r3, [sp, #72]	; 0x48
   21122:	2f00      	cmp	r7, #0
   21124:	441a      	add	r2, r3
   21126:	920e      	str	r2, [sp, #56]	; 0x38
   21128:	dd0b      	ble.n	21142 <_svfprintf_r+0xbca>
   2112a:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   2112c:	19ed      	adds	r5, r5, r7
   2112e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   21130:	3401      	adds	r4, #1
   21132:	6077      	str	r7, [r6, #4]
   21134:	2c07      	cmp	r4, #7
   21136:	6033      	str	r3, [r6, #0]
   21138:	953f      	str	r5, [sp, #252]	; 0xfc
   2113a:	943e      	str	r4, [sp, #248]	; 0xf8
   2113c:	f300 8384 	bgt.w	21848 <_svfprintf_r+0x12d0>
   21140:	3608      	adds	r6, #8
   21142:	981a      	ldr	r0, [sp, #104]	; 0x68
   21144:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
   21148:	1bc7      	subs	r7, r0, r7
   2114a:	2f00      	cmp	r7, #0
   2114c:	f340 80ae 	ble.w	212ac <_svfprintf_r+0xd34>
   21150:	2f10      	cmp	r7, #16
   21152:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   21154:	bfd8      	it	le
   21156:	f8df 85e0 	ldrle.w	r8, [pc, #1504]	; 21738 <_svfprintf_r+0x11c0>
   2115a:	f340 8170 	ble.w	2143e <_svfprintf_r+0xec6>
   2115e:	f8df 85d8 	ldr.w	r8, [pc, #1496]	; 21738 <_svfprintf_r+0x11c0>
   21162:	4623      	mov	r3, r4
   21164:	f04f 0910 	mov.w	r9, #16
   21168:	4644      	mov	r4, r8
   2116a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   2116e:	e003      	b.n	21178 <_svfprintf_r+0xc00>
   21170:	3f10      	subs	r7, #16
   21172:	2f10      	cmp	r7, #16
   21174:	f340 8161 	ble.w	2143a <_svfprintf_r+0xec2>
   21178:	3301      	adds	r3, #1
   2117a:	e886 0210 	stmia.w	r6, {r4, r9}
   2117e:	3510      	adds	r5, #16
   21180:	3608      	adds	r6, #8
   21182:	2b07      	cmp	r3, #7
   21184:	933e      	str	r3, [sp, #248]	; 0xf8
   21186:	953f      	str	r5, [sp, #252]	; 0xfc
   21188:	ddf2      	ble.n	21170 <_svfprintf_r+0xbf8>
   2118a:	4640      	mov	r0, r8
   2118c:	4659      	mov	r1, fp
   2118e:	aa3d      	add	r2, sp, #244	; 0xf4
   21190:	ae23      	add	r6, sp, #140	; 0x8c
   21192:	f002 fedf 	bl	23f54 <__ssprint_r>
   21196:	2800      	cmp	r0, #0
   21198:	f47f aae2 	bne.w	20760 <_svfprintf_r+0x1e8>
   2119c:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   2119e:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
   211a0:	e7e6      	b.n	21170 <_svfprintf_r+0xbf8>
   211a2:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
   211a6:	f10d 02f3 	add.w	r2, sp, #243	; 0xf3
   211aa:	46b4      	mov	ip, r6
   211ac:	f004 010f 	and.w	r1, r4, #15
   211b0:	0923      	lsrs	r3, r4, #4
   211b2:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   211b6:	092e      	lsrs	r6, r5, #4
   211b8:	f818 0001 	ldrb.w	r0, [r8, r1]
   211bc:	461c      	mov	r4, r3
   211be:	4635      	mov	r5, r6
   211c0:	4611      	mov	r1, r2
   211c2:	3a01      	subs	r2, #1
   211c4:	ea54 0305 	orrs.w	r3, r4, r5
   211c8:	7008      	strb	r0, [r1, #0]
   211ca:	d1ef      	bne.n	211ac <_svfprintf_r+0xc34>
   211cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   211ce:	4666      	mov	r6, ip
   211d0:	9113      	str	r1, [sp, #76]	; 0x4c
   211d2:	1a5b      	subs	r3, r3, r1
   211d4:	930e      	str	r3, [sp, #56]	; 0x38
   211d6:	f7ff bb66 	b.w	208a6 <_svfprintf_r+0x32e>
   211da:	2c0a      	cmp	r4, #10
   211dc:	f175 0000 	sbcs.w	r0, r5, #0
   211e0:	bf24      	itt	cs
   211e2:	f10d 08f3 	addcs.w	r8, sp, #243	; 0xf3
   211e6:	46b1      	movcs	r9, r6
   211e8:	f4bf af71 	bcs.w	210ce <_svfprintf_r+0xb56>
   211ec:	9921      	ldr	r1, [sp, #132]	; 0x84
   211ee:	3430      	adds	r4, #48	; 0x30
   211f0:	f10d 02f3 	add.w	r2, sp, #243	; 0xf3
   211f4:	f88d 40f3 	strb.w	r4, [sp, #243]	; 0xf3
   211f8:	9213      	str	r2, [sp, #76]	; 0x4c
   211fa:	910e      	str	r1, [sp, #56]	; 0x38
   211fc:	f7ff bb53 	b.w	208a6 <_svfprintf_r+0x32e>
   21200:	9810      	ldr	r0, [sp, #64]	; 0x40
   21202:	4659      	mov	r1, fp
   21204:	aa3d      	add	r2, sp, #244	; 0xf4
   21206:	f002 fea5 	bl	23f54 <__ssprint_r>
   2120a:	2800      	cmp	r0, #0
   2120c:	f47f aaa8 	bne.w	20760 <_svfprintf_r+0x1e8>
   21210:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   21212:	ae23      	add	r6, sp, #140	; 0x8c
   21214:	e546      	b.n	20ca4 <_svfprintf_r+0x72c>
   21216:	9a12      	ldr	r2, [sp, #72]	; 0x48
   21218:	1e57      	subs	r7, r2, #1
   2121a:	2f00      	cmp	r7, #0
   2121c:	f77f aefb 	ble.w	21016 <_svfprintf_r+0xa9e>
   21220:	2f10      	cmp	r7, #16
   21222:	f8df 8514 	ldr.w	r8, [pc, #1300]	; 21738 <_svfprintf_r+0x11c0>
   21226:	f77f af0e 	ble.w	21046 <_svfprintf_r+0xace>
   2122a:	4623      	mov	r3, r4
   2122c:	f04f 0910 	mov.w	r9, #16
   21230:	4644      	mov	r4, r8
   21232:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   21236:	e003      	b.n	21240 <_svfprintf_r+0xcc8>
   21238:	3f10      	subs	r7, #16
   2123a:	2f10      	cmp	r7, #16
   2123c:	f77f af01 	ble.w	21042 <_svfprintf_r+0xaca>
   21240:	3301      	adds	r3, #1
   21242:	e886 0210 	stmia.w	r6, {r4, r9}
   21246:	3510      	adds	r5, #16
   21248:	3608      	adds	r6, #8
   2124a:	2b07      	cmp	r3, #7
   2124c:	933e      	str	r3, [sp, #248]	; 0xf8
   2124e:	953f      	str	r5, [sp, #252]	; 0xfc
   21250:	ddf2      	ble.n	21238 <_svfprintf_r+0xcc0>
   21252:	4640      	mov	r0, r8
   21254:	4659      	mov	r1, fp
   21256:	aa3d      	add	r2, sp, #244	; 0xf4
   21258:	ae23      	add	r6, sp, #140	; 0x8c
   2125a:	f002 fe7b 	bl	23f54 <__ssprint_r>
   2125e:	2800      	cmp	r0, #0
   21260:	f47f aa7e 	bne.w	20760 <_svfprintf_r+0x1e8>
   21264:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   21266:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
   21268:	e7e6      	b.n	21238 <_svfprintf_r+0xcc0>
   2126a:	2202      	movs	r2, #2
   2126c:	f7ff bbd0 	b.w	20a10 <_svfprintf_r+0x498>
   21270:	9911      	ldr	r1, [sp, #68]	; 0x44
   21272:	2201      	movs	r2, #1
   21274:	680b      	ldr	r3, [r1, #0]
   21276:	3104      	adds	r1, #4
   21278:	9111      	str	r1, [sp, #68]	; 0x44
   2127a:	461c      	mov	r4, r3
   2127c:	3300      	adds	r3, #0
   2127e:	bf18      	it	ne
   21280:	2301      	movne	r3, #1
   21282:	2500      	movs	r5, #0
   21284:	f7ff bbc4 	b.w	20a10 <_svfprintf_r+0x498>
   21288:	9811      	ldr	r0, [sp, #68]	; 0x44
   2128a:	2500      	movs	r5, #0
   2128c:	6803      	ldr	r3, [r0, #0]
   2128e:	3004      	adds	r0, #4
   21290:	9011      	str	r0, [sp, #68]	; 0x44
   21292:	461c      	mov	r4, r3
   21294:	f7ff bbe0 	b.w	20a58 <_svfprintf_r+0x4e0>
   21298:	9810      	ldr	r0, [sp, #64]	; 0x40
   2129a:	4659      	mov	r1, fp
   2129c:	aa3d      	add	r2, sp, #244	; 0xf4
   2129e:	f002 fe59 	bl	23f54 <__ssprint_r>
   212a2:	2800      	cmp	r0, #0
   212a4:	f47f aa5c 	bne.w	20760 <_svfprintf_r+0x1e8>
   212a8:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   212aa:	ae23      	add	r6, sp, #140	; 0x8c
   212ac:	9b44      	ldr	r3, [sp, #272]	; 0x110
   212ae:	9912      	ldr	r1, [sp, #72]	; 0x48
   212b0:	4299      	cmp	r1, r3
   212b2:	dc45      	bgt.n	21340 <_svfprintf_r+0xdc8>
   212b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   212b6:	07d1      	lsls	r1, r2, #31
   212b8:	d442      	bmi.n	21340 <_svfprintf_r+0xdc8>
   212ba:	9813      	ldr	r0, [sp, #76]	; 0x4c
   212bc:	991a      	ldr	r1, [sp, #104]	; 0x68
   212be:	1842      	adds	r2, r0, r1
   212c0:	9812      	ldr	r0, [sp, #72]	; 0x48
   212c2:	990e      	ldr	r1, [sp, #56]	; 0x38
   212c4:	1ac3      	subs	r3, r0, r3
   212c6:	1a8f      	subs	r7, r1, r2
   212c8:	42bb      	cmp	r3, r7
   212ca:	bfb8      	it	lt
   212cc:	461f      	movlt	r7, r3
   212ce:	2f00      	cmp	r7, #0
   212d0:	dd0a      	ble.n	212e8 <_svfprintf_r+0xd70>
   212d2:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   212d4:	19ed      	adds	r5, r5, r7
   212d6:	6032      	str	r2, [r6, #0]
   212d8:	3401      	adds	r4, #1
   212da:	6077      	str	r7, [r6, #4]
   212dc:	2c07      	cmp	r4, #7
   212de:	953f      	str	r5, [sp, #252]	; 0xfc
   212e0:	943e      	str	r4, [sp, #248]	; 0xf8
   212e2:	f300 82d5 	bgt.w	21890 <_svfprintf_r+0x1318>
   212e6:	3608      	adds	r6, #8
   212e8:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
   212ec:	1bdf      	subs	r7, r3, r7
   212ee:	2f00      	cmp	r7, #0
   212f0:	f77f ad46 	ble.w	20d80 <_svfprintf_r+0x808>
   212f4:	2f10      	cmp	r7, #16
   212f6:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   212f8:	f340 834b 	ble.w	21992 <_svfprintf_r+0x141a>
   212fc:	f8df 8438 	ldr.w	r8, [pc, #1080]	; 21738 <_svfprintf_r+0x11c0>
   21300:	4623      	mov	r3, r4
   21302:	f04f 0910 	mov.w	r9, #16
   21306:	4644      	mov	r4, r8
   21308:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   2130c:	e003      	b.n	21316 <_svfprintf_r+0xd9e>
   2130e:	3f10      	subs	r7, #16
   21310:	2f10      	cmp	r7, #16
   21312:	f77f ad89 	ble.w	20e28 <_svfprintf_r+0x8b0>
   21316:	3301      	adds	r3, #1
   21318:	e886 0210 	stmia.w	r6, {r4, r9}
   2131c:	3510      	adds	r5, #16
   2131e:	3608      	adds	r6, #8
   21320:	2b07      	cmp	r3, #7
   21322:	933e      	str	r3, [sp, #248]	; 0xf8
   21324:	953f      	str	r5, [sp, #252]	; 0xfc
   21326:	ddf2      	ble.n	2130e <_svfprintf_r+0xd96>
   21328:	4640      	mov	r0, r8
   2132a:	4659      	mov	r1, fp
   2132c:	aa3d      	add	r2, sp, #244	; 0xf4
   2132e:	ae23      	add	r6, sp, #140	; 0x8c
   21330:	f002 fe10 	bl	23f54 <__ssprint_r>
   21334:	2800      	cmp	r0, #0
   21336:	f47f aa13 	bne.w	20760 <_svfprintf_r+0x1e8>
   2133a:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   2133c:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
   2133e:	e7e6      	b.n	2130e <_svfprintf_r+0xd96>
   21340:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   21342:	981c      	ldr	r0, [sp, #112]	; 0x70
   21344:	3401      	adds	r4, #1
   21346:	991b      	ldr	r1, [sp, #108]	; 0x6c
   21348:	2c07      	cmp	r4, #7
   2134a:	4405      	add	r5, r0
   2134c:	6070      	str	r0, [r6, #4]
   2134e:	6031      	str	r1, [r6, #0]
   21350:	953f      	str	r5, [sp, #252]	; 0xfc
   21352:	943e      	str	r4, [sp, #248]	; 0xf8
   21354:	f300 8290 	bgt.w	21878 <_svfprintf_r+0x1300>
   21358:	3608      	adds	r6, #8
   2135a:	e7ae      	b.n	212ba <_svfprintf_r+0xd42>
   2135c:	980a      	ldr	r0, [sp, #40]	; 0x28
   2135e:	07c2      	lsls	r2, r0, #31
   21360:	f53f ae2a 	bmi.w	20fb8 <_svfprintf_r+0xa40>
   21364:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   21366:	3401      	adds	r4, #1
   21368:	3501      	adds	r5, #1
   2136a:	6033      	str	r3, [r6, #0]
   2136c:	2301      	movs	r3, #1
   2136e:	2c07      	cmp	r4, #7
   21370:	6073      	str	r3, [r6, #4]
   21372:	953f      	str	r5, [sp, #252]	; 0xfc
   21374:	943e      	str	r4, [sp, #248]	; 0xf8
   21376:	f77f ae4d 	ble.w	21014 <_svfprintf_r+0xa9c>
   2137a:	9810      	ldr	r0, [sp, #64]	; 0x40
   2137c:	4659      	mov	r1, fp
   2137e:	aa3d      	add	r2, sp, #244	; 0xf4
   21380:	f002 fde8 	bl	23f54 <__ssprint_r>
   21384:	2800      	cmp	r0, #0
   21386:	f47f a9eb 	bne.w	20760 <_svfprintf_r+0x1e8>
   2138a:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   2138c:	ae23      	add	r6, sp, #140	; 0x8c
   2138e:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   21390:	e641      	b.n	21016 <_svfprintf_r+0xa9e>
   21392:	9810      	ldr	r0, [sp, #64]	; 0x40
   21394:	4659      	mov	r1, fp
   21396:	aa3d      	add	r2, sp, #244	; 0xf4
   21398:	f002 fddc 	bl	23f54 <__ssprint_r>
   2139c:	2800      	cmp	r0, #0
   2139e:	f47f a9df 	bne.w	20760 <_svfprintf_r+0x1e8>
   213a2:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   213a4:	ae23      	add	r6, sp, #140	; 0x8c
   213a6:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   213a8:	e612      	b.n	20fd0 <_svfprintf_r+0xa58>
   213aa:	9810      	ldr	r0, [sp, #64]	; 0x40
   213ac:	4659      	mov	r1, fp
   213ae:	aa3d      	add	r2, sp, #244	; 0xf4
   213b0:	f002 fdd0 	bl	23f54 <__ssprint_r>
   213b4:	2800      	cmp	r0, #0
   213b6:	f47f a9d3 	bne.w	20760 <_svfprintf_r+0x1e8>
   213ba:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   213bc:	ae23      	add	r6, sp, #140	; 0x8c
   213be:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   213c0:	e612      	b.n	20fe8 <_svfprintf_r+0xa70>
   213c2:	9810      	ldr	r0, [sp, #64]	; 0x40
   213c4:	4659      	mov	r1, fp
   213c6:	aa3d      	add	r2, sp, #244	; 0xf4
   213c8:	f002 fdc4 	bl	23f54 <__ssprint_r>
   213cc:	2800      	cmp	r0, #0
   213ce:	f47f a9c7 	bne.w	20760 <_svfprintf_r+0x1e8>
   213d2:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   213d4:	ae23      	add	r6, sp, #140	; 0x8c
   213d6:	e489      	b.n	20cec <_svfprintf_r+0x774>
   213d8:	4264      	negs	r4, r4
   213da:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   213de:	232d      	movs	r3, #45	; 0x2d
   213e0:	ea54 0205 	orrs.w	r2, r4, r5
   213e4:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
   213e8:	bf0c      	ite	eq
   213ea:	2300      	moveq	r3, #0
   213ec:	2301      	movne	r3, #1
   213ee:	2201      	movs	r2, #1
   213f0:	f7ff ba20 	b.w	20834 <_svfprintf_r+0x2bc>
   213f4:	4629      	mov	r1, r5
   213f6:	f7fd fad5 	bl	1e9a4 <__fpclassifyd>
   213fa:	2800      	cmp	r0, #0
   213fc:	f040 80ba 	bne.w	21574 <_svfprintf_r+0xffc>
   21400:	9014      	str	r0, [sp, #80]	; 0x50
   21402:	f64b 73a8 	movw	r3, #49064	; 0xbfa8
   21406:	9817      	ldr	r0, [sp, #92]	; 0x5c
   21408:	f2c0 0302 	movt	r3, #2
   2140c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   2140e:	2103      	movs	r1, #3
   21410:	910b      	str	r1, [sp, #44]	; 0x2c
   21412:	2847      	cmp	r0, #71	; 0x47
   21414:	bfd8      	it	le
   21416:	461a      	movle	r2, r3
   21418:	9814      	ldr	r0, [sp, #80]	; 0x50
   2141a:	990a      	ldr	r1, [sp, #40]	; 0x28
   2141c:	9213      	str	r2, [sp, #76]	; 0x4c
   2141e:	2203      	movs	r2, #3
   21420:	f021 0180 	bic.w	r1, r1, #128	; 0x80
   21424:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
   21428:	910a      	str	r1, [sp, #40]	; 0x28
   2142a:	920e      	str	r2, [sp, #56]	; 0x38
   2142c:	901a      	str	r0, [sp, #104]	; 0x68
   2142e:	f7ff ba44 	b.w	208ba <_svfprintf_r+0x342>
   21432:	f89a 3000 	ldrb.w	r3, [sl]
   21436:	f7ff b917 	b.w	20668 <_svfprintf_r+0xf0>
   2143a:	46a0      	mov	r8, r4
   2143c:	461c      	mov	r4, r3
   2143e:	3401      	adds	r4, #1
   21440:	f8c6 8000 	str.w	r8, [r6]
   21444:	2c07      	cmp	r4, #7
   21446:	6077      	str	r7, [r6, #4]
   21448:	443d      	add	r5, r7
   2144a:	943e      	str	r4, [sp, #248]	; 0xf8
   2144c:	953f      	str	r5, [sp, #252]	; 0xfc
   2144e:	f73f af23 	bgt.w	21298 <_svfprintf_r+0xd20>
   21452:	3608      	adds	r6, #8
   21454:	e72a      	b.n	212ac <_svfprintf_r+0xd34>
   21456:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   21458:	06d3      	lsls	r3, r2, #27
   2145a:	d57f      	bpl.n	2155c <_svfprintf_r+0xfe4>
   2145c:	9811      	ldr	r0, [sp, #68]	; 0x44
   2145e:	990d      	ldr	r1, [sp, #52]	; 0x34
   21460:	6803      	ldr	r3, [r0, #0]
   21462:	3004      	adds	r0, #4
   21464:	9011      	str	r0, [sp, #68]	; 0x44
   21466:	6019      	str	r1, [r3, #0]
   21468:	f7ff b8bc 	b.w	205e4 <_svfprintf_r+0x6c>
   2146c:	980a      	ldr	r0, [sp, #40]	; 0x28
   2146e:	f010 0240 	ands.w	r2, r0, #64	; 0x40
   21472:	f000 8163 	beq.w	2173c <_svfprintf_r+0x11c4>
   21476:	9911      	ldr	r1, [sp, #68]	; 0x44
   21478:	2500      	movs	r5, #0
   2147a:	461a      	mov	r2, r3
   2147c:	880c      	ldrh	r4, [r1, #0]
   2147e:	3104      	adds	r1, #4
   21480:	9111      	str	r1, [sp, #68]	; 0x44
   21482:	ea54 0305 	orrs.w	r3, r4, r5
   21486:	bf0c      	ite	eq
   21488:	2300      	moveq	r3, #0
   2148a:	2301      	movne	r3, #1
   2148c:	f7ff bac0 	b.w	20a10 <_svfprintf_r+0x498>
   21490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21492:	0659      	lsls	r1, r3, #25
   21494:	f140 815d 	bpl.w	21752 <_svfprintf_r+0x11da>
   21498:	9811      	ldr	r0, [sp, #68]	; 0x44
   2149a:	f9b0 4000 	ldrsh.w	r4, [r0]
   2149e:	3004      	adds	r0, #4
   214a0:	9011      	str	r0, [sp, #68]	; 0x44
   214a2:	4622      	mov	r2, r4
   214a4:	17e5      	asrs	r5, r4, #31
   214a6:	462b      	mov	r3, r5
   214a8:	f7ff b9b8 	b.w	2081c <_svfprintf_r+0x2a4>
   214ac:	9810      	ldr	r0, [sp, #64]	; 0x40
   214ae:	4659      	mov	r1, fp
   214b0:	aa3d      	add	r2, sp, #244	; 0xf4
   214b2:	f002 fd4f 	bl	23f54 <__ssprint_r>
   214b6:	2800      	cmp	r0, #0
   214b8:	f47f a952 	bne.w	20760 <_svfprintf_r+0x1e8>
   214bc:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   214be:	ae23      	add	r6, sp, #140	; 0x8c
   214c0:	e4e5      	b.n	20e8e <_svfprintf_r+0x916>
   214c2:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   214c4:	f64b 73e0 	movw	r3, #49120	; 0xbfe0
   214c8:	f2c0 0302 	movt	r3, #2
   214cc:	6033      	str	r3, [r6, #0]
   214ce:	3401      	adds	r4, #1
   214d0:	2301      	movs	r3, #1
   214d2:	2c07      	cmp	r4, #7
   214d4:	6073      	str	r3, [r6, #4]
   214d6:	441d      	add	r5, r3
   214d8:	943e      	str	r4, [sp, #248]	; 0xf8
   214da:	953f      	str	r5, [sp, #252]	; 0xfc
   214dc:	f300 8167 	bgt.w	217ae <_svfprintf_r+0x1236>
   214e0:	3608      	adds	r6, #8
   214e2:	b92f      	cbnz	r7, 214f0 <_svfprintf_r+0xf78>
   214e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   214e6:	b91b      	cbnz	r3, 214f0 <_svfprintf_r+0xf78>
   214e8:	980a      	ldr	r0, [sp, #40]	; 0x28
   214ea:	07c0      	lsls	r0, r0, #31
   214ec:	f57f ac48 	bpl.w	20d80 <_svfprintf_r+0x808>
   214f0:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   214f2:	991c      	ldr	r1, [sp, #112]	; 0x70
   214f4:	3401      	adds	r4, #1
   214f6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   214f8:	2c07      	cmp	r4, #7
   214fa:	440d      	add	r5, r1
   214fc:	6071      	str	r1, [r6, #4]
   214fe:	6032      	str	r2, [r6, #0]
   21500:	953f      	str	r5, [sp, #252]	; 0xfc
   21502:	943e      	str	r4, [sp, #248]	; 0xf8
   21504:	f300 8215 	bgt.w	21932 <_svfprintf_r+0x13ba>
   21508:	3608      	adds	r6, #8
   2150a:	427f      	negs	r7, r7
   2150c:	2f00      	cmp	r7, #0
   2150e:	f340 8180 	ble.w	21812 <_svfprintf_r+0x129a>
   21512:	2f10      	cmp	r7, #16
   21514:	f8df 8220 	ldr.w	r8, [pc, #544]	; 21738 <_svfprintf_r+0x11c0>
   21518:	f340 81a3 	ble.w	21862 <_svfprintf_r+0x12ea>
   2151c:	4623      	mov	r3, r4
   2151e:	f04f 0910 	mov.w	r9, #16
   21522:	4644      	mov	r4, r8
   21524:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   21528:	e003      	b.n	21532 <_svfprintf_r+0xfba>
   2152a:	3f10      	subs	r7, #16
   2152c:	2f10      	cmp	r7, #16
   2152e:	f340 8196 	ble.w	2185e <_svfprintf_r+0x12e6>
   21532:	3301      	adds	r3, #1
   21534:	e886 0210 	stmia.w	r6, {r4, r9}
   21538:	3510      	adds	r5, #16
   2153a:	3608      	adds	r6, #8
   2153c:	2b07      	cmp	r3, #7
   2153e:	933e      	str	r3, [sp, #248]	; 0xf8
   21540:	953f      	str	r5, [sp, #252]	; 0xfc
   21542:	ddf2      	ble.n	2152a <_svfprintf_r+0xfb2>
   21544:	4640      	mov	r0, r8
   21546:	4659      	mov	r1, fp
   21548:	aa3d      	add	r2, sp, #244	; 0xf4
   2154a:	ae23      	add	r6, sp, #140	; 0x8c
   2154c:	f002 fd02 	bl	23f54 <__ssprint_r>
   21550:	2800      	cmp	r0, #0
   21552:	f47f a905 	bne.w	20760 <_svfprintf_r+0x1e8>
   21556:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   21558:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
   2155a:	e7e6      	b.n	2152a <_svfprintf_r+0xfb2>
   2155c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2155e:	0657      	lsls	r7, r2, #25
   21560:	f140 811d 	bpl.w	2179e <_svfprintf_r+0x1226>
   21564:	9811      	ldr	r0, [sp, #68]	; 0x44
   21566:	990d      	ldr	r1, [sp, #52]	; 0x34
   21568:	6803      	ldr	r3, [r0, #0]
   2156a:	3004      	adds	r0, #4
   2156c:	9011      	str	r0, [sp, #68]	; 0x44
   2156e:	8019      	strh	r1, [r3, #0]
   21570:	f7ff b838 	b.w	205e4 <_svfprintf_r+0x6c>
   21574:	1c7a      	adds	r2, r7, #1
   21576:	f000 8126 	beq.w	217c6 <_svfprintf_r+0x124e>
   2157a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   2157c:	f1a2 0c67 	sub.w	ip, r2, #103	; 0x67
   21580:	f1dc 0300 	rsbs	r3, ip, #0
   21584:	eb43 030c 	adc.w	r3, r3, ip
   21588:	2a47      	cmp	r2, #71	; 0x47
   2158a:	bf08      	it	eq
   2158c:	f043 0301 	orreq.w	r3, r3, #1
   21590:	2b00      	cmp	r3, #0
   21592:	f000 81cc 	beq.w	2192e <_svfprintf_r+0x13b6>
   21596:	2f00      	cmp	r7, #0
   21598:	f000 81e9 	beq.w	2196e <_svfprintf_r+0x13f6>
   2159c:	2301      	movs	r3, #1
   2159e:	930b      	str	r3, [sp, #44]	; 0x2c
   215a0:	980a      	ldr	r0, [sp, #40]	; 0x28
   215a2:	2d00      	cmp	r5, #0
   215a4:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   215a8:	900a      	str	r0, [sp, #40]	; 0x28
   215aa:	f2c0 81cf 	blt.w	2194c <_svfprintf_r+0x13d4>
   215ae:	2200      	movs	r2, #0
   215b0:	9214      	str	r2, [sp, #80]	; 0x50
   215b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   215b4:	46b9      	mov	r9, r7
   215b6:	9817      	ldr	r0, [sp, #92]	; 0x5c
   215b8:	f1a3 0e66 	sub.w	lr, r3, #102	; 0x66
   215bc:	f1de 0300 	rsbs	r3, lr, #0
   215c0:	eb43 030e 	adc.w	r3, r3, lr
   215c4:	9315      	str	r3, [sp, #84]	; 0x54
   215c6:	469c      	mov	ip, r3
   215c8:	2303      	movs	r3, #3
   215ca:	2846      	cmp	r0, #70	; 0x46
   215cc:	bf08      	it	eq
   215ce:	f04c 0c01 	orreq.w	ip, ip, #1
   215d2:	f1bc 0f00 	cmp.w	ip, #0
   215d6:	d10e      	bne.n	215f6 <_svfprintf_r+0x107e>
   215d8:	f1a0 0465 	sub.w	r4, r0, #101	; 0x65
   215dc:	4263      	negs	r3, r4
   215de:	eb43 0304 	adc.w	r3, r3, r4
   215e2:	2845      	cmp	r0, #69	; 0x45
   215e4:	bf08      	it	eq
   215e6:	f043 0301 	orreq.w	r3, r3, #1
   215ea:	2b00      	cmp	r3, #0
   215ec:	f000 81b3 	beq.w	21956 <_svfprintf_r+0x13de>
   215f0:	f107 0901 	add.w	r9, r7, #1
   215f4:	2302      	movs	r3, #2
   215f6:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
   215fa:	a944      	add	r1, sp, #272	; 0x110
   215fc:	950f      	str	r5, [sp, #60]	; 0x3c
   215fe:	9300      	str	r3, [sp, #0]
   21600:	9810      	ldr	r0, [sp, #64]	; 0x40
   21602:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   21606:	9102      	str	r1, [sp, #8]
   21608:	a945      	add	r1, sp, #276	; 0x114
   2160a:	f8cd c01c 	str.w	ip, [sp, #28]
   2160e:	9103      	str	r1, [sp, #12]
   21610:	a946      	add	r1, sp, #280	; 0x118
   21612:	f8cd 9004 	str.w	r9, [sp, #4]
   21616:	9104      	str	r1, [sp, #16]
   21618:	f000 fc4e 	bl	21eb8 <_dtoa_r>
   2161c:	f8dd c01c 	ldr.w	ip, [sp, #28]
   21620:	9013      	str	r0, [sp, #76]	; 0x4c
   21622:	9817      	ldr	r0, [sp, #92]	; 0x5c
   21624:	f1b0 0367 	subs.w	r3, r0, #103	; 0x67
   21628:	bf18      	it	ne
   2162a:	2301      	movne	r3, #1
   2162c:	2847      	cmp	r0, #71	; 0x47
   2162e:	bf0c      	ite	eq
   21630:	2300      	moveq	r3, #0
   21632:	f003 0301 	andne.w	r3, r3, #1
   21636:	b923      	cbnz	r3, 21642 <_svfprintf_r+0x10ca>
   21638:	990a      	ldr	r1, [sp, #40]	; 0x28
   2163a:	07c9      	lsls	r1, r1, #31
   2163c:	bf58      	it	pl
   2163e:	9c46      	ldrpl	r4, [sp, #280]	; 0x118
   21640:	d515      	bpl.n	2166e <_svfprintf_r+0x10f6>
   21642:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   21644:	eb02 0409 	add.w	r4, r2, r9
   21648:	f1bc 0f00 	cmp.w	ip, #0
   2164c:	d005      	beq.n	2165a <_svfprintf_r+0x10e2>
   2164e:	7813      	ldrb	r3, [r2, #0]
   21650:	2b30      	cmp	r3, #48	; 0x30
   21652:	f000 80c6 	beq.w	217e2 <_svfprintf_r+0x126a>
   21656:	9b44      	ldr	r3, [sp, #272]	; 0x110
   21658:	18e4      	adds	r4, r4, r3
   2165a:	4640      	mov	r0, r8
   2165c:	2200      	movs	r2, #0
   2165e:	2300      	movs	r3, #0
   21660:	4629      	mov	r1, r5
   21662:	f003 fb77 	bl	24d54 <__aeabi_dcmpeq>
   21666:	2800      	cmp	r0, #0
   21668:	f000 8149 	beq.w	218fe <_svfprintf_r+0x1386>
   2166c:	9446      	str	r4, [sp, #280]	; 0x118
   2166e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   21670:	980b      	ldr	r0, [sp, #44]	; 0x2c
   21672:	1ae4      	subs	r4, r4, r3
   21674:	9412      	str	r4, [sp, #72]	; 0x48
   21676:	2800      	cmp	r0, #0
   21678:	f000 8127 	beq.w	218ca <_svfprintf_r+0x1352>
   2167c:	9944      	ldr	r1, [sp, #272]	; 0x110
   2167e:	1cca      	adds	r2, r1, #3
   21680:	db02      	blt.n	21688 <_svfprintf_r+0x1110>
   21682:	428f      	cmp	r7, r1
   21684:	f280 8128 	bge.w	218d8 <_svfprintf_r+0x1360>
   21688:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   2168a:	3a02      	subs	r2, #2
   2168c:	9217      	str	r2, [sp, #92]	; 0x5c
   2168e:	3901      	subs	r1, #1
   21690:	9817      	ldr	r0, [sp, #92]	; 0x5c
   21692:	2900      	cmp	r1, #0
   21694:	9144      	str	r1, [sp, #272]	; 0x110
   21696:	f88d 0100 	strb.w	r0, [sp, #256]	; 0x100
   2169a:	f2c0 81a2 	blt.w	219e2 <_svfprintf_r+0x146a>
   2169e:	232b      	movs	r3, #43	; 0x2b
   216a0:	f88d 3101 	strb.w	r3, [sp, #257]	; 0x101
   216a4:	2909      	cmp	r1, #9
   216a6:	f340 8159 	ble.w	2195c <_svfprintf_r+0x13e4>
   216aa:	ad43      	add	r5, sp, #268	; 0x10c
   216ac:	9f1d      	ldr	r7, [sp, #116]	; 0x74
   216ae:	3503      	adds	r5, #3
   216b0:	4628      	mov	r0, r5
   216b2:	fb87 3201 	smull	r3, r2, r7, r1
   216b6:	17cb      	asrs	r3, r1, #31
   216b8:	4604      	mov	r4, r0
   216ba:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
   216be:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   216c2:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
   216c6:	4619      	mov	r1, r3
   216c8:	3230      	adds	r2, #48	; 0x30
   216ca:	2b09      	cmp	r3, #9
   216cc:	f800 2d01 	strb.w	r2, [r0, #-1]!
   216d0:	dcef      	bgt.n	216b2 <_svfprintf_r+0x113a>
   216d2:	4622      	mov	r2, r4
   216d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
   216d8:	f802 1d02 	strb.w	r1, [r2, #-2]!
   216dc:	4295      	cmp	r5, r2
   216de:	bf98      	it	ls
   216e0:	f50d 7181 	addls.w	r1, sp, #258	; 0x102
   216e4:	d90b      	bls.n	216fe <_svfprintf_r+0x1186>
   216e6:	f50d 7381 	add.w	r3, sp, #258	; 0x102
   216ea:	f50d 7087 	add.w	r0, sp, #270	; 0x10e
   216ee:	e001      	b.n	216f4 <_svfprintf_r+0x117c>
   216f0:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   216f4:	4282      	cmp	r2, r0
   216f6:	f803 1b01 	strb.w	r1, [r3], #1
   216fa:	4619      	mov	r1, r3
   216fc:	d1f8      	bne.n	216f0 <_svfprintf_r+0x1178>
   216fe:	9812      	ldr	r0, [sp, #72]	; 0x48
   21700:	ab40      	add	r3, sp, #256	; 0x100
   21702:	1acb      	subs	r3, r1, r3
   21704:	9320      	str	r3, [sp, #128]	; 0x80
   21706:	2801      	cmp	r0, #1
   21708:	4403      	add	r3, r0
   2170a:	930e      	str	r3, [sp, #56]	; 0x38
   2170c:	f340 815e 	ble.w	219cc <_svfprintf_r+0x1454>
   21710:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21712:	2000      	movs	r0, #0
   21714:	901a      	str	r0, [sp, #104]	; 0x68
   21716:	3301      	adds	r3, #1
   21718:	930e      	str	r3, [sp, #56]	; 0x38
   2171a:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   2171e:	910b      	str	r1, [sp, #44]	; 0x2c
   21720:	9b14      	ldr	r3, [sp, #80]	; 0x50
   21722:	2b00      	cmp	r3, #0
   21724:	f000 80e7 	beq.w	218f6 <_svfprintf_r+0x137e>
   21728:	2300      	movs	r3, #0
   2172a:	9314      	str	r3, [sp, #80]	; 0x50
   2172c:	232d      	movs	r3, #45	; 0x2d
   2172e:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
   21732:	f7ff b8c3 	b.w	208bc <_svfprintf_r+0x344>
   21736:	bf00      	nop
   21738:	0002bf90 	.word	0x0002bf90
   2173c:	9811      	ldr	r0, [sp, #68]	; 0x44
   2173e:	6803      	ldr	r3, [r0, #0]
   21740:	3004      	adds	r0, #4
   21742:	9011      	str	r0, [sp, #68]	; 0x44
   21744:	461c      	mov	r4, r3
   21746:	3300      	adds	r3, #0
   21748:	bf18      	it	ne
   2174a:	2301      	movne	r3, #1
   2174c:	2500      	movs	r5, #0
   2174e:	f7ff b95f 	b.w	20a10 <_svfprintf_r+0x498>
   21752:	9911      	ldr	r1, [sp, #68]	; 0x44
   21754:	680b      	ldr	r3, [r1, #0]
   21756:	3104      	adds	r1, #4
   21758:	9111      	str	r1, [sp, #68]	; 0x44
   2175a:	461c      	mov	r4, r3
   2175c:	461a      	mov	r2, r3
   2175e:	17dd      	asrs	r5, r3, #31
   21760:	462b      	mov	r3, r5
   21762:	f7ff b85b 	b.w	2081c <_svfprintf_r+0x2a4>
   21766:	9810      	ldr	r0, [sp, #64]	; 0x40
   21768:	4659      	mov	r1, fp
   2176a:	aa3d      	add	r2, sp, #244	; 0xf4
   2176c:	f002 fbf2 	bl	23f54 <__ssprint_r>
   21770:	2800      	cmp	r0, #0
   21772:	f47e aff5 	bne.w	20760 <_svfprintf_r+0x1e8>
   21776:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   21778:	ae23      	add	r6, sp, #140	; 0x8c
   2177a:	f7ff bb9d 	b.w	20eb8 <_svfprintf_r+0x940>
   2177e:	9810      	ldr	r0, [sp, #64]	; 0x40
   21780:	2140      	movs	r1, #64	; 0x40
   21782:	f7fd fc3f 	bl	1f004 <_malloc_r>
   21786:	f8cb 0000 	str.w	r0, [fp]
   2178a:	f8cb 0010 	str.w	r0, [fp, #16]
   2178e:	2800      	cmp	r0, #0
   21790:	f000 8150 	beq.w	21a34 <_svfprintf_r+0x14bc>
   21794:	2340      	movs	r3, #64	; 0x40
   21796:	f8cb 3014 	str.w	r3, [fp, #20]
   2179a:	f7fe bf08 	b.w	205ae <_svfprintf_r+0x36>
   2179e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   217a0:	980d      	ldr	r0, [sp, #52]	; 0x34
   217a2:	6813      	ldr	r3, [r2, #0]
   217a4:	3204      	adds	r2, #4
   217a6:	9211      	str	r2, [sp, #68]	; 0x44
   217a8:	6018      	str	r0, [r3, #0]
   217aa:	f7fe bf1b 	b.w	205e4 <_svfprintf_r+0x6c>
   217ae:	9810      	ldr	r0, [sp, #64]	; 0x40
   217b0:	4659      	mov	r1, fp
   217b2:	aa3d      	add	r2, sp, #244	; 0xf4
   217b4:	f002 fbce 	bl	23f54 <__ssprint_r>
   217b8:	2800      	cmp	r0, #0
   217ba:	f47e afd1 	bne.w	20760 <_svfprintf_r+0x1e8>
   217be:	9f44      	ldr	r7, [sp, #272]	; 0x110
   217c0:	ae23      	add	r6, sp, #140	; 0x8c
   217c2:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   217c4:	e68d      	b.n	214e2 <_svfprintf_r+0xf6a>
   217c6:	9917      	ldr	r1, [sp, #92]	; 0x5c
   217c8:	f1a1 0967 	sub.w	r9, r1, #103	; 0x67
   217cc:	f1d9 0300 	rsbs	r3, r9, #0
   217d0:	eb43 0309 	adc.w	r3, r3, r9
   217d4:	2706      	movs	r7, #6
   217d6:	2947      	cmp	r1, #71	; 0x47
   217d8:	bf08      	it	eq
   217da:	f043 0301 	orreq.w	r3, r3, #1
   217de:	930b      	str	r3, [sp, #44]	; 0x2c
   217e0:	e6de      	b.n	215a0 <_svfprintf_r+0x1028>
   217e2:	4640      	mov	r0, r8
   217e4:	2200      	movs	r2, #0
   217e6:	2300      	movs	r3, #0
   217e8:	4629      	mov	r1, r5
   217ea:	f003 fab3 	bl	24d54 <__aeabi_dcmpeq>
   217ee:	2800      	cmp	r0, #0
   217f0:	f47f af31 	bne.w	21656 <_svfprintf_r+0x10de>
   217f4:	f1c9 0301 	rsb	r3, r9, #1
   217f8:	9344      	str	r3, [sp, #272]	; 0x110
   217fa:	e72d      	b.n	21658 <_svfprintf_r+0x10e0>
   217fc:	9810      	ldr	r0, [sp, #64]	; 0x40
   217fe:	4659      	mov	r1, fp
   21800:	aa3d      	add	r2, sp, #244	; 0xf4
   21802:	f002 fba7 	bl	23f54 <__ssprint_r>
   21806:	2800      	cmp	r0, #0
   21808:	f47e afaa 	bne.w	20760 <_svfprintf_r+0x1e8>
   2180c:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   2180e:	ae23      	add	r6, sp, #140	; 0x8c
   21810:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   21812:	3401      	adds	r4, #1
   21814:	9812      	ldr	r0, [sp, #72]	; 0x48
   21816:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   21818:	2c07      	cmp	r4, #7
   2181a:	4405      	add	r5, r0
   2181c:	6070      	str	r0, [r6, #4]
   2181e:	6033      	str	r3, [r6, #0]
   21820:	943e      	str	r4, [sp, #248]	; 0xf8
   21822:	953f      	str	r5, [sp, #252]	; 0xfc
   21824:	f77f aaab 	ble.w	20d7e <_svfprintf_r+0x806>
   21828:	f7ff bb09 	b.w	20e3e <_svfprintf_r+0x8c6>
   2182c:	9414      	str	r4, [sp, #80]	; 0x50
   2182e:	f7fe fdd1 	bl	203d4 <strlen>
   21832:	9c14      	ldr	r4, [sp, #80]	; 0x50
   21834:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
   21838:	9511      	str	r5, [sp, #68]	; 0x44
   2183a:	941a      	str	r4, [sp, #104]	; 0x68
   2183c:	900e      	str	r0, [sp, #56]	; 0x38
   2183e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   21842:	900b      	str	r0, [sp, #44]	; 0x2c
   21844:	f7ff b839 	b.w	208ba <_svfprintf_r+0x342>
   21848:	9810      	ldr	r0, [sp, #64]	; 0x40
   2184a:	4659      	mov	r1, fp
   2184c:	aa3d      	add	r2, sp, #244	; 0xf4
   2184e:	f002 fb81 	bl	23f54 <__ssprint_r>
   21852:	2800      	cmp	r0, #0
   21854:	f47e af84 	bne.w	20760 <_svfprintf_r+0x1e8>
   21858:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   2185a:	ae23      	add	r6, sp, #140	; 0x8c
   2185c:	e471      	b.n	21142 <_svfprintf_r+0xbca>
   2185e:	46a0      	mov	r8, r4
   21860:	461c      	mov	r4, r3
   21862:	3401      	adds	r4, #1
   21864:	f8c6 8000 	str.w	r8, [r6]
   21868:	2c07      	cmp	r4, #7
   2186a:	6077      	str	r7, [r6, #4]
   2186c:	443d      	add	r5, r7
   2186e:	943e      	str	r4, [sp, #248]	; 0xf8
   21870:	953f      	str	r5, [sp, #252]	; 0xfc
   21872:	dcc3      	bgt.n	217fc <_svfprintf_r+0x1284>
   21874:	3608      	adds	r6, #8
   21876:	e7cc      	b.n	21812 <_svfprintf_r+0x129a>
   21878:	9810      	ldr	r0, [sp, #64]	; 0x40
   2187a:	4659      	mov	r1, fp
   2187c:	aa3d      	add	r2, sp, #244	; 0xf4
   2187e:	f002 fb69 	bl	23f54 <__ssprint_r>
   21882:	2800      	cmp	r0, #0
   21884:	f47e af6c 	bne.w	20760 <_svfprintf_r+0x1e8>
   21888:	9b44      	ldr	r3, [sp, #272]	; 0x110
   2188a:	ae23      	add	r6, sp, #140	; 0x8c
   2188c:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   2188e:	e514      	b.n	212ba <_svfprintf_r+0xd42>
   21890:	9810      	ldr	r0, [sp, #64]	; 0x40
   21892:	4659      	mov	r1, fp
   21894:	aa3d      	add	r2, sp, #244	; 0xf4
   21896:	f002 fb5d 	bl	23f54 <__ssprint_r>
   2189a:	2800      	cmp	r0, #0
   2189c:	f47e af60 	bne.w	20760 <_svfprintf_r+0x1e8>
   218a0:	9b44      	ldr	r3, [sp, #272]	; 0x110
   218a2:	ae23      	add	r6, sp, #140	; 0x8c
   218a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   218a6:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   218a8:	1ad3      	subs	r3, r2, r3
   218aa:	e51d      	b.n	212e8 <_svfprintf_r+0xd70>
   218ac:	2f06      	cmp	r7, #6
   218ae:	bf28      	it	cs
   218b0:	2706      	movcs	r7, #6
   218b2:	f64b 73d8 	movw	r3, #49112	; 0xbfd8
   218b6:	ea27 70e7 	bic.w	r0, r7, r7, asr #31
   218ba:	f2c0 0302 	movt	r3, #2
   218be:	970e      	str	r7, [sp, #56]	; 0x38
   218c0:	900b      	str	r0, [sp, #44]	; 0x2c
   218c2:	9511      	str	r5, [sp, #68]	; 0x44
   218c4:	9313      	str	r3, [sp, #76]	; 0x4c
   218c6:	f7ff b955 	b.w	20b74 <_svfprintf_r+0x5fc>
   218ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   218cc:	2b65      	cmp	r3, #101	; 0x65
   218ce:	dd64      	ble.n	2199a <_svfprintf_r+0x1422>
   218d0:	9a15      	ldr	r2, [sp, #84]	; 0x54
   218d2:	9944      	ldr	r1, [sp, #272]	; 0x110
   218d4:	2a00      	cmp	r2, #0
   218d6:	d162      	bne.n	2199e <_svfprintf_r+0x1426>
   218d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
   218da:	428a      	cmp	r2, r1
   218dc:	dc4a      	bgt.n	21974 <_svfprintf_r+0x13fc>
   218de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   218e0:	07d8      	lsls	r0, r3, #31
   218e2:	d56b      	bpl.n	219bc <_svfprintf_r+0x1444>
   218e4:	1c4b      	adds	r3, r1, #1
   218e6:	2067      	movs	r0, #103	; 0x67
   218e8:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
   218ec:	930e      	str	r3, [sp, #56]	; 0x38
   218ee:	9017      	str	r0, [sp, #92]	; 0x5c
   218f0:	920b      	str	r2, [sp, #44]	; 0x2c
   218f2:	911a      	str	r1, [sp, #104]	; 0x68
   218f4:	e714      	b.n	21720 <_svfprintf_r+0x11a8>
   218f6:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
   218fa:	f7fe bfde 	b.w	208ba <_svfprintf_r+0x342>
   218fe:	9b46      	ldr	r3, [sp, #280]	; 0x118
   21900:	429c      	cmp	r4, r3
   21902:	bf98      	it	ls
   21904:	461c      	movls	r4, r3
   21906:	f67f aeb2 	bls.w	2166e <_svfprintf_r+0x10f6>
   2190a:	2230      	movs	r2, #48	; 0x30
   2190c:	f803 2b01 	strb.w	r2, [r3], #1
   21910:	42a3      	cmp	r3, r4
   21912:	9346      	str	r3, [sp, #280]	; 0x118
   21914:	d1fa      	bne.n	2190c <_svfprintf_r+0x1394>
   21916:	e6aa      	b.n	2166e <_svfprintf_r+0x10f6>
   21918:	ea27 71e7 	bic.w	r1, r7, r7, asr #31
   2191c:	9014      	str	r0, [sp, #80]	; 0x50
   2191e:	910b      	str	r1, [sp, #44]	; 0x2c
   21920:	f89d 311f 	ldrb.w	r3, [sp, #287]	; 0x11f
   21924:	9511      	str	r5, [sp, #68]	; 0x44
   21926:	970e      	str	r7, [sp, #56]	; 0x38
   21928:	901a      	str	r0, [sp, #104]	; 0x68
   2192a:	f7fe bfc6 	b.w	208ba <_svfprintf_r+0x342>
   2192e:	930b      	str	r3, [sp, #44]	; 0x2c
   21930:	e636      	b.n	215a0 <_svfprintf_r+0x1028>
   21932:	9810      	ldr	r0, [sp, #64]	; 0x40
   21934:	4659      	mov	r1, fp
   21936:	aa3d      	add	r2, sp, #244	; 0xf4
   21938:	f002 fb0c 	bl	23f54 <__ssprint_r>
   2193c:	2800      	cmp	r0, #0
   2193e:	f47e af0f 	bne.w	20760 <_svfprintf_r+0x1e8>
   21942:	9f44      	ldr	r7, [sp, #272]	; 0x110
   21944:	ae23      	add	r6, sp, #140	; 0x8c
   21946:	9d3f      	ldr	r5, [sp, #252]	; 0xfc
   21948:	9c3e      	ldr	r4, [sp, #248]	; 0xf8
   2194a:	e5de      	b.n	2150a <_svfprintf_r+0xf92>
   2194c:	212d      	movs	r1, #45	; 0x2d
   2194e:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
   21952:	9114      	str	r1, [sp, #80]	; 0x50
   21954:	e62d      	b.n	215b2 <_svfprintf_r+0x103a>
   21956:	46b9      	mov	r9, r7
   21958:	2302      	movs	r3, #2
   2195a:	e64c      	b.n	215f6 <_svfprintf_r+0x107e>
   2195c:	f101 0230 	add.w	r2, r1, #48	; 0x30
   21960:	2330      	movs	r3, #48	; 0x30
   21962:	a941      	add	r1, sp, #260	; 0x104
   21964:	f88d 3102 	strb.w	r3, [sp, #258]	; 0x102
   21968:	f88d 2103 	strb.w	r2, [sp, #259]	; 0x103
   2196c:	e6c7      	b.n	216fe <_svfprintf_r+0x1186>
   2196e:	2701      	movs	r7, #1
   21970:	970b      	str	r7, [sp, #44]	; 0x2c
   21972:	e615      	b.n	215a0 <_svfprintf_r+0x1028>
   21974:	2900      	cmp	r1, #0
   21976:	9812      	ldr	r0, [sp, #72]	; 0x48
   21978:	bfd4      	ite	le
   2197a:	f1c1 0302 	rsble	r3, r1, #2
   2197e:	2301      	movgt	r3, #1
   21980:	181b      	adds	r3, r3, r0
   21982:	2267      	movs	r2, #103	; 0x67
   21984:	930e      	str	r3, [sp, #56]	; 0x38
   21986:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2198a:	9217      	str	r2, [sp, #92]	; 0x5c
   2198c:	930b      	str	r3, [sp, #44]	; 0x2c
   2198e:	911a      	str	r1, [sp, #104]	; 0x68
   21990:	e6c6      	b.n	21720 <_svfprintf_r+0x11a8>
   21992:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 21a54 <_svfprintf_r+0x14dc>
   21996:	f7ff ba49 	b.w	20e2c <_svfprintf_r+0x8b4>
   2199a:	9944      	ldr	r1, [sp, #272]	; 0x110
   2199c:	e677      	b.n	2168e <_svfprintf_r+0x1116>
   2199e:	2900      	cmp	r1, #0
   219a0:	dd3b      	ble.n	21a1a <_svfprintf_r+0x14a2>
   219a2:	2f00      	cmp	r7, #0
   219a4:	d12f      	bne.n	21a06 <_svfprintf_r+0x148e>
   219a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   219a8:	07db      	lsls	r3, r3, #31
   219aa:	d42c      	bmi.n	21a06 <_svfprintf_r+0x148e>
   219ac:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
   219b0:	2266      	movs	r2, #102	; 0x66
   219b2:	900b      	str	r0, [sp, #44]	; 0x2c
   219b4:	910e      	str	r1, [sp, #56]	; 0x38
   219b6:	9217      	str	r2, [sp, #92]	; 0x5c
   219b8:	911a      	str	r1, [sp, #104]	; 0x68
   219ba:	e6b1      	b.n	21720 <_svfprintf_r+0x11a8>
   219bc:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
   219c0:	2267      	movs	r2, #103	; 0x67
   219c2:	900b      	str	r0, [sp, #44]	; 0x2c
   219c4:	910e      	str	r1, [sp, #56]	; 0x38
   219c6:	9217      	str	r2, [sp, #92]	; 0x5c
   219c8:	911a      	str	r1, [sp, #104]	; 0x68
   219ca:	e6a9      	b.n	21720 <_svfprintf_r+0x11a8>
   219cc:	990a      	ldr	r1, [sp, #40]	; 0x28
   219ce:	f011 0301 	ands.w	r3, r1, #1
   219d2:	f47f ae9d 	bne.w	21710 <_svfprintf_r+0x1198>
   219d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   219d8:	931a      	str	r3, [sp, #104]	; 0x68
   219da:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   219de:	920b      	str	r2, [sp, #44]	; 0x2c
   219e0:	e69e      	b.n	21720 <_svfprintf_r+0x11a8>
   219e2:	232d      	movs	r3, #45	; 0x2d
   219e4:	4249      	negs	r1, r1
   219e6:	f88d 3101 	strb.w	r3, [sp, #257]	; 0x101
   219ea:	e65b      	b.n	216a4 <_svfprintf_r+0x112c>
   219ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
   219ee:	f89a 3001 	ldrb.w	r3, [sl, #1]
   219f2:	4682      	mov	sl, r0
   219f4:	6817      	ldr	r7, [r2, #0]
   219f6:	3204      	adds	r2, #4
   219f8:	9211      	str	r2, [sp, #68]	; 0x44
   219fa:	2f00      	cmp	r7, #0
   219fc:	bfb8      	it	lt
   219fe:	f04f 37ff 	movlt.w	r7, #4294967295
   21a02:	f7fe be31 	b.w	20668 <_svfprintf_r+0xf0>
   21a06:	3701      	adds	r7, #1
   21a08:	2366      	movs	r3, #102	; 0x66
   21a0a:	19cf      	adds	r7, r1, r7
   21a0c:	9317      	str	r3, [sp, #92]	; 0x5c
   21a0e:	ea27 70e7 	bic.w	r0, r7, r7, asr #31
   21a12:	970e      	str	r7, [sp, #56]	; 0x38
   21a14:	900b      	str	r0, [sp, #44]	; 0x2c
   21a16:	911a      	str	r1, [sp, #104]	; 0x68
   21a18:	e682      	b.n	21720 <_svfprintf_r+0x11a8>
   21a1a:	b917      	cbnz	r7, 21a22 <_svfprintf_r+0x14aa>
   21a1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   21a1e:	07d5      	lsls	r5, r2, #31
   21a20:	d510      	bpl.n	21a44 <_svfprintf_r+0x14cc>
   21a22:	3702      	adds	r7, #2
   21a24:	2366      	movs	r3, #102	; 0x66
   21a26:	ea27 70e7 	bic.w	r0, r7, r7, asr #31
   21a2a:	970e      	str	r7, [sp, #56]	; 0x38
   21a2c:	9317      	str	r3, [sp, #92]	; 0x5c
   21a2e:	900b      	str	r0, [sp, #44]	; 0x2c
   21a30:	911a      	str	r1, [sp, #104]	; 0x68
   21a32:	e675      	b.n	21720 <_svfprintf_r+0x11a8>
   21a34:	9810      	ldr	r0, [sp, #64]	; 0x40
   21a36:	f04f 33ff 	mov.w	r3, #4294967295
   21a3a:	930d      	str	r3, [sp, #52]	; 0x34
   21a3c:	230c      	movs	r3, #12
   21a3e:	6003      	str	r3, [r0, #0]
   21a40:	f7fe be97 	b.w	20772 <_svfprintf_r+0x1fa>
   21a44:	2001      	movs	r0, #1
   21a46:	2266      	movs	r2, #102	; 0x66
   21a48:	900b      	str	r0, [sp, #44]	; 0x2c
   21a4a:	9217      	str	r2, [sp, #92]	; 0x5c
   21a4c:	900e      	str	r0, [sp, #56]	; 0x38
   21a4e:	911a      	str	r1, [sp, #104]	; 0x68
   21a50:	e666      	b.n	21720 <_svfprintf_r+0x11a8>
   21a52:	bf00      	nop
   21a54:	0002bf90 	.word	0x0002bf90

00021a58 <write>:
   21a58:	b430      	push	{r4, r5}
   21a5a:	f240 0428 	movw	r4, #40	; 0x28
   21a5e:	f2c1 0400 	movt	r4, #4096	; 0x1000
   21a62:	460d      	mov	r5, r1
   21a64:	4613      	mov	r3, r2
   21a66:	4601      	mov	r1, r0
   21a68:	462a      	mov	r2, r5
   21a6a:	6820      	ldr	r0, [r4, #0]
   21a6c:	bc30      	pop	{r4, r5}
   21a6e:	f000 b87f 	b.w	21b70 <_write_r>
   21a72:	bf00      	nop

00021a74 <__swbuf_r>:
   21a74:	b570      	push	{r4, r5, r6, lr}
   21a76:	460c      	mov	r4, r1
   21a78:	4615      	mov	r5, r2
   21a7a:	4606      	mov	r6, r0
   21a7c:	b110      	cbz	r0, 21a84 <__swbuf_r+0x10>
   21a7e:	6983      	ldr	r3, [r0, #24]
   21a80:	2b00      	cmp	r3, #0
   21a82:	d05b      	beq.n	21b3c <__swbuf_r+0xc8>
   21a84:	f24c 1338 	movw	r3, #49464	; 0xc138
   21a88:	f2c0 0302 	movt	r3, #2
   21a8c:	429d      	cmp	r5, r3
   21a8e:	bf08      	it	eq
   21a90:	6875      	ldreq	r5, [r6, #4]
   21a92:	d00e      	beq.n	21ab2 <__swbuf_r+0x3e>
   21a94:	f24c 1318 	movw	r3, #49432	; 0xc118
   21a98:	f2c0 0302 	movt	r3, #2
   21a9c:	429d      	cmp	r5, r3
   21a9e:	bf08      	it	eq
   21aa0:	68b5      	ldreq	r5, [r6, #8]
   21aa2:	d006      	beq.n	21ab2 <__swbuf_r+0x3e>
   21aa4:	f24c 03f8 	movw	r3, #49400	; 0xc0f8
   21aa8:	f2c0 0302 	movt	r3, #2
   21aac:	429d      	cmp	r5, r3
   21aae:	bf08      	it	eq
   21ab0:	68f5      	ldreq	r5, [r6, #12]
   21ab2:	89aa      	ldrh	r2, [r5, #12]
   21ab4:	69a9      	ldr	r1, [r5, #24]
   21ab6:	b293      	uxth	r3, r2
   21ab8:	60a9      	str	r1, [r5, #8]
   21aba:	0719      	lsls	r1, r3, #28
   21abc:	d52d      	bpl.n	21b1a <__swbuf_r+0xa6>
   21abe:	6929      	ldr	r1, [r5, #16]
   21ac0:	2900      	cmp	r1, #0
   21ac2:	d02a      	beq.n	21b1a <__swbuf_r+0xa6>
   21ac4:	049b      	lsls	r3, r3, #18
   21ac6:	bf5e      	ittt	pl
   21ac8:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
   21acc:	81aa      	strhpl	r2, [r5, #12]
   21ace:	6e6b      	ldrpl	r3, [r5, #100]	; 0x64
   21ad0:	696a      	ldr	r2, [r5, #20]
   21ad2:	bf5c      	itt	pl
   21ad4:	f423 5300 	bicpl.w	r3, r3, #8192	; 0x2000
   21ad8:	666b      	strpl	r3, [r5, #100]	; 0x64
   21ada:	682b      	ldr	r3, [r5, #0]
   21adc:	1a59      	subs	r1, r3, r1
   21ade:	4291      	cmp	r1, r2
   21ae0:	da24      	bge.n	21b2c <__swbuf_r+0xb8>
   21ae2:	3101      	adds	r1, #1
   21ae4:	68aa      	ldr	r2, [r5, #8]
   21ae6:	b2e4      	uxtb	r4, r4
   21ae8:	3a01      	subs	r2, #1
   21aea:	60aa      	str	r2, [r5, #8]
   21aec:	f803 4b01 	strb.w	r4, [r3], #1
   21af0:	696a      	ldr	r2, [r5, #20]
   21af2:	602b      	str	r3, [r5, #0]
   21af4:	428a      	cmp	r2, r1
   21af6:	d006      	beq.n	21b06 <__swbuf_r+0x92>
   21af8:	89ab      	ldrh	r3, [r5, #12]
   21afa:	2c0a      	cmp	r4, #10
   21afc:	bf14      	ite	ne
   21afe:	2300      	movne	r3, #0
   21b00:	f003 0301 	andeq.w	r3, r3, #1
   21b04:	b13b      	cbz	r3, 21b16 <__swbuf_r+0xa2>
   21b06:	4630      	mov	r0, r6
   21b08:	4629      	mov	r1, r5
   21b0a:	f001 f949 	bl	22da0 <_fflush_r>
   21b0e:	2800      	cmp	r0, #0
   21b10:	bf18      	it	ne
   21b12:	f04f 34ff 	movne.w	r4, #4294967295
   21b16:	4620      	mov	r0, r4
   21b18:	bd70      	pop	{r4, r5, r6, pc}
   21b1a:	4630      	mov	r0, r6
   21b1c:	4629      	mov	r1, r5
   21b1e:	f000 f83d 	bl	21b9c <__swsetup_r>
   21b22:	b970      	cbnz	r0, 21b42 <__swbuf_r+0xce>
   21b24:	89aa      	ldrh	r2, [r5, #12]
   21b26:	6929      	ldr	r1, [r5, #16]
   21b28:	b293      	uxth	r3, r2
   21b2a:	e7cb      	b.n	21ac4 <__swbuf_r+0x50>
   21b2c:	4630      	mov	r0, r6
   21b2e:	4629      	mov	r1, r5
   21b30:	f001 f936 	bl	22da0 <_fflush_r>
   21b34:	b970      	cbnz	r0, 21b54 <__swbuf_r+0xe0>
   21b36:	682b      	ldr	r3, [r5, #0]
   21b38:	2101      	movs	r1, #1
   21b3a:	e7d3      	b.n	21ae4 <__swbuf_r+0x70>
   21b3c:	f001 fa72 	bl	23024 <__sinit>
   21b40:	e7a0      	b.n	21a84 <__swbuf_r+0x10>
   21b42:	89ab      	ldrh	r3, [r5, #12]
   21b44:	f04f 34ff 	mov.w	r4, #4294967295
   21b48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   21b4c:	81ab      	strh	r3, [r5, #12]
   21b4e:	2309      	movs	r3, #9
   21b50:	6033      	str	r3, [r6, #0]
   21b52:	e7e0      	b.n	21b16 <__swbuf_r+0xa2>
   21b54:	f04f 34ff 	mov.w	r4, #4294967295
   21b58:	e7dd      	b.n	21b16 <__swbuf_r+0xa2>
   21b5a:	bf00      	nop

00021b5c <__swbuf>:
   21b5c:	f240 0328 	movw	r3, #40	; 0x28
   21b60:	460a      	mov	r2, r1
   21b62:	f2c1 0300 	movt	r3, #4096	; 0x1000
   21b66:	4601      	mov	r1, r0
   21b68:	6818      	ldr	r0, [r3, #0]
   21b6a:	f7ff bf83 	b.w	21a74 <__swbuf_r>
   21b6e:	bf00      	nop

00021b70 <_write_r>:
   21b70:	b538      	push	{r3, r4, r5, lr}
   21b72:	f643 34c8 	movw	r4, #15304	; 0x3bc8
   21b76:	f2c1 0400 	movt	r4, #4096	; 0x1000
   21b7a:	4605      	mov	r5, r0
   21b7c:	4608      	mov	r0, r1
   21b7e:	4611      	mov	r1, r2
   21b80:	461a      	mov	r2, r3
   21b82:	2300      	movs	r3, #0
   21b84:	6023      	str	r3, [r4, #0]
   21b86:	f7e4 f8d1 	bl	5d2c <_write>
   21b8a:	1c43      	adds	r3, r0, #1
   21b8c:	d000      	beq.n	21b90 <_write_r+0x20>
   21b8e:	bd38      	pop	{r3, r4, r5, pc}
   21b90:	6823      	ldr	r3, [r4, #0]
   21b92:	2b00      	cmp	r3, #0
   21b94:	d0fb      	beq.n	21b8e <_write_r+0x1e>
   21b96:	602b      	str	r3, [r5, #0]
   21b98:	bd38      	pop	{r3, r4, r5, pc}
   21b9a:	bf00      	nop

00021b9c <__swsetup_r>:
   21b9c:	b570      	push	{r4, r5, r6, lr}
   21b9e:	f240 0528 	movw	r5, #40	; 0x28
   21ba2:	f2c1 0500 	movt	r5, #4096	; 0x1000
   21ba6:	4606      	mov	r6, r0
   21ba8:	460c      	mov	r4, r1
   21baa:	6828      	ldr	r0, [r5, #0]
   21bac:	b110      	cbz	r0, 21bb4 <__swsetup_r+0x18>
   21bae:	6983      	ldr	r3, [r0, #24]
   21bb0:	2b00      	cmp	r3, #0
   21bb2:	d051      	beq.n	21c58 <__swsetup_r+0xbc>
   21bb4:	f24c 1338 	movw	r3, #49464	; 0xc138
   21bb8:	f2c0 0302 	movt	r3, #2
   21bbc:	429c      	cmp	r4, r3
   21bbe:	d053      	beq.n	21c68 <__swsetup_r+0xcc>
   21bc0:	f24c 1318 	movw	r3, #49432	; 0xc118
   21bc4:	f2c0 0302 	movt	r3, #2
   21bc8:	429c      	cmp	r4, r3
   21bca:	d05c      	beq.n	21c86 <__swsetup_r+0xea>
   21bcc:	f24c 03f8 	movw	r3, #49400	; 0xc0f8
   21bd0:	f2c0 0302 	movt	r3, #2
   21bd4:	429c      	cmp	r4, r3
   21bd6:	bf04      	itt	eq
   21bd8:	682b      	ldreq	r3, [r5, #0]
   21bda:	68dc      	ldreq	r4, [r3, #12]
   21bdc:	89a2      	ldrh	r2, [r4, #12]
   21bde:	b293      	uxth	r3, r2
   21be0:	0719      	lsls	r1, r3, #28
   21be2:	bf48      	it	mi
   21be4:	6921      	ldrmi	r1, [r4, #16]
   21be6:	d41d      	bmi.n	21c24 <__swsetup_r+0x88>
   21be8:	06d8      	lsls	r0, r3, #27
   21bea:	d54f      	bpl.n	21c8c <__swsetup_r+0xf0>
   21bec:	0759      	lsls	r1, r3, #29
   21bee:	bf58      	it	pl
   21bf0:	6921      	ldrpl	r1, [r4, #16]
   21bf2:	d513      	bpl.n	21c1c <__swsetup_r+0x80>
   21bf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
   21bf6:	b149      	cbz	r1, 21c0c <__swsetup_r+0x70>
   21bf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
   21bfc:	4299      	cmp	r1, r3
   21bfe:	d003      	beq.n	21c08 <__swsetup_r+0x6c>
   21c00:	4630      	mov	r0, r6
   21c02:	f001 fafb 	bl	231fc <_free_r>
   21c06:	89a2      	ldrh	r2, [r4, #12]
   21c08:	2300      	movs	r3, #0
   21c0a:	6363      	str	r3, [r4, #52]	; 0x34
   21c0c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   21c10:	6921      	ldr	r1, [r4, #16]
   21c12:	2300      	movs	r3, #0
   21c14:	6063      	str	r3, [r4, #4]
   21c16:	0412      	lsls	r2, r2, #16
   21c18:	6021      	str	r1, [r4, #0]
   21c1a:	0c12      	lsrs	r2, r2, #16
   21c1c:	f042 0308 	orr.w	r3, r2, #8
   21c20:	81a3      	strh	r3, [r4, #12]
   21c22:	b29b      	uxth	r3, r3
   21c24:	b319      	cbz	r1, 21c6e <__swsetup_r+0xd2>
   21c26:	f013 0201 	ands.w	r2, r3, #1
   21c2a:	d007      	beq.n	21c3c <__swsetup_r+0xa0>
   21c2c:	6963      	ldr	r3, [r4, #20]
   21c2e:	2200      	movs	r2, #0
   21c30:	60a2      	str	r2, [r4, #8]
   21c32:	425b      	negs	r3, r3
   21c34:	61a3      	str	r3, [r4, #24]
   21c36:	b139      	cbz	r1, 21c48 <__swsetup_r+0xac>
   21c38:	2000      	movs	r0, #0
   21c3a:	bd70      	pop	{r4, r5, r6, pc}
   21c3c:	079b      	lsls	r3, r3, #30
   21c3e:	bf58      	it	pl
   21c40:	6962      	ldrpl	r2, [r4, #20]
   21c42:	60a2      	str	r2, [r4, #8]
   21c44:	2900      	cmp	r1, #0
   21c46:	d1f7      	bne.n	21c38 <__swsetup_r+0x9c>
   21c48:	89a3      	ldrh	r3, [r4, #12]
   21c4a:	f013 0f80 	tst.w	r3, #128	; 0x80
   21c4e:	bf14      	ite	ne
   21c50:	f04f 30ff 	movne.w	r0, #4294967295
   21c54:	2000      	moveq	r0, #0
   21c56:	bd70      	pop	{r4, r5, r6, pc}
   21c58:	f001 f9e4 	bl	23024 <__sinit>
   21c5c:	f24c 1338 	movw	r3, #49464	; 0xc138
   21c60:	f2c0 0302 	movt	r3, #2
   21c64:	429c      	cmp	r4, r3
   21c66:	d1ab      	bne.n	21bc0 <__swsetup_r+0x24>
   21c68:	682b      	ldr	r3, [r5, #0]
   21c6a:	685c      	ldr	r4, [r3, #4]
   21c6c:	e7b6      	b.n	21bdc <__swsetup_r+0x40>
   21c6e:	f403 7220 	and.w	r2, r3, #640	; 0x280
   21c72:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   21c76:	d0d6      	beq.n	21c26 <__swsetup_r+0x8a>
   21c78:	4621      	mov	r1, r4
   21c7a:	4630      	mov	r0, r6
   21c7c:	f001 fc28 	bl	234d0 <__smakebuf_r>
   21c80:	89a3      	ldrh	r3, [r4, #12]
   21c82:	6921      	ldr	r1, [r4, #16]
   21c84:	e7cf      	b.n	21c26 <__swsetup_r+0x8a>
   21c86:	682b      	ldr	r3, [r5, #0]
   21c88:	689c      	ldr	r4, [r3, #8]
   21c8a:	e7a7      	b.n	21bdc <__swsetup_r+0x40>
   21c8c:	f04f 30ff 	mov.w	r0, #4294967295
   21c90:	bd70      	pop	{r4, r5, r6, pc}
   21c92:	bf00      	nop

00021c94 <__register_exitproc>:
   21c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21c98:	f64b 7478 	movw	r4, #49016	; 0xbf78
   21c9c:	f2c0 0402 	movt	r4, #2
   21ca0:	b084      	sub	sp, #16
   21ca2:	4605      	mov	r5, r0
   21ca4:	6826      	ldr	r6, [r4, #0]
   21ca6:	6cb4      	ldr	r4, [r6, #72]	; 0x48
   21ca8:	2c00      	cmp	r4, #0
   21caa:	d042      	beq.n	21d32 <__register_exitproc+0x9e>
   21cac:	6860      	ldr	r0, [r4, #4]
   21cae:	281f      	cmp	r0, #31
   21cb0:	dd1a      	ble.n	21ce8 <__register_exitproc+0x54>
   21cb2:	f64e 70e5 	movw	r0, #61413	; 0xefe5
   21cb6:	f2c0 0001 	movt	r0, #1
   21cba:	b920      	cbnz	r0, 21cc6 <__register_exitproc+0x32>
   21cbc:	f04f 30ff 	mov.w	r0, #4294967295
   21cc0:	b004      	add	sp, #16
   21cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21cc6:	208c      	movs	r0, #140	; 0x8c
   21cc8:	9103      	str	r1, [sp, #12]
   21cca:	9202      	str	r2, [sp, #8]
   21ccc:	9301      	str	r3, [sp, #4]
   21cce:	f7fd f989 	bl	1efe4 <malloc>
   21cd2:	9903      	ldr	r1, [sp, #12]
   21cd4:	9a02      	ldr	r2, [sp, #8]
   21cd6:	9b01      	ldr	r3, [sp, #4]
   21cd8:	4604      	mov	r4, r0
   21cda:	2800      	cmp	r0, #0
   21cdc:	d0ee      	beq.n	21cbc <__register_exitproc+0x28>
   21cde:	6cb0      	ldr	r0, [r6, #72]	; 0x48
   21ce0:	2700      	movs	r7, #0
   21ce2:	e884 0081 	stmia.w	r4, {r0, r7}
   21ce6:	64b4      	str	r4, [r6, #72]	; 0x48
   21ce8:	b1dd      	cbz	r5, 21d22 <__register_exitproc+0x8e>
   21cea:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   21cee:	b320      	cbz	r0, 21d3a <__register_exitproc+0xa6>
   21cf0:	f8d0 8100 	ldr.w	r8, [r0, #256]	; 0x100
   21cf4:	6866      	ldr	r6, [r4, #4]
   21cf6:	2701      	movs	r7, #1
   21cf8:	2d02      	cmp	r5, #2
   21cfa:	f106 0c20 	add.w	ip, r6, #32
   21cfe:	fa07 f706 	lsl.w	r7, r7, r6
   21d02:	f840 2026 	str.w	r2, [r0, r6, lsl #2]
   21d06:	ea48 0207 	orr.w	r2, r8, r7
   21d0a:	f840 302c 	str.w	r3, [r0, ip, lsl #2]
   21d0e:	bf08      	it	eq
   21d10:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   21d14:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
   21d18:	bf04      	itt	eq
   21d1a:	431f      	orreq	r7, r3
   21d1c:	f8c0 7104 	streq.w	r7, [r0, #260]	; 0x104
   21d20:	e000      	b.n	21d24 <__register_exitproc+0x90>
   21d22:	6866      	ldr	r6, [r4, #4]
   21d24:	1cb3      	adds	r3, r6, #2
   21d26:	2000      	movs	r0, #0
   21d28:	3601      	adds	r6, #1
   21d2a:	6066      	str	r6, [r4, #4]
   21d2c:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
   21d30:	e7c6      	b.n	21cc0 <__register_exitproc+0x2c>
   21d32:	f106 044c 	add.w	r4, r6, #76	; 0x4c
   21d36:	64b4      	str	r4, [r6, #72]	; 0x48
   21d38:	e7b8      	b.n	21cac <__register_exitproc+0x18>
   21d3a:	f64e 70e5 	movw	r0, #61413	; 0xefe5
   21d3e:	f2c0 0001 	movt	r0, #1
   21d42:	2800      	cmp	r0, #0
   21d44:	d0ba      	beq.n	21cbc <__register_exitproc+0x28>
   21d46:	f44f 7084 	mov.w	r0, #264	; 0x108
   21d4a:	9103      	str	r1, [sp, #12]
   21d4c:	9202      	str	r2, [sp, #8]
   21d4e:	9301      	str	r3, [sp, #4]
   21d50:	f7fd f948 	bl	1efe4 <malloc>
   21d54:	9903      	ldr	r1, [sp, #12]
   21d56:	9a02      	ldr	r2, [sp, #8]
   21d58:	9b01      	ldr	r3, [sp, #4]
   21d5a:	2800      	cmp	r0, #0
   21d5c:	d0ae      	beq.n	21cbc <__register_exitproc+0x28>
   21d5e:	2600      	movs	r6, #0
   21d60:	f8c0 6100 	str.w	r6, [r0, #256]	; 0x100
   21d64:	f8c0 6104 	str.w	r6, [r0, #260]	; 0x104
   21d68:	46b0      	mov	r8, r6
   21d6a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   21d6e:	e7c1      	b.n	21cf4 <__register_exitproc+0x60>

00021d70 <quorem>:
   21d70:	690a      	ldr	r2, [r1, #16]
   21d72:	6903      	ldr	r3, [r0, #16]
   21d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21d78:	429a      	cmp	r2, r3
   21d7a:	b083      	sub	sp, #12
   21d7c:	4680      	mov	r8, r0
   21d7e:	4689      	mov	r9, r1
   21d80:	9200      	str	r2, [sp, #0]
   21d82:	f300 8096 	bgt.w	21eb2 <quorem+0x142>
   21d86:	3203      	adds	r2, #3
   21d88:	9b00      	ldr	r3, [sp, #0]
   21d8a:	f101 0514 	add.w	r5, r1, #20
   21d8e:	0092      	lsls	r2, r2, #2
   21d90:	1e5c      	subs	r4, r3, #1
   21d92:	f100 0314 	add.w	r3, r0, #20
   21d96:	9301      	str	r3, [sp, #4]
   21d98:	188b      	adds	r3, r1, r2
   21d9a:	1882      	adds	r2, r0, r2
   21d9c:	1d1f      	adds	r7, r3, #4
   21d9e:	6859      	ldr	r1, [r3, #4]
   21da0:	6850      	ldr	r0, [r2, #4]
   21da2:	3101      	adds	r1, #1
   21da4:	f7f1 fc50 	bl	13648 <__aeabi_uidiv>
   21da8:	4606      	mov	r6, r0
   21daa:	2800      	cmp	r0, #0
   21dac:	d042      	beq.n	21e34 <quorem+0xc4>
   21dae:	2000      	movs	r0, #0
   21db0:	9a01      	ldr	r2, [sp, #4]
   21db2:	462b      	mov	r3, r5
   21db4:	4686      	mov	lr, r0
   21db6:	f853 cb04 	ldr.w	ip, [r3], #4
   21dba:	6811      	ldr	r1, [r2, #0]
   21dbc:	fa1f fb8c 	uxth.w	fp, ip
   21dc0:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   21dc4:	fa1f fa81 	uxth.w	sl, r1
   21dc8:	fb06 0b0b 	mla	fp, r6, fp, r0
   21dcc:	44d6      	add	lr, sl
   21dce:	fb06 f00c 	mul.w	r0, r6, ip
   21dd2:	eb00 401b 	add.w	r0, r0, fp, lsr #16
   21dd6:	fa1f fb8b 	uxth.w	fp, fp
   21dda:	ebcb 0a0e 	rsb	sl, fp, lr
   21dde:	fa1f fe80 	uxth.w	lr, r0
   21de2:	0c00      	lsrs	r0, r0, #16
   21de4:	ebce 4e11 	rsb	lr, lr, r1, lsr #16
   21de8:	429f      	cmp	r7, r3
   21dea:	eb0e 4e2a 	add.w	lr, lr, sl, asr #16
   21dee:	fa1f fc8a 	uxth.w	ip, sl
   21df2:	ea4c 410e 	orr.w	r1, ip, lr, lsl #16
   21df6:	ea4f 4e2e 	mov.w	lr, lr, asr #16
   21dfa:	f842 1b04 	str.w	r1, [r2], #4
   21dfe:	d2da      	bcs.n	21db6 <quorem+0x46>
   21e00:	1d22      	adds	r2, r4, #4
   21e02:	eb08 0382 	add.w	r3, r8, r2, lsl #2
   21e06:	6859      	ldr	r1, [r3, #4]
   21e08:	b9a1      	cbnz	r1, 21e34 <quorem+0xc4>
   21e0a:	9801      	ldr	r0, [sp, #4]
   21e0c:	4298      	cmp	r0, r3
   21e0e:	d20f      	bcs.n	21e30 <quorem+0xc0>
   21e10:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
   21e14:	b962      	cbnz	r2, 21e30 <quorem+0xc0>
   21e16:	9a00      	ldr	r2, [sp, #0]
   21e18:	1e91      	subs	r1, r2, #2
   21e1a:	43c2      	mvns	r2, r0
   21e1c:	18d2      	adds	r2, r2, r3
   21e1e:	eba1 0192 	sub.w	r1, r1, r2, lsr #2
   21e22:	e002      	b.n	21e2a <quorem+0xba>
   21e24:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   21e28:	b912      	cbnz	r2, 21e30 <quorem+0xc0>
   21e2a:	3c01      	subs	r4, #1
   21e2c:	428c      	cmp	r4, r1
   21e2e:	d1f9      	bne.n	21e24 <quorem+0xb4>
   21e30:	f8c8 4010 	str.w	r4, [r8, #16]
   21e34:	4640      	mov	r0, r8
   21e36:	4649      	mov	r1, r9
   21e38:	f001 fe3e 	bl	23ab8 <__mcmp>
   21e3c:	2800      	cmp	r0, #0
   21e3e:	db34      	blt.n	21eaa <quorem+0x13a>
   21e40:	9b01      	ldr	r3, [sp, #4]
   21e42:	3601      	adds	r6, #1
   21e44:	f04f 0c00 	mov.w	ip, #0
   21e48:	f855 0b04 	ldr.w	r0, [r5], #4
   21e4c:	6819      	ldr	r1, [r3, #0]
   21e4e:	fa1f f980 	uxth.w	r9, r0
   21e52:	0c00      	lsrs	r0, r0, #16
   21e54:	b28a      	uxth	r2, r1
   21e56:	ebc0 4111 	rsb	r1, r0, r1, lsr #16
   21e5a:	ebc9 0202 	rsb	r2, r9, r2
   21e5e:	42af      	cmp	r7, r5
   21e60:	4494      	add	ip, r2
   21e62:	eb01 422c 	add.w	r2, r1, ip, asr #16
   21e66:	fa1f fc8c 	uxth.w	ip, ip
   21e6a:	ea4c 4102 	orr.w	r1, ip, r2, lsl #16
   21e6e:	ea4f 4c22 	mov.w	ip, r2, asr #16
   21e72:	f843 1b04 	str.w	r1, [r3], #4
   21e76:	d2e7      	bcs.n	21e48 <quorem+0xd8>
   21e78:	1d22      	adds	r2, r4, #4
   21e7a:	eb08 0382 	add.w	r3, r8, r2, lsl #2
   21e7e:	6859      	ldr	r1, [r3, #4]
   21e80:	b999      	cbnz	r1, 21eaa <quorem+0x13a>
   21e82:	9801      	ldr	r0, [sp, #4]
   21e84:	4298      	cmp	r0, r3
   21e86:	d20e      	bcs.n	21ea6 <quorem+0x136>
   21e88:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
   21e8c:	b95a      	cbnz	r2, 21ea6 <quorem+0x136>
   21e8e:	43c1      	mvns	r1, r0
   21e90:	18c9      	adds	r1, r1, r3
   21e92:	f021 0103 	bic.w	r1, r1, #3
   21e96:	1a59      	subs	r1, r3, r1
   21e98:	e002      	b.n	21ea0 <quorem+0x130>
   21e9a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   21e9e:	b912      	cbnz	r2, 21ea6 <quorem+0x136>
   21ea0:	3c01      	subs	r4, #1
   21ea2:	428b      	cmp	r3, r1
   21ea4:	d1f9      	bne.n	21e9a <quorem+0x12a>
   21ea6:	f8c8 4010 	str.w	r4, [r8, #16]
   21eaa:	4630      	mov	r0, r6
   21eac:	b003      	add	sp, #12
   21eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21eb2:	2000      	movs	r0, #0
   21eb4:	e7fa      	b.n	21eac <quorem+0x13c>
   21eb6:	bf00      	nop

00021eb8 <_dtoa_r>:
   21eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21ebc:	b09f      	sub	sp, #124	; 0x7c
   21ebe:	6a45      	ldr	r5, [r0, #36]	; 0x24
   21ec0:	4606      	mov	r6, r0
   21ec2:	4692      	mov	sl, r2
   21ec4:	469b      	mov	fp, r3
   21ec6:	9c2b      	ldr	r4, [sp, #172]	; 0xac
   21ec8:	2d00      	cmp	r5, #0
   21eca:	f000 82e2 	beq.w	22492 <_dtoa_r+0x5da>
   21ece:	682b      	ldr	r3, [r5, #0]
   21ed0:	b15b      	cbz	r3, 21eea <_dtoa_r+0x32>
   21ed2:	686a      	ldr	r2, [r5, #4]
   21ed4:	2501      	movs	r5, #1
   21ed6:	4619      	mov	r1, r3
   21ed8:	fa05 f502 	lsl.w	r5, r5, r2
   21edc:	609d      	str	r5, [r3, #8]
   21ede:	605a      	str	r2, [r3, #4]
   21ee0:	f001 fba0 	bl	23624 <_Bfree>
   21ee4:	6a73      	ldr	r3, [r6, #36]	; 0x24
   21ee6:	2200      	movs	r2, #0
   21ee8:	601a      	str	r2, [r3, #0]
   21eea:	f1bb 0500 	subs.w	r5, fp, #0
   21eee:	f2c0 80e8 	blt.w	220c2 <_dtoa_r+0x20a>
   21ef2:	2300      	movs	r3, #0
   21ef4:	6023      	str	r3, [r4, #0]
   21ef6:	2300      	movs	r3, #0
   21ef8:	461a      	mov	r2, r3
   21efa:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
   21efe:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
   21f02:	402b      	ands	r3, r5
   21f04:	4293      	cmp	r3, r2
   21f06:	f000 80c7 	beq.w	22098 <_dtoa_r+0x1e0>
   21f0a:	2200      	movs	r2, #0
   21f0c:	2300      	movs	r3, #0
   21f0e:	4650      	mov	r0, sl
   21f10:	4659      	mov	r1, fp
   21f12:	46d0      	mov	r8, sl
   21f14:	46d9      	mov	r9, fp
   21f16:	2401      	movs	r4, #1
   21f18:	f002 ff1c 	bl	24d54 <__aeabi_dcmpeq>
   21f1c:	b988      	cbnz	r0, 21f42 <_dtoa_r+0x8a>
   21f1e:	f014 0fff 	tst.w	r4, #255	; 0xff
   21f22:	d112      	bne.n	21f4a <_dtoa_r+0x92>
   21f24:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
   21f26:	f64b 70e0 	movw	r0, #49120	; 0xbfe0
   21f2a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   21f2c:	2301      	movs	r3, #1
   21f2e:	f2c0 0002 	movt	r0, #2
   21f32:	602b      	str	r3, [r5, #0]
   21f34:	b114      	cbz	r4, 21f3c <_dtoa_r+0x84>
   21f36:	4b80      	ldr	r3, [pc, #512]	; (22138 <_dtoa_r+0x280>)
   21f38:	1e58      	subs	r0, r3, #1
   21f3a:	6023      	str	r3, [r4, #0]
   21f3c:	b01f      	add	sp, #124	; 0x7c
   21f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21f42:	2400      	movs	r4, #0
   21f44:	f014 0fff 	tst.w	r4, #255	; 0xff
   21f48:	d0ec      	beq.n	21f24 <_dtoa_r+0x6c>
   21f4a:	4630      	mov	r0, r6
   21f4c:	4642      	mov	r2, r8
   21f4e:	464b      	mov	r3, r9
   21f50:	a91d      	add	r1, sp, #116	; 0x74
   21f52:	9100      	str	r1, [sp, #0]
   21f54:	a91c      	add	r1, sp, #112	; 0x70
   21f56:	9101      	str	r1, [sp, #4]
   21f58:	f001 feb8 	bl	23ccc <__d2b>
   21f5c:	f3c5 540a 	ubfx	r4, r5, #20, #11
   21f60:	900c      	str	r0, [sp, #48]	; 0x30
   21f62:	2c00      	cmp	r4, #0
   21f64:	f040 80c5 	bne.w	220f2 <_dtoa_r+0x23a>
   21f68:	9f1c      	ldr	r7, [sp, #112]	; 0x70
   21f6a:	f46f 6382 	mvn.w	r3, #1040	; 0x410
   21f6e:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   21f70:	193c      	adds	r4, r7, r4
   21f72:	429c      	cmp	r4, r3
   21f74:	f2c0 82a7 	blt.w	224c6 <_dtoa_r+0x60e>
   21f78:	f64f 430e 	movw	r3, #64526	; 0xfc0e
   21f7c:	f504 6282 	add.w	r2, r4, #1040	; 0x410
   21f80:	f6cf 73ff 	movt	r3, #65535	; 0xffff
   21f84:	3202      	adds	r2, #2
   21f86:	1b1b      	subs	r3, r3, r4
   21f88:	fa2a f202 	lsr.w	r2, sl, r2
   21f8c:	fa05 f303 	lsl.w	r3, r5, r3
   21f90:	ea43 0002 	orr.w	r0, r3, r2
   21f94:	f7f0 f9ae 	bl	122f4 <__aeabi_ui2d>
   21f98:	3c01      	subs	r4, #1
   21f9a:	2501      	movs	r5, #1
   21f9c:	9517      	str	r5, [sp, #92]	; 0x5c
   21f9e:	460b      	mov	r3, r1
   21fa0:	4602      	mov	r2, r0
   21fa2:	e9cd 2308 	strd	r2, r3, [sp, #32]
   21fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21fa8:	f1a3 73f8 	sub.w	r3, r3, #32505856	; 0x1f00000
   21fac:	9309      	str	r3, [sp, #36]	; 0x24
   21fae:	2300      	movs	r3, #0
   21fb0:	2200      	movs	r2, #0
   21fb2:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
   21fb6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   21fba:	f7f0 f85d 	bl	12078 <__aeabi_dsub>
   21fbe:	a358      	add	r3, pc, #352	; (adr r3, 22120 <_dtoa_r+0x268>)
   21fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
   21fc4:	f7f0 fa0c 	bl	123e0 <__aeabi_dmul>
   21fc8:	a357      	add	r3, pc, #348	; (adr r3, 22128 <_dtoa_r+0x270>)
   21fca:	e9d3 2300 	ldrd	r2, r3, [r3]
   21fce:	f7f0 f855 	bl	1207c <__adddf3>
   21fd2:	4680      	mov	r8, r0
   21fd4:	4620      	mov	r0, r4
   21fd6:	4689      	mov	r9, r1
   21fd8:	f7f0 f99c 	bl	12314 <__aeabi_i2d>
   21fdc:	a354      	add	r3, pc, #336	; (adr r3, 22130 <_dtoa_r+0x278>)
   21fde:	e9d3 2300 	ldrd	r2, r3, [r3]
   21fe2:	f7f0 f9fd 	bl	123e0 <__aeabi_dmul>
   21fe6:	4602      	mov	r2, r0
   21fe8:	460b      	mov	r3, r1
   21fea:	4640      	mov	r0, r8
   21fec:	4649      	mov	r1, r9
   21fee:	f7f0 f845 	bl	1207c <__adddf3>
   21ff2:	4680      	mov	r8, r0
   21ff4:	4689      	mov	r9, r1
   21ff6:	f002 fedf 	bl	24db8 <__aeabi_d2iz>
   21ffa:	4649      	mov	r1, r9
   21ffc:	2200      	movs	r2, #0
   21ffe:	2300      	movs	r3, #0
   22000:	9007      	str	r0, [sp, #28]
   22002:	4640      	mov	r0, r8
   22004:	f002 feb0 	bl	24d68 <__aeabi_dcmplt>
   22008:	b150      	cbz	r0, 22020 <_dtoa_r+0x168>
   2200a:	9807      	ldr	r0, [sp, #28]
   2200c:	f7f0 f982 	bl	12314 <__aeabi_i2d>
   22010:	4642      	mov	r2, r8
   22012:	464b      	mov	r3, r9
   22014:	f002 fe9e 	bl	24d54 <__aeabi_dcmpeq>
   22018:	b910      	cbnz	r0, 22020 <_dtoa_r+0x168>
   2201a:	9d07      	ldr	r5, [sp, #28]
   2201c:	3d01      	subs	r5, #1
   2201e:	9507      	str	r5, [sp, #28]
   22020:	9d07      	ldr	r5, [sp, #28]
   22022:	2d16      	cmp	r5, #22
   22024:	f200 8165 	bhi.w	222f2 <_dtoa_r+0x43a>
   22028:	f24c 1170 	movw	r1, #49520	; 0xc170
   2202c:	4652      	mov	r2, sl
   2202e:	f2c0 0102 	movt	r1, #2
   22032:	465b      	mov	r3, fp
   22034:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   22038:	e9d1 0100 	ldrd	r0, r1, [r1]
   2203c:	f002 feb2 	bl	24da4 <__aeabi_dcmpgt>
   22040:	2800      	cmp	r0, #0
   22042:	f000 823d 	beq.w	224c0 <_dtoa_r+0x608>
   22046:	9d07      	ldr	r5, [sp, #28]
   22048:	3d01      	subs	r5, #1
   2204a:	9507      	str	r5, [sp, #28]
   2204c:	2500      	movs	r5, #0
   2204e:	9515      	str	r5, [sp, #84]	; 0x54
   22050:	1b3c      	subs	r4, r7, r4
   22052:	3c01      	subs	r4, #1
   22054:	f100 822f 	bmi.w	224b6 <_dtoa_r+0x5fe>
   22058:	2500      	movs	r5, #0
   2205a:	940b      	str	r4, [sp, #44]	; 0x2c
   2205c:	950e      	str	r5, [sp, #56]	; 0x38
   2205e:	9c07      	ldr	r4, [sp, #28]
   22060:	2c00      	cmp	r4, #0
   22062:	f2c0 821f 	blt.w	224a4 <_dtoa_r+0x5ec>
   22066:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   22068:	9414      	str	r4, [sp, #80]	; 0x50
   2206a:	192d      	adds	r5, r5, r4
   2206c:	2400      	movs	r4, #0
   2206e:	950b      	str	r5, [sp, #44]	; 0x2c
   22070:	9412      	str	r4, [sp, #72]	; 0x48
   22072:	9d28      	ldr	r5, [sp, #160]	; 0xa0
   22074:	2d09      	cmp	r5, #9
   22076:	d861      	bhi.n	2213c <_dtoa_r+0x284>
   22078:	2d05      	cmp	r5, #5
   2207a:	f340 868d 	ble.w	22d98 <_dtoa_r+0xee0>
   2207e:	3d04      	subs	r5, #4
   22080:	9528      	str	r5, [sp, #160]	; 0xa0
   22082:	2500      	movs	r5, #0
   22084:	9c28      	ldr	r4, [sp, #160]	; 0xa0
   22086:	1ea3      	subs	r3, r4, #2
   22088:	2b03      	cmp	r3, #3
   2208a:	d859      	bhi.n	22140 <_dtoa_r+0x288>
   2208c:	e8df f013 	tbh	[pc, r3, lsl #1]
   22090:	03a703bb 	.word	0x03a703bb
   22094:	03b80264 	.word	0x03b80264
   22098:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   2209a:	f24c 00f4 	movw	r0, #49396	; 0xc0f4
   2209e:	f242 730f 	movw	r3, #9999	; 0x270f
   220a2:	f2c0 0002 	movt	r0, #2
   220a6:	6023      	str	r3, [r4, #0]
   220a8:	f1ba 0f00 	cmp.w	sl, #0
   220ac:	d00f      	beq.n	220ce <_dtoa_r+0x216>
   220ae:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
   220b0:	2d00      	cmp	r5, #0
   220b2:	f43f af43 	beq.w	21f3c <_dtoa_r+0x84>
   220b6:	78c3      	ldrb	r3, [r0, #3]
   220b8:	b9c3      	cbnz	r3, 220ec <_dtoa_r+0x234>
   220ba:	1cc3      	adds	r3, r0, #3
   220bc:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   220be:	6023      	str	r3, [r4, #0]
   220c0:	e73c      	b.n	21f3c <_dtoa_r+0x84>
   220c2:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
   220c6:	2301      	movs	r3, #1
   220c8:	46ab      	mov	fp, r5
   220ca:	6023      	str	r3, [r4, #0]
   220cc:	e713      	b.n	21ef6 <_dtoa_r+0x3e>
   220ce:	f24c 02e8 	movw	r2, #49384	; 0xc0e8
   220d2:	f24c 03f4 	movw	r3, #49396	; 0xc0f4
   220d6:	f3c5 0013 	ubfx	r0, r5, #0, #20
   220da:	f2c0 0202 	movt	r2, #2
   220de:	f2c0 0302 	movt	r3, #2
   220e2:	2800      	cmp	r0, #0
   220e4:	bf0c      	ite	eq
   220e6:	4610      	moveq	r0, r2
   220e8:	4618      	movne	r0, r3
   220ea:	e7e0      	b.n	220ae <_dtoa_r+0x1f6>
   220ec:	f100 0308 	add.w	r3, r0, #8
   220f0:	e7e4      	b.n	220bc <_dtoa_r+0x204>
   220f2:	4649      	mov	r1, r9
   220f4:	4640      	mov	r0, r8
   220f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
   220fa:	f5a4 747e 	sub.w	r4, r4, #1016	; 0x3f8
   220fe:	9909      	ldr	r1, [sp, #36]	; 0x24
   22100:	2500      	movs	r5, #0
   22102:	3c07      	subs	r4, #7
   22104:	9f1c      	ldr	r7, [sp, #112]	; 0x70
   22106:	f021 437f 	bic.w	r3, r1, #4278190080	; 0xff000000
   2210a:	9517      	str	r5, [sp, #92]	; 0x5c
   2210c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
   22110:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
   22114:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
   22118:	9309      	str	r3, [sp, #36]	; 0x24
   2211a:	e748      	b.n	21fae <_dtoa_r+0xf6>
   2211c:	f3af 8000 	nop.w
   22120:	636f4361 	.word	0x636f4361
   22124:	3fd287a7 	.word	0x3fd287a7
   22128:	8b60c8b3 	.word	0x8b60c8b3
   2212c:	3fc68a28 	.word	0x3fc68a28
   22130:	509f79fb 	.word	0x509f79fb
   22134:	3fd34413 	.word	0x3fd34413
   22138:	0002bfe1 	.word	0x0002bfe1
   2213c:	2400      	moval	r4, #0
   2213e:	9428      	stral	r4, [sp, #160]	; 0xa0
   22140:	6a74      	ldral	r4, [r6, #36]	; 0x24
   22142:	2300      	movs	r3, #0
   22144:	4619      	mov	r1, r3
   22146:	4630      	mov	r0, r6
   22148:	f04f 35ff 	mov.w	r5, #4294967295
   2214c:	9329      	str	r3, [sp, #164]	; 0xa4
   2214e:	6063      	str	r3, [r4, #4]
   22150:	9510      	str	r5, [sp, #64]	; 0x40
   22152:	950d      	str	r5, [sp, #52]	; 0x34
   22154:	f001 fa30 	bl	235b8 <_Balloc>
   22158:	6a73      	ldr	r3, [r6, #36]	; 0x24
   2215a:	2501      	movs	r5, #1
   2215c:	9513      	str	r5, [sp, #76]	; 0x4c
   2215e:	6020      	str	r0, [r4, #0]
   22160:	681b      	ldr	r3, [r3, #0]
   22162:	930f      	str	r3, [sp, #60]	; 0x3c
   22164:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   22166:	9d07      	ldr	r5, [sp, #28]
   22168:	43dc      	mvns	r4, r3
   2216a:	0fe4      	lsrs	r4, r4, #31
   2216c:	2d0e      	cmp	r5, #14
   2216e:	bfcc      	ite	gt
   22170:	2400      	movgt	r4, #0
   22172:	f004 0401 	andle.w	r4, r4, #1
   22176:	2c00      	cmp	r4, #0
   22178:	f000 80be 	beq.w	222f8 <_dtoa_r+0x440>
   2217c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
   2217e:	f24c 1370 	movw	r3, #49520	; 0xc170
   22182:	f2c0 0302 	movt	r3, #2
   22186:	0fe5      	lsrs	r5, r4, #31
   22188:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   2218a:	2c00      	cmp	r4, #0
   2218c:	bfcc      	ite	gt
   2218e:	2500      	movgt	r5, #0
   22190:	f005 0501 	andle.w	r5, r5, #1
   22194:	9c07      	ldr	r4, [sp, #28]
   22196:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   2219a:	e9d3 0100 	ldrd	r0, r1, [r3]
   2219e:	e9cd 0104 	strd	r0, r1, [sp, #16]
   221a2:	2d00      	cmp	r5, #0
   221a4:	f040 81bc 	bne.w	22520 <_dtoa_r+0x668>
   221a8:	4602      	mov	r2, r0
   221aa:	460b      	mov	r3, r1
   221ac:	4650      	mov	r0, sl
   221ae:	4659      	mov	r1, fp
   221b0:	f7f0 fa40 	bl	12634 <__aeabi_ddiv>
   221b4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   221b6:	f002 fdff 	bl	24db8 <__aeabi_d2iz>
   221ba:	4680      	mov	r8, r0
   221bc:	f7f0 f8aa 	bl	12314 <__aeabi_i2d>
   221c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   221c4:	f7f0 f90c 	bl	123e0 <__aeabi_dmul>
   221c8:	460b      	mov	r3, r1
   221ca:	4602      	mov	r2, r0
   221cc:	4659      	mov	r1, fp
   221ce:	4650      	mov	r0, sl
   221d0:	f7ef ff52 	bl	12078 <__aeabi_dsub>
   221d4:	f108 0330 	add.w	r3, r8, #48	; 0x30
   221d8:	f804 3b01 	strb.w	r3, [r4], #1
   221dc:	46a1      	mov	r9, r4
   221de:	9411      	str	r4, [sp, #68]	; 0x44
   221e0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   221e2:	2c01      	cmp	r4, #1
   221e4:	4682      	mov	sl, r0
   221e6:	468b      	mov	fp, r1
   221e8:	d04b      	beq.n	22282 <_dtoa_r+0x3ca>
   221ea:	2300      	movs	r3, #0
   221ec:	2200      	movs	r2, #0
   221ee:	f2c4 0324 	movt	r3, #16420	; 0x4024
   221f2:	2401      	movs	r4, #1
   221f4:	f7f0 f8f4 	bl	123e0 <__aeabi_dmul>
   221f8:	2200      	movs	r2, #0
   221fa:	2300      	movs	r3, #0
   221fc:	4682      	mov	sl, r0
   221fe:	468b      	mov	fp, r1
   22200:	f002 fda8 	bl	24d54 <__aeabi_dcmpeq>
   22204:	b100      	cbz	r0, 22208 <_dtoa_r+0x350>
   22206:	462c      	mov	r4, r5
   22208:	f014 0fff 	tst.w	r4, #255	; 0xff
   2220c:	f000 812d 	beq.w	2246a <_dtoa_r+0x5b2>
   22210:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   22212:	980d      	ldr	r0, [sp, #52]	; 0x34
   22214:	9c11      	ldr	r4, [sp, #68]	; 0x44
   22216:	182b      	adds	r3, r5, r0
   22218:	960a      	str	r6, [sp, #40]	; 0x28
   2221a:	461f      	mov	r7, r3
   2221c:	e00d      	b.n	2223a <_dtoa_r+0x382>
   2221e:	f7f0 f8df 	bl	123e0 <__aeabi_dmul>
   22222:	2200      	movs	r2, #0
   22224:	2300      	movs	r3, #0
   22226:	4682      	mov	sl, r0
   22228:	468b      	mov	fp, r1
   2222a:	f002 fd93 	bl	24d54 <__aeabi_dcmpeq>
   2222e:	b100      	cbz	r0, 22232 <_dtoa_r+0x37a>
   22230:	2600      	movs	r6, #0
   22232:	f016 0fff 	tst.w	r6, #255	; 0xff
   22236:	f000 84e9 	beq.w	22c0c <_dtoa_r+0xd54>
   2223a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   2223e:	4650      	mov	r0, sl
   22240:	4659      	mov	r1, fp
   22242:	2601      	movs	r6, #1
   22244:	f7f0 f9f6 	bl	12634 <__aeabi_ddiv>
   22248:	f002 fdb6 	bl	24db8 <__aeabi_d2iz>
   2224c:	4680      	mov	r8, r0
   2224e:	f7f0 f861 	bl	12314 <__aeabi_i2d>
   22252:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   22256:	f108 0530 	add.w	r5, r8, #48	; 0x30
   2225a:	f7f0 f8c1 	bl	123e0 <__aeabi_dmul>
   2225e:	4602      	mov	r2, r0
   22260:	460b      	mov	r3, r1
   22262:	4650      	mov	r0, sl
   22264:	4659      	mov	r1, fp
   22266:	f7ef ff07 	bl	12078 <__aeabi_dsub>
   2226a:	2300      	movs	r3, #0
   2226c:	f804 5b01 	strb.w	r5, [r4], #1
   22270:	2200      	movs	r2, #0
   22272:	42bc      	cmp	r4, r7
   22274:	f2c4 0324 	movt	r3, #16420	; 0x4024
   22278:	46a1      	mov	r9, r4
   2227a:	4682      	mov	sl, r0
   2227c:	468b      	mov	fp, r1
   2227e:	d1ce      	bne.n	2221e <_dtoa_r+0x366>
   22280:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   22282:	4652      	mov	r2, sl
   22284:	465b      	mov	r3, fp
   22286:	4650      	mov	r0, sl
   22288:	4659      	mov	r1, fp
   2228a:	f7ef fef7 	bl	1207c <__adddf3>
   2228e:	4604      	mov	r4, r0
   22290:	460d      	mov	r5, r1
   22292:	4622      	mov	r2, r4
   22294:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   22298:	462b      	mov	r3, r5
   2229a:	f002 fd65 	bl	24d68 <__aeabi_dcmplt>
   2229e:	b960      	cbnz	r0, 222ba <_dtoa_r+0x402>
   222a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   222a4:	4622      	mov	r2, r4
   222a6:	462b      	mov	r3, r5
   222a8:	f002 fd54 	bl	24d54 <__aeabi_dcmpeq>
   222ac:	2800      	cmp	r0, #0
   222ae:	f000 80dc 	beq.w	2246a <_dtoa_r+0x5b2>
   222b2:	f018 0f01 	tst.w	r8, #1
   222b6:	f000 80d8 	beq.w	2246a <_dtoa_r+0x5b2>
   222ba:	9d07      	ldr	r5, [sp, #28]
   222bc:	f819 4c01 	ldrb.w	r4, [r9, #-1]
   222c0:	951a      	str	r5, [sp, #104]	; 0x68
   222c2:	464b      	mov	r3, r9
   222c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   222c6:	e002      	b.n	222ce <_dtoa_r+0x416>
   222c8:	f813 4c02 	ldrb.w	r4, [r3, #-2]
   222cc:	3b01      	subs	r3, #1
   222ce:	2c39      	cmp	r4, #57	; 0x39
   222d0:	4699      	mov	r9, r3
   222d2:	f040 84d3 	bne.w	22c7c <_dtoa_r+0xdc4>
   222d6:	4293      	cmp	r3, r2
   222d8:	d1f6      	bne.n	222c8 <_dtoa_r+0x410>
   222da:	9d11      	ldr	r5, [sp, #68]	; 0x44
   222dc:	2330      	movs	r3, #48	; 0x30
   222de:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   222e0:	f805 3c01 	strb.w	r3, [r5, #-1]
   222e4:	462b      	mov	r3, r5
   222e6:	3401      	adds	r4, #1
   222e8:	9407      	str	r4, [sp, #28]
   222ea:	2431      	movs	r4, #49	; 0x31
   222ec:	f803 4c01 	strb.w	r4, [r3, #-1]
   222f0:	e0bb      	b.n	2246a <_dtoa_r+0x5b2>
   222f2:	2501      	movs	r5, #1
   222f4:	9515      	str	r5, [sp, #84]	; 0x54
   222f6:	e6ab      	b.n	22050 <_dtoa_r+0x198>
   222f8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   222fa:	2d00      	cmp	r5, #0
   222fc:	f040 80eb 	bne.w	224d6 <_dtoa_r+0x61e>
   22300:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   22302:	9c12      	ldr	r4, [sp, #72]	; 0x48
   22304:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   22306:	9308      	str	r3, [sp, #32]
   22308:	2d00      	cmp	r5, #0
   2230a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   2230c:	bfd4      	ite	le
   2230e:	2300      	movle	r3, #0
   22310:	2301      	movgt	r3, #1
   22312:	2800      	cmp	r0, #0
   22314:	bfd4      	ite	le
   22316:	2300      	movle	r3, #0
   22318:	f003 0301 	andgt.w	r3, r3, #1
   2231c:	b14b      	cbz	r3, 22332 <_dtoa_r+0x47a>
   2231e:	4603      	mov	r3, r0
   22320:	990e      	ldr	r1, [sp, #56]	; 0x38
   22322:	42ab      	cmp	r3, r5
   22324:	bfa8      	it	ge
   22326:	462b      	movge	r3, r5
   22328:	1aed      	subs	r5, r5, r3
   2232a:	1ac9      	subs	r1, r1, r3
   2232c:	1ac0      	subs	r0, r0, r3
   2232e:	910e      	str	r1, [sp, #56]	; 0x38
   22330:	900b      	str	r0, [sp, #44]	; 0x2c
   22332:	9a12      	ldr	r2, [sp, #72]	; 0x48
   22334:	2a00      	cmp	r2, #0
   22336:	dd1a      	ble.n	2236e <_dtoa_r+0x4b6>
   22338:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2233a:	2b00      	cmp	r3, #0
   2233c:	f000 8468 	beq.w	22c10 <_dtoa_r+0xd58>
   22340:	2c00      	cmp	r4, #0
   22342:	dd10      	ble.n	22366 <_dtoa_r+0x4ae>
   22344:	9908      	ldr	r1, [sp, #32]
   22346:	4622      	mov	r2, r4
   22348:	4630      	mov	r0, r6
   2234a:	f001 fb07 	bl	2395c <__pow5mult>
   2234e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   22350:	9008      	str	r0, [sp, #32]
   22352:	4630      	mov	r0, r6
   22354:	9908      	ldr	r1, [sp, #32]
   22356:	f001 fa63 	bl	23820 <__multiply>
   2235a:	990c      	ldr	r1, [sp, #48]	; 0x30
   2235c:	4607      	mov	r7, r0
   2235e:	4630      	mov	r0, r6
   22360:	f001 f960 	bl	23624 <_Bfree>
   22364:	970c      	str	r7, [sp, #48]	; 0x30
   22366:	9812      	ldr	r0, [sp, #72]	; 0x48
   22368:	1b02      	subs	r2, r0, r4
   2236a:	f040 8474 	bne.w	22c56 <_dtoa_r+0xd9e>
   2236e:	2101      	movs	r1, #1
   22370:	4630      	mov	r0, r6
   22372:	f001 fa4b 	bl	2380c <__i2b>
   22376:	9914      	ldr	r1, [sp, #80]	; 0x50
   22378:	2900      	cmp	r1, #0
   2237a:	4604      	mov	r4, r0
   2237c:	dd05      	ble.n	2238a <_dtoa_r+0x4d2>
   2237e:	4621      	mov	r1, r4
   22380:	4630      	mov	r0, r6
   22382:	9a14      	ldr	r2, [sp, #80]	; 0x50
   22384:	f001 faea 	bl	2395c <__pow5mult>
   22388:	4604      	mov	r4, r0
   2238a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   2238c:	2a01      	cmp	r2, #1
   2238e:	f340 823d 	ble.w	2280c <_dtoa_r+0x954>
   22392:	2700      	movs	r7, #0
   22394:	9914      	ldr	r1, [sp, #80]	; 0x50
   22396:	2301      	movs	r3, #1
   22398:	2900      	cmp	r1, #0
   2239a:	f040 83b6 	bne.w	22b0a <_dtoa_r+0xc52>
   2239e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   223a0:	189b      	adds	r3, r3, r2
   223a2:	f013 031f 	ands.w	r3, r3, #31
   223a6:	f000 82fb 	beq.w	229a0 <_dtoa_r+0xae8>
   223aa:	f1c3 0220 	rsb	r2, r3, #32
   223ae:	2a04      	cmp	r2, #4
   223b0:	f340 84ed 	ble.w	22d8e <_dtoa_r+0xed6>
   223b4:	f1c3 031c 	rsb	r3, r3, #28
   223b8:	980e      	ldr	r0, [sp, #56]	; 0x38
   223ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
   223bc:	18ed      	adds	r5, r5, r3
   223be:	18c0      	adds	r0, r0, r3
   223c0:	900e      	str	r0, [sp, #56]	; 0x38
   223c2:	18c9      	adds	r1, r1, r3
   223c4:	910b      	str	r1, [sp, #44]	; 0x2c
   223c6:	990e      	ldr	r1, [sp, #56]	; 0x38
   223c8:	2900      	cmp	r1, #0
   223ca:	dd05      	ble.n	223d8 <_dtoa_r+0x520>
   223cc:	4630      	mov	r0, r6
   223ce:	990c      	ldr	r1, [sp, #48]	; 0x30
   223d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   223d2:	f001 fb13 	bl	239fc <__lshift>
   223d6:	900c      	str	r0, [sp, #48]	; 0x30
   223d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   223da:	2a00      	cmp	r2, #0
   223dc:	dd04      	ble.n	223e8 <_dtoa_r+0x530>
   223de:	4621      	mov	r1, r4
   223e0:	4630      	mov	r0, r6
   223e2:	f001 fb0b 	bl	239fc <__lshift>
   223e6:	4604      	mov	r4, r0
   223e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   223ea:	2b00      	cmp	r3, #0
   223ec:	f040 8396 	bne.w	22b1c <_dtoa_r+0xc64>
   223f0:	9828      	ldr	r0, [sp, #160]	; 0xa0
   223f2:	990d      	ldr	r1, [sp, #52]	; 0x34
   223f4:	2802      	cmp	r0, #2
   223f6:	bfd4      	ite	le
   223f8:	2300      	movle	r3, #0
   223fa:	2301      	movgt	r3, #1
   223fc:	2900      	cmp	r1, #0
   223fe:	bfcc      	ite	gt
   22400:	2300      	movgt	r3, #0
   22402:	f003 0301 	andle.w	r3, r3, #1
   22406:	2b00      	cmp	r3, #0
   22408:	f000 824d 	beq.w	228a6 <_dtoa_r+0x9ee>
   2240c:	2900      	cmp	r1, #0
   2240e:	f040 809c 	bne.w	2254a <_dtoa_r+0x692>
   22412:	4621      	mov	r1, r4
   22414:	2205      	movs	r2, #5
   22416:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   22418:	4630      	mov	r0, r6
   2241a:	f001 f91f 	bl	2365c <__multadd>
   2241e:	4604      	mov	r4, r0
   22420:	980c      	ldr	r0, [sp, #48]	; 0x30
   22422:	4621      	mov	r1, r4
   22424:	f001 fb48 	bl	23ab8 <__mcmp>
   22428:	2800      	cmp	r0, #0
   2242a:	f340 808e 	ble.w	2254a <_dtoa_r+0x692>
   2242e:	9d07      	ldr	r5, [sp, #28]
   22430:	2331      	movs	r3, #49	; 0x31
   22432:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   22436:	3501      	adds	r5, #1
   22438:	9507      	str	r5, [sp, #28]
   2243a:	2500      	movs	r5, #0
   2243c:	f809 3b01 	strb.w	r3, [r9], #1
   22440:	4621      	mov	r1, r4
   22442:	4630      	mov	r0, r6
   22444:	f001 f8ee 	bl	23624 <_Bfree>
   22448:	9c08      	ldr	r4, [sp, #32]
   2244a:	b174      	cbz	r4, 2246a <_dtoa_r+0x5b2>
   2244c:	1c2b      	adds	r3, r5, #0
   2244e:	bf18      	it	ne
   22450:	2301      	movne	r3, #1
   22452:	42a5      	cmp	r5, r4
   22454:	bf0c      	ite	eq
   22456:	2300      	moveq	r3, #0
   22458:	f003 0301 	andne.w	r3, r3, #1
   2245c:	2b00      	cmp	r3, #0
   2245e:	f040 829a 	bne.w	22996 <_dtoa_r+0xade>
   22462:	4630      	mov	r0, r6
   22464:	9908      	ldr	r1, [sp, #32]
   22466:	f001 f8dd 	bl	23624 <_Bfree>
   2246a:	4630      	mov	r0, r6
   2246c:	990c      	ldr	r1, [sp, #48]	; 0x30
   2246e:	f001 f8d9 	bl	23624 <_Bfree>
   22472:	9d07      	ldr	r5, [sp, #28]
   22474:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   22476:	2200      	movs	r2, #0
   22478:	1c6b      	adds	r3, r5, #1
   2247a:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
   2247c:	f889 2000 	strb.w	r2, [r9]
   22480:	980f      	ldr	r0, [sp, #60]	; 0x3c
   22482:	6023      	str	r3, [r4, #0]
   22484:	2d00      	cmp	r5, #0
   22486:	f43f ad59 	beq.w	21f3c <_dtoa_r+0x84>
   2248a:	f8c5 9000 	str.w	r9, [r5]
   2248e:	980f      	ldr	r0, [sp, #60]	; 0x3c
   22490:	e554      	b.n	21f3c <_dtoa_r+0x84>
   22492:	2010      	movs	r0, #16
   22494:	f7fc fda6 	bl	1efe4 <malloc>
   22498:	6270      	str	r0, [r6, #36]	; 0x24
   2249a:	6045      	str	r5, [r0, #4]
   2249c:	6085      	str	r5, [r0, #8]
   2249e:	6005      	str	r5, [r0, #0]
   224a0:	60c5      	str	r5, [r0, #12]
   224a2:	e522      	b.n	21eea <_dtoa_r+0x32>
   224a4:	9c07      	ldr	r4, [sp, #28]
   224a6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   224a8:	1b2d      	subs	r5, r5, r4
   224aa:	950e      	str	r5, [sp, #56]	; 0x38
   224ac:	4265      	negs	r5, r4
   224ae:	2400      	movs	r4, #0
   224b0:	9512      	str	r5, [sp, #72]	; 0x48
   224b2:	9414      	str	r4, [sp, #80]	; 0x50
   224b4:	e5dd      	b.n	22072 <_dtoa_r+0x1ba>
   224b6:	4264      	negs	r4, r4
   224b8:	940e      	str	r4, [sp, #56]	; 0x38
   224ba:	2400      	movs	r4, #0
   224bc:	940b      	str	r4, [sp, #44]	; 0x2c
   224be:	e5ce      	b.n	2205e <_dtoa_r+0x1a6>
   224c0:	2500      	movs	r5, #0
   224c2:	9515      	str	r5, [sp, #84]	; 0x54
   224c4:	e5c4      	b.n	22050 <_dtoa_r+0x198>
   224c6:	f64f 32ee 	movw	r2, #64494	; 0xfbee
   224ca:	f6cf 72ff 	movt	r2, #65535	; 0xffff
   224ce:	1b12      	subs	r2, r2, r4
   224d0:	fa0a f002 	lsl.w	r0, sl, r2
   224d4:	e55e      	b.n	21f94 <_dtoa_r+0xdc>
   224d6:	9d28      	ldr	r5, [sp, #160]	; 0xa0
   224d8:	2d01      	cmp	r5, #1
   224da:	f340 83c6 	ble.w	22c6a <_dtoa_r+0xdb2>
   224de:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   224e0:	1e6b      	subs	r3, r5, #1
   224e2:	9d12      	ldr	r5, [sp, #72]	; 0x48
   224e4:	429d      	cmp	r5, r3
   224e6:	bfaf      	iteee	ge
   224e8:	ebc3 0405 	rsbge	r4, r3, r5
   224ec:	9d12      	ldrlt	r5, [sp, #72]	; 0x48
   224ee:	9312      	strlt	r3, [sp, #72]	; 0x48
   224f0:	ebc5 0203 	rsblt	r2, r5, r3
   224f4:	bfbe      	ittt	lt
   224f6:	9d14      	ldrlt	r5, [sp, #80]	; 0x50
   224f8:	18ad      	addlt	r5, r5, r2
   224fa:	9514      	strlt	r5, [sp, #80]	; 0x50
   224fc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   224fe:	2d00      	cmp	r5, #0
   22500:	f2c0 83c6 	blt.w	22c90 <_dtoa_r+0xdd8>
   22504:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   22506:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   22508:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2250a:	4630      	mov	r0, r6
   2250c:	2101      	movs	r1, #1
   2250e:	18d2      	adds	r2, r2, r3
   22510:	920e      	str	r2, [sp, #56]	; 0x38
   22512:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   22514:	18d2      	adds	r2, r2, r3
   22516:	920b      	str	r2, [sp, #44]	; 0x2c
   22518:	f001 f978 	bl	2380c <__i2b>
   2251c:	9008      	str	r0, [sp, #32]
   2251e:	e6f3      	b.n	22308 <_dtoa_r+0x450>
   22520:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   22522:	2d00      	cmp	r5, #0
   22524:	f040 839e 	bne.w	22c64 <_dtoa_r+0xdac>
   22528:	2300      	movs	r3, #0
   2252a:	2200      	movs	r2, #0
   2252c:	f2c4 0314 	movt	r3, #16404	; 0x4014
   22530:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   22534:	f7ef ff54 	bl	123e0 <__aeabi_dmul>
   22538:	4652      	mov	r2, sl
   2253a:	465b      	mov	r3, fp
   2253c:	f002 fc28 	bl	24d90 <__aeabi_dcmpge>
   22540:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   22542:	9408      	str	r4, [sp, #32]
   22544:	2800      	cmp	r0, #0
   22546:	f43f af72 	beq.w	2242e <_dtoa_r+0x576>
   2254a:	9d29      	ldr	r5, [sp, #164]	; 0xa4
   2254c:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   22550:	43ed      	mvns	r5, r5
   22552:	9507      	str	r5, [sp, #28]
   22554:	2500      	movs	r5, #0
   22556:	e773      	b.n	22440 <_dtoa_r+0x588>
   22558:	2401      	movs	r4, #1
   2255a:	9413      	str	r4, [sp, #76]	; 0x4c
   2255c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
   2255e:	2c00      	cmp	r4, #0
   22560:	f340 82fe 	ble.w	22b60 <_dtoa_r+0xca8>
   22564:	4620      	mov	r0, r4
   22566:	2c0e      	cmp	r4, #14
   22568:	bf8c      	ite	hi
   2256a:	2500      	movhi	r5, #0
   2256c:	f005 0501 	andls.w	r5, r5, #1
   22570:	9410      	str	r4, [sp, #64]	; 0x40
   22572:	940d      	str	r4, [sp, #52]	; 0x34
   22574:	6a74      	ldr	r4, [r6, #36]	; 0x24
   22576:	2300      	movs	r3, #0
   22578:	2817      	cmp	r0, #23
   2257a:	6063      	str	r3, [r4, #4]
   2257c:	d909      	bls.n	22592 <_dtoa_r+0x6da>
   2257e:	2201      	movs	r2, #1
   22580:	2304      	movs	r3, #4
   22582:	005b      	lsls	r3, r3, #1
   22584:	4617      	mov	r7, r2
   22586:	f103 0114 	add.w	r1, r3, #20
   2258a:	3201      	adds	r2, #1
   2258c:	4281      	cmp	r1, r0
   2258e:	d9f8      	bls.n	22582 <_dtoa_r+0x6ca>
   22590:	6067      	str	r7, [r4, #4]
   22592:	4630      	mov	r0, r6
   22594:	6861      	ldr	r1, [r4, #4]
   22596:	f001 f80f 	bl	235b8 <_Balloc>
   2259a:	6a73      	ldr	r3, [r6, #36]	; 0x24
   2259c:	6020      	str	r0, [r4, #0]
   2259e:	681b      	ldr	r3, [r3, #0]
   225a0:	930f      	str	r3, [sp, #60]	; 0x3c
   225a2:	2d00      	cmp	r5, #0
   225a4:	f43f adde 	beq.w	22164 <_dtoa_r+0x2ac>
   225a8:	9c07      	ldr	r4, [sp, #28]
   225aa:	4652      	mov	r2, sl
   225ac:	465b      	mov	r3, fp
   225ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
   225b2:	2c00      	cmp	r4, #0
   225b4:	f340 8213 	ble.w	229de <_dtoa_r+0xb26>
   225b8:	f004 020f 	and.w	r2, r4, #15
   225bc:	f24c 1370 	movw	r3, #49520	; 0xc170
   225c0:	f2c0 0302 	movt	r3, #2
   225c4:	1124      	asrs	r4, r4, #4
   225c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   225ca:	2702      	movs	r7, #2
   225cc:	06e1      	lsls	r1, r4, #27
   225ce:	e9d3 8900 	ldrd	r8, r9, [r3]
   225d2:	d50e      	bpl.n	225f2 <_dtoa_r+0x73a>
   225d4:	f24c 2360 	movw	r3, #49760	; 0xc260
   225d8:	4650      	mov	r0, sl
   225da:	f2c0 0302 	movt	r3, #2
   225de:	4659      	mov	r1, fp
   225e0:	f004 040f 	and.w	r4, r4, #15
   225e4:	2703      	movs	r7, #3
   225e6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   225ea:	f7f0 f823 	bl	12634 <__aeabi_ddiv>
   225ee:	4682      	mov	sl, r0
   225f0:	468b      	mov	fp, r1
   225f2:	b18c      	cbz	r4, 22618 <_dtoa_r+0x760>
   225f4:	f24c 2560 	movw	r5, #49760	; 0xc260
   225f8:	f2c0 0502 	movt	r5, #2
   225fc:	07e2      	lsls	r2, r4, #31
   225fe:	4640      	mov	r0, r8
   22600:	4649      	mov	r1, r9
   22602:	d506      	bpl.n	22612 <_dtoa_r+0x75a>
   22604:	e9d5 2300 	ldrd	r2, r3, [r5]
   22608:	3701      	adds	r7, #1
   2260a:	f7ef fee9 	bl	123e0 <__aeabi_dmul>
   2260e:	4680      	mov	r8, r0
   22610:	4689      	mov	r9, r1
   22612:	3508      	adds	r5, #8
   22614:	1064      	asrs	r4, r4, #1
   22616:	d1f1      	bne.n	225fc <_dtoa_r+0x744>
   22618:	4650      	mov	r0, sl
   2261a:	4659      	mov	r1, fp
   2261c:	4642      	mov	r2, r8
   2261e:	464b      	mov	r3, r9
   22620:	f7f0 f808 	bl	12634 <__aeabi_ddiv>
   22624:	4682      	mov	sl, r0
   22626:	468b      	mov	fp, r1
   22628:	9c15      	ldr	r4, [sp, #84]	; 0x54
   2262a:	2c00      	cmp	r4, #0
   2262c:	f000 8108 	beq.w	22840 <_dtoa_r+0x988>
   22630:	2300      	movs	r3, #0
   22632:	4650      	mov	r0, sl
   22634:	4659      	mov	r1, fp
   22636:	2200      	movs	r2, #0
   22638:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
   2263c:	2401      	movs	r4, #1
   2263e:	f002 fb93 	bl	24d68 <__aeabi_dcmplt>
   22642:	b900      	cbnz	r0, 22646 <_dtoa_r+0x78e>
   22644:	2400      	movs	r4, #0
   22646:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   22648:	2d00      	cmp	r5, #0
   2264a:	bfd4      	ite	le
   2264c:	2400      	movle	r4, #0
   2264e:	f004 0401 	andgt.w	r4, r4, #1
   22652:	2c00      	cmp	r4, #0
   22654:	f000 80f4 	beq.w	22840 <_dtoa_r+0x988>
   22658:	9c10      	ldr	r4, [sp, #64]	; 0x40
   2265a:	2c00      	cmp	r4, #0
   2265c:	f340 81aa 	ble.w	229b4 <_dtoa_r+0xafc>
   22660:	2300      	movs	r3, #0
   22662:	2200      	movs	r2, #0
   22664:	f2c4 0324 	movt	r3, #16420	; 0x4024
   22668:	4650      	mov	r0, sl
   2266a:	4659      	mov	r1, fp
   2266c:	f7ef feb8 	bl	123e0 <__aeabi_dmul>
   22670:	9d07      	ldr	r5, [sp, #28]
   22672:	3d01      	subs	r5, #1
   22674:	951a      	str	r5, [sp, #104]	; 0x68
   22676:	4682      	mov	sl, r0
   22678:	1c78      	adds	r0, r7, #1
   2267a:	468b      	mov	fp, r1
   2267c:	f7ef fe4a 	bl	12314 <__aeabi_i2d>
   22680:	4602      	mov	r2, r0
   22682:	460b      	mov	r3, r1
   22684:	4650      	mov	r0, sl
   22686:	4659      	mov	r1, fp
   22688:	f7ef feaa 	bl	123e0 <__aeabi_dmul>
   2268c:	2300      	movs	r3, #0
   2268e:	2200      	movs	r2, #0
   22690:	f2c4 031c 	movt	r3, #16412	; 0x401c
   22694:	f7ef fcf2 	bl	1207c <__adddf3>
   22698:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   2269c:	4680      	mov	r8, r0
   2269e:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
   226a2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   226a4:	2d00      	cmp	r5, #0
   226a6:	f000 81c6 	beq.w	22a36 <_dtoa_r+0xb7e>
   226aa:	f24c 1370 	movw	r3, #49520	; 0xc170
   226ae:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   226b0:	f2c0 0302 	movt	r3, #2
   226b4:	2100      	movs	r1, #0
   226b6:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
   226ba:	2000      	movs	r0, #0
   226bc:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
   226c0:	f8cd c00c 	str.w	ip, [sp, #12]
   226c4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   226c8:	9411      	str	r4, [sp, #68]	; 0x44
   226ca:	f7ef ffb3 	bl	12634 <__aeabi_ddiv>
   226ce:	464b      	mov	r3, r9
   226d0:	4642      	mov	r2, r8
   226d2:	f7ef fcd1 	bl	12078 <__aeabi_dsub>
   226d6:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
   226da:	4659      	mov	r1, fp
   226dc:	4650      	mov	r0, sl
   226de:	f002 fb6b 	bl	24db8 <__aeabi_d2iz>
   226e2:	4604      	mov	r4, r0
   226e4:	f7ef fe16 	bl	12314 <__aeabi_i2d>
   226e8:	3430      	adds	r4, #48	; 0x30
   226ea:	b2e4      	uxtb	r4, r4
   226ec:	4602      	mov	r2, r0
   226ee:	460b      	mov	r3, r1
   226f0:	4650      	mov	r0, sl
   226f2:	4659      	mov	r1, fp
   226f4:	f7ef fcc0 	bl	12078 <__aeabi_dsub>
   226f8:	9d11      	ldr	r5, [sp, #68]	; 0x44
   226fa:	f805 4b01 	strb.w	r4, [r5], #1
   226fe:	46a9      	mov	r9, r5
   22700:	9511      	str	r5, [sp, #68]	; 0x44
   22702:	4682      	mov	sl, r0
   22704:	468b      	mov	fp, r1
   22706:	4652      	mov	r2, sl
   22708:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
   2270c:	465b      	mov	r3, fp
   2270e:	f002 fb49 	bl	24da4 <__aeabi_dcmpgt>
   22712:	2800      	cmp	r0, #0
   22714:	f040 832c 	bne.w	22d70 <_dtoa_r+0xeb8>
   22718:	2100      	movs	r1, #0
   2271a:	4652      	mov	r2, sl
   2271c:	465b      	mov	r3, fp
   2271e:	2000      	movs	r0, #0
   22720:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
   22724:	f7ef fca8 	bl	12078 <__aeabi_dsub>
   22728:	4602      	mov	r2, r0
   2272a:	460b      	mov	r3, r1
   2272c:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
   22730:	f002 fb38 	bl	24da4 <__aeabi_dcmpgt>
   22734:	f8dd c00c 	ldr.w	ip, [sp, #12]
   22738:	2800      	cmp	r0, #0
   2273a:	f47f adc2 	bne.w	222c2 <_dtoa_r+0x40a>
   2273e:	f1bc 0f01 	cmp.w	ip, #1
   22742:	f340 8137 	ble.w	229b4 <_dtoa_r+0xafc>
   22746:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   22748:	961b      	str	r6, [sp, #108]	; 0x6c
   2274a:	eb04 070c 	add.w	r7, r4, ip
   2274e:	9d11      	ldr	r5, [sp, #68]	; 0x44
   22750:	9716      	str	r7, [sp, #88]	; 0x58
   22752:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
   22756:	e010      	b.n	2277a <_dtoa_r+0x8c2>
   22758:	2100      	movs	r1, #0
   2275a:	2000      	movs	r0, #0
   2275c:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
   22760:	f7ef fc8a 	bl	12078 <__aeabi_dsub>
   22764:	4632      	mov	r2, r6
   22766:	463b      	mov	r3, r7
   22768:	f002 fafe 	bl	24d68 <__aeabi_dcmplt>
   2276c:	2800      	cmp	r0, #0
   2276e:	f040 828c 	bne.w	22c8a <_dtoa_r+0xdd2>
   22772:	9c16      	ldr	r4, [sp, #88]	; 0x58
   22774:	42a5      	cmp	r5, r4
   22776:	f000 811c 	beq.w	229b2 <_dtoa_r+0xafa>
   2277a:	2300      	movs	r3, #0
   2277c:	2200      	movs	r2, #0
   2277e:	f2c4 0324 	movt	r3, #16420	; 0x4024
   22782:	4630      	mov	r0, r6
   22784:	4639      	mov	r1, r7
   22786:	f7ef fe2b 	bl	123e0 <__aeabi_dmul>
   2278a:	2300      	movs	r3, #0
   2278c:	2200      	movs	r2, #0
   2278e:	f2c4 0324 	movt	r3, #16420	; 0x4024
   22792:	4606      	mov	r6, r0
   22794:	460f      	mov	r7, r1
   22796:	4650      	mov	r0, sl
   22798:	4659      	mov	r1, fp
   2279a:	f7ef fe21 	bl	123e0 <__aeabi_dmul>
   2279e:	4689      	mov	r9, r1
   227a0:	4680      	mov	r8, r0
   227a2:	f002 fb09 	bl	24db8 <__aeabi_d2iz>
   227a6:	4604      	mov	r4, r0
   227a8:	f7ef fdb4 	bl	12314 <__aeabi_i2d>
   227ac:	3430      	adds	r4, #48	; 0x30
   227ae:	b2e4      	uxtb	r4, r4
   227b0:	4602      	mov	r2, r0
   227b2:	460b      	mov	r3, r1
   227b4:	4640      	mov	r0, r8
   227b6:	4649      	mov	r1, r9
   227b8:	f7ef fc5e 	bl	12078 <__aeabi_dsub>
   227bc:	4632      	mov	r2, r6
   227be:	463b      	mov	r3, r7
   227c0:	f805 4b01 	strb.w	r4, [r5], #1
   227c4:	46a9      	mov	r9, r5
   227c6:	4682      	mov	sl, r0
   227c8:	468b      	mov	fp, r1
   227ca:	f002 facd 	bl	24d68 <__aeabi_dcmplt>
   227ce:	4652      	mov	r2, sl
   227d0:	465b      	mov	r3, fp
   227d2:	2800      	cmp	r0, #0
   227d4:	d0c0      	beq.n	22758 <_dtoa_r+0x8a0>
   227d6:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   227d8:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
   227da:	9407      	str	r4, [sp, #28]
   227dc:	e645      	b.n	2246a <_dtoa_r+0x5b2>
   227de:	2400      	movs	r4, #0
   227e0:	9413      	str	r4, [sp, #76]	; 0x4c
   227e2:	9807      	ldr	r0, [sp, #28]
   227e4:	9c29      	ldr	r4, [sp, #164]	; 0xa4
   227e6:	1824      	adds	r4, r4, r0
   227e8:	9410      	str	r4, [sp, #64]	; 0x40
   227ea:	1c60      	adds	r0, r4, #1
   227ec:	2800      	cmp	r0, #0
   227ee:	f340 81ad 	ble.w	22b4c <_dtoa_r+0xc94>
   227f2:	280e      	cmp	r0, #14
   227f4:	bf8c      	ite	hi
   227f6:	2500      	movhi	r5, #0
   227f8:	f005 0501 	andls.w	r5, r5, #1
   227fc:	900d      	str	r0, [sp, #52]	; 0x34
   227fe:	e6b9      	b.n	22574 <_dtoa_r+0x6bc>
   22800:	2401      	movs	r4, #1
   22802:	9413      	str	r4, [sp, #76]	; 0x4c
   22804:	e7ed      	b.n	227e2 <_dtoa_r+0x92a>
   22806:	2400      	movs	r4, #0
   22808:	9413      	str	r4, [sp, #76]	; 0x4c
   2280a:	e6a7      	b.n	2255c <_dtoa_r+0x6a4>
   2280c:	f1ba 0f00 	cmp.w	sl, #0
   22810:	f47f adbf 	bne.w	22392 <_dtoa_r+0x4da>
   22814:	f3cb 0313 	ubfx	r3, fp, #0, #20
   22818:	4657      	mov	r7, sl
   2281a:	2b00      	cmp	r3, #0
   2281c:	f47f adba 	bne.w	22394 <_dtoa_r+0x4dc>
   22820:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
   22824:	ea0b 0303 	and.w	r3, fp, r3
   22828:	461f      	mov	r7, r3
   2282a:	2b00      	cmp	r3, #0
   2282c:	f43f adb2 	beq.w	22394 <_dtoa_r+0x4dc>
   22830:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   22832:	2701      	movs	r7, #1
   22834:	980b      	ldr	r0, [sp, #44]	; 0x2c
   22836:	3301      	adds	r3, #1
   22838:	930e      	str	r3, [sp, #56]	; 0x38
   2283a:	3001      	adds	r0, #1
   2283c:	900b      	str	r0, [sp, #44]	; 0x2c
   2283e:	e5a9      	b.n	22394 <_dtoa_r+0x4dc>
   22840:	4638      	mov	r0, r7
   22842:	f7ef fd67 	bl	12314 <__aeabi_i2d>
   22846:	4652      	mov	r2, sl
   22848:	465b      	mov	r3, fp
   2284a:	f7ef fdc9 	bl	123e0 <__aeabi_dmul>
   2284e:	2300      	movs	r3, #0
   22850:	2200      	movs	r2, #0
   22852:	f2c4 031c 	movt	r3, #16412	; 0x401c
   22856:	f7ef fc11 	bl	1207c <__adddf3>
   2285a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   2285c:	f1a1 7450 	sub.w	r4, r1, #54525952	; 0x3400000
   22860:	4680      	mov	r8, r0
   22862:	46a1      	mov	r9, r4
   22864:	2d00      	cmp	r5, #0
   22866:	f040 80b5 	bne.w	229d4 <_dtoa_r+0xb1c>
   2286a:	2300      	movs	r3, #0
   2286c:	2200      	movs	r2, #0
   2286e:	f2c4 0314 	movt	r3, #16404	; 0x4014
   22872:	4650      	mov	r0, sl
   22874:	4659      	mov	r1, fp
   22876:	f7ef fbff 	bl	12078 <__aeabi_dsub>
   2287a:	4642      	mov	r2, r8
   2287c:	4623      	mov	r3, r4
   2287e:	4682      	mov	sl, r0
   22880:	468b      	mov	fp, r1
   22882:	f002 fa8f 	bl	24da4 <__aeabi_dcmpgt>
   22886:	2800      	cmp	r0, #0
   22888:	f040 813c 	bne.w	22b04 <_dtoa_r+0xc4c>
   2288c:	4642      	mov	r2, r8
   2288e:	4650      	mov	r0, sl
   22890:	4659      	mov	r1, fp
   22892:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   22896:	f002 fa67 	bl	24d68 <__aeabi_dcmplt>
   2289a:	2800      	cmp	r0, #0
   2289c:	f000 808a 	beq.w	229b4 <_dtoa_r+0xafc>
   228a0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   228a2:	9408      	str	r4, [sp, #32]
   228a4:	e651      	b.n	2254a <_dtoa_r+0x692>
   228a6:	9813      	ldr	r0, [sp, #76]	; 0x4c
   228a8:	2800      	cmp	r0, #0
   228aa:	f000 815e 	beq.w	22b6a <_dtoa_r+0xcb2>
   228ae:	2d00      	cmp	r5, #0
   228b0:	dd05      	ble.n	228be <_dtoa_r+0xa06>
   228b2:	4630      	mov	r0, r6
   228b4:	9908      	ldr	r1, [sp, #32]
   228b6:	462a      	mov	r2, r5
   228b8:	f001 f8a0 	bl	239fc <__lshift>
   228bc:	9008      	str	r0, [sp, #32]
   228be:	f8dd 8020 	ldr.w	r8, [sp, #32]
   228c2:	2f00      	cmp	r7, #0
   228c4:	f040 820b 	bne.w	22cde <_dtoa_r+0xe26>
   228c8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   228ca:	2301      	movs	r3, #1
   228cc:	940b      	str	r4, [sp, #44]	; 0x2c
   228ce:	461f      	mov	r7, r3
   228d0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   228d2:	ea0a 0003 	and.w	r0, sl, r3
   228d6:	950a      	str	r5, [sp, #40]	; 0x28
   228d8:	9d08      	ldr	r5, [sp, #32]
   228da:	900e      	str	r0, [sp, #56]	; 0x38
   228dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   228de:	4620      	mov	r0, r4
   228e0:	f7ff fa46 	bl	21d70 <quorem>
   228e4:	4629      	mov	r1, r5
   228e6:	f04f 0b01 	mov.w	fp, #1
   228ea:	9008      	str	r0, [sp, #32]
   228ec:	4620      	mov	r0, r4
   228ee:	f001 f8e3 	bl	23ab8 <__mcmp>
   228f2:	4642      	mov	r2, r8
   228f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   228f6:	4681      	mov	r9, r0
   228f8:	4630      	mov	r0, r6
   228fa:	f001 f8fd 	bl	23af8 <__mdiff>
   228fe:	9a08      	ldr	r2, [sp, #32]
   22900:	3230      	adds	r2, #48	; 0x30
   22902:	920c      	str	r2, [sp, #48]	; 0x30
   22904:	68c3      	ldr	r3, [r0, #12]
   22906:	4682      	mov	sl, r0
   22908:	2b00      	cmp	r3, #0
   2290a:	d03e      	beq.n	2298a <_dtoa_r+0xad2>
   2290c:	4630      	mov	r0, r6
   2290e:	4651      	mov	r1, sl
   22910:	f000 fe88 	bl	23624 <_Bfree>
   22914:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   22916:	ea5b 0303 	orrs.w	r3, fp, r3
   2291a:	d103      	bne.n	22924 <_dtoa_r+0xa6c>
   2291c:	980e      	ldr	r0, [sp, #56]	; 0x38
   2291e:	2800      	cmp	r0, #0
   22920:	f000 8219 	beq.w	22d56 <_dtoa_r+0xe9e>
   22924:	f1b9 0f00 	cmp.w	r9, #0
   22928:	f2c0 81b6 	blt.w	22c98 <_dtoa_r+0xde0>
   2292c:	9828      	ldr	r0, [sp, #160]	; 0xa0
   2292e:	ea59 0000 	orrs.w	r0, r9, r0
   22932:	d103      	bne.n	2293c <_dtoa_r+0xa84>
   22934:	990e      	ldr	r1, [sp, #56]	; 0x38
   22936:	2900      	cmp	r1, #0
   22938:	f000 81ae 	beq.w	22c98 <_dtoa_r+0xde0>
   2293c:	f1bb 0f00 	cmp.w	fp, #0
   22940:	f300 81f2 	bgt.w	22d28 <_dtoa_r+0xe70>
   22944:	980d      	ldr	r0, [sp, #52]	; 0x34
   22946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   22948:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2294a:	4287      	cmp	r7, r0
   2294c:	f803 2b01 	strb.w	r2, [r3], #1
   22950:	4699      	mov	r9, r3
   22952:	930a      	str	r3, [sp, #40]	; 0x28
   22954:	f000 81e2 	beq.w	22d1c <_dtoa_r+0xe64>
   22958:	4621      	mov	r1, r4
   2295a:	220a      	movs	r2, #10
   2295c:	2300      	movs	r3, #0
   2295e:	4630      	mov	r0, r6
   22960:	f000 fe7c 	bl	2365c <__multadd>
   22964:	4545      	cmp	r5, r8
   22966:	4604      	mov	r4, r0
   22968:	d02a      	beq.n	229c0 <_dtoa_r+0xb08>
   2296a:	4629      	mov	r1, r5
   2296c:	220a      	movs	r2, #10
   2296e:	2300      	movs	r3, #0
   22970:	4630      	mov	r0, r6
   22972:	f000 fe73 	bl	2365c <__multadd>
   22976:	4641      	mov	r1, r8
   22978:	220a      	movs	r2, #10
   2297a:	2300      	movs	r3, #0
   2297c:	3701      	adds	r7, #1
   2297e:	4605      	mov	r5, r0
   22980:	4630      	mov	r0, r6
   22982:	f000 fe6b 	bl	2365c <__multadd>
   22986:	4680      	mov	r8, r0
   22988:	e7a8      	b.n	228dc <_dtoa_r+0xa24>
   2298a:	4620      	mov	r0, r4
   2298c:	4651      	mov	r1, sl
   2298e:	f001 f893 	bl	23ab8 <__mcmp>
   22992:	4683      	mov	fp, r0
   22994:	e7ba      	b.n	2290c <_dtoa_r+0xa54>
   22996:	4630      	mov	r0, r6
   22998:	4629      	mov	r1, r5
   2299a:	f000 fe43 	bl	23624 <_Bfree>
   2299e:	e560      	b.n	22462 <_dtoa_r+0x5aa>
   229a0:	231c      	movs	r3, #28
   229a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   229a4:	18ed      	adds	r5, r5, r3
   229a6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   229a8:	18d2      	adds	r2, r2, r3
   229aa:	920e      	str	r2, [sp, #56]	; 0x38
   229ac:	18c0      	adds	r0, r0, r3
   229ae:	900b      	str	r0, [sp, #44]	; 0x2c
   229b0:	e509      	b.n	223c6 <_dtoa_r+0x50e>
   229b2:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
   229b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   229b8:	4682      	mov	sl, r0
   229ba:	468b      	mov	fp, r1
   229bc:	f7ff bbd2 	b.w	22164 <_dtoa_r+0x2ac>
   229c0:	4629      	mov	r1, r5
   229c2:	4630      	mov	r0, r6
   229c4:	220a      	movs	r2, #10
   229c6:	2300      	movs	r3, #0
   229c8:	f000 fe48 	bl	2365c <__multadd>
   229cc:	3701      	adds	r7, #1
   229ce:	4605      	mov	r5, r0
   229d0:	4680      	mov	r8, r0
   229d2:	e783      	b.n	228dc <_dtoa_r+0xa24>
   229d4:	9c07      	ldr	r4, [sp, #28]
   229d6:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
   229da:	941a      	str	r4, [sp, #104]	; 0x68
   229dc:	e661      	b.n	226a2 <_dtoa_r+0x7ea>
   229de:	9d07      	ldr	r5, [sp, #28]
   229e0:	426c      	negs	r4, r5
   229e2:	2c00      	cmp	r4, #0
   229e4:	f000 8110 	beq.w	22c08 <_dtoa_r+0xd50>
   229e8:	f004 020f 	and.w	r2, r4, #15
   229ec:	f24c 1370 	movw	r3, #49520	; 0xc170
   229f0:	f2c0 0302 	movt	r3, #2
   229f4:	4650      	mov	r0, sl
   229f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   229fa:	4659      	mov	r1, fp
   229fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   22a00:	f7ef fcee 	bl	123e0 <__aeabi_dmul>
   22a04:	1124      	asrs	r4, r4, #4
   22a06:	4682      	mov	sl, r0
   22a08:	468b      	mov	fp, r1
   22a0a:	f000 80fd 	beq.w	22c08 <_dtoa_r+0xd50>
   22a0e:	f24c 2560 	movw	r5, #49760	; 0xc260
   22a12:	2702      	movs	r7, #2
   22a14:	f2c0 0502 	movt	r5, #2
   22a18:	07e3      	lsls	r3, r4, #31
   22a1a:	4650      	mov	r0, sl
   22a1c:	4659      	mov	r1, fp
   22a1e:	d506      	bpl.n	22a2e <_dtoa_r+0xb76>
   22a20:	e9d5 2300 	ldrd	r2, r3, [r5]
   22a24:	3701      	adds	r7, #1
   22a26:	f7ef fcdb 	bl	123e0 <__aeabi_dmul>
   22a2a:	4682      	mov	sl, r0
   22a2c:	468b      	mov	fp, r1
   22a2e:	3508      	adds	r5, #8
   22a30:	1064      	asrs	r4, r4, #1
   22a32:	d1f1      	bne.n	22a18 <_dtoa_r+0xb60>
   22a34:	e5f8      	b.n	22628 <_dtoa_r+0x770>
   22a36:	f10c 35ff 	add.w	r5, ip, #4294967295
   22a3a:	f24c 1170 	movw	r1, #49520	; 0xc170
   22a3e:	f2c0 0102 	movt	r1, #2
   22a42:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   22a44:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   22a48:	464b      	mov	r3, r9
   22a4a:	4642      	mov	r2, r8
   22a4c:	f8cd c00c 	str.w	ip, [sp, #12]
   22a50:	e9d1 0100 	ldrd	r0, r1, [r1]
   22a54:	9516      	str	r5, [sp, #88]	; 0x58
   22a56:	9411      	str	r4, [sp, #68]	; 0x44
   22a58:	f7ef fcc2 	bl	123e0 <__aeabi_dmul>
   22a5c:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
   22a60:	4659      	mov	r1, fp
   22a62:	4650      	mov	r0, sl
   22a64:	f002 f9a8 	bl	24db8 <__aeabi_d2iz>
   22a68:	4604      	mov	r4, r0
   22a6a:	f7ef fc53 	bl	12314 <__aeabi_i2d>
   22a6e:	460b      	mov	r3, r1
   22a70:	4602      	mov	r2, r0
   22a72:	4659      	mov	r1, fp
   22a74:	4650      	mov	r0, sl
   22a76:	f7ef faff 	bl	12078 <__aeabi_dsub>
   22a7a:	9d11      	ldr	r5, [sp, #68]	; 0x44
   22a7c:	f104 0330 	add.w	r3, r4, #48	; 0x30
   22a80:	f805 3b01 	strb.w	r3, [r5], #1
   22a84:	46a9      	mov	r9, r5
   22a86:	f8dd c00c 	ldr.w	ip, [sp, #12]
   22a8a:	9511      	str	r5, [sp, #68]	; 0x44
   22a8c:	f1bc 0f01 	cmp.w	ip, #1
   22a90:	4682      	mov	sl, r0
   22a92:	468b      	mov	fp, r1
   22a94:	d021      	beq.n	22ada <_dtoa_r+0xc22>
   22a96:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   22a98:	1e6f      	subs	r7, r5, #1
   22a9a:	462c      	mov	r4, r5
   22a9c:	4467      	add	r7, ip
   22a9e:	2300      	movs	r3, #0
   22aa0:	2200      	movs	r2, #0
   22aa2:	f2c4 0324 	movt	r3, #16420	; 0x4024
   22aa6:	f7ef fc9b 	bl	123e0 <__aeabi_dmul>
   22aaa:	4689      	mov	r9, r1
   22aac:	4680      	mov	r8, r0
   22aae:	f002 f983 	bl	24db8 <__aeabi_d2iz>
   22ab2:	4605      	mov	r5, r0
   22ab4:	f7ef fc2e 	bl	12314 <__aeabi_i2d>
   22ab8:	3530      	adds	r5, #48	; 0x30
   22aba:	4602      	mov	r2, r0
   22abc:	460b      	mov	r3, r1
   22abe:	4640      	mov	r0, r8
   22ac0:	4649      	mov	r1, r9
   22ac2:	f7ef fad9 	bl	12078 <__aeabi_dsub>
   22ac6:	f804 5f01 	strb.w	r5, [r4, #1]!
   22aca:	42bc      	cmp	r4, r7
   22acc:	d1e7      	bne.n	22a9e <_dtoa_r+0xbe6>
   22ace:	9c11      	ldr	r4, [sp, #68]	; 0x44
   22ad0:	4682      	mov	sl, r0
   22ad2:	9d16      	ldr	r5, [sp, #88]	; 0x58
   22ad4:	468b      	mov	fp, r1
   22ad6:	eb04 0905 	add.w	r9, r4, r5
   22ada:	2300      	movs	r3, #0
   22adc:	2200      	movs	r2, #0
   22ade:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
   22ae2:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
   22ae6:	f7ef fac9 	bl	1207c <__adddf3>
   22aea:	4602      	mov	r2, r0
   22aec:	460b      	mov	r3, r1
   22aee:	4650      	mov	r0, sl
   22af0:	4659      	mov	r1, fp
   22af2:	f002 f957 	bl	24da4 <__aeabi_dcmpgt>
   22af6:	2800      	cmp	r0, #0
   22af8:	f000 8092 	beq.w	22c20 <_dtoa_r+0xd68>
   22afc:	f819 4c01 	ldrb.w	r4, [r9, #-1]
   22b00:	f7ff bbdf 	b.w	222c2 <_dtoa_r+0x40a>
   22b04:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   22b06:	9408      	str	r4, [sp, #32]
   22b08:	e491      	b.n	2242e <_dtoa_r+0x576>
   22b0a:	6923      	ldr	r3, [r4, #16]
   22b0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   22b10:	6918      	ldr	r0, [r3, #16]
   22b12:	f000 fe2f 	bl	23774 <__hi0bits>
   22b16:	f1c0 0320 	rsb	r3, r0, #32
   22b1a:	e440      	b.n	2239e <_dtoa_r+0x4e6>
   22b1c:	980c      	ldr	r0, [sp, #48]	; 0x30
   22b1e:	4621      	mov	r1, r4
   22b20:	f000 ffca 	bl	23ab8 <__mcmp>
   22b24:	2800      	cmp	r0, #0
   22b26:	f6bf ac63 	bge.w	223f0 <_dtoa_r+0x538>
   22b2a:	990c      	ldr	r1, [sp, #48]	; 0x30
   22b2c:	4630      	mov	r0, r6
   22b2e:	220a      	movs	r2, #10
   22b30:	2300      	movs	r3, #0
   22b32:	f000 fd93 	bl	2365c <__multadd>
   22b36:	9913      	ldr	r1, [sp, #76]	; 0x4c
   22b38:	900c      	str	r0, [sp, #48]	; 0x30
   22b3a:	9807      	ldr	r0, [sp, #28]
   22b3c:	3801      	subs	r0, #1
   22b3e:	9007      	str	r0, [sp, #28]
   22b40:	2900      	cmp	r1, #0
   22b42:	f040 8119 	bne.w	22d78 <_dtoa_r+0xec0>
   22b46:	9b10      	ldr	r3, [sp, #64]	; 0x40
   22b48:	930d      	str	r3, [sp, #52]	; 0x34
   22b4a:	e451      	b.n	223f0 <_dtoa_r+0x538>
   22b4c:	280e      	cmp	r0, #14
   22b4e:	900d      	str	r0, [sp, #52]	; 0x34
   22b50:	bf8c      	ite	hi
   22b52:	2300      	movhi	r3, #0
   22b54:	2301      	movls	r3, #1
   22b56:	6a74      	ldr	r4, [r6, #36]	; 0x24
   22b58:	401d      	ands	r5, r3
   22b5a:	2300      	movs	r3, #0
   22b5c:	6063      	str	r3, [r4, #4]
   22b5e:	e518      	b.n	22592 <_dtoa_r+0x6da>
   22b60:	2301      	movs	r3, #1
   22b62:	9310      	str	r3, [sp, #64]	; 0x40
   22b64:	930d      	str	r3, [sp, #52]	; 0x34
   22b66:	9329      	str	r3, [sp, #164]	; 0xa4
   22b68:	e7f5      	b.n	22b56 <_dtoa_r+0xc9e>
   22b6a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   22b6c:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   22b70:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   22b74:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   22b78:	e002      	b.n	22b80 <_dtoa_r+0xcc8>
   22b7a:	f000 fd6f 	bl	2365c <__multadd>
   22b7e:	4680      	mov	r8, r0
   22b80:	4621      	mov	r1, r4
   22b82:	4640      	mov	r0, r8
   22b84:	f7ff f8f4 	bl	21d70 <quorem>
   22b88:	220a      	movs	r2, #10
   22b8a:	2300      	movs	r3, #0
   22b8c:	4641      	mov	r1, r8
   22b8e:	f100 0730 	add.w	r7, r0, #48	; 0x30
   22b92:	f809 7005 	strb.w	r7, [r9, r5]
   22b96:	3501      	adds	r5, #1
   22b98:	4630      	mov	r0, r6
   22b9a:	45aa      	cmp	sl, r5
   22b9c:	dced      	bgt.n	22b7a <_dtoa_r+0xcc2>
   22b9e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   22ba0:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   22ba4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
   22ba8:	2d01      	cmp	r5, #1
   22baa:	bfac      	ite	ge
   22bac:	44a9      	addge	r9, r5
   22bae:	f109 0901 	addlt.w	r9, r9, #1
   22bb2:	461d      	mov	r5, r3
   22bb4:	2201      	movs	r2, #1
   22bb6:	990c      	ldr	r1, [sp, #48]	; 0x30
   22bb8:	4630      	mov	r0, r6
   22bba:	f000 ff1f 	bl	239fc <__lshift>
   22bbe:	4621      	mov	r1, r4
   22bc0:	900c      	str	r0, [sp, #48]	; 0x30
   22bc2:	f000 ff79 	bl	23ab8 <__mcmp>
   22bc6:	2800      	cmp	r0, #0
   22bc8:	dd14      	ble.n	22bf4 <_dtoa_r+0xd3c>
   22bca:	f819 2c01 	ldrb.w	r2, [r9, #-1]
   22bce:	980f      	ldr	r0, [sp, #60]	; 0x3c
   22bd0:	464b      	mov	r3, r9
   22bd2:	1c41      	adds	r1, r0, #1
   22bd4:	e002      	b.n	22bdc <_dtoa_r+0xd24>
   22bd6:	f813 2c02 	ldrb.w	r2, [r3, #-2]
   22bda:	3b01      	subs	r3, #1
   22bdc:	2a39      	cmp	r2, #57	; 0x39
   22bde:	4699      	mov	r9, r3
   22be0:	d178      	bne.n	22cd4 <_dtoa_r+0xe1c>
   22be2:	428b      	cmp	r3, r1
   22be4:	d1f7      	bne.n	22bd6 <_dtoa_r+0xd1e>
   22be6:	9807      	ldr	r0, [sp, #28]
   22be8:	2331      	movs	r3, #49	; 0x31
   22bea:	f801 3c01 	strb.w	r3, [r1, #-1]
   22bee:	3001      	adds	r0, #1
   22bf0:	9007      	str	r0, [sp, #28]
   22bf2:	e425      	b.n	22440 <_dtoa_r+0x588>
   22bf4:	d101      	bne.n	22bfa <_dtoa_r+0xd42>
   22bf6:	07fb      	lsls	r3, r7, #31
   22bf8:	d4e7      	bmi.n	22bca <_dtoa_r+0xd12>
   22bfa:	464b      	mov	r3, r9
   22bfc:	4699      	mov	r9, r3
   22bfe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   22c02:	2a30      	cmp	r2, #48	; 0x30
   22c04:	d0fa      	beq.n	22bfc <_dtoa_r+0xd44>
   22c06:	e41b      	b.n	22440 <_dtoa_r+0x588>
   22c08:	2702      	movs	r7, #2
   22c0a:	e50d      	b.n	22628 <_dtoa_r+0x770>
   22c0c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   22c0e:	e42c      	b.n	2246a <_dtoa_r+0x5b2>
   22c10:	4630      	mov	r0, r6
   22c12:	990c      	ldr	r1, [sp, #48]	; 0x30
   22c14:	9a12      	ldr	r2, [sp, #72]	; 0x48
   22c16:	f000 fea1 	bl	2395c <__pow5mult>
   22c1a:	900c      	str	r0, [sp, #48]	; 0x30
   22c1c:	f7ff bba7 	b.w	2236e <_dtoa_r+0x4b6>
   22c20:	2100      	movs	r1, #0
   22c22:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
   22c26:	2000      	movs	r0, #0
   22c28:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
   22c2c:	f7ef fa24 	bl	12078 <__aeabi_dsub>
   22c30:	4602      	mov	r2, r0
   22c32:	460b      	mov	r3, r1
   22c34:	4650      	mov	r0, sl
   22c36:	4659      	mov	r1, fp
   22c38:	f002 f896 	bl	24d68 <__aeabi_dcmplt>
   22c3c:	2800      	cmp	r0, #0
   22c3e:	f43f aeb9 	beq.w	229b4 <_dtoa_r+0xafc>
   22c42:	464b      	mov	r3, r9
   22c44:	4699      	mov	r9, r3
   22c46:	3b01      	subs	r3, #1
   22c48:	f819 2c01 	ldrb.w	r2, [r9, #-1]
   22c4c:	2a30      	cmp	r2, #48	; 0x30
   22c4e:	d0f9      	beq.n	22c44 <_dtoa_r+0xd8c>
   22c50:	9c1a      	ldr	r4, [sp, #104]	; 0x68
   22c52:	9407      	str	r4, [sp, #28]
   22c54:	e409      	b.n	2246a <_dtoa_r+0x5b2>
   22c56:	4630      	mov	r0, r6
   22c58:	990c      	ldr	r1, [sp, #48]	; 0x30
   22c5a:	f000 fe7f 	bl	2395c <__pow5mult>
   22c5e:	900c      	str	r0, [sp, #48]	; 0x30
   22c60:	f7ff bb85 	b.w	2236e <_dtoa_r+0x4b6>
   22c64:	2400      	movs	r4, #0
   22c66:	9408      	str	r4, [sp, #32]
   22c68:	e46f      	b.n	2254a <_dtoa_r+0x692>
   22c6a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   22c6c:	2c00      	cmp	r4, #0
   22c6e:	d04e      	beq.n	22d0e <_dtoa_r+0xe56>
   22c70:	f503 6386 	add.w	r3, r3, #1072	; 0x430
   22c74:	9c12      	ldr	r4, [sp, #72]	; 0x48
   22c76:	3303      	adds	r3, #3
   22c78:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   22c7a:	e445      	b.n	22508 <_dtoa_r+0x650>
   22c7c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   22c7e:	3401      	adds	r4, #1
   22c80:	f803 4c01 	strb.w	r4, [r3, #-1]
   22c84:	9507      	str	r5, [sp, #28]
   22c86:	f7ff bbf0 	b.w	2246a <_dtoa_r+0x5b2>
   22c8a:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
   22c8c:	f7ff bb19 	b.w	222c2 <_dtoa_r+0x40a>
   22c90:	980e      	ldr	r0, [sp, #56]	; 0x38
   22c92:	2300      	movs	r3, #0
   22c94:	1b45      	subs	r5, r0, r5
   22c96:	e437      	b.n	22508 <_dtoa_r+0x650>
   22c98:	f1bb 0f00 	cmp.w	fp, #0
   22c9c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   22c9e:	940c      	str	r4, [sp, #48]	; 0x30
   22ca0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   22ca2:	dd0f      	ble.n	22cc4 <_dtoa_r+0xe0c>
   22ca4:	2201      	movs	r2, #1
   22ca6:	990c      	ldr	r1, [sp, #48]	; 0x30
   22ca8:	4630      	mov	r0, r6
   22caa:	f000 fea7 	bl	239fc <__lshift>
   22cae:	4621      	mov	r1, r4
   22cb0:	900c      	str	r0, [sp, #48]	; 0x30
   22cb2:	f000 ff01 	bl	23ab8 <__mcmp>
   22cb6:	2800      	cmp	r0, #0
   22cb8:	dd56      	ble.n	22d68 <_dtoa_r+0xeb0>
   22cba:	2f39      	cmp	r7, #57	; 0x39
   22cbc:	d042      	beq.n	22d44 <_dtoa_r+0xe8c>
   22cbe:	9b08      	ldr	r3, [sp, #32]
   22cc0:	f103 0731 	add.w	r7, r3, #49	; 0x31
   22cc4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   22cc8:	f8cd 8020 	str.w	r8, [sp, #32]
   22ccc:	f809 7b01 	strb.w	r7, [r9], #1
   22cd0:	f7ff bbb6 	b.w	22440 <_dtoa_r+0x588>
   22cd4:	3201      	adds	r2, #1
   22cd6:	f803 2c01 	strb.w	r2, [r3, #-1]
   22cda:	f7ff bbb1 	b.w	22440 <_dtoa_r+0x588>
   22cde:	9d08      	ldr	r5, [sp, #32]
   22ce0:	4630      	mov	r0, r6
   22ce2:	6869      	ldr	r1, [r5, #4]
   22ce4:	f000 fc68 	bl	235b8 <_Balloc>
   22ce8:	9b08      	ldr	r3, [sp, #32]
   22cea:	f103 010c 	add.w	r1, r3, #12
   22cee:	4605      	mov	r5, r0
   22cf0:	9808      	ldr	r0, [sp, #32]
   22cf2:	6902      	ldr	r2, [r0, #16]
   22cf4:	f105 000c 	add.w	r0, r5, #12
   22cf8:	3202      	adds	r2, #2
   22cfa:	0092      	lsls	r2, r2, #2
   22cfc:	f7fc fcb4 	bl	1f668 <memcpy>
   22d00:	4630      	mov	r0, r6
   22d02:	4629      	mov	r1, r5
   22d04:	2201      	movs	r2, #1
   22d06:	f000 fe79 	bl	239fc <__lshift>
   22d0a:	4680      	mov	r8, r0
   22d0c:	e5dc      	b.n	228c8 <_dtoa_r+0xa10>
   22d0e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   22d10:	9c12      	ldr	r4, [sp, #72]	; 0x48
   22d12:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   22d14:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   22d18:	f7ff bbf6 	b.w	22508 <_dtoa_r+0x650>
   22d1c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   22d1e:	f8cd 8020 	str.w	r8, [sp, #32]
   22d22:	940c      	str	r4, [sp, #48]	; 0x30
   22d24:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   22d26:	e745      	b.n	22bb4 <_dtoa_r+0xcfc>
   22d28:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   22d2a:	940c      	str	r4, [sp, #48]	; 0x30
   22d2c:	2f39      	cmp	r7, #57	; 0x39
   22d2e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   22d30:	d008      	beq.n	22d44 <_dtoa_r+0xe8c>
   22d32:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   22d36:	3701      	adds	r7, #1
   22d38:	f8cd 8020 	str.w	r8, [sp, #32]
   22d3c:	f809 7b01 	strb.w	r7, [r9], #1
   22d40:	f7ff bb7e 	b.w	22440 <_dtoa_r+0x588>
   22d44:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   22d48:	2339      	movs	r3, #57	; 0x39
   22d4a:	f8cd 8020 	str.w	r8, [sp, #32]
   22d4e:	461a      	mov	r2, r3
   22d50:	f809 3b01 	strb.w	r3, [r9], #1
   22d54:	e73b      	b.n	22bce <_dtoa_r+0xd16>
   22d56:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   22d58:	940c      	str	r4, [sp, #48]	; 0x30
   22d5a:	2f39      	cmp	r7, #57	; 0x39
   22d5c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   22d5e:	d0f1      	beq.n	22d44 <_dtoa_r+0xe8c>
   22d60:	f1b9 0f00 	cmp.w	r9, #0
   22d64:	dcab      	bgt.n	22cbe <_dtoa_r+0xe06>
   22d66:	e7ad      	b.n	22cc4 <_dtoa_r+0xe0c>
   22d68:	d1ac      	bne.n	22cc4 <_dtoa_r+0xe0c>
   22d6a:	07fa      	lsls	r2, r7, #31
   22d6c:	d5aa      	bpl.n	22cc4 <_dtoa_r+0xe0c>
   22d6e:	e7a4      	b.n	22cba <_dtoa_r+0xe02>
   22d70:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   22d72:	9507      	str	r5, [sp, #28]
   22d74:	f7ff bb79 	b.w	2246a <_dtoa_r+0x5b2>
   22d78:	220a      	movs	r2, #10
   22d7a:	4630      	mov	r0, r6
   22d7c:	9908      	ldr	r1, [sp, #32]
   22d7e:	2300      	movs	r3, #0
   22d80:	f000 fc6c 	bl	2365c <__multadd>
   22d84:	9a10      	ldr	r2, [sp, #64]	; 0x40
   22d86:	920d      	str	r2, [sp, #52]	; 0x34
   22d88:	9008      	str	r0, [sp, #32]
   22d8a:	f7ff bb31 	b.w	223f0 <_dtoa_r+0x538>
   22d8e:	f43f ab1a 	beq.w	223c6 <_dtoa_r+0x50e>
   22d92:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
   22d96:	e604      	b.n	229a2 <_dtoa_r+0xaea>
   22d98:	2501      	movs	r5, #1
   22d9a:	f7ff b973 	b.w	22084 <_dtoa_r+0x1cc>
   22d9e:	bf00      	nop

00022da0 <_fflush_r>:
   22da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22da4:	460c      	mov	r4, r1
   22da6:	690e      	ldr	r6, [r1, #16]
   22da8:	4680      	mov	r8, r0
   22daa:	2e00      	cmp	r6, #0
   22dac:	d049      	beq.n	22e42 <_fflush_r+0xa2>
   22dae:	b118      	cbz	r0, 22db8 <_fflush_r+0x18>
   22db0:	6983      	ldr	r3, [r0, #24]
   22db2:	2b00      	cmp	r3, #0
   22db4:	f000 8089 	beq.w	22eca <_fflush_r+0x12a>
   22db8:	f24c 1338 	movw	r3, #49464	; 0xc138
   22dbc:	f2c0 0302 	movt	r3, #2
   22dc0:	429c      	cmp	r4, r3
   22dc2:	bf08      	it	eq
   22dc4:	f8d8 4004 	ldreq.w	r4, [r8, #4]
   22dc8:	d010      	beq.n	22dec <_fflush_r+0x4c>
   22dca:	f24c 1318 	movw	r3, #49432	; 0xc118
   22dce:	f2c0 0302 	movt	r3, #2
   22dd2:	429c      	cmp	r4, r3
   22dd4:	bf08      	it	eq
   22dd6:	f8d8 4008 	ldreq.w	r4, [r8, #8]
   22dda:	d007      	beq.n	22dec <_fflush_r+0x4c>
   22ddc:	f24c 03f8 	movw	r3, #49400	; 0xc0f8
   22de0:	f2c0 0302 	movt	r3, #2
   22de4:	429c      	cmp	r4, r3
   22de6:	bf08      	it	eq
   22de8:	f8d8 400c 	ldreq.w	r4, [r8, #12]
   22dec:	89a6      	ldrh	r6, [r4, #12]
   22dee:	2e00      	cmp	r6, #0
   22df0:	d027      	beq.n	22e42 <_fflush_r+0xa2>
   22df2:	b233      	sxth	r3, r6
   22df4:	f013 0008 	ands.w	r0, r3, #8
   22df8:	d026      	beq.n	22e48 <_fflush_r+0xa8>
   22dfa:	6926      	ldr	r6, [r4, #16]
   22dfc:	b30e      	cbz	r6, 22e42 <_fflush_r+0xa2>
   22dfe:	079b      	lsls	r3, r3, #30
   22e00:	6825      	ldr	r5, [r4, #0]
   22e02:	6026      	str	r6, [r4, #0]
   22e04:	bf08      	it	eq
   22e06:	6963      	ldreq	r3, [r4, #20]
   22e08:	ebc6 0505 	rsb	r5, r6, r5
   22e0c:	bf18      	it	ne
   22e0e:	2300      	movne	r3, #0
   22e10:	2d00      	cmp	r5, #0
   22e12:	60a3      	str	r3, [r4, #8]
   22e14:	dc02      	bgt.n	22e1c <_fflush_r+0x7c>
   22e16:	e097      	b.n	22f48 <_fflush_r+0x1a8>
   22e18:	2d00      	cmp	r5, #0
   22e1a:	dd6f      	ble.n	22efc <_fflush_r+0x15c>
   22e1c:	4632      	mov	r2, r6
   22e1e:	462b      	mov	r3, r5
   22e20:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   22e22:	4640      	mov	r0, r8
   22e24:	6a21      	ldr	r1, [r4, #32]
   22e26:	47b8      	blx	r7
   22e28:	2800      	cmp	r0, #0
   22e2a:	ebc0 0505 	rsb	r5, r0, r5
   22e2e:	4406      	add	r6, r0
   22e30:	dcf2      	bgt.n	22e18 <_fflush_r+0x78>
   22e32:	89a3      	ldrh	r3, [r4, #12]
   22e34:	f04f 30ff 	mov.w	r0, #4294967295
   22e38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22e3c:	81a3      	strh	r3, [r4, #12]
   22e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22e42:	4630      	mov	r0, r6
   22e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22e48:	6862      	ldr	r2, [r4, #4]
   22e4a:	f446 6300 	orr.w	r3, r6, #2048	; 0x800
   22e4e:	81a3      	strh	r3, [r4, #12]
   22e50:	2a00      	cmp	r2, #0
   22e52:	dd56      	ble.n	22f02 <_fflush_r+0x162>
   22e54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   22e56:	2e00      	cmp	r6, #0
   22e58:	d0f3      	beq.n	22e42 <_fflush_r+0xa2>
   22e5a:	b29b      	uxth	r3, r3
   22e5c:	2200      	movs	r2, #0
   22e5e:	f413 5780 	ands.w	r7, r3, #4096	; 0x1000
   22e62:	f8d8 5000 	ldr.w	r5, [r8]
   22e66:	f8c8 2000 	str.w	r2, [r8]
   22e6a:	bf18      	it	ne
   22e6c:	6d62      	ldrne	r2, [r4, #84]	; 0x54
   22e6e:	d02f      	beq.n	22ed0 <_fflush_r+0x130>
   22e70:	0759      	lsls	r1, r3, #29
   22e72:	d505      	bpl.n	22e80 <_fflush_r+0xe0>
   22e74:	6861      	ldr	r1, [r4, #4]
   22e76:	6b63      	ldr	r3, [r4, #52]	; 0x34
   22e78:	1a52      	subs	r2, r2, r1
   22e7a:	b10b      	cbz	r3, 22e80 <_fflush_r+0xe0>
   22e7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
   22e7e:	1ad2      	subs	r2, r2, r3
   22e80:	2300      	movs	r3, #0
   22e82:	4640      	mov	r0, r8
   22e84:	6a21      	ldr	r1, [r4, #32]
   22e86:	47b0      	blx	r6
   22e88:	1c43      	adds	r3, r0, #1
   22e8a:	d02c      	beq.n	22ee6 <_fflush_r+0x146>
   22e8c:	89a3      	ldrh	r3, [r4, #12]
   22e8e:	2100      	movs	r1, #0
   22e90:	6922      	ldr	r2, [r4, #16]
   22e92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   22e96:	6061      	str	r1, [r4, #4]
   22e98:	041b      	lsls	r3, r3, #16
   22e9a:	6022      	str	r2, [r4, #0]
   22e9c:	0c1b      	lsrs	r3, r3, #16
   22e9e:	81a3      	strh	r3, [r4, #12]
   22ea0:	04d9      	lsls	r1, r3, #19
   22ea2:	d502      	bpl.n	22eaa <_fflush_r+0x10a>
   22ea4:	1c42      	adds	r2, r0, #1
   22ea6:	d031      	beq.n	22f0c <_fflush_r+0x16c>
   22ea8:	6560      	str	r0, [r4, #84]	; 0x54
   22eaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
   22eac:	f8c8 5000 	str.w	r5, [r8]
   22eb0:	2900      	cmp	r1, #0
   22eb2:	d031      	beq.n	22f18 <_fflush_r+0x178>
   22eb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
   22eb8:	4299      	cmp	r1, r3
   22eba:	d002      	beq.n	22ec2 <_fflush_r+0x122>
   22ebc:	4640      	mov	r0, r8
   22ebe:	f000 f99d 	bl	231fc <_free_r>
   22ec2:	2000      	movs	r0, #0
   22ec4:	6360      	str	r0, [r4, #52]	; 0x34
   22ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22eca:	f000 f8ab 	bl	23024 <__sinit>
   22ece:	e773      	b.n	22db8 <_fflush_r+0x18>
   22ed0:	463a      	mov	r2, r7
   22ed2:	2301      	movs	r3, #1
   22ed4:	4640      	mov	r0, r8
   22ed6:	6a21      	ldr	r1, [r4, #32]
   22ed8:	47b0      	blx	r6
   22eda:	1c43      	adds	r3, r0, #1
   22edc:	4602      	mov	r2, r0
   22ede:	d01e      	beq.n	22f1e <_fflush_r+0x17e>
   22ee0:	89a3      	ldrh	r3, [r4, #12]
   22ee2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   22ee4:	e7c4      	b.n	22e70 <_fflush_r+0xd0>
   22ee6:	f8d8 3000 	ldr.w	r3, [r8]
   22eea:	2b1d      	cmp	r3, #29
   22eec:	d8a1      	bhi.n	22e32 <_fflush_r+0x92>
   22eee:	f44f 7201 	mov.w	r2, #516	; 0x204
   22ef2:	f2c8 0200 	movt	r2, #32768	; 0x8000
   22ef6:	409a      	lsls	r2, r3
   22ef8:	d4c8      	bmi.n	22e8c <_fflush_r+0xec>
   22efa:	e79a      	b.n	22e32 <_fflush_r+0x92>
   22efc:	2000      	movs	r0, #0
   22efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22f02:	6c22      	ldr	r2, [r4, #64]	; 0x40
   22f04:	2a00      	cmp	r2, #0
   22f06:	dca5      	bgt.n	22e54 <_fflush_r+0xb4>
   22f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22f0c:	f8d8 3000 	ldr.w	r3, [r8]
   22f10:	2b00      	cmp	r3, #0
   22f12:	d1ca      	bne.n	22eaa <_fflush_r+0x10a>
   22f14:	6560      	str	r0, [r4, #84]	; 0x54
   22f16:	e7c8      	b.n	22eaa <_fflush_r+0x10a>
   22f18:	4608      	mov	r0, r1
   22f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22f1e:	f8d8 3000 	ldr.w	r3, [r8]
   22f22:	2b00      	cmp	r3, #0
   22f24:	d0dc      	beq.n	22ee0 <_fflush_r+0x140>
   22f26:	f1a3 0c1d 	sub.w	ip, r3, #29
   22f2a:	f1dc 0100 	rsbs	r1, ip, #0
   22f2e:	eb41 010c 	adc.w	r1, r1, ip
   22f32:	2b16      	cmp	r3, #22
   22f34:	bf14      	ite	ne
   22f36:	460b      	movne	r3, r1
   22f38:	f041 0301 	orreq.w	r3, r1, #1
   22f3c:	b133      	cbz	r3, 22f4c <_fflush_r+0x1ac>
   22f3e:	f8c8 5000 	str.w	r5, [r8]
   22f42:	4638      	mov	r0, r7
   22f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22f48:	2000      	movs	r0, #0
   22f4a:	e7dd      	b.n	22f08 <_fflush_r+0x168>
   22f4c:	89a3      	ldrh	r3, [r4, #12]
   22f4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22f52:	81a3      	strh	r3, [r4, #12]
   22f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022f58 <fflush>:
   22f58:	b138      	cbz	r0, 22f6a <fflush+0x12>
   22f5a:	f240 0328 	movw	r3, #40	; 0x28
   22f5e:	4601      	mov	r1, r0
   22f60:	f2c1 0300 	movt	r3, #4096	; 0x1000
   22f64:	6818      	ldr	r0, [r3, #0]
   22f66:	f7ff bf1b 	b.w	22da0 <_fflush_r>
   22f6a:	f64b 7378 	movw	r3, #49016	; 0xbf78
   22f6e:	f642 51a1 	movw	r1, #11681	; 0x2da1
   22f72:	f2c0 0302 	movt	r3, #2
   22f76:	f2c0 0102 	movt	r1, #2
   22f7a:	6818      	ldr	r0, [r3, #0]
   22f7c:	f000 ba2c 	b.w	233d8 <_fwalk_reent>

00022f80 <__fp_lock>:
   22f80:	2000      	movs	r0, #0
   22f82:	4770      	bx	lr

00022f84 <__fp_unlock>:
   22f84:	2000      	movs	r0, #0
   22f86:	4770      	bx	lr

00022f88 <_cleanup_r>:
   22f88:	f644 31f1 	movw	r1, #19441	; 0x4bf1
   22f8c:	f2c0 0102 	movt	r1, #2
   22f90:	f000 b9fc 	b.w	2338c <_fwalk>

00022f94 <std.isra.0>:
   22f94:	b510      	push	{r4, lr}
   22f96:	4604      	mov	r4, r0
   22f98:	2300      	movs	r3, #0
   22f9a:	305c      	adds	r0, #92	; 0x5c
   22f9c:	81a1      	strh	r1, [r4, #12]
   22f9e:	4619      	mov	r1, r3
   22fa0:	81e2      	strh	r2, [r4, #14]
   22fa2:	2208      	movs	r2, #8
   22fa4:	6023      	str	r3, [r4, #0]
   22fa6:	6063      	str	r3, [r4, #4]
   22fa8:	60a3      	str	r3, [r4, #8]
   22faa:	6663      	str	r3, [r4, #100]	; 0x64
   22fac:	6123      	str	r3, [r4, #16]
   22fae:	6163      	str	r3, [r4, #20]
   22fb0:	61a3      	str	r3, [r4, #24]
   22fb2:	f7fc fc2f 	bl	1f814 <memset>
   22fb6:	f643 60c9 	movw	r0, #16073	; 0x3ec9
   22fba:	f643 61f1 	movw	r1, #16113	; 0x3ef1
   22fbe:	f643 7229 	movw	r2, #16169	; 0x3f29
   22fc2:	f643 734d 	movw	r3, #16205	; 0x3f4d
   22fc6:	f2c0 0002 	movt	r0, #2
   22fca:	f2c0 0102 	movt	r1, #2
   22fce:	f2c0 0202 	movt	r2, #2
   22fd2:	f2c0 0302 	movt	r3, #2
   22fd6:	6224      	str	r4, [r4, #32]
   22fd8:	6260      	str	r0, [r4, #36]	; 0x24
   22fda:	62a1      	str	r1, [r4, #40]	; 0x28
   22fdc:	62e2      	str	r2, [r4, #44]	; 0x2c
   22fde:	6323      	str	r3, [r4, #48]	; 0x30
   22fe0:	bd10      	pop	{r4, pc}
   22fe2:	bf00      	nop

00022fe4 <__sfmoreglue>:
   22fe4:	b570      	push	{r4, r5, r6, lr}
   22fe6:	2568      	movs	r5, #104	; 0x68
   22fe8:	460e      	mov	r6, r1
   22fea:	fb05 f501 	mul.w	r5, r5, r1
   22fee:	f105 010c 	add.w	r1, r5, #12
   22ff2:	f7fc f807 	bl	1f004 <_malloc_r>
   22ff6:	4604      	mov	r4, r0
   22ff8:	b148      	cbz	r0, 2300e <__sfmoreglue+0x2a>
   22ffa:	f100 030c 	add.w	r3, r0, #12
   22ffe:	2100      	movs	r1, #0
   23000:	6046      	str	r6, [r0, #4]
   23002:	462a      	mov	r2, r5
   23004:	4618      	mov	r0, r3
   23006:	6021      	str	r1, [r4, #0]
   23008:	60a3      	str	r3, [r4, #8]
   2300a:	f7fc fc03 	bl	1f814 <memset>
   2300e:	4620      	mov	r0, r4
   23010:	bd70      	pop	{r4, r5, r6, pc}
   23012:	bf00      	nop

00023014 <_cleanup>:
   23014:	f64b 7378 	movw	r3, #49016	; 0xbf78
   23018:	f2c0 0302 	movt	r3, #2
   2301c:	6818      	ldr	r0, [r3, #0]
   2301e:	f7ff bfb3 	b.w	22f88 <_cleanup_r>
   23022:	bf00      	nop

00023024 <__sinit>:
   23024:	b570      	push	{r4, r5, r6, lr}
   23026:	4604      	mov	r4, r0
   23028:	6986      	ldr	r6, [r0, #24]
   2302a:	b106      	cbz	r6, 2302e <__sinit+0xa>
   2302c:	bd70      	pop	{r4, r5, r6, pc}
   2302e:	f642 7389 	movw	r3, #12169	; 0x2f89
   23032:	2501      	movs	r5, #1
   23034:	f2c0 0302 	movt	r3, #2
   23038:	6185      	str	r5, [r0, #24]
   2303a:	6283      	str	r3, [r0, #40]	; 0x28
   2303c:	f8c0 60d8 	str.w	r6, [r0, #216]	; 0xd8
   23040:	f8c0 60dc 	str.w	r6, [r0, #220]	; 0xdc
   23044:	f8c0 60e0 	str.w	r6, [r0, #224]	; 0xe0
   23048:	f000 f81a 	bl	23080 <__sfp>
   2304c:	6060      	str	r0, [r4, #4]
   2304e:	4620      	mov	r0, r4
   23050:	f000 f816 	bl	23080 <__sfp>
   23054:	60a0      	str	r0, [r4, #8]
   23056:	4620      	mov	r0, r4
   23058:	f000 f812 	bl	23080 <__sfp>
   2305c:	2104      	movs	r1, #4
   2305e:	4632      	mov	r2, r6
   23060:	60e0      	str	r0, [r4, #12]
   23062:	6860      	ldr	r0, [r4, #4]
   23064:	f7ff ff96 	bl	22f94 <std.isra.0>
   23068:	68a0      	ldr	r0, [r4, #8]
   2306a:	2109      	movs	r1, #9
   2306c:	462a      	mov	r2, r5
   2306e:	f7ff ff91 	bl	22f94 <std.isra.0>
   23072:	68e0      	ldr	r0, [r4, #12]
   23074:	2112      	movs	r1, #18
   23076:	2202      	movs	r2, #2
   23078:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2307c:	f7ff bf8a 	b.w	22f94 <std.isra.0>

00023080 <__sfp>:
   23080:	f64b 7378 	movw	r3, #49016	; 0xbf78
   23084:	f2c0 0302 	movt	r3, #2
   23088:	b570      	push	{r4, r5, r6, lr}
   2308a:	4606      	mov	r6, r0
   2308c:	681d      	ldr	r5, [r3, #0]
   2308e:	69ab      	ldr	r3, [r5, #24]
   23090:	2b00      	cmp	r3, #0
   23092:	d032      	beq.n	230fa <__sfp+0x7a>
   23094:	35d8      	adds	r5, #216	; 0xd8
   23096:	686b      	ldr	r3, [r5, #4]
   23098:	68a9      	ldr	r1, [r5, #8]
   2309a:	3b01      	subs	r3, #1
   2309c:	d410      	bmi.n	230c0 <__sfp+0x40>
   2309e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   230a2:	460c      	mov	r4, r1
   230a4:	b182      	cbz	r2, 230c8 <__sfp+0x48>
   230a6:	f101 0068 	add.w	r0, r1, #104	; 0x68
   230aa:	e002      	b.n	230b2 <__sfp+0x32>
   230ac:	f932 2c5c 	ldrsh.w	r2, [r2, #-92]
   230b0:	b152      	cbz	r2, 230c8 <__sfp+0x48>
   230b2:	3b01      	subs	r3, #1
   230b4:	3468      	adds	r4, #104	; 0x68
   230b6:	1c5a      	adds	r2, r3, #1
   230b8:	ebc1 0204 	rsb	r2, r1, r4
   230bc:	4402      	add	r2, r0
   230be:	d1f5      	bne.n	230ac <__sfp+0x2c>
   230c0:	6828      	ldr	r0, [r5, #0]
   230c2:	b1f0      	cbz	r0, 23102 <__sfp+0x82>
   230c4:	4605      	mov	r5, r0
   230c6:	e7e6      	b.n	23096 <__sfp+0x16>
   230c8:	2500      	movs	r5, #0
   230ca:	f04f 33ff 	mov.w	r3, #4294967295
   230ce:	6665      	str	r5, [r4, #100]	; 0x64
   230d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   230d4:	81e3      	strh	r3, [r4, #14]
   230d6:	4629      	mov	r1, r5
   230d8:	2301      	movs	r3, #1
   230da:	6025      	str	r5, [r4, #0]
   230dc:	81a3      	strh	r3, [r4, #12]
   230de:	2208      	movs	r2, #8
   230e0:	60a5      	str	r5, [r4, #8]
   230e2:	6065      	str	r5, [r4, #4]
   230e4:	6125      	str	r5, [r4, #16]
   230e6:	6165      	str	r5, [r4, #20]
   230e8:	61a5      	str	r5, [r4, #24]
   230ea:	f7fc fb93 	bl	1f814 <memset>
   230ee:	6365      	str	r5, [r4, #52]	; 0x34
   230f0:	63a5      	str	r5, [r4, #56]	; 0x38
   230f2:	64a5      	str	r5, [r4, #72]	; 0x48
   230f4:	64e5      	str	r5, [r4, #76]	; 0x4c
   230f6:	4620      	mov	r0, r4
   230f8:	bd70      	pop	{r4, r5, r6, pc}
   230fa:	4628      	mov	r0, r5
   230fc:	f7ff ff92 	bl	23024 <__sinit>
   23100:	e7c8      	b.n	23094 <__sfp+0x14>
   23102:	4630      	mov	r0, r6
   23104:	2104      	movs	r1, #4
   23106:	f7ff ff6d 	bl	22fe4 <__sfmoreglue>
   2310a:	6028      	str	r0, [r5, #0]
   2310c:	2800      	cmp	r0, #0
   2310e:	d1d9      	bne.n	230c4 <__sfp+0x44>
   23110:	230c      	movs	r3, #12
   23112:	4604      	mov	r4, r0
   23114:	6033      	str	r3, [r6, #0]
   23116:	e7ee      	b.n	230f6 <__sfp+0x76>

00023118 <__sfp_lock_acquire>:
   23118:	4770      	bx	lr
   2311a:	bf00      	nop

0002311c <__sfp_lock_release>:
   2311c:	4770      	bx	lr
   2311e:	bf00      	nop

00023120 <__sinit_lock_acquire>:
   23120:	4770      	bx	lr
   23122:	bf00      	nop

00023124 <__sinit_lock_release>:
   23124:	4770      	bx	lr
   23126:	bf00      	nop

00023128 <__fp_lock_all>:
   23128:	f240 0328 	movw	r3, #40	; 0x28
   2312c:	f642 7181 	movw	r1, #12161	; 0x2f81
   23130:	f2c1 0300 	movt	r3, #4096	; 0x1000
   23134:	f2c0 0102 	movt	r1, #2
   23138:	6818      	ldr	r0, [r3, #0]
   2313a:	f000 b927 	b.w	2338c <_fwalk>
   2313e:	bf00      	nop

00023140 <__fp_unlock_all>:
   23140:	f240 0328 	movw	r3, #40	; 0x28
   23144:	f642 7185 	movw	r1, #12165	; 0x2f85
   23148:	f2c1 0300 	movt	r3, #4096	; 0x1000
   2314c:	f2c0 0102 	movt	r1, #2
   23150:	6818      	ldr	r0, [r3, #0]
   23152:	f000 b91b 	b.w	2338c <_fwalk>
   23156:	bf00      	nop

00023158 <_malloc_trim_r>:
   23158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2315a:	f240 141c 	movw	r4, #284	; 0x11c
   2315e:	f2c1 0400 	movt	r4, #4096	; 0x1000
   23162:	460f      	mov	r7, r1
   23164:	4605      	mov	r5, r0
   23166:	f7fc fb9b 	bl	1f8a0 <__malloc_lock>
   2316a:	68a3      	ldr	r3, [r4, #8]
   2316c:	4628      	mov	r0, r5
   2316e:	685e      	ldr	r6, [r3, #4]
   23170:	f026 0603 	bic.w	r6, r6, #3
   23174:	f506 637e 	add.w	r3, r6, #4064	; 0xfe0
   23178:	330f      	adds	r3, #15
   2317a:	1bdf      	subs	r7, r3, r7
   2317c:	0b3f      	lsrs	r7, r7, #12
   2317e:	3f01      	subs	r7, #1
   23180:	033f      	lsls	r7, r7, #12
   23182:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   23186:	db07      	blt.n	23198 <_malloc_trim_r+0x40>
   23188:	2100      	movs	r1, #0
   2318a:	f7fc fe1f 	bl	1fdcc <_sbrk_r>
   2318e:	68a3      	ldr	r3, [r4, #8]
   23190:	199b      	adds	r3, r3, r6
   23192:	4298      	cmp	r0, r3
   23194:	4628      	mov	r0, r5
   23196:	d003      	beq.n	231a0 <_malloc_trim_r+0x48>
   23198:	f7fc fb84 	bl	1f8a4 <__malloc_unlock>
   2319c:	2000      	movs	r0, #0
   2319e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   231a0:	4279      	negs	r1, r7
   231a2:	f7fc fe13 	bl	1fdcc <_sbrk_r>
   231a6:	3001      	adds	r0, #1
   231a8:	d010      	beq.n	231cc <_malloc_trim_r+0x74>
   231aa:	f243 1394 	movw	r3, #12692	; 0x3194
   231ae:	68a1      	ldr	r1, [r4, #8]
   231b0:	f2c1 0300 	movt	r3, #4096	; 0x1000
   231b4:	1bf6      	subs	r6, r6, r7
   231b6:	4628      	mov	r0, r5
   231b8:	f046 0601 	orr.w	r6, r6, #1
   231bc:	681a      	ldr	r2, [r3, #0]
   231be:	604e      	str	r6, [r1, #4]
   231c0:	1bd7      	subs	r7, r2, r7
   231c2:	601f      	str	r7, [r3, #0]
   231c4:	f7fc fb6e 	bl	1f8a4 <__malloc_unlock>
   231c8:	2001      	movs	r0, #1
   231ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   231cc:	2100      	movs	r1, #0
   231ce:	4628      	mov	r0, r5
   231d0:	f7fc fdfc 	bl	1fdcc <_sbrk_r>
   231d4:	68a3      	ldr	r3, [r4, #8]
   231d6:	1ac2      	subs	r2, r0, r3
   231d8:	2a0f      	cmp	r2, #15
   231da:	dd0d      	ble.n	231f8 <_malloc_trim_r+0xa0>
   231dc:	f240 5424 	movw	r4, #1316	; 0x524
   231e0:	f243 1194 	movw	r1, #12692	; 0x3194
   231e4:	f2c1 0400 	movt	r4, #4096	; 0x1000
   231e8:	f2c1 0100 	movt	r1, #4096	; 0x1000
   231ec:	f042 0201 	orr.w	r2, r2, #1
   231f0:	605a      	str	r2, [r3, #4]
   231f2:	6823      	ldr	r3, [r4, #0]
   231f4:	1ac0      	subs	r0, r0, r3
   231f6:	6008      	str	r0, [r1, #0]
   231f8:	4628      	mov	r0, r5
   231fa:	e7cd      	b.n	23198 <_malloc_trim_r+0x40>

000231fc <_free_r>:
   231fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   231fe:	460d      	mov	r5, r1
   23200:	4604      	mov	r4, r0
   23202:	2900      	cmp	r1, #0
   23204:	d075      	beq.n	232f2 <_free_r+0xf6>
   23206:	f7fc fb4b 	bl	1f8a0 <__malloc_lock>
   2320a:	f855 6c04 	ldr.w	r6, [r5, #-4]
   2320e:	f240 101c 	movw	r0, #284	; 0x11c
   23212:	f1a5 0108 	sub.w	r1, r5, #8
   23216:	f2c1 0000 	movt	r0, #4096	; 0x1000
   2321a:	f026 0301 	bic.w	r3, r6, #1
   2321e:	18ca      	adds	r2, r1, r3
   23220:	f8d0 c008 	ldr.w	ip, [r0, #8]
   23224:	6857      	ldr	r7, [r2, #4]
   23226:	4594      	cmp	ip, r2
   23228:	f027 0703 	bic.w	r7, r7, #3
   2322c:	d07e      	beq.n	2332c <_free_r+0x130>
   2322e:	f016 0601 	ands.w	r6, r6, #1
   23232:	6057      	str	r7, [r2, #4]
   23234:	d04d      	beq.n	232d2 <_free_r+0xd6>
   23236:	2600      	movs	r6, #0
   23238:	19d5      	adds	r5, r2, r7
   2323a:	686d      	ldr	r5, [r5, #4]
   2323c:	f015 0f01 	tst.w	r5, #1
   23240:	d106      	bne.n	23250 <_free_r+0x54>
   23242:	19db      	adds	r3, r3, r7
   23244:	6895      	ldr	r5, [r2, #8]
   23246:	2e00      	cmp	r6, #0
   23248:	d064      	beq.n	23314 <_free_r+0x118>
   2324a:	68d2      	ldr	r2, [r2, #12]
   2324c:	60ea      	str	r2, [r5, #12]
   2324e:	6095      	str	r5, [r2, #8]
   23250:	f043 0201 	orr.w	r2, r3, #1
   23254:	50cb      	str	r3, [r1, r3]
   23256:	604a      	str	r2, [r1, #4]
   23258:	2e00      	cmp	r6, #0
   2325a:	d135      	bne.n	232c8 <_free_r+0xcc>
   2325c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   23260:	d348      	bcc.n	232f4 <_free_r+0xf8>
   23262:	099e      	lsrs	r6, r3, #6
   23264:	0a5a      	lsrs	r2, r3, #9
   23266:	3638      	adds	r6, #56	; 0x38
   23268:	00f5      	lsls	r5, r6, #3
   2326a:	2a04      	cmp	r2, #4
   2326c:	d916      	bls.n	2329c <_free_r+0xa0>
   2326e:	f102 065b 	add.w	r6, r2, #91	; 0x5b
   23272:	00f5      	lsls	r5, r6, #3
   23274:	2a14      	cmp	r2, #20
   23276:	d911      	bls.n	2329c <_free_r+0xa0>
   23278:	0b1e      	lsrs	r6, r3, #12
   2327a:	366e      	adds	r6, #110	; 0x6e
   2327c:	00f5      	lsls	r5, r6, #3
   2327e:	2a54      	cmp	r2, #84	; 0x54
   23280:	d90c      	bls.n	2329c <_free_r+0xa0>
   23282:	0bde      	lsrs	r6, r3, #15
   23284:	3677      	adds	r6, #119	; 0x77
   23286:	00f5      	lsls	r5, r6, #3
   23288:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   2328c:	d906      	bls.n	2329c <_free_r+0xa0>
   2328e:	f240 5554 	movw	r5, #1364	; 0x554
   23292:	42aa      	cmp	r2, r5
   23294:	d874      	bhi.n	23380 <_free_r+0x184>
   23296:	0c9e      	lsrs	r6, r3, #18
   23298:	367c      	adds	r6, #124	; 0x7c
   2329a:	00f5      	lsls	r5, r6, #3
   2329c:	1940      	adds	r0, r0, r5
   2329e:	f240 151c 	movw	r5, #284	; 0x11c
   232a2:	f2c1 0500 	movt	r5, #4096	; 0x1000
   232a6:	6882      	ldr	r2, [r0, #8]
   232a8:	4282      	cmp	r2, r0
   232aa:	d103      	bne.n	232b4 <_free_r+0xb8>
   232ac:	e05f      	b.n	2336e <_free_r+0x172>
   232ae:	6892      	ldr	r2, [r2, #8]
   232b0:	4290      	cmp	r0, r2
   232b2:	d004      	beq.n	232be <_free_r+0xc2>
   232b4:	6855      	ldr	r5, [r2, #4]
   232b6:	f025 0503 	bic.w	r5, r5, #3
   232ba:	42ab      	cmp	r3, r5
   232bc:	d3f7      	bcc.n	232ae <_free_r+0xb2>
   232be:	68d3      	ldr	r3, [r2, #12]
   232c0:	60cb      	str	r3, [r1, #12]
   232c2:	608a      	str	r2, [r1, #8]
   232c4:	60d1      	str	r1, [r2, #12]
   232c6:	6099      	str	r1, [r3, #8]
   232c8:	4620      	mov	r0, r4
   232ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   232ce:	f7fc bae9 	b.w	1f8a4 <__malloc_unlock>
   232d2:	f855 5c08 	ldr.w	r5, [r5, #-8]
   232d6:	f100 0c08 	add.w	ip, r0, #8
   232da:	1b49      	subs	r1, r1, r5
   232dc:	195b      	adds	r3, r3, r5
   232de:	688d      	ldr	r5, [r1, #8]
   232e0:	4565      	cmp	r5, ip
   232e2:	d042      	beq.n	2336a <_free_r+0x16e>
   232e4:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   232e8:	f8c5 c00c 	str.w	ip, [r5, #12]
   232ec:	f8cc 5008 	str.w	r5, [ip, #8]
   232f0:	e7a2      	b.n	23238 <_free_r+0x3c>
   232f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   232f4:	08db      	lsrs	r3, r3, #3
   232f6:	2501      	movs	r5, #1
   232f8:	6846      	ldr	r6, [r0, #4]
   232fa:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
   232fe:	109b      	asrs	r3, r3, #2
   23300:	fa05 f303 	lsl.w	r3, r5, r3
   23304:	60ca      	str	r2, [r1, #12]
   23306:	6895      	ldr	r5, [r2, #8]
   23308:	4333      	orrs	r3, r6
   2330a:	6043      	str	r3, [r0, #4]
   2330c:	608d      	str	r5, [r1, #8]
   2330e:	60e9      	str	r1, [r5, #12]
   23310:	6091      	str	r1, [r2, #8]
   23312:	e7d9      	b.n	232c8 <_free_r+0xcc>
   23314:	4f1c      	ldr	r7, [pc, #112]	; (23388 <_free_r+0x18c>)
   23316:	42bd      	cmp	r5, r7
   23318:	d197      	bne.n	2324a <_free_r+0x4e>
   2331a:	6141      	str	r1, [r0, #20]
   2331c:	f043 0201 	orr.w	r2, r3, #1
   23320:	6101      	str	r1, [r0, #16]
   23322:	60cd      	str	r5, [r1, #12]
   23324:	608d      	str	r5, [r1, #8]
   23326:	604a      	str	r2, [r1, #4]
   23328:	50cb      	str	r3, [r1, r3]
   2332a:	e7cd      	b.n	232c8 <_free_r+0xcc>
   2332c:	07f2      	lsls	r2, r6, #31
   2332e:	443b      	add	r3, r7
   23330:	d407      	bmi.n	23342 <_free_r+0x146>
   23332:	f855 2c08 	ldr.w	r2, [r5, #-8]
   23336:	1a89      	subs	r1, r1, r2
   23338:	189b      	adds	r3, r3, r2
   2333a:	688d      	ldr	r5, [r1, #8]
   2333c:	68ca      	ldr	r2, [r1, #12]
   2333e:	60ea      	str	r2, [r5, #12]
   23340:	6095      	str	r5, [r2, #8]
   23342:	f240 5228 	movw	r2, #1320	; 0x528
   23346:	f043 0501 	orr.w	r5, r3, #1
   2334a:	f2c1 0200 	movt	r2, #4096	; 0x1000
   2334e:	604d      	str	r5, [r1, #4]
   23350:	6081      	str	r1, [r0, #8]
   23352:	6812      	ldr	r2, [r2, #0]
   23354:	4293      	cmp	r3, r2
   23356:	d3b7      	bcc.n	232c8 <_free_r+0xcc>
   23358:	f243 1390 	movw	r3, #12688	; 0x3190
   2335c:	4620      	mov	r0, r4
   2335e:	f2c1 0300 	movt	r3, #4096	; 0x1000
   23362:	6819      	ldr	r1, [r3, #0]
   23364:	f7ff fef8 	bl	23158 <_malloc_trim_r>
   23368:	e7ae      	b.n	232c8 <_free_r+0xcc>
   2336a:	2601      	movs	r6, #1
   2336c:	e764      	b.n	23238 <_free_r+0x3c>
   2336e:	2701      	movs	r7, #1
   23370:	6868      	ldr	r0, [r5, #4]
   23372:	10b6      	asrs	r6, r6, #2
   23374:	4613      	mov	r3, r2
   23376:	fa07 f606 	lsl.w	r6, r7, r6
   2337a:	4330      	orrs	r0, r6
   2337c:	6068      	str	r0, [r5, #4]
   2337e:	e79f      	b.n	232c0 <_free_r+0xc4>
   23380:	f44f 757c 	mov.w	r5, #1008	; 0x3f0
   23384:	267e      	movs	r6, #126	; 0x7e
   23386:	e789      	b.n	2329c <_free_r+0xa0>
   23388:	10000124 	.word	0x10000124

0002338c <_fwalk>:
   2338c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23390:	4606      	mov	r6, r0
   23392:	4688      	mov	r8, r1
   23394:	f7ff fec0 	bl	23118 <__sfp_lock_acquire>
   23398:	36d8      	adds	r6, #216	; 0xd8
   2339a:	bf08      	it	eq
   2339c:	4637      	moveq	r7, r6
   2339e:	d015      	beq.n	233cc <_fwalk+0x40>
   233a0:	2700      	movs	r7, #0
   233a2:	6875      	ldr	r5, [r6, #4]
   233a4:	68b4      	ldr	r4, [r6, #8]
   233a6:	3d01      	subs	r5, #1
   233a8:	d40d      	bmi.n	233c6 <_fwalk+0x3a>
   233aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   233ae:	3d01      	subs	r5, #1
   233b0:	b133      	cbz	r3, 233c0 <_fwalk+0x34>
   233b2:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   233b6:	4620      	mov	r0, r4
   233b8:	3301      	adds	r3, #1
   233ba:	d001      	beq.n	233c0 <_fwalk+0x34>
   233bc:	47c0      	blx	r8
   233be:	4307      	orrs	r7, r0
   233c0:	3468      	adds	r4, #104	; 0x68
   233c2:	1c6b      	adds	r3, r5, #1
   233c4:	d1f1      	bne.n	233aa <_fwalk+0x1e>
   233c6:	6836      	ldr	r6, [r6, #0]
   233c8:	2e00      	cmp	r6, #0
   233ca:	d1ea      	bne.n	233a2 <_fwalk+0x16>
   233cc:	f7ff fea6 	bl	2311c <__sfp_lock_release>
   233d0:	4638      	mov	r0, r7
   233d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   233d6:	bf00      	nop

000233d8 <_fwalk_reent>:
   233d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   233dc:	4607      	mov	r7, r0
   233de:	4689      	mov	r9, r1
   233e0:	f7ff fe9a 	bl	23118 <__sfp_lock_acquire>
   233e4:	f117 06d8 	adds.w	r6, r7, #216	; 0xd8
   233e8:	bf08      	it	eq
   233ea:	46b0      	moveq	r8, r6
   233ec:	d018      	beq.n	23420 <_fwalk_reent+0x48>
   233ee:	f04f 0800 	mov.w	r8, #0
   233f2:	6875      	ldr	r5, [r6, #4]
   233f4:	68b4      	ldr	r4, [r6, #8]
   233f6:	3d01      	subs	r5, #1
   233f8:	d40f      	bmi.n	2341a <_fwalk_reent+0x42>
   233fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   233fe:	3d01      	subs	r5, #1
   23400:	b143      	cbz	r3, 23414 <_fwalk_reent+0x3c>
   23402:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   23406:	4621      	mov	r1, r4
   23408:	4638      	mov	r0, r7
   2340a:	3301      	adds	r3, #1
   2340c:	d002      	beq.n	23414 <_fwalk_reent+0x3c>
   2340e:	47c8      	blx	r9
   23410:	ea48 0800 	orr.w	r8, r8, r0
   23414:	3468      	adds	r4, #104	; 0x68
   23416:	1c6a      	adds	r2, r5, #1
   23418:	d1ef      	bne.n	233fa <_fwalk_reent+0x22>
   2341a:	6836      	ldr	r6, [r6, #0]
   2341c:	2e00      	cmp	r6, #0
   2341e:	d1e8      	bne.n	233f2 <_fwalk_reent+0x1a>
   23420:	f7ff fe7c 	bl	2311c <__sfp_lock_release>
   23424:	4640      	mov	r0, r8
   23426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2342a:	bf00      	nop

0002342c <_setlocale_r>:
   2342c:	b510      	push	{r4, lr}
   2342e:	4614      	mov	r4, r2
   23430:	b13a      	cbz	r2, 23442 <_setlocale_r+0x16>
   23432:	f24c 1158 	movw	r1, #49496	; 0xc158
   23436:	4610      	mov	r0, r2
   23438:	f2c0 0102 	movt	r1, #2
   2343c:	f7fc fe7e 	bl	2013c <strcmp>
   23440:	b920      	cbnz	r0, 2344c <_setlocale_r+0x20>
   23442:	f64b 707c 	movw	r0, #49020	; 0xbf7c
   23446:	f2c0 0002 	movt	r0, #2
   2344a:	bd10      	pop	{r4, pc}
   2344c:	f64b 717c 	movw	r1, #49020	; 0xbf7c
   23450:	4620      	mov	r0, r4
   23452:	f2c0 0102 	movt	r1, #2
   23456:	f7fc fe71 	bl	2013c <strcmp>
   2345a:	b920      	cbnz	r0, 23466 <_setlocale_r+0x3a>
   2345c:	f64b 707c 	movw	r0, #49020	; 0xbf7c
   23460:	f2c0 0002 	movt	r0, #2
   23464:	bd10      	pop	{r4, pc}
   23466:	f64a 71b4 	movw	r1, #44980	; 0xafb4
   2346a:	4620      	mov	r0, r4
   2346c:	f2c0 0102 	movt	r1, #2
   23470:	f7fc fe64 	bl	2013c <strcmp>
   23474:	f64b 737c 	movw	r3, #49020	; 0xbf7c
   23478:	f2c0 0302 	movt	r3, #2
   2347c:	2800      	cmp	r0, #0
   2347e:	bf0c      	ite	eq
   23480:	4618      	moveq	r0, r3
   23482:	2000      	movne	r0, #0
   23484:	bd10      	pop	{r4, pc}
   23486:	bf00      	nop

00023488 <__locale_charset>:
   23488:	f240 5030 	movw	r0, #1328	; 0x530
   2348c:	f2c1 0000 	movt	r0, #4096	; 0x1000
   23490:	4770      	bx	lr
   23492:	bf00      	nop

00023494 <__locale_mb_cur_max>:
   23494:	f240 5330 	movw	r3, #1328	; 0x530
   23498:	f2c1 0300 	movt	r3, #4096	; 0x1000
   2349c:	6a18      	ldr	r0, [r3, #32]
   2349e:	4770      	bx	lr

000234a0 <__locale_msgcharset>:
   234a0:	4800      	ldr	r0, [pc, #0]	; (234a4 <__locale_msgcharset+0x4>)
   234a2:	4770      	bx	lr
   234a4:	10000554 	.word	0x10000554

000234a8 <__locale_cjk_lang>:
   234a8:	2000      	movs	r0, #0
   234aa:	4770      	bx	lr

000234ac <_localeconv_r>:
   234ac:	4800      	ldr	r0, [pc, #0]	; (234b0 <_localeconv_r+0x4>)
   234ae:	4770      	bx	lr
   234b0:	10000574 	.word	0x10000574

000234b4 <setlocale>:
   234b4:	f240 0328 	movw	r3, #40	; 0x28
   234b8:	460a      	mov	r2, r1
   234ba:	f2c1 0300 	movt	r3, #4096	; 0x1000
   234be:	4601      	mov	r1, r0
   234c0:	6818      	ldr	r0, [r3, #0]
   234c2:	f7ff bfb3 	b.w	2342c <_setlocale_r>
   234c6:	bf00      	nop

000234c8 <localeconv>:
   234c8:	4800      	ldr	r0, [pc, #0]	; (234cc <localeconv+0x4>)
   234ca:	4770      	bx	lr
   234cc:	10000574 	.word	0x10000574

000234d0 <__smakebuf_r>:
   234d0:	898b      	ldrh	r3, [r1, #12]
   234d2:	b5f0      	push	{r4, r5, r6, r7, lr}
   234d4:	460c      	mov	r4, r1
   234d6:	b29a      	uxth	r2, r3
   234d8:	b091      	sub	sp, #68	; 0x44
   234da:	f012 0f02 	tst.w	r2, #2
   234de:	4605      	mov	r5, r0
   234e0:	d13b      	bne.n	2355a <__smakebuf_r+0x8a>
   234e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   234e6:	2900      	cmp	r1, #0
   234e8:	db18      	blt.n	2351c <__smakebuf_r+0x4c>
   234ea:	aa01      	add	r2, sp, #4
   234ec:	f001 fb88 	bl	24c00 <_fstat_r>
   234f0:	2800      	cmp	r0, #0
   234f2:	db11      	blt.n	23518 <__smakebuf_r+0x48>
   234f4:	9b02      	ldr	r3, [sp, #8]
   234f6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   234fa:	f5a3 5100 	sub.w	r1, r3, #8192	; 0x2000
   234fe:	424f      	negs	r7, r1
   23500:	eb47 0701 	adc.w	r7, r7, r1
   23504:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   23508:	d03a      	beq.n	23580 <__smakebuf_r+0xb0>
   2350a:	89a3      	ldrh	r3, [r4, #12]
   2350c:	f44f 6680 	mov.w	r6, #1024	; 0x400
   23510:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   23514:	81a3      	strh	r3, [r4, #12]
   23516:	e00b      	b.n	23530 <__smakebuf_r+0x60>
   23518:	89a3      	ldrh	r3, [r4, #12]
   2351a:	b29a      	uxth	r2, r3
   2351c:	f012 0f80 	tst.w	r2, #128	; 0x80
   23520:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   23524:	bf14      	ite	ne
   23526:	2640      	movne	r6, #64	; 0x40
   23528:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   2352c:	2700      	movs	r7, #0
   2352e:	81a3      	strh	r3, [r4, #12]
   23530:	4628      	mov	r0, r5
   23532:	4631      	mov	r1, r6
   23534:	f7fb fd66 	bl	1f004 <_malloc_r>
   23538:	2800      	cmp	r0, #0
   2353a:	d030      	beq.n	2359e <__smakebuf_r+0xce>
   2353c:	89a2      	ldrh	r2, [r4, #12]
   2353e:	f642 7389 	movw	r3, #12169	; 0x2f89
   23542:	f2c0 0302 	movt	r3, #2
   23546:	62ab      	str	r3, [r5, #40]	; 0x28
   23548:	f042 0380 	orr.w	r3, r2, #128	; 0x80
   2354c:	6020      	str	r0, [r4, #0]
   2354e:	81a3      	strh	r3, [r4, #12]
   23550:	6120      	str	r0, [r4, #16]
   23552:	6166      	str	r6, [r4, #20]
   23554:	b947      	cbnz	r7, 23568 <__smakebuf_r+0x98>
   23556:	b011      	add	sp, #68	; 0x44
   23558:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2355a:	f101 0347 	add.w	r3, r1, #71	; 0x47
   2355e:	600b      	str	r3, [r1, #0]
   23560:	610b      	str	r3, [r1, #16]
   23562:	2301      	movs	r3, #1
   23564:	614b      	str	r3, [r1, #20]
   23566:	e7f6      	b.n	23556 <__smakebuf_r+0x86>
   23568:	4628      	mov	r0, r5
   2356a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   2356e:	f001 fb5b 	bl	24c28 <_isatty_r>
   23572:	2800      	cmp	r0, #0
   23574:	d0ef      	beq.n	23556 <__smakebuf_r+0x86>
   23576:	89a3      	ldrh	r3, [r4, #12]
   23578:	f043 0301 	orr.w	r3, r3, #1
   2357c:	81a3      	strh	r3, [r4, #12]
   2357e:	e7ea      	b.n	23556 <__smakebuf_r+0x86>
   23580:	f643 7329 	movw	r3, #16169	; 0x3f29
   23584:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   23586:	f2c0 0302 	movt	r3, #2
   2358a:	429a      	cmp	r2, r3
   2358c:	d1bd      	bne.n	2350a <__smakebuf_r+0x3a>
   2358e:	89a2      	ldrh	r2, [r4, #12]
   23590:	f44f 6380 	mov.w	r3, #1024	; 0x400
   23594:	461e      	mov	r6, r3
   23596:	6523      	str	r3, [r4, #80]	; 0x50
   23598:	4313      	orrs	r3, r2
   2359a:	81a3      	strh	r3, [r4, #12]
   2359c:	e7c8      	b.n	23530 <__smakebuf_r+0x60>
   2359e:	89a3      	ldrh	r3, [r4, #12]
   235a0:	059a      	lsls	r2, r3, #22
   235a2:	d4d8      	bmi.n	23556 <__smakebuf_r+0x86>
   235a4:	f104 0247 	add.w	r2, r4, #71	; 0x47
   235a8:	f043 0302 	orr.w	r3, r3, #2
   235ac:	6022      	str	r2, [r4, #0]
   235ae:	81a3      	strh	r3, [r4, #12]
   235b0:	2301      	movs	r3, #1
   235b2:	6122      	str	r2, [r4, #16]
   235b4:	6163      	str	r3, [r4, #20]
   235b6:	e7ce      	b.n	23556 <__smakebuf_r+0x86>

000235b8 <_Balloc>:
   235b8:	b570      	push	{r4, r5, r6, lr}
   235ba:	4606      	mov	r6, r0
   235bc:	6a44      	ldr	r4, [r0, #36]	; 0x24
   235be:	460d      	mov	r5, r1
   235c0:	b15c      	cbz	r4, 235da <_Balloc+0x22>
   235c2:	68e3      	ldr	r3, [r4, #12]
   235c4:	b19b      	cbz	r3, 235ee <_Balloc+0x36>
   235c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   235ca:	b1e0      	cbz	r0, 23606 <_Balloc+0x4e>
   235cc:	6802      	ldr	r2, [r0, #0]
   235ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   235d2:	2300      	movs	r3, #0
   235d4:	6103      	str	r3, [r0, #16]
   235d6:	60c3      	str	r3, [r0, #12]
   235d8:	bd70      	pop	{r4, r5, r6, pc}
   235da:	2010      	movs	r0, #16
   235dc:	f7fb fd02 	bl	1efe4 <malloc>
   235e0:	2300      	movs	r3, #0
   235e2:	4604      	mov	r4, r0
   235e4:	6270      	str	r0, [r6, #36]	; 0x24
   235e6:	6043      	str	r3, [r0, #4]
   235e8:	6083      	str	r3, [r0, #8]
   235ea:	6003      	str	r3, [r0, #0]
   235ec:	60c3      	str	r3, [r0, #12]
   235ee:	4630      	mov	r0, r6
   235f0:	2104      	movs	r1, #4
   235f2:	2221      	movs	r2, #33	; 0x21
   235f4:	f001 fa5e 	bl	24ab4 <_calloc_r>
   235f8:	6a73      	ldr	r3, [r6, #36]	; 0x24
   235fa:	60e0      	str	r0, [r4, #12]
   235fc:	68db      	ldr	r3, [r3, #12]
   235fe:	2b00      	cmp	r3, #0
   23600:	d1e1      	bne.n	235c6 <_Balloc+0xe>
   23602:	4618      	mov	r0, r3
   23604:	bd70      	pop	{r4, r5, r6, pc}
   23606:	2401      	movs	r4, #1
   23608:	4630      	mov	r0, r6
   2360a:	4621      	mov	r1, r4
   2360c:	fa04 f405 	lsl.w	r4, r4, r5
   23610:	1d62      	adds	r2, r4, #5
   23612:	0092      	lsls	r2, r2, #2
   23614:	f001 fa4e 	bl	24ab4 <_calloc_r>
   23618:	2800      	cmp	r0, #0
   2361a:	d0f3      	beq.n	23604 <_Balloc+0x4c>
   2361c:	6045      	str	r5, [r0, #4]
   2361e:	6084      	str	r4, [r0, #8]
   23620:	e7d7      	b.n	235d2 <_Balloc+0x1a>
   23622:	bf00      	nop

00023624 <_Bfree>:
   23624:	b530      	push	{r4, r5, lr}
   23626:	4604      	mov	r4, r0
   23628:	6a45      	ldr	r5, [r0, #36]	; 0x24
   2362a:	b083      	sub	sp, #12
   2362c:	b155      	cbz	r5, 23644 <_Bfree+0x20>
   2362e:	b139      	cbz	r1, 23640 <_Bfree+0x1c>
   23630:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23632:	684a      	ldr	r2, [r1, #4]
   23634:	68db      	ldr	r3, [r3, #12]
   23636:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   2363a:	6008      	str	r0, [r1, #0]
   2363c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   23640:	b003      	add	sp, #12
   23642:	bd30      	pop	{r4, r5, pc}
   23644:	2010      	movs	r0, #16
   23646:	9101      	str	r1, [sp, #4]
   23648:	f7fb fccc 	bl	1efe4 <malloc>
   2364c:	9901      	ldr	r1, [sp, #4]
   2364e:	6260      	str	r0, [r4, #36]	; 0x24
   23650:	6045      	str	r5, [r0, #4]
   23652:	6085      	str	r5, [r0, #8]
   23654:	6005      	str	r5, [r0, #0]
   23656:	60c5      	str	r5, [r0, #12]
   23658:	e7e9      	b.n	2362e <_Bfree+0xa>
   2365a:	bf00      	nop

0002365c <__multadd>:
   2365c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23660:	460c      	mov	r4, r1
   23662:	4605      	mov	r5, r0
   23664:	690e      	ldr	r6, [r1, #16]
   23666:	f101 0014 	add.w	r0, r1, #20
   2366a:	b082      	sub	sp, #8
   2366c:	2100      	movs	r1, #0
   2366e:	6807      	ldr	r7, [r0, #0]
   23670:	3101      	adds	r1, #1
   23672:	fa1f fc87 	uxth.w	ip, r7
   23676:	0c3f      	lsrs	r7, r7, #16
   23678:	fb02 330c 	mla	r3, r2, ip, r3
   2367c:	fb02 f707 	mul.w	r7, r2, r7
   23680:	eb07 4713 	add.w	r7, r7, r3, lsr #16
   23684:	fa1f fc83 	uxth.w	ip, r3
   23688:	0c3b      	lsrs	r3, r7, #16
   2368a:	428e      	cmp	r6, r1
   2368c:	ea4f 4807 	mov.w	r8, r7, lsl #16
   23690:	eb08 070c 	add.w	r7, r8, ip
   23694:	f840 7b04 	str.w	r7, [r0], #4
   23698:	dce9      	bgt.n	2366e <__multadd+0x12>
   2369a:	b13b      	cbz	r3, 236ac <__multadd+0x50>
   2369c:	68a2      	ldr	r2, [r4, #8]
   2369e:	4296      	cmp	r6, r2
   236a0:	da08      	bge.n	236b4 <__multadd+0x58>
   236a2:	eb04 0286 	add.w	r2, r4, r6, lsl #2
   236a6:	3601      	adds	r6, #1
   236a8:	6126      	str	r6, [r4, #16]
   236aa:	6153      	str	r3, [r2, #20]
   236ac:	4620      	mov	r0, r4
   236ae:	b002      	add	sp, #8
   236b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   236b4:	6861      	ldr	r1, [r4, #4]
   236b6:	4628      	mov	r0, r5
   236b8:	9301      	str	r3, [sp, #4]
   236ba:	3101      	adds	r1, #1
   236bc:	f7ff ff7c 	bl	235b8 <_Balloc>
   236c0:	6922      	ldr	r2, [r4, #16]
   236c2:	f104 010c 	add.w	r1, r4, #12
   236c6:	3202      	adds	r2, #2
   236c8:	0092      	lsls	r2, r2, #2
   236ca:	4607      	mov	r7, r0
   236cc:	300c      	adds	r0, #12
   236ce:	f7fb ffcb 	bl	1f668 <memcpy>
   236d2:	4621      	mov	r1, r4
   236d4:	4628      	mov	r0, r5
   236d6:	463c      	mov	r4, r7
   236d8:	f7ff ffa4 	bl	23624 <_Bfree>
   236dc:	9b01      	ldr	r3, [sp, #4]
   236de:	e7e0      	b.n	236a2 <__multadd+0x46>

000236e0 <__s2b>:
   236e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   236e4:	f648 6439 	movw	r4, #36409	; 0x8e39
   236e8:	461e      	mov	r6, r3
   236ea:	f6c3 04e3 	movt	r4, #14563	; 0x38e3
   236ee:	3308      	adds	r3, #8
   236f0:	4688      	mov	r8, r1
   236f2:	4605      	mov	r5, r0
   236f4:	4617      	mov	r7, r2
   236f6:	fb84 1403 	smull	r1, r4, r4, r3
   236fa:	17db      	asrs	r3, r3, #31
   236fc:	2100      	movs	r1, #0
   236fe:	ebc3 0364 	rsb	r3, r3, r4, asr #1
   23702:	2b01      	cmp	r3, #1
   23704:	dd05      	ble.n	23712 <__s2b+0x32>
   23706:	2201      	movs	r2, #1
   23708:	2100      	movs	r1, #0
   2370a:	0052      	lsls	r2, r2, #1
   2370c:	3101      	adds	r1, #1
   2370e:	4293      	cmp	r3, r2
   23710:	dcfb      	bgt.n	2370a <__s2b+0x2a>
   23712:	4628      	mov	r0, r5
   23714:	f7ff ff50 	bl	235b8 <_Balloc>
   23718:	9b08      	ldr	r3, [sp, #32]
   2371a:	6143      	str	r3, [r0, #20]
   2371c:	2301      	movs	r3, #1
   2371e:	2f09      	cmp	r7, #9
   23720:	4601      	mov	r1, r0
   23722:	6103      	str	r3, [r0, #16]
   23724:	dd21      	ble.n	2376a <__s2b+0x8a>
   23726:	f108 0909 	add.w	r9, r8, #9
   2372a:	2409      	movs	r4, #9
   2372c:	f818 3004 	ldrb.w	r3, [r8, r4]
   23730:	220a      	movs	r2, #10
   23732:	4628      	mov	r0, r5
   23734:	3401      	adds	r4, #1
   23736:	3b30      	subs	r3, #48	; 0x30
   23738:	f7ff ff90 	bl	2365c <__multadd>
   2373c:	42bc      	cmp	r4, r7
   2373e:	4601      	mov	r1, r0
   23740:	d1f4      	bne.n	2372c <__s2b+0x4c>
   23742:	eb09 0804 	add.w	r8, r9, r4
   23746:	f1a8 0808 	sub.w	r8, r8, #8
   2374a:	42a6      	cmp	r6, r4
   2374c:	dd0a      	ble.n	23764 <__s2b+0x84>
   2374e:	f818 3b01 	ldrb.w	r3, [r8], #1
   23752:	220a      	movs	r2, #10
   23754:	4628      	mov	r0, r5
   23756:	3401      	adds	r4, #1
   23758:	3b30      	subs	r3, #48	; 0x30
   2375a:	f7ff ff7f 	bl	2365c <__multadd>
   2375e:	42b4      	cmp	r4, r6
   23760:	4601      	mov	r1, r0
   23762:	d1f4      	bne.n	2374e <__s2b+0x6e>
   23764:	4608      	mov	r0, r1
   23766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2376a:	f108 080a 	add.w	r8, r8, #10
   2376e:	2409      	movs	r4, #9
   23770:	e7eb      	b.n	2374a <__s2b+0x6a>
   23772:	bf00      	nop

00023774 <__hi0bits>:
   23774:	4603      	mov	r3, r0
   23776:	2000      	movs	r0, #0
   23778:	0c1a      	lsrs	r2, r3, #16
   2377a:	d101      	bne.n	23780 <__hi0bits+0xc>
   2377c:	041b      	lsls	r3, r3, #16
   2377e:	2010      	movs	r0, #16
   23780:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   23784:	d101      	bne.n	2378a <__hi0bits+0x16>
   23786:	3008      	adds	r0, #8
   23788:	021b      	lsls	r3, r3, #8
   2378a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   2378e:	d101      	bne.n	23794 <__hi0bits+0x20>
   23790:	3004      	adds	r0, #4
   23792:	011b      	lsls	r3, r3, #4
   23794:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   23798:	d101      	bne.n	2379e <__hi0bits+0x2a>
   2379a:	3002      	adds	r0, #2
   2379c:	009b      	lsls	r3, r3, #2
   2379e:	2b00      	cmp	r3, #0
   237a0:	db02      	blt.n	237a8 <__hi0bits+0x34>
   237a2:	005b      	lsls	r3, r3, #1
   237a4:	d401      	bmi.n	237aa <__hi0bits+0x36>
   237a6:	2020      	movs	r0, #32
   237a8:	4770      	bx	lr
   237aa:	3001      	adds	r0, #1
   237ac:	4770      	bx	lr
   237ae:	bf00      	nop

000237b0 <__lo0bits>:
   237b0:	6803      	ldr	r3, [r0, #0]
   237b2:	4602      	mov	r2, r0
   237b4:	f013 0007 	ands.w	r0, r3, #7
   237b8:	d007      	beq.n	237ca <__lo0bits+0x1a>
   237ba:	07d9      	lsls	r1, r3, #31
   237bc:	d41f      	bmi.n	237fe <__lo0bits+0x4e>
   237be:	0798      	lsls	r0, r3, #30
   237c0:	d41f      	bmi.n	23802 <__lo0bits+0x52>
   237c2:	089b      	lsrs	r3, r3, #2
   237c4:	2002      	movs	r0, #2
   237c6:	6013      	str	r3, [r2, #0]
   237c8:	4770      	bx	lr
   237ca:	b299      	uxth	r1, r3
   237cc:	b909      	cbnz	r1, 237d2 <__lo0bits+0x22>
   237ce:	0c1b      	lsrs	r3, r3, #16
   237d0:	2010      	movs	r0, #16
   237d2:	f013 0fff 	tst.w	r3, #255	; 0xff
   237d6:	d101      	bne.n	237dc <__lo0bits+0x2c>
   237d8:	3008      	adds	r0, #8
   237da:	0a1b      	lsrs	r3, r3, #8
   237dc:	0719      	lsls	r1, r3, #28
   237de:	d101      	bne.n	237e4 <__lo0bits+0x34>
   237e0:	3004      	adds	r0, #4
   237e2:	091b      	lsrs	r3, r3, #4
   237e4:	0799      	lsls	r1, r3, #30
   237e6:	d101      	bne.n	237ec <__lo0bits+0x3c>
   237e8:	3002      	adds	r0, #2
   237ea:	089b      	lsrs	r3, r3, #2
   237ec:	07d9      	lsls	r1, r3, #31
   237ee:	d404      	bmi.n	237fa <__lo0bits+0x4a>
   237f0:	085b      	lsrs	r3, r3, #1
   237f2:	d101      	bne.n	237f8 <__lo0bits+0x48>
   237f4:	2020      	movs	r0, #32
   237f6:	4770      	bx	lr
   237f8:	3001      	adds	r0, #1
   237fa:	6013      	str	r3, [r2, #0]
   237fc:	4770      	bx	lr
   237fe:	2000      	movs	r0, #0
   23800:	4770      	bx	lr
   23802:	085b      	lsrs	r3, r3, #1
   23804:	2001      	movs	r0, #1
   23806:	6013      	str	r3, [r2, #0]
   23808:	4770      	bx	lr
   2380a:	bf00      	nop

0002380c <__i2b>:
   2380c:	b510      	push	{r4, lr}
   2380e:	460c      	mov	r4, r1
   23810:	2101      	movs	r1, #1
   23812:	f7ff fed1 	bl	235b8 <_Balloc>
   23816:	2201      	movs	r2, #1
   23818:	6144      	str	r4, [r0, #20]
   2381a:	6102      	str	r2, [r0, #16]
   2381c:	bd10      	pop	{r4, pc}
   2381e:	bf00      	nop

00023820 <__multiply>:
   23820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23824:	4692      	mov	sl, r2
   23826:	690d      	ldr	r5, [r1, #16]
   23828:	460c      	mov	r4, r1
   2382a:	6916      	ldr	r6, [r2, #16]
   2382c:	b087      	sub	sp, #28
   2382e:	42b5      	cmp	r5, r6
   23830:	bfbf      	itttt	lt
   23832:	4654      	movlt	r4, sl
   23834:	462a      	movlt	r2, r5
   23836:	4635      	movlt	r5, r6
   23838:	4616      	movlt	r6, r2
   2383a:	68a3      	ldr	r3, [r4, #8]
   2383c:	bfb8      	it	lt
   2383e:	468a      	movlt	sl, r1
   23840:	eb05 0b06 	add.w	fp, r5, r6
   23844:	6861      	ldr	r1, [r4, #4]
   23846:	459b      	cmp	fp, r3
   23848:	bfc8      	it	gt
   2384a:	3101      	addgt	r1, #1
   2384c:	f7ff feb4 	bl	235b8 <_Balloc>
   23850:	f10b 0104 	add.w	r1, fp, #4
   23854:	9105      	str	r1, [sp, #20]
   23856:	eb00 0381 	add.w	r3, r0, r1, lsl #2
   2385a:	f100 0914 	add.w	r9, r0, #20
   2385e:	3304      	adds	r3, #4
   23860:	9003      	str	r0, [sp, #12]
   23862:	4599      	cmp	r9, r3
   23864:	9304      	str	r3, [sp, #16]
   23866:	d206      	bcs.n	23876 <__multiply+0x56>
   23868:	9904      	ldr	r1, [sp, #16]
   2386a:	464b      	mov	r3, r9
   2386c:	2200      	movs	r2, #0
   2386e:	f843 2b04 	str.w	r2, [r3], #4
   23872:	4299      	cmp	r1, r3
   23874:	d8fb      	bhi.n	2386e <__multiply+0x4e>
   23876:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
   2387a:	f10a 0a14 	add.w	sl, sl, #20
   2387e:	3614      	adds	r6, #20
   23880:	eb04 0585 	add.w	r5, r4, r5, lsl #2
   23884:	3414      	adds	r4, #20
   23886:	45b2      	cmp	sl, r6
   23888:	9601      	str	r6, [sp, #4]
   2388a:	f105 0814 	add.w	r8, r5, #20
   2388e:	9402      	str	r4, [sp, #8]
   23890:	d24a      	bcs.n	23928 <__multiply+0x108>
   23892:	f85a 5b04 	ldr.w	r5, [sl], #4
   23896:	b2ac      	uxth	r4, r5
   23898:	b1ec      	cbz	r4, 238d6 <__multiply+0xb6>
   2389a:	9a02      	ldr	r2, [sp, #8]
   2389c:	464b      	mov	r3, r9
   2389e:	2500      	movs	r5, #0
   238a0:	6818      	ldr	r0, [r3, #0]
   238a2:	461f      	mov	r7, r3
   238a4:	f852 1b04 	ldr.w	r1, [r2], #4
   238a8:	b286      	uxth	r6, r0
   238aa:	0c00      	lsrs	r0, r0, #16
   238ac:	1976      	adds	r6, r6, r5
   238ae:	fa1f fc81 	uxth.w	ip, r1
   238b2:	0c09      	lsrs	r1, r1, #16
   238b4:	fb04 660c 	mla	r6, r4, ip, r6
   238b8:	fb04 0001 	mla	r0, r4, r1, r0
   238bc:	eb00 4516 	add.w	r5, r0, r6, lsr #16
   238c0:	b2b6      	uxth	r6, r6
   238c2:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
   238c6:	0c2d      	lsrs	r5, r5, #16
   238c8:	4590      	cmp	r8, r2
   238ca:	f843 6b04 	str.w	r6, [r3], #4
   238ce:	d8e7      	bhi.n	238a0 <__multiply+0x80>
   238d0:	607d      	str	r5, [r7, #4]
   238d2:	f85a 5c04 	ldr.w	r5, [sl, #-4]
   238d6:	0c2d      	lsrs	r5, r5, #16
   238d8:	d021      	beq.n	2391e <__multiply+0xfe>
   238da:	f8d9 1000 	ldr.w	r1, [r9]
   238de:	46cc      	mov	ip, r9
   238e0:	9b02      	ldr	r3, [sp, #8]
   238e2:	464e      	mov	r6, r9
   238e4:	4608      	mov	r0, r1
   238e6:	2700      	movs	r7, #0
   238e8:	e000      	b.n	238ec <__multiply+0xcc>
   238ea:	4616      	mov	r6, r2
   238ec:	881c      	ldrh	r4, [r3, #0]
   238ee:	eb07 4710 	add.w	r7, r7, r0, lsr #16
   238f2:	4632      	mov	r2, r6
   238f4:	b289      	uxth	r1, r1
   238f6:	fb05 7704 	mla	r7, r5, r4, r7
   238fa:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
   238fe:	f842 1b04 	str.w	r1, [r2], #4
   23902:	f853 1b04 	ldr.w	r1, [r3], #4
   23906:	f85c 0f04 	ldr.w	r0, [ip, #4]!
   2390a:	0c09      	lsrs	r1, r1, #16
   2390c:	b284      	uxth	r4, r0
   2390e:	fb05 4101 	mla	r1, r5, r1, r4
   23912:	eb01 4117 	add.w	r1, r1, r7, lsr #16
   23916:	0c0f      	lsrs	r7, r1, #16
   23918:	4598      	cmp	r8, r3
   2391a:	d8e6      	bhi.n	238ea <__multiply+0xca>
   2391c:	6071      	str	r1, [r6, #4]
   2391e:	9a01      	ldr	r2, [sp, #4]
   23920:	f109 0904 	add.w	r9, r9, #4
   23924:	4552      	cmp	r2, sl
   23926:	d8b4      	bhi.n	23892 <__multiply+0x72>
   23928:	f1bb 0f00 	cmp.w	fp, #0
   2392c:	dd0e      	ble.n	2394c <__multiply+0x12c>
   2392e:	9905      	ldr	r1, [sp, #20]
   23930:	9a03      	ldr	r2, [sp, #12]
   23932:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   23936:	b94b      	cbnz	r3, 2394c <__multiply+0x12c>
   23938:	9904      	ldr	r1, [sp, #16]
   2393a:	465a      	mov	r2, fp
   2393c:	1f0b      	subs	r3, r1, #4
   2393e:	e002      	b.n	23946 <__multiply+0x126>
   23940:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   23944:	b909      	cbnz	r1, 2394a <__multiply+0x12a>
   23946:	3a01      	subs	r2, #1
   23948:	d1fa      	bne.n	23940 <__multiply+0x120>
   2394a:	4693      	mov	fp, r2
   2394c:	9a03      	ldr	r2, [sp, #12]
   2394e:	4610      	mov	r0, r2
   23950:	f8c2 b010 	str.w	fp, [r2, #16]
   23954:	b007      	add	sp, #28
   23956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2395a:	bf00      	nop

0002395c <__pow5mult>:
   2395c:	f012 0303 	ands.w	r3, r2, #3
   23960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23964:	4615      	mov	r5, r2
   23966:	4604      	mov	r4, r0
   23968:	4688      	mov	r8, r1
   2396a:	d127      	bne.n	239bc <__pow5mult+0x60>
   2396c:	10ad      	asrs	r5, r5, #2
   2396e:	d019      	beq.n	239a4 <__pow5mult+0x48>
   23970:	6a66      	ldr	r6, [r4, #36]	; 0x24
   23972:	2e00      	cmp	r6, #0
   23974:	d02e      	beq.n	239d4 <__pow5mult+0x78>
   23976:	68b7      	ldr	r7, [r6, #8]
   23978:	b92f      	cbnz	r7, 23986 <__pow5mult+0x2a>
   2397a:	e035      	b.n	239e8 <__pow5mult+0x8c>
   2397c:	106d      	asrs	r5, r5, #1
   2397e:	d011      	beq.n	239a4 <__pow5mult+0x48>
   23980:	683e      	ldr	r6, [r7, #0]
   23982:	b196      	cbz	r6, 239aa <__pow5mult+0x4e>
   23984:	4637      	mov	r7, r6
   23986:	07e8      	lsls	r0, r5, #31
   23988:	d5f8      	bpl.n	2397c <__pow5mult+0x20>
   2398a:	4641      	mov	r1, r8
   2398c:	463a      	mov	r2, r7
   2398e:	4620      	mov	r0, r4
   23990:	f7ff ff46 	bl	23820 <__multiply>
   23994:	4641      	mov	r1, r8
   23996:	4606      	mov	r6, r0
   23998:	4620      	mov	r0, r4
   2399a:	f7ff fe43 	bl	23624 <_Bfree>
   2399e:	106d      	asrs	r5, r5, #1
   239a0:	46b0      	mov	r8, r6
   239a2:	d1ed      	bne.n	23980 <__pow5mult+0x24>
   239a4:	4640      	mov	r0, r8
   239a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   239aa:	4639      	mov	r1, r7
   239ac:	463a      	mov	r2, r7
   239ae:	4620      	mov	r0, r4
   239b0:	f7ff ff36 	bl	23820 <__multiply>
   239b4:	6038      	str	r0, [r7, #0]
   239b6:	4607      	mov	r7, r0
   239b8:	6006      	str	r6, [r0, #0]
   239ba:	e7e4      	b.n	23986 <__pow5mult+0x2a>
   239bc:	f24c 1260 	movw	r2, #49504	; 0xc160
   239c0:	1e5e      	subs	r6, r3, #1
   239c2:	f2c0 0202 	movt	r2, #2
   239c6:	2300      	movs	r3, #0
   239c8:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
   239cc:	f7ff fe46 	bl	2365c <__multadd>
   239d0:	4680      	mov	r8, r0
   239d2:	e7cb      	b.n	2396c <__pow5mult+0x10>
   239d4:	2010      	movs	r0, #16
   239d6:	f7fb fb05 	bl	1efe4 <malloc>
   239da:	2300      	movs	r3, #0
   239dc:	4606      	mov	r6, r0
   239de:	6260      	str	r0, [r4, #36]	; 0x24
   239e0:	6043      	str	r3, [r0, #4]
   239e2:	6083      	str	r3, [r0, #8]
   239e4:	6003      	str	r3, [r0, #0]
   239e6:	60c3      	str	r3, [r0, #12]
   239e8:	4620      	mov	r0, r4
   239ea:	f240 2171 	movw	r1, #625	; 0x271
   239ee:	f7ff ff0d 	bl	2380c <__i2b>
   239f2:	2300      	movs	r3, #0
   239f4:	60b0      	str	r0, [r6, #8]
   239f6:	4607      	mov	r7, r0
   239f8:	6003      	str	r3, [r0, #0]
   239fa:	e7c4      	b.n	23986 <__pow5mult+0x2a>

000239fc <__lshift>:
   239fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23a00:	4690      	mov	r8, r2
   23a02:	690a      	ldr	r2, [r1, #16]
   23a04:	460c      	mov	r4, r1
   23a06:	ea4f 1668 	mov.w	r6, r8, asr #5
   23a0a:	688b      	ldr	r3, [r1, #8]
   23a0c:	eb06 0a02 	add.w	sl, r6, r2
   23a10:	4681      	mov	r9, r0
   23a12:	f10a 0501 	add.w	r5, sl, #1
   23a16:	6849      	ldr	r1, [r1, #4]
   23a18:	429d      	cmp	r5, r3
   23a1a:	dd03      	ble.n	23a24 <__lshift+0x28>
   23a1c:	005b      	lsls	r3, r3, #1
   23a1e:	3101      	adds	r1, #1
   23a20:	429d      	cmp	r5, r3
   23a22:	dcfb      	bgt.n	23a1c <__lshift+0x20>
   23a24:	4648      	mov	r0, r9
   23a26:	f7ff fdc7 	bl	235b8 <_Balloc>
   23a2a:	2e00      	cmp	r6, #0
   23a2c:	4607      	mov	r7, r0
   23a2e:	f100 0314 	add.w	r3, r0, #20
   23a32:	dd09      	ble.n	23a48 <__lshift+0x4c>
   23a34:	2200      	movs	r2, #0
   23a36:	4611      	mov	r1, r2
   23a38:	3201      	adds	r2, #1
   23a3a:	f843 1b04 	str.w	r1, [r3], #4
   23a3e:	42b2      	cmp	r2, r6
   23a40:	d1fa      	bne.n	23a38 <__lshift+0x3c>
   23a42:	eb07 0382 	add.w	r3, r7, r2, lsl #2
   23a46:	3314      	adds	r3, #20
   23a48:	6926      	ldr	r6, [r4, #16]
   23a4a:	f104 0214 	add.w	r2, r4, #20
   23a4e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
   23a52:	3614      	adds	r6, #20
   23a54:	f018 081f 	ands.w	r8, r8, #31
   23a58:	d020      	beq.n	23a9c <__lshift+0xa0>
   23a5a:	f1c8 0e20 	rsb	lr, r8, #32
   23a5e:	2000      	movs	r0, #0
   23a60:	e000      	b.n	23a64 <__lshift+0x68>
   23a62:	460b      	mov	r3, r1
   23a64:	f8d2 c000 	ldr.w	ip, [r2]
   23a68:	4619      	mov	r1, r3
   23a6a:	fa0c fc08 	lsl.w	ip, ip, r8
   23a6e:	ea4c 0000 	orr.w	r0, ip, r0
   23a72:	f841 0b04 	str.w	r0, [r1], #4
   23a76:	f852 0b04 	ldr.w	r0, [r2], #4
   23a7a:	4296      	cmp	r6, r2
   23a7c:	fa20 f00e 	lsr.w	r0, r0, lr
   23a80:	d8ef      	bhi.n	23a62 <__lshift+0x66>
   23a82:	6058      	str	r0, [r3, #4]
   23a84:	b108      	cbz	r0, 23a8a <__lshift+0x8e>
   23a86:	f10a 0502 	add.w	r5, sl, #2
   23a8a:	4648      	mov	r0, r9
   23a8c:	3d01      	subs	r5, #1
   23a8e:	4621      	mov	r1, r4
   23a90:	613d      	str	r5, [r7, #16]
   23a92:	f7ff fdc7 	bl	23624 <_Bfree>
   23a96:	4638      	mov	r0, r7
   23a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23a9c:	f852 1b04 	ldr.w	r1, [r2], #4
   23aa0:	4296      	cmp	r6, r2
   23aa2:	f843 1b04 	str.w	r1, [r3], #4
   23aa6:	d9f0      	bls.n	23a8a <__lshift+0x8e>
   23aa8:	f852 1b04 	ldr.w	r1, [r2], #4
   23aac:	4296      	cmp	r6, r2
   23aae:	f843 1b04 	str.w	r1, [r3], #4
   23ab2:	d8f3      	bhi.n	23a9c <__lshift+0xa0>
   23ab4:	e7e9      	b.n	23a8a <__lshift+0x8e>
   23ab6:	bf00      	nop

00023ab8 <__mcmp>:
   23ab8:	4603      	mov	r3, r0
   23aba:	690a      	ldr	r2, [r1, #16]
   23abc:	6900      	ldr	r0, [r0, #16]
   23abe:	b430      	push	{r4, r5}
   23ac0:	1a80      	subs	r0, r0, r2
   23ac2:	d110      	bne.n	23ae6 <__mcmp+0x2e>
   23ac4:	3204      	adds	r2, #4
   23ac6:	f103 0514 	add.w	r5, r3, #20
   23aca:	0092      	lsls	r2, r2, #2
   23acc:	189b      	adds	r3, r3, r2
   23ace:	1889      	adds	r1, r1, r2
   23ad0:	3304      	adds	r3, #4
   23ad2:	3104      	adds	r1, #4
   23ad4:	f853 4c04 	ldr.w	r4, [r3, #-4]
   23ad8:	3b04      	subs	r3, #4
   23ada:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   23ade:	4294      	cmp	r4, r2
   23ae0:	d103      	bne.n	23aea <__mcmp+0x32>
   23ae2:	429d      	cmp	r5, r3
   23ae4:	d3f6      	bcc.n	23ad4 <__mcmp+0x1c>
   23ae6:	bc30      	pop	{r4, r5}
   23ae8:	4770      	bx	lr
   23aea:	bf38      	it	cc
   23aec:	f04f 30ff 	movcc.w	r0, #4294967295
   23af0:	d3f9      	bcc.n	23ae6 <__mcmp+0x2e>
   23af2:	2001      	movs	r0, #1
   23af4:	e7f7      	b.n	23ae6 <__mcmp+0x2e>
   23af6:	bf00      	nop

00023af8 <__mdiff>:
   23af8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23afc:	460c      	mov	r4, r1
   23afe:	4606      	mov	r6, r0
   23b00:	4611      	mov	r1, r2
   23b02:	4620      	mov	r0, r4
   23b04:	4615      	mov	r5, r2
   23b06:	f7ff ffd7 	bl	23ab8 <__mcmp>
   23b0a:	1e07      	subs	r7, r0, #0
   23b0c:	d05b      	beq.n	23bc6 <__mdiff+0xce>
   23b0e:	db55      	blt.n	23bbc <__mdiff+0xc4>
   23b10:	2700      	movs	r7, #0
   23b12:	4630      	mov	r0, r6
   23b14:	6861      	ldr	r1, [r4, #4]
   23b16:	f7ff fd4f 	bl	235b8 <_Balloc>
   23b1a:	f8d4 8010 	ldr.w	r8, [r4, #16]
   23b1e:	692b      	ldr	r3, [r5, #16]
   23b20:	f104 0c14 	add.w	ip, r4, #20
   23b24:	f105 0914 	add.w	r9, r5, #20
   23b28:	2600      	movs	r6, #0
   23b2a:	eb04 0488 	add.w	r4, r4, r8, lsl #2
   23b2e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   23b32:	3414      	adds	r4, #20
   23b34:	3514      	adds	r5, #20
   23b36:	f100 0a14 	add.w	sl, r0, #20
   23b3a:	60c7      	str	r7, [r0, #12]
   23b3c:	f85c 7b04 	ldr.w	r7, [ip], #4
   23b40:	4653      	mov	r3, sl
   23b42:	f859 ab04 	ldr.w	sl, [r9], #4
   23b46:	4662      	mov	r2, ip
   23b48:	b2b9      	uxth	r1, r7
   23b4a:	1989      	adds	r1, r1, r6
   23b4c:	fa1f fb8a 	uxth.w	fp, sl
   23b50:	ebcb 0101 	rsb	r1, fp, r1
   23b54:	ea4f 461a 	mov.w	r6, sl, lsr #16
   23b58:	ebc6 4617 	rsb	r6, r6, r7, lsr #16
   23b5c:	eb06 4621 	add.w	r6, r6, r1, asr #16
   23b60:	b289      	uxth	r1, r1
   23b62:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
   23b66:	1436      	asrs	r6, r6, #16
   23b68:	454d      	cmp	r5, r9
   23b6a:	f843 1b04 	str.w	r1, [r3], #4
   23b6e:	469a      	mov	sl, r3
   23b70:	d8e4      	bhi.n	23b3c <__mdiff+0x44>
   23b72:	4564      	cmp	r4, ip
   23b74:	461f      	mov	r7, r3
   23b76:	d915      	bls.n	23ba4 <__mdiff+0xac>
   23b78:	f852 5b04 	ldr.w	r5, [r2], #4
   23b7c:	b2a9      	uxth	r1, r5
   23b7e:	0c2d      	lsrs	r5, r5, #16
   23b80:	198e      	adds	r6, r1, r6
   23b82:	eb05 4526 	add.w	r5, r5, r6, asr #16
   23b86:	b2b6      	uxth	r6, r6
   23b88:	ea46 4105 	orr.w	r1, r6, r5, lsl #16
   23b8c:	142e      	asrs	r6, r5, #16
   23b8e:	4294      	cmp	r4, r2
   23b90:	f843 1b04 	str.w	r1, [r3], #4
   23b94:	d8f0      	bhi.n	23b78 <__mdiff+0x80>
   23b96:	ea6f 030c 	mvn.w	r3, ip
   23b9a:	191b      	adds	r3, r3, r4
   23b9c:	f023 0303 	bic.w	r3, r3, #3
   23ba0:	3304      	adds	r3, #4
   23ba2:	18fb      	adds	r3, r7, r3
   23ba4:	b931      	cbnz	r1, 23bb4 <__mdiff+0xbc>
   23ba6:	3b04      	subs	r3, #4
   23ba8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   23bac:	f108 38ff 	add.w	r8, r8, #4294967295
   23bb0:	2a00      	cmp	r2, #0
   23bb2:	d0f9      	beq.n	23ba8 <__mdiff+0xb0>
   23bb4:	f8c0 8010 	str.w	r8, [r0, #16]
   23bb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23bbc:	4623      	mov	r3, r4
   23bbe:	2701      	movs	r7, #1
   23bc0:	462c      	mov	r4, r5
   23bc2:	461d      	mov	r5, r3
   23bc4:	e7a5      	b.n	23b12 <__mdiff+0x1a>
   23bc6:	4630      	mov	r0, r6
   23bc8:	4639      	mov	r1, r7
   23bca:	f7ff fcf5 	bl	235b8 <_Balloc>
   23bce:	2301      	movs	r3, #1
   23bd0:	6147      	str	r7, [r0, #20]
   23bd2:	6103      	str	r3, [r0, #16]
   23bd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00023bd8 <__ulp>:
   23bd8:	2300      	movs	r3, #0
   23bda:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
   23bde:	400b      	ands	r3, r1
   23be0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
   23be4:	2b00      	cmp	r3, #0
   23be6:	dd02      	ble.n	23bee <__ulp+0x16>
   23be8:	4619      	mov	r1, r3
   23bea:	2000      	movs	r0, #0
   23bec:	4770      	bx	lr
   23bee:	425b      	negs	r3, r3
   23bf0:	2100      	movs	r1, #0
   23bf2:	151b      	asrs	r3, r3, #20
   23bf4:	2b13      	cmp	r3, #19
   23bf6:	dd0b      	ble.n	23c10 <__ulp+0x38>
   23bf8:	2b32      	cmp	r3, #50	; 0x32
   23bfa:	dd02      	ble.n	23c02 <__ulp+0x2a>
   23bfc:	2301      	movs	r3, #1
   23bfe:	4618      	mov	r0, r3
   23c00:	4770      	bx	lr
   23c02:	2201      	movs	r2, #1
   23c04:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
   23c08:	fa02 f303 	lsl.w	r3, r2, r3
   23c0c:	4618      	mov	r0, r3
   23c0e:	4770      	bx	lr
   23c10:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   23c14:	2000      	movs	r0, #0
   23c16:	fa42 f103 	asr.w	r1, r2, r3
   23c1a:	4770      	bx	lr

00023c1c <__b2d>:
   23c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23c20:	f100 0614 	add.w	r6, r0, #20
   23c24:	6904      	ldr	r4, [r0, #16]
   23c26:	460f      	mov	r7, r1
   23c28:	3404      	adds	r4, #4
   23c2a:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
   23c2e:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   23c32:	46a0      	mov	r8, r4
   23c34:	4628      	mov	r0, r5
   23c36:	f7ff fd9d 	bl	23774 <__hi0bits>
   23c3a:	280a      	cmp	r0, #10
   23c3c:	f1c0 0320 	rsb	r3, r0, #32
   23c40:	603b      	str	r3, [r7, #0]
   23c42:	dc18      	bgt.n	23c76 <__b2d+0x5a>
   23c44:	42a6      	cmp	r6, r4
   23c46:	f1c0 010b 	rsb	r1, r0, #11
   23c4a:	fa25 f701 	lsr.w	r7, r5, r1
   23c4e:	bf38      	it	cc
   23c50:	f854 4c04 	ldrcc.w	r4, [r4, #-4]
   23c54:	f047 577e 	orr.w	r7, r7, #1065353216	; 0x3f800000
   23c58:	f447 03e0 	orr.w	r3, r7, #7340032	; 0x700000
   23c5c:	bf34      	ite	cc
   23c5e:	fa24 f101 	lsrcc.w	r1, r4, r1
   23c62:	2100      	movcs	r1, #0
   23c64:	3015      	adds	r0, #21
   23c66:	fa05 f500 	lsl.w	r5, r5, r0
   23c6a:	ea41 0205 	orr.w	r2, r1, r5
   23c6e:	4610      	mov	r0, r2
   23c70:	4619      	mov	r1, r3
   23c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23c76:	2100      	movs	r1, #0
   23c78:	42a6      	cmp	r6, r4
   23c7a:	d202      	bcs.n	23c82 <__b2d+0x66>
   23c7c:	f858 1c04 	ldr.w	r1, [r8, #-4]
   23c80:	3c04      	subs	r4, #4
   23c82:	f1b0 070b 	subs.w	r7, r0, #11
   23c86:	bf02      	ittt	eq
   23c88:	f045 557e 	orreq.w	r5, r5, #1065353216	; 0x3f800000
   23c8c:	460a      	moveq	r2, r1
   23c8e:	f445 03e0 	orreq.w	r3, r5, #7340032	; 0x700000
   23c92:	d0ec      	beq.n	23c6e <__b2d+0x52>
   23c94:	42b4      	cmp	r4, r6
   23c96:	fa05 f507 	lsl.w	r5, r5, r7
   23c9a:	f1c0 002b 	rsb	r0, r0, #43	; 0x2b
   23c9e:	f045 557e 	orr.w	r5, r5, #1065353216	; 0x3f800000
   23ca2:	bf88      	it	hi
   23ca4:	f854 4c04 	ldrhi.w	r4, [r4, #-4]
   23ca8:	fa21 fc00 	lsr.w	ip, r1, r0
   23cac:	f445 05e0 	orr.w	r5, r5, #7340032	; 0x700000
   23cb0:	fa01 f107 	lsl.w	r1, r1, r7
   23cb4:	ea45 030c 	orr.w	r3, r5, ip
   23cb8:	bf8c      	ite	hi
   23cba:	fa24 f000 	lsrhi.w	r0, r4, r0
   23cbe:	2000      	movls	r0, #0
   23cc0:	ea40 0201 	orr.w	r2, r0, r1
   23cc4:	4619      	mov	r1, r3
   23cc6:	4610      	mov	r0, r2
   23cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023ccc <__d2b>:
   23ccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23cd0:	b083      	sub	sp, #12
   23cd2:	2101      	movs	r1, #1
   23cd4:	461d      	mov	r5, r3
   23cd6:	4614      	mov	r4, r2
   23cd8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   23cda:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   23cdc:	f7ff fc6c 	bl	235b8 <_Balloc>
   23ce0:	f3c5 590a 	ubfx	r9, r5, #20, #11
   23ce4:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
   23ce8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
   23cec:	9301      	str	r3, [sp, #4]
   23cee:	4680      	mov	r8, r0
   23cf0:	f1b9 0f00 	cmp.w	r9, #0
   23cf4:	d002      	beq.n	23cfc <__d2b+0x30>
   23cf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   23cfa:	9301      	str	r3, [sp, #4]
   23cfc:	2c00      	cmp	r4, #0
   23cfe:	d026      	beq.n	23d4e <__d2b+0x82>
   23d00:	a802      	add	r0, sp, #8
   23d02:	f840 4d08 	str.w	r4, [r0, #-8]!
   23d06:	4668      	mov	r0, sp
   23d08:	f7ff fd52 	bl	237b0 <__lo0bits>
   23d0c:	9b01      	ldr	r3, [sp, #4]
   23d0e:	2800      	cmp	r0, #0
   23d10:	d135      	bne.n	23d7e <__d2b+0xb2>
   23d12:	9a00      	ldr	r2, [sp, #0]
   23d14:	f8c8 2014 	str.w	r2, [r8, #20]
   23d18:	2b00      	cmp	r3, #0
   23d1a:	bf0c      	ite	eq
   23d1c:	2401      	moveq	r4, #1
   23d1e:	2402      	movne	r4, #2
   23d20:	f8c8 3018 	str.w	r3, [r8, #24]
   23d24:	f8c8 4010 	str.w	r4, [r8, #16]
   23d28:	f1b9 0f00 	cmp.w	r9, #0
   23d2c:	d11d      	bne.n	23d6a <__d2b+0x9e>
   23d2e:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   23d32:	f5a0 6086 	sub.w	r0, r0, #1072	; 0x430
   23d36:	3802      	subs	r0, #2
   23d38:	6038      	str	r0, [r7, #0]
   23d3a:	6918      	ldr	r0, [r3, #16]
   23d3c:	0164      	lsls	r4, r4, #5
   23d3e:	f7ff fd19 	bl	23774 <__hi0bits>
   23d42:	1a24      	subs	r4, r4, r0
   23d44:	6034      	str	r4, [r6, #0]
   23d46:	4640      	mov	r0, r8
   23d48:	b003      	add	sp, #12
   23d4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23d4e:	a801      	add	r0, sp, #4
   23d50:	f7ff fd2e 	bl	237b0 <__lo0bits>
   23d54:	2301      	movs	r3, #1
   23d56:	461c      	mov	r4, r3
   23d58:	f8c8 3010 	str.w	r3, [r8, #16]
   23d5c:	9b01      	ldr	r3, [sp, #4]
   23d5e:	f8c8 3014 	str.w	r3, [r8, #20]
   23d62:	3020      	adds	r0, #32
   23d64:	f1b9 0f00 	cmp.w	r9, #0
   23d68:	d0e1      	beq.n	23d2e <__d2b+0x62>
   23d6a:	f5a9 6986 	sub.w	r9, r9, #1072	; 0x430
   23d6e:	f1c0 0335 	rsb	r3, r0, #53	; 0x35
   23d72:	f1a9 0903 	sub.w	r9, r9, #3
   23d76:	4448      	add	r0, r9
   23d78:	6038      	str	r0, [r7, #0]
   23d7a:	6033      	str	r3, [r6, #0]
   23d7c:	e7e3      	b.n	23d46 <__d2b+0x7a>
   23d7e:	f1c0 0220 	rsb	r2, r0, #32
   23d82:	9900      	ldr	r1, [sp, #0]
   23d84:	fa03 f202 	lsl.w	r2, r3, r2
   23d88:	fa23 f300 	lsr.w	r3, r3, r0
   23d8c:	430a      	orrs	r2, r1
   23d8e:	9301      	str	r3, [sp, #4]
   23d90:	f8c8 2014 	str.w	r2, [r8, #20]
   23d94:	e7c0      	b.n	23d18 <__d2b+0x4c>
   23d96:	bf00      	nop

00023d98 <__ratio>:
   23d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23d9c:	b083      	sub	sp, #12
   23d9e:	460c      	mov	r4, r1
   23da0:	4669      	mov	r1, sp
   23da2:	4605      	mov	r5, r0
   23da4:	f7ff ff3a 	bl	23c1c <__b2d>
   23da8:	4606      	mov	r6, r0
   23daa:	460f      	mov	r7, r1
   23dac:	4620      	mov	r0, r4
   23dae:	a901      	add	r1, sp, #4
   23db0:	f7ff ff34 	bl	23c1c <__b2d>
   23db4:	460b      	mov	r3, r1
   23db6:	4602      	mov	r2, r0
   23db8:	6929      	ldr	r1, [r5, #16]
   23dba:	6920      	ldr	r0, [r4, #16]
   23dbc:	9c00      	ldr	r4, [sp, #0]
   23dbe:	1a09      	subs	r1, r1, r0
   23dc0:	9801      	ldr	r0, [sp, #4]
   23dc2:	0149      	lsls	r1, r1, #5
   23dc4:	1a20      	subs	r0, r4, r0
   23dc6:	1841      	adds	r1, r0, r1
   23dc8:	2900      	cmp	r1, #0
   23dca:	bfdc      	itt	le
   23dcc:	eba3 5101 	suble.w	r1, r3, r1, lsl #20
   23dd0:	460b      	movle	r3, r1
   23dd2:	dd03      	ble.n	23ddc <__ratio+0x44>
   23dd4:	0509      	lsls	r1, r1, #20
   23dd6:	eb01 0907 	add.w	r9, r1, r7
   23dda:	464f      	mov	r7, r9
   23ddc:	4630      	mov	r0, r6
   23dde:	4639      	mov	r1, r7
   23de0:	f7ee fc28 	bl	12634 <__aeabi_ddiv>
   23de4:	b003      	add	sp, #12
   23de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23dea:	bf00      	nop

00023dec <_mprec_log10>:
   23dec:	2817      	cmp	r0, #23
   23dee:	b510      	push	{r4, lr}
   23df0:	4604      	mov	r4, r0
   23df2:	dd0c      	ble.n	23e0e <_mprec_log10+0x22>
   23df4:	2100      	movs	r1, #0
   23df6:	2000      	movs	r0, #0
   23df8:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
   23dfc:	2300      	movs	r3, #0
   23dfe:	2200      	movs	r2, #0
   23e00:	f2c4 0324 	movt	r3, #16420	; 0x4024
   23e04:	f7ee faec 	bl	123e0 <__aeabi_dmul>
   23e08:	3c01      	subs	r4, #1
   23e0a:	d1f7      	bne.n	23dfc <_mprec_log10+0x10>
   23e0c:	bd10      	pop	{r4, pc}
   23e0e:	f24c 1360 	movw	r3, #49504	; 0xc160
   23e12:	f2c0 0302 	movt	r3, #2
   23e16:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   23e1a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
   23e1e:	bd10      	pop	{r4, pc}

00023e20 <__copybits>:
   23e20:	b470      	push	{r4, r5, r6}
   23e22:	3901      	subs	r1, #1
   23e24:	6916      	ldr	r6, [r2, #16]
   23e26:	f102 0314 	add.w	r3, r2, #20
   23e2a:	1149      	asrs	r1, r1, #5
   23e2c:	3101      	adds	r1, #1
   23e2e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   23e32:	3614      	adds	r6, #20
   23e34:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   23e38:	42b3      	cmp	r3, r6
   23e3a:	d20c      	bcs.n	23e56 <__copybits+0x36>
   23e3c:	4604      	mov	r4, r0
   23e3e:	f853 5b04 	ldr.w	r5, [r3], #4
   23e42:	429e      	cmp	r6, r3
   23e44:	f844 5b04 	str.w	r5, [r4], #4
   23e48:	d8f9      	bhi.n	23e3e <__copybits+0x1e>
   23e4a:	1ab3      	subs	r3, r6, r2
   23e4c:	3b15      	subs	r3, #21
   23e4e:	f023 0303 	bic.w	r3, r3, #3
   23e52:	3304      	adds	r3, #4
   23e54:	18c0      	adds	r0, r0, r3
   23e56:	4281      	cmp	r1, r0
   23e58:	d904      	bls.n	23e64 <__copybits+0x44>
   23e5a:	2300      	movs	r3, #0
   23e5c:	f840 3b04 	str.w	r3, [r0], #4
   23e60:	4281      	cmp	r1, r0
   23e62:	d8fb      	bhi.n	23e5c <__copybits+0x3c>
   23e64:	bc70      	pop	{r4, r5, r6}
   23e66:	4770      	bx	lr

00023e68 <__any_on>:
   23e68:	6902      	ldr	r2, [r0, #16]
   23e6a:	114b      	asrs	r3, r1, #5
   23e6c:	b410      	push	{r4}
   23e6e:	429a      	cmp	r2, r3
   23e70:	db01      	blt.n	23e76 <__any_on+0xe>
   23e72:	461a      	mov	r2, r3
   23e74:	dc18      	bgt.n	23ea8 <__any_on+0x40>
   23e76:	3204      	adds	r2, #4
   23e78:	f100 0114 	add.w	r1, r0, #20
   23e7c:	eb00 0382 	add.w	r3, r0, r2, lsl #2
   23e80:	1d1c      	adds	r4, r3, #4
   23e82:	42a1      	cmp	r1, r4
   23e84:	d21d      	bcs.n	23ec2 <__any_on+0x5a>
   23e86:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   23e8a:	b952      	cbnz	r2, 23ea2 <__any_on+0x3a>
   23e8c:	1a59      	subs	r1, r3, r1
   23e8e:	3103      	adds	r1, #3
   23e90:	f021 0103 	bic.w	r1, r1, #3
   23e94:	1a59      	subs	r1, r3, r1
   23e96:	428b      	cmp	r3, r1
   23e98:	d013      	beq.n	23ec2 <__any_on+0x5a>
   23e9a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   23e9e:	2a00      	cmp	r2, #0
   23ea0:	d0f9      	beq.n	23e96 <__any_on+0x2e>
   23ea2:	2001      	movs	r0, #1
   23ea4:	bc10      	pop	{r4}
   23ea6:	4770      	bx	lr
   23ea8:	f011 011f 	ands.w	r1, r1, #31
   23eac:	d0e3      	beq.n	23e76 <__any_on+0xe>
   23eae:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   23eb2:	695b      	ldr	r3, [r3, #20]
   23eb4:	fa23 f401 	lsr.w	r4, r3, r1
   23eb8:	fa04 f101 	lsl.w	r1, r4, r1
   23ebc:	4299      	cmp	r1, r3
   23ebe:	d1f0      	bne.n	23ea2 <__any_on+0x3a>
   23ec0:	e7d9      	b.n	23e76 <__any_on+0xe>
   23ec2:	2000      	movs	r0, #0
   23ec4:	e7ee      	b.n	23ea4 <__any_on+0x3c>
   23ec6:	bf00      	nop

00023ec8 <__sread>:
   23ec8:	b510      	push	{r4, lr}
   23eca:	460c      	mov	r4, r1
   23ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   23ed0:	f000 fed4 	bl	24c7c <_read_r>
   23ed4:	2800      	cmp	r0, #0
   23ed6:	bfab      	itete	ge
   23ed8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   23eda:	89a3      	ldrhlt	r3, [r4, #12]
   23edc:	181b      	addge	r3, r3, r0
   23ede:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   23ee2:	bfac      	ite	ge
   23ee4:	6563      	strge	r3, [r4, #84]	; 0x54
   23ee6:	81a3      	strhlt	r3, [r4, #12]
   23ee8:	bd10      	pop	{r4, pc}
   23eea:	bf00      	nop

00023eec <__seofread>:
   23eec:	2000      	movs	r0, #0
   23eee:	4770      	bx	lr

00023ef0 <__swrite>:
   23ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23ef4:	461d      	mov	r5, r3
   23ef6:	898b      	ldrh	r3, [r1, #12]
   23ef8:	4616      	mov	r6, r2
   23efa:	460c      	mov	r4, r1
   23efc:	4607      	mov	r7, r0
   23efe:	05da      	lsls	r2, r3, #23
   23f00:	d506      	bpl.n	23f10 <__swrite+0x20>
   23f02:	2302      	movs	r3, #2
   23f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   23f08:	2200      	movs	r2, #0
   23f0a:	f000 fea1 	bl	24c50 <_lseek_r>
   23f0e:	89a3      	ldrh	r3, [r4, #12]
   23f10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   23f14:	4638      	mov	r0, r7
   23f16:	81a3      	strh	r3, [r4, #12]
   23f18:	4632      	mov	r2, r6
   23f1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   23f1e:	462b      	mov	r3, r5
   23f20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   23f24:	f7fd be24 	b.w	21b70 <_write_r>

00023f28 <__sseek>:
   23f28:	b510      	push	{r4, lr}
   23f2a:	460c      	mov	r4, r1
   23f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   23f30:	f000 fe8e 	bl	24c50 <_lseek_r>
   23f34:	89a3      	ldrh	r3, [r4, #12]
   23f36:	1c41      	adds	r1, r0, #1
   23f38:	bf15      	itete	ne
   23f3a:	6560      	strne	r0, [r4, #84]	; 0x54
   23f3c:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   23f40:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   23f44:	81a3      	strheq	r3, [r4, #12]
   23f46:	bf18      	it	ne
   23f48:	81a3      	strhne	r3, [r4, #12]
   23f4a:	bd10      	pop	{r4, pc}

00023f4c <__sclose>:
   23f4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   23f50:	f000 bde0 	b.w	24b14 <_close_r>

00023f54 <__ssprint_r>:
   23f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23f58:	b085      	sub	sp, #20
   23f5a:	6894      	ldr	r4, [r2, #8]
   23f5c:	4691      	mov	r9, r2
   23f5e:	9003      	str	r0, [sp, #12]
   23f60:	460d      	mov	r5, r1
   23f62:	6817      	ldr	r7, [r2, #0]
   23f64:	2c00      	cmp	r4, #0
   23f66:	d07d      	beq.n	24064 <__ssprint_r+0x110>
   23f68:	f04f 0a00 	mov.w	sl, #0
   23f6c:	6808      	ldr	r0, [r1, #0]
   23f6e:	688b      	ldr	r3, [r1, #8]
   23f70:	4654      	mov	r4, sl
   23f72:	2c00      	cmp	r4, #0
   23f74:	d051      	beq.n	2401a <__ssprint_r+0xc6>
   23f76:	429c      	cmp	r4, r3
   23f78:	461e      	mov	r6, r3
   23f7a:	4698      	mov	r8, r3
   23f7c:	bf3c      	itt	cc
   23f7e:	4626      	movcc	r6, r4
   23f80:	46a0      	movcc	r8, r4
   23f82:	d33a      	bcc.n	23ffa <__ssprint_r+0xa6>
   23f84:	f8b5 e00c 	ldrh.w	lr, [r5, #12]
   23f88:	f41e 6f90 	tst.w	lr, #1152	; 0x480
   23f8c:	d035      	beq.n	23ffa <__ssprint_r+0xa6>
   23f8e:	696b      	ldr	r3, [r5, #20]
   23f90:	1c62      	adds	r2, r4, #1
   23f92:	6929      	ldr	r1, [r5, #16]
   23f94:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
   23f98:	1a43      	subs	r3, r0, r1
   23f9a:	18d0      	adds	r0, r2, r3
   23f9c:	eb0b 7bdb 	add.w	fp, fp, fp, lsr #31
   23fa0:	ea4f 0b6b 	mov.w	fp, fp, asr #1
   23fa4:	4583      	cmp	fp, r0
   23fa6:	465a      	mov	r2, fp
   23fa8:	bf3c      	itt	cc
   23faa:	4683      	movcc	fp, r0
   23fac:	4602      	movcc	r2, r0
   23fae:	f41e 6f80 	tst.w	lr, #1024	; 0x400
   23fb2:	9803      	ldr	r0, [sp, #12]
   23fb4:	d036      	beq.n	24024 <__ssprint_r+0xd0>
   23fb6:	4611      	mov	r1, r2
   23fb8:	9301      	str	r3, [sp, #4]
   23fba:	f7fb f823 	bl	1f004 <_malloc_r>
   23fbe:	9b01      	ldr	r3, [sp, #4]
   23fc0:	2800      	cmp	r0, #0
   23fc2:	d03a      	beq.n	2403a <__ssprint_r+0xe6>
   23fc4:	6929      	ldr	r1, [r5, #16]
   23fc6:	461a      	mov	r2, r3
   23fc8:	9301      	str	r3, [sp, #4]
   23fca:	9002      	str	r0, [sp, #8]
   23fcc:	f7fb fb4c 	bl	1f668 <memcpy>
   23fd0:	89aa      	ldrh	r2, [r5, #12]
   23fd2:	9b01      	ldr	r3, [sp, #4]
   23fd4:	f8dd c008 	ldr.w	ip, [sp, #8]
   23fd8:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   23fdc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   23fe0:	81aa      	strh	r2, [r5, #12]
   23fe2:	4626      	mov	r6, r4
   23fe4:	46a0      	mov	r8, r4
   23fe6:	eb0c 0003 	add.w	r0, ip, r3
   23fea:	f8c5 c010 	str.w	ip, [r5, #16]
   23fee:	ebc3 030b 	rsb	r3, r3, fp
   23ff2:	6028      	str	r0, [r5, #0]
   23ff4:	f8c5 b014 	str.w	fp, [r5, #20]
   23ff8:	60ab      	str	r3, [r5, #8]
   23ffa:	4642      	mov	r2, r8
   23ffc:	4651      	mov	r1, sl
   23ffe:	f7fb fbab 	bl	1f758 <memmove>
   24002:	f8d9 2008 	ldr.w	r2, [r9, #8]
   24006:	68ab      	ldr	r3, [r5, #8]
   24008:	6828      	ldr	r0, [r5, #0]
   2400a:	1b14      	subs	r4, r2, r4
   2400c:	1b9b      	subs	r3, r3, r6
   2400e:	60ab      	str	r3, [r5, #8]
   24010:	4440      	add	r0, r8
   24012:	6028      	str	r0, [r5, #0]
   24014:	f8c9 4008 	str.w	r4, [r9, #8]
   24018:	b1f4      	cbz	r4, 24058 <__ssprint_r+0x104>
   2401a:	f8d7 a000 	ldr.w	sl, [r7]
   2401e:	687c      	ldr	r4, [r7, #4]
   24020:	3708      	adds	r7, #8
   24022:	e7a6      	b.n	23f72 <__ssprint_r+0x1e>
   24024:	9301      	str	r3, [sp, #4]
   24026:	f7fb fce5 	bl	1f9f4 <_realloc_r>
   2402a:	9b01      	ldr	r3, [sp, #4]
   2402c:	4684      	mov	ip, r0
   2402e:	2800      	cmp	r0, #0
   24030:	d1d7      	bne.n	23fe2 <__ssprint_r+0x8e>
   24032:	9803      	ldr	r0, [sp, #12]
   24034:	6929      	ldr	r1, [r5, #16]
   24036:	f7ff f8e1 	bl	231fc <_free_r>
   2403a:	9a03      	ldr	r2, [sp, #12]
   2403c:	230c      	movs	r3, #12
   2403e:	f04f 30ff 	mov.w	r0, #4294967295
   24042:	6013      	str	r3, [r2, #0]
   24044:	2300      	movs	r3, #0
   24046:	89aa      	ldrh	r2, [r5, #12]
   24048:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   2404c:	81aa      	strh	r2, [r5, #12]
   2404e:	f8c9 3008 	str.w	r3, [r9, #8]
   24052:	f8c9 3004 	str.w	r3, [r9, #4]
   24056:	e002      	b.n	2405e <__ssprint_r+0x10a>
   24058:	4620      	mov	r0, r4
   2405a:	f8c9 4004 	str.w	r4, [r9, #4]
   2405e:	b005      	add	sp, #20
   24060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24064:	6054      	str	r4, [r2, #4]
   24066:	4620      	mov	r0, r4
   24068:	e7f9      	b.n	2405e <__ssprint_r+0x10a>
   2406a:	bf00      	nop

0002406c <_svfiprintf_r>:
   2406c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24070:	b0ad      	sub	sp, #180	; 0xb4
   24072:	4689      	mov	r9, r1
   24074:	9307      	str	r3, [sp, #28]
   24076:	898b      	ldrh	r3, [r1, #12]
   24078:	9002      	str	r0, [sp, #8]
   2407a:	061b      	lsls	r3, r3, #24
   2407c:	d503      	bpl.n	24086 <_svfiprintf_r+0x1a>
   2407e:	690b      	ldr	r3, [r1, #16]
   24080:	2b00      	cmp	r3, #0
   24082:	f000 84db 	beq.w	24a3c <_svfiprintf_r+0x9d0>
   24086:	4615      	mov	r5, r2
   24088:	f10d 069f 	add.w	r6, sp, #159	; 0x9f
   2408c:	f10d 0aa0 	add.w	sl, sp, #160	; 0xa0
   24090:	2300      	movs	r3, #0
   24092:	9601      	str	r6, [sp, #4]
   24094:	ac0e      	add	r4, sp, #56	; 0x38
   24096:	ebc6 060a 	rsb	r6, r6, sl
   2409a:	9308      	str	r3, [sp, #32]
   2409c:	9305      	str	r3, [sp, #20]
   2409e:	960d      	str	r6, [sp, #52]	; 0x34
   240a0:	9428      	str	r4, [sp, #160]	; 0xa0
   240a2:	932a      	str	r3, [sp, #168]	; 0xa8
   240a4:	9329      	str	r3, [sp, #164]	; 0xa4
   240a6:	782b      	ldrb	r3, [r5, #0]
   240a8:	f1b3 0225 	subs.w	r2, r3, #37	; 0x25
   240ac:	bf18      	it	ne
   240ae:	2201      	movne	r2, #1
   240b0:	2b00      	cmp	r3, #0
   240b2:	bf0c      	ite	eq
   240b4:	2300      	moveq	r3, #0
   240b6:	f002 0301 	andne.w	r3, r2, #1
   240ba:	2b00      	cmp	r3, #0
   240bc:	f000 836d 	beq.w	2479a <_svfiprintf_r+0x72e>
   240c0:	462a      	mov	r2, r5
   240c2:	462e      	mov	r6, r5
   240c4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   240c8:	3601      	adds	r6, #1
   240ca:	1c19      	adds	r1, r3, #0
   240cc:	bf18      	it	ne
   240ce:	2101      	movne	r1, #1
   240d0:	2b25      	cmp	r3, #37	; 0x25
   240d2:	bf0c      	ite	eq
   240d4:	2300      	moveq	r3, #0
   240d6:	f001 0301 	andne.w	r3, r1, #1
   240da:	2b00      	cmp	r3, #0
   240dc:	d1f2      	bne.n	240c4 <_svfiprintf_r+0x58>
   240de:	1b77      	subs	r7, r6, r5
   240e0:	d00e      	beq.n	24100 <_svfiprintf_r+0x94>
   240e2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   240e4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   240e6:	3301      	adds	r3, #1
   240e8:	e884 00a0 	stmia.w	r4, {r5, r7}
   240ec:	2b07      	cmp	r3, #7
   240ee:	443a      	add	r2, r7
   240f0:	9329      	str	r3, [sp, #164]	; 0xa4
   240f2:	922a      	str	r2, [sp, #168]	; 0xa8
   240f4:	f300 83ae 	bgt.w	24854 <_svfiprintf_r+0x7e8>
   240f8:	3408      	adds	r4, #8
   240fa:	9805      	ldr	r0, [sp, #20]
   240fc:	19c0      	adds	r0, r0, r7
   240fe:	9005      	str	r0, [sp, #20]
   24100:	7833      	ldrb	r3, [r6, #0]
   24102:	2b00      	cmp	r3, #0
   24104:	f000 834b 	beq.w	2479e <_svfiprintf_r+0x732>
   24108:	2200      	movs	r2, #0
   2410a:	7873      	ldrb	r3, [r6, #1]
   2410c:	1c75      	adds	r5, r6, #1
   2410e:	f04f 38ff 	mov.w	r8, #4294967295
   24112:	4693      	mov	fp, r2
   24114:	2100      	movs	r1, #0
   24116:	9206      	str	r2, [sp, #24]
   24118:	f88d 10af 	strb.w	r1, [sp, #175]	; 0xaf
   2411c:	3501      	adds	r5, #1
   2411e:	f1a3 0120 	sub.w	r1, r3, #32
   24122:	2958      	cmp	r1, #88	; 0x58
   24124:	f200 824d 	bhi.w	245c2 <_svfiprintf_r+0x556>
   24128:	e8df f011 	tbh	[pc, r1, lsl #1]
   2412c:	024b0190 	.word	0x024b0190
   24130:	018c024b 	.word	0x018c024b
   24134:	024b024b 	.word	0x024b024b
   24138:	024b024b 	.word	0x024b024b
   2413c:	024b024b 	.word	0x024b024b
   24140:	01ab00ff 	.word	0x01ab00ff
   24144:	010c024b 	.word	0x010c024b
   24148:	024b01ae 	.word	0x024b01ae
   2414c:	019601a7 	.word	0x019601a7
   24150:	01960196 	.word	0x01960196
   24154:	01960196 	.word	0x01960196
   24158:	01960196 	.word	0x01960196
   2415c:	01960196 	.word	0x01960196
   24160:	024b024b 	.word	0x024b024b
   24164:	024b024b 	.word	0x024b024b
   24168:	024b024b 	.word	0x024b024b
   2416c:	024b024b 	.word	0x024b024b
   24170:	024b024b 	.word	0x024b024b
   24174:	024b0059 	.word	0x024b0059
   24178:	024b024b 	.word	0x024b024b
   2417c:	024b024b 	.word	0x024b024b
   24180:	024b024b 	.word	0x024b024b
   24184:	024b024b 	.word	0x024b024b
   24188:	00f5024b 	.word	0x00f5024b
   2418c:	024b024b 	.word	0x024b024b
   24190:	024b024b 	.word	0x024b024b
   24194:	00be024b 	.word	0x00be024b
   24198:	024b024b 	.word	0x024b024b
   2419c:	024b0165 	.word	0x024b0165
   241a0:	024b024b 	.word	0x024b024b
   241a4:	024b024b 	.word	0x024b024b
   241a8:	024b024b 	.word	0x024b024b
   241ac:	024b024b 	.word	0x024b024b
   241b0:	0110024b 	.word	0x0110024b
   241b4:	024b005b 	.word	0x024b005b
   241b8:	024b024b 	.word	0x024b024b
   241bc:	005b0219 	.word	0x005b0219
   241c0:	024b024b 	.word	0x024b024b
   241c4:	024b020c 	.word	0x024b020c
   241c8:	00f7021d 	.word	0x00f7021d
   241cc:	01cd01d1 	.word	0x01cd01d1
   241d0:	01e9024b 	.word	0x01e9024b
   241d4:	00c0024b 	.word	0x00c0024b
   241d8:	024b024b 	.word	0x024b024b
   241dc:	0232      	.short	0x0232
   241de:	f04b 0b10 	orr.w	fp, fp, #16
   241e2:	f01b 0f20 	tst.w	fp, #32
   241e6:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
   241ea:	f000 837a 	beq.w	248e2 <_svfiprintf_r+0x876>
   241ee:	9e07      	ldr	r6, [sp, #28]
   241f0:	1df3      	adds	r3, r6, #7
   241f2:	f023 0307 	bic.w	r3, r3, #7
   241f6:	f103 0608 	add.w	r6, r3, #8
   241fa:	9607      	str	r6, [sp, #28]
   241fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   24200:	4616      	mov	r6, r2
   24202:	461f      	mov	r7, r3
   24204:	2a00      	cmp	r2, #0
   24206:	f173 0000 	sbcs.w	r0, r3, #0
   2420a:	f2c0 83c7 	blt.w	2499c <_svfiprintf_r+0x930>
   2420e:	ea56 0107 	orrs.w	r1, r6, r7
   24212:	f04f 0301 	mov.w	r3, #1
   24216:	bf0c      	ite	eq
   24218:	2200      	moveq	r2, #0
   2421a:	2201      	movne	r2, #1
   2421c:	f1b8 0f00 	cmp.w	r8, #0
   24220:	bfa8      	it	ge
   24222:	f02b 0b80 	bicge.w	fp, fp, #128	; 0x80
   24226:	f1b8 0f00 	cmp.w	r8, #0
   2422a:	bf18      	it	ne
   2422c:	f042 0201 	orrne.w	r2, r2, #1
   24230:	2a00      	cmp	r2, #0
   24232:	d05d      	beq.n	242f0 <_svfiprintf_r+0x284>
   24234:	2b01      	cmp	r3, #1
   24236:	f000 81d4 	beq.w	245e2 <_svfiprintf_r+0x576>
   2423a:	2b02      	cmp	r3, #2
   2423c:	bf1c      	itt	ne
   2423e:	4652      	movne	r2, sl
   24240:	46ac      	movne	ip, r5
   24242:	d101      	bne.n	24248 <_svfiprintf_r+0x1dc>
   24244:	e332      	b.n	248ac <_svfiprintf_r+0x840>
   24246:	462a      	mov	r2, r5
   24248:	08f3      	lsrs	r3, r6, #3
   2424a:	08f8      	lsrs	r0, r7, #3
   2424c:	ea43 7347 	orr.w	r3, r3, r7, lsl #29
   24250:	f006 0107 	and.w	r1, r6, #7
   24254:	4607      	mov	r7, r0
   24256:	461e      	mov	r6, r3
   24258:	1e55      	subs	r5, r2, #1
   2425a:	ea56 0007 	orrs.w	r0, r6, r7
   2425e:	f101 0330 	add.w	r3, r1, #48	; 0x30
   24262:	f802 3c01 	strb.w	r3, [r2, #-1]
   24266:	d1ee      	bne.n	24246 <_svfiprintf_r+0x1da>
   24268:	f01b 0f01 	tst.w	fp, #1
   2426c:	950a      	str	r5, [sp, #40]	; 0x28
   2426e:	4665      	mov	r5, ip
   24270:	f000 81de 	beq.w	24630 <_svfiprintf_r+0x5c4>
   24274:	2b30      	cmp	r3, #48	; 0x30
   24276:	f000 83f0 	beq.w	24a5a <_svfiprintf_r+0x9ee>
   2427a:	1e93      	subs	r3, r2, #2
   2427c:	930a      	str	r3, [sp, #40]	; 0x28
   2427e:	ebc3 060a 	rsb	r6, r3, sl
   24282:	2330      	movs	r3, #48	; 0x30
   24284:	9604      	str	r6, [sp, #16]
   24286:	f802 3c02 	strb.w	r3, [r2, #-2]
   2428a:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   2428e:	9e04      	ldr	r6, [sp, #16]
   24290:	9809      	ldr	r0, [sp, #36]	; 0x24
   24292:	f89d 30af 	ldrb.w	r3, [sp, #175]	; 0xaf
   24296:	4286      	cmp	r6, r0
   24298:	bfb8      	it	lt
   2429a:	4606      	movlt	r6, r0
   2429c:	9603      	str	r6, [sp, #12]
   2429e:	2b00      	cmp	r3, #0
   242a0:	d066      	beq.n	24370 <_svfiprintf_r+0x304>
   242a2:	3601      	adds	r6, #1
   242a4:	9603      	str	r6, [sp, #12]
   242a6:	e063      	b.n	24370 <_svfiprintf_r+0x304>
   242a8:	f04b 0b10 	orr.w	fp, fp, #16
   242ac:	f01b 0f20 	tst.w	fp, #32
   242b0:	f000 833a 	beq.w	24928 <_svfiprintf_r+0x8bc>
   242b4:	9e07      	ldr	r6, [sp, #28]
   242b6:	2301      	movs	r3, #1
   242b8:	1df2      	adds	r2, r6, #7
   242ba:	f022 0207 	bic.w	r2, r2, #7
   242be:	f102 0608 	add.w	r6, r2, #8
   242c2:	9607      	str	r6, [sp, #28]
   242c4:	e9d2 6700 	ldrd	r6, r7, [r2]
   242c8:	ea56 0007 	orrs.w	r0, r6, r7
   242cc:	bf0c      	ite	eq
   242ce:	2200      	moveq	r2, #0
   242d0:	2201      	movne	r2, #1
   242d2:	2100      	movs	r1, #0
   242d4:	f1b8 0f00 	cmp.w	r8, #0
   242d8:	bfa8      	it	ge
   242da:	f02b 0b80 	bicge.w	fp, fp, #128	; 0x80
   242de:	f1b8 0f00 	cmp.w	r8, #0
   242e2:	bf18      	it	ne
   242e4:	f042 0201 	orrne.w	r2, r2, #1
   242e8:	f88d 10af 	strb.w	r1, [sp, #175]	; 0xaf
   242ec:	2a00      	cmp	r2, #0
   242ee:	d1a1      	bne.n	24234 <_svfiprintf_r+0x1c8>
   242f0:	2b00      	cmp	r3, #0
   242f2:	f040 82ab 	bne.w	2484c <_svfiprintf_r+0x7e0>
   242f6:	f01b 0f01 	tst.w	fp, #1
   242fa:	bf04      	itt	eq
   242fc:	9304      	streq	r3, [sp, #16]
   242fe:	f8cd a028 	streq.w	sl, [sp, #40]	; 0x28
   24302:	d0c2      	beq.n	2428a <_svfiprintf_r+0x21e>
   24304:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   24306:	2330      	movs	r3, #48	; 0x30
   24308:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
   2430c:	f10d 039f 	add.w	r3, sp, #159	; 0x9f
   24310:	930a      	str	r3, [sp, #40]	; 0x28
   24312:	9604      	str	r6, [sp, #16]
   24314:	e7b9      	b.n	2428a <_svfiprintf_r+0x21e>
   24316:	f04b 0b10 	orr.w	fp, fp, #16
   2431a:	f01b 0320 	ands.w	r3, fp, #32
   2431e:	f000 82f1 	beq.w	24904 <_svfiprintf_r+0x898>
   24322:	9e07      	ldr	r6, [sp, #28]
   24324:	2300      	movs	r3, #0
   24326:	1df2      	adds	r2, r6, #7
   24328:	e7c7      	b.n	242ba <_svfiprintf_r+0x24e>
   2432a:	9e07      	ldr	r6, [sp, #28]
   2432c:	6836      	ldr	r6, [r6, #0]
   2432e:	9606      	str	r6, [sp, #24]
   24330:	9e07      	ldr	r6, [sp, #28]
   24332:	1d30      	adds	r0, r6, #4
   24334:	9e06      	ldr	r6, [sp, #24]
   24336:	2e00      	cmp	r6, #0
   24338:	f280 830c 	bge.w	24954 <_svfiprintf_r+0x8e8>
   2433c:	9e06      	ldr	r6, [sp, #24]
   2433e:	9007      	str	r0, [sp, #28]
   24340:	4276      	negs	r6, r6
   24342:	9606      	str	r6, [sp, #24]
   24344:	f04b 0b04 	orr.w	fp, fp, #4
   24348:	782b      	ldrb	r3, [r5, #0]
   2434a:	e6e7      	b.n	2411c <_svfiprintf_r+0xb0>
   2434c:	9b07      	ldr	r3, [sp, #28]
   2434e:	2601      	movs	r6, #1
   24350:	9603      	str	r6, [sp, #12]
   24352:	2000      	movs	r0, #0
   24354:	9e07      	ldr	r6, [sp, #28]
   24356:	681b      	ldr	r3, [r3, #0]
   24358:	3604      	adds	r6, #4
   2435a:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
   2435e:	9607      	str	r6, [sp, #28]
   24360:	2601      	movs	r6, #1
   24362:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   24366:	9604      	str	r6, [sp, #16]
   24368:	ae1e      	add	r6, sp, #120	; 0x78
   2436a:	960a      	str	r6, [sp, #40]	; 0x28
   2436c:	2300      	movs	r3, #0
   2436e:	9309      	str	r3, [sp, #36]	; 0x24
   24370:	f01b 0302 	ands.w	r3, fp, #2
   24374:	930b      	str	r3, [sp, #44]	; 0x2c
   24376:	d002      	beq.n	2437e <_svfiprintf_r+0x312>
   24378:	9e03      	ldr	r6, [sp, #12]
   2437a:	3602      	adds	r6, #2
   2437c:	9603      	str	r6, [sp, #12]
   2437e:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
   24382:	930c      	str	r3, [sp, #48]	; 0x30
   24384:	f040 8159 	bne.w	2463a <_svfiprintf_r+0x5ce>
   24388:	9806      	ldr	r0, [sp, #24]
   2438a:	9b03      	ldr	r3, [sp, #12]
   2438c:	1ac6      	subs	r6, r0, r3
   2438e:	2e00      	cmp	r6, #0
   24390:	f340 8153 	ble.w	2463a <_svfiprintf_r+0x5ce>
   24394:	2e10      	cmp	r6, #16
   24396:	f24c 2788 	movw	r7, #49800	; 0xc288
   2439a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   2439c:	f2c0 0702 	movt	r7, #2
   243a0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   243a2:	bfc8      	it	gt
   243a4:	f04f 0810 	movgt.w	r8, #16
   243a8:	dc03      	bgt.n	243b2 <_svfiprintf_r+0x346>
   243aa:	e019      	b.n	243e0 <_svfiprintf_r+0x374>
   243ac:	3e10      	subs	r6, #16
   243ae:	2e10      	cmp	r6, #16
   243b0:	dd16      	ble.n	243e0 <_svfiprintf_r+0x374>
   243b2:	3301      	adds	r3, #1
   243b4:	3210      	adds	r2, #16
   243b6:	e884 0180 	stmia.w	r4, {r7, r8}
   243ba:	3408      	adds	r4, #8
   243bc:	2b07      	cmp	r3, #7
   243be:	9329      	str	r3, [sp, #164]	; 0xa4
   243c0:	922a      	str	r2, [sp, #168]	; 0xa8
   243c2:	ddf3      	ble.n	243ac <_svfiprintf_r+0x340>
   243c4:	9802      	ldr	r0, [sp, #8]
   243c6:	4649      	mov	r1, r9
   243c8:	4652      	mov	r2, sl
   243ca:	ac0e      	add	r4, sp, #56	; 0x38
   243cc:	f7ff fdc2 	bl	23f54 <__ssprint_r>
   243d0:	2800      	cmp	r0, #0
   243d2:	f040 81eb 	bne.w	247ac <_svfiprintf_r+0x740>
   243d6:	3e10      	subs	r6, #16
   243d8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   243da:	2e10      	cmp	r6, #16
   243dc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   243de:	dce8      	bgt.n	243b2 <_svfiprintf_r+0x346>
   243e0:	3301      	adds	r3, #1
   243e2:	1992      	adds	r2, r2, r6
   243e4:	2b07      	cmp	r3, #7
   243e6:	6027      	str	r7, [r4, #0]
   243e8:	6066      	str	r6, [r4, #4]
   243ea:	9329      	str	r3, [sp, #164]	; 0xa4
   243ec:	922a      	str	r2, [sp, #168]	; 0xa8
   243ee:	f300 82a5 	bgt.w	2493c <_svfiprintf_r+0x8d0>
   243f2:	3408      	adds	r4, #8
   243f4:	e123      	b.n	2463e <_svfiprintf_r+0x5d2>
   243f6:	f01b 0f20 	tst.w	fp, #32
   243fa:	f64b 76b0 	movw	r6, #49072	; 0xbfb0
   243fe:	f2c0 0602 	movt	r6, #2
   24402:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
   24406:	9608      	str	r6, [sp, #32]
   24408:	f000 80cd 	beq.w	245a6 <_svfiprintf_r+0x53a>
   2440c:	9e07      	ldr	r6, [sp, #28]
   2440e:	1df2      	adds	r2, r6, #7
   24410:	f022 0207 	bic.w	r2, r2, #7
   24414:	f102 0608 	add.w	r6, r2, #8
   24418:	9607      	str	r6, [sp, #28]
   2441a:	e9d2 6700 	ldrd	r6, r7, [r2]
   2441e:	ea56 0007 	orrs.w	r0, r6, r7
   24422:	bf0c      	ite	eq
   24424:	2200      	moveq	r2, #0
   24426:	2201      	movne	r2, #1
   24428:	ea1b 0f02 	tst.w	fp, r2
   2442c:	f000 8268 	beq.w	24900 <_svfiprintf_r+0x894>
   24430:	f88d 30ad 	strb.w	r3, [sp, #173]	; 0xad
   24434:	f04b 0b02 	orr.w	fp, fp, #2
   24438:	2330      	movs	r3, #48	; 0x30
   2443a:	2201      	movs	r2, #1
   2443c:	f88d 30ac 	strb.w	r3, [sp, #172]	; 0xac
   24440:	2302      	movs	r3, #2
   24442:	e746      	b.n	242d2 <_svfiprintf_r+0x266>
   24444:	f04b 0b01 	orr.w	fp, fp, #1
   24448:	782b      	ldrb	r3, [r5, #0]
   2444a:	e667      	b.n	2411c <_svfiprintf_r+0xb0>
   2444c:	782b      	ldrb	r3, [r5, #0]
   2444e:	2a00      	cmp	r2, #0
   24450:	f47f ae64 	bne.w	2411c <_svfiprintf_r+0xb0>
   24454:	2220      	movs	r2, #32
   24456:	e661      	b.n	2411c <_svfiprintf_r+0xb0>
   24458:	4628      	mov	r0, r5
   2445a:	2100      	movs	r1, #0
   2445c:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
   24460:	f810 3b01 	ldrb.w	r3, [r0], #1
   24464:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   24468:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   2446c:	4605      	mov	r5, r0
   2446e:	2e09      	cmp	r6, #9
   24470:	eb07 0141 	add.w	r1, r7, r1, lsl #1
   24474:	d9f2      	bls.n	2445c <_svfiprintf_r+0x3f0>
   24476:	9106      	str	r1, [sp, #24]
   24478:	e651      	b.n	2411e <_svfiprintf_r+0xb2>
   2447a:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   2447e:	782b      	ldrb	r3, [r5, #0]
   24480:	e64c      	b.n	2411c <_svfiprintf_r+0xb0>
   24482:	782b      	ldrb	r3, [r5, #0]
   24484:	222b      	movs	r2, #43	; 0x2b
   24486:	e649      	b.n	2411c <_svfiprintf_r+0xb0>
   24488:	4629      	mov	r1, r5
   2448a:	f811 3b01 	ldrb.w	r3, [r1], #1
   2448e:	2b2a      	cmp	r3, #42	; 0x2a
   24490:	f000 82fb 	beq.w	24a8a <_svfiprintf_r+0xa1e>
   24494:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   24498:	2809      	cmp	r0, #9
   2449a:	bf84      	itt	hi
   2449c:	460d      	movhi	r5, r1
   2449e:	f04f 0800 	movhi.w	r8, #0
   244a2:	f63f ae3c 	bhi.w	2411e <_svfiprintf_r+0xb2>
   244a6:	f04f 0800 	mov.w	r8, #0
   244aa:	f811 3b01 	ldrb.w	r3, [r1], #1
   244ae:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   244b2:	eb00 0848 	add.w	r8, r0, r8, lsl #1
   244b6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   244ba:	2809      	cmp	r0, #9
   244bc:	460d      	mov	r5, r1
   244be:	d9f4      	bls.n	244aa <_svfiprintf_r+0x43e>
   244c0:	ea48 78e8 	orr.w	r8, r8, r8, asr #31
   244c4:	e62b      	b.n	2411e <_svfiprintf_r+0xb2>
   244c6:	f04b 0b20 	orr.w	fp, fp, #32
   244ca:	782b      	ldrb	r3, [r5, #0]
   244cc:	e626      	b.n	2411c <_svfiprintf_r+0xb0>
   244ce:	9b07      	ldr	r3, [sp, #28]
   244d0:	2700      	movs	r7, #0
   244d2:	f64b 70c4 	movw	r0, #49092	; 0xbfc4
   244d6:	f04b 0b02 	orr.w	fp, fp, #2
   244da:	1d1e      	adds	r6, r3, #4
   244dc:	9607      	str	r6, [sp, #28]
   244de:	681a      	ldr	r2, [r3, #0]
   244e0:	2330      	movs	r3, #48	; 0x30
   244e2:	f88d 30ac 	strb.w	r3, [sp, #172]	; 0xac
   244e6:	2378      	movs	r3, #120	; 0x78
   244e8:	4616      	mov	r6, r2
   244ea:	1bd2      	subs	r2, r2, r7
   244ec:	f88d 30ad 	strb.w	r3, [sp, #173]	; 0xad
   244f0:	bf18      	it	ne
   244f2:	2201      	movne	r2, #1
   244f4:	f2c0 0002 	movt	r0, #2
   244f8:	2302      	movs	r3, #2
   244fa:	9008      	str	r0, [sp, #32]
   244fc:	e6e9      	b.n	242d2 <_svfiprintf_r+0x266>
   244fe:	9b07      	ldr	r3, [sp, #28]
   24500:	2100      	movs	r1, #0
   24502:	9e07      	ldr	r6, [sp, #28]
   24504:	f88d 10af 	strb.w	r1, [sp, #175]	; 0xaf
   24508:	681b      	ldr	r3, [r3, #0]
   2450a:	3604      	adds	r6, #4
   2450c:	9607      	str	r6, [sp, #28]
   2450e:	930a      	str	r3, [sp, #40]	; 0x28
   24510:	2b00      	cmp	r3, #0
   24512:	f000 82a7 	beq.w	24a64 <_svfiprintf_r+0x9f8>
   24516:	f1b8 0f00 	cmp.w	r8, #0
   2451a:	980a      	ldr	r0, [sp, #40]	; 0x28
   2451c:	f2c0 8271 	blt.w	24a02 <_svfiprintf_r+0x996>
   24520:	2100      	movs	r1, #0
   24522:	4642      	mov	r2, r8
   24524:	f7fb f82e 	bl	1f584 <memchr>
   24528:	2800      	cmp	r0, #0
   2452a:	f000 82aa 	beq.w	24a82 <_svfiprintf_r+0xa16>
   2452e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   24530:	1b80      	subs	r0, r0, r6
   24532:	9004      	str	r0, [sp, #16]
   24534:	4540      	cmp	r0, r8
   24536:	f340 827e 	ble.w	24a36 <_svfiprintf_r+0x9ca>
   2453a:	2300      	movs	r3, #0
   2453c:	f8cd 8010 	str.w	r8, [sp, #16]
   24540:	9309      	str	r3, [sp, #36]	; 0x24
   24542:	e6a4      	b.n	2428e <_svfiprintf_r+0x222>
   24544:	782b      	ldrb	r3, [r5, #0]
   24546:	4629      	mov	r1, r5
   24548:	2b6c      	cmp	r3, #108	; 0x6c
   2454a:	bf18      	it	ne
   2454c:	f04b 0b10 	orrne.w	fp, fp, #16
   24550:	f47f ade4 	bne.w	2411c <_svfiprintf_r+0xb0>
   24554:	3501      	adds	r5, #1
   24556:	f04b 0b20 	orr.w	fp, fp, #32
   2455a:	784b      	ldrb	r3, [r1, #1]
   2455c:	e5de      	b.n	2411c <_svfiprintf_r+0xb0>
   2455e:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   24562:	782b      	ldrb	r3, [r5, #0]
   24564:	e5da      	b.n	2411c <_svfiprintf_r+0xb0>
   24566:	f01b 0f20 	tst.w	fp, #32
   2456a:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
   2456e:	f040 823e 	bne.w	249ee <_svfiprintf_r+0x982>
   24572:	f01b 0f10 	tst.w	fp, #16
   24576:	f040 824a 	bne.w	24a0e <_svfiprintf_r+0x9a2>
   2457a:	f01b 0f40 	tst.w	fp, #64	; 0x40
   2457e:	f000 8246 	beq.w	24a0e <_svfiprintf_r+0x9a2>
   24582:	9e07      	ldr	r6, [sp, #28]
   24584:	6833      	ldr	r3, [r6, #0]
   24586:	3604      	adds	r6, #4
   24588:	9607      	str	r6, [sp, #28]
   2458a:	9e05      	ldr	r6, [sp, #20]
   2458c:	801e      	strh	r6, [r3, #0]
   2458e:	e58a      	b.n	240a6 <_svfiprintf_r+0x3a>
   24590:	f01b 0f20 	tst.w	fp, #32
   24594:	f64b 76c4 	movw	r6, #49092	; 0xbfc4
   24598:	f2c0 0602 	movt	r6, #2
   2459c:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
   245a0:	9608      	str	r6, [sp, #32]
   245a2:	f47f af33 	bne.w	2440c <_svfiprintf_r+0x3a0>
   245a6:	f01b 0f10 	tst.w	fp, #16
   245aa:	f040 8204 	bne.w	249b6 <_svfiprintf_r+0x94a>
   245ae:	f01b 0f40 	tst.w	fp, #64	; 0x40
   245b2:	f000 8200 	beq.w	249b6 <_svfiprintf_r+0x94a>
   245b6:	9807      	ldr	r0, [sp, #28]
   245b8:	2700      	movs	r7, #0
   245ba:	8806      	ldrh	r6, [r0, #0]
   245bc:	3004      	adds	r0, #4
   245be:	9007      	str	r0, [sp, #28]
   245c0:	e72d      	b.n	2441e <_svfiprintf_r+0x3b2>
   245c2:	f88d 20af 	strb.w	r2, [sp, #175]	; 0xaf
   245c6:	2b00      	cmp	r3, #0
   245c8:	f000 80e9 	beq.w	2479e <_svfiprintf_r+0x732>
   245cc:	2601      	movs	r6, #1
   245ce:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   245d2:	2000      	movs	r0, #0
   245d4:	ab1e      	add	r3, sp, #120	; 0x78
   245d6:	9603      	str	r6, [sp, #12]
   245d8:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
   245dc:	9604      	str	r6, [sp, #16]
   245de:	930a      	str	r3, [sp, #40]	; 0x28
   245e0:	e6c4      	b.n	2436c <_svfiprintf_r+0x300>
   245e2:	2e0a      	cmp	r6, #10
   245e4:	f177 0000 	sbcs.w	r0, r7, #0
   245e8:	f0c0 81c2 	bcc.w	24970 <_svfiprintf_r+0x904>
   245ec:	f10d 039f 	add.w	r3, sp, #159	; 0x9f
   245f0:	9503      	str	r5, [sp, #12]
   245f2:	f8cd b010 	str.w	fp, [sp, #16]
   245f6:	461d      	mov	r5, r3
   245f8:	46a3      	mov	fp, r4
   245fa:	4630      	mov	r0, r6
   245fc:	4639      	mov	r1, r7
   245fe:	220a      	movs	r2, #10
   24600:	2300      	movs	r3, #0
   24602:	f7ee fc89 	bl	12f18 <__aeabi_uldivmod>
   24606:	462c      	mov	r4, r5
   24608:	4630      	mov	r0, r6
   2460a:	4639      	mov	r1, r7
   2460c:	2300      	movs	r3, #0
   2460e:	3d01      	subs	r5, #1
   24610:	f102 0630 	add.w	r6, r2, #48	; 0x30
   24614:	220a      	movs	r2, #10
   24616:	7026      	strb	r6, [r4, #0]
   24618:	f7ee fc7e 	bl	12f18 <__aeabi_uldivmod>
   2461c:	4606      	mov	r6, r0
   2461e:	460f      	mov	r7, r1
   24620:	ea56 0007 	orrs.w	r0, r6, r7
   24624:	d1e9      	bne.n	245fa <_svfiprintf_r+0x58e>
   24626:	940a      	str	r4, [sp, #40]	; 0x28
   24628:	465c      	mov	r4, fp
   2462a:	9d03      	ldr	r5, [sp, #12]
   2462c:	f8dd b010 	ldr.w	fp, [sp, #16]
   24630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   24632:	ebc3 030a 	rsb	r3, r3, sl
   24636:	9304      	str	r3, [sp, #16]
   24638:	e627      	b.n	2428a <_svfiprintf_r+0x21e>
   2463a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   2463c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   2463e:	f89d 10af 	ldrb.w	r1, [sp, #175]	; 0xaf
   24642:	b161      	cbz	r1, 2465e <_svfiprintf_r+0x5f2>
   24644:	3301      	adds	r3, #1
   24646:	f10d 01af 	add.w	r1, sp, #175	; 0xaf
   2464a:	6021      	str	r1, [r4, #0]
   2464c:	2101      	movs	r1, #1
   2464e:	2b07      	cmp	r3, #7
   24650:	440a      	add	r2, r1
   24652:	6061      	str	r1, [r4, #4]
   24654:	9329      	str	r3, [sp, #164]	; 0xa4
   24656:	922a      	str	r2, [sp, #168]	; 0xa8
   24658:	f300 8110 	bgt.w	2487c <_svfiprintf_r+0x810>
   2465c:	3408      	adds	r4, #8
   2465e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   24660:	b15e      	cbz	r6, 2467a <_svfiprintf_r+0x60e>
   24662:	3301      	adds	r3, #1
   24664:	a92b      	add	r1, sp, #172	; 0xac
   24666:	6021      	str	r1, [r4, #0]
   24668:	2102      	movs	r1, #2
   2466a:	2b07      	cmp	r3, #7
   2466c:	440a      	add	r2, r1
   2466e:	6061      	str	r1, [r4, #4]
   24670:	9329      	str	r3, [sp, #164]	; 0xa4
   24672:	922a      	str	r2, [sp, #168]	; 0xa8
   24674:	f300 810d 	bgt.w	24892 <_svfiprintf_r+0x826>
   24678:	3408      	adds	r4, #8
   2467a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   2467c:	2e80      	cmp	r6, #128	; 0x80
   2467e:	f000 80a2 	beq.w	247c6 <_svfiprintf_r+0x75a>
   24682:	9909      	ldr	r1, [sp, #36]	; 0x24
   24684:	9804      	ldr	r0, [sp, #16]
   24686:	1a0e      	subs	r6, r1, r0
   24688:	2e00      	cmp	r6, #0
   2468a:	dd29      	ble.n	246e0 <_svfiprintf_r+0x674>
   2468c:	2e10      	cmp	r6, #16
   2468e:	4f86      	ldr	r7, [pc, #536]	; (248a8 <_svfiprintf_r+0x83c>)
   24690:	bfc8      	it	gt
   24692:	f04f 0810 	movgt.w	r8, #16
   24696:	dc03      	bgt.n	246a0 <_svfiprintf_r+0x634>
   24698:	e018      	b.n	246cc <_svfiprintf_r+0x660>
   2469a:	3e10      	subs	r6, #16
   2469c:	2e10      	cmp	r6, #16
   2469e:	dd15      	ble.n	246cc <_svfiprintf_r+0x660>
   246a0:	3301      	adds	r3, #1
   246a2:	3210      	adds	r2, #16
   246a4:	e884 0180 	stmia.w	r4, {r7, r8}
   246a8:	3408      	adds	r4, #8
   246aa:	2b07      	cmp	r3, #7
   246ac:	9329      	str	r3, [sp, #164]	; 0xa4
   246ae:	922a      	str	r2, [sp, #168]	; 0xa8
   246b0:	ddf3      	ble.n	2469a <_svfiprintf_r+0x62e>
   246b2:	9802      	ldr	r0, [sp, #8]
   246b4:	4649      	mov	r1, r9
   246b6:	4652      	mov	r2, sl
   246b8:	ac0e      	add	r4, sp, #56	; 0x38
   246ba:	f7ff fc4b 	bl	23f54 <__ssprint_r>
   246be:	2800      	cmp	r0, #0
   246c0:	d174      	bne.n	247ac <_svfiprintf_r+0x740>
   246c2:	3e10      	subs	r6, #16
   246c4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   246c6:	2e10      	cmp	r6, #16
   246c8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   246ca:	dce9      	bgt.n	246a0 <_svfiprintf_r+0x634>
   246cc:	3301      	adds	r3, #1
   246ce:	1992      	adds	r2, r2, r6
   246d0:	2b07      	cmp	r3, #7
   246d2:	6027      	str	r7, [r4, #0]
   246d4:	6066      	str	r6, [r4, #4]
   246d6:	9329      	str	r3, [sp, #164]	; 0xa4
   246d8:	922a      	str	r2, [sp, #168]	; 0xa8
   246da:	f300 80c4 	bgt.w	24866 <_svfiprintf_r+0x7fa>
   246de:	3408      	adds	r4, #8
   246e0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   246e2:	3301      	adds	r3, #1
   246e4:	2b07      	cmp	r3, #7
   246e6:	9329      	str	r3, [sp, #164]	; 0xa4
   246e8:	bfd8      	it	le
   246ea:	f104 0108 	addle.w	r1, r4, #8
   246ee:	6026      	str	r6, [r4, #0]
   246f0:	9e04      	ldr	r6, [sp, #16]
   246f2:	4432      	add	r2, r6
   246f4:	922a      	str	r2, [sp, #168]	; 0xa8
   246f6:	6066      	str	r6, [r4, #4]
   246f8:	f300 8096 	bgt.w	24828 <_svfiprintf_r+0x7bc>
   246fc:	f01b 0f04 	tst.w	fp, #4
   24700:	d031      	beq.n	24766 <_svfiprintf_r+0x6fa>
   24702:	9806      	ldr	r0, [sp, #24]
   24704:	9b03      	ldr	r3, [sp, #12]
   24706:	1ac6      	subs	r6, r0, r3
   24708:	2e00      	cmp	r6, #0
   2470a:	dd2c      	ble.n	24766 <_svfiprintf_r+0x6fa>
   2470c:	2e10      	cmp	r6, #16
   2470e:	f24c 2788 	movw	r7, #49800	; 0xc288
   24712:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   24714:	f2c0 0702 	movt	r7, #2
   24718:	dd1c      	ble.n	24754 <_svfiprintf_r+0x6e8>
   2471a:	2410      	movs	r4, #16
   2471c:	f8dd 8008 	ldr.w	r8, [sp, #8]
   24720:	e002      	b.n	24728 <_svfiprintf_r+0x6bc>
   24722:	3e10      	subs	r6, #16
   24724:	2e10      	cmp	r6, #16
   24726:	dd15      	ble.n	24754 <_svfiprintf_r+0x6e8>
   24728:	3301      	adds	r3, #1
   2472a:	3210      	adds	r2, #16
   2472c:	600f      	str	r7, [r1, #0]
   2472e:	604c      	str	r4, [r1, #4]
   24730:	3108      	adds	r1, #8
   24732:	2b07      	cmp	r3, #7
   24734:	9329      	str	r3, [sp, #164]	; 0xa4
   24736:	922a      	str	r2, [sp, #168]	; 0xa8
   24738:	ddf3      	ble.n	24722 <_svfiprintf_r+0x6b6>
   2473a:	4649      	mov	r1, r9
   2473c:	4640      	mov	r0, r8
   2473e:	4652      	mov	r2, sl
   24740:	f7ff fc08 	bl	23f54 <__ssprint_r>
   24744:	a90e      	add	r1, sp, #56	; 0x38
   24746:	2800      	cmp	r0, #0
   24748:	d130      	bne.n	247ac <_svfiprintf_r+0x740>
   2474a:	3e10      	subs	r6, #16
   2474c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   2474e:	2e10      	cmp	r6, #16
   24750:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   24752:	dce9      	bgt.n	24728 <_svfiprintf_r+0x6bc>
   24754:	3301      	adds	r3, #1
   24756:	18b2      	adds	r2, r6, r2
   24758:	2b07      	cmp	r3, #7
   2475a:	600f      	str	r7, [r1, #0]
   2475c:	604e      	str	r6, [r1, #4]
   2475e:	9329      	str	r3, [sp, #164]	; 0xa4
   24760:	922a      	str	r2, [sp, #168]	; 0xa8
   24762:	f300 80fb 	bgt.w	2495c <_svfiprintf_r+0x8f0>
   24766:	9e05      	ldr	r6, [sp, #20]
   24768:	9b03      	ldr	r3, [sp, #12]
   2476a:	9806      	ldr	r0, [sp, #24]
   2476c:	4283      	cmp	r3, r0
   2476e:	bfac      	ite	ge
   24770:	18f6      	addge	r6, r6, r3
   24772:	1836      	addlt	r6, r6, r0
   24774:	9605      	str	r6, [sp, #20]
   24776:	2a00      	cmp	r2, #0
   24778:	d160      	bne.n	2483c <_svfiprintf_r+0x7d0>
   2477a:	782b      	ldrb	r3, [r5, #0]
   2477c:	2600      	movs	r6, #0
   2477e:	ac0e      	add	r4, sp, #56	; 0x38
   24780:	9629      	str	r6, [sp, #164]	; 0xa4
   24782:	f1b3 0225 	subs.w	r2, r3, #37	; 0x25
   24786:	bf18      	it	ne
   24788:	2201      	movne	r2, #1
   2478a:	2b00      	cmp	r3, #0
   2478c:	bf0c      	ite	eq
   2478e:	2300      	moveq	r3, #0
   24790:	f002 0301 	andne.w	r3, r2, #1
   24794:	2b00      	cmp	r3, #0
   24796:	f47f ac93 	bne.w	240c0 <_svfiprintf_r+0x54>
   2479a:	462e      	mov	r6, r5
   2479c:	e4b0      	b.n	24100 <_svfiprintf_r+0x94>
   2479e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   247a0:	b123      	cbz	r3, 247ac <_svfiprintf_r+0x740>
   247a2:	9802      	ldr	r0, [sp, #8]
   247a4:	4649      	mov	r1, r9
   247a6:	aa28      	add	r2, sp, #160	; 0xa0
   247a8:	f7ff fbd4 	bl	23f54 <__ssprint_r>
   247ac:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   247b0:	9e05      	ldr	r6, [sp, #20]
   247b2:	f013 0f40 	tst.w	r3, #64	; 0x40
   247b6:	bf18      	it	ne
   247b8:	f04f 36ff 	movne.w	r6, #4294967295
   247bc:	9605      	str	r6, [sp, #20]
   247be:	9805      	ldr	r0, [sp, #20]
   247c0:	b02d      	add	sp, #180	; 0xb4
   247c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   247c6:	9806      	ldr	r0, [sp, #24]
   247c8:	9903      	ldr	r1, [sp, #12]
   247ca:	1a46      	subs	r6, r0, r1
   247cc:	2e00      	cmp	r6, #0
   247ce:	f77f af58 	ble.w	24682 <_svfiprintf_r+0x616>
   247d2:	2e10      	cmp	r6, #16
   247d4:	4f34      	ldr	r7, [pc, #208]	; (248a8 <_svfiprintf_r+0x83c>)
   247d6:	bfc8      	it	gt
   247d8:	f04f 0810 	movgt.w	r8, #16
   247dc:	dc03      	bgt.n	247e6 <_svfiprintf_r+0x77a>
   247de:	e018      	b.n	24812 <_svfiprintf_r+0x7a6>
   247e0:	3e10      	subs	r6, #16
   247e2:	2e10      	cmp	r6, #16
   247e4:	dd15      	ble.n	24812 <_svfiprintf_r+0x7a6>
   247e6:	3301      	adds	r3, #1
   247e8:	3210      	adds	r2, #16
   247ea:	e884 0180 	stmia.w	r4, {r7, r8}
   247ee:	3408      	adds	r4, #8
   247f0:	2b07      	cmp	r3, #7
   247f2:	9329      	str	r3, [sp, #164]	; 0xa4
   247f4:	922a      	str	r2, [sp, #168]	; 0xa8
   247f6:	ddf3      	ble.n	247e0 <_svfiprintf_r+0x774>
   247f8:	9802      	ldr	r0, [sp, #8]
   247fa:	4649      	mov	r1, r9
   247fc:	4652      	mov	r2, sl
   247fe:	ac0e      	add	r4, sp, #56	; 0x38
   24800:	f7ff fba8 	bl	23f54 <__ssprint_r>
   24804:	2800      	cmp	r0, #0
   24806:	d1d1      	bne.n	247ac <_svfiprintf_r+0x740>
   24808:	3e10      	subs	r6, #16
   2480a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   2480c:	2e10      	cmp	r6, #16
   2480e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   24810:	dce9      	bgt.n	247e6 <_svfiprintf_r+0x77a>
   24812:	3301      	adds	r3, #1
   24814:	1992      	adds	r2, r2, r6
   24816:	2b07      	cmp	r3, #7
   24818:	6027      	str	r7, [r4, #0]
   2481a:	6066      	str	r6, [r4, #4]
   2481c:	9329      	str	r3, [sp, #164]	; 0xa4
   2481e:	922a      	str	r2, [sp, #168]	; 0xa8
   24820:	f300 80fd 	bgt.w	24a1e <_svfiprintf_r+0x9b2>
   24824:	3408      	adds	r4, #8
   24826:	e72c      	b.n	24682 <_svfiprintf_r+0x616>
   24828:	9802      	ldr	r0, [sp, #8]
   2482a:	4649      	mov	r1, r9
   2482c:	4652      	mov	r2, sl
   2482e:	f7ff fb91 	bl	23f54 <__ssprint_r>
   24832:	2800      	cmp	r0, #0
   24834:	d1ba      	bne.n	247ac <_svfiprintf_r+0x740>
   24836:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   24838:	a90e      	add	r1, sp, #56	; 0x38
   2483a:	e75f      	b.n	246fc <_svfiprintf_r+0x690>
   2483c:	9802      	ldr	r0, [sp, #8]
   2483e:	4649      	mov	r1, r9
   24840:	4652      	mov	r2, sl
   24842:	f7ff fb87 	bl	23f54 <__ssprint_r>
   24846:	2800      	cmp	r0, #0
   24848:	d097      	beq.n	2477a <_svfiprintf_r+0x70e>
   2484a:	e7af      	b.n	247ac <_svfiprintf_r+0x740>
   2484c:	9204      	str	r2, [sp, #16]
   2484e:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   24852:	e51a      	b.n	2428a <_svfiprintf_r+0x21e>
   24854:	9802      	ldr	r0, [sp, #8]
   24856:	4649      	mov	r1, r9
   24858:	4652      	mov	r2, sl
   2485a:	f7ff fb7b 	bl	23f54 <__ssprint_r>
   2485e:	2800      	cmp	r0, #0
   24860:	d1a4      	bne.n	247ac <_svfiprintf_r+0x740>
   24862:	ac0e      	add	r4, sp, #56	; 0x38
   24864:	e449      	b.n	240fa <_svfiprintf_r+0x8e>
   24866:	9802      	ldr	r0, [sp, #8]
   24868:	4649      	mov	r1, r9
   2486a:	4652      	mov	r2, sl
   2486c:	f7ff fb72 	bl	23f54 <__ssprint_r>
   24870:	2800      	cmp	r0, #0
   24872:	d19b      	bne.n	247ac <_svfiprintf_r+0x740>
   24874:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   24876:	ac0e      	add	r4, sp, #56	; 0x38
   24878:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   2487a:	e731      	b.n	246e0 <_svfiprintf_r+0x674>
   2487c:	9802      	ldr	r0, [sp, #8]
   2487e:	4649      	mov	r1, r9
   24880:	4652      	mov	r2, sl
   24882:	f7ff fb67 	bl	23f54 <__ssprint_r>
   24886:	2800      	cmp	r0, #0
   24888:	d190      	bne.n	247ac <_svfiprintf_r+0x740>
   2488a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   2488c:	ac0e      	add	r4, sp, #56	; 0x38
   2488e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   24890:	e6e5      	b.n	2465e <_svfiprintf_r+0x5f2>
   24892:	9802      	ldr	r0, [sp, #8]
   24894:	4649      	mov	r1, r9
   24896:	4652      	mov	r2, sl
   24898:	f7ff fb5c 	bl	23f54 <__ssprint_r>
   2489c:	2800      	cmp	r0, #0
   2489e:	d185      	bne.n	247ac <_svfiprintf_r+0x740>
   248a0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   248a2:	ac0e      	add	r4, sp, #56	; 0x38
   248a4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   248a6:	e6e8      	b.n	2467a <_svfiprintf_r+0x60e>
   248a8:	0002c298 	.word	0x0002c298
   248ac:	46ac      	mov	ip, r5
   248ae:	f10d 019f 	add.w	r1, sp, #159	; 0x9f
   248b2:	4625      	mov	r5, r4
   248b4:	f006 020f 	and.w	r2, r6, #15
   248b8:	0933      	lsrs	r3, r6, #4
   248ba:	9e08      	ldr	r6, [sp, #32]
   248bc:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   248c0:	093c      	lsrs	r4, r7, #4
   248c2:	4627      	mov	r7, r4
   248c4:	5cb0      	ldrb	r0, [r6, r2]
   248c6:	460a      	mov	r2, r1
   248c8:	461e      	mov	r6, r3
   248ca:	3901      	subs	r1, #1
   248cc:	7010      	strb	r0, [r2, #0]
   248ce:	ea56 0007 	orrs.w	r0, r6, r7
   248d2:	d1ef      	bne.n	248b4 <_svfiprintf_r+0x848>
   248d4:	462c      	mov	r4, r5
   248d6:	ebc2 030a 	rsb	r3, r2, sl
   248da:	920a      	str	r2, [sp, #40]	; 0x28
   248dc:	4665      	mov	r5, ip
   248de:	9304      	str	r3, [sp, #16]
   248e0:	e4d3      	b.n	2428a <_svfiprintf_r+0x21e>
   248e2:	f01b 0f10 	tst.w	fp, #16
   248e6:	d14c      	bne.n	24982 <_svfiprintf_r+0x916>
   248e8:	f01b 0f40 	tst.w	fp, #64	; 0x40
   248ec:	d049      	beq.n	24982 <_svfiprintf_r+0x916>
   248ee:	9807      	ldr	r0, [sp, #28]
   248f0:	f9b0 6000 	ldrsh.w	r6, [r0]
   248f4:	3004      	adds	r0, #4
   248f6:	9007      	str	r0, [sp, #28]
   248f8:	4632      	mov	r2, r6
   248fa:	17f7      	asrs	r7, r6, #31
   248fc:	463b      	mov	r3, r7
   248fe:	e481      	b.n	24204 <_svfiprintf_r+0x198>
   24900:	2302      	movs	r3, #2
   24902:	e4e6      	b.n	242d2 <_svfiprintf_r+0x266>
   24904:	f01b 0210 	ands.w	r2, fp, #16
   24908:	d167      	bne.n	249da <_svfiprintf_r+0x96e>
   2490a:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   2490e:	d064      	beq.n	249da <_svfiprintf_r+0x96e>
   24910:	9807      	ldr	r0, [sp, #28]
   24912:	4613      	mov	r3, r2
   24914:	8806      	ldrh	r6, [r0, #0]
   24916:	2700      	movs	r7, #0
   24918:	3004      	adds	r0, #4
   2491a:	ea56 0107 	orrs.w	r1, r6, r7
   2491e:	9007      	str	r0, [sp, #28]
   24920:	bf0c      	ite	eq
   24922:	2200      	moveq	r2, #0
   24924:	2201      	movne	r2, #1
   24926:	e4d4      	b.n	242d2 <_svfiprintf_r+0x266>
   24928:	f01b 0f10 	tst.w	fp, #16
   2492c:	d14a      	bne.n	249c4 <_svfiprintf_r+0x958>
   2492e:	f01b 0f40 	tst.w	fp, #64	; 0x40
   24932:	d047      	beq.n	249c4 <_svfiprintf_r+0x958>
   24934:	9807      	ldr	r0, [sp, #28]
   24936:	2301      	movs	r3, #1
   24938:	8806      	ldrh	r6, [r0, #0]
   2493a:	e7ec      	b.n	24916 <_svfiprintf_r+0x8aa>
   2493c:	9802      	ldr	r0, [sp, #8]
   2493e:	4649      	mov	r1, r9
   24940:	4652      	mov	r2, sl
   24942:	f7ff fb07 	bl	23f54 <__ssprint_r>
   24946:	2800      	cmp	r0, #0
   24948:	f47f af30 	bne.w	247ac <_svfiprintf_r+0x740>
   2494c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   2494e:	ac0e      	add	r4, sp, #56	; 0x38
   24950:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   24952:	e674      	b.n	2463e <_svfiprintf_r+0x5d2>
   24954:	782b      	ldrb	r3, [r5, #0]
   24956:	9007      	str	r0, [sp, #28]
   24958:	f7ff bbe0 	b.w	2411c <_svfiprintf_r+0xb0>
   2495c:	9802      	ldr	r0, [sp, #8]
   2495e:	4649      	mov	r1, r9
   24960:	4652      	mov	r2, sl
   24962:	f7ff faf7 	bl	23f54 <__ssprint_r>
   24966:	2800      	cmp	r0, #0
   24968:	f47f af20 	bne.w	247ac <_svfiprintf_r+0x740>
   2496c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   2496e:	e6fa      	b.n	24766 <_svfiprintf_r+0x6fa>
   24970:	990d      	ldr	r1, [sp, #52]	; 0x34
   24972:	3630      	adds	r6, #48	; 0x30
   24974:	f10d 039f 	add.w	r3, sp, #159	; 0x9f
   24978:	f88d 609f 	strb.w	r6, [sp, #159]	; 0x9f
   2497c:	930a      	str	r3, [sp, #40]	; 0x28
   2497e:	9104      	str	r1, [sp, #16]
   24980:	e483      	b.n	2428a <_svfiprintf_r+0x21e>
   24982:	9e07      	ldr	r6, [sp, #28]
   24984:	6833      	ldr	r3, [r6, #0]
   24986:	3604      	adds	r6, #4
   24988:	9607      	str	r6, [sp, #28]
   2498a:	461a      	mov	r2, r3
   2498c:	461e      	mov	r6, r3
   2498e:	17df      	asrs	r7, r3, #31
   24990:	463b      	mov	r3, r7
   24992:	2a00      	cmp	r2, #0
   24994:	f173 0000 	sbcs.w	r0, r3, #0
   24998:	f6bf ac39 	bge.w	2420e <_svfiprintf_r+0x1a2>
   2499c:	4276      	negs	r6, r6
   2499e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   249a2:	232d      	movs	r3, #45	; 0x2d
   249a4:	ea56 0207 	orrs.w	r2, r6, r7
   249a8:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf
   249ac:	bf0c      	ite	eq
   249ae:	2200      	moveq	r2, #0
   249b0:	2201      	movne	r2, #1
   249b2:	2301      	movs	r3, #1
   249b4:	e432      	b.n	2421c <_svfiprintf_r+0x1b0>
   249b6:	9e07      	ldr	r6, [sp, #28]
   249b8:	2700      	movs	r7, #0
   249ba:	6832      	ldr	r2, [r6, #0]
   249bc:	3604      	adds	r6, #4
   249be:	9607      	str	r6, [sp, #28]
   249c0:	4616      	mov	r6, r2
   249c2:	e52c      	b.n	2441e <_svfiprintf_r+0x3b2>
   249c4:	9e07      	ldr	r6, [sp, #28]
   249c6:	2301      	movs	r3, #1
   249c8:	6832      	ldr	r2, [r6, #0]
   249ca:	3604      	adds	r6, #4
   249cc:	9607      	str	r6, [sp, #28]
   249ce:	4616      	mov	r6, r2
   249d0:	3200      	adds	r2, #0
   249d2:	bf18      	it	ne
   249d4:	2201      	movne	r2, #1
   249d6:	2700      	movs	r7, #0
   249d8:	e47b      	b.n	242d2 <_svfiprintf_r+0x266>
   249da:	9e07      	ldr	r6, [sp, #28]
   249dc:	6832      	ldr	r2, [r6, #0]
   249de:	3604      	adds	r6, #4
   249e0:	9607      	str	r6, [sp, #28]
   249e2:	4616      	mov	r6, r2
   249e4:	3200      	adds	r2, #0
   249e6:	bf18      	it	ne
   249e8:	2201      	movne	r2, #1
   249ea:	2700      	movs	r7, #0
   249ec:	e471      	b.n	242d2 <_svfiprintf_r+0x266>
   249ee:	9e07      	ldr	r6, [sp, #28]
   249f0:	9a05      	ldr	r2, [sp, #20]
   249f2:	6833      	ldr	r3, [r6, #0]
   249f4:	3604      	adds	r6, #4
   249f6:	17d1      	asrs	r1, r2, #31
   249f8:	9607      	str	r6, [sp, #28]
   249fa:	601a      	str	r2, [r3, #0]
   249fc:	6059      	str	r1, [r3, #4]
   249fe:	f7ff bb52 	b.w	240a6 <_svfiprintf_r+0x3a>
   24a02:	2300      	movs	r3, #0
   24a04:	9309      	str	r3, [sp, #36]	; 0x24
   24a06:	f7fb fce5 	bl	203d4 <strlen>
   24a0a:	9004      	str	r0, [sp, #16]
   24a0c:	e43f      	b.n	2428e <_svfiprintf_r+0x222>
   24a0e:	9e07      	ldr	r6, [sp, #28]
   24a10:	6833      	ldr	r3, [r6, #0]
   24a12:	3604      	adds	r6, #4
   24a14:	9607      	str	r6, [sp, #28]
   24a16:	9e05      	ldr	r6, [sp, #20]
   24a18:	601e      	str	r6, [r3, #0]
   24a1a:	f7ff bb44 	b.w	240a6 <_svfiprintf_r+0x3a>
   24a1e:	9802      	ldr	r0, [sp, #8]
   24a20:	4649      	mov	r1, r9
   24a22:	4652      	mov	r2, sl
   24a24:	f7ff fa96 	bl	23f54 <__ssprint_r>
   24a28:	2800      	cmp	r0, #0
   24a2a:	f47f aebf 	bne.w	247ac <_svfiprintf_r+0x740>
   24a2e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   24a30:	ac0e      	add	r4, sp, #56	; 0x38
   24a32:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   24a34:	e625      	b.n	24682 <_svfiprintf_r+0x616>
   24a36:	2600      	movs	r6, #0
   24a38:	9609      	str	r6, [sp, #36]	; 0x24
   24a3a:	e428      	b.n	2428e <_svfiprintf_r+0x222>
   24a3c:	2140      	movs	r1, #64	; 0x40
   24a3e:	9200      	str	r2, [sp, #0]
   24a40:	f7fa fae0 	bl	1f004 <_malloc_r>
   24a44:	9a00      	ldr	r2, [sp, #0]
   24a46:	f8c9 0000 	str.w	r0, [r9]
   24a4a:	f8c9 0010 	str.w	r0, [r9, #16]
   24a4e:	b350      	cbz	r0, 24aa6 <_svfiprintf_r+0xa3a>
   24a50:	2340      	movs	r3, #64	; 0x40
   24a52:	f8c9 3014 	str.w	r3, [r9, #20]
   24a56:	f7ff bb16 	b.w	24086 <_svfiprintf_r+0x1a>
   24a5a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   24a5c:	ebc6 060a 	rsb	r6, r6, sl
   24a60:	9604      	str	r6, [sp, #16]
   24a62:	e412      	b.n	2428a <_svfiprintf_r+0x21e>
   24a64:	f1b8 0f06 	cmp.w	r8, #6
   24a68:	bf34      	ite	cc
   24a6a:	4643      	movcc	r3, r8
   24a6c:	2306      	movcs	r3, #6
   24a6e:	f64b 76d8 	movw	r6, #49112	; 0xbfd8
   24a72:	9304      	str	r3, [sp, #16]
   24a74:	f2c0 0602 	movt	r6, #2
   24a78:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   24a7c:	960a      	str	r6, [sp, #40]	; 0x28
   24a7e:	9303      	str	r3, [sp, #12]
   24a80:	e474      	b.n	2436c <_svfiprintf_r+0x300>
   24a82:	f8cd 8010 	str.w	r8, [sp, #16]
   24a86:	9009      	str	r0, [sp, #36]	; 0x24
   24a88:	e401      	b.n	2428e <_svfiprintf_r+0x222>
   24a8a:	9e07      	ldr	r6, [sp, #28]
   24a8c:	786b      	ldrb	r3, [r5, #1]
   24a8e:	460d      	mov	r5, r1
   24a90:	1d30      	adds	r0, r6, #4
   24a92:	9007      	str	r0, [sp, #28]
   24a94:	f8d6 8000 	ldr.w	r8, [r6]
   24a98:	f1b8 0f00 	cmp.w	r8, #0
   24a9c:	bfb8      	it	lt
   24a9e:	f04f 38ff 	movlt.w	r8, #4294967295
   24aa2:	f7ff bb3b 	b.w	2411c <_svfiprintf_r+0xb0>
   24aa6:	f04f 36ff 	mov.w	r6, #4294967295
   24aaa:	9605      	str	r6, [sp, #20]
   24aac:	9e02      	ldr	r6, [sp, #8]
   24aae:	230c      	movs	r3, #12
   24ab0:	6033      	str	r3, [r6, #0]
   24ab2:	e684      	b.n	247be <_svfiprintf_r+0x752>

00024ab4 <_calloc_r>:
   24ab4:	b510      	push	{r4, lr}
   24ab6:	fb01 f102 	mul.w	r1, r1, r2
   24aba:	f7fa faa3 	bl	1f004 <_malloc_r>
   24abe:	4604      	mov	r4, r0
   24ac0:	b308      	cbz	r0, 24b06 <_calloc_r+0x52>
   24ac2:	f850 2c04 	ldr.w	r2, [r0, #-4]
   24ac6:	f022 0203 	bic.w	r2, r2, #3
   24aca:	3a04      	subs	r2, #4
   24acc:	2a24      	cmp	r2, #36	; 0x24
   24ace:	d81c      	bhi.n	24b0a <_calloc_r+0x56>
   24ad0:	2a13      	cmp	r2, #19
   24ad2:	bf98      	it	ls
   24ad4:	4602      	movls	r2, r0
   24ad6:	d912      	bls.n	24afe <_calloc_r+0x4a>
   24ad8:	2300      	movs	r3, #0
   24ada:	2a1b      	cmp	r2, #27
   24adc:	6003      	str	r3, [r0, #0]
   24ade:	bf98      	it	ls
   24ae0:	f100 0208 	addls.w	r2, r0, #8
   24ae4:	6043      	str	r3, [r0, #4]
   24ae6:	d90a      	bls.n	24afe <_calloc_r+0x4a>
   24ae8:	2a24      	cmp	r2, #36	; 0x24
   24aea:	6083      	str	r3, [r0, #8]
   24aec:	bf14      	ite	ne
   24aee:	f100 0210 	addne.w	r2, r0, #16
   24af2:	f100 0218 	addeq.w	r2, r0, #24
   24af6:	60c3      	str	r3, [r0, #12]
   24af8:	bf04      	itt	eq
   24afa:	6103      	streq	r3, [r0, #16]
   24afc:	6143      	streq	r3, [r0, #20]
   24afe:	2300      	movs	r3, #0
   24b00:	6013      	str	r3, [r2, #0]
   24b02:	6053      	str	r3, [r2, #4]
   24b04:	6093      	str	r3, [r2, #8]
   24b06:	4620      	mov	r0, r4
   24b08:	bd10      	pop	{r4, pc}
   24b0a:	2100      	movs	r1, #0
   24b0c:	f7fa fe82 	bl	1f814 <memset>
   24b10:	4620      	mov	r0, r4
   24b12:	bd10      	pop	{r4, pc}

00024b14 <_close_r>:
   24b14:	b538      	push	{r3, r4, r5, lr}
   24b16:	f643 34c8 	movw	r4, #15304	; 0x3bc8
   24b1a:	f2c1 0400 	movt	r4, #4096	; 0x1000
   24b1e:	4605      	mov	r5, r0
   24b20:	4608      	mov	r0, r1
   24b22:	2300      	movs	r3, #0
   24b24:	6023      	str	r3, [r4, #0]
   24b26:	f7e1 f8e3 	bl	5cf0 <_close>
   24b2a:	1c43      	adds	r3, r0, #1
   24b2c:	d000      	beq.n	24b30 <_close_r+0x1c>
   24b2e:	bd38      	pop	{r3, r4, r5, pc}
   24b30:	6823      	ldr	r3, [r4, #0]
   24b32:	2b00      	cmp	r3, #0
   24b34:	d0fb      	beq.n	24b2e <_close_r+0x1a>
   24b36:	602b      	str	r3, [r5, #0]
   24b38:	bd38      	pop	{r3, r4, r5, pc}
   24b3a:	bf00      	nop

00024b3c <_fclose_r>:
   24b3c:	b570      	push	{r4, r5, r6, lr}
   24b3e:	460c      	mov	r4, r1
   24b40:	4605      	mov	r5, r0
   24b42:	460e      	mov	r6, r1
   24b44:	2900      	cmp	r1, #0
   24b46:	d047      	beq.n	24bd8 <_fclose_r+0x9c>
   24b48:	f7fe fae6 	bl	23118 <__sfp_lock_acquire>
   24b4c:	b115      	cbz	r5, 24b54 <_fclose_r+0x18>
   24b4e:	69ab      	ldr	r3, [r5, #24]
   24b50:	2b00      	cmp	r3, #0
   24b52:	d043      	beq.n	24bdc <_fclose_r+0xa0>
   24b54:	f24c 1338 	movw	r3, #49464	; 0xc138
   24b58:	f2c0 0302 	movt	r3, #2
   24b5c:	429c      	cmp	r4, r3
   24b5e:	bf08      	it	eq
   24b60:	686c      	ldreq	r4, [r5, #4]
   24b62:	d00e      	beq.n	24b82 <_fclose_r+0x46>
   24b64:	f24c 1318 	movw	r3, #49432	; 0xc118
   24b68:	f2c0 0302 	movt	r3, #2
   24b6c:	429c      	cmp	r4, r3
   24b6e:	bf08      	it	eq
   24b70:	68ac      	ldreq	r4, [r5, #8]
   24b72:	d006      	beq.n	24b82 <_fclose_r+0x46>
   24b74:	f24c 03f8 	movw	r3, #49400	; 0xc0f8
   24b78:	f2c0 0302 	movt	r3, #2
   24b7c:	429c      	cmp	r4, r3
   24b7e:	bf08      	it	eq
   24b80:	68ec      	ldreq	r4, [r5, #12]
   24b82:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   24b86:	b32e      	cbz	r6, 24bd4 <_fclose_r+0x98>
   24b88:	4628      	mov	r0, r5
   24b8a:	4621      	mov	r1, r4
   24b8c:	f7fe f908 	bl	22da0 <_fflush_r>
   24b90:	6b23      	ldr	r3, [r4, #48]	; 0x30
   24b92:	4606      	mov	r6, r0
   24b94:	b13b      	cbz	r3, 24ba6 <_fclose_r+0x6a>
   24b96:	4628      	mov	r0, r5
   24b98:	6a21      	ldr	r1, [r4, #32]
   24b9a:	4798      	blx	r3
   24b9c:	ea36 0620 	bics.w	r6, r6, r0, asr #32
   24ba0:	bf28      	it	cs
   24ba2:	f04f 36ff 	movcs.w	r6, #4294967295
   24ba6:	89a3      	ldrh	r3, [r4, #12]
   24ba8:	061b      	lsls	r3, r3, #24
   24baa:	d41b      	bmi.n	24be4 <_fclose_r+0xa8>
   24bac:	6b61      	ldr	r1, [r4, #52]	; 0x34
   24bae:	b141      	cbz	r1, 24bc2 <_fclose_r+0x86>
   24bb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
   24bb4:	4299      	cmp	r1, r3
   24bb6:	d002      	beq.n	24bbe <_fclose_r+0x82>
   24bb8:	4628      	mov	r0, r5
   24bba:	f7fe fb1f 	bl	231fc <_free_r>
   24bbe:	2300      	movs	r3, #0
   24bc0:	6363      	str	r3, [r4, #52]	; 0x34
   24bc2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   24bc4:	b121      	cbz	r1, 24bd0 <_fclose_r+0x94>
   24bc6:	4628      	mov	r0, r5
   24bc8:	f7fe fb18 	bl	231fc <_free_r>
   24bcc:	2300      	movs	r3, #0
   24bce:	64a3      	str	r3, [r4, #72]	; 0x48
   24bd0:	2300      	movs	r3, #0
   24bd2:	81a3      	strh	r3, [r4, #12]
   24bd4:	f7fe faa2 	bl	2311c <__sfp_lock_release>
   24bd8:	4630      	mov	r0, r6
   24bda:	bd70      	pop	{r4, r5, r6, pc}
   24bdc:	4628      	mov	r0, r5
   24bde:	f7fe fa21 	bl	23024 <__sinit>
   24be2:	e7b7      	b.n	24b54 <_fclose_r+0x18>
   24be4:	4628      	mov	r0, r5
   24be6:	6921      	ldr	r1, [r4, #16]
   24be8:	f7fe fb08 	bl	231fc <_free_r>
   24bec:	e7de      	b.n	24bac <_fclose_r+0x70>
   24bee:	bf00      	nop

00024bf0 <fclose>:
   24bf0:	f240 0328 	movw	r3, #40	; 0x28
   24bf4:	4601      	mov	r1, r0
   24bf6:	f2c1 0300 	movt	r3, #4096	; 0x1000
   24bfa:	6818      	ldr	r0, [r3, #0]
   24bfc:	f7ff bf9e 	b.w	24b3c <_fclose_r>

00024c00 <_fstat_r>:
   24c00:	b538      	push	{r3, r4, r5, lr}
   24c02:	f643 34c8 	movw	r4, #15304	; 0x3bc8
   24c06:	f2c1 0400 	movt	r4, #4096	; 0x1000
   24c0a:	4605      	mov	r5, r0
   24c0c:	4608      	mov	r0, r1
   24c0e:	4611      	mov	r1, r2
   24c10:	2300      	movs	r3, #0
   24c12:	6023      	str	r3, [r4, #0]
   24c14:	f7e1 f870 	bl	5cf8 <_fstat>
   24c18:	1c43      	adds	r3, r0, #1
   24c1a:	d000      	beq.n	24c1e <_fstat_r+0x1e>
   24c1c:	bd38      	pop	{r3, r4, r5, pc}
   24c1e:	6823      	ldr	r3, [r4, #0]
   24c20:	2b00      	cmp	r3, #0
   24c22:	d0fb      	beq.n	24c1c <_fstat_r+0x1c>
   24c24:	602b      	str	r3, [r5, #0]
   24c26:	bd38      	pop	{r3, r4, r5, pc}

00024c28 <_isatty_r>:
   24c28:	b538      	push	{r3, r4, r5, lr}
   24c2a:	f643 34c8 	movw	r4, #15304	; 0x3bc8
   24c2e:	f2c1 0400 	movt	r4, #4096	; 0x1000
   24c32:	4605      	mov	r5, r0
   24c34:	4608      	mov	r0, r1
   24c36:	2300      	movs	r3, #0
   24c38:	6023      	str	r3, [r4, #0]
   24c3a:	f7e1 f863 	bl	5d04 <_isatty>
   24c3e:	1c43      	adds	r3, r0, #1
   24c40:	d000      	beq.n	24c44 <_isatty_r+0x1c>
   24c42:	bd38      	pop	{r3, r4, r5, pc}
   24c44:	6823      	ldr	r3, [r4, #0]
   24c46:	2b00      	cmp	r3, #0
   24c48:	d0fb      	beq.n	24c42 <_isatty_r+0x1a>
   24c4a:	602b      	str	r3, [r5, #0]
   24c4c:	bd38      	pop	{r3, r4, r5, pc}
   24c4e:	bf00      	nop

00024c50 <_lseek_r>:
   24c50:	b538      	push	{r3, r4, r5, lr}
   24c52:	f643 34c8 	movw	r4, #15304	; 0x3bc8
   24c56:	f2c1 0400 	movt	r4, #4096	; 0x1000
   24c5a:	4605      	mov	r5, r0
   24c5c:	4608      	mov	r0, r1
   24c5e:	4611      	mov	r1, r2
   24c60:	461a      	mov	r2, r3
   24c62:	2300      	movs	r3, #0
   24c64:	6023      	str	r3, [r4, #0]
   24c66:	f7e1 f851 	bl	5d0c <_lseek>
   24c6a:	1c43      	adds	r3, r0, #1
   24c6c:	d000      	beq.n	24c70 <_lseek_r+0x20>
   24c6e:	bd38      	pop	{r3, r4, r5, pc}
   24c70:	6823      	ldr	r3, [r4, #0]
   24c72:	2b00      	cmp	r3, #0
   24c74:	d0fb      	beq.n	24c6e <_lseek_r+0x1e>
   24c76:	602b      	str	r3, [r5, #0]
   24c78:	bd38      	pop	{r3, r4, r5, pc}
   24c7a:	bf00      	nop

00024c7c <_read_r>:
   24c7c:	b538      	push	{r3, r4, r5, lr}
   24c7e:	f643 34c8 	movw	r4, #15304	; 0x3bc8
   24c82:	f2c1 0400 	movt	r4, #4096	; 0x1000
   24c86:	4605      	mov	r5, r0
   24c88:	4608      	mov	r0, r1
   24c8a:	4611      	mov	r1, r2
   24c8c:	461a      	mov	r2, r3
   24c8e:	2300      	movs	r3, #0
   24c90:	6023      	str	r3, [r4, #0]
   24c92:	f7e1 f83f 	bl	5d14 <_read>
   24c96:	1c43      	adds	r3, r0, #1
   24c98:	d000      	beq.n	24c9c <_read_r+0x20>
   24c9a:	bd38      	pop	{r3, r4, r5, pc}
   24c9c:	6823      	ldr	r3, [r4, #0]
   24c9e:	2b00      	cmp	r3, #0
   24ca0:	d0fb      	beq.n	24c9a <_read_r+0x1e>
   24ca2:	602b      	str	r3, [r5, #0]
   24ca4:	bd38      	pop	{r3, r4, r5, pc}
   24ca6:	bf00      	nop

00024ca8 <__gedf2>:
   24ca8:	f04f 3cff 	mov.w	ip, #4294967295
   24cac:	e006      	b.n	24cbc <__cmpdf2+0x4>
   24cae:	bf00      	nop

00024cb0 <__ledf2>:
   24cb0:	f04f 0c01 	mov.w	ip, #1
   24cb4:	e002      	b.n	24cbc <__cmpdf2+0x4>
   24cb6:	bf00      	nop

00024cb8 <__cmpdf2>:
   24cb8:	f04f 0c01 	mov.w	ip, #1
   24cbc:	f84d cd04 	str.w	ip, [sp, #-4]!
   24cc0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   24cc4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   24cc8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   24ccc:	bf18      	it	ne
   24cce:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   24cd2:	d01b      	beq.n	24d0c <__cmpdf2+0x54>
   24cd4:	b001      	add	sp, #4
   24cd6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   24cda:	bf0c      	ite	eq
   24cdc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   24ce0:	ea91 0f03 	teqne	r1, r3
   24ce4:	bf02      	ittt	eq
   24ce6:	ea90 0f02 	teqeq	r0, r2
   24cea:	2000      	moveq	r0, #0
   24cec:	4770      	bxeq	lr
   24cee:	f110 0f00 	cmn.w	r0, #0
   24cf2:	ea91 0f03 	teq	r1, r3
   24cf6:	bf58      	it	pl
   24cf8:	4299      	cmppl	r1, r3
   24cfa:	bf08      	it	eq
   24cfc:	4290      	cmpeq	r0, r2
   24cfe:	bf2c      	ite	cs
   24d00:	17d8      	asrcs	r0, r3, #31
   24d02:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   24d06:	f040 0001 	orr.w	r0, r0, #1
   24d0a:	4770      	bx	lr
   24d0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   24d10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   24d14:	d102      	bne.n	24d1c <__cmpdf2+0x64>
   24d16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   24d1a:	d107      	bne.n	24d2c <__cmpdf2+0x74>
   24d1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   24d20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   24d24:	d1d6      	bne.n	24cd4 <__cmpdf2+0x1c>
   24d26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   24d2a:	d0d3      	beq.n	24cd4 <__cmpdf2+0x1c>
   24d2c:	f85d 0b04 	ldr.w	r0, [sp], #4
   24d30:	4770      	bx	lr
   24d32:	bf00      	nop

00024d34 <__aeabi_cdrcmple>:
   24d34:	4684      	mov	ip, r0
   24d36:	4610      	mov	r0, r2
   24d38:	4662      	mov	r2, ip
   24d3a:	468c      	mov	ip, r1
   24d3c:	4619      	mov	r1, r3
   24d3e:	4663      	mov	r3, ip
   24d40:	e000      	b.n	24d44 <__aeabi_cdcmpeq>
   24d42:	bf00      	nop

00024d44 <__aeabi_cdcmpeq>:
   24d44:	b501      	push	{r0, lr}
   24d46:	f7ff ffb7 	bl	24cb8 <__cmpdf2>
   24d4a:	2800      	cmp	r0, #0
   24d4c:	bf48      	it	mi
   24d4e:	f110 0f00 	cmnmi.w	r0, #0
   24d52:	bd01      	pop	{r0, pc}

00024d54 <__aeabi_dcmpeq>:
   24d54:	f84d ed08 	str.w	lr, [sp, #-8]!
   24d58:	f7ff fff4 	bl	24d44 <__aeabi_cdcmpeq>
   24d5c:	bf0c      	ite	eq
   24d5e:	2001      	moveq	r0, #1
   24d60:	2000      	movne	r0, #0
   24d62:	f85d fb08 	ldr.w	pc, [sp], #8
   24d66:	bf00      	nop

00024d68 <__aeabi_dcmplt>:
   24d68:	f84d ed08 	str.w	lr, [sp, #-8]!
   24d6c:	f7ff ffea 	bl	24d44 <__aeabi_cdcmpeq>
   24d70:	bf34      	ite	cc
   24d72:	2001      	movcc	r0, #1
   24d74:	2000      	movcs	r0, #0
   24d76:	f85d fb08 	ldr.w	pc, [sp], #8
   24d7a:	bf00      	nop

00024d7c <__aeabi_dcmple>:
   24d7c:	f84d ed08 	str.w	lr, [sp, #-8]!
   24d80:	f7ff ffe0 	bl	24d44 <__aeabi_cdcmpeq>
   24d84:	bf94      	ite	ls
   24d86:	2001      	movls	r0, #1
   24d88:	2000      	movhi	r0, #0
   24d8a:	f85d fb08 	ldr.w	pc, [sp], #8
   24d8e:	bf00      	nop

00024d90 <__aeabi_dcmpge>:
   24d90:	f84d ed08 	str.w	lr, [sp, #-8]!
   24d94:	f7ff ffce 	bl	24d34 <__aeabi_cdrcmple>
   24d98:	bf94      	ite	ls
   24d9a:	2001      	movls	r0, #1
   24d9c:	2000      	movhi	r0, #0
   24d9e:	f85d fb08 	ldr.w	pc, [sp], #8
   24da2:	bf00      	nop

00024da4 <__aeabi_dcmpgt>:
   24da4:	f84d ed08 	str.w	lr, [sp, #-8]!
   24da8:	f7ff ffc4 	bl	24d34 <__aeabi_cdrcmple>
   24dac:	bf34      	ite	cc
   24dae:	2001      	movcc	r0, #1
   24db0:	2000      	movcs	r0, #0
   24db2:	f85d fb08 	ldr.w	pc, [sp], #8
   24db6:	bf00      	nop

00024db8 <__aeabi_d2iz>:
   24db8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   24dbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   24dc0:	d215      	bcs.n	24dee <__aeabi_d2iz+0x36>
   24dc2:	d511      	bpl.n	24de8 <__aeabi_d2iz+0x30>
   24dc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   24dc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   24dcc:	d912      	bls.n	24df4 <__aeabi_d2iz+0x3c>
   24dce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   24dd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   24dd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   24dda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   24dde:	fa23 f002 	lsr.w	r0, r3, r2
   24de2:	bf18      	it	ne
   24de4:	4240      	negne	r0, r0
   24de6:	4770      	bx	lr
   24de8:	f04f 0000 	mov.w	r0, #0
   24dec:	4770      	bx	lr
   24dee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   24df2:	d105      	bne.n	24e00 <__aeabi_d2iz+0x48>
   24df4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   24df8:	bf08      	it	eq
   24dfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   24dfe:	4770      	bx	lr
   24e00:	f04f 0000 	mov.w	r0, #0
   24e04:	4770      	bx	lr
   24e06:	bf00      	nop

00024e08 <_Unwind_decode_target2>:
   24e08:	6803      	ldr	r3, [r0, #0]
   24e0a:	b103      	cbz	r3, 24e0e <_Unwind_decode_target2+0x6>
   24e0c:	181b      	adds	r3, r3, r0
   24e0e:	4618      	mov	r0, r3
   24e10:	4770      	bx	lr
   24e12:	bf00      	nop

00024e14 <selfrel_offset31>:
   24e14:	6803      	ldr	r3, [r0, #0]
   24e16:	005a      	lsls	r2, r3, #1
   24e18:	bf4c      	ite	mi
   24e1a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
   24e1e:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
   24e22:	18c0      	adds	r0, r0, r3
   24e24:	4770      	bx	lr
   24e26:	bf00      	nop

00024e28 <search_EIT_table>:
   24e28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24e2c:	4604      	mov	r4, r0
   24e2e:	4691      	mov	r9, r2
   24e30:	460e      	mov	r6, r1
   24e32:	b301      	cbz	r1, 24e76 <search_EIT_table+0x4e>
   24e34:	f101 3bff 	add.w	fp, r1, #4294967295
   24e38:	2700      	movs	r7, #0
   24e3a:	46da      	mov	sl, fp
   24e3c:	eb07 010a 	add.w	r1, r7, sl
   24e40:	eb01 75d1 	add.w	r5, r1, r1, lsr #31
   24e44:	106d      	asrs	r5, r5, #1
   24e46:	eb04 06c5 	add.w	r6, r4, r5, lsl #3
   24e4a:	4630      	mov	r0, r6
   24e4c:	f7ff ffe2 	bl	24e14 <selfrel_offset31>
   24e50:	4680      	mov	r8, r0
   24e52:	1c68      	adds	r0, r5, #1
   24e54:	45ab      	cmp	fp, r5
   24e56:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   24e5a:	bf08      	it	eq
   24e5c:	f04f 30ff 	moveq.w	r0, #4294967295
   24e60:	d002      	beq.n	24e68 <search_EIT_table+0x40>
   24e62:	f7ff ffd7 	bl	24e14 <selfrel_offset31>
   24e66:	3801      	subs	r0, #1
   24e68:	45c8      	cmp	r8, r9
   24e6a:	d907      	bls.n	24e7c <search_EIT_table+0x54>
   24e6c:	42bd      	cmp	r5, r7
   24e6e:	f105 3aff 	add.w	sl, r5, #4294967295
   24e72:	d1e3      	bne.n	24e3c <search_EIT_table+0x14>
   24e74:	2600      	movs	r6, #0
   24e76:	4630      	mov	r0, r6
   24e78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24e7c:	4548      	cmp	r0, r9
   24e7e:	f105 0701 	add.w	r7, r5, #1
   24e82:	d3db      	bcc.n	24e3c <search_EIT_table+0x14>
   24e84:	4630      	mov	r0, r6
   24e86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24e8a:	bf00      	nop

00024e8c <get_eit_entry>:
   24e8c:	f240 0300 	movw	r3, #0
   24e90:	f2c0 0300 	movt	r3, #0
   24e94:	b530      	push	{r4, r5, lr}
   24e96:	4604      	mov	r4, r0
   24e98:	b083      	sub	sp, #12
   24e9a:	1e8d      	subs	r5, r1, #2
   24e9c:	2b00      	cmp	r3, #0
   24e9e:	d04f      	beq.n	24f40 <get_eit_entry+0xb4>
   24ea0:	4628      	mov	r0, r5
   24ea2:	a901      	add	r1, sp, #4
   24ea4:	f3af 8000 	nop.w
   24ea8:	4603      	mov	r3, r0
   24eaa:	2800      	cmp	r0, #0
   24eac:	d022      	beq.n	24ef4 <get_eit_entry+0x68>
   24eae:	462a      	mov	r2, r5
   24eb0:	4618      	mov	r0, r3
   24eb2:	9901      	ldr	r1, [sp, #4]
   24eb4:	f7ff ffb8 	bl	24e28 <search_EIT_table>
   24eb8:	4605      	mov	r5, r0
   24eba:	b1d8      	cbz	r0, 24ef4 <get_eit_entry+0x68>
   24ebc:	f7ff ffaa 	bl	24e14 <selfrel_offset31>
   24ec0:	686b      	ldr	r3, [r5, #4]
   24ec2:	2b01      	cmp	r3, #1
   24ec4:	64a0      	str	r0, [r4, #72]	; 0x48
   24ec6:	d011      	beq.n	24eec <get_eit_entry+0x60>
   24ec8:	1d28      	adds	r0, r5, #4
   24eca:	2b00      	cmp	r3, #0
   24ecc:	db15      	blt.n	24efa <get_eit_entry+0x6e>
   24ece:	f7ff ffa1 	bl	24e14 <selfrel_offset31>
   24ed2:	2100      	movs	r1, #0
   24ed4:	6521      	str	r1, [r4, #80]	; 0x50
   24ed6:	64e0      	str	r0, [r4, #76]	; 0x4c
   24ed8:	6803      	ldr	r3, [r0, #0]
   24eda:	2b00      	cmp	r3, #0
   24edc:	db11      	blt.n	24f02 <get_eit_entry+0x76>
   24ede:	f7ff ff99 	bl	24e14 <selfrel_offset31>
   24ee2:	2300      	movs	r3, #0
   24ee4:	6120      	str	r0, [r4, #16]
   24ee6:	4618      	mov	r0, r3
   24ee8:	b003      	add	sp, #12
   24eea:	bd30      	pop	{r4, r5, pc}
   24eec:	2200      	movs	r2, #0
   24eee:	2305      	movs	r3, #5
   24ef0:	6122      	str	r2, [r4, #16]
   24ef2:	e7f8      	b.n	24ee6 <get_eit_entry+0x5a>
   24ef4:	6120      	str	r0, [r4, #16]
   24ef6:	2309      	movs	r3, #9
   24ef8:	e7f5      	b.n	24ee6 <get_eit_entry+0x5a>
   24efa:	2301      	movs	r3, #1
   24efc:	64e0      	str	r0, [r4, #76]	; 0x4c
   24efe:	6523      	str	r3, [r4, #80]	; 0x50
   24f00:	e7ea      	b.n	24ed8 <get_eit_entry+0x4c>
   24f02:	f3c3 6303 	ubfx	r3, r3, #24, #4
   24f06:	b13b      	cbz	r3, 24f18 <get_eit_entry+0x8c>
   24f08:	2b01      	cmp	r3, #1
   24f0a:	d00b      	beq.n	24f24 <get_eit_entry+0x98>
   24f0c:	2b02      	cmp	r3, #2
   24f0e:	d010      	beq.n	24f32 <get_eit_entry+0xa6>
   24f10:	2000      	movs	r0, #0
   24f12:	2309      	movs	r3, #9
   24f14:	6120      	str	r0, [r4, #16]
   24f16:	e7e6      	b.n	24ee6 <get_eit_entry+0x5a>
   24f18:	f245 40bd 	movw	r0, #21693	; 0x54bd
   24f1c:	f2c0 0002 	movt	r0, #2
   24f20:	6120      	str	r0, [r4, #16]
   24f22:	e7e0      	b.n	24ee6 <get_eit_entry+0x5a>
   24f24:	f245 42b5 	movw	r2, #21685	; 0x54b5
   24f28:	2300      	movs	r3, #0
   24f2a:	f2c0 0202 	movt	r2, #2
   24f2e:	6122      	str	r2, [r4, #16]
   24f30:	e7d9      	b.n	24ee6 <get_eit_entry+0x5a>
   24f32:	f245 41ad 	movw	r1, #21677	; 0x54ad
   24f36:	2300      	movs	r3, #0
   24f38:	f2c0 0102 	movt	r1, #2
   24f3c:	6121      	str	r1, [r4, #16]
   24f3e:	e7d2      	b.n	24ee6 <get_eit_entry+0x5a>
   24f40:	f24c 6184 	movw	r1, #50820	; 0xc684
   24f44:	f24c 439c 	movw	r3, #50332	; 0xc49c
   24f48:	f2c0 0302 	movt	r3, #2
   24f4c:	f2c0 0102 	movt	r1, #2
   24f50:	1ac8      	subs	r0, r1, r3
   24f52:	10c2      	asrs	r2, r0, #3
   24f54:	9201      	str	r2, [sp, #4]
   24f56:	e7aa      	b.n	24eae <get_eit_entry+0x22>

00024f58 <restore_non_core_regs>:
   24f58:	6803      	ldr	r3, [r0, #0]
   24f5a:	b510      	push	{r4, lr}
   24f5c:	07da      	lsls	r2, r3, #31
   24f5e:	4604      	mov	r4, r0
   24f60:	d405      	bmi.n	24f6e <restore_non_core_regs+0x16>
   24f62:	3048      	adds	r0, #72	; 0x48
   24f64:	0799      	lsls	r1, r3, #30
   24f66:	d509      	bpl.n	24f7c <restore_non_core_regs+0x24>
   24f68:	f000 fd52 	bl	25a10 <__gnu_Unwind_Restore_VFP_D>
   24f6c:	6823      	ldr	r3, [r4, #0]
   24f6e:	075a      	lsls	r2, r3, #29
   24f70:	d509      	bpl.n	24f86 <restore_non_core_regs+0x2e>
   24f72:	0718      	lsls	r0, r3, #28
   24f74:	d50e      	bpl.n	24f94 <restore_non_core_regs+0x3c>
   24f76:	06d9      	lsls	r1, r3, #27
   24f78:	d513      	bpl.n	24fa2 <restore_non_core_regs+0x4a>
   24f7a:	bd10      	pop	{r4, pc}
   24f7c:	f000 fd40 	bl	25a00 <__gnu_Unwind_Restore_VFP>
   24f80:	6823      	ldr	r3, [r4, #0]
   24f82:	075a      	lsls	r2, r3, #29
   24f84:	d4f5      	bmi.n	24f72 <restore_non_core_regs+0x1a>
   24f86:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   24f8a:	f000 fd49 	bl	25a20 <__gnu_Unwind_Restore_VFP_D_16_to_31>
   24f8e:	6823      	ldr	r3, [r4, #0]
   24f90:	0718      	lsls	r0, r3, #28
   24f92:	d4f0      	bmi.n	24f76 <restore_non_core_regs+0x1e>
   24f94:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
   24f98:	f000 fd4a 	bl	25a30 <__gnu_Unwind_Restore_WMMXD>
   24f9c:	6823      	ldr	r3, [r4, #0]
   24f9e:	06d9      	lsls	r1, r3, #27
   24fa0:	d4eb      	bmi.n	24f7a <restore_non_core_regs+0x22>
   24fa2:	f504 700c 	add.w	r0, r4, #560	; 0x230
   24fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   24faa:	f000 bd85 	b.w	25ab8 <__gnu_Unwind_Restore_WMMXC>
   24fae:	bf00      	nop

00024fb0 <unwind_phase2_forced>:
   24fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24fb4:	f101 0e04 	add.w	lr, r1, #4
   24fb8:	4605      	mov	r5, r0
   24fba:	4616      	mov	r6, r2
   24fbc:	f5ad 6d90 	sub.w	sp, sp, #1152	; 0x480
   24fc0:	f04f 0c00 	mov.w	ip, #0
   24fc4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   24fc8:	b083      	sub	sp, #12
   24fca:	ac02      	add	r4, sp, #8
   24fcc:	f8d5 a00c 	ldr.w	sl, [r5, #12]
   24fd0:	1d27      	adds	r7, r4, #4
   24fd2:	f8d5 b018 	ldr.w	fp, [r5, #24]
   24fd6:	4566      	cmp	r6, ip
   24fd8:	bf14      	ite	ne
   24fda:	260a      	movne	r6, #10
   24fdc:	2609      	moveq	r6, #9
   24fde:	46e1      	mov	r9, ip
   24fe0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   24fe2:	f50d 7812 	add.w	r8, sp, #584	; 0x248
   24fe6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   24fea:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   24fec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   24ff0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   24ff2:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
   24ff6:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   24ffa:	4628      	mov	r0, r5
   24ffc:	6c21      	ldr	r1, [r4, #64]	; 0x40
   24ffe:	f8c4 c000 	str.w	ip, [r4]
   25002:	f7ff ff43 	bl	24e8c <get_eit_entry>
   25006:	4607      	mov	r7, r0
   25008:	b307      	cbz	r7, 2504c <unwind_phase2_forced+0x9c>
   2500a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   2500c:	f046 0610 	orr.w	r6, r6, #16
   25010:	4631      	mov	r1, r6
   25012:	462a      	mov	r2, r5
   25014:	462b      	mov	r3, r5
   25016:	6460      	str	r0, [r4, #68]	; 0x44
   25018:	2001      	movs	r0, #1
   2501a:	e88d 0810 	stmia.w	sp, {r4, fp}
   2501e:	47d0      	blx	sl
   25020:	2800      	cmp	r0, #0
   25022:	d12e      	bne.n	25082 <unwind_phase2_forced+0xd2>
   25024:	2f00      	cmp	r7, #0
   25026:	d12d      	bne.n	25084 <unwind_phase2_forced+0xd4>
   25028:	4620      	mov	r0, r4
   2502a:	4641      	mov	r1, r8
   2502c:	f44f 7210 	mov.w	r2, #576	; 0x240
   25030:	f7fa fb1a 	bl	1f668 <memcpy>
   25034:	f1b9 0f08 	cmp.w	r9, #8
   25038:	4604      	mov	r4, r0
   2503a:	d129      	bne.n	25090 <unwind_phase2_forced+0xe0>
   2503c:	4628      	mov	r0, r5
   2503e:	6c21      	ldr	r1, [r4, #64]	; 0x40
   25040:	f7ff ff24 	bl	24e8c <get_eit_entry>
   25044:	2609      	movs	r6, #9
   25046:	4607      	mov	r7, r0
   25048:	2f00      	cmp	r7, #0
   2504a:	d1de      	bne.n	2500a <unwind_phase2_forced+0x5a>
   2504c:	6c23      	ldr	r3, [r4, #64]	; 0x40
   2504e:	4621      	mov	r1, r4
   25050:	f44f 7210 	mov.w	r2, #576	; 0x240
   25054:	4640      	mov	r0, r8
   25056:	616b      	str	r3, [r5, #20]
   25058:	f7fa fb06 	bl	1f668 <memcpy>
   2505c:	692b      	ldr	r3, [r5, #16]
   2505e:	4629      	mov	r1, r5
   25060:	4680      	mov	r8, r0
   25062:	4630      	mov	r0, r6
   25064:	4642      	mov	r2, r8
   25066:	4798      	blx	r3
   25068:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
   2506c:	4631      	mov	r1, r6
   2506e:	462a      	mov	r2, r5
   25070:	6463      	str	r3, [r4, #68]	; 0x44
   25072:	462b      	mov	r3, r5
   25074:	e88d 0810 	stmia.w	sp, {r4, fp}
   25078:	4681      	mov	r9, r0
   2507a:	2001      	movs	r0, #1
   2507c:	47d0      	blx	sl
   2507e:	2800      	cmp	r0, #0
   25080:	d0d0      	beq.n	25024 <unwind_phase2_forced+0x74>
   25082:	2709      	movs	r7, #9
   25084:	4638      	mov	r0, r7
   25086:	b023      	add	sp, #140	; 0x8c
   25088:	f50d 6d80 	add.w	sp, sp, #1024	; 0x400
   2508c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25090:	f1b9 0f07 	cmp.w	r9, #7
   25094:	d1f5      	bne.n	25082 <unwind_phase2_forced+0xd2>
   25096:	3004      	adds	r0, #4
   25098:	f000 fca6 	bl	259e8 <__restore_core_regs>

0002509c <unwind_phase2>:
   2509c:	b570      	push	{r4, r5, r6, lr}
   2509e:	4604      	mov	r4, r0
   250a0:	460d      	mov	r5, r1
   250a2:	4620      	mov	r0, r4
   250a4:	6c29      	ldr	r1, [r5, #64]	; 0x40
   250a6:	f7ff fef1 	bl	24e8c <get_eit_entry>
   250aa:	b950      	cbnz	r0, 250c2 <unwind_phase2+0x26>
   250ac:	6c2e      	ldr	r6, [r5, #64]	; 0x40
   250ae:	2001      	movs	r0, #1
   250b0:	6923      	ldr	r3, [r4, #16]
   250b2:	4621      	mov	r1, r4
   250b4:	462a      	mov	r2, r5
   250b6:	6166      	str	r6, [r4, #20]
   250b8:	4798      	blx	r3
   250ba:	2808      	cmp	r0, #8
   250bc:	d0f1      	beq.n	250a2 <unwind_phase2+0x6>
   250be:	2807      	cmp	r0, #7
   250c0:	d001      	beq.n	250c6 <unwind_phase2+0x2a>
   250c2:	f7f9 fcbb 	bl	1ea3c <abort>
   250c6:	1d28      	adds	r0, r5, #4
   250c8:	f000 fc8e 	bl	259e8 <__restore_core_regs>

000250cc <_Unwind_VRS_Get>:
   250cc:	b959      	cbnz	r1, 250e6 <_Unwind_VRS_Get+0x1a>
   250ce:	2a0f      	cmp	r2, #15
   250d0:	bf94      	ite	ls
   250d2:	2100      	movls	r1, #0
   250d4:	2101      	movhi	r1, #1
   250d6:	2b00      	cmp	r3, #0
   250d8:	bf0c      	ite	eq
   250da:	460b      	moveq	r3, r1
   250dc:	f041 0301 	orrne.w	r3, r1, #1
   250e0:	b133      	cbz	r3, 250f0 <_Unwind_VRS_Get+0x24>
   250e2:	2002      	movs	r0, #2
   250e4:	4770      	bx	lr
   250e6:	2904      	cmp	r1, #4
   250e8:	bf8c      	ite	hi
   250ea:	2002      	movhi	r0, #2
   250ec:	2001      	movls	r0, #1
   250ee:	4770      	bx	lr
   250f0:	eb00 0182 	add.w	r1, r0, r2, lsl #2
   250f4:	4618      	mov	r0, r3
   250f6:	9b00      	ldr	r3, [sp, #0]
   250f8:	684a      	ldr	r2, [r1, #4]
   250fa:	601a      	str	r2, [r3, #0]
   250fc:	4770      	bx	lr
   250fe:	bf00      	nop

00025100 <_Unwind_GetGR>:
   25100:	b510      	push	{r4, lr}
   25102:	460a      	mov	r2, r1
   25104:	b084      	sub	sp, #16
   25106:	2100      	movs	r1, #0
   25108:	460b      	mov	r3, r1
   2510a:	ac03      	add	r4, sp, #12
   2510c:	9400      	str	r4, [sp, #0]
   2510e:	f7ff ffdd 	bl	250cc <_Unwind_VRS_Get>
   25112:	9803      	ldr	r0, [sp, #12]
   25114:	b004      	add	sp, #16
   25116:	bd10      	pop	{r4, pc}

00025118 <_Unwind_VRS_Set>:
   25118:	b959      	cbnz	r1, 25132 <_Unwind_VRS_Set+0x1a>
   2511a:	2a0f      	cmp	r2, #15
   2511c:	bf94      	ite	ls
   2511e:	2100      	movls	r1, #0
   25120:	2101      	movhi	r1, #1
   25122:	2b00      	cmp	r3, #0
   25124:	bf0c      	ite	eq
   25126:	460b      	moveq	r3, r1
   25128:	f041 0301 	orrne.w	r3, r1, #1
   2512c:	b133      	cbz	r3, 2513c <_Unwind_VRS_Set+0x24>
   2512e:	2002      	movs	r0, #2
   25130:	4770      	bx	lr
   25132:	2904      	cmp	r1, #4
   25134:	bf8c      	ite	hi
   25136:	2002      	movhi	r0, #2
   25138:	2001      	movls	r0, #1
   2513a:	4770      	bx	lr
   2513c:	9900      	ldr	r1, [sp, #0]
   2513e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   25142:	4618      	mov	r0, r3
   25144:	6809      	ldr	r1, [r1, #0]
   25146:	6051      	str	r1, [r2, #4]
   25148:	4770      	bx	lr
   2514a:	bf00      	nop

0002514c <_Unwind_SetGR>:
   2514c:	b530      	push	{r4, r5, lr}
   2514e:	b085      	sub	sp, #20
   25150:	ac04      	add	r4, sp, #16
   25152:	460d      	mov	r5, r1
   25154:	2100      	movs	r1, #0
   25156:	f844 2d04 	str.w	r2, [r4, #-4]!
   2515a:	460b      	mov	r3, r1
   2515c:	462a      	mov	r2, r5
   2515e:	9400      	str	r4, [sp, #0]
   25160:	f7ff ffda 	bl	25118 <_Unwind_VRS_Set>
   25164:	b005      	add	sp, #20
   25166:	bd30      	pop	{r4, r5, pc}

00025168 <__gnu_unwind_pr_common>:
   25168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2516c:	461e      	mov	r6, r3
   2516e:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
   25170:	4617      	mov	r7, r2
   25172:	b08b      	sub	sp, #44	; 0x2c
   25174:	460c      	mov	r4, r1
   25176:	f000 0803 	and.w	r8, r0, #3
   2517a:	f000 0108 	and.w	r1, r0, #8
   2517e:	f853 2b04 	ldr.w	r2, [r3], #4
   25182:	9102      	str	r1, [sp, #8]
   25184:	9307      	str	r3, [sp, #28]
   25186:	2e00      	cmp	r6, #0
   25188:	f040 80f6 	bne.w	25378 <__gnu_unwind_pr_common+0x210>
   2518c:	0210      	lsls	r0, r2, #8
   2518e:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
   25192:	2203      	movs	r2, #3
   25194:	9006      	str	r0, [sp, #24]
   25196:	f88d 2020 	strb.w	r2, [sp, #32]
   2519a:	f1b8 0f02 	cmp.w	r8, #2
   2519e:	6d20      	ldr	r0, [r4, #80]	; 0x50
   251a0:	bf08      	it	eq
   251a2:	6ba3      	ldreq	r3, [r4, #56]	; 0x38
   251a4:	f010 0201 	ands.w	r2, r0, #1
   251a8:	bf02      	ittt	eq
   251aa:	f104 0158 	addeq.w	r1, r4, #88	; 0x58
   251ae:	9201      	streq	r2, [sp, #4]
   251b0:	9103      	streq	r1, [sp, #12]
   251b2:	f040 80ed 	bne.w	25390 <__gnu_unwind_pr_common+0x228>
   251b6:	f8d3 9000 	ldr.w	r9, [r3]
   251ba:	f1b9 0f00 	cmp.w	r9, #0
   251be:	d031      	beq.n	25224 <__gnu_unwind_pr_common+0xbc>
   251c0:	2e02      	cmp	r6, #2
   251c2:	f000 80d4 	beq.w	2536e <__gnu_unwind_pr_common+0x206>
   251c6:	f8b3 9000 	ldrh.w	r9, [r3]
   251ca:	1d1d      	adds	r5, r3, #4
   251cc:	f8b3 b002 	ldrh.w	fp, [r3, #2]
   251d0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   251d2:	210f      	movs	r1, #15
   251d4:	f02b 0a01 	bic.w	sl, fp, #1
   251d8:	4638      	mov	r0, r7
   251da:	449a      	add	sl, r3
   251dc:	f7ff ff90 	bl	25100 <_Unwind_GetGR>
   251e0:	4582      	cmp	sl, r0
   251e2:	d83c      	bhi.n	2525e <__gnu_unwind_pr_common+0xf6>
   251e4:	f029 0201 	bic.w	r2, r9, #1
   251e8:	f00b 0b01 	and.w	fp, fp, #1
   251ec:	4492      	add	sl, r2
   251ee:	f009 0101 	and.w	r1, r9, #1
   251f2:	4550      	cmp	r0, sl
   251f4:	ea41 094b 	orr.w	r9, r1, fp, lsl #1
   251f8:	bf2c      	ite	cs
   251fa:	2000      	movcs	r0, #0
   251fc:	2001      	movcc	r0, #1
   251fe:	f1b9 0f01 	cmp.w	r9, #1
   25202:	d036      	beq.n	25272 <__gnu_unwind_pr_common+0x10a>
   25204:	d254      	bcs.n	252b0 <__gnu_unwind_pr_common+0x148>
   25206:	f1b8 0f00 	cmp.w	r8, #0
   2520a:	bf0c      	ite	eq
   2520c:	2000      	moveq	r0, #0
   2520e:	f000 0001 	andne.w	r0, r0, #1
   25212:	2800      	cmp	r0, #0
   25214:	f040 8122 	bne.w	2545c <__gnu_unwind_pr_common+0x2f4>
   25218:	1d2b      	adds	r3, r5, #4
   2521a:	f8d3 9000 	ldr.w	r9, [r3]
   2521e:	f1b9 0f00 	cmp.w	r9, #0
   25222:	d1cd      	bne.n	251c0 <__gnu_unwind_pr_common+0x58>
   25224:	4638      	mov	r0, r7
   25226:	a906      	add	r1, sp, #24
   25228:	f000 fcde 	bl	25be8 <__gnu_unwind_execute>
   2522c:	2800      	cmp	r0, #0
   2522e:	d142      	bne.n	252b6 <__gnu_unwind_pr_common+0x14e>
   25230:	9a01      	ldr	r2, [sp, #4]
   25232:	2308      	movs	r3, #8
   25234:	2a00      	cmp	r2, #0
   25236:	d03f      	beq.n	252b8 <__gnu_unwind_pr_common+0x150>
   25238:	210f      	movs	r1, #15
   2523a:	4638      	mov	r0, r7
   2523c:	f7ff ff60 	bl	25100 <_Unwind_GetGR>
   25240:	210e      	movs	r1, #14
   25242:	4602      	mov	r2, r0
   25244:	4638      	mov	r0, r7
   25246:	f7ff ff81 	bl	2514c <_Unwind_SetGR>
   2524a:	f643 1285 	movw	r2, #14725	; 0x3985
   2524e:	4638      	mov	r0, r7
   25250:	210f      	movs	r1, #15
   25252:	f2c0 0201 	movt	r2, #1
   25256:	f7ff ff79 	bl	2514c <_Unwind_SetGR>
   2525a:	2307      	movs	r3, #7
   2525c:	e02c      	b.n	252b8 <__gnu_unwind_pr_common+0x150>
   2525e:	f00b 0b01 	and.w	fp, fp, #1
   25262:	f009 0101 	and.w	r1, r9, #1
   25266:	2000      	movs	r0, #0
   25268:	ea41 094b 	orr.w	r9, r1, fp, lsl #1
   2526c:	f1b9 0f01 	cmp.w	r9, #1
   25270:	d1c8      	bne.n	25204 <__gnu_unwind_pr_common+0x9c>
   25272:	f1b8 0f00 	cmp.w	r8, #0
   25276:	f040 80a7 	bne.w	253c8 <__gnu_unwind_pr_common+0x260>
   2527a:	b1b0      	cbz	r0, 252aa <__gnu_unwind_pr_common+0x142>
   2527c:	686b      	ldr	r3, [r5, #4]
   2527e:	f8d5 9000 	ldr.w	r9, [r5]
   25282:	1c99      	adds	r1, r3, #2
   25284:	d017      	beq.n	252b6 <__gnu_unwind_pr_common+0x14e>
   25286:	9803      	ldr	r0, [sp, #12]
   25288:	3301      	adds	r3, #1
   2528a:	9009      	str	r0, [sp, #36]	; 0x24
   2528c:	f000 80b8 	beq.w	25400 <__gnu_unwind_pr_common+0x298>
   25290:	1d28      	adds	r0, r5, #4
   25292:	f7ff fdb9 	bl	24e08 <_Unwind_decode_target2>
   25296:	ea4f 72d9 	mov.w	r2, r9, lsr #31
   2529a:	ab09      	add	r3, sp, #36	; 0x24
   2529c:	4601      	mov	r1, r0
   2529e:	4620      	mov	r0, r4
   252a0:	f7ee fc4a 	bl	13b38 <__cxa_type_match>
   252a4:	2800      	cmp	r0, #0
   252a6:	f040 80f1 	bne.w	2548c <__gnu_unwind_pr_common+0x324>
   252aa:	f105 0308 	add.w	r3, r5, #8
   252ae:	e782      	b.n	251b6 <__gnu_unwind_pr_common+0x4e>
   252b0:	f1b9 0f02 	cmp.w	r9, #2
   252b4:	d004      	beq.n	252c0 <__gnu_unwind_pr_common+0x158>
   252b6:	2309      	movs	r3, #9
   252b8:	4618      	mov	r0, r3
   252ba:	b00b      	add	sp, #44	; 0x2c
   252bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   252c0:	682b      	ldr	r3, [r5, #0]
   252c2:	f023 4a00 	bic.w	sl, r3, #2147483648	; 0x80000000
   252c6:	f1b8 0f00 	cmp.w	r8, #0
   252ca:	d164      	bne.n	25396 <__gnu_unwind_pr_common+0x22e>
   252cc:	2800      	cmp	r0, #0
   252ce:	d047      	beq.n	25360 <__gnu_unwind_pr_common+0x1f8>
   252d0:	9802      	ldr	r0, [sp, #8]
   252d2:	f1d0 0101 	rsbs	r1, r0, #1
   252d6:	bf38      	it	cc
   252d8:	2100      	movcc	r1, #0
   252da:	f1ba 0f00 	cmp.w	sl, #0
   252de:	bf08      	it	eq
   252e0:	f041 0101 	orreq.w	r1, r1, #1
   252e4:	2900      	cmp	r1, #0
   252e6:	d03b      	beq.n	25360 <__gnu_unwind_pr_common+0x1f8>
   252e8:	f1ba 0f00 	cmp.w	sl, #0
   252ec:	f000 80ac 	beq.w	25448 <__gnu_unwind_pr_common+0x2e0>
   252f0:	f01a 0f01 	tst.w	sl, #1
   252f4:	f105 0b04 	add.w	fp, r5, #4
   252f8:	46c1      	mov	r9, r8
   252fa:	f000 808d 	beq.w	25418 <__gnu_unwind_pr_common+0x2b0>
   252fe:	9605      	str	r6, [sp, #20]
   25300:	462e      	mov	r6, r5
   25302:	f8cd 8010 	str.w	r8, [sp, #16]
   25306:	9d03      	ldr	r5, [sp, #12]
   25308:	e014      	b.n	25334 <__gnu_unwind_pr_common+0x1cc>
   2530a:	4553      	cmp	r3, sl
   2530c:	f10b 0b04 	add.w	fp, fp, #4
   25310:	4658      	mov	r0, fp
   25312:	4699      	mov	r9, r3
   25314:	f10b 0b04 	add.w	fp, fp, #4
   25318:	f000 8095 	beq.w	25446 <__gnu_unwind_pr_common+0x2de>
   2531c:	9509      	str	r5, [sp, #36]	; 0x24
   2531e:	f7ff fd73 	bl	24e08 <_Unwind_decode_target2>
   25322:	4642      	mov	r2, r8
   25324:	ab09      	add	r3, sp, #36	; 0x24
   25326:	4601      	mov	r1, r0
   25328:	4620      	mov	r0, r4
   2532a:	f7ee fc05 	bl	13b38 <__cxa_type_match>
   2532e:	b980      	cbnz	r0, 25352 <__gnu_unwind_pr_common+0x1ea>
   25330:	f109 0901 	add.w	r9, r9, #1
   25334:	4658      	mov	r0, fp
   25336:	9509      	str	r5, [sp, #36]	; 0x24
   25338:	f7ff fd66 	bl	24e08 <_Unwind_decode_target2>
   2533c:	ab09      	add	r3, sp, #36	; 0x24
   2533e:	2200      	movs	r2, #0
   25340:	4601      	mov	r1, r0
   25342:	4620      	mov	r0, r4
   25344:	f7ee fbf8 	bl	13b38 <__cxa_type_match>
   25348:	f109 0301 	add.w	r3, r9, #1
   2534c:	4680      	mov	r8, r0
   2534e:	2800      	cmp	r0, #0
   25350:	d0db      	beq.n	2530a <__gnu_unwind_pr_common+0x1a2>
   25352:	4635      	mov	r5, r6
   25354:	f8dd 8010 	ldr.w	r8, [sp, #16]
   25358:	9e05      	ldr	r6, [sp, #20]
   2535a:	45ca      	cmp	sl, r9
   2535c:	d074      	beq.n	25448 <__gnu_unwind_pr_common+0x2e0>
   2535e:	682b      	ldr	r3, [r5, #0]
   25360:	2b00      	cmp	r3, #0
   25362:	db57      	blt.n	25414 <__gnu_unwind_pr_common+0x2ac>
   25364:	f10a 0a01 	add.w	sl, sl, #1
   25368:	eb05 038a 	add.w	r3, r5, sl, lsl #2
   2536c:	e723      	b.n	251b6 <__gnu_unwind_pr_common+0x4e>
   2536e:	f8d3 b004 	ldr.w	fp, [r3, #4]
   25372:	f103 0508 	add.w	r5, r3, #8
   25376:	e72b      	b.n	251d0 <__gnu_unwind_pr_common+0x68>
   25378:	f3c2 4107 	ubfx	r1, r2, #16, #8
   2537c:	0410      	lsls	r0, r2, #16
   2537e:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
   25382:	2202      	movs	r2, #2
   25384:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   25388:	9006      	str	r0, [sp, #24]
   2538a:	f88d 2020 	strb.w	r2, [sp, #32]
   2538e:	e704      	b.n	2519a <__gnu_unwind_pr_common+0x32>
   25390:	2100      	movs	r1, #0
   25392:	9101      	str	r1, [sp, #4]
   25394:	e746      	b.n	25224 <__gnu_unwind_pr_common+0xbc>
   25396:	210d      	movs	r1, #13
   25398:	4638      	mov	r0, r7
   2539a:	f8d4 9020 	ldr.w	r9, [r4, #32]
   2539e:	f7ff feaf 	bl	25100 <_Unwind_GetGR>
   253a2:	4581      	cmp	r9, r0
   253a4:	d1db      	bne.n	2535e <__gnu_unwind_pr_common+0x1f6>
   253a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   253a8:	429d      	cmp	r5, r3
   253aa:	d1d8      	bne.n	2535e <__gnu_unwind_pr_common+0x1f6>
   253ac:	2300      	movs	r3, #0
   253ae:	1d28      	adds	r0, r5, #4
   253b0:	2204      	movs	r2, #4
   253b2:	f8c4 a028 	str.w	sl, [r4, #40]	; 0x28
   253b6:	62e3      	str	r3, [r4, #44]	; 0x2c
   253b8:	6322      	str	r2, [r4, #48]	; 0x30
   253ba:	6360      	str	r0, [r4, #52]	; 0x34
   253bc:	6829      	ldr	r1, [r5, #0]
   253be:	2900      	cmp	r1, #0
   253c0:	db5f      	blt.n	25482 <__gnu_unwind_pr_common+0x31a>
   253c2:	2001      	movs	r0, #1
   253c4:	9001      	str	r0, [sp, #4]
   253c6:	e7cd      	b.n	25364 <__gnu_unwind_pr_common+0x1fc>
   253c8:	210d      	movs	r1, #13
   253ca:	4638      	mov	r0, r7
   253cc:	f8d4 9020 	ldr.w	r9, [r4, #32]
   253d0:	f7ff fe96 	bl	25100 <_Unwind_GetGR>
   253d4:	4581      	cmp	r9, r0
   253d6:	f47f af68 	bne.w	252aa <__gnu_unwind_pr_common+0x142>
   253da:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   253dc:	4295      	cmp	r5, r2
   253de:	f47f af64 	bne.w	252aa <__gnu_unwind_pr_common+0x142>
   253e2:	4628      	mov	r0, r5
   253e4:	f7ff fd16 	bl	24e14 <selfrel_offset31>
   253e8:	210f      	movs	r1, #15
   253ea:	4602      	mov	r2, r0
   253ec:	4638      	mov	r0, r7
   253ee:	f7ff fead 	bl	2514c <_Unwind_SetGR>
   253f2:	4638      	mov	r0, r7
   253f4:	2100      	movs	r1, #0
   253f6:	4622      	mov	r2, r4
   253f8:	f7ff fea8 	bl	2514c <_Unwind_SetGR>
   253fc:	2307      	movs	r3, #7
   253fe:	e75b      	b.n	252b8 <__gnu_unwind_pr_common+0x150>
   25400:	4638      	mov	r0, r7
   25402:	210d      	movs	r1, #13
   25404:	f7ff fe7c 	bl	25100 <_Unwind_GetGR>
   25408:	6220      	str	r0, [r4, #32]
   2540a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2540c:	6263      	str	r3, [r4, #36]	; 0x24
   2540e:	62a5      	str	r5, [r4, #40]	; 0x28
   25410:	2306      	movs	r3, #6
   25412:	e751      	b.n	252b8 <__gnu_unwind_pr_common+0x150>
   25414:	3504      	adds	r5, #4
   25416:	e7a5      	b.n	25364 <__gnu_unwind_pr_common+0x1fc>
   25418:	9b03      	ldr	r3, [sp, #12]
   2541a:	4658      	mov	r0, fp
   2541c:	9309      	str	r3, [sp, #36]	; 0x24
   2541e:	f7ff fcf3 	bl	24e08 <_Unwind_decode_target2>
   25422:	4642      	mov	r2, r8
   25424:	ab09      	add	r3, sp, #36	; 0x24
   25426:	4601      	mov	r1, r0
   25428:	4620      	mov	r0, r4
   2542a:	f7ee fb85 	bl	13b38 <__cxa_type_match>
   2542e:	2800      	cmp	r0, #0
   25430:	d193      	bne.n	2535a <__gnu_unwind_pr_common+0x1f2>
   25432:	9605      	str	r6, [sp, #20]
   25434:	f10b 0b04 	add.w	fp, fp, #4
   25438:	462e      	mov	r6, r5
   2543a:	f04f 0901 	mov.w	r9, #1
   2543e:	f8cd 8010 	str.w	r8, [sp, #16]
   25442:	9d03      	ldr	r5, [sp, #12]
   25444:	e776      	b.n	25334 <__gnu_unwind_pr_common+0x1cc>
   25446:	4635      	mov	r5, r6
   25448:	4638      	mov	r0, r7
   2544a:	210d      	movs	r1, #13
   2544c:	f7ff fe58 	bl	25100 <_Unwind_GetGR>
   25450:	9a09      	ldr	r2, [sp, #36]	; 0x24
   25452:	62a5      	str	r5, [r4, #40]	; 0x28
   25454:	2306      	movs	r3, #6
   25456:	6262      	str	r2, [r4, #36]	; 0x24
   25458:	6220      	str	r0, [r4, #32]
   2545a:	e72d      	b.n	252b8 <__gnu_unwind_pr_common+0x150>
   2545c:	4628      	mov	r0, r5
   2545e:	3504      	adds	r5, #4
   25460:	f7ff fcd8 	bl	24e14 <selfrel_offset31>
   25464:	63a5      	str	r5, [r4, #56]	; 0x38
   25466:	4606      	mov	r6, r0
   25468:	4620      	mov	r0, r4
   2546a:	f7ee fbc3 	bl	13bf4 <__cxa_begin_cleanup>
   2546e:	2800      	cmp	r0, #0
   25470:	f43f af21 	beq.w	252b6 <__gnu_unwind_pr_common+0x14e>
   25474:	4638      	mov	r0, r7
   25476:	210f      	movs	r1, #15
   25478:	4632      	mov	r2, r6
   2547a:	f7ff fe67 	bl	2514c <_Unwind_SetGR>
   2547e:	2307      	movs	r3, #7
   25480:	e71a      	b.n	252b8 <__gnu_unwind_pr_common+0x150>
   25482:	f10a 0101 	add.w	r1, sl, #1
   25486:	eb05 0081 	add.w	r0, r5, r1, lsl #2
   2548a:	e7ab      	b.n	253e4 <__gnu_unwind_pr_common+0x27c>
   2548c:	4602      	mov	r2, r0
   2548e:	210d      	movs	r1, #13
   25490:	4638      	mov	r0, r7
   25492:	9200      	str	r2, [sp, #0]
   25494:	f7ff fe34 	bl	25100 <_Unwind_GetGR>
   25498:	9b00      	ldr	r3, [sp, #0]
   2549a:	2b02      	cmp	r3, #2
   2549c:	6220      	str	r0, [r4, #32]
   2549e:	d1b4      	bne.n	2540a <__gnu_unwind_pr_common+0x2a2>
   254a0:	9809      	ldr	r0, [sp, #36]	; 0x24
   254a2:	4621      	mov	r1, r4
   254a4:	f841 0f2c 	str.w	r0, [r1, #44]!
   254a8:	6261      	str	r1, [r4, #36]	; 0x24
   254aa:	e7b0      	b.n	2540e <__gnu_unwind_pr_common+0x2a6>

000254ac <__aeabi_unwind_cpp_pr2>:
   254ac:	2302      	movs	r3, #2
   254ae:	f7ff be5b 	b.w	25168 <__gnu_unwind_pr_common>
   254b2:	bf00      	nop

000254b4 <__aeabi_unwind_cpp_pr1>:
   254b4:	2301      	movs	r3, #1
   254b6:	f7ff be57 	b.w	25168 <__gnu_unwind_pr_common>
   254ba:	bf00      	nop

000254bc <__aeabi_unwind_cpp_pr0>:
   254bc:	2300      	movs	r3, #0
   254be:	f7ff be53 	b.w	25168 <__gnu_unwind_pr_common>
   254c2:	bf00      	nop

000254c4 <_Unwind_VRS_Pop>:
   254c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   254c8:	4604      	mov	r4, r0
   254ca:	b0e8      	sub	sp, #416	; 0x1a0
   254cc:	2904      	cmp	r1, #4
   254ce:	d807      	bhi.n	254e0 <_Unwind_VRS_Pop+0x1c>
   254d0:	e8df f001 	tbb	[pc, r1]
   254d4:	0394963a 	.word	0x0394963a
   254d8:	0a          	.byte	0x0a
   254d9:	00          	.byte	0x00
   254da:	2b03      	cmp	r3, #3
   254dc:	f000 815d 	beq.w	2579a <_Unwind_VRS_Pop+0x2d6>
   254e0:	2002      	movs	r0, #2
   254e2:	b068      	add	sp, #416	; 0x1a0
   254e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   254e8:	2a10      	cmp	r2, #16
   254ea:	bf94      	ite	ls
   254ec:	2100      	movls	r1, #0
   254ee:	2101      	movhi	r1, #1
   254f0:	2b00      	cmp	r3, #0
   254f2:	bf0c      	ite	eq
   254f4:	460b      	moveq	r3, r1
   254f6:	f041 0301 	orrne.w	r3, r1, #1
   254fa:	2b00      	cmp	r3, #0
   254fc:	d1f0      	bne.n	254e0 <_Unwind_VRS_Pop+0x1c>
   254fe:	6823      	ldr	r3, [r4, #0]
   25500:	06d9      	lsls	r1, r3, #27
   25502:	f100 8186 	bmi.w	25812 <_Unwind_VRS_Pop+0x34e>
   25506:	a864      	add	r0, sp, #400	; 0x190
   25508:	9201      	str	r2, [sp, #4]
   2550a:	f000 fadf 	bl	25acc <__gnu_Unwind_Save_WMMXC>
   2550e:	9a01      	ldr	r2, [sp, #4]
   25510:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   25512:	07d0      	lsls	r0, r2, #31
   25514:	bf44      	itt	mi
   25516:	f853 0b04 	ldrmi.w	r0, [r3], #4
   2551a:	9064      	strmi	r0, [sp, #400]	; 0x190
   2551c:	0791      	lsls	r1, r2, #30
   2551e:	bf44      	itt	mi
   25520:	f853 1b04 	ldrmi.w	r1, [r3], #4
   25524:	9165      	strmi	r1, [sp, #404]	; 0x194
   25526:	0750      	lsls	r0, r2, #29
   25528:	a864      	add	r0, sp, #400	; 0x190
   2552a:	bf44      	itt	mi
   2552c:	f853 1b04 	ldrmi.w	r1, [r3], #4
   25530:	9166      	strmi	r1, [sp, #408]	; 0x198
   25532:	0711      	lsls	r1, r2, #28
   25534:	bf48      	it	mi
   25536:	f853 2b04 	ldrmi.w	r2, [r3], #4
   2553a:	63a3      	str	r3, [r4, #56]	; 0x38
   2553c:	bf48      	it	mi
   2553e:	9267      	strmi	r2, [sp, #412]	; 0x19c
   25540:	f000 faba 	bl	25ab8 <__gnu_Unwind_Restore_WMMXC>
   25544:	2000      	movs	r0, #0
   25546:	e7cc      	b.n	254e2 <_Unwind_VRS_Pop+0x1e>
   25548:	2b00      	cmp	r3, #0
   2554a:	d1c9      	bne.n	254e0 <_Unwind_VRS_Pop+0x1c>
   2554c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2554e:	07d0      	lsls	r0, r2, #31
   25550:	b291      	uxth	r1, r2
   25552:	bf44      	itt	mi
   25554:	f853 2b04 	ldrmi.w	r2, [r3], #4
   25558:	6062      	strmi	r2, [r4, #4]
   2555a:	078a      	lsls	r2, r1, #30
   2555c:	bf44      	itt	mi
   2555e:	f853 2b04 	ldrmi.w	r2, [r3], #4
   25562:	60a2      	strmi	r2, [r4, #8]
   25564:	0748      	lsls	r0, r1, #29
   25566:	bf44      	itt	mi
   25568:	f853 2b04 	ldrmi.w	r2, [r3], #4
   2556c:	60e2      	strmi	r2, [r4, #12]
   2556e:	070a      	lsls	r2, r1, #28
   25570:	bf44      	itt	mi
   25572:	f853 2b04 	ldrmi.w	r2, [r3], #4
   25576:	6122      	strmi	r2, [r4, #16]
   25578:	06c8      	lsls	r0, r1, #27
   2557a:	bf44      	itt	mi
   2557c:	f853 2b04 	ldrmi.w	r2, [r3], #4
   25580:	6162      	strmi	r2, [r4, #20]
   25582:	068a      	lsls	r2, r1, #26
   25584:	bf44      	itt	mi
   25586:	f853 2b04 	ldrmi.w	r2, [r3], #4
   2558a:	61a2      	strmi	r2, [r4, #24]
   2558c:	0648      	lsls	r0, r1, #25
   2558e:	bf44      	itt	mi
   25590:	f853 2b04 	ldrmi.w	r2, [r3], #4
   25594:	61e2      	strmi	r2, [r4, #28]
   25596:	060a      	lsls	r2, r1, #24
   25598:	bf44      	itt	mi
   2559a:	f853 2b04 	ldrmi.w	r2, [r3], #4
   2559e:	6222      	strmi	r2, [r4, #32]
   255a0:	05c8      	lsls	r0, r1, #23
   255a2:	bf44      	itt	mi
   255a4:	f853 2b04 	ldrmi.w	r2, [r3], #4
   255a8:	6262      	strmi	r2, [r4, #36]	; 0x24
   255aa:	058a      	lsls	r2, r1, #22
   255ac:	bf44      	itt	mi
   255ae:	f853 2b04 	ldrmi.w	r2, [r3], #4
   255b2:	62a2      	strmi	r2, [r4, #40]	; 0x28
   255b4:	0548      	lsls	r0, r1, #21
   255b6:	bf44      	itt	mi
   255b8:	f853 2b04 	ldrmi.w	r2, [r3], #4
   255bc:	62e2      	strmi	r2, [r4, #44]	; 0x2c
   255be:	050a      	lsls	r2, r1, #20
   255c0:	bf44      	itt	mi
   255c2:	f853 2b04 	ldrmi.w	r2, [r3], #4
   255c6:	6322      	strmi	r2, [r4, #48]	; 0x30
   255c8:	04c8      	lsls	r0, r1, #19
   255ca:	bf44      	itt	mi
   255cc:	f853 2b04 	ldrmi.w	r2, [r3], #4
   255d0:	6362      	strmi	r2, [r4, #52]	; 0x34
   255d2:	f411 5000 	ands.w	r0, r1, #8192	; 0x2000
   255d6:	bf1c      	itt	ne
   255d8:	f853 2b04 	ldrne.w	r2, [r3], #4
   255dc:	63a2      	strne	r2, [r4, #56]	; 0x38
   255de:	044a      	lsls	r2, r1, #17
   255e0:	bf44      	itt	mi
   255e2:	f853 2b04 	ldrmi.w	r2, [r3], #4
   255e6:	63e2      	strmi	r2, [r4, #60]	; 0x3c
   255e8:	040a      	lsls	r2, r1, #16
   255ea:	bf44      	itt	mi
   255ec:	f853 2b04 	ldrmi.w	r2, [r3], #4
   255f0:	6422      	strmi	r2, [r4, #64]	; 0x40
   255f2:	2800      	cmp	r0, #0
   255f4:	f040 80cf 	bne.w	25796 <_Unwind_VRS_Pop+0x2d2>
   255f8:	63a3      	str	r3, [r4, #56]	; 0x38
   255fa:	e772      	b.n	254e2 <_Unwind_VRS_Pop+0x1e>
   255fc:	2001      	movs	r0, #1
   255fe:	e770      	b.n	254e2 <_Unwind_VRS_Pop+0x1e>
   25600:	1f59      	subs	r1, r3, #5
   25602:	bf18      	it	ne
   25604:	2101      	movne	r1, #1
   25606:	2b01      	cmp	r3, #1
   25608:	bf0c      	ite	eq
   2560a:	2000      	moveq	r0, #0
   2560c:	f001 0001 	andne.w	r0, r1, #1
   25610:	2800      	cmp	r0, #0
   25612:	f47f af65 	bne.w	254e0 <_Unwind_VRS_Pop+0x1c>
   25616:	0c15      	lsrs	r5, r2, #16
   25618:	b296      	uxth	r6, r2
   2561a:	1972      	adds	r2, r6, r5
   2561c:	2b01      	cmp	r3, #1
   2561e:	bf14      	ite	ne
   25620:	2020      	movne	r0, #32
   25622:	2010      	moveq	r0, #16
   25624:	4290      	cmp	r0, r2
   25626:	f4ff af5b 	bcc.w	254e0 <_Unwind_VRS_Pop+0x1c>
   2562a:	f1a3 0c01 	sub.w	ip, r3, #1
   2562e:	f1dc 0700 	rsbs	r7, ip, #0
   25632:	eb47 070c 	adc.w	r7, r7, ip
   25636:	2d0f      	cmp	r5, #15
   25638:	bf94      	ite	ls
   2563a:	2000      	movls	r0, #0
   2563c:	2001      	movhi	r0, #1
   2563e:	4238      	tst	r0, r7
   25640:	f47f af4e 	bne.w	254e0 <_Unwind_VRS_Pop+0x1c>
   25644:	46b0      	mov	r8, r6
   25646:	b928      	cbnz	r0, 25654 <_Unwind_VRS_Pop+0x190>
   25648:	2a10      	cmp	r2, #16
   2564a:	bf98      	it	ls
   2564c:	4680      	movls	r8, r0
   2564e:	d90a      	bls.n	25666 <_Unwind_VRS_Pop+0x1a2>
   25650:	f1a2 0810 	sub.w	r8, r2, #16
   25654:	f1b8 0f00 	cmp.w	r8, #0
   25658:	bf0c      	ite	eq
   2565a:	2100      	moveq	r1, #0
   2565c:	f001 0101 	andne.w	r1, r1, #1
   25660:	2900      	cmp	r1, #0
   25662:	f47f af3d 	bne.w	254e0 <_Unwind_VRS_Pop+0x1c>
   25666:	2d0f      	cmp	r5, #15
   25668:	d80f      	bhi.n	2568a <_Unwind_VRS_Pop+0x1c6>
   2566a:	6822      	ldr	r2, [r4, #0]
   2566c:	07d0      	lsls	r0, r2, #31
   2566e:	d50c      	bpl.n	2568a <_Unwind_VRS_Pop+0x1c6>
   25670:	2b05      	cmp	r3, #5
   25672:	f022 0101 	bic.w	r1, r2, #1
   25676:	4620      	mov	r0, r4
   25678:	6021      	str	r1, [r4, #0]
   2567a:	f000 8100 	beq.w	2587e <_Unwind_VRS_Pop+0x3ba>
   2567e:	f022 0103 	bic.w	r1, r2, #3
   25682:	f840 1b48 	str.w	r1, [r0], #72
   25686:	f000 f9bf 	bl	25a08 <__gnu_Unwind_Save_VFP>
   2568a:	f1b8 0f00 	cmp.w	r8, #0
   2568e:	d003      	beq.n	25698 <_Unwind_VRS_Pop+0x1d4>
   25690:	6823      	ldr	r3, [r4, #0]
   25692:	0759      	lsls	r1, r3, #29
   25694:	f100 80cb 	bmi.w	2582e <_Unwind_VRS_Pop+0x36a>
   25698:	2f00      	cmp	r7, #0
   2569a:	f040 80e6 	bne.w	2586a <_Unwind_VRS_Pop+0x3a6>
   2569e:	2d0f      	cmp	r5, #15
   256a0:	f240 80c1 	bls.w	25826 <_Unwind_VRS_Pop+0x362>
   256a4:	f1b8 0f00 	cmp.w	r8, #0
   256a8:	f040 80d9 	bne.w	2585e <_Unwind_VRS_Pop+0x39a>
   256ac:	f8d4 a038 	ldr.w	sl, [r4, #56]	; 0x38
   256b0:	2e00      	cmp	r6, #0
   256b2:	46d1      	mov	r9, sl
   256b4:	dd29      	ble.n	2570a <_Unwind_VRS_Pop+0x246>
   256b6:	4650      	mov	r0, sl
   256b8:	ea4f 0946 	mov.w	r9, r6, lsl #1
   256bc:	ae02      	add	r6, sp, #8
   256be:	f109 33ff 	add.w	r3, r9, #4294967295
   256c2:	f850 cb04 	ldr.w	ip, [r0], #4
   256c6:	eb06 01c5 	add.w	r1, r6, r5, lsl #3
   256ca:	f003 0201 	and.w	r2, r3, #1
   256ce:	f1a9 0602 	sub.w	r6, r9, #2
   256d2:	f841 cb04 	str.w	ip, [r1], #4
   256d6:	b1b3      	cbz	r3, 25706 <_Unwind_VRS_Pop+0x242>
   256d8:	b132      	cbz	r2, 256e8 <_Unwind_VRS_Pop+0x224>
   256da:	f850 2b04 	ldr.w	r2, [r0], #4
   256de:	3e01      	subs	r6, #1
   256e0:	1c73      	adds	r3, r6, #1
   256e2:	f841 2b04 	str.w	r2, [r1], #4
   256e6:	d00e      	beq.n	25706 <_Unwind_VRS_Pop+0x242>
   256e8:	4602      	mov	r2, r0
   256ea:	460b      	mov	r3, r1
   256ec:	3e02      	subs	r6, #2
   256ee:	f852 cb04 	ldr.w	ip, [r2], #4
   256f2:	f843 cb04 	str.w	ip, [r3], #4
   256f6:	f8d0 c004 	ldr.w	ip, [r0, #4]
   256fa:	1d10      	adds	r0, r2, #4
   256fc:	f8c1 c004 	str.w	ip, [r1, #4]
   25700:	1d19      	adds	r1, r3, #4
   25702:	1c72      	adds	r2, r6, #1
   25704:	d1f0      	bne.n	256e8 <_Unwind_VRS_Pop+0x224>
   25706:	eb0a 0989 	add.w	r9, sl, r9, lsl #2
   2570a:	f1b8 0f00 	cmp.w	r8, #0
   2570e:	d02f      	beq.n	25770 <_Unwind_VRS_Pop+0x2ac>
   25710:	2d10      	cmp	r5, #16
   25712:	bf2c      	ite	cs
   25714:	462e      	movcs	r6, r5
   25716:	2610      	movcc	r6, #16
   25718:	4648      	mov	r0, r9
   2571a:	aa68      	add	r2, sp, #416	; 0x1a0
   2571c:	ea4f 0a48 	mov.w	sl, r8, lsl #1
   25720:	eb02 01c6 	add.w	r1, r2, r6, lsl #3
   25724:	f850 cb04 	ldr.w	ip, [r0], #4
   25728:	f5a1 71c8 	sub.w	r1, r1, #400	; 0x190
   2572c:	f10a 33ff 	add.w	r3, sl, #4294967295
   25730:	f003 0201 	and.w	r2, r3, #1
   25734:	f1aa 0602 	sub.w	r6, sl, #2
   25738:	f841 cb04 	str.w	ip, [r1], #4
   2573c:	b1b3      	cbz	r3, 2576c <_Unwind_VRS_Pop+0x2a8>
   2573e:	b132      	cbz	r2, 2574e <_Unwind_VRS_Pop+0x28a>
   25740:	f850 3b04 	ldr.w	r3, [r0], #4
   25744:	3e01      	subs	r6, #1
   25746:	1c72      	adds	r2, r6, #1
   25748:	f841 3b04 	str.w	r3, [r1], #4
   2574c:	d00e      	beq.n	2576c <_Unwind_VRS_Pop+0x2a8>
   2574e:	4602      	mov	r2, r0
   25750:	460b      	mov	r3, r1
   25752:	3e02      	subs	r6, #2
   25754:	f852 cb04 	ldr.w	ip, [r2], #4
   25758:	f843 cb04 	str.w	ip, [r3], #4
   2575c:	f8d0 c004 	ldr.w	ip, [r0, #4]
   25760:	1d10      	adds	r0, r2, #4
   25762:	f8c1 c004 	str.w	ip, [r1, #4]
   25766:	1d19      	adds	r1, r3, #4
   25768:	1c73      	adds	r3, r6, #1
   2576a:	d1f0      	bne.n	2574e <_Unwind_VRS_Pop+0x28a>
   2576c:	eb09 098a 	add.w	r9, r9, sl, lsl #2
   25770:	2f00      	cmp	r7, #0
   25772:	d16c      	bne.n	2584e <_Unwind_VRS_Pop+0x38a>
   25774:	2d0f      	cmp	r5, #15
   25776:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
   2577a:	d802      	bhi.n	25782 <_Unwind_VRS_Pop+0x2be>
   2577c:	a802      	add	r0, sp, #8
   2577e:	f000 f947 	bl	25a10 <__gnu_Unwind_Restore_VFP_D>
   25782:	4640      	mov	r0, r8
   25784:	f1b8 0f00 	cmp.w	r8, #0
   25788:	f43f aeab 	beq.w	254e2 <_Unwind_VRS_Pop+0x1e>
   2578c:	a824      	add	r0, sp, #144	; 0x90
   2578e:	f000 f947 	bl	25a20 <__gnu_Unwind_Restore_VFP_D_16_to_31>
   25792:	2000      	movs	r0, #0
   25794:	e6a5      	b.n	254e2 <_Unwind_VRS_Pop+0x1e>
   25796:	2000      	movs	r0, #0
   25798:	e6a3      	b.n	254e2 <_Unwind_VRS_Pop+0x1e>
   2579a:	0c16      	lsrs	r6, r2, #16
   2579c:	b295      	uxth	r5, r2
   2579e:	19a8      	adds	r0, r5, r6
   257a0:	2810      	cmp	r0, #16
   257a2:	f63f ae9d 	bhi.w	254e0 <_Unwind_VRS_Pop+0x1c>
   257a6:	6823      	ldr	r3, [r4, #0]
   257a8:	0719      	lsls	r1, r3, #28
   257aa:	d448      	bmi.n	2583e <_Unwind_VRS_Pop+0x37a>
   257ac:	a844      	add	r0, sp, #272	; 0x110
   257ae:	f000 f961 	bl	25a74 <__gnu_Unwind_Save_WMMXD>
   257b2:	6ba7      	ldr	r7, [r4, #56]	; 0x38
   257b4:	ea4f 0e45 	mov.w	lr, r5, lsl #1
   257b8:	463b      	mov	r3, r7
   257ba:	b325      	cbz	r5, 25806 <_Unwind_VRS_Pop+0x342>
   257bc:	ad44      	add	r5, sp, #272	; 0x110
   257be:	f853 1b04 	ldr.w	r1, [r3], #4
   257c2:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
   257c6:	f10e 32ff 	add.w	r2, lr, #4294967295
   257ca:	f002 0501 	and.w	r5, r2, #1
   257ce:	f1ae 0002 	sub.w	r0, lr, #2
   257d2:	f846 1b04 	str.w	r1, [r6], #4
   257d6:	b1a2      	cbz	r2, 25802 <_Unwind_VRS_Pop+0x33e>
   257d8:	b135      	cbz	r5, 257e8 <_Unwind_VRS_Pop+0x324>
   257da:	f853 1b04 	ldr.w	r1, [r3], #4
   257de:	3801      	subs	r0, #1
   257e0:	1c42      	adds	r2, r0, #1
   257e2:	f846 1b04 	str.w	r1, [r6], #4
   257e6:	d00c      	beq.n	25802 <_Unwind_VRS_Pop+0x33e>
   257e8:	4619      	mov	r1, r3
   257ea:	4632      	mov	r2, r6
   257ec:	3802      	subs	r0, #2
   257ee:	f851 5b04 	ldr.w	r5, [r1], #4
   257f2:	f842 5b04 	str.w	r5, [r2], #4
   257f6:	685d      	ldr	r5, [r3, #4]
   257f8:	1d0b      	adds	r3, r1, #4
   257fa:	6075      	str	r5, [r6, #4]
   257fc:	1d16      	adds	r6, r2, #4
   257fe:	1c42      	adds	r2, r0, #1
   25800:	d1f2      	bne.n	257e8 <_Unwind_VRS_Pop+0x324>
   25802:	eb07 038e 	add.w	r3, r7, lr, lsl #2
   25806:	a844      	add	r0, sp, #272	; 0x110
   25808:	63a3      	str	r3, [r4, #56]	; 0x38
   2580a:	f000 f911 	bl	25a30 <__gnu_Unwind_Restore_WMMXD>
   2580e:	2000      	movs	r0, #0
   25810:	e667      	b.n	254e2 <_Unwind_VRS_Pop+0x1e>
   25812:	f023 0110 	bic.w	r1, r3, #16
   25816:	f504 700c 	add.w	r0, r4, #560	; 0x230
   2581a:	6021      	str	r1, [r4, #0]
   2581c:	9201      	str	r2, [sp, #4]
   2581e:	f000 f955 	bl	25acc <__gnu_Unwind_Save_WMMXC>
   25822:	9a01      	ldr	r2, [sp, #4]
   25824:	e66f      	b.n	25506 <_Unwind_VRS_Pop+0x42>
   25826:	a802      	add	r0, sp, #8
   25828:	f000 f8f6 	bl	25a18 <__gnu_Unwind_Save_VFP_D>
   2582c:	e73a      	b.n	256a4 <_Unwind_VRS_Pop+0x1e0>
   2582e:	4620      	mov	r0, r4
   25830:	f023 0204 	bic.w	r2, r3, #4
   25834:	f840 2bd0 	str.w	r2, [r0], #208
   25838:	f000 f8f6 	bl	25a28 <__gnu_Unwind_Save_VFP_D_16_to_31>
   2583c:	e72c      	b.n	25698 <_Unwind_VRS_Pop+0x1d4>
   2583e:	f023 0708 	bic.w	r7, r3, #8
   25842:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
   25846:	6027      	str	r7, [r4, #0]
   25848:	f000 f914 	bl	25a74 <__gnu_Unwind_Save_WMMXD>
   2584c:	e7ae      	b.n	257ac <_Unwind_VRS_Pop+0x2e8>
   2584e:	f109 0104 	add.w	r1, r9, #4
   25852:	a802      	add	r0, sp, #8
   25854:	63a1      	str	r1, [r4, #56]	; 0x38
   25856:	f000 f8d3 	bl	25a00 <__gnu_Unwind_Restore_VFP>
   2585a:	2000      	movs	r0, #0
   2585c:	e641      	b.n	254e2 <_Unwind_VRS_Pop+0x1e>
   2585e:	a824      	add	r0, sp, #144	; 0x90
   25860:	f1c5 0610 	rsb	r6, r5, #16
   25864:	f000 f8e0 	bl	25a28 <__gnu_Unwind_Save_VFP_D_16_to_31>
   25868:	e720      	b.n	256ac <_Unwind_VRS_Pop+0x1e8>
   2586a:	a802      	add	r0, sp, #8
   2586c:	f000 f8cc 	bl	25a08 <__gnu_Unwind_Save_VFP>
   25870:	f1b8 0f00 	cmp.w	r8, #0
   25874:	f43f af1a 	beq.w	256ac <_Unwind_VRS_Pop+0x1e8>
   25878:	f1c5 0610 	rsb	r6, r5, #16
   2587c:	e716      	b.n	256ac <_Unwind_VRS_Pop+0x1e8>
   2587e:	f041 0302 	orr.w	r3, r1, #2
   25882:	f840 3b48 	str.w	r3, [r0], #72
   25886:	f000 f8c7 	bl	25a18 <__gnu_Unwind_Save_VFP_D>
   2588a:	e6fe      	b.n	2568a <_Unwind_VRS_Pop+0x1c6>

0002588c <_Unwind_GetCFA>:
   2588c:	6c40      	ldr	r0, [r0, #68]	; 0x44
   2588e:	4770      	bx	lr

00025890 <__gnu_Unwind_RaiseException>:
   25890:	b5f0      	push	{r4, r5, r6, r7, lr}
   25892:	4604      	mov	r4, r0
   25894:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
   25896:	1d0f      	adds	r7, r1, #4
   25898:	460d      	mov	r5, r1
   2589a:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
   2589e:	ae01      	add	r6, sp, #4
   258a0:	6408      	str	r0, [r1, #64]	; 0x40
   258a2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   258a4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   258a6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   258a8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   258aa:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   258ac:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   258ae:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   258b2:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   258b6:	f04f 33ff 	mov.w	r3, #4294967295
   258ba:	9300      	str	r3, [sp, #0]
   258bc:	4620      	mov	r0, r4
   258be:	9910      	ldr	r1, [sp, #64]	; 0x40
   258c0:	f7ff fae4 	bl	24e8c <get_eit_entry>
   258c4:	b958      	cbnz	r0, 258de <__gnu_Unwind_RaiseException+0x4e>
   258c6:	6926      	ldr	r6, [r4, #16]
   258c8:	4621      	mov	r1, r4
   258ca:	466a      	mov	r2, sp
   258cc:	47b0      	blx	r6
   258ce:	2808      	cmp	r0, #8
   258d0:	4606      	mov	r6, r0
   258d2:	d0f3      	beq.n	258bc <__gnu_Unwind_RaiseException+0x2c>
   258d4:	4668      	mov	r0, sp
   258d6:	f7ff fb3f 	bl	24f58 <restore_non_core_regs>
   258da:	2e06      	cmp	r6, #6
   258dc:	d003      	beq.n	258e6 <__gnu_Unwind_RaiseException+0x56>
   258de:	2009      	movs	r0, #9
   258e0:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
   258e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   258e6:	4620      	mov	r0, r4
   258e8:	4629      	mov	r1, r5
   258ea:	f7ff fbd7 	bl	2509c <unwind_phase2>
   258ee:	bf00      	nop

000258f0 <__gnu_Unwind_ForcedUnwind>:
   258f0:	b430      	push	{r4, r5}
   258f2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   258f4:	60c1      	str	r1, [r0, #12]
   258f6:	4619      	mov	r1, r3
   258f8:	6182      	str	r2, [r0, #24]
   258fa:	2200      	movs	r2, #0
   258fc:	641d      	str	r5, [r3, #64]	; 0x40
   258fe:	bc30      	pop	{r4, r5}
   25900:	f7ff bb56 	b.w	24fb0 <unwind_phase2_forced>

00025904 <__gnu_Unwind_Resume>:
   25904:	6942      	ldr	r2, [r0, #20]
   25906:	b538      	push	{r3, r4, r5, lr}
   25908:	4604      	mov	r4, r0
   2590a:	68c3      	ldr	r3, [r0, #12]
   2590c:	460d      	mov	r5, r1
   2590e:	640a      	str	r2, [r1, #64]	; 0x40
   25910:	b123      	cbz	r3, 2591c <__gnu_Unwind_Resume+0x18>
   25912:	2201      	movs	r2, #1
   25914:	f7ff fb4c 	bl	24fb0 <unwind_phase2_forced>
   25918:	f7f9 f890 	bl	1ea3c <abort>
   2591c:	6903      	ldr	r3, [r0, #16]
   2591e:	4621      	mov	r1, r4
   25920:	2002      	movs	r0, #2
   25922:	462a      	mov	r2, r5
   25924:	4798      	blx	r3
   25926:	2807      	cmp	r0, #7
   25928:	d003      	beq.n	25932 <__gnu_Unwind_Resume+0x2e>
   2592a:	2808      	cmp	r0, #8
   2592c:	d004      	beq.n	25938 <__gnu_Unwind_Resume+0x34>
   2592e:	f7f9 f885 	bl	1ea3c <abort>
   25932:	1d28      	adds	r0, r5, #4
   25934:	f000 f858 	bl	259e8 <__restore_core_regs>
   25938:	4620      	mov	r0, r4
   2593a:	4629      	mov	r1, r5
   2593c:	f7ff fbae 	bl	2509c <unwind_phase2>

00025940 <__gnu_Unwind_Resume_or_Rethrow>:
   25940:	68c2      	ldr	r2, [r0, #12]
   25942:	b410      	push	{r4}
   25944:	b12a      	cbz	r2, 25952 <__gnu_Unwind_Resume_or_Rethrow+0x12>
   25946:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
   25948:	2200      	movs	r2, #0
   2594a:	640c      	str	r4, [r1, #64]	; 0x40
   2594c:	bc10      	pop	{r4}
   2594e:	f7ff bb2f 	b.w	24fb0 <unwind_phase2_forced>
   25952:	bc10      	pop	{r4}
   25954:	f7ff bf9c 	b.w	25890 <__gnu_Unwind_RaiseException>

00025958 <_Unwind_Complete>:
   25958:	4770      	bx	lr
   2595a:	bf00      	nop

0002595c <_Unwind_DeleteException>:
   2595c:	b508      	push	{r3, lr}
   2595e:	4601      	mov	r1, r0
   25960:	6883      	ldr	r3, [r0, #8]
   25962:	b10b      	cbz	r3, 25968 <_Unwind_DeleteException+0xc>
   25964:	2001      	movs	r0, #1
   25966:	4798      	blx	r3
   25968:	bd08      	pop	{r3, pc}
   2596a:	bf00      	nop

0002596c <__gnu_Unwind_Backtrace>:
   2596c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2596e:	4605      	mov	r5, r0
   25970:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
   25972:	1d17      	adds	r7, r2, #4
   25974:	460c      	mov	r4, r1
   25976:	f5ad 7d27 	sub.w	sp, sp, #668	; 0x29c
   2597a:	ae01      	add	r6, sp, #4
   2597c:	6410      	str	r0, [r2, #64]	; 0x40
   2597e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   25980:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   25982:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   25984:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   25986:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   25988:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   2598a:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   2598e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   25992:	f04f 33ff 	mov.w	r3, #4294967295
   25996:	9300      	str	r3, [sp, #0]
   25998:	9910      	ldr	r1, [sp, #64]	; 0x40
   2599a:	a890      	add	r0, sp, #576	; 0x240
   2599c:	f7ff fa76 	bl	24e8c <get_eit_entry>
   259a0:	aa90      	add	r2, sp, #576	; 0x240
   259a2:	210c      	movs	r1, #12
   259a4:	2800      	cmp	r0, #0
   259a6:	d11d      	bne.n	259e4 <__gnu_Unwind_Backtrace+0x78>
   259a8:	4668      	mov	r0, sp
   259aa:	f7ff fbcf 	bl	2514c <_Unwind_SetGR>
   259ae:	4621      	mov	r1, r4
   259b0:	4668      	mov	r0, sp
   259b2:	47a8      	blx	r5
   259b4:	a990      	add	r1, sp, #576	; 0x240
   259b6:	466a      	mov	r2, sp
   259b8:	b9a0      	cbnz	r0, 259e4 <__gnu_Unwind_Backtrace+0x78>
   259ba:	2008      	movs	r0, #8
   259bc:	9b94      	ldr	r3, [sp, #592]	; 0x250
   259be:	4798      	blx	r3
   259c0:	1f41      	subs	r1, r0, #5
   259c2:	4606      	mov	r6, r0
   259c4:	bf18      	it	ne
   259c6:	2101      	movne	r1, #1
   259c8:	2809      	cmp	r0, #9
   259ca:	bf0c      	ite	eq
   259cc:	2100      	moveq	r1, #0
   259ce:	f001 0101 	andne.w	r1, r1, #1
   259d2:	2900      	cmp	r1, #0
   259d4:	d1e0      	bne.n	25998 <__gnu_Unwind_Backtrace+0x2c>
   259d6:	4668      	mov	r0, sp
   259d8:	f7ff fabe 	bl	24f58 <restore_non_core_regs>
   259dc:	4630      	mov	r0, r6
   259de:	f50d 7d27 	add.w	sp, sp, #668	; 0x29c
   259e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   259e4:	2609      	movs	r6, #9
   259e6:	e7f6      	b.n	259d6 <__gnu_Unwind_Backtrace+0x6a>

000259e8 <__restore_core_regs>:
   259e8:	f100 0134 	add.w	r1, r0, #52	; 0x34
   259ec:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
   259f0:	469c      	mov	ip, r3
   259f2:	46a6      	mov	lr, r4
   259f4:	f84c 5d04 	str.w	r5, [ip, #-4]!
   259f8:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
   259fc:	46e5      	mov	sp, ip
   259fe:	bd00      	pop	{pc}

00025a00 <__gnu_Unwind_Restore_VFP>:
   25a00:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
   25a04:	4770      	bx	lr
   25a06:	bf00      	nop

00025a08 <__gnu_Unwind_Save_VFP>:
   25a08:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
   25a0c:	4770      	bx	lr
   25a0e:	bf00      	nop

00025a10 <__gnu_Unwind_Restore_VFP_D>:
   25a10:	ec90 0b20 	vldmia	r0, {d0-d15}
   25a14:	4770      	bx	lr
   25a16:	bf00      	nop

00025a18 <__gnu_Unwind_Save_VFP_D>:
   25a18:	ec80 0b20 	vstmia	r0, {d0-d15}
   25a1c:	4770      	bx	lr
   25a1e:	bf00      	nop

00025a20 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
   25a20:	ecd0 0b20 	vldmia	r0, {d16-d31}
   25a24:	4770      	bx	lr
   25a26:	bf00      	nop

00025a28 <__gnu_Unwind_Save_VFP_D_16_to_31>:
   25a28:	ecc0 0b20 	vstmia	r0, {d16-d31}
   25a2c:	4770      	bx	lr
   25a2e:	bf00      	nop

00025a30 <__gnu_Unwind_Restore_WMMXD>:
   25a30:	ecf0 0102 	ldfe	f0, [r0], #8
   25a34:	ecf0 1102 	ldfe	f1, [r0], #8
   25a38:	ecf0 2102 	ldfe	f2, [r0], #8
   25a3c:	ecf0 3102 	ldfe	f3, [r0], #8
   25a40:	ecf0 4102 	ldfe	f4, [r0], #8
   25a44:	ecf0 5102 	ldfe	f5, [r0], #8
   25a48:	ecf0 6102 	ldfe	f6, [r0], #8
   25a4c:	ecf0 7102 	ldfe	f7, [r0], #8
   25a50:	ecf0 8102 	ldfp	f0, [r0], #8
   25a54:	ecf0 9102 	ldfp	f1, [r0], #8
   25a58:	ecf0 a102 	ldfp	f2, [r0], #8
   25a5c:	ecf0 b102 	ldfp	f3, [r0], #8
   25a60:	ecf0 c102 	ldfp	f4, [r0], #8
   25a64:	ecf0 d102 	ldfp	f5, [r0], #8
   25a68:	ecf0 e102 	ldfp	f6, [r0], #8
   25a6c:	ecf0 f102 	ldfp	f7, [r0], #8
   25a70:	4770      	bx	lr
   25a72:	bf00      	nop

00025a74 <__gnu_Unwind_Save_WMMXD>:
   25a74:	ece0 0102 	stfe	f0, [r0], #8
   25a78:	ece0 1102 	stfe	f1, [r0], #8
   25a7c:	ece0 2102 	stfe	f2, [r0], #8
   25a80:	ece0 3102 	stfe	f3, [r0], #8
   25a84:	ece0 4102 	stfe	f4, [r0], #8
   25a88:	ece0 5102 	stfe	f5, [r0], #8
   25a8c:	ece0 6102 	stfe	f6, [r0], #8
   25a90:	ece0 7102 	stfe	f7, [r0], #8
   25a94:	ece0 8102 	stfp	f0, [r0], #8
   25a98:	ece0 9102 	stfp	f1, [r0], #8
   25a9c:	ece0 a102 	stfp	f2, [r0], #8
   25aa0:	ece0 b102 	stfp	f3, [r0], #8
   25aa4:	ece0 c102 	stfp	f4, [r0], #8
   25aa8:	ece0 d102 	stfp	f5, [r0], #8
   25aac:	ece0 e102 	stfp	f6, [r0], #8
   25ab0:	ece0 f102 	stfp	f7, [r0], #8
   25ab4:	4770      	bx	lr
   25ab6:	bf00      	nop

00025ab8 <__gnu_Unwind_Restore_WMMXC>:
   25ab8:	fcb0 8101 	ldc2	1, cr8, [r0], #4
   25abc:	fcb0 9101 	ldc2	1, cr9, [r0], #4
   25ac0:	fcb0 a101 	ldc2	1, cr10, [r0], #4
   25ac4:	fcb0 b101 	ldc2	1, cr11, [r0], #4
   25ac8:	4770      	bx	lr
   25aca:	bf00      	nop

00025acc <__gnu_Unwind_Save_WMMXC>:
   25acc:	fca0 8101 	stc2	1, cr8, [r0], #4
   25ad0:	fca0 9101 	stc2	1, cr9, [r0], #4
   25ad4:	fca0 a101 	stc2	1, cr10, [r0], #4
   25ad8:	fca0 b101 	stc2	1, cr11, [r0], #4
   25adc:	4770      	bx	lr
   25ade:	bf00      	nop

00025ae0 <_Unwind_RaiseException>:
   25ae0:	46ec      	mov	ip, sp
   25ae2:	b500      	push	{lr}
   25ae4:	e92d 5000 	stmdb	sp!, {ip, lr}
   25ae8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   25aec:	f04f 0300 	mov.w	r3, #0
   25af0:	e92d 000c 	stmdb	sp!, {r2, r3}
   25af4:	a901      	add	r1, sp, #4
   25af6:	f7ff fecb 	bl	25890 <__gnu_Unwind_RaiseException>
   25afa:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   25afe:	b012      	add	sp, #72	; 0x48
   25b00:	4770      	bx	lr
   25b02:	bf00      	nop

00025b04 <_Unwind_Resume>:
   25b04:	46ec      	mov	ip, sp
   25b06:	b500      	push	{lr}
   25b08:	e92d 5000 	stmdb	sp!, {ip, lr}
   25b0c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   25b10:	f04f 0300 	mov.w	r3, #0
   25b14:	e92d 000c 	stmdb	sp!, {r2, r3}
   25b18:	a901      	add	r1, sp, #4
   25b1a:	f7ff fef3 	bl	25904 <__gnu_Unwind_Resume>
   25b1e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   25b22:	b012      	add	sp, #72	; 0x48
   25b24:	4770      	bx	lr
   25b26:	bf00      	nop

00025b28 <_Unwind_Resume_or_Rethrow>:
   25b28:	46ec      	mov	ip, sp
   25b2a:	b500      	push	{lr}
   25b2c:	e92d 5000 	stmdb	sp!, {ip, lr}
   25b30:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   25b34:	f04f 0300 	mov.w	r3, #0
   25b38:	e92d 000c 	stmdb	sp!, {r2, r3}
   25b3c:	a901      	add	r1, sp, #4
   25b3e:	f7ff feff 	bl	25940 <__gnu_Unwind_Resume_or_Rethrow>
   25b42:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   25b46:	b012      	add	sp, #72	; 0x48
   25b48:	4770      	bx	lr
   25b4a:	bf00      	nop

00025b4c <_Unwind_ForcedUnwind>:
   25b4c:	46ec      	mov	ip, sp
   25b4e:	b500      	push	{lr}
   25b50:	e92d 5000 	stmdb	sp!, {ip, lr}
   25b54:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   25b58:	f04f 0300 	mov.w	r3, #0
   25b5c:	e92d 000c 	stmdb	sp!, {r2, r3}
   25b60:	ab01      	add	r3, sp, #4
   25b62:	f7ff fec5 	bl	258f0 <__gnu_Unwind_ForcedUnwind>
   25b66:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   25b6a:	b012      	add	sp, #72	; 0x48
   25b6c:	4770      	bx	lr
   25b6e:	bf00      	nop

00025b70 <_Unwind_Backtrace>:
   25b70:	46ec      	mov	ip, sp
   25b72:	b500      	push	{lr}
   25b74:	e92d 5000 	stmdb	sp!, {ip, lr}
   25b78:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   25b7c:	f04f 0300 	mov.w	r3, #0
   25b80:	e92d 000c 	stmdb	sp!, {r2, r3}
   25b84:	aa01      	add	r2, sp, #4
   25b86:	f7ff fef1 	bl	2596c <__gnu_Unwind_Backtrace>
   25b8a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   25b8e:	b012      	add	sp, #72	; 0x48
   25b90:	4770      	bx	lr
   25b92:	bf00      	nop

00025b94 <next_unwind_byte>:
   25b94:	7a02      	ldrb	r2, [r0, #8]
   25b96:	4603      	mov	r3, r0
   25b98:	b91a      	cbnz	r2, 25ba2 <next_unwind_byte+0xe>
   25b9a:	7a42      	ldrb	r2, [r0, #9]
   25b9c:	b942      	cbnz	r2, 25bb0 <next_unwind_byte+0x1c>
   25b9e:	20b0      	movs	r0, #176	; 0xb0
   25ba0:	4770      	bx	lr
   25ba2:	6800      	ldr	r0, [r0, #0]
   25ba4:	1e51      	subs	r1, r2, #1
   25ba6:	7219      	strb	r1, [r3, #8]
   25ba8:	0202      	lsls	r2, r0, #8
   25baa:	0e00      	lsrs	r0, r0, #24
   25bac:	601a      	str	r2, [r3, #0]
   25bae:	4770      	bx	lr
   25bb0:	6841      	ldr	r1, [r0, #4]
   25bb2:	1e50      	subs	r0, r2, #1
   25bb4:	7258      	strb	r0, [r3, #9]
   25bb6:	2203      	movs	r2, #3
   25bb8:	f851 0b04 	ldr.w	r0, [r1], #4
   25bbc:	721a      	strb	r2, [r3, #8]
   25bbe:	6059      	str	r1, [r3, #4]
   25bc0:	0202      	lsls	r2, r0, #8
   25bc2:	0e00      	lsrs	r0, r0, #24
   25bc4:	601a      	str	r2, [r3, #0]
   25bc6:	4770      	bx	lr

00025bc8 <_Unwind_GetGR.constprop.0>:
   25bc8:	b510      	push	{r4, lr}
   25bca:	2100      	movs	r1, #0
   25bcc:	b084      	sub	sp, #16
   25bce:	220c      	movs	r2, #12
   25bd0:	460b      	mov	r3, r1
   25bd2:	eb0d 0402 	add.w	r4, sp, r2
   25bd6:	9400      	str	r4, [sp, #0]
   25bd8:	f7ff fa78 	bl	250cc <_Unwind_VRS_Get>
   25bdc:	9803      	ldr	r0, [sp, #12]
   25bde:	b004      	add	sp, #16
   25be0:	bd10      	pop	{r4, pc}
   25be2:	bf00      	nop

00025be4 <unwind_UCB_from_context>:
   25be4:	f7ff bff0 	b.w	25bc8 <_Unwind_GetGR.constprop.0>

00025be8 <__gnu_unwind_execute>:
   25be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25bec:	4606      	mov	r6, r0
   25bee:	b084      	sub	sp, #16
   25bf0:	460d      	mov	r5, r1
   25bf2:	f04f 0900 	mov.w	r9, #0
   25bf6:	f44f 6a7f 	mov.w	sl, #4080	; 0xff0
   25bfa:	4628      	mov	r0, r5
   25bfc:	f7ff ffca 	bl	25b94 <next_unwind_byte>
   25c00:	28b0      	cmp	r0, #176	; 0xb0
   25c02:	4604      	mov	r4, r0
   25c04:	f000 80c7 	beq.w	25d96 <__gnu_unwind_execute+0x1ae>
   25c08:	f010 0180 	ands.w	r1, r0, #128	; 0x80
   25c0c:	d021      	beq.n	25c52 <__gnu_unwind_execute+0x6a>
   25c0e:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   25c12:	2b80      	cmp	r3, #128	; 0x80
   25c14:	f000 8083 	beq.w	25d1e <__gnu_unwind_execute+0x136>
   25c18:	2b90      	cmp	r3, #144	; 0x90
   25c1a:	d036      	beq.n	25c8a <__gnu_unwind_execute+0xa2>
   25c1c:	2ba0      	cmp	r3, #160	; 0xa0
   25c1e:	d051      	beq.n	25cc4 <__gnu_unwind_execute+0xdc>
   25c20:	2bb0      	cmp	r3, #176	; 0xb0
   25c22:	d062      	beq.n	25cea <__gnu_unwind_execute+0x102>
   25c24:	2bc0      	cmp	r3, #192	; 0xc0
   25c26:	f000 8092 	beq.w	25d4e <__gnu_unwind_execute+0x166>
   25c2a:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
   25c2e:	29d0      	cmp	r1, #208	; 0xd0
   25c30:	d10b      	bne.n	25c4a <__gnu_unwind_execute+0x62>
   25c32:	f000 0407 	and.w	r4, r0, #7
   25c36:	2101      	movs	r1, #1
   25c38:	1c62      	adds	r2, r4, #1
   25c3a:	4630      	mov	r0, r6
   25c3c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   25c40:	2305      	movs	r3, #5
   25c42:	f7ff fc3f 	bl	254c4 <_Unwind_VRS_Pop>
   25c46:	2800      	cmp	r0, #0
   25c48:	d0d7      	beq.n	25bfa <__gnu_unwind_execute+0x12>
   25c4a:	2009      	movs	r0, #9
   25c4c:	b004      	add	sp, #16
   25c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25c52:	0087      	lsls	r7, r0, #2
   25c54:	220d      	movs	r2, #13
   25c56:	460b      	mov	r3, r1
   25c58:	4630      	mov	r0, r6
   25c5a:	fa5f f887 	uxtb.w	r8, r7
   25c5e:	af03      	add	r7, sp, #12
   25c60:	9700      	str	r7, [sp, #0]
   25c62:	f7ff fa33 	bl	250cc <_Unwind_VRS_Get>
   25c66:	9b03      	ldr	r3, [sp, #12]
   25c68:	0664      	lsls	r4, r4, #25
   25c6a:	f108 0804 	add.w	r8, r8, #4
   25c6e:	4630      	mov	r0, r6
   25c70:	bf4c      	ite	mi
   25c72:	ebc8 0303 	rsbmi	r3, r8, r3
   25c76:	4443      	addpl	r3, r8
   25c78:	2100      	movs	r1, #0
   25c7a:	9303      	str	r3, [sp, #12]
   25c7c:	220d      	movs	r2, #13
   25c7e:	460b      	mov	r3, r1
   25c80:	ac03      	add	r4, sp, #12
   25c82:	9400      	str	r4, [sp, #0]
   25c84:	f7ff fa48 	bl	25118 <_Unwind_VRS_Set>
   25c88:	e7b7      	b.n	25bfa <__gnu_unwind_execute+0x12>
   25c8a:	f000 020f 	and.w	r2, r0, #15
   25c8e:	f1a2 000d 	sub.w	r0, r2, #13
   25c92:	4241      	negs	r1, r0
   25c94:	eb41 0400 	adc.w	r4, r1, r0
   25c98:	2a0f      	cmp	r2, #15
   25c9a:	bf08      	it	eq
   25c9c:	f044 0401 	orreq.w	r4, r4, #1
   25ca0:	2c00      	cmp	r4, #0
   25ca2:	d1d2      	bne.n	25c4a <__gnu_unwind_execute+0x62>
   25ca4:	4621      	mov	r1, r4
   25ca6:	4623      	mov	r3, r4
   25ca8:	4630      	mov	r0, r6
   25caa:	af03      	add	r7, sp, #12
   25cac:	9700      	str	r7, [sp, #0]
   25cae:	f7ff fa0d 	bl	250cc <_Unwind_VRS_Get>
   25cb2:	4621      	mov	r1, r4
   25cb4:	4623      	mov	r3, r4
   25cb6:	4630      	mov	r0, r6
   25cb8:	220d      	movs	r2, #13
   25cba:	ac03      	add	r4, sp, #12
   25cbc:	9400      	str	r4, [sp, #0]
   25cbe:	f7ff fa2b 	bl	25118 <_Unwind_VRS_Set>
   25cc2:	e79a      	b.n	25bfa <__gnu_unwind_execute+0x12>
   25cc4:	43c2      	mvns	r2, r0
   25cc6:	0701      	lsls	r1, r0, #28
   25cc8:	f002 0c07 	and.w	ip, r2, #7
   25ccc:	4630      	mov	r0, r6
   25cce:	fa4a f30c 	asr.w	r3, sl, ip
   25cd2:	f403 627f 	and.w	r2, r3, #4080	; 0xff0
   25cd6:	bf48      	it	mi
   25cd8:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
   25cdc:	2100      	movs	r1, #0
   25cde:	460b      	mov	r3, r1
   25ce0:	f7ff fbf0 	bl	254c4 <_Unwind_VRS_Pop>
   25ce4:	2800      	cmp	r0, #0
   25ce6:	d1b0      	bne.n	25c4a <__gnu_unwind_execute+0x62>
   25ce8:	e787      	b.n	25bfa <__gnu_unwind_execute+0x12>
   25cea:	28b1      	cmp	r0, #177	; 0xb1
   25cec:	d077      	beq.n	25dde <__gnu_unwind_execute+0x1f6>
   25cee:	28b2      	cmp	r0, #178	; 0xb2
   25cf0:	f000 8088 	beq.w	25e04 <__gnu_unwind_execute+0x21c>
   25cf4:	28b3      	cmp	r0, #179	; 0xb3
   25cf6:	f000 80b4 	beq.w	25e62 <__gnu_unwind_execute+0x27a>
   25cfa:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
   25cfe:	29b4      	cmp	r1, #180	; 0xb4
   25d00:	d05f      	beq.n	25dc2 <__gnu_unwind_execute+0x1da>
   25d02:	f000 0e07 	and.w	lr, r0, #7
   25d06:	2101      	movs	r1, #1
   25d08:	eb0e 0c01 	add.w	ip, lr, r1
   25d0c:	4630      	mov	r0, r6
   25d0e:	f44c 2200 	orr.w	r2, ip, #524288	; 0x80000
   25d12:	460b      	mov	r3, r1
   25d14:	f7ff fbd6 	bl	254c4 <_Unwind_VRS_Pop>
   25d18:	2800      	cmp	r0, #0
   25d1a:	d196      	bne.n	25c4a <__gnu_unwind_execute+0x62>
   25d1c:	e76d      	b.n	25bfa <__gnu_unwind_execute+0x12>
   25d1e:	4628      	mov	r0, r5
   25d20:	0224      	lsls	r4, r4, #8
   25d22:	f7ff ff37 	bl	25b94 <next_unwind_byte>
   25d26:	4304      	orrs	r4, r0
   25d28:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   25d2c:	d08d      	beq.n	25c4a <__gnu_unwind_execute+0x62>
   25d2e:	0522      	lsls	r2, r4, #20
   25d30:	2100      	movs	r1, #0
   25d32:	4630      	mov	r0, r6
   25d34:	460b      	mov	r3, r1
   25d36:	0c12      	lsrs	r2, r2, #16
   25d38:	0124      	lsls	r4, r4, #4
   25d3a:	f7ff fbc3 	bl	254c4 <_Unwind_VRS_Pop>
   25d3e:	2800      	cmp	r0, #0
   25d40:	d183      	bne.n	25c4a <__gnu_unwind_execute+0x62>
   25d42:	f414 4f00 	tst.w	r4, #32768	; 0x8000
   25d46:	bf18      	it	ne
   25d48:	f04f 0901 	movne.w	r9, #1
   25d4c:	e755      	b.n	25bfa <__gnu_unwind_execute+0x12>
   25d4e:	28c6      	cmp	r0, #198	; 0xc6
   25d50:	f000 809a 	beq.w	25e88 <__gnu_unwind_execute+0x2a0>
   25d54:	28c7      	cmp	r0, #199	; 0xc7
   25d56:	f000 80a1 	beq.w	25e9c <__gnu_unwind_execute+0x2b4>
   25d5a:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
   25d5e:	29c0      	cmp	r1, #192	; 0xc0
   25d60:	f000 80af 	beq.w	25ec2 <__gnu_unwind_execute+0x2da>
   25d64:	28c8      	cmp	r0, #200	; 0xc8
   25d66:	f000 80ba 	beq.w	25ede <__gnu_unwind_execute+0x2f6>
   25d6a:	28c9      	cmp	r0, #201	; 0xc9
   25d6c:	f47f af6d 	bne.w	25c4a <__gnu_unwind_execute+0x62>
   25d70:	4628      	mov	r0, r5
   25d72:	f7ff ff0f 	bl	25b94 <next_unwind_byte>
   25d76:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
   25d7a:	f000 030f 	and.w	r3, r0, #15
   25d7e:	3301      	adds	r3, #1
   25d80:	4630      	mov	r0, r6
   25d82:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
   25d86:	2101      	movs	r1, #1
   25d88:	2305      	movs	r3, #5
   25d8a:	f7ff fb9b 	bl	254c4 <_Unwind_VRS_Pop>
   25d8e:	2800      	cmp	r0, #0
   25d90:	f47f af5b 	bne.w	25c4a <__gnu_unwind_execute+0x62>
   25d94:	e731      	b.n	25bfa <__gnu_unwind_execute+0x12>
   25d96:	2000      	movs	r0, #0
   25d98:	f1b9 0f00 	cmp.w	r9, #0
   25d9c:	f47f af56 	bne.w	25c4c <__gnu_unwind_execute+0x64>
   25da0:	4649      	mov	r1, r9
   25da2:	220e      	movs	r2, #14
   25da4:	464b      	mov	r3, r9
   25da6:	4630      	mov	r0, r6
   25da8:	ac03      	add	r4, sp, #12
   25daa:	9400      	str	r4, [sp, #0]
   25dac:	f7ff f98e 	bl	250cc <_Unwind_VRS_Get>
   25db0:	4630      	mov	r0, r6
   25db2:	4649      	mov	r1, r9
   25db4:	220f      	movs	r2, #15
   25db6:	464b      	mov	r3, r9
   25db8:	9400      	str	r4, [sp, #0]
   25dba:	f7ff f9ad 	bl	25118 <_Unwind_VRS_Set>
   25dbe:	4648      	mov	r0, r9
   25dc0:	e744      	b.n	25c4c <__gnu_unwind_execute+0x64>
   25dc2:	f000 0303 	and.w	r3, r0, #3
   25dc6:	2102      	movs	r1, #2
   25dc8:	1c5a      	adds	r2, r3, #1
   25dca:	4630      	mov	r0, r6
   25dcc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
   25dd0:	460b      	mov	r3, r1
   25dd2:	f7ff fb77 	bl	254c4 <_Unwind_VRS_Pop>
   25dd6:	2800      	cmp	r0, #0
   25dd8:	f47f af37 	bne.w	25c4a <__gnu_unwind_execute+0x62>
   25ddc:	e70d      	b.n	25bfa <__gnu_unwind_execute+0x12>
   25dde:	4628      	mov	r0, r5
   25de0:	f7ff fed8 	bl	25b94 <next_unwind_byte>
   25de4:	4602      	mov	r2, r0
   25de6:	2800      	cmp	r0, #0
   25de8:	f43f af2f 	beq.w	25c4a <__gnu_unwind_execute+0x62>
   25dec:	f010 01f0 	ands.w	r1, r0, #240	; 0xf0
   25df0:	f47f af2b 	bne.w	25c4a <__gnu_unwind_execute+0x62>
   25df4:	4630      	mov	r0, r6
   25df6:	460b      	mov	r3, r1
   25df8:	f7ff fb64 	bl	254c4 <_Unwind_VRS_Pop>
   25dfc:	2800      	cmp	r0, #0
   25dfe:	f47f af24 	bne.w	25c4a <__gnu_unwind_execute+0x62>
   25e02:	e6fa      	b.n	25bfa <__gnu_unwind_execute+0x12>
   25e04:	2100      	movs	r1, #0
   25e06:	220d      	movs	r2, #13
   25e08:	460b      	mov	r3, r1
   25e0a:	4630      	mov	r0, r6
   25e0c:	af03      	add	r7, sp, #12
   25e0e:	9700      	str	r7, [sp, #0]
   25e10:	f7ff f95c 	bl	250cc <_Unwind_VRS_Get>
   25e14:	4628      	mov	r0, r5
   25e16:	f7ff febd 	bl	25b94 <next_unwind_byte>
   25e1a:	2402      	movs	r4, #2
   25e1c:	0602      	lsls	r2, r0, #24
   25e1e:	d50d      	bpl.n	25e3c <__gnu_unwind_execute+0x254>
   25e20:	f000 027f 	and.w	r2, r0, #127	; 0x7f
   25e24:	9b03      	ldr	r3, [sp, #12]
   25e26:	4628      	mov	r0, r5
   25e28:	fa02 fe04 	lsl.w	lr, r2, r4
   25e2c:	3407      	adds	r4, #7
   25e2e:	eb03 010e 	add.w	r1, r3, lr
   25e32:	9103      	str	r1, [sp, #12]
   25e34:	f7ff feae 	bl	25b94 <next_unwind_byte>
   25e38:	0603      	lsls	r3, r0, #24
   25e3a:	d4f1      	bmi.n	25e20 <__gnu_unwind_execute+0x238>
   25e3c:	9b03      	ldr	r3, [sp, #12]
   25e3e:	f000 0e7f 	and.w	lr, r0, #127	; 0x7f
   25e42:	2100      	movs	r1, #0
   25e44:	4630      	mov	r0, r6
   25e46:	f503 7c01 	add.w	ip, r3, #516	; 0x204
   25e4a:	fa0e f704 	lsl.w	r7, lr, r4
   25e4e:	220d      	movs	r2, #13
   25e50:	460b      	mov	r3, r1
   25e52:	eb0c 0407 	add.w	r4, ip, r7
   25e56:	af03      	add	r7, sp, #12
   25e58:	9403      	str	r4, [sp, #12]
   25e5a:	9700      	str	r7, [sp, #0]
   25e5c:	f7ff f95c 	bl	25118 <_Unwind_VRS_Set>
   25e60:	e6cb      	b.n	25bfa <__gnu_unwind_execute+0x12>
   25e62:	4628      	mov	r0, r5
   25e64:	f7ff fe96 	bl	25b94 <next_unwind_byte>
   25e68:	2101      	movs	r1, #1
   25e6a:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
   25e6e:	f000 000f 	and.w	r0, r0, #15
   25e72:	1c43      	adds	r3, r0, #1
   25e74:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
   25e78:	4630      	mov	r0, r6
   25e7a:	460b      	mov	r3, r1
   25e7c:	f7ff fb22 	bl	254c4 <_Unwind_VRS_Pop>
   25e80:	2800      	cmp	r0, #0
   25e82:	f47f aee2 	bne.w	25c4a <__gnu_unwind_execute+0x62>
   25e86:	e6b8      	b.n	25bfa <__gnu_unwind_execute+0x12>
   25e88:	4628      	mov	r0, r5
   25e8a:	f7ff fe83 	bl	25b94 <next_unwind_byte>
   25e8e:	2103      	movs	r1, #3
   25e90:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
   25e94:	f000 000f 	and.w	r0, r0, #15
   25e98:	1c43      	adds	r3, r0, #1
   25e9a:	e7eb      	b.n	25e74 <__gnu_unwind_execute+0x28c>
   25e9c:	4628      	mov	r0, r5
   25e9e:	f7ff fe79 	bl	25b94 <next_unwind_byte>
   25ea2:	4602      	mov	r2, r0
   25ea4:	2800      	cmp	r0, #0
   25ea6:	f43f aed0 	beq.w	25c4a <__gnu_unwind_execute+0x62>
   25eaa:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   25eae:	f47f aecc 	bne.w	25c4a <__gnu_unwind_execute+0x62>
   25eb2:	4630      	mov	r0, r6
   25eb4:	2104      	movs	r1, #4
   25eb6:	f7ff fb05 	bl	254c4 <_Unwind_VRS_Pop>
   25eba:	2800      	cmp	r0, #0
   25ebc:	f47f aec5 	bne.w	25c4a <__gnu_unwind_execute+0x62>
   25ec0:	e69b      	b.n	25bfa <__gnu_unwind_execute+0x12>
   25ec2:	f000 030f 	and.w	r3, r0, #15
   25ec6:	2103      	movs	r1, #3
   25ec8:	1c5a      	adds	r2, r3, #1
   25eca:	4630      	mov	r0, r6
   25ecc:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
   25ed0:	460b      	mov	r3, r1
   25ed2:	f7ff faf7 	bl	254c4 <_Unwind_VRS_Pop>
   25ed6:	2800      	cmp	r0, #0
   25ed8:	f47f aeb7 	bne.w	25c4a <__gnu_unwind_execute+0x62>
   25edc:	e68d      	b.n	25bfa <__gnu_unwind_execute+0x12>
   25ede:	4628      	mov	r0, r5
   25ee0:	f7ff fe58 	bl	25b94 <next_unwind_byte>
   25ee4:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
   25ee8:	f000 030f 	and.w	r3, r0, #15
   25eec:	3210      	adds	r2, #16
   25eee:	e746      	b.n	25d7e <__gnu_unwind_execute+0x196>

00025ef0 <__gnu_unwind_frame>:
   25ef0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   25ef2:	4608      	mov	r0, r1
   25ef4:	b530      	push	{r4, r5, lr}
   25ef6:	b085      	sub	sp, #20
   25ef8:	685a      	ldr	r2, [r3, #4]
   25efa:	f103 0408 	add.w	r4, r3, #8
   25efe:	2503      	movs	r5, #3
   25f00:	f88d 500c 	strb.w	r5, [sp, #12]
   25f04:	79db      	ldrb	r3, [r3, #7]
   25f06:	a901      	add	r1, sp, #4
   25f08:	0212      	lsls	r2, r2, #8
   25f0a:	9402      	str	r4, [sp, #8]
   25f0c:	9201      	str	r2, [sp, #4]
   25f0e:	f88d 300d 	strb.w	r3, [sp, #13]
   25f12:	f7ff fe69 	bl	25be8 <__gnu_unwind_execute>
   25f16:	b005      	add	sp, #20
   25f18:	bd30      	pop	{r4, r5, pc}
   25f1a:	bf00      	nop

00025f1c <_Unwind_GetRegionStart>:
   25f1c:	b508      	push	{r3, lr}
   25f1e:	f7ff fe61 	bl	25be4 <unwind_UCB_from_context>
   25f22:	6c80      	ldr	r0, [r0, #72]	; 0x48
   25f24:	bd08      	pop	{r3, pc}
   25f26:	bf00      	nop

00025f28 <_Unwind_GetLanguageSpecificData>:
   25f28:	b508      	push	{r3, lr}
   25f2a:	f7ff fe5b 	bl	25be4 <unwind_UCB_from_context>
   25f2e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   25f30:	79c2      	ldrb	r2, [r0, #7]
   25f32:	eb00 0382 	add.w	r3, r0, r2, lsl #2
   25f36:	f103 0008 	add.w	r0, r3, #8
   25f3a:	bd08      	pop	{r3, pc}

00025f3c <_Unwind_GetDataRelBase>:
   25f3c:	b508      	push	{r3, lr}
   25f3e:	f7f8 fd7d 	bl	1ea3c <abort>
   25f42:	bf00      	nop

00025f44 <_Unwind_GetTextRelBase>:
   25f44:	b508      	push	{r3, lr}
   25f46:	f7f8 fd79 	bl	1ea3c <abort>
   25f4a:	bf00      	nop
   25f4c:	2f637273 	.word	0x2f637273
   25f50:	6867694d 	.word	0x6867694d
   25f54:	6f427974 	.word	0x6f427974
   25f58:	2f647261 	.word	0x2f647261
   25f5c:	68746f4d 	.word	0x68746f4d
   25f60:	6f627265 	.word	0x6f627265
   25f64:	2f647261 	.word	0x2f647261
   25f68:	2f62696c 	.word	0x2f62696c
   25f6c:	72756f73 	.word	0x72756f73
   25f70:	6c2f6563 	.word	0x6c2f6563
   25f74:	37316370 	.word	0x37316370
   25f78:	615f7878 	.word	0x615f7878
   25f7c:	632e6364 	.word	0x632e6364
   25f80:	00000000 	.word	0x00000000
   25f84:	2f637273 	.word	0x2f637273
   25f88:	6867694d 	.word	0x6867694d
   25f8c:	6f427974 	.word	0x6f427974
   25f90:	2f647261 	.word	0x2f647261
   25f94:	68746f4d 	.word	0x68746f4d
   25f98:	6f627265 	.word	0x6f627265
   25f9c:	2f647261 	.word	0x2f647261
   25fa0:	2f62696c 	.word	0x2f62696c
   25fa4:	72756f73 	.word	0x72756f73
   25fa8:	6c2f6563 	.word	0x6c2f6563
   25fac:	37316370 	.word	0x37316370
   25fb0:	725f7878 	.word	0x725f7878
   25fb4:	632e6374 	.word	0x632e6374
   25fb8:	00000000 	.word	0x00000000
   25fbc:	2f637273 	.word	0x2f637273
   25fc0:	6867694d 	.word	0x6867694d
   25fc4:	6f427974 	.word	0x6f427974
   25fc8:	2f647261 	.word	0x2f647261
   25fcc:	68746f4d 	.word	0x68746f4d
   25fd0:	6f627265 	.word	0x6f627265
   25fd4:	2f647261 	.word	0x2f647261
   25fd8:	2f62696c 	.word	0x2f62696c
   25fdc:	72756f73 	.word	0x72756f73
   25fe0:	6c2f6563 	.word	0x6c2f6563
   25fe4:	37316370 	.word	0x37316370
   25fe8:	735f7878 	.word	0x735f7878
   25fec:	632e6970 	.word	0x632e6970
   25ff0:	00000000 	.word	0x00000000
   25ff4:	2f637273 	.word	0x2f637273
   25ff8:	6867694d 	.word	0x6867694d
   25ffc:	6f427974 	.word	0x6f427974
   26000:	2f647261 	.word	0x2f647261
   26004:	68746f4d 	.word	0x68746f4d
   26008:	6f627265 	.word	0x6f627265
   2600c:	2f647261 	.word	0x2f647261
   26010:	2f62696c 	.word	0x2f62696c
   26014:	72756f73 	.word	0x72756f73
   26018:	6c2f6563 	.word	0x6c2f6563
   2601c:	37316370 	.word	0x37316370
   26020:	745f7878 	.word	0x745f7878
   26024:	72656d69 	.word	0x72656d69
   26028:	0000632e 	.word	0x0000632e
   2602c:	2f637273 	.word	0x2f637273
   26030:	6867694d 	.word	0x6867694d
   26034:	6f427974 	.word	0x6f427974
   26038:	2f647261 	.word	0x2f647261
   2603c:	68746f4d 	.word	0x68746f4d
   26040:	6f627265 	.word	0x6f627265
   26044:	2f647261 	.word	0x2f647261
   26048:	2f62696c 	.word	0x2f62696c
   2604c:	72756f73 	.word	0x72756f73
   26050:	6c2f6563 	.word	0x6c2f6563
   26054:	37316370 	.word	0x37316370
   26058:	755f7878 	.word	0x755f7878
   2605c:	2e747261 	.word	0x2e747261
   26060:	00000063 	.word	0x00000063
   26064:	2f637273 	.word	0x2f637273
   26068:	6867694d 	.word	0x6867694d
   2606c:	6f427974 	.word	0x6f427974
   26070:	2f647261 	.word	0x2f647261
   26074:	68746f4d 	.word	0x68746f4d
   26078:	6f627265 	.word	0x6f627265
   2607c:	2f647261 	.word	0x2f647261
   26080:	2f62696c 	.word	0x2f62696c
   26084:	72756f73 	.word	0x72756f73
   26088:	6c2f6563 	.word	0x6c2f6563
   2608c:	37316370 	.word	0x37316370
   26090:	775f7878 	.word	0x775f7878
   26094:	632e7464 	.word	0x632e7464
   26098:	00000000 	.word	0x00000000

0002609c <USB_ConfigDescriptor>:
   2609c:	00430209 80000102 00040932 02020100     ..C.....2.......
   260ac:	24055e00 05011000 01010124 02022404     .^.$....$....$..
   260bc:	00062405 81050701 02001003 00010409     .$..............
   260cc:	00000a02 0205075e 00004002 02820507     ....^....@......
   260dc:	00000040                                @...

000260e0 <USB_StringDescriptor>:
   260e0:	04090304 004e031c 00500058 00530020     ......N.X.P. .S.
   260f0:	004d0045 00430049 004e004f 00200044     E.M.I.C.O.N.D. .
   26100:	004e0324 00500058 004c0020 00430050     $.N.X.P. .L.P.C.
   26110:	00370031 00780078 00560020 004f0043     1.7.x.x. .V.C.O.
   26120:	0020004d 0044031a 004d0045 0030004f     M. ...D.E.M.O.0.
   26130:	00300030 00300030 00300030 030a0030     0.0.0.0.0.0.0...
   26140:	00430056 004d004f                       V.C.O.M.

00026148 <USB_DeviceDescriptor>:
   26148:	02000112 08000002 b40423c1 02010100     .........#......
   26158:	00000103                                ....

0002615c <USB_P_EP>:
   2615c:	00004bc9 00005c11 00005bf9 00000000     .K...\...[......
	...
   2619c:	6978655f 61632074 64656c6c 74697720     _exit called wit
   261ac:	61702068 656d6172 20726574 000a6425     h parameter %d..
   261bc:	70616548 646e6120 61747320 63206b63     Heap and stack c
   261cc:	696c6c6f 6e6f6973 0000000a 0a7b7325     ollision....%s{.
   261dc:	00000000 00000062 464e495b 722d5d4f     ....b...[INFO]-r
   261ec:	74657365 676e6974 206f7420 746f6f62     esetting to boot
   261fc:	64616f6c 28207265 253a7325 000a2964     loader (%s:%d)..
   2620c:	2f637273 6867694d 6f427974 2f647261     src/MightyBoard/
   2621c:	68746f4d 6f627265 2f647261 6d6d6f63     Motherboard/comm
   2622c:	0000632e 464e495b 722d5d4f 74657365     .c..[INFO]-reset
   2623c:	20676e69 3a732528 0a296425 00000000     ing (%s:%d).....
   2624c:	464e495b 742d5d4f 73747365 6e757220     [INFO]-tests run
   2625c:	676e696e 73252820 2964253a 0000000a     ning (%s:%d)....
   2626c:	00000071 464e495b 712d5d4f 73252820     q...[INFO]-q (%s
   2627c:	2964253a 0000000a 464e495b 0d2d5d4f     :%d)....[INFO]-.
   2628c:	522d720a 74657365 6f622073 0d647261     .r-Resets board.
   2629c:	522d620a 74657365 6f742073 6f6f6220     .b-Resets to boo
   262ac:	616f6c74 0d726564 6c2d740a 74206465     tloader..t-led t
   262bc:	0d747365 2528200a 64253a73 00000a29     est.. (%s:%d)...
   262cc:	464e495b 432d5d4f 616d6d6f 6e20646e     [INFO]-Command n
   262dc:	6620746f 646e756f 6d632820 73253d64     ot found (cmd=%s
   262ec:	25282029 64253a73 00000a29 07050301     ) (%s:%d).......
   262fc:	12100e09 1c181614 0000001e 61732049     ............I sa
   2630c:	20612077 74696c67 69206863 796d206e     w a glitch in my
   2631c:	63204453 20647261 656c6966 6d6f532e     SD card file.Som
   2632c:	79616465 6c6c2749 20656220 72616d73     edayI'll be smar
   2633c:	6e652074 6867756f 72206f74 61747365     t enoughto resta
   2634c:	70207472 746e6972 2e676e69 00000000     rt printing.....
   2635c:	69742049 2064656d 2074756f 6c696877     I timed out whil
   2636c:	20202065 65747461 6974706d 7420676e     e   attempting t
   2637c:	6568206f 20207461 6520796d 75727478     o heat  my extru
   2638c:	2e726564 00000000 69742049 2064656d     der.....I timed 
   2639c:	2074756f 6c696877 20202065 65747461     out while   atte
   263ac:	6974706d 7420676e 6568206f 20207461     mpting to heat  
   263bc:	7020796d 6674616c 2e6d726f 00000000     my platform.....
   263cc:	01f4007b 000037e5 00001b94 00000000     {....7..........
	...
   263e4:	76287676 00000076 65766173 5f6f745f     vv(vv...save_to_
   263f4:	73616c66 25282068 64253a73 00000a29     flash (%s:%d)...
   26404:	2f637273 6867694d 6f427974 2f647261     src/MightyBoard/
   26414:	68746f4d 6f627265 2f647261 72706545     Motherboard/Eepr
   26424:	614d6d6f 63632e70 00000000 20656854     omMap.cc....The 
   26434:	6c706552 74616369 0000726f              Replicator..

00026440 <replicator_axis_lengths::axis_lengths>:
   26440:	000029bd 0001114e 0000ea60 0092e780     .)..N...`.......
   26450:	0092e780 00000000                       ........

00026458 <vtable for HeatingElement>:
	...
   26460:	000099e5 00009a11 000138c1 00000000     .........8......

00026470 <vtable for ExtruderHeatingElement>:
	...
   26478:	000099f1 000099fd 00009b39 00000000     ........9.......
   26488:	5f4d4954 28646d43 5f43504c 314d4954     TIM_Cmd(LPC_TIM1
   26498:	414e452c 29454c42 73252820 2964253a     ,ENABLE) (%s:%d)
   264a8:	0000000a 2f637273 6867694d 6f427974     ....src/MightyBo
   264b8:	2f647261 68746f4d 6f627265 2f647261     ard/Motherboard/
   264c8:	72747845 72656475 72616f42 63632e64     ExtruderBoard.cc
   264d8:	00000000 5f4d4954 28646d43 5f43504c     ....TIM_Cmd(LPC_
   264e8:	314d4954 5349442c 454c4241 25282029     TIM1,DISABLE) (%
   264f8:	64253a73 00000a29 5f4d4954 28646d43     s:%d)...TIM_Cmd(
   26508:	5f43504c 324d4954 414e452c 29454c42     LPC_TIM2,ENABLE)
   26518:	73252820 2964253a 0000000a 5f4d4954      (%s:%d)....TIM_
   26528:	28646d43 5f43504c 324d4954 5349442c     Cmd(LPC_TIM2,DIS
   26538:	454c4241 25282029 64253a73 00000a29     ABLE) (%s:%d)...
   26548:	47706552 69754220 0000646c 646e6168     RepG Build..hand
   26558:	7257656c 45657469 6f727065 2528206d     leWriteEeprom (%
   26568:	64253a73 00000a29 2f637273 6867694d     s:%d)...src/Migh
   26578:	6f427974 2f647261 68746f4d 6f627265     tyBoard/Motherbo
   26588:	2f647261 74736f48 0063632e 25207825     ard/Host.cc.%x %
   26598:	63252078 0000000a 692e6e69 61745373     x %c....in.isSta
   265a8:	64657472 26202928 69212026 73692e6e     rted() && !in.is
   265b8:	696e6946 64656873 28202928 253a7325     Finished() (%s:%
   265c8:	000a2964 5f544457 48515249 6c646e61     d)..WDT_IRQHandl
   265d8:	28207265 253a7325 000a2964 2f637273     er (%s:%d)..src/
   265e8:	6867694d 6f427974 2f647261 68746f4d     MightyBoard/Moth
   265f8:	6f627265 2f647261 6e69614d 0063632e     erboard/Main.cc.
   26608:	61636473 3a3a6472 65736572 25282074     sdcard::reset (%
   26618:	64253a73 00000a29 6c697475 3a797469     s:%d)...utility:
   26628:	7365723a 28207465 253a7325 000a2964     :reset (%s:%d)..
   26638:	6e616c70 3a72656e 696e693a 25282074     planner::init (%
   26648:	64253a73 00000a29 72706565 3a3a6d6f     s:%d)...eeprom::
   26658:	74696e69 73252820 2964253a 0000000a     init (%s:%d)....
   26668:	70657473 73726570 65723a3a 20746573     steppers::reset 
   26678:	3a732528 0a296425 00000000 72616f62     (%s:%d).....boar
   26688:	65722e64 28746573 64726168 7365725f     d.reset(hard_res
   26698:	20297465 3a732528 0a296425 00000000     et) (%s:%d).....
   266a8:	0a0d0a0d 0a0d0a0d 2a2a0a0d 544f4f42     ..........**BOOT
   266b8:	2a2a4445 73252820 2964253a 0000000a     ED** (%s:%d)....
   266c8:	65736572 6f642074 2820656e 253a7325     reset done (%s:%
   266d8:	000a2964 70657473 20726570 74696e69     d)..stepper init
   266e8:	6e6f6420 25282065 64253a73 00000a29      done (%s:%d)...
   266f8:	706f6f4c 73252820 2964253a 0000000a     Loop (%s:%d)....
   26708:	0000002e 00000000                       ........

00026710 <vtable for TemperatureSensor>:
	...
   26718:	0000b085 0000b0d9 0000b091 000138c1     .............8..

00026728 <vtable for BuildPlatformHeatingElement>:
	...
   26730:	0000b095 0000b0c5 0000b0ed 00000000     ................
   26740:	2f637273 6867694d 6f427974 2f647261     src/MightyBoard/
   26750:	68746f4d 6f627265 2f647261 6e616c50     Motherboard/Plan
   26760:	2e72656e 00006363 0000002f 43204453     ner.cc../...SD C
   26770:	20647261 6f6d6552 00646576              ard Removed.

0002677c <rate_table_slow>:
	...
   267bc:	765f7a12 6f9b72e4 69936c82 642966cc     .z_v.r.o.l.i.f)d
   267cc:	5f4661a8 5ad85d02 56ce58c7 531d54eb     .aF_.].Z.X.V.T.S
   267dc:	4fb85161 4c984e20 49b44b1f 47064857     aQ.O N.L.K.IWH.G
   267ec:	448845c1 42354359 4009411b 3e013f01     .E.DYC5B.A.@.?.>
   267fc:	3c193d09 3a4d3b30 389d3972 370537ce     .=.<0;M:r9.8.7.7
   2680c:	35833641 341534ca 32bb3366 31723215     A6.5.4.4f3.2.2r1
   2681c:	303a30d4 2f102fa3 2df52e81 2ce62d6c     .0:0././...-l-.,
   2682c:	2be42c64 2aed2b67 2a012a76 291e298e     d,.+g+.*v*.*.).)
   2683c:	284528b1 277527dc 26ad2710 25ed264c     .(E(.'u'.'.&L&.%
   2684c:	2534258f 248224da 23d6242b 23312383     .%4%.$.$+$.#.#1#
   2685c:	229222e1 21f82244 216321ad 20d3211b     ."."D".!.!c!.!. 
   2686c:	2048208d 1fc22005 1f401f81 1ec21f01     . H . ....@.....
   2687c:	1e481e85 1dd21e0c 1d5f1d98 1cef1d27     ..H......._.'...
   2688c:	1c831cb9 1c1a1c4e 1bb41be7 1b511b82     ....N.........Q.
   2689c:	1af11b20 1a931ac1 1a371a65 19df1a0b      .......e.7.....
   268ac:	198819b3 1934195e 18e1190a 189118b9     ....^.4.........
   268bc:	1843186a 17f7181d 17ad17d2 17641788     j.C...........d.
   268cc:	171d1740 16d816fa 169416b6 16521673     @...........s.R.
   268dc:	16121632 15d315f2 159515b4 15581577     2...........w.X.
   268ec:	151d153b 14e41500 14ab14c7 1474148f     ;.............t.
   268fc:	143d1458 14081423 13d413ee 13a113bb     X.=.#...........
   2690c:	136f1388 133e1356 130e1326 12df12f6     ..o.V.>.&.......
   2691c:	12b112c8 1283129a 1257126d 122b1241     ........m.W.A.+.
   2692c:	12001216 11d611eb 11ad11c1 11841199     ................
   2693c:	115c1170 11351149 110f1122 10e910fc     p.\.I.5.".......
   2694c:	10c410d6 109f10b2 107b108d 1058106a     ..........{.j.X.
   2695c:	10351047 10131024 0ff21002 0fd10fe1     G.5.$...........
   2696c:	0fb00fc0 0f900fa0 0f710f80 0f520f61     ..........q.a.R.
   2697c:	0f330f42 0f150f24 0ef70f06 0eda0ee9     B.3.$...........
   2698c:	0ebe0ecc 0ea10eaf 0e850e93 0e6a0e78     ............x.j.
   2699c:	0e4f0e5c 0e340e42 0e1a0e27 0e000e0d     \.O.B.4.'.......
   269ac:	0de70df3 0dce0dda 0db50dc1 0d9c0da9     ................
   269bc:	0d840d90 0d6c0d78 0d550d61 0d3e0d49     ....x.l.a.U.I.>.
   269cc:	0d270d32 0d100d1c 0cfa0d05 0ce40cef     2.'.............
   269dc:	0ccf0cd9 0cb90cc4 0ca40caf 0c8f0c9a     ................
   269ec:	0c7b0c85 0c670c71 0c530c5d 0c3f0c49     ..{.q.g.].S.I.?.
   269fc:	0c2b0c35 0c180c22 0c050c0e 0bf20bfb     5.+."...........
   26a0c:	0be00be9 0bcd0bd6 0bbb0bc4 0ba90bb2     ................
   26a1c:	0b970ba0 0b860b8f 0b750b7d 0b630b6c     ........}.u.l.c.
   26a2c:	0b530b5b 0b420b4a 0b310b3a 0b210b29     [.S.J.B.:.1.).!.
   26a3c:	0b110b19 0b010b09 0af10af9 0ae20ae9     ................
   26a4c:	0ad20ada 0ac30aca 0ab40abb 0aa50aac     ................
   26a5c:	0a960a9d 0a870a8f 0a790a80 0a6b0a72     ..........y.r.k.
   26a6c:	0a5d0a64 0a4f0a56 0a410a48 0a330a3a     d.].V.O.H.A.:.3.
   26a7c:	0a250a2c 0a180a1f 0a0b0a11 09fe0a04     ,.%.............
   26a8c:	09f109f7 09e409ea 09d709dd 09ca09d1     ................
   26a9c:	09be09c4 09b109b8 09a509ab 0999099f     ................
   26aac:	098d0993 09810987 0975097b 096a096f     ........{.u.o.j.
   26abc:	095e0964 09530958 0947094d 093c0942     d.^.X.S.M.G.B.<.
   26acc:	09310936 0926092b 091b0920 09100916     6.1.+.&. .......
   26adc:	0905090b 08fb0900 08f008f6 08e608eb     ................
   26aec:	08dc08e1 08d108d6 08c708cc 08bd08c2     ................
   26afc:	08b308b8 08a908ae 08a008a4 0896089b     ................
   26b0c:	088c0891 08830887 0879087e 08700875     ........~.y.u.p.
   26b1c:	0867086b 085d0862 08540859 084b0850     k.g.b.].Y.T.P.K.
   26b2c:	08420847 0839083e 08300835 0828082c     G.B.>.9.5.0.,.(.
   26b3c:	081f0823 0816081b 080e0812 0805080a     #...............
   26b4c:	07fd0801 07f507f9 07ec07f1 07e407e8     ................
   26b5c:	07dc07e0 07d407d8 07cc07d0 07c407c8     ................
   26b6c:	07bc07c0 07b407b8 07ad07b1 07a507a9     ................
   26b7c:	079d07a1 0796079a 078e0792 0787078b     ................
   26b8c:	077f0783 0778077c 07710774 076a076d     ....|.x.t.q.m.j.
   26b9c:	07620766 075b075f 07540758 074d0751     f.b._.[.X.T.Q.M.
   26bac:	0746074a 073f0743 0738073c 07320735     J.F.C.?.<.8.5.2.
   26bbc:	072b072e 07240728 071d0721 0717071a     ..+.(.$.!.......
   26bcc:	07100714 070a070d 07030707 06fd0700     ................
   26bdc:	06f706fa 06f006f3 06ea06ed 06e406e7     ................
   26bec:	06dd06e1 06d706da 06d106d4 06cb06ce     ................
   26bfc:	06c506c8 06bf06c2 06b906bc 06b306b6     ................
   26c0c:	06ad06b0 06a806aa 06a206a5 069c069f     ................
   26c1c:	06960699 06910694 068b068e 06850688     ................
   26c2c:	06800683 067a067d 06750678 066f0672     ....}.z.x.u.r.o.
   26c3c:	066a066d 06650667 065f0662 065a065d     m.j.g.e.b._.].Z.
   26c4c:	06550657 06500652 064a064d 06450648     W.U.R.P.M.J.H.E.
   26c5c:	06400643 063b063d 06360638 06310633     C.@.=.;.8.6.3.1.
   26c6c:	062c062e 06270629 06220624 061d061f     ..,.).'.$.".....
   26c7c:	0618061b 06130616 060e0611 060a060c     ................
   26c8c:	06050607 06000602 05fb05fe 05f705f9     ................
   26c9c:	05f205f4 05ed05f0 05e905eb 05e405e7     ................
   26cac:	05e005e2 05db05de 05d705d9 05d205d5     ................
   26cbc:	05ce05d0 05c905cc 05c505c7 05c105c3     ................
   26ccc:	05bc05bf 05b805ba 05b405b6 05b005b2     ................
   26cdc:	05ab05ad 05a705a9 05a305a5 059f05a1     ................
   26cec:	059b059d 05970599 05930595 058e0591     ................
   26cfc:	058a058c 05860588 05820584 057e0580     ..............~.
   26d0c:	057b057c 05770579 05730575 056f0571     |.{.y.w.u.s.q.o.
   26d1c:	056b056d 05670569 05630565 05600561     m.k.i.g.e.c.a.`.
   26d2c:	055c055e 0558055a 05540556 05510552     ^.\.Z.X.V.T.R.Q.
   26d3c:	054d054f 0549054b 05460547 05420544     O.M.K.I.G.F.D.B.
   26d4c:	053e0540 053b053c 05370539 05340535     @.>.<.;.9.7.5.4.
   26d5c:	05300532 052d052e 0529052b 05260527     2.0...-.+.).'.&.
   26d6c:	05220524 051f0520 051b051d 05180519     $.". ...........
   26d7c:	05140516 05110513 050e050f 050a050c     ................
   26d8c:	05070509 05040505 05000502 04fd04ff     ................
   26d9c:	04fa04fc 04f704f8 04f304f5 04f004f2     ................
   26dac:	04ed04ef 04ea04eb 04e704e8 04e404e5     ................
   26dbc:	04e004e2 04dd04df 04da04dc 04d704d9     ................
   26dcc:	04d404d6 04d104d3 04ce04d0 04cb04cd     ................
   26ddc:	04c804c9 04c504c6 04c204c4 04bf04c1     ................
   26dec:	04bc04be 04b904bb 04b604b8 04b304b5     ................
   26dfc:	04b004b2 04ae04af 04ab04ac 04a804a9     ................
   26e0c:	04a504a6 04a204a4 049f04a1 049d049e     ................
   26e1c:	049a049b 04970498 04940496 04920493     ................
   26e2c:	048f0490 048c048e 0489048b 04870488     ................
   26e3c:	04840485 04810483 047f0480 047c047d     ............}.|.
   26e4c:	0479047b 04770478 04740476 04720473     {.y.x.w.v.t.s.r.
   26e5c:	046f0470 046d046e 046a046b 04670469     p.o.n.m.k.j.i.g.
   26e6c:	04650466 04620464 04600461 045d045f     f.e.d.b.a.`._.].
   26e7c:	045b045c 0458045a 04560457 04530455     \.[.Z.X.W.V.U.S.
   26e8c:	04510452 044f0450 044c044d 044a044b     R.Q.P.O.M.L.K.J.
   26e9c:	04470448 04450446 04430444 04400441     H.G.F.E.D.C.A.@.
   26eac:	043e043f 043b043d 0439043a 04370438     ?.>.=.;.:.9.8.7.
   26ebc:	04340436 04320433 04300431 042e042f     6.4.3.2.1.0./...
   26ecc:	042b042c 0429042a 04270428 04240426     ,.+.*.).(.'.&.$.
   26edc:	04220423 04200421 041e041f 041c041d     #.".!. .........
   26eec:	0419041a 04170418 04150416 04130414     ................
   26efc:	04110412 040e0410 040c040d 040a040b     ................
   26f0c:	04080409 04060407 04040405 04020403     ................
   26f1c:	04000401 03fd03fe 03fb03fc 03f903fa     ................
   26f2c:	03f703f8 03f503f6 03f303f4 03f103f2     ................
   26f3c:	03ef03f0 03ed03ee 03eb03ec 03e903ea     ................
   26f4c:	03e703e8 03e503e6 03e303e4 03e103e2     ................
   26f5c:	03df03e0 03dd03de 03db03dc 03d903da     ................
   26f6c:	03d703d8 03d503d6 03d303d4 03d203d2     ................
   26f7c:	03d003d1 03ce03cf 03cc03cd 03ca03cb     ................
   26f8c:	03c803c9 03c603c7 03c403c5 03c203c3     ................
   26f9c:	03c103c2 03bf03c0 03bd03be 03bb03bc     ................
   26fac:	03b903ba 03b703b8 03b603b7 03b403b5     ................
   26fbc:	03b203b3 03b003b1 03af03af 03ad03ae     ................
   26fcc:	03ab03ac 03a903aa 03a703a8 03a603a7     ................
   26fdc:	03a403a5 03a203a3 03a103a1 039f03a0     ................
   26fec:	039d039e 039b039c 039a039b 03980399     ................
   26ffc:	03960397 03950395 03930394 03910392     ................
   2700c:	03900390 038e038f 038c038d 038b038b     ................
   2701c:	0389038a 03870388 03860387 03840385     ................
   2702c:	03820383 03810382 037f0380 037e037e     ............~.~.
   2703c:	037c037d 037a037b 0379037a 03770378     }.|.{.z.z.y.x.w.
   2704c:	03760377 03740375 03730373 03710372     w.v.u.t.s.s.r.q.
   2705c:	03700370 036e036f 036c036d 036b036c     p.p.o.n.m.l.l.k.
   2706c:	0369036a 03680369 03660367 03650366     j.i.i.h.g.f.f.e.
   2707c:	03630364 03620363 03600361 035f0360     d.c.c.b.a.`.`._.
   2708c:	035d035e 035c035d 035a035b 0359035a     ^.].].\.[.Z.Z.Y.
   2709c:	03570358 03560357 03550355 03530354     X.W.W.V.U.U.T.S.
   270ac:	03520352 03500351 034f034f 034d034e     R.R.Q.P.O.O.N.M.
   270bc:	034c034d 034a034b 0349034a 03480348     M.L.K.J.J.I.H.H.
   270cc:	03460347 03450346 03430344 03420343     G.F.F.E.D.C.C.B.
   270dc:	03410341 033f0340 033e033f 033d033d     A.A.@.?.?.>.=.=.
   270ec:	033b033c 033a033a 03380339 03370338     <.;.:.:.9.8.8.7.
   270fc:	03360336 03340335 03330334 03320332     6.6.5.4.4.3.2.2.
   2710c:	03300331 032f0330 032e032e 032c032d     1.0.0./.....-.,.
   2711c:	032b032c 032a032a 03280329 03270328     ,.+.*.*.).(.(.'.
   2712c:	03260326 03250325 03230324 03220323     &.&.%.%.$.#.#.".
   2713c:	03210321 031f0320 031e031f 031d031d     !.!. ...........
   2714c:	031c031c 031a031b 0319031a 03180318     ................
   2715c:	03170317 03150316 03140315 03130313     ................
   2716c:	03120312 03100311 030f0310 030e030e     ................
   2717c:	030d030d 030b030c 030a030b 0309030a     ................
   2718c:	03080308 03070307 03050306 03040305     ................
   2719c:	03030304 03020302 03010301 02ff0300     ................
   271ac:	02fe02ff 02fd02fe 02fc02fd 02fb02fb     ................
   271bc:	02fa02fa 02f802f9 02f702f8 02f602f7     ................
   271cc:	02f502f6 02f402f4 02f302f3 02f202f2     ................
   271dc:	02f002f1 02ef02f0 02ee02ef 02ed02ee     ................
   271ec:	02ec02ed 02eb02eb 02ea02ea 02e902e9     ................
   271fc:	02e702e8 02e602e7 02e502e6 02e402e5     ................
   2720c:	02e302e4 02e202e3 02e102e1 02e002e0     ................
   2721c:	02df02df 02de02de 02dd02dd 02dc02dc     ................
   2722c:	02da02db 02d902da 02d802d9 02d702d8     ................
   2723c:	02d602d7 02d502d6 02d402d5 02d302d4     ................
   2724c:	02d202d3 02d102d2 02d002d0 02cf02cf     ................
   2725c:	02ce02ce 02cd02cd 02cc02cc 02cb02cb     ................
   2726c:	02ca02ca 02c902c9 02c802c8 02c702c7     ................
   2727c:	02c602c6 02c502c5 02c402c4 02c302c3     ................
   2728c:	02c202c2 02c102c1 02c002c0 02bf02bf     ................
   2729c:	02be02be 02bd02bd 02bc02bc 02bb02bb     ................
   272ac:	02ba02ba 02b902b9 02b802b8 02b702b7     ................
   272bc:	02b602b6 02b502b5 02b402b5 02b302b4     ................
   272cc:	02b202b3 02b102b2 02b002b1 02af02b0     ................
   272dc:	02ae02af 02ad02ae 02ac02ad 02ac02ac     ................
   272ec:	02ab02ab 02aa02aa 02a902a9 02a802a8     ................
   272fc:	02a702a7 02a602a6 02a502a6 02a402a5     ................
   2730c:	02a302a4 02a202a3 02a102a2 02a002a1     ................
   2731c:	02a002a0 029f029f 029e029e 029d029d     ................
   2732c:	029c029c 029b029c 029a029b 0299029a     ................
   2733c:	02980299 02980298 02970297 02960296     ................
   2734c:	02950295 02940295 02930294 02920293     ................
   2735c:	02910292 02910291 02900290 028f028f     ................
   2736c:	028e028e 028d028e 028c028d 028b028c     ................
   2737c:	028b028b 028a028a 02890289 02880289     ................
   2738c:	02870288 02860287 02860286 02850285     ................
   2739c:	02840284 02830284 02820283 02810282     ................
   273ac:	02810281 02800280 027f027f 027e027f     ..............~.
   273bc:	027d027e 027d027d 027c027c 027b027b     ~.}.}.}.|.|.{.{.
   273cc:	027a027b 0279027a 02790279 02780278     {.z.z.y.y.y.x.x.
   273dc:	02770277 02760277 02750276 02750275     w.w.w.v.v.u.u.u.
   273ec:	02740274 02730273 02720273 02710272     t.t.s.s.s.r.r.q.
   273fc:	02710271 02700270 026f026f 026e026f     q.q.p.p.o.o.o.n.
   2740c:	026e026e 026d026d 026c026c 026b026c     n.n.m.m.l.l.l.k.
   2741c:	026a026b 026a026a 02690269 02680269     k.j.j.j.i.i.i.h.
   2742c:	02670268 02670267 02660266 02650265     h.g.g.g.f.f.e.e.
   2743c:	02640265 02640264 02630263 02620263     e.d.d.d.c.c.c.b.
   2744c:	02610262 02610261 02600260 025f0260     b.a.a.a.`.`.`._.
   2745c:	025e025f 025e025e 025d025d 025c025d     _.^.^.^.].].].\.
   2746c:	025c025c 025b025b 025a025a 0259025a     \.\.[.[.Z.Z.Z.Y.
   2747c:	02590259 02580258 02570258 02560257     Y.Y.X.X.X.W.W.V.
   2748c:	02560256 02550255 02540255 02540254     V.V.U.U.U.T.T.T.
   2749c:	02530253 02520253 02510252 02510251     S.S.S.R.R.Q.Q.Q.
   274ac:	02500250 024f0250 024f024f 024e024e     P.P.P.O.O.O.N.N.
   274bc:	024d024e 024d024d 024c024c 024b024c     N.M.M.M.L.L.L.K.
   274cc:	024b024b 024a024a 02490249 02480249     K.K.J.J.I.I.I.H.
   274dc:	02480248 02470247 02460247 02460246     H.H.G.G.G.F.F.F.
   274ec:	02450245 02440245 02440244 02430243     E.E.E.D.D.D.C.C.
   274fc:	02420243 02420242 02410241 02400241     C.B.B.B.A.A.A.@.
   2750c:	02400240 023f023f 023e023f 023e023e     @.@.?.?.?.>.>.>.
   2751c:	023d023d 023c023d 023c023c 023b023b     =.=.=.<.<.<.;.;.
   2752c:	023a023b 023a023a 02390239 02390239     ;.:.:.:.9.9.9.9.
   2753c:	02380238 02370238 02370237 02360236     8.8.8.7.7.7.6.6.
   2754c:	02350236 02350235 02340234 02330234     6.5.5.5.4.4.4.3.
   2755c:	02330233 02320232 02310232 02310231     3.3.2.2.2.1.1.1.
   2756c:	02300231 02300230 022f022f 022e022f     1.0.0.0./././...
   2757c:	022e022e 022d022d 022c022d 022c022c     ....-.-.-.,.,.,.
   2758c:	022b022c 022b022b 022a022a 0229022a     ,.+.+.+.*.*.*.).
   2759c:	02290229 02280228 02280228 02270227     ).).(.(.(.(.'.'.
   275ac:	02260227 02260226 02250225 02250225     '.&.&.&.%.%.%.%.
   275bc:	02240224 02230224 02230223 02220222     $.$.$.#.#.#.".".
   275cc:	02220222 02210221 02200221 02200220     ".".!.!.!. . . .
   275dc:	021f021f 021f021f 021e021e 021d021e     ................
   275ec:	021d021d 021c021d 021c021c 021b021b     ................
   275fc:	021b021b 021a021a 0219021a 02190219     ................
   2760c:	02180218 02180218 02170217 02160217     ................
   2761c:	02160216 02150216 02150215 02140214     ................
   2762c:	02140214 02130213 02130213 02120212     ................
   2763c:	02110212 02110211 02100211 02100210     ................
   2764c:	020f020f 020f020f 020e020e 020d020e     ................
   2765c:	020d020d 020c020d 020c020c 020b020c     ................
   2766c:	020b020b 020a020a 020a020a 02090209     ................
   2767c:	02090209 02080208 02070208 02070207     ................
   2768c:	02060207 02060206 02050206 02050205     ................
   2769c:	02040205 02040204 02030203 02030203     ................
   276ac:	02020202 02020202 02010201 02010201     ................
   276bc:	02000200 02000200 01ff01ff 01fe01ff     ................
   276cc:	01fe01fe 01fd01fe 01fd01fd 01fc01fd     ................
   276dc:	01fc01fc 01fb01fc 01fb01fb 01fa01fb     ................
   276ec:	01fa01fa 01f901fa 01f901f9 01f801f9     ................
   276fc:	01f801f8 01f701f8 01f701f7 01f601f7     ................
   2770c:	01f601f6 01f501f6 01f501f5 01f401f5     ................
   2771c:	01f401f4 01f301f4 01f301f3 01f201f3     ................
   2772c:	01f201f2 01f101f2 01f101f1 01f001f1     ................
   2773c:	01f001f0 01ef01f0 01ef01ef 01ee01ef     ................
   2774c:	01ee01ee 01ed01ee 01ed01ed 01ec01ed     ................
   2775c:	01ec01ec 01eb01ec 01eb01eb 01ea01eb     ................
   2776c:	01ea01ea 01e901ea 01e901e9 01e901e9     ................
   2777c:	01e801e8 01e801e8 01e701e7 01e701e7     ................
   2778c:	01e601e6 01e601e6 01e501e5 01e501e5     ................
   2779c:	01e401e4 01e401e4 01e301e4 01e301e3     ................
   277ac:	01e201e3 01e201e2 01e101e2 01e101e1     ................
   277bc:	01e101e1 01e001e0 01e001e0 01df01df     ................
   277cc:	01df01df 01de01de 01de01de 01dd01de     ................
   277dc:	01dd01dd 01dc01dd 01dc01dc 01dc01dc     ................
   277ec:	01db01db 01db01db 01da01da 01da01da     ................
   277fc:	01d901d9 01d901d9 01d801d9 01d801d8     ................
   2780c:	01d701d8 01d701d7 01d701d7 01d601d6     ................
   2781c:	01d601d6 01d501d5 01d501d5 01d401d5     ................
   2782c:	01d401d4 01d401d4 01d301d3 01d301d3     ................
   2783c:	01d201d2 01d201d2 01d101d2 01d101d1     ................
   2784c:	01d001d1 01d001d0 01d001d0 01cf01cf     ................
   2785c:	01cf01cf 01ce01cf 01ce01ce 01cd01ce     ................
   2786c:	01cd01cd 01cd01cd 01cc01cc 01cc01cc     ................
   2787c:	01cb01cc 01cb01cb 01cb01cb 01ca01ca     ................
   2788c:	01ca01ca 01c901c9 01c901c9 01c801c9     ................
   2789c:	01c801c8 01c801c8 01c701c7 01c701c7     ................
   278ac:	01c601c7 01c601c6 01c601c6 01c501c5     ................
   278bc:	01c501c5 01c401c4 01c401c4 01c301c4     ................
   278cc:	01c301c3 01c301c3 01c201c2 01c201c2     ................
   278dc:	01c101c2 01c101c1 01c101c1 01c001c0     ................
   278ec:	01c001c0 01bf01c0 01bf01bf 01bf01bf     ................
   278fc:	01be01be 01be01be 01bd01be 01bd01bd     ................
   2790c:	01bd01bd 01bc01bc 01bc01bc 01bb01bc     ................
   2791c:	01bb01bb 01bb01bb 01ba01ba 01ba01ba     ................
   2792c:	01ba01ba 01b901b9 01b901b9 01b801b9     ................
   2793c:	01b801b8 01b801b8 01b701b7 01b701b7     ................
   2794c:	01b601b7 01b601b6 01b601b6 01b501b5     ................
   2795c:	01b501b5 01b401b5 01b401b4 01b401b4     ................
   2796c:	01b301b4 01b301b3 01b301b3 01b201b2     ................
   2797c:	01b201b2 01b101b2 01b101b1 01b101b1     ................
   2798c:	01b001b1 01b001b0 01b001b0 01af01af     ................
   2799c:	01af01af 01ae01af 01ae01ae 01ae01ae     ................
   279ac:	01ad01ae 01ad01ad 01ad01ad 01ac01ac     ................
   279bc:	01ac01ac 01ac01ac 01ab01ab 01ab01ab     ................
   279cc:	01aa01ab 01aa01aa 01aa01aa 01a901aa     ................
   279dc:	01a901a9 01a901a9 01a801a8 01a801a8     ................
   279ec:	01a801a8 01a701a7 01a701a7 01a601a7     ................
   279fc:	01a601a6 01a601a6 01a501a6 01a501a5     ................
   27a0c:	01a501a5 01a401a5 01a401a4 01a401a4     ................
   27a1c:	01a301a3 01a301a3 01a301a3 01a201a2     ................
   27a2c:	01a201a2 01a201a2 01a101a1 01a101a1     ................
   27a3c:	01a001a1 01a001a0 01a001a0 019f01a0     ................
   27a4c:	019f019f 019f019f 019e019f 019e019e     ................
   27a5c:	019e019e 019d019e 019d019d 019d019d     ................
   27a6c:	019c019d 019c019c 019c019c 019b019c     ................
   27a7c:	019b019b 019b019b 019a019b 019a019a     ................
   27a8c:	019a019a 0199019a 01990199 01990199     ................
   27a9c:	01980198 01980198 01980198 01970197     ................
   27aac:	01970197 01970197 01960197 01960196     ................
   27abc:	01960196 01950196 01950195 01950195     ................
   27acc:	01940195 01940194 01940194 01930194     ................
   27adc:	01930193 01930193 01920193 01920192     ................
   27aec:	01920192 01910192 01910191 01910191     ................
   27afc:	01900191 01900190 01900190 01900190     ................
   27b0c:	018f018f 018f018f 018f018f 018e018e     ................
   27b1c:	018e018e 018e018e 018d018d 018d018d     ................
   27b2c:	018d018d 018c018d 018c018c 018c018c     ................
   27b3c:	018b018c 018b018b 018b018b 018a018b     ................
   27b4c:	018a018a 018a018a 018a018a 01890189     ................
   27b5c:	01890189 01890189 01880188 01880188     ................
   27b6c:	01880188 01870188 01870187 01870187     ................
   27b7c:	01860187 01860186 01860186 01860186     ................
   27b8c:	01850185 01850185 01850185 01840185     ................
   27b9c:	01840184 01840184 01830184 01830183     ................
   27bac:	01830183 01830183 01820182 01820182     ................
   27bbc:	01820182 01810182 01810181 01810181     ................
   27bcc:	01800181 01800180 01800180 01800180     ................
   27bdc:	017f017f 017f017f 017f017f 017e017f     ..............~.
   27bec:	017e017e 017e017e 017e017e 017d017d     ~.~.~.~.~.~.}.}.
   27bfc:	017d017d 017d017d 017c017d 017c017c     }.}.}.}.}.|.|.|.
   27c0c:	017c017c 017c017c 017b017b 017b017b     |.|.|.|.{.{.{.{.
   27c1c:	017b017b 017a017b 017a017a 017a017a     {.{.{.z.z.z.z.z.
   27c2c:	017a017a 01790179 01790179 01790179     z.z.y.y.y.y.y.y.
   27c3c:	01780179 01780178 01780178 01780178     y.x.x.x.x.x.x.x.
   27c4c:	01770177 01770177 01770177 01760177     w.w.w.w.w.w.w.v.
   27c5c:	01760176 01760176 01760176 01750175     v.v.v.v.v.v.u.u.
   27c6c:	01750175 01750175 01740175 01740174     u.u.u.u.u.t.t.t.
   27c7c:	01740174 01740174 01730173 01730173     t.t.t.t.s.s.s.s.
   27c8c:	01730173 01730173 01720172 01720172     s.s.s.s.r.r.r.r.
   27c9c:	01720172 01710172 01710171 01710171     r.r.r.q.q.q.q.q.
   27cac:	01710171 01700170 01700170 01700170     q.q.p.p.p.p.p.p.
   27cbc:	01700170 016f016f 016f016f 016f016f     p.p.o.o.o.o.o.o.
   27ccc:	016e016f 016e016e 016e016e 016e016e     o.n.n.n.n.n.n.n.
   27cdc:	016d016d 016d016d 016d016d 016d016d     m.m.m.m.m.m.m.m.
   27cec:	016c016c 016c016c 016c016c 016c016c     l.l.l.l.l.l.l.l.
   27cfc:	016b016b 016b016b 016b016b 016a016b     k.k.k.k.k.k.k.j.
   27d0c:	016a016a 016a016a 016a016a 0169016a     j.j.j.j.j.j.j.i.
   27d1c:	01690169 01690169 01690169 01680168     i.i.i.i.i.i.h.h.
   27d2c:	01680168 01680168 01680168 01670167     h.h.h.h.h.h.g.g.
   27d3c:	01670167 01670167 01670167 01660166     g.g.g.g.g.g.f.f.
   27d4c:	01660166 01660166 01660166 01650165     f.f.f.f.f.f.e.e.
   27d5c:	01650165 01650165 01650165 01640164     e.e.e.e.e.e.d.d.
   27d6c:	01640164 01640164 01630164 01630163     d.d.d.d.d.c.c.c.
   27d7c:	01630163 01630163 01620163 01620162     c.c.c.c.c.b.b.b.
   27d8c:	01620162 01620162 01610162 01610161     b.b.b.b.b.a.a.a.
   27d9c:	01610161 01610161 01600161 01600160     a.a.a.a.a.`.`.`.
   27dac:	01600160 01600160 015f0160 015f015f     `.`.`.`.`._._._.
   27dbc:	015f015f 015f015f 015f015f 015e015e     _._._._._._.^.^.
   27dcc:	015e015e 015e015e 015e015e 015d015d     ^.^.^.^.^.^.].].
   27ddc:	015d015d 015d015d 015d015d 015c015c     ].].].].].].\.\.
   27dec:	015c015c 015c015c 015c015c 015b015b     \.\.\.\.\.\.[.[.
   27dfc:	015b015b 015b015b 015b015b 015a015b     [.[.[.[.[.[.[.Z.
   27e0c:	015a015a 015a015a 015a015a 0159015a     Z.Z.Z.Z.Z.Z.Z.Y.
   27e1c:	01590159 01590159 01590159 01580159     Y.Y.Y.Y.Y.Y.Y.X.
   27e2c:	01580158 01580158 01580158 01580158     X.X.X.X.X.X.X.X.
   27e3c:	01570157 01570157 01570157 01570157     W.W.W.W.W.W.W.W.
   27e4c:	01560156 01560156 01560156 01560156     V.V.V.V.V.V.V.V.
   27e5c:	01550156 01550155 01550155 01550155     V.U.U.U.U.U.U.U.
   27e6c:	01540155 01540154 01540154 01540154     U.T.T.T.T.T.T.T.
   27e7c:	01540154 01530153 01530153 01530153     T.T.S.S.S.S.S.S.
   27e8c:	01530153 01520153 01520152 01520152     S.S.S.R.R.R.R.R.
   27e9c:	01520152 01510152 01510151 01510151     R.R.R.Q.Q.Q.Q.Q.
   27eac:	01510151 01510151 01500150 01500150     Q.Q.Q.Q.P.P.P.P.
   27ebc:	01500150 01500150 014f0150 014f014f     P.P.P.P.P.O.O.O.
   27ecc:	014f014f 014f014f 014f014f 014e014e     O.O.O.O.O.O.N.N.
   27edc:	014e014e 014e014e 014e014e 014d014e     N.N.N.N.N.N.N.M.
   27eec:	014d014d 014d014d 014d014d 014d014d     M.M.M.M.M.M.M.M.
   27efc:	014c014c 014c014c 014c014c 014c014c     L.L.L.L.L.L.L.L.
   27f0c:	014b014c 014b014b 014b014b 014b014b     L.K.K.K.K.K.K.K.
   27f1c:	014b014b 014a014a 014a014a 014a014a     K.K.J.J.J.J.J.J.
   27f2c:	014a014a 0149014a 01490149 01490149     J.J.J.I.I.I.I.I.
   27f3c:	01490149 01490149 01480149 01480148     I.I.I.I.I.H.H.H.
   27f4c:	01480148 01480148 01480148 01470147     H.H.H.H.H.H.G.G.
   27f5c:	01470147 01470147 01470147 01460147     G.G.G.G.G.G.G.F.
   27f6c:	01460146 01460146 01460146 01460146     F.F.F.F.F.F.F.F.
   27f7c:	01450146 01450145 01450145 01450145     F.E.E.E.E.E.E.E.
   27f8c:	01450145 01440144 01440144 01440144     E.E.D.D.D.D.D.D.
   27f9c:	01440144 01440144 01430143 01430143     D.D.D.D.C.C.C.C.
   27fac:	01430143 01430143 01420143 01420142     C.C.C.C.C.B.B.B.
   27fbc:	01420142 01420142 01420142 01410142     B.B.B.B.B.B.B.A.
   27fcc:	01410141 01410141 01410141 01410141     A.A.A.A.A.A.A.A.
   27fdc:	01400141 01400140 01400140 01400140     A.@.@.@.@.@.@.@.
   27fec:	01400140 013f013f 013f013f 013f013f     @.@.?.?.?.?.?.?.
   27ffc:	013f013f 013f013f 013e013e 013e013e     ?.?.?.?.>.>.>.>.
   2800c:	013e013e 013e013e 013e013e 013d013d     >.>.>.>.>.>.=.=.
   2801c:	013d013d 013d013d 013d013d 013d013d     =.=.=.=.=.=.=.=.
   2802c:	013c013c 013c013c 013c013c 013c013c     <.<.<.<.<.<.<.<.
   2803c:	013c013c 013b013b 013b013b 013b013b     <.<.;.;.;.;.;.;.
   2804c:	013b013b 013b013b 013a013a 013a013a     ;.;.;.;.:.:.:.:.
   2805c:	013a013a 013a013a 013a013a 01390139     :.:.:.:.:.:.9.9.
   2806c:	01390139 01390139 01390139 01390139     9.9.9.9.9.9.9.9.
   2807c:	01380139 01380138 01380138 01380138     9.8.8.8.8.8.8.8.
   2808c:	01380138 01370138 01370137 01370137     8.8.8.7.7.7.7.7.
   2809c:	01370137 01370137 01360137 01360136     7.7.7.7.7.6.6.6.
   280ac:	01360136 01360136 01360136 01360136     6.6.6.6.6.6.6.6.
   280bc:	01350135 01350135 01350135 01350135     5.5.5.5.5.5.5.5.
   280cc:	01350135 01340134 01340134 01340134     5.5.4.4.4.4.4.4.
   280dc:	01340134 01340134 01330134 01330133     4.4.4.4.4.3.3.3.
   280ec:	01330133 01330133 01330133 01320133     3.3.3.3.3.3.3.2.
   280fc:	01320132 01320132 01320132 01320132     2.2.2.2.2.2.2.2.
   2810c:	01320132 01310131 01310131 01310131     2.2.1.1.1.1.1.1.
   2811c:	01310131 01310131 01300131 01300130     1.1.1.1.1.0.0.0.
   2812c:	01300130 01300130 01300130 012f0130     0.0.0.0.0.0.0./.
   2813c:	012f012f 012f012f 012f012f 012f012f     /./././././././.
   2814c:	012f012f 012e012e 012e012e 012e012e     /./.............
   2815c:	012e012e 012e012e 012d012e 012d012d     ..........-.-.-.
   2816c:	012d012d 012d012d 012d012d 012d012d     -.-.-.-.-.-.-.-.
   2817c:	012c012c 012c012c 012c012c 012c012c     ,.,.,.,.,.,.,.,.
   2818c:	012c012c 012b012c 012b012b 012b012b     ,.,.,.+.+.+.+.+.
   2819c:	012b012b 012b012b 012b012b 012a012b     +.+.+.+.+.+.+.*.
   281ac:	012a012a 012a012a 012a012a 012a012a     *.*.*.*.*.*.*.*.
   281bc:	012a012a 01290129 01290129 01290129     *.*.).).).).).).
   281cc:	01290129 01290129 01280129 01280128     ).).).).).(.(.(.
   281dc:	01280128 01280128 01280128 01280128     (.(.(.(.(.(.(.(.
   281ec:	01270128 01270127 01270127 01270127     (.'.'.'.'.'.'.'.
   281fc:	01270127 01270127 01260126 01260126     '.'.'.'.&.&.&.&.
   2820c:	01260126 01260126 01260126 01260126     &.&.&.&.&.&.&.&.
   2821c:	01250125 01250125 01250125 01250125     %.%.%.%.%.%.%.%.
   2822c:	01250125 01240125 01240124 01240124     %.%.%.$.$.$.$.$.
   2823c:	01240124 01240124 01240124 01230124     $.$.$.$.$.$.$.#.
   2824c:	01230123 01230123 01230123 01230123     #.#.#.#.#.#.#.#.
   2825c:	01230123 01220123 01220122 01220122     #.#.#.".".".".".
   2826c:	01220122 01220122 01220122 01210122     ".".".".".".".!.
   2827c:	01210121 01210121 01210121 01210121     !.!.!.!.!.!.!.!.
   2828c:	01210121 01200121 01200120 01200120     !.!.!. . . . . .
   2829c:	01200120 01200120 01200120 011f0120      . . . . . . ...
   282ac:	011f011f 011f011f 011f011f 011f011f     ................
   282bc:	011f011f 011e011f 011e011e 011e011e     ................
   282cc:	011e011e 011e011e 011e011e 011d011e     ................
   282dc:	011d011d 011d011d 011d011d 011d011d     ................
   282ec:	011d011d 011c011d 011c011c 011c011c     ................
   282fc:	011c011c 011c011c 011c011c 011c011c     ................
   2830c:	011b011b 011b011b 011b011b 011b011b     ................
   2831c:	011b011b 011b011b 011a011a 011a011a     ................
   2832c:	011a011a 011a011a 011a011a 011a011a     ................
   2833c:	0119011a 01190119 01190119 01190119     ................
   2834c:	01190119 01190119 01190119 01180118     ................
   2835c:	01180118 01180118 01180118 01180118     ................
   2836c:	01180118 01170117 01170117 01170117     ................
   2837c:	01170117 01170117 01170117 01160117     ................
   2838c:	01160116 01160116 01160116 01160116     ................
   2839c:	01160116 01160116 01150115 01150115     ................
   283ac:	01150115 01150115 01150115 01150115     ................
   283bc:	01140115 01140114 01140114 01140114     ................
   283cc:	01140114 01140114 01140114 01130113     ................
   283dc:	01130113 01130113 01130113 01130113     ................
   283ec:	01130113 01120113 01120112 01120112     ................
   283fc:	01120112 01120112 01120112 01120112     ................
   2840c:	01110112 01110111 01110111 01110111     ................
   2841c:	01110111 01110111 01110111 01100110     ................
   2842c:	01100110 01100110 01100110 01100110     ................
   2843c:	01100110 01100110 010f010f 010f010f     ................
   2844c:	010f010f 010f010f 010f010f 010f010f     ................
   2845c:	010e010f 010e010e 010e010e 010e010e     ................
   2846c:	010e010e 010e010e 010e010e 010d010e     ................
   2847c:	010d010d 010d010d 010d010d 010d010d     ................
   2848c:	010d010d 010d010d 010c010d 010c010c     ................
   2849c:	010c010c 010c010c 010c010c 010c010c     ................
   284ac:	010c010c 010b010c 010b010b 010b010b     ................
   284bc:	010b010b 010b010b 010b010b 010b010b     ................
   284cc:	010a010b 010a010a 010a010a 010a010a     ................
   284dc:	010a010a 010a010a 010a010a 0109010a     ................
   284ec:	01090109 01090109 01090109 01090109     ................
   284fc:	01090109 01090109 01080109 01080108     ................
   2850c:	01080108 01080108 01080108 01080108     ................
   2851c:	01080108 01080108 01070107 01070107     ................
   2852c:	01070107 01070107 01070107 01070107     ................
   2853c:	01070107 01060106 01060106 01060106     ................
   2854c:	01060106 01060106 01060106 01060106     ................
   2855c:	01050106 01050105 01050105 01050105     ................
   2856c:	01050105 01050105 01050105 01040105     ................
   2857c:	01040104 01040104 01040104 01040104     ................
   2858c:	01040104 01040104 01040104 01030103     ................
   2859c:	01030103 01030103 01030103 01030103     ................
   285ac:	01030103 01030103 01020103 01020102     ................
   285bc:	01020102 01020102 01020102 01020102     ................
   285cc:	01020102 01020102 01010101 01010101     ................
   285dc:	01010101 01010101 01010101 01010101     ................
   285ec:	01010101 01000101 01000100 01000100     ................
   285fc:	01000100 01000100 01000100 01000100     ................
   2860c:	01000100 00ff00ff 00ff00ff 00ff00ff     ................
   2861c:	00ff00ff 00ff00ff 00ff00ff 00ff00ff     ................
   2862c:	00ff00ff 00fe00fe 00fe00fe 00fe00fe     ................
   2863c:	00fe00fe 00fe00fe 00fe00fe 00fe00fe     ................
   2864c:	00fd00fe 00fd00fd 00fd00fd 00fd00fd     ................
   2865c:	00fd00fd 00fd00fd 00fd00fd 00fd00fd     ................
   2866c:	00fc00fd 00fc00fc 00fc00fc 00fc00fc     ................
   2867c:	00fc00fc 00fc00fc 00fc00fc 00fc00fc     ................
   2868c:	00fb00fc 00fb00fb 00fb00fb 00fb00fb     ................
   2869c:	00fb00fb 00fb00fb 00fb00fb 00fb00fb     ................
   286ac:	00fa00fb 00fa00fa 00fa00fa 00fa00fa     ................
   286bc:	00fa00fa 00fa00fa 00fa00fa 00fa00fa     ................
   286cc:	00f900fa 00f900f9 00f900f9 00f900f9     ................
   286dc:	00f900f9 00f900f9 00f900f9 00f900f9     ................
   286ec:	00f800f9 00f800f8 00f800f8 00f800f8     ................
   286fc:	00f800f8 00f800f8 00f800f8 00f800f8     ................
   2870c:	00f700f8 00f700f7 00f700f7 00f700f7     ................
   2871c:	00f700f7 00f700f7 00f700f7 00f700f7     ................
   2872c:	00f600f7 00f600f6 00f600f6 00f600f6     ................
   2873c:	00f600f6 00f600f6 00f600f6 00f600f6     ................
   2874c:	00f600f6 00f500f5 00f500f5 00f500f5     ................
   2875c:	00f500f5 00f500f5 00f500f5 00f500f5     ................
   2876c:	00f500f5 00f400f4 00f400f4 00f400f4     ................
   2877c:	00f400f4 00f400f4 00f400f4 00f400f4     ................
   2878c:	00f400f4 00f300f4 00f300f3 00f300f3     ................
   2879c:	00f300f3 00f300f3 00f300f3 00f300f3     ................
   287ac:	00f300f3 00f300f3 00f200f2 00f200f2     ................
   287bc:	00f200f2 00f200f2 00f200f2 00f200f2     ................
   287cc:	00f200f2 00f200f2 00f100f2 00f100f1     ................
   287dc:	00f100f1 00f100f1 00f100f1 00f100f1     ................
   287ec:	00f100f1 00f100f1 00f100f1 00f000f1     ................
   287fc:	00f000f0 00f000f0 00f000f0 00f000f0     ................
   2880c:	00f000f0 00f000f0 00f000f0 00f000f0     ................
   2881c:	00ef00ef 00ef00ef 00ef00ef 00ef00ef     ................
   2882c:	00ef00ef 00ef00ef 00ef00ef 00ef00ef     ................
   2883c:	00ee00ef 00ee00ee 00ee00ee 00ee00ee     ................
   2884c:	00ee00ee 00ee00ee 00ee00ee 00ee00ee     ................
   2885c:	00ee00ee 00ed00ee 00ed00ed 00ed00ed     ................
   2886c:	00ed00ed 00ed00ed 00ed00ed 00ed00ed     ................
   2887c:	00ed00ed 00ed00ed 00ec00ed 00ec00ec     ................
   2888c:	00ec00ec 00ec00ec 00ec00ec 00ec00ec     ................
   2889c:	00ec00ec 00ec00ec 00ec00ec 00eb00ec     ................
   288ac:	00eb00eb 00eb00eb 00eb00eb 00eb00eb     ................
   288bc:	00eb00eb 00eb00eb 00eb00eb 00eb00eb     ................
   288cc:	00ea00eb 00ea00ea 00ea00ea 00ea00ea     ................
   288dc:	00ea00ea 00ea00ea 00ea00ea 00ea00ea     ................
   288ec:	00ea00ea 00e900ea 00e900e9 00e900e9     ................
   288fc:	00e900e9 00e900e9 00e900e9 00e900e9     ................
   2890c:	00e900e9 00e900e9 00e900e9 00e800e8     ................
   2891c:	00e800e8 00e800e8 00e800e8 00e800e8     ................
   2892c:	00e800e8 00e800e8 00e800e8 00e800e8     ................
   2893c:	00e700e7 00e700e7 00e700e7 00e700e7     ................
   2894c:	00e700e7 00e700e7 00e700e7 00e700e7     ................
   2895c:	00e700e7 00e600e7 00e600e6 00e600e6     ................
   2896c:	00e600e6 00e600e6 00e600e6 00e600e6     ................
   2897c:	00e600e6 00e600e6 00e600e6 00e500e5     ................
   2898c:	00e500e5 00e500e5 00e500e5 00e500e5     ................
   2899c:	00e500e5 00e500e5 00e500e5 00e500e5     ................
   289ac:	00e400e5 00e400e4 00e400e4 00e400e4     ................
   289bc:	00e400e4 00e400e4 00e400e4 00e400e4     ................
   289cc:	00e400e4 00e400e4 00e300e3 00e300e3     ................
   289dc:	00e300e3 00e300e3 00e300e3 00e300e3     ................
   289ec:	00e300e3 00e300e3 00e300e3 00e300e3     ................
   289fc:	00e200e2 00e200e2 00e200e2 00e200e2     ................
   28a0c:	00e200e2 00e200e2 00e200e2 00e200e2     ................
   28a1c:	00e200e2 00e100e2 00e100e1 00e100e1     ................
   28a2c:	00e100e1 00e100e1 00e100e1 00e100e1     ................
   28a3c:	00e100e1 00e100e1 00e100e1 00e000e1     ................
   28a4c:	00e000e0 00e000e0 00e000e0 00e000e0     ................
   28a5c:	00e000e0 00e000e0 00e000e0 00e000e0     ................
   28a6c:	00e000e0 00df00e0 00df00df 00df00df     ................
   28a7c:	00df00df 00df00df 00df00df 00df00df     ................
   28a8c:	00df00df 00df00df 00df00df 00de00df     ................
   28a9c:	00de00de 00de00de 00de00de 00de00de     ................
   28aac:	00de00de 00de00de 00de00de 00de00de     ................
   28abc:	00de00de 00dd00de 00dd00dd 00dd00dd     ................
   28acc:	00dd00dd 00dd00dd 00dd00dd 00dd00dd     ................
   28adc:	00dd00dd 00dd00dd 00dd00dd 00dd00dd     ................
   28aec:	00dc00dc 00dc00dc 00dc00dc 00dc00dc     ................
   28afc:	00dc00dc 00dc00dc 00dc00dc 00dc00dc     ................
   28b0c:	00dc00dc 00dc00dc 00db00db 00db00db     ................
   28b1c:	00db00db 00db00db 00db00db 00db00db     ................
   28b2c:	00db00db 00db00db 00db00db 00db00db     ................
   28b3c:	00da00db 00da00da 00da00da 00da00da     ................
   28b4c:	00da00da 00da00da 00da00da 00da00da     ................
   28b5c:	00da00da 00da00da 00da00da 00d900d9     ................
   28b6c:	00d900d9 00d900d9 00d900d9 00d900d9     ................
   28b7c:	00d900d9 00d900d9 00d900d9 00d900d9     ................
   28b8c:	00d900d9 00d800d9 00d800d8 00d800d8     ................
   28b9c:	00d800d8 00d800d8 00d800d8 00d800d8     ................
   28bac:	00d800d8 00d800d8 00d800d8 00d800d8     ................
   28bbc:	00d700d8 00d700d7 00d700d7 00d700d7     ................
   28bcc:	00d700d7 00d700d7 00d700d7 00d700d7     ................
   28bdc:	00d700d7 00d700d7 00d700d7 00d600d7     ................
   28bec:	00d600d6 00d600d6 00d600d6 00d600d6     ................
   28bfc:	00d600d6 00d600d6 00d600d6 00d600d6     ................
   28c0c:	00d600d6 00d600d6 00d500d5 00d500d5     ................
   28c1c:	00d500d5 00d500d5 00d500d5 00d500d5     ................
   28c2c:	00d500d5 00d500d5 00d500d5 00d500d5     ................
   28c3c:	00d500d5 00d400d4 00d400d4 00d400d4     ................
   28c4c:	00d400d4 00d400d4 00d400d4 00d400d4     ................
   28c5c:	00d400d4 00d400d4 00d400d4 00d400d4     ................
   28c6c:	00d300d4 00d300d3 00d300d3 00d300d3     ................
   28c7c:	00d300d3 00d300d3 00d300d3 00d300d3     ................
   28c8c:	00d300d3 00d300d3 00d300d3 00d200d3     ................
   28c9c:	00d200d2 00d200d2 00d200d2 00d200d2     ................
   28cac:	00d200d2 00d200d2 00d200d2 00d200d2     ................
   28cbc:	00d200d2 00d200d2 00d200d2 00d100d1     ................
   28ccc:	00d100d1 00d100d1 00d100d1 00d100d1     ................
   28cdc:	00d100d1 00d100d1 00d100d1 00d100d1     ................
   28cec:	00d100d1 00d100d1 00d000d1 00d000d0     ................
   28cfc:	00d000d0 00d000d0 00d000d0 00d000d0     ................
   28d0c:	00d000d0 00d000d0 00d000d0 00d000d0     ................
   28d1c:	00d000d0 00d000d0 00cf00cf 00cf00cf     ................
   28d2c:	00cf00cf 00cf00cf 00cf00cf 00cf00cf     ................
   28d3c:	00cf00cf 00cf00cf 00cf00cf 00cf00cf     ................
   28d4c:	00cf00cf 00ce00cf 00ce00ce 00ce00ce     ................
   28d5c:	00ce00ce 00ce00ce 00ce00ce 00ce00ce     ................
   28d6c:	00ce00ce 00ce00ce 00ce00ce 00ce00ce     ................
   28d7c:	00ce00ce 00cd00ce 00cd00cd 00cd00cd     ................
   28d8c:	00cd00cd 00cd00cd 00cd00cd 00cd00cd     ................
   28d9c:	00cd00cd 00cd00cd 00cd00cd 00cd00cd     ................
   28dac:	00cd00cd 00cc00cc 00cc00cc 00cc00cc     ................
   28dbc:	00cc00cc 00cc00cc 00cc00cc 00cc00cc     ................
   28dcc:	00cc00cc 00cc00cc 00cc00cc 00cc00cc     ................
   28ddc:	00cc00cc 00cb00cc 00cb00cb 00cb00cb     ................
   28dec:	00cb00cb 00cb00cb 00cb00cb 00cb00cb     ................
   28dfc:	00cb00cb 00cb00cb 00cb00cb 00cb00cb     ................
   28e0c:	00cb00cb 00ca00cb 00ca00ca 00ca00ca     ................
   28e1c:	00ca00ca 00ca00ca 00ca00ca 00ca00ca     ................
   28e2c:	00ca00ca 00ca00ca 00ca00ca 00ca00ca     ................
   28e3c:	00ca00ca 00c900ca 00c900c9 00c900c9     ................
   28e4c:	00c900c9 00c900c9 00c900c9 00c900c9     ................
   28e5c:	00c900c9 00c900c9 00c900c9 00c900c9     ................
   28e6c:	00c900c9 00c900c9 00c800c8 00c800c8     ................
   28e7c:	00c800c8 00c800c8 00c800c8 00c800c8     ................
   28e8c:	00c800c8 00c800c8 00c800c8 00c800c8     ................
   28e9c:	00c800c8 00c800c8 00c700c8 00c700c7     ................
   28eac:	00c700c7 00c700c7 00c700c7 00c700c7     ................
   28ebc:	00c700c7 00c700c7 00c700c7 00c700c7     ................
   28ecc:	00c700c7 00c700c7 00c700c7 00c600c6     ................
   28edc:	00c600c6 00c600c6 00c600c6 00c600c6     ................
   28eec:	00c600c6 00c600c6 00c600c6 00c600c6     ................
   28efc:	00c600c6 00c600c6 00c600c6 00c600c6     ................
   28f0c:	00c500c5 00c500c5 00c500c5 00c500c5     ................
   28f1c:	00c500c5 00c500c5 00c500c5 00c500c5     ................
   28f2c:	00c500c5 00c500c5 00c500c5 00c500c5     ................
   28f3c:	00c500c5 00c400c4 00c400c4 00c400c4     ................
   28f4c:	00c400c4 00c400c4 00c400c4 00c400c4     ................
   28f5c:	00c400c4 00c400c4 00c400c4 00c400c4     ................
   28f6c:	00c400c4 00c400c4 00c300c3 00c300c3     ................
   28f7c:	00c300c3 00c300c3 00c300c3 00c300c3     ................
   28f8c:	00c300c3 00c300c3 00c300c3 00c300c3     ................
   28f9c:	00c300c3 00c300c3 00c300c3 00c200c2     ................
   28fac:	00c200c2 00c200c2 00c200c2 00c200c2     ................
   28fbc:	00c200c2 00c200c2 00c200c2 00c200c2     ................
   28fcc:	00c200c2 00c200c2 00c200c2 00c200c2     ................
   28fdc:	00c100c1 00c100c1 00c100c1 00c100c1     ................
   28fec:	00c100c1 00c100c1 00c100c1 00c100c1     ................
   28ffc:	00c100c1 00c100c1 00c100c1 00c100c1     ................
   2900c:	00c100c1 00c000c1 00c000c0 00c000c0     ................
   2901c:	00c000c0 00c000c0 00c000c0 00c000c0     ................
   2902c:	00c000c0 00c000c0 00c000c0 00c000c0     ................
   2903c:	00c000c0 00c000c0 00c000c0 00bf00bf     ................
   2904c:	00bf00bf 00bf00bf 00bf00bf 00bf00bf     ................
   2905c:	00bf00bf 00bf00bf 00bf00bf 00bf00bf     ................
   2906c:	00bf00bf 00bf00bf 00bf00bf 00bf00bf     ................
   2907c:	00bf00bf 00be00be 00be00be 00be00be     ................
   2908c:	00be00be 00be00be 00be00be 00be00be     ................
   2909c:	00be00be 00be00be 00be00be 00be00be     ................
   290ac:	00be00be 00be00be 00be00be 00bd00bd     ................
   290bc:	00bd00bd 00bd00bd 00bd00bd 00bd00bd     ................
   290cc:	00bd00bd 00bd00bd 00bd00bd 00bd00bd     ................
   290dc:	00bd00bd 00bd00bd 00bd00bd 00bd00bd     ................
   290ec:	00bd00bd 00bc00bc 00bc00bc 00bc00bc     ................
   290fc:	00bc00bc 00bc00bc 00bc00bc 00bc00bc     ................
   2910c:	00bc00bc 00bc00bc 00bc00bc 00bc00bc     ................
   2911c:	00bc00bc 00bc00bc 00bc00bc 00bb00bb     ................
   2912c:	00bb00bb 00bb00bb 00bb00bb 00bb00bb     ................
   2913c:	00bb00bb 00bb00bb 00bb00bb 00bb00bb     ................
   2914c:	00bb00bb 00bb00bb 00bb00bb 00bb00bb     ................
   2915c:	00bb00bb 00ba00ba 00ba00ba 00ba00ba     ................
   2916c:	00ba00ba 00ba00ba 00ba00ba 00ba00ba     ................
   2917c:	00ba00ba 00ba00ba 00ba00ba 00ba00ba     ................
   2918c:	00ba00ba 00ba00ba 00ba00ba 00b900ba     ................
   2919c:	00b900b9 00b900b9 00b900b9 00b900b9     ................
   291ac:	00b900b9 00b900b9 00b900b9 00b900b9     ................
   291bc:	00b900b9 00b900b9 00b900b9 00b900b9     ................
   291cc:	00b900b9 00b900b9 00b800b9 00b800b8     ................
   291dc:	00b800b8 00b800b8 00b800b8 00b800b8     ................
   291ec:	00b800b8 00b800b8 00b800b8 00b800b8     ................
   291fc:	00b800b8 00b800b8 00b800b8 00b800b8     ................
   2920c:	00b800b8 00b700b7 00b700b7 00b700b7     ................
   2921c:	00b700b7 00b700b7 00b700b7 00b700b7     ................
   2922c:	00b700b7 00b700b7 00b700b7 00b700b7     ................
   2923c:	00b700b7 00b700b7 00b700b7 00b700b7     ................
   2924c:	00b600b6 00b600b6 00b600b6 00b600b6     ................
   2925c:	00b600b6 00b600b6 00b600b6 00b600b6     ................
   2926c:	00b600b6 00b600b6 00b600b6 00b600b6     ................
   2927c:	00b600b6 00b600b6 00b600b6 00b500b5     ................
   2928c:	00b500b5 00b500b5 00b500b5 00b500b5     ................
   2929c:	00b500b5 00b500b5 00b500b5 00b500b5     ................
   292ac:	00b500b5 00b500b5 00b500b5 00b500b5     ................
   292bc:	00b500b5 00b500b5 00b400b5 00b400b4     ................
   292cc:	00b400b4 00b400b4 00b400b4 00b400b4     ................
   292dc:	00b400b4 00b400b4 00b400b4 00b400b4     ................
   292ec:	00b400b4 00b400b4 00b400b4 00b400b4     ................
   292fc:	00b400b4 00b400b4 00b300b3 00b300b3     ................
   2930c:	00b300b3 00b300b3 00b300b3 00b300b3     ................
   2931c:	00b300b3 00b300b3 00b300b3 00b300b3     ................
   2932c:	00b300b3 00b300b3 00b300b3 00b300b3     ................
   2933c:	00b300b3 00b200b3 00b200b2 00b200b2     ................
   2934c:	00b200b2 00b200b2 00b200b2 00b200b2     ................
   2935c:	00b200b2 00b200b2 00b200b2 00b200b2     ................
   2936c:	00b200b2 00b200b2 00b200b2 00b200b2     ................
   2937c:	00b200b2 00b100b1 00b100b1 00b100b1     ................
   2938c:	00b100b1 00b100b1 00b100b1 00b100b1     ................
   2939c:	00b100b1 00b100b1 00b100b1 00b100b1     ................
   293ac:	00b100b1 00b100b1 00b100b1 00b100b1     ................
   293bc:	00b100b1 00b000b0 00b000b0 00b000b0     ................
   293cc:	00b000b0 00b000b0 00b000b0 00b000b0     ................
   293dc:	00b000b0 00b000b0 00b000b0 00b000b0     ................
   293ec:	00b000b0 00b000b0 00b000b0 00b000b0     ................
   293fc:	00b000b0 00af00b0 00af00af 00af00af     ................
   2940c:	00af00af 00af00af 00af00af 00af00af     ................
   2941c:	00af00af 00af00af 00af00af 00af00af     ................
   2942c:	00af00af 00af00af 00af00af 00af00af     ................
   2943c:	00af00af 00ae00af 00ae00ae 00ae00ae     ................
   2944c:	00ae00ae 00ae00ae 00ae00ae 00ae00ae     ................
   2945c:	00ae00ae 00ae00ae 00ae00ae 00ae00ae     ................
   2946c:	00ae00ae 00ae00ae 00ae00ae 00ae00ae     ................
   2947c:	00ae00ae 00ae00ae 00ad00ad 00ad00ad     ................
   2948c:	00ad00ad 00ad00ad 00ad00ad 00ad00ad     ................
   2949c:	00ad00ad 00ad00ad 00ad00ad 00ad00ad     ................
   294ac:	00ad00ad 00ad00ad 00ad00ad 00ad00ad     ................
   294bc:	00ad00ad 00ad00ad 00ad00ad 00ac00ac     ................
   294cc:	00ac00ac 00ac00ac 00ac00ac 00ac00ac     ................
   294dc:	00ac00ac 00ac00ac 00ac00ac 00ac00ac     ................
   294ec:	00ac00ac 00ac00ac 00ac00ac 00ac00ac     ................
   294fc:	00ac00ac 00ac00ac 00ac00ac 00ab00ac     ................
   2950c:	00ab00ab 00ab00ab 00ab00ab 00ab00ab     ................
   2951c:	00ab00ab 00ab00ab 00ab00ab 00ab00ab     ................
   2952c:	00ab00ab 00ab00ab 00ab00ab 00ab00ab     ................
   2953c:	00ab00ab 00ab00ab 00ab00ab 00ab00ab     ................
   2954c:	00ab00ab 00aa00aa 00aa00aa 00aa00aa     ................
   2955c:	00aa00aa 00aa00aa 00aa00aa 00aa00aa     ................
   2956c:	00aa00aa 00aa00aa 00aa00aa 00aa00aa     ................
   2957c:	00aa00aa 00aa00aa 00aa00aa 00aa00aa     ................
   2958c:	00aa00aa 00aa00aa 00a900a9 00a900a9     ................
   2959c:	00a900a9 00a900a9 00a900a9 00a900a9     ................
   295ac:	00a900a9 00a900a9 00a900a9 00a900a9     ................
   295bc:	00a900a9 00a900a9 00a900a9 00a900a9     ................
   295cc:	00a900a9 00a900a9 00a900a9 00a800a9     ................
   295dc:	00a800a8 00a800a8 00a800a8 00a800a8     ................
   295ec:	00a800a8 00a800a8 00a800a8 00a800a8     ................
   295fc:	00a800a8 00a800a8 00a800a8 00a800a8     ................
   2960c:	00a800a8 00a800a8 00a800a8 00a800a8     ................
   2961c:	00a800a8 00a700a8 00a700a7 00a700a7     ................
   2962c:	00a700a7 00a700a7 00a700a7 00a700a7     ................
   2963c:	00a700a7 00a700a7 00a700a7 00a700a7     ................
   2964c:	00a700a7 00a700a7 00a700a7 00a700a7     ................
   2965c:	00a700a7 00a700a7 00a700a7 00a600a7     ................
   2966c:	00a600a6 00a600a6 00a600a6 00a600a6     ................
   2967c:	00a600a6 00a600a6 00a600a6 00a600a6     ................
   2968c:	00a600a6 00a600a6 00a600a6 00a600a6     ................
   2969c:	00a600a6 00a600a6 00a600a6 00a600a6     ................
   296ac:	00a600a6 00a500a6 00a500a5 00a500a5     ................
   296bc:	00a500a5 00a500a5 00a500a5 00a500a5     ................
   296cc:	00a500a5 00a500a5 00a500a5 00a500a5     ................
   296dc:	00a500a5 00a500a5 00a500a5 00a500a5     ................
   296ec:	00a500a5 00a500a5 00a500a5 00a500a5     ................
   296fc:	00a400a4 00a400a4 00a400a4 00a400a4     ................
   2970c:	00a400a4 00a400a4 00a400a4 00a400a4     ................
   2971c:	00a400a4 00a400a4 00a400a4 00a400a4     ................
   2972c:	00a400a4 00a400a4 00a400a4 00a400a4     ................
   2973c:	00a400a4 00a400a4 00a300a4 00a300a3     ................
   2974c:	00a300a3 00a300a3 00a300a3 00a300a3     ................
   2975c:	00a300a3 00a300a3 00a300a3 00a300a3     ................
   2976c:	00a300a3 00a300a3 00a300a3 00a300a3     ................
   2977c:	00a300a3 00a300a3 00a300a3 00a300a3     ................
   2978c:	00a300a3 00a200a2 00a200a2 00a200a2     ................
   2979c:	00a200a2 00a200a2 00a200a2 00a200a2     ................
   297ac:	00a200a2 00a200a2 00a200a2 00a200a2     ................
   297bc:	00a200a2 00a200a2 00a200a2 00a200a2     ................
   297cc:	00a200a2 00a200a2 00a200a2 00a200a2     ................
   297dc:	00a100a1 00a100a1 00a100a1 00a100a1     ................
   297ec:	00a100a1 00a100a1 00a100a1 00a100a1     ................
   297fc:	00a100a1 00a100a1 00a100a1 00a100a1     ................
   2980c:	00a100a1 00a100a1 00a100a1 00a100a1     ................
   2981c:	00a100a1 00a100a1 00a100a1 00a000a1     ................
   2982c:	00a000a0 00a000a0 00a000a0 00a000a0     ................
   2983c:	00a000a0 00a000a0 00a000a0 00a000a0     ................
   2984c:	00a000a0 00a000a0 00a000a0 00a000a0     ................
   2985c:	00a000a0 00a000a0 00a000a0 00a000a0     ................
   2986c:	00a000a0 00a000a0 00a000a0 009f009f     ................
   2987c:	009f009f 009f009f 009f009f 009f009f     ................
   2988c:	009f009f 009f009f 009f009f 009f009f     ................
   2989c:	009f009f 009f009f 009f009f 009f009f     ................
   298ac:	009f009f 009f009f 009f009f 009f009f     ................
   298bc:	009f009f 009f009f 009f009f 009e009e     ................
   298cc:	009e009e 009e009e 009e009e 009e009e     ................
   298dc:	009e009e 009e009e 009e009e 009e009e     ................
   298ec:	009e009e 009e009e 009e009e 009e009e     ................
   298fc:	009e009e 009e009e 009e009e 009e009e     ................
   2990c:	009e009e 009e009e 009e009e 009d009d     ................
   2991c:	009d009d 009d009d 009d009d 009d009d     ................
   2992c:	009d009d 009d009d 009d009d 009d009d     ................
   2993c:	009d009d 009d009d 009d009d 009d009d     ................
   2994c:	009d009d 009d009d 009d009d 009d009d     ................
   2995c:	009d009d 009d009d 009d009d 009c009c     ................
   2996c:	009c009c 009c009c 009c009c 009c009c     ................
   2997c:	009c009c 009c009c 009c009c 009c009c     ................
   2998c:	009c009c 009c009c 009c009c 009c009c     ................
   2999c:	009c009c 009c009c 009c009c 009c009c     ................
   299ac:	009c009c 009c009c 009c009c 009b009c     ................
   299bc:	009b009b 009b009b 009b009b 009b009b     ................
   299cc:	009b009b 009b009b 009b009b 009b009b     ................
   299dc:	009b009b 009b009b 009b009b 009b009b     ................
   299ec:	009b009b 009b009b 009b009b 009b009b     ................
   299fc:	009b009b 009b009b 009b009b 009b009b     ................
   29a0c:	009a009b 009a009a 009a009a 009a009a     ................
   29a1c:	009a009a 009a009a 009a009a 009a009a     ................
   29a2c:	009a009a 009a009a 009a009a 009a009a     ................
   29a3c:	009a009a 009a009a 009a009a 009a009a     ................
   29a4c:	009a009a 009a009a 009a009a 009a009a     ................
   29a5c:	009a009a 0099009a 00990099 00990099     ................
   29a6c:	00990099 00990099 00990099 00990099     ................
   29a7c:	00990099 00990099 00990099 00990099     ................
   29a8c:	00990099 00990099 00990099 00990099     ................
   29a9c:	00990099 00990099 00990099 00990099     ................
   29aac:	00990099 00990099 00990099 00980098     ................
   29abc:	00980098 00980098 00980098 00980098     ................
   29acc:	00980098 00980098 00980098 00980098     ................
   29adc:	00980098 00980098 00980098 00980098     ................
   29aec:	00980098 00980098 00980098 00980098     ................
   29afc:	00980098 00980098 00980098 00980098     ................
   29b0c:	00970098 00970097 00970097 00970097     ................
   29b1c:	00970097 00970097 00970097 00970097     ................
   29b2c:	00970097 00970097 00970097 00970097     ................
   29b3c:	00970097 00970097 00970097 00970097     ................
   29b4c:	00970097 00970097 00970097 00970097     ................
   29b5c:	00970097 00970097 00960097 00960096     ................
   29b6c:	00960096 00960096 00960096 00960096     ................
   29b7c:	00960096 00960096 00960096 00960096     ................
   29b8c:	00960096 00960096 00960096 00960096     ................
   29b9c:	00960096 00960096 00960096 00960096     ................
   29bac:	00960096 00960096 00960096 00960096     ................
   29bbc:	00950096 00950095 00950095 00950095     ................
   29bcc:	00950095 00950095 00950095 00950095     ................
   29bdc:	00950095 00950095 00950095 00950095     ................
   29bec:	00950095 00950095 00950095 00950095     ................
   29bfc:	00950095 00950095 00950095 00950095     ................
   29c0c:	00950095 00950095 00950095 00940095     ................
   29c1c:	00940094 00940094 00940094 00940094     ................
   29c2c:	00940094 00940094 00940094 00940094     ................
   29c3c:	00940094 00940094 00940094 00940094     ................
   29c4c:	00940094 00940094 00940094 00940094     ................
   29c5c:	00940094 00940094 00940094 00940094     ................
   29c6c:	00940094 00940094 00930093 00930093     ................
   29c7c:	00930093 00930093 00930093 00930093     ................
   29c8c:	00930093 00930093 00930093 00930093     ................
   29c9c:	00930093 00930093 00930093 00930093     ................
   29cac:	00930093 00930093 00930093 00930093     ................
   29cbc:	00930093 00930093 00930093 00930093     ................
   29ccc:	00930093 00920092 00920092 00920092     ................
   29cdc:	00920092 00920092 00920092 00920092     ................
   29cec:	00920092 00920092 00920092 00920092     ................
   29cfc:	00920092 00920092 00920092 00920092     ................
   29d0c:	00920092 00920092 00920092 00920092     ................
   29d1c:	00920092 00920092 00920092 00920092     ................
   29d2c:	00910092 00910091 00910091 00910091     ................
   29d3c:	00910091 00910091 00910091 00910091     ................
   29d4c:	00910091 00910091 00910091 00910091     ................
   29d5c:	00910091 00910091 00910091 00910091     ................
   29d6c:	00910091 00910091 00910091 00910091     ................
   29d7c:	00910091 00910091 00910091 00910091     ................
   29d8c:	00900091 00900090 00900090 00900090     ................
   29d9c:	00900090 00900090 00900090 00900090     ................
   29dac:	00900090 00900090 00900090 00900090     ................
   29dbc:	00900090 00900090 00900090 00900090     ................
   29dcc:	00900090 00900090 00900090 00900090     ................
   29ddc:	00900090 00900090 00900090 00900090     ................
   29dec:	008f0090 008f008f 008f008f 008f008f     ................
   29dfc:	008f008f 008f008f 008f008f 008f008f     ................
   29e0c:	008f008f 008f008f 008f008f 008f008f     ................
   29e1c:	008f008f 008f008f 008f008f 008f008f     ................
   29e2c:	008f008f 008f008f 008f008f 008f008f     ................
   29e3c:	008f008f 008f008f 008f008f 008f008f     ................
   29e4c:	008f008f 008e008e 008e008e 008e008e     ................
   29e5c:	008e008e 008e008e 008e008e 008e008e     ................
   29e6c:	008e008e 008e008e 008e008e 008e008e     ................
   29e7c:	008e008e 008e008e 008e008e 008e008e     ................
   29e8c:	008e008e 008e008e 008e008e 008e008e     ................
   29e9c:	008e008e 008e008e 008e008e 008e008e     ................
   29eac:	008e008e 008e008e 008d008d 008d008d     ................
   29ebc:	008d008d 008d008d 008d008d 008d008d     ................
   29ecc:	008d008d 008d008d 008d008d 008d008d     ................
   29edc:	008d008d 008d008d 008d008d 008d008d     ................
   29eec:	008d008d 008d008d 008d008d 008d008d     ................
   29efc:	008d008d 008d008d 008d008d 008d008d     ................
   29f0c:	008d008d 008d008d 008d008d 008c008c     ................
   29f1c:	008c008c 008c008c 008c008c 008c008c     ................
   29f2c:	008c008c 008c008c 008c008c 008c008c     ................
   29f3c:	008c008c 008c008c 008c008c 008c008c     ................
   29f4c:	008c008c 008c008c 008c008c 008c008c     ................
   29f5c:	008c008c 008c008c 008c008c 008c008c     ................
   29f6c:	008c008c 008c008c 008c008c 008c008c     ................
   29f7c:	008b008c 008b008b 008b008b 008b008b     ................
   29f8c:	008b008b 008b008b 008b008b 008b008b     ................
   29f9c:	008b008b 008b008b 008b008b 008b008b     ................
   29fac:	008b008b 008b008b 008b008b 008b008b     ................
   29fbc:	008b008b 008b008b 008b008b 008b008b     ................
   29fcc:	008b008b 008b008b 008b008b 008b008b     ................
   29fdc:	008b008b 008b008b 008a008b 008a008a     ................
   29fec:	008a008a 008a008a 008a008a 008a008a     ................
   29ffc:	008a008a 008a008a 008a008a 008a008a     ................
   2a00c:	008a008a 008a008a 008a008a 008a008a     ................
   2a01c:	008a008a 008a008a 008a008a 008a008a     ................
   2a02c:	008a008a 008a008a 008a008a 008a008a     ................
   2a03c:	008a008a 008a008a 008a008a 008a008a     ................
   2a04c:	0089008a 00890089 00890089 00890089     ................
   2a05c:	00890089 00890089 00890089 00890089     ................
   2a06c:	00890089 00890089 00890089 00890089     ................
   2a07c:	00890089 00890089 00890089 00890089     ................
   2a08c:	00890089 00890089 00890089 00890089     ................
   2a09c:	00890089 00890089 00890089 00890089     ................
   2a0ac:	00890089 00890089 00890089 00880089     ................
   2a0bc:	00880088 00880088 00880088 00880088     ................
   2a0cc:	00880088 00880088 00880088 00880088     ................
   2a0dc:	00880088 00880088 00880088 00880088     ................
   2a0ec:	00880088 00880088 00880088 00880088     ................
   2a0fc:	00880088 00880088 00880088 00880088     ................
   2a10c:	00880088 00880088 00880088 00880088     ................
   2a11c:	00880088 00880088 00870088 00870087     ................
   2a12c:	00870087 00870087 00870087 00870087     ................
   2a13c:	00870087 00870087 00870087 00870087     ................
   2a14c:	00870087 00870087 00870087 00870087     ................
   2a15c:	00870087 00870087 00870087 00870087     ................
   2a16c:	00870087 00870087 00870087 00870087     ................
   2a17c:	00870087 00870087 00870087 00870087     ................
   2a18c:	00870087 00860087 00860086 00860086     ................
   2a19c:	00860086 00860086 00860086 00860086     ................
   2a1ac:	00860086 00860086 00860086 00860086     ................
   2a1bc:	00860086 00860086 00860086 00860086     ................
   2a1cc:	00860086 00860086 00860086 00860086     ................
   2a1dc:	00860086 00860086 00860086 00860086     ................
   2a1ec:	00860086 00860086 00860086 00860086     ................
   2a1fc:	00860086 00850086 00850085 00850085     ................
   2a20c:	00850085 00850085 00850085 00850085     ................
   2a21c:	00850085 00850085 00850085 00850085     ................
   2a22c:	00850085 00850085 00850085 00850085     ................
   2a23c:	00850085 00850085 00850085 00850085     ................
   2a24c:	00850085 00850085 00850085 00850085     ................
   2a25c:	00850085 00850085 00850085 00850085     ................
   2a26c:	00850085 00850085 00840084 00840084     ................
   2a27c:	00840084 00840084 00840084 00840084     ................
   2a28c:	00840084 00840084 00840084 00840084     ................
   2a29c:	00840084 00840084 00840084 00840084     ................
   2a2ac:	00840084 00840084 00840084 00840084     ................
   2a2bc:	00840084 00840084 00840084 00840084     ................
   2a2cc:	00840084 00840084 00840084 00840084     ................
   2a2dc:	00840084 00840084 00830084 00830083     ................
   2a2ec:	00830083 00830083 00830083 00830083     ................
   2a2fc:	00830083 00830083 00830083 00830083     ................
   2a30c:	00830083 00830083 00830083 00830083     ................
   2a31c:	00830083 00830083 00830083 00830083     ................
   2a32c:	00830083 00830083 00830083 00830083     ................
   2a33c:	00830083 00830083 00830083 00830083     ................
   2a34c:	00830083 00830083 00830083 00820083     ................
   2a35c:	00820082 00820082 00820082 00820082     ................
   2a36c:	00820082 00820082 00820082 00820082     ................
   2a37c:	00820082 00820082 00820082 00820082     ................
   2a38c:	00820082 00820082 00820082 00820082     ................
   2a39c:	00820082 00820082 00820082 00820082     ................
   2a3ac:	00820082 00820082 00820082 00820082     ................
   2a3bc:	00820082 00820082 00820082 00820082     ................
   2a3cc:	00820082 00810082 00810081 00810081     ................
   2a3dc:	00810081 00810081 00810081 00810081     ................
   2a3ec:	00810081 00810081 00810081 00810081     ................
   2a3fc:	00810081 00810081 00810081 00810081     ................
   2a40c:	00810081 00810081 00810081 00810081     ................
   2a41c:	00810081 00810081 00810081 00810081     ................
   2a42c:	00810081 00810081 00810081 00810081     ................
   2a43c:	00810081 00810081 00810081 00800081     ................
   2a44c:	00800080 00800080 00800080 00800080     ................
   2a45c:	00800080 00800080 00800080 00800080     ................
   2a46c:	00800080 00800080 00800080 00800080     ................
   2a47c:	00800080 00800080 00800080 00800080     ................
   2a48c:	00800080 00800080 00800080 00800080     ................
   2a49c:	00800080 00800080 00800080 00800080     ................
   2a4ac:	00800080 00800080 00800080 00800080     ................
   2a4bc:	00800080 00800080 007f007f 007f007f     ................
   2a4cc:	007f007f 007f007f 007f007f 007f007f     ................
   2a4dc:	007f007f 007f007f 007f007f 007f007f     ................
   2a4ec:	007f007f 007f007f 007f007f 007f007f     ................
   2a4fc:	007f007f 007f007f 007f007f 007f007f     ................
   2a50c:	007f007f 007f007f 007f007f 007f007f     ................
   2a51c:	007f007f 007f007f 007f007f 007f007f     ................
   2a52c:	007f007f 007f007f 007f007f 007f007f     ................
   2a53c:	007f007f 007e007e 007e007e 007e007e     ....~.~.~.~.~.~.
   2a54c:	007e007e 007e007e 007e007e 007e007e     ~.~.~.~.~.~.~.~.
   2a55c:	007e007e 007e007e 007e007e 007e007e     ~.~.~.~.~.~.~.~.
   2a56c:	007e007e 007e007e 007e007e 007e007e     ~.~.~.~.~.~.~.~.
   2a57c:	007e007e 007e007e 007e007e 007e007e     ~.~.~.~.~.~.~.~.
   2a58c:	007e007e 007e007e 007e007e 007e007e     ~.~.~.~.~.~.~.~.
   2a59c:	007e007e 007e007e 007e007e 007e007e     ~.~.~.~.~.~.~.~.
   2a5ac:	007e007e 007e007e 007e007e 007e007e     ~.~.~.~.~.~.~.~.
   2a5bc:	007d007e 007d007d 007d007d 007d007d     ~.}.}.}.}.}.}.}.
   2a5cc:	007d007d 007d007d 007d007d 007d007d     }.}.}.}.}.}.}.}.
   2a5dc:	007d007d 007d007d 007d007d 007d007d     }.}.}.}.}.}.}.}.
   2a5ec:	007d007d 007d007d 007d007d 007d007d     }.}.}.}.}.}.}.}.
   2a5fc:	007d007d 007d007d 007d007d 007d007d     }.}.}.}.}.}.}.}.
   2a60c:	007d007d 007d007d 007d007d 007d007d     }.}.}.}.}.}.}.}.
   2a61c:	007d007d 007d007d 007d007d 007d007d     }.}.}.}.}.}.}.}.
   2a62c:	007d007d 007d007d 007d007d 007d007d     }.}.}.}.}.}.}.}.
   2a63c:	007c007d 007c007c 007c007c 007c007c     }.|.|.|.|.|.|.|.
   2a64c:	007c007c 007c007c 007c007c 007c007c     |.|.|.|.|.|.|.|.
   2a65c:	007c007c 007c007c 007c007c 007c007c     |.|.|.|.|.|.|.|.
   2a66c:	007c007c 007c007c 007c007c 007c007c     |.|.|.|.|.|.|.|.
   2a67c:	007c007c 007c007c 007c007c 007c007c     |.|.|.|.|.|.|.|.
   2a68c:	007c007c 007c007c 007c007c 007c007c     |.|.|.|.|.|.|.|.
   2a69c:	007c007c 007c007c 007c007c 007c007c     |.|.|.|.|.|.|.|.
   2a6ac:	007c007c 007c007c 007c007c 007c007c     |.|.|.|.|.|.|.|.
   2a6bc:	007c007c 007b007b 007b007b 007b007b     |.|.{.{.{.{.{.{.
   2a6cc:	007b007b 007b007b 007b007b 007b007b     {.{.{.{.{.{.{.{.
   2a6dc:	007b007b 007b007b 007b007b 007b007b     {.{.{.{.{.{.{.{.
   2a6ec:	007b007b 007b007b 007b007b 007b007b     {.{.{.{.{.{.{.{.
   2a6fc:	007b007b 007b007b 007b007b 007b007b     {.{.{.{.{.{.{.{.
   2a70c:	007b007b 007b007b 007b007b 007b007b     {.{.{.{.{.{.{.{.
   2a71c:	007b007b 007b007b 007b007b 007b007b     {.{.{.{.{.{.{.{.
   2a72c:	007b007b 007b007b 007b007b 007b007b     {.{.{.{.{.{.{.{.
   2a73c:	007b007b 007b007b 007a007a 007a007a     {.{.{.{.z.z.z.z.
   2a74c:	007a007a 007a007a 007a007a 007a007a     z.z.z.z.z.z.z.z.
   2a75c:	007a007a 007a007a 007a007a 007a007a     z.z.z.z.z.z.z.z.
   2a76c:	007a007a 007a007a 007a007a 007a007a     z.z.z.z.z.z.z.z.
   2a77c:	73202f2f 64207465 20696769 73746f70     // set digi pots
   2a78c:	206f7420 726f7473 64206465 75616665      to stored defau
   2a79c:	7620746c 65756c61 25282073 64253a73     lt values (%s:%d
   2a7ac:	00000a29 2f637273 6867694d 6f427974     )...src/MightyBo
   2a7bc:	2f647261 68746f4d 6f627265 2f647261     ard/Motherboard/
   2a7cc:	70657453 73726570 0063632e 20646e65     Steppers.cc.end 
   2a7dc:	4920666f 5074696e 20736e69 3a732528     of InitPins (%s:
   2a7ec:	0a296425 00060000                                %d)...

0002a7f2 <eeprom_offsets::DIGI_POT_SETTINGS>:
   2a7f2:	7a7a0006                                         ..

0002a7f4 <rate_table_fast>:
   2a7f4:	797a7a7a 78797979 78787878 77777777     zzzyyyyxxxxxwwww
   2a804:	76767676 75757575 74747475 73737474     vvvvuuuuutttttss
   2a814:	72727373 71727272 71717171 70707070     ssrrrrrqqqqqpppp
   2a824:	6f6f6f70 6e6e6f6f 6d6e6e6e 6d6d6d6d     pooooonnnnnmmmmm
   2a834:	6c6c6c6d 6b6b6c6c 6a6b6b6b 6a6a6a6a     mlllllkkkkkjjjjj
   2a844:	6969696a 68696969 68686868 67676767     jiiiiiihhhhhgggg
   2a854:	66666767 66666666 65656565 64646565     ggffffffeeeeeedd
   2a864:	64646464 63636364 62636363 62626262     dddddccccccbbbbb
   2a874:	61616262 61616161 60606060 5f606060     bbaaaaaa```````_
   2a884:	5f5f5f5f 5e5e5f5f 5e5e5e5e 5d5d5d5e     ______^^^^^^^]]]
   2a894:	5d5d5d5d 5c5c5c5c 5c5c5c5c 5b5b5b5b     ]]]]\\\\\\\\[[[[
   2a8a4:	5a5b5b5b 5a5a5a5a 595a5a5a 59595959     [[[ZZZZZZZZYYYYY
   2a8b4:	58595959 58585858 57585858 57575757     YYYXXXXXXXXWWWWW
   2a8c4:	56575757 56565656 55565656 55555555     WWWVVVVVVVVUUUUU
   2a8d4:	55555555 54545454 54545454 53535354     UUUUTTTTTTTTTSSS
   2a8e4:	53535353 52525353 52525252 51525252     SSSSSSRRRRRRRRRQ
   2a8f4:	51515151 51515151 50505051 50505050     QQQQQQQQQPPPPPPP
   2a904:	4f505050 4f4f4f4f 4f4f4f4f 4e4e4e4f     PPPOOOOOOOOOONNN
   2a914:	4e4e4e4e 4d4e4e4e 4d4d4d4d 4d4d4d4d     NNNNNNNMMMMMMMMM
   2a924:	4c4c4c4d 4c4c4c4c 4c4c4c4c 4b4b4b4b     MLLLLLLLLLLLKKKK
   2a934:	4b4b4b4b 4a4b4b4b 4a4a4a4a 4a4a4a4a     KKKKKKKJJJJJJJJJ
   2a944:	494a4a4a 49494949 49494949 48494949     JJJIIIIIIIIIIIIH
   2a954:	48484848 48484848 47484848 47474747     HHHHHHHHHHHGGGGG
   2a964:	47474747 46474747 46464646 46464646     GGGGGGGFFFFFFFFF
   2a974:	46464646 45454545 45454545 45454545     FFFFEEEEEEEEEEEE
   2a984:	44444445 44444444 44444444 43434444     EDDDDDDDDDDDDDCC
   2a994:	43434343 43434343 43434343 42424242     CCCCCCCCCCCCBBBB
   2a9a4:	42424242 42424242 41424242 41414141     BBBBBBBBBBBAAAAA
   2a9b4:	41414141 41414141 40404041 40404040     AAAAAAAAA@@@@@@@
   2a9c4:	40404040 40404040 3f3f3f40 3f3f3f3f     @@@@@@@@@???????
   2a9d4:	3f3f3f3f 3f3f3f3f 3e3e3e3f 3e3e3e3e     ?????????>>>>>>>
   2a9e4:	3e3e3e3e 3e3e3e3e 3d3d3d3e 3d3d3d3d     >>>>>>>>>=======
   2a9f4:	3d3d3d3d 3d3d3d3d 3c3c3d3d 3c3c3c3c     ==========<<<<<<
   2aa04:	3c3c3c3c 3c3c3c3c 3b3c3c3c 3b3b3b3b     <<<<<<<<<<<;;;;;
   2aa14:	3b3b3b3b 3b3b3b3b 3b3b3b3b 3a3a3a3b     ;;;;;;;;;;;;;:::
   2aa24:	3a3a3a3a 3a3a3a3a 3a3a3a3a 393a3a3a     :::::::::::::::9
   2aa34:	39393939 39393939 39393939 39393939     9999999999999999
   2aa44:	38393939 38383838 38383838 38383838     9998888888888888
   2aa54:	38383838 37383838 37373737 37373737     8888888777777777
   2aa64:	37373737 37373737 36373737 36363636     7777777777766666
   2aa74:	36363636 36363636 36363636 36363636     6666666666666666
   2aa84:	35353536 35353535 35353535 35353535     6555555555555555
   2aa94:	35353535 34353535 34343434 34343434     5555555444444444
   2aaa4:	34343434 34343434 34343434 33333434     4444444444444433
   2aab4:	33333333 33333333 33333333 33333333     3333333333333333
   2aac4:	33333333 32323333 32323232 32323232     3333332222222222
   2aad4:	32323232 32323232 32323232 31323232     2222222222222221
   2aae4:	31313131 31313131 31313131 31313131     1111111111111111
   2aaf4:	31313131 31313131 30303031 30303030     1111111110000000
   2ab04:	30303030 30303030 30303030 30303030     0000000000000000
   2ab14:	30303030 2f2f2f2f 2f2f2f2f 2f2f2f2f     0000////////////
   2ab24:	2f2f2f2f 2f2f2f2f 2f2f2f2f 2f2f2f2f     ////////////////
   2ab34:	2e2e2e2f 2e2e2e2e 2e2e2e2e 2e2e2e2e     /...............
   2ab44:	2e2e2e2e 2e2e2e2e 2e2e2e2e 2d2d2e2e     ..............--
   2ab54:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   2ab64:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2c2c2c2d     -------------,,,
   2ab74:	2c2c2c2c 2c2c2c2c 2c2c2c2c 2c2c2c2c     ,,,,,,,,,,,,,,,,
   2ab84:	2c2c2c2c 2c2c2c2c 2c2c2c2c 2b2b2b2c     ,,,,,,,,,,,,,+++
   2ab94:	2b2b2b2b 2b2b2b2b 2b2b2b2b 2b2b2b2b     ++++++++++++++++
   2aba4:	2b2b2b2b 2b2b2b2b 2b2b2b2b 2a2b2b2b     +++++++++++++++*
   2abb4:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   2abc4:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   2abd4:	292a2a2a 29292929 29292929 29292929     ***)))))))))))))
   2abe4:	29292929 29292929 29292929 29292929     ))))))))))))))))
   2abf4:	29292929 29292929 28282828 28282828     ))))))))((((((((
   2ac04:	28282828 28282828 28282828 28282828     ((((((((((((((((
   2ac14:	28282828 28282828 28282828 27282828     ((((((((((((((('
   2ac24:	27272727 27272727 27272727 27272727     ''''''''''''''''
   2ac34:	27272727 27272727 27272727 27272727     ''''''''''''''''
   2ac44:	27272727 27272727 26262626 26262626     ''''''''&&&&&&&&
   2ac54:	26262626 26262626 26262626 26262626     &&&&&&&&&&&&&&&&
   2ac64:	26262626 26262626 26262626 26262626     &&&&&&&&&&&&&&&&
   2ac74:	25262626 25252525 25252525 25252525     &&&%%%%%%%%%%%%%
   2ac84:	25252525 25252525 25252525 25252525     %%%%%%%%%%%%%%%%
   2ac94:	25252525 25252525 25252525 25252525     %%%%%%%%%%%%%%%%
   2aca4:	24242425 24242424 24242424 24242424     %$$$$$$$$$$$$$$$
   2acb4:	24242424 24242424 24242424 24242424     $$$$$$$$$$$$$$$$
   2acc4:	24242424 24242424 24242424 24242424     $$$$$$$$$$$$$$$$
   2acd4:	23232324 23232323 23232323 23232323     $###############
   2ace4:	23232323 23232323 23232323 23232323     ################
   2acf4:	23232323 23232323 23232323 23232323     ################
   2ad04:	23232323 22222222 22222222 22222222     ####""""""""""""
   2ad14:	22222222 22222222 22222222 22222222     """"""""""""""""
   2ad24:	22222222 22222222 22222222 22222222     """"""""""""""""
   2ad34:	22222222 22222222 21212222 21212121     """"""""""!!!!!!
   2ad44:	21212121 21212121 21212121 21212121     !!!!!!!!!!!!!!!!
   2ad54:	21212121 21212121 21212121 21212121     !!!!!!!!!!!!!!!!
   2ad64:	21212121 21212121 21212121 21212121     !!!!!!!!!!!!!!!!
   2ad74:	21212121 20202020 20202020 20202020     !!!!            
   2ad84:	20202020 20202020 20202020 20202020                     
   2ad94:	20202020 20202020 20202020 20202020                     
   2ada4:	20202020 20202020 20202020 20202020                     
   2adb4:	1f1f1f20 1f1f1f1f 1f1f1f1f 1f1f1f1f      ...............
   2adc4:	1f1f1f1f 1f1f1f1f 1f1f1f1f 1f1f1f1f     ................
   2add4:	1f1f1f1f 1f1f1f1f 1f1f1f1f 1f1f1f1f     ................
   2ade4:	1f1f1f1f 1f1f1f1f 1f1f1f1f 1f1f1f1f     ................
   2adf4:	0000001e 74696e69 6c616e41 6950676f     ....initAnalogPi
   2ae04:	2528206e 64253a73 00000a29 2f637273     n (%s:%d)...src/
   2ae14:	6867694d 6f427974 2f647261 72616873     MightyBoard/shar
   2ae24:	412f6465 6f6c616e 6e695067 0063632e     ed/AnalogPin.cc.
   2ae34:	72617453 64412074 73657264 78253a73     Start Address:%x
   2ae44:	78654820 69727720 6e657474 2578303a      Hex written:0x%
   2ae54:	68632078 77207261 74746972 253a6e65     x char written:%
   2ae64:	00000a63                                c...

0002ae68 <vtable for Thermistor>:
	...
   2ae70:	00011251 0001125d 00011271 000115ad     Q...]...q.......

0002ae80 <default_therm_table>:
   2ae80:	012c005c 01220069 01180079 010e008c     \.,.i.".y.......
   2ae90:	010400a2 00fa00bd 00f000de 00e60105     ................
   2aea0:	00dc0134 00d2016d 00c801b2 00be0207     4...m...........
   2aeb0:	00b4026d 00aa02e8 00a0037b 0096042b     m.......{...+...
   2aec0:	008c04f8 008205e3 007806eb 006e080a     ..........x...n.
   2aed0:	00640935 005a0a61 00500b7f 00460c84     5.d.a.Z...P...F.
   2aee0:	003c0d65 00320e1e 00280eb0 001e0f1d     e.<...2...(.....
   2aef0:	00140f6c 000a0fa3 00000fc7 5f425355     l...........USB_
   2af00:	74696e49 73252820 2964253a 0000000a     Init (%s:%d)....
   2af10:	2f637273 6867694d 6f427974 2f647261     src/MightyBoard/
   2af20:	72616873 552f6465 2e545241 00006363     shared/UART.cc..
   2af30:	55203462 63204253 69666e6f 25282067     b4 USB config (%
   2af40:	64253a73 00000a29 38347372 25282035     s:%d)...rs485 (%
   2af50:	64253a73 00000a29 20646e65 54524155     s:%d)...end UART
   2af60:	6e693a3a 735f7469 61697265 2528206c     ::init_serial (%
   2af70:	64253a73 00000a29 5f425355 6e6e6f43     s:%d)...USB_Conn
   2af80:	28746365 45555254 25282029 64253a73     ect(TRUE) (%s:%d
   2af90:	00000a29 65746661 53552072 6f435f42     )...after USB_Co
   2afa0:	63656e6e 52542874 20294555 3a732528     nnect(TRUE) (%s:
   2afb0:	0a296425 00000000 74726155 69442030     %d).....Uart0 Di
   2afc0:	6c626173 28206465 253a7325 000a2964     sabled (%s:%d)..
   2afd0:	74726155 6e452031 656c6261 25282064     Uart1 Enabled (%
   2afe0:	64253a73 00000a29 74726155 69442031     s:%d)...Uart1 Di
   2aff0:	6c626173 28206465 253a7325 000a2964     sabled (%s:%d)..
   2b000:	20646e65 54524155 6e653a3a 656c6261     end UART::enable
   2b010:	73252820 2964253a 0000000a 54524155      (%s:%d)....UART
   2b020:	52495f31 25282051 64253a73 00000a29     1_IRQ (%s:%d)...
   2b030:	65727570 72697620 6c617574 74656d20     pure virtual met
   2b040:	20646f68 6c6c6163 000a6465              hod called..

0002b04c <typeinfo for __gnu_cxx::recursive_init_error>:
   2b04c:	0002b0a0 0002b058 0002be48              ....X...H...

0002b058 <typeinfo name for __gnu_cxx::recursive_init_error>:
   2b058:	5f5f394e 5f756e67 32787863 63657230     N9__gnu_cxx20rec
   2b068:	69737275 695f6576 5f74696e 6f727265     ursive_init_erro
   2b078:	00004572 00000000                       rE......

0002b080 <vtable for __gnu_cxx::recursive_init_error>:
   2b080:	00000000 0002b04c 00013b05 00013b19     ....L....;...;..
   2b090:	0001ddd9 00000000                       ........

0002b098 <vtable for __cxxabiv1::__si_class_type_info>:
   2b098:	00000000 0002b0c8 00013ec5 00013ed9     .........>...>..
   2b0a8:	00013ffd 00014001 0001e5c9 0001e505     .?...@..........
   2b0b8:	00013eed 00013f15 00013fa1 00000000     .>...?...?......

0002b0c8 <typeinfo for __cxxabiv1::__si_class_type_info>:
   2b0c8:	0002b0a0 0002b0d4 0002bf40              ........@...

0002b0d4 <typeinfo name for __cxxabiv1::__si_class_type_info>:
   2b0d4:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   2b0e4:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   2b0f4:	456f666e 00000000                       nfoE....

0002b0fc <typeinfo for std::type_info>:
   2b0fc:	0002bf18 0002b104                       ........

0002b104 <typeinfo name for std::type_info>:
   2b104:	74397453 5f657079 6f666e69 00000000     St9type_info....
   2b114:	00000000                                ....

0002b118 <vtable for std::type_info>:
   2b118:	00000000 0002b0fc 00013ff1 00014009     .........?...@..
   2b128:	00013ffd 00014001 00014059 00014005     .?...@..Y@...@..
   2b138:	6d726574 74616e69 61632065 64656c6c     terminate called
   2b148:	63657220 69737275 796c6576 0000000a      recursively....
   2b158:	6d726574 74616e69 61632065 64656c6c     terminate called
   2b168:	74666120 74207265 776f7268 20676e69      after throwing 
   2b178:	69206e61 6174736e 2065636e 2720666f     an instance of '
   2b188:	00000000 00000a27 6d726574 74616e69     ....'...terminat
   2b198:	61632065 64656c6c 74697720 74756f68     e called without
   2b1a8:	206e6120 69746361 65206576 70656378      an active excep
   2b1b8:	6e6f6974 0000000a 68772020 29287461     tion....  what()
   2b1c8:	0020203a                                :  .

0002b1cc <standard_subs>:
   2b1cc:	00000074 0002b8a8 00000003 0002b8a8     t...............
   2b1dc:	00000003 00000000 00000000 00000061     ............a...
   2b1ec:	0002bb24 0000000e 0002bb24 0000000e     $.......$.......
   2b1fc:	0002bb34 00000009 00000062 0002bb40     4.......b...@...
   2b20c:	00000011 0002bb40 00000011 0002bb54     ....@.......T...
   2b21c:	0000000c 00000073 0002bb64 0000000b     ....s...d.......
   2b22c:	0002bb70 00000046 0002bb54 0000000c     p...F...T.......
   2b23c:	00000069 0002bbb8 0000000c 0002bbc8     i...............
   2b24c:	00000031 0002bbfc 0000000d 0000006f     1...........o...
   2b25c:	0002bc0c 0000000c 0002bc1c 00000031     ............1...
   2b26c:	0002bc50 0000000d 00000064 0002bc60     P.......d...`...
   2b27c:	0000000d 0002bc70 00000032 0002bca4     ....p...2.......
   2b28c:	0000000e                                ....

0002b290 <cplus_demangle_builtin_types>:
   2b290:	0002b9c8 0000000b 0002b9c8 0000000b     ................
   2b2a0:	00000000 0002b9d4 00000004 0002b9dc     ................
   2b2b0:	00000007 00000007 0002b9e4 00000004     ................
   2b2c0:	0002b9ec 00000004 00000000 0002b9f4     ................
   2b2d0:	00000006 0002b9f4 00000006 00000008     ................
   2b2e0:	0002b9fc 0000000b 0002b9fc 0000000b     ................
   2b2f0:	00000008 0002ba08 00000005 0002ba08     ................
   2b300:	00000005 00000008 0002ba10 0000000a     ................
   2b310:	0002ba10 0000000a 00000008 0002ba1c     ................
   2b320:	0000000d 0002ba1c 0000000d 00000000     ................
   2b330:	0002ba2c 00000003 0002ba2c 00000003     ,.......,.......
   2b340:	00000001 0002ba30 0000000c 0002ba40     ....0.......@...
   2b350:	00000008 00000002 00000000 00000000     ................
	...
   2b36c:	0002ba4c 00000004 0002ba4c 00000004     L.......L.......
   2b37c:	00000003 0002ba54 0000000d 0002ba54     ....T.......T...
   2b38c:	0000000d 00000004 0002ba64 00000008     ........d.......
   2b39c:	0002ba64 00000008 00000000 0002ba70     d...........p...
   2b3ac:	00000011 0002ba70 00000011 00000000     ....p...........
	...
   2b3f8:	0002ba84 00000005 0002ba84 00000005     ................
   2b408:	00000000 0002ba8c 0000000e 0002ba8c     ................
   2b418:	0000000e 00000000 00000000 00000000     ................
	...
   2b434:	0002ba9c 00000004 0002ba9c 00000004     ................
   2b444:	00000009 0002baa4 00000007 0002b9e4     ................
   2b454:	00000004 00000000 0002baac 00000009     ................
   2b464:	0002ba4c 00000004 00000005 0002bab8     L...............
   2b474:	00000012 0002bab8 00000012 00000006     ................
   2b484:	0002b984 00000003 0002b984 00000003     ................
   2b494:	00000000 0002bacc 00000009 0002bacc     ................
   2b4a4:	00000009 00000000 0002bad8 00000009     ................
   2b4b4:	0002bad8 00000009 00000000 0002bae4     ................
   2b4c4:	0000000a 0002bae4 0000000a 00000000     ................
   2b4d4:	0002baf0 00000004 0002baf0 00000004     ................
   2b4e4:	00000008 0002baf8 00000008 0002baf8     ................
   2b4f4:	00000008 00000000 0002bb04 00000008     ................
   2b504:	0002bb04 00000008 00000000 0002bb10     ................
   2b514:	00000011 0002bb10 00000011 00000000     ................

0002b524 <cplus_demangle_operators>:
   2b524:	0002bcb4 0002bcb8 00000002 00000002     ................
   2b534:	0002bcbc 0002bcc0 00000001 00000002     ................
   2b544:	0002bcc4 0002bcc8 00000002 00000002     ................
   2b554:	0002bccc 0002bcd0 00000001 00000001     ................
   2b564:	0002bcd4 0002bcd0 00000001 00000002     ................
   2b574:	0002b8b0 0002bcd8 00000002 00000002     ................
   2b584:	0002bcdc 0002bce0 00000001 00000002     ................
   2b594:	0002bce4 0002bce8 00000001 00000001     ................
   2b5a4:	0002bcec 0002bcf0 00000002 00000002     ................
   2b5b4:	0002bcf4 0002bcf8 00000008 00000001     ................
   2b5c4:	0002bd04 0002bd08 00000001 00000001     ................
   2b5d4:	0002bd0c 0002bd10 00000006 00000001     ................
   2b5e4:	0002b8b4 00026708 00000001 00000002     .....g..........
   2b5f4:	0002bd18 00026768 00000001 00000002     ....hg..........
   2b604:	0002bd1c 0002bd20 00000002 00000002     .... ...........
   2b614:	0002bd24 0002bd28 00000001 00000002     $...(...........
   2b624:	0002bd2c 0002bd30 00000002 00000002     ,...0...........
   2b634:	0002bd34 0002bd38 00000002 00000002     4...8...........
   2b644:	0002bd3c 0002bbf8 00000001 00000002     <...............
   2b654:	0002b95c 0002b8c4 00000002 00000002     \...............
   2b664:	0002bd40 0002bd44 00000003 00000002     @...D...........
   2b674:	0002b9f8 0002bd48 00000002 00000002     ....H...........
   2b684:	0002bd4c 0002bd50 00000002 00000002     L...P...........
   2b694:	0002bd54 0002bd58 00000001 00000002     T...X...........
   2b6a4:	0002bd5c 0002bd60 00000002 00000002     \...`...........
   2b6b4:	0002bd64 0002bd68 00000002 00000002     d...h...........
   2b6c4:	0002bd6c 0002bd70 00000001 00000002     l...p...........
   2b6d4:	0002bd74 0002bd08 00000001 00000002     t...............
   2b6e4:	0002bd78 0002bd7c 00000002 00000001     x...|...........
   2b6f4:	0002bd80 0002bd84 00000005 00000001     ................
   2b704:	0002bd8c 0002bd90 00000002 00000002     ................
   2b714:	0002bac8 0002bd70 00000001 00000001     ....p...........
   2b724:	0002bd94 0002bd98 00000001 00000001     ................
   2b734:	0002bd9c 0002bda0 00000003 00000001     ................
   2b744:	0002bda4 0002bda8 00000002 00000002     ................
   2b754:	0002bdac 0002bdb0 00000002 00000002     ................
   2b764:	0002643c 0002bdb4 00000001 00000002     <d..............
   2b774:	0002bdb8 0002bdbc 00000002 00000002     ................
   2b784:	0002bdc0 0002bdc4 00000001 00000002     ................
   2b794:	0002bdc8 0002bdcc 00000003 00000002     ................
   2b7a4:	0002bdd0 0002bdd4 00000002 00000001     ................
   2b7b4:	0002bdd8 0002bdc4 00000001 00000001     ................
   2b7c4:	0002b8b8 0002bddc 00000002 00000002     ................
   2b7d4:	0002bde0 0002bde4 00000001 00000003     ................
   2b7e4:	0002bde8 0002bdec 00000002 00000002     ................
   2b7f4:	0002bdf0 0002bdf4 00000003 00000002     ................
   2b804:	0002bdf8 0002bdfc 00000001 00000002     ................
   2b814:	0002be00 0002be04 00000002 00000002     ................
   2b824:	0002b8ac 0002be08 00000007 00000001     ................
   2b834:	0002be10 0002be08 00000007 00000001     ................
   2b844:	0002be14 0002be18 00000008 00000001     ................
   2b854:	0002be24 0002be18 00000008 00000001     $...............
	...
   2b874:	4f4c475f 5f4c4142 00000000 6f6e6128     _GLOBAL_....(ano
   2b884:	6f6d796e 6e207375 73656d61 65636170     nymous namespace
   2b894:	00000029 69727473 6c20676e 72657469     )...string liter
   2b8a4:	00006c61 00647473 00007473 00006c63     al..std.st..cl..
   2b8b4:	00007464 00007470 7272414a 00007961     dt..pt..JArray..
   2b8c4:	00005d5b 736e6f63 63757274 6e6f6974     []..construction
   2b8d4:	61747620 20656c62 20726f66 00000000      vtable for ....
   2b8e4:	65707974 6f666e69 6d616e20 6f662065     typeinfo name fo
   2b8f4:	00002072 2d6e6f6e 74726976 206c6175     r ..non-virtual 
   2b904:	6e756874 6f74206b 00000020 61766f63     thunk to ...cova
   2b914:	6e616972 65722074 6e727574 75687420     riant return thu
   2b924:	74206b6e 0000206f 72617567 61762064     nk to ..guard va
   2b934:	62616972 6620656c 0020726f 65666572     riable for .refe
   2b944:	636e6572 65742065 726f706d 20797261     rence temporary 
   2b954:	20726f66 00000000 00007869 00203a20     for ....ix.. : .
   2b964:	00006c75 00006c6c 006c6c75 736c6166     ul..ll..ull.fals
   2b974:	00000065 65757274 00000000 00646c25     e...true....%ld.
   2b984:	002e2e2e 626f6c67 63206c61 74736e6f     ....global const
   2b994:	74637572 2073726f 6579656b 6f742064     ructors keyed to
   2b9a4:	00000020 626f6c67 64206c61 72747365      ...global destr
   2b9b4:	6f746375 6b207372 64657965 206f7420     uctors keyed to 
   2b9c4:	00000000 6e676973 63206465 00726168     ....signed char.
   2b9d4:	6c6f6f62 00000000 6c6f6f62 006e6165     bool....boolean.
   2b9e4:	72616863 00000000 65747962 00000000     char....byte....
   2b9f4:	62756f64 0000656c 676e6f6c 756f6420     double..long dou
   2ba04:	00656c62 616f6c66 00000074 6c665f5f     ble.float...__fl
   2ba14:	3174616f 00003832 69736e75 64656e67     oat128..unsigned
   2ba24:	61686320 00000072 00746e69 69736e75      char...int.unsi
   2ba34:	64656e67 746e6920 00000000 69736e75     gned int....unsi
   2ba44:	64656e67 00000000 676e6f6c 00000000     gned....long....
   2ba54:	69736e75 64656e67 6e6f6c20 00000067     unsigned long...
   2ba64:	6e695f5f 38323174 00000000 69736e75     __int128....unsi
   2ba74:	64656e67 695f5f20 3231746e 00000038     gned __int128...
   2ba84:	726f6873 00000074 69736e75 64656e67     short...unsigned
   2ba94:	6f687320 00007472 64696f76 00000000      short..void....
   2baa4:	61686377 00745f72 676e6f6c 6e6f6c20     wchar_t.long lon
   2bab4:	00000067 69736e75 64656e67 6e6f6c20     g...unsigned lon
   2bac4:	6f6c2067 0000676e 69636564 336c616d     g long..decimal3
   2bad4:	00000032 69636564 366c616d 00000034     2...decimal64...
   2bae4:	69636564 316c616d 00003832 666c6168     decimal128..half
   2baf4:	00000000 72616863 745f3631 00000000     ....char16_t....
   2bb04:	72616863 745f3233 00000000 6c636564     char32_t....decl
   2bb14:	65707974 6c756e28 7274706c 00000029     type(nullptr)...
   2bb24:	3a647473 6c6c613a 7461636f 0000726f     std::allocator..
   2bb34:	6f6c6c61 6f746163 00000072 3a647473     allocator...std:
   2bb44:	7361623a 735f6369 6e697274 00000067     :basic_string...
   2bb54:	69736162 74735f63 676e6972 00000000     basic_string....
   2bb64:	3a647473 7274733a 00676e69 3a647473     std::string.std:
   2bb74:	7361623a 735f6369 6e697274 68633c67     :basic_string<ch
   2bb84:	202c7261 3a647473 6168633a 72745f72     ar, std::char_tr
   2bb94:	73746961 6168633c 202c3e72 3a647473     aits<char>, std:
   2bba4:	6c6c613a 7461636f 633c726f 3e726168     :allocator<char>
   2bbb4:	00003e20 3a647473 7473693a 6d616572      >..std::istream
   2bbc4:	00000000 3a647473 7361623a 695f6369     ....std::basic_i
   2bbd4:	65727473 633c6d61 2c726168 64747320     stream<char, std
   2bbe4:	68633a3a 745f7261 74696172 68633c73     ::char_traits<ch
   2bbf4:	203e7261 0000003e 69736162 73695f63     ar> >...basic_is
   2bc04:	61657274 0000006d 3a647473 74736f3a     tream...std::ost
   2bc14:	6d616572 00000000 3a647473 7361623a     ream....std::bas
   2bc24:	6f5f6369 65727473 633c6d61 2c726168     ic_ostream<char,
   2bc34:	64747320 68633a3a 745f7261 74696172      std::char_trait
   2bc44:	68633c73 203e7261 0000003e 69736162     s<char> >...basi
   2bc54:	736f5f63 61657274 0000006d 3a647473     c_ostream...std:
   2bc64:	736f693a 61657274 0000006d 3a647473     :iostream...std:
   2bc74:	7361623a 695f6369 7274736f 3c6d6165     :basic_iostream<
   2bc84:	72616863 7473202c 633a3a64 5f726168     char, std::char_
   2bc94:	69617274 633c7374 3e726168 00003e20     traits<char> >..
   2bca4:	69736162 6f695f63 65727473 00006d61     basic_iostream..
   2bcb4:	00004e61 00003d26 00005361 0000003d     aN..&=..aS..=...
   2bcc4:	00006161 00002626 00006461 00000026     aa..&&..ad..&...
   2bcd4:	00006e61 00002928 00006d63 0000002c     an..()..cm..,...
   2bce4:	00006f63 0000007e 00005664 00003d2f     co..~...dV../=..
   2bcf4:	00006164 656c6564 5d5b6574 00000000     da..delete[]....
   2bd04:	00006564 0000002a 00006c64 656c6564     de..*...dl..dele
   2bd14:	00006574 00007664 00004f65 00003d5e     te..dv..eO..^=..
   2bd24:	00006f65 0000005e 00007165 00003d3d     eo..^...eq..==..
   2bd34:	00006567 00003d3e 00007467 0000536c     ge..>=..gt..lS..
   2bd44:	003d3c3c 00003d3c 0000736c 00003c3c     <<=.<=..ls..<<..
   2bd54:	0000746c 0000003c 0000496d 00003d2d     lt..<...mI..-=..
   2bd64:	00004c6d 00003d2a 0000696d 0000002d     mL..*=..mi..-...
   2bd74:	00006c6d 00006d6d 00002d2d 0000616e     ml..mm..--..na..
   2bd84:	5b77656e 0000005d 0000656e 00003d21     new[]...ne..!=..
   2bd94:	0000746e 00000021 0000776e 0077656e     nt..!...nw..new.
   2bda4:	0000526f 00003d7c 00006f6f 00007c7c     oR..|=..oo..||..
   2bdb4:	0000007c 00004c70 00003d2b 00006c70     |...pL..+=..pl..
   2bdc4:	0000002b 00006d70 002a3e2d 00007070     +...pm..->*.pp..
   2bdd4:	00002b2b 00007370 00003e2d 00007571     ++..ps..->..qu..
   2bde4:	0000003f 00004d72 00003d25 00005372     ?...rM..%=..rS..
   2bdf4:	003d3e3e 00006d72 00000025 00007372     >>=.rm..%...rs..
   2be04:	00003e3e 657a6973 0020666f 00007a73     >>..sizeof .sz..
   2be14:	00007461 67696c61 20666f6e 00000000     at..alignof ....
   2be24:	00007a61                                az..

0002be28 <vtable for std::exception>:
   2be28:	00000000 0002be48 0001ddc1 0001de05     ....H...........
   2be38:	0001ddd9 00000000                       ........

0002be40 <typeinfo for __cxxabiv1::__forced_unwind>:
   2be40:	0002bf18 0002bee0                       ........

0002be48 <typeinfo for std::exception>:
   2be48:	0002bf18 0002bed0                       ........

0002be50 <typeinfo name for std::bad_exception>:
   2be50:	33317453 5f646162 65637865 6f697470     St13bad_exceptio
   2be60:	0000006e 3a647473 6378653a 69747065     n...std::excepti
   2be70:	00006e6f 3a647473 6461623a 6378655f     on..std::bad_exc
   2be80:	69747065 00006e6f                       eption..

0002be88 <typeinfo name for __cxxabiv1::__foreign_exception>:
   2be88:	5f30314e 7878635f 76696261 5f393131     N10__cxxabiv119_
   2be98:	726f665f 6e676965 6378655f 69747065     _foreign_excepti
   2bea8:	00456e6f                                onE.

0002beac <typeinfo for __cxxabiv1::__foreign_exception>:
   2beac:	0002bf18 0002be88 00000000              ............

0002beb8 <vtable for std::bad_exception>:
   2beb8:	00000000 0002bf00 0001ddcd 0001ddf1     ................
   2bec8:	0001dde5 00000000                       ........

0002bed0 <typeinfo name for std::exception>:
   2bed0:	65397453 70656378 6e6f6974 00000000     St9exception....

0002bee0 <typeinfo name for __cxxabiv1::__forced_unwind>:
   2bee0:	5f30314e 7878635f 76696261 5f353131     N10__cxxabiv115_
   2bef0:	726f665f 5f646563 69776e75 0045646e     _forced_unwindE.

0002bf00 <typeinfo for std::bad_exception>:
   2bf00:	0002b0a0 0002be50 0002be48 00000000     ....P...H.......

0002bf10 <vtable for __cxxabiv1::__class_type_info>:
   2bf10:	00000000 0002bf40 0001e565 0001e579     ....@...e...y...
   2bf20:	00013ffd 00014001 0001e5c9 0001e505     .?...@..........
   2bf30:	0001e549 0001e58d 0001e53d 00000000     I.......=.......

0002bf40 <typeinfo for __cxxabiv1::__class_type_info>:
   2bf40:	0002b0a0 0002bf4c 0002b0fc              ....L.......

0002bf4c <typeinfo name for __cxxabiv1::__class_type_info>:
   2bf4c:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   2bf5c:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   2bf6c:	00000045 74727173 00000000              E...sqrt....

0002bf78 <_global_impure_ptr>:
   2bf78:	1000002c 00000043                       ,...C...

0002bf80 <blanks.6603>:
   2bf80:	20202020 20202020 20202020 20202020                     

0002bf90 <zeroes.6604>:
   2bf90:	30303030 30303030 30303030 30303030     0000000000000000
   2bfa0:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
   2bfb0:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   2bfc0:	00000000 33323130 37363534 62613938     ....0123456789ab
   2bfd0:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
   2bfe0:	00000030                                0...

0002bfe4 <_ctype_>:
   2bfe4:	20202000 20202020 28282020 20282828     .         ((((( 
   2bff4:	20202020 20202020 20202020 20202020                     
   2c004:	10108820 10101010 10101010 10101010      ...............
   2c014:	04040410 04040404 10040404 10101010     ................
   2c024:	41411010 41414141 01010101 01010101     ..AAAAAA........
   2c034:	01010101 01010101 01010101 10101010     ................
   2c044:	42421010 42424242 02020202 02020202     ..BBBBBB........
   2c054:	02020202 02020202 02020202 10101010     ................
   2c064:	00000020 00000000 00000000 00000000      ...............
	...
   2c0e8:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

0002c0f8 <__sf_fake_stderr>:
	...

0002c118 <__sf_fake_stdout>:
	...

0002c138 <__sf_fake_stdin>:
	...
   2c158:	49534f50 00000058                       POSIX...

0002c160 <p05.5129>:
   2c160:	00000005 00000019 0000007d 00000000     ........}.......

0002c170 <__mprec_tens>:
   2c170:	00000000 3ff00000 00000000 40240000     .......?......$@
   2c180:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   2c190:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   2c1a0:	00000000 412e8480 00000000 416312d0     .......A......cA
   2c1b0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   2c1c0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   2c1d0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   2c1e0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   2c1f0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   2c200:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   2c210:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   2c220:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   2c230:	79d99db4 44ea7843                       ...yCx.D

0002c238 <__mprec_tinytens>:
   2c238:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   2c248:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   2c258:	64ac6f43 0ac80628                       Co.d(...

0002c260 <__mprec_bigtens>:
   2c260:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   2c270:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   2c280:	7f73bf3c 75154fdd                       <.s..O.u

0002c288 <blanks.6547>:
   2c288:	20202020 20202020 20202020 20202020                     

0002c298 <zeroes.6548>:
   2c298:	30303030 30303030 30303030 30303030     0000000000000000
   2c2a8:	8101b108 8400b0b0 00000000 7fff1e65     ............e...
   2c2b8:	01b10884 00b0b0b0 011900ff 0806020c     ................
   2c2c8:	10040c01 000a1c05 7f000100 007d0000     ..............}.
	...
   2c2e0:	8101b108 8400b0b0 00000000 8101b108     ................
   2c2f0:	8400b0b0 00000000 7fff1e21 0004afb0     ........!.......
   2c300:	011d00ff e4042414 042a0101 01b40170     .....$....*.p...
   2c310:	00029e6a 000402a6 00000100 00000000     j...............
   2c320:	8101b108 8400b0b0 00000000 7fff1ded     ................
   2c330:	00b108a9 011100ff 8c047a0a 01900101     .........z......
   2c340:	7f000008 00000000 00000000 7fff1dcd     ................
   2c350:	0001aab0 013500ff 00443825 04018000     ......5.%8D.....
   2c360:	8a0301ba 00002601 ba0401b6 01c40301     .....&..........
   2c370:	8a00002a 02a81802 0402ac00 00020000     *...............
   2c380:	00007d01 00000000 fffffac0 8101b108     .}..............
   2c390:	8400b0b0 00000000 7fff1d81 0012afb0     ................
   2c3a0:	011500ff 06ce3e0b 07e00000 0107e404     .....>..........
   2c3b0:	00000001 00000000 8101b2a2 01afb0b0     ................
   2c3c0:	00000000 8101b108 8400b0b0 00000000     ................
   2c3d0:	8101b108 8400b0b0 00000000 8101b108     ................
   2c3e0:	8400b0b0 00000000                       ........

0002c3e8 <_init>:
   2c3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c3ea:	bf00      	nop
   2c3ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2c3ee:	bc08      	pop	{r3}
   2c3f0:	469e      	mov	lr, r3
   2c3f2:	4770      	bx	lr

0002c3f4 <__init_array_start>:
   2c3f4:	00003161 	.word	0x00003161
   2c3f8:	00007d81 	.word	0x00007d81
   2c3fc:	00009071 	.word	0x00009071
   2c400:	0000915d 	.word	0x0000915d
   2c404:	000092ed 	.word	0x000092ed
   2c408:	0000996d 	.word	0x0000996d
   2c40c:	00009c99 	.word	0x00009c99
   2c410:	0000ad49 	.word	0x0000ad49
   2c414:	0000b00d 	.word	0x0000b00d
   2c418:	0000bd99 	.word	0x0000bd99
   2c41c:	0000c241 	.word	0x0000c241
   2c420:	0000d3c9 	.word	0x0000d3c9
   2c424:	0000d589 	.word	0x0000d589
   2c428:	0000d5ed 	.word	0x0000d5ed
   2c42c:	0000db5d 	.word	0x0000db5d
   2c430:	0000e169 	.word	0x0000e169
   2c434:	0000e4ad 	.word	0x0000e4ad
   2c438:	0000fd0d 	.word	0x0000fd0d
   2c43c:	0001002d 	.word	0x0001002d
   2c440:	000101d5 	.word	0x000101d5
   2c444:	00010341 	.word	0x00010341
   2c448:	00010acd 	.word	0x00010acd
   2c44c:	00010b45 	.word	0x00010b45
   2c450:	00010bbd 	.word	0x00010bbd
   2c454:	00010c41 	.word	0x00010c41
   2c458:	00010cbd 	.word	0x00010cbd
   2c45c:	00010d21 	.word	0x00010d21
   2c460:	00011161 	.word	0x00011161
   2c464:	000111d9 	.word	0x000111d9
   2c468:	00011735 	.word	0x00011735
   2c46c:	00011799 	.word	0x00011799
   2c470:	000118e9 	.word	0x000118e9
   2c474:	00011fc5 	.word	0x00011fc5

0002c478 <_fini>:
   2c478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c47a:	bf00      	nop
   2c47c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2c47e:	bc08      	pop	{r3}
   2c480:	469e      	mov	lr, r3
   2c482:	4770      	bx	lr

0002c484 <__fini_array_start>:
   2c484:	00003135 	.word	0x00003135

0002c488 <__cs3_regions>:
   2c488:	00000000 	.word	0x00000000
   2c48c:	0002c688 	.word	0x0002c688
   2c490:	10000000 	.word	0x10000000
   2c494:	000005b0 	.word	0x000005b0
   2c498:	00003620 	.word	0x00003620
