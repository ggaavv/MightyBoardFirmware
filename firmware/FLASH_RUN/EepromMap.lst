   1              	 .syntax unified
   2              	 .cpu cortex-m3
   3              	 .fpu softvfp
   4              	 .eabi_attribute 20,1
   5              	 .eabi_attribute 21,1
   6              	 .eabi_attribute 23,3
   7              	 .eabi_attribute 24,1
   8              	 .eabi_attribute 25,1
   9              	 .eabi_attribute 26,1
  10              	 .eabi_attribute 30,1
  11              	 .eabi_attribute 34,1
  12              	 .eabi_attribute 18,4
  13              	 .thumb
  14              	 .file "EepromMap.cc"
  15              	 .text
  16              	.Ltext0:
  17              	 .cfi_sections .debug_frame
  18              	 .section .text._ZN6eeprom15write_ff_to_ramEv,"ax",%progbits
  19              	 .align 2
  20              	 .global _ZN6eeprom15write_ff_to_ramEv
  21              	 .thumb
  22              	 .thumb_func
  24              	_ZN6eeprom15write_ff_to_ramEv:
  25              	.LFB91:
  26              	 .file 1 "src/MightyBoard/Motherboard/EepromMap.cc"
   1:src/MightyBoard/Motherboard/EepromMap.cc **** /*
   2:src/MightyBoard/Motherboard/EepromMap.cc ****  * Copyright 2010 by Adam Mayer <adam@makerbot.com>
   3:src/MightyBoard/Motherboard/EepromMap.cc ****  *
   4:src/MightyBoard/Motherboard/EepromMap.cc ****  * This program is free software: you can redistribute it and/or modify
   5:src/MightyBoard/Motherboard/EepromMap.cc ****  * it under the terms of the GNU General Public License as published by
   6:src/MightyBoard/Motherboard/EepromMap.cc ****  * the Free Software Foundation, either version 3 of the License, or
   7:src/MightyBoard/Motherboard/EepromMap.cc ****  * (at your option) any later version.
   8:src/MightyBoard/Motherboard/EepromMap.cc ****  *
   9:src/MightyBoard/Motherboard/EepromMap.cc ****  * This program is distributed in the hope that it will be useful,
  10:src/MightyBoard/Motherboard/EepromMap.cc ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:src/MightyBoard/Motherboard/EepromMap.cc ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:src/MightyBoard/Motherboard/EepromMap.cc ****  * GNU General Public License for more details.
  13:src/MightyBoard/Motherboard/EepromMap.cc ****  *
  14:src/MightyBoard/Motherboard/EepromMap.cc ****  * You should have received a copy of the GNU General Public License
  15:src/MightyBoard/Motherboard/EepromMap.cc ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>
  16:src/MightyBoard/Motherboard/EepromMap.cc ****  */
  17:src/MightyBoard/Motherboard/EepromMap.cc **** 
  18:src/MightyBoard/Motherboard/EepromMap.cc **** #include "EepromMap.hh"
  19:src/MightyBoard/Motherboard/EepromMap.cc **** #include "Eeprom.hh"
  20:src/MightyBoard/Motherboard/EepromMap.cc **** //#include <avr/eeprom.h>
  21:src/MightyBoard/Motherboard/EepromMap.cc **** //#include <avr/delay.h>
  22:src/MightyBoard/Motherboard/EepromMap.cc **** 
  23:src/MightyBoard/Motherboard/EepromMap.cc **** //for thermistor generation
  24:src/MightyBoard/Motherboard/EepromMap.cc **** #include "ThermistorTable.hh"
  25:src/MightyBoard/Motherboard/EepromMap.cc **** 
  26:src/MightyBoard/Motherboard/EepromMap.cc **** // for sound definition
  27:src/MightyBoard/Motherboard/EepromMap.cc **** #include "Piezo.hh"
  28:src/MightyBoard/Motherboard/EepromMap.cc **** 
  29:src/MightyBoard/Motherboard/EepromMap.cc **** // for LED definition
  30:src/MightyBoard/Motherboard/EepromMap.cc **** #include "RGB_LED.hh"
  31:src/MightyBoard/Motherboard/EepromMap.cc **** 
  32:src/MightyBoard/Motherboard/EepromMap.cc **** // for cooling fan definition
  33:src/MightyBoard/Motherboard/EepromMap.cc **** #include "CoolingFan.hh"
  34:src/MightyBoard/Motherboard/EepromMap.cc **** #include "IAP.hh"
  35:src/MightyBoard/Motherboard/EepromMap.cc **** 
  36:src/MightyBoard/Motherboard/EepromMap.cc **** #include "Delay.hh"
  37:src/MightyBoard/Motherboard/EepromMap.cc **** 
  38:src/MightyBoard/Motherboard/EepromMap.cc **** extern "C" {
  39:src/MightyBoard/Motherboard/EepromMap.cc **** 	#include "lpc_types.h"
  40:src/MightyBoard/Motherboard/EepromMap.cc **** 	#include "comm.h"
  41:src/MightyBoard/Motherboard/EepromMap.cc **** }
  42:src/MightyBoard/Motherboard/EepromMap.cc **** 
  43:src/MightyBoard/Motherboard/EepromMap.cc **** namespace eeprom {
  44:src/MightyBoard/Motherboard/EepromMap.cc **** 
  45:src/MightyBoard/Motherboard/EepromMap.cc **** #define DEFAULT_P_VALUE  (7.0f)
  46:src/MightyBoard/Motherboard/EepromMap.cc **** #define DEFAULT_I_VALUE  (0.325f)
  47:src/MightyBoard/Motherboard/EepromMap.cc **** #define DEFAULT_D_VALUE  (36.0f)
  48:src/MightyBoard/Motherboard/EepromMap.cc **** 
  49:src/MightyBoard/Motherboard/EepromMap.cc **** 
  50:src/MightyBoard/Motherboard/EepromMap.cc **** #define THERM_R0_DEFAULT_VALUE (100000)
  51:src/MightyBoard/Motherboard/EepromMap.cc **** #define THERM_T0_DEFAULT_VALUE (25)
  52:src/MightyBoard/Motherboard/EepromMap.cc **** #define THERM_BETA_DEFAULT_VALUE (4067)
  53:src/MightyBoard/Motherboard/EepromMap.cc **** 
  54:src/MightyBoard/Motherboard/EepromMap.cc **** void write_ff_to_ram (void){
  27              	 .loc 1 54 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32              	.LBB26:
  33              	.LBB27:
  34              	.LBB28:
  35              	 .file 2 "src/MightyBoard/Motherboard/system/core_cmFunc.h"
   1:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /**************************************************************************//**
   2:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  * @file     core_cmFunc.h
   3:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  * @brief    CMSIS Cortex-M Core Function Access Header File
   4:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  * @version  V2.01
   5:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  * @date     06. December 2010
   6:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  *
   7:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  * @note
   8:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  * Copyright (C) 2009-2010 ARM Limited. All rights reserved.
   9:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  *
  10:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  * @par
  11:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  * within development tools that are supporting such ARM based processors. 
  14:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  *
  15:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  * @par
  16:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  *
  22:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  ******************************************************************************/
  23:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
  24:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #ifndef __CORE_CMFUNC_H__
  25:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #define __CORE_CMFUNC_H__
  26:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
  27:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /* ###########################  Core Function Access  ########################### */
  28:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /** \ingroup  CMSIS_Core_FunctionInterface   
  29:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  30:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   @{
  31:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  */
  32:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
  33:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #if defined ( __CC_ARM   ) /*------------------ RealView Compiler ----------------*/
  34:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /* ARM armcc specific functions */
  35:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
  36:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /* intrinsic void __enable_irq();     */
  37:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /* intrinsic void __disable_irq();    */
  38:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
  39:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /** \brief  Get Control Register
  40:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
  41:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     This function returns the content of the Control Register.
  42:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
  43:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     \return               Control Register value
  44:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  */
  45:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #if       (__ARMCC_VERSION <  400000)
  46:src/MightyBoard/Motherboard/system/core_cmFunc.h **** extern          uint32_t __get_CONTROL(void);
  47:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #else  /* (__ARMCC_VERSION >= 400000) */
  48:src/MightyBoard/Motherboard/system/core_cmFunc.h **** static __INLINE uint32_t __get_CONTROL(void)
  49:src/MightyBoard/Motherboard/system/core_cmFunc.h **** {
  50:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  51:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   return(__regControl);
  52:src/MightyBoard/Motherboard/system/core_cmFunc.h **** }
  53:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #endif /*  __ARMCC_VERSION  */ 
  54:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
  55:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
  56:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /** \brief  Set Control Register
  57:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
  58:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     This function writes the given value to the Control Register.
  59:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
  60:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     \param [in]    control  Control Register value to set
  61:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  */
  62:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #if       (__ARMCC_VERSION <  400000)
  63:src/MightyBoard/Motherboard/system/core_cmFunc.h **** extern          void __set_CONTROL(uint32_t control);
  64:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #else  /* (__ARMCC_VERSION >= 400000) */
  65:src/MightyBoard/Motherboard/system/core_cmFunc.h **** static __INLINE void __set_CONTROL(uint32_t control)
  66:src/MightyBoard/Motherboard/system/core_cmFunc.h **** {
  67:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  68:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   __regControl = control;
  69:src/MightyBoard/Motherboard/system/core_cmFunc.h **** }
  70:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #endif /*  __ARMCC_VERSION  */ 
  71:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
  72:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
  73:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /** \brief  Get ISPR Register
  74:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
  75:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     This function returns the content of the ISPR Register.
  76:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
  77:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     \return               ISPR Register value
  78:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  */
  79:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #if       (__ARMCC_VERSION <  400000)
  80:src/MightyBoard/Motherboard/system/core_cmFunc.h **** extern          uint32_t __get_IPSR(void);
  81:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #else  /* (__ARMCC_VERSION >= 400000) */
  82:src/MightyBoard/Motherboard/system/core_cmFunc.h **** static __INLINE uint32_t __get_IPSR(void)
  83:src/MightyBoard/Motherboard/system/core_cmFunc.h **** {
  84:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   register uint32_t __regIPSR          __ASM("ipsr");
  85:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   return(__regIPSR);
  86:src/MightyBoard/Motherboard/system/core_cmFunc.h **** }
  87:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #endif /*  __ARMCC_VERSION  */ 
  88:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
  89:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
  90:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /** \brief  Get APSR Register
  91:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
  92:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     This function returns the content of the APSR Register.
  93:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
  94:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     \return               APSR Register value
  95:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  */
  96:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #if       (__ARMCC_VERSION <  400000)
  97:src/MightyBoard/Motherboard/system/core_cmFunc.h **** extern          uint32_t __get_APSR(void);
  98:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #else  /* (__ARMCC_VERSION >= 400000) */
  99:src/MightyBoard/Motherboard/system/core_cmFunc.h **** static __INLINE uint32_t __get_APSR(void)
 100:src/MightyBoard/Motherboard/system/core_cmFunc.h **** {
 101:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   register uint32_t __regAPSR          __ASM("apsr");
 102:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   return(__regAPSR);
 103:src/MightyBoard/Motherboard/system/core_cmFunc.h **** }
 104:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #endif /*  __ARMCC_VERSION  */ 
 105:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 106:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 107:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /** \brief  Get xPSR Register
 108:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 109:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     This function returns the content of the xPSR Register.
 110:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 111:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     \return               xPSR Register value
 112:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  */
 113:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #if       (__ARMCC_VERSION <  400000)
 114:src/MightyBoard/Motherboard/system/core_cmFunc.h **** extern          uint32_t __get_xPSR(void);
 115:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #else  /* (__ARMCC_VERSION >= 400000) */
 116:src/MightyBoard/Motherboard/system/core_cmFunc.h **** static __INLINE uint32_t __get_xPSR(void)
 117:src/MightyBoard/Motherboard/system/core_cmFunc.h **** {
 118:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   register uint32_t __regXPSR          __ASM("xpsr");
 119:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   return(__regXPSR);
 120:src/MightyBoard/Motherboard/system/core_cmFunc.h **** }
 121:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #endif /*  __ARMCC_VERSION  */ 
 122:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 123:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 124:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 125:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 126:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 127:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 128:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     \return               PSP Register value
 129:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  */
 130:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #if       (__ARMCC_VERSION <  400000)
 131:src/MightyBoard/Motherboard/system/core_cmFunc.h **** extern          uint32_t __get_PSP(void);
 132:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #else  /* (__ARMCC_VERSION >= 400000) */
 133:src/MightyBoard/Motherboard/system/core_cmFunc.h **** static __INLINE uint32_t __get_PSP(void)
 134:src/MightyBoard/Motherboard/system/core_cmFunc.h **** {
 135:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 136:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   return(__regProcessStackPointer);
 137:src/MightyBoard/Motherboard/system/core_cmFunc.h **** }
 138:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #endif /*  __ARMCC_VERSION  */ 
 139:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 140:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 141:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 142:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 143:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 144:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 145:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 146:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  */
 147:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #if       (__ARMCC_VERSION <  400000)
 148:src/MightyBoard/Motherboard/system/core_cmFunc.h **** extern          void __set_PSP(uint32_t topOfProcStack);
 149:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #else  /* (__ARMCC_VERSION >= 400000) */
 150:src/MightyBoard/Motherboard/system/core_cmFunc.h **** static __INLINE void __set_PSP(uint32_t topOfProcStack)
 151:src/MightyBoard/Motherboard/system/core_cmFunc.h **** {
 152:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 153:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   __regProcessStackPointer = topOfProcStack;
 154:src/MightyBoard/Motherboard/system/core_cmFunc.h **** }
 155:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #endif /*  __ARMCC_VERSION  */ 
 156:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 157:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 158:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 159:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 160:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 161:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 162:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     \return               MSP Register value
 163:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  */
 164:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #if       (__ARMCC_VERSION <  400000)
 165:src/MightyBoard/Motherboard/system/core_cmFunc.h **** extern          uint32_t __get_MSP(void);
 166:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #else  /* (__ARMCC_VERSION >= 400000) */
 167:src/MightyBoard/Motherboard/system/core_cmFunc.h **** static __INLINE uint32_t __get_MSP(void)
 168:src/MightyBoard/Motherboard/system/core_cmFunc.h **** {
 169:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 170:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   return(__regMainStackPointer);
 171:src/MightyBoard/Motherboard/system/core_cmFunc.h **** }
 172:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #endif /*  __ARMCC_VERSION  */ 
 173:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 174:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 175:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /** \brief  Set Main Stack Pointer
 176:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 177:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     This function assigns the given value to the Main Stack Pointer (MSP).
 178:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 179:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 180:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  */
 181:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #if       (__ARMCC_VERSION <  400000)
 182:src/MightyBoard/Motherboard/system/core_cmFunc.h **** extern          void __set_MSP(uint32_t topOfMainStack);
 183:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #else  /* (__ARMCC_VERSION >= 400000) */
 184:src/MightyBoard/Motherboard/system/core_cmFunc.h **** static __INLINE void __set_MSP(uint32_t topOfMainStack)
 185:src/MightyBoard/Motherboard/system/core_cmFunc.h **** {
 186:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 187:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   __regMainStackPointer = topOfMainStack;
 188:src/MightyBoard/Motherboard/system/core_cmFunc.h **** }
 189:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #endif /*  __ARMCC_VERSION  */ 
 190:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 191:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 192:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /** \brief  Get Priority Mask
 193:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 194:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     This function returns the current state of the priority mask bit from the Priority Mask Registe
 195:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 196:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     \return               Priority Mask value
 197:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  */
 198:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #if       (__ARMCC_VERSION <  400000)
 199:src/MightyBoard/Motherboard/system/core_cmFunc.h **** extern          uint32_t __get_PRIMASK(void);
 200:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #else  /* (__ARMCC_VERSION >= 400000) */
 201:src/MightyBoard/Motherboard/system/core_cmFunc.h **** static __INLINE uint32_t __get_PRIMASK(void)
 202:src/MightyBoard/Motherboard/system/core_cmFunc.h **** {
 203:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 204:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   return(__regPriMask);
 205:src/MightyBoard/Motherboard/system/core_cmFunc.h **** }
 206:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #endif /*  __ARMCC_VERSION  */ 
 207:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 208:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 209:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /** \brief  Set Priority Mask
 210:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 211:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     This function assigns the given value to the Priority Mask Register.
 212:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 213:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     \param [in]    priMask  Priority Mask
 214:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  */
 215:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #if       (__ARMCC_VERSION <  400000)
 216:src/MightyBoard/Motherboard/system/core_cmFunc.h **** extern          void __set_PRIMASK(uint32_t priMask);
 217:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #else  /* (__ARMCC_VERSION >= 400000) */
 218:src/MightyBoard/Motherboard/system/core_cmFunc.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 219:src/MightyBoard/Motherboard/system/core_cmFunc.h **** {
 220:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 221:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   __regPriMask = (priMask);
 222:src/MightyBoard/Motherboard/system/core_cmFunc.h **** }
 223:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #endif /*  __ARMCC_VERSION  */ 
 224:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  
 225:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 226:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #if       (__CORTEX_M >= 0x03)
 227:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 228:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /** \brief  Enable FIQ
 229:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 230:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     This function enables FIQ interrupts by clearing the F-bit in the CPSR.
 231:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     Can only be executed in Privileged modes.
 232:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  */
 233:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #define __enable_fault_irq                __enable_fiq
 234:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 235:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 236:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /** \brief  Disable FIQ
 237:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 238:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     This function disables FIQ interrupts by setting the F-bit in the CPSR.
 239:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     Can only be executed in Privileged modes.
 240:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  */
 241:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #define __disable_fault_irq               __disable_fiq
 242:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 243:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 244:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /** \brief  Get Base Priority
 245:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 246:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     This function returns the current value of the Base Priority register.
 247:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 248:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     \return               Base Priority register value
 249:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  */
 250:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #if       (__ARMCC_VERSION <  400000)
 251:src/MightyBoard/Motherboard/system/core_cmFunc.h **** extern          uint32_t __get_BASEPRI(void);
 252:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #else  /* (__ARMCC_VERSION >= 400000) */
 253:src/MightyBoard/Motherboard/system/core_cmFunc.h **** static __INLINE uint32_t  __get_BASEPRI(void)
 254:src/MightyBoard/Motherboard/system/core_cmFunc.h **** {
 255:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 256:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   return(__regBasePri);
 257:src/MightyBoard/Motherboard/system/core_cmFunc.h **** }
 258:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #endif /*  __ARMCC_VERSION  */ 
 259:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 260:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 261:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /** \brief  Set Base Priority
 262:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 263:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     This function assigns the given value to the Base Priority register.
 264:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 265:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     \param [in]    basePri  Base Priority value to set
 266:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  */
 267:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #if       (__ARMCC_VERSION <  400000)
 268:src/MightyBoard/Motherboard/system/core_cmFunc.h **** extern          void __set_BASEPRI(uint32_t basePri);
 269:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #else  /* (__ARMCC_VERSION >= 400000) */
 270:src/MightyBoard/Motherboard/system/core_cmFunc.h **** static __INLINE void __set_BASEPRI(uint32_t basePri)
 271:src/MightyBoard/Motherboard/system/core_cmFunc.h **** {
 272:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 273:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   __regBasePri = (basePri & 0xff);
 274:src/MightyBoard/Motherboard/system/core_cmFunc.h **** }
 275:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #endif /*  __ARMCC_VERSION  */ 
 276:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  
 277:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 278:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /** \brief  Get Fault Mask
 279:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 280:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     This function returns the current value of the Fault Mask register.
 281:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 282:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     \return               Fault Mask register value
 283:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  */
 284:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #if       (__ARMCC_VERSION <  400000)
 285:src/MightyBoard/Motherboard/system/core_cmFunc.h **** extern          uint32_t __get_FAULTMASK(void);
 286:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #else  /* (__ARMCC_VERSION >= 400000) */
 287:src/MightyBoard/Motherboard/system/core_cmFunc.h **** static __INLINE uint32_t __get_FAULTMASK(void)
 288:src/MightyBoard/Motherboard/system/core_cmFunc.h **** {
 289:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 290:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   return(__regFaultMask);
 291:src/MightyBoard/Motherboard/system/core_cmFunc.h **** }
 292:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #endif /*  __ARMCC_VERSION  */ 
 293:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 294:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 295:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /** \brief  Set Fault Mask
 296:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 297:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     This function assigns the given value to the Fault Mask register.
 298:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 299:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     \param [in]    faultMask  Fault Mask value to set
 300:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  */
 301:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #if       (__ARMCC_VERSION <  400000)
 302:src/MightyBoard/Motherboard/system/core_cmFunc.h **** extern          void __set_FAULTMASK(uint32_t faultMask);
 303:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #else  /* (__ARMCC_VERSION >= 400000) */
 304:src/MightyBoard/Motherboard/system/core_cmFunc.h **** static __INLINE void __set_FAULTMASK(uint32_t faultMask)
 305:src/MightyBoard/Motherboard/system/core_cmFunc.h **** {
 306:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 307:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   __regFaultMask = (faultMask & 1);
 308:src/MightyBoard/Motherboard/system/core_cmFunc.h **** }
 309:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #endif /*  __ARMCC_VERSION  */ 
 310:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 311:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #endif /* (__CORTEX_M >= 0x03) */
 312:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 313:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 314:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #if       (__CORTEX_M == 0x04)
 315:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 316:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /** \brief  Get FPSCR
 317:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 318:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     This function returns the current value of the Floating Point Status/Control register.
 319:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 320:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     \return               Floating Point Status/Control register value
 321:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  */
 322:src/MightyBoard/Motherboard/system/core_cmFunc.h **** static __INLINE uint32_t __get_FPSCR(void)
 323:src/MightyBoard/Motherboard/system/core_cmFunc.h **** {
 324:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #if (__FPU_PRESENT == 1)
 325:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 326:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   return(__regfpscr);
 327:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #else
 328:src/MightyBoard/Motherboard/system/core_cmFunc.h ****    return(0);
 329:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #endif
 330:src/MightyBoard/Motherboard/system/core_cmFunc.h **** }
 331:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 332:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 333:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /** \brief  Set FPSCR
 334:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 335:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     This function assigns the given value to the Floating Point Status/Control register.
 336:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 337:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     \param [in]    fpscr  Floating Point Status/Control value to set
 338:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  */
 339:src/MightyBoard/Motherboard/system/core_cmFunc.h **** static __INLINE void __set_FPSCR(uint32_t fpscr)
 340:src/MightyBoard/Motherboard/system/core_cmFunc.h **** {
 341:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #if (__FPU_PRESENT == 1)
 342:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 343:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   __regfpscr = (fpscr);
 344:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #endif
 345:src/MightyBoard/Motherboard/system/core_cmFunc.h **** }
 346:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 347:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #endif /* (__CORTEX_M == 0x04) */
 348:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 349:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 350:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  #elif (defined (__ICCARM__)) /*---------------- ICC Compiler ---------------------*/
 351:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /* IAR iccarm specific functions */
 352:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 353:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #if defined (__ICCARM__)
 354:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
 355:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #endif
 356:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 357:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #pragma diag_suppress=Pe940
 358:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 359:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /** \brief  Enable IRQ Interrupts
 360:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 361:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   This function enables IRQ interrupts by clearing the I-bit in the CPSR.
 362:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   Can only be executed in Privileged modes.
 363:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  */
 364:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #define __enable_irq                              __enable_interrupt
 365:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 366:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 367:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /** \brief  Disable IRQ Interrupts
 368:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 369:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   This function disables IRQ interrupts by setting the I-bit in the CPSR.
 370:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   Can only be executed in Privileged modes.
 371:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  */
 372:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #define __disable_irq                             __disable_interrupt
 373:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 374:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 375:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /* intrinsic unsigned long __get_CONTROL( void ); (see intrinsic.h) */
 376:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /* intrinsic void __set_CONTROL( unsigned long ); (see intrinsic.h) */
 377:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 378:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 379:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /** \brief  Get ISPR Register
 380:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 381:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     This function returns the content of the ISPR Register.
 382:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 383:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     \return               ISPR Register value
 384:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  */
 385:src/MightyBoard/Motherboard/system/core_cmFunc.h **** static uint32_t __get_IPSR(void)
 386:src/MightyBoard/Motherboard/system/core_cmFunc.h **** {
 387:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   __ASM("mrs r0, ipsr");
 388:src/MightyBoard/Motherboard/system/core_cmFunc.h **** }
 389:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 390:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 391:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /** \brief  Get APSR Register
 392:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 393:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     This function returns the content of the APSR Register.
 394:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 395:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     \return               APSR Register value
 396:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  */
 397:src/MightyBoard/Motherboard/system/core_cmFunc.h **** static uint32_t __get_APSR(void)
 398:src/MightyBoard/Motherboard/system/core_cmFunc.h **** {
 399:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   __ASM("mrs r0, apsr");
 400:src/MightyBoard/Motherboard/system/core_cmFunc.h **** }
 401:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 402:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 403:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /** \brief  Get xPSR Register
 404:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 405:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     This function returns the content of the xPSR Register.
 406:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 407:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     \return               xPSR Register value
 408:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  */
 409:src/MightyBoard/Motherboard/system/core_cmFunc.h **** static uint32_t __get_xPSR(void)
 410:src/MightyBoard/Motherboard/system/core_cmFunc.h **** {
 411:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   __ASM("mrs r0, psr");           // assembler does not know "xpsr"
 412:src/MightyBoard/Motherboard/system/core_cmFunc.h **** }
 413:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 414:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 415:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 416:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 417:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 418:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 419:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     \return               PSP Register value
 420:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  */
 421:src/MightyBoard/Motherboard/system/core_cmFunc.h **** static uint32_t __get_PSP(void)
 422:src/MightyBoard/Motherboard/system/core_cmFunc.h **** {
 423:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   __ASM("mrs r0, psp");
 424:src/MightyBoard/Motherboard/system/core_cmFunc.h **** }
 425:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  
 426:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 427:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 428:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 429:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 430:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 431:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 432:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  */
 433:src/MightyBoard/Motherboard/system/core_cmFunc.h **** static void __set_PSP(uint32_t topOfProcStack)
 434:src/MightyBoard/Motherboard/system/core_cmFunc.h **** {
 435:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   __ASM("msr psp, r0");
 436:src/MightyBoard/Motherboard/system/core_cmFunc.h **** }
 437:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 438:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 439:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 440:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 441:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 442:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 443:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     \return               MSP Register value
 444:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  */
 445:src/MightyBoard/Motherboard/system/core_cmFunc.h **** static uint32_t __get_MSP(void)
 446:src/MightyBoard/Motherboard/system/core_cmFunc.h **** {
 447:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   __ASM("mrs r0, msp");
 448:src/MightyBoard/Motherboard/system/core_cmFunc.h **** }
 449:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  
 450:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 451:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /** \brief  Set Main Stack Pointer
 452:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 453:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     This function assigns the given value to the Main Stack Pointer (MSP).
 454:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 455:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 456:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  */
 457:src/MightyBoard/Motherboard/system/core_cmFunc.h **** static void __set_MSP(uint32_t topOfMainStack)
 458:src/MightyBoard/Motherboard/system/core_cmFunc.h **** {
 459:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   __ASM("msr msp, r0");
 460:src/MightyBoard/Motherboard/system/core_cmFunc.h **** }
 461:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  
 462:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 463:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /* intrinsic unsigned long __get_PRIMASK( void ); (see intrinsic.h) */
 464:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /* intrinsic void __set_PRIMASK( unsigned long ); (see intrinsic.h) */
 465:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  
 466:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 467:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #if       (__CORTEX_M >= 0x03)
 468:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 469:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /** \brief  Enable FIQ
 470:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 471:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     This function enables FIQ interrupts by clearing the F-bit in the CPSR.
 472:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     Can only be executed in Privileged modes.
 473:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  */
 474:src/MightyBoard/Motherboard/system/core_cmFunc.h **** static __INLINE void __enable_fault_irq(void)
 475:src/MightyBoard/Motherboard/system/core_cmFunc.h **** {
 476:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   __ASM ("cpsie f");
 477:src/MightyBoard/Motherboard/system/core_cmFunc.h **** }
 478:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 479:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 480:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /** \brief  Disable FIQ
 481:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 482:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     This function disables FIQ interrupts by setting the F-bit in the CPSR.
 483:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     Can only be executed in Privileged modes.
 484:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  */
 485:src/MightyBoard/Motherboard/system/core_cmFunc.h **** static __INLINE void __disable_fault_irq(void)
 486:src/MightyBoard/Motherboard/system/core_cmFunc.h **** {
 487:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   __ASM ("cpsid f");
 488:src/MightyBoard/Motherboard/system/core_cmFunc.h **** }
 489:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 490:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 491:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /* intrinsic unsigned long __get_BASEPRI( void );   (see intrinsic.h) */
 492:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /* intrinsic void __set_BASEPRI( unsigned long );   (see intrinsic.h) */
 493:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /* intrinsic unsigned long __get_FAULTMASK( void ); (see intrinsic.h) */
 494:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /* intrinsic void __set_FAULTMASK(unsigned long);   (see intrinsic.h) */
 495:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 496:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #endif /* (__CORTEX_M >= 0x03) */
 497:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 498:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 499:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #if       (__CORTEX_M == 0x04)
 500:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 501:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /** \brief  Get FPSCR
 502:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 503:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     This function returns the current value of the Floating Point Status/Control register.
 504:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 505:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     \return               Floating Point Status/Control register value
 506:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  */
 507:src/MightyBoard/Motherboard/system/core_cmFunc.h **** static uint32_t __get_FPSCR(void)
 508:src/MightyBoard/Motherboard/system/core_cmFunc.h **** {
 509:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #if (__FPU_PRESENT == 1)
 510:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   __ASM("vmrs r0, fpscr"); 
 511:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #else
 512:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   return(0);
 513:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #endif
 514:src/MightyBoard/Motherboard/system/core_cmFunc.h **** }
 515:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 516:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 517:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /** \brief  Set FPSCR
 518:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 519:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     This function assigns the given value to the Floating Point Status/Control register.
 520:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 521:src/MightyBoard/Motherboard/system/core_cmFunc.h ****     \param [in]    fpscr  Floating Point Status/Control value to set
 522:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  */
 523:src/MightyBoard/Motherboard/system/core_cmFunc.h **** static void __set_FPSCR(uint32_t fpscr)
 524:src/MightyBoard/Motherboard/system/core_cmFunc.h **** {
 525:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #if (__FPU_PRESENT == 1)
 526:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   __ASM("vmsr fpscr, r0");
 527:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #endif
 528:src/MightyBoard/Motherboard/system/core_cmFunc.h **** }
 529:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 530:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #endif /* (__CORTEX_M == 0x04) */
 531:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 532:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #pragma diag_default=Pe940
 533:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 534:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 535:src/MightyBoard/Motherboard/system/core_cmFunc.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
 536:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /* GNU gcc specific functions */
 537:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 538:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /** \brief  Enable IRQ Interrupts
 539:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 540:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   This function enables IRQ interrupts by clearing the I-bit in the CPSR.
 541:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   Can only be executed in Privileged modes.
 542:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  */
 543:src/MightyBoard/Motherboard/system/core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
 544:src/MightyBoard/Motherboard/system/core_cmFunc.h **** {
 545:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   __ASM volatile ("cpsie i");
 546:src/MightyBoard/Motherboard/system/core_cmFunc.h **** }
 547:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 548:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 549:src/MightyBoard/Motherboard/system/core_cmFunc.h **** /** \brief  Disable IRQ Interrupts
 550:src/MightyBoard/Motherboard/system/core_cmFunc.h **** 
 551:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   This function disables IRQ interrupts by setting the I-bit in the CPSR.
 552:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   Can only be executed in Privileged modes.
 553:src/MightyBoard/Motherboard/system/core_cmFunc.h ****  */
 554:src/MightyBoard/Motherboard/system/core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
 555:src/MightyBoard/Motherboard/system/core_cmFunc.h **** {
 556:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   __ASM volatile ("cpsid i");
  36              	 .loc 2 556 0
  37              	
  38 0000 72B6     	 cpsid i
  39              	
  40              	.LVL0:
  41              	 .thumb
  42 0002 4FF4E043 	 mov r3,#28672
  43 0006 C1F20003 	 movt r3,4096
  44              	.LBE28:
  45              	.LBE27:
  55:src/MightyBoard/Motherboard/EepromMap.cc **** 	uint32_t i;
  56:src/MightyBoard/Motherboard/EepromMap.cc **** 	__disable_irq ();
  57:src/MightyBoard/Motherboard/EepromMap.cc **** 	for (i = 0x00000000; i < eeprom_info::EEPROM_SIZE; i++,i++,i++,i++) {
  58:src/MightyBoard/Motherboard/EepromMap.cc **** 		eeprom_address(EEPROM_START_ADDRESS + i, 0) = 0xffffffff;
  46              	 .loc 1 58 0
  47 000a 4FF0FF31 	 mov r1,#-1
  57:src/MightyBoard/Motherboard/EepromMap.cc **** 	for (i = 0x00000000; i < eeprom_info::EEPROM_SIZE; i++,i++,i++,i++) {
  48              	 .loc 1 57 0
  49 000e 4FF4F042 	 mov r2,#30720
  50 0012 C1F20002 	 movt r2,4096
  51              	.LVL1:
  52              	.L2:
  53              	 .loc 1 58 0 discriminator 2
  54 0016 43F8041B 	 str r1,[r3],#4
  57:src/MightyBoard/Motherboard/EepromMap.cc **** 	for (i = 0x00000000; i < eeprom_info::EEPROM_SIZE; i++,i++,i++,i++) {
  55              	 .loc 1 57 0 discriminator 2
  56 001a 9342     	 cmp r3,r2
  57 001c FBD1     	 bne .L2
  58              	.LBB29:
  59              	.LBB30:
 545:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   __ASM volatile ("cpsie i");
  60              	 .loc 2 545 0
  61              	
  62 001e 62B6     	 cpsie i
  63              	
  64              	 .thumb
  65              	.LBE30:
  66              	.LBE29:
  67              	.LBE26:
  59:src/MightyBoard/Motherboard/EepromMap.cc **** //		xprintf("%x %x" " (%s:%d)\n",EEPROM_START_ADDRESS + i,eeprom_address(EEPROM_START_ADDRESS + i, 
  60:src/MightyBoard/Motherboard/EepromMap.cc **** 	}
  61:src/MightyBoard/Motherboard/EepromMap.cc **** 	__enable_irq ();
  62:src/MightyBoard/Motherboard/EepromMap.cc **** };
  68              	 .loc 1 62 0
  69 0020 7047     	 bx lr
  70              	 .cfi_endproc
  71              	.LFE91:
  73 0022 00BF     	 .section .text._ZN6eeprom19read_all_from_flashEv,"ax",%progbits
  74              	 .align 2
  75              	 .global _ZN6eeprom19read_all_from_flashEv
  76              	 .thumb
  77              	 .thumb_func
  79              	_ZN6eeprom19read_all_from_flashEv:
  80              	.LFB92:
  63:src/MightyBoard/Motherboard/EepromMap.cc **** 
  64:src/MightyBoard/Motherboard/EepromMap.cc **** void read_all_from_flash (void){
  81              	 .loc 1 64 0
  82              	 .cfi_startproc
  83              	 
  84              	 
  85              	 
  86              	.LBB31:
  87              	.LBB32:
  88              	.LBB33:
  89              	 .loc 2 556 0
  90              	
  91 0000 72B6     	 cpsid i
  92              	
  93              	.LVL2:
  94              	 .thumb
  95 0002 4FF40053 	 mov r3,#8192
  96              	.LVL3:
  97              	.L5:
  98              	 .loc 1 64 0 discriminator 2
  99 0006 03F18052 	 add r2,r3,#268435456
 100 000a 02F5A042 	 add r2,r2,#20480
 101              	.LBE33:
 102              	.LBE32:
  65:src/MightyBoard/Motherboard/EepromMap.cc **** 	uint32_t i;
  66:src/MightyBoard/Motherboard/EepromMap.cc **** 	__disable_irq ();
  67:src/MightyBoard/Motherboard/EepromMap.cc **** //		xprintf("%x %x" " (%s:%d)\n",EEPROM_START_ADDRESS+i,eeprom_address(EEPROM_START_ADDRESS+i, 0),_
  68:src/MightyBoard/Motherboard/EepromMap.cc **** 	for (i = 0x00000000; i < eeprom_info::EEPROM_SIZE; i++,i++,i++,i++) {
  69:src/MightyBoard/Motherboard/EepromMap.cc **** 		eeprom_address(EEPROM_START_ADDRESS + i, 0) = eeprom_address(EEPROM_FLASH_AREA_START + i, 0);
 103              	 .loc 1 69 0 discriminator 2
 104 000e 53F8041B 	 ldr r1,[r3],#4
 105 0012 1160     	 str r1,[r2,#0]
  68:src/MightyBoard/Motherboard/EepromMap.cc **** 	for (i = 0x00000000; i < eeprom_info::EEPROM_SIZE; i++,i++,i++,i++) {
 106              	 .loc 1 68 0 discriminator 2
 107 0014 B3F5205F 	 cmp r3,#10240
 108 0018 F5D1     	 bne .L5
 109              	.LBB34:
 110              	.LBB35:
 545:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   __ASM volatile ("cpsie i");
 111              	 .loc 2 545 0
 112              	
 113 001a 62B6     	 cpsie i
 114              	
 115              	 .thumb
 116              	.LBE35:
 117              	.LBE34:
 118              	.LBE31:
  70:src/MightyBoard/Motherboard/EepromMap.cc **** //		xprintf("%x %x" " (%s:%d)\n",EEPROM_FLASH_AREA_START+i,eeprom_address(EEPROM_FLASH_AREA_START+i
  71:src/MightyBoard/Motherboard/EepromMap.cc **** 	}
  72:src/MightyBoard/Motherboard/EepromMap.cc **** //		xprintf("%x %x" " (%s:%d)\n",EEPROM_START_ADDRESS+i,eeprom_address(EEPROM_START_ADDRESS+i, 0),_
  73:src/MightyBoard/Motherboard/EepromMap.cc **** 	__enable_irq ();
  74:src/MightyBoard/Motherboard/EepromMap.cc **** };
 119              	 .loc 1 74 0
 120 001c 7047     	 bx lr
 121              	 .cfi_endproc
 122              	.LFE92:
 124 001e 00BF     	 .section .text._ZN6eeprom13save_to_flashEv,"ax",%progbits
 125              	 .align 2
 126              	 .global _ZN6eeprom13save_to_flashEv
 127              	 .thumb
 128              	 .thumb_func
 130              	_ZN6eeprom13save_to_flashEv:
 131              	.LFB93:
  75:src/MightyBoard/Motherboard/EepromMap.cc **** 
  76:src/MightyBoard/Motherboard/EepromMap.cc **** void save_to_flash (void) {
 132              	 .loc 1 76 0
 133              	 .cfi_startproc
 134              	 
 135              	 
 136 0000 08B5     	 push {r3,lr}
 137              	.LCFI0:
 138              	 .cfi_def_cfa_offset 8
 139              	 .cfi_offset 14,-4
 140              	 .cfi_offset 3,-8
 141              	.LBB36:
  77:src/MightyBoard/Motherboard/EepromMap.cc **** 	xprintf("save_to_flash" " (%s:%d)\n",_F_,_L_);
 142              	 .loc 1 77 0
 143 0002 40F20000 	 movw r0,#:lower16:.LC5
 144 0006 C0F20000 	 movt r0,#:upper16:.LC5
 145 000a 0549     	 ldr r1,.L9
 146 000c 4FF04D02 	 mov r2,#77
 147 0010 FFF7FEFF 	 bl xprintf
 148              	.LBB37:
 149              	.LBB38:
 150              	 .loc 2 556 0
 151              	
 152 0014 72B6     	 cpsid i
 153              	
 154              	.LVL4:
 155              	 .thumb
 156              	.LBE38:
 157              	.LBE37:
 158              	.LBB39:
 159              	.LBB40:
 545:src/MightyBoard/Motherboard/system/core_cmFunc.h ****   __ASM volatile ("cpsie i");
 160              	 .loc 2 545 0
 161              	
 162 0016 62B6     	 cpsie i
 163              	
 164              	 .thumb
 165              	.LBE40:
 166              	.LBE39:
  78:src/MightyBoard/Motherboard/EepromMap.cc **** 	__disable_irq ();
  79:src/MightyBoard/Motherboard/EepromMap.cc **** 	IAP in_ap_prog;
  80:src/MightyBoard/Motherboard/EepromMap.cc **** //	int error_code_ret = in_ap_prog.erase(USER_FLASH_AREA_START, USER_FLASH_AREA_START);
  81:src/MightyBoard/Motherboard/EepromMap.cc **** //	error_code_ret = in_ap_prog.write((char)0x10007000, (char)USER_FLASH_AREA_START, (int)USER_FLASH
  82:src/MightyBoard/Motherboard/EepromMap.cc **** 	// read all variables back into Ram
  83:src/MightyBoard/Motherboard/EepromMap.cc **** 	__enable_irq ();
  84:src/MightyBoard/Motherboard/EepromMap.cc **** 	clearflashupdate();
 167              	 .loc 1 84 0
 168 0018 FFF7FEFF 	 bl _ZN6eeprom16clearflashupdateEv
 169              	.LBE36:
  85:src/MightyBoard/Motherboard/EepromMap.cc **** };
 170              	 .loc 1 85 0
 171 001c 08BD     	 pop {r3,pc}
 172              	.L10:
 173 001e 00BF     	 .align 2
 174              	.L9:
 175 0020 1C000000 	 .word .LC6+28
 176              	 .cfi_endproc
 177              	.LFE93:
 179              	 .section .text._ZN6eeprom20setDefaultCoolingFanEt,"ax",%progbits
 180              	 .align 2
 181              	 .global _ZN6eeprom20setDefaultCoolingFanEt
 182              	 .thumb
 183              	 .thumb_func
 185              	_ZN6eeprom20setDefaultCoolingFanEt:
 186              	.LFB94:
  86:src/MightyBoard/Motherboard/EepromMap.cc **** /*
  87:src/MightyBoard/Motherboard/EepromMap.cc **** uint8_t microstep_pinout(uint8_t port_no) {
  88:src/MightyBoard/Motherboard/EepromMap.cc **** 	uint8_t microsteping_port;
  89:src/MightyBoard/Motherboard/EepromMap.cc **** 	for (uint8_t ii = 0; ii < 5; ii++){   //Counts through STEPPER_COUNT
  90:src/MightyBoard/Motherboard/EepromMap.cc **** 		for (uint8_t iii = 0; ii < 3; iii++){
  91:src/MightyBoard/Motherboard/EepromMap.cc **** 			uint8_t port_bit = 0x1 << microstep_port_array [ii][iii][1];
  92:src/MightyBoard/Motherboard/EepromMap.cc **** 			if (microstep_port_array [ii][iii][0] == port_no) {
  93:src/MightyBoard/Motherboard/EepromMap.cc **** 				microsteping_port += (microstep_port_array [ii][iii][2] << port_bit);
  94:src/MightyBoard/Motherboard/EepromMap.cc **** 			}
  95:src/MightyBoard/Motherboard/EepromMap.cc **** 		}
  96:src/MightyBoard/Motherboard/EepromMap.cc **** 	}
  97:src/MightyBoard/Motherboard/EepromMap.cc **** 	return microsteping_port;
  98:src/MightyBoard/Motherboard/EepromMap.cc **** }
  99:src/MightyBoard/Motherboard/EepromMap.cc **** */
 100:src/MightyBoard/Motherboard/EepromMap.cc **** /**
 101:src/MightyBoard/Motherboard/EepromMap.cc ****  *
 102:src/MightyBoard/Motherboard/EepromMap.cc ****  * @param eeprom_base start of eeprom map of cooling settings
 103:src/MightyBoard/Motherboard/EepromMap.cc ****  */
 104:src/MightyBoard/Motherboard/EepromMap.cc **** void setDefaultCoolingFan(uint16_t eeprom_base){
 187              	 .loc 1 104 0
 188              	 .cfi_startproc
 189              	 
 190              	 
 191              	.LVL5:
 192 0000 10B5     	 push {r4,lr}
 193              	.LCFI1:
 194              	 .cfi_def_cfa_offset 8
 195              	 .cfi_offset 14,-4
 196              	 .cfi_offset 4,-8
 197 0002 0446     	 mov r4,r0
 198              	.LVL6:
 199              	.LBB41:
 105:src/MightyBoard/Motherboard/EepromMap.cc **** 
 106:src/MightyBoard/Motherboard/EepromMap.cc **** 	uint8_t fan_settings[] = {1, DEFAULT_COOLING_FAN_SETPOINT_C};
 107:src/MightyBoard/Motherboard/EepromMap.cc **** 	setEeprom8(eeprom_base + cooler_eeprom_offsets::ENABLE_OFFSET, fan_settings[0]);
 200              	 .loc 1 107 0
 201 0004 4FF00101 	 mov r1,#1
 202 0008 FFF7FEFF 	 bl _ZN6eeprom10setEeprom8Eth
 203              	.LVL7:
 108:src/MightyBoard/Motherboard/EepromMap.cc **** 	setEeprom8(eeprom_base + cooler_eeprom_offsets::ENABLE_OFFSET+1, fan_settings[1]);
 204              	 .loc 1 108 0
 205 000c 04F10100 	 add r0,r4,#1
 206 0010 80B2     	 uxth r0,r0
 207 0012 4FF03201 	 mov r1,#50
 208 0016 FFF7FEFF 	 bl _ZN6eeprom10setEeprom8Eth
 209              	.LBE41:
 109:src/MightyBoard/Motherboard/EepromMap.cc **** //    eeprom_write_block( fan_settings, (uint8_t*)(eeprom_base + cooler_eeprom_offsets::ENABLE_OFFS
 110:src/MightyBoard/Motherboard/EepromMap.cc **** }
 210              	 .loc 1 110 0
 211 001a 10BD     	 pop {r4,pc}
 212              	 .cfi_endproc
 213              	.LFE94:
 215              	 .section .text._ZN6eeprom13setDefaultPIDEt,"ax",%progbits
 216              	 .align 2
 217              	 .global _ZN6eeprom13setDefaultPIDEt
 218              	 .thumb
 219              	 .thumb_func
 221              	_ZN6eeprom13setDefaultPIDEt:
 222              	.LFB95:
 111:src/MightyBoard/Motherboard/EepromMap.cc **** 
 112:src/MightyBoard/Motherboard/EepromMap.cc **** 
 113:src/MightyBoard/Motherboard/EepromMap.cc **** /**
 114:src/MightyBoard/Motherboard/EepromMap.cc ****  * Start of PID block of EEPROM. Can be extruder or HPB
 115:src/MightyBoard/Motherboard/EepromMap.cc ****  * @param eeprom_base
 116:src/MightyBoard/Motherboard/EepromMap.cc ****  */
 117:src/MightyBoard/Motherboard/EepromMap.cc **** void setDefaultPID(uint16_t eeprom_base)
 118:src/MightyBoard/Motherboard/EepromMap.cc **** {
 223              	 .loc 1 118 0
 224              	 .cfi_startproc
 225              	 
 226              	 
 227              	.LVL8:
 228 0000 10B5     	 push {r4,lr}
 229              	.LCFI2:
 230              	 .cfi_def_cfa_offset 8
 231              	 .cfi_offset 14,-4
 232              	 .cfi_offset 4,-8
 233 0002 0446     	 mov r4,r0
 119:src/MightyBoard/Motherboard/EepromMap.cc **** 	setEeprom16(eeprom_base + pid_eeprom_offsets::P_TERM_OFFSET, DEFAULT_P_VALUE);
 234              	 .loc 1 119 0
 235 0004 4FF00701 	 mov r1,#7
 236 0008 FFF7FEFF 	 bl _ZN6eeprom11setEeprom16Ett
 237              	.LVL9:
 120:src/MightyBoard/Motherboard/EepromMap.cc **** 	setEeprom16(eeprom_base + pid_eeprom_offsets::I_TERM_OFFSET, DEFAULT_I_VALUE);
 238              	 .loc 1 120 0
 239 000c 04F10200 	 add r0,r4,#2
 240 0010 80B2     	 uxth r0,r0
 241 0012 4FF00001 	 mov r1,#0
 242 0016 FFF7FEFF 	 bl _ZN6eeprom11setEeprom16Ett
 121:src/MightyBoard/Motherboard/EepromMap.cc **** 	setEeprom16(eeprom_base + pid_eeprom_offsets::D_TERM_OFFSET, DEFAULT_D_VALUE);
 243              	 .loc 1 121 0
 244 001a 04F10400 	 add r0,r4,#4
 245 001e 80B2     	 uxth r0,r0
 246 0020 4FF02401 	 mov r1,#36
 247 0024 FFF7FEFF 	 bl _ZN6eeprom11setEeprom16Ett
 122:src/MightyBoard/Motherboard/EepromMap.cc **** //	setEepromFixed16(( eeprom_base + pid_eeprom_offsets::P_TERM_OFFSET ), DEFAULT_P_VALUE);
 123:src/MightyBoard/Motherboard/EepromMap.cc **** //	setEepromFixed16(( eeprom_base + pid_eeprom_offsets::I_TERM_OFFSET ), DEFAULT_I_VALUE);
 124:src/MightyBoard/Motherboard/EepromMap.cc **** //	setEepromFixed16(( eeprom_base + pid_eeprom_offsets::D_TERM_OFFSET ), DEFAULT_D_VALUE);
 125:src/MightyBoard/Motherboard/EepromMap.cc **** }
 248              	 .loc 1 125 0
 249 0028 10BD     	 pop {r4,pc}
 250              	 .cfi_endproc
 251              	.LFE95:
 253 002a 00BF     	 .section .text._ZN6eeprom19setDefaultsExtruderEit,"ax",%progbits
 254              	 .align 2
 255              	 .global _ZN6eeprom19setDefaultsExtruderEit
 256              	 .thumb
 257              	 .thumb_func
 259              	_ZN6eeprom19setDefaultsExtruderEit:
 260              	.LFB96:
 126:src/MightyBoard/Motherboard/EepromMap.cc **** 
 127:src/MightyBoard/Motherboard/EepromMap.cc **** 
 128:src/MightyBoard/Motherboard/EepromMap.cc **** /**
 129:src/MightyBoard/Motherboard/EepromMap.cc ****  *
 130:src/MightyBoard/Motherboard/EepromMap.cc ****  * @param index
 131:src/MightyBoard/Motherboard/EepromMap.cc ****  * @param eeprom_base start of this extruder's data in the eeprom
 132:src/MightyBoard/Motherboard/EepromMap.cc ****  */
 133:src/MightyBoard/Motherboard/EepromMap.cc **** void setDefaultsExtruder(int index,uint16_t eeprom_base)
 134:src/MightyBoard/Motherboard/EepromMap.cc **** {
 261              	 .loc 1 134 0
 262              	 .cfi_startproc
 263              	 
 264              	 
 265              	.LVL10:
 266 0000 10B5     	 push {r4,lr}
 267              	.LCFI3:
 268              	 .cfi_def_cfa_offset 8
 269              	 .cfi_offset 14,-4
 270              	 .cfi_offset 4,-8
 271 0002 0C46     	 mov r4,r1
 272              	.LVL11:
 273              	.LBB42:
 274              	.LBB43:
 135:src/MightyBoard/Motherboard/EepromMap.cc **** 	uint8_t featuresT0 = eeprom_info::HEATER_0_PRESENT | eeprom_info::HEATER_0_THERMISTOR | eeprom_inf
 136:src/MightyBoard/Motherboard/EepromMap.cc **** 	uint8_t featuresT1 = eeprom_info::HEATER_1_PRESENT | eeprom_info::HEATER_1_THERMISTOR | eeprom_inf
 137:src/MightyBoard/Motherboard/EepromMap.cc **** 	if( index == 0 ){
 275              	 .loc 1 137 0
 276 0004 60B9     	 cbnz r0,.L14
 277              	.LVL12:
 278              	.LBB44:
 138:src/MightyBoard/Motherboard/EepromMap.cc **** 		int slaveId = '12';
 139:src/MightyBoard/Motherboard/EepromMap.cc **** 		setEeprom8(eeprom_base + toolhead_eeprom_offsets::FEATURES, featuresT0);
 279              	 .loc 1 139 0
 280 0006 0846     	 mov r0,r1
 281              	.LVL13:
 282 0008 4FF00701 	 mov r1,#7
 283              	.LVL14:
 284 000c FFF7FEFF 	 bl _ZN6eeprom10setEeprom8Eth
 140:src/MightyBoard/Motherboard/EepromMap.cc **** 		setEeprom8(eeprom_base + toolhead_eeprom_offsets::SLAVE_ID, slaveId);
 285              	 .loc 1 140 0
 286 0010 04F11800 	 add r0,r4,#24
 287 0014 80B2     	 uxth r0,r0
 288 0016 4FF03201 	 mov r1,#50
 289 001a FFF7FEFF 	 bl _ZN6eeprom10setEeprom8Eth
 290 001e 0BE0     	 b .L15
 291              	.LVL15:
 292              	.L14:
 293              	.LBE44:
 294              	.LBB45:
 141:src/MightyBoard/Motherboard/EepromMap.cc **** //	    eeprom_write_byte( (uint8_t*)(eeprom_base + toolhead_eeprom_offsets::FEATURES),featuresT0);
 142:src/MightyBoard/Motherboard/EepromMap.cc **** //		eeprom_write_byte( (uint8_t*)eeprom_base +toolhead_eeprom_offsets::SLAVE_ID,slaveId);
 143:src/MightyBoard/Motherboard/EepromMap.cc **** 	}
 144:src/MightyBoard/Motherboard/EepromMap.cc **** 	else{
 145:src/MightyBoard/Motherboard/EepromMap.cc **** 		int slaveId = '32';
 146:src/MightyBoard/Motherboard/EepromMap.cc **** 		setEeprom8(eeprom_base + toolhead_eeprom_offsets::FEATURES, featuresT1);
 295              	 .loc 1 146 0
 296 0020 0846     	 mov r0,r1
 297              	.LVL16:
 298 0022 4FF03801 	 mov r1,#56
 299              	.LVL17:
 300 0026 FFF7FEFF 	 bl _ZN6eeprom10setEeprom8Eth
 147:src/MightyBoard/Motherboard/EepromMap.cc **** 		setEeprom8(eeprom_base + toolhead_eeprom_offsets::SLAVE_ID, slaveId);
 301              	 .loc 1 147 0
 302 002a 04F11800 	 add r0,r4,#24
 303 002e 80B2     	 uxth r0,r0
 304 0030 4FF03201 	 mov r1,#50
 305 0034 FFF7FEFF 	 bl _ZN6eeprom10setEeprom8Eth
 306              	.LVL18:
 307              	.L15:
 308              	.LBE45:
 309              	.LBE43:
 148:src/MightyBoard/Motherboard/EepromMap.cc **** //		eeprom_write_byte( (uint8_t*)(eeprom_base + toolhead_eeprom_offsets::FEATURES),featuresT1);
 149:src/MightyBoard/Motherboard/EepromMap.cc **** //		eeprom_write_byte( (uint8_t*)eeprom_base +toolhead_eeprom_offsets::SLAVE_ID,slaveId);
 150:src/MightyBoard/Motherboard/EepromMap.cc **** 	}
 151:src/MightyBoard/Motherboard/EepromMap.cc **** 	setDefaultPID(eeprom_base + toolhead_eeprom_offsets::EXTRUDER_PID_BASE);
 310              	 .loc 1 151 0
 311 0038 04F10A00 	 add r0,r4,#10
 312 003c 80B2     	 uxth r0,r0
 313 003e FFF7FEFF 	 bl _ZN6eeprom13setDefaultPIDEt
 152:src/MightyBoard/Motherboard/EepromMap.cc ****     setDefaultPID(eeprom_base + toolhead_eeprom_offsets::HBP_PID_BASE);
 314              	 .loc 1 152 0
 315 0042 04F11000 	 add r0,r4,#16
 316 0046 80B2     	 uxth r0,r0
 317 0048 FFF7FEFF 	 bl _ZN6eeprom13setDefaultPIDEt
 153:src/MightyBoard/Motherboard/EepromMap.cc ****     setDefaultCoolingFan(eeprom_base + toolhead_eeprom_offsets::COOLING_FAN_SETTINGS);
 318              	 .loc 1 153 0
 319 004c 04F11A00 	 add r0,r4,#26
 320 0050 80B2     	 uxth r0,r0
 321 0052 FFF7FEFF 	 bl _ZN6eeprom20setDefaultCoolingFanEt
 154:src/MightyBoard/Motherboard/EepromMap.cc **** 
 155:src/MightyBoard/Motherboard/EepromMap.cc ****     setEeprom16(eeprom_base + toolhead_eeprom_offsets::BACKOFF_FORWARD_TIME, 500);
 322              	 .loc 1 155 0
 323 0056 04F10600 	 add r0,r4,#6
 324 005a 80B2     	 uxth r0,r0
 325 005c 4FF4FA71 	 mov r1,#500
 326 0060 FFF7FEFF 	 bl _ZN6eeprom11setEeprom16Ett
 156:src/MightyBoard/Motherboard/EepromMap.cc ****     setEeprom16(eeprom_base + toolhead_eeprom_offsets::BACKOFF_STOP_TIME, 5);
 327              	 .loc 1 156 0
 328 0064 04F10200 	 add r0,r4,#2
 329 0068 80B2     	 uxth r0,r0
 330 006a 4FF00501 	 mov r1,#5
 331 006e FFF7FEFF 	 bl _ZN6eeprom11setEeprom16Ett
 157:src/MightyBoard/Motherboard/EepromMap.cc ****     setEeprom16(eeprom_base + toolhead_eeprom_offsets::BACKOFF_REVERSE_TIME, 500);
 332              	 .loc 1 157 0
 333 0072 04F10400 	 add r0,r4,#4
 334 0076 80B2     	 uxth r0,r0
 335 0078 4FF4FA71 	 mov r1,#500
 336 007c FFF7FEFF 	 bl _ZN6eeprom11setEeprom16Ett
 158:src/MightyBoard/Motherboard/EepromMap.cc ****     setEeprom16(eeprom_base + toolhead_eeprom_offsets::BACKOFF_TRIGGER_TIME, 300);
 337              	 .loc 1 158 0
 338 0080 04F10800 	 add r0,r4,#8
 339 0084 80B2     	 uxth r0,r0
 340 0086 4FF49671 	 mov r1,#300
 341 008a FFF7FEFF 	 bl _ZN6eeprom11setEeprom16Ett
 342              	.LBE42:
 159:src/MightyBoard/Motherboard/EepromMap.cc **** //    eeprom_write_word((uint16_t*)(eeprom_base + toolhead_eeprom_offsets::BACKOFF_FORWARD_TIME),50
 160:src/MightyBoard/Motherboard/EepromMap.cc **** //    eeprom_write_word((uint16_t*)(eeprom_base + toolhead_eeprom_offsets::BACKOFF_STOP_TIME),5);
 161:src/MightyBoard/Motherboard/EepromMap.cc **** //    eeprom_write_word((uint16_t*)(eeprom_base + toolhead_eeprom_offsets::BACKOFF_REVERSE_TIME),50
 162:src/MightyBoard/Motherboard/EepromMap.cc **** //    eeprom_write_word((uint16_t*)(eeprom_base + toolhead_eeprom_offsets::BACKOFF_TRIGGER_TIME),30
 163:src/MightyBoard/Motherboard/EepromMap.cc **** }
 343              	 .loc 1 163 0
 344 008e 10BD     	 pop {r4,pc}
 345              	 .cfi_endproc
 346              	.LFE96:
 348              	 .section .text._ZN6eeprom18SetDefaultsThermalEt,"ax",%progbits
 349              	 .align 2
 350              	 .global _ZN6eeprom18SetDefaultsThermalEt
 351              	 .thumb
 352              	 .thumb_func
 354              	_ZN6eeprom18SetDefaultsThermalEt:
 355              	.LFB97:
 164:src/MightyBoard/Motherboard/EepromMap.cc **** 
 165:src/MightyBoard/Motherboard/EepromMap.cc **** 
 166:src/MightyBoard/Motherboard/EepromMap.cc **** /**
 167:src/MightyBoard/Motherboard/EepromMap.cc ****  * Set thermal table offsets
 168:src/MightyBoard/Motherboard/EepromMap.cc ****  * @param eeprom_base
 169:src/MightyBoard/Motherboard/EepromMap.cc ****  */
 170:src/MightyBoard/Motherboard/EepromMap.cc **** void SetDefaultsThermal(uint16_t eeprom_base)
 171:src/MightyBoard/Motherboard/EepromMap.cc **** {
 356              	 .loc 1 171 0
 357              	 .cfi_startproc
 358              	 
 359              	 
 360              	.LVL19:
 361 0000 F8B5     	 push {r3,r4,r5,r6,r7,lr}
 362              	.LCFI4:
 363              	 .cfi_def_cfa_offset 24
 364              	 .cfi_offset 14,-4
 365              	 .cfi_offset 7,-8
 366              	 .cfi_offset 6,-12
 367              	 .cfi_offset 5,-16
 368              	 .cfi_offset 4,-20
 369              	 .cfi_offset 3,-24
 370 0002 0446     	 mov r4,r0
 371              	.LBB46:
 172:src/MightyBoard/Motherboard/EepromMap.cc ****     setEeprom16(eeprom_base + therm_eeprom_offsets::THERM_R0_OFFSET, THERM_R0_DEFAULT_VALUE);
 372              	 .loc 1 172 0
 373 0004 48F2A061 	 movw r1,#34464
 374 0008 FFF7FEFF 	 bl _ZN6eeprom11setEeprom16Ett
 375              	.LVL20:
 173:src/MightyBoard/Motherboard/EepromMap.cc ****     setEeprom16(eeprom_base + therm_eeprom_offsets::THERM_T0_OFFSET, THERM_T0_DEFAULT_VALUE);
 376              	 .loc 1 173 0
 377 000c 04F10400 	 add r0,r4,#4
 378 0010 80B2     	 uxth r0,r0
 379 0012 4FF01901 	 mov r1,#25
 380 0016 FFF7FEFF 	 bl _ZN6eeprom11setEeprom16Ett
 174:src/MightyBoard/Motherboard/EepromMap.cc ****     setEeprom16(eeprom_base + therm_eeprom_offsets::THERM_BETA_OFFSET, THERM_BETA_DEFAULT_VALUE);
 381              	 .loc 1 174 0
 382 001a 04F10800 	 add r0,r4,#8
 383 001e 80B2     	 uxth r0,r0
 384 0020 40F6E371 	 movw r1,#4067
 385 0024 FFF7FEFF 	 bl _ZN6eeprom11setEeprom16Ett
 386              	.LVL21:
 387 0028 04F11004 	 add r4,r4,#16
 388 002c A4B2     	 uxth r4,r4
 389 002e 4FF00006 	 mov r6,#0
 390              	.LBB47:
 175:src/MightyBoard/Motherboard/EepromMap.cc **** //	xprintf("%x %d" " (%s:%d)\n",EEPROM_START_ADDRESS + (eeprom_base + therm_eeprom_offsets::THERM_R
 176:src/MightyBoard/Motherboard/EepromMap.cc **** //	xprintf("%x %d" " (%s:%d)\n",EEPROM_START_ADDRESS + (eeprom_base + therm_eeprom_offsets::THERM_T
 177:src/MightyBoard/Motherboard/EepromMap.cc **** //	xprintf("%x %d" " (%s:%d)\n",EEPROM_START_ADDRESS + (eeprom_base + therm_eeprom_offsets::THERM_B
 178:src/MightyBoard/Motherboard/EepromMap.cc **** //	eeprom_write_dword( (uint32_t*)(eeprom_base + therm_eeprom_offsets::THERM_R0_OFFSET), THERM_R0_D
 179:src/MightyBoard/Motherboard/EepromMap.cc **** //	eeprom_write_dword( (uint32_t*)(eeprom_base + therm_eeprom_offsets::THERM_T0_OFFSET), THERM_T0_D
 180:src/MightyBoard/Motherboard/EepromMap.cc **** //	eeprom_write_dword( (uint32_t*)(eeprom_base + therm_eeprom_offsets::THERM_BETA_OFFSET), THERM_BE
 181:src/MightyBoard/Motherboard/EepromMap.cc **** 	/// write the default thermal table.
 182:src/MightyBoard/Motherboard/EepromMap.cc **** 	for(uint8_t i=0;i<NUMTEMPS;i++){
 183:src/MightyBoard/Motherboard/EepromMap.cc **** 		setEeprom16(eeprom_base + therm_eeprom_offsets::THERM_DATA_OFFSET+i, default_therm_table[i].adc);
 391              	 .loc 1 183 0
 392 0032 40F20007 	 movw r7,#:lower16:default_therm_table
 393 0036 C0F20007 	 movt r7,#:upper16:default_therm_table
 394              	.LVL22:
 395              	.L17:
 396              	 .loc 1 183 0 is_stmt 0 discriminator 2
 397 003a F519     	 adds r5,r6,r7
 398 003c 2046     	 mov r0,r4
 399 003e B95B     	 ldrh r1,[r7,r6]
 400 0040 FFF7FEFF 	 bl _ZN6eeprom11setEeprom16Ett
 184:src/MightyBoard/Motherboard/EepromMap.cc **** 		setEeprom16(eeprom_base + therm_eeprom_offsets::THERM_DATA_OFFSET+i+2, default_therm_table[i].val
 401              	 .loc 1 184 0 is_stmt 1 discriminator 2
 402 0044 04F10200 	 add r0,r4,#2
 403 0048 80B2     	 uxth r0,r0
 404 004a 6988     	 ldrh r1,[r5,#2]
 405 004c FFF7FEFF 	 bl _ZN6eeprom11setEeprom16Ett
 406 0050 06F10406 	 add r6,r6,#4
 407 0054 04F10104 	 add r4,r4,#1
 408 0058 A4B2     	 uxth r4,r4
 182:src/MightyBoard/Motherboard/EepromMap.cc **** 	for(uint8_t i=0;i<NUMTEMPS;i++){
 409              	 .loc 1 182 0 discriminator 2
 410 005a 7C2E     	 cmp r6,#124
 411 005c EDD1     	 bne .L17
 412              	.LBE47:
 413              	.LBE46:
 185:src/MightyBoard/Motherboard/EepromMap.cc **** //		xprintf("%x %d" " (%s:%d)\n",EEPROM_START_ADDRESS + (eeprom_base + therm_eeprom_offsets::THERM_
 186:src/MightyBoard/Motherboard/EepromMap.cc **** //		xprintf("%x %d" " (%s:%d)\n",EEPROM_START_ADDRESS + (eeprom_base + therm_eeprom_offsets::THERM_
 187:src/MightyBoard/Motherboard/EepromMap.cc **** 	}
 188:src/MightyBoard/Motherboard/EepromMap.cc **** 	//	eeprom_write_block( (const uint8_t*)default_therm_table,
 189:src/MightyBoard/Motherboard/EepromMap.cc **** //			(uint8_t*)(eeprom_base + therm_eeprom_offsets::THERM_DATA_OFFSET), sizeof(uint16_t)*2*NUMTEMPS
 190:src/MightyBoard/Motherboard/EepromMap.cc **** }
 414              	 .loc 1 190 0
 415 005e F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 416              	 .cfi_endproc
 417              	.LFE97:
 419              	 .section .text._ZN6eeprom20setDefaultLedEffectsEt,"ax",%progbits
 420              	 .align 2
 421              	 .global _ZN6eeprom20setDefaultLedEffectsEt
 422              	 .thumb
 423              	 .thumb_func
 425              	_ZN6eeprom20setDefaultLedEffectsEt:
 426              	.LFB98:
 191:src/MightyBoard/Motherboard/EepromMap.cc **** 
 192:src/MightyBoard/Motherboard/EepromMap.cc **** typedef struct Color {
 193:src/MightyBoard/Motherboard/EepromMap.cc **** 	int8_t red;
 194:src/MightyBoard/Motherboard/EepromMap.cc **** 	int8_t green;
 195:src/MightyBoard/Motherboard/EepromMap.cc **** 	int8_t blue;
 196:src/MightyBoard/Motherboard/EepromMap.cc **** } Color;
 197:src/MightyBoard/Motherboard/EepromMap.cc ****         
 198:src/MightyBoard/Motherboard/EepromMap.cc **** 
 199:src/MightyBoard/Motherboard/EepromMap.cc **** 
 200:src/MightyBoard/Motherboard/EepromMap.cc **** /**
 201:src/MightyBoard/Motherboard/EepromMap.cc ****  *
 202:src/MightyBoard/Motherboard/EepromMap.cc ****  * @param eeprom_base start of Led effects table
 203:src/MightyBoard/Motherboard/EepromMap.cc ****  */
 204:src/MightyBoard/Motherboard/EepromMap.cc **** void setDefaultLedEffects(uint16_t eeprom_base)
 205:src/MightyBoard/Motherboard/EepromMap.cc **** {
 427              	 .loc 1 205 0
 428              	 .cfi_startproc
 429              	 
 430              	 
 431              	.LVL23:
 432 0000 10B5     	 push {r4,lr}
 433              	.LCFI5:
 434              	 .cfi_def_cfa_offset 8
 435              	 .cfi_offset 14,-4
 436              	 .cfi_offset 4,-8
 437 0002 0446     	 mov r4,r0
 438              	.LBB48:
 206:src/MightyBoard/Motherboard/EepromMap.cc **** 	Color colors;
 207:src/MightyBoard/Motherboard/EepromMap.cc **** 
 208:src/MightyBoard/Motherboard/EepromMap.cc **** 	// default color is white
 209:src/MightyBoard/Motherboard/EepromMap.cc **** 	setEeprom8(eeprom_base + blink_eeprom_offsets::BASIC_COLOR_OFFSET, LED_DEFAULT_WHITE);
 439              	 .loc 1 209 0
 440 0004 4FF00001 	 mov r1,#0
 441 0008 FFF7FEFF 	 bl _ZN6eeprom10setEeprom8Eth
 442              	.LVL24:
 210:src/MightyBoard/Motherboard/EepromMap.cc **** 	setEeprom8(eeprom_base + blink_eeprom_offsets::LED_HEAT_OFFSET, 1);
 443              	 .loc 1 210 0
 444 000c 04F10200 	 add r0,r4,#2
 445 0010 80B2     	 uxth r0,r0
 446 0012 4FF00101 	 mov r1,#1
 447 0016 FFF7FEFF 	 bl _ZN6eeprom10setEeprom8Eth
 448              	.LVL25:
 211:src/MightyBoard/Motherboard/EepromMap.cc **** //	eeprom_write_byte((uint8_t*)(eeprom_base + blink_eeprom_offsets::BASIC_COLOR_OFFSET), LED_DEFAUL
 212:src/MightyBoard/Motherboard/EepromMap.cc **** //	eeprom_write_byte((uint8_t*)(eeprom_base + blink_eeprom_offsets::LED_HEAT_OFFSET), 1);
 213:src/MightyBoard/Motherboard/EepromMap.cc ****     
 214:src/MightyBoard/Motherboard/EepromMap.cc **** 	colors.red=0xFF; colors.green =colors.blue =0x00;
 215:src/MightyBoard/Motherboard/EepromMap.cc **** 	setEeprom8(eeprom_base + blink_eeprom_offsets::CUSTOM_COLOR_OFFSET, colors.red);
 449              	 .loc 1 215 0
 450 001a 04F10400 	 add r0,r4,#4
 451 001e 80B2     	 uxth r0,r0
 452 0020 4FF0FF01 	 mov r1,#255
 453 0024 FFF7FEFF 	 bl _ZN6eeprom10setEeprom8Eth
 216:src/MightyBoard/Motherboard/EepromMap.cc **** 	setEeprom8(eeprom_base + blink_eeprom_offsets::CUSTOM_COLOR_OFFSET+1, colors.green);
 454              	 .loc 1 216 0
 455 0028 04F10500 	 add r0,r4,#5
 456 002c 80B2     	 uxth r0,r0
 457 002e 4FF00001 	 mov r1,#0
 458 0032 FFF7FEFF 	 bl _ZN6eeprom10setEeprom8Eth
 217:src/MightyBoard/Motherboard/EepromMap.cc **** 	setEeprom8(eeprom_base + blink_eeprom_offsets::CUSTOM_COLOR_OFFSET+2, colors.blue);
 459              	 .loc 1 217 0
 460 0036 04F10600 	 add r0,r4,#6
 461 003a 80B2     	 uxth r0,r0
 462 003c 4FF00001 	 mov r1,#0
 463 0040 FFF7FEFF 	 bl _ZN6eeprom10setEeprom8Eth
 464              	.LBE48:
 218:src/MightyBoard/Motherboard/EepromMap.cc **** 
 219:src/MightyBoard/Motherboard/EepromMap.cc **** 	//	eeprom_write_block((void*)&colors,(uint8_t*)(eeprom_base + blink_eeprom_offsets::CUSTOM_COLOR_O
 220:src/MightyBoard/Motherboard/EepromMap.cc **** }
 465              	 .loc 1 220 0
 466 0044 10BD     	 pop {r4,pc}
 467              	 .cfi_endproc
 468              	.LFE98:
 470 0046 00BF     	 .section .text._ZN6eeprom14setCustomColorEhhh,"ax",%progbits
 471              	 .align 2
 472              	 .global _ZN6eeprom14setCustomColorEhhh
 473              	 .thumb
 474              	 .thumb_func
 476              	_ZN6eeprom14setCustomColorEhhh:
 477              	.LFB99:
 221:src/MightyBoard/Motherboard/EepromMap.cc ****     /**
 222:src/MightyBoard/Motherboard/EepromMap.cc ****      *
 223:src/MightyBoard/Motherboard/EepromMap.cc ****      * @param red value
 224:src/MightyBoard/Motherboard/EepromMap.cc ****      * @param green value
 225:src/MightyBoard/Motherboard/EepromMap.cc ****      * @param blue value
 226:src/MightyBoard/Motherboard/EepromMap.cc ****      */
 227:src/MightyBoard/Motherboard/EepromMap.cc **** 
 228:src/MightyBoard/Motherboard/EepromMap.cc **** void setCustomColor(uint8_t red, uint8_t green, uint8_t blue){
 478              	 .loc 1 228 0
 479              	 .cfi_startproc
 480              	 
 481              	 
 482              	.LVL26:
 483 0000 38B5     	 push {r3,r4,r5,lr}
 484              	.LCFI6:
 485              	 .cfi_def_cfa_offset 16
 486              	 .cfi_offset 14,-4
 487              	 .cfi_offset 5,-8
 488              	 .cfi_offset 4,-12
 489              	 .cfi_offset 3,-16
 490 0002 0346     	 mov r3,r0
 491 0004 0D46     	 mov r5,r1
 492 0006 1446     	 mov r4,r2
 493              	.LVL27:
 494              	.LBB49:
 229:src/MightyBoard/Motherboard/EepromMap.cc **** 	
 230:src/MightyBoard/Motherboard/EepromMap.cc **** 	Color colors;
 231:src/MightyBoard/Motherboard/EepromMap.cc **** 	
 232:src/MightyBoard/Motherboard/EepromMap.cc **** //	eeprom_address(EEPROM_START_ADDRESS, eeprom_offsets::LED_STRIP_SETTINGS + blink_eeprom_offsets::
 233:src/MightyBoard/Motherboard/EepromMap.cc **** //	eeprom_write_byte((uint8_t*)(eeprom_offsets::LED_STRIP_SETTINGS + blink_eeprom_offsets::BASIC_CO
 234:src/MightyBoard/Motherboard/EepromMap.cc **** 	
 235:src/MightyBoard/Motherboard/EepromMap.cc **** 	colors.red=red; colors.green = green; colors.blue =blue;
 236:src/MightyBoard/Motherboard/EepromMap.cc **** 	setEeprom8(eeprom_offsets::LED_STRIP_SETTINGS + blink_eeprom_offsets::CUSTOM_COLOR_OFFSET, colors.
 495              	 .loc 1 236 0
 496 0008 4FF4A270 	 mov r0,#324
 497              	.LVL28:
 498 000c 1946     	 mov r1,r3
 499              	.LVL29:
 500 000e FFF7FEFF 	 bl _ZN6eeprom10setEeprom8Eth
 501              	.LVL30:
 237:src/MightyBoard/Motherboard/EepromMap.cc **** 	setEeprom8(eeprom_offsets::LED_STRIP_SETTINGS + blink_eeprom_offsets::CUSTOM_COLOR_OFFSET+1, color
 502              	 .loc 1 237 0
 503 0012 40F24510 	 movw r0,#325
 504 0016 2946     	 mov r1,r5
 505 0018 FFF7FEFF 	 bl _ZN6eeprom10setEeprom8Eth
 238:src/MightyBoard/Motherboard/EepromMap.cc **** 	setEeprom8(eeprom_offsets::LED_STRIP_SETTINGS + blink_eeprom_offsets::CUSTOM_COLOR_OFFSET+2, color
 506              	 .loc 1 238 0
 507 001c 4FF4A370 	 mov r0,#326
 508 0020 2146     	 mov r1,r4
 509 0022 FFF7FEFF 	 bl _ZN6eeprom10setEeprom8Eth
 510              	.LBE49:
 239:src/MightyBoard/Motherboard/EepromMap.cc **** 	//	eeprom_write_block((void*)&colors,(uint8_t*)(eeprom_offsets::LED_STRIP_SETTINGS + blink_eeprom_
 240:src/MightyBoard/Motherboard/EepromMap.cc **** }
 511              	 .loc 1 240 0
 512 0026 38BD     	 pop {r3,r4,r5,pc}
 513              	 .cfi_endproc
 514              	.LFE99:
 516              	 .section .text._ZN6eeprom18eeprom_write_soundE5Soundt,"ax",%progbits
 517              	 .align 2
 518              	 .global _ZN6eeprom18eeprom_write_soundE5Soundt
 519              	 .thumb
 520              	 .thumb_func
 522              	_ZN6eeprom18eeprom_write_soundE5Soundt:
 523              	.LFB100:
 241:src/MightyBoard/Motherboard/EepromMap.cc **** 
 242:src/MightyBoard/Motherboard/EepromMap.cc ****     /**
 243:src/MightyBoard/Motherboard/EepromMap.cc ****      *
 244:src/MightyBoard/Motherboard/EepromMap.cc ****      * @param sound desired
 245:src/MightyBoard/Motherboard/EepromMap.cc ****      * @param dest in eeprom
 246:src/MightyBoard/Motherboard/EepromMap.cc ****      */   
 247:src/MightyBoard/Motherboard/EepromMap.cc **** void eeprom_write_sound(Sound sound, uint16_t dest)
 248:src/MightyBoard/Motherboard/EepromMap.cc **** {
 524              	 .loc 1 248 0
 525              	 .cfi_startproc
 526              	 
 527              	 
 528              	.LVL31:
 529 0000 10B5     	 push {r4,lr}
 530              	.LCFI7:
 531              	 .cfi_def_cfa_offset 8
 532              	 .cfi_offset 14,-4
 533              	 .cfi_offset 4,-8
 534 0002 82B0     	 sub sp,sp,#8
 535              	.LCFI8:
 536              	 .cfi_def_cfa_offset 16
 537 0004 0190     	 str r0,[sp,#4]
 538 0006 0C46     	 mov r4,r1
 249:src/MightyBoard/Motherboard/EepromMap.cc **** 	setEeprom16(dest,sound.freq);
 539              	 .loc 1 249 0
 540 0008 81B2     	 uxth r1,r0
 541              	.LVL32:
 542 000a 2046     	 mov r0,r4
 543 000c FFF7FEFF 	 bl _ZN6eeprom11setEeprom16Ett
 250:src/MightyBoard/Motherboard/EepromMap.cc **** 	setEeprom16(dest + 2, sound.durationMs);
 544              	 .loc 1 250 0
 545 0010 04F10200 	 add r0,r4,#2
 546 0014 80B2     	 uxth r0,r0
 547 0016 BDF80610 	 ldrh r1,[sp,#6]
 548 001a FFF7FEFF 	 bl _ZN6eeprom11setEeprom16Ett
 251:src/MightyBoard/Motherboard/EepromMap.cc **** //	eeprom_write_word((uint16_t*)dest, 	sound.freq);
 252:src/MightyBoard/Motherboard/EepromMap.cc **** //	eeprom_write_word((uint16_t*)dest + 2, sound.durationMs);
 253:src/MightyBoard/Motherboard/EepromMap.cc **** }
 549              	 .loc 1 253 0
 550 001e 02B0     	 add sp,sp,#8
 551 0020 10BD     	 pop {r4,pc}
 552              	 .cfi_endproc
 553              	.LFE100:
 555 0022 00BF     	 .section .text._ZN6eeprom21setDefaultBuzzEffectsEt,"ax",%progbits
 556              	 .align 2
 557              	 .global _ZN6eeprom21setDefaultBuzzEffectsEt
 558              	 .thumb
 559              	 .thumb_func
 561              	_ZN6eeprom21setDefaultBuzzEffectsEt:
 562              	.LFB101:
 254:src/MightyBoard/Motherboard/EepromMap.cc **** 
 255:src/MightyBoard/Motherboard/EepromMap.cc **** /**
 256:src/MightyBoard/Motherboard/EepromMap.cc ****  *
 257:src/MightyBoard/Motherboard/EepromMap.cc ****  * @param eeprom_base start of buzz effects table
 258:src/MightyBoard/Motherboard/EepromMap.cc ****  */
 259:src/MightyBoard/Motherboard/EepromMap.cc **** void setDefaultBuzzEffects(uint16_t eeprom_base)
 260:src/MightyBoard/Motherboard/EepromMap.cc **** {
 563              	 .loc 1 260 0
 564              	 .cfi_startproc
 565              	 
 566              	 
 567              	.LVL33:
 568 0000 00B5     	 push {lr}
 569              	.LCFI9:
 570              	 .cfi_def_cfa_offset 4
 571              	 .cfi_offset 14,-4
 572 0002 83B0     	 sub sp,sp,#12
 573              	.LCFI10:
 574              	 .cfi_def_cfa_offset 16
 575 0004 0146     	 mov r1,r0
 576              	.LBB50:
 261:src/MightyBoard/Motherboard/EepromMap.cc **** 	Sound blare = {NOTE_B2, 500};
 577              	 .loc 1 261 0
 578 0006 40F20003 	 movw r3,#:lower16:.LANCHOR0
 579 000a C0F20003 	 movt r3,#:upper16:.LANCHOR0
 580 000e 1868     	 ldr r0,[r3,#0]
 581              	.LVL34:
 582 0010 0190     	 str r0,[sp,#4]
 262:src/MightyBoard/Motherboard/EepromMap.cc **** 	eeprom_write_sound(blare,eeprom_base + buzz_eeprom_offsets::BASIC_BUZZ_OFFSET);
 583              	 .loc 1 262 0
 584 0012 0198     	 ldr r0,[sp,#4]
 585 0014 FFF7FEFF 	 bl _ZN6eeprom18eeprom_write_soundE5Soundt
 586              	.LBE50:
 263:src/MightyBoard/Motherboard/EepromMap.cc **** }
 587              	 .loc 1 263 0
 588 0018 03B0     	 add sp,sp,#12
 589 001a 00BD     	 pop {pc}
 590              	 .cfi_endproc
 591              	.LFE101:
 593              	 .section .text._ZN6eeprom18setDefaultsPreheatEt,"ax",%progbits
 594              	 .align 2
 595              	 .global _ZN6eeprom18setDefaultsPreheatEt
 596              	 .thumb
 597              	 .thumb_func
 599              	_ZN6eeprom18setDefaultsPreheatEt:
 600              	.LFB102:
 264:src/MightyBoard/Motherboard/EepromMap.cc ****     
 265:src/MightyBoard/Motherboard/EepromMap.cc **** /**
 266:src/MightyBoard/Motherboard/EepromMap.cc ****  *
 267:src/MightyBoard/Motherboard/EepromMap.cc ****  * @param eeprom_base start of preheat settings table
 268:src/MightyBoard/Motherboard/EepromMap.cc ****  */
 269:src/MightyBoard/Motherboard/EepromMap.cc **** void setDefaultsPreheat(uint16_t eeprom_base)
 270:src/MightyBoard/Motherboard/EepromMap.cc **** {
 601              	 .loc 1 270 0
 602              	 .cfi_startproc
 603              	 
 604              	 
 605              	.LVL35:
 606 0000 10B5     	 push {r4,lr}
 607              	.LCFI11:
 608              	 .cfi_def_cfa_offset 8
 609              	 .cfi_offset 14,-4
 610              	 .cfi_offset 4,-8
 611 0002 0446     	 mov r4,r0
 271:src/MightyBoard/Motherboard/EepromMap.cc **** 	setEeprom16(eeprom_base + preheat_eeprom_offsets::PREHEAT_RIGHT_OFFSET, 220);
 612              	 .loc 1 271 0
 613 0004 4FF0DC01 	 mov r1,#220
 614 0008 FFF7FEFF 	 bl _ZN6eeprom11setEeprom16Ett
 615              	.LVL36:
 272:src/MightyBoard/Motherboard/EepromMap.cc **** 	setEeprom16(eeprom_base + preheat_eeprom_offsets::PREHEAT_LEFT_OFFSET, 220);
 616              	 .loc 1 272 0
 617 000c 04F10200 	 add r0,r4,#2
 618 0010 80B2     	 uxth r0,r0
 619 0012 4FF0DC01 	 mov r1,#220
 620 0016 FFF7FEFF 	 bl _ZN6eeprom11setEeprom16Ett
 273:src/MightyBoard/Motherboard/EepromMap.cc **** 	setEeprom16(eeprom_base + preheat_eeprom_offsets::PREHEAT_PLATFORM_OFFSET, 110);
 621              	 .loc 1 273 0
 622 001a 04F10400 	 add r0,r4,#4
 623 001e 80B2     	 uxth r0,r0
 624 0020 4FF06E01 	 mov r1,#110
 625 0024 FFF7FEFF 	 bl _ZN6eeprom11setEeprom16Ett
 274:src/MightyBoard/Motherboard/EepromMap.cc **** 	setEeprom16(eeprom_base + preheat_eeprom_offsets::PREHEAT_ON_OFF_OFFSET, (1<<HEAT_MASK_RIGHT) + (1
 626              	 .loc 1 274 0
 627 0028 04F10600 	 add r0,r4,#6
 628 002c 80B2     	 uxth r0,r0
 629 002e 4FF00501 	 mov r1,#5
 630 0032 FFF7FEFF 	 bl _ZN6eeprom11setEeprom16Ett
 275:src/MightyBoard/Motherboard/EepromMap.cc **** //    eeprom_write_word((uint16_t*)(eeprom_base + preheat_eeprom_offsets::PREHEAT_RIGHT_OFFSET), 22
 276:src/MightyBoard/Motherboard/EepromMap.cc **** //    eeprom_write_word((uint16_t*)(eeprom_base + preheat_eeprom_offsets::PREHEAT_LEFT_OFFSET), 220
 277:src/MightyBoard/Motherboard/EepromMap.cc **** //    eeprom_write_word((uint16_t*)(eeprom_base + preheat_eeprom_offsets::PREHEAT_PLATFORM_OFFSET),
 278:src/MightyBoard/Motherboard/EepromMap.cc **** //    eeprom_write_byte((uint8_t*)(eeprom_base + preheat_eeprom_offsets::PREHEAT_ON_OFF_OFFSET), (1
 279:src/MightyBoard/Motherboard/EepromMap.cc **** }
 631              	 .loc 1 279 0
 632 0036 10BD     	 pop {r4,pc}
 633              	 .cfi_endproc
 634              	.LFE102:
 636              	 .section .text._ZN6eeprom23setDefaultsAccelerationEv,"ax",%progbits
 637              	 .align 2
 638              	 .global _ZN6eeprom23setDefaultsAccelerationEv
 639              	 .thumb
 640              	 .thumb_func
 642              	_ZN6eeprom23setDefaultsAccelerationEv:
 643              	.LFB103:
 280:src/MightyBoard/Motherboard/EepromMap.cc **** 
 281:src/MightyBoard/Motherboard/EepromMap.cc **** 
 282:src/MightyBoard/Motherboard/EepromMap.cc **** /**
 283:src/MightyBoard/Motherboard/EepromMap.cc ****  *
 284:src/MightyBoard/Motherboard/EepromMap.cc ****  * break with the form here as eeprom_base is available in class and we
 285:src/MightyBoard/Motherboard/EepromMap.cc ****  * want to cleanly call this function externally
 286:src/MightyBoard/Motherboard/EepromMap.cc ****  */
 287:src/MightyBoard/Motherboard/EepromMap.cc **** void setDefaultsAcceleration(){
 644              	 .loc 1 287 0
 645              	 .cfi_startproc
 646              	 
 647              	 
 648 0000 08B5     	 push {r3,lr}
 649              	.LCFI12:
 650              	 .cfi_def_cfa_offset 8
 651              	 .cfi_offset 14,-4
 652              	 .cfi_offset 3,-8
 288:src/MightyBoard/Motherboard/EepromMap.cc **** //	xprintf("%x" " (%s:%d)\n",eeprom_address(EEPROM_START_ADDRESS, eeprom_offsets::ACCELERATION_SETT
 289:src/MightyBoard/Motherboard/EepromMap.cc **** //	xprintf("%x" " (%s:%d)\n",(EEPROM_START_ADDRESS + eeprom_offsets::ACCELERATION_SETTINGS + accele
 290:src/MightyBoard/Motherboard/EepromMap.cc **** //	_delay_us(10000);
 291:src/MightyBoard/Motherboard/EepromMap.cc **** 	setEeprom8(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::ACTIVE_OFFSET, 0x0
 653              	 .loc 1 291 0
 654 0002 4FF4B770 	 mov r0,#366
 655 0006 4FF00101 	 mov r1,#1
 656 000a FFF7FEFF 	 bl _ZN6eeprom10setEeprom8Eth
 292:src/MightyBoard/Motherboard/EepromMap.cc **** 	setEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::ACCELERATION_RATE
 657              	 .loc 1 292 0
 658 000e 4FF4B870 	 mov r0,#368
 659 0012 40F6B831 	 movw r1,#3000
 660 0016 FFF7FEFF 	 bl _ZN6eeprom11setEeprom16Ett
 293:src/MightyBoard/Motherboard/EepromMap.cc **** //    eeprom_write_byte((uint8_t*)(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offs
 294:src/MightyBoard/Motherboard/EepromMap.cc **** //    eeprom_write_word((uint16_t*)(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_off
 295:src/MightyBoard/Motherboard/EepromMap.cc ****     
 296:src/MightyBoard/Motherboard/EepromMap.cc **** 	setEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_RATES_OFFSET
 661              	 .loc 1 296 0
 662 001a 4FF4B970 	 mov r0,#370
 663 001e 40F6B831 	 movw r1,#3000
 664 0022 FFF7FEFF 	 bl _ZN6eeprom11setEeprom16Ett
 297:src/MightyBoard/Motherboard/EepromMap.cc **** 	setEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_RATES_OFFSET
 665              	 .loc 1 297 0
 666 0026 4FF4BA70 	 mov r0,#372
 667 002a 40F6B831 	 movw r1,#3000
 668 002e FFF7FEFF 	 bl _ZN6eeprom11setEeprom16Ett
 298:src/MightyBoard/Motherboard/EepromMap.cc **** 	setEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_RATES_OFFSET
 669              	 .loc 1 298 0
 670 0032 4FF4BB70 	 mov r0,#374
 671 0036 4FF47A71 	 mov r1,#1000
 672 003a FFF7FEFF 	 bl _ZN6eeprom11setEeprom16Ett
 299:src/MightyBoard/Motherboard/EepromMap.cc **** 	setEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_RATES_OFFSET
 673              	 .loc 1 299 0
 674 003e 4FF4BC70 	 mov r0,#376
 675 0042 40F6B831 	 movw r1,#3000
 676 0046 FFF7FEFF 	 bl _ZN6eeprom11setEeprom16Ett
 300:src/MightyBoard/Motherboard/EepromMap.cc **** 	setEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_RATES_OFFSET
 677              	 .loc 1 300 0
 678 004a 4FF4BD70 	 mov r0,#378
 679 004e 40F6B831 	 movw r1,#3000
 680 0052 FFF7FEFF 	 bl _ZN6eeprom11setEeprom16Ett
 301:src/MightyBoard/Motherboard/EepromMap.cc **** //  eeprom_write_word((uint16_t*)(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offse
 302:src/MightyBoard/Motherboard/EepromMap.cc **** //	eeprom_write_word((uint16_t*)(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offset
 303:src/MightyBoard/Motherboard/EepromMap.cc **** //	eeprom_write_word((uint16_t*)(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offset
 304:src/MightyBoard/Motherboard/EepromMap.cc **** //	eeprom_write_word((uint16_t*)(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offset
 305:src/MightyBoard/Motherboard/EepromMap.cc **** //	eeprom_write_word((uint16_t*)(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offset
 306:src/MightyBoard/Motherboard/EepromMap.cc **** 
 307:src/MightyBoard/Motherboard/EepromMap.cc **** 	setEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_JERK_OFFSET 
 681              	 .loc 1 307 0
 682 0056 4FF4BE70 	 mov r0,#380
 683 005a 4FF01401 	 mov r1,#20
 684 005e FFF7FEFF 	 bl _ZN6eeprom11setEeprom16Ett
 308:src/MightyBoard/Motherboard/EepromMap.cc **** 	setEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_JERK_OFFSET 
 685              	 .loc 1 308 0
 686 0062 4FF4BF70 	 mov r0,#382
 687 0066 4FF01401 	 mov r1,#20
 688 006a FFF7FEFF 	 bl _ZN6eeprom11setEeprom16Ett
 309:src/MightyBoard/Motherboard/EepromMap.cc **** 	setEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_JERK_OFFSET 
 689              	 .loc 1 309 0
 690 006e 4FF4C070 	 mov r0,#384
 691 0072 4FF00101 	 mov r1,#1
 692 0076 FFF7FEFF 	 bl _ZN6eeprom11setEeprom16Ett
 310:src/MightyBoard/Motherboard/EepromMap.cc **** 	setEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_JERK_OFFSET 
 693              	 .loc 1 310 0
 694 007a 4FF4C170 	 mov r0,#386
 695 007e 4FF00201 	 mov r1,#2
 696 0082 FFF7FEFF 	 bl _ZN6eeprom11setEeprom16Ett
 311:src/MightyBoard/Motherboard/EepromMap.cc **** 	setEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_JERK_OFFSET 
 697              	 .loc 1 311 0
 698 0086 4FF4C270 	 mov r0,#388
 699 008a 4FF00201 	 mov r1,#2
 700 008e FFF7FEFF 	 bl _ZN6eeprom11setEeprom16Ett
 312:src/MightyBoard/Motherboard/EepromMap.cc **** //	setEepromFixed16((eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_JERK
 313:src/MightyBoard/Motherboard/EepromMap.cc **** //	setEepromFixed16((eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_JERK
 314:src/MightyBoard/Motherboard/EepromMap.cc **** //	setEepromFixed16((eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_JERK
 315:src/MightyBoard/Motherboard/EepromMap.cc **** //	setEepromFixed16((eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_JERK
 316:src/MightyBoard/Motherboard/EepromMap.cc **** //	setEepromFixed16((eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::AXIS_JERK
 317:src/MightyBoard/Motherboard/EepromMap.cc **** 	
 318:src/MightyBoard/Motherboard/EepromMap.cc **** 	setEeprom16(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::MINIMUM_SPEED, DE
 701              	 .loc 1 318 0
 702 0092 4FF4C370 	 mov r0,#390
 703 0096 4FF00F01 	 mov r1,#15
 704 009a FFF7FEFF 	 bl _ZN6eeprom11setEeprom16Ett
 319:src/MightyBoard/Motherboard/EepromMap.cc **** //	eeprom_write_word((uint16_t*)(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offset
 320:src/MightyBoard/Motherboard/EepromMap.cc **** 	
 321:src/MightyBoard/Motherboard/EepromMap.cc **** 	setEeprom8(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets::DEFAULTS_FLAG, _BV
 705              	 .loc 1 321 0
 706 009e 4FF4C470 	 mov r0,#392
 707 00a2 4FF08001 	 mov r1,#128
 708 00a6 FFF7FEFF 	 bl _ZN6eeprom10setEeprom8Eth
 322:src/MightyBoard/Motherboard/EepromMap.cc **** //	eeprom_write_byte((uint8_t*)(eeprom_offsets::ACCELERATION_SETTINGS + acceleration_eeprom_offsets
 323:src/MightyBoard/Motherboard/EepromMap.cc **** }
 709              	 .loc 1 323 0
 710 00aa 08BD     	 pop {r3,pc}
 711              	 .cfi_endproc
 712              	.LFE103:
 714              	 .section .text._ZN6eeprom12isSingleToolEv,"ax",%progbits
 715              	 .align 2
 716              	 .global _ZN6eeprom12isSingleToolEv
 717              	 .thumb
 718              	 .thumb_func
 720              	_ZN6eeprom12isSingleToolEv:
 721              	.LFB107:
 324:src/MightyBoard/Motherboard/EepromMap.cc **** 
 325:src/MightyBoard/Motherboard/EepromMap.cc **** /// Writes to EEPROM the default toolhead 'home' values to idicate toolhead offset
 326:src/MightyBoard/Motherboard/EepromMap.cc **** /// from idealized point-center of the toolhead
 327:src/MightyBoard/Motherboard/EepromMap.cc **** void setDefaultAxisHomePositions()
 328:src/MightyBoard/Motherboard/EepromMap.cc **** {
 329:src/MightyBoard/Motherboard/EepromMap.cc **** 	uint32_t homes[5] = {replicator_axis_offsets::DUAL_X_OFFSET_STEPS,replicator_axis_offsets::DUAL_Y_
 330:src/MightyBoard/Motherboard/EepromMap.cc **** 	if(isSingleTool()){
 331:src/MightyBoard/Motherboard/EepromMap.cc **** 		homes[0] = replicator_axis_offsets::SINGLE_X_OFFSET_STEPS;
 332:src/MightyBoard/Motherboard/EepromMap.cc **** 		homes[1] = replicator_axis_offsets::SINGLE_Y_OFFSET_STEPS;
 333:src/MightyBoard/Motherboard/EepromMap.cc **** 	}
 334:src/MightyBoard/Motherboard/EepromMap.cc **** 	for (uint8_t i=0;i<5;i++){
 335:src/MightyBoard/Motherboard/EepromMap.cc **** //		xprintf("%x" " (%s:%d)\n",(EEPROM_START_ADDRESS + (eeprom_offsets::AXIS_HOME_POSITIONS_STEPS+i)
 336:src/MightyBoard/Motherboard/EepromMap.cc **** 		setEeprom32(eeprom_offsets::AXIS_HOME_POSITIONS_STEPS+(i*4), homes[i]);
 337:src/MightyBoard/Motherboard/EepromMap.cc **** 	}
 338:src/MightyBoard/Motherboard/EepromMap.cc **** //	eeprom_write_block((uint8_t*)&(homes[0]),(uint8_t*)(eeprom_offsets::AXIS_HOME_POSITIONS_STEPS), 
 339:src/MightyBoard/Motherboard/EepromMap.cc **** }
 340:src/MightyBoard/Motherboard/EepromMap.cc ****     
 341:src/MightyBoard/Motherboard/EepromMap.cc **** /// Does a factory reset (resets all defaults except home/endstops, axis direction and tool count)
 342:src/MightyBoard/Motherboard/EepromMap.cc **** void factoryResetEEPROM() {
 343:src/MightyBoard/Motherboard/EepromMap.cc **** 
 344:src/MightyBoard/Motherboard/EepromMap.cc **** //	xprintf("factoryResetEEPROM" " (%s:%d)\n",_F_,_L_);
 345:src/MightyBoard/Motherboard/EepromMap.cc **** 	// Default: enstops inverted, Z axis inverted
 346:src/MightyBoard/Motherboard/EepromMap.cc **** 	uint8_t endstop_invert = 0b10011111; // all endstops inverted
 347:src/MightyBoard/Motherboard/EepromMap.cc **** 
 348:src/MightyBoard/Motherboard/EepromMap.cc **** 	uint8_t home_direction = 0b11011; // X,Y Max, Z min  (AB max - to never halt on edge in stepper in
 349:src/MightyBoard/Motherboard/EepromMap.cc **** 
 350:src/MightyBoard/Motherboard/EepromMap.cc **** 	uint8_t vRefBase[] = {118,118,40,118,118};  //(AB maxed out)
 351:src/MightyBoard/Motherboard/EepromMap.cc **** 	uint16_t vidPid[] = {0x23C1, 0xB404};		/// PID/VID for the MightyBoard!
 352:src/MightyBoard/Motherboard/EepromMap.cc **** 
 353:src/MightyBoard/Motherboard/EepromMap.cc **** 	/// Write 'MainBoard' settings
 354:src/MightyBoard/Motherboard/EepromMap.cc **** 	char machine_name_in[] = "The Replicator";
 355:src/MightyBoard/Motherboard/EepromMap.cc **** 	for (uint8_t i=0;i<16;i++){
 356:src/MightyBoard/Motherboard/EepromMap.cc **** 		setEeprom8(eeprom_offsets::MACHINE_NAME+i, machine_name_in[i]);
 357:src/MightyBoard/Motherboard/EepromMap.cc **** //		xprintf("%x %c" " (%s:%d)\n",EEPROM_START_ADDRESS + (eeprom_offsets::MACHINE_NAME+i)*4,eeprom_a
 358:src/MightyBoard/Motherboard/EepromMap.cc **** 	}
 359:src/MightyBoard/Motherboard/EepromMap.cc **** //	eeprom_write_block("The Replicator",(uint8_t*)eeprom_offsets::MACHINE_NAME,20); // name is null
 360:src/MightyBoard/Motherboard/EepromMap.cc **** 	for (uint8_t i=0;i<5;i++){
 361:src/MightyBoard/Motherboard/EepromMap.cc **** 		setEeprom8(eeprom_offsets::DIGI_POT_SETTINGS+i, vRefBase[i]);
 362:src/MightyBoard/Motherboard/EepromMap.cc **** //		xprintf("%x %c" " (%s:%d)\n",EEPROM_START_ADDRESS + (eeprom_offsets::DIGI_POT_SETTINGS+i)*4,eep
 363:src/MightyBoard/Motherboard/EepromMap.cc **** 	}
 364:src/MightyBoard/Motherboard/EepromMap.cc **** //	eeprom_write_block(&(vRefBase[0]),(uint8_t*)(eeprom_offsets::DIGI_POT_SETTINGS), 5 );
 365:src/MightyBoard/Motherboard/EepromMap.cc **** 	setEeprom8(eeprom_offsets::ENDSTOP_INVERSION, endstop_invert);
 366:src/MightyBoard/Motherboard/EepromMap.cc **** //	eeprom_write_byte((uint8_t*)eeprom_offsets::ENDSTOP_INVERSION, endstop_invert);
 367:src/MightyBoard/Motherboard/EepromMap.cc **** 	setEeprom8(eeprom_offsets::AXIS_HOME_DIRECTION, home_direction);
 368:src/MightyBoard/Motherboard/EepromMap.cc **** //	eeprom_write_byte((uint8_t*)eeprom_offsets::AXIS_HOME_DIRECTION, home_direction);
 369:src/MightyBoard/Motherboard/EepromMap.cc ****     
 370:src/MightyBoard/Motherboard/EepromMap.cc **** 
 371:src/MightyBoard/Motherboard/EepromMap.cc **** 	setDefaultAxisHomePositions();
 372:src/MightyBoard/Motherboard/EepromMap.cc ****     
 373:src/MightyBoard/Motherboard/EepromMap.cc ****     /// store the default axis lengths for the machine
 374:src/MightyBoard/Motherboard/EepromMap.cc ****     for (uint8_t i=0;i<5;i++){
 375:src/MightyBoard/Motherboard/EepromMap.cc ****     	setEeprom32(eeprom_offsets::AXIS_LENGTHS+(i*4), replicator_axis_lengths::axis_lengths[i]);
 376:src/MightyBoard/Motherboard/EepromMap.cc ****     }
 377:src/MightyBoard/Motherboard/EepromMap.cc **** //    eeprom_write_block((uint8_t*)&(replicator_axis_lengths::axis_lengths[0]), (uint8_t*)(eeprom_o
 378:src/MightyBoard/Motherboard/EepromMap.cc ****     
 379:src/MightyBoard/Motherboard/EepromMap.cc ****     setDefaultsAcceleration();
 380:src/MightyBoard/Motherboard/EepromMap.cc **** 	
 381:src/MightyBoard/Motherboard/EepromMap.cc ****     setEeprom8(eeprom_offsets::FILAMENT_HELP_SETTINGS, 1);
 382:src/MightyBoard/Motherboard/EepromMap.cc **** //	eeprom_write_byte((uint8_t*)eeprom_offsets::FILAMENT_HELP_SETTINGS, 1);
 383:src/MightyBoard/Motherboard/EepromMap.cc **** 
 384:src/MightyBoard/Motherboard/EepromMap.cc ****     /// Thermal table settings
 385:src/MightyBoard/Motherboard/EepromMap.cc ****     SetDefaultsThermal(eeprom_offsets::THERM_TABLE);
 386:src/MightyBoard/Motherboard/EepromMap.cc ****     
 387:src/MightyBoard/Motherboard/EepromMap.cc ****     /// Preheat heater settings
 388:src/MightyBoard/Motherboard/EepromMap.cc ****     setDefaultsPreheat(eeprom_offsets::PREHEAT_SETTINGS);
 389:src/MightyBoard/Motherboard/EepromMap.cc **** 
 390:src/MightyBoard/Motherboard/EepromMap.cc ****     /// write MightyBoard VID/PID. Only after verification does production write
 391:src/MightyBoard/Motherboard/EepromMap.cc ****     /// a proper 'The Replicator' PID/VID to eeprom, and to the USB chip
 392:src/MightyBoard/Motherboard/EepromMap.cc ****     setEeprom16(eeprom_offsets::VID_PID_INFO, vidPid[0]);
 393:src/MightyBoard/Motherboard/EepromMap.cc ****     setEeprom16(eeprom_offsets::VID_PID_INFO+2, vidPid[1]);
 394:src/MightyBoard/Motherboard/EepromMap.cc **** //    eeprom_write_block(&(vidPid[0]),(uint8_t*)eeprom_offsets::VID_PID_INFO,4);
 395:src/MightyBoard/Motherboard/EepromMap.cc **** 
 396:src/MightyBoard/Motherboard/EepromMap.cc ****     /// Write 'extruder 0' settings
 397:src/MightyBoard/Motherboard/EepromMap.cc ****     setDefaultsExtruder(0,eeprom_offsets::T0_DATA_BASE);
 398:src/MightyBoard/Motherboard/EepromMap.cc **** 
 399:src/MightyBoard/Motherboard/EepromMap.cc ****     /// Write 'extruder 1' stttings
 400:src/MightyBoard/Motherboard/EepromMap.cc ****     setDefaultsExtruder(1,eeprom_offsets::T1_DATA_BASE);
 401:src/MightyBoard/Motherboard/EepromMap.cc **** 
 402:src/MightyBoard/Motherboard/EepromMap.cc ****     /// write blink and buzz defaults
 403:src/MightyBoard/Motherboard/EepromMap.cc ****     setDefaultLedEffects(eeprom_offsets::LED_STRIP_SETTINGS);
 404:src/MightyBoard/Motherboard/EepromMap.cc ****     setDefaultBuzzEffects(eeprom_offsets::BUZZ_SETTINGS);
 405:src/MightyBoard/Motherboard/EepromMap.cc ****     
 406:src/MightyBoard/Motherboard/EepromMap.cc ****     // startup script flag is cleared
 407:src/MightyBoard/Motherboard/EepromMap.cc ****     setEeprom8(eeprom_offsets::FIRST_BOOT_FLAG, 0);
 408:src/MightyBoard/Motherboard/EepromMap.cc **** //    eeprom_write_byte((uint8_t*)eeprom_offsets::FIRST_BOOT_FLAG, 0);
 409:src/MightyBoard/Motherboard/EepromMap.cc **** }
 410:src/MightyBoard/Motherboard/EepromMap.cc **** 
 411:src/MightyBoard/Motherboard/EepromMap.cc **** void setToolHeadCount(uint8_t count){
 412:src/MightyBoard/Motherboard/EepromMap.cc **** 	// update toolhead count
 413:src/MightyBoard/Motherboard/EepromMap.cc **** 	if(count > 2)
 414:src/MightyBoard/Motherboard/EepromMap.cc **** 		count = 1;
 415:src/MightyBoard/Motherboard/EepromMap.cc **** 	setEeprom8(eeprom_offsets::TOOL_COUNT, count);
 416:src/MightyBoard/Motherboard/EepromMap.cc **** //	eeprom_write_byte((uint8_t*)eeprom_offsets::TOOL_COUNT, count);
 417:src/MightyBoard/Motherboard/EepromMap.cc **** 	
 418:src/MightyBoard/Motherboard/EepromMap.cc **** 	// update XY axis offsets to match tool head settins
 419:src/MightyBoard/Motherboard/EepromMap.cc **** 	setDefaultAxisHomePositions();
 420:src/MightyBoard/Motherboard/EepromMap.cc **** }
 421:src/MightyBoard/Motherboard/EepromMap.cc **** 
 422:src/MightyBoard/Motherboard/EepromMap.cc ****     // check single / dual tool status
 423:src/MightyBoard/Motherboard/EepromMap.cc **** bool isSingleTool(){
 722              	 .loc 1 423 0
 723              	 .cfi_startproc
 724              	 
 725              	 
 726 0000 08B5     	 push {r3,lr}
 727              	.LCFI13:
 728              	 .cfi_def_cfa_offset 8
 729              	 .cfi_offset 14,-4
 730              	 .cfi_offset 3,-8
 424:src/MightyBoard/Motherboard/EepromMap.cc **** 	return (getEeprom8(eeprom_offsets::TOOL_COUNT, 1) == 1);
 731              	 .loc 1 424 0
 732 0002 4FF04200 	 mov r0,#66
 733 0006 4FF00101 	 mov r1,#1
 734 000a FFF7FEFF 	 bl _ZN6eeprom10getEeprom8Eth
 425:src/MightyBoard/Motherboard/EepromMap.cc **** }
 735              	 .loc 1 425 0
 736 000e 0128     	 cmp r0,#1
 737 0010 14BF     	 ite ne
 738 0012 0020     	 movne r0,#0
 739 0014 0120     	 moveq r0,#1
 740 0016 08BD     	 pop {r3,pc}
 741              	 .cfi_endproc
 742              	.LFE107:
 744              	 .section .text._ZN6eeprom27setDefaultAxisHomePositionsEv,"ax",%progbits
 745              	 .align 2
 746              	 .global _ZN6eeprom27setDefaultAxisHomePositionsEv
 747              	 .thumb
 748              	 .thumb_func
 750              	_ZN6eeprom27setDefaultAxisHomePositionsEv:
 751              	.LFB104:
 328:src/MightyBoard/Motherboard/EepromMap.cc **** {
 752              	 .loc 1 328 0
 753              	 .cfi_startproc
 754              	 
 755              	 
 756 0000 30B5     	 push {r4,r5,lr}
 757              	.LCFI14:
 758              	 .cfi_def_cfa_offset 12
 759              	 .cfi_offset 14,-4
 760              	 .cfi_offset 5,-8
 761              	 .cfi_offset 4,-12
 762 0002 87B0     	 sub sp,sp,#28
 763              	.LCFI15:
 764              	 .cfi_def_cfa_offset 40
 765              	.LBB51:
 329:src/MightyBoard/Motherboard/EepromMap.cc **** 	uint32_t homes[5] = {replicator_axis_offsets::DUAL_X_OFFSET_STEPS,replicator_axis_offsets::DUAL_Y_
 766              	 .loc 1 329 0
 767 0004 01AC     	 add r4,sp,#4
 768 0006 0E4D     	 ldr r5,.L30
 769 0008 0FCD     	 ldmia r5!,{r0,r1,r2,r3}
 770 000a 0FC4     	 stmia r4!,{r0,r1,r2,r3}
 771 000c 2B68     	 ldr r3,[r5,#0]
 772 000e 2360     	 str r3,[r4,#0]
 330:src/MightyBoard/Motherboard/EepromMap.cc **** 	if(isSingleTool()){
 773              	 .loc 1 330 0
 774 0010 FFF7FEFF 	 bl _ZN6eeprom12isSingleToolEv
 775 0014 28B1     	 cbz r0,.L27
 331:src/MightyBoard/Motherboard/EepromMap.cc **** 		homes[0] = replicator_axis_offsets::SINGLE_X_OFFSET_STEPS;
 776              	 .loc 1 331 0
 777 0016 43F2E573 	 movw r3,#14309
 778 001a 0193     	 str r3,[sp,#4]
 332:src/MightyBoard/Motherboard/EepromMap.cc **** 		homes[1] = replicator_axis_offsets::SINGLE_Y_OFFSET_STEPS;
 779              	 .loc 1 332 0
 780 001c 41F67A23 	 movw r3,#6778
 781 0020 0293     	 str r3,[sp,#8]
 782              	.L27:
 783              	.LVL37:
 332:src/MightyBoard/Motherboard/EepromMap.cc **** 		homes[1] = replicator_axis_offsets::SINGLE_Y_OFFSET_STEPS;
 784              	 .loc 1 332 0 is_stmt 0 discriminator 1
 785 0022 6D46     	 mov r5,sp
 786              	.LBE51:
 328:src/MightyBoard/Motherboard/EepromMap.cc **** {
 787              	 .loc 1 328 0 is_stmt 1 discriminator 1
 788 0024 4FF00E04 	 mov r4,#14
 789              	.LVL38:
 790              	.L28:
 791              	.LBB53:
 792              	.LBB52:
 336:src/MightyBoard/Motherboard/EepromMap.cc **** 		setEeprom32(eeprom_offsets::AXIS_HOME_POSITIONS_STEPS+(i*4), homes[i]);
 793              	 .loc 1 336 0 discriminator 2
 794 0028 2046     	 mov r0,r4
 795 002a 55F8041F 	 ldr r1,[r5,#4]!
 796 002e FFF7FEFF 	 bl _ZN6eeprom11setEeprom32Etm
 797 0032 04F10404 	 add r4,r4,#4
 798 0036 A4B2     	 uxth r4,r4
 334:src/MightyBoard/Motherboard/EepromMap.cc **** 	for (uint8_t i=0;i<5;i++){
 799              	 .loc 1 334 0 discriminator 2
 800 0038 222C     	 cmp r4,#34
 801 003a F5D1     	 bne .L28
 802              	.LBE52:
 803              	.LBE53:
 339:src/MightyBoard/Motherboard/EepromMap.cc **** }
 804              	 .loc 1 339 0
 805 003c 07B0     	 add sp,sp,#28
 806 003e 30BD     	 pop {r4,r5,pc}
 807              	.L31:
 808              	 .align 2
 809              	.L30:
 810 0040 04000000 	 .word .LANCHOR0+4
 811              	 .cfi_endproc
 812              	.LFE104:
 814              	 .section .text._ZN6eeprom16setToolHeadCountEh,"ax",%progbits
 815              	 .align 2
 816              	 .global _ZN6eeprom16setToolHeadCountEh
 817              	 .thumb
 818              	 .thumb_func
 820              	_ZN6eeprom16setToolHeadCountEh:
 821              	.LFB106:
 411:src/MightyBoard/Motherboard/EepromMap.cc **** void setToolHeadCount(uint8_t count){
 822              	 .loc 1 411 0
 823              	 .cfi_startproc
 824              	 
 825              	 
 826              	.LVL39:
 827 0000 08B5     	 push {r3,lr}
 828              	.LCFI16:
 829              	 .cfi_def_cfa_offset 8
 830              	 .cfi_offset 14,-4
 831              	 .cfi_offset 3,-8
 832 0002 0146     	 mov r1,r0
 833              	.LVL40:
 415:src/MightyBoard/Motherboard/EepromMap.cc **** 	setEeprom8(eeprom_offsets::TOOL_COUNT, count);
 834              	 .loc 1 415 0
 835 0004 4FF04200 	 mov r0,#66
 836              	.LVL41:
 837 0008 0229     	 cmp r1,#2
 838 000a 88BF     	 it hi
 839 000c 0121     	 movhi r1,#1
 840              	.LVL42:
 841 000e FFF7FEFF 	 bl _ZN6eeprom10setEeprom8Eth
 419:src/MightyBoard/Motherboard/EepromMap.cc **** 	setDefaultAxisHomePositions();
 842              	 .loc 1 419 0
 843 0012 FFF7FEFF 	 bl _ZN6eeprom27setDefaultAxisHomePositionsEv
 420:src/MightyBoard/Motherboard/EepromMap.cc **** }
 844              	 .loc 1 420 0
 845 0016 08BD     	 pop {r3,pc}
 846              	 .cfi_endproc
 847              	.LFE106:
 849              	 .section .text._ZN6eeprom18factoryResetEEPROMEv,"ax",%progbits
 850              	 .align 2
 851              	 .global _ZN6eeprom18factoryResetEEPROMEv
 852              	 .thumb
 853              	 .thumb_func
 855              	_ZN6eeprom18factoryResetEEPROMEv:
 856              	.LFB105:
 342:src/MightyBoard/Motherboard/EepromMap.cc **** void factoryResetEEPROM() {
 857              	 .loc 1 342 0
 858              	 .cfi_startproc
 859              	 
 860              	 
 861 0000 30B5     	 push {r4,r5,lr}
 862              	.LCFI17:
 863              	 .cfi_def_cfa_offset 12
 864              	 .cfi_offset 14,-4
 865              	 .cfi_offset 5,-8
 866              	 .cfi_offset 4,-12
 867 0002 87B0     	 sub sp,sp,#28
 868              	.LCFI18:
 869              	 .cfi_def_cfa_offset 40
 870              	.LVL43:
 871              	.LBB54:
 350:src/MightyBoard/Motherboard/EepromMap.cc **** 	uint8_t vRefBase[] = {118,118,40,118,118};  //(AB maxed out)
 872              	 .loc 1 350 0
 873 0004 40F20003 	 movw r3,#:lower16:.LANCHOR0
 874 0008 C0F20003 	 movt r3,#:upper16:.LANCHOR0
 875 000c 53F8180F 	 ldr r0,[r3,#24]!
 876 0010 0490     	 str r0,[sp,#16]
 877 0012 1B79     	 ldrb r3,[r3,#4]
 878 0014 8DF81430 	 strb r3,[sp,#20]
 879              	.LVL44:
 354:src/MightyBoard/Motherboard/EepromMap.cc **** 	char machine_name_in[] = "The Replicator";
 880              	 .loc 1 354 0
 881 0018 40F20003 	 movw r3,#:lower16:.LC7
 882 001c C0F20003 	 movt r3,#:upper16:.LC7
 883 0020 6C46     	 mov r4,sp
 884 0022 0FCB     	 ldmia r3,{r0,r1,r2,r3}
 885 0024 07C4     	 stmia r4!,{r0,r1,r2}
 886 0026 24F8023B 	 strh r3,[r4],#2
 887 002a 4FEA1343 	 lsr r3,r3,#16
 888 002e 2370     	 strb r3,[r4,#0]
 889              	.LVL45:
 890 0030 0DF1FF35 	 add r5,sp,#-1
 891 0034 4FF02204 	 mov r4,#34
 892              	.LVL46:
 893              	.L36:
 894              	.LBB55:
 356:src/MightyBoard/Motherboard/EepromMap.cc **** 		setEeprom8(eeprom_offsets::MACHINE_NAME+i, machine_name_in[i]);
 895              	 .loc 1 356 0 discriminator 2
 896 0038 2046     	 mov r0,r4
 897 003a 15F8011F 	 ldrb r1,[r5,#1]!
 898 003e FFF7FEFF 	 bl _ZN6eeprom10setEeprom8Eth
 899 0042 04F10104 	 add r4,r4,#1
 900 0046 A4B2     	 uxth r4,r4
 355:src/MightyBoard/Motherboard/EepromMap.cc **** 	for (uint8_t i=0;i<16;i++){
 901              	 .loc 1 355 0 discriminator 2
 902 0048 322C     	 cmp r4,#50
 903 004a F5D1     	 bne .L36
 355:src/MightyBoard/Motherboard/EepromMap.cc **** 	for (uint8_t i=0;i<16;i++){
 904              	 .loc 1 355 0 is_stmt 0
 905 004c 0DF10F05 	 add r5,sp,#15
 906 0050 4FF00604 	 mov r4,#6
 907              	.L37:
 908              	.LBE55:
 909              	.LBB56:
 361:src/MightyBoard/Motherboard/EepromMap.cc **** 		setEeprom8(eeprom_offsets::DIGI_POT_SETTINGS+i, vRefBase[i]);
 910              	 .loc 1 361 0 is_stmt 1 discriminator 2
 911 0054 2046     	 mov r0,r4
 912 0056 15F8011F 	 ldrb r1,[r5,#1]!
 913 005a FFF7FEFF 	 bl _ZN6eeprom10setEeprom8Eth
 914 005e 04F10104 	 add r4,r4,#1
 915 0062 A4B2     	 uxth r4,r4
 360:src/MightyBoard/Motherboard/EepromMap.cc **** 	for (uint8_t i=0;i<5;i++){
 916              	 .loc 1 360 0 discriminator 2
 917 0064 0B2C     	 cmp r4,#11
 918 0066 F5D1     	 bne .L37
 919              	.LBE56:
 365:src/MightyBoard/Motherboard/EepromMap.cc **** 	setEeprom8(eeprom_offsets::ENDSTOP_INVERSION, endstop_invert);
 920              	 .loc 1 365 0
 921 0068 4FF00400 	 mov r0,#4
 922 006c 4FF09F01 	 mov r1,#159
 923 0070 FFF7FEFF 	 bl _ZN6eeprom10setEeprom8Eth
 367:src/MightyBoard/Motherboard/EepromMap.cc **** 	setEeprom8(eeprom_offsets::AXIS_HOME_DIRECTION, home_direction);
 924              	 .loc 1 367 0
 925 0074 4FF00C00 	 mov r0,#12
 926 0078 4FF01B01 	 mov r1,#27
 927 007c FFF7FEFF 	 bl _ZN6eeprom10setEeprom8Eth
 371:src/MightyBoard/Motherboard/EepromMap.cc **** 	setDefaultAxisHomePositions();
 928              	 .loc 1 371 0
 929 0080 FFF7FEFF 	 bl _ZN6eeprom27setDefaultAxisHomePositionsEv
 930              	.LVL47:
 931 0084 224D     	 ldr r5,.L42
 932 0086 4FF4C674 	 mov r4,#396
 933              	.LVL48:
 934              	.L38:
 935              	.LBB57:
 375:src/MightyBoard/Motherboard/EepromMap.cc ****     	setEeprom32(eeprom_offsets::AXIS_LENGTHS+(i*4), replicator_axis_lengths::axis_lengths[i]);
 936              	 .loc 1 375 0 discriminator 2
 937 008a 2046     	 mov r0,r4
 938 008c 55F8041F 	 ldr r1,[r5,#4]!
 939 0090 FFF7FEFF 	 bl _ZN6eeprom11setEeprom32Etm
 940 0094 04F10404 	 add r4,r4,#4
 941 0098 A4B2     	 uxth r4,r4
 374:src/MightyBoard/Motherboard/EepromMap.cc ****     for (uint8_t i=0;i<5;i++){
 942              	 .loc 1 374 0 discriminator 2
 943 009a B4F5D07F 	 cmp r4,#416
 944 009e F4D1     	 bne .L38
 945              	.LBE57:
 379:src/MightyBoard/Motherboard/EepromMap.cc ****     setDefaultsAcceleration();
 946              	 .loc 1 379 0
 947 00a0 FFF7FEFF 	 bl _ZN6eeprom23setDefaultsAccelerationEv
 381:src/MightyBoard/Motherboard/EepromMap.cc ****     setEeprom8(eeprom_offsets::FILAMENT_HELP_SETTINGS, 1);
 948              	 .loc 1 381 0
 949 00a4 4FF4B070 	 mov r0,#352
 950 00a8 4FF00101 	 mov r1,#1
 951 00ac FFF7FEFF 	 bl _ZN6eeprom10setEeprom8Eth
 385:src/MightyBoard/Motherboard/EepromMap.cc ****     SetDefaultsThermal(eeprom_offsets::THERM_TABLE);
 952              	 .loc 1 385 0
 953 00b0 4FF07400 	 mov r0,#116
 954 00b4 FFF7FEFF 	 bl _ZN6eeprom18SetDefaultsThermalEt
 388:src/MightyBoard/Motherboard/EepromMap.cc ****     setDefaultsPreheat(eeprom_offsets::PREHEAT_SETTINGS);
 955              	 .loc 1 388 0
 956 00b8 4FF4AC70 	 mov r0,#344
 957 00bc FFF7FEFF 	 bl _ZN6eeprom18setDefaultsPreheatEt
 392:src/MightyBoard/Motherboard/EepromMap.cc ****     setEeprom16(eeprom_offsets::VID_PID_INFO, vidPid[0]);
 958              	 .loc 1 392 0
 959 00c0 4FF04400 	 mov r0,#68
 960 00c4 42F2C131 	 movw r1,#9153
 961 00c8 FFF7FEFF 	 bl _ZN6eeprom11setEeprom16Ett
 393:src/MightyBoard/Motherboard/EepromMap.cc ****     setEeprom16(eeprom_offsets::VID_PID_INFO+2, vidPid[1]);
 962              	 .loc 1 393 0
 963 00cc 4FF04600 	 mov r0,#70
 964 00d0 4BF20441 	 movw r1,#46084
 965 00d4 FFF7FEFF 	 bl _ZN6eeprom11setEeprom16Ett
 397:src/MightyBoard/Motherboard/EepromMap.cc ****     setDefaultsExtruder(0,eeprom_offsets::T0_DATA_BASE);
 966              	 .loc 1 397 0
 967 00d8 4FF00000 	 mov r0,#0
 968 00dc 4FF48071 	 mov r1,#256
 969 00e0 FFF7FEFF 	 bl _ZN6eeprom19setDefaultsExtruderEit
 400:src/MightyBoard/Motherboard/EepromMap.cc ****     setDefaultsExtruder(1,eeprom_offsets::T1_DATA_BASE);
 970              	 .loc 1 400 0
 971 00e4 4FF00100 	 mov r0,#1
 972 00e8 4FF48E71 	 mov r1,#284
 973 00ec FFF7FEFF 	 bl _ZN6eeprom19setDefaultsExtruderEit
 403:src/MightyBoard/Motherboard/EepromMap.cc ****     setDefaultLedEffects(eeprom_offsets::LED_STRIP_SETTINGS);
 974              	 .loc 1 403 0
 975 00f0 4FF4A070 	 mov r0,#320
 976 00f4 FFF7FEFF 	 bl _ZN6eeprom20setDefaultLedEffectsEt
 404:src/MightyBoard/Motherboard/EepromMap.cc ****     setDefaultBuzzEffects(eeprom_offsets::BUZZ_SETTINGS);
 977              	 .loc 1 404 0
 978 00f8 4FF4A570 	 mov r0,#330
 979 00fc FFF7FEFF 	 bl _ZN6eeprom21setDefaultBuzzEffectsEt
 407:src/MightyBoard/Motherboard/EepromMap.cc ****     setEeprom8(eeprom_offsets::FIRST_BOOT_FLAG, 0);
 980              	 .loc 1 407 0
 981 0100 4FF4AB70 	 mov r0,#342
 982 0104 4FF00001 	 mov r1,#0
 983 0108 FFF7FEFF 	 bl _ZN6eeprom10setEeprom8Eth
 984              	.LBE54:
 409:src/MightyBoard/Motherboard/EepromMap.cc **** }
 985              	 .loc 1 409 0
 986 010c 07B0     	 add sp,sp,#28
 987 010e 30BD     	 pop {r4,r5,pc}
 988              	.L43:
 989              	 .align 2
 990              	.L42:
 991 0110 FCFFFFFF 	 .word .LANCHOR1-4
 992              	 .cfi_endproc
 993              	.LFE105:
 995              	 .section .text._ZN6eeprom18setDefaultSettingsEv,"ax",%progbits
 996              	 .align 2
 997              	 .global _ZN6eeprom18setDefaultSettingsEv
 998              	 .thumb
 999              	 .thumb_func
 1001              	_ZN6eeprom18setDefaultSettingsEv:
 1002              	.LFB108:
 426:src/MightyBoard/Motherboard/EepromMap.cc **** 
 427:src/MightyBoard/Motherboard/EepromMap.cc **** 
 428:src/MightyBoard/Motherboard/EepromMap.cc **** // reset the settings that can be changed via the onboard UI to defaults
 429:src/MightyBoard/Motherboard/EepromMap.cc **** void setDefaultSettings(){
 1003              	 .loc 1 429 0
 1004              	 .cfi_startproc
 1005              	 
 1006              	 
 1007 0000 08B5     	 push {r3,lr}
 1008              	.LCFI19:
 1009              	 .cfi_def_cfa_offset 8
 1010              	 .cfi_offset 14,-4
 1011              	 .cfi_offset 3,-8
 430:src/MightyBoard/Motherboard/EepromMap.cc ****     /// write blink and buzz defaults
 431:src/MightyBoard/Motherboard/EepromMap.cc ****     setDefaultLedEffects(eeprom_offsets::LED_STRIP_SETTINGS);
 1012              	 .loc 1 431 0
 1013 0002 4FF4A070 	 mov r0,#320
 1014 0006 FFF7FEFF 	 bl _ZN6eeprom20setDefaultLedEffectsEt
 432:src/MightyBoard/Motherboard/EepromMap.cc ****     setDefaultBuzzEffects(eeprom_offsets::BUZZ_SETTINGS);
 1015              	 .loc 1 432 0
 1016 000a 4FF4A570 	 mov r0,#330
 1017 000e FFF7FEFF 	 bl _ZN6eeprom21setDefaultBuzzEffectsEt
 433:src/MightyBoard/Motherboard/EepromMap.cc ****     setDefaultsPreheat(eeprom_offsets::PREHEAT_SETTINGS);
 1018              	 .loc 1 433 0
 1019 0012 4FF4AC70 	 mov r0,#344
 1020 0016 FFF7FEFF 	 bl _ZN6eeprom18setDefaultsPreheatEt
 434:src/MightyBoard/Motherboard/EepromMap.cc ****     setEeprom8(eeprom_offsets::FILAMENT_HELP_SETTINGS, 1);
 1021              	 .loc 1 434 0
 1022 001a 4FF4B070 	 mov r0,#352
 1023 001e 4FF00101 	 mov r1,#1
 1024 0022 FFF7FEFF 	 bl _ZN6eeprom10setEeprom8Eth
 435:src/MightyBoard/Motherboard/EepromMap.cc **** //   eeprom_write_byte((uint8_t*)eeprom_offsets::FILAMENT_HELP_SETTINGS, 1);
 436:src/MightyBoard/Motherboard/EepromMap.cc **** }
 1025              	 .loc 1 436 0
 1026 0026 08BD     	 pop {r3,pc}
 1027              	 .cfi_endproc
 1028              	.LFE108:
 1030              	 .section .text._ZN6eeprom30storeToolheadToleranceDefaultsEv,"ax",%progbits
 1031              	 .align 2
 1032              	 .global _ZN6eeprom30storeToolheadToleranceDefaultsEv
 1033              	 .thumb
 1034              	 .thumb_func
 1036              	_ZN6eeprom30storeToolheadToleranceDefaultsEv:
 1037              	.LFB109:
 437:src/MightyBoard/Motherboard/EepromMap.cc **** 
 438:src/MightyBoard/Motherboard/EepromMap.cc **** //
 439:src/MightyBoard/Motherboard/EepromMap.cc **** void storeToolheadToleranceDefaults(){
 1038              	 .loc 1 439 0
 1039              	 .cfi_startproc
 1040              	 
 1041              	 
 1042 0000 00B5     	 push {lr}
 1043              	.LCFI20:
 1044              	 .cfi_def_cfa_offset 4
 1045              	 .cfi_offset 14,-4
 1046 0002 85B0     	 sub sp,sp,#20
 1047              	.LCFI21:
 1048              	 .cfi_def_cfa_offset 24
 1049              	.LBB58:
 440:src/MightyBoard/Motherboard/EepromMap.cc **** 	// assume t0 to t1 distance is in specifications (0 steps tolerance error)
 441:src/MightyBoard/Motherboard/EepromMap.cc **** 	uint32_t offsets[3] = {0,0,0};
 1050              	 .loc 1 441 0
 1051 0004 4FF00001 	 mov r1,#0
 1052 0008 0191     	 str r1,[sp,#4]
 1053 000a 0291     	 str r1,[sp,#8]
 1054 000c 0391     	 str r1,[sp,#12]
 1055              	.LVL49:
 1056              	.LBB59:
 442:src/MightyBoard/Motherboard/EepromMap.cc **** 	for (uint8_t i=0;i<3;i++){
 443:src/MightyBoard/Motherboard/EepromMap.cc **** 		setEeprom32(eeprom_offsets::TOOLHEAD_OFFSET_SETTINGS+(i*4), offsets[i]);
 1057              	 .loc 1 443 0
 1058 000e 4FF4B170 	 mov r0,#354
 1059 0012 FFF7FEFF 	 bl _ZN6eeprom11setEeprom32Etm
 1060              	.LVL50:
 1061 0016 4FF4B370 	 mov r0,#358
 1062 001a 0299     	 ldr r1,[sp,#8]
 1063 001c FFF7FEFF 	 bl _ZN6eeprom11setEeprom32Etm
 1064              	.LVL51:
 1065 0020 4FF4B570 	 mov r0,#362
 1066 0024 0399     	 ldr r1,[sp,#12]
 1067 0026 FFF7FEFF 	 bl _ZN6eeprom11setEeprom32Etm
 1068              	.LVL52:
 1069              	.LBE59:
 1070              	.LBE58:
 444:src/MightyBoard/Motherboard/EepromMap.cc **** //		xprintf("%x" " (%s:%d)\n",eeprom_address(EEPROM_START_ADDRESS, eeprom_offsets::TOOLHEAD_OFFSET_
 445:src/MightyBoard/Motherboard/EepromMap.cc **** //		xprintf("%x" " (%s:%d)\n",(EEPROM_START_ADDRESS + eeprom_offsets::TOOLHEAD_OFFSET_SETTINGS+(i*4
 446:src/MightyBoard/Motherboard/EepromMap.cc **** 	}
 447:src/MightyBoard/Motherboard/EepromMap.cc **** //	eeprom_write_block((uint8_t*)&(offsets[0]),(uint8_t*)(eeprom_offsets::TOOLHEAD_OFFSET_SETTINGS),
 448:src/MightyBoard/Motherboard/EepromMap.cc **** }
 1071              	 .loc 1 448 0
 1072 002a 05B0     	 add sp,sp,#20
 1073 002c 00BD     	 pop {pc}
 1074              	 .cfi_endproc
 1075              	.LFE109:
 1077 002e 00BF     	 .section .text._ZN6eeprom15updateBuildTimeEhh,"ax",%progbits
 1078              	 .align 2
 1079              	 .global _ZN6eeprom15updateBuildTimeEhh
 1080              	 .thumb
 1081              	 .thumb_func
 1083              	_ZN6eeprom15updateBuildTimeEhh:
 1084              	.LFB110:
 449:src/MightyBoard/Motherboard/EepromMap.cc **** 
 450:src/MightyBoard/Motherboard/EepromMap.cc **** void updateBuildTime(uint8_t new_hours, uint8_t new_minutes){
 1085              	 .loc 1 450 0
 1086              	 .cfi_startproc
 1087              	 
 1088              	 
 1089              	.LVL53:
 1090 0000 70B5     	 push {r4,r5,r6,lr}
 1091              	.LCFI22:
 1092              	 .cfi_def_cfa_offset 16
 1093              	 .cfi_offset 14,-4
 1094              	 .cfi_offset 6,-8
 1095              	 .cfi_offset 5,-12
 1096              	 .cfi_offset 4,-16
 1097 0002 0646     	 mov r6,r0
 1098 0004 0D46     	 mov r5,r1
 1099              	.LBB60:
 451:src/MightyBoard/Motherboard/EepromMap.cc **** 	
 452:src/MightyBoard/Motherboard/EepromMap.cc **** 	uint16_t hours = eeprom::getEeprom16(eeprom_offsets::TOTAL_BUILD_TIME + build_time_offsets::HOURS_
 1100              	 .loc 1 452 0
 1101 0006 4FF4D070 	 mov r0,#416
 1102              	.LVL54:
 1103 000a 4FF00001 	 mov r1,#0
 1104              	.LVL55:
 1105 000e FFF7FEFF 	 bl _ZN6eeprom11getEeprom16Ett
 1106 0012 0446     	 mov r4,r0
 1107              	.LVL56:
 453:src/MightyBoard/Motherboard/EepromMap.cc **** 	uint8_t minutes = eeprom::getEeprom8(eeprom_offsets::TOTAL_BUILD_TIME + build_time_offsets::MINUTE
 1108              	 .loc 1 453 0
 1109 0014 4FF4D170 	 mov r0,#418
 1110              	.LVL57:
 1111 0018 4FF00001 	 mov r1,#0
 1112 001c FFF7FEFF 	 bl _ZN6eeprom10getEeprom8Eth
 1113              	.LVL58:
 454:src/MightyBoard/Motherboard/EepromMap.cc **** 	
 455:src/MightyBoard/Motherboard/EepromMap.cc **** 	uint8_t total_minutes = new_minutes + minutes;
 1114              	 .loc 1 455 0
 1115 0020 4019     	 adds r0,r0,r5
 1116              	.LVL59:
 1117 0022 C0B2     	 uxtb r0,r0
 1118              	.LVL60:
 456:src/MightyBoard/Motherboard/EepromMap.cc **** 	minutes = total_minutes % 60;
 1119              	 .loc 1 456 0
 1120 0024 48F68905 	 movw r5,#34953
 1121 0028 C8F68805 	 movt r5,34952
 1122 002c A5FB0035 	 umull r3,r5,r5,r0
 1123 0030 4FEA5515 	 lsr r5,r5,#5
 1124 0034 C5EB0515 	 rsb r5,r5,r5,lsl#4
 1125 0038 A0EB8505 	 sub r5,r0,r5,lsl#2
 1126 003c EDB2     	 uxtb r5,r5
 1127              	.LVL61:
 457:src/MightyBoard/Motherboard/EepromMap.cc **** 	
 458:src/MightyBoard/Motherboard/EepromMap.cc **** 	// increment hours if minutes are over 60
 459:src/MightyBoard/Motherboard/EepromMap.cc **** 	if(total_minutes > 60){
 1128              	 .loc 1 459 0
 1129 003e 3C28     	 cmp r0,#60
 460:src/MightyBoard/Motherboard/EepromMap.cc **** 		hours++;
 1130              	 .loc 1 460 0
 1131 0040 84BF     	 itt hi
 1132 0042 0134     	 addhi r4,r4,#1
 1133              	.LVL62:
 1134 0044 A4B2     	 uxthhi r4,r4
 1135              	.LVL63:
 461:src/MightyBoard/Motherboard/EepromMap.cc **** 	}
 462:src/MightyBoard/Motherboard/EepromMap.cc **** 	
 463:src/MightyBoard/Motherboard/EepromMap.cc **** 	// update build time
 464:src/MightyBoard/Motherboard/EepromMap.cc **** 	setEeprom16(eeprom_offsets::TOTAL_BUILD_TIME + build_time_offsets::HOURS_OFFSET, hours + new_hours
 1136              	 .loc 1 464 0
 1137 0046 A419     	 adds r4,r4,r6
 1138              	.LVL64:
 1139 0048 4FF4D070 	 mov r0,#416
 1140              	.LVL65:
 1141 004c A1B2     	 uxth r1,r4
 1142 004e FFF7FEFF 	 bl _ZN6eeprom11setEeprom16Ett
 465:src/MightyBoard/Motherboard/EepromMap.cc **** 	setEeprom8(eeprom_offsets::TOTAL_BUILD_TIME + build_time_offsets::MINUTES_OFFSET, minutes);
 1143              	 .loc 1 465 0
 1144 0052 4FF4D170 	 mov r0,#418
 1145 0056 2946     	 mov r1,r5
 1146 0058 FFF7FEFF 	 bl _ZN6eeprom10setEeprom8Eth
 1147              	.LBE60:
 466:src/MightyBoard/Motherboard/EepromMap.cc **** //	eeprom_write_word((uint16_t*)(eeprom_offsets::TOTAL_BUILD_TIME + build_time_offsets::HOURS_OFFSE
 467:src/MightyBoard/Motherboard/EepromMap.cc **** //	eeprom_write_byte((uint8_t*)(eeprom_offsets::TOTAL_BUILD_TIME + build_time_offsets::MINUTES_OFFS
 468:src/MightyBoard/Motherboard/EepromMap.cc **** 
 469:src/MightyBoard/Motherboard/EepromMap.cc **** }
 1148              	 .loc 1 469 0
 1149 005c 70BD     	 pop {r4,r5,r6,pc}
 1150              	 .cfi_endproc
 1151              	.LFE110:
 1153 005e 00BF     	 .section .text._ZN6eeprom15fullResetEEPROMEv,"ax",%progbits
 1154              	 .align 2
 1155              	 .global _ZN6eeprom15fullResetEEPROMEv
 1156              	 .thumb
 1157              	 .thumb_func
 1159              	_ZN6eeprom15fullResetEEPROMEv:
 1160              	.LFB111:
 470:src/MightyBoard/Motherboard/EepromMap.cc **** 
 471:src/MightyBoard/Motherboard/EepromMap.cc **** /// Initialize entire eeprom map, including factor-set settings
 472:src/MightyBoard/Motherboard/EepromMap.cc **** void fullResetEEPROM() {
 1161              	 .loc 1 472 0
 1162              	 .cfi_startproc
 1163              	 
 1164              	 
 1165 0000 08B5     	 push {r3,lr}
 1166              	.LCFI23:
 1167              	 .cfi_def_cfa_offset 8
 1168              	 .cfi_offset 14,-4
 1169              	 .cfi_offset 3,-8
 1170              	.LBB61:
 473:src/MightyBoard/Motherboard/EepromMap.cc **** 	write_ff_to_ram();
 1171              	 .loc 1 473 0
 1172 0002 FFF7FEFF 	 bl _ZN6eeprom15write_ff_to_ramEv
 1173              	.LVL66:
 474:src/MightyBoard/Motherboard/EepromMap.cc **** 	// axis inversion settings
 475:src/MightyBoard/Motherboard/EepromMap.cc **** 	uint8_t axis_invert = 0b10111; // invert XYBZ
 476:src/MightyBoard/Motherboard/EepromMap.cc **** 	setEeprom8(eeprom_offsets::AXIS_INVERSION, axis_invert);
 1174              	 .loc 1 476 0
 1175 0006 4FF00200 	 mov r0,#2
 1176 000a 4FF01701 	 mov r1,#23
 1177 000e FFF7FEFF 	 bl _ZN6eeprom10setEeprom8Eth
 477:src/MightyBoard/Motherboard/EepromMap.cc **** //	eeprom_write_byte((uint8_t*)eeprom_offsets::AXIS_INVERSION, axis_invert);
 478:src/MightyBoard/Motherboard/EepromMap.cc **** 	
 479:src/MightyBoard/Motherboard/EepromMap.cc **** 	// tool count settings
 480:src/MightyBoard/Motherboard/EepromMap.cc **** 	setEeprom8(eeprom_offsets::TOOL_COUNT, 1);
 1178              	 .loc 1 480 0
 1179 0012 4FF04200 	 mov r0,#66
 1180 0016 4FF00101 	 mov r1,#1
 1181 001a FFF7FEFF 	 bl _ZN6eeprom10setEeprom8Eth
 481:src/MightyBoard/Motherboard/EepromMap.cc **** //	eeprom_write_byte((uint8_t*)eeprom_offsets::TOOL_COUNT, 1);
 482:src/MightyBoard/Motherboard/EepromMap.cc **** 	
 483:src/MightyBoard/Motherboard/EepromMap.cc **** 	// toolhead offset defaults
 484:src/MightyBoard/Motherboard/EepromMap.cc **** 	storeToolheadToleranceDefaults();
 1182              	 .loc 1 484 0
 1183 001e FFF7FEFF 	 bl _ZN6eeprom30storeToolheadToleranceDefaultsEv
 485:src/MightyBoard/Motherboard/EepromMap.cc **** 	
 486:src/MightyBoard/Motherboard/EepromMap.cc **** 	// set build time to zero
 487:src/MightyBoard/Motherboard/EepromMap.cc **** 	setEeprom16(eeprom_offsets::TOTAL_BUILD_TIME + build_time_offsets::HOURS_OFFSET, 0);
 1184              	 .loc 1 487 0
 1185 0022 4FF4D070 	 mov r0,#416
 1186 0026 4FF00001 	 mov r1,#0
 1187 002a FFF7FEFF 	 bl _ZN6eeprom11setEeprom16Ett
 488:src/MightyBoard/Motherboard/EepromMap.cc **** 	setEeprom8(eeprom_offsets::TOTAL_BUILD_TIME + build_time_offsets::MINUTES_OFFSET, 0);
 1188              	 .loc 1 488 0
 1189 002e 4FF4D170 	 mov r0,#418
 1190 0032 4FF00001 	 mov r1,#0
 1191 0036 FFF7FEFF 	 bl _ZN6eeprom10setEeprom8Eth
 489:src/MightyBoard/Motherboard/EepromMap.cc **** //	eeprom_write_word((uint16_t*)(eeprom_offsets::TOTAL_BUILD_TIME + build_time_offsets::HOURS_OFFSE
 490:src/MightyBoard/Motherboard/EepromMap.cc **** //	eeprom_write_byte((uint8_t*)(eeprom_offsets::TOTAL_BUILD_TIME + build_time_offsets::MINUTES_OFFS
 491:src/MightyBoard/Motherboard/EepromMap.cc **** 	
 492:src/MightyBoard/Motherboard/EepromMap.cc **** 	factoryResetEEPROM();
 1192              	 .loc 1 492 0
 1193 003a FFF7FEFF 	 bl _ZN6eeprom18factoryResetEEPROMEv
 1194              	.LBE61:
 493:src/MightyBoard/Motherboard/EepromMap.cc **** }
 1195              	 .loc 1 493 0
 1196 003e 08BD     	 pop {r3,pc}
 1197              	 .cfi_endproc
 1198              	.LFE111:
 1200              	 .section .text._GLOBAL__sub_I__ZN6eeprom15write_ff_to_ramEv,"ax",%progbits
 1201              	 .align 2
 1202              	 .thumb
 1203              	 .thumb_func
 1205              	_GLOBAL__sub_I__ZN6eeprom15write_ff_to_ramEv:
 1206              	.LFB113:
 494:src/MightyBoard/Motherboard/EepromMap.cc **** 
 495:src/MightyBoard/Motherboard/EepromMap.cc **** }
 1207              	 .loc 1 495 0
 1208              	 .cfi_startproc
 1209              	 
 1210              	 
 1211 0000 10B5     	 push {r4,lr}
 1212              	.LCFI24:
 1213              	 .cfi_def_cfa_offset 8
 1214              	 .cfi_offset 14,-4
 1215              	 .cfi_offset 4,-8
 1216              	.LVL67:
 1217              	.LBB64:
 1218              	.LBB65:
 1219              	 .file 3 "src/MightyBoard/shared/LPCPort.hh"
   1:src/MightyBoard/shared/LPCPort.hh **** /*
   2:src/MightyBoard/shared/LPCPort.hh **** * Copyright 2010 by Adam Mayer	 <adam@makerbot.com>
   3:src/MightyBoard/shared/LPCPort.hh **** *
   4:src/MightyBoard/shared/LPCPort.hh **** * This program is free software: you can redistribute it and/or modify
   5:src/MightyBoard/shared/LPCPort.hh **** * it under the terms of the GNU General Public License as published by
   6:src/MightyBoard/shared/LPCPort.hh **** * the Free Software Foundation, either version 3 of the License, or
   7:src/MightyBoard/shared/LPCPort.hh **** * (at your option) any later version.
   8:src/MightyBoard/shared/LPCPort.hh **** *
   9:src/MightyBoard/shared/LPCPort.hh **** * This program is distributed in the hope that it will be useful,
  10:src/MightyBoard/shared/LPCPort.hh **** * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:src/MightyBoard/shared/LPCPort.hh **** * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:src/MightyBoard/shared/LPCPort.hh **** * GNU General Public License for more details.
  13:src/MightyBoard/shared/LPCPort.hh **** *
  14:src/MightyBoard/shared/LPCPort.hh **** * You should have received a copy of the GNU General Public License
  15:src/MightyBoard/shared/LPCPort.hh **** * along with this program.  If not, see <http://www.gnu.org/licenses/>
  16:src/MightyBoard/shared/LPCPort.hh **** */
  17:src/MightyBoard/shared/LPCPort.hh **** 
  18:src/MightyBoard/shared/LPCPort.hh **** #ifndef SHARED_AVR_PORT_HH_
  19:src/MightyBoard/shared/LPCPort.hh **** #define SHARED_AVR_PORT_HH_
  20:src/MightyBoard/shared/LPCPort.hh **** 
  21:src/MightyBoard/shared/LPCPort.hh **** #define __STDC_LIMIT_MACROS
  22:src/MightyBoard/shared/LPCPort.hh **** //#include <stdint.h>
  23:src/MightyBoard/shared/LPCPort.hh **** //#include <util/atomic.h>
  24:src/MightyBoard/shared/LPCPort.hh **** 
  25:src/MightyBoard/shared/LPCPort.hh **** extern "C" {
  26:src/MightyBoard/shared/LPCPort.hh **** 	#include "lpc_types.h"
  27:src/MightyBoard/shared/LPCPort.hh **** 	#include "lpc17xx_gpio.h"
  28:src/MightyBoard/shared/LPCPort.hh **** }
  29:src/MightyBoard/shared/LPCPort.hh **** 
  30:src/MightyBoard/shared/LPCPort.hh **** 
  31:src/MightyBoard/shared/LPCPort.hh **** #define NULL_PORT 0xff
  32:src/MightyBoard/shared/LPCPort.hh **** 
  33:src/MightyBoard/shared/LPCPort.hh **** class LPCPort {
  34:src/MightyBoard/shared/LPCPort.hh **** private:
  35:src/MightyBoard/shared/LPCPort.hh **** 	const uint8_t port_base;
  36:src/MightyBoard/shared/LPCPort.hh **** 	friend class Pin;
  37:src/MightyBoard/shared/LPCPort.hh **** public:
  38:src/MightyBoard/shared/LPCPort.hh **** 	LPCPort();
  39:src/MightyBoard/shared/LPCPort.hh **** 	LPCPort(uint8_t port_base_in);
  40:src/MightyBoard/shared/LPCPort.hh **** 	bool isNull() const;
  41:src/MightyBoard/shared/LPCPort.hh **** 	void setPinDirectionOut(uint8_t pin_index) const;
  42:src/MightyBoard/shared/LPCPort.hh **** 	void setPinDirectionIn(uint8_t pin_index) const;
  43:src/MightyBoard/shared/LPCPort.hh **** 	bool getPin(uint8_t pin_index) const;
  44:src/MightyBoard/shared/LPCPort.hh **** 	void setPinOn(uint8_t pin_index) const;
  45:src/MightyBoard/shared/LPCPort.hh **** 	void setPinOff(uint8_t pin_index) const;
  46:src/MightyBoard/shared/LPCPort.hh **** };
  47:src/MightyBoard/shared/LPCPort.hh **** 
  48:src/MightyBoard/shared/LPCPort.hh **** 
  49:src/MightyBoard/shared/LPCPort.hh **** const LPCPort Port0(0);
 1220              	 .loc 3 49 0
 1221 0002 40F20000 	 movw r0,#:lower16:.LANCHOR2
 1222 0006 C0F20000 	 movt r0,#:upper16:.LANCHOR2
 1223 000a 4FF00001 	 mov r1,#0
 1224 000e FFF7FEFF 	 bl _ZN7LPCPortC1Eh
  50:src/MightyBoard/shared/LPCPort.hh **** const LPCPort Port1(1);
 1225              	 .loc 3 50 0
 1226 0012 40F20000 	 movw r0,#:lower16:.LANCHOR3
 1227 0016 C0F20000 	 movt r0,#:upper16:.LANCHOR3
 1228 001a 4FF00101 	 mov r1,#1
 1229 001e FFF7FEFF 	 bl _ZN7LPCPortC1Eh
  51:src/MightyBoard/shared/LPCPort.hh **** const LPCPort Port2(2);
 1230              	 .loc 3 51 0
 1231 0022 40F20000 	 movw r0,#:lower16:.LANCHOR4
 1232 0026 C0F20000 	 movt r0,#:upper16:.LANCHOR4
 1233 002a 4FF00201 	 mov r1,#2
 1234 002e FFF7FEFF 	 bl _ZN7LPCPortC1Eh
  52:src/MightyBoard/shared/LPCPort.hh **** const LPCPort Port3(3);
 1235              	 .loc 3 52 0
 1236 0032 40F20000 	 movw r0,#:lower16:.LANCHOR5
 1237 0036 C0F20000 	 movt r0,#:upper16:.LANCHOR5
 1238 003a 4FF00301 	 mov r1,#3
 1239 003e FFF7FEFF 	 bl _ZN7LPCPortC1Eh
  53:src/MightyBoard/shared/LPCPort.hh **** const LPCPort Port4(4);
 1240              	 .loc 3 53 0
 1241 0042 40F20000 	 movw r0,#:lower16:.LANCHOR6
 1242 0046 C0F20000 	 movt r0,#:upper16:.LANCHOR6
 1243 004a 4FF00401 	 mov r1,#4
 1244 004e FFF7FEFF 	 bl _ZN7LPCPortC1Eh
  54:src/MightyBoard/shared/LPCPort.hh **** 
  55:src/MightyBoard/shared/LPCPort.hh **** const LPCPort NullPort(0xff);
 1245              	 .loc 3 55 0
 1246 0052 40F20004 	 movw r4,#:lower16:.LANCHOR7
 1247 0056 C0F20004 	 movt r4,#:upper16:.LANCHOR7
 1248 005a 2046     	 mov r0,r4
 1249 005c 4FF0FF01 	 mov r1,#255
 1250 0060 FFF7FEFF 	 bl _ZN7LPCPortC1Eh
 1251              	 .file 4 "src/MightyBoard/shared/Pin.hh"
   1:src/MightyBoard/shared/Pin.hh **** #ifndef PIN_HH
   2:src/MightyBoard/shared/Pin.hh **** #define PIN_HH
   3:src/MightyBoard/shared/Pin.hh **** 
   4:src/MightyBoard/shared/Pin.hh **** #include "LPCPort.hh"
   5:src/MightyBoard/shared/Pin.hh **** #include "Pin.hh"
   6:src/MightyBoard/shared/Pin.hh **** extern "C" {
   7:src/MightyBoard/shared/Pin.hh **** 	#include "lpc17xx_gpio.h"
   8:src/MightyBoard/shared/Pin.hh **** 	#include "lpc17xx_pinsel.h"
   9:src/MightyBoard/shared/Pin.hh **** 	#include "comm.h"
  10:src/MightyBoard/shared/Pin.hh **** }
  11:src/MightyBoard/shared/Pin.hh **** 
  12:src/MightyBoard/shared/Pin.hh **** /// \ingroup HardwareLibraries
  13:src/MightyBoard/shared/Pin.hh **** class Pin {
  14:src/MightyBoard/shared/Pin.hh **** private:
  15:src/MightyBoard/shared/Pin.hh **** 	uint8_t port_base;
  16:src/MightyBoard/shared/Pin.hh **** 	bool is_null;
  17:src/MightyBoard/shared/Pin.hh **** 	uint8_t pin_index;
  18:src/MightyBoard/shared/Pin.hh **** 	uint8_t pin_mask;
  19:src/MightyBoard/shared/Pin.hh **** 	uint8_t pin_mask_inverted;
  20:src/MightyBoard/shared/Pin.hh **** 
  21:src/MightyBoard/shared/Pin.hh **** public:
  22:src/MightyBoard/shared/Pin.hh **** 	Pin();
  23:src/MightyBoard/shared/Pin.hh **** 	Pin(const LPCPort& port_in, uint8_t pin_index_in);
  24:src/MightyBoard/shared/Pin.hh **** 	Pin(const Pin& other_pin);
  25:src/MightyBoard/shared/Pin.hh **** 	bool isNull() const;
  26:src/MightyBoard/shared/Pin.hh **** 	void setDirection(bool out) const;
  27:src/MightyBoard/shared/Pin.hh **** 	bool /*Pin::*/getValue() const {
  28:src/MightyBoard/shared/Pin.hh **** 		if (is_null)
  29:src/MightyBoard/shared/Pin.hh **** 			return false; // null pin is always low ... ?
  30:src/MightyBoard/shared/Pin.hh **** 		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
  31:src/MightyBoard/shared/Pin.hh **** //		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
  32:src/MightyBoard/shared/Pin.hh **** 	};
  33:src/MightyBoard/shared/Pin.hh **** 
  34:src/MightyBoard/shared/Pin.hh **** 	void /*Pin::*/setValue(bool on) const {
  35:src/MightyBoard/shared/Pin.hh **** 		if (is_null)
  36:src/MightyBoard/shared/Pin.hh **** 		 	return;
  37:src/MightyBoard/shared/Pin.hh **** 		// uint8_t oldSREG = SREG;
  38:src/MightyBoard/shared/Pin.hh **** 
  39:src/MightyBoard/shared/Pin.hh **** //		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
  40:src/MightyBoard/shared/Pin.hh **** 		// cli();
  41:src/MightyBoard/shared/Pin.hh **** 		if (on) {
  42:src/MightyBoard/shared/Pin.hh **** //			PORTx |= pin_mask;
  43:src/MightyBoard/shared/Pin.hh **** //			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
  44:src/MightyBoard/shared/Pin.hh **** 			GPIO_SetValue(port_base, _BV(pin_index));
  45:src/MightyBoard/shared/Pin.hh **** 		} else {
  46:src/MightyBoard/shared/Pin.hh **** //			PORTx &= pin_mask_inverted;
  47:src/MightyBoard/shared/Pin.hh **** //			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
  48:src/MightyBoard/shared/Pin.hh **** 			GPIO_ClearValue(port_base, _BV(pin_index));
  49:src/MightyBoard/shared/Pin.hh **** 		}
  50:src/MightyBoard/shared/Pin.hh **** 		// SREG = oldSREG;
  51:src/MightyBoard/shared/Pin.hh **** 	};
  52:src/MightyBoard/shared/Pin.hh **** 
  53:src/MightyBoard/shared/Pin.hh **** 	void /*Pin::*/setValueOn() const {
  54:src/MightyBoard/shared/Pin.hh **** 		if (is_null)
  55:src/MightyBoard/shared/Pin.hh **** 		 	return;
  56:src/MightyBoard/shared/Pin.hh **** 		// uint8_t oldSREG = SREG;
  57:src/MightyBoard/shared/Pin.hh **** 		// cli();
  58:src/MightyBoard/shared/Pin.hh **** //		PORTx |= pin_mask;
  59:src/MightyBoard/shared/Pin.hh **** 		GPIO_SetValue(port_base, _BV(pin_index));
  60:src/MightyBoard/shared/Pin.hh **** 		// SREG = oldSREG;
  61:src/MightyBoard/shared/Pin.hh **** 	};
  62:src/MightyBoard/shared/Pin.hh **** 
  63:src/MightyBoard/shared/Pin.hh **** 	void /*Pin::*/setValueOff() const {
  64:src/MightyBoard/shared/Pin.hh **** 		// if (is_null)
  65:src/MightyBoard/shared/Pin.hh **** 		// 	return;
  66:src/MightyBoard/shared/Pin.hh **** 		// uint8_t oldSREG = SREG;
  67:src/MightyBoard/shared/Pin.hh **** 		// cli();
  68:src/MightyBoard/shared/Pin.hh **** //		PORTx &= pin_mask_inverted;
  69:src/MightyBoard/shared/Pin.hh **** 		GPIO_ClearValue(port_base, _BV(pin_index));
  70:src/MightyBoard/shared/Pin.hh **** 		// SREG = oldSREG;
  71:src/MightyBoard/shared/Pin.hh **** 	};
  72:src/MightyBoard/shared/Pin.hh **** 	// currently not used:
  73:src/MightyBoard/shared/Pin.hh **** 	//const uint8_t getPinIndex() const { return pin_index; }
  74:src/MightyBoard/shared/Pin.hh **** };
  75:src/MightyBoard/shared/Pin.hh **** 
  76:src/MightyBoard/shared/Pin.hh **** static const Pin NullPin(NullPort, 0);
 1252              	 .loc 4 76 0
 1253 0064 40F20000 	 movw r0,#:lower16:.LANCHOR8
 1254 0068 C0F20000 	 movt r0,#:upper16:.LANCHOR8
 1255 006c 2146     	 mov r1,r4
 1256 006e 4FF00002 	 mov r2,#0
 1257 0072 FFF7FEFF 	 bl _ZN3PinC1ERK7LPCPorth
 1258              	.LBE65:
 1259              	.LBE64:
 1260              	 .loc 1 495 0
 1261 0076 10BD     	 pop {r4,pc}
 1262              	 .cfi_endproc
 1263              	.LFE113:
 1265              	 .section .init_array,"aw",%init_array
 1266              	 .align 2
 1267 0000 00000000 	 .word _GLOBAL__sub_I__ZN6eeprom15write_ff_to_ramEv(target1)
 1268              	 .section .rodata
 1269              	 .align 2
 1270              	 .set .LANCHOR0,.+0
 1271              	.LC3:
 1272 0000 7B00     	 .short 123
 1273 0002 F401     	 .short 500
 1274              	.LC2:
 1275 0004 E5370000 	 .word 14309
 1276 0008 941B0000 	 .word 7060
 1277 000c 00000000 	 .word 0
 1278 0010 00000000 	 .word 0
 1279 0014 00000000 	 .word 0
 1280              	.LC0:
 1281 0018 76       	 .byte 118
 1282 0019 76       	 .byte 118
 1283 001a 28       	 .byte 40
 1284 001b 76       	 .byte 118
 1285 001c 76       	 .byte 118
 1286 001d 000000   	 .section .bss._ZL5Port0,"aw",%nobits
 1287              	 .align 2
 1288              	 .set .LANCHOR2,.+0
 1291              	_ZL5Port0:
 1292 0000 00       	 .space 1
 1293 0001 000000   	 .section .bss._ZL5Port1,"aw",%nobits
 1294              	 .align 2
 1295              	 .set .LANCHOR3,.+0
 1298              	_ZL5Port1:
 1299 0000 00       	 .space 1
 1300 0001 000000   	 .section .bss._ZL5Port2,"aw",%nobits
 1301              	 .align 2
 1302              	 .set .LANCHOR4,.+0
 1305              	_ZL5Port2:
 1306 0000 00       	 .space 1
 1307 0001 000000   	 .section .bss._ZL5Port3,"aw",%nobits
 1308              	 .align 2
 1309              	 .set .LANCHOR5,.+0
 1312              	_ZL5Port3:
 1313 0000 00       	 .space 1
 1314 0001 000000   	 .section .bss._ZL5Port4,"aw",%nobits
 1315              	 .align 2
 1316              	 .set .LANCHOR6,.+0
 1319              	_ZL5Port4:
 1320 0000 00       	 .space 1
 1321 0001 000000   	 .section .rodata.str1.4,"aMS",%progbits,1
 1322              	 .align 2
 1323              	.LC5:
 1324 0000 73617665 	 .ascii "save_to_flash (%s:%d)\012\000"
 1324      5F746F5F 
 1324      666C6173 
 1324      68202825 
 1324      733A2564 
 1325 0017 00       	 .space 1
 1326              	.LC6:
 1327 0018 7372632F 	 .ascii "src/MightyBoard/Motherboard/EepromMap.cc\000"
 1327      4D696768 
 1327      7479426F 
 1327      6172642F 
 1327      4D6F7468 
 1328 0041 000000   	 .space 3
 1329              	.LC7:
 1330 0044 54686520 	 .ascii "The Replicator\000"
 1330      5265706C 
 1330      69636174 
 1330      6F7200
 1331 0053 00       	 .section .bss._ZL8NullPort,"aw",%nobits
 1332              	 .align 2
 1333              	 .set .LANCHOR7,.+0
 1336              	_ZL8NullPort:
 1337 0000 00       	 .space 1
 1338 0001 000000   	 .section .bss._ZL7NullPin,"aw",%nobits
 1339              	 .align 2
 1340              	 .set .LANCHOR8,.+0
 1343              	_ZL7NullPin:
 1344 0000 00000000 	 .space 5
 1344      00
 1345 0005 000000   	 .section .rodata._ZN23replicator_axis_lengthsL12axis_lengthsE,"a",%progbits
 1346              	 .align 2
 1347              	 .set .LANCHOR1,.+0
 1350              	_ZN23replicator_axis_lengthsL12axis_lengthsE:
 1351 0000 BD290000 	 .word 10685
 1352 0004 361B0000 	 .word 6966
 1353 0008 60EA0000 	 .word 60000
 1354 000c 80E79200 	 .word 9627520
 1355 0010 80E79200 	 .word 9627520
 1356              	 .text
 1357              	.Letext0:
 1358              	 .file 5 "c:\\program files\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/arm-none-eabi/4.6.3/../../../../arm-none-eabi/include/stdint.h"
 1359              	 .file 6 "src/MightyBoard/Motherboard/EepromMap.hh"
 1360              	 .file 7 "src/MightyBoard/shared/ThermistorTable.hh"
 1361              	 .file 8 "src/MightyBoard/Motherboard/Piezo.hh"
 1362              	 .file 9 "src/MightyBoard/Motherboard/RGB_LED.hh"
 1363              	 .file 10 "src/MightyBoard/shared/TemperatureSensor.hh"
 1364              	 .file 11 "src/MightyBoard/shared/HeatingElement.hh"
 1365              	 .file 12 "src/MightyBoard/Motherboard/IAP/IAP.hh"
 1366              	 .file 13 "src/MightyBoard/Motherboard/system/core_cm3.h"
 1367              	 .file 14 "src/MightyBoard/Motherboard/system/system_LPC17xx.h"
DEFINED SYMBOLS
                            *ABS*:00000000 EepromMap.cc
    {standard input}:19     .text._ZN6eeprom15write_ff_to_ramEv:00000000 $t
    {standard input}:24     .text._ZN6eeprom15write_ff_to_ramEv:00000000 _ZN6eeprom15write_ff_to_ramEv
    {standard input}:74     .text._ZN6eeprom19read_all_from_flashEv:00000000 $t
    {standard input}:79     .text._ZN6eeprom19read_all_from_flashEv:00000000 _ZN6eeprom19read_all_from_flashEv
    {standard input}:125    .text._ZN6eeprom13save_to_flashEv:00000000 $t
    {standard input}:130    .text._ZN6eeprom13save_to_flashEv:00000000 _ZN6eeprom13save_to_flashEv
    {standard input}:1323   .rodata.str1.4:00000000 .LC5
    {standard input}:175    .text._ZN6eeprom13save_to_flashEv:00000020 $d
    {standard input}:180    .text._ZN6eeprom20setDefaultCoolingFanEt:00000000 $t
    {standard input}:185    .text._ZN6eeprom20setDefaultCoolingFanEt:00000000 _ZN6eeprom20setDefaultCoolingFanEt
    {standard input}:216    .text._ZN6eeprom13setDefaultPIDEt:00000000 $t
    {standard input}:221    .text._ZN6eeprom13setDefaultPIDEt:00000000 _ZN6eeprom13setDefaultPIDEt
    {standard input}:254    .text._ZN6eeprom19setDefaultsExtruderEit:00000000 $t
    {standard input}:259    .text._ZN6eeprom19setDefaultsExtruderEit:00000000 _ZN6eeprom19setDefaultsExtruderEit
    {standard input}:349    .text._ZN6eeprom18SetDefaultsThermalEt:00000000 $t
    {standard input}:354    .text._ZN6eeprom18SetDefaultsThermalEt:00000000 _ZN6eeprom18SetDefaultsThermalEt
    {standard input}:420    .text._ZN6eeprom20setDefaultLedEffectsEt:00000000 $t
    {standard input}:425    .text._ZN6eeprom20setDefaultLedEffectsEt:00000000 _ZN6eeprom20setDefaultLedEffectsEt
    {standard input}:471    .text._ZN6eeprom14setCustomColorEhhh:00000000 $t
    {standard input}:476    .text._ZN6eeprom14setCustomColorEhhh:00000000 _ZN6eeprom14setCustomColorEhhh
    {standard input}:517    .text._ZN6eeprom18eeprom_write_soundE5Soundt:00000000 $t
    {standard input}:522    .text._ZN6eeprom18eeprom_write_soundE5Soundt:00000000 _ZN6eeprom18eeprom_write_soundE5Soundt
    {standard input}:556    .text._ZN6eeprom21setDefaultBuzzEffectsEt:00000000 $t
    {standard input}:561    .text._ZN6eeprom21setDefaultBuzzEffectsEt:00000000 _ZN6eeprom21setDefaultBuzzEffectsEt
    {standard input}:1270   .rodata:00000000 .LANCHOR0
    {standard input}:594    .text._ZN6eeprom18setDefaultsPreheatEt:00000000 $t
    {standard input}:599    .text._ZN6eeprom18setDefaultsPreheatEt:00000000 _ZN6eeprom18setDefaultsPreheatEt
    {standard input}:637    .text._ZN6eeprom23setDefaultsAccelerationEv:00000000 $t
    {standard input}:642    .text._ZN6eeprom23setDefaultsAccelerationEv:00000000 _ZN6eeprom23setDefaultsAccelerationEv
    {standard input}:715    .text._ZN6eeprom12isSingleToolEv:00000000 $t
    {standard input}:720    .text._ZN6eeprom12isSingleToolEv:00000000 _ZN6eeprom12isSingleToolEv
    {standard input}:745    .text._ZN6eeprom27setDefaultAxisHomePositionsEv:00000000 $t
    {standard input}:750    .text._ZN6eeprom27setDefaultAxisHomePositionsEv:00000000 _ZN6eeprom27setDefaultAxisHomePositionsEv
    {standard input}:810    .text._ZN6eeprom27setDefaultAxisHomePositionsEv:00000040 $d
    {standard input}:815    .text._ZN6eeprom16setToolHeadCountEh:00000000 $t
    {standard input}:820    .text._ZN6eeprom16setToolHeadCountEh:00000000 _ZN6eeprom16setToolHeadCountEh
    {standard input}:850    .text._ZN6eeprom18factoryResetEEPROMEv:00000000 $t
    {standard input}:855    .text._ZN6eeprom18factoryResetEEPROMEv:00000000 _ZN6eeprom18factoryResetEEPROMEv
    {standard input}:1329   .rodata.str1.4:00000044 .LC7
    {standard input}:991    .text._ZN6eeprom18factoryResetEEPROMEv:00000110 $d
    {standard input}:996    .text._ZN6eeprom18setDefaultSettingsEv:00000000 $t
    {standard input}:1001   .text._ZN6eeprom18setDefaultSettingsEv:00000000 _ZN6eeprom18setDefaultSettingsEv
    {standard input}:1031   .text._ZN6eeprom30storeToolheadToleranceDefaultsEv:00000000 $t
    {standard input}:1036   .text._ZN6eeprom30storeToolheadToleranceDefaultsEv:00000000 _ZN6eeprom30storeToolheadToleranceDefaultsEv
    {standard input}:1078   .text._ZN6eeprom15updateBuildTimeEhh:00000000 $t
    {standard input}:1083   .text._ZN6eeprom15updateBuildTimeEhh:00000000 _ZN6eeprom15updateBuildTimeEhh
    {standard input}:1154   .text._ZN6eeprom15fullResetEEPROMEv:00000000 $t
    {standard input}:1159   .text._ZN6eeprom15fullResetEEPROMEv:00000000 _ZN6eeprom15fullResetEEPROMEv
    {standard input}:1201   .text._GLOBAL__sub_I__ZN6eeprom15write_ff_to_ramEv:00000000 $t
    {standard input}:1205   .text._GLOBAL__sub_I__ZN6eeprom15write_ff_to_ramEv:00000000 _GLOBAL__sub_I__ZN6eeprom15write_ff_to_ramEv
    {standard input}:1288   .bss._ZL5Port0:00000000 .LANCHOR2
    {standard input}:1295   .bss._ZL5Port1:00000000 .LANCHOR3
    {standard input}:1302   .bss._ZL5Port2:00000000 .LANCHOR4
    {standard input}:1309   .bss._ZL5Port3:00000000 .LANCHOR5
    {standard input}:1316   .bss._ZL5Port4:00000000 .LANCHOR6
    {standard input}:1333   .bss._ZL8NullPort:00000000 .LANCHOR7
    {standard input}:1340   .bss._ZL7NullPin:00000000 .LANCHOR8
    {standard input}:1266   .init_array:00000000 $d
    {standard input}:1269   .rodata:00000000 $d
    {standard input}:1287   .bss._ZL5Port0:00000000 $d
    {standard input}:1291   .bss._ZL5Port0:00000000 _ZL5Port0
    {standard input}:1294   .bss._ZL5Port1:00000000 $d
    {standard input}:1298   .bss._ZL5Port1:00000000 _ZL5Port1
    {standard input}:1301   .bss._ZL5Port2:00000000 $d
    {standard input}:1305   .bss._ZL5Port2:00000000 _ZL5Port2
    {standard input}:1308   .bss._ZL5Port3:00000000 $d
    {standard input}:1312   .bss._ZL5Port3:00000000 _ZL5Port3
    {standard input}:1315   .bss._ZL5Port4:00000000 $d
    {standard input}:1319   .bss._ZL5Port4:00000000 _ZL5Port4
    {standard input}:1322   .rodata.str1.4:00000000 $d
    {standard input}:1326   .rodata.str1.4:00000018 .LC6
    {standard input}:1332   .bss._ZL8NullPort:00000000 $d
    {standard input}:1336   .bss._ZL8NullPort:00000000 _ZL8NullPort
    {standard input}:1339   .bss._ZL7NullPin:00000000 $d
    {standard input}:1343   .bss._ZL7NullPin:00000000 _ZL7NullPin
    {standard input}:1346   .rodata._ZN23replicator_axis_lengthsL12axis_lengthsE:00000000 $d
    {standard input}:1350   .rodata._ZN23replicator_axis_lengthsL12axis_lengthsE:00000000 _ZN23replicator_axis_lengthsL12axis_lengthsE
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
xprintf
_ZN6eeprom16clearflashupdateEv
_ZN6eeprom10setEeprom8Eth
_ZN6eeprom11setEeprom16Ett
default_therm_table
_ZN6eeprom10getEeprom8Eth
_ZN6eeprom11setEeprom32Etm
_ZN6eeprom11getEeprom16Ett
_ZN7LPCPortC1Eh
_ZN3PinC1ERK7LPCPorth
