   1              	 .syntax unified
   2              	 .cpu cortex-m3
   3              	 .fpu softvfp
   4              	 .eabi_attribute 20,1
   5              	 .eabi_attribute 21,1
   6              	 .eabi_attribute 23,3
   7              	 .eabi_attribute 24,1
   8              	 .eabi_attribute 25,1
   9              	 .eabi_attribute 26,1
  10              	 .eabi_attribute 30,1
  11              	 .eabi_attribute 34,1
  12              	 .eabi_attribute 18,4
  13              	 .thumb
  14              	 .file "AnalogPin.cc"
  15              	 .text
  16              	.Ltext0:
  17              	 .cfi_sections .debug_frame
  18              	 .section .text._Z13initAnalogPinh,"ax",%progbits
  19              	 .align 2
  20              	 .global _Z13initAnalogPinh
  21              	 .thumb
  22              	 .thumb_func
  24              	_Z13initAnalogPinh:
  25              	.LFB55:
  26              	 .file 1 "src/MightyBoard/shared/AnalogPin.cc"
   1:src/MightyBoard/shared/AnalogPin.cc **** /*
   2:src/MightyBoard/shared/AnalogPin.cc ****  * Copyright 2010 by Adam Mayer	 <adam@makerbot.com>
   3:src/MightyBoard/shared/AnalogPin.cc ****  *
   4:src/MightyBoard/shared/AnalogPin.cc ****  * This program is free software: you can redistribute it and/or modify
   5:src/MightyBoard/shared/AnalogPin.cc ****  * it under the terms of the GNU General Public License as published by
   6:src/MightyBoard/shared/AnalogPin.cc ****  * the Free Software Foundation, either version 3 of the License, or
   7:src/MightyBoard/shared/AnalogPin.cc ****  * (at your option) any later version.
   8:src/MightyBoard/shared/AnalogPin.cc ****  *
   9:src/MightyBoard/shared/AnalogPin.cc ****  * This program is distributed in the hope that it will be useful,
  10:src/MightyBoard/shared/AnalogPin.cc ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:src/MightyBoard/shared/AnalogPin.cc ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:src/MightyBoard/shared/AnalogPin.cc ****  * GNU General Public License for more details.
  13:src/MightyBoard/shared/AnalogPin.cc ****  *
  14:src/MightyBoard/shared/AnalogPin.cc ****  * You should have received a copy of the GNU General Public License
  15:src/MightyBoard/shared/AnalogPin.cc ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>
  16:src/MightyBoard/shared/AnalogPin.cc ****  */
  17:src/MightyBoard/shared/AnalogPin.cc **** 
  18:src/MightyBoard/shared/AnalogPin.cc **** #include "AnalogPin.hh"
  19:src/MightyBoard/shared/AnalogPin.cc **** //#include <avr/io.h>
  20:src/MightyBoard/shared/AnalogPin.cc **** //#include <avr/interrupt.h>
  21:src/MightyBoard/shared/AnalogPin.cc **** //#include <util/atomic.h>
  22:src/MightyBoard/shared/AnalogPin.cc **** 
  23:src/MightyBoard/shared/AnalogPin.cc **** #include "Configuration.hh"
  24:src/MightyBoard/shared/AnalogPin.cc **** extern "C" {
  25:src/MightyBoard/shared/AnalogPin.cc **** 	#include "lpc_types.h"
  26:src/MightyBoard/shared/AnalogPin.cc **** 	#include "lpc17xx_adc.h"
  27:src/MightyBoard/shared/AnalogPin.cc **** 	#include "lpc17xx_pinsel.h"
  28:src/MightyBoard/shared/AnalogPin.cc **** 	#include "lpc17xx_gpio.h"
  29:src/MightyBoard/shared/AnalogPin.cc **** 	#include "comm.h"
  30:src/MightyBoard/shared/AnalogPin.cc **** }
  31:src/MightyBoard/shared/AnalogPin.cc **** 
  32:src/MightyBoard/shared/AnalogPin.cc **** 
  33:src/MightyBoard/shared/AnalogPin.cc **** volatile int16_t* adc_destination; //< Address to write the sampled data to
  34:src/MightyBoard/shared/AnalogPin.cc **** 
  35:src/MightyBoard/shared/AnalogPin.cc **** volatile bool* adc_finished; //< Flag to set once the data is sampled
  36:src/MightyBoard/shared/AnalogPin.cc **** 
  37:src/MightyBoard/shared/AnalogPin.cc **** #if defined (__AVR_ATmega168__) || defined (__AVR_ATmega328__)
  38:src/MightyBoard/shared/AnalogPin.cc **** 
  39:src/MightyBoard/shared/AnalogPin.cc ****     // We are using the AVcc as our reference.  There's a 100nF cap
  40:src/MightyBoard/shared/AnalogPin.cc ****     // to ground on the AREF pin.
  41:src/MightyBoard/shared/AnalogPin.cc ****     const uint8_t ANALOG_REF = 0x01;
  42:src/MightyBoard/shared/AnalogPin.cc **** 
  43:src/MightyBoard/shared/AnalogPin.cc ****     void initAnalogPin(uint8_t pin) {
  44:src/MightyBoard/shared/AnalogPin.cc ****             // Only analog pins 0-5 need to be initialized, 6 and 7 are dedicated purpose.
  45:src/MightyBoard/shared/AnalogPin.cc ****             if (pin < 6) {
  46:src/MightyBoard/shared/AnalogPin.cc ****                     DDRC &= ~(_BV(pin));
  47:src/MightyBoard/shared/AnalogPin.cc ****                     PORTC &= ~(_BV(pin));
  48:src/MightyBoard/shared/AnalogPin.cc ****             }
  49:src/MightyBoard/shared/AnalogPin.cc **** 
  50:src/MightyBoard/shared/AnalogPin.cc ****             // enable a2d conversions, interrupt on completion
  51:src/MightyBoard/shared/AnalogPin.cc ****             ADCSRA |= _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) |
  52:src/MightyBoard/shared/AnalogPin.cc ****                             _BV(ADEN) | _BV(ADIE);
  53:src/MightyBoard/shared/AnalogPin.cc ****     }
  54:src/MightyBoard/shared/AnalogPin.cc **** 
  55:src/MightyBoard/shared/AnalogPin.cc ****     bool startAnalogRead(uint8_t pin,
  56:src/MightyBoard/shared/AnalogPin.cc ****                          volatile int16_t* destination,
  57:src/MightyBoard/shared/AnalogPin.cc ****                          volatile bool* finished) {
  58:src/MightyBoard/shared/AnalogPin.cc ****             // ADSC is cleared when the conversion finishes.
  59:src/MightyBoard/shared/AnalogPin.cc ****             // We should not start a new read while an existing one is in progress.
  60:src/MightyBoard/shared/AnalogPin.cc ****             if ((ADCSRA & _BV(ADSC)) != 0) {
  61:src/MightyBoard/shared/AnalogPin.cc ****                     return false;
  62:src/MightyBoard/shared/AnalogPin.cc ****             }
  63:src/MightyBoard/shared/AnalogPin.cc ****             ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
  64:src/MightyBoard/shared/AnalogPin.cc ****                     adc_destination = destination;
  65:src/MightyBoard/shared/AnalogPin.cc ****                     adc_finished = finished;
  66:src/MightyBoard/shared/AnalogPin.cc ****                     *adc_finished = false;
  67:src/MightyBoard/shared/AnalogPin.cc **** 
  68:src/MightyBoard/shared/AnalogPin.cc ****                     // set the analog reference (high two bits of ADMUX) and select the
  69:src/MightyBoard/shared/AnalogPin.cc ****                     // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  70:src/MightyBoard/shared/AnalogPin.cc ****                     // to 0 (the default).
  71:src/MightyBoard/shared/AnalogPin.cc ****                     ADMUX = (ANALOG_REF << 6) | (pin & 0x0f);
  72:src/MightyBoard/shared/AnalogPin.cc **** 
  73:src/MightyBoard/shared/AnalogPin.cc ****                     // start the conversion.
  74:src/MightyBoard/shared/AnalogPin.cc ****                     ADCSRA |= _BV(ADSC);
  75:src/MightyBoard/shared/AnalogPin.cc ****             }
  76:src/MightyBoard/shared/AnalogPin.cc ****             // An interrupt will signal conversion completion.
  77:src/MightyBoard/shared/AnalogPin.cc ****             return true;
  78:src/MightyBoard/shared/AnalogPin.cc ****     }
  79:src/MightyBoard/shared/AnalogPin.cc **** 
  80:src/MightyBoard/shared/AnalogPin.cc ****     ISR(ADC_vect)
  81:src/MightyBoard/shared/AnalogPin.cc ****     {
  82:src/MightyBoard/shared/AnalogPin.cc ****             uint8_t low_byte, high_byte;
  83:src/MightyBoard/shared/AnalogPin.cc ****             // we have to read ADCL first; doing so locks both ADCL
  84:src/MightyBoard/shared/AnalogPin.cc ****             // and ADCH until ADCH is read.  reading ADCL second would
  85:src/MightyBoard/shared/AnalogPin.cc ****             // cause the results of each conversion to be discarded,
  86:src/MightyBoard/shared/AnalogPin.cc ****             // as ADCL and ADCH would be locked when it completed.
  87:src/MightyBoard/shared/AnalogPin.cc ****             low_byte = ADCL;
  88:src/MightyBoard/shared/AnalogPin.cc ****             high_byte = ADCH;
  89:src/MightyBoard/shared/AnalogPin.cc **** 
  90:src/MightyBoard/shared/AnalogPin.cc ****             // combine the two bytes
  91:src/MightyBoard/shared/AnalogPin.cc ****             *adc_destination = (high_byte << 8) | low_byte;
  92:src/MightyBoard/shared/AnalogPin.cc ****             *adc_finished = true;
  93:src/MightyBoard/shared/AnalogPin.cc ****     }
  94:src/MightyBoard/shared/AnalogPin.cc **** 
  95:src/MightyBoard/shared/AnalogPin.cc **** #else
  96:src/MightyBoard/shared/AnalogPin.cc ****     // We are using the AVcc as our reference.  There's a 100nF cap
  97:src/MightyBoard/shared/AnalogPin.cc ****     // to ground on the AREF pin.
  98:src/MightyBoard/shared/AnalogPin.cc **** //    const uint8_t ANALOG_REF = 0x01;
  99:src/MightyBoard/shared/AnalogPin.cc **** 
 100:src/MightyBoard/shared/AnalogPin.cc **** void initAnalogPin(uint8_t pin) {
  27              	 .loc 1 100 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	.LVL0:
  32 0000 70B5     	 push {r4,r5,r6,lr}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 16
  35              	 .cfi_offset 14,-4
  36              	 .cfi_offset 6,-8
  37              	 .cfi_offset 5,-12
  38              	 .cfi_offset 4,-16
  39 0002 82B0     	 sub sp,sp,#8
  40              	.LCFI1:
  41              	 .cfi_def_cfa_offset 24
  42 0004 0646     	 mov r6,r0
  43              	.LBB9:
 101:src/MightyBoard/shared/AnalogPin.cc **** 	xprintf("initAnalogPin pin:%d" " (%s:%d)\n",pin,_F_,_L_);
  44              	 .loc 1 101 0
  45 0006 1F4C     	 ldr r4,.L2
  46 0008 40F20000 	 movw r0,#:lower16:.LC0
  47              	.LVL1:
  48 000c C0F20000 	 movt r0,#:upper16:.LC0
  49 0010 3146     	 mov r1,r6
  50 0012 2246     	 mov r2,r4
  51 0014 4FF06503 	 mov r3,#101
  52 0018 FFF7FEFF 	 bl xprintf
 102:src/MightyBoard/shared/AnalogPin.cc **** 	xprintf("pin-23:%d" " (%s:%d)\n",pin-23,_F_,_L_);
  53              	 .loc 1 102 0
  54 001c 40F20000 	 movw r0,#:lower16:.LC2
  55 0020 C0F20000 	 movt r0,#:upper16:.LC2
  56 0024 A6F11701 	 sub r1,r6,#23
  57 0028 2246     	 mov r2,r4
  58 002a 4FF06603 	 mov r3,#102
  59 002e FFF7FEFF 	 bl xprintf
 103:src/MightyBoard/shared/AnalogPin.cc ****             // Analog pins are on ports F and K
 104:src/MightyBoard/shared/AnalogPin.cc **** //            if (pin < 8) {
 105:src/MightyBoard/shared/AnalogPin.cc **** //                    DDRF &= ~(_BV(pin));
 106:src/MightyBoard/shared/AnalogPin.cc **** //                    PORTF &= ~(_BV(pin));
 107:src/MightyBoard/shared/AnalogPin.cc ****                     // clear ADC Channel bit selecting upper 8 ADCs
 108:src/MightyBoard/shared/AnalogPin.cc **** //					ADCSRB &= ~0b01000;
 109:src/MightyBoard/shared/AnalogPin.cc **** //            }
 110:src/MightyBoard/shared/AnalogPin.cc **** //            else{
 111:src/MightyBoard/shared/AnalogPin.cc **** //				pin -= 8;
 112:src/MightyBoard/shared/AnalogPin.cc **** //				DDRK &= ~(_BV(pin));
 113:src/MightyBoard/shared/AnalogPin.cc **** //				PORTK &= ~(_BV(pin));
 114:src/MightyBoard/shared/AnalogPin.cc **** 				// set ADC Channel bit selecting upper 8 ADCs
 115:src/MightyBoard/shared/AnalogPin.cc **** //				ADCSRB |= 0b01000;
 116:src/MightyBoard/shared/AnalogPin.cc **** //			}
 117:src/MightyBoard/shared/AnalogPin.cc **** 			
 118:src/MightyBoard/shared/AnalogPin.cc **** 			// select ADC Channel and connect AREF to AVCC
 119:src/MightyBoard/shared/AnalogPin.cc **** //			ADMUX = 0b01000000 + pin;
 120:src/MightyBoard/shared/AnalogPin.cc ****             // enable a2d conversions, interrupt on completion
 121:src/MightyBoard/shared/AnalogPin.cc **** //            ADCSRA |= _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) |
 122:src/MightyBoard/shared/AnalogPin.cc **** //                            _BV(ADEN) | _BV(ADIE);
 123:src/MightyBoard/shared/AnalogPin.cc **** 	  PINSEL_CFG_Type PinCfg;
 124:src/MightyBoard/shared/AnalogPin.cc **** 	  PinCfg.Funcnum = PINSEL_FUNC_1; /* ADC function */
  60              	 .loc 1 124 0
  61 0032 4FF00105 	 mov r5,#1
  62 0036 8DF80250 	 strb r5,[sp,#2]
 125:src/MightyBoard/shared/AnalogPin.cc **** 	  PinCfg.OpenDrain = PINSEL_PINMODE_NORMAL;
  63              	 .loc 1 125 0
  64 003a 4FF00004 	 mov r4,#0
  65 003e 8DF80440 	 strb r4,[sp,#4]
 126:src/MightyBoard/shared/AnalogPin.cc **** 	  PinCfg.Pinmode = PINSEL_PINMODE_PULLUP;
  66              	 .loc 1 126 0
  67 0042 8DF80340 	 strb r4,[sp,#3]
 127:src/MightyBoard/shared/AnalogPin.cc **** 	  PinCfg.Portnum = 0;
  68              	 .loc 1 127 0
  69 0046 8DF80040 	 strb r4,[sp,#0]
 128:src/MightyBoard/shared/AnalogPin.cc **** 	  PinCfg.Pinnum = pin;
  70              	 .loc 1 128 0
  71 004a 8DF80160 	 strb r6,[sp,#1]
 129:src/MightyBoard/shared/AnalogPin.cc **** 	  PINSEL_ConfigPin(&PinCfg);
  72              	 .loc 1 129 0
  73 004e 6846     	 mov r0,sp
  74 0050 FFF7FEFF 	 bl PINSEL_ConfigPin
 130:src/MightyBoard/shared/AnalogPin.cc **** 	  GPIO_SetDir(0, _BV(pin), 0);
  75              	 .loc 1 130 0
  76 0054 2046     	 mov r0,r4
  77 0056 05FA06F1 	 lsl r1,r5,r6
  78 005a 2246     	 mov r2,r4
  79 005c FFF7FEFF 	 bl GPIO_SetDir
 131:src/MightyBoard/shared/AnalogPin.cc **** 
 132:src/MightyBoard/shared/AnalogPin.cc **** 	  ADC_Init(LPC_ADC, 1000); /* ADC conversion rate = 200Khz */
  80              	 .loc 1 132 0
  81 0060 4FF48040 	 mov r0,#16384
  82 0064 C4F20300 	 movt r0,16387
  83 0068 4FF47A71 	 mov r1,#1000
  84 006c FFF7FEFF 	 bl ADC_Init
  85              	.LVL2:
  86              	.LBB10:
  87              	.LBB11:
  88              	 .file 2 "src/MightyBoard/Motherboard/system/core_cm3.h"
   1:src/MightyBoard/Motherboard/system/core_cm3.h **** /**************************************************************************//**
   2:src/MightyBoard/Motherboard/system/core_cm3.h ****  * @file     core_cm3.h
   3:src/MightyBoard/Motherboard/system/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:src/MightyBoard/Motherboard/system/core_cm3.h ****  * @version  V2.01
   5:src/MightyBoard/Motherboard/system/core_cm3.h ****  * @date     06. December 2010
   6:src/MightyBoard/Motherboard/system/core_cm3.h ****  *
   7:src/MightyBoard/Motherboard/system/core_cm3.h ****  * @note
   8:src/MightyBoard/Motherboard/system/core_cm3.h ****  * Copyright (C) 2009-2010 ARM Limited. All rights reserved.
   9:src/MightyBoard/Motherboard/system/core_cm3.h ****  *
  10:src/MightyBoard/Motherboard/system/core_cm3.h ****  * @par
  11:src/MightyBoard/Motherboard/system/core_cm3.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:src/MightyBoard/Motherboard/system/core_cm3.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:src/MightyBoard/Motherboard/system/core_cm3.h ****  * within development tools that are supporting such ARM based processors.
  14:src/MightyBoard/Motherboard/system/core_cm3.h ****  *
  15:src/MightyBoard/Motherboard/system/core_cm3.h ****  * @par
  16:src/MightyBoard/Motherboard/system/core_cm3.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:src/MightyBoard/Motherboard/system/core_cm3.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:src/MightyBoard/Motherboard/system/core_cm3.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:src/MightyBoard/Motherboard/system/core_cm3.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:src/MightyBoard/Motherboard/system/core_cm3.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:src/MightyBoard/Motherboard/system/core_cm3.h ****  *
  22:src/MightyBoard/Motherboard/system/core_cm3.h ****  ******************************************************************************/
  23:src/MightyBoard/Motherboard/system/core_cm3.h **** #if defined ( __ICCARM__ )
  24:src/MightyBoard/Motherboard/system/core_cm3.h ****  #pragma system_include  /* treat file as system include file for MISRA check */
  25:src/MightyBoard/Motherboard/system/core_cm3.h **** #endif
  26:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  27:src/MightyBoard/Motherboard/system/core_cm3.h **** #ifdef __cplusplus
  28:src/MightyBoard/Motherboard/system/core_cm3.h ****  extern "C" {
  29:src/MightyBoard/Motherboard/system/core_cm3.h **** #endif
  30:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  31:src/MightyBoard/Motherboard/system/core_cm3.h **** #ifndef __CORE_CM3_H_GENERIC
  32:src/MightyBoard/Motherboard/system/core_cm3.h **** #define __CORE_CM3_H_GENERIC
  33:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  34:src/MightyBoard/Motherboard/system/core_cm3.h **** /**  @ingroup  CMSIS
  35:src/MightyBoard/Motherboard/system/core_cm3.h ****  @addtogroup CMSIS_core_LintCinfiguration CMSIS Core Lint Configuration
  36:src/MightyBoard/Motherboard/system/core_cm3.h ****   List of Lint messages which will be suppressed and not shown:
  37:src/MightyBoard/Motherboard/system/core_cm3.h ****     - not yet checked
  38:src/MightyBoard/Motherboard/system/core_cm3.h ****   .
  39:src/MightyBoard/Motherboard/system/core_cm3.h ****   Note:  To re-enable a Message, insert a space before 'lint' *
  40:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  41:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
  42:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  43:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  44:src/MightyBoard/Motherboard/system/core_cm3.h **** /*******************************************************************************
  45:src/MightyBoard/Motherboard/system/core_cm3.h ****  *                 CMSIS definitions
  46:src/MightyBoard/Motherboard/system/core_cm3.h ****  ******************************************************************************/
  47:src/MightyBoard/Motherboard/system/core_cm3.h **** /** @ingroup  CMSIS
  48:src/MightyBoard/Motherboard/system/core_cm3.h ****  * @addtogroup CMSIS_core_definitions CMSIS Core Definitions
  49:src/MightyBoard/Motherboard/system/core_cm3.h ****   This file defines all structures and symbols for CMSIS core:
  50:src/MightyBoard/Motherboard/system/core_cm3.h ****    - CMSIS version number
  51:src/MightyBoard/Motherboard/system/core_cm3.h ****    - Cortex-M core
  52:src/MightyBoard/Motherboard/system/core_cm3.h ****    - Cortex-M core Revision Number
  53:src/MightyBoard/Motherboard/system/core_cm3.h ****   @{
  54:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
  55:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  56:src/MightyBoard/Motherboard/system/core_cm3.h **** /*  CMSIS CM3 definitions */
  57:src/MightyBoard/Motherboard/system/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x02)                                                       /*!<
  58:src/MightyBoard/Motherboard/system/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x00)                                                       /*!<
  59:src/MightyBoard/Motherboard/system/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | __CM3_CMSIS_VERSION_SUB) /*!<
  60:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  61:src/MightyBoard/Motherboard/system/core_cm3.h **** #define __CORTEX_M                (0x03)                                                       /*!<
  62:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  63:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  64:src/MightyBoard/Motherboard/system/core_cm3.h **** #if defined ( __CC_ARM   )
  65:src/MightyBoard/Motherboard/system/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  66:src/MightyBoard/Motherboard/system/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  67:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  68:src/MightyBoard/Motherboard/system/core_cm3.h **** #elif defined ( __ICCARM__ )
  69:src/MightyBoard/Motherboard/system/core_cm3.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
  70:src/MightyBoard/Motherboard/system/core_cm3.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
  71:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  72:src/MightyBoard/Motherboard/system/core_cm3.h **** #elif defined   (  __GNUC__  )
  73:src/MightyBoard/Motherboard/system/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  74:src/MightyBoard/Motherboard/system/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  75:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  76:src/MightyBoard/Motherboard/system/core_cm3.h **** #elif defined   (  __TASKING__  )
  77:src/MightyBoard/Motherboard/system/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
  78:src/MightyBoard/Motherboard/system/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
  79:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  80:src/MightyBoard/Motherboard/system/core_cm3.h **** #endif
  81:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  82:src/MightyBoard/Motherboard/system/core_cm3.h **** #include <stdint.h>                      /*!< standard types definitions                      */
  83:src/MightyBoard/Motherboard/system/core_cm3.h **** #include "core_cmInstr.h"                /*!< Core Instruction Access                         */
  84:src/MightyBoard/Motherboard/system/core_cm3.h **** #include "core_cmFunc.h"                 /*!< Core Function Access                            */
  85:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  86:src/MightyBoard/Motherboard/system/core_cm3.h **** #endif /* __CORE_CM3_H_GENERIC */
  87:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  88:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  89:src/MightyBoard/Motherboard/system/core_cm3.h **** #ifndef __CMSIS_GENERIC
  90:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  91:src/MightyBoard/Motherboard/system/core_cm3.h **** #ifndef __CORE_CM3_H_DEPENDANT
  92:src/MightyBoard/Motherboard/system/core_cm3.h **** #define __CORE_CM3_H_DEPENDANT
  93:src/MightyBoard/Motherboard/system/core_cm3.h **** 
  94:src/MightyBoard/Motherboard/system/core_cm3.h **** /* IO definitions (access restrictions to peripheral registers) */
  95:src/MightyBoard/Motherboard/system/core_cm3.h **** #ifdef __cplusplus
  96:src/MightyBoard/Motherboard/system/core_cm3.h ****   #define     __I     volatile           /*!< defines 'read only' permissions                 */
  97:src/MightyBoard/Motherboard/system/core_cm3.h **** #else
  98:src/MightyBoard/Motherboard/system/core_cm3.h ****   #define     __I     volatile const     /*!< defines 'read only' permissions                 */
  99:src/MightyBoard/Motherboard/system/core_cm3.h **** #endif
 100:src/MightyBoard/Motherboard/system/core_cm3.h **** #define     __O     volatile             /*!< defines 'write only' permissions                */
 101:src/MightyBoard/Motherboard/system/core_cm3.h **** #define     __IO    volatile             /*!< defines 'read / write' permissions              */
 102:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 103:src/MightyBoard/Motherboard/system/core_cm3.h **** /*@} end of group CMSIS_core_definitions */
 104:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 105:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 106:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 107:src/MightyBoard/Motherboard/system/core_cm3.h **** /*******************************************************************************
 108:src/MightyBoard/Motherboard/system/core_cm3.h ****  *                 Register Abstraction
 109:src/MightyBoard/Motherboard/system/core_cm3.h ****  ******************************************************************************/
 110:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 111:src/MightyBoard/Motherboard/system/core_cm3.h **** /** @ingroup  CMSIS
 112:src/MightyBoard/Motherboard/system/core_cm3.h ****  * @addtogroup CMSIS_core_register CMSIS Core Register
 113:src/MightyBoard/Motherboard/system/core_cm3.h ****   Core Register contain:
 114:src/MightyBoard/Motherboard/system/core_cm3.h ****   - Core Register
 115:src/MightyBoard/Motherboard/system/core_cm3.h ****   - Core NVIC Register
 116:src/MightyBoard/Motherboard/system/core_cm3.h ****   - Core SCB Register
 117:src/MightyBoard/Motherboard/system/core_cm3.h ****   - Core SysTick Register
 118:src/MightyBoard/Motherboard/system/core_cm3.h ****   - Core Debug Register
 119:src/MightyBoard/Motherboard/system/core_cm3.h ****   - Core MPU Register
 120:src/MightyBoard/Motherboard/system/core_cm3.h **** */
 121:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 122:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \ingroup  CMSIS_core_register
 123:src/MightyBoard/Motherboard/system/core_cm3.h ****     \defgroup CMSIS_CORE CMSIS Core
 124:src/MightyBoard/Motherboard/system/core_cm3.h ****   Type definitions for the Cortex-M Core Registers
 125:src/MightyBoard/Motherboard/system/core_cm3.h ****   @{
 126:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 127:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 128:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Union type to access the Application Program Status Register (APSR).
 129:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 130:src/MightyBoard/Motherboard/system/core_cm3.h **** typedef union
 131:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 132:src/MightyBoard/Motherboard/system/core_cm3.h ****   struct
 133:src/MightyBoard/Motherboard/system/core_cm3.h ****   {
 134:src/MightyBoard/Motherboard/system/core_cm3.h **** #if (__CORTEX_M != 0x04)
 135:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
 136:src/MightyBoard/Motherboard/system/core_cm3.h **** #else
 137:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
 138:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 139:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
 140:src/MightyBoard/Motherboard/system/core_cm3.h **** #endif
 141:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 142:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 143:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 144:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 145:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 146:src/MightyBoard/Motherboard/system/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 147:src/MightyBoard/Motherboard/system/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 148:src/MightyBoard/Motherboard/system/core_cm3.h **** } APSR_Type;
 149:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 150:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 151:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Union type to access the Interrupt Program Status Register (IPSR).
 152:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 153:src/MightyBoard/Motherboard/system/core_cm3.h **** typedef union
 154:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 155:src/MightyBoard/Motherboard/system/core_cm3.h ****   struct
 156:src/MightyBoard/Motherboard/system/core_cm3.h ****   {
 157:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 158:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
 159:src/MightyBoard/Motherboard/system/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 160:src/MightyBoard/Motherboard/system/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 161:src/MightyBoard/Motherboard/system/core_cm3.h **** } IPSR_Type;
 162:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 163:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 164:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 165:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 166:src/MightyBoard/Motherboard/system/core_cm3.h **** typedef union
 167:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 168:src/MightyBoard/Motherboard/system/core_cm3.h ****   struct
 169:src/MightyBoard/Motherboard/system/core_cm3.h ****   {
 170:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 171:src/MightyBoard/Motherboard/system/core_cm3.h **** #if (__CORTEX_M != 0x04)
 172:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
 173:src/MightyBoard/Motherboard/system/core_cm3.h **** #else
 174:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
 175:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 176:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
 177:src/MightyBoard/Motherboard/system/core_cm3.h **** #endif
 178:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
 179:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
 180:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 181:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 182:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 183:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 184:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 185:src/MightyBoard/Motherboard/system/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 186:src/MightyBoard/Motherboard/system/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 187:src/MightyBoard/Motherboard/system/core_cm3.h **** } xPSR_Type;
 188:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 189:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 190:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Union type to access the Control Registers (CONTROL).
 191:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 192:src/MightyBoard/Motherboard/system/core_cm3.h **** typedef union
 193:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 194:src/MightyBoard/Motherboard/system/core_cm3.h ****   struct
 195:src/MightyBoard/Motherboard/system/core_cm3.h ****   {
 196:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 197:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
 198:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
 199:src/MightyBoard/Motherboard/system/core_cm3.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
 200:src/MightyBoard/Motherboard/system/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 201:src/MightyBoard/Motherboard/system/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 202:src/MightyBoard/Motherboard/system/core_cm3.h **** } CONTROL_Type;
 203:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 204:src/MightyBoard/Motherboard/system/core_cm3.h **** /*@} end of group CMSIS_CORE */
 205:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 206:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 207:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \ingroup  CMSIS_core_register
 208:src/MightyBoard/Motherboard/system/core_cm3.h ****     \defgroup CMSIS_NVIC CMSIS NVIC
 209:src/MightyBoard/Motherboard/system/core_cm3.h ****   Type definitions for the Cortex-M NVIC Registers
 210:src/MightyBoard/Motherboard/system/core_cm3.h ****   @{
 211:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 212:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 213:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 214:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 215:src/MightyBoard/Motherboard/system/core_cm3.h **** typedef struct
 216:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 217:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t ISER[8];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register   
 218:src/MightyBoard/Motherboard/system/core_cm3.h ****        uint32_t RESERVED0[24];
 219:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t ICER[8];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 220:src/MightyBoard/Motherboard/system/core_cm3.h ****        uint32_t RSERVED1[24];
 221:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t ISPR[8];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register  
 222:src/MightyBoard/Motherboard/system/core_cm3.h ****        uint32_t RESERVED2[24];
 223:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t ICPR[8];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 224:src/MightyBoard/Motherboard/system/core_cm3.h ****        uint32_t RESERVED3[24];
 225:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t IABR[8];                 /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register   
 226:src/MightyBoard/Motherboard/system/core_cm3.h ****        uint32_t RESERVED4[56];
 227:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint8_t  IP[240];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 228:src/MightyBoard/Motherboard/system/core_cm3.h ****        uint32_t RESERVED5[644];
 229:src/MightyBoard/Motherboard/system/core_cm3.h ****   __O  uint32_t STIR;                    /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 230:src/MightyBoard/Motherboard/system/core_cm3.h **** }  NVIC_Type;
 231:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 232:src/MightyBoard/Motherboard/system/core_cm3.h **** /*@} end of group CMSIS_NVIC */
 233:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 234:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 235:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \ingroup  CMSIS_core_register
 236:src/MightyBoard/Motherboard/system/core_cm3.h ****     \defgroup CMSIS_SCB CMSIS SCB
 237:src/MightyBoard/Motherboard/system/core_cm3.h ****   Type definitions for the Cortex-M System Control Block Registers
 238:src/MightyBoard/Motherboard/system/core_cm3.h ****   @{
 239:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 240:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 241:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Structure type to access the System Control Block (SCB).
 242:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 243:src/MightyBoard/Motherboard/system/core_cm3.h **** typedef struct
 244:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 245:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPU ID Base Register            
 246:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control State Register
 247:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register    
 248:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt / Reset Co
 249:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register         
 250:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register  
 251:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint8_t  SHP[12];                 /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 252:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State
 253:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t CFSR;                    /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 254:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t HFSR;                    /*!< Offset: 0x02C (R/W)  Hard Fault Status Register      
 255:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register     
 256:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t MMFAR;                   /*!< Offset: 0x034 (R/W)  Mem Manage Address Register     
 257:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t BFAR;                    /*!< Offset: 0x038 (R/W)  Bus Fault Address Register      
 258:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t AFSR;                    /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 259:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t PFR[2];                  /*!< Offset: 0x040 (R/ )  Processor Feature Register      
 260:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t DFR;                     /*!< Offset: 0x048 (R/ )  Debug Feature Register          
 261:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t ADR;                     /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register      
 262:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t MMFR[4];                 /*!< Offset: 0x050 (R/ )  Memory Model Feature Register   
 263:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t ISAR[5];                 /*!< Offset: 0x060 (R/ )  ISA Feature Register            
 264:src/MightyBoard/Motherboard/system/core_cm3.h **** } SCB_Type;
 265:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 266:src/MightyBoard/Motherboard/system/core_cm3.h **** /* SCB CPUID Register Definitions */
 267:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 268:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 269:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 270:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 271:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 272:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 273:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 274:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 275:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 276:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 277:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 278:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 279:src/MightyBoard/Motherboard/system/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 280:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 281:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 282:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 283:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 284:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 285:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 286:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 287:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 288:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 289:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 290:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 291:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 292:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 293:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 294:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 295:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 296:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 297:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 298:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 299:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 300:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 301:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 302:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 303:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 304:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 305:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 306:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 307:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 308:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 309:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 310:src/MightyBoard/Motherboard/system/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 311:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB 
 312:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (1UL << SCB_VTOR_TBLBASE_Pos)                  /*!< SCB 
 313:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 314:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 315:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 316:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 317:src/MightyBoard/Motherboard/system/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 318:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 319:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 320:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 321:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 322:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 323:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 324:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 325:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 326:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 327:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 328:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 329:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 330:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 331:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 332:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 333:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 334:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 335:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 336:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 337:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 338:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 339:src/MightyBoard/Motherboard/system/core_cm3.h **** /* SCB System Control Register Definitions */
 340:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 341:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 342:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 343:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 344:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 345:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 346:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 347:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 348:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 349:src/MightyBoard/Motherboard/system/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 350:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 351:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 352:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 353:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 354:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 355:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 356:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 357:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 358:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 359:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 360:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 361:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 362:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 363:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 364:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 365:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 366:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 367:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 368:src/MightyBoard/Motherboard/system/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 369:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 370:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 371:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 372:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 373:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 374:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 375:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 376:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 377:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 378:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 379:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 380:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 381:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 382:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 383:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 384:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 385:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 386:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 387:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 388:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 389:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 390:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 391:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 392:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 393:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 394:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 395:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 396:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 397:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 398:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 399:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 400:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 401:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 402:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 403:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 404:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 405:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 406:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 407:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 408:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 409:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 410:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 411:src/MightyBoard/Motherboard/system/core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 412:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 413:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 414:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 415:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 416:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 417:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 418:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 419:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 420:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 421:src/MightyBoard/Motherboard/system/core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 422:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 423:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 424:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 425:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 426:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 427:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 428:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 429:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 430:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 431:src/MightyBoard/Motherboard/system/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 432:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 433:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 434:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 435:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 436:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 437:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 438:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 439:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 440:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 441:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 442:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 443:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 444:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 445:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1UL << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 446:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 447:src/MightyBoard/Motherboard/system/core_cm3.h **** /*@} end of group CMSIS_SCB */
 448:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 449:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 450:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \ingroup  CMSIS_core_register
 451:src/MightyBoard/Motherboard/system/core_cm3.h ****     \defgroup CMSIS_SysTick CMSIS SysTick
 452:src/MightyBoard/Motherboard/system/core_cm3.h ****   Type definitions for the Cortex-M System Timer Registers
 453:src/MightyBoard/Motherboard/system/core_cm3.h ****   @{
 454:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 455:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 456:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Structure type to access the System Timer (SysTick).
 457:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 458:src/MightyBoard/Motherboard/system/core_cm3.h **** typedef struct
 459:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 460:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 461:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register   
 462:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register  
 463:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register    
 464:src/MightyBoard/Motherboard/system/core_cm3.h **** } SysTick_Type;
 465:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 466:src/MightyBoard/Motherboard/system/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 467:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 468:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 469:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 470:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 471:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 472:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 473:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 474:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 475:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 476:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 477:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 478:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 479:src/MightyBoard/Motherboard/system/core_cm3.h **** /* SysTick Reload Register Definitions */
 480:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 481:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 482:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 483:src/MightyBoard/Motherboard/system/core_cm3.h **** /* SysTick Current Register Definitions */
 484:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 485:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 486:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 487:src/MightyBoard/Motherboard/system/core_cm3.h **** /* SysTick Calibration Register Definitions */
 488:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 489:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 490:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 491:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 492:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 493:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 494:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 495:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 496:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 497:src/MightyBoard/Motherboard/system/core_cm3.h **** /*@} end of group CMSIS_SysTick */
 498:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 499:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 500:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \ingroup  CMSIS_core_register
 501:src/MightyBoard/Motherboard/system/core_cm3.h ****     \defgroup CMSIS_ITM CMSIS ITM
 502:src/MightyBoard/Motherboard/system/core_cm3.h ****   Type definitions for the Cortex-M Instrumentation Trace Macrocell (ITM)
 503:src/MightyBoard/Motherboard/system/core_cm3.h ****   @{
 504:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 505:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 506:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 507:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 508:src/MightyBoard/Motherboard/system/core_cm3.h **** typedef struct
 509:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 510:src/MightyBoard/Motherboard/system/core_cm3.h ****   __O  union
 511:src/MightyBoard/Motherboard/system/core_cm3.h ****   {
 512:src/MightyBoard/Motherboard/system/core_cm3.h ****     __O  uint8_t    u8;                  /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit         
 513:src/MightyBoard/Motherboard/system/core_cm3.h ****     __O  uint16_t   u16;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit        
 514:src/MightyBoard/Motherboard/system/core_cm3.h ****     __O  uint32_t   u32;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit        
 515:src/MightyBoard/Motherboard/system/core_cm3.h ****   }  PORT [32];                          /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers     
 516:src/MightyBoard/Motherboard/system/core_cm3.h ****        uint32_t RESERVED0[864];
 517:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t TER;                     /*!< Offset:       (R/W)  ITM Trace Enable Register       
 518:src/MightyBoard/Motherboard/system/core_cm3.h ****        uint32_t RESERVED1[15];
 519:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t TPR;                     /*!< Offset:       (R/W)  ITM Trace Privilege Register    
 520:src/MightyBoard/Motherboard/system/core_cm3.h ****        uint32_t RESERVED2[15];
 521:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t TCR;                     /*!< Offset:       (R/W)  ITM Trace Control Register      
 522:src/MightyBoard/Motherboard/system/core_cm3.h ****        uint32_t RESERVED3[29];
 523:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t IWR;                     /*!< Offset:       (R/W)  ITM Integration Write Register  
 524:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t IRR;                     /*!< Offset:       (R/W)  ITM Integration Read Register   
 525:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t IMCR;                    /*!< Offset:       (R/W)  ITM Integration Mode Control Reg
 526:src/MightyBoard/Motherboard/system/core_cm3.h ****        uint32_t RESERVED4[43];
 527:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t LAR;                     /*!< Offset:       (R/W)  ITM Lock Access Register        
 528:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t LSR;                     /*!< Offset:       (R/W)  ITM Lock Status Register        
 529:src/MightyBoard/Motherboard/system/core_cm3.h ****        uint32_t RESERVED5[6];
 530:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t PID4;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 531:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t PID5;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 532:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t PID6;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 533:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t PID7;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 534:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t PID0;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 535:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t PID1;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 536:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t PID2;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 537:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t PID3;                    /*!< Offset:       (R/ )  ITM Peripheral Identification Re
 538:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t CID0;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 539:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t CID1;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 540:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t CID2;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 541:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t CID3;                    /*!< Offset:       (R/ )  ITM Component  Identification Re
 542:src/MightyBoard/Motherboard/system/core_cm3.h **** } ITM_Type;
 543:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 544:src/MightyBoard/Motherboard/system/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 545:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 546:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL << ITM_TPR_PRIVMASK_Pos)                /*!< ITM 
 547:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 548:src/MightyBoard/Motherboard/system/core_cm3.h **** /* ITM Trace Control Register Definitions */
 549:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
 550:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 551:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 552:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_ATBID_Pos                  16                                             /*!< ITM 
 553:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_ATBID_Msk                  (0x7FUL << ITM_TCR_ATBID_Pos)                  /*!< ITM 
 554:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 555:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 556:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 557:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 558:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 559:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 560:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 561:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 562:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 563:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 564:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 565:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 566:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 567:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 568:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 569:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 570:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 571:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1UL << ITM_TCR_ITMENA_Pos)                    /*!< ITM 
 572:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 573:src/MightyBoard/Motherboard/system/core_cm3.h **** /* ITM Integration Write Register Definitions */
 574:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 575:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM 
 576:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 577:src/MightyBoard/Motherboard/system/core_cm3.h **** /* ITM Integration Read Register Definitions */
 578:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 579:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1UL << ITM_IRR_ATREADYM_Pos)                  /*!< ITM 
 580:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 581:src/MightyBoard/Motherboard/system/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 582:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
 583:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM 
 584:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 585:src/MightyBoard/Motherboard/system/core_cm3.h **** /* ITM Lock Status Register Definitions */
 586:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
 587:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 588:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 589:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 590:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 591:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 592:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 593:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_LSR_Present_Msk                (1UL << ITM_LSR_Present_Pos)                   /*!< ITM 
 594:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 595:src/MightyBoard/Motherboard/system/core_cm3.h **** /*@}*/ /* end of group CMSIS_ITM */
 596:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 597:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 598:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \ingroup  CMSIS_core_register
 599:src/MightyBoard/Motherboard/system/core_cm3.h ****     \defgroup CMSIS_InterruptType CMSIS Interrupt Type
 600:src/MightyBoard/Motherboard/system/core_cm3.h ****   Type definitions for the Cortex-M Interrupt Type Register
 601:src/MightyBoard/Motherboard/system/core_cm3.h ****   @{
 602:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 603:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 604:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Structure type to access the Interrupt Type Register.
 605:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 606:src/MightyBoard/Motherboard/system/core_cm3.h **** typedef struct
 607:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 608:src/MightyBoard/Motherboard/system/core_cm3.h ****        uint32_t RESERVED0;
 609:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t ICTR;                    /*!< Offset: 0x004 (R/ )  Interrupt Control Type Register 
 610:src/MightyBoard/Motherboard/system/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 611:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t ACTLR;                   /*!< Offset: 0x008 (R/W)  Auxiliary Control Register      
 612:src/MightyBoard/Motherboard/system/core_cm3.h **** #else
 613:src/MightyBoard/Motherboard/system/core_cm3.h ****        uint32_t RESERVED1;
 614:src/MightyBoard/Motherboard/system/core_cm3.h **** #endif
 615:src/MightyBoard/Motherboard/system/core_cm3.h **** } InterruptType_Type;
 616:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 617:src/MightyBoard/Motherboard/system/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 618:src/MightyBoard/Motherboard/system/core_cm3.h **** #define IntType_ICTR_INTLINESNUM_Pos  0                                                   /*!< Inte
 619:src/MightyBoard/Motherboard/system/core_cm3.h **** #define IntType_ICTR_INTLINESNUM_Msk (0x1FUL << IntType_ICTR_INTLINESNUM_Pos)             /*!< Inte
 620:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 621:src/MightyBoard/Motherboard/system/core_cm3.h **** /* Auxiliary Control Register Definitions */
 622:src/MightyBoard/Motherboard/system/core_cm3.h **** #define IntType_ACTLR_DISFOLD_Pos     2                                                   /*!< Inte
 623:src/MightyBoard/Motherboard/system/core_cm3.h **** #define IntType_ACTLR_DISFOLD_Msk    (1UL << IntType_ACTLR_DISFOLD_Pos)                   /*!< Inte
 624:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 625:src/MightyBoard/Motherboard/system/core_cm3.h **** #define IntType_ACTLR_DISDEFWBUF_Pos  1                                                   /*!< Inte
 626:src/MightyBoard/Motherboard/system/core_cm3.h **** #define IntType_ACTLR_DISDEFWBUF_Msk (1UL << IntType_ACTLR_DISDEFWBUF_Pos)                /*!< Inte
 627:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 628:src/MightyBoard/Motherboard/system/core_cm3.h **** #define IntType_ACTLR_DISMCYCINT_Pos  0                                                   /*!< Inte
 629:src/MightyBoard/Motherboard/system/core_cm3.h **** #define IntType_ACTLR_DISMCYCINT_Msk (1UL << IntType_ACTLR_DISMCYCINT_Pos)                /*!< Inte
 630:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 631:src/MightyBoard/Motherboard/system/core_cm3.h **** /*@}*/ /* end of group CMSIS_InterruptType */
 632:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 633:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 634:src/MightyBoard/Motherboard/system/core_cm3.h **** #if (__MPU_PRESENT == 1)
 635:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \ingroup  CMSIS_core_register
 636:src/MightyBoard/Motherboard/system/core_cm3.h ****     \defgroup CMSIS_MPU CMSIS MPU
 637:src/MightyBoard/Motherboard/system/core_cm3.h ****   Type definitions for the Cortex-M Memory Protection Unit (MPU)
 638:src/MightyBoard/Motherboard/system/core_cm3.h ****   @{
 639:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 640:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 641:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Structure type to access the Memory Protection Unit (MPU).
 642:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 643:src/MightyBoard/Motherboard/system/core_cm3.h **** typedef struct
 644:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 645:src/MightyBoard/Motherboard/system/core_cm3.h ****   __I  uint32_t TYPE;                    /*!< Offset: 0x000 (R/ )  MPU Type Register               
 646:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x004 (R/W)  MPU Control Register            
 647:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t RNR;                     /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register      
 648:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t RBAR;                    /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
 649:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t RASR;                    /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
 650:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t RBAR_A1;                 /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
 651:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t RASR_A1;                 /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
 652:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t RBAR_A2;                 /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
 653:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t RASR_A2;                 /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
 654:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t RBAR_A3;                 /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
 655:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t RASR_A3;                 /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
 656:src/MightyBoard/Motherboard/system/core_cm3.h **** } MPU_Type;
 657:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 658:src/MightyBoard/Motherboard/system/core_cm3.h **** /* MPU Type Register */
 659:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
 660:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 661:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 662:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
 663:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 664:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 665:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
 666:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
 667:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 668:src/MightyBoard/Motherboard/system/core_cm3.h **** /* MPU Control Register */
 669:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
 670:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 671:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 672:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
 673:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 674:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 675:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
 676:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1UL << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
 677:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 678:src/MightyBoard/Motherboard/system/core_cm3.h **** /* MPU Region Number Register */
 679:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
 680:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL << MPU_RNR_REGION_Pos)                 /*!< MPU 
 681:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 682:src/MightyBoard/Motherboard/system/core_cm3.h **** /* MPU Region Base Address Register */
 683:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
 684:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
 685:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 686:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
 687:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 688:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 689:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
 690:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFUL << MPU_RBAR_REGION_Pos)                 /*!< MPU 
 691:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 692:src/MightyBoard/Motherboard/system/core_cm3.h **** /* MPU Region Attribute and Size Register */
 693:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
 694:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
 695:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 696:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
 697:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_AP_Msk                    (7UL << MPU_RASR_AP_Pos)                       /*!< MPU 
 698:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 699:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
 700:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (7UL << MPU_RASR_TEX_Pos)                      /*!< MPU 
 701:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 702:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
 703:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
 704:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 705:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
 706:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
 707:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 708:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
 709:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
 710:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 711:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
 712:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
 713:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 714:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
 715:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 716:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 717:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_ENA_Pos                     0                                            /*!< MPU 
 718:src/MightyBoard/Motherboard/system/core_cm3.h **** #define MPU_RASR_ENA_Msk                    (0x1UL << MPU_RASR_ENA_Pos)                   /*!< MPU 
 719:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 720:src/MightyBoard/Motherboard/system/core_cm3.h **** /*@} end of group CMSIS_MPU */
 721:src/MightyBoard/Motherboard/system/core_cm3.h **** #endif
 722:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 723:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 724:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \ingroup  CMSIS_core_register
 725:src/MightyBoard/Motherboard/system/core_cm3.h ****     \defgroup CMSIS_CoreDebug CMSIS Core Debug
 726:src/MightyBoard/Motherboard/system/core_cm3.h ****   Type definitions for the Cortex-M Core Debug Registers
 727:src/MightyBoard/Motherboard/system/core_cm3.h ****   @{
 728:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 729:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 730:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Structure type to access the Core Debug Register (CoreDebug).
 731:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 732:src/MightyBoard/Motherboard/system/core_cm3.h **** typedef struct
 733:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 734:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
 735:src/MightyBoard/Motherboard/system/core_cm3.h ****   __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
 736:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
 737:src/MightyBoard/Motherboard/system/core_cm3.h ****   __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
 738:src/MightyBoard/Motherboard/system/core_cm3.h **** } CoreDebug_Type;
 739:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 740:src/MightyBoard/Motherboard/system/core_cm3.h **** /* Debug Halting Control and Status Register */
 741:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 742:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 743:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 744:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 745:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 746:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 747:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 748:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 749:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 750:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 751:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 752:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 753:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 754:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 755:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 756:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 757:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 758:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 759:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 760:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 761:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 762:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
 763:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
 764:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 765:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 766:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 767:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 768:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 769:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 770:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 771:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 772:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 773:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 774:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 775:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 776:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 777:src/MightyBoard/Motherboard/system/core_cm3.h **** /* Debug Core Register Selector Register */
 778:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 779:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 780:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 781:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 782:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 783:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 784:src/MightyBoard/Motherboard/system/core_cm3.h **** /* Debug Exception and Monitor Control Register */
 785:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
 786:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
 787:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 788:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
 789:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
 790:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 791:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
 792:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
 793:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 794:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
 795:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
 796:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 797:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
 798:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
 799:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 800:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 801:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 802:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 803:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
 804:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
 805:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 806:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
 807:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
 808:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 809:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
 810:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
 811:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 812:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
 813:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
 814:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 815:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
 816:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
 817:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 818:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
 819:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
 820:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 821:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 822:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 823:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 824:src/MightyBoard/Motherboard/system/core_cm3.h **** /*@} end of group CMSIS_CoreDebug */
 825:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 826:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 827:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \ingroup  CMSIS_core_register
 828:src/MightyBoard/Motherboard/system/core_cm3.h ****   @{
 829:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 830:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 831:src/MightyBoard/Motherboard/system/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
 832:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 833:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address        
 834:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
 835:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address    
 836:src/MightyBoard/Motherboard/system/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address       
 837:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 838:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 839:src/MightyBoard/Motherboard/system/core_cm3.h **** #define InterruptType       ((InterruptType_Type *) SCS_BASE)         /*!< Interrupt Type Register 
 840:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 841:src/MightyBoard/Motherboard/system/core_cm3.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 842:src/MightyBoard/Motherboard/system/core_cm3.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 843:src/MightyBoard/Motherboard/system/core_cm3.h **** #define ITM                 ((ITM_Type *)           ITM_BASE)         /*!< ITM configuration struct
 844:src/MightyBoard/Motherboard/system/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 845:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 846:src/MightyBoard/Motherboard/system/core_cm3.h **** #if (__MPU_PRESENT == 1)
 847:src/MightyBoard/Motherboard/system/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit  
 848:src/MightyBoard/Motherboard/system/core_cm3.h ****   #define MPU               ((MPU_Type*)            MPU_BASE)         /*!< Memory Protection Unit  
 849:src/MightyBoard/Motherboard/system/core_cm3.h **** #endif
 850:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 851:src/MightyBoard/Motherboard/system/core_cm3.h **** /*@} */
 852:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 853:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 854:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 855:src/MightyBoard/Motherboard/system/core_cm3.h **** /*******************************************************************************
 856:src/MightyBoard/Motherboard/system/core_cm3.h ****  *                Hardware Abstraction Layer
 857:src/MightyBoard/Motherboard/system/core_cm3.h ****  ******************************************************************************/
 858:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \ingroup  CMSIS
 859:src/MightyBoard/Motherboard/system/core_cm3.h ****   \addtogroup CMSIS_Core_FunctionInterface CMSIS Core Function Interface
 860:src/MightyBoard/Motherboard/system/core_cm3.h ****   Core Function Interface contains:
 861:src/MightyBoard/Motherboard/system/core_cm3.h ****   - Core NVIC Functions
 862:src/MightyBoard/Motherboard/system/core_cm3.h ****   - Core SysTick Functions
 863:src/MightyBoard/Motherboard/system/core_cm3.h ****   - Core Debug Functions
 864:src/MightyBoard/Motherboard/system/core_cm3.h ****   - Core Register Access Functions
 865:src/MightyBoard/Motherboard/system/core_cm3.h **** */
 866:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 867:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 868:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 869:src/MightyBoard/Motherboard/system/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
 870:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 871:src/MightyBoard/Motherboard/system/core_cm3.h ****     \defgroup CMSIS_Core_NVICFunctions CMSIS Core NVIC Functions
 872:src/MightyBoard/Motherboard/system/core_cm3.h ****   @{
 873:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 874:src/MightyBoard/Motherboard/system/core_cm3.h **** /** @addtogroup CMSIS_Core_NVICFunctions
 875:src/MightyBoard/Motherboard/system/core_cm3.h ****  * @{
 876:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 877:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Set Priority Grouping
 878:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 879:src/MightyBoard/Motherboard/system/core_cm3.h ****   This function sets the priority grouping field using the required unlock sequence.
 880:src/MightyBoard/Motherboard/system/core_cm3.h ****   The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
 881:src/MightyBoard/Motherboard/system/core_cm3.h ****   Only values from 0..7 are used.
 882:src/MightyBoard/Motherboard/system/core_cm3.h ****   In case of a conflict between priority grouping and available
 883:src/MightyBoard/Motherboard/system/core_cm3.h ****   priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
 884:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 885:src/MightyBoard/Motherboard/system/core_cm3.h ****     \param [in]      PriorityGroup  Priority grouping field
 886:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 887:src/MightyBoard/Motherboard/system/core_cm3.h **** static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
 888:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 889:src/MightyBoard/Motherboard/system/core_cm3.h ****   uint32_t reg_value;
 890:src/MightyBoard/Motherboard/system/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 a
 891:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 892:src/MightyBoard/Motherboard/system/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
 893:src/MightyBoard/Motherboard/system/core_cm3.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
 894:src/MightyBoard/Motherboard/system/core_cm3.h ****   reg_value  =  (reg_value                       |
 895:src/MightyBoard/Motherboard/system/core_cm3.h ****                 (0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 896:src/MightyBoard/Motherboard/system/core_cm3.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
 897:src/MightyBoard/Motherboard/system/core_cm3.h ****   SCB->AIRCR =  reg_value;
 898:src/MightyBoard/Motherboard/system/core_cm3.h **** }
 899:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 900:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 901:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Get Priority Grouping
 902:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 903:src/MightyBoard/Motherboard/system/core_cm3.h ****   This function gets the priority grouping from NVIC Interrupt Controller.
 904:src/MightyBoard/Motherboard/system/core_cm3.h ****   Priority grouping is SCB->AIRCR [10:8] PRIGROUP field.
 905:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 906:src/MightyBoard/Motherboard/system/core_cm3.h ****     \return                Priority grouping field
 907:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 908:src/MightyBoard/Motherboard/system/core_cm3.h **** static __INLINE uint32_t NVIC_GetPriorityGrouping(void)
 909:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 910:src/MightyBoard/Motherboard/system/core_cm3.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
 911:src/MightyBoard/Motherboard/system/core_cm3.h **** }
 912:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 913:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 914:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Enable External Interrupt
 915:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 916:src/MightyBoard/Motherboard/system/core_cm3.h ****     This function enables a device specific interupt in the NVIC interrupt controller.
 917:src/MightyBoard/Motherboard/system/core_cm3.h ****     The interrupt number cannot be a negative value.
 918:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 919:src/MightyBoard/Motherboard/system/core_cm3.h ****     \param [in]      IRQn  Number of the external interrupt to enable
 920:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 921:src/MightyBoard/Motherboard/system/core_cm3.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 922:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 923:src/MightyBoard/Motherboard/system/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 924:src/MightyBoard/Motherboard/system/core_cm3.h **** }
 925:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 926:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 927:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Disable External Interrupt
 928:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 929:src/MightyBoard/Motherboard/system/core_cm3.h ****     This function disables a device specific interupt in the NVIC interrupt controller.
 930:src/MightyBoard/Motherboard/system/core_cm3.h ****     The interrupt number cannot be a negative value.
 931:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 932:src/MightyBoard/Motherboard/system/core_cm3.h ****     \param [in]      IRQn  Number of the external interrupt to disable
 933:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 934:src/MightyBoard/Motherboard/system/core_cm3.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 935:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 936:src/MightyBoard/Motherboard/system/core_cm3.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 937:src/MightyBoard/Motherboard/system/core_cm3.h **** }
 938:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 939:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 940:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Get Pending Interrupt
 941:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 942:src/MightyBoard/Motherboard/system/core_cm3.h ****     This function reads the pending register in the NVIC and returns the pending bit
 943:src/MightyBoard/Motherboard/system/core_cm3.h ****     for the specified interrupt.
 944:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 945:src/MightyBoard/Motherboard/system/core_cm3.h ****     \param [in]      IRQn  Number of the interrupt for get pending
 946:src/MightyBoard/Motherboard/system/core_cm3.h ****     \return             0  Interrupt status is not pending
 947:src/MightyBoard/Motherboard/system/core_cm3.h ****     \return             1  Interrupt status is pending
 948:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 949:src/MightyBoard/Motherboard/system/core_cm3.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 950:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 951:src/MightyBoard/Motherboard/system/core_cm3.h ****   return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); 
 952:src/MightyBoard/Motherboard/system/core_cm3.h **** }
 953:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 954:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 955:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Set Pending Interrupt
 956:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 957:src/MightyBoard/Motherboard/system/core_cm3.h ****     This function sets the pending bit for the specified interrupt.
 958:src/MightyBoard/Motherboard/system/core_cm3.h ****     The interrupt number cannot be a negative value.
 959:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 960:src/MightyBoard/Motherboard/system/core_cm3.h ****     \param [in]      IRQn  Number of the interrupt for set pending
 961:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 962:src/MightyBoard/Motherboard/system/core_cm3.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
 963:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 964:src/MightyBoard/Motherboard/system/core_cm3.h ****   NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending 
 965:src/MightyBoard/Motherboard/system/core_cm3.h **** }
 966:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 967:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 968:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Clear Pending Interrupt
 969:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 970:src/MightyBoard/Motherboard/system/core_cm3.h ****     This function clears the pending bit for the specified interrupt.
 971:src/MightyBoard/Motherboard/system/core_cm3.h ****     The interrupt number cannot be a negative value.
 972:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 973:src/MightyBoard/Motherboard/system/core_cm3.h ****     \param [in]      IRQn  Number of the interrupt for clear pending
 974:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 975:src/MightyBoard/Motherboard/system/core_cm3.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 976:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 977:src/MightyBoard/Motherboard/system/core_cm3.h ****   NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrup
 978:src/MightyBoard/Motherboard/system/core_cm3.h **** }
 979:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 980:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 981:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Get Active Interrupt
 982:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 983:src/MightyBoard/Motherboard/system/core_cm3.h ****     This function reads the active register in NVIC and returns the active bit.
 984:src/MightyBoard/Motherboard/system/core_cm3.h ****     \param [in]      IRQn  Number of the interrupt for get active
 985:src/MightyBoard/Motherboard/system/core_cm3.h ****     \return             0  Interrupt status is not active
 986:src/MightyBoard/Motherboard/system/core_cm3.h ****     \return             1  Interrupt status is active
 987:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
 988:src/MightyBoard/Motherboard/system/core_cm3.h **** static __INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
 989:src/MightyBoard/Motherboard/system/core_cm3.h **** {
 990:src/MightyBoard/Motherboard/system/core_cm3.h ****   return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /
 991:src/MightyBoard/Motherboard/system/core_cm3.h **** }
 992:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 993:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 994:src/MightyBoard/Motherboard/system/core_cm3.h **** /** \brief  Set Interrupt Priority
 995:src/MightyBoard/Motherboard/system/core_cm3.h **** 
 996:src/MightyBoard/Motherboard/system/core_cm3.h ****     This function sets the priority for the specified interrupt. The interrupt
 997:src/MightyBoard/Motherboard/system/core_cm3.h ****     number can be positive to specify an external (device specific)
 998:src/MightyBoard/Motherboard/system/core_cm3.h ****     interrupt, or negative to specify an internal (core) interrupt.
 999:src/MightyBoard/Motherboard/system/core_cm3.h **** 
1000:src/MightyBoard/Motherboard/system/core_cm3.h ****     Note: The priority cannot be set for every core interrupt.
1001:src/MightyBoard/Motherboard/system/core_cm3.h **** 
1002:src/MightyBoard/Motherboard/system/core_cm3.h ****     \param [in]      IRQn  Number of the interrupt for set priority
1003:src/MightyBoard/Motherboard/system/core_cm3.h ****     \param [in]  priority  Priority to set
1004:src/MightyBoard/Motherboard/system/core_cm3.h ****  */
1005:src/MightyBoard/Motherboard/system/core_cm3.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1006:src/MightyBoard/Motherboard/system/core_cm3.h **** {
1007:src/MightyBoard/Motherboard/system/core_cm3.h ****   if(IRQn < 0) {
1008:src/MightyBoard/Motherboard/system/core_cm3.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
1009:src/MightyBoard/Motherboard/system/core_cm3.h ****   else {
1010:src/MightyBoard/Motherboard/system/core_cm3.h ****     NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set 
  89              	 .loc 2 1010 0
  90 0070 4FF46143 	 mov r3,#57600
  91 0074 CEF20003 	 movt r3,57344
  92 0078 4FF08802 	 mov r2,#136
  93 007c 83F81623 	 strb r2,[r3,#790]
  94              	.LBE11:
  95              	.LBE10:
  96              	.LBE9:
 133:src/MightyBoard/shared/AnalogPin.cc **** 	  NVIC_SetPriority(ADC_IRQn, 17);
 134:src/MightyBoard/shared/AnalogPin.cc ****     }
  97              	 .loc 1 134 0
  98 0080 02B0     	 add sp,sp,#8
  99 0082 70BD     	 pop {r4,r5,r6,pc}
 100              	.L3:
 101              	 .align 2
 102              	.L2:
 103 0084 17000000 	 .word .LC1+23
 104              	 .cfi_endproc
 105              	.LFE55:
 107              	 .section .text._Z15startAnalogReadhPVsPVb,"ax",%progbits
 108              	 .align 2
 109              	 .global _Z15startAnalogReadhPVsPVb
 110              	 .thumb
 111              	 .thumb_func
 113              	_Z15startAnalogReadhPVsPVb:
 114              	.LFB56:
 135:src/MightyBoard/shared/AnalogPin.cc **** 
 136:src/MightyBoard/shared/AnalogPin.cc ****     bool startAnalogRead(uint8_t pin,
 137:src/MightyBoard/shared/AnalogPin.cc ****                          volatile int16_t* destination,
 138:src/MightyBoard/shared/AnalogPin.cc ****                          volatile bool* finished) {
 115              	 .loc 1 138 0
 116              	 .cfi_startproc
 117              	 
 118              	 
 119              	.LVL3:
 120 0000 38B5     	 push {r3,r4,r5,lr}
 121              	.LCFI2:
 122              	 .cfi_def_cfa_offset 16
 123              	 .cfi_offset 14,-4
 124              	 .cfi_offset 5,-8
 125              	 .cfi_offset 4,-12
 126              	 .cfi_offset 3,-16
 139:src/MightyBoard/shared/AnalogPin.cc **** //    	xprintf("pin-23:%d" " (%s:%d)\n",pin-23,_F_,_L_);
 140:src/MightyBoard/shared/AnalogPin.cc ****             // ADSC is cleared when the conversion finishes.
 141:src/MightyBoard/shared/AnalogPin.cc ****             // We should not start a new read while an existing one is in progress.
 142:src/MightyBoard/shared/AnalogPin.cc ****     		  if (*adc_finished == false)
 127              	 .loc 1 142 0
 128 0002 40F20003 	 movw r3,#:lower16:.LANCHOR0
 129 0006 C0F20003 	 movt r3,#:upper16:.LANCHOR0
 130 000a 1B68     	 ldr r3,[r3,#0]
 131 000c 1B78     	 ldrb r3,[r3,#0]
 132 000e 73B3     	 cbz r3,.L6
 143:src/MightyBoard/shared/AnalogPin.cc ****     			  return false;
 144:src/MightyBoard/shared/AnalogPin.cc **** //            if ((ADCSRA & _BV(ADSC)) != 0) {
 145:src/MightyBoard/shared/AnalogPin.cc **** //                    return false;
 146:src/MightyBoard/shared/AnalogPin.cc **** //            }
 147:src/MightyBoard/shared/AnalogPin.cc **** //            ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 148:src/MightyBoard/shared/AnalogPin.cc ****                     adc_destination = destination;
 133              	 .loc 1 148 0
 134 0010 40F20003 	 movw r3,#:lower16:.LANCHOR1
 135 0014 C0F20003 	 movt r3,#:upper16:.LANCHOR1
 136 0018 1960     	 str r1,[r3,#0]
 149:src/MightyBoard/shared/AnalogPin.cc ****                     adc_finished = finished;
 137              	 .loc 1 149 0
 138 001a 40F20003 	 movw r3,#:lower16:.LANCHOR0
 139 001e C0F20003 	 movt r3,#:upper16:.LANCHOR0
 140 0022 1A60     	 str r2,[r3,#0]
 150:src/MightyBoard/shared/AnalogPin.cc ****                     *adc_finished = false;
 141              	 .loc 1 150 0
 142 0024 4FF00003 	 mov r3,#0
 143 0028 1370     	 strb r3,[r2,#0]
 151:src/MightyBoard/shared/AnalogPin.cc **** 
 152:src/MightyBoard/shared/AnalogPin.cc **** //                    if (pin < 8) {
 153:src/MightyBoard/shared/AnalogPin.cc **** 						// clear ADC Channel bit selecting upper 8 ADCs
 154:src/MightyBoard/shared/AnalogPin.cc **** //						ADCSRB &= ~0b01000;
 155:src/MightyBoard/shared/AnalogPin.cc **** //					}
 156:src/MightyBoard/shared/AnalogPin.cc **** //					else{
 157:src/MightyBoard/shared/AnalogPin.cc **** //						pin -= 8;
 158:src/MightyBoard/shared/AnalogPin.cc **** 						// set ADC Channel bit selecting upper 8 ADCs
 159:src/MightyBoard/shared/AnalogPin.cc **** //						ADCSRB |= 0b01000;
 160:src/MightyBoard/shared/AnalogPin.cc **** //					}
 161:src/MightyBoard/shared/AnalogPin.cc **** 			
 162:src/MightyBoard/shared/AnalogPin.cc **** 					// select ADC Channel and connect AREF to AVCC
 163:src/MightyBoard/shared/AnalogPin.cc **** //					ADMUX = 0b01000000 + pin;
 164:src/MightyBoard/shared/AnalogPin.cc **** 
 165:src/MightyBoard/shared/AnalogPin.cc ****                     // start the conversion.
 166:src/MightyBoard/shared/AnalogPin.cc **** //                    ADCSRA |= _BV(ADSC);
 167:src/MightyBoard/shared/AnalogPin.cc **** //            }
 168:src/MightyBoard/shared/AnalogPin.cc ****               // Start conversion
 169:src/MightyBoard/shared/AnalogPin.cc ****               ADC_IntConfig(LPC_ADC,pin-23,ENABLE);
 144              	 .loc 1 169 0
 145 002a A0F11705 	 sub r5,r0,#23
 146 002e EDB2     	 uxtb r5,r5
 147 0030 4FF48044 	 mov r4,#16384
 148 0034 C4F20304 	 movt r4,16387
 149 0038 2046     	 mov r0,r4
 150              	.LVL4:
 151 003a 2946     	 mov r1,r5
 152              	.LVL5:
 153 003c 4FF00102 	 mov r2,#1
 154              	.LVL6:
 155 0040 FFF7FEFF 	 bl ADC_IntConfig
 156              	.LVL7:
 170:src/MightyBoard/shared/AnalogPin.cc ****               ADC_ChannelCmd(LPC_ADC,pin-23,ENABLE);
 157              	 .loc 1 170 0
 158 0044 2046     	 mov r0,r4
 159 0046 2946     	 mov r1,r5
 160 0048 4FF00102 	 mov r2,#1
 161 004c FFF7FEFF 	 bl ADC_ChannelCmd
 171:src/MightyBoard/shared/AnalogPin.cc ****               ADC_StartCmd(LPC_ADC, ADC_START_NOW);
 162              	 .loc 1 171 0
 163 0050 2046     	 mov r0,r4
 164 0052 4FF00101 	 mov r1,#1
 165 0056 FFF7FEFF 	 bl ADC_StartCmd
 166              	.LVL8:
 167              	.LBB12:
 168              	.LBB13:
 923:src/MightyBoard/Motherboard/system/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 169              	 .loc 2 923 0
 170 005a 4FF46143 	 mov r3,#57600
 171 005e CEF20003 	 movt r3,57344
 172 0062 4FF48002 	 mov r2,#4194304
 173 0066 1A60     	 str r2,[r3,#0]
 174              	.LBE13:
 175              	.LBE12:
 172:src/MightyBoard/shared/AnalogPin.cc ****               NVIC_EnableIRQ(ADC_IRQn);
 173:src/MightyBoard/shared/AnalogPin.cc ****             // An interrupt will signal conversion completion.
 174:src/MightyBoard/shared/AnalogPin.cc ****             return true;
 176              	 .loc 1 174 0
 177 0068 4FF00100 	 mov r0,#1
 178 006c 38BD     	 pop {r3,r4,r5,pc}
 179              	.LVL9:
 180              	.L6:
 143:src/MightyBoard/shared/AnalogPin.cc ****     			  return false;
 181              	 .loc 1 143 0
 182 006e 4FF00000 	 mov r0,#0
 183              	.LVL10:
 175:src/MightyBoard/shared/AnalogPin.cc ****     }
 184              	 .loc 1 175 0
 185 0072 38BD     	 pop {r3,r4,r5,pc}
 186              	 .cfi_endproc
 187              	.LFE56:
 189              	 .section .text.ADC_IRQHandler,"ax",%progbits
 190              	 .align 2
 191              	 .global ADC_IRQHandler
 192              	 .thumb
 193              	 .thumb_func
 195              	ADC_IRQHandler:
 196              	.LFB57:
 176:src/MightyBoard/shared/AnalogPin.cc **** 
 177:src/MightyBoard/shared/AnalogPin.cc **** /*    ISR(ADC_vect)
 178:src/MightyBoard/shared/AnalogPin.cc ****     {
 179:src/MightyBoard/shared/AnalogPin.cc ****             uint8_t low_byte, high_byte;
 180:src/MightyBoard/shared/AnalogPin.cc ****             // we have to read ADCL first; doing so locks both ADCL
 181:src/MightyBoard/shared/AnalogPin.cc ****             // and ADCH until ADCH is read.  reading ADCL second would
 182:src/MightyBoard/shared/AnalogPin.cc ****             // cause the results of each conversion to be discarded,
 183:src/MightyBoard/shared/AnalogPin.cc ****             // as ADCL and ADCH would be locked when it completed.
 184:src/MightyBoard/shared/AnalogPin.cc ****             low_byte = ADCL;
 185:src/MightyBoard/shared/AnalogPin.cc ****             high_byte = ADCH;
 186:src/MightyBoard/shared/AnalogPin.cc **** 
 187:src/MightyBoard/shared/AnalogPin.cc ****             // combine the two bytes
 188:src/MightyBoard/shared/AnalogPin.cc ****             *adc_destination = (high_byte << 8) | low_byte;
 189:src/MightyBoard/shared/AnalogPin.cc ****             *adc_finished = true;
 190:src/MightyBoard/shared/AnalogPin.cc ****     }*/
 191:src/MightyBoard/shared/AnalogPin.cc ****     extern "C" void ADC_IRQHandler(void){
 197              	 .loc 1 191 0
 198              	 .cfi_startproc
 199              	 
 200              	 
 201 0000 38B5     	 push {r3,r4,r5,lr}
 202              	.LCFI3:
 203              	 .cfi_def_cfa_offset 16
 204              	 .cfi_offset 14,-4
 205              	 .cfi_offset 5,-8
 206              	 .cfi_offset 4,-12
 207              	 .cfi_offset 3,-16
 192:src/MightyBoard/shared/AnalogPin.cc **** //    	xprintf("A c1:%d hc1:%h",ADC_ChannelGetData(LPC_ADC,ADC_CHANNEL_1),ADC_ChannelGetData(LPC_AD
 193:src/MightyBoard/shared/AnalogPin.cc **** //    	xprintf("A c2:%d hc1:%h",ADC_ChannelGetData(LPC_ADC,ADC_CHANNEL_2),ADC_ChannelGetData(LPC_AD
 194:src/MightyBoard/shared/AnalogPin.cc **** //    	xprintf("A c3:%d hc1:%h",ADC_ChannelGetData(LPC_ADC,ADC_CHANNEL_3),ADC_ChannelGetData(LPC_AD
 195:src/MightyBoard/shared/AnalogPin.cc ****     	if (ADC_ChannelGetStatus(LPC_ADC,ADC_CHANNEL_1,ADC_DATA_DONE)){
 208              	 .loc 1 195 0
 209 0002 4FF48040 	 mov r0,#16384
 210 0006 C4F20300 	 movt r0,16387
 211 000a 4FF00101 	 mov r1,#1
 212 000e 0A46     	 mov r2,r1
 213 0010 FFF7FEFF 	 bl ADC_ChannelGetStatus
 214 0014 E8B1     	 cbz r0,.L8
 196:src/MightyBoard/shared/AnalogPin.cc ****             ADC_IntConfig(LPC_ADC,ADC_ADINTEN1,DISABLE);
 215              	 .loc 1 196 0
 216 0016 4FF48044 	 mov r4,#16384
 217 001a C4F20304 	 movt r4,16387
 218 001e 2046     	 mov r0,r4
 219 0020 4FF00101 	 mov r1,#1
 220 0024 4FF00002 	 mov r2,#0
 221 0028 FFF7FEFF 	 bl ADC_IntConfig
 197:src/MightyBoard/shared/AnalogPin.cc ****             ADC_ChannelCmd(LPC_ADC,ADC_CHANNEL_1,DISABLE);
 222              	 .loc 1 197 0
 223 002c 2046     	 mov r0,r4
 224 002e 4FF00101 	 mov r1,#1
 225 0032 4FF00002 	 mov r2,#0
 226 0036 FFF7FEFF 	 bl ADC_ChannelCmd
 198:src/MightyBoard/shared/AnalogPin.cc ****     		*adc_destination = ADC_ChannelGetData(LPC_ADC,ADC_CHANNEL_1);
 227              	 .loc 1 198 0
 228 003a 40F20003 	 movw r3,#:lower16:.LANCHOR1
 229 003e C0F20003 	 movt r3,#:upper16:.LANCHOR1
 230 0042 1D68     	 ldr r5,[r3,#0]
 231 0044 2046     	 mov r0,r4
 232 0046 4FF00101 	 mov r1,#1
 233 004a FFF7FEFF 	 bl ADC_ChannelGetData
 234 004e 80B2     	 uxth r0,r0
 235 0050 2880     	 strh r0,[r5,#0]
 236              	.L8:
 199:src/MightyBoard/shared/AnalogPin.cc ****     	}
 200:src/MightyBoard/shared/AnalogPin.cc ****     	if (ADC_ChannelGetStatus(LPC_ADC,ADC_CHANNEL_2,ADC_DATA_DONE)){
 237              	 .loc 1 200 0
 238 0052 4FF48040 	 mov r0,#16384
 239 0056 C4F20300 	 movt r0,16387
 240 005a 4FF00201 	 mov r1,#2
 241 005e 4FF00102 	 mov r2,#1
 242 0062 FFF7FEFF 	 bl ADC_ChannelGetStatus
 243 0066 E8B1     	 cbz r0,.L9
 201:src/MightyBoard/shared/AnalogPin.cc ****             ADC_IntConfig(LPC_ADC,ADC_ADINTEN2,DISABLE);
 244              	 .loc 1 201 0
 245 0068 4FF48044 	 mov r4,#16384
 246 006c C4F20304 	 movt r4,16387
 247 0070 2046     	 mov r0,r4
 248 0072 4FF00201 	 mov r1,#2
 249 0076 4FF00002 	 mov r2,#0
 250 007a FFF7FEFF 	 bl ADC_IntConfig
 202:src/MightyBoard/shared/AnalogPin.cc ****             ADC_ChannelCmd(LPC_ADC,ADC_CHANNEL_2,DISABLE);
 251              	 .loc 1 202 0
 252 007e 2046     	 mov r0,r4
 253 0080 4FF00201 	 mov r1,#2
 254 0084 4FF00002 	 mov r2,#0
 255 0088 FFF7FEFF 	 bl ADC_ChannelCmd
 203:src/MightyBoard/shared/AnalogPin.cc ****     		*adc_destination = ADC_ChannelGetData(LPC_ADC,ADC_CHANNEL_2);
 256              	 .loc 1 203 0
 257 008c 40F20003 	 movw r3,#:lower16:.LANCHOR1
 258 0090 C0F20003 	 movt r3,#:upper16:.LANCHOR1
 259 0094 1D68     	 ldr r5,[r3,#0]
 260 0096 2046     	 mov r0,r4
 261 0098 4FF00201 	 mov r1,#2
 262 009c FFF7FEFF 	 bl ADC_ChannelGetData
 263 00a0 80B2     	 uxth r0,r0
 264 00a2 2880     	 strh r0,[r5,#0]
 265              	.L9:
 204:src/MightyBoard/shared/AnalogPin.cc ****     	}
 205:src/MightyBoard/shared/AnalogPin.cc ****     	if (ADC_ChannelGetStatus(LPC_ADC,ADC_CHANNEL_3,ADC_DATA_DONE)){
 266              	 .loc 1 205 0
 267 00a4 4FF48040 	 mov r0,#16384
 268 00a8 C4F20300 	 movt r0,16387
 269 00ac 4FF00301 	 mov r1,#3
 270 00b0 4FF00102 	 mov r2,#1
 271 00b4 FFF7FEFF 	 bl ADC_ChannelGetStatus
 272 00b8 E8B1     	 cbz r0,.L10
 206:src/MightyBoard/shared/AnalogPin.cc ****             ADC_IntConfig(LPC_ADC,ADC_ADINTEN3,DISABLE);
 273              	 .loc 1 206 0
 274 00ba 4FF48044 	 mov r4,#16384
 275 00be C4F20304 	 movt r4,16387
 276 00c2 2046     	 mov r0,r4
 277 00c4 4FF00301 	 mov r1,#3
 278 00c8 4FF00002 	 mov r2,#0
 279 00cc FFF7FEFF 	 bl ADC_IntConfig
 207:src/MightyBoard/shared/AnalogPin.cc ****             ADC_ChannelCmd(LPC_ADC,ADC_CHANNEL_3,DISABLE);
 280              	 .loc 1 207 0
 281 00d0 2046     	 mov r0,r4
 282 00d2 4FF00301 	 mov r1,#3
 283 00d6 4FF00002 	 mov r2,#0
 284 00da FFF7FEFF 	 bl ADC_ChannelCmd
 208:src/MightyBoard/shared/AnalogPin.cc ****     		*adc_destination = ADC_ChannelGetData(LPC_ADC,ADC_CHANNEL_3);
 285              	 .loc 1 208 0
 286 00de 40F20003 	 movw r3,#:lower16:.LANCHOR1
 287 00e2 C0F20003 	 movt r3,#:upper16:.LANCHOR1
 288 00e6 1D68     	 ldr r5,[r3,#0]
 289 00e8 2046     	 mov r0,r4
 290 00ea 4FF00301 	 mov r1,#3
 291 00ee FFF7FEFF 	 bl ADC_ChannelGetData
 292 00f2 80B2     	 uxth r0,r0
 293 00f4 2880     	 strh r0,[r5,#0]
 294              	.L10:
 295              	.LVL11:
 296              	.LBB14:
 297              	.LBB15:
 936:src/MightyBoard/Motherboard/system/core_cm3.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 298              	 .loc 2 936 0
 299 00f6 4FF46143 	 mov r3,#57600
 300 00fa CEF20003 	 movt r3,57344
 301 00fe 4FF48002 	 mov r2,#4194304
 302 0102 C3F88020 	 str r2,[r3,#128]
 303              	.LBE15:
 304              	.LBE14:
 209:src/MightyBoard/shared/AnalogPin.cc ****     	}
 210:src/MightyBoard/shared/AnalogPin.cc ****     	NVIC_DisableIRQ(ADC_IRQn);
 211:src/MightyBoard/shared/AnalogPin.cc ****     	*adc_finished = true;
 305              	 .loc 1 211 0
 306 0106 40F20003 	 movw r3,#:lower16:.LANCHOR0
 307 010a C0F20003 	 movt r3,#:upper16:.LANCHOR0
 308 010e 1B68     	 ldr r3,[r3,#0]
 309 0110 4FF00102 	 mov r2,#1
 310 0114 1A70     	 strb r2,[r3,#0]
 212:src/MightyBoard/shared/AnalogPin.cc ****     }
 311              	 .loc 1 212 0
 312 0116 38BD     	 pop {r3,r4,r5,pc}
 313              	 .cfi_endproc
 314              	.LFE57:
 316              	 .section .text._GLOBAL__sub_I_adc_destination,"ax",%progbits
 317              	 .align 2
 318              	 .thumb
 319              	 .thumb_func
 321              	_GLOBAL__sub_I_adc_destination:
 322              	.LFB59:
 323              	 .loc 1 212 0
 324              	 .cfi_startproc
 325              	 
 326              	 
 327 0000 08B5     	 push {r3,lr}
 328              	.LCFI4:
 329              	 .cfi_def_cfa_offset 8
 330              	 .cfi_offset 14,-4
 331              	 .cfi_offset 3,-8
 332              	.LVL12:
 333              	.LBB18:
 334              	.LBB19:
 335              	 .file 3 "src/MightyBoard/shared/LPCPort.hh"
   1:src/MightyBoard/shared/LPCPort.hh **** /*
   2:src/MightyBoard/shared/LPCPort.hh **** * Copyright 2010 by Adam Mayer	 <adam@makerbot.com>
   3:src/MightyBoard/shared/LPCPort.hh **** *
   4:src/MightyBoard/shared/LPCPort.hh **** * This program is free software: you can redistribute it and/or modify
   5:src/MightyBoard/shared/LPCPort.hh **** * it under the terms of the GNU General Public License as published by
   6:src/MightyBoard/shared/LPCPort.hh **** * the Free Software Foundation, either version 3 of the License, or
   7:src/MightyBoard/shared/LPCPort.hh **** * (at your option) any later version.
   8:src/MightyBoard/shared/LPCPort.hh **** *
   9:src/MightyBoard/shared/LPCPort.hh **** * This program is distributed in the hope that it will be useful,
  10:src/MightyBoard/shared/LPCPort.hh **** * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:src/MightyBoard/shared/LPCPort.hh **** * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:src/MightyBoard/shared/LPCPort.hh **** * GNU General Public License for more details.
  13:src/MightyBoard/shared/LPCPort.hh **** *
  14:src/MightyBoard/shared/LPCPort.hh **** * You should have received a copy of the GNU General Public License
  15:src/MightyBoard/shared/LPCPort.hh **** * along with this program.  If not, see <http://www.gnu.org/licenses/>
  16:src/MightyBoard/shared/LPCPort.hh **** */
  17:src/MightyBoard/shared/LPCPort.hh **** 
  18:src/MightyBoard/shared/LPCPort.hh **** #ifndef SHARED_AVR_PORT_HH_
  19:src/MightyBoard/shared/LPCPort.hh **** #define SHARED_AVR_PORT_HH_
  20:src/MightyBoard/shared/LPCPort.hh **** 
  21:src/MightyBoard/shared/LPCPort.hh **** #define __STDC_LIMIT_MACROS
  22:src/MightyBoard/shared/LPCPort.hh **** //#include <stdint.h>
  23:src/MightyBoard/shared/LPCPort.hh **** //#include <util/atomic.h>
  24:src/MightyBoard/shared/LPCPort.hh **** 
  25:src/MightyBoard/shared/LPCPort.hh **** extern "C" {
  26:src/MightyBoard/shared/LPCPort.hh **** 	#include "lpc_types.h"
  27:src/MightyBoard/shared/LPCPort.hh **** 	#include "lpc17xx_gpio.h"
  28:src/MightyBoard/shared/LPCPort.hh **** }
  29:src/MightyBoard/shared/LPCPort.hh **** 
  30:src/MightyBoard/shared/LPCPort.hh **** 
  31:src/MightyBoard/shared/LPCPort.hh **** #define NULL_PORT 0xff
  32:src/MightyBoard/shared/LPCPort.hh **** 
  33:src/MightyBoard/shared/LPCPort.hh **** class LPCPort {
  34:src/MightyBoard/shared/LPCPort.hh **** private:
  35:src/MightyBoard/shared/LPCPort.hh **** 	const uint8_t port_base;
  36:src/MightyBoard/shared/LPCPort.hh **** 	friend class Pin;
  37:src/MightyBoard/shared/LPCPort.hh **** public:
  38:src/MightyBoard/shared/LPCPort.hh **** 	LPCPort();
  39:src/MightyBoard/shared/LPCPort.hh **** 	LPCPort(uint8_t port_base_in);
  40:src/MightyBoard/shared/LPCPort.hh **** 	bool isNull() const;
  41:src/MightyBoard/shared/LPCPort.hh **** 	void setPinDirectionOut(uint8_t pin_index) const;
  42:src/MightyBoard/shared/LPCPort.hh **** 	void setPinDirectionIn(uint8_t pin_index) const;
  43:src/MightyBoard/shared/LPCPort.hh **** 	bool getPin(uint8_t pin_index) const;
  44:src/MightyBoard/shared/LPCPort.hh **** 	void setPinOn(uint8_t pin_index) const;
  45:src/MightyBoard/shared/LPCPort.hh **** 	void setPinOff(uint8_t pin_index) const;
  46:src/MightyBoard/shared/LPCPort.hh **** };
  47:src/MightyBoard/shared/LPCPort.hh **** 
  48:src/MightyBoard/shared/LPCPort.hh **** 
  49:src/MightyBoard/shared/LPCPort.hh **** const LPCPort Port0(0);
 336              	 .loc 3 49 0
 337 0002 40F20000 	 movw r0,#:lower16:.LANCHOR2
 338 0006 C0F20000 	 movt r0,#:upper16:.LANCHOR2
 339 000a 4FF00001 	 mov r1,#0
 340 000e FFF7FEFF 	 bl _ZN7LPCPortC1Eh
  50:src/MightyBoard/shared/LPCPort.hh **** const LPCPort Port1(1);
 341              	 .loc 3 50 0
 342 0012 40F20000 	 movw r0,#:lower16:.LANCHOR3
 343 0016 C0F20000 	 movt r0,#:upper16:.LANCHOR3
 344 001a 4FF00101 	 mov r1,#1
 345 001e FFF7FEFF 	 bl _ZN7LPCPortC1Eh
  51:src/MightyBoard/shared/LPCPort.hh **** const LPCPort Port2(2);
 346              	 .loc 3 51 0
 347 0022 40F20000 	 movw r0,#:lower16:.LANCHOR4
 348 0026 C0F20000 	 movt r0,#:upper16:.LANCHOR4
 349 002a 4FF00201 	 mov r1,#2
 350 002e FFF7FEFF 	 bl _ZN7LPCPortC1Eh
  52:src/MightyBoard/shared/LPCPort.hh **** const LPCPort Port3(3);
 351              	 .loc 3 52 0
 352 0032 40F20000 	 movw r0,#:lower16:.LANCHOR5
 353 0036 C0F20000 	 movt r0,#:upper16:.LANCHOR5
 354 003a 4FF00301 	 mov r1,#3
 355 003e FFF7FEFF 	 bl _ZN7LPCPortC1Eh
  53:src/MightyBoard/shared/LPCPort.hh **** const LPCPort Port4(4);
 356              	 .loc 3 53 0
 357 0042 40F20000 	 movw r0,#:lower16:.LANCHOR6
 358 0046 C0F20000 	 movt r0,#:upper16:.LANCHOR6
 359 004a 4FF00401 	 mov r1,#4
 360 004e FFF7FEFF 	 bl _ZN7LPCPortC1Eh
  54:src/MightyBoard/shared/LPCPort.hh **** 
  55:src/MightyBoard/shared/LPCPort.hh **** const LPCPort NullPort(0xff);
 361              	 .loc 3 55 0
 362 0052 40F20000 	 movw r0,#:lower16:.LANCHOR7
 363 0056 C0F20000 	 movt r0,#:upper16:.LANCHOR7
 364 005a 4FF0FF01 	 mov r1,#255
 365 005e FFF7FEFF 	 bl _ZN7LPCPortC1Eh
 366              	.LBE19:
 367              	.LBE18:
 368              	 .loc 1 212 0
 369 0062 08BD     	 pop {r3,pc}
 370              	 .cfi_endproc
 371              	.LFE59:
 373              	 .section .init_array,"aw",%init_array
 374              	 .align 2
 375 0000 00000000 	 .word _GLOBAL__sub_I_adc_destination(target1)
 376              	 .global adc_finished
 377              	 .global adc_destination
 378              	 .section .bss.adc_finished,"aw",%nobits
 379              	 .align 2
 380              	 .set .LANCHOR0,.+0
 383              	adc_finished:
 384 0000 00000000 	 .space 4
 385              	 .section .bss._ZL5Port0,"aw",%nobits
 386              	 .align 2
 387              	 .set .LANCHOR2,.+0
 390              	_ZL5Port0:
 391 0000 00       	 .space 1
 392 0001 000000   	 .section .bss._ZL5Port1,"aw",%nobits
 393              	 .align 2
 394              	 .set .LANCHOR3,.+0
 397              	_ZL5Port1:
 398 0000 00       	 .space 1
 399 0001 000000   	 .section .bss._ZL5Port2,"aw",%nobits
 400              	 .align 2
 401              	 .set .LANCHOR4,.+0
 404              	_ZL5Port2:
 405 0000 00       	 .space 1
 406 0001 000000   	 .section .bss._ZL5Port3,"aw",%nobits
 407              	 .align 2
 408              	 .set .LANCHOR5,.+0
 411              	_ZL5Port3:
 412 0000 00       	 .space 1
 413 0001 000000   	 .section .bss._ZL5Port4,"aw",%nobits
 414              	 .align 2
 415              	 .set .LANCHOR6,.+0
 418              	_ZL5Port4:
 419 0000 00       	 .space 1
 420 0001 000000   	 .section .bss.adc_destination,"aw",%nobits
 421              	 .align 2
 422              	 .set .LANCHOR1,.+0
 425              	adc_destination:
 426 0000 00000000 	 .space 4
 427              	 .section .rodata.str1.4,"aMS",%progbits,1
 428              	 .align 2
 429              	.LC0:
 430 0000 696E6974 	 .ascii "initAnalogPin pin:%d (%s:%d)\012\000"
 430      416E616C 
 430      6F675069 
 430      6E207069 
 430      6E3A2564 
 431 001e 0000     	 .space 2
 432              	.LC1:
 433 0020 7372632F 	 .ascii "src/MightyBoard/shared/AnalogPin.cc\000"
 433      4D696768 
 433      7479426F 
 433      6172642F 
 433      73686172 
 434              	.LC2:
 435 0044 70696E2D 	 .ascii "pin-23:%d (%s:%d)\012\000"
 435      32333A25 
 435      64202825 
 435      733A2564 
 435      290A00
 436 0057 00       	 .section .bss._ZL8NullPort,"aw",%nobits
 437              	 .align 2
 438              	 .set .LANCHOR7,.+0
 441              	_ZL8NullPort:
 442 0000 00       	 .space 1
 443 0001 000000   	 .text
 444              	.Letext0:
 445              	 .file 4 "c:\\program files\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/arm-none-eabi/4.6.3/../../../../arm-none-eabi/include/stdint.h"
 446              	 .file 5 "src/MightyBoard/Motherboard/lib/include/lpc_types.h"
 447              	 .file 6 "src/MightyBoard/Motherboard/system/LPC17xx.h"
 448              	 .file 7 "src/MightyBoard/Motherboard/lib/include/lpc17xx_adc.h"
 449              	 .file 8 "src/MightyBoard/Motherboard/lib/include/lpc17xx_pinsel.h"
DEFINED SYMBOLS
                            *ABS*:00000000 AnalogPin.cc
    {standard input}:19     .text._Z13initAnalogPinh:00000000 $t
    {standard input}:24     .text._Z13initAnalogPinh:00000000 _Z13initAnalogPinh
    {standard input}:429    .rodata.str1.4:00000000 .LC0
    {standard input}:434    .rodata.str1.4:00000044 .LC2
    {standard input}:103    .text._Z13initAnalogPinh:00000084 $d
    {standard input}:108    .text._Z15startAnalogReadhPVsPVb:00000000 $t
    {standard input}:113    .text._Z15startAnalogReadhPVsPVb:00000000 _Z15startAnalogReadhPVsPVb
    {standard input}:380    .bss.adc_finished:00000000 .LANCHOR0
    {standard input}:422    .bss.adc_destination:00000000 .LANCHOR1
    {standard input}:190    .text.ADC_IRQHandler:00000000 $t
    {standard input}:195    .text.ADC_IRQHandler:00000000 ADC_IRQHandler
    {standard input}:317    .text._GLOBAL__sub_I_adc_destination:00000000 $t
    {standard input}:321    .text._GLOBAL__sub_I_adc_destination:00000000 _GLOBAL__sub_I_adc_destination
    {standard input}:387    .bss._ZL5Port0:00000000 .LANCHOR2
    {standard input}:394    .bss._ZL5Port1:00000000 .LANCHOR3
    {standard input}:401    .bss._ZL5Port2:00000000 .LANCHOR4
    {standard input}:408    .bss._ZL5Port3:00000000 .LANCHOR5
    {standard input}:415    .bss._ZL5Port4:00000000 .LANCHOR6
    {standard input}:438    .bss._ZL8NullPort:00000000 .LANCHOR7
    {standard input}:374    .init_array:00000000 $d
    {standard input}:383    .bss.adc_finished:00000000 adc_finished
    {standard input}:425    .bss.adc_destination:00000000 adc_destination
    {standard input}:379    .bss.adc_finished:00000000 $d
    {standard input}:386    .bss._ZL5Port0:00000000 $d
    {standard input}:390    .bss._ZL5Port0:00000000 _ZL5Port0
    {standard input}:393    .bss._ZL5Port1:00000000 $d
    {standard input}:397    .bss._ZL5Port1:00000000 _ZL5Port1
    {standard input}:400    .bss._ZL5Port2:00000000 $d
    {standard input}:404    .bss._ZL5Port2:00000000 _ZL5Port2
    {standard input}:407    .bss._ZL5Port3:00000000 $d
    {standard input}:411    .bss._ZL5Port3:00000000 _ZL5Port3
    {standard input}:414    .bss._ZL5Port4:00000000 $d
    {standard input}:418    .bss._ZL5Port4:00000000 _ZL5Port4
    {standard input}:421    .bss.adc_destination:00000000 $d
    {standard input}:428    .rodata.str1.4:00000000 $d
    {standard input}:432    .rodata.str1.4:00000020 .LC1
    {standard input}:437    .bss._ZL8NullPort:00000000 $d
    {standard input}:441    .bss._ZL8NullPort:00000000 _ZL8NullPort
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
xprintf
PINSEL_ConfigPin
GPIO_SetDir
ADC_Init
ADC_IntConfig
ADC_ChannelCmd
ADC_StartCmd
ADC_ChannelGetStatus
ADC_ChannelGetData
_ZN7LPCPortC1Eh
