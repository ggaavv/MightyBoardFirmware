   1              	 .syntax unified
   2              	 .cpu cortex-m3
   3              	 .fpu softvfp
   4              	 .eabi_attribute 20,1
   5              	 .eabi_attribute 21,1
   6              	 .eabi_attribute 23,3
   7              	 .eabi_attribute 24,1
   8              	 .eabi_attribute 25,1
   9              	 .eabi_attribute 26,1
  10              	 .eabi_attribute 30,1
  11              	 .eabi_attribute 34,1
  12              	 .eabi_attribute 18,4
  13              	 .thumb
  14              	 .file "DigiPots.cc"
  15              	 .text
  16              	.Ltext0:
  17              	 .cfi_sections .debug_frame
  18              	 .section .text._ZN8DigiPotsC2ERK3PinRKt,"ax",%progbits
  19              	 .align 2
  20              	 .global _ZN8DigiPotsC2ERK3PinRKt
  21              	 .thumb
  22              	 .thumb_func
  24              	_ZN8DigiPotsC2ERK3PinRKt:
  25              	.LFB64:
  26              	 .file 1 "src/MightyBoard/shared/DigiPots.cc"
   1:src/MightyBoard/shared/DigiPots.cc **** /*
   2:src/MightyBoard/shared/DigiPots.cc ****  * Copyright 2010 by Adam Mayer	 <adam@makerbot.com>
   3:src/MightyBoard/shared/DigiPots.cc ****  *
   4:src/MightyBoard/shared/DigiPots.cc ****  * This program is free software: you can redistribute it and/or modify
   5:src/MightyBoard/shared/DigiPots.cc ****  * it under the terms of the GNU General Public License as published by
   6:src/MightyBoard/shared/DigiPots.cc ****  * the Free Software Foundation, either version 3 of the License, or
   7:src/MightyBoard/shared/DigiPots.cc ****  * (at your option) any later version.
   8:src/MightyBoard/shared/DigiPots.cc ****  *
   9:src/MightyBoard/shared/DigiPots.cc ****  * This program is distributed in the hope that it will be useful,
  10:src/MightyBoard/shared/DigiPots.cc ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:src/MightyBoard/shared/DigiPots.cc ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:src/MightyBoard/shared/DigiPots.cc ****  * GNU General Public License for more details.
  13:src/MightyBoard/shared/DigiPots.cc ****  *
  14:src/MightyBoard/shared/DigiPots.cc ****  * You should have received a copy of the GNU General Public License
  15:src/MightyBoard/shared/DigiPots.cc ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>
  16:src/MightyBoard/shared/DigiPots.cc ****  */
  17:src/MightyBoard/shared/DigiPots.cc **** 
  18:src/MightyBoard/shared/DigiPots.cc **** #include "Eeprom.hh"
  19:src/MightyBoard/shared/DigiPots.cc **** #include "EepromMap.hh"
  20:src/MightyBoard/shared/DigiPots.cc **** #include "Configuration.hh"
  21:src/MightyBoard/shared/DigiPots.cc **** #include "SoftI2cManager.hh"
  22:src/MightyBoard/shared/DigiPots.cc **** #include "DigiPots.hh"
  23:src/MightyBoard/shared/DigiPots.cc **** 
  24:src/MightyBoard/shared/DigiPots.cc **** DigiPots::DigiPots(const Pin& pot,
  27              	 .loc 1 24 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	.LVL0:
  32 0000 38B5     	 push {r3,r4,r5,lr}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 16
  35              	 .cfi_offset 14,-4
  36              	 .cfi_offset 5,-8
  37              	 .cfi_offset 4,-12
  38              	 .cfi_offset 3,-16
  39 0002 0446     	 mov r4,r0
  40 0004 1546     	 mov r5,r2
  41              	.LBB8:
  25:src/MightyBoard/shared/DigiPots.cc ****                                    const uint16_t &eeprom_base_in) :
  26:src/MightyBoard/shared/DigiPots.cc ****     
  27:src/MightyBoard/shared/DigiPots.cc ****     pot_pin(pot),
  28:src/MightyBoard/shared/DigiPots.cc ****     eeprom_base(eeprom_base_in) {
  42              	 .loc 1 28 0
  43 0006 FFF7FEFF 	 bl _ZN3PinC1ERKS_
  44              	.LVL1:
  45 000a 2D88     	 ldrh r5,[r5,#0]
  46              	.LVL2:
  47 000c E580     	 strh r5,[r4,#6]
  48              	.LBE8:
  29:src/MightyBoard/shared/DigiPots.cc **** }
  49              	 .loc 1 29 0
  50 000e 2046     	 mov r0,r4
  51 0010 38BD     	 pop {r3,r4,r5,pc}
  52              	 .cfi_endproc
  53              	.LFE64:
  55 0012 00BF     	 .section .text._ZN8DigiPots9resetPotsEv,"ax",%progbits
  56              	 .align 2
  57              	 .global _ZN8DigiPots9resetPotsEv
  58              	 .thumb
  59              	 .thumb_func
  61              	_ZN8DigiPots9resetPotsEv:
  62              	.LFB67:
  30:src/MightyBoard/shared/DigiPots.cc **** 
  31:src/MightyBoard/shared/DigiPots.cc **** void DigiPots::init(const uint8_t idx) {
  32:src/MightyBoard/shared/DigiPots.cc **** 	
  33:src/MightyBoard/shared/DigiPots.cc **** 	eeprom_pot_offset = idx;
  34:src/MightyBoard/shared/DigiPots.cc ****     resetPots();
  35:src/MightyBoard/shared/DigiPots.cc ****  
  36:src/MightyBoard/shared/DigiPots.cc **** }
  37:src/MightyBoard/shared/DigiPots.cc **** 
  38:src/MightyBoard/shared/DigiPots.cc **** void DigiPots::resetPots()
  39:src/MightyBoard/shared/DigiPots.cc **** {
  63              	 .loc 1 39 0
  64              	 .cfi_startproc
  65              	 
  66              	 
  67              	.LVL3:
  68 0000 F0B5     	 push {r4,r5,r6,r7,lr}
  69              	.LCFI1:
  70              	 .cfi_def_cfa_offset 20
  71              	 .cfi_offset 14,-4
  72              	 .cfi_offset 7,-8
  73              	 .cfi_offset 6,-12
  74              	 .cfi_offset 5,-16
  75              	 .cfi_offset 4,-20
  76 0002 89B0     	 sub sp,sp,#36
  77              	.LCFI2:
  78              	 .cfi_def_cfa_offset 56
  79 0004 0746     	 mov r7,r0
  80              	.LVL4:
  81              	 .file 2 "src/MightyBoard/Motherboard/SoftI2cManager.hh"
   1:src/MightyBoard/Motherboard/SoftI2cManager.hh **** /* Copyright 2011 by Alison Leonard alison@makerbot.com
   2:src/MightyBoard/Motherboard/SoftI2cManager.hh ****  * adapted for avr and MCP4018 digital i2c pot from:
   3:src/MightyBoard/Motherboard/SoftI2cManager.hh ****  * Arduino SoftI2cMaster Library
   4:src/MightyBoard/Motherboard/SoftI2cManager.hh ****  * Copyright (C) 2009 by William Greiman
   5:src/MightyBoard/Motherboard/SoftI2cManager.hh ****  *
   6:src/MightyBoard/Motherboard/SoftI2cManager.hh ****  *
   7:src/MightyBoard/Motherboard/SoftI2cManager.hh ****  * This program is free software: you can redistribute it and/or modify
   8:src/MightyBoard/Motherboard/SoftI2cManager.hh ****  * it under the terms of the GNU General Public License as published by
   9:src/MightyBoard/Motherboard/SoftI2cManager.hh ****  * the Free Software Foundation, either version 3 of the License, or
  10:src/MightyBoard/Motherboard/SoftI2cManager.hh ****  * (at your option) any later version.
  11:src/MightyBoard/Motherboard/SoftI2cManager.hh ****  *
  12:src/MightyBoard/Motherboard/SoftI2cManager.hh ****  * This program is distributed in the hope that it will be useful,
  13:src/MightyBoard/Motherboard/SoftI2cManager.hh ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:src/MightyBoard/Motherboard/SoftI2cManager.hh ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:src/MightyBoard/Motherboard/SoftI2cManager.hh ****  * GNU General Public License for more details.
  16:src/MightyBoard/Motherboard/SoftI2cManager.hh ****  *
  17:src/MightyBoard/Motherboard/SoftI2cManager.hh ****  * You should have received a copy of the GNU General Public License
  18:src/MightyBoard/Motherboard/SoftI2cManager.hh ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>
  19:src/MightyBoard/Motherboard/SoftI2cManager.hh ****  */
  20:src/MightyBoard/Motherboard/SoftI2cManager.hh **** 
  21:src/MightyBoard/Motherboard/SoftI2cManager.hh **** #ifndef SOFT_I2C_MANAGER
  22:src/MightyBoard/Motherboard/SoftI2cManager.hh **** #define SOFT_I2C_MANAGER
  23:src/MightyBoard/Motherboard/SoftI2cManager.hh **** 
  24:src/MightyBoard/Motherboard/SoftI2cManager.hh **** #include "Pin.hh"
  25:src/MightyBoard/Motherboard/SoftI2cManager.hh **** #include "Configuration.hh"
  26:src/MightyBoard/Motherboard/SoftI2cManager.hh **** 
  27:src/MightyBoard/Motherboard/SoftI2cManager.hh **** // delay used to tweek signals
  28:src/MightyBoard/Motherboard/SoftI2cManager.hh **** #define I2C_DELAY_USEC 4
  29:src/MightyBoard/Motherboard/SoftI2cManager.hh **** 
  30:src/MightyBoard/Motherboard/SoftI2cManager.hh **** // R/W direction bit to OR with address for start or restart
  31:src/MightyBoard/Motherboard/SoftI2cManager.hh **** #define I2C_READ 1
  32:src/MightyBoard/Motherboard/SoftI2cManager.hh **** #define I2C_WRITE 0
  33:src/MightyBoard/Motherboard/SoftI2cManager.hh **** 
  34:src/MightyBoard/Motherboard/SoftI2cManager.hh **** class SoftI2cManager {
  82              	 .loc 2 34 0
  83 0006 01AC     	 add r4,sp,#4
  84              	 .loc 1 39 0
  85 0008 40F20005 	 movw r5,#:lower16:_ZN14SoftI2cManager10i2cManagerE
  86 000c C0F20005 	 movt r5,#:upper16:_ZN14SoftI2cManager10i2cManagerE
  38:src/MightyBoard/shared/DigiPots.cc **** void DigiPots::resetPots()
  87              	 .loc 1 38 0
  88 0010 06AE     	 add r6,sp,#24
  89              	.LVL5:
  90              	.L4:
  91              	.LBB13:
  92              	.LBB14:
  93              	.LBB15:
  94              	.LBB16:
  95              	 .loc 2 34 0
  96 0012 2046     	 mov r0,r4
  97 0014 2946     	 mov r1,r5
  98 0016 FFF7FEFF 	 bl _ZN3PinC1ERKS_
  99 001a 04F10504 	 add r4,r4,#5
 100 001e 05F10505 	 add r5,r5,#5
 101 0022 B442     	 cmp r4,r6
 102 0024 F5D1     	 bne .L4
 103 0026 104C     	 ldr r4,.L7
 104 0028 06A8     	 add r0,sp,#24
 105 002a 2146     	 mov r1,r4
 106 002c FFF7FEFF 	 bl _ZN3PinC1ERKS_
 107 0030 6379     	 ldrb r3,[r4,#5]
 108 0032 8DF81D30 	 strb r3,[sp,#29]
 109              	.LBE16:
 110              	.LBE15:
 111              	.LBE14:
  40:src/MightyBoard/shared/DigiPots.cc ****     SoftI2cManager i2cPots = SoftI2cManager::getI2cManager();
  41:src/MightyBoard/shared/DigiPots.cc ****     i2cPots.start(0b01011110 | I2C_WRITE, pot_pin);
 112              	 .loc 1 41 0
 113 0036 01A8     	 add r0,sp,#4
 114 0038 4FF05E01 	 mov r1,#94
 115 003c 3A46     	 mov r2,r7
 116 003e FFF7FEFF 	 bl _ZN14SoftI2cManager5startEhRK3Pin
  42:src/MightyBoard/shared/DigiPots.cc ****     i2cPots.write(eeprom::getEeprom8(eeprom_base + eeprom_pot_offset, 0), pot_pin);
 117              	 .loc 1 42 0
 118 0042 3889     	 ldrh r0,[r7,#8]
 119 0044 FB88     	 ldrh r3,[r7,#6]
 120 0046 C018     	 adds r0,r0,r3
 121 0048 80B2     	 uxth r0,r0
 122 004a 4FF00001 	 mov r1,#0
 123 004e FFF7FEFF 	 bl _ZN6eeprom10getEeprom8Eth
 124 0052 0146     	 mov r1,r0
 125 0054 01A8     	 add r0,sp,#4
 126 0056 3A46     	 mov r2,r7
 127 0058 FFF7FEFF 	 bl _ZN14SoftI2cManager5writeEhRK3Pin
  43:src/MightyBoard/shared/DigiPots.cc ****     i2cPots.stop();
 128              	 .loc 1 43 0
 129 005c 01A8     	 add r0,sp,#4
 130 005e FFF7FEFF 	 bl _ZN14SoftI2cManager4stopEv
 131              	.LBE13:
  44:src/MightyBoard/shared/DigiPots.cc **** }
 132              	 .loc 1 44 0
 133 0062 09B0     	 add sp,sp,#36
 134 0064 F0BD     	 pop {r4,r5,r6,r7,pc}
 135              	.L8:
 136 0066 00BF     	 .align 2
 137              	.L7:
 138 0068 14000000 	 .word _ZN14SoftI2cManager10i2cManagerE+20
 139              	 .cfi_endproc
 140              	.LFE67:
 142              	 .section .text._ZN8DigiPots4initEh,"ax",%progbits
 143              	 .align 2
 144              	 .global _ZN8DigiPots4initEh
 145              	 .thumb
 146              	 .thumb_func
 148              	_ZN8DigiPots4initEh:
 149              	.LFB66:
  31:src/MightyBoard/shared/DigiPots.cc **** void DigiPots::init(const uint8_t idx) {
 150              	 .loc 1 31 0
 151              	 .cfi_startproc
 152              	 
 153              	 
 154              	.LVL6:
 155 0000 08B5     	 push {r3,lr}
 156              	.LCFI3:
 157              	 .cfi_def_cfa_offset 8
 158              	 .cfi_offset 14,-4
 159              	 .cfi_offset 3,-8
  33:src/MightyBoard/shared/DigiPots.cc **** 	eeprom_pot_offset = idx;
 160              	 .loc 1 33 0
 161 0002 0181     	 strh r1,[r0,#8]
  34:src/MightyBoard/shared/DigiPots.cc ****     resetPots();
 162              	 .loc 1 34 0
 163 0004 FFF7FEFF 	 bl _ZN8DigiPots9resetPotsEv
 164              	.LVL7:
  36:src/MightyBoard/shared/DigiPots.cc **** }
 165              	 .loc 1 36 0
 166 0008 08BD     	 pop {r3,pc}
 167              	 .cfi_endproc
 168              	.LFE66:
 170 000a 00BF     	 .section .text._ZN8DigiPots11setPotValueEh,"ax",%progbits
 171              	 .align 2
 172              	 .global _ZN8DigiPots11setPotValueEh
 173              	 .thumb
 174              	 .thumb_func
 176              	_ZN8DigiPots11setPotValueEh:
 177              	.LFB71:
  45:src/MightyBoard/shared/DigiPots.cc **** 
  46:src/MightyBoard/shared/DigiPots.cc **** void DigiPots::setPotValue(const uint8_t val)
  47:src/MightyBoard/shared/DigiPots.cc **** {
 178              	 .loc 1 47 0
 179              	 .cfi_startproc
 180              	 
 181              	 
 182              	.LVL8:
 183 0000 2DE9F041 	 push {r4,r5,r6,r7,r8,lr}
 184              	.LCFI4:
 185              	 .cfi_def_cfa_offset 24
 186              	 .cfi_offset 14,-4
 187              	 .cfi_offset 8,-8
 188              	 .cfi_offset 7,-12
 189              	 .cfi_offset 6,-16
 190              	 .cfi_offset 5,-20
 191              	 .cfi_offset 4,-24
 192 0004 88B0     	 sub sp,sp,#32
 193              	.LCFI5:
 194              	 .cfi_def_cfa_offset 56
 195 0006 0746     	 mov r7,r0
 196 0008 8846     	 mov r8,r1
 197              	.LVL9:
 198              	 .loc 2 34 0
 199 000a 01AC     	 add r4,sp,#4
 200              	 .loc 1 47 0
 201 000c 40F20005 	 movw r5,#:lower16:_ZN14SoftI2cManager10i2cManagerE
 202 0010 C0F20005 	 movt r5,#:upper16:_ZN14SoftI2cManager10i2cManagerE
  46:src/MightyBoard/shared/DigiPots.cc **** void DigiPots::setPotValue(const uint8_t val)
 203              	 .loc 1 46 0
 204 0014 06AE     	 add r6,sp,#24
 205              	.LVL10:
 206              	.L11:
 207              	.LBB21:
 208              	.LBB22:
 209              	.LBB23:
 210              	.LBB24:
 211              	 .loc 2 34 0
 212 0016 2046     	 mov r0,r4
 213 0018 2946     	 mov r1,r5
 214 001a FFF7FEFF 	 bl _ZN3PinC1ERKS_
 215 001e 04F10504 	 add r4,r4,#5
 216 0022 05F10505 	 add r5,r5,#5
 217 0026 B442     	 cmp r4,r6
 218 0028 F5D1     	 bne .L11
 219 002a 0E4C     	 ldr r4,.L14
 220 002c 06A8     	 add r0,sp,#24
 221 002e 2146     	 mov r1,r4
 222 0030 FFF7FEFF 	 bl _ZN3PinC1ERKS_
 223 0034 6379     	 ldrb r3,[r4,#5]
 224 0036 8DF81D30 	 strb r3,[sp,#29]
 225              	.LBE24:
 226              	.LBE23:
 227              	.LBE22:
  48:src/MightyBoard/shared/DigiPots.cc ****     SoftI2cManager i2cPots = SoftI2cManager::getI2cManager();
  49:src/MightyBoard/shared/DigiPots.cc ****     i2cPots.start(0b01011110 | I2C_WRITE, pot_pin);
 228              	 .loc 1 49 0
 229 003a 01A8     	 add r0,sp,#4
 230 003c 4FF05E01 	 mov r1,#94
 231 0040 3A46     	 mov r2,r7
 232 0042 FFF7FEFF 	 bl _ZN14SoftI2cManager5startEhRK3Pin
  50:src/MightyBoard/shared/DigiPots.cc ****     i2cPots.write(val > DIGI_POT_MAX ? DIGI_POT_MAX : val, pot_pin);
 233              	 .loc 1 50 0
 234 0046 01A8     	 add r0,sp,#4
 235 0048 B8F1760F 	 cmp r8,#118
 236 004c 34BF     	 ite cc
 237 004e 4146     	 movcc r1,r8
 238 0050 7621     	 movcs r1,#118
 239 0052 3A46     	 mov r2,r7
 240 0054 FFF7FEFF 	 bl _ZN14SoftI2cManager5writeEhRK3Pin
  51:src/MightyBoard/shared/DigiPots.cc ****     i2cPots.stop(); 
 241              	 .loc 1 51 0
 242 0058 01A8     	 add r0,sp,#4
 243 005a FFF7FEFF 	 bl _ZN14SoftI2cManager4stopEv
 244              	.LBE21:
  52:src/MightyBoard/shared/DigiPots.cc **** }
 245              	 .loc 1 52 0
 246 005e 08B0     	 add sp,sp,#32
 247 0060 BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 248              	.L15:
 249              	 .align 2
 250              	.L14:
 251 0064 14000000 	 .word _ZN14SoftI2cManager10i2cManagerE+20
 252              	 .cfi_endproc
 253              	.LFE71:
 255              	 .section .text._GLOBAL__sub_I__ZN8DigiPotsC2ERK3PinRKt,"ax",%progbits
 256              	 .align 2
 257              	 .thumb
 258              	 .thumb_func
 260              	_GLOBAL__sub_I__ZN8DigiPotsC2ERK3PinRKt:
 261              	.LFB73:
 262              	 .loc 1 52 0
 263              	 .cfi_startproc
 264              	 
 265              	 
 266 0000 10B5     	 push {r4,lr}
 267              	.LCFI6:
 268              	 .cfi_def_cfa_offset 8
 269              	 .cfi_offset 14,-4
 270              	 .cfi_offset 4,-8
 271              	.LVL11:
 272              	.LBB27:
 273              	.LBB28:
 274              	 .file 3 "src/MightyBoard/shared/LPCPort.hh"
   1:src/MightyBoard/shared/LPCPort.hh **** /*
   2:src/MightyBoard/shared/LPCPort.hh **** * Copyright 2010 by Adam Mayer	 <adam@makerbot.com>
   3:src/MightyBoard/shared/LPCPort.hh **** *
   4:src/MightyBoard/shared/LPCPort.hh **** * This program is free software: you can redistribute it and/or modify
   5:src/MightyBoard/shared/LPCPort.hh **** * it under the terms of the GNU General Public License as published by
   6:src/MightyBoard/shared/LPCPort.hh **** * the Free Software Foundation, either version 3 of the License, or
   7:src/MightyBoard/shared/LPCPort.hh **** * (at your option) any later version.
   8:src/MightyBoard/shared/LPCPort.hh **** *
   9:src/MightyBoard/shared/LPCPort.hh **** * This program is distributed in the hope that it will be useful,
  10:src/MightyBoard/shared/LPCPort.hh **** * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:src/MightyBoard/shared/LPCPort.hh **** * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:src/MightyBoard/shared/LPCPort.hh **** * GNU General Public License for more details.
  13:src/MightyBoard/shared/LPCPort.hh **** *
  14:src/MightyBoard/shared/LPCPort.hh **** * You should have received a copy of the GNU General Public License
  15:src/MightyBoard/shared/LPCPort.hh **** * along with this program.  If not, see <http://www.gnu.org/licenses/>
  16:src/MightyBoard/shared/LPCPort.hh **** */
  17:src/MightyBoard/shared/LPCPort.hh **** 
  18:src/MightyBoard/shared/LPCPort.hh **** #ifndef SHARED_AVR_PORT_HH_
  19:src/MightyBoard/shared/LPCPort.hh **** #define SHARED_AVR_PORT_HH_
  20:src/MightyBoard/shared/LPCPort.hh **** 
  21:src/MightyBoard/shared/LPCPort.hh **** #define __STDC_LIMIT_MACROS
  22:src/MightyBoard/shared/LPCPort.hh **** //#include <stdint.h>
  23:src/MightyBoard/shared/LPCPort.hh **** //#include <util/atomic.h>
  24:src/MightyBoard/shared/LPCPort.hh **** 
  25:src/MightyBoard/shared/LPCPort.hh **** extern "C" {
  26:src/MightyBoard/shared/LPCPort.hh **** 	#include "lpc_types.h"
  27:src/MightyBoard/shared/LPCPort.hh **** 	#include "lpc17xx_gpio.h"
  28:src/MightyBoard/shared/LPCPort.hh **** }
  29:src/MightyBoard/shared/LPCPort.hh **** 
  30:src/MightyBoard/shared/LPCPort.hh **** 
  31:src/MightyBoard/shared/LPCPort.hh **** #define NULL_PORT 0xff
  32:src/MightyBoard/shared/LPCPort.hh **** 
  33:src/MightyBoard/shared/LPCPort.hh **** class LPCPort {
  34:src/MightyBoard/shared/LPCPort.hh **** private:
  35:src/MightyBoard/shared/LPCPort.hh **** 	const uint8_t port_base;
  36:src/MightyBoard/shared/LPCPort.hh **** 	friend class Pin;
  37:src/MightyBoard/shared/LPCPort.hh **** public:
  38:src/MightyBoard/shared/LPCPort.hh **** 	LPCPort();
  39:src/MightyBoard/shared/LPCPort.hh **** 	LPCPort(uint8_t port_base_in);
  40:src/MightyBoard/shared/LPCPort.hh **** 	bool isNull() const;
  41:src/MightyBoard/shared/LPCPort.hh **** 	void setPinDirectionOut(uint8_t pin_index) const;
  42:src/MightyBoard/shared/LPCPort.hh **** 	void setPinDirectionIn(uint8_t pin_index) const;
  43:src/MightyBoard/shared/LPCPort.hh **** 	bool getPin(uint8_t pin_index) const;
  44:src/MightyBoard/shared/LPCPort.hh **** 	void setPinOn(uint8_t pin_index) const;
  45:src/MightyBoard/shared/LPCPort.hh **** 	void setPinOff(uint8_t pin_index) const;
  46:src/MightyBoard/shared/LPCPort.hh **** };
  47:src/MightyBoard/shared/LPCPort.hh **** 
  48:src/MightyBoard/shared/LPCPort.hh **** 
  49:src/MightyBoard/shared/LPCPort.hh **** const LPCPort Port0(0);
 275              	 .loc 3 49 0
 276 0002 40F20000 	 movw r0,#:lower16:.LANCHOR0
 277 0006 C0F20000 	 movt r0,#:upper16:.LANCHOR0
 278 000a 4FF00001 	 mov r1,#0
 279 000e FFF7FEFF 	 bl _ZN7LPCPortC1Eh
  50:src/MightyBoard/shared/LPCPort.hh **** const LPCPort Port1(1);
 280              	 .loc 3 50 0
 281 0012 40F20000 	 movw r0,#:lower16:.LANCHOR1
 282 0016 C0F20000 	 movt r0,#:upper16:.LANCHOR1
 283 001a 4FF00101 	 mov r1,#1
 284 001e FFF7FEFF 	 bl _ZN7LPCPortC1Eh
  51:src/MightyBoard/shared/LPCPort.hh **** const LPCPort Port2(2);
 285              	 .loc 3 51 0
 286 0022 40F20000 	 movw r0,#:lower16:.LANCHOR2
 287 0026 C0F20000 	 movt r0,#:upper16:.LANCHOR2
 288 002a 4FF00201 	 mov r1,#2
 289 002e FFF7FEFF 	 bl _ZN7LPCPortC1Eh
  52:src/MightyBoard/shared/LPCPort.hh **** const LPCPort Port3(3);
 290              	 .loc 3 52 0
 291 0032 40F20000 	 movw r0,#:lower16:.LANCHOR3
 292 0036 C0F20000 	 movt r0,#:upper16:.LANCHOR3
 293 003a 4FF00301 	 mov r1,#3
 294 003e FFF7FEFF 	 bl _ZN7LPCPortC1Eh
  53:src/MightyBoard/shared/LPCPort.hh **** const LPCPort Port4(4);
 295              	 .loc 3 53 0
 296 0042 40F20000 	 movw r0,#:lower16:.LANCHOR4
 297 0046 C0F20000 	 movt r0,#:upper16:.LANCHOR4
 298 004a 4FF00401 	 mov r1,#4
 299 004e FFF7FEFF 	 bl _ZN7LPCPortC1Eh
  54:src/MightyBoard/shared/LPCPort.hh **** 
  55:src/MightyBoard/shared/LPCPort.hh **** const LPCPort NullPort(0xff);
 300              	 .loc 3 55 0
 301 0052 40F20004 	 movw r4,#:lower16:.LANCHOR5
 302 0056 C0F20004 	 movt r4,#:upper16:.LANCHOR5
 303 005a 2046     	 mov r0,r4
 304 005c 4FF0FF01 	 mov r1,#255
 305 0060 FFF7FEFF 	 bl _ZN7LPCPortC1Eh
 306              	 .file 4 "src/MightyBoard/shared/Pin.hh"
   1:src/MightyBoard/shared/Pin.hh **** #ifndef PIN_HH
   2:src/MightyBoard/shared/Pin.hh **** #define PIN_HH
   3:src/MightyBoard/shared/Pin.hh **** 
   4:src/MightyBoard/shared/Pin.hh **** #include "LPCPort.hh"
   5:src/MightyBoard/shared/Pin.hh **** #include "Pin.hh"
   6:src/MightyBoard/shared/Pin.hh **** extern "C" {
   7:src/MightyBoard/shared/Pin.hh **** 	#include "lpc17xx_gpio.h"
   8:src/MightyBoard/shared/Pin.hh **** 	#include "lpc17xx_pinsel.h"
   9:src/MightyBoard/shared/Pin.hh **** 	#include "comm.h"
  10:src/MightyBoard/shared/Pin.hh **** }
  11:src/MightyBoard/shared/Pin.hh **** 
  12:src/MightyBoard/shared/Pin.hh **** /// \ingroup HardwareLibraries
  13:src/MightyBoard/shared/Pin.hh **** class Pin {
  14:src/MightyBoard/shared/Pin.hh **** private:
  15:src/MightyBoard/shared/Pin.hh **** 	uint8_t port_base;
  16:src/MightyBoard/shared/Pin.hh **** 	bool is_null;
  17:src/MightyBoard/shared/Pin.hh **** 	uint8_t pin_index;
  18:src/MightyBoard/shared/Pin.hh **** 	uint8_t pin_mask;
  19:src/MightyBoard/shared/Pin.hh **** 	uint8_t pin_mask_inverted;
  20:src/MightyBoard/shared/Pin.hh **** 
  21:src/MightyBoard/shared/Pin.hh **** public:
  22:src/MightyBoard/shared/Pin.hh **** 	Pin();
  23:src/MightyBoard/shared/Pin.hh **** 	Pin(const LPCPort& port_in, uint8_t pin_index_in);
  24:src/MightyBoard/shared/Pin.hh **** 	Pin(const Pin& other_pin);
  25:src/MightyBoard/shared/Pin.hh **** 	bool isNull() const;
  26:src/MightyBoard/shared/Pin.hh **** 	void setDirection(bool out) const;
  27:src/MightyBoard/shared/Pin.hh **** 	bool /*Pin::*/getValue() const {
  28:src/MightyBoard/shared/Pin.hh **** 		if (is_null)
  29:src/MightyBoard/shared/Pin.hh **** 			return false; // null pin is always low ... ?
  30:src/MightyBoard/shared/Pin.hh **** 		return ((uint8_t)(FIO_ReadValue(port_base) & _BV(pin_index))?1:0);
  31:src/MightyBoard/shared/Pin.hh **** //		return (uint8_t)((uint8_t)PINx & (uint8_t)pin_mask) != 0;
  32:src/MightyBoard/shared/Pin.hh **** 	};
  33:src/MightyBoard/shared/Pin.hh **** 
  34:src/MightyBoard/shared/Pin.hh **** 	void /*Pin::*/setValue(bool on) const {
  35:src/MightyBoard/shared/Pin.hh **** 		if (is_null)
  36:src/MightyBoard/shared/Pin.hh **** 		 	return;
  37:src/MightyBoard/shared/Pin.hh **** 		// uint8_t oldSREG = SREG;
  38:src/MightyBoard/shared/Pin.hh **** 
  39:src/MightyBoard/shared/Pin.hh **** //		xprintf("on:%d port_base:%d pi_index:%d" " (%s:%d)\n",on,port_base,pin_index,_F_,_L_);
  40:src/MightyBoard/shared/Pin.hh **** 		// cli();
  41:src/MightyBoard/shared/Pin.hh **** 		if (on) {
  42:src/MightyBoard/shared/Pin.hh **** //			PORTx |= pin_mask;
  43:src/MightyBoard/shared/Pin.hh **** //			xprintf("%x (%s:%d)\n",&GPIO_SetValue,_F_,_L_);
  44:src/MightyBoard/shared/Pin.hh **** 			GPIO_SetValue(port_base, _BV(pin_index));
  45:src/MightyBoard/shared/Pin.hh **** 		} else {
  46:src/MightyBoard/shared/Pin.hh **** //			PORTx &= pin_mask_inverted;
  47:src/MightyBoard/shared/Pin.hh **** //			xprintf("%x (%s:%d)\n",&GPIO_ClearValue,_F_,_L_);
  48:src/MightyBoard/shared/Pin.hh **** 			GPIO_ClearValue(port_base, _BV(pin_index));
  49:src/MightyBoard/shared/Pin.hh **** 		}
  50:src/MightyBoard/shared/Pin.hh **** 		// SREG = oldSREG;
  51:src/MightyBoard/shared/Pin.hh **** 	};
  52:src/MightyBoard/shared/Pin.hh **** 
  53:src/MightyBoard/shared/Pin.hh **** 	void /*Pin::*/setValueOn() const {
  54:src/MightyBoard/shared/Pin.hh **** 		if (is_null)
  55:src/MightyBoard/shared/Pin.hh **** 		 	return;
  56:src/MightyBoard/shared/Pin.hh **** 		// uint8_t oldSREG = SREG;
  57:src/MightyBoard/shared/Pin.hh **** 		// cli();
  58:src/MightyBoard/shared/Pin.hh **** //		PORTx |= pin_mask;
  59:src/MightyBoard/shared/Pin.hh **** 		GPIO_SetValue(port_base, _BV(pin_index));
  60:src/MightyBoard/shared/Pin.hh **** 		// SREG = oldSREG;
  61:src/MightyBoard/shared/Pin.hh **** 	};
  62:src/MightyBoard/shared/Pin.hh **** 
  63:src/MightyBoard/shared/Pin.hh **** 	void /*Pin::*/setValueOff() const {
  64:src/MightyBoard/shared/Pin.hh **** 		// if (is_null)
  65:src/MightyBoard/shared/Pin.hh **** 		// 	return;
  66:src/MightyBoard/shared/Pin.hh **** 		// uint8_t oldSREG = SREG;
  67:src/MightyBoard/shared/Pin.hh **** 		// cli();
  68:src/MightyBoard/shared/Pin.hh **** //		PORTx &= pin_mask_inverted;
  69:src/MightyBoard/shared/Pin.hh **** 		GPIO_ClearValue(port_base, _BV(pin_index));
  70:src/MightyBoard/shared/Pin.hh **** 		// SREG = oldSREG;
  71:src/MightyBoard/shared/Pin.hh **** 	};
  72:src/MightyBoard/shared/Pin.hh **** 	// currently not used:
  73:src/MightyBoard/shared/Pin.hh **** 	//const uint8_t getPinIndex() const { return pin_index; }
  74:src/MightyBoard/shared/Pin.hh **** };
  75:src/MightyBoard/shared/Pin.hh **** 
  76:src/MightyBoard/shared/Pin.hh **** static const Pin NullPin(NullPort, 0);
 307              	 .loc 4 76 0
 308 0064 40F20000 	 movw r0,#:lower16:.LANCHOR6
 309 0068 C0F20000 	 movt r0,#:upper16:.LANCHOR6
 310 006c 2146     	 mov r1,r4
 311 006e 4FF00002 	 mov r2,#0
 312 0072 FFF7FEFF 	 bl _ZN3PinC1ERK7LPCPorth
 313              	.LBE28:
 314              	.LBE27:
 315              	 .loc 1 52 0
 316 0076 10BD     	 pop {r4,pc}
 317              	 .cfi_endproc
 318              	.LFE73:
 320              	 .section .init_array,"aw",%init_array
 321              	 .align 2
 322 0000 00000000 	 .word _GLOBAL__sub_I__ZN8DigiPotsC2ERK3PinRKt(target1)
 323              	 .global _ZN8DigiPotsC1ERK3PinRKt
 324              	 .thumb_set _ZN8DigiPotsC1ERK3PinRKt,_ZN8DigiPotsC2ERK3PinRKt
 325              	 .section .bss._ZL5Port0,"aw",%nobits
 326              	 .align 2
 327              	 .set .LANCHOR0,.+0
 330              	_ZL5Port0:
 331 0000 00       	 .space 1
 332 0001 000000   	 .section .bss._ZL5Port1,"aw",%nobits
 333              	 .align 2
 334              	 .set .LANCHOR1,.+0
 337              	_ZL5Port1:
 338 0000 00       	 .space 1
 339 0001 000000   	 .section .bss._ZL5Port2,"aw",%nobits
 340              	 .align 2
 341              	 .set .LANCHOR2,.+0
 344              	_ZL5Port2:
 345 0000 00       	 .space 1
 346 0001 000000   	 .section .bss._ZL5Port3,"aw",%nobits
 347              	 .align 2
 348              	 .set .LANCHOR3,.+0
 351              	_ZL5Port3:
 352 0000 00       	 .space 1
 353 0001 000000   	 .section .bss._ZL5Port4,"aw",%nobits
 354              	 .align 2
 355              	 .set .LANCHOR4,.+0
 358              	_ZL5Port4:
 359 0000 00       	 .space 1
 360 0001 000000   	 .section .bss._ZL8NullPort,"aw",%nobits
 361              	 .align 2
 362              	 .set .LANCHOR5,.+0
 365              	_ZL8NullPort:
 366 0000 00       	 .space 1
 367 0001 000000   	 .section .bss._ZL7NullPin,"aw",%nobits
 368              	 .align 2
 369              	 .set .LANCHOR6,.+0
 372              	_ZL7NullPin:
 373 0000 00000000 	 .space 5
 373      00
 374 0005 000000   	 .text
 375              	.Letext0:
 376              	 .file 5 "c:\\program files\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/gcc/arm-none-eabi/4.6.3/../../../../arm-none-eabi/include/stdint.h"
 377              	 .file 6 "src/MightyBoard/Motherboard/EepromMap.hh"
 378              	 .file 7 "src/MightyBoard/shared/DigiPots.hh"
 379              	 .file 8 "src/MightyBoard/Motherboard/system/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 DigiPots.cc
    {standard input}:19     .text._ZN8DigiPotsC2ERK3PinRKt:00000000 $t
    {standard input}:24     .text._ZN8DigiPotsC2ERK3PinRKt:00000000 _ZN8DigiPotsC2ERK3PinRKt
    {standard input}:56     .text._ZN8DigiPots9resetPotsEv:00000000 $t
    {standard input}:61     .text._ZN8DigiPots9resetPotsEv:00000000 _ZN8DigiPots9resetPotsEv
    {standard input}:138    .text._ZN8DigiPots9resetPotsEv:00000068 $d
    {standard input}:143    .text._ZN8DigiPots4initEh:00000000 $t
    {standard input}:148    .text._ZN8DigiPots4initEh:00000000 _ZN8DigiPots4initEh
    {standard input}:171    .text._ZN8DigiPots11setPotValueEh:00000000 $t
    {standard input}:176    .text._ZN8DigiPots11setPotValueEh:00000000 _ZN8DigiPots11setPotValueEh
    {standard input}:251    .text._ZN8DigiPots11setPotValueEh:00000064 $d
    {standard input}:256    .text._GLOBAL__sub_I__ZN8DigiPotsC2ERK3PinRKt:00000000 $t
    {standard input}:260    .text._GLOBAL__sub_I__ZN8DigiPotsC2ERK3PinRKt:00000000 _GLOBAL__sub_I__ZN8DigiPotsC2ERK3PinRKt
    {standard input}:327    .bss._ZL5Port0:00000000 .LANCHOR0
    {standard input}:334    .bss._ZL5Port1:00000000 .LANCHOR1
    {standard input}:341    .bss._ZL5Port2:00000000 .LANCHOR2
    {standard input}:348    .bss._ZL5Port3:00000000 .LANCHOR3
    {standard input}:355    .bss._ZL5Port4:00000000 .LANCHOR4
    {standard input}:362    .bss._ZL8NullPort:00000000 .LANCHOR5
    {standard input}:369    .bss._ZL7NullPin:00000000 .LANCHOR6
    {standard input}:321    .init_array:00000000 $d
    {standard input}:24     .text._ZN8DigiPotsC2ERK3PinRKt:00000000 _ZN8DigiPotsC1ERK3PinRKt
    {standard input}:326    .bss._ZL5Port0:00000000 $d
    {standard input}:330    .bss._ZL5Port0:00000000 _ZL5Port0
    {standard input}:333    .bss._ZL5Port1:00000000 $d
    {standard input}:337    .bss._ZL5Port1:00000000 _ZL5Port1
    {standard input}:340    .bss._ZL5Port2:00000000 $d
    {standard input}:344    .bss._ZL5Port2:00000000 _ZL5Port2
    {standard input}:347    .bss._ZL5Port3:00000000 $d
    {standard input}:351    .bss._ZL5Port3:00000000 _ZL5Port3
    {standard input}:354    .bss._ZL5Port4:00000000 $d
    {standard input}:358    .bss._ZL5Port4:00000000 _ZL5Port4
    {standard input}:361    .bss._ZL8NullPort:00000000 $d
    {standard input}:365    .bss._ZL8NullPort:00000000 _ZL8NullPort
    {standard input}:368    .bss._ZL7NullPin:00000000 $d
    {standard input}:372    .bss._ZL7NullPin:00000000 _ZL7NullPin
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
_ZN3PinC1ERKS_
_ZN14SoftI2cManager10i2cManagerE
_ZN14SoftI2cManager5startEhRK3Pin
_ZN6eeprom10getEeprom8Eth
_ZN14SoftI2cManager5writeEhRK3Pin
_ZN14SoftI2cManager4stopEv
_ZN7LPCPortC1Eh
_ZN3PinC1ERK7LPCPorth
